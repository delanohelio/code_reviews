{"pr_number": 1367, "pr_title": "implement cancel function", "pr_author": "Rkr1992", "pr_createdAt": "2020-06-03T22:38:23Z", "pr_url": "https://github.com/yahoo/elide/pull/1367", "merge_commit": "ff86c56fde9064e1719ea35660fd04c42c949662", "timeline": [{"oid": "c0492ff9887bf3ead882e6676f8d4b6bef2fbc12", "url": "https://github.com/yahoo/elide/commit/c0492ff9887bf3ead882e6676f8d4b6bef2fbc12", "message": "implement cancel function", "committedDate": "2020-06-03T22:35:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI3Nzg2MA==", "url": "https://github.com/yahoo/elide/pull/1367#discussion_r435277860", "body": "Elide core should not depend directly on Hibernate.  Only the data stores that use hibernate should have this dependency.", "bodyText": "Elide core should not depend directly on Hibernate.  Only the data stores that use hibernate should have this dependency.", "bodyHTML": "<p dir=\"auto\">Elide core should not depend directly on Hibernate.  Only the data stores that use hibernate should have this dependency.</p>", "author": "aklish", "createdAt": "2020-06-04T13:56:48Z", "path": "elide-core/src/main/java/com/yahoo/elide/core/CancelSession.java", "diffHunk": "@@ -0,0 +1,23 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+\n+import org.hibernate.Session;", "originalCommit": "c0492ff9887bf3ead882e6676f8d4b6bef2fbc12", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a6dd1de7fddc77fd1ca4f814b4d6e0f0d5de3bb1", "changed_code": [{"header": "diff --git a/elide-core/src/main/java/com/yahoo/elide/core/CancelSession.java b/elide-core/src/main/java/com/yahoo/elide/core/CancelSession.java\ndeleted file mode 100644\nindex ebabaf06a..000000000\n--- a/elide-core/src/main/java/com/yahoo/elide/core/CancelSession.java\n+++ /dev/null\n", "chunk": "@@ -1,23 +0,0 @@\n-/*\n- * Copyright 2020, Yahoo Inc.\n- * Licensed under the Apache License, Version 2.0\n- * See LICENSE file in project root for terms.\n- */\n-\n-import org.hibernate.Session;\n-\n-/**\n- * Cancel Session implementation.\n- */\n-\n-public abstract class CancelSession {\n-   private final Session session;\n-   \n-   protected CancelSession(Session session) {\n-       this.session = session;\n-   }\n-\n-   public void cancel() {\n-       session.cancelQuery();\n-   }\n-}\n", "next_change": null}]}, "revised_code_in_main": {"commit": "ff86c56fde9064e1719ea35660fd04c42c949662", "changed_code": [{"header": "diff --git a/elide-core/src/main/java/com/yahoo/elide/core/CancelSession.java b/elide-core/src/main/java/com/yahoo/elide/core/CancelSession.java\ndeleted file mode 100644\nindex ebabaf06a..000000000\n--- a/elide-core/src/main/java/com/yahoo/elide/core/CancelSession.java\n+++ /dev/null\n", "chunk": "@@ -1,23 +0,0 @@\n-/*\n- * Copyright 2020, Yahoo Inc.\n- * Licensed under the Apache License, Version 2.0\n- * See LICENSE file in project root for terms.\n- */\n-\n-import org.hibernate.Session;\n-\n-/**\n- * Cancel Session implementation.\n- */\n-\n-public abstract class CancelSession {\n-   private final Session session;\n-   \n-   protected CancelSession(Session session) {\n-       this.session = session;\n-   }\n-\n-   public void cancel() {\n-       session.cancelQuery();\n-   }\n-}\n", "next_change": null}]}, "commits_in_main": [{"oid": "ff86c56fde9064e1719ea35660fd04c42c949662", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI4MTUyMw==", "url": "https://github.com/yahoo/elide/pull/1367#discussion_r435281523", "body": "Instead of creating an abstract class - create a functional interface (with no dependencies on things like hibernate).  ", "bodyText": "Instead of creating an abstract class - create a functional interface (with no dependencies on things like hibernate).", "bodyHTML": "<p dir=\"auto\">Instead of creating an abstract class - create a functional interface (with no dependencies on things like hibernate).</p>", "author": "aklish", "createdAt": "2020-06-04T14:01:36Z", "path": "elide-core/src/main/java/com/yahoo/elide/core/CancelSession.java", "diffHunk": "@@ -0,0 +1,23 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+\n+import org.hibernate.Session;\n+\n+/**\n+ * Cancel Session implementation.\n+ */\n+\n+public abstract class CancelSession {", "originalCommit": "c0492ff9887bf3ead882e6676f8d4b6bef2fbc12", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI5MDkzMQ==", "url": "https://github.com/yahoo/elide/pull/1367#discussion_r435290931", "bodyText": "I think the functionalInterface will require an entityManager as an argument - and as such - it should probably live in the Aggregation Store and JpaStore respectively.", "author": "aklish", "createdAt": "2020-06-04T14:13:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI4MTUyMw=="}], "type": "inlineReview", "revised_code": {"commit": "a6dd1de7fddc77fd1ca4f814b4d6e0f0d5de3bb1", "changed_code": [{"header": "diff --git a/elide-core/src/main/java/com/yahoo/elide/core/CancelSession.java b/elide-core/src/main/java/com/yahoo/elide/core/CancelSession.java\ndeleted file mode 100644\nindex ebabaf06a..000000000\n--- a/elide-core/src/main/java/com/yahoo/elide/core/CancelSession.java\n+++ /dev/null\n", "chunk": "@@ -1,23 +0,0 @@\n-/*\n- * Copyright 2020, Yahoo Inc.\n- * Licensed under the Apache License, Version 2.0\n- * See LICENSE file in project root for terms.\n- */\n-\n-import org.hibernate.Session;\n-\n-/**\n- * Cancel Session implementation.\n- */\n-\n-public abstract class CancelSession {\n-   private final Session session;\n-   \n-   protected CancelSession(Session session) {\n-       this.session = session;\n-   }\n-\n-   public void cancel() {\n-       session.cancelQuery();\n-   }\n-}\n", "next_change": null}]}, "revised_code_in_main": {"commit": "ff86c56fde9064e1719ea35660fd04c42c949662", "changed_code": [{"header": "diff --git a/elide-core/src/main/java/com/yahoo/elide/core/CancelSession.java b/elide-core/src/main/java/com/yahoo/elide/core/CancelSession.java\ndeleted file mode 100644\nindex ebabaf06a..000000000\n--- a/elide-core/src/main/java/com/yahoo/elide/core/CancelSession.java\n+++ /dev/null\n", "chunk": "@@ -1,23 +0,0 @@\n-/*\n- * Copyright 2020, Yahoo Inc.\n- * Licensed under the Apache License, Version 2.0\n- * See LICENSE file in project root for terms.\n- */\n-\n-import org.hibernate.Session;\n-\n-/**\n- * Cancel Session implementation.\n- */\n-\n-public abstract class CancelSession {\n-   private final Session session;\n-   \n-   protected CancelSession(Session session) {\n-       this.session = session;\n-   }\n-\n-   public void cancel() {\n-       session.cancelQuery();\n-   }\n-}\n", "next_change": null}]}, "commits_in_main": [{"oid": "ff86c56fde9064e1719ea35660fd04c42c949662", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI4NzAyNQ==", "url": "https://github.com/yahoo/elide/pull/1367#discussion_r435287025", "body": "YOu can make this a local variable and use it multiple places.", "bodyText": "YOu can make this a local variable and use it multiple places.", "bodyHTML": "<p dir=\"auto\">YOu can make this a local variable and use it multiple places.</p>", "author": "aklish", "createdAt": "2020-06-04T14:08:36Z", "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java", "diffHunk": "@@ -376,10 +378,10 @@ default AuditLogger getAuditLogger() {\n      */\n     default DataStore getDataStore(MetaDataStore metaDataStore, AggregationDataStore aggregationDataStore,\n             EntityManagerFactory entityManagerFactory) {\n-\n+\tCancelSession cancelSession = new CancelSession(entityManagerFactory.get().unwrap(Session.class));", "originalCommit": "c0492ff9887bf3ead882e6676f8d4b6bef2fbc12", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI4ODMwOQ==", "url": "https://github.com/yahoo/elide/pull/1367#discussion_r435288309", "bodyText": "Another issue - you are unwrapping the factory - not the entity manager.  I don't think that is correct.", "author": "aklish", "createdAt": "2020-06-04T14:10:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI4NzAyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "a6dd1de7fddc77fd1ca4f814b4d6e0f0d5de3bb1", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex ec2563f21..55d936b65 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -378,11 +377,10 @@ public interface ElideStandaloneSettings {\n      */\n     default DataStore getDataStore(MetaDataStore metaDataStore, AggregationDataStore aggregationDataStore,\n             EntityManagerFactory entityManagerFactory) {\n-\tCancelSession cancelSession = new CancelSession(entityManagerFactory.get().unwrap(Session.class));\n         DataStore jpaDataStore = new JpaDataStore(\n                 () -> { return entityManagerFactory.createEntityManager(); },\n-                (em -> { return new NonJtaTransaction(em, cancelSession); }));\n-\n+\t\t(em -> { return new NonJtaTransaction(em, em.unwrap(Session.class).cancelQuery()); }),\n+                     (entityManager -> { entityManager.unwrap(Session.class).cancelQuery();}));\n         DataStore dataStore = new MultiplexManager(jpaDataStore, metaDataStore, aggregationDataStore);\n \n         return dataStore;\n", "next_change": {"commit": "de929061ff81b6969c97c27683791b478c0ac1c2", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 55d936b65..b14fa3bee 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -379,8 +384,7 @@ public interface ElideStandaloneSettings {\n             EntityManagerFactory entityManagerFactory) {\n         DataStore jpaDataStore = new JpaDataStore(\n                 () -> { return entityManagerFactory.createEntityManager(); },\n-\t\t(em -> { return new NonJtaTransaction(em, em.unwrap(Session.class).cancelQuery()); }),\n-                     (entityManager -> { entityManager.unwrap(Session.class).cancelQuery();}));\n+\t\t(em -> { return new NonJtaTransaction(em, jpaTransactionCancel); }));\n         DataStore dataStore = new MultiplexManager(jpaDataStore, metaDataStore, aggregationDataStore);\n \n         return dataStore;\n", "next_change": {"commit": "c637d51fba403ac0e2c8fad524d4ea781e985951", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex b14fa3bee..5a26c2e2c 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -384,7 +384,9 @@ public interface ElideStandaloneSettings {\n             EntityManagerFactory entityManagerFactory) {\n         DataStore jpaDataStore = new JpaDataStore(\n                 () -> { return entityManagerFactory.createEntityManager(); },\n-\t\t(em -> { return new NonJtaTransaction(em, jpaTransactionCancel); }));\n+\t\t(em -> { return new NonJtaTransaction(em, jpaTransactionCancel); }),\n+                () -> { return jpaTransactionCancel; });\n+\n         DataStore dataStore = new MultiplexManager(jpaDataStore, metaDataStore, aggregationDataStore);\n \n         return dataStore;\n", "next_change": {"commit": "3cd05225a53f92969d1ad2e198bcc69a8bbf6553", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 5a26c2e2c..81d2ae016 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -384,7 +384,7 @@ public interface ElideStandaloneSettings {\n             EntityManagerFactory entityManagerFactory) {\n         DataStore jpaDataStore = new JpaDataStore(\n                 () -> { return entityManagerFactory.createEntityManager(); },\n-\t\t(em -> { return new NonJtaTransaction(em, jpaTransactionCancel); }),\n+                ((em, txCancel) -> { return new NonJtaTransaction(em, txCancel); }),\n                 () -> { return jpaTransactionCancel; });\n \n         DataStore dataStore = new MultiplexManager(jpaDataStore, metaDataStore, aggregationDataStore);\n", "next_change": {"commit": "c492c68cc1cd98c7ae88b9286a345b73443a8af3", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 81d2ae016..9caa6bdfd 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -385,7 +385,7 @@ public interface ElideStandaloneSettings {\n         DataStore jpaDataStore = new JpaDataStore(\n                 () -> { return entityManagerFactory.createEntityManager(); },\n                 ((em, txCancel) -> { return new NonJtaTransaction(em, txCancel); }),\n-                () -> { return jpaTransactionCancel; });\n+                jpaTransactionCancel);\n \n         DataStore dataStore = new MultiplexManager(jpaDataStore, metaDataStore, aggregationDataStore);\n \n", "next_change": {"commit": "3123771c5f0dd5b3f4684a3315f57c941aa3a1f4", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 9caa6bdfd..7cb6ff25e 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -385,7 +385,7 @@ public interface ElideStandaloneSettings {\n         DataStore jpaDataStore = new JpaDataStore(\n                 () -> { return entityManagerFactory.createEntityManager(); },\n                 ((em, txCancel) -> { return new NonJtaTransaction(em, txCancel); }),\n-                jpaTransactionCancel);\n+                JTC);\n \n         DataStore dataStore = new MultiplexManager(jpaDataStore, metaDataStore, aggregationDataStore);\n \n", "next_change": {"commit": "8f1cfb480ee2db34373cee4ca35e5eef6b339a51", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 7cb6ff25e..28faa41df 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -384,8 +386,7 @@ public interface ElideStandaloneSettings {\n             EntityManagerFactory entityManagerFactory) {\n         DataStore jpaDataStore = new JpaDataStore(\n                 () -> { return entityManagerFactory.createEntityManager(); },\n-                ((em, txCancel) -> { return new NonJtaTransaction(em, txCancel); }),\n-                JTC);\n+                (em) -> { return new NonJtaTransaction(em, JTC); } );\n \n         DataStore dataStore = new MultiplexManager(jpaDataStore, metaDataStore, aggregationDataStore);\n \n", "next_change": {"commit": "d7556cb189b6e83070942c10bdaf33054ecc0f71", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 28faa41df..7e16c486e 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -386,7 +383,7 @@ public interface ElideStandaloneSettings {\n             EntityManagerFactory entityManagerFactory) {\n         DataStore jpaDataStore = new JpaDataStore(\n                 () -> { return entityManagerFactory.createEntityManager(); },\n-                (em) -> { return new NonJtaTransaction(em, JTC); } );\n+                (em) -> { return new NonJtaTransaction(em, FUNC); });\n \n         DataStore dataStore = new MultiplexManager(jpaDataStore, metaDataStore, aggregationDataStore);\n \n", "next_change": {"commit": "127517bb46972dbe127cfd5e32d70439aa385381", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 7e16c486e..7e9a2aeb8 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -383,7 +383,7 @@ public interface ElideStandaloneSettings {\n             EntityManagerFactory entityManagerFactory) {\n         DataStore jpaDataStore = new JpaDataStore(\n                 () -> { return entityManagerFactory.createEntityManager(); },\n-                (em) -> { return new NonJtaTransaction(em, FUNC); });\n+                (em) -> { return new NonJtaTransaction(em, TXCANCEL); });\n \n         DataStore dataStore = new MultiplexManager(jpaDataStore, metaDataStore, aggregationDataStore);\n \n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "ff86c56fde9064e1719ea35660fd04c42c949662", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex ec2563f21..7e9a2aeb8 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -378,10 +381,9 @@ public interface ElideStandaloneSettings {\n      */\n     default DataStore getDataStore(MetaDataStore metaDataStore, AggregationDataStore aggregationDataStore,\n             EntityManagerFactory entityManagerFactory) {\n-\tCancelSession cancelSession = new CancelSession(entityManagerFactory.get().unwrap(Session.class));\n         DataStore jpaDataStore = new JpaDataStore(\n                 () -> { return entityManagerFactory.createEntityManager(); },\n-                (em -> { return new NonJtaTransaction(em, cancelSession); }));\n+                (em) -> { return new NonJtaTransaction(em, TXCANCEL); });\n \n         DataStore dataStore = new MultiplexManager(jpaDataStore, metaDataStore, aggregationDataStore);\n \n", "next_change": {"commit": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 7e9a2aeb8..00b641dbb 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -345,147 +285,11 @@ public interface ElideStandaloneSettings {\n     }\n \n     /**\n-     * Gets the audit logger for elide.\n+     * Gets the audit logger for elide\n      *\n      * @return Default: Slf4jLogger\n      */\n     default AuditLogger getAuditLogger() {\n         return new Slf4jLogger();\n     }\n-\n-    /**\n-     * Gets the dynamic compiler for elide.\n-     *\n-     * @return Optional ElideDynamicEntityCompiler\n-     */\n-    default Optional<ElideDynamicEntityCompiler> getDynamicCompiler() {\n-        ElideDynamicEntityCompiler dynamicEntityCompiler = null;\n-\n-        if (enableDynamicModelConfig()) {\n-            try {\n-                dynamicEntityCompiler = new ElideDynamicEntityCompiler(getDynamicConfigPath());\n-            } catch (Exception e) { // thrown by in memory compiler\n-                throw new IllegalStateException(e);\n-            }\n-        }\n-\n-        return Optional.ofNullable(dynamicEntityCompiler);\n-    }\n-\n-    /**\n-     * Gets the DataStore for elide.\n-     * @param metaDataStore MetaDataStore object.\n-     * @param aggregationDataStore AggregationDataStore object.\n-     * @param entityManagerFactory EntityManagerFactory object.\n-     * @return EntityDictionary object initialized.\n-     */\n-    default DataStore getDataStore(MetaDataStore metaDataStore, AggregationDataStore aggregationDataStore,\n-            EntityManagerFactory entityManagerFactory) {\n-        DataStore jpaDataStore = new JpaDataStore(\n-                () -> { return entityManagerFactory.createEntityManager(); },\n-                (em) -> { return new NonJtaTransaction(em, TXCANCEL); });\n-\n-        DataStore dataStore = new MultiplexManager(jpaDataStore, metaDataStore, aggregationDataStore);\n-\n-        return dataStore;\n-    }\n-\n-    /**\n-     * Gets the AggregationDataStore for elide.\n-     * @param queryEngine query engine object.\n-     * @param optionalCompiler optional dynamic compiler object.\n-     * @return AggregationDataStore object initialized.\n-     */\n-    default AggregationDataStore getAggregationDataStore(QueryEngine queryEngine,\n-            Optional<ElideDynamicEntityCompiler> optionalCompiler) {\n-        AggregationDataStore.AggregationDataStoreBuilder aggregationDataStoreBuilder = AggregationDataStore.builder()\n-                .queryEngine(queryEngine);\n-\n-        if (enableDynamicModelConfig()) {\n-            Set<Class<?>> annotatedClasses = getDynamicClassesIfAvailable(optionalCompiler, FromTable.class);\n-            annotatedClasses.addAll(getDynamicClassesIfAvailable(optionalCompiler, FromSubquery.class));\n-            aggregationDataStoreBuilder.dynamicCompiledClasses(annotatedClasses);\n-        }\n-        return aggregationDataStoreBuilder.build();\n-    }\n-\n-    /**\n-     * Gets the EntityDictionary for elide.\n-     * @param injector Service locator for web service for dependency injection.\n-     * @param optionalCompiler optional dynamic compiler object.\n-     * @return EntityDictionary object initialized.\n-     */\n-    default EntityDictionary getEntityDictionary(ServiceLocator injector,\n-            Optional<ElideDynamicEntityCompiler> optionalCompiler) {\n-        EntityDictionary dictionary = new EntityDictionary(getCheckMappings(),\n-                new Injector() {\n-                    @Override\n-                    public void inject(Object entity) {\n-                        injector.inject(entity);\n-                    }\n-\n-                    @Override\n-                    public <T> T instantiate(Class<T> cls) {\n-                        return injector.create(cls);\n-                    }\n-                });\n-\n-        dictionary.scanForSecurityChecks();\n-\n-        Set<Class<?>> annotatedSecurityClasses = getDynamicClassesIfAvailable(optionalCompiler, SecurityCheck.class);\n-\n-        dictionary.addSecurityChecks(annotatedSecurityClasses);\n-\n-        return dictionary;\n-    }\n-\n-    /**\n-     * Gets the metadatastore for elide.\n-     * @param optionalCompiler optional dynamic compiler object.\n-     * @return MetaDataStore object initialized.\n-     */\n-    default MetaDataStore getMetaDataStore(Optional<ElideDynamicEntityCompiler> optionalCompiler) {\n-        MetaDataStore metaDataStore = null;\n-\n-        if (optionalCompiler.isPresent()) {\n-            try {\n-                metaDataStore = new MetaDataStore(optionalCompiler.get());\n-            } catch (ClassNotFoundException e) {\n-                throw new IllegalStateException(e);\n-            }\n-        } else {\n-            metaDataStore = new MetaDataStore();\n-        }\n-\n-        return metaDataStore;\n-    }\n-\n-    /**\n-     * Gets the QueryEngine for elide.\n-     * @param metaDataStore MetaDataStore object.\n-     * @param entityManagerFactory EntityManagerFactory object.\n-     * @return QueryEngine object initialized.\n-     */\n-    default QueryEngine getQueryEngine(MetaDataStore metaDataStore, EntityManagerFactory entityManagerFactory) {\n-        return new SQLQueryEngine(metaDataStore, entityManagerFactory, TXCANCEL);\n-    }\n-\n-    static Set<Class<?>> getDynamicClassesIfAvailable(Optional<ElideDynamicEntityCompiler> optionalCompiler,\n-            Class<?> classz) {\n-        Set<Class<?>> annotatedClasses = new HashSet<Class<?>>();\n-\n-        if (!optionalCompiler.isPresent()) {\n-            return annotatedClasses;\n-        }\n-\n-        ElideDynamicEntityCompiler compiler = optionalCompiler.get();\n-\n-        try {\n-            annotatedClasses = compiler.findAnnotatedClasses(classz);\n-        } catch (ClassNotFoundException e) {\n-            throw new IllegalStateException(e);\n-        }\n-\n-        return annotatedClasses;\n-    }\n }\n", "next_change": {"commit": "95b3031194e0e0f2394228d6a6525a80f13fef04", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 00b641dbb..8bda402cd 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -285,11 +340,150 @@ public interface ElideStandaloneSettings {\n     }\n \n     /**\n-     * Gets the audit logger for elide\n+     * Gets the audit logger for elide.\n      *\n      * @return Default: Slf4jLogger\n      */\n     default AuditLogger getAuditLogger() {\n         return new Slf4jLogger();\n     }\n+\n+    /**\n+     * Gets the dynamic compiler for elide.\n+     *\n+     * @return Optional ElideDynamicEntityCompiler\n+     */\n+    default Optional<ElideDynamicEntityCompiler> getDynamicCompiler() {\n+        ElideDynamicEntityCompiler dynamicEntityCompiler = null;\n+\n+        if (enableDynamicModelConfig()) {\n+            try {\n+                dynamicEntityCompiler = new ElideDynamicEntityCompiler(getDynamicConfigPath());\n+            } catch (Exception e) { // thrown by in memory compiler\n+                throw new IllegalStateException(e);\n+            }\n+        }\n+\n+        return Optional.ofNullable(dynamicEntityCompiler);\n+    }\n+\n+    /**\n+     * Gets the DataStore for elide.\n+     * @param metaDataStore MetaDataStore object.\n+     * @param aggregationDataStore AggregationDataStore object.\n+     * @param entityManagerFactory EntityManagerFactory object.\n+     * @return EntityDictionary object initialized.\n+     */\n+    default DataStore getDataStore(MetaDataStore metaDataStore, AggregationDataStore aggregationDataStore,\n+            EntityManagerFactory entityManagerFactory) {\n+\n+        DataStore jpaDataStore = new JpaDataStore(\n+                () -> { return entityManagerFactory.createEntityManager(); },\n+                (em -> { return new NonJtaTransaction(em); }));\n+\n+        DataStore dataStore = new MultiplexManager(jpaDataStore, metaDataStore, aggregationDataStore);\n+\n+        return dataStore;\n+    }\n+\n+    /**\n+     * Gets the AggregationDataStore for elide.\n+     * @param queryEngine query engine object.\n+     * @param optionalCompiler optional dynamic compiler object.\n+     * @return AggregationDataStore object initialized.\n+     */\n+    default AggregationDataStore getAggregationDataStore(QueryEngine queryEngine,\n+            Optional<ElideDynamicEntityCompiler> optionalCompiler) {\n+        AggregationDataStore aggregationDataStore = null;\n+\n+        if (enableDynamicModelConfig()) {\n+            Set<Class<?>> annotatedClasses = getDynamicClassesIfAvailable(optionalCompiler, FromTable.class);\n+            annotatedClasses.addAll(getDynamicClassesIfAvailable(optionalCompiler, FromSubquery.class));\n+            aggregationDataStore = new AggregationDataStore(queryEngine, annotatedClasses);\n+        } else {\n+            aggregationDataStore = new AggregationDataStore(queryEngine);\n+        }\n+\n+        return aggregationDataStore;\n+    }\n+\n+    /**\n+     * Gets the EntityDictionary for elide.\n+     * @param injector Service locator for web service for dependency injection.\n+     * @param optionalCompiler optional dynamic compiler object.\n+     * @return EntityDictionary object initialized.\n+     */\n+    default EntityDictionary getEntityDictionary(ServiceLocator injector,\n+            Optional<ElideDynamicEntityCompiler> optionalCompiler) {\n+        EntityDictionary dictionary = new EntityDictionary(getCheckMappings(),\n+                new Injector() {\n+                    @Override\n+                    public void inject(Object entity) {\n+                        injector.inject(entity);\n+                    }\n+\n+                    @Override\n+                    public <T> T instantiate(Class<T> cls) {\n+                        return injector.create(cls);\n+                    }\n+                });\n+\n+        dictionary.scanForSecurityChecks();\n+\n+        Set<Class<?>> annotatedSecurityClasses = getDynamicClassesIfAvailable(optionalCompiler, SecurityCheck.class);\n+\n+        dictionary.addSecurityChecks(annotatedSecurityClasses);\n+\n+        return dictionary;\n+    }\n+\n+    /**\n+     * Gets the metadatastore for elide.\n+     * @param optionalCompiler optional dynamic compiler object.\n+     * @return MetaDataStore object initialized.\n+     */\n+    default MetaDataStore getMetaDataStore(Optional<ElideDynamicEntityCompiler> optionalCompiler) {\n+        MetaDataStore metaDataStore = null;\n+\n+        if (optionalCompiler.isPresent()) {\n+            try {\n+                metaDataStore = new MetaDataStore(optionalCompiler.get());\n+            } catch (ClassNotFoundException e) {\n+                throw new IllegalStateException(e);\n+            }\n+        } else {\n+            metaDataStore = new MetaDataStore();\n+        }\n+\n+        return metaDataStore;\n+    }\n+\n+    /**\n+     * Gets the QueryEngine for elide.\n+     * @param metaDataStore MetaDataStore object.\n+     * @param entityManagerFactory EntityManagerFactory object.\n+     * @return QueryEngine object initialized.\n+     */\n+    default QueryEngine getQueryEngine(MetaDataStore metaDataStore, EntityManagerFactory entityManagerFactory) {\n+        return new SQLQueryEngine(metaDataStore, entityManagerFactory, null);\n+    }\n+\n+    static Set<Class<?>> getDynamicClassesIfAvailable(Optional<ElideDynamicEntityCompiler> optionalCompiler,\n+            Class<?> classz) {\n+        Set<Class<?>> annotatedClasses = new HashSet<Class<?>>();\n+\n+        if (!optionalCompiler.isPresent()) {\n+            return annotatedClasses;\n+        }\n+\n+        ElideDynamicEntityCompiler compiler = optionalCompiler.get();\n+\n+        try {\n+            annotatedClasses = compiler.findAnnotatedClasses(classz);\n+        } catch (ClassNotFoundException e) {\n+            throw new IllegalStateException(e);\n+        }\n+\n+        return annotatedClasses;\n+    }\n }\n", "next_change": {"commit": "dcb6336070c158b923a8e5a7ec92502ea57f36ee", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 8bda402cd..c4cbeb54f 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -461,29 +457,26 @@ public interface ElideStandaloneSettings {\n     /**\n      * Gets the QueryEngine for elide.\n      * @param metaDataStore MetaDataStore object.\n-     * @param entityManagerFactory EntityManagerFactory object.\n+     * @param defaultConnectionDetails default DataSource Object and SQLDialect Object.\n+     * @param validator Optional dynamic config validator.\n+     * @param dataSourceConfiguration DataSource Configuration.\n+     * @param dbPasswordExtractor Password Extractor Implementation.\n      * @return QueryEngine object initialized.\n      */\n-    default QueryEngine getQueryEngine(MetaDataStore metaDataStore, EntityManagerFactory entityManagerFactory) {\n-        return new SQLQueryEngine(metaDataStore, entityManagerFactory, null);\n-    }\n-\n-    static Set<Class<?>> getDynamicClassesIfAvailable(Optional<ElideDynamicEntityCompiler> optionalCompiler,\n-            Class<?> classz) {\n-        Set<Class<?>> annotatedClasses = new HashSet<Class<?>>();\n-\n-        if (!optionalCompiler.isPresent()) {\n-            return annotatedClasses;\n+    default QueryEngine getQueryEngine(MetaDataStore metaDataStore, ConnectionDetails defaultConnectionDetails,\n+                    Optional<DynamicConfigValidator> validator,\n+                    DataSourceConfiguration dataSourceConfiguration, DBPasswordExtractor dbPasswordExtractor) {\n+        if (validator.isPresent()) {\n+            Map<String, ConnectionDetails> connectionDetailsMap = new HashMap<>();\n+\n+            validator.get().getElideSQLDBConfig().getDbconfigs().forEach(dbConfig -> {\n+                connectionDetailsMap.put(dbConfig.getName(),\n+                                new ConnectionDetails(\n+                                                dataSourceConfiguration.getDataSource(dbConfig, dbPasswordExtractor),\n+                                                SQLDialectFactory.getDialect(dbConfig.getDialect())));\n+            });\n+            return new SQLQueryEngine(metaDataStore, defaultConnectionDetails, connectionDetailsMap);\n         }\n-\n-        ElideDynamicEntityCompiler compiler = optionalCompiler.get();\n-\n-        try {\n-            annotatedClasses = compiler.findAnnotatedClasses(classz);\n-        } catch (ClassNotFoundException e) {\n-            throw new IllegalStateException(e);\n-        }\n-\n-        return annotatedClasses;\n+        return new SQLQueryEngine(metaDataStore, defaultConnectionDetails);\n     }\n }\n", "next_change": {"commit": "e1e07dbeabb690560754c84200b67e7a8d4d9229", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex c4cbeb54f..9e09a65a7 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -458,24 +486,24 @@ public interface ElideStandaloneSettings {\n      * Gets the QueryEngine for elide.\n      * @param metaDataStore MetaDataStore object.\n      * @param defaultConnectionDetails default DataSource Object and SQLDialect Object.\n-     * @param validator Optional dynamic config validator.\n+     * @param dynamicConfiguration Optional dynamic config.\n      * @param dataSourceConfiguration DataSource Configuration.\n      * @param dbPasswordExtractor Password Extractor Implementation.\n      * @return QueryEngine object initialized.\n      */\n     default QueryEngine getQueryEngine(MetaDataStore metaDataStore, ConnectionDetails defaultConnectionDetails,\n-                    Optional<DynamicConfigValidator> validator,\n+                    Optional<DynamicConfiguration> dynamicConfiguration,\n                     DataSourceConfiguration dataSourceConfiguration, DBPasswordExtractor dbPasswordExtractor) {\n-        if (validator.isPresent()) {\n+        if (dynamicConfiguration.isPresent()) {\n             Map<String, ConnectionDetails> connectionDetailsMap = new HashMap<>();\n \n-            validator.get().getElideSQLDBConfig().getDbconfigs().forEach(dbConfig -> {\n+            dynamicConfiguration.get().getDatabaseConfigurations().forEach(dbConfig -> {\n                 connectionDetailsMap.put(dbConfig.getName(),\n                                 new ConnectionDetails(\n                                                 dataSourceConfiguration.getDataSource(dbConfig, dbPasswordExtractor),\n                                                 SQLDialectFactory.getDialect(dbConfig.getDialect())));\n             });\n-            return new SQLQueryEngine(metaDataStore, defaultConnectionDetails, connectionDetailsMap);\n+            return new SQLQueryEngine(metaDataStore, defaultConnectionDetails, connectionDetailsMap, new HashSet<>());\n         }\n         return new SQLQueryEngine(metaDataStore, defaultConnectionDetails);\n     }\n", "next_change": {"commit": "43598e8411d544b31d9807ded4f248e25ef334a4", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 9e09a65a7..5dfabf6a2 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -503,7 +498,8 @@ public interface ElideStandaloneSettings {\n                                                 dataSourceConfiguration.getDataSource(dbConfig, dbPasswordExtractor),\n                                                 SQLDialectFactory.getDialect(dbConfig.getDialect())));\n             });\n-            return new SQLQueryEngine(metaDataStore, defaultConnectionDetails, connectionDetailsMap, new HashSet<>());\n+            return new SQLQueryEngine(metaDataStore, defaultConnectionDetails, connectionDetailsMap,\n+                    new HashSet<>(Arrays.asList(new AggregateBeforeJoinOptimizer(metaDataStore))));\n         }\n         return new SQLQueryEngine(metaDataStore, defaultConnectionDetails);\n     }\n", "next_change": {"commit": "6143d108eb7b1a2250370409d5362c6722c95b23", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 5dfabf6a2..9bf6ad35a 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -492,12 +490,12 @@ public interface ElideStandaloneSettings {\n         if (dynamicConfiguration.isPresent()) {\n             Map<String, ConnectionDetails> connectionDetailsMap = new HashMap<>();\n \n-            dynamicConfiguration.get().getDatabaseConfigurations().forEach(dbConfig -> {\n+            dynamicConfiguration.get().getDatabaseConfigurations().forEach(dbConfig ->\n                 connectionDetailsMap.put(dbConfig.getName(),\n                                 new ConnectionDetails(\n                                                 dataSourceConfiguration.getDataSource(dbConfig, dbPasswordExtractor),\n-                                                SQLDialectFactory.getDialect(dbConfig.getDialect())));\n-            });\n+                                                SQLDialectFactory.getDialect(dbConfig.getDialect())))\n+            );\n             return new SQLQueryEngine(metaDataStore, defaultConnectionDetails, connectionDetailsMap,\n                     new HashSet<>(Arrays.asList(new AggregateBeforeJoinOptimizer(metaDataStore))));\n         }\n", "next_change": {"commit": "0a3776bacb5809845d9a04a1263db9760f117b92", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 9bf6ad35a..7085a6328 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -497,7 +498,8 @@ public interface ElideStandaloneSettings {\n                                                 SQLDialectFactory.getDialect(dbConfig.getDialect())))\n             );\n             return new SQLQueryEngine(metaDataStore, defaultConnectionDetails, connectionDetailsMap,\n-                    new HashSet<>(Arrays.asList(new AggregateBeforeJoinOptimizer(metaDataStore))));\n+                    new HashSet<>(Arrays.asList(new AggregateBeforeJoinOptimizer(metaDataStore))),\n+                    new DefaultQueryValidator(metaDataStore.getMetadataDictionary()));\n         }\n         return new SQLQueryEngine(metaDataStore, defaultConnectionDetails);\n     }\n", "next_change": {"commit": "fe7009353573baf0206f7bb58617db97e067f900", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 7085a6328..3f1071c95 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -503,4 +526,12 @@ public interface ElideStandaloneSettings {\n         }\n         return new SQLQueryEngine(metaDataStore, defaultConnectionDetails);\n     }\n+\n+    /**\n+     * Get the class scanner for this Elide instance.\n+     * @return class scanner implementation.\n+     */\n+    default ClassScanner getClassScanner() {\n+        return new DefaultClassScanner();\n+    }\n }\n", "next_change": {"commit": "65eaaa12fc2b805135285287d4912d2329bc676d", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 3f1071c95..1098fa4f0 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -534,4 +536,13 @@ public interface ElideStandaloneSettings {\n     default ClassScanner getClassScanner() {\n         return new DefaultClassScanner();\n     }\n+\n+    /**\n+     * Get the error mapper for this Elide instance. By default no errors will be mapped.\n+     *\n+     * @return error mapper implementation\n+     */\n+    default ErrorMapper getErrorMapper() {\n+        return error -> null;\n+    }\n }\n", "next_change": {"commit": "6a319f244f5b611d3702e46013c5f8c988b5a957", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 1098fa4f0..e41dc47e3 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -545,4 +559,13 @@ public interface ElideStandaloneSettings {\n     default ErrorMapper getErrorMapper() {\n         return error -> null;\n     }\n+\n+    /**\n+     * Get the Jackson object mapper for Elide.\n+     *\n+     * @return object mapper.\n+     */\n+    default JsonApiMapper getObjectMapper() {\n+        return new JsonApiMapper();\n+    }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "ff86c56fde9064e1719ea35660fd04c42c949662", "message": "Merge commit", "committedDate": null}, {"oid": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "parent a14ccfbb7b558d27799b4e7b1916850519639708 author Jack (\uc815\ud658) <QubitPi@users.noreply.github.com> 1559678988 -0700 committer Aaron Klish <klish@verizonmedia.com> 1589583449 -0500"}, {"oid": "95b3031194e0e0f2394228d6a6525a80f13fef04", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5.x dynamic config standalone (#1259)"}, {"oid": "81dde7567aa8a6a00822a9a8f0bf901806a962e8", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add caching support to SQLQueryEngine (#1319)"}, {"oid": "9c897058ce0b9656bf2aef2318d0addc474f278a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "implement cancel function (#1367)"}, {"oid": "9ff0eb6bfa7f8f0135d21cf68cb1e44c5d515d91", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Enable query caching by default (#1378)"}, {"oid": "8fece2b8f1b3078ce2598ddb03dca66bb984df46", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Aggregation DataStore QueryLogger Implementation (#1448)"}, {"oid": "7c8fece25f8dddbe975f0072bf0267def2610ff4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Disable Aggregation DataStore by default (#1468)"}, {"oid": "80c38a134a938bfb74583d9efb6d0c2b80c39e61", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Cancel long running or cancelled async queries (#1447)"}, {"oid": "5c065ad65fcda862269b5e31a8b6dc5d8c828aaa", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Data export - Refactoring and Prep for using ResultStorageEngine (#1527)"}, {"oid": "ca35ad817f2fde68b2f9c39d0d4d9c9d44ebffd5", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Query Engine and Aggregation Store Changes for Multi Data Source Support (#1523)"}, {"oid": "bbbfb1a7522b64ef2f7fc42bae2c0f65491d1c04", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Update timegrain serde to return java.sql.Date instead of java.util.Date (#1552)"}, {"oid": "b8d0918e2f6f438eda12c12e58354a8cad3719dd", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Added item expiration to AggregationDataStore cache (#1564)"}, {"oid": "1933cc3eb6788be5fce69b1d97c6ae589623495f", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add slf4j query logger (#1618)"}, {"oid": "26bef0c192b549ed701287814055e5e7ac175a50", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Collapsed contrib directory into top level modules (#1670)"}, {"oid": "49e61867e840d9818993879436d5db1aad964c9a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Move data store interfaces (#1671)"}, {"oid": "911d29408bdeeb4ff8d78f2beea2417be4e7c673", "committedDate": "2020-12-11 16:20:28 -0600", "message": "cleaned up package hierarchy for elide-core (#1672)"}, {"oid": "cf1726f19ece846111b004b8f01fd1c135fa39b4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Create separate class for Analytics settings (#1669)"}, {"oid": "c14096bec256faf80e7674fbef22bccff1f955a3", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Moved contrib.dynamicconfighelpers to modelconfig package (#1676)"}, {"oid": "800ba874c21672a727aed4e1beacb294bfb5022e", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5.x MetaDataStore enable/disable flag (#1696)"}, {"oid": "bea43ef0f244ba01c2f7d4216b9f08f0ef4e83a4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Optionally compile hjson configs while running CLI (#1693)"}, {"oid": "6ce117b6c68f6a2fc484e3c9ba7b76ace9c596ff", "committedDate": "2021-01-08 17:36:00 -0600", "message": "Added baseUrl configuration setting for Spring and Standalone"}, {"oid": "79b23531edc46cebc43e889d7ac4727540a72105", "committedDate": "2021-01-19 14:16:37 -0600", "message": "Syntax Fixes"}, {"oid": "de9883d363ba8b4171be5d8ad508564664f6fc90", "committedDate": "2021-01-19 14:16:37 -0600", "message": "Review comments"}, {"oid": "fe3198d3cacec95d4b064ccae7109874e58d9e96", "committedDate": "2021-01-20 10:43:28 -0600", "message": "Review Comments"}, {"oid": "bca9aca28661c202a018a1c929ea888eaf8d83c7", "committedDate": "2021-01-20 10:43:28 -0600", "message": "Review Comments"}, {"oid": "93ebb969254204bd315de860bd064ca77e70cfab", "committedDate": "2021-01-29 11:36:47 -0500", "message": "TableExportHook Binding (#1802)"}, {"oid": "dcb6336070c158b923a8e5a7ec92502ea57f36ee", "committedDate": "2021-02-09 10:45:00 -0600", "message": "Add dynamic table type (#1815)"}, {"oid": "d77f1240a3fa5abf824aea54d0533be844235359", "committedDate": "2021-02-11 10:18:49 -0600", "message": "Created new interface for dynamic configuration (#1830)"}, {"oid": "af0aad2498f81659177eff1bbcfbf49213baf7b9", "committedDate": "2021-02-15 13:19:22 -0500", "message": "Exclude Models based on Conditions (#1835)"}, {"oid": "2eb90f1b8513e246930e5419e838b3fb1f7bbb98", "committedDate": "2021-02-18 11:42:05 -0600", "message": "Integration Tests for Table Export (#1842)"}, {"oid": "e2005d6babde1a0da3ba66fc507fc6ecf5773052", "committedDate": "2021-02-22 10:34:54 -0600", "message": "Cleanup unnecessary syntax (#1854)"}, {"oid": "6c97725cec25be900fd1466f627d3d0e722ed508", "committedDate": "2021-03-09 15:24:33 -0600", "message": "Add experimental n plus1 improvement (#1876)"}, {"oid": "8274a6341e06c7201049e8e8f0a48f07bd99a0ef", "committedDate": "2021-03-10 16:38:34 -0600", "message": "Cleanup IDE warnings (#1894)"}, {"oid": "c19d8c2237e960d792dc2ef6375356433b4fac21", "committedDate": "2021-03-11 17:10:26 -0600", "message": "Classtype cleanup (#1905)"}, {"oid": "e1e07dbeabb690560754c84200b67e7a8d4d9229", "committedDate": "2021-03-22 09:06:06 -0500", "message": "Part 4 of Query Plan Optimization : Fix Metric Nesting (#1924)"}, {"oid": "ed941827e1027083367b4df9794501909279c667", "committedDate": "2021-03-25 22:55:35 -0400", "message": "diamonds to reduce duplication (#1947)"}, {"oid": "dc7a367e14c9f43b2d013f5037341055a29f0491", "committedDate": "2021-03-26 10:31:26 -0400", "message": "Issue 1929 - Address Sonar suggestions (#1925)"}, {"oid": "43598e8411d544b31d9807ded4f248e25ef334a4", "committedDate": "2021-04-01 17:32:17 -0500", "message": "Add Table Level Query Hints (#1981)"}, {"oid": "6143d108eb7b1a2250370409d5362c6722c95b23", "committedDate": "2021-04-26 16:28:58 -0500", "message": "Cleanup (#2026)"}, {"oid": "ea57369f2b8af263efd9de99bfe59cae1b88202a", "committedDate": "2021-04-29 21:02:18 -0500", "message": "Test Cases + Enable Namespace in Standalone and Spring (#2040)"}, {"oid": "0a3776bacb5809845d9a04a1263db9760f117b92", "committedDate": "2021-05-13 13:25:15 -0500", "message": "Injection Protection for parameterized metrics/dimensions (#2090)"}, {"oid": "c55eca8c6cc828610faf39d0ea62d2a0a897696b", "committedDate": "2021-08-05 09:52:57 -0500", "message": "Add simple configuration to enable verbose errors. (#2236)"}, {"oid": "fe7009353573baf0206f7bb58617db97e067f900", "committedDate": "2021-09-02 11:31:12 -0500", "message": "Refactor class scanning for quarkus (#2284)"}, {"oid": "65eaaa12fc2b805135285287d4912d2329bc676d", "committedDate": "2021-09-13 14:02:45 -0500", "message": "Add ability to map unknown exceptions to custom exceptions (#2205)"}, {"oid": "6a319f244f5b611d3702e46013c5f8c988b5a957", "committedDate": "2021-09-30 13:42:41 -0500", "message": "GraphQL Subscriptions: Part 5 (#2308)"}, {"oid": "64325a03c2d0e965e2543c3c52a9ddc0de570c03", "committedDate": "2021-10-07 14:58:50 -0500", "message": "Aggregation Store: Relaxing rules for how filter templates are compared against filter e\u2026 (#2329)"}, {"oid": "6f26ba6377010a22403698d48d49ef2a4f897fde", "committedDate": "2021-10-17 15:04:42 -0500", "message": "Changing Oath to Yahoo in Copyright messages (#2340)"}, {"oid": "5064f8a5a351b1f77b8025f68b20efc1b76d101e", "committedDate": "2021-10-19 11:25:38 -0500", "message": "Elide 6 : Refactor DataStoreTransaction Interface. (#2334)"}, {"oid": "54cdcb9fe67225cd463e1bf9357f0e1d2a42c152", "committedDate": "2021-12-02 15:11:51 -0600", "message": "HJSON Configuration Models and DataStore (#2418)"}, {"oid": "d0552c5750608391d52e3e3286469901726a7d06", "committedDate": "2022-01-28 16:02:28 -0600", "message": "Support filters on query plans (#2526)"}, {"oid": "f21f35950fe465cfbf135d06cc8ae2321a29513a", "committedDate": "2023-02-04 15:34:06 -0600", "message": "Elide 7.x (#2876)"}]}, {"oid": "a6dd1de7fddc77fd1ca4f814b4d6e0f0d5de3bb1", "url": "https://github.com/yahoo/elide/commit/a6dd1de7fddc77fd1ca4f814b4d6e0f0d5de3bb1", "message": "addressing comments", "committedDate": "2020-06-04T19:59:53Z", "type": "commit"}, {"oid": "b916ca0a64e0659854cd15ae47b1b35b0c1260ce", "url": "https://github.com/yahoo/elide/commit/b916ca0a64e0659854cd15ae47b1b35b0c1260ce", "message": "addressing comments", "committedDate": "2020-06-04T20:01:31Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU2NzQ0Nw==", "url": "https://github.com/yahoo/elide/pull/1367#discussion_r435567447", "body": "Don't create an entityManager here.  Let the transaction create the entity manager.", "bodyText": "Don't create an entityManager here.  Let the transaction create the entity manager.", "bodyHTML": "<p dir=\"auto\">Don't create an entityManager here.  Let the transaction create the entity manager.</p>", "author": "aklish", "createdAt": "2020-06-04T21:37:57Z", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java", "diffHunk": "@@ -75,6 +83,23 @@ public void populateEntityDictionary(EntityDictionary dictionary) {\n \n     @Override\n     public DataStoreTransaction beginTransaction() {\n-        return new AggregationDataStoreTransaction(queryEngine);\n+\tEntityManager entityManager = entityManagerSupplier.get();        ", "originalCommit": "b916ca0a64e0659854cd15ae47b1b35b0c1260ce", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "de929061ff81b6969c97c27683791b478c0ac1c2", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex ad108f971..e0a5b1a84 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -83,23 +79,14 @@ public class AggregationDataStore implements DataStore {\n \n     @Override\n     public DataStoreTransaction beginTransaction() {\n-\tEntityManager entityManager = entityManagerSupplier.get();        \n-        return new AggregationDataStoreTransaction(entityManager, queryEngine, aggregationDataStoreTransactionCancel);\n-    }\n-\n-    /**\n-     * Functional interface for describing a method to supply EntityManager.\n-     */\n-    @FunctionalInterface\n-    public interface EntityManagerSupplier {\n-        EntityManager get();\n+        return new AggregationDataStoreTransaction(queryEngine, cancelTransaction);\n     }\n \n     /**\n      * Functional interface for describing a method to supply AggregationDataStoreTransaction.\n      */\n     @FunctionalInterface\n-    public interface  AggregationDataStoreTransactionCancel {\n+    public interface CancelTransaction {\n         public void cancel(EntityManager entityManager);\n     }\n }\n", "next_change": {"commit": "9a6dbc1186dfd5231d531fe04795a27b68f4fcd2", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex e0a5b1a84..f87ca6513 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -81,12 +78,4 @@ public class AggregationDataStore implements DataStore {\n     public DataStoreTransaction beginTransaction() {\n         return new AggregationDataStoreTransaction(queryEngine, cancelTransaction);\n     }\n-\n-    /**\n-     * Functional interface for describing a method to supply AggregationDataStoreTransaction.\n-     */\n-    @FunctionalInterface\n-    public interface CancelTransaction {\n-        public void cancel(EntityManager entityManager);\n-    }\n }\n", "next_change": {"commit": "18a8cc9d0da96a239329ca6b6c4b7eecee346b8e", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex f87ca6513..a1ec2a244 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -76,6 +74,6 @@ public class AggregationDataStore implements DataStore {\n \n     @Override\n     public DataStoreTransaction beginTransaction() {\n-        return new AggregationDataStoreTransaction(queryEngine, cancelTransaction);\n+        return new AggregationDataStoreTransaction(queryEngine);\n     }\n }\n", "next_change": {"commit": "5094ce020f2de18f1a34294178dd857eba7af5c4", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex a1ec2a244..c19fa4f9d 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -74,6 +74,6 @@ public class AggregationDataStore implements DataStore {\n \n     @Override\n     public DataStoreTransaction beginTransaction() {\n-        return new AggregationDataStoreTransaction(queryEngine);\n+        return new AggregationDataStoreTransaction(queryEngine, cache);\n     }\n }\n", "next_change": null}]}}]}}]}}]}, "revised_code_in_main": {"commit": "ff86c56fde9064e1719ea35660fd04c42c949662", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex ad108f971..0fe0b6abe 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -83,23 +74,6 @@ public class AggregationDataStore implements DataStore {\n \n     @Override\n     public DataStoreTransaction beginTransaction() {\n-\tEntityManager entityManager = entityManagerSupplier.get();        \n-        return new AggregationDataStoreTransaction(entityManager, queryEngine, aggregationDataStoreTransactionCancel);\n-    }\n-\n-    /**\n-     * Functional interface for describing a method to supply EntityManager.\n-     */\n-    @FunctionalInterface\n-    public interface EntityManagerSupplier {\n-        EntityManager get();\n-    }\n-\n-    /**\n-     * Functional interface for describing a method to supply AggregationDataStoreTransaction.\n-     */\n-    @FunctionalInterface\n-    public interface  AggregationDataStoreTransactionCancel {\n-        public void cancel(EntityManager entityManager);\n+        return new AggregationDataStoreTransaction(queryEngine, cache);\n     }\n }\n", "next_change": {"commit": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex 0fe0b6abe..12de28098 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -74,6 +75,6 @@ public class AggregationDataStore implements DataStore {\n \n     @Override\n     public DataStoreTransaction beginTransaction() {\n-        return new AggregationDataStoreTransaction(queryEngine, cache);\n+        return new AggregationDataStoreTransaction(queryEngine);\n     }\n }\n", "next_change": {"commit": "81dde7567aa8a6a00822a9a8f0bf901806a962e8", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex 12de28098..0fe0b6abe 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -75,6 +74,6 @@ public class AggregationDataStore implements DataStore {\n \n     @Override\n     public DataStoreTransaction beginTransaction() {\n-        return new AggregationDataStoreTransaction(queryEngine);\n+        return new AggregationDataStoreTransaction(queryEngine, cache);\n     }\n }\n", "next_change": {"commit": "8fece2b8f1b3078ce2598ddb03dca66bb984df46", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex 0fe0b6abe..098b52525 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -74,6 +76,6 @@ public class AggregationDataStore implements DataStore {\n \n     @Override\n     public DataStoreTransaction beginTransaction() {\n-        return new AggregationDataStoreTransaction(queryEngine, cache);\n+        return new AggregationDataStoreTransaction(queryEngine, cache, queryLogger);\n     }\n }\n", "next_change": {"commit": "8cb3c91a6812c87ab57ee9bb3fd76bf1e5018e44", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex 098b52525..a12f9bb3f 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -62,16 +59,6 @@ public class AggregationDataStore implements DataStore {\n             ClassScanner.getAnnotatedClasses(annotation)\n                     .forEach(cls -> dictionary.bindEntity(cls, Collections.singleton(Join.class)));\n         }\n-\n-        /* Add 'grain' argument to each TimeDimensionColumn */\n-        for (Table table : queryEngine.getMetaDataStore().getMetaData(Table.class)) {\n-            for (TimeDimension timeDim : table.getColumns(TimeDimension.class)) {\n-                dictionary.addArgumentToAttribute(\n-                        dictionary.getEntityClass(table.getName(), table.getVersion()),\n-                        timeDim.getName(),\n-                        new ArgumentType(\"grain\", String.class));\n-            }\n-        }\n     }\n \n     @Override\n", "next_change": {"commit": "c9fb3b958d0067572de7a276ce491016a9f231d6", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex a12f9bb3f..1b33c3972 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -54,11 +53,9 @@ public class AggregationDataStore implements DataStore {\n                     Collections.singleton(Join.class)));\n         }\n \n-        for (Class<? extends Annotation> annotation : AGGREGATION_STORE_CLASSES) {\n-            // bind non-jpa entity tables\n-            ClassScanner.getAnnotatedClasses(annotation)\n-                    .forEach(cls -> dictionary.bindEntity(cls, Collections.singleton(Join.class)));\n-        }\n+        ClassScanner.getAnnotatedClasses(AGGREGATION_STORE_CLASSES).forEach(\n+                cls -> dictionary.bindEntity(cls, Collections.singleton(Join.class))\n+        );\n     }\n \n     @Override\n", "next_change": {"commit": "f88b63d286d73d3774558b24f16aef0bb0be6d1a", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex 1b33c3972..9d0f4f4f9 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -49,12 +50,12 @@ public class AggregationDataStore implements DataStore {\n     public void populateEntityDictionary(EntityDictionary dictionary) {\n \n         if (dynamicCompiledClasses != null && dynamicCompiledClasses.size() != 0) {\n-            dynamicCompiledClasses.forEach(dynamicLoadedClass -> dictionary.bindEntity(dynamicLoadedClass,\n-                    Collections.singleton(Join.class)));\n+            dynamicCompiledClasses.forEach(dynamicLoadedClass -> dictionary.bindEntity(getType(dynamicLoadedClass),\n+                            Collections.singleton(Join.class)));\n         }\n \n         ClassScanner.getAnnotatedClasses(AGGREGATION_STORE_CLASSES).forEach(\n-                cls -> dictionary.bindEntity(cls, Collections.singleton(Join.class))\n+                cls -> dictionary.bindEntity(getType(cls), Collections.singleton(Join.class))\n         );\n     }\n \n", "next_change": {"commit": "11b3c4311c36f5ea792d08137866c067964851eb", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex 9d0f4f4f9..e26334f83 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -50,8 +51,8 @@ public class AggregationDataStore implements DataStore {\n     public void populateEntityDictionary(EntityDictionary dictionary) {\n \n         if (dynamicCompiledClasses != null && dynamicCompiledClasses.size() != 0) {\n-            dynamicCompiledClasses.forEach(dynamicLoadedClass -> dictionary.bindEntity(getType(dynamicLoadedClass),\n-                            Collections.singleton(Join.class)));\n+            dynamicCompiledClasses.forEach(dynamicLoadedClass -> dictionary.bindEntity(dynamicLoadedClass,\n+                    Collections.singleton(Join.class)));\n         }\n \n         ClassScanner.getAnnotatedClasses(AGGREGATION_STORE_CLASSES).forEach(\n", "next_change": {"commit": "de9883d363ba8b4171be5d8ad508564664f6fc90", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex e26334f83..2a313aa23 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -56,7 +55,7 @@ public class AggregationDataStore implements DataStore {\n         }\n \n         ClassScanner.getAnnotatedClasses(AGGREGATION_STORE_CLASSES).forEach(\n-                cls -> dictionary.bindEntity(getType(cls), Collections.singleton(Join.class))\n+                cls -> dictionary.bindEntity(cls, Collections.singleton(Join.class))\n         );\n     }\n \n", "next_change": {"commit": "ba73bc2a5617fed8feeee5b419a0f0808081628f", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex 2a313aa23..142d5003b 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -57,6 +61,16 @@ public class AggregationDataStore implements DataStore {\n         ClassScanner.getAnnotatedClasses(AGGREGATION_STORE_CLASSES).forEach(\n                 cls -> dictionary.bindEntity(cls, Collections.singleton(Join.class))\n         );\n+\n+        /* Add 'grain' argument to each TimeDimensionColumn */\n+        for (Table table : queryEngine.getMetaDataStore().getMetaData(new ClassType<>(Table.class))) {\n+            for (TimeDimension timeDim : table.getTimeDimensions()) {\n+                dictionary.addArgumentToAttribute(\n+                        dictionary.getEntityClass(table.getName(), table.getVersion()),\n+                        timeDim.getName(),\n+                        new ArgumentType(\"grain\", ClassType.STRING_TYPE, timeDim.getDefaultGrain().getGrain()));\n+            }\n+        }\n     }\n \n     @Override\n", "next_change": {"commit": "6b9fe00b85461bb3ad17310348cec20ad411512d", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex 142d5003b..bb5b2e0b5 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -62,14 +65,31 @@ public class AggregationDataStore implements DataStore {\n                 cls -> dictionary.bindEntity(cls, Collections.singleton(Join.class))\n         );\n \n-        /* Add 'grain' argument to each TimeDimensionColumn */\n-        for (Table table : queryEngine.getMetaDataStore().getMetaData(new ClassType<>(Table.class))) {\n+        for (Table table : queryEngine.getMetaDataStore().getMetaData(ClassType.of(Table.class))) {\n+            /* Add 'grain' argument to each TimeDimensionColumn */\n             for (TimeDimension timeDim : table.getTimeDimensions()) {\n                 dictionary.addArgumentToAttribute(\n                         dictionary.getEntityClass(table.getName(), table.getVersion()),\n                         timeDim.getName(),\n                         new ArgumentType(\"grain\", ClassType.STRING_TYPE, timeDim.getDefaultGrain().getGrain()));\n             }\n+\n+            /* Add argument to each Column */\n+            for (Column col : table.getColumns()) {\n+                for (Argument arg : col.getArguments()) {\n+                    dictionary.addArgumentToAttribute(\n+                            dictionary.getEntityClass(table.getName(), table.getVersion()),\n+                            col.getName(),\n+                            new ArgumentType(arg.getName(), ValueType.getType(arg.getType()), arg.getDefaultValue()));\n+                }\n+            }\n+\n+            /* Add argument to each Table */\n+            for (Argument arg : table.getArguments()) {\n+                dictionary.addArgumentToEntity(\n+                        dictionary.getEntityClass(table.getName(), table.getVersion()),\n+                        new ArgumentType(arg.getName(), ValueType.getType(arg.getType()), arg.getDefaultValue()));\n+            }\n         }\n     }\n \n", "next_change": {"commit": "0cb5028cb5c37225e4f30d5a08469499cc9fba22", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex bb5b2e0b5..ce1f14160 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -97,4 +114,56 @@ public class AggregationDataStore implements DataStore {\n     public DataStoreTransaction beginTransaction() {\n         return new AggregationDataStoreTransaction(queryEngine, cache, queryLogger);\n     }\n+\n+    /**\n+     * Validates The security Check expression type for both Table and all its fields.\n+     * Table Security Check Condition - User Checks and Filter Expression Checks\n+     * Field Security Check Condition - User Checks\n+     * @param dictionary - Entity Dictionary\n+     * @param clz - Model Type.\n+     */\n+    private void validateModelExpressionChecks(EntityDictionary dictionary, Type<?> clz) {\n+        PermissionExpressionVisitor visitor = new PermissionExpressionVisitor();\n+        ParseTree parseTree = dictionary.getPermissionsForClass(clz, ReadPermission.class);\n+        if (parseTree != null) {\n+            validateExpression(dictionary,\n+                    visitor.visit(parseTree),\n+                    (checkClass) -> UserCheck.class.isAssignableFrom(checkClass)\n+                            || FilterExpressionCheck.class.isAssignableFrom(checkClass),\n+                    \"Table Can only have User Check and Filter Expression Check.\"\n+                    + \"Operation Checks Not allowed. given - %s\");\n+        }\n+\n+        dictionary.getAllFields(clz).stream()\n+                .map(field -> dictionary.getPermissionsForField(clz, field, ReadPermission.class))\n+                .filter(Objects::nonNull)\n+                .forEach(tree ->\n+                        validateExpression(dictionary,\n+                                visitor.visit(tree),\n+                                (checkClass) -> UserCheck.class.isAssignableFrom(checkClass),\n+                                \"Fields Can only have User checks. Given - %s\"));\n+    }\n+\n+    /**\n+     * Validates the Expression Check class to check whether it complies with the given predicate\n+     * @param dictionary - Entity dictionary\n+     * @param expressionChecksIdentifiers - Set of identifiers for whose the security check class is validated\n+     * @param validCheckPredicate - Predicate that takes security check class as argument.\n+     * @param errorMsgFormat - Error message format for the exception when predicate fails.\n+     * @throws IllegalStateException\n+     */\n+    private void validateExpression(EntityDictionary dictionary,\n+                                    Set<String> expressionChecksIdentifiers,\n+                                    Predicate<Class> validCheckPredicate,\n+                                    String errorMsgFormat) throws IllegalStateException {\n+        expressionChecksIdentifiers.stream()\n+                .filter(check -> dictionary.getRoleCheck(check) == null)  // skip all role checks\n+                .forEach(check -> {\n+                    Class<? extends Check> checkClass = dictionary.getCheck(check);\n+                    if (!validCheckPredicate.test(checkClass)) {\n+                        throw new IllegalStateException(String.format(errorMsgFormat,\n+                                \"(\" + check + \"-\" + checkClass + \")\"));\n+                    }\n+                });\n+    }\n }\n", "next_change": {"commit": "32856f2244a3334028099eeb7ecd13b69fa41016", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex ce1f14160..3fa211272 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -166,4 +166,14 @@ public class AggregationDataStore implements DataStore {\n                     }\n                 });\n     }\n+\n+    /**\n+     * Determines if a model is managed by the aggregation data store.\n+     * @param model The model in question.\n+     * @return True if the model is managed by the aggregation data store.  False otherwise.\n+     */\n+    public static final boolean isAggregationStoreModel(Type<?> model) {\n+        return AGGREGATION_STORE_CLASSES.stream()\n+                .anyMatch((annotation) -> model.getDeclaredAnnotation(annotation) != null);\n+    }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "ff86c56fde9064e1719ea35660fd04c42c949662", "message": "Merge commit", "committedDate": null}, {"oid": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "parent a14ccfbb7b558d27799b4e7b1916850519639708 author Jack (\uc815\ud658) <QubitPi@users.noreply.github.com> 1559678988 -0700 committer Aaron Klish <klish@verizonmedia.com> 1589583449 -0500"}, {"oid": "81dde7567aa8a6a00822a9a8f0bf901806a962e8", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add caching support to SQLQueryEngine (#1319)"}, {"oid": "9ff0eb6bfa7f8f0135d21cf68cb1e44c5d515d91", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Enable query caching by default (#1378)"}, {"oid": "8fece2b8f1b3078ce2598ddb03dca66bb984df46", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Aggregation DataStore QueryLogger Implementation (#1448)"}, {"oid": "8cb3c91a6812c87ab57ee9bb3fd76bf1e5018e44", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Time Dimension should support different formats during serialization (#1511)"}, {"oid": "49e61867e840d9818993879436d5db1aad964c9a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Move data store interfaces (#1671)"}, {"oid": "911d29408bdeeb4ff8d78f2beea2417be4e7c673", "committedDate": "2020-12-11 16:20:28 -0600", "message": "cleaned up package hierarchy for elide-core (#1672)"}, {"oid": "c9fb3b958d0067572de7a276ce491016a9f231d6", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Reduce class scans (#1704)"}, {"oid": "f88b63d286d73d3774558b24f16aef0bb0be6d1a", "committedDate": "2021-01-19 14:16:37 -0600", "message": "Initial Commit for Type changes"}, {"oid": "11b3c4311c36f5ea792d08137866c067964851eb", "committedDate": "2021-01-19 14:16:37 -0600", "message": "More changes"}, {"oid": "de9883d363ba8b4171be5d8ad508564664f6fc90", "committedDate": "2021-01-19 14:16:37 -0600", "message": "Review comments"}, {"oid": "ba73bc2a5617fed8feeee5b419a0f0808081628f", "committedDate": "2021-02-04 11:31:56 -0600", "message": "Elide 5 Agg Store: Multiple time grains (#1806)"}, {"oid": "c19d8c2237e960d792dc2ef6375356433b4fac21", "committedDate": "2021-03-11 17:10:26 -0600", "message": "Classtype cleanup (#1905)"}, {"oid": "6b9fe00b85461bb3ad17310348cec20ad411512d", "committedDate": "2021-03-25 14:02:17 -0500", "message": "Parameterized Metrics: Aggregation Store Model Changes Set 2 (#1957)"}, {"oid": "21b4c5a728a2fd55339282b1e13bfb02cf26c875", "committedDate": "2021-05-05 16:53:26 -0500", "message": "get permission executor from datastore for each model that it manages. (#2070)"}, {"oid": "0cb5028cb5c37225e4f30d5a08469499cc9fba22", "committedDate": "2021-05-17 09:38:24 -0500", "message": "add validation for security checks in agg model table, namespace and fields (#2088)"}, {"oid": "c3d71ad98a89137ed78e86deb091897836203f75", "committedDate": "2021-05-17 15:47:39 -0500", "message": "Propogate client query arguments to join tables (#2095)"}, {"oid": "32856f2244a3334028099eeb7ecd13b69fa41016", "committedDate": "2021-05-18 11:21:54 -0500", "message": "Aggregation Store ID Column Metadata (#2099)"}, {"oid": "06fbda9b30433d71d45e62ceab5727246c59b904", "committedDate": "2021-05-18 14:58:40 -0500", "message": "use AggregationStorePermissionExecutor for Aggregation Store Model (#2102)"}, {"oid": "4b8310f782f755f20fa79b52b7e4d13480b140f9", "committedDate": "2021-05-21 10:06:37 -0500", "message": "Remove usage of SQLReferenceTable. (#2116)"}, {"oid": "101f842daa06095652f898bda0f96fead4bb373e", "committedDate": "2021-08-05 14:37:57 -0500", "message": "GraphQL schema now namespaces internal types to avoid conflicts (#2237)"}, {"oid": "fe7009353573baf0206f7bb58617db97e067f900", "committedDate": "2021-09-02 11:31:12 -0500", "message": "Refactor class scanning for quarkus (#2284)"}, {"oid": "830b9f2a997eefcd677090875bede2e21e19f1f4", "committedDate": "2021-10-20 14:48:56 -0500", "message": "Support 'hidden' flag for analytic models and fields. (#2357)"}, {"oid": "f21f35950fe465cfbf135d06cc8ae2321a29513a", "committedDate": "2023-02-04 15:34:06 -0600", "message": "Elide 7.x (#2876)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU2NzYyMg==", "url": "https://github.com/yahoo/elide/pull/1367#discussion_r435567622", "body": "Let's not add an EntityManagerSupplier to the constructor.", "bodyText": "Let's not add an EntityManagerSupplier to the constructor.", "bodyHTML": "<p dir=\"auto\">Let's not add an EntityManagerSupplier to the constructor.</p>", "author": "aklish", "createdAt": "2020-06-04T21:38:24Z", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java", "diffHunk": "@@ -22,26 +22,34 @@\n import java.util.List;\n import java.util.Set;\n \n+import javax.persistence.EntityManager;\n+\n /**\n  * DataStore that supports Aggregation. Uses {@link QueryEngine} to return results.\n  */\n public class AggregationDataStore implements DataStore {\n     private QueryEngine queryEngine;\n     private Set<Class<?>> dynamicCompiledClasses;\n+    protected final AggregationDataStoreTransactionCancel aggregationDataStoreTransactionCancel;\n+    protected final EntityManagerSupplier entityManagerSupplier;\n \n     /**\n      * These are the classes the Aggregation Store manages.\n      */\n     private static final List<Class<? extends Annotation>> AGGREGATION_STORE_CLASSES =\n             Arrays.asList(FromTable.class, FromSubquery.class);\n \n-    public AggregationDataStore(QueryEngine queryEngine) {\n+    public AggregationDataStore(EntityManagerSupplier entityManagerSupplier, QueryEngine queryEngine, AggregationDataStoreTransactionCancel aggregationDataStoreTransactionCancel) {", "originalCommit": "b916ca0a64e0659854cd15ae47b1b35b0c1260ce", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "de929061ff81b6969c97c27683791b478c0ac1c2", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex ad108f971..e0a5b1a84 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -30,26 +30,22 @@ import javax.persistence.EntityManager;\n public class AggregationDataStore implements DataStore {\n     private QueryEngine queryEngine;\n     private Set<Class<?>> dynamicCompiledClasses;\n-    protected final AggregationDataStoreTransactionCancel aggregationDataStoreTransactionCancel;\n-    protected final EntityManagerSupplier entityManagerSupplier;\n-\n+    protected final CancelTransaction cancelTransaction;\n     /**\n      * These are the classes the Aggregation Store manages.\n      */\n     private static final List<Class<? extends Annotation>> AGGREGATION_STORE_CLASSES =\n             Arrays.asList(FromTable.class, FromSubquery.class);\n \n-    public AggregationDataStore(EntityManagerSupplier entityManagerSupplier, QueryEngine queryEngine, AggregationDataStoreTransactionCancel aggregationDataStoreTransactionCancel) {\n-\tthis.entityManagerSupplier = entityManagerSupplier;\n+    public AggregationDataStore(QueryEngine queryEngine, CancelTransaction cancelTransaction) {\n         this.queryEngine = queryEngine;\n-\tthis.aggregationDataStoreTransactionCancel = aggregationDataStoreTransactionCancel;\n+\tthis.cancelTransaction = cancelTransaction;\n     }\n \n-    public AggregationDataStore(EntityManagerSupplier entityManagerSupplier, QueryEngine queryEngine, Set<Class<?>> dynamicCompiledClasses, AggregationDataStoreTransactionCancel aggregationDataStoreTransactionCancel) {\n- \tthis.entityManagerSupplier = entityManagerSupplier;\n+    public AggregationDataStore(QueryEngine queryEngine, Set<Class<?>> dynamicCompiledClasses, CancelTransaction cancelTransaction) {\n         this.queryEngine = queryEngine;\n         this.dynamicCompiledClasses = dynamicCompiledClasses;\n-    \tthis.aggregationDataStoreTransactionCancel = aggregationDataStoreTransactionCancel;\n+    \tthis.cancelTransaction = cancelTransaction;\n     }\n \n     /**\n", "next_change": {"commit": "9a6dbc1186dfd5231d531fe04795a27b68f4fcd2", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex e0a5b1a84..f87ca6513 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -30,22 +30,19 @@ import javax.persistence.EntityManager;\n public class AggregationDataStore implements DataStore {\n     private QueryEngine queryEngine;\n     private Set<Class<?>> dynamicCompiledClasses;\n-    protected final CancelTransaction cancelTransaction;\n     /**\n      * These are the classes the Aggregation Store manages.\n      */\n     private static final List<Class<? extends Annotation>> AGGREGATION_STORE_CLASSES =\n             Arrays.asList(FromTable.class, FromSubquery.class);\n \n-    public AggregationDataStore(QueryEngine queryEngine, CancelTransaction cancelTransaction) {\n+    public AggregationDataStore(QueryEngine queryEngine) {\n         this.queryEngine = queryEngine;\n-\tthis.cancelTransaction = cancelTransaction;\n     }\n \n-    public AggregationDataStore(QueryEngine queryEngine, Set<Class<?>> dynamicCompiledClasses, CancelTransaction cancelTransaction) {\n-        this.queryEngine = queryEngine;\n+    public AggregationDataStore(QueryEngine qEngine, Set<Class<?>> dynamicCompiledClasses) {\n+        this.queryEngine = qEngine;\n         this.dynamicCompiledClasses = dynamicCompiledClasses;\n-    \tthis.cancelTransaction = cancelTransaction;\n     }\n \n     /**\n", "next_change": {"commit": "5094ce020f2de18f1a34294178dd857eba7af5c4", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex f87ca6513..c19fa4f9d 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -12,39 +12,37 @@ import com.yahoo.elide.core.EntityDictionary;\n import com.yahoo.elide.datastores.aggregation.annotation.Join;\n import com.yahoo.elide.datastores.aggregation.metadata.models.Table;\n import com.yahoo.elide.datastores.aggregation.metadata.models.TimeDimension;\n+import com.yahoo.elide.datastores.aggregation.query.Cache;\n import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.FromSubquery;\n import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.FromTable;\n import com.yahoo.elide.utils.ClassScanner;\n \n+import lombok.Builder;\n+import lombok.NonNull;\n+import lombok.ToString;\n+\n import java.lang.annotation.Annotation;\n import java.util.Arrays;\n import java.util.Collections;\n import java.util.List;\n import java.util.Set;\n \n-import javax.persistence.EntityManager;\n-\n /**\n  * DataStore that supports Aggregation. Uses {@link QueryEngine} to return results.\n  */\n+@Builder\n+@ToString\n public class AggregationDataStore implements DataStore {\n-    private QueryEngine queryEngine;\n-    private Set<Class<?>> dynamicCompiledClasses;\n+    @NonNull private final QueryEngine queryEngine;\n+    private final Cache cache;\n+    private final Set<Class<?>> dynamicCompiledClasses;\n+\n     /**\n      * These are the classes the Aggregation Store manages.\n      */\n     private static final List<Class<? extends Annotation>> AGGREGATION_STORE_CLASSES =\n             Arrays.asList(FromTable.class, FromSubquery.class);\n-\n-    public AggregationDataStore(QueryEngine queryEngine) {\n-        this.queryEngine = queryEngine;\n-    }\n-\n-    public AggregationDataStore(QueryEngine qEngine, Set<Class<?>> dynamicCompiledClasses) {\n-        this.queryEngine = qEngine;\n-        this.dynamicCompiledClasses = dynamicCompiledClasses;\n-    }\n-\n+  \n     /**\n      * Populate an {@link EntityDictionary} and use this dictionary to construct a {@link QueryEngine}.\n      * @param dictionary the dictionary\n", "next_change": {"commit": "d7556cb189b6e83070942c10bdaf33054ecc0f71", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex c19fa4f9d..0fe0b6abe 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -42,7 +42,7 @@ public class AggregationDataStore implements DataStore {\n      */\n     private static final List<Class<? extends Annotation>> AGGREGATION_STORE_CLASSES =\n             Arrays.asList(FromTable.class, FromSubquery.class);\n-  \n+\n     /**\n      * Populate an {@link EntityDictionary} and use this dictionary to construct a {@link QueryEngine}.\n      * @param dictionary the dictionary\n", "next_change": null}]}}]}}]}}]}, "revised_code_in_main": {"commit": "ff86c56fde9064e1719ea35660fd04c42c949662", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex ad108f971..0fe0b6abe 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -12,26 +12,30 @@ import com.yahoo.elide.core.EntityDictionary;\n import com.yahoo.elide.datastores.aggregation.annotation.Join;\n import com.yahoo.elide.datastores.aggregation.metadata.models.Table;\n import com.yahoo.elide.datastores.aggregation.metadata.models.TimeDimension;\n+import com.yahoo.elide.datastores.aggregation.query.Cache;\n import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.FromSubquery;\n import com.yahoo.elide.datastores.aggregation.queryengines.sql.annotation.FromTable;\n import com.yahoo.elide.utils.ClassScanner;\n \n+import lombok.Builder;\n+import lombok.NonNull;\n+import lombok.ToString;\n+\n import java.lang.annotation.Annotation;\n import java.util.Arrays;\n import java.util.Collections;\n import java.util.List;\n import java.util.Set;\n \n-import javax.persistence.EntityManager;\n-\n /**\n  * DataStore that supports Aggregation. Uses {@link QueryEngine} to return results.\n  */\n+@Builder\n+@ToString\n public class AggregationDataStore implements DataStore {\n-    private QueryEngine queryEngine;\n-    private Set<Class<?>> dynamicCompiledClasses;\n-    protected final AggregationDataStoreTransactionCancel aggregationDataStoreTransactionCancel;\n-    protected final EntityManagerSupplier entityManagerSupplier;\n+    @NonNull private final QueryEngine queryEngine;\n+    private final Cache cache;\n+    private final Set<Class<?>> dynamicCompiledClasses;\n \n     /**\n      * These are the classes the Aggregation Store manages.\n", "next_change": {"commit": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex 0fe0b6abe..12de28098 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -30,12 +25,9 @@ import java.util.Set;\n /**\n  * DataStore that supports Aggregation. Uses {@link QueryEngine} to return results.\n  */\n-@Builder\n-@ToString\n public class AggregationDataStore implements DataStore {\n-    @NonNull private final QueryEngine queryEngine;\n-    private final Cache cache;\n-    private final Set<Class<?>> dynamicCompiledClasses;\n+    private QueryEngine queryEngine;\n+    private Set<Class<?>> dynamicCompiledClasses;\n \n     /**\n      * These are the classes the Aggregation Store manages.\n", "next_change": {"commit": "81dde7567aa8a6a00822a9a8f0bf901806a962e8", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex 12de28098..0fe0b6abe 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -25,9 +30,12 @@ import java.util.Set;\n /**\n  * DataStore that supports Aggregation. Uses {@link QueryEngine} to return results.\n  */\n+@Builder\n+@ToString\n public class AggregationDataStore implements DataStore {\n-    private QueryEngine queryEngine;\n-    private Set<Class<?>> dynamicCompiledClasses;\n+    @NonNull private final QueryEngine queryEngine;\n+    private final Cache cache;\n+    private final Set<Class<?>> dynamicCompiledClasses;\n \n     /**\n      * These are the classes the Aggregation Store manages.\n", "next_change": {"commit": "8fece2b8f1b3078ce2598ddb03dca66bb984df46", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex 0fe0b6abe..098b52525 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -36,6 +37,7 @@ public class AggregationDataStore implements DataStore {\n     @NonNull private final QueryEngine queryEngine;\n     private final Cache cache;\n     private final Set<Class<?>> dynamicCompiledClasses;\n+    private final QueryLogger queryLogger;\n \n     /**\n      * These are the classes the Aggregation Store manages.\n", "next_change": {"commit": "11b3c4311c36f5ea792d08137866c067964851eb", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex 098b52525..e26334f83 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -36,7 +34,7 @@ import java.util.Set;\n public class AggregationDataStore implements DataStore {\n     @NonNull private final QueryEngine queryEngine;\n     private final Cache cache;\n-    private final Set<Class<?>> dynamicCompiledClasses;\n+    private final Set<Type<?>> dynamicCompiledClasses;\n     private final QueryLogger queryLogger;\n \n     /**\n", "next_change": {"commit": "06fbda9b30433d71d45e62ceab5727246c59b904", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex e26334f83..45efc525b 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -37,6 +57,9 @@ public class AggregationDataStore implements DataStore {\n     private final Set<Type<?>> dynamicCompiledClasses;\n     private final QueryLogger queryLogger;\n \n+    private final Function<RequestScope, PermissionExecutor> aggPermissionExecutor =\n+            AggregationStorePermissionExecutor::new;\n+\n     /**\n      * These are the classes the Aggregation Store manages.\n      */\n", "next_change": {"commit": "830b9f2a997eefcd677090875bede2e21e19f1f4", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex 45efc525b..ca88f8c2c 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -57,6 +56,19 @@ public class AggregationDataStore implements DataStore {\n     private final Set<Type<?>> dynamicCompiledClasses;\n     private final QueryLogger queryLogger;\n \n+    public static final Predicate<AccessibleObject> IS_FIELD_HIDDEN = (field -> {\n+        ColumnMeta meta = field.getAnnotation(ColumnMeta.class);\n+        Join join = field.getAnnotation(Join.class);\n+\n+        return (join != null || (meta != null && meta.isHidden()));\n+    });\n+\n+    public static final Predicate<Type<?>> IS_TYPE_HIDDEN = (type -> {\n+        TableMeta meta = type.getAnnotation(TableMeta.class);\n+\n+        return (meta != null && meta.isHidden());\n+    });\n+\n     private final Function<RequestScope, PermissionExecutor> aggPermissionExecutor =\n             AggregationStorePermissionExecutor::new;\n \n", "next_change": null}]}}]}}]}}]}}, {"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex 12de28098..0fe0b6abe 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -35,15 +43,6 @@ public class AggregationDataStore implements DataStore {\n     private static final List<Class<? extends Annotation>> AGGREGATION_STORE_CLASSES =\n             Arrays.asList(FromTable.class, FromSubquery.class);\n \n-    public AggregationDataStore(QueryEngine queryEngine) {\n-        this.queryEngine = queryEngine;\n-    }\n-\n-    public AggregationDataStore(QueryEngine queryEngine, Set<Class<?>> dynamicCompiledClasses) {\n-        this.queryEngine = queryEngine;\n-        this.dynamicCompiledClasses = dynamicCompiledClasses;\n-    }\n-\n     /**\n      * Populate an {@link EntityDictionary} and use this dictionary to construct a {@link QueryEngine}.\n      * @param dictionary the dictionary\n", "next_change": {"commit": "f88b63d286d73d3774558b24f16aef0bb0be6d1a", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex 0fe0b6abe..9d0f4f4f9 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -51,29 +50,17 @@ public class AggregationDataStore implements DataStore {\n     public void populateEntityDictionary(EntityDictionary dictionary) {\n \n         if (dynamicCompiledClasses != null && dynamicCompiledClasses.size() != 0) {\n-            dynamicCompiledClasses.forEach(dynamicLoadedClass -> dictionary.bindEntity(dynamicLoadedClass,\n-                    Collections.singleton(Join.class)));\n-        }\n-\n-        for (Class<? extends Annotation> annotation : AGGREGATION_STORE_CLASSES) {\n-            // bind non-jpa entity tables\n-            ClassScanner.getAnnotatedClasses(annotation)\n-                    .forEach(cls -> dictionary.bindEntity(cls, Collections.singleton(Join.class)));\n+            dynamicCompiledClasses.forEach(dynamicLoadedClass -> dictionary.bindEntity(getType(dynamicLoadedClass),\n+                            Collections.singleton(Join.class)));\n         }\n \n-        /* Add 'grain' argument to each TimeDimensionColumn */\n-        for (Table table : queryEngine.getMetaDataStore().getMetaData(Table.class)) {\n-            for (TimeDimension timeDim : table.getColumns(TimeDimension.class)) {\n-                dictionary.addArgumentToAttribute(\n-                        dictionary.getEntityClass(table.getName(), table.getVersion()),\n-                        timeDim.getName(),\n-                        new ArgumentType(\"grain\", String.class));\n-            }\n-        }\n+        ClassScanner.getAnnotatedClasses(AGGREGATION_STORE_CLASSES).forEach(\n+                cls -> dictionary.bindEntity(getType(cls), Collections.singleton(Join.class))\n+        );\n     }\n \n     @Override\n     public DataStoreTransaction beginTransaction() {\n-        return new AggregationDataStoreTransaction(queryEngine, cache);\n+        return new AggregationDataStoreTransaction(queryEngine, cache, queryLogger);\n     }\n }\n", "next_change": {"commit": "ba73bc2a5617fed8feeee5b419a0f0808081628f", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex 9d0f4f4f9..142d5003b 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -50,13 +54,23 @@ public class AggregationDataStore implements DataStore {\n     public void populateEntityDictionary(EntityDictionary dictionary) {\n \n         if (dynamicCompiledClasses != null && dynamicCompiledClasses.size() != 0) {\n-            dynamicCompiledClasses.forEach(dynamicLoadedClass -> dictionary.bindEntity(getType(dynamicLoadedClass),\n-                            Collections.singleton(Join.class)));\n+            dynamicCompiledClasses.forEach(dynamicLoadedClass -> dictionary.bindEntity(dynamicLoadedClass,\n+                    Collections.singleton(Join.class)));\n         }\n \n         ClassScanner.getAnnotatedClasses(AGGREGATION_STORE_CLASSES).forEach(\n-                cls -> dictionary.bindEntity(getType(cls), Collections.singleton(Join.class))\n+                cls -> dictionary.bindEntity(cls, Collections.singleton(Join.class))\n         );\n+\n+        /* Add 'grain' argument to each TimeDimensionColumn */\n+        for (Table table : queryEngine.getMetaDataStore().getMetaData(new ClassType<>(Table.class))) {\n+            for (TimeDimension timeDim : table.getTimeDimensions()) {\n+                dictionary.addArgumentToAttribute(\n+                        dictionary.getEntityClass(table.getName(), table.getVersion()),\n+                        timeDim.getName(),\n+                        new ArgumentType(\"grain\", ClassType.STRING_TYPE, timeDim.getDefaultGrain().getGrain()));\n+            }\n+        }\n     }\n \n     @Override\n", "next_change": {"commit": "6b9fe00b85461bb3ad17310348cec20ad411512d", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex 142d5003b..bb5b2e0b5 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -62,14 +65,31 @@ public class AggregationDataStore implements DataStore {\n                 cls -> dictionary.bindEntity(cls, Collections.singleton(Join.class))\n         );\n \n-        /* Add 'grain' argument to each TimeDimensionColumn */\n-        for (Table table : queryEngine.getMetaDataStore().getMetaData(new ClassType<>(Table.class))) {\n+        for (Table table : queryEngine.getMetaDataStore().getMetaData(ClassType.of(Table.class))) {\n+            /* Add 'grain' argument to each TimeDimensionColumn */\n             for (TimeDimension timeDim : table.getTimeDimensions()) {\n                 dictionary.addArgumentToAttribute(\n                         dictionary.getEntityClass(table.getName(), table.getVersion()),\n                         timeDim.getName(),\n                         new ArgumentType(\"grain\", ClassType.STRING_TYPE, timeDim.getDefaultGrain().getGrain()));\n             }\n+\n+            /* Add argument to each Column */\n+            for (Column col : table.getColumns()) {\n+                for (Argument arg : col.getArguments()) {\n+                    dictionary.addArgumentToAttribute(\n+                            dictionary.getEntityClass(table.getName(), table.getVersion()),\n+                            col.getName(),\n+                            new ArgumentType(arg.getName(), ValueType.getType(arg.getType()), arg.getDefaultValue()));\n+                }\n+            }\n+\n+            /* Add argument to each Table */\n+            for (Argument arg : table.getArguments()) {\n+                dictionary.addArgumentToEntity(\n+                        dictionary.getEntityClass(table.getName(), table.getVersion()),\n+                        new ArgumentType(arg.getName(), ValueType.getType(arg.getType()), arg.getDefaultValue()));\n+            }\n         }\n     }\n \n", "next_change": {"commit": "0cb5028cb5c37225e4f30d5a08469499cc9fba22", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex bb5b2e0b5..ce1f14160 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -97,4 +114,56 @@ public class AggregationDataStore implements DataStore {\n     public DataStoreTransaction beginTransaction() {\n         return new AggregationDataStoreTransaction(queryEngine, cache, queryLogger);\n     }\n+\n+    /**\n+     * Validates The security Check expression type for both Table and all its fields.\n+     * Table Security Check Condition - User Checks and Filter Expression Checks\n+     * Field Security Check Condition - User Checks\n+     * @param dictionary - Entity Dictionary\n+     * @param clz - Model Type.\n+     */\n+    private void validateModelExpressionChecks(EntityDictionary dictionary, Type<?> clz) {\n+        PermissionExpressionVisitor visitor = new PermissionExpressionVisitor();\n+        ParseTree parseTree = dictionary.getPermissionsForClass(clz, ReadPermission.class);\n+        if (parseTree != null) {\n+            validateExpression(dictionary,\n+                    visitor.visit(parseTree),\n+                    (checkClass) -> UserCheck.class.isAssignableFrom(checkClass)\n+                            || FilterExpressionCheck.class.isAssignableFrom(checkClass),\n+                    \"Table Can only have User Check and Filter Expression Check.\"\n+                    + \"Operation Checks Not allowed. given - %s\");\n+        }\n+\n+        dictionary.getAllFields(clz).stream()\n+                .map(field -> dictionary.getPermissionsForField(clz, field, ReadPermission.class))\n+                .filter(Objects::nonNull)\n+                .forEach(tree ->\n+                        validateExpression(dictionary,\n+                                visitor.visit(tree),\n+                                (checkClass) -> UserCheck.class.isAssignableFrom(checkClass),\n+                                \"Fields Can only have User checks. Given - %s\"));\n+    }\n+\n+    /**\n+     * Validates the Expression Check class to check whether it complies with the given predicate\n+     * @param dictionary - Entity dictionary\n+     * @param expressionChecksIdentifiers - Set of identifiers for whose the security check class is validated\n+     * @param validCheckPredicate - Predicate that takes security check class as argument.\n+     * @param errorMsgFormat - Error message format for the exception when predicate fails.\n+     * @throws IllegalStateException\n+     */\n+    private void validateExpression(EntityDictionary dictionary,\n+                                    Set<String> expressionChecksIdentifiers,\n+                                    Predicate<Class> validCheckPredicate,\n+                                    String errorMsgFormat) throws IllegalStateException {\n+        expressionChecksIdentifiers.stream()\n+                .filter(check -> dictionary.getRoleCheck(check) == null)  // skip all role checks\n+                .forEach(check -> {\n+                    Class<? extends Check> checkClass = dictionary.getCheck(check);\n+                    if (!validCheckPredicate.test(checkClass)) {\n+                        throw new IllegalStateException(String.format(errorMsgFormat,\n+                                \"(\" + check + \"-\" + checkClass + \")\"));\n+                    }\n+                });\n+    }\n }\n", "next_change": {"commit": "32856f2244a3334028099eeb7ecd13b69fa41016", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex ce1f14160..3fa211272 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -166,4 +166,14 @@ public class AggregationDataStore implements DataStore {\n                     }\n                 });\n     }\n+\n+    /**\n+     * Determines if a model is managed by the aggregation data store.\n+     * @param model The model in question.\n+     * @return True if the model is managed by the aggregation data store.  False otherwise.\n+     */\n+    public static final boolean isAggregationStoreModel(Type<?> model) {\n+        return AGGREGATION_STORE_CLASSES.stream()\n+                .anyMatch((annotation) -> model.getDeclaredAnnotation(annotation) != null);\n+    }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}, {"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex 0fe0b6abe..12de28098 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -43,6 +35,15 @@ public class AggregationDataStore implements DataStore {\n     private static final List<Class<? extends Annotation>> AGGREGATION_STORE_CLASSES =\n             Arrays.asList(FromTable.class, FromSubquery.class);\n \n+    public AggregationDataStore(QueryEngine queryEngine) {\n+        this.queryEngine = queryEngine;\n+    }\n+\n+    public AggregationDataStore(QueryEngine queryEngine, Set<Class<?>> dynamicCompiledClasses) {\n+        this.queryEngine = queryEngine;\n+        this.dynamicCompiledClasses = dynamicCompiledClasses;\n+    }\n+\n     /**\n      * Populate an {@link EntityDictionary} and use this dictionary to construct a {@link QueryEngine}.\n      * @param dictionary the dictionary\n", "next_change": {"commit": "81dde7567aa8a6a00822a9a8f0bf901806a962e8", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex 12de28098..0fe0b6abe 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -35,15 +43,6 @@ public class AggregationDataStore implements DataStore {\n     private static final List<Class<? extends Annotation>> AGGREGATION_STORE_CLASSES =\n             Arrays.asList(FromTable.class, FromSubquery.class);\n \n-    public AggregationDataStore(QueryEngine queryEngine) {\n-        this.queryEngine = queryEngine;\n-    }\n-\n-    public AggregationDataStore(QueryEngine queryEngine, Set<Class<?>> dynamicCompiledClasses) {\n-        this.queryEngine = queryEngine;\n-        this.dynamicCompiledClasses = dynamicCompiledClasses;\n-    }\n-\n     /**\n      * Populate an {@link EntityDictionary} and use this dictionary to construct a {@link QueryEngine}.\n      * @param dictionary the dictionary\n", "next_change": {"commit": "f88b63d286d73d3774558b24f16aef0bb0be6d1a", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex 0fe0b6abe..9d0f4f4f9 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -51,29 +50,17 @@ public class AggregationDataStore implements DataStore {\n     public void populateEntityDictionary(EntityDictionary dictionary) {\n \n         if (dynamicCompiledClasses != null && dynamicCompiledClasses.size() != 0) {\n-            dynamicCompiledClasses.forEach(dynamicLoadedClass -> dictionary.bindEntity(dynamicLoadedClass,\n-                    Collections.singleton(Join.class)));\n-        }\n-\n-        for (Class<? extends Annotation> annotation : AGGREGATION_STORE_CLASSES) {\n-            // bind non-jpa entity tables\n-            ClassScanner.getAnnotatedClasses(annotation)\n-                    .forEach(cls -> dictionary.bindEntity(cls, Collections.singleton(Join.class)));\n+            dynamicCompiledClasses.forEach(dynamicLoadedClass -> dictionary.bindEntity(getType(dynamicLoadedClass),\n+                            Collections.singleton(Join.class)));\n         }\n \n-        /* Add 'grain' argument to each TimeDimensionColumn */\n-        for (Table table : queryEngine.getMetaDataStore().getMetaData(Table.class)) {\n-            for (TimeDimension timeDim : table.getColumns(TimeDimension.class)) {\n-                dictionary.addArgumentToAttribute(\n-                        dictionary.getEntityClass(table.getName(), table.getVersion()),\n-                        timeDim.getName(),\n-                        new ArgumentType(\"grain\", String.class));\n-            }\n-        }\n+        ClassScanner.getAnnotatedClasses(AGGREGATION_STORE_CLASSES).forEach(\n+                cls -> dictionary.bindEntity(getType(cls), Collections.singleton(Join.class))\n+        );\n     }\n \n     @Override\n     public DataStoreTransaction beginTransaction() {\n-        return new AggregationDataStoreTransaction(queryEngine, cache);\n+        return new AggregationDataStoreTransaction(queryEngine, cache, queryLogger);\n     }\n }\n", "next_change": {"commit": "ba73bc2a5617fed8feeee5b419a0f0808081628f", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex 9d0f4f4f9..142d5003b 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -50,13 +54,23 @@ public class AggregationDataStore implements DataStore {\n     public void populateEntityDictionary(EntityDictionary dictionary) {\n \n         if (dynamicCompiledClasses != null && dynamicCompiledClasses.size() != 0) {\n-            dynamicCompiledClasses.forEach(dynamicLoadedClass -> dictionary.bindEntity(getType(dynamicLoadedClass),\n-                            Collections.singleton(Join.class)));\n+            dynamicCompiledClasses.forEach(dynamicLoadedClass -> dictionary.bindEntity(dynamicLoadedClass,\n+                    Collections.singleton(Join.class)));\n         }\n \n         ClassScanner.getAnnotatedClasses(AGGREGATION_STORE_CLASSES).forEach(\n-                cls -> dictionary.bindEntity(getType(cls), Collections.singleton(Join.class))\n+                cls -> dictionary.bindEntity(cls, Collections.singleton(Join.class))\n         );\n+\n+        /* Add 'grain' argument to each TimeDimensionColumn */\n+        for (Table table : queryEngine.getMetaDataStore().getMetaData(new ClassType<>(Table.class))) {\n+            for (TimeDimension timeDim : table.getTimeDimensions()) {\n+                dictionary.addArgumentToAttribute(\n+                        dictionary.getEntityClass(table.getName(), table.getVersion()),\n+                        timeDim.getName(),\n+                        new ArgumentType(\"grain\", ClassType.STRING_TYPE, timeDim.getDefaultGrain().getGrain()));\n+            }\n+        }\n     }\n \n     @Override\n", "next_change": {"commit": "6b9fe00b85461bb3ad17310348cec20ad411512d", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex 142d5003b..bb5b2e0b5 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -62,14 +65,31 @@ public class AggregationDataStore implements DataStore {\n                 cls -> dictionary.bindEntity(cls, Collections.singleton(Join.class))\n         );\n \n-        /* Add 'grain' argument to each TimeDimensionColumn */\n-        for (Table table : queryEngine.getMetaDataStore().getMetaData(new ClassType<>(Table.class))) {\n+        for (Table table : queryEngine.getMetaDataStore().getMetaData(ClassType.of(Table.class))) {\n+            /* Add 'grain' argument to each TimeDimensionColumn */\n             for (TimeDimension timeDim : table.getTimeDimensions()) {\n                 dictionary.addArgumentToAttribute(\n                         dictionary.getEntityClass(table.getName(), table.getVersion()),\n                         timeDim.getName(),\n                         new ArgumentType(\"grain\", ClassType.STRING_TYPE, timeDim.getDefaultGrain().getGrain()));\n             }\n+\n+            /* Add argument to each Column */\n+            for (Column col : table.getColumns()) {\n+                for (Argument arg : col.getArguments()) {\n+                    dictionary.addArgumentToAttribute(\n+                            dictionary.getEntityClass(table.getName(), table.getVersion()),\n+                            col.getName(),\n+                            new ArgumentType(arg.getName(), ValueType.getType(arg.getType()), arg.getDefaultValue()));\n+                }\n+            }\n+\n+            /* Add argument to each Table */\n+            for (Argument arg : table.getArguments()) {\n+                dictionary.addArgumentToEntity(\n+                        dictionary.getEntityClass(table.getName(), table.getVersion()),\n+                        new ArgumentType(arg.getName(), ValueType.getType(arg.getType()), arg.getDefaultValue()));\n+            }\n         }\n     }\n \n", "next_change": {"commit": "0cb5028cb5c37225e4f30d5a08469499cc9fba22", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex bb5b2e0b5..ce1f14160 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -97,4 +114,56 @@ public class AggregationDataStore implements DataStore {\n     public DataStoreTransaction beginTransaction() {\n         return new AggregationDataStoreTransaction(queryEngine, cache, queryLogger);\n     }\n+\n+    /**\n+     * Validates The security Check expression type for both Table and all its fields.\n+     * Table Security Check Condition - User Checks and Filter Expression Checks\n+     * Field Security Check Condition - User Checks\n+     * @param dictionary - Entity Dictionary\n+     * @param clz - Model Type.\n+     */\n+    private void validateModelExpressionChecks(EntityDictionary dictionary, Type<?> clz) {\n+        PermissionExpressionVisitor visitor = new PermissionExpressionVisitor();\n+        ParseTree parseTree = dictionary.getPermissionsForClass(clz, ReadPermission.class);\n+        if (parseTree != null) {\n+            validateExpression(dictionary,\n+                    visitor.visit(parseTree),\n+                    (checkClass) -> UserCheck.class.isAssignableFrom(checkClass)\n+                            || FilterExpressionCheck.class.isAssignableFrom(checkClass),\n+                    \"Table Can only have User Check and Filter Expression Check.\"\n+                    + \"Operation Checks Not allowed. given - %s\");\n+        }\n+\n+        dictionary.getAllFields(clz).stream()\n+                .map(field -> dictionary.getPermissionsForField(clz, field, ReadPermission.class))\n+                .filter(Objects::nonNull)\n+                .forEach(tree ->\n+                        validateExpression(dictionary,\n+                                visitor.visit(tree),\n+                                (checkClass) -> UserCheck.class.isAssignableFrom(checkClass),\n+                                \"Fields Can only have User checks. Given - %s\"));\n+    }\n+\n+    /**\n+     * Validates the Expression Check class to check whether it complies with the given predicate\n+     * @param dictionary - Entity dictionary\n+     * @param expressionChecksIdentifiers - Set of identifiers for whose the security check class is validated\n+     * @param validCheckPredicate - Predicate that takes security check class as argument.\n+     * @param errorMsgFormat - Error message format for the exception when predicate fails.\n+     * @throws IllegalStateException\n+     */\n+    private void validateExpression(EntityDictionary dictionary,\n+                                    Set<String> expressionChecksIdentifiers,\n+                                    Predicate<Class> validCheckPredicate,\n+                                    String errorMsgFormat) throws IllegalStateException {\n+        expressionChecksIdentifiers.stream()\n+                .filter(check -> dictionary.getRoleCheck(check) == null)  // skip all role checks\n+                .forEach(check -> {\n+                    Class<? extends Check> checkClass = dictionary.getCheck(check);\n+                    if (!validCheckPredicate.test(checkClass)) {\n+                        throw new IllegalStateException(String.format(errorMsgFormat,\n+                                \"(\" + check + \"-\" + checkClass + \")\"));\n+                    }\n+                });\n+    }\n }\n", "next_change": {"commit": "32856f2244a3334028099eeb7ecd13b69fa41016", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex ce1f14160..3fa211272 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -166,4 +166,14 @@ public class AggregationDataStore implements DataStore {\n                     }\n                 });\n     }\n+\n+    /**\n+     * Determines if a model is managed by the aggregation data store.\n+     * @param model The model in question.\n+     * @return True if the model is managed by the aggregation data store.  False otherwise.\n+     */\n+    public static final boolean isAggregationStoreModel(Type<?> model) {\n+        return AGGREGATION_STORE_CLASSES.stream()\n+                .anyMatch((annotation) -> model.getDeclaredAnnotation(annotation) != null);\n+    }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}, {"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex ad108f971..0fe0b6abe 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -39,19 +43,6 @@ public class AggregationDataStore implements DataStore {\n     private static final List<Class<? extends Annotation>> AGGREGATION_STORE_CLASSES =\n             Arrays.asList(FromTable.class, FromSubquery.class);\n \n-    public AggregationDataStore(EntityManagerSupplier entityManagerSupplier, QueryEngine queryEngine, AggregationDataStoreTransactionCancel aggregationDataStoreTransactionCancel) {\n-\tthis.entityManagerSupplier = entityManagerSupplier;\n-        this.queryEngine = queryEngine;\n-\tthis.aggregationDataStoreTransactionCancel = aggregationDataStoreTransactionCancel;\n-    }\n-\n-    public AggregationDataStore(EntityManagerSupplier entityManagerSupplier, QueryEngine queryEngine, Set<Class<?>> dynamicCompiledClasses, AggregationDataStoreTransactionCancel aggregationDataStoreTransactionCancel) {\n- \tthis.entityManagerSupplier = entityManagerSupplier;\n-        this.queryEngine = queryEngine;\n-        this.dynamicCompiledClasses = dynamicCompiledClasses;\n-    \tthis.aggregationDataStoreTransactionCancel = aggregationDataStoreTransactionCancel;\n-    }\n-\n     /**\n      * Populate an {@link EntityDictionary} and use this dictionary to construct a {@link QueryEngine}.\n      * @param dictionary the dictionary\n", "next_change": {"commit": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex 0fe0b6abe..12de28098 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -43,6 +35,15 @@ public class AggregationDataStore implements DataStore {\n     private static final List<Class<? extends Annotation>> AGGREGATION_STORE_CLASSES =\n             Arrays.asList(FromTable.class, FromSubquery.class);\n \n+    public AggregationDataStore(QueryEngine queryEngine) {\n+        this.queryEngine = queryEngine;\n+    }\n+\n+    public AggregationDataStore(QueryEngine queryEngine, Set<Class<?>> dynamicCompiledClasses) {\n+        this.queryEngine = queryEngine;\n+        this.dynamicCompiledClasses = dynamicCompiledClasses;\n+    }\n+\n     /**\n      * Populate an {@link EntityDictionary} and use this dictionary to construct a {@link QueryEngine}.\n      * @param dictionary the dictionary\n", "next_change": {"commit": "81dde7567aa8a6a00822a9a8f0bf901806a962e8", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex 12de28098..0fe0b6abe 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -35,15 +43,6 @@ public class AggregationDataStore implements DataStore {\n     private static final List<Class<? extends Annotation>> AGGREGATION_STORE_CLASSES =\n             Arrays.asList(FromTable.class, FromSubquery.class);\n \n-    public AggregationDataStore(QueryEngine queryEngine) {\n-        this.queryEngine = queryEngine;\n-    }\n-\n-    public AggregationDataStore(QueryEngine queryEngine, Set<Class<?>> dynamicCompiledClasses) {\n-        this.queryEngine = queryEngine;\n-        this.dynamicCompiledClasses = dynamicCompiledClasses;\n-    }\n-\n     /**\n      * Populate an {@link EntityDictionary} and use this dictionary to construct a {@link QueryEngine}.\n      * @param dictionary the dictionary\n", "next_change": {"commit": "f88b63d286d73d3774558b24f16aef0bb0be6d1a", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex 0fe0b6abe..9d0f4f4f9 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -51,29 +50,17 @@ public class AggregationDataStore implements DataStore {\n     public void populateEntityDictionary(EntityDictionary dictionary) {\n \n         if (dynamicCompiledClasses != null && dynamicCompiledClasses.size() != 0) {\n-            dynamicCompiledClasses.forEach(dynamicLoadedClass -> dictionary.bindEntity(dynamicLoadedClass,\n-                    Collections.singleton(Join.class)));\n-        }\n-\n-        for (Class<? extends Annotation> annotation : AGGREGATION_STORE_CLASSES) {\n-            // bind non-jpa entity tables\n-            ClassScanner.getAnnotatedClasses(annotation)\n-                    .forEach(cls -> dictionary.bindEntity(cls, Collections.singleton(Join.class)));\n+            dynamicCompiledClasses.forEach(dynamicLoadedClass -> dictionary.bindEntity(getType(dynamicLoadedClass),\n+                            Collections.singleton(Join.class)));\n         }\n \n-        /* Add 'grain' argument to each TimeDimensionColumn */\n-        for (Table table : queryEngine.getMetaDataStore().getMetaData(Table.class)) {\n-            for (TimeDimension timeDim : table.getColumns(TimeDimension.class)) {\n-                dictionary.addArgumentToAttribute(\n-                        dictionary.getEntityClass(table.getName(), table.getVersion()),\n-                        timeDim.getName(),\n-                        new ArgumentType(\"grain\", String.class));\n-            }\n-        }\n+        ClassScanner.getAnnotatedClasses(AGGREGATION_STORE_CLASSES).forEach(\n+                cls -> dictionary.bindEntity(getType(cls), Collections.singleton(Join.class))\n+        );\n     }\n \n     @Override\n     public DataStoreTransaction beginTransaction() {\n-        return new AggregationDataStoreTransaction(queryEngine, cache);\n+        return new AggregationDataStoreTransaction(queryEngine, cache, queryLogger);\n     }\n }\n", "next_change": {"commit": "ba73bc2a5617fed8feeee5b419a0f0808081628f", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex 9d0f4f4f9..142d5003b 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -50,13 +54,23 @@ public class AggregationDataStore implements DataStore {\n     public void populateEntityDictionary(EntityDictionary dictionary) {\n \n         if (dynamicCompiledClasses != null && dynamicCompiledClasses.size() != 0) {\n-            dynamicCompiledClasses.forEach(dynamicLoadedClass -> dictionary.bindEntity(getType(dynamicLoadedClass),\n-                            Collections.singleton(Join.class)));\n+            dynamicCompiledClasses.forEach(dynamicLoadedClass -> dictionary.bindEntity(dynamicLoadedClass,\n+                    Collections.singleton(Join.class)));\n         }\n \n         ClassScanner.getAnnotatedClasses(AGGREGATION_STORE_CLASSES).forEach(\n-                cls -> dictionary.bindEntity(getType(cls), Collections.singleton(Join.class))\n+                cls -> dictionary.bindEntity(cls, Collections.singleton(Join.class))\n         );\n+\n+        /* Add 'grain' argument to each TimeDimensionColumn */\n+        for (Table table : queryEngine.getMetaDataStore().getMetaData(new ClassType<>(Table.class))) {\n+            for (TimeDimension timeDim : table.getTimeDimensions()) {\n+                dictionary.addArgumentToAttribute(\n+                        dictionary.getEntityClass(table.getName(), table.getVersion()),\n+                        timeDim.getName(),\n+                        new ArgumentType(\"grain\", ClassType.STRING_TYPE, timeDim.getDefaultGrain().getGrain()));\n+            }\n+        }\n     }\n \n     @Override\n", "next_change": {"commit": "6b9fe00b85461bb3ad17310348cec20ad411512d", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex 142d5003b..bb5b2e0b5 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -62,14 +65,31 @@ public class AggregationDataStore implements DataStore {\n                 cls -> dictionary.bindEntity(cls, Collections.singleton(Join.class))\n         );\n \n-        /* Add 'grain' argument to each TimeDimensionColumn */\n-        for (Table table : queryEngine.getMetaDataStore().getMetaData(new ClassType<>(Table.class))) {\n+        for (Table table : queryEngine.getMetaDataStore().getMetaData(ClassType.of(Table.class))) {\n+            /* Add 'grain' argument to each TimeDimensionColumn */\n             for (TimeDimension timeDim : table.getTimeDimensions()) {\n                 dictionary.addArgumentToAttribute(\n                         dictionary.getEntityClass(table.getName(), table.getVersion()),\n                         timeDim.getName(),\n                         new ArgumentType(\"grain\", ClassType.STRING_TYPE, timeDim.getDefaultGrain().getGrain()));\n             }\n+\n+            /* Add argument to each Column */\n+            for (Column col : table.getColumns()) {\n+                for (Argument arg : col.getArguments()) {\n+                    dictionary.addArgumentToAttribute(\n+                            dictionary.getEntityClass(table.getName(), table.getVersion()),\n+                            col.getName(),\n+                            new ArgumentType(arg.getName(), ValueType.getType(arg.getType()), arg.getDefaultValue()));\n+                }\n+            }\n+\n+            /* Add argument to each Table */\n+            for (Argument arg : table.getArguments()) {\n+                dictionary.addArgumentToEntity(\n+                        dictionary.getEntityClass(table.getName(), table.getVersion()),\n+                        new ArgumentType(arg.getName(), ValueType.getType(arg.getType()), arg.getDefaultValue()));\n+            }\n         }\n     }\n \n", "next_change": {"commit": "0cb5028cb5c37225e4f30d5a08469499cc9fba22", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex bb5b2e0b5..ce1f14160 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -97,4 +114,56 @@ public class AggregationDataStore implements DataStore {\n     public DataStoreTransaction beginTransaction() {\n         return new AggregationDataStoreTransaction(queryEngine, cache, queryLogger);\n     }\n+\n+    /**\n+     * Validates The security Check expression type for both Table and all its fields.\n+     * Table Security Check Condition - User Checks and Filter Expression Checks\n+     * Field Security Check Condition - User Checks\n+     * @param dictionary - Entity Dictionary\n+     * @param clz - Model Type.\n+     */\n+    private void validateModelExpressionChecks(EntityDictionary dictionary, Type<?> clz) {\n+        PermissionExpressionVisitor visitor = new PermissionExpressionVisitor();\n+        ParseTree parseTree = dictionary.getPermissionsForClass(clz, ReadPermission.class);\n+        if (parseTree != null) {\n+            validateExpression(dictionary,\n+                    visitor.visit(parseTree),\n+                    (checkClass) -> UserCheck.class.isAssignableFrom(checkClass)\n+                            || FilterExpressionCheck.class.isAssignableFrom(checkClass),\n+                    \"Table Can only have User Check and Filter Expression Check.\"\n+                    + \"Operation Checks Not allowed. given - %s\");\n+        }\n+\n+        dictionary.getAllFields(clz).stream()\n+                .map(field -> dictionary.getPermissionsForField(clz, field, ReadPermission.class))\n+                .filter(Objects::nonNull)\n+                .forEach(tree ->\n+                        validateExpression(dictionary,\n+                                visitor.visit(tree),\n+                                (checkClass) -> UserCheck.class.isAssignableFrom(checkClass),\n+                                \"Fields Can only have User checks. Given - %s\"));\n+    }\n+\n+    /**\n+     * Validates the Expression Check class to check whether it complies with the given predicate\n+     * @param dictionary - Entity dictionary\n+     * @param expressionChecksIdentifiers - Set of identifiers for whose the security check class is validated\n+     * @param validCheckPredicate - Predicate that takes security check class as argument.\n+     * @param errorMsgFormat - Error message format for the exception when predicate fails.\n+     * @throws IllegalStateException\n+     */\n+    private void validateExpression(EntityDictionary dictionary,\n+                                    Set<String> expressionChecksIdentifiers,\n+                                    Predicate<Class> validCheckPredicate,\n+                                    String errorMsgFormat) throws IllegalStateException {\n+        expressionChecksIdentifiers.stream()\n+                .filter(check -> dictionary.getRoleCheck(check) == null)  // skip all role checks\n+                .forEach(check -> {\n+                    Class<? extends Check> checkClass = dictionary.getCheck(check);\n+                    if (!validCheckPredicate.test(checkClass)) {\n+                        throw new IllegalStateException(String.format(errorMsgFormat,\n+                                \"(\" + check + \"-\" + checkClass + \")\"));\n+                    }\n+                });\n+    }\n }\n", "next_change": {"commit": "32856f2244a3334028099eeb7ecd13b69fa41016", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex ce1f14160..3fa211272 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -166,4 +166,14 @@ public class AggregationDataStore implements DataStore {\n                     }\n                 });\n     }\n+\n+    /**\n+     * Determines if a model is managed by the aggregation data store.\n+     * @param model The model in question.\n+     * @return True if the model is managed by the aggregation data store.  False otherwise.\n+     */\n+    public static final boolean isAggregationStoreModel(Type<?> model) {\n+        return AGGREGATION_STORE_CLASSES.stream()\n+                .anyMatch((annotation) -> model.getDeclaredAnnotation(annotation) != null);\n+    }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "ff86c56fde9064e1719ea35660fd04c42c949662", "message": "Merge commit", "committedDate": null}, {"oid": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "parent a14ccfbb7b558d27799b4e7b1916850519639708 author Jack (\uc815\ud658) <QubitPi@users.noreply.github.com> 1559678988 -0700 committer Aaron Klish <klish@verizonmedia.com> 1589583449 -0500"}, {"oid": "81dde7567aa8a6a00822a9a8f0bf901806a962e8", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add caching support to SQLQueryEngine (#1319)"}, {"oid": "9ff0eb6bfa7f8f0135d21cf68cb1e44c5d515d91", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Enable query caching by default (#1378)"}, {"oid": "8fece2b8f1b3078ce2598ddb03dca66bb984df46", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Aggregation DataStore QueryLogger Implementation (#1448)"}, {"oid": "8cb3c91a6812c87ab57ee9bb3fd76bf1e5018e44", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Time Dimension should support different formats during serialization (#1511)"}, {"oid": "49e61867e840d9818993879436d5db1aad964c9a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Move data store interfaces (#1671)"}, {"oid": "911d29408bdeeb4ff8d78f2beea2417be4e7c673", "committedDate": "2020-12-11 16:20:28 -0600", "message": "cleaned up package hierarchy for elide-core (#1672)"}, {"oid": "c9fb3b958d0067572de7a276ce491016a9f231d6", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Reduce class scans (#1704)"}, {"oid": "f88b63d286d73d3774558b24f16aef0bb0be6d1a", "committedDate": "2021-01-19 14:16:37 -0600", "message": "Initial Commit for Type changes"}, {"oid": "11b3c4311c36f5ea792d08137866c067964851eb", "committedDate": "2021-01-19 14:16:37 -0600", "message": "More changes"}, {"oid": "de9883d363ba8b4171be5d8ad508564664f6fc90", "committedDate": "2021-01-19 14:16:37 -0600", "message": "Review comments"}, {"oid": "ba73bc2a5617fed8feeee5b419a0f0808081628f", "committedDate": "2021-02-04 11:31:56 -0600", "message": "Elide 5 Agg Store: Multiple time grains (#1806)"}, {"oid": "c19d8c2237e960d792dc2ef6375356433b4fac21", "committedDate": "2021-03-11 17:10:26 -0600", "message": "Classtype cleanup (#1905)"}, {"oid": "6b9fe00b85461bb3ad17310348cec20ad411512d", "committedDate": "2021-03-25 14:02:17 -0500", "message": "Parameterized Metrics: Aggregation Store Model Changes Set 2 (#1957)"}, {"oid": "21b4c5a728a2fd55339282b1e13bfb02cf26c875", "committedDate": "2021-05-05 16:53:26 -0500", "message": "get permission executor from datastore for each model that it manages. (#2070)"}, {"oid": "0cb5028cb5c37225e4f30d5a08469499cc9fba22", "committedDate": "2021-05-17 09:38:24 -0500", "message": "add validation for security checks in agg model table, namespace and fields (#2088)"}, {"oid": "c3d71ad98a89137ed78e86deb091897836203f75", "committedDate": "2021-05-17 15:47:39 -0500", "message": "Propogate client query arguments to join tables (#2095)"}, {"oid": "32856f2244a3334028099eeb7ecd13b69fa41016", "committedDate": "2021-05-18 11:21:54 -0500", "message": "Aggregation Store ID Column Metadata (#2099)"}, {"oid": "06fbda9b30433d71d45e62ceab5727246c59b904", "committedDate": "2021-05-18 14:58:40 -0500", "message": "use AggregationStorePermissionExecutor for Aggregation Store Model (#2102)"}, {"oid": "4b8310f782f755f20fa79b52b7e4d13480b140f9", "committedDate": "2021-05-21 10:06:37 -0500", "message": "Remove usage of SQLReferenceTable. (#2116)"}, {"oid": "101f842daa06095652f898bda0f96fead4bb373e", "committedDate": "2021-08-05 14:37:57 -0500", "message": "GraphQL schema now namespaces internal types to avoid conflicts (#2237)"}, {"oid": "fe7009353573baf0206f7bb58617db97e067f900", "committedDate": "2021-09-02 11:31:12 -0500", "message": "Refactor class scanning for quarkus (#2284)"}, {"oid": "830b9f2a997eefcd677090875bede2e21e19f1f4", "committedDate": "2021-10-20 14:48:56 -0500", "message": "Support 'hidden' flag for analytic models and fields. (#2357)"}, {"oid": "f21f35950fe465cfbf135d06cc8ae2321a29513a", "committedDate": "2023-02-04 15:34:06 -0600", "message": "Elide 7.x (#2876)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU2NzY4OA==", "url": "https://github.com/yahoo/elide/pull/1367#discussion_r435567688", "body": "Remove", "bodyText": "Remove", "bodyHTML": "<p dir=\"auto\">Remove</p>", "author": "aklish", "createdAt": "2020-06-04T21:38:35Z", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java", "diffHunk": "@@ -75,6 +83,23 @@ public void populateEntityDictionary(EntityDictionary dictionary) {\n \n     @Override\n     public DataStoreTransaction beginTransaction() {\n-        return new AggregationDataStoreTransaction(queryEngine);\n+\tEntityManager entityManager = entityManagerSupplier.get();        \n+        return new AggregationDataStoreTransaction(entityManager, queryEngine, aggregationDataStoreTransactionCancel);\n+    }\n+\n+    /**\n+     * Functional interface for describing a method to supply EntityManager.\n+     */\n+    @FunctionalInterface\n+    public interface EntityManagerSupplier {", "originalCommit": "b916ca0a64e0659854cd15ae47b1b35b0c1260ce", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "de929061ff81b6969c97c27683791b478c0ac1c2", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex ad108f971..e0a5b1a84 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -83,23 +79,14 @@ public class AggregationDataStore implements DataStore {\n \n     @Override\n     public DataStoreTransaction beginTransaction() {\n-\tEntityManager entityManager = entityManagerSupplier.get();        \n-        return new AggregationDataStoreTransaction(entityManager, queryEngine, aggregationDataStoreTransactionCancel);\n-    }\n-\n-    /**\n-     * Functional interface for describing a method to supply EntityManager.\n-     */\n-    @FunctionalInterface\n-    public interface EntityManagerSupplier {\n-        EntityManager get();\n+        return new AggregationDataStoreTransaction(queryEngine, cancelTransaction);\n     }\n \n     /**\n      * Functional interface for describing a method to supply AggregationDataStoreTransaction.\n      */\n     @FunctionalInterface\n-    public interface  AggregationDataStoreTransactionCancel {\n+    public interface CancelTransaction {\n         public void cancel(EntityManager entityManager);\n     }\n }\n", "next_change": {"commit": "9a6dbc1186dfd5231d531fe04795a27b68f4fcd2", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex e0a5b1a84..f87ca6513 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -81,12 +78,4 @@ public class AggregationDataStore implements DataStore {\n     public DataStoreTransaction beginTransaction() {\n         return new AggregationDataStoreTransaction(queryEngine, cancelTransaction);\n     }\n-\n-    /**\n-     * Functional interface for describing a method to supply AggregationDataStoreTransaction.\n-     */\n-    @FunctionalInterface\n-    public interface CancelTransaction {\n-        public void cancel(EntityManager entityManager);\n-    }\n }\n", "next_change": {"commit": "18a8cc9d0da96a239329ca6b6c4b7eecee346b8e", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex f87ca6513..a1ec2a244 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -76,6 +74,6 @@ public class AggregationDataStore implements DataStore {\n \n     @Override\n     public DataStoreTransaction beginTransaction() {\n-        return new AggregationDataStoreTransaction(queryEngine, cancelTransaction);\n+        return new AggregationDataStoreTransaction(queryEngine);\n     }\n }\n", "next_change": {"commit": "5094ce020f2de18f1a34294178dd857eba7af5c4", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex a1ec2a244..c19fa4f9d 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -74,6 +74,6 @@ public class AggregationDataStore implements DataStore {\n \n     @Override\n     public DataStoreTransaction beginTransaction() {\n-        return new AggregationDataStoreTransaction(queryEngine);\n+        return new AggregationDataStoreTransaction(queryEngine, cache);\n     }\n }\n", "next_change": null}]}}]}}]}}]}, "revised_code_in_main": {"commit": "ff86c56fde9064e1719ea35660fd04c42c949662", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex ad108f971..0fe0b6abe 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -83,23 +74,6 @@ public class AggregationDataStore implements DataStore {\n \n     @Override\n     public DataStoreTransaction beginTransaction() {\n-\tEntityManager entityManager = entityManagerSupplier.get();        \n-        return new AggregationDataStoreTransaction(entityManager, queryEngine, aggregationDataStoreTransactionCancel);\n-    }\n-\n-    /**\n-     * Functional interface for describing a method to supply EntityManager.\n-     */\n-    @FunctionalInterface\n-    public interface EntityManagerSupplier {\n-        EntityManager get();\n-    }\n-\n-    /**\n-     * Functional interface for describing a method to supply AggregationDataStoreTransaction.\n-     */\n-    @FunctionalInterface\n-    public interface  AggregationDataStoreTransactionCancel {\n-        public void cancel(EntityManager entityManager);\n+        return new AggregationDataStoreTransaction(queryEngine, cache);\n     }\n }\n", "next_change": {"commit": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex 0fe0b6abe..12de28098 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -74,6 +75,6 @@ public class AggregationDataStore implements DataStore {\n \n     @Override\n     public DataStoreTransaction beginTransaction() {\n-        return new AggregationDataStoreTransaction(queryEngine, cache);\n+        return new AggregationDataStoreTransaction(queryEngine);\n     }\n }\n", "next_change": {"commit": "81dde7567aa8a6a00822a9a8f0bf901806a962e8", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex 12de28098..0fe0b6abe 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -75,6 +74,6 @@ public class AggregationDataStore implements DataStore {\n \n     @Override\n     public DataStoreTransaction beginTransaction() {\n-        return new AggregationDataStoreTransaction(queryEngine);\n+        return new AggregationDataStoreTransaction(queryEngine, cache);\n     }\n }\n", "next_change": {"commit": "8fece2b8f1b3078ce2598ddb03dca66bb984df46", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex 0fe0b6abe..098b52525 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -74,6 +76,6 @@ public class AggregationDataStore implements DataStore {\n \n     @Override\n     public DataStoreTransaction beginTransaction() {\n-        return new AggregationDataStoreTransaction(queryEngine, cache);\n+        return new AggregationDataStoreTransaction(queryEngine, cache, queryLogger);\n     }\n }\n", "next_change": {"commit": "8cb3c91a6812c87ab57ee9bb3fd76bf1e5018e44", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex 098b52525..a12f9bb3f 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -62,16 +59,6 @@ public class AggregationDataStore implements DataStore {\n             ClassScanner.getAnnotatedClasses(annotation)\n                     .forEach(cls -> dictionary.bindEntity(cls, Collections.singleton(Join.class)));\n         }\n-\n-        /* Add 'grain' argument to each TimeDimensionColumn */\n-        for (Table table : queryEngine.getMetaDataStore().getMetaData(Table.class)) {\n-            for (TimeDimension timeDim : table.getColumns(TimeDimension.class)) {\n-                dictionary.addArgumentToAttribute(\n-                        dictionary.getEntityClass(table.getName(), table.getVersion()),\n-                        timeDim.getName(),\n-                        new ArgumentType(\"grain\", String.class));\n-            }\n-        }\n     }\n \n     @Override\n", "next_change": {"commit": "c9fb3b958d0067572de7a276ce491016a9f231d6", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex a12f9bb3f..1b33c3972 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -54,11 +53,9 @@ public class AggregationDataStore implements DataStore {\n                     Collections.singleton(Join.class)));\n         }\n \n-        for (Class<? extends Annotation> annotation : AGGREGATION_STORE_CLASSES) {\n-            // bind non-jpa entity tables\n-            ClassScanner.getAnnotatedClasses(annotation)\n-                    .forEach(cls -> dictionary.bindEntity(cls, Collections.singleton(Join.class)));\n-        }\n+        ClassScanner.getAnnotatedClasses(AGGREGATION_STORE_CLASSES).forEach(\n+                cls -> dictionary.bindEntity(cls, Collections.singleton(Join.class))\n+        );\n     }\n \n     @Override\n", "next_change": {"commit": "f88b63d286d73d3774558b24f16aef0bb0be6d1a", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex 1b33c3972..9d0f4f4f9 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -49,12 +50,12 @@ public class AggregationDataStore implements DataStore {\n     public void populateEntityDictionary(EntityDictionary dictionary) {\n \n         if (dynamicCompiledClasses != null && dynamicCompiledClasses.size() != 0) {\n-            dynamicCompiledClasses.forEach(dynamicLoadedClass -> dictionary.bindEntity(dynamicLoadedClass,\n-                    Collections.singleton(Join.class)));\n+            dynamicCompiledClasses.forEach(dynamicLoadedClass -> dictionary.bindEntity(getType(dynamicLoadedClass),\n+                            Collections.singleton(Join.class)));\n         }\n \n         ClassScanner.getAnnotatedClasses(AGGREGATION_STORE_CLASSES).forEach(\n-                cls -> dictionary.bindEntity(cls, Collections.singleton(Join.class))\n+                cls -> dictionary.bindEntity(getType(cls), Collections.singleton(Join.class))\n         );\n     }\n \n", "next_change": {"commit": "11b3c4311c36f5ea792d08137866c067964851eb", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex 9d0f4f4f9..e26334f83 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -50,8 +51,8 @@ public class AggregationDataStore implements DataStore {\n     public void populateEntityDictionary(EntityDictionary dictionary) {\n \n         if (dynamicCompiledClasses != null && dynamicCompiledClasses.size() != 0) {\n-            dynamicCompiledClasses.forEach(dynamicLoadedClass -> dictionary.bindEntity(getType(dynamicLoadedClass),\n-                            Collections.singleton(Join.class)));\n+            dynamicCompiledClasses.forEach(dynamicLoadedClass -> dictionary.bindEntity(dynamicLoadedClass,\n+                    Collections.singleton(Join.class)));\n         }\n \n         ClassScanner.getAnnotatedClasses(AGGREGATION_STORE_CLASSES).forEach(\n", "next_change": {"commit": "de9883d363ba8b4171be5d8ad508564664f6fc90", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex e26334f83..2a313aa23 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -56,7 +55,7 @@ public class AggregationDataStore implements DataStore {\n         }\n \n         ClassScanner.getAnnotatedClasses(AGGREGATION_STORE_CLASSES).forEach(\n-                cls -> dictionary.bindEntity(getType(cls), Collections.singleton(Join.class))\n+                cls -> dictionary.bindEntity(cls, Collections.singleton(Join.class))\n         );\n     }\n \n", "next_change": {"commit": "ba73bc2a5617fed8feeee5b419a0f0808081628f", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex 2a313aa23..142d5003b 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -57,6 +61,16 @@ public class AggregationDataStore implements DataStore {\n         ClassScanner.getAnnotatedClasses(AGGREGATION_STORE_CLASSES).forEach(\n                 cls -> dictionary.bindEntity(cls, Collections.singleton(Join.class))\n         );\n+\n+        /* Add 'grain' argument to each TimeDimensionColumn */\n+        for (Table table : queryEngine.getMetaDataStore().getMetaData(new ClassType<>(Table.class))) {\n+            for (TimeDimension timeDim : table.getTimeDimensions()) {\n+                dictionary.addArgumentToAttribute(\n+                        dictionary.getEntityClass(table.getName(), table.getVersion()),\n+                        timeDim.getName(),\n+                        new ArgumentType(\"grain\", ClassType.STRING_TYPE, timeDim.getDefaultGrain().getGrain()));\n+            }\n+        }\n     }\n \n     @Override\n", "next_change": {"commit": "6b9fe00b85461bb3ad17310348cec20ad411512d", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex 142d5003b..bb5b2e0b5 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -62,14 +65,31 @@ public class AggregationDataStore implements DataStore {\n                 cls -> dictionary.bindEntity(cls, Collections.singleton(Join.class))\n         );\n \n-        /* Add 'grain' argument to each TimeDimensionColumn */\n-        for (Table table : queryEngine.getMetaDataStore().getMetaData(new ClassType<>(Table.class))) {\n+        for (Table table : queryEngine.getMetaDataStore().getMetaData(ClassType.of(Table.class))) {\n+            /* Add 'grain' argument to each TimeDimensionColumn */\n             for (TimeDimension timeDim : table.getTimeDimensions()) {\n                 dictionary.addArgumentToAttribute(\n                         dictionary.getEntityClass(table.getName(), table.getVersion()),\n                         timeDim.getName(),\n                         new ArgumentType(\"grain\", ClassType.STRING_TYPE, timeDim.getDefaultGrain().getGrain()));\n             }\n+\n+            /* Add argument to each Column */\n+            for (Column col : table.getColumns()) {\n+                for (Argument arg : col.getArguments()) {\n+                    dictionary.addArgumentToAttribute(\n+                            dictionary.getEntityClass(table.getName(), table.getVersion()),\n+                            col.getName(),\n+                            new ArgumentType(arg.getName(), ValueType.getType(arg.getType()), arg.getDefaultValue()));\n+                }\n+            }\n+\n+            /* Add argument to each Table */\n+            for (Argument arg : table.getArguments()) {\n+                dictionary.addArgumentToEntity(\n+                        dictionary.getEntityClass(table.getName(), table.getVersion()),\n+                        new ArgumentType(arg.getName(), ValueType.getType(arg.getType()), arg.getDefaultValue()));\n+            }\n         }\n     }\n \n", "next_change": {"commit": "0cb5028cb5c37225e4f30d5a08469499cc9fba22", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex bb5b2e0b5..ce1f14160 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -97,4 +114,56 @@ public class AggregationDataStore implements DataStore {\n     public DataStoreTransaction beginTransaction() {\n         return new AggregationDataStoreTransaction(queryEngine, cache, queryLogger);\n     }\n+\n+    /**\n+     * Validates The security Check expression type for both Table and all its fields.\n+     * Table Security Check Condition - User Checks and Filter Expression Checks\n+     * Field Security Check Condition - User Checks\n+     * @param dictionary - Entity Dictionary\n+     * @param clz - Model Type.\n+     */\n+    private void validateModelExpressionChecks(EntityDictionary dictionary, Type<?> clz) {\n+        PermissionExpressionVisitor visitor = new PermissionExpressionVisitor();\n+        ParseTree parseTree = dictionary.getPermissionsForClass(clz, ReadPermission.class);\n+        if (parseTree != null) {\n+            validateExpression(dictionary,\n+                    visitor.visit(parseTree),\n+                    (checkClass) -> UserCheck.class.isAssignableFrom(checkClass)\n+                            || FilterExpressionCheck.class.isAssignableFrom(checkClass),\n+                    \"Table Can only have User Check and Filter Expression Check.\"\n+                    + \"Operation Checks Not allowed. given - %s\");\n+        }\n+\n+        dictionary.getAllFields(clz).stream()\n+                .map(field -> dictionary.getPermissionsForField(clz, field, ReadPermission.class))\n+                .filter(Objects::nonNull)\n+                .forEach(tree ->\n+                        validateExpression(dictionary,\n+                                visitor.visit(tree),\n+                                (checkClass) -> UserCheck.class.isAssignableFrom(checkClass),\n+                                \"Fields Can only have User checks. Given - %s\"));\n+    }\n+\n+    /**\n+     * Validates the Expression Check class to check whether it complies with the given predicate\n+     * @param dictionary - Entity dictionary\n+     * @param expressionChecksIdentifiers - Set of identifiers for whose the security check class is validated\n+     * @param validCheckPredicate - Predicate that takes security check class as argument.\n+     * @param errorMsgFormat - Error message format for the exception when predicate fails.\n+     * @throws IllegalStateException\n+     */\n+    private void validateExpression(EntityDictionary dictionary,\n+                                    Set<String> expressionChecksIdentifiers,\n+                                    Predicate<Class> validCheckPredicate,\n+                                    String errorMsgFormat) throws IllegalStateException {\n+        expressionChecksIdentifiers.stream()\n+                .filter(check -> dictionary.getRoleCheck(check) == null)  // skip all role checks\n+                .forEach(check -> {\n+                    Class<? extends Check> checkClass = dictionary.getCheck(check);\n+                    if (!validCheckPredicate.test(checkClass)) {\n+                        throw new IllegalStateException(String.format(errorMsgFormat,\n+                                \"(\" + check + \"-\" + checkClass + \")\"));\n+                    }\n+                });\n+    }\n }\n", "next_change": {"commit": "32856f2244a3334028099eeb7ecd13b69fa41016", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex ce1f14160..3fa211272 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -166,4 +166,14 @@ public class AggregationDataStore implements DataStore {\n                     }\n                 });\n     }\n+\n+    /**\n+     * Determines if a model is managed by the aggregation data store.\n+     * @param model The model in question.\n+     * @return True if the model is managed by the aggregation data store.  False otherwise.\n+     */\n+    public static final boolean isAggregationStoreModel(Type<?> model) {\n+        return AGGREGATION_STORE_CLASSES.stream()\n+                .anyMatch((annotation) -> model.getDeclaredAnnotation(annotation) != null);\n+    }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "ff86c56fde9064e1719ea35660fd04c42c949662", "message": "Merge commit", "committedDate": null}, {"oid": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "parent a14ccfbb7b558d27799b4e7b1916850519639708 author Jack (\uc815\ud658) <QubitPi@users.noreply.github.com> 1559678988 -0700 committer Aaron Klish <klish@verizonmedia.com> 1589583449 -0500"}, {"oid": "81dde7567aa8a6a00822a9a8f0bf901806a962e8", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add caching support to SQLQueryEngine (#1319)"}, {"oid": "9ff0eb6bfa7f8f0135d21cf68cb1e44c5d515d91", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Enable query caching by default (#1378)"}, {"oid": "8fece2b8f1b3078ce2598ddb03dca66bb984df46", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Aggregation DataStore QueryLogger Implementation (#1448)"}, {"oid": "8cb3c91a6812c87ab57ee9bb3fd76bf1e5018e44", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Time Dimension should support different formats during serialization (#1511)"}, {"oid": "49e61867e840d9818993879436d5db1aad964c9a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Move data store interfaces (#1671)"}, {"oid": "911d29408bdeeb4ff8d78f2beea2417be4e7c673", "committedDate": "2020-12-11 16:20:28 -0600", "message": "cleaned up package hierarchy for elide-core (#1672)"}, {"oid": "c9fb3b958d0067572de7a276ce491016a9f231d6", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Reduce class scans (#1704)"}, {"oid": "f88b63d286d73d3774558b24f16aef0bb0be6d1a", "committedDate": "2021-01-19 14:16:37 -0600", "message": "Initial Commit for Type changes"}, {"oid": "11b3c4311c36f5ea792d08137866c067964851eb", "committedDate": "2021-01-19 14:16:37 -0600", "message": "More changes"}, {"oid": "de9883d363ba8b4171be5d8ad508564664f6fc90", "committedDate": "2021-01-19 14:16:37 -0600", "message": "Review comments"}, {"oid": "ba73bc2a5617fed8feeee5b419a0f0808081628f", "committedDate": "2021-02-04 11:31:56 -0600", "message": "Elide 5 Agg Store: Multiple time grains (#1806)"}, {"oid": "c19d8c2237e960d792dc2ef6375356433b4fac21", "committedDate": "2021-03-11 17:10:26 -0600", "message": "Classtype cleanup (#1905)"}, {"oid": "6b9fe00b85461bb3ad17310348cec20ad411512d", "committedDate": "2021-03-25 14:02:17 -0500", "message": "Parameterized Metrics: Aggregation Store Model Changes Set 2 (#1957)"}, {"oid": "21b4c5a728a2fd55339282b1e13bfb02cf26c875", "committedDate": "2021-05-05 16:53:26 -0500", "message": "get permission executor from datastore for each model that it manages. (#2070)"}, {"oid": "0cb5028cb5c37225e4f30d5a08469499cc9fba22", "committedDate": "2021-05-17 09:38:24 -0500", "message": "add validation for security checks in agg model table, namespace and fields (#2088)"}, {"oid": "c3d71ad98a89137ed78e86deb091897836203f75", "committedDate": "2021-05-17 15:47:39 -0500", "message": "Propogate client query arguments to join tables (#2095)"}, {"oid": "32856f2244a3334028099eeb7ecd13b69fa41016", "committedDate": "2021-05-18 11:21:54 -0500", "message": "Aggregation Store ID Column Metadata (#2099)"}, {"oid": "06fbda9b30433d71d45e62ceab5727246c59b904", "committedDate": "2021-05-18 14:58:40 -0500", "message": "use AggregationStorePermissionExecutor for Aggregation Store Model (#2102)"}, {"oid": "4b8310f782f755f20fa79b52b7e4d13480b140f9", "committedDate": "2021-05-21 10:06:37 -0500", "message": "Remove usage of SQLReferenceTable. (#2116)"}, {"oid": "101f842daa06095652f898bda0f96fead4bb373e", "committedDate": "2021-08-05 14:37:57 -0500", "message": "GraphQL schema now namespaces internal types to avoid conflicts (#2237)"}, {"oid": "fe7009353573baf0206f7bb58617db97e067f900", "committedDate": "2021-09-02 11:31:12 -0500", "message": "Refactor class scanning for quarkus (#2284)"}, {"oid": "830b9f2a997eefcd677090875bede2e21e19f1f4", "committedDate": "2021-10-20 14:48:56 -0500", "message": "Support 'hidden' flag for analytic models and fields. (#2357)"}, {"oid": "f21f35950fe465cfbf135d06cc8ae2321a29513a", "committedDate": "2023-02-04 15:34:06 -0600", "message": "Elide 7.x (#2876)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU2Nzk3OQ==", "url": "https://github.com/yahoo/elide/pull/1367#discussion_r435567979", "body": "Can we shorten the name of this interface (we already know this is for the AggregationDataStore since it is an inner class).  ", "bodyText": "Can we shorten the name of this interface (we already know this is for the AggregationDataStore since it is an inner class).", "bodyHTML": "<p dir=\"auto\">Can we shorten the name of this interface (we already know this is for the AggregationDataStore since it is an inner class).</p>", "author": "aklish", "createdAt": "2020-06-04T21:39:14Z", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java", "diffHunk": "@@ -75,6 +83,23 @@ public void populateEntityDictionary(EntityDictionary dictionary) {\n \n     @Override\n     public DataStoreTransaction beginTransaction() {\n-        return new AggregationDataStoreTransaction(queryEngine);\n+\tEntityManager entityManager = entityManagerSupplier.get();        \n+        return new AggregationDataStoreTransaction(entityManager, queryEngine, aggregationDataStoreTransactionCancel);\n+    }\n+\n+    /**\n+     * Functional interface for describing a method to supply EntityManager.\n+     */\n+    @FunctionalInterface\n+    public interface EntityManagerSupplier {\n+        EntityManager get();\n+    }\n+\n+    /**\n+     * Functional interface for describing a method to supply AggregationDataStoreTransaction.\n+     */\n+    @FunctionalInterface\n+    public interface  AggregationDataStoreTransactionCancel {", "originalCommit": "b916ca0a64e0659854cd15ae47b1b35b0c1260ce", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "de929061ff81b6969c97c27683791b478c0ac1c2", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex ad108f971..e0a5b1a84 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -83,23 +79,14 @@ public class AggregationDataStore implements DataStore {\n \n     @Override\n     public DataStoreTransaction beginTransaction() {\n-\tEntityManager entityManager = entityManagerSupplier.get();        \n-        return new AggregationDataStoreTransaction(entityManager, queryEngine, aggregationDataStoreTransactionCancel);\n-    }\n-\n-    /**\n-     * Functional interface for describing a method to supply EntityManager.\n-     */\n-    @FunctionalInterface\n-    public interface EntityManagerSupplier {\n-        EntityManager get();\n+        return new AggregationDataStoreTransaction(queryEngine, cancelTransaction);\n     }\n \n     /**\n      * Functional interface for describing a method to supply AggregationDataStoreTransaction.\n      */\n     @FunctionalInterface\n-    public interface  AggregationDataStoreTransactionCancel {\n+    public interface CancelTransaction {\n         public void cancel(EntityManager entityManager);\n     }\n }\n", "next_change": {"commit": "9a6dbc1186dfd5231d531fe04795a27b68f4fcd2", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex e0a5b1a84..f87ca6513 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -81,12 +78,4 @@ public class AggregationDataStore implements DataStore {\n     public DataStoreTransaction beginTransaction() {\n         return new AggregationDataStoreTransaction(queryEngine, cancelTransaction);\n     }\n-\n-    /**\n-     * Functional interface for describing a method to supply AggregationDataStoreTransaction.\n-     */\n-    @FunctionalInterface\n-    public interface CancelTransaction {\n-        public void cancel(EntityManager entityManager);\n-    }\n }\n", "next_change": {"commit": "18a8cc9d0da96a239329ca6b6c4b7eecee346b8e", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex f87ca6513..a1ec2a244 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -76,6 +74,6 @@ public class AggregationDataStore implements DataStore {\n \n     @Override\n     public DataStoreTransaction beginTransaction() {\n-        return new AggregationDataStoreTransaction(queryEngine, cancelTransaction);\n+        return new AggregationDataStoreTransaction(queryEngine);\n     }\n }\n", "next_change": {"commit": "5094ce020f2de18f1a34294178dd857eba7af5c4", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex a1ec2a244..c19fa4f9d 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -74,6 +74,6 @@ public class AggregationDataStore implements DataStore {\n \n     @Override\n     public DataStoreTransaction beginTransaction() {\n-        return new AggregationDataStoreTransaction(queryEngine);\n+        return new AggregationDataStoreTransaction(queryEngine, cache);\n     }\n }\n", "next_change": null}]}}]}}]}}]}, "revised_code_in_main": {"commit": "ff86c56fde9064e1719ea35660fd04c42c949662", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex ad108f971..0fe0b6abe 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -83,23 +74,6 @@ public class AggregationDataStore implements DataStore {\n \n     @Override\n     public DataStoreTransaction beginTransaction() {\n-\tEntityManager entityManager = entityManagerSupplier.get();        \n-        return new AggregationDataStoreTransaction(entityManager, queryEngine, aggregationDataStoreTransactionCancel);\n-    }\n-\n-    /**\n-     * Functional interface for describing a method to supply EntityManager.\n-     */\n-    @FunctionalInterface\n-    public interface EntityManagerSupplier {\n-        EntityManager get();\n-    }\n-\n-    /**\n-     * Functional interface for describing a method to supply AggregationDataStoreTransaction.\n-     */\n-    @FunctionalInterface\n-    public interface  AggregationDataStoreTransactionCancel {\n-        public void cancel(EntityManager entityManager);\n+        return new AggregationDataStoreTransaction(queryEngine, cache);\n     }\n }\n", "next_change": {"commit": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex 0fe0b6abe..12de28098 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -74,6 +75,6 @@ public class AggregationDataStore implements DataStore {\n \n     @Override\n     public DataStoreTransaction beginTransaction() {\n-        return new AggregationDataStoreTransaction(queryEngine, cache);\n+        return new AggregationDataStoreTransaction(queryEngine);\n     }\n }\n", "next_change": {"commit": "81dde7567aa8a6a00822a9a8f0bf901806a962e8", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex 12de28098..0fe0b6abe 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -75,6 +74,6 @@ public class AggregationDataStore implements DataStore {\n \n     @Override\n     public DataStoreTransaction beginTransaction() {\n-        return new AggregationDataStoreTransaction(queryEngine);\n+        return new AggregationDataStoreTransaction(queryEngine, cache);\n     }\n }\n", "next_change": {"commit": "8fece2b8f1b3078ce2598ddb03dca66bb984df46", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex 0fe0b6abe..098b52525 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -74,6 +76,6 @@ public class AggregationDataStore implements DataStore {\n \n     @Override\n     public DataStoreTransaction beginTransaction() {\n-        return new AggregationDataStoreTransaction(queryEngine, cache);\n+        return new AggregationDataStoreTransaction(queryEngine, cache, queryLogger);\n     }\n }\n", "next_change": {"commit": "8cb3c91a6812c87ab57ee9bb3fd76bf1e5018e44", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex 098b52525..a12f9bb3f 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -62,16 +59,6 @@ public class AggregationDataStore implements DataStore {\n             ClassScanner.getAnnotatedClasses(annotation)\n                     .forEach(cls -> dictionary.bindEntity(cls, Collections.singleton(Join.class)));\n         }\n-\n-        /* Add 'grain' argument to each TimeDimensionColumn */\n-        for (Table table : queryEngine.getMetaDataStore().getMetaData(Table.class)) {\n-            for (TimeDimension timeDim : table.getColumns(TimeDimension.class)) {\n-                dictionary.addArgumentToAttribute(\n-                        dictionary.getEntityClass(table.getName(), table.getVersion()),\n-                        timeDim.getName(),\n-                        new ArgumentType(\"grain\", String.class));\n-            }\n-        }\n     }\n \n     @Override\n", "next_change": {"commit": "c9fb3b958d0067572de7a276ce491016a9f231d6", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex a12f9bb3f..1b33c3972 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -54,11 +53,9 @@ public class AggregationDataStore implements DataStore {\n                     Collections.singleton(Join.class)));\n         }\n \n-        for (Class<? extends Annotation> annotation : AGGREGATION_STORE_CLASSES) {\n-            // bind non-jpa entity tables\n-            ClassScanner.getAnnotatedClasses(annotation)\n-                    .forEach(cls -> dictionary.bindEntity(cls, Collections.singleton(Join.class)));\n-        }\n+        ClassScanner.getAnnotatedClasses(AGGREGATION_STORE_CLASSES).forEach(\n+                cls -> dictionary.bindEntity(cls, Collections.singleton(Join.class))\n+        );\n     }\n \n     @Override\n", "next_change": {"commit": "f88b63d286d73d3774558b24f16aef0bb0be6d1a", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex 1b33c3972..9d0f4f4f9 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -49,12 +50,12 @@ public class AggregationDataStore implements DataStore {\n     public void populateEntityDictionary(EntityDictionary dictionary) {\n \n         if (dynamicCompiledClasses != null && dynamicCompiledClasses.size() != 0) {\n-            dynamicCompiledClasses.forEach(dynamicLoadedClass -> dictionary.bindEntity(dynamicLoadedClass,\n-                    Collections.singleton(Join.class)));\n+            dynamicCompiledClasses.forEach(dynamicLoadedClass -> dictionary.bindEntity(getType(dynamicLoadedClass),\n+                            Collections.singleton(Join.class)));\n         }\n \n         ClassScanner.getAnnotatedClasses(AGGREGATION_STORE_CLASSES).forEach(\n-                cls -> dictionary.bindEntity(cls, Collections.singleton(Join.class))\n+                cls -> dictionary.bindEntity(getType(cls), Collections.singleton(Join.class))\n         );\n     }\n \n", "next_change": {"commit": "11b3c4311c36f5ea792d08137866c067964851eb", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex 9d0f4f4f9..e26334f83 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -50,8 +51,8 @@ public class AggregationDataStore implements DataStore {\n     public void populateEntityDictionary(EntityDictionary dictionary) {\n \n         if (dynamicCompiledClasses != null && dynamicCompiledClasses.size() != 0) {\n-            dynamicCompiledClasses.forEach(dynamicLoadedClass -> dictionary.bindEntity(getType(dynamicLoadedClass),\n-                            Collections.singleton(Join.class)));\n+            dynamicCompiledClasses.forEach(dynamicLoadedClass -> dictionary.bindEntity(dynamicLoadedClass,\n+                    Collections.singleton(Join.class)));\n         }\n \n         ClassScanner.getAnnotatedClasses(AGGREGATION_STORE_CLASSES).forEach(\n", "next_change": {"commit": "de9883d363ba8b4171be5d8ad508564664f6fc90", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex e26334f83..2a313aa23 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -56,7 +55,7 @@ public class AggregationDataStore implements DataStore {\n         }\n \n         ClassScanner.getAnnotatedClasses(AGGREGATION_STORE_CLASSES).forEach(\n-                cls -> dictionary.bindEntity(getType(cls), Collections.singleton(Join.class))\n+                cls -> dictionary.bindEntity(cls, Collections.singleton(Join.class))\n         );\n     }\n \n", "next_change": {"commit": "ba73bc2a5617fed8feeee5b419a0f0808081628f", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex 2a313aa23..142d5003b 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -57,6 +61,16 @@ public class AggregationDataStore implements DataStore {\n         ClassScanner.getAnnotatedClasses(AGGREGATION_STORE_CLASSES).forEach(\n                 cls -> dictionary.bindEntity(cls, Collections.singleton(Join.class))\n         );\n+\n+        /* Add 'grain' argument to each TimeDimensionColumn */\n+        for (Table table : queryEngine.getMetaDataStore().getMetaData(new ClassType<>(Table.class))) {\n+            for (TimeDimension timeDim : table.getTimeDimensions()) {\n+                dictionary.addArgumentToAttribute(\n+                        dictionary.getEntityClass(table.getName(), table.getVersion()),\n+                        timeDim.getName(),\n+                        new ArgumentType(\"grain\", ClassType.STRING_TYPE, timeDim.getDefaultGrain().getGrain()));\n+            }\n+        }\n     }\n \n     @Override\n", "next_change": {"commit": "6b9fe00b85461bb3ad17310348cec20ad411512d", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex 142d5003b..bb5b2e0b5 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -62,14 +65,31 @@ public class AggregationDataStore implements DataStore {\n                 cls -> dictionary.bindEntity(cls, Collections.singleton(Join.class))\n         );\n \n-        /* Add 'grain' argument to each TimeDimensionColumn */\n-        for (Table table : queryEngine.getMetaDataStore().getMetaData(new ClassType<>(Table.class))) {\n+        for (Table table : queryEngine.getMetaDataStore().getMetaData(ClassType.of(Table.class))) {\n+            /* Add 'grain' argument to each TimeDimensionColumn */\n             for (TimeDimension timeDim : table.getTimeDimensions()) {\n                 dictionary.addArgumentToAttribute(\n                         dictionary.getEntityClass(table.getName(), table.getVersion()),\n                         timeDim.getName(),\n                         new ArgumentType(\"grain\", ClassType.STRING_TYPE, timeDim.getDefaultGrain().getGrain()));\n             }\n+\n+            /* Add argument to each Column */\n+            for (Column col : table.getColumns()) {\n+                for (Argument arg : col.getArguments()) {\n+                    dictionary.addArgumentToAttribute(\n+                            dictionary.getEntityClass(table.getName(), table.getVersion()),\n+                            col.getName(),\n+                            new ArgumentType(arg.getName(), ValueType.getType(arg.getType()), arg.getDefaultValue()));\n+                }\n+            }\n+\n+            /* Add argument to each Table */\n+            for (Argument arg : table.getArguments()) {\n+                dictionary.addArgumentToEntity(\n+                        dictionary.getEntityClass(table.getName(), table.getVersion()),\n+                        new ArgumentType(arg.getName(), ValueType.getType(arg.getType()), arg.getDefaultValue()));\n+            }\n         }\n     }\n \n", "next_change": {"commit": "0cb5028cb5c37225e4f30d5a08469499cc9fba22", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex bb5b2e0b5..ce1f14160 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -97,4 +114,56 @@ public class AggregationDataStore implements DataStore {\n     public DataStoreTransaction beginTransaction() {\n         return new AggregationDataStoreTransaction(queryEngine, cache, queryLogger);\n     }\n+\n+    /**\n+     * Validates The security Check expression type for both Table and all its fields.\n+     * Table Security Check Condition - User Checks and Filter Expression Checks\n+     * Field Security Check Condition - User Checks\n+     * @param dictionary - Entity Dictionary\n+     * @param clz - Model Type.\n+     */\n+    private void validateModelExpressionChecks(EntityDictionary dictionary, Type<?> clz) {\n+        PermissionExpressionVisitor visitor = new PermissionExpressionVisitor();\n+        ParseTree parseTree = dictionary.getPermissionsForClass(clz, ReadPermission.class);\n+        if (parseTree != null) {\n+            validateExpression(dictionary,\n+                    visitor.visit(parseTree),\n+                    (checkClass) -> UserCheck.class.isAssignableFrom(checkClass)\n+                            || FilterExpressionCheck.class.isAssignableFrom(checkClass),\n+                    \"Table Can only have User Check and Filter Expression Check.\"\n+                    + \"Operation Checks Not allowed. given - %s\");\n+        }\n+\n+        dictionary.getAllFields(clz).stream()\n+                .map(field -> dictionary.getPermissionsForField(clz, field, ReadPermission.class))\n+                .filter(Objects::nonNull)\n+                .forEach(tree ->\n+                        validateExpression(dictionary,\n+                                visitor.visit(tree),\n+                                (checkClass) -> UserCheck.class.isAssignableFrom(checkClass),\n+                                \"Fields Can only have User checks. Given - %s\"));\n+    }\n+\n+    /**\n+     * Validates the Expression Check class to check whether it complies with the given predicate\n+     * @param dictionary - Entity dictionary\n+     * @param expressionChecksIdentifiers - Set of identifiers for whose the security check class is validated\n+     * @param validCheckPredicate - Predicate that takes security check class as argument.\n+     * @param errorMsgFormat - Error message format for the exception when predicate fails.\n+     * @throws IllegalStateException\n+     */\n+    private void validateExpression(EntityDictionary dictionary,\n+                                    Set<String> expressionChecksIdentifiers,\n+                                    Predicate<Class> validCheckPredicate,\n+                                    String errorMsgFormat) throws IllegalStateException {\n+        expressionChecksIdentifiers.stream()\n+                .filter(check -> dictionary.getRoleCheck(check) == null)  // skip all role checks\n+                .forEach(check -> {\n+                    Class<? extends Check> checkClass = dictionary.getCheck(check);\n+                    if (!validCheckPredicate.test(checkClass)) {\n+                        throw new IllegalStateException(String.format(errorMsgFormat,\n+                                \"(\" + check + \"-\" + checkClass + \")\"));\n+                    }\n+                });\n+    }\n }\n", "next_change": {"commit": "32856f2244a3334028099eeb7ecd13b69fa41016", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\nindex ce1f14160..3fa211272 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStore.java\n", "chunk": "@@ -166,4 +166,14 @@ public class AggregationDataStore implements DataStore {\n                     }\n                 });\n     }\n+\n+    /**\n+     * Determines if a model is managed by the aggregation data store.\n+     * @param model The model in question.\n+     * @return True if the model is managed by the aggregation data store.  False otherwise.\n+     */\n+    public static final boolean isAggregationStoreModel(Type<?> model) {\n+        return AGGREGATION_STORE_CLASSES.stream()\n+                .anyMatch((annotation) -> model.getDeclaredAnnotation(annotation) != null);\n+    }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "ff86c56fde9064e1719ea35660fd04c42c949662", "message": "Merge commit", "committedDate": null}, {"oid": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "parent a14ccfbb7b558d27799b4e7b1916850519639708 author Jack (\uc815\ud658) <QubitPi@users.noreply.github.com> 1559678988 -0700 committer Aaron Klish <klish@verizonmedia.com> 1589583449 -0500"}, {"oid": "81dde7567aa8a6a00822a9a8f0bf901806a962e8", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add caching support to SQLQueryEngine (#1319)"}, {"oid": "9ff0eb6bfa7f8f0135d21cf68cb1e44c5d515d91", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Enable query caching by default (#1378)"}, {"oid": "8fece2b8f1b3078ce2598ddb03dca66bb984df46", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Aggregation DataStore QueryLogger Implementation (#1448)"}, {"oid": "8cb3c91a6812c87ab57ee9bb3fd76bf1e5018e44", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Time Dimension should support different formats during serialization (#1511)"}, {"oid": "49e61867e840d9818993879436d5db1aad964c9a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Move data store interfaces (#1671)"}, {"oid": "911d29408bdeeb4ff8d78f2beea2417be4e7c673", "committedDate": "2020-12-11 16:20:28 -0600", "message": "cleaned up package hierarchy for elide-core (#1672)"}, {"oid": "c9fb3b958d0067572de7a276ce491016a9f231d6", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Reduce class scans (#1704)"}, {"oid": "f88b63d286d73d3774558b24f16aef0bb0be6d1a", "committedDate": "2021-01-19 14:16:37 -0600", "message": "Initial Commit for Type changes"}, {"oid": "11b3c4311c36f5ea792d08137866c067964851eb", "committedDate": "2021-01-19 14:16:37 -0600", "message": "More changes"}, {"oid": "de9883d363ba8b4171be5d8ad508564664f6fc90", "committedDate": "2021-01-19 14:16:37 -0600", "message": "Review comments"}, {"oid": "ba73bc2a5617fed8feeee5b419a0f0808081628f", "committedDate": "2021-02-04 11:31:56 -0600", "message": "Elide 5 Agg Store: Multiple time grains (#1806)"}, {"oid": "c19d8c2237e960d792dc2ef6375356433b4fac21", "committedDate": "2021-03-11 17:10:26 -0600", "message": "Classtype cleanup (#1905)"}, {"oid": "6b9fe00b85461bb3ad17310348cec20ad411512d", "committedDate": "2021-03-25 14:02:17 -0500", "message": "Parameterized Metrics: Aggregation Store Model Changes Set 2 (#1957)"}, {"oid": "21b4c5a728a2fd55339282b1e13bfb02cf26c875", "committedDate": "2021-05-05 16:53:26 -0500", "message": "get permission executor from datastore for each model that it manages. (#2070)"}, {"oid": "0cb5028cb5c37225e4f30d5a08469499cc9fba22", "committedDate": "2021-05-17 09:38:24 -0500", "message": "add validation for security checks in agg model table, namespace and fields (#2088)"}, {"oid": "c3d71ad98a89137ed78e86deb091897836203f75", "committedDate": "2021-05-17 15:47:39 -0500", "message": "Propogate client query arguments to join tables (#2095)"}, {"oid": "32856f2244a3334028099eeb7ecd13b69fa41016", "committedDate": "2021-05-18 11:21:54 -0500", "message": "Aggregation Store ID Column Metadata (#2099)"}, {"oid": "06fbda9b30433d71d45e62ceab5727246c59b904", "committedDate": "2021-05-18 14:58:40 -0500", "message": "use AggregationStorePermissionExecutor for Aggregation Store Model (#2102)"}, {"oid": "4b8310f782f755f20fa79b52b7e4d13480b140f9", "committedDate": "2021-05-21 10:06:37 -0500", "message": "Remove usage of SQLReferenceTable. (#2116)"}, {"oid": "101f842daa06095652f898bda0f96fead4bb373e", "committedDate": "2021-08-05 14:37:57 -0500", "message": "GraphQL schema now namespaces internal types to avoid conflicts (#2237)"}, {"oid": "fe7009353573baf0206f7bb58617db97e067f900", "committedDate": "2021-09-02 11:31:12 -0500", "message": "Refactor class scanning for quarkus (#2284)"}, {"oid": "830b9f2a997eefcd677090875bede2e21e19f1f4", "committedDate": "2021-10-20 14:48:56 -0500", "message": "Support 'hidden' flag for analytic models and fields. (#2357)"}, {"oid": "f21f35950fe465cfbf135d06cc8ae2321a29513a", "committedDate": "2023-02-04 15:34:06 -0600", "message": "Elide 7.x (#2876)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU2ODQzNg==", "url": "https://github.com/yahoo/elide/pull/1367#discussion_r435568436", "body": "Remove the entity manager from the constructor.  The AggregationStore (other than the SQLQueryEngine) should not have a direct dependency on the EntityManager", "bodyText": "Remove the entity manager from the constructor.  The AggregationStore (other than the SQLQueryEngine) should not have a direct dependency on the EntityManager", "bodyHTML": "<p dir=\"auto\">Remove the entity manager from the constructor.  The AggregationStore (other than the SQLQueryEngine) should not have a direct dependency on the EntityManager</p>", "author": "aklish", "createdAt": "2020-06-04T21:40:23Z", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java", "diffHunk": "@@ -15,13 +15,20 @@\n import com.google.common.annotations.VisibleForTesting;\n \n import java.io.IOException;\n+\n+import javax.persistence.EntityManager;\n+\n /**\n  * Transaction handler for {@link AggregationDataStore}.\n  */\n public class AggregationDataStoreTransaction extends DataStoreTransactionImplementation {\n+    private EntityManager em;\n     private QueryEngine queryEngine;\n-    public AggregationDataStoreTransaction(QueryEngine queryEngine) {\n-        this.queryEngine = queryEngine;\n+    private AggregationDataStore.AggregationDataStoreTransactionCancel aggregationDataStoreTransactionCancel;\n+    public AggregationDataStoreTransaction(EntityManager em, QueryEngine queryEngine, AggregationDataStore.AggregationDataStoreTransactionCancel aggregationDataStoreTransactionCancel) {", "originalCommit": "b916ca0a64e0659854cd15ae47b1b35b0c1260ce", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8064be350bc30ffb58923074f4a08d143f3c21c5", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\nindex ecaddcba8..fc85f554b 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\n", "chunk": "@@ -24,8 +24,8 @@ import javax.persistence.EntityManager;\n public class AggregationDataStoreTransaction extends DataStoreTransactionImplementation {\n     private EntityManager em;\n     private QueryEngine queryEngine;\n-    private AggregationDataStore.AggregationDataStoreTransactionCancel aggregationDataStoreTransactionCancel;\n-    public AggregationDataStoreTransaction(EntityManager em, QueryEngine queryEngine, AggregationDataStore.AggregationDataStoreTransactionCancel aggregationDataStoreTransactionCancel) {\n+    private Future<QueryResult> result;\n+    public AggregationDataStoreTransaction(EntityManager em, QueryEngine queryEngine) {\n         this.em = em;\n \tthis.queryEngine = queryEngine;\n \tthis.aggregationDataStoreTransactionCancel = aggregationDataStoreTransactionCancel;\n", "next_change": {"commit": "4688f151689cff2275c12a329d38538c7ad565f6", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\nindex fc85f554b..a70dc84b4 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\n", "chunk": "@@ -24,7 +24,7 @@ import javax.persistence.EntityManager;\n public class AggregationDataStoreTransaction extends DataStoreTransactionImplementation {\n     private EntityManager em;\n     private QueryEngine queryEngine;\n-    private Future<QueryResult> result;\n+    private Future<QueryResult> queryResult;\n     public AggregationDataStoreTransaction(EntityManager em, QueryEngine queryEngine) {\n         this.em = em;\n \tthis.queryEngine = queryEngine;\n", "next_change": {"commit": "c637d51fba403ac0e2c8fad524d4ea781e985951", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\nindex a70dc84b4..a049e19f6 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\n", "chunk": "@@ -22,11 +23,9 @@ import javax.persistence.EntityManager;\n  * Transaction handler for {@link AggregationDataStore}.\n  */\n public class AggregationDataStoreTransaction extends DataStoreTransactionImplementation {\n-    private EntityManager em;\n     private QueryEngine queryEngine;\n     private Future<QueryResult> queryResult;\n-    public AggregationDataStoreTransaction(EntityManager em, QueryEngine queryEngine) {\n-        this.em = em;\n+    public AggregationDataStoreTransaction(QueryEngine queryEngine) {\n \tthis.queryEngine = queryEngine;\n \tthis.aggregationDataStoreTransactionCancel = aggregationDataStoreTransactionCancel;\n     }\n", "next_change": {"commit": "9a6dbc1186dfd5231d531fe04795a27b68f4fcd2", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\nindex a049e19f6..38ca52ca3 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\n", "chunk": "@@ -26,8 +25,8 @@ public class AggregationDataStoreTransaction extends DataStoreTransactionImpleme\n     private QueryEngine queryEngine;\n     private Future<QueryResult> queryResult;\n     public AggregationDataStoreTransaction(QueryEngine queryEngine) {\n-\tthis.queryEngine = queryEngine;\n-\tthis.aggregationDataStoreTransactionCancel = aggregationDataStoreTransactionCancel;\n+        this.queryEngine = queryEngine;\n+        this.aggregationDataStoreTransactionCancel = aggregationDataStoreTransactionCancel;\n     }\n \n     @Override\n", "next_change": {"commit": "18a8cc9d0da96a239329ca6b6c4b7eecee346b8e", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\nindex 38ca52ca3..f5bd2c6b4 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\n", "chunk": "@@ -26,7 +26,6 @@ public class AggregationDataStoreTransaction extends DataStoreTransactionImpleme\n     private Future<QueryResult> queryResult;\n     public AggregationDataStoreTransaction(QueryEngine queryEngine) {\n         this.queryEngine = queryEngine;\n-        this.aggregationDataStoreTransactionCancel = aggregationDataStoreTransactionCancel;\n     }\n \n     @Override\n", "next_change": {"commit": "da7ea017126a52888a1be9b1b4aa5c084a8700bd", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\nindex f5bd2c6b4..5aa8e272a 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\n", "chunk": "@@ -16,14 +16,14 @@ import com.yahoo.elide.request.EntityProjection;\n import com.google.common.annotations.VisibleForTesting;\n \n import java.io.IOException;\n-import java.util.concurrent.Future;\n+import java.util.concurrent.FutureTask;\n \n /**\n  * Transaction handler for {@link AggregationDataStore}.\n  */\n public class AggregationDataStoreTransaction extends DataStoreTransactionImplementation {\n     private QueryEngine queryEngine;\n-    private Future<QueryResult> queryResult;\n+    private FutureTask<QueryResult> queryResult;\n     public AggregationDataStoreTransaction(QueryEngine queryEngine) {\n         this.queryEngine = queryEngine;\n     }\n", "next_change": {"commit": "8f1cfb480ee2db34373cee4ca35e5eef6b339a51", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\nindex 5aa8e272a..a4fe2cefa 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\n", "chunk": "@@ -7,25 +7,31 @@ package com.yahoo.elide.datastores.aggregation;\n \n import com.yahoo.elide.core.DataStoreTransactionImplementation;\n import com.yahoo.elide.core.RequestScope;\n-import com.yahoo.elide.core.exceptions.TransactionException;\n import com.yahoo.elide.datastores.aggregation.metadata.models.Table;\n+import com.yahoo.elide.datastores.aggregation.query.Cache;\n import com.yahoo.elide.datastores.aggregation.query.Query;\n+import com.yahoo.elide.datastores.aggregation.query.QueryKeyExtractor;\n import com.yahoo.elide.datastores.aggregation.query.QueryResult;\n import com.yahoo.elide.request.EntityProjection;\n \n import com.google.common.annotations.VisibleForTesting;\n \n-import java.io.IOException;\n-import java.util.concurrent.FutureTask;\n+import lombok.ToString;\n \n+import java.io.IOException;\n /**\n  * Transaction handler for {@link AggregationDataStore}.\n  */\n+@ToString\n public class AggregationDataStoreTransaction extends DataStoreTransactionImplementation {\n-    private QueryEngine queryEngine;\n-    private FutureTask<QueryResult> queryResult;\n-    public AggregationDataStoreTransaction(QueryEngine queryEngine) {\n+    private final QueryEngine queryEngine;\n+    private final Cache cache;\n+    private final QueryEngine.Transaction queryEngineTransaction;\n+\n+    public AggregationDataStoreTransaction(QueryEngine queryEngine, Cache cache) {\n         this.queryEngine = queryEngine;\n+        this.cache = cache;\n+        this.queryEngineTransaction = queryEngine.beginTransaction();\n     }\n \n     @Override\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "ff86c56fde9064e1719ea35660fd04c42c949662", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\nindex ecaddcba8..50b5e9aaa 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\n", "chunk": "@@ -8,27 +8,30 @@ package com.yahoo.elide.datastores.aggregation;\n import com.yahoo.elide.core.DataStoreTransactionImplementation;\n import com.yahoo.elide.core.RequestScope;\n import com.yahoo.elide.datastores.aggregation.metadata.models.Table;\n+import com.yahoo.elide.datastores.aggregation.query.Cache;\n import com.yahoo.elide.datastores.aggregation.query.Query;\n+import com.yahoo.elide.datastores.aggregation.query.QueryKeyExtractor;\n import com.yahoo.elide.datastores.aggregation.query.QueryResult;\n import com.yahoo.elide.request.EntityProjection;\n \n import com.google.common.annotations.VisibleForTesting;\n \n-import java.io.IOException;\n-\n-import javax.persistence.EntityManager;\n+import lombok.ToString;\n \n+import java.io.IOException;\n /**\n  * Transaction handler for {@link AggregationDataStore}.\n  */\n+@ToString\n public class AggregationDataStoreTransaction extends DataStoreTransactionImplementation {\n-    private EntityManager em;\n-    private QueryEngine queryEngine;\n-    private AggregationDataStore.AggregationDataStoreTransactionCancel aggregationDataStoreTransactionCancel;\n-    public AggregationDataStoreTransaction(EntityManager em, QueryEngine queryEngine, AggregationDataStore.AggregationDataStoreTransactionCancel aggregationDataStoreTransactionCancel) {\n-        this.em = em;\n-\tthis.queryEngine = queryEngine;\n-\tthis.aggregationDataStoreTransactionCancel = aggregationDataStoreTransactionCancel;\n+    private final QueryEngine queryEngine;\n+    private final Cache cache;\n+    private final QueryEngine.Transaction queryEngineTransaction;\n+\n+    public AggregationDataStoreTransaction(QueryEngine queryEngine, Cache cache) {\n+        this.queryEngine = queryEngine;\n+        this.cache = cache;\n+        this.queryEngineTransaction = queryEngine.beginTransaction();\n     }\n \n     @Override\n", "next_change": {"commit": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\nindex 50b5e9aaa..ae2e6cdc0 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\n", "chunk": "@@ -5,33 +5,24 @@\n  */\n package com.yahoo.elide.datastores.aggregation;\n \n-import com.yahoo.elide.core.DataStoreTransactionImplementation;\n+import com.yahoo.elide.core.DataStoreTransaction;\n import com.yahoo.elide.core.RequestScope;\n import com.yahoo.elide.datastores.aggregation.metadata.models.Table;\n-import com.yahoo.elide.datastores.aggregation.query.Cache;\n import com.yahoo.elide.datastores.aggregation.query.Query;\n-import com.yahoo.elide.datastores.aggregation.query.QueryKeyExtractor;\n-import com.yahoo.elide.datastores.aggregation.query.QueryResult;\n import com.yahoo.elide.request.EntityProjection;\n \n import com.google.common.annotations.VisibleForTesting;\n \n-import lombok.ToString;\n-\n import java.io.IOException;\n+\n /**\n  * Transaction handler for {@link AggregationDataStore}.\n  */\n-@ToString\n-public class AggregationDataStoreTransaction extends DataStoreTransactionImplementation {\n-    private final QueryEngine queryEngine;\n-    private final Cache cache;\n-    private final QueryEngine.Transaction queryEngineTransaction;\n+public class AggregationDataStoreTransaction implements DataStoreTransaction {\n+    private QueryEngine queryEngine;\n \n-    public AggregationDataStoreTransaction(QueryEngine queryEngine, Cache cache) {\n+    public AggregationDataStoreTransaction(QueryEngine queryEngine) {\n         this.queryEngine = queryEngine;\n-        this.cache = cache;\n-        this.queryEngineTransaction = queryEngine.beginTransaction();\n     }\n \n     @Override\n", "next_change": {"commit": "82df79169b68ec9e51172dda843cbc2b9fea907a", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\nindex ae2e6cdc0..544b49131 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\n", "chunk": "@@ -5,22 +5,21 @@\n  */\n package com.yahoo.elide.datastores.aggregation;\n \n-import com.yahoo.elide.core.DataStoreTransaction;\n+import com.yahoo.elide.core.DataStoreTransactionImplementation;\n import com.yahoo.elide.core.RequestScope;\n import com.yahoo.elide.datastores.aggregation.metadata.models.Table;\n import com.yahoo.elide.datastores.aggregation.query.Query;\n+import com.yahoo.elide.datastores.aggregation.query.QueryResult;\n import com.yahoo.elide.request.EntityProjection;\n \n import com.google.common.annotations.VisibleForTesting;\n \n import java.io.IOException;\n-\n /**\n  * Transaction handler for {@link AggregationDataStore}.\n  */\n-public class AggregationDataStoreTransaction implements DataStoreTransaction {\n+public class AggregationDataStoreTransaction extends DataStoreTransactionImplementation {\n     private QueryEngine queryEngine;\n-\n     public AggregationDataStoreTransaction(QueryEngine queryEngine) {\n         this.queryEngine = queryEngine;\n     }\n", "next_change": {"commit": "81dde7567aa8a6a00822a9a8f0bf901806a962e8", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\nindex 544b49131..494daa6ef 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\n", "chunk": "@@ -8,20 +8,30 @@ package com.yahoo.elide.datastores.aggregation;\n import com.yahoo.elide.core.DataStoreTransactionImplementation;\n import com.yahoo.elide.core.RequestScope;\n import com.yahoo.elide.datastores.aggregation.metadata.models.Table;\n+import com.yahoo.elide.datastores.aggregation.query.Cache;\n import com.yahoo.elide.datastores.aggregation.query.Query;\n+import com.yahoo.elide.datastores.aggregation.query.QueryKeyExtractor;\n import com.yahoo.elide.datastores.aggregation.query.QueryResult;\n import com.yahoo.elide.request.EntityProjection;\n \n import com.google.common.annotations.VisibleForTesting;\n \n+import lombok.ToString;\n+\n import java.io.IOException;\n /**\n  * Transaction handler for {@link AggregationDataStore}.\n  */\n+@ToString\n public class AggregationDataStoreTransaction extends DataStoreTransactionImplementation {\n-    private QueryEngine queryEngine;\n-    public AggregationDataStoreTransaction(QueryEngine queryEngine) {\n+    private final QueryEngine queryEngine;\n+    private final Cache cache;\n+    private final QueryEngine.Transaction queryEngineTransaction;\n+\n+    public AggregationDataStoreTransaction(QueryEngine queryEngine, Cache cache) {\n         this.queryEngine = queryEngine;\n+        this.cache = cache;\n+        this.queryEngineTransaction = queryEngine.beginTransaction();\n     }\n \n     @Override\n", "next_change": {"commit": "8fece2b8f1b3078ce2598ddb03dca66bb984df46", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\nindex 494daa6ef..e8a8f5d73 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\n", "chunk": "@@ -19,19 +23,23 @@ import com.google.common.annotations.VisibleForTesting;\n import lombok.ToString;\n \n import java.io.IOException;\n+\n /**\n  * Transaction handler for {@link AggregationDataStore}.\n  */\n @ToString\n-public class AggregationDataStoreTransaction extends DataStoreTransactionImplementation {\n+public class AggregationDataStoreTransaction implements DataStoreTransaction {\n     private final QueryEngine queryEngine;\n     private final Cache cache;\n     private final QueryEngine.Transaction queryEngineTransaction;\n+    private final QueryLogger queryLogger;\n \n-    public AggregationDataStoreTransaction(QueryEngine queryEngine, Cache cache) {\n+    public AggregationDataStoreTransaction(QueryEngine queryEngine, Cache cache,\n+                                           QueryLogger queryLogger) {\n         this.queryEngine = queryEngine;\n         this.cache = cache;\n         this.queryEngineTransaction = queryEngine.beginTransaction();\n+        this.queryLogger = queryLogger;\n     }\n \n     @Override\n", "next_change": {"commit": "df24aa71c283e12d2489982300580cfa80c9755c", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\nindex e8a8f5d73..9fbf6c7b9 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\n", "chunk": "@@ -40,6 +46,7 @@ public class AggregationDataStoreTransaction implements DataStoreTransaction {\n         this.cache = cache;\n         this.queryEngineTransaction = queryEngine.beginTransaction();\n         this.queryLogger = queryLogger;\n+        this.metaDataStore = queryEngine.getMetaDataStore();\n     }\n \n     @Override\n", "next_change": {"commit": "6329293ac93ae88628c79f9618b7fce755e470a9", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\nindex 9fbf6c7b9..2f68da1b4 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\n", "chunk": "@@ -50,12 +48,12 @@ public class AggregationDataStoreTransaction implements DataStoreTransaction {\n     }\n \n     @Override\n-    public void save(Object entity, RequestScope scope) {\n+    public <T> void save(T entity, RequestScope scope) {\n \n     }\n \n     @Override\n-    public void delete(Object entity, RequestScope scope) {\n+    public <T> void delete(T entity, RequestScope scope) {\n \n     }\n \n", "next_change": {"commit": "c82b507d31043f0956023f9b83040b71277df02e", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\nindex 2f68da1b4..204125720 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\n", "chunk": "@@ -49,12 +52,12 @@ public class AggregationDataStoreTransaction implements DataStoreTransaction {\n \n     @Override\n     public <T> void save(T entity, RequestScope scope) {\n-\n+        throwReadOnlyException(entity);\n     }\n \n     @Override\n     public <T> void delete(T entity, RequestScope scope) {\n-\n+        throwReadOnlyException(entity);\n     }\n \n     @Override\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "ff86c56fde9064e1719ea35660fd04c42c949662", "message": "Merge commit", "committedDate": null}, {"oid": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "parent a14ccfbb7b558d27799b4e7b1916850519639708 author Jack (\uc815\ud658) <QubitPi@users.noreply.github.com> 1559678988 -0700 committer Aaron Klish <klish@verizonmedia.com> 1589583449 -0500"}, {"oid": "3f34e76977a5a591eca1f8c00ac986562a38d250", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Introduce QueryResult class for QueryEngine caching (#1333)"}, {"oid": "82df79169b68ec9e51172dda843cbc2b9fea907a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "addTransaction-removeTransaction (#1338)"}, {"oid": "81dde7567aa8a6a00822a9a8f0bf901806a962e8", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add caching support to SQLQueryEngine (#1319)"}, {"oid": "9c897058ce0b9656bf2aef2318d0addc474f278a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "implement cancel function (#1367)"}, {"oid": "9ff0eb6bfa7f8f0135d21cf68cb1e44c5d515d91", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Enable query caching by default (#1378)"}, {"oid": "c823f5a24efd81298d5fdd0ffc1657be7572b2b4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5- Unify request ids (#1423)"}, {"oid": "8fece2b8f1b3078ce2598ddb03dca66bb984df46", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Aggregation DataStore QueryLogger Implementation (#1448)"}, {"oid": "61ac33e39ba94617114273238754be32b006735b", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add SQLDialect implementations and tests. (#1487)"}, {"oid": "7e3bf63665decb792727f030d898e960f681052c", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5: Add HJSON table filter templates (#1528)"}, {"oid": "b8d0918e2f6f438eda12c12e58354a8cad3719dd", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Added item expiration to AggregationDataStore cache (#1564)"}, {"oid": "11e5083ef0755c62f86c287cf73c376d6c8b8c40", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Refactor query plan (#1579)"}, {"oid": "df24aa71c283e12d2489982300580cfa80c9755c", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Migrate metadatacalls to metadata store (#1624)"}, {"oid": "49e61867e840d9818993879436d5db1aad964c9a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Move data store interfaces (#1671)"}, {"oid": "911d29408bdeeb4ff8d78f2beea2417be4e7c673", "committedDate": "2020-12-11 16:20:28 -0600", "message": "cleaned up package hierarchy for elide-core (#1672)"}, {"oid": "704581d353472cb1894546ad685b2e3a48094696", "committedDate": "2020-12-11 16:20:28 -0600", "message": "bypasscache (#1673)"}, {"oid": "6329293ac93ae88628c79f9618b7fce755e470a9", "committedDate": "2021-01-20 13:40:19 -0600", "message": "Updated aggregation store to use new data store transaction interface"}, {"oid": "4c8d6a4f57bc34f08017de12b1276ebe331b9849", "committedDate": "2021-04-01 09:30:15 -0400", "message": "Populate $$user and $$request context (#1975)"}, {"oid": "98f612f023448a93324aaed11e00d6d4fa730c74", "committedDate": "2021-04-08 22:39:32 -0400", "message": "Issue 1929 - Clean up code quality (#1964)"}, {"oid": "89e96b0bb45da69b08e6c8df6d8d7d23090eec37", "committedDate": "2021-04-22 17:56:53 -0400", "message": "Resolution using Table Context (#2004)"}, {"oid": "6143d108eb7b1a2250370409d5362c6722c95b23", "committedDate": "2021-04-26 16:28:58 -0500", "message": "Cleanup (#2026)"}, {"oid": "0a3776bacb5809845d9a04a1263db9760f117b92", "committedDate": "2021-05-13 13:25:15 -0500", "message": "Injection Protection for parameterized metrics/dimensions (#2090)"}, {"oid": "c82b507d31043f0956023f9b83040b71277df02e", "committedDate": "2021-05-14 15:38:30 -0500", "message": "Aggregation Store: Verify write requests are denied (#2096)"}, {"oid": "f0f455bee3d51e2333ad20005068f48ab563a7a9", "committedDate": "2021-08-10 13:05:41 -0500", "message": "Issue2239 (#2245)"}, {"oid": "55e61646f17d5bdb94d4519ab210ac56840778db", "committedDate": "2021-09-08 15:32:28 -0500", "message": "Templated filter table arguments (#2290)"}, {"oid": "cc0dffc51428b5b9ee255896169de91c69af0314", "committedDate": "2021-09-13 14:27:56 -0500", "message": "AggregationStore: Templated filter column arguments (#2297)"}, {"oid": "b88c19ef352c7bff44d4375d4a5f3e6b55054c3e", "committedDate": "2021-10-14 16:42:33 -0500", "message": "Aggregation Store: Make EntityHydrator stream results. (#2333)"}, {"oid": "5064f8a5a351b1f77b8025f68b20efc1b76d101e", "committedDate": "2021-10-19 11:25:38 -0500", "message": "Elide 6 : Refactor DataStoreTransaction Interface. (#2334)"}, {"oid": "f21f35950fe465cfbf135d06cc8ae2321a29513a", "committedDate": "2023-02-04 15:34:06 -0600", "message": "Elide 7.x (#2876)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU3MDAxOQ==", "url": "https://github.com/yahoo/elide/pull/1367#discussion_r435570019", "body": "Instead of implementing cancel here, why not move this to the super class?", "bodyText": "Instead of implementing cancel here, why not move this to the super class?", "bodyHTML": "<p dir=\"auto\">Instead of implementing cancel here, why not move this to the super class?</p>", "author": "aklish", "createdAt": "2020-06-04T21:44:12Z", "path": "elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/transaction/NonJtaTransaction.java", "diffHunk": "@@ -61,4 +63,9 @@ public void close() throws IOException {\n     public boolean isOpen() {\n         return transaction.isActive();\n     }\n+\n+    @Override\n+    public void cancel() {", "originalCommit": "b916ca0a64e0659854cd15ae47b1b35b0c1260ce", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "de929061ff81b6969c97c27683791b478c0ac1c2", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/transaction/NonJtaTransaction.java b/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/transaction/NonJtaTransaction.java\nindex 66055e633..551b37567 100644\n--- a/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/transaction/NonJtaTransaction.java\n+++ b/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/transaction/NonJtaTransaction.java\n", "chunk": "@@ -64,8 +64,4 @@ public class NonJtaTransaction extends AbstractJpaTransaction {\n         return transaction.isActive();\n     }\n \n-    @Override\n-    public void cancel() {\n-\tjpaTransactionCancel.cancel(em);\n-    }\n }\n", "next_change": {"commit": "c637d51fba403ac0e2c8fad524d4ea781e985951", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/transaction/NonJtaTransaction.java b/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/transaction/NonJtaTransaction.java\nindex 551b37567..478202bc0 100644\n--- a/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/transaction/NonJtaTransaction.java\n+++ b/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/transaction/NonJtaTransaction.java\n", "chunk": "@@ -63,5 +62,4 @@ public class NonJtaTransaction extends AbstractJpaTransaction {\n     public boolean isOpen() {\n         return transaction.isActive();\n     }\n-\n }\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "ff86c56fde9064e1719ea35660fd04c42c949662", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/transaction/NonJtaTransaction.java b/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/transaction/NonJtaTransaction.java\nindex 66055e633..bc44f5c86 100644\n--- a/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/transaction/NonJtaTransaction.java\n+++ b/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/transaction/NonJtaTransaction.java\n", "chunk": "@@ -63,9 +62,4 @@ public class NonJtaTransaction extends AbstractJpaTransaction {\n     public boolean isOpen() {\n         return transaction.isActive();\n     }\n-\n-    @Override\n-    public void cancel() {\n-\tjpaTransactionCancel.cancel(em);\n-    }\n }\n", "next_change": null}]}, "commits_in_main": [{"oid": "ff86c56fde9064e1719ea35660fd04c42c949662", "message": "Merge commit", "committedDate": null}, {"oid": "82df79169b68ec9e51172dda843cbc2b9fea907a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "addTransaction-removeTransaction (#1338)"}, {"oid": "9c897058ce0b9656bf2aef2318d0addc474f278a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "implement cancel function (#1367)"}, {"oid": "49e61867e840d9818993879436d5db1aad964c9a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Move data store interfaces (#1671)"}, {"oid": "6c97725cec25be900fd1466f627d3d0e722ed508", "committedDate": "2021-03-09 15:24:33 -0600", "message": "Add experimental n plus1 improvement (#1876)"}, {"oid": "76fff8684b7ea31d3ee1483aa4078d7949e5442f", "committedDate": "2021-08-12 09:37:43 -0500", "message": "Added enhanced logging around JPQL queries (#2249)"}, {"oid": "6ef850932d95d4895b960832b099354fdb5569bb", "committedDate": "2021-09-13 18:51:58 -0500", "message": "Elide 6.x (#2303)"}, {"oid": "6f26ba6377010a22403698d48d49ef2a4f897fde", "committedDate": "2021-10-17 15:04:42 -0500", "message": "Changing Oath to Yahoo in Copyright messages (#2340)"}, {"oid": "5064f8a5a351b1f77b8025f68b20efc1b76d101e", "committedDate": "2021-10-19 11:25:38 -0500", "message": "Elide 6 : Refactor DataStoreTransaction Interface. (#2334)"}, {"oid": "f21f35950fe465cfbf135d06cc8ae2321a29513a", "committedDate": "2023-02-04 15:34:06 -0600", "message": "Elide 7.x (#2876)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU3MDE3Nw==", "url": "https://github.com/yahoo/elide/pull/1367#discussion_r435570177", "body": "Why not implement cancel here so we don't have to redefine it in each subclass.", "bodyText": "Why not implement cancel here so we don't have to redefine it in each subclass.", "bodyHTML": "<p dir=\"auto\">Why not implement cancel here so we don't have to redefine it in each subclass.</p>", "author": "aklish", "createdAt": "2020-06-04T21:44:35Z", "path": "elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/transaction/AbstractJpaTransaction.java", "diffHunk": "@@ -55,10 +56,12 @@\n     protected final EntityManager em;\n     private final EntityManagerWrapper emWrapper;\n     private final LinkedHashSet<Runnable> deferredTasks = new LinkedHashSet<>();\n+    private final JpaDataStore.JpaTransactionCancel jpaTransactionCancel;\n \n-    protected AbstractJpaTransaction(EntityManager em) {\n+    protected AbstractJpaTransaction(EntityManager em, JpaDataStore.JpaTransactionCancel jpaTransactionCancel) {\n         this.em = em;\n         this.emWrapper = new EntityManagerWrapper(em);\n+\tthis.jpaTransactionCancel = jpaTransactionCancel;", "originalCommit": "b916ca0a64e0659854cd15ae47b1b35b0c1260ce", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c637d51fba403ac0e2c8fad524d4ea781e985951", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/transaction/AbstractJpaTransaction.java b/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/transaction/AbstractJpaTransaction.java\nindex eb4a70896..4bf1cb9fb 100644\n--- a/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/transaction/AbstractJpaTransaction.java\n+++ b/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/transaction/AbstractJpaTransaction.java\n", "chunk": "@@ -56,12 +56,12 @@ public abstract class AbstractJpaTransaction extends DataStoreTransactionImpleme\n     protected final EntityManager em;\n     private final EntityManagerWrapper emWrapper;\n     private final LinkedHashSet<Runnable> deferredTasks = new LinkedHashSet<>();\n-    private final JpaDataStore.JpaTransactionCancel jpaTransactionCancel;\n+    private final JpaTransactionCancel jpaTransactionCancel;\n \n-    protected AbstractJpaTransaction(EntityManager em, JpaDataStore.JpaTransactionCancel jpaTransactionCancel) {\n+    protected AbstractJpaTransaction(EntityManager em, JpaTransactionCancel jpaTransactionCancel) {\n         this.em = em;\n         this.emWrapper = new EntityManagerWrapper(em);\n-\tthis.jpaTransactionCancel = jpaTransactionCancel;\n+        this.jpaTransactionCancel = jpaTransactionCancel;\n     }\n \n     @Override\n", "next_change": {"commit": "d7556cb189b6e83070942c10bdaf33054ecc0f71", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/transaction/AbstractJpaTransaction.java b/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/transaction/AbstractJpaTransaction.java\nindex 4bf1cb9fb..3b31661f4 100644\n--- a/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/transaction/AbstractJpaTransaction.java\n+++ b/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/transaction/AbstractJpaTransaction.java\n", "chunk": "@@ -56,9 +56,9 @@ public abstract class AbstractJpaTransaction extends DataStoreTransactionImpleme\n     protected final EntityManager em;\n     private final EntityManagerWrapper emWrapper;\n     private final LinkedHashSet<Runnable> deferredTasks = new LinkedHashSet<>();\n-    private final JpaTransactionCancel jpaTransactionCancel;\n+    private final Consumer<EntityManager> jpaTransactionCancel;\n \n-    protected AbstractJpaTransaction(EntityManager em, JpaTransactionCancel jpaTransactionCancel) {\n+    protected AbstractJpaTransaction(EntityManager em, Consumer<EntityManager> jpaTransactionCancel) {\n         this.em = em;\n         this.emWrapper = new EntityManagerWrapper(em);\n         this.jpaTransactionCancel = jpaTransactionCancel;\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "ff86c56fde9064e1719ea35660fd04c42c949662", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/transaction/AbstractJpaTransaction.java b/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/transaction/AbstractJpaTransaction.java\nindex eb4a70896..3b31661f4 100644\n--- a/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/transaction/AbstractJpaTransaction.java\n+++ b/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/transaction/AbstractJpaTransaction.java\n", "chunk": "@@ -56,12 +56,12 @@ public abstract class AbstractJpaTransaction extends DataStoreTransactionImpleme\n     protected final EntityManager em;\n     private final EntityManagerWrapper emWrapper;\n     private final LinkedHashSet<Runnable> deferredTasks = new LinkedHashSet<>();\n-    private final JpaDataStore.JpaTransactionCancel jpaTransactionCancel;\n+    private final Consumer<EntityManager> jpaTransactionCancel;\n \n-    protected AbstractJpaTransaction(EntityManager em, JpaDataStore.JpaTransactionCancel jpaTransactionCancel) {\n+    protected AbstractJpaTransaction(EntityManager em, Consumer<EntityManager> jpaTransactionCancel) {\n         this.em = em;\n         this.emWrapper = new EntityManagerWrapper(em);\n-\tthis.jpaTransactionCancel = jpaTransactionCancel;\n+        this.jpaTransactionCancel = jpaTransactionCancel;\n     }\n \n     @Override\n", "next_change": {"commit": "7a62b3f0b5db5585ba1fd937c00d454ee047167e", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/transaction/AbstractJpaTransaction.java b/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/transaction/AbstractJpaTransaction.java\nindex 3b31661f4..38f3b43aa 100644\n--- a/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/transaction/AbstractJpaTransaction.java\n+++ b/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/transaction/AbstractJpaTransaction.java\n", "chunk": "@@ -49,19 +47,17 @@ import javax.validation.ConstraintViolationException;\n  * Base JPA transaction implementation class.\n  */\n @Slf4j\n-public abstract class AbstractJpaTransaction extends DataStoreTransactionImplementation implements JpaTransaction {\n+public abstract class AbstractJpaTransaction implements JpaTransaction {\n     private static final Predicate<Collection<?>> IS_PERSISTENT_COLLECTION =\n             new PersistentCollectionChecker();\n \n     protected final EntityManager em;\n     private final EntityManagerWrapper emWrapper;\n     private final LinkedHashSet<Runnable> deferredTasks = new LinkedHashSet<>();\n-    private final Consumer<EntityManager> jpaTransactionCancel;\n \n-    protected AbstractJpaTransaction(EntityManager em, Consumer<EntityManager> jpaTransactionCancel) {\n+    protected AbstractJpaTransaction(EntityManager em) {\n         this.em = em;\n         this.emWrapper = new EntityManagerWrapper(em);\n-        this.jpaTransactionCancel = jpaTransactionCancel;\n     }\n \n     @Override\n", "next_change": {"commit": "9c897058ce0b9656bf2aef2318d0addc474f278a", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/transaction/AbstractJpaTransaction.java b/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/transaction/AbstractJpaTransaction.java\nindex 38f3b43aa..17aee3e98 100644\n--- a/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/transaction/AbstractJpaTransaction.java\n+++ b/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/transaction/AbstractJpaTransaction.java\n", "chunk": "@@ -47,17 +50,19 @@ import javax.validation.ConstraintViolationException;\n  * Base JPA transaction implementation class.\n  */\n @Slf4j\n-public abstract class AbstractJpaTransaction implements JpaTransaction {\n+public abstract class AbstractJpaTransaction extends DataStoreTransactionImplementation implements JpaTransaction {\n     private static final Predicate<Collection<?>> IS_PERSISTENT_COLLECTION =\n             new PersistentCollectionChecker();\n \n     protected final EntityManager em;\n     private final EntityManagerWrapper emWrapper;\n     private final LinkedHashSet<Runnable> deferredTasks = new LinkedHashSet<>();\n+    private final Consumer<EntityManager> jpaTransactionCancel;\n \n-    protected AbstractJpaTransaction(EntityManager em) {\n+    protected AbstractJpaTransaction(EntityManager em, Consumer<EntityManager> jpaTransactionCancel) {\n         this.em = em;\n         this.emWrapper = new EntityManagerWrapper(em);\n+        this.jpaTransactionCancel = jpaTransactionCancel;\n     }\n \n     @Override\n", "next_change": {"commit": "b96c302f34c611d4b49571b2df9d035d1ce9e1b5", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/transaction/AbstractJpaTransaction.java b/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/transaction/AbstractJpaTransaction.java\nindex 17aee3e98..03e6892ab 100644\n--- a/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/transaction/AbstractJpaTransaction.java\n+++ b/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/transaction/AbstractJpaTransaction.java\n", "chunk": "@@ -66,12 +63,12 @@ public abstract class AbstractJpaTransaction extends DataStoreTransactionImpleme\n     }\n \n     @Override\n-    public void delete(Object object, RequestScope scope) {\n+    public <T> void delete(T object, RequestScope scope) {\n         deferredTasks.add(() -> em.remove(object));\n     }\n \n     @Override\n-    public void save(Object object, RequestScope scope) {\n+    public <T> void save(T object, RequestScope scope) {\n         deferredTasks.add(() -> {\n             if (!em.contains(object)) {\n                 em.merge(object);\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "ff86c56fde9064e1719ea35660fd04c42c949662", "message": "Merge commit", "committedDate": null}, {"oid": "7a62b3f0b5db5585ba1fd937c00d454ee047167e", "committedDate": "2020-07-10 11:11:40 -0500", "message": "Only issue page total query if data load returns records (#1429)"}, {"oid": "d66cde4834b0f59ce20e433c6a5a87029751d1fb", "committedDate": "2020-08-14 10:35:51 -0500", "message": "Path matcher (#1482)"}, {"oid": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "parent a14ccfbb7b558d27799b4e7b1916850519639708 author Jack (\uc815\ud658) <QubitPi@users.noreply.github.com> 1559678988 -0700 committer Aaron Klish <klish@verizonmedia.com> 1589583449 -0500"}, {"oid": "82df79169b68ec9e51172dda843cbc2b9fea907a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "addTransaction-removeTransaction (#1338)"}, {"oid": "9c897058ce0b9656bf2aef2318d0addc474f278a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "implement cancel function (#1367)"}, {"oid": "c823f5a24efd81298d5fdd0ffc1657be7572b2b4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5- Unify request ids (#1423)"}, {"oid": "8fece2b8f1b3078ce2598ddb03dca66bb984df46", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Aggregation DataStore QueryLogger Implementation (#1448)"}, {"oid": "916e829f86ef08fbc7d2d05e6d88afe5c568504b", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Finished rebase"}, {"oid": "00019cbbba7ed83d06518159ca337cb9ec1633bc", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Rebased fetch for included relations (#1459)"}, {"oid": "49e61867e840d9818993879436d5db1aad964c9a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Move data store interfaces (#1671)"}, {"oid": "911d29408bdeeb4ff8d78f2beea2417be4e7c673", "committedDate": "2020-12-11 16:20:28 -0600", "message": "cleaned up package hierarchy for elide-core (#1672)"}, {"oid": "42e8b7403c4c7436b3a69e23b1c66b2eebc848d4", "committedDate": "2021-01-19 14:16:37 -0600", "message": "Datastore Integration tests working"}, {"oid": "b96c302f34c611d4b49571b2df9d035d1ce9e1b5", "committedDate": "2021-01-20 13:40:19 -0600", "message": "Issues with multiplex store"}, {"oid": "6c97725cec25be900fd1466f627d3d0e722ed508", "committedDate": "2021-03-09 15:24:33 -0600", "message": "Add experimental n plus1 improvement (#1876)"}, {"oid": "dc7a367e14c9f43b2d013f5037341055a29f0491", "committedDate": "2021-03-26 10:31:26 -0400", "message": "Issue 1929 - Address Sonar suggestions (#1925)"}, {"oid": "145829ee58b7a168c59ca58d502c629670ab0664", "committedDate": "2021-04-15 11:10:52 -0500", "message": "Hibernate jpa (#1993)"}, {"oid": "76fff8684b7ea31d3ee1483aa4078d7949e5442f", "committedDate": "2021-08-12 09:37:43 -0500", "message": "Added enhanced logging around JPQL queries (#2249)"}, {"oid": "0b7eb0cb8b9fbb37fa412863a6d6fd1ac5734948", "committedDate": "2021-09-08 10:03:59 -0500", "message": "Add ability to retrieve data store properties in life cycle hooks. (#2278)"}, {"oid": "6ef850932d95d4895b960832b099354fdb5569bb", "committedDate": "2021-09-13 18:51:58 -0500", "message": "Elide 6.x (#2303)"}, {"oid": "6f26ba6377010a22403698d48d49ef2a4f897fde", "committedDate": "2021-10-17 15:04:42 -0500", "message": "Changing Oath to Yahoo in Copyright messages (#2340)"}, {"oid": "f21f35950fe465cfbf135d06cc8ae2321a29513a", "committedDate": "2023-02-04 15:34:06 -0600", "message": "Elide 7.x (#2876)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU3MDY1NA==", "url": "https://github.com/yahoo/elide/pull/1367#discussion_r435570654", "body": "This can be assigned like:\r\n```java\r\njpaTransactionCancel = (entityManager) -> { entityManager.unwrap(Session.class).cancelQuery();};\r\n```\r\n\r\nand then you can reuse jpaTransactionCancel below.", "bodyText": "This can be assigned like:\njpaTransactionCancel = (entityManager) -> { entityManager.unwrap(Session.class).cancelQuery();};\nand then you can reuse jpaTransactionCancel below.", "bodyHTML": "<p dir=\"auto\">This can be assigned like:</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"jpaTransactionCancel = (entityManager) -&gt; { entityManager.unwrap(Session.class).cancelQuery();};\"><pre>jpaTransactionCancel <span class=\"pl-k\">=</span> (entityManager) <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> { entityManager<span class=\"pl-k\">.</span>unwrap(<span class=\"pl-smi\">Session</span><span class=\"pl-k\">.</span>class)<span class=\"pl-k\">.</span>cancelQuery();};</pre></div>\n<p dir=\"auto\">and then you can reuse jpaTransactionCancel below.</p>", "author": "aklish", "createdAt": "2020-06-04T21:45:41Z", "path": "elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java", "diffHunk": "@@ -170,19 +171,25 @@ public DataStore buildDataStore(EntityManagerFactory entityManagerFactory, Query\n             ObjectProvider<ElideDynamicEntityCompiler> dynamicCompiler, ElideConfigProperties settings)\n             throws ClassNotFoundException {\n         AggregationDataStore aggregationDataStore = null;\n+\tJpaDataStore.JpaTransactionCancel jpaTransactionCancel = null;\t", "originalCommit": "b916ca0a64e0659854cd15ae47b1b35b0c1260ce", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "de929061ff81b6969c97c27683791b478c0ac1c2", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\nindex 69b41af46..7f8dc2c24 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n", "chunk": "@@ -171,25 +176,21 @@ public class ElideAutoConfiguration {\n             ObjectProvider<ElideDynamicEntityCompiler> dynamicCompiler, ElideConfigProperties settings)\n             throws ClassNotFoundException {\n         AggregationDataStore aggregationDataStore = null;\n-\tJpaDataStore.JpaTransactionCancel jpaTransactionCancel = null;\t\n \n         if (isDynamicConfigEnabled(settings)) {\n             ElideDynamicEntityCompiler compiler = dynamicCompiler.getIfAvailable();\n             Set<Class<?>> annotatedClass = compiler.findAnnotatedClasses(FromTable.class);\n             annotatedClass.addAll(compiler.findAnnotatedClasses(FromSubquery.class));\n             aggregationDataStore = new AggregationDataStore(\n-\t\t () -> { return entityManagerFactory.createEntityManager(); },\n-\t\tqueryEngine, annotatedClass, (entityManager -> { entityManager.unwrap(Session.class).cancelQuery();}));\n+\t\tqueryEngine, annotatedClass));\n         } else {\n             aggregationDataStore = new AggregationDataStore(\n-\t\t () -> { return entityManagerFactory.createEntityManager(); },\n-\t\tqueryEngine, (entityManager -> { entityManager.unwrap(Session.class).cancelQuery();}));\n+\t\tqueryEngine);\n         }\n \t\n         JpaDataStore jpaDataStore = new JpaDataStore(\n                 () -> { return entityManagerFactory.createEntityManager(); },\n-                    (em -> { return new NonJtaTransaction(em, em.unwrap(Session.class).cancelQuery()); }),\n-\t\t     (entityManager -> { entityManager.unwrap(Session.class).cancelQuery();}));\n+                    (em -> { return new NonJtaTransaction(em, jpaTransactionCancel); }));\n \n         // meta data store needs to be put at first to populate meta data models\n         return new MultiplexManager(jpaDataStore, queryEngine.getMetaDataStore(), aggregationDataStore);\n", "next_change": {"commit": "c637d51fba403ac0e2c8fad524d4ea781e985951", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\nindex 7f8dc2c24..548400749 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n", "chunk": "@@ -190,7 +190,8 @@ public class ElideAutoConfiguration {\n \t\n         JpaDataStore jpaDataStore = new JpaDataStore(\n                 () -> { return entityManagerFactory.createEntityManager(); },\n-                    (em -> { return new NonJtaTransaction(em, jpaTransactionCancel); }));\n+                    (em -> { return new NonJtaTransaction(em, jpaTransactionCancel); }),\n+                    () -> { return jpaTransactionCancel; });\n \n         // meta data store needs to be put at first to populate meta data models\n         return new MultiplexManager(jpaDataStore, queryEngine.getMetaDataStore(), aggregationDataStore);\n", "next_change": {"commit": "3cd05225a53f92969d1ad2e198bcc69a8bbf6553", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\nindex 548400749..c4c289d45 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n", "chunk": "@@ -190,7 +190,7 @@ public class ElideAutoConfiguration {\n \t\n         JpaDataStore jpaDataStore = new JpaDataStore(\n                 () -> { return entityManagerFactory.createEntityManager(); },\n-                    (em -> { return new NonJtaTransaction(em, jpaTransactionCancel); }),\n+                    ((em, txCancel) -> { return new NonJtaTransaction(em, txCancel); }),\n                     () -> { return jpaTransactionCancel; });\n \n         // meta data store needs to be put at first to populate meta data models\n", "next_change": {"commit": "c492c68cc1cd98c7ae88b9286a345b73443a8af3", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\nindex c4c289d45..596e584fd 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n", "chunk": "@@ -191,7 +191,7 @@ public class ElideAutoConfiguration {\n         JpaDataStore jpaDataStore = new JpaDataStore(\n                 () -> { return entityManagerFactory.createEntityManager(); },\n                     ((em, txCancel) -> { return new NonJtaTransaction(em, txCancel); }),\n-                    () -> { return jpaTransactionCancel; });\n+                    jpaTransactionCancel);\n \n         // meta data store needs to be put at first to populate meta data models\n         return new MultiplexManager(jpaDataStore, queryEngine.getMetaDataStore(), aggregationDataStore);\n", "next_change": {"commit": "3123771c5f0dd5b3f4684a3315f57c941aa3a1f4", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\nindex 596e584fd..859b84d88 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n", "chunk": "@@ -182,16 +182,16 @@ public class ElideAutoConfiguration {\n             Set<Class<?>> annotatedClass = compiler.findAnnotatedClasses(FromTable.class);\n             annotatedClass.addAll(compiler.findAnnotatedClasses(FromSubquery.class));\n             aggregationDataStore = new AggregationDataStore(\n-\t\tqueryEngine, annotatedClass));\n+                queryEngine, annotatedClass);\n         } else {\n             aggregationDataStore = new AggregationDataStore(\n-\t\tqueryEngine);\n+                queryEngine);\n         }\n-\t\n+\n         JpaDataStore jpaDataStore = new JpaDataStore(\n                 () -> { return entityManagerFactory.createEntityManager(); },\n                     ((em, txCancel) -> { return new NonJtaTransaction(em, txCancel); }),\n-                    jpaTransactionCancel);\n+                    jTC);\n \n         // meta data store needs to be put at first to populate meta data models\n         return new MultiplexManager(jpaDataStore, queryEngine.getMetaDataStore(), aggregationDataStore);\n", "next_change": {"commit": "8f1cfb480ee2db34373cee4ca35e5eef6b339a51", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\nindex 859b84d88..3e7fd6fe7 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n", "chunk": "@@ -175,23 +176,19 @@ public class ElideAutoConfiguration {\n     public DataStore buildDataStore(EntityManagerFactory entityManagerFactory, QueryEngine queryEngine,\n             ObjectProvider<ElideDynamicEntityCompiler> dynamicCompiler, ElideConfigProperties settings)\n             throws ClassNotFoundException {\n-        AggregationDataStore aggregationDataStore = null;\n-\n+        AggregationDataStore.AggregationDataStoreBuilder aggregationDataStoreBuilder = AggregationDataStore.builder()\n+                .queryEngine(queryEngine);\n         if (isDynamicConfigEnabled(settings)) {\n             ElideDynamicEntityCompiler compiler = dynamicCompiler.getIfAvailable();\n             Set<Class<?>> annotatedClass = compiler.findAnnotatedClasses(FromTable.class);\n             annotatedClass.addAll(compiler.findAnnotatedClasses(FromSubquery.class));\n-            aggregationDataStore = new AggregationDataStore(\n-                queryEngine, annotatedClass);\n-        } else {\n-            aggregationDataStore = new AggregationDataStore(\n-                queryEngine);\n+            aggregationDataStoreBuilder.dynamicCompiledClasses(annotatedClass);\n         }\n+        AggregationDataStore aggregationDataStore = aggregationDataStoreBuilder.build();\n \n         JpaDataStore jpaDataStore = new JpaDataStore(\n                 () -> { return entityManagerFactory.createEntityManager(); },\n-                    ((em, txCancel) -> { return new NonJtaTransaction(em, txCancel); }),\n-                    jTC);\n+                    (em) -> { return new NonJtaTransaction(em, jTC); } );\n \n         // meta data store needs to be put at first to populate meta data models\n         return new MultiplexManager(jpaDataStore, queryEngine.getMetaDataStore(), aggregationDataStore);\n", "next_change": {"commit": "d7556cb189b6e83070942c10bdaf33054ecc0f71", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\nindex 3e7fd6fe7..6d992dade 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n", "chunk": "@@ -188,7 +187,7 @@ public class ElideAutoConfiguration {\n \n         JpaDataStore jpaDataStore = new JpaDataStore(\n                 () -> { return entityManagerFactory.createEntityManager(); },\n-                    (em) -> { return new NonJtaTransaction(em, jTC); } );\n+                    (em) -> { return new NonJtaTransaction(em, func); });\n \n         // meta data store needs to be put at first to populate meta data models\n         return new MultiplexManager(jpaDataStore, queryEngine.getMetaDataStore(), aggregationDataStore);\n", "next_change": {"commit": "127517bb46972dbe127cfd5e32d70439aa385381", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\nindex 6d992dade..bf98cbb1f 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n", "chunk": "@@ -187,7 +187,7 @@ public class ElideAutoConfiguration {\n \n         JpaDataStore jpaDataStore = new JpaDataStore(\n                 () -> { return entityManagerFactory.createEntityManager(); },\n-                    (em) -> { return new NonJtaTransaction(em, func); });\n+                    (em) -> { return new NonJtaTransaction(em, txCancel); });\n \n         // meta data store needs to be put at first to populate meta data models\n         return new MultiplexManager(jpaDataStore, queryEngine.getMetaDataStore(), aggregationDataStore);\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "ff86c56fde9064e1719ea35660fd04c42c949662", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\nindex 69b41af46..bf98cbb1f 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n", "chunk": "@@ -170,26 +175,19 @@ public class ElideAutoConfiguration {\n     public DataStore buildDataStore(EntityManagerFactory entityManagerFactory, QueryEngine queryEngine,\n             ObjectProvider<ElideDynamicEntityCompiler> dynamicCompiler, ElideConfigProperties settings)\n             throws ClassNotFoundException {\n-        AggregationDataStore aggregationDataStore = null;\n-\tJpaDataStore.JpaTransactionCancel jpaTransactionCancel = null;\t\n-\n+        AggregationDataStore.AggregationDataStoreBuilder aggregationDataStoreBuilder = AggregationDataStore.builder()\n+                .queryEngine(queryEngine);\n         if (isDynamicConfigEnabled(settings)) {\n             ElideDynamicEntityCompiler compiler = dynamicCompiler.getIfAvailable();\n             Set<Class<?>> annotatedClass = compiler.findAnnotatedClasses(FromTable.class);\n             annotatedClass.addAll(compiler.findAnnotatedClasses(FromSubquery.class));\n-            aggregationDataStore = new AggregationDataStore(\n-\t\t () -> { return entityManagerFactory.createEntityManager(); },\n-\t\tqueryEngine, annotatedClass, (entityManager -> { entityManager.unwrap(Session.class).cancelQuery();}));\n-        } else {\n-            aggregationDataStore = new AggregationDataStore(\n-\t\t () -> { return entityManagerFactory.createEntityManager(); },\n-\t\tqueryEngine, (entityManager -> { entityManager.unwrap(Session.class).cancelQuery();}));\n+            aggregationDataStoreBuilder.dynamicCompiledClasses(annotatedClass);\n         }\n-\t\n+        AggregationDataStore aggregationDataStore = aggregationDataStoreBuilder.build();\n+\n         JpaDataStore jpaDataStore = new JpaDataStore(\n                 () -> { return entityManagerFactory.createEntityManager(); },\n-                    (em -> { return new NonJtaTransaction(em, em.unwrap(Session.class).cancelQuery()); }),\n-\t\t     (entityManager -> { entityManager.unwrap(Session.class).cancelQuery();}));\n+                    (em) -> { return new NonJtaTransaction(em, txCancel); });\n \n         // meta data store needs to be put at first to populate meta data models\n         return new MultiplexManager(jpaDataStore, queryEngine.getMetaDataStore(), aggregationDataStore);\n", "next_change": {"commit": "bd516473fbeeb47ca05eaf510734f06432c4280a", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\nindex bf98cbb1f..ccd2fa78e 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n", "chunk": "@@ -126,71 +86,21 @@ public class ElideAutoConfiguration {\n                 });\n \n         dictionary.scanForSecurityChecks();\n-\n-        if (isDynamicConfigEnabled(settings)) {\n-            ElideDynamicEntityCompiler compiler = dynamicCompiler.getIfAvailable();\n-            Set<Class<?>> annotatedClass = compiler.findAnnotatedClasses(SecurityCheck.class);\n-            dictionary.addSecurityChecks(annotatedClass);\n-        }\n-\n         return dictionary;\n     }\n \n-    /**\n-     * Create a QueryEngine instance for aggregation data store to use.\n-     * @param entityManagerFactory The JPA factory which creates entity managers.\n-     * @param dynamicCompiler An instance of objectprovider for ElideDynamicEntityCompiler.\n-     * @param settings Elide configuration settings.\n-     * @return An instance of a QueryEngine\n-     * @throws ClassNotFoundException Exception thrown.\n-     */\n-    @Bean\n-    @ConditionalOnMissingBean\n-    public QueryEngine buildQueryEngine(EntityManagerFactory entityManagerFactory,\n-            ObjectProvider<ElideDynamicEntityCompiler> dynamicCompiler, ElideConfigProperties settings)\n-            throws ClassNotFoundException {\n-\n-        MetaDataStore metaDataStore = null;\n-\n-        if (isDynamicConfigEnabled(settings)) {\n-            metaDataStore = new MetaDataStore(dynamicCompiler.getIfAvailable());\n-        } else {\n-            metaDataStore = new MetaDataStore();\n-        }\n-\n-        return new SQLQueryEngine(metaDataStore, entityManagerFactory, txCancel);\n-    }\n-\n     /**\n      * Creates the DataStore Elide.  Override to use a different store.\n      * @param entityManagerFactory The JPA factory which creates entity managers.\n-     * @param queryEngine QueryEngine instance for aggregation data store.\n-     * @param dynamicCompiler An instance of objectprovider for ElideDynamicEntityCompiler.\n-     * @param settings Elide configuration settings.\n      * @return An instance of a JPA DataStore.\n-     * @throws ClassNotFoundException Exception thrown.\n      */\n     @Bean\n     @ConditionalOnMissingBean\n-    public DataStore buildDataStore(EntityManagerFactory entityManagerFactory, QueryEngine queryEngine,\n-            ObjectProvider<ElideDynamicEntityCompiler> dynamicCompiler, ElideConfigProperties settings)\n-            throws ClassNotFoundException {\n-        AggregationDataStore.AggregationDataStoreBuilder aggregationDataStoreBuilder = AggregationDataStore.builder()\n-                .queryEngine(queryEngine);\n-        if (isDynamicConfigEnabled(settings)) {\n-            ElideDynamicEntityCompiler compiler = dynamicCompiler.getIfAvailable();\n-            Set<Class<?>> annotatedClass = compiler.findAnnotatedClasses(FromTable.class);\n-            annotatedClass.addAll(compiler.findAnnotatedClasses(FromSubquery.class));\n-            aggregationDataStoreBuilder.dynamicCompiledClasses(annotatedClass);\n-        }\n-        AggregationDataStore aggregationDataStore = aggregationDataStoreBuilder.build();\n-\n-        JpaDataStore jpaDataStore = new JpaDataStore(\n-                () -> { return entityManagerFactory.createEntityManager(); },\n-                    (em) -> { return new NonJtaTransaction(em, txCancel); });\n+    public DataStore buildDataStore(EntityManagerFactory entityManagerFactory) throws ClassNotFoundException {\n \n-        // meta data store needs to be put at first to populate meta data models\n-        return new MultiplexManager(jpaDataStore, queryEngine.getMetaDataStore(), aggregationDataStore);\n+        return new JpaDataStore(\n+                () -> { return entityManagerFactory.createEntityManager(); },\n+                    (em -> { return new NonJtaTransaction(em); }));\n     }\n \n     /**\n", "next_change": {"commit": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\nindex ccd2fa78e..102e34fbf 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n", "chunk": "@@ -86,21 +120,72 @@ public class ElideAutoConfiguration {\n                 });\n \n         dictionary.scanForSecurityChecks();\n+\n+        if (settings.getDynamicConfig().isEnabled()) {\n+            ElideDynamicEntityCompiler compiler = dynamicCompiler.getIfAvailable();\n+            Set<Class<?>> annotatedClass = compiler.findAnnotatedClasses(SecurityCheck.class);\n+            dictionary.addSecurityChecks(annotatedClass);\n+        }\n+\n         return dictionary;\n     }\n \n+    /**\n+     * Create a QueryEngine instance for aggregation data store to use.\n+     * @param entityManagerFactory The JPA factory which creates entity managers.\n+     * @param dynamicCompiler An instance of objectprovider for ElideDynamicEntityCompiler.\n+     * @param settings Elide configuration settings.\n+     * @return An instance of a QueryEngine\n+     * @throws ClassNotFoundException Exception thrown.\n+     */\n+    @Bean\n+    @ConditionalOnMissingBean\n+    public QueryEngine buildQueryEngine(EntityManagerFactory entityManagerFactory,\n+            ObjectProvider<ElideDynamicEntityCompiler> dynamicCompiler, ElideConfigProperties settings)\n+            throws ClassNotFoundException {\n+\n+        MetaDataStore metaDataStore = null;\n+\n+        if (settings.getDynamicConfig().isEnabled()) {\n+            metaDataStore = new MetaDataStore(dynamicCompiler.getIfAvailable());\n+        } else {\n+            metaDataStore = new MetaDataStore();\n+        }\n+\n+        return new SQLQueryEngine(metaDataStore, entityManagerFactory, null);\n+    }\n+\n     /**\n      * Creates the DataStore Elide.  Override to use a different store.\n      * @param entityManagerFactory The JPA factory which creates entity managers.\n+     * @param queryEngine QueryEngine instance for aggregation data store.\n+     * @param dynamicCompiler An instance of objectprovider for ElideDynamicEntityCompiler.\n+     * @param settings Elide configuration settings.\n      * @return An instance of a JPA DataStore.\n+     * @throws ClassNotFoundException Exception thrown.\n      */\n     @Bean\n     @ConditionalOnMissingBean\n-    public DataStore buildDataStore(EntityManagerFactory entityManagerFactory) throws ClassNotFoundException {\n-\n-        return new JpaDataStore(\n+    public DataStore buildDataStore(EntityManagerFactory entityManagerFactory, QueryEngine queryEngine,\n+            ObjectProvider<ElideDynamicEntityCompiler> dynamicCompiler, ElideConfigProperties settings)\n+            throws ClassNotFoundException {\n+        AggregationDataStore aggregationDataStore = null;\n+\n+        if (settings.getDynamicConfig().isEnabled()) {\n+            ElideDynamicEntityCompiler compiler = dynamicCompiler.getIfAvailable();\n+            Set<Class<?>> annotatedClass = compiler.findAnnotatedClasses(FromTable.class);\n+            annotatedClass.addAll(compiler.findAnnotatedClasses(FromSubquery.class));\n+            aggregationDataStore = new AggregationDataStore(queryEngine, annotatedClass);\n+        } else {\n+            aggregationDataStore = new AggregationDataStore(queryEngine);\n+        }\n+\n+        JpaDataStore jpaDataStore = new JpaDataStore(\n                 () -> { return entityManagerFactory.createEntityManager(); },\n                     (em -> { return new NonJtaTransaction(em); }));\n+\n+        // meta data store needs to be put at first to populate meta data models\n+        return new MultiplexManager(jpaDataStore, queryEngine.getMetaDataStore(), aggregationDataStore);\n     }\n \n     /**\n", "next_change": {"commit": "9c897058ce0b9656bf2aef2318d0addc474f278a", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\nindex 102e34fbf..e0dcca581 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n", "chunk": "@@ -169,20 +175,19 @@ public class ElideAutoConfiguration {\n     public DataStore buildDataStore(EntityManagerFactory entityManagerFactory, QueryEngine queryEngine,\n             ObjectProvider<ElideDynamicEntityCompiler> dynamicCompiler, ElideConfigProperties settings)\n             throws ClassNotFoundException {\n-        AggregationDataStore aggregationDataStore = null;\n-\n-        if (settings.getDynamicConfig().isEnabled()) {\n+        AggregationDataStore.AggregationDataStoreBuilder aggregationDataStoreBuilder = AggregationDataStore.builder()\n+                .queryEngine(queryEngine);\n+        if (isDynamicConfigEnabled(settings)) {\n             ElideDynamicEntityCompiler compiler = dynamicCompiler.getIfAvailable();\n             Set<Class<?>> annotatedClass = compiler.findAnnotatedClasses(FromTable.class);\n             annotatedClass.addAll(compiler.findAnnotatedClasses(FromSubquery.class));\n-            aggregationDataStore = new AggregationDataStore(queryEngine, annotatedClass);\n-        } else {\n-            aggregationDataStore = new AggregationDataStore(queryEngine);\n+            aggregationDataStoreBuilder.dynamicCompiledClasses(annotatedClass);\n         }\n+        AggregationDataStore aggregationDataStore = aggregationDataStoreBuilder.build();\n \n         JpaDataStore jpaDataStore = new JpaDataStore(\n                 () -> { return entityManagerFactory.createEntityManager(); },\n-                    (em -> { return new NonJtaTransaction(em); }));\n+                    (em) -> { return new NonJtaTransaction(em, txCancel); });\n \n         // meta data store needs to be put at first to populate meta data models\n         return new MultiplexManager(jpaDataStore, queryEngine.getMetaDataStore(), aggregationDataStore);\n", "next_change": {"commit": "9ff0eb6bfa7f8f0135d21cf68cb1e44c5d515d91", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\nindex e0dcca581..4d65a4e49 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n", "chunk": "@@ -183,16 +191,34 @@ public class ElideAutoConfiguration {\n             annotatedClass.addAll(compiler.findAnnotatedClasses(FromSubquery.class));\n             aggregationDataStoreBuilder.dynamicCompiledClasses(annotatedClass);\n         }\n+        aggregationDataStoreBuilder.cache(cache);\n         AggregationDataStore aggregationDataStore = aggregationDataStoreBuilder.build();\n \n-        JpaDataStore jpaDataStore = new JpaDataStore(\n-                () -> { return entityManagerFactory.createEntityManager(); },\n-                    (em) -> { return new NonJtaTransaction(em, txCancel); });\n+        JpaDataStore jpaDataStore = new JpaDataStore(entityManagerFactory::createEntityManager,\n+                                                     (em) -> { return new NonJtaTransaction(em, txCancel); });\n \n         // meta data store needs to be put at first to populate meta data models\n         return new MultiplexManager(jpaDataStore, queryEngine.getMetaDataStore(), aggregationDataStore);\n     }\n \n+    /**\n+     * Creates a query result cache to be used by {@link #buildDataStore}, or null if cache is to be disabled.\n+     * @param settings Elide configuration settings.\n+     * @return An instance of a query cache, or null.\n+     */\n+    @Bean\n+    @ConditionalOnMissingBean\n+    public Cache buildQueryCache(ElideConfigProperties settings) {\n+        CaffeineCache cache = null;\n+        if (settings.getQueryCacheMaximumEntries() > 0) {\n+            cache = new CaffeineCache(settings.getQueryCacheMaximumEntries());\n+            if (meterRegistry != null) {\n+                CaffeineCacheMetrics.monitor(meterRegistry, cache.getImplementation(), \"elideQueryCache\");\n+            }\n+        }\n+        return cache;\n+    }\n+\n     /**\n      * Creates a singular swagger document for JSON-API.\n      * @param dictionary Contains the static metadata about Elide models.\n", "next_change": {"commit": "8fece2b8f1b3078ce2598ddb03dca66bb984df46", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\nindex 4d65a4e49..e498edf4b 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n", "chunk": "@@ -219,6 +228,16 @@ public class ElideAutoConfiguration {\n         return cache;\n     }\n \n+    /**\n+     * Creates a querylogger to be used by {@link #buildDataStore} for aggregation\n+     * @return The default Noop QueryLogger.\n+     */\n+    @Bean\n+    @ConditionalOnMissingBean\n+    public QueryLogger buildQueryLogger() {\n+        return new NoopQueryLogger();\n+    }\n+\n     /**\n      * Creates a singular swagger document for JSON-API.\n      * @param dictionary Contains the static metadata about Elide models.\n", "next_change": {"commit": "7c8fece25f8dddbe975f0072bf0267def2610ff4", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\nindex e498edf4b..fcf60bbf0 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n", "chunk": "@@ -234,6 +239,7 @@ public class ElideAutoConfiguration {\n      */\n     @Bean\n     @ConditionalOnMissingBean\n+    @ConditionalOnProperty(name = \"elide.aggregation-store.enabled\", havingValue = \"true\")\n     public QueryLogger buildQueryLogger() {\n         return new NoopQueryLogger();\n     }\n", "next_change": {"commit": "1933cc3eb6788be5fce69b1d97c6ae589623495f", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\nindex fcf60bbf0..72cad9375 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n", "chunk": "@@ -234,14 +261,14 @@ public class ElideAutoConfiguration {\n     }\n \n     /**\n-     * Creates a querylogger to be used by {@link #buildDataStore} for aggregation\n+     * Creates a querylogger to be used by {@link #buildDataStore} for aggregation.\n      * @return The default Noop QueryLogger.\n      */\n     @Bean\n     @ConditionalOnMissingBean\n     @ConditionalOnProperty(name = \"elide.aggregation-store.enabled\", havingValue = \"true\")\n     public QueryLogger buildQueryLogger() {\n-        return new NoopQueryLogger();\n+        return new Slf4jQueryLogger();\n     }\n \n     /**\n", "next_change": {"commit": "c38eb980af7f953202cb53faaed14595d3709ed9", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\nindex 72cad9375..5ef33d35f 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n", "chunk": "@@ -273,22 +436,46 @@ public class ElideAutoConfiguration {\n \n     /**\n      * Creates a singular swagger document for JSON-API.\n-     * @param dictionary Contains the static metadata about Elide models.\n+     * @param elide Singleton elide instance.\n      * @param settings Elide configuration settings.\n      * @return An instance of a JPA DataStore.\n      */\n     @Bean\n     @ConditionalOnMissingBean\n-    public Swagger buildSwagger(EntityDictionary dictionary, ElideConfigProperties settings) {\n+    @ConditionalOnProperty(name = \"elide.swagger.enabled\", havingValue = \"true\")\n+    @RefreshScope\n+    public SwaggerController.SwaggerRegistrations buildSwagger(\n+            RefreshableElide elide,\n+            ElideConfigProperties settings\n+    ) {\n+        EntityDictionary dictionary = elide.getElide().getElideSettings().getDictionary();\n         Info info = new Info()\n                 .title(settings.getSwagger().getName())\n                 .version(settings.getSwagger().getVersion());\n \n         SwaggerBuilder builder = new SwaggerBuilder(dictionary, info).withLegacyFilterDialect(false);\n+        return new SwaggerController.SwaggerRegistrations(\n+                builder.build().basePath(settings.getJsonApi().getPath())\n+        );\n+    }\n \n-        Swagger swagger = builder.build().basePath(settings.getJsonApi().getPath());\n+    @Bean\n+    @ConditionalOnMissingBean\n+    public ClassScanner getClassScanner() {\n+        return new DefaultClassScanner();\n+    }\n \n-        return swagger;\n+    @Bean\n+    @ConditionalOnMissingBean\n+    public ErrorMapper getErrorMapper() {\n+        return error -> null;\n+    }\n+\n+    @Bean\n+    @ConditionalOnMissingBean\n+    @Scope(SCOPE_PROTOTYPE)\n+    public JsonApiMapper mapper() {\n+        return new JsonApiMapper();\n     }\n \n     private boolean isDynamicConfigEnabled(ElideConfigProperties settings) {\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "ff86c56fde9064e1719ea35660fd04c42c949662", "message": "Merge commit", "committedDate": null}, {"oid": "bd516473fbeeb47ca05eaf510734f06432c4280a", "committedDate": "2020-06-03 09:09:44 -0500", "message": "Disabling Legacy Filter Dialect in Swagger Documentation (#1363)"}, {"oid": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "parent a14ccfbb7b558d27799b4e7b1916850519639708 author Jack (\uc815\ud658) <QubitPi@users.noreply.github.com> 1559678988 -0700 committer Aaron Klish <klish@verizonmedia.com> 1589583449 -0500"}, {"oid": "b55b769236519aa81a171321c14ee0ac8315908f", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Async ID change from UUID to String and Dynamic Config FIx (#1325)"}, {"oid": "81dde7567aa8a6a00822a9a8f0bf901806a962e8", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add caching support to SQLQueryEngine (#1319)"}, {"oid": "9c897058ce0b9656bf2aef2318d0addc474f278a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "implement cancel function (#1367)"}, {"oid": "9ff0eb6bfa7f8f0135d21cf68cb1e44c5d515d91", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Enable query caching by default (#1378)"}, {"oid": "9c8fe001d36753349ad1f7df83029e1c8d8edcac", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Multiplex Transaction Lazy Initialize and Dynamic Config fixes (#1383)"}, {"oid": "d31cff91c7452ae4b07bcc2006b70f15474b4198", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Fixes for query cache spring integration (#1381)"}, {"oid": "8fece2b8f1b3078ce2598ddb03dca66bb984df46", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Aggregation DataStore QueryLogger Implementation (#1448)"}, {"oid": "7c8fece25f8dddbe975f0072bf0267def2610ff4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Disable Aggregation DataStore by default (#1468)"}, {"oid": "5c065ad65fcda862269b5e31a8b6dc5d8c828aaa", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Data export - Refactoring and Prep for using ResultStorageEngine (#1527)"}, {"oid": "ca35ad817f2fde68b2f9c39d0d4d9c9d44ebffd5", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Query Engine and Aggregation Store Changes for Multi Data Source Support (#1523)"}, {"oid": "b8d0918e2f6f438eda12c12e58354a8cad3719dd", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Added item expiration to AggregationDataStore cache (#1564)"}, {"oid": "1933cc3eb6788be5fce69b1d97c6ae589623495f", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add slf4j query logger (#1618)"}, {"oid": "26bef0c192b549ed701287814055e5e7ac175a50", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Collapsed contrib directory into top level modules (#1670)"}, {"oid": "49e61867e840d9818993879436d5db1aad964c9a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Move data store interfaces (#1671)"}, {"oid": "911d29408bdeeb4ff8d78f2beea2417be4e7c673", "committedDate": "2020-12-11 16:20:28 -0600", "message": "cleaned up package hierarchy for elide-core (#1672)"}, {"oid": "c14096bec256faf80e7674fbef22bccff1f955a3", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Moved contrib.dynamicconfighelpers to modelconfig package (#1676)"}, {"oid": "800ba874c21672a727aed4e1beacb294bfb5022e", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5.x MetaDataStore enable/disable flag (#1696)"}, {"oid": "bea43ef0f244ba01c2f7d4216b9f08f0ef4e83a4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Optionally compile hjson configs while running CLI (#1693)"}, {"oid": "7dcb449ad9bf24c3c12601209803a0f05420e380", "committedDate": "2021-01-07 23:13:06 -0600", "message": "Only build swagger if the controller is activated"}, {"oid": "6ce117b6c68f6a2fc484e3c9ba7b76ace9c596ff", "committedDate": "2021-01-08 17:36:00 -0600", "message": "Added baseUrl configuration setting for Spring and Standalone"}, {"oid": "4641781684344dd25e47bdbe1a8aa6f28881d627", "committedDate": "2021-01-12 09:00:58 -0600", "message": "Added a new setting to Spring to enable/disable JSON-API links"}, {"oid": "79b23531edc46cebc43e889d7ac4727540a72105", "committedDate": "2021-01-19 14:16:37 -0600", "message": "Syntax Fixes"}, {"oid": "de9883d363ba8b4171be5d8ad508564664f6fc90", "committedDate": "2021-01-19 14:16:37 -0600", "message": "Review comments"}, {"oid": "fe3198d3cacec95d4b064ccae7109874e58d9e96", "committedDate": "2021-01-20 10:43:28 -0600", "message": "Review Comments"}, {"oid": "bca9aca28661c202a018a1c929ea888eaf8d83c7", "committedDate": "2021-01-20 10:43:28 -0600", "message": "Review Comments"}, {"oid": "93ebb969254204bd315de860bd064ca77e70cfab", "committedDate": "2021-01-29 11:36:47 -0500", "message": "TableExportHook Binding (#1802)"}, {"oid": "dcb6336070c158b923a8e5a7ec92502ea57f36ee", "committedDate": "2021-02-09 10:45:00 -0600", "message": "Add dynamic table type (#1815)"}, {"oid": "d77f1240a3fa5abf824aea54d0533be844235359", "committedDate": "2021-02-11 10:18:49 -0600", "message": "Created new interface for dynamic configuration (#1830)"}, {"oid": "af0aad2498f81659177eff1bbcfbf49213baf7b9", "committedDate": "2021-02-15 13:19:22 -0500", "message": "Exclude Models based on Conditions (#1835)"}, {"oid": "2eb90f1b8513e246930e5419e838b3fb1f7bbb98", "committedDate": "2021-02-18 11:42:05 -0600", "message": "Integration Tests for Table Export (#1842)"}, {"oid": "e2005d6babde1a0da3ba66fc507fc6ecf5773052", "committedDate": "2021-02-22 10:34:54 -0600", "message": "Cleanup unnecessary syntax (#1854)"}, {"oid": "6c97725cec25be900fd1466f627d3d0e722ed508", "committedDate": "2021-03-09 15:24:33 -0600", "message": "Add experimental n plus1 improvement (#1876)"}, {"oid": "8274a6341e06c7201049e8e8f0a48f07bd99a0ef", "committedDate": "2021-03-10 16:38:34 -0600", "message": "Cleanup IDE warnings (#1894)"}, {"oid": "c19d8c2237e960d792dc2ef6375356433b4fac21", "committedDate": "2021-03-11 17:10:26 -0600", "message": "Classtype cleanup (#1905)"}, {"oid": "e1e07dbeabb690560754c84200b67e7a8d4d9229", "committedDate": "2021-03-22 09:06:06 -0500", "message": "Part 4 of Query Plan Optimization : Fix Metric Nesting (#1924)"}, {"oid": "ed941827e1027083367b4df9794501909279c667", "committedDate": "2021-03-25 22:55:35 -0400", "message": "diamonds to reduce duplication (#1947)"}, {"oid": "dc7a367e14c9f43b2d013f5037341055a29f0491", "committedDate": "2021-03-26 10:31:26 -0400", "message": "Issue 1929 - Address Sonar suggestions (#1925)"}, {"oid": "43598e8411d544b31d9807ded4f248e25ef334a4", "committedDate": "2021-04-01 17:32:17 -0500", "message": "Add Table Level Query Hints (#1981)"}, {"oid": "98f612f023448a93324aaed11e00d6d4fa730c74", "committedDate": "2021-04-08 22:39:32 -0400", "message": "Issue 1929 - Clean up code quality (#1964)"}, {"oid": "6143d108eb7b1a2250370409d5362c6722c95b23", "committedDate": "2021-04-26 16:28:58 -0500", "message": "Cleanup (#2026)"}, {"oid": "ea57369f2b8af263efd9de99bfe59cae1b88202a", "committedDate": "2021-04-29 21:02:18 -0500", "message": "Test Cases + Enable Namespace in Standalone and Spring (#2040)"}, {"oid": "b911028feb3655bb897041047caa7602f3f0c761", "committedDate": "2021-05-02 21:51:37 -0500", "message": "Add missing default values for ElideAutoConfiguration (#2052)"}, {"oid": "0a3776bacb5809845d9a04a1263db9760f117b92", "committedDate": "2021-05-13 13:25:15 -0500", "message": "Injection Protection for parameterized metrics/dimensions (#2090)"}, {"oid": "c55eca8c6cc828610faf39d0ea62d2a0a897696b", "committedDate": "2021-08-05 09:52:57 -0500", "message": "Add simple configuration to enable verbose errors. (#2236)"}, {"oid": "fe7009353573baf0206f7bb58617db97e067f900", "committedDate": "2021-09-02 11:31:12 -0500", "message": "Refactor class scanning for quarkus (#2284)"}, {"oid": "65eaaa12fc2b805135285287d4912d2329bc676d", "committedDate": "2021-09-13 14:02:45 -0500", "message": "Add ability to map unknown exceptions to custom exceptions (#2205)"}, {"oid": "6a319f244f5b611d3702e46013c5f8c988b5a957", "committedDate": "2021-09-30 13:42:41 -0500", "message": "GraphQL Subscriptions: Part 5 (#2308)"}, {"oid": "64325a03c2d0e965e2543c3c52a9ddc0de570c03", "committedDate": "2021-10-07 14:58:50 -0500", "message": "Aggregation Store: Relaxing rules for how filter templates are compared against filter e\u2026 (#2329)"}, {"oid": "5064f8a5a351b1f77b8025f68b20efc1b76d101e", "committedDate": "2021-10-19 11:25:38 -0500", "message": "Elide 6 : Refactor DataStoreTransaction Interface. (#2334)"}, {"oid": "54cdcb9fe67225cd463e1bf9357f0e1d2a42c152", "committedDate": "2021-12-02 15:11:51 -0600", "message": "HJSON Configuration Models and DataStore (#2418)"}, {"oid": "d554658425300df2210df1e67110f0b7588633e0", "committedDate": "2022-01-05 15:50:55 -0600", "message": "Enable lifecycle, check, and other entity scans by default for Spring. (#2470)"}, {"oid": "c38eb980af7f953202cb53faaed14595d3709ed9", "committedDate": "2022-01-21 10:03:29 -0600", "message": "Refresh scope beans (#2409)"}, {"oid": "d0552c5750608391d52e3e3286469901726a7d06", "committedDate": "2022-01-28 16:02:28 -0600", "message": "Support filters on query plans (#2526)"}, {"oid": "abb32869ab0e97b8ceaa1bd61b53c579b4ca1c65", "committedDate": "2022-04-22 15:17:21 -0500", "message": "Header filtering config (#2627)"}, {"oid": "8adc4439ded747d4dd1191ad5fed6131bde39cb6", "committedDate": "2022-04-26 16:56:53 -0500", "message": "Add Injector Bean (#2637)"}, {"oid": "af3e1d9d64479e3ca0f5141bec8b906843d11248", "committedDate": "2022-05-05 21:14:51 -0500", "message": "Minimum to expose _service.sdl for Apollo federation. (#2640)"}, {"oid": "c0a0f0ad9a1a9bbb9938e3225f27b2d191b82e79", "committedDate": "2022-09-15 21:47:40 -0500", "message": "Only build query runner if graphQL is enabled (#2766)"}, {"oid": "f03aba8c1f854a9c0c286fad97c30d2fed5ffe08", "committedDate": "2022-09-22 18:59:56 -0500", "message": "Allow elide-graphql to be excluded when elide.graphql.enabled=false (#2787)"}, {"oid": "f21f35950fe465cfbf135d06cc8ae2321a29513a", "committedDate": "2023-02-04 15:34:06 -0600", "message": "Elide 7.x (#2876)"}, {"oid": "119ea75d9ad68b27361326e9837ef1627afd3169", "committedDate": "2023-03-20 18:16:04 -0500", "message": "Fixes #2912 (#2931)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU3MTU4MQ==", "url": "https://github.com/yahoo/elide/pull/1367#discussion_r435571581", "body": "This doesn't look right - why are we defining the cancel method twice here and passing it through two separate functions?", "bodyText": "This doesn't look right - why are we defining the cancel method twice here and passing it through two separate functions?", "bodyHTML": "<p dir=\"auto\">This doesn't look right - why are we defining the cancel method twice here and passing it through two separate functions?</p>", "author": "aklish", "createdAt": "2020-06-04T21:47:44Z", "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java", "diffHunk": "@@ -376,11 +377,10 @@ default AuditLogger getAuditLogger() {\n      */\n     default DataStore getDataStore(MetaDataStore metaDataStore, AggregationDataStore aggregationDataStore,\n             EntityManagerFactory entityManagerFactory) {\n-\n         DataStore jpaDataStore = new JpaDataStore(\n                 () -> { return entityManagerFactory.createEntityManager(); },\n-                (em -> { return new NonJtaTransaction(em); }));\n-\n+\t\t(em -> { return new NonJtaTransaction(em, em.unwrap(Session.class).cancelQuery()); }),\n+                     (entityManager -> { entityManager.unwrap(Session.class).cancelQuery();}));", "originalCommit": "b916ca0a64e0659854cd15ae47b1b35b0c1260ce", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "de929061ff81b6969c97c27683791b478c0ac1c2", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 55d936b65..b14fa3bee 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -379,8 +384,7 @@ public interface ElideStandaloneSettings {\n             EntityManagerFactory entityManagerFactory) {\n         DataStore jpaDataStore = new JpaDataStore(\n                 () -> { return entityManagerFactory.createEntityManager(); },\n-\t\t(em -> { return new NonJtaTransaction(em, em.unwrap(Session.class).cancelQuery()); }),\n-                     (entityManager -> { entityManager.unwrap(Session.class).cancelQuery();}));\n+\t\t(em -> { return new NonJtaTransaction(em, jpaTransactionCancel); }));\n         DataStore dataStore = new MultiplexManager(jpaDataStore, metaDataStore, aggregationDataStore);\n \n         return dataStore;\n", "next_change": {"commit": "c637d51fba403ac0e2c8fad524d4ea781e985951", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex b14fa3bee..5a26c2e2c 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -384,7 +384,9 @@ public interface ElideStandaloneSettings {\n             EntityManagerFactory entityManagerFactory) {\n         DataStore jpaDataStore = new JpaDataStore(\n                 () -> { return entityManagerFactory.createEntityManager(); },\n-\t\t(em -> { return new NonJtaTransaction(em, jpaTransactionCancel); }));\n+\t\t(em -> { return new NonJtaTransaction(em, jpaTransactionCancel); }),\n+                () -> { return jpaTransactionCancel; });\n+\n         DataStore dataStore = new MultiplexManager(jpaDataStore, metaDataStore, aggregationDataStore);\n \n         return dataStore;\n", "next_change": {"commit": "3cd05225a53f92969d1ad2e198bcc69a8bbf6553", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 5a26c2e2c..81d2ae016 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -384,7 +384,7 @@ public interface ElideStandaloneSettings {\n             EntityManagerFactory entityManagerFactory) {\n         DataStore jpaDataStore = new JpaDataStore(\n                 () -> { return entityManagerFactory.createEntityManager(); },\n-\t\t(em -> { return new NonJtaTransaction(em, jpaTransactionCancel); }),\n+                ((em, txCancel) -> { return new NonJtaTransaction(em, txCancel); }),\n                 () -> { return jpaTransactionCancel; });\n \n         DataStore dataStore = new MultiplexManager(jpaDataStore, metaDataStore, aggregationDataStore);\n", "next_change": {"commit": "c492c68cc1cd98c7ae88b9286a345b73443a8af3", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 81d2ae016..9caa6bdfd 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -385,7 +385,7 @@ public interface ElideStandaloneSettings {\n         DataStore jpaDataStore = new JpaDataStore(\n                 () -> { return entityManagerFactory.createEntityManager(); },\n                 ((em, txCancel) -> { return new NonJtaTransaction(em, txCancel); }),\n-                () -> { return jpaTransactionCancel; });\n+                jpaTransactionCancel);\n \n         DataStore dataStore = new MultiplexManager(jpaDataStore, metaDataStore, aggregationDataStore);\n \n", "next_change": {"commit": "3123771c5f0dd5b3f4684a3315f57c941aa3a1f4", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 9caa6bdfd..7cb6ff25e 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -385,7 +385,7 @@ public interface ElideStandaloneSettings {\n         DataStore jpaDataStore = new JpaDataStore(\n                 () -> { return entityManagerFactory.createEntityManager(); },\n                 ((em, txCancel) -> { return new NonJtaTransaction(em, txCancel); }),\n-                jpaTransactionCancel);\n+                JTC);\n \n         DataStore dataStore = new MultiplexManager(jpaDataStore, metaDataStore, aggregationDataStore);\n \n", "next_change": {"commit": "8f1cfb480ee2db34373cee4ca35e5eef6b339a51", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 7cb6ff25e..28faa41df 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -384,8 +386,7 @@ public interface ElideStandaloneSettings {\n             EntityManagerFactory entityManagerFactory) {\n         DataStore jpaDataStore = new JpaDataStore(\n                 () -> { return entityManagerFactory.createEntityManager(); },\n-                ((em, txCancel) -> { return new NonJtaTransaction(em, txCancel); }),\n-                JTC);\n+                (em) -> { return new NonJtaTransaction(em, JTC); } );\n \n         DataStore dataStore = new MultiplexManager(jpaDataStore, metaDataStore, aggregationDataStore);\n \n", "next_change": {"commit": "d7556cb189b6e83070942c10bdaf33054ecc0f71", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 28faa41df..7e16c486e 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -386,7 +383,7 @@ public interface ElideStandaloneSettings {\n             EntityManagerFactory entityManagerFactory) {\n         DataStore jpaDataStore = new JpaDataStore(\n                 () -> { return entityManagerFactory.createEntityManager(); },\n-                (em) -> { return new NonJtaTransaction(em, JTC); } );\n+                (em) -> { return new NonJtaTransaction(em, FUNC); });\n \n         DataStore dataStore = new MultiplexManager(jpaDataStore, metaDataStore, aggregationDataStore);\n \n", "next_change": {"commit": "127517bb46972dbe127cfd5e32d70439aa385381", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 7e16c486e..7e9a2aeb8 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -383,7 +383,7 @@ public interface ElideStandaloneSettings {\n             EntityManagerFactory entityManagerFactory) {\n         DataStore jpaDataStore = new JpaDataStore(\n                 () -> { return entityManagerFactory.createEntityManager(); },\n-                (em) -> { return new NonJtaTransaction(em, FUNC); });\n+                (em) -> { return new NonJtaTransaction(em, TXCANCEL); });\n \n         DataStore dataStore = new MultiplexManager(jpaDataStore, metaDataStore, aggregationDataStore);\n \n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "ff86c56fde9064e1719ea35660fd04c42c949662", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 55d936b65..7e9a2aeb8 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -379,8 +383,8 @@ public interface ElideStandaloneSettings {\n             EntityManagerFactory entityManagerFactory) {\n         DataStore jpaDataStore = new JpaDataStore(\n                 () -> { return entityManagerFactory.createEntityManager(); },\n-\t\t(em -> { return new NonJtaTransaction(em, em.unwrap(Session.class).cancelQuery()); }),\n-                     (entityManager -> { entityManager.unwrap(Session.class).cancelQuery();}));\n+                (em) -> { return new NonJtaTransaction(em, TXCANCEL); });\n+\n         DataStore dataStore = new MultiplexManager(jpaDataStore, metaDataStore, aggregationDataStore);\n \n         return dataStore;\n", "next_change": {"commit": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 7e9a2aeb8..00b641dbb 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -345,147 +285,11 @@ public interface ElideStandaloneSettings {\n     }\n \n     /**\n-     * Gets the audit logger for elide.\n+     * Gets the audit logger for elide\n      *\n      * @return Default: Slf4jLogger\n      */\n     default AuditLogger getAuditLogger() {\n         return new Slf4jLogger();\n     }\n-\n-    /**\n-     * Gets the dynamic compiler for elide.\n-     *\n-     * @return Optional ElideDynamicEntityCompiler\n-     */\n-    default Optional<ElideDynamicEntityCompiler> getDynamicCompiler() {\n-        ElideDynamicEntityCompiler dynamicEntityCompiler = null;\n-\n-        if (enableDynamicModelConfig()) {\n-            try {\n-                dynamicEntityCompiler = new ElideDynamicEntityCompiler(getDynamicConfigPath());\n-            } catch (Exception e) { // thrown by in memory compiler\n-                throw new IllegalStateException(e);\n-            }\n-        }\n-\n-        return Optional.ofNullable(dynamicEntityCompiler);\n-    }\n-\n-    /**\n-     * Gets the DataStore for elide.\n-     * @param metaDataStore MetaDataStore object.\n-     * @param aggregationDataStore AggregationDataStore object.\n-     * @param entityManagerFactory EntityManagerFactory object.\n-     * @return EntityDictionary object initialized.\n-     */\n-    default DataStore getDataStore(MetaDataStore metaDataStore, AggregationDataStore aggregationDataStore,\n-            EntityManagerFactory entityManagerFactory) {\n-        DataStore jpaDataStore = new JpaDataStore(\n-                () -> { return entityManagerFactory.createEntityManager(); },\n-                (em) -> { return new NonJtaTransaction(em, TXCANCEL); });\n-\n-        DataStore dataStore = new MultiplexManager(jpaDataStore, metaDataStore, aggregationDataStore);\n-\n-        return dataStore;\n-    }\n-\n-    /**\n-     * Gets the AggregationDataStore for elide.\n-     * @param queryEngine query engine object.\n-     * @param optionalCompiler optional dynamic compiler object.\n-     * @return AggregationDataStore object initialized.\n-     */\n-    default AggregationDataStore getAggregationDataStore(QueryEngine queryEngine,\n-            Optional<ElideDynamicEntityCompiler> optionalCompiler) {\n-        AggregationDataStore.AggregationDataStoreBuilder aggregationDataStoreBuilder = AggregationDataStore.builder()\n-                .queryEngine(queryEngine);\n-\n-        if (enableDynamicModelConfig()) {\n-            Set<Class<?>> annotatedClasses = getDynamicClassesIfAvailable(optionalCompiler, FromTable.class);\n-            annotatedClasses.addAll(getDynamicClassesIfAvailable(optionalCompiler, FromSubquery.class));\n-            aggregationDataStoreBuilder.dynamicCompiledClasses(annotatedClasses);\n-        }\n-        return aggregationDataStoreBuilder.build();\n-    }\n-\n-    /**\n-     * Gets the EntityDictionary for elide.\n-     * @param injector Service locator for web service for dependency injection.\n-     * @param optionalCompiler optional dynamic compiler object.\n-     * @return EntityDictionary object initialized.\n-     */\n-    default EntityDictionary getEntityDictionary(ServiceLocator injector,\n-            Optional<ElideDynamicEntityCompiler> optionalCompiler) {\n-        EntityDictionary dictionary = new EntityDictionary(getCheckMappings(),\n-                new Injector() {\n-                    @Override\n-                    public void inject(Object entity) {\n-                        injector.inject(entity);\n-                    }\n-\n-                    @Override\n-                    public <T> T instantiate(Class<T> cls) {\n-                        return injector.create(cls);\n-                    }\n-                });\n-\n-        dictionary.scanForSecurityChecks();\n-\n-        Set<Class<?>> annotatedSecurityClasses = getDynamicClassesIfAvailable(optionalCompiler, SecurityCheck.class);\n-\n-        dictionary.addSecurityChecks(annotatedSecurityClasses);\n-\n-        return dictionary;\n-    }\n-\n-    /**\n-     * Gets the metadatastore for elide.\n-     * @param optionalCompiler optional dynamic compiler object.\n-     * @return MetaDataStore object initialized.\n-     */\n-    default MetaDataStore getMetaDataStore(Optional<ElideDynamicEntityCompiler> optionalCompiler) {\n-        MetaDataStore metaDataStore = null;\n-\n-        if (optionalCompiler.isPresent()) {\n-            try {\n-                metaDataStore = new MetaDataStore(optionalCompiler.get());\n-            } catch (ClassNotFoundException e) {\n-                throw new IllegalStateException(e);\n-            }\n-        } else {\n-            metaDataStore = new MetaDataStore();\n-        }\n-\n-        return metaDataStore;\n-    }\n-\n-    /**\n-     * Gets the QueryEngine for elide.\n-     * @param metaDataStore MetaDataStore object.\n-     * @param entityManagerFactory EntityManagerFactory object.\n-     * @return QueryEngine object initialized.\n-     */\n-    default QueryEngine getQueryEngine(MetaDataStore metaDataStore, EntityManagerFactory entityManagerFactory) {\n-        return new SQLQueryEngine(metaDataStore, entityManagerFactory, TXCANCEL);\n-    }\n-\n-    static Set<Class<?>> getDynamicClassesIfAvailable(Optional<ElideDynamicEntityCompiler> optionalCompiler,\n-            Class<?> classz) {\n-        Set<Class<?>> annotatedClasses = new HashSet<Class<?>>();\n-\n-        if (!optionalCompiler.isPresent()) {\n-            return annotatedClasses;\n-        }\n-\n-        ElideDynamicEntityCompiler compiler = optionalCompiler.get();\n-\n-        try {\n-            annotatedClasses = compiler.findAnnotatedClasses(classz);\n-        } catch (ClassNotFoundException e) {\n-            throw new IllegalStateException(e);\n-        }\n-\n-        return annotatedClasses;\n-    }\n }\n", "next_change": {"commit": "95b3031194e0e0f2394228d6a6525a80f13fef04", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 00b641dbb..8bda402cd 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -285,11 +340,150 @@ public interface ElideStandaloneSettings {\n     }\n \n     /**\n-     * Gets the audit logger for elide\n+     * Gets the audit logger for elide.\n      *\n      * @return Default: Slf4jLogger\n      */\n     default AuditLogger getAuditLogger() {\n         return new Slf4jLogger();\n     }\n+\n+    /**\n+     * Gets the dynamic compiler for elide.\n+     *\n+     * @return Optional ElideDynamicEntityCompiler\n+     */\n+    default Optional<ElideDynamicEntityCompiler> getDynamicCompiler() {\n+        ElideDynamicEntityCompiler dynamicEntityCompiler = null;\n+\n+        if (enableDynamicModelConfig()) {\n+            try {\n+                dynamicEntityCompiler = new ElideDynamicEntityCompiler(getDynamicConfigPath());\n+            } catch (Exception e) { // thrown by in memory compiler\n+                throw new IllegalStateException(e);\n+            }\n+        }\n+\n+        return Optional.ofNullable(dynamicEntityCompiler);\n+    }\n+\n+    /**\n+     * Gets the DataStore for elide.\n+     * @param metaDataStore MetaDataStore object.\n+     * @param aggregationDataStore AggregationDataStore object.\n+     * @param entityManagerFactory EntityManagerFactory object.\n+     * @return EntityDictionary object initialized.\n+     */\n+    default DataStore getDataStore(MetaDataStore metaDataStore, AggregationDataStore aggregationDataStore,\n+            EntityManagerFactory entityManagerFactory) {\n+\n+        DataStore jpaDataStore = new JpaDataStore(\n+                () -> { return entityManagerFactory.createEntityManager(); },\n+                (em -> { return new NonJtaTransaction(em); }));\n+\n+        DataStore dataStore = new MultiplexManager(jpaDataStore, metaDataStore, aggregationDataStore);\n+\n+        return dataStore;\n+    }\n+\n+    /**\n+     * Gets the AggregationDataStore for elide.\n+     * @param queryEngine query engine object.\n+     * @param optionalCompiler optional dynamic compiler object.\n+     * @return AggregationDataStore object initialized.\n+     */\n+    default AggregationDataStore getAggregationDataStore(QueryEngine queryEngine,\n+            Optional<ElideDynamicEntityCompiler> optionalCompiler) {\n+        AggregationDataStore aggregationDataStore = null;\n+\n+        if (enableDynamicModelConfig()) {\n+            Set<Class<?>> annotatedClasses = getDynamicClassesIfAvailable(optionalCompiler, FromTable.class);\n+            annotatedClasses.addAll(getDynamicClassesIfAvailable(optionalCompiler, FromSubquery.class));\n+            aggregationDataStore = new AggregationDataStore(queryEngine, annotatedClasses);\n+        } else {\n+            aggregationDataStore = new AggregationDataStore(queryEngine);\n+        }\n+\n+        return aggregationDataStore;\n+    }\n+\n+    /**\n+     * Gets the EntityDictionary for elide.\n+     * @param injector Service locator for web service for dependency injection.\n+     * @param optionalCompiler optional dynamic compiler object.\n+     * @return EntityDictionary object initialized.\n+     */\n+    default EntityDictionary getEntityDictionary(ServiceLocator injector,\n+            Optional<ElideDynamicEntityCompiler> optionalCompiler) {\n+        EntityDictionary dictionary = new EntityDictionary(getCheckMappings(),\n+                new Injector() {\n+                    @Override\n+                    public void inject(Object entity) {\n+                        injector.inject(entity);\n+                    }\n+\n+                    @Override\n+                    public <T> T instantiate(Class<T> cls) {\n+                        return injector.create(cls);\n+                    }\n+                });\n+\n+        dictionary.scanForSecurityChecks();\n+\n+        Set<Class<?>> annotatedSecurityClasses = getDynamicClassesIfAvailable(optionalCompiler, SecurityCheck.class);\n+\n+        dictionary.addSecurityChecks(annotatedSecurityClasses);\n+\n+        return dictionary;\n+    }\n+\n+    /**\n+     * Gets the metadatastore for elide.\n+     * @param optionalCompiler optional dynamic compiler object.\n+     * @return MetaDataStore object initialized.\n+     */\n+    default MetaDataStore getMetaDataStore(Optional<ElideDynamicEntityCompiler> optionalCompiler) {\n+        MetaDataStore metaDataStore = null;\n+\n+        if (optionalCompiler.isPresent()) {\n+            try {\n+                metaDataStore = new MetaDataStore(optionalCompiler.get());\n+            } catch (ClassNotFoundException e) {\n+                throw new IllegalStateException(e);\n+            }\n+        } else {\n+            metaDataStore = new MetaDataStore();\n+        }\n+\n+        return metaDataStore;\n+    }\n+\n+    /**\n+     * Gets the QueryEngine for elide.\n+     * @param metaDataStore MetaDataStore object.\n+     * @param entityManagerFactory EntityManagerFactory object.\n+     * @return QueryEngine object initialized.\n+     */\n+    default QueryEngine getQueryEngine(MetaDataStore metaDataStore, EntityManagerFactory entityManagerFactory) {\n+        return new SQLQueryEngine(metaDataStore, entityManagerFactory, null);\n+    }\n+\n+    static Set<Class<?>> getDynamicClassesIfAvailable(Optional<ElideDynamicEntityCompiler> optionalCompiler,\n+            Class<?> classz) {\n+        Set<Class<?>> annotatedClasses = new HashSet<Class<?>>();\n+\n+        if (!optionalCompiler.isPresent()) {\n+            return annotatedClasses;\n+        }\n+\n+        ElideDynamicEntityCompiler compiler = optionalCompiler.get();\n+\n+        try {\n+            annotatedClasses = compiler.findAnnotatedClasses(classz);\n+        } catch (ClassNotFoundException e) {\n+            throw new IllegalStateException(e);\n+        }\n+\n+        return annotatedClasses;\n+    }\n }\n", "next_change": {"commit": "dcb6336070c158b923a8e5a7ec92502ea57f36ee", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 8bda402cd..c4cbeb54f 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -461,29 +457,26 @@ public interface ElideStandaloneSettings {\n     /**\n      * Gets the QueryEngine for elide.\n      * @param metaDataStore MetaDataStore object.\n-     * @param entityManagerFactory EntityManagerFactory object.\n+     * @param defaultConnectionDetails default DataSource Object and SQLDialect Object.\n+     * @param validator Optional dynamic config validator.\n+     * @param dataSourceConfiguration DataSource Configuration.\n+     * @param dbPasswordExtractor Password Extractor Implementation.\n      * @return QueryEngine object initialized.\n      */\n-    default QueryEngine getQueryEngine(MetaDataStore metaDataStore, EntityManagerFactory entityManagerFactory) {\n-        return new SQLQueryEngine(metaDataStore, entityManagerFactory, null);\n-    }\n-\n-    static Set<Class<?>> getDynamicClassesIfAvailable(Optional<ElideDynamicEntityCompiler> optionalCompiler,\n-            Class<?> classz) {\n-        Set<Class<?>> annotatedClasses = new HashSet<Class<?>>();\n-\n-        if (!optionalCompiler.isPresent()) {\n-            return annotatedClasses;\n+    default QueryEngine getQueryEngine(MetaDataStore metaDataStore, ConnectionDetails defaultConnectionDetails,\n+                    Optional<DynamicConfigValidator> validator,\n+                    DataSourceConfiguration dataSourceConfiguration, DBPasswordExtractor dbPasswordExtractor) {\n+        if (validator.isPresent()) {\n+            Map<String, ConnectionDetails> connectionDetailsMap = new HashMap<>();\n+\n+            validator.get().getElideSQLDBConfig().getDbconfigs().forEach(dbConfig -> {\n+                connectionDetailsMap.put(dbConfig.getName(),\n+                                new ConnectionDetails(\n+                                                dataSourceConfiguration.getDataSource(dbConfig, dbPasswordExtractor),\n+                                                SQLDialectFactory.getDialect(dbConfig.getDialect())));\n+            });\n+            return new SQLQueryEngine(metaDataStore, defaultConnectionDetails, connectionDetailsMap);\n         }\n-\n-        ElideDynamicEntityCompiler compiler = optionalCompiler.get();\n-\n-        try {\n-            annotatedClasses = compiler.findAnnotatedClasses(classz);\n-        } catch (ClassNotFoundException e) {\n-            throw new IllegalStateException(e);\n-        }\n-\n-        return annotatedClasses;\n+        return new SQLQueryEngine(metaDataStore, defaultConnectionDetails);\n     }\n }\n", "next_change": {"commit": "e1e07dbeabb690560754c84200b67e7a8d4d9229", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex c4cbeb54f..9e09a65a7 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -458,24 +486,24 @@ public interface ElideStandaloneSettings {\n      * Gets the QueryEngine for elide.\n      * @param metaDataStore MetaDataStore object.\n      * @param defaultConnectionDetails default DataSource Object and SQLDialect Object.\n-     * @param validator Optional dynamic config validator.\n+     * @param dynamicConfiguration Optional dynamic config.\n      * @param dataSourceConfiguration DataSource Configuration.\n      * @param dbPasswordExtractor Password Extractor Implementation.\n      * @return QueryEngine object initialized.\n      */\n     default QueryEngine getQueryEngine(MetaDataStore metaDataStore, ConnectionDetails defaultConnectionDetails,\n-                    Optional<DynamicConfigValidator> validator,\n+                    Optional<DynamicConfiguration> dynamicConfiguration,\n                     DataSourceConfiguration dataSourceConfiguration, DBPasswordExtractor dbPasswordExtractor) {\n-        if (validator.isPresent()) {\n+        if (dynamicConfiguration.isPresent()) {\n             Map<String, ConnectionDetails> connectionDetailsMap = new HashMap<>();\n \n-            validator.get().getElideSQLDBConfig().getDbconfigs().forEach(dbConfig -> {\n+            dynamicConfiguration.get().getDatabaseConfigurations().forEach(dbConfig -> {\n                 connectionDetailsMap.put(dbConfig.getName(),\n                                 new ConnectionDetails(\n                                                 dataSourceConfiguration.getDataSource(dbConfig, dbPasswordExtractor),\n                                                 SQLDialectFactory.getDialect(dbConfig.getDialect())));\n             });\n-            return new SQLQueryEngine(metaDataStore, defaultConnectionDetails, connectionDetailsMap);\n+            return new SQLQueryEngine(metaDataStore, defaultConnectionDetails, connectionDetailsMap, new HashSet<>());\n         }\n         return new SQLQueryEngine(metaDataStore, defaultConnectionDetails);\n     }\n", "next_change": {"commit": "43598e8411d544b31d9807ded4f248e25ef334a4", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 9e09a65a7..5dfabf6a2 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -503,7 +498,8 @@ public interface ElideStandaloneSettings {\n                                                 dataSourceConfiguration.getDataSource(dbConfig, dbPasswordExtractor),\n                                                 SQLDialectFactory.getDialect(dbConfig.getDialect())));\n             });\n-            return new SQLQueryEngine(metaDataStore, defaultConnectionDetails, connectionDetailsMap, new HashSet<>());\n+            return new SQLQueryEngine(metaDataStore, defaultConnectionDetails, connectionDetailsMap,\n+                    new HashSet<>(Arrays.asList(new AggregateBeforeJoinOptimizer(metaDataStore))));\n         }\n         return new SQLQueryEngine(metaDataStore, defaultConnectionDetails);\n     }\n", "next_change": {"commit": "6143d108eb7b1a2250370409d5362c6722c95b23", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 5dfabf6a2..9bf6ad35a 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -492,12 +490,12 @@ public interface ElideStandaloneSettings {\n         if (dynamicConfiguration.isPresent()) {\n             Map<String, ConnectionDetails> connectionDetailsMap = new HashMap<>();\n \n-            dynamicConfiguration.get().getDatabaseConfigurations().forEach(dbConfig -> {\n+            dynamicConfiguration.get().getDatabaseConfigurations().forEach(dbConfig ->\n                 connectionDetailsMap.put(dbConfig.getName(),\n                                 new ConnectionDetails(\n                                                 dataSourceConfiguration.getDataSource(dbConfig, dbPasswordExtractor),\n-                                                SQLDialectFactory.getDialect(dbConfig.getDialect())));\n-            });\n+                                                SQLDialectFactory.getDialect(dbConfig.getDialect())))\n+            );\n             return new SQLQueryEngine(metaDataStore, defaultConnectionDetails, connectionDetailsMap,\n                     new HashSet<>(Arrays.asList(new AggregateBeforeJoinOptimizer(metaDataStore))));\n         }\n", "next_change": {"commit": "0a3776bacb5809845d9a04a1263db9760f117b92", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 9bf6ad35a..7085a6328 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -497,7 +498,8 @@ public interface ElideStandaloneSettings {\n                                                 SQLDialectFactory.getDialect(dbConfig.getDialect())))\n             );\n             return new SQLQueryEngine(metaDataStore, defaultConnectionDetails, connectionDetailsMap,\n-                    new HashSet<>(Arrays.asList(new AggregateBeforeJoinOptimizer(metaDataStore))));\n+                    new HashSet<>(Arrays.asList(new AggregateBeforeJoinOptimizer(metaDataStore))),\n+                    new DefaultQueryValidator(metaDataStore.getMetadataDictionary()));\n         }\n         return new SQLQueryEngine(metaDataStore, defaultConnectionDetails);\n     }\n", "next_change": {"commit": "fe7009353573baf0206f7bb58617db97e067f900", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 7085a6328..3f1071c95 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -503,4 +526,12 @@ public interface ElideStandaloneSettings {\n         }\n         return new SQLQueryEngine(metaDataStore, defaultConnectionDetails);\n     }\n+\n+    /**\n+     * Get the class scanner for this Elide instance.\n+     * @return class scanner implementation.\n+     */\n+    default ClassScanner getClassScanner() {\n+        return new DefaultClassScanner();\n+    }\n }\n", "next_change": {"commit": "65eaaa12fc2b805135285287d4912d2329bc676d", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 3f1071c95..1098fa4f0 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -534,4 +536,13 @@ public interface ElideStandaloneSettings {\n     default ClassScanner getClassScanner() {\n         return new DefaultClassScanner();\n     }\n+\n+    /**\n+     * Get the error mapper for this Elide instance. By default no errors will be mapped.\n+     *\n+     * @return error mapper implementation\n+     */\n+    default ErrorMapper getErrorMapper() {\n+        return error -> null;\n+    }\n }\n", "next_change": {"commit": "6a319f244f5b611d3702e46013c5f8c988b5a957", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 1098fa4f0..e41dc47e3 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -545,4 +559,13 @@ public interface ElideStandaloneSettings {\n     default ErrorMapper getErrorMapper() {\n         return error -> null;\n     }\n+\n+    /**\n+     * Get the Jackson object mapper for Elide.\n+     *\n+     * @return object mapper.\n+     */\n+    default JsonApiMapper getObjectMapper() {\n+        return new JsonApiMapper();\n+    }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "ff86c56fde9064e1719ea35660fd04c42c949662", "message": "Merge commit", "committedDate": null}, {"oid": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "parent a14ccfbb7b558d27799b4e7b1916850519639708 author Jack (\uc815\ud658) <QubitPi@users.noreply.github.com> 1559678988 -0700 committer Aaron Klish <klish@verizonmedia.com> 1589583449 -0500"}, {"oid": "95b3031194e0e0f2394228d6a6525a80f13fef04", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5.x dynamic config standalone (#1259)"}, {"oid": "81dde7567aa8a6a00822a9a8f0bf901806a962e8", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add caching support to SQLQueryEngine (#1319)"}, {"oid": "9c897058ce0b9656bf2aef2318d0addc474f278a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "implement cancel function (#1367)"}, {"oid": "9ff0eb6bfa7f8f0135d21cf68cb1e44c5d515d91", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Enable query caching by default (#1378)"}, {"oid": "8fece2b8f1b3078ce2598ddb03dca66bb984df46", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Aggregation DataStore QueryLogger Implementation (#1448)"}, {"oid": "7c8fece25f8dddbe975f0072bf0267def2610ff4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Disable Aggregation DataStore by default (#1468)"}, {"oid": "80c38a134a938bfb74583d9efb6d0c2b80c39e61", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Cancel long running or cancelled async queries (#1447)"}, {"oid": "5c065ad65fcda862269b5e31a8b6dc5d8c828aaa", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Data export - Refactoring and Prep for using ResultStorageEngine (#1527)"}, {"oid": "ca35ad817f2fde68b2f9c39d0d4d9c9d44ebffd5", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Query Engine and Aggregation Store Changes for Multi Data Source Support (#1523)"}, {"oid": "bbbfb1a7522b64ef2f7fc42bae2c0f65491d1c04", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Update timegrain serde to return java.sql.Date instead of java.util.Date (#1552)"}, {"oid": "b8d0918e2f6f438eda12c12e58354a8cad3719dd", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Added item expiration to AggregationDataStore cache (#1564)"}, {"oid": "1933cc3eb6788be5fce69b1d97c6ae589623495f", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add slf4j query logger (#1618)"}, {"oid": "26bef0c192b549ed701287814055e5e7ac175a50", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Collapsed contrib directory into top level modules (#1670)"}, {"oid": "49e61867e840d9818993879436d5db1aad964c9a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Move data store interfaces (#1671)"}, {"oid": "911d29408bdeeb4ff8d78f2beea2417be4e7c673", "committedDate": "2020-12-11 16:20:28 -0600", "message": "cleaned up package hierarchy for elide-core (#1672)"}, {"oid": "cf1726f19ece846111b004b8f01fd1c135fa39b4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Create separate class for Analytics settings (#1669)"}, {"oid": "c14096bec256faf80e7674fbef22bccff1f955a3", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Moved contrib.dynamicconfighelpers to modelconfig package (#1676)"}, {"oid": "800ba874c21672a727aed4e1beacb294bfb5022e", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5.x MetaDataStore enable/disable flag (#1696)"}, {"oid": "bea43ef0f244ba01c2f7d4216b9f08f0ef4e83a4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Optionally compile hjson configs while running CLI (#1693)"}, {"oid": "6ce117b6c68f6a2fc484e3c9ba7b76ace9c596ff", "committedDate": "2021-01-08 17:36:00 -0600", "message": "Added baseUrl configuration setting for Spring and Standalone"}, {"oid": "79b23531edc46cebc43e889d7ac4727540a72105", "committedDate": "2021-01-19 14:16:37 -0600", "message": "Syntax Fixes"}, {"oid": "de9883d363ba8b4171be5d8ad508564664f6fc90", "committedDate": "2021-01-19 14:16:37 -0600", "message": "Review comments"}, {"oid": "fe3198d3cacec95d4b064ccae7109874e58d9e96", "committedDate": "2021-01-20 10:43:28 -0600", "message": "Review Comments"}, {"oid": "bca9aca28661c202a018a1c929ea888eaf8d83c7", "committedDate": "2021-01-20 10:43:28 -0600", "message": "Review Comments"}, {"oid": "93ebb969254204bd315de860bd064ca77e70cfab", "committedDate": "2021-01-29 11:36:47 -0500", "message": "TableExportHook Binding (#1802)"}, {"oid": "dcb6336070c158b923a8e5a7ec92502ea57f36ee", "committedDate": "2021-02-09 10:45:00 -0600", "message": "Add dynamic table type (#1815)"}, {"oid": "d77f1240a3fa5abf824aea54d0533be844235359", "committedDate": "2021-02-11 10:18:49 -0600", "message": "Created new interface for dynamic configuration (#1830)"}, {"oid": "af0aad2498f81659177eff1bbcfbf49213baf7b9", "committedDate": "2021-02-15 13:19:22 -0500", "message": "Exclude Models based on Conditions (#1835)"}, {"oid": "2eb90f1b8513e246930e5419e838b3fb1f7bbb98", "committedDate": "2021-02-18 11:42:05 -0600", "message": "Integration Tests for Table Export (#1842)"}, {"oid": "e2005d6babde1a0da3ba66fc507fc6ecf5773052", "committedDate": "2021-02-22 10:34:54 -0600", "message": "Cleanup unnecessary syntax (#1854)"}, {"oid": "6c97725cec25be900fd1466f627d3d0e722ed508", "committedDate": "2021-03-09 15:24:33 -0600", "message": "Add experimental n plus1 improvement (#1876)"}, {"oid": "8274a6341e06c7201049e8e8f0a48f07bd99a0ef", "committedDate": "2021-03-10 16:38:34 -0600", "message": "Cleanup IDE warnings (#1894)"}, {"oid": "c19d8c2237e960d792dc2ef6375356433b4fac21", "committedDate": "2021-03-11 17:10:26 -0600", "message": "Classtype cleanup (#1905)"}, {"oid": "e1e07dbeabb690560754c84200b67e7a8d4d9229", "committedDate": "2021-03-22 09:06:06 -0500", "message": "Part 4 of Query Plan Optimization : Fix Metric Nesting (#1924)"}, {"oid": "ed941827e1027083367b4df9794501909279c667", "committedDate": "2021-03-25 22:55:35 -0400", "message": "diamonds to reduce duplication (#1947)"}, {"oid": "dc7a367e14c9f43b2d013f5037341055a29f0491", "committedDate": "2021-03-26 10:31:26 -0400", "message": "Issue 1929 - Address Sonar suggestions (#1925)"}, {"oid": "43598e8411d544b31d9807ded4f248e25ef334a4", "committedDate": "2021-04-01 17:32:17 -0500", "message": "Add Table Level Query Hints (#1981)"}, {"oid": "6143d108eb7b1a2250370409d5362c6722c95b23", "committedDate": "2021-04-26 16:28:58 -0500", "message": "Cleanup (#2026)"}, {"oid": "ea57369f2b8af263efd9de99bfe59cae1b88202a", "committedDate": "2021-04-29 21:02:18 -0500", "message": "Test Cases + Enable Namespace in Standalone and Spring (#2040)"}, {"oid": "0a3776bacb5809845d9a04a1263db9760f117b92", "committedDate": "2021-05-13 13:25:15 -0500", "message": "Injection Protection for parameterized metrics/dimensions (#2090)"}, {"oid": "c55eca8c6cc828610faf39d0ea62d2a0a897696b", "committedDate": "2021-08-05 09:52:57 -0500", "message": "Add simple configuration to enable verbose errors. (#2236)"}, {"oid": "fe7009353573baf0206f7bb58617db97e067f900", "committedDate": "2021-09-02 11:31:12 -0500", "message": "Refactor class scanning for quarkus (#2284)"}, {"oid": "65eaaa12fc2b805135285287d4912d2329bc676d", "committedDate": "2021-09-13 14:02:45 -0500", "message": "Add ability to map unknown exceptions to custom exceptions (#2205)"}, {"oid": "6a319f244f5b611d3702e46013c5f8c988b5a957", "committedDate": "2021-09-30 13:42:41 -0500", "message": "GraphQL Subscriptions: Part 5 (#2308)"}, {"oid": "64325a03c2d0e965e2543c3c52a9ddc0de570c03", "committedDate": "2021-10-07 14:58:50 -0500", "message": "Aggregation Store: Relaxing rules for how filter templates are compared against filter e\u2026 (#2329)"}, {"oid": "6f26ba6377010a22403698d48d49ef2a4f897fde", "committedDate": "2021-10-17 15:04:42 -0500", "message": "Changing Oath to Yahoo in Copyright messages (#2340)"}, {"oid": "5064f8a5a351b1f77b8025f68b20efc1b76d101e", "committedDate": "2021-10-19 11:25:38 -0500", "message": "Elide 6 : Refactor DataStoreTransaction Interface. (#2334)"}, {"oid": "54cdcb9fe67225cd463e1bf9357f0e1d2a42c152", "committedDate": "2021-12-02 15:11:51 -0600", "message": "HJSON Configuration Models and DataStore (#2418)"}, {"oid": "d0552c5750608391d52e3e3286469901726a7d06", "committedDate": "2022-01-28 16:02:28 -0600", "message": "Support filters on query plans (#2526)"}, {"oid": "f21f35950fe465cfbf135d06cc8ae2321a29513a", "committedDate": "2023-02-04 15:34:06 -0600", "message": "Elide 7.x (#2876)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU4MTg4Ng==", "url": "https://github.com/yahoo/elide/pull/1367#discussion_r435581886", "body": "Remove entityManagerFactory as an argument.", "bodyText": "Remove entityManagerFactory as an argument.", "bodyHTML": "<p dir=\"auto\">Remove entityManagerFactory as an argument.</p>", "author": "aklish", "createdAt": "2020-06-04T22:13:56Z", "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java", "diffHunk": "@@ -393,18 +393,19 @@ default DataStore getDataStore(MetaDataStore metaDataStore, AggregationDataStore\n      * @return AggregationDataStore object initialized.\n      */\n     default AggregationDataStore getAggregationDataStore(QueryEngine queryEngine,\n-            Optional<ElideDynamicEntityCompiler> optionalCompiler) {\n+            Optional<ElideDynamicEntityCompiler> optionalCompiler, EntityManagerFactory entityManagerFactory) {", "originalCommit": "b916ca0a64e0659854cd15ae47b1b35b0c1260ce", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "de929061ff81b6969c97c27683791b478c0ac1c2", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 55d936b65..b14fa3bee 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -393,18 +397,16 @@ public interface ElideStandaloneSettings {\n      * @return AggregationDataStore object initialized.\n      */\n     default AggregationDataStore getAggregationDataStore(QueryEngine queryEngine,\n-            Optional<ElideDynamicEntityCompiler> optionalCompiler, EntityManagerFactory entityManagerFactory) {\n+            Optional<ElideDynamicEntityCompiler> optionalCompiler) {\n         AggregationDataStore aggregationDataStore = null;\n         if (enableDynamicModelConfig()) {\n             Set<Class<?>> annotatedClasses = getDynamicClassesIfAvailable(optionalCompiler, FromTable.class);\n             annotatedClasses.addAll(getDynamicClassesIfAvailable(optionalCompiler, FromSubquery.class));\n \t    aggregationDataStore = new AggregationDataStore(\n-            \t() -> { return entityManagerFactory.createEntityManager(); },\n-                queryEngine, annotatedClass, (entityManager -> { entityManager.unwrap(Session.class).cancelQuery();}));\n+\t\tqueryEngine, annotatedClass);\n         } else {\n             aggregationDataStore = new AggregationDataStore(\n-            \t() -> { return entityManagerFactory.createEntityManager(); },\n-                queryEngine, (entityManager -> { entityManager.unwrap(Session.class).cancelQuery();}));\n+\t\tqueryEngine);\n         }\n     }\n \n", "next_change": {"commit": "3123771c5f0dd5b3f4684a3315f57c941aa3a1f4", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex b14fa3bee..7cb6ff25e 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -402,12 +404,13 @@ public interface ElideStandaloneSettings {\n         if (enableDynamicModelConfig()) {\n             Set<Class<?>> annotatedClasses = getDynamicClassesIfAvailable(optionalCompiler, FromTable.class);\n             annotatedClasses.addAll(getDynamicClassesIfAvailable(optionalCompiler, FromSubquery.class));\n-\t    aggregationDataStore = new AggregationDataStore(\n-\t\tqueryEngine, annotatedClass);\n+            aggregationDataStore = new AggregationDataStore(\n+                queryEngine, annotatedClasses);\n         } else {\n             aggregationDataStore = new AggregationDataStore(\n-\t\tqueryEngine);\n+                queryEngine);\n         }\n+        return aggregationDataStore;\n     }\n \n     /**\n", "next_change": {"commit": "8f1cfb480ee2db34373cee4ca35e5eef6b339a51", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 7cb6ff25e..28faa41df 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -400,17 +401,15 @@ public interface ElideStandaloneSettings {\n      */\n     default AggregationDataStore getAggregationDataStore(QueryEngine queryEngine,\n             Optional<ElideDynamicEntityCompiler> optionalCompiler) {\n-        AggregationDataStore aggregationDataStore = null;\n+        AggregationDataStore.AggregationDataStoreBuilder aggregationDataStoreBuilder = AggregationDataStore.builder()\n+                .queryEngine(queryEngine);\n+\n         if (enableDynamicModelConfig()) {\n             Set<Class<?>> annotatedClasses = getDynamicClassesIfAvailable(optionalCompiler, FromTable.class);\n             annotatedClasses.addAll(getDynamicClassesIfAvailable(optionalCompiler, FromSubquery.class));\n-            aggregationDataStore = new AggregationDataStore(\n-                queryEngine, annotatedClasses);\n-        } else {\n-            aggregationDataStore = new AggregationDataStore(\n-                queryEngine);\n+            aggregationDataStoreBuilder.dynamicCompiledClasses(annotatedClasses);\n         }\n-        return aggregationDataStore;\n+        return aggregationDataStoreBuilder.build();\n     }\n \n     /**\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "ff86c56fde9064e1719ea35660fd04c42c949662", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 55d936b65..7e9a2aeb8 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -393,19 +397,16 @@ public interface ElideStandaloneSettings {\n      * @return AggregationDataStore object initialized.\n      */\n     default AggregationDataStore getAggregationDataStore(QueryEngine queryEngine,\n-            Optional<ElideDynamicEntityCompiler> optionalCompiler, EntityManagerFactory entityManagerFactory) {\n-        AggregationDataStore aggregationDataStore = null;\n+            Optional<ElideDynamicEntityCompiler> optionalCompiler) {\n+        AggregationDataStore.AggregationDataStoreBuilder aggregationDataStoreBuilder = AggregationDataStore.builder()\n+                .queryEngine(queryEngine);\n+\n         if (enableDynamicModelConfig()) {\n             Set<Class<?>> annotatedClasses = getDynamicClassesIfAvailable(optionalCompiler, FromTable.class);\n             annotatedClasses.addAll(getDynamicClassesIfAvailable(optionalCompiler, FromSubquery.class));\n-\t    aggregationDataStore = new AggregationDataStore(\n-            \t() -> { return entityManagerFactory.createEntityManager(); },\n-                queryEngine, annotatedClass, (entityManager -> { entityManager.unwrap(Session.class).cancelQuery();}));\n-        } else {\n-            aggregationDataStore = new AggregationDataStore(\n-            \t() -> { return entityManagerFactory.createEntityManager(); },\n-                queryEngine, (entityManager -> { entityManager.unwrap(Session.class).cancelQuery();}));\n+            aggregationDataStoreBuilder.dynamicCompiledClasses(annotatedClasses);\n         }\n+        return aggregationDataStoreBuilder.build();\n     }\n \n     /**\n", "next_change": {"commit": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 7e9a2aeb8..00b641dbb 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -345,147 +285,11 @@ public interface ElideStandaloneSettings {\n     }\n \n     /**\n-     * Gets the audit logger for elide.\n+     * Gets the audit logger for elide\n      *\n      * @return Default: Slf4jLogger\n      */\n     default AuditLogger getAuditLogger() {\n         return new Slf4jLogger();\n     }\n-\n-    /**\n-     * Gets the dynamic compiler for elide.\n-     *\n-     * @return Optional ElideDynamicEntityCompiler\n-     */\n-    default Optional<ElideDynamicEntityCompiler> getDynamicCompiler() {\n-        ElideDynamicEntityCompiler dynamicEntityCompiler = null;\n-\n-        if (enableDynamicModelConfig()) {\n-            try {\n-                dynamicEntityCompiler = new ElideDynamicEntityCompiler(getDynamicConfigPath());\n-            } catch (Exception e) { // thrown by in memory compiler\n-                throw new IllegalStateException(e);\n-            }\n-        }\n-\n-        return Optional.ofNullable(dynamicEntityCompiler);\n-    }\n-\n-    /**\n-     * Gets the DataStore for elide.\n-     * @param metaDataStore MetaDataStore object.\n-     * @param aggregationDataStore AggregationDataStore object.\n-     * @param entityManagerFactory EntityManagerFactory object.\n-     * @return EntityDictionary object initialized.\n-     */\n-    default DataStore getDataStore(MetaDataStore metaDataStore, AggregationDataStore aggregationDataStore,\n-            EntityManagerFactory entityManagerFactory) {\n-        DataStore jpaDataStore = new JpaDataStore(\n-                () -> { return entityManagerFactory.createEntityManager(); },\n-                (em) -> { return new NonJtaTransaction(em, TXCANCEL); });\n-\n-        DataStore dataStore = new MultiplexManager(jpaDataStore, metaDataStore, aggregationDataStore);\n-\n-        return dataStore;\n-    }\n-\n-    /**\n-     * Gets the AggregationDataStore for elide.\n-     * @param queryEngine query engine object.\n-     * @param optionalCompiler optional dynamic compiler object.\n-     * @return AggregationDataStore object initialized.\n-     */\n-    default AggregationDataStore getAggregationDataStore(QueryEngine queryEngine,\n-            Optional<ElideDynamicEntityCompiler> optionalCompiler) {\n-        AggregationDataStore.AggregationDataStoreBuilder aggregationDataStoreBuilder = AggregationDataStore.builder()\n-                .queryEngine(queryEngine);\n-\n-        if (enableDynamicModelConfig()) {\n-            Set<Class<?>> annotatedClasses = getDynamicClassesIfAvailable(optionalCompiler, FromTable.class);\n-            annotatedClasses.addAll(getDynamicClassesIfAvailable(optionalCompiler, FromSubquery.class));\n-            aggregationDataStoreBuilder.dynamicCompiledClasses(annotatedClasses);\n-        }\n-        return aggregationDataStoreBuilder.build();\n-    }\n-\n-    /**\n-     * Gets the EntityDictionary for elide.\n-     * @param injector Service locator for web service for dependency injection.\n-     * @param optionalCompiler optional dynamic compiler object.\n-     * @return EntityDictionary object initialized.\n-     */\n-    default EntityDictionary getEntityDictionary(ServiceLocator injector,\n-            Optional<ElideDynamicEntityCompiler> optionalCompiler) {\n-        EntityDictionary dictionary = new EntityDictionary(getCheckMappings(),\n-                new Injector() {\n-                    @Override\n-                    public void inject(Object entity) {\n-                        injector.inject(entity);\n-                    }\n-\n-                    @Override\n-                    public <T> T instantiate(Class<T> cls) {\n-                        return injector.create(cls);\n-                    }\n-                });\n-\n-        dictionary.scanForSecurityChecks();\n-\n-        Set<Class<?>> annotatedSecurityClasses = getDynamicClassesIfAvailable(optionalCompiler, SecurityCheck.class);\n-\n-        dictionary.addSecurityChecks(annotatedSecurityClasses);\n-\n-        return dictionary;\n-    }\n-\n-    /**\n-     * Gets the metadatastore for elide.\n-     * @param optionalCompiler optional dynamic compiler object.\n-     * @return MetaDataStore object initialized.\n-     */\n-    default MetaDataStore getMetaDataStore(Optional<ElideDynamicEntityCompiler> optionalCompiler) {\n-        MetaDataStore metaDataStore = null;\n-\n-        if (optionalCompiler.isPresent()) {\n-            try {\n-                metaDataStore = new MetaDataStore(optionalCompiler.get());\n-            } catch (ClassNotFoundException e) {\n-                throw new IllegalStateException(e);\n-            }\n-        } else {\n-            metaDataStore = new MetaDataStore();\n-        }\n-\n-        return metaDataStore;\n-    }\n-\n-    /**\n-     * Gets the QueryEngine for elide.\n-     * @param metaDataStore MetaDataStore object.\n-     * @param entityManagerFactory EntityManagerFactory object.\n-     * @return QueryEngine object initialized.\n-     */\n-    default QueryEngine getQueryEngine(MetaDataStore metaDataStore, EntityManagerFactory entityManagerFactory) {\n-        return new SQLQueryEngine(metaDataStore, entityManagerFactory, TXCANCEL);\n-    }\n-\n-    static Set<Class<?>> getDynamicClassesIfAvailable(Optional<ElideDynamicEntityCompiler> optionalCompiler,\n-            Class<?> classz) {\n-        Set<Class<?>> annotatedClasses = new HashSet<Class<?>>();\n-\n-        if (!optionalCompiler.isPresent()) {\n-            return annotatedClasses;\n-        }\n-\n-        ElideDynamicEntityCompiler compiler = optionalCompiler.get();\n-\n-        try {\n-            annotatedClasses = compiler.findAnnotatedClasses(classz);\n-        } catch (ClassNotFoundException e) {\n-            throw new IllegalStateException(e);\n-        }\n-\n-        return annotatedClasses;\n-    }\n }\n", "next_change": {"commit": "95b3031194e0e0f2394228d6a6525a80f13fef04", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 00b641dbb..8bda402cd 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -285,11 +340,150 @@ public interface ElideStandaloneSettings {\n     }\n \n     /**\n-     * Gets the audit logger for elide\n+     * Gets the audit logger for elide.\n      *\n      * @return Default: Slf4jLogger\n      */\n     default AuditLogger getAuditLogger() {\n         return new Slf4jLogger();\n     }\n+\n+    /**\n+     * Gets the dynamic compiler for elide.\n+     *\n+     * @return Optional ElideDynamicEntityCompiler\n+     */\n+    default Optional<ElideDynamicEntityCompiler> getDynamicCompiler() {\n+        ElideDynamicEntityCompiler dynamicEntityCompiler = null;\n+\n+        if (enableDynamicModelConfig()) {\n+            try {\n+                dynamicEntityCompiler = new ElideDynamicEntityCompiler(getDynamicConfigPath());\n+            } catch (Exception e) { // thrown by in memory compiler\n+                throw new IllegalStateException(e);\n+            }\n+        }\n+\n+        return Optional.ofNullable(dynamicEntityCompiler);\n+    }\n+\n+    /**\n+     * Gets the DataStore for elide.\n+     * @param metaDataStore MetaDataStore object.\n+     * @param aggregationDataStore AggregationDataStore object.\n+     * @param entityManagerFactory EntityManagerFactory object.\n+     * @return EntityDictionary object initialized.\n+     */\n+    default DataStore getDataStore(MetaDataStore metaDataStore, AggregationDataStore aggregationDataStore,\n+            EntityManagerFactory entityManagerFactory) {\n+\n+        DataStore jpaDataStore = new JpaDataStore(\n+                () -> { return entityManagerFactory.createEntityManager(); },\n+                (em -> { return new NonJtaTransaction(em); }));\n+\n+        DataStore dataStore = new MultiplexManager(jpaDataStore, metaDataStore, aggregationDataStore);\n+\n+        return dataStore;\n+    }\n+\n+    /**\n+     * Gets the AggregationDataStore for elide.\n+     * @param queryEngine query engine object.\n+     * @param optionalCompiler optional dynamic compiler object.\n+     * @return AggregationDataStore object initialized.\n+     */\n+    default AggregationDataStore getAggregationDataStore(QueryEngine queryEngine,\n+            Optional<ElideDynamicEntityCompiler> optionalCompiler) {\n+        AggregationDataStore aggregationDataStore = null;\n+\n+        if (enableDynamicModelConfig()) {\n+            Set<Class<?>> annotatedClasses = getDynamicClassesIfAvailable(optionalCompiler, FromTable.class);\n+            annotatedClasses.addAll(getDynamicClassesIfAvailable(optionalCompiler, FromSubquery.class));\n+            aggregationDataStore = new AggregationDataStore(queryEngine, annotatedClasses);\n+        } else {\n+            aggregationDataStore = new AggregationDataStore(queryEngine);\n+        }\n+\n+        return aggregationDataStore;\n+    }\n+\n+    /**\n+     * Gets the EntityDictionary for elide.\n+     * @param injector Service locator for web service for dependency injection.\n+     * @param optionalCompiler optional dynamic compiler object.\n+     * @return EntityDictionary object initialized.\n+     */\n+    default EntityDictionary getEntityDictionary(ServiceLocator injector,\n+            Optional<ElideDynamicEntityCompiler> optionalCompiler) {\n+        EntityDictionary dictionary = new EntityDictionary(getCheckMappings(),\n+                new Injector() {\n+                    @Override\n+                    public void inject(Object entity) {\n+                        injector.inject(entity);\n+                    }\n+\n+                    @Override\n+                    public <T> T instantiate(Class<T> cls) {\n+                        return injector.create(cls);\n+                    }\n+                });\n+\n+        dictionary.scanForSecurityChecks();\n+\n+        Set<Class<?>> annotatedSecurityClasses = getDynamicClassesIfAvailable(optionalCompiler, SecurityCheck.class);\n+\n+        dictionary.addSecurityChecks(annotatedSecurityClasses);\n+\n+        return dictionary;\n+    }\n+\n+    /**\n+     * Gets the metadatastore for elide.\n+     * @param optionalCompiler optional dynamic compiler object.\n+     * @return MetaDataStore object initialized.\n+     */\n+    default MetaDataStore getMetaDataStore(Optional<ElideDynamicEntityCompiler> optionalCompiler) {\n+        MetaDataStore metaDataStore = null;\n+\n+        if (optionalCompiler.isPresent()) {\n+            try {\n+                metaDataStore = new MetaDataStore(optionalCompiler.get());\n+            } catch (ClassNotFoundException e) {\n+                throw new IllegalStateException(e);\n+            }\n+        } else {\n+            metaDataStore = new MetaDataStore();\n+        }\n+\n+        return metaDataStore;\n+    }\n+\n+    /**\n+     * Gets the QueryEngine for elide.\n+     * @param metaDataStore MetaDataStore object.\n+     * @param entityManagerFactory EntityManagerFactory object.\n+     * @return QueryEngine object initialized.\n+     */\n+    default QueryEngine getQueryEngine(MetaDataStore metaDataStore, EntityManagerFactory entityManagerFactory) {\n+        return new SQLQueryEngine(metaDataStore, entityManagerFactory, null);\n+    }\n+\n+    static Set<Class<?>> getDynamicClassesIfAvailable(Optional<ElideDynamicEntityCompiler> optionalCompiler,\n+            Class<?> classz) {\n+        Set<Class<?>> annotatedClasses = new HashSet<Class<?>>();\n+\n+        if (!optionalCompiler.isPresent()) {\n+            return annotatedClasses;\n+        }\n+\n+        ElideDynamicEntityCompiler compiler = optionalCompiler.get();\n+\n+        try {\n+            annotatedClasses = compiler.findAnnotatedClasses(classz);\n+        } catch (ClassNotFoundException e) {\n+            throw new IllegalStateException(e);\n+        }\n+\n+        return annotatedClasses;\n+    }\n }\n", "next_change": {"commit": "dcb6336070c158b923a8e5a7ec92502ea57f36ee", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 8bda402cd..c4cbeb54f 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -461,29 +457,26 @@ public interface ElideStandaloneSettings {\n     /**\n      * Gets the QueryEngine for elide.\n      * @param metaDataStore MetaDataStore object.\n-     * @param entityManagerFactory EntityManagerFactory object.\n+     * @param defaultConnectionDetails default DataSource Object and SQLDialect Object.\n+     * @param validator Optional dynamic config validator.\n+     * @param dataSourceConfiguration DataSource Configuration.\n+     * @param dbPasswordExtractor Password Extractor Implementation.\n      * @return QueryEngine object initialized.\n      */\n-    default QueryEngine getQueryEngine(MetaDataStore metaDataStore, EntityManagerFactory entityManagerFactory) {\n-        return new SQLQueryEngine(metaDataStore, entityManagerFactory, null);\n-    }\n-\n-    static Set<Class<?>> getDynamicClassesIfAvailable(Optional<ElideDynamicEntityCompiler> optionalCompiler,\n-            Class<?> classz) {\n-        Set<Class<?>> annotatedClasses = new HashSet<Class<?>>();\n-\n-        if (!optionalCompiler.isPresent()) {\n-            return annotatedClasses;\n+    default QueryEngine getQueryEngine(MetaDataStore metaDataStore, ConnectionDetails defaultConnectionDetails,\n+                    Optional<DynamicConfigValidator> validator,\n+                    DataSourceConfiguration dataSourceConfiguration, DBPasswordExtractor dbPasswordExtractor) {\n+        if (validator.isPresent()) {\n+            Map<String, ConnectionDetails> connectionDetailsMap = new HashMap<>();\n+\n+            validator.get().getElideSQLDBConfig().getDbconfigs().forEach(dbConfig -> {\n+                connectionDetailsMap.put(dbConfig.getName(),\n+                                new ConnectionDetails(\n+                                                dataSourceConfiguration.getDataSource(dbConfig, dbPasswordExtractor),\n+                                                SQLDialectFactory.getDialect(dbConfig.getDialect())));\n+            });\n+            return new SQLQueryEngine(metaDataStore, defaultConnectionDetails, connectionDetailsMap);\n         }\n-\n-        ElideDynamicEntityCompiler compiler = optionalCompiler.get();\n-\n-        try {\n-            annotatedClasses = compiler.findAnnotatedClasses(classz);\n-        } catch (ClassNotFoundException e) {\n-            throw new IllegalStateException(e);\n-        }\n-\n-        return annotatedClasses;\n+        return new SQLQueryEngine(metaDataStore, defaultConnectionDetails);\n     }\n }\n", "next_change": {"commit": "e1e07dbeabb690560754c84200b67e7a8d4d9229", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex c4cbeb54f..9e09a65a7 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -458,24 +486,24 @@ public interface ElideStandaloneSettings {\n      * Gets the QueryEngine for elide.\n      * @param metaDataStore MetaDataStore object.\n      * @param defaultConnectionDetails default DataSource Object and SQLDialect Object.\n-     * @param validator Optional dynamic config validator.\n+     * @param dynamicConfiguration Optional dynamic config.\n      * @param dataSourceConfiguration DataSource Configuration.\n      * @param dbPasswordExtractor Password Extractor Implementation.\n      * @return QueryEngine object initialized.\n      */\n     default QueryEngine getQueryEngine(MetaDataStore metaDataStore, ConnectionDetails defaultConnectionDetails,\n-                    Optional<DynamicConfigValidator> validator,\n+                    Optional<DynamicConfiguration> dynamicConfiguration,\n                     DataSourceConfiguration dataSourceConfiguration, DBPasswordExtractor dbPasswordExtractor) {\n-        if (validator.isPresent()) {\n+        if (dynamicConfiguration.isPresent()) {\n             Map<String, ConnectionDetails> connectionDetailsMap = new HashMap<>();\n \n-            validator.get().getElideSQLDBConfig().getDbconfigs().forEach(dbConfig -> {\n+            dynamicConfiguration.get().getDatabaseConfigurations().forEach(dbConfig -> {\n                 connectionDetailsMap.put(dbConfig.getName(),\n                                 new ConnectionDetails(\n                                                 dataSourceConfiguration.getDataSource(dbConfig, dbPasswordExtractor),\n                                                 SQLDialectFactory.getDialect(dbConfig.getDialect())));\n             });\n-            return new SQLQueryEngine(metaDataStore, defaultConnectionDetails, connectionDetailsMap);\n+            return new SQLQueryEngine(metaDataStore, defaultConnectionDetails, connectionDetailsMap, new HashSet<>());\n         }\n         return new SQLQueryEngine(metaDataStore, defaultConnectionDetails);\n     }\n", "next_change": {"commit": "43598e8411d544b31d9807ded4f248e25ef334a4", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 9e09a65a7..5dfabf6a2 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -503,7 +498,8 @@ public interface ElideStandaloneSettings {\n                                                 dataSourceConfiguration.getDataSource(dbConfig, dbPasswordExtractor),\n                                                 SQLDialectFactory.getDialect(dbConfig.getDialect())));\n             });\n-            return new SQLQueryEngine(metaDataStore, defaultConnectionDetails, connectionDetailsMap, new HashSet<>());\n+            return new SQLQueryEngine(metaDataStore, defaultConnectionDetails, connectionDetailsMap,\n+                    new HashSet<>(Arrays.asList(new AggregateBeforeJoinOptimizer(metaDataStore))));\n         }\n         return new SQLQueryEngine(metaDataStore, defaultConnectionDetails);\n     }\n", "next_change": {"commit": "6143d108eb7b1a2250370409d5362c6722c95b23", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 5dfabf6a2..9bf6ad35a 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -492,12 +490,12 @@ public interface ElideStandaloneSettings {\n         if (dynamicConfiguration.isPresent()) {\n             Map<String, ConnectionDetails> connectionDetailsMap = new HashMap<>();\n \n-            dynamicConfiguration.get().getDatabaseConfigurations().forEach(dbConfig -> {\n+            dynamicConfiguration.get().getDatabaseConfigurations().forEach(dbConfig ->\n                 connectionDetailsMap.put(dbConfig.getName(),\n                                 new ConnectionDetails(\n                                                 dataSourceConfiguration.getDataSource(dbConfig, dbPasswordExtractor),\n-                                                SQLDialectFactory.getDialect(dbConfig.getDialect())));\n-            });\n+                                                SQLDialectFactory.getDialect(dbConfig.getDialect())))\n+            );\n             return new SQLQueryEngine(metaDataStore, defaultConnectionDetails, connectionDetailsMap,\n                     new HashSet<>(Arrays.asList(new AggregateBeforeJoinOptimizer(metaDataStore))));\n         }\n", "next_change": {"commit": "0a3776bacb5809845d9a04a1263db9760f117b92", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 9bf6ad35a..7085a6328 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -497,7 +498,8 @@ public interface ElideStandaloneSettings {\n                                                 SQLDialectFactory.getDialect(dbConfig.getDialect())))\n             );\n             return new SQLQueryEngine(metaDataStore, defaultConnectionDetails, connectionDetailsMap,\n-                    new HashSet<>(Arrays.asList(new AggregateBeforeJoinOptimizer(metaDataStore))));\n+                    new HashSet<>(Arrays.asList(new AggregateBeforeJoinOptimizer(metaDataStore))),\n+                    new DefaultQueryValidator(metaDataStore.getMetadataDictionary()));\n         }\n         return new SQLQueryEngine(metaDataStore, defaultConnectionDetails);\n     }\n", "next_change": {"commit": "fe7009353573baf0206f7bb58617db97e067f900", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 7085a6328..3f1071c95 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -503,4 +526,12 @@ public interface ElideStandaloneSettings {\n         }\n         return new SQLQueryEngine(metaDataStore, defaultConnectionDetails);\n     }\n+\n+    /**\n+     * Get the class scanner for this Elide instance.\n+     * @return class scanner implementation.\n+     */\n+    default ClassScanner getClassScanner() {\n+        return new DefaultClassScanner();\n+    }\n }\n", "next_change": {"commit": "65eaaa12fc2b805135285287d4912d2329bc676d", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 3f1071c95..1098fa4f0 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -534,4 +536,13 @@ public interface ElideStandaloneSettings {\n     default ClassScanner getClassScanner() {\n         return new DefaultClassScanner();\n     }\n+\n+    /**\n+     * Get the error mapper for this Elide instance. By default no errors will be mapped.\n+     *\n+     * @return error mapper implementation\n+     */\n+    default ErrorMapper getErrorMapper() {\n+        return error -> null;\n+    }\n }\n", "next_change": {"commit": "6a319f244f5b611d3702e46013c5f8c988b5a957", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 1098fa4f0..e41dc47e3 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -545,4 +559,13 @@ public interface ElideStandaloneSettings {\n     default ErrorMapper getErrorMapper() {\n         return error -> null;\n     }\n+\n+    /**\n+     * Get the Jackson object mapper for Elide.\n+     *\n+     * @return object mapper.\n+     */\n+    default JsonApiMapper getObjectMapper() {\n+        return new JsonApiMapper();\n+    }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "ff86c56fde9064e1719ea35660fd04c42c949662", "message": "Merge commit", "committedDate": null}, {"oid": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "parent a14ccfbb7b558d27799b4e7b1916850519639708 author Jack (\uc815\ud658) <QubitPi@users.noreply.github.com> 1559678988 -0700 committer Aaron Klish <klish@verizonmedia.com> 1589583449 -0500"}, {"oid": "95b3031194e0e0f2394228d6a6525a80f13fef04", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5.x dynamic config standalone (#1259)"}, {"oid": "81dde7567aa8a6a00822a9a8f0bf901806a962e8", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add caching support to SQLQueryEngine (#1319)"}, {"oid": "9c897058ce0b9656bf2aef2318d0addc474f278a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "implement cancel function (#1367)"}, {"oid": "9ff0eb6bfa7f8f0135d21cf68cb1e44c5d515d91", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Enable query caching by default (#1378)"}, {"oid": "8fece2b8f1b3078ce2598ddb03dca66bb984df46", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Aggregation DataStore QueryLogger Implementation (#1448)"}, {"oid": "7c8fece25f8dddbe975f0072bf0267def2610ff4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Disable Aggregation DataStore by default (#1468)"}, {"oid": "80c38a134a938bfb74583d9efb6d0c2b80c39e61", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Cancel long running or cancelled async queries (#1447)"}, {"oid": "5c065ad65fcda862269b5e31a8b6dc5d8c828aaa", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Data export - Refactoring and Prep for using ResultStorageEngine (#1527)"}, {"oid": "ca35ad817f2fde68b2f9c39d0d4d9c9d44ebffd5", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Query Engine and Aggregation Store Changes for Multi Data Source Support (#1523)"}, {"oid": "bbbfb1a7522b64ef2f7fc42bae2c0f65491d1c04", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Update timegrain serde to return java.sql.Date instead of java.util.Date (#1552)"}, {"oid": "b8d0918e2f6f438eda12c12e58354a8cad3719dd", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Added item expiration to AggregationDataStore cache (#1564)"}, {"oid": "1933cc3eb6788be5fce69b1d97c6ae589623495f", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add slf4j query logger (#1618)"}, {"oid": "26bef0c192b549ed701287814055e5e7ac175a50", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Collapsed contrib directory into top level modules (#1670)"}, {"oid": "49e61867e840d9818993879436d5db1aad964c9a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Move data store interfaces (#1671)"}, {"oid": "911d29408bdeeb4ff8d78f2beea2417be4e7c673", "committedDate": "2020-12-11 16:20:28 -0600", "message": "cleaned up package hierarchy for elide-core (#1672)"}, {"oid": "cf1726f19ece846111b004b8f01fd1c135fa39b4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Create separate class for Analytics settings (#1669)"}, {"oid": "c14096bec256faf80e7674fbef22bccff1f955a3", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Moved contrib.dynamicconfighelpers to modelconfig package (#1676)"}, {"oid": "800ba874c21672a727aed4e1beacb294bfb5022e", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5.x MetaDataStore enable/disable flag (#1696)"}, {"oid": "bea43ef0f244ba01c2f7d4216b9f08f0ef4e83a4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Optionally compile hjson configs while running CLI (#1693)"}, {"oid": "6ce117b6c68f6a2fc484e3c9ba7b76ace9c596ff", "committedDate": "2021-01-08 17:36:00 -0600", "message": "Added baseUrl configuration setting for Spring and Standalone"}, {"oid": "79b23531edc46cebc43e889d7ac4727540a72105", "committedDate": "2021-01-19 14:16:37 -0600", "message": "Syntax Fixes"}, {"oid": "de9883d363ba8b4171be5d8ad508564664f6fc90", "committedDate": "2021-01-19 14:16:37 -0600", "message": "Review comments"}, {"oid": "fe3198d3cacec95d4b064ccae7109874e58d9e96", "committedDate": "2021-01-20 10:43:28 -0600", "message": "Review Comments"}, {"oid": "bca9aca28661c202a018a1c929ea888eaf8d83c7", "committedDate": "2021-01-20 10:43:28 -0600", "message": "Review Comments"}, {"oid": "93ebb969254204bd315de860bd064ca77e70cfab", "committedDate": "2021-01-29 11:36:47 -0500", "message": "TableExportHook Binding (#1802)"}, {"oid": "dcb6336070c158b923a8e5a7ec92502ea57f36ee", "committedDate": "2021-02-09 10:45:00 -0600", "message": "Add dynamic table type (#1815)"}, {"oid": "d77f1240a3fa5abf824aea54d0533be844235359", "committedDate": "2021-02-11 10:18:49 -0600", "message": "Created new interface for dynamic configuration (#1830)"}, {"oid": "af0aad2498f81659177eff1bbcfbf49213baf7b9", "committedDate": "2021-02-15 13:19:22 -0500", "message": "Exclude Models based on Conditions (#1835)"}, {"oid": "2eb90f1b8513e246930e5419e838b3fb1f7bbb98", "committedDate": "2021-02-18 11:42:05 -0600", "message": "Integration Tests for Table Export (#1842)"}, {"oid": "e2005d6babde1a0da3ba66fc507fc6ecf5773052", "committedDate": "2021-02-22 10:34:54 -0600", "message": "Cleanup unnecessary syntax (#1854)"}, {"oid": "6c97725cec25be900fd1466f627d3d0e722ed508", "committedDate": "2021-03-09 15:24:33 -0600", "message": "Add experimental n plus1 improvement (#1876)"}, {"oid": "8274a6341e06c7201049e8e8f0a48f07bd99a0ef", "committedDate": "2021-03-10 16:38:34 -0600", "message": "Cleanup IDE warnings (#1894)"}, {"oid": "c19d8c2237e960d792dc2ef6375356433b4fac21", "committedDate": "2021-03-11 17:10:26 -0600", "message": "Classtype cleanup (#1905)"}, {"oid": "e1e07dbeabb690560754c84200b67e7a8d4d9229", "committedDate": "2021-03-22 09:06:06 -0500", "message": "Part 4 of Query Plan Optimization : Fix Metric Nesting (#1924)"}, {"oid": "ed941827e1027083367b4df9794501909279c667", "committedDate": "2021-03-25 22:55:35 -0400", "message": "diamonds to reduce duplication (#1947)"}, {"oid": "dc7a367e14c9f43b2d013f5037341055a29f0491", "committedDate": "2021-03-26 10:31:26 -0400", "message": "Issue 1929 - Address Sonar suggestions (#1925)"}, {"oid": "43598e8411d544b31d9807ded4f248e25ef334a4", "committedDate": "2021-04-01 17:32:17 -0500", "message": "Add Table Level Query Hints (#1981)"}, {"oid": "6143d108eb7b1a2250370409d5362c6722c95b23", "committedDate": "2021-04-26 16:28:58 -0500", "message": "Cleanup (#2026)"}, {"oid": "ea57369f2b8af263efd9de99bfe59cae1b88202a", "committedDate": "2021-04-29 21:02:18 -0500", "message": "Test Cases + Enable Namespace in Standalone and Spring (#2040)"}, {"oid": "0a3776bacb5809845d9a04a1263db9760f117b92", "committedDate": "2021-05-13 13:25:15 -0500", "message": "Injection Protection for parameterized metrics/dimensions (#2090)"}, {"oid": "c55eca8c6cc828610faf39d0ea62d2a0a897696b", "committedDate": "2021-08-05 09:52:57 -0500", "message": "Add simple configuration to enable verbose errors. (#2236)"}, {"oid": "fe7009353573baf0206f7bb58617db97e067f900", "committedDate": "2021-09-02 11:31:12 -0500", "message": "Refactor class scanning for quarkus (#2284)"}, {"oid": "65eaaa12fc2b805135285287d4912d2329bc676d", "committedDate": "2021-09-13 14:02:45 -0500", "message": "Add ability to map unknown exceptions to custom exceptions (#2205)"}, {"oid": "6a319f244f5b611d3702e46013c5f8c988b5a957", "committedDate": "2021-09-30 13:42:41 -0500", "message": "GraphQL Subscriptions: Part 5 (#2308)"}, {"oid": "64325a03c2d0e965e2543c3c52a9ddc0de570c03", "committedDate": "2021-10-07 14:58:50 -0500", "message": "Aggregation Store: Relaxing rules for how filter templates are compared against filter e\u2026 (#2329)"}, {"oid": "6f26ba6377010a22403698d48d49ef2a4f897fde", "committedDate": "2021-10-17 15:04:42 -0500", "message": "Changing Oath to Yahoo in Copyright messages (#2340)"}, {"oid": "5064f8a5a351b1f77b8025f68b20efc1b76d101e", "committedDate": "2021-10-19 11:25:38 -0500", "message": "Elide 6 : Refactor DataStoreTransaction Interface. (#2334)"}, {"oid": "54cdcb9fe67225cd463e1bf9357f0e1d2a42c152", "committedDate": "2021-12-02 15:11:51 -0600", "message": "HJSON Configuration Models and DataStore (#2418)"}, {"oid": "d0552c5750608391d52e3e3286469901726a7d06", "committedDate": "2022-01-28 16:02:28 -0600", "message": "Support filters on query plans (#2526)"}, {"oid": "f21f35950fe465cfbf135d06cc8ae2321a29513a", "committedDate": "2023-02-04 15:34:06 -0600", "message": "Elide 7.x (#2876)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU4MjE3Mg==", "url": "https://github.com/yahoo/elide/pull/1367#discussion_r435582172", "body": "We define the transaction cancel method four times.  Let's define this once with a static, final variable and just use that everywhere.", "bodyText": "We define the transaction cancel method four times.  Let's define this once with a static, final variable and just use that everywhere.", "bodyHTML": "<p dir=\"auto\">We define the transaction cancel method four times.  Let's define this once with a static, final variable and just use that everywhere.</p>", "author": "aklish", "createdAt": "2020-06-04T22:14:39Z", "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java", "diffHunk": "@@ -393,18 +393,19 @@ default DataStore getDataStore(MetaDataStore metaDataStore, AggregationDataStore\n      * @return AggregationDataStore object initialized.\n      */\n     default AggregationDataStore getAggregationDataStore(QueryEngine queryEngine,\n-            Optional<ElideDynamicEntityCompiler> optionalCompiler) {\n+            Optional<ElideDynamicEntityCompiler> optionalCompiler, EntityManagerFactory entityManagerFactory) {\n         AggregationDataStore aggregationDataStore = null;\n-\n         if (enableDynamicModelConfig()) {\n             Set<Class<?>> annotatedClasses = getDynamicClassesIfAvailable(optionalCompiler, FromTable.class);\n             annotatedClasses.addAll(getDynamicClassesIfAvailable(optionalCompiler, FromSubquery.class));\n-            aggregationDataStore = new AggregationDataStore(queryEngine, annotatedClasses);\n+\t    aggregationDataStore = new AggregationDataStore(\n+            \t() -> { return entityManagerFactory.createEntityManager(); },\n+                queryEngine, annotatedClass, (entityManager -> { entityManager.unwrap(Session.class).cancelQuery();}));\n         } else {\n-            aggregationDataStore = new AggregationDataStore(queryEngine);\n+            aggregationDataStore = new AggregationDataStore(\n+            \t() -> { return entityManagerFactory.createEntityManager(); },\n+                queryEngine, (entityManager -> { entityManager.unwrap(Session.class).cancelQuery();}));", "originalCommit": "b916ca0a64e0659854cd15ae47b1b35b0c1260ce", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "de929061ff81b6969c97c27683791b478c0ac1c2", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 55d936b65..b14fa3bee 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -393,18 +397,16 @@ public interface ElideStandaloneSettings {\n      * @return AggregationDataStore object initialized.\n      */\n     default AggregationDataStore getAggregationDataStore(QueryEngine queryEngine,\n-            Optional<ElideDynamicEntityCompiler> optionalCompiler, EntityManagerFactory entityManagerFactory) {\n+            Optional<ElideDynamicEntityCompiler> optionalCompiler) {\n         AggregationDataStore aggregationDataStore = null;\n         if (enableDynamicModelConfig()) {\n             Set<Class<?>> annotatedClasses = getDynamicClassesIfAvailable(optionalCompiler, FromTable.class);\n             annotatedClasses.addAll(getDynamicClassesIfAvailable(optionalCompiler, FromSubquery.class));\n \t    aggregationDataStore = new AggregationDataStore(\n-            \t() -> { return entityManagerFactory.createEntityManager(); },\n-                queryEngine, annotatedClass, (entityManager -> { entityManager.unwrap(Session.class).cancelQuery();}));\n+\t\tqueryEngine, annotatedClass);\n         } else {\n             aggregationDataStore = new AggregationDataStore(\n-            \t() -> { return entityManagerFactory.createEntityManager(); },\n-                queryEngine, (entityManager -> { entityManager.unwrap(Session.class).cancelQuery();}));\n+\t\tqueryEngine);\n         }\n     }\n \n", "next_change": {"commit": "3123771c5f0dd5b3f4684a3315f57c941aa3a1f4", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex b14fa3bee..7cb6ff25e 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -402,12 +404,13 @@ public interface ElideStandaloneSettings {\n         if (enableDynamicModelConfig()) {\n             Set<Class<?>> annotatedClasses = getDynamicClassesIfAvailable(optionalCompiler, FromTable.class);\n             annotatedClasses.addAll(getDynamicClassesIfAvailable(optionalCompiler, FromSubquery.class));\n-\t    aggregationDataStore = new AggregationDataStore(\n-\t\tqueryEngine, annotatedClass);\n+            aggregationDataStore = new AggregationDataStore(\n+                queryEngine, annotatedClasses);\n         } else {\n             aggregationDataStore = new AggregationDataStore(\n-\t\tqueryEngine);\n+                queryEngine);\n         }\n+        return aggregationDataStore;\n     }\n \n     /**\n", "next_change": {"commit": "8f1cfb480ee2db34373cee4ca35e5eef6b339a51", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 7cb6ff25e..28faa41df 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -400,17 +401,15 @@ public interface ElideStandaloneSettings {\n      */\n     default AggregationDataStore getAggregationDataStore(QueryEngine queryEngine,\n             Optional<ElideDynamicEntityCompiler> optionalCompiler) {\n-        AggregationDataStore aggregationDataStore = null;\n+        AggregationDataStore.AggregationDataStoreBuilder aggregationDataStoreBuilder = AggregationDataStore.builder()\n+                .queryEngine(queryEngine);\n+\n         if (enableDynamicModelConfig()) {\n             Set<Class<?>> annotatedClasses = getDynamicClassesIfAvailable(optionalCompiler, FromTable.class);\n             annotatedClasses.addAll(getDynamicClassesIfAvailable(optionalCompiler, FromSubquery.class));\n-            aggregationDataStore = new AggregationDataStore(\n-                queryEngine, annotatedClasses);\n-        } else {\n-            aggregationDataStore = new AggregationDataStore(\n-                queryEngine);\n+            aggregationDataStoreBuilder.dynamicCompiledClasses(annotatedClasses);\n         }\n-        return aggregationDataStore;\n+        return aggregationDataStoreBuilder.build();\n     }\n \n     /**\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "ff86c56fde9064e1719ea35660fd04c42c949662", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 55d936b65..7e9a2aeb8 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -393,19 +397,16 @@ public interface ElideStandaloneSettings {\n      * @return AggregationDataStore object initialized.\n      */\n     default AggregationDataStore getAggregationDataStore(QueryEngine queryEngine,\n-            Optional<ElideDynamicEntityCompiler> optionalCompiler, EntityManagerFactory entityManagerFactory) {\n-        AggregationDataStore aggregationDataStore = null;\n+            Optional<ElideDynamicEntityCompiler> optionalCompiler) {\n+        AggregationDataStore.AggregationDataStoreBuilder aggregationDataStoreBuilder = AggregationDataStore.builder()\n+                .queryEngine(queryEngine);\n+\n         if (enableDynamicModelConfig()) {\n             Set<Class<?>> annotatedClasses = getDynamicClassesIfAvailable(optionalCompiler, FromTable.class);\n             annotatedClasses.addAll(getDynamicClassesIfAvailable(optionalCompiler, FromSubquery.class));\n-\t    aggregationDataStore = new AggregationDataStore(\n-            \t() -> { return entityManagerFactory.createEntityManager(); },\n-                queryEngine, annotatedClass, (entityManager -> { entityManager.unwrap(Session.class).cancelQuery();}));\n-        } else {\n-            aggregationDataStore = new AggregationDataStore(\n-            \t() -> { return entityManagerFactory.createEntityManager(); },\n-                queryEngine, (entityManager -> { entityManager.unwrap(Session.class).cancelQuery();}));\n+            aggregationDataStoreBuilder.dynamicCompiledClasses(annotatedClasses);\n         }\n+        return aggregationDataStoreBuilder.build();\n     }\n \n     /**\n", "next_change": {"commit": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 7e9a2aeb8..00b641dbb 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -345,147 +285,11 @@ public interface ElideStandaloneSettings {\n     }\n \n     /**\n-     * Gets the audit logger for elide.\n+     * Gets the audit logger for elide\n      *\n      * @return Default: Slf4jLogger\n      */\n     default AuditLogger getAuditLogger() {\n         return new Slf4jLogger();\n     }\n-\n-    /**\n-     * Gets the dynamic compiler for elide.\n-     *\n-     * @return Optional ElideDynamicEntityCompiler\n-     */\n-    default Optional<ElideDynamicEntityCompiler> getDynamicCompiler() {\n-        ElideDynamicEntityCompiler dynamicEntityCompiler = null;\n-\n-        if (enableDynamicModelConfig()) {\n-            try {\n-                dynamicEntityCompiler = new ElideDynamicEntityCompiler(getDynamicConfigPath());\n-            } catch (Exception e) { // thrown by in memory compiler\n-                throw new IllegalStateException(e);\n-            }\n-        }\n-\n-        return Optional.ofNullable(dynamicEntityCompiler);\n-    }\n-\n-    /**\n-     * Gets the DataStore for elide.\n-     * @param metaDataStore MetaDataStore object.\n-     * @param aggregationDataStore AggregationDataStore object.\n-     * @param entityManagerFactory EntityManagerFactory object.\n-     * @return EntityDictionary object initialized.\n-     */\n-    default DataStore getDataStore(MetaDataStore metaDataStore, AggregationDataStore aggregationDataStore,\n-            EntityManagerFactory entityManagerFactory) {\n-        DataStore jpaDataStore = new JpaDataStore(\n-                () -> { return entityManagerFactory.createEntityManager(); },\n-                (em) -> { return new NonJtaTransaction(em, TXCANCEL); });\n-\n-        DataStore dataStore = new MultiplexManager(jpaDataStore, metaDataStore, aggregationDataStore);\n-\n-        return dataStore;\n-    }\n-\n-    /**\n-     * Gets the AggregationDataStore for elide.\n-     * @param queryEngine query engine object.\n-     * @param optionalCompiler optional dynamic compiler object.\n-     * @return AggregationDataStore object initialized.\n-     */\n-    default AggregationDataStore getAggregationDataStore(QueryEngine queryEngine,\n-            Optional<ElideDynamicEntityCompiler> optionalCompiler) {\n-        AggregationDataStore.AggregationDataStoreBuilder aggregationDataStoreBuilder = AggregationDataStore.builder()\n-                .queryEngine(queryEngine);\n-\n-        if (enableDynamicModelConfig()) {\n-            Set<Class<?>> annotatedClasses = getDynamicClassesIfAvailable(optionalCompiler, FromTable.class);\n-            annotatedClasses.addAll(getDynamicClassesIfAvailable(optionalCompiler, FromSubquery.class));\n-            aggregationDataStoreBuilder.dynamicCompiledClasses(annotatedClasses);\n-        }\n-        return aggregationDataStoreBuilder.build();\n-    }\n-\n-    /**\n-     * Gets the EntityDictionary for elide.\n-     * @param injector Service locator for web service for dependency injection.\n-     * @param optionalCompiler optional dynamic compiler object.\n-     * @return EntityDictionary object initialized.\n-     */\n-    default EntityDictionary getEntityDictionary(ServiceLocator injector,\n-            Optional<ElideDynamicEntityCompiler> optionalCompiler) {\n-        EntityDictionary dictionary = new EntityDictionary(getCheckMappings(),\n-                new Injector() {\n-                    @Override\n-                    public void inject(Object entity) {\n-                        injector.inject(entity);\n-                    }\n-\n-                    @Override\n-                    public <T> T instantiate(Class<T> cls) {\n-                        return injector.create(cls);\n-                    }\n-                });\n-\n-        dictionary.scanForSecurityChecks();\n-\n-        Set<Class<?>> annotatedSecurityClasses = getDynamicClassesIfAvailable(optionalCompiler, SecurityCheck.class);\n-\n-        dictionary.addSecurityChecks(annotatedSecurityClasses);\n-\n-        return dictionary;\n-    }\n-\n-    /**\n-     * Gets the metadatastore for elide.\n-     * @param optionalCompiler optional dynamic compiler object.\n-     * @return MetaDataStore object initialized.\n-     */\n-    default MetaDataStore getMetaDataStore(Optional<ElideDynamicEntityCompiler> optionalCompiler) {\n-        MetaDataStore metaDataStore = null;\n-\n-        if (optionalCompiler.isPresent()) {\n-            try {\n-                metaDataStore = new MetaDataStore(optionalCompiler.get());\n-            } catch (ClassNotFoundException e) {\n-                throw new IllegalStateException(e);\n-            }\n-        } else {\n-            metaDataStore = new MetaDataStore();\n-        }\n-\n-        return metaDataStore;\n-    }\n-\n-    /**\n-     * Gets the QueryEngine for elide.\n-     * @param metaDataStore MetaDataStore object.\n-     * @param entityManagerFactory EntityManagerFactory object.\n-     * @return QueryEngine object initialized.\n-     */\n-    default QueryEngine getQueryEngine(MetaDataStore metaDataStore, EntityManagerFactory entityManagerFactory) {\n-        return new SQLQueryEngine(metaDataStore, entityManagerFactory, TXCANCEL);\n-    }\n-\n-    static Set<Class<?>> getDynamicClassesIfAvailable(Optional<ElideDynamicEntityCompiler> optionalCompiler,\n-            Class<?> classz) {\n-        Set<Class<?>> annotatedClasses = new HashSet<Class<?>>();\n-\n-        if (!optionalCompiler.isPresent()) {\n-            return annotatedClasses;\n-        }\n-\n-        ElideDynamicEntityCompiler compiler = optionalCompiler.get();\n-\n-        try {\n-            annotatedClasses = compiler.findAnnotatedClasses(classz);\n-        } catch (ClassNotFoundException e) {\n-            throw new IllegalStateException(e);\n-        }\n-\n-        return annotatedClasses;\n-    }\n }\n", "next_change": {"commit": "95b3031194e0e0f2394228d6a6525a80f13fef04", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 00b641dbb..8bda402cd 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -285,11 +340,150 @@ public interface ElideStandaloneSettings {\n     }\n \n     /**\n-     * Gets the audit logger for elide\n+     * Gets the audit logger for elide.\n      *\n      * @return Default: Slf4jLogger\n      */\n     default AuditLogger getAuditLogger() {\n         return new Slf4jLogger();\n     }\n+\n+    /**\n+     * Gets the dynamic compiler for elide.\n+     *\n+     * @return Optional ElideDynamicEntityCompiler\n+     */\n+    default Optional<ElideDynamicEntityCompiler> getDynamicCompiler() {\n+        ElideDynamicEntityCompiler dynamicEntityCompiler = null;\n+\n+        if (enableDynamicModelConfig()) {\n+            try {\n+                dynamicEntityCompiler = new ElideDynamicEntityCompiler(getDynamicConfigPath());\n+            } catch (Exception e) { // thrown by in memory compiler\n+                throw new IllegalStateException(e);\n+            }\n+        }\n+\n+        return Optional.ofNullable(dynamicEntityCompiler);\n+    }\n+\n+    /**\n+     * Gets the DataStore for elide.\n+     * @param metaDataStore MetaDataStore object.\n+     * @param aggregationDataStore AggregationDataStore object.\n+     * @param entityManagerFactory EntityManagerFactory object.\n+     * @return EntityDictionary object initialized.\n+     */\n+    default DataStore getDataStore(MetaDataStore metaDataStore, AggregationDataStore aggregationDataStore,\n+            EntityManagerFactory entityManagerFactory) {\n+\n+        DataStore jpaDataStore = new JpaDataStore(\n+                () -> { return entityManagerFactory.createEntityManager(); },\n+                (em -> { return new NonJtaTransaction(em); }));\n+\n+        DataStore dataStore = new MultiplexManager(jpaDataStore, metaDataStore, aggregationDataStore);\n+\n+        return dataStore;\n+    }\n+\n+    /**\n+     * Gets the AggregationDataStore for elide.\n+     * @param queryEngine query engine object.\n+     * @param optionalCompiler optional dynamic compiler object.\n+     * @return AggregationDataStore object initialized.\n+     */\n+    default AggregationDataStore getAggregationDataStore(QueryEngine queryEngine,\n+            Optional<ElideDynamicEntityCompiler> optionalCompiler) {\n+        AggregationDataStore aggregationDataStore = null;\n+\n+        if (enableDynamicModelConfig()) {\n+            Set<Class<?>> annotatedClasses = getDynamicClassesIfAvailable(optionalCompiler, FromTable.class);\n+            annotatedClasses.addAll(getDynamicClassesIfAvailable(optionalCompiler, FromSubquery.class));\n+            aggregationDataStore = new AggregationDataStore(queryEngine, annotatedClasses);\n+        } else {\n+            aggregationDataStore = new AggregationDataStore(queryEngine);\n+        }\n+\n+        return aggregationDataStore;\n+    }\n+\n+    /**\n+     * Gets the EntityDictionary for elide.\n+     * @param injector Service locator for web service for dependency injection.\n+     * @param optionalCompiler optional dynamic compiler object.\n+     * @return EntityDictionary object initialized.\n+     */\n+    default EntityDictionary getEntityDictionary(ServiceLocator injector,\n+            Optional<ElideDynamicEntityCompiler> optionalCompiler) {\n+        EntityDictionary dictionary = new EntityDictionary(getCheckMappings(),\n+                new Injector() {\n+                    @Override\n+                    public void inject(Object entity) {\n+                        injector.inject(entity);\n+                    }\n+\n+                    @Override\n+                    public <T> T instantiate(Class<T> cls) {\n+                        return injector.create(cls);\n+                    }\n+                });\n+\n+        dictionary.scanForSecurityChecks();\n+\n+        Set<Class<?>> annotatedSecurityClasses = getDynamicClassesIfAvailable(optionalCompiler, SecurityCheck.class);\n+\n+        dictionary.addSecurityChecks(annotatedSecurityClasses);\n+\n+        return dictionary;\n+    }\n+\n+    /**\n+     * Gets the metadatastore for elide.\n+     * @param optionalCompiler optional dynamic compiler object.\n+     * @return MetaDataStore object initialized.\n+     */\n+    default MetaDataStore getMetaDataStore(Optional<ElideDynamicEntityCompiler> optionalCompiler) {\n+        MetaDataStore metaDataStore = null;\n+\n+        if (optionalCompiler.isPresent()) {\n+            try {\n+                metaDataStore = new MetaDataStore(optionalCompiler.get());\n+            } catch (ClassNotFoundException e) {\n+                throw new IllegalStateException(e);\n+            }\n+        } else {\n+            metaDataStore = new MetaDataStore();\n+        }\n+\n+        return metaDataStore;\n+    }\n+\n+    /**\n+     * Gets the QueryEngine for elide.\n+     * @param metaDataStore MetaDataStore object.\n+     * @param entityManagerFactory EntityManagerFactory object.\n+     * @return QueryEngine object initialized.\n+     */\n+    default QueryEngine getQueryEngine(MetaDataStore metaDataStore, EntityManagerFactory entityManagerFactory) {\n+        return new SQLQueryEngine(metaDataStore, entityManagerFactory, null);\n+    }\n+\n+    static Set<Class<?>> getDynamicClassesIfAvailable(Optional<ElideDynamicEntityCompiler> optionalCompiler,\n+            Class<?> classz) {\n+        Set<Class<?>> annotatedClasses = new HashSet<Class<?>>();\n+\n+        if (!optionalCompiler.isPresent()) {\n+            return annotatedClasses;\n+        }\n+\n+        ElideDynamicEntityCompiler compiler = optionalCompiler.get();\n+\n+        try {\n+            annotatedClasses = compiler.findAnnotatedClasses(classz);\n+        } catch (ClassNotFoundException e) {\n+            throw new IllegalStateException(e);\n+        }\n+\n+        return annotatedClasses;\n+    }\n }\n", "next_change": {"commit": "dcb6336070c158b923a8e5a7ec92502ea57f36ee", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 8bda402cd..c4cbeb54f 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -461,29 +457,26 @@ public interface ElideStandaloneSettings {\n     /**\n      * Gets the QueryEngine for elide.\n      * @param metaDataStore MetaDataStore object.\n-     * @param entityManagerFactory EntityManagerFactory object.\n+     * @param defaultConnectionDetails default DataSource Object and SQLDialect Object.\n+     * @param validator Optional dynamic config validator.\n+     * @param dataSourceConfiguration DataSource Configuration.\n+     * @param dbPasswordExtractor Password Extractor Implementation.\n      * @return QueryEngine object initialized.\n      */\n-    default QueryEngine getQueryEngine(MetaDataStore metaDataStore, EntityManagerFactory entityManagerFactory) {\n-        return new SQLQueryEngine(metaDataStore, entityManagerFactory, null);\n-    }\n-\n-    static Set<Class<?>> getDynamicClassesIfAvailable(Optional<ElideDynamicEntityCompiler> optionalCompiler,\n-            Class<?> classz) {\n-        Set<Class<?>> annotatedClasses = new HashSet<Class<?>>();\n-\n-        if (!optionalCompiler.isPresent()) {\n-            return annotatedClasses;\n+    default QueryEngine getQueryEngine(MetaDataStore metaDataStore, ConnectionDetails defaultConnectionDetails,\n+                    Optional<DynamicConfigValidator> validator,\n+                    DataSourceConfiguration dataSourceConfiguration, DBPasswordExtractor dbPasswordExtractor) {\n+        if (validator.isPresent()) {\n+            Map<String, ConnectionDetails> connectionDetailsMap = new HashMap<>();\n+\n+            validator.get().getElideSQLDBConfig().getDbconfigs().forEach(dbConfig -> {\n+                connectionDetailsMap.put(dbConfig.getName(),\n+                                new ConnectionDetails(\n+                                                dataSourceConfiguration.getDataSource(dbConfig, dbPasswordExtractor),\n+                                                SQLDialectFactory.getDialect(dbConfig.getDialect())));\n+            });\n+            return new SQLQueryEngine(metaDataStore, defaultConnectionDetails, connectionDetailsMap);\n         }\n-\n-        ElideDynamicEntityCompiler compiler = optionalCompiler.get();\n-\n-        try {\n-            annotatedClasses = compiler.findAnnotatedClasses(classz);\n-        } catch (ClassNotFoundException e) {\n-            throw new IllegalStateException(e);\n-        }\n-\n-        return annotatedClasses;\n+        return new SQLQueryEngine(metaDataStore, defaultConnectionDetails);\n     }\n }\n", "next_change": {"commit": "e1e07dbeabb690560754c84200b67e7a8d4d9229", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex c4cbeb54f..9e09a65a7 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -458,24 +486,24 @@ public interface ElideStandaloneSettings {\n      * Gets the QueryEngine for elide.\n      * @param metaDataStore MetaDataStore object.\n      * @param defaultConnectionDetails default DataSource Object and SQLDialect Object.\n-     * @param validator Optional dynamic config validator.\n+     * @param dynamicConfiguration Optional dynamic config.\n      * @param dataSourceConfiguration DataSource Configuration.\n      * @param dbPasswordExtractor Password Extractor Implementation.\n      * @return QueryEngine object initialized.\n      */\n     default QueryEngine getQueryEngine(MetaDataStore metaDataStore, ConnectionDetails defaultConnectionDetails,\n-                    Optional<DynamicConfigValidator> validator,\n+                    Optional<DynamicConfiguration> dynamicConfiguration,\n                     DataSourceConfiguration dataSourceConfiguration, DBPasswordExtractor dbPasswordExtractor) {\n-        if (validator.isPresent()) {\n+        if (dynamicConfiguration.isPresent()) {\n             Map<String, ConnectionDetails> connectionDetailsMap = new HashMap<>();\n \n-            validator.get().getElideSQLDBConfig().getDbconfigs().forEach(dbConfig -> {\n+            dynamicConfiguration.get().getDatabaseConfigurations().forEach(dbConfig -> {\n                 connectionDetailsMap.put(dbConfig.getName(),\n                                 new ConnectionDetails(\n                                                 dataSourceConfiguration.getDataSource(dbConfig, dbPasswordExtractor),\n                                                 SQLDialectFactory.getDialect(dbConfig.getDialect())));\n             });\n-            return new SQLQueryEngine(metaDataStore, defaultConnectionDetails, connectionDetailsMap);\n+            return new SQLQueryEngine(metaDataStore, defaultConnectionDetails, connectionDetailsMap, new HashSet<>());\n         }\n         return new SQLQueryEngine(metaDataStore, defaultConnectionDetails);\n     }\n", "next_change": {"commit": "43598e8411d544b31d9807ded4f248e25ef334a4", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 9e09a65a7..5dfabf6a2 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -503,7 +498,8 @@ public interface ElideStandaloneSettings {\n                                                 dataSourceConfiguration.getDataSource(dbConfig, dbPasswordExtractor),\n                                                 SQLDialectFactory.getDialect(dbConfig.getDialect())));\n             });\n-            return new SQLQueryEngine(metaDataStore, defaultConnectionDetails, connectionDetailsMap, new HashSet<>());\n+            return new SQLQueryEngine(metaDataStore, defaultConnectionDetails, connectionDetailsMap,\n+                    new HashSet<>(Arrays.asList(new AggregateBeforeJoinOptimizer(metaDataStore))));\n         }\n         return new SQLQueryEngine(metaDataStore, defaultConnectionDetails);\n     }\n", "next_change": {"commit": "6143d108eb7b1a2250370409d5362c6722c95b23", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 5dfabf6a2..9bf6ad35a 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -492,12 +490,12 @@ public interface ElideStandaloneSettings {\n         if (dynamicConfiguration.isPresent()) {\n             Map<String, ConnectionDetails> connectionDetailsMap = new HashMap<>();\n \n-            dynamicConfiguration.get().getDatabaseConfigurations().forEach(dbConfig -> {\n+            dynamicConfiguration.get().getDatabaseConfigurations().forEach(dbConfig ->\n                 connectionDetailsMap.put(dbConfig.getName(),\n                                 new ConnectionDetails(\n                                                 dataSourceConfiguration.getDataSource(dbConfig, dbPasswordExtractor),\n-                                                SQLDialectFactory.getDialect(dbConfig.getDialect())));\n-            });\n+                                                SQLDialectFactory.getDialect(dbConfig.getDialect())))\n+            );\n             return new SQLQueryEngine(metaDataStore, defaultConnectionDetails, connectionDetailsMap,\n                     new HashSet<>(Arrays.asList(new AggregateBeforeJoinOptimizer(metaDataStore))));\n         }\n", "next_change": {"commit": "0a3776bacb5809845d9a04a1263db9760f117b92", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 9bf6ad35a..7085a6328 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -497,7 +498,8 @@ public interface ElideStandaloneSettings {\n                                                 SQLDialectFactory.getDialect(dbConfig.getDialect())))\n             );\n             return new SQLQueryEngine(metaDataStore, defaultConnectionDetails, connectionDetailsMap,\n-                    new HashSet<>(Arrays.asList(new AggregateBeforeJoinOptimizer(metaDataStore))));\n+                    new HashSet<>(Arrays.asList(new AggregateBeforeJoinOptimizer(metaDataStore))),\n+                    new DefaultQueryValidator(metaDataStore.getMetadataDictionary()));\n         }\n         return new SQLQueryEngine(metaDataStore, defaultConnectionDetails);\n     }\n", "next_change": {"commit": "fe7009353573baf0206f7bb58617db97e067f900", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 7085a6328..3f1071c95 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -503,4 +526,12 @@ public interface ElideStandaloneSettings {\n         }\n         return new SQLQueryEngine(metaDataStore, defaultConnectionDetails);\n     }\n+\n+    /**\n+     * Get the class scanner for this Elide instance.\n+     * @return class scanner implementation.\n+     */\n+    default ClassScanner getClassScanner() {\n+        return new DefaultClassScanner();\n+    }\n }\n", "next_change": {"commit": "65eaaa12fc2b805135285287d4912d2329bc676d", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 3f1071c95..1098fa4f0 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -534,4 +536,13 @@ public interface ElideStandaloneSettings {\n     default ClassScanner getClassScanner() {\n         return new DefaultClassScanner();\n     }\n+\n+    /**\n+     * Get the error mapper for this Elide instance. By default no errors will be mapped.\n+     *\n+     * @return error mapper implementation\n+     */\n+    default ErrorMapper getErrorMapper() {\n+        return error -> null;\n+    }\n }\n", "next_change": {"commit": "6a319f244f5b611d3702e46013c5f8c988b5a957", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 1098fa4f0..e41dc47e3 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -545,4 +559,13 @@ public interface ElideStandaloneSettings {\n     default ErrorMapper getErrorMapper() {\n         return error -> null;\n     }\n+\n+    /**\n+     * Get the Jackson object mapper for Elide.\n+     *\n+     * @return object mapper.\n+     */\n+    default JsonApiMapper getObjectMapper() {\n+        return new JsonApiMapper();\n+    }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "ff86c56fde9064e1719ea35660fd04c42c949662", "message": "Merge commit", "committedDate": null}, {"oid": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "parent a14ccfbb7b558d27799b4e7b1916850519639708 author Jack (\uc815\ud658) <QubitPi@users.noreply.github.com> 1559678988 -0700 committer Aaron Klish <klish@verizonmedia.com> 1589583449 -0500"}, {"oid": "95b3031194e0e0f2394228d6a6525a80f13fef04", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5.x dynamic config standalone (#1259)"}, {"oid": "81dde7567aa8a6a00822a9a8f0bf901806a962e8", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add caching support to SQLQueryEngine (#1319)"}, {"oid": "9c897058ce0b9656bf2aef2318d0addc474f278a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "implement cancel function (#1367)"}, {"oid": "9ff0eb6bfa7f8f0135d21cf68cb1e44c5d515d91", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Enable query caching by default (#1378)"}, {"oid": "8fece2b8f1b3078ce2598ddb03dca66bb984df46", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Aggregation DataStore QueryLogger Implementation (#1448)"}, {"oid": "7c8fece25f8dddbe975f0072bf0267def2610ff4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Disable Aggregation DataStore by default (#1468)"}, {"oid": "80c38a134a938bfb74583d9efb6d0c2b80c39e61", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Cancel long running or cancelled async queries (#1447)"}, {"oid": "5c065ad65fcda862269b5e31a8b6dc5d8c828aaa", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Data export - Refactoring and Prep for using ResultStorageEngine (#1527)"}, {"oid": "ca35ad817f2fde68b2f9c39d0d4d9c9d44ebffd5", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Query Engine and Aggregation Store Changes for Multi Data Source Support (#1523)"}, {"oid": "bbbfb1a7522b64ef2f7fc42bae2c0f65491d1c04", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Update timegrain serde to return java.sql.Date instead of java.util.Date (#1552)"}, {"oid": "b8d0918e2f6f438eda12c12e58354a8cad3719dd", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Added item expiration to AggregationDataStore cache (#1564)"}, {"oid": "1933cc3eb6788be5fce69b1d97c6ae589623495f", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add slf4j query logger (#1618)"}, {"oid": "26bef0c192b549ed701287814055e5e7ac175a50", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Collapsed contrib directory into top level modules (#1670)"}, {"oid": "49e61867e840d9818993879436d5db1aad964c9a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Move data store interfaces (#1671)"}, {"oid": "911d29408bdeeb4ff8d78f2beea2417be4e7c673", "committedDate": "2020-12-11 16:20:28 -0600", "message": "cleaned up package hierarchy for elide-core (#1672)"}, {"oid": "cf1726f19ece846111b004b8f01fd1c135fa39b4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Create separate class for Analytics settings (#1669)"}, {"oid": "c14096bec256faf80e7674fbef22bccff1f955a3", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Moved contrib.dynamicconfighelpers to modelconfig package (#1676)"}, {"oid": "800ba874c21672a727aed4e1beacb294bfb5022e", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5.x MetaDataStore enable/disable flag (#1696)"}, {"oid": "bea43ef0f244ba01c2f7d4216b9f08f0ef4e83a4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Optionally compile hjson configs while running CLI (#1693)"}, {"oid": "6ce117b6c68f6a2fc484e3c9ba7b76ace9c596ff", "committedDate": "2021-01-08 17:36:00 -0600", "message": "Added baseUrl configuration setting for Spring and Standalone"}, {"oid": "79b23531edc46cebc43e889d7ac4727540a72105", "committedDate": "2021-01-19 14:16:37 -0600", "message": "Syntax Fixes"}, {"oid": "de9883d363ba8b4171be5d8ad508564664f6fc90", "committedDate": "2021-01-19 14:16:37 -0600", "message": "Review comments"}, {"oid": "fe3198d3cacec95d4b064ccae7109874e58d9e96", "committedDate": "2021-01-20 10:43:28 -0600", "message": "Review Comments"}, {"oid": "bca9aca28661c202a018a1c929ea888eaf8d83c7", "committedDate": "2021-01-20 10:43:28 -0600", "message": "Review Comments"}, {"oid": "93ebb969254204bd315de860bd064ca77e70cfab", "committedDate": "2021-01-29 11:36:47 -0500", "message": "TableExportHook Binding (#1802)"}, {"oid": "dcb6336070c158b923a8e5a7ec92502ea57f36ee", "committedDate": "2021-02-09 10:45:00 -0600", "message": "Add dynamic table type (#1815)"}, {"oid": "d77f1240a3fa5abf824aea54d0533be844235359", "committedDate": "2021-02-11 10:18:49 -0600", "message": "Created new interface for dynamic configuration (#1830)"}, {"oid": "af0aad2498f81659177eff1bbcfbf49213baf7b9", "committedDate": "2021-02-15 13:19:22 -0500", "message": "Exclude Models based on Conditions (#1835)"}, {"oid": "2eb90f1b8513e246930e5419e838b3fb1f7bbb98", "committedDate": "2021-02-18 11:42:05 -0600", "message": "Integration Tests for Table Export (#1842)"}, {"oid": "e2005d6babde1a0da3ba66fc507fc6ecf5773052", "committedDate": "2021-02-22 10:34:54 -0600", "message": "Cleanup unnecessary syntax (#1854)"}, {"oid": "6c97725cec25be900fd1466f627d3d0e722ed508", "committedDate": "2021-03-09 15:24:33 -0600", "message": "Add experimental n plus1 improvement (#1876)"}, {"oid": "8274a6341e06c7201049e8e8f0a48f07bd99a0ef", "committedDate": "2021-03-10 16:38:34 -0600", "message": "Cleanup IDE warnings (#1894)"}, {"oid": "c19d8c2237e960d792dc2ef6375356433b4fac21", "committedDate": "2021-03-11 17:10:26 -0600", "message": "Classtype cleanup (#1905)"}, {"oid": "e1e07dbeabb690560754c84200b67e7a8d4d9229", "committedDate": "2021-03-22 09:06:06 -0500", "message": "Part 4 of Query Plan Optimization : Fix Metric Nesting (#1924)"}, {"oid": "ed941827e1027083367b4df9794501909279c667", "committedDate": "2021-03-25 22:55:35 -0400", "message": "diamonds to reduce duplication (#1947)"}, {"oid": "dc7a367e14c9f43b2d013f5037341055a29f0491", "committedDate": "2021-03-26 10:31:26 -0400", "message": "Issue 1929 - Address Sonar suggestions (#1925)"}, {"oid": "43598e8411d544b31d9807ded4f248e25ef334a4", "committedDate": "2021-04-01 17:32:17 -0500", "message": "Add Table Level Query Hints (#1981)"}, {"oid": "6143d108eb7b1a2250370409d5362c6722c95b23", "committedDate": "2021-04-26 16:28:58 -0500", "message": "Cleanup (#2026)"}, {"oid": "ea57369f2b8af263efd9de99bfe59cae1b88202a", "committedDate": "2021-04-29 21:02:18 -0500", "message": "Test Cases + Enable Namespace in Standalone and Spring (#2040)"}, {"oid": "0a3776bacb5809845d9a04a1263db9760f117b92", "committedDate": "2021-05-13 13:25:15 -0500", "message": "Injection Protection for parameterized metrics/dimensions (#2090)"}, {"oid": "c55eca8c6cc828610faf39d0ea62d2a0a897696b", "committedDate": "2021-08-05 09:52:57 -0500", "message": "Add simple configuration to enable verbose errors. (#2236)"}, {"oid": "fe7009353573baf0206f7bb58617db97e067f900", "committedDate": "2021-09-02 11:31:12 -0500", "message": "Refactor class scanning for quarkus (#2284)"}, {"oid": "65eaaa12fc2b805135285287d4912d2329bc676d", "committedDate": "2021-09-13 14:02:45 -0500", "message": "Add ability to map unknown exceptions to custom exceptions (#2205)"}, {"oid": "6a319f244f5b611d3702e46013c5f8c988b5a957", "committedDate": "2021-09-30 13:42:41 -0500", "message": "GraphQL Subscriptions: Part 5 (#2308)"}, {"oid": "64325a03c2d0e965e2543c3c52a9ddc0de570c03", "committedDate": "2021-10-07 14:58:50 -0500", "message": "Aggregation Store: Relaxing rules for how filter templates are compared against filter e\u2026 (#2329)"}, {"oid": "6f26ba6377010a22403698d48d49ef2a4f897fde", "committedDate": "2021-10-17 15:04:42 -0500", "message": "Changing Oath to Yahoo in Copyright messages (#2340)"}, {"oid": "5064f8a5a351b1f77b8025f68b20efc1b76d101e", "committedDate": "2021-10-19 11:25:38 -0500", "message": "Elide 6 : Refactor DataStoreTransaction Interface. (#2334)"}, {"oid": "54cdcb9fe67225cd463e1bf9357f0e1d2a42c152", "committedDate": "2021-12-02 15:11:51 -0600", "message": "HJSON Configuration Models and DataStore (#2418)"}, {"oid": "d0552c5750608391d52e3e3286469901726a7d06", "committedDate": "2022-01-28 16:02:28 -0600", "message": "Support filters on query plans (#2526)"}, {"oid": "f21f35950fe465cfbf135d06cc8ae2321a29513a", "committedDate": "2023-02-04 15:34:06 -0600", "message": "Elide 7.x (#2876)"}]}, {"oid": "de929061ff81b6969c97c27683791b478c0ac1c2", "url": "https://github.com/yahoo/elide/commit/de929061ff81b6969c97c27683791b478c0ac1c2", "message": "Future implementation", "committedDate": "2020-06-05T18:23:32Z", "type": "commit"}, {"oid": "f13304cf0dbe305f4b321d4d1a6626186bb82370", "url": "https://github.com/yahoo/elide/commit/f13304cf0dbe305f4b321d4d1a6626186bb82370", "message": "Future implementation", "committedDate": "2020-06-05T18:24:36Z", "type": "commit"}, {"oid": "9013381cc2c3b0e5c639b3d61dba7211a7c9af33", "url": "https://github.com/yahoo/elide/commit/9013381cc2c3b0e5c639b3d61dba7211a7c9af33", "message": "Future implementation", "committedDate": "2020-06-05T18:29:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjEwMDM5Mg==", "url": "https://github.com/yahoo/elide/pull/1367#discussion_r436100392", "body": "Just return a Future here instead of the Implementation.", "bodyText": "Just return a Future here instead of the Implementation.", "bodyHTML": "<p dir=\"auto\">Just return a Future here instead of the Implementation.</p>", "author": "aklish", "createdAt": "2020-06-05T18:40:58Z", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java", "diffHunk": "@@ -163,7 +163,7 @@ private void populateMetaData(MetaDataStore metaDataStore) {\n      * @param query The query customized for a particular persistent storage or storage client\n      * @return query results\n      */\n-    public abstract QueryResult executeQuery(Query query);\n+    public abstract FutureImplementation<QueryResult> executeQuery(Query query);", "originalCommit": "9013381cc2c3b0e5c639b3d61dba7211a7c9af33", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8e97a518992f9a15ef4ce2c6a9d48fbacabaa1d0", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\nindex b96ff49c0..e2e4a3c9a 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\n", "chunk": "@@ -163,7 +163,7 @@ public abstract class QueryEngine {\n      * @param query The query customized for a particular persistent storage or storage client\n      * @return query results\n      */\n-    public abstract FutureImplementation<QueryResult> executeQuery(Query query);\n+    public abstract Future<QueryResult> executeQuery(Query query);\n \n     /**\n      * Returns the schema for a given entity class.\n", "next_change": {"commit": "da7ea017126a52888a1be9b1b4aa5c084a8700bd", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\nindex e2e4a3c9a..62ad75c19 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\n", "chunk": "@@ -163,7 +163,7 @@ public abstract class QueryEngine {\n      * @param query The query customized for a particular persistent storage or storage client\n      * @return query results\n      */\n-    public abstract Future<QueryResult> executeQuery(Query query);\n+    public abstract FutureTask<QueryResult> executeQuery(Query query);\n \n     /**\n      * Returns the schema for a given entity class.\n", "next_change": {"commit": "5094ce020f2de18f1a34294178dd857eba7af5c4", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\nindex 62ad75c19..4d6f87372 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\n", "chunk": "@@ -156,14 +151,35 @@ public abstract class QueryEngine {\n                 .forEach(metaDataStore::addTable);\n     }\n \n+    /**\n+     * Contains state necessary for query execution.\n+     */\n+    public interface Transaction extends AutoCloseable {\n+        @Override\n+        void close();\n+    }\n+\n+    public abstract Transaction beginTransaction();\n+\n     /**\n      * Executes the specified {@link Query} against a specific persistent storage, which understand the provided\n      * {@link Query}. Results may be taken from a cache, if configured.\n      *\n      * @param query The query customized for a particular persistent storage or storage client\n+     * @param transaction\n      * @return query results\n      */\n-    public abstract FutureTask<QueryResult> executeQuery(Query query);\n+    public abstract QueryResult executeQuery(Query query, Transaction transaction);\n+\n+    /**\n+     * Get a serial number or other token indicating the version of the data in the table.\n+     * No particular semantics are required, though it must change if the data changes.\n+     * If one is not available, returns null, which will prevent caching this table.\n+     * @param table The table to get version of\n+     * @param transaction The transaction to use for the lookup\n+     * @return a version token, or null if not available.\n+     */\n+    public abstract String getTableVersion(Table table, Transaction transaction);\n \n     /**\n      * Returns the schema for a given entity class.\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "ff86c56fde9064e1719ea35660fd04c42c949662", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\nindex b96ff49c0..74c41318f 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\n", "chunk": "@@ -156,14 +150,40 @@ public abstract class QueryEngine {\n                 .forEach(metaDataStore::addTable);\n     }\n \n+    /**\n+     * Contains state necessary for query execution.\n+     */\n+    public interface Transaction extends AutoCloseable {\n+        @Override\n+        void close();\n+\n+        /**\n+         * Cancels running transaction\n+         */\n+        void cancel();\n+    }\n+\n+    public abstract Transaction beginTransaction();\n+\n     /**\n      * Executes the specified {@link Query} against a specific persistent storage, which understand the provided\n      * {@link Query}. Results may be taken from a cache, if configured.\n      *\n      * @param query The query customized for a particular persistent storage or storage client\n+     * @param transaction\n      * @return query results\n      */\n-    public abstract FutureImplementation<QueryResult> executeQuery(Query query);\n+    public abstract QueryResult executeQuery(Query query, Transaction transaction);\n+\n+    /**\n+     * Get a serial number or other token indicating the version of the data in the table.\n+     * No particular semantics are required, though it must change if the data changes.\n+     * If one is not available, returns null, which will prevent caching this table.\n+     * @param table The table to get version of\n+     * @param transaction The transaction to use for the lookup\n+     * @return a version token, or null if not available.\n+     */\n+    public abstract String getTableVersion(Table table, Transaction transaction);\n \n     /**\n      * Returns the schema for a given entity class.\n", "next_change": {"commit": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\nindex 74c41318f..6c57bce21 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\n", "chunk": "@@ -150,40 +159,15 @@ public abstract class QueryEngine {\n                 .forEach(metaDataStore::addTable);\n     }\n \n-    /**\n-     * Contains state necessary for query execution.\n-     */\n-    public interface Transaction extends AutoCloseable {\n-        @Override\n-        void close();\n-\n-        /**\n-         * Cancels running transaction\n-         */\n-        void cancel();\n-    }\n-\n-    public abstract Transaction beginTransaction();\n-\n     /**\n      * Executes the specified {@link Query} against a specific persistent storage, which understand the provided\n      * {@link Query}. Results may be taken from a cache, if configured.\n      *\n-     * @param query The query customized for a particular persistent storage or storage client\n-     * @param transaction\n+     * @param query    The query customized for a particular persistent storage or storage client\n+     * @param useCache Whether to use the cache, if configured\n      * @return query results\n      */\n-    public abstract QueryResult executeQuery(Query query, Transaction transaction);\n-\n-    /**\n-     * Get a serial number or other token indicating the version of the data in the table.\n-     * No particular semantics are required, though it must change if the data changes.\n-     * If one is not available, returns null, which will prevent caching this table.\n-     * @param table The table to get version of\n-     * @param transaction The transaction to use for the lookup\n-     * @return a version token, or null if not available.\n-     */\n-    public abstract String getTableVersion(Table table, Transaction transaction);\n+    public abstract Iterable<Object> executeQuery(Query query, boolean useCache);\n \n     /**\n      * Returns the schema for a given entity class.\n", "next_change": {"commit": "3f34e76977a5a591eca1f8c00ac986562a38d250", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\nindex 6c57bce21..4308e4db1 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\n", "chunk": "@@ -163,11 +160,10 @@ public abstract class QueryEngine {\n      * Executes the specified {@link Query} against a specific persistent storage, which understand the provided\n      * {@link Query}. Results may be taken from a cache, if configured.\n      *\n-     * @param query    The query customized for a particular persistent storage or storage client\n-     * @param useCache Whether to use the cache, if configured\n+     * @param query The query customized for a particular persistent storage or storage client\n      * @return query results\n      */\n-    public abstract Iterable<Object> executeQuery(Query query, boolean useCache);\n+    public abstract QueryResult executeQuery(Query query);\n \n     /**\n      * Returns the schema for a given entity class.\n", "next_change": {"commit": "81dde7567aa8a6a00822a9a8f0bf901806a962e8", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\nindex 4308e4db1..2e7a94a11 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\n", "chunk": "@@ -156,14 +151,35 @@ public abstract class QueryEngine {\n                 .forEach(metaDataStore::addTable);\n     }\n \n+    /**\n+     * Contains state necessary for query execution.\n+     */\n+    public interface Transaction extends AutoCloseable {\n+        @Override\n+        void close();\n+    }\n+\n+    public abstract Transaction beginTransaction();\n+\n     /**\n      * Executes the specified {@link Query} against a specific persistent storage, which understand the provided\n      * {@link Query}. Results may be taken from a cache, if configured.\n      *\n      * @param query The query customized for a particular persistent storage or storage client\n+     * @param transaction\n      * @return query results\n      */\n-    public abstract QueryResult executeQuery(Query query);\n+    public abstract QueryResult executeQuery(Query query, Transaction transaction);\n+\n+    /**\n+     * Get a serial number or other token indicating the version of the data in the table.\n+     * No particular semantics are required, though it must change if the data changes.\n+     * If one is not available, returns null, which will prevent caching this table.\n+     * @param table The table to get version of\n+     * @param transaction The transaction to use for the lookup\n+     * @return a version token, or null if not available.\n+     */\n+    public abstract String getTableVersion(Table table, Transaction transaction);\n \n     /**\n      * Returns the schema for a given entity class.\n", "next_change": {"commit": "ecb1fb18fc0ca7ee3c47924bd5cdcc8d25d8f06c", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\nindex 2e7a94a11..f5d273c6b 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\n", "chunk": "@@ -187,6 +193,30 @@ public abstract class QueryEngine {\n      * @return The schema that represents the provided entity.\n      */\n     public Table getTable(String classAlias) {\n-        return tables.get(classAlias);\n+        return tables\n+                    .entrySet()\n+                    .stream()\n+                    .filter(entry -> entry.getKey().getName().equalsIgnoreCase(classAlias))\n+                    .map(entry -> entry.getValue())\n+                    .findFirst()\n+                    .orElse(null);\n     }\n+\n+    /**\n+     * Returns the schema for a given entity class.\n+     * @param tableId Composite Id for the table\n+     * @return The schema that represents the provided entity.\n+     */\n+    public Table getTable(TableId tableId) {\n+        return tables.get(tableId);\n+    }\n+\n+    /**\n+     * Returns the actual query string(s) that would be executed for the input {@link Query}.\n+     *\n+     * @param query The query customized for a particular persistent storage or storage client.\n+     * @return List of SQL string(s) corresponding to the given query.\n+     */\n+    public abstract List<String> explain(Query query);\n+\n }\n", "next_change": {"commit": "0a3776bacb5809845d9a04a1263db9760f117b92", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\nindex f5d273c6b..99f07d6d3 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\n", "chunk": "@@ -219,4 +232,5 @@ public abstract class QueryEngine {\n      */\n     public abstract List<String> explain(Query query);\n \n+    public abstract QueryValidator getValidator();\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "ff86c56fde9064e1719ea35660fd04c42c949662", "message": "Merge commit", "committedDate": null}, {"oid": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "parent a14ccfbb7b558d27799b4e7b1916850519639708 author Jack (\uc815\ud658) <QubitPi@users.noreply.github.com> 1559678988 -0700 committer Aaron Klish <klish@verizonmedia.com> 1589583449 -0500"}, {"oid": "3f34e76977a5a591eca1f8c00ac986562a38d250", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Introduce QueryResult class for QueryEngine caching (#1333)"}, {"oid": "81dde7567aa8a6a00822a9a8f0bf901806a962e8", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add caching support to SQLQueryEngine (#1319)"}, {"oid": "9c897058ce0b9656bf2aef2318d0addc474f278a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "implement cancel function (#1367)"}, {"oid": "8fece2b8f1b3078ce2598ddb03dca66bb984df46", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Aggregation DataStore QueryLogger Implementation (#1448)"}, {"oid": "61ac33e39ba94617114273238754be32b006735b", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add SQLDialect implementations and tests. (#1487)"}, {"oid": "ecb1fb18fc0ca7ee3c47924bd5cdcc8d25d8f06c", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Include db connection name as Id for Table (#1503)"}, {"oid": "7024083c38335717492d4beb01460b80a0899a78", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Revert composite id changes for Table (#1577)"}, {"oid": "df3ea922a7550ec35585ce289e1d74101c4f28e4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5: Decouple query and metadata (#1585)"}, {"oid": "e140eebdb89d74eb0f16fc8b157c6223cbb07992", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Refactor dbconnection (#1622)"}, {"oid": "df24aa71c283e12d2489982300580cfa80c9755c", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Migrate metadatacalls to metadata store (#1624)"}, {"oid": "e1c47d8a0c7d2703e602ed1c2cdc975c25166cc3", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Remove deprecated code (#1647)"}, {"oid": "49e61867e840d9818993879436d5db1aad964c9a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Move data store interfaces (#1671)"}, {"oid": "911d29408bdeeb4ff8d78f2beea2417be4e7c673", "committedDate": "2020-12-11 16:20:28 -0600", "message": "cleaned up package hierarchy for elide-core (#1672)"}, {"oid": "f88b63d286d73d3774558b24f16aef0bb0be6d1a", "committedDate": "2021-01-19 14:16:37 -0600", "message": "Initial Commit for Type changes"}, {"oid": "0e85109b24e6637f46b73d9722fc08cc01cfa639", "committedDate": "2021-03-29 13:04:32 -0500", "message": "elide-datastore-aggregation - fix javadoc build warning (#1963)"}, {"oid": "43598e8411d544b31d9807ded4f248e25ef334a4", "committedDate": "2021-04-01 17:32:17 -0500", "message": "Add Table Level Query Hints (#1981)"}, {"oid": "53b23330ff54b12041e530a931329986ddd3e454", "committedDate": "2021-04-28 13:29:43 -0400", "message": "Aggregation Store: Namespace Metadata changes (#2037)"}, {"oid": "256ca8e18dbae4b8ff6c1adbd8e37b236ef5e575", "committedDate": "2021-05-03 11:58:57 -0400", "message": "Refactor Column Projections (#2049)"}, {"oid": "d2843b24f4a1ed35907726ff62f09049ce37d081", "committedDate": "2021-05-06 10:54:37 -0500", "message": "Optional flow (#2069)"}, {"oid": "1bb35bea711c420f00cfd97596dfa9177e15277e", "committedDate": "2021-05-10 14:36:06 -0500", "message": "Populating namespaces in metadatastore (#2071)"}, {"oid": "e722d3e2ac0acf976920871dd0a52a14f2cfd545", "committedDate": "2021-05-10 15:19:00 -0500", "message": "Refactor tableSource for Column and Argument (#2075)"}, {"oid": "0a3776bacb5809845d9a04a1263db9760f117b92", "committedDate": "2021-05-13 13:25:15 -0500", "message": "Injection Protection for parameterized metrics/dimensions (#2090)"}, {"oid": "c3d71ad98a89137ed78e86deb091897836203f75", "committedDate": "2021-05-17 15:47:39 -0500", "message": "Propogate client query arguments to join tables (#2095)"}, {"oid": "6d341a829a16ea8c1dc0fb2815e320601545467d", "committedDate": "2021-05-18 20:30:21 -0400", "message": "Parse table and column arguments in Expression parser (#2105)"}, {"oid": "e1c93d9f34829c4ee142a4919b5fde26502eaa11", "committedDate": "2021-05-19 17:24:06 -0400", "message": "Verify table arguments. (#2110)"}, {"oid": "830b9f2a997eefcd677090875bede2e21e19f1f4", "committedDate": "2021-10-20 14:48:56 -0500", "message": "Support 'hidden' flag for analytic models and fields. (#2357)"}, {"oid": "f21f35950fe465cfbf135d06cc8ae2321a29513a", "committedDate": "2023-02-04 15:34:06 -0600", "message": "Elide 7.x (#2876)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjEwMDc3MA==", "url": "https://github.com/yahoo/elide/pull/1367#discussion_r436100770", "body": "You could make this an inner class of the SQLQueryEngine - not abstract - and it can just call the TransactionCancel member.", "bodyText": "You could make this an inner class of the SQLQueryEngine - not abstract - and it can just call the TransactionCancel member.", "bodyHTML": "<p dir=\"auto\">You could make this an inner class of the SQLQueryEngine - not abstract - and it can just call the TransactionCancel member.</p>", "author": "aklish", "createdAt": "2020-06-05T18:41:39Z", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/FutureImplementation.java", "diffHunk": "@@ -0,0 +1,21 @@\n+/*\n+ * Copyright 2020, Yahoo Inc.\n+ * Licensed under the Apache License, Version 2.0\n+ * See LICENSE file in project root for terms.\n+ */\n+\n+import com.yahoo.elide.datastores.aggregation.query.QueryResult;\n+import com.yahoo.elide.datastores.aggregation.queryengines.sql.query.SQLQueryEngine;\n+\n+import java.util.concurrent.Future;\n+\n+public abstract class FutureImplementation implements Future<QueryResult> {", "originalCommit": "9013381cc2c3b0e5c639b3d61dba7211a7c9af33", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8e97a518992f9a15ef4ce2c6a9d48fbacabaa1d0", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/FutureImplementation.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/FutureImplementation.java\ndeleted file mode 100644\nindex 66439cf94..000000000\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/FutureImplementation.java\n+++ /dev/null\n", "chunk": "@@ -1,21 +0,0 @@\n-/*\n- * Copyright 2020, Yahoo Inc.\n- * Licensed under the Apache License, Version 2.0\n- * See LICENSE file in project root for terms.\n- */\n-\n-import com.yahoo.elide.datastores.aggregation.query.QueryResult;\n-import com.yahoo.elide.datastores.aggregation.queryengines.sql.query.SQLQueryEngine;\n-\n-import java.util.concurrent.Future;\n-\n-public abstract class FutureImplementation implements Future<QueryResult> {\n-\n-    /**\n-     * Cancels transaction\n-     */\n-    @Override\n-    public boolean cancel(boolean mayInterruptIfRunning) {\n-        SQLQueryEngine.cancel();\n-    }\n-}\n", "next_change": null}]}, "revised_code_in_main": {"commit": "ff86c56fde9064e1719ea35660fd04c42c949662", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/FutureImplementation.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/FutureImplementation.java\ndeleted file mode 100644\nindex 66439cf94..000000000\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/FutureImplementation.java\n+++ /dev/null\n", "chunk": "@@ -1,21 +0,0 @@\n-/*\n- * Copyright 2020, Yahoo Inc.\n- * Licensed under the Apache License, Version 2.0\n- * See LICENSE file in project root for terms.\n- */\n-\n-import com.yahoo.elide.datastores.aggregation.query.QueryResult;\n-import com.yahoo.elide.datastores.aggregation.queryengines.sql.query.SQLQueryEngine;\n-\n-import java.util.concurrent.Future;\n-\n-public abstract class FutureImplementation implements Future<QueryResult> {\n-\n-    /**\n-     * Cancels transaction\n-     */\n-    @Override\n-    public boolean cancel(boolean mayInterruptIfRunning) {\n-        SQLQueryEngine.cancel();\n-    }\n-}\n", "next_change": null}]}, "commits_in_main": [{"oid": "ff86c56fde9064e1719ea35660fd04c42c949662", "message": "Merge commit", "committedDate": null}]}, {"oid": "8e97a518992f9a15ef4ce2c6a9d48fbacabaa1d0", "url": "https://github.com/yahoo/elide/commit/8e97a518992f9a15ef4ce2c6a9d48fbacabaa1d0", "message": "Future implementation", "committedDate": "2020-06-05T19:56:20Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE3NDU4MA==", "url": "https://github.com/yahoo/elide/pull/1367#discussion_r436174580", "body": "So this line creates a new session and then immediately cancels it.  We want to close the existing session - not a new one.", "bodyText": "So this line creates a new session and then immediately cancels it.  We want to close the existing session - not a new one.", "bodyHTML": "<p dir=\"auto\">So this line creates a new session and then immediately cancels it.  We want to close the existing session - not a new one.</p>", "author": "aklish", "createdAt": "2020-06-05T21:35:28Z", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java", "diffHunk": "@@ -289,4 +291,28 @@ private SQLQuery toPageTotalSQL(SQLQuery sql) {\n     public static String getClassAlias(Class<?> entityClass) {\n         return getTypeAlias(entityClass);\n     }\n+\n+    /**\n+     * Functional interface for describing a method to supply JpaTransaction.\n+     */\n+    @FunctionalInterface\n+    public interface TransactionCancel {\n+        public void cancel(EntityManager entityManager);\n+    }\n+  \n+    public class FutureImplementation implements Future<QueryResult> {\n+        private final TransactionCancel transactionCancel;\n+\tprivate final EntityManagerFactory entityManagerFactory;\n+        /**\n+\t * Cancels transaction\n+         */\n+    \t@Override\n+\tprotected FutureImplementation(EntityManagerFactory entityManagerFactory, TransactionCancel transactionCancel) {\n+\t    this.transactionCancel = transactionCancel;\n+\t    this.entityManagerFactory = entityManagerFactory;\n+\t}\n+    \tpublic boolean cancel(boolean mayInterruptIfRunning) {\n+            transactionCancel.cancel(entityManagerFactory.createEntityManager());", "originalCommit": "8e97a518992f9a15ef4ce2c6a9d48fbacabaa1d0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f08727cf16a6ab9570bf506573ee9b5995ecb910", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex b74657044..f0e721383 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -300,19 +309,56 @@ public class SQLQueryEngine extends QueryEngine {\n         public void cancel(EntityManager entityManager);\n     }\n   \n-    public class FutureImplementation implements Future<QueryResult> {\n-        private final TransactionCancel transactionCancel;\n-\tprivate final EntityManagerFactory entityManagerFactory;\n+    public class QueryResultFuture<QueryResult> implements Future<QueryResult> {\n         /**\n-\t * Cancels transaction\n+\t * Future Implementation of Query Result\n          */\n-    \t@Override\n-\tprotected FutureImplementation(EntityManagerFactory entityManagerFactory, TransactionCancel transactionCancel) {\n-\t    this.transactionCancel = transactionCancel;\n-\t    this.entityManagerFactory = entityManagerFactory;\n+\tprivate static enum RESULT {RUNNING, CANCELLED}\n+\tfinal CountDownLatch countDownLatch = new CountDownLatch(1);\n+\tprivate RESUlT Result = RESULT.RUNNING;\t\n+\tprivate QueryResult queryResult;\t\n+\t\n+\tpublic QueryResultFuture() {\n+\t     this.queryResult = queryResult;\n+\t     countDownLatch.countDown();\n \t}\n+\n+        @Override\n+        public QueryResult get() {\n+            countDownLatch.await();\n+            return queryResult;\n+\t}\n+\t\n+\t@Override\n     \tpublic boolean cancel(boolean mayInterruptIfRunning) {\n-            transactionCancel.cancel(entityManagerFactory.createEntityManager());\n-    \t}    \t\n+\t    try {\n+            \ttransactionCancel.cancel(entityManager);\n+\t\tResult = RESULT.CANCELLED;\t\n+            \treturn true;\n+            }\n+\t    catch (Exception e) {\n+\t    \tthrow e;\n+            }\n+    \t}\n+\t\n+\t@Override\n+\tboolean isCancelled() {\n+\t    return Result == RESULT.CANCELLED;\n+\t}\n+\n+\t@Override\n+\tboolean isDone() {\n+\t    return true;\n+\t}\n+\n+\t@Override\n+\t@Override\n+\tpublic QueryResult get(long timeout, TimeUnit unit) throws TimeoutException {\n+\t    if (countDownLatch.await(timeout, unit)) {\n+                return queryResult;\n+            } else {\n+                throw new TimeoutException();\n+            }\n+\t}\n     }\n }\n", "next_change": {"commit": "4e694992ae92fcce5f385921b2180c2c8a5458e4", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex f0e721383..bbff37c6e 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -309,56 +311,18 @@ public class SQLQueryEngine extends QueryEngine {\n         public void cancel(EntityManager entityManager);\n     }\n   \n-    public class QueryResultFuture<QueryResult> implements Future<QueryResult> {\n+    public class QueryResultFuture<V> extends FutureTask<V> {\n         /**\n-\t * Future Implementation of Query Result\n+\t * FutureTask Implementation of Query Result\n          */\n-\tprivate static enum RESULT {RUNNING, CANCELLED}\n-\tfinal CountDownLatch countDownLatch = new CountDownLatch(1);\n-\tprivate RESUlT Result = RESULT.RUNNING;\t\n-\tprivate QueryResult queryResult;\t\n \t\n-\tpublic QueryResultFuture() {\n-\t     this.queryResult = queryResult;\n-\t     countDownLatch.countDown();\n+\tpublic QueryResultFuture(Callable<V> callable) {\n+\t    super(callable);     \n \t}\n \n-        @Override\n-        public QueryResult get() {\n-            countDownLatch.await();\n-            return queryResult;\n-\t}\n-\t\n-\t@Override\n-    \tpublic boolean cancel(boolean mayInterruptIfRunning) {\n-\t    try {\n-            \ttransactionCancel.cancel(entityManager);\n-\t\tResult = RESULT.CANCELLED;\t\n-            \treturn true;\n-            }\n-\t    catch (Exception e) {\n-\t    \tthrow e;\n-            }\n-    \t}\n-\t\n \t@Override\n-\tboolean isCancelled() {\n-\t    return Result == RESULT.CANCELLED;\n-\t}\n-\n-\t@Override\n-\tboolean isDone() {\n-\t    return true;\n-\t}\n-\n-\t@Override\n-\t@Override\n-\tpublic QueryResult get(long timeout, TimeUnit unit) throws TimeoutException {\n-\t    if (countDownLatch.await(timeout, unit)) {\n-                return queryResult;\n-            } else {\n-                throw new TimeoutException();\n-            }\n-\t}\n+    \tpublic boolean cancel(TransactionCancel transactionCancel, EntityManager entityManager) {\n+            transactionCancel.cancel(entityManager);\n+    \t}\t\n     }\n }\n", "next_change": {"commit": "b69bb59dc6373110fb697c9f912cc73857df7c26", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex bbff37c6e..f1ff331b2 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -314,15 +310,15 @@ public class SQLQueryEngine extends QueryEngine {\n     public class QueryResultFuture<V> extends FutureTask<V> {\n         /**\n \t * FutureTask Implementation of Query Result\n-         */\n-\t\n+         */\t\n \tpublic QueryResultFuture(Callable<V> callable) {\n \t    super(callable);     \n \t}\n \n \t@Override\n-    \tpublic boolean cancel(TransactionCancel transactionCancel, EntityManager entityManager) {\n+    \tpublic boolean cancel(boolean mayInterruptIfRunning) {\n             transactionCancel.cancel(entityManager);\n+\t    return true;\n     \t}\t\n     }\n }\n", "next_change": {"commit": "8064be350bc30ffb58923074f4a08d143f3c21c5", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex f1ff331b2..c16063a2a 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -318,7 +319,7 @@ public class SQLQueryEngine extends QueryEngine {\n \t@Override\n     \tpublic boolean cancel(boolean mayInterruptIfRunning) {\n             transactionCancel.cancel(entityManager);\n-\t    return true;\n+\t    return super.cancel(true);\n     \t}\t\n     }\n }\n", "next_change": {"commit": "9a6dbc1186dfd5231d531fe04795a27b68f4fcd2", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex c16063a2a..233d980dc 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -316,10 +315,10 @@ public class SQLQueryEngine extends QueryEngine {\n \t    super(callable);     \n \t}\n \n-\t@Override\n-    \tpublic boolean cancel(boolean mayInterruptIfRunning) {\n+        @Override\n+        public boolean cancel(boolean mayInterruptIfRunning) {\n             transactionCancel.cancel(entityManager);\n-\t    return super.cancel(true);\n-    \t}\t\n+            return super.cancel(true);\n+        }\t\n     }\n }\n", "next_change": {"commit": "07810b7bffcba1c415accbeada4401a05592beca", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 233d980dc..46ed8f487 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -309,16 +309,16 @@ public class SQLQueryEngine extends QueryEngine {\n \n     public class QueryResultFuture<V> extends FutureTask<V> {\n         /**\n-\t * FutureTask Implementation of Query Result\n-         */\t\n-\tpublic QueryResultFuture(Callable<V> callable) {\n-\t    super(callable);     \n-\t}\n+         * FutureTask Implementation of Query Result.\n+         */\n+         public QueryResultFuture(Callable<V> callable) {\n+             super(callable);\n+         }\n \n         @Override\n         public boolean cancel(boolean mayInterruptIfRunning) {\n             transactionCancel.cancel(entityManager);\n             return super.cancel(true);\n-        }\t\n+        }\n     }\n }\n", "next_change": {"commit": "8f1cfb480ee2db34373cee4ca35e5eef6b339a51", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 46ed8f487..b63187a63 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -306,19 +343,4 @@ public class SQLQueryEngine extends QueryEngine {\n     public interface TransactionCancel {\n         public void cancel(EntityManager entityManager);\n     }\n-\n-    public class QueryResultFuture<V> extends FutureTask<V> {\n-        /**\n-         * FutureTask Implementation of Query Result.\n-         */\n-         public QueryResultFuture(Callable<V> callable) {\n-             super(callable);\n-         }\n-\n-        @Override\n-        public boolean cancel(boolean mayInterruptIfRunning) {\n-            transactionCancel.cancel(entityManager);\n-            return super.cancel(true);\n-        }\n-    }\n }\n", "next_change": {"commit": "5094ce020f2de18f1a34294178dd857eba7af5c4", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex b63187a63..5958134d7 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -343,4 +344,4 @@ public class SQLQueryEngine extends QueryEngine {\n     public interface TransactionCancel {\n         public void cancel(EntityManager entityManager);\n     }\n-}\n+}\n\\ No newline at end of file\n", "next_change": {"commit": "d7556cb189b6e83070942c10bdaf33054ecc0f71", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 5958134d7..869de2d9c 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -336,12 +337,4 @@ public class SQLQueryEngine extends QueryEngine {\n     public static String getClassAlias(Class<?> entityClass) {\n         return getTypeAlias(entityClass);\n     }\n-\n-    /**\n-     * Functional interface for describing a method to supply JpaTransaction.\n-     */\n-    @FunctionalInterface\n-    public interface TransactionCancel {\n-        public void cancel(EntityManager entityManager);\n-    }\n-}\n\\ No newline at end of file\n+}\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "ff86c56fde9064e1719ea35660fd04c42c949662", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex b74657044..869de2d9c 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -291,28 +337,4 @@ public class SQLQueryEngine extends QueryEngine {\n     public static String getClassAlias(Class<?> entityClass) {\n         return getTypeAlias(entityClass);\n     }\n-\n-    /**\n-     * Functional interface for describing a method to supply JpaTransaction.\n-     */\n-    @FunctionalInterface\n-    public interface TransactionCancel {\n-        public void cancel(EntityManager entityManager);\n-    }\n-  \n-    public class FutureImplementation implements Future<QueryResult> {\n-        private final TransactionCancel transactionCancel;\n-\tprivate final EntityManagerFactory entityManagerFactory;\n-        /**\n-\t * Cancels transaction\n-         */\n-    \t@Override\n-\tprotected FutureImplementation(EntityManagerFactory entityManagerFactory, TransactionCancel transactionCancel) {\n-\t    this.transactionCancel = transactionCancel;\n-\t    this.entityManagerFactory = entityManagerFactory;\n-\t}\n-    \tpublic boolean cancel(boolean mayInterruptIfRunning) {\n-            transactionCancel.cancel(entityManagerFactory.createEntityManager());\n-    \t}    \t\n-    }\n }\n", "next_change": {"commit": "ca35ad817f2fde68b2f9c39d0d4d9c9d44ebffd5", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 869de2d9c..9c79e5997 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -337,4 +417,66 @@ public class SQLQueryEngine extends QueryEngine {\n     public static String getClassAlias(Class<?> entityClass) {\n         return getTypeAlias(entityClass);\n     }\n+\n+    private static boolean returnPageTotals(Pagination pagination) {\n+        return pagination != null && pagination.returnPageTotals();\n+    }\n+\n+    /**\n+     * Gets required ConnectionDetails.\n+     * @param connectionName Connection Name.\n+     * @return ConnectionDetails ConnectionDetails Object for this connection.\n+     */\n+    private ConnectionDetails getConnectionDetails(String connectionName) {\n+        if (connectionName == null || connectionName.trim().isEmpty()) {\n+            return defaultConnectionDetails;\n+        } else {\n+            return Optional.ofNullable(connectionDetailsMap.get(connectionName))\n+                            .orElseThrow(() -> new IllegalStateException(\n+                                            \"ConnectionDetails undefined for DB Connection Name: \" + connectionName));\n+        }\n+    }\n+\n+    /**\n+     * Cancels NamedParamPreparedStatement, hides and logs any SQLException.\n+     * @param stmt NamedParamPreparedStatement to cancel.\n+     */\n+    private static void cancelSoftly(NamedParamPreparedStatement stmt) {\n+        try {\n+            if (stmt != null && !stmt.isClosed()) {\n+                stmt.cancel();\n+            }\n+        } catch (SQLException e) {\n+            log.error(\"Exception encountered during cancel statement.\", e);\n+        }\n+    }\n+\n+    /**\n+     * Cancels and Closes NamedParamPreparedStatement, hides and logs any SQLException.\n+     * @param stmt NamedParamPreparedStatement to close.\n+     */\n+    private static void cancelAndCloseSoftly(NamedParamPreparedStatement stmt) {\n+        cancelSoftly(stmt);\n+        try {\n+            if (stmt != null && !stmt.isClosed()) {\n+                stmt.close();\n+            }\n+        } catch (SQLException e) {\n+            log.error(\"Exception encountered during close statement.\", e);\n+        }\n+    }\n+\n+    /**\n+     * Closes Connection, hides and logs any SQLException.\n+     * @param conn Connection to close.\n+     */\n+    private static void closeSoftly(Connection conn) {\n+        try {\n+            if (conn != null) {\n+                conn.close();\n+            }\n+        } catch (SQLException e) {\n+            log.error(\"Exception encountered during close connection.\", e);\n+        }\n+    }\n }\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "ff86c56fde9064e1719ea35660fd04c42c949662", "message": "Merge commit", "committedDate": null}, {"oid": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "parent a14ccfbb7b558d27799b4e7b1916850519639708 author Jack (\uc815\ud658) <QubitPi@users.noreply.github.com> 1559678988 -0700 committer Aaron Klish <klish@verizonmedia.com> 1589583449 -0500"}, {"oid": "3f34e76977a5a591eca1f8c00ac986562a38d250", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Introduce QueryResult class for QueryEngine caching (#1333)"}, {"oid": "81dde7567aa8a6a00822a9a8f0bf901806a962e8", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add caching support to SQLQueryEngine (#1319)"}, {"oid": "9c897058ce0b9656bf2aef2318d0addc474f278a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "implement cancel function (#1367)"}, {"oid": "8fece2b8f1b3078ce2598ddb03dca66bb984df46", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Aggregation DataStore QueryLogger Implementation (#1448)"}, {"oid": "61ac33e39ba94617114273238754be32b006735b", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add SQLDialect implementations and tests. (#1487)"}, {"oid": "ca35ad817f2fde68b2f9c39d0d4d9c9d44ebffd5", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Query Engine and Aggregation Store Changes for Multi Data Source Support (#1523)"}, {"oid": "11e5083ef0755c62f86c287cf73c376d6c8b8c40", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Refactor query plan (#1579)"}, {"oid": "df3ea922a7550ec35585ce289e1d74101c4f28e4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5: Decouple query and metadata (#1585)"}, {"oid": "dc254e6a99100c21abd94eac3f0252bb9c5029df", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Support nested queries (#1591)"}, {"oid": "9057572200f962b7735270005cd9b51c368c0a0b", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5: Sketch out support for nested query plans. (#1594)"}, {"oid": "7daf58155ba6980d10a0171f72ea32a05af1ac6a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Added SQL Generation Tests for Nested Aggregation Queries (#1602)"}, {"oid": "e140eebdb89d74eb0f16fc8b157c6223cbb07992", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Refactor dbconnection (#1622)"}, {"oid": "df24aa71c283e12d2489982300580cfa80c9755c", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Migrate metadatacalls to metadata store (#1624)"}, {"oid": "c6f23dd421705b7a93be8823310143e6b631c7e4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Quote all identifiers in SQL query (#1621)"}, {"oid": "1dac58a1a989bbc3db52e87b77d19a5077c5ea5b", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Attempt to run explain query tests against H2 in compliance mode against targeted databases (#1633)"}, {"oid": "49e61867e840d9818993879436d5db1aad964c9a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Move data store interfaces (#1671)"}, {"oid": "911d29408bdeeb4ff8d78f2beea2417be4e7c673", "committedDate": "2020-12-11 16:20:28 -0600", "message": "cleaned up package hierarchy for elide-core (#1672)"}, {"oid": "c14096bec256faf80e7674fbef22bccff1f955a3", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Moved contrib.dynamicconfighelpers to modelconfig package (#1676)"}, {"oid": "bea43ef0f244ba01c2f7d4216b9f08f0ef4e83a4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Optionally compile hjson configs while running CLI (#1693)"}, {"oid": "172f3833738466c50648a2f4c3644eae46706aa2", "committedDate": "2021-01-12 15:51:35 -0600", "message": "Issue#1750 Fix SQL query generation for record count"}, {"oid": "979561b9129a15723594d23fbef0c584788ce100", "committedDate": "2021-01-19 10:59:36 -0600", "message": "add druid dialect with new pagination query structure"}, {"oid": "ccbcbcb65f7cae54ede4cd5242ecb19a8f84368c", "committedDate": "2021-01-19 10:59:36 -0600", "message": "change all count distinct queries to group by query for pagination"}, {"oid": "3f79dc112b211df777ab5fee15c27671c0f1bcdf", "committedDate": "2021-01-19 10:59:36 -0600", "message": "return null if no dimension projection is available."}, {"oid": "beb2cdfa0cd863756e7b095c0a58c733e484a944", "committedDate": "2021-01-19 10:59:36 -0600", "message": "address comments"}, {"oid": "17152126cb2f014076efd84ac3fd3be233f25c64", "committedDate": "2021-01-19 10:59:36 -0600", "message": "fix null pointer exception and add test case"}, {"oid": "f88b63d286d73d3774558b24f16aef0bb0be6d1a", "committedDate": "2021-01-19 14:16:37 -0600", "message": "Initial Commit for Type changes"}, {"oid": "ba73bc2a5617fed8feeee5b419a0f0808081628f", "committedDate": "2021-02-04 11:31:56 -0600", "message": "Elide 5 Agg Store: Multiple time grains (#1806)"}, {"oid": "8274a6341e06c7201049e8e8f0a48f07bd99a0ef", "committedDate": "2021-03-10 16:38:34 -0600", "message": "Cleanup IDE warnings (#1894)"}, {"oid": "c19d8c2237e960d792dc2ef6375356433b4fac21", "committedDate": "2021-03-11 17:10:26 -0600", "message": "Classtype cleanup (#1905)"}, {"oid": "212dcab497c321f67b66d619748b023201f2c819", "committedDate": "2021-03-16 10:13:31 -0500", "message": "Remove source from ColumnProjection (#1918)"}, {"oid": "e1e07dbeabb690560754c84200b67e7a8d4d9229", "committedDate": "2021-03-22 09:06:06 -0500", "message": "Part 4 of Query Plan Optimization : Fix Metric Nesting (#1924)"}, {"oid": "ed941827e1027083367b4df9794501909279c667", "committedDate": "2021-03-25 22:55:35 -0400", "message": "diamonds to reduce duplication (#1947)"}, {"oid": "5aa899ebbc6af4bfb538a4c04deef2218348a178", "committedDate": "2021-03-26 01:03:25 -0400", "message": "Issue 1929 - define function as lambda (#1945)"}, {"oid": "dc7a367e14c9f43b2d013f5037341055a29f0491", "committedDate": "2021-03-26 10:31:26 -0400", "message": "Issue 1929 - Address Sonar suggestions (#1925)"}, {"oid": "cd008a45ad379004b92c5114150016027aa07b80", "committedDate": "2021-03-26 10:35:48 -0500", "message": "Query plan optimizer phase5 (#1961)"}, {"oid": "234905d972c491934ce3774771c9733193b45007", "committedDate": "2021-04-01 10:20:16 -0500", "message": "Phase 6: Query Optimization - Calcite parser (#1976)"}, {"oid": "7a0b59711bb5e269afbc6b15426a8aff94a5e447", "committedDate": "2021-04-01 14:51:05 -0500", "message": "Removed QueryPlanResolver.  Replaced it with MetricProjectionMaker.  Small fix to Calcite parser builder to use the SQL conformance of the underlying dialect (#1980)"}, {"oid": "43598e8411d544b31d9807ded4f248e25ef334a4", "committedDate": "2021-04-01 17:32:17 -0500", "message": "Add Table Level Query Hints (#1981)"}, {"oid": "89e96b0bb45da69b08e6c8df6d8d7d23090eec37", "committedDate": "2021-04-22 17:56:53 -0400", "message": "Resolution using Table Context (#2004)"}, {"oid": "53b23330ff54b12041e530a931329986ddd3e454", "committedDate": "2021-04-28 13:29:43 -0400", "message": "Aggregation Store: Namespace Metadata changes (#2037)"}, {"oid": "256ca8e18dbae4b8ff6c1adbd8e37b236ef5e575", "committedDate": "2021-05-03 11:58:57 -0400", "message": "Refactor Column Projections (#2049)"}, {"oid": "d21f942a219ba7f32757f334d7e61c78e126d6be", "committedDate": "2021-05-04 15:24:11 -0500", "message": "Use only queried column args & default args for logical column expansion (#2054)"}, {"oid": "d2843b24f4a1ed35907726ff62f09049ce37d081", "committedDate": "2021-05-06 10:54:37 -0500", "message": "Optional flow (#2069)"}, {"oid": "1bb35bea711c420f00cfd97596dfa9177e15277e", "committedDate": "2021-05-10 14:36:06 -0500", "message": "Populating namespaces in metadatastore (#2071)"}, {"oid": "0a3776bacb5809845d9a04a1263db9760f117b92", "committedDate": "2021-05-13 13:25:15 -0500", "message": "Injection Protection for parameterized metrics/dimensions (#2090)"}, {"oid": "35e214dd718e164e30529eff4feab4d5fcd62d27", "committedDate": "2021-05-13 16:25:00 -0400", "message": "Resolve arguments in FromSubquery (#2089)"}, {"oid": "bf246b21912e4b299e4330089198ba2eee01fbec", "committedDate": "2021-05-13 17:30:24 -0500", "message": "Generate dynamic alias for join source (#2065)"}, {"oid": "32856f2244a3334028099eeb7ecd13b69fa41016", "committedDate": "2021-05-18 11:21:54 -0500", "message": "Aggregation Store ID Column Metadata (#2099)"}, {"oid": "e1c93d9f34829c4ee142a4919b5fde26502eaa11", "committedDate": "2021-05-19 17:24:06 -0400", "message": "Verify table arguments. (#2110)"}, {"oid": "b2eadb111297a8167f2715e027b9284c765adb32", "committedDate": "2021-05-20 16:42:02 -0400", "message": "Verify column arguments. (#2114)"}, {"oid": "4b8310f782f755f20fa79b52b7e4d13480b140f9", "committedDate": "2021-05-21 10:06:37 -0500", "message": "Remove usage of SQLReferenceTable. (#2116)"}, {"oid": "f9c2304cdbd7a1fb0f62cb024a19b2f2335832f2", "committedDate": "2021-06-24 13:55:06 -0400", "message": "Make AS before table alias optional, i.e. dialect based (#2179)"}, {"oid": "101f842daa06095652f898bda0f96fead4bb373e", "committedDate": "2021-08-05 14:37:57 -0500", "message": "GraphQL schema now namespaces internal types to avoid conflicts (#2237)"}, {"oid": "a874733a5c2ac3777e5946f6eddfade651d80c7a", "committedDate": "2021-08-06 17:30:43 -0500", "message": "Fix bug where dialect time conversion is skipped (#2238)"}, {"oid": "b88c19ef352c7bff44d4375d4a5f3e6b55054c3e", "committedDate": "2021-10-14 16:42:33 -0500", "message": "Aggregation Store: Make EntityHydrator stream results. (#2333)"}, {"oid": "830b9f2a997eefcd677090875bede2e21e19f1f4", "committedDate": "2021-10-20 14:48:56 -0500", "message": "Support 'hidden' flag for analytic models and fields. (#2357)"}, {"oid": "38b030daa701f205215b56199705f3d689726527", "committedDate": "2021-11-29 16:30:05 -0600", "message": "Enum filter fix (#2422)"}, {"oid": "54cdcb9fe67225cd463e1bf9357f0e1d2a42c152", "committedDate": "2021-12-02 15:11:51 -0600", "message": "HJSON Configuration Models and DataStore (#2418)"}, {"oid": "6b2b60098436a3dd7db03697ffd4717122fa3bf6", "committedDate": "2022-01-04 13:51:45 -0600", "message": "use query with filter to populate query parameters in pagination (#2466)"}, {"oid": "d0552c5750608391d52e3e3286469901726a7d06", "committedDate": "2022-01-28 16:02:28 -0600", "message": "Support filters on query plans (#2526)"}, {"oid": "f21f35950fe465cfbf135d06cc8ae2321a29513a", "committedDate": "2023-02-04 15:34:06 -0600", "message": "Elide 7.x (#2876)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE3NDcwOA==", "url": "https://github.com/yahoo/elide/pull/1367#discussion_r436174708", "body": "There are several places where spacing is off. ", "bodyText": "There are several places where spacing is off.", "bodyHTML": "<p dir=\"auto\">There are several places where spacing is off.</p>", "author": "aklish", "createdAt": "2020-06-05T21:35:50Z", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java", "diffHunk": "@@ -60,13 +61,14 @@\n @Slf4j\n public class SQLQueryEngine extends QueryEngine {\n     private final EntityManagerFactory entityManagerFactory;\n-\n+    private final TransactionCancel transactionCancel;\n     private final SQLReferenceTable referenceTable;\n \n-    public SQLQueryEngine(MetaDataStore metaDataStore, EntityManagerFactory entityManagerFactory, Cache cache) {\n+    public SQLQueryEngine(MetaDataStore metaDataStore, EntityManagerFactory entityManagerFactory, Cache cache, TransactionCancel transactionCancel) {\n         super(metaDataStore, cache);\n         this.entityManagerFactory = entityManagerFactory;\n         this.referenceTable = new SQLReferenceTable(metaDataStore);\n+\tthis.transactionCancel = transactionCancel;", "originalCommit": "8e97a518992f9a15ef4ce2c6a9d48fbacabaa1d0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f08727cf16a6ab9570bf506573ee9b5995ecb910", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex b74657044..f0e721383 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -63,12 +68,13 @@ public class SQLQueryEngine extends QueryEngine {\n     private final EntityManagerFactory entityManagerFactory;\n     private final TransactionCancel transactionCancel;\n     private final SQLReferenceTable referenceTable;\n+    private final EntityManager entityManager = null;    \n \n     public SQLQueryEngine(MetaDataStore metaDataStore, EntityManagerFactory entityManagerFactory, Cache cache, TransactionCancel transactionCancel) {\n         super(metaDataStore, cache);\n         this.entityManagerFactory = entityManagerFactory;\n         this.referenceTable = new SQLReferenceTable(metaDataStore);\n-\tthis.transactionCancel = transactionCancel;\n+        this.transactionCancel = transactionCancel;\n     }\n \n     @Override\n", "next_change": {"commit": "9a6dbc1186dfd5231d531fe04795a27b68f4fcd2", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex f0e721383..233d980dc 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -68,13 +65,13 @@ public class SQLQueryEngine extends QueryEngine {\n     private final EntityManagerFactory entityManagerFactory;\n     private final TransactionCancel transactionCancel;\n     private final SQLReferenceTable referenceTable;\n-    private final EntityManager entityManager = null;    \n+    private final EntityManager entityManager = null;\n \n-    public SQLQueryEngine(MetaDataStore metaDataStore, EntityManagerFactory entityManagerFactory, Cache cache, TransactionCancel transactionCancel) {\n+    public SQLQueryEngine(MetaDataStore metaDataStore, EntityManagerFactory emFactory, Cache cache, TransactionCancel txCancel) {\n         super(metaDataStore, cache);\n-        this.entityManagerFactory = entityManagerFactory;\n+        this.entityManagerFactory = emFactory;\n         this.referenceTable = new SQLReferenceTable(metaDataStore);\n-        this.transactionCancel = transactionCancel;\n+        this.transactionCancel = txCancel;\n     }\n \n     @Override\n", "next_change": {"commit": "07810b7bffcba1c415accbeada4401a05592beca", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 233d980dc..46ed8f487 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -67,10 +67,10 @@ public class SQLQueryEngine extends QueryEngine {\n     private final SQLReferenceTable referenceTable;\n     private final EntityManager entityManager = null;\n \n-    public SQLQueryEngine(MetaDataStore metaDataStore, EntityManagerFactory emFactory, Cache cache, TransactionCancel txCancel) {\n-        super(metaDataStore, cache);\n+    public SQLQueryEngine(MetaDataStore mDStore, EntityManagerFactory emFactory, Cache cx, TransactionCancel txCancel) {\n+        super(metaDataStore, cx);\n         this.entityManagerFactory = emFactory;\n-        this.referenceTable = new SQLReferenceTable(metaDataStore);\n+        this.referenceTable = new SQLReferenceTable(mDStore);\n         this.transactionCancel = txCancel;\n     }\n \n", "next_change": {"commit": "18a8cc9d0da96a239329ca6b6c4b7eecee346b8e", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 46ed8f487..8bca95b2d 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -65,10 +65,10 @@ public class SQLQueryEngine extends QueryEngine {\n     private final EntityManagerFactory entityManagerFactory;\n     private final TransactionCancel transactionCancel;\n     private final SQLReferenceTable referenceTable;\n-    private final EntityManager entityManager = null;\n+    private final EntityManager entityManager;\n \n     public SQLQueryEngine(MetaDataStore mDStore, EntityManagerFactory emFactory, Cache cx, TransactionCancel txCancel) {\n-        super(metaDataStore, cx);\n+        super(mDStore, cx);\n         this.entityManagerFactory = emFactory;\n         this.referenceTable = new SQLReferenceTable(mDStore);\n         this.transactionCancel = txCancel;\n", "next_change": {"commit": "310d11332a6723ae95ce225bfbec09597935909b", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 8bca95b2d..62f6af273 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -65,7 +65,7 @@ public class SQLQueryEngine extends QueryEngine {\n     private final EntityManagerFactory entityManagerFactory;\n     private final TransactionCancel transactionCancel;\n     private final SQLReferenceTable referenceTable;\n-    private final EntityManager entityManager;\n+    private EntityManager entityManager;\n \n     public SQLQueryEngine(MetaDataStore mDStore, EntityManagerFactory emFactory, Cache cx, TransactionCancel txCancel) {\n         super(mDStore, cx);\n", "next_change": {"commit": "8f1cfb480ee2db34373cee4ca35e5eef6b339a51", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 62f6af273..b63187a63 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -65,13 +62,12 @@ public class SQLQueryEngine extends QueryEngine {\n     private final EntityManagerFactory entityManagerFactory;\n     private final TransactionCancel transactionCancel;\n     private final SQLReferenceTable referenceTable;\n-    private EntityManager entityManager;\n \n-    public SQLQueryEngine(MetaDataStore mDStore, EntityManagerFactory emFactory, Cache cx, TransactionCancel txCancel) {\n-        super(mDStore, cx);\n-        this.entityManagerFactory = emFactory;\n-        this.referenceTable = new SQLReferenceTable(mDStore);\n-        this.transactionCancel = txCancel;\n+    public SQLQueryEngine(MetaDataStore metaDataStore, EntityManagerFactory entityManagerFactory, TransactionCancel txCancel) {\n+        super(metaDataStore);\n+        this.entityManagerFactory = entityManagerFactory;\n+        this.referenceTable = new SQLReferenceTable(metaDataStore);\n+\tthis.transactionCancel = txCancel;\n     }\n \n     @Override\n", "next_change": {"commit": "5094ce020f2de18f1a34294178dd857eba7af5c4", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex b63187a63..5958134d7 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -67,7 +67,7 @@ public class SQLQueryEngine extends QueryEngine {\n         super(metaDataStore);\n         this.entityManagerFactory = entityManagerFactory;\n         this.referenceTable = new SQLReferenceTable(metaDataStore);\n-\tthis.transactionCancel = txCancel;\n+\t      this.transactionCancel = txCancel;\n     }\n \n     @Override\n", "next_change": {"commit": "d7556cb189b6e83070942c10bdaf33054ecc0f71", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 5958134d7..869de2d9c 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -60,14 +61,14 @@ import javax.persistence.EntityTransaction;\n @Slf4j\n public class SQLQueryEngine extends QueryEngine {\n     private final EntityManagerFactory entityManagerFactory;\n-    private final TransactionCancel transactionCancel;\n+    private final Consumer<EntityManager> transactionCancel;\n     private final SQLReferenceTable referenceTable;\n \n-    public SQLQueryEngine(MetaDataStore metaDataStore, EntityManagerFactory entityManagerFactory, TransactionCancel txCancel) {\n+    public SQLQueryEngine(MetaDataStore metaDataStore, EntityManagerFactory eMFactory, Consumer<EntityManager> txC) {\n         super(metaDataStore);\n-        this.entityManagerFactory = entityManagerFactory;\n+        this.entityManagerFactory = eMFactory;\n         this.referenceTable = new SQLReferenceTable(metaDataStore);\n-\t      this.transactionCancel = txCancel;\n+        this.transactionCancel = txC;\n     }\n \n     @Override\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "ff86c56fde9064e1719ea35660fd04c42c949662", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex b74657044..869de2d9c 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -61,14 +61,14 @@ import javax.persistence.EntityTransaction;\n @Slf4j\n public class SQLQueryEngine extends QueryEngine {\n     private final EntityManagerFactory entityManagerFactory;\n-    private final TransactionCancel transactionCancel;\n+    private final Consumer<EntityManager> transactionCancel;\n     private final SQLReferenceTable referenceTable;\n \n-    public SQLQueryEngine(MetaDataStore metaDataStore, EntityManagerFactory entityManagerFactory, Cache cache, TransactionCancel transactionCancel) {\n-        super(metaDataStore, cache);\n-        this.entityManagerFactory = entityManagerFactory;\n+    public SQLQueryEngine(MetaDataStore metaDataStore, EntityManagerFactory eMFactory, Consumer<EntityManager> txC) {\n+        super(metaDataStore);\n+        this.entityManagerFactory = eMFactory;\n         this.referenceTable = new SQLReferenceTable(metaDataStore);\n-\tthis.transactionCancel = transactionCancel;\n+        this.transactionCancel = txC;\n     }\n \n     @Override\n", "next_change": {"commit": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 869de2d9c..86c37d5e3 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -61,14 +59,13 @@ import javax.persistence.EntityTransaction;\n @Slf4j\n public class SQLQueryEngine extends QueryEngine {\n     private final EntityManagerFactory entityManagerFactory;\n-    private final Consumer<EntityManager> transactionCancel;\n+\n     private final SQLReferenceTable referenceTable;\n \n-    public SQLQueryEngine(MetaDataStore metaDataStore, EntityManagerFactory eMFactory, Consumer<EntityManager> txC) {\n-        super(metaDataStore);\n-        this.entityManagerFactory = eMFactory;\n+    public SQLQueryEngine(MetaDataStore metaDataStore, EntityManagerFactory entityManagerFactory, Cache cache) {\n+        super(metaDataStore, cache);\n+        this.entityManagerFactory = entityManagerFactory;\n         this.referenceTable = new SQLReferenceTable(metaDataStore);\n-        this.transactionCancel = txC;\n     }\n \n     @Override\n", "next_change": {"commit": "81dde7567aa8a6a00822a9a8f0bf901806a962e8", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 86c37d5e3..7c335531d 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -62,8 +63,8 @@ public class SQLQueryEngine extends QueryEngine {\n \n     private final SQLReferenceTable referenceTable;\n \n-    public SQLQueryEngine(MetaDataStore metaDataStore, EntityManagerFactory entityManagerFactory, Cache cache) {\n-        super(metaDataStore, cache);\n+    public SQLQueryEngine(MetaDataStore metaDataStore, EntityManagerFactory entityManagerFactory) {\n+        super(metaDataStore);\n         this.entityManagerFactory = entityManagerFactory;\n         this.referenceTable = new SQLReferenceTable(metaDataStore);\n     }\n", "next_change": {"commit": "9c897058ce0b9656bf2aef2318d0addc474f278a", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 7c335531d..869de2d9c 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -60,13 +61,14 @@ import javax.persistence.EntityTransaction;\n @Slf4j\n public class SQLQueryEngine extends QueryEngine {\n     private final EntityManagerFactory entityManagerFactory;\n-\n+    private final Consumer<EntityManager> transactionCancel;\n     private final SQLReferenceTable referenceTable;\n \n-    public SQLQueryEngine(MetaDataStore metaDataStore, EntityManagerFactory entityManagerFactory) {\n+    public SQLQueryEngine(MetaDataStore metaDataStore, EntityManagerFactory eMFactory, Consumer<EntityManager> txC) {\n         super(metaDataStore);\n-        this.entityManagerFactory = entityManagerFactory;\n+        this.entityManagerFactory = eMFactory;\n         this.referenceTable = new SQLReferenceTable(metaDataStore);\n+        this.transactionCancel = txC;\n     }\n \n     @Override\n", "next_change": {"commit": "61ac33e39ba94617114273238754be32b006735b", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 869de2d9c..79fcc1878 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -63,12 +65,19 @@ public class SQLQueryEngine extends QueryEngine {\n     private final EntityManagerFactory entityManagerFactory;\n     private final Consumer<EntityManager> transactionCancel;\n     private final SQLReferenceTable referenceTable;\n+    private final SQLDialect dialect;\n \n     public SQLQueryEngine(MetaDataStore metaDataStore, EntityManagerFactory eMFactory, Consumer<EntityManager> txC) {\n+        this(metaDataStore, eMFactory, txC, SQLDialectFactory.getDefaultDialect());\n+    }\n+\n+    public SQLQueryEngine(MetaDataStore metaDataStore, EntityManagerFactory eMFactory, Consumer<EntityManager> txC,\n+                          SQLDialect sqlDialect) {\n         super(metaDataStore);\n         this.entityManagerFactory = eMFactory;\n         this.referenceTable = new SQLReferenceTable(metaDataStore);\n         this.transactionCancel = txC;\n+        this.dialect = sqlDialect;\n     }\n \n     @Override\n", "next_change": {"commit": "ca35ad817f2fde68b2f9c39d0d4d9c9d44ebffd5", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 79fcc1878..9c79e5997 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -41,45 +42,69 @@ import com.yahoo.elide.request.Argument;\n import com.yahoo.elide.request.Pagination;\n import com.yahoo.elide.utils.coerce.CoerceUtil;\n \n-import org.hibernate.jpa.QueryHints;\n-\n import lombok.extern.slf4j.Slf4j;\n \n+import java.sql.Connection;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n import java.util.ArrayList;\n import java.util.Collection;\n-import java.util.LinkedHashSet;\n+import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n-import java.util.Set;\n-import java.util.function.Consumer;\n+import java.util.Optional;\n+import java.util.function.Function;\n import java.util.stream.Collectors;\n-import javax.persistence.EntityManager;\n-import javax.persistence.EntityManagerFactory;\n-import javax.persistence.EntityTransaction;\n+import javax.sql.DataSource;\n \n /**\n  * QueryEngine for SQL backed stores.\n  */\n @Slf4j\n public class SQLQueryEngine extends QueryEngine {\n-    private final EntityManagerFactory entityManagerFactory;\n-    private final Consumer<EntityManager> transactionCancel;\n     private final SQLReferenceTable referenceTable;\n-    private final SQLDialect dialect;\n-\n-    public SQLQueryEngine(MetaDataStore metaDataStore, EntityManagerFactory eMFactory, Consumer<EntityManager> txC) {\n-        this(metaDataStore, eMFactory, txC, SQLDialectFactory.getDefaultDialect());\n-    }\n+    private final ConnectionDetails defaultConnectionDetails;\n+    private final Map<String, ConnectionDetails> connectionDetailsMap = new HashMap<>();\n \n-    public SQLQueryEngine(MetaDataStore metaDataStore, EntityManagerFactory eMFactory, Consumer<EntityManager> txC,\n-                          SQLDialect sqlDialect) {\n+    public SQLQueryEngine(MetaDataStore metaDataStore,\n+                    com.yahoo.elide.contrib.dynamicconfighelpers.compile.ConnectionDetails defaultConnectionDetails) {\n         super(metaDataStore);\n-        this.entityManagerFactory = eMFactory;\n         this.referenceTable = new SQLReferenceTable(metaDataStore);\n-        this.transactionCancel = txC;\n-        this.dialect = sqlDialect;\n+        this.defaultConnectionDetails = new ConnectionDetails(defaultConnectionDetails.getDataSource(),\n+                        SQLDialectFactory.getDialect(defaultConnectionDetails.getDialect()));\n+    }\n+\n+    /**\n+     * Constructor.\n+     * @param metaDataStore : MetaDataStore.\n+     * @param defaultConnectionDetails : default DataSource Object and SQLDialect Object.\n+     * @param detailsMap : Connection Name to DataSource Object and SQL Dialect Object mapping.\n+     */\n+    public SQLQueryEngine(MetaDataStore metaDataStore,\n+                    com.yahoo.elide.contrib.dynamicconfighelpers.compile.ConnectionDetails defaultConnectionDetails,\n+                    Map<String, com.yahoo.elide.contrib.dynamicconfighelpers.compile.ConnectionDetails> detailsMap) {\n+        this(metaDataStore, defaultConnectionDetails);\n+        detailsMap.forEach((name, details) -> {\n+            this.connectionDetailsMap.put(name, new ConnectionDetails(details.getDataSource(),\n+                            SQLDialectFactory.getDialect(details.getDialect())));\n+        });\n     }\n \n+    private static final Function<ResultSet, Object> SINGLE_RESULT_MAPPER = new Function<ResultSet, Object>() {\n+        @Override\n+        public Object apply(ResultSet rs) {\n+            try {\n+                if (rs.next()) {\n+                    return rs.getObject(1);\n+                } else {\n+                    return null;\n+                }\n+            } catch (SQLException e) {\n+                throw new IllegalStateException(e);\n+            }\n+        }\n+    };\n+\n     @Override\n     protected Table constructTable(Class<?> entityClass, EntityDictionary metaDataDictionary) {\n         return new SQLTable(entityClass, metaDataDictionary);\n", "next_change": {"commit": "df3ea922a7550ec35585ce289e1d74101c4f28e4", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 9c79e5997..ca3f47ca5 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -107,34 +103,14 @@ public class SQLQueryEngine extends QueryEngine {\n \n     @Override\n     protected Table constructTable(Class<?> entityClass, EntityDictionary metaDataDictionary) {\n-        return new SQLTable(entityClass, metaDataDictionary);\n+        return new SQLTable(entityClass, metaDataDictionary, this);\n     }\n \n     @Override\n     public ColumnProjection constructDimensionProjection(Dimension dimension,\n                                                          String alias,\n                                                          Map<String, Argument> arguments) {\n-        return new SQLColumnProjection() {\n-            @Override\n-            public SQLReferenceTable getReferenceTable() {\n-                return referenceTable;\n-            }\n-\n-            @Override\n-            public Column getColumn() {\n-                return dimension;\n-            }\n-\n-            @Override\n-            public String getAlias() {\n-                return alias;\n-            }\n-\n-            @Override\n-            public Map<String, Argument> getArguments() {\n-                return arguments;\n-            }\n-        };\n+        return new SQLDimensionProjection(dimension, alias, arguments, referenceTable);\n     }\n \n     @Override\n", "next_change": {"commit": "dc254e6a99100c21abd94eac3f0252bb9c5029df", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex ca3f47ca5..f2433475a 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -103,28 +104,28 @@ public class SQLQueryEngine extends QueryEngine {\n \n     @Override\n     protected Table constructTable(Class<?> entityClass, EntityDictionary metaDataDictionary) {\n-        return new SQLTable(entityClass, metaDataDictionary, this);\n+        return new SQLTable(entityClass, metaDataDictionary);\n     }\n \n     @Override\n     public ColumnProjection constructDimensionProjection(Dimension dimension,\n                                                          String alias,\n                                                          Map<String, Argument> arguments) {\n-        return new SQLDimensionProjection(dimension, alias, arguments, referenceTable);\n+        return new SQLDimensionProjection(dimension, alias, arguments);\n     }\n \n     @Override\n     public TimeDimensionProjection constructTimeDimensionProjection(TimeDimension dimension,\n                                                                     String alias,\n                                                                     Map<String, Argument> arguments) {\n-        return new SQLTimeDimensionProjection(dimension, dimension.getTimezone(), referenceTable, alias, arguments);\n+        return new SQLTimeDimensionProjection(dimension, dimension.getTimezone(), alias, arguments);\n     }\n \n     @Override\n     public MetricProjection constructMetricProjection(Metric metric,\n                                                       String alias,\n                                                       Map<String, Argument> arguments) {\n-        return new SQLMetricProjection(metric, referenceTable, alias, arguments);\n+        return new SQLMetricProjection(metric, alias, arguments);\n     }\n \n     /**\n", "next_change": {"commit": "7a0b59711bb5e269afbc6b15426a8aff94a5e447", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex f2433475a..3296af5f8 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -61,71 +72,90 @@ public class SQLQueryEngine extends QueryEngine {\n     @Getter\n     private final SQLReferenceTable referenceTable;\n     private final ConnectionDetails defaultConnectionDetails;\n-    private final Map<String, ConnectionDetails> connectionDetailsMap = new HashMap<>();\n-\n-    public SQLQueryEngine(MetaDataStore metaDataStore,\n-                    com.yahoo.elide.contrib.dynamicconfighelpers.compile.ConnectionDetails defaultConnectionDetails) {\n-        super(metaDataStore);\n-        referenceTable = new SQLReferenceTable(metaDataStore);\n-        this.defaultConnectionDetails = new ConnectionDetails(defaultConnectionDetails.getDataSource(),\n-                        SQLDialectFactory.getDialect(defaultConnectionDetails.getDialect()));\n+    private final Map<String, ConnectionDetails> connectionDetailsMap;\n+    private final Set<Optimizer> optimizers;\n+\n+    public SQLQueryEngine(MetaDataStore metaDataStore, ConnectionDetails defaultConnectionDetails) {\n+        this(metaDataStore, defaultConnectionDetails, Collections.emptyMap(),\n+                new HashSet<>());\n     }\n \n     /**\n      * Constructor.\n      * @param metaDataStore : MetaDataStore.\n      * @param defaultConnectionDetails : default DataSource Object and SQLDialect Object.\n-     * @param detailsMap : Connection Name to DataSource Object and SQL Dialect Object mapping.\n+     * @param connectionDetailsMap : Connection Name to DataSource Object and SQL Dialect Object mapping.\n      */\n-    public SQLQueryEngine(MetaDataStore metaDataStore,\n-                    com.yahoo.elide.contrib.dynamicconfighelpers.compile.ConnectionDetails defaultConnectionDetails,\n-                    Map<String, com.yahoo.elide.contrib.dynamicconfighelpers.compile.ConnectionDetails> detailsMap) {\n-        this(metaDataStore, defaultConnectionDetails);\n-        detailsMap.forEach((name, details) -> {\n-            this.connectionDetailsMap.put(name, new ConnectionDetails(details.getDataSource(),\n-                            SQLDialectFactory.getDialect(details.getDialect())));\n-        });\n+    public SQLQueryEngine(MetaDataStore metaDataStore, ConnectionDetails defaultConnectionDetails,\n+                    Map<String, ConnectionDetails> connectionDetailsMap, Set<Optimizer> optimizers) {\n+\n+        Preconditions.checkNotNull(defaultConnectionDetails);\n+        Preconditions.checkNotNull(connectionDetailsMap);\n+\n+        this.defaultConnectionDetails = defaultConnectionDetails;\n+        this.connectionDetailsMap = connectionDetailsMap;\n+        this.metaDataStore = metaDataStore;\n+        this.metadataDictionary = metaDataStore.getMetadataDictionary();\n+        populateMetaData(metaDataStore);\n+        this.referenceTable = new SQLReferenceTable(metaDataStore);\n+        this.optimizers = optimizers;\n     }\n \n-    private static final Function<ResultSet, Object> SINGLE_RESULT_MAPPER = new Function<ResultSet, Object>() {\n-        @Override\n-        public Object apply(ResultSet rs) {\n-            try {\n-                if (rs.next()) {\n-                    return rs.getObject(1);\n-                } else {\n-                    return null;\n-                }\n-            } catch (SQLException e) {\n-                throw new IllegalStateException(e);\n+    private static final Function<ResultSet, Object> SINGLE_RESULT_MAPPER = rs -> {\n+        try {\n+            if (rs.next()) {\n+                return rs.getObject(1);\n             }\n+            return null;\n+        } catch (SQLException e) {\n+            throw new IllegalStateException(e);\n         }\n     };\n \n     @Override\n-    protected Table constructTable(Class<?> entityClass, EntityDictionary metaDataDictionary) {\n-        return new SQLTable(entityClass, metaDataDictionary);\n+    protected Table constructTable(Type<?> entityClass, EntityDictionary metaDataDictionary) {\n+\n+        String dbConnectionName = null;\n+        Annotation annotation = EntityDictionary.getFirstAnnotation(entityClass,\n+                        Arrays.asList(FromTable.class, FromSubquery.class));\n+        if (annotation instanceof FromTable) {\n+            dbConnectionName = ((FromTable) annotation).dbConnectionName();\n+        } else if (annotation instanceof FromSubquery) {\n+            dbConnectionName = ((FromSubquery) annotation).dbConnectionName();\n+        }\n+\n+        ConnectionDetails connectionDetails;\n+        if (StringUtils.isBlank(dbConnectionName)) {\n+            connectionDetails = defaultConnectionDetails;\n+        } else {\n+            connectionDetails = Optional.ofNullable(connectionDetailsMap.get(dbConnectionName))\n+                            .orElseThrow(() -> new IllegalStateException(\"ConnectionDetails undefined for model: \"\n+                                            + metaDataDictionary.getJsonAliasFor(entityClass)));\n+        }\n+\n+        return new SQLTable(entityClass, metaDataDictionary, connectionDetails);\n     }\n \n     @Override\n     public ColumnProjection constructDimensionProjection(Dimension dimension,\n                                                          String alias,\n                                                          Map<String, Argument> arguments) {\n-        return new SQLDimensionProjection(dimension, alias, arguments);\n+        return new SQLDimensionProjection(dimension, alias, arguments, true);\n     }\n \n     @Override\n     public TimeDimensionProjection constructTimeDimensionProjection(TimeDimension dimension,\n                                                                     String alias,\n                                                                     Map<String, Argument> arguments) {\n-        return new SQLTimeDimensionProjection(dimension, dimension.getTimezone(), alias, arguments);\n+        return new SQLTimeDimensionProjection(dimension, dimension.getTimezone(), alias, arguments, true);\n     }\n \n     @Override\n     public MetricProjection constructMetricProjection(Metric metric,\n                                                       String alias,\n                                                       Map<String, Argument> arguments) {\n-        return new SQLMetricProjection(metric, alias, arguments);\n+\n+        return metric.getMetricProjectionMaker().make(metric, alias, arguments);\n     }\n \n     /**\n", "next_change": {"commit": "32856f2244a3334028099eeb7ecd13b69fa41016", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 3296af5f8..54caaa4ef 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -154,7 +171,6 @@ public class SQLQueryEngine extends QueryEngine {\n     public MetricProjection constructMetricProjection(Metric metric,\n                                                       String alias,\n                                                       Map<String, Argument> arguments) {\n-\n         return metric.getMetricProjectionMaker().make(metric, alias, arguments);\n     }\n \n", "next_change": {"commit": "e1c93d9f34829c4ee142a4919b5fde26502eaa11", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 54caaa4ef..fcf751616 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -174,6 +178,24 @@ public class SQLQueryEngine extends QueryEngine {\n         return metric.getMetricProjectionMaker().make(metric, alias, arguments);\n     }\n \n+    @Override\n+    protected void verifyMetaData(MetaDataStore metaDataStore) {\n+        metaDataStore.getTables().forEach(table -> {\n+            SQLTable sqlTable = (SQLTable) table;\n+            checkForCycles(sqlTable);\n+            TableArgumentValidator tableArgValidator = new TableArgumentValidator(metaDataStore, sqlTable);\n+            tableArgValidator.validate();\n+        });\n+    }\n+\n+    /**\n+     * Verify that there is no reference loop for given {@link SQLTable}.\n+     * @param sqlTable Queryable to validate.\n+     */\n+    private void checkForCycles(SQLTable sqlTable) {\n+        sqlTable.getColumnProjections().forEach(column -> formulaValidator.parse(sqlTable, column));\n+    }\n+\n     /**\n      * State needed for SQLQueryEngine to execute queries.\n      */\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "ff86c56fde9064e1719ea35660fd04c42c949662", "message": "Merge commit", "committedDate": null}, {"oid": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "parent a14ccfbb7b558d27799b4e7b1916850519639708 author Jack (\uc815\ud658) <QubitPi@users.noreply.github.com> 1559678988 -0700 committer Aaron Klish <klish@verizonmedia.com> 1589583449 -0500"}, {"oid": "3f34e76977a5a591eca1f8c00ac986562a38d250", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Introduce QueryResult class for QueryEngine caching (#1333)"}, {"oid": "81dde7567aa8a6a00822a9a8f0bf901806a962e8", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add caching support to SQLQueryEngine (#1319)"}, {"oid": "9c897058ce0b9656bf2aef2318d0addc474f278a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "implement cancel function (#1367)"}, {"oid": "8fece2b8f1b3078ce2598ddb03dca66bb984df46", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Aggregation DataStore QueryLogger Implementation (#1448)"}, {"oid": "61ac33e39ba94617114273238754be32b006735b", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add SQLDialect implementations and tests. (#1487)"}, {"oid": "ca35ad817f2fde68b2f9c39d0d4d9c9d44ebffd5", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Query Engine and Aggregation Store Changes for Multi Data Source Support (#1523)"}, {"oid": "11e5083ef0755c62f86c287cf73c376d6c8b8c40", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Refactor query plan (#1579)"}, {"oid": "df3ea922a7550ec35585ce289e1d74101c4f28e4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5: Decouple query and metadata (#1585)"}, {"oid": "dc254e6a99100c21abd94eac3f0252bb9c5029df", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Support nested queries (#1591)"}, {"oid": "9057572200f962b7735270005cd9b51c368c0a0b", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5: Sketch out support for nested query plans. (#1594)"}, {"oid": "7daf58155ba6980d10a0171f72ea32a05af1ac6a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Added SQL Generation Tests for Nested Aggregation Queries (#1602)"}, {"oid": "e140eebdb89d74eb0f16fc8b157c6223cbb07992", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Refactor dbconnection (#1622)"}, {"oid": "df24aa71c283e12d2489982300580cfa80c9755c", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Migrate metadatacalls to metadata store (#1624)"}, {"oid": "c6f23dd421705b7a93be8823310143e6b631c7e4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Quote all identifiers in SQL query (#1621)"}, {"oid": "1dac58a1a989bbc3db52e87b77d19a5077c5ea5b", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Attempt to run explain query tests against H2 in compliance mode against targeted databases (#1633)"}, {"oid": "49e61867e840d9818993879436d5db1aad964c9a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Move data store interfaces (#1671)"}, {"oid": "911d29408bdeeb4ff8d78f2beea2417be4e7c673", "committedDate": "2020-12-11 16:20:28 -0600", "message": "cleaned up package hierarchy for elide-core (#1672)"}, {"oid": "c14096bec256faf80e7674fbef22bccff1f955a3", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Moved contrib.dynamicconfighelpers to modelconfig package (#1676)"}, {"oid": "bea43ef0f244ba01c2f7d4216b9f08f0ef4e83a4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Optionally compile hjson configs while running CLI (#1693)"}, {"oid": "172f3833738466c50648a2f4c3644eae46706aa2", "committedDate": "2021-01-12 15:51:35 -0600", "message": "Issue#1750 Fix SQL query generation for record count"}, {"oid": "979561b9129a15723594d23fbef0c584788ce100", "committedDate": "2021-01-19 10:59:36 -0600", "message": "add druid dialect with new pagination query structure"}, {"oid": "ccbcbcb65f7cae54ede4cd5242ecb19a8f84368c", "committedDate": "2021-01-19 10:59:36 -0600", "message": "change all count distinct queries to group by query for pagination"}, {"oid": "3f79dc112b211df777ab5fee15c27671c0f1bcdf", "committedDate": "2021-01-19 10:59:36 -0600", "message": "return null if no dimension projection is available."}, {"oid": "beb2cdfa0cd863756e7b095c0a58c733e484a944", "committedDate": "2021-01-19 10:59:36 -0600", "message": "address comments"}, {"oid": "17152126cb2f014076efd84ac3fd3be233f25c64", "committedDate": "2021-01-19 10:59:36 -0600", "message": "fix null pointer exception and add test case"}, {"oid": "f88b63d286d73d3774558b24f16aef0bb0be6d1a", "committedDate": "2021-01-19 14:16:37 -0600", "message": "Initial Commit for Type changes"}, {"oid": "ba73bc2a5617fed8feeee5b419a0f0808081628f", "committedDate": "2021-02-04 11:31:56 -0600", "message": "Elide 5 Agg Store: Multiple time grains (#1806)"}, {"oid": "8274a6341e06c7201049e8e8f0a48f07bd99a0ef", "committedDate": "2021-03-10 16:38:34 -0600", "message": "Cleanup IDE warnings (#1894)"}, {"oid": "c19d8c2237e960d792dc2ef6375356433b4fac21", "committedDate": "2021-03-11 17:10:26 -0600", "message": "Classtype cleanup (#1905)"}, {"oid": "212dcab497c321f67b66d619748b023201f2c819", "committedDate": "2021-03-16 10:13:31 -0500", "message": "Remove source from ColumnProjection (#1918)"}, {"oid": "e1e07dbeabb690560754c84200b67e7a8d4d9229", "committedDate": "2021-03-22 09:06:06 -0500", "message": "Part 4 of Query Plan Optimization : Fix Metric Nesting (#1924)"}, {"oid": "ed941827e1027083367b4df9794501909279c667", "committedDate": "2021-03-25 22:55:35 -0400", "message": "diamonds to reduce duplication (#1947)"}, {"oid": "5aa899ebbc6af4bfb538a4c04deef2218348a178", "committedDate": "2021-03-26 01:03:25 -0400", "message": "Issue 1929 - define function as lambda (#1945)"}, {"oid": "dc7a367e14c9f43b2d013f5037341055a29f0491", "committedDate": "2021-03-26 10:31:26 -0400", "message": "Issue 1929 - Address Sonar suggestions (#1925)"}, {"oid": "cd008a45ad379004b92c5114150016027aa07b80", "committedDate": "2021-03-26 10:35:48 -0500", "message": "Query plan optimizer phase5 (#1961)"}, {"oid": "234905d972c491934ce3774771c9733193b45007", "committedDate": "2021-04-01 10:20:16 -0500", "message": "Phase 6: Query Optimization - Calcite parser (#1976)"}, {"oid": "7a0b59711bb5e269afbc6b15426a8aff94a5e447", "committedDate": "2021-04-01 14:51:05 -0500", "message": "Removed QueryPlanResolver.  Replaced it with MetricProjectionMaker.  Small fix to Calcite parser builder to use the SQL conformance of the underlying dialect (#1980)"}, {"oid": "43598e8411d544b31d9807ded4f248e25ef334a4", "committedDate": "2021-04-01 17:32:17 -0500", "message": "Add Table Level Query Hints (#1981)"}, {"oid": "89e96b0bb45da69b08e6c8df6d8d7d23090eec37", "committedDate": "2021-04-22 17:56:53 -0400", "message": "Resolution using Table Context (#2004)"}, {"oid": "53b23330ff54b12041e530a931329986ddd3e454", "committedDate": "2021-04-28 13:29:43 -0400", "message": "Aggregation Store: Namespace Metadata changes (#2037)"}, {"oid": "256ca8e18dbae4b8ff6c1adbd8e37b236ef5e575", "committedDate": "2021-05-03 11:58:57 -0400", "message": "Refactor Column Projections (#2049)"}, {"oid": "d21f942a219ba7f32757f334d7e61c78e126d6be", "committedDate": "2021-05-04 15:24:11 -0500", "message": "Use only queried column args & default args for logical column expansion (#2054)"}, {"oid": "d2843b24f4a1ed35907726ff62f09049ce37d081", "committedDate": "2021-05-06 10:54:37 -0500", "message": "Optional flow (#2069)"}, {"oid": "1bb35bea711c420f00cfd97596dfa9177e15277e", "committedDate": "2021-05-10 14:36:06 -0500", "message": "Populating namespaces in metadatastore (#2071)"}, {"oid": "0a3776bacb5809845d9a04a1263db9760f117b92", "committedDate": "2021-05-13 13:25:15 -0500", "message": "Injection Protection for parameterized metrics/dimensions (#2090)"}, {"oid": "35e214dd718e164e30529eff4feab4d5fcd62d27", "committedDate": "2021-05-13 16:25:00 -0400", "message": "Resolve arguments in FromSubquery (#2089)"}, {"oid": "bf246b21912e4b299e4330089198ba2eee01fbec", "committedDate": "2021-05-13 17:30:24 -0500", "message": "Generate dynamic alias for join source (#2065)"}, {"oid": "32856f2244a3334028099eeb7ecd13b69fa41016", "committedDate": "2021-05-18 11:21:54 -0500", "message": "Aggregation Store ID Column Metadata (#2099)"}, {"oid": "e1c93d9f34829c4ee142a4919b5fde26502eaa11", "committedDate": "2021-05-19 17:24:06 -0400", "message": "Verify table arguments. (#2110)"}, {"oid": "b2eadb111297a8167f2715e027b9284c765adb32", "committedDate": "2021-05-20 16:42:02 -0400", "message": "Verify column arguments. (#2114)"}, {"oid": "4b8310f782f755f20fa79b52b7e4d13480b140f9", "committedDate": "2021-05-21 10:06:37 -0500", "message": "Remove usage of SQLReferenceTable. (#2116)"}, {"oid": "f9c2304cdbd7a1fb0f62cb024a19b2f2335832f2", "committedDate": "2021-06-24 13:55:06 -0400", "message": "Make AS before table alias optional, i.e. dialect based (#2179)"}, {"oid": "101f842daa06095652f898bda0f96fead4bb373e", "committedDate": "2021-08-05 14:37:57 -0500", "message": "GraphQL schema now namespaces internal types to avoid conflicts (#2237)"}, {"oid": "a874733a5c2ac3777e5946f6eddfade651d80c7a", "committedDate": "2021-08-06 17:30:43 -0500", "message": "Fix bug where dialect time conversion is skipped (#2238)"}, {"oid": "b88c19ef352c7bff44d4375d4a5f3e6b55054c3e", "committedDate": "2021-10-14 16:42:33 -0500", "message": "Aggregation Store: Make EntityHydrator stream results. (#2333)"}, {"oid": "830b9f2a997eefcd677090875bede2e21e19f1f4", "committedDate": "2021-10-20 14:48:56 -0500", "message": "Support 'hidden' flag for analytic models and fields. (#2357)"}, {"oid": "38b030daa701f205215b56199705f3d689726527", "committedDate": "2021-11-29 16:30:05 -0600", "message": "Enum filter fix (#2422)"}, {"oid": "54cdcb9fe67225cd463e1bf9357f0e1d2a42c152", "committedDate": "2021-12-02 15:11:51 -0600", "message": "HJSON Configuration Models and DataStore (#2418)"}, {"oid": "6b2b60098436a3dd7db03697ffd4717122fa3bf6", "committedDate": "2022-01-04 13:51:45 -0600", "message": "use query with filter to populate query parameters in pagination (#2466)"}, {"oid": "d0552c5750608391d52e3e3286469901726a7d06", "committedDate": "2022-01-28 16:02:28 -0600", "message": "Support filters on query plans (#2526)"}, {"oid": "f21f35950fe465cfbf135d06cc8ae2321a29513a", "committedDate": "2023-02-04 15:34:06 -0600", "message": "Elide 7.x (#2876)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE3NTA2MA==", "url": "https://github.com/yahoo/elide/pull/1367#discussion_r436175060", "body": "An inner class can reference the members of the outer class if it is not static.  There is no need to:\r\n1. Define private members\r\n2. Have a constructor with arguments.", "bodyText": "An inner class can reference the members of the outer class if it is not static.  There is no need to:\n\nDefine private members\nHave a constructor with arguments.", "bodyHTML": "<p dir=\"auto\">An inner class can reference the members of the outer class if it is not static.  There is no need to:</p>\n<ol dir=\"auto\">\n<li>Define private members</li>\n<li>Have a constructor with arguments.</li>\n</ol>", "author": "aklish", "createdAt": "2020-06-05T21:36:52Z", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java", "diffHunk": "@@ -289,4 +291,28 @@ private SQLQuery toPageTotalSQL(SQLQuery sql) {\n     public static String getClassAlias(Class<?> entityClass) {\n         return getTypeAlias(entityClass);\n     }\n+\n+    /**\n+     * Functional interface for describing a method to supply JpaTransaction.\n+     */\n+    @FunctionalInterface\n+    public interface TransactionCancel {\n+        public void cancel(EntityManager entityManager);\n+    }\n+  \n+    public class FutureImplementation implements Future<QueryResult> {\n+        private final TransactionCancel transactionCancel;", "originalCommit": "8e97a518992f9a15ef4ce2c6a9d48fbacabaa1d0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f08727cf16a6ab9570bf506573ee9b5995ecb910", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex b74657044..f0e721383 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -300,19 +309,56 @@ public class SQLQueryEngine extends QueryEngine {\n         public void cancel(EntityManager entityManager);\n     }\n   \n-    public class FutureImplementation implements Future<QueryResult> {\n-        private final TransactionCancel transactionCancel;\n-\tprivate final EntityManagerFactory entityManagerFactory;\n+    public class QueryResultFuture<QueryResult> implements Future<QueryResult> {\n         /**\n-\t * Cancels transaction\n+\t * Future Implementation of Query Result\n          */\n-    \t@Override\n-\tprotected FutureImplementation(EntityManagerFactory entityManagerFactory, TransactionCancel transactionCancel) {\n-\t    this.transactionCancel = transactionCancel;\n-\t    this.entityManagerFactory = entityManagerFactory;\n+\tprivate static enum RESULT {RUNNING, CANCELLED}\n+\tfinal CountDownLatch countDownLatch = new CountDownLatch(1);\n+\tprivate RESUlT Result = RESULT.RUNNING;\t\n+\tprivate QueryResult queryResult;\t\n+\t\n+\tpublic QueryResultFuture() {\n+\t     this.queryResult = queryResult;\n+\t     countDownLatch.countDown();\n \t}\n+\n+        @Override\n+        public QueryResult get() {\n+            countDownLatch.await();\n+            return queryResult;\n+\t}\n+\t\n+\t@Override\n     \tpublic boolean cancel(boolean mayInterruptIfRunning) {\n-            transactionCancel.cancel(entityManagerFactory.createEntityManager());\n-    \t}    \t\n+\t    try {\n+            \ttransactionCancel.cancel(entityManager);\n+\t\tResult = RESULT.CANCELLED;\t\n+            \treturn true;\n+            }\n+\t    catch (Exception e) {\n+\t    \tthrow e;\n+            }\n+    \t}\n+\t\n+\t@Override\n+\tboolean isCancelled() {\n+\t    return Result == RESULT.CANCELLED;\n+\t}\n+\n+\t@Override\n+\tboolean isDone() {\n+\t    return true;\n+\t}\n+\n+\t@Override\n+\t@Override\n+\tpublic QueryResult get(long timeout, TimeUnit unit) throws TimeoutException {\n+\t    if (countDownLatch.await(timeout, unit)) {\n+                return queryResult;\n+            } else {\n+                throw new TimeoutException();\n+            }\n+\t}\n     }\n }\n", "next_change": {"commit": "4e694992ae92fcce5f385921b2180c2c8a5458e4", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex f0e721383..bbff37c6e 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -309,56 +311,18 @@ public class SQLQueryEngine extends QueryEngine {\n         public void cancel(EntityManager entityManager);\n     }\n   \n-    public class QueryResultFuture<QueryResult> implements Future<QueryResult> {\n+    public class QueryResultFuture<V> extends FutureTask<V> {\n         /**\n-\t * Future Implementation of Query Result\n+\t * FutureTask Implementation of Query Result\n          */\n-\tprivate static enum RESULT {RUNNING, CANCELLED}\n-\tfinal CountDownLatch countDownLatch = new CountDownLatch(1);\n-\tprivate RESUlT Result = RESULT.RUNNING;\t\n-\tprivate QueryResult queryResult;\t\n \t\n-\tpublic QueryResultFuture() {\n-\t     this.queryResult = queryResult;\n-\t     countDownLatch.countDown();\n+\tpublic QueryResultFuture(Callable<V> callable) {\n+\t    super(callable);     \n \t}\n \n-        @Override\n-        public QueryResult get() {\n-            countDownLatch.await();\n-            return queryResult;\n-\t}\n-\t\n-\t@Override\n-    \tpublic boolean cancel(boolean mayInterruptIfRunning) {\n-\t    try {\n-            \ttransactionCancel.cancel(entityManager);\n-\t\tResult = RESULT.CANCELLED;\t\n-            \treturn true;\n-            }\n-\t    catch (Exception e) {\n-\t    \tthrow e;\n-            }\n-    \t}\n-\t\n \t@Override\n-\tboolean isCancelled() {\n-\t    return Result == RESULT.CANCELLED;\n-\t}\n-\n-\t@Override\n-\tboolean isDone() {\n-\t    return true;\n-\t}\n-\n-\t@Override\n-\t@Override\n-\tpublic QueryResult get(long timeout, TimeUnit unit) throws TimeoutException {\n-\t    if (countDownLatch.await(timeout, unit)) {\n-                return queryResult;\n-            } else {\n-                throw new TimeoutException();\n-            }\n-\t}\n+    \tpublic boolean cancel(TransactionCancel transactionCancel, EntityManager entityManager) {\n+            transactionCancel.cancel(entityManager);\n+    \t}\t\n     }\n }\n", "next_change": {"commit": "b69bb59dc6373110fb697c9f912cc73857df7c26", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex bbff37c6e..f1ff331b2 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -314,15 +310,15 @@ public class SQLQueryEngine extends QueryEngine {\n     public class QueryResultFuture<V> extends FutureTask<V> {\n         /**\n \t * FutureTask Implementation of Query Result\n-         */\n-\t\n+         */\t\n \tpublic QueryResultFuture(Callable<V> callable) {\n \t    super(callable);     \n \t}\n \n \t@Override\n-    \tpublic boolean cancel(TransactionCancel transactionCancel, EntityManager entityManager) {\n+    \tpublic boolean cancel(boolean mayInterruptIfRunning) {\n             transactionCancel.cancel(entityManager);\n+\t    return true;\n     \t}\t\n     }\n }\n", "next_change": {"commit": "8064be350bc30ffb58923074f4a08d143f3c21c5", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex f1ff331b2..c16063a2a 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -318,7 +319,7 @@ public class SQLQueryEngine extends QueryEngine {\n \t@Override\n     \tpublic boolean cancel(boolean mayInterruptIfRunning) {\n             transactionCancel.cancel(entityManager);\n-\t    return true;\n+\t    return super.cancel(true);\n     \t}\t\n     }\n }\n", "next_change": {"commit": "9a6dbc1186dfd5231d531fe04795a27b68f4fcd2", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex c16063a2a..233d980dc 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -316,10 +315,10 @@ public class SQLQueryEngine extends QueryEngine {\n \t    super(callable);     \n \t}\n \n-\t@Override\n-    \tpublic boolean cancel(boolean mayInterruptIfRunning) {\n+        @Override\n+        public boolean cancel(boolean mayInterruptIfRunning) {\n             transactionCancel.cancel(entityManager);\n-\t    return super.cancel(true);\n-    \t}\t\n+            return super.cancel(true);\n+        }\t\n     }\n }\n", "next_change": {"commit": "07810b7bffcba1c415accbeada4401a05592beca", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 233d980dc..46ed8f487 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -309,16 +309,16 @@ public class SQLQueryEngine extends QueryEngine {\n \n     public class QueryResultFuture<V> extends FutureTask<V> {\n         /**\n-\t * FutureTask Implementation of Query Result\n-         */\t\n-\tpublic QueryResultFuture(Callable<V> callable) {\n-\t    super(callable);     \n-\t}\n+         * FutureTask Implementation of Query Result.\n+         */\n+         public QueryResultFuture(Callable<V> callable) {\n+             super(callable);\n+         }\n \n         @Override\n         public boolean cancel(boolean mayInterruptIfRunning) {\n             transactionCancel.cancel(entityManager);\n             return super.cancel(true);\n-        }\t\n+        }\n     }\n }\n", "next_change": {"commit": "8f1cfb480ee2db34373cee4ca35e5eef6b339a51", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 46ed8f487..b63187a63 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -306,19 +343,4 @@ public class SQLQueryEngine extends QueryEngine {\n     public interface TransactionCancel {\n         public void cancel(EntityManager entityManager);\n     }\n-\n-    public class QueryResultFuture<V> extends FutureTask<V> {\n-        /**\n-         * FutureTask Implementation of Query Result.\n-         */\n-         public QueryResultFuture(Callable<V> callable) {\n-             super(callable);\n-         }\n-\n-        @Override\n-        public boolean cancel(boolean mayInterruptIfRunning) {\n-            transactionCancel.cancel(entityManager);\n-            return super.cancel(true);\n-        }\n-    }\n }\n", "next_change": {"commit": "5094ce020f2de18f1a34294178dd857eba7af5c4", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex b63187a63..5958134d7 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -343,4 +344,4 @@ public class SQLQueryEngine extends QueryEngine {\n     public interface TransactionCancel {\n         public void cancel(EntityManager entityManager);\n     }\n-}\n+}\n\\ No newline at end of file\n", "next_change": {"commit": "d7556cb189b6e83070942c10bdaf33054ecc0f71", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 5958134d7..869de2d9c 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -336,12 +337,4 @@ public class SQLQueryEngine extends QueryEngine {\n     public static String getClassAlias(Class<?> entityClass) {\n         return getTypeAlias(entityClass);\n     }\n-\n-    /**\n-     * Functional interface for describing a method to supply JpaTransaction.\n-     */\n-    @FunctionalInterface\n-    public interface TransactionCancel {\n-        public void cancel(EntityManager entityManager);\n-    }\n-}\n\\ No newline at end of file\n+}\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "ff86c56fde9064e1719ea35660fd04c42c949662", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex b74657044..869de2d9c 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -291,28 +337,4 @@ public class SQLQueryEngine extends QueryEngine {\n     public static String getClassAlias(Class<?> entityClass) {\n         return getTypeAlias(entityClass);\n     }\n-\n-    /**\n-     * Functional interface for describing a method to supply JpaTransaction.\n-     */\n-    @FunctionalInterface\n-    public interface TransactionCancel {\n-        public void cancel(EntityManager entityManager);\n-    }\n-  \n-    public class FutureImplementation implements Future<QueryResult> {\n-        private final TransactionCancel transactionCancel;\n-\tprivate final EntityManagerFactory entityManagerFactory;\n-        /**\n-\t * Cancels transaction\n-         */\n-    \t@Override\n-\tprotected FutureImplementation(EntityManagerFactory entityManagerFactory, TransactionCancel transactionCancel) {\n-\t    this.transactionCancel = transactionCancel;\n-\t    this.entityManagerFactory = entityManagerFactory;\n-\t}\n-    \tpublic boolean cancel(boolean mayInterruptIfRunning) {\n-            transactionCancel.cancel(entityManagerFactory.createEntityManager());\n-    \t}    \t\n-    }\n }\n", "next_change": {"commit": "ca35ad817f2fde68b2f9c39d0d4d9c9d44ebffd5", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 869de2d9c..9c79e5997 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -337,4 +417,66 @@ public class SQLQueryEngine extends QueryEngine {\n     public static String getClassAlias(Class<?> entityClass) {\n         return getTypeAlias(entityClass);\n     }\n+\n+    private static boolean returnPageTotals(Pagination pagination) {\n+        return pagination != null && pagination.returnPageTotals();\n+    }\n+\n+    /**\n+     * Gets required ConnectionDetails.\n+     * @param connectionName Connection Name.\n+     * @return ConnectionDetails ConnectionDetails Object for this connection.\n+     */\n+    private ConnectionDetails getConnectionDetails(String connectionName) {\n+        if (connectionName == null || connectionName.trim().isEmpty()) {\n+            return defaultConnectionDetails;\n+        } else {\n+            return Optional.ofNullable(connectionDetailsMap.get(connectionName))\n+                            .orElseThrow(() -> new IllegalStateException(\n+                                            \"ConnectionDetails undefined for DB Connection Name: \" + connectionName));\n+        }\n+    }\n+\n+    /**\n+     * Cancels NamedParamPreparedStatement, hides and logs any SQLException.\n+     * @param stmt NamedParamPreparedStatement to cancel.\n+     */\n+    private static void cancelSoftly(NamedParamPreparedStatement stmt) {\n+        try {\n+            if (stmt != null && !stmt.isClosed()) {\n+                stmt.cancel();\n+            }\n+        } catch (SQLException e) {\n+            log.error(\"Exception encountered during cancel statement.\", e);\n+        }\n+    }\n+\n+    /**\n+     * Cancels and Closes NamedParamPreparedStatement, hides and logs any SQLException.\n+     * @param stmt NamedParamPreparedStatement to close.\n+     */\n+    private static void cancelAndCloseSoftly(NamedParamPreparedStatement stmt) {\n+        cancelSoftly(stmt);\n+        try {\n+            if (stmt != null && !stmt.isClosed()) {\n+                stmt.close();\n+            }\n+        } catch (SQLException e) {\n+            log.error(\"Exception encountered during close statement.\", e);\n+        }\n+    }\n+\n+    /**\n+     * Closes Connection, hides and logs any SQLException.\n+     * @param conn Connection to close.\n+     */\n+    private static void closeSoftly(Connection conn) {\n+        try {\n+            if (conn != null) {\n+                conn.close();\n+            }\n+        } catch (SQLException e) {\n+            log.error(\"Exception encountered during close connection.\", e);\n+        }\n+    }\n }\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "ff86c56fde9064e1719ea35660fd04c42c949662", "message": "Merge commit", "committedDate": null}, {"oid": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "parent a14ccfbb7b558d27799b4e7b1916850519639708 author Jack (\uc815\ud658) <QubitPi@users.noreply.github.com> 1559678988 -0700 committer Aaron Klish <klish@verizonmedia.com> 1589583449 -0500"}, {"oid": "3f34e76977a5a591eca1f8c00ac986562a38d250", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Introduce QueryResult class for QueryEngine caching (#1333)"}, {"oid": "81dde7567aa8a6a00822a9a8f0bf901806a962e8", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add caching support to SQLQueryEngine (#1319)"}, {"oid": "9c897058ce0b9656bf2aef2318d0addc474f278a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "implement cancel function (#1367)"}, {"oid": "8fece2b8f1b3078ce2598ddb03dca66bb984df46", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Aggregation DataStore QueryLogger Implementation (#1448)"}, {"oid": "61ac33e39ba94617114273238754be32b006735b", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add SQLDialect implementations and tests. (#1487)"}, {"oid": "ca35ad817f2fde68b2f9c39d0d4d9c9d44ebffd5", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Query Engine and Aggregation Store Changes for Multi Data Source Support (#1523)"}, {"oid": "11e5083ef0755c62f86c287cf73c376d6c8b8c40", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Refactor query plan (#1579)"}, {"oid": "df3ea922a7550ec35585ce289e1d74101c4f28e4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5: Decouple query and metadata (#1585)"}, {"oid": "dc254e6a99100c21abd94eac3f0252bb9c5029df", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Support nested queries (#1591)"}, {"oid": "9057572200f962b7735270005cd9b51c368c0a0b", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5: Sketch out support for nested query plans. (#1594)"}, {"oid": "7daf58155ba6980d10a0171f72ea32a05af1ac6a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Added SQL Generation Tests for Nested Aggregation Queries (#1602)"}, {"oid": "e140eebdb89d74eb0f16fc8b157c6223cbb07992", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Refactor dbconnection (#1622)"}, {"oid": "df24aa71c283e12d2489982300580cfa80c9755c", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Migrate metadatacalls to metadata store (#1624)"}, {"oid": "c6f23dd421705b7a93be8823310143e6b631c7e4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Quote all identifiers in SQL query (#1621)"}, {"oid": "1dac58a1a989bbc3db52e87b77d19a5077c5ea5b", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Attempt to run explain query tests against H2 in compliance mode against targeted databases (#1633)"}, {"oid": "49e61867e840d9818993879436d5db1aad964c9a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Move data store interfaces (#1671)"}, {"oid": "911d29408bdeeb4ff8d78f2beea2417be4e7c673", "committedDate": "2020-12-11 16:20:28 -0600", "message": "cleaned up package hierarchy for elide-core (#1672)"}, {"oid": "c14096bec256faf80e7674fbef22bccff1f955a3", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Moved contrib.dynamicconfighelpers to modelconfig package (#1676)"}, {"oid": "bea43ef0f244ba01c2f7d4216b9f08f0ef4e83a4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Optionally compile hjson configs while running CLI (#1693)"}, {"oid": "172f3833738466c50648a2f4c3644eae46706aa2", "committedDate": "2021-01-12 15:51:35 -0600", "message": "Issue#1750 Fix SQL query generation for record count"}, {"oid": "979561b9129a15723594d23fbef0c584788ce100", "committedDate": "2021-01-19 10:59:36 -0600", "message": "add druid dialect with new pagination query structure"}, {"oid": "ccbcbcb65f7cae54ede4cd5242ecb19a8f84368c", "committedDate": "2021-01-19 10:59:36 -0600", "message": "change all count distinct queries to group by query for pagination"}, {"oid": "3f79dc112b211df777ab5fee15c27671c0f1bcdf", "committedDate": "2021-01-19 10:59:36 -0600", "message": "return null if no dimension projection is available."}, {"oid": "beb2cdfa0cd863756e7b095c0a58c733e484a944", "committedDate": "2021-01-19 10:59:36 -0600", "message": "address comments"}, {"oid": "17152126cb2f014076efd84ac3fd3be233f25c64", "committedDate": "2021-01-19 10:59:36 -0600", "message": "fix null pointer exception and add test case"}, {"oid": "f88b63d286d73d3774558b24f16aef0bb0be6d1a", "committedDate": "2021-01-19 14:16:37 -0600", "message": "Initial Commit for Type changes"}, {"oid": "ba73bc2a5617fed8feeee5b419a0f0808081628f", "committedDate": "2021-02-04 11:31:56 -0600", "message": "Elide 5 Agg Store: Multiple time grains (#1806)"}, {"oid": "8274a6341e06c7201049e8e8f0a48f07bd99a0ef", "committedDate": "2021-03-10 16:38:34 -0600", "message": "Cleanup IDE warnings (#1894)"}, {"oid": "c19d8c2237e960d792dc2ef6375356433b4fac21", "committedDate": "2021-03-11 17:10:26 -0600", "message": "Classtype cleanup (#1905)"}, {"oid": "212dcab497c321f67b66d619748b023201f2c819", "committedDate": "2021-03-16 10:13:31 -0500", "message": "Remove source from ColumnProjection (#1918)"}, {"oid": "e1e07dbeabb690560754c84200b67e7a8d4d9229", "committedDate": "2021-03-22 09:06:06 -0500", "message": "Part 4 of Query Plan Optimization : Fix Metric Nesting (#1924)"}, {"oid": "ed941827e1027083367b4df9794501909279c667", "committedDate": "2021-03-25 22:55:35 -0400", "message": "diamonds to reduce duplication (#1947)"}, {"oid": "5aa899ebbc6af4bfb538a4c04deef2218348a178", "committedDate": "2021-03-26 01:03:25 -0400", "message": "Issue 1929 - define function as lambda (#1945)"}, {"oid": "dc7a367e14c9f43b2d013f5037341055a29f0491", "committedDate": "2021-03-26 10:31:26 -0400", "message": "Issue 1929 - Address Sonar suggestions (#1925)"}, {"oid": "cd008a45ad379004b92c5114150016027aa07b80", "committedDate": "2021-03-26 10:35:48 -0500", "message": "Query plan optimizer phase5 (#1961)"}, {"oid": "234905d972c491934ce3774771c9733193b45007", "committedDate": "2021-04-01 10:20:16 -0500", "message": "Phase 6: Query Optimization - Calcite parser (#1976)"}, {"oid": "7a0b59711bb5e269afbc6b15426a8aff94a5e447", "committedDate": "2021-04-01 14:51:05 -0500", "message": "Removed QueryPlanResolver.  Replaced it with MetricProjectionMaker.  Small fix to Calcite parser builder to use the SQL conformance of the underlying dialect (#1980)"}, {"oid": "43598e8411d544b31d9807ded4f248e25ef334a4", "committedDate": "2021-04-01 17:32:17 -0500", "message": "Add Table Level Query Hints (#1981)"}, {"oid": "89e96b0bb45da69b08e6c8df6d8d7d23090eec37", "committedDate": "2021-04-22 17:56:53 -0400", "message": "Resolution using Table Context (#2004)"}, {"oid": "53b23330ff54b12041e530a931329986ddd3e454", "committedDate": "2021-04-28 13:29:43 -0400", "message": "Aggregation Store: Namespace Metadata changes (#2037)"}, {"oid": "256ca8e18dbae4b8ff6c1adbd8e37b236ef5e575", "committedDate": "2021-05-03 11:58:57 -0400", "message": "Refactor Column Projections (#2049)"}, {"oid": "d21f942a219ba7f32757f334d7e61c78e126d6be", "committedDate": "2021-05-04 15:24:11 -0500", "message": "Use only queried column args & default args for logical column expansion (#2054)"}, {"oid": "d2843b24f4a1ed35907726ff62f09049ce37d081", "committedDate": "2021-05-06 10:54:37 -0500", "message": "Optional flow (#2069)"}, {"oid": "1bb35bea711c420f00cfd97596dfa9177e15277e", "committedDate": "2021-05-10 14:36:06 -0500", "message": "Populating namespaces in metadatastore (#2071)"}, {"oid": "0a3776bacb5809845d9a04a1263db9760f117b92", "committedDate": "2021-05-13 13:25:15 -0500", "message": "Injection Protection for parameterized metrics/dimensions (#2090)"}, {"oid": "35e214dd718e164e30529eff4feab4d5fcd62d27", "committedDate": "2021-05-13 16:25:00 -0400", "message": "Resolve arguments in FromSubquery (#2089)"}, {"oid": "bf246b21912e4b299e4330089198ba2eee01fbec", "committedDate": "2021-05-13 17:30:24 -0500", "message": "Generate dynamic alias for join source (#2065)"}, {"oid": "32856f2244a3334028099eeb7ecd13b69fa41016", "committedDate": "2021-05-18 11:21:54 -0500", "message": "Aggregation Store ID Column Metadata (#2099)"}, {"oid": "e1c93d9f34829c4ee142a4919b5fde26502eaa11", "committedDate": "2021-05-19 17:24:06 -0400", "message": "Verify table arguments. (#2110)"}, {"oid": "b2eadb111297a8167f2715e027b9284c765adb32", "committedDate": "2021-05-20 16:42:02 -0400", "message": "Verify column arguments. (#2114)"}, {"oid": "4b8310f782f755f20fa79b52b7e4d13480b140f9", "committedDate": "2021-05-21 10:06:37 -0500", "message": "Remove usage of SQLReferenceTable. (#2116)"}, {"oid": "f9c2304cdbd7a1fb0f62cb024a19b2f2335832f2", "committedDate": "2021-06-24 13:55:06 -0400", "message": "Make AS before table alias optional, i.e. dialect based (#2179)"}, {"oid": "101f842daa06095652f898bda0f96fead4bb373e", "committedDate": "2021-08-05 14:37:57 -0500", "message": "GraphQL schema now namespaces internal types to avoid conflicts (#2237)"}, {"oid": "a874733a5c2ac3777e5946f6eddfade651d80c7a", "committedDate": "2021-08-06 17:30:43 -0500", "message": "Fix bug where dialect time conversion is skipped (#2238)"}, {"oid": "b88c19ef352c7bff44d4375d4a5f3e6b55054c3e", "committedDate": "2021-10-14 16:42:33 -0500", "message": "Aggregation Store: Make EntityHydrator stream results. (#2333)"}, {"oid": "830b9f2a997eefcd677090875bede2e21e19f1f4", "committedDate": "2021-10-20 14:48:56 -0500", "message": "Support 'hidden' flag for analytic models and fields. (#2357)"}, {"oid": "38b030daa701f205215b56199705f3d689726527", "committedDate": "2021-11-29 16:30:05 -0600", "message": "Enum filter fix (#2422)"}, {"oid": "54cdcb9fe67225cd463e1bf9357f0e1d2a42c152", "committedDate": "2021-12-02 15:11:51 -0600", "message": "HJSON Configuration Models and DataStore (#2418)"}, {"oid": "6b2b60098436a3dd7db03697ffd4717122fa3bf6", "committedDate": "2022-01-04 13:51:45 -0600", "message": "use query with filter to populate query parameters in pagination (#2466)"}, {"oid": "d0552c5750608391d52e3e3286469901726a7d06", "committedDate": "2022-01-28 16:02:28 -0600", "message": "Support filters on query plans (#2526)"}, {"oid": "f21f35950fe465cfbf135d06cc8ae2321a29513a", "committedDate": "2023-02-04 15:34:06 -0600", "message": "Elide 7.x (#2876)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE3NTUzMw==", "url": "https://github.com/yahoo/elide/pull/1367#discussion_r436175533", "body": "Let's find a better name than FutureImplementation.  How about QueryResultFuture?", "bodyText": "Let's find a better name than FutureImplementation.  How about QueryResultFuture?", "bodyHTML": "<p dir=\"auto\">Let's find a better name than FutureImplementation.  How about QueryResultFuture?</p>", "author": "aklish", "createdAt": "2020-06-05T21:38:06Z", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java", "diffHunk": "@@ -289,4 +291,28 @@ private SQLQuery toPageTotalSQL(SQLQuery sql) {\n     public static String getClassAlias(Class<?> entityClass) {\n         return getTypeAlias(entityClass);\n     }\n+\n+    /**\n+     * Functional interface for describing a method to supply JpaTransaction.\n+     */\n+    @FunctionalInterface\n+    public interface TransactionCancel {\n+        public void cancel(EntityManager entityManager);\n+    }\n+  \n+    public class FutureImplementation implements Future<QueryResult> {\n+        private final TransactionCancel transactionCancel;\n+\tprivate final EntityManagerFactory entityManagerFactory;\n+        /**\n+\t * Cancels transaction\n+         */\n+    \t@Override\n+\tprotected FutureImplementation(EntityManagerFactory entityManagerFactory, TransactionCancel transactionCancel) {", "originalCommit": "8e97a518992f9a15ef4ce2c6a9d48fbacabaa1d0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f08727cf16a6ab9570bf506573ee9b5995ecb910", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex b74657044..f0e721383 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -300,19 +309,56 @@ public class SQLQueryEngine extends QueryEngine {\n         public void cancel(EntityManager entityManager);\n     }\n   \n-    public class FutureImplementation implements Future<QueryResult> {\n-        private final TransactionCancel transactionCancel;\n-\tprivate final EntityManagerFactory entityManagerFactory;\n+    public class QueryResultFuture<QueryResult> implements Future<QueryResult> {\n         /**\n-\t * Cancels transaction\n+\t * Future Implementation of Query Result\n          */\n-    \t@Override\n-\tprotected FutureImplementation(EntityManagerFactory entityManagerFactory, TransactionCancel transactionCancel) {\n-\t    this.transactionCancel = transactionCancel;\n-\t    this.entityManagerFactory = entityManagerFactory;\n+\tprivate static enum RESULT {RUNNING, CANCELLED}\n+\tfinal CountDownLatch countDownLatch = new CountDownLatch(1);\n+\tprivate RESUlT Result = RESULT.RUNNING;\t\n+\tprivate QueryResult queryResult;\t\n+\t\n+\tpublic QueryResultFuture() {\n+\t     this.queryResult = queryResult;\n+\t     countDownLatch.countDown();\n \t}\n+\n+        @Override\n+        public QueryResult get() {\n+            countDownLatch.await();\n+            return queryResult;\n+\t}\n+\t\n+\t@Override\n     \tpublic boolean cancel(boolean mayInterruptIfRunning) {\n-            transactionCancel.cancel(entityManagerFactory.createEntityManager());\n-    \t}    \t\n+\t    try {\n+            \ttransactionCancel.cancel(entityManager);\n+\t\tResult = RESULT.CANCELLED;\t\n+            \treturn true;\n+            }\n+\t    catch (Exception e) {\n+\t    \tthrow e;\n+            }\n+    \t}\n+\t\n+\t@Override\n+\tboolean isCancelled() {\n+\t    return Result == RESULT.CANCELLED;\n+\t}\n+\n+\t@Override\n+\tboolean isDone() {\n+\t    return true;\n+\t}\n+\n+\t@Override\n+\t@Override\n+\tpublic QueryResult get(long timeout, TimeUnit unit) throws TimeoutException {\n+\t    if (countDownLatch.await(timeout, unit)) {\n+                return queryResult;\n+            } else {\n+                throw new TimeoutException();\n+            }\n+\t}\n     }\n }\n", "next_change": {"commit": "4e694992ae92fcce5f385921b2180c2c8a5458e4", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex f0e721383..bbff37c6e 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -309,56 +311,18 @@ public class SQLQueryEngine extends QueryEngine {\n         public void cancel(EntityManager entityManager);\n     }\n   \n-    public class QueryResultFuture<QueryResult> implements Future<QueryResult> {\n+    public class QueryResultFuture<V> extends FutureTask<V> {\n         /**\n-\t * Future Implementation of Query Result\n+\t * FutureTask Implementation of Query Result\n          */\n-\tprivate static enum RESULT {RUNNING, CANCELLED}\n-\tfinal CountDownLatch countDownLatch = new CountDownLatch(1);\n-\tprivate RESUlT Result = RESULT.RUNNING;\t\n-\tprivate QueryResult queryResult;\t\n \t\n-\tpublic QueryResultFuture() {\n-\t     this.queryResult = queryResult;\n-\t     countDownLatch.countDown();\n+\tpublic QueryResultFuture(Callable<V> callable) {\n+\t    super(callable);     \n \t}\n \n-        @Override\n-        public QueryResult get() {\n-            countDownLatch.await();\n-            return queryResult;\n-\t}\n-\t\n-\t@Override\n-    \tpublic boolean cancel(boolean mayInterruptIfRunning) {\n-\t    try {\n-            \ttransactionCancel.cancel(entityManager);\n-\t\tResult = RESULT.CANCELLED;\t\n-            \treturn true;\n-            }\n-\t    catch (Exception e) {\n-\t    \tthrow e;\n-            }\n-    \t}\n-\t\n \t@Override\n-\tboolean isCancelled() {\n-\t    return Result == RESULT.CANCELLED;\n-\t}\n-\n-\t@Override\n-\tboolean isDone() {\n-\t    return true;\n-\t}\n-\n-\t@Override\n-\t@Override\n-\tpublic QueryResult get(long timeout, TimeUnit unit) throws TimeoutException {\n-\t    if (countDownLatch.await(timeout, unit)) {\n-                return queryResult;\n-            } else {\n-                throw new TimeoutException();\n-            }\n-\t}\n+    \tpublic boolean cancel(TransactionCancel transactionCancel, EntityManager entityManager) {\n+            transactionCancel.cancel(entityManager);\n+    \t}\t\n     }\n }\n", "next_change": {"commit": "b69bb59dc6373110fb697c9f912cc73857df7c26", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex bbff37c6e..f1ff331b2 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -314,15 +310,15 @@ public class SQLQueryEngine extends QueryEngine {\n     public class QueryResultFuture<V> extends FutureTask<V> {\n         /**\n \t * FutureTask Implementation of Query Result\n-         */\n-\t\n+         */\t\n \tpublic QueryResultFuture(Callable<V> callable) {\n \t    super(callable);     \n \t}\n \n \t@Override\n-    \tpublic boolean cancel(TransactionCancel transactionCancel, EntityManager entityManager) {\n+    \tpublic boolean cancel(boolean mayInterruptIfRunning) {\n             transactionCancel.cancel(entityManager);\n+\t    return true;\n     \t}\t\n     }\n }\n", "next_change": {"commit": "8064be350bc30ffb58923074f4a08d143f3c21c5", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex f1ff331b2..c16063a2a 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -318,7 +319,7 @@ public class SQLQueryEngine extends QueryEngine {\n \t@Override\n     \tpublic boolean cancel(boolean mayInterruptIfRunning) {\n             transactionCancel.cancel(entityManager);\n-\t    return true;\n+\t    return super.cancel(true);\n     \t}\t\n     }\n }\n", "next_change": {"commit": "9a6dbc1186dfd5231d531fe04795a27b68f4fcd2", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex c16063a2a..233d980dc 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -316,10 +315,10 @@ public class SQLQueryEngine extends QueryEngine {\n \t    super(callable);     \n \t}\n \n-\t@Override\n-    \tpublic boolean cancel(boolean mayInterruptIfRunning) {\n+        @Override\n+        public boolean cancel(boolean mayInterruptIfRunning) {\n             transactionCancel.cancel(entityManager);\n-\t    return super.cancel(true);\n-    \t}\t\n+            return super.cancel(true);\n+        }\t\n     }\n }\n", "next_change": {"commit": "07810b7bffcba1c415accbeada4401a05592beca", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 233d980dc..46ed8f487 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -309,16 +309,16 @@ public class SQLQueryEngine extends QueryEngine {\n \n     public class QueryResultFuture<V> extends FutureTask<V> {\n         /**\n-\t * FutureTask Implementation of Query Result\n-         */\t\n-\tpublic QueryResultFuture(Callable<V> callable) {\n-\t    super(callable);     \n-\t}\n+         * FutureTask Implementation of Query Result.\n+         */\n+         public QueryResultFuture(Callable<V> callable) {\n+             super(callable);\n+         }\n \n         @Override\n         public boolean cancel(boolean mayInterruptIfRunning) {\n             transactionCancel.cancel(entityManager);\n             return super.cancel(true);\n-        }\t\n+        }\n     }\n }\n", "next_change": {"commit": "8f1cfb480ee2db34373cee4ca35e5eef6b339a51", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 46ed8f487..b63187a63 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -306,19 +343,4 @@ public class SQLQueryEngine extends QueryEngine {\n     public interface TransactionCancel {\n         public void cancel(EntityManager entityManager);\n     }\n-\n-    public class QueryResultFuture<V> extends FutureTask<V> {\n-        /**\n-         * FutureTask Implementation of Query Result.\n-         */\n-         public QueryResultFuture(Callable<V> callable) {\n-             super(callable);\n-         }\n-\n-        @Override\n-        public boolean cancel(boolean mayInterruptIfRunning) {\n-            transactionCancel.cancel(entityManager);\n-            return super.cancel(true);\n-        }\n-    }\n }\n", "next_change": {"commit": "5094ce020f2de18f1a34294178dd857eba7af5c4", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex b63187a63..5958134d7 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -343,4 +344,4 @@ public class SQLQueryEngine extends QueryEngine {\n     public interface TransactionCancel {\n         public void cancel(EntityManager entityManager);\n     }\n-}\n+}\n\\ No newline at end of file\n", "next_change": {"commit": "d7556cb189b6e83070942c10bdaf33054ecc0f71", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 5958134d7..869de2d9c 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -336,12 +337,4 @@ public class SQLQueryEngine extends QueryEngine {\n     public static String getClassAlias(Class<?> entityClass) {\n         return getTypeAlias(entityClass);\n     }\n-\n-    /**\n-     * Functional interface for describing a method to supply JpaTransaction.\n-     */\n-    @FunctionalInterface\n-    public interface TransactionCancel {\n-        public void cancel(EntityManager entityManager);\n-    }\n-}\n\\ No newline at end of file\n+}\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "ff86c56fde9064e1719ea35660fd04c42c949662", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex b74657044..869de2d9c 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -291,28 +337,4 @@ public class SQLQueryEngine extends QueryEngine {\n     public static String getClassAlias(Class<?> entityClass) {\n         return getTypeAlias(entityClass);\n     }\n-\n-    /**\n-     * Functional interface for describing a method to supply JpaTransaction.\n-     */\n-    @FunctionalInterface\n-    public interface TransactionCancel {\n-        public void cancel(EntityManager entityManager);\n-    }\n-  \n-    public class FutureImplementation implements Future<QueryResult> {\n-        private final TransactionCancel transactionCancel;\n-\tprivate final EntityManagerFactory entityManagerFactory;\n-        /**\n-\t * Cancels transaction\n-         */\n-    \t@Override\n-\tprotected FutureImplementation(EntityManagerFactory entityManagerFactory, TransactionCancel transactionCancel) {\n-\t    this.transactionCancel = transactionCancel;\n-\t    this.entityManagerFactory = entityManagerFactory;\n-\t}\n-    \tpublic boolean cancel(boolean mayInterruptIfRunning) {\n-            transactionCancel.cancel(entityManagerFactory.createEntityManager());\n-    \t}    \t\n-    }\n }\n", "next_change": {"commit": "ca35ad817f2fde68b2f9c39d0d4d9c9d44ebffd5", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 869de2d9c..9c79e5997 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -337,4 +417,66 @@ public class SQLQueryEngine extends QueryEngine {\n     public static String getClassAlias(Class<?> entityClass) {\n         return getTypeAlias(entityClass);\n     }\n+\n+    private static boolean returnPageTotals(Pagination pagination) {\n+        return pagination != null && pagination.returnPageTotals();\n+    }\n+\n+    /**\n+     * Gets required ConnectionDetails.\n+     * @param connectionName Connection Name.\n+     * @return ConnectionDetails ConnectionDetails Object for this connection.\n+     */\n+    private ConnectionDetails getConnectionDetails(String connectionName) {\n+        if (connectionName == null || connectionName.trim().isEmpty()) {\n+            return defaultConnectionDetails;\n+        } else {\n+            return Optional.ofNullable(connectionDetailsMap.get(connectionName))\n+                            .orElseThrow(() -> new IllegalStateException(\n+                                            \"ConnectionDetails undefined for DB Connection Name: \" + connectionName));\n+        }\n+    }\n+\n+    /**\n+     * Cancels NamedParamPreparedStatement, hides and logs any SQLException.\n+     * @param stmt NamedParamPreparedStatement to cancel.\n+     */\n+    private static void cancelSoftly(NamedParamPreparedStatement stmt) {\n+        try {\n+            if (stmt != null && !stmt.isClosed()) {\n+                stmt.cancel();\n+            }\n+        } catch (SQLException e) {\n+            log.error(\"Exception encountered during cancel statement.\", e);\n+        }\n+    }\n+\n+    /**\n+     * Cancels and Closes NamedParamPreparedStatement, hides and logs any SQLException.\n+     * @param stmt NamedParamPreparedStatement to close.\n+     */\n+    private static void cancelAndCloseSoftly(NamedParamPreparedStatement stmt) {\n+        cancelSoftly(stmt);\n+        try {\n+            if (stmt != null && !stmt.isClosed()) {\n+                stmt.close();\n+            }\n+        } catch (SQLException e) {\n+            log.error(\"Exception encountered during close statement.\", e);\n+        }\n+    }\n+\n+    /**\n+     * Closes Connection, hides and logs any SQLException.\n+     * @param conn Connection to close.\n+     */\n+    private static void closeSoftly(Connection conn) {\n+        try {\n+            if (conn != null) {\n+                conn.close();\n+            }\n+        } catch (SQLException e) {\n+            log.error(\"Exception encountered during close connection.\", e);\n+        }\n+    }\n }\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "ff86c56fde9064e1719ea35660fd04c42c949662", "message": "Merge commit", "committedDate": null}, {"oid": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "parent a14ccfbb7b558d27799b4e7b1916850519639708 author Jack (\uc815\ud658) <QubitPi@users.noreply.github.com> 1559678988 -0700 committer Aaron Klish <klish@verizonmedia.com> 1589583449 -0500"}, {"oid": "3f34e76977a5a591eca1f8c00ac986562a38d250", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Introduce QueryResult class for QueryEngine caching (#1333)"}, {"oid": "81dde7567aa8a6a00822a9a8f0bf901806a962e8", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add caching support to SQLQueryEngine (#1319)"}, {"oid": "9c897058ce0b9656bf2aef2318d0addc474f278a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "implement cancel function (#1367)"}, {"oid": "8fece2b8f1b3078ce2598ddb03dca66bb984df46", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Aggregation DataStore QueryLogger Implementation (#1448)"}, {"oid": "61ac33e39ba94617114273238754be32b006735b", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add SQLDialect implementations and tests. (#1487)"}, {"oid": "ca35ad817f2fde68b2f9c39d0d4d9c9d44ebffd5", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Query Engine and Aggregation Store Changes for Multi Data Source Support (#1523)"}, {"oid": "11e5083ef0755c62f86c287cf73c376d6c8b8c40", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Refactor query plan (#1579)"}, {"oid": "df3ea922a7550ec35585ce289e1d74101c4f28e4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5: Decouple query and metadata (#1585)"}, {"oid": "dc254e6a99100c21abd94eac3f0252bb9c5029df", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Support nested queries (#1591)"}, {"oid": "9057572200f962b7735270005cd9b51c368c0a0b", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5: Sketch out support for nested query plans. (#1594)"}, {"oid": "7daf58155ba6980d10a0171f72ea32a05af1ac6a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Added SQL Generation Tests for Nested Aggregation Queries (#1602)"}, {"oid": "e140eebdb89d74eb0f16fc8b157c6223cbb07992", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Refactor dbconnection (#1622)"}, {"oid": "df24aa71c283e12d2489982300580cfa80c9755c", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Migrate metadatacalls to metadata store (#1624)"}, {"oid": "c6f23dd421705b7a93be8823310143e6b631c7e4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Quote all identifiers in SQL query (#1621)"}, {"oid": "1dac58a1a989bbc3db52e87b77d19a5077c5ea5b", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Attempt to run explain query tests against H2 in compliance mode against targeted databases (#1633)"}, {"oid": "49e61867e840d9818993879436d5db1aad964c9a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Move data store interfaces (#1671)"}, {"oid": "911d29408bdeeb4ff8d78f2beea2417be4e7c673", "committedDate": "2020-12-11 16:20:28 -0600", "message": "cleaned up package hierarchy for elide-core (#1672)"}, {"oid": "c14096bec256faf80e7674fbef22bccff1f955a3", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Moved contrib.dynamicconfighelpers to modelconfig package (#1676)"}, {"oid": "bea43ef0f244ba01c2f7d4216b9f08f0ef4e83a4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Optionally compile hjson configs while running CLI (#1693)"}, {"oid": "172f3833738466c50648a2f4c3644eae46706aa2", "committedDate": "2021-01-12 15:51:35 -0600", "message": "Issue#1750 Fix SQL query generation for record count"}, {"oid": "979561b9129a15723594d23fbef0c584788ce100", "committedDate": "2021-01-19 10:59:36 -0600", "message": "add druid dialect with new pagination query structure"}, {"oid": "ccbcbcb65f7cae54ede4cd5242ecb19a8f84368c", "committedDate": "2021-01-19 10:59:36 -0600", "message": "change all count distinct queries to group by query for pagination"}, {"oid": "3f79dc112b211df777ab5fee15c27671c0f1bcdf", "committedDate": "2021-01-19 10:59:36 -0600", "message": "return null if no dimension projection is available."}, {"oid": "beb2cdfa0cd863756e7b095c0a58c733e484a944", "committedDate": "2021-01-19 10:59:36 -0600", "message": "address comments"}, {"oid": "17152126cb2f014076efd84ac3fd3be233f25c64", "committedDate": "2021-01-19 10:59:36 -0600", "message": "fix null pointer exception and add test case"}, {"oid": "f88b63d286d73d3774558b24f16aef0bb0be6d1a", "committedDate": "2021-01-19 14:16:37 -0600", "message": "Initial Commit for Type changes"}, {"oid": "ba73bc2a5617fed8feeee5b419a0f0808081628f", "committedDate": "2021-02-04 11:31:56 -0600", "message": "Elide 5 Agg Store: Multiple time grains (#1806)"}, {"oid": "8274a6341e06c7201049e8e8f0a48f07bd99a0ef", "committedDate": "2021-03-10 16:38:34 -0600", "message": "Cleanup IDE warnings (#1894)"}, {"oid": "c19d8c2237e960d792dc2ef6375356433b4fac21", "committedDate": "2021-03-11 17:10:26 -0600", "message": "Classtype cleanup (#1905)"}, {"oid": "212dcab497c321f67b66d619748b023201f2c819", "committedDate": "2021-03-16 10:13:31 -0500", "message": "Remove source from ColumnProjection (#1918)"}, {"oid": "e1e07dbeabb690560754c84200b67e7a8d4d9229", "committedDate": "2021-03-22 09:06:06 -0500", "message": "Part 4 of Query Plan Optimization : Fix Metric Nesting (#1924)"}, {"oid": "ed941827e1027083367b4df9794501909279c667", "committedDate": "2021-03-25 22:55:35 -0400", "message": "diamonds to reduce duplication (#1947)"}, {"oid": "5aa899ebbc6af4bfb538a4c04deef2218348a178", "committedDate": "2021-03-26 01:03:25 -0400", "message": "Issue 1929 - define function as lambda (#1945)"}, {"oid": "dc7a367e14c9f43b2d013f5037341055a29f0491", "committedDate": "2021-03-26 10:31:26 -0400", "message": "Issue 1929 - Address Sonar suggestions (#1925)"}, {"oid": "cd008a45ad379004b92c5114150016027aa07b80", "committedDate": "2021-03-26 10:35:48 -0500", "message": "Query plan optimizer phase5 (#1961)"}, {"oid": "234905d972c491934ce3774771c9733193b45007", "committedDate": "2021-04-01 10:20:16 -0500", "message": "Phase 6: Query Optimization - Calcite parser (#1976)"}, {"oid": "7a0b59711bb5e269afbc6b15426a8aff94a5e447", "committedDate": "2021-04-01 14:51:05 -0500", "message": "Removed QueryPlanResolver.  Replaced it with MetricProjectionMaker.  Small fix to Calcite parser builder to use the SQL conformance of the underlying dialect (#1980)"}, {"oid": "43598e8411d544b31d9807ded4f248e25ef334a4", "committedDate": "2021-04-01 17:32:17 -0500", "message": "Add Table Level Query Hints (#1981)"}, {"oid": "89e96b0bb45da69b08e6c8df6d8d7d23090eec37", "committedDate": "2021-04-22 17:56:53 -0400", "message": "Resolution using Table Context (#2004)"}, {"oid": "53b23330ff54b12041e530a931329986ddd3e454", "committedDate": "2021-04-28 13:29:43 -0400", "message": "Aggregation Store: Namespace Metadata changes (#2037)"}, {"oid": "256ca8e18dbae4b8ff6c1adbd8e37b236ef5e575", "committedDate": "2021-05-03 11:58:57 -0400", "message": "Refactor Column Projections (#2049)"}, {"oid": "d21f942a219ba7f32757f334d7e61c78e126d6be", "committedDate": "2021-05-04 15:24:11 -0500", "message": "Use only queried column args & default args for logical column expansion (#2054)"}, {"oid": "d2843b24f4a1ed35907726ff62f09049ce37d081", "committedDate": "2021-05-06 10:54:37 -0500", "message": "Optional flow (#2069)"}, {"oid": "1bb35bea711c420f00cfd97596dfa9177e15277e", "committedDate": "2021-05-10 14:36:06 -0500", "message": "Populating namespaces in metadatastore (#2071)"}, {"oid": "0a3776bacb5809845d9a04a1263db9760f117b92", "committedDate": "2021-05-13 13:25:15 -0500", "message": "Injection Protection for parameterized metrics/dimensions (#2090)"}, {"oid": "35e214dd718e164e30529eff4feab4d5fcd62d27", "committedDate": "2021-05-13 16:25:00 -0400", "message": "Resolve arguments in FromSubquery (#2089)"}, {"oid": "bf246b21912e4b299e4330089198ba2eee01fbec", "committedDate": "2021-05-13 17:30:24 -0500", "message": "Generate dynamic alias for join source (#2065)"}, {"oid": "32856f2244a3334028099eeb7ecd13b69fa41016", "committedDate": "2021-05-18 11:21:54 -0500", "message": "Aggregation Store ID Column Metadata (#2099)"}, {"oid": "e1c93d9f34829c4ee142a4919b5fde26502eaa11", "committedDate": "2021-05-19 17:24:06 -0400", "message": "Verify table arguments. (#2110)"}, {"oid": "b2eadb111297a8167f2715e027b9284c765adb32", "committedDate": "2021-05-20 16:42:02 -0400", "message": "Verify column arguments. (#2114)"}, {"oid": "4b8310f782f755f20fa79b52b7e4d13480b140f9", "committedDate": "2021-05-21 10:06:37 -0500", "message": "Remove usage of SQLReferenceTable. (#2116)"}, {"oid": "f9c2304cdbd7a1fb0f62cb024a19b2f2335832f2", "committedDate": "2021-06-24 13:55:06 -0400", "message": "Make AS before table alias optional, i.e. dialect based (#2179)"}, {"oid": "101f842daa06095652f898bda0f96fead4bb373e", "committedDate": "2021-08-05 14:37:57 -0500", "message": "GraphQL schema now namespaces internal types to avoid conflicts (#2237)"}, {"oid": "a874733a5c2ac3777e5946f6eddfade651d80c7a", "committedDate": "2021-08-06 17:30:43 -0500", "message": "Fix bug where dialect time conversion is skipped (#2238)"}, {"oid": "b88c19ef352c7bff44d4375d4a5f3e6b55054c3e", "committedDate": "2021-10-14 16:42:33 -0500", "message": "Aggregation Store: Make EntityHydrator stream results. (#2333)"}, {"oid": "830b9f2a997eefcd677090875bede2e21e19f1f4", "committedDate": "2021-10-20 14:48:56 -0500", "message": "Support 'hidden' flag for analytic models and fields. (#2357)"}, {"oid": "38b030daa701f205215b56199705f3d689726527", "committedDate": "2021-11-29 16:30:05 -0600", "message": "Enum filter fix (#2422)"}, {"oid": "54cdcb9fe67225cd463e1bf9357f0e1d2a42c152", "committedDate": "2021-12-02 15:11:51 -0600", "message": "HJSON Configuration Models and DataStore (#2418)"}, {"oid": "6b2b60098436a3dd7db03697ffd4717122fa3bf6", "committedDate": "2022-01-04 13:51:45 -0600", "message": "use query with filter to populate query parameters in pagination (#2466)"}, {"oid": "d0552c5750608391d52e3e3286469901726a7d06", "committedDate": "2022-01-28 16:02:28 -0600", "message": "Support filters on query plans (#2526)"}, {"oid": "f21f35950fe465cfbf135d06cc8ae2321a29513a", "committedDate": "2023-02-04 15:34:06 -0600", "message": "Elide 7.x (#2876)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE3NTY4OQ==", "url": "https://github.com/yahoo/elide/pull/1367#discussion_r436175689", "body": "Add ```@Override```.", "bodyText": "Add @Override.", "bodyHTML": "<p dir=\"auto\">Add <code>@Override</code>.</p>", "author": "aklish", "createdAt": "2020-06-05T21:38:33Z", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java", "diffHunk": "@@ -289,4 +291,28 @@ private SQLQuery toPageTotalSQL(SQLQuery sql) {\n     public static String getClassAlias(Class<?> entityClass) {\n         return getTypeAlias(entityClass);\n     }\n+\n+    /**\n+     * Functional interface for describing a method to supply JpaTransaction.\n+     */\n+    @FunctionalInterface\n+    public interface TransactionCancel {\n+        public void cancel(EntityManager entityManager);\n+    }\n+  \n+    public class FutureImplementation implements Future<QueryResult> {\n+        private final TransactionCancel transactionCancel;\n+\tprivate final EntityManagerFactory entityManagerFactory;\n+        /**\n+\t * Cancels transaction\n+         */\n+    \t@Override\n+\tprotected FutureImplementation(EntityManagerFactory entityManagerFactory, TransactionCancel transactionCancel) {\n+\t    this.transactionCancel = transactionCancel;\n+\t    this.entityManagerFactory = entityManagerFactory;\n+\t}\n+    \tpublic boolean cancel(boolean mayInterruptIfRunning) {", "originalCommit": "8e97a518992f9a15ef4ce2c6a9d48fbacabaa1d0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f08727cf16a6ab9570bf506573ee9b5995ecb910", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex b74657044..f0e721383 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -300,19 +309,56 @@ public class SQLQueryEngine extends QueryEngine {\n         public void cancel(EntityManager entityManager);\n     }\n   \n-    public class FutureImplementation implements Future<QueryResult> {\n-        private final TransactionCancel transactionCancel;\n-\tprivate final EntityManagerFactory entityManagerFactory;\n+    public class QueryResultFuture<QueryResult> implements Future<QueryResult> {\n         /**\n-\t * Cancels transaction\n+\t * Future Implementation of Query Result\n          */\n-    \t@Override\n-\tprotected FutureImplementation(EntityManagerFactory entityManagerFactory, TransactionCancel transactionCancel) {\n-\t    this.transactionCancel = transactionCancel;\n-\t    this.entityManagerFactory = entityManagerFactory;\n+\tprivate static enum RESULT {RUNNING, CANCELLED}\n+\tfinal CountDownLatch countDownLatch = new CountDownLatch(1);\n+\tprivate RESUlT Result = RESULT.RUNNING;\t\n+\tprivate QueryResult queryResult;\t\n+\t\n+\tpublic QueryResultFuture() {\n+\t     this.queryResult = queryResult;\n+\t     countDownLatch.countDown();\n \t}\n+\n+        @Override\n+        public QueryResult get() {\n+            countDownLatch.await();\n+            return queryResult;\n+\t}\n+\t\n+\t@Override\n     \tpublic boolean cancel(boolean mayInterruptIfRunning) {\n-            transactionCancel.cancel(entityManagerFactory.createEntityManager());\n-    \t}    \t\n+\t    try {\n+            \ttransactionCancel.cancel(entityManager);\n+\t\tResult = RESULT.CANCELLED;\t\n+            \treturn true;\n+            }\n+\t    catch (Exception e) {\n+\t    \tthrow e;\n+            }\n+    \t}\n+\t\n+\t@Override\n+\tboolean isCancelled() {\n+\t    return Result == RESULT.CANCELLED;\n+\t}\n+\n+\t@Override\n+\tboolean isDone() {\n+\t    return true;\n+\t}\n+\n+\t@Override\n+\t@Override\n+\tpublic QueryResult get(long timeout, TimeUnit unit) throws TimeoutException {\n+\t    if (countDownLatch.await(timeout, unit)) {\n+                return queryResult;\n+            } else {\n+                throw new TimeoutException();\n+            }\n+\t}\n     }\n }\n", "next_change": {"commit": "4e694992ae92fcce5f385921b2180c2c8a5458e4", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex f0e721383..bbff37c6e 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -309,56 +311,18 @@ public class SQLQueryEngine extends QueryEngine {\n         public void cancel(EntityManager entityManager);\n     }\n   \n-    public class QueryResultFuture<QueryResult> implements Future<QueryResult> {\n+    public class QueryResultFuture<V> extends FutureTask<V> {\n         /**\n-\t * Future Implementation of Query Result\n+\t * FutureTask Implementation of Query Result\n          */\n-\tprivate static enum RESULT {RUNNING, CANCELLED}\n-\tfinal CountDownLatch countDownLatch = new CountDownLatch(1);\n-\tprivate RESUlT Result = RESULT.RUNNING;\t\n-\tprivate QueryResult queryResult;\t\n \t\n-\tpublic QueryResultFuture() {\n-\t     this.queryResult = queryResult;\n-\t     countDownLatch.countDown();\n+\tpublic QueryResultFuture(Callable<V> callable) {\n+\t    super(callable);     \n \t}\n \n-        @Override\n-        public QueryResult get() {\n-            countDownLatch.await();\n-            return queryResult;\n-\t}\n-\t\n-\t@Override\n-    \tpublic boolean cancel(boolean mayInterruptIfRunning) {\n-\t    try {\n-            \ttransactionCancel.cancel(entityManager);\n-\t\tResult = RESULT.CANCELLED;\t\n-            \treturn true;\n-            }\n-\t    catch (Exception e) {\n-\t    \tthrow e;\n-            }\n-    \t}\n-\t\n \t@Override\n-\tboolean isCancelled() {\n-\t    return Result == RESULT.CANCELLED;\n-\t}\n-\n-\t@Override\n-\tboolean isDone() {\n-\t    return true;\n-\t}\n-\n-\t@Override\n-\t@Override\n-\tpublic QueryResult get(long timeout, TimeUnit unit) throws TimeoutException {\n-\t    if (countDownLatch.await(timeout, unit)) {\n-                return queryResult;\n-            } else {\n-                throw new TimeoutException();\n-            }\n-\t}\n+    \tpublic boolean cancel(TransactionCancel transactionCancel, EntityManager entityManager) {\n+            transactionCancel.cancel(entityManager);\n+    \t}\t\n     }\n }\n", "next_change": {"commit": "b69bb59dc6373110fb697c9f912cc73857df7c26", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex bbff37c6e..f1ff331b2 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -314,15 +310,15 @@ public class SQLQueryEngine extends QueryEngine {\n     public class QueryResultFuture<V> extends FutureTask<V> {\n         /**\n \t * FutureTask Implementation of Query Result\n-         */\n-\t\n+         */\t\n \tpublic QueryResultFuture(Callable<V> callable) {\n \t    super(callable);     \n \t}\n \n \t@Override\n-    \tpublic boolean cancel(TransactionCancel transactionCancel, EntityManager entityManager) {\n+    \tpublic boolean cancel(boolean mayInterruptIfRunning) {\n             transactionCancel.cancel(entityManager);\n+\t    return true;\n     \t}\t\n     }\n }\n", "next_change": {"commit": "8064be350bc30ffb58923074f4a08d143f3c21c5", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex f1ff331b2..c16063a2a 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -318,7 +319,7 @@ public class SQLQueryEngine extends QueryEngine {\n \t@Override\n     \tpublic boolean cancel(boolean mayInterruptIfRunning) {\n             transactionCancel.cancel(entityManager);\n-\t    return true;\n+\t    return super.cancel(true);\n     \t}\t\n     }\n }\n", "next_change": {"commit": "9a6dbc1186dfd5231d531fe04795a27b68f4fcd2", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex c16063a2a..233d980dc 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -316,10 +315,10 @@ public class SQLQueryEngine extends QueryEngine {\n \t    super(callable);     \n \t}\n \n-\t@Override\n-    \tpublic boolean cancel(boolean mayInterruptIfRunning) {\n+        @Override\n+        public boolean cancel(boolean mayInterruptIfRunning) {\n             transactionCancel.cancel(entityManager);\n-\t    return super.cancel(true);\n-    \t}\t\n+            return super.cancel(true);\n+        }\t\n     }\n }\n", "next_change": {"commit": "07810b7bffcba1c415accbeada4401a05592beca", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 233d980dc..46ed8f487 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -309,16 +309,16 @@ public class SQLQueryEngine extends QueryEngine {\n \n     public class QueryResultFuture<V> extends FutureTask<V> {\n         /**\n-\t * FutureTask Implementation of Query Result\n-         */\t\n-\tpublic QueryResultFuture(Callable<V> callable) {\n-\t    super(callable);     \n-\t}\n+         * FutureTask Implementation of Query Result.\n+         */\n+         public QueryResultFuture(Callable<V> callable) {\n+             super(callable);\n+         }\n \n         @Override\n         public boolean cancel(boolean mayInterruptIfRunning) {\n             transactionCancel.cancel(entityManager);\n             return super.cancel(true);\n-        }\t\n+        }\n     }\n }\n", "next_change": {"commit": "8f1cfb480ee2db34373cee4ca35e5eef6b339a51", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 46ed8f487..b63187a63 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -306,19 +343,4 @@ public class SQLQueryEngine extends QueryEngine {\n     public interface TransactionCancel {\n         public void cancel(EntityManager entityManager);\n     }\n-\n-    public class QueryResultFuture<V> extends FutureTask<V> {\n-        /**\n-         * FutureTask Implementation of Query Result.\n-         */\n-         public QueryResultFuture(Callable<V> callable) {\n-             super(callable);\n-         }\n-\n-        @Override\n-        public boolean cancel(boolean mayInterruptIfRunning) {\n-            transactionCancel.cancel(entityManager);\n-            return super.cancel(true);\n-        }\n-    }\n }\n", "next_change": {"commit": "5094ce020f2de18f1a34294178dd857eba7af5c4", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex b63187a63..5958134d7 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -343,4 +344,4 @@ public class SQLQueryEngine extends QueryEngine {\n     public interface TransactionCancel {\n         public void cancel(EntityManager entityManager);\n     }\n-}\n+}\n\\ No newline at end of file\n", "next_change": {"commit": "d7556cb189b6e83070942c10bdaf33054ecc0f71", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 5958134d7..869de2d9c 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -336,12 +337,4 @@ public class SQLQueryEngine extends QueryEngine {\n     public static String getClassAlias(Class<?> entityClass) {\n         return getTypeAlias(entityClass);\n     }\n-\n-    /**\n-     * Functional interface for describing a method to supply JpaTransaction.\n-     */\n-    @FunctionalInterface\n-    public interface TransactionCancel {\n-        public void cancel(EntityManager entityManager);\n-    }\n-}\n\\ No newline at end of file\n+}\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "ff86c56fde9064e1719ea35660fd04c42c949662", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex b74657044..869de2d9c 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -291,28 +337,4 @@ public class SQLQueryEngine extends QueryEngine {\n     public static String getClassAlias(Class<?> entityClass) {\n         return getTypeAlias(entityClass);\n     }\n-\n-    /**\n-     * Functional interface for describing a method to supply JpaTransaction.\n-     */\n-    @FunctionalInterface\n-    public interface TransactionCancel {\n-        public void cancel(EntityManager entityManager);\n-    }\n-  \n-    public class FutureImplementation implements Future<QueryResult> {\n-        private final TransactionCancel transactionCancel;\n-\tprivate final EntityManagerFactory entityManagerFactory;\n-        /**\n-\t * Cancels transaction\n-         */\n-    \t@Override\n-\tprotected FutureImplementation(EntityManagerFactory entityManagerFactory, TransactionCancel transactionCancel) {\n-\t    this.transactionCancel = transactionCancel;\n-\t    this.entityManagerFactory = entityManagerFactory;\n-\t}\n-    \tpublic boolean cancel(boolean mayInterruptIfRunning) {\n-            transactionCancel.cancel(entityManagerFactory.createEntityManager());\n-    \t}    \t\n-    }\n }\n", "next_change": {"commit": "ca35ad817f2fde68b2f9c39d0d4d9c9d44ebffd5", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 869de2d9c..9c79e5997 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -337,4 +417,66 @@ public class SQLQueryEngine extends QueryEngine {\n     public static String getClassAlias(Class<?> entityClass) {\n         return getTypeAlias(entityClass);\n     }\n+\n+    private static boolean returnPageTotals(Pagination pagination) {\n+        return pagination != null && pagination.returnPageTotals();\n+    }\n+\n+    /**\n+     * Gets required ConnectionDetails.\n+     * @param connectionName Connection Name.\n+     * @return ConnectionDetails ConnectionDetails Object for this connection.\n+     */\n+    private ConnectionDetails getConnectionDetails(String connectionName) {\n+        if (connectionName == null || connectionName.trim().isEmpty()) {\n+            return defaultConnectionDetails;\n+        } else {\n+            return Optional.ofNullable(connectionDetailsMap.get(connectionName))\n+                            .orElseThrow(() -> new IllegalStateException(\n+                                            \"ConnectionDetails undefined for DB Connection Name: \" + connectionName));\n+        }\n+    }\n+\n+    /**\n+     * Cancels NamedParamPreparedStatement, hides and logs any SQLException.\n+     * @param stmt NamedParamPreparedStatement to cancel.\n+     */\n+    private static void cancelSoftly(NamedParamPreparedStatement stmt) {\n+        try {\n+            if (stmt != null && !stmt.isClosed()) {\n+                stmt.cancel();\n+            }\n+        } catch (SQLException e) {\n+            log.error(\"Exception encountered during cancel statement.\", e);\n+        }\n+    }\n+\n+    /**\n+     * Cancels and Closes NamedParamPreparedStatement, hides and logs any SQLException.\n+     * @param stmt NamedParamPreparedStatement to close.\n+     */\n+    private static void cancelAndCloseSoftly(NamedParamPreparedStatement stmt) {\n+        cancelSoftly(stmt);\n+        try {\n+            if (stmt != null && !stmt.isClosed()) {\n+                stmt.close();\n+            }\n+        } catch (SQLException e) {\n+            log.error(\"Exception encountered during close statement.\", e);\n+        }\n+    }\n+\n+    /**\n+     * Closes Connection, hides and logs any SQLException.\n+     * @param conn Connection to close.\n+     */\n+    private static void closeSoftly(Connection conn) {\n+        try {\n+            if (conn != null) {\n+                conn.close();\n+            }\n+        } catch (SQLException e) {\n+            log.error(\"Exception encountered during close connection.\", e);\n+        }\n+    }\n }\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "ff86c56fde9064e1719ea35660fd04c42c949662", "message": "Merge commit", "committedDate": null}, {"oid": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "parent a14ccfbb7b558d27799b4e7b1916850519639708 author Jack (\uc815\ud658) <QubitPi@users.noreply.github.com> 1559678988 -0700 committer Aaron Klish <klish@verizonmedia.com> 1589583449 -0500"}, {"oid": "3f34e76977a5a591eca1f8c00ac986562a38d250", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Introduce QueryResult class for QueryEngine caching (#1333)"}, {"oid": "81dde7567aa8a6a00822a9a8f0bf901806a962e8", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add caching support to SQLQueryEngine (#1319)"}, {"oid": "9c897058ce0b9656bf2aef2318d0addc474f278a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "implement cancel function (#1367)"}, {"oid": "8fece2b8f1b3078ce2598ddb03dca66bb984df46", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Aggregation DataStore QueryLogger Implementation (#1448)"}, {"oid": "61ac33e39ba94617114273238754be32b006735b", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add SQLDialect implementations and tests. (#1487)"}, {"oid": "ca35ad817f2fde68b2f9c39d0d4d9c9d44ebffd5", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Query Engine and Aggregation Store Changes for Multi Data Source Support (#1523)"}, {"oid": "11e5083ef0755c62f86c287cf73c376d6c8b8c40", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Refactor query plan (#1579)"}, {"oid": "df3ea922a7550ec35585ce289e1d74101c4f28e4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5: Decouple query and metadata (#1585)"}, {"oid": "dc254e6a99100c21abd94eac3f0252bb9c5029df", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Support nested queries (#1591)"}, {"oid": "9057572200f962b7735270005cd9b51c368c0a0b", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5: Sketch out support for nested query plans. (#1594)"}, {"oid": "7daf58155ba6980d10a0171f72ea32a05af1ac6a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Added SQL Generation Tests for Nested Aggregation Queries (#1602)"}, {"oid": "e140eebdb89d74eb0f16fc8b157c6223cbb07992", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Refactor dbconnection (#1622)"}, {"oid": "df24aa71c283e12d2489982300580cfa80c9755c", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Migrate metadatacalls to metadata store (#1624)"}, {"oid": "c6f23dd421705b7a93be8823310143e6b631c7e4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Quote all identifiers in SQL query (#1621)"}, {"oid": "1dac58a1a989bbc3db52e87b77d19a5077c5ea5b", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Attempt to run explain query tests against H2 in compliance mode against targeted databases (#1633)"}, {"oid": "49e61867e840d9818993879436d5db1aad964c9a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Move data store interfaces (#1671)"}, {"oid": "911d29408bdeeb4ff8d78f2beea2417be4e7c673", "committedDate": "2020-12-11 16:20:28 -0600", "message": "cleaned up package hierarchy for elide-core (#1672)"}, {"oid": "c14096bec256faf80e7674fbef22bccff1f955a3", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Moved contrib.dynamicconfighelpers to modelconfig package (#1676)"}, {"oid": "bea43ef0f244ba01c2f7d4216b9f08f0ef4e83a4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Optionally compile hjson configs while running CLI (#1693)"}, {"oid": "172f3833738466c50648a2f4c3644eae46706aa2", "committedDate": "2021-01-12 15:51:35 -0600", "message": "Issue#1750 Fix SQL query generation for record count"}, {"oid": "979561b9129a15723594d23fbef0c584788ce100", "committedDate": "2021-01-19 10:59:36 -0600", "message": "add druid dialect with new pagination query structure"}, {"oid": "ccbcbcb65f7cae54ede4cd5242ecb19a8f84368c", "committedDate": "2021-01-19 10:59:36 -0600", "message": "change all count distinct queries to group by query for pagination"}, {"oid": "3f79dc112b211df777ab5fee15c27671c0f1bcdf", "committedDate": "2021-01-19 10:59:36 -0600", "message": "return null if no dimension projection is available."}, {"oid": "beb2cdfa0cd863756e7b095c0a58c733e484a944", "committedDate": "2021-01-19 10:59:36 -0600", "message": "address comments"}, {"oid": "17152126cb2f014076efd84ac3fd3be233f25c64", "committedDate": "2021-01-19 10:59:36 -0600", "message": "fix null pointer exception and add test case"}, {"oid": "f88b63d286d73d3774558b24f16aef0bb0be6d1a", "committedDate": "2021-01-19 14:16:37 -0600", "message": "Initial Commit for Type changes"}, {"oid": "ba73bc2a5617fed8feeee5b419a0f0808081628f", "committedDate": "2021-02-04 11:31:56 -0600", "message": "Elide 5 Agg Store: Multiple time grains (#1806)"}, {"oid": "8274a6341e06c7201049e8e8f0a48f07bd99a0ef", "committedDate": "2021-03-10 16:38:34 -0600", "message": "Cleanup IDE warnings (#1894)"}, {"oid": "c19d8c2237e960d792dc2ef6375356433b4fac21", "committedDate": "2021-03-11 17:10:26 -0600", "message": "Classtype cleanup (#1905)"}, {"oid": "212dcab497c321f67b66d619748b023201f2c819", "committedDate": "2021-03-16 10:13:31 -0500", "message": "Remove source from ColumnProjection (#1918)"}, {"oid": "e1e07dbeabb690560754c84200b67e7a8d4d9229", "committedDate": "2021-03-22 09:06:06 -0500", "message": "Part 4 of Query Plan Optimization : Fix Metric Nesting (#1924)"}, {"oid": "ed941827e1027083367b4df9794501909279c667", "committedDate": "2021-03-25 22:55:35 -0400", "message": "diamonds to reduce duplication (#1947)"}, {"oid": "5aa899ebbc6af4bfb538a4c04deef2218348a178", "committedDate": "2021-03-26 01:03:25 -0400", "message": "Issue 1929 - define function as lambda (#1945)"}, {"oid": "dc7a367e14c9f43b2d013f5037341055a29f0491", "committedDate": "2021-03-26 10:31:26 -0400", "message": "Issue 1929 - Address Sonar suggestions (#1925)"}, {"oid": "cd008a45ad379004b92c5114150016027aa07b80", "committedDate": "2021-03-26 10:35:48 -0500", "message": "Query plan optimizer phase5 (#1961)"}, {"oid": "234905d972c491934ce3774771c9733193b45007", "committedDate": "2021-04-01 10:20:16 -0500", "message": "Phase 6: Query Optimization - Calcite parser (#1976)"}, {"oid": "7a0b59711bb5e269afbc6b15426a8aff94a5e447", "committedDate": "2021-04-01 14:51:05 -0500", "message": "Removed QueryPlanResolver.  Replaced it with MetricProjectionMaker.  Small fix to Calcite parser builder to use the SQL conformance of the underlying dialect (#1980)"}, {"oid": "43598e8411d544b31d9807ded4f248e25ef334a4", "committedDate": "2021-04-01 17:32:17 -0500", "message": "Add Table Level Query Hints (#1981)"}, {"oid": "89e96b0bb45da69b08e6c8df6d8d7d23090eec37", "committedDate": "2021-04-22 17:56:53 -0400", "message": "Resolution using Table Context (#2004)"}, {"oid": "53b23330ff54b12041e530a931329986ddd3e454", "committedDate": "2021-04-28 13:29:43 -0400", "message": "Aggregation Store: Namespace Metadata changes (#2037)"}, {"oid": "256ca8e18dbae4b8ff6c1adbd8e37b236ef5e575", "committedDate": "2021-05-03 11:58:57 -0400", "message": "Refactor Column Projections (#2049)"}, {"oid": "d21f942a219ba7f32757f334d7e61c78e126d6be", "committedDate": "2021-05-04 15:24:11 -0500", "message": "Use only queried column args & default args for logical column expansion (#2054)"}, {"oid": "d2843b24f4a1ed35907726ff62f09049ce37d081", "committedDate": "2021-05-06 10:54:37 -0500", "message": "Optional flow (#2069)"}, {"oid": "1bb35bea711c420f00cfd97596dfa9177e15277e", "committedDate": "2021-05-10 14:36:06 -0500", "message": "Populating namespaces in metadatastore (#2071)"}, {"oid": "0a3776bacb5809845d9a04a1263db9760f117b92", "committedDate": "2021-05-13 13:25:15 -0500", "message": "Injection Protection for parameterized metrics/dimensions (#2090)"}, {"oid": "35e214dd718e164e30529eff4feab4d5fcd62d27", "committedDate": "2021-05-13 16:25:00 -0400", "message": "Resolve arguments in FromSubquery (#2089)"}, {"oid": "bf246b21912e4b299e4330089198ba2eee01fbec", "committedDate": "2021-05-13 17:30:24 -0500", "message": "Generate dynamic alias for join source (#2065)"}, {"oid": "32856f2244a3334028099eeb7ecd13b69fa41016", "committedDate": "2021-05-18 11:21:54 -0500", "message": "Aggregation Store ID Column Metadata (#2099)"}, {"oid": "e1c93d9f34829c4ee142a4919b5fde26502eaa11", "committedDate": "2021-05-19 17:24:06 -0400", "message": "Verify table arguments. (#2110)"}, {"oid": "b2eadb111297a8167f2715e027b9284c765adb32", "committedDate": "2021-05-20 16:42:02 -0400", "message": "Verify column arguments. (#2114)"}, {"oid": "4b8310f782f755f20fa79b52b7e4d13480b140f9", "committedDate": "2021-05-21 10:06:37 -0500", "message": "Remove usage of SQLReferenceTable. (#2116)"}, {"oid": "f9c2304cdbd7a1fb0f62cb024a19b2f2335832f2", "committedDate": "2021-06-24 13:55:06 -0400", "message": "Make AS before table alias optional, i.e. dialect based (#2179)"}, {"oid": "101f842daa06095652f898bda0f96fead4bb373e", "committedDate": "2021-08-05 14:37:57 -0500", "message": "GraphQL schema now namespaces internal types to avoid conflicts (#2237)"}, {"oid": "a874733a5c2ac3777e5946f6eddfade651d80c7a", "committedDate": "2021-08-06 17:30:43 -0500", "message": "Fix bug where dialect time conversion is skipped (#2238)"}, {"oid": "b88c19ef352c7bff44d4375d4a5f3e6b55054c3e", "committedDate": "2021-10-14 16:42:33 -0500", "message": "Aggregation Store: Make EntityHydrator stream results. (#2333)"}, {"oid": "830b9f2a997eefcd677090875bede2e21e19f1f4", "committedDate": "2021-10-20 14:48:56 -0500", "message": "Support 'hidden' flag for analytic models and fields. (#2357)"}, {"oid": "38b030daa701f205215b56199705f3d689726527", "committedDate": "2021-11-29 16:30:05 -0600", "message": "Enum filter fix (#2422)"}, {"oid": "54cdcb9fe67225cd463e1bf9357f0e1d2a42c152", "committedDate": "2021-12-02 15:11:51 -0600", "message": "HJSON Configuration Models and DataStore (#2418)"}, {"oid": "6b2b60098436a3dd7db03697ffd4717122fa3bf6", "committedDate": "2022-01-04 13:51:45 -0600", "message": "use query with filter to populate query parameters in pagination (#2466)"}, {"oid": "d0552c5750608391d52e3e3286469901726a7d06", "committedDate": "2022-01-28 16:02:28 -0600", "message": "Support filters on query plans (#2526)"}, {"oid": "f21f35950fe465cfbf135d06cc8ae2321a29513a", "committedDate": "2023-02-04 15:34:06 -0600", "message": "Elide 7.x (#2876)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE3NjMwMA==", "url": "https://github.com/yahoo/elide/pull/1367#discussion_r436176300", "body": "I don't see the implementation of executeQuery that returns a Future<QueryResult> here.", "bodyText": "I don't see the implementation of executeQuery that returns a Future here.", "bodyHTML": "<p dir=\"auto\">I don't see the implementation of executeQuery that returns a Future here.</p>", "author": "aklish", "createdAt": "2020-06-05T21:40:26Z", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java", "diffHunk": "@@ -60,13 +61,14 @@\n @Slf4j\n public class SQLQueryEngine extends QueryEngine {\n     private final EntityManagerFactory entityManagerFactory;\n-\n+    private final TransactionCancel transactionCancel;", "originalCommit": "8e97a518992f9a15ef4ce2c6a9d48fbacabaa1d0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f08727cf16a6ab9570bf506573ee9b5995ecb910", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex b74657044..f0e721383 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -63,12 +68,13 @@ public class SQLQueryEngine extends QueryEngine {\n     private final EntityManagerFactory entityManagerFactory;\n     private final TransactionCancel transactionCancel;\n     private final SQLReferenceTable referenceTable;\n+    private final EntityManager entityManager = null;    \n \n     public SQLQueryEngine(MetaDataStore metaDataStore, EntityManagerFactory entityManagerFactory, Cache cache, TransactionCancel transactionCancel) {\n         super(metaDataStore, cache);\n         this.entityManagerFactory = entityManagerFactory;\n         this.referenceTable = new SQLReferenceTable(metaDataStore);\n-\tthis.transactionCancel = transactionCancel;\n+        this.transactionCancel = transactionCancel;\n     }\n \n     @Override\n", "next_change": {"commit": "9a6dbc1186dfd5231d531fe04795a27b68f4fcd2", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex f0e721383..233d980dc 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -68,13 +65,13 @@ public class SQLQueryEngine extends QueryEngine {\n     private final EntityManagerFactory entityManagerFactory;\n     private final TransactionCancel transactionCancel;\n     private final SQLReferenceTable referenceTable;\n-    private final EntityManager entityManager = null;    \n+    private final EntityManager entityManager = null;\n \n-    public SQLQueryEngine(MetaDataStore metaDataStore, EntityManagerFactory entityManagerFactory, Cache cache, TransactionCancel transactionCancel) {\n+    public SQLQueryEngine(MetaDataStore metaDataStore, EntityManagerFactory emFactory, Cache cache, TransactionCancel txCancel) {\n         super(metaDataStore, cache);\n-        this.entityManagerFactory = entityManagerFactory;\n+        this.entityManagerFactory = emFactory;\n         this.referenceTable = new SQLReferenceTable(metaDataStore);\n-        this.transactionCancel = transactionCancel;\n+        this.transactionCancel = txCancel;\n     }\n \n     @Override\n", "next_change": {"commit": "07810b7bffcba1c415accbeada4401a05592beca", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 233d980dc..46ed8f487 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -67,10 +67,10 @@ public class SQLQueryEngine extends QueryEngine {\n     private final SQLReferenceTable referenceTable;\n     private final EntityManager entityManager = null;\n \n-    public SQLQueryEngine(MetaDataStore metaDataStore, EntityManagerFactory emFactory, Cache cache, TransactionCancel txCancel) {\n-        super(metaDataStore, cache);\n+    public SQLQueryEngine(MetaDataStore mDStore, EntityManagerFactory emFactory, Cache cx, TransactionCancel txCancel) {\n+        super(metaDataStore, cx);\n         this.entityManagerFactory = emFactory;\n-        this.referenceTable = new SQLReferenceTable(metaDataStore);\n+        this.referenceTable = new SQLReferenceTable(mDStore);\n         this.transactionCancel = txCancel;\n     }\n \n", "next_change": {"commit": "18a8cc9d0da96a239329ca6b6c4b7eecee346b8e", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 46ed8f487..8bca95b2d 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -65,10 +65,10 @@ public class SQLQueryEngine extends QueryEngine {\n     private final EntityManagerFactory entityManagerFactory;\n     private final TransactionCancel transactionCancel;\n     private final SQLReferenceTable referenceTable;\n-    private final EntityManager entityManager = null;\n+    private final EntityManager entityManager;\n \n     public SQLQueryEngine(MetaDataStore mDStore, EntityManagerFactory emFactory, Cache cx, TransactionCancel txCancel) {\n-        super(metaDataStore, cx);\n+        super(mDStore, cx);\n         this.entityManagerFactory = emFactory;\n         this.referenceTable = new SQLReferenceTable(mDStore);\n         this.transactionCancel = txCancel;\n", "next_change": {"commit": "310d11332a6723ae95ce225bfbec09597935909b", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 8bca95b2d..62f6af273 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -65,7 +65,7 @@ public class SQLQueryEngine extends QueryEngine {\n     private final EntityManagerFactory entityManagerFactory;\n     private final TransactionCancel transactionCancel;\n     private final SQLReferenceTable referenceTable;\n-    private final EntityManager entityManager;\n+    private EntityManager entityManager;\n \n     public SQLQueryEngine(MetaDataStore mDStore, EntityManagerFactory emFactory, Cache cx, TransactionCancel txCancel) {\n         super(mDStore, cx);\n", "next_change": {"commit": "8f1cfb480ee2db34373cee4ca35e5eef6b339a51", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 62f6af273..b63187a63 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -65,13 +62,12 @@ public class SQLQueryEngine extends QueryEngine {\n     private final EntityManagerFactory entityManagerFactory;\n     private final TransactionCancel transactionCancel;\n     private final SQLReferenceTable referenceTable;\n-    private EntityManager entityManager;\n \n-    public SQLQueryEngine(MetaDataStore mDStore, EntityManagerFactory emFactory, Cache cx, TransactionCancel txCancel) {\n-        super(mDStore, cx);\n-        this.entityManagerFactory = emFactory;\n-        this.referenceTable = new SQLReferenceTable(mDStore);\n-        this.transactionCancel = txCancel;\n+    public SQLQueryEngine(MetaDataStore metaDataStore, EntityManagerFactory entityManagerFactory, TransactionCancel txCancel) {\n+        super(metaDataStore);\n+        this.entityManagerFactory = entityManagerFactory;\n+        this.referenceTable = new SQLReferenceTable(metaDataStore);\n+\tthis.transactionCancel = txCancel;\n     }\n \n     @Override\n", "next_change": {"commit": "5094ce020f2de18f1a34294178dd857eba7af5c4", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex b63187a63..5958134d7 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -67,7 +67,7 @@ public class SQLQueryEngine extends QueryEngine {\n         super(metaDataStore);\n         this.entityManagerFactory = entityManagerFactory;\n         this.referenceTable = new SQLReferenceTable(metaDataStore);\n-\tthis.transactionCancel = txCancel;\n+\t      this.transactionCancel = txCancel;\n     }\n \n     @Override\n", "next_change": {"commit": "d7556cb189b6e83070942c10bdaf33054ecc0f71", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 5958134d7..869de2d9c 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -60,14 +61,14 @@ import javax.persistence.EntityTransaction;\n @Slf4j\n public class SQLQueryEngine extends QueryEngine {\n     private final EntityManagerFactory entityManagerFactory;\n-    private final TransactionCancel transactionCancel;\n+    private final Consumer<EntityManager> transactionCancel;\n     private final SQLReferenceTable referenceTable;\n \n-    public SQLQueryEngine(MetaDataStore metaDataStore, EntityManagerFactory entityManagerFactory, TransactionCancel txCancel) {\n+    public SQLQueryEngine(MetaDataStore metaDataStore, EntityManagerFactory eMFactory, Consumer<EntityManager> txC) {\n         super(metaDataStore);\n-        this.entityManagerFactory = entityManagerFactory;\n+        this.entityManagerFactory = eMFactory;\n         this.referenceTable = new SQLReferenceTable(metaDataStore);\n-\t      this.transactionCancel = txCancel;\n+        this.transactionCancel = txC;\n     }\n \n     @Override\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "ff86c56fde9064e1719ea35660fd04c42c949662", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex b74657044..869de2d9c 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -61,14 +61,14 @@ import javax.persistence.EntityTransaction;\n @Slf4j\n public class SQLQueryEngine extends QueryEngine {\n     private final EntityManagerFactory entityManagerFactory;\n-    private final TransactionCancel transactionCancel;\n+    private final Consumer<EntityManager> transactionCancel;\n     private final SQLReferenceTable referenceTable;\n \n-    public SQLQueryEngine(MetaDataStore metaDataStore, EntityManagerFactory entityManagerFactory, Cache cache, TransactionCancel transactionCancel) {\n-        super(metaDataStore, cache);\n-        this.entityManagerFactory = entityManagerFactory;\n+    public SQLQueryEngine(MetaDataStore metaDataStore, EntityManagerFactory eMFactory, Consumer<EntityManager> txC) {\n+        super(metaDataStore);\n+        this.entityManagerFactory = eMFactory;\n         this.referenceTable = new SQLReferenceTable(metaDataStore);\n-\tthis.transactionCancel = transactionCancel;\n+        this.transactionCancel = txC;\n     }\n \n     @Override\n", "next_change": {"commit": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 869de2d9c..86c37d5e3 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -61,14 +59,13 @@ import javax.persistence.EntityTransaction;\n @Slf4j\n public class SQLQueryEngine extends QueryEngine {\n     private final EntityManagerFactory entityManagerFactory;\n-    private final Consumer<EntityManager> transactionCancel;\n+\n     private final SQLReferenceTable referenceTable;\n \n-    public SQLQueryEngine(MetaDataStore metaDataStore, EntityManagerFactory eMFactory, Consumer<EntityManager> txC) {\n-        super(metaDataStore);\n-        this.entityManagerFactory = eMFactory;\n+    public SQLQueryEngine(MetaDataStore metaDataStore, EntityManagerFactory entityManagerFactory, Cache cache) {\n+        super(metaDataStore, cache);\n+        this.entityManagerFactory = entityManagerFactory;\n         this.referenceTable = new SQLReferenceTable(metaDataStore);\n-        this.transactionCancel = txC;\n     }\n \n     @Override\n", "next_change": {"commit": "81dde7567aa8a6a00822a9a8f0bf901806a962e8", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 86c37d5e3..7c335531d 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -62,8 +63,8 @@ public class SQLQueryEngine extends QueryEngine {\n \n     private final SQLReferenceTable referenceTable;\n \n-    public SQLQueryEngine(MetaDataStore metaDataStore, EntityManagerFactory entityManagerFactory, Cache cache) {\n-        super(metaDataStore, cache);\n+    public SQLQueryEngine(MetaDataStore metaDataStore, EntityManagerFactory entityManagerFactory) {\n+        super(metaDataStore);\n         this.entityManagerFactory = entityManagerFactory;\n         this.referenceTable = new SQLReferenceTable(metaDataStore);\n     }\n", "next_change": {"commit": "9c897058ce0b9656bf2aef2318d0addc474f278a", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 7c335531d..869de2d9c 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -60,13 +61,14 @@ import javax.persistence.EntityTransaction;\n @Slf4j\n public class SQLQueryEngine extends QueryEngine {\n     private final EntityManagerFactory entityManagerFactory;\n-\n+    private final Consumer<EntityManager> transactionCancel;\n     private final SQLReferenceTable referenceTable;\n \n-    public SQLQueryEngine(MetaDataStore metaDataStore, EntityManagerFactory entityManagerFactory) {\n+    public SQLQueryEngine(MetaDataStore metaDataStore, EntityManagerFactory eMFactory, Consumer<EntityManager> txC) {\n         super(metaDataStore);\n-        this.entityManagerFactory = entityManagerFactory;\n+        this.entityManagerFactory = eMFactory;\n         this.referenceTable = new SQLReferenceTable(metaDataStore);\n+        this.transactionCancel = txC;\n     }\n \n     @Override\n", "next_change": {"commit": "61ac33e39ba94617114273238754be32b006735b", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 869de2d9c..79fcc1878 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -63,12 +65,19 @@ public class SQLQueryEngine extends QueryEngine {\n     private final EntityManagerFactory entityManagerFactory;\n     private final Consumer<EntityManager> transactionCancel;\n     private final SQLReferenceTable referenceTable;\n+    private final SQLDialect dialect;\n \n     public SQLQueryEngine(MetaDataStore metaDataStore, EntityManagerFactory eMFactory, Consumer<EntityManager> txC) {\n+        this(metaDataStore, eMFactory, txC, SQLDialectFactory.getDefaultDialect());\n+    }\n+\n+    public SQLQueryEngine(MetaDataStore metaDataStore, EntityManagerFactory eMFactory, Consumer<EntityManager> txC,\n+                          SQLDialect sqlDialect) {\n         super(metaDataStore);\n         this.entityManagerFactory = eMFactory;\n         this.referenceTable = new SQLReferenceTable(metaDataStore);\n         this.transactionCancel = txC;\n+        this.dialect = sqlDialect;\n     }\n \n     @Override\n", "next_change": {"commit": "ca35ad817f2fde68b2f9c39d0d4d9c9d44ebffd5", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 79fcc1878..9c79e5997 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -41,45 +42,69 @@ import com.yahoo.elide.request.Argument;\n import com.yahoo.elide.request.Pagination;\n import com.yahoo.elide.utils.coerce.CoerceUtil;\n \n-import org.hibernate.jpa.QueryHints;\n-\n import lombok.extern.slf4j.Slf4j;\n \n+import java.sql.Connection;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n import java.util.ArrayList;\n import java.util.Collection;\n-import java.util.LinkedHashSet;\n+import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n-import java.util.Set;\n-import java.util.function.Consumer;\n+import java.util.Optional;\n+import java.util.function.Function;\n import java.util.stream.Collectors;\n-import javax.persistence.EntityManager;\n-import javax.persistence.EntityManagerFactory;\n-import javax.persistence.EntityTransaction;\n+import javax.sql.DataSource;\n \n /**\n  * QueryEngine for SQL backed stores.\n  */\n @Slf4j\n public class SQLQueryEngine extends QueryEngine {\n-    private final EntityManagerFactory entityManagerFactory;\n-    private final Consumer<EntityManager> transactionCancel;\n     private final SQLReferenceTable referenceTable;\n-    private final SQLDialect dialect;\n-\n-    public SQLQueryEngine(MetaDataStore metaDataStore, EntityManagerFactory eMFactory, Consumer<EntityManager> txC) {\n-        this(metaDataStore, eMFactory, txC, SQLDialectFactory.getDefaultDialect());\n-    }\n+    private final ConnectionDetails defaultConnectionDetails;\n+    private final Map<String, ConnectionDetails> connectionDetailsMap = new HashMap<>();\n \n-    public SQLQueryEngine(MetaDataStore metaDataStore, EntityManagerFactory eMFactory, Consumer<EntityManager> txC,\n-                          SQLDialect sqlDialect) {\n+    public SQLQueryEngine(MetaDataStore metaDataStore,\n+                    com.yahoo.elide.contrib.dynamicconfighelpers.compile.ConnectionDetails defaultConnectionDetails) {\n         super(metaDataStore);\n-        this.entityManagerFactory = eMFactory;\n         this.referenceTable = new SQLReferenceTable(metaDataStore);\n-        this.transactionCancel = txC;\n-        this.dialect = sqlDialect;\n+        this.defaultConnectionDetails = new ConnectionDetails(defaultConnectionDetails.getDataSource(),\n+                        SQLDialectFactory.getDialect(defaultConnectionDetails.getDialect()));\n+    }\n+\n+    /**\n+     * Constructor.\n+     * @param metaDataStore : MetaDataStore.\n+     * @param defaultConnectionDetails : default DataSource Object and SQLDialect Object.\n+     * @param detailsMap : Connection Name to DataSource Object and SQL Dialect Object mapping.\n+     */\n+    public SQLQueryEngine(MetaDataStore metaDataStore,\n+                    com.yahoo.elide.contrib.dynamicconfighelpers.compile.ConnectionDetails defaultConnectionDetails,\n+                    Map<String, com.yahoo.elide.contrib.dynamicconfighelpers.compile.ConnectionDetails> detailsMap) {\n+        this(metaDataStore, defaultConnectionDetails);\n+        detailsMap.forEach((name, details) -> {\n+            this.connectionDetailsMap.put(name, new ConnectionDetails(details.getDataSource(),\n+                            SQLDialectFactory.getDialect(details.getDialect())));\n+        });\n     }\n \n+    private static final Function<ResultSet, Object> SINGLE_RESULT_MAPPER = new Function<ResultSet, Object>() {\n+        @Override\n+        public Object apply(ResultSet rs) {\n+            try {\n+                if (rs.next()) {\n+                    return rs.getObject(1);\n+                } else {\n+                    return null;\n+                }\n+            } catch (SQLException e) {\n+                throw new IllegalStateException(e);\n+            }\n+        }\n+    };\n+\n     @Override\n     protected Table constructTable(Class<?> entityClass, EntityDictionary metaDataDictionary) {\n         return new SQLTable(entityClass, metaDataDictionary);\n", "next_change": {"commit": "df3ea922a7550ec35585ce289e1d74101c4f28e4", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 9c79e5997..ca3f47ca5 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -107,34 +103,14 @@ public class SQLQueryEngine extends QueryEngine {\n \n     @Override\n     protected Table constructTable(Class<?> entityClass, EntityDictionary metaDataDictionary) {\n-        return new SQLTable(entityClass, metaDataDictionary);\n+        return new SQLTable(entityClass, metaDataDictionary, this);\n     }\n \n     @Override\n     public ColumnProjection constructDimensionProjection(Dimension dimension,\n                                                          String alias,\n                                                          Map<String, Argument> arguments) {\n-        return new SQLColumnProjection() {\n-            @Override\n-            public SQLReferenceTable getReferenceTable() {\n-                return referenceTable;\n-            }\n-\n-            @Override\n-            public Column getColumn() {\n-                return dimension;\n-            }\n-\n-            @Override\n-            public String getAlias() {\n-                return alias;\n-            }\n-\n-            @Override\n-            public Map<String, Argument> getArguments() {\n-                return arguments;\n-            }\n-        };\n+        return new SQLDimensionProjection(dimension, alias, arguments, referenceTable);\n     }\n \n     @Override\n", "next_change": {"commit": "dc254e6a99100c21abd94eac3f0252bb9c5029df", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex ca3f47ca5..f2433475a 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -103,28 +104,28 @@ public class SQLQueryEngine extends QueryEngine {\n \n     @Override\n     protected Table constructTable(Class<?> entityClass, EntityDictionary metaDataDictionary) {\n-        return new SQLTable(entityClass, metaDataDictionary, this);\n+        return new SQLTable(entityClass, metaDataDictionary);\n     }\n \n     @Override\n     public ColumnProjection constructDimensionProjection(Dimension dimension,\n                                                          String alias,\n                                                          Map<String, Argument> arguments) {\n-        return new SQLDimensionProjection(dimension, alias, arguments, referenceTable);\n+        return new SQLDimensionProjection(dimension, alias, arguments);\n     }\n \n     @Override\n     public TimeDimensionProjection constructTimeDimensionProjection(TimeDimension dimension,\n                                                                     String alias,\n                                                                     Map<String, Argument> arguments) {\n-        return new SQLTimeDimensionProjection(dimension, dimension.getTimezone(), referenceTable, alias, arguments);\n+        return new SQLTimeDimensionProjection(dimension, dimension.getTimezone(), alias, arguments);\n     }\n \n     @Override\n     public MetricProjection constructMetricProjection(Metric metric,\n                                                       String alias,\n                                                       Map<String, Argument> arguments) {\n-        return new SQLMetricProjection(metric, referenceTable, alias, arguments);\n+        return new SQLMetricProjection(metric, alias, arguments);\n     }\n \n     /**\n", "next_change": {"commit": "7a0b59711bb5e269afbc6b15426a8aff94a5e447", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex f2433475a..3296af5f8 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -61,71 +72,90 @@ public class SQLQueryEngine extends QueryEngine {\n     @Getter\n     private final SQLReferenceTable referenceTable;\n     private final ConnectionDetails defaultConnectionDetails;\n-    private final Map<String, ConnectionDetails> connectionDetailsMap = new HashMap<>();\n-\n-    public SQLQueryEngine(MetaDataStore metaDataStore,\n-                    com.yahoo.elide.contrib.dynamicconfighelpers.compile.ConnectionDetails defaultConnectionDetails) {\n-        super(metaDataStore);\n-        referenceTable = new SQLReferenceTable(metaDataStore);\n-        this.defaultConnectionDetails = new ConnectionDetails(defaultConnectionDetails.getDataSource(),\n-                        SQLDialectFactory.getDialect(defaultConnectionDetails.getDialect()));\n+    private final Map<String, ConnectionDetails> connectionDetailsMap;\n+    private final Set<Optimizer> optimizers;\n+\n+    public SQLQueryEngine(MetaDataStore metaDataStore, ConnectionDetails defaultConnectionDetails) {\n+        this(metaDataStore, defaultConnectionDetails, Collections.emptyMap(),\n+                new HashSet<>());\n     }\n \n     /**\n      * Constructor.\n      * @param metaDataStore : MetaDataStore.\n      * @param defaultConnectionDetails : default DataSource Object and SQLDialect Object.\n-     * @param detailsMap : Connection Name to DataSource Object and SQL Dialect Object mapping.\n+     * @param connectionDetailsMap : Connection Name to DataSource Object and SQL Dialect Object mapping.\n      */\n-    public SQLQueryEngine(MetaDataStore metaDataStore,\n-                    com.yahoo.elide.contrib.dynamicconfighelpers.compile.ConnectionDetails defaultConnectionDetails,\n-                    Map<String, com.yahoo.elide.contrib.dynamicconfighelpers.compile.ConnectionDetails> detailsMap) {\n-        this(metaDataStore, defaultConnectionDetails);\n-        detailsMap.forEach((name, details) -> {\n-            this.connectionDetailsMap.put(name, new ConnectionDetails(details.getDataSource(),\n-                            SQLDialectFactory.getDialect(details.getDialect())));\n-        });\n+    public SQLQueryEngine(MetaDataStore metaDataStore, ConnectionDetails defaultConnectionDetails,\n+                    Map<String, ConnectionDetails> connectionDetailsMap, Set<Optimizer> optimizers) {\n+\n+        Preconditions.checkNotNull(defaultConnectionDetails);\n+        Preconditions.checkNotNull(connectionDetailsMap);\n+\n+        this.defaultConnectionDetails = defaultConnectionDetails;\n+        this.connectionDetailsMap = connectionDetailsMap;\n+        this.metaDataStore = metaDataStore;\n+        this.metadataDictionary = metaDataStore.getMetadataDictionary();\n+        populateMetaData(metaDataStore);\n+        this.referenceTable = new SQLReferenceTable(metaDataStore);\n+        this.optimizers = optimizers;\n     }\n \n-    private static final Function<ResultSet, Object> SINGLE_RESULT_MAPPER = new Function<ResultSet, Object>() {\n-        @Override\n-        public Object apply(ResultSet rs) {\n-            try {\n-                if (rs.next()) {\n-                    return rs.getObject(1);\n-                } else {\n-                    return null;\n-                }\n-            } catch (SQLException e) {\n-                throw new IllegalStateException(e);\n+    private static final Function<ResultSet, Object> SINGLE_RESULT_MAPPER = rs -> {\n+        try {\n+            if (rs.next()) {\n+                return rs.getObject(1);\n             }\n+            return null;\n+        } catch (SQLException e) {\n+            throw new IllegalStateException(e);\n         }\n     };\n \n     @Override\n-    protected Table constructTable(Class<?> entityClass, EntityDictionary metaDataDictionary) {\n-        return new SQLTable(entityClass, metaDataDictionary);\n+    protected Table constructTable(Type<?> entityClass, EntityDictionary metaDataDictionary) {\n+\n+        String dbConnectionName = null;\n+        Annotation annotation = EntityDictionary.getFirstAnnotation(entityClass,\n+                        Arrays.asList(FromTable.class, FromSubquery.class));\n+        if (annotation instanceof FromTable) {\n+            dbConnectionName = ((FromTable) annotation).dbConnectionName();\n+        } else if (annotation instanceof FromSubquery) {\n+            dbConnectionName = ((FromSubquery) annotation).dbConnectionName();\n+        }\n+\n+        ConnectionDetails connectionDetails;\n+        if (StringUtils.isBlank(dbConnectionName)) {\n+            connectionDetails = defaultConnectionDetails;\n+        } else {\n+            connectionDetails = Optional.ofNullable(connectionDetailsMap.get(dbConnectionName))\n+                            .orElseThrow(() -> new IllegalStateException(\"ConnectionDetails undefined for model: \"\n+                                            + metaDataDictionary.getJsonAliasFor(entityClass)));\n+        }\n+\n+        return new SQLTable(entityClass, metaDataDictionary, connectionDetails);\n     }\n \n     @Override\n     public ColumnProjection constructDimensionProjection(Dimension dimension,\n                                                          String alias,\n                                                          Map<String, Argument> arguments) {\n-        return new SQLDimensionProjection(dimension, alias, arguments);\n+        return new SQLDimensionProjection(dimension, alias, arguments, true);\n     }\n \n     @Override\n     public TimeDimensionProjection constructTimeDimensionProjection(TimeDimension dimension,\n                                                                     String alias,\n                                                                     Map<String, Argument> arguments) {\n-        return new SQLTimeDimensionProjection(dimension, dimension.getTimezone(), alias, arguments);\n+        return new SQLTimeDimensionProjection(dimension, dimension.getTimezone(), alias, arguments, true);\n     }\n \n     @Override\n     public MetricProjection constructMetricProjection(Metric metric,\n                                                       String alias,\n                                                       Map<String, Argument> arguments) {\n-        return new SQLMetricProjection(metric, alias, arguments);\n+\n+        return metric.getMetricProjectionMaker().make(metric, alias, arguments);\n     }\n \n     /**\n", "next_change": {"commit": "32856f2244a3334028099eeb7ecd13b69fa41016", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 3296af5f8..54caaa4ef 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -154,7 +171,6 @@ public class SQLQueryEngine extends QueryEngine {\n     public MetricProjection constructMetricProjection(Metric metric,\n                                                       String alias,\n                                                       Map<String, Argument> arguments) {\n-\n         return metric.getMetricProjectionMaker().make(metric, alias, arguments);\n     }\n \n", "next_change": {"commit": "e1c93d9f34829c4ee142a4919b5fde26502eaa11", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 54caaa4ef..fcf751616 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -174,6 +178,24 @@ public class SQLQueryEngine extends QueryEngine {\n         return metric.getMetricProjectionMaker().make(metric, alias, arguments);\n     }\n \n+    @Override\n+    protected void verifyMetaData(MetaDataStore metaDataStore) {\n+        metaDataStore.getTables().forEach(table -> {\n+            SQLTable sqlTable = (SQLTable) table;\n+            checkForCycles(sqlTable);\n+            TableArgumentValidator tableArgValidator = new TableArgumentValidator(metaDataStore, sqlTable);\n+            tableArgValidator.validate();\n+        });\n+    }\n+\n+    /**\n+     * Verify that there is no reference loop for given {@link SQLTable}.\n+     * @param sqlTable Queryable to validate.\n+     */\n+    private void checkForCycles(SQLTable sqlTable) {\n+        sqlTable.getColumnProjections().forEach(column -> formulaValidator.parse(sqlTable, column));\n+    }\n+\n     /**\n      * State needed for SQLQueryEngine to execute queries.\n      */\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "ff86c56fde9064e1719ea35660fd04c42c949662", "message": "Merge commit", "committedDate": null}, {"oid": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "parent a14ccfbb7b558d27799b4e7b1916850519639708 author Jack (\uc815\ud658) <QubitPi@users.noreply.github.com> 1559678988 -0700 committer Aaron Klish <klish@verizonmedia.com> 1589583449 -0500"}, {"oid": "3f34e76977a5a591eca1f8c00ac986562a38d250", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Introduce QueryResult class for QueryEngine caching (#1333)"}, {"oid": "81dde7567aa8a6a00822a9a8f0bf901806a962e8", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add caching support to SQLQueryEngine (#1319)"}, {"oid": "9c897058ce0b9656bf2aef2318d0addc474f278a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "implement cancel function (#1367)"}, {"oid": "8fece2b8f1b3078ce2598ddb03dca66bb984df46", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Aggregation DataStore QueryLogger Implementation (#1448)"}, {"oid": "61ac33e39ba94617114273238754be32b006735b", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add SQLDialect implementations and tests. (#1487)"}, {"oid": "ca35ad817f2fde68b2f9c39d0d4d9c9d44ebffd5", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Query Engine and Aggregation Store Changes for Multi Data Source Support (#1523)"}, {"oid": "11e5083ef0755c62f86c287cf73c376d6c8b8c40", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Refactor query plan (#1579)"}, {"oid": "df3ea922a7550ec35585ce289e1d74101c4f28e4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5: Decouple query and metadata (#1585)"}, {"oid": "dc254e6a99100c21abd94eac3f0252bb9c5029df", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Support nested queries (#1591)"}, {"oid": "9057572200f962b7735270005cd9b51c368c0a0b", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5: Sketch out support for nested query plans. (#1594)"}, {"oid": "7daf58155ba6980d10a0171f72ea32a05af1ac6a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Added SQL Generation Tests for Nested Aggregation Queries (#1602)"}, {"oid": "e140eebdb89d74eb0f16fc8b157c6223cbb07992", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Refactor dbconnection (#1622)"}, {"oid": "df24aa71c283e12d2489982300580cfa80c9755c", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Migrate metadatacalls to metadata store (#1624)"}, {"oid": "c6f23dd421705b7a93be8823310143e6b631c7e4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Quote all identifiers in SQL query (#1621)"}, {"oid": "1dac58a1a989bbc3db52e87b77d19a5077c5ea5b", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Attempt to run explain query tests against H2 in compliance mode against targeted databases (#1633)"}, {"oid": "49e61867e840d9818993879436d5db1aad964c9a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Move data store interfaces (#1671)"}, {"oid": "911d29408bdeeb4ff8d78f2beea2417be4e7c673", "committedDate": "2020-12-11 16:20:28 -0600", "message": "cleaned up package hierarchy for elide-core (#1672)"}, {"oid": "c14096bec256faf80e7674fbef22bccff1f955a3", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Moved contrib.dynamicconfighelpers to modelconfig package (#1676)"}, {"oid": "bea43ef0f244ba01c2f7d4216b9f08f0ef4e83a4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Optionally compile hjson configs while running CLI (#1693)"}, {"oid": "172f3833738466c50648a2f4c3644eae46706aa2", "committedDate": "2021-01-12 15:51:35 -0600", "message": "Issue#1750 Fix SQL query generation for record count"}, {"oid": "979561b9129a15723594d23fbef0c584788ce100", "committedDate": "2021-01-19 10:59:36 -0600", "message": "add druid dialect with new pagination query structure"}, {"oid": "ccbcbcb65f7cae54ede4cd5242ecb19a8f84368c", "committedDate": "2021-01-19 10:59:36 -0600", "message": "change all count distinct queries to group by query for pagination"}, {"oid": "3f79dc112b211df777ab5fee15c27671c0f1bcdf", "committedDate": "2021-01-19 10:59:36 -0600", "message": "return null if no dimension projection is available."}, {"oid": "beb2cdfa0cd863756e7b095c0a58c733e484a944", "committedDate": "2021-01-19 10:59:36 -0600", "message": "address comments"}, {"oid": "17152126cb2f014076efd84ac3fd3be233f25c64", "committedDate": "2021-01-19 10:59:36 -0600", "message": "fix null pointer exception and add test case"}, {"oid": "f88b63d286d73d3774558b24f16aef0bb0be6d1a", "committedDate": "2021-01-19 14:16:37 -0600", "message": "Initial Commit for Type changes"}, {"oid": "ba73bc2a5617fed8feeee5b419a0f0808081628f", "committedDate": "2021-02-04 11:31:56 -0600", "message": "Elide 5 Agg Store: Multiple time grains (#1806)"}, {"oid": "8274a6341e06c7201049e8e8f0a48f07bd99a0ef", "committedDate": "2021-03-10 16:38:34 -0600", "message": "Cleanup IDE warnings (#1894)"}, {"oid": "c19d8c2237e960d792dc2ef6375356433b4fac21", "committedDate": "2021-03-11 17:10:26 -0600", "message": "Classtype cleanup (#1905)"}, {"oid": "212dcab497c321f67b66d619748b023201f2c819", "committedDate": "2021-03-16 10:13:31 -0500", "message": "Remove source from ColumnProjection (#1918)"}, {"oid": "e1e07dbeabb690560754c84200b67e7a8d4d9229", "committedDate": "2021-03-22 09:06:06 -0500", "message": "Part 4 of Query Plan Optimization : Fix Metric Nesting (#1924)"}, {"oid": "ed941827e1027083367b4df9794501909279c667", "committedDate": "2021-03-25 22:55:35 -0400", "message": "diamonds to reduce duplication (#1947)"}, {"oid": "5aa899ebbc6af4bfb538a4c04deef2218348a178", "committedDate": "2021-03-26 01:03:25 -0400", "message": "Issue 1929 - define function as lambda (#1945)"}, {"oid": "dc7a367e14c9f43b2d013f5037341055a29f0491", "committedDate": "2021-03-26 10:31:26 -0400", "message": "Issue 1929 - Address Sonar suggestions (#1925)"}, {"oid": "cd008a45ad379004b92c5114150016027aa07b80", "committedDate": "2021-03-26 10:35:48 -0500", "message": "Query plan optimizer phase5 (#1961)"}, {"oid": "234905d972c491934ce3774771c9733193b45007", "committedDate": "2021-04-01 10:20:16 -0500", "message": "Phase 6: Query Optimization - Calcite parser (#1976)"}, {"oid": "7a0b59711bb5e269afbc6b15426a8aff94a5e447", "committedDate": "2021-04-01 14:51:05 -0500", "message": "Removed QueryPlanResolver.  Replaced it with MetricProjectionMaker.  Small fix to Calcite parser builder to use the SQL conformance of the underlying dialect (#1980)"}, {"oid": "43598e8411d544b31d9807ded4f248e25ef334a4", "committedDate": "2021-04-01 17:32:17 -0500", "message": "Add Table Level Query Hints (#1981)"}, {"oid": "89e96b0bb45da69b08e6c8df6d8d7d23090eec37", "committedDate": "2021-04-22 17:56:53 -0400", "message": "Resolution using Table Context (#2004)"}, {"oid": "53b23330ff54b12041e530a931329986ddd3e454", "committedDate": "2021-04-28 13:29:43 -0400", "message": "Aggregation Store: Namespace Metadata changes (#2037)"}, {"oid": "256ca8e18dbae4b8ff6c1adbd8e37b236ef5e575", "committedDate": "2021-05-03 11:58:57 -0400", "message": "Refactor Column Projections (#2049)"}, {"oid": "d21f942a219ba7f32757f334d7e61c78e126d6be", "committedDate": "2021-05-04 15:24:11 -0500", "message": "Use only queried column args & default args for logical column expansion (#2054)"}, {"oid": "d2843b24f4a1ed35907726ff62f09049ce37d081", "committedDate": "2021-05-06 10:54:37 -0500", "message": "Optional flow (#2069)"}, {"oid": "1bb35bea711c420f00cfd97596dfa9177e15277e", "committedDate": "2021-05-10 14:36:06 -0500", "message": "Populating namespaces in metadatastore (#2071)"}, {"oid": "0a3776bacb5809845d9a04a1263db9760f117b92", "committedDate": "2021-05-13 13:25:15 -0500", "message": "Injection Protection for parameterized metrics/dimensions (#2090)"}, {"oid": "35e214dd718e164e30529eff4feab4d5fcd62d27", "committedDate": "2021-05-13 16:25:00 -0400", "message": "Resolve arguments in FromSubquery (#2089)"}, {"oid": "bf246b21912e4b299e4330089198ba2eee01fbec", "committedDate": "2021-05-13 17:30:24 -0500", "message": "Generate dynamic alias for join source (#2065)"}, {"oid": "32856f2244a3334028099eeb7ecd13b69fa41016", "committedDate": "2021-05-18 11:21:54 -0500", "message": "Aggregation Store ID Column Metadata (#2099)"}, {"oid": "e1c93d9f34829c4ee142a4919b5fde26502eaa11", "committedDate": "2021-05-19 17:24:06 -0400", "message": "Verify table arguments. (#2110)"}, {"oid": "b2eadb111297a8167f2715e027b9284c765adb32", "committedDate": "2021-05-20 16:42:02 -0400", "message": "Verify column arguments. (#2114)"}, {"oid": "4b8310f782f755f20fa79b52b7e4d13480b140f9", "committedDate": "2021-05-21 10:06:37 -0500", "message": "Remove usage of SQLReferenceTable. (#2116)"}, {"oid": "f9c2304cdbd7a1fb0f62cb024a19b2f2335832f2", "committedDate": "2021-06-24 13:55:06 -0400", "message": "Make AS before table alias optional, i.e. dialect based (#2179)"}, {"oid": "101f842daa06095652f898bda0f96fead4bb373e", "committedDate": "2021-08-05 14:37:57 -0500", "message": "GraphQL schema now namespaces internal types to avoid conflicts (#2237)"}, {"oid": "a874733a5c2ac3777e5946f6eddfade651d80c7a", "committedDate": "2021-08-06 17:30:43 -0500", "message": "Fix bug where dialect time conversion is skipped (#2238)"}, {"oid": "b88c19ef352c7bff44d4375d4a5f3e6b55054c3e", "committedDate": "2021-10-14 16:42:33 -0500", "message": "Aggregation Store: Make EntityHydrator stream results. (#2333)"}, {"oid": "830b9f2a997eefcd677090875bede2e21e19f1f4", "committedDate": "2021-10-20 14:48:56 -0500", "message": "Support 'hidden' flag for analytic models and fields. (#2357)"}, {"oid": "38b030daa701f205215b56199705f3d689726527", "committedDate": "2021-11-29 16:30:05 -0600", "message": "Enum filter fix (#2422)"}, {"oid": "54cdcb9fe67225cd463e1bf9357f0e1d2a42c152", "committedDate": "2021-12-02 15:11:51 -0600", "message": "HJSON Configuration Models and DataStore (#2418)"}, {"oid": "6b2b60098436a3dd7db03697ffd4717122fa3bf6", "committedDate": "2022-01-04 13:51:45 -0600", "message": "use query with filter to populate query parameters in pagination (#2466)"}, {"oid": "d0552c5750608391d52e3e3286469901726a7d06", "committedDate": "2022-01-28 16:02:28 -0600", "message": "Support filters on query plans (#2526)"}, {"oid": "f21f35950fe465cfbf135d06cc8ae2321a29513a", "committedDate": "2023-02-04 15:34:06 -0600", "message": "Elide 7.x (#2876)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE3Njg4NQ==", "url": "https://github.com/yahoo/elide/pull/1367#discussion_r436176885", "body": "You are missing a lot of the other Future functions.  There is more than just cancel.", "bodyText": "You are missing a lot of the other Future functions.  There is more than just cancel.", "bodyHTML": "<p dir=\"auto\">You are missing a lot of the other Future functions.  There is more than just cancel.</p>", "author": "aklish", "createdAt": "2020-06-05T21:42:10Z", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java", "diffHunk": "@@ -289,4 +291,28 @@ private SQLQuery toPageTotalSQL(SQLQuery sql) {\n     public static String getClassAlias(Class<?> entityClass) {\n         return getTypeAlias(entityClass);\n     }\n+\n+    /**\n+     * Functional interface for describing a method to supply JpaTransaction.\n+     */\n+    @FunctionalInterface\n+    public interface TransactionCancel {\n+        public void cancel(EntityManager entityManager);\n+    }\n+  \n+    public class FutureImplementation implements Future<QueryResult> {\n+        private final TransactionCancel transactionCancel;\n+\tprivate final EntityManagerFactory entityManagerFactory;\n+        /**\n+\t * Cancels transaction\n+         */\n+    \t@Override\n+\tprotected FutureImplementation(EntityManagerFactory entityManagerFactory, TransactionCancel transactionCancel) {\n+\t    this.transactionCancel = transactionCancel;\n+\t    this.entityManagerFactory = entityManagerFactory;\n+\t}\n+    \tpublic boolean cancel(boolean mayInterruptIfRunning) {", "originalCommit": "8e97a518992f9a15ef4ce2c6a9d48fbacabaa1d0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f08727cf16a6ab9570bf506573ee9b5995ecb910", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex b74657044..f0e721383 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -300,19 +309,56 @@ public class SQLQueryEngine extends QueryEngine {\n         public void cancel(EntityManager entityManager);\n     }\n   \n-    public class FutureImplementation implements Future<QueryResult> {\n-        private final TransactionCancel transactionCancel;\n-\tprivate final EntityManagerFactory entityManagerFactory;\n+    public class QueryResultFuture<QueryResult> implements Future<QueryResult> {\n         /**\n-\t * Cancels transaction\n+\t * Future Implementation of Query Result\n          */\n-    \t@Override\n-\tprotected FutureImplementation(EntityManagerFactory entityManagerFactory, TransactionCancel transactionCancel) {\n-\t    this.transactionCancel = transactionCancel;\n-\t    this.entityManagerFactory = entityManagerFactory;\n+\tprivate static enum RESULT {RUNNING, CANCELLED}\n+\tfinal CountDownLatch countDownLatch = new CountDownLatch(1);\n+\tprivate RESUlT Result = RESULT.RUNNING;\t\n+\tprivate QueryResult queryResult;\t\n+\t\n+\tpublic QueryResultFuture() {\n+\t     this.queryResult = queryResult;\n+\t     countDownLatch.countDown();\n \t}\n+\n+        @Override\n+        public QueryResult get() {\n+            countDownLatch.await();\n+            return queryResult;\n+\t}\n+\t\n+\t@Override\n     \tpublic boolean cancel(boolean mayInterruptIfRunning) {\n-            transactionCancel.cancel(entityManagerFactory.createEntityManager());\n-    \t}    \t\n+\t    try {\n+            \ttransactionCancel.cancel(entityManager);\n+\t\tResult = RESULT.CANCELLED;\t\n+            \treturn true;\n+            }\n+\t    catch (Exception e) {\n+\t    \tthrow e;\n+            }\n+    \t}\n+\t\n+\t@Override\n+\tboolean isCancelled() {\n+\t    return Result == RESULT.CANCELLED;\n+\t}\n+\n+\t@Override\n+\tboolean isDone() {\n+\t    return true;\n+\t}\n+\n+\t@Override\n+\t@Override\n+\tpublic QueryResult get(long timeout, TimeUnit unit) throws TimeoutException {\n+\t    if (countDownLatch.await(timeout, unit)) {\n+                return queryResult;\n+            } else {\n+                throw new TimeoutException();\n+            }\n+\t}\n     }\n }\n", "next_change": {"commit": "4e694992ae92fcce5f385921b2180c2c8a5458e4", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex f0e721383..bbff37c6e 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -309,56 +311,18 @@ public class SQLQueryEngine extends QueryEngine {\n         public void cancel(EntityManager entityManager);\n     }\n   \n-    public class QueryResultFuture<QueryResult> implements Future<QueryResult> {\n+    public class QueryResultFuture<V> extends FutureTask<V> {\n         /**\n-\t * Future Implementation of Query Result\n+\t * FutureTask Implementation of Query Result\n          */\n-\tprivate static enum RESULT {RUNNING, CANCELLED}\n-\tfinal CountDownLatch countDownLatch = new CountDownLatch(1);\n-\tprivate RESUlT Result = RESULT.RUNNING;\t\n-\tprivate QueryResult queryResult;\t\n \t\n-\tpublic QueryResultFuture() {\n-\t     this.queryResult = queryResult;\n-\t     countDownLatch.countDown();\n+\tpublic QueryResultFuture(Callable<V> callable) {\n+\t    super(callable);     \n \t}\n \n-        @Override\n-        public QueryResult get() {\n-            countDownLatch.await();\n-            return queryResult;\n-\t}\n-\t\n-\t@Override\n-    \tpublic boolean cancel(boolean mayInterruptIfRunning) {\n-\t    try {\n-            \ttransactionCancel.cancel(entityManager);\n-\t\tResult = RESULT.CANCELLED;\t\n-            \treturn true;\n-            }\n-\t    catch (Exception e) {\n-\t    \tthrow e;\n-            }\n-    \t}\n-\t\n \t@Override\n-\tboolean isCancelled() {\n-\t    return Result == RESULT.CANCELLED;\n-\t}\n-\n-\t@Override\n-\tboolean isDone() {\n-\t    return true;\n-\t}\n-\n-\t@Override\n-\t@Override\n-\tpublic QueryResult get(long timeout, TimeUnit unit) throws TimeoutException {\n-\t    if (countDownLatch.await(timeout, unit)) {\n-                return queryResult;\n-            } else {\n-                throw new TimeoutException();\n-            }\n-\t}\n+    \tpublic boolean cancel(TransactionCancel transactionCancel, EntityManager entityManager) {\n+            transactionCancel.cancel(entityManager);\n+    \t}\t\n     }\n }\n", "next_change": {"commit": "b69bb59dc6373110fb697c9f912cc73857df7c26", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex bbff37c6e..f1ff331b2 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -314,15 +310,15 @@ public class SQLQueryEngine extends QueryEngine {\n     public class QueryResultFuture<V> extends FutureTask<V> {\n         /**\n \t * FutureTask Implementation of Query Result\n-         */\n-\t\n+         */\t\n \tpublic QueryResultFuture(Callable<V> callable) {\n \t    super(callable);     \n \t}\n \n \t@Override\n-    \tpublic boolean cancel(TransactionCancel transactionCancel, EntityManager entityManager) {\n+    \tpublic boolean cancel(boolean mayInterruptIfRunning) {\n             transactionCancel.cancel(entityManager);\n+\t    return true;\n     \t}\t\n     }\n }\n", "next_change": {"commit": "8064be350bc30ffb58923074f4a08d143f3c21c5", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex f1ff331b2..c16063a2a 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -318,7 +319,7 @@ public class SQLQueryEngine extends QueryEngine {\n \t@Override\n     \tpublic boolean cancel(boolean mayInterruptIfRunning) {\n             transactionCancel.cancel(entityManager);\n-\t    return true;\n+\t    return super.cancel(true);\n     \t}\t\n     }\n }\n", "next_change": {"commit": "9a6dbc1186dfd5231d531fe04795a27b68f4fcd2", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex c16063a2a..233d980dc 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -316,10 +315,10 @@ public class SQLQueryEngine extends QueryEngine {\n \t    super(callable);     \n \t}\n \n-\t@Override\n-    \tpublic boolean cancel(boolean mayInterruptIfRunning) {\n+        @Override\n+        public boolean cancel(boolean mayInterruptIfRunning) {\n             transactionCancel.cancel(entityManager);\n-\t    return super.cancel(true);\n-    \t}\t\n+            return super.cancel(true);\n+        }\t\n     }\n }\n", "next_change": {"commit": "07810b7bffcba1c415accbeada4401a05592beca", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 233d980dc..46ed8f487 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -309,16 +309,16 @@ public class SQLQueryEngine extends QueryEngine {\n \n     public class QueryResultFuture<V> extends FutureTask<V> {\n         /**\n-\t * FutureTask Implementation of Query Result\n-         */\t\n-\tpublic QueryResultFuture(Callable<V> callable) {\n-\t    super(callable);     \n-\t}\n+         * FutureTask Implementation of Query Result.\n+         */\n+         public QueryResultFuture(Callable<V> callable) {\n+             super(callable);\n+         }\n \n         @Override\n         public boolean cancel(boolean mayInterruptIfRunning) {\n             transactionCancel.cancel(entityManager);\n             return super.cancel(true);\n-        }\t\n+        }\n     }\n }\n", "next_change": {"commit": "8f1cfb480ee2db34373cee4ca35e5eef6b339a51", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 46ed8f487..b63187a63 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -306,19 +343,4 @@ public class SQLQueryEngine extends QueryEngine {\n     public interface TransactionCancel {\n         public void cancel(EntityManager entityManager);\n     }\n-\n-    public class QueryResultFuture<V> extends FutureTask<V> {\n-        /**\n-         * FutureTask Implementation of Query Result.\n-         */\n-         public QueryResultFuture(Callable<V> callable) {\n-             super(callable);\n-         }\n-\n-        @Override\n-        public boolean cancel(boolean mayInterruptIfRunning) {\n-            transactionCancel.cancel(entityManager);\n-            return super.cancel(true);\n-        }\n-    }\n }\n", "next_change": {"commit": "5094ce020f2de18f1a34294178dd857eba7af5c4", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex b63187a63..5958134d7 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -343,4 +344,4 @@ public class SQLQueryEngine extends QueryEngine {\n     public interface TransactionCancel {\n         public void cancel(EntityManager entityManager);\n     }\n-}\n+}\n\\ No newline at end of file\n", "next_change": {"commit": "d7556cb189b6e83070942c10bdaf33054ecc0f71", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 5958134d7..869de2d9c 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -336,12 +337,4 @@ public class SQLQueryEngine extends QueryEngine {\n     public static String getClassAlias(Class<?> entityClass) {\n         return getTypeAlias(entityClass);\n     }\n-\n-    /**\n-     * Functional interface for describing a method to supply JpaTransaction.\n-     */\n-    @FunctionalInterface\n-    public interface TransactionCancel {\n-        public void cancel(EntityManager entityManager);\n-    }\n-}\n\\ No newline at end of file\n+}\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "ff86c56fde9064e1719ea35660fd04c42c949662", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex b74657044..869de2d9c 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -291,28 +337,4 @@ public class SQLQueryEngine extends QueryEngine {\n     public static String getClassAlias(Class<?> entityClass) {\n         return getTypeAlias(entityClass);\n     }\n-\n-    /**\n-     * Functional interface for describing a method to supply JpaTransaction.\n-     */\n-    @FunctionalInterface\n-    public interface TransactionCancel {\n-        public void cancel(EntityManager entityManager);\n-    }\n-  \n-    public class FutureImplementation implements Future<QueryResult> {\n-        private final TransactionCancel transactionCancel;\n-\tprivate final EntityManagerFactory entityManagerFactory;\n-        /**\n-\t * Cancels transaction\n-         */\n-    \t@Override\n-\tprotected FutureImplementation(EntityManagerFactory entityManagerFactory, TransactionCancel transactionCancel) {\n-\t    this.transactionCancel = transactionCancel;\n-\t    this.entityManagerFactory = entityManagerFactory;\n-\t}\n-    \tpublic boolean cancel(boolean mayInterruptIfRunning) {\n-            transactionCancel.cancel(entityManagerFactory.createEntityManager());\n-    \t}    \t\n-    }\n }\n", "next_change": {"commit": "ca35ad817f2fde68b2f9c39d0d4d9c9d44ebffd5", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 869de2d9c..9c79e5997 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -337,4 +417,66 @@ public class SQLQueryEngine extends QueryEngine {\n     public static String getClassAlias(Class<?> entityClass) {\n         return getTypeAlias(entityClass);\n     }\n+\n+    private static boolean returnPageTotals(Pagination pagination) {\n+        return pagination != null && pagination.returnPageTotals();\n+    }\n+\n+    /**\n+     * Gets required ConnectionDetails.\n+     * @param connectionName Connection Name.\n+     * @return ConnectionDetails ConnectionDetails Object for this connection.\n+     */\n+    private ConnectionDetails getConnectionDetails(String connectionName) {\n+        if (connectionName == null || connectionName.trim().isEmpty()) {\n+            return defaultConnectionDetails;\n+        } else {\n+            return Optional.ofNullable(connectionDetailsMap.get(connectionName))\n+                            .orElseThrow(() -> new IllegalStateException(\n+                                            \"ConnectionDetails undefined for DB Connection Name: \" + connectionName));\n+        }\n+    }\n+\n+    /**\n+     * Cancels NamedParamPreparedStatement, hides and logs any SQLException.\n+     * @param stmt NamedParamPreparedStatement to cancel.\n+     */\n+    private static void cancelSoftly(NamedParamPreparedStatement stmt) {\n+        try {\n+            if (stmt != null && !stmt.isClosed()) {\n+                stmt.cancel();\n+            }\n+        } catch (SQLException e) {\n+            log.error(\"Exception encountered during cancel statement.\", e);\n+        }\n+    }\n+\n+    /**\n+     * Cancels and Closes NamedParamPreparedStatement, hides and logs any SQLException.\n+     * @param stmt NamedParamPreparedStatement to close.\n+     */\n+    private static void cancelAndCloseSoftly(NamedParamPreparedStatement stmt) {\n+        cancelSoftly(stmt);\n+        try {\n+            if (stmt != null && !stmt.isClosed()) {\n+                stmt.close();\n+            }\n+        } catch (SQLException e) {\n+            log.error(\"Exception encountered during close statement.\", e);\n+        }\n+    }\n+\n+    /**\n+     * Closes Connection, hides and logs any SQLException.\n+     * @param conn Connection to close.\n+     */\n+    private static void closeSoftly(Connection conn) {\n+        try {\n+            if (conn != null) {\n+                conn.close();\n+            }\n+        } catch (SQLException e) {\n+            log.error(\"Exception encountered during close connection.\", e);\n+        }\n+    }\n }\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "ff86c56fde9064e1719ea35660fd04c42c949662", "message": "Merge commit", "committedDate": null}, {"oid": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "parent a14ccfbb7b558d27799b4e7b1916850519639708 author Jack (\uc815\ud658) <QubitPi@users.noreply.github.com> 1559678988 -0700 committer Aaron Klish <klish@verizonmedia.com> 1589583449 -0500"}, {"oid": "3f34e76977a5a591eca1f8c00ac986562a38d250", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Introduce QueryResult class for QueryEngine caching (#1333)"}, {"oid": "81dde7567aa8a6a00822a9a8f0bf901806a962e8", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add caching support to SQLQueryEngine (#1319)"}, {"oid": "9c897058ce0b9656bf2aef2318d0addc474f278a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "implement cancel function (#1367)"}, {"oid": "8fece2b8f1b3078ce2598ddb03dca66bb984df46", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Aggregation DataStore QueryLogger Implementation (#1448)"}, {"oid": "61ac33e39ba94617114273238754be32b006735b", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add SQLDialect implementations and tests. (#1487)"}, {"oid": "ca35ad817f2fde68b2f9c39d0d4d9c9d44ebffd5", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Query Engine and Aggregation Store Changes for Multi Data Source Support (#1523)"}, {"oid": "11e5083ef0755c62f86c287cf73c376d6c8b8c40", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Refactor query plan (#1579)"}, {"oid": "df3ea922a7550ec35585ce289e1d74101c4f28e4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5: Decouple query and metadata (#1585)"}, {"oid": "dc254e6a99100c21abd94eac3f0252bb9c5029df", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Support nested queries (#1591)"}, {"oid": "9057572200f962b7735270005cd9b51c368c0a0b", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5: Sketch out support for nested query plans. (#1594)"}, {"oid": "7daf58155ba6980d10a0171f72ea32a05af1ac6a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Added SQL Generation Tests for Nested Aggregation Queries (#1602)"}, {"oid": "e140eebdb89d74eb0f16fc8b157c6223cbb07992", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Refactor dbconnection (#1622)"}, {"oid": "df24aa71c283e12d2489982300580cfa80c9755c", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Migrate metadatacalls to metadata store (#1624)"}, {"oid": "c6f23dd421705b7a93be8823310143e6b631c7e4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Quote all identifiers in SQL query (#1621)"}, {"oid": "1dac58a1a989bbc3db52e87b77d19a5077c5ea5b", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Attempt to run explain query tests against H2 in compliance mode against targeted databases (#1633)"}, {"oid": "49e61867e840d9818993879436d5db1aad964c9a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Move data store interfaces (#1671)"}, {"oid": "911d29408bdeeb4ff8d78f2beea2417be4e7c673", "committedDate": "2020-12-11 16:20:28 -0600", "message": "cleaned up package hierarchy for elide-core (#1672)"}, {"oid": "c14096bec256faf80e7674fbef22bccff1f955a3", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Moved contrib.dynamicconfighelpers to modelconfig package (#1676)"}, {"oid": "bea43ef0f244ba01c2f7d4216b9f08f0ef4e83a4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Optionally compile hjson configs while running CLI (#1693)"}, {"oid": "172f3833738466c50648a2f4c3644eae46706aa2", "committedDate": "2021-01-12 15:51:35 -0600", "message": "Issue#1750 Fix SQL query generation for record count"}, {"oid": "979561b9129a15723594d23fbef0c584788ce100", "committedDate": "2021-01-19 10:59:36 -0600", "message": "add druid dialect with new pagination query structure"}, {"oid": "ccbcbcb65f7cae54ede4cd5242ecb19a8f84368c", "committedDate": "2021-01-19 10:59:36 -0600", "message": "change all count distinct queries to group by query for pagination"}, {"oid": "3f79dc112b211df777ab5fee15c27671c0f1bcdf", "committedDate": "2021-01-19 10:59:36 -0600", "message": "return null if no dimension projection is available."}, {"oid": "beb2cdfa0cd863756e7b095c0a58c733e484a944", "committedDate": "2021-01-19 10:59:36 -0600", "message": "address comments"}, {"oid": "17152126cb2f014076efd84ac3fd3be233f25c64", "committedDate": "2021-01-19 10:59:36 -0600", "message": "fix null pointer exception and add test case"}, {"oid": "f88b63d286d73d3774558b24f16aef0bb0be6d1a", "committedDate": "2021-01-19 14:16:37 -0600", "message": "Initial Commit for Type changes"}, {"oid": "ba73bc2a5617fed8feeee5b419a0f0808081628f", "committedDate": "2021-02-04 11:31:56 -0600", "message": "Elide 5 Agg Store: Multiple time grains (#1806)"}, {"oid": "8274a6341e06c7201049e8e8f0a48f07bd99a0ef", "committedDate": "2021-03-10 16:38:34 -0600", "message": "Cleanup IDE warnings (#1894)"}, {"oid": "c19d8c2237e960d792dc2ef6375356433b4fac21", "committedDate": "2021-03-11 17:10:26 -0600", "message": "Classtype cleanup (#1905)"}, {"oid": "212dcab497c321f67b66d619748b023201f2c819", "committedDate": "2021-03-16 10:13:31 -0500", "message": "Remove source from ColumnProjection (#1918)"}, {"oid": "e1e07dbeabb690560754c84200b67e7a8d4d9229", "committedDate": "2021-03-22 09:06:06 -0500", "message": "Part 4 of Query Plan Optimization : Fix Metric Nesting (#1924)"}, {"oid": "ed941827e1027083367b4df9794501909279c667", "committedDate": "2021-03-25 22:55:35 -0400", "message": "diamonds to reduce duplication (#1947)"}, {"oid": "5aa899ebbc6af4bfb538a4c04deef2218348a178", "committedDate": "2021-03-26 01:03:25 -0400", "message": "Issue 1929 - define function as lambda (#1945)"}, {"oid": "dc7a367e14c9f43b2d013f5037341055a29f0491", "committedDate": "2021-03-26 10:31:26 -0400", "message": "Issue 1929 - Address Sonar suggestions (#1925)"}, {"oid": "cd008a45ad379004b92c5114150016027aa07b80", "committedDate": "2021-03-26 10:35:48 -0500", "message": "Query plan optimizer phase5 (#1961)"}, {"oid": "234905d972c491934ce3774771c9733193b45007", "committedDate": "2021-04-01 10:20:16 -0500", "message": "Phase 6: Query Optimization - Calcite parser (#1976)"}, {"oid": "7a0b59711bb5e269afbc6b15426a8aff94a5e447", "committedDate": "2021-04-01 14:51:05 -0500", "message": "Removed QueryPlanResolver.  Replaced it with MetricProjectionMaker.  Small fix to Calcite parser builder to use the SQL conformance of the underlying dialect (#1980)"}, {"oid": "43598e8411d544b31d9807ded4f248e25ef334a4", "committedDate": "2021-04-01 17:32:17 -0500", "message": "Add Table Level Query Hints (#1981)"}, {"oid": "89e96b0bb45da69b08e6c8df6d8d7d23090eec37", "committedDate": "2021-04-22 17:56:53 -0400", "message": "Resolution using Table Context (#2004)"}, {"oid": "53b23330ff54b12041e530a931329986ddd3e454", "committedDate": "2021-04-28 13:29:43 -0400", "message": "Aggregation Store: Namespace Metadata changes (#2037)"}, {"oid": "256ca8e18dbae4b8ff6c1adbd8e37b236ef5e575", "committedDate": "2021-05-03 11:58:57 -0400", "message": "Refactor Column Projections (#2049)"}, {"oid": "d21f942a219ba7f32757f334d7e61c78e126d6be", "committedDate": "2021-05-04 15:24:11 -0500", "message": "Use only queried column args & default args for logical column expansion (#2054)"}, {"oid": "d2843b24f4a1ed35907726ff62f09049ce37d081", "committedDate": "2021-05-06 10:54:37 -0500", "message": "Optional flow (#2069)"}, {"oid": "1bb35bea711c420f00cfd97596dfa9177e15277e", "committedDate": "2021-05-10 14:36:06 -0500", "message": "Populating namespaces in metadatastore (#2071)"}, {"oid": "0a3776bacb5809845d9a04a1263db9760f117b92", "committedDate": "2021-05-13 13:25:15 -0500", "message": "Injection Protection for parameterized metrics/dimensions (#2090)"}, {"oid": "35e214dd718e164e30529eff4feab4d5fcd62d27", "committedDate": "2021-05-13 16:25:00 -0400", "message": "Resolve arguments in FromSubquery (#2089)"}, {"oid": "bf246b21912e4b299e4330089198ba2eee01fbec", "committedDate": "2021-05-13 17:30:24 -0500", "message": "Generate dynamic alias for join source (#2065)"}, {"oid": "32856f2244a3334028099eeb7ecd13b69fa41016", "committedDate": "2021-05-18 11:21:54 -0500", "message": "Aggregation Store ID Column Metadata (#2099)"}, {"oid": "e1c93d9f34829c4ee142a4919b5fde26502eaa11", "committedDate": "2021-05-19 17:24:06 -0400", "message": "Verify table arguments. (#2110)"}, {"oid": "b2eadb111297a8167f2715e027b9284c765adb32", "committedDate": "2021-05-20 16:42:02 -0400", "message": "Verify column arguments. (#2114)"}, {"oid": "4b8310f782f755f20fa79b52b7e4d13480b140f9", "committedDate": "2021-05-21 10:06:37 -0500", "message": "Remove usage of SQLReferenceTable. (#2116)"}, {"oid": "f9c2304cdbd7a1fb0f62cb024a19b2f2335832f2", "committedDate": "2021-06-24 13:55:06 -0400", "message": "Make AS before table alias optional, i.e. dialect based (#2179)"}, {"oid": "101f842daa06095652f898bda0f96fead4bb373e", "committedDate": "2021-08-05 14:37:57 -0500", "message": "GraphQL schema now namespaces internal types to avoid conflicts (#2237)"}, {"oid": "a874733a5c2ac3777e5946f6eddfade651d80c7a", "committedDate": "2021-08-06 17:30:43 -0500", "message": "Fix bug where dialect time conversion is skipped (#2238)"}, {"oid": "b88c19ef352c7bff44d4375d4a5f3e6b55054c3e", "committedDate": "2021-10-14 16:42:33 -0500", "message": "Aggregation Store: Make EntityHydrator stream results. (#2333)"}, {"oid": "830b9f2a997eefcd677090875bede2e21e19f1f4", "committedDate": "2021-10-20 14:48:56 -0500", "message": "Support 'hidden' flag for analytic models and fields. (#2357)"}, {"oid": "38b030daa701f205215b56199705f3d689726527", "committedDate": "2021-11-29 16:30:05 -0600", "message": "Enum filter fix (#2422)"}, {"oid": "54cdcb9fe67225cd463e1bf9357f0e1d2a42c152", "committedDate": "2021-12-02 15:11:51 -0600", "message": "HJSON Configuration Models and DataStore (#2418)"}, {"oid": "6b2b60098436a3dd7db03697ffd4717122fa3bf6", "committedDate": "2022-01-04 13:51:45 -0600", "message": "use query with filter to populate query parameters in pagination (#2466)"}, {"oid": "d0552c5750608391d52e3e3286469901726a7d06", "committedDate": "2022-01-28 16:02:28 -0600", "message": "Support filters on query plans (#2526)"}, {"oid": "f21f35950fe465cfbf135d06cc8ae2321a29513a", "committedDate": "2023-02-04 15:34:06 -0600", "message": "Elide 7.x (#2876)"}]}, {"oid": "f08727cf16a6ab9570bf506573ee9b5995ecb910", "url": "https://github.com/yahoo/elide/commit/f08727cf16a6ab9570bf506573ee9b5995ecb910", "message": "Future implementation", "committedDate": "2020-06-06T00:02:15Z", "type": "commit"}, {"oid": "4e694992ae92fcce5f385921b2180c2c8a5458e4", "url": "https://github.com/yahoo/elide/commit/4e694992ae92fcce5f385921b2180c2c8a5458e4", "message": "adding Future Task", "committedDate": "2020-06-09T21:35:10Z", "type": "commit"}, {"oid": "b69bb59dc6373110fb697c9f912cc73857df7c26", "url": "https://github.com/yahoo/elide/commit/b69bb59dc6373110fb697c9f912cc73857df7c26", "message": "adding Future Task", "committedDate": "2020-06-09T22:09:12Z", "type": "commit"}, {"oid": "65af8b243bc06462059e6c1977505db4efcf5388", "url": "https://github.com/yahoo/elide/commit/65af8b243bc06462059e6c1977505db4efcf5388", "message": "adding Future Task", "committedDate": "2020-06-09T22:33:27Z", "type": "commit"}, {"oid": "8064be350bc30ffb58923074f4a08d143f3c21c5", "url": "https://github.com/yahoo/elide/commit/8064be350bc30ffb58923074f4a08d143f3c21c5", "message": "fixing future implementation", "committedDate": "2020-06-10T17:04:53Z", "type": "commit"}, {"oid": "e34abc31bbdf2ddbdb8dc969684bc3c0c624c3c6", "url": "https://github.com/yahoo/elide/commit/e34abc31bbdf2ddbdb8dc969684bc3c0c624c3c6", "message": "fixing future implementation", "committedDate": "2020-06-10T18:05:10Z", "type": "commit"}, {"oid": "4c63c3d82c2ec38784396bc1fd4ca2d8b18dd891", "url": "https://github.com/yahoo/elide/commit/4c63c3d82c2ec38784396bc1fd4ca2d8b18dd891", "message": "fixing future implementation", "committedDate": "2020-06-10T18:07:37Z", "type": "commit"}, {"oid": "4688f151689cff2275c12a329d38538c7ad565f6", "url": "https://github.com/yahoo/elide/commit/4688f151689cff2275c12a329d38538c7ad565f6", "message": "fixing future implementation", "committedDate": "2020-06-10T18:55:24Z", "type": "commit"}, {"oid": "82d67de6ec5eec028d55c9df130c44932fedfe53", "url": "https://github.com/yahoo/elide/commit/82d67de6ec5eec028d55c9df130c44932fedfe53", "message": "fixing future implementation", "committedDate": "2020-06-10T19:02:28Z", "type": "commit"}, {"oid": "c637d51fba403ac0e2c8fad524d4ea781e985951", "url": "https://github.com/yahoo/elide/commit/c637d51fba403ac0e2c8fad524d4ea781e985951", "message": "fixing issues", "committedDate": "2020-06-10T21:39:13Z", "type": "commit"}, {"oid": "3ea7627e62a20cc5592eae3bf24453e210b79cd9", "url": "https://github.com/yahoo/elide/commit/3ea7627e62a20cc5592eae3bf24453e210b79cd9", "message": "fixing issues", "committedDate": "2020-06-10T22:01:16Z", "type": "commit"}, {"oid": "ffb6b1c36820405ee659715b424ba9fffeb98848", "url": "https://github.com/yahoo/elide/commit/ffb6b1c36820405ee659715b424ba9fffeb98848", "message": "fixing issues", "committedDate": "2020-06-10T22:05:31Z", "type": "commit"}, {"oid": "3cd05225a53f92969d1ad2e198bcc69a8bbf6553", "url": "https://github.com/yahoo/elide/commit/3cd05225a53f92969d1ad2e198bcc69a8bbf6553", "message": "fixing issues", "committedDate": "2020-06-11T00:50:38Z", "type": "commit"}, {"oid": "29a38cdada5722b35cd77d0afa75b6a83402edcc", "url": "https://github.com/yahoo/elide/commit/29a38cdada5722b35cd77d0afa75b6a83402edcc", "message": "fixing issues", "committedDate": "2020-06-11T00:55:14Z", "type": "commit"}, {"oid": "db6c4df81cfb8cccb5e68525a34a81e9dbac1615", "url": "https://github.com/yahoo/elide/commit/db6c4df81cfb8cccb5e68525a34a81e9dbac1615", "message": "fixing issues", "committedDate": "2020-06-11T01:12:50Z", "type": "commit"}, {"oid": "68abcb04edd68bd0f0ea6af213cc5e78fe3c1031", "url": "https://github.com/yahoo/elide/commit/68abcb04edd68bd0f0ea6af213cc5e78fe3c1031", "message": "fixing issues", "committedDate": "2020-06-11T01:27:34Z", "type": "commit"}, {"oid": "3ebdbab6e70fcaf1d59b9ebb0981c0c121a88b03", "url": "https://github.com/yahoo/elide/commit/3ebdbab6e70fcaf1d59b9ebb0981c0c121a88b03", "message": "fixing issues", "committedDate": "2020-06-11T01:43:40Z", "type": "commit"}, {"oid": "7d139dd8d8e92c95d0b8f84fa9d055008d19a276", "url": "https://github.com/yahoo/elide/commit/7d139dd8d8e92c95d0b8f84fa9d055008d19a276", "message": "fixing issues", "committedDate": "2020-06-11T03:10:16Z", "type": "commit"}, {"oid": "9e0ab2803bf8ac47057c1034d4d1959febdbf99a", "url": "https://github.com/yahoo/elide/commit/9e0ab2803bf8ac47057c1034d4d1959febdbf99a", "message": "fixing issues", "committedDate": "2020-06-11T03:21:38Z", "type": "commit"}, {"oid": "a8a42cd685b6b84d87214b0a08760ed7f087499b", "url": "https://github.com/yahoo/elide/commit/a8a42cd685b6b84d87214b0a08760ed7f087499b", "message": "fixing issues", "committedDate": "2020-06-11T03:28:35Z", "type": "commit"}, {"oid": "ffe953c5821f3ca64e149b0920ec0f47ee862d81", "url": "https://github.com/yahoo/elide/commit/ffe953c5821f3ca64e149b0920ec0f47ee862d81", "message": "fixing issues", "committedDate": "2020-06-11T03:35:13Z", "type": "commit"}, {"oid": "3fee0a69a9fbf86639427c06f3c1675cd95d7abb", "url": "https://github.com/yahoo/elide/commit/3fee0a69a9fbf86639427c06f3c1675cd95d7abb", "message": "fixing issues", "committedDate": "2020-06-11T03:49:26Z", "type": "commit"}, {"oid": "24a43c7260331ffdf3b6a62853a3601a983a5f63", "url": "https://github.com/yahoo/elide/commit/24a43c7260331ffdf3b6a62853a3601a983a5f63", "message": "fixing issues", "committedDate": "2020-06-11T03:52:03Z", "type": "commit"}, {"oid": "9a6dbc1186dfd5231d531fe04795a27b68f4fcd2", "url": "https://github.com/yahoo/elide/commit/9a6dbc1186dfd5231d531fe04795a27b68f4fcd2", "message": "fixing issues", "committedDate": "2020-06-11T04:44:12Z", "type": "commit"}, {"oid": "07810b7bffcba1c415accbeada4401a05592beca", "url": "https://github.com/yahoo/elide/commit/07810b7bffcba1c415accbeada4401a05592beca", "message": "fixing issues", "committedDate": "2020-06-11T05:06:25Z", "type": "commit"}, {"oid": "c210de6174fbb8680f4aa6a04ae3adeda9f90e7d", "url": "https://github.com/yahoo/elide/commit/c210de6174fbb8680f4aa6a04ae3adeda9f90e7d", "message": "fixing issues", "committedDate": "2020-06-11T05:22:27Z", "type": "commit"}, {"oid": "18a8cc9d0da96a239329ca6b6c4b7eecee346b8e", "url": "https://github.com/yahoo/elide/commit/18a8cc9d0da96a239329ca6b6c4b7eecee346b8e", "message": "fixing issues", "committedDate": "2020-06-11T05:49:07Z", "type": "commit"}, {"oid": "310d11332a6723ae95ce225bfbec09597935909b", "url": "https://github.com/yahoo/elide/commit/310d11332a6723ae95ce225bfbec09597935909b", "message": "fixing issues", "committedDate": "2020-06-11T06:22:02Z", "type": "commit"}, {"oid": "da7ea017126a52888a1be9b1b4aa5c084a8700bd", "url": "https://github.com/yahoo/elide/commit/da7ea017126a52888a1be9b1b4aa5c084a8700bd", "message": "fixing issues", "committedDate": "2020-06-11T06:25:43Z", "type": "commit"}, {"oid": "9e8f8450a484566ff07562918af320fbffa4c5ed", "url": "https://github.com/yahoo/elide/commit/9e8f8450a484566ff07562918af320fbffa4c5ed", "message": "fixing issues", "committedDate": "2020-06-11T06:49:39Z", "type": "commit"}, {"oid": "f287eb56a4bde971ba3121faf61d3c579827e2cd", "url": "https://github.com/yahoo/elide/commit/f287eb56a4bde971ba3121faf61d3c579827e2cd", "message": "fixing issues", "committedDate": "2020-06-11T07:09:21Z", "type": "commit"}, {"oid": "479ad805c404204be32af9870b7bf439d3cf6862", "url": "https://github.com/yahoo/elide/commit/479ad805c404204be32af9870b7bf439d3cf6862", "message": "fixing issues", "committedDate": "2020-06-11T07:29:28Z", "type": "commit"}, {"oid": "c492c68cc1cd98c7ae88b9286a345b73443a8af3", "url": "https://github.com/yahoo/elide/commit/c492c68cc1cd98c7ae88b9286a345b73443a8af3", "message": "fixing bugs", "committedDate": "2020-06-11T14:34:20Z", "type": "commit"}, {"oid": "6b630aaf4f5175e7587005b180b5617e104cd172", "url": "https://github.com/yahoo/elide/commit/6b630aaf4f5175e7587005b180b5617e104cd172", "message": "fixing issues", "committedDate": "2020-06-11T14:40:52Z", "type": "commit"}, {"oid": "3716a136a00ca61ed4365003e1ccad69f61fc6d3", "url": "https://github.com/yahoo/elide/commit/3716a136a00ca61ed4365003e1ccad69f61fc6d3", "message": "fixing issues", "committedDate": "2020-06-11T14:52:59Z", "type": "commit"}, {"oid": "26f34ef28a3beaf029049dd3beec09acf765d0df", "url": "https://github.com/yahoo/elide/commit/26f34ef28a3beaf029049dd3beec09acf765d0df", "message": "fixing issues", "committedDate": "2020-06-11T15:08:02Z", "type": "commit"}, {"oid": "a4f5aecf8e7d441dc3839c820184852cdac19e2a", "url": "https://github.com/yahoo/elide/commit/a4f5aecf8e7d441dc3839c820184852cdac19e2a", "message": "fixing issues", "committedDate": "2020-06-11T15:23:43Z", "type": "commit"}, {"oid": "471c4d3c04b78a7e762f891c3b8bc8f8cd62c01d", "url": "https://github.com/yahoo/elide/commit/471c4d3c04b78a7e762f891c3b8bc8f8cd62c01d", "message": "fixing bugs", "committedDate": "2020-06-11T15:44:51Z", "type": "commit"}, {"oid": "6f302a834556e9a38bece0c4b6f1bca6173db345", "url": "https://github.com/yahoo/elide/commit/6f302a834556e9a38bece0c4b6f1bca6173db345", "message": "fixing bugs", "committedDate": "2020-06-11T16:05:55Z", "type": "commit"}, {"oid": "e08e565fc31abb27d39659a8381192db2831f858", "url": "https://github.com/yahoo/elide/commit/e08e565fc31abb27d39659a8381192db2831f858", "message": "fixing bugs", "committedDate": "2020-06-11T16:26:12Z", "type": "commit"}, {"oid": "dbc78efebfee88fee8f9052ca71b03de71d4361c", "url": "https://github.com/yahoo/elide/commit/dbc78efebfee88fee8f9052ca71b03de71d4361c", "message": "fixing bugs", "committedDate": "2020-06-11T16:57:40Z", "type": "commit"}, {"oid": "e5069401f814dc776db4b3487dfa8b8a7f7b1f09", "url": "https://github.com/yahoo/elide/commit/e5069401f814dc776db4b3487dfa8b8a7f7b1f09", "message": "fixing bugs", "committedDate": "2020-06-11T17:13:24Z", "type": "commit"}, {"oid": "4cdd85204ff743b88bbdc0422484c5730888a136", "url": "https://github.com/yahoo/elide/commit/4cdd85204ff743b88bbdc0422484c5730888a136", "message": "fixing bugs", "committedDate": "2020-06-11T17:33:46Z", "type": "commit"}, {"oid": "86c33d3c97613f23a745dff57f381775d776d1c6", "url": "https://github.com/yahoo/elide/commit/86c33d3c97613f23a745dff57f381775d776d1c6", "message": "fixing bugs", "committedDate": "2020-06-11T17:59:11Z", "type": "commit"}, {"oid": "97ae6a5c40ca2d4afdc72228d181f8c115f77c48", "url": "https://github.com/yahoo/elide/commit/97ae6a5c40ca2d4afdc72228d181f8c115f77c48", "message": "fixing bugs", "committedDate": "2020-06-11T18:11:42Z", "type": "commit"}, {"oid": "d54810e706258af15b2411b879d8c33ad66f6772", "url": "https://github.com/yahoo/elide/commit/d54810e706258af15b2411b879d8c33ad66f6772", "message": "ExecutionException", "committedDate": "2020-06-11T18:29:12Z", "type": "commit"}, {"oid": "a285916e33b17f94ef6c9d76dd39cf45ad365d25", "url": "https://github.com/yahoo/elide/commit/a285916e33b17f94ef6c9d76dd39cf45ad365d25", "message": "fixing issues", "committedDate": "2020-06-11T21:49:27Z", "type": "commit"}, {"oid": "6d62363e7c52af8ec7d45eb0c06a7c22bdcf9bc0", "url": "https://github.com/yahoo/elide/commit/6d62363e7c52af8ec7d45eb0c06a7c22bdcf9bc0", "message": "aggregation changes", "committedDate": "2020-06-11T22:44:35Z", "type": "commit"}, {"oid": "b8996a29ba6b51f4a375860b1a17bf103ca2de92", "url": "https://github.com/yahoo/elide/commit/b8996a29ba6b51f4a375860b1a17bf103ca2de92", "message": "aggregation changes", "committedDate": "2020-06-11T23:02:00Z", "type": "commit"}, {"oid": "f7097877104df197c860dc14db785fbad533d5ee", "url": "https://github.com/yahoo/elide/commit/f7097877104df197c860dc14db785fbad533d5ee", "message": "aggregation changes", "committedDate": "2020-06-11T23:29:20Z", "type": "commit"}, {"oid": "3123771c5f0dd5b3f4684a3315f57c941aa3a1f4", "url": "https://github.com/yahoo/elide/commit/3123771c5f0dd5b3f4684a3315f57c941aa3a1f4", "message": "fixing bugs", "committedDate": "2020-06-12T03:12:42Z", "type": "commit"}, {"oid": "bf243848d8af7942dbef80d6cd6f8b0e2c5a2ea4", "url": "https://github.com/yahoo/elide/commit/bf243848d8af7942dbef80d6cd6f8b0e2c5a2ea4", "message": "fixing bugs", "committedDate": "2020-06-12T03:18:44Z", "type": "commit"}, {"oid": "43ce9e801ed051344593d1af60db17481904b045", "url": "https://github.com/yahoo/elide/commit/43ce9e801ed051344593d1af60db17481904b045", "message": "fixing bugs", "committedDate": "2020-06-12T03:42:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ5MjAyOQ==", "url": "https://github.com/yahoo/elide/pull/1367#discussion_r439492029", "body": "Can you mention in the comments that the implementation must be thread-safe?", "bodyText": "Can you mention in the comments that the implementation must be thread-safe?", "bodyHTML": "<p dir=\"auto\">Can you mention in the comments that the implementation must be thread-safe?</p>", "author": "aklish", "createdAt": "2020-06-12T15:34:55Z", "path": "elide-core/src/main/java/com/yahoo/elide/core/DataStoreTransaction.java", "diffHunk": "@@ -267,4 +267,9 @@ default boolean supportsPagination(Class<?> entityClass, FilterExpression expres\n      * @return UUID id\n      */\n     UUID getRequestId();\n+\n+    /**\n+     * cancel running transaction", "originalCommit": "43ce9e801ed051344593d1af60db17481904b045", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8f1cfb480ee2db34373cee4ca35e5eef6b339a51", "changed_code": [{"header": "diff --git a/elide-core/src/main/java/com/yahoo/elide/core/DataStoreTransaction.java b/elide-core/src/main/java/com/yahoo/elide/core/DataStoreTransaction.java\nindex a18f6995b..3c55ced35 100644\n--- a/elide-core/src/main/java/com/yahoo/elide/core/DataStoreTransaction.java\n+++ b/elide-core/src/main/java/com/yahoo/elide/core/DataStoreTransaction.java\n", "chunk": "@@ -269,7 +269,8 @@ public interface DataStoreTransaction extends Closeable {\n     UUID getRequestId();\n \n     /**\n-     * cancel running transaction\n+     * Cancel running transaction.\n+     * Thread-safe implementation\n      */\n     void cancel();\n }\n", "next_change": {"commit": "d6dd7bddcc572305a4c25663c97a26506b81bc86", "changed_code": [{"header": "diff --git a/elide-core/src/main/java/com/yahoo/elide/core/DataStoreTransaction.java b/elide-core/src/main/java/com/yahoo/elide/core/DataStoreTransaction.java\nindex 3c55ced35..9e2082120 100644\n--- a/elide-core/src/main/java/com/yahoo/elide/core/DataStoreTransaction.java\n+++ b/elide-core/src/main/java/com/yahoo/elide/core/DataStoreTransaction.java\n", "chunk": "@@ -270,7 +270,7 @@ public interface DataStoreTransaction extends Closeable {\n \n     /**\n      * Cancel running transaction.\n-     * Thread-safe implementation\n+     * Implementation must be thread-safe\n      */\n     void cancel();\n }\n", "next_change": {"commit": "10b08031c01a3228c6f335ba5b1d51b0da68f8e6", "changed_code": [{"header": "diff --git a/elide-core/src/main/java/com/yahoo/elide/core/DataStoreTransaction.java b/elide-core/src/main/java/com/yahoo/elide/core/DataStoreTransaction.java\nindex 9e2082120..e9b7df2ae 100644\n--- a/elide-core/src/main/java/com/yahoo/elide/core/DataStoreTransaction.java\n+++ b/elide-core/src/main/java/com/yahoo/elide/core/DataStoreTransaction.java\n", "chunk": "@@ -270,7 +270,7 @@ public interface DataStoreTransaction extends Closeable {\n \n     /**\n      * Cancel running transaction.\n-     * Implementation must be thread-safe\n+     * Implementation must be thread-safe.\n      */\n     void cancel();\n }\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "ff86c56fde9064e1719ea35660fd04c42c949662", "changed_code": [{"header": "diff --git a/elide-core/src/main/java/com/yahoo/elide/core/DataStoreTransaction.java b/elide-core/src/main/java/com/yahoo/elide/core/DataStoreTransaction.java\nindex a18f6995b..e9b7df2ae 100644\n--- a/elide-core/src/main/java/com/yahoo/elide/core/DataStoreTransaction.java\n+++ b/elide-core/src/main/java/com/yahoo/elide/core/DataStoreTransaction.java\n", "chunk": "@@ -269,7 +269,8 @@ public interface DataStoreTransaction extends Closeable {\n     UUID getRequestId();\n \n     /**\n-     * cancel running transaction\n+     * Cancel running transaction.\n+     * Implementation must be thread-safe.\n      */\n     void cancel();\n }\n", "next_change": {"commit": "dae9b09fc3bc3dcc14ee0bb14499bf55e0f3bced", "changed_code": [{"header": "diff --git a/elide-core/src/main/java/com/yahoo/elide/core/DataStoreTransaction.java b/elide-core/src/main/java/com/yahoo/elide/core/DataStoreTransaction.java\nindex e9b7df2ae..3329929f0 100644\n--- a/elide-core/src/main/java/com/yahoo/elide/core/DataStoreTransaction.java\n+++ b/elide-core/src/main/java/com/yahoo/elide/core/DataStoreTransaction.java\n", "chunk": "@@ -255,22 +280,10 @@ public interface DataStoreTransaction extends Closeable {\n \n     /**\n      * Whether or not the transaction can paginate the provided class.\n-     * @param entityClass The entity class that is being paged.\n-     * @param expression The filter expression\n+     * @param entityClass\n      * @return true if pagination is possible\n      */\n-    default boolean supportsPagination(Class<?> entityClass, FilterExpression expression) {\n+    default boolean supportsPagination(Class<?> entityClass) {\n         return true;\n     }\n-    /**\n-     * Transaction ID for each transaction\n-     * @return UUID id\n-     */\n-    UUID getRequestId();\n-\n-    /**\n-     * Cancel running transaction.\n-     * Implementation must be thread-safe.\n-     */\n-    void cancel();\n }\n", "next_change": {"commit": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "changed_code": [{"header": "diff --git a/elide-core/src/main/java/com/yahoo/elide/core/DataStoreTransaction.java b/elide-core/src/main/java/com/yahoo/elide/core/DataStoreTransaction.java\nindex 3329929f0..a57d31f65 100644\n--- a/elide-core/src/main/java/com/yahoo/elide/core/DataStoreTransaction.java\n+++ b/elide-core/src/main/java/com/yahoo/elide/core/DataStoreTransaction.java\n", "chunk": "@@ -280,10 +257,11 @@ public interface DataStoreTransaction extends Closeable {\n \n     /**\n      * Whether or not the transaction can paginate the provided class.\n-     * @param entityClass\n+     * @param entityClass The entity class that is being paged.\n+     * @param expression The filter expression\n      * @return true if pagination is possible\n      */\n-    default boolean supportsPagination(Class<?> entityClass) {\n+    default boolean supportsPagination(Class<?> entityClass, FilterExpression expression) {\n         return true;\n     }\n }\n", "next_change": {"commit": "82df79169b68ec9e51172dda843cbc2b9fea907a", "changed_code": [{"header": "diff --git a/elide-core/src/main/java/com/yahoo/elide/core/DataStoreTransaction.java b/elide-core/src/main/java/com/yahoo/elide/core/DataStoreTransaction.java\nindex a57d31f65..3ccd5f4af 100644\n--- a/elide-core/src/main/java/com/yahoo/elide/core/DataStoreTransaction.java\n+++ b/elide-core/src/main/java/com/yahoo/elide/core/DataStoreTransaction.java\n", "chunk": "@@ -264,4 +263,9 @@ public interface DataStoreTransaction extends Closeable {\n     default boolean supportsPagination(Class<?> entityClass, FilterExpression expression) {\n         return true;\n     }\n+    /**\n+     * Transaction ID for each transaction\n+     * @return UUID id\n+     */\n+    UUID getRequestId();\n }\n", "next_change": {"commit": "9c897058ce0b9656bf2aef2318d0addc474f278a", "changed_code": [{"header": "diff --git a/elide-core/src/main/java/com/yahoo/elide/core/DataStoreTransaction.java b/elide-core/src/main/java/com/yahoo/elide/core/DataStoreTransaction.java\nindex 3ccd5f4af..deaf38cc8 100644\n--- a/elide-core/src/main/java/com/yahoo/elide/core/DataStoreTransaction.java\n+++ b/elide-core/src/main/java/com/yahoo/elide/core/DataStoreTransaction.java\n", "chunk": "@@ -268,4 +268,10 @@ public interface DataStoreTransaction extends Closeable {\n      * @return UUID id\n      */\n     UUID getRequestId();\n+\n+    /**\n+     * Cancel running transaction.\n+     * Implementation must be thread-safe.\n+     */\n+    void cancel();\n }\n", "next_change": {"commit": "c823f5a24efd81298d5fdd0ffc1657be7572b2b4", "changed_code": [{"header": "diff --git a/elide-core/src/main/java/com/yahoo/elide/core/DataStoreTransaction.java b/elide-core/src/main/java/com/yahoo/elide/core/DataStoreTransaction.java\nindex deaf38cc8..2e3be0cc1 100644\n--- a/elide-core/src/main/java/com/yahoo/elide/core/DataStoreTransaction.java\n+++ b/elide-core/src/main/java/com/yahoo/elide/core/DataStoreTransaction.java\n", "chunk": "@@ -263,11 +262,6 @@ public interface DataStoreTransaction extends Closeable {\n     default boolean supportsPagination(Class<?> entityClass, FilterExpression expression) {\n         return true;\n     }\n-    /**\n-     * Transaction ID for each transaction\n-     * @return UUID id\n-     */\n-    UUID getRequestId();\n \n     /**\n      * Cancel running transaction.\n", "next_change": {"commit": "8fece2b8f1b3078ce2598ddb03dca66bb984df46", "changed_code": [{"header": "diff --git a/elide-core/src/main/java/com/yahoo/elide/core/DataStoreTransaction.java b/elide-core/src/main/java/com/yahoo/elide/core/DataStoreTransaction.java\nindex 2e3be0cc1..f931f5776 100644\n--- a/elide-core/src/main/java/com/yahoo/elide/core/DataStoreTransaction.java\n+++ b/elide-core/src/main/java/com/yahoo/elide/core/DataStoreTransaction.java\n", "chunk": "@@ -266,6 +266,7 @@ public interface DataStoreTransaction extends Closeable {\n     /**\n      * Cancel running transaction.\n      * Implementation must be thread-safe.\n+     * @param scope contains request level metadata.\n      */\n-    void cancel();\n+    void cancel(RequestScope scope);\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "ff86c56fde9064e1719ea35660fd04c42c949662", "message": "Merge commit", "committedDate": null}, {"oid": "dae9b09fc3bc3dcc14ee0bb14499bf55e0f3bced", "committedDate": "2020-07-09 10:10:56 -0500", "message": "Issue 683 (#1384)"}, {"oid": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "parent a14ccfbb7b558d27799b4e7b1916850519639708 author Jack (\uc815\ud658) <QubitPi@users.noreply.github.com> 1559678988 -0700 committer Aaron Klish <klish@verizonmedia.com> 1589583449 -0500"}, {"oid": "82df79169b68ec9e51172dda843cbc2b9fea907a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "addTransaction-removeTransaction (#1338)"}, {"oid": "9c897058ce0b9656bf2aef2318d0addc474f278a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "implement cancel function (#1367)"}, {"oid": "c823f5a24efd81298d5fdd0ffc1657be7572b2b4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5- Unify request ids (#1423)"}, {"oid": "8fece2b8f1b3078ce2598ddb03dca66bb984df46", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Aggregation DataStore QueryLogger Implementation (#1448)"}, {"oid": "49e61867e840d9818993879436d5db1aad964c9a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Move data store interfaces (#1671)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ5MjQ3Nw==", "url": "https://github.com/yahoo/elide/pull/1367#discussion_r439492477", "body": "You don't need to call run() here.  Calling queryResult.get() should invoke queryResult.run()", "bodyText": "You don't need to call run() here.  Calling queryResult.get() should invoke queryResult.run()", "bodyHTML": "<p dir=\"auto\">You don't need to call run() here.  Calling queryResult.get() should invoke queryResult.run()</p>", "author": "aklish", "createdAt": "2020-06-12T15:35:44Z", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java", "diffHunk": "@@ -52,11 +56,21 @@ public void createObject(Object entity, RequestScope scope) {\n     @Override\n     public Iterable<Object> loadObjects(EntityProjection entityProjection, RequestScope scope) {\n         Query query = buildQuery(entityProjection, scope);\n-        QueryResult result = queryEngine.executeQuery(query);\n-        if (entityProjection.getPagination() != null && entityProjection.getPagination().returnPageTotals()) {\n-            entityProjection.getPagination().setPageTotals(result.getPageTotals());\n+        queryResult = queryEngine.executeQuery(query);\n+        queryResult.run();", "originalCommit": "43ce9e801ed051344593d1af60db17481904b045", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8f1cfb480ee2db34373cee4ca35e5eef6b339a51", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\nindex 979ed0247..a4fe2cefa 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\n", "chunk": "@@ -56,30 +62,35 @@ public class AggregationDataStoreTransaction extends DataStoreTransactionImpleme\n     @Override\n     public Iterable<Object> loadObjects(EntityProjection entityProjection, RequestScope scope) {\n         Query query = buildQuery(entityProjection, scope);\n-        queryResult = queryEngine.executeQuery(query);\n-        queryResult.run();\n-        try {\n-            QueryResult result = queryResult.get();\n-            if (entityProjection.getPagination() != null && entityProjection.getPagination().returnPageTotals()) {\n-                entityProjection.getPagination().setPageTotals(result.getPageTotals());\n+        QueryResult result = null;\n+\n+        String cacheKey = null;\n+        if (cache != null && !query.isBypassingCache()) {\n+            String tableVersion = queryEngine.getTableVersion(query.getTable(), queryEngineTransaction);\n+            if (tableVersion != null) {\n+                cacheKey = tableVersion + ';' + QueryKeyExtractor.extractKey(query);\n+                result = cache.get(cacheKey);\n+            }\n+        }\n+        if (result == null) {\n+            result = queryEngine.executeQuery(query, queryEngineTransaction);\n+            if (cacheKey != null) {\n+                cache.put(cacheKey, result);\n             }\n-            return result.getData();\n-        } catch (TransactionException e) {\n-            throw new TransactionException(null);\n-        } catch (InterruptedException e) {\n-            throw new IllegalStateException(e);\n-        } catch (ExecutionException e) {\n-            throw new IllegalStateException(e);\n         }\n+        if (entityProjection.getPagination() != null && entityProjection.getPagination().returnPageTotals()) {\n+            entityProjection.getPagination().setPageTotals(result.getPageTotals());\n+        }\n+        return result.getData();\n     }\n \n     @Override\n     public void close() throws IOException {\n-\n+        queryEngineTransaction.close();\n     }\n \n     @VisibleForTesting\n-    private Query buildQuery(EntityProjection entityProjection, RequestScope scope) {\n+    Query buildQuery(EntityProjection entityProjection, RequestScope scope) {\n         Table table = queryEngine.getTable(scope.getDictionary().getJsonAliasFor(entityProjection.getType()));\n         EntityProjectionTranslator translator = new EntityProjectionTranslator(\n                 queryEngine,\n", "next_change": null}]}, "revised_code_in_main": {"commit": "ff86c56fde9064e1719ea35660fd04c42c949662", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\nindex 979ed0247..50b5e9aaa 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\n", "chunk": "@@ -56,30 +62,35 @@ public class AggregationDataStoreTransaction extends DataStoreTransactionImpleme\n     @Override\n     public Iterable<Object> loadObjects(EntityProjection entityProjection, RequestScope scope) {\n         Query query = buildQuery(entityProjection, scope);\n-        queryResult = queryEngine.executeQuery(query);\n-        queryResult.run();\n-        try {\n-            QueryResult result = queryResult.get();\n-            if (entityProjection.getPagination() != null && entityProjection.getPagination().returnPageTotals()) {\n-                entityProjection.getPagination().setPageTotals(result.getPageTotals());\n+        QueryResult result = null;\n+\n+        String cacheKey = null;\n+        if (cache != null && !query.isBypassingCache()) {\n+            String tableVersion = queryEngine.getTableVersion(query.getTable(), queryEngineTransaction);\n+            if (tableVersion != null) {\n+                cacheKey = tableVersion + ';' + QueryKeyExtractor.extractKey(query);\n+                result = cache.get(cacheKey);\n             }\n-            return result.getData();\n-        } catch (TransactionException e) {\n-            throw new TransactionException(null);\n-        } catch (InterruptedException e) {\n-            throw new IllegalStateException(e);\n-        } catch (ExecutionException e) {\n-            throw new IllegalStateException(e);\n         }\n+        if (result == null) {\n+            result = queryEngine.executeQuery(query, queryEngineTransaction);\n+            if (cacheKey != null) {\n+                cache.put(cacheKey, result);\n+            }\n+        }\n+        if (entityProjection.getPagination() != null && entityProjection.getPagination().returnPageTotals()) {\n+            entityProjection.getPagination().setPageTotals(result.getPageTotals());\n+        }\n+        return result.getData();\n     }\n \n     @Override\n     public void close() throws IOException {\n-\n+        queryEngineTransaction.close();\n     }\n \n     @VisibleForTesting\n-    private Query buildQuery(EntityProjection entityProjection, RequestScope scope) {\n+    Query buildQuery(EntityProjection entityProjection, RequestScope scope) {\n         Table table = queryEngine.getTable(scope.getDictionary().getJsonAliasFor(entityProjection.getType()));\n         EntityProjectionTranslator translator = new EntityProjectionTranslator(\n                 queryEngine,\n", "next_change": {"commit": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\nindex 50b5e9aaa..ae2e6cdc0 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\n", "chunk": "@@ -62,35 +53,16 @@ public class AggregationDataStoreTransaction extends DataStoreTransactionImpleme\n     @Override\n     public Iterable<Object> loadObjects(EntityProjection entityProjection, RequestScope scope) {\n         Query query = buildQuery(entityProjection, scope);\n-        QueryResult result = null;\n-\n-        String cacheKey = null;\n-        if (cache != null && !query.isBypassingCache()) {\n-            String tableVersion = queryEngine.getTableVersion(query.getTable(), queryEngineTransaction);\n-            if (tableVersion != null) {\n-                cacheKey = tableVersion + ';' + QueryKeyExtractor.extractKey(query);\n-                result = cache.get(cacheKey);\n-            }\n-        }\n-        if (result == null) {\n-            result = queryEngine.executeQuery(query, queryEngineTransaction);\n-            if (cacheKey != null) {\n-                cache.put(cacheKey, result);\n-            }\n-        }\n-        if (entityProjection.getPagination() != null && entityProjection.getPagination().returnPageTotals()) {\n-            entityProjection.getPagination().setPageTotals(result.getPageTotals());\n-        }\n-        return result.getData();\n+        return queryEngine.executeQuery(query, true);\n     }\n \n     @Override\n     public void close() throws IOException {\n-        queryEngineTransaction.close();\n+\n     }\n \n     @VisibleForTesting\n-    Query buildQuery(EntityProjection entityProjection, RequestScope scope) {\n+    private Query buildQuery(EntityProjection entityProjection, RequestScope scope) {\n         Table table = queryEngine.getTable(scope.getDictionary().getJsonAliasFor(entityProjection.getType()));\n         EntityProjectionTranslator translator = new EntityProjectionTranslator(\n                 queryEngine,\n", "next_change": {"commit": "81dde7567aa8a6a00822a9a8f0bf901806a962e8", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\nindex ae2e6cdc0..494daa6ef 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\n", "chunk": "@@ -53,16 +62,35 @@ public class AggregationDataStoreTransaction implements DataStoreTransaction {\n     @Override\n     public Iterable<Object> loadObjects(EntityProjection entityProjection, RequestScope scope) {\n         Query query = buildQuery(entityProjection, scope);\n-        return queryEngine.executeQuery(query, true);\n+        QueryResult result = null;\n+\n+        String cacheKey = null;\n+        if (cache != null && !query.isBypassingCache()) {\n+            String tableVersion = queryEngine.getTableVersion(query.getTable(), queryEngineTransaction);\n+            if (tableVersion != null) {\n+                cacheKey = tableVersion + ';' + QueryKeyExtractor.extractKey(query);\n+                result = cache.get(cacheKey);\n+            }\n+        }\n+        if (result == null) {\n+            result = queryEngine.executeQuery(query, queryEngineTransaction);\n+            if (cacheKey != null) {\n+                cache.put(cacheKey, result);\n+            }\n+        }\n+        if (entityProjection.getPagination() != null && entityProjection.getPagination().returnPageTotals()) {\n+            entityProjection.getPagination().setPageTotals(result.getPageTotals());\n+        }\n+        return result.getData();\n     }\n \n     @Override\n     public void close() throws IOException {\n-\n+        queryEngineTransaction.close();\n     }\n \n     @VisibleForTesting\n-    private Query buildQuery(EntityProjection entityProjection, RequestScope scope) {\n+    Query buildQuery(EntityProjection entityProjection, RequestScope scope) {\n         Table table = queryEngine.getTable(scope.getDictionary().getJsonAliasFor(entityProjection.getType()));\n         EntityProjectionTranslator translator = new EntityProjectionTranslator(\n                 queryEngine,\n", "next_change": {"commit": "9c897058ce0b9656bf2aef2318d0addc474f278a", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\nindex 494daa6ef..50b5e9aaa 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\n", "chunk": "@@ -99,4 +99,9 @@ public class AggregationDataStoreTransaction extends DataStoreTransactionImpleme\n                 scope.getDictionary());\n         return translator.getQuery();\n     }\n+\n+    @Override\n+    public void cancel() {\n+        queryEngineTransaction.cancel();\n+    }\n }\n", "next_change": {"commit": "8fece2b8f1b3078ce2598ddb03dca66bb984df46", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\nindex 50b5e9aaa..e8a8f5d73 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\n", "chunk": "@@ -101,7 +125,8 @@ public class AggregationDataStoreTransaction extends DataStoreTransactionImpleme\n     }\n \n     @Override\n-    public void cancel() {\n+    public void cancel(RequestScope scope) {\n+        queryLogger.cancelQuery(scope.getRequestId());\n         queryEngineTransaction.cancel();\n     }\n }\n", "next_change": {"commit": "c82b507d31043f0956023f9b83040b71277df02e", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\nindex e8a8f5d73..204125720 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\n", "chunk": "@@ -129,4 +156,10 @@ public class AggregationDataStoreTransaction implements DataStoreTransaction {\n         queryLogger.cancelQuery(scope.getRequestId());\n         queryEngineTransaction.cancel();\n     }\n+\n+    private <T> void throwReadOnlyException(T entity) {\n+        EntityDictionary dictionary = metaDataStore.getMetadataDictionary();\n+        Type<?> type  = dictionary.getType(entity);\n+        throw new InvalidOperationException(dictionary.getJsonAliasFor(type) + \" is read only.\");\n+    }\n }\n", "next_change": null}]}}]}}]}}]}}, {"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\nindex 50b5e9aaa..ae2e6cdc0 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\n", "chunk": "@@ -99,9 +71,4 @@ public class AggregationDataStoreTransaction extends DataStoreTransactionImpleme\n                 scope.getDictionary());\n         return translator.getQuery();\n     }\n-\n-    @Override\n-    public void cancel() {\n-        queryEngineTransaction.cancel();\n-    }\n }\n", "next_change": {"commit": "9c897058ce0b9656bf2aef2318d0addc474f278a", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\nindex ae2e6cdc0..50b5e9aaa 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\n", "chunk": "@@ -71,4 +99,9 @@ public class AggregationDataStoreTransaction implements DataStoreTransaction {\n                 scope.getDictionary());\n         return translator.getQuery();\n     }\n+\n+    @Override\n+    public void cancel() {\n+        queryEngineTransaction.cancel();\n+    }\n }\n", "next_change": {"commit": "8fece2b8f1b3078ce2598ddb03dca66bb984df46", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\nindex 50b5e9aaa..e8a8f5d73 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\n", "chunk": "@@ -101,7 +125,8 @@ public class AggregationDataStoreTransaction extends DataStoreTransactionImpleme\n     }\n \n     @Override\n-    public void cancel() {\n+    public void cancel(RequestScope scope) {\n+        queryLogger.cancelQuery(scope.getRequestId());\n         queryEngineTransaction.cancel();\n     }\n }\n", "next_change": {"commit": "c82b507d31043f0956023f9b83040b71277df02e", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\nindex e8a8f5d73..204125720 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\n", "chunk": "@@ -129,4 +156,10 @@ public class AggregationDataStoreTransaction implements DataStoreTransaction {\n         queryLogger.cancelQuery(scope.getRequestId());\n         queryEngineTransaction.cancel();\n     }\n+\n+    private <T> void throwReadOnlyException(T entity) {\n+        EntityDictionary dictionary = metaDataStore.getMetadataDictionary();\n+        Type<?> type  = dictionary.getType(entity);\n+        throw new InvalidOperationException(dictionary.getJsonAliasFor(type) + \" is read only.\");\n+    }\n }\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "ff86c56fde9064e1719ea35660fd04c42c949662", "message": "Merge commit", "committedDate": null}, {"oid": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "parent a14ccfbb7b558d27799b4e7b1916850519639708 author Jack (\uc815\ud658) <QubitPi@users.noreply.github.com> 1559678988 -0700 committer Aaron Klish <klish@verizonmedia.com> 1589583449 -0500"}, {"oid": "3f34e76977a5a591eca1f8c00ac986562a38d250", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Introduce QueryResult class for QueryEngine caching (#1333)"}, {"oid": "82df79169b68ec9e51172dda843cbc2b9fea907a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "addTransaction-removeTransaction (#1338)"}, {"oid": "81dde7567aa8a6a00822a9a8f0bf901806a962e8", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add caching support to SQLQueryEngine (#1319)"}, {"oid": "9c897058ce0b9656bf2aef2318d0addc474f278a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "implement cancel function (#1367)"}, {"oid": "9ff0eb6bfa7f8f0135d21cf68cb1e44c5d515d91", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Enable query caching by default (#1378)"}, {"oid": "c823f5a24efd81298d5fdd0ffc1657be7572b2b4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5- Unify request ids (#1423)"}, {"oid": "8fece2b8f1b3078ce2598ddb03dca66bb984df46", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Aggregation DataStore QueryLogger Implementation (#1448)"}, {"oid": "61ac33e39ba94617114273238754be32b006735b", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add SQLDialect implementations and tests. (#1487)"}, {"oid": "7e3bf63665decb792727f030d898e960f681052c", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5: Add HJSON table filter templates (#1528)"}, {"oid": "b8d0918e2f6f438eda12c12e58354a8cad3719dd", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Added item expiration to AggregationDataStore cache (#1564)"}, {"oid": "11e5083ef0755c62f86c287cf73c376d6c8b8c40", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Refactor query plan (#1579)"}, {"oid": "df24aa71c283e12d2489982300580cfa80c9755c", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Migrate metadatacalls to metadata store (#1624)"}, {"oid": "49e61867e840d9818993879436d5db1aad964c9a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Move data store interfaces (#1671)"}, {"oid": "911d29408bdeeb4ff8d78f2beea2417be4e7c673", "committedDate": "2020-12-11 16:20:28 -0600", "message": "cleaned up package hierarchy for elide-core (#1672)"}, {"oid": "704581d353472cb1894546ad685b2e3a48094696", "committedDate": "2020-12-11 16:20:28 -0600", "message": "bypasscache (#1673)"}, {"oid": "6329293ac93ae88628c79f9618b7fce755e470a9", "committedDate": "2021-01-20 13:40:19 -0600", "message": "Updated aggregation store to use new data store transaction interface"}, {"oid": "4c8d6a4f57bc34f08017de12b1276ebe331b9849", "committedDate": "2021-04-01 09:30:15 -0400", "message": "Populate $$user and $$request context (#1975)"}, {"oid": "98f612f023448a93324aaed11e00d6d4fa730c74", "committedDate": "2021-04-08 22:39:32 -0400", "message": "Issue 1929 - Clean up code quality (#1964)"}, {"oid": "89e96b0bb45da69b08e6c8df6d8d7d23090eec37", "committedDate": "2021-04-22 17:56:53 -0400", "message": "Resolution using Table Context (#2004)"}, {"oid": "6143d108eb7b1a2250370409d5362c6722c95b23", "committedDate": "2021-04-26 16:28:58 -0500", "message": "Cleanup (#2026)"}, {"oid": "0a3776bacb5809845d9a04a1263db9760f117b92", "committedDate": "2021-05-13 13:25:15 -0500", "message": "Injection Protection for parameterized metrics/dimensions (#2090)"}, {"oid": "c82b507d31043f0956023f9b83040b71277df02e", "committedDate": "2021-05-14 15:38:30 -0500", "message": "Aggregation Store: Verify write requests are denied (#2096)"}, {"oid": "f0f455bee3d51e2333ad20005068f48ab563a7a9", "committedDate": "2021-08-10 13:05:41 -0500", "message": "Issue2239 (#2245)"}, {"oid": "55e61646f17d5bdb94d4519ab210ac56840778db", "committedDate": "2021-09-08 15:32:28 -0500", "message": "Templated filter table arguments (#2290)"}, {"oid": "cc0dffc51428b5b9ee255896169de91c69af0314", "committedDate": "2021-09-13 14:27:56 -0500", "message": "AggregationStore: Templated filter column arguments (#2297)"}, {"oid": "b88c19ef352c7bff44d4375d4a5f3e6b55054c3e", "committedDate": "2021-10-14 16:42:33 -0500", "message": "Aggregation Store: Make EntityHydrator stream results. (#2333)"}, {"oid": "5064f8a5a351b1f77b8025f68b20efc1b76d101e", "committedDate": "2021-10-19 11:25:38 -0500", "message": "Elide 6 : Refactor DataStoreTransaction Interface. (#2334)"}, {"oid": "f21f35950fe465cfbf135d06cc8ae2321a29513a", "committedDate": "2023-02-04 15:34:06 -0600", "message": "Elide 7.x (#2876)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ5Mjk0NA==", "url": "https://github.com/yahoo/elide/pull/1367#discussion_r439492944", "body": "Don't set null here.", "bodyText": "Don't set null here.", "bodyHTML": "<p dir=\"auto\">Don't set null here.</p>", "author": "aklish", "createdAt": "2020-06-12T15:36:36Z", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java", "diffHunk": "@@ -52,11 +56,21 @@ public void createObject(Object entity, RequestScope scope) {\n     @Override\n     public Iterable<Object> loadObjects(EntityProjection entityProjection, RequestScope scope) {\n         Query query = buildQuery(entityProjection, scope);\n-        QueryResult result = queryEngine.executeQuery(query);\n-        if (entityProjection.getPagination() != null && entityProjection.getPagination().returnPageTotals()) {\n-            entityProjection.getPagination().setPageTotals(result.getPageTotals());\n+        queryResult = queryEngine.executeQuery(query);\n+        queryResult.run();\n+        try {\n+            QueryResult result = queryResult.get();\n+            if (entityProjection.getPagination() != null && entityProjection.getPagination().returnPageTotals()) {\n+                entityProjection.getPagination().setPageTotals(result.getPageTotals());\n+            }\n+            return result.getData();\n+        } catch (TransactionException e) {\n+            throw new TransactionException(null);", "originalCommit": "43ce9e801ed051344593d1af60db17481904b045", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8f1cfb480ee2db34373cee4ca35e5eef6b339a51", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\nindex 979ed0247..a4fe2cefa 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\n", "chunk": "@@ -56,30 +62,35 @@ public class AggregationDataStoreTransaction extends DataStoreTransactionImpleme\n     @Override\n     public Iterable<Object> loadObjects(EntityProjection entityProjection, RequestScope scope) {\n         Query query = buildQuery(entityProjection, scope);\n-        queryResult = queryEngine.executeQuery(query);\n-        queryResult.run();\n-        try {\n-            QueryResult result = queryResult.get();\n-            if (entityProjection.getPagination() != null && entityProjection.getPagination().returnPageTotals()) {\n-                entityProjection.getPagination().setPageTotals(result.getPageTotals());\n+        QueryResult result = null;\n+\n+        String cacheKey = null;\n+        if (cache != null && !query.isBypassingCache()) {\n+            String tableVersion = queryEngine.getTableVersion(query.getTable(), queryEngineTransaction);\n+            if (tableVersion != null) {\n+                cacheKey = tableVersion + ';' + QueryKeyExtractor.extractKey(query);\n+                result = cache.get(cacheKey);\n+            }\n+        }\n+        if (result == null) {\n+            result = queryEngine.executeQuery(query, queryEngineTransaction);\n+            if (cacheKey != null) {\n+                cache.put(cacheKey, result);\n             }\n-            return result.getData();\n-        } catch (TransactionException e) {\n-            throw new TransactionException(null);\n-        } catch (InterruptedException e) {\n-            throw new IllegalStateException(e);\n-        } catch (ExecutionException e) {\n-            throw new IllegalStateException(e);\n         }\n+        if (entityProjection.getPagination() != null && entityProjection.getPagination().returnPageTotals()) {\n+            entityProjection.getPagination().setPageTotals(result.getPageTotals());\n+        }\n+        return result.getData();\n     }\n \n     @Override\n     public void close() throws IOException {\n-\n+        queryEngineTransaction.close();\n     }\n \n     @VisibleForTesting\n-    private Query buildQuery(EntityProjection entityProjection, RequestScope scope) {\n+    Query buildQuery(EntityProjection entityProjection, RequestScope scope) {\n         Table table = queryEngine.getTable(scope.getDictionary().getJsonAliasFor(entityProjection.getType()));\n         EntityProjectionTranslator translator = new EntityProjectionTranslator(\n                 queryEngine,\n", "next_change": null}]}, "revised_code_in_main": {"commit": "ff86c56fde9064e1719ea35660fd04c42c949662", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\nindex 979ed0247..50b5e9aaa 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\n", "chunk": "@@ -56,30 +62,35 @@ public class AggregationDataStoreTransaction extends DataStoreTransactionImpleme\n     @Override\n     public Iterable<Object> loadObjects(EntityProjection entityProjection, RequestScope scope) {\n         Query query = buildQuery(entityProjection, scope);\n-        queryResult = queryEngine.executeQuery(query);\n-        queryResult.run();\n-        try {\n-            QueryResult result = queryResult.get();\n-            if (entityProjection.getPagination() != null && entityProjection.getPagination().returnPageTotals()) {\n-                entityProjection.getPagination().setPageTotals(result.getPageTotals());\n+        QueryResult result = null;\n+\n+        String cacheKey = null;\n+        if (cache != null && !query.isBypassingCache()) {\n+            String tableVersion = queryEngine.getTableVersion(query.getTable(), queryEngineTransaction);\n+            if (tableVersion != null) {\n+                cacheKey = tableVersion + ';' + QueryKeyExtractor.extractKey(query);\n+                result = cache.get(cacheKey);\n             }\n-            return result.getData();\n-        } catch (TransactionException e) {\n-            throw new TransactionException(null);\n-        } catch (InterruptedException e) {\n-            throw new IllegalStateException(e);\n-        } catch (ExecutionException e) {\n-            throw new IllegalStateException(e);\n         }\n+        if (result == null) {\n+            result = queryEngine.executeQuery(query, queryEngineTransaction);\n+            if (cacheKey != null) {\n+                cache.put(cacheKey, result);\n+            }\n+        }\n+        if (entityProjection.getPagination() != null && entityProjection.getPagination().returnPageTotals()) {\n+            entityProjection.getPagination().setPageTotals(result.getPageTotals());\n+        }\n+        return result.getData();\n     }\n \n     @Override\n     public void close() throws IOException {\n-\n+        queryEngineTransaction.close();\n     }\n \n     @VisibleForTesting\n-    private Query buildQuery(EntityProjection entityProjection, RequestScope scope) {\n+    Query buildQuery(EntityProjection entityProjection, RequestScope scope) {\n         Table table = queryEngine.getTable(scope.getDictionary().getJsonAliasFor(entityProjection.getType()));\n         EntityProjectionTranslator translator = new EntityProjectionTranslator(\n                 queryEngine,\n", "next_change": {"commit": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\nindex 50b5e9aaa..ae2e6cdc0 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\n", "chunk": "@@ -62,35 +53,16 @@ public class AggregationDataStoreTransaction extends DataStoreTransactionImpleme\n     @Override\n     public Iterable<Object> loadObjects(EntityProjection entityProjection, RequestScope scope) {\n         Query query = buildQuery(entityProjection, scope);\n-        QueryResult result = null;\n-\n-        String cacheKey = null;\n-        if (cache != null && !query.isBypassingCache()) {\n-            String tableVersion = queryEngine.getTableVersion(query.getTable(), queryEngineTransaction);\n-            if (tableVersion != null) {\n-                cacheKey = tableVersion + ';' + QueryKeyExtractor.extractKey(query);\n-                result = cache.get(cacheKey);\n-            }\n-        }\n-        if (result == null) {\n-            result = queryEngine.executeQuery(query, queryEngineTransaction);\n-            if (cacheKey != null) {\n-                cache.put(cacheKey, result);\n-            }\n-        }\n-        if (entityProjection.getPagination() != null && entityProjection.getPagination().returnPageTotals()) {\n-            entityProjection.getPagination().setPageTotals(result.getPageTotals());\n-        }\n-        return result.getData();\n+        return queryEngine.executeQuery(query, true);\n     }\n \n     @Override\n     public void close() throws IOException {\n-        queryEngineTransaction.close();\n+\n     }\n \n     @VisibleForTesting\n-    Query buildQuery(EntityProjection entityProjection, RequestScope scope) {\n+    private Query buildQuery(EntityProjection entityProjection, RequestScope scope) {\n         Table table = queryEngine.getTable(scope.getDictionary().getJsonAliasFor(entityProjection.getType()));\n         EntityProjectionTranslator translator = new EntityProjectionTranslator(\n                 queryEngine,\n", "next_change": {"commit": "81dde7567aa8a6a00822a9a8f0bf901806a962e8", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\nindex ae2e6cdc0..494daa6ef 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\n", "chunk": "@@ -53,16 +62,35 @@ public class AggregationDataStoreTransaction implements DataStoreTransaction {\n     @Override\n     public Iterable<Object> loadObjects(EntityProjection entityProjection, RequestScope scope) {\n         Query query = buildQuery(entityProjection, scope);\n-        return queryEngine.executeQuery(query, true);\n+        QueryResult result = null;\n+\n+        String cacheKey = null;\n+        if (cache != null && !query.isBypassingCache()) {\n+            String tableVersion = queryEngine.getTableVersion(query.getTable(), queryEngineTransaction);\n+            if (tableVersion != null) {\n+                cacheKey = tableVersion + ';' + QueryKeyExtractor.extractKey(query);\n+                result = cache.get(cacheKey);\n+            }\n+        }\n+        if (result == null) {\n+            result = queryEngine.executeQuery(query, queryEngineTransaction);\n+            if (cacheKey != null) {\n+                cache.put(cacheKey, result);\n+            }\n+        }\n+        if (entityProjection.getPagination() != null && entityProjection.getPagination().returnPageTotals()) {\n+            entityProjection.getPagination().setPageTotals(result.getPageTotals());\n+        }\n+        return result.getData();\n     }\n \n     @Override\n     public void close() throws IOException {\n-\n+        queryEngineTransaction.close();\n     }\n \n     @VisibleForTesting\n-    private Query buildQuery(EntityProjection entityProjection, RequestScope scope) {\n+    Query buildQuery(EntityProjection entityProjection, RequestScope scope) {\n         Table table = queryEngine.getTable(scope.getDictionary().getJsonAliasFor(entityProjection.getType()));\n         EntityProjectionTranslator translator = new EntityProjectionTranslator(\n                 queryEngine,\n", "next_change": {"commit": "9c897058ce0b9656bf2aef2318d0addc474f278a", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\nindex 494daa6ef..50b5e9aaa 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\n", "chunk": "@@ -99,4 +99,9 @@ public class AggregationDataStoreTransaction extends DataStoreTransactionImpleme\n                 scope.getDictionary());\n         return translator.getQuery();\n     }\n+\n+    @Override\n+    public void cancel() {\n+        queryEngineTransaction.cancel();\n+    }\n }\n", "next_change": {"commit": "8fece2b8f1b3078ce2598ddb03dca66bb984df46", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\nindex 50b5e9aaa..e8a8f5d73 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\n", "chunk": "@@ -101,7 +125,8 @@ public class AggregationDataStoreTransaction extends DataStoreTransactionImpleme\n     }\n \n     @Override\n-    public void cancel() {\n+    public void cancel(RequestScope scope) {\n+        queryLogger.cancelQuery(scope.getRequestId());\n         queryEngineTransaction.cancel();\n     }\n }\n", "next_change": {"commit": "c82b507d31043f0956023f9b83040b71277df02e", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\nindex e8a8f5d73..204125720 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\n", "chunk": "@@ -129,4 +156,10 @@ public class AggregationDataStoreTransaction implements DataStoreTransaction {\n         queryLogger.cancelQuery(scope.getRequestId());\n         queryEngineTransaction.cancel();\n     }\n+\n+    private <T> void throwReadOnlyException(T entity) {\n+        EntityDictionary dictionary = metaDataStore.getMetadataDictionary();\n+        Type<?> type  = dictionary.getType(entity);\n+        throw new InvalidOperationException(dictionary.getJsonAliasFor(type) + \" is read only.\");\n+    }\n }\n", "next_change": null}]}}]}}]}}]}}, {"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\nindex 50b5e9aaa..ae2e6cdc0 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\n", "chunk": "@@ -99,9 +71,4 @@ public class AggregationDataStoreTransaction extends DataStoreTransactionImpleme\n                 scope.getDictionary());\n         return translator.getQuery();\n     }\n-\n-    @Override\n-    public void cancel() {\n-        queryEngineTransaction.cancel();\n-    }\n }\n", "next_change": {"commit": "9c897058ce0b9656bf2aef2318d0addc474f278a", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\nindex ae2e6cdc0..50b5e9aaa 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\n", "chunk": "@@ -71,4 +99,9 @@ public class AggregationDataStoreTransaction implements DataStoreTransaction {\n                 scope.getDictionary());\n         return translator.getQuery();\n     }\n+\n+    @Override\n+    public void cancel() {\n+        queryEngineTransaction.cancel();\n+    }\n }\n", "next_change": {"commit": "8fece2b8f1b3078ce2598ddb03dca66bb984df46", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\nindex 50b5e9aaa..e8a8f5d73 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\n", "chunk": "@@ -101,7 +125,8 @@ public class AggregationDataStoreTransaction extends DataStoreTransactionImpleme\n     }\n \n     @Override\n-    public void cancel() {\n+    public void cancel(RequestScope scope) {\n+        queryLogger.cancelQuery(scope.getRequestId());\n         queryEngineTransaction.cancel();\n     }\n }\n", "next_change": {"commit": "c82b507d31043f0956023f9b83040b71277df02e", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\nindex e8a8f5d73..204125720 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/AggregationDataStoreTransaction.java\n", "chunk": "@@ -129,4 +156,10 @@ public class AggregationDataStoreTransaction implements DataStoreTransaction {\n         queryLogger.cancelQuery(scope.getRequestId());\n         queryEngineTransaction.cancel();\n     }\n+\n+    private <T> void throwReadOnlyException(T entity) {\n+        EntityDictionary dictionary = metaDataStore.getMetadataDictionary();\n+        Type<?> type  = dictionary.getType(entity);\n+        throw new InvalidOperationException(dictionary.getJsonAliasFor(type) + \" is read only.\");\n+    }\n }\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "ff86c56fde9064e1719ea35660fd04c42c949662", "message": "Merge commit", "committedDate": null}, {"oid": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "parent a14ccfbb7b558d27799b4e7b1916850519639708 author Jack (\uc815\ud658) <QubitPi@users.noreply.github.com> 1559678988 -0700 committer Aaron Klish <klish@verizonmedia.com> 1589583449 -0500"}, {"oid": "3f34e76977a5a591eca1f8c00ac986562a38d250", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Introduce QueryResult class for QueryEngine caching (#1333)"}, {"oid": "82df79169b68ec9e51172dda843cbc2b9fea907a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "addTransaction-removeTransaction (#1338)"}, {"oid": "81dde7567aa8a6a00822a9a8f0bf901806a962e8", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add caching support to SQLQueryEngine (#1319)"}, {"oid": "9c897058ce0b9656bf2aef2318d0addc474f278a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "implement cancel function (#1367)"}, {"oid": "9ff0eb6bfa7f8f0135d21cf68cb1e44c5d515d91", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Enable query caching by default (#1378)"}, {"oid": "c823f5a24efd81298d5fdd0ffc1657be7572b2b4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5- Unify request ids (#1423)"}, {"oid": "8fece2b8f1b3078ce2598ddb03dca66bb984df46", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Aggregation DataStore QueryLogger Implementation (#1448)"}, {"oid": "61ac33e39ba94617114273238754be32b006735b", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add SQLDialect implementations and tests. (#1487)"}, {"oid": "7e3bf63665decb792727f030d898e960f681052c", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5: Add HJSON table filter templates (#1528)"}, {"oid": "b8d0918e2f6f438eda12c12e58354a8cad3719dd", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Added item expiration to AggregationDataStore cache (#1564)"}, {"oid": "11e5083ef0755c62f86c287cf73c376d6c8b8c40", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Refactor query plan (#1579)"}, {"oid": "df24aa71c283e12d2489982300580cfa80c9755c", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Migrate metadatacalls to metadata store (#1624)"}, {"oid": "49e61867e840d9818993879436d5db1aad964c9a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Move data store interfaces (#1671)"}, {"oid": "911d29408bdeeb4ff8d78f2beea2417be4e7c673", "committedDate": "2020-12-11 16:20:28 -0600", "message": "cleaned up package hierarchy for elide-core (#1672)"}, {"oid": "704581d353472cb1894546ad685b2e3a48094696", "committedDate": "2020-12-11 16:20:28 -0600", "message": "bypasscache (#1673)"}, {"oid": "6329293ac93ae88628c79f9618b7fce755e470a9", "committedDate": "2021-01-20 13:40:19 -0600", "message": "Updated aggregation store to use new data store transaction interface"}, {"oid": "4c8d6a4f57bc34f08017de12b1276ebe331b9849", "committedDate": "2021-04-01 09:30:15 -0400", "message": "Populate $$user and $$request context (#1975)"}, {"oid": "98f612f023448a93324aaed11e00d6d4fa730c74", "committedDate": "2021-04-08 22:39:32 -0400", "message": "Issue 1929 - Clean up code quality (#1964)"}, {"oid": "89e96b0bb45da69b08e6c8df6d8d7d23090eec37", "committedDate": "2021-04-22 17:56:53 -0400", "message": "Resolution using Table Context (#2004)"}, {"oid": "6143d108eb7b1a2250370409d5362c6722c95b23", "committedDate": "2021-04-26 16:28:58 -0500", "message": "Cleanup (#2026)"}, {"oid": "0a3776bacb5809845d9a04a1263db9760f117b92", "committedDate": "2021-05-13 13:25:15 -0500", "message": "Injection Protection for parameterized metrics/dimensions (#2090)"}, {"oid": "c82b507d31043f0956023f9b83040b71277df02e", "committedDate": "2021-05-14 15:38:30 -0500", "message": "Aggregation Store: Verify write requests are denied (#2096)"}, {"oid": "f0f455bee3d51e2333ad20005068f48ab563a7a9", "committedDate": "2021-08-10 13:05:41 -0500", "message": "Issue2239 (#2245)"}, {"oid": "55e61646f17d5bdb94d4519ab210ac56840778db", "committedDate": "2021-09-08 15:32:28 -0500", "message": "Templated filter table arguments (#2290)"}, {"oid": "cc0dffc51428b5b9ee255896169de91c69af0314", "committedDate": "2021-09-13 14:27:56 -0500", "message": "AggregationStore: Templated filter column arguments (#2297)"}, {"oid": "b88c19ef352c7bff44d4375d4a5f3e6b55054c3e", "committedDate": "2021-10-14 16:42:33 -0500", "message": "Aggregation Store: Make EntityHydrator stream results. (#2333)"}, {"oid": "5064f8a5a351b1f77b8025f68b20efc1b76d101e", "committedDate": "2021-10-19 11:25:38 -0500", "message": "Elide 6 : Refactor DataStoreTransaction Interface. (#2334)"}, {"oid": "f21f35950fe465cfbf135d06cc8ae2321a29513a", "committedDate": "2023-02-04 15:34:06 -0600", "message": "Elide 7.x (#2876)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ5Mzk1NQ==", "url": "https://github.com/yahoo/elide/pull/1367#discussion_r439493955", "body": "cache is much more readable than cx.  Can you revert back to the more readable variable names?", "bodyText": "cache is much more readable than cx.  Can you revert back to the more readable variable names?", "bodyHTML": "<p dir=\"auto\">cache is much more readable than cx.  Can you revert back to the more readable variable names?</p>", "author": "aklish", "createdAt": "2020-06-12T15:38:23Z", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java", "diffHunk": "@@ -60,13 +62,15 @@\n @Slf4j\n public class SQLQueryEngine extends QueryEngine {\n     private final EntityManagerFactory entityManagerFactory;\n-\n+    private final TransactionCancel transactionCancel;\n     private final SQLReferenceTable referenceTable;\n+    private EntityManager entityManager;\n \n-    public SQLQueryEngine(MetaDataStore metaDataStore, EntityManagerFactory entityManagerFactory, Cache cache) {\n-        super(metaDataStore, cache);\n-        this.entityManagerFactory = entityManagerFactory;\n-        this.referenceTable = new SQLReferenceTable(metaDataStore);\n+    public SQLQueryEngine(MetaDataStore mDStore, EntityManagerFactory emFactory, Cache cx, TransactionCancel txCancel) {", "originalCommit": "43ce9e801ed051344593d1af60db17481904b045", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ5NDEwNA==", "url": "https://github.com/yahoo/elide/pull/1367#discussion_r439494104", "bodyText": "Same for mDStore, qEngine, emFactory, etc.", "author": "aklish", "createdAt": "2020-06-12T15:38:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ5Mzk1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "8f1cfb480ee2db34373cee4ca35e5eef6b339a51", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex d61cdea2c..b63187a63 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -64,13 +62,12 @@ public class SQLQueryEngine extends QueryEngine {\n     private final EntityManagerFactory entityManagerFactory;\n     private final TransactionCancel transactionCancel;\n     private final SQLReferenceTable referenceTable;\n-    private EntityManager entityManager;\n \n-    public SQLQueryEngine(MetaDataStore mDStore, EntityManagerFactory emFactory, Cache cx, TransactionCancel txCancel) {\n-        super(mDStore, cx);\n-        this.entityManagerFactory = emFactory;\n-        this.referenceTable = new SQLReferenceTable(mDStore);\n-        this.transactionCancel = txCancel;\n+    public SQLQueryEngine(MetaDataStore metaDataStore, EntityManagerFactory entityManagerFactory, TransactionCancel txCancel) {\n+        super(metaDataStore);\n+        this.entityManagerFactory = entityManagerFactory;\n+        this.referenceTable = new SQLReferenceTable(metaDataStore);\n+\tthis.transactionCancel = txCancel;\n     }\n \n     @Override\n", "next_change": {"commit": "5094ce020f2de18f1a34294178dd857eba7af5c4", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex b63187a63..5958134d7 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -67,7 +67,7 @@ public class SQLQueryEngine extends QueryEngine {\n         super(metaDataStore);\n         this.entityManagerFactory = entityManagerFactory;\n         this.referenceTable = new SQLReferenceTable(metaDataStore);\n-\tthis.transactionCancel = txCancel;\n+\t      this.transactionCancel = txCancel;\n     }\n \n     @Override\n", "next_change": {"commit": "d7556cb189b6e83070942c10bdaf33054ecc0f71", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 5958134d7..869de2d9c 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -60,14 +61,14 @@ import javax.persistence.EntityTransaction;\n @Slf4j\n public class SQLQueryEngine extends QueryEngine {\n     private final EntityManagerFactory entityManagerFactory;\n-    private final TransactionCancel transactionCancel;\n+    private final Consumer<EntityManager> transactionCancel;\n     private final SQLReferenceTable referenceTable;\n \n-    public SQLQueryEngine(MetaDataStore metaDataStore, EntityManagerFactory entityManagerFactory, TransactionCancel txCancel) {\n+    public SQLQueryEngine(MetaDataStore metaDataStore, EntityManagerFactory eMFactory, Consumer<EntityManager> txC) {\n         super(metaDataStore);\n-        this.entityManagerFactory = entityManagerFactory;\n+        this.entityManagerFactory = eMFactory;\n         this.referenceTable = new SQLReferenceTable(metaDataStore);\n-\t      this.transactionCancel = txCancel;\n+        this.transactionCancel = txC;\n     }\n \n     @Override\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "ff86c56fde9064e1719ea35660fd04c42c949662", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex d61cdea2c..869de2d9c 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -62,15 +61,14 @@ import javax.persistence.EntityTransaction;\n @Slf4j\n public class SQLQueryEngine extends QueryEngine {\n     private final EntityManagerFactory entityManagerFactory;\n-    private final TransactionCancel transactionCancel;\n+    private final Consumer<EntityManager> transactionCancel;\n     private final SQLReferenceTable referenceTable;\n-    private EntityManager entityManager;\n \n-    public SQLQueryEngine(MetaDataStore mDStore, EntityManagerFactory emFactory, Cache cx, TransactionCancel txCancel) {\n-        super(mDStore, cx);\n-        this.entityManagerFactory = emFactory;\n-        this.referenceTable = new SQLReferenceTable(mDStore);\n-        this.transactionCancel = txCancel;\n+    public SQLQueryEngine(MetaDataStore metaDataStore, EntityManagerFactory eMFactory, Consumer<EntityManager> txC) {\n+        super(metaDataStore);\n+        this.entityManagerFactory = eMFactory;\n+        this.referenceTable = new SQLReferenceTable(metaDataStore);\n+        this.transactionCancel = txC;\n     }\n \n     @Override\n", "next_change": {"commit": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 869de2d9c..86c37d5e3 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -61,14 +59,13 @@ import javax.persistence.EntityTransaction;\n @Slf4j\n public class SQLQueryEngine extends QueryEngine {\n     private final EntityManagerFactory entityManagerFactory;\n-    private final Consumer<EntityManager> transactionCancel;\n+\n     private final SQLReferenceTable referenceTable;\n \n-    public SQLQueryEngine(MetaDataStore metaDataStore, EntityManagerFactory eMFactory, Consumer<EntityManager> txC) {\n-        super(metaDataStore);\n-        this.entityManagerFactory = eMFactory;\n+    public SQLQueryEngine(MetaDataStore metaDataStore, EntityManagerFactory entityManagerFactory, Cache cache) {\n+        super(metaDataStore, cache);\n+        this.entityManagerFactory = entityManagerFactory;\n         this.referenceTable = new SQLReferenceTable(metaDataStore);\n-        this.transactionCancel = txC;\n     }\n \n     @Override\n", "next_change": {"commit": "81dde7567aa8a6a00822a9a8f0bf901806a962e8", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 86c37d5e3..7c335531d 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -62,8 +63,8 @@ public class SQLQueryEngine extends QueryEngine {\n \n     private final SQLReferenceTable referenceTable;\n \n-    public SQLQueryEngine(MetaDataStore metaDataStore, EntityManagerFactory entityManagerFactory, Cache cache) {\n-        super(metaDataStore, cache);\n+    public SQLQueryEngine(MetaDataStore metaDataStore, EntityManagerFactory entityManagerFactory) {\n+        super(metaDataStore);\n         this.entityManagerFactory = entityManagerFactory;\n         this.referenceTable = new SQLReferenceTable(metaDataStore);\n     }\n", "next_change": {"commit": "9c897058ce0b9656bf2aef2318d0addc474f278a", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 7c335531d..869de2d9c 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -60,13 +61,14 @@ import javax.persistence.EntityTransaction;\n @Slf4j\n public class SQLQueryEngine extends QueryEngine {\n     private final EntityManagerFactory entityManagerFactory;\n-\n+    private final Consumer<EntityManager> transactionCancel;\n     private final SQLReferenceTable referenceTable;\n \n-    public SQLQueryEngine(MetaDataStore metaDataStore, EntityManagerFactory entityManagerFactory) {\n+    public SQLQueryEngine(MetaDataStore metaDataStore, EntityManagerFactory eMFactory, Consumer<EntityManager> txC) {\n         super(metaDataStore);\n-        this.entityManagerFactory = entityManagerFactory;\n+        this.entityManagerFactory = eMFactory;\n         this.referenceTable = new SQLReferenceTable(metaDataStore);\n+        this.transactionCancel = txC;\n     }\n \n     @Override\n", "next_change": {"commit": "61ac33e39ba94617114273238754be32b006735b", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 869de2d9c..79fcc1878 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -63,12 +65,19 @@ public class SQLQueryEngine extends QueryEngine {\n     private final EntityManagerFactory entityManagerFactory;\n     private final Consumer<EntityManager> transactionCancel;\n     private final SQLReferenceTable referenceTable;\n+    private final SQLDialect dialect;\n \n     public SQLQueryEngine(MetaDataStore metaDataStore, EntityManagerFactory eMFactory, Consumer<EntityManager> txC) {\n+        this(metaDataStore, eMFactory, txC, SQLDialectFactory.getDefaultDialect());\n+    }\n+\n+    public SQLQueryEngine(MetaDataStore metaDataStore, EntityManagerFactory eMFactory, Consumer<EntityManager> txC,\n+                          SQLDialect sqlDialect) {\n         super(metaDataStore);\n         this.entityManagerFactory = eMFactory;\n         this.referenceTable = new SQLReferenceTable(metaDataStore);\n         this.transactionCancel = txC;\n+        this.dialect = sqlDialect;\n     }\n \n     @Override\n", "next_change": {"commit": "ca35ad817f2fde68b2f9c39d0d4d9c9d44ebffd5", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 79fcc1878..9c79e5997 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -41,45 +42,69 @@ import com.yahoo.elide.request.Argument;\n import com.yahoo.elide.request.Pagination;\n import com.yahoo.elide.utils.coerce.CoerceUtil;\n \n-import org.hibernate.jpa.QueryHints;\n-\n import lombok.extern.slf4j.Slf4j;\n \n+import java.sql.Connection;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n import java.util.ArrayList;\n import java.util.Collection;\n-import java.util.LinkedHashSet;\n+import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n-import java.util.Set;\n-import java.util.function.Consumer;\n+import java.util.Optional;\n+import java.util.function.Function;\n import java.util.stream.Collectors;\n-import javax.persistence.EntityManager;\n-import javax.persistence.EntityManagerFactory;\n-import javax.persistence.EntityTransaction;\n+import javax.sql.DataSource;\n \n /**\n  * QueryEngine for SQL backed stores.\n  */\n @Slf4j\n public class SQLQueryEngine extends QueryEngine {\n-    private final EntityManagerFactory entityManagerFactory;\n-    private final Consumer<EntityManager> transactionCancel;\n     private final SQLReferenceTable referenceTable;\n-    private final SQLDialect dialect;\n-\n-    public SQLQueryEngine(MetaDataStore metaDataStore, EntityManagerFactory eMFactory, Consumer<EntityManager> txC) {\n-        this(metaDataStore, eMFactory, txC, SQLDialectFactory.getDefaultDialect());\n-    }\n+    private final ConnectionDetails defaultConnectionDetails;\n+    private final Map<String, ConnectionDetails> connectionDetailsMap = new HashMap<>();\n \n-    public SQLQueryEngine(MetaDataStore metaDataStore, EntityManagerFactory eMFactory, Consumer<EntityManager> txC,\n-                          SQLDialect sqlDialect) {\n+    public SQLQueryEngine(MetaDataStore metaDataStore,\n+                    com.yahoo.elide.contrib.dynamicconfighelpers.compile.ConnectionDetails defaultConnectionDetails) {\n         super(metaDataStore);\n-        this.entityManagerFactory = eMFactory;\n         this.referenceTable = new SQLReferenceTable(metaDataStore);\n-        this.transactionCancel = txC;\n-        this.dialect = sqlDialect;\n+        this.defaultConnectionDetails = new ConnectionDetails(defaultConnectionDetails.getDataSource(),\n+                        SQLDialectFactory.getDialect(defaultConnectionDetails.getDialect()));\n+    }\n+\n+    /**\n+     * Constructor.\n+     * @param metaDataStore : MetaDataStore.\n+     * @param defaultConnectionDetails : default DataSource Object and SQLDialect Object.\n+     * @param detailsMap : Connection Name to DataSource Object and SQL Dialect Object mapping.\n+     */\n+    public SQLQueryEngine(MetaDataStore metaDataStore,\n+                    com.yahoo.elide.contrib.dynamicconfighelpers.compile.ConnectionDetails defaultConnectionDetails,\n+                    Map<String, com.yahoo.elide.contrib.dynamicconfighelpers.compile.ConnectionDetails> detailsMap) {\n+        this(metaDataStore, defaultConnectionDetails);\n+        detailsMap.forEach((name, details) -> {\n+            this.connectionDetailsMap.put(name, new ConnectionDetails(details.getDataSource(),\n+                            SQLDialectFactory.getDialect(details.getDialect())));\n+        });\n     }\n \n+    private static final Function<ResultSet, Object> SINGLE_RESULT_MAPPER = new Function<ResultSet, Object>() {\n+        @Override\n+        public Object apply(ResultSet rs) {\n+            try {\n+                if (rs.next()) {\n+                    return rs.getObject(1);\n+                } else {\n+                    return null;\n+                }\n+            } catch (SQLException e) {\n+                throw new IllegalStateException(e);\n+            }\n+        }\n+    };\n+\n     @Override\n     protected Table constructTable(Class<?> entityClass, EntityDictionary metaDataDictionary) {\n         return new SQLTable(entityClass, metaDataDictionary);\n", "next_change": {"commit": "df3ea922a7550ec35585ce289e1d74101c4f28e4", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 9c79e5997..ca3f47ca5 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -107,34 +103,14 @@ public class SQLQueryEngine extends QueryEngine {\n \n     @Override\n     protected Table constructTable(Class<?> entityClass, EntityDictionary metaDataDictionary) {\n-        return new SQLTable(entityClass, metaDataDictionary);\n+        return new SQLTable(entityClass, metaDataDictionary, this);\n     }\n \n     @Override\n     public ColumnProjection constructDimensionProjection(Dimension dimension,\n                                                          String alias,\n                                                          Map<String, Argument> arguments) {\n-        return new SQLColumnProjection() {\n-            @Override\n-            public SQLReferenceTable getReferenceTable() {\n-                return referenceTable;\n-            }\n-\n-            @Override\n-            public Column getColumn() {\n-                return dimension;\n-            }\n-\n-            @Override\n-            public String getAlias() {\n-                return alias;\n-            }\n-\n-            @Override\n-            public Map<String, Argument> getArguments() {\n-                return arguments;\n-            }\n-        };\n+        return new SQLDimensionProjection(dimension, alias, arguments, referenceTable);\n     }\n \n     @Override\n", "next_change": {"commit": "dc254e6a99100c21abd94eac3f0252bb9c5029df", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex ca3f47ca5..f2433475a 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -103,28 +104,28 @@ public class SQLQueryEngine extends QueryEngine {\n \n     @Override\n     protected Table constructTable(Class<?> entityClass, EntityDictionary metaDataDictionary) {\n-        return new SQLTable(entityClass, metaDataDictionary, this);\n+        return new SQLTable(entityClass, metaDataDictionary);\n     }\n \n     @Override\n     public ColumnProjection constructDimensionProjection(Dimension dimension,\n                                                          String alias,\n                                                          Map<String, Argument> arguments) {\n-        return new SQLDimensionProjection(dimension, alias, arguments, referenceTable);\n+        return new SQLDimensionProjection(dimension, alias, arguments);\n     }\n \n     @Override\n     public TimeDimensionProjection constructTimeDimensionProjection(TimeDimension dimension,\n                                                                     String alias,\n                                                                     Map<String, Argument> arguments) {\n-        return new SQLTimeDimensionProjection(dimension, dimension.getTimezone(), referenceTable, alias, arguments);\n+        return new SQLTimeDimensionProjection(dimension, dimension.getTimezone(), alias, arguments);\n     }\n \n     @Override\n     public MetricProjection constructMetricProjection(Metric metric,\n                                                       String alias,\n                                                       Map<String, Argument> arguments) {\n-        return new SQLMetricProjection(metric, referenceTable, alias, arguments);\n+        return new SQLMetricProjection(metric, alias, arguments);\n     }\n \n     /**\n", "next_change": {"commit": "7a0b59711bb5e269afbc6b15426a8aff94a5e447", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex f2433475a..3296af5f8 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -61,71 +72,90 @@ public class SQLQueryEngine extends QueryEngine {\n     @Getter\n     private final SQLReferenceTable referenceTable;\n     private final ConnectionDetails defaultConnectionDetails;\n-    private final Map<String, ConnectionDetails> connectionDetailsMap = new HashMap<>();\n-\n-    public SQLQueryEngine(MetaDataStore metaDataStore,\n-                    com.yahoo.elide.contrib.dynamicconfighelpers.compile.ConnectionDetails defaultConnectionDetails) {\n-        super(metaDataStore);\n-        referenceTable = new SQLReferenceTable(metaDataStore);\n-        this.defaultConnectionDetails = new ConnectionDetails(defaultConnectionDetails.getDataSource(),\n-                        SQLDialectFactory.getDialect(defaultConnectionDetails.getDialect()));\n+    private final Map<String, ConnectionDetails> connectionDetailsMap;\n+    private final Set<Optimizer> optimizers;\n+\n+    public SQLQueryEngine(MetaDataStore metaDataStore, ConnectionDetails defaultConnectionDetails) {\n+        this(metaDataStore, defaultConnectionDetails, Collections.emptyMap(),\n+                new HashSet<>());\n     }\n \n     /**\n      * Constructor.\n      * @param metaDataStore : MetaDataStore.\n      * @param defaultConnectionDetails : default DataSource Object and SQLDialect Object.\n-     * @param detailsMap : Connection Name to DataSource Object and SQL Dialect Object mapping.\n+     * @param connectionDetailsMap : Connection Name to DataSource Object and SQL Dialect Object mapping.\n      */\n-    public SQLQueryEngine(MetaDataStore metaDataStore,\n-                    com.yahoo.elide.contrib.dynamicconfighelpers.compile.ConnectionDetails defaultConnectionDetails,\n-                    Map<String, com.yahoo.elide.contrib.dynamicconfighelpers.compile.ConnectionDetails> detailsMap) {\n-        this(metaDataStore, defaultConnectionDetails);\n-        detailsMap.forEach((name, details) -> {\n-            this.connectionDetailsMap.put(name, new ConnectionDetails(details.getDataSource(),\n-                            SQLDialectFactory.getDialect(details.getDialect())));\n-        });\n+    public SQLQueryEngine(MetaDataStore metaDataStore, ConnectionDetails defaultConnectionDetails,\n+                    Map<String, ConnectionDetails> connectionDetailsMap, Set<Optimizer> optimizers) {\n+\n+        Preconditions.checkNotNull(defaultConnectionDetails);\n+        Preconditions.checkNotNull(connectionDetailsMap);\n+\n+        this.defaultConnectionDetails = defaultConnectionDetails;\n+        this.connectionDetailsMap = connectionDetailsMap;\n+        this.metaDataStore = metaDataStore;\n+        this.metadataDictionary = metaDataStore.getMetadataDictionary();\n+        populateMetaData(metaDataStore);\n+        this.referenceTable = new SQLReferenceTable(metaDataStore);\n+        this.optimizers = optimizers;\n     }\n \n-    private static final Function<ResultSet, Object> SINGLE_RESULT_MAPPER = new Function<ResultSet, Object>() {\n-        @Override\n-        public Object apply(ResultSet rs) {\n-            try {\n-                if (rs.next()) {\n-                    return rs.getObject(1);\n-                } else {\n-                    return null;\n-                }\n-            } catch (SQLException e) {\n-                throw new IllegalStateException(e);\n+    private static final Function<ResultSet, Object> SINGLE_RESULT_MAPPER = rs -> {\n+        try {\n+            if (rs.next()) {\n+                return rs.getObject(1);\n             }\n+            return null;\n+        } catch (SQLException e) {\n+            throw new IllegalStateException(e);\n         }\n     };\n \n     @Override\n-    protected Table constructTable(Class<?> entityClass, EntityDictionary metaDataDictionary) {\n-        return new SQLTable(entityClass, metaDataDictionary);\n+    protected Table constructTable(Type<?> entityClass, EntityDictionary metaDataDictionary) {\n+\n+        String dbConnectionName = null;\n+        Annotation annotation = EntityDictionary.getFirstAnnotation(entityClass,\n+                        Arrays.asList(FromTable.class, FromSubquery.class));\n+        if (annotation instanceof FromTable) {\n+            dbConnectionName = ((FromTable) annotation).dbConnectionName();\n+        } else if (annotation instanceof FromSubquery) {\n+            dbConnectionName = ((FromSubquery) annotation).dbConnectionName();\n+        }\n+\n+        ConnectionDetails connectionDetails;\n+        if (StringUtils.isBlank(dbConnectionName)) {\n+            connectionDetails = defaultConnectionDetails;\n+        } else {\n+            connectionDetails = Optional.ofNullable(connectionDetailsMap.get(dbConnectionName))\n+                            .orElseThrow(() -> new IllegalStateException(\"ConnectionDetails undefined for model: \"\n+                                            + metaDataDictionary.getJsonAliasFor(entityClass)));\n+        }\n+\n+        return new SQLTable(entityClass, metaDataDictionary, connectionDetails);\n     }\n \n     @Override\n     public ColumnProjection constructDimensionProjection(Dimension dimension,\n                                                          String alias,\n                                                          Map<String, Argument> arguments) {\n-        return new SQLDimensionProjection(dimension, alias, arguments);\n+        return new SQLDimensionProjection(dimension, alias, arguments, true);\n     }\n \n     @Override\n     public TimeDimensionProjection constructTimeDimensionProjection(TimeDimension dimension,\n                                                                     String alias,\n                                                                     Map<String, Argument> arguments) {\n-        return new SQLTimeDimensionProjection(dimension, dimension.getTimezone(), alias, arguments);\n+        return new SQLTimeDimensionProjection(dimension, dimension.getTimezone(), alias, arguments, true);\n     }\n \n     @Override\n     public MetricProjection constructMetricProjection(Metric metric,\n                                                       String alias,\n                                                       Map<String, Argument> arguments) {\n-        return new SQLMetricProjection(metric, alias, arguments);\n+\n+        return metric.getMetricProjectionMaker().make(metric, alias, arguments);\n     }\n \n     /**\n", "next_change": {"commit": "32856f2244a3334028099eeb7ecd13b69fa41016", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 3296af5f8..54caaa4ef 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -154,7 +171,6 @@ public class SQLQueryEngine extends QueryEngine {\n     public MetricProjection constructMetricProjection(Metric metric,\n                                                       String alias,\n                                                       Map<String, Argument> arguments) {\n-\n         return metric.getMetricProjectionMaker().make(metric, alias, arguments);\n     }\n \n", "next_change": {"commit": "e1c93d9f34829c4ee142a4919b5fde26502eaa11", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 54caaa4ef..fcf751616 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -174,6 +178,24 @@ public class SQLQueryEngine extends QueryEngine {\n         return metric.getMetricProjectionMaker().make(metric, alias, arguments);\n     }\n \n+    @Override\n+    protected void verifyMetaData(MetaDataStore metaDataStore) {\n+        metaDataStore.getTables().forEach(table -> {\n+            SQLTable sqlTable = (SQLTable) table;\n+            checkForCycles(sqlTable);\n+            TableArgumentValidator tableArgValidator = new TableArgumentValidator(metaDataStore, sqlTable);\n+            tableArgValidator.validate();\n+        });\n+    }\n+\n+    /**\n+     * Verify that there is no reference loop for given {@link SQLTable}.\n+     * @param sqlTable Queryable to validate.\n+     */\n+    private void checkForCycles(SQLTable sqlTable) {\n+        sqlTable.getColumnProjections().forEach(column -> formulaValidator.parse(sqlTable, column));\n+    }\n+\n     /**\n      * State needed for SQLQueryEngine to execute queries.\n      */\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "ff86c56fde9064e1719ea35660fd04c42c949662", "message": "Merge commit", "committedDate": null}, {"oid": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "parent a14ccfbb7b558d27799b4e7b1916850519639708 author Jack (\uc815\ud658) <QubitPi@users.noreply.github.com> 1559678988 -0700 committer Aaron Klish <klish@verizonmedia.com> 1589583449 -0500"}, {"oid": "3f34e76977a5a591eca1f8c00ac986562a38d250", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Introduce QueryResult class for QueryEngine caching (#1333)"}, {"oid": "81dde7567aa8a6a00822a9a8f0bf901806a962e8", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add caching support to SQLQueryEngine (#1319)"}, {"oid": "9c897058ce0b9656bf2aef2318d0addc474f278a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "implement cancel function (#1367)"}, {"oid": "8fece2b8f1b3078ce2598ddb03dca66bb984df46", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Aggregation DataStore QueryLogger Implementation (#1448)"}, {"oid": "61ac33e39ba94617114273238754be32b006735b", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add SQLDialect implementations and tests. (#1487)"}, {"oid": "ca35ad817f2fde68b2f9c39d0d4d9c9d44ebffd5", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Query Engine and Aggregation Store Changes for Multi Data Source Support (#1523)"}, {"oid": "11e5083ef0755c62f86c287cf73c376d6c8b8c40", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Refactor query plan (#1579)"}, {"oid": "df3ea922a7550ec35585ce289e1d74101c4f28e4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5: Decouple query and metadata (#1585)"}, {"oid": "dc254e6a99100c21abd94eac3f0252bb9c5029df", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Support nested queries (#1591)"}, {"oid": "9057572200f962b7735270005cd9b51c368c0a0b", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5: Sketch out support for nested query plans. (#1594)"}, {"oid": "7daf58155ba6980d10a0171f72ea32a05af1ac6a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Added SQL Generation Tests for Nested Aggregation Queries (#1602)"}, {"oid": "e140eebdb89d74eb0f16fc8b157c6223cbb07992", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Refactor dbconnection (#1622)"}, {"oid": "df24aa71c283e12d2489982300580cfa80c9755c", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Migrate metadatacalls to metadata store (#1624)"}, {"oid": "c6f23dd421705b7a93be8823310143e6b631c7e4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Quote all identifiers in SQL query (#1621)"}, {"oid": "1dac58a1a989bbc3db52e87b77d19a5077c5ea5b", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Attempt to run explain query tests against H2 in compliance mode against targeted databases (#1633)"}, {"oid": "49e61867e840d9818993879436d5db1aad964c9a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Move data store interfaces (#1671)"}, {"oid": "911d29408bdeeb4ff8d78f2beea2417be4e7c673", "committedDate": "2020-12-11 16:20:28 -0600", "message": "cleaned up package hierarchy for elide-core (#1672)"}, {"oid": "c14096bec256faf80e7674fbef22bccff1f955a3", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Moved contrib.dynamicconfighelpers to modelconfig package (#1676)"}, {"oid": "bea43ef0f244ba01c2f7d4216b9f08f0ef4e83a4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Optionally compile hjson configs while running CLI (#1693)"}, {"oid": "172f3833738466c50648a2f4c3644eae46706aa2", "committedDate": "2021-01-12 15:51:35 -0600", "message": "Issue#1750 Fix SQL query generation for record count"}, {"oid": "979561b9129a15723594d23fbef0c584788ce100", "committedDate": "2021-01-19 10:59:36 -0600", "message": "add druid dialect with new pagination query structure"}, {"oid": "ccbcbcb65f7cae54ede4cd5242ecb19a8f84368c", "committedDate": "2021-01-19 10:59:36 -0600", "message": "change all count distinct queries to group by query for pagination"}, {"oid": "3f79dc112b211df777ab5fee15c27671c0f1bcdf", "committedDate": "2021-01-19 10:59:36 -0600", "message": "return null if no dimension projection is available."}, {"oid": "beb2cdfa0cd863756e7b095c0a58c733e484a944", "committedDate": "2021-01-19 10:59:36 -0600", "message": "address comments"}, {"oid": "17152126cb2f014076efd84ac3fd3be233f25c64", "committedDate": "2021-01-19 10:59:36 -0600", "message": "fix null pointer exception and add test case"}, {"oid": "f88b63d286d73d3774558b24f16aef0bb0be6d1a", "committedDate": "2021-01-19 14:16:37 -0600", "message": "Initial Commit for Type changes"}, {"oid": "ba73bc2a5617fed8feeee5b419a0f0808081628f", "committedDate": "2021-02-04 11:31:56 -0600", "message": "Elide 5 Agg Store: Multiple time grains (#1806)"}, {"oid": "8274a6341e06c7201049e8e8f0a48f07bd99a0ef", "committedDate": "2021-03-10 16:38:34 -0600", "message": "Cleanup IDE warnings (#1894)"}, {"oid": "c19d8c2237e960d792dc2ef6375356433b4fac21", "committedDate": "2021-03-11 17:10:26 -0600", "message": "Classtype cleanup (#1905)"}, {"oid": "212dcab497c321f67b66d619748b023201f2c819", "committedDate": "2021-03-16 10:13:31 -0500", "message": "Remove source from ColumnProjection (#1918)"}, {"oid": "e1e07dbeabb690560754c84200b67e7a8d4d9229", "committedDate": "2021-03-22 09:06:06 -0500", "message": "Part 4 of Query Plan Optimization : Fix Metric Nesting (#1924)"}, {"oid": "ed941827e1027083367b4df9794501909279c667", "committedDate": "2021-03-25 22:55:35 -0400", "message": "diamonds to reduce duplication (#1947)"}, {"oid": "5aa899ebbc6af4bfb538a4c04deef2218348a178", "committedDate": "2021-03-26 01:03:25 -0400", "message": "Issue 1929 - define function as lambda (#1945)"}, {"oid": "dc7a367e14c9f43b2d013f5037341055a29f0491", "committedDate": "2021-03-26 10:31:26 -0400", "message": "Issue 1929 - Address Sonar suggestions (#1925)"}, {"oid": "cd008a45ad379004b92c5114150016027aa07b80", "committedDate": "2021-03-26 10:35:48 -0500", "message": "Query plan optimizer phase5 (#1961)"}, {"oid": "234905d972c491934ce3774771c9733193b45007", "committedDate": "2021-04-01 10:20:16 -0500", "message": "Phase 6: Query Optimization - Calcite parser (#1976)"}, {"oid": "7a0b59711bb5e269afbc6b15426a8aff94a5e447", "committedDate": "2021-04-01 14:51:05 -0500", "message": "Removed QueryPlanResolver.  Replaced it with MetricProjectionMaker.  Small fix to Calcite parser builder to use the SQL conformance of the underlying dialect (#1980)"}, {"oid": "43598e8411d544b31d9807ded4f248e25ef334a4", "committedDate": "2021-04-01 17:32:17 -0500", "message": "Add Table Level Query Hints (#1981)"}, {"oid": "89e96b0bb45da69b08e6c8df6d8d7d23090eec37", "committedDate": "2021-04-22 17:56:53 -0400", "message": "Resolution using Table Context (#2004)"}, {"oid": "53b23330ff54b12041e530a931329986ddd3e454", "committedDate": "2021-04-28 13:29:43 -0400", "message": "Aggregation Store: Namespace Metadata changes (#2037)"}, {"oid": "256ca8e18dbae4b8ff6c1adbd8e37b236ef5e575", "committedDate": "2021-05-03 11:58:57 -0400", "message": "Refactor Column Projections (#2049)"}, {"oid": "d21f942a219ba7f32757f334d7e61c78e126d6be", "committedDate": "2021-05-04 15:24:11 -0500", "message": "Use only queried column args & default args for logical column expansion (#2054)"}, {"oid": "d2843b24f4a1ed35907726ff62f09049ce37d081", "committedDate": "2021-05-06 10:54:37 -0500", "message": "Optional flow (#2069)"}, {"oid": "1bb35bea711c420f00cfd97596dfa9177e15277e", "committedDate": "2021-05-10 14:36:06 -0500", "message": "Populating namespaces in metadatastore (#2071)"}, {"oid": "0a3776bacb5809845d9a04a1263db9760f117b92", "committedDate": "2021-05-13 13:25:15 -0500", "message": "Injection Protection for parameterized metrics/dimensions (#2090)"}, {"oid": "35e214dd718e164e30529eff4feab4d5fcd62d27", "committedDate": "2021-05-13 16:25:00 -0400", "message": "Resolve arguments in FromSubquery (#2089)"}, {"oid": "bf246b21912e4b299e4330089198ba2eee01fbec", "committedDate": "2021-05-13 17:30:24 -0500", "message": "Generate dynamic alias for join source (#2065)"}, {"oid": "32856f2244a3334028099eeb7ecd13b69fa41016", "committedDate": "2021-05-18 11:21:54 -0500", "message": "Aggregation Store ID Column Metadata (#2099)"}, {"oid": "e1c93d9f34829c4ee142a4919b5fde26502eaa11", "committedDate": "2021-05-19 17:24:06 -0400", "message": "Verify table arguments. (#2110)"}, {"oid": "b2eadb111297a8167f2715e027b9284c765adb32", "committedDate": "2021-05-20 16:42:02 -0400", "message": "Verify column arguments. (#2114)"}, {"oid": "4b8310f782f755f20fa79b52b7e4d13480b140f9", "committedDate": "2021-05-21 10:06:37 -0500", "message": "Remove usage of SQLReferenceTable. (#2116)"}, {"oid": "f9c2304cdbd7a1fb0f62cb024a19b2f2335832f2", "committedDate": "2021-06-24 13:55:06 -0400", "message": "Make AS before table alias optional, i.e. dialect based (#2179)"}, {"oid": "101f842daa06095652f898bda0f96fead4bb373e", "committedDate": "2021-08-05 14:37:57 -0500", "message": "GraphQL schema now namespaces internal types to avoid conflicts (#2237)"}, {"oid": "a874733a5c2ac3777e5946f6eddfade651d80c7a", "committedDate": "2021-08-06 17:30:43 -0500", "message": "Fix bug where dialect time conversion is skipped (#2238)"}, {"oid": "b88c19ef352c7bff44d4375d4a5f3e6b55054c3e", "committedDate": "2021-10-14 16:42:33 -0500", "message": "Aggregation Store: Make EntityHydrator stream results. (#2333)"}, {"oid": "830b9f2a997eefcd677090875bede2e21e19f1f4", "committedDate": "2021-10-20 14:48:56 -0500", "message": "Support 'hidden' flag for analytic models and fields. (#2357)"}, {"oid": "38b030daa701f205215b56199705f3d689726527", "committedDate": "2021-11-29 16:30:05 -0600", "message": "Enum filter fix (#2422)"}, {"oid": "54cdcb9fe67225cd463e1bf9357f0e1d2a42c152", "committedDate": "2021-12-02 15:11:51 -0600", "message": "HJSON Configuration Models and DataStore (#2418)"}, {"oid": "6b2b60098436a3dd7db03697ffd4717122fa3bf6", "committedDate": "2022-01-04 13:51:45 -0600", "message": "use query with filter to populate query parameters in pagination (#2466)"}, {"oid": "d0552c5750608391d52e3e3286469901726a7d06", "committedDate": "2022-01-28 16:02:28 -0600", "message": "Support filters on query plans (#2526)"}, {"oid": "f21f35950fe465cfbf135d06cc8ae2321a29513a", "committedDate": "2023-02-04 15:34:06 -0600", "message": "Elide 7.x (#2876)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ5NTY3Mg==", "url": "https://github.com/yahoo/elide/pull/1367#discussion_r439495672", "body": "This inner class is missing javadoc.  The linter will complain.", "bodyText": "This inner class is missing javadoc.  The linter will complain.", "bodyHTML": "<p dir=\"auto\">This inner class is missing javadoc.  The linter will complain.</p>", "author": "aklish", "createdAt": "2020-06-12T15:41:21Z", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java", "diffHunk": "@@ -289,4 +302,27 @@ private SQLQuery toPageTotalSQL(SQLQuery sql) {\n     public static String getClassAlias(Class<?> entityClass) {\n         return getTypeAlias(entityClass);\n     }\n+\n+    /**\n+     * Functional interface for describing a method to supply JpaTransaction.\n+     */\n+    @FunctionalInterface\n+    public interface TransactionCancel {\n+        public void cancel(EntityManager entityManager);\n+    }\n+\n+    public class QueryResultFuture<V> extends FutureTask<V> {", "originalCommit": "43ce9e801ed051344593d1af60db17481904b045", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8f1cfb480ee2db34373cee4ca35e5eef6b339a51", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex d61cdea2c..b63187a63 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -310,19 +343,4 @@ public class SQLQueryEngine extends QueryEngine {\n     public interface TransactionCancel {\n         public void cancel(EntityManager entityManager);\n     }\n-\n-    public class QueryResultFuture<V> extends FutureTask<V> {\n-        /**\n-         * FutureTask Implementation of Query Result.\n-         */\n-         public QueryResultFuture(Callable<V> callable) {\n-             super(callable);\n-         }\n-\n-        @Override\n-        public boolean cancel(boolean mayInterruptIfRunning) {\n-            transactionCancel.cancel(entityManager);\n-            return super.cancel(true);\n-        }\n-    }\n }\n", "next_change": {"commit": "5094ce020f2de18f1a34294178dd857eba7af5c4", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex b63187a63..5958134d7 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -343,4 +344,4 @@ public class SQLQueryEngine extends QueryEngine {\n     public interface TransactionCancel {\n         public void cancel(EntityManager entityManager);\n     }\n-}\n+}\n\\ No newline at end of file\n", "next_change": {"commit": "d7556cb189b6e83070942c10bdaf33054ecc0f71", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 5958134d7..869de2d9c 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -336,12 +337,4 @@ public class SQLQueryEngine extends QueryEngine {\n     public static String getClassAlias(Class<?> entityClass) {\n         return getTypeAlias(entityClass);\n     }\n-\n-    /**\n-     * Functional interface for describing a method to supply JpaTransaction.\n-     */\n-    @FunctionalInterface\n-    public interface TransactionCancel {\n-        public void cancel(EntityManager entityManager);\n-    }\n-}\n\\ No newline at end of file\n+}\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "ff86c56fde9064e1719ea35660fd04c42c949662", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex d61cdea2c..869de2d9c 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -302,27 +337,4 @@ public class SQLQueryEngine extends QueryEngine {\n     public static String getClassAlias(Class<?> entityClass) {\n         return getTypeAlias(entityClass);\n     }\n-\n-    /**\n-     * Functional interface for describing a method to supply JpaTransaction.\n-     */\n-    @FunctionalInterface\n-    public interface TransactionCancel {\n-        public void cancel(EntityManager entityManager);\n-    }\n-\n-    public class QueryResultFuture<V> extends FutureTask<V> {\n-        /**\n-         * FutureTask Implementation of Query Result.\n-         */\n-         public QueryResultFuture(Callable<V> callable) {\n-             super(callable);\n-         }\n-\n-        @Override\n-        public boolean cancel(boolean mayInterruptIfRunning) {\n-            transactionCancel.cancel(entityManager);\n-            return super.cancel(true);\n-        }\n-    }\n }\n", "next_change": {"commit": "ca35ad817f2fde68b2f9c39d0d4d9c9d44ebffd5", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\nindex 869de2d9c..9c79e5997 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SQLQueryEngine.java\n", "chunk": "@@ -337,4 +417,66 @@ public class SQLQueryEngine extends QueryEngine {\n     public static String getClassAlias(Class<?> entityClass) {\n         return getTypeAlias(entityClass);\n     }\n+\n+    private static boolean returnPageTotals(Pagination pagination) {\n+        return pagination != null && pagination.returnPageTotals();\n+    }\n+\n+    /**\n+     * Gets required ConnectionDetails.\n+     * @param connectionName Connection Name.\n+     * @return ConnectionDetails ConnectionDetails Object for this connection.\n+     */\n+    private ConnectionDetails getConnectionDetails(String connectionName) {\n+        if (connectionName == null || connectionName.trim().isEmpty()) {\n+            return defaultConnectionDetails;\n+        } else {\n+            return Optional.ofNullable(connectionDetailsMap.get(connectionName))\n+                            .orElseThrow(() -> new IllegalStateException(\n+                                            \"ConnectionDetails undefined for DB Connection Name: \" + connectionName));\n+        }\n+    }\n+\n+    /**\n+     * Cancels NamedParamPreparedStatement, hides and logs any SQLException.\n+     * @param stmt NamedParamPreparedStatement to cancel.\n+     */\n+    private static void cancelSoftly(NamedParamPreparedStatement stmt) {\n+        try {\n+            if (stmt != null && !stmt.isClosed()) {\n+                stmt.cancel();\n+            }\n+        } catch (SQLException e) {\n+            log.error(\"Exception encountered during cancel statement.\", e);\n+        }\n+    }\n+\n+    /**\n+     * Cancels and Closes NamedParamPreparedStatement, hides and logs any SQLException.\n+     * @param stmt NamedParamPreparedStatement to close.\n+     */\n+    private static void cancelAndCloseSoftly(NamedParamPreparedStatement stmt) {\n+        cancelSoftly(stmt);\n+        try {\n+            if (stmt != null && !stmt.isClosed()) {\n+                stmt.close();\n+            }\n+        } catch (SQLException e) {\n+            log.error(\"Exception encountered during close statement.\", e);\n+        }\n+    }\n+\n+    /**\n+     * Closes Connection, hides and logs any SQLException.\n+     * @param conn Connection to close.\n+     */\n+    private static void closeSoftly(Connection conn) {\n+        try {\n+            if (conn != null) {\n+                conn.close();\n+            }\n+        } catch (SQLException e) {\n+            log.error(\"Exception encountered during close connection.\", e);\n+        }\n+    }\n }\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "ff86c56fde9064e1719ea35660fd04c42c949662", "message": "Merge commit", "committedDate": null}, {"oid": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "parent a14ccfbb7b558d27799b4e7b1916850519639708 author Jack (\uc815\ud658) <QubitPi@users.noreply.github.com> 1559678988 -0700 committer Aaron Klish <klish@verizonmedia.com> 1589583449 -0500"}, {"oid": "3f34e76977a5a591eca1f8c00ac986562a38d250", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Introduce QueryResult class for QueryEngine caching (#1333)"}, {"oid": "81dde7567aa8a6a00822a9a8f0bf901806a962e8", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add caching support to SQLQueryEngine (#1319)"}, {"oid": "9c897058ce0b9656bf2aef2318d0addc474f278a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "implement cancel function (#1367)"}, {"oid": "8fece2b8f1b3078ce2598ddb03dca66bb984df46", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Aggregation DataStore QueryLogger Implementation (#1448)"}, {"oid": "61ac33e39ba94617114273238754be32b006735b", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add SQLDialect implementations and tests. (#1487)"}, {"oid": "ca35ad817f2fde68b2f9c39d0d4d9c9d44ebffd5", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Query Engine and Aggregation Store Changes for Multi Data Source Support (#1523)"}, {"oid": "11e5083ef0755c62f86c287cf73c376d6c8b8c40", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Refactor query plan (#1579)"}, {"oid": "df3ea922a7550ec35585ce289e1d74101c4f28e4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5: Decouple query and metadata (#1585)"}, {"oid": "dc254e6a99100c21abd94eac3f0252bb9c5029df", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Support nested queries (#1591)"}, {"oid": "9057572200f962b7735270005cd9b51c368c0a0b", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5: Sketch out support for nested query plans. (#1594)"}, {"oid": "7daf58155ba6980d10a0171f72ea32a05af1ac6a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Added SQL Generation Tests for Nested Aggregation Queries (#1602)"}, {"oid": "e140eebdb89d74eb0f16fc8b157c6223cbb07992", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Refactor dbconnection (#1622)"}, {"oid": "df24aa71c283e12d2489982300580cfa80c9755c", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Migrate metadatacalls to metadata store (#1624)"}, {"oid": "c6f23dd421705b7a93be8823310143e6b631c7e4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Quote all identifiers in SQL query (#1621)"}, {"oid": "1dac58a1a989bbc3db52e87b77d19a5077c5ea5b", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Attempt to run explain query tests against H2 in compliance mode against targeted databases (#1633)"}, {"oid": "49e61867e840d9818993879436d5db1aad964c9a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Move data store interfaces (#1671)"}, {"oid": "911d29408bdeeb4ff8d78f2beea2417be4e7c673", "committedDate": "2020-12-11 16:20:28 -0600", "message": "cleaned up package hierarchy for elide-core (#1672)"}, {"oid": "c14096bec256faf80e7674fbef22bccff1f955a3", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Moved contrib.dynamicconfighelpers to modelconfig package (#1676)"}, {"oid": "bea43ef0f244ba01c2f7d4216b9f08f0ef4e83a4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Optionally compile hjson configs while running CLI (#1693)"}, {"oid": "172f3833738466c50648a2f4c3644eae46706aa2", "committedDate": "2021-01-12 15:51:35 -0600", "message": "Issue#1750 Fix SQL query generation for record count"}, {"oid": "979561b9129a15723594d23fbef0c584788ce100", "committedDate": "2021-01-19 10:59:36 -0600", "message": "add druid dialect with new pagination query structure"}, {"oid": "ccbcbcb65f7cae54ede4cd5242ecb19a8f84368c", "committedDate": "2021-01-19 10:59:36 -0600", "message": "change all count distinct queries to group by query for pagination"}, {"oid": "3f79dc112b211df777ab5fee15c27671c0f1bcdf", "committedDate": "2021-01-19 10:59:36 -0600", "message": "return null if no dimension projection is available."}, {"oid": "beb2cdfa0cd863756e7b095c0a58c733e484a944", "committedDate": "2021-01-19 10:59:36 -0600", "message": "address comments"}, {"oid": "17152126cb2f014076efd84ac3fd3be233f25c64", "committedDate": "2021-01-19 10:59:36 -0600", "message": "fix null pointer exception and add test case"}, {"oid": "f88b63d286d73d3774558b24f16aef0bb0be6d1a", "committedDate": "2021-01-19 14:16:37 -0600", "message": "Initial Commit for Type changes"}, {"oid": "ba73bc2a5617fed8feeee5b419a0f0808081628f", "committedDate": "2021-02-04 11:31:56 -0600", "message": "Elide 5 Agg Store: Multiple time grains (#1806)"}, {"oid": "8274a6341e06c7201049e8e8f0a48f07bd99a0ef", "committedDate": "2021-03-10 16:38:34 -0600", "message": "Cleanup IDE warnings (#1894)"}, {"oid": "c19d8c2237e960d792dc2ef6375356433b4fac21", "committedDate": "2021-03-11 17:10:26 -0600", "message": "Classtype cleanup (#1905)"}, {"oid": "212dcab497c321f67b66d619748b023201f2c819", "committedDate": "2021-03-16 10:13:31 -0500", "message": "Remove source from ColumnProjection (#1918)"}, {"oid": "e1e07dbeabb690560754c84200b67e7a8d4d9229", "committedDate": "2021-03-22 09:06:06 -0500", "message": "Part 4 of Query Plan Optimization : Fix Metric Nesting (#1924)"}, {"oid": "ed941827e1027083367b4df9794501909279c667", "committedDate": "2021-03-25 22:55:35 -0400", "message": "diamonds to reduce duplication (#1947)"}, {"oid": "5aa899ebbc6af4bfb538a4c04deef2218348a178", "committedDate": "2021-03-26 01:03:25 -0400", "message": "Issue 1929 - define function as lambda (#1945)"}, {"oid": "dc7a367e14c9f43b2d013f5037341055a29f0491", "committedDate": "2021-03-26 10:31:26 -0400", "message": "Issue 1929 - Address Sonar suggestions (#1925)"}, {"oid": "cd008a45ad379004b92c5114150016027aa07b80", "committedDate": "2021-03-26 10:35:48 -0500", "message": "Query plan optimizer phase5 (#1961)"}, {"oid": "234905d972c491934ce3774771c9733193b45007", "committedDate": "2021-04-01 10:20:16 -0500", "message": "Phase 6: Query Optimization - Calcite parser (#1976)"}, {"oid": "7a0b59711bb5e269afbc6b15426a8aff94a5e447", "committedDate": "2021-04-01 14:51:05 -0500", "message": "Removed QueryPlanResolver.  Replaced it with MetricProjectionMaker.  Small fix to Calcite parser builder to use the SQL conformance of the underlying dialect (#1980)"}, {"oid": "43598e8411d544b31d9807ded4f248e25ef334a4", "committedDate": "2021-04-01 17:32:17 -0500", "message": "Add Table Level Query Hints (#1981)"}, {"oid": "89e96b0bb45da69b08e6c8df6d8d7d23090eec37", "committedDate": "2021-04-22 17:56:53 -0400", "message": "Resolution using Table Context (#2004)"}, {"oid": "53b23330ff54b12041e530a931329986ddd3e454", "committedDate": "2021-04-28 13:29:43 -0400", "message": "Aggregation Store: Namespace Metadata changes (#2037)"}, {"oid": "256ca8e18dbae4b8ff6c1adbd8e37b236ef5e575", "committedDate": "2021-05-03 11:58:57 -0400", "message": "Refactor Column Projections (#2049)"}, {"oid": "d21f942a219ba7f32757f334d7e61c78e126d6be", "committedDate": "2021-05-04 15:24:11 -0500", "message": "Use only queried column args & default args for logical column expansion (#2054)"}, {"oid": "d2843b24f4a1ed35907726ff62f09049ce37d081", "committedDate": "2021-05-06 10:54:37 -0500", "message": "Optional flow (#2069)"}, {"oid": "1bb35bea711c420f00cfd97596dfa9177e15277e", "committedDate": "2021-05-10 14:36:06 -0500", "message": "Populating namespaces in metadatastore (#2071)"}, {"oid": "0a3776bacb5809845d9a04a1263db9760f117b92", "committedDate": "2021-05-13 13:25:15 -0500", "message": "Injection Protection for parameterized metrics/dimensions (#2090)"}, {"oid": "35e214dd718e164e30529eff4feab4d5fcd62d27", "committedDate": "2021-05-13 16:25:00 -0400", "message": "Resolve arguments in FromSubquery (#2089)"}, {"oid": "bf246b21912e4b299e4330089198ba2eee01fbec", "committedDate": "2021-05-13 17:30:24 -0500", "message": "Generate dynamic alias for join source (#2065)"}, {"oid": "32856f2244a3334028099eeb7ecd13b69fa41016", "committedDate": "2021-05-18 11:21:54 -0500", "message": "Aggregation Store ID Column Metadata (#2099)"}, {"oid": "e1c93d9f34829c4ee142a4919b5fde26502eaa11", "committedDate": "2021-05-19 17:24:06 -0400", "message": "Verify table arguments. (#2110)"}, {"oid": "b2eadb111297a8167f2715e027b9284c765adb32", "committedDate": "2021-05-20 16:42:02 -0400", "message": "Verify column arguments. (#2114)"}, {"oid": "4b8310f782f755f20fa79b52b7e4d13480b140f9", "committedDate": "2021-05-21 10:06:37 -0500", "message": "Remove usage of SQLReferenceTable. (#2116)"}, {"oid": "f9c2304cdbd7a1fb0f62cb024a19b2f2335832f2", "committedDate": "2021-06-24 13:55:06 -0400", "message": "Make AS before table alias optional, i.e. dialect based (#2179)"}, {"oid": "101f842daa06095652f898bda0f96fead4bb373e", "committedDate": "2021-08-05 14:37:57 -0500", "message": "GraphQL schema now namespaces internal types to avoid conflicts (#2237)"}, {"oid": "a874733a5c2ac3777e5946f6eddfade651d80c7a", "committedDate": "2021-08-06 17:30:43 -0500", "message": "Fix bug where dialect time conversion is skipped (#2238)"}, {"oid": "b88c19ef352c7bff44d4375d4a5f3e6b55054c3e", "committedDate": "2021-10-14 16:42:33 -0500", "message": "Aggregation Store: Make EntityHydrator stream results. (#2333)"}, {"oid": "830b9f2a997eefcd677090875bede2e21e19f1f4", "committedDate": "2021-10-20 14:48:56 -0500", "message": "Support 'hidden' flag for analytic models and fields. (#2357)"}, {"oid": "38b030daa701f205215b56199705f3d689726527", "committedDate": "2021-11-29 16:30:05 -0600", "message": "Enum filter fix (#2422)"}, {"oid": "54cdcb9fe67225cd463e1bf9357f0e1d2a42c152", "committedDate": "2021-12-02 15:11:51 -0600", "message": "HJSON Configuration Models and DataStore (#2418)"}, {"oid": "6b2b60098436a3dd7db03697ffd4717122fa3bf6", "committedDate": "2022-01-04 13:51:45 -0600", "message": "use query with filter to populate query parameters in pagination (#2466)"}, {"oid": "d0552c5750608391d52e3e3286469901726a7d06", "committedDate": "2022-01-28 16:02:28 -0600", "message": "Support filters on query plans (#2526)"}, {"oid": "f21f35950fe465cfbf135d06cc8ae2321a29513a", "committedDate": "2023-02-04 15:34:06 -0600", "message": "Elide 7.x (#2876)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ5NzQxOQ==", "url": "https://github.com/yahoo/elide/pull/1367#discussion_r439497419", "body": "This code is violating DRY (do not repeat yourself).  Make a function in this class to avoid repeating the same block over and over.", "bodyText": "This code is violating DRY (do not repeat yourself).  Make a function in this class to avoid repeating the same block over and over.", "bodyHTML": "<p dir=\"auto\">This code is violating DRY (do not repeat yourself).  Make a function in this class to avoid repeating the same block over and over.</p>", "author": "aklish", "createdAt": "2020-06-12T15:44:44Z", "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/QueryEngineTest.java", "diffHunk": "@@ -55,8 +58,20 @@ public void testFullTableLoad() {\n                 .timeDimension(toProjection(playerStatsTable.getTimeDimension(\"recordedDate\"), TimeGrain.DAY))\n                 .build();\n \n-        List<Object> results = StreamSupport.stream(engine.executeQuery(query).getData().spliterator(), false)\n+        List<Object> results;\n+        FutureTask<QueryResult> queryResult = engine.executeQuery(query);\n+        queryResult.run();", "originalCommit": "43ce9e801ed051344593d1af60db17481904b045", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8f1cfb480ee2db34373cee4ca35e5eef6b339a51", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/QueryEngineTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/QueryEngineTest.java\nindex 2636feb5a..2ba98ccea 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/QueryEngineTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/QueryEngineTest.java\n", "chunk": "@@ -58,20 +53,7 @@ public class QueryEngineTest extends SQLUnitTest {\n                 .timeDimension(toProjection(playerStatsTable.getTimeDimension(\"recordedDate\"), TimeGrain.DAY))\n                 .build();\n \n-        List<Object> results;\n-        FutureTask<QueryResult> queryResult = engine.executeQuery(query);\n-        queryResult.run();\n-        try {\n-            QueryResult result = queryResult.get();\n-            results = StreamSupport.stream(result.getData().spliterator(), false)\n-                .collect(Collectors.toList());\n-        } catch (TransactionException e) {\n-            throw new TransactionException(null);\n-        } catch (InterruptedException e) {\n-            throw new IllegalStateException(e);\n-        } catch (ExecutionException e) {\n-            throw new IllegalStateException(e);\n-        }\n+        List<Object> results = toList(engine.executeQuery(query, transaction).getData());\n \n         PlayerStats stats0 = new PlayerStats();\n         stats0.setId(\"0\");\n", "next_change": null}]}, "revised_code_in_main": {"commit": "ff86c56fde9064e1719ea35660fd04c42c949662", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/QueryEngineTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/QueryEngineTest.java\nindex 2636feb5a..38d795105 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/QueryEngineTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/QueryEngineTest.java\n", "chunk": "@@ -58,20 +54,7 @@ public class QueryEngineTest extends SQLUnitTest {\n                 .timeDimension(toProjection(playerStatsTable.getTimeDimension(\"recordedDate\"), TimeGrain.DAY))\n                 .build();\n \n-        List<Object> results;\n-        FutureTask<QueryResult> queryResult = engine.executeQuery(query);\n-        queryResult.run();\n-        try {\n-            QueryResult result = queryResult.get();\n-            results = StreamSupport.stream(result.getData().spliterator(), false)\n-                .collect(Collectors.toList());\n-        } catch (TransactionException e) {\n-            throw new TransactionException(null);\n-        } catch (InterruptedException e) {\n-            throw new IllegalStateException(e);\n-        } catch (ExecutionException e) {\n-            throw new IllegalStateException(e);\n-        }\n+        List<Object> results = toList(engine.executeQuery(query, transaction).getData());\n \n         PlayerStats stats0 = new PlayerStats();\n         stats0.setId(\"0\");\n", "next_change": {"commit": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/QueryEngineTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/QueryEngineTest.java\nindex 38d795105..a25350efe 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/QueryEngineTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/QueryEngineTest.java\n", "chunk": "@@ -54,7 +54,8 @@ public class QueryEngineTest extends SQLUnitTest {\n                 .timeDimension(toProjection(playerStatsTable.getTimeDimension(\"recordedDate\"), TimeGrain.DAY))\n                 .build();\n \n-        List<Object> results = toList(engine.executeQuery(query, transaction).getData());\n+        List<Object> results = StreamSupport.stream(engine.executeQuery(query, true).spliterator(), false)\n+                .collect(Collectors.toList());\n \n         PlayerStats stats0 = new PlayerStats();\n         stats0.setId(\"0\");\n", "next_change": {"commit": "3f34e76977a5a591eca1f8c00ac986562a38d250", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/QueryEngineTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/QueryEngineTest.java\nindex a25350efe..7f4695787 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/QueryEngineTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/QueryEngineTest.java\n", "chunk": "@@ -54,7 +55,7 @@ public class QueryEngineTest extends SQLUnitTest {\n                 .timeDimension(toProjection(playerStatsTable.getTimeDimension(\"recordedDate\"), TimeGrain.DAY))\n                 .build();\n \n-        List<Object> results = StreamSupport.stream(engine.executeQuery(query, true).spliterator(), false)\n+        List<Object> results = StreamSupport.stream(engine.executeQuery(query).getData().spliterator(), false)\n                 .collect(Collectors.toList());\n \n         PlayerStats stats0 = new PlayerStats();\n", "next_change": {"commit": "81dde7567aa8a6a00822a9a8f0bf901806a962e8", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/QueryEngineTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/QueryEngineTest.java\nindex 7f4695787..078151173 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/QueryEngineTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/QueryEngineTest.java\n", "chunk": "@@ -55,8 +54,7 @@ public class QueryEngineTest extends SQLUnitTest {\n                 .timeDimension(toProjection(playerStatsTable.getTimeDimension(\"recordedDate\"), TimeGrain.DAY))\n                 .build();\n \n-        List<Object> results = StreamSupport.stream(engine.executeQuery(query).getData().spliterator(), false)\n-                .collect(Collectors.toList());\n+        List<Object> results = toList(engine.executeQuery(query, transaction).getData());\n \n         PlayerStats stats0 = new PlayerStats();\n         stats0.setId(\"0\");\n", "next_change": {"commit": "8cb3c91a6812c87ab57ee9bb3fd76bf1e5018e44", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/QueryEngineTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/QueryEngineTest.java\nindex 078151173..e187465d5 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/QueryEngineTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/QueryEngineTest.java\n", "chunk": "@@ -38,20 +40,20 @@ public class QueryEngineTest extends SQLUnitTest {\n     @BeforeAll\n     public static void init() {\n         SQLUnitTest.init();\n-\n-        playerStatsViewTable = engine.getTable(\"playerStatsView\");\n+        TableId tableId = new TableId(\"playerStatsView\", \"\", \"\");\n+        playerStatsViewTable = engine.getTable(tableId);\n     }\n \n     /**\n      * Test loading all three records from the table.\n      */\n     @Test\n-    public void testFullTableLoad() {\n+    public void testFullTableLoad() throws Exception {\n         Query query = Query.builder()\n                 .table(playerStatsTable)\n                 .metric(invoke(playerStatsTable.getMetric(\"lowScore\")))\n                 .metric(invoke(playerStatsTable.getMetric(\"highScore\")))\n-                .timeDimension(toProjection(playerStatsTable.getTimeDimension(\"recordedDate\"), TimeGrain.DAY))\n+                .timeDimension(toProjection(playerStatsTable.getTimeDimension(\"recordedDate\"), TimeGrain.SIMPLEDATE))\n                 .build();\n \n         List<Object> results = toList(engine.executeQuery(query, transaction).getData());\n", "next_change": {"commit": "11e5083ef0755c62f86c287cf73c376d6c8b8c40", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/QueryEngineTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/QueryEngineTest.java\nindex e187465d5..b525564ea 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/QueryEngineTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/QueryEngineTest.java\n", "chunk": "@@ -50,10 +50,10 @@ public class QueryEngineTest extends SQLUnitTest {\n     @Test\n     public void testFullTableLoad() throws Exception {\n         Query query = Query.builder()\n-                .table(playerStatsTable)\n-                .metric(invoke(playerStatsTable.getMetric(\"lowScore\")))\n-                .metric(invoke(playerStatsTable.getMetric(\"highScore\")))\n-                .timeDimension(toProjection(playerStatsTable.getTimeDimension(\"recordedDate\"), TimeGrain.SIMPLEDATE))\n+                .source(playerStatsTable)\n+                .metricProjection(invoke(playerStatsTable.getMetric(\"lowScore\")))\n+                .metricProjection(invoke(playerStatsTable.getMetric(\"highScore\")))\n+                .timeDimensionProjection(toProjection(playerStatsTable.getTimeDimension(\"recordedDate\"), TimeGrain.SIMPLEDATE))\n                 .build();\n \n         List<Object> results = toList(engine.executeQuery(query, transaction).getData());\n", "next_change": {"commit": "df3ea922a7550ec35585ce289e1d74101c4f28e4", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/QueryEngineTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/QueryEngineTest.java\nindex b525564ea..699ae9c9a 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/QueryEngineTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/QueryEngineTest.java\n", "chunk": "@@ -51,9 +48,9 @@ public class QueryEngineTest extends SQLUnitTest {\n     public void testFullTableLoad() throws Exception {\n         Query query = Query.builder()\n                 .source(playerStatsTable)\n-                .metricProjection(invoke(playerStatsTable.getMetric(\"lowScore\")))\n-                .metricProjection(invoke(playerStatsTable.getMetric(\"highScore\")))\n-                .timeDimensionProjection(toProjection(playerStatsTable.getTimeDimension(\"recordedDate\"), TimeGrain.SIMPLEDATE))\n+                .metricProjection(playerStatsTable.getMetricProjection(\"lowScore\"))\n+                .metricProjection(playerStatsTable.getMetricProjection(\"highScore\"))\n+                .timeDimensionProjection(playerStatsTable.getTimeDimensionProjection(\"recordedDate\"))\n                 .build();\n \n         List<Object> results = toList(engine.executeQuery(query, transaction).getData());\n", "next_change": {"commit": "9057572200f962b7735270005cd9b51c368c0a0b", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/QueryEngineTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/QueryEngineTest.java\nindex 699ae9c9a..d7508220a 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/QueryEngineTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/QueryEngineTest.java\n", "chunk": "@@ -59,19 +61,19 @@ public class QueryEngineTest extends SQLUnitTest {\n         stats0.setId(\"0\");\n         stats0.setLowScore(241);\n         stats0.setHighScore(2412);\n-        stats0.setRecordedDate(Timestamp.valueOf(\"2019-07-11 00:00:00\"));\n+        stats0.setRecordedDate(new SimpleDate(Date.valueOf(\"2019-07-11\")));\n \n         PlayerStats stats1 = new PlayerStats();\n         stats1.setId(\"1\");\n         stats1.setLowScore(35);\n         stats1.setHighScore(1234);\n-        stats1.setRecordedDate(Timestamp.valueOf(\"2019-07-12 00:00:00\"));\n+        stats1.setRecordedDate(new SimpleDate(Date.valueOf(\"2019-07-12\")));\n \n         PlayerStats stats2 = new PlayerStats();\n         stats2.setId(\"2\");\n         stats2.setLowScore(72);\n         stats2.setHighScore(1000);\n-        stats2.setRecordedDate(Timestamp.valueOf(\"2019-07-13 00:00:00\"));\n+        stats2.setRecordedDate(new SimpleDate(Date.valueOf(\"2019-07-13\")));\n \n         assertEquals(ImmutableList.of(stats0, stats1, stats2), results);\n     }\n", "next_change": {"commit": "e2029731954a3773f367a8e1bf521db8f5f8f6ca", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/QueryEngineTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/QueryEngineTest.java\nindex d7508220a..3de6763e6 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/QueryEngineTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/QueryEngineTest.java\n", "chunk": "@@ -61,19 +61,19 @@ public class QueryEngineTest extends SQLUnitTest {\n         stats0.setId(\"0\");\n         stats0.setLowScore(241);\n         stats0.setHighScore(2412);\n-        stats0.setRecordedDate(new SimpleDate(Date.valueOf(\"2019-07-11\")));\n+        stats0.setRecordedDate(new Day(Date.valueOf(\"2019-07-11\")));\n \n         PlayerStats stats1 = new PlayerStats();\n         stats1.setId(\"1\");\n         stats1.setLowScore(35);\n         stats1.setHighScore(1234);\n-        stats1.setRecordedDate(new SimpleDate(Date.valueOf(\"2019-07-12\")));\n+        stats1.setRecordedDate(new Day(Date.valueOf(\"2019-07-12\")));\n \n         PlayerStats stats2 = new PlayerStats();\n         stats2.setId(\"2\");\n         stats2.setLowScore(72);\n         stats2.setHighScore(1000);\n-        stats2.setRecordedDate(new SimpleDate(Date.valueOf(\"2019-07-13\")));\n+        stats2.setRecordedDate(new Day(Date.valueOf(\"2019-07-13\")));\n \n         assertEquals(ImmutableList.of(stats0, stats1, stats2), results);\n     }\n", "next_change": {"commit": "0e85109b24e6637f46b73d9722fc08cc01cfa639", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/QueryEngineTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/QueryEngineTest.java\nindex 3de6763e6..bd215a3ce 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/QueryEngineTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/QueryEngineTest.java\n", "chunk": "@@ -79,7 +90,9 @@ public class QueryEngineTest extends SQLUnitTest {\n     }\n \n     /**\n-     * Test loading records using {@link FromSubquery}\n+     * Test loading records using {@link FromSubquery}.\n+     *\n+     * @throws Exception exception\n      */\n     @Test\n     public void testFromSubQuery() throws Exception {\n", "next_change": {"commit": "35e214dd718e164e30529eff4feab4d5fcd62d27", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/QueryEngineTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/QueryEngineTest.java\nindex bd215a3ce..33b1ccbb3 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/QueryEngineTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/QueryEngineTest.java\n", "chunk": "@@ -99,6 +95,7 @@ public class QueryEngineTest extends SQLUnitTest {\n         Query query = Query.builder()\n                 .source(playerStatsViewTable.toQueryable())\n                 .metricProjection(playerStatsViewTable.getMetricProjection(\"highScore\"))\n+                .arguments(playerStatsViewTableArgs)\n                 .build();\n \n         List<Object> results = toList(engine.executeQuery(query, transaction).getData());\n", "next_change": {"commit": "9d5b98b5d41e8676f149ce1669d1826b766acd1b", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/QueryEngineTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/QueryEngineTest.java\nindex 33b1ccbb3..a4caa2f76 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/QueryEngineTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/QueryEngineTest.java\n", "chunk": "@@ -102,7 +102,7 @@ public class QueryEngineTest extends SQLUnitTest {\n \n         PlayerStatsView stats2 = new PlayerStatsView();\n         stats2.setId(\"0\");\n-        stats2.setHighScore(2412);\n+        stats2.setHighScore(3147483647L);\n \n         assertEquals(ImmutableList.of(stats2), results);\n     }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "ff86c56fde9064e1719ea35660fd04c42c949662", "message": "Merge commit", "committedDate": null}, {"oid": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "parent a14ccfbb7b558d27799b4e7b1916850519639708 author Jack (\uc815\ud658) <QubitPi@users.noreply.github.com> 1559678988 -0700 committer Aaron Klish <klish@verizonmedia.com> 1589583449 -0500"}, {"oid": "3f34e76977a5a591eca1f8c00ac986562a38d250", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Introduce QueryResult class for QueryEngine caching (#1333)"}, {"oid": "81dde7567aa8a6a00822a9a8f0bf901806a962e8", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add caching support to SQLQueryEngine (#1319)"}, {"oid": "9c897058ce0b9656bf2aef2318d0addc474f278a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "implement cancel function (#1367)"}, {"oid": "7a748d213b1a007d4a10064b8c448b8dbda07d12", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Immutable for testing (#1498)"}, {"oid": "8e468796edc62cade065889cbf651bcbe8bdde3d", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Revert \"Immutable for testing (#1498)\" (#1500)"}, {"oid": "e00732f068a712d1c5ad2afd9226545b2ae7fcf3", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Path matcher 5.x (#1496)"}, {"oid": "ecb1fb18fc0ca7ee3c47924bd5cdcc8d25d8f06c", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Include db connection name as Id for Table (#1503)"}, {"oid": "8cb3c91a6812c87ab57ee9bb3fd76bf1e5018e44", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Time Dimension should support different formats during serialization (#1511)"}, {"oid": "3d7fd9bbae235a90370b77508d7c42a6fb57ffd5", "committedDate": "2020-12-11 16:20:28 -0600", "message": "H2 5.x (#1494)"}, {"oid": "11e5083ef0755c62f86c287cf73c376d6c8b8c40", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Refactor query plan (#1579)"}, {"oid": "7024083c38335717492d4beb01460b80a0899a78", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Revert composite id changes for Table (#1577)"}, {"oid": "df3ea922a7550ec35585ce289e1d74101c4f28e4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5: Decouple query and metadata (#1585)"}, {"oid": "dc254e6a99100c21abd94eac3f0252bb9c5029df", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Support nested queries (#1591)"}, {"oid": "9057572200f962b7735270005cd9b51c368c0a0b", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5: Sketch out support for nested query plans. (#1594)"}, {"oid": "e2029731954a3773f367a8e1bf521db8f5f8f6ca", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Refactor analytic time grains (#1608)"}, {"oid": "df24aa71c283e12d2489982300580cfa80c9755c", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Migrate metadatacalls to metadata store (#1624)"}, {"oid": "49e61867e840d9818993879436d5db1aad964c9a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Move data store interfaces (#1671)"}, {"oid": "911d29408bdeeb4ff8d78f2beea2417be4e7c673", "committedDate": "2020-12-11 16:20:28 -0600", "message": "cleaned up package hierarchy for elide-core (#1672)"}, {"oid": "f88b63d286d73d3774558b24f16aef0bb0be6d1a", "committedDate": "2021-01-19 14:16:37 -0600", "message": "Initial Commit for Type changes"}, {"oid": "de9883d363ba8b4171be5d8ad508564664f6fc90", "committedDate": "2021-01-19 14:16:37 -0600", "message": "Review comments"}, {"oid": "466175c4b44a93eeea5b4f5cc3e9beeb4a78ff26", "committedDate": "2021-01-19 14:16:37 -0600", "message": "minor changes"}, {"oid": "ba73bc2a5617fed8feeee5b419a0f0808081628f", "committedDate": "2021-02-04 11:31:56 -0600", "message": "Elide 5 Agg Store: Multiple time grains (#1806)"}, {"oid": "994c0a865027795133ac5731ff4b47b4f910ab4e", "committedDate": "2021-02-04 13:54:42 -0600", "message": "Fix for FieldType in FilterPredicate (#1814)"}, {"oid": "8274a6341e06c7201049e8e8f0a48f07bd99a0ef", "committedDate": "2021-03-10 16:38:34 -0600", "message": "Cleanup IDE warnings (#1894)"}, {"oid": "c19d8c2237e960d792dc2ef6375356433b4fac21", "committedDate": "2021-03-11 17:10:26 -0600", "message": "Classtype cleanup (#1905)"}, {"oid": "0e85109b24e6637f46b73d9722fc08cc01cfa639", "committedDate": "2021-03-29 13:04:32 -0500", "message": "elide-datastore-aggregation - fix javadoc build warning (#1963)"}, {"oid": "35e214dd718e164e30529eff4feab4d5fcd62d27", "committedDate": "2021-05-13 16:25:00 -0400", "message": "Resolve arguments in FromSubquery (#2089)"}, {"oid": "101f842daa06095652f898bda0f96fead4bb373e", "committedDate": "2021-08-05 14:37:57 -0500", "message": "GraphQL schema now namespaces internal types to avoid conflicts (#2237)"}, {"oid": "6b2b60098436a3dd7db03697ffd4717122fa3bf6", "committedDate": "2022-01-04 13:51:45 -0600", "message": "use query with filter to populate query parameters in pagination (#2466)"}, {"oid": "9a4849d738692723c45dda410587b3e8c1be897a", "committedDate": "2022-01-04 15:36:49 -0600", "message": "Bump h2 from 1.4.200 to 2.0.202 (#2427)"}, {"oid": "9d5b98b5d41e8676f149ce1669d1826b766acd1b", "committedDate": "2022-04-22 12:20:08 -0500", "message": "fix: support big number aggregations (#2628)"}, {"oid": "f21f35950fe465cfbf135d06cc8ae2321a29513a", "committedDate": "2023-02-04 15:34:06 -0600", "message": "Elide 7.x (#2876)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ5Nzc5MA==", "url": "https://github.com/yahoo/elide/pull/1367#discussion_r439497790", "body": "Remove all references to queryResult.run() in this PR.", "bodyText": "Remove all references to queryResult.run() in this PR.", "bodyHTML": "<p dir=\"auto\">Remove all references to queryResult.run() in this PR.</p>", "author": "aklish", "createdAt": "2020-06-12T15:45:25Z", "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SubselectTest.java", "diffHunk": "@@ -87,7 +92,10 @@ public void testJoinToFilter() throws Exception {\n                         PlayerStats.class, false))\n                 .build();\n \n-        List<Object> results = StreamSupport.stream(engine.executeQuery(query).getData().spliterator(), false)\n+        FutureTask<QueryResult> queryResult = engine.executeQuery(query);\n+        queryResult.run();", "originalCommit": "43ce9e801ed051344593d1af60db17481904b045", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ5ODM3MA==", "url": "https://github.com/yahoo/elide/pull/1367#discussion_r439498370", "bodyText": "The delta between the original line and your modifications can be just 4 characters:\nList<Object> results = StreamSupport.stream(engine.executeQuery(query).get().getData().spliterator(), false)", "author": "aklish", "createdAt": "2020-06-12T15:46:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ5Nzc5MA=="}], "type": "inlineReview", "revised_code": {"commit": "8f1cfb480ee2db34373cee4ca35e5eef6b339a51", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SubselectTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SubselectTest.java\nindex 24d1c4ce0..6201c6ba9 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SubselectTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SubselectTest.java\n", "chunk": "@@ -92,11 +84,7 @@ public class SubselectTest extends SQLUnitTest {\n                         PlayerStats.class, false))\n                 .build();\n \n-        FutureTask<QueryResult> queryResult = engine.executeQuery(query);\n-        queryResult.run();\n-        QueryResult result = queryResult.get();\n-        List<Object> results = StreamSupport.stream(result.getData().spliterator(), false)\n-                .collect(Collectors.toList());\n+        List<Object> results = toList(engine.executeQuery(query, transaction).getData());\n \n         PlayerStats stats1 = new PlayerStats();\n         stats1.setId(\"0\");\n", "next_change": null}]}, "revised_code_in_main": {"commit": "ff86c56fde9064e1719ea35660fd04c42c949662", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SubselectTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SubselectTest.java\nindex 24d1c4ce0..a3d1257b2 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SubselectTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SubselectTest.java\n", "chunk": "@@ -92,11 +84,7 @@ public class SubselectTest extends SQLUnitTest {\n                         PlayerStats.class, false))\n                 .build();\n \n-        FutureTask<QueryResult> queryResult = engine.executeQuery(query);\n-        queryResult.run();\n-        QueryResult result = queryResult.get();\n-        List<Object> results = StreamSupport.stream(result.getData().spliterator(), false)\n-                .collect(Collectors.toList());\n+        List<Object> results = toList(engine.executeQuery(query, transaction).getData());\n \n         PlayerStats stats1 = new PlayerStats();\n         stats1.setId(\"0\");\n", "next_change": {"commit": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SubselectTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SubselectTest.java\nindex a3d1257b2..be307fc11 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SubselectTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SubselectTest.java\n", "chunk": "@@ -84,7 +87,8 @@ public class SubselectTest extends SQLUnitTest {\n                         PlayerStats.class, false))\n                 .build();\n \n-        List<Object> results = toList(engine.executeQuery(query, transaction).getData());\n+        List<Object> results = StreamSupport.stream(engine.executeQuery(query, true).spliterator(), false)\n+                .collect(Collectors.toList());\n \n         PlayerStats stats1 = new PlayerStats();\n         stats1.setId(\"0\");\n", "next_change": {"commit": "3f34e76977a5a591eca1f8c00ac986562a38d250", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SubselectTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SubselectTest.java\nindex be307fc11..661ce3f2d 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SubselectTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SubselectTest.java\n", "chunk": "@@ -87,7 +87,7 @@ public class SubselectTest extends SQLUnitTest {\n                         PlayerStats.class, false))\n                 .build();\n \n-        List<Object> results = StreamSupport.stream(engine.executeQuery(query, true).spliterator(), false)\n+        List<Object> results = StreamSupport.stream(engine.executeQuery(query).getData().spliterator(), false)\n                 .collect(Collectors.toList());\n \n         PlayerStats stats1 = new PlayerStats();\n", "next_change": {"commit": "81dde7567aa8a6a00822a9a8f0bf901806a962e8", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SubselectTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SubselectTest.java\nindex 661ce3f2d..a3d1257b2 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SubselectTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SubselectTest.java\n", "chunk": "@@ -87,8 +84,7 @@ public class SubselectTest extends SQLUnitTest {\n                         PlayerStats.class, false))\n                 .build();\n \n-        List<Object> results = StreamSupport.stream(engine.executeQuery(query).getData().spliterator(), false)\n-                .collect(Collectors.toList());\n+        List<Object> results = toList(engine.executeQuery(query, transaction).getData());\n \n         PlayerStats stats1 = new PlayerStats();\n         stats1.setId(\"0\");\n", "next_change": {"commit": "f88b63d286d73d3774558b24f16aef0bb0be6d1a", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SubselectTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SubselectTest.java\nindex a3d1257b2..c2ec2185a 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SubselectTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SubselectTest.java\n", "chunk": "@@ -77,11 +75,11 @@ public class SubselectTest extends SQLUnitTest {\n     @Test\n     public void testJoinToFilter() throws Exception {\n         Query query = Query.builder()\n-                .table(playerStatsTable)\n-                .metric(invoke(playerStatsTable.getMetric(\"highScore\")))\n-                .groupByDimension(toProjection(playerStatsTable.getDimension(\"overallRating\")))\n+                .source(playerStatsTable)\n+                .metricProjection(playerStatsTable.getMetricProjection(\"highScore\"))\n+                .dimensionProjection(playerStatsTable.getDimensionProjection(\"overallRating\"))\n                 .whereFilter(filterParser.parseFilterExpression(\"subCountryIsoCode==USA\",\n-                        PlayerStats.class, false))\n+                        getType(PlayerStats.class), false))\n                 .build();\n \n         List<Object> results = toList(engine.executeQuery(query, transaction).getData());\n", "next_change": {"commit": "de9883d363ba8b4171be5d8ad508564664f6fc90", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SubselectTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SubselectTest.java\nindex c2ec2185a..aa34a6698 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SubselectTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/SubselectTest.java\n", "chunk": "@@ -78,8 +77,7 @@ public class SubselectTest extends SQLUnitTest {\n                 .source(playerStatsTable)\n                 .metricProjection(playerStatsTable.getMetricProjection(\"highScore\"))\n                 .dimensionProjection(playerStatsTable.getDimensionProjection(\"overallRating\"))\n-                .whereFilter(filterParser.parseFilterExpression(\"subCountryIsoCode==USA\",\n-                        getType(PlayerStats.class), false))\n+                .whereFilter(filterParser.parseFilterExpression(\"subCountryIsoCode==USA\", playerStatsType, false))\n                 .build();\n \n         List<Object> results = toList(engine.executeQuery(query, transaction).getData());\n", "next_change": null}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "ff86c56fde9064e1719ea35660fd04c42c949662", "message": "Merge commit", "committedDate": null}, {"oid": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "parent a14ccfbb7b558d27799b4e7b1916850519639708 author Jack (\uc815\ud658) <QubitPi@users.noreply.github.com> 1559678988 -0700 committer Aaron Klish <klish@verizonmedia.com> 1589583449 -0500"}, {"oid": "3f34e76977a5a591eca1f8c00ac986562a38d250", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Introduce QueryResult class for QueryEngine caching (#1333)"}, {"oid": "81dde7567aa8a6a00822a9a8f0bf901806a962e8", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add caching support to SQLQueryEngine (#1319)"}, {"oid": "3d7fd9bbae235a90370b77508d7c42a6fb57ffd5", "committedDate": "2020-12-11 16:20:28 -0600", "message": "H2 5.x (#1494)"}, {"oid": "11e5083ef0755c62f86c287cf73c376d6c8b8c40", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Refactor query plan (#1579)"}, {"oid": "df3ea922a7550ec35585ce289e1d74101c4f28e4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5: Decouple query and metadata (#1585)"}, {"oid": "49e61867e840d9818993879436d5db1aad964c9a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Move data store interfaces (#1671)"}, {"oid": "911d29408bdeeb4ff8d78f2beea2417be4e7c673", "committedDate": "2020-12-11 16:20:28 -0600", "message": "cleaned up package hierarchy for elide-core (#1672)"}, {"oid": "f88b63d286d73d3774558b24f16aef0bb0be6d1a", "committedDate": "2021-01-19 14:16:37 -0600", "message": "Initial Commit for Type changes"}, {"oid": "de9883d363ba8b4171be5d8ad508564664f6fc90", "committedDate": "2021-01-19 14:16:37 -0600", "message": "Review comments"}, {"oid": "1bb35bea711c420f00cfd97596dfa9177e15277e", "committedDate": "2021-05-10 14:36:06 -0500", "message": "Populating namespaces in metadatastore (#2071)"}, {"oid": "101f842daa06095652f898bda0f96fead4bb373e", "committedDate": "2021-08-05 14:37:57 -0500", "message": "GraphQL schema now namespaces internal types to avoid conflicts (#2237)"}, {"oid": "9a4849d738692723c45dda410587b3e8c1be897a", "committedDate": "2022-01-04 15:36:49 -0600", "message": "Bump h2 from 1.4.200 to 2.0.202 (#2427)"}, {"oid": "9d5b98b5d41e8676f149ce1669d1826b766acd1b", "committedDate": "2022-04-22 12:20:08 -0500", "message": "fix: support big number aggregations (#2628)"}, {"oid": "f21f35950fe465cfbf135d06cc8ae2321a29513a", "committedDate": "2023-02-04 15:34:06 -0600", "message": "Elide 7.x (#2876)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ5OTAwMg==", "url": "https://github.com/yahoo/elide/pull/1367#discussion_r439499002", "body": "For UnitTests, you can simply have the test throw Exception and avoid all these try catch blocks.\r\n\r\nLook at my prior comments - all of this can be changed by just adding 4 characters - without these large blocks of duplicate code.", "bodyText": "For UnitTests, you can simply have the test throw Exception and avoid all these try catch blocks.\nLook at my prior comments - all of this can be changed by just adding 4 characters - without these large blocks of duplicate code.", "bodyHTML": "<p dir=\"auto\">For UnitTests, you can simply have the test throw Exception and avoid all these try catch blocks.</p>\n<p dir=\"auto\">Look at my prior comments - all of this can be changed by just adding 4 characters - without these large blocks of duplicate code.</p>", "author": "aklish", "createdAt": "2020-06-12T15:47:40Z", "path": "elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/ViewTest.java", "diffHunk": "@@ -46,8 +50,20 @@ public void testViewAttribute() {\n                 .sorting(new SortingImpl(sortMap, PlayerStatsWithView.class, dictionary))\n                 .build();\n \n-        List<Object> results = StreamSupport.stream(engine.executeQuery(query).getData().spliterator(), false)\n+        List<Object> results;\n+        FutureTask<QueryResult> queryResult = engine.executeQuery(query);\n+        queryResult.run();\n+        try {\n+            QueryResult result = queryResult.get();\n+            results = StreamSupport.stream(result.getData().spliterator(), false)\n                 .collect(Collectors.toList());\n+        } catch (TransactionException e) {", "originalCommit": "43ce9e801ed051344593d1af60db17481904b045", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8f1cfb480ee2db34373cee4ca35e5eef6b339a51", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/ViewTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/ViewTest.java\nindex 212705ac8..ef4267b20 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/ViewTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/ViewTest.java\n", "chunk": "@@ -50,20 +44,7 @@ public class ViewTest extends SQLUnitTest {\n                 .sorting(new SortingImpl(sortMap, PlayerStatsWithView.class, dictionary))\n                 .build();\n \n-        List<Object> results;\n-        FutureTask<QueryResult> queryResult = engine.executeQuery(query);\n-        queryResult.run();\n-        try {\n-            QueryResult result = queryResult.get();\n-            results = StreamSupport.stream(result.getData().spliterator(), false)\n-                .collect(Collectors.toList());\n-        } catch (TransactionException e) {\n-            throw new TransactionException(null);\n-        } catch (InterruptedException e) {\n-            throw new IllegalStateException(e);\n-        } catch (ExecutionException e) {\n-            throw new IllegalStateException(e);\n-        }\n+        List<Object> results = toList(engine.executeQuery(query, transaction).getData());\n \n         PlayerStatsWithView usa0 = new PlayerStatsWithView();\n         usa0.setId(\"0\");\n", "next_change": null}]}, "revised_code_in_main": {"commit": "ff86c56fde9064e1719ea35660fd04c42c949662", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/ViewTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/ViewTest.java\nindex 212705ac8..66663290f 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/ViewTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/ViewTest.java\n", "chunk": "@@ -50,20 +44,7 @@ public class ViewTest extends SQLUnitTest {\n                 .sorting(new SortingImpl(sortMap, PlayerStatsWithView.class, dictionary))\n                 .build();\n \n-        List<Object> results;\n-        FutureTask<QueryResult> queryResult = engine.executeQuery(query);\n-        queryResult.run();\n-        try {\n-            QueryResult result = queryResult.get();\n-            results = StreamSupport.stream(result.getData().spliterator(), false)\n-                .collect(Collectors.toList());\n-        } catch (TransactionException e) {\n-            throw new TransactionException(null);\n-        } catch (InterruptedException e) {\n-            throw new IllegalStateException(e);\n-        } catch (ExecutionException e) {\n-            throw new IllegalStateException(e);\n-        }\n+        List<Object> results = toList(engine.executeQuery(query, transaction).getData());\n \n         PlayerStatsWithView usa0 = new PlayerStatsWithView();\n         usa0.setId(\"0\");\n", "next_change": {"commit": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/ViewTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/ViewTest.java\nindex 66663290f..eda281bd5 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/ViewTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/ViewTest.java\n", "chunk": "@@ -44,7 +46,8 @@ public class ViewTest extends SQLUnitTest {\n                 .sorting(new SortingImpl(sortMap, PlayerStatsWithView.class, dictionary))\n                 .build();\n \n-        List<Object> results = toList(engine.executeQuery(query, transaction).getData());\n+        List<Object> results = StreamSupport.stream(engine.executeQuery(query, true).spliterator(), false)\n+                .collect(Collectors.toList());\n \n         PlayerStatsWithView usa0 = new PlayerStatsWithView();\n         usa0.setId(\"0\");\n", "next_change": {"commit": "3f34e76977a5a591eca1f8c00ac986562a38d250", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/ViewTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/ViewTest.java\nindex eda281bd5..7c53da04b 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/ViewTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/ViewTest.java\n", "chunk": "@@ -46,7 +46,7 @@ public class ViewTest extends SQLUnitTest {\n                 .sorting(new SortingImpl(sortMap, PlayerStatsWithView.class, dictionary))\n                 .build();\n \n-        List<Object> results = StreamSupport.stream(engine.executeQuery(query, true).spliterator(), false)\n+        List<Object> results = StreamSupport.stream(engine.executeQuery(query).getData().spliterator(), false)\n                 .collect(Collectors.toList());\n \n         PlayerStatsWithView usa0 = new PlayerStatsWithView();\n", "next_change": {"commit": "81dde7567aa8a6a00822a9a8f0bf901806a962e8", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/ViewTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/ViewTest.java\nindex 7c53da04b..6a19a4bc2 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/ViewTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/ViewTest.java\n", "chunk": "@@ -46,8 +44,7 @@ public class ViewTest extends SQLUnitTest {\n                 .sorting(new SortingImpl(sortMap, PlayerStatsWithView.class, dictionary))\n                 .build();\n \n-        List<Object> results = StreamSupport.stream(engine.executeQuery(query).getData().spliterator(), false)\n-                .collect(Collectors.toList());\n+        List<Object> results = toList(engine.executeQuery(query, transaction).getData());\n \n         PlayerStatsWithView usa0 = new PlayerStatsWithView();\n         usa0.setId(\"0\");\n", "next_change": {"commit": "11e5083ef0755c62f86c287cf73c376d6c8b8c40", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/ViewTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/ViewTest.java\nindex 6a19a4bc2..5cb7fe9e5 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/ViewTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/ViewTest.java\n", "chunk": "@@ -29,18 +30,19 @@ public class ViewTest extends SQLUnitTest {\n     @BeforeAll\n     public static void init() {\n         SQLUnitTest.init();\n-        playerStatsWithViewSchema = engine.getTable(\"playerStatsWithView\");\n+        TableId tableId = new TableId(\"playerStatsWithView\", \"\", \"\");\n+        playerStatsWithViewSchema = engine.getTable(tableId);\n     }\n \n     @Test\n-    public void testViewAttribute() {\n+    public void testViewAttribute() throws Exception {\n         Map<String, Sorting.SortOrder> sortMap = new TreeMap<>();\n         sortMap.put(\"countryViewIsoCode\", Sorting.SortOrder.desc);\n \n         Query query = Query.builder()\n-                .table(playerStatsWithViewSchema)\n-                .metric(invoke(playerStatsWithViewSchema.getMetric(\"lowScore\")))\n-                .groupByDimension(toProjection(playerStatsWithViewSchema.getDimension(\"countryViewIsoCode\")))\n+                .source(playerStatsWithViewSchema)\n+                .metricProjection(invoke(playerStatsWithViewSchema.getMetric(\"lowScore\")))\n+                .dimensionProjection(toProjection(playerStatsWithViewSchema.getDimension(\"countryViewIsoCode\")))\n                 .sorting(new SortingImpl(sortMap, PlayerStatsWithView.class, dictionary))\n                 .build();\n \n", "next_change": {"commit": "df3ea922a7550ec35585ce289e1d74101c4f28e4", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/ViewTest.java b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/ViewTest.java\nindex 5cb7fe9e5..106e7e6fe 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/ViewTest.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/test/java/com/yahoo/elide/datastores/aggregation/queryengines/sql/ViewTest.java\n", "chunk": "@@ -41,8 +39,8 @@ public class ViewTest extends SQLUnitTest {\n \n         Query query = Query.builder()\n                 .source(playerStatsWithViewSchema)\n-                .metricProjection(invoke(playerStatsWithViewSchema.getMetric(\"lowScore\")))\n-                .dimensionProjection(toProjection(playerStatsWithViewSchema.getDimension(\"countryViewIsoCode\")))\n+                .metricProjection(playerStatsWithViewSchema.getMetricProjection(\"lowScore\"))\n+                .dimensionProjection(playerStatsWithViewSchema.getDimensionProjection(\"countryViewIsoCode\"))\n                 .sorting(new SortingImpl(sortMap, PlayerStatsWithView.class, dictionary))\n                 .build();\n \n", "next_change": null}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "ff86c56fde9064e1719ea35660fd04c42c949662", "message": "Merge commit", "committedDate": null}, {"oid": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "parent a14ccfbb7b558d27799b4e7b1916850519639708 author Jack (\uc815\ud658) <QubitPi@users.noreply.github.com> 1559678988 -0700 committer Aaron Klish <klish@verizonmedia.com> 1589583449 -0500"}, {"oid": "3f34e76977a5a591eca1f8c00ac986562a38d250", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Introduce QueryResult class for QueryEngine caching (#1333)"}, {"oid": "81dde7567aa8a6a00822a9a8f0bf901806a962e8", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add caching support to SQLQueryEngine (#1319)"}, {"oid": "9c897058ce0b9656bf2aef2318d0addc474f278a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "implement cancel function (#1367)"}, {"oid": "ecb1fb18fc0ca7ee3c47924bd5cdcc8d25d8f06c", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Include db connection name as Id for Table (#1503)"}, {"oid": "11e5083ef0755c62f86c287cf73c376d6c8b8c40", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Refactor query plan (#1579)"}, {"oid": "7024083c38335717492d4beb01460b80a0899a78", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Revert composite id changes for Table (#1577)"}, {"oid": "df3ea922a7550ec35585ce289e1d74101c4f28e4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5: Decouple query and metadata (#1585)"}, {"oid": "df24aa71c283e12d2489982300580cfa80c9755c", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Migrate metadatacalls to metadata store (#1624)"}, {"oid": "49e61867e840d9818993879436d5db1aad964c9a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Move data store interfaces (#1671)"}, {"oid": "911d29408bdeeb4ff8d78f2beea2417be4e7c673", "committedDate": "2020-12-11 16:20:28 -0600", "message": "cleaned up package hierarchy for elide-core (#1672)"}, {"oid": "101f842daa06095652f898bda0f96fead4bb373e", "committedDate": "2021-08-05 14:37:57 -0500", "message": "GraphQL schema now namespaces internal types to avoid conflicts (#2237)"}, {"oid": "f21f35950fe465cfbf135d06cc8ae2321a29513a", "committedDate": "2023-02-04 15:34:06 -0600", "message": "Elide 7.x (#2876)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUwMDE2MQ==", "url": "https://github.com/yahoo/elide/pull/1367#discussion_r439500161", "body": "You shouldn't need to pass transactionCancel as an argument to the supplier.  When the supplier is created, it can have a reference to transactionSupplier through closure.  Remove this extra argument.", "bodyText": "You shouldn't need to pass transactionCancel as an argument to the supplier.  When the supplier is created, it can have a reference to transactionSupplier through closure.  Remove this extra argument.", "bodyHTML": "<p dir=\"auto\">You shouldn't need to pass transactionCancel as an argument to the supplier.  When the supplier is created, it can have a reference to transactionSupplier through closure.  Remove this extra argument.</p>", "author": "aklish", "createdAt": "2020-06-12T15:49:47Z", "path": "elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/JpaDataStore.java", "diffHunk": "@@ -73,15 +78,15 @@ public void populateEntityDictionary(EntityDictionary dictionary) {\n     @Override\n     public DataStoreTransaction beginReadTransaction() {\n         EntityManager entityManager = entityManagerSupplier.get();\n-        JpaTransaction transaction = readTransactionSupplier.get(entityManager);\n+        JpaTransaction transaction = readTransactionSupplier.get(entityManager, jpaTransactionCancel);\n         transaction.begin();\n         return transaction;\n     }\n \n     @Override\n     public DataStoreTransaction beginTransaction() {\n         EntityManager entityManager = entityManagerSupplier.get();\n-        JpaTransaction transaction = writeTransactionSupplier.get(entityManager);\n+        JpaTransaction transaction = writeTransactionSupplier.get(entityManager, jpaTransactionCancel);", "originalCommit": "43ce9e801ed051344593d1af60db17481904b045", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8f1cfb480ee2db34373cee4ca35e5eef6b339a51", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/JpaDataStore.java b/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/JpaDataStore.java\nindex e8ecaaf22..daf88dcda 100644\n--- a/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/JpaDataStore.java\n+++ b/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/JpaDataStore.java\n", "chunk": "@@ -78,7 +78,7 @@ public class JpaDataStore implements JPQLDataStore {\n     @Override\n     public DataStoreTransaction beginReadTransaction() {\n         EntityManager entityManager = entityManagerSupplier.get();\n-        JpaTransaction transaction = readTransactionSupplier.get(entityManager, jpaTransactionCancel);\n+        JpaTransaction transaction = readTransactionSupplier.get(entityManager);\n         transaction.begin();\n         return transaction;\n     }\n", "next_change": null}, {"header": "diff --git a/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/JpaDataStore.java b/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/JpaDataStore.java\nindex e8ecaaf22..daf88dcda 100644\n--- a/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/JpaDataStore.java\n+++ b/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/JpaDataStore.java\n", "chunk": "@@ -86,7 +86,7 @@ public class JpaDataStore implements JPQLDataStore {\n     @Override\n     public DataStoreTransaction beginTransaction() {\n         EntityManager entityManager = entityManagerSupplier.get();\n-        JpaTransaction transaction = writeTransactionSupplier.get(entityManager, jpaTransactionCancel);\n+        JpaTransaction transaction = writeTransactionSupplier.get(entityManager);\n         transaction.begin();\n         return transaction;\n     }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "ff86c56fde9064e1719ea35660fd04c42c949662", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/JpaDataStore.java b/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/JpaDataStore.java\nindex e8ecaaf22..71f19da8a 100644\n--- a/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/JpaDataStore.java\n+++ b/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/JpaDataStore.java\n", "chunk": "@@ -78,7 +73,7 @@ public class JpaDataStore implements JPQLDataStore {\n     @Override\n     public DataStoreTransaction beginReadTransaction() {\n         EntityManager entityManager = entityManagerSupplier.get();\n-        JpaTransaction transaction = readTransactionSupplier.get(entityManager, jpaTransactionCancel);\n+        JpaTransaction transaction = readTransactionSupplier.get(entityManager);\n         transaction.begin();\n         return transaction;\n     }\n", "next_change": null}, {"header": "diff --git a/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/JpaDataStore.java b/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/JpaDataStore.java\nindex e8ecaaf22..71f19da8a 100644\n--- a/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/JpaDataStore.java\n+++ b/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/JpaDataStore.java\n", "chunk": "@@ -86,7 +81,7 @@ public class JpaDataStore implements JPQLDataStore {\n     @Override\n     public DataStoreTransaction beginTransaction() {\n         EntityManager entityManager = entityManagerSupplier.get();\n-        JpaTransaction transaction = writeTransactionSupplier.get(entityManager, jpaTransactionCancel);\n+        JpaTransaction transaction = writeTransactionSupplier.get(entityManager);\n         transaction.begin();\n         return transaction;\n     }\n", "next_change": null}]}, "commits_in_main": [{"oid": "ff86c56fde9064e1719ea35660fd04c42c949662", "message": "Merge commit", "committedDate": null}, {"oid": "49e61867e840d9818993879436d5db1aad964c9a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Move data store interfaces (#1671)"}, {"oid": "911d29408bdeeb4ff8d78f2beea2417be4e7c673", "committedDate": "2020-12-11 16:20:28 -0600", "message": "cleaned up package hierarchy for elide-core (#1672)"}, {"oid": "d9a28dd5b8d95f3219a864aac56e7db8945e991d", "committedDate": "2021-01-19 14:16:37 -0600", "message": "Fix Aggregation Store Integration Tests"}, {"oid": "de9883d363ba8b4171be5d8ad508564664f6fc90", "committedDate": "2021-01-19 14:16:37 -0600", "message": "Review comments"}, {"oid": "6c97725cec25be900fd1466f627d3d0e722ed508", "committedDate": "2021-03-09 15:24:33 -0600", "message": "Add experimental n plus1 improvement (#1876)"}, {"oid": "0c9fff2684f6bff02222fd36c9b12a686ee655ef", "committedDate": "2021-04-26 09:59:59 -0500", "message": "ClassType.of (#2027)"}, {"oid": "76fff8684b7ea31d3ee1483aa4078d7949e5442f", "committedDate": "2021-08-12 09:37:43 -0500", "message": "Added enhanced logging around JPQL queries (#2249)"}, {"oid": "6ef850932d95d4895b960832b099354fdb5569bb", "committedDate": "2021-09-13 18:51:58 -0500", "message": "Elide 6.x (#2303)"}, {"oid": "6f26ba6377010a22403698d48d49ef2a4f897fde", "committedDate": "2021-10-17 15:04:42 -0500", "message": "Changing Oath to Yahoo in Copyright messages (#2340)"}, {"oid": "f21f35950fe465cfbf135d06cc8ae2321a29513a", "committedDate": "2023-02-04 15:34:06 -0600", "message": "Elide 7.x (#2876)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUwMTIwNQ==", "url": "https://github.com/yahoo/elide/pull/1367#discussion_r439501205", "body": "So for example, there is no need to include txCancel as a parameter to the supplier.  Rewrite like:\r\n```java\r\n(entityManager) -> { return new NonJtaTransaction(entityManager, jpaTransactionCancel); }\r\n```", "bodyText": "So for example, there is no need to include txCancel as a parameter to the supplier.  Rewrite like:\n(entityManager) -> { return new NonJtaTransaction(entityManager, jpaTransactionCancel); }", "bodyHTML": "<p dir=\"auto\">So for example, there is no need to include txCancel as a parameter to the supplier.  Rewrite like:</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"(entityManager) -&gt; { return new NonJtaTransaction(entityManager, jpaTransactionCancel); }\n\"><pre>(entityManager) <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> { <span class=\"pl-k\">return</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">NonJtaTransaction</span>(entityManager, jpaTransactionCancel); }</pre></div>", "author": "aklish", "createdAt": "2020-06-12T15:51:43Z", "path": "elide-datastore/elide-datastore-jpa/src/test/java/com/yahoo/elide/datastores/jpa/JpaDataStoreHarness.java", "diffHunk": "@@ -96,7 +99,8 @@ public JpaDataStoreHarness() {\n \n         store = new JpaDataStore(\n                 () -> { return emf.createEntityManager(); },\n-                (entityManager) -> { return new NonJtaTransaction(entityManager); }\n+                (entityManager, txCancel) -> { return new NonJtaTransaction(entityManager, txCancel); },", "originalCommit": "43ce9e801ed051344593d1af60db17481904b045", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8f1cfb480ee2db34373cee4ca35e5eef6b339a51", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-jpa/src/test/java/com/yahoo/elide/datastores/jpa/JpaDataStoreHarness.java b/elide-datastore/elide-datastore-jpa/src/test/java/com/yahoo/elide/datastores/jpa/JpaDataStoreHarness.java\nindex d44837d6b..c35738d2c 100644\n--- a/elide-datastore/elide-datastore-jpa/src/test/java/com/yahoo/elide/datastores/jpa/JpaDataStoreHarness.java\n+++ b/elide-datastore/elide-datastore-jpa/src/test/java/com/yahoo/elide/datastores/jpa/JpaDataStoreHarness.java\n", "chunk": "@@ -99,8 +99,7 @@ public class JpaDataStoreHarness implements DataStoreTestHarness {\n \n         store = new JpaDataStore(\n                 () -> { return emf.createEntityManager(); },\n-                (entityManager, txCancel) -> { return new NonJtaTransaction(entityManager, txCancel); },\n-                jpaTransactionCancel\n+                (entityManager) -> { return new NonJtaTransaction(entityManager, jpaTransactionCancel); }\n         );\n     }\n \n", "next_change": {"commit": "d7556cb189b6e83070942c10bdaf33054ecc0f71", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-jpa/src/test/java/com/yahoo/elide/datastores/jpa/JpaDataStoreHarness.java b/elide-datastore/elide-datastore-jpa/src/test/java/com/yahoo/elide/datastores/jpa/JpaDataStoreHarness.java\nindex c35738d2c..13fddab08 100644\n--- a/elide-datastore/elide-datastore-jpa/src/test/java/com/yahoo/elide/datastores/jpa/JpaDataStoreHarness.java\n+++ b/elide-datastore/elide-datastore-jpa/src/test/java/com/yahoo/elide/datastores/jpa/JpaDataStoreHarness.java\n", "chunk": "@@ -99,7 +100,7 @@ public class JpaDataStoreHarness implements DataStoreTestHarness {\n \n         store = new JpaDataStore(\n                 () -> { return emf.createEntityManager(); },\n-                (entityManager) -> { return new NonJtaTransaction(entityManager, jpaTransactionCancel); }\n+                (entityManager) -> { return new NonJtaTransaction(entityManager, func); }\n         );\n     }\n \n", "next_change": {"commit": "127517bb46972dbe127cfd5e32d70439aa385381", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-jpa/src/test/java/com/yahoo/elide/datastores/jpa/JpaDataStoreHarness.java b/elide-datastore/elide-datastore-jpa/src/test/java/com/yahoo/elide/datastores/jpa/JpaDataStoreHarness.java\nindex 13fddab08..7c95080ca 100644\n--- a/elide-datastore/elide-datastore-jpa/src/test/java/com/yahoo/elide/datastores/jpa/JpaDataStoreHarness.java\n+++ b/elide-datastore/elide-datastore-jpa/src/test/java/com/yahoo/elide/datastores/jpa/JpaDataStoreHarness.java\n", "chunk": "@@ -100,7 +100,7 @@ public class JpaDataStoreHarness implements DataStoreTestHarness {\n \n         store = new JpaDataStore(\n                 () -> { return emf.createEntityManager(); },\n-                (entityManager) -> { return new NonJtaTransaction(entityManager, func); }\n+                (entityManager) -> { return new NonJtaTransaction(entityManager, txCancel); }\n         );\n     }\n \n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "ff86c56fde9064e1719ea35660fd04c42c949662", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-jpa/src/test/java/com/yahoo/elide/datastores/jpa/JpaDataStoreHarness.java b/elide-datastore/elide-datastore-jpa/src/test/java/com/yahoo/elide/datastores/jpa/JpaDataStoreHarness.java\nindex d44837d6b..7c95080ca 100644\n--- a/elide-datastore/elide-datastore-jpa/src/test/java/com/yahoo/elide/datastores/jpa/JpaDataStoreHarness.java\n+++ b/elide-datastore/elide-datastore-jpa/src/test/java/com/yahoo/elide/datastores/jpa/JpaDataStoreHarness.java\n", "chunk": "@@ -99,8 +100,7 @@ public class JpaDataStoreHarness implements DataStoreTestHarness {\n \n         store = new JpaDataStore(\n                 () -> { return emf.createEntityManager(); },\n-                (entityManager, txCancel) -> { return new NonJtaTransaction(entityManager, txCancel); },\n-                jpaTransactionCancel\n+                (entityManager) -> { return new NonJtaTransaction(entityManager, txCancel); }\n         );\n     }\n \n", "next_change": {"commit": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-jpa/src/test/java/com/yahoo/elide/datastores/jpa/JpaDataStoreHarness.java b/elide-datastore/elide-datastore-jpa/src/test/java/com/yahoo/elide/datastores/jpa/JpaDataStoreHarness.java\nindex 7c95080ca..05ffdf628 100644\n--- a/elide-datastore/elide-datastore-jpa/src/test/java/com/yahoo/elide/datastores/jpa/JpaDataStoreHarness.java\n+++ b/elide-datastore/elide-datastore-jpa/src/test/java/com/yahoo/elide/datastores/jpa/JpaDataStoreHarness.java\n", "chunk": "@@ -100,7 +96,7 @@ public class JpaDataStoreHarness implements DataStoreTestHarness {\n \n         store = new JpaDataStore(\n                 () -> { return emf.createEntityManager(); },\n-                (entityManager) -> { return new NonJtaTransaction(entityManager, txCancel); }\n+                (entityManager) -> { return new NonJtaTransaction(entityManager); }\n         );\n     }\n \n", "next_change": {"commit": "9c897058ce0b9656bf2aef2318d0addc474f278a", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-jpa/src/test/java/com/yahoo/elide/datastores/jpa/JpaDataStoreHarness.java b/elide-datastore/elide-datastore-jpa/src/test/java/com/yahoo/elide/datastores/jpa/JpaDataStoreHarness.java\nindex 05ffdf628..7c95080ca 100644\n--- a/elide-datastore/elide-datastore-jpa/src/test/java/com/yahoo/elide/datastores/jpa/JpaDataStoreHarness.java\n+++ b/elide-datastore/elide-datastore-jpa/src/test/java/com/yahoo/elide/datastores/jpa/JpaDataStoreHarness.java\n", "chunk": "@@ -96,7 +100,7 @@ public class JpaDataStoreHarness implements DataStoreTestHarness {\n \n         store = new JpaDataStore(\n                 () -> { return emf.createEntityManager(); },\n-                (entityManager) -> { return new NonJtaTransaction(entityManager); }\n+                (entityManager) -> { return new NonJtaTransaction(entityManager, txCancel); }\n         );\n     }\n \n", "next_change": {"commit": "e2005d6babde1a0da3ba66fc507fc6ecf5773052", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-jpa/src/test/java/com/yahoo/elide/datastores/jpa/JpaDataStoreHarness.java b/elide-datastore/elide-datastore-jpa/src/test/java/com/yahoo/elide/datastores/jpa/JpaDataStoreHarness.java\nindex 7c95080ca..f8889464d 100644\n--- a/elide-datastore/elide-datastore-jpa/src/test/java/com/yahoo/elide/datastores/jpa/JpaDataStoreHarness.java\n+++ b/elide-datastore/elide-datastore-jpa/src/test/java/com/yahoo/elide/datastores/jpa/JpaDataStoreHarness.java\n", "chunk": "@@ -99,8 +99,8 @@ public class JpaDataStoreHarness implements DataStoreTestHarness {\n         resetSchema();\n \n         store = new JpaDataStore(\n-                () -> { return emf.createEntityManager(); },\n-                (entityManager) -> { return new NonJtaTransaction(entityManager, txCancel); }\n+                () -> emf.createEntityManager(),\n+                entityManager -> new NonJtaTransaction(entityManager, txCancel)\n         );\n     }\n \n", "next_change": {"commit": "6c97725cec25be900fd1466f627d3d0e722ed508", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-jpa/src/test/java/com/yahoo/elide/datastores/jpa/JpaDataStoreHarness.java b/elide-datastore/elide-datastore-jpa/src/test/java/com/yahoo/elide/datastores/jpa/JpaDataStoreHarness.java\nindex f8889464d..d6e4c9892 100644\n--- a/elide-datastore/elide-datastore-jpa/src/test/java/com/yahoo/elide/datastores/jpa/JpaDataStoreHarness.java\n+++ b/elide-datastore/elide-datastore-jpa/src/test/java/com/yahoo/elide/datastores/jpa/JpaDataStoreHarness.java\n", "chunk": "@@ -100,7 +106,7 @@ public class JpaDataStoreHarness implements DataStoreTestHarness {\n \n         store = new JpaDataStore(\n                 () -> emf.createEntityManager(),\n-                entityManager -> new NonJtaTransaction(entityManager, txCancel)\n+                entityManager -> new NonJtaTransaction(entityManager, txCancel, logger, delegateToInMemoryStore)\n         );\n     }\n \n", "next_change": {"commit": "5064f8a5a351b1f77b8025f68b20efc1b76d101e", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-jpa/src/test/java/com/yahoo/elide/datastores/jpa/JpaDataStoreHarness.java b/elide-datastore/elide-datastore-jpa/src/test/java/com/yahoo/elide/datastores/jpa/JpaDataStoreHarness.java\nindex d6e4c9892..7f8cdc3e4 100644\n--- a/elide-datastore/elide-datastore-jpa/src/test/java/com/yahoo/elide/datastores/jpa/JpaDataStoreHarness.java\n+++ b/elide-datastore/elide-datastore-jpa/src/test/java/com/yahoo/elide/datastores/jpa/JpaDataStoreHarness.java\n", "chunk": "@@ -106,7 +116,7 @@ public class JpaDataStoreHarness implements DataStoreTestHarness {\n \n         store = new JpaDataStore(\n                 () -> emf.createEntityManager(),\n-                entityManager -> new NonJtaTransaction(entityManager, txCancel, logger, delegateToInMemoryStore)\n+                entityManager -> new NonJtaTransaction(entityManager, txCancel, logger, delegateToInMemoryStore, false)\n         );\n     }\n \n", "next_change": {"commit": "c8266c116bb3dbd322cfefe86ea23c6320c6b9a8", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-jpa/src/test/java/com/yahoo/elide/datastores/jpa/JpaDataStoreHarness.java b/elide-datastore/elide-datastore-jpa/src/test/java/com/yahoo/elide/datastores/jpa/JpaDataStoreHarness.java\nindex 7f8cdc3e4..cfef0ae49 100644\n--- a/elide-datastore/elide-datastore-jpa/src/test/java/com/yahoo/elide/datastores/jpa/JpaDataStoreHarness.java\n+++ b/elide-datastore/elide-datastore-jpa/src/test/java/com/yahoo/elide/datastores/jpa/JpaDataStoreHarness.java\n", "chunk": "@@ -116,7 +116,7 @@ public class JpaDataStoreHarness implements DataStoreTestHarness {\n \n         store = new JpaDataStore(\n                 () -> emf.createEntityManager(),\n-                entityManager -> new NonJtaTransaction(entityManager, txCancel, logger, delegateToInMemoryStore, false)\n+                entityManager -> new NonJtaTransaction(entityManager, txCancel, logger, delegateToInMemoryStore, true)\n         );\n     }\n \n", "next_change": null}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "ff86c56fde9064e1719ea35660fd04c42c949662", "message": "Merge commit", "committedDate": null}, {"oid": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "parent a14ccfbb7b558d27799b4e7b1916850519639708 author Jack (\uc815\ud658) <QubitPi@users.noreply.github.com> 1559678988 -0700 committer Aaron Klish <klish@verizonmedia.com> 1589583449 -0500"}, {"oid": "9c897058ce0b9656bf2aef2318d0addc474f278a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "implement cancel function (#1367)"}, {"oid": "49e61867e840d9818993879436d5db1aad964c9a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Move data store interfaces (#1671)"}, {"oid": "911d29408bdeeb4ff8d78f2beea2417be4e7c673", "committedDate": "2020-12-11 16:20:28 -0600", "message": "cleaned up package hierarchy for elide-core (#1672)"}, {"oid": "e2005d6babde1a0da3ba66fc507fc6ecf5773052", "committedDate": "2021-02-22 10:34:54 -0600", "message": "Cleanup unnecessary syntax (#1854)"}, {"oid": "6c97725cec25be900fd1466f627d3d0e722ed508", "committedDate": "2021-03-09 15:24:33 -0600", "message": "Add experimental n plus1 improvement (#1876)"}, {"oid": "76fff8684b7ea31d3ee1483aa4078d7949e5442f", "committedDate": "2021-08-12 09:37:43 -0500", "message": "Added enhanced logging around JPQL queries (#2249)"}, {"oid": "fe7009353573baf0206f7bb58617db97e067f900", "committedDate": "2021-09-02 11:31:12 -0500", "message": "Refactor class scanning for quarkus (#2284)"}, {"oid": "6ef850932d95d4895b960832b099354fdb5569bb", "committedDate": "2021-09-13 18:51:58 -0500", "message": "Elide 6.x (#2303)"}, {"oid": "5064f8a5a351b1f77b8025f68b20efc1b76d101e", "committedDate": "2021-10-19 11:25:38 -0500", "message": "Elide 6 : Refactor DataStoreTransaction Interface. (#2334)"}, {"oid": "c8266c116bb3dbd322cfefe86ea23c6320c6b9a8", "committedDate": "2021-11-12 16:24:40 -0600", "message": "combining methods (#2410)"}, {"oid": "9a4849d738692723c45dda410587b3e8c1be897a", "committedDate": "2022-01-04 15:36:49 -0600", "message": "Bump h2 from 1.4.200 to 2.0.202 (#2427)"}, {"oid": "ae34fede3835c107617dbc448ce32573ad5ec8e8", "committedDate": "2022-06-05 15:14:32 -0400", "message": "Issue2650 (#2653)"}, {"oid": "f21f35950fe465cfbf135d06cc8ae2321a29513a", "committedDate": "2023-02-04 15:34:06 -0600", "message": "Elide 7.x (#2876)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUwMjQzMQ==", "url": "https://github.com/yahoo/elide/pull/1367#discussion_r439502431", "body": "Because the signatures are the same, you may be able to define this once as a Function rather than the concrete types above - and just use the single reference below.", "bodyText": "Because the signatures are the same, you may be able to define this once as a Function rather than the concrete types above - and just use the single reference below.", "bodyHTML": "<p dir=\"auto\">Because the signatures are the same, you may be able to define this once as a Function rather than the concrete types above - and just use the single reference below.</p>", "author": "aklish", "createdAt": "2020-06-12T15:54:01Z", "path": "elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java", "diffHunk": "@@ -56,6 +58,10 @@\n      * @return An instance of ElideDynamicEntityCompiler.\n      * @throws Exception Exception thrown.\n      */\n+\n+     private final AbstractJpaTransaction.JpaTransactionCancel jTC = (e) -> { e.unwrap(Session.class).cancelQuery(); };", "originalCommit": "43ce9e801ed051344593d1af60db17481904b045", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8f1cfb480ee2db34373cee4ca35e5eef6b339a51", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\nindex 859b84d88..3e7fd6fe7 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n", "chunk": "@@ -61,6 +61,7 @@ public class ElideAutoConfiguration {\n \n      private final AbstractJpaTransaction.JpaTransactionCancel jTC = (e) -> { e.unwrap(Session.class).cancelQuery(); };\n      private final SQLQueryEngine.TransactionCancel txCancel = (em) -> { em.unwrap(Session.class).cancelQuery(); };\n+     //public final Function<AbstractJpaTransaction.JpaTransactionCancel, Void> FUNC = (em) -> { em.unwrap(Session.class).cancelQuery(); };\n \n     @Bean\n     @ConditionalOnMissingBean\n", "next_change": {"commit": "d7556cb189b6e83070942c10bdaf33054ecc0f71", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\nindex 3e7fd6fe7..6d992dade 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n", "chunk": "@@ -59,9 +60,7 @@ public class ElideAutoConfiguration {\n      * @throws Exception Exception thrown.\n      */\n \n-     private final AbstractJpaTransaction.JpaTransactionCancel jTC = (e) -> { e.unwrap(Session.class).cancelQuery(); };\n-     private final SQLQueryEngine.TransactionCancel txCancel = (em) -> { em.unwrap(Session.class).cancelQuery(); };\n-     //public final Function<AbstractJpaTransaction.JpaTransactionCancel, Void> FUNC = (em) -> { em.unwrap(Session.class).cancelQuery(); };\n+     private final Consumer<EntityManager> func = (em) -> { em.unwrap(Session.class).cancelQuery(); };\n \n     @Bean\n     @ConditionalOnMissingBean\n", "next_change": {"commit": "127517bb46972dbe127cfd5e32d70439aa385381", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\nindex 6d992dade..bf98cbb1f 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n", "chunk": "@@ -60,7 +60,7 @@ public class ElideAutoConfiguration {\n      * @throws Exception Exception thrown.\n      */\n \n-     private final Consumer<EntityManager> func = (em) -> { em.unwrap(Session.class).cancelQuery(); };\n+     private final Consumer<EntityManager> txCancel = (em) -> { em.unwrap(Session.class).cancelQuery(); };\n \n     @Bean\n     @ConditionalOnMissingBean\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "ff86c56fde9064e1719ea35660fd04c42c949662", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\nindex 859b84d88..bf98cbb1f 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n", "chunk": "@@ -59,8 +60,7 @@ public class ElideAutoConfiguration {\n      * @throws Exception Exception thrown.\n      */\n \n-     private final AbstractJpaTransaction.JpaTransactionCancel jTC = (e) -> { e.unwrap(Session.class).cancelQuery(); };\n-     private final SQLQueryEngine.TransactionCancel txCancel = (em) -> { em.unwrap(Session.class).cancelQuery(); };\n+     private final Consumer<EntityManager> txCancel = (em) -> { em.unwrap(Session.class).cancelQuery(); };\n \n     @Bean\n     @ConditionalOnMissingBean\n", "next_change": {"commit": "bd516473fbeeb47ca05eaf510734f06432c4280a", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\nindex bf98cbb1f..ccd2fa78e 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n", "chunk": "@@ -50,30 +35,8 @@ import javax.persistence.EntityManagerFactory;\n  */\n @Configuration\n @EnableConfigurationProperties(ElideConfigProperties.class)\n-@Slf4j\n public class ElideAutoConfiguration {\n \n-    /**\n-     * Creates a entity compiler for compiling dynamic config classes.\n-     * @param settings Config Settings.\n-     * @return An instance of ElideDynamicEntityCompiler.\n-     * @throws Exception Exception thrown.\n-     */\n-\n-     private final Consumer<EntityManager> txCancel = (em) -> { em.unwrap(Session.class).cancelQuery(); };\n-\n-    @Bean\n-    @ConditionalOnMissingBean\n-    public ElideDynamicEntityCompiler buildElideDynamicEntityCompiler(ElideConfigProperties settings) throws Exception {\n-\n-        ElideDynamicEntityCompiler compiler = null;\n-\n-        if (isDynamicConfigEnabled(settings)) {\n-            compiler = new ElideDynamicEntityCompiler(settings.getDynamicConfig().getPath());\n-        }\n-        return compiler;\n-    }\n-\n     /**\n      * Creates the Elide instance with standard settings.\n      * @param dictionary Stores the static metadata about Elide models.\n", "next_change": {"commit": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\nindex ccd2fa78e..102e34fbf 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n", "chunk": "@@ -35,8 +47,27 @@ import javax.persistence.EntityManagerFactory;\n  */\n @Configuration\n @EnableConfigurationProperties(ElideConfigProperties.class)\n+@Slf4j\n public class ElideAutoConfiguration {\n \n+    /**\n+     * Creates a entity compiler for compiling dynamic config classes.\n+     * @param settings Config Settings.\n+     * @return An instance of ElideDynamicEntityCompiler.\n+     * @throws Exception Exception thrown.\n+     */\n+    @Bean\n+    @ConditionalOnMissingBean\n+    public ElideDynamicEntityCompiler buildElideDynamicEntityCompiler(ElideConfigProperties settings) throws Exception {\n+\n+        ElideDynamicEntityCompiler compiler = null;\n+\n+        if (settings.getDynamicConfig().isEnabled()) {\n+            compiler = new ElideDynamicEntityCompiler(settings.getDynamicConfig().getPath());\n+        }\n+        return compiler;\n+    }\n+\n     /**\n      * Creates the Elide instance with standard settings.\n      * @param dictionary Stores the static metadata about Elide models.\n", "next_change": {"commit": "ca35ad817f2fde68b2f9c39d0d4d9c9d44ebffd5", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\nindex 102e34fbf..bb259e966 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n", "chunk": "@@ -50,24 +66,49 @@ import javax.persistence.EntityManagerFactory;\n @Slf4j\n public class ElideAutoConfiguration {\n \n+    @Autowired(required = false)\n+    private MeterRegistry meterRegistry;\n+\n+    private final Consumer<EntityManager> txCancel = (em) -> { em.unwrap(Session.class).cancelQuery(); };\n+\n     /**\n      * Creates a entity compiler for compiling dynamic config classes.\n      * @param settings Config Settings.\n+     * @param dbPasswordExtractor : Password Extractor Implementation.\n      * @return An instance of ElideDynamicEntityCompiler.\n      * @throws Exception Exception thrown.\n      */\n     @Bean\n     @ConditionalOnMissingBean\n-    public ElideDynamicEntityCompiler buildElideDynamicEntityCompiler(ElideConfigProperties settings) throws Exception {\n+    @ConditionalOnProperty(name = \"elide.aggregation-store.enabled\", havingValue = \"true\")\n+    public ElideDynamicEntityCompiler buildElideDynamicEntityCompiler(ElideConfigProperties settings,\n+                    DBPasswordExtractor dbPasswordExtractor) throws Exception {\n \n         ElideDynamicEntityCompiler compiler = null;\n \n-        if (settings.getDynamicConfig().isEnabled()) {\n-            compiler = new ElideDynamicEntityCompiler(settings.getDynamicConfig().getPath());\n+        if (isDynamicConfigEnabled(settings)) {\n+            compiler = new ElideDynamicEntityCompiler(settings.getDynamicConfig().getPath(), dbPasswordExtractor);\n         }\n         return compiler;\n     }\n \n+    /**\n+     * Creates the default Password Extractor Implementation.\n+     * @return An instance of DBPasswordExtractor.\n+     */\n+    @Bean\n+    @ConditionalOnMissingBean\n+    @ConditionalOnProperty(name = \"elide.aggregation-store.enabled\", havingValue = \"true\")\n+    public DBPasswordExtractor getDBPasswordExtractor() {\n+\n+        return new DBPasswordExtractor() {\n+            @Override\n+            public String getDBPassword(DBConfig config) {\n+                return StringUtils.EMPTY;\n+            }\n+        };\n+    }\n+\n     /**\n      * Creates the Elide instance with standard settings.\n      * @param dictionary Stores the static metadata about Elide models.\n", "next_change": {"commit": "bea43ef0f244ba01c2f7d4216b9f08f0ef4e83a4", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\nindex bb259e966..11d4054e0 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n", "chunk": "@@ -109,6 +109,18 @@ public class ElideAutoConfiguration {\n         };\n     }\n \n+    /**\n+     * Provides the default Hikari DataSource Configuration.\n+     * @return An instance of DataSourceConfiguration.\n+     */\n+    @Bean\n+    @ConditionalOnMissingBean\n+    @ConditionalOnProperty(name = \"elide.aggregation-store.enabled\", havingValue = \"true\")\n+    public DataSourceConfiguration getDataSourceConfiguration() {\n+        return new DataSourceConfiguration() {\n+        };\n+    }\n+\n     /**\n      * Creates the Elide instance with standard settings.\n      * @param dictionary Stores the static metadata about Elide models.\n", "next_change": {"commit": "c38eb980af7f953202cb53faaed14595d3709ed9", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\nindex 11d4054e0..5ef33d35f 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n", "chunk": "@@ -125,41 +152,124 @@ public class ElideAutoConfiguration {\n      * Creates the Elide instance with standard settings.\n      * @param dictionary Stores the static metadata about Elide models.\n      * @param dataStore The persistence store.\n+     * @param transactionRegistry Global transaction registry.\n      * @param settings Elide settings.\n      * @return A new elide instance.\n      */\n     @Bean\n+    @RefreshScope\n     @ConditionalOnMissingBean\n-    public Elide initializeElide(EntityDictionary dictionary,\n-            DataStore dataStore, ElideConfigProperties settings) {\n+    public RefreshableElide getRefreshableElide(EntityDictionary dictionary,\n+                                                DataStore dataStore,\n+                                                TransactionRegistry transactionRegistry,\n+                                                ElideConfigProperties settings,\n+                                                JsonApiMapper mapper,\n+                                                ErrorMapper errorMapper) {\n \n         ElideSettingsBuilder builder = new ElideSettingsBuilder(dataStore)\n                 .withEntityDictionary(dictionary)\n+                .withErrorMapper(errorMapper)\n+                .withJsonApiMapper(mapper)\n                 .withDefaultMaxPageSize(settings.getMaxPageSize())\n                 .withDefaultPageSize(settings.getPageSize())\n-                .withJoinFilterDialect(new RSQLFilterDialect(dictionary))\n-                .withSubqueryFilterDialect(new RSQLFilterDialect(dictionary))\n+                .withJoinFilterDialect(RSQLFilterDialect.builder().dictionary(dictionary).build())\n+                .withSubqueryFilterDialect(RSQLFilterDialect.builder().dictionary(dictionary).build())\n                 .withAuditLogger(new Slf4jLogger())\n-                .withISO8601Dates(\"yyyy-MM-dd'T'HH:mm'Z'\", TimeZone.getTimeZone(\"UTC\"));\n+                .withBaseUrl(settings.getBaseUrl())\n+                .withISO8601Dates(\"yyyy-MM-dd'T'HH:mm'Z'\", TimeZone.getTimeZone(\"UTC\"))\n+                .withJsonApiPath(settings.getJsonApi().getPath())\n+                .withGraphQLApiPath(settings.getGraphql().getPath());\n+\n+        if (settings.isVerboseErrors()) {\n+            builder.withVerboseErrors();\n+        }\n+\n+        if (settings.getAsync() != null\n+                && settings.getAsync().getExport() != null\n+                && settings.getAsync().getExport().isEnabled()) {\n+            builder.withExportApiPath(settings.getAsync().getExport().getPath());\n+        }\n \n-        return new Elide(builder.build());\n+        if (settings.getJsonApi() != null\n+                && settings.getJsonApi().isEnabled()\n+                && settings.getJsonApi().isEnableLinks()) {\n+            String baseUrl = settings.getBaseUrl();\n+\n+            if (StringUtils.isEmpty(baseUrl)) {\n+                builder.withJSONApiLinks(new DefaultJSONApiLinks());\n+            } else {\n+                String jsonApiBaseUrl = baseUrl + settings.getJsonApi().getPath() + \"/\";\n+                builder.withJSONApiLinks(new DefaultJSONApiLinks(jsonApiBaseUrl));\n+            }\n+        }\n+\n+        Elide elide = new Elide(builder.build(), transactionRegistry, dictionary.getScanner(), true);\n+\n+        return new RefreshableElide(elide);\n+    }\n+\n+    @Bean\n+    @RefreshScope\n+    @ConditionalOnMissingBean\n+    public QueryRunners getQueryRunners(RefreshableElide refreshableElide) {\n+        return new QueryRunners(refreshableElide);\n+    }\n+\n+    /**\n+     * A Set containing Types to be excluded from EntityDictionary's EntityBinding.\n+     * @param settings Elide configuration settings.\n+     * @return Set of Types.\n+     */\n+    @Bean(name = \"entitiesToExclude\")\n+    @ConditionalOnMissingBean\n+    public Set<Type<?>> getEntitiesToExclude(ElideConfigProperties settings) {\n+        Set<Type<?>> entitiesToExclude = new HashSet<>();\n+\n+        AsyncProperties asyncProperties = settings.getAsync();\n+\n+        if (asyncProperties == null || !asyncProperties.isEnabled()) {\n+            entitiesToExclude.add(ClassType.of(AsyncQuery.class));\n+        }\n+\n+        boolean exportEnabled = isExportEnabled(asyncProperties);\n+\n+        if (!exportEnabled) {\n+            entitiesToExclude.add(ClassType.of(TableExport.class));\n+        }\n+\n+        return entitiesToExclude;\n     }\n \n     /**\n      * Creates the entity dictionary for Elide which contains static metadata about Elide models.\n      * Override to load check classes or life cycle hooks.\n      * @param beanFactory Injector to inject Elide models.\n-     * @param dynamicCompiler An instance of objectprovider for ElideDynamicEntityCompiler.\n+     * @param dynamicConfig An instance of DynamicConfiguration.\n      * @param settings Elide configuration settings.\n+     * @param entitiesToExclude set of Entities to exclude from binding.\n      * @return a newly configured EntityDictionary.\n-     * @throws ClassNotFoundException Exception thrown.\n      */\n     @Bean\n     @ConditionalOnMissingBean\n+    @Scope(SCOPE_PROTOTYPE)\n     public EntityDictionary buildDictionary(AutowireCapableBeanFactory beanFactory,\n-            ObjectProvider<ElideDynamicEntityCompiler> dynamicCompiler, ElideConfigProperties settings)\n-            throws ClassNotFoundException {\n-        EntityDictionary dictionary = new EntityDictionary(new HashMap<>(),\n+                                            ClassScanner scanner,\n+                                            @Autowired(required = false) DynamicConfiguration dynamicConfig,\n+                                            ElideConfigProperties settings,\n+                                            @Qualifier(\"entitiesToExclude\") Set<Type<?>> entitiesToExclude) {\n+\n+        Map<String, Class<? extends Check>> checks = new HashMap<>();\n+\n+        if (settings.getDynamicConfig().isConfigApiEnabled()) {\n+            checks.put(ConfigChecks.CAN_CREATE_CONFIG, ConfigChecks.CanNotCreate.class);\n+            checks.put(ConfigChecks.CAN_READ_CONFIG, ConfigChecks.CanNotRead.class);\n+            checks.put(ConfigChecks.CAN_DELETE_CONFIG, ConfigChecks.CanNotDelete.class);\n+            checks.put(ConfigChecks.CAN_UPDATE_CONFIG, ConfigChecks.CanNotUpdate.class);\n+        }\n+\n+        EntityDictionary dictionary = new EntityDictionary(\n+                checks, //Checks\n+                new HashMap<>(), //Role Checks\n                 new Injector() {\n                     @Override\n                     public void inject(Object entity) {\n", "next_change": {"commit": "8adc4439ded747d4dd1191ad5fed6131bde39cb6", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\nindex 5ef33d35f..d32384a4b 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n", "chunk": "@@ -270,17 +313,7 @@ public class ElideAutoConfiguration {\n         EntityDictionary dictionary = new EntityDictionary(\n                 checks, //Checks\n                 new HashMap<>(), //Role Checks\n-                new Injector() {\n-                    @Override\n-                    public void inject(Object entity) {\n-                        beanFactory.autowireBean(entity);\n-                    }\n-\n-                    @Override\n-                    public <T> T instantiate(Class<T> cls) {\n-                        return beanFactory.createBean(cls);\n-                    }\n-                },\n+                injector,\n                 CoerceUtil::lookup, //Serde Lookup\n                 entitiesToExclude,\n                 scanner);\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "ff86c56fde9064e1719ea35660fd04c42c949662", "message": "Merge commit", "committedDate": null}, {"oid": "bd516473fbeeb47ca05eaf510734f06432c4280a", "committedDate": "2020-06-03 09:09:44 -0500", "message": "Disabling Legacy Filter Dialect in Swagger Documentation (#1363)"}, {"oid": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "parent a14ccfbb7b558d27799b4e7b1916850519639708 author Jack (\uc815\ud658) <QubitPi@users.noreply.github.com> 1559678988 -0700 committer Aaron Klish <klish@verizonmedia.com> 1589583449 -0500"}, {"oid": "b55b769236519aa81a171321c14ee0ac8315908f", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Async ID change from UUID to String and Dynamic Config FIx (#1325)"}, {"oid": "81dde7567aa8a6a00822a9a8f0bf901806a962e8", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add caching support to SQLQueryEngine (#1319)"}, {"oid": "9c897058ce0b9656bf2aef2318d0addc474f278a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "implement cancel function (#1367)"}, {"oid": "9ff0eb6bfa7f8f0135d21cf68cb1e44c5d515d91", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Enable query caching by default (#1378)"}, {"oid": "9c8fe001d36753349ad1f7df83029e1c8d8edcac", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Multiplex Transaction Lazy Initialize and Dynamic Config fixes (#1383)"}, {"oid": "d31cff91c7452ae4b07bcc2006b70f15474b4198", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Fixes for query cache spring integration (#1381)"}, {"oid": "8fece2b8f1b3078ce2598ddb03dca66bb984df46", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Aggregation DataStore QueryLogger Implementation (#1448)"}, {"oid": "7c8fece25f8dddbe975f0072bf0267def2610ff4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Disable Aggregation DataStore by default (#1468)"}, {"oid": "5c065ad65fcda862269b5e31a8b6dc5d8c828aaa", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Data export - Refactoring and Prep for using ResultStorageEngine (#1527)"}, {"oid": "ca35ad817f2fde68b2f9c39d0d4d9c9d44ebffd5", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Query Engine and Aggregation Store Changes for Multi Data Source Support (#1523)"}, {"oid": "b8d0918e2f6f438eda12c12e58354a8cad3719dd", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Added item expiration to AggregationDataStore cache (#1564)"}, {"oid": "1933cc3eb6788be5fce69b1d97c6ae589623495f", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add slf4j query logger (#1618)"}, {"oid": "26bef0c192b549ed701287814055e5e7ac175a50", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Collapsed contrib directory into top level modules (#1670)"}, {"oid": "49e61867e840d9818993879436d5db1aad964c9a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Move data store interfaces (#1671)"}, {"oid": "911d29408bdeeb4ff8d78f2beea2417be4e7c673", "committedDate": "2020-12-11 16:20:28 -0600", "message": "cleaned up package hierarchy for elide-core (#1672)"}, {"oid": "c14096bec256faf80e7674fbef22bccff1f955a3", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Moved contrib.dynamicconfighelpers to modelconfig package (#1676)"}, {"oid": "800ba874c21672a727aed4e1beacb294bfb5022e", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5.x MetaDataStore enable/disable flag (#1696)"}, {"oid": "bea43ef0f244ba01c2f7d4216b9f08f0ef4e83a4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Optionally compile hjson configs while running CLI (#1693)"}, {"oid": "7dcb449ad9bf24c3c12601209803a0f05420e380", "committedDate": "2021-01-07 23:13:06 -0600", "message": "Only build swagger if the controller is activated"}, {"oid": "6ce117b6c68f6a2fc484e3c9ba7b76ace9c596ff", "committedDate": "2021-01-08 17:36:00 -0600", "message": "Added baseUrl configuration setting for Spring and Standalone"}, {"oid": "4641781684344dd25e47bdbe1a8aa6f28881d627", "committedDate": "2021-01-12 09:00:58 -0600", "message": "Added a new setting to Spring to enable/disable JSON-API links"}, {"oid": "79b23531edc46cebc43e889d7ac4727540a72105", "committedDate": "2021-01-19 14:16:37 -0600", "message": "Syntax Fixes"}, {"oid": "de9883d363ba8b4171be5d8ad508564664f6fc90", "committedDate": "2021-01-19 14:16:37 -0600", "message": "Review comments"}, {"oid": "fe3198d3cacec95d4b064ccae7109874e58d9e96", "committedDate": "2021-01-20 10:43:28 -0600", "message": "Review Comments"}, {"oid": "bca9aca28661c202a018a1c929ea888eaf8d83c7", "committedDate": "2021-01-20 10:43:28 -0600", "message": "Review Comments"}, {"oid": "93ebb969254204bd315de860bd064ca77e70cfab", "committedDate": "2021-01-29 11:36:47 -0500", "message": "TableExportHook Binding (#1802)"}, {"oid": "dcb6336070c158b923a8e5a7ec92502ea57f36ee", "committedDate": "2021-02-09 10:45:00 -0600", "message": "Add dynamic table type (#1815)"}, {"oid": "d77f1240a3fa5abf824aea54d0533be844235359", "committedDate": "2021-02-11 10:18:49 -0600", "message": "Created new interface for dynamic configuration (#1830)"}, {"oid": "af0aad2498f81659177eff1bbcfbf49213baf7b9", "committedDate": "2021-02-15 13:19:22 -0500", "message": "Exclude Models based on Conditions (#1835)"}, {"oid": "2eb90f1b8513e246930e5419e838b3fb1f7bbb98", "committedDate": "2021-02-18 11:42:05 -0600", "message": "Integration Tests for Table Export (#1842)"}, {"oid": "e2005d6babde1a0da3ba66fc507fc6ecf5773052", "committedDate": "2021-02-22 10:34:54 -0600", "message": "Cleanup unnecessary syntax (#1854)"}, {"oid": "6c97725cec25be900fd1466f627d3d0e722ed508", "committedDate": "2021-03-09 15:24:33 -0600", "message": "Add experimental n plus1 improvement (#1876)"}, {"oid": "8274a6341e06c7201049e8e8f0a48f07bd99a0ef", "committedDate": "2021-03-10 16:38:34 -0600", "message": "Cleanup IDE warnings (#1894)"}, {"oid": "c19d8c2237e960d792dc2ef6375356433b4fac21", "committedDate": "2021-03-11 17:10:26 -0600", "message": "Classtype cleanup (#1905)"}, {"oid": "e1e07dbeabb690560754c84200b67e7a8d4d9229", "committedDate": "2021-03-22 09:06:06 -0500", "message": "Part 4 of Query Plan Optimization : Fix Metric Nesting (#1924)"}, {"oid": "ed941827e1027083367b4df9794501909279c667", "committedDate": "2021-03-25 22:55:35 -0400", "message": "diamonds to reduce duplication (#1947)"}, {"oid": "dc7a367e14c9f43b2d013f5037341055a29f0491", "committedDate": "2021-03-26 10:31:26 -0400", "message": "Issue 1929 - Address Sonar suggestions (#1925)"}, {"oid": "43598e8411d544b31d9807ded4f248e25ef334a4", "committedDate": "2021-04-01 17:32:17 -0500", "message": "Add Table Level Query Hints (#1981)"}, {"oid": "98f612f023448a93324aaed11e00d6d4fa730c74", "committedDate": "2021-04-08 22:39:32 -0400", "message": "Issue 1929 - Clean up code quality (#1964)"}, {"oid": "6143d108eb7b1a2250370409d5362c6722c95b23", "committedDate": "2021-04-26 16:28:58 -0500", "message": "Cleanup (#2026)"}, {"oid": "ea57369f2b8af263efd9de99bfe59cae1b88202a", "committedDate": "2021-04-29 21:02:18 -0500", "message": "Test Cases + Enable Namespace in Standalone and Spring (#2040)"}, {"oid": "b911028feb3655bb897041047caa7602f3f0c761", "committedDate": "2021-05-02 21:51:37 -0500", "message": "Add missing default values for ElideAutoConfiguration (#2052)"}, {"oid": "0a3776bacb5809845d9a04a1263db9760f117b92", "committedDate": "2021-05-13 13:25:15 -0500", "message": "Injection Protection for parameterized metrics/dimensions (#2090)"}, {"oid": "c55eca8c6cc828610faf39d0ea62d2a0a897696b", "committedDate": "2021-08-05 09:52:57 -0500", "message": "Add simple configuration to enable verbose errors. (#2236)"}, {"oid": "fe7009353573baf0206f7bb58617db97e067f900", "committedDate": "2021-09-02 11:31:12 -0500", "message": "Refactor class scanning for quarkus (#2284)"}, {"oid": "65eaaa12fc2b805135285287d4912d2329bc676d", "committedDate": "2021-09-13 14:02:45 -0500", "message": "Add ability to map unknown exceptions to custom exceptions (#2205)"}, {"oid": "6a319f244f5b611d3702e46013c5f8c988b5a957", "committedDate": "2021-09-30 13:42:41 -0500", "message": "GraphQL Subscriptions: Part 5 (#2308)"}, {"oid": "64325a03c2d0e965e2543c3c52a9ddc0de570c03", "committedDate": "2021-10-07 14:58:50 -0500", "message": "Aggregation Store: Relaxing rules for how filter templates are compared against filter e\u2026 (#2329)"}, {"oid": "5064f8a5a351b1f77b8025f68b20efc1b76d101e", "committedDate": "2021-10-19 11:25:38 -0500", "message": "Elide 6 : Refactor DataStoreTransaction Interface. (#2334)"}, {"oid": "54cdcb9fe67225cd463e1bf9357f0e1d2a42c152", "committedDate": "2021-12-02 15:11:51 -0600", "message": "HJSON Configuration Models and DataStore (#2418)"}, {"oid": "d554658425300df2210df1e67110f0b7588633e0", "committedDate": "2022-01-05 15:50:55 -0600", "message": "Enable lifecycle, check, and other entity scans by default for Spring. (#2470)"}, {"oid": "c38eb980af7f953202cb53faaed14595d3709ed9", "committedDate": "2022-01-21 10:03:29 -0600", "message": "Refresh scope beans (#2409)"}, {"oid": "d0552c5750608391d52e3e3286469901726a7d06", "committedDate": "2022-01-28 16:02:28 -0600", "message": "Support filters on query plans (#2526)"}, {"oid": "abb32869ab0e97b8ceaa1bd61b53c579b4ca1c65", "committedDate": "2022-04-22 15:17:21 -0500", "message": "Header filtering config (#2627)"}, {"oid": "8adc4439ded747d4dd1191ad5fed6131bde39cb6", "committedDate": "2022-04-26 16:56:53 -0500", "message": "Add Injector Bean (#2637)"}, {"oid": "af3e1d9d64479e3ca0f5141bec8b906843d11248", "committedDate": "2022-05-05 21:14:51 -0500", "message": "Minimum to expose _service.sdl for Apollo federation. (#2640)"}, {"oid": "c0a0f0ad9a1a9bbb9938e3225f27b2d191b82e79", "committedDate": "2022-09-15 21:47:40 -0500", "message": "Only build query runner if graphQL is enabled (#2766)"}, {"oid": "f03aba8c1f854a9c0c286fad97c30d2fed5ffe08", "committedDate": "2022-09-22 18:59:56 -0500", "message": "Allow elide-graphql to be excluded when elide.graphql.enabled=false (#2787)"}, {"oid": "f21f35950fe465cfbf135d06cc8ae2321a29513a", "committedDate": "2023-02-04 15:34:06 -0600", "message": "Elide 7.x (#2876)"}, {"oid": "119ea75d9ad68b27361326e9837ef1627afd3169", "committedDate": "2023-03-20 18:16:04 -0500", "message": "Fixes #2912 (#2931)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUwMjk0NA==", "url": "https://github.com/yahoo/elide/pull/1367#discussion_r439502944", "body": "Remove txCancel from the supplier.", "bodyText": "Remove txCancel from the supplier.", "bodyHTML": "<p dir=\"auto\">Remove txCancel from the supplier.</p>", "author": "aklish", "createdAt": "2020-06-12T15:54:59Z", "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java", "diffHunk": "@@ -376,10 +382,10 @@ default AuditLogger getAuditLogger() {\n      */\n     default DataStore getDataStore(MetaDataStore metaDataStore, AggregationDataStore aggregationDataStore,\n             EntityManagerFactory entityManagerFactory) {\n-\n         DataStore jpaDataStore = new JpaDataStore(\n                 () -> { return entityManagerFactory.createEntityManager(); },\n-                (em -> { return new NonJtaTransaction(em); }));\n+                ((em, txCancel) -> { return new NonJtaTransaction(em, txCancel); }),", "originalCommit": "43ce9e801ed051344593d1af60db17481904b045", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8f1cfb480ee2db34373cee4ca35e5eef6b339a51", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 7cb6ff25e..28faa41df 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -384,8 +386,7 @@ public interface ElideStandaloneSettings {\n             EntityManagerFactory entityManagerFactory) {\n         DataStore jpaDataStore = new JpaDataStore(\n                 () -> { return entityManagerFactory.createEntityManager(); },\n-                ((em, txCancel) -> { return new NonJtaTransaction(em, txCancel); }),\n-                JTC);\n+                (em) -> { return new NonJtaTransaction(em, JTC); } );\n \n         DataStore dataStore = new MultiplexManager(jpaDataStore, metaDataStore, aggregationDataStore);\n \n", "next_change": {"commit": "d7556cb189b6e83070942c10bdaf33054ecc0f71", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 28faa41df..7e16c486e 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -386,7 +383,7 @@ public interface ElideStandaloneSettings {\n             EntityManagerFactory entityManagerFactory) {\n         DataStore jpaDataStore = new JpaDataStore(\n                 () -> { return entityManagerFactory.createEntityManager(); },\n-                (em) -> { return new NonJtaTransaction(em, JTC); } );\n+                (em) -> { return new NonJtaTransaction(em, FUNC); });\n \n         DataStore dataStore = new MultiplexManager(jpaDataStore, metaDataStore, aggregationDataStore);\n \n", "next_change": {"commit": "127517bb46972dbe127cfd5e32d70439aa385381", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 7e16c486e..7e9a2aeb8 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -383,7 +383,7 @@ public interface ElideStandaloneSettings {\n             EntityManagerFactory entityManagerFactory) {\n         DataStore jpaDataStore = new JpaDataStore(\n                 () -> { return entityManagerFactory.createEntityManager(); },\n-                (em) -> { return new NonJtaTransaction(em, FUNC); });\n+                (em) -> { return new NonJtaTransaction(em, TXCANCEL); });\n \n         DataStore dataStore = new MultiplexManager(jpaDataStore, metaDataStore, aggregationDataStore);\n \n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "ff86c56fde9064e1719ea35660fd04c42c949662", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 7cb6ff25e..7e9a2aeb8 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -384,8 +383,7 @@ public interface ElideStandaloneSettings {\n             EntityManagerFactory entityManagerFactory) {\n         DataStore jpaDataStore = new JpaDataStore(\n                 () -> { return entityManagerFactory.createEntityManager(); },\n-                ((em, txCancel) -> { return new NonJtaTransaction(em, txCancel); }),\n-                JTC);\n+                (em) -> { return new NonJtaTransaction(em, TXCANCEL); });\n \n         DataStore dataStore = new MultiplexManager(jpaDataStore, metaDataStore, aggregationDataStore);\n \n", "next_change": {"commit": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 7e9a2aeb8..00b641dbb 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -345,147 +285,11 @@ public interface ElideStandaloneSettings {\n     }\n \n     /**\n-     * Gets the audit logger for elide.\n+     * Gets the audit logger for elide\n      *\n      * @return Default: Slf4jLogger\n      */\n     default AuditLogger getAuditLogger() {\n         return new Slf4jLogger();\n     }\n-\n-    /**\n-     * Gets the dynamic compiler for elide.\n-     *\n-     * @return Optional ElideDynamicEntityCompiler\n-     */\n-    default Optional<ElideDynamicEntityCompiler> getDynamicCompiler() {\n-        ElideDynamicEntityCompiler dynamicEntityCompiler = null;\n-\n-        if (enableDynamicModelConfig()) {\n-            try {\n-                dynamicEntityCompiler = new ElideDynamicEntityCompiler(getDynamicConfigPath());\n-            } catch (Exception e) { // thrown by in memory compiler\n-                throw new IllegalStateException(e);\n-            }\n-        }\n-\n-        return Optional.ofNullable(dynamicEntityCompiler);\n-    }\n-\n-    /**\n-     * Gets the DataStore for elide.\n-     * @param metaDataStore MetaDataStore object.\n-     * @param aggregationDataStore AggregationDataStore object.\n-     * @param entityManagerFactory EntityManagerFactory object.\n-     * @return EntityDictionary object initialized.\n-     */\n-    default DataStore getDataStore(MetaDataStore metaDataStore, AggregationDataStore aggregationDataStore,\n-            EntityManagerFactory entityManagerFactory) {\n-        DataStore jpaDataStore = new JpaDataStore(\n-                () -> { return entityManagerFactory.createEntityManager(); },\n-                (em) -> { return new NonJtaTransaction(em, TXCANCEL); });\n-\n-        DataStore dataStore = new MultiplexManager(jpaDataStore, metaDataStore, aggregationDataStore);\n-\n-        return dataStore;\n-    }\n-\n-    /**\n-     * Gets the AggregationDataStore for elide.\n-     * @param queryEngine query engine object.\n-     * @param optionalCompiler optional dynamic compiler object.\n-     * @return AggregationDataStore object initialized.\n-     */\n-    default AggregationDataStore getAggregationDataStore(QueryEngine queryEngine,\n-            Optional<ElideDynamicEntityCompiler> optionalCompiler) {\n-        AggregationDataStore.AggregationDataStoreBuilder aggregationDataStoreBuilder = AggregationDataStore.builder()\n-                .queryEngine(queryEngine);\n-\n-        if (enableDynamicModelConfig()) {\n-            Set<Class<?>> annotatedClasses = getDynamicClassesIfAvailable(optionalCompiler, FromTable.class);\n-            annotatedClasses.addAll(getDynamicClassesIfAvailable(optionalCompiler, FromSubquery.class));\n-            aggregationDataStoreBuilder.dynamicCompiledClasses(annotatedClasses);\n-        }\n-        return aggregationDataStoreBuilder.build();\n-    }\n-\n-    /**\n-     * Gets the EntityDictionary for elide.\n-     * @param injector Service locator for web service for dependency injection.\n-     * @param optionalCompiler optional dynamic compiler object.\n-     * @return EntityDictionary object initialized.\n-     */\n-    default EntityDictionary getEntityDictionary(ServiceLocator injector,\n-            Optional<ElideDynamicEntityCompiler> optionalCompiler) {\n-        EntityDictionary dictionary = new EntityDictionary(getCheckMappings(),\n-                new Injector() {\n-                    @Override\n-                    public void inject(Object entity) {\n-                        injector.inject(entity);\n-                    }\n-\n-                    @Override\n-                    public <T> T instantiate(Class<T> cls) {\n-                        return injector.create(cls);\n-                    }\n-                });\n-\n-        dictionary.scanForSecurityChecks();\n-\n-        Set<Class<?>> annotatedSecurityClasses = getDynamicClassesIfAvailable(optionalCompiler, SecurityCheck.class);\n-\n-        dictionary.addSecurityChecks(annotatedSecurityClasses);\n-\n-        return dictionary;\n-    }\n-\n-    /**\n-     * Gets the metadatastore for elide.\n-     * @param optionalCompiler optional dynamic compiler object.\n-     * @return MetaDataStore object initialized.\n-     */\n-    default MetaDataStore getMetaDataStore(Optional<ElideDynamicEntityCompiler> optionalCompiler) {\n-        MetaDataStore metaDataStore = null;\n-\n-        if (optionalCompiler.isPresent()) {\n-            try {\n-                metaDataStore = new MetaDataStore(optionalCompiler.get());\n-            } catch (ClassNotFoundException e) {\n-                throw new IllegalStateException(e);\n-            }\n-        } else {\n-            metaDataStore = new MetaDataStore();\n-        }\n-\n-        return metaDataStore;\n-    }\n-\n-    /**\n-     * Gets the QueryEngine for elide.\n-     * @param metaDataStore MetaDataStore object.\n-     * @param entityManagerFactory EntityManagerFactory object.\n-     * @return QueryEngine object initialized.\n-     */\n-    default QueryEngine getQueryEngine(MetaDataStore metaDataStore, EntityManagerFactory entityManagerFactory) {\n-        return new SQLQueryEngine(metaDataStore, entityManagerFactory, TXCANCEL);\n-    }\n-\n-    static Set<Class<?>> getDynamicClassesIfAvailable(Optional<ElideDynamicEntityCompiler> optionalCompiler,\n-            Class<?> classz) {\n-        Set<Class<?>> annotatedClasses = new HashSet<Class<?>>();\n-\n-        if (!optionalCompiler.isPresent()) {\n-            return annotatedClasses;\n-        }\n-\n-        ElideDynamicEntityCompiler compiler = optionalCompiler.get();\n-\n-        try {\n-            annotatedClasses = compiler.findAnnotatedClasses(classz);\n-        } catch (ClassNotFoundException e) {\n-            throw new IllegalStateException(e);\n-        }\n-\n-        return annotatedClasses;\n-    }\n }\n", "next_change": {"commit": "95b3031194e0e0f2394228d6a6525a80f13fef04", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 00b641dbb..8bda402cd 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -285,11 +340,150 @@ public interface ElideStandaloneSettings {\n     }\n \n     /**\n-     * Gets the audit logger for elide\n+     * Gets the audit logger for elide.\n      *\n      * @return Default: Slf4jLogger\n      */\n     default AuditLogger getAuditLogger() {\n         return new Slf4jLogger();\n     }\n+\n+    /**\n+     * Gets the dynamic compiler for elide.\n+     *\n+     * @return Optional ElideDynamicEntityCompiler\n+     */\n+    default Optional<ElideDynamicEntityCompiler> getDynamicCompiler() {\n+        ElideDynamicEntityCompiler dynamicEntityCompiler = null;\n+\n+        if (enableDynamicModelConfig()) {\n+            try {\n+                dynamicEntityCompiler = new ElideDynamicEntityCompiler(getDynamicConfigPath());\n+            } catch (Exception e) { // thrown by in memory compiler\n+                throw new IllegalStateException(e);\n+            }\n+        }\n+\n+        return Optional.ofNullable(dynamicEntityCompiler);\n+    }\n+\n+    /**\n+     * Gets the DataStore for elide.\n+     * @param metaDataStore MetaDataStore object.\n+     * @param aggregationDataStore AggregationDataStore object.\n+     * @param entityManagerFactory EntityManagerFactory object.\n+     * @return EntityDictionary object initialized.\n+     */\n+    default DataStore getDataStore(MetaDataStore metaDataStore, AggregationDataStore aggregationDataStore,\n+            EntityManagerFactory entityManagerFactory) {\n+\n+        DataStore jpaDataStore = new JpaDataStore(\n+                () -> { return entityManagerFactory.createEntityManager(); },\n+                (em -> { return new NonJtaTransaction(em); }));\n+\n+        DataStore dataStore = new MultiplexManager(jpaDataStore, metaDataStore, aggregationDataStore);\n+\n+        return dataStore;\n+    }\n+\n+    /**\n+     * Gets the AggregationDataStore for elide.\n+     * @param queryEngine query engine object.\n+     * @param optionalCompiler optional dynamic compiler object.\n+     * @return AggregationDataStore object initialized.\n+     */\n+    default AggregationDataStore getAggregationDataStore(QueryEngine queryEngine,\n+            Optional<ElideDynamicEntityCompiler> optionalCompiler) {\n+        AggregationDataStore aggregationDataStore = null;\n+\n+        if (enableDynamicModelConfig()) {\n+            Set<Class<?>> annotatedClasses = getDynamicClassesIfAvailable(optionalCompiler, FromTable.class);\n+            annotatedClasses.addAll(getDynamicClassesIfAvailable(optionalCompiler, FromSubquery.class));\n+            aggregationDataStore = new AggregationDataStore(queryEngine, annotatedClasses);\n+        } else {\n+            aggregationDataStore = new AggregationDataStore(queryEngine);\n+        }\n+\n+        return aggregationDataStore;\n+    }\n+\n+    /**\n+     * Gets the EntityDictionary for elide.\n+     * @param injector Service locator for web service for dependency injection.\n+     * @param optionalCompiler optional dynamic compiler object.\n+     * @return EntityDictionary object initialized.\n+     */\n+    default EntityDictionary getEntityDictionary(ServiceLocator injector,\n+            Optional<ElideDynamicEntityCompiler> optionalCompiler) {\n+        EntityDictionary dictionary = new EntityDictionary(getCheckMappings(),\n+                new Injector() {\n+                    @Override\n+                    public void inject(Object entity) {\n+                        injector.inject(entity);\n+                    }\n+\n+                    @Override\n+                    public <T> T instantiate(Class<T> cls) {\n+                        return injector.create(cls);\n+                    }\n+                });\n+\n+        dictionary.scanForSecurityChecks();\n+\n+        Set<Class<?>> annotatedSecurityClasses = getDynamicClassesIfAvailable(optionalCompiler, SecurityCheck.class);\n+\n+        dictionary.addSecurityChecks(annotatedSecurityClasses);\n+\n+        return dictionary;\n+    }\n+\n+    /**\n+     * Gets the metadatastore for elide.\n+     * @param optionalCompiler optional dynamic compiler object.\n+     * @return MetaDataStore object initialized.\n+     */\n+    default MetaDataStore getMetaDataStore(Optional<ElideDynamicEntityCompiler> optionalCompiler) {\n+        MetaDataStore metaDataStore = null;\n+\n+        if (optionalCompiler.isPresent()) {\n+            try {\n+                metaDataStore = new MetaDataStore(optionalCompiler.get());\n+            } catch (ClassNotFoundException e) {\n+                throw new IllegalStateException(e);\n+            }\n+        } else {\n+            metaDataStore = new MetaDataStore();\n+        }\n+\n+        return metaDataStore;\n+    }\n+\n+    /**\n+     * Gets the QueryEngine for elide.\n+     * @param metaDataStore MetaDataStore object.\n+     * @param entityManagerFactory EntityManagerFactory object.\n+     * @return QueryEngine object initialized.\n+     */\n+    default QueryEngine getQueryEngine(MetaDataStore metaDataStore, EntityManagerFactory entityManagerFactory) {\n+        return new SQLQueryEngine(metaDataStore, entityManagerFactory, null);\n+    }\n+\n+    static Set<Class<?>> getDynamicClassesIfAvailable(Optional<ElideDynamicEntityCompiler> optionalCompiler,\n+            Class<?> classz) {\n+        Set<Class<?>> annotatedClasses = new HashSet<Class<?>>();\n+\n+        if (!optionalCompiler.isPresent()) {\n+            return annotatedClasses;\n+        }\n+\n+        ElideDynamicEntityCompiler compiler = optionalCompiler.get();\n+\n+        try {\n+            annotatedClasses = compiler.findAnnotatedClasses(classz);\n+        } catch (ClassNotFoundException e) {\n+            throw new IllegalStateException(e);\n+        }\n+\n+        return annotatedClasses;\n+    }\n }\n", "next_change": {"commit": "dcb6336070c158b923a8e5a7ec92502ea57f36ee", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 8bda402cd..c4cbeb54f 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -461,29 +457,26 @@ public interface ElideStandaloneSettings {\n     /**\n      * Gets the QueryEngine for elide.\n      * @param metaDataStore MetaDataStore object.\n-     * @param entityManagerFactory EntityManagerFactory object.\n+     * @param defaultConnectionDetails default DataSource Object and SQLDialect Object.\n+     * @param validator Optional dynamic config validator.\n+     * @param dataSourceConfiguration DataSource Configuration.\n+     * @param dbPasswordExtractor Password Extractor Implementation.\n      * @return QueryEngine object initialized.\n      */\n-    default QueryEngine getQueryEngine(MetaDataStore metaDataStore, EntityManagerFactory entityManagerFactory) {\n-        return new SQLQueryEngine(metaDataStore, entityManagerFactory, null);\n-    }\n-\n-    static Set<Class<?>> getDynamicClassesIfAvailable(Optional<ElideDynamicEntityCompiler> optionalCompiler,\n-            Class<?> classz) {\n-        Set<Class<?>> annotatedClasses = new HashSet<Class<?>>();\n-\n-        if (!optionalCompiler.isPresent()) {\n-            return annotatedClasses;\n+    default QueryEngine getQueryEngine(MetaDataStore metaDataStore, ConnectionDetails defaultConnectionDetails,\n+                    Optional<DynamicConfigValidator> validator,\n+                    DataSourceConfiguration dataSourceConfiguration, DBPasswordExtractor dbPasswordExtractor) {\n+        if (validator.isPresent()) {\n+            Map<String, ConnectionDetails> connectionDetailsMap = new HashMap<>();\n+\n+            validator.get().getElideSQLDBConfig().getDbconfigs().forEach(dbConfig -> {\n+                connectionDetailsMap.put(dbConfig.getName(),\n+                                new ConnectionDetails(\n+                                                dataSourceConfiguration.getDataSource(dbConfig, dbPasswordExtractor),\n+                                                SQLDialectFactory.getDialect(dbConfig.getDialect())));\n+            });\n+            return new SQLQueryEngine(metaDataStore, defaultConnectionDetails, connectionDetailsMap);\n         }\n-\n-        ElideDynamicEntityCompiler compiler = optionalCompiler.get();\n-\n-        try {\n-            annotatedClasses = compiler.findAnnotatedClasses(classz);\n-        } catch (ClassNotFoundException e) {\n-            throw new IllegalStateException(e);\n-        }\n-\n-        return annotatedClasses;\n+        return new SQLQueryEngine(metaDataStore, defaultConnectionDetails);\n     }\n }\n", "next_change": {"commit": "e1e07dbeabb690560754c84200b67e7a8d4d9229", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex c4cbeb54f..9e09a65a7 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -458,24 +486,24 @@ public interface ElideStandaloneSettings {\n      * Gets the QueryEngine for elide.\n      * @param metaDataStore MetaDataStore object.\n      * @param defaultConnectionDetails default DataSource Object and SQLDialect Object.\n-     * @param validator Optional dynamic config validator.\n+     * @param dynamicConfiguration Optional dynamic config.\n      * @param dataSourceConfiguration DataSource Configuration.\n      * @param dbPasswordExtractor Password Extractor Implementation.\n      * @return QueryEngine object initialized.\n      */\n     default QueryEngine getQueryEngine(MetaDataStore metaDataStore, ConnectionDetails defaultConnectionDetails,\n-                    Optional<DynamicConfigValidator> validator,\n+                    Optional<DynamicConfiguration> dynamicConfiguration,\n                     DataSourceConfiguration dataSourceConfiguration, DBPasswordExtractor dbPasswordExtractor) {\n-        if (validator.isPresent()) {\n+        if (dynamicConfiguration.isPresent()) {\n             Map<String, ConnectionDetails> connectionDetailsMap = new HashMap<>();\n \n-            validator.get().getElideSQLDBConfig().getDbconfigs().forEach(dbConfig -> {\n+            dynamicConfiguration.get().getDatabaseConfigurations().forEach(dbConfig -> {\n                 connectionDetailsMap.put(dbConfig.getName(),\n                                 new ConnectionDetails(\n                                                 dataSourceConfiguration.getDataSource(dbConfig, dbPasswordExtractor),\n                                                 SQLDialectFactory.getDialect(dbConfig.getDialect())));\n             });\n-            return new SQLQueryEngine(metaDataStore, defaultConnectionDetails, connectionDetailsMap);\n+            return new SQLQueryEngine(metaDataStore, defaultConnectionDetails, connectionDetailsMap, new HashSet<>());\n         }\n         return new SQLQueryEngine(metaDataStore, defaultConnectionDetails);\n     }\n", "next_change": {"commit": "43598e8411d544b31d9807ded4f248e25ef334a4", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 9e09a65a7..5dfabf6a2 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -503,7 +498,8 @@ public interface ElideStandaloneSettings {\n                                                 dataSourceConfiguration.getDataSource(dbConfig, dbPasswordExtractor),\n                                                 SQLDialectFactory.getDialect(dbConfig.getDialect())));\n             });\n-            return new SQLQueryEngine(metaDataStore, defaultConnectionDetails, connectionDetailsMap, new HashSet<>());\n+            return new SQLQueryEngine(metaDataStore, defaultConnectionDetails, connectionDetailsMap,\n+                    new HashSet<>(Arrays.asList(new AggregateBeforeJoinOptimizer(metaDataStore))));\n         }\n         return new SQLQueryEngine(metaDataStore, defaultConnectionDetails);\n     }\n", "next_change": {"commit": "6143d108eb7b1a2250370409d5362c6722c95b23", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 5dfabf6a2..9bf6ad35a 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -492,12 +490,12 @@ public interface ElideStandaloneSettings {\n         if (dynamicConfiguration.isPresent()) {\n             Map<String, ConnectionDetails> connectionDetailsMap = new HashMap<>();\n \n-            dynamicConfiguration.get().getDatabaseConfigurations().forEach(dbConfig -> {\n+            dynamicConfiguration.get().getDatabaseConfigurations().forEach(dbConfig ->\n                 connectionDetailsMap.put(dbConfig.getName(),\n                                 new ConnectionDetails(\n                                                 dataSourceConfiguration.getDataSource(dbConfig, dbPasswordExtractor),\n-                                                SQLDialectFactory.getDialect(dbConfig.getDialect())));\n-            });\n+                                                SQLDialectFactory.getDialect(dbConfig.getDialect())))\n+            );\n             return new SQLQueryEngine(metaDataStore, defaultConnectionDetails, connectionDetailsMap,\n                     new HashSet<>(Arrays.asList(new AggregateBeforeJoinOptimizer(metaDataStore))));\n         }\n", "next_change": {"commit": "0a3776bacb5809845d9a04a1263db9760f117b92", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 9bf6ad35a..7085a6328 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -497,7 +498,8 @@ public interface ElideStandaloneSettings {\n                                                 SQLDialectFactory.getDialect(dbConfig.getDialect())))\n             );\n             return new SQLQueryEngine(metaDataStore, defaultConnectionDetails, connectionDetailsMap,\n-                    new HashSet<>(Arrays.asList(new AggregateBeforeJoinOptimizer(metaDataStore))));\n+                    new HashSet<>(Arrays.asList(new AggregateBeforeJoinOptimizer(metaDataStore))),\n+                    new DefaultQueryValidator(metaDataStore.getMetadataDictionary()));\n         }\n         return new SQLQueryEngine(metaDataStore, defaultConnectionDetails);\n     }\n", "next_change": {"commit": "fe7009353573baf0206f7bb58617db97e067f900", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 7085a6328..3f1071c95 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -503,4 +526,12 @@ public interface ElideStandaloneSettings {\n         }\n         return new SQLQueryEngine(metaDataStore, defaultConnectionDetails);\n     }\n+\n+    /**\n+     * Get the class scanner for this Elide instance.\n+     * @return class scanner implementation.\n+     */\n+    default ClassScanner getClassScanner() {\n+        return new DefaultClassScanner();\n+    }\n }\n", "next_change": {"commit": "65eaaa12fc2b805135285287d4912d2329bc676d", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 3f1071c95..1098fa4f0 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -534,4 +536,13 @@ public interface ElideStandaloneSettings {\n     default ClassScanner getClassScanner() {\n         return new DefaultClassScanner();\n     }\n+\n+    /**\n+     * Get the error mapper for this Elide instance. By default no errors will be mapped.\n+     *\n+     * @return error mapper implementation\n+     */\n+    default ErrorMapper getErrorMapper() {\n+        return error -> null;\n+    }\n }\n", "next_change": {"commit": "6a319f244f5b611d3702e46013c5f8c988b5a957", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 1098fa4f0..e41dc47e3 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -545,4 +559,13 @@ public interface ElideStandaloneSettings {\n     default ErrorMapper getErrorMapper() {\n         return error -> null;\n     }\n+\n+    /**\n+     * Get the Jackson object mapper for Elide.\n+     *\n+     * @return object mapper.\n+     */\n+    default JsonApiMapper getObjectMapper() {\n+        return new JsonApiMapper();\n+    }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "ff86c56fde9064e1719ea35660fd04c42c949662", "message": "Merge commit", "committedDate": null}, {"oid": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "parent a14ccfbb7b558d27799b4e7b1916850519639708 author Jack (\uc815\ud658) <QubitPi@users.noreply.github.com> 1559678988 -0700 committer Aaron Klish <klish@verizonmedia.com> 1589583449 -0500"}, {"oid": "95b3031194e0e0f2394228d6a6525a80f13fef04", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5.x dynamic config standalone (#1259)"}, {"oid": "81dde7567aa8a6a00822a9a8f0bf901806a962e8", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add caching support to SQLQueryEngine (#1319)"}, {"oid": "9c897058ce0b9656bf2aef2318d0addc474f278a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "implement cancel function (#1367)"}, {"oid": "9ff0eb6bfa7f8f0135d21cf68cb1e44c5d515d91", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Enable query caching by default (#1378)"}, {"oid": "8fece2b8f1b3078ce2598ddb03dca66bb984df46", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Aggregation DataStore QueryLogger Implementation (#1448)"}, {"oid": "7c8fece25f8dddbe975f0072bf0267def2610ff4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Disable Aggregation DataStore by default (#1468)"}, {"oid": "80c38a134a938bfb74583d9efb6d0c2b80c39e61", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Cancel long running or cancelled async queries (#1447)"}, {"oid": "5c065ad65fcda862269b5e31a8b6dc5d8c828aaa", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Data export - Refactoring and Prep for using ResultStorageEngine (#1527)"}, {"oid": "ca35ad817f2fde68b2f9c39d0d4d9c9d44ebffd5", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Query Engine and Aggregation Store Changes for Multi Data Source Support (#1523)"}, {"oid": "bbbfb1a7522b64ef2f7fc42bae2c0f65491d1c04", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Update timegrain serde to return java.sql.Date instead of java.util.Date (#1552)"}, {"oid": "b8d0918e2f6f438eda12c12e58354a8cad3719dd", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Added item expiration to AggregationDataStore cache (#1564)"}, {"oid": "1933cc3eb6788be5fce69b1d97c6ae589623495f", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add slf4j query logger (#1618)"}, {"oid": "26bef0c192b549ed701287814055e5e7ac175a50", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Collapsed contrib directory into top level modules (#1670)"}, {"oid": "49e61867e840d9818993879436d5db1aad964c9a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Move data store interfaces (#1671)"}, {"oid": "911d29408bdeeb4ff8d78f2beea2417be4e7c673", "committedDate": "2020-12-11 16:20:28 -0600", "message": "cleaned up package hierarchy for elide-core (#1672)"}, {"oid": "cf1726f19ece846111b004b8f01fd1c135fa39b4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Create separate class for Analytics settings (#1669)"}, {"oid": "c14096bec256faf80e7674fbef22bccff1f955a3", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Moved contrib.dynamicconfighelpers to modelconfig package (#1676)"}, {"oid": "800ba874c21672a727aed4e1beacb294bfb5022e", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5.x MetaDataStore enable/disable flag (#1696)"}, {"oid": "bea43ef0f244ba01c2f7d4216b9f08f0ef4e83a4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Optionally compile hjson configs while running CLI (#1693)"}, {"oid": "6ce117b6c68f6a2fc484e3c9ba7b76ace9c596ff", "committedDate": "2021-01-08 17:36:00 -0600", "message": "Added baseUrl configuration setting for Spring and Standalone"}, {"oid": "79b23531edc46cebc43e889d7ac4727540a72105", "committedDate": "2021-01-19 14:16:37 -0600", "message": "Syntax Fixes"}, {"oid": "de9883d363ba8b4171be5d8ad508564664f6fc90", "committedDate": "2021-01-19 14:16:37 -0600", "message": "Review comments"}, {"oid": "fe3198d3cacec95d4b064ccae7109874e58d9e96", "committedDate": "2021-01-20 10:43:28 -0600", "message": "Review Comments"}, {"oid": "bca9aca28661c202a018a1c929ea888eaf8d83c7", "committedDate": "2021-01-20 10:43:28 -0600", "message": "Review Comments"}, {"oid": "93ebb969254204bd315de860bd064ca77e70cfab", "committedDate": "2021-01-29 11:36:47 -0500", "message": "TableExportHook Binding (#1802)"}, {"oid": "dcb6336070c158b923a8e5a7ec92502ea57f36ee", "committedDate": "2021-02-09 10:45:00 -0600", "message": "Add dynamic table type (#1815)"}, {"oid": "d77f1240a3fa5abf824aea54d0533be844235359", "committedDate": "2021-02-11 10:18:49 -0600", "message": "Created new interface for dynamic configuration (#1830)"}, {"oid": "af0aad2498f81659177eff1bbcfbf49213baf7b9", "committedDate": "2021-02-15 13:19:22 -0500", "message": "Exclude Models based on Conditions (#1835)"}, {"oid": "2eb90f1b8513e246930e5419e838b3fb1f7bbb98", "committedDate": "2021-02-18 11:42:05 -0600", "message": "Integration Tests for Table Export (#1842)"}, {"oid": "e2005d6babde1a0da3ba66fc507fc6ecf5773052", "committedDate": "2021-02-22 10:34:54 -0600", "message": "Cleanup unnecessary syntax (#1854)"}, {"oid": "6c97725cec25be900fd1466f627d3d0e722ed508", "committedDate": "2021-03-09 15:24:33 -0600", "message": "Add experimental n plus1 improvement (#1876)"}, {"oid": "8274a6341e06c7201049e8e8f0a48f07bd99a0ef", "committedDate": "2021-03-10 16:38:34 -0600", "message": "Cleanup IDE warnings (#1894)"}, {"oid": "c19d8c2237e960d792dc2ef6375356433b4fac21", "committedDate": "2021-03-11 17:10:26 -0600", "message": "Classtype cleanup (#1905)"}, {"oid": "e1e07dbeabb690560754c84200b67e7a8d4d9229", "committedDate": "2021-03-22 09:06:06 -0500", "message": "Part 4 of Query Plan Optimization : Fix Metric Nesting (#1924)"}, {"oid": "ed941827e1027083367b4df9794501909279c667", "committedDate": "2021-03-25 22:55:35 -0400", "message": "diamonds to reduce duplication (#1947)"}, {"oid": "dc7a367e14c9f43b2d013f5037341055a29f0491", "committedDate": "2021-03-26 10:31:26 -0400", "message": "Issue 1929 - Address Sonar suggestions (#1925)"}, {"oid": "43598e8411d544b31d9807ded4f248e25ef334a4", "committedDate": "2021-04-01 17:32:17 -0500", "message": "Add Table Level Query Hints (#1981)"}, {"oid": "6143d108eb7b1a2250370409d5362c6722c95b23", "committedDate": "2021-04-26 16:28:58 -0500", "message": "Cleanup (#2026)"}, {"oid": "ea57369f2b8af263efd9de99bfe59cae1b88202a", "committedDate": "2021-04-29 21:02:18 -0500", "message": "Test Cases + Enable Namespace in Standalone and Spring (#2040)"}, {"oid": "0a3776bacb5809845d9a04a1263db9760f117b92", "committedDate": "2021-05-13 13:25:15 -0500", "message": "Injection Protection for parameterized metrics/dimensions (#2090)"}, {"oid": "c55eca8c6cc828610faf39d0ea62d2a0a897696b", "committedDate": "2021-08-05 09:52:57 -0500", "message": "Add simple configuration to enable verbose errors. (#2236)"}, {"oid": "fe7009353573baf0206f7bb58617db97e067f900", "committedDate": "2021-09-02 11:31:12 -0500", "message": "Refactor class scanning for quarkus (#2284)"}, {"oid": "65eaaa12fc2b805135285287d4912d2329bc676d", "committedDate": "2021-09-13 14:02:45 -0500", "message": "Add ability to map unknown exceptions to custom exceptions (#2205)"}, {"oid": "6a319f244f5b611d3702e46013c5f8c988b5a957", "committedDate": "2021-09-30 13:42:41 -0500", "message": "GraphQL Subscriptions: Part 5 (#2308)"}, {"oid": "64325a03c2d0e965e2543c3c52a9ddc0de570c03", "committedDate": "2021-10-07 14:58:50 -0500", "message": "Aggregation Store: Relaxing rules for how filter templates are compared against filter e\u2026 (#2329)"}, {"oid": "6f26ba6377010a22403698d48d49ef2a4f897fde", "committedDate": "2021-10-17 15:04:42 -0500", "message": "Changing Oath to Yahoo in Copyright messages (#2340)"}, {"oid": "5064f8a5a351b1f77b8025f68b20efc1b76d101e", "committedDate": "2021-10-19 11:25:38 -0500", "message": "Elide 6 : Refactor DataStoreTransaction Interface. (#2334)"}, {"oid": "54cdcb9fe67225cd463e1bf9357f0e1d2a42c152", "committedDate": "2021-12-02 15:11:51 -0600", "message": "HJSON Configuration Models and DataStore (#2418)"}, {"oid": "d0552c5750608391d52e3e3286469901726a7d06", "committedDate": "2022-01-28 16:02:28 -0600", "message": "Support filters on query plans (#2526)"}, {"oid": "f21f35950fe465cfbf135d06cc8ae2321a29513a", "committedDate": "2023-02-04 15:34:06 -0600", "message": "Elide 7.x (#2876)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUwMzE4Ng==", "url": "https://github.com/yahoo/elide/pull/1367#discussion_r439503186", "body": "See if these can be consolidated into a single variable using one of Java's built in Function classes.", "bodyText": "See if these can be consolidated into a single variable using one of Java's built in Function classes.", "bodyHTML": "<p dir=\"auto\">See if these can be consolidated into a single variable using one of Java's built in Function classes.</p>", "author": "aklish", "createdAt": "2020-06-12T15:55:22Z", "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java", "diffHunk": "@@ -56,6 +58,10 @@\n  */\n public interface ElideStandaloneSettings {\n     /* Elide settings */\n+\n+     public final AbstractJpaTransaction.JpaTransactionCancel JTC = (m) -> { m.unwrap(Session.class).cancelQuery(); };", "originalCommit": "43ce9e801ed051344593d1af60db17481904b045", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8f1cfb480ee2db34373cee4ca35e5eef6b339a51", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 7cb6ff25e..28faa41df 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -61,6 +62,7 @@ public interface ElideStandaloneSettings {\n \n      public final AbstractJpaTransaction.JpaTransactionCancel JTC = (m) -> { m.unwrap(Session.class).cancelQuery(); };\n      public final SQLQueryEngine.TransactionCancel TXCANCEL = (m) -> { m.unwrap(Session.class).cancelQuery(); };\n+     //public final Function<AbstractJpaTransaction.JpaTransactionCancel, Void> CANCELFUNCTION = (em) -> { em.unwrap(Session.class).cancelQuery(); };\n \n     /**\n      * A map containing check mappings for security across Elide. If not provided, then an empty map is used.\n", "next_change": {"commit": "d7556cb189b6e83070942c10bdaf33054ecc0f71", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 28faa41df..7e16c486e 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -60,9 +59,7 @@ import javax.persistence.EntityManagerFactory;\n public interface ElideStandaloneSettings {\n     /* Elide settings */\n \n-     public final AbstractJpaTransaction.JpaTransactionCancel JTC = (m) -> { m.unwrap(Session.class).cancelQuery(); };\n-     public final SQLQueryEngine.TransactionCancel TXCANCEL = (m) -> { m.unwrap(Session.class).cancelQuery(); };\n-     //public final Function<AbstractJpaTransaction.JpaTransactionCancel, Void> CANCELFUNCTION = (em) -> { em.unwrap(Session.class).cancelQuery(); };\n+     public final Consumer<EntityManager> FUNC = (em) -> { em.unwrap(Session.class).cancelQuery(); };\n \n     /**\n      * A map containing check mappings for security across Elide. If not provided, then an empty map is used.\n", "next_change": {"commit": "127517bb46972dbe127cfd5e32d70439aa385381", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 7e16c486e..7e9a2aeb8 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -59,7 +59,7 @@ import javax.persistence.EntityManagerFactory;\n public interface ElideStandaloneSettings {\n     /* Elide settings */\n \n-     public final Consumer<EntityManager> FUNC = (em) -> { em.unwrap(Session.class).cancelQuery(); };\n+     public final Consumer<EntityManager> TXCANCEL = (em) -> { em.unwrap(Session.class).cancelQuery(); };\n \n     /**\n      * A map containing check mappings for security across Elide. If not provided, then an empty map is used.\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "ff86c56fde9064e1719ea35660fd04c42c949662", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 7cb6ff25e..7e9a2aeb8 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -59,8 +59,7 @@ import javax.persistence.EntityManagerFactory;\n public interface ElideStandaloneSettings {\n     /* Elide settings */\n \n-     public final AbstractJpaTransaction.JpaTransactionCancel JTC = (m) -> { m.unwrap(Session.class).cancelQuery(); };\n-     public final SQLQueryEngine.TransactionCancel TXCANCEL = (m) -> { m.unwrap(Session.class).cancelQuery(); };\n+     public final Consumer<EntityManager> TXCANCEL = (em) -> { em.unwrap(Session.class).cancelQuery(); };\n \n     /**\n      * A map containing check mappings for security across Elide. If not provided, then an empty map is used.\n", "next_change": {"commit": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 7e9a2aeb8..00b641dbb 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -58,9 +38,6 @@ import javax.persistence.EntityManagerFactory;\n  */\n public interface ElideStandaloneSettings {\n     /* Elide settings */\n-\n-     public final Consumer<EntityManager> TXCANCEL = (em) -> { em.unwrap(Session.class).cancelQuery(); };\n-\n     /**\n      * A map containing check mappings for security across Elide. If not provided, then an empty map is used.\n      * In case of an empty map, checks can be referenced by their fully qualified class names.\n", "next_change": {"commit": "9c897058ce0b9656bf2aef2318d0addc474f278a", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 00b641dbb..7e9a2aeb8 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -38,6 +58,9 @@ import javax.persistence.EntityManagerFactory;\n  */\n public interface ElideStandaloneSettings {\n     /* Elide settings */\n+\n+     public final Consumer<EntityManager> TXCANCEL = (em) -> { em.unwrap(Session.class).cancelQuery(); };\n+\n     /**\n      * A map containing check mappings for security across Elide. If not provided, then an empty map is used.\n      * In case of an empty map, checks can be referenced by their fully qualified class names.\n", "next_change": {"commit": "e2005d6babde1a0da3ba66fc507fc6ecf5773052", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 7e9a2aeb8..c859655ef 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -59,7 +68,7 @@ import javax.persistence.EntityManagerFactory;\n public interface ElideStandaloneSettings {\n     /* Elide settings */\n \n-     public final Consumer<EntityManager> TXCANCEL = (em) -> { em.unwrap(Session.class).cancelQuery(); };\n+     public final Consumer<EntityManager> TXCANCEL = em -> em.unwrap(Session.class).cancelQuery();\n \n     /**\n      * A map containing check mappings for security across Elide. If not provided, then an empty map is used.\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "ff86c56fde9064e1719ea35660fd04c42c949662", "message": "Merge commit", "committedDate": null}, {"oid": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "parent a14ccfbb7b558d27799b4e7b1916850519639708 author Jack (\uc815\ud658) <QubitPi@users.noreply.github.com> 1559678988 -0700 committer Aaron Klish <klish@verizonmedia.com> 1589583449 -0500"}, {"oid": "95b3031194e0e0f2394228d6a6525a80f13fef04", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5.x dynamic config standalone (#1259)"}, {"oid": "81dde7567aa8a6a00822a9a8f0bf901806a962e8", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add caching support to SQLQueryEngine (#1319)"}, {"oid": "9c897058ce0b9656bf2aef2318d0addc474f278a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "implement cancel function (#1367)"}, {"oid": "9ff0eb6bfa7f8f0135d21cf68cb1e44c5d515d91", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Enable query caching by default (#1378)"}, {"oid": "8fece2b8f1b3078ce2598ddb03dca66bb984df46", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Aggregation DataStore QueryLogger Implementation (#1448)"}, {"oid": "7c8fece25f8dddbe975f0072bf0267def2610ff4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Disable Aggregation DataStore by default (#1468)"}, {"oid": "80c38a134a938bfb74583d9efb6d0c2b80c39e61", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Cancel long running or cancelled async queries (#1447)"}, {"oid": "5c065ad65fcda862269b5e31a8b6dc5d8c828aaa", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Data export - Refactoring and Prep for using ResultStorageEngine (#1527)"}, {"oid": "ca35ad817f2fde68b2f9c39d0d4d9c9d44ebffd5", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Query Engine and Aggregation Store Changes for Multi Data Source Support (#1523)"}, {"oid": "bbbfb1a7522b64ef2f7fc42bae2c0f65491d1c04", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Update timegrain serde to return java.sql.Date instead of java.util.Date (#1552)"}, {"oid": "b8d0918e2f6f438eda12c12e58354a8cad3719dd", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Added item expiration to AggregationDataStore cache (#1564)"}, {"oid": "1933cc3eb6788be5fce69b1d97c6ae589623495f", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add slf4j query logger (#1618)"}, {"oid": "26bef0c192b549ed701287814055e5e7ac175a50", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Collapsed contrib directory into top level modules (#1670)"}, {"oid": "49e61867e840d9818993879436d5db1aad964c9a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Move data store interfaces (#1671)"}, {"oid": "911d29408bdeeb4ff8d78f2beea2417be4e7c673", "committedDate": "2020-12-11 16:20:28 -0600", "message": "cleaned up package hierarchy for elide-core (#1672)"}, {"oid": "cf1726f19ece846111b004b8f01fd1c135fa39b4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Create separate class for Analytics settings (#1669)"}, {"oid": "c14096bec256faf80e7674fbef22bccff1f955a3", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Moved contrib.dynamicconfighelpers to modelconfig package (#1676)"}, {"oid": "800ba874c21672a727aed4e1beacb294bfb5022e", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5.x MetaDataStore enable/disable flag (#1696)"}, {"oid": "bea43ef0f244ba01c2f7d4216b9f08f0ef4e83a4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Optionally compile hjson configs while running CLI (#1693)"}, {"oid": "6ce117b6c68f6a2fc484e3c9ba7b76ace9c596ff", "committedDate": "2021-01-08 17:36:00 -0600", "message": "Added baseUrl configuration setting for Spring and Standalone"}, {"oid": "79b23531edc46cebc43e889d7ac4727540a72105", "committedDate": "2021-01-19 14:16:37 -0600", "message": "Syntax Fixes"}, {"oid": "de9883d363ba8b4171be5d8ad508564664f6fc90", "committedDate": "2021-01-19 14:16:37 -0600", "message": "Review comments"}, {"oid": "fe3198d3cacec95d4b064ccae7109874e58d9e96", "committedDate": "2021-01-20 10:43:28 -0600", "message": "Review Comments"}, {"oid": "bca9aca28661c202a018a1c929ea888eaf8d83c7", "committedDate": "2021-01-20 10:43:28 -0600", "message": "Review Comments"}, {"oid": "93ebb969254204bd315de860bd064ca77e70cfab", "committedDate": "2021-01-29 11:36:47 -0500", "message": "TableExportHook Binding (#1802)"}, {"oid": "dcb6336070c158b923a8e5a7ec92502ea57f36ee", "committedDate": "2021-02-09 10:45:00 -0600", "message": "Add dynamic table type (#1815)"}, {"oid": "d77f1240a3fa5abf824aea54d0533be844235359", "committedDate": "2021-02-11 10:18:49 -0600", "message": "Created new interface for dynamic configuration (#1830)"}, {"oid": "af0aad2498f81659177eff1bbcfbf49213baf7b9", "committedDate": "2021-02-15 13:19:22 -0500", "message": "Exclude Models based on Conditions (#1835)"}, {"oid": "2eb90f1b8513e246930e5419e838b3fb1f7bbb98", "committedDate": "2021-02-18 11:42:05 -0600", "message": "Integration Tests for Table Export (#1842)"}, {"oid": "e2005d6babde1a0da3ba66fc507fc6ecf5773052", "committedDate": "2021-02-22 10:34:54 -0600", "message": "Cleanup unnecessary syntax (#1854)"}, {"oid": "6c97725cec25be900fd1466f627d3d0e722ed508", "committedDate": "2021-03-09 15:24:33 -0600", "message": "Add experimental n plus1 improvement (#1876)"}, {"oid": "8274a6341e06c7201049e8e8f0a48f07bd99a0ef", "committedDate": "2021-03-10 16:38:34 -0600", "message": "Cleanup IDE warnings (#1894)"}, {"oid": "c19d8c2237e960d792dc2ef6375356433b4fac21", "committedDate": "2021-03-11 17:10:26 -0600", "message": "Classtype cleanup (#1905)"}, {"oid": "e1e07dbeabb690560754c84200b67e7a8d4d9229", "committedDate": "2021-03-22 09:06:06 -0500", "message": "Part 4 of Query Plan Optimization : Fix Metric Nesting (#1924)"}, {"oid": "ed941827e1027083367b4df9794501909279c667", "committedDate": "2021-03-25 22:55:35 -0400", "message": "diamonds to reduce duplication (#1947)"}, {"oid": "dc7a367e14c9f43b2d013f5037341055a29f0491", "committedDate": "2021-03-26 10:31:26 -0400", "message": "Issue 1929 - Address Sonar suggestions (#1925)"}, {"oid": "43598e8411d544b31d9807ded4f248e25ef334a4", "committedDate": "2021-04-01 17:32:17 -0500", "message": "Add Table Level Query Hints (#1981)"}, {"oid": "6143d108eb7b1a2250370409d5362c6722c95b23", "committedDate": "2021-04-26 16:28:58 -0500", "message": "Cleanup (#2026)"}, {"oid": "ea57369f2b8af263efd9de99bfe59cae1b88202a", "committedDate": "2021-04-29 21:02:18 -0500", "message": "Test Cases + Enable Namespace in Standalone and Spring (#2040)"}, {"oid": "0a3776bacb5809845d9a04a1263db9760f117b92", "committedDate": "2021-05-13 13:25:15 -0500", "message": "Injection Protection for parameterized metrics/dimensions (#2090)"}, {"oid": "c55eca8c6cc828610faf39d0ea62d2a0a897696b", "committedDate": "2021-08-05 09:52:57 -0500", "message": "Add simple configuration to enable verbose errors. (#2236)"}, {"oid": "fe7009353573baf0206f7bb58617db97e067f900", "committedDate": "2021-09-02 11:31:12 -0500", "message": "Refactor class scanning for quarkus (#2284)"}, {"oid": "65eaaa12fc2b805135285287d4912d2329bc676d", "committedDate": "2021-09-13 14:02:45 -0500", "message": "Add ability to map unknown exceptions to custom exceptions (#2205)"}, {"oid": "6a319f244f5b611d3702e46013c5f8c988b5a957", "committedDate": "2021-09-30 13:42:41 -0500", "message": "GraphQL Subscriptions: Part 5 (#2308)"}, {"oid": "64325a03c2d0e965e2543c3c52a9ddc0de570c03", "committedDate": "2021-10-07 14:58:50 -0500", "message": "Aggregation Store: Relaxing rules for how filter templates are compared against filter e\u2026 (#2329)"}, {"oid": "6f26ba6377010a22403698d48d49ef2a4f897fde", "committedDate": "2021-10-17 15:04:42 -0500", "message": "Changing Oath to Yahoo in Copyright messages (#2340)"}, {"oid": "5064f8a5a351b1f77b8025f68b20efc1b76d101e", "committedDate": "2021-10-19 11:25:38 -0500", "message": "Elide 6 : Refactor DataStoreTransaction Interface. (#2334)"}, {"oid": "54cdcb9fe67225cd463e1bf9357f0e1d2a42c152", "committedDate": "2021-12-02 15:11:51 -0600", "message": "HJSON Configuration Models and DataStore (#2418)"}, {"oid": "d0552c5750608391d52e3e3286469901726a7d06", "committedDate": "2022-01-28 16:02:28 -0600", "message": "Support filters on query plans (#2526)"}, {"oid": "f21f35950fe465cfbf135d06cc8ae2321a29513a", "committedDate": "2023-02-04 15:34:06 -0600", "message": "Elide 7.x (#2876)"}]}, {"oid": "8f1cfb480ee2db34373cee4ca35e5eef6b339a51", "url": "https://github.com/yahoo/elide/commit/8f1cfb480ee2db34373cee4ca35e5eef6b339a51", "message": "rebasing", "committedDate": "2020-06-12T23:23:05Z", "type": "commit"}, {"oid": "5094ce020f2de18f1a34294178dd857eba7af5c4", "url": "https://github.com/yahoo/elide/commit/5094ce020f2de18f1a34294178dd857eba7af5c4", "message": "Merge branch 'elide-5.x' into implement-cancel-function", "committedDate": "2020-06-12T23:44:45Z", "type": "commit"}, {"oid": "d7556cb189b6e83070942c10bdaf33054ecc0f71", "url": "https://github.com/yahoo/elide/commit/d7556cb189b6e83070942c10bdaf33054ecc0f71", "message": "adddressing comments", "committedDate": "2020-06-13T04:39:35Z", "type": "commit"}, {"oid": "d6dd7bddcc572305a4c25663c97a26506b81bc86", "url": "https://github.com/yahoo/elide/commit/d6dd7bddcc572305a4c25663c97a26506b81bc86", "message": "adddressing comments", "committedDate": "2020-06-13T04:58:46Z", "type": "commit"}, {"oid": "10b08031c01a3228c6f335ba5b1d51b0da68f8e6", "url": "https://github.com/yahoo/elide/commit/10b08031c01a3228c6f335ba5b1d51b0da68f8e6", "message": "addressing comments", "committedDate": "2020-06-13T04:59:15Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTYyMDI5Ng==", "url": "https://github.com/yahoo/elide/pull/1367#discussion_r441620296", "body": "Remove this comment.", "bodyText": "Remove this comment.", "bodyHTML": "<p dir=\"auto\">Remove this comment.</p>", "author": "aklish", "createdAt": "2020-06-17T15:08:41Z", "path": "elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/JpaDataStore.java", "diffHunk": "@@ -8,7 +8,7 @@\n import com.yahoo.elide.core.DataStoreTransaction;\n import com.yahoo.elide.core.EntityDictionary;\n import com.yahoo.elide.core.datastore.JPQLDataStore;\n-import com.yahoo.elide.datastores.jpa.transaction.AbstractJpaTransaction;\n+//import com.yahoo.elide.datastores.jpa.transaction.AbstractJpaTransaction;", "originalCommit": "10b08031c01a3228c6f335ba5b1d51b0da68f8e6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "127517bb46972dbe127cfd5e32d70439aa385381", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/JpaDataStore.java b/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/JpaDataStore.java\nindex c50018750..71f19da8a 100644\n--- a/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/JpaDataStore.java\n+++ b/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/JpaDataStore.java\n", "chunk": "@@ -8,7 +8,6 @@ package com.yahoo.elide.datastores.jpa;\n import com.yahoo.elide.core.DataStoreTransaction;\n import com.yahoo.elide.core.EntityDictionary;\n import com.yahoo.elide.core.datastore.JPQLDataStore;\n-//import com.yahoo.elide.datastores.jpa.transaction.AbstractJpaTransaction;\n import com.yahoo.elide.datastores.jpa.transaction.JpaTransaction;\n \n import java.util.HashSet;\n", "next_change": null}]}, "revised_code_in_main": {"commit": "ff86c56fde9064e1719ea35660fd04c42c949662", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/JpaDataStore.java b/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/JpaDataStore.java\nindex c50018750..71f19da8a 100644\n--- a/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/JpaDataStore.java\n+++ b/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/JpaDataStore.java\n", "chunk": "@@ -8,7 +8,6 @@ package com.yahoo.elide.datastores.jpa;\n import com.yahoo.elide.core.DataStoreTransaction;\n import com.yahoo.elide.core.EntityDictionary;\n import com.yahoo.elide.core.datastore.JPQLDataStore;\n-//import com.yahoo.elide.datastores.jpa.transaction.AbstractJpaTransaction;\n import com.yahoo.elide.datastores.jpa.transaction.JpaTransaction;\n \n import java.util.HashSet;\n", "next_change": {"commit": "49e61867e840d9818993879436d5db1aad964c9a", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/JpaDataStore.java b/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/JpaDataStore.java\nindex 71f19da8a..d2a767609 100644\n--- a/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/JpaDataStore.java\n+++ b/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/JpaDataStore.java\n", "chunk": "@@ -5,14 +5,13 @@\n  */\n package com.yahoo.elide.datastores.jpa;\n \n-import com.yahoo.elide.core.DataStoreTransaction;\n import com.yahoo.elide.core.EntityDictionary;\n+import com.yahoo.elide.core.datastore.DataStoreTransaction;\n import com.yahoo.elide.core.datastore.JPQLDataStore;\n import com.yahoo.elide.datastores.jpa.transaction.JpaTransaction;\n \n import java.util.HashSet;\n import java.util.Set;\n-\n import javax.persistence.EntityManager;\n import javax.persistence.metamodel.EntityType;\n \n", "next_change": {"commit": "911d29408bdeeb4ff8d78f2beea2417be4e7c673", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/JpaDataStore.java b/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/JpaDataStore.java\nindex d2a767609..5934d9458 100644\n--- a/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/JpaDataStore.java\n+++ b/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/JpaDataStore.java\n", "chunk": "@@ -5,9 +5,9 @@\n  */\n package com.yahoo.elide.datastores.jpa;\n \n-import com.yahoo.elide.core.EntityDictionary;\n import com.yahoo.elide.core.datastore.DataStoreTransaction;\n import com.yahoo.elide.core.datastore.JPQLDataStore;\n+import com.yahoo.elide.core.dictionary.EntityDictionary;\n import com.yahoo.elide.datastores.jpa.transaction.JpaTransaction;\n \n import java.util.HashSet;\n", "next_change": {"commit": "d9a28dd5b8d95f3219a864aac56e7db8945e991d", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/JpaDataStore.java b/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/JpaDataStore.java\nindex 5934d9458..5d50b0a24 100644\n--- a/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/JpaDataStore.java\n+++ b/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/JpaDataStore.java\n", "chunk": "@@ -5,9 +5,11 @@\n  */\n package com.yahoo.elide.datastores.jpa;\n \n+import static com.yahoo.elide.core.utils.TypeHelper.getType;\n import com.yahoo.elide.core.datastore.DataStoreTransaction;\n import com.yahoo.elide.core.datastore.JPQLDataStore;\n import com.yahoo.elide.core.dictionary.EntityDictionary;\n+import com.yahoo.elide.core.type.Type;\n import com.yahoo.elide.datastores.jpa.transaction.JpaTransaction;\n \n import java.util.HashSet;\n", "next_change": {"commit": "de9883d363ba8b4171be5d8ad508564664f6fc90", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/JpaDataStore.java b/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/JpaDataStore.java\nindex 5d50b0a24..2b42e183c 100644\n--- a/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/JpaDataStore.java\n+++ b/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/JpaDataStore.java\n", "chunk": "@@ -5,7 +5,7 @@\n  */\n package com.yahoo.elide.datastores.jpa;\n \n-import static com.yahoo.elide.core.utils.TypeHelper.getType;\n+import static com.yahoo.elide.core.utils.TypeHelper.getClassType;\n import com.yahoo.elide.core.datastore.DataStoreTransaction;\n import com.yahoo.elide.core.datastore.JPQLDataStore;\n import com.yahoo.elide.core.dictionary.EntityDictionary;\n", "next_change": {"commit": "6c97725cec25be900fd1466f627d3d0e722ed508", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/JpaDataStore.java b/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/JpaDataStore.java\nindex 2b42e183c..512575fda 100644\n--- a/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/JpaDataStore.java\n+++ b/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/JpaDataStore.java\n", "chunk": "@@ -10,8 +10,11 @@ import com.yahoo.elide.core.datastore.DataStoreTransaction;\n import com.yahoo.elide.core.datastore.JPQLDataStore;\n import com.yahoo.elide.core.dictionary.EntityDictionary;\n import com.yahoo.elide.core.type.Type;\n+import com.yahoo.elide.datastores.jpa.porting.QueryLogger;\n import com.yahoo.elide.datastores.jpa.transaction.JpaTransaction;\n \n+import lombok.extern.slf4j.Slf4j;\n+\n import java.util.HashSet;\n import java.util.Set;\n import javax.persistence.EntityManager;\n", "next_change": {"commit": "76fff8684b7ea31d3ee1483aa4078d7949e5442f", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/JpaDataStore.java b/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/JpaDataStore.java\nindex 512575fda..3ccb1bafb 100644\n--- a/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/JpaDataStore.java\n+++ b/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/JpaDataStore.java\n", "chunk": "@@ -5,14 +5,14 @@\n  */\n package com.yahoo.elide.datastores.jpa;\n \n-import static com.yahoo.elide.core.utils.TypeHelper.getClassType;\n import com.yahoo.elide.core.datastore.DataStoreTransaction;\n import com.yahoo.elide.core.datastore.JPQLDataStore;\n import com.yahoo.elide.core.dictionary.EntityDictionary;\n+import com.yahoo.elide.core.hibernate.QueryLogger;\n+import com.yahoo.elide.core.hibernate.hql.DefaultQueryLogger;\n+import com.yahoo.elide.core.type.ClassType;\n import com.yahoo.elide.core.type.Type;\n-import com.yahoo.elide.datastores.jpa.porting.QueryLogger;\n import com.yahoo.elide.datastores.jpa.transaction.JpaTransaction;\n-\n import lombok.extern.slf4j.Slf4j;\n \n import java.util.HashSet;\n", "next_change": {"commit": "6ef850932d95d4895b960832b099354fdb5569bb", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/JpaDataStore.java b/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/JpaDataStore.java\nindex 3ccb1bafb..8ea8e510b 100644\n--- a/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/JpaDataStore.java\n+++ b/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/JpaDataStore.java\n", "chunk": "@@ -6,13 +6,13 @@\n package com.yahoo.elide.datastores.jpa;\n \n import com.yahoo.elide.core.datastore.DataStoreTransaction;\n-import com.yahoo.elide.core.datastore.JPQLDataStore;\n import com.yahoo.elide.core.dictionary.EntityDictionary;\n-import com.yahoo.elide.core.hibernate.QueryLogger;\n-import com.yahoo.elide.core.hibernate.hql.DefaultQueryLogger;\n import com.yahoo.elide.core.type.ClassType;\n import com.yahoo.elide.core.type.Type;\n import com.yahoo.elide.datastores.jpa.transaction.JpaTransaction;\n+import com.yahoo.elide.datastores.jpql.JPQLDataStore;\n+import com.yahoo.elide.datastores.jpql.porting.QueryLogger;\n+import com.yahoo.elide.datastores.jpql.query.DefaultQueryLogger;\n import lombok.extern.slf4j.Slf4j;\n \n import java.util.HashSet;\n", "next_change": {"commit": "f21f35950fe465cfbf135d06cc8ae2321a29513a", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/JpaDataStore.java b/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/JpaDataStore.java\nindex 8ea8e510b..7ce6a72e0 100644\n--- a/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/JpaDataStore.java\n+++ b/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/JpaDataStore.java\n", "chunk": "@@ -13,12 +13,13 @@ import com.yahoo.elide.datastores.jpa.transaction.JpaTransaction;\n import com.yahoo.elide.datastores.jpql.JPQLDataStore;\n import com.yahoo.elide.datastores.jpql.porting.QueryLogger;\n import com.yahoo.elide.datastores.jpql.query.DefaultQueryLogger;\n+\n+import jakarta.persistence.EntityManager;\n+import jakarta.persistence.metamodel.EntityType;\n import lombok.extern.slf4j.Slf4j;\n \n import java.util.HashSet;\n import java.util.Set;\n-import javax.persistence.EntityManager;\n-import javax.persistence.metamodel.EntityType;\n \n /**\n  * Implementation for JPA EntityManager data store.\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "ff86c56fde9064e1719ea35660fd04c42c949662", "message": "Merge commit", "committedDate": null}, {"oid": "49e61867e840d9818993879436d5db1aad964c9a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Move data store interfaces (#1671)"}, {"oid": "911d29408bdeeb4ff8d78f2beea2417be4e7c673", "committedDate": "2020-12-11 16:20:28 -0600", "message": "cleaned up package hierarchy for elide-core (#1672)"}, {"oid": "d9a28dd5b8d95f3219a864aac56e7db8945e991d", "committedDate": "2021-01-19 14:16:37 -0600", "message": "Fix Aggregation Store Integration Tests"}, {"oid": "de9883d363ba8b4171be5d8ad508564664f6fc90", "committedDate": "2021-01-19 14:16:37 -0600", "message": "Review comments"}, {"oid": "6c97725cec25be900fd1466f627d3d0e722ed508", "committedDate": "2021-03-09 15:24:33 -0600", "message": "Add experimental n plus1 improvement (#1876)"}, {"oid": "0c9fff2684f6bff02222fd36c9b12a686ee655ef", "committedDate": "2021-04-26 09:59:59 -0500", "message": "ClassType.of (#2027)"}, {"oid": "76fff8684b7ea31d3ee1483aa4078d7949e5442f", "committedDate": "2021-08-12 09:37:43 -0500", "message": "Added enhanced logging around JPQL queries (#2249)"}, {"oid": "6ef850932d95d4895b960832b099354fdb5569bb", "committedDate": "2021-09-13 18:51:58 -0500", "message": "Elide 6.x (#2303)"}, {"oid": "6f26ba6377010a22403698d48d49ef2a4f897fde", "committedDate": "2021-10-17 15:04:42 -0500", "message": "Changing Oath to Yahoo in Copyright messages (#2340)"}, {"oid": "f21f35950fe465cfbf135d06cc8ae2321a29513a", "committedDate": "2023-02-04 15:34:06 -0600", "message": "Elide 7.x (#2876)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTYyMTI5Ng==", "url": "https://github.com/yahoo/elide/pull/1367#discussion_r441621296", "body": "Unify the variable names txCancel and jpaTransactionCancel.", "bodyText": "Unify the variable names txCancel and jpaTransactionCancel.", "bodyHTML": "<p dir=\"auto\">Unify the variable names txCancel and jpaTransactionCancel.</p>", "author": "aklish", "createdAt": "2020-06-17T15:09:57Z", "path": "elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/transaction/JtaTransaction.java", "diffHunk": "@@ -22,11 +23,11 @@\n @Slf4j\n public class JtaTransaction extends AbstractJpaTransaction {\n     private final UserTransaction transaction;\n-    public JtaTransaction(EntityManager entityManager, JpaTransactionCancel jpaTransactionCancel) {\n+    public JtaTransaction(EntityManager entityManager, Consumer<EntityManager> jpaTransactionCancel) {\n         this(entityManager, lookupUserTransaction(), jpaTransactionCancel);\n     }\n \n-    public JtaTransaction(EntityManager entityManager, UserTransaction transaction, JpaTransactionCancel txCancel) {\n+    public JtaTransaction(EntityManager entityManager, UserTransaction transaction, Consumer<EntityManager> txCancel) {", "originalCommit": "10b08031c01a3228c6f335ba5b1d51b0da68f8e6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "127517bb46972dbe127cfd5e32d70439aa385381", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/transaction/JtaTransaction.java b/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/transaction/JtaTransaction.java\nindex 3372a60ee..131e4a5b2 100644\n--- a/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/transaction/JtaTransaction.java\n+++ b/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/transaction/JtaTransaction.java\n", "chunk": "@@ -23,8 +23,8 @@ import javax.transaction.UserTransaction;\n @Slf4j\n public class JtaTransaction extends AbstractJpaTransaction {\n     private final UserTransaction transaction;\n-    public JtaTransaction(EntityManager entityManager, Consumer<EntityManager> jpaTransactionCancel) {\n-        this(entityManager, lookupUserTransaction(), jpaTransactionCancel);\n+    public JtaTransaction(EntityManager entityManager, Consumer<EntityManager> txCancel) {\n+        this(entityManager, lookupUserTransaction(), txCancel);\n     }\n \n     public JtaTransaction(EntityManager entityManager, UserTransaction transaction, Consumer<EntityManager> txCancel) {\n", "next_change": null}]}, "revised_code_in_main": {"commit": "ff86c56fde9064e1719ea35660fd04c42c949662", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/transaction/JtaTransaction.java b/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/transaction/JtaTransaction.java\nindex 3372a60ee..131e4a5b2 100644\n--- a/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/transaction/JtaTransaction.java\n+++ b/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/transaction/JtaTransaction.java\n", "chunk": "@@ -23,8 +23,8 @@ import javax.transaction.UserTransaction;\n @Slf4j\n public class JtaTransaction extends AbstractJpaTransaction {\n     private final UserTransaction transaction;\n-    public JtaTransaction(EntityManager entityManager, Consumer<EntityManager> jpaTransactionCancel) {\n-        this(entityManager, lookupUserTransaction(), jpaTransactionCancel);\n+    public JtaTransaction(EntityManager entityManager, Consumer<EntityManager> txCancel) {\n+        this(entityManager, lookupUserTransaction(), txCancel);\n     }\n \n     public JtaTransaction(EntityManager entityManager, UserTransaction transaction, Consumer<EntityManager> txCancel) {\n", "next_change": {"commit": "82df79169b68ec9e51172dda843cbc2b9fea907a", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/transaction/JtaTransaction.java b/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/transaction/JtaTransaction.java\nindex 131e4a5b2..a96a95992 100644\n--- a/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/transaction/JtaTransaction.java\n+++ b/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/transaction/JtaTransaction.java\n", "chunk": "@@ -23,12 +22,12 @@ import javax.transaction.UserTransaction;\n @Slf4j\n public class JtaTransaction extends AbstractJpaTransaction {\n     private final UserTransaction transaction;\n-    public JtaTransaction(EntityManager entityManager, Consumer<EntityManager> txCancel) {\n-        this(entityManager, lookupUserTransaction(), txCancel);\n+    public JtaTransaction(EntityManager entityManager) {\n+        this(entityManager, lookupUserTransaction());\n     }\n \n-    public JtaTransaction(EntityManager entityManager, UserTransaction transaction, Consumer<EntityManager> txCancel) {\n-        super(entityManager, txCancel);\n+    public JtaTransaction(EntityManager entityManager, UserTransaction transaction) {\n+        super(entityManager);\n         this.transaction = transaction;\n     }\n \n", "next_change": {"commit": "9c897058ce0b9656bf2aef2318d0addc474f278a", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/transaction/JtaTransaction.java b/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/transaction/JtaTransaction.java\nindex a96a95992..131e4a5b2 100644\n--- a/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/transaction/JtaTransaction.java\n+++ b/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/transaction/JtaTransaction.java\n", "chunk": "@@ -22,12 +23,12 @@ import javax.transaction.UserTransaction;\n @Slf4j\n public class JtaTransaction extends AbstractJpaTransaction {\n     private final UserTransaction transaction;\n-    public JtaTransaction(EntityManager entityManager) {\n-        this(entityManager, lookupUserTransaction());\n+    public JtaTransaction(EntityManager entityManager, Consumer<EntityManager> txCancel) {\n+        this(entityManager, lookupUserTransaction(), txCancel);\n     }\n \n-    public JtaTransaction(EntityManager entityManager, UserTransaction transaction) {\n-        super(entityManager);\n+    public JtaTransaction(EntityManager entityManager, UserTransaction transaction, Consumer<EntityManager> txCancel) {\n+        super(entityManager, txCancel);\n         this.transaction = transaction;\n     }\n \n", "next_change": {"commit": "6c97725cec25be900fd1466f627d3d0e722ed508", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/transaction/JtaTransaction.java b/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/transaction/JtaTransaction.java\nindex 131e4a5b2..d1cb1f9f9 100644\n--- a/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/transaction/JtaTransaction.java\n+++ b/elide-datastore/elide-datastore-jpa/src/main/java/com/yahoo/elide/datastores/jpa/transaction/JtaTransaction.java\n", "chunk": "@@ -23,12 +23,19 @@ import javax.transaction.UserTransaction;\n @Slf4j\n public class JtaTransaction extends AbstractJpaTransaction {\n     private final UserTransaction transaction;\n-    public JtaTransaction(EntityManager entityManager, Consumer<EntityManager> txCancel) {\n-        this(entityManager, lookupUserTransaction(), txCancel);\n-    }\n \n-    public JtaTransaction(EntityManager entityManager, UserTransaction transaction, Consumer<EntityManager> txCancel) {\n-        super(entityManager, txCancel);\n+    /**\n+     * Creates a new JPA transaction.\n+     * @param entityManager The entity manager / session.\n+     * @param txCancel A function which can cancel a session.\n+     * @param logger Logs queries.\n+     * @param delegateToInMemoryStore When fetching a subcollection from another multi-element collection,\n+     *                                whether or not to do sorting, filtering and pagination in memory - or\n+     *                                do N+1 queries.\n+     */\n+    public JtaTransaction(EntityManager entityManager, UserTransaction transaction, Consumer<EntityManager> txCancel,\n+                          QueryLogger logger, boolean delegateToInMemoryStore) {\n+        super(entityManager, txCancel, logger, delegateToInMemoryStore);\n         this.transaction = transaction;\n     }\n \n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "ff86c56fde9064e1719ea35660fd04c42c949662", "message": "Merge commit", "committedDate": null}, {"oid": "82df79169b68ec9e51172dda843cbc2b9fea907a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "addTransaction-removeTransaction (#1338)"}, {"oid": "9c897058ce0b9656bf2aef2318d0addc474f278a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "implement cancel function (#1367)"}, {"oid": "49e61867e840d9818993879436d5db1aad964c9a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Move data store interfaces (#1671)"}, {"oid": "6c97725cec25be900fd1466f627d3d0e722ed508", "committedDate": "2021-03-09 15:24:33 -0600", "message": "Add experimental n plus1 improvement (#1876)"}, {"oid": "76fff8684b7ea31d3ee1483aa4078d7949e5442f", "committedDate": "2021-08-12 09:37:43 -0500", "message": "Added enhanced logging around JPQL queries (#2249)"}, {"oid": "6ef850932d95d4895b960832b099354fdb5569bb", "committedDate": "2021-09-13 18:51:58 -0500", "message": "Elide 6.x (#2303)"}, {"oid": "6f26ba6377010a22403698d48d49ef2a4f897fde", "committedDate": "2021-10-17 15:04:42 -0500", "message": "Changing Oath to Yahoo in Copyright messages (#2340)"}, {"oid": "f21f35950fe465cfbf135d06cc8ae2321a29513a", "committedDate": "2023-02-04 15:34:06 -0600", "message": "Elide 7.x (#2876)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTYyMzU3Mg==", "url": "https://github.com/yahoo/elide/pull/1367#discussion_r441623572", "body": "txCancel was a better name than func.  I would change everywhere.", "bodyText": "txCancel was a better name than func.  I would change everywhere.", "bodyHTML": "<p dir=\"auto\">txCancel was a better name than func.  I would change everywhere.</p>", "author": "aklish", "createdAt": "2020-06-17T15:12:43Z", "path": "elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java", "diffHunk": "@@ -59,8 +60,7 @@\n      * @throws Exception Exception thrown.\n      */\n \n-     private final AbstractJpaTransaction.JpaTransactionCancel jTC = (e) -> { e.unwrap(Session.class).cancelQuery(); };\n-     private final SQLQueryEngine.TransactionCancel txCancel = (em) -> { em.unwrap(Session.class).cancelQuery(); };\n+     private final Consumer<EntityManager> func = (em) -> { em.unwrap(Session.class).cancelQuery(); };", "originalCommit": "10b08031c01a3228c6f335ba5b1d51b0da68f8e6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "127517bb46972dbe127cfd5e32d70439aa385381", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\nindex 6d992dade..bf98cbb1f 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n", "chunk": "@@ -60,7 +60,7 @@ public class ElideAutoConfiguration {\n      * @throws Exception Exception thrown.\n      */\n \n-     private final Consumer<EntityManager> func = (em) -> { em.unwrap(Session.class).cancelQuery(); };\n+     private final Consumer<EntityManager> txCancel = (em) -> { em.unwrap(Session.class).cancelQuery(); };\n \n     @Bean\n     @ConditionalOnMissingBean\n", "next_change": null}]}, "revised_code_in_main": {"commit": "ff86c56fde9064e1719ea35660fd04c42c949662", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\nindex 6d992dade..bf98cbb1f 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n", "chunk": "@@ -60,7 +60,7 @@ public class ElideAutoConfiguration {\n      * @throws Exception Exception thrown.\n      */\n \n-     private final Consumer<EntityManager> func = (em) -> { em.unwrap(Session.class).cancelQuery(); };\n+     private final Consumer<EntityManager> txCancel = (em) -> { em.unwrap(Session.class).cancelQuery(); };\n \n     @Bean\n     @ConditionalOnMissingBean\n", "next_change": {"commit": "bd516473fbeeb47ca05eaf510734f06432c4280a", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\nindex bf98cbb1f..ccd2fa78e 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n", "chunk": "@@ -50,30 +35,8 @@ import javax.persistence.EntityManagerFactory;\n  */\n @Configuration\n @EnableConfigurationProperties(ElideConfigProperties.class)\n-@Slf4j\n public class ElideAutoConfiguration {\n \n-    /**\n-     * Creates a entity compiler for compiling dynamic config classes.\n-     * @param settings Config Settings.\n-     * @return An instance of ElideDynamicEntityCompiler.\n-     * @throws Exception Exception thrown.\n-     */\n-\n-     private final Consumer<EntityManager> txCancel = (em) -> { em.unwrap(Session.class).cancelQuery(); };\n-\n-    @Bean\n-    @ConditionalOnMissingBean\n-    public ElideDynamicEntityCompiler buildElideDynamicEntityCompiler(ElideConfigProperties settings) throws Exception {\n-\n-        ElideDynamicEntityCompiler compiler = null;\n-\n-        if (isDynamicConfigEnabled(settings)) {\n-            compiler = new ElideDynamicEntityCompiler(settings.getDynamicConfig().getPath());\n-        }\n-        return compiler;\n-    }\n-\n     /**\n      * Creates the Elide instance with standard settings.\n      * @param dictionary Stores the static metadata about Elide models.\n", "next_change": {"commit": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\nindex ccd2fa78e..102e34fbf 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n", "chunk": "@@ -35,8 +47,27 @@ import javax.persistence.EntityManagerFactory;\n  */\n @Configuration\n @EnableConfigurationProperties(ElideConfigProperties.class)\n+@Slf4j\n public class ElideAutoConfiguration {\n \n+    /**\n+     * Creates a entity compiler for compiling dynamic config classes.\n+     * @param settings Config Settings.\n+     * @return An instance of ElideDynamicEntityCompiler.\n+     * @throws Exception Exception thrown.\n+     */\n+    @Bean\n+    @ConditionalOnMissingBean\n+    public ElideDynamicEntityCompiler buildElideDynamicEntityCompiler(ElideConfigProperties settings) throws Exception {\n+\n+        ElideDynamicEntityCompiler compiler = null;\n+\n+        if (settings.getDynamicConfig().isEnabled()) {\n+            compiler = new ElideDynamicEntityCompiler(settings.getDynamicConfig().getPath());\n+        }\n+        return compiler;\n+    }\n+\n     /**\n      * Creates the Elide instance with standard settings.\n      * @param dictionary Stores the static metadata about Elide models.\n", "next_change": {"commit": "ca35ad817f2fde68b2f9c39d0d4d9c9d44ebffd5", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\nindex 102e34fbf..bb259e966 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n", "chunk": "@@ -50,24 +66,49 @@ import javax.persistence.EntityManagerFactory;\n @Slf4j\n public class ElideAutoConfiguration {\n \n+    @Autowired(required = false)\n+    private MeterRegistry meterRegistry;\n+\n+    private final Consumer<EntityManager> txCancel = (em) -> { em.unwrap(Session.class).cancelQuery(); };\n+\n     /**\n      * Creates a entity compiler for compiling dynamic config classes.\n      * @param settings Config Settings.\n+     * @param dbPasswordExtractor : Password Extractor Implementation.\n      * @return An instance of ElideDynamicEntityCompiler.\n      * @throws Exception Exception thrown.\n      */\n     @Bean\n     @ConditionalOnMissingBean\n-    public ElideDynamicEntityCompiler buildElideDynamicEntityCompiler(ElideConfigProperties settings) throws Exception {\n+    @ConditionalOnProperty(name = \"elide.aggregation-store.enabled\", havingValue = \"true\")\n+    public ElideDynamicEntityCompiler buildElideDynamicEntityCompiler(ElideConfigProperties settings,\n+                    DBPasswordExtractor dbPasswordExtractor) throws Exception {\n \n         ElideDynamicEntityCompiler compiler = null;\n \n-        if (settings.getDynamicConfig().isEnabled()) {\n-            compiler = new ElideDynamicEntityCompiler(settings.getDynamicConfig().getPath());\n+        if (isDynamicConfigEnabled(settings)) {\n+            compiler = new ElideDynamicEntityCompiler(settings.getDynamicConfig().getPath(), dbPasswordExtractor);\n         }\n         return compiler;\n     }\n \n+    /**\n+     * Creates the default Password Extractor Implementation.\n+     * @return An instance of DBPasswordExtractor.\n+     */\n+    @Bean\n+    @ConditionalOnMissingBean\n+    @ConditionalOnProperty(name = \"elide.aggregation-store.enabled\", havingValue = \"true\")\n+    public DBPasswordExtractor getDBPasswordExtractor() {\n+\n+        return new DBPasswordExtractor() {\n+            @Override\n+            public String getDBPassword(DBConfig config) {\n+                return StringUtils.EMPTY;\n+            }\n+        };\n+    }\n+\n     /**\n      * Creates the Elide instance with standard settings.\n      * @param dictionary Stores the static metadata about Elide models.\n", "next_change": {"commit": "bea43ef0f244ba01c2f7d4216b9f08f0ef4e83a4", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\nindex bb259e966..11d4054e0 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n", "chunk": "@@ -109,6 +109,18 @@ public class ElideAutoConfiguration {\n         };\n     }\n \n+    /**\n+     * Provides the default Hikari DataSource Configuration.\n+     * @return An instance of DataSourceConfiguration.\n+     */\n+    @Bean\n+    @ConditionalOnMissingBean\n+    @ConditionalOnProperty(name = \"elide.aggregation-store.enabled\", havingValue = \"true\")\n+    public DataSourceConfiguration getDataSourceConfiguration() {\n+        return new DataSourceConfiguration() {\n+        };\n+    }\n+\n     /**\n      * Creates the Elide instance with standard settings.\n      * @param dictionary Stores the static metadata about Elide models.\n", "next_change": {"commit": "c38eb980af7f953202cb53faaed14595d3709ed9", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\nindex 11d4054e0..5ef33d35f 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n", "chunk": "@@ -125,41 +152,124 @@ public class ElideAutoConfiguration {\n      * Creates the Elide instance with standard settings.\n      * @param dictionary Stores the static metadata about Elide models.\n      * @param dataStore The persistence store.\n+     * @param transactionRegistry Global transaction registry.\n      * @param settings Elide settings.\n      * @return A new elide instance.\n      */\n     @Bean\n+    @RefreshScope\n     @ConditionalOnMissingBean\n-    public Elide initializeElide(EntityDictionary dictionary,\n-            DataStore dataStore, ElideConfigProperties settings) {\n+    public RefreshableElide getRefreshableElide(EntityDictionary dictionary,\n+                                                DataStore dataStore,\n+                                                TransactionRegistry transactionRegistry,\n+                                                ElideConfigProperties settings,\n+                                                JsonApiMapper mapper,\n+                                                ErrorMapper errorMapper) {\n \n         ElideSettingsBuilder builder = new ElideSettingsBuilder(dataStore)\n                 .withEntityDictionary(dictionary)\n+                .withErrorMapper(errorMapper)\n+                .withJsonApiMapper(mapper)\n                 .withDefaultMaxPageSize(settings.getMaxPageSize())\n                 .withDefaultPageSize(settings.getPageSize())\n-                .withJoinFilterDialect(new RSQLFilterDialect(dictionary))\n-                .withSubqueryFilterDialect(new RSQLFilterDialect(dictionary))\n+                .withJoinFilterDialect(RSQLFilterDialect.builder().dictionary(dictionary).build())\n+                .withSubqueryFilterDialect(RSQLFilterDialect.builder().dictionary(dictionary).build())\n                 .withAuditLogger(new Slf4jLogger())\n-                .withISO8601Dates(\"yyyy-MM-dd'T'HH:mm'Z'\", TimeZone.getTimeZone(\"UTC\"));\n+                .withBaseUrl(settings.getBaseUrl())\n+                .withISO8601Dates(\"yyyy-MM-dd'T'HH:mm'Z'\", TimeZone.getTimeZone(\"UTC\"))\n+                .withJsonApiPath(settings.getJsonApi().getPath())\n+                .withGraphQLApiPath(settings.getGraphql().getPath());\n+\n+        if (settings.isVerboseErrors()) {\n+            builder.withVerboseErrors();\n+        }\n+\n+        if (settings.getAsync() != null\n+                && settings.getAsync().getExport() != null\n+                && settings.getAsync().getExport().isEnabled()) {\n+            builder.withExportApiPath(settings.getAsync().getExport().getPath());\n+        }\n \n-        return new Elide(builder.build());\n+        if (settings.getJsonApi() != null\n+                && settings.getJsonApi().isEnabled()\n+                && settings.getJsonApi().isEnableLinks()) {\n+            String baseUrl = settings.getBaseUrl();\n+\n+            if (StringUtils.isEmpty(baseUrl)) {\n+                builder.withJSONApiLinks(new DefaultJSONApiLinks());\n+            } else {\n+                String jsonApiBaseUrl = baseUrl + settings.getJsonApi().getPath() + \"/\";\n+                builder.withJSONApiLinks(new DefaultJSONApiLinks(jsonApiBaseUrl));\n+            }\n+        }\n+\n+        Elide elide = new Elide(builder.build(), transactionRegistry, dictionary.getScanner(), true);\n+\n+        return new RefreshableElide(elide);\n+    }\n+\n+    @Bean\n+    @RefreshScope\n+    @ConditionalOnMissingBean\n+    public QueryRunners getQueryRunners(RefreshableElide refreshableElide) {\n+        return new QueryRunners(refreshableElide);\n+    }\n+\n+    /**\n+     * A Set containing Types to be excluded from EntityDictionary's EntityBinding.\n+     * @param settings Elide configuration settings.\n+     * @return Set of Types.\n+     */\n+    @Bean(name = \"entitiesToExclude\")\n+    @ConditionalOnMissingBean\n+    public Set<Type<?>> getEntitiesToExclude(ElideConfigProperties settings) {\n+        Set<Type<?>> entitiesToExclude = new HashSet<>();\n+\n+        AsyncProperties asyncProperties = settings.getAsync();\n+\n+        if (asyncProperties == null || !asyncProperties.isEnabled()) {\n+            entitiesToExclude.add(ClassType.of(AsyncQuery.class));\n+        }\n+\n+        boolean exportEnabled = isExportEnabled(asyncProperties);\n+\n+        if (!exportEnabled) {\n+            entitiesToExclude.add(ClassType.of(TableExport.class));\n+        }\n+\n+        return entitiesToExclude;\n     }\n \n     /**\n      * Creates the entity dictionary for Elide which contains static metadata about Elide models.\n      * Override to load check classes or life cycle hooks.\n      * @param beanFactory Injector to inject Elide models.\n-     * @param dynamicCompiler An instance of objectprovider for ElideDynamicEntityCompiler.\n+     * @param dynamicConfig An instance of DynamicConfiguration.\n      * @param settings Elide configuration settings.\n+     * @param entitiesToExclude set of Entities to exclude from binding.\n      * @return a newly configured EntityDictionary.\n-     * @throws ClassNotFoundException Exception thrown.\n      */\n     @Bean\n     @ConditionalOnMissingBean\n+    @Scope(SCOPE_PROTOTYPE)\n     public EntityDictionary buildDictionary(AutowireCapableBeanFactory beanFactory,\n-            ObjectProvider<ElideDynamicEntityCompiler> dynamicCompiler, ElideConfigProperties settings)\n-            throws ClassNotFoundException {\n-        EntityDictionary dictionary = new EntityDictionary(new HashMap<>(),\n+                                            ClassScanner scanner,\n+                                            @Autowired(required = false) DynamicConfiguration dynamicConfig,\n+                                            ElideConfigProperties settings,\n+                                            @Qualifier(\"entitiesToExclude\") Set<Type<?>> entitiesToExclude) {\n+\n+        Map<String, Class<? extends Check>> checks = new HashMap<>();\n+\n+        if (settings.getDynamicConfig().isConfigApiEnabled()) {\n+            checks.put(ConfigChecks.CAN_CREATE_CONFIG, ConfigChecks.CanNotCreate.class);\n+            checks.put(ConfigChecks.CAN_READ_CONFIG, ConfigChecks.CanNotRead.class);\n+            checks.put(ConfigChecks.CAN_DELETE_CONFIG, ConfigChecks.CanNotDelete.class);\n+            checks.put(ConfigChecks.CAN_UPDATE_CONFIG, ConfigChecks.CanNotUpdate.class);\n+        }\n+\n+        EntityDictionary dictionary = new EntityDictionary(\n+                checks, //Checks\n+                new HashMap<>(), //Role Checks\n                 new Injector() {\n                     @Override\n                     public void inject(Object entity) {\n", "next_change": {"commit": "8adc4439ded747d4dd1191ad5fed6131bde39cb6", "changed_code": [{"header": "diff --git a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\nindex 5ef33d35f..d32384a4b 100644\n--- a/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n+++ b/elide-spring/elide-spring-boot-autoconfigure/src/main/java/com/yahoo/elide/spring/config/ElideAutoConfiguration.java\n", "chunk": "@@ -270,17 +313,7 @@ public class ElideAutoConfiguration {\n         EntityDictionary dictionary = new EntityDictionary(\n                 checks, //Checks\n                 new HashMap<>(), //Role Checks\n-                new Injector() {\n-                    @Override\n-                    public void inject(Object entity) {\n-                        beanFactory.autowireBean(entity);\n-                    }\n-\n-                    @Override\n-                    public <T> T instantiate(Class<T> cls) {\n-                        return beanFactory.createBean(cls);\n-                    }\n-                },\n+                injector,\n                 CoerceUtil::lookup, //Serde Lookup\n                 entitiesToExclude,\n                 scanner);\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "ff86c56fde9064e1719ea35660fd04c42c949662", "message": "Merge commit", "committedDate": null}, {"oid": "bd516473fbeeb47ca05eaf510734f06432c4280a", "committedDate": "2020-06-03 09:09:44 -0500", "message": "Disabling Legacy Filter Dialect in Swagger Documentation (#1363)"}, {"oid": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "parent a14ccfbb7b558d27799b4e7b1916850519639708 author Jack (\uc815\ud658) <QubitPi@users.noreply.github.com> 1559678988 -0700 committer Aaron Klish <klish@verizonmedia.com> 1589583449 -0500"}, {"oid": "b55b769236519aa81a171321c14ee0ac8315908f", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Async ID change from UUID to String and Dynamic Config FIx (#1325)"}, {"oid": "81dde7567aa8a6a00822a9a8f0bf901806a962e8", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add caching support to SQLQueryEngine (#1319)"}, {"oid": "9c897058ce0b9656bf2aef2318d0addc474f278a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "implement cancel function (#1367)"}, {"oid": "9ff0eb6bfa7f8f0135d21cf68cb1e44c5d515d91", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Enable query caching by default (#1378)"}, {"oid": "9c8fe001d36753349ad1f7df83029e1c8d8edcac", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Multiplex Transaction Lazy Initialize and Dynamic Config fixes (#1383)"}, {"oid": "d31cff91c7452ae4b07bcc2006b70f15474b4198", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Fixes for query cache spring integration (#1381)"}, {"oid": "8fece2b8f1b3078ce2598ddb03dca66bb984df46", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Aggregation DataStore QueryLogger Implementation (#1448)"}, {"oid": "7c8fece25f8dddbe975f0072bf0267def2610ff4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Disable Aggregation DataStore by default (#1468)"}, {"oid": "5c065ad65fcda862269b5e31a8b6dc5d8c828aaa", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Data export - Refactoring and Prep for using ResultStorageEngine (#1527)"}, {"oid": "ca35ad817f2fde68b2f9c39d0d4d9c9d44ebffd5", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Query Engine and Aggregation Store Changes for Multi Data Source Support (#1523)"}, {"oid": "b8d0918e2f6f438eda12c12e58354a8cad3719dd", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Added item expiration to AggregationDataStore cache (#1564)"}, {"oid": "1933cc3eb6788be5fce69b1d97c6ae589623495f", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add slf4j query logger (#1618)"}, {"oid": "26bef0c192b549ed701287814055e5e7ac175a50", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Collapsed contrib directory into top level modules (#1670)"}, {"oid": "49e61867e840d9818993879436d5db1aad964c9a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Move data store interfaces (#1671)"}, {"oid": "911d29408bdeeb4ff8d78f2beea2417be4e7c673", "committedDate": "2020-12-11 16:20:28 -0600", "message": "cleaned up package hierarchy for elide-core (#1672)"}, {"oid": "c14096bec256faf80e7674fbef22bccff1f955a3", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Moved contrib.dynamicconfighelpers to modelconfig package (#1676)"}, {"oid": "800ba874c21672a727aed4e1beacb294bfb5022e", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5.x MetaDataStore enable/disable flag (#1696)"}, {"oid": "bea43ef0f244ba01c2f7d4216b9f08f0ef4e83a4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Optionally compile hjson configs while running CLI (#1693)"}, {"oid": "7dcb449ad9bf24c3c12601209803a0f05420e380", "committedDate": "2021-01-07 23:13:06 -0600", "message": "Only build swagger if the controller is activated"}, {"oid": "6ce117b6c68f6a2fc484e3c9ba7b76ace9c596ff", "committedDate": "2021-01-08 17:36:00 -0600", "message": "Added baseUrl configuration setting for Spring and Standalone"}, {"oid": "4641781684344dd25e47bdbe1a8aa6f28881d627", "committedDate": "2021-01-12 09:00:58 -0600", "message": "Added a new setting to Spring to enable/disable JSON-API links"}, {"oid": "79b23531edc46cebc43e889d7ac4727540a72105", "committedDate": "2021-01-19 14:16:37 -0600", "message": "Syntax Fixes"}, {"oid": "de9883d363ba8b4171be5d8ad508564664f6fc90", "committedDate": "2021-01-19 14:16:37 -0600", "message": "Review comments"}, {"oid": "fe3198d3cacec95d4b064ccae7109874e58d9e96", "committedDate": "2021-01-20 10:43:28 -0600", "message": "Review Comments"}, {"oid": "bca9aca28661c202a018a1c929ea888eaf8d83c7", "committedDate": "2021-01-20 10:43:28 -0600", "message": "Review Comments"}, {"oid": "93ebb969254204bd315de860bd064ca77e70cfab", "committedDate": "2021-01-29 11:36:47 -0500", "message": "TableExportHook Binding (#1802)"}, {"oid": "dcb6336070c158b923a8e5a7ec92502ea57f36ee", "committedDate": "2021-02-09 10:45:00 -0600", "message": "Add dynamic table type (#1815)"}, {"oid": "d77f1240a3fa5abf824aea54d0533be844235359", "committedDate": "2021-02-11 10:18:49 -0600", "message": "Created new interface for dynamic configuration (#1830)"}, {"oid": "af0aad2498f81659177eff1bbcfbf49213baf7b9", "committedDate": "2021-02-15 13:19:22 -0500", "message": "Exclude Models based on Conditions (#1835)"}, {"oid": "2eb90f1b8513e246930e5419e838b3fb1f7bbb98", "committedDate": "2021-02-18 11:42:05 -0600", "message": "Integration Tests for Table Export (#1842)"}, {"oid": "e2005d6babde1a0da3ba66fc507fc6ecf5773052", "committedDate": "2021-02-22 10:34:54 -0600", "message": "Cleanup unnecessary syntax (#1854)"}, {"oid": "6c97725cec25be900fd1466f627d3d0e722ed508", "committedDate": "2021-03-09 15:24:33 -0600", "message": "Add experimental n plus1 improvement (#1876)"}, {"oid": "8274a6341e06c7201049e8e8f0a48f07bd99a0ef", "committedDate": "2021-03-10 16:38:34 -0600", "message": "Cleanup IDE warnings (#1894)"}, {"oid": "c19d8c2237e960d792dc2ef6375356433b4fac21", "committedDate": "2021-03-11 17:10:26 -0600", "message": "Classtype cleanup (#1905)"}, {"oid": "e1e07dbeabb690560754c84200b67e7a8d4d9229", "committedDate": "2021-03-22 09:06:06 -0500", "message": "Part 4 of Query Plan Optimization : Fix Metric Nesting (#1924)"}, {"oid": "ed941827e1027083367b4df9794501909279c667", "committedDate": "2021-03-25 22:55:35 -0400", "message": "diamonds to reduce duplication (#1947)"}, {"oid": "dc7a367e14c9f43b2d013f5037341055a29f0491", "committedDate": "2021-03-26 10:31:26 -0400", "message": "Issue 1929 - Address Sonar suggestions (#1925)"}, {"oid": "43598e8411d544b31d9807ded4f248e25ef334a4", "committedDate": "2021-04-01 17:32:17 -0500", "message": "Add Table Level Query Hints (#1981)"}, {"oid": "98f612f023448a93324aaed11e00d6d4fa730c74", "committedDate": "2021-04-08 22:39:32 -0400", "message": "Issue 1929 - Clean up code quality (#1964)"}, {"oid": "6143d108eb7b1a2250370409d5362c6722c95b23", "committedDate": "2021-04-26 16:28:58 -0500", "message": "Cleanup (#2026)"}, {"oid": "ea57369f2b8af263efd9de99bfe59cae1b88202a", "committedDate": "2021-04-29 21:02:18 -0500", "message": "Test Cases + Enable Namespace in Standalone and Spring (#2040)"}, {"oid": "b911028feb3655bb897041047caa7602f3f0c761", "committedDate": "2021-05-02 21:51:37 -0500", "message": "Add missing default values for ElideAutoConfiguration (#2052)"}, {"oid": "0a3776bacb5809845d9a04a1263db9760f117b92", "committedDate": "2021-05-13 13:25:15 -0500", "message": "Injection Protection for parameterized metrics/dimensions (#2090)"}, {"oid": "c55eca8c6cc828610faf39d0ea62d2a0a897696b", "committedDate": "2021-08-05 09:52:57 -0500", "message": "Add simple configuration to enable verbose errors. (#2236)"}, {"oid": "fe7009353573baf0206f7bb58617db97e067f900", "committedDate": "2021-09-02 11:31:12 -0500", "message": "Refactor class scanning for quarkus (#2284)"}, {"oid": "65eaaa12fc2b805135285287d4912d2329bc676d", "committedDate": "2021-09-13 14:02:45 -0500", "message": "Add ability to map unknown exceptions to custom exceptions (#2205)"}, {"oid": "6a319f244f5b611d3702e46013c5f8c988b5a957", "committedDate": "2021-09-30 13:42:41 -0500", "message": "GraphQL Subscriptions: Part 5 (#2308)"}, {"oid": "64325a03c2d0e965e2543c3c52a9ddc0de570c03", "committedDate": "2021-10-07 14:58:50 -0500", "message": "Aggregation Store: Relaxing rules for how filter templates are compared against filter e\u2026 (#2329)"}, {"oid": "5064f8a5a351b1f77b8025f68b20efc1b76d101e", "committedDate": "2021-10-19 11:25:38 -0500", "message": "Elide 6 : Refactor DataStoreTransaction Interface. (#2334)"}, {"oid": "54cdcb9fe67225cd463e1bf9357f0e1d2a42c152", "committedDate": "2021-12-02 15:11:51 -0600", "message": "HJSON Configuration Models and DataStore (#2418)"}, {"oid": "d554658425300df2210df1e67110f0b7588633e0", "committedDate": "2022-01-05 15:50:55 -0600", "message": "Enable lifecycle, check, and other entity scans by default for Spring. (#2470)"}, {"oid": "c38eb980af7f953202cb53faaed14595d3709ed9", "committedDate": "2022-01-21 10:03:29 -0600", "message": "Refresh scope beans (#2409)"}, {"oid": "d0552c5750608391d52e3e3286469901726a7d06", "committedDate": "2022-01-28 16:02:28 -0600", "message": "Support filters on query plans (#2526)"}, {"oid": "abb32869ab0e97b8ceaa1bd61b53c579b4ca1c65", "committedDate": "2022-04-22 15:17:21 -0500", "message": "Header filtering config (#2627)"}, {"oid": "8adc4439ded747d4dd1191ad5fed6131bde39cb6", "committedDate": "2022-04-26 16:56:53 -0500", "message": "Add Injector Bean (#2637)"}, {"oid": "af3e1d9d64479e3ca0f5141bec8b906843d11248", "committedDate": "2022-05-05 21:14:51 -0500", "message": "Minimum to expose _service.sdl for Apollo federation. (#2640)"}, {"oid": "c0a0f0ad9a1a9bbb9938e3225f27b2d191b82e79", "committedDate": "2022-09-15 21:47:40 -0500", "message": "Only build query runner if graphQL is enabled (#2766)"}, {"oid": "f03aba8c1f854a9c0c286fad97c30d2fed5ffe08", "committedDate": "2022-09-22 18:59:56 -0500", "message": "Allow elide-graphql to be excluded when elide.graphql.enabled=false (#2787)"}, {"oid": "f21f35950fe465cfbf135d06cc8ae2321a29513a", "committedDate": "2023-02-04 15:34:06 -0600", "message": "Elide 7.x (#2876)"}, {"oid": "119ea75d9ad68b27361326e9837ef1627afd3169", "committedDate": "2023-03-20 18:16:04 -0500", "message": "Fixes #2912 (#2931)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTYyNDI5NQ==", "url": "https://github.com/yahoo/elide/pull/1367#discussion_r441624295", "body": "Rename to TXCANCEL", "bodyText": "Rename to TXCANCEL", "bodyHTML": "<p dir=\"auto\">Rename to TXCANCEL</p>", "author": "aklish", "createdAt": "2020-06-17T15:13:33Z", "path": "elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java", "diffHunk": "@@ -59,8 +59,7 @@\n public interface ElideStandaloneSettings {\n     /* Elide settings */\n \n-     public final AbstractJpaTransaction.JpaTransactionCancel JTC = (m) -> { m.unwrap(Session.class).cancelQuery(); };\n-     public final SQLQueryEngine.TransactionCancel TXCANCEL = (m) -> { m.unwrap(Session.class).cancelQuery(); };\n+     public final Consumer<EntityManager> FUNC = (em) -> { em.unwrap(Session.class).cancelQuery(); };", "originalCommit": "10b08031c01a3228c6f335ba5b1d51b0da68f8e6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "127517bb46972dbe127cfd5e32d70439aa385381", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 7e16c486e..7e9a2aeb8 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -59,7 +59,7 @@ import javax.persistence.EntityManagerFactory;\n public interface ElideStandaloneSettings {\n     /* Elide settings */\n \n-     public final Consumer<EntityManager> FUNC = (em) -> { em.unwrap(Session.class).cancelQuery(); };\n+     public final Consumer<EntityManager> TXCANCEL = (em) -> { em.unwrap(Session.class).cancelQuery(); };\n \n     /**\n      * A map containing check mappings for security across Elide. If not provided, then an empty map is used.\n", "next_change": null}]}, "revised_code_in_main": {"commit": "ff86c56fde9064e1719ea35660fd04c42c949662", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 7e16c486e..7e9a2aeb8 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -59,7 +59,7 @@ import javax.persistence.EntityManagerFactory;\n public interface ElideStandaloneSettings {\n     /* Elide settings */\n \n-     public final Consumer<EntityManager> FUNC = (em) -> { em.unwrap(Session.class).cancelQuery(); };\n+     public final Consumer<EntityManager> TXCANCEL = (em) -> { em.unwrap(Session.class).cancelQuery(); };\n \n     /**\n      * A map containing check mappings for security across Elide. If not provided, then an empty map is used.\n", "next_change": {"commit": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 7e9a2aeb8..00b641dbb 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -58,9 +38,6 @@ import javax.persistence.EntityManagerFactory;\n  */\n public interface ElideStandaloneSettings {\n     /* Elide settings */\n-\n-     public final Consumer<EntityManager> TXCANCEL = (em) -> { em.unwrap(Session.class).cancelQuery(); };\n-\n     /**\n      * A map containing check mappings for security across Elide. If not provided, then an empty map is used.\n      * In case of an empty map, checks can be referenced by their fully qualified class names.\n", "next_change": {"commit": "9c897058ce0b9656bf2aef2318d0addc474f278a", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 00b641dbb..7e9a2aeb8 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -38,6 +58,9 @@ import javax.persistence.EntityManagerFactory;\n  */\n public interface ElideStandaloneSettings {\n     /* Elide settings */\n+\n+     public final Consumer<EntityManager> TXCANCEL = (em) -> { em.unwrap(Session.class).cancelQuery(); };\n+\n     /**\n      * A map containing check mappings for security across Elide. If not provided, then an empty map is used.\n      * In case of an empty map, checks can be referenced by their fully qualified class names.\n", "next_change": {"commit": "e2005d6babde1a0da3ba66fc507fc6ecf5773052", "changed_code": [{"header": "diff --git a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\nindex 7e9a2aeb8..c859655ef 100644\n--- a/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n+++ b/elide-standalone/src/main/java/com/yahoo/elide/standalone/config/ElideStandaloneSettings.java\n", "chunk": "@@ -59,7 +68,7 @@ import javax.persistence.EntityManagerFactory;\n public interface ElideStandaloneSettings {\n     /* Elide settings */\n \n-     public final Consumer<EntityManager> TXCANCEL = (em) -> { em.unwrap(Session.class).cancelQuery(); };\n+     public final Consumer<EntityManager> TXCANCEL = em -> em.unwrap(Session.class).cancelQuery();\n \n     /**\n      * A map containing check mappings for security across Elide. If not provided, then an empty map is used.\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "ff86c56fde9064e1719ea35660fd04c42c949662", "message": "Merge commit", "committedDate": null}, {"oid": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "parent a14ccfbb7b558d27799b4e7b1916850519639708 author Jack (\uc815\ud658) <QubitPi@users.noreply.github.com> 1559678988 -0700 committer Aaron Klish <klish@verizonmedia.com> 1589583449 -0500"}, {"oid": "95b3031194e0e0f2394228d6a6525a80f13fef04", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5.x dynamic config standalone (#1259)"}, {"oid": "81dde7567aa8a6a00822a9a8f0bf901806a962e8", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add caching support to SQLQueryEngine (#1319)"}, {"oid": "9c897058ce0b9656bf2aef2318d0addc474f278a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "implement cancel function (#1367)"}, {"oid": "9ff0eb6bfa7f8f0135d21cf68cb1e44c5d515d91", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Enable query caching by default (#1378)"}, {"oid": "8fece2b8f1b3078ce2598ddb03dca66bb984df46", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Aggregation DataStore QueryLogger Implementation (#1448)"}, {"oid": "7c8fece25f8dddbe975f0072bf0267def2610ff4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Disable Aggregation DataStore by default (#1468)"}, {"oid": "80c38a134a938bfb74583d9efb6d0c2b80c39e61", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Cancel long running or cancelled async queries (#1447)"}, {"oid": "5c065ad65fcda862269b5e31a8b6dc5d8c828aaa", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Data export - Refactoring and Prep for using ResultStorageEngine (#1527)"}, {"oid": "ca35ad817f2fde68b2f9c39d0d4d9c9d44ebffd5", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Query Engine and Aggregation Store Changes for Multi Data Source Support (#1523)"}, {"oid": "bbbfb1a7522b64ef2f7fc42bae2c0f65491d1c04", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Update timegrain serde to return java.sql.Date instead of java.util.Date (#1552)"}, {"oid": "b8d0918e2f6f438eda12c12e58354a8cad3719dd", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Added item expiration to AggregationDataStore cache (#1564)"}, {"oid": "1933cc3eb6788be5fce69b1d97c6ae589623495f", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add slf4j query logger (#1618)"}, {"oid": "26bef0c192b549ed701287814055e5e7ac175a50", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Collapsed contrib directory into top level modules (#1670)"}, {"oid": "49e61867e840d9818993879436d5db1aad964c9a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Move data store interfaces (#1671)"}, {"oid": "911d29408bdeeb4ff8d78f2beea2417be4e7c673", "committedDate": "2020-12-11 16:20:28 -0600", "message": "cleaned up package hierarchy for elide-core (#1672)"}, {"oid": "cf1726f19ece846111b004b8f01fd1c135fa39b4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Create separate class for Analytics settings (#1669)"}, {"oid": "c14096bec256faf80e7674fbef22bccff1f955a3", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Moved contrib.dynamicconfighelpers to modelconfig package (#1676)"}, {"oid": "800ba874c21672a727aed4e1beacb294bfb5022e", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5.x MetaDataStore enable/disable flag (#1696)"}, {"oid": "bea43ef0f244ba01c2f7d4216b9f08f0ef4e83a4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Optionally compile hjson configs while running CLI (#1693)"}, {"oid": "6ce117b6c68f6a2fc484e3c9ba7b76ace9c596ff", "committedDate": "2021-01-08 17:36:00 -0600", "message": "Added baseUrl configuration setting for Spring and Standalone"}, {"oid": "79b23531edc46cebc43e889d7ac4727540a72105", "committedDate": "2021-01-19 14:16:37 -0600", "message": "Syntax Fixes"}, {"oid": "de9883d363ba8b4171be5d8ad508564664f6fc90", "committedDate": "2021-01-19 14:16:37 -0600", "message": "Review comments"}, {"oid": "fe3198d3cacec95d4b064ccae7109874e58d9e96", "committedDate": "2021-01-20 10:43:28 -0600", "message": "Review Comments"}, {"oid": "bca9aca28661c202a018a1c929ea888eaf8d83c7", "committedDate": "2021-01-20 10:43:28 -0600", "message": "Review Comments"}, {"oid": "93ebb969254204bd315de860bd064ca77e70cfab", "committedDate": "2021-01-29 11:36:47 -0500", "message": "TableExportHook Binding (#1802)"}, {"oid": "dcb6336070c158b923a8e5a7ec92502ea57f36ee", "committedDate": "2021-02-09 10:45:00 -0600", "message": "Add dynamic table type (#1815)"}, {"oid": "d77f1240a3fa5abf824aea54d0533be844235359", "committedDate": "2021-02-11 10:18:49 -0600", "message": "Created new interface for dynamic configuration (#1830)"}, {"oid": "af0aad2498f81659177eff1bbcfbf49213baf7b9", "committedDate": "2021-02-15 13:19:22 -0500", "message": "Exclude Models based on Conditions (#1835)"}, {"oid": "2eb90f1b8513e246930e5419e838b3fb1f7bbb98", "committedDate": "2021-02-18 11:42:05 -0600", "message": "Integration Tests for Table Export (#1842)"}, {"oid": "e2005d6babde1a0da3ba66fc507fc6ecf5773052", "committedDate": "2021-02-22 10:34:54 -0600", "message": "Cleanup unnecessary syntax (#1854)"}, {"oid": "6c97725cec25be900fd1466f627d3d0e722ed508", "committedDate": "2021-03-09 15:24:33 -0600", "message": "Add experimental n plus1 improvement (#1876)"}, {"oid": "8274a6341e06c7201049e8e8f0a48f07bd99a0ef", "committedDate": "2021-03-10 16:38:34 -0600", "message": "Cleanup IDE warnings (#1894)"}, {"oid": "c19d8c2237e960d792dc2ef6375356433b4fac21", "committedDate": "2021-03-11 17:10:26 -0600", "message": "Classtype cleanup (#1905)"}, {"oid": "e1e07dbeabb690560754c84200b67e7a8d4d9229", "committedDate": "2021-03-22 09:06:06 -0500", "message": "Part 4 of Query Plan Optimization : Fix Metric Nesting (#1924)"}, {"oid": "ed941827e1027083367b4df9794501909279c667", "committedDate": "2021-03-25 22:55:35 -0400", "message": "diamonds to reduce duplication (#1947)"}, {"oid": "dc7a367e14c9f43b2d013f5037341055a29f0491", "committedDate": "2021-03-26 10:31:26 -0400", "message": "Issue 1929 - Address Sonar suggestions (#1925)"}, {"oid": "43598e8411d544b31d9807ded4f248e25ef334a4", "committedDate": "2021-04-01 17:32:17 -0500", "message": "Add Table Level Query Hints (#1981)"}, {"oid": "6143d108eb7b1a2250370409d5362c6722c95b23", "committedDate": "2021-04-26 16:28:58 -0500", "message": "Cleanup (#2026)"}, {"oid": "ea57369f2b8af263efd9de99bfe59cae1b88202a", "committedDate": "2021-04-29 21:02:18 -0500", "message": "Test Cases + Enable Namespace in Standalone and Spring (#2040)"}, {"oid": "0a3776bacb5809845d9a04a1263db9760f117b92", "committedDate": "2021-05-13 13:25:15 -0500", "message": "Injection Protection for parameterized metrics/dimensions (#2090)"}, {"oid": "c55eca8c6cc828610faf39d0ea62d2a0a897696b", "committedDate": "2021-08-05 09:52:57 -0500", "message": "Add simple configuration to enable verbose errors. (#2236)"}, {"oid": "fe7009353573baf0206f7bb58617db97e067f900", "committedDate": "2021-09-02 11:31:12 -0500", "message": "Refactor class scanning for quarkus (#2284)"}, {"oid": "65eaaa12fc2b805135285287d4912d2329bc676d", "committedDate": "2021-09-13 14:02:45 -0500", "message": "Add ability to map unknown exceptions to custom exceptions (#2205)"}, {"oid": "6a319f244f5b611d3702e46013c5f8c988b5a957", "committedDate": "2021-09-30 13:42:41 -0500", "message": "GraphQL Subscriptions: Part 5 (#2308)"}, {"oid": "64325a03c2d0e965e2543c3c52a9ddc0de570c03", "committedDate": "2021-10-07 14:58:50 -0500", "message": "Aggregation Store: Relaxing rules for how filter templates are compared against filter e\u2026 (#2329)"}, {"oid": "6f26ba6377010a22403698d48d49ef2a4f897fde", "committedDate": "2021-10-17 15:04:42 -0500", "message": "Changing Oath to Yahoo in Copyright messages (#2340)"}, {"oid": "5064f8a5a351b1f77b8025f68b20efc1b76d101e", "committedDate": "2021-10-19 11:25:38 -0500", "message": "Elide 6 : Refactor DataStoreTransaction Interface. (#2334)"}, {"oid": "54cdcb9fe67225cd463e1bf9357f0e1d2a42c152", "committedDate": "2021-12-02 15:11:51 -0600", "message": "HJSON Configuration Models and DataStore (#2418)"}, {"oid": "d0552c5750608391d52e3e3286469901726a7d06", "committedDate": "2022-01-28 16:02:28 -0600", "message": "Support filters on query plans (#2526)"}, {"oid": "f21f35950fe465cfbf135d06cc8ae2321a29513a", "committedDate": "2023-02-04 15:34:06 -0600", "message": "Elide 7.x (#2876)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTYyNTA0NA==", "url": "https://github.com/yahoo/elide/pull/1367#discussion_r441625044", "body": "Let's add javadoc for cancel (close isn't needed because it is an Override).", "bodyText": "Let's add javadoc for cancel (close isn't needed because it is an Override).", "bodyHTML": "<p dir=\"auto\">Let's add javadoc for cancel (close isn't needed because it is an Override).</p>", "author": "aklish", "createdAt": "2020-06-17T15:14:37Z", "path": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java", "diffHunk": "@@ -157,6 +156,7 @@ private void populateMetaData(MetaDataStore metaDataStore) {\n     public interface Transaction extends AutoCloseable {\n         @Override\n         void close();\n+        void cancel();", "originalCommit": "10b08031c01a3228c6f335ba5b1d51b0da68f8e6", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "127517bb46972dbe127cfd5e32d70439aa385381", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\nindex 5338bc3ad..74c41318f 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\n", "chunk": "@@ -156,6 +156,10 @@ public abstract class QueryEngine {\n     public interface Transaction extends AutoCloseable {\n         @Override\n         void close();\n+\n+        /**\n+         * Cancels running transaction\n+         */\n         void cancel();\n     }\n \n", "next_change": null}]}, "revised_code_in_main": {"commit": "ff86c56fde9064e1719ea35660fd04c42c949662", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\nindex 5338bc3ad..74c41318f 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\n", "chunk": "@@ -156,6 +156,10 @@ public abstract class QueryEngine {\n     public interface Transaction extends AutoCloseable {\n         @Override\n         void close();\n+\n+        /**\n+         * Cancels running transaction\n+         */\n         void cancel();\n     }\n \n", "next_change": {"commit": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\nindex 74c41318f..6c57bce21 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\n", "chunk": "@@ -150,40 +159,15 @@ public abstract class QueryEngine {\n                 .forEach(metaDataStore::addTable);\n     }\n \n-    /**\n-     * Contains state necessary for query execution.\n-     */\n-    public interface Transaction extends AutoCloseable {\n-        @Override\n-        void close();\n-\n-        /**\n-         * Cancels running transaction\n-         */\n-        void cancel();\n-    }\n-\n-    public abstract Transaction beginTransaction();\n-\n     /**\n      * Executes the specified {@link Query} against a specific persistent storage, which understand the provided\n      * {@link Query}. Results may be taken from a cache, if configured.\n      *\n-     * @param query The query customized for a particular persistent storage or storage client\n-     * @param transaction\n+     * @param query    The query customized for a particular persistent storage or storage client\n+     * @param useCache Whether to use the cache, if configured\n      * @return query results\n      */\n-    public abstract QueryResult executeQuery(Query query, Transaction transaction);\n-\n-    /**\n-     * Get a serial number or other token indicating the version of the data in the table.\n-     * No particular semantics are required, though it must change if the data changes.\n-     * If one is not available, returns null, which will prevent caching this table.\n-     * @param table The table to get version of\n-     * @param transaction The transaction to use for the lookup\n-     * @return a version token, or null if not available.\n-     */\n-    public abstract String getTableVersion(Table table, Transaction transaction);\n+    public abstract Iterable<Object> executeQuery(Query query, boolean useCache);\n \n     /**\n      * Returns the schema for a given entity class.\n", "next_change": {"commit": "3f34e76977a5a591eca1f8c00ac986562a38d250", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\nindex 6c57bce21..4308e4db1 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\n", "chunk": "@@ -163,11 +160,10 @@ public abstract class QueryEngine {\n      * Executes the specified {@link Query} against a specific persistent storage, which understand the provided\n      * {@link Query}. Results may be taken from a cache, if configured.\n      *\n-     * @param query    The query customized for a particular persistent storage or storage client\n-     * @param useCache Whether to use the cache, if configured\n+     * @param query The query customized for a particular persistent storage or storage client\n      * @return query results\n      */\n-    public abstract Iterable<Object> executeQuery(Query query, boolean useCache);\n+    public abstract QueryResult executeQuery(Query query);\n \n     /**\n      * Returns the schema for a given entity class.\n", "next_change": {"commit": "81dde7567aa8a6a00822a9a8f0bf901806a962e8", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\nindex 4308e4db1..2e7a94a11 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\n", "chunk": "@@ -156,14 +151,35 @@ public abstract class QueryEngine {\n                 .forEach(metaDataStore::addTable);\n     }\n \n+    /**\n+     * Contains state necessary for query execution.\n+     */\n+    public interface Transaction extends AutoCloseable {\n+        @Override\n+        void close();\n+    }\n+\n+    public abstract Transaction beginTransaction();\n+\n     /**\n      * Executes the specified {@link Query} against a specific persistent storage, which understand the provided\n      * {@link Query}. Results may be taken from a cache, if configured.\n      *\n      * @param query The query customized for a particular persistent storage or storage client\n+     * @param transaction\n      * @return query results\n      */\n-    public abstract QueryResult executeQuery(Query query);\n+    public abstract QueryResult executeQuery(Query query, Transaction transaction);\n+\n+    /**\n+     * Get a serial number or other token indicating the version of the data in the table.\n+     * No particular semantics are required, though it must change if the data changes.\n+     * If one is not available, returns null, which will prevent caching this table.\n+     * @param table The table to get version of\n+     * @param transaction The transaction to use for the lookup\n+     * @return a version token, or null if not available.\n+     */\n+    public abstract String getTableVersion(Table table, Transaction transaction);\n \n     /**\n      * Returns the schema for a given entity class.\n", "next_change": {"commit": "ecb1fb18fc0ca7ee3c47924bd5cdcc8d25d8f06c", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\nindex 2e7a94a11..f5d273c6b 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\n", "chunk": "@@ -187,6 +193,30 @@ public abstract class QueryEngine {\n      * @return The schema that represents the provided entity.\n      */\n     public Table getTable(String classAlias) {\n-        return tables.get(classAlias);\n+        return tables\n+                    .entrySet()\n+                    .stream()\n+                    .filter(entry -> entry.getKey().getName().equalsIgnoreCase(classAlias))\n+                    .map(entry -> entry.getValue())\n+                    .findFirst()\n+                    .orElse(null);\n     }\n+\n+    /**\n+     * Returns the schema for a given entity class.\n+     * @param tableId Composite Id for the table\n+     * @return The schema that represents the provided entity.\n+     */\n+    public Table getTable(TableId tableId) {\n+        return tables.get(tableId);\n+    }\n+\n+    /**\n+     * Returns the actual query string(s) that would be executed for the input {@link Query}.\n+     *\n+     * @param query The query customized for a particular persistent storage or storage client.\n+     * @return List of SQL string(s) corresponding to the given query.\n+     */\n+    public abstract List<String> explain(Query query);\n+\n }\n", "next_change": {"commit": "0a3776bacb5809845d9a04a1263db9760f117b92", "changed_code": [{"header": "diff --git a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\nindex f5d273c6b..99f07d6d3 100644\n--- a/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\n+++ b/elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/QueryEngine.java\n", "chunk": "@@ -219,4 +232,5 @@ public abstract class QueryEngine {\n      */\n     public abstract List<String> explain(Query query);\n \n+    public abstract QueryValidator getValidator();\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "ff86c56fde9064e1719ea35660fd04c42c949662", "message": "Merge commit", "committedDate": null}, {"oid": "9bda0185f0c316cea05c245c9003c1ada5b5911a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "parent a14ccfbb7b558d27799b4e7b1916850519639708 author Jack (\uc815\ud658) <QubitPi@users.noreply.github.com> 1559678988 -0700 committer Aaron Klish <klish@verizonmedia.com> 1589583449 -0500"}, {"oid": "3f34e76977a5a591eca1f8c00ac986562a38d250", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Introduce QueryResult class for QueryEngine caching (#1333)"}, {"oid": "81dde7567aa8a6a00822a9a8f0bf901806a962e8", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add caching support to SQLQueryEngine (#1319)"}, {"oid": "9c897058ce0b9656bf2aef2318d0addc474f278a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "implement cancel function (#1367)"}, {"oid": "8fece2b8f1b3078ce2598ddb03dca66bb984df46", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Aggregation DataStore QueryLogger Implementation (#1448)"}, {"oid": "61ac33e39ba94617114273238754be32b006735b", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Add SQLDialect implementations and tests. (#1487)"}, {"oid": "ecb1fb18fc0ca7ee3c47924bd5cdcc8d25d8f06c", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Include db connection name as Id for Table (#1503)"}, {"oid": "7024083c38335717492d4beb01460b80a0899a78", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Revert composite id changes for Table (#1577)"}, {"oid": "df3ea922a7550ec35585ce289e1d74101c4f28e4", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Elide 5: Decouple query and metadata (#1585)"}, {"oid": "e140eebdb89d74eb0f16fc8b157c6223cbb07992", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Refactor dbconnection (#1622)"}, {"oid": "df24aa71c283e12d2489982300580cfa80c9755c", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Migrate metadatacalls to metadata store (#1624)"}, {"oid": "e1c47d8a0c7d2703e602ed1c2cdc975c25166cc3", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Remove deprecated code (#1647)"}, {"oid": "49e61867e840d9818993879436d5db1aad964c9a", "committedDate": "2020-12-11 16:20:28 -0600", "message": "Move data store interfaces (#1671)"}, {"oid": "911d29408bdeeb4ff8d78f2beea2417be4e7c673", "committedDate": "2020-12-11 16:20:28 -0600", "message": "cleaned up package hierarchy for elide-core (#1672)"}, {"oid": "f88b63d286d73d3774558b24f16aef0bb0be6d1a", "committedDate": "2021-01-19 14:16:37 -0600", "message": "Initial Commit for Type changes"}, {"oid": "0e85109b24e6637f46b73d9722fc08cc01cfa639", "committedDate": "2021-03-29 13:04:32 -0500", "message": "elide-datastore-aggregation - fix javadoc build warning (#1963)"}, {"oid": "43598e8411d544b31d9807ded4f248e25ef334a4", "committedDate": "2021-04-01 17:32:17 -0500", "message": "Add Table Level Query Hints (#1981)"}, {"oid": "53b23330ff54b12041e530a931329986ddd3e454", "committedDate": "2021-04-28 13:29:43 -0400", "message": "Aggregation Store: Namespace Metadata changes (#2037)"}, {"oid": "256ca8e18dbae4b8ff6c1adbd8e37b236ef5e575", "committedDate": "2021-05-03 11:58:57 -0400", "message": "Refactor Column Projections (#2049)"}, {"oid": "d2843b24f4a1ed35907726ff62f09049ce37d081", "committedDate": "2021-05-06 10:54:37 -0500", "message": "Optional flow (#2069)"}, {"oid": "1bb35bea711c420f00cfd97596dfa9177e15277e", "committedDate": "2021-05-10 14:36:06 -0500", "message": "Populating namespaces in metadatastore (#2071)"}, {"oid": "e722d3e2ac0acf976920871dd0a52a14f2cfd545", "committedDate": "2021-05-10 15:19:00 -0500", "message": "Refactor tableSource for Column and Argument (#2075)"}, {"oid": "0a3776bacb5809845d9a04a1263db9760f117b92", "committedDate": "2021-05-13 13:25:15 -0500", "message": "Injection Protection for parameterized metrics/dimensions (#2090)"}, {"oid": "c3d71ad98a89137ed78e86deb091897836203f75", "committedDate": "2021-05-17 15:47:39 -0500", "message": "Propogate client query arguments to join tables (#2095)"}, {"oid": "6d341a829a16ea8c1dc0fb2815e320601545467d", "committedDate": "2021-05-18 20:30:21 -0400", "message": "Parse table and column arguments in Expression parser (#2105)"}, {"oid": "e1c93d9f34829c4ee142a4919b5fde26502eaa11", "committedDate": "2021-05-19 17:24:06 -0400", "message": "Verify table arguments. (#2110)"}, {"oid": "830b9f2a997eefcd677090875bede2e21e19f1f4", "committedDate": "2021-10-20 14:48:56 -0500", "message": "Support 'hidden' flag for analytic models and fields. (#2357)"}, {"oid": "f21f35950fe465cfbf135d06cc8ae2321a29513a", "committedDate": "2023-02-04 15:34:06 -0600", "message": "Elide 7.x (#2876)"}]}, {"oid": "127517bb46972dbe127cfd5e32d70439aa385381", "url": "https://github.com/yahoo/elide/commit/127517bb46972dbe127cfd5e32d70439aa385381", "message": "addressing comments", "committedDate": "2020-06-17T15:57:56Z", "type": "commit"}]}