{"pr_number": 2804, "pr_title": "Updated Conflicts-with Scrutinizer tests using Mockito", "pr_author": "darecoder", "pr_createdAt": "2020-06-24T12:36:33Z", "pr_url": "https://github.com/OpenRefine/OpenRefine/pull/2804", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg2NjYwMQ==", "url": "https://github.com/OpenRefine/OpenRefine/pull/2804#discussion_r444866601", "body": "Perhaps it would be worth using more informative variable names here, to emphasize the role they play in the constraint definition. You should also be able to reuse the constants declared at the beginning of `ConflictsWithScrutinizer`.", "bodyText": "Perhaps it would be worth using more informative variable names here, to emphasize the role they play in the constraint definition. You should also be able to reuse the constants declared at the beginning of ConflictsWithScrutinizer.", "bodyHTML": "<p dir=\"auto\">Perhaps it would be worth using more informative variable names here, to emphasize the role they play in the constraint definition. You should also be able to reuse the constants declared at the beginning of <code>ConflictsWithScrutinizer</code>.</p>", "author": "wetneb", "createdAt": "2020-06-24T12:45:48Z", "path": "extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ConflictsWithScrutinizerTest.java", "diffHunk": "@@ -33,6 +45,19 @@ public void testTrigger() {\n \n         ItemUpdate updateA = new ItemUpdateBuilder(idA).addStatement(statement1).addStatement(statement2).build();\n \n+        PropertyIdValue propertyIdValue = Datamodel.makeWikidataPropertyIdValue(\"P2302\");\n+        EntityIdValue entityIdValue = Datamodel.makeWikidataItemIdValue(\"Q21502838\");\n+        PropertyIdValue property = Datamodel.makeWikidataPropertyIdValue(\"P2306\");\n+        Value propertyValue = Datamodel.makeWikidataPropertyIdValue(\"P31\");\n+        PropertyIdValue item = Datamodel.makeWikidataPropertyIdValue(\"P2305\");\n+        Value itemValue = Datamodel.makeWikidataItemIdValue(\"Q5\");", "originalCommit": "fa7f29518c2dd271ae9f42471b88b59db34e0d81", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7ac41b46097ad996ba9974139e9cce22fd5f7798", "changed_code": [{"header": "diff --git a/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ConflictsWithScrutinizerTest.java b/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ConflictsWithScrutinizerTest.java\nindex 195ab547d..79d1947fe 100644\n--- a/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ConflictsWithScrutinizerTest.java\n+++ b/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ConflictsWithScrutinizerTest.java\n", "chunk": "@@ -31,28 +52,22 @@ public class ConflictsWithScrutinizerTest extends ScrutinizerTest {\n     public void testTrigger() {\n         ItemIdValue idA = TestingData.existingId;\n \n-        PropertyIdValue conflictsWithPid = MockConstraintFetcher.conflictsWithPid;\n-        Value conflictsWithValue = MockConstraintFetcher.conflictsWithStatementValue;\n-\n-        PropertyIdValue propertyWithConflictsPid = MockConstraintFetcher.conflictingStatementPid;\n-        Value conflictingValue  = MockConstraintFetcher.conflictingStatementValue;\n-\n         ValueSnak value1 = Datamodel.makeValueSnak(conflictsWithPid, conflictsWithValue);\n-        ValueSnak value2 = Datamodel.makeValueSnak(propertyWithConflictsPid, conflictingValue);\n+        ValueSnak value2 = Datamodel.makeValueSnak(propertyWithConflictsPid1, conflictingValue1);\n \n-        Statement statement1 = new StatementImpl(\"P50\", value1,idA);\n+        Statement statement1 = new StatementImpl(\"P2002\", value1,idA);\n         Statement statement2 = new StatementImpl(\"P31\", value2,idA);\n \n         ItemUpdate updateA = new ItemUpdateBuilder(idA).addStatement(statement1).addStatement(statement2).build();\n \n-        PropertyIdValue propertyIdValue = Datamodel.makeWikidataPropertyIdValue(\"P2302\");\n-        EntityIdValue entityIdValue = Datamodel.makeWikidataItemIdValue(\"Q21502838\");\n-        PropertyIdValue property = Datamodel.makeWikidataPropertyIdValue(\"P2306\");\n-        Value propertyValue = Datamodel.makeWikidataPropertyIdValue(\"P31\");\n-        PropertyIdValue item = Datamodel.makeWikidataPropertyIdValue(\"P2305\");\n-        Value itemValue = Datamodel.makeWikidataItemIdValue(\"Q5\");\n-\n-        Stream<Statement> statementStream = createStatementStream(propertyIdValue, entityIdValue, property, propertyValue, item, itemValue);\n+        Snak snak1 = Datamodel.makeValueSnak(propertyParameterPID, conflictingPropertyValue1);\n+        Snak snak2 = Datamodel.makeValueSnak(itemParameterPID, conflictingItemValue1);\n+        List<Snak> snakList1 = Collections.singletonList(snak1);\n+        List<Snak> snakList2 = Collections.singletonList(snak2);\n+        SnakGroup snakGroup1 = Datamodel.makeSnakGroup(snakList1);\n+        SnakGroup snakGroup2 = Datamodel.makeSnakGroup(snakList2);\n+        List<SnakGroup> snakGroupList = Arrays.asList(snakGroup1, snakGroup2);\n+        Stream<Statement> statementStream = constraintParameterStatementStream(entityIdValue, snakGroupList);\n \n         ConstraintFetcher fetcher = mock(ConstraintFetcher.class);\n         when(fetcher.getConstraintsByType(conflictsWithPid, \"Q21502838\")).thenReturn(statementStream);\n", "next_change": {"commit": "f32f6a6ea240904dd7577d4fae0dd1f2773ff983", "changed_code": [{"header": "diff --git a/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ConflictsWithScrutinizerTest.java b/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ConflictsWithScrutinizerTest.java\nindex 79d1947fe..666f134b8 100644\n--- a/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ConflictsWithScrutinizerTest.java\n+++ b/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ConflictsWithScrutinizerTest.java\n", "chunk": "@@ -67,10 +66,10 @@ public class ConflictsWithScrutinizerTest extends ScrutinizerTest {\n         SnakGroup snakGroup1 = Datamodel.makeSnakGroup(snakList1);\n         SnakGroup snakGroup2 = Datamodel.makeSnakGroup(snakList2);\n         List<SnakGroup> snakGroupList = Arrays.asList(snakGroup1, snakGroup2);\n-        Stream<Statement> statementStream = constraintParameterStatementStream(entityIdValue, snakGroupList);\n+        List<Statement> statementList = constraintParameterStatementList(entityIdValue, snakGroupList);\n \n         ConstraintFetcher fetcher = mock(ConstraintFetcher.class);\n-        when(fetcher.getConstraintsByType(conflictsWithPid, \"Q21502838\")).thenReturn(statementStream);\n+        when(fetcher.getConstraintsByType(conflictsWithPid, \"Q21502838\")).thenReturn(statementList);\n \n         setFetcher(fetcher);\n         scrutinize(updateA);\n", "next_change": {"commit": "6ab6bacd137910df5b5395486cc1580a1cdf68d7", "changed_code": [{"header": "diff --git a/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ConflictsWithScrutinizerTest.java b/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ConflictsWithScrutinizerTest.java\nindex 666f134b8..2d4daf6c2 100644\n--- a/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ConflictsWithScrutinizerTest.java\n+++ b/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ConflictsWithScrutinizerTest.java\n", "chunk": "@@ -65,11 +67,11 @@ public class ConflictsWithScrutinizerTest extends ScrutinizerTest {\n         List<Snak> snakList2 = Collections.singletonList(snak2);\n         SnakGroup snakGroup1 = Datamodel.makeSnakGroup(snakList1);\n         SnakGroup snakGroup2 = Datamodel.makeSnakGroup(snakList2);\n-        List<SnakGroup> snakGroupList = Arrays.asList(snakGroup1, snakGroup2);\n-        List<Statement> statementList = constraintParameterStatementList(entityIdValue, snakGroupList);\n+        List<SnakGroup> constraintQualifiers = Arrays.asList(snakGroup1, snakGroup2);\n+        List<Statement> constraintDefinitions = constraintParameterStatementList(entityIdValue, constraintQualifiers);\n \n         ConstraintFetcher fetcher = mock(ConstraintFetcher.class);\n-        when(fetcher.getConstraintsByType(conflictsWithPid, \"Q21502838\")).thenReturn(statementList);\n+        when(fetcher.getConstraintsByType(conflictsWithPid, CONFLICTS_WITH_CONSTRAINT_QID)).thenReturn(constraintDefinitions);\n \n         setFetcher(fetcher);\n         scrutinize(updateA);\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg2NzIxNA==", "url": "https://github.com/OpenRefine/OpenRefine/pull/2804#discussion_r444867214", "body": "The first parameter could be removed since it is always going to be P2302. The name of the method could be improved to suggest that those statements are constraints definitions.", "bodyText": "The first parameter could be removed since it is always going to be P2302. The name of the method could be improved to suggest that those statements are constraints definitions.", "bodyHTML": "<p dir=\"auto\">The first parameter could be removed since it is always going to be P2302. The name of the method could be improved to suggest that those statements are constraints definitions.</p>", "author": "wetneb", "createdAt": "2020-06-24T12:46:58Z", "path": "extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ScrutinizerTest.java", "diffHunk": "@@ -79,4 +92,33 @@ public void assertNoWarningRaised() {\n     public Set<String> getWarningTypes() {\n         return store.getWarnings().stream().map(w -> w.getType()).collect(Collectors.toSet());\n     }\n+\n+    public void setFetcher(ConstraintFetcher fetcher) {\n+        scrutinizer.setFetcher(fetcher);\n+    }\n+\n+    public Stream<Statement> createStatementStream(PropertyIdValue propertyIdValue, EntityIdValue entityIdValue, PropertyIdValue property, Value propertyValue, PropertyIdValue item, Value itemValue) {", "originalCommit": "fa7f29518c2dd271ae9f42471b88b59db34e0d81", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8c1d8cdcb7021e1f9d4cbd0d1cef21ec84d1c238", "changed_code": [{"header": "diff --git a/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ScrutinizerTest.java b/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ScrutinizerTest.java\nindex 133e0afbb..ac85a584f 100644\n--- a/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ScrutinizerTest.java\n+++ b/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ScrutinizerTest.java\n", "chunk": "@@ -97,20 +96,11 @@ public abstract class ScrutinizerTest {\n         scrutinizer.setFetcher(fetcher);\n     }\n \n-    public Stream<Statement> createStatementStream(PropertyIdValue propertyIdValue, EntityIdValue entityIdValue, PropertyIdValue property, Value propertyValue, PropertyIdValue item, Value itemValue) {\n-        Snak snak = Datamodel.makeValueSnak(propertyIdValue,entityIdValue);\n+    public Stream<Statement> constraintParameterStatementStream(ItemIdValue itemIdValue, List<SnakGroup> listSnakGroup) {\n+        PropertyIdValue propertyIdValue = Datamodel.makeWikidataPropertyIdValue(\"P2302\");\n+        Snak snakValue = Datamodel.makeValueSnak(propertyIdValue,itemIdValue);\n \n-        Snak snak1 = Datamodel.makeValueSnak(property, propertyValue);\n-        List<Snak> group1 = Collections.singletonList(snak1);\n-\n-        Snak snak2 = Datamodel.makeValueSnak(item, itemValue);\n-        List<Snak> group2 = Collections.singletonList(snak2);\n-\n-        SnakGroup snakGroup1 = Datamodel.makeSnakGroup(group1);\n-        SnakGroup snakGroup2 = Datamodel.makeSnakGroup(group2);\n-\n-        List<SnakGroup> listSnakGroup = Arrays.asList(snakGroup1, snakGroup2);\n-        Claim claim = Datamodel.makeClaim(entityIdValue, snak, listSnakGroup);\n+        Claim claim = Datamodel.makeClaim(itemIdValue, snakValue, listSnakGroup);\n \n         Reference reference = Datamodel.makeReference(listSnakGroup);\n         List<Reference> referenceList = Collections.singletonList(reference);\n", "next_change": {"commit": "f32f6a6ea240904dd7577d4fae0dd1f2773ff983", "changed_code": [{"header": "diff --git a/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ScrutinizerTest.java b/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ScrutinizerTest.java\nindex ac85a584f..7824f1446 100644\n--- a/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ScrutinizerTest.java\n+++ b/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ScrutinizerTest.java\n", "chunk": "@@ -96,7 +95,7 @@ public abstract class ScrutinizerTest {\n         scrutinizer.setFetcher(fetcher);\n     }\n \n-    public Stream<Statement> constraintParameterStatementStream(ItemIdValue itemIdValue, List<SnakGroup> listSnakGroup) {\n+    public List<Statement> constraintParameterStatementList(ItemIdValue itemIdValue, List<SnakGroup> listSnakGroup) {\n         PropertyIdValue propertyIdValue = Datamodel.makeWikidataPropertyIdValue(\"P2302\");\n         Snak snakValue = Datamodel.makeValueSnak(propertyIdValue,itemIdValue);\n \n", "next_change": {"commit": "add4eb6386d2e33539a6814d70e537a147a24b5a", "changed_code": [{"header": "diff --git a/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ScrutinizerTest.java b/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ScrutinizerTest.java\nindex 7824f1446..06e3d0af6 100644\n--- a/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ScrutinizerTest.java\n+++ b/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ScrutinizerTest.java\n", "chunk": "@@ -97,17 +115,40 @@ public abstract class ScrutinizerTest {\n \n     public List<Statement> constraintParameterStatementList(ItemIdValue itemIdValue, List<SnakGroup> listSnakGroup) {\n         PropertyIdValue propertyIdValue = Datamodel.makeWikidataPropertyIdValue(\"P2302\");\n-        Snak snakValue = Datamodel.makeValueSnak(propertyIdValue,itemIdValue);\n+        Snak snakValue = Datamodel.makeValueSnak(propertyIdValue, itemIdValue);\n \n         Claim claim = Datamodel.makeClaim(itemIdValue, snakValue, listSnakGroup);\n \n         Reference reference = Datamodel.makeReference(listSnakGroup);\n         List<Reference> referenceList = Collections.singletonList(reference);\n \n-        Statement statement = Datamodel.makeStatement(claim, referenceList, StatementRank.NORMAL, \"P2302$77BD7FE4-C051-4776-855C-543F0CE697D0\");\n+        Statement statement = Datamodel.makeStatement(claim, referenceList, StatementRank.NORMAL,\n+                \"P2302$77BD7FE4-C051-4776-855C-543F0CE697D0\");\n         List<Statement> statements = Collections.singletonList(statement);\n \n         return statements;\n     }\n \n+    public List<SnakGroup> makeSnakGroupList(Snak... snaks) {\n+        Map<PropertyIdValue, List<Snak>> propertySnakMap = new HashMap<>();\n+        for (Snak snak : snaks) {\n+            PropertyIdValue pid = snak.getPropertyId();\n+            List<Snak> snakList;\n+            if (propertySnakMap.containsKey(pid)) {\n+                snakList = propertySnakMap.get(pid);\n+            } else {\n+                snakList = new ArrayList<>();\n+            }\n+            snakList.add(snak);\n+            propertySnakMap.put(pid, snakList);\n+        }\n+\n+        List<SnakGroup> snakGroupList = new ArrayList<>();\n+        for (List<Snak> snakList : propertySnakMap.values()) {\n+            snakGroupList.add(Datamodel.makeSnakGroup(snakList));\n+        }\n+\n+        return snakGroupList;\n+    }\n+\n }\n", "next_change": {"commit": "425c0cc17a3284b30dcb3181114c26ef94b2bd36", "changed_code": [{"header": "diff --git a/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ScrutinizerTest.java b/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ScrutinizerTest.java\nindex 06e3d0af6..68c700b1f 100644\n--- a/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ScrutinizerTest.java\n+++ b/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ScrutinizerTest.java\n", "chunk": "@@ -151,4 +154,12 @@ public abstract class ScrutinizerTest {\n         return snakGroupList;\n     }\n \n+    public StatementEdit add(Statement statement) {\n+        return new StatementEdit(statement, StatementMerger.FORMER_DEFAULT_STRATEGY, StatementEditingMode.ADD_OR_MERGE);\n+    }\n+\n+    public StatementEdit delete(Statement statement) {\n+        return new StatementEdit(statement, StatementMerger.FORMER_DEFAULT_STRATEGY, StatementEditingMode.DELETE);\n+    }\n+\n }\n", "next_change": null}]}}]}}, {"header": "diff --git a/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ScrutinizerTest.java b/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ScrutinizerTest.java\nindex ac85a584f..7824f1446 100644\n--- a/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ScrutinizerTest.java\n+++ b/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ScrutinizerTest.java\n", "chunk": "@@ -108,6 +107,7 @@ public abstract class ScrutinizerTest {\n         Statement statement = Datamodel.makeStatement(claim, referenceList, StatementRank.NORMAL, \"P2302$77BD7FE4-C051-4776-855C-543F0CE697D0\");\n         List<Statement> statements = Collections.singletonList(statement);\n \n-        return statements.stream();\n+        return statements;\n     }\n+\n }\n", "next_change": {"commit": "9edb1e514da4984e059a281421a405fce68bdc2a", "changed_code": [{"header": "diff --git a/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ScrutinizerTest.java b/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ScrutinizerTest.java\nindex 7824f1446..e5cd8b0fb 100644\n--- a/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ScrutinizerTest.java\n+++ b/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ScrutinizerTest.java\n", "chunk": "@@ -110,4 +113,26 @@ public abstract class ScrutinizerTest {\n         return statements;\n     }\n \n+    public List<SnakGroup> makeSnakGroupList(Snak... snaks) {\n+        Map<PropertyIdValue, List<Snak>> propertySnakMap = new HashMap<>();\n+        for (Snak snak : snaks) {\n+            PropertyIdValue pid = snak.getPropertyId();\n+            List<Snak> snakList;\n+            if (propertySnakMap.containsKey(pid)) {\n+                snakList = propertySnakMap.get(pid);\n+            } else {\n+                snakList = new ArrayList<>();\n+            }\n+            snakList.add(snak);\n+            propertySnakMap.put(pid, snakList);\n+        }\n+\n+        List<SnakGroup> snakGroupList = new ArrayList<>();\n+        for (List<Snak> snakList : propertySnakMap.values()) {\n+            snakGroupList.add(Datamodel.makeSnakGroup(snakList));\n+        }\n+\n+        return snakGroupList;\n+    }\n+\n }\n", "next_change": {"commit": "425c0cc17a3284b30dcb3181114c26ef94b2bd36", "changed_code": [{"header": "diff --git a/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ScrutinizerTest.java b/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ScrutinizerTest.java\nindex e5cd8b0fb..68c700b1f 100644\n--- a/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ScrutinizerTest.java\n+++ b/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ScrutinizerTest.java\n", "chunk": "@@ -135,4 +154,12 @@ public abstract class ScrutinizerTest {\n         return snakGroupList;\n     }\n \n+    public StatementEdit add(Statement statement) {\n+        return new StatementEdit(statement, StatementMerger.FORMER_DEFAULT_STRATEGY, StatementEditingMode.ADD_OR_MERGE);\n+    }\n+\n+    public StatementEdit delete(Statement statement) {\n+        return new StatementEdit(statement, StatementMerger.FORMER_DEFAULT_STRATEGY, StatementEditingMode.DELETE);\n+    }\n+\n }\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTExNTgyMg==", "url": "https://github.com/OpenRefine/OpenRefine/pull/2804#discussion_r445115822", "body": "This method seems to be more generic than its name implies: it can generate any constraint definition which takes two different qualifiers as parameters.\r\n\r\nAlso I would make the type of the first argument more specific: because it is a value for the P2302 property, it should always be an ItemIdValue.", "bodyText": "This method seems to be more generic than its name implies: it can generate any constraint definition which takes two different qualifiers as parameters.\nAlso I would make the type of the first argument more specific: because it is a value for the P2302 property, it should always be an ItemIdValue.", "bodyHTML": "<p dir=\"auto\">This method seems to be more generic than its name implies: it can generate any constraint definition which takes two different qualifiers as parameters.</p>\n<p dir=\"auto\">Also I would make the type of the first argument more specific: because it is a value for the P2302 property, it should always be an ItemIdValue.</p>", "author": "wetneb", "createdAt": "2020-06-24T19:17:29Z", "path": "extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ScrutinizerTest.java", "diffHunk": "@@ -79,4 +92,34 @@ public void assertNoWarningRaised() {\n     public Set<String> getWarningTypes() {\n         return store.getWarnings().stream().map(w -> w.getType()).collect(Collectors.toSet());\n     }\n+\n+    public void setFetcher(ConstraintFetcher fetcher) {\n+        scrutinizer.setFetcher(fetcher);\n+    }\n+\n+    public Stream<Statement> conflictsWithParamaterStatementStream(EntityIdValue entityIdValue, PropertyIdValue property, Value propertyValue, PropertyIdValue item, Value itemValue) {", "originalCommit": "d0a0a7ab5399cc1f749a8d528313c682195d2cd4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8c1d8cdcb7021e1f9d4cbd0d1cef21ec84d1c238", "changed_code": [{"header": "diff --git a/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ScrutinizerTest.java b/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ScrutinizerTest.java\nindex 592020782..ac85a584f 100644\n--- a/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ScrutinizerTest.java\n+++ b/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ScrutinizerTest.java\n", "chunk": "@@ -97,21 +96,11 @@ public abstract class ScrutinizerTest {\n         scrutinizer.setFetcher(fetcher);\n     }\n \n-    public Stream<Statement> conflictsWithParamaterStatementStream(EntityIdValue entityIdValue, PropertyIdValue property, Value propertyValue, PropertyIdValue item, Value itemValue) {\n+    public Stream<Statement> constraintParameterStatementStream(ItemIdValue itemIdValue, List<SnakGroup> listSnakGroup) {\n         PropertyIdValue propertyIdValue = Datamodel.makeWikidataPropertyIdValue(\"P2302\");\n-        Snak snak = Datamodel.makeValueSnak(propertyIdValue,entityIdValue);\n+        Snak snakValue = Datamodel.makeValueSnak(propertyIdValue,itemIdValue);\n \n-        Snak snak1 = Datamodel.makeValueSnak(property, propertyValue);\n-        List<Snak> group1 = Collections.singletonList(snak1);\n-\n-        Snak snak2 = Datamodel.makeValueSnak(item, itemValue);\n-        List<Snak> group2 = Collections.singletonList(snak2);\n-\n-        SnakGroup snakGroup1 = Datamodel.makeSnakGroup(group1);\n-        SnakGroup snakGroup2 = Datamodel.makeSnakGroup(group2);\n-\n-        List<SnakGroup> listSnakGroup = Arrays.asList(snakGroup1, snakGroup2);\n-        Claim claim = Datamodel.makeClaim(entityIdValue, snak, listSnakGroup);\n+        Claim claim = Datamodel.makeClaim(itemIdValue, snakValue, listSnakGroup);\n \n         Reference reference = Datamodel.makeReference(listSnakGroup);\n         List<Reference> referenceList = Collections.singletonList(reference);\n", "next_change": {"commit": "f32f6a6ea240904dd7577d4fae0dd1f2773ff983", "changed_code": [{"header": "diff --git a/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ScrutinizerTest.java b/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ScrutinizerTest.java\nindex ac85a584f..7824f1446 100644\n--- a/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ScrutinizerTest.java\n+++ b/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ScrutinizerTest.java\n", "chunk": "@@ -96,7 +95,7 @@ public abstract class ScrutinizerTest {\n         scrutinizer.setFetcher(fetcher);\n     }\n \n-    public Stream<Statement> constraintParameterStatementStream(ItemIdValue itemIdValue, List<SnakGroup> listSnakGroup) {\n+    public List<Statement> constraintParameterStatementList(ItemIdValue itemIdValue, List<SnakGroup> listSnakGroup) {\n         PropertyIdValue propertyIdValue = Datamodel.makeWikidataPropertyIdValue(\"P2302\");\n         Snak snakValue = Datamodel.makeValueSnak(propertyIdValue,itemIdValue);\n \n", "next_change": {"commit": "add4eb6386d2e33539a6814d70e537a147a24b5a", "changed_code": [{"header": "diff --git a/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ScrutinizerTest.java b/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ScrutinizerTest.java\nindex 7824f1446..06e3d0af6 100644\n--- a/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ScrutinizerTest.java\n+++ b/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ScrutinizerTest.java\n", "chunk": "@@ -97,17 +115,40 @@ public abstract class ScrutinizerTest {\n \n     public List<Statement> constraintParameterStatementList(ItemIdValue itemIdValue, List<SnakGroup> listSnakGroup) {\n         PropertyIdValue propertyIdValue = Datamodel.makeWikidataPropertyIdValue(\"P2302\");\n-        Snak snakValue = Datamodel.makeValueSnak(propertyIdValue,itemIdValue);\n+        Snak snakValue = Datamodel.makeValueSnak(propertyIdValue, itemIdValue);\n \n         Claim claim = Datamodel.makeClaim(itemIdValue, snakValue, listSnakGroup);\n \n         Reference reference = Datamodel.makeReference(listSnakGroup);\n         List<Reference> referenceList = Collections.singletonList(reference);\n \n-        Statement statement = Datamodel.makeStatement(claim, referenceList, StatementRank.NORMAL, \"P2302$77BD7FE4-C051-4776-855C-543F0CE697D0\");\n+        Statement statement = Datamodel.makeStatement(claim, referenceList, StatementRank.NORMAL,\n+                \"P2302$77BD7FE4-C051-4776-855C-543F0CE697D0\");\n         List<Statement> statements = Collections.singletonList(statement);\n \n         return statements;\n     }\n \n+    public List<SnakGroup> makeSnakGroupList(Snak... snaks) {\n+        Map<PropertyIdValue, List<Snak>> propertySnakMap = new HashMap<>();\n+        for (Snak snak : snaks) {\n+            PropertyIdValue pid = snak.getPropertyId();\n+            List<Snak> snakList;\n+            if (propertySnakMap.containsKey(pid)) {\n+                snakList = propertySnakMap.get(pid);\n+            } else {\n+                snakList = new ArrayList<>();\n+            }\n+            snakList.add(snak);\n+            propertySnakMap.put(pid, snakList);\n+        }\n+\n+        List<SnakGroup> snakGroupList = new ArrayList<>();\n+        for (List<Snak> snakList : propertySnakMap.values()) {\n+            snakGroupList.add(Datamodel.makeSnakGroup(snakList));\n+        }\n+\n+        return snakGroupList;\n+    }\n+\n }\n", "next_change": {"commit": "425c0cc17a3284b30dcb3181114c26ef94b2bd36", "changed_code": [{"header": "diff --git a/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ScrutinizerTest.java b/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ScrutinizerTest.java\nindex 06e3d0af6..68c700b1f 100644\n--- a/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ScrutinizerTest.java\n+++ b/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ScrutinizerTest.java\n", "chunk": "@@ -151,4 +154,12 @@ public abstract class ScrutinizerTest {\n         return snakGroupList;\n     }\n \n+    public StatementEdit add(Statement statement) {\n+        return new StatementEdit(statement, StatementMerger.FORMER_DEFAULT_STRATEGY, StatementEditingMode.ADD_OR_MERGE);\n+    }\n+\n+    public StatementEdit delete(Statement statement) {\n+        return new StatementEdit(statement, StatementMerger.FORMER_DEFAULT_STRATEGY, StatementEditingMode.DELETE);\n+    }\n+\n }\n", "next_change": null}]}}]}}, {"header": "diff --git a/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ScrutinizerTest.java b/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ScrutinizerTest.java\nindex ac85a584f..7824f1446 100644\n--- a/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ScrutinizerTest.java\n+++ b/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ScrutinizerTest.java\n", "chunk": "@@ -108,6 +107,7 @@ public abstract class ScrutinizerTest {\n         Statement statement = Datamodel.makeStatement(claim, referenceList, StatementRank.NORMAL, \"P2302$77BD7FE4-C051-4776-855C-543F0CE697D0\");\n         List<Statement> statements = Collections.singletonList(statement);\n \n-        return statements.stream();\n+        return statements;\n     }\n+\n }\n", "next_change": {"commit": "9edb1e514da4984e059a281421a405fce68bdc2a", "changed_code": [{"header": "diff --git a/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ScrutinizerTest.java b/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ScrutinizerTest.java\nindex 7824f1446..e5cd8b0fb 100644\n--- a/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ScrutinizerTest.java\n+++ b/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ScrutinizerTest.java\n", "chunk": "@@ -110,4 +113,26 @@ public abstract class ScrutinizerTest {\n         return statements;\n     }\n \n+    public List<SnakGroup> makeSnakGroupList(Snak... snaks) {\n+        Map<PropertyIdValue, List<Snak>> propertySnakMap = new HashMap<>();\n+        for (Snak snak : snaks) {\n+            PropertyIdValue pid = snak.getPropertyId();\n+            List<Snak> snakList;\n+            if (propertySnakMap.containsKey(pid)) {\n+                snakList = propertySnakMap.get(pid);\n+            } else {\n+                snakList = new ArrayList<>();\n+            }\n+            snakList.add(snak);\n+            propertySnakMap.put(pid, snakList);\n+        }\n+\n+        List<SnakGroup> snakGroupList = new ArrayList<>();\n+        for (List<Snak> snakList : propertySnakMap.values()) {\n+            snakGroupList.add(Datamodel.makeSnakGroup(snakList));\n+        }\n+\n+        return snakGroupList;\n+    }\n+\n }\n", "next_change": {"commit": "425c0cc17a3284b30dcb3181114c26ef94b2bd36", "changed_code": [{"header": "diff --git a/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ScrutinizerTest.java b/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ScrutinizerTest.java\nindex e5cd8b0fb..68c700b1f 100644\n--- a/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ScrutinizerTest.java\n+++ b/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ScrutinizerTest.java\n", "chunk": "@@ -135,4 +154,12 @@ public abstract class ScrutinizerTest {\n         return snakGroupList;\n     }\n \n+    public StatementEdit add(Statement statement) {\n+        return new StatementEdit(statement, StatementMerger.FORMER_DEFAULT_STRATEGY, StatementEditingMode.ADD_OR_MERGE);\n+    }\n+\n+    public StatementEdit delete(Statement statement) {\n+        return new StatementEdit(statement, StatementMerger.FORMER_DEFAULT_STRATEGY, StatementEditingMode.DELETE);\n+    }\n+\n }\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTExNTg0OQ==", "url": "https://github.com/OpenRefine/OpenRefine/pull/2804#discussion_r445115849", "body": "Really nice! That is exactly where the usefulness of mocking comes into play. Perhaps you could also add a test where multiple constraint definitions are present on the same property (we had found interesting examples of that on Wikidata).", "bodyText": "Really nice! That is exactly where the usefulness of mocking comes into play. Perhaps you could also add a test where multiple constraint definitions are present on the same property (we had found interesting examples of that on Wikidata).", "bodyHTML": "<p dir=\"auto\">Really nice! That is exactly where the usefulness of mocking comes into play. Perhaps you could also add a test where multiple constraint definitions are present on the same property (we had found interesting examples of that on Wikidata).</p>", "author": "wetneb", "createdAt": "2020-06-24T19:17:32Z", "path": "extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ConflictsWithScrutinizerTest.java", "diffHunk": "@@ -70,6 +95,33 @@ public void testNoValueSnak() {\n \n         ItemUpdate updateA = new ItemUpdateBuilder(idA).addStatement(statement1).addStatement(statement2).build();\n \n+        Stream<Statement> statementStream = conflictsWithParamaterStatementStream(entityIdValue, propertyParameterPID, conflictingPropertyValue, itemParameterPID, conflictingItemValue);\n+\n+        ConstraintFetcher fetcher = mock(ConstraintFetcher.class);\n+        when(fetcher.getConstraintsByType(conflictsWithPid, \"Q21502838\")).thenReturn(statementStream);\n+\n+        setFetcher(fetcher);\n+        scrutinize(updateA);\n+        assertNoWarningRaised();\n+    }\n+\n+    @Test\n+    public void testNoStatement() {", "originalCommit": "d0a0a7ab5399cc1f749a8d528313c682195d2cd4", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7ac41b46097ad996ba9974139e9cce22fd5f7798", "changed_code": [{"header": "diff --git a/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ConflictsWithScrutinizerTest.java b/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ConflictsWithScrutinizerTest.java\nindex fb3fe7e6a..79d1947fe 100644\n--- a/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ConflictsWithScrutinizerTest.java\n+++ b/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ConflictsWithScrutinizerTest.java\n", "chunk": "@@ -109,7 +137,7 @@ public class ConflictsWithScrutinizerTest extends ScrutinizerTest {\n     public void testNoStatement() {\n         ItemIdValue idA = TestingData.existingId;\n \n-        ValueSnak valueSnak = Datamodel.makeValueSnak(propertyWithConflictsPid, conflictingValue);\n+        ValueSnak valueSnak = Datamodel.makeValueSnak(propertyWithConflictsPid1, conflictingValue1);\n \n         Statement statement = new StatementImpl(\"P31\", valueSnak,idA);\n \n", "next_change": {"commit": "f32f6a6ea240904dd7577d4fae0dd1f2773ff983", "changed_code": [{"header": "diff --git a/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ConflictsWithScrutinizerTest.java b/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ConflictsWithScrutinizerTest.java\nindex 79d1947fe..666f134b8 100644\n--- a/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ConflictsWithScrutinizerTest.java\n+++ b/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ConflictsWithScrutinizerTest.java\n", "chunk": "@@ -143,11 +142,10 @@ public class ConflictsWithScrutinizerTest extends ScrutinizerTest {\n \n         ItemUpdate updateA = new ItemUpdateBuilder(idA).addStatement(statement).build();\n \n-        List<Statement> statements = new ArrayList<>();\n-        Stream<Statement> statementStream =  statements.stream();\n+        List<Statement> statementList = new ArrayList<>();\n \n         ConstraintFetcher fetcher = mock(ConstraintFetcher.class);\n-        when(fetcher.getConstraintsByType(propertyWithConflictsPid1, \"Q21502838\")).thenReturn(statementStream);\n+        when(fetcher.getConstraintsByType(propertyWithConflictsPid1, \"Q21502838\")).thenReturn(statementList);\n \n         setFetcher(fetcher);\n         scrutinize(updateA);\n", "next_change": {"commit": "6ab6bacd137910df5b5395486cc1580a1cdf68d7", "changed_code": [{"header": "diff --git a/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ConflictsWithScrutinizerTest.java b/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ConflictsWithScrutinizerTest.java\nindex 666f134b8..2d4daf6c2 100644\n--- a/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ConflictsWithScrutinizerTest.java\n+++ b/extensions/wikidata/tests/src/org/openrefine/wikidata/qa/scrutinizers/ConflictsWithScrutinizerTest.java\n", "chunk": "@@ -142,10 +144,10 @@ public class ConflictsWithScrutinizerTest extends ScrutinizerTest {\n \n         ItemUpdate updateA = new ItemUpdateBuilder(idA).addStatement(statement).build();\n \n-        List<Statement> statementList = new ArrayList<>();\n+        List<Statement> constraintDefinitions = new ArrayList<>();\n \n         ConstraintFetcher fetcher = mock(ConstraintFetcher.class);\n-        when(fetcher.getConstraintsByType(propertyWithConflictsPid1, \"Q21502838\")).thenReturn(statementList);\n+        when(fetcher.getConstraintsByType(propertyWithConflictsPid1, CONFLICTS_WITH_CONSTRAINT_QID)).thenReturn(constraintDefinitions);\n \n         setFetcher(fetcher);\n         scrutinize(updateA);\n", "next_change": null}]}}]}}]}}, {"oid": "9aaa4ec9ed46996397c0b877e4ed509afe44e580", "url": "https://github.com/OpenRefine/OpenRefine/commit/9aaa4ec9ed46996397c0b877e4ed509afe44e580", "message": "Implemented ConflictsWithScrutinizer tests using Mockito\n\nupdated test class by creating mocks for ConstraintFetcher\n\nImplemented tests for conflicts-with scrutinizer using mocks\n\nAdded testcase for no statementList & multiple constraint.\n\nImplemented tests using mock for conflicts-with scrutinizer\n\nImplemented tests using mock for conflicts-with scrutinizer\n\nAdded test case for multiple constraints\n\nAdded test case for multiple constraints", "committedDate": "2020-06-25T08:50:41Z", "type": "commit"}, {"oid": "3b4cd1afe8474d02afbe89217f6b02125008de9a", "url": "https://github.com/OpenRefine/OpenRefine/commit/3b4cd1afe8474d02afbe89217f6b02125008de9a", "message": "Merge branch 'master' into mocks-for-conflicts-with-scrutinizer", "committedDate": "2020-06-26T08:19:42Z", "type": "commit"}]}