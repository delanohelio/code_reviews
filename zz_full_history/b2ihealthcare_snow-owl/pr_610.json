{"pr_number": 610, "pr_title": "SO-4025: Concept Map Compare", "pr_author": "molnarlaura", "pr_createdAt": "2020-07-16T15:28:32Z", "pr_url": "https://github.com/b2ihealthcare/snow-owl/pull/610", "timeline": [{"oid": "109862dbe3bbe641ecb67010d10cc8dfd39194c4", "url": "https://github.com/b2ihealthcare/snow-owl/commit/109862dbe3bbe641ecb67010d10cc8dfd39194c4", "message": "SO-4025: add set compare logic", "committedDate": "2020-07-09T11:59:50Z", "type": "commit"}, {"oid": "2bb1944c6f13ae2646844040fcb565d7f28b0529", "url": "https://github.com/b2ihealthcare/snow-owl/commit/2bb1944c6f13ae2646844040fcb565d7f28b0529", "message": "SO-4025: implement set compare for simple map type reference sets", "committedDate": "2020-07-09T12:03:11Z", "type": "commit"}, {"oid": "48bb766b7f8a7c10c950d123e1523fa7b11fcdc7", "url": "https://github.com/b2ihealthcare/snow-owl/commit/48bb766b7f8a7c10c950d123e1523fa7b11fcdc7", "message": "SO-4131 Support for generic mappings.", "committedDate": "2020-07-09T13:14:21Z", "type": "commit"}, {"oid": "35d3436f2598d7e5ad0e40b842b2654d8dff59de", "url": "https://github.com/b2ihealthcare/snow-owl/commit/35d3436f2598d7e5ad0e40b842b2654d8dff59de", "message": "SO-4025: count as changed when only the source is equal", "committedDate": "2020-07-09T16:22:50Z", "type": "commit"}, {"oid": "1c8a2461a10b86301572136290a8b0b78e378c0b", "url": "https://github.com/b2ihealthcare/snow-owl/commit/1c8a2461a10b86301572136290a8b0b78e378c0b", "message": "SO-4025: support search by map target type", "committedDate": "2020-07-10T13:50:32Z", "type": "commit"}, {"oid": "7d31911f91e2a1fec27249d0734171f45cf1a650", "url": "https://github.com/b2ihealthcare/snow-owl/commit/7d31911f91e2a1fec27249d0734171f45cf1a650", "message": "SO-4025: support to compare any type of sets", "committedDate": "2020-07-10T13:51:34Z", "type": "commit"}, {"oid": "15ca940e96fec37c278b00aaeaec107430880c89", "url": "https://github.com/b2ihealthcare/snow-owl/commit/15ca940e96fec37c278b00aaeaec107430880c89", "message": "Revert \"SO-4025: support to compare any type of sets\"\n\nThis reverts commit 7d31911f91e2a1fec27249d0734171f45cf1a650.", "committedDate": "2020-07-10T13:58:58Z", "type": "commit"}, {"oid": "b7f7de5ef7df4fe04b535f7440ec504f80b44387", "url": "https://github.com/b2ihealthcare/snow-owl/commit/b7f7de5ef7df4fe04b535f7440ec504f80b44387", "message": "SO-4025: support to compare any type of sets", "committedDate": "2020-07-10T14:09:11Z", "type": "commit"}, {"oid": "3a09fdff84380560b054a92a7f3ec2f092efe822", "url": "https://github.com/b2ihealthcare/snow-owl/commit/3a09fdff84380560b054a92a7f3ec2f092efe822", "message": "SO-4131 Generic mapping domain object updated.", "committedDate": "2020-07-10T16:00:01Z", "type": "commit"}, {"oid": "f79ee19514e78ceac982b3c44ca7dd76f236a98b", "url": "https://github.com/b2ihealthcare/snow-owl/commit/f79ee19514e78ceac982b3c44ca7dd76f236a98b", "message": "SO-4131 Correlation support added.", "committedDate": "2020-07-11T08:11:23Z", "type": "commit"}, {"oid": "b6777c0f89186e538c3f9ca677e5dea04ddcaa04", "url": "https://github.com/b2ihealthcare/snow-owl/commit/b6777c0f89186e538c3f9ca677e5dea04ddcaa04", "message": "SO-4131 Builder added.", "committedDate": "2020-07-11T09:48:58Z", "type": "commit"}, {"oid": "01fb16a16ffb02c992afe6b782a70fa0625cc943", "url": "https://github.com/b2ihealthcare/snow-owl/commit/01fb16a16ffb02c992afe6b782a70fa0625cc943", "message": "SO-4131: add request that finds every code system in every repository", "committedDate": "2020-07-14T12:55:16Z", "type": "commit"}, {"oid": "441777451c92d872a0090311215019527c84ee0c", "url": "https://github.com/b2ihealthcare/snow-owl/commit/441777451c92d872a0090311215019527c84ee0c", "message": "SO-4131: add test cases for the new all code system searcher request", "committedDate": "2020-07-14T12:55:53Z", "type": "commit"}, {"oid": "530a4dcd9a87bb64bd57c72d43e672414ae3892f", "url": "https://github.com/b2ihealthcare/snow-owl/commit/530a4dcd9a87bb64bd57c72d43e672414ae3892f", "message": "SO-4131: add map group and priority field", "committedDate": "2020-07-15T15:30:07Z", "type": "commit"}, {"oid": "3eff042478944f6245f7217ece75a73240cb7dd4", "url": "https://github.com/b2ihealthcare/snow-owl/commit/3eff042478944f6245f7217ece75a73240cb7dd4", "message": "SO-4131: add map rule and advice fields", "committedDate": "2020-07-15T15:37:38Z", "type": "commit"}, {"oid": "57acaa935b4341e336dbf745866dd0186180ca7f", "url": "https://github.com/b2ihealthcare/snow-owl/commit/57acaa935b4341e336dbf745866dd0186180ca7f", "message": "SO-4142 MapGroup added.", "committedDate": "2020-07-16T09:22:46Z", "type": "commit"}, {"oid": "35ae69b7bf15f54934e2914b4fabbffbfc4bebc5", "url": "https://github.com/b2ihealthcare/snow-owl/commit/35ae69b7bf15f54934e2914b4fabbffbfc4bebc5", "message": "SO-4025: add number for compare result", "committedDate": "2020-07-16T12:15:39Z", "type": "commit"}, {"oid": "9fc87b2bd05dca4360e7c2843e1eb2109de06c59", "url": "https://github.com/b2ihealthcare/snow-owl/commit/9fc87b2bd05dca4360e7c2843e1eb2109de06c59", "message": "SO-4025: export compare budle", "committedDate": "2020-07-16T12:16:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzEyNzkzNg==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/610#discussion_r457127936", "body": "\u26a0\ufe0f Incorrect license. Please use the Apache 2.0 license.", "bodyText": "\u26a0\ufe0f Incorrect license. Please use the Apache 2.0 license.", "bodyHTML": "<p dir=\"auto\"><g-emoji class=\"g-emoji\" alias=\"warning\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/26a0.png\">\u26a0\ufe0f</g-emoji> Incorrect license. Please use the Apache 2.0 license.</p>", "author": "cmark", "createdAt": "2020-07-20T07:25:36Z", "path": "core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/compare/CompareSetResult.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 B2i Healthcare. All rights reserved.", "originalCommit": "9fc87b2bd05dca4360e7c2843e1eb2109de06c59", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE1MDg2Mg==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/610#discussion_r457150862", "bodyText": "Done", "author": "molnarlaura", "createdAt": "2020-07-20T07:59:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzEyNzkzNg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzEyODE3Mw==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/610#discussion_r457128173", "body": "Make this class final.\r\nRename it to `ConceptMapCompareResult`.\r\nWhat can be `T` here? \r\nThis is too generic, and it won't work well in REST APIs with Swagger.\r\nEither we create abstract superclass with `T` type parameter and concrete implementations for each possible `T` type (like `CollectionResource`) or introduce a generic interface for type `T`.", "bodyText": "Make this class final.\nRename it to ConceptMapCompareResult.\nWhat can be T here?\nThis is too generic, and it won't work well in REST APIs with Swagger.\nEither we create abstract superclass with T type parameter and concrete implementations for each possible T type (like CollectionResource) or introduce a generic interface for type T.", "bodyHTML": "<p dir=\"auto\">Make this class final.<br>\nRename it to <code>ConceptMapCompareResult</code>.<br>\nWhat can be <code>T</code> here?<br>\nThis is too generic, and it won't work well in REST APIs with Swagger.<br>\nEither we create abstract superclass with <code>T</code> type parameter and concrete implementations for each possible <code>T</code> type (like <code>CollectionResource</code>) or introduce a generic interface for type <code>T</code>.</p>", "author": "cmark", "createdAt": "2020-07-20T07:25:58Z", "path": "core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/compare/CompareSetResult.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 B2i Healthcare. All rights reserved.\n+ *******************************************************************************/\n+package com.b2international.snowowl.core.compare;\n+\n+import java.util.Set;\n+\n+import com.google.common.collect.ListMultimap;\n+/**\n+ * @since 7.8\n+ */\n+public class CompareSetResult <T> {", "originalCommit": "9fc87b2bd05dca4360e7c2843e1eb2109de06c59", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODA0NDU1OA==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/610#discussion_r458044558", "bodyText": "Done", "author": "molnarlaura", "createdAt": "2020-07-21T12:04:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzEyODE3Mw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzEyODg1MA==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/610#discussion_r457128850", "body": "Simplify if block to inlined return value expression.", "bodyText": "Simplify if block to inlined return value expression.", "bodyHTML": "<p dir=\"auto\">Simplify if block to inlined return value expression.</p>", "author": "cmark", "createdAt": "2020-07-20T07:27:00Z", "path": "core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/compare/CompareSets.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 B2i Healthcare. All rights reserved.\n+ *******************************************************************************/\n+package com.b2international.snowowl.core.compare;\n+\n+import java.util.List;\n+import java.util.Set;\n+\n+import com.google.common.collect.ArrayListMultimap;\n+import com.google.common.collect.ListMultimap;\n+import com.google.common.collect.Sets;\n+/**\n+ * @since 7.8\n+ */\n+public interface CompareSets <T,R> {\n+\n+\tdefault CompareSetResult<T> compareDifferents(List<T> baseSet, List<T> compareSet) {\n+\t\tListMultimap<T, T> changes = ArrayListMultimap.create();\n+\t\tSet<T> remove = Sets.newHashSet();\n+\t\tSet<T> add = Sets.newHashSet();\n+\n+\t\tremove.addAll(baseSet);\n+\t\tadd.addAll(compareSet);\n+\n+\t\tfor (T memberA : baseSet) {\n+\t\t\tcompareSet.forEach(memberB -> {\n+\t\t\t\tif (isSame(memberA, memberB)) {\n+\t\t\t\t\tremove.remove(memberA);\n+\t\t\t\t\tadd.remove(memberB);\n+\t\t\t\t} else if (isChanged(memberA, memberB)) {\n+\t\t\t\t\tremove.remove(memberA);\n+\t\t\t\t\tadd.remove(memberB);\n+\t\t\t\t\tchanges.put(memberA, memberB);\n+\t\t\t\t}\n+\t\t\t});\n+\t\t}\n+\t\treturn new CompareSetResult<T>(add, remove, changes);\n+\t}\n+\t\n+\tdefault boolean isSame(T memberA, T memberB) {\n+\t\tif (isSourceEqual(memberA, memberB) && isTargetEqual(memberA, memberB)) {", "originalCommit": "9fc87b2bd05dca4360e7c2843e1eb2109de06c59", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODA0NDUwNQ==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/610#discussion_r458044505", "bodyText": "Done", "author": "molnarlaura", "createdAt": "2020-07-21T12:04:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzEyODg1MA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzEyODk2MA==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/610#discussion_r457128960", "body": "Simplify if block to inlined return value expression.", "bodyText": "Simplify if block to inlined return value expression.", "bodyHTML": "<p dir=\"auto\">Simplify if block to inlined return value expression.</p>", "author": "cmark", "createdAt": "2020-07-20T07:27:08Z", "path": "core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/compare/CompareSets.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 B2i Healthcare. All rights reserved.\n+ *******************************************************************************/\n+package com.b2international.snowowl.core.compare;\n+\n+import java.util.List;\n+import java.util.Set;\n+\n+import com.google.common.collect.ArrayListMultimap;\n+import com.google.common.collect.ListMultimap;\n+import com.google.common.collect.Sets;\n+/**\n+ * @since 7.8\n+ */\n+public interface CompareSets <T,R> {\n+\n+\tdefault CompareSetResult<T> compareDifferents(List<T> baseSet, List<T> compareSet) {\n+\t\tListMultimap<T, T> changes = ArrayListMultimap.create();\n+\t\tSet<T> remove = Sets.newHashSet();\n+\t\tSet<T> add = Sets.newHashSet();\n+\n+\t\tremove.addAll(baseSet);\n+\t\tadd.addAll(compareSet);\n+\n+\t\tfor (T memberA : baseSet) {\n+\t\t\tcompareSet.forEach(memberB -> {\n+\t\t\t\tif (isSame(memberA, memberB)) {\n+\t\t\t\t\tremove.remove(memberA);\n+\t\t\t\t\tadd.remove(memberB);\n+\t\t\t\t} else if (isChanged(memberA, memberB)) {\n+\t\t\t\t\tremove.remove(memberA);\n+\t\t\t\t\tadd.remove(memberB);\n+\t\t\t\t\tchanges.put(memberA, memberB);\n+\t\t\t\t}\n+\t\t\t});\n+\t\t}\n+\t\treturn new CompareSetResult<T>(add, remove, changes);\n+\t}\n+\t\n+\tdefault boolean isSame(T memberA, T memberB) {\n+\t\tif (isSourceEqual(memberA, memberB) && isTargetEqual(memberA, memberB)) {\n+\t\t\treturn true;\n+\t\t}\n+\t\treturn false;\n+\t}\n+\t\n+\tdefault boolean isChanged(T memberA, T memberB) {\n+\t\tif (isSourceEqual(memberA, memberB) && !isTargetEqual(memberA, memberB)) {", "originalCommit": "9fc87b2bd05dca4360e7c2843e1eb2109de06c59", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODA0NDQ0MQ==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/610#discussion_r458044441", "bodyText": "Done", "author": "molnarlaura", "createdAt": "2020-07-21T12:04:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzEyODk2MA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzEzMjI5MA==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/610#discussion_r457132290", "body": "Fields should be `final` and `private`.", "bodyText": "Fields should be final and private.", "bodyHTML": "<p dir=\"auto\">Fields should be <code>final</code> and <code>private</code>.</p>", "author": "cmark", "createdAt": "2020-07-20T07:32:15Z", "path": "core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/compare/CompareSetResult.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 B2i Healthcare. All rights reserved.\n+ *******************************************************************************/\n+package com.b2international.snowowl.core.compare;\n+\n+import java.util.Set;\n+\n+import com.google.common.collect.ListMultimap;\n+/**\n+ * @since 7.8\n+ */\n+public class CompareSetResult <T> {\n+\tSet<T> addedMembers;\n+\tSet<T> removedMembers;\n+\tListMultimap<T, T> changedMembers;", "originalCommit": "9fc87b2bd05dca4360e7c2843e1eb2109de06c59", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODA0NDQxMQ==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/610#discussion_r458044411", "bodyText": "Done", "author": "molnarlaura", "createdAt": "2020-07-21T12:04:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzEzMjI5MA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzEzMjc2Nw==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/610#discussion_r457132767", "body": "Make sure you defensive copy the incoming Collection-like parameters with the `Immutable*.copyOf()` equivalent.", "bodyText": "Make sure you defensive copy the incoming Collection-like parameters with the Immutable*.copyOf() equivalent.", "bodyHTML": "<p dir=\"auto\">Make sure you defensive copy the incoming Collection-like parameters with the <code>Immutable*.copyOf()</code> equivalent.</p>", "author": "cmark", "createdAt": "2020-07-20T07:32:58Z", "path": "core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/compare/CompareSetResult.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 B2i Healthcare. All rights reserved.\n+ *******************************************************************************/\n+package com.b2international.snowowl.core.compare;\n+\n+import java.util.Set;\n+\n+import com.google.common.collect.ListMultimap;\n+/**\n+ * @since 7.8\n+ */\n+public class CompareSetResult <T> {\n+\tSet<T> addedMembers;\n+\tSet<T> removedMembers;\n+\tListMultimap<T, T> changedMembers;\n+\t\n+\tpublic CompareSetResult(Set<T> addedMembers, Set<T> removedMembers, ListMultimap<T, T> changedMembers) {\n+\t\tthis.addedMembers = addedMembers;", "originalCommit": "9fc87b2bd05dca4360e7c2843e1eb2109de06c59", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODA0NDM4MQ==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/610#discussion_r458044381", "bodyText": "Done", "author": "molnarlaura", "createdAt": "2020-07-21T12:04:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzEzMjc2Nw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzEzMzc0MA==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/610#discussion_r457133740", "body": "Rename this to `SnomedMapTypeReferenceSetCompareTest`.", "bodyText": "Rename this to SnomedMapTypeReferenceSetCompareTest.", "bodyHTML": "<p dir=\"auto\">Rename this to <code>SnomedMapTypeReferenceSetCompareTest</code>.</p>", "author": "cmark", "createdAt": "2020-07-20T07:34:30Z", "path": "snomed/com.b2international.snowowl.snomed.datastore.tests/src/com/b2international/snowowl/snomed/datastore/compare/ReferenceSetCompareTest.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 B2i Healthcare. All rights reserved.\n+ *******************************************************************************/\n+package com.b2international.snowowl.snomed.datastore.compare;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.junit.Test;\n+\n+import com.b2international.commons.exceptions.BadRequestException;\n+import com.b2international.snowowl.core.compare.CompareSetResult;\n+import com.b2international.snowowl.snomed.common.SnomedRf2Headers;\n+import com.b2international.snowowl.snomed.common.SnomedTerminologyComponentConstants;\n+import com.b2international.snowowl.snomed.core.domain.SnomedConcept;\n+import com.b2international.snowowl.snomed.core.domain.refset.SnomedRefSetType;\n+import com.b2international.snowowl.snomed.core.domain.refset.SnomedReferenceSet;\n+import com.b2international.snowowl.snomed.core.domain.refset.SnomedReferenceSetMember;\n+import com.b2international.snowowl.snomed.core.domain.refset.SnomedReferenceSetMembers;\n+import com.google.common.collect.ImmutableList;\n+\n+/**\n+ * @since 7.8\n+ */\n+public class ReferenceSetCompareTest {", "originalCommit": "9fc87b2bd05dca4360e7c2843e1eb2109de06c59", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgwMDY1Ng==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/610#discussion_r458800656", "bodyText": "Done", "author": "molnarlaura", "createdAt": "2020-07-22T13:42:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzEzMzc0MA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzEzNDQ3OA==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/610#discussion_r457134478", "body": "Why do you need this? Also, this uses the same value as the `TEMPLATE_NUMBER` constant.", "bodyText": "Why do you need this? Also, this uses the same value as the TEMPLATE_NUMBER constant.", "bodyHTML": "<p dir=\"auto\">Why do you need this? Also, this uses the same value as the <code>TEMPLATE_NUMBER</code> constant.</p>", "author": "cmark", "createdAt": "2020-07-20T07:35:36Z", "path": "snomed/com.b2international.snowowl.snomed.common/src/com/b2international/snowowl/snomed/common/SnomedTerminologyComponentConstants.java", "diffHunk": "@@ -51,6 +51,8 @@ private SnomedTerminologyComponentConstants() {}\n \tpublic static final short CONSTRAINT_NUMBER = 105;\n \tpublic static final String TEMPLATE = \"com.b2international.snowowl.terminology.snomed.template\";\n \tpublic static final short TEMPLATE_NUMBER = 106;\n+\tpublic static final String COMPARE_RESULT = \"com.b2international.snowowl.terminology.snomed.compare\";\n+\tpublic static final short COMPARE_RESULT_NUMBER = 106;", "originalCommit": "9fc87b2bd05dca4360e7c2843e1eb2109de06c59", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgwNTIxNQ==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/610#discussion_r458805215", "bodyText": "I used it for creating a component URI for the editor, but I will use the unspecified id instead.", "author": "molnarlaura", "createdAt": "2020-07-22T13:48:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzEzNDQ3OA=="}], "type": "inlineReview", "revised_code": {"commit": "b6cb09fc4d900883c7d4e32c7def51cb1a263cf1", "changed_code": [{"header": "diff --git a/snomed/com.b2international.snowowl.snomed.common/src/com/b2international/snowowl/snomed/common/SnomedTerminologyComponentConstants.java b/snomed/com.b2international.snowowl.snomed.common/src/com/b2international/snowowl/snomed/common/SnomedTerminologyComponentConstants.java\nindex 05711e88b5..a11dbb5a5a 100644\n--- a/snomed/com.b2international.snowowl.snomed.common/src/com/b2international/snowowl/snomed/common/SnomedTerminologyComponentConstants.java\n+++ b/snomed/com.b2international.snowowl.snomed.common/src/com/b2international/snowowl/snomed/common/SnomedTerminologyComponentConstants.java\n", "chunk": "@@ -51,9 +51,10 @@ public abstract class SnomedTerminologyComponentConstants {\n \tpublic static final short CONSTRAINT_NUMBER = 105;\n \tpublic static final String TEMPLATE = \"com.b2international.snowowl.terminology.snomed.template\";\n \tpublic static final short TEMPLATE_NUMBER = 106;\n-\tpublic static final String COMPARE_RESULT = \"com.b2international.snowowl.terminology.snomed.compare\";\n-\tpublic static final short COMPARE_RESULT_NUMBER = 106;\n \t\n+\t/**\n+\t * @deprecated - will be moved to test API in Snow Owl 8.0, using it in business logic might yield incorrect results\n+\t */\n \tpublic static final String SNOMED_SHORT_NAME = \"SNOMEDCT\";\n \tpublic static final String SNOMED_NAME = \"SNOMED CT\";\n \t\n", "next_change": {"commit": "3544979493b8d51d3ced2051bdde7ab640f81914", "changed_code": [{"header": "diff --git a/snomed/com.b2international.snowowl.snomed.common/src/com/b2international/snowowl/snomed/common/SnomedTerminologyComponentConstants.java b/snomed/com.b2international.snowowl.snomed.common/src/com/b2international/snowowl/snomed/common/SnomedTerminologyComponentConstants.java\nindex a11dbb5a5a..2e02420544 100644\n--- a/snomed/com.b2international.snowowl.snomed.common/src/com/b2international/snowowl/snomed/common/SnomedTerminologyComponentConstants.java\n+++ b/snomed/com.b2international.snowowl.snomed.common/src/com/b2international/snowowl/snomed/common/SnomedTerminologyComponentConstants.java\n", "chunk": "@@ -52,35 +42,22 @@ public abstract class SnomedTerminologyComponentConstants {\n \tpublic static final String TEMPLATE = \"com.b2international.snowowl.terminology.snomed.template\";\n \tpublic static final short TEMPLATE_NUMBER = 106;\n \t\n-\t/**\n-\t * @deprecated - will be moved to test API in Snow Owl 8.0, using it in business logic might yield incorrect results\n-\t */\n-\tpublic static final String SNOMED_SHORT_NAME = \"SNOMEDCT\";\n-\tpublic static final String SNOMED_NAME = \"SNOMED CT\";\n+//\tpublic static final String SNOMED_NAME = \"SNOMED CT\";\n+//\tpublic static final String SNOMED_INT_LANGUAGE = \"ENG\";\n+//\tpublic static final String SNOMED_INT_LINK = \"http://www.snomed.org\";\n+//\tpublic static final String SNOMED_INT_ICON_PATH = \"icons/snomed.png\";\n+//\tpublic static final String SNOMED_INT_CITATION = \"SNOMED CT contributes to the improvement of patient care by underpinning the \" +\n+//\t\t\t\"development of Electronic Health Records that record clinical information in ways that enable meaning-based retrieval. \" +\n+//\t\t\t\"This provides effective access to information required for decision support and consistent reporting and analysis. \" +\n+//\t\t\t\"Patients benefit from the use of SNOMED CT because it improves the recording of EHR information and facilitates better communication, \" +\n+//\t\t\t\"leading to improvements in the quality of care.\";\n \t\n-\tpublic static final String SNOMED_INT_OID = \"2.16.840.1.113883.6.96\";\n-\tpublic static final String SNOMED_INT_LANGUAGE = \"ENG\";\n-\tpublic static final String SNOMED_INT_LINK = \"http://www.snomed.org\";\n-\tpublic static final String SNOMED_INT_ICON_PATH = \"icons/snomed.png\";\n-\tpublic static final String SNOMED_INT_CITATION = \"SNOMED CT contributes to the improvement of patient care by underpinning the \" +\n-\t\t\t\"development of Electronic Health Records that record clinical information in ways that enable meaning-based retrieval. \" +\n-\t\t\t\"This provides effective access to information required for decision support and consistent reporting and analysis. \" +\n-\t\t\t\"Patients benefit from the use of SNOMED CT because it improves the recording of EHR information and facilitates better communication, \" +\n-\t\t\t\"leading to improvements in the quality of care.\";\n-\t\n-\t/**\n-\t * @deprecated - will be moved to test API in Snow Owl 8.0, using it in business logic might yield incorrect results\n-\t */\n-\tpublic static final String SNOMED_B2I_SHORT_NAME = SNOMED_SHORT_NAME + \"-B2I\";\n-\tpublic static final String SNOMED_B2I_NAME = SNOMED_NAME + \", B2i extension\";\n-\tpublic static final String SNOMED_B2I_OID = SNOMED_INT_OID + \".1000154\";\n-\tpublic static final String SNOMED_B2I_LINK = \"https://b2i.sg\";\n-\n \tprivate static final Pattern PATTERN = Pattern.compile(\"^\\\\d*$\");\n \n \t// configuration keys for managing Module and Namespace configuration in CodeSystem entries\n \tpublic static final String CODESYSTEM_MODULES_CONFIG_KEY = \"moduleIds\";\n \tpublic static final String CODESYSTEM_NAMESPACE_CONFIG_KEY = \"namespace\";\n+\tpublic static final String CODESYSTEM_DESCRIPTION_COPY_POLICY_CONFIG_KEY = \"descriptionCopyPolicy\";\n \t\n \tpublic static short getTerminologyComponentIdValue(final String referencedComponentId) {\n \t\tfinal short s = getTerminologyComponentIdValueSafe(referencedComponentId);\n", "next_change": {"commit": "86d97bc4eaf832683c89740566b0ab39849d767a", "changed_code": [{"header": "diff --git a/snomed/com.b2international.snowowl.snomed.common/src/com/b2international/snowowl/snomed/common/SnomedTerminologyComponentConstants.java b/snomed/com.b2international.snowowl.snomed.common/src/com/b2international/snowowl/snomed/common/SnomedTerminologyComponentConstants.java\nindex 2e02420544..eb1fa0e564 100644\n--- a/snomed/com.b2international.snowowl.snomed.common/src/com/b2international/snowowl/snomed/common/SnomedTerminologyComponentConstants.java\n+++ b/snomed/com.b2international.snowowl.snomed.common/src/com/b2international/snowowl/snomed/common/SnomedTerminologyComponentConstants.java\n", "chunk": "@@ -58,6 +58,10 @@ public abstract class SnomedTerminologyComponentConstants {\n \tpublic static final String CODESYSTEM_MODULES_CONFIG_KEY = \"moduleIds\";\n \tpublic static final String CODESYSTEM_NAMESPACE_CONFIG_KEY = \"namespace\";\n \tpublic static final String CODESYSTEM_DESCRIPTION_COPY_POLICY_CONFIG_KEY = \"descriptionCopyPolicy\";\n+\n+\t// FHIR specific constants\n+\tpublic static final String SNOMED_URI_BASE = \"http://snomed.info/sct\";\n+\tpublic static final String SNOMED_URI_BASE_DEV = \"http://snomed.info/xsct\";\n \t\n \tpublic static short getTerminologyComponentIdValue(final String referencedComponentId) {\n \t\tfinal short s = getTerminologyComponentIdValueSafe(referencedComponentId);\n", "next_change": {"commit": "56fc09cf22bd8cc0de9abd210a4982b1c89f34b2", "changed_code": [{"header": "diff --git a/snomed/com.b2international.snowowl.snomed.common/src/com/b2international/snowowl/snomed/common/SnomedTerminologyComponentConstants.java b/snomed/com.b2international.snowowl.snomed.common/src/com/b2international/snowowl/snomed/common/SnomedTerminologyComponentConstants.java\nindex eb1fa0e564..962b3117b2 100644\n--- a/snomed/com.b2international.snowowl.snomed.common/src/com/b2international/snowowl/snomed/common/SnomedTerminologyComponentConstants.java\n+++ b/snomed/com.b2international.snowowl.snomed.common/src/com/b2international/snowowl/snomed/common/SnomedTerminologyComponentConstants.java\n", "chunk": "@@ -60,8 +50,9 @@ public abstract class SnomedTerminologyComponentConstants {\n \tpublic static final String CODESYSTEM_DESCRIPTION_COPY_POLICY_CONFIG_KEY = \"descriptionCopyPolicy\";\n \n \t// FHIR specific constants\n-\tpublic static final String SNOMED_URI_BASE = \"http://snomed.info/sct\";\n-\tpublic static final String SNOMED_URI_BASE_DEV = \"http://snomed.info/xsct\";\n+\tpublic static final String SNOMED_URI_BASE = \"http://snomed.info\";\n+\tpublic static final String SNOMED_URI_SCT = SNOMED_URI_BASE + \"/sct\";\n+\tpublic static final String SNOMED_URI_DEV = SNOMED_URI_BASE + \"/xsct\";\n \t\n \tpublic static short getTerminologyComponentIdValue(final String referencedComponentId) {\n \t\tfinal short s = getTerminologyComponentIdValueSafe(referencedComponentId);\n", "next_change": {"commit": "4ef81cb26011b84efc2e93df1ece91d202f1b674", "changed_code": [{"header": "diff --git a/snomed/com.b2international.snowowl.snomed.common/src/com/b2international/snowowl/snomed/common/SnomedTerminologyComponentConstants.java b/snomed/com.b2international.snowowl.snomed.common/src/com/b2international/snowowl/snomed/common/SnomedTerminologyComponentConstants.java\nindex 962b3117b2..bf181a51ba 100644\n--- a/snomed/com.b2international.snowowl.snomed.common/src/com/b2international/snowowl/snomed/common/SnomedTerminologyComponentConstants.java\n+++ b/snomed/com.b2international.snowowl.snomed.common/src/com/b2international/snowowl/snomed/common/SnomedTerminologyComponentConstants.java\n", "chunk": "@@ -53,6 +53,7 @@ public abstract class SnomedTerminologyComponentConstants {\n \tpublic static final String SNOMED_URI_BASE = \"http://snomed.info\";\n \tpublic static final String SNOMED_URI_SCT = SNOMED_URI_BASE + \"/sct\";\n \tpublic static final String SNOMED_URI_DEV = SNOMED_URI_BASE + \"/xsct\";\n+\tpublic static final String SNOMED_URI_ID = SNOMED_URI_BASE + \"/id\";\n \t\n \tpublic static short getTerminologyComponentIdValue(final String referencedComponentId) {\n \t\tfinal short s = getTerminologyComponentIdValueSafe(referencedComponentId);\n", "next_change": {"commit": "6e5d5f75afdb19ead2595ff9d36335dd42ff3e43", "changed_code": [{"header": "diff --git a/snomed/com.b2international.snowowl.snomed.common/src/com/b2international/snowowl/snomed/common/SnomedTerminologyComponentConstants.java b/snomed/com.b2international.snowowl.snomed.common/src/com/b2international/snowowl/snomed/common/SnomedTerminologyComponentConstants.java\nindex bf181a51ba..96e59444ab 100644\n--- a/snomed/com.b2international.snowowl.snomed.common/src/com/b2international/snowowl/snomed/common/SnomedTerminologyComponentConstants.java\n+++ b/snomed/com.b2international.snowowl.snomed.common/src/com/b2international/snowowl/snomed/common/SnomedTerminologyComponentConstants.java\n", "chunk": "@@ -27,81 +27,38 @@ public abstract class SnomedTerminologyComponentConstants {\n \n \tpublic static final String TOOLING_ID = \"snomed\";\n \t\n-\tpublic static final String CONCEPT = \"com.b2international.snowowl.terminology.snomed.concept\";\n-\tpublic static final short CONCEPT_NUMBER = 100;\n-\tpublic static final String DESCRIPTION = \"com.b2international.snowowl.terminology.snomed.description\";\n-\tpublic static final short DESCRIPTION_NUMBER = 101;\n-\tpublic static final String RELATIONSHIP = \"com.b2international.snowowl.terminology.snomed.relationship\";\n-\tpublic static final short RELATIONSHIP_NUMBER = 102;\n-\tpublic static final String REFSET = \"com.b2international.snowowl.terminology.snomed.refset\";\n-\tpublic static final short REFSET_NUMBER = 103;\n-\tpublic static final String REFSET_MEMBER = \"com.b2international.snowowl.terminology.snomed.refsetmember\";\n-\tpublic static final short REFSET_MEMBER_NUMBER = 104;\n-\tpublic static final String CONSTRAINT = \"com.b2international.snowowl.terminology.snomed.constraint\";\n-\tpublic static final short CONSTRAINT_NUMBER = 105;\n-\tpublic static final String TEMPLATE = \"com.b2international.snowowl.terminology.snomed.template\";\n-\tpublic static final short TEMPLATE_NUMBER = 106;\n-\t\n-\tprivate static final Pattern PATTERN = Pattern.compile(\"^\\\\d*$\");\n \n \t// configuration keys for managing Module and Namespace configuration in CodeSystem entries\n \tpublic static final String CODESYSTEM_MODULES_CONFIG_KEY = \"moduleIds\";\n \tpublic static final String CODESYSTEM_NAMESPACE_CONFIG_KEY = \"namespace\";\n \tpublic static final String CODESYSTEM_DESCRIPTION_COPY_POLICY_CONFIG_KEY = \"descriptionCopyPolicy\";\n-\n+\tpublic static final String CODESYSTEM_MAINTAINER_TYPE_CONFIG_KEY = \"maintainerType\";\n+\tpublic static final String CODESYSTEM_RF2_EXPORT_LAYOUT_CONFIG_KEY = \"refSetExportLayout\";\n+\tpublic static final String CODESYSTEM_NRC_COUNTRY_CODE_CONFIG_KEY = \"nrcCountryCode\";\n+\t\n \t// FHIR specific constants\n \tpublic static final String SNOMED_URI_BASE = \"http://snomed.info\";\n \tpublic static final String SNOMED_URI_SCT = SNOMED_URI_BASE + \"/sct\";\n \tpublic static final String SNOMED_URI_DEV = SNOMED_URI_BASE + \"/xsct\";\n \tpublic static final String SNOMED_URI_ID = SNOMED_URI_BASE + \"/id\";\n \t\n-\tpublic static short getTerminologyComponentIdValue(final String referencedComponentId) {\n-\t\tfinal short s = getTerminologyComponentIdValueSafe(referencedComponentId);\n-\t\tif (-1 == s) {\n-\t\t\tthrow new IllegalArgumentException(\"'\" + referencedComponentId + \"' referenced component type is unknown.\");\n-\t\t} else {\n-\t\t\treturn s;\n-\t\t}\n-\t}\n-\n-\tpublic static short getTerminologyComponentIdValueSafe(final String referencedComponentId) {\n-\t\tif (Strings.isNullOrEmpty(referencedComponentId)) {\n-\t\t\treturn -1;\n-\t\t}\n-\t\t\n-\t\tif (!PATTERN.matcher(referencedComponentId).matches() || referencedComponentId.length() < 6 || referencedComponentId.length() > 18) {\n-\t\t\treturn -1;\n-\t\t}\n-\n-\t\tif (!VerhoeffCheck.validateLastChecksumDigit(referencedComponentId)) {\n-\t\t\treturn -1;\n-\t\t}\n-\n-\t\tswitch (referencedComponentId.charAt(referencedComponentId.length() - 2)) {\n-\t\t\tcase '0': return CONCEPT_NUMBER;\n-\t\t\tcase '1': return DESCRIPTION_NUMBER;\n-\t\t\tcase '2': return RELATIONSHIP_NUMBER;\n-\t\t\tdefault: return -1;\n-\t\t}\n-\t}\n-\n-\tpublic static String getTerminologyComponentId(final String referencedComponentId) {\n-\t\tswitch (getTerminologyComponentIdValue(referencedComponentId)) {\n-\t\t\tcase CONCEPT_NUMBER: return CONCEPT;\n-\t\t\tcase DESCRIPTION_NUMBER: return DESCRIPTION;\n-\t\t\tcase RELATIONSHIP_NUMBER: return RELATIONSHIP;\n-\t\t\tdefault: throw new IllegalArgumentException(\"'\" + referencedComponentId + \"' referenced component type is unknown\");\n-\t\t}\n-\t}\n-\n-\tpublic static boolean isCoreComponentId(String componentId) {\n-\t\treturn isCoreComponentType(getTerminologyComponentIdValueSafe(componentId));\n-\t}\n-\n-\tpublic static boolean isCoreComponentType(short componentType) {\n-\t\treturn SnomedTerminologyComponentConstants.CONCEPT_NUMBER == componentType || \n-\t\t\t\tSnomedTerminologyComponentConstants.DESCRIPTION_NUMBER == componentType || \n-\t\t\t\tSnomedTerminologyComponentConstants.RELATIONSHIP_NUMBER == componentType;\n-\t}\n+//\tpublic static String getTerminologyComponentId(final String referencedComponentId) {\n+//\t\tswitch (getTerminologyComponentIdValue(referencedComponentId)) {\n+//\t\t\tcase CONCEPT_NUMBER: return CONCEPT;\n+//\t\t\tcase DESCRIPTION_NUMBER: return DESCRIPTION;\n+//\t\t\tcase RELATIONSHIP_NUMBER: return RELATIONSHIP;\n+//\t\t\tdefault: throw new IllegalArgumentException(\"'\" + referencedComponentId + \"' referenced component type is unknown\");\n+//\t\t}\n+//\t}\n+//\n+//\tpublic static boolean isCoreComponentId(String componentId) {\n+//\t\treturn isCoreComponentType(getTerminologyComponentIdValueSafe(componentId));\n+//\t}\n+//\n+//\tpublic static boolean isCoreComponentType(short componentType) {\n+//\t\treturn SnomedConcept.TYPE == componentType || \n+//\t\t\t\tSnomedDescription.TYPE == componentType || \n+//\t\t\t\tSnomedRelationship.TYPE == componentType;\n+//\t}\n \t\n }\n\\ No newline at end of file\n", "next_change": {"commit": "c17dd72ccbf84c3f8ce1614e259d2a50aac76c47", "changed_code": [{"header": "diff --git a/snomed/com.b2international.snowowl.snomed.common/src/com/b2international/snowowl/snomed/common/SnomedTerminologyComponentConstants.java b/snomed/com.b2international.snowowl.snomed.common/src/com/b2international/snowowl/snomed/common/SnomedTerminologyComponentConstants.java\nindex 96e59444ab..05bc478248 100644\n--- a/snomed/com.b2international.snowowl.snomed.common/src/com/b2international/snowowl/snomed/common/SnomedTerminologyComponentConstants.java\n+++ b/snomed/com.b2international.snowowl.snomed.common/src/com/b2international/snowowl/snomed/common/SnomedTerminologyComponentConstants.java\n", "chunk": "@@ -42,23 +37,4 @@ public abstract class SnomedTerminologyComponentConstants {\n \tpublic static final String SNOMED_URI_DEV = SNOMED_URI_BASE + \"/xsct\";\n \tpublic static final String SNOMED_URI_ID = SNOMED_URI_BASE + \"/id\";\n \t\n-//\tpublic static String getTerminologyComponentId(final String referencedComponentId) {\n-//\t\tswitch (getTerminologyComponentIdValue(referencedComponentId)) {\n-//\t\t\tcase CONCEPT_NUMBER: return CONCEPT;\n-//\t\t\tcase DESCRIPTION_NUMBER: return DESCRIPTION;\n-//\t\t\tcase RELATIONSHIP_NUMBER: return RELATIONSHIP;\n-//\t\t\tdefault: throw new IllegalArgumentException(\"'\" + referencedComponentId + \"' referenced component type is unknown\");\n-//\t\t}\n-//\t}\n-//\n-//\tpublic static boolean isCoreComponentId(String componentId) {\n-//\t\treturn isCoreComponentType(getTerminologyComponentIdValueSafe(componentId));\n-//\t}\n-//\n-//\tpublic static boolean isCoreComponentType(short componentType) {\n-//\t\treturn SnomedConcept.TYPE == componentType || \n-//\t\t\t\tSnomedDescription.TYPE == componentType || \n-//\t\t\t\tSnomedRelationship.TYPE == componentType;\n-//\t}\n-\t\n }\n\\ No newline at end of file\n", "next_change": {"commit": "b84a8c44394e49eb8de0a718350333fa2c53ac80", "changed_code": [{"header": "diff --git a/snomed/com.b2international.snowowl.snomed.common/src/com/b2international/snowowl/snomed/common/SnomedTerminologyComponentConstants.java b/snomed/com.b2international.snowowl.snomed.common/src/com/b2international/snowowl/snomed/common/SnomedTerminologyComponentConstants.java\nindex 05bc478248..676ddacb04 100644\n--- a/snomed/com.b2international.snowowl.snomed.common/src/com/b2international/snowowl/snomed/common/SnomedTerminologyComponentConstants.java\n+++ b/snomed/com.b2international.snowowl.snomed.common/src/com/b2international/snowowl/snomed/common/SnomedTerminologyComponentConstants.java\n", "chunk": "@@ -37,4 +47,19 @@ public abstract class SnomedTerminologyComponentConstants {\n \tpublic static final String SNOMED_URI_DEV = SNOMED_URI_BASE + \"/xsct\";\n \tpublic static final String SNOMED_URI_ID = SNOMED_URI_BASE + \"/id\";\n \t\n+\t\n+\tpublic static String getNamespace(String conceptId, String fsn) {\n+\t\treturn getNamespace(DEFAULT_NAMESPACE_PATTERN, conceptId, fsn);\n+\t}\n+\t\n+\tpublic static String getNamespace(String namespacePattern, String conceptId, String fsn) {\n+\t\tif (Concepts.CORE_NAMESPACE.equals(conceptId) || Strings.isNullOrEmpty(conceptId) || Strings.isNullOrEmpty(fsn)) {\n+\t\t\treturn \"\";\n+\t\t} else {\n+\t\t\tfinal Matcher matcher = Pattern.compile(namespacePattern).matcher(fsn);\n+\t\t\tcheckState(matcher.matches(), \"Pattern %s does not match on input: %s\", namespacePattern, fsn);\n+\t\t\treturn matcher.group(1);\n+\t\t}\n+\t}\n+\t\n }\n\\ No newline at end of file\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzEzNDkxMQ==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/610#discussion_r457134911", "body": "Typo!", "bodyText": "Typo!", "bodyHTML": "<p dir=\"auto\">Typo!</p>", "author": "cmark", "createdAt": "2020-07-20T07:36:16Z", "path": "snomed/com.b2international.snowowl.snomed.datastore.tests/src/com/b2international/snowowl/snomed/datastore/compare/ReferenceSetCompareTest.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 B2i Healthcare. All rights reserved.\n+ *******************************************************************************/\n+package com.b2international.snowowl.snomed.datastore.compare;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.junit.Test;\n+\n+import com.b2international.commons.exceptions.BadRequestException;\n+import com.b2international.snowowl.core.compare.CompareSetResult;\n+import com.b2international.snowowl.snomed.common.SnomedRf2Headers;\n+import com.b2international.snowowl.snomed.common.SnomedTerminologyComponentConstants;\n+import com.b2international.snowowl.snomed.core.domain.SnomedConcept;\n+import com.b2international.snowowl.snomed.core.domain.refset.SnomedRefSetType;\n+import com.b2international.snowowl.snomed.core.domain.refset.SnomedReferenceSet;\n+import com.b2international.snowowl.snomed.core.domain.refset.SnomedReferenceSetMember;\n+import com.b2international.snowowl.snomed.core.domain.refset.SnomedReferenceSetMembers;\n+import com.google.common.collect.ImmutableList;\n+\n+/**\n+ * @since 7.8\n+ */\n+public class ReferenceSetCompareTest {\n+\tprivate static final String CODE_SYSTEM_1 = SnomedTerminologyComponentConstants.TERMINOLOGY_ID;\n+\tprivate static final String CODE_SYSTEM_2 = \"cs1\";\n+\tprivate static final String CODE_SYSTEM_3 = \"cs2\";\n+\t\n+\tfinal ReferenceSetCompare comparator = new ReferenceSetCompare();\n+\t\n+\t@Test\n+\tpublic void compareEqualSimleMapRefSets() {\n+\t\tSnomedReferenceSet rf1 = new SnomedReferenceSet();\n+\t\trf1.setId(\"rf1\");\n+\t\trf1.setReferencedComponentType(CODE_SYSTEM_1);\n+\t\trf1.setMapTargetComponentType(CODE_SYSTEM_2);\n+\t\trf1.setType(SnomedRefSetType.SIMPLE_MAP);\n+\t\t\n+\t\tSnomedReferenceSet rf2 = new SnomedReferenceSet();\n+\t\trf2.setId(\"rf2\");\n+\t\trf2.setReferencedComponentType(CODE_SYSTEM_1);\n+\t\trf2.setMapTargetComponentType(CODE_SYSTEM_2);\n+\t\trf2.setType(SnomedRefSetType.SIMPLE_MAP);\n+\t\t\n+\t\tfinal Map<String, Object> properties1 = new HashMap<String, Object>();\n+\t\tproperties1.put(SnomedRf2Headers.FIELD_MAP_TARGET, \"2\");\n+\t\t\n+\t\tSnomedConcept concept1 = new SnomedConcept(\"1\");\n+\t\t\n+\t\tSnomedReferenceSetMember member1 = new SnomedReferenceSetMember();\n+\t\tmember1.setId(\"1\");\n+\t\tmember1.setProperties(properties1);\n+\t\tmember1.setReferencedComponent(concept1);\n+\t\t\n+\t\tSnomedReferenceSetMember member2 = new SnomedReferenceSetMember();\n+\t\tmember2.setId(\"2\");\n+\t\tmember2.setProperties(properties1);\n+\t\tmember2.setReferencedComponent(concept1);\n+\t\t\n+\t\trf1.setMembers(new SnomedReferenceSetMembers(ImmutableList.of(member1), null, 1, 1));\n+\t\trf2.setMembers(new SnomedReferenceSetMembers(ImmutableList.of(member2), null, 1, 1));\n+\t\t\n+\t\tCompareSetResult<SnomedReferenceSetMember> result = comparator.doCompare(rf1, rf2);\n+\t\tassertEquals(0, result.getRemovedMembers().size());\n+\t\tassertEquals(0, result.getAddedMembers().size());\n+\t\tassertEquals(0, result.getChangedMembers().size());\n+\t\t\n+\t}\n+\t\n+\t@Test(expected = BadRequestException.class)\n+\tpublic void compareNonSympleTypeRefSets() {", "originalCommit": "9fc87b2bd05dca4360e7c2843e1eb2109de06c59", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODA0MzcxNQ==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/610#discussion_r458043715", "bodyText": "Done", "author": "molnarlaura", "createdAt": "2020-07-21T12:02:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzEzNDkxMQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzEzNTc2Ng==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/610#discussion_r457135766", "body": "Simplify test cases by reducing the size of the build phase in each test.\r\nYou could extract common set of test fixtures to build methods or to constants.", "bodyText": "Simplify test cases by reducing the size of the build phase in each test.\nYou could extract common set of test fixtures to build methods or to constants.", "bodyHTML": "<p dir=\"auto\">Simplify test cases by reducing the size of the build phase in each test.<br>\nYou could extract common set of test fixtures to build methods or to constants.</p>", "author": "cmark", "createdAt": "2020-07-20T07:37:39Z", "path": "snomed/com.b2international.snowowl.snomed.datastore.tests/src/com/b2international/snowowl/snomed/datastore/compare/ReferenceSetCompareTest.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 B2i Healthcare. All rights reserved.\n+ *******************************************************************************/\n+package com.b2international.snowowl.snomed.datastore.compare;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.junit.Test;\n+\n+import com.b2international.commons.exceptions.BadRequestException;\n+import com.b2international.snowowl.core.compare.CompareSetResult;\n+import com.b2international.snowowl.snomed.common.SnomedRf2Headers;\n+import com.b2international.snowowl.snomed.common.SnomedTerminologyComponentConstants;\n+import com.b2international.snowowl.snomed.core.domain.SnomedConcept;\n+import com.b2international.snowowl.snomed.core.domain.refset.SnomedRefSetType;\n+import com.b2international.snowowl.snomed.core.domain.refset.SnomedReferenceSet;\n+import com.b2international.snowowl.snomed.core.domain.refset.SnomedReferenceSetMember;\n+import com.b2international.snowowl.snomed.core.domain.refset.SnomedReferenceSetMembers;\n+import com.google.common.collect.ImmutableList;\n+\n+/**\n+ * @since 7.8\n+ */\n+public class ReferenceSetCompareTest {\n+\tprivate static final String CODE_SYSTEM_1 = SnomedTerminologyComponentConstants.TERMINOLOGY_ID;\n+\tprivate static final String CODE_SYSTEM_2 = \"cs1\";\n+\tprivate static final String CODE_SYSTEM_3 = \"cs2\";\n+\t\n+\tfinal ReferenceSetCompare comparator = new ReferenceSetCompare();\n+\t\n+\t@Test\n+\tpublic void compareEqualSimleMapRefSets() {\n+\t\tSnomedReferenceSet rf1 = new SnomedReferenceSet();", "originalCommit": "9fc87b2bd05dca4360e7c2843e1eb2109de06c59", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODA0MzY4MA==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/610#discussion_r458043680", "bodyText": "Done", "author": "molnarlaura", "createdAt": "2020-07-21T12:02:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzEzNTc2Ng=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzEzNjUyMg==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/610#discussion_r457136522", "body": "Possible NPE here, use `Objects.equals` instead.", "bodyText": "Possible NPE here, use Objects.equals instead.", "bodyHTML": "<p dir=\"auto\">Possible NPE here, use <code>Objects.equals</code> instead.</p>", "author": "cmark", "createdAt": "2020-07-20T07:38:48Z", "path": "snomed/com.b2international.snowowl.snomed.datastore/src/com/b2international/snowowl/snomed/datastore/compare/ReferenceSetCompare.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 B2i Healthcare. All rights reserved.\n+ *******************************************************************************/\n+package com.b2international.snowowl.snomed.datastore.compare;\n+\n+import com.b2international.commons.exceptions.BadRequestException;\n+import com.b2international.snowowl.core.compare.CompareSetResult;\n+import com.b2international.snowowl.core.compare.CompareSets;\n+import com.b2international.snowowl.snomed.common.SnomedRf2Headers;\n+import com.b2international.snowowl.snomed.core.domain.refset.SnomedRefSetType;\n+import com.b2international.snowowl.snomed.core.domain.refset.SnomedReferenceSet;\n+import com.b2international.snowowl.snomed.core.domain.refset.SnomedReferenceSetMember;\n+\n+/**\n+ * @since 7.8\n+ */\n+public final class ReferenceSetCompare implements CompareSets<SnomedReferenceSetMember, SnomedReferenceSet> {\n+\n+\t@Override\n+\tpublic CompareSetResult<SnomedReferenceSetMember> doCompare(SnomedReferenceSet baseRf, SnomedReferenceSet compareRf) {\n+\t\tif (!SnomedRefSetType.SIMPLE_MAP.equals(baseRf.getType()) || !SnomedRefSetType.SIMPLE_MAP.equals(compareRf.getType())) {\n+\t\t\tthrow new BadRequestException(\"Comparing Reference Sets requires the following Reference Sets (%s, %s) to be Simple Map Reference Sets!\", baseRf.getId(), compareRf.getId());\n+\t\t}\n+\t\treturn compareDifferents(baseRf.getMembers().getItems(), compareRf.getMembers().getItems());\n+\t}\n+\n+\t@Override\n+\tpublic boolean isSourceEqual(SnomedReferenceSetMember memberA, SnomedReferenceSetMember memberB) {\n+\t\tif (memberA.getReferencedComponent().getId().equals(memberB.getReferencedComponent().getId())) {\n+\t\t\treturn true;\n+\t\t}\n+\t\treturn false;\n+\t}\n+\n+\t@Override\n+\tpublic boolean isTargetEqual(SnomedReferenceSetMember memberA, SnomedReferenceSetMember memberB) {\n+\t\tif (memberA.getProperties().get(SnomedRf2Headers.FIELD_MAP_TARGET).equals(memberB.getProperties().get(SnomedRf2Headers.FIELD_MAP_TARGET))) {", "originalCommit": "9fc87b2bd05dca4360e7c2843e1eb2109de06c59", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODA0MzYyMg==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/610#discussion_r458043622", "bodyText": "Done", "author": "molnarlaura", "createdAt": "2020-07-21T12:02:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzEzNjUyMg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzEzOTI4Mw==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/610#discussion_r457139283", "body": "Never ever put conditional blocks into `filterBy` methods.\r\nHandle all these in the actual `Request` implementation instead.\r\nNot sure if these are actually needed.\r\nThis way we cannot filter reference sets where the `mapTargetComponentType` is `UNSPECIFIED`.\r\nNull values are the only values that do NOT generate actual clauses in search requests.\r\nPlease refactor.", "bodyText": "Never ever put conditional blocks into filterBy methods.\nHandle all these in the actual Request implementation instead.\nNot sure if these are actually needed.\nThis way we cannot filter reference sets where the mapTargetComponentType is UNSPECIFIED.\nNull values are the only values that do NOT generate actual clauses in search requests.\nPlease refactor.", "bodyHTML": "<p dir=\"auto\">Never ever put conditional blocks into <code>filterBy</code> methods.<br>\nHandle all these in the actual <code>Request</code> implementation instead.<br>\nNot sure if these are actually needed.<br>\nThis way we cannot filter reference sets where the <code>mapTargetComponentType</code> is <code>UNSPECIFIED</code>.<br>\nNull values are the only values that do NOT generate actual clauses in search requests.<br>\nPlease refactor.</p>", "author": "cmark", "createdAt": "2020-07-20T07:42:52Z", "path": "snomed/com.b2international.snowowl.snomed.datastore/src/com/b2international/snowowl/snomed/datastore/request/SnomedRefSetSearchRequestBuilder.java", "diffHunk": "@@ -82,6 +82,17 @@ public SnomedRefSetSearchRequestBuilder filterByMapTargetComponentType(Integer m\n \t\t}\n \t\treturn addOption(SnomedRefSetSearchRequest.OptionKey.MAP_TARGET_COMPONENT_TYPE, mapTargetComponentType);\n \t}\n+\t\n+\tpublic SnomedRefSetSearchRequestBuilder filterByMapTargetComponentType(String mapTargetComponentType) {\n+\t\tif (Strings.isNullOrEmpty(mapTargetComponentType)) {", "originalCommit": "9fc87b2bd05dca4360e7c2843e1eb2109de06c59", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODA1NDE2MQ==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/610#discussion_r458054161", "bodyText": "Done", "author": "molnarlaura", "createdAt": "2020-07-21T12:22:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzEzOTI4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "8d4c917faed15408a236e917782b0497139954a3", "changed_code": [{"header": "diff --git a/snomed/com.b2international.snowowl.snomed.datastore/src/com/b2international/snowowl/snomed/datastore/request/SnomedRefSetSearchRequestBuilder.java b/snomed/com.b2international.snowowl.snomed.datastore/src/com/b2international/snowowl/snomed/datastore/request/SnomedRefSetSearchRequestBuilder.java\nindex 28f713fbf4..d71fcd583e 100644\n--- a/snomed/com.b2international.snowowl.snomed.datastore/src/com/b2international/snowowl/snomed/datastore/request/SnomedRefSetSearchRequestBuilder.java\n+++ b/snomed/com.b2international.snowowl.snomed.datastore/src/com/b2international/snowowl/snomed/datastore/request/SnomedRefSetSearchRequestBuilder.java\n", "chunk": "@@ -87,9 +87,6 @@ public final class SnomedRefSetSearchRequestBuilder extends SnomedSearchRequestB\n \t\tif (Strings.isNullOrEmpty(mapTargetComponentType)) {\n \t\t\treturn getSelf();\n \t\t}\n-\t\tif (TerminologyRegistry.UNSPECIFIED.equals(mapTargetComponentType)) {\n-\t\t\treturn getSelf();\n-\t\t}\n \t\tfinal int referencedComponentTypeAsInt = TerminologyRegistry.INSTANCE.getTerminologyComponentById(mapTargetComponentType).shortId();\n \t\treturn filterByMapTargetComponentType(referencedComponentTypeAsInt);\n \t}\n", "next_change": {"commit": "6e5d5f75afdb19ead2595ff9d36335dd42ff3e43", "changed_code": [{"header": "diff --git a/snomed/com.b2international.snowowl.snomed.datastore/src/com/b2international/snowowl/snomed/datastore/request/SnomedRefSetSearchRequestBuilder.java b/snomed/com.b2international.snowowl.snomed.datastore/src/com/b2international/snowowl/snomed/datastore/request/SnomedRefSetSearchRequestBuilder.java\nindex d71fcd583e..aa0a5a25c0 100644\n--- a/snomed/com.b2international.snowowl.snomed.datastore/src/com/b2international/snowowl/snomed/datastore/request/SnomedRefSetSearchRequestBuilder.java\n+++ b/snomed/com.b2international.snowowl.snomed.datastore/src/com/b2international/snowowl/snomed/datastore/request/SnomedRefSetSearchRequestBuilder.java\n", "chunk": "@@ -84,11 +68,7 @@ public final class SnomedRefSetSearchRequestBuilder extends SnomedSearchRequestB\n \t}\n \t\n \tpublic SnomedRefSetSearchRequestBuilder filterByMapTargetComponentType(String mapTargetComponentType) {\n-\t\tif (Strings.isNullOrEmpty(mapTargetComponentType)) {\n-\t\t\treturn getSelf();\n-\t\t}\n-\t\tfinal int referencedComponentTypeAsInt = TerminologyRegistry.INSTANCE.getTerminologyComponentById(mapTargetComponentType).shortId();\n-\t\treturn filterByMapTargetComponentType(referencedComponentTypeAsInt);\n+\t\treturn filterByMapTargetComponentType(mapTargetComponentType);\n \t}\n \n \t/**\n", "next_change": {"commit": "39b37b53940a24ac72b710bf7c3c93e8d86eefbd", "changed_code": [{"header": "diff --git a/snomed/com.b2international.snowowl.snomed.datastore/src/com/b2international/snowowl/snomed/datastore/request/SnomedRefSetSearchRequestBuilder.java b/snomed/com.b2international.snowowl.snomed.datastore/src/com/b2international/snowowl/snomed/datastore/request/SnomedRefSetSearchRequestBuilder.java\nindex aa0a5a25c0..fec1911a7f 100644\n--- a/snomed/com.b2international.snowowl.snomed.datastore/src/com/b2international/snowowl/snomed/datastore/request/SnomedRefSetSearchRequestBuilder.java\n+++ b/snomed/com.b2international.snowowl.snomed.datastore/src/com/b2international/snowowl/snomed/datastore/request/SnomedRefSetSearchRequestBuilder.java\n", "chunk": "@@ -60,13 +60,6 @@ public final class SnomedRefSetSearchRequestBuilder extends SnomedSearchRequestB\n \t * @param mapTargetComponentType\n \t *            - map target component type integer\n \t */\n-\tpublic SnomedRefSetSearchRequestBuilder filterByMapTargetComponentType(Integer mapTargetComponentType) {\n-\t\tif (mapTargetComponentType == null) {\n-\t\t\treturn getSelf();\n-\t\t}\n-\t\treturn addOption(SnomedRefSetSearchRequest.OptionKey.MAP_TARGET_COMPONENT_TYPE, mapTargetComponentType);\n-\t}\n-\t\n \tpublic SnomedRefSetSearchRequestBuilder filterByMapTargetComponentType(String mapTargetComponentType) {\n \t\treturn filterByMapTargetComponentType(mapTargetComponentType);\n \t}\n", "next_change": {"commit": "60596db1c1945b971a94ad3db25350352df0bdd5", "changed_code": [{"header": "diff --git a/snomed/com.b2international.snowowl.snomed.datastore/src/com/b2international/snowowl/snomed/datastore/request/SnomedRefSetSearchRequestBuilder.java b/snomed/com.b2international.snowowl.snomed.datastore/src/com/b2international/snowowl/snomed/datastore/request/SnomedRefSetSearchRequestBuilder.java\nindex fec1911a7f..f7cd6b040c 100644\n--- a/snomed/com.b2international.snowowl.snomed.datastore/src/com/b2international/snowowl/snomed/datastore/request/SnomedRefSetSearchRequestBuilder.java\n+++ b/snomed/com.b2international.snowowl.snomed.datastore/src/com/b2international/snowowl/snomed/datastore/request/SnomedRefSetSearchRequestBuilder.java\n", "chunk": "@@ -61,7 +61,7 @@ public final class SnomedRefSetSearchRequestBuilder extends SnomedSearchRequestB\n \t *            - map target component type integer\n \t */\n \tpublic SnomedRefSetSearchRequestBuilder filterByMapTargetComponentType(String mapTargetComponentType) {\n-\t\treturn filterByMapTargetComponentType(mapTargetComponentType);\n+\t\treturn addOption(SnomedRefSetSearchRequest.OptionKey.MAP_TARGET_COMPONENT_TYPE, mapTargetComponentType);\n \t}\n \n \t/**\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzEzOTk0Mg==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/610#discussion_r457139942", "body": "Too complex boolean expression, invert it to make it more readable.", "bodyText": "Too complex boolean expression, invert it to make it more readable.", "bodyHTML": "<p dir=\"auto\">Too complex boolean expression, invert it to make it more readable.</p>", "author": "cmark", "createdAt": "2020-07-20T07:43:49Z", "path": "snomed/com.b2international.snowowl.snomed.datastore/src/com/b2international/snowowl/snomed/datastore/compare/ReferenceSetCompare.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 B2i Healthcare. All rights reserved.\n+ *******************************************************************************/\n+package com.b2international.snowowl.snomed.datastore.compare;\n+\n+import com.b2international.commons.exceptions.BadRequestException;\n+import com.b2international.snowowl.core.compare.CompareSetResult;\n+import com.b2international.snowowl.core.compare.CompareSets;\n+import com.b2international.snowowl.snomed.common.SnomedRf2Headers;\n+import com.b2international.snowowl.snomed.core.domain.refset.SnomedRefSetType;\n+import com.b2international.snowowl.snomed.core.domain.refset.SnomedReferenceSet;\n+import com.b2international.snowowl.snomed.core.domain.refset.SnomedReferenceSetMember;\n+\n+/**\n+ * @since 7.8\n+ */\n+public final class ReferenceSetCompare implements CompareSets<SnomedReferenceSetMember, SnomedReferenceSet> {\n+\n+\t@Override\n+\tpublic CompareSetResult<SnomedReferenceSetMember> doCompare(SnomedReferenceSet baseRf, SnomedReferenceSet compareRf) {\n+\t\tif (!SnomedRefSetType.SIMPLE_MAP.equals(baseRf.getType()) || !SnomedRefSetType.SIMPLE_MAP.equals(compareRf.getType())) {", "originalCommit": "9fc87b2bd05dca4360e7c2843e1eb2109de06c59", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODA0MzU2Mg==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/610#discussion_r458043562", "bodyText": "Done", "author": "molnarlaura", "createdAt": "2020-07-21T12:02:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzEzOTk0Mg=="}], "type": "inlineReview", "revised_code": null}, {"oid": "a5707b6ec39c9785a9fd19ef99ea63c806d1e753", "url": "https://github.com/b2ihealthcare/snow-owl/commit/a5707b6ec39c9785a9fd19ef99ea63c806d1e753", "message": "Merge remote-tracking branch 'origin/7.x' into feature/SO-4025-map-compare", "committedDate": "2020-07-20T07:46:21Z", "type": "commit"}, {"oid": "afaeed1011e30d8de0a9c30afd6eda8f6c2b292d", "url": "https://github.com/b2ihealthcare/snow-owl/commit/afaeed1011e30d8de0a9c30afd6eda8f6c2b292d", "message": "SO-4025: correct license", "committedDate": "2020-07-20T07:59:02Z", "type": "commit"}, {"oid": "2c0a3452de9c9c8ff8f18564b98973e32073389f", "url": "https://github.com/b2ihealthcare/snow-owl/commit/2c0a3452de9c9c8ff8f18564b98973e32073389f", "message": "SO-4025: rename class", "committedDate": "2020-07-20T08:52:48Z", "type": "commit"}, {"oid": "de7d789e78c8beeb29347f47271c52c33349cd0d", "url": "https://github.com/b2ihealthcare/snow-owl/commit/de7d789e78c8beeb29347f47271c52c33349cd0d", "message": "Merge remote-tracking branch 'origin/feature/SO-4131_AHS_automapping_features' into feature/SO-4025-map-compare", "committedDate": "2020-07-20T08:54:03Z", "type": "commit"}, {"oid": "9b76101080a86b42770bc12d48c63db0b45064d9", "url": "https://github.com/b2ihealthcare/snow-owl/commit/9b76101080a86b42770bc12d48c63db0b45064d9", "message": "SO-4142 Added missing properties.", "committedDate": "2020-07-21T11:13:30Z", "type": "commit"}, {"oid": "5ea122c9f56804939cde95ac453d825b3aecf7d9", "url": "https://github.com/b2ihealthcare/snow-owl/commit/5ea122c9f56804939cde95ac453d825b3aecf7d9", "message": "SO-4025: move concept map compare tests to core", "committedDate": "2020-07-21T11:59:30Z", "type": "commit"}, {"oid": "cb33956edb90ce014fc45d6b1a8035e9a040084f", "url": "https://github.com/b2ihealthcare/snow-owl/commit/cb33956edb90ce014fc45d6b1a8035e9a040084f", "message": "SO-4025: add request for concept map compare", "committedDate": "2020-07-21T12:00:42Z", "type": "commit"}, {"oid": "8d4c917faed15408a236e917782b0497139954a3", "url": "https://github.com/b2ihealthcare/snow-owl/commit/8d4c917faed15408a236e917782b0497139954a3", "message": "SO-4025: fix filter by map target component type request", "committedDate": "2020-07-21T12:22:45Z", "type": "commit"}, {"oid": "35fbb5c919a7c4eef08b9bd90835c7c04968fccd", "url": "https://github.com/b2ihealthcare/snow-owl/commit/35fbb5c919a7c4eef08b9bd90835c7c04968fccd", "message": "SO-4131: remove unnecessary print lines", "committedDate": "2020-07-21T13:02:42Z", "type": "commit"}, {"oid": "886aea728d6f4950f1ef63283f19749ee13116e9", "url": "https://github.com/b2ihealthcare/snow-owl/commit/886aea728d6f4950f1ef63283f19749ee13116e9", "message": "Merge remote-tracking branch 'origin/7.x' into feature/SO-4131_AHS_automapping_features", "committedDate": "2020-07-21T15:47:38Z", "type": "commit"}, {"oid": "f399e65b7267f009903753a0aa5c733d03af6d8a", "url": "https://github.com/b2ihealthcare/snow-owl/commit/f399e65b7267f009903753a0aa5c733d03af6d8a", "message": "SO-4025: use unspecified number for component URI", "committedDate": "2020-07-22T12:40:58Z", "type": "commit"}, {"oid": "49e37a8cb6c452dc85f1b3db9096b000f21b2dac", "url": "https://github.com/b2ihealthcare/snow-owl/commit/49e37a8cb6c452dc85f1b3db9096b000f21b2dac", "message": "SO-4025: fix generic compare request", "committedDate": "2020-07-22T12:42:25Z", "type": "commit"}, {"oid": "9246b5d330e6ff936e39254c4125c6bdd4231e17", "url": "https://github.com/b2ihealthcare/snow-owl/commit/9246b5d330e6ff936e39254c4125c6bdd4231e17", "message": "SO-4025: add simple type reference set compare request tests", "committedDate": "2020-07-22T14:22:35Z", "type": "commit"}, {"oid": "1acf36b88acbc572c4c1507c79c6cf44a98c50de", "url": "https://github.com/b2ihealthcare/snow-owl/commit/1acf36b88acbc572c4c1507c79c6cf44a98c50de", "message": "Merge remote-tracking branch 'origin/feature/SO-4131_AHS_automapping_features' into feature/SO-4025-map-compare", "committedDate": "2020-07-27T08:15:33Z", "type": "commit"}, {"oid": "6f4f25cbdd86353464d4aa04e37f55a637e750d9", "url": "https://github.com/b2ihealthcare/snow-owl/commit/6f4f25cbdd86353464d4aa04e37f55a637e750d9", "message": "Merge remote-tracking branch 'origin/7.x' into feature/SO-4025-map-compare", "committedDate": "2020-07-27T08:16:33Z", "type": "commit"}, {"oid": "2e4c32c6e8053ecbafe4552a6a8d1e36ef1b0d64", "url": "https://github.com/b2ihealthcare/snow-owl/commit/2e4c32c6e8053ecbafe4552a6a8d1e36ef1b0d64", "message": "SO-4025: remove deleted package from MANIFEST", "committedDate": "2020-07-27T08:23:13Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDczMTcxMQ==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/610#discussion_r460731711", "body": "Rename `prepareSearchCodeSystemsInAllRepositories()` method to `prepareSearchAllCodeSystems()`.", "bodyText": "Rename prepareSearchCodeSystemsInAllRepositories() method to prepareSearchAllCodeSystems().", "bodyHTML": "<p dir=\"auto\">Rename <code>prepareSearchCodeSystemsInAllRepositories()</code> method to <code>prepareSearchAllCodeSystems()</code>.</p>", "author": "cmark", "createdAt": "2020-07-27T08:35:01Z", "path": "core/com.b2international.snowowl.core.rest.tests/src/com/b2international/snowowl/core/codesystem/CodeSystemRequestTest.java", "diffHunk": "@@ -43,6 +43,38 @@ public void setup() {\n \t\tthis.bus = Services.bus();\n \t}\n \t\n+\t@Test\n+\tpublic void getAllCodeSystems() {\n+\t\tfinal String shortName = \"newCodeSystemShortName\";\n+\t\tfinal String oid = \"newCodeSystemOid\";\n+\t\t\n+\t\tassertCodeSystemCreated(shortName, oid);\n+\t\t\n+\t\tfinal CodeSystems codeSystems = CodeSystemRequests.prepareSearchCodeSystemsInAllRepositories()", "originalCommit": "2e4c32c6e8053ecbafe4552a6a8d1e36ef1b0d64", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc3MTY0Ng==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/610#discussion_r460771646", "bodyText": "Done", "author": "molnarlaura", "createdAt": "2020-07-27T09:43:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDczMTcxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "f1589ded589b03f8264d014dcc03ceeba22e200a", "changed_code": [{"header": "diff --git a/core/com.b2international.snowowl.core.rest.tests/src/com/b2international/snowowl/core/codesystem/CodeSystemRequestTest.java b/core/com.b2international.snowowl.core.rest.tests/src/com/b2international/snowowl/core/codesystem/CodeSystemRequestTest.java\nindex f5341cdbfc..ecd52eed17 100644\n--- a/core/com.b2international.snowowl.core.rest.tests/src/com/b2international/snowowl/core/codesystem/CodeSystemRequestTest.java\n+++ b/core/com.b2international.snowowl.core.rest.tests/src/com/b2international/snowowl/core/codesystem/CodeSystemRequestTest.java\n", "chunk": "@@ -50,7 +50,7 @@ public class CodeSystemRequestTest {\n \t\t\n \t\tassertCodeSystemCreated(shortName, oid);\n \t\t\n-\t\tfinal CodeSystems codeSystems = CodeSystemRequests.prepareSearchCodeSystemsInAllRepositories()\n+\t\tfinal CodeSystems codeSystems = CodeSystemRequests.prepareSearchAllCodeSystems()\n \t\t\t\t.build()\n \t\t\t\t.execute(Services.context());\n \n", "next_change": {"commit": "4018e9e14a79ac5b551db80e197beffd893dcf37", "changed_code": [{"header": "diff --git a/core/com.b2international.snowowl.core.rest.tests/src/com/b2international/snowowl/core/codesystem/CodeSystemRequestTest.java b/core/com.b2international.snowowl.core.rest.tests/src/com/b2international/snowowl/core/codesystem/CodeSystemRequestTest.java\nindex ecd52eed17..4a1faab3a2 100644\n--- a/core/com.b2international.snowowl.core.rest.tests/src/com/b2international/snowowl/core/codesystem/CodeSystemRequestTest.java\n+++ b/core/com.b2international.snowowl.core.rest.tests/src/com/b2international/snowowl/core/codesystem/CodeSystemRequestTest.java\n", "chunk": "@@ -53,26 +52,34 @@ public class CodeSystemRequestTest {\n \t\tfinal CodeSystems codeSystems = CodeSystemRequests.prepareSearchAllCodeSystems()\n \t\t\t\t.build()\n \t\t\t\t.execute(Services.context());\n-\n-\t\tassertEquals(codeSystems.getTotal(), 2);\n+\t\t\n+\t\tassertThat(codeSystems.getItems()).hasSizeGreaterThanOrEqualTo(2);\n \t}\n \t\n \t@Test\n \tpublic void getCodeSystemByShortNameFromAllRepositoreis() {\n+\t\tfinal String shortName = \"ShortName\";\n+\t\tfinal String oid = \"Oid\";\n+\t\t\n+\t\tassertCodeSystemCreated(shortName, oid);\n+\t\t\n \t\tfinal CodeSystems existingCodeSystem = CodeSystemRequests.prepareSearchAllCodeSystems()\n-\t\t\t\t.filterById(SNOMEDCT)\n+\t\t\t\t.filterById(shortName)\n \t\t\t\t.build()\n \t\t\t\t.execute(Services.context());\n \n-\t\tassertEquals(existingCodeSystem.getTotal(), 1);\n-\t\tassertEquals(SNOMEDCT, Iterables.getOnlyElement(existingCodeSystem.getItems()).getShortName());\n-\n+\t\tassertThat(existingCodeSystem.getItems()).hasSize(1);\n+\t\tassertThat(existingCodeSystem.getItems().get(0).getShortName()).isEqualTo(shortName);\n+\t}\n+\t\n+\t@Test\n+\tpublic void getNonExistentCodeSystemByShortNameFromAllRepositoreis() {\n+\t\t\n \t\tfinal CodeSystems nonExistentCodeSystem = CodeSystemRequests.prepareSearchAllCodeSystems()\n \t\t\t\t.filterById(\"not a valid code system short name\")\n \t\t\t\t.build()\n \t\t\t\t.execute(Services.context());\n-\t\n-\t\tassertEquals(nonExistentCodeSystem.getTotal(), 0);\n+\t\tassertThat(nonExistentCodeSystem.getItems()).hasSize(0);\n \t}\n \t\n \t@Test\n", "next_change": {"commit": "a0d119667dff083f4fb45487a14fa89bc18fc76c", "changed_code": [{"header": "diff --git a/core/com.b2international.snowowl.core.rest.tests/src/com/b2international/snowowl/core/codesystem/CodeSystemRequestTest.java b/core/com.b2international.snowowl.core.rest.tests/src/com/b2international/snowowl/core/codesystem/CodeSystemRequestTest.java\nindex 4a1faab3a2..929db349de 100644\n--- a/core/com.b2international.snowowl.core.rest.tests/src/com/b2international/snowowl/core/codesystem/CodeSystemRequestTest.java\n+++ b/core/com.b2international.snowowl.core.rest.tests/src/com/b2international/snowowl/core/codesystem/CodeSystemRequestTest.java\n", "chunk": "@@ -58,24 +58,24 @@ public class CodeSystemRequestTest {\n \t\n \t@Test\n \tpublic void getCodeSystemByShortNameFromAllRepositoreis() {\n-\t\tfinal String shortName = \"ShortName\";\n+\t\tfinal String id = \"ShortName\";\n \t\tfinal String oid = \"Oid\";\n \t\t\n-\t\tassertCodeSystemCreated(shortName, oid);\n+\t\tassertCodeSystemCreated(id, oid);\n \t\t\n-\t\tfinal CodeSystems existingCodeSystem = CodeSystemRequests.prepareSearchAllCodeSystems()\n-\t\t\t\t.filterById(shortName)\n+\t\tfinal CodeSystems existingCodeSystem = CodeSystemRequests.prepareSearchCodeSystem()\n+\t\t\t\t.filterById(id)\n \t\t\t\t.build()\n \t\t\t\t.execute(Services.context());\n \n \t\tassertThat(existingCodeSystem.getItems()).hasSize(1);\n-\t\tassertThat(existingCodeSystem.getItems().get(0).getShortName()).isEqualTo(shortName);\n+\t\tassertThat(existingCodeSystem.getItems().get(0).getId()).isEqualTo(id);\n \t}\n \t\n \t@Test\n \tpublic void getNonExistentCodeSystemByShortNameFromAllRepositoreis() {\n \t\t\n-\t\tfinal CodeSystems nonExistentCodeSystem = CodeSystemRequests.prepareSearchAllCodeSystems()\n+\t\tfinal CodeSystems nonExistentCodeSystem = CodeSystemRequests.prepareSearchCodeSystem()\n \t\t\t\t.filterById(\"not a valid code system short name\")\n \t\t\t\t.build()\n \t\t\t\t.execute(Services.context());\n", "next_change": {"commit": "f5f3e25479ae3f577407875413c48ebc3f45b116", "changed_code": [{"header": "diff --git a/core/com.b2international.snowowl.core.rest.tests/src/com/b2international/snowowl/core/codesystem/CodeSystemRequestTest.java b/core/com.b2international.snowowl.core.rest.tests/src/com/b2international/snowowl/core/codesystem/CodeSystemRequestTest.java\nindex 929db349de..b77c852240 100644\n--- a/core/com.b2international.snowowl.core.rest.tests/src/com/b2international/snowowl/core/codesystem/CodeSystemRequestTest.java\n+++ b/core/com.b2international.snowowl.core.rest.tests/src/com/b2international/snowowl/core/codesystem/CodeSystemRequestTest.java\n", "chunk": "@@ -77,7 +79,8 @@ public class CodeSystemRequestTest {\n \t\t\n \t\tfinal CodeSystems nonExistentCodeSystem = CodeSystemRequests.prepareSearchCodeSystem()\n \t\t\t\t.filterById(\"not a valid code system short name\")\n-\t\t\t\t.build()\n+\t\t\t\t.buildAsync()\n+\t\t\t\t.getRequest()\n \t\t\t\t.execute(Services.context());\n \t\tassertThat(nonExistentCodeSystem.getItems()).hasSize(0);\n \t}\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDczMjY2MA==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/610#discussion_r460732660", "body": "Change this to `assertThat(codeSystems).hasSize(2)` or swap arguments to match expected and actual values.", "bodyText": "Change this to assertThat(codeSystems).hasSize(2) or swap arguments to match expected and actual values.", "bodyHTML": "<p dir=\"auto\">Change this to <code>assertThat(codeSystems).hasSize(2)</code> or swap arguments to match expected and actual values.</p>", "author": "cmark", "createdAt": "2020-07-27T08:36:38Z", "path": "core/com.b2international.snowowl.core.rest.tests/src/com/b2international/snowowl/core/codesystem/CodeSystemRequestTest.java", "diffHunk": "@@ -43,6 +43,38 @@ public void setup() {\n \t\tthis.bus = Services.bus();\n \t}\n \t\n+\t@Test\n+\tpublic void getAllCodeSystems() {\n+\t\tfinal String shortName = \"newCodeSystemShortName\";\n+\t\tfinal String oid = \"newCodeSystemOid\";\n+\t\t\n+\t\tassertCodeSystemCreated(shortName, oid);\n+\t\t\n+\t\tfinal CodeSystems codeSystems = CodeSystemRequests.prepareSearchCodeSystemsInAllRepositories()\n+\t\t\t\t.build()\n+\t\t\t\t.execute(Services.context());\n+\n+\t\tassertEquals(codeSystems.getTotal(), 2);", "originalCommit": "2e4c32c6e8053ecbafe4552a6a8d1e36ef1b0d64", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc3NzAzNg==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/610#discussion_r460777036", "bodyText": "Evaluated all core-e2e-tests on this branch and got java.lang.AssertionError: expected:<15> but was:<2>", "author": "nagyo", "createdAt": "2020-07-27T09:52:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDczMjY2MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDkwNDg1Mw==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/610#discussion_r460904853", "bodyText": "Done", "author": "molnarlaura", "createdAt": "2020-07-27T13:51:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDczMjY2MA=="}], "type": "inlineReview", "revised_code": {"commit": "f1589ded589b03f8264d014dcc03ceeba22e200a", "changed_code": [{"header": "diff --git a/core/com.b2international.snowowl.core.rest.tests/src/com/b2international/snowowl/core/codesystem/CodeSystemRequestTest.java b/core/com.b2international.snowowl.core.rest.tests/src/com/b2international/snowowl/core/codesystem/CodeSystemRequestTest.java\nindex f5341cdbfc..ecd52eed17 100644\n--- a/core/com.b2international.snowowl.core.rest.tests/src/com/b2international/snowowl/core/codesystem/CodeSystemRequestTest.java\n+++ b/core/com.b2international.snowowl.core.rest.tests/src/com/b2international/snowowl/core/codesystem/CodeSystemRequestTest.java\n", "chunk": "@@ -50,7 +50,7 @@ public class CodeSystemRequestTest {\n \t\t\n \t\tassertCodeSystemCreated(shortName, oid);\n \t\t\n-\t\tfinal CodeSystems codeSystems = CodeSystemRequests.prepareSearchCodeSystemsInAllRepositories()\n+\t\tfinal CodeSystems codeSystems = CodeSystemRequests.prepareSearchAllCodeSystems()\n \t\t\t\t.build()\n \t\t\t\t.execute(Services.context());\n \n", "next_change": {"commit": "4018e9e14a79ac5b551db80e197beffd893dcf37", "changed_code": [{"header": "diff --git a/core/com.b2international.snowowl.core.rest.tests/src/com/b2international/snowowl/core/codesystem/CodeSystemRequestTest.java b/core/com.b2international.snowowl.core.rest.tests/src/com/b2international/snowowl/core/codesystem/CodeSystemRequestTest.java\nindex ecd52eed17..4a1faab3a2 100644\n--- a/core/com.b2international.snowowl.core.rest.tests/src/com/b2international/snowowl/core/codesystem/CodeSystemRequestTest.java\n+++ b/core/com.b2international.snowowl.core.rest.tests/src/com/b2international/snowowl/core/codesystem/CodeSystemRequestTest.java\n", "chunk": "@@ -53,26 +52,34 @@ public class CodeSystemRequestTest {\n \t\tfinal CodeSystems codeSystems = CodeSystemRequests.prepareSearchAllCodeSystems()\n \t\t\t\t.build()\n \t\t\t\t.execute(Services.context());\n-\n-\t\tassertEquals(codeSystems.getTotal(), 2);\n+\t\t\n+\t\tassertThat(codeSystems.getItems()).hasSizeGreaterThanOrEqualTo(2);\n \t}\n \t\n \t@Test\n \tpublic void getCodeSystemByShortNameFromAllRepositoreis() {\n+\t\tfinal String shortName = \"ShortName\";\n+\t\tfinal String oid = \"Oid\";\n+\t\t\n+\t\tassertCodeSystemCreated(shortName, oid);\n+\t\t\n \t\tfinal CodeSystems existingCodeSystem = CodeSystemRequests.prepareSearchAllCodeSystems()\n-\t\t\t\t.filterById(SNOMEDCT)\n+\t\t\t\t.filterById(shortName)\n \t\t\t\t.build()\n \t\t\t\t.execute(Services.context());\n \n-\t\tassertEquals(existingCodeSystem.getTotal(), 1);\n-\t\tassertEquals(SNOMEDCT, Iterables.getOnlyElement(existingCodeSystem.getItems()).getShortName());\n-\n+\t\tassertThat(existingCodeSystem.getItems()).hasSize(1);\n+\t\tassertThat(existingCodeSystem.getItems().get(0).getShortName()).isEqualTo(shortName);\n+\t}\n+\t\n+\t@Test\n+\tpublic void getNonExistentCodeSystemByShortNameFromAllRepositoreis() {\n+\t\t\n \t\tfinal CodeSystems nonExistentCodeSystem = CodeSystemRequests.prepareSearchAllCodeSystems()\n \t\t\t\t.filterById(\"not a valid code system short name\")\n \t\t\t\t.build()\n \t\t\t\t.execute(Services.context());\n-\t\n-\t\tassertEquals(nonExistentCodeSystem.getTotal(), 0);\n+\t\tassertThat(nonExistentCodeSystem.getItems()).hasSize(0);\n \t}\n \t\n \t@Test\n", "next_change": {"commit": "a0d119667dff083f4fb45487a14fa89bc18fc76c", "changed_code": [{"header": "diff --git a/core/com.b2international.snowowl.core.rest.tests/src/com/b2international/snowowl/core/codesystem/CodeSystemRequestTest.java b/core/com.b2international.snowowl.core.rest.tests/src/com/b2international/snowowl/core/codesystem/CodeSystemRequestTest.java\nindex 4a1faab3a2..929db349de 100644\n--- a/core/com.b2international.snowowl.core.rest.tests/src/com/b2international/snowowl/core/codesystem/CodeSystemRequestTest.java\n+++ b/core/com.b2international.snowowl.core.rest.tests/src/com/b2international/snowowl/core/codesystem/CodeSystemRequestTest.java\n", "chunk": "@@ -58,24 +58,24 @@ public class CodeSystemRequestTest {\n \t\n \t@Test\n \tpublic void getCodeSystemByShortNameFromAllRepositoreis() {\n-\t\tfinal String shortName = \"ShortName\";\n+\t\tfinal String id = \"ShortName\";\n \t\tfinal String oid = \"Oid\";\n \t\t\n-\t\tassertCodeSystemCreated(shortName, oid);\n+\t\tassertCodeSystemCreated(id, oid);\n \t\t\n-\t\tfinal CodeSystems existingCodeSystem = CodeSystemRequests.prepareSearchAllCodeSystems()\n-\t\t\t\t.filterById(shortName)\n+\t\tfinal CodeSystems existingCodeSystem = CodeSystemRequests.prepareSearchCodeSystem()\n+\t\t\t\t.filterById(id)\n \t\t\t\t.build()\n \t\t\t\t.execute(Services.context());\n \n \t\tassertThat(existingCodeSystem.getItems()).hasSize(1);\n-\t\tassertThat(existingCodeSystem.getItems().get(0).getShortName()).isEqualTo(shortName);\n+\t\tassertThat(existingCodeSystem.getItems().get(0).getId()).isEqualTo(id);\n \t}\n \t\n \t@Test\n \tpublic void getNonExistentCodeSystemByShortNameFromAllRepositoreis() {\n \t\t\n-\t\tfinal CodeSystems nonExistentCodeSystem = CodeSystemRequests.prepareSearchAllCodeSystems()\n+\t\tfinal CodeSystems nonExistentCodeSystem = CodeSystemRequests.prepareSearchCodeSystem()\n \t\t\t\t.filterById(\"not a valid code system short name\")\n \t\t\t\t.build()\n \t\t\t\t.execute(Services.context());\n", "next_change": {"commit": "f5f3e25479ae3f577407875413c48ebc3f45b116", "changed_code": [{"header": "diff --git a/core/com.b2international.snowowl.core.rest.tests/src/com/b2international/snowowl/core/codesystem/CodeSystemRequestTest.java b/core/com.b2international.snowowl.core.rest.tests/src/com/b2international/snowowl/core/codesystem/CodeSystemRequestTest.java\nindex 929db349de..b77c852240 100644\n--- a/core/com.b2international.snowowl.core.rest.tests/src/com/b2international/snowowl/core/codesystem/CodeSystemRequestTest.java\n+++ b/core/com.b2international.snowowl.core.rest.tests/src/com/b2international/snowowl/core/codesystem/CodeSystemRequestTest.java\n", "chunk": "@@ -77,7 +79,8 @@ public class CodeSystemRequestTest {\n \t\t\n \t\tfinal CodeSystems nonExistentCodeSystem = CodeSystemRequests.prepareSearchCodeSystem()\n \t\t\t\t.filterById(\"not a valid code system short name\")\n-\t\t\t\t.build()\n+\t\t\t\t.buildAsync()\n+\t\t\t\t.getRequest()\n \t\t\t\t.execute(Services.context());\n \t\tassertThat(nonExistentCodeSystem.getItems()).hasSize(0);\n \t}\n", "next_change": null}]}}]}}]}}, {"header": "diff --git a/core/com.b2international.snowowl.core.rest.tests/src/com/b2international/snowowl/core/codesystem/CodeSystemRequestTest.java b/core/com.b2international.snowowl.core.rest.tests/src/com/b2international/snowowl/core/codesystem/CodeSystemRequestTest.java\nindex f5341cdbfc..ecd52eed17 100644\n--- a/core/com.b2international.snowowl.core.rest.tests/src/com/b2international/snowowl/core/codesystem/CodeSystemRequestTest.java\n+++ b/core/com.b2international.snowowl.core.rest.tests/src/com/b2international/snowowl/core/codesystem/CodeSystemRequestTest.java\n", "chunk": "@@ -59,7 +59,7 @@ public class CodeSystemRequestTest {\n \t\n \t@Test\n \tpublic void getCodeSystemByShortNameFromAllRepositoreis() {\n-\t\tfinal CodeSystems existingCodeSystem = CodeSystemRequests.prepareSearchCodeSystemsInAllRepositories()\n+\t\tfinal CodeSystems existingCodeSystem = CodeSystemRequests.prepareSearchAllCodeSystems()\n \t\t\t\t.filterById(SNOMEDCT)\n \t\t\t\t.build()\n \t\t\t\t.execute(Services.context());\n", "next_change": {"commit": "4018e9e14a79ac5b551db80e197beffd893dcf37", "changed_code": [{"header": "diff --git a/core/com.b2international.snowowl.core.rest.tests/src/com/b2international/snowowl/core/codesystem/CodeSystemRequestTest.java b/core/com.b2international.snowowl.core.rest.tests/src/com/b2international/snowowl/core/codesystem/CodeSystemRequestTest.java\nindex ecd52eed17..4a1faab3a2 100644\n--- a/core/com.b2international.snowowl.core.rest.tests/src/com/b2international/snowowl/core/codesystem/CodeSystemRequestTest.java\n+++ b/core/com.b2international.snowowl.core.rest.tests/src/com/b2international/snowowl/core/codesystem/CodeSystemRequestTest.java\n", "chunk": "@@ -53,26 +52,34 @@ public class CodeSystemRequestTest {\n \t\tfinal CodeSystems codeSystems = CodeSystemRequests.prepareSearchAllCodeSystems()\n \t\t\t\t.build()\n \t\t\t\t.execute(Services.context());\n-\n-\t\tassertEquals(codeSystems.getTotal(), 2);\n+\t\t\n+\t\tassertThat(codeSystems.getItems()).hasSizeGreaterThanOrEqualTo(2);\n \t}\n \t\n \t@Test\n \tpublic void getCodeSystemByShortNameFromAllRepositoreis() {\n+\t\tfinal String shortName = \"ShortName\";\n+\t\tfinal String oid = \"Oid\";\n+\t\t\n+\t\tassertCodeSystemCreated(shortName, oid);\n+\t\t\n \t\tfinal CodeSystems existingCodeSystem = CodeSystemRequests.prepareSearchAllCodeSystems()\n-\t\t\t\t.filterById(SNOMEDCT)\n+\t\t\t\t.filterById(shortName)\n \t\t\t\t.build()\n \t\t\t\t.execute(Services.context());\n \n-\t\tassertEquals(existingCodeSystem.getTotal(), 1);\n-\t\tassertEquals(SNOMEDCT, Iterables.getOnlyElement(existingCodeSystem.getItems()).getShortName());\n-\n+\t\tassertThat(existingCodeSystem.getItems()).hasSize(1);\n+\t\tassertThat(existingCodeSystem.getItems().get(0).getShortName()).isEqualTo(shortName);\n+\t}\n+\t\n+\t@Test\n+\tpublic void getNonExistentCodeSystemByShortNameFromAllRepositoreis() {\n+\t\t\n \t\tfinal CodeSystems nonExistentCodeSystem = CodeSystemRequests.prepareSearchAllCodeSystems()\n \t\t\t\t.filterById(\"not a valid code system short name\")\n \t\t\t\t.build()\n \t\t\t\t.execute(Services.context());\n-\t\n-\t\tassertEquals(nonExistentCodeSystem.getTotal(), 0);\n+\t\tassertThat(nonExistentCodeSystem.getItems()).hasSize(0);\n \t}\n \t\n \t@Test\n", "next_change": {"commit": "a0d119667dff083f4fb45487a14fa89bc18fc76c", "changed_code": [{"header": "diff --git a/core/com.b2international.snowowl.core.rest.tests/src/com/b2international/snowowl/core/codesystem/CodeSystemRequestTest.java b/core/com.b2international.snowowl.core.rest.tests/src/com/b2international/snowowl/core/codesystem/CodeSystemRequestTest.java\nindex 4a1faab3a2..929db349de 100644\n--- a/core/com.b2international.snowowl.core.rest.tests/src/com/b2international/snowowl/core/codesystem/CodeSystemRequestTest.java\n+++ b/core/com.b2international.snowowl.core.rest.tests/src/com/b2international/snowowl/core/codesystem/CodeSystemRequestTest.java\n", "chunk": "@@ -58,24 +58,24 @@ public class CodeSystemRequestTest {\n \t\n \t@Test\n \tpublic void getCodeSystemByShortNameFromAllRepositoreis() {\n-\t\tfinal String shortName = \"ShortName\";\n+\t\tfinal String id = \"ShortName\";\n \t\tfinal String oid = \"Oid\";\n \t\t\n-\t\tassertCodeSystemCreated(shortName, oid);\n+\t\tassertCodeSystemCreated(id, oid);\n \t\t\n-\t\tfinal CodeSystems existingCodeSystem = CodeSystemRequests.prepareSearchAllCodeSystems()\n-\t\t\t\t.filterById(shortName)\n+\t\tfinal CodeSystems existingCodeSystem = CodeSystemRequests.prepareSearchCodeSystem()\n+\t\t\t\t.filterById(id)\n \t\t\t\t.build()\n \t\t\t\t.execute(Services.context());\n \n \t\tassertThat(existingCodeSystem.getItems()).hasSize(1);\n-\t\tassertThat(existingCodeSystem.getItems().get(0).getShortName()).isEqualTo(shortName);\n+\t\tassertThat(existingCodeSystem.getItems().get(0).getId()).isEqualTo(id);\n \t}\n \t\n \t@Test\n \tpublic void getNonExistentCodeSystemByShortNameFromAllRepositoreis() {\n \t\t\n-\t\tfinal CodeSystems nonExistentCodeSystem = CodeSystemRequests.prepareSearchAllCodeSystems()\n+\t\tfinal CodeSystems nonExistentCodeSystem = CodeSystemRequests.prepareSearchCodeSystem()\n \t\t\t\t.filterById(\"not a valid code system short name\")\n \t\t\t\t.build()\n \t\t\t\t.execute(Services.context());\n", "next_change": {"commit": "f5f3e25479ae3f577407875413c48ebc3f45b116", "changed_code": [{"header": "diff --git a/core/com.b2international.snowowl.core.rest.tests/src/com/b2international/snowowl/core/codesystem/CodeSystemRequestTest.java b/core/com.b2international.snowowl.core.rest.tests/src/com/b2international/snowowl/core/codesystem/CodeSystemRequestTest.java\nindex 929db349de..b77c852240 100644\n--- a/core/com.b2international.snowowl.core.rest.tests/src/com/b2international/snowowl/core/codesystem/CodeSystemRequestTest.java\n+++ b/core/com.b2international.snowowl.core.rest.tests/src/com/b2international/snowowl/core/codesystem/CodeSystemRequestTest.java\n", "chunk": "@@ -77,7 +79,8 @@ public class CodeSystemRequestTest {\n \t\t\n \t\tfinal CodeSystems nonExistentCodeSystem = CodeSystemRequests.prepareSearchCodeSystem()\n \t\t\t\t.filterById(\"not a valid code system short name\")\n-\t\t\t\t.build()\n+\t\t\t\t.buildAsync()\n+\t\t\t\t.getRequest()\n \t\t\t\t.execute(Services.context());\n \t\tassertThat(nonExistentCodeSystem.getItems()).hasSize(0);\n \t}\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDczNDE4Mw==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/610#discussion_r460734183", "body": "This is a separate test case, please move it to its own test method.", "bodyText": "This is a separate test case, please move it to its own test method.", "bodyHTML": "<p dir=\"auto\">This is a separate test case, please move it to its own test method.</p>", "author": "cmark", "createdAt": "2020-07-27T08:39:15Z", "path": "core/com.b2international.snowowl.core.rest.tests/src/com/b2international/snowowl/core/codesystem/CodeSystemRequestTest.java", "diffHunk": "@@ -43,6 +43,38 @@ public void setup() {\n \t\tthis.bus = Services.bus();\n \t}\n \t\n+\t@Test\n+\tpublic void getAllCodeSystems() {\n+\t\tfinal String shortName = \"newCodeSystemShortName\";\n+\t\tfinal String oid = \"newCodeSystemOid\";\n+\t\t\n+\t\tassertCodeSystemCreated(shortName, oid);\n+\t\t\n+\t\tfinal CodeSystems codeSystems = CodeSystemRequests.prepareSearchCodeSystemsInAllRepositories()\n+\t\t\t\t.build()\n+\t\t\t\t.execute(Services.context());\n+\n+\t\tassertEquals(codeSystems.getTotal(), 2);\n+\t}\n+\t\n+\t@Test\n+\tpublic void getCodeSystemByShortNameFromAllRepositoreis() {\n+\t\tfinal CodeSystems existingCodeSystem = CodeSystemRequests.prepareSearchCodeSystemsInAllRepositories()\n+\t\t\t\t.filterById(SNOMEDCT)\n+\t\t\t\t.build()\n+\t\t\t\t.execute(Services.context());\n+\n+\t\tassertEquals(existingCodeSystem.getTotal(), 1);\n+\t\tassertEquals(SNOMEDCT, Iterables.getOnlyElement(existingCodeSystem.getItems()).getShortName());\n+\n+\t\tfinal CodeSystems nonExistentCodeSystem = CodeSystemRequests.prepareSearchCodeSystemsInAllRepositories()", "originalCommit": "2e4c32c6e8053ecbafe4552a6a8d1e36ef1b0d64", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg1ODc4OQ==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/610#discussion_r460858789", "bodyText": "Done", "author": "molnarlaura", "createdAt": "2020-07-27T12:37:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDczNDE4Mw=="}], "type": "inlineReview", "revised_code": {"commit": "f1589ded589b03f8264d014dcc03ceeba22e200a", "changed_code": [{"header": "diff --git a/core/com.b2international.snowowl.core.rest.tests/src/com/b2international/snowowl/core/codesystem/CodeSystemRequestTest.java b/core/com.b2international.snowowl.core.rest.tests/src/com/b2international/snowowl/core/codesystem/CodeSystemRequestTest.java\nindex f5341cdbfc..ecd52eed17 100644\n--- a/core/com.b2international.snowowl.core.rest.tests/src/com/b2international/snowowl/core/codesystem/CodeSystemRequestTest.java\n+++ b/core/com.b2international.snowowl.core.rest.tests/src/com/b2international/snowowl/core/codesystem/CodeSystemRequestTest.java\n", "chunk": "@@ -59,7 +59,7 @@ public class CodeSystemRequestTest {\n \t\n \t@Test\n \tpublic void getCodeSystemByShortNameFromAllRepositoreis() {\n-\t\tfinal CodeSystems existingCodeSystem = CodeSystemRequests.prepareSearchCodeSystemsInAllRepositories()\n+\t\tfinal CodeSystems existingCodeSystem = CodeSystemRequests.prepareSearchAllCodeSystems()\n \t\t\t\t.filterById(SNOMEDCT)\n \t\t\t\t.build()\n \t\t\t\t.execute(Services.context());\n", "next_change": {"commit": "4018e9e14a79ac5b551db80e197beffd893dcf37", "changed_code": [{"header": "diff --git a/core/com.b2international.snowowl.core.rest.tests/src/com/b2international/snowowl/core/codesystem/CodeSystemRequestTest.java b/core/com.b2international.snowowl.core.rest.tests/src/com/b2international/snowowl/core/codesystem/CodeSystemRequestTest.java\nindex ecd52eed17..4a1faab3a2 100644\n--- a/core/com.b2international.snowowl.core.rest.tests/src/com/b2international/snowowl/core/codesystem/CodeSystemRequestTest.java\n+++ b/core/com.b2international.snowowl.core.rest.tests/src/com/b2international/snowowl/core/codesystem/CodeSystemRequestTest.java\n", "chunk": "@@ -53,26 +52,34 @@ public class CodeSystemRequestTest {\n \t\tfinal CodeSystems codeSystems = CodeSystemRequests.prepareSearchAllCodeSystems()\n \t\t\t\t.build()\n \t\t\t\t.execute(Services.context());\n-\n-\t\tassertEquals(codeSystems.getTotal(), 2);\n+\t\t\n+\t\tassertThat(codeSystems.getItems()).hasSizeGreaterThanOrEqualTo(2);\n \t}\n \t\n \t@Test\n \tpublic void getCodeSystemByShortNameFromAllRepositoreis() {\n+\t\tfinal String shortName = \"ShortName\";\n+\t\tfinal String oid = \"Oid\";\n+\t\t\n+\t\tassertCodeSystemCreated(shortName, oid);\n+\t\t\n \t\tfinal CodeSystems existingCodeSystem = CodeSystemRequests.prepareSearchAllCodeSystems()\n-\t\t\t\t.filterById(SNOMEDCT)\n+\t\t\t\t.filterById(shortName)\n \t\t\t\t.build()\n \t\t\t\t.execute(Services.context());\n \n-\t\tassertEquals(existingCodeSystem.getTotal(), 1);\n-\t\tassertEquals(SNOMEDCT, Iterables.getOnlyElement(existingCodeSystem.getItems()).getShortName());\n-\n+\t\tassertThat(existingCodeSystem.getItems()).hasSize(1);\n+\t\tassertThat(existingCodeSystem.getItems().get(0).getShortName()).isEqualTo(shortName);\n+\t}\n+\t\n+\t@Test\n+\tpublic void getNonExistentCodeSystemByShortNameFromAllRepositoreis() {\n+\t\t\n \t\tfinal CodeSystems nonExistentCodeSystem = CodeSystemRequests.prepareSearchAllCodeSystems()\n \t\t\t\t.filterById(\"not a valid code system short name\")\n \t\t\t\t.build()\n \t\t\t\t.execute(Services.context());\n-\t\n-\t\tassertEquals(nonExistentCodeSystem.getTotal(), 0);\n+\t\tassertThat(nonExistentCodeSystem.getItems()).hasSize(0);\n \t}\n \t\n \t@Test\n", "next_change": {"commit": "a0d119667dff083f4fb45487a14fa89bc18fc76c", "changed_code": [{"header": "diff --git a/core/com.b2international.snowowl.core.rest.tests/src/com/b2international/snowowl/core/codesystem/CodeSystemRequestTest.java b/core/com.b2international.snowowl.core.rest.tests/src/com/b2international/snowowl/core/codesystem/CodeSystemRequestTest.java\nindex 4a1faab3a2..929db349de 100644\n--- a/core/com.b2international.snowowl.core.rest.tests/src/com/b2international/snowowl/core/codesystem/CodeSystemRequestTest.java\n+++ b/core/com.b2international.snowowl.core.rest.tests/src/com/b2international/snowowl/core/codesystem/CodeSystemRequestTest.java\n", "chunk": "@@ -58,24 +58,24 @@ public class CodeSystemRequestTest {\n \t\n \t@Test\n \tpublic void getCodeSystemByShortNameFromAllRepositoreis() {\n-\t\tfinal String shortName = \"ShortName\";\n+\t\tfinal String id = \"ShortName\";\n \t\tfinal String oid = \"Oid\";\n \t\t\n-\t\tassertCodeSystemCreated(shortName, oid);\n+\t\tassertCodeSystemCreated(id, oid);\n \t\t\n-\t\tfinal CodeSystems existingCodeSystem = CodeSystemRequests.prepareSearchAllCodeSystems()\n-\t\t\t\t.filterById(shortName)\n+\t\tfinal CodeSystems existingCodeSystem = CodeSystemRequests.prepareSearchCodeSystem()\n+\t\t\t\t.filterById(id)\n \t\t\t\t.build()\n \t\t\t\t.execute(Services.context());\n \n \t\tassertThat(existingCodeSystem.getItems()).hasSize(1);\n-\t\tassertThat(existingCodeSystem.getItems().get(0).getShortName()).isEqualTo(shortName);\n+\t\tassertThat(existingCodeSystem.getItems().get(0).getId()).isEqualTo(id);\n \t}\n \t\n \t@Test\n \tpublic void getNonExistentCodeSystemByShortNameFromAllRepositoreis() {\n \t\t\n-\t\tfinal CodeSystems nonExistentCodeSystem = CodeSystemRequests.prepareSearchAllCodeSystems()\n+\t\tfinal CodeSystems nonExistentCodeSystem = CodeSystemRequests.prepareSearchCodeSystem()\n \t\t\t\t.filterById(\"not a valid code system short name\")\n \t\t\t\t.build()\n \t\t\t\t.execute(Services.context());\n", "next_change": {"commit": "f5f3e25479ae3f577407875413c48ebc3f45b116", "changed_code": [{"header": "diff --git a/core/com.b2international.snowowl.core.rest.tests/src/com/b2international/snowowl/core/codesystem/CodeSystemRequestTest.java b/core/com.b2international.snowowl.core.rest.tests/src/com/b2international/snowowl/core/codesystem/CodeSystemRequestTest.java\nindex 929db349de..b77c852240 100644\n--- a/core/com.b2international.snowowl.core.rest.tests/src/com/b2international/snowowl/core/codesystem/CodeSystemRequestTest.java\n+++ b/core/com.b2international.snowowl.core.rest.tests/src/com/b2international/snowowl/core/codesystem/CodeSystemRequestTest.java\n", "chunk": "@@ -77,7 +79,8 @@ public class CodeSystemRequestTest {\n \t\t\n \t\tfinal CodeSystems nonExistentCodeSystem = CodeSystemRequests.prepareSearchCodeSystem()\n \t\t\t\t.filterById(\"not a valid code system short name\")\n-\t\t\t\t.build()\n+\t\t\t\t.buildAsync()\n+\t\t\t\t.getRequest()\n \t\t\t\t.execute(Services.context());\n \t\tassertThat(nonExistentCodeSystem.getItems()).hasSize(0);\n \t}\n", "next_change": null}]}}]}}]}}, {"header": "diff --git a/core/com.b2international.snowowl.core.rest.tests/src/com/b2international/snowowl/core/codesystem/CodeSystemRequestTest.java b/core/com.b2international.snowowl.core.rest.tests/src/com/b2international/snowowl/core/codesystem/CodeSystemRequestTest.java\nindex f5341cdbfc..ecd52eed17 100644\n--- a/core/com.b2international.snowowl.core.rest.tests/src/com/b2international/snowowl/core/codesystem/CodeSystemRequestTest.java\n+++ b/core/com.b2international.snowowl.core.rest.tests/src/com/b2international/snowowl/core/codesystem/CodeSystemRequestTest.java\n", "chunk": "@@ -67,7 +67,7 @@ public class CodeSystemRequestTest {\n \t\tassertEquals(existingCodeSystem.getTotal(), 1);\n \t\tassertEquals(SNOMEDCT, Iterables.getOnlyElement(existingCodeSystem.getItems()).getShortName());\n \n-\t\tfinal CodeSystems nonExistentCodeSystem = CodeSystemRequests.prepareSearchCodeSystemsInAllRepositories()\n+\t\tfinal CodeSystems nonExistentCodeSystem = CodeSystemRequests.prepareSearchAllCodeSystems()\n \t\t\t\t.filterById(\"not a valid code system short name\")\n \t\t\t\t.build()\n \t\t\t\t.execute(Services.context());\n", "next_change": {"commit": "4018e9e14a79ac5b551db80e197beffd893dcf37", "changed_code": [{"header": "diff --git a/core/com.b2international.snowowl.core.rest.tests/src/com/b2international/snowowl/core/codesystem/CodeSystemRequestTest.java b/core/com.b2international.snowowl.core.rest.tests/src/com/b2international/snowowl/core/codesystem/CodeSystemRequestTest.java\nindex ecd52eed17..4a1faab3a2 100644\n--- a/core/com.b2international.snowowl.core.rest.tests/src/com/b2international/snowowl/core/codesystem/CodeSystemRequestTest.java\n+++ b/core/com.b2international.snowowl.core.rest.tests/src/com/b2international/snowowl/core/codesystem/CodeSystemRequestTest.java\n", "chunk": "@@ -53,26 +52,34 @@ public class CodeSystemRequestTest {\n \t\tfinal CodeSystems codeSystems = CodeSystemRequests.prepareSearchAllCodeSystems()\n \t\t\t\t.build()\n \t\t\t\t.execute(Services.context());\n-\n-\t\tassertEquals(codeSystems.getTotal(), 2);\n+\t\t\n+\t\tassertThat(codeSystems.getItems()).hasSizeGreaterThanOrEqualTo(2);\n \t}\n \t\n \t@Test\n \tpublic void getCodeSystemByShortNameFromAllRepositoreis() {\n+\t\tfinal String shortName = \"ShortName\";\n+\t\tfinal String oid = \"Oid\";\n+\t\t\n+\t\tassertCodeSystemCreated(shortName, oid);\n+\t\t\n \t\tfinal CodeSystems existingCodeSystem = CodeSystemRequests.prepareSearchAllCodeSystems()\n-\t\t\t\t.filterById(SNOMEDCT)\n+\t\t\t\t.filterById(shortName)\n \t\t\t\t.build()\n \t\t\t\t.execute(Services.context());\n \n-\t\tassertEquals(existingCodeSystem.getTotal(), 1);\n-\t\tassertEquals(SNOMEDCT, Iterables.getOnlyElement(existingCodeSystem.getItems()).getShortName());\n-\n+\t\tassertThat(existingCodeSystem.getItems()).hasSize(1);\n+\t\tassertThat(existingCodeSystem.getItems().get(0).getShortName()).isEqualTo(shortName);\n+\t}\n+\t\n+\t@Test\n+\tpublic void getNonExistentCodeSystemByShortNameFromAllRepositoreis() {\n+\t\t\n \t\tfinal CodeSystems nonExistentCodeSystem = CodeSystemRequests.prepareSearchAllCodeSystems()\n \t\t\t\t.filterById(\"not a valid code system short name\")\n \t\t\t\t.build()\n \t\t\t\t.execute(Services.context());\n-\t\n-\t\tassertEquals(nonExistentCodeSystem.getTotal(), 0);\n+\t\tassertThat(nonExistentCodeSystem.getItems()).hasSize(0);\n \t}\n \t\n \t@Test\n", "next_change": {"commit": "a0d119667dff083f4fb45487a14fa89bc18fc76c", "changed_code": [{"header": "diff --git a/core/com.b2international.snowowl.core.rest.tests/src/com/b2international/snowowl/core/codesystem/CodeSystemRequestTest.java b/core/com.b2international.snowowl.core.rest.tests/src/com/b2international/snowowl/core/codesystem/CodeSystemRequestTest.java\nindex 4a1faab3a2..929db349de 100644\n--- a/core/com.b2international.snowowl.core.rest.tests/src/com/b2international/snowowl/core/codesystem/CodeSystemRequestTest.java\n+++ b/core/com.b2international.snowowl.core.rest.tests/src/com/b2international/snowowl/core/codesystem/CodeSystemRequestTest.java\n", "chunk": "@@ -58,24 +58,24 @@ public class CodeSystemRequestTest {\n \t\n \t@Test\n \tpublic void getCodeSystemByShortNameFromAllRepositoreis() {\n-\t\tfinal String shortName = \"ShortName\";\n+\t\tfinal String id = \"ShortName\";\n \t\tfinal String oid = \"Oid\";\n \t\t\n-\t\tassertCodeSystemCreated(shortName, oid);\n+\t\tassertCodeSystemCreated(id, oid);\n \t\t\n-\t\tfinal CodeSystems existingCodeSystem = CodeSystemRequests.prepareSearchAllCodeSystems()\n-\t\t\t\t.filterById(shortName)\n+\t\tfinal CodeSystems existingCodeSystem = CodeSystemRequests.prepareSearchCodeSystem()\n+\t\t\t\t.filterById(id)\n \t\t\t\t.build()\n \t\t\t\t.execute(Services.context());\n \n \t\tassertThat(existingCodeSystem.getItems()).hasSize(1);\n-\t\tassertThat(existingCodeSystem.getItems().get(0).getShortName()).isEqualTo(shortName);\n+\t\tassertThat(existingCodeSystem.getItems().get(0).getId()).isEqualTo(id);\n \t}\n \t\n \t@Test\n \tpublic void getNonExistentCodeSystemByShortNameFromAllRepositoreis() {\n \t\t\n-\t\tfinal CodeSystems nonExistentCodeSystem = CodeSystemRequests.prepareSearchAllCodeSystems()\n+\t\tfinal CodeSystems nonExistentCodeSystem = CodeSystemRequests.prepareSearchCodeSystem()\n \t\t\t\t.filterById(\"not a valid code system short name\")\n \t\t\t\t.build()\n \t\t\t\t.execute(Services.context());\n", "next_change": {"commit": "f5f3e25479ae3f577407875413c48ebc3f45b116", "changed_code": [{"header": "diff --git a/core/com.b2international.snowowl.core.rest.tests/src/com/b2international/snowowl/core/codesystem/CodeSystemRequestTest.java b/core/com.b2international.snowowl.core.rest.tests/src/com/b2international/snowowl/core/codesystem/CodeSystemRequestTest.java\nindex 929db349de..b77c852240 100644\n--- a/core/com.b2international.snowowl.core.rest.tests/src/com/b2international/snowowl/core/codesystem/CodeSystemRequestTest.java\n+++ b/core/com.b2international.snowowl.core.rest.tests/src/com/b2international/snowowl/core/codesystem/CodeSystemRequestTest.java\n", "chunk": "@@ -77,7 +79,8 @@ public class CodeSystemRequestTest {\n \t\t\n \t\tfinal CodeSystems nonExistentCodeSystem = CodeSystemRequests.prepareSearchCodeSystem()\n \t\t\t\t.filterById(\"not a valid code system short name\")\n-\t\t\t\t.build()\n+\t\t\t\t.buildAsync()\n+\t\t\t\t.getRequest()\n \t\t\t\t.execute(Services.context());\n \t\tassertThat(nonExistentCodeSystem.getItems()).hasSize(0);\n \t}\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDczNjU5OA==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/610#discussion_r460736598", "body": "Make sure you create a CodeSystem before filtering, so there won't be any issues in the future when we remove the default `SNOMEDCT` CodeSystem.", "bodyText": "Make sure you create a CodeSystem before filtering, so there won't be any issues in the future when we remove the default SNOMEDCT CodeSystem.", "bodyHTML": "<p dir=\"auto\">Make sure you create a CodeSystem before filtering, so there won't be any issues in the future when we remove the default <code>SNOMEDCT</code> CodeSystem.</p>", "author": "cmark", "createdAt": "2020-07-27T08:43:19Z", "path": "core/com.b2international.snowowl.core.rest.tests/src/com/b2international/snowowl/core/codesystem/CodeSystemRequestTest.java", "diffHunk": "@@ -43,6 +43,38 @@ public void setup() {\n \t\tthis.bus = Services.bus();\n \t}\n \t\n+\t@Test\n+\tpublic void getAllCodeSystems() {\n+\t\tfinal String shortName = \"newCodeSystemShortName\";\n+\t\tfinal String oid = \"newCodeSystemOid\";\n+\t\t\n+\t\tassertCodeSystemCreated(shortName, oid);\n+\t\t\n+\t\tfinal CodeSystems codeSystems = CodeSystemRequests.prepareSearchCodeSystemsInAllRepositories()\n+\t\t\t\t.build()\n+\t\t\t\t.execute(Services.context());\n+\n+\t\tassertEquals(codeSystems.getTotal(), 2);\n+\t}\n+\t\n+\t@Test\n+\tpublic void getCodeSystemByShortNameFromAllRepositoreis() {\n+\t\tfinal CodeSystems existingCodeSystem = CodeSystemRequests.prepareSearchCodeSystemsInAllRepositories()", "originalCommit": "2e4c32c6e8053ecbafe4552a6a8d1e36ef1b0d64", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg2MTIyOQ==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/610#discussion_r460861229", "bodyText": "Done", "author": "molnarlaura", "createdAt": "2020-07-27T12:42:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDczNjU5OA=="}], "type": "inlineReview", "revised_code": {"commit": "f1589ded589b03f8264d014dcc03ceeba22e200a", "changed_code": [{"header": "diff --git a/core/com.b2international.snowowl.core.rest.tests/src/com/b2international/snowowl/core/codesystem/CodeSystemRequestTest.java b/core/com.b2international.snowowl.core.rest.tests/src/com/b2international/snowowl/core/codesystem/CodeSystemRequestTest.java\nindex f5341cdbfc..ecd52eed17 100644\n--- a/core/com.b2international.snowowl.core.rest.tests/src/com/b2international/snowowl/core/codesystem/CodeSystemRequestTest.java\n+++ b/core/com.b2international.snowowl.core.rest.tests/src/com/b2international/snowowl/core/codesystem/CodeSystemRequestTest.java\n", "chunk": "@@ -59,7 +59,7 @@ public class CodeSystemRequestTest {\n \t\n \t@Test\n \tpublic void getCodeSystemByShortNameFromAllRepositoreis() {\n-\t\tfinal CodeSystems existingCodeSystem = CodeSystemRequests.prepareSearchCodeSystemsInAllRepositories()\n+\t\tfinal CodeSystems existingCodeSystem = CodeSystemRequests.prepareSearchAllCodeSystems()\n \t\t\t\t.filterById(SNOMEDCT)\n \t\t\t\t.build()\n \t\t\t\t.execute(Services.context());\n", "next_change": {"commit": "4018e9e14a79ac5b551db80e197beffd893dcf37", "changed_code": [{"header": "diff --git a/core/com.b2international.snowowl.core.rest.tests/src/com/b2international/snowowl/core/codesystem/CodeSystemRequestTest.java b/core/com.b2international.snowowl.core.rest.tests/src/com/b2international/snowowl/core/codesystem/CodeSystemRequestTest.java\nindex ecd52eed17..4a1faab3a2 100644\n--- a/core/com.b2international.snowowl.core.rest.tests/src/com/b2international/snowowl/core/codesystem/CodeSystemRequestTest.java\n+++ b/core/com.b2international.snowowl.core.rest.tests/src/com/b2international/snowowl/core/codesystem/CodeSystemRequestTest.java\n", "chunk": "@@ -53,26 +52,34 @@ public class CodeSystemRequestTest {\n \t\tfinal CodeSystems codeSystems = CodeSystemRequests.prepareSearchAllCodeSystems()\n \t\t\t\t.build()\n \t\t\t\t.execute(Services.context());\n-\n-\t\tassertEquals(codeSystems.getTotal(), 2);\n+\t\t\n+\t\tassertThat(codeSystems.getItems()).hasSizeGreaterThanOrEqualTo(2);\n \t}\n \t\n \t@Test\n \tpublic void getCodeSystemByShortNameFromAllRepositoreis() {\n+\t\tfinal String shortName = \"ShortName\";\n+\t\tfinal String oid = \"Oid\";\n+\t\t\n+\t\tassertCodeSystemCreated(shortName, oid);\n+\t\t\n \t\tfinal CodeSystems existingCodeSystem = CodeSystemRequests.prepareSearchAllCodeSystems()\n-\t\t\t\t.filterById(SNOMEDCT)\n+\t\t\t\t.filterById(shortName)\n \t\t\t\t.build()\n \t\t\t\t.execute(Services.context());\n \n-\t\tassertEquals(existingCodeSystem.getTotal(), 1);\n-\t\tassertEquals(SNOMEDCT, Iterables.getOnlyElement(existingCodeSystem.getItems()).getShortName());\n-\n+\t\tassertThat(existingCodeSystem.getItems()).hasSize(1);\n+\t\tassertThat(existingCodeSystem.getItems().get(0).getShortName()).isEqualTo(shortName);\n+\t}\n+\t\n+\t@Test\n+\tpublic void getNonExistentCodeSystemByShortNameFromAllRepositoreis() {\n+\t\t\n \t\tfinal CodeSystems nonExistentCodeSystem = CodeSystemRequests.prepareSearchAllCodeSystems()\n \t\t\t\t.filterById(\"not a valid code system short name\")\n \t\t\t\t.build()\n \t\t\t\t.execute(Services.context());\n-\t\n-\t\tassertEquals(nonExistentCodeSystem.getTotal(), 0);\n+\t\tassertThat(nonExistentCodeSystem.getItems()).hasSize(0);\n \t}\n \t\n \t@Test\n", "next_change": {"commit": "a0d119667dff083f4fb45487a14fa89bc18fc76c", "changed_code": [{"header": "diff --git a/core/com.b2international.snowowl.core.rest.tests/src/com/b2international/snowowl/core/codesystem/CodeSystemRequestTest.java b/core/com.b2international.snowowl.core.rest.tests/src/com/b2international/snowowl/core/codesystem/CodeSystemRequestTest.java\nindex 4a1faab3a2..929db349de 100644\n--- a/core/com.b2international.snowowl.core.rest.tests/src/com/b2international/snowowl/core/codesystem/CodeSystemRequestTest.java\n+++ b/core/com.b2international.snowowl.core.rest.tests/src/com/b2international/snowowl/core/codesystem/CodeSystemRequestTest.java\n", "chunk": "@@ -58,24 +58,24 @@ public class CodeSystemRequestTest {\n \t\n \t@Test\n \tpublic void getCodeSystemByShortNameFromAllRepositoreis() {\n-\t\tfinal String shortName = \"ShortName\";\n+\t\tfinal String id = \"ShortName\";\n \t\tfinal String oid = \"Oid\";\n \t\t\n-\t\tassertCodeSystemCreated(shortName, oid);\n+\t\tassertCodeSystemCreated(id, oid);\n \t\t\n-\t\tfinal CodeSystems existingCodeSystem = CodeSystemRequests.prepareSearchAllCodeSystems()\n-\t\t\t\t.filterById(shortName)\n+\t\tfinal CodeSystems existingCodeSystem = CodeSystemRequests.prepareSearchCodeSystem()\n+\t\t\t\t.filterById(id)\n \t\t\t\t.build()\n \t\t\t\t.execute(Services.context());\n \n \t\tassertThat(existingCodeSystem.getItems()).hasSize(1);\n-\t\tassertThat(existingCodeSystem.getItems().get(0).getShortName()).isEqualTo(shortName);\n+\t\tassertThat(existingCodeSystem.getItems().get(0).getId()).isEqualTo(id);\n \t}\n \t\n \t@Test\n \tpublic void getNonExistentCodeSystemByShortNameFromAllRepositoreis() {\n \t\t\n-\t\tfinal CodeSystems nonExistentCodeSystem = CodeSystemRequests.prepareSearchAllCodeSystems()\n+\t\tfinal CodeSystems nonExistentCodeSystem = CodeSystemRequests.prepareSearchCodeSystem()\n \t\t\t\t.filterById(\"not a valid code system short name\")\n \t\t\t\t.build()\n \t\t\t\t.execute(Services.context());\n", "next_change": {"commit": "f5f3e25479ae3f577407875413c48ebc3f45b116", "changed_code": [{"header": "diff --git a/core/com.b2international.snowowl.core.rest.tests/src/com/b2international/snowowl/core/codesystem/CodeSystemRequestTest.java b/core/com.b2international.snowowl.core.rest.tests/src/com/b2international/snowowl/core/codesystem/CodeSystemRequestTest.java\nindex 929db349de..b77c852240 100644\n--- a/core/com.b2international.snowowl.core.rest.tests/src/com/b2international/snowowl/core/codesystem/CodeSystemRequestTest.java\n+++ b/core/com.b2international.snowowl.core.rest.tests/src/com/b2international/snowowl/core/codesystem/CodeSystemRequestTest.java\n", "chunk": "@@ -77,7 +79,8 @@ public class CodeSystemRequestTest {\n \t\t\n \t\tfinal CodeSystems nonExistentCodeSystem = CodeSystemRequests.prepareSearchCodeSystem()\n \t\t\t\t.filterById(\"not a valid code system short name\")\n-\t\t\t\t.build()\n+\t\t\t\t.buildAsync()\n+\t\t\t\t.getRequest()\n \t\t\t\t.execute(Services.context());\n \t\tassertThat(nonExistentCodeSystem.getItems()).hasSize(0);\n \t}\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDczNzU2OA==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/610#discussion_r460737568", "body": "Make this class `final` and `package private`.", "bodyText": "Make this class final and package private.", "bodyHTML": "<p dir=\"auto\">Make this class <code>final</code> and <code>package private</code>.</p>", "author": "cmark", "createdAt": "2020-07-27T08:44:52Z", "path": "core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/codesystem/AllCodeSystemSearchRequest.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2020 B2i Healthcare Pte Ltd, http://b2i.sg\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.b2international.snowowl.core.codesystem;\n+\n+import java.util.Collection;\n+import java.util.List;\n+\n+import com.b2international.snowowl.core.Repositories;\n+import com.b2international.snowowl.core.ServiceProvider;\n+import com.b2international.snowowl.core.events.Request;\n+import com.b2international.snowowl.core.repository.RepositoryRequests;\n+import com.google.common.collect.Lists;\n+\n+/**\n+ * @since 7.8\n+ */\n+public class AllCodeSystemSearchRequest implements Request<ServiceProvider, CodeSystems> {", "originalCommit": "2e4c32c6e8053ecbafe4552a6a8d1e36ef1b0d64", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg0NzcyMA==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/610#discussion_r460847720", "bodyText": "Done", "author": "molnarlaura", "createdAt": "2020-07-27T12:16:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDczNzU2OA=="}], "type": "inlineReview", "revised_code": {"commit": "4e313cf40f956a550acd762747e0276f41468c2f", "changed_code": [{"header": "diff --git a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/codesystem/AllCodeSystemSearchRequest.java b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/codesystem/AllCodeSystemSearchRequest.java\nindex eb41fe93e7..4a944e2c4d 100644\n--- a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/codesystem/AllCodeSystemSearchRequest.java\n+++ b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/codesystem/AllCodeSystemSearchRequest.java\n", "chunk": "@@ -27,7 +27,7 @@ import com.google.common.collect.Lists;\n /**\n  * @since 7.8\n  */\n-public class AllCodeSystemSearchRequest implements Request<ServiceProvider, CodeSystems> {\n+final class AllCodeSystemSearchRequest implements Request<ServiceProvider, CodeSystems> {\n \n \tprivate static final long serialVersionUID = 1L;\n \t\n", "next_change": {"commit": "dbece4db9b4ea3e67b991f56bd40b460ad7dff1f", "changed_code": [{"header": "diff --git a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/codesystem/AllCodeSystemSearchRequest.java b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/codesystem/AllCodeSystemSearchRequest.java\nindex 4a944e2c4d..0029d51d50 100644\n--- a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/codesystem/AllCodeSystemSearchRequest.java\n+++ b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/codesystem/AllCodeSystemSearchRequest.java\n", "chunk": "@@ -34,11 +34,13 @@ final class AllCodeSystemSearchRequest implements Request<ServiceProvider, CodeS\n \tprivate final Collection<String> ids;\n \tprivate final List<String> fields;\n \tprivate final String expand;\n+\tprivate final Iterable<String> toolingIds;\n \t\n-\tAllCodeSystemSearchRequest(final Collection<String> ids, final List<String> fields, final String expand) {\n+\tAllCodeSystemSearchRequest(final Collection<String> ids, final List<String> fields, final String expand, final Iterable<String> toolingIds) {\n \t\tthis.ids = ids;\n \t\tthis.fields = fields;\n \t\tthis.expand = expand;\n+\t\tthis.toolingIds= toolingIds;\n \t}\n \n \t@Override\n", "next_change": {"commit": "d6fb29d1deee5d8ee7d6ba38b208b4685e282511", "changed_code": [{"header": "diff --git a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/codesystem/AllCodeSystemSearchRequest.java b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/codesystem/AllCodeSystemSearchRequest.java\nindex 0029d51d50..091f53c353 100644\n--- a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/codesystem/AllCodeSystemSearchRequest.java\n+++ b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/codesystem/AllCodeSystemSearchRequest.java\n", "chunk": "@@ -32,11 +32,11 @@ final class AllCodeSystemSearchRequest implements Request<ServiceProvider, CodeS\n \tprivate static final long serialVersionUID = 1L;\n \t\n \tprivate final Collection<String> ids;\n-\tprivate final List<String> fields;\n+\tprivate final Iterable<String> fields;\n \tprivate final String expand;\n \tprivate final Iterable<String> toolingIds;\n \t\n-\tAllCodeSystemSearchRequest(final Collection<String> ids, final List<String> fields, final String expand, final Iterable<String> toolingIds) {\n+\tAllCodeSystemSearchRequest(final Collection<String> ids, final Iterable<String> fields, final String expand, final Iterable<String> toolingIds) {\n \t\tthis.ids = ids;\n \t\tthis.fields = fields;\n \t\tthis.expand = expand;\n", "next_change": {"commit": "0934137f7725cd475a1510e7b51f93a1738f9e65", "changed_code": [{"header": "diff --git a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/codesystem/AllCodeSystemSearchRequest.java b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/codesystem/AllCodeSystemSearchRequest.java\nindex 091f53c353..0029d51d50 100644\n--- a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/codesystem/AllCodeSystemSearchRequest.java\n+++ b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/codesystem/AllCodeSystemSearchRequest.java\n", "chunk": "@@ -32,11 +32,11 @@ final class AllCodeSystemSearchRequest implements Request<ServiceProvider, CodeS\n \tprivate static final long serialVersionUID = 1L;\n \t\n \tprivate final Collection<String> ids;\n-\tprivate final Iterable<String> fields;\n+\tprivate final List<String> fields;\n \tprivate final String expand;\n \tprivate final Iterable<String> toolingIds;\n \t\n-\tAllCodeSystemSearchRequest(final Collection<String> ids, final Iterable<String> fields, final String expand, final Iterable<String> toolingIds) {\n+\tAllCodeSystemSearchRequest(final Collection<String> ids, final List<String> fields, final String expand, final Iterable<String> toolingIds) {\n \t\tthis.ids = ids;\n \t\tthis.fields = fields;\n \t\tthis.expand = expand;\n", "next_change": {"commit": "94bfb68e10310b09e0e7ab896e29b360a9254ba2", "changed_code": [{"header": "diff --git a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/codesystem/AllCodeSystemSearchRequest.java b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/codesystem/AllCodeSystemSearchRequest.java\ndeleted file mode 100644\nindex 0029d51d50..0000000000\n--- a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/codesystem/AllCodeSystemSearchRequest.java\n+++ /dev/null\n", "chunk": "@@ -1,72 +0,0 @@\n-/*\n- * Copyright 2020 B2i Healthcare Pte Ltd, http://b2i.sg\n- * \n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package com.b2international.snowowl.core.codesystem;\n-\n-import java.util.Collection;\n-import java.util.List;\n-\n-import com.b2international.snowowl.core.Repositories;\n-import com.b2international.snowowl.core.ServiceProvider;\n-import com.b2international.snowowl.core.events.Request;\n-import com.b2international.snowowl.core.repository.RepositoryRequests;\n-import com.google.common.collect.Lists;\n-\n-/**\n- * @since 7.8\n- */\n-final class AllCodeSystemSearchRequest implements Request<ServiceProvider, CodeSystems> {\n-\n-\tprivate static final long serialVersionUID = 1L;\n-\t\n-\tprivate final Collection<String> ids;\n-\tprivate final List<String> fields;\n-\tprivate final String expand;\n-\tprivate final Iterable<String> toolingIds;\n-\t\n-\tAllCodeSystemSearchRequest(final Collection<String> ids, final List<String> fields, final String expand, final Iterable<String> toolingIds) {\n-\t\tthis.ids = ids;\n-\t\tthis.fields = fields;\n-\t\tthis.expand = expand;\n-\t\tthis.toolingIds= toolingIds;\n-\t}\n-\n-\t@Override\n-\tpublic CodeSystems execute(ServiceProvider context) {\n-\t\tfinal List<CodeSystem> codeSystemList = Lists.newArrayList();\n-\n-\t\tfinal Repositories repositories = RepositoryRequests.prepareSearch()\n-\t\t\t\t.all()\n-\t\t\t\t.build()\n-\t\t\t\t.execute(context);\n-\t\t\n-\t\trepositories.forEach(repositoryInfo -> {\n-\t\t\tCodeSystems css = CodeSystemRequests.prepareSearchCodeSystem()\n-\t\t\t\t\t.all()\n-\t\t\t\t\t.filterByIds(ids)\n-\t\t\t\t\t.filterByToolingIds(toolingIds)\n-\t\t\t\t\t.setFields(fields)\n-\t\t\t\t\t.setExpand(expand)\n-\t\t\t\t\t.build(repositoryInfo.id())\n-\t\t\t\t\t.getRequest()\n-\t\t\t\t\t.execute(context);\n-\t\t\t\n-\t\t\tcodeSystemList.addAll(css.getItems());\n-\t\t});\n-\t\t\n-\t\treturn new CodeSystems(codeSystemList, null, codeSystemList.size(), codeSystemList.size());\n-\t}\n-\t\n-}\n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc0MDcxOA==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/610#discussion_r460740718", "body": "Replace limit `50` with `codeSystemList.size()`.", "bodyText": "Replace limit 50 with codeSystemList.size().", "bodyHTML": "<p dir=\"auto\">Replace limit <code>50</code> with <code>codeSystemList.size()</code>.</p>", "author": "cmark", "createdAt": "2020-07-27T08:50:07Z", "path": "core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/codesystem/AllCodeSystemSearchRequest.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2020 B2i Healthcare Pte Ltd, http://b2i.sg\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.b2international.snowowl.core.codesystem;\n+\n+import java.util.Collection;\n+import java.util.List;\n+\n+import com.b2international.snowowl.core.Repositories;\n+import com.b2international.snowowl.core.ServiceProvider;\n+import com.b2international.snowowl.core.events.Request;\n+import com.b2international.snowowl.core.repository.RepositoryRequests;\n+import com.google.common.collect.Lists;\n+\n+/**\n+ * @since 7.8\n+ */\n+public class AllCodeSystemSearchRequest implements Request<ServiceProvider, CodeSystems> {\n+\n+\tprivate static final long serialVersionUID = 1L;\n+\t\n+\tprivate final Collection<String> ids;\n+\tprivate final List<String> fields;\n+\tprivate final String expand;\n+\t\n+\tAllCodeSystemSearchRequest(final Collection<String> ids, final List<String> fields, final String expand) {\n+\t\tthis.ids = ids;\n+\t\tthis.fields = fields;\n+\t\tthis.expand = expand;\n+\t}\n+\n+\t@Override\n+\tpublic CodeSystems execute(ServiceProvider context) {\n+\t\tfinal List<CodeSystem> codeSystemList = Lists.newArrayList();\n+\n+\t\tfinal Repositories repositories = RepositoryRequests.prepareSearch()\n+\t\t\t\t.all()\n+\t\t\t\t.build()\n+\t\t\t\t.execute(context);\n+\t\t\n+\t\trepositories.forEach(repositoryInfo -> {\n+\t\t\tCodeSystems css = CodeSystemRequests.prepareSearchCodeSystem()\n+\t\t\t\t\t.all()\n+\t\t\t\t\t.filterByIds(ids)\n+\t\t\t\t\t.setFields(fields)\n+\t\t\t\t\t.setExpand(expand)\n+\t\t\t\t\t.build(repositoryInfo.id())\n+\t\t\t\t\t.getRequest()\n+\t\t\t\t\t.execute(context);\n+\t\t\t\n+\t\t\tcodeSystemList.addAll(css.getItems());\n+\t\t});\n+\t\t\n+\t\treturn new CodeSystems(codeSystemList, null, 50, codeSystemList.size());", "originalCommit": "2e4c32c6e8053ecbafe4552a6a8d1e36ef1b0d64", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg0ODI1Mw==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/610#discussion_r460848253", "bodyText": "Done", "author": "molnarlaura", "createdAt": "2020-07-27T12:17:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc0MDcxOA=="}], "type": "inlineReview", "revised_code": {"commit": "eff369138b15891d9e243fa58923f0513b136d81", "changed_code": [{"header": "diff --git a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/codesystem/AllCodeSystemSearchRequest.java b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/codesystem/AllCodeSystemSearchRequest.java\nindex eb41fe93e7..f4569e5dd4 100644\n--- a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/codesystem/AllCodeSystemSearchRequest.java\n+++ b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/codesystem/AllCodeSystemSearchRequest.java\n", "chunk": "@@ -63,7 +63,7 @@ public class AllCodeSystemSearchRequest implements Request<ServiceProvider, Code\n \t\t\tcodeSystemList.addAll(css.getItems());\n \t\t});\n \t\t\n-\t\treturn new CodeSystems(codeSystemList, null, 50, codeSystemList.size());\n+\t\treturn new CodeSystems(codeSystemList, null, codeSystemList.size(), codeSystemList.size());\n \t}\n \t\n }\n", "next_change": {"commit": "94bfb68e10310b09e0e7ab896e29b360a9254ba2", "changed_code": [{"header": "diff --git a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/codesystem/AllCodeSystemSearchRequest.java b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/codesystem/AllCodeSystemSearchRequest.java\ndeleted file mode 100644\nindex f4569e5dd4..0000000000\n--- a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/codesystem/AllCodeSystemSearchRequest.java\n+++ /dev/null\n", "chunk": "@@ -1,69 +0,0 @@\n-/*\n- * Copyright 2020 B2i Healthcare Pte Ltd, http://b2i.sg\n- * \n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package com.b2international.snowowl.core.codesystem;\n-\n-import java.util.Collection;\n-import java.util.List;\n-\n-import com.b2international.snowowl.core.Repositories;\n-import com.b2international.snowowl.core.ServiceProvider;\n-import com.b2international.snowowl.core.events.Request;\n-import com.b2international.snowowl.core.repository.RepositoryRequests;\n-import com.google.common.collect.Lists;\n-\n-/**\n- * @since 7.8\n- */\n-final class AllCodeSystemSearchRequest implements Request<ServiceProvider, CodeSystems> {\n-\n-\tprivate static final long serialVersionUID = 1L;\n-\t\n-\tprivate final Collection<String> ids;\n-\tprivate final List<String> fields;\n-\tprivate final String expand;\n-\t\n-\tAllCodeSystemSearchRequest(final Collection<String> ids, final List<String> fields, final String expand) {\n-\t\tthis.ids = ids;\n-\t\tthis.fields = fields;\n-\t\tthis.expand = expand;\n-\t}\n-\n-\t@Override\n-\tpublic CodeSystems execute(ServiceProvider context) {\n-\t\tfinal List<CodeSystem> codeSystemList = Lists.newArrayList();\n-\n-\t\tfinal Repositories repositories = RepositoryRequests.prepareSearch()\n-\t\t\t\t.all()\n-\t\t\t\t.build()\n-\t\t\t\t.execute(context);\n-\t\t\n-\t\trepositories.forEach(repositoryInfo -> {\n-\t\t\tCodeSystems css = CodeSystemRequests.prepareSearchCodeSystem()\n-\t\t\t\t\t.all()\n-\t\t\t\t\t.filterByIds(ids)\n-\t\t\t\t\t.setFields(fields)\n-\t\t\t\t\t.setExpand(expand)\n-\t\t\t\t\t.build(repositoryInfo.id())\n-\t\t\t\t\t.getRequest()\n-\t\t\t\t\t.execute(context);\n-\t\t\t\n-\t\t\tcodeSystemList.addAll(css.getItems());\n-\t\t});\n-\t\t\n-\t\treturn new CodeSystems(codeSystemList, null, codeSystemList.size(), codeSystemList.size());\n-\t}\n-\t\n-}\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc0MDg1MA==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/610#discussion_r460740850", "body": "Make this class `final`.", "bodyText": "Make this class final.", "bodyHTML": "<p dir=\"auto\">Make this class <code>final</code>.</p>", "author": "cmark", "createdAt": "2020-07-27T08:50:20Z", "path": "core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/codesystem/AllCodeSystemSearchRequestBuilder.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020 B2i Healthcare Pte Ltd, http://b2i.sg\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.b2international.snowowl.core.codesystem;\n+\n+import java.util.Collection;\n+import java.util.List;\n+\n+import com.b2international.snowowl.core.ServiceProvider;\n+import com.b2international.snowowl.core.events.Request;\n+import com.b2international.snowowl.core.request.SystemRequestBuilder;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+\n+/**\n+ * @since 7.8\n+ */\n+public class AllCodeSystemSearchRequestBuilder implements SystemRequestBuilder<CodeSystems>  {", "originalCommit": "2e4c32c6e8053ecbafe4552a6a8d1e36ef1b0d64", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg0ODY3OA==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/610#discussion_r460848678", "bodyText": "Done", "author": "molnarlaura", "createdAt": "2020-07-27T12:18:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc0MDg1MA=="}], "type": "inlineReview", "revised_code": {"commit": "0643086489bf3ae7cda5ec0a484c371f21c855a3", "changed_code": [{"header": "diff --git a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/codesystem/AllCodeSystemSearchRequestBuilder.java b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/codesystem/AllCodeSystemSearchRequestBuilder.java\nindex edf756b12e..af18af034f 100644\n--- a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/codesystem/AllCodeSystemSearchRequestBuilder.java\n+++ b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/codesystem/AllCodeSystemSearchRequestBuilder.java\n", "chunk": "@@ -27,7 +27,7 @@ import com.google.common.collect.ImmutableSet;\n /**\n  * @since 7.8\n  */\n-public class AllCodeSystemSearchRequestBuilder implements SystemRequestBuilder<CodeSystems>  {\n+public final class AllCodeSystemSearchRequestBuilder implements SystemRequestBuilder<CodeSystems>  {\n \n \tprivate Collection<String> ids;\n \tprivate List<String> fields;\n", "next_change": {"commit": "dbece4db9b4ea3e67b991f56bd40b460ad7dff1f", "changed_code": [{"header": "diff --git a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/codesystem/AllCodeSystemSearchRequestBuilder.java b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/codesystem/AllCodeSystemSearchRequestBuilder.java\nindex af18af034f..01c0ae3c11 100644\n--- a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/codesystem/AllCodeSystemSearchRequestBuilder.java\n+++ b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/codesystem/AllCodeSystemSearchRequestBuilder.java\n", "chunk": "@@ -32,6 +32,7 @@ public final class AllCodeSystemSearchRequestBuilder implements SystemRequestBui\n \tprivate Collection<String> ids;\n \tprivate List<String> fields;\n \tprivate String expand;\n+\tprivate Iterable<String> toolingIds;\n \t\n \tpublic AllCodeSystemSearchRequestBuilder filterById(final String id) {\n \t\tthis.ids = ImmutableSet.of(id);\n", "next_change": {"commit": "d6fb29d1deee5d8ee7d6ba38b208b4685e282511", "changed_code": [{"header": "diff --git a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/codesystem/AllCodeSystemSearchRequestBuilder.java b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/codesystem/AllCodeSystemSearchRequestBuilder.java\nindex 01c0ae3c11..5e3d7612ad 100644\n--- a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/codesystem/AllCodeSystemSearchRequestBuilder.java\n+++ b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/codesystem/AllCodeSystemSearchRequestBuilder.java\n", "chunk": "@@ -30,7 +28,7 @@ import com.google.common.collect.ImmutableSet;\n public final class AllCodeSystemSearchRequestBuilder implements SystemRequestBuilder<CodeSystems>  {\n \n \tprivate Collection<String> ids;\n-\tprivate List<String> fields;\n+\tprivate Iterable<String> fields;\n \tprivate String expand;\n \tprivate Iterable<String> toolingIds;\n \t\n", "next_change": {"commit": "0934137f7725cd475a1510e7b51f93a1738f9e65", "changed_code": [{"header": "diff --git a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/codesystem/AllCodeSystemSearchRequestBuilder.java b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/codesystem/AllCodeSystemSearchRequestBuilder.java\nindex 5e3d7612ad..01c0ae3c11 100644\n--- a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/codesystem/AllCodeSystemSearchRequestBuilder.java\n+++ b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/codesystem/AllCodeSystemSearchRequestBuilder.java\n", "chunk": "@@ -28,7 +30,7 @@ import com.google.common.collect.ImmutableSet;\n public final class AllCodeSystemSearchRequestBuilder implements SystemRequestBuilder<CodeSystems>  {\n \n \tprivate Collection<String> ids;\n-\tprivate Iterable<String> fields;\n+\tprivate List<String> fields;\n \tprivate String expand;\n \tprivate Iterable<String> toolingIds;\n \t\n", "next_change": {"commit": "94bfb68e10310b09e0e7ab896e29b360a9254ba2", "changed_code": [{"header": "diff --git a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/codesystem/AllCodeSystemSearchRequestBuilder.java b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/codesystem/AllCodeSystemSearchRequestBuilder.java\ndeleted file mode 100644\nindex 01c0ae3c11..0000000000\n--- a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/codesystem/AllCodeSystemSearchRequestBuilder.java\n+++ /dev/null\n", "chunk": "@@ -1,67 +0,0 @@\n-/*\n- * Copyright 2020 B2i Healthcare Pte Ltd, http://b2i.sg\n- * \n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package com.b2international.snowowl.core.codesystem;\n-\n-import java.util.Collection;\n-import java.util.List;\n-\n-import com.b2international.snowowl.core.ServiceProvider;\n-import com.b2international.snowowl.core.events.Request;\n-import com.b2international.snowowl.core.request.SystemRequestBuilder;\n-import com.google.common.collect.ImmutableList;\n-import com.google.common.collect.ImmutableSet;\n-\n-/**\n- * @since 7.8\n- */\n-public final class AllCodeSystemSearchRequestBuilder implements SystemRequestBuilder<CodeSystems>  {\n-\n-\tprivate Collection<String> ids;\n-\tprivate List<String> fields;\n-\tprivate String expand;\n-\tprivate Iterable<String> toolingIds;\n-\t\n-\tpublic AllCodeSystemSearchRequestBuilder filterById(final String id) {\n-\t\tthis.ids = ImmutableSet.of(id);\n-\t\treturn this;\n-\t}\n-\t\n-\tpublic AllCodeSystemSearchRequestBuilder filterByIds(final Collection<String> ids) {\n-\t\tthis.ids = ImmutableSet.copyOf(ids);\n-\t\treturn this;\n-\t}\n-\t\n-\tpublic AllCodeSystemSearchRequestBuilder filterByToolingIds(final Iterable<String> toolingIds) {\n-\t\tthis.toolingIds = ImmutableSet.copyOf(toolingIds);\n-\t\treturn this;\n-\t}\n-\t\n-\tpublic AllCodeSystemSearchRequestBuilder setFields(final Collection<String> fields) {\n-\t\tthis.fields = ImmutableList.copyOf(fields);\n-\t\treturn this;\n-\t}\n-\t\n-\tpublic AllCodeSystemSearchRequestBuilder setExpand(final String expand) {\n-\t\tthis.expand = expand;\n-\t\treturn this;\n-\t}\n-\t\n-\t@Override\n-\tpublic Request<ServiceProvider, CodeSystems> build() {\n-\t\treturn new AllCodeSystemSearchRequest(ids, fields, expand, toolingIds);\n-\t}\n-\n-}\n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc0MjI0OA==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/610#discussion_r460742248", "body": "Rename `prepareSearchMappings` to `prepareSearchConceptMapMappings`", "bodyText": "Rename prepareSearchMappings to prepareSearchConceptMapMappings", "bodyHTML": "<p dir=\"auto\">Rename <code>prepareSearchMappings</code> to <code>prepareSearchConceptMapMappings</code></p>", "author": "cmark", "createdAt": "2020-07-27T08:52:37Z", "path": "core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/codesystem/CodeSystemRequests.java", "diffHunk": "@@ -81,13 +84,30 @@ public static MemberSearchRequestBuilder prepareSearchMembers() {\n \t\treturn new MemberSearchRequestBuilder();\n \t}\n \t\n+\t/**\n+\t * Creates a new generic set mapping search request builder.\n+\t * \n+\t * @return the builder to configure for generic mappings search\n+\t */\n+\tpublic static MappingSearchRequestBuilder prepareSearchMappings() {", "originalCommit": "2e4c32c6e8053ecbafe4552a6a8d1e36ef1b0d64", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgzMTk1MA==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/610#discussion_r460831950", "bodyText": "Done", "author": "molnarlaura", "createdAt": "2020-07-27T11:44:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc0MjI0OA=="}], "type": "inlineReview", "revised_code": {"commit": "df298c1462d59171d18f5f1edeb99ab7b2ce2a03", "changed_code": [{"header": "diff --git a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/codesystem/CodeSystemRequests.java b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/codesystem/CodeSystemRequests.java\nindex bdc1f181bd..f597e75848 100644\n--- a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/codesystem/CodeSystemRequests.java\n+++ b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/codesystem/CodeSystemRequests.java\n", "chunk": "@@ -89,7 +89,7 @@ public class CodeSystemRequests {\n \t * \n \t * @return the builder to configure for generic mappings search\n \t */\n-\tpublic static MappingSearchRequestBuilder prepareSearchMappings() {\n+\tpublic static MappingSearchRequestBuilder prepareSearchConceptMapMappings() {\n \t\treturn new MappingSearchRequestBuilder();\n \t}\n \t\n", "next_change": {"commit": "ee68596164d02ac1c8851431fd8fdcfedbe174c5", "changed_code": [{"header": "diff --git a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/codesystem/CodeSystemRequests.java b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/codesystem/CodeSystemRequests.java\nindex f597e75848..3ea1541c10 100644\n--- a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/codesystem/CodeSystemRequests.java\n+++ b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/codesystem/CodeSystemRequests.java\n", "chunk": "@@ -89,8 +89,8 @@ public class CodeSystemRequests {\n \t * \n \t * @return the builder to configure for generic mappings search\n \t */\n-\tpublic static MappingSearchRequestBuilder prepareSearchConceptMapMappings() {\n-\t\treturn new MappingSearchRequestBuilder();\n+\tpublic static ConceptMapMappingSearchRequestBuilder prepareSearchConceptMapMappings() {\n+\t\treturn new ConceptMapMappingSearchRequestBuilder();\n \t}\n \t\n \tpublic static ConceptSuggestionRequestBuilder prepareSuggestConcepts() {\n", "next_change": {"commit": "020bacfa1db58a73a65b24491c6dbf39841e06d9", "changed_code": [{"header": "diff --git a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/codesystem/CodeSystemRequests.java b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/codesystem/CodeSystemRequests.java\nindex 3ea1541c10..663e6ecfd3 100644\n--- a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/codesystem/CodeSystemRequests.java\n+++ b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/codesystem/CodeSystemRequests.java\n", "chunk": "@@ -84,15 +75,6 @@ public class CodeSystemRequests {\n \t\treturn new MemberSearchRequestBuilder();\n \t}\n \t\n-\t/**\n-\t * Creates a new generic set mapping search request builder.\n-\t * \n-\t * @return the builder to configure for generic mappings search\n-\t */\n-\tpublic static ConceptMapMappingSearchRequestBuilder prepareSearchConceptMapMappings() {\n-\t\treturn new ConceptMapMappingSearchRequestBuilder();\n-\t}\n-\t\n \tpublic static ConceptSuggestionRequestBuilder prepareSuggestConcepts() {\n \t\treturn new ConceptSuggestionRequestBuilder();\n \t}\n", "next_change": {"commit": "624c0a92bc38415360cabbf586d02029d652887f", "changed_code": [{"header": "diff --git a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/codesystem/CodeSystemRequests.java b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/codesystem/CodeSystemRequests.java\nindex 663e6ecfd3..c4b7b95d89 100644\n--- a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/codesystem/CodeSystemRequests.java\n+++ b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/codesystem/CodeSystemRequests.java\n", "chunk": "@@ -71,8 +71,8 @@ public class CodeSystemRequests {\n \t * \n \t * @return the builder to configure for generic set member search\n \t */\n-\tpublic static MemberSearchRequestBuilder prepareSearchMembers() {\n-\t\treturn new MemberSearchRequestBuilder();\n+\tpublic static ValueSetMemberSearchRequestBuilder prepareSearchMembers() {\n+\t\treturn new ValueSetMemberSearchRequestBuilder();\n \t}\n \t\n \tpublic static ConceptSuggestionRequestBuilder prepareSuggestConcepts() {\n", "next_change": {"commit": "f507964d56231b8e9154b8c2d5459997b1adb6ab", "changed_code": [{"header": "diff --git a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/codesystem/CodeSystemRequests.java b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/codesystem/CodeSystemRequests.java\nindex c4b7b95d89..2debc80904 100644\n--- a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/codesystem/CodeSystemRequests.java\n+++ b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/codesystem/CodeSystemRequests.java\n", "chunk": "@@ -78,9 +85,35 @@ public class CodeSystemRequests {\n \tpublic static ConceptSuggestionRequestBuilder prepareSuggestConcepts() {\n \t\treturn new ConceptSuggestionRequestBuilder();\n \t}\n+\t\n+\tpublic static ConceptSuggestionBulkRequestBuilder prepareBulkSuggestConcepts() {\n+\t\treturn new ConceptSuggestionBulkRequestBuilder();\n+\t}\n \n \tpublic static QueryOptimizeRequestBuilder prepareOptimizeQueries() {\n \t\treturn new QueryOptimizeRequestBuilder();\n \t}\n \t\n+\t/**\n+\t * Returns a request builder to prepare the labeling of a ECL expressions.\n+\t * \n+\t * @param codeSystemUri - the code system from where the labels should be computed\n+\t * @param expression - the ECL expression to extend with labels\n+\t * @return ECL labeler request builder\n+\t */\n+\tpublic static EclLabelerRequestBuilder prepareEclLabeler(String codeSystemUri, String expression) {\n+\t\treturn new EclLabelerRequestBuilder(codeSystemUri, expression);\n+\t}\n+\t\n+\t/**\n+\t * Returns a request builder to prepare the labeling of a list of Expression Constraint Language (ECL) expressions.\n+\t * \n+\t * @param codeSystemUri - the code system from where the labels should be computed\n+\t * @param expressions - a list of ECL expressions to extend with labels\n+\t * @return ECL labeler request builder\n+\t */\n+\tpublic static EclLabelerRequestBuilder prepareEclLabeler(String codeSystemUri, List<String> expressions) {\n+\t\treturn new EclLabelerRequestBuilder(codeSystemUri, expressions);\n+\t}\n+\n }\n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc0Mjc3MA==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/610#discussion_r460742770", "body": "Use `public final` instead of `final public`.", "bodyText": "Use public final instead of final public.", "bodyHTML": "<p dir=\"auto\">Use <code>public final</code> instead of <code>final public</code>.</p>", "author": "cmark", "createdAt": "2020-07-27T08:53:26Z", "path": "core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/compare/ConceptMapCompareResult.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright 2020 B2i Healthcare Pte Ltd, http://b2i.sg\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.b2international.snowowl.core.compare;\n+\n+import java.io.Serializable;\n+import java.util.List;\n+\n+import com.b2international.snowowl.core.domain.SetMapping;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableListMultimap;\n+import com.google.common.collect.ListMultimap;\n+/**\n+ * @since 7.8\n+ */\n+final public class ConceptMapCompareResult implements Serializable {", "originalCommit": "2e4c32c6e8053ecbafe4552a6a8d1e36ef1b0d64", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg0OTIyNQ==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/610#discussion_r460849225", "bodyText": "Done", "author": "molnarlaura", "createdAt": "2020-07-27T12:19:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc0Mjc3MA=="}], "type": "inlineReview", "revised_code": {"commit": "cc2d2fb84353682193f78e2e3772b5c730f50892", "changed_code": [{"header": "diff --git a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/compare/ConceptMapCompareResult.java b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/compare/ConceptMapCompareResult.java\nindex 5f8d38f23c..1f47dba00b 100644\n--- a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/compare/ConceptMapCompareResult.java\n+++ b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/compare/ConceptMapCompareResult.java\n", "chunk": "@@ -18,7 +18,7 @@ package com.b2international.snowowl.core.compare;\n import java.io.Serializable;\n import java.util.List;\n \n-import com.b2international.snowowl.core.domain.SetMapping;\n+import com.b2international.snowowl.core.domain.ConceptMapMapping;\n import com.google.common.collect.ImmutableList;\n import com.google.common.collect.ImmutableListMultimap;\n import com.google.common.collect.ListMultimap;\n", "next_change": {"commit": "290fa31dd9b3a9a5d2be3b14d3b18d50871b2a32", "changed_code": [{"header": "diff --git a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/compare/ConceptMapCompareResult.java b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/compare/ConceptMapCompareResult.java\nindex 1f47dba00b..99e1de6afe 100644\n--- a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/compare/ConceptMapCompareResult.java\n+++ b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/compare/ConceptMapCompareResult.java\n", "chunk": "@@ -25,7 +25,7 @@ import com.google.common.collect.ListMultimap;\n /**\n  * @since 7.8\n  */\n-final public class ConceptMapCompareResult implements Serializable {\n+public final class ConceptMapCompareResult implements Serializable {\n \tprivate static final long serialVersionUID = 1L;\n \t\n \tprivate final List<ConceptMapMapping> addedMembers;\n", "next_change": {"commit": "406373ec1c2e09f19dd7c3b7a9ba38045a634640", "changed_code": [{"header": "diff --git a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/compare/ConceptMapCompareResult.java b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/compare/ConceptMapCompareResult.java\nindex 99e1de6afe..bcc4694966 100644\n--- a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/compare/ConceptMapCompareResult.java\n+++ b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/compare/ConceptMapCompareResult.java\n", "chunk": "@@ -28,14 +28,34 @@ import com.google.common.collect.ListMultimap;\n public final class ConceptMapCompareResult implements Serializable {\n \tprivate static final long serialVersionUID = 1L;\n \t\n+\tpublic static final int DEFAULT_LIMIT_PER_COMPARE_CATEGORY = 5000;\n+\t\n+\tprivate final int totalAdded;\n+\tprivate final int totalRemoved;\n+\tprivate final int totalChanged;\n+\t\n \tprivate final List<ConceptMapMapping> addedMembers;\n \tprivate final List<ConceptMapMapping> removedMembers;\n \tprivate final ListMultimap<ConceptMapMapping, ConceptMapMapping> changedMembers;\n \t\n-\tpublic ConceptMapCompareResult(List<ConceptMapMapping> addedMembers, List<ConceptMapMapping> removedMembers, ListMultimap<ConceptMapMapping, ConceptMapMapping> changedMembers) {\n-\t\tthis.addedMembers = ImmutableList.copyOf(addedMembers);\n-\t\tthis.removedMembers = ImmutableList.copyOf(removedMembers);\n-\t\tthis.changedMembers = ImmutableListMultimap.copyOf(changedMembers);\n+\tpublic ConceptMapCompareResult(List<ConceptMapMapping> addedMembers, List<ConceptMapMapping> removedMembers, ListMultimap<ConceptMapMapping, ConceptMapMapping> changedMembers, int limit) {\n+\t\tthis.addedMembers = ImmutableList.copyOf(limit < addedMembers.size() ? addedMembers.subList(0, limit) : addedMembers);\n+\t\tthis.removedMembers = ImmutableList.copyOf(limit < removedMembers.size() ? removedMembers.subList(0, limit) : removedMembers);\n+\t\t\n+\t\tImmutableListMultimap.Builder<ConceptMapMapping, ConceptMapMapping> builder = ImmutableListMultimap.builder();\n+\t\tint noOfChangedMappings = 0;\n+\t\tfor (ConceptMapMapping key : changedMembers.keySet()) {\n+\t\t\tif (noOfChangedMappings < DEFAULT_LIMIT_PER_COMPARE_CATEGORY) {\n+\t\t\t\tList<ConceptMapMapping> memberChanges = changedMembers.get(key);\n+\t\t\t\tbuilder.putAll(key, memberChanges);\n+\t\t\t\tnoOfChangedMappings += memberChanges.size();\n+\t\t\t}\n+\t\t}\n+\t\tthis.changedMembers = builder.build();\n+\t\t\n+\t\tthis.totalAdded = addedMembers.size();\n+\t\tthis.totalRemoved = removedMembers.size();\n+\t\tthis.totalChanged = changedMembers.values().size();\n \t}\n \t\n \tpublic List<ConceptMapMapping> getAddedMembers() {\n", "next_change": {"commit": "311bc8bd7f35266ba3699e6846dd76aab2e5ed0b", "changed_code": [{"header": "diff --git a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/compare/ConceptMapCompareResult.java b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/compare/ConceptMapCompareResult.java\nindex bcc4694966..ede4705b75 100644\n--- a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/compare/ConceptMapCompareResult.java\n+++ b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/compare/ConceptMapCompareResult.java\n", "chunk": "@@ -28,34 +28,16 @@ import com.google.common.collect.ListMultimap;\n public final class ConceptMapCompareResult implements Serializable {\n \tprivate static final long serialVersionUID = 1L;\n \t\n-\tpublic static final int DEFAULT_LIMIT_PER_COMPARE_CATEGORY = 5000;\n-\t\n-\tprivate final int totalAdded;\n-\tprivate final int totalRemoved;\n-\tprivate final int totalChanged;\n-\t\n \tprivate final List<ConceptMapMapping> addedMembers;\n \tprivate final List<ConceptMapMapping> removedMembers;\n \tprivate final ListMultimap<ConceptMapMapping, ConceptMapMapping> changedMembers;\n+\tprivate final List<ConceptMapMapping> unChangedMembers;\n \t\n-\tpublic ConceptMapCompareResult(List<ConceptMapMapping> addedMembers, List<ConceptMapMapping> removedMembers, ListMultimap<ConceptMapMapping, ConceptMapMapping> changedMembers, int limit) {\n-\t\tthis.addedMembers = ImmutableList.copyOf(limit < addedMembers.size() ? addedMembers.subList(0, limit) : addedMembers);\n-\t\tthis.removedMembers = ImmutableList.copyOf(limit < removedMembers.size() ? removedMembers.subList(0, limit) : removedMembers);\n-\t\t\n-\t\tImmutableListMultimap.Builder<ConceptMapMapping, ConceptMapMapping> builder = ImmutableListMultimap.builder();\n-\t\tint noOfChangedMappings = 0;\n-\t\tfor (ConceptMapMapping key : changedMembers.keySet()) {\n-\t\t\tif (noOfChangedMappings < DEFAULT_LIMIT_PER_COMPARE_CATEGORY) {\n-\t\t\t\tList<ConceptMapMapping> memberChanges = changedMembers.get(key);\n-\t\t\t\tbuilder.putAll(key, memberChanges);\n-\t\t\t\tnoOfChangedMappings += memberChanges.size();\n-\t\t\t}\n-\t\t}\n-\t\tthis.changedMembers = builder.build();\n-\t\t\n-\t\tthis.totalAdded = addedMembers.size();\n-\t\tthis.totalRemoved = removedMembers.size();\n-\t\tthis.totalChanged = changedMembers.values().size();\n+\tpublic ConceptMapCompareResult(List<ConceptMapMapping> addedMembers, List<ConceptMapMapping> removedMembers, ListMultimap<ConceptMapMapping, ConceptMapMapping> changedMembers, List<ConceptMapMapping> unChangedMembers) {\n+\t\tthis.addedMembers = ImmutableList.copyOf(addedMembers);\n+\t\tthis.removedMembers = ImmutableList.copyOf(removedMembers);\n+\t\tthis.changedMembers = ImmutableListMultimap.copyOf(changedMembers);\n+\t\tthis.unChangedMembers = ImmutableList.copyOf(unChangedMembers);\n \t}\n \t\n \tpublic List<ConceptMapMapping> getAddedMembers() {\n", "next_change": {"commit": "dc20a75dd01ad7d0fb1caa4c5e9d552e92dfd645", "changed_code": [{"header": "diff --git a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/compare/ConceptMapCompareResult.java b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/compare/ConceptMapCompareResult.java\nindex ede4705b75..7606600a5c 100644\n--- a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/compare/ConceptMapCompareResult.java\n+++ b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/compare/ConceptMapCompareResult.java\n", "chunk": "@@ -15,29 +15,43 @@\n  */\n package com.b2international.snowowl.core.compare;\n \n+import static java.util.stream.Collectors.toList;\n+\n import java.io.Serializable;\n import java.util.List;\n \n import com.b2international.snowowl.core.domain.ConceptMapMapping;\n-import com.google.common.collect.ImmutableList;\n-import com.google.common.collect.ImmutableListMultimap;\n-import com.google.common.collect.ListMultimap;\n+import com.google.common.collect.ImmutableMultimap;\n+import com.google.common.collect.ImmutableMultimap.Builder;\n+import com.google.common.collect.Multimap;\n /**\n  * @since 7.8\n  */\n public final class ConceptMapCompareResult implements Serializable {\n+\t\n \tprivate static final long serialVersionUID = 1L;\n \t\n+\tprivate final int totalAdded;\n+\tprivate final int totalRemoved;\n+\tprivate final int totalChanged;\n+\t\n \tprivate final List<ConceptMapMapping> addedMembers;\n \tprivate final List<ConceptMapMapping> removedMembers;\n-\tprivate final ListMultimap<ConceptMapMapping, ConceptMapMapping> changedMembers;\n-\tprivate final List<ConceptMapMapping> unChangedMembers;\n-\t\n-\tpublic ConceptMapCompareResult(List<ConceptMapMapping> addedMembers, List<ConceptMapMapping> removedMembers, ListMultimap<ConceptMapMapping, ConceptMapMapping> changedMembers, List<ConceptMapMapping> unChangedMembers) {\n-\t\tthis.addedMembers = ImmutableList.copyOf(addedMembers);\n-\t\tthis.removedMembers = ImmutableList.copyOf(removedMembers);\n-\t\tthis.changedMembers = ImmutableListMultimap.copyOf(changedMembers);\n-\t\tthis.unChangedMembers = ImmutableList.copyOf(unChangedMembers);\n+\tprivate final Multimap<ConceptMapMapping, ConceptMapMapping> changedMembers;\n+\t\n+\tpublic ConceptMapCompareResult(List<ConceptMapMapping> addedMembers, List<ConceptMapMapping> removedMembers, Multimap<ConceptMapMapping, ConceptMapMapping> changedMembers, int limit) {\n+\t\t\n+\t\tthis.addedMembers = addedMembers.stream().limit(limit).collect(toList());\n+\t\tthis.removedMembers = removedMembers.stream().limit(limit).collect(toList());\n+\t\t\n+\t\tBuilder<ConceptMapMapping, ConceptMapMapping> limitedMembers = ImmutableMultimap.builder();\n+\t\tchangedMembers.entries().stream().limit(limit).forEach(limitedMembers::put);\n+\t\tthis.changedMembers = limitedMembers.build();\n+\t\t\n+\t\tthis.totalAdded = addedMembers.size();\n+\t\tthis.totalRemoved = removedMembers.size();\n+\t\tthis.totalChanged = changedMembers.values().size();\n+\t\t\n \t}\n \t\n \tpublic List<ConceptMapMapping> getAddedMembers() {\n", "next_change": {"commit": "fde3e5ade1b1950dd8edaad6fb506beb979aa223", "changed_code": [{"header": "diff --git a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/compare/ConceptMapCompareResult.java b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/compare/ConceptMapCompareResult.java\nindex 7606600a5c..e1b87d54a2 100644\n--- a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/compare/ConceptMapCompareResult.java\n+++ b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/compare/ConceptMapCompareResult.java\n", "chunk": "@@ -51,6 +52,7 @@ public final class ConceptMapCompareResult implements Serializable {\n \t\tthis.totalAdded = addedMembers.size();\n \t\tthis.totalRemoved = removedMembers.size();\n \t\tthis.totalChanged = changedMembers.values().size();\n+\t\tthis.limit = limit;\n \t\t\n \t}\n \t\n", "next_change": {"commit": "b3e49c4a6e26162c0c9f68fe0aad23af0fdf070c", "changed_code": [{"header": "diff --git a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/compare/ConceptMapCompareResult.java b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/compare/ConceptMapCompareResult.java\nindex e1b87d54a2..2fd0f54241 100644\n--- a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/compare/ConceptMapCompareResult.java\n+++ b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/compare/ConceptMapCompareResult.java\n", "chunk": "@@ -48,12 +51,12 @@ public final class ConceptMapCompareResult implements Serializable {\n \t\tBuilder<ConceptMapMapping, ConceptMapMapping> limitedMembers = ImmutableMultimap.builder();\n \t\tchangedMembers.entries().stream().limit(limit).forEach(limitedMembers::put);\n \t\tthis.changedMembers = limitedMembers.build();\n+\t\tthis.unChangedMembers = ImmutableList.copyOf(unChangedMembers);\n \t\t\n \t\tthis.totalAdded = addedMembers.size();\n \t\tthis.totalRemoved = removedMembers.size();\n \t\tthis.totalChanged = changedMembers.values().size();\n \t\tthis.limit = limit;\n-\t\t\n \t}\n \t\n \tpublic List<ConceptMapMapping> getAddedMembers() {\n", "next_change": {"commit": "3707b08f083e26656a5021db218b6b530c41b71b", "changed_code": [{"header": "diff --git a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/compare/ConceptMapCompareResult.java b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/compare/ConceptMapCompareResult.java\nindex 2fd0f54241..01996b645a 100644\n--- a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/compare/ConceptMapCompareResult.java\n+++ b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/compare/ConceptMapCompareResult.java\n", "chunk": "@@ -40,22 +38,20 @@ public final class ConceptMapCompareResult implements Serializable {\n \tprivate final List<ConceptMapMapping> addedMembers;\n \tprivate final List<ConceptMapMapping> removedMembers;\n \t\n-\tprivate final Multimap<ConceptMapMapping, ConceptMapMapping> changedMembers;\n-\tprivate final List<ConceptMapMapping> unChangedMembers;\n+\tprivate final List<ConceptMapMapping> changedMembers;\n+\tprivate final List<ConceptMapMapping> unchangedMembers;\n \t\n-\tpublic ConceptMapCompareResult(List<ConceptMapMapping> addedMembers, List<ConceptMapMapping> removedMembers, Multimap<ConceptMapMapping, ConceptMapMapping> changedMembers, List<ConceptMapMapping> unChangedMembers, int limit) {\n+\tpublic ConceptMapCompareResult(List<ConceptMapMapping> addedMembers, List<ConceptMapMapping> removedMembers, List<ConceptMapMapping> changedMembers, Set<ConceptMapMapping> unchangedMembers, int limit) {\n \t\t\n \t\tthis.addedMembers = addedMembers.stream().limit(limit).collect(toList());\n \t\tthis.removedMembers = removedMembers.stream().limit(limit).collect(toList());\n \t\t\n-\t\tBuilder<ConceptMapMapping, ConceptMapMapping> limitedMembers = ImmutableMultimap.builder();\n-\t\tchangedMembers.entries().stream().limit(limit).forEach(limitedMembers::put);\n-\t\tthis.changedMembers = limitedMembers.build();\n-\t\tthis.unChangedMembers = ImmutableList.copyOf(unChangedMembers);\n+\t\tthis.changedMembers = changedMembers.stream().limit(limit).collect(toList());\n+\t\tthis.unchangedMembers = ImmutableList.copyOf(unchangedMembers);\n \t\t\n \t\tthis.totalAdded = addedMembers.size();\n \t\tthis.totalRemoved = removedMembers.size();\n-\t\tthis.totalChanged = changedMembers.values().size();\n+\t\tthis.totalChanged = changedMembers.size()/2;\n \t\tthis.limit = limit;\n \t}\n \t\n", "next_change": {"commit": "54ab82037b70c5bcb9460421a993d8cf2f9c5648", "changed_code": [{"header": "diff --git a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/compare/ConceptMapCompareResult.java b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/compare/ConceptMapCompareResult.java\nindex 01996b645a..622c5be966 100644\n--- a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/compare/ConceptMapCompareResult.java\n+++ b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/compare/ConceptMapCompareResult.java\n", "chunk": "@@ -43,15 +44,16 @@ public final class ConceptMapCompareResult implements Serializable {\n \t\n \tpublic ConceptMapCompareResult(List<ConceptMapMapping> addedMembers, List<ConceptMapMapping> removedMembers, List<ConceptMapMapping> changedMembers, Set<ConceptMapMapping> unchangedMembers, int limit) {\n \t\t\n-\t\tthis.addedMembers = addedMembers.stream().limit(limit).collect(toList());\n-\t\tthis.removedMembers = removedMembers.stream().limit(limit).collect(toList());\n+\t\tthis.addedMembers = addedMembers.stream().collect(toList());\n+\t\tthis.removedMembers = removedMembers.stream().collect(toList());\n \t\t\n-\t\tthis.changedMembers = changedMembers.stream().limit(limit).collect(toList());\n+\t\tthis.changedMembers = changedMembers.stream().collect(toList());\n \t\tthis.unchangedMembers = ImmutableList.copyOf(unchangedMembers);\n \t\t\n \t\tthis.totalAdded = addedMembers.size();\n \t\tthis.totalRemoved = removedMembers.size();\n \t\tthis.totalChanged = changedMembers.size()/2;\n+\t\tthis.totalUnchanged = unchangedMembers.size();\n \t\tthis.limit = limit;\n \t}\n \t\n", "next_change": {"commit": "2c53eba8f1950333bdc6dc23ac783a05c965d203", "changed_code": [{"header": "diff --git a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/compare/ConceptMapCompareResult.java b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/compare/ConceptMapCompareResult.java\nindex 622c5be966..28ce294714 100644\n--- a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/compare/ConceptMapCompareResult.java\n+++ b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/compare/ConceptMapCompareResult.java\n", "chunk": "@@ -42,18 +38,19 @@ public final class ConceptMapCompareResult implements Serializable {\n \tprivate final List<ConceptMapMapping> changedMembers;\n \tprivate final List<ConceptMapMapping> unchangedMembers;\n \t\n-\tpublic ConceptMapCompareResult(List<ConceptMapMapping> addedMembers, List<ConceptMapMapping> removedMembers, List<ConceptMapMapping> changedMembers, Set<ConceptMapMapping> unchangedMembers, int limit) {\n+\tpublic ConceptMapCompareResult(List<ConceptMapMapping> addedMembers, List<ConceptMapMapping> removedMembers, List<ConceptMapMapping> changedMembers, List<ConceptMapMapping> unchangedMembers,\n+\t\t\tint totalAdded, int totalRemoved, int totalChanged, int totalUnchanged, int limit) {\n \t\t\n-\t\tthis.addedMembers = addedMembers.stream().collect(toList());\n-\t\tthis.removedMembers = removedMembers.stream().collect(toList());\n+\t\tthis.addedMembers = List.copyOf(addedMembers);\n+\t\tthis.removedMembers = List.copyOf(removedMembers);\n \t\t\n-\t\tthis.changedMembers = changedMembers.stream().collect(toList());\n-\t\tthis.unchangedMembers = ImmutableList.copyOf(unchangedMembers);\n+\t\tthis.changedMembers = List.copyOf(changedMembers);\n+\t\tthis.unchangedMembers = List.copyOf(unchangedMembers);\n \t\t\n-\t\tthis.totalAdded = addedMembers.size();\n-\t\tthis.totalRemoved = removedMembers.size();\n-\t\tthis.totalChanged = changedMembers.size()/2;\n-\t\tthis.totalUnchanged = unchangedMembers.size();\n+\t\tthis.totalAdded = totalAdded;\n+\t\tthis.totalRemoved = totalRemoved;\n+\t\tthis.totalChanged = totalChanged;\n+\t\tthis.totalUnchanged = totalUnchanged;\n \t\tthis.limit = limit;\n \t}\n \t\n", "next_change": {"commit": "aea24e0a46dc3dc263fc59982f497f3e96b286ad", "changed_code": [{"header": "diff --git a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/compare/ConceptMapCompareResult.java b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/compare/ConceptMapCompareResult.java\nindex 28ce294714..41d49b5f25 100644\n--- a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/compare/ConceptMapCompareResult.java\n+++ b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/compare/ConceptMapCompareResult.java\n", "chunk": "@@ -15,61 +15,32 @@\n  */\n package com.b2international.snowowl.core.compare;\n \n-import java.io.Serializable;\n import java.util.List;\n \n-import com.b2international.snowowl.core.domain.ConceptMapMapping;\n+import com.b2international.snowowl.core.domain.CollectionResource;\n /**\n  * @since 7.8\n  */\n-public final class ConceptMapCompareResult implements Serializable {\n+public final class ConceptMapCompareResult extends CollectionResource<ConceptMapCompareResultItem> {\n \t\n \tprivate static final long serialVersionUID = 1L;\n \t\n+\tprivate final int limit;\n+\t\n \tprivate final int totalAdded;\n \tprivate final int totalRemoved;\n \tprivate final int totalChanged;\n \tprivate final int totalUnchanged;\n-\tprivate final int limit;\n-\t\n-\tprivate final List<ConceptMapMapping> addedMembers;\n-\tprivate final List<ConceptMapMapping> removedMembers;\n-\t\n-\tprivate final List<ConceptMapMapping> changedMembers;\n-\tprivate final List<ConceptMapMapping> unchangedMembers;\n-\t\n-\tpublic ConceptMapCompareResult(List<ConceptMapMapping> addedMembers, List<ConceptMapMapping> removedMembers, List<ConceptMapMapping> changedMembers, List<ConceptMapMapping> unchangedMembers,\n-\t\t\tint totalAdded, int totalRemoved, int totalChanged, int totalUnchanged, int limit) {\n-\t\t\n-\t\tthis.addedMembers = List.copyOf(addedMembers);\n-\t\tthis.removedMembers = List.copyOf(removedMembers);\n-\t\t\n-\t\tthis.changedMembers = List.copyOf(changedMembers);\n-\t\tthis.unchangedMembers = List.copyOf(unchangedMembers);\n-\t\t\n+\n+\tpublic ConceptMapCompareResult(List<ConceptMapCompareResultItem> items, int totalAdded, int totalRemoved, int totalChanged, int totalUnchanged, int limit) {\n+\t\tsuper(items);\n \t\tthis.totalAdded = totalAdded;\n \t\tthis.totalRemoved = totalRemoved;\n \t\tthis.totalChanged = totalChanged;\n \t\tthis.totalUnchanged = totalUnchanged;\n \t\tthis.limit = limit;\n \t}\n-\t\n-\tpublic List<ConceptMapMapping> getAddedMembers() {\n-\t\treturn addedMembers;\n-\t}\n-\t\n-\tpublic List<ConceptMapMapping> getRemovedMembers() {\n-\t\treturn removedMembers;\n-\t}\n-\t\n-\tpublic List<ConceptMapMapping> getUnchangedMembers() {\n-\t\treturn unchangedMembers;\n-\t}\n-\t\n-\tpublic List<ConceptMapMapping> getChangedMembers() {\n-\t\treturn changedMembers;\n-\t}\n-\t\n+\n \tpublic int getTotalAdded() {\n \t\treturn totalAdded;\n \t}\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"header": "diff --git a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/compare/ConceptMapCompareResult.java b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/compare/ConceptMapCompareResult.java\nindex 5f8d38f23c..1f47dba00b 100644\n--- a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/compare/ConceptMapCompareResult.java\n+++ b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/compare/ConceptMapCompareResult.java\n", "chunk": "@@ -28,25 +28,25 @@ import com.google.common.collect.ListMultimap;\n final public class ConceptMapCompareResult implements Serializable {\n \tprivate static final long serialVersionUID = 1L;\n \t\n-\tprivate final List<SetMapping> addedMembers;\n-\tprivate final List<SetMapping> removedMembers;\n-\tprivate final ListMultimap<SetMapping, SetMapping> changedMembers;\n+\tprivate final List<ConceptMapMapping> addedMembers;\n+\tprivate final List<ConceptMapMapping> removedMembers;\n+\tprivate final ListMultimap<ConceptMapMapping, ConceptMapMapping> changedMembers;\n \t\n-\tpublic ConceptMapCompareResult(List<SetMapping> addedMembers, List<SetMapping> removedMembers, ListMultimap<SetMapping, SetMapping> changedMembers) {\n+\tpublic ConceptMapCompareResult(List<ConceptMapMapping> addedMembers, List<ConceptMapMapping> removedMembers, ListMultimap<ConceptMapMapping, ConceptMapMapping> changedMembers) {\n \t\tthis.addedMembers = ImmutableList.copyOf(addedMembers);\n \t\tthis.removedMembers = ImmutableList.copyOf(removedMembers);\n \t\tthis.changedMembers = ImmutableListMultimap.copyOf(changedMembers);\n \t}\n \t\n-\tpublic List<SetMapping> getAddedMembers() {\n+\tpublic List<ConceptMapMapping> getAddedMembers() {\n \t\treturn addedMembers;\n \t}\n \t\n-\tpublic List<SetMapping> getRemovedMembers() {\n+\tpublic List<ConceptMapMapping> getRemovedMembers() {\n \t\treturn removedMembers;\n \t}\n \t\n-\tpublic ListMultimap<SetMapping, SetMapping> getChangedMembers() {\n+\tpublic ListMultimap<ConceptMapMapping, ConceptMapMapping> getChangedMembers() {\n \t\treturn changedMembers;\n \t}\n \n", "next_change": {"commit": "406373ec1c2e09f19dd7c3b7a9ba38045a634640", "changed_code": [{"header": "diff --git a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/compare/ConceptMapCompareResult.java b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/compare/ConceptMapCompareResult.java\nindex 1f47dba00b..bcc4694966 100644\n--- a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/compare/ConceptMapCompareResult.java\n+++ b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/compare/ConceptMapCompareResult.java\n", "chunk": "@@ -49,5 +69,17 @@ final public class ConceptMapCompareResult implements Serializable {\n \tpublic ListMultimap<ConceptMapMapping, ConceptMapMapping> getChangedMembers() {\n \t\treturn changedMembers;\n \t}\n-\n+\t\n+\tpublic int getTotalAdded() {\n+\t\treturn totalAdded;\n+\t}\n+\t\n+\tpublic int getTotalRemoved() {\n+\t\treturn totalRemoved;\n+\t}\n+\t\n+\tpublic int getTotalChanged() {\n+\t\treturn totalChanged;\n+\t}\n+\t\n }\n", "next_change": {"commit": "311bc8bd7f35266ba3699e6846dd76aab2e5ed0b", "changed_code": [{"header": "diff --git a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/compare/ConceptMapCompareResult.java b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/compare/ConceptMapCompareResult.java\nindex bcc4694966..ede4705b75 100644\n--- a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/compare/ConceptMapCompareResult.java\n+++ b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/compare/ConceptMapCompareResult.java\n", "chunk": "@@ -66,20 +48,12 @@ public final class ConceptMapCompareResult implements Serializable {\n \t\treturn removedMembers;\n \t}\n \t\n-\tpublic ListMultimap<ConceptMapMapping, ConceptMapMapping> getChangedMembers() {\n-\t\treturn changedMembers;\n-\t}\n-\t\n-\tpublic int getTotalAdded() {\n-\t\treturn totalAdded;\n+\tpublic List<ConceptMapMapping> getUnChangedMembers() {\n+\t\treturn unChangedMembers;\n \t}\n \t\n-\tpublic int getTotalRemoved() {\n-\t\treturn totalRemoved;\n-\t}\n-\t\n-\tpublic int getTotalChanged() {\n-\t\treturn totalChanged;\n+\tpublic ListMultimap<ConceptMapMapping, ConceptMapMapping> getChangedMembers() {\n+\t\treturn changedMembers;\n \t}\n-\t\n+\n }\n", "next_change": {"commit": "dc20a75dd01ad7d0fb1caa4c5e9d552e92dfd645", "changed_code": [{"header": "diff --git a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/compare/ConceptMapCompareResult.java b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/compare/ConceptMapCompareResult.java\nindex ede4705b75..7606600a5c 100644\n--- a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/compare/ConceptMapCompareResult.java\n+++ b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/compare/ConceptMapCompareResult.java\n", "chunk": "@@ -48,12 +62,20 @@ public final class ConceptMapCompareResult implements Serializable {\n \t\treturn removedMembers;\n \t}\n \t\n-\tpublic List<ConceptMapMapping> getUnChangedMembers() {\n-\t\treturn unChangedMembers;\n+\tpublic Multimap<ConceptMapMapping, ConceptMapMapping> getChangedMembers() {\n+\t\treturn changedMembers;\n \t}\n \t\n-\tpublic ListMultimap<ConceptMapMapping, ConceptMapMapping> getChangedMembers() {\n-\t\treturn changedMembers;\n+\tpublic int getTotalAdded() {\n+\t\treturn totalAdded;\n \t}\n-\n+\t\n+\tpublic int getTotalRemoved() {\n+\t\treturn totalRemoved;\n+\t}\n+\t\n+\tpublic int getTotalChanged() {\n+\t\treturn totalChanged;\n+\t}\n+\t\n }\n", "next_change": {"commit": "fde3e5ade1b1950dd8edaad6fb506beb979aa223", "changed_code": [{"header": "diff --git a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/compare/ConceptMapCompareResult.java b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/compare/ConceptMapCompareResult.java\nindex 7606600a5c..e1b87d54a2 100644\n--- a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/compare/ConceptMapCompareResult.java\n+++ b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/compare/ConceptMapCompareResult.java\n", "chunk": "@@ -78,4 +80,8 @@ public final class ConceptMapCompareResult implements Serializable {\n \t\treturn totalChanged;\n \t}\n \t\n+\tpublic int getLimit() {\n+\t\treturn limit;\n+\t}\n+\t\n }\n", "next_change": {"commit": "54ab82037b70c5bcb9460421a993d8cf2f9c5648", "changed_code": [{"header": "diff --git a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/compare/ConceptMapCompareResult.java b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/compare/ConceptMapCompareResult.java\nindex e1b87d54a2..622c5be966 100644\n--- a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/compare/ConceptMapCompareResult.java\n+++ b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/compare/ConceptMapCompareResult.java\n", "chunk": "@@ -80,6 +85,10 @@ public final class ConceptMapCompareResult implements Serializable {\n \t\treturn totalChanged;\n \t}\n \t\n+\tpublic int getTotalUnchanged() {\n+\t\treturn totalUnchanged;\n+\t}\n+\t\n \tpublic int getLimit() {\n \t\treturn limit;\n \t}\n", "next_change": null}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc0MzAzMg==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/610#discussion_r460743032", "body": "Rename this to `ConceptMapMapping`.", "bodyText": "Rename this to ConceptMapMapping.", "bodyHTML": "<p dir=\"auto\">Rename this to <code>ConceptMapMapping</code>.</p>", "author": "cmark", "createdAt": "2020-07-27T08:53:51Z", "path": "core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/domain/SetMapping.java", "diffHunk": "@@ -0,0 +1,238 @@\n+/*\n+ * Copyright 2020 B2i Healthcare Pte Ltd, http://b2i.sg\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.b2international.snowowl.core.domain;\n+\n+import java.io.Serializable;\n+import java.util.Objects;\n+\n+import com.b2international.snowowl.core.request.MappingCorrelation;\n+import com.b2international.snowowl.core.uri.ComponentURI;\n+import com.google.common.base.MoreObjects;\n+\n+/**\n+ * @since 7.8\n+ */\n+public final class SetMapping implements Serializable {", "originalCommit": "2e4c32c6e8053ecbafe4552a6a8d1e36ef1b0d64", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgzMzc1OQ==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/610#discussion_r460833759", "bodyText": "Done", "author": "molnarlaura", "createdAt": "2020-07-27T11:48:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc0MzAzMg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc0MzU3OA==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/610#discussion_r460743578", "body": "Make Builder final as well.", "bodyText": "Make Builder final as well.", "bodyHTML": "<p dir=\"auto\">Make Builder final as well.</p>", "author": "cmark", "createdAt": "2020-07-27T08:54:48Z", "path": "core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/domain/SetMapping.java", "diffHunk": "@@ -0,0 +1,238 @@\n+/*\n+ * Copyright 2020 B2i Healthcare Pte Ltd, http://b2i.sg\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.b2international.snowowl.core.domain;\n+\n+import java.io.Serializable;\n+import java.util.Objects;\n+\n+import com.b2international.snowowl.core.request.MappingCorrelation;\n+import com.b2international.snowowl.core.uri.ComponentURI;\n+import com.google.common.base.MoreObjects;\n+\n+/**\n+ * @since 7.8\n+ */\n+public final class SetMapping implements Serializable {\n+\t\n+\tprivate static final long serialVersionUID = 1L;\n+\t\n+\tpublic static Builder builder() {\n+\t\treturn new Builder();\n+\t}\n+\t\n+\tpublic static class Builder {", "originalCommit": "2e4c32c6e8053ecbafe4552a6a8d1e36ef1b0d64", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg0OTg5MA==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/610#discussion_r460849890", "bodyText": "Done", "author": "molnarlaura", "createdAt": "2020-07-27T12:20:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc0MzU3OA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc0NDA1Ng==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/610#discussion_r460744056", "body": "Rename this field to `active`.", "bodyText": "Rename this field to active.", "bodyHTML": "<p dir=\"auto\">Rename this field to <code>active</code>.</p>", "author": "cmark", "createdAt": "2020-07-27T08:55:27Z", "path": "core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/domain/SetMapping.java", "diffHunk": "@@ -0,0 +1,238 @@\n+/*\n+ * Copyright 2020 B2i Healthcare Pte Ltd, http://b2i.sg\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.b2international.snowowl.core.domain;\n+\n+import java.io.Serializable;\n+import java.util.Objects;\n+\n+import com.b2international.snowowl.core.request.MappingCorrelation;\n+import com.b2international.snowowl.core.uri.ComponentURI;\n+import com.google.common.base.MoreObjects;\n+\n+/**\n+ * @since 7.8\n+ */\n+public final class SetMapping implements Serializable {\n+\t\n+\tprivate static final long serialVersionUID = 1L;\n+\t\n+\tpublic static Builder builder() {\n+\t\treturn new Builder();\n+\t}\n+\t\n+\tpublic static class Builder {\n+\t\t\n+\t\tprivate String sourceIconId;\n+\t\tprivate String sourceTerm;\n+\t\tprivate ComponentURI sourceComponentURI;\n+\t\t\n+\t\tprivate String targetTerm;\n+\t\tprivate ComponentURI targetComponentURI = ComponentURI.UNSPECIFIED;\n+\t\t\n+\t\tprivate boolean isActive;", "originalCommit": "2e4c32c6e8053ecbafe4552a6a8d1e36ef1b0d64", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg1MDk2Nw==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/610#discussion_r460850967", "bodyText": "Done", "author": "molnarlaura", "createdAt": "2020-07-27T12:22:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc0NDA1Ng=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc0NDYzNg==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/610#discussion_r460744636", "body": "Make these fields `final` as well.", "bodyText": "Make these fields final as well.", "bodyHTML": "<p dir=\"auto\">Make these fields <code>final</code> as well.</p>", "author": "cmark", "createdAt": "2020-07-27T08:56:21Z", "path": "core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/domain/SetMapping.java", "diffHunk": "@@ -0,0 +1,238 @@\n+/*\n+ * Copyright 2020 B2i Healthcare Pte Ltd, http://b2i.sg\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.b2international.snowowl.core.domain;\n+\n+import java.io.Serializable;\n+import java.util.Objects;\n+\n+import com.b2international.snowowl.core.request.MappingCorrelation;\n+import com.b2international.snowowl.core.uri.ComponentURI;\n+import com.google.common.base.MoreObjects;\n+\n+/**\n+ * @since 7.8\n+ */\n+public final class SetMapping implements Serializable {\n+\t\n+\tprivate static final long serialVersionUID = 1L;\n+\t\n+\tpublic static Builder builder() {\n+\t\treturn new Builder();\n+\t}\n+\t\n+\tpublic static class Builder {\n+\t\t\n+\t\tprivate String sourceIconId;\n+\t\tprivate String sourceTerm;\n+\t\tprivate ComponentURI sourceComponentURI;\n+\t\t\n+\t\tprivate String targetTerm;\n+\t\tprivate ComponentURI targetComponentURI = ComponentURI.UNSPECIFIED;\n+\t\t\n+\t\tprivate boolean isActive;\n+\t\tprivate MappingCorrelation mappingCorrelation = MappingCorrelation.NOT_SPECIFIED;\n+\t\t\n+\t\tprivate Integer mapGroup = 0;\n+\t\tprivate Integer mapPriority = 0;\n+\t\tprivate String mapRule = \"\";\n+\t\tprivate String mapAdvice = \"\";\n+\t\t\n+\t\tpublic Builder sourceTerm(final String sourceTerm) {\n+\t\t\tthis.sourceTerm = sourceTerm;\n+\t\t\treturn this;\n+\t\t}\n+\t\t\n+\t\tpublic Builder sourceIconId(final String sourceIconId) {\n+\t\t\tthis.sourceIconId = sourceIconId;\n+\t\t\treturn this;\n+\t\t}\n+\t\t\n+\t\tpublic Builder sourceComponentURI(final ComponentURI sourceComponentURI) {\n+\t\t\tthis.sourceComponentURI = sourceComponentURI;\n+\t\t\treturn this;\n+\t\t}\n+\t\t\n+\t\tpublic Builder targetTerm(final String targetTerm) {\n+\t\t\tthis.targetTerm = targetTerm;\n+\t\t\treturn this;\n+\t\t}\n+\t\t\n+\t\tpublic Builder targetComponentURI(final ComponentURI targetComponentURI) {\n+\t\t\tthis.targetComponentURI = targetComponentURI;\n+\t\t\treturn this;\n+\t\t}\n+\t\t\n+\t\tpublic Builder active(final boolean isActive) {\n+\t\t\tthis.isActive = isActive;\n+\t\t\treturn this;\n+\t\t}\n+\t\t\n+\t\tpublic Builder mappingCorrelation(final MappingCorrelation mappingCorrelation) {\n+\t\t\tthis.mappingCorrelation = mappingCorrelation;\n+\t\t\treturn this;\n+\t\t}\n+\t\t\n+\t\tpublic Builder mapGroup(final Integer mapGroup) {\n+\t\t\tthis.mapGroup = mapGroup;\n+\t\t\treturn this;\n+\t\t}\n+\t\t\n+\t\tpublic Builder mapPriority(final Integer mapPriority) {\n+\t\t\tthis.mapPriority = mapPriority;\n+\t\t\treturn this;\n+\t\t}\n+\t\t\n+\t\tpublic Builder mapRule(final String mapRule) {\n+\t\t\tthis.mapRule = mapRule;\n+\t\t\treturn this;\n+\t\t}\n+\t\t\n+\t\tpublic Builder mapAdvice(final String mapAdvice) {\n+\t\t\tthis.mapAdvice = mapAdvice;\n+\t\t\treturn this;\n+\t\t}\n+\t\t\n+\t\tpublic SetMapping build() {\n+\t\t\treturn new SetMapping(sourceIconId, sourceTerm, sourceComponentURI, \n+\t\t\t\t\ttargetTerm, targetComponentURI, isActive, mappingCorrelation, mapGroup, mapPriority, mapRule, mapAdvice);\n+\t\t}\n+\t\n+\t}\n+\t\n+\tprivate final String sourceIconId;\n+\tprivate final String sourceTerm;\n+\tprivate final ComponentURI sourceComponentURI;\n+\t\n+\tprivate final String targetTerm;\n+\tprivate final ComponentURI targetComponentURI;\n+\t\n+\tprivate final boolean isActive;\n+\tprivate final MappingCorrelation mappingCorrelation;\n+\t\n+\tprivate Integer mapGroup;", "originalCommit": "2e4c32c6e8053ecbafe4552a6a8d1e36ef1b0d64", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg1MTM5MQ==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/610#discussion_r460851391", "bodyText": "Done", "author": "molnarlaura", "createdAt": "2020-07-27T12:23:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc0NDYzNg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc0NDgyNw==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/610#discussion_r460744827", "body": "Rename this to `ConceptMapMappings`.", "bodyText": "Rename this to ConceptMapMappings.", "bodyHTML": "<p dir=\"auto\">Rename this to <code>ConceptMapMappings</code>.</p>", "author": "cmark", "createdAt": "2020-07-27T08:56:42Z", "path": "core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/domain/SetMappings.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2020 B2i Healthcare Pte Ltd, http://b2i.sg\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.b2international.snowowl.core.domain;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+/**\n+ * @since 7.8\n+ */\n+public final class SetMappings extends PageableCollectionResource<SetMapping> {", "originalCommit": "2e4c32c6e8053ecbafe4552a6a8d1e36ef1b0d64", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgzMzgxNQ==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/610#discussion_r460833815", "bodyText": "Done", "author": "molnarlaura", "createdAt": "2020-07-27T11:48:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc0NDgyNw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc0NTI5OQ==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/610#discussion_r460745299", "body": "Rename method to `getConceptMapMappingSearchRequestEvaluator()`", "bodyText": "Rename method to getConceptMapMappingSearchRequestEvaluator()", "bodyHTML": "<p dir=\"auto\">Rename method to <code>getConceptMapMappingSearchRequestEvaluator()</code></p>", "author": "cmark", "createdAt": "2020-07-27T08:57:25Z", "path": "core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/repository/TerminologyRepositoryPlugin.java", "diffHunk": "@@ -151,6 +155,16 @@ protected SetMemberSearchRequestEvaluator getMemberSearchRequestEvaluator() {\n \t\treturn SetMemberSearchRequestEvaluator.NOOP;\n \t}\n \t\n+\t/**\n+\t * An evaluator that can evaluate generic {@link MappingSearchRequest member search requests}. \n+\t * @return a {@link SetMappingSearchRequestEvaluator} instance\n+\t * @see MappingSearchRequestBuilder\n+\t * @see MappingSearchRequest\n+\t */\n+\tprotected SetMappingSearchRequestEvaluator getMappingSearchRequestEvaluator() {", "originalCommit": "2e4c32c6e8053ecbafe4552a6a8d1e36ef1b0d64", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgzNDYxNw==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/610#discussion_r460834617", "bodyText": "Done", "author": "molnarlaura", "createdAt": "2020-07-27T11:49:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc0NTI5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "f1589ded589b03f8264d014dcc03ceeba22e200a", "changed_code": [{"header": "diff --git a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/repository/TerminologyRepositoryPlugin.java b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/repository/TerminologyRepositoryPlugin.java\nindex ab0ee36249..e28524ec5c 100644\n--- a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/repository/TerminologyRepositoryPlugin.java\n+++ b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/repository/TerminologyRepositoryPlugin.java\n", "chunk": "@@ -157,12 +157,12 @@ public abstract class TerminologyRepositoryPlugin extends Plugin implements Term\n \t\n \t/**\n \t * An evaluator that can evaluate generic {@link MappingSearchRequest member search requests}. \n-\t * @return a {@link SetMappingSearchRequestEvaluator} instance\n+\t * @return a {@link ConceptMapMappingSearchRequestEvaluator} instance\n \t * @see MappingSearchRequestBuilder\n \t * @see MappingSearchRequest\n \t */\n-\tprotected SetMappingSearchRequestEvaluator getMappingSearchRequestEvaluator() {\n-\t\treturn SetMappingSearchRequestEvaluator.NOOP;\n+\tprotected ConceptMapMappingSearchRequestEvaluator getConceptMapSearchRequestEvaluator() {\n+\t\treturn ConceptMapMappingSearchRequestEvaluator.NOOP;\n \t}\n \t\n \t\n", "next_change": {"commit": "b28ea6f36a1e097ea981659b14ef09e936a85538", "changed_code": [{"header": "diff --git a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/repository/TerminologyRepositoryPlugin.java b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/repository/TerminologyRepositoryPlugin.java\nindex e28524ec5c..1f3983a36c 100644\n--- a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/repository/TerminologyRepositoryPlugin.java\n+++ b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/repository/TerminologyRepositoryPlugin.java\n", "chunk": "@@ -161,7 +161,7 @@ public abstract class TerminologyRepositoryPlugin extends Plugin implements Term\n \t * @see MappingSearchRequestBuilder\n \t * @see MappingSearchRequest\n \t */\n-\tprotected ConceptMapMappingSearchRequestEvaluator getConceptMapSearchRequestEvaluator() {\n+\tprotected ConceptMapMappingSearchRequestEvaluator getConceptMapMappingSearchRequestEvaluator() {\n \t\treturn ConceptMapMappingSearchRequestEvaluator.NOOP;\n \t}\n \t\n", "next_change": {"commit": "97bf0b0b10be8443e0074f1cc0ef7e77412dd1ff", "changed_code": [{"header": "diff --git a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/repository/TerminologyRepositoryPlugin.java b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/repository/TerminologyRepositoryPlugin.java\nindex 1f3983a36c..696b90ed21 100644\n--- a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/repository/TerminologyRepositoryPlugin.java\n+++ b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/repository/TerminologyRepositoryPlugin.java\n", "chunk": "@@ -156,10 +156,10 @@ public abstract class TerminologyRepositoryPlugin extends Plugin implements Term\n \t}\n \t\n \t/**\n-\t * An evaluator that can evaluate generic {@link MappingSearchRequest member search requests}. \n+\t * An evaluator that can evaluate generic {@link ConceptMapMappingSearchRequest member search requests}. \n \t * @return a {@link ConceptMapMappingSearchRequestEvaluator} instance\n \t * @see MappingSearchRequestBuilder\n-\t * @see MappingSearchRequest\n+\t * @see ConceptMapMappingSearchRequest\n \t */\n \tprotected ConceptMapMappingSearchRequestEvaluator getConceptMapMappingSearchRequestEvaluator() {\n \t\treturn ConceptMapMappingSearchRequestEvaluator.NOOP;\n", "next_change": {"commit": "ee68596164d02ac1c8851431fd8fdcfedbe174c5", "changed_code": [{"header": "diff --git a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/repository/TerminologyRepositoryPlugin.java b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/repository/TerminologyRepositoryPlugin.java\nindex 696b90ed21..df436fdf87 100644\n--- a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/repository/TerminologyRepositoryPlugin.java\n+++ b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/repository/TerminologyRepositoryPlugin.java\n", "chunk": "@@ -158,7 +158,7 @@ public abstract class TerminologyRepositoryPlugin extends Plugin implements Term\n \t/**\n \t * An evaluator that can evaluate generic {@link ConceptMapMappingSearchRequest member search requests}. \n \t * @return a {@link ConceptMapMappingSearchRequestEvaluator} instance\n-\t * @see MappingSearchRequestBuilder\n+\t * @see ConceptMapMappingSearchRequestBuilder\n \t * @see ConceptMapMappingSearchRequest\n \t */\n \tprotected ConceptMapMappingSearchRequestEvaluator getConceptMapMappingSearchRequestEvaluator() {\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc0NTk4Ng==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/610#discussion_r460745986", "body": "Rename these variables to `changed`, `added`, `removed`.", "bodyText": "Rename these variables to changed, added, removed.", "bodyHTML": "<p dir=\"auto\">Rename these variables to <code>changed</code>, <code>added</code>, <code>removed</code>.</p>", "author": "cmark", "createdAt": "2020-07-27T08:58:33Z", "path": "core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright 2020 B2i Healthcare Pte Ltd, http://b2i.sg\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.b2international.snowowl.core.request;\n+\n+import java.util.List;\n+import java.util.Objects;\n+\n+import com.b2international.snowowl.core.codesystem.CodeSystemRequests;\n+import com.b2international.snowowl.core.compare.ConceptMapCompareResult;\n+import com.b2international.snowowl.core.domain.BranchContext;\n+import com.b2international.snowowl.core.domain.SetMapping;\n+import com.b2international.snowowl.core.domain.SetMappings;\n+import com.b2international.snowowl.core.uri.ComponentURI;\n+import com.google.common.collect.ArrayListMultimap;\n+import com.google.common.collect.ListMultimap;\n+import com.google.common.collect.Lists;\n+\n+/**\n+* @since 7.8\n+*/\n+final class ConceptMapCompareRequest extends ResourceRequest<BranchContext, ConceptMapCompareResult> {\n+\t\n+\tprivate static final long serialVersionUID = 1L;\n+\t\n+\tprivate final ComponentURI baseConceptMapURI;\n+\tprivate final ComponentURI compareConceptMapURI;\n+\t\n+\tConceptMapCompareRequest(ComponentURI baseConceptMapURI, ComponentURI compareConceptMapURI) {\n+\t\tthis.baseConceptMapURI = baseConceptMapURI;\n+\t\tthis.compareConceptMapURI = compareConceptMapURI;\n+\t}\n+\n+\t@Override\n+\tpublic ConceptMapCompareResult execute(BranchContext context) {\n+\t\t\n+\t\tList<SetMapping> baseMappings = Lists.newArrayList();\n+\t\tList<SetMapping> compareMappings = Lists.newArrayList();\n+\t\t\n+\t\tfinal SearchResourceRequestIterator<MappingSearchRequestBuilder, SetMappings> baseIterator = new SearchResourceRequestIterator<>(\n+\t\t\t\tCodeSystemRequests.prepareSearchMappings()\n+\t\t\t\t.filterBySet(baseConceptMapURI.identifier())\n+\t\t\t\t.setLocales(locales())\n+\t\t\t\t.setLimit(10_000),\n+\t\t\t\tr -> r.build().execute(context)\n+\t\t);\n+\t\t\n+\t\tbaseIterator.forEachRemaining(hits -> hits.forEach(baseMappings::add));\n+\n+\t\tfinal SearchResourceRequestIterator<MappingSearchRequestBuilder, SetMappings> compareIterator = new SearchResourceRequestIterator<>(\n+\t\t\t\tCodeSystemRequests.prepareSearchMappings()\n+\t\t\t\t.filterBySet(compareConceptMapURI.identifier())\n+\t\t\t\t.setLocales(locales())\n+\t\t\t\t.setLimit(10_000),\n+\t\t\t\tr -> r.build().execute(context)\n+\t\t);\n+\t\t\n+\t\tcompareIterator.forEachRemaining(hits -> hits.forEach(compareMappings::add));\n+\t\t\n+\t\tConceptMapCompareResult result = compareDifferents(baseMappings, compareMappings);\n+\t\treturn result; \n+\t}\n+\t\n+\tprivate ConceptMapCompareResult compareDifferents(List<SetMapping> baseSet, List<SetMapping> compareSet) {\n+\t\tListMultimap<SetMapping, SetMapping> changes = ArrayListMultimap.create();", "originalCommit": "2e4c32c6e8053ecbafe4552a6a8d1e36ef1b0d64", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgzNTIyNg==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/610#discussion_r460835226", "bodyText": "Done", "author": "molnarlaura", "createdAt": "2020-07-27T11:51:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc0NTk4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "cc2d2fb84353682193f78e2e3772b5c730f50892", "changed_code": [{"header": "diff --git a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java\nindex bd356cd2b9..2e88cb58b4 100644\n--- a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java\n+++ b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java\n", "chunk": "@@ -73,15 +73,15 @@ final class ConceptMapCompareRequest extends ResourceRequest<BranchContext, Conc\n \t\treturn result; \n \t}\n \t\n-\tprivate ConceptMapCompareResult compareDifferents(List<SetMapping> baseSet, List<SetMapping> compareSet) {\n-\t\tListMultimap<SetMapping, SetMapping> changes = ArrayListMultimap.create();\n-\t\tList<SetMapping> remove = Lists.newArrayList();\n-\t\tList<SetMapping> add = Lists.newArrayList();\n+\tprivate ConceptMapCompareResult compareDifferents(List<ConceptMapMapping> baseSet, List<ConceptMapMapping> compareSet) {\n+\t\tListMultimap<ConceptMapMapping, ConceptMapMapping> changes = ArrayListMultimap.create();\n+\t\tList<ConceptMapMapping> remove = Lists.newArrayList();\n+\t\tList<ConceptMapMapping> add = Lists.newArrayList();\n \n \t\tremove.addAll(baseSet);\n \t\tadd.addAll(compareSet);\n \n-\t\tfor (SetMapping memberA : baseSet) {\n+\t\tfor (ConceptMapMapping memberA : baseSet) {\n \t\t\tcompareSet.forEach(memberB -> {\n \t\t\t\tif (isSame(memberA, memberB)) {\n \t\t\t\t\tremove.remove(memberA);\n", "next_change": {"commit": "21a034ea2f61a1334a16723973f4b8e33158c14b", "changed_code": [{"header": "diff --git a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java\nindex 2e88cb58b4..860389cf5a 100644\n--- a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java\n+++ b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java\n", "chunk": "@@ -74,26 +74,26 @@ final class ConceptMapCompareRequest extends ResourceRequest<BranchContext, Conc\n \t}\n \t\n \tprivate ConceptMapCompareResult compareDifferents(List<ConceptMapMapping> baseSet, List<ConceptMapMapping> compareSet) {\n-\t\tListMultimap<ConceptMapMapping, ConceptMapMapping> changes = ArrayListMultimap.create();\n-\t\tList<ConceptMapMapping> remove = Lists.newArrayList();\n-\t\tList<ConceptMapMapping> add = Lists.newArrayList();\n+\t\tListMultimap<ConceptMapMapping, ConceptMapMapping> changed = ArrayListMultimap.create();\n+\t\tList<ConceptMapMapping> removed = Lists.newArrayList();\n+\t\tList<ConceptMapMapping> added = Lists.newArrayList();\n \n-\t\tremove.addAll(baseSet);\n-\t\tadd.addAll(compareSet);\n+\t\tremoved.addAll(baseSet);\n+\t\tadded.addAll(compareSet);\n \n \t\tfor (ConceptMapMapping memberA : baseSet) {\n \t\t\tcompareSet.forEach(memberB -> {\n \t\t\t\tif (isSame(memberA, memberB)) {\n-\t\t\t\t\tremove.remove(memberA);\n-\t\t\t\t\tadd.remove(memberB);\n+\t\t\t\t\tremoved.remove(memberA);\n+\t\t\t\t\tadded.remove(memberB);\n \t\t\t\t} else if (isChanged(memberA, memberB)) {\n-\t\t\t\t\tremove.remove(memberA);\n-\t\t\t\t\tadd.remove(memberB);\n-\t\t\t\t\tchanges.put(memberA, memberB);\n+\t\t\t\t\tremoved.remove(memberA);\n+\t\t\t\t\tadded.remove(memberB);\n+\t\t\t\t\tchanged.put(memberA, memberB);\n \t\t\t\t}\n \t\t\t});\n \t\t}\n-\t\treturn new ConceptMapCompareResult (add, remove, changes);\n+\t\treturn new ConceptMapCompareResult (added, removed, changed);\n \t}\n \n \tprivate boolean isSame(ConceptMapMapping memberA, ConceptMapMapping memberB) {\n", "next_change": {"commit": "897f1ca9f2de87b7e6ea4e93c71cb979b21eb146", "changed_code": [{"header": "diff --git a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java\nindex 860389cf5a..b4288317c1 100644\n--- a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java\n+++ b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java\n", "chunk": "@@ -96,7 +96,7 @@ final class ConceptMapCompareRequest extends ResourceRequest<BranchContext, Conc\n \t\treturn new ConceptMapCompareResult (added, removed, changed);\n \t}\n \n-\tprivate boolean isSame(ConceptMapMapping memberA, ConceptMapMapping memberB) {\n+\tprivate boolean isEqual(ConceptMapMapping memberA, ConceptMapMapping memberB) {\n \t\treturn isSourceEqual(memberA, memberB) && isTargetEqual(memberA, memberB);\n \t}\n \n", "next_change": {"commit": "132b0416edbc0e9646a7e70136bcc0646c00bece", "changed_code": [{"header": "diff --git a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java\nindex b4288317c1..983151b690 100644\n--- a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java\n+++ b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java\n", "chunk": "@@ -93,7 +93,7 @@ final class ConceptMapCompareRequest extends ResourceRequest<BranchContext, Conc\n \t\t\t\t}\n \t\t\t});\n \t\t}\n-\t\treturn new ConceptMapCompareResult (added, removed, changed);\n+\t\treturn new ConceptMapCompareResult(added, removed, changed);\n \t}\n \n \tprivate boolean isEqual(ConceptMapMapping memberA, ConceptMapMapping memberB) {\n", "next_change": {"commit": "125e3ba71e5982972f566a74677bd62ce721c437", "changed_code": [{"header": "diff --git a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java\nindex 983151b690..55a3e3bf4b 100644\n--- a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java\n+++ b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java\n", "chunk": "@@ -67,37 +75,41 @@ public final class ConceptMapCompareRequest extends ResourceRequest<BranchContex\n \t\t\t\tr -> r.build().execute(context)\n \t\t\t\t);\n \n-\t\tcompareIterator.forEachRemaining(hits -> hits.forEach(compareMappings::add));\n+\t\tcompareIterator.forEachRemaining(hits -> hits.forEach(hit -> {\n+\t\t\tcompareMappings.put(hit.getSourceComponentURI(), hit);\n+\t\t\tcompareURIs.add(hit.getSourceComponentURI());\n+\t\t}));\n \n-\t\tConceptMapCompareResult result = compareDifferents(baseMappings, compareMappings);\n+\t\tConceptMapCompareResult result = compareDifferences(baseMappings, baseURIs, compareMappings, compareURIs);\n \t\treturn result; \n \t}\n \t\n-\tprivate ConceptMapCompareResult compareDifferents(List<ConceptMapMapping> baseSet, List<ConceptMapMapping> compareSet) {\n-\t\tListMultimap<ConceptMapMapping, ConceptMapMapping> changed = ArrayListMultimap.create();\n-\t\tList<ConceptMapMapping> removed = Lists.newArrayList();\n-\t\tList<ConceptMapMapping> added = Lists.newArrayList();\n-\n-\t\tremoved.addAll(baseSet);\n-\t\tadded.addAll(compareSet);\n-\n-\t\tfor (ConceptMapMapping memberA : baseSet) {\n-\t\t\tcompareSet.forEach(memberB -> {\n-\t\t\t\tif (isEqual(memberA, memberB)) {\n-\t\t\t\t\tremoved.remove(memberA);\n-\t\t\t\t\tadded.remove(memberB);\n-\t\t\t\t} else if (isChanged(memberA, memberB)) {\n-\t\t\t\t\tremoved.remove(memberA);\n-\t\t\t\t\tadded.remove(memberB);\n-\t\t\t\t\tchanged.put(memberA, memberB);\n-\t\t\t\t}\n-\t\t\t});\n-\t\t}\n-\t\treturn new ConceptMapCompareResult(added, removed, changed);\n-\t}\n-\n-\tprivate boolean isEqual(ConceptMapMapping memberA, ConceptMapMapping memberB) {\n-\t\treturn isSourceEqual(memberA, memberB) && isTargetEqual(memberA, memberB);\n+\tprivate ConceptMapCompareResult compareDifferences(ListMultimap<ComponentURI, ConceptMapMapping> baseMappings, Set<ComponentURI> baseURIs, ListMultimap<ComponentURI, ConceptMapMapping> compareMappings, Set<ComponentURI> compareURIs) {\n+\t\tListMultimap<ConceptMapMapping, ConceptMapMapping> allChanged = ArrayListMultimap.create();\n+\t\tList<ConceptMapMapping> allRemoved = Lists.newArrayList();\n+\t\tList<ConceptMapMapping> allAdded = Lists.newArrayList();\n+\t\t\n+\t\tSetView<ComponentURI> changedURIs = Sets.intersection(baseURIs, compareURIs);\n+\t\t\n+\t\tchangedURIs.forEach(changedURI -> {\n+\t\t\tListMultimap<ConceptMapMapping, ConceptMapMapping> changed = ArrayListMultimap.create();\n+\t\t\tfor (ConceptMapMapping memberA : baseMappings.get(changedURI)) {\n+\t\t\t\tcompareMappings.get(changedURI).forEach(memberB -> {\n+\t\t\t\t\tif (isChanged(memberA, memberB)) {\n+\t\t\t\t\t\tchanged.put(memberA, memberB);\n+\t\t\t\t\t}\n+\t\t\t\t});\n+\t\t\t}\n+\t\t\tallChanged.putAll(changed);\n+\t\t});\n+\t\t\n+\t\tSetView<ComponentURI> removedURIs = Sets.difference(baseURIs, compareURIs);\n+\t\tremovedURIs.forEach(uri -> allRemoved.addAll(baseMappings.get(uri)));\n+\t\t\n+\t\tSetView<ComponentURI> addedURIs = Sets.difference(compareURIs, baseURIs);\n+\t\taddedURIs.forEach(uri -> allAdded.addAll(compareMappings.get(uri)));\n+\t\t\n+\t\treturn new ConceptMapCompareResult(allAdded, allRemoved, allChanged);\n \t}\n \n \tprivate boolean isChanged(ConceptMapMapping memberA, ConceptMapMapping memberB) {\n", "next_change": {"commit": "406373ec1c2e09f19dd7c3b7a9ba38045a634640", "changed_code": [{"header": "diff --git a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java\nindex 55a3e3bf4b..ec6b2afc2e 100644\n--- a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java\n+++ b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java\n", "chunk": "@@ -109,7 +115,7 @@ public final class ConceptMapCompareRequest extends ResourceRequest<BranchContex\n \t\tSetView<ComponentURI> addedURIs = Sets.difference(compareURIs, baseURIs);\n \t\taddedURIs.forEach(uri -> allAdded.addAll(compareMappings.get(uri)));\n \t\t\n-\t\treturn new ConceptMapCompareResult(allAdded, allRemoved, allChanged);\n+\t\treturn new ConceptMapCompareResult(allAdded, allRemoved, allChanged, limit);\n \t}\n \n \tprivate boolean isChanged(ConceptMapMapping memberA, ConceptMapMapping memberB) {\n", "next_change": {"commit": "311bc8bd7f35266ba3699e6846dd76aab2e5ed0b", "changed_code": [{"header": "diff --git a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java\nindex ec6b2afc2e..8464a1d26b 100644\n--- a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java\n+++ b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java\n", "chunk": "@@ -115,7 +110,10 @@ public final class ConceptMapCompareRequest extends ResourceRequest<BranchContex\n \t\tSetView<ComponentURI> addedURIs = Sets.difference(compareURIs, baseURIs);\n \t\taddedURIs.forEach(uri -> allAdded.addAll(compareMappings.get(uri)));\n \t\t\n-\t\treturn new ConceptMapCompareResult(allAdded, allRemoved, allChanged, limit);\n+\t\tSetView<ComponentURI> unchangedURIs = Sets.intersection(compareURIs, baseURIs);\n+\t\tunchangedURIs.forEach(uri -> allUnchanged.addAll(compareMappings.get(uri)));\n+\t\t\n+\t\treturn new ConceptMapCompareResult(allAdded, allRemoved, allChanged, allUnchanged);\n \t}\n \n \tprivate boolean isChanged(ConceptMapMapping memberA, ConceptMapMapping memberB) {\n", "next_change": {"commit": "019861de7cae823e9f17d2b8eca25fdc4fdd35d2", "changed_code": [{"header": "diff --git a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java\nindex 8464a1d26b..dccb563e70 100644\n--- a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java\n+++ b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java\n", "chunk": "@@ -110,9 +112,6 @@ public final class ConceptMapCompareRequest extends ResourceRequest<BranchContex\n \t\tSetView<ComponentURI> addedURIs = Sets.difference(compareURIs, baseURIs);\n \t\taddedURIs.forEach(uri -> allAdded.addAll(compareMappings.get(uri)));\n \t\t\n-\t\tSetView<ComponentURI> unchangedURIs = Sets.intersection(compareURIs, baseURIs);\n-\t\tunchangedURIs.forEach(uri -> allUnchanged.addAll(compareMappings.get(uri)));\n-\t\t\n \t\treturn new ConceptMapCompareResult(allAdded, allRemoved, allChanged, allUnchanged);\n \t}\n \n", "next_change": {"commit": "dc20a75dd01ad7d0fb1caa4c5e9d552e92dfd645", "changed_code": [{"header": "diff --git a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java\nindex dccb563e70..6598d72c92 100644\n--- a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java\n+++ b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java\n", "chunk": "@@ -51,68 +61,65 @@ public final class ConceptMapCompareRequest extends ResourceRequest<BranchContex\n \n \t\tListMultimap<ComponentURI, ConceptMapMapping> baseMappings = ArrayListMultimap.create();\n \t\tListMultimap<ComponentURI, ConceptMapMapping> compareMappings = ArrayListMultimap.create();\n-\t\tSet<ComponentURI> baseURIs = Sets.newHashSet();\n-\t\tSet<ComponentURI> compareURIs = Sets.newHashSet();\n \n \t\tfinal SearchResourceRequestIterator<ConceptMapMappingSearchRequestBuilder, ConceptMapMappings> baseIterator = new SearchResourceRequestIterator<>(\n \t\t\t\tCodeSystemRequests.prepareSearchConceptMapMappings()\n \t\t\t\t.filterByConceptMap(baseConceptMapURI.identifier())\n \t\t\t\t.setLocales(locales())\n-\t\t\t\t.setLimit(10_000),\n+\t\t\t\t.setLimit(DEFAULT_MEMBER_SCROLL_LIMIT),\n \t\t\t\tr -> r.build().execute(context)\n-\t\t\t\t);\n+\t\t\t);\n \n \t\tbaseIterator.forEachRemaining(hits -> hits.forEach(hit -> {\n \t\t\tbaseMappings.put(hit.getSourceComponentURI(), hit);\n-\t\t\tbaseURIs.add(hit.getSourceComponentURI());\n \t\t}));\n \n \t\tfinal SearchResourceRequestIterator<ConceptMapMappingSearchRequestBuilder, ConceptMapMappings> compareIterator = new SearchResourceRequestIterator<>(\n \t\t\t\tCodeSystemRequests.prepareSearchConceptMapMappings()\n \t\t\t\t.filterByConceptMap(compareConceptMapURI.identifier())\n \t\t\t\t.setLocales(locales())\n-\t\t\t\t.setLimit(10_000),\n+\t\t\t\t.setLimit(DEFAULT_MEMBER_SCROLL_LIMIT),\n \t\t\t\tr -> r.build().execute(context)\n-\t\t\t\t);\n+\t\t\t);\n \n \t\tcompareIterator.forEachRemaining(hits -> hits.forEach(hit -> {\n \t\t\tcompareMappings.put(hit.getSourceComponentURI(), hit);\n-\t\t\tcompareURIs.add(hit.getSourceComponentURI());\n \t\t}));\n \n-\t\tConceptMapCompareResult result = compareDifferences(baseMappings, baseURIs, compareMappings, compareURIs);\n-\t\treturn result; \n+\t\treturn compareDifferences(baseMappings, compareMappings);\n \t}\n \t\n-\tprivate ConceptMapCompareResult compareDifferences(ListMultimap<ComponentURI, ConceptMapMapping> baseMappings, Set<ComponentURI> baseURIs, ListMultimap<ComponentURI, ConceptMapMapping> compareMappings, Set<ComponentURI> compareURIs) {\n-\t\tListMultimap<ConceptMapMapping, ConceptMapMapping> allChanged = ArrayListMultimap.create();\n+\tprivate ConceptMapCompareResult compareDifferences(ListMultimap<ComponentURI, ConceptMapMapping> baseMappings, ListMultimap<ComponentURI, ConceptMapMapping> compareMappings) {\n+\t\t\n+\t\tMultimap<ConceptMapMapping, ConceptMapMapping> allChanged = HashMultimap.create();\n \t\tList<ConceptMapMapping> allRemoved = Lists.newArrayList();\n \t\tList<ConceptMapMapping> allAdded = Lists.newArrayList();\n-\t\tList<ConceptMapMapping> allUnchanged = Lists.newArrayList();\n \t\t\n-\t\tSetView<ComponentURI> changedURIs = Sets.intersection(baseURIs, compareURIs);\n+\t\tSet<ComponentURI> changedURIs = Sets.intersection(baseMappings.keySet(), compareMappings.keySet());\n \t\t\n \t\tchangedURIs.forEach(changedURI -> {\n-\t\t\tListMultimap<ConceptMapMapping, ConceptMapMapping> changed = ArrayListMultimap.create();\n-\t\t\tfor (ConceptMapMapping memberA : baseMappings.get(changedURI)) {\n-\t\t\t\tcompareMappings.get(changedURI).forEach(memberB -> {\n-\t\t\t\t\tif (isChanged(memberA, memberB)) {\n-\t\t\t\t\t\tchanged.put(memberA, memberB);\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\tallUnchanged.add(memberA);\n-\t\t\t\t\t}\n-\t\t\t\t});\n+\t\t\t\n+\t\t\tList<ConceptMapMapping> baseConceptMappings = baseMappings.get(changedURI);\n+\t\t\tList<ConceptMapMapping> compareConceptMappings = compareMappings.get(changedURI);\n+\t\t\t\n+\t\t\tfor (ConceptMapMapping baseConceptMapping : baseConceptMappings) {\n+\t\t\t\tcompareConceptMappings.stream()\n+\t\t\t\t\t.filter(compareConceptMapping -> isChanged(baseConceptMapping, compareConceptMapping))\n+\t\t\t\t\t.forEach(compareConceptMapping -> {\n+\t\t\t\t\t\tallChanged.put(baseConceptMapping, compareConceptMapping);\n+\t\t\t\t\t});\n \t\t\t}\n-\t\t\tallChanged.putAll(changed);\n+\t\t\t\n \t\t});\n \t\t\n-\t\tSetView<ComponentURI> removedURIs = Sets.difference(baseURIs, compareURIs);\n+\t\tSetView<ComponentURI> removedURIs = Sets.difference(baseMappings.keySet(), compareMappings.keySet());\n \t\tremovedURIs.forEach(uri -> allRemoved.addAll(baseMappings.get(uri)));\n \t\t\n-\t\tSetView<ComponentURI> addedURIs = Sets.difference(compareURIs, baseURIs);\n+\t\tSetView<ComponentURI> addedURIs = Sets.difference(compareMappings.keySet(), baseMappings.keySet());\n \t\taddedURIs.forEach(uri -> allAdded.addAll(compareMappings.get(uri)));\n \t\t\n-\t\treturn new ConceptMapCompareResult(allAdded, allRemoved, allChanged, allUnchanged);\n+\t\treturn new ConceptMapCompareResult(allAdded, allRemoved, allChanged, limit);\n+\t\t\n \t}\n \n \tprivate boolean isChanged(ConceptMapMapping memberA, ConceptMapMapping memberB) {\n", "next_change": {"commit": "b3e49c4a6e26162c0c9f68fe0aad23af0fdf070c", "changed_code": [{"header": "diff --git a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java\nindex 6598d72c92..e77cf7fbbe 100644\n--- a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java\n+++ b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java\n", "chunk": "@@ -118,7 +124,7 @@ public final class ConceptMapCompareRequest extends ResourceRequest<BranchContex\n \t\tSetView<ComponentURI> addedURIs = Sets.difference(compareMappings.keySet(), baseMappings.keySet());\n \t\taddedURIs.forEach(uri -> allAdded.addAll(compareMappings.get(uri)));\n \t\t\n-\t\treturn new ConceptMapCompareResult(allAdded, allRemoved, allChanged, limit);\n+\t\treturn new ConceptMapCompareResult(allAdded, allRemoved, allChanged, allUnchanged, limit);\n \t\t\n \t}\n \n", "next_change": {"commit": "9e59227d340623ebefe44d51f0e74c0cb2719c9d", "changed_code": [{"header": "diff --git a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java\nindex e77cf7fbbe..d10cae732c 100644\n--- a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java\n+++ b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java\n", "chunk": "@@ -131,6 +133,10 @@ public final class ConceptMapCompareRequest extends ResourceRequest<BranchContex\n \tprivate boolean isChanged(ConceptMapMapping memberA, ConceptMapMapping memberB) {\n \t\treturn isSourceEqual(memberA, memberB) && !isTargetEqual(memberA, memberB);\n \t}\n+\t\n+\tprivate boolean isSame(ConceptMapMapping memberA, ConceptMapMapping memberB) {\n+\t\treturn isSourceEqual(memberA, memberB) && isTargetEqual(memberA, memberB);\n+\t}\n \n \tprivate boolean isTargetEqual(ConceptMapMapping memberA, ConceptMapMapping memberB) {\n \t\treturn Objects.equals(memberA.getTargetComponentURI(), memberB.getTargetComponentURI());\n", "next_change": {"commit": "f8c528b9c050a31b6cc5d60f6a478fafaec63e9d", "changed_code": [{"header": "diff --git a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java\nindex d10cae732c..0cc3274cb8 100644\n--- a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java\n+++ b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java\n", "chunk": "@@ -139,11 +141,13 @@ public final class ConceptMapCompareRequest extends ResourceRequest<BranchContex\n \t}\n \n \tprivate boolean isTargetEqual(ConceptMapMapping memberA, ConceptMapMapping memberB) {\n-\t\treturn Objects.equals(memberA.getTargetComponentURI(), memberB.getTargetComponentURI());\n+\t\tboolean isDifferent = selectedConfig.stream().anyMatch(config -> !config.isTargetEqual(memberA, memberB));\n+\t\treturn !isDifferent;\n \t}\n \n \tprivate boolean isSourceEqual(ConceptMapMapping memberA, ConceptMapMapping memberB) {\n-\t\treturn Objects.equals(memberA.getSourceComponentURI(), memberB.getSourceComponentURI());\n+\t\tboolean isDifferent = selectedConfig.stream().anyMatch(config -> !config.isSourceEqual(memberA, memberB));\n+\t\treturn !isDifferent;\n \t}\n \n }\n", "next_change": {"commit": "3707b08f083e26656a5021db218b6b530c41b71b", "changed_code": [{"header": "diff --git a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java\nindex 0cc3274cb8..db227b12cd 100644\n--- a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java\n+++ b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java\n", "chunk": "@@ -93,61 +94,34 @@ public final class ConceptMapCompareRequest extends ResourceRequest<BranchContex\n \t\n \tprivate ConceptMapCompareResult compareDifferences(ListMultimap<ComponentURI, ConceptMapMapping> baseMappings, ListMultimap<ComponentURI, ConceptMapMapping> compareMappings) {\n \t\t\n-\t\tMultimap<ConceptMapMapping, ConceptMapMapping> allChanged = HashMultimap.create();\n-\t\tList<ConceptMapMapping> allRemoved = Lists.newArrayList();\n-\t\tList<ConceptMapMapping> allAdded = Lists.newArrayList();\n+\t\tList<ConceptMapMapping> allChanged = Lists.newArrayList();\n \t\tSet<ConceptMapMapping> allUnchanged = Sets.newHashSet();\n+\n+\t\tMapCompareSourceAndTargetEquivalence mapCompareEquivalence = new MapCompareSourceAndTargetEquivalence(selectedConfig);\n+\t\tSet<Wrapper<ConceptMapMapping>> baseWrappedMappings = baseMappings.values().stream().map(mapping -> mapCompareEquivalence.wrap(mapping)).collect(Collectors.toSet());\n+\t\tSet<Wrapper<ConceptMapMapping>> compareWrappedMappings = compareMappings.values().stream().map(mapping -> mapCompareEquivalence.wrap(mapping)).collect(Collectors.toSet());\n \t\t\n-\t\tSet<ComponentURI> changedURIs = Sets.intersection(baseMappings.keySet(), compareMappings.keySet());\n+\t\tSet<Wrapper<ConceptMapMapping>> allUnchangedWrappedMappings = Sets.intersection(baseWrappedMappings, compareWrappedMappings);\n+\t\tallUnchangedWrappedMappings.forEach(wrappedMapping -> allUnchanged.add(wrappedMapping.get()));\n \t\t\n-\t\tchangedURIs.forEach(changedURI -> {\n-\t\t\t\n-\t\t\tList<ConceptMapMapping> baseConceptMappings = baseMappings.get(changedURI);\n-\t\t\tList<ConceptMapMapping> compareConceptMappings = compareMappings.get(changedURI);\n-\t\t\t\n-\t\t\tfor (ConceptMapMapping baseConceptMapping : baseConceptMappings) {\n-\t\t\t\tcompareConceptMappings.stream()\n-\t\t\t\t.filter(compareConceptMapping -> isChanged(baseConceptMapping, compareConceptMapping))\n-\t\t\t\t.forEach(compareConceptMapping -> {\n-\t\t\t\t\tif(!allChanged.keySet().stream().anyMatch(mapping -> isSame(baseConceptMapping, mapping)) && !allChanged.values().stream().anyMatch(mapping -> isSame(compareConceptMapping, mapping))) {\n-\t\t\t\t\t\tallChanged.put(baseConceptMapping, compareConceptMapping);\n-\t\t\t\t\t}\n-\t\t\t\t});\n-\t\t\t\tcompareConceptMappings.stream()\n-\t\t\t\t.filter(compareConceptMapping -> isSame(baseConceptMapping, compareConceptMapping))\n-\t\t\t\t.forEach(compareConceptMapping -> {\n-\t\t\t\t\tallUnchanged.add(compareConceptMapping);\n-\t\t\t\t});\n-\t\t\t}\n-\t\t\t\n-\t\t});\n+\t\tSetView<Wrapper<ConceptMapMapping>> onlyBaseWrappedMappings = Sets.difference(baseWrappedMappings, allUnchangedWrappedMappings);\n+\t\tSetView<Wrapper<ConceptMapMapping>> onlyCompareWrappedMappings = Sets.difference(compareWrappedMappings, allUnchangedWrappedMappings);\n \t\t\n-\t\tSetView<ComponentURI> removedURIs = Sets.difference(baseMappings.keySet(), compareMappings.keySet());\n-\t\tremovedURIs.forEach(uri -> allRemoved.addAll(baseMappings.get(uri)));\n+\t\tSet<Wrapper<ConceptMapMapping>> changedBase = onlyBaseWrappedMappings.stream().filter(wrappedMapping -> onlyCompareWrappedMappings.stream().anyMatch(compareWrappedMapping -> isSourceEqual(wrappedMapping.get(), compareWrappedMapping.get()))).collect(Collectors.toSet());\n+\t\tSet<Wrapper<ConceptMapMapping>> changedCompare = onlyCompareWrappedMappings.stream().filter(wrappedMapping -> onlyBaseWrappedMappings.stream().anyMatch(baseWrappedMapping -> isSourceEqual(wrappedMapping.get(), baseWrappedMapping.get()))).collect(Collectors.toSet());\n \t\t\n-\t\tSetView<ComponentURI> addedURIs = Sets.difference(compareMappings.keySet(), baseMappings.keySet());\n-\t\taddedURIs.forEach(uri -> allAdded.addAll(compareMappings.get(uri)));\n+\t\tchangedBase.forEach(mapping -> allChanged.add(mapping.get()));\n+\t\tchangedCompare.forEach(mapping -> allChanged.add(mapping.get()));\n \t\t\n-\t\treturn new ConceptMapCompareResult(allAdded, allRemoved, allChanged, allUnchanged, limit);\n+\t\tList<ConceptMapMapping> allRemoved = onlyBaseWrappedMappings.stream().filter(mapping -> !changedBase.stream().anyMatch(changed -> isSourceEqual(mapping.get(), changed.get()))).map(mapping -> mapping.get()).collect(Collectors.toList());\n+\t\tList<ConceptMapMapping> allAdded = onlyCompareWrappedMappings.stream().filter(mapping -> !changedCompare.stream().anyMatch(changed -> isSourceEqual(mapping.get(), changed.get()))).map(mapping -> mapping.get()).collect(Collectors.toList());\n \t\t\n-\t}\n-\n-\tprivate boolean isChanged(ConceptMapMapping memberA, ConceptMapMapping memberB) {\n-\t\treturn isSourceEqual(memberA, memberB) && !isTargetEqual(memberA, memberB);\n+\t\treturn new ConceptMapCompareResult(allAdded, allRemoved, allChanged, allUnchanged, limit);\n \t}\n \t\n-\tprivate boolean isSame(ConceptMapMapping memberA, ConceptMapMapping memberB) {\n-\t\treturn isSourceEqual(memberA, memberB) && isTargetEqual(memberA, memberB);\n-\t}\n-\n-\tprivate boolean isTargetEqual(ConceptMapMapping memberA, ConceptMapMapping memberB) {\n-\t\tboolean isDifferent = selectedConfig.stream().anyMatch(config -> !config.isTargetEqual(memberA, memberB));\n-\t\treturn !isDifferent;\n-\t}\n-\n \tprivate boolean isSourceEqual(ConceptMapMapping memberA, ConceptMapMapping memberB) {\n \t\tboolean isDifferent = selectedConfig.stream().anyMatch(config -> !config.isSourceEqual(memberA, memberB));\n \t\treturn !isDifferent;\n \t}\n-\n+\t\n }\n", "next_change": {"commit": "6cd2bb79343b8a4d940c1e0c7935b45e7f977711", "changed_code": [{"header": "diff --git a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java\nindex db227b12cd..399e4ac989 100644\n--- a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java\n+++ b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java\n", "chunk": "@@ -98,27 +100,71 @@ public final class ConceptMapCompareRequest extends ResourceRequest<BranchContex\n \t\tSet<ConceptMapMapping> allUnchanged = Sets.newHashSet();\n \n \t\tMapCompareSourceAndTargetEquivalence mapCompareEquivalence = new MapCompareSourceAndTargetEquivalence(selectedConfig);\n-\t\tSet<Wrapper<ConceptMapMapping>> baseWrappedMappings = baseMappings.values().stream().map(mapping -> mapCompareEquivalence.wrap(mapping)).collect(Collectors.toSet());\n-\t\tSet<Wrapper<ConceptMapMapping>> compareWrappedMappings = compareMappings.values().stream().map(mapping -> mapCompareEquivalence.wrap(mapping)).collect(Collectors.toSet());\n+\t\tSet<Wrapper<ConceptMapMapping>> baseWrappedMappings = baseMappings.values().stream()\n+\t\t\t\t.map(mapping -> mapCompareEquivalence.wrap(mapping))\n+\t\t\t\t.collect(Collectors.toSet());\n \t\t\n+\t\tSet<Wrapper<ConceptMapMapping>> compareWrappedMappings = compareMappings.values().stream()\n+\t\t\t\t.map(mapping -> mapCompareEquivalence.wrap(mapping))\n+\t\t\t\t.collect(Collectors.toSet());\n+\t\t\n+\t\t//Unchanged elements are in the intersection\n \t\tSet<Wrapper<ConceptMapMapping>> allUnchangedWrappedMappings = Sets.intersection(baseWrappedMappings, compareWrappedMappings);\n \t\tallUnchangedWrappedMappings.forEach(wrappedMapping -> allUnchanged.add(wrappedMapping.get()));\n \t\t\n+\t\t//Remove the unchanged from further comparison\n \t\tSetView<Wrapper<ConceptMapMapping>> onlyBaseWrappedMappings = Sets.difference(baseWrappedMappings, allUnchangedWrappedMappings);\n \t\tSetView<Wrapper<ConceptMapMapping>> onlyCompareWrappedMappings = Sets.difference(compareWrappedMappings, allUnchangedWrappedMappings);\n \t\t\n-\t\tSet<Wrapper<ConceptMapMapping>> changedBase = onlyBaseWrappedMappings.stream().filter(wrappedMapping -> onlyCompareWrappedMappings.stream().anyMatch(compareWrappedMapping -> isSourceEqual(wrappedMapping.get(), compareWrappedMapping.get()))).collect(Collectors.toSet());\n-\t\tSet<Wrapper<ConceptMapMapping>> changedCompare = onlyCompareWrappedMappings.stream().filter(wrappedMapping -> onlyBaseWrappedMappings.stream().anyMatch(baseWrappedMapping -> isSourceEqual(wrappedMapping.get(), baseWrappedMapping.get()))).collect(Collectors.toSet());\n+\t\tSet<Pair<ConceptMapMapping, ConceptMapMapping>> changedMappings = findChangedMappings(onlyBaseWrappedMappings, onlyCompareWrappedMappings);\n+\t\t\n+\t\tSet<Wrapper<ConceptMapMapping>> changedBase = onlyBaseWrappedMappings.stream()\n+\t\t\t\t.filter(wrappedMapping -> onlyCompareWrappedMappings.stream()\n+\t\t\t\t\t\t.anyMatch(compareWrappedMapping -> isSourceEqual(wrappedMapping.get(), compareWrappedMapping.get())))\n+\t\t\t\t.collect(Collectors.toSet());\n+\t\t\n+\t\tSet<Wrapper<ConceptMapMapping>> changedCompare = onlyCompareWrappedMappings.stream()\n+\t\t\t\t.filter(wrappedMapping -> onlyBaseWrappedMappings.stream()\n+\t\t\t\t\t\t.anyMatch(baseWrappedMapping -> isSourceEqual(wrappedMapping.get(), baseWrappedMapping.get())))\n+\t\t\t\t.collect(Collectors.toSet());\n \t\t\n \t\tchangedBase.forEach(mapping -> allChanged.add(mapping.get()));\n \t\tchangedCompare.forEach(mapping -> allChanged.add(mapping.get()));\n \t\t\n-\t\tList<ConceptMapMapping> allRemoved = onlyBaseWrappedMappings.stream().filter(mapping -> !changedBase.stream().anyMatch(changed -> isSourceEqual(mapping.get(), changed.get()))).map(mapping -> mapping.get()).collect(Collectors.toList());\n-\t\tList<ConceptMapMapping> allAdded = onlyCompareWrappedMappings.stream().filter(mapping -> !changedCompare.stream().anyMatch(changed -> isSourceEqual(mapping.get(), changed.get()))).map(mapping -> mapping.get()).collect(Collectors.toList());\n+\t\tList<ConceptMapMapping> allRemoved = onlyBaseWrappedMappings.stream()\n+\t\t\t\t.filter(mapping -> !changedBase.stream()\n+\t\t\t\t\t\t.anyMatch(changed -> isSourceEqual(mapping.get(), changed.get())))\n+\t\t\t\t.map(mapping -> mapping.get())\n+\t\t\t\t.collect(Collectors.toList());\n+\t\t\n+\t\tList<ConceptMapMapping> allAdded = onlyCompareWrappedMappings.stream()\n+\t\t\t\t.filter(mapping -> !changedCompare.stream()\n+\t\t\t\t\t\t.anyMatch(changed -> isSourceEqual(mapping.get(), changed.get())))\n+\t\t\t\t.map(mapping -> mapping.get())\n+\t\t\t\t.collect(Collectors.toList());\n \t\t\n \t\treturn new ConceptMapCompareResult(allAdded, allRemoved, allChanged, allUnchanged, limit);\n \t}\n \t\n+\tprivate Set<Pair<ConceptMapMapping, ConceptMapMapping>> findChangedMappings(Set<Wrapper<ConceptMapMapping>> onlyBaseWrappedMappings,\n+\t\t\tSet<Wrapper<ConceptMapMapping>> onlyCompareWrappedMappings) {\n+\t\t\n+\t\tMap<String, ConceptMapMapping> baseMappings = onlyBaseWrappedMappings.stream()\n+\t\t\t\t.collect(Collectors.toMap(w -> w.get().getSourceComponentURI().identifier(), w -> w.get()));\n+\t\t\n+\t\tMap<String, ConceptMapMapping> compareMappings = onlyCompareWrappedMappings.stream()\n+\t\t\t\t.collect(Collectors.toMap(w -> w.get().getSourceComponentURI().identifier(), w -> w.get()));\n+\t\t\n+\t\t//the intersection is the changed\n+\t\tSetView<String> commonSourceIds = Sets.intersection(baseMappings.keySet(), compareMappings.keySet());\n+\t\t\n+\t\tSet<Pair<ConceptMapMapping, ConceptMapMapping>> changedPairs = commonSourceIds.stream()\n+\t\t\t.map(sourceId -> Pair.<ConceptMapMapping, ConceptMapMapping>of(baseMappings.get(sourceId), compareMappings.get(sourceId)))\n+\t\t\t.collect(Collectors.toSet());\n+\t\t\n+\t\treturn changedPairs;\n+\t}\n+\n \tprivate boolean isSourceEqual(ConceptMapMapping memberA, ConceptMapMapping memberB) {\n \t\tboolean isDifferent = selectedConfig.stream().anyMatch(config -> !config.isSourceEqual(memberA, memberB));\n \t\treturn !isDifferent;\n", "next_change": {"commit": "1e9eb282776575ef8f1869a8a84174c3a2f2fa4f", "changed_code": [{"header": "diff --git a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java\nindex 399e4ac989..9debb0afc1 100644\n--- a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java\n+++ b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java\n", "chunk": "@@ -145,24 +135,13 @@ public final class ConceptMapCompareRequest extends ResourceRequest<BranchContex\n \t\t\n \t\treturn new ConceptMapCompareResult(allAdded, allRemoved, allChanged, allUnchanged, limit);\n \t}\n-\t\n-\tprivate Set<Pair<ConceptMapMapping, ConceptMapMapping>> findChangedMappings(Set<Wrapper<ConceptMapMapping>> onlyBaseWrappedMappings,\n-\t\t\tSet<Wrapper<ConceptMapMapping>> onlyCompareWrappedMappings) {\n-\t\t\n-\t\tMap<String, ConceptMapMapping> baseMappings = onlyBaseWrappedMappings.stream()\n-\t\t\t\t.collect(Collectors.toMap(w -> w.get().getSourceComponentURI().identifier(), w -> w.get()));\n-\t\t\n-\t\tMap<String, ConceptMapMapping> compareMappings = onlyCompareWrappedMappings.stream()\n-\t\t\t\t.collect(Collectors.toMap(w -> w.get().getSourceComponentURI().identifier(), w -> w.get()));\n-\t\t\n-\t\t//the intersection is the changed\n-\t\tSetView<String> commonSourceIds = Sets.intersection(baseMappings.keySet(), compareMappings.keySet());\n-\t\t\n-\t\tSet<Pair<ConceptMapMapping, ConceptMapMapping>> changedPairs = commonSourceIds.stream()\n-\t\t\t.map(sourceId -> Pair.<ConceptMapMapping, ConceptMapMapping>of(baseMappings.get(sourceId), compareMappings.get(sourceId)))\n-\t\t\t.collect(Collectors.toSet());\n-\t\t\n-\t\treturn changedPairs;\n+\n+\tprivate Set<Wrapper<ConceptMapMapping>> extractChangedMappings(SetView<Wrapper<ConceptMapMapping>> mappingsToChooseFrom,\n+\t\t\tSetView<Wrapper<ConceptMapMapping>> mappingsToCompareTo) {\n+\t\treturn mappingsToChooseFrom.stream()\n+\t\t\t\t.filter(wrappedMapping -> mappingsToCompareTo.stream()\n+\t\t\t\t\t\t.anyMatch(compareWrappedMapping -> isSourceEqual(wrappedMapping.get(), compareWrappedMapping.get())))\n+\t\t\t\t.collect(Collectors.toSet());\n \t}\n \n \tprivate boolean isSourceEqual(ConceptMapMapping memberA, ConceptMapMapping memberB) {\n", "next_change": {"commit": "fea99cba37459a9af1aae44912f79587fef574a6", "changed_code": [{"header": "diff --git a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java\nindex 9debb0afc1..710653fecd 100644\n--- a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java\n+++ b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java\n", "chunk": "@@ -61,92 +72,104 @@ public final class ConceptMapCompareRequest extends ResourceRequest<BranchContex\n \n \t@Override\n \tpublic ConceptMapCompareResult execute(BranchContext context) {\n+\t\tList<ConceptMapMapping> baseMappings = fetchConceptMapMappings(context, baseConceptMapURI.identifier());\n+\t\tList<ConceptMapMapping> compareMappings = fetchConceptMapMappings(context, compareConceptMapURI.identifier());\n \n-\t\tListMultimap<ComponentURI, ConceptMapMapping> baseMappings = ArrayListMultimap.create();\n-\t\tListMultimap<ComponentURI, ConceptMapMapping> compareMappings = ArrayListMultimap.create();\n-\n-\t\tfinal SearchResourceRequestIterator<ConceptMapMappingSearchRequestBuilder, ConceptMapMappings> baseIterator = new SearchResourceRequestIterator<>(\n-\t\t\t\tCodeSystemRequests.prepareSearchConceptMapMappings()\n-\t\t\t\t.filterByConceptMap(baseConceptMapURI.identifier())\n-\t\t\t\t.setLocales(locales())\n-\t\t\t\t.setLimit(DEFAULT_MEMBER_SCROLL_LIMIT),\n-\t\t\t\tr -> r.build().execute(context)\n-\t\t\t);\n-\n-\t\tbaseIterator.forEachRemaining(hits -> hits.forEach(hit -> {\n-\t\t\tbaseMappings.put(hit.getSourceComponentURI(), hit);\n-\t\t}));\n+\t\tmapCompareEquivalence = new MapCompareSourceAndTargetEquivalence(selectedConfig);\n+\t\t\n+\t\treturn compareDifferences(baseMappings, compareMappings);\n+\t}\n \n-\t\tfinal SearchResourceRequestIterator<ConceptMapMappingSearchRequestBuilder, ConceptMapMappings> compareIterator = new SearchResourceRequestIterator<>(\n+\tprivate List<ConceptMapMapping> fetchConceptMapMappings(BranchContext context, String conceptMapId) {\n+\t\tList<ConceptMapMapping> baseMappings = Lists.newArrayList();\n+\t\tnew SearchResourceRequestIterator<>(\n \t\t\t\tCodeSystemRequests.prepareSearchConceptMapMappings()\n-\t\t\t\t.filterByConceptMap(compareConceptMapURI.identifier())\n+\t\t\t\t.filterByConceptMap(conceptMapId)\n \t\t\t\t.setLocales(locales())\n \t\t\t\t.setLimit(DEFAULT_MEMBER_SCROLL_LIMIT),\n \t\t\t\tr -> r.build().execute(context)\n-\t\t\t);\n-\n-\t\tcompareIterator.forEachRemaining(hits -> hits.forEach(hit -> {\n-\t\t\tcompareMappings.put(hit.getSourceComponentURI(), hit);\n-\t\t}));\n-\n-\t\treturn compareDifferences(baseMappings, compareMappings);\n+\t\t\t).forEachRemaining(hits -> hits.forEach(baseMappings::add));\n+\t\treturn baseMappings;\n \t}\n \t\n-\tprivate ConceptMapCompareResult compareDifferences(ListMultimap<ComponentURI, ConceptMapMapping> baseMappings, ListMultimap<ComponentURI, ConceptMapMapping> compareMappings) {\n-\t\t\n-\t\tList<ConceptMapMapping> allChanged = Lists.newArrayList();\n-\t\tSet<ConceptMapMapping> allUnchanged = Sets.newHashSet();\n+\tprivate ConceptMapCompareResult compareDifferences(List<ConceptMapMapping> baseMappings, List<ConceptMapMapping> compareMappings) {\n \n-\t\tMapCompareSourceAndTargetEquivalence mapCompareEquivalence = new MapCompareSourceAndTargetEquivalence(selectedConfig);\n-\t\tSet<Wrapper<ConceptMapMapping>> baseWrappedMappings = baseMappings.values().stream()\n-\t\t\t\t.map(mapping -> mapCompareEquivalence.wrap(mapping))\n-\t\t\t\t.collect(Collectors.toSet());\n-\t\t\n-\t\tSet<Wrapper<ConceptMapMapping>> compareWrappedMappings = compareMappings.values().stream()\n-\t\t\t\t.map(mapping -> mapCompareEquivalence.wrap(mapping))\n-\t\t\t\t.collect(Collectors.toSet());\n+\t\t//Wrap the mappings to be compared and processed using set operations\n+\t\tSet<Wrapper<ConceptMapMapping>> baseWrappedMappings = wrapMappings(baseMappings);\n+\t\tSet<Wrapper<ConceptMapMapping>> compareWrappedMappings = wrapMappings(compareMappings);\n \t\t\n \t\t//Unchanged elements are in the intersection\n \t\tSet<Wrapper<ConceptMapMapping>> allUnchangedWrappedMappings = Sets.intersection(baseWrappedMappings, compareWrappedMappings);\n-\t\tallUnchangedWrappedMappings.forEach(wrappedMapping -> allUnchanged.add(wrappedMapping.get()));\n+\t\t\n+\t\tList<ConceptMapCompareResultItem> allUnchanged = allUnchangedWrappedMappings.stream()\n+\t\t\t.map(w -> new ConceptMapCompareResultItem(ConceptMapCompareChangeKind.SAME, w.get()))\n+\t\t\t.collect(Collectors.toList());\n \t\t\n \t\t//Remove the unchanged from further comparison\n-\t\tSetView<Wrapper<ConceptMapMapping>> onlyBaseWrappedMappings = Sets.difference(baseWrappedMappings, allUnchangedWrappedMappings);\n-\t\tSetView<Wrapper<ConceptMapMapping>> onlyCompareWrappedMappings = Sets.difference(compareWrappedMappings, allUnchangedWrappedMappings);\n+\t\tSet<Wrapper<ConceptMapMapping>> onlyBaseWrappedMappings = Sets.difference(baseWrappedMappings, allUnchangedWrappedMappings);\n+\t\tSet<Wrapper<ConceptMapMapping>> onlyCompareWrappedMappings = Sets.difference(compareWrappedMappings, allUnchangedWrappedMappings);\n+\t\t\n+\t\t//Multimaps based on the configured equivalence properties\n+\t\tMultimap<String, Wrapper<ConceptMapMapping>> baseMMap = collectMapEntries(onlyBaseWrappedMappings);\n+\t\tMultimap<String, Wrapper<ConceptMapMapping>> compareMMap = collectMapEntries(onlyCompareWrappedMappings);\n \t\t\n-\t\tSet<Wrapper<ConceptMapMapping>> changedBase = extractChangedMappings(onlyBaseWrappedMappings, onlyCompareWrappedMappings);\n+\t\tSet<String> sourceCompoundKeys = baseMMap.keySet();\n+\t\tSet<String> targetCompoundKeys = compareMMap.keySet();\n \t\t\n-\t\tSet<Wrapper<ConceptMapMapping>> changedCompare = extractChangedMappings(onlyCompareWrappedMappings, onlyBaseWrappedMappings);\n+\t\tSet<String> presentKeys = Sets.difference(sourceCompoundKeys, targetCompoundKeys);\n+\t\tSet<String> missingKeys = Sets.difference(targetCompoundKeys, sourceCompoundKeys);\n \t\t\n-\t\tchangedBase.forEach(mapping -> allChanged.add(mapping.get()));\n-\t\tchangedCompare.forEach(mapping -> allChanged.add(mapping.get()));\n+\t\t//Collect the 'Present' mappings\n+\t\tSet<Wrapper<ConceptMapMapping>> presentMappings = Sets.newHashSet();\n+\t\tpresentKeys.stream().forEach(k -> presentMappings.addAll(baseMMap.get(k)));\n+\t\tList<ConceptMapCompareResultItem> allRemoved = presentMappings.stream().map(w -> new ConceptMapCompareResultItem(ConceptMapCompareChangeKind.PRESENT, w.get())).collect(Collectors.toList());\n \t\t\n-\t\tList<ConceptMapMapping> allRemoved = onlyBaseWrappedMappings.stream()\n-\t\t\t\t.filter(mapping -> !changedBase.stream()\n-\t\t\t\t\t\t.anyMatch(changed -> isSourceEqual(mapping.get(), changed.get())))\n-\t\t\t\t.map(mapping -> mapping.get())\n-\t\t\t\t.collect(Collectors.toList());\n+\t\t//Collect the 'Missing' mappings\n+\t\tSet<Wrapper<ConceptMapMapping>> missingMappings = Sets.newHashSet();\n+\t\tmissingKeys.stream().forEach(k -> missingMappings.addAll(compareMMap.get(k)));\n+\t\tList<ConceptMapCompareResultItem> allAdded = missingMappings.stream().map(w -> new ConceptMapCompareResultItem(ConceptMapCompareChangeKind.MISSING, w.get())).collect(Collectors.toList());\n \t\t\n-\t\tList<ConceptMapMapping> allAdded = onlyCompareWrappedMappings.stream()\n-\t\t\t\t.filter(mapping -> !changedCompare.stream()\n-\t\t\t\t\t\t.anyMatch(changed -> isSourceEqual(mapping.get(), changed.get())))\n-\t\t\t\t.map(mapping -> mapping.get())\n-\t\t\t\t.collect(Collectors.toList());\n+\t\t//Remove the already processed missing and present mappings and the remaining items are the different mappings\n+\t\tSet<Wrapper<ConceptMapMapping>> sourceDifferentMappings = Sets.difference(onlyBaseWrappedMappings, presentMappings);\n+\t\tSet<Wrapper<ConceptMapMapping>> targetDifferentMappings = Sets.difference(onlyCompareWrappedMappings, missingMappings);\n \t\t\n-\t\treturn new ConceptMapCompareResult(allAdded, allRemoved, allChanged, allUnchanged, limit);\n+\t\tList<ConceptMapCompareResultItem> allChanged = Lists.newArrayList();\n+\t\t\n+\t\tsourceDifferentMappings.forEach(w -> {\n+\t\t\tallChanged.add(new ConceptMapCompareResultItem(ConceptMapCompareChangeKind.DIFFERENT_TARGET, w.get()));\n+\t\t});\n+\t\t\n+\t\ttargetDifferentMappings.forEach(w -> {\n+\t\t\tallChanged.add(new ConceptMapCompareResultItem(ConceptMapCompareChangeKind.DIFFERENT_TARGET, w.get()));\n+\t\t});\n+\t\t\n+\t\tList<ConceptMapCompareResultItem> items = ImmutableList.<ConceptMapCompareResultItem>builder()\n+\t\t\t.addAll(allAdded)\n+\t\t\t.addAll(allRemoved)\n+\t\t\t.addAll(allChanged)\n+\t\t\t.addAll(allUnchanged)\n+\t\t\t.build()\n+\t\t\t.stream()\n+\t\t\t.sorted()\n+\t\t\t.limit(limit)\n+\t\t\t.collect(Collectors.toList());\n+\t\t\n+\t\treturn new ConceptMapCompareResult(items, allAdded.size(), allRemoved.size(), allChanged.size(), allUnchanged.size(), limit);\n \t}\n \n-\tprivate Set<Wrapper<ConceptMapMapping>> extractChangedMappings(SetView<Wrapper<ConceptMapMapping>> mappingsToChooseFrom,\n-\t\t\tSetView<Wrapper<ConceptMapMapping>> mappingsToCompareTo) {\n-\t\treturn mappingsToChooseFrom.stream()\n-\t\t\t\t.filter(wrappedMapping -> mappingsToCompareTo.stream()\n-\t\t\t\t\t\t.anyMatch(compareWrappedMapping -> isSourceEqual(wrappedMapping.get(), compareWrappedMapping.get())))\n-\t\t\t\t.collect(Collectors.toSet());\n+\t/*\n+\t * Create a multimap for the passed in mappings with a compound key that is based on the selected configuration\n+\t */\n+\tprivate Multimap<String, Wrapper<ConceptMapMapping>> collectMapEntries(Set<Wrapper<ConceptMapMapping>> wrappedMappings) {\n+\t\tMultimap<String, Wrapper<ConceptMapMapping>> baseMMap = HashMultimap.create();\n+\t\twrappedMappings.stream().forEach(w -> baseMMap.put(ConceptMapCompareConfigurationProperties.getCompoundKey(selectedConfig, w.get()), w));\n+\t\treturn baseMMap;\n \t}\n \n-\tprivate boolean isSourceEqual(ConceptMapMapping memberA, ConceptMapMapping memberB) {\n-\t\tboolean isDifferent = selectedConfig.stream().anyMatch(config -> !config.isSourceEqual(memberA, memberB));\n-\t\treturn !isDifferent;\n+\tprivate Set<Wrapper<ConceptMapMapping>> wrapMappings(List<ConceptMapMapping> mappings) {\n+\t\treturn mappings.stream()\n+\t\t\t\t.map(mapping -> mapCompareEquivalence.wrap(mapping))\n+\t\t\t\t.collect(Collectors.toSet());\n \t}\n \t\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"header": "diff --git a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java\nindex b4288317c1..983151b690 100644\n--- a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java\n+++ b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java\n", "chunk": "@@ -105,10 +105,10 @@ final class ConceptMapCompareRequest extends ResourceRequest<BranchContext, Conc\n \t}\n \n \tprivate boolean isTargetEqual(ConceptMapMapping memberA, ConceptMapMapping memberB) {\n-\t\treturn  Objects.equals(memberA.getTargetComponentURI(),memberB.getTargetComponentURI());\n+\t\treturn Objects.equals(memberA.getTargetComponentURI(), memberB.getTargetComponentURI());\n \t}\n \n-\tprivate boolean isSourceEqual(ConceptMapMapping memberA, ConceptMapMapping memberB){\n+\tprivate boolean isSourceEqual(ConceptMapMapping memberA, ConceptMapMapping memberB) {\n \t\treturn Objects.equals(memberA.getSourceComponentURI(), memberB.getSourceComponentURI());\n \t}\n \n", "next_change": {"commit": "f8c528b9c050a31b6cc5d60f6a478fafaec63e9d", "changed_code": [{"header": "diff --git a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java\nindex 983151b690..0cc3274cb8 100644\n--- a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java\n+++ b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java\n", "chunk": "@@ -35,81 +42,112 @@ public final class ConceptMapCompareRequest extends ResourceRequest<BranchContex\n \t\n \tprivate static final long serialVersionUID = 1L;\n \t\n+\tprivate static final int DEFAULT_MEMBER_SCROLL_LIMIT = 10_000;\n+\t\n \tprivate final ComponentURI baseConceptMapURI;\n \tprivate final ComponentURI compareConceptMapURI;\n+\tprivate final Set<ConceptMapCompareConfigurationProperties> selectedConfig;\n+\t\n+\t@Min(0)\n+\tprivate int limit;\n \t\n-\tConceptMapCompareRequest(ComponentURI baseConceptMapURI, ComponentURI compareConceptMapURI) {\n+\tConceptMapCompareRequest(ComponentURI baseConceptMapURI, ComponentURI compareConceptMapURI, int limit, Set<ConceptMapCompareConfigurationProperties> selectedConfig) {\n \t\tthis.baseConceptMapURI = baseConceptMapURI;\n \t\tthis.compareConceptMapURI = compareConceptMapURI;\n+\t\tthis.limit = limit;\n+\t\tthis.selectedConfig = selectedConfig;\n \t}\n \n \t@Override\n \tpublic ConceptMapCompareResult execute(BranchContext context) {\n \n-\t\tList<ConceptMapMapping> baseMappings = Lists.newArrayList();\n-\t\tList<ConceptMapMapping> compareMappings = Lists.newArrayList();\n+\t\tListMultimap<ComponentURI, ConceptMapMapping> baseMappings = ArrayListMultimap.create();\n+\t\tListMultimap<ComponentURI, ConceptMapMapping> compareMappings = ArrayListMultimap.create();\n \n \t\tfinal SearchResourceRequestIterator<ConceptMapMappingSearchRequestBuilder, ConceptMapMappings> baseIterator = new SearchResourceRequestIterator<>(\n \t\t\t\tCodeSystemRequests.prepareSearchConceptMapMappings()\n \t\t\t\t.filterByConceptMap(baseConceptMapURI.identifier())\n \t\t\t\t.setLocales(locales())\n-\t\t\t\t.setLimit(10_000),\n+\t\t\t\t.setLimit(DEFAULT_MEMBER_SCROLL_LIMIT),\n \t\t\t\tr -> r.build().execute(context)\n-\t\t\t\t);\n+\t\t\t);\n \n-\t\tbaseIterator.forEachRemaining(hits -> hits.forEach(baseMappings::add));\n+\t\tbaseIterator.forEachRemaining(hits -> hits.forEach(hit -> {\n+\t\t\tbaseMappings.put(hit.getSourceComponentURI(), hit);\n+\t\t}));\n \n \t\tfinal SearchResourceRequestIterator<ConceptMapMappingSearchRequestBuilder, ConceptMapMappings> compareIterator = new SearchResourceRequestIterator<>(\n \t\t\t\tCodeSystemRequests.prepareSearchConceptMapMappings()\n \t\t\t\t.filterByConceptMap(compareConceptMapURI.identifier())\n \t\t\t\t.setLocales(locales())\n-\t\t\t\t.setLimit(10_000),\n+\t\t\t\t.setLimit(DEFAULT_MEMBER_SCROLL_LIMIT),\n \t\t\t\tr -> r.build().execute(context)\n-\t\t\t\t);\n+\t\t\t);\n \n-\t\tcompareIterator.forEachRemaining(hits -> hits.forEach(compareMappings::add));\n+\t\tcompareIterator.forEachRemaining(hits -> hits.forEach(hit -> {\n+\t\t\tcompareMappings.put(hit.getSourceComponentURI(), hit);\n+\t\t}));\n \n-\t\tConceptMapCompareResult result = compareDifferents(baseMappings, compareMappings);\n-\t\treturn result; \n+\t\treturn compareDifferences(baseMappings, compareMappings);\n \t}\n \t\n-\tprivate ConceptMapCompareResult compareDifferents(List<ConceptMapMapping> baseSet, List<ConceptMapMapping> compareSet) {\n-\t\tListMultimap<ConceptMapMapping, ConceptMapMapping> changed = ArrayListMultimap.create();\n-\t\tList<ConceptMapMapping> removed = Lists.newArrayList();\n-\t\tList<ConceptMapMapping> added = Lists.newArrayList();\n-\n-\t\tremoved.addAll(baseSet);\n-\t\tadded.addAll(compareSet);\n-\n-\t\tfor (ConceptMapMapping memberA : baseSet) {\n-\t\t\tcompareSet.forEach(memberB -> {\n-\t\t\t\tif (isEqual(memberA, memberB)) {\n-\t\t\t\t\tremoved.remove(memberA);\n-\t\t\t\t\tadded.remove(memberB);\n-\t\t\t\t} else if (isChanged(memberA, memberB)) {\n-\t\t\t\t\tremoved.remove(memberA);\n-\t\t\t\t\tadded.remove(memberB);\n-\t\t\t\t\tchanged.put(memberA, memberB);\n-\t\t\t\t}\n-\t\t\t});\n-\t\t}\n-\t\treturn new ConceptMapCompareResult(added, removed, changed);\n-\t}\n-\n-\tprivate boolean isEqual(ConceptMapMapping memberA, ConceptMapMapping memberB) {\n-\t\treturn isSourceEqual(memberA, memberB) && isTargetEqual(memberA, memberB);\n+\tprivate ConceptMapCompareResult compareDifferences(ListMultimap<ComponentURI, ConceptMapMapping> baseMappings, ListMultimap<ComponentURI, ConceptMapMapping> compareMappings) {\n+\t\t\n+\t\tMultimap<ConceptMapMapping, ConceptMapMapping> allChanged = HashMultimap.create();\n+\t\tList<ConceptMapMapping> allRemoved = Lists.newArrayList();\n+\t\tList<ConceptMapMapping> allAdded = Lists.newArrayList();\n+\t\tSet<ConceptMapMapping> allUnchanged = Sets.newHashSet();\n+\t\t\n+\t\tSet<ComponentURI> changedURIs = Sets.intersection(baseMappings.keySet(), compareMappings.keySet());\n+\t\t\n+\t\tchangedURIs.forEach(changedURI -> {\n+\t\t\t\n+\t\t\tList<ConceptMapMapping> baseConceptMappings = baseMappings.get(changedURI);\n+\t\t\tList<ConceptMapMapping> compareConceptMappings = compareMappings.get(changedURI);\n+\t\t\t\n+\t\t\tfor (ConceptMapMapping baseConceptMapping : baseConceptMappings) {\n+\t\t\t\tcompareConceptMappings.stream()\n+\t\t\t\t.filter(compareConceptMapping -> isChanged(baseConceptMapping, compareConceptMapping))\n+\t\t\t\t.forEach(compareConceptMapping -> {\n+\t\t\t\t\tif(!allChanged.keySet().stream().anyMatch(mapping -> isSame(baseConceptMapping, mapping)) && !allChanged.values().stream().anyMatch(mapping -> isSame(compareConceptMapping, mapping))) {\n+\t\t\t\t\t\tallChanged.put(baseConceptMapping, compareConceptMapping);\n+\t\t\t\t\t}\n+\t\t\t\t});\n+\t\t\t\tcompareConceptMappings.stream()\n+\t\t\t\t.filter(compareConceptMapping -> isSame(baseConceptMapping, compareConceptMapping))\n+\t\t\t\t.forEach(compareConceptMapping -> {\n+\t\t\t\t\tallUnchanged.add(compareConceptMapping);\n+\t\t\t\t});\n+\t\t\t}\n+\t\t\t\n+\t\t});\n+\t\t\n+\t\tSetView<ComponentURI> removedURIs = Sets.difference(baseMappings.keySet(), compareMappings.keySet());\n+\t\tremovedURIs.forEach(uri -> allRemoved.addAll(baseMappings.get(uri)));\n+\t\t\n+\t\tSetView<ComponentURI> addedURIs = Sets.difference(compareMappings.keySet(), baseMappings.keySet());\n+\t\taddedURIs.forEach(uri -> allAdded.addAll(compareMappings.get(uri)));\n+\t\t\n+\t\treturn new ConceptMapCompareResult(allAdded, allRemoved, allChanged, allUnchanged, limit);\n+\t\t\n \t}\n \n \tprivate boolean isChanged(ConceptMapMapping memberA, ConceptMapMapping memberB) {\n \t\treturn isSourceEqual(memberA, memberB) && !isTargetEqual(memberA, memberB);\n \t}\n+\t\n+\tprivate boolean isSame(ConceptMapMapping memberA, ConceptMapMapping memberB) {\n+\t\treturn isSourceEqual(memberA, memberB) && isTargetEqual(memberA, memberB);\n+\t}\n \n \tprivate boolean isTargetEqual(ConceptMapMapping memberA, ConceptMapMapping memberB) {\n-\t\treturn Objects.equals(memberA.getTargetComponentURI(), memberB.getTargetComponentURI());\n+\t\tboolean isDifferent = selectedConfig.stream().anyMatch(config -> !config.isTargetEqual(memberA, memberB));\n+\t\treturn !isDifferent;\n \t}\n \n \tprivate boolean isSourceEqual(ConceptMapMapping memberA, ConceptMapMapping memberB) {\n-\t\treturn Objects.equals(memberA.getSourceComponentURI(), memberB.getSourceComponentURI());\n+\t\tboolean isDifferent = selectedConfig.stream().anyMatch(config -> !config.isSourceEqual(memberA, memberB));\n+\t\treturn !isDifferent;\n \t}\n \n }\n", "next_change": {"commit": "3707b08f083e26656a5021db218b6b530c41b71b", "changed_code": [{"header": "diff --git a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java\nindex 0cc3274cb8..db227b12cd 100644\n--- a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java\n+++ b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java\n", "chunk": "@@ -93,61 +94,34 @@ public final class ConceptMapCompareRequest extends ResourceRequest<BranchContex\n \t\n \tprivate ConceptMapCompareResult compareDifferences(ListMultimap<ComponentURI, ConceptMapMapping> baseMappings, ListMultimap<ComponentURI, ConceptMapMapping> compareMappings) {\n \t\t\n-\t\tMultimap<ConceptMapMapping, ConceptMapMapping> allChanged = HashMultimap.create();\n-\t\tList<ConceptMapMapping> allRemoved = Lists.newArrayList();\n-\t\tList<ConceptMapMapping> allAdded = Lists.newArrayList();\n+\t\tList<ConceptMapMapping> allChanged = Lists.newArrayList();\n \t\tSet<ConceptMapMapping> allUnchanged = Sets.newHashSet();\n+\n+\t\tMapCompareSourceAndTargetEquivalence mapCompareEquivalence = new MapCompareSourceAndTargetEquivalence(selectedConfig);\n+\t\tSet<Wrapper<ConceptMapMapping>> baseWrappedMappings = baseMappings.values().stream().map(mapping -> mapCompareEquivalence.wrap(mapping)).collect(Collectors.toSet());\n+\t\tSet<Wrapper<ConceptMapMapping>> compareWrappedMappings = compareMappings.values().stream().map(mapping -> mapCompareEquivalence.wrap(mapping)).collect(Collectors.toSet());\n \t\t\n-\t\tSet<ComponentURI> changedURIs = Sets.intersection(baseMappings.keySet(), compareMappings.keySet());\n+\t\tSet<Wrapper<ConceptMapMapping>> allUnchangedWrappedMappings = Sets.intersection(baseWrappedMappings, compareWrappedMappings);\n+\t\tallUnchangedWrappedMappings.forEach(wrappedMapping -> allUnchanged.add(wrappedMapping.get()));\n \t\t\n-\t\tchangedURIs.forEach(changedURI -> {\n-\t\t\t\n-\t\t\tList<ConceptMapMapping> baseConceptMappings = baseMappings.get(changedURI);\n-\t\t\tList<ConceptMapMapping> compareConceptMappings = compareMappings.get(changedURI);\n-\t\t\t\n-\t\t\tfor (ConceptMapMapping baseConceptMapping : baseConceptMappings) {\n-\t\t\t\tcompareConceptMappings.stream()\n-\t\t\t\t.filter(compareConceptMapping -> isChanged(baseConceptMapping, compareConceptMapping))\n-\t\t\t\t.forEach(compareConceptMapping -> {\n-\t\t\t\t\tif(!allChanged.keySet().stream().anyMatch(mapping -> isSame(baseConceptMapping, mapping)) && !allChanged.values().stream().anyMatch(mapping -> isSame(compareConceptMapping, mapping))) {\n-\t\t\t\t\t\tallChanged.put(baseConceptMapping, compareConceptMapping);\n-\t\t\t\t\t}\n-\t\t\t\t});\n-\t\t\t\tcompareConceptMappings.stream()\n-\t\t\t\t.filter(compareConceptMapping -> isSame(baseConceptMapping, compareConceptMapping))\n-\t\t\t\t.forEach(compareConceptMapping -> {\n-\t\t\t\t\tallUnchanged.add(compareConceptMapping);\n-\t\t\t\t});\n-\t\t\t}\n-\t\t\t\n-\t\t});\n+\t\tSetView<Wrapper<ConceptMapMapping>> onlyBaseWrappedMappings = Sets.difference(baseWrappedMappings, allUnchangedWrappedMappings);\n+\t\tSetView<Wrapper<ConceptMapMapping>> onlyCompareWrappedMappings = Sets.difference(compareWrappedMappings, allUnchangedWrappedMappings);\n \t\t\n-\t\tSetView<ComponentURI> removedURIs = Sets.difference(baseMappings.keySet(), compareMappings.keySet());\n-\t\tremovedURIs.forEach(uri -> allRemoved.addAll(baseMappings.get(uri)));\n+\t\tSet<Wrapper<ConceptMapMapping>> changedBase = onlyBaseWrappedMappings.stream().filter(wrappedMapping -> onlyCompareWrappedMappings.stream().anyMatch(compareWrappedMapping -> isSourceEqual(wrappedMapping.get(), compareWrappedMapping.get()))).collect(Collectors.toSet());\n+\t\tSet<Wrapper<ConceptMapMapping>> changedCompare = onlyCompareWrappedMappings.stream().filter(wrappedMapping -> onlyBaseWrappedMappings.stream().anyMatch(baseWrappedMapping -> isSourceEqual(wrappedMapping.get(), baseWrappedMapping.get()))).collect(Collectors.toSet());\n \t\t\n-\t\tSetView<ComponentURI> addedURIs = Sets.difference(compareMappings.keySet(), baseMappings.keySet());\n-\t\taddedURIs.forEach(uri -> allAdded.addAll(compareMappings.get(uri)));\n+\t\tchangedBase.forEach(mapping -> allChanged.add(mapping.get()));\n+\t\tchangedCompare.forEach(mapping -> allChanged.add(mapping.get()));\n \t\t\n-\t\treturn new ConceptMapCompareResult(allAdded, allRemoved, allChanged, allUnchanged, limit);\n+\t\tList<ConceptMapMapping> allRemoved = onlyBaseWrappedMappings.stream().filter(mapping -> !changedBase.stream().anyMatch(changed -> isSourceEqual(mapping.get(), changed.get()))).map(mapping -> mapping.get()).collect(Collectors.toList());\n+\t\tList<ConceptMapMapping> allAdded = onlyCompareWrappedMappings.stream().filter(mapping -> !changedCompare.stream().anyMatch(changed -> isSourceEqual(mapping.get(), changed.get()))).map(mapping -> mapping.get()).collect(Collectors.toList());\n \t\t\n-\t}\n-\n-\tprivate boolean isChanged(ConceptMapMapping memberA, ConceptMapMapping memberB) {\n-\t\treturn isSourceEqual(memberA, memberB) && !isTargetEqual(memberA, memberB);\n+\t\treturn new ConceptMapCompareResult(allAdded, allRemoved, allChanged, allUnchanged, limit);\n \t}\n \t\n-\tprivate boolean isSame(ConceptMapMapping memberA, ConceptMapMapping memberB) {\n-\t\treturn isSourceEqual(memberA, memberB) && isTargetEqual(memberA, memberB);\n-\t}\n-\n-\tprivate boolean isTargetEqual(ConceptMapMapping memberA, ConceptMapMapping memberB) {\n-\t\tboolean isDifferent = selectedConfig.stream().anyMatch(config -> !config.isTargetEqual(memberA, memberB));\n-\t\treturn !isDifferent;\n-\t}\n-\n \tprivate boolean isSourceEqual(ConceptMapMapping memberA, ConceptMapMapping memberB) {\n \t\tboolean isDifferent = selectedConfig.stream().anyMatch(config -> !config.isSourceEqual(memberA, memberB));\n \t\treturn !isDifferent;\n \t}\n-\n+\t\n }\n", "next_change": {"commit": "6cd2bb79343b8a4d940c1e0c7935b45e7f977711", "changed_code": [{"header": "diff --git a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java\nindex db227b12cd..399e4ac989 100644\n--- a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java\n+++ b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java\n", "chunk": "@@ -98,27 +100,71 @@ public final class ConceptMapCompareRequest extends ResourceRequest<BranchContex\n \t\tSet<ConceptMapMapping> allUnchanged = Sets.newHashSet();\n \n \t\tMapCompareSourceAndTargetEquivalence mapCompareEquivalence = new MapCompareSourceAndTargetEquivalence(selectedConfig);\n-\t\tSet<Wrapper<ConceptMapMapping>> baseWrappedMappings = baseMappings.values().stream().map(mapping -> mapCompareEquivalence.wrap(mapping)).collect(Collectors.toSet());\n-\t\tSet<Wrapper<ConceptMapMapping>> compareWrappedMappings = compareMappings.values().stream().map(mapping -> mapCompareEquivalence.wrap(mapping)).collect(Collectors.toSet());\n+\t\tSet<Wrapper<ConceptMapMapping>> baseWrappedMappings = baseMappings.values().stream()\n+\t\t\t\t.map(mapping -> mapCompareEquivalence.wrap(mapping))\n+\t\t\t\t.collect(Collectors.toSet());\n \t\t\n+\t\tSet<Wrapper<ConceptMapMapping>> compareWrappedMappings = compareMappings.values().stream()\n+\t\t\t\t.map(mapping -> mapCompareEquivalence.wrap(mapping))\n+\t\t\t\t.collect(Collectors.toSet());\n+\t\t\n+\t\t//Unchanged elements are in the intersection\n \t\tSet<Wrapper<ConceptMapMapping>> allUnchangedWrappedMappings = Sets.intersection(baseWrappedMappings, compareWrappedMappings);\n \t\tallUnchangedWrappedMappings.forEach(wrappedMapping -> allUnchanged.add(wrappedMapping.get()));\n \t\t\n+\t\t//Remove the unchanged from further comparison\n \t\tSetView<Wrapper<ConceptMapMapping>> onlyBaseWrappedMappings = Sets.difference(baseWrappedMappings, allUnchangedWrappedMappings);\n \t\tSetView<Wrapper<ConceptMapMapping>> onlyCompareWrappedMappings = Sets.difference(compareWrappedMappings, allUnchangedWrappedMappings);\n \t\t\n-\t\tSet<Wrapper<ConceptMapMapping>> changedBase = onlyBaseWrappedMappings.stream().filter(wrappedMapping -> onlyCompareWrappedMappings.stream().anyMatch(compareWrappedMapping -> isSourceEqual(wrappedMapping.get(), compareWrappedMapping.get()))).collect(Collectors.toSet());\n-\t\tSet<Wrapper<ConceptMapMapping>> changedCompare = onlyCompareWrappedMappings.stream().filter(wrappedMapping -> onlyBaseWrappedMappings.stream().anyMatch(baseWrappedMapping -> isSourceEqual(wrappedMapping.get(), baseWrappedMapping.get()))).collect(Collectors.toSet());\n+\t\tSet<Pair<ConceptMapMapping, ConceptMapMapping>> changedMappings = findChangedMappings(onlyBaseWrappedMappings, onlyCompareWrappedMappings);\n+\t\t\n+\t\tSet<Wrapper<ConceptMapMapping>> changedBase = onlyBaseWrappedMappings.stream()\n+\t\t\t\t.filter(wrappedMapping -> onlyCompareWrappedMappings.stream()\n+\t\t\t\t\t\t.anyMatch(compareWrappedMapping -> isSourceEqual(wrappedMapping.get(), compareWrappedMapping.get())))\n+\t\t\t\t.collect(Collectors.toSet());\n+\t\t\n+\t\tSet<Wrapper<ConceptMapMapping>> changedCompare = onlyCompareWrappedMappings.stream()\n+\t\t\t\t.filter(wrappedMapping -> onlyBaseWrappedMappings.stream()\n+\t\t\t\t\t\t.anyMatch(baseWrappedMapping -> isSourceEqual(wrappedMapping.get(), baseWrappedMapping.get())))\n+\t\t\t\t.collect(Collectors.toSet());\n \t\t\n \t\tchangedBase.forEach(mapping -> allChanged.add(mapping.get()));\n \t\tchangedCompare.forEach(mapping -> allChanged.add(mapping.get()));\n \t\t\n-\t\tList<ConceptMapMapping> allRemoved = onlyBaseWrappedMappings.stream().filter(mapping -> !changedBase.stream().anyMatch(changed -> isSourceEqual(mapping.get(), changed.get()))).map(mapping -> mapping.get()).collect(Collectors.toList());\n-\t\tList<ConceptMapMapping> allAdded = onlyCompareWrappedMappings.stream().filter(mapping -> !changedCompare.stream().anyMatch(changed -> isSourceEqual(mapping.get(), changed.get()))).map(mapping -> mapping.get()).collect(Collectors.toList());\n+\t\tList<ConceptMapMapping> allRemoved = onlyBaseWrappedMappings.stream()\n+\t\t\t\t.filter(mapping -> !changedBase.stream()\n+\t\t\t\t\t\t.anyMatch(changed -> isSourceEqual(mapping.get(), changed.get())))\n+\t\t\t\t.map(mapping -> mapping.get())\n+\t\t\t\t.collect(Collectors.toList());\n+\t\t\n+\t\tList<ConceptMapMapping> allAdded = onlyCompareWrappedMappings.stream()\n+\t\t\t\t.filter(mapping -> !changedCompare.stream()\n+\t\t\t\t\t\t.anyMatch(changed -> isSourceEqual(mapping.get(), changed.get())))\n+\t\t\t\t.map(mapping -> mapping.get())\n+\t\t\t\t.collect(Collectors.toList());\n \t\t\n \t\treturn new ConceptMapCompareResult(allAdded, allRemoved, allChanged, allUnchanged, limit);\n \t}\n \t\n+\tprivate Set<Pair<ConceptMapMapping, ConceptMapMapping>> findChangedMappings(Set<Wrapper<ConceptMapMapping>> onlyBaseWrappedMappings,\n+\t\t\tSet<Wrapper<ConceptMapMapping>> onlyCompareWrappedMappings) {\n+\t\t\n+\t\tMap<String, ConceptMapMapping> baseMappings = onlyBaseWrappedMappings.stream()\n+\t\t\t\t.collect(Collectors.toMap(w -> w.get().getSourceComponentURI().identifier(), w -> w.get()));\n+\t\t\n+\t\tMap<String, ConceptMapMapping> compareMappings = onlyCompareWrappedMappings.stream()\n+\t\t\t\t.collect(Collectors.toMap(w -> w.get().getSourceComponentURI().identifier(), w -> w.get()));\n+\t\t\n+\t\t//the intersection is the changed\n+\t\tSetView<String> commonSourceIds = Sets.intersection(baseMappings.keySet(), compareMappings.keySet());\n+\t\t\n+\t\tSet<Pair<ConceptMapMapping, ConceptMapMapping>> changedPairs = commonSourceIds.stream()\n+\t\t\t.map(sourceId -> Pair.<ConceptMapMapping, ConceptMapMapping>of(baseMappings.get(sourceId), compareMappings.get(sourceId)))\n+\t\t\t.collect(Collectors.toSet());\n+\t\t\n+\t\treturn changedPairs;\n+\t}\n+\n \tprivate boolean isSourceEqual(ConceptMapMapping memberA, ConceptMapMapping memberB) {\n \t\tboolean isDifferent = selectedConfig.stream().anyMatch(config -> !config.isSourceEqual(memberA, memberB));\n \t\treturn !isDifferent;\n", "next_change": {"commit": "1e9eb282776575ef8f1869a8a84174c3a2f2fa4f", "changed_code": [{"header": "diff --git a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java\nindex 399e4ac989..9debb0afc1 100644\n--- a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java\n+++ b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java\n", "chunk": "@@ -145,24 +135,13 @@ public final class ConceptMapCompareRequest extends ResourceRequest<BranchContex\n \t\t\n \t\treturn new ConceptMapCompareResult(allAdded, allRemoved, allChanged, allUnchanged, limit);\n \t}\n-\t\n-\tprivate Set<Pair<ConceptMapMapping, ConceptMapMapping>> findChangedMappings(Set<Wrapper<ConceptMapMapping>> onlyBaseWrappedMappings,\n-\t\t\tSet<Wrapper<ConceptMapMapping>> onlyCompareWrappedMappings) {\n-\t\t\n-\t\tMap<String, ConceptMapMapping> baseMappings = onlyBaseWrappedMappings.stream()\n-\t\t\t\t.collect(Collectors.toMap(w -> w.get().getSourceComponentURI().identifier(), w -> w.get()));\n-\t\t\n-\t\tMap<String, ConceptMapMapping> compareMappings = onlyCompareWrappedMappings.stream()\n-\t\t\t\t.collect(Collectors.toMap(w -> w.get().getSourceComponentURI().identifier(), w -> w.get()));\n-\t\t\n-\t\t//the intersection is the changed\n-\t\tSetView<String> commonSourceIds = Sets.intersection(baseMappings.keySet(), compareMappings.keySet());\n-\t\t\n-\t\tSet<Pair<ConceptMapMapping, ConceptMapMapping>> changedPairs = commonSourceIds.stream()\n-\t\t\t.map(sourceId -> Pair.<ConceptMapMapping, ConceptMapMapping>of(baseMappings.get(sourceId), compareMappings.get(sourceId)))\n-\t\t\t.collect(Collectors.toSet());\n-\t\t\n-\t\treturn changedPairs;\n+\n+\tprivate Set<Wrapper<ConceptMapMapping>> extractChangedMappings(SetView<Wrapper<ConceptMapMapping>> mappingsToChooseFrom,\n+\t\t\tSetView<Wrapper<ConceptMapMapping>> mappingsToCompareTo) {\n+\t\treturn mappingsToChooseFrom.stream()\n+\t\t\t\t.filter(wrappedMapping -> mappingsToCompareTo.stream()\n+\t\t\t\t\t\t.anyMatch(compareWrappedMapping -> isSourceEqual(wrappedMapping.get(), compareWrappedMapping.get())))\n+\t\t\t\t.collect(Collectors.toSet());\n \t}\n \n \tprivate boolean isSourceEqual(ConceptMapMapping memberA, ConceptMapMapping memberB) {\n", "next_change": {"commit": "fea99cba37459a9af1aae44912f79587fef574a6", "changed_code": [{"header": "diff --git a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java\nindex 9debb0afc1..710653fecd 100644\n--- a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java\n+++ b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java\n", "chunk": "@@ -61,92 +72,104 @@ public final class ConceptMapCompareRequest extends ResourceRequest<BranchContex\n \n \t@Override\n \tpublic ConceptMapCompareResult execute(BranchContext context) {\n+\t\tList<ConceptMapMapping> baseMappings = fetchConceptMapMappings(context, baseConceptMapURI.identifier());\n+\t\tList<ConceptMapMapping> compareMappings = fetchConceptMapMappings(context, compareConceptMapURI.identifier());\n \n-\t\tListMultimap<ComponentURI, ConceptMapMapping> baseMappings = ArrayListMultimap.create();\n-\t\tListMultimap<ComponentURI, ConceptMapMapping> compareMappings = ArrayListMultimap.create();\n-\n-\t\tfinal SearchResourceRequestIterator<ConceptMapMappingSearchRequestBuilder, ConceptMapMappings> baseIterator = new SearchResourceRequestIterator<>(\n-\t\t\t\tCodeSystemRequests.prepareSearchConceptMapMappings()\n-\t\t\t\t.filterByConceptMap(baseConceptMapURI.identifier())\n-\t\t\t\t.setLocales(locales())\n-\t\t\t\t.setLimit(DEFAULT_MEMBER_SCROLL_LIMIT),\n-\t\t\t\tr -> r.build().execute(context)\n-\t\t\t);\n-\n-\t\tbaseIterator.forEachRemaining(hits -> hits.forEach(hit -> {\n-\t\t\tbaseMappings.put(hit.getSourceComponentURI(), hit);\n-\t\t}));\n+\t\tmapCompareEquivalence = new MapCompareSourceAndTargetEquivalence(selectedConfig);\n+\t\t\n+\t\treturn compareDifferences(baseMappings, compareMappings);\n+\t}\n \n-\t\tfinal SearchResourceRequestIterator<ConceptMapMappingSearchRequestBuilder, ConceptMapMappings> compareIterator = new SearchResourceRequestIterator<>(\n+\tprivate List<ConceptMapMapping> fetchConceptMapMappings(BranchContext context, String conceptMapId) {\n+\t\tList<ConceptMapMapping> baseMappings = Lists.newArrayList();\n+\t\tnew SearchResourceRequestIterator<>(\n \t\t\t\tCodeSystemRequests.prepareSearchConceptMapMappings()\n-\t\t\t\t.filterByConceptMap(compareConceptMapURI.identifier())\n+\t\t\t\t.filterByConceptMap(conceptMapId)\n \t\t\t\t.setLocales(locales())\n \t\t\t\t.setLimit(DEFAULT_MEMBER_SCROLL_LIMIT),\n \t\t\t\tr -> r.build().execute(context)\n-\t\t\t);\n-\n-\t\tcompareIterator.forEachRemaining(hits -> hits.forEach(hit -> {\n-\t\t\tcompareMappings.put(hit.getSourceComponentURI(), hit);\n-\t\t}));\n-\n-\t\treturn compareDifferences(baseMappings, compareMappings);\n+\t\t\t).forEachRemaining(hits -> hits.forEach(baseMappings::add));\n+\t\treturn baseMappings;\n \t}\n \t\n-\tprivate ConceptMapCompareResult compareDifferences(ListMultimap<ComponentURI, ConceptMapMapping> baseMappings, ListMultimap<ComponentURI, ConceptMapMapping> compareMappings) {\n-\t\t\n-\t\tList<ConceptMapMapping> allChanged = Lists.newArrayList();\n-\t\tSet<ConceptMapMapping> allUnchanged = Sets.newHashSet();\n+\tprivate ConceptMapCompareResult compareDifferences(List<ConceptMapMapping> baseMappings, List<ConceptMapMapping> compareMappings) {\n \n-\t\tMapCompareSourceAndTargetEquivalence mapCompareEquivalence = new MapCompareSourceAndTargetEquivalence(selectedConfig);\n-\t\tSet<Wrapper<ConceptMapMapping>> baseWrappedMappings = baseMappings.values().stream()\n-\t\t\t\t.map(mapping -> mapCompareEquivalence.wrap(mapping))\n-\t\t\t\t.collect(Collectors.toSet());\n-\t\t\n-\t\tSet<Wrapper<ConceptMapMapping>> compareWrappedMappings = compareMappings.values().stream()\n-\t\t\t\t.map(mapping -> mapCompareEquivalence.wrap(mapping))\n-\t\t\t\t.collect(Collectors.toSet());\n+\t\t//Wrap the mappings to be compared and processed using set operations\n+\t\tSet<Wrapper<ConceptMapMapping>> baseWrappedMappings = wrapMappings(baseMappings);\n+\t\tSet<Wrapper<ConceptMapMapping>> compareWrappedMappings = wrapMappings(compareMappings);\n \t\t\n \t\t//Unchanged elements are in the intersection\n \t\tSet<Wrapper<ConceptMapMapping>> allUnchangedWrappedMappings = Sets.intersection(baseWrappedMappings, compareWrappedMappings);\n-\t\tallUnchangedWrappedMappings.forEach(wrappedMapping -> allUnchanged.add(wrappedMapping.get()));\n+\t\t\n+\t\tList<ConceptMapCompareResultItem> allUnchanged = allUnchangedWrappedMappings.stream()\n+\t\t\t.map(w -> new ConceptMapCompareResultItem(ConceptMapCompareChangeKind.SAME, w.get()))\n+\t\t\t.collect(Collectors.toList());\n \t\t\n \t\t//Remove the unchanged from further comparison\n-\t\tSetView<Wrapper<ConceptMapMapping>> onlyBaseWrappedMappings = Sets.difference(baseWrappedMappings, allUnchangedWrappedMappings);\n-\t\tSetView<Wrapper<ConceptMapMapping>> onlyCompareWrappedMappings = Sets.difference(compareWrappedMappings, allUnchangedWrappedMappings);\n+\t\tSet<Wrapper<ConceptMapMapping>> onlyBaseWrappedMappings = Sets.difference(baseWrappedMappings, allUnchangedWrappedMappings);\n+\t\tSet<Wrapper<ConceptMapMapping>> onlyCompareWrappedMappings = Sets.difference(compareWrappedMappings, allUnchangedWrappedMappings);\n+\t\t\n+\t\t//Multimaps based on the configured equivalence properties\n+\t\tMultimap<String, Wrapper<ConceptMapMapping>> baseMMap = collectMapEntries(onlyBaseWrappedMappings);\n+\t\tMultimap<String, Wrapper<ConceptMapMapping>> compareMMap = collectMapEntries(onlyCompareWrappedMappings);\n \t\t\n-\t\tSet<Wrapper<ConceptMapMapping>> changedBase = extractChangedMappings(onlyBaseWrappedMappings, onlyCompareWrappedMappings);\n+\t\tSet<String> sourceCompoundKeys = baseMMap.keySet();\n+\t\tSet<String> targetCompoundKeys = compareMMap.keySet();\n \t\t\n-\t\tSet<Wrapper<ConceptMapMapping>> changedCompare = extractChangedMappings(onlyCompareWrappedMappings, onlyBaseWrappedMappings);\n+\t\tSet<String> presentKeys = Sets.difference(sourceCompoundKeys, targetCompoundKeys);\n+\t\tSet<String> missingKeys = Sets.difference(targetCompoundKeys, sourceCompoundKeys);\n \t\t\n-\t\tchangedBase.forEach(mapping -> allChanged.add(mapping.get()));\n-\t\tchangedCompare.forEach(mapping -> allChanged.add(mapping.get()));\n+\t\t//Collect the 'Present' mappings\n+\t\tSet<Wrapper<ConceptMapMapping>> presentMappings = Sets.newHashSet();\n+\t\tpresentKeys.stream().forEach(k -> presentMappings.addAll(baseMMap.get(k)));\n+\t\tList<ConceptMapCompareResultItem> allRemoved = presentMappings.stream().map(w -> new ConceptMapCompareResultItem(ConceptMapCompareChangeKind.PRESENT, w.get())).collect(Collectors.toList());\n \t\t\n-\t\tList<ConceptMapMapping> allRemoved = onlyBaseWrappedMappings.stream()\n-\t\t\t\t.filter(mapping -> !changedBase.stream()\n-\t\t\t\t\t\t.anyMatch(changed -> isSourceEqual(mapping.get(), changed.get())))\n-\t\t\t\t.map(mapping -> mapping.get())\n-\t\t\t\t.collect(Collectors.toList());\n+\t\t//Collect the 'Missing' mappings\n+\t\tSet<Wrapper<ConceptMapMapping>> missingMappings = Sets.newHashSet();\n+\t\tmissingKeys.stream().forEach(k -> missingMappings.addAll(compareMMap.get(k)));\n+\t\tList<ConceptMapCompareResultItem> allAdded = missingMappings.stream().map(w -> new ConceptMapCompareResultItem(ConceptMapCompareChangeKind.MISSING, w.get())).collect(Collectors.toList());\n \t\t\n-\t\tList<ConceptMapMapping> allAdded = onlyCompareWrappedMappings.stream()\n-\t\t\t\t.filter(mapping -> !changedCompare.stream()\n-\t\t\t\t\t\t.anyMatch(changed -> isSourceEqual(mapping.get(), changed.get())))\n-\t\t\t\t.map(mapping -> mapping.get())\n-\t\t\t\t.collect(Collectors.toList());\n+\t\t//Remove the already processed missing and present mappings and the remaining items are the different mappings\n+\t\tSet<Wrapper<ConceptMapMapping>> sourceDifferentMappings = Sets.difference(onlyBaseWrappedMappings, presentMappings);\n+\t\tSet<Wrapper<ConceptMapMapping>> targetDifferentMappings = Sets.difference(onlyCompareWrappedMappings, missingMappings);\n \t\t\n-\t\treturn new ConceptMapCompareResult(allAdded, allRemoved, allChanged, allUnchanged, limit);\n+\t\tList<ConceptMapCompareResultItem> allChanged = Lists.newArrayList();\n+\t\t\n+\t\tsourceDifferentMappings.forEach(w -> {\n+\t\t\tallChanged.add(new ConceptMapCompareResultItem(ConceptMapCompareChangeKind.DIFFERENT_TARGET, w.get()));\n+\t\t});\n+\t\t\n+\t\ttargetDifferentMappings.forEach(w -> {\n+\t\t\tallChanged.add(new ConceptMapCompareResultItem(ConceptMapCompareChangeKind.DIFFERENT_TARGET, w.get()));\n+\t\t});\n+\t\t\n+\t\tList<ConceptMapCompareResultItem> items = ImmutableList.<ConceptMapCompareResultItem>builder()\n+\t\t\t.addAll(allAdded)\n+\t\t\t.addAll(allRemoved)\n+\t\t\t.addAll(allChanged)\n+\t\t\t.addAll(allUnchanged)\n+\t\t\t.build()\n+\t\t\t.stream()\n+\t\t\t.sorted()\n+\t\t\t.limit(limit)\n+\t\t\t.collect(Collectors.toList());\n+\t\t\n+\t\treturn new ConceptMapCompareResult(items, allAdded.size(), allRemoved.size(), allChanged.size(), allUnchanged.size(), limit);\n \t}\n \n-\tprivate Set<Wrapper<ConceptMapMapping>> extractChangedMappings(SetView<Wrapper<ConceptMapMapping>> mappingsToChooseFrom,\n-\t\t\tSetView<Wrapper<ConceptMapMapping>> mappingsToCompareTo) {\n-\t\treturn mappingsToChooseFrom.stream()\n-\t\t\t\t.filter(wrappedMapping -> mappingsToCompareTo.stream()\n-\t\t\t\t\t\t.anyMatch(compareWrappedMapping -> isSourceEqual(wrappedMapping.get(), compareWrappedMapping.get())))\n-\t\t\t\t.collect(Collectors.toSet());\n+\t/*\n+\t * Create a multimap for the passed in mappings with a compound key that is based on the selected configuration\n+\t */\n+\tprivate Multimap<String, Wrapper<ConceptMapMapping>> collectMapEntries(Set<Wrapper<ConceptMapMapping>> wrappedMappings) {\n+\t\tMultimap<String, Wrapper<ConceptMapMapping>> baseMMap = HashMultimap.create();\n+\t\twrappedMappings.stream().forEach(w -> baseMMap.put(ConceptMapCompareConfigurationProperties.getCompoundKey(selectedConfig, w.get()), w));\n+\t\treturn baseMMap;\n \t}\n \n-\tprivate boolean isSourceEqual(ConceptMapMapping memberA, ConceptMapMapping memberB) {\n-\t\tboolean isDifferent = selectedConfig.stream().anyMatch(config -> !config.isSourceEqual(memberA, memberB));\n-\t\treturn !isDifferent;\n+\tprivate Set<Wrapper<ConceptMapMapping>> wrapMappings(List<ConceptMapMapping> mappings) {\n+\t\treturn mappings.stream()\n+\t\t\t\t.map(mapping -> mapCompareEquivalence.wrap(mapping))\n+\t\t\t\t.collect(Collectors.toSet());\n \t}\n \t\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc0Njg2Nw==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/610#discussion_r460746867", "body": "Rename this method to `isEqual()`.", "bodyText": "Rename this method to isEqual().", "bodyHTML": "<p dir=\"auto\">Rename this method to <code>isEqual()</code>.</p>", "author": "cmark", "createdAt": "2020-07-27T08:59:56Z", "path": "core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright 2020 B2i Healthcare Pte Ltd, http://b2i.sg\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.b2international.snowowl.core.request;\n+\n+import java.util.List;\n+import java.util.Objects;\n+\n+import com.b2international.snowowl.core.codesystem.CodeSystemRequests;\n+import com.b2international.snowowl.core.compare.ConceptMapCompareResult;\n+import com.b2international.snowowl.core.domain.BranchContext;\n+import com.b2international.snowowl.core.domain.SetMapping;\n+import com.b2international.snowowl.core.domain.SetMappings;\n+import com.b2international.snowowl.core.uri.ComponentURI;\n+import com.google.common.collect.ArrayListMultimap;\n+import com.google.common.collect.ListMultimap;\n+import com.google.common.collect.Lists;\n+\n+/**\n+* @since 7.8\n+*/\n+final class ConceptMapCompareRequest extends ResourceRequest<BranchContext, ConceptMapCompareResult> {\n+\t\n+\tprivate static final long serialVersionUID = 1L;\n+\t\n+\tprivate final ComponentURI baseConceptMapURI;\n+\tprivate final ComponentURI compareConceptMapURI;\n+\t\n+\tConceptMapCompareRequest(ComponentURI baseConceptMapURI, ComponentURI compareConceptMapURI) {\n+\t\tthis.baseConceptMapURI = baseConceptMapURI;\n+\t\tthis.compareConceptMapURI = compareConceptMapURI;\n+\t}\n+\n+\t@Override\n+\tpublic ConceptMapCompareResult execute(BranchContext context) {\n+\t\t\n+\t\tList<SetMapping> baseMappings = Lists.newArrayList();\n+\t\tList<SetMapping> compareMappings = Lists.newArrayList();\n+\t\t\n+\t\tfinal SearchResourceRequestIterator<MappingSearchRequestBuilder, SetMappings> baseIterator = new SearchResourceRequestIterator<>(\n+\t\t\t\tCodeSystemRequests.prepareSearchMappings()\n+\t\t\t\t.filterBySet(baseConceptMapURI.identifier())\n+\t\t\t\t.setLocales(locales())\n+\t\t\t\t.setLimit(10_000),\n+\t\t\t\tr -> r.build().execute(context)\n+\t\t);\n+\t\t\n+\t\tbaseIterator.forEachRemaining(hits -> hits.forEach(baseMappings::add));\n+\n+\t\tfinal SearchResourceRequestIterator<MappingSearchRequestBuilder, SetMappings> compareIterator = new SearchResourceRequestIterator<>(\n+\t\t\t\tCodeSystemRequests.prepareSearchMappings()\n+\t\t\t\t.filterBySet(compareConceptMapURI.identifier())\n+\t\t\t\t.setLocales(locales())\n+\t\t\t\t.setLimit(10_000),\n+\t\t\t\tr -> r.build().execute(context)\n+\t\t);\n+\t\t\n+\t\tcompareIterator.forEachRemaining(hits -> hits.forEach(compareMappings::add));\n+\t\t\n+\t\tConceptMapCompareResult result = compareDifferents(baseMappings, compareMappings);\n+\t\treturn result; \n+\t}\n+\t\n+\tprivate ConceptMapCompareResult compareDifferents(List<SetMapping> baseSet, List<SetMapping> compareSet) {\n+\t\tListMultimap<SetMapping, SetMapping> changes = ArrayListMultimap.create();\n+\t\tList<SetMapping> remove = Lists.newArrayList();\n+\t\tList<SetMapping> add = Lists.newArrayList();\n+\n+\t\tremove.addAll(baseSet);\n+\t\tadd.addAll(compareSet);\n+\n+\t\tfor (SetMapping memberA : baseSet) {\n+\t\t\tcompareSet.forEach(memberB -> {\n+\t\t\t\tif (isSame(memberA, memberB)) {\n+\t\t\t\t\tremove.remove(memberA);\n+\t\t\t\t\tadd.remove(memberB);\n+\t\t\t\t} else if (isChanged(memberA, memberB)) {\n+\t\t\t\t\tremove.remove(memberA);\n+\t\t\t\t\tadd.remove(memberB);\n+\t\t\t\t\tchanges.put(memberA, memberB);\n+\t\t\t\t}\n+\t\t\t});\n+\t\t}\n+\t\treturn new ConceptMapCompareResult (add, remove, changes);\n+\t}\n+\n+\tprivate boolean isSame(SetMapping memberA, SetMapping memberB) {", "originalCommit": "2e4c32c6e8053ecbafe4552a6a8d1e36ef1b0d64", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgzNTU2Mw==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/610#discussion_r460835563", "bodyText": "Done", "author": "molnarlaura", "createdAt": "2020-07-27T11:51:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc0Njg2Nw=="}], "type": "inlineReview", "revised_code": {"commit": "cc2d2fb84353682193f78e2e3772b5c730f50892", "changed_code": [{"header": "diff --git a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java\nindex bd356cd2b9..2e88cb58b4 100644\n--- a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java\n+++ b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java\n", "chunk": "@@ -96,19 +96,19 @@ final class ConceptMapCompareRequest extends ResourceRequest<BranchContext, Conc\n \t\treturn new ConceptMapCompareResult (add, remove, changes);\n \t}\n \n-\tprivate boolean isSame(SetMapping memberA, SetMapping memberB) {\n+\tprivate boolean isSame(ConceptMapMapping memberA, ConceptMapMapping memberB) {\n \t\treturn isSourceEqual(memberA, memberB) && isTargetEqual(memberA, memberB);\n \t}\n \n-\tprivate boolean isChanged(SetMapping memberA, SetMapping memberB) {\n+\tprivate boolean isChanged(ConceptMapMapping memberA, ConceptMapMapping memberB) {\n \t\treturn isSourceEqual(memberA, memberB) && !isTargetEqual(memberA, memberB);\n \t}\n \n-\tprivate boolean isTargetEqual(SetMapping memberA, SetMapping memberB) {\n+\tprivate boolean isTargetEqual(ConceptMapMapping memberA, ConceptMapMapping memberB) {\n \t\treturn  Objects.equals(memberA.getTargetComponentURI(),memberB.getTargetComponentURI());\n \t}\n \n-\tprivate boolean isSourceEqual(SetMapping memberA, SetMapping memberB){\n+\tprivate boolean isSourceEqual(ConceptMapMapping memberA, ConceptMapMapping memberB){\n \t\treturn Objects.equals(memberA.getSourceComponentURI(), memberB.getSourceComponentURI());\n \t}\n \n", "next_change": {"commit": "132b0416edbc0e9646a7e70136bcc0646c00bece", "changed_code": [{"header": "diff --git a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java\nindex 2e88cb58b4..983151b690 100644\n--- a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java\n+++ b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java\n", "chunk": "@@ -105,10 +105,10 @@ final class ConceptMapCompareRequest extends ResourceRequest<BranchContext, Conc\n \t}\n \n \tprivate boolean isTargetEqual(ConceptMapMapping memberA, ConceptMapMapping memberB) {\n-\t\treturn  Objects.equals(memberA.getTargetComponentURI(),memberB.getTargetComponentURI());\n+\t\treturn Objects.equals(memberA.getTargetComponentURI(), memberB.getTargetComponentURI());\n \t}\n \n-\tprivate boolean isSourceEqual(ConceptMapMapping memberA, ConceptMapMapping memberB){\n+\tprivate boolean isSourceEqual(ConceptMapMapping memberA, ConceptMapMapping memberB) {\n \t\treturn Objects.equals(memberA.getSourceComponentURI(), memberB.getSourceComponentURI());\n \t}\n \n", "next_change": {"commit": "f8c528b9c050a31b6cc5d60f6a478fafaec63e9d", "changed_code": [{"header": "diff --git a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java\nindex 983151b690..0cc3274cb8 100644\n--- a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java\n+++ b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java\n", "chunk": "@@ -35,81 +42,112 @@ public final class ConceptMapCompareRequest extends ResourceRequest<BranchContex\n \t\n \tprivate static final long serialVersionUID = 1L;\n \t\n+\tprivate static final int DEFAULT_MEMBER_SCROLL_LIMIT = 10_000;\n+\t\n \tprivate final ComponentURI baseConceptMapURI;\n \tprivate final ComponentURI compareConceptMapURI;\n+\tprivate final Set<ConceptMapCompareConfigurationProperties> selectedConfig;\n+\t\n+\t@Min(0)\n+\tprivate int limit;\n \t\n-\tConceptMapCompareRequest(ComponentURI baseConceptMapURI, ComponentURI compareConceptMapURI) {\n+\tConceptMapCompareRequest(ComponentURI baseConceptMapURI, ComponentURI compareConceptMapURI, int limit, Set<ConceptMapCompareConfigurationProperties> selectedConfig) {\n \t\tthis.baseConceptMapURI = baseConceptMapURI;\n \t\tthis.compareConceptMapURI = compareConceptMapURI;\n+\t\tthis.limit = limit;\n+\t\tthis.selectedConfig = selectedConfig;\n \t}\n \n \t@Override\n \tpublic ConceptMapCompareResult execute(BranchContext context) {\n \n-\t\tList<ConceptMapMapping> baseMappings = Lists.newArrayList();\n-\t\tList<ConceptMapMapping> compareMappings = Lists.newArrayList();\n+\t\tListMultimap<ComponentURI, ConceptMapMapping> baseMappings = ArrayListMultimap.create();\n+\t\tListMultimap<ComponentURI, ConceptMapMapping> compareMappings = ArrayListMultimap.create();\n \n \t\tfinal SearchResourceRequestIterator<ConceptMapMappingSearchRequestBuilder, ConceptMapMappings> baseIterator = new SearchResourceRequestIterator<>(\n \t\t\t\tCodeSystemRequests.prepareSearchConceptMapMappings()\n \t\t\t\t.filterByConceptMap(baseConceptMapURI.identifier())\n \t\t\t\t.setLocales(locales())\n-\t\t\t\t.setLimit(10_000),\n+\t\t\t\t.setLimit(DEFAULT_MEMBER_SCROLL_LIMIT),\n \t\t\t\tr -> r.build().execute(context)\n-\t\t\t\t);\n+\t\t\t);\n \n-\t\tbaseIterator.forEachRemaining(hits -> hits.forEach(baseMappings::add));\n+\t\tbaseIterator.forEachRemaining(hits -> hits.forEach(hit -> {\n+\t\t\tbaseMappings.put(hit.getSourceComponentURI(), hit);\n+\t\t}));\n \n \t\tfinal SearchResourceRequestIterator<ConceptMapMappingSearchRequestBuilder, ConceptMapMappings> compareIterator = new SearchResourceRequestIterator<>(\n \t\t\t\tCodeSystemRequests.prepareSearchConceptMapMappings()\n \t\t\t\t.filterByConceptMap(compareConceptMapURI.identifier())\n \t\t\t\t.setLocales(locales())\n-\t\t\t\t.setLimit(10_000),\n+\t\t\t\t.setLimit(DEFAULT_MEMBER_SCROLL_LIMIT),\n \t\t\t\tr -> r.build().execute(context)\n-\t\t\t\t);\n+\t\t\t);\n \n-\t\tcompareIterator.forEachRemaining(hits -> hits.forEach(compareMappings::add));\n+\t\tcompareIterator.forEachRemaining(hits -> hits.forEach(hit -> {\n+\t\t\tcompareMappings.put(hit.getSourceComponentURI(), hit);\n+\t\t}));\n \n-\t\tConceptMapCompareResult result = compareDifferents(baseMappings, compareMappings);\n-\t\treturn result; \n+\t\treturn compareDifferences(baseMappings, compareMappings);\n \t}\n \t\n-\tprivate ConceptMapCompareResult compareDifferents(List<ConceptMapMapping> baseSet, List<ConceptMapMapping> compareSet) {\n-\t\tListMultimap<ConceptMapMapping, ConceptMapMapping> changed = ArrayListMultimap.create();\n-\t\tList<ConceptMapMapping> removed = Lists.newArrayList();\n-\t\tList<ConceptMapMapping> added = Lists.newArrayList();\n-\n-\t\tremoved.addAll(baseSet);\n-\t\tadded.addAll(compareSet);\n-\n-\t\tfor (ConceptMapMapping memberA : baseSet) {\n-\t\t\tcompareSet.forEach(memberB -> {\n-\t\t\t\tif (isEqual(memberA, memberB)) {\n-\t\t\t\t\tremoved.remove(memberA);\n-\t\t\t\t\tadded.remove(memberB);\n-\t\t\t\t} else if (isChanged(memberA, memberB)) {\n-\t\t\t\t\tremoved.remove(memberA);\n-\t\t\t\t\tadded.remove(memberB);\n-\t\t\t\t\tchanged.put(memberA, memberB);\n-\t\t\t\t}\n-\t\t\t});\n-\t\t}\n-\t\treturn new ConceptMapCompareResult(added, removed, changed);\n-\t}\n-\n-\tprivate boolean isEqual(ConceptMapMapping memberA, ConceptMapMapping memberB) {\n-\t\treturn isSourceEqual(memberA, memberB) && isTargetEqual(memberA, memberB);\n+\tprivate ConceptMapCompareResult compareDifferences(ListMultimap<ComponentURI, ConceptMapMapping> baseMappings, ListMultimap<ComponentURI, ConceptMapMapping> compareMappings) {\n+\t\t\n+\t\tMultimap<ConceptMapMapping, ConceptMapMapping> allChanged = HashMultimap.create();\n+\t\tList<ConceptMapMapping> allRemoved = Lists.newArrayList();\n+\t\tList<ConceptMapMapping> allAdded = Lists.newArrayList();\n+\t\tSet<ConceptMapMapping> allUnchanged = Sets.newHashSet();\n+\t\t\n+\t\tSet<ComponentURI> changedURIs = Sets.intersection(baseMappings.keySet(), compareMappings.keySet());\n+\t\t\n+\t\tchangedURIs.forEach(changedURI -> {\n+\t\t\t\n+\t\t\tList<ConceptMapMapping> baseConceptMappings = baseMappings.get(changedURI);\n+\t\t\tList<ConceptMapMapping> compareConceptMappings = compareMappings.get(changedURI);\n+\t\t\t\n+\t\t\tfor (ConceptMapMapping baseConceptMapping : baseConceptMappings) {\n+\t\t\t\tcompareConceptMappings.stream()\n+\t\t\t\t.filter(compareConceptMapping -> isChanged(baseConceptMapping, compareConceptMapping))\n+\t\t\t\t.forEach(compareConceptMapping -> {\n+\t\t\t\t\tif(!allChanged.keySet().stream().anyMatch(mapping -> isSame(baseConceptMapping, mapping)) && !allChanged.values().stream().anyMatch(mapping -> isSame(compareConceptMapping, mapping))) {\n+\t\t\t\t\t\tallChanged.put(baseConceptMapping, compareConceptMapping);\n+\t\t\t\t\t}\n+\t\t\t\t});\n+\t\t\t\tcompareConceptMappings.stream()\n+\t\t\t\t.filter(compareConceptMapping -> isSame(baseConceptMapping, compareConceptMapping))\n+\t\t\t\t.forEach(compareConceptMapping -> {\n+\t\t\t\t\tallUnchanged.add(compareConceptMapping);\n+\t\t\t\t});\n+\t\t\t}\n+\t\t\t\n+\t\t});\n+\t\t\n+\t\tSetView<ComponentURI> removedURIs = Sets.difference(baseMappings.keySet(), compareMappings.keySet());\n+\t\tremovedURIs.forEach(uri -> allRemoved.addAll(baseMappings.get(uri)));\n+\t\t\n+\t\tSetView<ComponentURI> addedURIs = Sets.difference(compareMappings.keySet(), baseMappings.keySet());\n+\t\taddedURIs.forEach(uri -> allAdded.addAll(compareMappings.get(uri)));\n+\t\t\n+\t\treturn new ConceptMapCompareResult(allAdded, allRemoved, allChanged, allUnchanged, limit);\n+\t\t\n \t}\n \n \tprivate boolean isChanged(ConceptMapMapping memberA, ConceptMapMapping memberB) {\n \t\treturn isSourceEqual(memberA, memberB) && !isTargetEqual(memberA, memberB);\n \t}\n+\t\n+\tprivate boolean isSame(ConceptMapMapping memberA, ConceptMapMapping memberB) {\n+\t\treturn isSourceEqual(memberA, memberB) && isTargetEqual(memberA, memberB);\n+\t}\n \n \tprivate boolean isTargetEqual(ConceptMapMapping memberA, ConceptMapMapping memberB) {\n-\t\treturn Objects.equals(memberA.getTargetComponentURI(), memberB.getTargetComponentURI());\n+\t\tboolean isDifferent = selectedConfig.stream().anyMatch(config -> !config.isTargetEqual(memberA, memberB));\n+\t\treturn !isDifferent;\n \t}\n \n \tprivate boolean isSourceEqual(ConceptMapMapping memberA, ConceptMapMapping memberB) {\n-\t\treturn Objects.equals(memberA.getSourceComponentURI(), memberB.getSourceComponentURI());\n+\t\tboolean isDifferent = selectedConfig.stream().anyMatch(config -> !config.isSourceEqual(memberA, memberB));\n+\t\treturn !isDifferent;\n \t}\n \n }\n", "next_change": {"commit": "3707b08f083e26656a5021db218b6b530c41b71b", "changed_code": [{"header": "diff --git a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java\nindex 0cc3274cb8..db227b12cd 100644\n--- a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java\n+++ b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java\n", "chunk": "@@ -93,61 +94,34 @@ public final class ConceptMapCompareRequest extends ResourceRequest<BranchContex\n \t\n \tprivate ConceptMapCompareResult compareDifferences(ListMultimap<ComponentURI, ConceptMapMapping> baseMappings, ListMultimap<ComponentURI, ConceptMapMapping> compareMappings) {\n \t\t\n-\t\tMultimap<ConceptMapMapping, ConceptMapMapping> allChanged = HashMultimap.create();\n-\t\tList<ConceptMapMapping> allRemoved = Lists.newArrayList();\n-\t\tList<ConceptMapMapping> allAdded = Lists.newArrayList();\n+\t\tList<ConceptMapMapping> allChanged = Lists.newArrayList();\n \t\tSet<ConceptMapMapping> allUnchanged = Sets.newHashSet();\n+\n+\t\tMapCompareSourceAndTargetEquivalence mapCompareEquivalence = new MapCompareSourceAndTargetEquivalence(selectedConfig);\n+\t\tSet<Wrapper<ConceptMapMapping>> baseWrappedMappings = baseMappings.values().stream().map(mapping -> mapCompareEquivalence.wrap(mapping)).collect(Collectors.toSet());\n+\t\tSet<Wrapper<ConceptMapMapping>> compareWrappedMappings = compareMappings.values().stream().map(mapping -> mapCompareEquivalence.wrap(mapping)).collect(Collectors.toSet());\n \t\t\n-\t\tSet<ComponentURI> changedURIs = Sets.intersection(baseMappings.keySet(), compareMappings.keySet());\n+\t\tSet<Wrapper<ConceptMapMapping>> allUnchangedWrappedMappings = Sets.intersection(baseWrappedMappings, compareWrappedMappings);\n+\t\tallUnchangedWrappedMappings.forEach(wrappedMapping -> allUnchanged.add(wrappedMapping.get()));\n \t\t\n-\t\tchangedURIs.forEach(changedURI -> {\n-\t\t\t\n-\t\t\tList<ConceptMapMapping> baseConceptMappings = baseMappings.get(changedURI);\n-\t\t\tList<ConceptMapMapping> compareConceptMappings = compareMappings.get(changedURI);\n-\t\t\t\n-\t\t\tfor (ConceptMapMapping baseConceptMapping : baseConceptMappings) {\n-\t\t\t\tcompareConceptMappings.stream()\n-\t\t\t\t.filter(compareConceptMapping -> isChanged(baseConceptMapping, compareConceptMapping))\n-\t\t\t\t.forEach(compareConceptMapping -> {\n-\t\t\t\t\tif(!allChanged.keySet().stream().anyMatch(mapping -> isSame(baseConceptMapping, mapping)) && !allChanged.values().stream().anyMatch(mapping -> isSame(compareConceptMapping, mapping))) {\n-\t\t\t\t\t\tallChanged.put(baseConceptMapping, compareConceptMapping);\n-\t\t\t\t\t}\n-\t\t\t\t});\n-\t\t\t\tcompareConceptMappings.stream()\n-\t\t\t\t.filter(compareConceptMapping -> isSame(baseConceptMapping, compareConceptMapping))\n-\t\t\t\t.forEach(compareConceptMapping -> {\n-\t\t\t\t\tallUnchanged.add(compareConceptMapping);\n-\t\t\t\t});\n-\t\t\t}\n-\t\t\t\n-\t\t});\n+\t\tSetView<Wrapper<ConceptMapMapping>> onlyBaseWrappedMappings = Sets.difference(baseWrappedMappings, allUnchangedWrappedMappings);\n+\t\tSetView<Wrapper<ConceptMapMapping>> onlyCompareWrappedMappings = Sets.difference(compareWrappedMappings, allUnchangedWrappedMappings);\n \t\t\n-\t\tSetView<ComponentURI> removedURIs = Sets.difference(baseMappings.keySet(), compareMappings.keySet());\n-\t\tremovedURIs.forEach(uri -> allRemoved.addAll(baseMappings.get(uri)));\n+\t\tSet<Wrapper<ConceptMapMapping>> changedBase = onlyBaseWrappedMappings.stream().filter(wrappedMapping -> onlyCompareWrappedMappings.stream().anyMatch(compareWrappedMapping -> isSourceEqual(wrappedMapping.get(), compareWrappedMapping.get()))).collect(Collectors.toSet());\n+\t\tSet<Wrapper<ConceptMapMapping>> changedCompare = onlyCompareWrappedMappings.stream().filter(wrappedMapping -> onlyBaseWrappedMappings.stream().anyMatch(baseWrappedMapping -> isSourceEqual(wrappedMapping.get(), baseWrappedMapping.get()))).collect(Collectors.toSet());\n \t\t\n-\t\tSetView<ComponentURI> addedURIs = Sets.difference(compareMappings.keySet(), baseMappings.keySet());\n-\t\taddedURIs.forEach(uri -> allAdded.addAll(compareMappings.get(uri)));\n+\t\tchangedBase.forEach(mapping -> allChanged.add(mapping.get()));\n+\t\tchangedCompare.forEach(mapping -> allChanged.add(mapping.get()));\n \t\t\n-\t\treturn new ConceptMapCompareResult(allAdded, allRemoved, allChanged, allUnchanged, limit);\n+\t\tList<ConceptMapMapping> allRemoved = onlyBaseWrappedMappings.stream().filter(mapping -> !changedBase.stream().anyMatch(changed -> isSourceEqual(mapping.get(), changed.get()))).map(mapping -> mapping.get()).collect(Collectors.toList());\n+\t\tList<ConceptMapMapping> allAdded = onlyCompareWrappedMappings.stream().filter(mapping -> !changedCompare.stream().anyMatch(changed -> isSourceEqual(mapping.get(), changed.get()))).map(mapping -> mapping.get()).collect(Collectors.toList());\n \t\t\n-\t}\n-\n-\tprivate boolean isChanged(ConceptMapMapping memberA, ConceptMapMapping memberB) {\n-\t\treturn isSourceEqual(memberA, memberB) && !isTargetEqual(memberA, memberB);\n+\t\treturn new ConceptMapCompareResult(allAdded, allRemoved, allChanged, allUnchanged, limit);\n \t}\n \t\n-\tprivate boolean isSame(ConceptMapMapping memberA, ConceptMapMapping memberB) {\n-\t\treturn isSourceEqual(memberA, memberB) && isTargetEqual(memberA, memberB);\n-\t}\n-\n-\tprivate boolean isTargetEqual(ConceptMapMapping memberA, ConceptMapMapping memberB) {\n-\t\tboolean isDifferent = selectedConfig.stream().anyMatch(config -> !config.isTargetEqual(memberA, memberB));\n-\t\treturn !isDifferent;\n-\t}\n-\n \tprivate boolean isSourceEqual(ConceptMapMapping memberA, ConceptMapMapping memberB) {\n \t\tboolean isDifferent = selectedConfig.stream().anyMatch(config -> !config.isSourceEqual(memberA, memberB));\n \t\treturn !isDifferent;\n \t}\n-\n+\t\n }\n", "next_change": {"commit": "6cd2bb79343b8a4d940c1e0c7935b45e7f977711", "changed_code": [{"header": "diff --git a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java\nindex db227b12cd..399e4ac989 100644\n--- a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java\n+++ b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java\n", "chunk": "@@ -98,27 +100,71 @@ public final class ConceptMapCompareRequest extends ResourceRequest<BranchContex\n \t\tSet<ConceptMapMapping> allUnchanged = Sets.newHashSet();\n \n \t\tMapCompareSourceAndTargetEquivalence mapCompareEquivalence = new MapCompareSourceAndTargetEquivalence(selectedConfig);\n-\t\tSet<Wrapper<ConceptMapMapping>> baseWrappedMappings = baseMappings.values().stream().map(mapping -> mapCompareEquivalence.wrap(mapping)).collect(Collectors.toSet());\n-\t\tSet<Wrapper<ConceptMapMapping>> compareWrappedMappings = compareMappings.values().stream().map(mapping -> mapCompareEquivalence.wrap(mapping)).collect(Collectors.toSet());\n+\t\tSet<Wrapper<ConceptMapMapping>> baseWrappedMappings = baseMappings.values().stream()\n+\t\t\t\t.map(mapping -> mapCompareEquivalence.wrap(mapping))\n+\t\t\t\t.collect(Collectors.toSet());\n \t\t\n+\t\tSet<Wrapper<ConceptMapMapping>> compareWrappedMappings = compareMappings.values().stream()\n+\t\t\t\t.map(mapping -> mapCompareEquivalence.wrap(mapping))\n+\t\t\t\t.collect(Collectors.toSet());\n+\t\t\n+\t\t//Unchanged elements are in the intersection\n \t\tSet<Wrapper<ConceptMapMapping>> allUnchangedWrappedMappings = Sets.intersection(baseWrappedMappings, compareWrappedMappings);\n \t\tallUnchangedWrappedMappings.forEach(wrappedMapping -> allUnchanged.add(wrappedMapping.get()));\n \t\t\n+\t\t//Remove the unchanged from further comparison\n \t\tSetView<Wrapper<ConceptMapMapping>> onlyBaseWrappedMappings = Sets.difference(baseWrappedMappings, allUnchangedWrappedMappings);\n \t\tSetView<Wrapper<ConceptMapMapping>> onlyCompareWrappedMappings = Sets.difference(compareWrappedMappings, allUnchangedWrappedMappings);\n \t\t\n-\t\tSet<Wrapper<ConceptMapMapping>> changedBase = onlyBaseWrappedMappings.stream().filter(wrappedMapping -> onlyCompareWrappedMappings.stream().anyMatch(compareWrappedMapping -> isSourceEqual(wrappedMapping.get(), compareWrappedMapping.get()))).collect(Collectors.toSet());\n-\t\tSet<Wrapper<ConceptMapMapping>> changedCompare = onlyCompareWrappedMappings.stream().filter(wrappedMapping -> onlyBaseWrappedMappings.stream().anyMatch(baseWrappedMapping -> isSourceEqual(wrappedMapping.get(), baseWrappedMapping.get()))).collect(Collectors.toSet());\n+\t\tSet<Pair<ConceptMapMapping, ConceptMapMapping>> changedMappings = findChangedMappings(onlyBaseWrappedMappings, onlyCompareWrappedMappings);\n+\t\t\n+\t\tSet<Wrapper<ConceptMapMapping>> changedBase = onlyBaseWrappedMappings.stream()\n+\t\t\t\t.filter(wrappedMapping -> onlyCompareWrappedMappings.stream()\n+\t\t\t\t\t\t.anyMatch(compareWrappedMapping -> isSourceEqual(wrappedMapping.get(), compareWrappedMapping.get())))\n+\t\t\t\t.collect(Collectors.toSet());\n+\t\t\n+\t\tSet<Wrapper<ConceptMapMapping>> changedCompare = onlyCompareWrappedMappings.stream()\n+\t\t\t\t.filter(wrappedMapping -> onlyBaseWrappedMappings.stream()\n+\t\t\t\t\t\t.anyMatch(baseWrappedMapping -> isSourceEqual(wrappedMapping.get(), baseWrappedMapping.get())))\n+\t\t\t\t.collect(Collectors.toSet());\n \t\t\n \t\tchangedBase.forEach(mapping -> allChanged.add(mapping.get()));\n \t\tchangedCompare.forEach(mapping -> allChanged.add(mapping.get()));\n \t\t\n-\t\tList<ConceptMapMapping> allRemoved = onlyBaseWrappedMappings.stream().filter(mapping -> !changedBase.stream().anyMatch(changed -> isSourceEqual(mapping.get(), changed.get()))).map(mapping -> mapping.get()).collect(Collectors.toList());\n-\t\tList<ConceptMapMapping> allAdded = onlyCompareWrappedMappings.stream().filter(mapping -> !changedCompare.stream().anyMatch(changed -> isSourceEqual(mapping.get(), changed.get()))).map(mapping -> mapping.get()).collect(Collectors.toList());\n+\t\tList<ConceptMapMapping> allRemoved = onlyBaseWrappedMappings.stream()\n+\t\t\t\t.filter(mapping -> !changedBase.stream()\n+\t\t\t\t\t\t.anyMatch(changed -> isSourceEqual(mapping.get(), changed.get())))\n+\t\t\t\t.map(mapping -> mapping.get())\n+\t\t\t\t.collect(Collectors.toList());\n+\t\t\n+\t\tList<ConceptMapMapping> allAdded = onlyCompareWrappedMappings.stream()\n+\t\t\t\t.filter(mapping -> !changedCompare.stream()\n+\t\t\t\t\t\t.anyMatch(changed -> isSourceEqual(mapping.get(), changed.get())))\n+\t\t\t\t.map(mapping -> mapping.get())\n+\t\t\t\t.collect(Collectors.toList());\n \t\t\n \t\treturn new ConceptMapCompareResult(allAdded, allRemoved, allChanged, allUnchanged, limit);\n \t}\n \t\n+\tprivate Set<Pair<ConceptMapMapping, ConceptMapMapping>> findChangedMappings(Set<Wrapper<ConceptMapMapping>> onlyBaseWrappedMappings,\n+\t\t\tSet<Wrapper<ConceptMapMapping>> onlyCompareWrappedMappings) {\n+\t\t\n+\t\tMap<String, ConceptMapMapping> baseMappings = onlyBaseWrappedMappings.stream()\n+\t\t\t\t.collect(Collectors.toMap(w -> w.get().getSourceComponentURI().identifier(), w -> w.get()));\n+\t\t\n+\t\tMap<String, ConceptMapMapping> compareMappings = onlyCompareWrappedMappings.stream()\n+\t\t\t\t.collect(Collectors.toMap(w -> w.get().getSourceComponentURI().identifier(), w -> w.get()));\n+\t\t\n+\t\t//the intersection is the changed\n+\t\tSetView<String> commonSourceIds = Sets.intersection(baseMappings.keySet(), compareMappings.keySet());\n+\t\t\n+\t\tSet<Pair<ConceptMapMapping, ConceptMapMapping>> changedPairs = commonSourceIds.stream()\n+\t\t\t.map(sourceId -> Pair.<ConceptMapMapping, ConceptMapMapping>of(baseMappings.get(sourceId), compareMappings.get(sourceId)))\n+\t\t\t.collect(Collectors.toSet());\n+\t\t\n+\t\treturn changedPairs;\n+\t}\n+\n \tprivate boolean isSourceEqual(ConceptMapMapping memberA, ConceptMapMapping memberB) {\n \t\tboolean isDifferent = selectedConfig.stream().anyMatch(config -> !config.isSourceEqual(memberA, memberB));\n \t\treturn !isDifferent;\n", "next_change": {"commit": "1e9eb282776575ef8f1869a8a84174c3a2f2fa4f", "changed_code": [{"header": "diff --git a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java\nindex 399e4ac989..9debb0afc1 100644\n--- a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java\n+++ b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java\n", "chunk": "@@ -145,24 +135,13 @@ public final class ConceptMapCompareRequest extends ResourceRequest<BranchContex\n \t\t\n \t\treturn new ConceptMapCompareResult(allAdded, allRemoved, allChanged, allUnchanged, limit);\n \t}\n-\t\n-\tprivate Set<Pair<ConceptMapMapping, ConceptMapMapping>> findChangedMappings(Set<Wrapper<ConceptMapMapping>> onlyBaseWrappedMappings,\n-\t\t\tSet<Wrapper<ConceptMapMapping>> onlyCompareWrappedMappings) {\n-\t\t\n-\t\tMap<String, ConceptMapMapping> baseMappings = onlyBaseWrappedMappings.stream()\n-\t\t\t\t.collect(Collectors.toMap(w -> w.get().getSourceComponentURI().identifier(), w -> w.get()));\n-\t\t\n-\t\tMap<String, ConceptMapMapping> compareMappings = onlyCompareWrappedMappings.stream()\n-\t\t\t\t.collect(Collectors.toMap(w -> w.get().getSourceComponentURI().identifier(), w -> w.get()));\n-\t\t\n-\t\t//the intersection is the changed\n-\t\tSetView<String> commonSourceIds = Sets.intersection(baseMappings.keySet(), compareMappings.keySet());\n-\t\t\n-\t\tSet<Pair<ConceptMapMapping, ConceptMapMapping>> changedPairs = commonSourceIds.stream()\n-\t\t\t.map(sourceId -> Pair.<ConceptMapMapping, ConceptMapMapping>of(baseMappings.get(sourceId), compareMappings.get(sourceId)))\n-\t\t\t.collect(Collectors.toSet());\n-\t\t\n-\t\treturn changedPairs;\n+\n+\tprivate Set<Wrapper<ConceptMapMapping>> extractChangedMappings(SetView<Wrapper<ConceptMapMapping>> mappingsToChooseFrom,\n+\t\t\tSetView<Wrapper<ConceptMapMapping>> mappingsToCompareTo) {\n+\t\treturn mappingsToChooseFrom.stream()\n+\t\t\t\t.filter(wrappedMapping -> mappingsToCompareTo.stream()\n+\t\t\t\t\t\t.anyMatch(compareWrappedMapping -> isSourceEqual(wrappedMapping.get(), compareWrappedMapping.get())))\n+\t\t\t\t.collect(Collectors.toSet());\n \t}\n \n \tprivate boolean isSourceEqual(ConceptMapMapping memberA, ConceptMapMapping memberB) {\n", "next_change": {"commit": "fea99cba37459a9af1aae44912f79587fef574a6", "changed_code": [{"header": "diff --git a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java\nindex 9debb0afc1..710653fecd 100644\n--- a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java\n+++ b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/ConceptMapCompareRequest.java\n", "chunk": "@@ -61,92 +72,104 @@ public final class ConceptMapCompareRequest extends ResourceRequest<BranchContex\n \n \t@Override\n \tpublic ConceptMapCompareResult execute(BranchContext context) {\n+\t\tList<ConceptMapMapping> baseMappings = fetchConceptMapMappings(context, baseConceptMapURI.identifier());\n+\t\tList<ConceptMapMapping> compareMappings = fetchConceptMapMappings(context, compareConceptMapURI.identifier());\n \n-\t\tListMultimap<ComponentURI, ConceptMapMapping> baseMappings = ArrayListMultimap.create();\n-\t\tListMultimap<ComponentURI, ConceptMapMapping> compareMappings = ArrayListMultimap.create();\n-\n-\t\tfinal SearchResourceRequestIterator<ConceptMapMappingSearchRequestBuilder, ConceptMapMappings> baseIterator = new SearchResourceRequestIterator<>(\n-\t\t\t\tCodeSystemRequests.prepareSearchConceptMapMappings()\n-\t\t\t\t.filterByConceptMap(baseConceptMapURI.identifier())\n-\t\t\t\t.setLocales(locales())\n-\t\t\t\t.setLimit(DEFAULT_MEMBER_SCROLL_LIMIT),\n-\t\t\t\tr -> r.build().execute(context)\n-\t\t\t);\n-\n-\t\tbaseIterator.forEachRemaining(hits -> hits.forEach(hit -> {\n-\t\t\tbaseMappings.put(hit.getSourceComponentURI(), hit);\n-\t\t}));\n+\t\tmapCompareEquivalence = new MapCompareSourceAndTargetEquivalence(selectedConfig);\n+\t\t\n+\t\treturn compareDifferences(baseMappings, compareMappings);\n+\t}\n \n-\t\tfinal SearchResourceRequestIterator<ConceptMapMappingSearchRequestBuilder, ConceptMapMappings> compareIterator = new SearchResourceRequestIterator<>(\n+\tprivate List<ConceptMapMapping> fetchConceptMapMappings(BranchContext context, String conceptMapId) {\n+\t\tList<ConceptMapMapping> baseMappings = Lists.newArrayList();\n+\t\tnew SearchResourceRequestIterator<>(\n \t\t\t\tCodeSystemRequests.prepareSearchConceptMapMappings()\n-\t\t\t\t.filterByConceptMap(compareConceptMapURI.identifier())\n+\t\t\t\t.filterByConceptMap(conceptMapId)\n \t\t\t\t.setLocales(locales())\n \t\t\t\t.setLimit(DEFAULT_MEMBER_SCROLL_LIMIT),\n \t\t\t\tr -> r.build().execute(context)\n-\t\t\t);\n-\n-\t\tcompareIterator.forEachRemaining(hits -> hits.forEach(hit -> {\n-\t\t\tcompareMappings.put(hit.getSourceComponentURI(), hit);\n-\t\t}));\n-\n-\t\treturn compareDifferences(baseMappings, compareMappings);\n+\t\t\t).forEachRemaining(hits -> hits.forEach(baseMappings::add));\n+\t\treturn baseMappings;\n \t}\n \t\n-\tprivate ConceptMapCompareResult compareDifferences(ListMultimap<ComponentURI, ConceptMapMapping> baseMappings, ListMultimap<ComponentURI, ConceptMapMapping> compareMappings) {\n-\t\t\n-\t\tList<ConceptMapMapping> allChanged = Lists.newArrayList();\n-\t\tSet<ConceptMapMapping> allUnchanged = Sets.newHashSet();\n+\tprivate ConceptMapCompareResult compareDifferences(List<ConceptMapMapping> baseMappings, List<ConceptMapMapping> compareMappings) {\n \n-\t\tMapCompareSourceAndTargetEquivalence mapCompareEquivalence = new MapCompareSourceAndTargetEquivalence(selectedConfig);\n-\t\tSet<Wrapper<ConceptMapMapping>> baseWrappedMappings = baseMappings.values().stream()\n-\t\t\t\t.map(mapping -> mapCompareEquivalence.wrap(mapping))\n-\t\t\t\t.collect(Collectors.toSet());\n-\t\t\n-\t\tSet<Wrapper<ConceptMapMapping>> compareWrappedMappings = compareMappings.values().stream()\n-\t\t\t\t.map(mapping -> mapCompareEquivalence.wrap(mapping))\n-\t\t\t\t.collect(Collectors.toSet());\n+\t\t//Wrap the mappings to be compared and processed using set operations\n+\t\tSet<Wrapper<ConceptMapMapping>> baseWrappedMappings = wrapMappings(baseMappings);\n+\t\tSet<Wrapper<ConceptMapMapping>> compareWrappedMappings = wrapMappings(compareMappings);\n \t\t\n \t\t//Unchanged elements are in the intersection\n \t\tSet<Wrapper<ConceptMapMapping>> allUnchangedWrappedMappings = Sets.intersection(baseWrappedMappings, compareWrappedMappings);\n-\t\tallUnchangedWrappedMappings.forEach(wrappedMapping -> allUnchanged.add(wrappedMapping.get()));\n+\t\t\n+\t\tList<ConceptMapCompareResultItem> allUnchanged = allUnchangedWrappedMappings.stream()\n+\t\t\t.map(w -> new ConceptMapCompareResultItem(ConceptMapCompareChangeKind.SAME, w.get()))\n+\t\t\t.collect(Collectors.toList());\n \t\t\n \t\t//Remove the unchanged from further comparison\n-\t\tSetView<Wrapper<ConceptMapMapping>> onlyBaseWrappedMappings = Sets.difference(baseWrappedMappings, allUnchangedWrappedMappings);\n-\t\tSetView<Wrapper<ConceptMapMapping>> onlyCompareWrappedMappings = Sets.difference(compareWrappedMappings, allUnchangedWrappedMappings);\n+\t\tSet<Wrapper<ConceptMapMapping>> onlyBaseWrappedMappings = Sets.difference(baseWrappedMappings, allUnchangedWrappedMappings);\n+\t\tSet<Wrapper<ConceptMapMapping>> onlyCompareWrappedMappings = Sets.difference(compareWrappedMappings, allUnchangedWrappedMappings);\n+\t\t\n+\t\t//Multimaps based on the configured equivalence properties\n+\t\tMultimap<String, Wrapper<ConceptMapMapping>> baseMMap = collectMapEntries(onlyBaseWrappedMappings);\n+\t\tMultimap<String, Wrapper<ConceptMapMapping>> compareMMap = collectMapEntries(onlyCompareWrappedMappings);\n \t\t\n-\t\tSet<Wrapper<ConceptMapMapping>> changedBase = extractChangedMappings(onlyBaseWrappedMappings, onlyCompareWrappedMappings);\n+\t\tSet<String> sourceCompoundKeys = baseMMap.keySet();\n+\t\tSet<String> targetCompoundKeys = compareMMap.keySet();\n \t\t\n-\t\tSet<Wrapper<ConceptMapMapping>> changedCompare = extractChangedMappings(onlyCompareWrappedMappings, onlyBaseWrappedMappings);\n+\t\tSet<String> presentKeys = Sets.difference(sourceCompoundKeys, targetCompoundKeys);\n+\t\tSet<String> missingKeys = Sets.difference(targetCompoundKeys, sourceCompoundKeys);\n \t\t\n-\t\tchangedBase.forEach(mapping -> allChanged.add(mapping.get()));\n-\t\tchangedCompare.forEach(mapping -> allChanged.add(mapping.get()));\n+\t\t//Collect the 'Present' mappings\n+\t\tSet<Wrapper<ConceptMapMapping>> presentMappings = Sets.newHashSet();\n+\t\tpresentKeys.stream().forEach(k -> presentMappings.addAll(baseMMap.get(k)));\n+\t\tList<ConceptMapCompareResultItem> allRemoved = presentMappings.stream().map(w -> new ConceptMapCompareResultItem(ConceptMapCompareChangeKind.PRESENT, w.get())).collect(Collectors.toList());\n \t\t\n-\t\tList<ConceptMapMapping> allRemoved = onlyBaseWrappedMappings.stream()\n-\t\t\t\t.filter(mapping -> !changedBase.stream()\n-\t\t\t\t\t\t.anyMatch(changed -> isSourceEqual(mapping.get(), changed.get())))\n-\t\t\t\t.map(mapping -> mapping.get())\n-\t\t\t\t.collect(Collectors.toList());\n+\t\t//Collect the 'Missing' mappings\n+\t\tSet<Wrapper<ConceptMapMapping>> missingMappings = Sets.newHashSet();\n+\t\tmissingKeys.stream().forEach(k -> missingMappings.addAll(compareMMap.get(k)));\n+\t\tList<ConceptMapCompareResultItem> allAdded = missingMappings.stream().map(w -> new ConceptMapCompareResultItem(ConceptMapCompareChangeKind.MISSING, w.get())).collect(Collectors.toList());\n \t\t\n-\t\tList<ConceptMapMapping> allAdded = onlyCompareWrappedMappings.stream()\n-\t\t\t\t.filter(mapping -> !changedCompare.stream()\n-\t\t\t\t\t\t.anyMatch(changed -> isSourceEqual(mapping.get(), changed.get())))\n-\t\t\t\t.map(mapping -> mapping.get())\n-\t\t\t\t.collect(Collectors.toList());\n+\t\t//Remove the already processed missing and present mappings and the remaining items are the different mappings\n+\t\tSet<Wrapper<ConceptMapMapping>> sourceDifferentMappings = Sets.difference(onlyBaseWrappedMappings, presentMappings);\n+\t\tSet<Wrapper<ConceptMapMapping>> targetDifferentMappings = Sets.difference(onlyCompareWrappedMappings, missingMappings);\n \t\t\n-\t\treturn new ConceptMapCompareResult(allAdded, allRemoved, allChanged, allUnchanged, limit);\n+\t\tList<ConceptMapCompareResultItem> allChanged = Lists.newArrayList();\n+\t\t\n+\t\tsourceDifferentMappings.forEach(w -> {\n+\t\t\tallChanged.add(new ConceptMapCompareResultItem(ConceptMapCompareChangeKind.DIFFERENT_TARGET, w.get()));\n+\t\t});\n+\t\t\n+\t\ttargetDifferentMappings.forEach(w -> {\n+\t\t\tallChanged.add(new ConceptMapCompareResultItem(ConceptMapCompareChangeKind.DIFFERENT_TARGET, w.get()));\n+\t\t});\n+\t\t\n+\t\tList<ConceptMapCompareResultItem> items = ImmutableList.<ConceptMapCompareResultItem>builder()\n+\t\t\t.addAll(allAdded)\n+\t\t\t.addAll(allRemoved)\n+\t\t\t.addAll(allChanged)\n+\t\t\t.addAll(allUnchanged)\n+\t\t\t.build()\n+\t\t\t.stream()\n+\t\t\t.sorted()\n+\t\t\t.limit(limit)\n+\t\t\t.collect(Collectors.toList());\n+\t\t\n+\t\treturn new ConceptMapCompareResult(items, allAdded.size(), allRemoved.size(), allChanged.size(), allUnchanged.size(), limit);\n \t}\n \n-\tprivate Set<Wrapper<ConceptMapMapping>> extractChangedMappings(SetView<Wrapper<ConceptMapMapping>> mappingsToChooseFrom,\n-\t\t\tSetView<Wrapper<ConceptMapMapping>> mappingsToCompareTo) {\n-\t\treturn mappingsToChooseFrom.stream()\n-\t\t\t\t.filter(wrappedMapping -> mappingsToCompareTo.stream()\n-\t\t\t\t\t\t.anyMatch(compareWrappedMapping -> isSourceEqual(wrappedMapping.get(), compareWrappedMapping.get())))\n-\t\t\t\t.collect(Collectors.toSet());\n+\t/*\n+\t * Create a multimap for the passed in mappings with a compound key that is based on the selected configuration\n+\t */\n+\tprivate Multimap<String, Wrapper<ConceptMapMapping>> collectMapEntries(Set<Wrapper<ConceptMapMapping>> wrappedMappings) {\n+\t\tMultimap<String, Wrapper<ConceptMapMapping>> baseMMap = HashMultimap.create();\n+\t\twrappedMappings.stream().forEach(w -> baseMMap.put(ConceptMapCompareConfigurationProperties.getCompoundKey(selectedConfig, w.get()), w));\n+\t\treturn baseMMap;\n \t}\n \n-\tprivate boolean isSourceEqual(ConceptMapMapping memberA, ConceptMapMapping memberB) {\n-\t\tboolean isDifferent = selectedConfig.stream().anyMatch(config -> !config.isSourceEqual(memberA, memberB));\n-\t\treturn !isDifferent;\n+\tprivate Set<Wrapper<ConceptMapMapping>> wrapMappings(List<ConceptMapMapping> mappings) {\n+\t\treturn mappings.stream()\n+\t\t\t\t.map(mapping -> mapCompareEquivalence.wrap(mapping))\n+\t\t\t\t.collect(Collectors.toSet());\n \t}\n \t\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc0NzI3NA==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/610#discussion_r460747274", "body": "Incorrect license and year.", "bodyText": "Incorrect license and year.", "bodyHTML": "<p dir=\"auto\">Incorrect license and year.</p>", "author": "cmark", "createdAt": "2020-07-27T09:00:36Z", "path": "core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/MappingCorrelation.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*******************************************************************************\n+ * Copyright (c) 2019 B2i Healthcare. All rights reserved.", "originalCommit": "2e4c32c6e8053ecbafe4552a6a8d1e36ef1b0d64", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgzNTk4NQ==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/610#discussion_r460835985", "bodyText": "Done", "author": "molnarlaura", "createdAt": "2020-07-27T11:52:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc0NzI3NA=="}], "type": "inlineReview", "revised_code": {"commit": "6ed22b937251c6fa74dde047713d6daa031c8494", "changed_code": [{"header": "diff --git a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/MappingCorrelation.java b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/MappingCorrelation.java\nindex f08268abde..bd1434b26b 100644\n--- a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/MappingCorrelation.java\n+++ b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/MappingCorrelation.java\n", "chunk": "@@ -1,6 +1,18 @@\n-/*******************************************************************************\n- * Copyright (c) 2019 B2i Healthcare. All rights reserved.\n- *******************************************************************************/\n+/*\n+ * Copyright 2020 B2i Healthcare Pte Ltd, http://b2i.sg\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n package com.b2international.snowowl.core.request;\n \n /**\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc0NzQ5Mg==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/610#discussion_r460747492", "body": "Rename this to `ConceptMapMappingSearchRequest`.", "bodyText": "Rename this to ConceptMapMappingSearchRequest.", "bodyHTML": "<p dir=\"auto\">Rename this to <code>ConceptMapMappingSearchRequest</code>.</p>", "author": "cmark", "createdAt": "2020-07-27T09:00:57Z", "path": "core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/MappingSearchRequest.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright 2020 B2i Healthcare Pte Ltd, http://b2i.sg\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.b2international.snowowl.core.request;\n+\n+import java.io.IOException;\n+\n+import com.b2international.commons.options.Options;\n+import com.b2international.snowowl.core.domain.BranchContext;\n+import com.b2international.snowowl.core.domain.SetMappings;\n+import com.b2international.snowowl.core.uri.CodeSystemURI;\n+\n+/**\n+* @since 7.8\n+*/\n+public final class MappingSearchRequest extends SearchResourceRequest<BranchContext, SetMappings> {", "originalCommit": "2e4c32c6e8053ecbafe4552a6a8d1e36ef1b0d64", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgzNjgxMQ==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/610#discussion_r460836811", "bodyText": "Done", "author": "molnarlaura", "createdAt": "2020-07-27T11:54:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc0NzQ5Mg=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc0NzgyNw==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/610#discussion_r460747827", "body": "Rename this to `ConceptMapMappingSearchRequestBuilder`.", "bodyText": "Rename this to ConceptMapMappingSearchRequestBuilder.", "bodyHTML": "<p dir=\"auto\">Rename this to <code>ConceptMapMappingSearchRequestBuilder</code>.</p>", "author": "cmark", "createdAt": "2020-07-27T09:01:32Z", "path": "core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/MappingSearchRequestBuilder.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright 2020 B2i Healthcare Pte Ltd, http://b2i.sg\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.b2international.snowowl.core.request;\n+\n+import com.b2international.snowowl.core.domain.BranchContext;\n+import com.b2international.snowowl.core.domain.SetMappings;\n+import com.b2international.snowowl.core.request.SetSearchRequestEvaluator.OptionKey;\n+import com.google.common.collect.ImmutableSet;\n+\n+/**\n+* @since 7.8\n+*/\n+public final class MappingSearchRequestBuilder extends SearchResourceRequestBuilder<MappingSearchRequestBuilder, BranchContext, SetMappings> ", "originalCommit": "2e4c32c6e8053ecbafe4552a6a8d1e36ef1b0d64", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgzNzQ1OQ==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/610#discussion_r460837459", "bodyText": "Done", "author": "molnarlaura", "createdAt": "2020-07-27T11:55:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc0NzgyNw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc0ODE0NA==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/610#discussion_r460748144", "body": "Rename this method to `filterByConceptMap(conceptMapId)`.", "bodyText": "Rename this method to filterByConceptMap(conceptMapId).", "bodyHTML": "<p dir=\"auto\">Rename this method to <code>filterByConceptMap(conceptMapId)</code>.</p>", "author": "cmark", "createdAt": "2020-07-27T09:02:04Z", "path": "core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/MappingSearchRequestBuilder.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright 2020 B2i Healthcare Pte Ltd, http://b2i.sg\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.b2international.snowowl.core.request;\n+\n+import com.b2international.snowowl.core.domain.BranchContext;\n+import com.b2international.snowowl.core.domain.SetMappings;\n+import com.b2international.snowowl.core.request.SetSearchRequestEvaluator.OptionKey;\n+import com.google.common.collect.ImmutableSet;\n+\n+/**\n+* @since 7.8\n+*/\n+public final class MappingSearchRequestBuilder extends SearchResourceRequestBuilder<MappingSearchRequestBuilder, BranchContext, SetMappings> \n+\t\timplements RevisionIndexRequestBuilder<SetMappings> {\n+\t\n+\tpublic MappingSearchRequestBuilder filterBySet(String setId) {", "originalCommit": "2e4c32c6e8053ecbafe4552a6a8d1e36ef1b0d64", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgzODQxMg==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/610#discussion_r460838412", "bodyText": "Done", "author": "molnarlaura", "createdAt": "2020-07-27T11:57:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc0ODE0NA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc0ODIyNA==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/610#discussion_r460748224", "body": "Rename this method to `filterByConceptMaps(conceptMapIds)`.", "bodyText": "Rename this method to filterByConceptMaps(conceptMapIds).", "bodyHTML": "<p dir=\"auto\">Rename this method to <code>filterByConceptMaps(conceptMapIds)</code>.</p>", "author": "cmark", "createdAt": "2020-07-27T09:02:13Z", "path": "core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/MappingSearchRequestBuilder.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright 2020 B2i Healthcare Pte Ltd, http://b2i.sg\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.b2international.snowowl.core.request;\n+\n+import com.b2international.snowowl.core.domain.BranchContext;\n+import com.b2international.snowowl.core.domain.SetMappings;\n+import com.b2international.snowowl.core.request.SetSearchRequestEvaluator.OptionKey;\n+import com.google.common.collect.ImmutableSet;\n+\n+/**\n+* @since 7.8\n+*/\n+public final class MappingSearchRequestBuilder extends SearchResourceRequestBuilder<MappingSearchRequestBuilder, BranchContext, SetMappings> \n+\t\timplements RevisionIndexRequestBuilder<SetMappings> {\n+\t\n+\tpublic MappingSearchRequestBuilder filterBySet(String setId) {\n+\t\treturn filterBySets(ImmutableSet.of(setId));\n+\t}\n+\t\n+\tpublic MappingSearchRequestBuilder filterBySets(Iterable<String> setIds) {", "originalCommit": "2e4c32c6e8053ecbafe4552a6a8d1e36ef1b0d64", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgzODQ4MQ==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/610#discussion_r460838481", "bodyText": "Done", "author": "molnarlaura", "createdAt": "2020-07-27T11:57:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc0ODIyNA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc0ODUwNw==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/610#discussion_r460748507", "body": "Rename this to `ConceptMapMappingSearchRequestEvaluator`.", "bodyText": "Rename this to ConceptMapMappingSearchRequestEvaluator.", "bodyHTML": "<p dir=\"auto\">Rename this to <code>ConceptMapMappingSearchRequestEvaluator</code>.</p>", "author": "cmark", "createdAt": "2020-07-27T09:02:41Z", "path": "core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/request/SetMappingSearchRequestEvaluator.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright 2020 B2i Healthcare Pte Ltd, http://b2i.sg\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.b2international.snowowl.core.request;\n+\n+import com.b2international.commons.options.Options;\n+import com.b2international.snowowl.core.domain.BranchContext;\n+import com.b2international.snowowl.core.domain.SetMappings;\n+import com.b2international.snowowl.core.uri.CodeSystemURI;\n+\n+/**\n+ * @since 7.8\n+ */\n+public interface SetMappingSearchRequestEvaluator extends SetSearchRequestEvaluator<SetMappings> {", "originalCommit": "2e4c32c6e8053ecbafe4552a6a8d1e36ef1b0d64", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc3MTU2Mg==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/610#discussion_r460771562", "bodyText": "Done", "author": "molnarlaura", "createdAt": "2020-07-27T09:43:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc0ODUwNw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc0OTQyOQ==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/610#discussion_r460749429", "body": "It would be great to list all possible exceptions instead of catching all.", "bodyText": "It would be great to list all possible exceptions instead of catching all.", "bodyHTML": "<p dir=\"auto\">It would be great to list all possible exceptions instead of catching all.</p>", "author": "cmark", "createdAt": "2020-07-27T09:04:22Z", "path": "core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/uri/ComponentURI.java", "diffHunk": "@@ -122,6 +122,16 @@ private static ComponentURI getOrCache(final ComponentURI componentURI) {\n \t\treturn COMPONENT_URI_INTERNER.intern(componentURI);\n \t}\n \t\n+\tpublic static boolean isValid(String uriString) {\n+\t\ttry {\n+\t\t\tof(uriString);\n+\t\t} catch (Exception e) {", "originalCommit": "2e4c32c6e8053ecbafe4552a6a8d1e36ef1b0d64", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d0b6ab785daee44263f2914eb95ccf7fc2033390", "changed_code": [{"header": "diff --git a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/uri/ComponentURI.java b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/uri/ComponentURI.java\nindex f05a88053b..685df00fc3 100644\n--- a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/uri/ComponentURI.java\n+++ b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/uri/ComponentURI.java\n", "chunk": "@@ -125,11 +132,10 @@ public final class ComponentURI implements Serializable {\n \tpublic static boolean isValid(String uriString) {\n \t\ttry {\n \t\t\tof(uriString);\n+\t\t\treturn true;\n \t\t} catch (Exception e) {\n \t\t\treturn false;\n \t\t}\n-\t\treturn true;\n-\t\t\n \t}\n \t\n \tpublic static ComponentURI of(String uri) {\n", "next_change": {"commit": "301a3e0058bf0238fbb729070d56061631ca1549", "changed_code": [{"header": "diff --git a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/uri/ComponentURI.java b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/uri/ComponentURI.java\nindex 685df00fc3..4d48a41a72 100644\n--- a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/uri/ComponentURI.java\n+++ b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/uri/ComponentURI.java\n", "chunk": "@@ -143,24 +144,24 @@ public final class ComponentURI implements Serializable {\n \t\t\treturn ComponentURI.UNSPECIFIED;\n \t\t}\n \t\tfinal List<String> parts = SLASH_SPLITTER.splitToList(uri);\n-\t\tcheckArgument(parts.size() >= 3, \"A component uri consists of three parts (codeSystemURI/componentType/componentId). Arg was: %s\", uri);\n-\t\tint terminologyComponentTypeIndex = parts.size()-2;\n-\t\tint componentIdIndex = parts.size()-1;\n-\t\tCodeSystemURI codeSystemURI = new CodeSystemURI(SLASH_JOINER.join(parts.subList(0, terminologyComponentTypeIndex)));\n+\t\tcheckArgument(parts.size() >= 3, \"A component uri consists of at least three parts (resourceUri/componentType/componentId). Arg was: %s\", uri);\n+\t\tint terminologyComponentTypeIndex = parts.size() - 2;\n+\t\tint componentIdIndex = parts.size() - 1;\n+\t\tResourceURI resourceURI = new ResourceURI(SLASH_JOINER.join(parts.subList(0, terminologyComponentTypeIndex)));\n \t\tShort terminologyComponentId = Short.valueOf(parts.get(terminologyComponentTypeIndex));\n \t\tString componentId = parts.get(componentIdIndex);\n-\t\treturn new ComponentURI(codeSystemURI, terminologyComponentId, componentId);\n+\t\treturn new ComponentURI(resourceURI, terminologyComponentId, componentId);\n \t}\n \n \t@JsonValue\n \t@Override\n \tpublic String toString() {\n-\t\treturn SLASH_JOINER.join(codeSystem(), terminologyComponentId(), identifier());\n+\t\treturn SLASH_JOINER.join(resourceUri(), terminologyComponentId(), identifier());\n \t}\n \t\n \t@Override\n \tpublic int hashCode() {\n-\t\treturn Objects.hash(codeSystemUri, terminologyComponentId, identifier);\n+\t\treturn Objects.hash(resourceUri, terminologyComponentId, identifier);\n \t}\n \t\n \t@Override\n", "next_change": {"commit": "6e5d5f75afdb19ead2595ff9d36335dd42ff3e43", "changed_code": [{"header": "diff --git a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/uri/ComponentURI.java b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/uri/ComponentURI.java\nindex 4d48a41a72..75cd62752f 100644\n--- a/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/uri/ComponentURI.java\n+++ b/core/com.b2international.snowowl.core/src/com/b2international/snowowl/core/uri/ComponentURI.java\n", "chunk": "@@ -144,24 +141,28 @@ public final class ComponentURI implements Serializable {\n \t\t\treturn ComponentURI.UNSPECIFIED;\n \t\t}\n \t\tfinal List<String> parts = SLASH_SPLITTER.splitToList(uri);\n-\t\tcheckArgument(parts.size() >= 3, \"A component uri consists of at least three parts (resourceUri/componentType/componentId). Arg was: %s\", uri);\n+\t\tcheckArgument(parts.size() >= 4, \"A component uri consists of at least four parts (resourceType/resourceId/componentType/componentId). Arg was: %s\", uri);\n \t\tint terminologyComponentTypeIndex = parts.size() - 2;\n \t\tint componentIdIndex = parts.size() - 1;\n \t\tResourceURI resourceURI = new ResourceURI(SLASH_JOINER.join(parts.subList(0, terminologyComponentTypeIndex)));\n-\t\tShort terminologyComponentId = Short.valueOf(parts.get(terminologyComponentTypeIndex));\n+\t\tString componentType = parts.get(terminologyComponentTypeIndex);\n \t\tString componentId = parts.get(componentIdIndex);\n-\t\treturn new ComponentURI(resourceURI, terminologyComponentId, componentId);\n+\t\treturn new ComponentURI(resourceURI, componentType, componentId);\n+\t}\n+\t\n+\tpublic static ComponentURI unspecified(String componentType, String identifier) {\n+\t\treturn of(CodeSystem.uri(TerminologyRegistry.UNSPECIFIED), componentType, identifier);\n \t}\n \n \t@JsonValue\n \t@Override\n \tpublic String toString() {\n-\t\treturn SLASH_JOINER.join(resourceUri(), terminologyComponentId(), identifier());\n+\t\treturn SLASH_JOINER.join(resourceUri(), componentType(), identifier());\n \t}\n \t\n \t@Override\n \tpublic int hashCode() {\n-\t\treturn Objects.hash(resourceUri, terminologyComponentId, identifier);\n+\t\treturn Objects.hash(resourceUri, componentType, identifier);\n \t}\n \t\n \t@Override\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc1MjQ2Mw==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/610#discussion_r460752463", "body": "Rename this to `SnomedConceptMapSearchRequestEvaluator`.", "bodyText": "Rename this to SnomedConceptMapSearchRequestEvaluator.", "bodyHTML": "<p dir=\"auto\">Rename this to <code>SnomedConceptMapSearchRequestEvaluator</code>.</p>", "author": "cmark", "createdAt": "2020-07-27T09:09:54Z", "path": "snomed/com.b2international.snowowl.snomed.datastore/src/com/b2international/snowowl/snomed/core/SnomedPlugin.java", "diffHunk": "@@ -231,7 +233,12 @@ protected ComponentRevisionConflictProcessor getComponentRevisionConflictProcess\n \t\n \t@Override\n \tprotected SetMemberSearchRequestEvaluator getMemberSearchRequestEvaluator() {\n-\t\treturn new SnomedRefSetMemberSearchRequestEvaluator();\n+\t\treturn new SnomedMemberSearchRequestEvaluator();\n+\t}\n+\t\n+\t@Override\n+\tprotected SetMappingSearchRequestEvaluator getMappingSearchRequestEvaluator() {\n+\t\treturn new SnomedRefSetMappingSearchRequestEvaluator();", "originalCommit": "2e4c32c6e8053ecbafe4552a6a8d1e36ef1b0d64", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc3MTUxNw==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/610#discussion_r460771517", "bodyText": "Done", "author": "molnarlaura", "createdAt": "2020-07-27T09:43:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc1MjQ2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "f1589ded589b03f8264d014dcc03ceeba22e200a", "changed_code": [{"header": "diff --git a/snomed/com.b2international.snowowl.snomed.datastore/src/com/b2international/snowowl/snomed/core/SnomedPlugin.java b/snomed/com.b2international.snowowl.snomed.datastore/src/com/b2international/snowowl/snomed/core/SnomedPlugin.java\nindex 7c4230d821..b6b1791c4c 100644\n--- a/snomed/com.b2international.snowowl.snomed.datastore/src/com/b2international/snowowl/snomed/core/SnomedPlugin.java\n+++ b/snomed/com.b2international.snowowl.snomed.datastore/src/com/b2international/snowowl/snomed/core/SnomedPlugin.java\n", "chunk": "@@ -237,8 +237,8 @@ public final class SnomedPlugin extends TerminologyRepositoryPlugin {\n \t}\n \t\n \t@Override\n-\tprotected SetMappingSearchRequestEvaluator getMappingSearchRequestEvaluator() {\n-\t\treturn new SnomedRefSetMappingSearchRequestEvaluator();\n+\tprotected ConceptMapMappingSearchRequestEvaluator getConceptMapSearchRequestEvaluator() {\n+\t\treturn new SnomedConceptMapSearchRequestEvaluator();\n \t}\n \t\n }\n", "next_change": {"commit": "47f3183425c644ce1f7f2e4f199b3945b8e2141b", "changed_code": [{"header": "diff --git a/snomed/com.b2international.snowowl.snomed.datastore/src/com/b2international/snowowl/snomed/core/SnomedPlugin.java b/snomed/com.b2international.snowowl.snomed.datastore/src/com/b2international/snowowl/snomed/core/SnomedPlugin.java\nindex b6b1791c4c..3e7e50ddc3 100644\n--- a/snomed/com.b2international.snowowl.snomed.datastore/src/com/b2international/snowowl/snomed/core/SnomedPlugin.java\n+++ b/snomed/com.b2international.snowowl.snomed.datastore/src/com/b2international/snowowl/snomed/core/SnomedPlugin.java\n", "chunk": "@@ -237,7 +237,7 @@ public final class SnomedPlugin extends TerminologyRepositoryPlugin {\n \t}\n \t\n \t@Override\n-\tprotected ConceptMapMappingSearchRequestEvaluator getConceptMapSearchRequestEvaluator() {\n+\tprotected ConceptMapMappingSearchRequestEvaluator getConceptMapMappingSearchRequestEvaluator() {\n \t\treturn new SnomedConceptMapSearchRequestEvaluator();\n \t}\n \t\n", "next_change": {"commit": "2fb5fcb6a47f1d3b33f574f450c7d590f00a482e", "changed_code": [{"header": "diff --git a/snomed/com.b2international.snowowl.snomed.datastore/src/com/b2international/snowowl/snomed/core/SnomedPlugin.java b/snomed/com.b2international.snowowl.snomed.datastore/src/com/b2international/snowowl/snomed/core/SnomedPlugin.java\nindex 3e7e50ddc3..b4e336bd1e 100644\n--- a/snomed/com.b2international.snowowl.snomed.datastore/src/com/b2international/snowowl/snomed/core/SnomedPlugin.java\n+++ b/snomed/com.b2international.snowowl.snomed.datastore/src/com/b2international/snowowl/snomed/core/SnomedPlugin.java\n", "chunk": "@@ -232,8 +220,8 @@ public final class SnomedPlugin extends TerminologyRepositoryPlugin {\n \t}\n \t\n \t@Override\n-\tprotected SetMemberSearchRequestEvaluator getMemberSearchRequestEvaluator() {\n-\t\treturn new SnomedMemberSearchRequestEvaluator();\n+\tprotected ValueSetMemberSearchRequestEvaluator getMemberSearchRequestEvaluator() {\n+\t\treturn new SnomedValueSetMemberSearchRequestEvaluator();\n \t}\n \t\n \t@Override\n", "next_change": {"commit": "24f3478426ce931f6dd4dd29b476ece16e664a48", "changed_code": [{"header": "diff --git a/snomed/com.b2international.snowowl.snomed.datastore/src/com/b2international/snowowl/snomed/core/SnomedPlugin.java b/snomed/com.b2international.snowowl.snomed.datastore/src/com/b2international/snowowl/snomed/core/SnomedPlugin.java\nindex b4e336bd1e..8e5fb4289d 100644\n--- a/snomed/com.b2international.snowowl.snomed.datastore/src/com/b2international/snowowl/snomed/core/SnomedPlugin.java\n+++ b/snomed/com.b2international.snowowl.snomed.datastore/src/com/b2international/snowowl/snomed/core/SnomedPlugin.java\n", "chunk": "@@ -224,6 +200,7 @@ public final class SnomedPlugin extends TerminologyRepositoryPlugin {\n \t\treturn new SnomedValueSetMemberSearchRequestEvaluator();\n \t}\n \t\n+\t//TODO: Refactor SnomedConceptMapSearchRequestEvaluator\n \t@Override\n \tprotected ConceptMapMappingSearchRequestEvaluator getConceptMapMappingSearchRequestEvaluator() {\n \t\treturn new SnomedConceptMapSearchRequestEvaluator();\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc1OTE5NA==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/610#discussion_r460759194", "body": "This needs to be removed because it can cause `ConcurrentModificationException`s or incorrect return values when executing by more than one thread.", "bodyText": "This needs to be removed because it can cause ConcurrentModificationExceptions or incorrect return values when executing by more than one thread.", "bodyHTML": "<p dir=\"auto\">This needs to be removed because it can cause <code>ConcurrentModificationException</code>s or incorrect return values when executing by more than one thread.</p>", "author": "cmark", "createdAt": "2020-07-27T09:21:34Z", "path": "snomed/com.b2international.snowowl.snomed.datastore/src/com/b2international/snowowl/snomed/datastore/request/SnomedRefSetMappingSearchRequestEvaluator.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/*\n+ * Copyright 2020 B2i Healthcare Pte Ltd, http://b2i.sg\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.b2international.snowowl.snomed.datastore.request;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import com.b2international.commons.options.Options;\n+import com.b2international.snowowl.core.codesystem.CodeSystem;\n+import com.b2international.snowowl.core.codesystem.CodeSystemRequests;\n+import com.b2international.snowowl.core.domain.BranchContext;\n+import com.b2international.snowowl.core.domain.SetMapping;\n+import com.b2international.snowowl.core.domain.SetMapping.Builder;\n+import com.b2international.snowowl.core.domain.SetMappings;\n+import com.b2international.snowowl.core.request.MappingCorrelation;\n+import com.b2international.snowowl.core.request.SetMappingSearchRequestEvaluator;\n+import com.b2international.snowowl.core.terminology.Terminology;\n+import com.b2international.snowowl.core.terminology.TerminologyComponent;\n+import com.b2international.snowowl.core.terminology.TerminologyRegistry;\n+import com.b2international.snowowl.core.uri.CodeSystemURI;\n+import com.b2international.snowowl.core.uri.ComponentURI;\n+import com.b2international.snowowl.snomed.common.SnomedConstants.Concepts;\n+import com.b2international.snowowl.snomed.common.SnomedRf2Headers;\n+import com.b2international.snowowl.snomed.common.SnomedTerminologyComponentConstants;\n+import com.b2international.snowowl.snomed.core.domain.SnomedConcept;\n+import com.b2international.snowowl.snomed.core.domain.refset.SnomedRefSetType;\n+import com.b2international.snowowl.snomed.core.domain.refset.SnomedReferenceSet;\n+import com.b2international.snowowl.snomed.core.domain.refset.SnomedReferenceSetMember;\n+import com.b2international.snowowl.snomed.core.domain.refset.SnomedReferenceSetMembers;\n+import com.google.common.base.Strings;\n+import com.google.common.collect.Maps;\n+import com.google.common.collect.Sets;\n+\n+/**\n+ * @since 7.8\n+ */\n+public class SnomedRefSetMappingSearchRequestEvaluator extends SnomedCollectionSearchRequestEvaluator<SetMapping, SetMappings> implements SetMappingSearchRequestEvaluator {\n+\n+\t//RefsetID -> targetComponentURI\n+\tprivate Map<String, ComponentURI> targetCodeSystemMap = Maps.newHashMap();", "originalCommit": "2e4c32c6e8053ecbafe4552a6a8d1e36ef1b0d64", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk3MDQyMg==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/610#discussion_r460970422", "bodyText": "Done", "author": "molnarlaura", "createdAt": "2020-07-27T15:21:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc1OTE5NA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc2MTYwOQ==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/610#discussion_r460761609", "body": "MIssing override annotation.", "bodyText": "MIssing override annotation.", "bodyHTML": "<p dir=\"auto\">MIssing override annotation.</p>", "author": "cmark", "createdAt": "2020-07-27T09:25:36Z", "path": "snomed/com.b2international.snowowl.snomed.datastore/src/com/b2international/snowowl/snomed/datastore/request/SnomedRefSetMappingSearchRequestEvaluator.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/*\n+ * Copyright 2020 B2i Healthcare Pte Ltd, http://b2i.sg\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.b2international.snowowl.snomed.datastore.request;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import com.b2international.commons.options.Options;\n+import com.b2international.snowowl.core.codesystem.CodeSystem;\n+import com.b2international.snowowl.core.codesystem.CodeSystemRequests;\n+import com.b2international.snowowl.core.domain.BranchContext;\n+import com.b2international.snowowl.core.domain.SetMapping;\n+import com.b2international.snowowl.core.domain.SetMapping.Builder;\n+import com.b2international.snowowl.core.domain.SetMappings;\n+import com.b2international.snowowl.core.request.MappingCorrelation;\n+import com.b2international.snowowl.core.request.SetMappingSearchRequestEvaluator;\n+import com.b2international.snowowl.core.terminology.Terminology;\n+import com.b2international.snowowl.core.terminology.TerminologyComponent;\n+import com.b2international.snowowl.core.terminology.TerminologyRegistry;\n+import com.b2international.snowowl.core.uri.CodeSystemURI;\n+import com.b2international.snowowl.core.uri.ComponentURI;\n+import com.b2international.snowowl.snomed.common.SnomedConstants.Concepts;\n+import com.b2international.snowowl.snomed.common.SnomedRf2Headers;\n+import com.b2international.snowowl.snomed.common.SnomedTerminologyComponentConstants;\n+import com.b2international.snowowl.snomed.core.domain.SnomedConcept;\n+import com.b2international.snowowl.snomed.core.domain.refset.SnomedRefSetType;\n+import com.b2international.snowowl.snomed.core.domain.refset.SnomedReferenceSet;\n+import com.b2international.snowowl.snomed.core.domain.refset.SnomedReferenceSetMember;\n+import com.b2international.snowowl.snomed.core.domain.refset.SnomedReferenceSetMembers;\n+import com.google.common.base.Strings;\n+import com.google.common.collect.Maps;\n+import com.google.common.collect.Sets;\n+\n+/**\n+ * @since 7.8\n+ */\n+public class SnomedRefSetMappingSearchRequestEvaluator extends SnomedCollectionSearchRequestEvaluator<SetMapping, SetMappings> implements SetMappingSearchRequestEvaluator {\n+\n+\t//RefsetID -> targetComponentURI\n+\tprivate Map<String, ComponentURI> targetCodeSystemMap = Maps.newHashMap();\n+", "originalCommit": "2e4c32c6e8053ecbafe4552a6a8d1e36ef1b0d64", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDk2ODI5Mg==", "url": "https://github.com/b2ihealthcare/snow-owl/pull/610#discussion_r460968292", "bodyText": "Done", "author": "molnarlaura", "createdAt": "2020-07-27T15:18:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc2MTYwOQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "f1589ded589b03f8264d014dcc03ceeba22e200a", "url": "https://github.com/b2ihealthcare/snow-owl/commit/f1589ded589b03f8264d014dcc03ceeba22e200a", "message": "SO-4025: rename classes", "committedDate": "2020-07-27T09:42:51Z", "type": "commit"}, {"oid": "df298c1462d59171d18f5f1edeb99ab7b2ce2a03", "url": "https://github.com/b2ihealthcare/snow-owl/commit/df298c1462d59171d18f5f1edeb99ab7b2ce2a03", "message": "SO-4025: rename method", "committedDate": "2020-07-27T11:44:07Z", "type": "commit"}, {"oid": "cc2d2fb84353682193f78e2e3772b5c730f50892", "url": "https://github.com/b2ihealthcare/snow-owl/commit/cc2d2fb84353682193f78e2e3772b5c730f50892", "message": "SO-4025: rename class", "committedDate": "2020-07-27T11:46:56Z", "type": "commit"}, {"oid": "c2cec83993c399d762546c2dd53dc08b262cf50a", "url": "https://github.com/b2ihealthcare/snow-owl/commit/c2cec83993c399d762546c2dd53dc08b262cf50a", "message": "SO-4025: rename class", "committedDate": "2020-07-27T11:47:55Z", "type": "commit"}, {"oid": "b28ea6f36a1e097ea981659b14ef09e936a85538", "url": "https://github.com/b2ihealthcare/snow-owl/commit/b28ea6f36a1e097ea981659b14ef09e936a85538", "message": "SO-4025: rename method", "committedDate": "2020-07-27T11:49:42Z", "type": "commit"}, {"oid": "21a034ea2f61a1334a16723973f4b8e33158c14b", "url": "https://github.com/b2ihealthcare/snow-owl/commit/21a034ea2f61a1334a16723973f4b8e33158c14b", "message": "SO-4025: rename variables", "committedDate": "2020-07-27T11:51:01Z", "type": "commit"}, {"oid": "897f1ca9f2de87b7e6ea4e93c71cb979b21eb146", "url": "https://github.com/b2ihealthcare/snow-owl/commit/897f1ca9f2de87b7e6ea4e93c71cb979b21eb146", "message": "SO-4025: rename method", "committedDate": "2020-07-27T11:51:48Z", "type": "commit"}, {"oid": "6ed22b937251c6fa74dde047713d6daa031c8494", "url": "https://github.com/b2ihealthcare/snow-owl/commit/6ed22b937251c6fa74dde047713d6daa031c8494", "message": "SO-4025: add correct license", "committedDate": "2020-07-27T11:52:40Z", "type": "commit"}, {"oid": "97bf0b0b10be8443e0074f1cc0ef7e77412dd1ff", "url": "https://github.com/b2ihealthcare/snow-owl/commit/97bf0b0b10be8443e0074f1cc0ef7e77412dd1ff", "message": "SO-4025: rename class", "committedDate": "2020-07-27T11:54:13Z", "type": "commit"}, {"oid": "ee68596164d02ac1c8851431fd8fdcfedbe174c5", "url": "https://github.com/b2ihealthcare/snow-owl/commit/ee68596164d02ac1c8851431fd8fdcfedbe174c5", "message": "SO-4025: rename class", "committedDate": "2020-07-27T11:55:30Z", "type": "commit"}, {"oid": "ca139276e98b5b0773fde5906787a4b60694ff70", "url": "https://github.com/b2ihealthcare/snow-owl/commit/ca139276e98b5b0773fde5906787a4b60694ff70", "message": "SO-4025: rename method", "committedDate": "2020-07-27T11:56:42Z", "type": "commit"}, {"oid": "b06521a0d5812fc411dc9e8b278529ea4c60d62c", "url": "https://github.com/b2ihealthcare/snow-owl/commit/b06521a0d5812fc411dc9e8b278529ea4c60d62c", "message": "SO-4025: rename method", "committedDate": "2020-07-27T11:57:17Z", "type": "commit"}, {"oid": "4e313cf40f956a550acd762747e0276f41468c2f", "url": "https://github.com/b2ihealthcare/snow-owl/commit/4e313cf40f956a550acd762747e0276f41468c2f", "message": "SO-4025: make class final and package private", "committedDate": "2020-07-27T12:16:42Z", "type": "commit"}, {"oid": "eff369138b15891d9e243fa58923f0513b136d81", "url": "https://github.com/b2ihealthcare/snow-owl/commit/eff369138b15891d9e243fa58923f0513b136d81", "message": "SO-4025: set limit to all results", "committedDate": "2020-07-27T12:17:29Z", "type": "commit"}, {"oid": "0643086489bf3ae7cda5ec0a484c371f21c855a3", "url": "https://github.com/b2ihealthcare/snow-owl/commit/0643086489bf3ae7cda5ec0a484c371f21c855a3", "message": "SO-4025: make class final", "committedDate": "2020-07-27T12:18:22Z", "type": "commit"}, {"oid": "290fa31dd9b3a9a5d2be3b14d3b18d50871b2a32", "url": "https://github.com/b2ihealthcare/snow-owl/commit/290fa31dd9b3a9a5d2be3b14d3b18d50871b2a32", "message": "SO-4025: use public final instead of final public", "committedDate": "2020-07-27T12:19:13Z", "type": "commit"}, {"oid": "1c892902cc625072c523fec078fef3e35b3192ca", "url": "https://github.com/b2ihealthcare/snow-owl/commit/1c892902cc625072c523fec078fef3e35b3192ca", "message": "SO-4025: make Builder final", "committedDate": "2020-07-27T12:20:42Z", "type": "commit"}, {"oid": "da52600b8c12588fe6a555297bc18dfc0ae5daad", "url": "https://github.com/b2ihealthcare/snow-owl/commit/da52600b8c12588fe6a555297bc18dfc0ae5daad", "message": "SO-4025: rename field", "committedDate": "2020-07-27T12:22:23Z", "type": "commit"}, {"oid": "b89474024a356dda4c3cf6834e64530daad6047f", "url": "https://github.com/b2ihealthcare/snow-owl/commit/b89474024a356dda4c3cf6834e64530daad6047f", "message": "SO-4025: make fields final", "committedDate": "2020-07-27T12:23:30Z", "type": "commit"}, {"oid": "47f3183425c644ce1f7f2e4f199b3945b8e2141b", "url": "https://github.com/b2ihealthcare/snow-owl/commit/47f3183425c644ce1f7f2e4f199b3945b8e2141b", "message": "SO-4025: rename method", "committedDate": "2020-07-27T12:45:27Z", "type": "commit"}, {"oid": "4018e9e14a79ac5b551db80e197beffd893dcf37", "url": "https://github.com/b2ihealthcare/snow-owl/commit/4018e9e14a79ac5b551db80e197beffd893dcf37", "message": "SO-4025: use assertThat instead of assertEquals", "committedDate": "2020-07-27T13:36:01Z", "type": "commit"}, {"oid": "ed117f9f8318206fff03d116c68c36a1cd6f87a9", "url": "https://github.com/b2ihealthcare/snow-owl/commit/ed117f9f8318206fff03d116c68c36a1cd6f87a9", "message": "SO-4025: use assertThat instead of assertEquals", "committedDate": "2020-07-27T13:51:34Z", "type": "commit"}, {"oid": "e7ca93e20431961c5168a8169125f89351164742", "url": "https://github.com/b2ihealthcare/snow-owl/commit/e7ca93e20431961c5168a8169125f89351164742", "message": "SO-4025: remove abstract class", "committedDate": "2020-07-27T15:15:30Z", "type": "commit"}, {"oid": "0a76b9b8b550fc0c0dbab39efdb6f4a36b49a3c0", "url": "https://github.com/b2ihealthcare/snow-owl/commit/0a76b9b8b550fc0c0dbab39efdb6f4a36b49a3c0", "message": "SO-4025: make class final and methods private", "committedDate": "2020-07-27T15:20:32Z", "type": "commit"}, {"oid": "132b0416edbc0e9646a7e70136bcc0646c00bece", "url": "https://github.com/b2ihealthcare/snow-owl/commit/132b0416edbc0e9646a7e70136bcc0646c00bece", "message": "SO-4025: fix indentation", "committedDate": "2020-07-27T15:25:31Z", "type": "commit"}, {"oid": "bae3f99acef6526665a312e0567cdcad7235957f", "url": "https://github.com/b2ihealthcare/snow-owl/commit/bae3f99acef6526665a312e0567cdcad7235957f", "message": "SO-4025: create method to get the map type refset types", "committedDate": "2020-07-28T08:50:01Z", "type": "commit"}, {"oid": "7684f4c77e0db0e18503e41d67c1676ecccef6af", "url": "https://github.com/b2ihealthcare/snow-owl/commit/7684f4c77e0db0e18503e41d67c1676ecccef6af", "message": "SO-4025: use the static method to get the map type refset types", "committedDate": "2020-07-28T08:50:43Z", "type": "commit"}, {"oid": "54ad76d6a2ac300c1489ddec040ea62bd38c46ba", "url": "https://github.com/b2ihealthcare/snow-owl/commit/54ad76d6a2ac300c1489ddec040ea62bd38c46ba", "message": "SO-4025: search for simple and description type refsets as well", "committedDate": "2020-07-28T08:51:31Z", "type": "commit"}, {"oid": "61b7807436904fcf56d686e299af777128c8ee07", "url": "https://github.com/b2ihealthcare/snow-owl/commit/61b7807436904fcf56d686e299af777128c8ee07", "message": "Merge remote-tracking branch 'origin/7.x' into feature/SO-4025-map-compare", "committedDate": "2020-07-29T13:54:37Z", "type": "commit"}]}