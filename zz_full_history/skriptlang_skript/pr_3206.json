{"pr_number": 3206, "pr_title": "Expr pierce level", "pr_author": "DeltaRays", "pr_createdAt": "2020-07-24T19:18:41Z", "pr_url": "https://github.com/SkriptLang/Skript/pull/3206", "merge_commit": "525371c84bd8c59408998924e5841b94fc1bbd07", "timeline": [{"oid": "9b3297793ff477c72d1f697fb9810a0f0eb38e26", "url": "https://github.com/SkriptLang/Skript/commit/9b3297793ff477c72d1f697fb9810a0f0eb38e26", "message": "Added `arrow pierce level` (it doesn't work with tridents)", "committedDate": "2020-07-24T19:12:43Z", "type": "commit"}, {"oid": "6b5ab586e2512cb069afe4ca31e5adc713a9faca", "url": "https://github.com/SkriptLang/Skript/commit/6b5ab586e2512cb069afe4ca31e5adc713a9faca", "message": "Added a condition to check if the arrowPierceLevel method exists", "committedDate": "2020-07-24T19:15:16Z", "type": "commit"}, {"oid": "71dcde3c018a6366ef1555bee7f1910d4364c593", "url": "https://github.com/SkriptLang/Skript/commit/71dcde3c018a6366ef1555bee7f1910d4364c593", "message": "replaced projectile with arrow", "committedDate": "2020-07-24T19:17:46Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDMxNjI0NA==", "url": "https://github.com/SkriptLang/Skript/pull/3206#discussion_r460316244", "body": "```suggestion\r\n\t\tif (Skript.classExists(\"org.bukkit.entity.AbstractArrow\") || Skript.methodExists(Arrow.class, \"getPierceLevel\"))\r\n\t\t\tregister(ExprArrowPierceLevel.class, Number.class, \"[the] arrow pierce level\", \"projectiles\");\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tif(Skript.classExists(\"org.bukkit.entity.AbstractArrow\") || Skript.methodExists(Arrow.class, \"getPierceLevel\")) register(ExprArrowPierceLevel.class, Number.class, \"[the] arrow pierce level\", \"projectiles\");\n          \n          \n            \n            \t\tif (Skript.classExists(\"org.bukkit.entity.AbstractArrow\") || Skript.methodExists(Arrow.class, \"getPierceLevel\"))\n          \n          \n            \n            \t\t\tregister(ExprArrowPierceLevel.class, Number.class, \"[the] arrow pierce level\", \"projectiles\");", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">\t\t<span class=\"pl-k\">if</span>(<span class=\"pl-smi\">Skript</span><span class=\"pl-k\">.</span>classExists(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>org.bukkit.entity.AbstractArrow<span class=\"pl-pds\">\"</span></span>) <span class=\"pl-k\">||</span> <span class=\"pl-smi\">Skript</span><span class=\"pl-k\">.</span>methodExists(<span class=\"pl-smi\">Arrow</span><span class=\"pl-k\">.</span>class, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>getPierceLevel<span class=\"pl-pds\">\"</span></span>))<span class=\"x x-first\"> register(</span><span class=\"pl-smi x\">ExprArrowPierceLevel</span><span class=\"pl-k x\">.</span><span class=\"x\">class, </span><span class=\"pl-smi x\">Number</span><span class=\"pl-k x\">.</span><span class=\"x\">class, </span><span class=\"pl-s\"><span class=\"pl-pds x\">\"</span><span class=\"x\">[the] arrow pierce level</span><span class=\"pl-pds x\">\"</span></span><span class=\"x\">, </span><span class=\"pl-s\"><span class=\"pl-pds x\">\"</span><span class=\"x\">projectiles</span><span class=\"pl-pds x\">\"</span></span><span class=\"x x-last\">);</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t\t<span class=\"pl-k\">if</span><span class=\"x x-first x-last\"> </span>(<span class=\"pl-smi\">Skript</span><span class=\"pl-k\">.</span>classExists(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>org.bukkit.entity.AbstractArrow<span class=\"pl-pds\">\"</span></span>) <span class=\"pl-k\">||</span> <span class=\"pl-smi\">Skript</span><span class=\"pl-k\">.</span>methodExists(<span class=\"pl-smi\">Arrow</span><span class=\"pl-k\">.</span>class, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>getPierceLevel<span class=\"pl-pds\">\"</span></span>))</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">\t\t\tregister(<span class=\"pl-smi\">ExprArrowPierceLevel</span><span class=\"pl-k\">.</span>class, <span class=\"pl-smi\">Number</span><span class=\"pl-k\">.</span>class, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>[the] arrow pierce level<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>projectiles<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "Matocolotoe", "createdAt": "2020-07-24T22:35:35Z", "path": "src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/**\n+ * This file is part of Skript.\n+ *\n+ * Skript is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Skript is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Skript.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ *\n+ * Copyright 2011-2017 Peter G\u00fcttinger and contributors\n+ */\n+package ch.njol.skript.expressions;\n+\n+import org.bukkit.entity.AbstractArrow;\n+import org.bukkit.entity.Arrow;\n+import org.bukkit.entity.Projectile;\n+import org.bukkit.event.Event;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+import ch.njol.skript.Skript;\n+import ch.njol.skript.classes.Changer.ChangeMode;\n+import ch.njol.skript.doc.Description;\n+import ch.njol.skript.doc.Examples;\n+import ch.njol.skript.doc.Name;\n+import ch.njol.skript.doc.Since;\n+import ch.njol.skript.expressions.base.SimplePropertyExpression;\n+import ch.njol.util.coll.CollectionUtils;\n+\n+@Name(\"Arrow Pierce Level\")\n+@Description(\"An arrow's pierce level.\")\n+@Examples({\"on shoot:\",\n+\t\"\\tevent-projectile is an arrow\",\n+\t\"\\tset arrow pierce level of event-projectile to 5\"})\n+@Since(\"INSERT VERSION\")\n+public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, Number> {\n+\t\n+\tstatic {\n+\t\tif(Skript.classExists(\"org.bukkit.entity.AbstractArrow\") || Skript.methodExists(Arrow.class, \"getPierceLevel\")) register(ExprArrowPierceLevel.class, Number.class, \"[the] arrow pierce level\", \"projectiles\");", "originalCommit": "71dcde3c018a6366ef1555bee7f1910d4364c593", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8ab7f944d8ef01077b8aafb1d5cb2f690d5c81dd", "changed_code": [{"header": "diff --git a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\nindex eed383fd..f9d9ab5f 100644\n--- a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n+++ b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n", "chunk": "@@ -42,12 +42,13 @@ import ch.njol.util.coll.CollectionUtils;\n @Since(\"INSERT VERSION\")\n public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, Number> {\n \t\n+\tfinal static boolean abstractArrowExists = Skript.classExists(\"org.bukkit.entity.AbstractArrow\");\n+\t\n \tstatic {\n-\t\tif(Skript.classExists(\"org.bukkit.entity.AbstractArrow\") || Skript.methodExists(Arrow.class, \"getPierceLevel\")) register(ExprArrowPierceLevel.class, Number.class, \"[the] arrow pierce level\", \"projectiles\");\n+\t\tif (abstractArrowExists || Skript.methodExists(Arrow.class, \"getPierceLevel\"))\n+\t\t\tregister(ExprArrowPierceLevel.class, Number.class, \"[the] arrow pierce level\", \"projectiles\");\n \t}\n \t\n-\tboolean abstractArrowExists = Skript.classExists(\"org.bukkit.entity.AbstractArrow\");\n-\t\n \t@Nullable\n \t@Override\n \tpublic Number convert(Projectile arrow) {\n", "next_change": {"commit": "aa17d7a45b30b92b759d72bacfd8899030117a9c", "changed_code": [{"header": "diff --git a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\nindex f9d9ab5f..a47b9cb9 100644\n--- a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n+++ b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n", "chunk": "@@ -39,84 +39,62 @@ import ch.njol.util.coll.CollectionUtils;\n @Examples({\"on shoot:\",\n \t\"\\tevent-projectile is an arrow\",\n \t\"\\tset arrow pierce level of event-projectile to 5\"})\n+@RequiredPlugins(\"Minecraft 1.14+\")\n @Since(\"INSERT VERSION\")\n public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, Number> {\n \t\n-\tfinal static boolean abstractArrowExists = Skript.classExists(\"org.bukkit.entity.AbstractArrow\");\n+\tprivate final static boolean CAN_USE_PIERCE = Skript.methodExists(Arrow.class, \"getPierceLevel\");\n \t\n \tstatic {\n-\t\tif (abstractArrowExists || Skript.methodExists(Arrow.class, \"getPierceLevel\"))\n+\t\tif (CAN_USE_PIERCE)\n \t\t\tregister(ExprArrowPierceLevel.class, Number.class, \"[the] arrow pierce level\", \"projectiles\");\n \t}\n \t\n \t@Nullable\n \t@Override\n \tpublic Number convert(Projectile arrow) {\n-\t\tif (abstractArrowExists)\n-\t\t\treturn arrow instanceof AbstractArrow ? ((AbstractArrow) arrow).getPierceLevel() : null;\n-\t\treturn arrow instanceof Arrow ? ((Arrow) arrow).getPierceLevel() : null;\n+\t\treturn ((Arrow) arrow).getPierceLevel();\n \t}\n \t\n \t@Nullable\n \t@Override\n \tpublic Class<?>[] acceptChange(ChangeMode mode) {\n-\t\treturn (mode == ChangeMode.DELETE || mode == ChangeMode.REMOVE_ALL) ? null : CollectionUtils.array(Number.class);\n+\t\tswitch (mode) {\n+\t\t\tcase SET:\n+\t\t\tcase RESET:\n+\t\t\tcase REMOVE:\n+\t\t\tcase ADD:\n+\t\t\t\treturn CollectionUtils.array(Number.class);\n+\t\t\tdefault:\n+\t\t\t\treturn null;\n+\t\t}\n \t}\n \t\n \t@Override\n \tpublic void change(Event e, @Nullable Object[] delta, ChangeMode mode) {\n \t\tint strength = delta != null ? Math.max(((Number) delta[0]).intValue(), 0) : 0;\n+\t\tint mod = 1;\n \t\tswitch (mode) {\n \t\t\tcase REMOVE:\n-\t\t\t\tif (abstractArrowExists)\n-\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n-\t\t\t\t\t\tif (entity instanceof AbstractArrow) {\n-\t\t\t\t\t\t\tAbstractArrow abstractArrow = (AbstractArrow) entity;\n-\t\t\t\t\t\t\tint dmg = Math.round(abstractArrow.getPierceLevel() - strength);\n-\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n-\t\t\t\t\t\t\tabstractArrow.setPierceLevel(dmg);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\telse\n-\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n-\t\t\t\t\t\tif (entity instanceof Arrow) {\n-\t\t\t\t\t\t\tArrow arrow = (Arrow) entity;\n-\t\t\t\t\t\t\tint dmg = Math.round(arrow.getPierceLevel() - strength);\n-\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n-\t\t\t\t\t\t\tarrow.setPierceLevel(dmg);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\tbreak;\n+\t\t\t\tmod = -1;\n \t\t\tcase ADD:\n-\t\t\t\tif (abstractArrowExists)\n-\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n-\t\t\t\t\t\tif (entity instanceof AbstractArrow) {\n-\t\t\t\t\t\t\tAbstractArrow abstractArrow = (AbstractArrow) entity;\n-\t\t\t\t\t\t\tint dmg = Math.round(abstractArrow.getPierceLevel() + strength);\n-\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n-\t\t\t\t\t\t\tabstractArrow.setPierceLevel(dmg);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\telse\n-\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n-\t\t\t\t\t\tif (entity instanceof Arrow) {\n-\t\t\t\t\t\t\tArrow arrow = (Arrow) entity;\n-\t\t\t\t\t\t\tint dmg = Math.round(arrow.getPierceLevel() + strength);\n-\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n-\t\t\t\t\t\t\tarrow.setPierceLevel(dmg);\n-\t\t\t\t\t\t}\n+\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n+\t\t\t\t\tif (entity instanceof Arrow) {\n+\t\t\t\t\t\tArrow arrow = (Arrow) entity;\n+\t\t\t\t\t\tint dmg = Math.round(arrow.getPierceLevel() + strength * mod);\n+\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n+\t\t\t\t\t\tarrow.setPierceLevel(dmg);\n \t\t\t\t\t}\n+\t\t\t\t}\n \t\t\t\tbreak;\n \t\t\tcase RESET:\n \t\t\tcase SET:\n \t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n-\t\t\t\t\tif (abstractArrowExists) {\n-\t\t\t\t\t\tif (entity instanceof AbstractArrow) ((AbstractArrow) entity).setPierceLevel(strength);\n-\t\t\t\t\t} else if (entity instanceof Arrow) {\n-\t\t\t\t\t\t((Arrow) entity).setPierceLevel(strength);\n-\t\t\t\t\t}\n+\t\t\t\t\t((Arrow) entity).setPierceLevel(strength);\n \t\t\t\t}\n \t\t\t\tbreak;\n+\t\t\tdefault:\n+\t\t\t\tassert false;\n \t\t}\n \t}\n \t\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "525371c84bd8c59408998924e5841b94fc1bbd07", "changed_code": [{"header": "diff --git a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\nindex eed383fd..5574dc46 100644\n--- a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n+++ b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n", "chunk": "@@ -39,38 +39,62 @@ import ch.njol.util.coll.CollectionUtils;\n @Examples({\"on shoot:\",\n \t\"\\tevent-projectile is an arrow\",\n \t\"\\tset arrow pierce level of event-projectile to 5\"})\n+@RequiredPlugins(\"Minecraft 1.14+\")\n @Since(\"INSERT VERSION\")\n public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, Number> {\n \t\n+\tprivate final static boolean CAN_USE_PIERCE = Skript.methodExists(Arrow.class, \"getPierceLevel\");\n+\t\n \tstatic {\n-\t\tif(Skript.classExists(\"org.bukkit.entity.AbstractArrow\") || Skript.methodExists(Arrow.class, \"getPierceLevel\")) register(ExprArrowPierceLevel.class, Number.class, \"[the] arrow pierce level\", \"projectiles\");\n+\t\tif (CAN_USE_PIERCE)\n+\t\t\tregister(ExprArrowPierceLevel.class, Number.class, \"[the] arrow pierce level\", \"projectiles\");\n \t}\n \t\n-\tboolean abstractArrowExists = Skript.classExists(\"org.bukkit.entity.AbstractArrow\");\n-\t\n \t@Nullable\n \t@Override\n \tpublic Number convert(Projectile arrow) {\n-\t\tif (abstractArrowExists)\n-\t\t\treturn arrow instanceof AbstractArrow ? ((AbstractArrow) arrow).getPierceLevel() : null;\n-\t\treturn arrow instanceof Arrow ? ((Arrow) arrow).getPierceLevel() : null;\n+\t\treturn ((Arrow) arrow).getPierceLevel();\n \t}\n \t\n \t@Nullable\n \t@Override\n \tpublic Class<?>[] acceptChange(ChangeMode mode) {\n-\t\treturn (mode == ChangeMode.SET || mode == ChangeMode.RESET) ? CollectionUtils.array(Number.class) : null;\n+\t\tswitch (mode) {\n+\t\t\tcase SET:\n+\t\t\tcase RESET:\n+\t\t\tcase REMOVE:\n+\t\t\tcase ADD:\n+\t\t\t\treturn CollectionUtils.array(Number.class);\n+\t\t\tdefault:\n+\t\t\t\treturn null;\n+\t\t}\n \t}\n \t\n \t@Override\n \tpublic void change(Event e, @Nullable Object[] delta, ChangeMode mode) {\n \t\tint strength = delta != null ? Math.max(((Number) delta[0]).intValue(), 0) : 0;\n-\t\tfor (Projectile entity : getExpr().getAll(e)) {\n-\t\t\tif (abstractArrowExists) {\n-\t\t\t\tSystem.out.println(entity.getType().name());\n-\t\t\t\tif (entity instanceof AbstractArrow) ((AbstractArrow) entity).setPierceLevel(strength);\n-\t\t\t} else if (entity instanceof Arrow)\n-\t\t\t\t((Arrow) entity).setPierceLevel(strength);\n+\t\tint mod = 1;\n+\t\tswitch (mode) {\n+\t\t\tcase REMOVE:\n+\t\t\t\tmod = -1;\n+\t\t\tcase ADD:\n+\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n+\t\t\t\t\tif (entity instanceof Arrow) {\n+\t\t\t\t\t\tArrow arrow = (Arrow) entity;\n+\t\t\t\t\t\tint dmg = Math.round(arrow.getPierceLevel() + strength * mod);\n+\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n+\t\t\t\t\t\tarrow.setPierceLevel(dmg);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tbreak;\n+\t\t\tcase RESET:\n+\t\t\tcase SET:\n+\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n+\t\t\t\t\t((Arrow) entity).setPierceLevel(strength);\n+\t\t\t\t}\n+\t\t\t\tbreak;\n+\t\t\tdefault:\n+\t\t\t\tassert false;\n \t\t}\n \t}\n \t\n", "next_change": {"commit": "1abd53beec4167993dd4245050c137d9d678f6c5", "changed_code": [{"header": "diff --git a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\nindex 5574dc46..39480e88 100644\n--- a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n+++ b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n", "chunk": "@@ -99,8 +99,8 @@ public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, N\n \t}\n \t\n \t@Override\n-\tpublic Class<? extends Number> getReturnType() {\n-\t\treturn Number.class;\n+\tpublic Class<? extends Long> getReturnType() {\n+\t\treturn Long.class;\n \t}\n \t\n \t@Override\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "525371c84bd8c59408998924e5841b94fc1bbd07", "message": "Merge commit", "committedDate": null}, {"oid": "4d704c8fbe1e76c97e7b0398b26f21c5401ce300", "committedDate": "2020-10-22 16:21:37 -0700", "message": "Prepare for release of 2.5.1 (#3488)"}, {"oid": "1abd53beec4167993dd4245050c137d9d678f6c5", "committedDate": "2021-08-14 18:58:58 +0200", "message": "Fix number/integer stuff (#4095)"}, {"oid": "452bb05e905526388c0831911b877bd350210331", "committedDate": "2022-04-18 17:28:17 +0200", "message": "Fix some extra and missing [the]'s (#4604)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDMxNjM3OQ==", "url": "https://github.com/SkriptLang/Skript/pull/3206#discussion_r460316379", "body": "Debug line there", "bodyText": "Debug line there", "bodyHTML": "<p dir=\"auto\">Debug line there</p>", "author": "Matocolotoe", "createdAt": "2020-07-24T22:36:07Z", "path": "src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/**\n+ * This file is part of Skript.\n+ *\n+ * Skript is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Skript is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Skript.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ *\n+ * Copyright 2011-2017 Peter G\u00fcttinger and contributors\n+ */\n+package ch.njol.skript.expressions;\n+\n+import org.bukkit.entity.AbstractArrow;\n+import org.bukkit.entity.Arrow;\n+import org.bukkit.entity.Projectile;\n+import org.bukkit.event.Event;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+import ch.njol.skript.Skript;\n+import ch.njol.skript.classes.Changer.ChangeMode;\n+import ch.njol.skript.doc.Description;\n+import ch.njol.skript.doc.Examples;\n+import ch.njol.skript.doc.Name;\n+import ch.njol.skript.doc.Since;\n+import ch.njol.skript.expressions.base.SimplePropertyExpression;\n+import ch.njol.util.coll.CollectionUtils;\n+\n+@Name(\"Arrow Pierce Level\")\n+@Description(\"An arrow's pierce level.\")\n+@Examples({\"on shoot:\",\n+\t\"\\tevent-projectile is an arrow\",\n+\t\"\\tset arrow pierce level of event-projectile to 5\"})\n+@Since(\"INSERT VERSION\")\n+public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, Number> {\n+\t\n+\tstatic {\n+\t\tif(Skript.classExists(\"org.bukkit.entity.AbstractArrow\") || Skript.methodExists(Arrow.class, \"getPierceLevel\")) register(ExprArrowPierceLevel.class, Number.class, \"[the] arrow pierce level\", \"projectiles\");\n+\t}\n+\t\n+\tboolean abstractArrowExists = Skript.classExists(\"org.bukkit.entity.AbstractArrow\");\n+\t\n+\t@Nullable\n+\t@Override\n+\tpublic Number convert(Projectile arrow) {\n+\t\tif (abstractArrowExists)\n+\t\t\treturn arrow instanceof AbstractArrow ? ((AbstractArrow) arrow).getPierceLevel() : null;\n+\t\treturn arrow instanceof Arrow ? ((Arrow) arrow).getPierceLevel() : null;\n+\t}\n+\t\n+\t@Nullable\n+\t@Override\n+\tpublic Class<?>[] acceptChange(ChangeMode mode) {\n+\t\treturn (mode == ChangeMode.SET || mode == ChangeMode.RESET) ? CollectionUtils.array(Number.class) : null;\n+\t}\n+\t\n+\t@Override\n+\tpublic void change(Event e, @Nullable Object[] delta, ChangeMode mode) {\n+\t\tint strength = delta != null ? Math.max(((Number) delta[0]).intValue(), 0) : 0;\n+\t\tfor (Projectile entity : getExpr().getAll(e)) {\n+\t\t\tif (abstractArrowExists) {\n+\t\t\t\tSystem.out.println(entity.getType().name());", "originalCommit": "71dcde3c018a6366ef1555bee7f1910d4364c593", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8ab7f944d8ef01077b8aafb1d5cb2f690d5c81dd", "changed_code": [{"header": "diff --git a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\nindex eed383fd..f9d9ab5f 100644\n--- a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n+++ b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n", "chunk": "@@ -59,18 +60,63 @@ public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, N\n \t@Nullable\n \t@Override\n \tpublic Class<?>[] acceptChange(ChangeMode mode) {\n-\t\treturn (mode == ChangeMode.SET || mode == ChangeMode.RESET) ? CollectionUtils.array(Number.class) : null;\n+\t\treturn (mode == ChangeMode.DELETE || mode == ChangeMode.REMOVE_ALL) ? null : CollectionUtils.array(Number.class);\n \t}\n \t\n \t@Override\n \tpublic void change(Event e, @Nullable Object[] delta, ChangeMode mode) {\n \t\tint strength = delta != null ? Math.max(((Number) delta[0]).intValue(), 0) : 0;\n-\t\tfor (Projectile entity : getExpr().getAll(e)) {\n-\t\t\tif (abstractArrowExists) {\n-\t\t\t\tSystem.out.println(entity.getType().name());\n-\t\t\t\tif (entity instanceof AbstractArrow) ((AbstractArrow) entity).setPierceLevel(strength);\n-\t\t\t} else if (entity instanceof Arrow)\n-\t\t\t\t((Arrow) entity).setPierceLevel(strength);\n+\t\tswitch (mode) {\n+\t\t\tcase REMOVE:\n+\t\t\t\tif (abstractArrowExists)\n+\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n+\t\t\t\t\t\tif (entity instanceof AbstractArrow) {\n+\t\t\t\t\t\t\tAbstractArrow abstractArrow = (AbstractArrow) entity;\n+\t\t\t\t\t\t\tint dmg = Math.round(abstractArrow.getPierceLevel() - strength);\n+\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n+\t\t\t\t\t\t\tabstractArrow.setPierceLevel(dmg);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\telse\n+\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n+\t\t\t\t\t\tif (entity instanceof Arrow) {\n+\t\t\t\t\t\t\tArrow arrow = (Arrow) entity;\n+\t\t\t\t\t\t\tint dmg = Math.round(arrow.getPierceLevel() - strength);\n+\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n+\t\t\t\t\t\t\tarrow.setPierceLevel(dmg);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\tbreak;\n+\t\t\tcase ADD:\n+\t\t\t\tif (abstractArrowExists)\n+\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n+\t\t\t\t\t\tif (entity instanceof AbstractArrow) {\n+\t\t\t\t\t\t\tAbstractArrow abstractArrow = (AbstractArrow) entity;\n+\t\t\t\t\t\t\tint dmg = Math.round(abstractArrow.getPierceLevel() + strength);\n+\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n+\t\t\t\t\t\t\tabstractArrow.setPierceLevel(dmg);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\telse\n+\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n+\t\t\t\t\t\tif (entity instanceof Arrow) {\n+\t\t\t\t\t\t\tArrow arrow = (Arrow) entity;\n+\t\t\t\t\t\t\tint dmg = Math.round(arrow.getPierceLevel() + strength);\n+\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n+\t\t\t\t\t\t\tarrow.setPierceLevel(dmg);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\tbreak;\n+\t\t\tcase RESET:\n+\t\t\tcase SET:\n+\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n+\t\t\t\t\tif (abstractArrowExists) {\n+\t\t\t\t\t\tif (entity instanceof AbstractArrow) ((AbstractArrow) entity).setPierceLevel(strength);\n+\t\t\t\t\t} else if (entity instanceof Arrow) {\n+\t\t\t\t\t\t((Arrow) entity).setPierceLevel(strength);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tbreak;\n \t\t}\n \t}\n \t\n", "next_change": {"commit": "72675726749f9cb5d103c040df33073b42e8b442", "changed_code": [{"header": "diff --git a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\nindex f9d9ab5f..43e83652 100644\n--- a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n+++ b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n", "chunk": "@@ -60,63 +60,58 @@ public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, N\n \t@Nullable\n \t@Override\n \tpublic Class<?>[] acceptChange(ChangeMode mode) {\n-\t\treturn (mode == ChangeMode.DELETE || mode == ChangeMode.REMOVE_ALL) ? null : CollectionUtils.array(Number.class);\n+\t\tswitch (mode) {\n+\t\t\tcase SET:\n+\t\t\tcase RESET:\n+\t\t\tcase REMOVE:\n+\t\t\tcase ADD:\n+\t\t\t\treturn CollectionUtils.array(Number.class);\n+\t\t\tdefault:\n+\t\t\t\treturn null;\n+\t\t}\n \t}\n \t\n \t@Override\n \tpublic void change(Event e, @Nullable Object[] delta, ChangeMode mode) {\n \t\tint strength = delta != null ? Math.max(((Number) delta[0]).intValue(), 0) : 0;\n+\t\tint mod = 1;\n \t\tswitch (mode) {\n \t\t\tcase REMOVE:\n-\t\t\t\tif (abstractArrowExists)\n-\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n-\t\t\t\t\t\tif (entity instanceof AbstractArrow) {\n-\t\t\t\t\t\t\tAbstractArrow abstractArrow = (AbstractArrow) entity;\n-\t\t\t\t\t\t\tint dmg = Math.round(abstractArrow.getPierceLevel() - strength);\n-\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n-\t\t\t\t\t\t\tabstractArrow.setPierceLevel(dmg);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\telse\n-\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n-\t\t\t\t\t\tif (entity instanceof Arrow) {\n-\t\t\t\t\t\t\tArrow arrow = (Arrow) entity;\n-\t\t\t\t\t\t\tint dmg = Math.round(arrow.getPierceLevel() - strength);\n-\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n-\t\t\t\t\t\t\tarrow.setPierceLevel(dmg);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\tbreak;\n+\t\t\t\tmod = -1;\n \t\t\tcase ADD:\n-\t\t\t\tif (abstractArrowExists)\n+\t\t\t\tif (abstractArrowExists) {\n \t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n \t\t\t\t\t\tif (entity instanceof AbstractArrow) {\n \t\t\t\t\t\t\tAbstractArrow abstractArrow = (AbstractArrow) entity;\n-\t\t\t\t\t\t\tint dmg = Math.round(abstractArrow.getPierceLevel() + strength);\n+\t\t\t\t\t\t\tint dmg = Math.round(abstractArrow.getPierceLevel() + strength * mod);\n \t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n \t\t\t\t\t\t\tabstractArrow.setPierceLevel(dmg);\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n-\t\t\t\telse\n+\t\t\t\t} else {\n \t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n \t\t\t\t\t\tif (entity instanceof Arrow) {\n \t\t\t\t\t\t\tArrow arrow = (Arrow) entity;\n-\t\t\t\t\t\t\tint dmg = Math.round(arrow.getPierceLevel() + strength);\n+\t\t\t\t\t\t\tint dmg = Math.round(arrow.getPierceLevel() + strength * mod);\n \t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n \t\t\t\t\t\t\tarrow.setPierceLevel(dmg);\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n+\t\t\t\t}\n \t\t\t\tbreak;\n \t\t\tcase RESET:\n \t\t\tcase SET:\n \t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n \t\t\t\t\tif (abstractArrowExists) {\n-\t\t\t\t\t\tif (entity instanceof AbstractArrow) ((AbstractArrow) entity).setPierceLevel(strength);\n+\t\t\t\t\t\tif (entity instanceof AbstractArrow)\n+\t\t\t\t\t\t\t((AbstractArrow) entity).setPierceLevel(strength);\n \t\t\t\t\t} else if (entity instanceof Arrow) {\n \t\t\t\t\t\t((Arrow) entity).setPierceLevel(strength);\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t\tbreak;\n+\t\t\tdefault:\n+\t\t\t\tassert false;\n \t\t}\n \t}\n \t\n", "next_change": {"commit": "aa17d7a45b30b92b759d72bacfd8899030117a9c", "changed_code": [{"header": "diff --git a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\nindex 43e83652..a47b9cb9 100644\n--- a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n+++ b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n", "chunk": "@@ -79,35 +78,19 @@ public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, N\n \t\t\tcase REMOVE:\n \t\t\t\tmod = -1;\n \t\t\tcase ADD:\n-\t\t\t\tif (abstractArrowExists) {\n-\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n-\t\t\t\t\t\tif (entity instanceof AbstractArrow) {\n-\t\t\t\t\t\t\tAbstractArrow abstractArrow = (AbstractArrow) entity;\n-\t\t\t\t\t\t\tint dmg = Math.round(abstractArrow.getPierceLevel() + strength * mod);\n-\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n-\t\t\t\t\t\t\tabstractArrow.setPierceLevel(dmg);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t} else {\n-\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n-\t\t\t\t\t\tif (entity instanceof Arrow) {\n-\t\t\t\t\t\t\tArrow arrow = (Arrow) entity;\n-\t\t\t\t\t\t\tint dmg = Math.round(arrow.getPierceLevel() + strength * mod);\n-\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n-\t\t\t\t\t\t\tarrow.setPierceLevel(dmg);\n-\t\t\t\t\t\t}\n+\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n+\t\t\t\t\tif (entity instanceof Arrow) {\n+\t\t\t\t\t\tArrow arrow = (Arrow) entity;\n+\t\t\t\t\t\tint dmg = Math.round(arrow.getPierceLevel() + strength * mod);\n+\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n+\t\t\t\t\t\tarrow.setPierceLevel(dmg);\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t\tbreak;\n \t\t\tcase RESET:\n \t\t\tcase SET:\n \t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n-\t\t\t\t\tif (abstractArrowExists) {\n-\t\t\t\t\t\tif (entity instanceof AbstractArrow)\n-\t\t\t\t\t\t\t((AbstractArrow) entity).setPierceLevel(strength);\n-\t\t\t\t\t} else if (entity instanceof Arrow) {\n-\t\t\t\t\t\t((Arrow) entity).setPierceLevel(strength);\n-\t\t\t\t\t}\n+\t\t\t\t\t((Arrow) entity).setPierceLevel(strength);\n \t\t\t\t}\n \t\t\t\tbreak;\n \t\t\tdefault:\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "525371c84bd8c59408998924e5841b94fc1bbd07", "changed_code": [{"header": "diff --git a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\nindex eed383fd..5574dc46 100644\n--- a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n+++ b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n", "chunk": "@@ -39,38 +39,62 @@ import ch.njol.util.coll.CollectionUtils;\n @Examples({\"on shoot:\",\n \t\"\\tevent-projectile is an arrow\",\n \t\"\\tset arrow pierce level of event-projectile to 5\"})\n+@RequiredPlugins(\"Minecraft 1.14+\")\n @Since(\"INSERT VERSION\")\n public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, Number> {\n \t\n+\tprivate final static boolean CAN_USE_PIERCE = Skript.methodExists(Arrow.class, \"getPierceLevel\");\n+\t\n \tstatic {\n-\t\tif(Skript.classExists(\"org.bukkit.entity.AbstractArrow\") || Skript.methodExists(Arrow.class, \"getPierceLevel\")) register(ExprArrowPierceLevel.class, Number.class, \"[the] arrow pierce level\", \"projectiles\");\n+\t\tif (CAN_USE_PIERCE)\n+\t\t\tregister(ExprArrowPierceLevel.class, Number.class, \"[the] arrow pierce level\", \"projectiles\");\n \t}\n \t\n-\tboolean abstractArrowExists = Skript.classExists(\"org.bukkit.entity.AbstractArrow\");\n-\t\n \t@Nullable\n \t@Override\n \tpublic Number convert(Projectile arrow) {\n-\t\tif (abstractArrowExists)\n-\t\t\treturn arrow instanceof AbstractArrow ? ((AbstractArrow) arrow).getPierceLevel() : null;\n-\t\treturn arrow instanceof Arrow ? ((Arrow) arrow).getPierceLevel() : null;\n+\t\treturn ((Arrow) arrow).getPierceLevel();\n \t}\n \t\n \t@Nullable\n \t@Override\n \tpublic Class<?>[] acceptChange(ChangeMode mode) {\n-\t\treturn (mode == ChangeMode.SET || mode == ChangeMode.RESET) ? CollectionUtils.array(Number.class) : null;\n+\t\tswitch (mode) {\n+\t\t\tcase SET:\n+\t\t\tcase RESET:\n+\t\t\tcase REMOVE:\n+\t\t\tcase ADD:\n+\t\t\t\treturn CollectionUtils.array(Number.class);\n+\t\t\tdefault:\n+\t\t\t\treturn null;\n+\t\t}\n \t}\n \t\n \t@Override\n \tpublic void change(Event e, @Nullable Object[] delta, ChangeMode mode) {\n \t\tint strength = delta != null ? Math.max(((Number) delta[0]).intValue(), 0) : 0;\n-\t\tfor (Projectile entity : getExpr().getAll(e)) {\n-\t\t\tif (abstractArrowExists) {\n-\t\t\t\tSystem.out.println(entity.getType().name());\n-\t\t\t\tif (entity instanceof AbstractArrow) ((AbstractArrow) entity).setPierceLevel(strength);\n-\t\t\t} else if (entity instanceof Arrow)\n-\t\t\t\t((Arrow) entity).setPierceLevel(strength);\n+\t\tint mod = 1;\n+\t\tswitch (mode) {\n+\t\t\tcase REMOVE:\n+\t\t\t\tmod = -1;\n+\t\t\tcase ADD:\n+\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n+\t\t\t\t\tif (entity instanceof Arrow) {\n+\t\t\t\t\t\tArrow arrow = (Arrow) entity;\n+\t\t\t\t\t\tint dmg = Math.round(arrow.getPierceLevel() + strength * mod);\n+\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n+\t\t\t\t\t\tarrow.setPierceLevel(dmg);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tbreak;\n+\t\t\tcase RESET:\n+\t\t\tcase SET:\n+\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n+\t\t\t\t\t((Arrow) entity).setPierceLevel(strength);\n+\t\t\t\t}\n+\t\t\t\tbreak;\n+\t\t\tdefault:\n+\t\t\t\tassert false;\n \t\t}\n \t}\n \t\n", "next_change": {"commit": "1abd53beec4167993dd4245050c137d9d678f6c5", "changed_code": [{"header": "diff --git a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\nindex 5574dc46..39480e88 100644\n--- a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n+++ b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n", "chunk": "@@ -99,8 +99,8 @@ public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, N\n \t}\n \t\n \t@Override\n-\tpublic Class<? extends Number> getReturnType() {\n-\t\treturn Number.class;\n+\tpublic Class<? extends Long> getReturnType() {\n+\t\treturn Long.class;\n \t}\n \t\n \t@Override\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "525371c84bd8c59408998924e5841b94fc1bbd07", "message": "Merge commit", "committedDate": null}, {"oid": "4d704c8fbe1e76c97e7b0398b26f21c5401ce300", "committedDate": "2020-10-22 16:21:37 -0700", "message": "Prepare for release of 2.5.1 (#3488)"}, {"oid": "1abd53beec4167993dd4245050c137d9d678f6c5", "committedDate": "2021-08-14 18:58:58 +0200", "message": "Fix number/integer stuff (#4095)"}, {"oid": "452bb05e905526388c0831911b877bd350210331", "committedDate": "2022-04-18 17:28:17 +0200", "message": "Fix some extra and missing [the]'s (#4604)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDMxOTE3Mg==", "url": "https://github.com/SkriptLang/Skript/pull/3206#discussion_r460319172", "body": "Use getArray", "bodyText": "Use getArray", "bodyHTML": "<p dir=\"auto\">Use getArray</p>", "author": "FranKusmiruk", "createdAt": "2020-07-24T22:47:08Z", "path": "src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/**\n+ * This file is part of Skript.\n+ *\n+ * Skript is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Skript is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Skript.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ *\n+ * Copyright 2011-2017 Peter G\u00fcttinger and contributors\n+ */\n+package ch.njol.skript.expressions;\n+\n+import org.bukkit.entity.AbstractArrow;\n+import org.bukkit.entity.Arrow;\n+import org.bukkit.entity.Projectile;\n+import org.bukkit.event.Event;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+import ch.njol.skript.Skript;\n+import ch.njol.skript.classes.Changer.ChangeMode;\n+import ch.njol.skript.doc.Description;\n+import ch.njol.skript.doc.Examples;\n+import ch.njol.skript.doc.Name;\n+import ch.njol.skript.doc.Since;\n+import ch.njol.skript.expressions.base.SimplePropertyExpression;\n+import ch.njol.util.coll.CollectionUtils;\n+\n+@Name(\"Arrow Pierce Level\")\n+@Description(\"An arrow's pierce level.\")\n+@Examples({\"on shoot:\",\n+\t\"\\tevent-projectile is an arrow\",\n+\t\"\\tset arrow pierce level of event-projectile to 5\"})\n+@Since(\"INSERT VERSION\")\n+public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, Number> {\n+\t\n+\tstatic {\n+\t\tif(Skript.classExists(\"org.bukkit.entity.AbstractArrow\") || Skript.methodExists(Arrow.class, \"getPierceLevel\")) register(ExprArrowPierceLevel.class, Number.class, \"[the] arrow pierce level\", \"projectiles\");\n+\t}\n+\t\n+\tboolean abstractArrowExists = Skript.classExists(\"org.bukkit.entity.AbstractArrow\");\n+\t\n+\t@Nullable\n+\t@Override\n+\tpublic Number convert(Projectile arrow) {\n+\t\tif (abstractArrowExists)\n+\t\t\treturn arrow instanceof AbstractArrow ? ((AbstractArrow) arrow).getPierceLevel() : null;\n+\t\treturn arrow instanceof Arrow ? ((Arrow) arrow).getPierceLevel() : null;\n+\t}\n+\t\n+\t@Nullable\n+\t@Override\n+\tpublic Class<?>[] acceptChange(ChangeMode mode) {\n+\t\treturn (mode == ChangeMode.SET || mode == ChangeMode.RESET) ? CollectionUtils.array(Number.class) : null;\n+\t}\n+\t\n+\t@Override\n+\tpublic void change(Event e, @Nullable Object[] delta, ChangeMode mode) {\n+\t\tint strength = delta != null ? Math.max(((Number) delta[0]).intValue(), 0) : 0;\n+\t\tfor (Projectile entity : getExpr().getAll(e)) {", "originalCommit": "71dcde3c018a6366ef1555bee7f1910d4364c593", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8ab7f944d8ef01077b8aafb1d5cb2f690d5c81dd", "changed_code": [{"header": "diff --git a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\nindex eed383fd..f9d9ab5f 100644\n--- a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n+++ b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n", "chunk": "@@ -59,18 +60,63 @@ public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, N\n \t@Nullable\n \t@Override\n \tpublic Class<?>[] acceptChange(ChangeMode mode) {\n-\t\treturn (mode == ChangeMode.SET || mode == ChangeMode.RESET) ? CollectionUtils.array(Number.class) : null;\n+\t\treturn (mode == ChangeMode.DELETE || mode == ChangeMode.REMOVE_ALL) ? null : CollectionUtils.array(Number.class);\n \t}\n \t\n \t@Override\n \tpublic void change(Event e, @Nullable Object[] delta, ChangeMode mode) {\n \t\tint strength = delta != null ? Math.max(((Number) delta[0]).intValue(), 0) : 0;\n-\t\tfor (Projectile entity : getExpr().getAll(e)) {\n-\t\t\tif (abstractArrowExists) {\n-\t\t\t\tSystem.out.println(entity.getType().name());\n-\t\t\t\tif (entity instanceof AbstractArrow) ((AbstractArrow) entity).setPierceLevel(strength);\n-\t\t\t} else if (entity instanceof Arrow)\n-\t\t\t\t((Arrow) entity).setPierceLevel(strength);\n+\t\tswitch (mode) {\n+\t\t\tcase REMOVE:\n+\t\t\t\tif (abstractArrowExists)\n+\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n+\t\t\t\t\t\tif (entity instanceof AbstractArrow) {\n+\t\t\t\t\t\t\tAbstractArrow abstractArrow = (AbstractArrow) entity;\n+\t\t\t\t\t\t\tint dmg = Math.round(abstractArrow.getPierceLevel() - strength);\n+\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n+\t\t\t\t\t\t\tabstractArrow.setPierceLevel(dmg);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\telse\n+\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n+\t\t\t\t\t\tif (entity instanceof Arrow) {\n+\t\t\t\t\t\t\tArrow arrow = (Arrow) entity;\n+\t\t\t\t\t\t\tint dmg = Math.round(arrow.getPierceLevel() - strength);\n+\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n+\t\t\t\t\t\t\tarrow.setPierceLevel(dmg);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\tbreak;\n+\t\t\tcase ADD:\n+\t\t\t\tif (abstractArrowExists)\n+\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n+\t\t\t\t\t\tif (entity instanceof AbstractArrow) {\n+\t\t\t\t\t\t\tAbstractArrow abstractArrow = (AbstractArrow) entity;\n+\t\t\t\t\t\t\tint dmg = Math.round(abstractArrow.getPierceLevel() + strength);\n+\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n+\t\t\t\t\t\t\tabstractArrow.setPierceLevel(dmg);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\telse\n+\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n+\t\t\t\t\t\tif (entity instanceof Arrow) {\n+\t\t\t\t\t\t\tArrow arrow = (Arrow) entity;\n+\t\t\t\t\t\t\tint dmg = Math.round(arrow.getPierceLevel() + strength);\n+\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n+\t\t\t\t\t\t\tarrow.setPierceLevel(dmg);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\tbreak;\n+\t\t\tcase RESET:\n+\t\t\tcase SET:\n+\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n+\t\t\t\t\tif (abstractArrowExists) {\n+\t\t\t\t\t\tif (entity instanceof AbstractArrow) ((AbstractArrow) entity).setPierceLevel(strength);\n+\t\t\t\t\t} else if (entity instanceof Arrow) {\n+\t\t\t\t\t\t((Arrow) entity).setPierceLevel(strength);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tbreak;\n \t\t}\n \t}\n \t\n", "next_change": {"commit": "72675726749f9cb5d103c040df33073b42e8b442", "changed_code": [{"header": "diff --git a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\nindex f9d9ab5f..43e83652 100644\n--- a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n+++ b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n", "chunk": "@@ -60,63 +60,58 @@ public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, N\n \t@Nullable\n \t@Override\n \tpublic Class<?>[] acceptChange(ChangeMode mode) {\n-\t\treturn (mode == ChangeMode.DELETE || mode == ChangeMode.REMOVE_ALL) ? null : CollectionUtils.array(Number.class);\n+\t\tswitch (mode) {\n+\t\t\tcase SET:\n+\t\t\tcase RESET:\n+\t\t\tcase REMOVE:\n+\t\t\tcase ADD:\n+\t\t\t\treturn CollectionUtils.array(Number.class);\n+\t\t\tdefault:\n+\t\t\t\treturn null;\n+\t\t}\n \t}\n \t\n \t@Override\n \tpublic void change(Event e, @Nullable Object[] delta, ChangeMode mode) {\n \t\tint strength = delta != null ? Math.max(((Number) delta[0]).intValue(), 0) : 0;\n+\t\tint mod = 1;\n \t\tswitch (mode) {\n \t\t\tcase REMOVE:\n-\t\t\t\tif (abstractArrowExists)\n-\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n-\t\t\t\t\t\tif (entity instanceof AbstractArrow) {\n-\t\t\t\t\t\t\tAbstractArrow abstractArrow = (AbstractArrow) entity;\n-\t\t\t\t\t\t\tint dmg = Math.round(abstractArrow.getPierceLevel() - strength);\n-\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n-\t\t\t\t\t\t\tabstractArrow.setPierceLevel(dmg);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\telse\n-\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n-\t\t\t\t\t\tif (entity instanceof Arrow) {\n-\t\t\t\t\t\t\tArrow arrow = (Arrow) entity;\n-\t\t\t\t\t\t\tint dmg = Math.round(arrow.getPierceLevel() - strength);\n-\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n-\t\t\t\t\t\t\tarrow.setPierceLevel(dmg);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\tbreak;\n+\t\t\t\tmod = -1;\n \t\t\tcase ADD:\n-\t\t\t\tif (abstractArrowExists)\n+\t\t\t\tif (abstractArrowExists) {\n \t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n \t\t\t\t\t\tif (entity instanceof AbstractArrow) {\n \t\t\t\t\t\t\tAbstractArrow abstractArrow = (AbstractArrow) entity;\n-\t\t\t\t\t\t\tint dmg = Math.round(abstractArrow.getPierceLevel() + strength);\n+\t\t\t\t\t\t\tint dmg = Math.round(abstractArrow.getPierceLevel() + strength * mod);\n \t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n \t\t\t\t\t\t\tabstractArrow.setPierceLevel(dmg);\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n-\t\t\t\telse\n+\t\t\t\t} else {\n \t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n \t\t\t\t\t\tif (entity instanceof Arrow) {\n \t\t\t\t\t\t\tArrow arrow = (Arrow) entity;\n-\t\t\t\t\t\t\tint dmg = Math.round(arrow.getPierceLevel() + strength);\n+\t\t\t\t\t\t\tint dmg = Math.round(arrow.getPierceLevel() + strength * mod);\n \t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n \t\t\t\t\t\t\tarrow.setPierceLevel(dmg);\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n+\t\t\t\t}\n \t\t\t\tbreak;\n \t\t\tcase RESET:\n \t\t\tcase SET:\n \t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n \t\t\t\t\tif (abstractArrowExists) {\n-\t\t\t\t\t\tif (entity instanceof AbstractArrow) ((AbstractArrow) entity).setPierceLevel(strength);\n+\t\t\t\t\t\tif (entity instanceof AbstractArrow)\n+\t\t\t\t\t\t\t((AbstractArrow) entity).setPierceLevel(strength);\n \t\t\t\t\t} else if (entity instanceof Arrow) {\n \t\t\t\t\t\t((Arrow) entity).setPierceLevel(strength);\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t\tbreak;\n+\t\t\tdefault:\n+\t\t\t\tassert false;\n \t\t}\n \t}\n \t\n", "next_change": {"commit": "aa17d7a45b30b92b759d72bacfd8899030117a9c", "changed_code": [{"header": "diff --git a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\nindex 43e83652..a47b9cb9 100644\n--- a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n+++ b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n", "chunk": "@@ -79,35 +78,19 @@ public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, N\n \t\t\tcase REMOVE:\n \t\t\t\tmod = -1;\n \t\t\tcase ADD:\n-\t\t\t\tif (abstractArrowExists) {\n-\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n-\t\t\t\t\t\tif (entity instanceof AbstractArrow) {\n-\t\t\t\t\t\t\tAbstractArrow abstractArrow = (AbstractArrow) entity;\n-\t\t\t\t\t\t\tint dmg = Math.round(abstractArrow.getPierceLevel() + strength * mod);\n-\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n-\t\t\t\t\t\t\tabstractArrow.setPierceLevel(dmg);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t} else {\n-\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n-\t\t\t\t\t\tif (entity instanceof Arrow) {\n-\t\t\t\t\t\t\tArrow arrow = (Arrow) entity;\n-\t\t\t\t\t\t\tint dmg = Math.round(arrow.getPierceLevel() + strength * mod);\n-\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n-\t\t\t\t\t\t\tarrow.setPierceLevel(dmg);\n-\t\t\t\t\t\t}\n+\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n+\t\t\t\t\tif (entity instanceof Arrow) {\n+\t\t\t\t\t\tArrow arrow = (Arrow) entity;\n+\t\t\t\t\t\tint dmg = Math.round(arrow.getPierceLevel() + strength * mod);\n+\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n+\t\t\t\t\t\tarrow.setPierceLevel(dmg);\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t\tbreak;\n \t\t\tcase RESET:\n \t\t\tcase SET:\n \t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n-\t\t\t\t\tif (abstractArrowExists) {\n-\t\t\t\t\t\tif (entity instanceof AbstractArrow)\n-\t\t\t\t\t\t\t((AbstractArrow) entity).setPierceLevel(strength);\n-\t\t\t\t\t} else if (entity instanceof Arrow) {\n-\t\t\t\t\t\t((Arrow) entity).setPierceLevel(strength);\n-\t\t\t\t\t}\n+\t\t\t\t\t((Arrow) entity).setPierceLevel(strength);\n \t\t\t\t}\n \t\t\t\tbreak;\n \t\t\tdefault:\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "525371c84bd8c59408998924e5841b94fc1bbd07", "changed_code": [{"header": "diff --git a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\nindex eed383fd..5574dc46 100644\n--- a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n+++ b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n", "chunk": "@@ -39,38 +39,62 @@ import ch.njol.util.coll.CollectionUtils;\n @Examples({\"on shoot:\",\n \t\"\\tevent-projectile is an arrow\",\n \t\"\\tset arrow pierce level of event-projectile to 5\"})\n+@RequiredPlugins(\"Minecraft 1.14+\")\n @Since(\"INSERT VERSION\")\n public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, Number> {\n \t\n+\tprivate final static boolean CAN_USE_PIERCE = Skript.methodExists(Arrow.class, \"getPierceLevel\");\n+\t\n \tstatic {\n-\t\tif(Skript.classExists(\"org.bukkit.entity.AbstractArrow\") || Skript.methodExists(Arrow.class, \"getPierceLevel\")) register(ExprArrowPierceLevel.class, Number.class, \"[the] arrow pierce level\", \"projectiles\");\n+\t\tif (CAN_USE_PIERCE)\n+\t\t\tregister(ExprArrowPierceLevel.class, Number.class, \"[the] arrow pierce level\", \"projectiles\");\n \t}\n \t\n-\tboolean abstractArrowExists = Skript.classExists(\"org.bukkit.entity.AbstractArrow\");\n-\t\n \t@Nullable\n \t@Override\n \tpublic Number convert(Projectile arrow) {\n-\t\tif (abstractArrowExists)\n-\t\t\treturn arrow instanceof AbstractArrow ? ((AbstractArrow) arrow).getPierceLevel() : null;\n-\t\treturn arrow instanceof Arrow ? ((Arrow) arrow).getPierceLevel() : null;\n+\t\treturn ((Arrow) arrow).getPierceLevel();\n \t}\n \t\n \t@Nullable\n \t@Override\n \tpublic Class<?>[] acceptChange(ChangeMode mode) {\n-\t\treturn (mode == ChangeMode.SET || mode == ChangeMode.RESET) ? CollectionUtils.array(Number.class) : null;\n+\t\tswitch (mode) {\n+\t\t\tcase SET:\n+\t\t\tcase RESET:\n+\t\t\tcase REMOVE:\n+\t\t\tcase ADD:\n+\t\t\t\treturn CollectionUtils.array(Number.class);\n+\t\t\tdefault:\n+\t\t\t\treturn null;\n+\t\t}\n \t}\n \t\n \t@Override\n \tpublic void change(Event e, @Nullable Object[] delta, ChangeMode mode) {\n \t\tint strength = delta != null ? Math.max(((Number) delta[0]).intValue(), 0) : 0;\n-\t\tfor (Projectile entity : getExpr().getAll(e)) {\n-\t\t\tif (abstractArrowExists) {\n-\t\t\t\tSystem.out.println(entity.getType().name());\n-\t\t\t\tif (entity instanceof AbstractArrow) ((AbstractArrow) entity).setPierceLevel(strength);\n-\t\t\t} else if (entity instanceof Arrow)\n-\t\t\t\t((Arrow) entity).setPierceLevel(strength);\n+\t\tint mod = 1;\n+\t\tswitch (mode) {\n+\t\t\tcase REMOVE:\n+\t\t\t\tmod = -1;\n+\t\t\tcase ADD:\n+\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n+\t\t\t\t\tif (entity instanceof Arrow) {\n+\t\t\t\t\t\tArrow arrow = (Arrow) entity;\n+\t\t\t\t\t\tint dmg = Math.round(arrow.getPierceLevel() + strength * mod);\n+\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n+\t\t\t\t\t\tarrow.setPierceLevel(dmg);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tbreak;\n+\t\t\tcase RESET:\n+\t\t\tcase SET:\n+\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n+\t\t\t\t\t((Arrow) entity).setPierceLevel(strength);\n+\t\t\t\t}\n+\t\t\t\tbreak;\n+\t\t\tdefault:\n+\t\t\t\tassert false;\n \t\t}\n \t}\n \t\n", "next_change": {"commit": "1abd53beec4167993dd4245050c137d9d678f6c5", "changed_code": [{"header": "diff --git a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\nindex 5574dc46..39480e88 100644\n--- a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n+++ b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n", "chunk": "@@ -99,8 +99,8 @@ public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, N\n \t}\n \t\n \t@Override\n-\tpublic Class<? extends Number> getReturnType() {\n-\t\treturn Number.class;\n+\tpublic Class<? extends Long> getReturnType() {\n+\t\treturn Long.class;\n \t}\n \t\n \t@Override\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "525371c84bd8c59408998924e5841b94fc1bbd07", "message": "Merge commit", "committedDate": null}, {"oid": "4d704c8fbe1e76c97e7b0398b26f21c5401ce300", "committedDate": "2020-10-22 16:21:37 -0700", "message": "Prepare for release of 2.5.1 (#3488)"}, {"oid": "1abd53beec4167993dd4245050c137d9d678f6c5", "committedDate": "2021-08-14 18:58:58 +0200", "message": "Fix number/integer stuff (#4095)"}, {"oid": "452bb05e905526388c0831911b877bd350210331", "committedDate": "2022-04-18 17:28:17 +0200", "message": "Fix some extra and missing [the]'s (#4604)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDMxOTI4MQ==", "url": "https://github.com/SkriptLang/Skript/pull/3206#discussion_r460319281", "body": "The statement after the if should be on its own line", "bodyText": "The statement after the if should be on its own line", "bodyHTML": "<p dir=\"auto\">The statement after the if should be on its own line</p>", "author": "FranKusmiruk", "createdAt": "2020-07-24T22:47:33Z", "path": "src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/**\n+ * This file is part of Skript.\n+ *\n+ * Skript is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Skript is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Skript.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ *\n+ * Copyright 2011-2017 Peter G\u00fcttinger and contributors\n+ */\n+package ch.njol.skript.expressions;\n+\n+import org.bukkit.entity.AbstractArrow;\n+import org.bukkit.entity.Arrow;\n+import org.bukkit.entity.Projectile;\n+import org.bukkit.event.Event;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+import ch.njol.skript.Skript;\n+import ch.njol.skript.classes.Changer.ChangeMode;\n+import ch.njol.skript.doc.Description;\n+import ch.njol.skript.doc.Examples;\n+import ch.njol.skript.doc.Name;\n+import ch.njol.skript.doc.Since;\n+import ch.njol.skript.expressions.base.SimplePropertyExpression;\n+import ch.njol.util.coll.CollectionUtils;\n+\n+@Name(\"Arrow Pierce Level\")\n+@Description(\"An arrow's pierce level.\")\n+@Examples({\"on shoot:\",\n+\t\"\\tevent-projectile is an arrow\",\n+\t\"\\tset arrow pierce level of event-projectile to 5\"})\n+@Since(\"INSERT VERSION\")\n+public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, Number> {\n+\t\n+\tstatic {\n+\t\tif(Skript.classExists(\"org.bukkit.entity.AbstractArrow\") || Skript.methodExists(Arrow.class, \"getPierceLevel\")) register(ExprArrowPierceLevel.class, Number.class, \"[the] arrow pierce level\", \"projectiles\");\n+\t}\n+\t\n+\tboolean abstractArrowExists = Skript.classExists(\"org.bukkit.entity.AbstractArrow\");\n+\t\n+\t@Nullable\n+\t@Override\n+\tpublic Number convert(Projectile arrow) {\n+\t\tif (abstractArrowExists)\n+\t\t\treturn arrow instanceof AbstractArrow ? ((AbstractArrow) arrow).getPierceLevel() : null;\n+\t\treturn arrow instanceof Arrow ? ((Arrow) arrow).getPierceLevel() : null;\n+\t}\n+\t\n+\t@Nullable\n+\t@Override\n+\tpublic Class<?>[] acceptChange(ChangeMode mode) {\n+\t\treturn (mode == ChangeMode.SET || mode == ChangeMode.RESET) ? CollectionUtils.array(Number.class) : null;\n+\t}\n+\t\n+\t@Override\n+\tpublic void change(Event e, @Nullable Object[] delta, ChangeMode mode) {\n+\t\tint strength = delta != null ? Math.max(((Number) delta[0]).intValue(), 0) : 0;\n+\t\tfor (Projectile entity : getExpr().getAll(e)) {\n+\t\t\tif (abstractArrowExists) {\n+\t\t\t\tSystem.out.println(entity.getType().name());\n+\t\t\t\tif (entity instanceof AbstractArrow) ((AbstractArrow) entity).setPierceLevel(strength);", "originalCommit": "71dcde3c018a6366ef1555bee7f1910d4364c593", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8ab7f944d8ef01077b8aafb1d5cb2f690d5c81dd", "changed_code": [{"header": "diff --git a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\nindex eed383fd..f9d9ab5f 100644\n--- a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n+++ b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n", "chunk": "@@ -59,18 +60,63 @@ public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, N\n \t@Nullable\n \t@Override\n \tpublic Class<?>[] acceptChange(ChangeMode mode) {\n-\t\treturn (mode == ChangeMode.SET || mode == ChangeMode.RESET) ? CollectionUtils.array(Number.class) : null;\n+\t\treturn (mode == ChangeMode.DELETE || mode == ChangeMode.REMOVE_ALL) ? null : CollectionUtils.array(Number.class);\n \t}\n \t\n \t@Override\n \tpublic void change(Event e, @Nullable Object[] delta, ChangeMode mode) {\n \t\tint strength = delta != null ? Math.max(((Number) delta[0]).intValue(), 0) : 0;\n-\t\tfor (Projectile entity : getExpr().getAll(e)) {\n-\t\t\tif (abstractArrowExists) {\n-\t\t\t\tSystem.out.println(entity.getType().name());\n-\t\t\t\tif (entity instanceof AbstractArrow) ((AbstractArrow) entity).setPierceLevel(strength);\n-\t\t\t} else if (entity instanceof Arrow)\n-\t\t\t\t((Arrow) entity).setPierceLevel(strength);\n+\t\tswitch (mode) {\n+\t\t\tcase REMOVE:\n+\t\t\t\tif (abstractArrowExists)\n+\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n+\t\t\t\t\t\tif (entity instanceof AbstractArrow) {\n+\t\t\t\t\t\t\tAbstractArrow abstractArrow = (AbstractArrow) entity;\n+\t\t\t\t\t\t\tint dmg = Math.round(abstractArrow.getPierceLevel() - strength);\n+\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n+\t\t\t\t\t\t\tabstractArrow.setPierceLevel(dmg);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\telse\n+\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n+\t\t\t\t\t\tif (entity instanceof Arrow) {\n+\t\t\t\t\t\t\tArrow arrow = (Arrow) entity;\n+\t\t\t\t\t\t\tint dmg = Math.round(arrow.getPierceLevel() - strength);\n+\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n+\t\t\t\t\t\t\tarrow.setPierceLevel(dmg);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\tbreak;\n+\t\t\tcase ADD:\n+\t\t\t\tif (abstractArrowExists)\n+\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n+\t\t\t\t\t\tif (entity instanceof AbstractArrow) {\n+\t\t\t\t\t\t\tAbstractArrow abstractArrow = (AbstractArrow) entity;\n+\t\t\t\t\t\t\tint dmg = Math.round(abstractArrow.getPierceLevel() + strength);\n+\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n+\t\t\t\t\t\t\tabstractArrow.setPierceLevel(dmg);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\telse\n+\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n+\t\t\t\t\t\tif (entity instanceof Arrow) {\n+\t\t\t\t\t\t\tArrow arrow = (Arrow) entity;\n+\t\t\t\t\t\t\tint dmg = Math.round(arrow.getPierceLevel() + strength);\n+\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n+\t\t\t\t\t\t\tarrow.setPierceLevel(dmg);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\tbreak;\n+\t\t\tcase RESET:\n+\t\t\tcase SET:\n+\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n+\t\t\t\t\tif (abstractArrowExists) {\n+\t\t\t\t\t\tif (entity instanceof AbstractArrow) ((AbstractArrow) entity).setPierceLevel(strength);\n+\t\t\t\t\t} else if (entity instanceof Arrow) {\n+\t\t\t\t\t\t((Arrow) entity).setPierceLevel(strength);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tbreak;\n \t\t}\n \t}\n \t\n", "next_change": {"commit": "72675726749f9cb5d103c040df33073b42e8b442", "changed_code": [{"header": "diff --git a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\nindex f9d9ab5f..43e83652 100644\n--- a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n+++ b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n", "chunk": "@@ -60,63 +60,58 @@ public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, N\n \t@Nullable\n \t@Override\n \tpublic Class<?>[] acceptChange(ChangeMode mode) {\n-\t\treturn (mode == ChangeMode.DELETE || mode == ChangeMode.REMOVE_ALL) ? null : CollectionUtils.array(Number.class);\n+\t\tswitch (mode) {\n+\t\t\tcase SET:\n+\t\t\tcase RESET:\n+\t\t\tcase REMOVE:\n+\t\t\tcase ADD:\n+\t\t\t\treturn CollectionUtils.array(Number.class);\n+\t\t\tdefault:\n+\t\t\t\treturn null;\n+\t\t}\n \t}\n \t\n \t@Override\n \tpublic void change(Event e, @Nullable Object[] delta, ChangeMode mode) {\n \t\tint strength = delta != null ? Math.max(((Number) delta[0]).intValue(), 0) : 0;\n+\t\tint mod = 1;\n \t\tswitch (mode) {\n \t\t\tcase REMOVE:\n-\t\t\t\tif (abstractArrowExists)\n-\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n-\t\t\t\t\t\tif (entity instanceof AbstractArrow) {\n-\t\t\t\t\t\t\tAbstractArrow abstractArrow = (AbstractArrow) entity;\n-\t\t\t\t\t\t\tint dmg = Math.round(abstractArrow.getPierceLevel() - strength);\n-\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n-\t\t\t\t\t\t\tabstractArrow.setPierceLevel(dmg);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\telse\n-\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n-\t\t\t\t\t\tif (entity instanceof Arrow) {\n-\t\t\t\t\t\t\tArrow arrow = (Arrow) entity;\n-\t\t\t\t\t\t\tint dmg = Math.round(arrow.getPierceLevel() - strength);\n-\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n-\t\t\t\t\t\t\tarrow.setPierceLevel(dmg);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\tbreak;\n+\t\t\t\tmod = -1;\n \t\t\tcase ADD:\n-\t\t\t\tif (abstractArrowExists)\n+\t\t\t\tif (abstractArrowExists) {\n \t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n \t\t\t\t\t\tif (entity instanceof AbstractArrow) {\n \t\t\t\t\t\t\tAbstractArrow abstractArrow = (AbstractArrow) entity;\n-\t\t\t\t\t\t\tint dmg = Math.round(abstractArrow.getPierceLevel() + strength);\n+\t\t\t\t\t\t\tint dmg = Math.round(abstractArrow.getPierceLevel() + strength * mod);\n \t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n \t\t\t\t\t\t\tabstractArrow.setPierceLevel(dmg);\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n-\t\t\t\telse\n+\t\t\t\t} else {\n \t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n \t\t\t\t\t\tif (entity instanceof Arrow) {\n \t\t\t\t\t\t\tArrow arrow = (Arrow) entity;\n-\t\t\t\t\t\t\tint dmg = Math.round(arrow.getPierceLevel() + strength);\n+\t\t\t\t\t\t\tint dmg = Math.round(arrow.getPierceLevel() + strength * mod);\n \t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n \t\t\t\t\t\t\tarrow.setPierceLevel(dmg);\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n+\t\t\t\t}\n \t\t\t\tbreak;\n \t\t\tcase RESET:\n \t\t\tcase SET:\n \t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n \t\t\t\t\tif (abstractArrowExists) {\n-\t\t\t\t\t\tif (entity instanceof AbstractArrow) ((AbstractArrow) entity).setPierceLevel(strength);\n+\t\t\t\t\t\tif (entity instanceof AbstractArrow)\n+\t\t\t\t\t\t\t((AbstractArrow) entity).setPierceLevel(strength);\n \t\t\t\t\t} else if (entity instanceof Arrow) {\n \t\t\t\t\t\t((Arrow) entity).setPierceLevel(strength);\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t\tbreak;\n+\t\t\tdefault:\n+\t\t\t\tassert false;\n \t\t}\n \t}\n \t\n", "next_change": {"commit": "aa17d7a45b30b92b759d72bacfd8899030117a9c", "changed_code": [{"header": "diff --git a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\nindex 43e83652..a47b9cb9 100644\n--- a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n+++ b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n", "chunk": "@@ -79,35 +78,19 @@ public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, N\n \t\t\tcase REMOVE:\n \t\t\t\tmod = -1;\n \t\t\tcase ADD:\n-\t\t\t\tif (abstractArrowExists) {\n-\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n-\t\t\t\t\t\tif (entity instanceof AbstractArrow) {\n-\t\t\t\t\t\t\tAbstractArrow abstractArrow = (AbstractArrow) entity;\n-\t\t\t\t\t\t\tint dmg = Math.round(abstractArrow.getPierceLevel() + strength * mod);\n-\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n-\t\t\t\t\t\t\tabstractArrow.setPierceLevel(dmg);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t} else {\n-\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n-\t\t\t\t\t\tif (entity instanceof Arrow) {\n-\t\t\t\t\t\t\tArrow arrow = (Arrow) entity;\n-\t\t\t\t\t\t\tint dmg = Math.round(arrow.getPierceLevel() + strength * mod);\n-\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n-\t\t\t\t\t\t\tarrow.setPierceLevel(dmg);\n-\t\t\t\t\t\t}\n+\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n+\t\t\t\t\tif (entity instanceof Arrow) {\n+\t\t\t\t\t\tArrow arrow = (Arrow) entity;\n+\t\t\t\t\t\tint dmg = Math.round(arrow.getPierceLevel() + strength * mod);\n+\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n+\t\t\t\t\t\tarrow.setPierceLevel(dmg);\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t\tbreak;\n \t\t\tcase RESET:\n \t\t\tcase SET:\n \t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n-\t\t\t\t\tif (abstractArrowExists) {\n-\t\t\t\t\t\tif (entity instanceof AbstractArrow)\n-\t\t\t\t\t\t\t((AbstractArrow) entity).setPierceLevel(strength);\n-\t\t\t\t\t} else if (entity instanceof Arrow) {\n-\t\t\t\t\t\t((Arrow) entity).setPierceLevel(strength);\n-\t\t\t\t\t}\n+\t\t\t\t\t((Arrow) entity).setPierceLevel(strength);\n \t\t\t\t}\n \t\t\t\tbreak;\n \t\t\tdefault:\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "525371c84bd8c59408998924e5841b94fc1bbd07", "changed_code": [{"header": "diff --git a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\nindex eed383fd..5574dc46 100644\n--- a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n+++ b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n", "chunk": "@@ -39,38 +39,62 @@ import ch.njol.util.coll.CollectionUtils;\n @Examples({\"on shoot:\",\n \t\"\\tevent-projectile is an arrow\",\n \t\"\\tset arrow pierce level of event-projectile to 5\"})\n+@RequiredPlugins(\"Minecraft 1.14+\")\n @Since(\"INSERT VERSION\")\n public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, Number> {\n \t\n+\tprivate final static boolean CAN_USE_PIERCE = Skript.methodExists(Arrow.class, \"getPierceLevel\");\n+\t\n \tstatic {\n-\t\tif(Skript.classExists(\"org.bukkit.entity.AbstractArrow\") || Skript.methodExists(Arrow.class, \"getPierceLevel\")) register(ExprArrowPierceLevel.class, Number.class, \"[the] arrow pierce level\", \"projectiles\");\n+\t\tif (CAN_USE_PIERCE)\n+\t\t\tregister(ExprArrowPierceLevel.class, Number.class, \"[the] arrow pierce level\", \"projectiles\");\n \t}\n \t\n-\tboolean abstractArrowExists = Skript.classExists(\"org.bukkit.entity.AbstractArrow\");\n-\t\n \t@Nullable\n \t@Override\n \tpublic Number convert(Projectile arrow) {\n-\t\tif (abstractArrowExists)\n-\t\t\treturn arrow instanceof AbstractArrow ? ((AbstractArrow) arrow).getPierceLevel() : null;\n-\t\treturn arrow instanceof Arrow ? ((Arrow) arrow).getPierceLevel() : null;\n+\t\treturn ((Arrow) arrow).getPierceLevel();\n \t}\n \t\n \t@Nullable\n \t@Override\n \tpublic Class<?>[] acceptChange(ChangeMode mode) {\n-\t\treturn (mode == ChangeMode.SET || mode == ChangeMode.RESET) ? CollectionUtils.array(Number.class) : null;\n+\t\tswitch (mode) {\n+\t\t\tcase SET:\n+\t\t\tcase RESET:\n+\t\t\tcase REMOVE:\n+\t\t\tcase ADD:\n+\t\t\t\treturn CollectionUtils.array(Number.class);\n+\t\t\tdefault:\n+\t\t\t\treturn null;\n+\t\t}\n \t}\n \t\n \t@Override\n \tpublic void change(Event e, @Nullable Object[] delta, ChangeMode mode) {\n \t\tint strength = delta != null ? Math.max(((Number) delta[0]).intValue(), 0) : 0;\n-\t\tfor (Projectile entity : getExpr().getAll(e)) {\n-\t\t\tif (abstractArrowExists) {\n-\t\t\t\tSystem.out.println(entity.getType().name());\n-\t\t\t\tif (entity instanceof AbstractArrow) ((AbstractArrow) entity).setPierceLevel(strength);\n-\t\t\t} else if (entity instanceof Arrow)\n-\t\t\t\t((Arrow) entity).setPierceLevel(strength);\n+\t\tint mod = 1;\n+\t\tswitch (mode) {\n+\t\t\tcase REMOVE:\n+\t\t\t\tmod = -1;\n+\t\t\tcase ADD:\n+\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n+\t\t\t\t\tif (entity instanceof Arrow) {\n+\t\t\t\t\t\tArrow arrow = (Arrow) entity;\n+\t\t\t\t\t\tint dmg = Math.round(arrow.getPierceLevel() + strength * mod);\n+\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n+\t\t\t\t\t\tarrow.setPierceLevel(dmg);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tbreak;\n+\t\t\tcase RESET:\n+\t\t\tcase SET:\n+\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n+\t\t\t\t\t((Arrow) entity).setPierceLevel(strength);\n+\t\t\t\t}\n+\t\t\t\tbreak;\n+\t\t\tdefault:\n+\t\t\t\tassert false;\n \t\t}\n \t}\n \t\n", "next_change": {"commit": "1abd53beec4167993dd4245050c137d9d678f6c5", "changed_code": [{"header": "diff --git a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\nindex 5574dc46..39480e88 100644\n--- a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n+++ b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n", "chunk": "@@ -99,8 +99,8 @@ public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, N\n \t}\n \t\n \t@Override\n-\tpublic Class<? extends Number> getReturnType() {\n-\t\treturn Number.class;\n+\tpublic Class<? extends Long> getReturnType() {\n+\t\treturn Long.class;\n \t}\n \t\n \t@Override\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "525371c84bd8c59408998924e5841b94fc1bbd07", "message": "Merge commit", "committedDate": null}, {"oid": "4d704c8fbe1e76c97e7b0398b26f21c5401ce300", "committedDate": "2020-10-22 16:21:37 -0700", "message": "Prepare for release of 2.5.1 (#3488)"}, {"oid": "1abd53beec4167993dd4245050c137d9d678f6c5", "committedDate": "2021-08-14 18:58:58 +0200", "message": "Fix number/integer stuff (#4095)"}, {"oid": "452bb05e905526388c0831911b877bd350210331", "committedDate": "2022-04-18 17:28:17 +0200", "message": "Fix some extra and missing [the]'s (#4604)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDMxOTYzMA==", "url": "https://github.com/SkriptLang/Skript/pull/3206#discussion_r460319630", "body": "If the previous if statement has braces, this one should as well", "bodyText": "If the previous if statement has braces, this one should as well", "bodyHTML": "<p dir=\"auto\">If the previous if statement has braces, this one should as well</p>", "author": "FranKusmiruk", "createdAt": "2020-07-24T22:49:02Z", "path": "src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/**\n+ * This file is part of Skript.\n+ *\n+ * Skript is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Skript is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Skript.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ *\n+ * Copyright 2011-2017 Peter G\u00fcttinger and contributors\n+ */\n+package ch.njol.skript.expressions;\n+\n+import org.bukkit.entity.AbstractArrow;\n+import org.bukkit.entity.Arrow;\n+import org.bukkit.entity.Projectile;\n+import org.bukkit.event.Event;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+import ch.njol.skript.Skript;\n+import ch.njol.skript.classes.Changer.ChangeMode;\n+import ch.njol.skript.doc.Description;\n+import ch.njol.skript.doc.Examples;\n+import ch.njol.skript.doc.Name;\n+import ch.njol.skript.doc.Since;\n+import ch.njol.skript.expressions.base.SimplePropertyExpression;\n+import ch.njol.util.coll.CollectionUtils;\n+\n+@Name(\"Arrow Pierce Level\")\n+@Description(\"An arrow's pierce level.\")\n+@Examples({\"on shoot:\",\n+\t\"\\tevent-projectile is an arrow\",\n+\t\"\\tset arrow pierce level of event-projectile to 5\"})\n+@Since(\"INSERT VERSION\")\n+public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, Number> {\n+\t\n+\tstatic {\n+\t\tif(Skript.classExists(\"org.bukkit.entity.AbstractArrow\") || Skript.methodExists(Arrow.class, \"getPierceLevel\")) register(ExprArrowPierceLevel.class, Number.class, \"[the] arrow pierce level\", \"projectiles\");\n+\t}\n+\t\n+\tboolean abstractArrowExists = Skript.classExists(\"org.bukkit.entity.AbstractArrow\");\n+\t\n+\t@Nullable\n+\t@Override\n+\tpublic Number convert(Projectile arrow) {\n+\t\tif (abstractArrowExists)\n+\t\t\treturn arrow instanceof AbstractArrow ? ((AbstractArrow) arrow).getPierceLevel() : null;\n+\t\treturn arrow instanceof Arrow ? ((Arrow) arrow).getPierceLevel() : null;\n+\t}\n+\t\n+\t@Nullable\n+\t@Override\n+\tpublic Class<?>[] acceptChange(ChangeMode mode) {\n+\t\treturn (mode == ChangeMode.SET || mode == ChangeMode.RESET) ? CollectionUtils.array(Number.class) : null;\n+\t}\n+\t\n+\t@Override\n+\tpublic void change(Event e, @Nullable Object[] delta, ChangeMode mode) {\n+\t\tint strength = delta != null ? Math.max(((Number) delta[0]).intValue(), 0) : 0;\n+\t\tfor (Projectile entity : getExpr().getAll(e)) {\n+\t\t\tif (abstractArrowExists) {\n+\t\t\t\tSystem.out.println(entity.getType().name());\n+\t\t\t\tif (entity instanceof AbstractArrow) ((AbstractArrow) entity).setPierceLevel(strength);\n+\t\t\t} else if (entity instanceof Arrow)", "originalCommit": "71dcde3c018a6366ef1555bee7f1910d4364c593", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8ab7f944d8ef01077b8aafb1d5cb2f690d5c81dd", "changed_code": [{"header": "diff --git a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\nindex eed383fd..f9d9ab5f 100644\n--- a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n+++ b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n", "chunk": "@@ -59,18 +60,63 @@ public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, N\n \t@Nullable\n \t@Override\n \tpublic Class<?>[] acceptChange(ChangeMode mode) {\n-\t\treturn (mode == ChangeMode.SET || mode == ChangeMode.RESET) ? CollectionUtils.array(Number.class) : null;\n+\t\treturn (mode == ChangeMode.DELETE || mode == ChangeMode.REMOVE_ALL) ? null : CollectionUtils.array(Number.class);\n \t}\n \t\n \t@Override\n \tpublic void change(Event e, @Nullable Object[] delta, ChangeMode mode) {\n \t\tint strength = delta != null ? Math.max(((Number) delta[0]).intValue(), 0) : 0;\n-\t\tfor (Projectile entity : getExpr().getAll(e)) {\n-\t\t\tif (abstractArrowExists) {\n-\t\t\t\tSystem.out.println(entity.getType().name());\n-\t\t\t\tif (entity instanceof AbstractArrow) ((AbstractArrow) entity).setPierceLevel(strength);\n-\t\t\t} else if (entity instanceof Arrow)\n-\t\t\t\t((Arrow) entity).setPierceLevel(strength);\n+\t\tswitch (mode) {\n+\t\t\tcase REMOVE:\n+\t\t\t\tif (abstractArrowExists)\n+\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n+\t\t\t\t\t\tif (entity instanceof AbstractArrow) {\n+\t\t\t\t\t\t\tAbstractArrow abstractArrow = (AbstractArrow) entity;\n+\t\t\t\t\t\t\tint dmg = Math.round(abstractArrow.getPierceLevel() - strength);\n+\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n+\t\t\t\t\t\t\tabstractArrow.setPierceLevel(dmg);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\telse\n+\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n+\t\t\t\t\t\tif (entity instanceof Arrow) {\n+\t\t\t\t\t\t\tArrow arrow = (Arrow) entity;\n+\t\t\t\t\t\t\tint dmg = Math.round(arrow.getPierceLevel() - strength);\n+\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n+\t\t\t\t\t\t\tarrow.setPierceLevel(dmg);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\tbreak;\n+\t\t\tcase ADD:\n+\t\t\t\tif (abstractArrowExists)\n+\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n+\t\t\t\t\t\tif (entity instanceof AbstractArrow) {\n+\t\t\t\t\t\t\tAbstractArrow abstractArrow = (AbstractArrow) entity;\n+\t\t\t\t\t\t\tint dmg = Math.round(abstractArrow.getPierceLevel() + strength);\n+\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n+\t\t\t\t\t\t\tabstractArrow.setPierceLevel(dmg);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\telse\n+\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n+\t\t\t\t\t\tif (entity instanceof Arrow) {\n+\t\t\t\t\t\t\tArrow arrow = (Arrow) entity;\n+\t\t\t\t\t\t\tint dmg = Math.round(arrow.getPierceLevel() + strength);\n+\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n+\t\t\t\t\t\t\tarrow.setPierceLevel(dmg);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\tbreak;\n+\t\t\tcase RESET:\n+\t\t\tcase SET:\n+\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n+\t\t\t\t\tif (abstractArrowExists) {\n+\t\t\t\t\t\tif (entity instanceof AbstractArrow) ((AbstractArrow) entity).setPierceLevel(strength);\n+\t\t\t\t\t} else if (entity instanceof Arrow) {\n+\t\t\t\t\t\t((Arrow) entity).setPierceLevel(strength);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tbreak;\n \t\t}\n \t}\n \t\n", "next_change": {"commit": "72675726749f9cb5d103c040df33073b42e8b442", "changed_code": [{"header": "diff --git a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\nindex f9d9ab5f..43e83652 100644\n--- a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n+++ b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n", "chunk": "@@ -60,63 +60,58 @@ public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, N\n \t@Nullable\n \t@Override\n \tpublic Class<?>[] acceptChange(ChangeMode mode) {\n-\t\treturn (mode == ChangeMode.DELETE || mode == ChangeMode.REMOVE_ALL) ? null : CollectionUtils.array(Number.class);\n+\t\tswitch (mode) {\n+\t\t\tcase SET:\n+\t\t\tcase RESET:\n+\t\t\tcase REMOVE:\n+\t\t\tcase ADD:\n+\t\t\t\treturn CollectionUtils.array(Number.class);\n+\t\t\tdefault:\n+\t\t\t\treturn null;\n+\t\t}\n \t}\n \t\n \t@Override\n \tpublic void change(Event e, @Nullable Object[] delta, ChangeMode mode) {\n \t\tint strength = delta != null ? Math.max(((Number) delta[0]).intValue(), 0) : 0;\n+\t\tint mod = 1;\n \t\tswitch (mode) {\n \t\t\tcase REMOVE:\n-\t\t\t\tif (abstractArrowExists)\n-\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n-\t\t\t\t\t\tif (entity instanceof AbstractArrow) {\n-\t\t\t\t\t\t\tAbstractArrow abstractArrow = (AbstractArrow) entity;\n-\t\t\t\t\t\t\tint dmg = Math.round(abstractArrow.getPierceLevel() - strength);\n-\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n-\t\t\t\t\t\t\tabstractArrow.setPierceLevel(dmg);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\telse\n-\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n-\t\t\t\t\t\tif (entity instanceof Arrow) {\n-\t\t\t\t\t\t\tArrow arrow = (Arrow) entity;\n-\t\t\t\t\t\t\tint dmg = Math.round(arrow.getPierceLevel() - strength);\n-\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n-\t\t\t\t\t\t\tarrow.setPierceLevel(dmg);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\tbreak;\n+\t\t\t\tmod = -1;\n \t\t\tcase ADD:\n-\t\t\t\tif (abstractArrowExists)\n+\t\t\t\tif (abstractArrowExists) {\n \t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n \t\t\t\t\t\tif (entity instanceof AbstractArrow) {\n \t\t\t\t\t\t\tAbstractArrow abstractArrow = (AbstractArrow) entity;\n-\t\t\t\t\t\t\tint dmg = Math.round(abstractArrow.getPierceLevel() + strength);\n+\t\t\t\t\t\t\tint dmg = Math.round(abstractArrow.getPierceLevel() + strength * mod);\n \t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n \t\t\t\t\t\t\tabstractArrow.setPierceLevel(dmg);\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n-\t\t\t\telse\n+\t\t\t\t} else {\n \t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n \t\t\t\t\t\tif (entity instanceof Arrow) {\n \t\t\t\t\t\t\tArrow arrow = (Arrow) entity;\n-\t\t\t\t\t\t\tint dmg = Math.round(arrow.getPierceLevel() + strength);\n+\t\t\t\t\t\t\tint dmg = Math.round(arrow.getPierceLevel() + strength * mod);\n \t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n \t\t\t\t\t\t\tarrow.setPierceLevel(dmg);\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n+\t\t\t\t}\n \t\t\t\tbreak;\n \t\t\tcase RESET:\n \t\t\tcase SET:\n \t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n \t\t\t\t\tif (abstractArrowExists) {\n-\t\t\t\t\t\tif (entity instanceof AbstractArrow) ((AbstractArrow) entity).setPierceLevel(strength);\n+\t\t\t\t\t\tif (entity instanceof AbstractArrow)\n+\t\t\t\t\t\t\t((AbstractArrow) entity).setPierceLevel(strength);\n \t\t\t\t\t} else if (entity instanceof Arrow) {\n \t\t\t\t\t\t((Arrow) entity).setPierceLevel(strength);\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t\tbreak;\n+\t\t\tdefault:\n+\t\t\t\tassert false;\n \t\t}\n \t}\n \t\n", "next_change": {"commit": "aa17d7a45b30b92b759d72bacfd8899030117a9c", "changed_code": [{"header": "diff --git a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\nindex 43e83652..a47b9cb9 100644\n--- a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n+++ b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n", "chunk": "@@ -79,35 +78,19 @@ public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, N\n \t\t\tcase REMOVE:\n \t\t\t\tmod = -1;\n \t\t\tcase ADD:\n-\t\t\t\tif (abstractArrowExists) {\n-\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n-\t\t\t\t\t\tif (entity instanceof AbstractArrow) {\n-\t\t\t\t\t\t\tAbstractArrow abstractArrow = (AbstractArrow) entity;\n-\t\t\t\t\t\t\tint dmg = Math.round(abstractArrow.getPierceLevel() + strength * mod);\n-\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n-\t\t\t\t\t\t\tabstractArrow.setPierceLevel(dmg);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t} else {\n-\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n-\t\t\t\t\t\tif (entity instanceof Arrow) {\n-\t\t\t\t\t\t\tArrow arrow = (Arrow) entity;\n-\t\t\t\t\t\t\tint dmg = Math.round(arrow.getPierceLevel() + strength * mod);\n-\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n-\t\t\t\t\t\t\tarrow.setPierceLevel(dmg);\n-\t\t\t\t\t\t}\n+\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n+\t\t\t\t\tif (entity instanceof Arrow) {\n+\t\t\t\t\t\tArrow arrow = (Arrow) entity;\n+\t\t\t\t\t\tint dmg = Math.round(arrow.getPierceLevel() + strength * mod);\n+\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n+\t\t\t\t\t\tarrow.setPierceLevel(dmg);\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t\tbreak;\n \t\t\tcase RESET:\n \t\t\tcase SET:\n \t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n-\t\t\t\t\tif (abstractArrowExists) {\n-\t\t\t\t\t\tif (entity instanceof AbstractArrow)\n-\t\t\t\t\t\t\t((AbstractArrow) entity).setPierceLevel(strength);\n-\t\t\t\t\t} else if (entity instanceof Arrow) {\n-\t\t\t\t\t\t((Arrow) entity).setPierceLevel(strength);\n-\t\t\t\t\t}\n+\t\t\t\t\t((Arrow) entity).setPierceLevel(strength);\n \t\t\t\t}\n \t\t\t\tbreak;\n \t\t\tdefault:\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "525371c84bd8c59408998924e5841b94fc1bbd07", "changed_code": [{"header": "diff --git a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\nindex eed383fd..5574dc46 100644\n--- a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n+++ b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n", "chunk": "@@ -39,38 +39,62 @@ import ch.njol.util.coll.CollectionUtils;\n @Examples({\"on shoot:\",\n \t\"\\tevent-projectile is an arrow\",\n \t\"\\tset arrow pierce level of event-projectile to 5\"})\n+@RequiredPlugins(\"Minecraft 1.14+\")\n @Since(\"INSERT VERSION\")\n public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, Number> {\n \t\n+\tprivate final static boolean CAN_USE_PIERCE = Skript.methodExists(Arrow.class, \"getPierceLevel\");\n+\t\n \tstatic {\n-\t\tif(Skript.classExists(\"org.bukkit.entity.AbstractArrow\") || Skript.methodExists(Arrow.class, \"getPierceLevel\")) register(ExprArrowPierceLevel.class, Number.class, \"[the] arrow pierce level\", \"projectiles\");\n+\t\tif (CAN_USE_PIERCE)\n+\t\t\tregister(ExprArrowPierceLevel.class, Number.class, \"[the] arrow pierce level\", \"projectiles\");\n \t}\n \t\n-\tboolean abstractArrowExists = Skript.classExists(\"org.bukkit.entity.AbstractArrow\");\n-\t\n \t@Nullable\n \t@Override\n \tpublic Number convert(Projectile arrow) {\n-\t\tif (abstractArrowExists)\n-\t\t\treturn arrow instanceof AbstractArrow ? ((AbstractArrow) arrow).getPierceLevel() : null;\n-\t\treturn arrow instanceof Arrow ? ((Arrow) arrow).getPierceLevel() : null;\n+\t\treturn ((Arrow) arrow).getPierceLevel();\n \t}\n \t\n \t@Nullable\n \t@Override\n \tpublic Class<?>[] acceptChange(ChangeMode mode) {\n-\t\treturn (mode == ChangeMode.SET || mode == ChangeMode.RESET) ? CollectionUtils.array(Number.class) : null;\n+\t\tswitch (mode) {\n+\t\t\tcase SET:\n+\t\t\tcase RESET:\n+\t\t\tcase REMOVE:\n+\t\t\tcase ADD:\n+\t\t\t\treturn CollectionUtils.array(Number.class);\n+\t\t\tdefault:\n+\t\t\t\treturn null;\n+\t\t}\n \t}\n \t\n \t@Override\n \tpublic void change(Event e, @Nullable Object[] delta, ChangeMode mode) {\n \t\tint strength = delta != null ? Math.max(((Number) delta[0]).intValue(), 0) : 0;\n-\t\tfor (Projectile entity : getExpr().getAll(e)) {\n-\t\t\tif (abstractArrowExists) {\n-\t\t\t\tSystem.out.println(entity.getType().name());\n-\t\t\t\tif (entity instanceof AbstractArrow) ((AbstractArrow) entity).setPierceLevel(strength);\n-\t\t\t} else if (entity instanceof Arrow)\n-\t\t\t\t((Arrow) entity).setPierceLevel(strength);\n+\t\tint mod = 1;\n+\t\tswitch (mode) {\n+\t\t\tcase REMOVE:\n+\t\t\t\tmod = -1;\n+\t\t\tcase ADD:\n+\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n+\t\t\t\t\tif (entity instanceof Arrow) {\n+\t\t\t\t\t\tArrow arrow = (Arrow) entity;\n+\t\t\t\t\t\tint dmg = Math.round(arrow.getPierceLevel() + strength * mod);\n+\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n+\t\t\t\t\t\tarrow.setPierceLevel(dmg);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tbreak;\n+\t\t\tcase RESET:\n+\t\t\tcase SET:\n+\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n+\t\t\t\t\t((Arrow) entity).setPierceLevel(strength);\n+\t\t\t\t}\n+\t\t\t\tbreak;\n+\t\t\tdefault:\n+\t\t\t\tassert false;\n \t\t}\n \t}\n \t\n", "next_change": {"commit": "1abd53beec4167993dd4245050c137d9d678f6c5", "changed_code": [{"header": "diff --git a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\nindex 5574dc46..39480e88 100644\n--- a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n+++ b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n", "chunk": "@@ -99,8 +99,8 @@ public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, N\n \t}\n \t\n \t@Override\n-\tpublic Class<? extends Number> getReturnType() {\n-\t\treturn Number.class;\n+\tpublic Class<? extends Long> getReturnType() {\n+\t\treturn Long.class;\n \t}\n \t\n \t@Override\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "525371c84bd8c59408998924e5841b94fc1bbd07", "message": "Merge commit", "committedDate": null}, {"oid": "4d704c8fbe1e76c97e7b0398b26f21c5401ce300", "committedDate": "2020-10-22 16:21:37 -0700", "message": "Prepare for release of 2.5.1 (#3488)"}, {"oid": "1abd53beec4167993dd4245050c137d9d678f6c5", "committedDate": "2021-08-14 18:58:58 +0200", "message": "Fix number/integer stuff (#4095)"}, {"oid": "452bb05e905526388c0831911b877bd350210331", "committedDate": "2022-04-18 17:28:17 +0200", "message": "Fix some extra and missing [the]'s (#4604)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDMyMDAyNg==", "url": "https://github.com/SkriptLang/Skript/pull/3206#discussion_r460320026", "body": "Use getArray", "bodyText": "Use getArray", "bodyHTML": "<p dir=\"auto\">Use getArray</p>", "author": "FranKusmiruk", "createdAt": "2020-07-24T22:50:38Z", "path": "src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/**\n+ * This file is part of Skript.\n+ *\n+ * Skript is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Skript is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Skript.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ *\n+ * Copyright 2011-2017 Peter G\u00fcttinger and contributors\n+ */\n+package ch.njol.skript.expressions;\n+\n+import org.bukkit.entity.AbstractArrow;\n+import org.bukkit.entity.Arrow;\n+import org.bukkit.entity.Projectile;\n+import org.bukkit.event.Event;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+import ch.njol.skript.Skript;\n+import ch.njol.skript.classes.Changer.ChangeMode;\n+import ch.njol.skript.doc.Description;\n+import ch.njol.skript.doc.Examples;\n+import ch.njol.skript.doc.Name;\n+import ch.njol.skript.doc.Since;\n+import ch.njol.skript.expressions.base.SimplePropertyExpression;\n+import ch.njol.util.coll.CollectionUtils;\n+\n+@Name(\"Arrow Pierce Level\")\n+@Description(\"An arrow's pierce level.\")\n+@Examples({\"on shoot:\",\n+\t\"\\tevent-projectile is an arrow\",\n+\t\"\\tset arrow pierce level of event-projectile to 5\"})\n+@Since(\"INSERT VERSION\")\n+public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, Number> {\n+\t\n+\tstatic {\n+\t\tif(Skript.classExists(\"org.bukkit.entity.AbstractArrow\") || Skript.methodExists(Arrow.class, \"getPierceLevel\")) register(ExprArrowPierceLevel.class, Number.class, \"[the] arrow pierce level\", \"projectiles\");\n+\t}\n+\t\n+\tboolean abstractArrowExists = Skript.classExists(\"org.bukkit.entity.AbstractArrow\");\n+\t\n+\t@Nullable\n+\t@Override\n+\tpublic Number convert(Projectile arrow) {\n+\t\tif (abstractArrowExists)\n+\t\t\treturn arrow instanceof AbstractArrow ? ((AbstractArrow) arrow).getPierceLevel() : null;\n+\t\treturn arrow instanceof Arrow ? ((Arrow) arrow).getPierceLevel() : null;\n+\t}\n+\t\n+\t@Nullable\n+\t@Override\n+\tpublic Class<?>[] acceptChange(ChangeMode mode) {\n+\t\treturn (mode == ChangeMode.SET || mode == ChangeMode.RESET) ? CollectionUtils.array(Number.class) : null;\n+\t}\n+\t\n+\t@Override\n+\tpublic void change(Event e, @Nullable Object[] delta, ChangeMode mode) {\n+\t\tint strength = delta != null ? Math.max(((Number) delta[0]).intValue(), 0) : 0;\n+\t\tfor (Projectile entity : getExpr().getAll(e)) {", "originalCommit": "71dcde3c018a6366ef1555bee7f1910d4364c593", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8ab7f944d8ef01077b8aafb1d5cb2f690d5c81dd", "changed_code": [{"header": "diff --git a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\nindex eed383fd..f9d9ab5f 100644\n--- a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n+++ b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n", "chunk": "@@ -59,18 +60,63 @@ public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, N\n \t@Nullable\n \t@Override\n \tpublic Class<?>[] acceptChange(ChangeMode mode) {\n-\t\treturn (mode == ChangeMode.SET || mode == ChangeMode.RESET) ? CollectionUtils.array(Number.class) : null;\n+\t\treturn (mode == ChangeMode.DELETE || mode == ChangeMode.REMOVE_ALL) ? null : CollectionUtils.array(Number.class);\n \t}\n \t\n \t@Override\n \tpublic void change(Event e, @Nullable Object[] delta, ChangeMode mode) {\n \t\tint strength = delta != null ? Math.max(((Number) delta[0]).intValue(), 0) : 0;\n-\t\tfor (Projectile entity : getExpr().getAll(e)) {\n-\t\t\tif (abstractArrowExists) {\n-\t\t\t\tSystem.out.println(entity.getType().name());\n-\t\t\t\tif (entity instanceof AbstractArrow) ((AbstractArrow) entity).setPierceLevel(strength);\n-\t\t\t} else if (entity instanceof Arrow)\n-\t\t\t\t((Arrow) entity).setPierceLevel(strength);\n+\t\tswitch (mode) {\n+\t\t\tcase REMOVE:\n+\t\t\t\tif (abstractArrowExists)\n+\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n+\t\t\t\t\t\tif (entity instanceof AbstractArrow) {\n+\t\t\t\t\t\t\tAbstractArrow abstractArrow = (AbstractArrow) entity;\n+\t\t\t\t\t\t\tint dmg = Math.round(abstractArrow.getPierceLevel() - strength);\n+\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n+\t\t\t\t\t\t\tabstractArrow.setPierceLevel(dmg);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\telse\n+\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n+\t\t\t\t\t\tif (entity instanceof Arrow) {\n+\t\t\t\t\t\t\tArrow arrow = (Arrow) entity;\n+\t\t\t\t\t\t\tint dmg = Math.round(arrow.getPierceLevel() - strength);\n+\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n+\t\t\t\t\t\t\tarrow.setPierceLevel(dmg);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\tbreak;\n+\t\t\tcase ADD:\n+\t\t\t\tif (abstractArrowExists)\n+\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n+\t\t\t\t\t\tif (entity instanceof AbstractArrow) {\n+\t\t\t\t\t\t\tAbstractArrow abstractArrow = (AbstractArrow) entity;\n+\t\t\t\t\t\t\tint dmg = Math.round(abstractArrow.getPierceLevel() + strength);\n+\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n+\t\t\t\t\t\t\tabstractArrow.setPierceLevel(dmg);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\telse\n+\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n+\t\t\t\t\t\tif (entity instanceof Arrow) {\n+\t\t\t\t\t\t\tArrow arrow = (Arrow) entity;\n+\t\t\t\t\t\t\tint dmg = Math.round(arrow.getPierceLevel() + strength);\n+\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n+\t\t\t\t\t\t\tarrow.setPierceLevel(dmg);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\tbreak;\n+\t\t\tcase RESET:\n+\t\t\tcase SET:\n+\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n+\t\t\t\t\tif (abstractArrowExists) {\n+\t\t\t\t\t\tif (entity instanceof AbstractArrow) ((AbstractArrow) entity).setPierceLevel(strength);\n+\t\t\t\t\t} else if (entity instanceof Arrow) {\n+\t\t\t\t\t\t((Arrow) entity).setPierceLevel(strength);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tbreak;\n \t\t}\n \t}\n \t\n", "next_change": {"commit": "72675726749f9cb5d103c040df33073b42e8b442", "changed_code": [{"header": "diff --git a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\nindex f9d9ab5f..43e83652 100644\n--- a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n+++ b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n", "chunk": "@@ -60,63 +60,58 @@ public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, N\n \t@Nullable\n \t@Override\n \tpublic Class<?>[] acceptChange(ChangeMode mode) {\n-\t\treturn (mode == ChangeMode.DELETE || mode == ChangeMode.REMOVE_ALL) ? null : CollectionUtils.array(Number.class);\n+\t\tswitch (mode) {\n+\t\t\tcase SET:\n+\t\t\tcase RESET:\n+\t\t\tcase REMOVE:\n+\t\t\tcase ADD:\n+\t\t\t\treturn CollectionUtils.array(Number.class);\n+\t\t\tdefault:\n+\t\t\t\treturn null;\n+\t\t}\n \t}\n \t\n \t@Override\n \tpublic void change(Event e, @Nullable Object[] delta, ChangeMode mode) {\n \t\tint strength = delta != null ? Math.max(((Number) delta[0]).intValue(), 0) : 0;\n+\t\tint mod = 1;\n \t\tswitch (mode) {\n \t\t\tcase REMOVE:\n-\t\t\t\tif (abstractArrowExists)\n-\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n-\t\t\t\t\t\tif (entity instanceof AbstractArrow) {\n-\t\t\t\t\t\t\tAbstractArrow abstractArrow = (AbstractArrow) entity;\n-\t\t\t\t\t\t\tint dmg = Math.round(abstractArrow.getPierceLevel() - strength);\n-\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n-\t\t\t\t\t\t\tabstractArrow.setPierceLevel(dmg);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\telse\n-\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n-\t\t\t\t\t\tif (entity instanceof Arrow) {\n-\t\t\t\t\t\t\tArrow arrow = (Arrow) entity;\n-\t\t\t\t\t\t\tint dmg = Math.round(arrow.getPierceLevel() - strength);\n-\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n-\t\t\t\t\t\t\tarrow.setPierceLevel(dmg);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\tbreak;\n+\t\t\t\tmod = -1;\n \t\t\tcase ADD:\n-\t\t\t\tif (abstractArrowExists)\n+\t\t\t\tif (abstractArrowExists) {\n \t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n \t\t\t\t\t\tif (entity instanceof AbstractArrow) {\n \t\t\t\t\t\t\tAbstractArrow abstractArrow = (AbstractArrow) entity;\n-\t\t\t\t\t\t\tint dmg = Math.round(abstractArrow.getPierceLevel() + strength);\n+\t\t\t\t\t\t\tint dmg = Math.round(abstractArrow.getPierceLevel() + strength * mod);\n \t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n \t\t\t\t\t\t\tabstractArrow.setPierceLevel(dmg);\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n-\t\t\t\telse\n+\t\t\t\t} else {\n \t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n \t\t\t\t\t\tif (entity instanceof Arrow) {\n \t\t\t\t\t\t\tArrow arrow = (Arrow) entity;\n-\t\t\t\t\t\t\tint dmg = Math.round(arrow.getPierceLevel() + strength);\n+\t\t\t\t\t\t\tint dmg = Math.round(arrow.getPierceLevel() + strength * mod);\n \t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n \t\t\t\t\t\t\tarrow.setPierceLevel(dmg);\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n+\t\t\t\t}\n \t\t\t\tbreak;\n \t\t\tcase RESET:\n \t\t\tcase SET:\n \t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n \t\t\t\t\tif (abstractArrowExists) {\n-\t\t\t\t\t\tif (entity instanceof AbstractArrow) ((AbstractArrow) entity).setPierceLevel(strength);\n+\t\t\t\t\t\tif (entity instanceof AbstractArrow)\n+\t\t\t\t\t\t\t((AbstractArrow) entity).setPierceLevel(strength);\n \t\t\t\t\t} else if (entity instanceof Arrow) {\n \t\t\t\t\t\t((Arrow) entity).setPierceLevel(strength);\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t\tbreak;\n+\t\t\tdefault:\n+\t\t\t\tassert false;\n \t\t}\n \t}\n \t\n", "next_change": {"commit": "aa17d7a45b30b92b759d72bacfd8899030117a9c", "changed_code": [{"header": "diff --git a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\nindex 43e83652..a47b9cb9 100644\n--- a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n+++ b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n", "chunk": "@@ -79,35 +78,19 @@ public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, N\n \t\t\tcase REMOVE:\n \t\t\t\tmod = -1;\n \t\t\tcase ADD:\n-\t\t\t\tif (abstractArrowExists) {\n-\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n-\t\t\t\t\t\tif (entity instanceof AbstractArrow) {\n-\t\t\t\t\t\t\tAbstractArrow abstractArrow = (AbstractArrow) entity;\n-\t\t\t\t\t\t\tint dmg = Math.round(abstractArrow.getPierceLevel() + strength * mod);\n-\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n-\t\t\t\t\t\t\tabstractArrow.setPierceLevel(dmg);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t} else {\n-\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n-\t\t\t\t\t\tif (entity instanceof Arrow) {\n-\t\t\t\t\t\t\tArrow arrow = (Arrow) entity;\n-\t\t\t\t\t\t\tint dmg = Math.round(arrow.getPierceLevel() + strength * mod);\n-\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n-\t\t\t\t\t\t\tarrow.setPierceLevel(dmg);\n-\t\t\t\t\t\t}\n+\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n+\t\t\t\t\tif (entity instanceof Arrow) {\n+\t\t\t\t\t\tArrow arrow = (Arrow) entity;\n+\t\t\t\t\t\tint dmg = Math.round(arrow.getPierceLevel() + strength * mod);\n+\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n+\t\t\t\t\t\tarrow.setPierceLevel(dmg);\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t\tbreak;\n \t\t\tcase RESET:\n \t\t\tcase SET:\n \t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n-\t\t\t\t\tif (abstractArrowExists) {\n-\t\t\t\t\t\tif (entity instanceof AbstractArrow)\n-\t\t\t\t\t\t\t((AbstractArrow) entity).setPierceLevel(strength);\n-\t\t\t\t\t} else if (entity instanceof Arrow) {\n-\t\t\t\t\t\t((Arrow) entity).setPierceLevel(strength);\n-\t\t\t\t\t}\n+\t\t\t\t\t((Arrow) entity).setPierceLevel(strength);\n \t\t\t\t}\n \t\t\t\tbreak;\n \t\t\tdefault:\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "525371c84bd8c59408998924e5841b94fc1bbd07", "changed_code": [{"header": "diff --git a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\nindex eed383fd..5574dc46 100644\n--- a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n+++ b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n", "chunk": "@@ -39,38 +39,62 @@ import ch.njol.util.coll.CollectionUtils;\n @Examples({\"on shoot:\",\n \t\"\\tevent-projectile is an arrow\",\n \t\"\\tset arrow pierce level of event-projectile to 5\"})\n+@RequiredPlugins(\"Minecraft 1.14+\")\n @Since(\"INSERT VERSION\")\n public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, Number> {\n \t\n+\tprivate final static boolean CAN_USE_PIERCE = Skript.methodExists(Arrow.class, \"getPierceLevel\");\n+\t\n \tstatic {\n-\t\tif(Skript.classExists(\"org.bukkit.entity.AbstractArrow\") || Skript.methodExists(Arrow.class, \"getPierceLevel\")) register(ExprArrowPierceLevel.class, Number.class, \"[the] arrow pierce level\", \"projectiles\");\n+\t\tif (CAN_USE_PIERCE)\n+\t\t\tregister(ExprArrowPierceLevel.class, Number.class, \"[the] arrow pierce level\", \"projectiles\");\n \t}\n \t\n-\tboolean abstractArrowExists = Skript.classExists(\"org.bukkit.entity.AbstractArrow\");\n-\t\n \t@Nullable\n \t@Override\n \tpublic Number convert(Projectile arrow) {\n-\t\tif (abstractArrowExists)\n-\t\t\treturn arrow instanceof AbstractArrow ? ((AbstractArrow) arrow).getPierceLevel() : null;\n-\t\treturn arrow instanceof Arrow ? ((Arrow) arrow).getPierceLevel() : null;\n+\t\treturn ((Arrow) arrow).getPierceLevel();\n \t}\n \t\n \t@Nullable\n \t@Override\n \tpublic Class<?>[] acceptChange(ChangeMode mode) {\n-\t\treturn (mode == ChangeMode.SET || mode == ChangeMode.RESET) ? CollectionUtils.array(Number.class) : null;\n+\t\tswitch (mode) {\n+\t\t\tcase SET:\n+\t\t\tcase RESET:\n+\t\t\tcase REMOVE:\n+\t\t\tcase ADD:\n+\t\t\t\treturn CollectionUtils.array(Number.class);\n+\t\t\tdefault:\n+\t\t\t\treturn null;\n+\t\t}\n \t}\n \t\n \t@Override\n \tpublic void change(Event e, @Nullable Object[] delta, ChangeMode mode) {\n \t\tint strength = delta != null ? Math.max(((Number) delta[0]).intValue(), 0) : 0;\n-\t\tfor (Projectile entity : getExpr().getAll(e)) {\n-\t\t\tif (abstractArrowExists) {\n-\t\t\t\tSystem.out.println(entity.getType().name());\n-\t\t\t\tif (entity instanceof AbstractArrow) ((AbstractArrow) entity).setPierceLevel(strength);\n-\t\t\t} else if (entity instanceof Arrow)\n-\t\t\t\t((Arrow) entity).setPierceLevel(strength);\n+\t\tint mod = 1;\n+\t\tswitch (mode) {\n+\t\t\tcase REMOVE:\n+\t\t\t\tmod = -1;\n+\t\t\tcase ADD:\n+\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n+\t\t\t\t\tif (entity instanceof Arrow) {\n+\t\t\t\t\t\tArrow arrow = (Arrow) entity;\n+\t\t\t\t\t\tint dmg = Math.round(arrow.getPierceLevel() + strength * mod);\n+\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n+\t\t\t\t\t\tarrow.setPierceLevel(dmg);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tbreak;\n+\t\t\tcase RESET:\n+\t\t\tcase SET:\n+\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n+\t\t\t\t\t((Arrow) entity).setPierceLevel(strength);\n+\t\t\t\t}\n+\t\t\t\tbreak;\n+\t\t\tdefault:\n+\t\t\t\tassert false;\n \t\t}\n \t}\n \t\n", "next_change": {"commit": "1abd53beec4167993dd4245050c137d9d678f6c5", "changed_code": [{"header": "diff --git a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\nindex 5574dc46..39480e88 100644\n--- a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n+++ b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n", "chunk": "@@ -99,8 +99,8 @@ public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, N\n \t}\n \t\n \t@Override\n-\tpublic Class<? extends Number> getReturnType() {\n-\t\treturn Number.class;\n+\tpublic Class<? extends Long> getReturnType() {\n+\t\treturn Long.class;\n \t}\n \t\n \t@Override\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "525371c84bd8c59408998924e5841b94fc1bbd07", "message": "Merge commit", "committedDate": null}, {"oid": "4d704c8fbe1e76c97e7b0398b26f21c5401ce300", "committedDate": "2020-10-22 16:21:37 -0700", "message": "Prepare for release of 2.5.1 (#3488)"}, {"oid": "1abd53beec4167993dd4245050c137d9d678f6c5", "committedDate": "2021-08-14 18:58:58 +0200", "message": "Fix number/integer stuff (#4095)"}, {"oid": "452bb05e905526388c0831911b877bd350210331", "committedDate": "2022-04-18 17:28:17 +0200", "message": "Fix some extra and missing [the]'s (#4604)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDMyMDEzOA==", "url": "https://github.com/SkriptLang/Skript/pull/3206#discussion_r460320138", "body": "Should also support add and remove changers considering you are able to use those this way:\r\n```\r\nincrease shot arrow's pierce level by 1\r\n```\r\nForgot to mention this on your other PR for knockback strength", "bodyText": "Should also support add and remove changers considering you are able to use those this way:\nincrease shot arrow's pierce level by 1\n\nForgot to mention this on your other PR for knockback strength", "bodyHTML": "<p dir=\"auto\">Should also support add and remove changers considering you are able to use those this way:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"increase shot arrow's pierce level by 1\n\"><pre><code>increase shot arrow's pierce level by 1\n</code></pre></div>\n<p dir=\"auto\">Forgot to mention this on your other PR for knockback strength</p>", "author": "FranKusmiruk", "createdAt": "2020-07-24T22:51:06Z", "path": "src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/**\n+ * This file is part of Skript.\n+ *\n+ * Skript is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Skript is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Skript.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ *\n+ * Copyright 2011-2017 Peter G\u00fcttinger and contributors\n+ */\n+package ch.njol.skript.expressions;\n+\n+import org.bukkit.entity.AbstractArrow;\n+import org.bukkit.entity.Arrow;\n+import org.bukkit.entity.Projectile;\n+import org.bukkit.event.Event;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+import ch.njol.skript.Skript;\n+import ch.njol.skript.classes.Changer.ChangeMode;\n+import ch.njol.skript.doc.Description;\n+import ch.njol.skript.doc.Examples;\n+import ch.njol.skript.doc.Name;\n+import ch.njol.skript.doc.Since;\n+import ch.njol.skript.expressions.base.SimplePropertyExpression;\n+import ch.njol.util.coll.CollectionUtils;\n+\n+@Name(\"Arrow Pierce Level\")\n+@Description(\"An arrow's pierce level.\")\n+@Examples({\"on shoot:\",\n+\t\"\\tevent-projectile is an arrow\",\n+\t\"\\tset arrow pierce level of event-projectile to 5\"})\n+@Since(\"INSERT VERSION\")\n+public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, Number> {\n+\t\n+\tstatic {\n+\t\tif(Skript.classExists(\"org.bukkit.entity.AbstractArrow\") || Skript.methodExists(Arrow.class, \"getPierceLevel\")) register(ExprArrowPierceLevel.class, Number.class, \"[the] arrow pierce level\", \"projectiles\");\n+\t}\n+\t\n+\tboolean abstractArrowExists = Skript.classExists(\"org.bukkit.entity.AbstractArrow\");\n+\t\n+\t@Nullable\n+\t@Override\n+\tpublic Number convert(Projectile arrow) {\n+\t\tif (abstractArrowExists)\n+\t\t\treturn arrow instanceof AbstractArrow ? ((AbstractArrow) arrow).getPierceLevel() : null;\n+\t\treturn arrow instanceof Arrow ? ((Arrow) arrow).getPierceLevel() : null;\n+\t}\n+\t\n+\t@Nullable\n+\t@Override\n+\tpublic Class<?>[] acceptChange(ChangeMode mode) {\n+\t\treturn (mode == ChangeMode.SET || mode == ChangeMode.RESET) ? CollectionUtils.array(Number.class) : null;", "originalCommit": "71dcde3c018a6366ef1555bee7f1910d4364c593", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8ab7f944d8ef01077b8aafb1d5cb2f690d5c81dd", "changed_code": [{"header": "diff --git a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\nindex eed383fd..f9d9ab5f 100644\n--- a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n+++ b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n", "chunk": "@@ -59,18 +60,63 @@ public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, N\n \t@Nullable\n \t@Override\n \tpublic Class<?>[] acceptChange(ChangeMode mode) {\n-\t\treturn (mode == ChangeMode.SET || mode == ChangeMode.RESET) ? CollectionUtils.array(Number.class) : null;\n+\t\treturn (mode == ChangeMode.DELETE || mode == ChangeMode.REMOVE_ALL) ? null : CollectionUtils.array(Number.class);\n \t}\n \t\n \t@Override\n \tpublic void change(Event e, @Nullable Object[] delta, ChangeMode mode) {\n \t\tint strength = delta != null ? Math.max(((Number) delta[0]).intValue(), 0) : 0;\n-\t\tfor (Projectile entity : getExpr().getAll(e)) {\n-\t\t\tif (abstractArrowExists) {\n-\t\t\t\tSystem.out.println(entity.getType().name());\n-\t\t\t\tif (entity instanceof AbstractArrow) ((AbstractArrow) entity).setPierceLevel(strength);\n-\t\t\t} else if (entity instanceof Arrow)\n-\t\t\t\t((Arrow) entity).setPierceLevel(strength);\n+\t\tswitch (mode) {\n+\t\t\tcase REMOVE:\n+\t\t\t\tif (abstractArrowExists)\n+\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n+\t\t\t\t\t\tif (entity instanceof AbstractArrow) {\n+\t\t\t\t\t\t\tAbstractArrow abstractArrow = (AbstractArrow) entity;\n+\t\t\t\t\t\t\tint dmg = Math.round(abstractArrow.getPierceLevel() - strength);\n+\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n+\t\t\t\t\t\t\tabstractArrow.setPierceLevel(dmg);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\telse\n+\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n+\t\t\t\t\t\tif (entity instanceof Arrow) {\n+\t\t\t\t\t\t\tArrow arrow = (Arrow) entity;\n+\t\t\t\t\t\t\tint dmg = Math.round(arrow.getPierceLevel() - strength);\n+\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n+\t\t\t\t\t\t\tarrow.setPierceLevel(dmg);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\tbreak;\n+\t\t\tcase ADD:\n+\t\t\t\tif (abstractArrowExists)\n+\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n+\t\t\t\t\t\tif (entity instanceof AbstractArrow) {\n+\t\t\t\t\t\t\tAbstractArrow abstractArrow = (AbstractArrow) entity;\n+\t\t\t\t\t\t\tint dmg = Math.round(abstractArrow.getPierceLevel() + strength);\n+\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n+\t\t\t\t\t\t\tabstractArrow.setPierceLevel(dmg);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\telse\n+\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n+\t\t\t\t\t\tif (entity instanceof Arrow) {\n+\t\t\t\t\t\t\tArrow arrow = (Arrow) entity;\n+\t\t\t\t\t\t\tint dmg = Math.round(arrow.getPierceLevel() + strength);\n+\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n+\t\t\t\t\t\t\tarrow.setPierceLevel(dmg);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\tbreak;\n+\t\t\tcase RESET:\n+\t\t\tcase SET:\n+\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n+\t\t\t\t\tif (abstractArrowExists) {\n+\t\t\t\t\t\tif (entity instanceof AbstractArrow) ((AbstractArrow) entity).setPierceLevel(strength);\n+\t\t\t\t\t} else if (entity instanceof Arrow) {\n+\t\t\t\t\t\t((Arrow) entity).setPierceLevel(strength);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tbreak;\n \t\t}\n \t}\n \t\n", "next_change": {"commit": "72675726749f9cb5d103c040df33073b42e8b442", "changed_code": [{"header": "diff --git a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\nindex f9d9ab5f..43e83652 100644\n--- a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n+++ b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n", "chunk": "@@ -60,63 +60,58 @@ public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, N\n \t@Nullable\n \t@Override\n \tpublic Class<?>[] acceptChange(ChangeMode mode) {\n-\t\treturn (mode == ChangeMode.DELETE || mode == ChangeMode.REMOVE_ALL) ? null : CollectionUtils.array(Number.class);\n+\t\tswitch (mode) {\n+\t\t\tcase SET:\n+\t\t\tcase RESET:\n+\t\t\tcase REMOVE:\n+\t\t\tcase ADD:\n+\t\t\t\treturn CollectionUtils.array(Number.class);\n+\t\t\tdefault:\n+\t\t\t\treturn null;\n+\t\t}\n \t}\n \t\n \t@Override\n \tpublic void change(Event e, @Nullable Object[] delta, ChangeMode mode) {\n \t\tint strength = delta != null ? Math.max(((Number) delta[0]).intValue(), 0) : 0;\n+\t\tint mod = 1;\n \t\tswitch (mode) {\n \t\t\tcase REMOVE:\n-\t\t\t\tif (abstractArrowExists)\n-\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n-\t\t\t\t\t\tif (entity instanceof AbstractArrow) {\n-\t\t\t\t\t\t\tAbstractArrow abstractArrow = (AbstractArrow) entity;\n-\t\t\t\t\t\t\tint dmg = Math.round(abstractArrow.getPierceLevel() - strength);\n-\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n-\t\t\t\t\t\t\tabstractArrow.setPierceLevel(dmg);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\telse\n-\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n-\t\t\t\t\t\tif (entity instanceof Arrow) {\n-\t\t\t\t\t\t\tArrow arrow = (Arrow) entity;\n-\t\t\t\t\t\t\tint dmg = Math.round(arrow.getPierceLevel() - strength);\n-\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n-\t\t\t\t\t\t\tarrow.setPierceLevel(dmg);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\tbreak;\n+\t\t\t\tmod = -1;\n \t\t\tcase ADD:\n-\t\t\t\tif (abstractArrowExists)\n+\t\t\t\tif (abstractArrowExists) {\n \t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n \t\t\t\t\t\tif (entity instanceof AbstractArrow) {\n \t\t\t\t\t\t\tAbstractArrow abstractArrow = (AbstractArrow) entity;\n-\t\t\t\t\t\t\tint dmg = Math.round(abstractArrow.getPierceLevel() + strength);\n+\t\t\t\t\t\t\tint dmg = Math.round(abstractArrow.getPierceLevel() + strength * mod);\n \t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n \t\t\t\t\t\t\tabstractArrow.setPierceLevel(dmg);\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n-\t\t\t\telse\n+\t\t\t\t} else {\n \t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n \t\t\t\t\t\tif (entity instanceof Arrow) {\n \t\t\t\t\t\t\tArrow arrow = (Arrow) entity;\n-\t\t\t\t\t\t\tint dmg = Math.round(arrow.getPierceLevel() + strength);\n+\t\t\t\t\t\t\tint dmg = Math.round(arrow.getPierceLevel() + strength * mod);\n \t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n \t\t\t\t\t\t\tarrow.setPierceLevel(dmg);\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n+\t\t\t\t}\n \t\t\t\tbreak;\n \t\t\tcase RESET:\n \t\t\tcase SET:\n \t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n \t\t\t\t\tif (abstractArrowExists) {\n-\t\t\t\t\t\tif (entity instanceof AbstractArrow) ((AbstractArrow) entity).setPierceLevel(strength);\n+\t\t\t\t\t\tif (entity instanceof AbstractArrow)\n+\t\t\t\t\t\t\t((AbstractArrow) entity).setPierceLevel(strength);\n \t\t\t\t\t} else if (entity instanceof Arrow) {\n \t\t\t\t\t\t((Arrow) entity).setPierceLevel(strength);\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t\tbreak;\n+\t\t\tdefault:\n+\t\t\t\tassert false;\n \t\t}\n \t}\n \t\n", "next_change": {"commit": "aa17d7a45b30b92b759d72bacfd8899030117a9c", "changed_code": [{"header": "diff --git a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\nindex 43e83652..a47b9cb9 100644\n--- a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n+++ b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n", "chunk": "@@ -79,35 +78,19 @@ public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, N\n \t\t\tcase REMOVE:\n \t\t\t\tmod = -1;\n \t\t\tcase ADD:\n-\t\t\t\tif (abstractArrowExists) {\n-\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n-\t\t\t\t\t\tif (entity instanceof AbstractArrow) {\n-\t\t\t\t\t\t\tAbstractArrow abstractArrow = (AbstractArrow) entity;\n-\t\t\t\t\t\t\tint dmg = Math.round(abstractArrow.getPierceLevel() + strength * mod);\n-\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n-\t\t\t\t\t\t\tabstractArrow.setPierceLevel(dmg);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t} else {\n-\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n-\t\t\t\t\t\tif (entity instanceof Arrow) {\n-\t\t\t\t\t\t\tArrow arrow = (Arrow) entity;\n-\t\t\t\t\t\t\tint dmg = Math.round(arrow.getPierceLevel() + strength * mod);\n-\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n-\t\t\t\t\t\t\tarrow.setPierceLevel(dmg);\n-\t\t\t\t\t\t}\n+\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n+\t\t\t\t\tif (entity instanceof Arrow) {\n+\t\t\t\t\t\tArrow arrow = (Arrow) entity;\n+\t\t\t\t\t\tint dmg = Math.round(arrow.getPierceLevel() + strength * mod);\n+\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n+\t\t\t\t\t\tarrow.setPierceLevel(dmg);\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t\tbreak;\n \t\t\tcase RESET:\n \t\t\tcase SET:\n \t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n-\t\t\t\t\tif (abstractArrowExists) {\n-\t\t\t\t\t\tif (entity instanceof AbstractArrow)\n-\t\t\t\t\t\t\t((AbstractArrow) entity).setPierceLevel(strength);\n-\t\t\t\t\t} else if (entity instanceof Arrow) {\n-\t\t\t\t\t\t((Arrow) entity).setPierceLevel(strength);\n-\t\t\t\t\t}\n+\t\t\t\t\t((Arrow) entity).setPierceLevel(strength);\n \t\t\t\t}\n \t\t\t\tbreak;\n \t\t\tdefault:\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "525371c84bd8c59408998924e5841b94fc1bbd07", "changed_code": [{"header": "diff --git a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\nindex eed383fd..5574dc46 100644\n--- a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n+++ b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n", "chunk": "@@ -39,38 +39,62 @@ import ch.njol.util.coll.CollectionUtils;\n @Examples({\"on shoot:\",\n \t\"\\tevent-projectile is an arrow\",\n \t\"\\tset arrow pierce level of event-projectile to 5\"})\n+@RequiredPlugins(\"Minecraft 1.14+\")\n @Since(\"INSERT VERSION\")\n public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, Number> {\n \t\n+\tprivate final static boolean CAN_USE_PIERCE = Skript.methodExists(Arrow.class, \"getPierceLevel\");\n+\t\n \tstatic {\n-\t\tif(Skript.classExists(\"org.bukkit.entity.AbstractArrow\") || Skript.methodExists(Arrow.class, \"getPierceLevel\")) register(ExprArrowPierceLevel.class, Number.class, \"[the] arrow pierce level\", \"projectiles\");\n+\t\tif (CAN_USE_PIERCE)\n+\t\t\tregister(ExprArrowPierceLevel.class, Number.class, \"[the] arrow pierce level\", \"projectiles\");\n \t}\n \t\n-\tboolean abstractArrowExists = Skript.classExists(\"org.bukkit.entity.AbstractArrow\");\n-\t\n \t@Nullable\n \t@Override\n \tpublic Number convert(Projectile arrow) {\n-\t\tif (abstractArrowExists)\n-\t\t\treturn arrow instanceof AbstractArrow ? ((AbstractArrow) arrow).getPierceLevel() : null;\n-\t\treturn arrow instanceof Arrow ? ((Arrow) arrow).getPierceLevel() : null;\n+\t\treturn ((Arrow) arrow).getPierceLevel();\n \t}\n \t\n \t@Nullable\n \t@Override\n \tpublic Class<?>[] acceptChange(ChangeMode mode) {\n-\t\treturn (mode == ChangeMode.SET || mode == ChangeMode.RESET) ? CollectionUtils.array(Number.class) : null;\n+\t\tswitch (mode) {\n+\t\t\tcase SET:\n+\t\t\tcase RESET:\n+\t\t\tcase REMOVE:\n+\t\t\tcase ADD:\n+\t\t\t\treturn CollectionUtils.array(Number.class);\n+\t\t\tdefault:\n+\t\t\t\treturn null;\n+\t\t}\n \t}\n \t\n \t@Override\n \tpublic void change(Event e, @Nullable Object[] delta, ChangeMode mode) {\n \t\tint strength = delta != null ? Math.max(((Number) delta[0]).intValue(), 0) : 0;\n-\t\tfor (Projectile entity : getExpr().getAll(e)) {\n-\t\t\tif (abstractArrowExists) {\n-\t\t\t\tSystem.out.println(entity.getType().name());\n-\t\t\t\tif (entity instanceof AbstractArrow) ((AbstractArrow) entity).setPierceLevel(strength);\n-\t\t\t} else if (entity instanceof Arrow)\n-\t\t\t\t((Arrow) entity).setPierceLevel(strength);\n+\t\tint mod = 1;\n+\t\tswitch (mode) {\n+\t\t\tcase REMOVE:\n+\t\t\t\tmod = -1;\n+\t\t\tcase ADD:\n+\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n+\t\t\t\t\tif (entity instanceof Arrow) {\n+\t\t\t\t\t\tArrow arrow = (Arrow) entity;\n+\t\t\t\t\t\tint dmg = Math.round(arrow.getPierceLevel() + strength * mod);\n+\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n+\t\t\t\t\t\tarrow.setPierceLevel(dmg);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tbreak;\n+\t\t\tcase RESET:\n+\t\t\tcase SET:\n+\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n+\t\t\t\t\t((Arrow) entity).setPierceLevel(strength);\n+\t\t\t\t}\n+\t\t\t\tbreak;\n+\t\t\tdefault:\n+\t\t\t\tassert false;\n \t\t}\n \t}\n \t\n", "next_change": {"commit": "1abd53beec4167993dd4245050c137d9d678f6c5", "changed_code": [{"header": "diff --git a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\nindex 5574dc46..39480e88 100644\n--- a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n+++ b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n", "chunk": "@@ -99,8 +99,8 @@ public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, N\n \t}\n \t\n \t@Override\n-\tpublic Class<? extends Number> getReturnType() {\n-\t\treturn Number.class;\n+\tpublic Class<? extends Long> getReturnType() {\n+\t\treturn Long.class;\n \t}\n \t\n \t@Override\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "525371c84bd8c59408998924e5841b94fc1bbd07", "message": "Merge commit", "committedDate": null}, {"oid": "4d704c8fbe1e76c97e7b0398b26f21c5401ce300", "committedDate": "2020-10-22 16:21:37 -0700", "message": "Prepare for release of 2.5.1 (#3488)"}, {"oid": "1abd53beec4167993dd4245050c137d9d678f6c5", "committedDate": "2021-08-14 18:58:58 +0200", "message": "Fix number/integer stuff (#4095)"}, {"oid": "452bb05e905526388c0831911b877bd350210331", "committedDate": "2022-04-18 17:28:17 +0200", "message": "Fix some extra and missing [the]'s (#4604)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDMyMDQzNQ==", "url": "https://github.com/SkriptLang/Skript/pull/3206#discussion_r460320435", "body": "This should be a constant as well, declared before the static block since you also have the same check being used there", "bodyText": "This should be a constant as well, declared before the static block since you also have the same check being used there", "bodyHTML": "<p dir=\"auto\">This should be a constant as well, declared before the static block since you also have the same check being used there</p>", "author": "FranKusmiruk", "createdAt": "2020-07-24T22:52:17Z", "path": "src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/**\n+ * This file is part of Skript.\n+ *\n+ * Skript is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Skript is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Skript.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ *\n+ * Copyright 2011-2017 Peter G\u00fcttinger and contributors\n+ */\n+package ch.njol.skript.expressions;\n+\n+import org.bukkit.entity.AbstractArrow;\n+import org.bukkit.entity.Arrow;\n+import org.bukkit.entity.Projectile;\n+import org.bukkit.event.Event;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+import ch.njol.skript.Skript;\n+import ch.njol.skript.classes.Changer.ChangeMode;\n+import ch.njol.skript.doc.Description;\n+import ch.njol.skript.doc.Examples;\n+import ch.njol.skript.doc.Name;\n+import ch.njol.skript.doc.Since;\n+import ch.njol.skript.expressions.base.SimplePropertyExpression;\n+import ch.njol.util.coll.CollectionUtils;\n+\n+@Name(\"Arrow Pierce Level\")\n+@Description(\"An arrow's pierce level.\")\n+@Examples({\"on shoot:\",\n+\t\"\\tevent-projectile is an arrow\",\n+\t\"\\tset arrow pierce level of event-projectile to 5\"})\n+@Since(\"INSERT VERSION\")\n+public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, Number> {\n+\t\n+\tstatic {\n+\t\tif(Skript.classExists(\"org.bukkit.entity.AbstractArrow\") || Skript.methodExists(Arrow.class, \"getPierceLevel\")) register(ExprArrowPierceLevel.class, Number.class, \"[the] arrow pierce level\", \"projectiles\");\n+\t}\n+\t\n+\tboolean abstractArrowExists = Skript.classExists(\"org.bukkit.entity.AbstractArrow\");", "originalCommit": "71dcde3c018a6366ef1555bee7f1910d4364c593", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "8ab7f944d8ef01077b8aafb1d5cb2f690d5c81dd", "changed_code": [{"header": "diff --git a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\nindex eed383fd..f9d9ab5f 100644\n--- a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n+++ b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n", "chunk": "@@ -42,12 +42,13 @@ import ch.njol.util.coll.CollectionUtils;\n @Since(\"INSERT VERSION\")\n public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, Number> {\n \t\n+\tfinal static boolean abstractArrowExists = Skript.classExists(\"org.bukkit.entity.AbstractArrow\");\n+\t\n \tstatic {\n-\t\tif(Skript.classExists(\"org.bukkit.entity.AbstractArrow\") || Skript.methodExists(Arrow.class, \"getPierceLevel\")) register(ExprArrowPierceLevel.class, Number.class, \"[the] arrow pierce level\", \"projectiles\");\n+\t\tif (abstractArrowExists || Skript.methodExists(Arrow.class, \"getPierceLevel\"))\n+\t\t\tregister(ExprArrowPierceLevel.class, Number.class, \"[the] arrow pierce level\", \"projectiles\");\n \t}\n \t\n-\tboolean abstractArrowExists = Skript.classExists(\"org.bukkit.entity.AbstractArrow\");\n-\t\n \t@Nullable\n \t@Override\n \tpublic Number convert(Projectile arrow) {\n", "next_change": {"commit": "aa17d7a45b30b92b759d72bacfd8899030117a9c", "changed_code": [{"header": "diff --git a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\nindex f9d9ab5f..a47b9cb9 100644\n--- a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n+++ b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n", "chunk": "@@ -39,84 +39,62 @@ import ch.njol.util.coll.CollectionUtils;\n @Examples({\"on shoot:\",\n \t\"\\tevent-projectile is an arrow\",\n \t\"\\tset arrow pierce level of event-projectile to 5\"})\n+@RequiredPlugins(\"Minecraft 1.14+\")\n @Since(\"INSERT VERSION\")\n public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, Number> {\n \t\n-\tfinal static boolean abstractArrowExists = Skript.classExists(\"org.bukkit.entity.AbstractArrow\");\n+\tprivate final static boolean CAN_USE_PIERCE = Skript.methodExists(Arrow.class, \"getPierceLevel\");\n \t\n \tstatic {\n-\t\tif (abstractArrowExists || Skript.methodExists(Arrow.class, \"getPierceLevel\"))\n+\t\tif (CAN_USE_PIERCE)\n \t\t\tregister(ExprArrowPierceLevel.class, Number.class, \"[the] arrow pierce level\", \"projectiles\");\n \t}\n \t\n \t@Nullable\n \t@Override\n \tpublic Number convert(Projectile arrow) {\n-\t\tif (abstractArrowExists)\n-\t\t\treturn arrow instanceof AbstractArrow ? ((AbstractArrow) arrow).getPierceLevel() : null;\n-\t\treturn arrow instanceof Arrow ? ((Arrow) arrow).getPierceLevel() : null;\n+\t\treturn ((Arrow) arrow).getPierceLevel();\n \t}\n \t\n \t@Nullable\n \t@Override\n \tpublic Class<?>[] acceptChange(ChangeMode mode) {\n-\t\treturn (mode == ChangeMode.DELETE || mode == ChangeMode.REMOVE_ALL) ? null : CollectionUtils.array(Number.class);\n+\t\tswitch (mode) {\n+\t\t\tcase SET:\n+\t\t\tcase RESET:\n+\t\t\tcase REMOVE:\n+\t\t\tcase ADD:\n+\t\t\t\treturn CollectionUtils.array(Number.class);\n+\t\t\tdefault:\n+\t\t\t\treturn null;\n+\t\t}\n \t}\n \t\n \t@Override\n \tpublic void change(Event e, @Nullable Object[] delta, ChangeMode mode) {\n \t\tint strength = delta != null ? Math.max(((Number) delta[0]).intValue(), 0) : 0;\n+\t\tint mod = 1;\n \t\tswitch (mode) {\n \t\t\tcase REMOVE:\n-\t\t\t\tif (abstractArrowExists)\n-\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n-\t\t\t\t\t\tif (entity instanceof AbstractArrow) {\n-\t\t\t\t\t\t\tAbstractArrow abstractArrow = (AbstractArrow) entity;\n-\t\t\t\t\t\t\tint dmg = Math.round(abstractArrow.getPierceLevel() - strength);\n-\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n-\t\t\t\t\t\t\tabstractArrow.setPierceLevel(dmg);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\telse\n-\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n-\t\t\t\t\t\tif (entity instanceof Arrow) {\n-\t\t\t\t\t\t\tArrow arrow = (Arrow) entity;\n-\t\t\t\t\t\t\tint dmg = Math.round(arrow.getPierceLevel() - strength);\n-\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n-\t\t\t\t\t\t\tarrow.setPierceLevel(dmg);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\tbreak;\n+\t\t\t\tmod = -1;\n \t\t\tcase ADD:\n-\t\t\t\tif (abstractArrowExists)\n-\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n-\t\t\t\t\t\tif (entity instanceof AbstractArrow) {\n-\t\t\t\t\t\t\tAbstractArrow abstractArrow = (AbstractArrow) entity;\n-\t\t\t\t\t\t\tint dmg = Math.round(abstractArrow.getPierceLevel() + strength);\n-\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n-\t\t\t\t\t\t\tabstractArrow.setPierceLevel(dmg);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\telse\n-\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n-\t\t\t\t\t\tif (entity instanceof Arrow) {\n-\t\t\t\t\t\t\tArrow arrow = (Arrow) entity;\n-\t\t\t\t\t\t\tint dmg = Math.round(arrow.getPierceLevel() + strength);\n-\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n-\t\t\t\t\t\t\tarrow.setPierceLevel(dmg);\n-\t\t\t\t\t\t}\n+\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n+\t\t\t\t\tif (entity instanceof Arrow) {\n+\t\t\t\t\t\tArrow arrow = (Arrow) entity;\n+\t\t\t\t\t\tint dmg = Math.round(arrow.getPierceLevel() + strength * mod);\n+\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n+\t\t\t\t\t\tarrow.setPierceLevel(dmg);\n \t\t\t\t\t}\n+\t\t\t\t}\n \t\t\t\tbreak;\n \t\t\tcase RESET:\n \t\t\tcase SET:\n \t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n-\t\t\t\t\tif (abstractArrowExists) {\n-\t\t\t\t\t\tif (entity instanceof AbstractArrow) ((AbstractArrow) entity).setPierceLevel(strength);\n-\t\t\t\t\t} else if (entity instanceof Arrow) {\n-\t\t\t\t\t\t((Arrow) entity).setPierceLevel(strength);\n-\t\t\t\t\t}\n+\t\t\t\t\t((Arrow) entity).setPierceLevel(strength);\n \t\t\t\t}\n \t\t\t\tbreak;\n+\t\t\tdefault:\n+\t\t\t\tassert false;\n \t\t}\n \t}\n \t\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "525371c84bd8c59408998924e5841b94fc1bbd07", "changed_code": [{"header": "diff --git a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\nindex eed383fd..5574dc46 100644\n--- a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n+++ b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n", "chunk": "@@ -39,38 +39,62 @@ import ch.njol.util.coll.CollectionUtils;\n @Examples({\"on shoot:\",\n \t\"\\tevent-projectile is an arrow\",\n \t\"\\tset arrow pierce level of event-projectile to 5\"})\n+@RequiredPlugins(\"Minecraft 1.14+\")\n @Since(\"INSERT VERSION\")\n public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, Number> {\n \t\n+\tprivate final static boolean CAN_USE_PIERCE = Skript.methodExists(Arrow.class, \"getPierceLevel\");\n+\t\n \tstatic {\n-\t\tif(Skript.classExists(\"org.bukkit.entity.AbstractArrow\") || Skript.methodExists(Arrow.class, \"getPierceLevel\")) register(ExprArrowPierceLevel.class, Number.class, \"[the] arrow pierce level\", \"projectiles\");\n+\t\tif (CAN_USE_PIERCE)\n+\t\t\tregister(ExprArrowPierceLevel.class, Number.class, \"[the] arrow pierce level\", \"projectiles\");\n \t}\n \t\n-\tboolean abstractArrowExists = Skript.classExists(\"org.bukkit.entity.AbstractArrow\");\n-\t\n \t@Nullable\n \t@Override\n \tpublic Number convert(Projectile arrow) {\n-\t\tif (abstractArrowExists)\n-\t\t\treturn arrow instanceof AbstractArrow ? ((AbstractArrow) arrow).getPierceLevel() : null;\n-\t\treturn arrow instanceof Arrow ? ((Arrow) arrow).getPierceLevel() : null;\n+\t\treturn ((Arrow) arrow).getPierceLevel();\n \t}\n \t\n \t@Nullable\n \t@Override\n \tpublic Class<?>[] acceptChange(ChangeMode mode) {\n-\t\treturn (mode == ChangeMode.SET || mode == ChangeMode.RESET) ? CollectionUtils.array(Number.class) : null;\n+\t\tswitch (mode) {\n+\t\t\tcase SET:\n+\t\t\tcase RESET:\n+\t\t\tcase REMOVE:\n+\t\t\tcase ADD:\n+\t\t\t\treturn CollectionUtils.array(Number.class);\n+\t\t\tdefault:\n+\t\t\t\treturn null;\n+\t\t}\n \t}\n \t\n \t@Override\n \tpublic void change(Event e, @Nullable Object[] delta, ChangeMode mode) {\n \t\tint strength = delta != null ? Math.max(((Number) delta[0]).intValue(), 0) : 0;\n-\t\tfor (Projectile entity : getExpr().getAll(e)) {\n-\t\t\tif (abstractArrowExists) {\n-\t\t\t\tSystem.out.println(entity.getType().name());\n-\t\t\t\tif (entity instanceof AbstractArrow) ((AbstractArrow) entity).setPierceLevel(strength);\n-\t\t\t} else if (entity instanceof Arrow)\n-\t\t\t\t((Arrow) entity).setPierceLevel(strength);\n+\t\tint mod = 1;\n+\t\tswitch (mode) {\n+\t\t\tcase REMOVE:\n+\t\t\t\tmod = -1;\n+\t\t\tcase ADD:\n+\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n+\t\t\t\t\tif (entity instanceof Arrow) {\n+\t\t\t\t\t\tArrow arrow = (Arrow) entity;\n+\t\t\t\t\t\tint dmg = Math.round(arrow.getPierceLevel() + strength * mod);\n+\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n+\t\t\t\t\t\tarrow.setPierceLevel(dmg);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tbreak;\n+\t\t\tcase RESET:\n+\t\t\tcase SET:\n+\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n+\t\t\t\t\t((Arrow) entity).setPierceLevel(strength);\n+\t\t\t\t}\n+\t\t\t\tbreak;\n+\t\t\tdefault:\n+\t\t\t\tassert false;\n \t\t}\n \t}\n \t\n", "next_change": {"commit": "1abd53beec4167993dd4245050c137d9d678f6c5", "changed_code": [{"header": "diff --git a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\nindex 5574dc46..39480e88 100644\n--- a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n+++ b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n", "chunk": "@@ -99,8 +99,8 @@ public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, N\n \t}\n \t\n \t@Override\n-\tpublic Class<? extends Number> getReturnType() {\n-\t\treturn Number.class;\n+\tpublic Class<? extends Long> getReturnType() {\n+\t\treturn Long.class;\n \t}\n \t\n \t@Override\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "525371c84bd8c59408998924e5841b94fc1bbd07", "message": "Merge commit", "committedDate": null}, {"oid": "4d704c8fbe1e76c97e7b0398b26f21c5401ce300", "committedDate": "2020-10-22 16:21:37 -0700", "message": "Prepare for release of 2.5.1 (#3488)"}, {"oid": "1abd53beec4167993dd4245050c137d9d678f6c5", "committedDate": "2021-08-14 18:58:58 +0200", "message": "Fix number/integer stuff (#4095)"}, {"oid": "452bb05e905526388c0831911b877bd350210331", "committedDate": "2022-04-18 17:28:17 +0200", "message": "Fix some extra and missing [the]'s (#4604)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDMyMDg0OA==", "url": "https://github.com/SkriptLang/Skript/pull/3206#discussion_r460320848", "body": "Should specify that it applies to anything considered arrows since we don't know if Mojang is going to add more arrow-like projectiles.", "bodyText": "Should specify that it applies to anything considered arrows since we don't know if Mojang is going to add more arrow-like projectiles.", "bodyHTML": "<p dir=\"auto\">Should specify that it applies to anything considered arrows since we don't know if Mojang is going to add more arrow-like projectiles.</p>", "author": "FranKusmiruk", "createdAt": "2020-07-24T22:53:48Z", "path": "src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/**\n+ * This file is part of Skript.\n+ *\n+ * Skript is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Skript is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Skript.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ *\n+ * Copyright 2011-2017 Peter G\u00fcttinger and contributors\n+ */\n+package ch.njol.skript.expressions;\n+\n+import org.bukkit.entity.AbstractArrow;\n+import org.bukkit.entity.Arrow;\n+import org.bukkit.entity.Projectile;\n+import org.bukkit.event.Event;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+import ch.njol.skript.Skript;\n+import ch.njol.skript.classes.Changer.ChangeMode;\n+import ch.njol.skript.doc.Description;\n+import ch.njol.skript.doc.Examples;\n+import ch.njol.skript.doc.Name;\n+import ch.njol.skript.doc.Since;\n+import ch.njol.skript.expressions.base.SimplePropertyExpression;\n+import ch.njol.util.coll.CollectionUtils;\n+\n+@Name(\"Arrow Pierce Level\")\n+@Description(\"An arrow's pierce level.\")", "originalCommit": "71dcde3c018a6366ef1555bee7f1910d4364c593", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM3NjQzOA==", "url": "https://github.com/SkriptLang/Skript/pull/3206#discussion_r460376438", "bodyText": "Yeah but it didn\u2019t work with tridents and using projectile seemed too generic", "author": "DeltaRays", "createdAt": "2020-07-25T07:21:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDMyMDg0OA=="}], "type": "inlineReview", "revised_code": {"commit": "aa17d7a45b30b92b759d72bacfd8899030117a9c", "changed_code": [{"header": "diff --git a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\nindex eed383fd..a47b9cb9 100644\n--- a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n+++ b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n", "chunk": "@@ -30,6 +29,7 @@ import ch.njol.skript.classes.Changer.ChangeMode;\n import ch.njol.skript.doc.Description;\n import ch.njol.skript.doc.Examples;\n import ch.njol.skript.doc.Name;\n+import ch.njol.skript.doc.RequiredPlugins;\n import ch.njol.skript.doc.Since;\n import ch.njol.skript.expressions.base.SimplePropertyExpression;\n import ch.njol.util.coll.CollectionUtils;\n", "next_change": null}, {"header": "diff --git a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\nindex eed383fd..a47b9cb9 100644\n--- a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n+++ b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n", "chunk": "@@ -39,38 +39,62 @@ import ch.njol.util.coll.CollectionUtils;\n @Examples({\"on shoot:\",\n \t\"\\tevent-projectile is an arrow\",\n \t\"\\tset arrow pierce level of event-projectile to 5\"})\n+@RequiredPlugins(\"Minecraft 1.14+\")\n @Since(\"INSERT VERSION\")\n public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, Number> {\n \t\n+\tprivate final static boolean CAN_USE_PIERCE = Skript.methodExists(Arrow.class, \"getPierceLevel\");\n+\t\n \tstatic {\n-\t\tif(Skript.classExists(\"org.bukkit.entity.AbstractArrow\") || Skript.methodExists(Arrow.class, \"getPierceLevel\")) register(ExprArrowPierceLevel.class, Number.class, \"[the] arrow pierce level\", \"projectiles\");\n+\t\tif (CAN_USE_PIERCE)\n+\t\t\tregister(ExprArrowPierceLevel.class, Number.class, \"[the] arrow pierce level\", \"projectiles\");\n \t}\n \t\n-\tboolean abstractArrowExists = Skript.classExists(\"org.bukkit.entity.AbstractArrow\");\n-\t\n \t@Nullable\n \t@Override\n \tpublic Number convert(Projectile arrow) {\n-\t\tif (abstractArrowExists)\n-\t\t\treturn arrow instanceof AbstractArrow ? ((AbstractArrow) arrow).getPierceLevel() : null;\n-\t\treturn arrow instanceof Arrow ? ((Arrow) arrow).getPierceLevel() : null;\n+\t\treturn ((Arrow) arrow).getPierceLevel();\n \t}\n \t\n \t@Nullable\n \t@Override\n \tpublic Class<?>[] acceptChange(ChangeMode mode) {\n-\t\treturn (mode == ChangeMode.SET || mode == ChangeMode.RESET) ? CollectionUtils.array(Number.class) : null;\n+\t\tswitch (mode) {\n+\t\t\tcase SET:\n+\t\t\tcase RESET:\n+\t\t\tcase REMOVE:\n+\t\t\tcase ADD:\n+\t\t\t\treturn CollectionUtils.array(Number.class);\n+\t\t\tdefault:\n+\t\t\t\treturn null;\n+\t\t}\n \t}\n \t\n \t@Override\n \tpublic void change(Event e, @Nullable Object[] delta, ChangeMode mode) {\n \t\tint strength = delta != null ? Math.max(((Number) delta[0]).intValue(), 0) : 0;\n-\t\tfor (Projectile entity : getExpr().getAll(e)) {\n-\t\t\tif (abstractArrowExists) {\n-\t\t\t\tSystem.out.println(entity.getType().name());\n-\t\t\t\tif (entity instanceof AbstractArrow) ((AbstractArrow) entity).setPierceLevel(strength);\n-\t\t\t} else if (entity instanceof Arrow)\n-\t\t\t\t((Arrow) entity).setPierceLevel(strength);\n+\t\tint mod = 1;\n+\t\tswitch (mode) {\n+\t\t\tcase REMOVE:\n+\t\t\t\tmod = -1;\n+\t\t\tcase ADD:\n+\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n+\t\t\t\t\tif (entity instanceof Arrow) {\n+\t\t\t\t\t\tArrow arrow = (Arrow) entity;\n+\t\t\t\t\t\tint dmg = Math.round(arrow.getPierceLevel() + strength * mod);\n+\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n+\t\t\t\t\t\tarrow.setPierceLevel(dmg);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tbreak;\n+\t\t\tcase RESET:\n+\t\t\tcase SET:\n+\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n+\t\t\t\t\t((Arrow) entity).setPierceLevel(strength);\n+\t\t\t\t}\n+\t\t\t\tbreak;\n+\t\t\tdefault:\n+\t\t\t\tassert false;\n \t\t}\n \t}\n \t\n", "next_change": null}]}, "revised_code_in_main": {"commit": "525371c84bd8c59408998924e5841b94fc1bbd07", "changed_code": [{"header": "diff --git a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\nindex eed383fd..5574dc46 100644\n--- a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n+++ b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n", "chunk": "@@ -30,6 +29,7 @@ import ch.njol.skript.classes.Changer.ChangeMode;\n import ch.njol.skript.doc.Description;\n import ch.njol.skript.doc.Examples;\n import ch.njol.skript.doc.Name;\n+import ch.njol.skript.doc.RequiredPlugins;\n import ch.njol.skript.doc.Since;\n import ch.njol.skript.expressions.base.SimplePropertyExpression;\n import ch.njol.util.coll.CollectionUtils;\n", "next_change": null}, {"header": "diff --git a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\nindex eed383fd..5574dc46 100644\n--- a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n+++ b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n", "chunk": "@@ -39,38 +39,62 @@ import ch.njol.util.coll.CollectionUtils;\n @Examples({\"on shoot:\",\n \t\"\\tevent-projectile is an arrow\",\n \t\"\\tset arrow pierce level of event-projectile to 5\"})\n+@RequiredPlugins(\"Minecraft 1.14+\")\n @Since(\"INSERT VERSION\")\n public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, Number> {\n \t\n+\tprivate final static boolean CAN_USE_PIERCE = Skript.methodExists(Arrow.class, \"getPierceLevel\");\n+\t\n \tstatic {\n-\t\tif(Skript.classExists(\"org.bukkit.entity.AbstractArrow\") || Skript.methodExists(Arrow.class, \"getPierceLevel\")) register(ExprArrowPierceLevel.class, Number.class, \"[the] arrow pierce level\", \"projectiles\");\n+\t\tif (CAN_USE_PIERCE)\n+\t\t\tregister(ExprArrowPierceLevel.class, Number.class, \"[the] arrow pierce level\", \"projectiles\");\n \t}\n \t\n-\tboolean abstractArrowExists = Skript.classExists(\"org.bukkit.entity.AbstractArrow\");\n-\t\n \t@Nullable\n \t@Override\n \tpublic Number convert(Projectile arrow) {\n-\t\tif (abstractArrowExists)\n-\t\t\treturn arrow instanceof AbstractArrow ? ((AbstractArrow) arrow).getPierceLevel() : null;\n-\t\treturn arrow instanceof Arrow ? ((Arrow) arrow).getPierceLevel() : null;\n+\t\treturn ((Arrow) arrow).getPierceLevel();\n \t}\n \t\n \t@Nullable\n \t@Override\n \tpublic Class<?>[] acceptChange(ChangeMode mode) {\n-\t\treturn (mode == ChangeMode.SET || mode == ChangeMode.RESET) ? CollectionUtils.array(Number.class) : null;\n+\t\tswitch (mode) {\n+\t\t\tcase SET:\n+\t\t\tcase RESET:\n+\t\t\tcase REMOVE:\n+\t\t\tcase ADD:\n+\t\t\t\treturn CollectionUtils.array(Number.class);\n+\t\t\tdefault:\n+\t\t\t\treturn null;\n+\t\t}\n \t}\n \t\n \t@Override\n \tpublic void change(Event e, @Nullable Object[] delta, ChangeMode mode) {\n \t\tint strength = delta != null ? Math.max(((Number) delta[0]).intValue(), 0) : 0;\n-\t\tfor (Projectile entity : getExpr().getAll(e)) {\n-\t\t\tif (abstractArrowExists) {\n-\t\t\t\tSystem.out.println(entity.getType().name());\n-\t\t\t\tif (entity instanceof AbstractArrow) ((AbstractArrow) entity).setPierceLevel(strength);\n-\t\t\t} else if (entity instanceof Arrow)\n-\t\t\t\t((Arrow) entity).setPierceLevel(strength);\n+\t\tint mod = 1;\n+\t\tswitch (mode) {\n+\t\t\tcase REMOVE:\n+\t\t\t\tmod = -1;\n+\t\t\tcase ADD:\n+\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n+\t\t\t\t\tif (entity instanceof Arrow) {\n+\t\t\t\t\t\tArrow arrow = (Arrow) entity;\n+\t\t\t\t\t\tint dmg = Math.round(arrow.getPierceLevel() + strength * mod);\n+\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n+\t\t\t\t\t\tarrow.setPierceLevel(dmg);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tbreak;\n+\t\t\tcase RESET:\n+\t\t\tcase SET:\n+\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n+\t\t\t\t\t((Arrow) entity).setPierceLevel(strength);\n+\t\t\t\t}\n+\t\t\t\tbreak;\n+\t\t\tdefault:\n+\t\t\t\tassert false;\n \t\t}\n \t}\n \t\n", "next_change": {"commit": "1abd53beec4167993dd4245050c137d9d678f6c5", "changed_code": [{"header": "diff --git a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\nindex 5574dc46..39480e88 100644\n--- a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n+++ b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n", "chunk": "@@ -99,8 +99,8 @@ public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, N\n \t}\n \t\n \t@Override\n-\tpublic Class<? extends Number> getReturnType() {\n-\t\treturn Number.class;\n+\tpublic Class<? extends Long> getReturnType() {\n+\t\treturn Long.class;\n \t}\n \t\n \t@Override\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "525371c84bd8c59408998924e5841b94fc1bbd07", "message": "Merge commit", "committedDate": null}, {"oid": "4d704c8fbe1e76c97e7b0398b26f21c5401ce300", "committedDate": "2020-10-22 16:21:37 -0700", "message": "Prepare for release of 2.5.1 (#3488)"}, {"oid": "1abd53beec4167993dd4245050c137d9d678f6c5", "committedDate": "2021-08-14 18:58:58 +0200", "message": "Fix number/integer stuff (#4095)"}, {"oid": "452bb05e905526388c0831911b877bd350210331", "committedDate": "2022-04-18 17:28:17 +0200", "message": "Fix some extra and missing [the]'s (#4604)"}]}, {"oid": "19b91796a2dbe8d978c1edf37709a4509e6ce371", "url": "https://github.com/SkriptLang/Skript/commit/19b91796a2dbe8d978c1edf37709a4509e6ce371", "message": "Merge branch 'master' into ExprPierceLevel", "committedDate": "2020-07-25T07:22:03Z", "type": "commit"}, {"oid": "8ab7f944d8ef01077b8aafb1d5cb2f690d5c81dd", "url": "https://github.com/SkriptLang/Skript/commit/8ab7f944d8ef01077b8aafb1d5cb2f690d5c81dd", "message": "Added the REMOVE and the ADD modes", "committedDate": "2020-07-25T17:48:48Z", "type": "commit"}, {"oid": "0aa195d593628e0ad712b26a043a2391c5cd76a3", "url": "https://github.com/SkriptLang/Skript/commit/0aa195d593628e0ad712b26a043a2391c5cd76a3", "message": "Merge branch 'master' into ExprPierceLevel", "committedDate": "2020-07-26T09:49:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI1NTMzOA==", "url": "https://github.com/SkriptLang/Skript/pull/3206#discussion_r463255338", "body": "This should be changed to a switch statement", "bodyText": "This should be changed to a switch statement", "bodyHTML": "<p dir=\"auto\">This should be changed to a switch statement</p>", "author": "APickledWalrus", "createdAt": "2020-07-30T20:34:42Z", "path": "src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/**\n+ * This file is part of Skript.\n+ *\n+ * Skript is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Skript is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Skript.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ *\n+ * Copyright 2011-2017 Peter G\u00fcttinger and contributors\n+ */\n+package ch.njol.skript.expressions;\n+\n+import org.bukkit.entity.AbstractArrow;\n+import org.bukkit.entity.Arrow;\n+import org.bukkit.entity.Projectile;\n+import org.bukkit.event.Event;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+import ch.njol.skript.Skript;\n+import ch.njol.skript.classes.Changer.ChangeMode;\n+import ch.njol.skript.doc.Description;\n+import ch.njol.skript.doc.Examples;\n+import ch.njol.skript.doc.Name;\n+import ch.njol.skript.doc.Since;\n+import ch.njol.skript.expressions.base.SimplePropertyExpression;\n+import ch.njol.util.coll.CollectionUtils;\n+\n+@Name(\"Arrow Pierce Level\")\n+@Description(\"An arrow's pierce level.\")\n+@Examples({\"on shoot:\",\n+\t\"\\tevent-projectile is an arrow\",\n+\t\"\\tset arrow pierce level of event-projectile to 5\"})\n+@Since(\"INSERT VERSION\")\n+public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, Number> {\n+\t\n+\tfinal static boolean abstractArrowExists = Skript.classExists(\"org.bukkit.entity.AbstractArrow\");\n+\t\n+\tstatic {\n+\t\tif (abstractArrowExists || Skript.methodExists(Arrow.class, \"getPierceLevel\"))\n+\t\t\tregister(ExprArrowPierceLevel.class, Number.class, \"[the] arrow pierce level\", \"projectiles\");\n+\t}\n+\t\n+\t@Nullable\n+\t@Override\n+\tpublic Number convert(Projectile arrow) {\n+\t\tif (abstractArrowExists)\n+\t\t\treturn arrow instanceof AbstractArrow ? ((AbstractArrow) arrow).getPierceLevel() : null;\n+\t\treturn arrow instanceof Arrow ? ((Arrow) arrow).getPierceLevel() : null;\n+\t}\n+\t\n+\t@Nullable\n+\t@Override\n+\tpublic Class<?>[] acceptChange(ChangeMode mode) {\n+\t\treturn (mode == ChangeMode.DELETE || mode == ChangeMode.REMOVE_ALL) ? null : CollectionUtils.array(Number.class);", "originalCommit": "0aa195d593628e0ad712b26a043a2391c5cd76a3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5553e672cbeda0a6b3eef7ca016834c58f3ed93a", "changed_code": [{"header": "diff --git a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\nindex f9d9ab5f..a3e7d05e 100644\n--- a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n+++ b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n", "chunk": "@@ -60,58 +60,51 @@ public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, N\n \t@Nullable\n \t@Override\n \tpublic Class<?>[] acceptChange(ChangeMode mode) {\n-\t\treturn (mode == ChangeMode.DELETE || mode == ChangeMode.REMOVE_ALL) ? null : CollectionUtils.array(Number.class);\n+\t\tswitch (mode) {\n+\t\t\tcase SET:\n+\t\t\tcase RESET:\n+\t\t\tcase REMOVE:\n+\t\t\tcase ADD:\n+\t\t\t\treturn CollectionUtils.array(Number.class);\n+\t\t\tdefault:\n+\t\t\t\treturn null;\n+\t\t}\n \t}\n \t\n \t@Override\n \tpublic void change(Event e, @Nullable Object[] delta, ChangeMode mode) {\n \t\tint strength = delta != null ? Math.max(((Number) delta[0]).intValue(), 0) : 0;\n+\t\tint mod = 1;\n \t\tswitch (mode) {\n \t\t\tcase REMOVE:\n-\t\t\t\tif (abstractArrowExists)\n-\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n-\t\t\t\t\t\tif (entity instanceof AbstractArrow) {\n-\t\t\t\t\t\t\tAbstractArrow abstractArrow = (AbstractArrow) entity;\n-\t\t\t\t\t\t\tint dmg = Math.round(abstractArrow.getPierceLevel() - strength);\n-\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n-\t\t\t\t\t\t\tabstractArrow.setPierceLevel(dmg);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\telse\n-\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n-\t\t\t\t\t\tif (entity instanceof Arrow) {\n-\t\t\t\t\t\t\tArrow arrow = (Arrow) entity;\n-\t\t\t\t\t\t\tint dmg = Math.round(arrow.getPierceLevel() - strength);\n-\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n-\t\t\t\t\t\t\tarrow.setPierceLevel(dmg);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\tbreak;\n+\t\t\t\tmod = -1;\n \t\t\tcase ADD:\n-\t\t\t\tif (abstractArrowExists)\n+\t\t\t\tif (abstractArrowExists) {\n \t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n \t\t\t\t\t\tif (entity instanceof AbstractArrow) {\n \t\t\t\t\t\t\tAbstractArrow abstractArrow = (AbstractArrow) entity;\n-\t\t\t\t\t\t\tint dmg = Math.round(abstractArrow.getPierceLevel() + strength);\n+\t\t\t\t\t\t\tint dmg = Math.round(abstractArrow.getPierceLevel() + strength * mod);\n \t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n \t\t\t\t\t\t\tabstractArrow.setPierceLevel(dmg);\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n-\t\t\t\telse\n+\t\t\t\t} else {\n \t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n \t\t\t\t\t\tif (entity instanceof Arrow) {\n \t\t\t\t\t\t\tArrow arrow = (Arrow) entity;\n-\t\t\t\t\t\t\tint dmg = Math.round(arrow.getPierceLevel() + strength);\n+\t\t\t\t\t\t\tint dmg = Math.round(arrow.getPierceLevel() + strength * mod);\n \t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n \t\t\t\t\t\t\tarrow.setPierceLevel(dmg);\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n+\t\t\t\t}\n \t\t\t\tbreak;\n \t\t\tcase RESET:\n \t\t\tcase SET:\n \t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n \t\t\t\t\tif (abstractArrowExists) {\n-\t\t\t\t\t\tif (entity instanceof AbstractArrow) ((AbstractArrow) entity).setPierceLevel(strength);\n+\t\t\t\t\t\tif (entity instanceof AbstractArrow)\n+\t\t\t\t\t\t\t((AbstractArrow) entity).setPierceLevel(strength);\n \t\t\t\t\t} else if (entity instanceof Arrow) {\n \t\t\t\t\t\t((Arrow) entity).setPierceLevel(strength);\n \t\t\t\t\t}\n", "next_change": {"commit": "72675726749f9cb5d103c040df33073b42e8b442", "changed_code": [{"header": "diff --git a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\nindex a3e7d05e..43e83652 100644\n--- a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n+++ b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n", "chunk": "@@ -110,6 +110,8 @@ public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, N\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t\tbreak;\n+\t\t\tdefault:\n+\t\t\t\tassert false;\n \t\t}\n \t}\n \t\n", "next_change": {"commit": "aa17d7a45b30b92b759d72bacfd8899030117a9c", "changed_code": [{"header": "diff --git a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\nindex 43e83652..a47b9cb9 100644\n--- a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n+++ b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n", "chunk": "@@ -79,35 +78,19 @@ public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, N\n \t\t\tcase REMOVE:\n \t\t\t\tmod = -1;\n \t\t\tcase ADD:\n-\t\t\t\tif (abstractArrowExists) {\n-\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n-\t\t\t\t\t\tif (entity instanceof AbstractArrow) {\n-\t\t\t\t\t\t\tAbstractArrow abstractArrow = (AbstractArrow) entity;\n-\t\t\t\t\t\t\tint dmg = Math.round(abstractArrow.getPierceLevel() + strength * mod);\n-\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n-\t\t\t\t\t\t\tabstractArrow.setPierceLevel(dmg);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t} else {\n-\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n-\t\t\t\t\t\tif (entity instanceof Arrow) {\n-\t\t\t\t\t\t\tArrow arrow = (Arrow) entity;\n-\t\t\t\t\t\t\tint dmg = Math.round(arrow.getPierceLevel() + strength * mod);\n-\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n-\t\t\t\t\t\t\tarrow.setPierceLevel(dmg);\n-\t\t\t\t\t\t}\n+\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n+\t\t\t\t\tif (entity instanceof Arrow) {\n+\t\t\t\t\t\tArrow arrow = (Arrow) entity;\n+\t\t\t\t\t\tint dmg = Math.round(arrow.getPierceLevel() + strength * mod);\n+\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n+\t\t\t\t\t\tarrow.setPierceLevel(dmg);\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t\tbreak;\n \t\t\tcase RESET:\n \t\t\tcase SET:\n \t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n-\t\t\t\t\tif (abstractArrowExists) {\n-\t\t\t\t\t\tif (entity instanceof AbstractArrow)\n-\t\t\t\t\t\t\t((AbstractArrow) entity).setPierceLevel(strength);\n-\t\t\t\t\t} else if (entity instanceof Arrow) {\n-\t\t\t\t\t\t((Arrow) entity).setPierceLevel(strength);\n-\t\t\t\t\t}\n+\t\t\t\t\t((Arrow) entity).setPierceLevel(strength);\n \t\t\t\t}\n \t\t\t\tbreak;\n \t\t\tdefault:\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "525371c84bd8c59408998924e5841b94fc1bbd07", "changed_code": [{"header": "diff --git a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\nindex f9d9ab5f..5574dc46 100644\n--- a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n+++ b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n", "chunk": "@@ -39,84 +39,62 @@ import ch.njol.util.coll.CollectionUtils;\n @Examples({\"on shoot:\",\n \t\"\\tevent-projectile is an arrow\",\n \t\"\\tset arrow pierce level of event-projectile to 5\"})\n+@RequiredPlugins(\"Minecraft 1.14+\")\n @Since(\"INSERT VERSION\")\n public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, Number> {\n \t\n-\tfinal static boolean abstractArrowExists = Skript.classExists(\"org.bukkit.entity.AbstractArrow\");\n+\tprivate final static boolean CAN_USE_PIERCE = Skript.methodExists(Arrow.class, \"getPierceLevel\");\n \t\n \tstatic {\n-\t\tif (abstractArrowExists || Skript.methodExists(Arrow.class, \"getPierceLevel\"))\n+\t\tif (CAN_USE_PIERCE)\n \t\t\tregister(ExprArrowPierceLevel.class, Number.class, \"[the] arrow pierce level\", \"projectiles\");\n \t}\n \t\n \t@Nullable\n \t@Override\n \tpublic Number convert(Projectile arrow) {\n-\t\tif (abstractArrowExists)\n-\t\t\treturn arrow instanceof AbstractArrow ? ((AbstractArrow) arrow).getPierceLevel() : null;\n-\t\treturn arrow instanceof Arrow ? ((Arrow) arrow).getPierceLevel() : null;\n+\t\treturn ((Arrow) arrow).getPierceLevel();\n \t}\n \t\n \t@Nullable\n \t@Override\n \tpublic Class<?>[] acceptChange(ChangeMode mode) {\n-\t\treturn (mode == ChangeMode.DELETE || mode == ChangeMode.REMOVE_ALL) ? null : CollectionUtils.array(Number.class);\n+\t\tswitch (mode) {\n+\t\t\tcase SET:\n+\t\t\tcase RESET:\n+\t\t\tcase REMOVE:\n+\t\t\tcase ADD:\n+\t\t\t\treturn CollectionUtils.array(Number.class);\n+\t\t\tdefault:\n+\t\t\t\treturn null;\n+\t\t}\n \t}\n \t\n \t@Override\n \tpublic void change(Event e, @Nullable Object[] delta, ChangeMode mode) {\n \t\tint strength = delta != null ? Math.max(((Number) delta[0]).intValue(), 0) : 0;\n+\t\tint mod = 1;\n \t\tswitch (mode) {\n \t\t\tcase REMOVE:\n-\t\t\t\tif (abstractArrowExists)\n-\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n-\t\t\t\t\t\tif (entity instanceof AbstractArrow) {\n-\t\t\t\t\t\t\tAbstractArrow abstractArrow = (AbstractArrow) entity;\n-\t\t\t\t\t\t\tint dmg = Math.round(abstractArrow.getPierceLevel() - strength);\n-\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n-\t\t\t\t\t\t\tabstractArrow.setPierceLevel(dmg);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\telse\n-\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n-\t\t\t\t\t\tif (entity instanceof Arrow) {\n-\t\t\t\t\t\t\tArrow arrow = (Arrow) entity;\n-\t\t\t\t\t\t\tint dmg = Math.round(arrow.getPierceLevel() - strength);\n-\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n-\t\t\t\t\t\t\tarrow.setPierceLevel(dmg);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\tbreak;\n+\t\t\t\tmod = -1;\n \t\t\tcase ADD:\n-\t\t\t\tif (abstractArrowExists)\n-\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n-\t\t\t\t\t\tif (entity instanceof AbstractArrow) {\n-\t\t\t\t\t\t\tAbstractArrow abstractArrow = (AbstractArrow) entity;\n-\t\t\t\t\t\t\tint dmg = Math.round(abstractArrow.getPierceLevel() + strength);\n-\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n-\t\t\t\t\t\t\tabstractArrow.setPierceLevel(dmg);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\telse\n-\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n-\t\t\t\t\t\tif (entity instanceof Arrow) {\n-\t\t\t\t\t\t\tArrow arrow = (Arrow) entity;\n-\t\t\t\t\t\t\tint dmg = Math.round(arrow.getPierceLevel() + strength);\n-\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n-\t\t\t\t\t\t\tarrow.setPierceLevel(dmg);\n-\t\t\t\t\t\t}\n+\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n+\t\t\t\t\tif (entity instanceof Arrow) {\n+\t\t\t\t\t\tArrow arrow = (Arrow) entity;\n+\t\t\t\t\t\tint dmg = Math.round(arrow.getPierceLevel() + strength * mod);\n+\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n+\t\t\t\t\t\tarrow.setPierceLevel(dmg);\n \t\t\t\t\t}\n+\t\t\t\t}\n \t\t\t\tbreak;\n \t\t\tcase RESET:\n \t\t\tcase SET:\n \t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n-\t\t\t\t\tif (abstractArrowExists) {\n-\t\t\t\t\t\tif (entity instanceof AbstractArrow) ((AbstractArrow) entity).setPierceLevel(strength);\n-\t\t\t\t\t} else if (entity instanceof Arrow) {\n-\t\t\t\t\t\t((Arrow) entity).setPierceLevel(strength);\n-\t\t\t\t\t}\n+\t\t\t\t\t((Arrow) entity).setPierceLevel(strength);\n \t\t\t\t}\n \t\t\t\tbreak;\n+\t\t\tdefault:\n+\t\t\t\tassert false;\n \t\t}\n \t}\n \t\n", "next_change": {"commit": "1abd53beec4167993dd4245050c137d9d678f6c5", "changed_code": [{"header": "diff --git a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\nindex 5574dc46..39480e88 100644\n--- a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n+++ b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n", "chunk": "@@ -99,8 +99,8 @@ public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, N\n \t}\n \t\n \t@Override\n-\tpublic Class<? extends Number> getReturnType() {\n-\t\treturn Number.class;\n+\tpublic Class<? extends Long> getReturnType() {\n+\t\treturn Long.class;\n \t}\n \t\n \t@Override\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "525371c84bd8c59408998924e5841b94fc1bbd07", "message": "Merge commit", "committedDate": null}, {"oid": "4d704c8fbe1e76c97e7b0398b26f21c5401ce300", "committedDate": "2020-10-22 16:21:37 -0700", "message": "Prepare for release of 2.5.1 (#3488)"}, {"oid": "1abd53beec4167993dd4245050c137d9d678f6c5", "committedDate": "2021-08-14 18:58:58 +0200", "message": "Fix number/integer stuff (#4095)"}, {"oid": "452bb05e905526388c0831911b877bd350210331", "committedDate": "2022-04-18 17:28:17 +0200", "message": "Fix some extra and missing [the]'s (#4604)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI1NTYwMQ==", "url": "https://github.com/SkriptLang/Skript/pull/3206#discussion_r463255601", "body": "Curly brackets on the IF statements :sunglasses:", "bodyText": "Curly brackets on the IF statements \ud83d\ude0e", "bodyHTML": "<p dir=\"auto\">Curly brackets on the IF statements <g-emoji class=\"g-emoji\" alias=\"sunglasses\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f60e.png\">\ud83d\ude0e</g-emoji></p>", "author": "APickledWalrus", "createdAt": "2020-07-30T20:35:12Z", "path": "src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/**\n+ * This file is part of Skript.\n+ *\n+ * Skript is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Skript is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Skript.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ *\n+ * Copyright 2011-2017 Peter G\u00fcttinger and contributors\n+ */\n+package ch.njol.skript.expressions;\n+\n+import org.bukkit.entity.AbstractArrow;\n+import org.bukkit.entity.Arrow;\n+import org.bukkit.entity.Projectile;\n+import org.bukkit.event.Event;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+import ch.njol.skript.Skript;\n+import ch.njol.skript.classes.Changer.ChangeMode;\n+import ch.njol.skript.doc.Description;\n+import ch.njol.skript.doc.Examples;\n+import ch.njol.skript.doc.Name;\n+import ch.njol.skript.doc.Since;\n+import ch.njol.skript.expressions.base.SimplePropertyExpression;\n+import ch.njol.util.coll.CollectionUtils;\n+\n+@Name(\"Arrow Pierce Level\")\n+@Description(\"An arrow's pierce level.\")\n+@Examples({\"on shoot:\",\n+\t\"\\tevent-projectile is an arrow\",\n+\t\"\\tset arrow pierce level of event-projectile to 5\"})\n+@Since(\"INSERT VERSION\")\n+public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, Number> {\n+\t\n+\tfinal static boolean abstractArrowExists = Skript.classExists(\"org.bukkit.entity.AbstractArrow\");\n+\t\n+\tstatic {\n+\t\tif (abstractArrowExists || Skript.methodExists(Arrow.class, \"getPierceLevel\"))\n+\t\t\tregister(ExprArrowPierceLevel.class, Number.class, \"[the] arrow pierce level\", \"projectiles\");\n+\t}\n+\t\n+\t@Nullable\n+\t@Override\n+\tpublic Number convert(Projectile arrow) {\n+\t\tif (abstractArrowExists)\n+\t\t\treturn arrow instanceof AbstractArrow ? ((AbstractArrow) arrow).getPierceLevel() : null;\n+\t\treturn arrow instanceof Arrow ? ((Arrow) arrow).getPierceLevel() : null;\n+\t}\n+\t\n+\t@Nullable\n+\t@Override\n+\tpublic Class<?>[] acceptChange(ChangeMode mode) {\n+\t\treturn (mode == ChangeMode.DELETE || mode == ChangeMode.REMOVE_ALL) ? null : CollectionUtils.array(Number.class);\n+\t}\n+\t\n+\t@Override\n+\tpublic void change(Event e, @Nullable Object[] delta, ChangeMode mode) {\n+\t\tint strength = delta != null ? Math.max(((Number) delta[0]).intValue(), 0) : 0;\n+\t\tswitch (mode) {\n+\t\t\tcase REMOVE:\n+\t\t\t\tif (abstractArrowExists)", "originalCommit": "0aa195d593628e0ad712b26a043a2391c5cd76a3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5553e672cbeda0a6b3eef7ca016834c58f3ed93a", "changed_code": [{"header": "diff --git a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\nindex f9d9ab5f..a3e7d05e 100644\n--- a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n+++ b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n", "chunk": "@@ -60,58 +60,51 @@ public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, N\n \t@Nullable\n \t@Override\n \tpublic Class<?>[] acceptChange(ChangeMode mode) {\n-\t\treturn (mode == ChangeMode.DELETE || mode == ChangeMode.REMOVE_ALL) ? null : CollectionUtils.array(Number.class);\n+\t\tswitch (mode) {\n+\t\t\tcase SET:\n+\t\t\tcase RESET:\n+\t\t\tcase REMOVE:\n+\t\t\tcase ADD:\n+\t\t\t\treturn CollectionUtils.array(Number.class);\n+\t\t\tdefault:\n+\t\t\t\treturn null;\n+\t\t}\n \t}\n \t\n \t@Override\n \tpublic void change(Event e, @Nullable Object[] delta, ChangeMode mode) {\n \t\tint strength = delta != null ? Math.max(((Number) delta[0]).intValue(), 0) : 0;\n+\t\tint mod = 1;\n \t\tswitch (mode) {\n \t\t\tcase REMOVE:\n-\t\t\t\tif (abstractArrowExists)\n-\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n-\t\t\t\t\t\tif (entity instanceof AbstractArrow) {\n-\t\t\t\t\t\t\tAbstractArrow abstractArrow = (AbstractArrow) entity;\n-\t\t\t\t\t\t\tint dmg = Math.round(abstractArrow.getPierceLevel() - strength);\n-\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n-\t\t\t\t\t\t\tabstractArrow.setPierceLevel(dmg);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\telse\n-\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n-\t\t\t\t\t\tif (entity instanceof Arrow) {\n-\t\t\t\t\t\t\tArrow arrow = (Arrow) entity;\n-\t\t\t\t\t\t\tint dmg = Math.round(arrow.getPierceLevel() - strength);\n-\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n-\t\t\t\t\t\t\tarrow.setPierceLevel(dmg);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\tbreak;\n+\t\t\t\tmod = -1;\n \t\t\tcase ADD:\n-\t\t\t\tif (abstractArrowExists)\n+\t\t\t\tif (abstractArrowExists) {\n \t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n \t\t\t\t\t\tif (entity instanceof AbstractArrow) {\n \t\t\t\t\t\t\tAbstractArrow abstractArrow = (AbstractArrow) entity;\n-\t\t\t\t\t\t\tint dmg = Math.round(abstractArrow.getPierceLevel() + strength);\n+\t\t\t\t\t\t\tint dmg = Math.round(abstractArrow.getPierceLevel() + strength * mod);\n \t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n \t\t\t\t\t\t\tabstractArrow.setPierceLevel(dmg);\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n-\t\t\t\telse\n+\t\t\t\t} else {\n \t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n \t\t\t\t\t\tif (entity instanceof Arrow) {\n \t\t\t\t\t\t\tArrow arrow = (Arrow) entity;\n-\t\t\t\t\t\t\tint dmg = Math.round(arrow.getPierceLevel() + strength);\n+\t\t\t\t\t\t\tint dmg = Math.round(arrow.getPierceLevel() + strength * mod);\n \t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n \t\t\t\t\t\t\tarrow.setPierceLevel(dmg);\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n+\t\t\t\t}\n \t\t\t\tbreak;\n \t\t\tcase RESET:\n \t\t\tcase SET:\n \t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n \t\t\t\t\tif (abstractArrowExists) {\n-\t\t\t\t\t\tif (entity instanceof AbstractArrow) ((AbstractArrow) entity).setPierceLevel(strength);\n+\t\t\t\t\t\tif (entity instanceof AbstractArrow)\n+\t\t\t\t\t\t\t((AbstractArrow) entity).setPierceLevel(strength);\n \t\t\t\t\t} else if (entity instanceof Arrow) {\n \t\t\t\t\t\t((Arrow) entity).setPierceLevel(strength);\n \t\t\t\t\t}\n", "next_change": {"commit": "72675726749f9cb5d103c040df33073b42e8b442", "changed_code": [{"header": "diff --git a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\nindex a3e7d05e..43e83652 100644\n--- a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n+++ b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n", "chunk": "@@ -110,6 +110,8 @@ public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, N\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t\tbreak;\n+\t\t\tdefault:\n+\t\t\t\tassert false;\n \t\t}\n \t}\n \t\n", "next_change": {"commit": "aa17d7a45b30b92b759d72bacfd8899030117a9c", "changed_code": [{"header": "diff --git a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\nindex 43e83652..a47b9cb9 100644\n--- a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n+++ b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n", "chunk": "@@ -79,35 +78,19 @@ public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, N\n \t\t\tcase REMOVE:\n \t\t\t\tmod = -1;\n \t\t\tcase ADD:\n-\t\t\t\tif (abstractArrowExists) {\n-\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n-\t\t\t\t\t\tif (entity instanceof AbstractArrow) {\n-\t\t\t\t\t\t\tAbstractArrow abstractArrow = (AbstractArrow) entity;\n-\t\t\t\t\t\t\tint dmg = Math.round(abstractArrow.getPierceLevel() + strength * mod);\n-\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n-\t\t\t\t\t\t\tabstractArrow.setPierceLevel(dmg);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t} else {\n-\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n-\t\t\t\t\t\tif (entity instanceof Arrow) {\n-\t\t\t\t\t\t\tArrow arrow = (Arrow) entity;\n-\t\t\t\t\t\t\tint dmg = Math.round(arrow.getPierceLevel() + strength * mod);\n-\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n-\t\t\t\t\t\t\tarrow.setPierceLevel(dmg);\n-\t\t\t\t\t\t}\n+\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n+\t\t\t\t\tif (entity instanceof Arrow) {\n+\t\t\t\t\t\tArrow arrow = (Arrow) entity;\n+\t\t\t\t\t\tint dmg = Math.round(arrow.getPierceLevel() + strength * mod);\n+\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n+\t\t\t\t\t\tarrow.setPierceLevel(dmg);\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t\tbreak;\n \t\t\tcase RESET:\n \t\t\tcase SET:\n \t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n-\t\t\t\t\tif (abstractArrowExists) {\n-\t\t\t\t\t\tif (entity instanceof AbstractArrow)\n-\t\t\t\t\t\t\t((AbstractArrow) entity).setPierceLevel(strength);\n-\t\t\t\t\t} else if (entity instanceof Arrow) {\n-\t\t\t\t\t\t((Arrow) entity).setPierceLevel(strength);\n-\t\t\t\t\t}\n+\t\t\t\t\t((Arrow) entity).setPierceLevel(strength);\n \t\t\t\t}\n \t\t\t\tbreak;\n \t\t\tdefault:\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "525371c84bd8c59408998924e5841b94fc1bbd07", "changed_code": [{"header": "diff --git a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\nindex f9d9ab5f..5574dc46 100644\n--- a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n+++ b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n", "chunk": "@@ -39,84 +39,62 @@ import ch.njol.util.coll.CollectionUtils;\n @Examples({\"on shoot:\",\n \t\"\\tevent-projectile is an arrow\",\n \t\"\\tset arrow pierce level of event-projectile to 5\"})\n+@RequiredPlugins(\"Minecraft 1.14+\")\n @Since(\"INSERT VERSION\")\n public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, Number> {\n \t\n-\tfinal static boolean abstractArrowExists = Skript.classExists(\"org.bukkit.entity.AbstractArrow\");\n+\tprivate final static boolean CAN_USE_PIERCE = Skript.methodExists(Arrow.class, \"getPierceLevel\");\n \t\n \tstatic {\n-\t\tif (abstractArrowExists || Skript.methodExists(Arrow.class, \"getPierceLevel\"))\n+\t\tif (CAN_USE_PIERCE)\n \t\t\tregister(ExprArrowPierceLevel.class, Number.class, \"[the] arrow pierce level\", \"projectiles\");\n \t}\n \t\n \t@Nullable\n \t@Override\n \tpublic Number convert(Projectile arrow) {\n-\t\tif (abstractArrowExists)\n-\t\t\treturn arrow instanceof AbstractArrow ? ((AbstractArrow) arrow).getPierceLevel() : null;\n-\t\treturn arrow instanceof Arrow ? ((Arrow) arrow).getPierceLevel() : null;\n+\t\treturn ((Arrow) arrow).getPierceLevel();\n \t}\n \t\n \t@Nullable\n \t@Override\n \tpublic Class<?>[] acceptChange(ChangeMode mode) {\n-\t\treturn (mode == ChangeMode.DELETE || mode == ChangeMode.REMOVE_ALL) ? null : CollectionUtils.array(Number.class);\n+\t\tswitch (mode) {\n+\t\t\tcase SET:\n+\t\t\tcase RESET:\n+\t\t\tcase REMOVE:\n+\t\t\tcase ADD:\n+\t\t\t\treturn CollectionUtils.array(Number.class);\n+\t\t\tdefault:\n+\t\t\t\treturn null;\n+\t\t}\n \t}\n \t\n \t@Override\n \tpublic void change(Event e, @Nullable Object[] delta, ChangeMode mode) {\n \t\tint strength = delta != null ? Math.max(((Number) delta[0]).intValue(), 0) : 0;\n+\t\tint mod = 1;\n \t\tswitch (mode) {\n \t\t\tcase REMOVE:\n-\t\t\t\tif (abstractArrowExists)\n-\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n-\t\t\t\t\t\tif (entity instanceof AbstractArrow) {\n-\t\t\t\t\t\t\tAbstractArrow abstractArrow = (AbstractArrow) entity;\n-\t\t\t\t\t\t\tint dmg = Math.round(abstractArrow.getPierceLevel() - strength);\n-\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n-\t\t\t\t\t\t\tabstractArrow.setPierceLevel(dmg);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\telse\n-\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n-\t\t\t\t\t\tif (entity instanceof Arrow) {\n-\t\t\t\t\t\t\tArrow arrow = (Arrow) entity;\n-\t\t\t\t\t\t\tint dmg = Math.round(arrow.getPierceLevel() - strength);\n-\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n-\t\t\t\t\t\t\tarrow.setPierceLevel(dmg);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\tbreak;\n+\t\t\t\tmod = -1;\n \t\t\tcase ADD:\n-\t\t\t\tif (abstractArrowExists)\n-\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n-\t\t\t\t\t\tif (entity instanceof AbstractArrow) {\n-\t\t\t\t\t\t\tAbstractArrow abstractArrow = (AbstractArrow) entity;\n-\t\t\t\t\t\t\tint dmg = Math.round(abstractArrow.getPierceLevel() + strength);\n-\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n-\t\t\t\t\t\t\tabstractArrow.setPierceLevel(dmg);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\telse\n-\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n-\t\t\t\t\t\tif (entity instanceof Arrow) {\n-\t\t\t\t\t\t\tArrow arrow = (Arrow) entity;\n-\t\t\t\t\t\t\tint dmg = Math.round(arrow.getPierceLevel() + strength);\n-\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n-\t\t\t\t\t\t\tarrow.setPierceLevel(dmg);\n-\t\t\t\t\t\t}\n+\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n+\t\t\t\t\tif (entity instanceof Arrow) {\n+\t\t\t\t\t\tArrow arrow = (Arrow) entity;\n+\t\t\t\t\t\tint dmg = Math.round(arrow.getPierceLevel() + strength * mod);\n+\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n+\t\t\t\t\t\tarrow.setPierceLevel(dmg);\n \t\t\t\t\t}\n+\t\t\t\t}\n \t\t\t\tbreak;\n \t\t\tcase RESET:\n \t\t\tcase SET:\n \t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n-\t\t\t\t\tif (abstractArrowExists) {\n-\t\t\t\t\t\tif (entity instanceof AbstractArrow) ((AbstractArrow) entity).setPierceLevel(strength);\n-\t\t\t\t\t} else if (entity instanceof Arrow) {\n-\t\t\t\t\t\t((Arrow) entity).setPierceLevel(strength);\n-\t\t\t\t\t}\n+\t\t\t\t\t((Arrow) entity).setPierceLevel(strength);\n \t\t\t\t}\n \t\t\t\tbreak;\n+\t\t\tdefault:\n+\t\t\t\tassert false;\n \t\t}\n \t}\n \t\n", "next_change": {"commit": "1abd53beec4167993dd4245050c137d9d678f6c5", "changed_code": [{"header": "diff --git a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\nindex 5574dc46..39480e88 100644\n--- a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n+++ b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n", "chunk": "@@ -99,8 +99,8 @@ public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, N\n \t}\n \t\n \t@Override\n-\tpublic Class<? extends Number> getReturnType() {\n-\t\treturn Number.class;\n+\tpublic Class<? extends Long> getReturnType() {\n+\t\treturn Long.class;\n \t}\n \t\n \t@Override\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "525371c84bd8c59408998924e5841b94fc1bbd07", "message": "Merge commit", "committedDate": null}, {"oid": "4d704c8fbe1e76c97e7b0398b26f21c5401ce300", "committedDate": "2020-10-22 16:21:37 -0700", "message": "Prepare for release of 2.5.1 (#3488)"}, {"oid": "1abd53beec4167993dd4245050c137d9d678f6c5", "committedDate": "2021-08-14 18:58:58 +0200", "message": "Fix number/integer stuff (#4095)"}, {"oid": "452bb05e905526388c0831911b877bd350210331", "committedDate": "2022-04-18 17:28:17 +0200", "message": "Fix some extra and missing [the]'s (#4604)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI1NTc2NA==", "url": "https://github.com/SkriptLang/Skript/pull/3206#discussion_r463255764", "body": "IF statement should be on it's own line", "bodyText": "IF statement should be on it's own line", "bodyHTML": "<p dir=\"auto\">IF statement should be on it's own line</p>", "author": "APickledWalrus", "createdAt": "2020-07-30T20:35:30Z", "path": "src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/**\n+ * This file is part of Skript.\n+ *\n+ * Skript is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Skript is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Skript.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ *\n+ * Copyright 2011-2017 Peter G\u00fcttinger and contributors\n+ */\n+package ch.njol.skript.expressions;\n+\n+import org.bukkit.entity.AbstractArrow;\n+import org.bukkit.entity.Arrow;\n+import org.bukkit.entity.Projectile;\n+import org.bukkit.event.Event;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+import ch.njol.skript.Skript;\n+import ch.njol.skript.classes.Changer.ChangeMode;\n+import ch.njol.skript.doc.Description;\n+import ch.njol.skript.doc.Examples;\n+import ch.njol.skript.doc.Name;\n+import ch.njol.skript.doc.Since;\n+import ch.njol.skript.expressions.base.SimplePropertyExpression;\n+import ch.njol.util.coll.CollectionUtils;\n+\n+@Name(\"Arrow Pierce Level\")\n+@Description(\"An arrow's pierce level.\")\n+@Examples({\"on shoot:\",\n+\t\"\\tevent-projectile is an arrow\",\n+\t\"\\tset arrow pierce level of event-projectile to 5\"})\n+@Since(\"INSERT VERSION\")\n+public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, Number> {\n+\t\n+\tfinal static boolean abstractArrowExists = Skript.classExists(\"org.bukkit.entity.AbstractArrow\");\n+\t\n+\tstatic {\n+\t\tif (abstractArrowExists || Skript.methodExists(Arrow.class, \"getPierceLevel\"))\n+\t\t\tregister(ExprArrowPierceLevel.class, Number.class, \"[the] arrow pierce level\", \"projectiles\");\n+\t}\n+\t\n+\t@Nullable\n+\t@Override\n+\tpublic Number convert(Projectile arrow) {\n+\t\tif (abstractArrowExists)\n+\t\t\treturn arrow instanceof AbstractArrow ? ((AbstractArrow) arrow).getPierceLevel() : null;\n+\t\treturn arrow instanceof Arrow ? ((Arrow) arrow).getPierceLevel() : null;\n+\t}\n+\t\n+\t@Nullable\n+\t@Override\n+\tpublic Class<?>[] acceptChange(ChangeMode mode) {\n+\t\treturn (mode == ChangeMode.DELETE || mode == ChangeMode.REMOVE_ALL) ? null : CollectionUtils.array(Number.class);\n+\t}\n+\t\n+\t@Override\n+\tpublic void change(Event e, @Nullable Object[] delta, ChangeMode mode) {\n+\t\tint strength = delta != null ? Math.max(((Number) delta[0]).intValue(), 0) : 0;\n+\t\tswitch (mode) {\n+\t\t\tcase REMOVE:\n+\t\t\t\tif (abstractArrowExists)\n+\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n+\t\t\t\t\t\tif (entity instanceof AbstractArrow) {\n+\t\t\t\t\t\t\tAbstractArrow abstractArrow = (AbstractArrow) entity;\n+\t\t\t\t\t\t\tint dmg = Math.round(abstractArrow.getPierceLevel() - strength);\n+\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n+\t\t\t\t\t\t\tabstractArrow.setPierceLevel(dmg);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\telse\n+\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n+\t\t\t\t\t\tif (entity instanceof Arrow) {\n+\t\t\t\t\t\t\tArrow arrow = (Arrow) entity;\n+\t\t\t\t\t\t\tint dmg = Math.round(arrow.getPierceLevel() - strength);\n+\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n+\t\t\t\t\t\t\tarrow.setPierceLevel(dmg);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\tbreak;\n+\t\t\tcase ADD:\n+\t\t\t\tif (abstractArrowExists)\n+\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n+\t\t\t\t\t\tif (entity instanceof AbstractArrow) {\n+\t\t\t\t\t\t\tAbstractArrow abstractArrow = (AbstractArrow) entity;\n+\t\t\t\t\t\t\tint dmg = Math.round(abstractArrow.getPierceLevel() + strength);\n+\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n+\t\t\t\t\t\t\tabstractArrow.setPierceLevel(dmg);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\telse\n+\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n+\t\t\t\t\t\tif (entity instanceof Arrow) {\n+\t\t\t\t\t\t\tArrow arrow = (Arrow) entity;\n+\t\t\t\t\t\t\tint dmg = Math.round(arrow.getPierceLevel() + strength);\n+\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n+\t\t\t\t\t\t\tarrow.setPierceLevel(dmg);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\tbreak;\n+\t\t\tcase RESET:\n+\t\t\tcase SET:\n+\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n+\t\t\t\t\tif (abstractArrowExists) {\n+\t\t\t\t\t\tif (entity instanceof AbstractArrow) ((AbstractArrow) entity).setPierceLevel(strength);", "originalCommit": "0aa195d593628e0ad712b26a043a2391c5cd76a3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5553e672cbeda0a6b3eef7ca016834c58f3ed93a", "changed_code": [{"header": "diff --git a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\nindex f9d9ab5f..a3e7d05e 100644\n--- a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n+++ b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n", "chunk": "@@ -60,58 +60,51 @@ public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, N\n \t@Nullable\n \t@Override\n \tpublic Class<?>[] acceptChange(ChangeMode mode) {\n-\t\treturn (mode == ChangeMode.DELETE || mode == ChangeMode.REMOVE_ALL) ? null : CollectionUtils.array(Number.class);\n+\t\tswitch (mode) {\n+\t\t\tcase SET:\n+\t\t\tcase RESET:\n+\t\t\tcase REMOVE:\n+\t\t\tcase ADD:\n+\t\t\t\treturn CollectionUtils.array(Number.class);\n+\t\t\tdefault:\n+\t\t\t\treturn null;\n+\t\t}\n \t}\n \t\n \t@Override\n \tpublic void change(Event e, @Nullable Object[] delta, ChangeMode mode) {\n \t\tint strength = delta != null ? Math.max(((Number) delta[0]).intValue(), 0) : 0;\n+\t\tint mod = 1;\n \t\tswitch (mode) {\n \t\t\tcase REMOVE:\n-\t\t\t\tif (abstractArrowExists)\n-\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n-\t\t\t\t\t\tif (entity instanceof AbstractArrow) {\n-\t\t\t\t\t\t\tAbstractArrow abstractArrow = (AbstractArrow) entity;\n-\t\t\t\t\t\t\tint dmg = Math.round(abstractArrow.getPierceLevel() - strength);\n-\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n-\t\t\t\t\t\t\tabstractArrow.setPierceLevel(dmg);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\telse\n-\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n-\t\t\t\t\t\tif (entity instanceof Arrow) {\n-\t\t\t\t\t\t\tArrow arrow = (Arrow) entity;\n-\t\t\t\t\t\t\tint dmg = Math.round(arrow.getPierceLevel() - strength);\n-\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n-\t\t\t\t\t\t\tarrow.setPierceLevel(dmg);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\tbreak;\n+\t\t\t\tmod = -1;\n \t\t\tcase ADD:\n-\t\t\t\tif (abstractArrowExists)\n+\t\t\t\tif (abstractArrowExists) {\n \t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n \t\t\t\t\t\tif (entity instanceof AbstractArrow) {\n \t\t\t\t\t\t\tAbstractArrow abstractArrow = (AbstractArrow) entity;\n-\t\t\t\t\t\t\tint dmg = Math.round(abstractArrow.getPierceLevel() + strength);\n+\t\t\t\t\t\t\tint dmg = Math.round(abstractArrow.getPierceLevel() + strength * mod);\n \t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n \t\t\t\t\t\t\tabstractArrow.setPierceLevel(dmg);\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n-\t\t\t\telse\n+\t\t\t\t} else {\n \t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n \t\t\t\t\t\tif (entity instanceof Arrow) {\n \t\t\t\t\t\t\tArrow arrow = (Arrow) entity;\n-\t\t\t\t\t\t\tint dmg = Math.round(arrow.getPierceLevel() + strength);\n+\t\t\t\t\t\t\tint dmg = Math.round(arrow.getPierceLevel() + strength * mod);\n \t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n \t\t\t\t\t\t\tarrow.setPierceLevel(dmg);\n \t\t\t\t\t\t}\n \t\t\t\t\t}\n+\t\t\t\t}\n \t\t\t\tbreak;\n \t\t\tcase RESET:\n \t\t\tcase SET:\n \t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n \t\t\t\t\tif (abstractArrowExists) {\n-\t\t\t\t\t\tif (entity instanceof AbstractArrow) ((AbstractArrow) entity).setPierceLevel(strength);\n+\t\t\t\t\t\tif (entity instanceof AbstractArrow)\n+\t\t\t\t\t\t\t((AbstractArrow) entity).setPierceLevel(strength);\n \t\t\t\t\t} else if (entity instanceof Arrow) {\n \t\t\t\t\t\t((Arrow) entity).setPierceLevel(strength);\n \t\t\t\t\t}\n", "next_change": {"commit": "72675726749f9cb5d103c040df33073b42e8b442", "changed_code": [{"header": "diff --git a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\nindex a3e7d05e..43e83652 100644\n--- a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n+++ b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n", "chunk": "@@ -110,6 +110,8 @@ public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, N\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t\tbreak;\n+\t\t\tdefault:\n+\t\t\t\tassert false;\n \t\t}\n \t}\n \t\n", "next_change": {"commit": "aa17d7a45b30b92b759d72bacfd8899030117a9c", "changed_code": [{"header": "diff --git a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\nindex 43e83652..a47b9cb9 100644\n--- a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n+++ b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n", "chunk": "@@ -79,35 +78,19 @@ public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, N\n \t\t\tcase REMOVE:\n \t\t\t\tmod = -1;\n \t\t\tcase ADD:\n-\t\t\t\tif (abstractArrowExists) {\n-\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n-\t\t\t\t\t\tif (entity instanceof AbstractArrow) {\n-\t\t\t\t\t\t\tAbstractArrow abstractArrow = (AbstractArrow) entity;\n-\t\t\t\t\t\t\tint dmg = Math.round(abstractArrow.getPierceLevel() + strength * mod);\n-\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n-\t\t\t\t\t\t\tabstractArrow.setPierceLevel(dmg);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t} else {\n-\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n-\t\t\t\t\t\tif (entity instanceof Arrow) {\n-\t\t\t\t\t\t\tArrow arrow = (Arrow) entity;\n-\t\t\t\t\t\t\tint dmg = Math.round(arrow.getPierceLevel() + strength * mod);\n-\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n-\t\t\t\t\t\t\tarrow.setPierceLevel(dmg);\n-\t\t\t\t\t\t}\n+\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n+\t\t\t\t\tif (entity instanceof Arrow) {\n+\t\t\t\t\t\tArrow arrow = (Arrow) entity;\n+\t\t\t\t\t\tint dmg = Math.round(arrow.getPierceLevel() + strength * mod);\n+\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n+\t\t\t\t\t\tarrow.setPierceLevel(dmg);\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t\tbreak;\n \t\t\tcase RESET:\n \t\t\tcase SET:\n \t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n-\t\t\t\t\tif (abstractArrowExists) {\n-\t\t\t\t\t\tif (entity instanceof AbstractArrow)\n-\t\t\t\t\t\t\t((AbstractArrow) entity).setPierceLevel(strength);\n-\t\t\t\t\t} else if (entity instanceof Arrow) {\n-\t\t\t\t\t\t((Arrow) entity).setPierceLevel(strength);\n-\t\t\t\t\t}\n+\t\t\t\t\t((Arrow) entity).setPierceLevel(strength);\n \t\t\t\t}\n \t\t\t\tbreak;\n \t\t\tdefault:\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "525371c84bd8c59408998924e5841b94fc1bbd07", "changed_code": [{"header": "diff --git a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\nindex f9d9ab5f..5574dc46 100644\n--- a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n+++ b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n", "chunk": "@@ -39,84 +39,62 @@ import ch.njol.util.coll.CollectionUtils;\n @Examples({\"on shoot:\",\n \t\"\\tevent-projectile is an arrow\",\n \t\"\\tset arrow pierce level of event-projectile to 5\"})\n+@RequiredPlugins(\"Minecraft 1.14+\")\n @Since(\"INSERT VERSION\")\n public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, Number> {\n \t\n-\tfinal static boolean abstractArrowExists = Skript.classExists(\"org.bukkit.entity.AbstractArrow\");\n+\tprivate final static boolean CAN_USE_PIERCE = Skript.methodExists(Arrow.class, \"getPierceLevel\");\n \t\n \tstatic {\n-\t\tif (abstractArrowExists || Skript.methodExists(Arrow.class, \"getPierceLevel\"))\n+\t\tif (CAN_USE_PIERCE)\n \t\t\tregister(ExprArrowPierceLevel.class, Number.class, \"[the] arrow pierce level\", \"projectiles\");\n \t}\n \t\n \t@Nullable\n \t@Override\n \tpublic Number convert(Projectile arrow) {\n-\t\tif (abstractArrowExists)\n-\t\t\treturn arrow instanceof AbstractArrow ? ((AbstractArrow) arrow).getPierceLevel() : null;\n-\t\treturn arrow instanceof Arrow ? ((Arrow) arrow).getPierceLevel() : null;\n+\t\treturn ((Arrow) arrow).getPierceLevel();\n \t}\n \t\n \t@Nullable\n \t@Override\n \tpublic Class<?>[] acceptChange(ChangeMode mode) {\n-\t\treturn (mode == ChangeMode.DELETE || mode == ChangeMode.REMOVE_ALL) ? null : CollectionUtils.array(Number.class);\n+\t\tswitch (mode) {\n+\t\t\tcase SET:\n+\t\t\tcase RESET:\n+\t\t\tcase REMOVE:\n+\t\t\tcase ADD:\n+\t\t\t\treturn CollectionUtils.array(Number.class);\n+\t\t\tdefault:\n+\t\t\t\treturn null;\n+\t\t}\n \t}\n \t\n \t@Override\n \tpublic void change(Event e, @Nullable Object[] delta, ChangeMode mode) {\n \t\tint strength = delta != null ? Math.max(((Number) delta[0]).intValue(), 0) : 0;\n+\t\tint mod = 1;\n \t\tswitch (mode) {\n \t\t\tcase REMOVE:\n-\t\t\t\tif (abstractArrowExists)\n-\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n-\t\t\t\t\t\tif (entity instanceof AbstractArrow) {\n-\t\t\t\t\t\t\tAbstractArrow abstractArrow = (AbstractArrow) entity;\n-\t\t\t\t\t\t\tint dmg = Math.round(abstractArrow.getPierceLevel() - strength);\n-\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n-\t\t\t\t\t\t\tabstractArrow.setPierceLevel(dmg);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\telse\n-\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n-\t\t\t\t\t\tif (entity instanceof Arrow) {\n-\t\t\t\t\t\t\tArrow arrow = (Arrow) entity;\n-\t\t\t\t\t\t\tint dmg = Math.round(arrow.getPierceLevel() - strength);\n-\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n-\t\t\t\t\t\t\tarrow.setPierceLevel(dmg);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\tbreak;\n+\t\t\t\tmod = -1;\n \t\t\tcase ADD:\n-\t\t\t\tif (abstractArrowExists)\n-\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n-\t\t\t\t\t\tif (entity instanceof AbstractArrow) {\n-\t\t\t\t\t\t\tAbstractArrow abstractArrow = (AbstractArrow) entity;\n-\t\t\t\t\t\t\tint dmg = Math.round(abstractArrow.getPierceLevel() + strength);\n-\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n-\t\t\t\t\t\t\tabstractArrow.setPierceLevel(dmg);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\telse\n-\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n-\t\t\t\t\t\tif (entity instanceof Arrow) {\n-\t\t\t\t\t\t\tArrow arrow = (Arrow) entity;\n-\t\t\t\t\t\t\tint dmg = Math.round(arrow.getPierceLevel() + strength);\n-\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n-\t\t\t\t\t\t\tarrow.setPierceLevel(dmg);\n-\t\t\t\t\t\t}\n+\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n+\t\t\t\t\tif (entity instanceof Arrow) {\n+\t\t\t\t\t\tArrow arrow = (Arrow) entity;\n+\t\t\t\t\t\tint dmg = Math.round(arrow.getPierceLevel() + strength * mod);\n+\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n+\t\t\t\t\t\tarrow.setPierceLevel(dmg);\n \t\t\t\t\t}\n+\t\t\t\t}\n \t\t\t\tbreak;\n \t\t\tcase RESET:\n \t\t\tcase SET:\n \t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n-\t\t\t\t\tif (abstractArrowExists) {\n-\t\t\t\t\t\tif (entity instanceof AbstractArrow) ((AbstractArrow) entity).setPierceLevel(strength);\n-\t\t\t\t\t} else if (entity instanceof Arrow) {\n-\t\t\t\t\t\t((Arrow) entity).setPierceLevel(strength);\n-\t\t\t\t\t}\n+\t\t\t\t\t((Arrow) entity).setPierceLevel(strength);\n \t\t\t\t}\n \t\t\t\tbreak;\n+\t\t\tdefault:\n+\t\t\t\tassert false;\n \t\t}\n \t}\n \t\n", "next_change": {"commit": "1abd53beec4167993dd4245050c137d9d678f6c5", "changed_code": [{"header": "diff --git a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\nindex 5574dc46..39480e88 100644\n--- a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n+++ b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n", "chunk": "@@ -99,8 +99,8 @@ public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, N\n \t}\n \t\n \t@Override\n-\tpublic Class<? extends Number> getReturnType() {\n-\t\treturn Number.class;\n+\tpublic Class<? extends Long> getReturnType() {\n+\t\treturn Long.class;\n \t}\n \t\n \t@Override\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "525371c84bd8c59408998924e5841b94fc1bbd07", "message": "Merge commit", "committedDate": null}, {"oid": "4d704c8fbe1e76c97e7b0398b26f21c5401ce300", "committedDate": "2020-10-22 16:21:37 -0700", "message": "Prepare for release of 2.5.1 (#3488)"}, {"oid": "1abd53beec4167993dd4245050c137d9d678f6c5", "committedDate": "2021-08-14 18:58:58 +0200", "message": "Fix number/integer stuff (#4095)"}, {"oid": "452bb05e905526388c0831911b877bd350210331", "committedDate": "2022-04-18 17:28:17 +0200", "message": "Fix some extra and missing [the]'s (#4604)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI1NzUzNQ==", "url": "https://github.com/SkriptLang/Skript/pull/3206#discussion_r463257535", "body": "this should be `private`", "bodyText": "this should be private", "bodyHTML": "<p dir=\"auto\">this should be <code>private</code></p>", "author": "APickledWalrus", "createdAt": "2020-07-30T20:39:09Z", "path": "src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/**\n+ * This file is part of Skript.\n+ *\n+ * Skript is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Skript is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Skript.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ *\n+ * Copyright 2011-2017 Peter G\u00fcttinger and contributors\n+ */\n+package ch.njol.skript.expressions;\n+\n+import org.bukkit.entity.AbstractArrow;\n+import org.bukkit.entity.Arrow;\n+import org.bukkit.entity.Projectile;\n+import org.bukkit.event.Event;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+import ch.njol.skript.Skript;\n+import ch.njol.skript.classes.Changer.ChangeMode;\n+import ch.njol.skript.doc.Description;\n+import ch.njol.skript.doc.Examples;\n+import ch.njol.skript.doc.Name;\n+import ch.njol.skript.doc.Since;\n+import ch.njol.skript.expressions.base.SimplePropertyExpression;\n+import ch.njol.util.coll.CollectionUtils;\n+\n+@Name(\"Arrow Pierce Level\")\n+@Description(\"An arrow's pierce level.\")\n+@Examples({\"on shoot:\",\n+\t\"\\tevent-projectile is an arrow\",\n+\t\"\\tset arrow pierce level of event-projectile to 5\"})\n+@Since(\"INSERT VERSION\")\n+public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, Number> {\n+\t\n+\tfinal static boolean abstractArrowExists = Skript.classExists(\"org.bukkit.entity.AbstractArrow\");", "originalCommit": "0aa195d593628e0ad712b26a043a2391c5cd76a3", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5553e672cbeda0a6b3eef7ca016834c58f3ed93a", "changed_code": [{"header": "diff --git a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\nindex f9d9ab5f..a3e7d05e 100644\n--- a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n+++ b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n", "chunk": "@@ -42,7 +42,7 @@ import ch.njol.util.coll.CollectionUtils;\n @Since(\"INSERT VERSION\")\n public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, Number> {\n \t\n-\tfinal static boolean abstractArrowExists = Skript.classExists(\"org.bukkit.entity.AbstractArrow\");\n+\tprivate final static boolean abstractArrowExists = Skript.classExists(\"org.bukkit.entity.AbstractArrow\");\n \t\n \tstatic {\n \t\tif (abstractArrowExists || Skript.methodExists(Arrow.class, \"getPierceLevel\"))\n", "next_change": {"commit": "aa17d7a45b30b92b759d72bacfd8899030117a9c", "changed_code": [{"header": "diff --git a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\nindex a3e7d05e..a47b9cb9 100644\n--- a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n+++ b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n", "chunk": "@@ -39,22 +39,21 @@ import ch.njol.util.coll.CollectionUtils;\n @Examples({\"on shoot:\",\n \t\"\\tevent-projectile is an arrow\",\n \t\"\\tset arrow pierce level of event-projectile to 5\"})\n+@RequiredPlugins(\"Minecraft 1.14+\")\n @Since(\"INSERT VERSION\")\n public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, Number> {\n \t\n-\tprivate final static boolean abstractArrowExists = Skript.classExists(\"org.bukkit.entity.AbstractArrow\");\n+\tprivate final static boolean CAN_USE_PIERCE = Skript.methodExists(Arrow.class, \"getPierceLevel\");\n \t\n \tstatic {\n-\t\tif (abstractArrowExists || Skript.methodExists(Arrow.class, \"getPierceLevel\"))\n+\t\tif (CAN_USE_PIERCE)\n \t\t\tregister(ExprArrowPierceLevel.class, Number.class, \"[the] arrow pierce level\", \"projectiles\");\n \t}\n \t\n \t@Nullable\n \t@Override\n \tpublic Number convert(Projectile arrow) {\n-\t\tif (abstractArrowExists)\n-\t\t\treturn arrow instanceof AbstractArrow ? ((AbstractArrow) arrow).getPierceLevel() : null;\n-\t\treturn arrow instanceof Arrow ? ((Arrow) arrow).getPierceLevel() : null;\n+\t\treturn ((Arrow) arrow).getPierceLevel();\n \t}\n \t\n \t@Nullable\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "525371c84bd8c59408998924e5841b94fc1bbd07", "changed_code": [{"header": "diff --git a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\nindex f9d9ab5f..5574dc46 100644\n--- a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n+++ b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n", "chunk": "@@ -39,84 +39,62 @@ import ch.njol.util.coll.CollectionUtils;\n @Examples({\"on shoot:\",\n \t\"\\tevent-projectile is an arrow\",\n \t\"\\tset arrow pierce level of event-projectile to 5\"})\n+@RequiredPlugins(\"Minecraft 1.14+\")\n @Since(\"INSERT VERSION\")\n public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, Number> {\n \t\n-\tfinal static boolean abstractArrowExists = Skript.classExists(\"org.bukkit.entity.AbstractArrow\");\n+\tprivate final static boolean CAN_USE_PIERCE = Skript.methodExists(Arrow.class, \"getPierceLevel\");\n \t\n \tstatic {\n-\t\tif (abstractArrowExists || Skript.methodExists(Arrow.class, \"getPierceLevel\"))\n+\t\tif (CAN_USE_PIERCE)\n \t\t\tregister(ExprArrowPierceLevel.class, Number.class, \"[the] arrow pierce level\", \"projectiles\");\n \t}\n \t\n \t@Nullable\n \t@Override\n \tpublic Number convert(Projectile arrow) {\n-\t\tif (abstractArrowExists)\n-\t\t\treturn arrow instanceof AbstractArrow ? ((AbstractArrow) arrow).getPierceLevel() : null;\n-\t\treturn arrow instanceof Arrow ? ((Arrow) arrow).getPierceLevel() : null;\n+\t\treturn ((Arrow) arrow).getPierceLevel();\n \t}\n \t\n \t@Nullable\n \t@Override\n \tpublic Class<?>[] acceptChange(ChangeMode mode) {\n-\t\treturn (mode == ChangeMode.DELETE || mode == ChangeMode.REMOVE_ALL) ? null : CollectionUtils.array(Number.class);\n+\t\tswitch (mode) {\n+\t\t\tcase SET:\n+\t\t\tcase RESET:\n+\t\t\tcase REMOVE:\n+\t\t\tcase ADD:\n+\t\t\t\treturn CollectionUtils.array(Number.class);\n+\t\t\tdefault:\n+\t\t\t\treturn null;\n+\t\t}\n \t}\n \t\n \t@Override\n \tpublic void change(Event e, @Nullable Object[] delta, ChangeMode mode) {\n \t\tint strength = delta != null ? Math.max(((Number) delta[0]).intValue(), 0) : 0;\n+\t\tint mod = 1;\n \t\tswitch (mode) {\n \t\t\tcase REMOVE:\n-\t\t\t\tif (abstractArrowExists)\n-\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n-\t\t\t\t\t\tif (entity instanceof AbstractArrow) {\n-\t\t\t\t\t\t\tAbstractArrow abstractArrow = (AbstractArrow) entity;\n-\t\t\t\t\t\t\tint dmg = Math.round(abstractArrow.getPierceLevel() - strength);\n-\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n-\t\t\t\t\t\t\tabstractArrow.setPierceLevel(dmg);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\telse\n-\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n-\t\t\t\t\t\tif (entity instanceof Arrow) {\n-\t\t\t\t\t\t\tArrow arrow = (Arrow) entity;\n-\t\t\t\t\t\t\tint dmg = Math.round(arrow.getPierceLevel() - strength);\n-\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n-\t\t\t\t\t\t\tarrow.setPierceLevel(dmg);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\tbreak;\n+\t\t\t\tmod = -1;\n \t\t\tcase ADD:\n-\t\t\t\tif (abstractArrowExists)\n-\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n-\t\t\t\t\t\tif (entity instanceof AbstractArrow) {\n-\t\t\t\t\t\t\tAbstractArrow abstractArrow = (AbstractArrow) entity;\n-\t\t\t\t\t\t\tint dmg = Math.round(abstractArrow.getPierceLevel() + strength);\n-\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n-\t\t\t\t\t\t\tabstractArrow.setPierceLevel(dmg);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\telse\n-\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n-\t\t\t\t\t\tif (entity instanceof Arrow) {\n-\t\t\t\t\t\t\tArrow arrow = (Arrow) entity;\n-\t\t\t\t\t\t\tint dmg = Math.round(arrow.getPierceLevel() + strength);\n-\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n-\t\t\t\t\t\t\tarrow.setPierceLevel(dmg);\n-\t\t\t\t\t\t}\n+\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n+\t\t\t\t\tif (entity instanceof Arrow) {\n+\t\t\t\t\t\tArrow arrow = (Arrow) entity;\n+\t\t\t\t\t\tint dmg = Math.round(arrow.getPierceLevel() + strength * mod);\n+\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n+\t\t\t\t\t\tarrow.setPierceLevel(dmg);\n \t\t\t\t\t}\n+\t\t\t\t}\n \t\t\t\tbreak;\n \t\t\tcase RESET:\n \t\t\tcase SET:\n \t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n-\t\t\t\t\tif (abstractArrowExists) {\n-\t\t\t\t\t\tif (entity instanceof AbstractArrow) ((AbstractArrow) entity).setPierceLevel(strength);\n-\t\t\t\t\t} else if (entity instanceof Arrow) {\n-\t\t\t\t\t\t((Arrow) entity).setPierceLevel(strength);\n-\t\t\t\t\t}\n+\t\t\t\t\t((Arrow) entity).setPierceLevel(strength);\n \t\t\t\t}\n \t\t\t\tbreak;\n+\t\t\tdefault:\n+\t\t\t\tassert false;\n \t\t}\n \t}\n \t\n", "next_change": {"commit": "1abd53beec4167993dd4245050c137d9d678f6c5", "changed_code": [{"header": "diff --git a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\nindex 5574dc46..39480e88 100644\n--- a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n+++ b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n", "chunk": "@@ -99,8 +99,8 @@ public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, N\n \t}\n \t\n \t@Override\n-\tpublic Class<? extends Number> getReturnType() {\n-\t\treturn Number.class;\n+\tpublic Class<? extends Long> getReturnType() {\n+\t\treturn Long.class;\n \t}\n \t\n \t@Override\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "525371c84bd8c59408998924e5841b94fc1bbd07", "message": "Merge commit", "committedDate": null}, {"oid": "4d704c8fbe1e76c97e7b0398b26f21c5401ce300", "committedDate": "2020-10-22 16:21:37 -0700", "message": "Prepare for release of 2.5.1 (#3488)"}, {"oid": "1abd53beec4167993dd4245050c137d9d678f6c5", "committedDate": "2021-08-14 18:58:58 +0200", "message": "Fix number/integer stuff (#4095)"}, {"oid": "452bb05e905526388c0831911b877bd350210331", "committedDate": "2022-04-18 17:28:17 +0200", "message": "Fix some extra and missing [the]'s (#4604)"}]}, {"oid": "c23516c2f54adfa10afda03cafe516ba406afaad", "url": "https://github.com/SkriptLang/Skript/commit/c23516c2f54adfa10afda03cafe516ba406afaad", "message": "Merge branch 'master' into ExprPierceLevel", "committedDate": "2020-07-31T11:13:07Z", "type": "commit"}, {"oid": "5553e672cbeda0a6b3eef7ca016834c58f3ed93a", "url": "https://github.com/SkriptLang/Skript/commit/5553e672cbeda0a6b3eef7ca016834c58f3ed93a", "message": "Updated everything (thanks apickledwalrus)", "committedDate": "2020-07-31T11:13:26Z", "type": "commit"}, {"oid": "65f48de1ff8c61548c15daeb11e4737df0ce89c9", "url": "https://github.com/SkriptLang/Skript/commit/65f48de1ff8c61548c15daeb11e4737df0ce89c9", "message": "Merge remote-tracking branch 'origin/ExprPierceLevel' into ExprPierceLevel", "committedDate": "2020-07-31T11:13:53Z", "type": "commit"}, {"oid": "9e7981eef43ad642885adaba9e76b0546b2c30e7", "url": "https://github.com/SkriptLang/Skript/commit/9e7981eef43ad642885adaba9e76b0546b2c30e7", "message": "Merge branch 'master' into ExprPierceLevel", "committedDate": "2020-08-02T16:24:00Z", "type": "commit"}, {"oid": "91539864f224ac8ae4ad4b0e189160d745e09bc7", "url": "https://github.com/SkriptLang/Skript/commit/91539864f224ac8ae4ad4b0e189160d745e09bc7", "message": "Merge branch 'master' into ExprPierceLevel", "committedDate": "2020-09-08T18:40:08Z", "type": "commit"}, {"oid": "8e2b6ecefdf3be2ccc83085b8a798b85222362fe", "url": "https://github.com/SkriptLang/Skript/commit/8e2b6ecefdf3be2ccc83085b8a798b85222362fe", "message": "Merge branch 'master' into ExprPierceLevel", "committedDate": "2020-09-26T09:54:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQ4MzYxNg==", "url": "https://github.com/SkriptLang/Skript/pull/3206#discussion_r495483616", "body": "You should add a default case that asserts false", "bodyText": "You should add a default case that asserts false", "bodyHTML": "<p dir=\"auto\">You should add a default case that asserts false</p>", "author": "APickledWalrus", "createdAt": "2020-09-26T18:39:55Z", "path": "src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/**\n+ * This file is part of Skript.\n+ *\n+ * Skript is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Skript is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Skript.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ *\n+ * Copyright 2011-2017 Peter G\u00fcttinger and contributors\n+ */\n+package ch.njol.skript.expressions;\n+\n+import org.bukkit.entity.AbstractArrow;\n+import org.bukkit.entity.Arrow;\n+import org.bukkit.entity.Projectile;\n+import org.bukkit.event.Event;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+import ch.njol.skript.Skript;\n+import ch.njol.skript.classes.Changer.ChangeMode;\n+import ch.njol.skript.doc.Description;\n+import ch.njol.skript.doc.Examples;\n+import ch.njol.skript.doc.Name;\n+import ch.njol.skript.doc.Since;\n+import ch.njol.skript.expressions.base.SimplePropertyExpression;\n+import ch.njol.util.coll.CollectionUtils;\n+\n+@Name(\"Arrow Pierce Level\")\n+@Description(\"An arrow's pierce level.\")\n+@Examples({\"on shoot:\",\n+\t\"\\tevent-projectile is an arrow\",\n+\t\"\\tset arrow pierce level of event-projectile to 5\"})\n+@Since(\"INSERT VERSION\")\n+public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, Number> {\n+\t\n+\tprivate final static boolean abstractArrowExists = Skript.classExists(\"org.bukkit.entity.AbstractArrow\");\n+\t\n+\tstatic {\n+\t\tif (abstractArrowExists || Skript.methodExists(Arrow.class, \"getPierceLevel\"))\n+\t\t\tregister(ExprArrowPierceLevel.class, Number.class, \"[the] arrow pierce level\", \"projectiles\");\n+\t}\n+\t\n+\t@Nullable\n+\t@Override\n+\tpublic Number convert(Projectile arrow) {\n+\t\tif (abstractArrowExists)\n+\t\t\treturn arrow instanceof AbstractArrow ? ((AbstractArrow) arrow).getPierceLevel() : null;\n+\t\treturn arrow instanceof Arrow ? ((Arrow) arrow).getPierceLevel() : null;\n+\t}\n+\t\n+\t@Nullable\n+\t@Override\n+\tpublic Class<?>[] acceptChange(ChangeMode mode) {\n+\t\tswitch (mode) {\n+\t\t\tcase SET:\n+\t\t\tcase RESET:\n+\t\t\tcase REMOVE:\n+\t\t\tcase ADD:\n+\t\t\t\treturn CollectionUtils.array(Number.class);\n+\t\t\tdefault:\n+\t\t\t\treturn null;\n+\t\t}\n+\t}\n+\t\n+\t@Override\n+\tpublic void change(Event e, @Nullable Object[] delta, ChangeMode mode) {\n+\t\tint strength = delta != null ? Math.max(((Number) delta[0]).intValue(), 0) : 0;\n+\t\tint mod = 1;\n+\t\tswitch (mode) {\n+\t\t\tcase REMOVE:\n+\t\t\t\tmod = -1;\n+\t\t\tcase ADD:\n+\t\t\t\tif (abstractArrowExists) {\n+\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n+\t\t\t\t\t\tif (entity instanceof AbstractArrow) {\n+\t\t\t\t\t\t\tAbstractArrow abstractArrow = (AbstractArrow) entity;\n+\t\t\t\t\t\t\tint dmg = Math.round(abstractArrow.getPierceLevel() + strength * mod);\n+\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n+\t\t\t\t\t\t\tabstractArrow.setPierceLevel(dmg);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t} else {\n+\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n+\t\t\t\t\t\tif (entity instanceof Arrow) {\n+\t\t\t\t\t\t\tArrow arrow = (Arrow) entity;\n+\t\t\t\t\t\t\tint dmg = Math.round(arrow.getPierceLevel() + strength * mod);\n+\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n+\t\t\t\t\t\t\tarrow.setPierceLevel(dmg);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tbreak;\n+\t\t\tcase RESET:\n+\t\t\tcase SET:\n+\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n+\t\t\t\t\tif (abstractArrowExists) {\n+\t\t\t\t\t\tif (entity instanceof AbstractArrow)\n+\t\t\t\t\t\t\t((AbstractArrow) entity).setPierceLevel(strength);\n+\t\t\t\t\t} else if (entity instanceof Arrow) {\n+\t\t\t\t\t\t((Arrow) entity).setPierceLevel(strength);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tbreak;", "originalCommit": "8e2b6ecefdf3be2ccc83085b8a798b85222362fe", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "72675726749f9cb5d103c040df33073b42e8b442", "changed_code": [{"header": "diff --git a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\nindex a3e7d05e..43e83652 100644\n--- a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n+++ b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n", "chunk": "@@ -110,6 +110,8 @@ public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, N\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t\tbreak;\n+\t\t\tdefault:\n+\t\t\t\tassert false;\n \t\t}\n \t}\n \t\n", "next_change": {"commit": "aa17d7a45b30b92b759d72bacfd8899030117a9c", "changed_code": [{"header": "diff --git a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\nindex 43e83652..a47b9cb9 100644\n--- a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n+++ b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n", "chunk": "@@ -79,35 +78,19 @@ public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, N\n \t\t\tcase REMOVE:\n \t\t\t\tmod = -1;\n \t\t\tcase ADD:\n-\t\t\t\tif (abstractArrowExists) {\n-\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n-\t\t\t\t\t\tif (entity instanceof AbstractArrow) {\n-\t\t\t\t\t\t\tAbstractArrow abstractArrow = (AbstractArrow) entity;\n-\t\t\t\t\t\t\tint dmg = Math.round(abstractArrow.getPierceLevel() + strength * mod);\n-\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n-\t\t\t\t\t\t\tabstractArrow.setPierceLevel(dmg);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t} else {\n-\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n-\t\t\t\t\t\tif (entity instanceof Arrow) {\n-\t\t\t\t\t\t\tArrow arrow = (Arrow) entity;\n-\t\t\t\t\t\t\tint dmg = Math.round(arrow.getPierceLevel() + strength * mod);\n-\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n-\t\t\t\t\t\t\tarrow.setPierceLevel(dmg);\n-\t\t\t\t\t\t}\n+\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n+\t\t\t\t\tif (entity instanceof Arrow) {\n+\t\t\t\t\t\tArrow arrow = (Arrow) entity;\n+\t\t\t\t\t\tint dmg = Math.round(arrow.getPierceLevel() + strength * mod);\n+\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n+\t\t\t\t\t\tarrow.setPierceLevel(dmg);\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t\tbreak;\n \t\t\tcase RESET:\n \t\t\tcase SET:\n \t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n-\t\t\t\t\tif (abstractArrowExists) {\n-\t\t\t\t\t\tif (entity instanceof AbstractArrow)\n-\t\t\t\t\t\t\t((AbstractArrow) entity).setPierceLevel(strength);\n-\t\t\t\t\t} else if (entity instanceof Arrow) {\n-\t\t\t\t\t\t((Arrow) entity).setPierceLevel(strength);\n-\t\t\t\t\t}\n+\t\t\t\t\t((Arrow) entity).setPierceLevel(strength);\n \t\t\t\t}\n \t\t\t\tbreak;\n \t\t\tdefault:\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "525371c84bd8c59408998924e5841b94fc1bbd07", "changed_code": [{"header": "diff --git a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\nindex a3e7d05e..5574dc46 100644\n--- a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n+++ b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n", "chunk": "@@ -79,37 +78,23 @@ public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, N\n \t\t\tcase REMOVE:\n \t\t\t\tmod = -1;\n \t\t\tcase ADD:\n-\t\t\t\tif (abstractArrowExists) {\n-\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n-\t\t\t\t\t\tif (entity instanceof AbstractArrow) {\n-\t\t\t\t\t\t\tAbstractArrow abstractArrow = (AbstractArrow) entity;\n-\t\t\t\t\t\t\tint dmg = Math.round(abstractArrow.getPierceLevel() + strength * mod);\n-\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n-\t\t\t\t\t\t\tabstractArrow.setPierceLevel(dmg);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n-\t\t\t\t} else {\n-\t\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n-\t\t\t\t\t\tif (entity instanceof Arrow) {\n-\t\t\t\t\t\t\tArrow arrow = (Arrow) entity;\n-\t\t\t\t\t\t\tint dmg = Math.round(arrow.getPierceLevel() + strength * mod);\n-\t\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n-\t\t\t\t\t\t\tarrow.setPierceLevel(dmg);\n-\t\t\t\t\t\t}\n+\t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n+\t\t\t\t\tif (entity instanceof Arrow) {\n+\t\t\t\t\t\tArrow arrow = (Arrow) entity;\n+\t\t\t\t\t\tint dmg = Math.round(arrow.getPierceLevel() + strength * mod);\n+\t\t\t\t\t\tif (dmg < 0) dmg = 0;\n+\t\t\t\t\t\tarrow.setPierceLevel(dmg);\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t\tbreak;\n \t\t\tcase RESET:\n \t\t\tcase SET:\n \t\t\t\tfor (Projectile entity : getExpr().getArray(e)) {\n-\t\t\t\t\tif (abstractArrowExists) {\n-\t\t\t\t\t\tif (entity instanceof AbstractArrow)\n-\t\t\t\t\t\t\t((AbstractArrow) entity).setPierceLevel(strength);\n-\t\t\t\t\t} else if (entity instanceof Arrow) {\n-\t\t\t\t\t\t((Arrow) entity).setPierceLevel(strength);\n-\t\t\t\t\t}\n+\t\t\t\t\t((Arrow) entity).setPierceLevel(strength);\n \t\t\t\t}\n \t\t\t\tbreak;\n+\t\t\tdefault:\n+\t\t\t\tassert false;\n \t\t}\n \t}\n \t\n", "next_change": {"commit": "1abd53beec4167993dd4245050c137d9d678f6c5", "changed_code": [{"header": "diff --git a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\nindex 5574dc46..39480e88 100644\n--- a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n+++ b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n", "chunk": "@@ -99,8 +99,8 @@ public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, N\n \t}\n \t\n \t@Override\n-\tpublic Class<? extends Number> getReturnType() {\n-\t\treturn Number.class;\n+\tpublic Class<? extends Long> getReturnType() {\n+\t\treturn Long.class;\n \t}\n \t\n \t@Override\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "525371c84bd8c59408998924e5841b94fc1bbd07", "message": "Merge commit", "committedDate": null}, {"oid": "4d704c8fbe1e76c97e7b0398b26f21c5401ce300", "committedDate": "2020-10-22 16:21:37 -0700", "message": "Prepare for release of 2.5.1 (#3488)"}, {"oid": "1abd53beec4167993dd4245050c137d9d678f6c5", "committedDate": "2021-08-14 18:58:58 +0200", "message": "Fix number/integer stuff (#4095)"}, {"oid": "452bb05e905526388c0831911b877bd350210331", "committedDate": "2022-04-18 17:28:17 +0200", "message": "Fix some extra and missing [the]'s (#4604)"}]}, {"oid": "72675726749f9cb5d103c040df33073b42e8b442", "url": "https://github.com/SkriptLang/Skript/commit/72675726749f9cb5d103c040df33073b42e8b442", "message": "Added a default case", "committedDate": "2020-09-26T19:03:52Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMyMTIwNw==", "url": "https://github.com/SkriptLang/Skript/pull/3206#discussion_r496321207", "body": "I think you can just test ``Skript.methodExists(Arrow.class, \"getPierceLevel\")`` for here.\r\n\r\nAlso, if this method is not guaranteed to exist in all versions supported by Skript, can you add a ``@RequiredPlugins`` MC version?", "bodyText": "I think you can just test Skript.methodExists(Arrow.class, \"getPierceLevel\") for here.\nAlso, if this method is not guaranteed to exist in all versions supported by Skript, can you add a @RequiredPlugins MC version?", "bodyHTML": "<p dir=\"auto\">I think you can just test <code>Skript.methodExists(Arrow.class, \"getPierceLevel\")</code> for here.</p>\n<p dir=\"auto\">Also, if this method is not guaranteed to exist in all versions supported by Skript, can you add a <code>@RequiredPlugins</code> MC version?</p>", "author": "Wealthyturtle", "createdAt": "2020-09-29T01:22:37Z", "path": "src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/**\n+ * This file is part of Skript.\n+ *\n+ * Skript is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * Skript is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with Skript.  If not, see <http://www.gnu.org/licenses/>.\n+ *\n+ *\n+ * Copyright 2011-2017 Peter G\u00fcttinger and contributors\n+ */\n+package ch.njol.skript.expressions;\n+\n+import org.bukkit.entity.AbstractArrow;\n+import org.bukkit.entity.Arrow;\n+import org.bukkit.entity.Projectile;\n+import org.bukkit.event.Event;\n+import org.eclipse.jdt.annotation.Nullable;\n+\n+import ch.njol.skript.Skript;\n+import ch.njol.skript.classes.Changer.ChangeMode;\n+import ch.njol.skript.doc.Description;\n+import ch.njol.skript.doc.Examples;\n+import ch.njol.skript.doc.Name;\n+import ch.njol.skript.doc.Since;\n+import ch.njol.skript.expressions.base.SimplePropertyExpression;\n+import ch.njol.util.coll.CollectionUtils;\n+\n+@Name(\"Arrow Pierce Level\")\n+@Description(\"An arrow's pierce level.\")\n+@Examples({\"on shoot:\",\n+\t\"\\tevent-projectile is an arrow\",\n+\t\"\\tset arrow pierce level of event-projectile to 5\"})\n+@Since(\"INSERT VERSION\")\n+public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, Number> {\n+\t\n+\tprivate final static boolean abstractArrowExists = Skript.classExists(\"org.bukkit.entity.AbstractArrow\");\n+\t\n+\tstatic {\n+\t\tif (abstractArrowExists || Skript.methodExists(Arrow.class, \"getPierceLevel\"))", "originalCommit": "72675726749f9cb5d103c040df33073b42e8b442", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjQ0NTY5OA==", "url": "https://github.com/SkriptLang/Skript/pull/3206#discussion_r496445698", "bodyText": "\ud83d\udc4d", "author": "DeltaRays", "createdAt": "2020-09-29T06:27:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMyMTIwNw=="}], "type": "inlineReview", "revised_code": {"commit": "aa17d7a45b30b92b759d72bacfd8899030117a9c", "changed_code": [{"header": "diff --git a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\nindex 43e83652..a47b9cb9 100644\n--- a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n+++ b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n", "chunk": "@@ -39,22 +39,21 @@ import ch.njol.util.coll.CollectionUtils;\n @Examples({\"on shoot:\",\n \t\"\\tevent-projectile is an arrow\",\n \t\"\\tset arrow pierce level of event-projectile to 5\"})\n+@RequiredPlugins(\"Minecraft 1.14+\")\n @Since(\"INSERT VERSION\")\n public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, Number> {\n \t\n-\tprivate final static boolean abstractArrowExists = Skript.classExists(\"org.bukkit.entity.AbstractArrow\");\n+\tprivate final static boolean CAN_USE_PIERCE = Skript.methodExists(Arrow.class, \"getPierceLevel\");\n \t\n \tstatic {\n-\t\tif (abstractArrowExists || Skript.methodExists(Arrow.class, \"getPierceLevel\"))\n+\t\tif (CAN_USE_PIERCE)\n \t\t\tregister(ExprArrowPierceLevel.class, Number.class, \"[the] arrow pierce level\", \"projectiles\");\n \t}\n \t\n \t@Nullable\n \t@Override\n \tpublic Number convert(Projectile arrow) {\n-\t\tif (abstractArrowExists)\n-\t\t\treturn arrow instanceof AbstractArrow ? ((AbstractArrow) arrow).getPierceLevel() : null;\n-\t\treturn arrow instanceof Arrow ? ((Arrow) arrow).getPierceLevel() : null;\n+\t\treturn ((Arrow) arrow).getPierceLevel();\n \t}\n \t\n \t@Nullable\n", "next_change": null}]}, "revised_code_in_main": {"commit": "525371c84bd8c59408998924e5841b94fc1bbd07", "changed_code": [{"header": "diff --git a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\nindex 43e83652..5574dc46 100644\n--- a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n+++ b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n", "chunk": "@@ -39,22 +39,21 @@ import ch.njol.util.coll.CollectionUtils;\n @Examples({\"on shoot:\",\n \t\"\\tevent-projectile is an arrow\",\n \t\"\\tset arrow pierce level of event-projectile to 5\"})\n+@RequiredPlugins(\"Minecraft 1.14+\")\n @Since(\"INSERT VERSION\")\n public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, Number> {\n \t\n-\tprivate final static boolean abstractArrowExists = Skript.classExists(\"org.bukkit.entity.AbstractArrow\");\n+\tprivate final static boolean CAN_USE_PIERCE = Skript.methodExists(Arrow.class, \"getPierceLevel\");\n \t\n \tstatic {\n-\t\tif (abstractArrowExists || Skript.methodExists(Arrow.class, \"getPierceLevel\"))\n+\t\tif (CAN_USE_PIERCE)\n \t\t\tregister(ExprArrowPierceLevel.class, Number.class, \"[the] arrow pierce level\", \"projectiles\");\n \t}\n \t\n \t@Nullable\n \t@Override\n \tpublic Number convert(Projectile arrow) {\n-\t\tif (abstractArrowExists)\n-\t\t\treturn arrow instanceof AbstractArrow ? ((AbstractArrow) arrow).getPierceLevel() : null;\n-\t\treturn arrow instanceof Arrow ? ((Arrow) arrow).getPierceLevel() : null;\n+\t\treturn ((Arrow) arrow).getPierceLevel();\n \t}\n \t\n \t@Nullable\n", "next_change": {"commit": "1abd53beec4167993dd4245050c137d9d678f6c5", "changed_code": [{"header": "diff --git a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\nindex 5574dc46..39480e88 100644\n--- a/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n+++ b/src/main/java/ch/njol/skript/expressions/ExprArrowPierceLevel.java\n", "chunk": "@@ -40,20 +40,20 @@ import ch.njol.util.coll.CollectionUtils;\n \t\"\\tevent-projectile is an arrow\",\n \t\"\\tset arrow pierce level of event-projectile to 5\"})\n @RequiredPlugins(\"Minecraft 1.14+\")\n-@Since(\"INSERT VERSION\")\n-public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, Number> {\n+@Since(\"2.5.1\")\n+public class ExprArrowPierceLevel extends SimplePropertyExpression<Projectile, Long> {\n \t\n \tprivate final static boolean CAN_USE_PIERCE = Skript.methodExists(Arrow.class, \"getPierceLevel\");\n \t\n \tstatic {\n \t\tif (CAN_USE_PIERCE)\n-\t\t\tregister(ExprArrowPierceLevel.class, Number.class, \"[the] arrow pierce level\", \"projectiles\");\n+\t\t\tregister(ExprArrowPierceLevel.class, Long.class, \"[the] arrow pierce level\", \"projectiles\");\n \t}\n \t\n \t@Nullable\n \t@Override\n-\tpublic Number convert(Projectile arrow) {\n-\t\treturn ((Arrow) arrow).getPierceLevel();\n+\tpublic Long convert(Projectile arrow) {\n+\t\treturn (long) ((Arrow) arrow).getPierceLevel();\n \t}\n \t\n \t@Nullable\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "525371c84bd8c59408998924e5841b94fc1bbd07", "message": "Merge commit", "committedDate": null}, {"oid": "4d704c8fbe1e76c97e7b0398b26f21c5401ce300", "committedDate": "2020-10-22 16:21:37 -0700", "message": "Prepare for release of 2.5.1 (#3488)"}, {"oid": "1abd53beec4167993dd4245050c137d9d678f6c5", "committedDate": "2021-08-14 18:58:58 +0200", "message": "Fix number/integer stuff (#4095)"}, {"oid": "452bb05e905526388c0831911b877bd350210331", "committedDate": "2022-04-18 17:28:17 +0200", "message": "Fix some extra and missing [the]'s (#4604)"}]}, {"oid": "aa17d7a45b30b92b759d72bacfd8899030117a9c", "url": "https://github.com/SkriptLang/Skript/commit/aa17d7a45b30b92b759d72bacfd8899030117a9c", "message": "Updated ExprArrowPierceLevel.java", "committedDate": "2020-09-29T06:32:46Z", "type": "commit"}, {"oid": "19e6a9dc05881c02e2d5be49cfa94a2a154b63d6", "url": "https://github.com/SkriptLang/Skript/commit/19e6a9dc05881c02e2d5be49cfa94a2a154b63d6", "message": "Merge branch 'dev-2.5' into ExprPierceLevel", "committedDate": "2020-09-29T21:56:35Z", "type": "commit"}, {"oid": "6e29f2f58ad5611f77693cf44354b9f65c400148", "url": "https://github.com/SkriptLang/Skript/commit/6e29f2f58ad5611f77693cf44354b9f65c400148", "message": "update license header", "committedDate": "2020-09-29T21:57:16Z", "type": "commit"}]}