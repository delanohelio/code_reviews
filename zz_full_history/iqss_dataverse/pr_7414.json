{"pr_number": 7414, "pr_title": "Iqss/6497 semantic api", "pr_author": "qqmyers", "pr_createdAt": "2020-11-16T20:54:52Z", "pr_url": "https://github.com/IQSS/dataverse/pull/7414", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MjU0MzIyOA==", "url": "https://github.com/IQSS/dataverse/pull/7414#discussion_r662543228", "body": "Jenkins is showing an error (400, BAD REQUEST) instead of a 200 here: https://jenkins.dataverse.org/blue/organizations/jenkins/IQSS-Dataverse-Develop-PR/detail/PR-7414/64/tests ", "bodyText": "Jenkins is showing an error (400, BAD REQUEST) instead of a 200 here: https://jenkins.dataverse.org/blue/organizations/jenkins/IQSS-Dataverse-Develop-PR/detail/PR-7414/64/tests", "bodyHTML": "<p dir=\"auto\">Jenkins is showing an error (400, BAD REQUEST) instead of a 200 here: <a href=\"https://jenkins.dataverse.org/blue/organizations/jenkins/IQSS-Dataverse-Develop-PR/detail/PR-7414/64/tests\" rel=\"nofollow\">https://jenkins.dataverse.org/blue/organizations/jenkins/IQSS-Dataverse-Develop-PR/detail/PR-7414/64/tests</a></p>", "author": "pdurbin", "createdAt": "2021-07-01T19:32:29Z", "path": "src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java", "diffHunk": "@@ -2164,4 +2157,111 @@ public void testRestrictFileExportDdi() throws IOException {\n                 .body(\"message\", equalTo(\"You do not have permission to download this file.\"));\n     }\n \n+    @Test\n+    public void testSemanticMetadataAPIs() {\n+        Response createUser = UtilIT.createRandomUser();\n+        createUser.prettyPrint();\n+        String username = UtilIT.getUsernameFromResponse(createUser);\n+        String apiToken = UtilIT.getApiTokenFromResponse(createUser);\n+\n+        Response createDataverseResponse = UtilIT.createRandomDataverse(apiToken);\n+        createDataverseResponse.prettyPrint();\n+        String dataverseAlias = UtilIT.getAliasFromResponse(createDataverseResponse);\n+\n+        // Create a dataset using native api\n+        Response createDatasetResponse = UtilIT.createRandomDatasetViaNativeApi(dataverseAlias, apiToken);\n+        createDatasetResponse.prettyPrint();\n+        Integer datasetId = UtilIT.getDatasetIdFromResponse(createDatasetResponse);\n+\n+        // Get the metadata with the semantic api\n+        Response response = UtilIT.getDatasetJsonLDMetadata(datasetId, apiToken);\n+        response.then().assertThat().statusCode(OK.getStatusCode());\n+        // Compare the metadata with an expected value - the metadatablock entries\n+        // should be the same but there will be additional fields with values related to\n+        // the dataset's creation (e.g. new id)\n+        String jsonLDString = getData(response.getBody().asString());\n+        JsonObject jo = null;\n+        try {\n+            jo = JSONLDUtil.decontextualizeJsonLD(jsonLDString);\n+        } catch (NoSuchMethodError e) {\n+            logger.info(ExceptionUtils.getStackTrace(e));\n+        }\n+        \n+\n+        String expectedJsonLD = UtilIT.getDatasetJson(\"scripts/search/tests/data/dataset-finch1.jsonld\");\n+        jo = Json.createObjectBuilder(jo).remove(\"@id\").remove(\"http://schema.org/dateModified\").build();\n+        String jsonLD = jo.toString();\n+\n+        // ToDo: Are the static pars as expected\n+        JSONAssert.assertEquals(expectedJsonLD, jsonLD, false);\n+        // Now change the title\n+        response = UtilIT.updateDatasetJsonLDMetadata(datasetId, apiToken,\n+                \"{\\\"Title\\\": \\\"New Title\\\", \\\"@context\\\":{\\\"Title\\\": \\\"http://purl.org/dc/terms/title\\\"}}\", true);\n+        response.then().assertThat().statusCode(OK.getStatusCode());\n+\n+        response = UtilIT.getDatasetJsonLDMetadata(datasetId, apiToken);\n+        response.then().assertThat().statusCode(OK.getStatusCode());\n+\n+        // Check that the semantic api returns the new title\n+        jsonLDString = getData(response.getBody().asString());\n+        JsonObject jsonLDObject = JSONLDUtil.decontextualizeJsonLD(jsonLDString);\n+        assertEquals(\"New Title\", jsonLDObject.getString(\"http://purl.org/dc/terms/title\"));\n+\n+        // Add an additional description (which is multi-valued and compound)\n+        // Also add new terms of use (single value so would fail with replace false if a\n+        // value existed)\n+        String newDescription = \"{\\\"citation:Description\\\": {\\\"dsDescription:Text\\\": \\\"New description\\\", \\\"https://dataverse.org/schema/core#termsOfUse\\\": \\\"New terms\\\"} \\\"@context\\\":{\\\"citation\\\": \\\"https://dataverse.org/schema/citation/\\\",\\\"dsDescription\\\": \\\"https://dataverse.org/schema/citation/dsDescription#\\\"}}\";\n+        response = UtilIT.updateDatasetJsonLDMetadata(datasetId, apiToken, newDescription, false);\n+        response.then().assertThat().statusCode(OK.getStatusCode());", "originalCommit": "10ef9ff27eb38668bd06234f9bb79545782d36e7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MzEyNTA0NA==", "url": "https://github.com/IQSS/dataverse/pull/7414#discussion_r663125044", "bodyText": "Some typos in the json-ld -should be fixed", "author": "qqmyers", "createdAt": "2021-07-02T16:22:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MjU0MzIyOA=="}], "type": "inlineReview", "revised_code": {"commit": "1e7fcd17d7b102bd141e94b262ee6a53b60d2f56", "changed_code": [{"header": "diff --git a/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java b/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java\nindex 7074c55d64..04d7c77d4f 100644\n--- a/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java\n+++ b/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java\n", "chunk": "@@ -2157,111 +2164,4 @@ createDataset = UtilIT.createRandomDatasetViaNativeApi(dataverse1Alias, apiToken\n                 .body(\"message\", equalTo(\"You do not have permission to download this file.\"));\n     }\n \n-    @Test\n-    public void testSemanticMetadataAPIs() {\n-        Response createUser = UtilIT.createRandomUser();\n-        createUser.prettyPrint();\n-        String username = UtilIT.getUsernameFromResponse(createUser);\n-        String apiToken = UtilIT.getApiTokenFromResponse(createUser);\n-\n-        Response createDataverseResponse = UtilIT.createRandomDataverse(apiToken);\n-        createDataverseResponse.prettyPrint();\n-        String dataverseAlias = UtilIT.getAliasFromResponse(createDataverseResponse);\n-\n-        // Create a dataset using native api\n-        Response createDatasetResponse = UtilIT.createRandomDatasetViaNativeApi(dataverseAlias, apiToken);\n-        createDatasetResponse.prettyPrint();\n-        Integer datasetId = UtilIT.getDatasetIdFromResponse(createDatasetResponse);\n-\n-        // Get the metadata with the semantic api\n-        Response response = UtilIT.getDatasetJsonLDMetadata(datasetId, apiToken);\n-        response.then().assertThat().statusCode(OK.getStatusCode());\n-        // Compare the metadata with an expected value - the metadatablock entries\n-        // should be the same but there will be additional fields with values related to\n-        // the dataset's creation (e.g. new id)\n-        String jsonLDString = getData(response.getBody().asString());\n-        JsonObject jo = null;\n-        try {\n-            jo = JSONLDUtil.decontextualizeJsonLD(jsonLDString);\n-        } catch (NoSuchMethodError e) {\n-            logger.info(ExceptionUtils.getStackTrace(e));\n-        }\n-        \n-\n-        String expectedJsonLD = UtilIT.getDatasetJson(\"scripts/search/tests/data/dataset-finch1.jsonld\");\n-        jo = Json.createObjectBuilder(jo).remove(\"@id\").remove(\"http://schema.org/dateModified\").build();\n-        String jsonLD = jo.toString();\n-\n-        // ToDo: Are the static pars as expected\n-        JSONAssert.assertEquals(expectedJsonLD, jsonLD, false);\n-        // Now change the title\n-        response = UtilIT.updateDatasetJsonLDMetadata(datasetId, apiToken,\n-                \"{\\\"Title\\\": \\\"New Title\\\", \\\"@context\\\":{\\\"Title\\\": \\\"http://purl.org/dc/terms/title\\\"}}\", true);\n-        response.then().assertThat().statusCode(OK.getStatusCode());\n-\n-        response = UtilIT.getDatasetJsonLDMetadata(datasetId, apiToken);\n-        response.then().assertThat().statusCode(OK.getStatusCode());\n-\n-        // Check that the semantic api returns the new title\n-        jsonLDString = getData(response.getBody().asString());\n-        JsonObject jsonLDObject = JSONLDUtil.decontextualizeJsonLD(jsonLDString);\n-        assertEquals(\"New Title\", jsonLDObject.getString(\"http://purl.org/dc/terms/title\"));\n-\n-        // Add an additional description (which is multi-valued and compound)\n-        // Also add new terms of use (single value so would fail with replace false if a\n-        // value existed)\n-        String newDescription = \"{\\\"citation:Description\\\": {\\\"dsDescription:Text\\\": \\\"New description\\\", \\\"https://dataverse.org/schema/core#termsOfUse\\\": \\\"New terms\\\"} \\\"@context\\\":{\\\"citation\\\": \\\"https://dataverse.org/schema/citation/\\\",\\\"dsDescription\\\": \\\"https://dataverse.org/schema/citation/dsDescription#\\\"}}\";\n-        response = UtilIT.updateDatasetJsonLDMetadata(datasetId, apiToken, newDescription, false);\n-        response.then().assertThat().statusCode(OK.getStatusCode());\n-\n-        response = UtilIT.getDatasetJsonLDMetadata(datasetId, apiToken);\n-        response.then().assertThat().statusCode(OK.getStatusCode());\n-\n-        // Look for a second description\n-        jsonLDString = getData(response.getBody().asString());\n-        jsonLDObject = JSONLDUtil.decontextualizeJsonLD(jsonLDString);\n-        assertEquals(\"New description\",\n-                ((JsonObject) jsonLDObject.getJsonArray(\"https://dataverse.org/schema/citation/Description\").get(1))\n-                        .getString(\"https://dataverse.org/schema/citation/dsDescription#Text\"));\n-\n-        // Can't add terms of use with replace=false and a value already set (single\n-        // valued field)\n-        String badTerms = \"{\\\"https://dataverse.org/schema/core#termsOfUse\\\": \\\"Bad terms\\\"}}\";\n-        response = UtilIT.updateDatasetJsonLDMetadata(datasetId, apiToken, badTerms, false);\n-        response.then().assertThat().statusCode(BAD_REQUEST.getStatusCode());\n-\n-        // Delete the terms of use\n-        response = UtilIT.deleteDatasetJsonLDMetadata(datasetId, apiToken,\n-                \"{\\\"https://dataverse.org/schema/core#termsOfUse\\\": \\\"New terms\\\"}\");\n-        response.then().assertThat().statusCode(OK.getStatusCode());\n-\n-        response = UtilIT.getDatasetJsonLDMetadata(datasetId, apiToken);\n-        response.then().assertThat().statusCode(OK.getStatusCode());\n-\n-        // Verify that they're gone\n-        jsonLDString = getData(response.getBody().asString());\n-        jsonLDObject = JSONLDUtil.decontextualizeJsonLD(jsonLDString);\n-        assertTrue(!jsonLDObject.containsKey(\"https://dataverse.org/schema/core#termsOfUse\"));\n-\n-        // Cleanup - delete dataset, dataverse, user...\n-        Response deleteDatasetResponse = UtilIT.deleteDatasetViaNativeApi(datasetId, apiToken);\n-        deleteDatasetResponse.prettyPrint();\n-        assertEquals(200, deleteDatasetResponse.getStatusCode());\n-\n-        Response deleteDataverseResponse = UtilIT.deleteDataverse(dataverseAlias, apiToken);\n-        deleteDataverseResponse.prettyPrint();\n-        assertEquals(200, deleteDataverseResponse.getStatusCode());\n-\n-        Response deleteUserResponse = UtilIT.deleteUser(username);\n-        deleteUserResponse.prettyPrint();\n-        assertEquals(200, deleteUserResponse.getStatusCode());\n-\n-    }\n-\n-    private String getData(String body) {\n-        try (StringReader rdr = new StringReader(body)) {\n-            return Json.createReader(rdr).readObject().getJsonObject(\"data\").toString();\n-        }\n-    }\n-\n }\n", "next_change": {"commit": "da9c9e9e24556fafa6bc81d78cddd29b0632094e", "changed_code": [{"header": "diff --git a/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java b/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java\nindex 04d7c77d4f..5943650e80 100644\n--- a/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java\n+++ b/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java\n", "chunk": "@@ -2163,5 +2165,157 @@ createDataset = UtilIT.createRandomDatasetViaNativeApi(dataverse1Alias, apiToken\n                 .statusCode(BAD_REQUEST.getStatusCode())\n                 .body(\"message\", equalTo(\"You do not have permission to download this file.\"));\n     }\n+    \n+\n+    @Test\n+    public void testSemanticMetadataAPIs() {\n+\n+        Response createUser = UtilIT.createRandomUser();\n+        createUser.prettyPrint();\n+        String username = UtilIT.getUsernameFromResponse(createUser);\n+        String apiToken = UtilIT.getApiTokenFromResponse(createUser);\n+\n+        Response createDataverseResponse = UtilIT.createRandomDataverse(apiToken);\n+        createDataverseResponse.prettyPrint();\n+        String dataverseAlias = UtilIT.getAliasFromResponse(createDataverseResponse);\n+\n+        \n+        //Create a dataset using native api\n+        Response createDatasetResponse = UtilIT.createRandomDatasetViaNativeApi(dataverseAlias, apiToken);\n+        createDatasetResponse.prettyPrint();\n+        Integer datasetId = UtilIT.getDatasetIdFromResponse(createDatasetResponse);\n+\n+        //Get the metadata with the semantic api\n+        Response response = UtilIT.getDatasetJsonLDMetadata(datasetId, apiToken);\n+        response.then().assertThat().statusCode(OK.getStatusCode());\n+\n+        //Compare the metadata with an expected value - the metadatablock entries should be the same but there will be additional fields with values related to the dataset's creation (e.g. new id)\n+        String jsonLDString = JsonPath.from(response.getBody().asString()).getString(\"data\");\n+        String jsonLD = JSONLDUtil.decontextualizeJsonLD(jsonLDString).toString();\n+\n+        String expectedJsonLD = UtilIT.getDatasetJson(\"scripts/search/tests/data/dataset-finch1.jsonld\");\n+\n+        //ToDo: Are the static pars as expected\n+        assertEquals(expectedJsonLD, jsonLD);\n \n+        //Now change the title\n+        response = UtilIT.updateDatasetJsonLDMetadata(datasetId, apiToken,\n+                \"{\\\"Title\\\": \\\"New Title\\\", \\\"@context\\\":{\\\"Title\\\": \\\"http://purl.org/dc/terms/title\\\"}}\", true);\n+        response.then().assertThat().statusCode(OK.getStatusCode());\n+\n+        response = UtilIT.getDatasetJsonLDMetadata(datasetId, apiToken);\n+        response.then().assertThat().statusCode(OK.getStatusCode());\n+\n+        //Check that the semantic api returns the new title\n+        jsonLDString = JsonPath.from(response.getBody().asString()).getString(\"data\");\n+        JsonObject jsonLDObject = JSONLDUtil.decontextualizeJsonLD(jsonLDString);\n+        assertEquals(\"New Title\", jsonLDObject.getString(\"http://purl.org/dc/terms/title\"));\n+\n+        //Add an additional description (which is multi-valued and compound)\n+        //Also add new terms of use (single value so would fail with replace false if a value existed)\n+        String newDescription = \"{\\\"citation:Description\\\": {\\\"dsDescription:Text\\\": \\\"New description\\\", \\\"https://dataverse.org/schema/core#termsOfUse\\\": \\\"New terms\\\"} \\\"@context\\\":{\\\"citation\\\": \\\"https://dataverse.org/schema/citation/\\\",\\\"dsDescription\\\": \\\"https://dataverse.org/schema/citation/dsDescription#\\\"}}\";\n+        response = UtilIT.updateDatasetJsonLDMetadata(datasetId, apiToken, newDescription, false);\n+        response.then().assertThat().statusCode(OK.getStatusCode());\n+\n+        response = UtilIT.getDatasetJsonLDMetadata(datasetId, apiToken);\n+        response.then().assertThat().statusCode(OK.getStatusCode());\n+\n+        //Look for a second description\n+        jsonLDString = JsonPath.from(response.getBody().asString()).getString(\"data\");\n+        jsonLDObject = JSONLDUtil.decontextualizeJsonLD(jsonLDString);\n+        assertEquals(\"New description\",\n+                ((JsonObject) jsonLDObject.getJsonArray(\"https://dataverse.org/schema/citation/Description\").get(1))\n+                        .getString(\"https://dataverse.org/schema/citation/dsDescription#Text\"));\n+\n+        //Can't add terms of use with replace=false and a value already set (single valued field)\n+        String badTerms = \"{\\\"https://dataverse.org/schema/core#termsOfUse\\\": \\\"Bad terms\\\"}}\";\n+        response = UtilIT.updateDatasetJsonLDMetadata(datasetId, apiToken, badTerms, false);\n+        response.then().assertThat().statusCode(BAD_REQUEST.getStatusCode());\n+\n+        \n+        //Delete the terms of use\n+        response = UtilIT.deleteDatasetJsonLDMetadata(datasetId, apiToken,\n+                \"{\\\"https://dataverse.org/schema/core#termsOfUse\\\": \\\"New terms\\\"}\");\n+        response.then().assertThat().statusCode(OK.getStatusCode());\n+\n+        response = UtilIT.getDatasetJsonLDMetadata(datasetId, apiToken);\n+        response.then().assertThat().statusCode(OK.getStatusCode());\n+\n+        //Verify that they're gone\n+        jsonLDString = JsonPath.from(response.getBody().asString()).getString(\"data\");\n+        jsonLDObject = JSONLDUtil.decontextualizeJsonLD(jsonLDString);\n+        assertTrue(!jsonLDObject.containsKey(\"https://dataverse.org/schema/core#termsOfUse\"));\n+\n+        //Cleanup - delete dataset, dataverse, user...\n+        Response deleteDatasetResponse = UtilIT.deleteDatasetViaNativeApi(datasetId, apiToken);\n+        deleteDatasetResponse.prettyPrint();\n+        assertEquals(200, deleteDatasetResponse.getStatusCode());\n+\n+        Response deleteDataverseResponse = UtilIT.deleteDataverse(dataverseAlias, apiToken);\n+        deleteDataverseResponse.prettyPrint();\n+        assertEquals(200, deleteDataverseResponse.getStatusCode());\n+\n+        Response deleteUserResponse = UtilIT.deleteUser(username);\n+        deleteUserResponse.prettyPrint();\n+        assertEquals(200, deleteUserResponse.getStatusCode());\n+\n+    }\n+    @Test\n+    public void testReCreateDataset() {\n+\n+        Response createUser = UtilIT.createRandomUser();\n+        createUser.prettyPrint();\n+        String username = UtilIT.getUsernameFromResponse(createUser);\n+        String apiToken = UtilIT.getApiTokenFromResponse(createUser);\n+        Response makeSuperUser = UtilIT.makeSuperUser(username);\n+        assertEquals(200, makeSuperUser.getStatusCode());\n+\n+        Response createDataverseResponse = UtilIT.createRandomDataverse(apiToken);\n+        createDataverseResponse.prettyPrint();\n+        String dataverseAlias = UtilIT.getAliasFromResponse(createDataverseResponse);\n+\n+        //Create a dataset using native API\n+        Response createDatasetResponse = UtilIT.createRandomDatasetViaNativeApi(dataverseAlias, apiToken);\n+        createDatasetResponse.prettyPrint();\n+        Integer datasetId = UtilIT.getDatasetIdFromResponse(createDatasetResponse);\n+\n+        //Get the semantic metadata\n+        Response response = UtilIT.getDatasetJsonLDMetadata(datasetId, apiToken);\n+        response.then().assertThat().statusCode(OK.getStatusCode());\n+\n+        String expectedJsonLD = JsonPath.from(response.getBody().asString()).getString(\"data\");\n+\n+        //Delete the dataset via native API\n+        Response deleteDatasetResponse = UtilIT.deleteDatasetViaNativeApi(datasetId, apiToken);\n+        deleteDatasetResponse.prettyPrint();\n+        assertEquals(200, deleteDatasetResponse.getStatusCode());\n+\n+        //Now use the migrate API to recreate the dataset\n+        response = UtilIT.recreateDatasetJsonLD(datasetId, apiToken, dataverseAlias, expectedJsonLD);\n+        response.then().assertThat().statusCode(CREATED.getStatusCode());\n+        //Id will change but everything else should be as before (DOI and create date)\n+        datasetId = JsonPath.from(response.getBody().asString()).getInt(\"data/id\");\n+\n+        response = UtilIT.getDatasetJsonLDMetadata(datasetId, apiToken);\n+        response.then().assertThat().statusCode(OK.getStatusCode());\n+        String jsonLDString = JsonPath.from(response.getBody().asString()).getString(\"data\");\n+        JsonObject jsonLD = JSONLDUtil.decontextualizeJsonLD(jsonLDString);\n+        \n+\n+        //ToDo: Assert that the semantic api response is the same except for the id\n+        assertEquals(expectedJsonLD, jsonLD.toString());\n+\n+        //Cleanup by deleting things\n+        deleteDatasetResponse = UtilIT.deleteDatasetViaNativeApi(datasetId, apiToken);\n+        deleteDatasetResponse.prettyPrint();\n+        assertEquals(200, deleteDatasetResponse.getStatusCode());\n+\n+        Response deleteDataverseResponse = UtilIT.deleteDataverse(dataverseAlias, apiToken);\n+        deleteDataverseResponse.prettyPrint();\n+        assertEquals(200, deleteDataverseResponse.getStatusCode());\n+\n+        Response deleteUserResponse = UtilIT.deleteUser(username);\n+        deleteUserResponse.prettyPrint();\n+        assertEquals(200, deleteUserResponse.getStatusCode());\n+    }\n }\n", "next_change": {"commit": "4cd26692ad13fdb788b29ed603993e5a027199d4", "changed_code": [{"header": "diff --git a/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java b/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java\nindex 5943650e80..e725864e85 100644\n--- a/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java\n+++ b/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java\n", "chunk": "@@ -2318,4 +2341,10 @@ createDataset = UtilIT.createRandomDatasetViaNativeApi(dataverse1Alias, apiToken\n         deleteUserResponse.prettyPrint();\n         assertEquals(200, deleteUserResponse.getStatusCode());\n     }\n+    \n+    private String getData(String body) {\n+        try (StringReader rdr = new StringReader(body)) {\n+            return Json.createReader(rdr).readObject().getJsonObject(\"data\").toString();\n+        }\n+    }\n }\n", "next_change": {"commit": "5f53e158462feb04c1c53bf4d17aed214733bc48", "changed_code": [{"header": "diff --git a/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java b/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java\nindex e725864e85..f00bcd5911 100644\n--- a/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java\n+++ b/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java\n", "chunk": "@@ -2341,7 +2326,7 @@ createDataset = UtilIT.createRandomDatasetViaNativeApi(dataverse1Alias, apiToken\n         deleteUserResponse.prettyPrint();\n         assertEquals(200, deleteUserResponse.getStatusCode());\n     }\n-    \n+\n     private String getData(String body) {\n         try (StringReader rdr = new StringReader(body)) {\n             return Json.createReader(rdr).readObject().getJsonObject(\"data\").toString();\n", "next_change": {"commit": "e159003877928889aa5f3293b4ae64b99dfbf8d2", "changed_code": [{"header": "diff --git a/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java b/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java\nindex f00bcd5911..e8f1e71e25 100644\n--- a/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java\n+++ b/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java\n", "chunk": "@@ -2259,77 +2258,10 @@ createDataset = UtilIT.createRandomDatasetViaNativeApi(dataverse1Alias, apiToken\n \n     }\n \n-    @Test\n-    public void testReCreateDataset() {\n-\n-        Response createUser = UtilIT.createRandomUser();\n-        createUser.prettyPrint();\n-        String username = UtilIT.getUsernameFromResponse(createUser);\n-        String apiToken = UtilIT.getApiTokenFromResponse(createUser);\n-        Response makeSuperUser = UtilIT.makeSuperUser(username);\n-        assertEquals(200, makeSuperUser.getStatusCode());\n-\n-        Response createDataverseResponse = UtilIT.createRandomDataverse(apiToken);\n-        createDataverseResponse.prettyPrint();\n-        String dataverseAlias = UtilIT.getAliasFromResponse(createDataverseResponse);\n-\n-        // Create a dataset using native API\n-        Response createDatasetResponse = UtilIT.createRandomDatasetViaNativeApi(dataverseAlias, apiToken);\n-        createDatasetResponse.prettyPrint();\n-        Integer datasetId = UtilIT.getDatasetIdFromResponse(createDatasetResponse);\n-\n-        // Get the semantic metadata\n-        Response response = UtilIT.getDatasetJsonLDMetadata(datasetId, apiToken);\n-        response.then().assertThat().statusCode(OK.getStatusCode());\n-\n-        String expectedString = JsonPath.from(response.getBody().asString()).getString(\"data\");\n-\n-        // Delete the dataset via native API\n-        Response deleteDatasetResponse = UtilIT.deleteDatasetViaNativeApi(datasetId, apiToken);\n-        deleteDatasetResponse.prettyPrint();\n-        assertEquals(200, deleteDatasetResponse.getStatusCode());\n-\n-        // Now use the migrate API to recreate the dataset\n-        // Now use the migrate API to recreate the dataset\n-        response = UtilIT.recreateDatasetJsonLD(apiToken, dataverseAlias, expectedString);\n-        String body = response.getBody().asString();\n-        response.then().assertThat().statusCode(CREATED.getStatusCode());\n-\n-        try (StringReader rdr = new StringReader(body)) {\n-            datasetId = Json.createReader(rdr).readObject().getJsonObject(\"data\").getInt(\"id\");\n-        }\n-        // Get the jsonLD metadata for what we recreated\n-        response = UtilIT.getDatasetJsonLDMetadata(datasetId, apiToken);\n-        response.then().assertThat().statusCode(OK.getStatusCode());\n-\n-        String jsonLDString = getData(response.getBody().asString());\n-        JsonObject jsonLD = JSONLDUtil.decontextualizeJsonLD(jsonLDString);\n-\n-        JsonObject expectedJsonLD = JSONLDUtil.decontextualizeJsonLD(expectedString);\n-        expectedJsonLD = Json.createObjectBuilder(expectedJsonLD).remove(\"@id\").remove(\"http://schema.org/dateModified\")\n-                .build();\n-        // ToDo: Assert that the semantic api response is the same (everything in the\n-        // expected version is in the new one - deleting the @id and dateModified means\n-        // those won't be compared (with last param = false)\n-        JSONAssert.assertEquals(expectedJsonLD.toString(), jsonLD.toString(), false);\n-\n-        // Now cleanup\n-        deleteDatasetResponse = UtilIT.deleteDatasetViaNativeApi(datasetId, apiToken);\n-        deleteDatasetResponse.prettyPrint();\n-        assertEquals(200, deleteDatasetResponse.getStatusCode());\n-\n-        Response deleteDataverseResponse = UtilIT.deleteDataverse(dataverseAlias, apiToken);\n-        deleteDataverseResponse.prettyPrint();\n-        assertEquals(200, deleteDataverseResponse.getStatusCode());\n-\n-        Response deleteUserResponse = UtilIT.deleteUser(username);\n-        deleteUserResponse.prettyPrint();\n-        assertEquals(200, deleteUserResponse.getStatusCode());\n-    }\n-\n     private String getData(String body) {\n         try (StringReader rdr = new StringReader(body)) {\n             return Json.createReader(rdr).readObject().getJsonObject(\"data\").toString();\n         }\n     }\n+\n }\n", "next_change": {"commit": "d857009b3ea3d3b01488390a6edd2b5ebcf76eee", "changed_code": [{"header": "diff --git a/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java b/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java\nindex e8f1e71e25..bb1d795626 100644\n--- a/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java\n+++ b/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java\n", "chunk": "@@ -2258,10 +2259,77 @@ createDataset = UtilIT.createRandomDatasetViaNativeApi(dataverse1Alias, apiToken\n \n     }\n \n+    @Test\n+    public void testReCreateDataset() {\n+\n+        Response createUser = UtilIT.createRandomUser();\n+        createUser.prettyPrint();\n+        String username = UtilIT.getUsernameFromResponse(createUser);\n+        String apiToken = UtilIT.getApiTokenFromResponse(createUser);\n+        Response makeSuperUser = UtilIT.makeSuperUser(username);\n+        assertEquals(200, makeSuperUser.getStatusCode());\n+\n+        Response createDataverseResponse = UtilIT.createRandomDataverse(apiToken);\n+        createDataverseResponse.prettyPrint();\n+        String dataverseAlias = UtilIT.getAliasFromResponse(createDataverseResponse);\n+\n+        // Create a dataset using native API\n+        Response createDatasetResponse = UtilIT.createRandomDatasetViaNativeApi(dataverseAlias, apiToken);\n+        createDatasetResponse.prettyPrint();\n+        Integer datasetId = UtilIT.getDatasetIdFromResponse(createDatasetResponse);\n+\n+        // Get the semantic metadata\n+        Response response = UtilIT.getDatasetJsonLDMetadata(datasetId, apiToken);\n+        response.then().assertThat().statusCode(OK.getStatusCode());\n+\n+        String expectedString = JsonPath.from(response.getBody().asString()).getString(\"data\");\n+\n+        // Delete the dataset via native API\n+        Response deleteDatasetResponse = UtilIT.deleteDatasetViaNativeApi(datasetId, apiToken);\n+        deleteDatasetResponse.prettyPrint();\n+        assertEquals(200, deleteDatasetResponse.getStatusCode());\n+\n+        // Now use the migrate API to recreate the dataset\n+        // Now use the migrate API to recreate the dataset\n+        response = UtilIT.recreateDatasetJsonLD(apiToken, dataverseAlias, expectedString);\n+        String body = response.getBody().asString();\n+        response.then().assertThat().statusCode(CREATED.getStatusCode());\n+\n+        try (StringReader rdr = new StringReader(body)) {\n+            datasetId = Json.createReader(rdr).readObject().getJsonObject(\"data\").getInt(\"id\");\n+        }\n+        // Get the jsonLD metadata for what we recreated\n+        response = UtilIT.getDatasetJsonLDMetadata(datasetId, apiToken);\n+        response.then().assertThat().statusCode(OK.getStatusCode());\n+\n+        String jsonLDString = getData(response.getBody().asString());\n+        JsonObject jsonLD = JSONLDUtil.decontextualizeJsonLD(jsonLDString);\n+\n+        JsonObject expectedJsonLD = JSONLDUtil.decontextualizeJsonLD(expectedString);\n+        expectedJsonLD = Json.createObjectBuilder(expectedJsonLD).remove(\"@id\").remove(\"http://schema.org/dateModified\")\n+                .build();\n+        // ToDo: Assert that the semantic api response is the same (everything in the\n+        // expected version is in the new one - deleting the @id and dateModified means\n+        // those won't be compared (with last param = false)\n+        JSONAssert.assertEquals(expectedJsonLD.toString(), jsonLD.toString(), false);\n+\n+        // Now cleanup\n+        deleteDatasetResponse = UtilIT.deleteDatasetViaNativeApi(datasetId, apiToken);\n+        deleteDatasetResponse.prettyPrint();\n+        assertEquals(200, deleteDatasetResponse.getStatusCode());\n+\n+        Response deleteDataverseResponse = UtilIT.deleteDataverse(dataverseAlias, apiToken);\n+        deleteDataverseResponse.prettyPrint();\n+        assertEquals(200, deleteDataverseResponse.getStatusCode());\n+\n+        Response deleteUserResponse = UtilIT.deleteUser(username);\n+        deleteUserResponse.prettyPrint();\n+        assertEquals(200, deleteUserResponse.getStatusCode());\n+    }\n+\n     private String getData(String body) {\n         try (StringReader rdr = new StringReader(body)) {\n             return Json.createReader(rdr).readObject().getJsonObject(\"data\").toString();\n         }\n     }\n-\n }\n", "next_change": {"commit": "1a348f5f3660916a538a9d4f3fc1ed062fac83ab", "changed_code": [{"header": "diff --git a/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java b/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java\nindex bb1d795626..956cce5eec 100644\n--- a/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java\n+++ b/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java\n", "chunk": "@@ -2156,180 +2163,5 @@ createDataset = UtilIT.createRandomDatasetViaNativeApi(dataverse1Alias, apiToken\n                 .statusCode(BAD_REQUEST.getStatusCode())\n                 .body(\"message\", equalTo(\"You do not have permission to download this file.\"));\n     }\n-    \n-\n-    @Test\n-    public void testSemanticMetadataAPIs() {\n-        Response createUser = UtilIT.createRandomUser();\n-        createUser.prettyPrint();\n-        String username = UtilIT.getUsernameFromResponse(createUser);\n-        String apiToken = UtilIT.getApiTokenFromResponse(createUser);\n-\n-        Response createDataverseResponse = UtilIT.createRandomDataverse(apiToken);\n-        createDataverseResponse.prettyPrint();\n-        String dataverseAlias = UtilIT.getAliasFromResponse(createDataverseResponse);\n-\n-        // Create a dataset using native api\n-        Response createDatasetResponse = UtilIT.createRandomDatasetViaNativeApi(dataverseAlias, apiToken);\n-        createDatasetResponse.prettyPrint();\n-        Integer datasetId = UtilIT.getDatasetIdFromResponse(createDatasetResponse);\n-\n-        // Get the metadata with the semantic api\n-        Response response = UtilIT.getDatasetJsonLDMetadata(datasetId, apiToken);\n-        response.then().assertThat().statusCode(OK.getStatusCode());\n-        // Compare the metadata with an expected value - the metadatablock entries\n-        // should be the same but there will be additional fields with values related to\n-        // the dataset's creation (e.g. new id)\n-        String jsonLDString = getData(response.getBody().asString());\n-        JsonObject jo = null;\n-        try {\n-            jo = JSONLDUtil.decontextualizeJsonLD(jsonLDString);\n-        } catch (NoSuchMethodError e) {\n-            logger.info(ExceptionUtils.getStackTrace(e));\n-        }\n-        \n-\n-        String expectedJsonLD = UtilIT.getDatasetJson(\"scripts/search/tests/data/dataset-finch1.jsonld\");\n-        jo = Json.createObjectBuilder(jo).remove(\"@id\").remove(\"http://schema.org/dateModified\").build();\n-        String jsonLD = jo.toString();\n-\n-        // ToDo: Are the static pars as expected\n-        JSONAssert.assertEquals(expectedJsonLD, jsonLD, false);\n-        // Now change the title\n-        response = UtilIT.updateDatasetJsonLDMetadata(datasetId, apiToken,\n-                \"{\\\"Title\\\": \\\"New Title\\\", \\\"@context\\\":{\\\"Title\\\": \\\"http://purl.org/dc/terms/title\\\"}}\", true);\n-        response.then().assertThat().statusCode(OK.getStatusCode());\n-\n-        response = UtilIT.getDatasetJsonLDMetadata(datasetId, apiToken);\n-        response.then().assertThat().statusCode(OK.getStatusCode());\n-\n-        // Check that the semantic api returns the new title\n-        jsonLDString = getData(response.getBody().asString());\n-        JsonObject jsonLDObject = JSONLDUtil.decontextualizeJsonLD(jsonLDString);\n-        assertEquals(\"New Title\", jsonLDObject.getString(\"http://purl.org/dc/terms/title\"));\n-\n-        // Add an additional description (which is multi-valued and compound)\n-        // Also add new terms of use (single value so would fail with replace false if a\n-        // value existed)\n-        String newDescription = \"{\\\"citation:Description\\\": {\\\"dsDescription:Text\\\": \\\"New description\\\"}, \\\"https://dataverse.org/schema/core#termsOfUse\\\": \\\"New terms\\\", \\\"@context\\\":{\\\"citation\\\": \\\"https://dataverse.org/schema/citation/\\\",\\\"dsDescription\\\": \\\"https://dataverse.org/schema/citation/dsDescription#\\\"}}\";\n-        response = UtilIT.updateDatasetJsonLDMetadata(datasetId, apiToken, newDescription, false);\n-        response.then().assertThat().statusCode(OK.getStatusCode());\n-\n-        response = UtilIT.getDatasetJsonLDMetadata(datasetId, apiToken);\n-        response.then().assertThat().statusCode(OK.getStatusCode());\n-\n-        // Look for a second description\n-        jsonLDString = getData(response.getBody().asString());\n-        jsonLDObject = JSONLDUtil.decontextualizeJsonLD(jsonLDString);\n-        assertEquals(\"New description\",\n-                ((JsonObject) jsonLDObject.getJsonArray(\"https://dataverse.org/schema/citation/Description\").get(1))\n-                        .getString(\"https://dataverse.org/schema/citation/dsDescription#Text\"));\n-\n-        // Can't add terms of use with replace=false and a value already set (single\n-        // valued field)\n-        String badTerms = \"{\\\"https://dataverse.org/schema/core#termsOfUse\\\": \\\"Bad terms\\\"}}\";\n-        response = UtilIT.updateDatasetJsonLDMetadata(datasetId, apiToken, badTerms, false);\n-        response.then().assertThat().statusCode(BAD_REQUEST.getStatusCode());\n-\n-        // Delete the terms of use\n-        response = UtilIT.deleteDatasetJsonLDMetadata(datasetId, apiToken,\n-                \"{\\\"https://dataverse.org/schema/core#termsOfUse\\\": \\\"New terms\\\"}\");\n-        response.then().assertThat().statusCode(OK.getStatusCode());\n-\n-        response = UtilIT.getDatasetJsonLDMetadata(datasetId, apiToken);\n-        response.then().assertThat().statusCode(OK.getStatusCode());\n-\n-        // Verify that they're gone\n-        jsonLDString = getData(response.getBody().asString());\n-        jsonLDObject = JSONLDUtil.decontextualizeJsonLD(jsonLDString);\n-        assertTrue(!jsonLDObject.containsKey(\"https://dataverse.org/schema/core#termsOfUse\"));\n-\n-        // Cleanup - delete dataset, dataverse, user...\n-        Response deleteDatasetResponse = UtilIT.deleteDatasetViaNativeApi(datasetId, apiToken);\n-        deleteDatasetResponse.prettyPrint();\n-        assertEquals(200, deleteDatasetResponse.getStatusCode());\n-\n-        Response deleteDataverseResponse = UtilIT.deleteDataverse(dataverseAlias, apiToken);\n-        deleteDataverseResponse.prettyPrint();\n-        assertEquals(200, deleteDataverseResponse.getStatusCode());\n-\n-        Response deleteUserResponse = UtilIT.deleteUser(username);\n-        deleteUserResponse.prettyPrint();\n-        assertEquals(200, deleteUserResponse.getStatusCode());\n-\n-    }\n \n-    @Test\n-    public void testReCreateDataset() {\n-\n-        Response createUser = UtilIT.createRandomUser();\n-        createUser.prettyPrint();\n-        String username = UtilIT.getUsernameFromResponse(createUser);\n-        String apiToken = UtilIT.getApiTokenFromResponse(createUser);\n-        Response makeSuperUser = UtilIT.makeSuperUser(username);\n-        assertEquals(200, makeSuperUser.getStatusCode());\n-\n-        Response createDataverseResponse = UtilIT.createRandomDataverse(apiToken);\n-        createDataverseResponse.prettyPrint();\n-        String dataverseAlias = UtilIT.getAliasFromResponse(createDataverseResponse);\n-\n-        // Create a dataset using native API\n-        Response createDatasetResponse = UtilIT.createRandomDatasetViaNativeApi(dataverseAlias, apiToken);\n-        createDatasetResponse.prettyPrint();\n-        Integer datasetId = UtilIT.getDatasetIdFromResponse(createDatasetResponse);\n-\n-        // Get the semantic metadata\n-        Response response = UtilIT.getDatasetJsonLDMetadata(datasetId, apiToken);\n-        response.then().assertThat().statusCode(OK.getStatusCode());\n-\n-        String expectedString = JsonPath.from(response.getBody().asString()).getString(\"data\");\n-\n-        // Delete the dataset via native API\n-        Response deleteDatasetResponse = UtilIT.deleteDatasetViaNativeApi(datasetId, apiToken);\n-        deleteDatasetResponse.prettyPrint();\n-        assertEquals(200, deleteDatasetResponse.getStatusCode());\n-\n-        // Now use the migrate API to recreate the dataset\n-        // Now use the migrate API to recreate the dataset\n-        response = UtilIT.recreateDatasetJsonLD(apiToken, dataverseAlias, expectedString);\n-        String body = response.getBody().asString();\n-        response.then().assertThat().statusCode(CREATED.getStatusCode());\n-\n-        try (StringReader rdr = new StringReader(body)) {\n-            datasetId = Json.createReader(rdr).readObject().getJsonObject(\"data\").getInt(\"id\");\n-        }\n-        // Get the jsonLD metadata for what we recreated\n-        response = UtilIT.getDatasetJsonLDMetadata(datasetId, apiToken);\n-        response.then().assertThat().statusCode(OK.getStatusCode());\n-\n-        String jsonLDString = getData(response.getBody().asString());\n-        JsonObject jsonLD = JSONLDUtil.decontextualizeJsonLD(jsonLDString);\n-\n-        JsonObject expectedJsonLD = JSONLDUtil.decontextualizeJsonLD(expectedString);\n-        expectedJsonLD = Json.createObjectBuilder(expectedJsonLD).remove(\"@id\").remove(\"http://schema.org/dateModified\")\n-                .build();\n-        // ToDo: Assert that the semantic api response is the same (everything in the\n-        // expected version is in the new one - deleting the @id and dateModified means\n-        // those won't be compared (with last param = false)\n-        JSONAssert.assertEquals(expectedJsonLD.toString(), jsonLD.toString(), false);\n-\n-        // Now cleanup\n-        deleteDatasetResponse = UtilIT.deleteDatasetViaNativeApi(datasetId, apiToken);\n-        deleteDatasetResponse.prettyPrint();\n-        assertEquals(200, deleteDatasetResponse.getStatusCode());\n-\n-        Response deleteDataverseResponse = UtilIT.deleteDataverse(dataverseAlias, apiToken);\n-        deleteDataverseResponse.prettyPrint();\n-        assertEquals(200, deleteDataverseResponse.getStatusCode());\n-\n-        Response deleteUserResponse = UtilIT.deleteUser(username);\n-        deleteUserResponse.prettyPrint();\n-        assertEquals(200, deleteUserResponse.getStatusCode());\n-    }\n-\n-    private String getData(String body) {\n-        try (StringReader rdr = new StringReader(body)) {\n-            return Json.createReader(rdr).readObject().getJsonObject(\"data\").toString();\n-        }\n-    }\n }\n", "next_change": {"commit": "5557145719487de8ad148f3f742871cf5adb7644", "changed_code": [{"header": "diff --git a/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java b/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java\nindex 956cce5eec..7698bc8b2b 100644\n--- a/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java\n+++ b/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java\n", "chunk": "@@ -2164,4 +2168,111 @@ createDataset = UtilIT.createRandomDatasetViaNativeApi(dataverse1Alias, apiToken\n                 .body(\"message\", equalTo(\"You do not have permission to download this file.\"));\n     }\n \n+    @Test\n+    public void testSemanticMetadataAPIs() {\n+        Response createUser = UtilIT.createRandomUser();\n+        createUser.prettyPrint();\n+        String username = UtilIT.getUsernameFromResponse(createUser);\n+        String apiToken = UtilIT.getApiTokenFromResponse(createUser);\n+\n+        Response createDataverseResponse = UtilIT.createRandomDataverse(apiToken);\n+        createDataverseResponse.prettyPrint();\n+        String dataverseAlias = UtilIT.getAliasFromResponse(createDataverseResponse);\n+\n+        // Create a dataset using native api\n+        Response createDatasetResponse = UtilIT.createRandomDatasetViaNativeApi(dataverseAlias, apiToken);\n+        createDatasetResponse.prettyPrint();\n+        Integer datasetId = UtilIT.getDatasetIdFromResponse(createDatasetResponse);\n+\n+        // Get the metadata with the semantic api\n+        Response response = UtilIT.getDatasetJsonLDMetadata(datasetId, apiToken);\n+        response.then().assertThat().statusCode(OK.getStatusCode());\n+        // Compare the metadata with an expected value - the metadatablock entries\n+        // should be the same but there will be additional fields with values related to\n+        // the dataset's creation (e.g. new id)\n+        String jsonLDString = getData(response.getBody().asString());\n+        JsonObject jo = null;\n+        try {\n+            jo = JSONLDUtil.decontextualizeJsonLD(jsonLDString);\n+        } catch (NoSuchMethodError e) {\n+            logger.info(ExceptionUtils.getStackTrace(e));\n+        }\n+        \n+\n+        String expectedJsonLD = UtilIT.getDatasetJson(\"scripts/search/tests/data/dataset-finch1.jsonld\");\n+        jo = Json.createObjectBuilder(jo).remove(\"@id\").remove(\"http://schema.org/dateModified\").build();\n+        String jsonLD = jo.toString();\n+\n+        // ToDo: Are the static pars as expected\n+        JSONAssert.assertEquals(expectedJsonLD, jsonLD, false);\n+        // Now change the title\n+        response = UtilIT.updateDatasetJsonLDMetadata(datasetId, apiToken,\n+                \"{\\\"Title\\\": \\\"New Title\\\", \\\"@context\\\":{\\\"Title\\\": \\\"http://purl.org/dc/terms/title\\\"}}\", true);\n+        response.then().assertThat().statusCode(OK.getStatusCode());\n+\n+        response = UtilIT.getDatasetJsonLDMetadata(datasetId, apiToken);\n+        response.then().assertThat().statusCode(OK.getStatusCode());\n+\n+        // Check that the semantic api returns the new title\n+        jsonLDString = getData(response.getBody().asString());\n+        JsonObject jsonLDObject = JSONLDUtil.decontextualizeJsonLD(jsonLDString);\n+        assertEquals(\"New Title\", jsonLDObject.getString(\"http://purl.org/dc/terms/title\"));\n+\n+        // Add an additional description (which is multi-valued and compound)\n+        // Also add new terms of use (single value so would fail with replace false if a\n+        // value existed)\n+        String newDescription = \"{\\\"citation:Description\\\": {\\\"dsDescription:Text\\\": \\\"New description\\\"}, \\\"https://dataverse.org/schema/core#termsOfUse\\\": \\\"New terms\\\", \\\"@context\\\":{\\\"citation\\\": \\\"https://dataverse.org/schema/citation/\\\",\\\"dsDescription\\\": \\\"https://dataverse.org/schema/citation/dsDescription#\\\"}}\";\n+        response = UtilIT.updateDatasetJsonLDMetadata(datasetId, apiToken, newDescription, false);\n+        response.then().assertThat().statusCode(OK.getStatusCode());\n+\n+        response = UtilIT.getDatasetJsonLDMetadata(datasetId, apiToken);\n+        response.then().assertThat().statusCode(OK.getStatusCode());\n+\n+        // Look for a second description\n+        jsonLDString = getData(response.getBody().asString());\n+        jsonLDObject = JSONLDUtil.decontextualizeJsonLD(jsonLDString);\n+        assertEquals(\"New description\",\n+                ((JsonObject) jsonLDObject.getJsonArray(\"https://dataverse.org/schema/citation/Description\").get(1))\n+                        .getString(\"https://dataverse.org/schema/citation/dsDescription#Text\"));\n+\n+        // Can't add terms of use with replace=false and a value already set (single\n+        // valued field)\n+        String badTerms = \"{\\\"https://dataverse.org/schema/core#termsOfUse\\\": \\\"Bad terms\\\"}}\";\n+        response = UtilIT.updateDatasetJsonLDMetadata(datasetId, apiToken, badTerms, false);\n+        response.then().assertThat().statusCode(BAD_REQUEST.getStatusCode());\n+\n+        // Delete the terms of use\n+        response = UtilIT.deleteDatasetJsonLDMetadata(datasetId, apiToken,\n+                \"{\\\"https://dataverse.org/schema/core#termsOfUse\\\": \\\"New terms\\\"}\");\n+        response.then().assertThat().statusCode(OK.getStatusCode());\n+\n+        response = UtilIT.getDatasetJsonLDMetadata(datasetId, apiToken);\n+        response.then().assertThat().statusCode(OK.getStatusCode());\n+\n+        // Verify that they're gone\n+        jsonLDString = getData(response.getBody().asString());\n+        jsonLDObject = JSONLDUtil.decontextualizeJsonLD(jsonLDString);\n+        assertTrue(!jsonLDObject.containsKey(\"https://dataverse.org/schema/core#termsOfUse\"));\n+\n+        // Cleanup - delete dataset, dataverse, user...\n+        Response deleteDatasetResponse = UtilIT.deleteDatasetViaNativeApi(datasetId, apiToken);\n+        deleteDatasetResponse.prettyPrint();\n+        assertEquals(200, deleteDatasetResponse.getStatusCode());\n+\n+        Response deleteDataverseResponse = UtilIT.deleteDataverse(dataverseAlias, apiToken);\n+        deleteDataverseResponse.prettyPrint();\n+        assertEquals(200, deleteDataverseResponse.getStatusCode());\n+\n+        Response deleteUserResponse = UtilIT.deleteUser(username);\n+        deleteUserResponse.prettyPrint();\n+        assertEquals(200, deleteUserResponse.getStatusCode());\n+\n+    }\n+\n+    private String getData(String body) {\n+        try (StringReader rdr = new StringReader(body)) {\n+            return Json.createReader(rdr).readObject().getJsonObject(\"data\").toString();\n+        }\n+    }\n+\n }\n", "next_change": {"commit": "30d131cfbd8fd99d8eda764e0ec6b82a61c1e354", "changed_code": [{"header": "diff --git a/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java b/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java\nindex 7698bc8b2b..246eb0b250 100644\n--- a/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java\n+++ b/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java\n", "chunk": "@@ -2269,10 +2269,77 @@ createDataset = UtilIT.createRandomDatasetViaNativeApi(dataverse1Alias, apiToken\n \n     }\n \n+    @Test\n+    public void testReCreateDataset() {\n+\n+        Response createUser = UtilIT.createRandomUser();\n+        createUser.prettyPrint();\n+        String username = UtilIT.getUsernameFromResponse(createUser);\n+        String apiToken = UtilIT.getApiTokenFromResponse(createUser);\n+        Response makeSuperUser = UtilIT.makeSuperUser(username);\n+        assertEquals(200, makeSuperUser.getStatusCode());\n+\n+        Response createDataverseResponse = UtilIT.createRandomDataverse(apiToken);\n+        createDataverseResponse.prettyPrint();\n+        String dataverseAlias = UtilIT.getAliasFromResponse(createDataverseResponse);\n+\n+        // Create a dataset using native API\n+        Response createDatasetResponse = UtilIT.createRandomDatasetViaNativeApi(dataverseAlias, apiToken);\n+        createDatasetResponse.prettyPrint();\n+        Integer datasetId = UtilIT.getDatasetIdFromResponse(createDatasetResponse);\n+\n+        // Get the semantic metadata\n+        Response response = UtilIT.getDatasetJsonLDMetadata(datasetId, apiToken);\n+        response.then().assertThat().statusCode(OK.getStatusCode());\n+\n+        String expectedString = JsonPath.from(response.getBody().asString()).getString(\"data\");\n+\n+        // Delete the dataset via native API\n+        Response deleteDatasetResponse = UtilIT.deleteDatasetViaNativeApi(datasetId, apiToken);\n+        deleteDatasetResponse.prettyPrint();\n+        assertEquals(200, deleteDatasetResponse.getStatusCode());\n+\n+        // Now use the migrate API to recreate the dataset\n+        // Now use the migrate API to recreate the dataset\n+        response = UtilIT.recreateDatasetJsonLD(apiToken, dataverseAlias, expectedString);\n+        String body = response.getBody().asString();\n+        response.then().assertThat().statusCode(CREATED.getStatusCode());\n+\n+        try (StringReader rdr = new StringReader(body)) {\n+            datasetId = Json.createReader(rdr).readObject().getJsonObject(\"data\").getInt(\"id\");\n+        }\n+        // Get the jsonLD metadata for what we recreated\n+        response = UtilIT.getDatasetJsonLDMetadata(datasetId, apiToken);\n+        response.then().assertThat().statusCode(OK.getStatusCode());\n+\n+        String jsonLDString = getData(response.getBody().asString());\n+        JsonObject jsonLD = JSONLDUtil.decontextualizeJsonLD(jsonLDString);\n+\n+        JsonObject expectedJsonLD = JSONLDUtil.decontextualizeJsonLD(expectedString);\n+        expectedJsonLD = Json.createObjectBuilder(expectedJsonLD).remove(\"@id\").remove(\"http://schema.org/dateModified\")\n+                .build();\n+        // ToDo: Assert that the semantic api response is the same (everything in the\n+        // expected version is in the new one - deleting the @id and dateModified means\n+        // those won't be compared (with last param = false)\n+        JSONAssert.assertEquals(expectedJsonLD.toString(), jsonLD.toString(), false);\n+\n+        // Now cleanup\n+        deleteDatasetResponse = UtilIT.deleteDatasetViaNativeApi(datasetId, apiToken);\n+        deleteDatasetResponse.prettyPrint();\n+        assertEquals(200, deleteDatasetResponse.getStatusCode());\n+\n+        Response deleteDataverseResponse = UtilIT.deleteDataverse(dataverseAlias, apiToken);\n+        deleteDataverseResponse.prettyPrint();\n+        assertEquals(200, deleteDataverseResponse.getStatusCode());\n+\n+        Response deleteUserResponse = UtilIT.deleteUser(username);\n+        deleteUserResponse.prettyPrint();\n+        assertEquals(200, deleteUserResponse.getStatusCode());\n+    }\n+\n     private String getData(String body) {\n         try (StringReader rdr = new StringReader(body)) {\n             return Json.createReader(rdr).readObject().getJsonObject(\"data\").toString();\n         }\n     }\n-\n }\n", "next_change": {"commit": "38b8baa6c3b0f5d3878037c506d6f055380385a0", "changed_code": [{"header": "diff --git a/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java b/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java\nindex 246eb0b250..948e4213df 100644\n--- a/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java\n+++ b/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java\n", "chunk": "@@ -2337,6 +2371,59 @@ createDataset = UtilIT.createRandomDatasetViaNativeApi(dataverse1Alias, apiToken\n         assertEquals(200, deleteUserResponse.getStatusCode());\n     }\n \n+    @Test\n+    public void testCurationLabelAPIs() {\n+        Response createUser = UtilIT.createRandomUser();\n+        createUser.prettyPrint();\n+        String username = UtilIT.getUsernameFromResponse(createUser);\n+        String apiToken = UtilIT.getApiTokenFromResponse(createUser);\n+\n+        Response createDataverseResponse = UtilIT.createRandomDataverse(apiToken);\n+        createDataverseResponse.prettyPrint();\n+        String dataverseAlias = UtilIT.getAliasFromResponse(createDataverseResponse);\n+\n+        SystemConfig systemConfig = Mockito.mock(SystemConfig.class);\n+        Map<String, String[]> labelSets = new HashMap<String, String[]>();\n+        labelSets.put(\"StandardProcess\", new String[] { \"Author contacted\", \"Privacy Review\", \"Awaiting paper publication\", \"Final Approval\"});\n+        labelSets.put(\"AlternateProcess\", new String[] {\"State 1\",\"State 2\",\"State 3\"});\n+        Mockito.when(systemConfig.getCurationLabels()).thenReturn(labelSets);\n+\n+        //Set curation label set on dataverse\n+        //Valid option, bad user\n+        Response setDataverseCurationLabelSetResponse = UtilIT.setDataverseCurationLabelSet(dataverseAlias, apiToken, \"AlternateProcess\");\n+        setDataverseCurationLabelSetResponse.then().assertThat().statusCode(FORBIDDEN.getStatusCode());\n+        \n+        Response makeSuperUser = UtilIT.makeSuperUser(username);\n+        assertEquals(200, makeSuperUser.getStatusCode());\n+\n+        //Non-existent option\n+        setDataverseCurationLabelSetResponse = UtilIT.setDataverseCurationLabelSet(dataverseAlias, apiToken, \"OddProcess\");\n+        setDataverseCurationLabelSetResponse.then().assertThat().statusCode(BAD_REQUEST.getStatusCode());\n+        //Valid option, bad user\n+        setDataverseCurationLabelSetResponse = UtilIT.setDataverseCurationLabelSet(dataverseAlias, apiToken, \"AlternateProcess\");\n+        setDataverseCurationLabelSetResponse.then().assertThat().statusCode(OK.getStatusCode());\n+\n+        \n+        // Create a dataset using native api\n+        Response createDatasetResponse = UtilIT.createRandomDatasetViaNativeApi(dataverseAlias, apiToken);\n+        createDatasetResponse.prettyPrint();\n+        Integer datasetId = UtilIT.getDatasetIdFromResponse(createDatasetResponse);\n+        // Get the curation label set in use\n+        Response response = UtilIT.getDatasetCurationLabelSet(datasetId, apiToken);\n+        response.then().assertThat().statusCode(OK.getStatusCode());\n+        //Verify that the set name is what was set on the dataverse\n+        String labelSetName = getData(response.getBody().asString());\n+        assertEquals(\"AlternateProcess\", labelSetName);\n+        \n+        // Now set a label\n+        //Option from the wrong set\n+        response = UtilIT.setDatasetCurationLabel(datasetId, apiToken, \"Author contacted\");\n+        response.then().assertThat().statusCode(BAD_REQUEST.getStatusCode());\n+        // Valid option\n+        response = UtilIT.setDatasetCurationLabel(datasetId, apiToken, \"State 1\");\n+        response.then().assertThat().statusCode(OK.getStatusCode());\n+    }\n+\n     private String getData(String body) {\n         try (StringReader rdr = new StringReader(body)) {\n             return Json.createReader(rdr).readObject().getJsonObject(\"data\").toString();\n", "next_change": {"commit": "00878562c26d8f4efa17e05a1c050b82108a916e", "changed_code": [{"header": "diff --git a/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java b/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java\nindex 948e4213df..60a231d770 100644\n--- a/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java\n+++ b/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java\n", "chunk": "@@ -2417,11 +2417,11 @@ createDataset = UtilIT.createRandomDatasetViaNativeApi(dataverse1Alias, apiToken\n         \n         // Now set a label\n         //Option from the wrong set\n-        response = UtilIT.setDatasetCurationLabel(datasetId, apiToken, \"Author contacted\");\n-        response.then().assertThat().statusCode(BAD_REQUEST.getStatusCode());\n+        Response response2 = UtilIT.setDatasetCurationLabel(datasetId, apiToken, \"Author contacted\");\n+        response2.then().assertThat().statusCode(BAD_REQUEST.getStatusCode());\n         // Valid option\n-        response = UtilIT.setDatasetCurationLabel(datasetId, apiToken, \"State 1\");\n-        response.then().assertThat().statusCode(OK.getStatusCode());\n+        Response response3 = UtilIT.setDatasetCurationLabel(datasetId, apiToken, \"State 1\");\n+        response3.then().assertThat().statusCode(OK.getStatusCode());\n     }\n \n     private String getData(String body) {\n", "next_change": {"commit": "1a4e4f9808e003d9032b17018f20200e71a6fb57", "changed_code": [{"header": "diff --git a/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java b/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java\nindex 60a231d770..be5efbdcbb 100644\n--- a/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java\n+++ b/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java\n", "chunk": "@@ -2417,11 +2418,11 @@ createDataset = UtilIT.createRandomDatasetViaNativeApi(dataverse1Alias, apiToken\n         \n         // Now set a label\n         //Option from the wrong set\n-        Response response2 = UtilIT.setDatasetCurationLabel(datasetId, apiToken, \"Author contacted\");\n-        response2.then().assertThat().statusCode(BAD_REQUEST.getStatusCode());\n+        response = UtilIT.setDatasetCurationLabel(datasetId, apiToken, \"Author contacted\");\n+        response.then().assertThat().statusCode(BAD_REQUEST.getStatusCode());\n         // Valid option\n-        Response response3 = UtilIT.setDatasetCurationLabel(datasetId, apiToken, \"State 1\");\n-        response3.then().assertThat().statusCode(OK.getStatusCode());\n+        response = UtilIT.setDatasetCurationLabel(datasetId, apiToken, \"State 1\");\n+        response.then().assertThat().statusCode(OK.getStatusCode());\n     }\n \n     private String getData(String body) {\n", "next_change": {"commit": "c0d06a5d344b0d572d30bfbc2a22db155d3e25bd", "changed_code": [{"header": "diff --git a/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java b/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java\nindex be5efbdcbb..c08a71eea6 100644\n--- a/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java\n+++ b/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java\n", "chunk": "@@ -2414,15 +2413,16 @@ createDataset = UtilIT.createRandomDatasetViaNativeApi(dataverse1Alias, apiToken\n         response.then().assertThat().statusCode(OK.getStatusCode());\n         //Verify that the set name is what was set on the dataverse\n         String labelSetName = getData(response.getBody().asString());\n-        assertEquals(\"AlternateProcess\", labelSetName);\n+        // full should be {\"message\":\"AlternateProcess\"}\n+        assertTrue(labelSetName.contains(\"AlternateProcess\"));\n         \n         // Now set a label\n         //Option from the wrong set\n-        response = UtilIT.setDatasetCurationLabel(datasetId, apiToken, \"Author contacted\");\n-        response.then().assertThat().statusCode(BAD_REQUEST.getStatusCode());\n+        Response response2 = UtilIT.setDatasetCurationLabel(datasetId, apiToken, \"Author contacted\");\n+        response2.then().assertThat().statusCode(BAD_REQUEST.getStatusCode());\n         // Valid option\n-        response = UtilIT.setDatasetCurationLabel(datasetId, apiToken, \"State 1\");\n-        response.then().assertThat().statusCode(OK.getStatusCode());\n+        Response response3 = UtilIT.setDatasetCurationLabel(datasetId, apiToken, \"State 1\");\n+        response3.then().assertThat().statusCode(OK.getStatusCode());\n     }\n \n     private String getData(String body) {\n", "next_change": null}]}}, {"header": "diff --git a/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java b/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java\nindex 60a231d770..be5efbdcbb 100644\n--- a/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java\n+++ b/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java\n", "chunk": "@@ -2429,4 +2430,67 @@ createDataset = UtilIT.createRandomDatasetViaNativeApi(dataverse1Alias, apiToken\n             return Json.createReader(rdr).readObject().getJsonObject(\"data\").toString();\n         }\n     }\n+\n+    @Test\n+    public void testFilesUnchangedAfterDatasetMetadataUpdate() throws IOException {\n+        Response createUser = UtilIT.createRandomUser();\n+        createUser.prettyPrint();\n+        createUser.then().assertThat()\n+                .statusCode(OK.getStatusCode());\n+        String apiToken = UtilIT.getApiTokenFromResponse(createUser);\n+\n+        Response createDataverse = UtilIT.createRandomDataverse(apiToken);\n+        createDataverse.prettyPrint();\n+        createDataverse.then().assertThat()\n+                .statusCode(CREATED.getStatusCode());\n+\n+        String dataverseAlias = UtilIT.getAliasFromResponse(createDataverse);\n+\n+        Response createDataset = UtilIT.createRandomDatasetViaNativeApi(dataverseAlias, apiToken);\n+        createDataset.prettyPrint();\n+        createDataset.then().assertThat()\n+                .statusCode(CREATED.getStatusCode());\n+\n+        String datasetPid = JsonPath.from(createDataset.asString()).getString(\"data.persistentId\");\n+        Integer datasetId = JsonPath.from(createDataset.asString()).getInt(\"data.id\");\n+\n+        Path pathtoScript = Paths.get(java.nio.file.Files.createTempDirectory(null) + File.separator + \"run.sh\");\n+        java.nio.file.Files.write(pathtoScript, \"#!/bin/bash\\necho hello\".getBytes());\n+\n+        JsonObjectBuilder json1 = Json.createObjectBuilder()\n+                .add(\"description\", \"A script to reproduce results.\")\n+                .add(\"directoryLabel\", \"code\");\n+\n+        Response uploadReadme1 = UtilIT.uploadFileViaNative(datasetId.toString(), pathtoScript.toString(), json1.build(), apiToken);\n+        uploadReadme1.prettyPrint();\n+        uploadReadme1.then().assertThat()\n+                .statusCode(OK.getStatusCode())\n+                .body(\"data.files[0].label\", equalTo(\"run.sh\"))\n+                .body(\"data.files[0].directoryLabel\", equalTo(\"code\"));\n+\n+        UtilIT.publishDataverseViaNativeApi(dataverseAlias, apiToken).then().assertThat().statusCode(OK.getStatusCode());\n+        UtilIT.publishDatasetViaNativeApi(datasetId, \"major\", apiToken).then().assertThat().statusCode(OK.getStatusCode());\n+\n+        Response getDatasetJsonBeforeUpdate = UtilIT.nativeGet(datasetId, apiToken);\n+        getDatasetJsonBeforeUpdate.prettyPrint();\n+        getDatasetJsonBeforeUpdate.then().assertThat()\n+                .statusCode(OK.getStatusCode())\n+                .body(\"data.latestVersion.files[0].label\", equalTo(\"run.sh\"))\n+                .body(\"data.latestVersion.files[0].directoryLabel\", equalTo(\"code\"));\n+        \n+        String pathToJsonFile = \"doc/sphinx-guides/source/_static/api/dataset-update-metadata.json\";\n+        Response updateTitle = UtilIT.updateDatasetMetadataViaNative(datasetPid, pathToJsonFile, apiToken);\n+        updateTitle.prettyPrint();\n+        updateTitle.then().assertThat()\n+                .statusCode(OK.getStatusCode());\n+        \n+        Response getDatasetJsonAfterUpdate = UtilIT.nativeGet(datasetId, apiToken);\n+        getDatasetJsonAfterUpdate.prettyPrint();\n+        getDatasetJsonAfterUpdate.then().assertThat()\n+                .statusCode(OK.getStatusCode())\n+                .body(\"data.latestVersion.files[0].label\", equalTo(\"run.sh\"))\n+                .body(\"data.latestVersion.files[0].directoryLabel\", equalTo(\"code\"));\n+        \n+    }\n+    \n }\n", "next_change": {"commit": "96389dfe022e554394eda8107838c82799066cc3", "changed_code": [{"header": "diff --git a/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java b/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java\nindex be5efbdcbb..985d0c38f2 100644\n--- a/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java\n+++ b/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java\n", "chunk": "@@ -2493,4 +2584,78 @@ createDataset = UtilIT.createRandomDatasetViaNativeApi(dataverse1Alias, apiToken\n         \n     }\n     \n+    @Test\n+    public void testCuratePublishedDatasetVersionCommand() throws IOException {\n+        Response createUser = UtilIT.createRandomUser();\n+        createUser.prettyPrint();\n+        createUser.then().assertThat()\n+                .statusCode(OK.getStatusCode());\n+        String apiToken = UtilIT.getApiTokenFromResponse(createUser);\n+        String username = UtilIT.getUsernameFromResponse(createUser);\n+        \n+        \n+        Response createDataverse = UtilIT.createRandomDataverse(apiToken);\n+        createDataverse.prettyPrint();\n+        createDataverse.then().assertThat()\n+                .statusCode(CREATED.getStatusCode());\n+\n+        String dataverseAlias = UtilIT.getAliasFromResponse(createDataverse);\n+\n+        Response createDataset = UtilIT.createRandomDatasetViaNativeApi(dataverseAlias, apiToken);\n+        createDataset.prettyPrint();\n+        createDataset.then().assertThat()\n+                .statusCode(CREATED.getStatusCode());\n+\n+        String datasetPid = JsonPath.from(createDataset.asString()).getString(\"data.persistentId\");\n+        Integer datasetId = JsonPath.from(createDataset.asString()).getInt(\"data.id\");\n+\n+        Path pathtoScript = Paths.get(java.nio.file.Files.createTempDirectory(null) + File.separator + \"run.sh\");\n+        java.nio.file.Files.write(pathtoScript, \"#!/bin/bash\\necho hello\".getBytes());\n+\n+        JsonObjectBuilder json1 = Json.createObjectBuilder()\n+                .add(\"description\", \"A script to reproduce results.\")\n+                .add(\"directoryLabel\", \"code\");\n+\n+        Response uploadReadme1 = UtilIT.uploadFileViaNative(datasetId.toString(), pathtoScript.toString(), json1.build(), apiToken);\n+        uploadReadme1.prettyPrint();\n+        uploadReadme1.then().assertThat()\n+                .statusCode(OK.getStatusCode())\n+                .body(\"data.files[0].label\", equalTo(\"run.sh\"))\n+                .body(\"data.files[0].directoryLabel\", equalTo(\"code\"));\n+\n+        UtilIT.publishDataverseViaNativeApi(dataverseAlias, apiToken).then().assertThat().statusCode(OK.getStatusCode());\n+        UtilIT.publishDatasetViaNativeApi(datasetId, \"major\", apiToken).then().assertThat().statusCode(OK.getStatusCode());\n+\n+        Response getDatasetJsonBeforeUpdate = UtilIT.nativeGet(datasetId, apiToken);\n+        getDatasetJsonBeforeUpdate.prettyPrint();\n+        getDatasetJsonBeforeUpdate.then().assertThat()\n+                .statusCode(OK.getStatusCode())\n+                .body(\"data.latestVersion.files[0].label\", equalTo(\"run.sh\"))\n+                .body(\"data.latestVersion.files[0].directoryLabel\", equalTo(\"code\"));\n+        \n+        String pathToJsonFile = \"doc/sphinx-guides/source/_static/api/dataset-update-metadata.json\";\n+        Response updateTitle = UtilIT.updateDatasetMetadataViaNative(datasetPid, pathToJsonFile, apiToken);\n+        updateTitle.prettyPrint();\n+        updateTitle.then().assertThat()\n+                .statusCode(OK.getStatusCode());\n+        \n+        // shouldn't be able to update current unless you're a super user\n+\n+        UtilIT.publishDatasetViaNativeApi(datasetId, \"updatecurrent\", apiToken).then().assertThat().statusCode(FORBIDDEN.getStatusCode());\n+        \n+        Response makeSuperUser = UtilIT.makeSuperUser(username);\n+                \n+        //should work after making super user\n+        \n+        UtilIT.publishDatasetViaNativeApi(datasetId, \"updatecurrent\", apiToken).then().assertThat().statusCode(OK.getStatusCode());\n+        \n+        Response getDatasetJsonAfterUpdate = UtilIT.nativeGet(datasetId, apiToken);\n+        getDatasetJsonAfterUpdate.prettyPrint();\n+        getDatasetJsonAfterUpdate.then().assertThat()\n+                .statusCode(OK.getStatusCode())\n+                .body(\"data.latestVersion.files[0].label\", equalTo(\"run.sh\"))\n+                .body(\"data.latestVersion.files[0].directoryLabel\", equalTo(\"code\"));\n+        \n+    }\n+    \n }\n", "next_change": {"commit": "74c5a0316f52568546b61be95498bf0fa7bfb611", "changed_code": [{"header": "diff --git a/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java b/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java\nindex 985d0c38f2..a64740fe3f 100644\n--- a/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java\n+++ b/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java\n", "chunk": "@@ -2584,78 +2587,4 @@ createDataset = UtilIT.createRandomDatasetViaNativeApi(dataverse1Alias, apiToken\n         \n     }\n     \n-    @Test\n-    public void testCuratePublishedDatasetVersionCommand() throws IOException {\n-        Response createUser = UtilIT.createRandomUser();\n-        createUser.prettyPrint();\n-        createUser.then().assertThat()\n-                .statusCode(OK.getStatusCode());\n-        String apiToken = UtilIT.getApiTokenFromResponse(createUser);\n-        String username = UtilIT.getUsernameFromResponse(createUser);\n-        \n-        \n-        Response createDataverse = UtilIT.createRandomDataverse(apiToken);\n-        createDataverse.prettyPrint();\n-        createDataverse.then().assertThat()\n-                .statusCode(CREATED.getStatusCode());\n-\n-        String dataverseAlias = UtilIT.getAliasFromResponse(createDataverse);\n-\n-        Response createDataset = UtilIT.createRandomDatasetViaNativeApi(dataverseAlias, apiToken);\n-        createDataset.prettyPrint();\n-        createDataset.then().assertThat()\n-                .statusCode(CREATED.getStatusCode());\n-\n-        String datasetPid = JsonPath.from(createDataset.asString()).getString(\"data.persistentId\");\n-        Integer datasetId = JsonPath.from(createDataset.asString()).getInt(\"data.id\");\n-\n-        Path pathtoScript = Paths.get(java.nio.file.Files.createTempDirectory(null) + File.separator + \"run.sh\");\n-        java.nio.file.Files.write(pathtoScript, \"#!/bin/bash\\necho hello\".getBytes());\n-\n-        JsonObjectBuilder json1 = Json.createObjectBuilder()\n-                .add(\"description\", \"A script to reproduce results.\")\n-                .add(\"directoryLabel\", \"code\");\n-\n-        Response uploadReadme1 = UtilIT.uploadFileViaNative(datasetId.toString(), pathtoScript.toString(), json1.build(), apiToken);\n-        uploadReadme1.prettyPrint();\n-        uploadReadme1.then().assertThat()\n-                .statusCode(OK.getStatusCode())\n-                .body(\"data.files[0].label\", equalTo(\"run.sh\"))\n-                .body(\"data.files[0].directoryLabel\", equalTo(\"code\"));\n-\n-        UtilIT.publishDataverseViaNativeApi(dataverseAlias, apiToken).then().assertThat().statusCode(OK.getStatusCode());\n-        UtilIT.publishDatasetViaNativeApi(datasetId, \"major\", apiToken).then().assertThat().statusCode(OK.getStatusCode());\n-\n-        Response getDatasetJsonBeforeUpdate = UtilIT.nativeGet(datasetId, apiToken);\n-        getDatasetJsonBeforeUpdate.prettyPrint();\n-        getDatasetJsonBeforeUpdate.then().assertThat()\n-                .statusCode(OK.getStatusCode())\n-                .body(\"data.latestVersion.files[0].label\", equalTo(\"run.sh\"))\n-                .body(\"data.latestVersion.files[0].directoryLabel\", equalTo(\"code\"));\n-        \n-        String pathToJsonFile = \"doc/sphinx-guides/source/_static/api/dataset-update-metadata.json\";\n-        Response updateTitle = UtilIT.updateDatasetMetadataViaNative(datasetPid, pathToJsonFile, apiToken);\n-        updateTitle.prettyPrint();\n-        updateTitle.then().assertThat()\n-                .statusCode(OK.getStatusCode());\n-        \n-        // shouldn't be able to update current unless you're a super user\n-\n-        UtilIT.publishDatasetViaNativeApi(datasetId, \"updatecurrent\", apiToken).then().assertThat().statusCode(FORBIDDEN.getStatusCode());\n-        \n-        Response makeSuperUser = UtilIT.makeSuperUser(username);\n-                \n-        //should work after making super user\n-        \n-        UtilIT.publishDatasetViaNativeApi(datasetId, \"updatecurrent\", apiToken).then().assertThat().statusCode(OK.getStatusCode());\n-        \n-        Response getDatasetJsonAfterUpdate = UtilIT.nativeGet(datasetId, apiToken);\n-        getDatasetJsonAfterUpdate.prettyPrint();\n-        getDatasetJsonAfterUpdate.then().assertThat()\n-                .statusCode(OK.getStatusCode())\n-                .body(\"data.latestVersion.files[0].label\", equalTo(\"run.sh\"))\n-                .body(\"data.latestVersion.files[0].directoryLabel\", equalTo(\"code\"));\n-        \n-    }\n-    \n }\n", "next_change": {"commit": "57813947aa310c8d85d03ec45abf926b3c230d5f", "changed_code": [{"header": "diff --git a/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java b/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java\nindex a64740fe3f..96354c37cc 100644\n--- a/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java\n+++ b/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java\n", "chunk": "@@ -2587,4 +2584,69 @@ createDataset = UtilIT.createRandomDatasetViaNativeApi(dataverse1Alias, apiToken\n         \n     }\n     \n+    /**\n+     * In this test we are restricting a file and testing that terms of accees\n+     * or request access is required\n+     *\n+     * Export at the dataset level is always the public version.\n+     *\n+     */\n+    @Test\n+    public void testRestrictFileTermsOfUseAndAccess() throws IOException {\n+\n+        Response createUser = UtilIT.createRandomUser();\n+        createUser.prettyPrint();\n+        String authorUsername = UtilIT.getUsernameFromResponse(createUser);\n+        String authorApiToken = UtilIT.getApiTokenFromResponse(createUser);\n+\n+        Response createDataverse = UtilIT.createRandomDataverse(authorApiToken);\n+        createDataverse.prettyPrint();\n+        createDataverse.then().assertThat()\n+                .statusCode(CREATED.getStatusCode());\n+        String dataverseAlias = UtilIT.getAliasFromResponse(createDataverse);\n+\n+        Response createDataset = UtilIT.createRandomDatasetViaNativeApi(dataverseAlias, authorApiToken);\n+        createDataset.prettyPrint();\n+        createDataset.then().assertThat()\n+                .statusCode(CREATED.getStatusCode());\n+\n+        Integer datasetId = UtilIT.getDatasetIdFromResponse(createDataset);\n+        String datasetPid = JsonPath.from(createDataset.asString()).getString(\"data.persistentId\");\n+\n+        Path pathToFile = Paths.get(java.nio.file.Files.createTempDirectory(null) + File.separator + \"data.csv\");\n+        String contentOfCsv = \"\"\n+                + \"name,pounds,species\\n\"\n+                + \"Marshall,40,dog\\n\"\n+                + \"Tiger,17,cat\\n\"\n+                + \"Panther,21,cat\\n\";\n+        java.nio.file.Files.write(pathToFile, contentOfCsv.getBytes());\n+\n+        Response uploadFile = UtilIT.uploadFileViaNative(datasetId.toString(), pathToFile.toString(), authorApiToken);\n+        uploadFile.prettyPrint();\n+        uploadFile.then().assertThat()\n+                .statusCode(OK.getStatusCode())\n+                .body(\"data.files[0].label\", equalTo(\"data.csv\"));\n+\n+        String fileId = JsonPath.from(uploadFile.body().asString()).getString(\"data.files[0].dataFile.id\");\n+\n+        assertTrue(\"Failed test if Ingest Lock exceeds max duration \" + pathToFile, UtilIT.sleepForLock(datasetId.longValue(), \"Ingest\", authorApiToken, UtilIT.MAXIMUM_INGEST_LOCK_DURATION));\n+\n+        Response restrictFile = UtilIT.restrictFile(fileId, true, authorApiToken);\n+        restrictFile.prettyPrint();\n+        restrictFile.then().assertThat().statusCode(OK.getStatusCode());\n+\n+        Response publishDataverse = UtilIT.publishDataverseViaNativeApi(dataverseAlias, authorApiToken);\n+        publishDataverse.then().assertThat().statusCode(OK.getStatusCode());\n+        Response publishDataset = UtilIT.publishDatasetViaNativeApi(datasetPid, \"major\", authorApiToken);\n+        publishDataset.then().assertThat().statusCode(OK.getStatusCode());\n+        \n+        \n+        //not allowed to remove request access if there are retricted files\n+        \n+        Response disallowRequestAccess = UtilIT.allowAccessRequests(datasetPid, false, authorApiToken);\n+        disallowRequestAccess.prettyPrint();\n+        disallowRequestAccess.then().assertThat().statusCode(BAD_REQUEST.getStatusCode());\n+        \n+    }\n+    \n }\n", "next_change": {"commit": "e504bfcc134083699d252bc8d33eadb41625209d", "changed_code": [{"header": "diff --git a/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java b/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java\nindex 96354c37cc..b794069fba 100644\n--- a/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java\n+++ b/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java\n", "chunk": "@@ -2583,70 +2583,47 @@ createDataset = UtilIT.createRandomDatasetViaNativeApi(dataverse1Alias, apiToken\n                 .body(\"data.latestVersion.files[0].directoryLabel\", equalTo(\"code\"));\n         \n     }\n-    \n-    /**\n-     * In this test we are restricting a file and testing that terms of accees\n-     * or request access is required\n-     *\n-     * Export at the dataset level is always the public version.\n-     *\n-     */\n+\n     @Test\n-    public void testRestrictFileTermsOfUseAndAccess() throws IOException {\n+    public void testAddFileToDatasetTabIngest() throws IOException, InterruptedException {\n \n         Response createUser = UtilIT.createRandomUser();\n-        createUser.prettyPrint();\n-        String authorUsername = UtilIT.getUsernameFromResponse(createUser);\n-        String authorApiToken = UtilIT.getApiTokenFromResponse(createUser);\n-\n-        Response createDataverse = UtilIT.createRandomDataverse(authorApiToken);\n-        createDataverse.prettyPrint();\n-        createDataverse.then().assertThat()\n-                .statusCode(CREATED.getStatusCode());\n-        String dataverseAlias = UtilIT.getAliasFromResponse(createDataverse);\n-\n-        Response createDataset = UtilIT.createRandomDatasetViaNativeApi(dataverseAlias, authorApiToken);\n-        createDataset.prettyPrint();\n-        createDataset.then().assertThat()\n-                .statusCode(CREATED.getStatusCode());\n-\n-        Integer datasetId = UtilIT.getDatasetIdFromResponse(createDataset);\n-        String datasetPid = JsonPath.from(createDataset.asString()).getString(\"data.persistentId\");\n-\n-        Path pathToFile = Paths.get(java.nio.file.Files.createTempDirectory(null) + File.separator + \"data.csv\");\n-        String contentOfCsv = \"\"\n-                + \"name,pounds,species\\n\"\n-                + \"Marshall,40,dog\\n\"\n-                + \"Tiger,17,cat\\n\"\n-                + \"Panther,21,cat\\n\";\n-        java.nio.file.Files.write(pathToFile, contentOfCsv.getBytes());\n+        assertEquals(200, createUser.getStatusCode());\n+        String username = UtilIT.getUsernameFromResponse(createUser);\n+        String apiToken = UtilIT.getApiTokenFromResponse(createUser);\n \n-        Response uploadFile = UtilIT.uploadFileViaNative(datasetId.toString(), pathToFile.toString(), authorApiToken);\n-        uploadFile.prettyPrint();\n-        uploadFile.then().assertThat()\n-                .statusCode(OK.getStatusCode())\n-                .body(\"data.files[0].label\", equalTo(\"data.csv\"));\n+        Response createDataverseResponse = UtilIT.createRandomDataverse(apiToken);\n+        assertEquals(201, createDataverseResponse.getStatusCode());\n+        String dataverseAlias = UtilIT.getAliasFromResponse(createDataverseResponse);\n \n-        String fileId = JsonPath.from(uploadFile.body().asString()).getString(\"data.files[0].dataFile.id\");\n+        Response createDatasetResponse = UtilIT.createRandomDatasetViaNativeApi(dataverseAlias, apiToken);\n+        assertEquals(201, createDatasetResponse.getStatusCode());\n+        Integer datasetIdInt = JsonPath.from(createDatasetResponse.body().asString()).getInt(\"data.id\");\n+\n+        String pathToFile = \"src/test/resources/sav/dct.sav\";\n+        String jsonAsString = \"{\\\"description\\\":\\\"My description.\\\",\\\"directoryLabel\\\":\\\"data/subdir1\\\",\\\"categories\\\":[\\\"Data\\\"], \\\"restrict\\\":\\\"false\\\"}\";\n+        Response r = UtilIT.uploadFileViaNative(datasetIdInt.toString(), pathToFile, jsonAsString, apiToken, true);\n+        logger.info(r.prettyPrint());\n+        assertEquals(200, r.getStatusCode());\n+\n+        Thread.sleep(500);\n+        pathToFile = \"src/test/resources/sav/frequency-test.sav\";\n+        Response rTabIngest = UtilIT.uploadFileViaNative(datasetIdInt.toString(), pathToFile, jsonAsString, apiToken, false);\n+        logger.info(rTabIngest.prettyPrint());\n+        assertEquals(200, rTabIngest.getStatusCode());\n+\n+        //cleanup\n+        Thread.sleep(500);\n+        Response destroyDatasetResponse = UtilIT.destroyDataset(datasetIdInt, apiToken);\n+        assertEquals(200, destroyDatasetResponse.getStatusCode());\n \n-        assertTrue(\"Failed test if Ingest Lock exceeds max duration \" + pathToFile, UtilIT.sleepForLock(datasetId.longValue(), \"Ingest\", authorApiToken, UtilIT.MAXIMUM_INGEST_LOCK_DURATION));\n+        Response deleteDataverseResponse = UtilIT.deleteDataverse(dataverseAlias, apiToken);\n+        assertEquals(200, deleteDataverseResponse.getStatusCode());\n \n-        Response restrictFile = UtilIT.restrictFile(fileId, true, authorApiToken);\n-        restrictFile.prettyPrint();\n-        restrictFile.then().assertThat().statusCode(OK.getStatusCode());\n+        Response deleteUserResponse = UtilIT.deleteUser(username);\n+        assertEquals(200, deleteUserResponse.getStatusCode());\n \n-        Response publishDataverse = UtilIT.publishDataverseViaNativeApi(dataverseAlias, authorApiToken);\n-        publishDataverse.then().assertThat().statusCode(OK.getStatusCode());\n-        Response publishDataset = UtilIT.publishDatasetViaNativeApi(datasetPid, \"major\", authorApiToken);\n-        publishDataset.then().assertThat().statusCode(OK.getStatusCode());\n-        \n-        \n-        //not allowed to remove request access if there are retricted files\n-        \n-        Response disallowRequestAccess = UtilIT.allowAccessRequests(datasetPid, false, authorApiToken);\n-        disallowRequestAccess.prettyPrint();\n-        disallowRequestAccess.then().assertThat().statusCode(BAD_REQUEST.getStatusCode());\n-        \n     }\n+\n     \n }\n", "next_change": {"commit": "2163fdc29edf57cb62005071c11cbe249c233a41", "changed_code": [{"header": "diff --git a/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java b/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java\nindex b794069fba..bedc486657 100644\n--- a/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java\n+++ b/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java\n", "chunk": "@@ -2584,46 +2584,6 @@ createDataset = UtilIT.createRandomDatasetViaNativeApi(dataverse1Alias, apiToken\n         \n     }\n \n-    @Test\n-    public void testAddFileToDatasetTabIngest() throws IOException, InterruptedException {\n-\n-        Response createUser = UtilIT.createRandomUser();\n-        assertEquals(200, createUser.getStatusCode());\n-        String username = UtilIT.getUsernameFromResponse(createUser);\n-        String apiToken = UtilIT.getApiTokenFromResponse(createUser);\n-\n-        Response createDataverseResponse = UtilIT.createRandomDataverse(apiToken);\n-        assertEquals(201, createDataverseResponse.getStatusCode());\n-        String dataverseAlias = UtilIT.getAliasFromResponse(createDataverseResponse);\n-\n-        Response createDatasetResponse = UtilIT.createRandomDatasetViaNativeApi(dataverseAlias, apiToken);\n-        assertEquals(201, createDatasetResponse.getStatusCode());\n-        Integer datasetIdInt = JsonPath.from(createDatasetResponse.body().asString()).getInt(\"data.id\");\n-\n-        String pathToFile = \"src/test/resources/sav/dct.sav\";\n-        String jsonAsString = \"{\\\"description\\\":\\\"My description.\\\",\\\"directoryLabel\\\":\\\"data/subdir1\\\",\\\"categories\\\":[\\\"Data\\\"], \\\"restrict\\\":\\\"false\\\"}\";\n-        Response r = UtilIT.uploadFileViaNative(datasetIdInt.toString(), pathToFile, jsonAsString, apiToken, true);\n-        logger.info(r.prettyPrint());\n-        assertEquals(200, r.getStatusCode());\n-\n-        Thread.sleep(500);\n-        pathToFile = \"src/test/resources/sav/frequency-test.sav\";\n-        Response rTabIngest = UtilIT.uploadFileViaNative(datasetIdInt.toString(), pathToFile, jsonAsString, apiToken, false);\n-        logger.info(rTabIngest.prettyPrint());\n-        assertEquals(200, rTabIngest.getStatusCode());\n-\n-        //cleanup\n-        Thread.sleep(500);\n-        Response destroyDatasetResponse = UtilIT.destroyDataset(datasetIdInt, apiToken);\n-        assertEquals(200, destroyDatasetResponse.getStatusCode());\n-\n-        Response deleteDataverseResponse = UtilIT.deleteDataverse(dataverseAlias, apiToken);\n-        assertEquals(200, deleteDataverseResponse.getStatusCode());\n-\n-        Response deleteUserResponse = UtilIT.deleteUser(username);\n-        assertEquals(200, deleteUserResponse.getStatusCode());\n-\n-    }\n \n     \n }\n", "next_change": {"commit": "e7a232b0d7db8fab0c597aa28ef3a5b7bd9da394", "changed_code": [{"header": "diff --git a/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java b/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java\nindex bedc486657..0e1ae91eef 100644\n--- a/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java\n+++ b/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java\n", "chunk": "@@ -2583,7 +2593,151 @@ createDataset = UtilIT.createRandomDatasetViaNativeApi(dataverse1Alias, apiToken\n                 .body(\"data.latestVersion.files[0].directoryLabel\", equalTo(\"code\"));\n         \n     }\n+    \n+    @Test\n+    public void testCuratePublishedDatasetVersionCommand() throws IOException {\n+        Response createUser = UtilIT.createRandomUser();\n+        createUser.prettyPrint();\n+        createUser.then().assertThat()\n+                .statusCode(OK.getStatusCode());\n+        String apiToken = UtilIT.getApiTokenFromResponse(createUser);\n+        String username = UtilIT.getUsernameFromResponse(createUser);\n+        \n+        \n+        Response createDataverse = UtilIT.createRandomDataverse(apiToken);\n+        createDataverse.prettyPrint();\n+        createDataverse.then().assertThat()\n+                .statusCode(CREATED.getStatusCode());\n+\n+        String dataverseAlias = UtilIT.getAliasFromResponse(createDataverse);\n+\n+        Response createDataset = UtilIT.createRandomDatasetViaNativeApi(dataverseAlias, apiToken);\n+        createDataset.prettyPrint();\n+        createDataset.then().assertThat()\n+                .statusCode(CREATED.getStatusCode());\n+\n+        String datasetPid = JsonPath.from(createDataset.asString()).getString(\"data.persistentId\");\n+        Integer datasetId = JsonPath.from(createDataset.asString()).getInt(\"data.id\");\n+\n+        Path pathtoScript = Paths.get(java.nio.file.Files.createTempDirectory(null) + File.separator + \"run.sh\");\n+        java.nio.file.Files.write(pathtoScript, \"#!/bin/bash\\necho hello\".getBytes());\n+\n+        JsonObjectBuilder json1 = Json.createObjectBuilder()\n+                .add(\"description\", \"A script to reproduce results.\")\n+                .add(\"directoryLabel\", \"code\");\n+\n+        \n+        \n+\n+        String pathToFileThatGoesThroughIngest = \"src/test/resources/sav/dct.sav\";\n+        Response uploadIngestableFile = UtilIT.uploadFileViaNative(datasetId.toString(), pathToFileThatGoesThroughIngest, apiToken);\n+        uploadIngestableFile.then().assertThat()\n+                .statusCode(OK.getStatusCode());\n+        uploadIngestableFile.prettyPrint();\n+\n+        String origFileId = JsonPath.from(uploadIngestableFile.body().asString()).getString(\"data.files[0].dataFile.id\");\n+\n+        System.out.println(\"Orig file id \" + origFileId);\n+\n+        logger.fine(\"Orig file id: \" + origFileId);\n+        assertNotNull(origFileId);\n+        assertNotEquals(\"\",origFileId);\n+\n+        // Give file time to ingest\n+        \n+        assertTrue(\"Failed test if Ingest Lock exceeds max duration \" + pathToFileThatGoesThroughIngest , UtilIT.sleepForLock(datasetId.longValue(), \"Ingest\", apiToken, UtilIT.MAXIMUM_INGEST_LOCK_DURATION));\n+        \n+        Response origXml = UtilIT.getFileMetadata(origFileId, null, apiToken);\n+        assertEquals(200, origXml.getStatusCode());\n \n \n+        String stringOrigXml = origXml.getBody().prettyPrint();\n+\n+        InputStream variableData = origXml.body().asInputStream();\n+\n+        Map<Long, VariableMetadata> mapVarToVarMet = new HashMap<Long, VariableMetadata>();\n+        Map<Long,VarGroup> varGroupMap = new HashMap<Long, VarGroup>();\n+        try {\n+            XMLInputFactory factory = XMLInputFactory.newInstance();\n+            XMLStreamReader xmlr = factory.createXMLStreamReader(variableData);\n+            VariableMetadataDDIParser vmdp = new VariableMetadataDDIParser();\n+\n+            vmdp.processDataDscr(xmlr, mapVarToVarMet, varGroupMap);\n+\n+        } catch (XMLStreamException e) {\n+            logger.warning(e.getMessage());\n+            assertEquals(0,1);\n+        }\n+\n+\n+        //Test here\n+        String updatedContent = \"\";\n+        try {\n+            updatedContent = new String(Files.readAllBytes(Paths.get(\"src/test/resources/xml/dct.xml\")));\n+        } catch (IOException e) {\n+            logger.warning(e.getMessage());\n+            assertEquals(0,1);\n+        }\n+        Long replV1168 = 0L;\n+        Long replV1169 = 0L;\n+        Long replV1170 = 0L;\n+        int numberVariables = 0;\n+        for (VariableMetadata var : mapVarToVarMet.values()) {\n+            if (var.getLabel().equals(\"gender\")) {\n+                replV1170 = var.getDataVariable().getId();\n+                numberVariables = numberVariables +1;\n+            } else if (var.getLabel().equals(\"weight\")) {\n+                replV1168 = var.getDataVariable().getId();\n+                numberVariables = numberVariables +1;\n+            } else if (var.getLabel().equals(\"age_rollup\")) {\n+                replV1169 = var.getDataVariable().getId();\n+                numberVariables = numberVariables +1;\n+            }\n+        }\n+        assertEquals(3, numberVariables);\n+\n+        updatedContent = updatedContent.replaceAll(\"v1168\", \"v\" + replV1168 );\n+        updatedContent = updatedContent.replaceAll(\"v1169\", \"v\" + replV1169 );\n+        updatedContent = updatedContent.replaceAll(\"v1170\", \"v\" + replV1170 );\n+\n+        //edit draft vesrsion\n+        Response editDDIResponse = UtilIT.editDDI(updatedContent, origFileId, apiToken);\n+\n+        editDDIResponse.prettyPrint();\n+        assertEquals(200, editDDIResponse.getStatusCode());\n+\n+\n+\n+        UtilIT.publishDataverseViaNativeApi(dataverseAlias, apiToken).then().assertThat().statusCode(OK.getStatusCode());\n+        UtilIT.publishDatasetViaNativeApi(datasetId, \"major\", apiToken).then().assertThat().statusCode(OK.getStatusCode());\n+\n+        Response getDatasetJsonBeforeUpdate = UtilIT.nativeGet(datasetId, apiToken);\n+        getDatasetJsonBeforeUpdate.prettyPrint();\n+        getDatasetJsonBeforeUpdate.then().assertThat()\n+                .statusCode(OK.getStatusCode())\n+                .body(\"data.latestVersion.files[0].label\", equalTo(\"dct.tab\"));\n+        \n+        String pathToJsonFile = \"doc/sphinx-guides/source/_static/api/dataset-update-metadata.json\";\n+        Response updateTitle = UtilIT.updateDatasetMetadataViaNative(datasetPid, pathToJsonFile, apiToken);\n+        updateTitle.prettyPrint();\n+        updateTitle.then().assertThat()\n+                .statusCode(OK.getStatusCode());\n+        \n+        // shouldn't be able to update current unless you're a super user\n+\n+        UtilIT.publishDatasetViaNativeApi(datasetId, \"updatecurrent\", apiToken).then().assertThat().statusCode(FORBIDDEN.getStatusCode());\n+        \n+        Response makeSuperUser = UtilIT.makeSuperUser(username);\n+                \n+        //should work after making super user\n+        \n+        UtilIT.publishDatasetViaNativeApi(datasetId, \"updatecurrent\", apiToken).then().assertThat().statusCode(OK.getStatusCode());\n+        \n+        Response getDatasetJsonAfterUpdate = UtilIT.nativeGet(datasetId, apiToken);\n+        getDatasetJsonAfterUpdate.prettyPrint();\n+        getDatasetJsonAfterUpdate.then().assertThat()\n+                .statusCode(OK.getStatusCode());\n+        \n+    }\n     \n }\n", "next_change": {"commit": "b6376dacedb9bc20440cc776c3b8791cdc68ef37", "changed_code": [{"header": "diff --git a/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java b/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java\nindex 0e1ae91eef..a6b5bb7c6a 100644\n--- a/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java\n+++ b/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java\n", "chunk": "@@ -2594,150 +2584,4 @@ createDataset = UtilIT.createRandomDatasetViaNativeApi(dataverse1Alias, apiToken\n         \n     }\n     \n-    @Test\n-    public void testCuratePublishedDatasetVersionCommand() throws IOException {\n-        Response createUser = UtilIT.createRandomUser();\n-        createUser.prettyPrint();\n-        createUser.then().assertThat()\n-                .statusCode(OK.getStatusCode());\n-        String apiToken = UtilIT.getApiTokenFromResponse(createUser);\n-        String username = UtilIT.getUsernameFromResponse(createUser);\n-        \n-        \n-        Response createDataverse = UtilIT.createRandomDataverse(apiToken);\n-        createDataverse.prettyPrint();\n-        createDataverse.then().assertThat()\n-                .statusCode(CREATED.getStatusCode());\n-\n-        String dataverseAlias = UtilIT.getAliasFromResponse(createDataverse);\n-\n-        Response createDataset = UtilIT.createRandomDatasetViaNativeApi(dataverseAlias, apiToken);\n-        createDataset.prettyPrint();\n-        createDataset.then().assertThat()\n-                .statusCode(CREATED.getStatusCode());\n-\n-        String datasetPid = JsonPath.from(createDataset.asString()).getString(\"data.persistentId\");\n-        Integer datasetId = JsonPath.from(createDataset.asString()).getInt(\"data.id\");\n-\n-        Path pathtoScript = Paths.get(java.nio.file.Files.createTempDirectory(null) + File.separator + \"run.sh\");\n-        java.nio.file.Files.write(pathtoScript, \"#!/bin/bash\\necho hello\".getBytes());\n-\n-        JsonObjectBuilder json1 = Json.createObjectBuilder()\n-                .add(\"description\", \"A script to reproduce results.\")\n-                .add(\"directoryLabel\", \"code\");\n-\n-        \n-        \n-\n-        String pathToFileThatGoesThroughIngest = \"src/test/resources/sav/dct.sav\";\n-        Response uploadIngestableFile = UtilIT.uploadFileViaNative(datasetId.toString(), pathToFileThatGoesThroughIngest, apiToken);\n-        uploadIngestableFile.then().assertThat()\n-                .statusCode(OK.getStatusCode());\n-        uploadIngestableFile.prettyPrint();\n-\n-        String origFileId = JsonPath.from(uploadIngestableFile.body().asString()).getString(\"data.files[0].dataFile.id\");\n-\n-        System.out.println(\"Orig file id \" + origFileId);\n-\n-        logger.fine(\"Orig file id: \" + origFileId);\n-        assertNotNull(origFileId);\n-        assertNotEquals(\"\",origFileId);\n-\n-        // Give file time to ingest\n-        \n-        assertTrue(\"Failed test if Ingest Lock exceeds max duration \" + pathToFileThatGoesThroughIngest , UtilIT.sleepForLock(datasetId.longValue(), \"Ingest\", apiToken, UtilIT.MAXIMUM_INGEST_LOCK_DURATION));\n-        \n-        Response origXml = UtilIT.getFileMetadata(origFileId, null, apiToken);\n-        assertEquals(200, origXml.getStatusCode());\n-\n-\n-        String stringOrigXml = origXml.getBody().prettyPrint();\n-\n-        InputStream variableData = origXml.body().asInputStream();\n-\n-        Map<Long, VariableMetadata> mapVarToVarMet = new HashMap<Long, VariableMetadata>();\n-        Map<Long,VarGroup> varGroupMap = new HashMap<Long, VarGroup>();\n-        try {\n-            XMLInputFactory factory = XMLInputFactory.newInstance();\n-            XMLStreamReader xmlr = factory.createXMLStreamReader(variableData);\n-            VariableMetadataDDIParser vmdp = new VariableMetadataDDIParser();\n-\n-            vmdp.processDataDscr(xmlr, mapVarToVarMet, varGroupMap);\n-\n-        } catch (XMLStreamException e) {\n-            logger.warning(e.getMessage());\n-            assertEquals(0,1);\n-        }\n-\n-\n-        //Test here\n-        String updatedContent = \"\";\n-        try {\n-            updatedContent = new String(Files.readAllBytes(Paths.get(\"src/test/resources/xml/dct.xml\")));\n-        } catch (IOException e) {\n-            logger.warning(e.getMessage());\n-            assertEquals(0,1);\n-        }\n-        Long replV1168 = 0L;\n-        Long replV1169 = 0L;\n-        Long replV1170 = 0L;\n-        int numberVariables = 0;\n-        for (VariableMetadata var : mapVarToVarMet.values()) {\n-            if (var.getLabel().equals(\"gender\")) {\n-                replV1170 = var.getDataVariable().getId();\n-                numberVariables = numberVariables +1;\n-            } else if (var.getLabel().equals(\"weight\")) {\n-                replV1168 = var.getDataVariable().getId();\n-                numberVariables = numberVariables +1;\n-            } else if (var.getLabel().equals(\"age_rollup\")) {\n-                replV1169 = var.getDataVariable().getId();\n-                numberVariables = numberVariables +1;\n-            }\n-        }\n-        assertEquals(3, numberVariables);\n-\n-        updatedContent = updatedContent.replaceAll(\"v1168\", \"v\" + replV1168 );\n-        updatedContent = updatedContent.replaceAll(\"v1169\", \"v\" + replV1169 );\n-        updatedContent = updatedContent.replaceAll(\"v1170\", \"v\" + replV1170 );\n-\n-        //edit draft vesrsion\n-        Response editDDIResponse = UtilIT.editDDI(updatedContent, origFileId, apiToken);\n-\n-        editDDIResponse.prettyPrint();\n-        assertEquals(200, editDDIResponse.getStatusCode());\n-\n-\n-\n-        UtilIT.publishDataverseViaNativeApi(dataverseAlias, apiToken).then().assertThat().statusCode(OK.getStatusCode());\n-        UtilIT.publishDatasetViaNativeApi(datasetId, \"major\", apiToken).then().assertThat().statusCode(OK.getStatusCode());\n-\n-        Response getDatasetJsonBeforeUpdate = UtilIT.nativeGet(datasetId, apiToken);\n-        getDatasetJsonBeforeUpdate.prettyPrint();\n-        getDatasetJsonBeforeUpdate.then().assertThat()\n-                .statusCode(OK.getStatusCode())\n-                .body(\"data.latestVersion.files[0].label\", equalTo(\"dct.tab\"));\n-        \n-        String pathToJsonFile = \"doc/sphinx-guides/source/_static/api/dataset-update-metadata.json\";\n-        Response updateTitle = UtilIT.updateDatasetMetadataViaNative(datasetPid, pathToJsonFile, apiToken);\n-        updateTitle.prettyPrint();\n-        updateTitle.then().assertThat()\n-                .statusCode(OK.getStatusCode());\n-        \n-        // shouldn't be able to update current unless you're a super user\n-\n-        UtilIT.publishDatasetViaNativeApi(datasetId, \"updatecurrent\", apiToken).then().assertThat().statusCode(FORBIDDEN.getStatusCode());\n-        \n-        Response makeSuperUser = UtilIT.makeSuperUser(username);\n-                \n-        //should work after making super user\n-        \n-        UtilIT.publishDatasetViaNativeApi(datasetId, \"updatecurrent\", apiToken).then().assertThat().statusCode(OK.getStatusCode());\n-        \n-        Response getDatasetJsonAfterUpdate = UtilIT.nativeGet(datasetId, apiToken);\n-        getDatasetJsonAfterUpdate.prettyPrint();\n-        getDatasetJsonAfterUpdate.then().assertThat()\n-                .statusCode(OK.getStatusCode());\n-        \n-    }\n-    \n }\n", "next_change": {"commit": "28f7c6ea067f1e5697bf1dd80bb5b8021bc962c9", "changed_code": [{"header": "diff --git a/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java b/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java\nindex a6b5bb7c6a..611985acb1 100644\n--- a/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java\n+++ b/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java\n", "chunk": "@@ -2584,4 +2587,69 @@ createDataset = UtilIT.createRandomDatasetViaNativeApi(dataverse1Alias, apiToken\n         \n     }\n     \n+    /**\n+     * In this test we are restricting a file and testing that terms of accees\n+     * or request access is required\n+     *\n+     * Export at the dataset level is always the public version.\n+     *\n+     */\n+    @Test\n+    public void testRestrictFileTermsOfUseAndAccess() throws IOException {\n+\n+        Response createUser = UtilIT.createRandomUser();\n+        createUser.prettyPrint();\n+        String authorUsername = UtilIT.getUsernameFromResponse(createUser);\n+        String authorApiToken = UtilIT.getApiTokenFromResponse(createUser);\n+\n+        Response createDataverse = UtilIT.createRandomDataverse(authorApiToken);\n+        createDataverse.prettyPrint();\n+        createDataverse.then().assertThat()\n+                .statusCode(CREATED.getStatusCode());\n+        String dataverseAlias = UtilIT.getAliasFromResponse(createDataverse);\n+\n+        Response createDataset = UtilIT.createRandomDatasetViaNativeApi(dataverseAlias, authorApiToken);\n+        createDataset.prettyPrint();\n+        createDataset.then().assertThat()\n+                .statusCode(CREATED.getStatusCode());\n+\n+        Integer datasetId = UtilIT.getDatasetIdFromResponse(createDataset);\n+        String datasetPid = JsonPath.from(createDataset.asString()).getString(\"data.persistentId\");\n+\n+        Path pathToFile = Paths.get(java.nio.file.Files.createTempDirectory(null) + File.separator + \"data.csv\");\n+        String contentOfCsv = \"\"\n+                + \"name,pounds,species\\n\"\n+                + \"Marshall,40,dog\\n\"\n+                + \"Tiger,17,cat\\n\"\n+                + \"Panther,21,cat\\n\";\n+        java.nio.file.Files.write(pathToFile, contentOfCsv.getBytes());\n+\n+        Response uploadFile = UtilIT.uploadFileViaNative(datasetId.toString(), pathToFile.toString(), authorApiToken);\n+        uploadFile.prettyPrint();\n+        uploadFile.then().assertThat()\n+                .statusCode(OK.getStatusCode())\n+                .body(\"data.files[0].label\", equalTo(\"data.csv\"));\n+\n+        String fileId = JsonPath.from(uploadFile.body().asString()).getString(\"data.files[0].dataFile.id\");\n+\n+        assertTrue(\"Failed test if Ingest Lock exceeds max duration \" + pathToFile, UtilIT.sleepForLock(datasetId.longValue(), \"Ingest\", authorApiToken, UtilIT.MAXIMUM_INGEST_LOCK_DURATION));\n+\n+        Response restrictFile = UtilIT.restrictFile(fileId, true, authorApiToken);\n+        restrictFile.prettyPrint();\n+        restrictFile.then().assertThat().statusCode(OK.getStatusCode());\n+\n+        Response publishDataverse = UtilIT.publishDataverseViaNativeApi(dataverseAlias, authorApiToken);\n+        publishDataverse.then().assertThat().statusCode(OK.getStatusCode());\n+        Response publishDataset = UtilIT.publishDatasetViaNativeApi(datasetPid, \"major\", authorApiToken);\n+        publishDataset.then().assertThat().statusCode(OK.getStatusCode());\n+        \n+        \n+        //not allowed to remove request access if there are retricted files\n+        \n+        Response disallowRequestAccess = UtilIT.allowAccessRequests(datasetPid, false, authorApiToken);\n+        disallowRequestAccess.prettyPrint();\n+        disallowRequestAccess.then().assertThat().statusCode(BAD_REQUEST.getStatusCode());\n+        \n+    }\n+    \n }\n", "next_change": {"commit": "05a06eb764b20c88f816fec9fd119da808cfb9b9", "changed_code": [{"header": "diff --git a/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java b/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java\nindex 611985acb1..df88b24ab6 100644\n--- a/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java\n+++ b/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java\n", "chunk": "@@ -2587,68 +2597,149 @@ createDataset = UtilIT.createRandomDatasetViaNativeApi(dataverse1Alias, apiToken\n         \n     }\n     \n-    /**\n-     * In this test we are restricting a file and testing that terms of accees\n-     * or request access is required\n-     *\n-     * Export at the dataset level is always the public version.\n-     *\n-     */\n     @Test\n-    public void testRestrictFileTermsOfUseAndAccess() throws IOException {\n-\n+    public void testCuratePublishedDatasetVersionCommand() throws IOException {\n         Response createUser = UtilIT.createRandomUser();\n         createUser.prettyPrint();\n-        String authorUsername = UtilIT.getUsernameFromResponse(createUser);\n-        String authorApiToken = UtilIT.getApiTokenFromResponse(createUser);\n-\n-        Response createDataverse = UtilIT.createRandomDataverse(authorApiToken);\n+        createUser.then().assertThat()\n+                .statusCode(OK.getStatusCode());\n+        String apiToken = UtilIT.getApiTokenFromResponse(createUser);\n+        String username = UtilIT.getUsernameFromResponse(createUser);\n+        \n+        \n+        Response createDataverse = UtilIT.createRandomDataverse(apiToken);\n         createDataverse.prettyPrint();\n         createDataverse.then().assertThat()\n                 .statusCode(CREATED.getStatusCode());\n+\n         String dataverseAlias = UtilIT.getAliasFromResponse(createDataverse);\n \n-        Response createDataset = UtilIT.createRandomDatasetViaNativeApi(dataverseAlias, authorApiToken);\n+        Response createDataset = UtilIT.createRandomDatasetViaNativeApi(dataverseAlias, apiToken);\n         createDataset.prettyPrint();\n         createDataset.then().assertThat()\n                 .statusCode(CREATED.getStatusCode());\n \n-        Integer datasetId = UtilIT.getDatasetIdFromResponse(createDataset);\n         String datasetPid = JsonPath.from(createDataset.asString()).getString(\"data.persistentId\");\n+        Integer datasetId = JsonPath.from(createDataset.asString()).getInt(\"data.id\");\n \n-        Path pathToFile = Paths.get(java.nio.file.Files.createTempDirectory(null) + File.separator + \"data.csv\");\n-        String contentOfCsv = \"\"\n-                + \"name,pounds,species\\n\"\n-                + \"Marshall,40,dog\\n\"\n-                + \"Tiger,17,cat\\n\"\n-                + \"Panther,21,cat\\n\";\n-        java.nio.file.Files.write(pathToFile, contentOfCsv.getBytes());\n+        Path pathtoScript = Paths.get(java.nio.file.Files.createTempDirectory(null) + File.separator + \"run.sh\");\n+        java.nio.file.Files.write(pathtoScript, \"#!/bin/bash\\necho hello\".getBytes());\n \n-        Response uploadFile = UtilIT.uploadFileViaNative(datasetId.toString(), pathToFile.toString(), authorApiToken);\n-        uploadFile.prettyPrint();\n-        uploadFile.then().assertThat()\n-                .statusCode(OK.getStatusCode())\n-                .body(\"data.files[0].label\", equalTo(\"data.csv\"));\n+        JsonObjectBuilder json1 = Json.createObjectBuilder()\n+                .add(\"description\", \"A script to reproduce results.\")\n+                .add(\"directoryLabel\", \"code\");\n \n-        String fileId = JsonPath.from(uploadFile.body().asString()).getString(\"data.files[0].dataFile.id\");\n+        \n+        \n \n-        assertTrue(\"Failed test if Ingest Lock exceeds max duration \" + pathToFile, UtilIT.sleepForLock(datasetId.longValue(), \"Ingest\", authorApiToken, UtilIT.MAXIMUM_INGEST_LOCK_DURATION));\n+        String pathToFileThatGoesThroughIngest = \"src/test/resources/sav/dct.sav\";\n+        Response uploadIngestableFile = UtilIT.uploadFileViaNative(datasetId.toString(), pathToFileThatGoesThroughIngest, apiToken);\n+        uploadIngestableFile.then().assertThat()\n+                .statusCode(OK.getStatusCode());\n+        uploadIngestableFile.prettyPrint();\n \n-        Response restrictFile = UtilIT.restrictFile(fileId, true, authorApiToken);\n-        restrictFile.prettyPrint();\n-        restrictFile.then().assertThat().statusCode(OK.getStatusCode());\n+        String origFileId = JsonPath.from(uploadIngestableFile.body().asString()).getString(\"data.files[0].dataFile.id\");\n \n-        Response publishDataverse = UtilIT.publishDataverseViaNativeApi(dataverseAlias, authorApiToken);\n-        publishDataverse.then().assertThat().statusCode(OK.getStatusCode());\n-        Response publishDataset = UtilIT.publishDatasetViaNativeApi(datasetPid, \"major\", authorApiToken);\n-        publishDataset.then().assertThat().statusCode(OK.getStatusCode());\n+        System.out.println(\"Orig file id \" + origFileId);\n+\n+        logger.fine(\"Orig file id: \" + origFileId);\n+        assertNotNull(origFileId);\n+        assertNotEquals(\"\",origFileId);\n+\n+        // Give file time to ingest\n         \n+        assertTrue(\"Failed test if Ingest Lock exceeds max duration \" + pathToFileThatGoesThroughIngest , UtilIT.sleepForLock(datasetId.longValue(), \"Ingest\", apiToken, UtilIT.MAXIMUM_INGEST_LOCK_DURATION));\n         \n-        //not allowed to remove request access if there are retricted files\n+        Response origXml = UtilIT.getFileMetadata(origFileId, null, apiToken);\n+        assertEquals(200, origXml.getStatusCode());\n+\n+\n+        String stringOrigXml = origXml.getBody().prettyPrint();\n+\n+        InputStream variableData = origXml.body().asInputStream();\n+\n+        Map<Long, VariableMetadata> mapVarToVarMet = new HashMap<Long, VariableMetadata>();\n+        Map<Long,VarGroup> varGroupMap = new HashMap<Long, VarGroup>();\n+        try {\n+            XMLInputFactory factory = XMLInputFactory.newInstance();\n+            XMLStreamReader xmlr = factory.createXMLStreamReader(variableData);\n+            VariableMetadataDDIParser vmdp = new VariableMetadataDDIParser();\n+\n+            vmdp.processDataDscr(xmlr, mapVarToVarMet, varGroupMap);\n+\n+        } catch (XMLStreamException e) {\n+            logger.warning(e.getMessage());\n+            assertEquals(0,1);\n+        }\n+\n+\n+        //Test here\n+        String updatedContent = \"\";\n+        try {\n+            updatedContent = new String(Files.readAllBytes(Paths.get(\"src/test/resources/xml/dct.xml\")));\n+        } catch (IOException e) {\n+            logger.warning(e.getMessage());\n+            assertEquals(0,1);\n+        }\n+        Long replV1168 = 0L;\n+        Long replV1169 = 0L;\n+        Long replV1170 = 0L;\n+        int numberVariables = 0;\n+        for (VariableMetadata var : mapVarToVarMet.values()) {\n+            if (var.getLabel().equals(\"gender\")) {\n+                replV1170 = var.getDataVariable().getId();\n+                numberVariables = numberVariables +1;\n+            } else if (var.getLabel().equals(\"weight\")) {\n+                replV1168 = var.getDataVariable().getId();\n+                numberVariables = numberVariables +1;\n+            } else if (var.getLabel().equals(\"age_rollup\")) {\n+                replV1169 = var.getDataVariable().getId();\n+                numberVariables = numberVariables +1;\n+            }\n+        }\n+        assertEquals(3, numberVariables);\n+\n+        updatedContent = updatedContent.replaceAll(\"v1168\", \"v\" + replV1168 );\n+        updatedContent = updatedContent.replaceAll(\"v1169\", \"v\" + replV1169 );\n+        updatedContent = updatedContent.replaceAll(\"v1170\", \"v\" + replV1170 );\n+\n+        //edit draft vesrsion\n+        Response editDDIResponse = UtilIT.editDDI(updatedContent, origFileId, apiToken);\n+\n+        editDDIResponse.prettyPrint();\n+        assertEquals(200, editDDIResponse.getStatusCode());\n+\n+\n+\n+        UtilIT.publishDataverseViaNativeApi(dataverseAlias, apiToken).then().assertThat().statusCode(OK.getStatusCode());\n+        UtilIT.publishDatasetViaNativeApi(datasetId, \"major\", apiToken).then().assertThat().statusCode(OK.getStatusCode());\n+\n+        Response getDatasetJsonBeforeUpdate = UtilIT.nativeGet(datasetId, apiToken);\n+        getDatasetJsonBeforeUpdate.prettyPrint();\n+        getDatasetJsonBeforeUpdate.then().assertThat()\n+                .statusCode(OK.getStatusCode())\n+                .body(\"data.latestVersion.files[0].label\", equalTo(\"dct.tab\"));\n+        \n+        String pathToJsonFile = \"doc/sphinx-guides/source/_static/api/dataset-update-metadata.json\";\n+        Response updateTitle = UtilIT.updateDatasetMetadataViaNative(datasetPid, pathToJsonFile, apiToken);\n+        updateTitle.prettyPrint();\n+        updateTitle.then().assertThat()\n+                .statusCode(OK.getStatusCode());\n+        \n+        // shouldn't be able to update current unless you're a super user\n+\n+        UtilIT.publishDatasetViaNativeApi(datasetId, \"updatecurrent\", apiToken).then().assertThat().statusCode(FORBIDDEN.getStatusCode());\n+        \n+        Response makeSuperUser = UtilIT.makeSuperUser(username);\n+                \n+        //should work after making super user\n+        \n+        UtilIT.publishDatasetViaNativeApi(datasetId, \"updatecurrent\", apiToken).then().assertThat().statusCode(OK.getStatusCode());\n         \n-        Response disallowRequestAccess = UtilIT.allowAccessRequests(datasetPid, false, authorApiToken);\n-        disallowRequestAccess.prettyPrint();\n-        disallowRequestAccess.then().assertThat().statusCode(BAD_REQUEST.getStatusCode());\n+        Response getDatasetJsonAfterUpdate = UtilIT.nativeGet(datasetId, apiToken);\n+        getDatasetJsonAfterUpdate.prettyPrint();\n+        getDatasetJsonAfterUpdate.then().assertThat()\n+                .statusCode(OK.getStatusCode());\n         \n     }\n     \n", "next_change": {"commit": "9094b94828e5737d93e8425bca3a9675b23cfb24", "changed_code": [{"header": "diff --git a/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java b/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java\nindex df88b24ab6..33cf2927ce 100644\n--- a/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java\n+++ b/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java\n", "chunk": "@@ -2596,151 +2586,7 @@ createDataset = UtilIT.createRandomDatasetViaNativeApi(dataverse1Alias, apiToken\n                 .body(\"data.latestVersion.files[0].directoryLabel\", equalTo(\"code\"));\n         \n     }\n-    \n-    @Test\n-    public void testCuratePublishedDatasetVersionCommand() throws IOException {\n-        Response createUser = UtilIT.createRandomUser();\n-        createUser.prettyPrint();\n-        createUser.then().assertThat()\n-                .statusCode(OK.getStatusCode());\n-        String apiToken = UtilIT.getApiTokenFromResponse(createUser);\n-        String username = UtilIT.getUsernameFromResponse(createUser);\n-        \n-        \n-        Response createDataverse = UtilIT.createRandomDataverse(apiToken);\n-        createDataverse.prettyPrint();\n-        createDataverse.then().assertThat()\n-                .statusCode(CREATED.getStatusCode());\n-\n-        String dataverseAlias = UtilIT.getAliasFromResponse(createDataverse);\n-\n-        Response createDataset = UtilIT.createRandomDatasetViaNativeApi(dataverseAlias, apiToken);\n-        createDataset.prettyPrint();\n-        createDataset.then().assertThat()\n-                .statusCode(CREATED.getStatusCode());\n-\n-        String datasetPid = JsonPath.from(createDataset.asString()).getString(\"data.persistentId\");\n-        Integer datasetId = JsonPath.from(createDataset.asString()).getInt(\"data.id\");\n-\n-        Path pathtoScript = Paths.get(java.nio.file.Files.createTempDirectory(null) + File.separator + \"run.sh\");\n-        java.nio.file.Files.write(pathtoScript, \"#!/bin/bash\\necho hello\".getBytes());\n-\n-        JsonObjectBuilder json1 = Json.createObjectBuilder()\n-                .add(\"description\", \"A script to reproduce results.\")\n-                .add(\"directoryLabel\", \"code\");\n-\n-        \n-        \n-\n-        String pathToFileThatGoesThroughIngest = \"src/test/resources/sav/dct.sav\";\n-        Response uploadIngestableFile = UtilIT.uploadFileViaNative(datasetId.toString(), pathToFileThatGoesThroughIngest, apiToken);\n-        uploadIngestableFile.then().assertThat()\n-                .statusCode(OK.getStatusCode());\n-        uploadIngestableFile.prettyPrint();\n-\n-        String origFileId = JsonPath.from(uploadIngestableFile.body().asString()).getString(\"data.files[0].dataFile.id\");\n-\n-        System.out.println(\"Orig file id \" + origFileId);\n-\n-        logger.fine(\"Orig file id: \" + origFileId);\n-        assertNotNull(origFileId);\n-        assertNotEquals(\"\",origFileId);\n-\n-        // Give file time to ingest\n-        \n-        assertTrue(\"Failed test if Ingest Lock exceeds max duration \" + pathToFileThatGoesThroughIngest , UtilIT.sleepForLock(datasetId.longValue(), \"Ingest\", apiToken, UtilIT.MAXIMUM_INGEST_LOCK_DURATION));\n-        \n-        Response origXml = UtilIT.getFileMetadata(origFileId, null, apiToken);\n-        assertEquals(200, origXml.getStatusCode());\n \n \n-        String stringOrigXml = origXml.getBody().prettyPrint();\n-\n-        InputStream variableData = origXml.body().asInputStream();\n-\n-        Map<Long, VariableMetadata> mapVarToVarMet = new HashMap<Long, VariableMetadata>();\n-        Map<Long,VarGroup> varGroupMap = new HashMap<Long, VarGroup>();\n-        try {\n-            XMLInputFactory factory = XMLInputFactory.newInstance();\n-            XMLStreamReader xmlr = factory.createXMLStreamReader(variableData);\n-            VariableMetadataDDIParser vmdp = new VariableMetadataDDIParser();\n-\n-            vmdp.processDataDscr(xmlr, mapVarToVarMet, varGroupMap);\n-\n-        } catch (XMLStreamException e) {\n-            logger.warning(e.getMessage());\n-            assertEquals(0,1);\n-        }\n-\n-\n-        //Test here\n-        String updatedContent = \"\";\n-        try {\n-            updatedContent = new String(Files.readAllBytes(Paths.get(\"src/test/resources/xml/dct.xml\")));\n-        } catch (IOException e) {\n-            logger.warning(e.getMessage());\n-            assertEquals(0,1);\n-        }\n-        Long replV1168 = 0L;\n-        Long replV1169 = 0L;\n-        Long replV1170 = 0L;\n-        int numberVariables = 0;\n-        for (VariableMetadata var : mapVarToVarMet.values()) {\n-            if (var.getLabel().equals(\"gender\")) {\n-                replV1170 = var.getDataVariable().getId();\n-                numberVariables = numberVariables +1;\n-            } else if (var.getLabel().equals(\"weight\")) {\n-                replV1168 = var.getDataVariable().getId();\n-                numberVariables = numberVariables +1;\n-            } else if (var.getLabel().equals(\"age_rollup\")) {\n-                replV1169 = var.getDataVariable().getId();\n-                numberVariables = numberVariables +1;\n-            }\n-        }\n-        assertEquals(3, numberVariables);\n-\n-        updatedContent = updatedContent.replaceAll(\"v1168\", \"v\" + replV1168 );\n-        updatedContent = updatedContent.replaceAll(\"v1169\", \"v\" + replV1169 );\n-        updatedContent = updatedContent.replaceAll(\"v1170\", \"v\" + replV1170 );\n-\n-        //edit draft vesrsion\n-        Response editDDIResponse = UtilIT.editDDI(updatedContent, origFileId, apiToken);\n-\n-        editDDIResponse.prettyPrint();\n-        assertEquals(200, editDDIResponse.getStatusCode());\n-\n-\n-\n-        UtilIT.publishDataverseViaNativeApi(dataverseAlias, apiToken).then().assertThat().statusCode(OK.getStatusCode());\n-        UtilIT.publishDatasetViaNativeApi(datasetId, \"major\", apiToken).then().assertThat().statusCode(OK.getStatusCode());\n-\n-        Response getDatasetJsonBeforeUpdate = UtilIT.nativeGet(datasetId, apiToken);\n-        getDatasetJsonBeforeUpdate.prettyPrint();\n-        getDatasetJsonBeforeUpdate.then().assertThat()\n-                .statusCode(OK.getStatusCode())\n-                .body(\"data.latestVersion.files[0].label\", equalTo(\"dct.tab\"));\n-        \n-        String pathToJsonFile = \"doc/sphinx-guides/source/_static/api/dataset-update-metadata.json\";\n-        Response updateTitle = UtilIT.updateDatasetMetadataViaNative(datasetPid, pathToJsonFile, apiToken);\n-        updateTitle.prettyPrint();\n-        updateTitle.then().assertThat()\n-                .statusCode(OK.getStatusCode());\n-        \n-        // shouldn't be able to update current unless you're a super user\n-\n-        UtilIT.publishDatasetViaNativeApi(datasetId, \"updatecurrent\", apiToken).then().assertThat().statusCode(FORBIDDEN.getStatusCode());\n-        \n-        Response makeSuperUser = UtilIT.makeSuperUser(username);\n-                \n-        //should work after making super user\n-        \n-        UtilIT.publishDatasetViaNativeApi(datasetId, \"updatecurrent\", apiToken).then().assertThat().statusCode(OK.getStatusCode());\n-        \n-        Response getDatasetJsonAfterUpdate = UtilIT.nativeGet(datasetId, apiToken);\n-        getDatasetJsonAfterUpdate.prettyPrint();\n-        getDatasetJsonAfterUpdate.then().assertThat()\n-                .statusCode(OK.getStatusCode());\n-        \n-    }\n     \n }\n", "next_change": {"commit": "95beeaa1f0764b36aa0348cb675b8836a7aac6a2", "changed_code": [{"header": "diff --git a/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java b/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java\nindex 33cf2927ce..81ad3aba4a 100644\n--- a/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java\n+++ b/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java\n", "chunk": "@@ -2589,4 +2599,150 @@ createDataset = UtilIT.createRandomDatasetViaNativeApi(dataverse1Alias, apiToken\n \n \n     \n+    @Test\n+    public void testCuratePublishedDatasetVersionCommand() throws IOException {\n+        Response createUser = UtilIT.createRandomUser();\n+        createUser.prettyPrint();\n+        createUser.then().assertThat()\n+                .statusCode(OK.getStatusCode());\n+        String apiToken = UtilIT.getApiTokenFromResponse(createUser);\n+        String username = UtilIT.getUsernameFromResponse(createUser);\n+        \n+        \n+        Response createDataverse = UtilIT.createRandomDataverse(apiToken);\n+        createDataverse.prettyPrint();\n+        createDataverse.then().assertThat()\n+                .statusCode(CREATED.getStatusCode());\n+\n+        String dataverseAlias = UtilIT.getAliasFromResponse(createDataverse);\n+\n+        Response createDataset = UtilIT.createRandomDatasetViaNativeApi(dataverseAlias, apiToken);\n+        createDataset.prettyPrint();\n+        createDataset.then().assertThat()\n+                .statusCode(CREATED.getStatusCode());\n+\n+        String datasetPid = JsonPath.from(createDataset.asString()).getString(\"data.persistentId\");\n+        Integer datasetId = JsonPath.from(createDataset.asString()).getInt(\"data.id\");\n+\n+        Path pathtoScript = Paths.get(java.nio.file.Files.createTempDirectory(null) + File.separator + \"run.sh\");\n+        java.nio.file.Files.write(pathtoScript, \"#!/bin/bash\\necho hello\".getBytes());\n+\n+        JsonObjectBuilder json1 = Json.createObjectBuilder()\n+                .add(\"description\", \"A script to reproduce results.\")\n+                .add(\"directoryLabel\", \"code\");\n+\n+        \n+        \n+\n+        String pathToFileThatGoesThroughIngest = \"src/test/resources/sav/dct.sav\";\n+        Response uploadIngestableFile = UtilIT.uploadFileViaNative(datasetId.toString(), pathToFileThatGoesThroughIngest, apiToken);\n+        uploadIngestableFile.then().assertThat()\n+                .statusCode(OK.getStatusCode());\n+        uploadIngestableFile.prettyPrint();\n+\n+        String origFileId = JsonPath.from(uploadIngestableFile.body().asString()).getString(\"data.files[0].dataFile.id\");\n+\n+        System.out.println(\"Orig file id \" + origFileId);\n+\n+        logger.fine(\"Orig file id: \" + origFileId);\n+        assertNotNull(origFileId);\n+        assertNotEquals(\"\",origFileId);\n+\n+        // Give file time to ingest\n+        \n+        assertTrue(\"Failed test if Ingest Lock exceeds max duration \" + pathToFileThatGoesThroughIngest , UtilIT.sleepForLock(datasetId.longValue(), \"Ingest\", apiToken, UtilIT.MAXIMUM_INGEST_LOCK_DURATION));\n+        \n+        Response origXml = UtilIT.getFileMetadata(origFileId, null, apiToken);\n+        assertEquals(200, origXml.getStatusCode());\n+\n+\n+        String stringOrigXml = origXml.getBody().prettyPrint();\n+\n+        InputStream variableData = origXml.body().asInputStream();\n+\n+        Map<Long, VariableMetadata> mapVarToVarMet = new HashMap<Long, VariableMetadata>();\n+        Map<Long,VarGroup> varGroupMap = new HashMap<Long, VarGroup>();\n+        try {\n+            XMLInputFactory factory = XMLInputFactory.newInstance();\n+            XMLStreamReader xmlr = factory.createXMLStreamReader(variableData);\n+            VariableMetadataDDIParser vmdp = new VariableMetadataDDIParser();\n+\n+            vmdp.processDataDscr(xmlr, mapVarToVarMet, varGroupMap);\n+\n+        } catch (XMLStreamException e) {\n+            logger.warning(e.getMessage());\n+            assertEquals(0,1);\n+        }\n+\n+\n+        //Test here\n+        String updatedContent = \"\";\n+        try {\n+            updatedContent = new String(Files.readAllBytes(Paths.get(\"src/test/resources/xml/dct.xml\")));\n+        } catch (IOException e) {\n+            logger.warning(e.getMessage());\n+            assertEquals(0,1);\n+        }\n+        Long replV1168 = 0L;\n+        Long replV1169 = 0L;\n+        Long replV1170 = 0L;\n+        int numberVariables = 0;\n+        for (VariableMetadata var : mapVarToVarMet.values()) {\n+            if (var.getLabel().equals(\"gender\")) {\n+                replV1170 = var.getDataVariable().getId();\n+                numberVariables = numberVariables +1;\n+            } else if (var.getLabel().equals(\"weight\")) {\n+                replV1168 = var.getDataVariable().getId();\n+                numberVariables = numberVariables +1;\n+            } else if (var.getLabel().equals(\"age_rollup\")) {\n+                replV1169 = var.getDataVariable().getId();\n+                numberVariables = numberVariables +1;\n+            }\n+        }\n+        assertEquals(3, numberVariables);\n+\n+        updatedContent = updatedContent.replaceAll(\"v1168\", \"v\" + replV1168 );\n+        updatedContent = updatedContent.replaceAll(\"v1169\", \"v\" + replV1169 );\n+        updatedContent = updatedContent.replaceAll(\"v1170\", \"v\" + replV1170 );\n+\n+        //edit draft vesrsion\n+        Response editDDIResponse = UtilIT.editDDI(updatedContent, origFileId, apiToken);\n+\n+        editDDIResponse.prettyPrint();\n+        assertEquals(200, editDDIResponse.getStatusCode());\n+\n+\n+\n+        UtilIT.publishDataverseViaNativeApi(dataverseAlias, apiToken).then().assertThat().statusCode(OK.getStatusCode());\n+        UtilIT.publishDatasetViaNativeApi(datasetId, \"major\", apiToken).then().assertThat().statusCode(OK.getStatusCode());\n+\n+        Response getDatasetJsonBeforeUpdate = UtilIT.nativeGet(datasetId, apiToken);\n+        getDatasetJsonBeforeUpdate.prettyPrint();\n+        getDatasetJsonBeforeUpdate.then().assertThat()\n+                .statusCode(OK.getStatusCode())\n+                .body(\"data.latestVersion.files[0].label\", equalTo(\"dct.tab\"));\n+        \n+        String pathToJsonFile = \"doc/sphinx-guides/source/_static/api/dataset-update-metadata.json\";\n+        Response updateTitle = UtilIT.updateDatasetMetadataViaNative(datasetPid, pathToJsonFile, apiToken);\n+        updateTitle.prettyPrint();\n+        updateTitle.then().assertThat()\n+                .statusCode(OK.getStatusCode());\n+        \n+        // shouldn't be able to update current unless you're a super user\n+\n+        UtilIT.publishDatasetViaNativeApi(datasetId, \"updatecurrent\", apiToken).then().assertThat().statusCode(FORBIDDEN.getStatusCode());\n+        \n+        Response makeSuperUser = UtilIT.makeSuperUser(username);\n+                \n+        //should work after making super user\n+        \n+        UtilIT.publishDatasetViaNativeApi(datasetId, \"updatecurrent\", apiToken).then().assertThat().statusCode(OK.getStatusCode());\n+        \n+        Response getDatasetJsonAfterUpdate = UtilIT.nativeGet(datasetId, apiToken);\n+        getDatasetJsonAfterUpdate.prettyPrint();\n+        getDatasetJsonAfterUpdate.then().assertThat()\n+                .statusCode(OK.getStatusCode());\n+        \n+    }\n+    \n }\n", "next_change": {"commit": "2b3c8b7e67892815dbb3ee761640fba368a7fec8", "changed_code": [{"header": "diff --git a/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java b/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java\nindex 81ad3aba4a..0349b70daa 100644\n--- a/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java\n+++ b/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java\n", "chunk": "@@ -2745,4 +2745,69 @@ createDataset = UtilIT.createRandomDatasetViaNativeApi(dataverse1Alias, apiToken\n         \n     }\n     \n+    /**\n+     * In this test we are restricting a file and testing that terms of accees\n+     * or request access is required\n+     *\n+     * Export at the dataset level is always the public version.\n+     *\n+     */\n+    @Test\n+    public void testRestrictFileTermsOfUseAndAccess() throws IOException {\n+\n+        Response createUser = UtilIT.createRandomUser();\n+        createUser.prettyPrint();\n+        String authorUsername = UtilIT.getUsernameFromResponse(createUser);\n+        String authorApiToken = UtilIT.getApiTokenFromResponse(createUser);\n+\n+        Response createDataverse = UtilIT.createRandomDataverse(authorApiToken);\n+        createDataverse.prettyPrint();\n+        createDataverse.then().assertThat()\n+                .statusCode(CREATED.getStatusCode());\n+        String dataverseAlias = UtilIT.getAliasFromResponse(createDataverse);\n+\n+        Response createDataset = UtilIT.createRandomDatasetViaNativeApi(dataverseAlias, authorApiToken);\n+        createDataset.prettyPrint();\n+        createDataset.then().assertThat()\n+                .statusCode(CREATED.getStatusCode());\n+\n+        Integer datasetId = UtilIT.getDatasetIdFromResponse(createDataset);\n+        String datasetPid = JsonPath.from(createDataset.asString()).getString(\"data.persistentId\");\n+\n+        Path pathToFile = Paths.get(java.nio.file.Files.createTempDirectory(null) + File.separator + \"data.csv\");\n+        String contentOfCsv = \"\"\n+                + \"name,pounds,species\\n\"\n+                + \"Marshall,40,dog\\n\"\n+                + \"Tiger,17,cat\\n\"\n+                + \"Panther,21,cat\\n\";\n+        java.nio.file.Files.write(pathToFile, contentOfCsv.getBytes());\n+\n+        Response uploadFile = UtilIT.uploadFileViaNative(datasetId.toString(), pathToFile.toString(), authorApiToken);\n+        uploadFile.prettyPrint();\n+        uploadFile.then().assertThat()\n+                .statusCode(OK.getStatusCode())\n+                .body(\"data.files[0].label\", equalTo(\"data.csv\"));\n+\n+        String fileId = JsonPath.from(uploadFile.body().asString()).getString(\"data.files[0].dataFile.id\");\n+\n+        assertTrue(\"Failed test if Ingest Lock exceeds max duration \" + pathToFile, UtilIT.sleepForLock(datasetId.longValue(), \"Ingest\", authorApiToken, UtilIT.MAXIMUM_INGEST_LOCK_DURATION));\n+\n+        Response restrictFile = UtilIT.restrictFile(fileId, true, authorApiToken);\n+        restrictFile.prettyPrint();\n+        restrictFile.then().assertThat().statusCode(OK.getStatusCode());\n+\n+        Response publishDataverse = UtilIT.publishDataverseViaNativeApi(dataverseAlias, authorApiToken);\n+        publishDataverse.then().assertThat().statusCode(OK.getStatusCode());\n+        Response publishDataset = UtilIT.publishDatasetViaNativeApi(datasetPid, \"major\", authorApiToken);\n+        publishDataset.then().assertThat().statusCode(OK.getStatusCode());\n+        \n+        \n+        //not allowed to remove request access if there are retricted files\n+        \n+        Response disallowRequestAccess = UtilIT.allowAccessRequests(datasetPid, false, authorApiToken);\n+        disallowRequestAccess.prettyPrint();\n+        disallowRequestAccess.then().assertThat().statusCode(BAD_REQUEST.getStatusCode());\n+        \n+    }\n+    \n }\n", "next_change": {"commit": "9223e7df02f9f829a0e333247971e57706803aa7", "changed_code": [{"header": "diff --git a/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java b/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java\nindex 0349b70daa..77a7a49996 100644\n--- a/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java\n+++ b/src/test/java/edu/harvard/iq/dataverse/api/DatasetsIT.java\n", "chunk": "@@ -2809,5 +2811,101 @@ createDataset = UtilIT.createRandomDatasetViaNativeApi(dataverse1Alias, apiToken\n         disallowRequestAccess.then().assertThat().statusCode(BAD_REQUEST.getStatusCode());\n         \n     }\n-    \n+\n+    /**\n+     * In this test we do CRUD of archivalStatus (Note this and other archiving\n+     * related tests are part of\n+     * https://github.com/harvard-lts/hdc-integration-tests)\n+     *\n+     * This test requires the root dataverse to be published to pass.\n+     */\n+    @Test\n+    public void testArchivalStatusAPI() throws IOException {\n+\n+        Response createUser = UtilIT.createRandomUser();\n+        createUser.prettyPrint();\n+        assertEquals(200, createUser.getStatusCode());\n+        String username = UtilIT.getUsernameFromResponse(createUser);\n+        String apiToken = UtilIT.getApiTokenFromResponse(createUser);\n+        Response makeSuperUser = UtilIT.makeSuperUser(username);\n+        assertEquals(200, makeSuperUser.getStatusCode());\n+\n+        Response createNoAccessUser = UtilIT.createRandomUser();\n+        createNoAccessUser.prettyPrint();\n+        String apiTokenNoAccess = UtilIT.getApiTokenFromResponse(createNoAccessUser);\n+\n+        Response createDataverseResponse = UtilIT.createRandomDataverse(apiToken);\n+        createDataverseResponse.prettyPrint();\n+        String dataverseAlias = UtilIT.getAliasFromResponse(createDataverseResponse);\n+\n+        Response createDatasetResponse = UtilIT.createRandomDatasetViaNativeApi(dataverseAlias, apiToken);\n+        createDatasetResponse.prettyPrint();\n+        Integer datasetId = JsonPath.from(createDatasetResponse.body().asString()).getInt(\"data.id\");\n+\n+        Response getDatasetJsonBeforePublishing = UtilIT.nativeGet(datasetId, apiToken);\n+        getDatasetJsonBeforePublishing.prettyPrint();\n+        String protocol = JsonPath.from(getDatasetJsonBeforePublishing.getBody().asString()).getString(\"data.protocol\");\n+        String authority = JsonPath.from(getDatasetJsonBeforePublishing.getBody().asString())\n+                .getString(\"data.authority\");\n+        String identifier = JsonPath.from(getDatasetJsonBeforePublishing.getBody().asString())\n+                .getString(\"data.identifier\");\n+        String datasetPersistentId = protocol + \":\" + authority + \"/\" + identifier;\n+\n+        Response publishDataverse = UtilIT.publishDataverseViaSword(dataverseAlias, apiToken);\n+        assertEquals(200, publishDataverse.getStatusCode());\n+\n+        logger.info(\"Attempting to publish a major version\");\n+        // Return random sleep 9/13/2019\n+        // Without it we've seen some DB deadlocks\n+        // 3 second sleep, to allow the indexing to finish:\n+\n+        try {\n+            Thread.sleep(3000l);\n+        } catch (InterruptedException iex) {\n+        }\n+\n+        Response publishDataset = UtilIT.publishDatasetViaNativeApi(datasetPersistentId, \"major\", apiToken);\n+        assertEquals(200, publishDataset.getStatusCode());\n+\n+        // Now change the title\n+        Response response = UtilIT.updateDatasetJsonLDMetadata(datasetId, apiToken,\n+                \"{\\\"title\\\": \\\"New Title\\\", \\\"@context\\\":{\\\"title\\\": \\\"http://purl.org/dc/terms/title\\\"}}\", true);\n+        response.then().assertThat().statusCode(OK.getStatusCode());\n+\n+        int status = Status.CONFLICT.getStatusCode();\n+        while (status == Status.CONFLICT.getStatusCode()) {\n+\n+            Response publishV2 = UtilIT.publishDatasetViaNativeApi(datasetPersistentId, \"major\", apiToken);\n+            status = response.thenReturn().statusCode();\n+        }\n+        assertEquals(OK.getStatusCode(), status);\n+\n+        if (!UtilIT.sleepForReindex(datasetPersistentId, apiToken, 3000)) {\n+            logger.info(\"Still indexing after 3 seconds\");\n+        }\n+\n+        //Verify the status is empty\n+        Response nullStatus = UtilIT.getDatasetVersionArchivalStatus(datasetId, \"1.0\", apiToken);\n+        nullStatus.then().assertThat().statusCode(NO_CONTENT.getStatusCode());\n+\n+        //Set it\n+        Response setStatus = UtilIT.setDatasetVersionArchivalStatus(datasetId, \"1.0\", apiToken, \"pending\",\n+                \"almost there\");\n+        setStatus.then().assertThat().statusCode(OK.getStatusCode());\n+\n+        //Get it\n+        Response getStatus = UtilIT.getDatasetVersionArchivalStatus(datasetId, \"1.0\", apiToken);\n+        getStatus.then().assertThat().body(\"data.status\", equalTo(\"pending\")).body(\"data.message\",\n+                equalTo(\"almost there\"));\n+\n+        //Delete it\n+        Response deleteStatus = UtilIT.deleteDatasetVersionArchivalStatus(datasetId, \"1.0\", apiToken);\n+        deleteStatus.then().assertThat().statusCode(OK.getStatusCode());\n+\n+        //Make sure it's gone\n+        Response nullStatus2 = UtilIT.getDatasetVersionArchivalStatus(datasetId, \"1.0\", apiToken);\n+        nullStatus2.then().assertThat().statusCode(NO_CONTENT.getStatusCode());\n+\n+    }\n+\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MjU2NjY5Ng==", "url": "https://github.com/IQSS/dataverse/pull/7414#discussion_r662566696", "body": "I'm happy to see someone updating this old API. \ud83d\ude04 ", "bodyText": "I'm happy to see someone updating this old API. \ud83d\ude04", "bodyHTML": "<p dir=\"auto\">I'm happy to see someone updating this old API. <g-emoji class=\"g-emoji\" alias=\"smile\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f604.png\">\ud83d\ude04</g-emoji></p>", "author": "pdurbin", "createdAt": "2021-07-01T20:19:39Z", "path": "src/main/java/edu/harvard/iq/dataverse/api/DatasetFieldServiceApi.java", "diffHunk": "@@ -168,7 +169,8 @@ public Response getByName(@PathParam(\"name\") String name) {\n                     .add(\"parentAllowsMultiples\", parentAllowsMultiplesDisplay)\n                     .add(\"solrFieldSearchable\", solrFieldSearchable)\n                     .add(\"solrFieldFacetable\", solrFieldFacetable)\n-                    .add(\"isRequired\", isRequired));\n+                    .add(\"isRequired\", isRequired)\n+                    .add(\"uri\", uri));", "originalCommit": "10ef9ff27eb38668bd06234f9bb79545782d36e7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MzE2NjcyOA==", "url": "https://github.com/IQSS/dataverse/pull/7414#discussion_r663166728", "bodyText": "This is mostly a separate thing. Slava pointed out that this API didn't include the URI for a term (which was added with the OAI-ORE/Bag work from QDR). Since this was a one line change related to semantics, I added it here but the rest of the changes do not depend on this API having the extra field.", "author": "qqmyers", "createdAt": "2021-07-02T17:45:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MjU2NjY5Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NDgwMzQ1Ng==", "url": "https://github.com/IQSS/dataverse/pull/7414#discussion_r664803456", "bodyText": "Cool. Why not.", "author": "pdurbin", "createdAt": "2021-07-06T18:54:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MjU2NjY5Ng=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MjU3NDE4Mg==", "url": "https://github.com/IQSS/dataverse/pull/7414#discussion_r662574182", "body": "This should be deleted or set to fine.", "bodyText": "This should be deleted or set to fine.", "bodyHTML": "<p dir=\"auto\">This should be deleted or set to fine.</p>", "author": "pdurbin", "createdAt": "2021-07-01T20:31:23Z", "path": "src/main/java/edu/harvard/iq/dataverse/api/Datasets.java", "diffHunk": "@@ -651,6 +651,96 @@ public Response updateDraftVersion( String jsonBody, @PathParam(\"id\") String id,\n             \n         }\n     }\n+  \n+    @GET\n+    @Path(\"{id}/versions/{versionId}/metadata\")\n+    @Produces(\"application/ld+json, application/json-ld\")\n+    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @PathParam(\"versionId\") String versionId, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n+        try {\n+            DataverseRequest req = createDataverseRequest(findUserOrDie());\n+            DatasetVersion dsv = getDatasetVersionOrDie(req, versionId, findDatasetOrDie(id), uriInfo, headers);\n+            OREMap ore = new OREMap(dsv,\n+                    settingsService.isTrueForKey(SettingsServiceBean.Key.ExcludeEmailFromExport, false));\n+            return ok(ore.getOREMapBuilder(true));\n+\n+        } catch (WrappedResponse ex) {\n+            ex.printStackTrace();\n+            return ex.getResponse();\n+        } catch (Exception jpe) {\n+            logger.log(Level.SEVERE, \"Error getting jsonld metadata for dsv: \", jpe.getLocalizedMessage());\n+            jpe.printStackTrace();\n+            return error(Response.Status.INTERNAL_SERVER_ERROR, jpe.getLocalizedMessage());\n+        }\n+    }\n+\n+    @GET\n+    @Path(\"{id}/metadata\")\n+    @Produces(\"application/ld+json, application/json-ld\")\n+    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n+        return getVersionJsonLDMetadata(id, \":draft\", uriInfo, headers);\n+    }\n+            \n+    @PUT\n+    @Path(\"{id}/metadata\")\n+    @Consumes(\"application/ld+json, application/json-ld\")\n+    public Response updateVersionMetadata(String jsonLDBody, @PathParam(\"id\") String id, @DefaultValue(\"false\") @QueryParam(\"replace\") boolean replaceTerms) {\n+\n+        try {\n+            Dataset ds = findDatasetOrDie(id);\n+            DataverseRequest req = createDataverseRequest(findUserOrDie());\n+            DatasetVersion dsv = ds.getEditVersion();\n+            boolean updateDraft = ds.getLatestVersion().isDraft();\n+            dsv = JSONLDUtil.updateDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc, !replaceTerms, false);\n+            \n+            DatasetVersion managedVersion;\n+            if (updateDraft) {\n+                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n+                managedVersion = managedDataset.getEditVersion();\n+            } else {\n+                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n+            }\n+            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n+            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n+\n+        } catch (WrappedResponse ex) {\n+            return ex.getResponse();\n+        } catch (JsonParsingException jpe) {\n+            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n+            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n+        }\n+    }\n+    \n+    @PUT\n+    @Path(\"{id}/metadata/delete\")\n+    @Consumes(\"application/ld+json, application/json-ld\")\n+    public Response deleteMetadata(String jsonLDBody, @PathParam(\"id\") String id) {\n+        logger.info(\"In delteMetadata\");", "originalCommit": "10ef9ff27eb38668bd06234f9bb79545782d36e7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MzE2Nzc0Ng==", "url": "https://github.com/IQSS/dataverse/pull/7414#discussion_r663167746", "bodyText": "removed", "author": "qqmyers", "createdAt": "2021-07-02T17:46:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MjU3NDE4Mg=="}], "type": "inlineReview", "revised_code": {"commit": "00d53ee4d43fd49a81faa1f31b9b0c6a1cad8b46", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex 608d9554f6..7fd3b1ab63 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -651,96 +609,6 @@ public class Datasets extends AbstractApiBean {\n             \n         }\n     }\n-  \n-    @GET\n-    @Path(\"{id}/versions/{versionId}/metadata\")\n-    @Produces(\"application/ld+json, application/json-ld\")\n-    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @PathParam(\"versionId\") String versionId, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n-        try {\n-            DataverseRequest req = createDataverseRequest(findUserOrDie());\n-            DatasetVersion dsv = getDatasetVersionOrDie(req, versionId, findDatasetOrDie(id), uriInfo, headers);\n-            OREMap ore = new OREMap(dsv,\n-                    settingsService.isTrueForKey(SettingsServiceBean.Key.ExcludeEmailFromExport, false));\n-            return ok(ore.getOREMapBuilder(true));\n-\n-        } catch (WrappedResponse ex) {\n-            ex.printStackTrace();\n-            return ex.getResponse();\n-        } catch (Exception jpe) {\n-            logger.log(Level.SEVERE, \"Error getting jsonld metadata for dsv: \", jpe.getLocalizedMessage());\n-            jpe.printStackTrace();\n-            return error(Response.Status.INTERNAL_SERVER_ERROR, jpe.getLocalizedMessage());\n-        }\n-    }\n-\n-    @GET\n-    @Path(\"{id}/metadata\")\n-    @Produces(\"application/ld+json, application/json-ld\")\n-    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n-        return getVersionJsonLDMetadata(id, \":draft\", uriInfo, headers);\n-    }\n-            \n-    @PUT\n-    @Path(\"{id}/metadata\")\n-    @Consumes(\"application/ld+json, application/json-ld\")\n-    public Response updateVersionMetadata(String jsonLDBody, @PathParam(\"id\") String id, @DefaultValue(\"false\") @QueryParam(\"replace\") boolean replaceTerms) {\n-\n-        try {\n-            Dataset ds = findDatasetOrDie(id);\n-            DataverseRequest req = createDataverseRequest(findUserOrDie());\n-            DatasetVersion dsv = ds.getEditVersion();\n-            boolean updateDraft = ds.getLatestVersion().isDraft();\n-            dsv = JSONLDUtil.updateDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc, !replaceTerms, false);\n-            \n-            DatasetVersion managedVersion;\n-            if (updateDraft) {\n-                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n-                managedVersion = managedDataset.getEditVersion();\n-            } else {\n-                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n-            }\n-            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n-            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n-\n-        } catch (WrappedResponse ex) {\n-            return ex.getResponse();\n-        } catch (JsonParsingException jpe) {\n-            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n-            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n-        }\n-    }\n-    \n-    @PUT\n-    @Path(\"{id}/metadata/delete\")\n-    @Consumes(\"application/ld+json, application/json-ld\")\n-    public Response deleteMetadata(String jsonLDBody, @PathParam(\"id\") String id) {\n-        logger.info(\"In delteMetadata\");\n-        try {\n-            Dataset ds = findDatasetOrDie(id);\n-            DataverseRequest req = createDataverseRequest(findUserOrDie());\n-            DatasetVersion dsv = ds.getEditVersion();\n-            boolean updateDraft = ds.getLatestVersion().isDraft();\n-            dsv = JSONLDUtil.deleteDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc);\n-            logger.info(\"Updating ver\");\n-            DatasetVersion managedVersion;\n-            if (updateDraft) {\n-                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n-                managedVersion = managedDataset.getEditVersion();\n-            } else {\n-                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n-            }\n-            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n-            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n-\n-        } catch (WrappedResponse ex) {\n-            ex.printStackTrace();\n-            return ex.getResponse();\n-        } catch (JsonParsingException jpe) {\n-            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n-            jpe.printStackTrace();\n-            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n-        }\n-    }\n     \n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n", "next_change": {"commit": "b45336c95ecbcee28b88a5b334c2180c86eb63fc", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex 7fd3b1ab63..20874f7065 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -610,6 +611,38 @@ public class Datasets extends AbstractApiBean {\n         }\n     }\n     \n+\t@PUT\n+\t@Path(\"{id}/versions/{versionId}/metadata\")\n+\t@Consumes(\"application/json-ld\")\n+\tpublic Response updateVersionMetadata(String jsonLDBody, @PathParam(\"id\") String id,\n+\t\t\t@PathParam(\"versionId\") String versionId, @QueryParam(\"replace\") boolean replaceTerms) {\n+\n+\t\tif (!\":draft\".equals(versionId)) {\n+\t\t\treturn error(Response.Status.BAD_REQUEST, \"Only the :draft version can be updated\");\n+\t\t}\n+\t\ttry {\n+\t\t\tDataset ds = findDatasetOrDie(id);\n+\t\t\tDataverseRequest req = createDataverseRequest(findUserOrDie());\n+\t\t\tDatasetVersion dsv = ds.getEditVersion();\n+\t\t\tboolean updateDraft = ds.getLatestVersion().isDraft();\n+\t\t\tdsv = JSONLDUtil.updateDatasetVersionFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc, !replaceTerms);\n+\t\t\t\n+\t\t\tDatasetVersion managedVersion;\n+\t\t\tif (updateDraft) {\n+\t\t\t\tDataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n+\t\t\t\tmanagedVersion = managedDataset.getEditVersion();\n+\t\t\t} else {\n+\t\t\t\tmanagedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n+\t\t\t}\n+\t\t\tString info = updateDraft ? \"Version Updated\" : \"Version Created\";\n+\t\t\treturn ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n+\n+\t\t} catch (WrappedResponse ex) {\n+\t\t\treturn ex.getResponse();\n+\n+\t\t}\n+\t}\n+    \n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n     public Response deleteVersionMetadata(String jsonBody, @PathParam(\"id\") String id) throws WrappedResponse {\n", "next_change": {"commit": "6d537ce15b5989abb1bacd85a48ae17b447cd1cd", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex 20874f7065..a376e663e9 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -639,7 +641,9 @@ public class Datasets extends AbstractApiBean {\n \n \t\t} catch (WrappedResponse ex) {\n \t\t\treturn ex.getResponse();\n-\n+\t\t} catch (JsonParsingException jpe) {\n+\t\t    logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n+            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n \t\t}\n \t}\n     \n", "next_change": {"commit": "24cfcfa08257d9245b2d6f033c679e59c4424316", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex a376e663e9..8b9118741b 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -640,9 +696,11 @@ public class Datasets extends AbstractApiBean {\n \t\t\treturn ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n \n \t\t} catch (WrappedResponse ex) {\n+\t\t    ex.printStackTrace();\n \t\t\treturn ex.getResponse();\n \t\t} catch (JsonParsingException jpe) {\n \t\t    logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n+\t\t    jpe.printStackTrace();\n             return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n \t\t}\n \t}\n", "next_change": {"commit": "38a1d38f37f8ef0d9d75db51a5b6707f58fb8227", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex 8b9118741b..1db28d5dcc 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -614,96 +615,6 @@ public class Datasets extends AbstractApiBean {\n             \n         }\n     }\n-  \n-    @GET\n-    @Path(\"{id}/versions/{versionId}/metadata\")\n-    @Produces(\"application/json-ld\")\n-    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @PathParam(\"versionId\") String versionId, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n-        try {\n-            DataverseRequest req = createDataverseRequest(findUserOrDie());\n-            DatasetVersion dsv = getDatasetVersionOrDie(req, versionId, findDatasetOrDie(id), uriInfo, headers);\n-            OREMap ore = new OREMap(dsv,\n-                    settingsService.isTrueForKey(SettingsServiceBean.Key.ExcludeEmailFromExport, false));\n-            return ok(ore.getOREMapBuilder(true));\n-\n-        } catch (WrappedResponse ex) {\n-            ex.printStackTrace();\n-            return ex.getResponse();\n-        } catch (Exception jpe) {\n-            logger.log(Level.SEVERE, \"Error getting jsonld metadata for dsv: \", jpe.getLocalizedMessage());\n-            jpe.printStackTrace();\n-            return error(Response.Status.INTERNAL_SERVER_ERROR, jpe.getLocalizedMessage());\n-        }\n-    }\n-\n-    @GET\n-    @Path(\"{id}/metadata\")\n-    @Produces(\"application/json-ld\")\n-    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n-        return getVersionJsonLDMetadata(id, \":draft\", uriInfo, headers);\n-    }\n-            \n-    @PUT\n-    @Path(\"{id}/metadata\")\n-    @Consumes(\"application/json-ld\")\n-    public Response updateVersionMetadata(String jsonLDBody, @PathParam(\"id\") String id, @DefaultValue(\"false\") @QueryParam(\"replace\") boolean replaceTerms) {\n-\n-        try {\n-            Dataset ds = findDatasetOrDie(id);\n-            DataverseRequest req = createDataverseRequest(findUserOrDie());\n-            DatasetVersion dsv = ds.getEditVersion();\n-            boolean updateDraft = ds.getLatestVersion().isDraft();\n-            dsv = JSONLDUtil.updateDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc, !replaceTerms, false);\n-            \n-            DatasetVersion managedVersion;\n-            if (updateDraft) {\n-                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n-                managedVersion = managedDataset.getEditVersion();\n-            } else {\n-                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n-            }\n-            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n-            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n-\n-        } catch (WrappedResponse ex) {\n-            return ex.getResponse();\n-        } catch (JsonParsingException jpe) {\n-            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n-            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n-        }\n-    }\n-    \n-\t@PUT\n-\t@Path(\"{id}/metadata/delete\")\n-\t@Consumes(\"application/json-ld\")\n-\tpublic Response deleteMetadata(String jsonLDBody, @PathParam(\"id\") String id) {\n-        logger.info(\"In delteMetadata\");\n-\t\ttry {\n-\t\t\tDataset ds = findDatasetOrDie(id);\n-\t\t\tDataverseRequest req = createDataverseRequest(findUserOrDie());\n-\t\t\tDatasetVersion dsv = ds.getEditVersion();\n-\t\t\tboolean updateDraft = ds.getLatestVersion().isDraft();\n-\t\t\tdsv = JSONLDUtil.deleteDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc);\n-\t\t\tlogger.info(\"Updating ver\");\n-\t\t\tDatasetVersion managedVersion;\n-\t\t\tif (updateDraft) {\n-\t\t\t\tDataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n-\t\t\t\tmanagedVersion = managedDataset.getEditVersion();\n-\t\t\t} else {\n-\t\t\t\tmanagedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n-\t\t\t}\n-\t\t\tString info = updateDraft ? \"Version Updated\" : \"Version Created\";\n-\t\t\treturn ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n-\n-\t\t} catch (WrappedResponse ex) {\n-\t\t    ex.printStackTrace();\n-\t\t\treturn ex.getResponse();\n-\t\t} catch (JsonParsingException jpe) {\n-\t\t    logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n-\t\t    jpe.printStackTrace();\n-            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n-\t\t}\n-\t}\n     \n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n", "next_change": {"commit": "5305e759e7e20774e3a435936a3ea2009bf1d058", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex 1db28d5dcc..9eb82996de 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -615,6 +647,96 @@ public class Datasets extends AbstractApiBean {\n             \n         }\n     }\n+  \n+    @GET\n+    @Path(\"{id}/versions/{versionId}/metadata\")\n+    @Produces(\"application/json-ld\")\n+    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @PathParam(\"versionId\") String versionId, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n+        try {\n+            DataverseRequest req = createDataverseRequest(findUserOrDie());\n+            DatasetVersion dsv = getDatasetVersionOrDie(req, versionId, findDatasetOrDie(id), uriInfo, headers);\n+            OREMap ore = new OREMap(dsv,\n+                    settingsService.isTrueForKey(SettingsServiceBean.Key.ExcludeEmailFromExport, false));\n+            return ok(ore.getOREMapBuilder(true));\n+\n+        } catch (WrappedResponse ex) {\n+            ex.printStackTrace();\n+            return ex.getResponse();\n+        } catch (Exception jpe) {\n+            logger.log(Level.SEVERE, \"Error getting jsonld metadata for dsv: \", jpe.getLocalizedMessage());\n+            jpe.printStackTrace();\n+            return error(Response.Status.INTERNAL_SERVER_ERROR, jpe.getLocalizedMessage());\n+        }\n+    }\n+\n+    @GET\n+    @Path(\"{id}/metadata\")\n+    @Produces(\"application/json-ld\")\n+    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n+        return getVersionJsonLDMetadata(id, \":draft\", uriInfo, headers);\n+    }\n+            \n+    @PUT\n+    @Path(\"{id}/metadata\")\n+    @Consumes(\"application/json-ld\")\n+    public Response updateVersionMetadata(String jsonLDBody, @PathParam(\"id\") String id, @DefaultValue(\"false\") @QueryParam(\"replace\") boolean replaceTerms) {\n+\n+        try {\n+            Dataset ds = findDatasetOrDie(id);\n+            DataverseRequest req = createDataverseRequest(findUserOrDie());\n+            DatasetVersion dsv = ds.getEditVersion();\n+            boolean updateDraft = ds.getLatestVersion().isDraft();\n+            dsv = JSONLDUtil.updateDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc, !replaceTerms, false);\n+            \n+            DatasetVersion managedVersion;\n+            if (updateDraft) {\n+                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n+                managedVersion = managedDataset.getEditVersion();\n+            } else {\n+                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n+            }\n+            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n+            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n+\n+        } catch (WrappedResponse ex) {\n+            return ex.getResponse();\n+        } catch (JsonParsingException jpe) {\n+            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n+            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n+        }\n+    }\n+    \n+    @PUT\n+    @Path(\"{id}/metadata/delete\")\n+    @Consumes(\"application/json-ld\")\n+    public Response deleteMetadata(String jsonLDBody, @PathParam(\"id\") String id) {\n+        logger.info(\"In delteMetadata\");\n+        try {\n+            Dataset ds = findDatasetOrDie(id);\n+            DataverseRequest req = createDataverseRequest(findUserOrDie());\n+            DatasetVersion dsv = ds.getEditVersion();\n+            boolean updateDraft = ds.getLatestVersion().isDraft();\n+            dsv = JSONLDUtil.deleteDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc);\n+            logger.info(\"Updating ver\");\n+            DatasetVersion managedVersion;\n+            if (updateDraft) {\n+                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n+                managedVersion = managedDataset.getEditVersion();\n+            } else {\n+                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n+            }\n+            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n+            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n+\n+        } catch (WrappedResponse ex) {\n+            ex.printStackTrace();\n+            return ex.getResponse();\n+        } catch (JsonParsingException jpe) {\n+            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n+            jpe.printStackTrace();\n+            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n+        }\n+    }\n     \n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n", "next_change": {"commit": "2fa243abe63c60b07a714070acd4a62d5c8d6e96", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex 9eb82996de..c2854b33e2 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -636,108 +644,18 @@ public class Datasets extends AbstractApiBean {\n //            DatasetVersion managedVersion = execCommand( updateDraft\n //                                                             ? new UpdateDatasetVersionCommand(req, incomingVersion)\n //                                                             : new CreateDatasetVersionCommand(req, ds, incomingVersion));\n-            return ok( json(managedVersion) );\n-                    \n+            return ok(json(managedVersion));\n+\n         } catch (JsonParseException ex) {\n             logger.log(Level.SEVERE, \"Semantic error parsing dataset version Json: \" + ex.getMessage(), ex);\n-            return error( Response.Status.BAD_REQUEST, \"Error parsing dataset version: \" + ex.getMessage() );\n-            \n-        } catch (WrappedResponse ex) {\n-            return ex.getResponse();\n-            \n-        }\n-    }\n-  \n-    @GET\n-    @Path(\"{id}/versions/{versionId}/metadata\")\n-    @Produces(\"application/json-ld\")\n-    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @PathParam(\"versionId\") String versionId, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n-        try {\n-            DataverseRequest req = createDataverseRequest(findUserOrDie());\n-            DatasetVersion dsv = getDatasetVersionOrDie(req, versionId, findDatasetOrDie(id), uriInfo, headers);\n-            OREMap ore = new OREMap(dsv,\n-                    settingsService.isTrueForKey(SettingsServiceBean.Key.ExcludeEmailFromExport, false));\n-            return ok(ore.getOREMapBuilder(true));\n+            return error(Response.Status.BAD_REQUEST, \"Error parsing dataset version: \" + ex.getMessage());\n \n         } catch (WrappedResponse ex) {\n-            ex.printStackTrace();\n             return ex.getResponse();\n-        } catch (Exception jpe) {\n-            logger.log(Level.SEVERE, \"Error getting jsonld metadata for dsv: \", jpe.getLocalizedMessage());\n-            jpe.printStackTrace();\n-            return error(Response.Status.INTERNAL_SERVER_ERROR, jpe.getLocalizedMessage());\n-        }\n-    }\n-\n-    @GET\n-    @Path(\"{id}/metadata\")\n-    @Produces(\"application/json-ld\")\n-    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n-        return getVersionJsonLDMetadata(id, \":draft\", uriInfo, headers);\n-    }\n-            \n-    @PUT\n-    @Path(\"{id}/metadata\")\n-    @Consumes(\"application/json-ld\")\n-    public Response updateVersionMetadata(String jsonLDBody, @PathParam(\"id\") String id, @DefaultValue(\"false\") @QueryParam(\"replace\") boolean replaceTerms) {\n-\n-        try {\n-            Dataset ds = findDatasetOrDie(id);\n-            DataverseRequest req = createDataverseRequest(findUserOrDie());\n-            DatasetVersion dsv = ds.getEditVersion();\n-            boolean updateDraft = ds.getLatestVersion().isDraft();\n-            dsv = JSONLDUtil.updateDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc, !replaceTerms, false);\n-            \n-            DatasetVersion managedVersion;\n-            if (updateDraft) {\n-                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n-                managedVersion = managedDataset.getEditVersion();\n-            } else {\n-                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n-            }\n-            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n-            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n \n-        } catch (WrappedResponse ex) {\n-            return ex.getResponse();\n-        } catch (JsonParsingException jpe) {\n-            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n-            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n         }\n     }\n-    \n-    @PUT\n-    @Path(\"{id}/metadata/delete\")\n-    @Consumes(\"application/json-ld\")\n-    public Response deleteMetadata(String jsonLDBody, @PathParam(\"id\") String id) {\n-        logger.info(\"In delteMetadata\");\n-        try {\n-            Dataset ds = findDatasetOrDie(id);\n-            DataverseRequest req = createDataverseRequest(findUserOrDie());\n-            DatasetVersion dsv = ds.getEditVersion();\n-            boolean updateDraft = ds.getLatestVersion().isDraft();\n-            dsv = JSONLDUtil.deleteDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc);\n-            logger.info(\"Updating ver\");\n-            DatasetVersion managedVersion;\n-            if (updateDraft) {\n-                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n-                managedVersion = managedDataset.getEditVersion();\n-            } else {\n-                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n-            }\n-            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n-            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n \n-        } catch (WrappedResponse ex) {\n-            ex.printStackTrace();\n-            return ex.getResponse();\n-        } catch (JsonParsingException jpe) {\n-            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n-            jpe.printStackTrace();\n-            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n-        }\n-    }\n-    \n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n     public Response deleteVersionMetadata(String jsonBody, @PathParam(\"id\") String id) throws WrappedResponse {\n", "next_change": {"commit": "99a1ecff4a08f72f8f01c4eb171424795009c8c5", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex c2854b33e2..8836eb62e4 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -644,18 +652,18 @@ public class Datasets extends AbstractApiBean {\n //            DatasetVersion managedVersion = execCommand( updateDraft\n //                                                             ? new UpdateDatasetVersionCommand(req, incomingVersion)\n //                                                             : new CreateDatasetVersionCommand(req, ds, incomingVersion));\n-            return ok(json(managedVersion));\n-\n+            return ok( json(managedVersion) );\n+                    \n         } catch (JsonParseException ex) {\n             logger.log(Level.SEVERE, \"Semantic error parsing dataset version Json: \" + ex.getMessage(), ex);\n-            return error(Response.Status.BAD_REQUEST, \"Error parsing dataset version: \" + ex.getMessage());\n-\n+            return error( Response.Status.BAD_REQUEST, \"Error parsing dataset version: \" + ex.getMessage() );\n+            \n         } catch (WrappedResponse ex) {\n             return ex.getResponse();\n-\n+            \n         }\n     }\n-\n+    \n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n     public Response deleteVersionMetadata(String jsonBody, @PathParam(\"id\") String id) throws WrappedResponse {\n", "next_change": {"commit": "3a3235451900dacd9dbf48ea33ed445f128214a1", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex 8836eb62e4..777627437d 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -663,6 +651,96 @@ public class Datasets extends AbstractApiBean {\n             \n         }\n     }\n+  \n+    @GET\n+    @Path(\"{id}/versions/{versionId}/metadata\")\n+    @Produces(\"application/json-ld\")\n+    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @PathParam(\"versionId\") String versionId, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n+        try {\n+            DataverseRequest req = createDataverseRequest(findUserOrDie());\n+            DatasetVersion dsv = getDatasetVersionOrDie(req, versionId, findDatasetOrDie(id), uriInfo, headers);\n+            OREMap ore = new OREMap(dsv,\n+                    settingsService.isTrueForKey(SettingsServiceBean.Key.ExcludeEmailFromExport, false));\n+            return ok(ore.getOREMapBuilder(true));\n+\n+        } catch (WrappedResponse ex) {\n+            ex.printStackTrace();\n+            return ex.getResponse();\n+        } catch (Exception jpe) {\n+            logger.log(Level.SEVERE, \"Error getting jsonld metadata for dsv: \", jpe.getLocalizedMessage());\n+            jpe.printStackTrace();\n+            return error(Response.Status.INTERNAL_SERVER_ERROR, jpe.getLocalizedMessage());\n+        }\n+    }\n+\n+    @GET\n+    @Path(\"{id}/metadata\")\n+    @Produces(\"application/json-ld\")\n+    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n+        return getVersionJsonLDMetadata(id, \":draft\", uriInfo, headers);\n+    }\n+            \n+    @PUT\n+    @Path(\"{id}/metadata\")\n+    @Consumes(\"application/json-ld\")\n+    public Response updateVersionMetadata(String jsonLDBody, @PathParam(\"id\") String id, @DefaultValue(\"false\") @QueryParam(\"replace\") boolean replaceTerms) {\n+\n+        try {\n+            Dataset ds = findDatasetOrDie(id);\n+            DataverseRequest req = createDataverseRequest(findUserOrDie());\n+            DatasetVersion dsv = ds.getEditVersion();\n+            boolean updateDraft = ds.getLatestVersion().isDraft();\n+            dsv = JSONLDUtil.updateDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc, !replaceTerms, false);\n+            \n+            DatasetVersion managedVersion;\n+            if (updateDraft) {\n+                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n+                managedVersion = managedDataset.getEditVersion();\n+            } else {\n+                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n+            }\n+            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n+            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n+\n+        } catch (WrappedResponse ex) {\n+            return ex.getResponse();\n+        } catch (JsonParsingException jpe) {\n+            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n+            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n+        }\n+    }\n+    \n+    @PUT\n+    @Path(\"{id}/metadata/delete\")\n+    @Consumes(\"application/json-ld\")\n+    public Response deleteMetadata(String jsonLDBody, @PathParam(\"id\") String id) {\n+        logger.info(\"In delteMetadata\");\n+        try {\n+            Dataset ds = findDatasetOrDie(id);\n+            DataverseRequest req = createDataverseRequest(findUserOrDie());\n+            DatasetVersion dsv = ds.getEditVersion();\n+            boolean updateDraft = ds.getLatestVersion().isDraft();\n+            dsv = JSONLDUtil.deleteDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc);\n+            logger.info(\"Updating ver\");\n+            DatasetVersion managedVersion;\n+            if (updateDraft) {\n+                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n+                managedVersion = managedDataset.getEditVersion();\n+            } else {\n+                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n+            }\n+            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n+            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n+\n+        } catch (WrappedResponse ex) {\n+            ex.printStackTrace();\n+            return ex.getResponse();\n+        } catch (JsonParsingException jpe) {\n+            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n+            jpe.printStackTrace();\n+            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n+        }\n+    }\n     \n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n", "next_change": {"commit": "6cd23a1b327f84fd649a0b802322532df92d345a", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex 777627437d..afeb10e304 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -651,96 +663,6 @@ public class Datasets extends AbstractApiBean {\n             \n         }\n     }\n-  \n-    @GET\n-    @Path(\"{id}/versions/{versionId}/metadata\")\n-    @Produces(\"application/json-ld\")\n-    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @PathParam(\"versionId\") String versionId, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n-        try {\n-            DataverseRequest req = createDataverseRequest(findUserOrDie());\n-            DatasetVersion dsv = getDatasetVersionOrDie(req, versionId, findDatasetOrDie(id), uriInfo, headers);\n-            OREMap ore = new OREMap(dsv,\n-                    settingsService.isTrueForKey(SettingsServiceBean.Key.ExcludeEmailFromExport, false));\n-            return ok(ore.getOREMapBuilder(true));\n-\n-        } catch (WrappedResponse ex) {\n-            ex.printStackTrace();\n-            return ex.getResponse();\n-        } catch (Exception jpe) {\n-            logger.log(Level.SEVERE, \"Error getting jsonld metadata for dsv: \", jpe.getLocalizedMessage());\n-            jpe.printStackTrace();\n-            return error(Response.Status.INTERNAL_SERVER_ERROR, jpe.getLocalizedMessage());\n-        }\n-    }\n-\n-    @GET\n-    @Path(\"{id}/metadata\")\n-    @Produces(\"application/json-ld\")\n-    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n-        return getVersionJsonLDMetadata(id, \":draft\", uriInfo, headers);\n-    }\n-            \n-    @PUT\n-    @Path(\"{id}/metadata\")\n-    @Consumes(\"application/json-ld\")\n-    public Response updateVersionMetadata(String jsonLDBody, @PathParam(\"id\") String id, @DefaultValue(\"false\") @QueryParam(\"replace\") boolean replaceTerms) {\n-\n-        try {\n-            Dataset ds = findDatasetOrDie(id);\n-            DataverseRequest req = createDataverseRequest(findUserOrDie());\n-            DatasetVersion dsv = ds.getEditVersion();\n-            boolean updateDraft = ds.getLatestVersion().isDraft();\n-            dsv = JSONLDUtil.updateDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc, !replaceTerms, false);\n-            \n-            DatasetVersion managedVersion;\n-            if (updateDraft) {\n-                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n-                managedVersion = managedDataset.getEditVersion();\n-            } else {\n-                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n-            }\n-            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n-            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n-\n-        } catch (WrappedResponse ex) {\n-            return ex.getResponse();\n-        } catch (JsonParsingException jpe) {\n-            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n-            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n-        }\n-    }\n-    \n-    @PUT\n-    @Path(\"{id}/metadata/delete\")\n-    @Consumes(\"application/json-ld\")\n-    public Response deleteMetadata(String jsonLDBody, @PathParam(\"id\") String id) {\n-        logger.info(\"In delteMetadata\");\n-        try {\n-            Dataset ds = findDatasetOrDie(id);\n-            DataverseRequest req = createDataverseRequest(findUserOrDie());\n-            DatasetVersion dsv = ds.getEditVersion();\n-            boolean updateDraft = ds.getLatestVersion().isDraft();\n-            dsv = JSONLDUtil.deleteDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc);\n-            logger.info(\"Updating ver\");\n-            DatasetVersion managedVersion;\n-            if (updateDraft) {\n-                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n-                managedVersion = managedDataset.getEditVersion();\n-            } else {\n-                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n-            }\n-            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n-            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n-\n-        } catch (WrappedResponse ex) {\n-            ex.printStackTrace();\n-            return ex.getResponse();\n-        } catch (JsonParsingException jpe) {\n-            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n-            jpe.printStackTrace();\n-            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n-        }\n-    }\n     \n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n", "next_change": {"commit": "1e7fcd17d7b102bd141e94b262ee6a53b60d2f56", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex afeb10e304..c2cb940901 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -663,6 +655,96 @@ public class Datasets extends AbstractApiBean {\n             \n         }\n     }\n+  \n+    @GET\n+    @Path(\"{id}/versions/{versionId}/metadata\")\n+    @Produces(\"application/json-ld\")\n+    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @PathParam(\"versionId\") String versionId, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n+        try {\n+            DataverseRequest req = createDataverseRequest(findUserOrDie());\n+            DatasetVersion dsv = getDatasetVersionOrDie(req, versionId, findDatasetOrDie(id), uriInfo, headers);\n+            OREMap ore = new OREMap(dsv,\n+                    settingsService.isTrueForKey(SettingsServiceBean.Key.ExcludeEmailFromExport, false));\n+            return ok(ore.getOREMapBuilder(true));\n+\n+        } catch (WrappedResponse ex) {\n+            ex.printStackTrace();\n+            return ex.getResponse();\n+        } catch (Exception jpe) {\n+            logger.log(Level.SEVERE, \"Error getting jsonld metadata for dsv: \", jpe.getLocalizedMessage());\n+            jpe.printStackTrace();\n+            return error(Response.Status.INTERNAL_SERVER_ERROR, jpe.getLocalizedMessage());\n+        }\n+    }\n+\n+    @GET\n+    @Path(\"{id}/metadata\")\n+    @Produces(\"application/json-ld\")\n+    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n+        return getVersionJsonLDMetadata(id, \":draft\", uriInfo, headers);\n+    }\n+            \n+    @PUT\n+    @Path(\"{id}/metadata\")\n+    @Consumes(\"application/json-ld\")\n+    public Response updateVersionMetadata(String jsonLDBody, @PathParam(\"id\") String id, @DefaultValue(\"false\") @QueryParam(\"replace\") boolean replaceTerms) {\n+\n+        try {\n+            Dataset ds = findDatasetOrDie(id);\n+            DataverseRequest req = createDataverseRequest(findUserOrDie());\n+            DatasetVersion dsv = ds.getEditVersion();\n+            boolean updateDraft = ds.getLatestVersion().isDraft();\n+            dsv = JSONLDUtil.updateDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc, !replaceTerms, false);\n+            \n+            DatasetVersion managedVersion;\n+            if (updateDraft) {\n+                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n+                managedVersion = managedDataset.getEditVersion();\n+            } else {\n+                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n+            }\n+            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n+            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n+\n+        } catch (WrappedResponse ex) {\n+            return ex.getResponse();\n+        } catch (JsonParsingException jpe) {\n+            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n+            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n+        }\n+    }\n+    \n+    @PUT\n+    @Path(\"{id}/metadata/delete\")\n+    @Consumes(\"application/json-ld\")\n+    public Response deleteMetadata(String jsonLDBody, @PathParam(\"id\") String id) {\n+        logger.info(\"In delteMetadata\");\n+        try {\n+            Dataset ds = findDatasetOrDie(id);\n+            DataverseRequest req = createDataverseRequest(findUserOrDie());\n+            DatasetVersion dsv = ds.getEditVersion();\n+            boolean updateDraft = ds.getLatestVersion().isDraft();\n+            dsv = JSONLDUtil.deleteDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc);\n+            logger.info(\"Updating ver\");\n+            DatasetVersion managedVersion;\n+            if (updateDraft) {\n+                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n+                managedVersion = managedDataset.getEditVersion();\n+            } else {\n+                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n+            }\n+            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n+            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n+\n+        } catch (WrappedResponse ex) {\n+            ex.printStackTrace();\n+            return ex.getResponse();\n+        } catch (JsonParsingException jpe) {\n+            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n+            jpe.printStackTrace();\n+            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n+        }\n+    }\n     \n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n", "next_change": {"commit": "491fe42c07944db5fc4686a4699ffb1399ca9051", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex c2cb940901..be46a5fab3 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -655,96 +663,6 @@ public class Datasets extends AbstractApiBean {\n             \n         }\n     }\n-  \n-    @GET\n-    @Path(\"{id}/versions/{versionId}/metadata\")\n-    @Produces(\"application/json-ld\")\n-    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @PathParam(\"versionId\") String versionId, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n-        try {\n-            DataverseRequest req = createDataverseRequest(findUserOrDie());\n-            DatasetVersion dsv = getDatasetVersionOrDie(req, versionId, findDatasetOrDie(id), uriInfo, headers);\n-            OREMap ore = new OREMap(dsv,\n-                    settingsService.isTrueForKey(SettingsServiceBean.Key.ExcludeEmailFromExport, false));\n-            return ok(ore.getOREMapBuilder(true));\n-\n-        } catch (WrappedResponse ex) {\n-            ex.printStackTrace();\n-            return ex.getResponse();\n-        } catch (Exception jpe) {\n-            logger.log(Level.SEVERE, \"Error getting jsonld metadata for dsv: \", jpe.getLocalizedMessage());\n-            jpe.printStackTrace();\n-            return error(Response.Status.INTERNAL_SERVER_ERROR, jpe.getLocalizedMessage());\n-        }\n-    }\n-\n-    @GET\n-    @Path(\"{id}/metadata\")\n-    @Produces(\"application/json-ld\")\n-    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n-        return getVersionJsonLDMetadata(id, \":draft\", uriInfo, headers);\n-    }\n-            \n-    @PUT\n-    @Path(\"{id}/metadata\")\n-    @Consumes(\"application/json-ld\")\n-    public Response updateVersionMetadata(String jsonLDBody, @PathParam(\"id\") String id, @DefaultValue(\"false\") @QueryParam(\"replace\") boolean replaceTerms) {\n-\n-        try {\n-            Dataset ds = findDatasetOrDie(id);\n-            DataverseRequest req = createDataverseRequest(findUserOrDie());\n-            DatasetVersion dsv = ds.getEditVersion();\n-            boolean updateDraft = ds.getLatestVersion().isDraft();\n-            dsv = JSONLDUtil.updateDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc, !replaceTerms, false);\n-            \n-            DatasetVersion managedVersion;\n-            if (updateDraft) {\n-                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n-                managedVersion = managedDataset.getEditVersion();\n-            } else {\n-                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n-            }\n-            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n-            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n-\n-        } catch (WrappedResponse ex) {\n-            return ex.getResponse();\n-        } catch (JsonParsingException jpe) {\n-            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n-            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n-        }\n-    }\n-    \n-    @PUT\n-    @Path(\"{id}/metadata/delete\")\n-    @Consumes(\"application/json-ld\")\n-    public Response deleteMetadata(String jsonLDBody, @PathParam(\"id\") String id) {\n-        logger.info(\"In delteMetadata\");\n-        try {\n-            Dataset ds = findDatasetOrDie(id);\n-            DataverseRequest req = createDataverseRequest(findUserOrDie());\n-            DatasetVersion dsv = ds.getEditVersion();\n-            boolean updateDraft = ds.getLatestVersion().isDraft();\n-            dsv = JSONLDUtil.deleteDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc);\n-            logger.info(\"Updating ver\");\n-            DatasetVersion managedVersion;\n-            if (updateDraft) {\n-                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n-                managedVersion = managedDataset.getEditVersion();\n-            } else {\n-                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n-            }\n-            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n-            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n-\n-        } catch (WrappedResponse ex) {\n-            ex.printStackTrace();\n-            return ex.getResponse();\n-        } catch (JsonParsingException jpe) {\n-            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n-            jpe.printStackTrace();\n-            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n-        }\n-    }\n     \n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n", "next_change": {"commit": "4b5ad664ac18165dc032ab7faeee240cf6002aa2", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex be46a5fab3..9457397345 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -663,6 +655,96 @@ public class Datasets extends AbstractApiBean {\n             \n         }\n     }\n+  \n+    @GET\n+    @Path(\"{id}/versions/{versionId}/metadata\")\n+    @Produces(\"application/json-ld\")\n+    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @PathParam(\"versionId\") String versionId, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n+        try {\n+            DataverseRequest req = createDataverseRequest(findUserOrDie());\n+            DatasetVersion dsv = getDatasetVersionOrDie(req, versionId, findDatasetOrDie(id), uriInfo, headers);\n+            OREMap ore = new OREMap(dsv,\n+                    settingsService.isTrueForKey(SettingsServiceBean.Key.ExcludeEmailFromExport, false));\n+            return ok(ore.getOREMapBuilder(true));\n+\n+        } catch (WrappedResponse ex) {\n+            ex.printStackTrace();\n+            return ex.getResponse();\n+        } catch (Exception jpe) {\n+            logger.log(Level.SEVERE, \"Error getting jsonld metadata for dsv: \", jpe.getLocalizedMessage());\n+            jpe.printStackTrace();\n+            return error(Response.Status.INTERNAL_SERVER_ERROR, jpe.getLocalizedMessage());\n+        }\n+    }\n+\n+    @GET\n+    @Path(\"{id}/metadata\")\n+    @Produces(\"application/json-ld\")\n+    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n+        return getVersionJsonLDMetadata(id, \":draft\", uriInfo, headers);\n+    }\n+            \n+    @PUT\n+    @Path(\"{id}/metadata\")\n+    @Consumes(\"application/json-ld\")\n+    public Response updateVersionMetadata(String jsonLDBody, @PathParam(\"id\") String id, @DefaultValue(\"false\") @QueryParam(\"replace\") boolean replaceTerms) {\n+\n+        try {\n+            Dataset ds = findDatasetOrDie(id);\n+            DataverseRequest req = createDataverseRequest(findUserOrDie());\n+            DatasetVersion dsv = ds.getEditVersion();\n+            boolean updateDraft = ds.getLatestVersion().isDraft();\n+            dsv = JSONLDUtil.updateDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc, !replaceTerms, false);\n+            \n+            DatasetVersion managedVersion;\n+            if (updateDraft) {\n+                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n+                managedVersion = managedDataset.getEditVersion();\n+            } else {\n+                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n+            }\n+            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n+            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n+\n+        } catch (WrappedResponse ex) {\n+            return ex.getResponse();\n+        } catch (JsonParsingException jpe) {\n+            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n+            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n+        }\n+    }\n+    \n+    @PUT\n+    @Path(\"{id}/metadata/delete\")\n+    @Consumes(\"application/json-ld\")\n+    public Response deleteMetadata(String jsonLDBody, @PathParam(\"id\") String id) {\n+        logger.info(\"In delteMetadata\");\n+        try {\n+            Dataset ds = findDatasetOrDie(id);\n+            DataverseRequest req = createDataverseRequest(findUserOrDie());\n+            DatasetVersion dsv = ds.getEditVersion();\n+            boolean updateDraft = ds.getLatestVersion().isDraft();\n+            dsv = JSONLDUtil.deleteDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc);\n+            logger.info(\"Updating ver\");\n+            DatasetVersion managedVersion;\n+            if (updateDraft) {\n+                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n+                managedVersion = managedDataset.getEditVersion();\n+            } else {\n+                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n+            }\n+            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n+            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n+\n+        } catch (WrappedResponse ex) {\n+            ex.printStackTrace();\n+            return ex.getResponse();\n+        } catch (JsonParsingException jpe) {\n+            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n+            jpe.printStackTrace();\n+            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n+        }\n+    }\n     \n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n", "next_change": {"commit": "bc5edf0ad09ecf627cb936a5de50e19be4df34ba", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex 9457397345..b328877e14 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -644,108 +653,18 @@ public class Datasets extends AbstractApiBean {\n //            DatasetVersion managedVersion = execCommand( updateDraft\n //                                                             ? new UpdateDatasetVersionCommand(req, incomingVersion)\n //                                                             : new CreateDatasetVersionCommand(req, ds, incomingVersion));\n-            return ok( json(managedVersion) );\n-                    \n+            return ok(json(managedVersion));\n+\n         } catch (JsonParseException ex) {\n             logger.log(Level.SEVERE, \"Semantic error parsing dataset version Json: \" + ex.getMessage(), ex);\n-            return error( Response.Status.BAD_REQUEST, \"Error parsing dataset version: \" + ex.getMessage() );\n-            \n-        } catch (WrappedResponse ex) {\n-            return ex.getResponse();\n-            \n-        }\n-    }\n-  \n-    @GET\n-    @Path(\"{id}/versions/{versionId}/metadata\")\n-    @Produces(\"application/json-ld\")\n-    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @PathParam(\"versionId\") String versionId, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n-        try {\n-            DataverseRequest req = createDataverseRequest(findUserOrDie());\n-            DatasetVersion dsv = getDatasetVersionOrDie(req, versionId, findDatasetOrDie(id), uriInfo, headers);\n-            OREMap ore = new OREMap(dsv,\n-                    settingsService.isTrueForKey(SettingsServiceBean.Key.ExcludeEmailFromExport, false));\n-            return ok(ore.getOREMapBuilder(true));\n+            return error(Response.Status.BAD_REQUEST, \"Error parsing dataset version: \" + ex.getMessage());\n \n         } catch (WrappedResponse ex) {\n-            ex.printStackTrace();\n             return ex.getResponse();\n-        } catch (Exception jpe) {\n-            logger.log(Level.SEVERE, \"Error getting jsonld metadata for dsv: \", jpe.getLocalizedMessage());\n-            jpe.printStackTrace();\n-            return error(Response.Status.INTERNAL_SERVER_ERROR, jpe.getLocalizedMessage());\n-        }\n-    }\n-\n-    @GET\n-    @Path(\"{id}/metadata\")\n-    @Produces(\"application/json-ld\")\n-    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n-        return getVersionJsonLDMetadata(id, \":draft\", uriInfo, headers);\n-    }\n-            \n-    @PUT\n-    @Path(\"{id}/metadata\")\n-    @Consumes(\"application/json-ld\")\n-    public Response updateVersionMetadata(String jsonLDBody, @PathParam(\"id\") String id, @DefaultValue(\"false\") @QueryParam(\"replace\") boolean replaceTerms) {\n-\n-        try {\n-            Dataset ds = findDatasetOrDie(id);\n-            DataverseRequest req = createDataverseRequest(findUserOrDie());\n-            DatasetVersion dsv = ds.getEditVersion();\n-            boolean updateDraft = ds.getLatestVersion().isDraft();\n-            dsv = JSONLDUtil.updateDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc, !replaceTerms, false);\n-            \n-            DatasetVersion managedVersion;\n-            if (updateDraft) {\n-                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n-                managedVersion = managedDataset.getEditVersion();\n-            } else {\n-                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n-            }\n-            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n-            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n \n-        } catch (WrappedResponse ex) {\n-            return ex.getResponse();\n-        } catch (JsonParsingException jpe) {\n-            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n-            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n         }\n     }\n-    \n-    @PUT\n-    @Path(\"{id}/metadata/delete\")\n-    @Consumes(\"application/json-ld\")\n-    public Response deleteMetadata(String jsonLDBody, @PathParam(\"id\") String id) {\n-        logger.info(\"In delteMetadata\");\n-        try {\n-            Dataset ds = findDatasetOrDie(id);\n-            DataverseRequest req = createDataverseRequest(findUserOrDie());\n-            DatasetVersion dsv = ds.getEditVersion();\n-            boolean updateDraft = ds.getLatestVersion().isDraft();\n-            dsv = JSONLDUtil.deleteDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc);\n-            logger.info(\"Updating ver\");\n-            DatasetVersion managedVersion;\n-            if (updateDraft) {\n-                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n-                managedVersion = managedDataset.getEditVersion();\n-            } else {\n-                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n-            }\n-            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n-            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n \n-        } catch (WrappedResponse ex) {\n-            ex.printStackTrace();\n-            return ex.getResponse();\n-        } catch (JsonParsingException jpe) {\n-            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n-            jpe.printStackTrace();\n-            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n-        }\n-    }\n-    \n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n     public Response deleteVersionMetadata(String jsonBody, @PathParam(\"id\") String id) throws WrappedResponse {\n", "next_change": {"commit": "c3b12195db2c5132f11672295e777f411eda4759", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex b328877e14..459de504c1 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -653,18 +644,108 @@ public class Datasets extends AbstractApiBean {\n //            DatasetVersion managedVersion = execCommand( updateDraft\n //                                                             ? new UpdateDatasetVersionCommand(req, incomingVersion)\n //                                                             : new CreateDatasetVersionCommand(req, ds, incomingVersion));\n-            return ok(json(managedVersion));\n-\n+            return ok( json(managedVersion) );\n+                    \n         } catch (JsonParseException ex) {\n             logger.log(Level.SEVERE, \"Semantic error parsing dataset version Json: \" + ex.getMessage(), ex);\n-            return error(Response.Status.BAD_REQUEST, \"Error parsing dataset version: \" + ex.getMessage());\n+            return error( Response.Status.BAD_REQUEST, \"Error parsing dataset version: \" + ex.getMessage() );\n+            \n+        } catch (WrappedResponse ex) {\n+            return ex.getResponse();\n+            \n+        }\n+    }\n+  \n+    @GET\n+    @Path(\"{id}/versions/{versionId}/metadata\")\n+    @Produces(\"application/json-ld\")\n+    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @PathParam(\"versionId\") String versionId, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n+        try {\n+            DataverseRequest req = createDataverseRequest(findUserOrDie());\n+            DatasetVersion dsv = getDatasetVersionOrDie(req, versionId, findDatasetOrDie(id), uriInfo, headers);\n+            OREMap ore = new OREMap(dsv,\n+                    settingsService.isTrueForKey(SettingsServiceBean.Key.ExcludeEmailFromExport, false));\n+            return ok(ore.getOREMapBuilder(true));\n \n         } catch (WrappedResponse ex) {\n+            ex.printStackTrace();\n             return ex.getResponse();\n+        } catch (Exception jpe) {\n+            logger.log(Level.SEVERE, \"Error getting jsonld metadata for dsv: \", jpe.getLocalizedMessage());\n+            jpe.printStackTrace();\n+            return error(Response.Status.INTERNAL_SERVER_ERROR, jpe.getLocalizedMessage());\n+        }\n+    }\n+\n+    @GET\n+    @Path(\"{id}/metadata\")\n+    @Produces(\"application/json-ld\")\n+    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n+        return getVersionJsonLDMetadata(id, \":draft\", uriInfo, headers);\n+    }\n+            \n+    @PUT\n+    @Path(\"{id}/metadata\")\n+    @Consumes(\"application/json-ld\")\n+    public Response updateVersionMetadata(String jsonLDBody, @PathParam(\"id\") String id, @DefaultValue(\"false\") @QueryParam(\"replace\") boolean replaceTerms) {\n+\n+        try {\n+            Dataset ds = findDatasetOrDie(id);\n+            DataverseRequest req = createDataverseRequest(findUserOrDie());\n+            DatasetVersion dsv = ds.getEditVersion();\n+            boolean updateDraft = ds.getLatestVersion().isDraft();\n+            dsv = JSONLDUtil.updateDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc, !replaceTerms, false);\n+            \n+            DatasetVersion managedVersion;\n+            if (updateDraft) {\n+                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n+                managedVersion = managedDataset.getEditVersion();\n+            } else {\n+                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n+            }\n+            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n+            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n \n+        } catch (WrappedResponse ex) {\n+            return ex.getResponse();\n+        } catch (JsonParsingException jpe) {\n+            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n+            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n         }\n     }\n+    \n+    @PUT\n+    @Path(\"{id}/metadata/delete\")\n+    @Consumes(\"application/json-ld\")\n+    public Response deleteMetadata(String jsonLDBody, @PathParam(\"id\") String id) {\n+        logger.info(\"In delteMetadata\");\n+        try {\n+            Dataset ds = findDatasetOrDie(id);\n+            DataverseRequest req = createDataverseRequest(findUserOrDie());\n+            DatasetVersion dsv = ds.getEditVersion();\n+            boolean updateDraft = ds.getLatestVersion().isDraft();\n+            dsv = JSONLDUtil.deleteDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc);\n+            logger.info(\"Updating ver\");\n+            DatasetVersion managedVersion;\n+            if (updateDraft) {\n+                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n+                managedVersion = managedDataset.getEditVersion();\n+            } else {\n+                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n+            }\n+            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n+            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n \n+        } catch (WrappedResponse ex) {\n+            ex.printStackTrace();\n+            return ex.getResponse();\n+        } catch (JsonParsingException jpe) {\n+            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n+            jpe.printStackTrace();\n+            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n+        }\n+    }\n+    \n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n     public Response deleteVersionMetadata(String jsonBody, @PathParam(\"id\") String id) throws WrappedResponse {\n", "next_change": {"commit": "e68003191dbd06e8f34b9d52d559bee1ee081a30", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex 459de504c1..a63a86a258 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -644,108 +653,18 @@ public class Datasets extends AbstractApiBean {\n //            DatasetVersion managedVersion = execCommand( updateDraft\n //                                                             ? new UpdateDatasetVersionCommand(req, incomingVersion)\n //                                                             : new CreateDatasetVersionCommand(req, ds, incomingVersion));\n-            return ok( json(managedVersion) );\n-                    \n+            return ok(json(managedVersion));\n+\n         } catch (JsonParseException ex) {\n             logger.log(Level.SEVERE, \"Semantic error parsing dataset version Json: \" + ex.getMessage(), ex);\n-            return error( Response.Status.BAD_REQUEST, \"Error parsing dataset version: \" + ex.getMessage() );\n-            \n-        } catch (WrappedResponse ex) {\n-            return ex.getResponse();\n-            \n-        }\n-    }\n-  \n-    @GET\n-    @Path(\"{id}/versions/{versionId}/metadata\")\n-    @Produces(\"application/json-ld\")\n-    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @PathParam(\"versionId\") String versionId, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n-        try {\n-            DataverseRequest req = createDataverseRequest(findUserOrDie());\n-            DatasetVersion dsv = getDatasetVersionOrDie(req, versionId, findDatasetOrDie(id), uriInfo, headers);\n-            OREMap ore = new OREMap(dsv,\n-                    settingsService.isTrueForKey(SettingsServiceBean.Key.ExcludeEmailFromExport, false));\n-            return ok(ore.getOREMapBuilder(true));\n+            return error(Response.Status.BAD_REQUEST, \"Error parsing dataset version: \" + ex.getMessage());\n \n         } catch (WrappedResponse ex) {\n-            ex.printStackTrace();\n             return ex.getResponse();\n-        } catch (Exception jpe) {\n-            logger.log(Level.SEVERE, \"Error getting jsonld metadata for dsv: \", jpe.getLocalizedMessage());\n-            jpe.printStackTrace();\n-            return error(Response.Status.INTERNAL_SERVER_ERROR, jpe.getLocalizedMessage());\n-        }\n-    }\n-\n-    @GET\n-    @Path(\"{id}/metadata\")\n-    @Produces(\"application/json-ld\")\n-    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n-        return getVersionJsonLDMetadata(id, \":draft\", uriInfo, headers);\n-    }\n-            \n-    @PUT\n-    @Path(\"{id}/metadata\")\n-    @Consumes(\"application/json-ld\")\n-    public Response updateVersionMetadata(String jsonLDBody, @PathParam(\"id\") String id, @DefaultValue(\"false\") @QueryParam(\"replace\") boolean replaceTerms) {\n-\n-        try {\n-            Dataset ds = findDatasetOrDie(id);\n-            DataverseRequest req = createDataverseRequest(findUserOrDie());\n-            DatasetVersion dsv = ds.getEditVersion();\n-            boolean updateDraft = ds.getLatestVersion().isDraft();\n-            dsv = JSONLDUtil.updateDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc, !replaceTerms, false);\n-            \n-            DatasetVersion managedVersion;\n-            if (updateDraft) {\n-                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n-                managedVersion = managedDataset.getEditVersion();\n-            } else {\n-                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n-            }\n-            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n-            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n \n-        } catch (WrappedResponse ex) {\n-            return ex.getResponse();\n-        } catch (JsonParsingException jpe) {\n-            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n-            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n         }\n     }\n-    \n-    @PUT\n-    @Path(\"{id}/metadata/delete\")\n-    @Consumes(\"application/json-ld\")\n-    public Response deleteMetadata(String jsonLDBody, @PathParam(\"id\") String id) {\n-        logger.info(\"In delteMetadata\");\n-        try {\n-            Dataset ds = findDatasetOrDie(id);\n-            DataverseRequest req = createDataverseRequest(findUserOrDie());\n-            DatasetVersion dsv = ds.getEditVersion();\n-            boolean updateDraft = ds.getLatestVersion().isDraft();\n-            dsv = JSONLDUtil.deleteDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc);\n-            logger.info(\"Updating ver\");\n-            DatasetVersion managedVersion;\n-            if (updateDraft) {\n-                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n-                managedVersion = managedDataset.getEditVersion();\n-            } else {\n-                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n-            }\n-            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n-            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n \n-        } catch (WrappedResponse ex) {\n-            ex.printStackTrace();\n-            return ex.getResponse();\n-        } catch (JsonParsingException jpe) {\n-            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n-            jpe.printStackTrace();\n-            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n-        }\n-    }\n-    \n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n     public Response deleteVersionMetadata(String jsonBody, @PathParam(\"id\") String id) throws WrappedResponse {\n", "next_change": {"commit": "58a2317d9fb696999fc7439bbcea18d05bc2728e", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex a63a86a258..a6ae292dc5 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -653,18 +647,108 @@ public class Datasets extends AbstractApiBean {\n //            DatasetVersion managedVersion = execCommand( updateDraft\n //                                                             ? new UpdateDatasetVersionCommand(req, incomingVersion)\n //                                                             : new CreateDatasetVersionCommand(req, ds, incomingVersion));\n-            return ok(json(managedVersion));\n-\n+            return ok( json(managedVersion) );\n+                    \n         } catch (JsonParseException ex) {\n             logger.log(Level.SEVERE, \"Semantic error parsing dataset version Json: \" + ex.getMessage(), ex);\n-            return error(Response.Status.BAD_REQUEST, \"Error parsing dataset version: \" + ex.getMessage());\n+            return error( Response.Status.BAD_REQUEST, \"Error parsing dataset version: \" + ex.getMessage() );\n+            \n+        } catch (WrappedResponse ex) {\n+            return ex.getResponse();\n+            \n+        }\n+    }\n+  \n+    @GET\n+    @Path(\"{id}/versions/{versionId}/metadata\")\n+    @Produces(\"application/json-ld\")\n+    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @PathParam(\"versionId\") String versionId, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n+        try {\n+            DataverseRequest req = createDataverseRequest(findUserOrDie());\n+            DatasetVersion dsv = getDatasetVersionOrDie(req, versionId, findDatasetOrDie(id), uriInfo, headers);\n+            OREMap ore = new OREMap(dsv,\n+                    settingsService.isTrueForKey(SettingsServiceBean.Key.ExcludeEmailFromExport, false));\n+            return ok(ore.getOREMapBuilder(true));\n \n         } catch (WrappedResponse ex) {\n+            ex.printStackTrace();\n             return ex.getResponse();\n+        } catch (Exception jpe) {\n+            logger.log(Level.SEVERE, \"Error getting jsonld metadata for dsv: \", jpe.getLocalizedMessage());\n+            jpe.printStackTrace();\n+            return error(Response.Status.INTERNAL_SERVER_ERROR, jpe.getLocalizedMessage());\n+        }\n+    }\n+\n+    @GET\n+    @Path(\"{id}/metadata\")\n+    @Produces(\"application/json-ld\")\n+    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n+        return getVersionJsonLDMetadata(id, \":draft\", uriInfo, headers);\n+    }\n+            \n+    @PUT\n+    @Path(\"{id}/metadata\")\n+    @Consumes(\"application/json-ld\")\n+    public Response updateVersionMetadata(String jsonLDBody, @PathParam(\"id\") String id, @DefaultValue(\"false\") @QueryParam(\"replace\") boolean replaceTerms) {\n+\n+        try {\n+            Dataset ds = findDatasetOrDie(id);\n+            DataverseRequest req = createDataverseRequest(findUserOrDie());\n+            DatasetVersion dsv = ds.getEditVersion();\n+            boolean updateDraft = ds.getLatestVersion().isDraft();\n+            dsv = JSONLDUtil.updateDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc, !replaceTerms, false);\n+            \n+            DatasetVersion managedVersion;\n+            if (updateDraft) {\n+                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n+                managedVersion = managedDataset.getEditVersion();\n+            } else {\n+                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n+            }\n+            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n+            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n \n+        } catch (WrappedResponse ex) {\n+            return ex.getResponse();\n+        } catch (JsonParsingException jpe) {\n+            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n+            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n         }\n     }\n+    \n+    @PUT\n+    @Path(\"{id}/metadata/delete\")\n+    @Consumes(\"application/json-ld\")\n+    public Response deleteMetadata(String jsonLDBody, @PathParam(\"id\") String id) {\n+        logger.info(\"In delteMetadata\");\n+        try {\n+            Dataset ds = findDatasetOrDie(id);\n+            DataverseRequest req = createDataverseRequest(findUserOrDie());\n+            DatasetVersion dsv = ds.getEditVersion();\n+            boolean updateDraft = ds.getLatestVersion().isDraft();\n+            dsv = JSONLDUtil.deleteDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc);\n+            logger.info(\"Updating ver\");\n+            DatasetVersion managedVersion;\n+            if (updateDraft) {\n+                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n+                managedVersion = managedDataset.getEditVersion();\n+            } else {\n+                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n+            }\n+            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n+            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n \n+        } catch (WrappedResponse ex) {\n+            ex.printStackTrace();\n+            return ex.getResponse();\n+        } catch (JsonParsingException jpe) {\n+            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n+            jpe.printStackTrace();\n+            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n+        }\n+    }\n+    \n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n     public Response deleteVersionMetadata(String jsonBody, @PathParam(\"id\") String id) throws WrappedResponse {\n", "next_change": {"commit": "e72c4e50fca0ceb2332d6057c4c05808b1d215dc", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex a6ae292dc5..6183032124 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -658,96 +648,6 @@ public class Datasets extends AbstractApiBean {\n             \n         }\n     }\n-  \n-    @GET\n-    @Path(\"{id}/versions/{versionId}/metadata\")\n-    @Produces(\"application/json-ld\")\n-    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @PathParam(\"versionId\") String versionId, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n-        try {\n-            DataverseRequest req = createDataverseRequest(findUserOrDie());\n-            DatasetVersion dsv = getDatasetVersionOrDie(req, versionId, findDatasetOrDie(id), uriInfo, headers);\n-            OREMap ore = new OREMap(dsv,\n-                    settingsService.isTrueForKey(SettingsServiceBean.Key.ExcludeEmailFromExport, false));\n-            return ok(ore.getOREMapBuilder(true));\n-\n-        } catch (WrappedResponse ex) {\n-            ex.printStackTrace();\n-            return ex.getResponse();\n-        } catch (Exception jpe) {\n-            logger.log(Level.SEVERE, \"Error getting jsonld metadata for dsv: \", jpe.getLocalizedMessage());\n-            jpe.printStackTrace();\n-            return error(Response.Status.INTERNAL_SERVER_ERROR, jpe.getLocalizedMessage());\n-        }\n-    }\n-\n-    @GET\n-    @Path(\"{id}/metadata\")\n-    @Produces(\"application/json-ld\")\n-    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n-        return getVersionJsonLDMetadata(id, \":draft\", uriInfo, headers);\n-    }\n-            \n-    @PUT\n-    @Path(\"{id}/metadata\")\n-    @Consumes(\"application/json-ld\")\n-    public Response updateVersionMetadata(String jsonLDBody, @PathParam(\"id\") String id, @DefaultValue(\"false\") @QueryParam(\"replace\") boolean replaceTerms) {\n-\n-        try {\n-            Dataset ds = findDatasetOrDie(id);\n-            DataverseRequest req = createDataverseRequest(findUserOrDie());\n-            DatasetVersion dsv = ds.getEditVersion();\n-            boolean updateDraft = ds.getLatestVersion().isDraft();\n-            dsv = JSONLDUtil.updateDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc, !replaceTerms, false);\n-            \n-            DatasetVersion managedVersion;\n-            if (updateDraft) {\n-                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n-                managedVersion = managedDataset.getEditVersion();\n-            } else {\n-                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n-            }\n-            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n-            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n-\n-        } catch (WrappedResponse ex) {\n-            return ex.getResponse();\n-        } catch (JsonParsingException jpe) {\n-            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n-            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n-        }\n-    }\n-    \n-    @PUT\n-    @Path(\"{id}/metadata/delete\")\n-    @Consumes(\"application/json-ld\")\n-    public Response deleteMetadata(String jsonLDBody, @PathParam(\"id\") String id) {\n-        logger.info(\"In delteMetadata\");\n-        try {\n-            Dataset ds = findDatasetOrDie(id);\n-            DataverseRequest req = createDataverseRequest(findUserOrDie());\n-            DatasetVersion dsv = ds.getEditVersion();\n-            boolean updateDraft = ds.getLatestVersion().isDraft();\n-            dsv = JSONLDUtil.deleteDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc);\n-            logger.info(\"Updating ver\");\n-            DatasetVersion managedVersion;\n-            if (updateDraft) {\n-                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n-                managedVersion = managedDataset.getEditVersion();\n-            } else {\n-                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n-            }\n-            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n-            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n-\n-        } catch (WrappedResponse ex) {\n-            ex.printStackTrace();\n-            return ex.getResponse();\n-        } catch (JsonParsingException jpe) {\n-            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n-            jpe.printStackTrace();\n-            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n-        }\n-    }\n     \n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n", "next_change": {"commit": "12e2e6eb1de0e2223c895b1a7fbfb6b29b3d5f14", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex 6183032124..ca6425fc73 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -637,18 +644,18 @@ public class Datasets extends AbstractApiBean {\n //            DatasetVersion managedVersion = execCommand( updateDraft\n //                                                             ? new UpdateDatasetVersionCommand(req, incomingVersion)\n //                                                             : new CreateDatasetVersionCommand(req, ds, incomingVersion));\n-            return ok( json(managedVersion) );\n-                    \n+            return ok(json(managedVersion));\n+\n         } catch (JsonParseException ex) {\n             logger.log(Level.SEVERE, \"Semantic error parsing dataset version Json: \" + ex.getMessage(), ex);\n-            return error( Response.Status.BAD_REQUEST, \"Error parsing dataset version: \" + ex.getMessage() );\n-            \n+            return error(Response.Status.BAD_REQUEST, \"Error parsing dataset version: \" + ex.getMessage());\n+\n         } catch (WrappedResponse ex) {\n             return ex.getResponse();\n-            \n+\n         }\n     }\n-    \n+\n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n     public Response deleteVersionMetadata(String jsonBody, @PathParam(\"id\") String id) throws WrappedResponse {\n", "next_change": {"commit": "878ef6fff6a27510b39cffb058b26afca31301c3", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex ca6425fc73..1586576697 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -644,18 +637,18 @@ public class Datasets extends AbstractApiBean {\n //            DatasetVersion managedVersion = execCommand( updateDraft\n //                                                             ? new UpdateDatasetVersionCommand(req, incomingVersion)\n //                                                             : new CreateDatasetVersionCommand(req, ds, incomingVersion));\n-            return ok(json(managedVersion));\n-\n+            return ok( json(managedVersion) );\n+                    \n         } catch (JsonParseException ex) {\n             logger.log(Level.SEVERE, \"Semantic error parsing dataset version Json: \" + ex.getMessage(), ex);\n-            return error(Response.Status.BAD_REQUEST, \"Error parsing dataset version: \" + ex.getMessage());\n-\n+            return error( Response.Status.BAD_REQUEST, \"Error parsing dataset version: \" + ex.getMessage() );\n+            \n         } catch (WrappedResponse ex) {\n             return ex.getResponse();\n-\n+            \n         }\n     }\n-\n+    \n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n     public Response deleteVersionMetadata(String jsonBody, @PathParam(\"id\") String id) throws WrappedResponse {\n", "next_change": {"commit": "fb2b52cf66f7cb51b5b0cee0cd298657fdd0638d", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex 1586576697..51728242d3 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -648,6 +653,96 @@ public class Datasets extends AbstractApiBean {\n             \n         }\n     }\n+  \n+    @GET\n+    @Path(\"{id}/versions/{versionId}/metadata\")\n+    @Produces(\"application/json-ld\")\n+    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @PathParam(\"versionId\") String versionId, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n+        try {\n+            DataverseRequest req = createDataverseRequest(findUserOrDie());\n+            DatasetVersion dsv = getDatasetVersionOrDie(req, versionId, findDatasetOrDie(id), uriInfo, headers);\n+            OREMap ore = new OREMap(dsv,\n+                    settingsService.isTrueForKey(SettingsServiceBean.Key.ExcludeEmailFromExport, false));\n+            return ok(ore.getOREMapBuilder(true));\n+\n+        } catch (WrappedResponse ex) {\n+            ex.printStackTrace();\n+            return ex.getResponse();\n+        } catch (Exception jpe) {\n+            logger.log(Level.SEVERE, \"Error getting jsonld metadata for dsv: \", jpe.getLocalizedMessage());\n+            jpe.printStackTrace();\n+            return error(Response.Status.INTERNAL_SERVER_ERROR, jpe.getLocalizedMessage());\n+        }\n+    }\n+\n+    @GET\n+    @Path(\"{id}/metadata\")\n+    @Produces(\"application/json-ld\")\n+    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n+        return getVersionJsonLDMetadata(id, \":draft\", uriInfo, headers);\n+    }\n+            \n+    @PUT\n+    @Path(\"{id}/metadata\")\n+    @Consumes(\"application/json-ld\")\n+    public Response updateVersionMetadata(String jsonLDBody, @PathParam(\"id\") String id, @DefaultValue(\"false\") @QueryParam(\"replace\") boolean replaceTerms) {\n+\n+        try {\n+            Dataset ds = findDatasetOrDie(id);\n+            DataverseRequest req = createDataverseRequest(findUserOrDie());\n+            DatasetVersion dsv = ds.getEditVersion();\n+            boolean updateDraft = ds.getLatestVersion().isDraft();\n+            dsv = JSONLDUtil.updateDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc, !replaceTerms, false);\n+            \n+            DatasetVersion managedVersion;\n+            if (updateDraft) {\n+                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n+                managedVersion = managedDataset.getEditVersion();\n+            } else {\n+                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n+            }\n+            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n+            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n+\n+        } catch (WrappedResponse ex) {\n+            return ex.getResponse();\n+        } catch (JsonParsingException jpe) {\n+            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n+            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n+        }\n+    }\n+    \n+    @PUT\n+    @Path(\"{id}/metadata/delete\")\n+    @Consumes(\"application/json-ld\")\n+    public Response deleteMetadata(String jsonLDBody, @PathParam(\"id\") String id) {\n+        logger.info(\"In delteMetadata\");\n+        try {\n+            Dataset ds = findDatasetOrDie(id);\n+            DataverseRequest req = createDataverseRequest(findUserOrDie());\n+            DatasetVersion dsv = ds.getEditVersion();\n+            boolean updateDraft = ds.getLatestVersion().isDraft();\n+            dsv = JSONLDUtil.deleteDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc);\n+            logger.info(\"Updating ver\");\n+            DatasetVersion managedVersion;\n+            if (updateDraft) {\n+                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n+                managedVersion = managedDataset.getEditVersion();\n+            } else {\n+                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n+            }\n+            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n+            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n+\n+        } catch (WrappedResponse ex) {\n+            ex.printStackTrace();\n+            return ex.getResponse();\n+        } catch (JsonParsingException jpe) {\n+            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n+            jpe.printStackTrace();\n+            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n+        }\n+    }\n     \n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n", "next_change": {"commit": "ad48ad711049f99d17b3494fab3d923016bfc799", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex 51728242d3..f56674cb35 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -642,108 +644,18 @@ public class Datasets extends AbstractApiBean {\n //            DatasetVersion managedVersion = execCommand( updateDraft\n //                                                             ? new UpdateDatasetVersionCommand(req, incomingVersion)\n //                                                             : new CreateDatasetVersionCommand(req, ds, incomingVersion));\n-            return ok( json(managedVersion) );\n-                    \n+            return ok(json(managedVersion));\n+\n         } catch (JsonParseException ex) {\n             logger.log(Level.SEVERE, \"Semantic error parsing dataset version Json: \" + ex.getMessage(), ex);\n-            return error( Response.Status.BAD_REQUEST, \"Error parsing dataset version: \" + ex.getMessage() );\n-            \n-        } catch (WrappedResponse ex) {\n-            return ex.getResponse();\n-            \n-        }\n-    }\n-  \n-    @GET\n-    @Path(\"{id}/versions/{versionId}/metadata\")\n-    @Produces(\"application/json-ld\")\n-    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @PathParam(\"versionId\") String versionId, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n-        try {\n-            DataverseRequest req = createDataverseRequest(findUserOrDie());\n-            DatasetVersion dsv = getDatasetVersionOrDie(req, versionId, findDatasetOrDie(id), uriInfo, headers);\n-            OREMap ore = new OREMap(dsv,\n-                    settingsService.isTrueForKey(SettingsServiceBean.Key.ExcludeEmailFromExport, false));\n-            return ok(ore.getOREMapBuilder(true));\n+            return error(Response.Status.BAD_REQUEST, \"Error parsing dataset version: \" + ex.getMessage());\n \n         } catch (WrappedResponse ex) {\n-            ex.printStackTrace();\n             return ex.getResponse();\n-        } catch (Exception jpe) {\n-            logger.log(Level.SEVERE, \"Error getting jsonld metadata for dsv: \", jpe.getLocalizedMessage());\n-            jpe.printStackTrace();\n-            return error(Response.Status.INTERNAL_SERVER_ERROR, jpe.getLocalizedMessage());\n-        }\n-    }\n-\n-    @GET\n-    @Path(\"{id}/metadata\")\n-    @Produces(\"application/json-ld\")\n-    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n-        return getVersionJsonLDMetadata(id, \":draft\", uriInfo, headers);\n-    }\n-            \n-    @PUT\n-    @Path(\"{id}/metadata\")\n-    @Consumes(\"application/json-ld\")\n-    public Response updateVersionMetadata(String jsonLDBody, @PathParam(\"id\") String id, @DefaultValue(\"false\") @QueryParam(\"replace\") boolean replaceTerms) {\n-\n-        try {\n-            Dataset ds = findDatasetOrDie(id);\n-            DataverseRequest req = createDataverseRequest(findUserOrDie());\n-            DatasetVersion dsv = ds.getEditVersion();\n-            boolean updateDraft = ds.getLatestVersion().isDraft();\n-            dsv = JSONLDUtil.updateDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc, !replaceTerms, false);\n-            \n-            DatasetVersion managedVersion;\n-            if (updateDraft) {\n-                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n-                managedVersion = managedDataset.getEditVersion();\n-            } else {\n-                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n-            }\n-            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n-            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n \n-        } catch (WrappedResponse ex) {\n-            return ex.getResponse();\n-        } catch (JsonParsingException jpe) {\n-            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n-            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n         }\n     }\n-    \n-    @PUT\n-    @Path(\"{id}/metadata/delete\")\n-    @Consumes(\"application/json-ld\")\n-    public Response deleteMetadata(String jsonLDBody, @PathParam(\"id\") String id) {\n-        logger.info(\"In delteMetadata\");\n-        try {\n-            Dataset ds = findDatasetOrDie(id);\n-            DataverseRequest req = createDataverseRequest(findUserOrDie());\n-            DatasetVersion dsv = ds.getEditVersion();\n-            boolean updateDraft = ds.getLatestVersion().isDraft();\n-            dsv = JSONLDUtil.deleteDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc);\n-            logger.info(\"Updating ver\");\n-            DatasetVersion managedVersion;\n-            if (updateDraft) {\n-                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n-                managedVersion = managedDataset.getEditVersion();\n-            } else {\n-                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n-            }\n-            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n-            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n \n-        } catch (WrappedResponse ex) {\n-            ex.printStackTrace();\n-            return ex.getResponse();\n-        } catch (JsonParsingException jpe) {\n-            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n-            jpe.printStackTrace();\n-            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n-        }\n-    }\n-    \n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n     public Response deleteVersionMetadata(String jsonBody, @PathParam(\"id\") String id) throws WrappedResponse {\n", "next_change": {"commit": "faa944efd1a0644085555d5eae18bfad1a823e4d", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex f56674cb35..daad72b2df 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -644,18 +651,108 @@ public class Datasets extends AbstractApiBean {\n //            DatasetVersion managedVersion = execCommand( updateDraft\n //                                                             ? new UpdateDatasetVersionCommand(req, incomingVersion)\n //                                                             : new CreateDatasetVersionCommand(req, ds, incomingVersion));\n-            return ok(json(managedVersion));\n-\n+            return ok( json(managedVersion) );\n+                    \n         } catch (JsonParseException ex) {\n             logger.log(Level.SEVERE, \"Semantic error parsing dataset version Json: \" + ex.getMessage(), ex);\n-            return error(Response.Status.BAD_REQUEST, \"Error parsing dataset version: \" + ex.getMessage());\n+            return error( Response.Status.BAD_REQUEST, \"Error parsing dataset version: \" + ex.getMessage() );\n+            \n+        } catch (WrappedResponse ex) {\n+            return ex.getResponse();\n+            \n+        }\n+    }\n+  \n+    @GET\n+    @Path(\"{id}/versions/{versionId}/metadata\")\n+    @Produces(\"application/json-ld\")\n+    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @PathParam(\"versionId\") String versionId, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n+        try {\n+            DataverseRequest req = createDataverseRequest(findUserOrDie());\n+            DatasetVersion dsv = getDatasetVersionOrDie(req, versionId, findDatasetOrDie(id), uriInfo, headers);\n+            OREMap ore = new OREMap(dsv,\n+                    settingsService.isTrueForKey(SettingsServiceBean.Key.ExcludeEmailFromExport, false));\n+            return ok(ore.getOREMapBuilder(true));\n \n         } catch (WrappedResponse ex) {\n+            ex.printStackTrace();\n             return ex.getResponse();\n+        } catch (Exception jpe) {\n+            logger.log(Level.SEVERE, \"Error getting jsonld metadata for dsv: \", jpe.getLocalizedMessage());\n+            jpe.printStackTrace();\n+            return error(Response.Status.INTERNAL_SERVER_ERROR, jpe.getLocalizedMessage());\n+        }\n+    }\n+\n+    @GET\n+    @Path(\"{id}/metadata\")\n+    @Produces(\"application/json-ld\")\n+    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n+        return getVersionJsonLDMetadata(id, \":draft\", uriInfo, headers);\n+    }\n+            \n+    @PUT\n+    @Path(\"{id}/metadata\")\n+    @Consumes(\"application/json-ld\")\n+    public Response updateVersionMetadata(String jsonLDBody, @PathParam(\"id\") String id, @DefaultValue(\"false\") @QueryParam(\"replace\") boolean replaceTerms) {\n+\n+        try {\n+            Dataset ds = findDatasetOrDie(id);\n+            DataverseRequest req = createDataverseRequest(findUserOrDie());\n+            DatasetVersion dsv = ds.getEditVersion();\n+            boolean updateDraft = ds.getLatestVersion().isDraft();\n+            dsv = JSONLDUtil.updateDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc, !replaceTerms, false);\n+            \n+            DatasetVersion managedVersion;\n+            if (updateDraft) {\n+                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n+                managedVersion = managedDataset.getEditVersion();\n+            } else {\n+                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n+            }\n+            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n+            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n \n+        } catch (WrappedResponse ex) {\n+            return ex.getResponse();\n+        } catch (JsonParsingException jpe) {\n+            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n+            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n         }\n     }\n+    \n+    @PUT\n+    @Path(\"{id}/metadata/delete\")\n+    @Consumes(\"application/json-ld\")\n+    public Response deleteMetadata(String jsonLDBody, @PathParam(\"id\") String id) {\n+        logger.info(\"In delteMetadata\");\n+        try {\n+            Dataset ds = findDatasetOrDie(id);\n+            DataverseRequest req = createDataverseRequest(findUserOrDie());\n+            DatasetVersion dsv = ds.getEditVersion();\n+            boolean updateDraft = ds.getLatestVersion().isDraft();\n+            dsv = JSONLDUtil.deleteDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc);\n+            logger.info(\"Updating ver\");\n+            DatasetVersion managedVersion;\n+            if (updateDraft) {\n+                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n+                managedVersion = managedDataset.getEditVersion();\n+            } else {\n+                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n+            }\n+            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n+            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n \n+        } catch (WrappedResponse ex) {\n+            ex.printStackTrace();\n+            return ex.getResponse();\n+        } catch (JsonParsingException jpe) {\n+            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n+            jpe.printStackTrace();\n+            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n+        }\n+    }\n+    \n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n     public Response deleteVersionMetadata(String jsonBody, @PathParam(\"id\") String id) throws WrappedResponse {\n", "next_change": {"commit": "6fa5e904755345a8f3ae8ccea00f47d83265c726", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex daad72b2df..e0e6dd2fcb 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -662,96 +649,6 @@ public class Datasets extends AbstractApiBean {\n             \n         }\n     }\n-  \n-    @GET\n-    @Path(\"{id}/versions/{versionId}/metadata\")\n-    @Produces(\"application/json-ld\")\n-    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @PathParam(\"versionId\") String versionId, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n-        try {\n-            DataverseRequest req = createDataverseRequest(findUserOrDie());\n-            DatasetVersion dsv = getDatasetVersionOrDie(req, versionId, findDatasetOrDie(id), uriInfo, headers);\n-            OREMap ore = new OREMap(dsv,\n-                    settingsService.isTrueForKey(SettingsServiceBean.Key.ExcludeEmailFromExport, false));\n-            return ok(ore.getOREMapBuilder(true));\n-\n-        } catch (WrappedResponse ex) {\n-            ex.printStackTrace();\n-            return ex.getResponse();\n-        } catch (Exception jpe) {\n-            logger.log(Level.SEVERE, \"Error getting jsonld metadata for dsv: \", jpe.getLocalizedMessage());\n-            jpe.printStackTrace();\n-            return error(Response.Status.INTERNAL_SERVER_ERROR, jpe.getLocalizedMessage());\n-        }\n-    }\n-\n-    @GET\n-    @Path(\"{id}/metadata\")\n-    @Produces(\"application/json-ld\")\n-    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n-        return getVersionJsonLDMetadata(id, \":draft\", uriInfo, headers);\n-    }\n-            \n-    @PUT\n-    @Path(\"{id}/metadata\")\n-    @Consumes(\"application/json-ld\")\n-    public Response updateVersionMetadata(String jsonLDBody, @PathParam(\"id\") String id, @DefaultValue(\"false\") @QueryParam(\"replace\") boolean replaceTerms) {\n-\n-        try {\n-            Dataset ds = findDatasetOrDie(id);\n-            DataverseRequest req = createDataverseRequest(findUserOrDie());\n-            DatasetVersion dsv = ds.getEditVersion();\n-            boolean updateDraft = ds.getLatestVersion().isDraft();\n-            dsv = JSONLDUtil.updateDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc, !replaceTerms, false);\n-            \n-            DatasetVersion managedVersion;\n-            if (updateDraft) {\n-                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n-                managedVersion = managedDataset.getEditVersion();\n-            } else {\n-                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n-            }\n-            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n-            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n-\n-        } catch (WrappedResponse ex) {\n-            return ex.getResponse();\n-        } catch (JsonParsingException jpe) {\n-            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n-            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n-        }\n-    }\n-    \n-    @PUT\n-    @Path(\"{id}/metadata/delete\")\n-    @Consumes(\"application/json-ld\")\n-    public Response deleteMetadata(String jsonLDBody, @PathParam(\"id\") String id) {\n-        logger.info(\"In delteMetadata\");\n-        try {\n-            Dataset ds = findDatasetOrDie(id);\n-            DataverseRequest req = createDataverseRequest(findUserOrDie());\n-            DatasetVersion dsv = ds.getEditVersion();\n-            boolean updateDraft = ds.getLatestVersion().isDraft();\n-            dsv = JSONLDUtil.deleteDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc);\n-            logger.info(\"Updating ver\");\n-            DatasetVersion managedVersion;\n-            if (updateDraft) {\n-                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n-                managedVersion = managedDataset.getEditVersion();\n-            } else {\n-                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n-            }\n-            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n-            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n-\n-        } catch (WrappedResponse ex) {\n-            ex.printStackTrace();\n-            return ex.getResponse();\n-        } catch (JsonParsingException jpe) {\n-            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n-            jpe.printStackTrace();\n-            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n-        }\n-    }\n     \n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n", "next_change": {"commit": "f702a6188c89567592f593f96e9c7277bc0955fd", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex e0e6dd2fcb..8d56742b9f 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -649,6 +663,96 @@ public class Datasets extends AbstractApiBean {\n             \n         }\n     }\n+  \n+    @GET\n+    @Path(\"{id}/versions/{versionId}/metadata\")\n+    @Produces(\"application/json-ld\")\n+    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @PathParam(\"versionId\") String versionId, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n+        try {\n+            DataverseRequest req = createDataverseRequest(findUserOrDie());\n+            DatasetVersion dsv = getDatasetVersionOrDie(req, versionId, findDatasetOrDie(id), uriInfo, headers);\n+            OREMap ore = new OREMap(dsv,\n+                    settingsService.isTrueForKey(SettingsServiceBean.Key.ExcludeEmailFromExport, false));\n+            return ok(ore.getOREMapBuilder(true));\n+\n+        } catch (WrappedResponse ex) {\n+            ex.printStackTrace();\n+            return ex.getResponse();\n+        } catch (Exception jpe) {\n+            logger.log(Level.SEVERE, \"Error getting jsonld metadata for dsv: \", jpe.getLocalizedMessage());\n+            jpe.printStackTrace();\n+            return error(Response.Status.INTERNAL_SERVER_ERROR, jpe.getLocalizedMessage());\n+        }\n+    }\n+\n+    @GET\n+    @Path(\"{id}/metadata\")\n+    @Produces(\"application/json-ld\")\n+    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n+        return getVersionJsonLDMetadata(id, \":draft\", uriInfo, headers);\n+    }\n+            \n+    @PUT\n+    @Path(\"{id}/metadata\")\n+    @Consumes(\"application/json-ld\")\n+    public Response updateVersionMetadata(String jsonLDBody, @PathParam(\"id\") String id, @DefaultValue(\"false\") @QueryParam(\"replace\") boolean replaceTerms) {\n+\n+        try {\n+            Dataset ds = findDatasetOrDie(id);\n+            DataverseRequest req = createDataverseRequest(findUserOrDie());\n+            DatasetVersion dsv = ds.getEditVersion();\n+            boolean updateDraft = ds.getLatestVersion().isDraft();\n+            dsv = JSONLDUtil.updateDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc, !replaceTerms, false);\n+            \n+            DatasetVersion managedVersion;\n+            if (updateDraft) {\n+                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n+                managedVersion = managedDataset.getEditVersion();\n+            } else {\n+                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n+            }\n+            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n+            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n+\n+        } catch (WrappedResponse ex) {\n+            return ex.getResponse();\n+        } catch (JsonParsingException jpe) {\n+            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n+            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n+        }\n+    }\n+    \n+    @PUT\n+    @Path(\"{id}/metadata/delete\")\n+    @Consumes(\"application/json-ld\")\n+    public Response deleteMetadata(String jsonLDBody, @PathParam(\"id\") String id) {\n+        logger.info(\"In delteMetadata\");\n+        try {\n+            Dataset ds = findDatasetOrDie(id);\n+            DataverseRequest req = createDataverseRequest(findUserOrDie());\n+            DatasetVersion dsv = ds.getEditVersion();\n+            boolean updateDraft = ds.getLatestVersion().isDraft();\n+            dsv = JSONLDUtil.deleteDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc);\n+            logger.info(\"Updating ver\");\n+            DatasetVersion managedVersion;\n+            if (updateDraft) {\n+                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n+                managedVersion = managedDataset.getEditVersion();\n+            } else {\n+                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n+            }\n+            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n+            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n+\n+        } catch (WrappedResponse ex) {\n+            ex.printStackTrace();\n+            return ex.getResponse();\n+        } catch (JsonParsingException jpe) {\n+            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n+            jpe.printStackTrace();\n+            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n+        }\n+    }\n     \n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n", "next_change": {"commit": "4fa484bfe8cc99a5330cd4291a6b86feeca333ca", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex 8d56742b9f..eacc00a456 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -663,96 +649,6 @@ public class Datasets extends AbstractApiBean {\n             \n         }\n     }\n-  \n-    @GET\n-    @Path(\"{id}/versions/{versionId}/metadata\")\n-    @Produces(\"application/json-ld\")\n-    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @PathParam(\"versionId\") String versionId, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n-        try {\n-            DataverseRequest req = createDataverseRequest(findUserOrDie());\n-            DatasetVersion dsv = getDatasetVersionOrDie(req, versionId, findDatasetOrDie(id), uriInfo, headers);\n-            OREMap ore = new OREMap(dsv,\n-                    settingsService.isTrueForKey(SettingsServiceBean.Key.ExcludeEmailFromExport, false));\n-            return ok(ore.getOREMapBuilder(true));\n-\n-        } catch (WrappedResponse ex) {\n-            ex.printStackTrace();\n-            return ex.getResponse();\n-        } catch (Exception jpe) {\n-            logger.log(Level.SEVERE, \"Error getting jsonld metadata for dsv: \", jpe.getLocalizedMessage());\n-            jpe.printStackTrace();\n-            return error(Response.Status.INTERNAL_SERVER_ERROR, jpe.getLocalizedMessage());\n-        }\n-    }\n-\n-    @GET\n-    @Path(\"{id}/metadata\")\n-    @Produces(\"application/json-ld\")\n-    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n-        return getVersionJsonLDMetadata(id, \":draft\", uriInfo, headers);\n-    }\n-            \n-    @PUT\n-    @Path(\"{id}/metadata\")\n-    @Consumes(\"application/json-ld\")\n-    public Response updateVersionMetadata(String jsonLDBody, @PathParam(\"id\") String id, @DefaultValue(\"false\") @QueryParam(\"replace\") boolean replaceTerms) {\n-\n-        try {\n-            Dataset ds = findDatasetOrDie(id);\n-            DataverseRequest req = createDataverseRequest(findUserOrDie());\n-            DatasetVersion dsv = ds.getEditVersion();\n-            boolean updateDraft = ds.getLatestVersion().isDraft();\n-            dsv = JSONLDUtil.updateDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc, !replaceTerms, false);\n-            \n-            DatasetVersion managedVersion;\n-            if (updateDraft) {\n-                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n-                managedVersion = managedDataset.getEditVersion();\n-            } else {\n-                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n-            }\n-            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n-            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n-\n-        } catch (WrappedResponse ex) {\n-            return ex.getResponse();\n-        } catch (JsonParsingException jpe) {\n-            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n-            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n-        }\n-    }\n-    \n-    @PUT\n-    @Path(\"{id}/metadata/delete\")\n-    @Consumes(\"application/json-ld\")\n-    public Response deleteMetadata(String jsonLDBody, @PathParam(\"id\") String id) {\n-        logger.info(\"In delteMetadata\");\n-        try {\n-            Dataset ds = findDatasetOrDie(id);\n-            DataverseRequest req = createDataverseRequest(findUserOrDie());\n-            DatasetVersion dsv = ds.getEditVersion();\n-            boolean updateDraft = ds.getLatestVersion().isDraft();\n-            dsv = JSONLDUtil.deleteDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc);\n-            logger.info(\"Updating ver\");\n-            DatasetVersion managedVersion;\n-            if (updateDraft) {\n-                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n-                managedVersion = managedDataset.getEditVersion();\n-            } else {\n-                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n-            }\n-            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n-            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n-\n-        } catch (WrappedResponse ex) {\n-            ex.printStackTrace();\n-            return ex.getResponse();\n-        } catch (JsonParsingException jpe) {\n-            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n-            jpe.printStackTrace();\n-            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n-        }\n-    }\n     \n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n", "next_change": {"commit": "60f474dec0f631735b9705cb5c0d7a714d5f57de", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex eacc00a456..3ecd785257 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -649,6 +663,96 @@ public class Datasets extends AbstractApiBean {\n             \n         }\n     }\n+  \n+    @GET\n+    @Path(\"{id}/versions/{versionId}/metadata\")\n+    @Produces(\"application/json-ld\")\n+    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @PathParam(\"versionId\") String versionId, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n+        try {\n+            DataverseRequest req = createDataverseRequest(findUserOrDie());\n+            DatasetVersion dsv = getDatasetVersionOrDie(req, versionId, findDatasetOrDie(id), uriInfo, headers);\n+            OREMap ore = new OREMap(dsv,\n+                    settingsService.isTrueForKey(SettingsServiceBean.Key.ExcludeEmailFromExport, false));\n+            return ok(ore.getOREMapBuilder(true));\n+\n+        } catch (WrappedResponse ex) {\n+            ex.printStackTrace();\n+            return ex.getResponse();\n+        } catch (Exception jpe) {\n+            logger.log(Level.SEVERE, \"Error getting jsonld metadata for dsv: \", jpe.getLocalizedMessage());\n+            jpe.printStackTrace();\n+            return error(Response.Status.INTERNAL_SERVER_ERROR, jpe.getLocalizedMessage());\n+        }\n+    }\n+\n+    @GET\n+    @Path(\"{id}/metadata\")\n+    @Produces(\"application/json-ld\")\n+    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n+        return getVersionJsonLDMetadata(id, \":draft\", uriInfo, headers);\n+    }\n+            \n+    @PUT\n+    @Path(\"{id}/metadata\")\n+    @Consumes(\"application/json-ld\")\n+    public Response updateVersionMetadata(String jsonLDBody, @PathParam(\"id\") String id, @DefaultValue(\"false\") @QueryParam(\"replace\") boolean replaceTerms) {\n+\n+        try {\n+            Dataset ds = findDatasetOrDie(id);\n+            DataverseRequest req = createDataverseRequest(findUserOrDie());\n+            DatasetVersion dsv = ds.getEditVersion();\n+            boolean updateDraft = ds.getLatestVersion().isDraft();\n+            dsv = JSONLDUtil.updateDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc, !replaceTerms, false);\n+            \n+            DatasetVersion managedVersion;\n+            if (updateDraft) {\n+                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n+                managedVersion = managedDataset.getEditVersion();\n+            } else {\n+                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n+            }\n+            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n+            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n+\n+        } catch (WrappedResponse ex) {\n+            return ex.getResponse();\n+        } catch (JsonParsingException jpe) {\n+            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n+            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n+        }\n+    }\n+    \n+    @PUT\n+    @Path(\"{id}/metadata/delete\")\n+    @Consumes(\"application/json-ld\")\n+    public Response deleteMetadata(String jsonLDBody, @PathParam(\"id\") String id) {\n+        logger.info(\"In delteMetadata\");\n+        try {\n+            Dataset ds = findDatasetOrDie(id);\n+            DataverseRequest req = createDataverseRequest(findUserOrDie());\n+            DatasetVersion dsv = ds.getEditVersion();\n+            boolean updateDraft = ds.getLatestVersion().isDraft();\n+            dsv = JSONLDUtil.deleteDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc);\n+            logger.info(\"Updating ver\");\n+            DatasetVersion managedVersion;\n+            if (updateDraft) {\n+                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n+                managedVersion = managedDataset.getEditVersion();\n+            } else {\n+                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n+            }\n+            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n+            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n+\n+        } catch (WrappedResponse ex) {\n+            ex.printStackTrace();\n+            return ex.getResponse();\n+        } catch (JsonParsingException jpe) {\n+            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n+            jpe.printStackTrace();\n+            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n+        }\n+    }\n     \n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n", "next_change": {"commit": "b12f881bb7408eb4eefb0f432ad30d6ca3638160", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex 3ecd785257..226b409207 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -663,96 +649,6 @@ public class Datasets extends AbstractApiBean {\n             \n         }\n     }\n-  \n-    @GET\n-    @Path(\"{id}/versions/{versionId}/metadata\")\n-    @Produces(\"application/json-ld\")\n-    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @PathParam(\"versionId\") String versionId, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n-        try {\n-            DataverseRequest req = createDataverseRequest(findUserOrDie());\n-            DatasetVersion dsv = getDatasetVersionOrDie(req, versionId, findDatasetOrDie(id), uriInfo, headers);\n-            OREMap ore = new OREMap(dsv,\n-                    settingsService.isTrueForKey(SettingsServiceBean.Key.ExcludeEmailFromExport, false));\n-            return ok(ore.getOREMapBuilder(true));\n-\n-        } catch (WrappedResponse ex) {\n-            ex.printStackTrace();\n-            return ex.getResponse();\n-        } catch (Exception jpe) {\n-            logger.log(Level.SEVERE, \"Error getting jsonld metadata for dsv: \", jpe.getLocalizedMessage());\n-            jpe.printStackTrace();\n-            return error(Response.Status.INTERNAL_SERVER_ERROR, jpe.getLocalizedMessage());\n-        }\n-    }\n-\n-    @GET\n-    @Path(\"{id}/metadata\")\n-    @Produces(\"application/json-ld\")\n-    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n-        return getVersionJsonLDMetadata(id, \":draft\", uriInfo, headers);\n-    }\n-            \n-    @PUT\n-    @Path(\"{id}/metadata\")\n-    @Consumes(\"application/json-ld\")\n-    public Response updateVersionMetadata(String jsonLDBody, @PathParam(\"id\") String id, @DefaultValue(\"false\") @QueryParam(\"replace\") boolean replaceTerms) {\n-\n-        try {\n-            Dataset ds = findDatasetOrDie(id);\n-            DataverseRequest req = createDataverseRequest(findUserOrDie());\n-            DatasetVersion dsv = ds.getEditVersion();\n-            boolean updateDraft = ds.getLatestVersion().isDraft();\n-            dsv = JSONLDUtil.updateDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc, !replaceTerms, false);\n-            \n-            DatasetVersion managedVersion;\n-            if (updateDraft) {\n-                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n-                managedVersion = managedDataset.getEditVersion();\n-            } else {\n-                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n-            }\n-            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n-            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n-\n-        } catch (WrappedResponse ex) {\n-            return ex.getResponse();\n-        } catch (JsonParsingException jpe) {\n-            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n-            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n-        }\n-    }\n-    \n-    @PUT\n-    @Path(\"{id}/metadata/delete\")\n-    @Consumes(\"application/json-ld\")\n-    public Response deleteMetadata(String jsonLDBody, @PathParam(\"id\") String id) {\n-        logger.info(\"In delteMetadata\");\n-        try {\n-            Dataset ds = findDatasetOrDie(id);\n-            DataverseRequest req = createDataverseRequest(findUserOrDie());\n-            DatasetVersion dsv = ds.getEditVersion();\n-            boolean updateDraft = ds.getLatestVersion().isDraft();\n-            dsv = JSONLDUtil.deleteDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc);\n-            logger.info(\"Updating ver\");\n-            DatasetVersion managedVersion;\n-            if (updateDraft) {\n-                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n-                managedVersion = managedDataset.getEditVersion();\n-            } else {\n-                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n-            }\n-            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n-            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n-\n-        } catch (WrappedResponse ex) {\n-            ex.printStackTrace();\n-            return ex.getResponse();\n-        } catch (JsonParsingException jpe) {\n-            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n-            jpe.printStackTrace();\n-            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n-        }\n-    }\n     \n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n", "next_change": {"commit": "ff2419b9d62095405ddc5f67e40f37fcd7b19a4c", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex 226b409207..0a86d8b67f 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -649,6 +663,94 @@ public class Datasets extends AbstractApiBean {\n             \n         }\n     }\n+  \n+    @GET\n+    @Path(\"{id}/versions/{versionId}/metadata\")\n+    @Produces(\"application/ld+json, application/json-ld\")\n+    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @PathParam(\"versionId\") String versionId, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n+        try {\n+            DataverseRequest req = createDataverseRequest(findUserOrDie());\n+            DatasetVersion dsv = getDatasetVersionOrDie(req, versionId, findDatasetOrDie(id), uriInfo, headers);\n+            OREMap ore = new OREMap(dsv,\n+                    settingsService.isTrueForKey(SettingsServiceBean.Key.ExcludeEmailFromExport, false));\n+            return ok(ore.getOREMapBuilder(true));\n+\n+        } catch (WrappedResponse ex) {\n+            ex.printStackTrace();\n+            return ex.getResponse();\n+        } catch (Exception jpe) {\n+            logger.log(Level.SEVERE, \"Error getting jsonld metadata for dsv: \", jpe.getLocalizedMessage());\n+            jpe.printStackTrace();\n+            return error(Response.Status.INTERNAL_SERVER_ERROR, jpe.getLocalizedMessage());\n+        }\n+    }\n+\n+    @GET\n+    @Path(\"{id}/metadata\")\n+    @Produces(\"application/ld+json, application/json-ld\")\n+    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n+        return getVersionJsonLDMetadata(id, \":draft\", uriInfo, headers);\n+    }\n+            \n+    @PUT\n+    @Path(\"{id}/metadata\")\n+    @Consumes(\"application/ld+json, application/json-ld\")\n+    public Response updateVersionMetadata(String jsonLDBody, @PathParam(\"id\") String id, @DefaultValue(\"false\") @QueryParam(\"replace\") boolean replaceTerms) {\n+\n+        try {\n+            Dataset ds = findDatasetOrDie(id);\n+            DataverseRequest req = createDataverseRequest(findUserOrDie());\n+            DatasetVersion dsv = ds.getEditVersion();\n+            boolean updateDraft = ds.getLatestVersion().isDraft();\n+            dsv = JSONLDUtil.updateDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc, !replaceTerms, false);\n+            \n+            DatasetVersion managedVersion;\n+            if (updateDraft) {\n+                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n+                managedVersion = managedDataset.getEditVersion();\n+            } else {\n+                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n+            }\n+            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n+            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n+\n+        } catch (WrappedResponse ex) {\n+            return ex.getResponse();\n+        } catch (JsonParsingException jpe) {\n+            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n+            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n+        }\n+    }\n+    \n+    @PUT\n+    @Path(\"{id}/metadata/delete\")\n+    @Consumes(\"application/ld+json, application/json-ld\")\n+    public Response deleteMetadata(String jsonLDBody, @PathParam(\"id\") String id) {\n+        try {\n+            Dataset ds = findDatasetOrDie(id);\n+            DataverseRequest req = createDataverseRequest(findUserOrDie());\n+            DatasetVersion dsv = ds.getEditVersion();\n+            boolean updateDraft = ds.getLatestVersion().isDraft();\n+            dsv = JSONLDUtil.deleteDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc);\n+            DatasetVersion managedVersion;\n+            if (updateDraft) {\n+                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n+                managedVersion = managedDataset.getEditVersion();\n+            } else {\n+                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n+            }\n+            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n+            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n+\n+        } catch (WrappedResponse ex) {\n+            ex.printStackTrace();\n+            return ex.getResponse();\n+        } catch (JsonParsingException jpe) {\n+            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n+            jpe.printStackTrace();\n+            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n+        }\n+    }\n     \n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n", "next_change": {"commit": "2c494d85b5f2906cfbd5a3727a9a358635b47815", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex 0a86d8b67f..4a1c96ea8e 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -663,94 +617,6 @@ public class Datasets extends AbstractApiBean {\n             \n         }\n     }\n-  \n-    @GET\n-    @Path(\"{id}/versions/{versionId}/metadata\")\n-    @Produces(\"application/ld+json, application/json-ld\")\n-    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @PathParam(\"versionId\") String versionId, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n-        try {\n-            DataverseRequest req = createDataverseRequest(findUserOrDie());\n-            DatasetVersion dsv = getDatasetVersionOrDie(req, versionId, findDatasetOrDie(id), uriInfo, headers);\n-            OREMap ore = new OREMap(dsv,\n-                    settingsService.isTrueForKey(SettingsServiceBean.Key.ExcludeEmailFromExport, false));\n-            return ok(ore.getOREMapBuilder(true));\n-\n-        } catch (WrappedResponse ex) {\n-            ex.printStackTrace();\n-            return ex.getResponse();\n-        } catch (Exception jpe) {\n-            logger.log(Level.SEVERE, \"Error getting jsonld metadata for dsv: \", jpe.getLocalizedMessage());\n-            jpe.printStackTrace();\n-            return error(Response.Status.INTERNAL_SERVER_ERROR, jpe.getLocalizedMessage());\n-        }\n-    }\n-\n-    @GET\n-    @Path(\"{id}/metadata\")\n-    @Produces(\"application/ld+json, application/json-ld\")\n-    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n-        return getVersionJsonLDMetadata(id, \":draft\", uriInfo, headers);\n-    }\n-            \n-    @PUT\n-    @Path(\"{id}/metadata\")\n-    @Consumes(\"application/ld+json, application/json-ld\")\n-    public Response updateVersionMetadata(String jsonLDBody, @PathParam(\"id\") String id, @DefaultValue(\"false\") @QueryParam(\"replace\") boolean replaceTerms) {\n-\n-        try {\n-            Dataset ds = findDatasetOrDie(id);\n-            DataverseRequest req = createDataverseRequest(findUserOrDie());\n-            DatasetVersion dsv = ds.getEditVersion();\n-            boolean updateDraft = ds.getLatestVersion().isDraft();\n-            dsv = JSONLDUtil.updateDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc, !replaceTerms, false);\n-            \n-            DatasetVersion managedVersion;\n-            if (updateDraft) {\n-                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n-                managedVersion = managedDataset.getEditVersion();\n-            } else {\n-                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n-            }\n-            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n-            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n-\n-        } catch (WrappedResponse ex) {\n-            return ex.getResponse();\n-        } catch (JsonParsingException jpe) {\n-            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n-            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n-        }\n-    }\n-    \n-    @PUT\n-    @Path(\"{id}/metadata/delete\")\n-    @Consumes(\"application/ld+json, application/json-ld\")\n-    public Response deleteMetadata(String jsonLDBody, @PathParam(\"id\") String id) {\n-        try {\n-            Dataset ds = findDatasetOrDie(id);\n-            DataverseRequest req = createDataverseRequest(findUserOrDie());\n-            DatasetVersion dsv = ds.getEditVersion();\n-            boolean updateDraft = ds.getLatestVersion().isDraft();\n-            dsv = JSONLDUtil.deleteDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc);\n-            DatasetVersion managedVersion;\n-            if (updateDraft) {\n-                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n-                managedVersion = managedDataset.getEditVersion();\n-            } else {\n-                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n-            }\n-            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n-            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n-\n-        } catch (WrappedResponse ex) {\n-            ex.printStackTrace();\n-            return ex.getResponse();\n-        } catch (JsonParsingException jpe) {\n-            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n-            jpe.printStackTrace();\n-            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n-        }\n-    }\n     \n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n", "next_change": {"commit": "e1c1bfe58e64ea0ed54cbb03ad89bab209314aef", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex 4a1c96ea8e..549647df69 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -617,6 +664,94 @@ public class Datasets extends AbstractApiBean {\n             \n         }\n     }\n+  \n+    @GET\n+    @Path(\"{id}/versions/{versionId}/metadata\")\n+    @Produces(\"application/ld+json, application/json-ld\")\n+    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @PathParam(\"versionId\") String versionId, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n+        try {\n+            DataverseRequest req = createDataverseRequest(findUserOrDie());\n+            DatasetVersion dsv = getDatasetVersionOrDie(req, versionId, findDatasetOrDie(id), uriInfo, headers);\n+            OREMap ore = new OREMap(dsv,\n+                    settingsService.isTrueForKey(SettingsServiceBean.Key.ExcludeEmailFromExport, false));\n+            return ok(ore.getOREMapBuilder(true));\n+\n+        } catch (WrappedResponse ex) {\n+            ex.printStackTrace();\n+            return ex.getResponse();\n+        } catch (Exception jpe) {\n+            logger.log(Level.SEVERE, \"Error getting jsonld metadata for dsv: \", jpe.getLocalizedMessage());\n+            jpe.printStackTrace();\n+            return error(Response.Status.INTERNAL_SERVER_ERROR, jpe.getLocalizedMessage());\n+        }\n+    }\n+\n+    @GET\n+    @Path(\"{id}/metadata\")\n+    @Produces(\"application/ld+json, application/json-ld\")\n+    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n+        return getVersionJsonLDMetadata(id, \":draft\", uriInfo, headers);\n+    }\n+            \n+    @PUT\n+    @Path(\"{id}/metadata\")\n+    @Consumes(\"application/ld+json, application/json-ld\")\n+    public Response updateVersionMetadata(String jsonLDBody, @PathParam(\"id\") String id, @DefaultValue(\"false\") @QueryParam(\"replace\") boolean replaceTerms) {\n+\n+        try {\n+            Dataset ds = findDatasetOrDie(id);\n+            DataverseRequest req = createDataverseRequest(findUserOrDie());\n+            DatasetVersion dsv = ds.getEditVersion();\n+            boolean updateDraft = ds.getLatestVersion().isDraft();\n+            dsv = JSONLDUtil.updateDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc, !replaceTerms, false);\n+            \n+            DatasetVersion managedVersion;\n+            if (updateDraft) {\n+                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n+                managedVersion = managedDataset.getEditVersion();\n+            } else {\n+                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n+            }\n+            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n+            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n+\n+        } catch (WrappedResponse ex) {\n+            return ex.getResponse();\n+        } catch (JsonParsingException jpe) {\n+            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n+            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n+        }\n+    }\n+    \n+    @PUT\n+    @Path(\"{id}/metadata/delete\")\n+    @Consumes(\"application/ld+json, application/json-ld\")\n+    public Response deleteMetadata(String jsonLDBody, @PathParam(\"id\") String id) {\n+        try {\n+            Dataset ds = findDatasetOrDie(id);\n+            DataverseRequest req = createDataverseRequest(findUserOrDie());\n+            DatasetVersion dsv = ds.getEditVersion();\n+            boolean updateDraft = ds.getLatestVersion().isDraft();\n+            dsv = JSONLDUtil.deleteDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc);\n+            DatasetVersion managedVersion;\n+            if (updateDraft) {\n+                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n+                managedVersion = managedDataset.getEditVersion();\n+            } else {\n+                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n+            }\n+            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n+            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n+\n+        } catch (WrappedResponse ex) {\n+            ex.printStackTrace();\n+            return ex.getResponse();\n+        } catch (JsonParsingException jpe) {\n+            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n+            jpe.printStackTrace();\n+            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n+        }\n+    }\n     \n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n", "next_change": {"commit": "5fab3f112342b354adf7f9b5648e979b45bbcf0e", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex 549647df69..c1359e1c36 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -664,94 +651,6 @@ public class Datasets extends AbstractApiBean {\n             \n         }\n     }\n-  \n-    @GET\n-    @Path(\"{id}/versions/{versionId}/metadata\")\n-    @Produces(\"application/ld+json, application/json-ld\")\n-    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @PathParam(\"versionId\") String versionId, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n-        try {\n-            DataverseRequest req = createDataverseRequest(findUserOrDie());\n-            DatasetVersion dsv = getDatasetVersionOrDie(req, versionId, findDatasetOrDie(id), uriInfo, headers);\n-            OREMap ore = new OREMap(dsv,\n-                    settingsService.isTrueForKey(SettingsServiceBean.Key.ExcludeEmailFromExport, false));\n-            return ok(ore.getOREMapBuilder(true));\n-\n-        } catch (WrappedResponse ex) {\n-            ex.printStackTrace();\n-            return ex.getResponse();\n-        } catch (Exception jpe) {\n-            logger.log(Level.SEVERE, \"Error getting jsonld metadata for dsv: \", jpe.getLocalizedMessage());\n-            jpe.printStackTrace();\n-            return error(Response.Status.INTERNAL_SERVER_ERROR, jpe.getLocalizedMessage());\n-        }\n-    }\n-\n-    @GET\n-    @Path(\"{id}/metadata\")\n-    @Produces(\"application/ld+json, application/json-ld\")\n-    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n-        return getVersionJsonLDMetadata(id, \":draft\", uriInfo, headers);\n-    }\n-            \n-    @PUT\n-    @Path(\"{id}/metadata\")\n-    @Consumes(\"application/ld+json, application/json-ld\")\n-    public Response updateVersionMetadata(String jsonLDBody, @PathParam(\"id\") String id, @DefaultValue(\"false\") @QueryParam(\"replace\") boolean replaceTerms) {\n-\n-        try {\n-            Dataset ds = findDatasetOrDie(id);\n-            DataverseRequest req = createDataverseRequest(findUserOrDie());\n-            DatasetVersion dsv = ds.getEditVersion();\n-            boolean updateDraft = ds.getLatestVersion().isDraft();\n-            dsv = JSONLDUtil.updateDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc, !replaceTerms, false);\n-            \n-            DatasetVersion managedVersion;\n-            if (updateDraft) {\n-                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n-                managedVersion = managedDataset.getEditVersion();\n-            } else {\n-                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n-            }\n-            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n-            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n-\n-        } catch (WrappedResponse ex) {\n-            return ex.getResponse();\n-        } catch (JsonParsingException jpe) {\n-            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n-            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n-        }\n-    }\n-    \n-    @PUT\n-    @Path(\"{id}/metadata/delete\")\n-    @Consumes(\"application/ld+json, application/json-ld\")\n-    public Response deleteMetadata(String jsonLDBody, @PathParam(\"id\") String id) {\n-        try {\n-            Dataset ds = findDatasetOrDie(id);\n-            DataverseRequest req = createDataverseRequest(findUserOrDie());\n-            DatasetVersion dsv = ds.getEditVersion();\n-            boolean updateDraft = ds.getLatestVersion().isDraft();\n-            dsv = JSONLDUtil.deleteDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc);\n-            DatasetVersion managedVersion;\n-            if (updateDraft) {\n-                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n-                managedVersion = managedDataset.getEditVersion();\n-            } else {\n-                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n-            }\n-            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n-            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n-\n-        } catch (WrappedResponse ex) {\n-            ex.printStackTrace();\n-            return ex.getResponse();\n-        } catch (JsonParsingException jpe) {\n-            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n-            jpe.printStackTrace();\n-            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n-        }\n-    }\n     \n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n", "next_change": {"commit": "1d54c68fe4b515e56fee490a302cd8464d278d2d", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex c1359e1c36..645b3cc835 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -651,6 +651,94 @@ public class Datasets extends AbstractApiBean {\n             \n         }\n     }\n+  \n+    @GET\n+    @Path(\"{id}/versions/{versionId}/metadata\")\n+    @Produces(\"application/ld+json, application/json-ld\")\n+    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @PathParam(\"versionId\") String versionId, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n+        try {\n+            DataverseRequest req = createDataverseRequest(findUserOrDie());\n+            DatasetVersion dsv = getDatasetVersionOrDie(req, versionId, findDatasetOrDie(id), uriInfo, headers);\n+            OREMap ore = new OREMap(dsv,\n+                    settingsService.isTrueForKey(SettingsServiceBean.Key.ExcludeEmailFromExport, false));\n+            return ok(ore.getOREMapBuilder(true));\n+\n+        } catch (WrappedResponse ex) {\n+            ex.printStackTrace();\n+            return ex.getResponse();\n+        } catch (Exception jpe) {\n+            logger.log(Level.SEVERE, \"Error getting jsonld metadata for dsv: \", jpe.getLocalizedMessage());\n+            jpe.printStackTrace();\n+            return error(Response.Status.INTERNAL_SERVER_ERROR, jpe.getLocalizedMessage());\n+        }\n+    }\n+\n+    @GET\n+    @Path(\"{id}/metadata\")\n+    @Produces(\"application/ld+json, application/json-ld\")\n+    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n+        return getVersionJsonLDMetadata(id, \":draft\", uriInfo, headers);\n+    }\n+            \n+    @PUT\n+    @Path(\"{id}/metadata\")\n+    @Consumes(\"application/ld+json, application/json-ld\")\n+    public Response updateVersionMetadata(String jsonLDBody, @PathParam(\"id\") String id, @DefaultValue(\"false\") @QueryParam(\"replace\") boolean replaceTerms) {\n+\n+        try {\n+            Dataset ds = findDatasetOrDie(id);\n+            DataverseRequest req = createDataverseRequest(findUserOrDie());\n+            DatasetVersion dsv = ds.getEditVersion();\n+            boolean updateDraft = ds.getLatestVersion().isDraft();\n+            dsv = JSONLDUtil.updateDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc, !replaceTerms, false);\n+            \n+            DatasetVersion managedVersion;\n+            if (updateDraft) {\n+                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n+                managedVersion = managedDataset.getEditVersion();\n+            } else {\n+                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n+            }\n+            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n+            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n+\n+        } catch (WrappedResponse ex) {\n+            return ex.getResponse();\n+        } catch (JsonParsingException jpe) {\n+            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n+            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n+        }\n+    }\n+    \n+    @PUT\n+    @Path(\"{id}/metadata/delete\")\n+    @Consumes(\"application/ld+json, application/json-ld\")\n+    public Response deleteMetadata(String jsonLDBody, @PathParam(\"id\") String id) {\n+        try {\n+            Dataset ds = findDatasetOrDie(id);\n+            DataverseRequest req = createDataverseRequest(findUserOrDie());\n+            DatasetVersion dsv = ds.getEditVersion();\n+            boolean updateDraft = ds.getLatestVersion().isDraft();\n+            dsv = JSONLDUtil.deleteDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc);\n+            DatasetVersion managedVersion;\n+            if (updateDraft) {\n+                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n+                managedVersion = managedDataset.getEditVersion();\n+            } else {\n+                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n+            }\n+            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n+            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n+\n+        } catch (WrappedResponse ex) {\n+            ex.printStackTrace();\n+            return ex.getResponse();\n+        } catch (JsonParsingException jpe) {\n+            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n+            jpe.printStackTrace();\n+            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n+        }\n+    }\n     \n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n", "next_change": {"commit": "5ca182e2830cda4ba8428907994bb1fbab37191f", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex 645b3cc835..126cb3e4df 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -651,94 +619,6 @@ public class Datasets extends AbstractApiBean {\n             \n         }\n     }\n-  \n-    @GET\n-    @Path(\"{id}/versions/{versionId}/metadata\")\n-    @Produces(\"application/ld+json, application/json-ld\")\n-    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @PathParam(\"versionId\") String versionId, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n-        try {\n-            DataverseRequest req = createDataverseRequest(findUserOrDie());\n-            DatasetVersion dsv = getDatasetVersionOrDie(req, versionId, findDatasetOrDie(id), uriInfo, headers);\n-            OREMap ore = new OREMap(dsv,\n-                    settingsService.isTrueForKey(SettingsServiceBean.Key.ExcludeEmailFromExport, false));\n-            return ok(ore.getOREMapBuilder(true));\n-\n-        } catch (WrappedResponse ex) {\n-            ex.printStackTrace();\n-            return ex.getResponse();\n-        } catch (Exception jpe) {\n-            logger.log(Level.SEVERE, \"Error getting jsonld metadata for dsv: \", jpe.getLocalizedMessage());\n-            jpe.printStackTrace();\n-            return error(Response.Status.INTERNAL_SERVER_ERROR, jpe.getLocalizedMessage());\n-        }\n-    }\n-\n-    @GET\n-    @Path(\"{id}/metadata\")\n-    @Produces(\"application/ld+json, application/json-ld\")\n-    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n-        return getVersionJsonLDMetadata(id, \":draft\", uriInfo, headers);\n-    }\n-            \n-    @PUT\n-    @Path(\"{id}/metadata\")\n-    @Consumes(\"application/ld+json, application/json-ld\")\n-    public Response updateVersionMetadata(String jsonLDBody, @PathParam(\"id\") String id, @DefaultValue(\"false\") @QueryParam(\"replace\") boolean replaceTerms) {\n-\n-        try {\n-            Dataset ds = findDatasetOrDie(id);\n-            DataverseRequest req = createDataverseRequest(findUserOrDie());\n-            DatasetVersion dsv = ds.getEditVersion();\n-            boolean updateDraft = ds.getLatestVersion().isDraft();\n-            dsv = JSONLDUtil.updateDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc, !replaceTerms, false);\n-            \n-            DatasetVersion managedVersion;\n-            if (updateDraft) {\n-                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n-                managedVersion = managedDataset.getEditVersion();\n-            } else {\n-                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n-            }\n-            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n-            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n-\n-        } catch (WrappedResponse ex) {\n-            return ex.getResponse();\n-        } catch (JsonParsingException jpe) {\n-            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n-            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n-        }\n-    }\n-    \n-    @PUT\n-    @Path(\"{id}/metadata/delete\")\n-    @Consumes(\"application/ld+json, application/json-ld\")\n-    public Response deleteMetadata(String jsonLDBody, @PathParam(\"id\") String id) {\n-        try {\n-            Dataset ds = findDatasetOrDie(id);\n-            DataverseRequest req = createDataverseRequest(findUserOrDie());\n-            DatasetVersion dsv = ds.getEditVersion();\n-            boolean updateDraft = ds.getLatestVersion().isDraft();\n-            dsv = JSONLDUtil.deleteDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc);\n-            DatasetVersion managedVersion;\n-            if (updateDraft) {\n-                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n-                managedVersion = managedDataset.getEditVersion();\n-            } else {\n-                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n-            }\n-            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n-            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n-\n-        } catch (WrappedResponse ex) {\n-            ex.printStackTrace();\n-            return ex.getResponse();\n-        } catch (JsonParsingException jpe) {\n-            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n-            jpe.printStackTrace();\n-            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n-        }\n-    }\n     \n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n", "next_change": {"commit": "a1f9f3ebe80dd6a20b60d1d19bb9acbd0a84713b", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex 126cb3e4df..b63b115a08 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -619,6 +620,94 @@ public class Datasets extends AbstractApiBean {\n             \n         }\n     }\n+  \n+    @GET\n+    @Path(\"{id}/versions/{versionId}/metadata\")\n+    @Produces(\"application/ld+json, application/json-ld\")\n+    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @PathParam(\"versionId\") String versionId, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n+        try {\n+            DataverseRequest req = createDataverseRequest(findUserOrDie());\n+            DatasetVersion dsv = getDatasetVersionOrDie(req, versionId, findDatasetOrDie(id), uriInfo, headers);\n+            OREMap ore = new OREMap(dsv,\n+                    settingsService.isTrueForKey(SettingsServiceBean.Key.ExcludeEmailFromExport, false));\n+            return ok(ore.getOREMapBuilder(true));\n+\n+        } catch (WrappedResponse ex) {\n+            ex.printStackTrace();\n+            return ex.getResponse();\n+        } catch (Exception jpe) {\n+            logger.log(Level.SEVERE, \"Error getting jsonld metadata for dsv: \", jpe.getLocalizedMessage());\n+            jpe.printStackTrace();\n+            return error(Response.Status.INTERNAL_SERVER_ERROR, jpe.getLocalizedMessage());\n+        }\n+    }\n+\n+    @GET\n+    @Path(\"{id}/metadata\")\n+    @Produces(\"application/ld+json, application/json-ld\")\n+    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n+        return getVersionJsonLDMetadata(id, \":draft\", uriInfo, headers);\n+    }\n+            \n+    @PUT\n+    @Path(\"{id}/metadata\")\n+    @Consumes(\"application/ld+json, application/json-ld\")\n+    public Response updateVersionMetadata(String jsonLDBody, @PathParam(\"id\") String id, @DefaultValue(\"false\") @QueryParam(\"replace\") boolean replaceTerms) {\n+\n+        try {\n+            Dataset ds = findDatasetOrDie(id);\n+            DataverseRequest req = createDataverseRequest(findUserOrDie());\n+            DatasetVersion dsv = ds.getEditVersion();\n+            boolean updateDraft = ds.getLatestVersion().isDraft();\n+            dsv = JSONLDUtil.updateDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc, !replaceTerms, false);\n+            \n+            DatasetVersion managedVersion;\n+            if (updateDraft) {\n+                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n+                managedVersion = managedDataset.getEditVersion();\n+            } else {\n+                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n+            }\n+            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n+            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n+\n+        } catch (WrappedResponse ex) {\n+            return ex.getResponse();\n+        } catch (JsonParsingException jpe) {\n+            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n+            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n+        }\n+    }\n+    \n+    @PUT\n+    @Path(\"{id}/metadata/delete\")\n+    @Consumes(\"application/ld+json, application/json-ld\")\n+    public Response deleteMetadata(String jsonLDBody, @PathParam(\"id\") String id) {\n+        try {\n+            Dataset ds = findDatasetOrDie(id);\n+            DataverseRequest req = createDataverseRequest(findUserOrDie());\n+            DatasetVersion dsv = ds.getEditVersion();\n+            boolean updateDraft = ds.getLatestVersion().isDraft();\n+            dsv = JSONLDUtil.deleteDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc);\n+            DatasetVersion managedVersion;\n+            if (updateDraft) {\n+                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n+                managedVersion = managedDataset.getEditVersion();\n+            } else {\n+                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n+            }\n+            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n+            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n+\n+        } catch (WrappedResponse ex) {\n+            ex.printStackTrace();\n+            return ex.getResponse();\n+        } catch (JsonParsingException jpe) {\n+            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n+            jpe.printStackTrace();\n+            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n+        }\n+    }\n     \n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n", "next_change": {"commit": "fd21968e515394812d8a7f034d46203f44537740", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex b63b115a08..27fbf8661f 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -620,94 +649,6 @@ public class Datasets extends AbstractApiBean {\n             \n         }\n     }\n-  \n-    @GET\n-    @Path(\"{id}/versions/{versionId}/metadata\")\n-    @Produces(\"application/ld+json, application/json-ld\")\n-    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @PathParam(\"versionId\") String versionId, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n-        try {\n-            DataverseRequest req = createDataverseRequest(findUserOrDie());\n-            DatasetVersion dsv = getDatasetVersionOrDie(req, versionId, findDatasetOrDie(id), uriInfo, headers);\n-            OREMap ore = new OREMap(dsv,\n-                    settingsService.isTrueForKey(SettingsServiceBean.Key.ExcludeEmailFromExport, false));\n-            return ok(ore.getOREMapBuilder(true));\n-\n-        } catch (WrappedResponse ex) {\n-            ex.printStackTrace();\n-            return ex.getResponse();\n-        } catch (Exception jpe) {\n-            logger.log(Level.SEVERE, \"Error getting jsonld metadata for dsv: \", jpe.getLocalizedMessage());\n-            jpe.printStackTrace();\n-            return error(Response.Status.INTERNAL_SERVER_ERROR, jpe.getLocalizedMessage());\n-        }\n-    }\n-\n-    @GET\n-    @Path(\"{id}/metadata\")\n-    @Produces(\"application/ld+json, application/json-ld\")\n-    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n-        return getVersionJsonLDMetadata(id, \":draft\", uriInfo, headers);\n-    }\n-            \n-    @PUT\n-    @Path(\"{id}/metadata\")\n-    @Consumes(\"application/ld+json, application/json-ld\")\n-    public Response updateVersionMetadata(String jsonLDBody, @PathParam(\"id\") String id, @DefaultValue(\"false\") @QueryParam(\"replace\") boolean replaceTerms) {\n-\n-        try {\n-            Dataset ds = findDatasetOrDie(id);\n-            DataverseRequest req = createDataverseRequest(findUserOrDie());\n-            DatasetVersion dsv = ds.getEditVersion();\n-            boolean updateDraft = ds.getLatestVersion().isDraft();\n-            dsv = JSONLDUtil.updateDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc, !replaceTerms, false);\n-            \n-            DatasetVersion managedVersion;\n-            if (updateDraft) {\n-                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n-                managedVersion = managedDataset.getEditVersion();\n-            } else {\n-                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n-            }\n-            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n-            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n-\n-        } catch (WrappedResponse ex) {\n-            return ex.getResponse();\n-        } catch (JsonParsingException jpe) {\n-            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n-            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n-        }\n-    }\n-    \n-    @PUT\n-    @Path(\"{id}/metadata/delete\")\n-    @Consumes(\"application/ld+json, application/json-ld\")\n-    public Response deleteMetadata(String jsonLDBody, @PathParam(\"id\") String id) {\n-        try {\n-            Dataset ds = findDatasetOrDie(id);\n-            DataverseRequest req = createDataverseRequest(findUserOrDie());\n-            DatasetVersion dsv = ds.getEditVersion();\n-            boolean updateDraft = ds.getLatestVersion().isDraft();\n-            dsv = JSONLDUtil.deleteDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc);\n-            DatasetVersion managedVersion;\n-            if (updateDraft) {\n-                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n-                managedVersion = managedDataset.getEditVersion();\n-            } else {\n-                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n-            }\n-            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n-            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n-\n-        } catch (WrappedResponse ex) {\n-            ex.printStackTrace();\n-            return ex.getResponse();\n-        } catch (JsonParsingException jpe) {\n-            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n-            jpe.printStackTrace();\n-            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n-        }\n-    }\n     \n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n", "next_change": {"commit": "19f3eac7cfd7837b45f6d22f8d8d53215354c1ad", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex 27fbf8661f..b32908a303 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -649,6 +659,94 @@ public class Datasets extends AbstractApiBean {\n             \n         }\n     }\n+\n+    @GET\n+    @Path(\"{id}/versions/{versionId}/metadata\")\n+    @Produces(\"application/ld+json, application/json-ld\")\n+    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @PathParam(\"versionId\") String versionId, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n+        try {\n+            DataverseRequest req = createDataverseRequest(findUserOrDie());\n+            DatasetVersion dsv = getDatasetVersionOrDie(req, versionId, findDatasetOrDie(id), uriInfo, headers);\n+            OREMap ore = new OREMap(dsv,\n+                    settingsService.isTrueForKey(SettingsServiceBean.Key.ExcludeEmailFromExport, false));\n+            return ok(ore.getOREMapBuilder(true));\n+\n+        } catch (WrappedResponse ex) {\n+            ex.printStackTrace();\n+            return ex.getResponse();\n+        } catch (Exception jpe) {\n+            logger.log(Level.SEVERE, \"Error getting jsonld metadata for dsv: \", jpe.getLocalizedMessage());\n+            jpe.printStackTrace();\n+            return error(Response.Status.INTERNAL_SERVER_ERROR, jpe.getLocalizedMessage());\n+        }\n+    }\n+\n+    @GET\n+    @Path(\"{id}/metadata\")\n+    @Produces(\"application/ld+json, application/json-ld\")\n+    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n+        return getVersionJsonLDMetadata(id, \":draft\", uriInfo, headers);\n+    }\n+\n+    @PUT\n+    @Path(\"{id}/metadata\")\n+    @Consumes(\"application/ld+json, application/json-ld\")\n+    public Response updateVersionMetadata(String jsonLDBody, @PathParam(\"id\") String id, @DefaultValue(\"false\") @QueryParam(\"replace\") boolean replaceTerms) {\n+\n+        try {\n+            Dataset ds = findDatasetOrDie(id);\n+            DataverseRequest req = createDataverseRequest(findUserOrDie());\n+            DatasetVersion dsv = ds.getEditVersion();\n+            boolean updateDraft = ds.getLatestVersion().isDraft();\n+            dsv = JSONLDUtil.updateDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc, !replaceTerms, false);\n+\n+            DatasetVersion managedVersion;\n+            if (updateDraft) {\n+                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n+                managedVersion = managedDataset.getEditVersion();\n+            } else {\n+                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n+            }\n+            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n+            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n+\n+        } catch (WrappedResponse ex) {\n+            return ex.getResponse();\n+        } catch (JsonParsingException jpe) {\n+            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n+            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n+        }\n+    }\n+\n+    @PUT\n+    @Path(\"{id}/metadata/delete\")\n+    @Consumes(\"application/ld+json, application/json-ld\")\n+    public Response deleteMetadata(String jsonLDBody, @PathParam(\"id\") String id) {\n+        try {\n+            Dataset ds = findDatasetOrDie(id);\n+            DataverseRequest req = createDataverseRequest(findUserOrDie());\n+            DatasetVersion dsv = ds.getEditVersion();\n+            boolean updateDraft = ds.getLatestVersion().isDraft();\n+            dsv = JSONLDUtil.deleteDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc);\n+            DatasetVersion managedVersion;\n+            if (updateDraft) {\n+                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n+                managedVersion = managedDataset.getEditVersion();\n+            } else {\n+                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n+            }\n+            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n+            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n+\n+        } catch (WrappedResponse ex) {\n+            ex.printStackTrace();\n+            return ex.getResponse();\n+        } catch (JsonParsingException jpe) {\n+            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n+            jpe.printStackTrace();\n+            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n+        }\n+    }\n     \n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n", "next_change": {"commit": "6cc86e020135c1916d26be8ecef37bbf14f4f7c6", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex b32908a303..9ea7e4b27f 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -747,7 +747,7 @@ public class Datasets extends AbstractApiBean {\n             return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n         }\n     }\n-    \n+\n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n     public Response deleteVersionMetadata(String jsonBody, @PathParam(\"id\") String id) throws WrappedResponse {\n", "next_change": {"commit": "c833eb98362792296239444bdb0510be10135a38", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex 9ea7e4b27f..348323b49d 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -747,7 +752,7 @@ public class Datasets extends AbstractApiBean {\n             return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n         }\n     }\n-\n+    \n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n     public Response deleteVersionMetadata(String jsonBody, @PathParam(\"id\") String id) throws WrappedResponse {\n", "next_change": {"commit": "21ff777277a49e45a8ececbd797d7f2272e7780d", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex 348323b49d..75e81efdba 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -752,7 +767,7 @@ public class Datasets extends AbstractApiBean {\n             return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n         }\n     }\n-    \n+\n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n     public Response deleteVersionMetadata(String jsonBody, @PathParam(\"id\") String id) throws WrappedResponse {\n", "next_change": {"commit": "60d7d0dff8f6f0063f94f44bf79080867e3ec0ae", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex 75e81efdba..ddb3cf489d 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -767,7 +752,7 @@ public class Datasets extends AbstractApiBean {\n             return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n         }\n     }\n-\n+    \n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n     public Response deleteVersionMetadata(String jsonBody, @PathParam(\"id\") String id) throws WrappedResponse {\n", "next_change": {"commit": "925a1c3f3d2538a365edc8f8c23735355615e08b", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex ddb3cf489d..9f86649718 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -752,7 +747,7 @@ public class Datasets extends AbstractApiBean {\n             return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n         }\n     }\n-    \n+\n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n     public Response deleteVersionMetadata(String jsonBody, @PathParam(\"id\") String id) throws WrappedResponse {\n", "next_change": {"commit": "eade0066585b3511ccb9adbc1cea1d1f4d8caf37", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex 9f86649718..c2f820fbf8 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -747,7 +755,7 @@ public class Datasets extends AbstractApiBean {\n             return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n         }\n     }\n-\n+    \n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n     public Response deleteVersionMetadata(String jsonBody, @PathParam(\"id\") String id) throws WrappedResponse {\n", "next_change": {"commit": "56fd065a1675449925d0426558aa007bf0a299e7", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex c2f820fbf8..a9b7317167 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -755,7 +766,7 @@ public class Datasets extends AbstractApiBean {\n             return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n         }\n     }\n-    \n+\n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n     public Response deleteVersionMetadata(String jsonBody, @PathParam(\"id\") String id) throws WrappedResponse {\n", "next_change": {"commit": "8f8531a23b5156f0093e32272ed683c692e27f7f", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex a9b7317167..2da116f5f6 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -766,7 +760,7 @@ public class Datasets extends AbstractApiBean {\n             return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n         }\n     }\n-\n+    \n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n     public Response deleteVersionMetadata(String jsonBody, @PathParam(\"id\") String id) throws WrappedResponse {\n", "next_change": {"commit": "fae74755535964a4f8d87f46a14f454cf8d544a5", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex 2da116f5f6..fb585a4ba9 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -760,7 +761,7 @@ public class Datasets extends AbstractApiBean {\n             return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n         }\n     }\n-    \n+\n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n     public Response deleteVersionMetadata(String jsonBody, @PathParam(\"id\") String id) throws WrappedResponse {\n", "next_change": {"commit": "c72c57ac2b225b614824d4a5ffc4bed467d73a8b", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex fb585a4ba9..ee4c5ffa12 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -761,7 +760,7 @@ public class Datasets extends AbstractApiBean {\n             return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n         }\n     }\n-\n+    \n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n     public Response deleteVersionMetadata(String jsonBody, @PathParam(\"id\") String id) throws WrappedResponse {\n", "next_change": {"commit": "d2c61b343fcdfbcba5590b18b89f0ed976ee147a", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex ee4c5ffa12..948b91ca66 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -760,7 +769,7 @@ public class Datasets extends AbstractApiBean {\n             return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n         }\n     }\n-    \n+\n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n     public Response deleteVersionMetadata(String jsonBody, @PathParam(\"id\") String id) throws WrappedResponse {\n", "next_change": {"commit": "ec1313056ada36b4d66da2938c1273c6b8d5e72b", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex 948b91ca66..8473be7065 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -769,7 +729,7 @@ public class Datasets extends AbstractApiBean {\n             return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n         }\n     }\n-\n+    \n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n     public Response deleteVersionMetadata(String jsonBody, @PathParam(\"id\") String id) throws WrappedResponse {\n", "next_change": {"commit": "f994923879e5eb5b9404c8c9eb3d77e613eea0fd", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex 8473be7065..ce5caf20db 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -729,7 +762,7 @@ public class Datasets extends AbstractApiBean {\n             return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n         }\n     }\n-    \n+\n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n     public Response deleteVersionMetadata(String jsonBody, @PathParam(\"id\") String id) throws WrappedResponse {\n", "next_change": {"commit": "8026778c742f6d6be71a6161907fe62eca061415", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex ce5caf20db..cd9c57c41a 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -762,7 +731,7 @@ public class Datasets extends AbstractApiBean {\n             return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n         }\n     }\n-\n+    \n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n     public Response deleteVersionMetadata(String jsonBody, @PathParam(\"id\") String id) throws WrappedResponse {\n", "next_change": {"commit": "c10530ce764d5c67267958970dd6d9196e9a37ef", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex cd9c57c41a..02fdaf1543 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -731,7 +737,7 @@ public class Datasets extends AbstractApiBean {\n             return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n         }\n     }\n-    \n+\n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n     public Response deleteVersionMetadata(String jsonBody, @PathParam(\"id\") String id) throws WrappedResponse {\n", "next_change": {"commit": "16d03003488998ae5e64cb80f0a94e8bb5cf6961", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex 02fdaf1543..93f4875390 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -737,7 +729,7 @@ public class Datasets extends AbstractApiBean {\n             return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n         }\n     }\n-\n+    \n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n     public Response deleteVersionMetadata(String jsonBody, @PathParam(\"id\") String id) throws WrappedResponse {\n", "next_change": {"commit": "8f596531cf0e1ec6583e89a5d96ccff38dbe46a4", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex 93f4875390..7520c53117 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -729,7 +733,7 @@ public class Datasets extends AbstractApiBean {\n             return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n         }\n     }\n-    \n+\n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n     public Response deleteVersionMetadata(String jsonBody, @PathParam(\"id\") String id) throws WrappedResponse {\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MjU3NDMyNw==", "url": "https://github.com/IQSS/dataverse/pull/7414#discussion_r662574327", "body": "Same. Delete or set to fine.", "bodyText": "Same. Delete or set to fine.", "bodyHTML": "<p dir=\"auto\">Same. Delete or set to fine.</p>", "author": "pdurbin", "createdAt": "2021-07-01T20:31:41Z", "path": "src/main/java/edu/harvard/iq/dataverse/api/Datasets.java", "diffHunk": "@@ -651,6 +651,96 @@ public Response updateDraftVersion( String jsonBody, @PathParam(\"id\") String id,\n             \n         }\n     }\n+  \n+    @GET\n+    @Path(\"{id}/versions/{versionId}/metadata\")\n+    @Produces(\"application/ld+json, application/json-ld\")\n+    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @PathParam(\"versionId\") String versionId, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n+        try {\n+            DataverseRequest req = createDataverseRequest(findUserOrDie());\n+            DatasetVersion dsv = getDatasetVersionOrDie(req, versionId, findDatasetOrDie(id), uriInfo, headers);\n+            OREMap ore = new OREMap(dsv,\n+                    settingsService.isTrueForKey(SettingsServiceBean.Key.ExcludeEmailFromExport, false));\n+            return ok(ore.getOREMapBuilder(true));\n+\n+        } catch (WrappedResponse ex) {\n+            ex.printStackTrace();\n+            return ex.getResponse();\n+        } catch (Exception jpe) {\n+            logger.log(Level.SEVERE, \"Error getting jsonld metadata for dsv: \", jpe.getLocalizedMessage());\n+            jpe.printStackTrace();\n+            return error(Response.Status.INTERNAL_SERVER_ERROR, jpe.getLocalizedMessage());\n+        }\n+    }\n+\n+    @GET\n+    @Path(\"{id}/metadata\")\n+    @Produces(\"application/ld+json, application/json-ld\")\n+    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n+        return getVersionJsonLDMetadata(id, \":draft\", uriInfo, headers);\n+    }\n+            \n+    @PUT\n+    @Path(\"{id}/metadata\")\n+    @Consumes(\"application/ld+json, application/json-ld\")\n+    public Response updateVersionMetadata(String jsonLDBody, @PathParam(\"id\") String id, @DefaultValue(\"false\") @QueryParam(\"replace\") boolean replaceTerms) {\n+\n+        try {\n+            Dataset ds = findDatasetOrDie(id);\n+            DataverseRequest req = createDataverseRequest(findUserOrDie());\n+            DatasetVersion dsv = ds.getEditVersion();\n+            boolean updateDraft = ds.getLatestVersion().isDraft();\n+            dsv = JSONLDUtil.updateDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc, !replaceTerms, false);\n+            \n+            DatasetVersion managedVersion;\n+            if (updateDraft) {\n+                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n+                managedVersion = managedDataset.getEditVersion();\n+            } else {\n+                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n+            }\n+            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n+            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n+\n+        } catch (WrappedResponse ex) {\n+            return ex.getResponse();\n+        } catch (JsonParsingException jpe) {\n+            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n+            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n+        }\n+    }\n+    \n+    @PUT\n+    @Path(\"{id}/metadata/delete\")\n+    @Consumes(\"application/ld+json, application/json-ld\")\n+    public Response deleteMetadata(String jsonLDBody, @PathParam(\"id\") String id) {\n+        logger.info(\"In delteMetadata\");\n+        try {\n+            Dataset ds = findDatasetOrDie(id);\n+            DataverseRequest req = createDataverseRequest(findUserOrDie());\n+            DatasetVersion dsv = ds.getEditVersion();\n+            boolean updateDraft = ds.getLatestVersion().isDraft();\n+            dsv = JSONLDUtil.deleteDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc);\n+            logger.info(\"Updating ver\");", "originalCommit": "10ef9ff27eb38668bd06234f9bb79545782d36e7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MzE2NzY2NA==", "url": "https://github.com/IQSS/dataverse/pull/7414#discussion_r663167664", "bodyText": "removed", "author": "qqmyers", "createdAt": "2021-07-02T17:46:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MjU3NDMyNw=="}], "type": "inlineReview", "revised_code": {"commit": "00d53ee4d43fd49a81faa1f31b9b0c6a1cad8b46", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex 608d9554f6..7fd3b1ab63 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -651,96 +609,6 @@ public class Datasets extends AbstractApiBean {\n             \n         }\n     }\n-  \n-    @GET\n-    @Path(\"{id}/versions/{versionId}/metadata\")\n-    @Produces(\"application/ld+json, application/json-ld\")\n-    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @PathParam(\"versionId\") String versionId, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n-        try {\n-            DataverseRequest req = createDataverseRequest(findUserOrDie());\n-            DatasetVersion dsv = getDatasetVersionOrDie(req, versionId, findDatasetOrDie(id), uriInfo, headers);\n-            OREMap ore = new OREMap(dsv,\n-                    settingsService.isTrueForKey(SettingsServiceBean.Key.ExcludeEmailFromExport, false));\n-            return ok(ore.getOREMapBuilder(true));\n-\n-        } catch (WrappedResponse ex) {\n-            ex.printStackTrace();\n-            return ex.getResponse();\n-        } catch (Exception jpe) {\n-            logger.log(Level.SEVERE, \"Error getting jsonld metadata for dsv: \", jpe.getLocalizedMessage());\n-            jpe.printStackTrace();\n-            return error(Response.Status.INTERNAL_SERVER_ERROR, jpe.getLocalizedMessage());\n-        }\n-    }\n-\n-    @GET\n-    @Path(\"{id}/metadata\")\n-    @Produces(\"application/ld+json, application/json-ld\")\n-    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n-        return getVersionJsonLDMetadata(id, \":draft\", uriInfo, headers);\n-    }\n-            \n-    @PUT\n-    @Path(\"{id}/metadata\")\n-    @Consumes(\"application/ld+json, application/json-ld\")\n-    public Response updateVersionMetadata(String jsonLDBody, @PathParam(\"id\") String id, @DefaultValue(\"false\") @QueryParam(\"replace\") boolean replaceTerms) {\n-\n-        try {\n-            Dataset ds = findDatasetOrDie(id);\n-            DataverseRequest req = createDataverseRequest(findUserOrDie());\n-            DatasetVersion dsv = ds.getEditVersion();\n-            boolean updateDraft = ds.getLatestVersion().isDraft();\n-            dsv = JSONLDUtil.updateDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc, !replaceTerms, false);\n-            \n-            DatasetVersion managedVersion;\n-            if (updateDraft) {\n-                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n-                managedVersion = managedDataset.getEditVersion();\n-            } else {\n-                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n-            }\n-            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n-            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n-\n-        } catch (WrappedResponse ex) {\n-            return ex.getResponse();\n-        } catch (JsonParsingException jpe) {\n-            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n-            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n-        }\n-    }\n-    \n-    @PUT\n-    @Path(\"{id}/metadata/delete\")\n-    @Consumes(\"application/ld+json, application/json-ld\")\n-    public Response deleteMetadata(String jsonLDBody, @PathParam(\"id\") String id) {\n-        logger.info(\"In delteMetadata\");\n-        try {\n-            Dataset ds = findDatasetOrDie(id);\n-            DataverseRequest req = createDataverseRequest(findUserOrDie());\n-            DatasetVersion dsv = ds.getEditVersion();\n-            boolean updateDraft = ds.getLatestVersion().isDraft();\n-            dsv = JSONLDUtil.deleteDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc);\n-            logger.info(\"Updating ver\");\n-            DatasetVersion managedVersion;\n-            if (updateDraft) {\n-                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n-                managedVersion = managedDataset.getEditVersion();\n-            } else {\n-                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n-            }\n-            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n-            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n-\n-        } catch (WrappedResponse ex) {\n-            ex.printStackTrace();\n-            return ex.getResponse();\n-        } catch (JsonParsingException jpe) {\n-            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n-            jpe.printStackTrace();\n-            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n-        }\n-    }\n     \n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n", "next_change": {"commit": "b45336c95ecbcee28b88a5b334c2180c86eb63fc", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex 7fd3b1ab63..20874f7065 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -610,6 +611,38 @@ public class Datasets extends AbstractApiBean {\n         }\n     }\n     \n+\t@PUT\n+\t@Path(\"{id}/versions/{versionId}/metadata\")\n+\t@Consumes(\"application/json-ld\")\n+\tpublic Response updateVersionMetadata(String jsonLDBody, @PathParam(\"id\") String id,\n+\t\t\t@PathParam(\"versionId\") String versionId, @QueryParam(\"replace\") boolean replaceTerms) {\n+\n+\t\tif (!\":draft\".equals(versionId)) {\n+\t\t\treturn error(Response.Status.BAD_REQUEST, \"Only the :draft version can be updated\");\n+\t\t}\n+\t\ttry {\n+\t\t\tDataset ds = findDatasetOrDie(id);\n+\t\t\tDataverseRequest req = createDataverseRequest(findUserOrDie());\n+\t\t\tDatasetVersion dsv = ds.getEditVersion();\n+\t\t\tboolean updateDraft = ds.getLatestVersion().isDraft();\n+\t\t\tdsv = JSONLDUtil.updateDatasetVersionFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc, !replaceTerms);\n+\t\t\t\n+\t\t\tDatasetVersion managedVersion;\n+\t\t\tif (updateDraft) {\n+\t\t\t\tDataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n+\t\t\t\tmanagedVersion = managedDataset.getEditVersion();\n+\t\t\t} else {\n+\t\t\t\tmanagedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n+\t\t\t}\n+\t\t\tString info = updateDraft ? \"Version Updated\" : \"Version Created\";\n+\t\t\treturn ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n+\n+\t\t} catch (WrappedResponse ex) {\n+\t\t\treturn ex.getResponse();\n+\n+\t\t}\n+\t}\n+    \n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n     public Response deleteVersionMetadata(String jsonBody, @PathParam(\"id\") String id) throws WrappedResponse {\n", "next_change": {"commit": "6d537ce15b5989abb1bacd85a48ae17b447cd1cd", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex 20874f7065..a376e663e9 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -639,7 +641,9 @@ public class Datasets extends AbstractApiBean {\n \n \t\t} catch (WrappedResponse ex) {\n \t\t\treturn ex.getResponse();\n-\n+\t\t} catch (JsonParsingException jpe) {\n+\t\t    logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n+            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n \t\t}\n \t}\n     \n", "next_change": {"commit": "24cfcfa08257d9245b2d6f033c679e59c4424316", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex a376e663e9..8b9118741b 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -640,9 +696,11 @@ public class Datasets extends AbstractApiBean {\n \t\t\treturn ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n \n \t\t} catch (WrappedResponse ex) {\n+\t\t    ex.printStackTrace();\n \t\t\treturn ex.getResponse();\n \t\t} catch (JsonParsingException jpe) {\n \t\t    logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n+\t\t    jpe.printStackTrace();\n             return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n \t\t}\n \t}\n", "next_change": {"commit": "38a1d38f37f8ef0d9d75db51a5b6707f58fb8227", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex 8b9118741b..1db28d5dcc 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -614,96 +615,6 @@ public class Datasets extends AbstractApiBean {\n             \n         }\n     }\n-  \n-    @GET\n-    @Path(\"{id}/versions/{versionId}/metadata\")\n-    @Produces(\"application/json-ld\")\n-    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @PathParam(\"versionId\") String versionId, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n-        try {\n-            DataverseRequest req = createDataverseRequest(findUserOrDie());\n-            DatasetVersion dsv = getDatasetVersionOrDie(req, versionId, findDatasetOrDie(id), uriInfo, headers);\n-            OREMap ore = new OREMap(dsv,\n-                    settingsService.isTrueForKey(SettingsServiceBean.Key.ExcludeEmailFromExport, false));\n-            return ok(ore.getOREMapBuilder(true));\n-\n-        } catch (WrappedResponse ex) {\n-            ex.printStackTrace();\n-            return ex.getResponse();\n-        } catch (Exception jpe) {\n-            logger.log(Level.SEVERE, \"Error getting jsonld metadata for dsv: \", jpe.getLocalizedMessage());\n-            jpe.printStackTrace();\n-            return error(Response.Status.INTERNAL_SERVER_ERROR, jpe.getLocalizedMessage());\n-        }\n-    }\n-\n-    @GET\n-    @Path(\"{id}/metadata\")\n-    @Produces(\"application/json-ld\")\n-    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n-        return getVersionJsonLDMetadata(id, \":draft\", uriInfo, headers);\n-    }\n-            \n-    @PUT\n-    @Path(\"{id}/metadata\")\n-    @Consumes(\"application/json-ld\")\n-    public Response updateVersionMetadata(String jsonLDBody, @PathParam(\"id\") String id, @DefaultValue(\"false\") @QueryParam(\"replace\") boolean replaceTerms) {\n-\n-        try {\n-            Dataset ds = findDatasetOrDie(id);\n-            DataverseRequest req = createDataverseRequest(findUserOrDie());\n-            DatasetVersion dsv = ds.getEditVersion();\n-            boolean updateDraft = ds.getLatestVersion().isDraft();\n-            dsv = JSONLDUtil.updateDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc, !replaceTerms, false);\n-            \n-            DatasetVersion managedVersion;\n-            if (updateDraft) {\n-                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n-                managedVersion = managedDataset.getEditVersion();\n-            } else {\n-                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n-            }\n-            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n-            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n-\n-        } catch (WrappedResponse ex) {\n-            return ex.getResponse();\n-        } catch (JsonParsingException jpe) {\n-            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n-            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n-        }\n-    }\n-    \n-\t@PUT\n-\t@Path(\"{id}/metadata/delete\")\n-\t@Consumes(\"application/json-ld\")\n-\tpublic Response deleteMetadata(String jsonLDBody, @PathParam(\"id\") String id) {\n-        logger.info(\"In delteMetadata\");\n-\t\ttry {\n-\t\t\tDataset ds = findDatasetOrDie(id);\n-\t\t\tDataverseRequest req = createDataverseRequest(findUserOrDie());\n-\t\t\tDatasetVersion dsv = ds.getEditVersion();\n-\t\t\tboolean updateDraft = ds.getLatestVersion().isDraft();\n-\t\t\tdsv = JSONLDUtil.deleteDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc);\n-\t\t\tlogger.info(\"Updating ver\");\n-\t\t\tDatasetVersion managedVersion;\n-\t\t\tif (updateDraft) {\n-\t\t\t\tDataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n-\t\t\t\tmanagedVersion = managedDataset.getEditVersion();\n-\t\t\t} else {\n-\t\t\t\tmanagedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n-\t\t\t}\n-\t\t\tString info = updateDraft ? \"Version Updated\" : \"Version Created\";\n-\t\t\treturn ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n-\n-\t\t} catch (WrappedResponse ex) {\n-\t\t    ex.printStackTrace();\n-\t\t\treturn ex.getResponse();\n-\t\t} catch (JsonParsingException jpe) {\n-\t\t    logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n-\t\t    jpe.printStackTrace();\n-            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n-\t\t}\n-\t}\n     \n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n", "next_change": {"commit": "5305e759e7e20774e3a435936a3ea2009bf1d058", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex 1db28d5dcc..9eb82996de 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -615,6 +647,96 @@ public class Datasets extends AbstractApiBean {\n             \n         }\n     }\n+  \n+    @GET\n+    @Path(\"{id}/versions/{versionId}/metadata\")\n+    @Produces(\"application/json-ld\")\n+    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @PathParam(\"versionId\") String versionId, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n+        try {\n+            DataverseRequest req = createDataverseRequest(findUserOrDie());\n+            DatasetVersion dsv = getDatasetVersionOrDie(req, versionId, findDatasetOrDie(id), uriInfo, headers);\n+            OREMap ore = new OREMap(dsv,\n+                    settingsService.isTrueForKey(SettingsServiceBean.Key.ExcludeEmailFromExport, false));\n+            return ok(ore.getOREMapBuilder(true));\n+\n+        } catch (WrappedResponse ex) {\n+            ex.printStackTrace();\n+            return ex.getResponse();\n+        } catch (Exception jpe) {\n+            logger.log(Level.SEVERE, \"Error getting jsonld metadata for dsv: \", jpe.getLocalizedMessage());\n+            jpe.printStackTrace();\n+            return error(Response.Status.INTERNAL_SERVER_ERROR, jpe.getLocalizedMessage());\n+        }\n+    }\n+\n+    @GET\n+    @Path(\"{id}/metadata\")\n+    @Produces(\"application/json-ld\")\n+    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n+        return getVersionJsonLDMetadata(id, \":draft\", uriInfo, headers);\n+    }\n+            \n+    @PUT\n+    @Path(\"{id}/metadata\")\n+    @Consumes(\"application/json-ld\")\n+    public Response updateVersionMetadata(String jsonLDBody, @PathParam(\"id\") String id, @DefaultValue(\"false\") @QueryParam(\"replace\") boolean replaceTerms) {\n+\n+        try {\n+            Dataset ds = findDatasetOrDie(id);\n+            DataverseRequest req = createDataverseRequest(findUserOrDie());\n+            DatasetVersion dsv = ds.getEditVersion();\n+            boolean updateDraft = ds.getLatestVersion().isDraft();\n+            dsv = JSONLDUtil.updateDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc, !replaceTerms, false);\n+            \n+            DatasetVersion managedVersion;\n+            if (updateDraft) {\n+                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n+                managedVersion = managedDataset.getEditVersion();\n+            } else {\n+                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n+            }\n+            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n+            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n+\n+        } catch (WrappedResponse ex) {\n+            return ex.getResponse();\n+        } catch (JsonParsingException jpe) {\n+            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n+            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n+        }\n+    }\n+    \n+    @PUT\n+    @Path(\"{id}/metadata/delete\")\n+    @Consumes(\"application/json-ld\")\n+    public Response deleteMetadata(String jsonLDBody, @PathParam(\"id\") String id) {\n+        logger.info(\"In delteMetadata\");\n+        try {\n+            Dataset ds = findDatasetOrDie(id);\n+            DataverseRequest req = createDataverseRequest(findUserOrDie());\n+            DatasetVersion dsv = ds.getEditVersion();\n+            boolean updateDraft = ds.getLatestVersion().isDraft();\n+            dsv = JSONLDUtil.deleteDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc);\n+            logger.info(\"Updating ver\");\n+            DatasetVersion managedVersion;\n+            if (updateDraft) {\n+                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n+                managedVersion = managedDataset.getEditVersion();\n+            } else {\n+                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n+            }\n+            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n+            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n+\n+        } catch (WrappedResponse ex) {\n+            ex.printStackTrace();\n+            return ex.getResponse();\n+        } catch (JsonParsingException jpe) {\n+            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n+            jpe.printStackTrace();\n+            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n+        }\n+    }\n     \n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n", "next_change": {"commit": "2fa243abe63c60b07a714070acd4a62d5c8d6e96", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex 9eb82996de..c2854b33e2 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -636,108 +644,18 @@ public class Datasets extends AbstractApiBean {\n //            DatasetVersion managedVersion = execCommand( updateDraft\n //                                                             ? new UpdateDatasetVersionCommand(req, incomingVersion)\n //                                                             : new CreateDatasetVersionCommand(req, ds, incomingVersion));\n-            return ok( json(managedVersion) );\n-                    \n+            return ok(json(managedVersion));\n+\n         } catch (JsonParseException ex) {\n             logger.log(Level.SEVERE, \"Semantic error parsing dataset version Json: \" + ex.getMessage(), ex);\n-            return error( Response.Status.BAD_REQUEST, \"Error parsing dataset version: \" + ex.getMessage() );\n-            \n-        } catch (WrappedResponse ex) {\n-            return ex.getResponse();\n-            \n-        }\n-    }\n-  \n-    @GET\n-    @Path(\"{id}/versions/{versionId}/metadata\")\n-    @Produces(\"application/json-ld\")\n-    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @PathParam(\"versionId\") String versionId, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n-        try {\n-            DataverseRequest req = createDataverseRequest(findUserOrDie());\n-            DatasetVersion dsv = getDatasetVersionOrDie(req, versionId, findDatasetOrDie(id), uriInfo, headers);\n-            OREMap ore = new OREMap(dsv,\n-                    settingsService.isTrueForKey(SettingsServiceBean.Key.ExcludeEmailFromExport, false));\n-            return ok(ore.getOREMapBuilder(true));\n+            return error(Response.Status.BAD_REQUEST, \"Error parsing dataset version: \" + ex.getMessage());\n \n         } catch (WrappedResponse ex) {\n-            ex.printStackTrace();\n             return ex.getResponse();\n-        } catch (Exception jpe) {\n-            logger.log(Level.SEVERE, \"Error getting jsonld metadata for dsv: \", jpe.getLocalizedMessage());\n-            jpe.printStackTrace();\n-            return error(Response.Status.INTERNAL_SERVER_ERROR, jpe.getLocalizedMessage());\n-        }\n-    }\n-\n-    @GET\n-    @Path(\"{id}/metadata\")\n-    @Produces(\"application/json-ld\")\n-    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n-        return getVersionJsonLDMetadata(id, \":draft\", uriInfo, headers);\n-    }\n-            \n-    @PUT\n-    @Path(\"{id}/metadata\")\n-    @Consumes(\"application/json-ld\")\n-    public Response updateVersionMetadata(String jsonLDBody, @PathParam(\"id\") String id, @DefaultValue(\"false\") @QueryParam(\"replace\") boolean replaceTerms) {\n-\n-        try {\n-            Dataset ds = findDatasetOrDie(id);\n-            DataverseRequest req = createDataverseRequest(findUserOrDie());\n-            DatasetVersion dsv = ds.getEditVersion();\n-            boolean updateDraft = ds.getLatestVersion().isDraft();\n-            dsv = JSONLDUtil.updateDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc, !replaceTerms, false);\n-            \n-            DatasetVersion managedVersion;\n-            if (updateDraft) {\n-                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n-                managedVersion = managedDataset.getEditVersion();\n-            } else {\n-                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n-            }\n-            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n-            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n \n-        } catch (WrappedResponse ex) {\n-            return ex.getResponse();\n-        } catch (JsonParsingException jpe) {\n-            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n-            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n         }\n     }\n-    \n-    @PUT\n-    @Path(\"{id}/metadata/delete\")\n-    @Consumes(\"application/json-ld\")\n-    public Response deleteMetadata(String jsonLDBody, @PathParam(\"id\") String id) {\n-        logger.info(\"In delteMetadata\");\n-        try {\n-            Dataset ds = findDatasetOrDie(id);\n-            DataverseRequest req = createDataverseRequest(findUserOrDie());\n-            DatasetVersion dsv = ds.getEditVersion();\n-            boolean updateDraft = ds.getLatestVersion().isDraft();\n-            dsv = JSONLDUtil.deleteDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc);\n-            logger.info(\"Updating ver\");\n-            DatasetVersion managedVersion;\n-            if (updateDraft) {\n-                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n-                managedVersion = managedDataset.getEditVersion();\n-            } else {\n-                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n-            }\n-            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n-            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n \n-        } catch (WrappedResponse ex) {\n-            ex.printStackTrace();\n-            return ex.getResponse();\n-        } catch (JsonParsingException jpe) {\n-            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n-            jpe.printStackTrace();\n-            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n-        }\n-    }\n-    \n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n     public Response deleteVersionMetadata(String jsonBody, @PathParam(\"id\") String id) throws WrappedResponse {\n", "next_change": {"commit": "99a1ecff4a08f72f8f01c4eb171424795009c8c5", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex c2854b33e2..8836eb62e4 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -644,18 +652,18 @@ public class Datasets extends AbstractApiBean {\n //            DatasetVersion managedVersion = execCommand( updateDraft\n //                                                             ? new UpdateDatasetVersionCommand(req, incomingVersion)\n //                                                             : new CreateDatasetVersionCommand(req, ds, incomingVersion));\n-            return ok(json(managedVersion));\n-\n+            return ok( json(managedVersion) );\n+                    \n         } catch (JsonParseException ex) {\n             logger.log(Level.SEVERE, \"Semantic error parsing dataset version Json: \" + ex.getMessage(), ex);\n-            return error(Response.Status.BAD_REQUEST, \"Error parsing dataset version: \" + ex.getMessage());\n-\n+            return error( Response.Status.BAD_REQUEST, \"Error parsing dataset version: \" + ex.getMessage() );\n+            \n         } catch (WrappedResponse ex) {\n             return ex.getResponse();\n-\n+            \n         }\n     }\n-\n+    \n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n     public Response deleteVersionMetadata(String jsonBody, @PathParam(\"id\") String id) throws WrappedResponse {\n", "next_change": {"commit": "3a3235451900dacd9dbf48ea33ed445f128214a1", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex 8836eb62e4..777627437d 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -663,6 +651,96 @@ public class Datasets extends AbstractApiBean {\n             \n         }\n     }\n+  \n+    @GET\n+    @Path(\"{id}/versions/{versionId}/metadata\")\n+    @Produces(\"application/json-ld\")\n+    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @PathParam(\"versionId\") String versionId, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n+        try {\n+            DataverseRequest req = createDataverseRequest(findUserOrDie());\n+            DatasetVersion dsv = getDatasetVersionOrDie(req, versionId, findDatasetOrDie(id), uriInfo, headers);\n+            OREMap ore = new OREMap(dsv,\n+                    settingsService.isTrueForKey(SettingsServiceBean.Key.ExcludeEmailFromExport, false));\n+            return ok(ore.getOREMapBuilder(true));\n+\n+        } catch (WrappedResponse ex) {\n+            ex.printStackTrace();\n+            return ex.getResponse();\n+        } catch (Exception jpe) {\n+            logger.log(Level.SEVERE, \"Error getting jsonld metadata for dsv: \", jpe.getLocalizedMessage());\n+            jpe.printStackTrace();\n+            return error(Response.Status.INTERNAL_SERVER_ERROR, jpe.getLocalizedMessage());\n+        }\n+    }\n+\n+    @GET\n+    @Path(\"{id}/metadata\")\n+    @Produces(\"application/json-ld\")\n+    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n+        return getVersionJsonLDMetadata(id, \":draft\", uriInfo, headers);\n+    }\n+            \n+    @PUT\n+    @Path(\"{id}/metadata\")\n+    @Consumes(\"application/json-ld\")\n+    public Response updateVersionMetadata(String jsonLDBody, @PathParam(\"id\") String id, @DefaultValue(\"false\") @QueryParam(\"replace\") boolean replaceTerms) {\n+\n+        try {\n+            Dataset ds = findDatasetOrDie(id);\n+            DataverseRequest req = createDataverseRequest(findUserOrDie());\n+            DatasetVersion dsv = ds.getEditVersion();\n+            boolean updateDraft = ds.getLatestVersion().isDraft();\n+            dsv = JSONLDUtil.updateDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc, !replaceTerms, false);\n+            \n+            DatasetVersion managedVersion;\n+            if (updateDraft) {\n+                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n+                managedVersion = managedDataset.getEditVersion();\n+            } else {\n+                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n+            }\n+            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n+            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n+\n+        } catch (WrappedResponse ex) {\n+            return ex.getResponse();\n+        } catch (JsonParsingException jpe) {\n+            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n+            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n+        }\n+    }\n+    \n+    @PUT\n+    @Path(\"{id}/metadata/delete\")\n+    @Consumes(\"application/json-ld\")\n+    public Response deleteMetadata(String jsonLDBody, @PathParam(\"id\") String id) {\n+        logger.info(\"In delteMetadata\");\n+        try {\n+            Dataset ds = findDatasetOrDie(id);\n+            DataverseRequest req = createDataverseRequest(findUserOrDie());\n+            DatasetVersion dsv = ds.getEditVersion();\n+            boolean updateDraft = ds.getLatestVersion().isDraft();\n+            dsv = JSONLDUtil.deleteDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc);\n+            logger.info(\"Updating ver\");\n+            DatasetVersion managedVersion;\n+            if (updateDraft) {\n+                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n+                managedVersion = managedDataset.getEditVersion();\n+            } else {\n+                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n+            }\n+            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n+            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n+\n+        } catch (WrappedResponse ex) {\n+            ex.printStackTrace();\n+            return ex.getResponse();\n+        } catch (JsonParsingException jpe) {\n+            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n+            jpe.printStackTrace();\n+            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n+        }\n+    }\n     \n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n", "next_change": {"commit": "6cd23a1b327f84fd649a0b802322532df92d345a", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex 777627437d..afeb10e304 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -651,96 +663,6 @@ public class Datasets extends AbstractApiBean {\n             \n         }\n     }\n-  \n-    @GET\n-    @Path(\"{id}/versions/{versionId}/metadata\")\n-    @Produces(\"application/json-ld\")\n-    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @PathParam(\"versionId\") String versionId, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n-        try {\n-            DataverseRequest req = createDataverseRequest(findUserOrDie());\n-            DatasetVersion dsv = getDatasetVersionOrDie(req, versionId, findDatasetOrDie(id), uriInfo, headers);\n-            OREMap ore = new OREMap(dsv,\n-                    settingsService.isTrueForKey(SettingsServiceBean.Key.ExcludeEmailFromExport, false));\n-            return ok(ore.getOREMapBuilder(true));\n-\n-        } catch (WrappedResponse ex) {\n-            ex.printStackTrace();\n-            return ex.getResponse();\n-        } catch (Exception jpe) {\n-            logger.log(Level.SEVERE, \"Error getting jsonld metadata for dsv: \", jpe.getLocalizedMessage());\n-            jpe.printStackTrace();\n-            return error(Response.Status.INTERNAL_SERVER_ERROR, jpe.getLocalizedMessage());\n-        }\n-    }\n-\n-    @GET\n-    @Path(\"{id}/metadata\")\n-    @Produces(\"application/json-ld\")\n-    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n-        return getVersionJsonLDMetadata(id, \":draft\", uriInfo, headers);\n-    }\n-            \n-    @PUT\n-    @Path(\"{id}/metadata\")\n-    @Consumes(\"application/json-ld\")\n-    public Response updateVersionMetadata(String jsonLDBody, @PathParam(\"id\") String id, @DefaultValue(\"false\") @QueryParam(\"replace\") boolean replaceTerms) {\n-\n-        try {\n-            Dataset ds = findDatasetOrDie(id);\n-            DataverseRequest req = createDataverseRequest(findUserOrDie());\n-            DatasetVersion dsv = ds.getEditVersion();\n-            boolean updateDraft = ds.getLatestVersion().isDraft();\n-            dsv = JSONLDUtil.updateDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc, !replaceTerms, false);\n-            \n-            DatasetVersion managedVersion;\n-            if (updateDraft) {\n-                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n-                managedVersion = managedDataset.getEditVersion();\n-            } else {\n-                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n-            }\n-            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n-            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n-\n-        } catch (WrappedResponse ex) {\n-            return ex.getResponse();\n-        } catch (JsonParsingException jpe) {\n-            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n-            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n-        }\n-    }\n-    \n-    @PUT\n-    @Path(\"{id}/metadata/delete\")\n-    @Consumes(\"application/json-ld\")\n-    public Response deleteMetadata(String jsonLDBody, @PathParam(\"id\") String id) {\n-        logger.info(\"In delteMetadata\");\n-        try {\n-            Dataset ds = findDatasetOrDie(id);\n-            DataverseRequest req = createDataverseRequest(findUserOrDie());\n-            DatasetVersion dsv = ds.getEditVersion();\n-            boolean updateDraft = ds.getLatestVersion().isDraft();\n-            dsv = JSONLDUtil.deleteDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc);\n-            logger.info(\"Updating ver\");\n-            DatasetVersion managedVersion;\n-            if (updateDraft) {\n-                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n-                managedVersion = managedDataset.getEditVersion();\n-            } else {\n-                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n-            }\n-            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n-            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n-\n-        } catch (WrappedResponse ex) {\n-            ex.printStackTrace();\n-            return ex.getResponse();\n-        } catch (JsonParsingException jpe) {\n-            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n-            jpe.printStackTrace();\n-            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n-        }\n-    }\n     \n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n", "next_change": {"commit": "1e7fcd17d7b102bd141e94b262ee6a53b60d2f56", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex afeb10e304..c2cb940901 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -663,6 +655,96 @@ public class Datasets extends AbstractApiBean {\n             \n         }\n     }\n+  \n+    @GET\n+    @Path(\"{id}/versions/{versionId}/metadata\")\n+    @Produces(\"application/json-ld\")\n+    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @PathParam(\"versionId\") String versionId, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n+        try {\n+            DataverseRequest req = createDataverseRequest(findUserOrDie());\n+            DatasetVersion dsv = getDatasetVersionOrDie(req, versionId, findDatasetOrDie(id), uriInfo, headers);\n+            OREMap ore = new OREMap(dsv,\n+                    settingsService.isTrueForKey(SettingsServiceBean.Key.ExcludeEmailFromExport, false));\n+            return ok(ore.getOREMapBuilder(true));\n+\n+        } catch (WrappedResponse ex) {\n+            ex.printStackTrace();\n+            return ex.getResponse();\n+        } catch (Exception jpe) {\n+            logger.log(Level.SEVERE, \"Error getting jsonld metadata for dsv: \", jpe.getLocalizedMessage());\n+            jpe.printStackTrace();\n+            return error(Response.Status.INTERNAL_SERVER_ERROR, jpe.getLocalizedMessage());\n+        }\n+    }\n+\n+    @GET\n+    @Path(\"{id}/metadata\")\n+    @Produces(\"application/json-ld\")\n+    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n+        return getVersionJsonLDMetadata(id, \":draft\", uriInfo, headers);\n+    }\n+            \n+    @PUT\n+    @Path(\"{id}/metadata\")\n+    @Consumes(\"application/json-ld\")\n+    public Response updateVersionMetadata(String jsonLDBody, @PathParam(\"id\") String id, @DefaultValue(\"false\") @QueryParam(\"replace\") boolean replaceTerms) {\n+\n+        try {\n+            Dataset ds = findDatasetOrDie(id);\n+            DataverseRequest req = createDataverseRequest(findUserOrDie());\n+            DatasetVersion dsv = ds.getEditVersion();\n+            boolean updateDraft = ds.getLatestVersion().isDraft();\n+            dsv = JSONLDUtil.updateDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc, !replaceTerms, false);\n+            \n+            DatasetVersion managedVersion;\n+            if (updateDraft) {\n+                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n+                managedVersion = managedDataset.getEditVersion();\n+            } else {\n+                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n+            }\n+            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n+            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n+\n+        } catch (WrappedResponse ex) {\n+            return ex.getResponse();\n+        } catch (JsonParsingException jpe) {\n+            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n+            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n+        }\n+    }\n+    \n+    @PUT\n+    @Path(\"{id}/metadata/delete\")\n+    @Consumes(\"application/json-ld\")\n+    public Response deleteMetadata(String jsonLDBody, @PathParam(\"id\") String id) {\n+        logger.info(\"In delteMetadata\");\n+        try {\n+            Dataset ds = findDatasetOrDie(id);\n+            DataverseRequest req = createDataverseRequest(findUserOrDie());\n+            DatasetVersion dsv = ds.getEditVersion();\n+            boolean updateDraft = ds.getLatestVersion().isDraft();\n+            dsv = JSONLDUtil.deleteDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc);\n+            logger.info(\"Updating ver\");\n+            DatasetVersion managedVersion;\n+            if (updateDraft) {\n+                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n+                managedVersion = managedDataset.getEditVersion();\n+            } else {\n+                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n+            }\n+            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n+            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n+\n+        } catch (WrappedResponse ex) {\n+            ex.printStackTrace();\n+            return ex.getResponse();\n+        } catch (JsonParsingException jpe) {\n+            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n+            jpe.printStackTrace();\n+            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n+        }\n+    }\n     \n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n", "next_change": {"commit": "491fe42c07944db5fc4686a4699ffb1399ca9051", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex c2cb940901..be46a5fab3 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -655,96 +663,6 @@ public class Datasets extends AbstractApiBean {\n             \n         }\n     }\n-  \n-    @GET\n-    @Path(\"{id}/versions/{versionId}/metadata\")\n-    @Produces(\"application/json-ld\")\n-    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @PathParam(\"versionId\") String versionId, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n-        try {\n-            DataverseRequest req = createDataverseRequest(findUserOrDie());\n-            DatasetVersion dsv = getDatasetVersionOrDie(req, versionId, findDatasetOrDie(id), uriInfo, headers);\n-            OREMap ore = new OREMap(dsv,\n-                    settingsService.isTrueForKey(SettingsServiceBean.Key.ExcludeEmailFromExport, false));\n-            return ok(ore.getOREMapBuilder(true));\n-\n-        } catch (WrappedResponse ex) {\n-            ex.printStackTrace();\n-            return ex.getResponse();\n-        } catch (Exception jpe) {\n-            logger.log(Level.SEVERE, \"Error getting jsonld metadata for dsv: \", jpe.getLocalizedMessage());\n-            jpe.printStackTrace();\n-            return error(Response.Status.INTERNAL_SERVER_ERROR, jpe.getLocalizedMessage());\n-        }\n-    }\n-\n-    @GET\n-    @Path(\"{id}/metadata\")\n-    @Produces(\"application/json-ld\")\n-    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n-        return getVersionJsonLDMetadata(id, \":draft\", uriInfo, headers);\n-    }\n-            \n-    @PUT\n-    @Path(\"{id}/metadata\")\n-    @Consumes(\"application/json-ld\")\n-    public Response updateVersionMetadata(String jsonLDBody, @PathParam(\"id\") String id, @DefaultValue(\"false\") @QueryParam(\"replace\") boolean replaceTerms) {\n-\n-        try {\n-            Dataset ds = findDatasetOrDie(id);\n-            DataverseRequest req = createDataverseRequest(findUserOrDie());\n-            DatasetVersion dsv = ds.getEditVersion();\n-            boolean updateDraft = ds.getLatestVersion().isDraft();\n-            dsv = JSONLDUtil.updateDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc, !replaceTerms, false);\n-            \n-            DatasetVersion managedVersion;\n-            if (updateDraft) {\n-                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n-                managedVersion = managedDataset.getEditVersion();\n-            } else {\n-                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n-            }\n-            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n-            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n-\n-        } catch (WrappedResponse ex) {\n-            return ex.getResponse();\n-        } catch (JsonParsingException jpe) {\n-            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n-            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n-        }\n-    }\n-    \n-    @PUT\n-    @Path(\"{id}/metadata/delete\")\n-    @Consumes(\"application/json-ld\")\n-    public Response deleteMetadata(String jsonLDBody, @PathParam(\"id\") String id) {\n-        logger.info(\"In delteMetadata\");\n-        try {\n-            Dataset ds = findDatasetOrDie(id);\n-            DataverseRequest req = createDataverseRequest(findUserOrDie());\n-            DatasetVersion dsv = ds.getEditVersion();\n-            boolean updateDraft = ds.getLatestVersion().isDraft();\n-            dsv = JSONLDUtil.deleteDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc);\n-            logger.info(\"Updating ver\");\n-            DatasetVersion managedVersion;\n-            if (updateDraft) {\n-                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n-                managedVersion = managedDataset.getEditVersion();\n-            } else {\n-                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n-            }\n-            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n-            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n-\n-        } catch (WrappedResponse ex) {\n-            ex.printStackTrace();\n-            return ex.getResponse();\n-        } catch (JsonParsingException jpe) {\n-            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n-            jpe.printStackTrace();\n-            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n-        }\n-    }\n     \n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n", "next_change": {"commit": "4b5ad664ac18165dc032ab7faeee240cf6002aa2", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex be46a5fab3..9457397345 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -663,6 +655,96 @@ public class Datasets extends AbstractApiBean {\n             \n         }\n     }\n+  \n+    @GET\n+    @Path(\"{id}/versions/{versionId}/metadata\")\n+    @Produces(\"application/json-ld\")\n+    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @PathParam(\"versionId\") String versionId, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n+        try {\n+            DataverseRequest req = createDataverseRequest(findUserOrDie());\n+            DatasetVersion dsv = getDatasetVersionOrDie(req, versionId, findDatasetOrDie(id), uriInfo, headers);\n+            OREMap ore = new OREMap(dsv,\n+                    settingsService.isTrueForKey(SettingsServiceBean.Key.ExcludeEmailFromExport, false));\n+            return ok(ore.getOREMapBuilder(true));\n+\n+        } catch (WrappedResponse ex) {\n+            ex.printStackTrace();\n+            return ex.getResponse();\n+        } catch (Exception jpe) {\n+            logger.log(Level.SEVERE, \"Error getting jsonld metadata for dsv: \", jpe.getLocalizedMessage());\n+            jpe.printStackTrace();\n+            return error(Response.Status.INTERNAL_SERVER_ERROR, jpe.getLocalizedMessage());\n+        }\n+    }\n+\n+    @GET\n+    @Path(\"{id}/metadata\")\n+    @Produces(\"application/json-ld\")\n+    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n+        return getVersionJsonLDMetadata(id, \":draft\", uriInfo, headers);\n+    }\n+            \n+    @PUT\n+    @Path(\"{id}/metadata\")\n+    @Consumes(\"application/json-ld\")\n+    public Response updateVersionMetadata(String jsonLDBody, @PathParam(\"id\") String id, @DefaultValue(\"false\") @QueryParam(\"replace\") boolean replaceTerms) {\n+\n+        try {\n+            Dataset ds = findDatasetOrDie(id);\n+            DataverseRequest req = createDataverseRequest(findUserOrDie());\n+            DatasetVersion dsv = ds.getEditVersion();\n+            boolean updateDraft = ds.getLatestVersion().isDraft();\n+            dsv = JSONLDUtil.updateDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc, !replaceTerms, false);\n+            \n+            DatasetVersion managedVersion;\n+            if (updateDraft) {\n+                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n+                managedVersion = managedDataset.getEditVersion();\n+            } else {\n+                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n+            }\n+            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n+            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n+\n+        } catch (WrappedResponse ex) {\n+            return ex.getResponse();\n+        } catch (JsonParsingException jpe) {\n+            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n+            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n+        }\n+    }\n+    \n+    @PUT\n+    @Path(\"{id}/metadata/delete\")\n+    @Consumes(\"application/json-ld\")\n+    public Response deleteMetadata(String jsonLDBody, @PathParam(\"id\") String id) {\n+        logger.info(\"In delteMetadata\");\n+        try {\n+            Dataset ds = findDatasetOrDie(id);\n+            DataverseRequest req = createDataverseRequest(findUserOrDie());\n+            DatasetVersion dsv = ds.getEditVersion();\n+            boolean updateDraft = ds.getLatestVersion().isDraft();\n+            dsv = JSONLDUtil.deleteDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc);\n+            logger.info(\"Updating ver\");\n+            DatasetVersion managedVersion;\n+            if (updateDraft) {\n+                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n+                managedVersion = managedDataset.getEditVersion();\n+            } else {\n+                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n+            }\n+            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n+            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n+\n+        } catch (WrappedResponse ex) {\n+            ex.printStackTrace();\n+            return ex.getResponse();\n+        } catch (JsonParsingException jpe) {\n+            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n+            jpe.printStackTrace();\n+            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n+        }\n+    }\n     \n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n", "next_change": {"commit": "bc5edf0ad09ecf627cb936a5de50e19be4df34ba", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex 9457397345..b328877e14 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -644,108 +653,18 @@ public class Datasets extends AbstractApiBean {\n //            DatasetVersion managedVersion = execCommand( updateDraft\n //                                                             ? new UpdateDatasetVersionCommand(req, incomingVersion)\n //                                                             : new CreateDatasetVersionCommand(req, ds, incomingVersion));\n-            return ok( json(managedVersion) );\n-                    \n+            return ok(json(managedVersion));\n+\n         } catch (JsonParseException ex) {\n             logger.log(Level.SEVERE, \"Semantic error parsing dataset version Json: \" + ex.getMessage(), ex);\n-            return error( Response.Status.BAD_REQUEST, \"Error parsing dataset version: \" + ex.getMessage() );\n-            \n-        } catch (WrappedResponse ex) {\n-            return ex.getResponse();\n-            \n-        }\n-    }\n-  \n-    @GET\n-    @Path(\"{id}/versions/{versionId}/metadata\")\n-    @Produces(\"application/json-ld\")\n-    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @PathParam(\"versionId\") String versionId, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n-        try {\n-            DataverseRequest req = createDataverseRequest(findUserOrDie());\n-            DatasetVersion dsv = getDatasetVersionOrDie(req, versionId, findDatasetOrDie(id), uriInfo, headers);\n-            OREMap ore = new OREMap(dsv,\n-                    settingsService.isTrueForKey(SettingsServiceBean.Key.ExcludeEmailFromExport, false));\n-            return ok(ore.getOREMapBuilder(true));\n+            return error(Response.Status.BAD_REQUEST, \"Error parsing dataset version: \" + ex.getMessage());\n \n         } catch (WrappedResponse ex) {\n-            ex.printStackTrace();\n             return ex.getResponse();\n-        } catch (Exception jpe) {\n-            logger.log(Level.SEVERE, \"Error getting jsonld metadata for dsv: \", jpe.getLocalizedMessage());\n-            jpe.printStackTrace();\n-            return error(Response.Status.INTERNAL_SERVER_ERROR, jpe.getLocalizedMessage());\n-        }\n-    }\n-\n-    @GET\n-    @Path(\"{id}/metadata\")\n-    @Produces(\"application/json-ld\")\n-    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n-        return getVersionJsonLDMetadata(id, \":draft\", uriInfo, headers);\n-    }\n-            \n-    @PUT\n-    @Path(\"{id}/metadata\")\n-    @Consumes(\"application/json-ld\")\n-    public Response updateVersionMetadata(String jsonLDBody, @PathParam(\"id\") String id, @DefaultValue(\"false\") @QueryParam(\"replace\") boolean replaceTerms) {\n-\n-        try {\n-            Dataset ds = findDatasetOrDie(id);\n-            DataverseRequest req = createDataverseRequest(findUserOrDie());\n-            DatasetVersion dsv = ds.getEditVersion();\n-            boolean updateDraft = ds.getLatestVersion().isDraft();\n-            dsv = JSONLDUtil.updateDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc, !replaceTerms, false);\n-            \n-            DatasetVersion managedVersion;\n-            if (updateDraft) {\n-                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n-                managedVersion = managedDataset.getEditVersion();\n-            } else {\n-                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n-            }\n-            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n-            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n \n-        } catch (WrappedResponse ex) {\n-            return ex.getResponse();\n-        } catch (JsonParsingException jpe) {\n-            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n-            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n         }\n     }\n-    \n-    @PUT\n-    @Path(\"{id}/metadata/delete\")\n-    @Consumes(\"application/json-ld\")\n-    public Response deleteMetadata(String jsonLDBody, @PathParam(\"id\") String id) {\n-        logger.info(\"In delteMetadata\");\n-        try {\n-            Dataset ds = findDatasetOrDie(id);\n-            DataverseRequest req = createDataverseRequest(findUserOrDie());\n-            DatasetVersion dsv = ds.getEditVersion();\n-            boolean updateDraft = ds.getLatestVersion().isDraft();\n-            dsv = JSONLDUtil.deleteDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc);\n-            logger.info(\"Updating ver\");\n-            DatasetVersion managedVersion;\n-            if (updateDraft) {\n-                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n-                managedVersion = managedDataset.getEditVersion();\n-            } else {\n-                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n-            }\n-            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n-            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n \n-        } catch (WrappedResponse ex) {\n-            ex.printStackTrace();\n-            return ex.getResponse();\n-        } catch (JsonParsingException jpe) {\n-            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n-            jpe.printStackTrace();\n-            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n-        }\n-    }\n-    \n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n     public Response deleteVersionMetadata(String jsonBody, @PathParam(\"id\") String id) throws WrappedResponse {\n", "next_change": {"commit": "c3b12195db2c5132f11672295e777f411eda4759", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex b328877e14..459de504c1 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -653,18 +644,108 @@ public class Datasets extends AbstractApiBean {\n //            DatasetVersion managedVersion = execCommand( updateDraft\n //                                                             ? new UpdateDatasetVersionCommand(req, incomingVersion)\n //                                                             : new CreateDatasetVersionCommand(req, ds, incomingVersion));\n-            return ok(json(managedVersion));\n-\n+            return ok( json(managedVersion) );\n+                    \n         } catch (JsonParseException ex) {\n             logger.log(Level.SEVERE, \"Semantic error parsing dataset version Json: \" + ex.getMessage(), ex);\n-            return error(Response.Status.BAD_REQUEST, \"Error parsing dataset version: \" + ex.getMessage());\n+            return error( Response.Status.BAD_REQUEST, \"Error parsing dataset version: \" + ex.getMessage() );\n+            \n+        } catch (WrappedResponse ex) {\n+            return ex.getResponse();\n+            \n+        }\n+    }\n+  \n+    @GET\n+    @Path(\"{id}/versions/{versionId}/metadata\")\n+    @Produces(\"application/json-ld\")\n+    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @PathParam(\"versionId\") String versionId, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n+        try {\n+            DataverseRequest req = createDataverseRequest(findUserOrDie());\n+            DatasetVersion dsv = getDatasetVersionOrDie(req, versionId, findDatasetOrDie(id), uriInfo, headers);\n+            OREMap ore = new OREMap(dsv,\n+                    settingsService.isTrueForKey(SettingsServiceBean.Key.ExcludeEmailFromExport, false));\n+            return ok(ore.getOREMapBuilder(true));\n \n         } catch (WrappedResponse ex) {\n+            ex.printStackTrace();\n             return ex.getResponse();\n+        } catch (Exception jpe) {\n+            logger.log(Level.SEVERE, \"Error getting jsonld metadata for dsv: \", jpe.getLocalizedMessage());\n+            jpe.printStackTrace();\n+            return error(Response.Status.INTERNAL_SERVER_ERROR, jpe.getLocalizedMessage());\n+        }\n+    }\n+\n+    @GET\n+    @Path(\"{id}/metadata\")\n+    @Produces(\"application/json-ld\")\n+    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n+        return getVersionJsonLDMetadata(id, \":draft\", uriInfo, headers);\n+    }\n+            \n+    @PUT\n+    @Path(\"{id}/metadata\")\n+    @Consumes(\"application/json-ld\")\n+    public Response updateVersionMetadata(String jsonLDBody, @PathParam(\"id\") String id, @DefaultValue(\"false\") @QueryParam(\"replace\") boolean replaceTerms) {\n+\n+        try {\n+            Dataset ds = findDatasetOrDie(id);\n+            DataverseRequest req = createDataverseRequest(findUserOrDie());\n+            DatasetVersion dsv = ds.getEditVersion();\n+            boolean updateDraft = ds.getLatestVersion().isDraft();\n+            dsv = JSONLDUtil.updateDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc, !replaceTerms, false);\n+            \n+            DatasetVersion managedVersion;\n+            if (updateDraft) {\n+                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n+                managedVersion = managedDataset.getEditVersion();\n+            } else {\n+                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n+            }\n+            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n+            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n \n+        } catch (WrappedResponse ex) {\n+            return ex.getResponse();\n+        } catch (JsonParsingException jpe) {\n+            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n+            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n         }\n     }\n+    \n+    @PUT\n+    @Path(\"{id}/metadata/delete\")\n+    @Consumes(\"application/json-ld\")\n+    public Response deleteMetadata(String jsonLDBody, @PathParam(\"id\") String id) {\n+        logger.info(\"In delteMetadata\");\n+        try {\n+            Dataset ds = findDatasetOrDie(id);\n+            DataverseRequest req = createDataverseRequest(findUserOrDie());\n+            DatasetVersion dsv = ds.getEditVersion();\n+            boolean updateDraft = ds.getLatestVersion().isDraft();\n+            dsv = JSONLDUtil.deleteDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc);\n+            logger.info(\"Updating ver\");\n+            DatasetVersion managedVersion;\n+            if (updateDraft) {\n+                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n+                managedVersion = managedDataset.getEditVersion();\n+            } else {\n+                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n+            }\n+            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n+            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n \n+        } catch (WrappedResponse ex) {\n+            ex.printStackTrace();\n+            return ex.getResponse();\n+        } catch (JsonParsingException jpe) {\n+            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n+            jpe.printStackTrace();\n+            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n+        }\n+    }\n+    \n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n     public Response deleteVersionMetadata(String jsonBody, @PathParam(\"id\") String id) throws WrappedResponse {\n", "next_change": {"commit": "e68003191dbd06e8f34b9d52d559bee1ee081a30", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex 459de504c1..a63a86a258 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -644,108 +653,18 @@ public class Datasets extends AbstractApiBean {\n //            DatasetVersion managedVersion = execCommand( updateDraft\n //                                                             ? new UpdateDatasetVersionCommand(req, incomingVersion)\n //                                                             : new CreateDatasetVersionCommand(req, ds, incomingVersion));\n-            return ok( json(managedVersion) );\n-                    \n+            return ok(json(managedVersion));\n+\n         } catch (JsonParseException ex) {\n             logger.log(Level.SEVERE, \"Semantic error parsing dataset version Json: \" + ex.getMessage(), ex);\n-            return error( Response.Status.BAD_REQUEST, \"Error parsing dataset version: \" + ex.getMessage() );\n-            \n-        } catch (WrappedResponse ex) {\n-            return ex.getResponse();\n-            \n-        }\n-    }\n-  \n-    @GET\n-    @Path(\"{id}/versions/{versionId}/metadata\")\n-    @Produces(\"application/json-ld\")\n-    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @PathParam(\"versionId\") String versionId, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n-        try {\n-            DataverseRequest req = createDataverseRequest(findUserOrDie());\n-            DatasetVersion dsv = getDatasetVersionOrDie(req, versionId, findDatasetOrDie(id), uriInfo, headers);\n-            OREMap ore = new OREMap(dsv,\n-                    settingsService.isTrueForKey(SettingsServiceBean.Key.ExcludeEmailFromExport, false));\n-            return ok(ore.getOREMapBuilder(true));\n+            return error(Response.Status.BAD_REQUEST, \"Error parsing dataset version: \" + ex.getMessage());\n \n         } catch (WrappedResponse ex) {\n-            ex.printStackTrace();\n             return ex.getResponse();\n-        } catch (Exception jpe) {\n-            logger.log(Level.SEVERE, \"Error getting jsonld metadata for dsv: \", jpe.getLocalizedMessage());\n-            jpe.printStackTrace();\n-            return error(Response.Status.INTERNAL_SERVER_ERROR, jpe.getLocalizedMessage());\n-        }\n-    }\n-\n-    @GET\n-    @Path(\"{id}/metadata\")\n-    @Produces(\"application/json-ld\")\n-    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n-        return getVersionJsonLDMetadata(id, \":draft\", uriInfo, headers);\n-    }\n-            \n-    @PUT\n-    @Path(\"{id}/metadata\")\n-    @Consumes(\"application/json-ld\")\n-    public Response updateVersionMetadata(String jsonLDBody, @PathParam(\"id\") String id, @DefaultValue(\"false\") @QueryParam(\"replace\") boolean replaceTerms) {\n-\n-        try {\n-            Dataset ds = findDatasetOrDie(id);\n-            DataverseRequest req = createDataverseRequest(findUserOrDie());\n-            DatasetVersion dsv = ds.getEditVersion();\n-            boolean updateDraft = ds.getLatestVersion().isDraft();\n-            dsv = JSONLDUtil.updateDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc, !replaceTerms, false);\n-            \n-            DatasetVersion managedVersion;\n-            if (updateDraft) {\n-                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n-                managedVersion = managedDataset.getEditVersion();\n-            } else {\n-                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n-            }\n-            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n-            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n \n-        } catch (WrappedResponse ex) {\n-            return ex.getResponse();\n-        } catch (JsonParsingException jpe) {\n-            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n-            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n         }\n     }\n-    \n-    @PUT\n-    @Path(\"{id}/metadata/delete\")\n-    @Consumes(\"application/json-ld\")\n-    public Response deleteMetadata(String jsonLDBody, @PathParam(\"id\") String id) {\n-        logger.info(\"In delteMetadata\");\n-        try {\n-            Dataset ds = findDatasetOrDie(id);\n-            DataverseRequest req = createDataverseRequest(findUserOrDie());\n-            DatasetVersion dsv = ds.getEditVersion();\n-            boolean updateDraft = ds.getLatestVersion().isDraft();\n-            dsv = JSONLDUtil.deleteDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc);\n-            logger.info(\"Updating ver\");\n-            DatasetVersion managedVersion;\n-            if (updateDraft) {\n-                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n-                managedVersion = managedDataset.getEditVersion();\n-            } else {\n-                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n-            }\n-            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n-            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n \n-        } catch (WrappedResponse ex) {\n-            ex.printStackTrace();\n-            return ex.getResponse();\n-        } catch (JsonParsingException jpe) {\n-            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n-            jpe.printStackTrace();\n-            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n-        }\n-    }\n-    \n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n     public Response deleteVersionMetadata(String jsonBody, @PathParam(\"id\") String id) throws WrappedResponse {\n", "next_change": {"commit": "58a2317d9fb696999fc7439bbcea18d05bc2728e", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex a63a86a258..a6ae292dc5 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -653,18 +647,108 @@ public class Datasets extends AbstractApiBean {\n //            DatasetVersion managedVersion = execCommand( updateDraft\n //                                                             ? new UpdateDatasetVersionCommand(req, incomingVersion)\n //                                                             : new CreateDatasetVersionCommand(req, ds, incomingVersion));\n-            return ok(json(managedVersion));\n-\n+            return ok( json(managedVersion) );\n+                    \n         } catch (JsonParseException ex) {\n             logger.log(Level.SEVERE, \"Semantic error parsing dataset version Json: \" + ex.getMessage(), ex);\n-            return error(Response.Status.BAD_REQUEST, \"Error parsing dataset version: \" + ex.getMessage());\n+            return error( Response.Status.BAD_REQUEST, \"Error parsing dataset version: \" + ex.getMessage() );\n+            \n+        } catch (WrappedResponse ex) {\n+            return ex.getResponse();\n+            \n+        }\n+    }\n+  \n+    @GET\n+    @Path(\"{id}/versions/{versionId}/metadata\")\n+    @Produces(\"application/json-ld\")\n+    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @PathParam(\"versionId\") String versionId, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n+        try {\n+            DataverseRequest req = createDataverseRequest(findUserOrDie());\n+            DatasetVersion dsv = getDatasetVersionOrDie(req, versionId, findDatasetOrDie(id), uriInfo, headers);\n+            OREMap ore = new OREMap(dsv,\n+                    settingsService.isTrueForKey(SettingsServiceBean.Key.ExcludeEmailFromExport, false));\n+            return ok(ore.getOREMapBuilder(true));\n \n         } catch (WrappedResponse ex) {\n+            ex.printStackTrace();\n             return ex.getResponse();\n+        } catch (Exception jpe) {\n+            logger.log(Level.SEVERE, \"Error getting jsonld metadata for dsv: \", jpe.getLocalizedMessage());\n+            jpe.printStackTrace();\n+            return error(Response.Status.INTERNAL_SERVER_ERROR, jpe.getLocalizedMessage());\n+        }\n+    }\n+\n+    @GET\n+    @Path(\"{id}/metadata\")\n+    @Produces(\"application/json-ld\")\n+    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n+        return getVersionJsonLDMetadata(id, \":draft\", uriInfo, headers);\n+    }\n+            \n+    @PUT\n+    @Path(\"{id}/metadata\")\n+    @Consumes(\"application/json-ld\")\n+    public Response updateVersionMetadata(String jsonLDBody, @PathParam(\"id\") String id, @DefaultValue(\"false\") @QueryParam(\"replace\") boolean replaceTerms) {\n+\n+        try {\n+            Dataset ds = findDatasetOrDie(id);\n+            DataverseRequest req = createDataverseRequest(findUserOrDie());\n+            DatasetVersion dsv = ds.getEditVersion();\n+            boolean updateDraft = ds.getLatestVersion().isDraft();\n+            dsv = JSONLDUtil.updateDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc, !replaceTerms, false);\n+            \n+            DatasetVersion managedVersion;\n+            if (updateDraft) {\n+                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n+                managedVersion = managedDataset.getEditVersion();\n+            } else {\n+                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n+            }\n+            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n+            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n \n+        } catch (WrappedResponse ex) {\n+            return ex.getResponse();\n+        } catch (JsonParsingException jpe) {\n+            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n+            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n         }\n     }\n+    \n+    @PUT\n+    @Path(\"{id}/metadata/delete\")\n+    @Consumes(\"application/json-ld\")\n+    public Response deleteMetadata(String jsonLDBody, @PathParam(\"id\") String id) {\n+        logger.info(\"In delteMetadata\");\n+        try {\n+            Dataset ds = findDatasetOrDie(id);\n+            DataverseRequest req = createDataverseRequest(findUserOrDie());\n+            DatasetVersion dsv = ds.getEditVersion();\n+            boolean updateDraft = ds.getLatestVersion().isDraft();\n+            dsv = JSONLDUtil.deleteDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc);\n+            logger.info(\"Updating ver\");\n+            DatasetVersion managedVersion;\n+            if (updateDraft) {\n+                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n+                managedVersion = managedDataset.getEditVersion();\n+            } else {\n+                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n+            }\n+            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n+            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n \n+        } catch (WrappedResponse ex) {\n+            ex.printStackTrace();\n+            return ex.getResponse();\n+        } catch (JsonParsingException jpe) {\n+            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n+            jpe.printStackTrace();\n+            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n+        }\n+    }\n+    \n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n     public Response deleteVersionMetadata(String jsonBody, @PathParam(\"id\") String id) throws WrappedResponse {\n", "next_change": {"commit": "e72c4e50fca0ceb2332d6057c4c05808b1d215dc", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex a6ae292dc5..6183032124 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -658,96 +648,6 @@ public class Datasets extends AbstractApiBean {\n             \n         }\n     }\n-  \n-    @GET\n-    @Path(\"{id}/versions/{versionId}/metadata\")\n-    @Produces(\"application/json-ld\")\n-    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @PathParam(\"versionId\") String versionId, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n-        try {\n-            DataverseRequest req = createDataverseRequest(findUserOrDie());\n-            DatasetVersion dsv = getDatasetVersionOrDie(req, versionId, findDatasetOrDie(id), uriInfo, headers);\n-            OREMap ore = new OREMap(dsv,\n-                    settingsService.isTrueForKey(SettingsServiceBean.Key.ExcludeEmailFromExport, false));\n-            return ok(ore.getOREMapBuilder(true));\n-\n-        } catch (WrappedResponse ex) {\n-            ex.printStackTrace();\n-            return ex.getResponse();\n-        } catch (Exception jpe) {\n-            logger.log(Level.SEVERE, \"Error getting jsonld metadata for dsv: \", jpe.getLocalizedMessage());\n-            jpe.printStackTrace();\n-            return error(Response.Status.INTERNAL_SERVER_ERROR, jpe.getLocalizedMessage());\n-        }\n-    }\n-\n-    @GET\n-    @Path(\"{id}/metadata\")\n-    @Produces(\"application/json-ld\")\n-    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n-        return getVersionJsonLDMetadata(id, \":draft\", uriInfo, headers);\n-    }\n-            \n-    @PUT\n-    @Path(\"{id}/metadata\")\n-    @Consumes(\"application/json-ld\")\n-    public Response updateVersionMetadata(String jsonLDBody, @PathParam(\"id\") String id, @DefaultValue(\"false\") @QueryParam(\"replace\") boolean replaceTerms) {\n-\n-        try {\n-            Dataset ds = findDatasetOrDie(id);\n-            DataverseRequest req = createDataverseRequest(findUserOrDie());\n-            DatasetVersion dsv = ds.getEditVersion();\n-            boolean updateDraft = ds.getLatestVersion().isDraft();\n-            dsv = JSONLDUtil.updateDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc, !replaceTerms, false);\n-            \n-            DatasetVersion managedVersion;\n-            if (updateDraft) {\n-                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n-                managedVersion = managedDataset.getEditVersion();\n-            } else {\n-                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n-            }\n-            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n-            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n-\n-        } catch (WrappedResponse ex) {\n-            return ex.getResponse();\n-        } catch (JsonParsingException jpe) {\n-            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n-            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n-        }\n-    }\n-    \n-    @PUT\n-    @Path(\"{id}/metadata/delete\")\n-    @Consumes(\"application/json-ld\")\n-    public Response deleteMetadata(String jsonLDBody, @PathParam(\"id\") String id) {\n-        logger.info(\"In delteMetadata\");\n-        try {\n-            Dataset ds = findDatasetOrDie(id);\n-            DataverseRequest req = createDataverseRequest(findUserOrDie());\n-            DatasetVersion dsv = ds.getEditVersion();\n-            boolean updateDraft = ds.getLatestVersion().isDraft();\n-            dsv = JSONLDUtil.deleteDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc);\n-            logger.info(\"Updating ver\");\n-            DatasetVersion managedVersion;\n-            if (updateDraft) {\n-                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n-                managedVersion = managedDataset.getEditVersion();\n-            } else {\n-                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n-            }\n-            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n-            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n-\n-        } catch (WrappedResponse ex) {\n-            ex.printStackTrace();\n-            return ex.getResponse();\n-        } catch (JsonParsingException jpe) {\n-            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n-            jpe.printStackTrace();\n-            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n-        }\n-    }\n     \n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n", "next_change": {"commit": "12e2e6eb1de0e2223c895b1a7fbfb6b29b3d5f14", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex 6183032124..ca6425fc73 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -637,18 +644,18 @@ public class Datasets extends AbstractApiBean {\n //            DatasetVersion managedVersion = execCommand( updateDraft\n //                                                             ? new UpdateDatasetVersionCommand(req, incomingVersion)\n //                                                             : new CreateDatasetVersionCommand(req, ds, incomingVersion));\n-            return ok( json(managedVersion) );\n-                    \n+            return ok(json(managedVersion));\n+\n         } catch (JsonParseException ex) {\n             logger.log(Level.SEVERE, \"Semantic error parsing dataset version Json: \" + ex.getMessage(), ex);\n-            return error( Response.Status.BAD_REQUEST, \"Error parsing dataset version: \" + ex.getMessage() );\n-            \n+            return error(Response.Status.BAD_REQUEST, \"Error parsing dataset version: \" + ex.getMessage());\n+\n         } catch (WrappedResponse ex) {\n             return ex.getResponse();\n-            \n+\n         }\n     }\n-    \n+\n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n     public Response deleteVersionMetadata(String jsonBody, @PathParam(\"id\") String id) throws WrappedResponse {\n", "next_change": {"commit": "878ef6fff6a27510b39cffb058b26afca31301c3", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex ca6425fc73..1586576697 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -644,18 +637,18 @@ public class Datasets extends AbstractApiBean {\n //            DatasetVersion managedVersion = execCommand( updateDraft\n //                                                             ? new UpdateDatasetVersionCommand(req, incomingVersion)\n //                                                             : new CreateDatasetVersionCommand(req, ds, incomingVersion));\n-            return ok(json(managedVersion));\n-\n+            return ok( json(managedVersion) );\n+                    \n         } catch (JsonParseException ex) {\n             logger.log(Level.SEVERE, \"Semantic error parsing dataset version Json: \" + ex.getMessage(), ex);\n-            return error(Response.Status.BAD_REQUEST, \"Error parsing dataset version: \" + ex.getMessage());\n-\n+            return error( Response.Status.BAD_REQUEST, \"Error parsing dataset version: \" + ex.getMessage() );\n+            \n         } catch (WrappedResponse ex) {\n             return ex.getResponse();\n-\n+            \n         }\n     }\n-\n+    \n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n     public Response deleteVersionMetadata(String jsonBody, @PathParam(\"id\") String id) throws WrappedResponse {\n", "next_change": {"commit": "fb2b52cf66f7cb51b5b0cee0cd298657fdd0638d", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex 1586576697..51728242d3 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -648,6 +653,96 @@ public class Datasets extends AbstractApiBean {\n             \n         }\n     }\n+  \n+    @GET\n+    @Path(\"{id}/versions/{versionId}/metadata\")\n+    @Produces(\"application/json-ld\")\n+    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @PathParam(\"versionId\") String versionId, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n+        try {\n+            DataverseRequest req = createDataverseRequest(findUserOrDie());\n+            DatasetVersion dsv = getDatasetVersionOrDie(req, versionId, findDatasetOrDie(id), uriInfo, headers);\n+            OREMap ore = new OREMap(dsv,\n+                    settingsService.isTrueForKey(SettingsServiceBean.Key.ExcludeEmailFromExport, false));\n+            return ok(ore.getOREMapBuilder(true));\n+\n+        } catch (WrappedResponse ex) {\n+            ex.printStackTrace();\n+            return ex.getResponse();\n+        } catch (Exception jpe) {\n+            logger.log(Level.SEVERE, \"Error getting jsonld metadata for dsv: \", jpe.getLocalizedMessage());\n+            jpe.printStackTrace();\n+            return error(Response.Status.INTERNAL_SERVER_ERROR, jpe.getLocalizedMessage());\n+        }\n+    }\n+\n+    @GET\n+    @Path(\"{id}/metadata\")\n+    @Produces(\"application/json-ld\")\n+    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n+        return getVersionJsonLDMetadata(id, \":draft\", uriInfo, headers);\n+    }\n+            \n+    @PUT\n+    @Path(\"{id}/metadata\")\n+    @Consumes(\"application/json-ld\")\n+    public Response updateVersionMetadata(String jsonLDBody, @PathParam(\"id\") String id, @DefaultValue(\"false\") @QueryParam(\"replace\") boolean replaceTerms) {\n+\n+        try {\n+            Dataset ds = findDatasetOrDie(id);\n+            DataverseRequest req = createDataverseRequest(findUserOrDie());\n+            DatasetVersion dsv = ds.getEditVersion();\n+            boolean updateDraft = ds.getLatestVersion().isDraft();\n+            dsv = JSONLDUtil.updateDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc, !replaceTerms, false);\n+            \n+            DatasetVersion managedVersion;\n+            if (updateDraft) {\n+                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n+                managedVersion = managedDataset.getEditVersion();\n+            } else {\n+                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n+            }\n+            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n+            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n+\n+        } catch (WrappedResponse ex) {\n+            return ex.getResponse();\n+        } catch (JsonParsingException jpe) {\n+            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n+            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n+        }\n+    }\n+    \n+    @PUT\n+    @Path(\"{id}/metadata/delete\")\n+    @Consumes(\"application/json-ld\")\n+    public Response deleteMetadata(String jsonLDBody, @PathParam(\"id\") String id) {\n+        logger.info(\"In delteMetadata\");\n+        try {\n+            Dataset ds = findDatasetOrDie(id);\n+            DataverseRequest req = createDataverseRequest(findUserOrDie());\n+            DatasetVersion dsv = ds.getEditVersion();\n+            boolean updateDraft = ds.getLatestVersion().isDraft();\n+            dsv = JSONLDUtil.deleteDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc);\n+            logger.info(\"Updating ver\");\n+            DatasetVersion managedVersion;\n+            if (updateDraft) {\n+                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n+                managedVersion = managedDataset.getEditVersion();\n+            } else {\n+                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n+            }\n+            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n+            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n+\n+        } catch (WrappedResponse ex) {\n+            ex.printStackTrace();\n+            return ex.getResponse();\n+        } catch (JsonParsingException jpe) {\n+            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n+            jpe.printStackTrace();\n+            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n+        }\n+    }\n     \n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n", "next_change": {"commit": "ad48ad711049f99d17b3494fab3d923016bfc799", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex 51728242d3..f56674cb35 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -642,108 +644,18 @@ public class Datasets extends AbstractApiBean {\n //            DatasetVersion managedVersion = execCommand( updateDraft\n //                                                             ? new UpdateDatasetVersionCommand(req, incomingVersion)\n //                                                             : new CreateDatasetVersionCommand(req, ds, incomingVersion));\n-            return ok( json(managedVersion) );\n-                    \n+            return ok(json(managedVersion));\n+\n         } catch (JsonParseException ex) {\n             logger.log(Level.SEVERE, \"Semantic error parsing dataset version Json: \" + ex.getMessage(), ex);\n-            return error( Response.Status.BAD_REQUEST, \"Error parsing dataset version: \" + ex.getMessage() );\n-            \n-        } catch (WrappedResponse ex) {\n-            return ex.getResponse();\n-            \n-        }\n-    }\n-  \n-    @GET\n-    @Path(\"{id}/versions/{versionId}/metadata\")\n-    @Produces(\"application/json-ld\")\n-    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @PathParam(\"versionId\") String versionId, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n-        try {\n-            DataverseRequest req = createDataverseRequest(findUserOrDie());\n-            DatasetVersion dsv = getDatasetVersionOrDie(req, versionId, findDatasetOrDie(id), uriInfo, headers);\n-            OREMap ore = new OREMap(dsv,\n-                    settingsService.isTrueForKey(SettingsServiceBean.Key.ExcludeEmailFromExport, false));\n-            return ok(ore.getOREMapBuilder(true));\n+            return error(Response.Status.BAD_REQUEST, \"Error parsing dataset version: \" + ex.getMessage());\n \n         } catch (WrappedResponse ex) {\n-            ex.printStackTrace();\n             return ex.getResponse();\n-        } catch (Exception jpe) {\n-            logger.log(Level.SEVERE, \"Error getting jsonld metadata for dsv: \", jpe.getLocalizedMessage());\n-            jpe.printStackTrace();\n-            return error(Response.Status.INTERNAL_SERVER_ERROR, jpe.getLocalizedMessage());\n-        }\n-    }\n-\n-    @GET\n-    @Path(\"{id}/metadata\")\n-    @Produces(\"application/json-ld\")\n-    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n-        return getVersionJsonLDMetadata(id, \":draft\", uriInfo, headers);\n-    }\n-            \n-    @PUT\n-    @Path(\"{id}/metadata\")\n-    @Consumes(\"application/json-ld\")\n-    public Response updateVersionMetadata(String jsonLDBody, @PathParam(\"id\") String id, @DefaultValue(\"false\") @QueryParam(\"replace\") boolean replaceTerms) {\n-\n-        try {\n-            Dataset ds = findDatasetOrDie(id);\n-            DataverseRequest req = createDataverseRequest(findUserOrDie());\n-            DatasetVersion dsv = ds.getEditVersion();\n-            boolean updateDraft = ds.getLatestVersion().isDraft();\n-            dsv = JSONLDUtil.updateDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc, !replaceTerms, false);\n-            \n-            DatasetVersion managedVersion;\n-            if (updateDraft) {\n-                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n-                managedVersion = managedDataset.getEditVersion();\n-            } else {\n-                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n-            }\n-            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n-            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n \n-        } catch (WrappedResponse ex) {\n-            return ex.getResponse();\n-        } catch (JsonParsingException jpe) {\n-            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n-            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n         }\n     }\n-    \n-    @PUT\n-    @Path(\"{id}/metadata/delete\")\n-    @Consumes(\"application/json-ld\")\n-    public Response deleteMetadata(String jsonLDBody, @PathParam(\"id\") String id) {\n-        logger.info(\"In delteMetadata\");\n-        try {\n-            Dataset ds = findDatasetOrDie(id);\n-            DataverseRequest req = createDataverseRequest(findUserOrDie());\n-            DatasetVersion dsv = ds.getEditVersion();\n-            boolean updateDraft = ds.getLatestVersion().isDraft();\n-            dsv = JSONLDUtil.deleteDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc);\n-            logger.info(\"Updating ver\");\n-            DatasetVersion managedVersion;\n-            if (updateDraft) {\n-                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n-                managedVersion = managedDataset.getEditVersion();\n-            } else {\n-                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n-            }\n-            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n-            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n \n-        } catch (WrappedResponse ex) {\n-            ex.printStackTrace();\n-            return ex.getResponse();\n-        } catch (JsonParsingException jpe) {\n-            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n-            jpe.printStackTrace();\n-            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n-        }\n-    }\n-    \n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n     public Response deleteVersionMetadata(String jsonBody, @PathParam(\"id\") String id) throws WrappedResponse {\n", "next_change": {"commit": "faa944efd1a0644085555d5eae18bfad1a823e4d", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex f56674cb35..daad72b2df 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -644,18 +651,108 @@ public class Datasets extends AbstractApiBean {\n //            DatasetVersion managedVersion = execCommand( updateDraft\n //                                                             ? new UpdateDatasetVersionCommand(req, incomingVersion)\n //                                                             : new CreateDatasetVersionCommand(req, ds, incomingVersion));\n-            return ok(json(managedVersion));\n-\n+            return ok( json(managedVersion) );\n+                    \n         } catch (JsonParseException ex) {\n             logger.log(Level.SEVERE, \"Semantic error parsing dataset version Json: \" + ex.getMessage(), ex);\n-            return error(Response.Status.BAD_REQUEST, \"Error parsing dataset version: \" + ex.getMessage());\n+            return error( Response.Status.BAD_REQUEST, \"Error parsing dataset version: \" + ex.getMessage() );\n+            \n+        } catch (WrappedResponse ex) {\n+            return ex.getResponse();\n+            \n+        }\n+    }\n+  \n+    @GET\n+    @Path(\"{id}/versions/{versionId}/metadata\")\n+    @Produces(\"application/json-ld\")\n+    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @PathParam(\"versionId\") String versionId, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n+        try {\n+            DataverseRequest req = createDataverseRequest(findUserOrDie());\n+            DatasetVersion dsv = getDatasetVersionOrDie(req, versionId, findDatasetOrDie(id), uriInfo, headers);\n+            OREMap ore = new OREMap(dsv,\n+                    settingsService.isTrueForKey(SettingsServiceBean.Key.ExcludeEmailFromExport, false));\n+            return ok(ore.getOREMapBuilder(true));\n \n         } catch (WrappedResponse ex) {\n+            ex.printStackTrace();\n             return ex.getResponse();\n+        } catch (Exception jpe) {\n+            logger.log(Level.SEVERE, \"Error getting jsonld metadata for dsv: \", jpe.getLocalizedMessage());\n+            jpe.printStackTrace();\n+            return error(Response.Status.INTERNAL_SERVER_ERROR, jpe.getLocalizedMessage());\n+        }\n+    }\n+\n+    @GET\n+    @Path(\"{id}/metadata\")\n+    @Produces(\"application/json-ld\")\n+    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n+        return getVersionJsonLDMetadata(id, \":draft\", uriInfo, headers);\n+    }\n+            \n+    @PUT\n+    @Path(\"{id}/metadata\")\n+    @Consumes(\"application/json-ld\")\n+    public Response updateVersionMetadata(String jsonLDBody, @PathParam(\"id\") String id, @DefaultValue(\"false\") @QueryParam(\"replace\") boolean replaceTerms) {\n+\n+        try {\n+            Dataset ds = findDatasetOrDie(id);\n+            DataverseRequest req = createDataverseRequest(findUserOrDie());\n+            DatasetVersion dsv = ds.getEditVersion();\n+            boolean updateDraft = ds.getLatestVersion().isDraft();\n+            dsv = JSONLDUtil.updateDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc, !replaceTerms, false);\n+            \n+            DatasetVersion managedVersion;\n+            if (updateDraft) {\n+                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n+                managedVersion = managedDataset.getEditVersion();\n+            } else {\n+                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n+            }\n+            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n+            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n \n+        } catch (WrappedResponse ex) {\n+            return ex.getResponse();\n+        } catch (JsonParsingException jpe) {\n+            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n+            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n         }\n     }\n+    \n+    @PUT\n+    @Path(\"{id}/metadata/delete\")\n+    @Consumes(\"application/json-ld\")\n+    public Response deleteMetadata(String jsonLDBody, @PathParam(\"id\") String id) {\n+        logger.info(\"In delteMetadata\");\n+        try {\n+            Dataset ds = findDatasetOrDie(id);\n+            DataverseRequest req = createDataverseRequest(findUserOrDie());\n+            DatasetVersion dsv = ds.getEditVersion();\n+            boolean updateDraft = ds.getLatestVersion().isDraft();\n+            dsv = JSONLDUtil.deleteDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc);\n+            logger.info(\"Updating ver\");\n+            DatasetVersion managedVersion;\n+            if (updateDraft) {\n+                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n+                managedVersion = managedDataset.getEditVersion();\n+            } else {\n+                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n+            }\n+            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n+            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n \n+        } catch (WrappedResponse ex) {\n+            ex.printStackTrace();\n+            return ex.getResponse();\n+        } catch (JsonParsingException jpe) {\n+            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n+            jpe.printStackTrace();\n+            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n+        }\n+    }\n+    \n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n     public Response deleteVersionMetadata(String jsonBody, @PathParam(\"id\") String id) throws WrappedResponse {\n", "next_change": {"commit": "6fa5e904755345a8f3ae8ccea00f47d83265c726", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex daad72b2df..e0e6dd2fcb 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -662,96 +649,6 @@ public class Datasets extends AbstractApiBean {\n             \n         }\n     }\n-  \n-    @GET\n-    @Path(\"{id}/versions/{versionId}/metadata\")\n-    @Produces(\"application/json-ld\")\n-    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @PathParam(\"versionId\") String versionId, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n-        try {\n-            DataverseRequest req = createDataverseRequest(findUserOrDie());\n-            DatasetVersion dsv = getDatasetVersionOrDie(req, versionId, findDatasetOrDie(id), uriInfo, headers);\n-            OREMap ore = new OREMap(dsv,\n-                    settingsService.isTrueForKey(SettingsServiceBean.Key.ExcludeEmailFromExport, false));\n-            return ok(ore.getOREMapBuilder(true));\n-\n-        } catch (WrappedResponse ex) {\n-            ex.printStackTrace();\n-            return ex.getResponse();\n-        } catch (Exception jpe) {\n-            logger.log(Level.SEVERE, \"Error getting jsonld metadata for dsv: \", jpe.getLocalizedMessage());\n-            jpe.printStackTrace();\n-            return error(Response.Status.INTERNAL_SERVER_ERROR, jpe.getLocalizedMessage());\n-        }\n-    }\n-\n-    @GET\n-    @Path(\"{id}/metadata\")\n-    @Produces(\"application/json-ld\")\n-    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n-        return getVersionJsonLDMetadata(id, \":draft\", uriInfo, headers);\n-    }\n-            \n-    @PUT\n-    @Path(\"{id}/metadata\")\n-    @Consumes(\"application/json-ld\")\n-    public Response updateVersionMetadata(String jsonLDBody, @PathParam(\"id\") String id, @DefaultValue(\"false\") @QueryParam(\"replace\") boolean replaceTerms) {\n-\n-        try {\n-            Dataset ds = findDatasetOrDie(id);\n-            DataverseRequest req = createDataverseRequest(findUserOrDie());\n-            DatasetVersion dsv = ds.getEditVersion();\n-            boolean updateDraft = ds.getLatestVersion().isDraft();\n-            dsv = JSONLDUtil.updateDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc, !replaceTerms, false);\n-            \n-            DatasetVersion managedVersion;\n-            if (updateDraft) {\n-                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n-                managedVersion = managedDataset.getEditVersion();\n-            } else {\n-                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n-            }\n-            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n-            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n-\n-        } catch (WrappedResponse ex) {\n-            return ex.getResponse();\n-        } catch (JsonParsingException jpe) {\n-            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n-            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n-        }\n-    }\n-    \n-    @PUT\n-    @Path(\"{id}/metadata/delete\")\n-    @Consumes(\"application/json-ld\")\n-    public Response deleteMetadata(String jsonLDBody, @PathParam(\"id\") String id) {\n-        logger.info(\"In delteMetadata\");\n-        try {\n-            Dataset ds = findDatasetOrDie(id);\n-            DataverseRequest req = createDataverseRequest(findUserOrDie());\n-            DatasetVersion dsv = ds.getEditVersion();\n-            boolean updateDraft = ds.getLatestVersion().isDraft();\n-            dsv = JSONLDUtil.deleteDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc);\n-            logger.info(\"Updating ver\");\n-            DatasetVersion managedVersion;\n-            if (updateDraft) {\n-                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n-                managedVersion = managedDataset.getEditVersion();\n-            } else {\n-                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n-            }\n-            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n-            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n-\n-        } catch (WrappedResponse ex) {\n-            ex.printStackTrace();\n-            return ex.getResponse();\n-        } catch (JsonParsingException jpe) {\n-            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n-            jpe.printStackTrace();\n-            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n-        }\n-    }\n     \n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n", "next_change": {"commit": "f702a6188c89567592f593f96e9c7277bc0955fd", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex e0e6dd2fcb..8d56742b9f 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -649,6 +663,96 @@ public class Datasets extends AbstractApiBean {\n             \n         }\n     }\n+  \n+    @GET\n+    @Path(\"{id}/versions/{versionId}/metadata\")\n+    @Produces(\"application/json-ld\")\n+    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @PathParam(\"versionId\") String versionId, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n+        try {\n+            DataverseRequest req = createDataverseRequest(findUserOrDie());\n+            DatasetVersion dsv = getDatasetVersionOrDie(req, versionId, findDatasetOrDie(id), uriInfo, headers);\n+            OREMap ore = new OREMap(dsv,\n+                    settingsService.isTrueForKey(SettingsServiceBean.Key.ExcludeEmailFromExport, false));\n+            return ok(ore.getOREMapBuilder(true));\n+\n+        } catch (WrappedResponse ex) {\n+            ex.printStackTrace();\n+            return ex.getResponse();\n+        } catch (Exception jpe) {\n+            logger.log(Level.SEVERE, \"Error getting jsonld metadata for dsv: \", jpe.getLocalizedMessage());\n+            jpe.printStackTrace();\n+            return error(Response.Status.INTERNAL_SERVER_ERROR, jpe.getLocalizedMessage());\n+        }\n+    }\n+\n+    @GET\n+    @Path(\"{id}/metadata\")\n+    @Produces(\"application/json-ld\")\n+    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n+        return getVersionJsonLDMetadata(id, \":draft\", uriInfo, headers);\n+    }\n+            \n+    @PUT\n+    @Path(\"{id}/metadata\")\n+    @Consumes(\"application/json-ld\")\n+    public Response updateVersionMetadata(String jsonLDBody, @PathParam(\"id\") String id, @DefaultValue(\"false\") @QueryParam(\"replace\") boolean replaceTerms) {\n+\n+        try {\n+            Dataset ds = findDatasetOrDie(id);\n+            DataverseRequest req = createDataverseRequest(findUserOrDie());\n+            DatasetVersion dsv = ds.getEditVersion();\n+            boolean updateDraft = ds.getLatestVersion().isDraft();\n+            dsv = JSONLDUtil.updateDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc, !replaceTerms, false);\n+            \n+            DatasetVersion managedVersion;\n+            if (updateDraft) {\n+                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n+                managedVersion = managedDataset.getEditVersion();\n+            } else {\n+                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n+            }\n+            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n+            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n+\n+        } catch (WrappedResponse ex) {\n+            return ex.getResponse();\n+        } catch (JsonParsingException jpe) {\n+            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n+            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n+        }\n+    }\n+    \n+    @PUT\n+    @Path(\"{id}/metadata/delete\")\n+    @Consumes(\"application/json-ld\")\n+    public Response deleteMetadata(String jsonLDBody, @PathParam(\"id\") String id) {\n+        logger.info(\"In delteMetadata\");\n+        try {\n+            Dataset ds = findDatasetOrDie(id);\n+            DataverseRequest req = createDataverseRequest(findUserOrDie());\n+            DatasetVersion dsv = ds.getEditVersion();\n+            boolean updateDraft = ds.getLatestVersion().isDraft();\n+            dsv = JSONLDUtil.deleteDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc);\n+            logger.info(\"Updating ver\");\n+            DatasetVersion managedVersion;\n+            if (updateDraft) {\n+                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n+                managedVersion = managedDataset.getEditVersion();\n+            } else {\n+                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n+            }\n+            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n+            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n+\n+        } catch (WrappedResponse ex) {\n+            ex.printStackTrace();\n+            return ex.getResponse();\n+        } catch (JsonParsingException jpe) {\n+            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n+            jpe.printStackTrace();\n+            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n+        }\n+    }\n     \n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n", "next_change": {"commit": "4fa484bfe8cc99a5330cd4291a6b86feeca333ca", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex 8d56742b9f..eacc00a456 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -663,96 +649,6 @@ public class Datasets extends AbstractApiBean {\n             \n         }\n     }\n-  \n-    @GET\n-    @Path(\"{id}/versions/{versionId}/metadata\")\n-    @Produces(\"application/json-ld\")\n-    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @PathParam(\"versionId\") String versionId, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n-        try {\n-            DataverseRequest req = createDataverseRequest(findUserOrDie());\n-            DatasetVersion dsv = getDatasetVersionOrDie(req, versionId, findDatasetOrDie(id), uriInfo, headers);\n-            OREMap ore = new OREMap(dsv,\n-                    settingsService.isTrueForKey(SettingsServiceBean.Key.ExcludeEmailFromExport, false));\n-            return ok(ore.getOREMapBuilder(true));\n-\n-        } catch (WrappedResponse ex) {\n-            ex.printStackTrace();\n-            return ex.getResponse();\n-        } catch (Exception jpe) {\n-            logger.log(Level.SEVERE, \"Error getting jsonld metadata for dsv: \", jpe.getLocalizedMessage());\n-            jpe.printStackTrace();\n-            return error(Response.Status.INTERNAL_SERVER_ERROR, jpe.getLocalizedMessage());\n-        }\n-    }\n-\n-    @GET\n-    @Path(\"{id}/metadata\")\n-    @Produces(\"application/json-ld\")\n-    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n-        return getVersionJsonLDMetadata(id, \":draft\", uriInfo, headers);\n-    }\n-            \n-    @PUT\n-    @Path(\"{id}/metadata\")\n-    @Consumes(\"application/json-ld\")\n-    public Response updateVersionMetadata(String jsonLDBody, @PathParam(\"id\") String id, @DefaultValue(\"false\") @QueryParam(\"replace\") boolean replaceTerms) {\n-\n-        try {\n-            Dataset ds = findDatasetOrDie(id);\n-            DataverseRequest req = createDataverseRequest(findUserOrDie());\n-            DatasetVersion dsv = ds.getEditVersion();\n-            boolean updateDraft = ds.getLatestVersion().isDraft();\n-            dsv = JSONLDUtil.updateDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc, !replaceTerms, false);\n-            \n-            DatasetVersion managedVersion;\n-            if (updateDraft) {\n-                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n-                managedVersion = managedDataset.getEditVersion();\n-            } else {\n-                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n-            }\n-            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n-            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n-\n-        } catch (WrappedResponse ex) {\n-            return ex.getResponse();\n-        } catch (JsonParsingException jpe) {\n-            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n-            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n-        }\n-    }\n-    \n-    @PUT\n-    @Path(\"{id}/metadata/delete\")\n-    @Consumes(\"application/json-ld\")\n-    public Response deleteMetadata(String jsonLDBody, @PathParam(\"id\") String id) {\n-        logger.info(\"In delteMetadata\");\n-        try {\n-            Dataset ds = findDatasetOrDie(id);\n-            DataverseRequest req = createDataverseRequest(findUserOrDie());\n-            DatasetVersion dsv = ds.getEditVersion();\n-            boolean updateDraft = ds.getLatestVersion().isDraft();\n-            dsv = JSONLDUtil.deleteDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc);\n-            logger.info(\"Updating ver\");\n-            DatasetVersion managedVersion;\n-            if (updateDraft) {\n-                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n-                managedVersion = managedDataset.getEditVersion();\n-            } else {\n-                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n-            }\n-            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n-            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n-\n-        } catch (WrappedResponse ex) {\n-            ex.printStackTrace();\n-            return ex.getResponse();\n-        } catch (JsonParsingException jpe) {\n-            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n-            jpe.printStackTrace();\n-            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n-        }\n-    }\n     \n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n", "next_change": {"commit": "60f474dec0f631735b9705cb5c0d7a714d5f57de", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex eacc00a456..3ecd785257 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -649,6 +663,96 @@ public class Datasets extends AbstractApiBean {\n             \n         }\n     }\n+  \n+    @GET\n+    @Path(\"{id}/versions/{versionId}/metadata\")\n+    @Produces(\"application/json-ld\")\n+    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @PathParam(\"versionId\") String versionId, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n+        try {\n+            DataverseRequest req = createDataverseRequest(findUserOrDie());\n+            DatasetVersion dsv = getDatasetVersionOrDie(req, versionId, findDatasetOrDie(id), uriInfo, headers);\n+            OREMap ore = new OREMap(dsv,\n+                    settingsService.isTrueForKey(SettingsServiceBean.Key.ExcludeEmailFromExport, false));\n+            return ok(ore.getOREMapBuilder(true));\n+\n+        } catch (WrappedResponse ex) {\n+            ex.printStackTrace();\n+            return ex.getResponse();\n+        } catch (Exception jpe) {\n+            logger.log(Level.SEVERE, \"Error getting jsonld metadata for dsv: \", jpe.getLocalizedMessage());\n+            jpe.printStackTrace();\n+            return error(Response.Status.INTERNAL_SERVER_ERROR, jpe.getLocalizedMessage());\n+        }\n+    }\n+\n+    @GET\n+    @Path(\"{id}/metadata\")\n+    @Produces(\"application/json-ld\")\n+    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n+        return getVersionJsonLDMetadata(id, \":draft\", uriInfo, headers);\n+    }\n+            \n+    @PUT\n+    @Path(\"{id}/metadata\")\n+    @Consumes(\"application/json-ld\")\n+    public Response updateVersionMetadata(String jsonLDBody, @PathParam(\"id\") String id, @DefaultValue(\"false\") @QueryParam(\"replace\") boolean replaceTerms) {\n+\n+        try {\n+            Dataset ds = findDatasetOrDie(id);\n+            DataverseRequest req = createDataverseRequest(findUserOrDie());\n+            DatasetVersion dsv = ds.getEditVersion();\n+            boolean updateDraft = ds.getLatestVersion().isDraft();\n+            dsv = JSONLDUtil.updateDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc, !replaceTerms, false);\n+            \n+            DatasetVersion managedVersion;\n+            if (updateDraft) {\n+                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n+                managedVersion = managedDataset.getEditVersion();\n+            } else {\n+                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n+            }\n+            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n+            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n+\n+        } catch (WrappedResponse ex) {\n+            return ex.getResponse();\n+        } catch (JsonParsingException jpe) {\n+            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n+            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n+        }\n+    }\n+    \n+    @PUT\n+    @Path(\"{id}/metadata/delete\")\n+    @Consumes(\"application/json-ld\")\n+    public Response deleteMetadata(String jsonLDBody, @PathParam(\"id\") String id) {\n+        logger.info(\"In delteMetadata\");\n+        try {\n+            Dataset ds = findDatasetOrDie(id);\n+            DataverseRequest req = createDataverseRequest(findUserOrDie());\n+            DatasetVersion dsv = ds.getEditVersion();\n+            boolean updateDraft = ds.getLatestVersion().isDraft();\n+            dsv = JSONLDUtil.deleteDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc);\n+            logger.info(\"Updating ver\");\n+            DatasetVersion managedVersion;\n+            if (updateDraft) {\n+                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n+                managedVersion = managedDataset.getEditVersion();\n+            } else {\n+                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n+            }\n+            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n+            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n+\n+        } catch (WrappedResponse ex) {\n+            ex.printStackTrace();\n+            return ex.getResponse();\n+        } catch (JsonParsingException jpe) {\n+            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n+            jpe.printStackTrace();\n+            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n+        }\n+    }\n     \n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n", "next_change": {"commit": "b12f881bb7408eb4eefb0f432ad30d6ca3638160", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex 3ecd785257..226b409207 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -663,96 +649,6 @@ public class Datasets extends AbstractApiBean {\n             \n         }\n     }\n-  \n-    @GET\n-    @Path(\"{id}/versions/{versionId}/metadata\")\n-    @Produces(\"application/json-ld\")\n-    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @PathParam(\"versionId\") String versionId, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n-        try {\n-            DataverseRequest req = createDataverseRequest(findUserOrDie());\n-            DatasetVersion dsv = getDatasetVersionOrDie(req, versionId, findDatasetOrDie(id), uriInfo, headers);\n-            OREMap ore = new OREMap(dsv,\n-                    settingsService.isTrueForKey(SettingsServiceBean.Key.ExcludeEmailFromExport, false));\n-            return ok(ore.getOREMapBuilder(true));\n-\n-        } catch (WrappedResponse ex) {\n-            ex.printStackTrace();\n-            return ex.getResponse();\n-        } catch (Exception jpe) {\n-            logger.log(Level.SEVERE, \"Error getting jsonld metadata for dsv: \", jpe.getLocalizedMessage());\n-            jpe.printStackTrace();\n-            return error(Response.Status.INTERNAL_SERVER_ERROR, jpe.getLocalizedMessage());\n-        }\n-    }\n-\n-    @GET\n-    @Path(\"{id}/metadata\")\n-    @Produces(\"application/json-ld\")\n-    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n-        return getVersionJsonLDMetadata(id, \":draft\", uriInfo, headers);\n-    }\n-            \n-    @PUT\n-    @Path(\"{id}/metadata\")\n-    @Consumes(\"application/json-ld\")\n-    public Response updateVersionMetadata(String jsonLDBody, @PathParam(\"id\") String id, @DefaultValue(\"false\") @QueryParam(\"replace\") boolean replaceTerms) {\n-\n-        try {\n-            Dataset ds = findDatasetOrDie(id);\n-            DataverseRequest req = createDataverseRequest(findUserOrDie());\n-            DatasetVersion dsv = ds.getEditVersion();\n-            boolean updateDraft = ds.getLatestVersion().isDraft();\n-            dsv = JSONLDUtil.updateDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc, !replaceTerms, false);\n-            \n-            DatasetVersion managedVersion;\n-            if (updateDraft) {\n-                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n-                managedVersion = managedDataset.getEditVersion();\n-            } else {\n-                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n-            }\n-            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n-            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n-\n-        } catch (WrappedResponse ex) {\n-            return ex.getResponse();\n-        } catch (JsonParsingException jpe) {\n-            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n-            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n-        }\n-    }\n-    \n-    @PUT\n-    @Path(\"{id}/metadata/delete\")\n-    @Consumes(\"application/json-ld\")\n-    public Response deleteMetadata(String jsonLDBody, @PathParam(\"id\") String id) {\n-        logger.info(\"In delteMetadata\");\n-        try {\n-            Dataset ds = findDatasetOrDie(id);\n-            DataverseRequest req = createDataverseRequest(findUserOrDie());\n-            DatasetVersion dsv = ds.getEditVersion();\n-            boolean updateDraft = ds.getLatestVersion().isDraft();\n-            dsv = JSONLDUtil.deleteDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc);\n-            logger.info(\"Updating ver\");\n-            DatasetVersion managedVersion;\n-            if (updateDraft) {\n-                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n-                managedVersion = managedDataset.getEditVersion();\n-            } else {\n-                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n-            }\n-            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n-            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n-\n-        } catch (WrappedResponse ex) {\n-            ex.printStackTrace();\n-            return ex.getResponse();\n-        } catch (JsonParsingException jpe) {\n-            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n-            jpe.printStackTrace();\n-            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n-        }\n-    }\n     \n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n", "next_change": {"commit": "ff2419b9d62095405ddc5f67e40f37fcd7b19a4c", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex 226b409207..0a86d8b67f 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -649,6 +663,94 @@ public class Datasets extends AbstractApiBean {\n             \n         }\n     }\n+  \n+    @GET\n+    @Path(\"{id}/versions/{versionId}/metadata\")\n+    @Produces(\"application/ld+json, application/json-ld\")\n+    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @PathParam(\"versionId\") String versionId, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n+        try {\n+            DataverseRequest req = createDataverseRequest(findUserOrDie());\n+            DatasetVersion dsv = getDatasetVersionOrDie(req, versionId, findDatasetOrDie(id), uriInfo, headers);\n+            OREMap ore = new OREMap(dsv,\n+                    settingsService.isTrueForKey(SettingsServiceBean.Key.ExcludeEmailFromExport, false));\n+            return ok(ore.getOREMapBuilder(true));\n+\n+        } catch (WrappedResponse ex) {\n+            ex.printStackTrace();\n+            return ex.getResponse();\n+        } catch (Exception jpe) {\n+            logger.log(Level.SEVERE, \"Error getting jsonld metadata for dsv: \", jpe.getLocalizedMessage());\n+            jpe.printStackTrace();\n+            return error(Response.Status.INTERNAL_SERVER_ERROR, jpe.getLocalizedMessage());\n+        }\n+    }\n+\n+    @GET\n+    @Path(\"{id}/metadata\")\n+    @Produces(\"application/ld+json, application/json-ld\")\n+    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n+        return getVersionJsonLDMetadata(id, \":draft\", uriInfo, headers);\n+    }\n+            \n+    @PUT\n+    @Path(\"{id}/metadata\")\n+    @Consumes(\"application/ld+json, application/json-ld\")\n+    public Response updateVersionMetadata(String jsonLDBody, @PathParam(\"id\") String id, @DefaultValue(\"false\") @QueryParam(\"replace\") boolean replaceTerms) {\n+\n+        try {\n+            Dataset ds = findDatasetOrDie(id);\n+            DataverseRequest req = createDataverseRequest(findUserOrDie());\n+            DatasetVersion dsv = ds.getEditVersion();\n+            boolean updateDraft = ds.getLatestVersion().isDraft();\n+            dsv = JSONLDUtil.updateDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc, !replaceTerms, false);\n+            \n+            DatasetVersion managedVersion;\n+            if (updateDraft) {\n+                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n+                managedVersion = managedDataset.getEditVersion();\n+            } else {\n+                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n+            }\n+            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n+            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n+\n+        } catch (WrappedResponse ex) {\n+            return ex.getResponse();\n+        } catch (JsonParsingException jpe) {\n+            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n+            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n+        }\n+    }\n+    \n+    @PUT\n+    @Path(\"{id}/metadata/delete\")\n+    @Consumes(\"application/ld+json, application/json-ld\")\n+    public Response deleteMetadata(String jsonLDBody, @PathParam(\"id\") String id) {\n+        try {\n+            Dataset ds = findDatasetOrDie(id);\n+            DataverseRequest req = createDataverseRequest(findUserOrDie());\n+            DatasetVersion dsv = ds.getEditVersion();\n+            boolean updateDraft = ds.getLatestVersion().isDraft();\n+            dsv = JSONLDUtil.deleteDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc);\n+            DatasetVersion managedVersion;\n+            if (updateDraft) {\n+                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n+                managedVersion = managedDataset.getEditVersion();\n+            } else {\n+                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n+            }\n+            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n+            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n+\n+        } catch (WrappedResponse ex) {\n+            ex.printStackTrace();\n+            return ex.getResponse();\n+        } catch (JsonParsingException jpe) {\n+            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n+            jpe.printStackTrace();\n+            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n+        }\n+    }\n     \n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n", "next_change": {"commit": "2c494d85b5f2906cfbd5a3727a9a358635b47815", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex 0a86d8b67f..4a1c96ea8e 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -663,94 +617,6 @@ public class Datasets extends AbstractApiBean {\n             \n         }\n     }\n-  \n-    @GET\n-    @Path(\"{id}/versions/{versionId}/metadata\")\n-    @Produces(\"application/ld+json, application/json-ld\")\n-    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @PathParam(\"versionId\") String versionId, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n-        try {\n-            DataverseRequest req = createDataverseRequest(findUserOrDie());\n-            DatasetVersion dsv = getDatasetVersionOrDie(req, versionId, findDatasetOrDie(id), uriInfo, headers);\n-            OREMap ore = new OREMap(dsv,\n-                    settingsService.isTrueForKey(SettingsServiceBean.Key.ExcludeEmailFromExport, false));\n-            return ok(ore.getOREMapBuilder(true));\n-\n-        } catch (WrappedResponse ex) {\n-            ex.printStackTrace();\n-            return ex.getResponse();\n-        } catch (Exception jpe) {\n-            logger.log(Level.SEVERE, \"Error getting jsonld metadata for dsv: \", jpe.getLocalizedMessage());\n-            jpe.printStackTrace();\n-            return error(Response.Status.INTERNAL_SERVER_ERROR, jpe.getLocalizedMessage());\n-        }\n-    }\n-\n-    @GET\n-    @Path(\"{id}/metadata\")\n-    @Produces(\"application/ld+json, application/json-ld\")\n-    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n-        return getVersionJsonLDMetadata(id, \":draft\", uriInfo, headers);\n-    }\n-            \n-    @PUT\n-    @Path(\"{id}/metadata\")\n-    @Consumes(\"application/ld+json, application/json-ld\")\n-    public Response updateVersionMetadata(String jsonLDBody, @PathParam(\"id\") String id, @DefaultValue(\"false\") @QueryParam(\"replace\") boolean replaceTerms) {\n-\n-        try {\n-            Dataset ds = findDatasetOrDie(id);\n-            DataverseRequest req = createDataverseRequest(findUserOrDie());\n-            DatasetVersion dsv = ds.getEditVersion();\n-            boolean updateDraft = ds.getLatestVersion().isDraft();\n-            dsv = JSONLDUtil.updateDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc, !replaceTerms, false);\n-            \n-            DatasetVersion managedVersion;\n-            if (updateDraft) {\n-                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n-                managedVersion = managedDataset.getEditVersion();\n-            } else {\n-                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n-            }\n-            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n-            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n-\n-        } catch (WrappedResponse ex) {\n-            return ex.getResponse();\n-        } catch (JsonParsingException jpe) {\n-            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n-            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n-        }\n-    }\n-    \n-    @PUT\n-    @Path(\"{id}/metadata/delete\")\n-    @Consumes(\"application/ld+json, application/json-ld\")\n-    public Response deleteMetadata(String jsonLDBody, @PathParam(\"id\") String id) {\n-        try {\n-            Dataset ds = findDatasetOrDie(id);\n-            DataverseRequest req = createDataverseRequest(findUserOrDie());\n-            DatasetVersion dsv = ds.getEditVersion();\n-            boolean updateDraft = ds.getLatestVersion().isDraft();\n-            dsv = JSONLDUtil.deleteDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc);\n-            DatasetVersion managedVersion;\n-            if (updateDraft) {\n-                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n-                managedVersion = managedDataset.getEditVersion();\n-            } else {\n-                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n-            }\n-            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n-            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n-\n-        } catch (WrappedResponse ex) {\n-            ex.printStackTrace();\n-            return ex.getResponse();\n-        } catch (JsonParsingException jpe) {\n-            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n-            jpe.printStackTrace();\n-            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n-        }\n-    }\n     \n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n", "next_change": {"commit": "e1c1bfe58e64ea0ed54cbb03ad89bab209314aef", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex 4a1c96ea8e..549647df69 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -617,6 +664,94 @@ public class Datasets extends AbstractApiBean {\n             \n         }\n     }\n+  \n+    @GET\n+    @Path(\"{id}/versions/{versionId}/metadata\")\n+    @Produces(\"application/ld+json, application/json-ld\")\n+    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @PathParam(\"versionId\") String versionId, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n+        try {\n+            DataverseRequest req = createDataverseRequest(findUserOrDie());\n+            DatasetVersion dsv = getDatasetVersionOrDie(req, versionId, findDatasetOrDie(id), uriInfo, headers);\n+            OREMap ore = new OREMap(dsv,\n+                    settingsService.isTrueForKey(SettingsServiceBean.Key.ExcludeEmailFromExport, false));\n+            return ok(ore.getOREMapBuilder(true));\n+\n+        } catch (WrappedResponse ex) {\n+            ex.printStackTrace();\n+            return ex.getResponse();\n+        } catch (Exception jpe) {\n+            logger.log(Level.SEVERE, \"Error getting jsonld metadata for dsv: \", jpe.getLocalizedMessage());\n+            jpe.printStackTrace();\n+            return error(Response.Status.INTERNAL_SERVER_ERROR, jpe.getLocalizedMessage());\n+        }\n+    }\n+\n+    @GET\n+    @Path(\"{id}/metadata\")\n+    @Produces(\"application/ld+json, application/json-ld\")\n+    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n+        return getVersionJsonLDMetadata(id, \":draft\", uriInfo, headers);\n+    }\n+            \n+    @PUT\n+    @Path(\"{id}/metadata\")\n+    @Consumes(\"application/ld+json, application/json-ld\")\n+    public Response updateVersionMetadata(String jsonLDBody, @PathParam(\"id\") String id, @DefaultValue(\"false\") @QueryParam(\"replace\") boolean replaceTerms) {\n+\n+        try {\n+            Dataset ds = findDatasetOrDie(id);\n+            DataverseRequest req = createDataverseRequest(findUserOrDie());\n+            DatasetVersion dsv = ds.getEditVersion();\n+            boolean updateDraft = ds.getLatestVersion().isDraft();\n+            dsv = JSONLDUtil.updateDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc, !replaceTerms, false);\n+            \n+            DatasetVersion managedVersion;\n+            if (updateDraft) {\n+                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n+                managedVersion = managedDataset.getEditVersion();\n+            } else {\n+                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n+            }\n+            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n+            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n+\n+        } catch (WrappedResponse ex) {\n+            return ex.getResponse();\n+        } catch (JsonParsingException jpe) {\n+            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n+            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n+        }\n+    }\n+    \n+    @PUT\n+    @Path(\"{id}/metadata/delete\")\n+    @Consumes(\"application/ld+json, application/json-ld\")\n+    public Response deleteMetadata(String jsonLDBody, @PathParam(\"id\") String id) {\n+        try {\n+            Dataset ds = findDatasetOrDie(id);\n+            DataverseRequest req = createDataverseRequest(findUserOrDie());\n+            DatasetVersion dsv = ds.getEditVersion();\n+            boolean updateDraft = ds.getLatestVersion().isDraft();\n+            dsv = JSONLDUtil.deleteDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc);\n+            DatasetVersion managedVersion;\n+            if (updateDraft) {\n+                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n+                managedVersion = managedDataset.getEditVersion();\n+            } else {\n+                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n+            }\n+            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n+            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n+\n+        } catch (WrappedResponse ex) {\n+            ex.printStackTrace();\n+            return ex.getResponse();\n+        } catch (JsonParsingException jpe) {\n+            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n+            jpe.printStackTrace();\n+            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n+        }\n+    }\n     \n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n", "next_change": {"commit": "5fab3f112342b354adf7f9b5648e979b45bbcf0e", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex 549647df69..c1359e1c36 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -664,94 +651,6 @@ public class Datasets extends AbstractApiBean {\n             \n         }\n     }\n-  \n-    @GET\n-    @Path(\"{id}/versions/{versionId}/metadata\")\n-    @Produces(\"application/ld+json, application/json-ld\")\n-    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @PathParam(\"versionId\") String versionId, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n-        try {\n-            DataverseRequest req = createDataverseRequest(findUserOrDie());\n-            DatasetVersion dsv = getDatasetVersionOrDie(req, versionId, findDatasetOrDie(id), uriInfo, headers);\n-            OREMap ore = new OREMap(dsv,\n-                    settingsService.isTrueForKey(SettingsServiceBean.Key.ExcludeEmailFromExport, false));\n-            return ok(ore.getOREMapBuilder(true));\n-\n-        } catch (WrappedResponse ex) {\n-            ex.printStackTrace();\n-            return ex.getResponse();\n-        } catch (Exception jpe) {\n-            logger.log(Level.SEVERE, \"Error getting jsonld metadata for dsv: \", jpe.getLocalizedMessage());\n-            jpe.printStackTrace();\n-            return error(Response.Status.INTERNAL_SERVER_ERROR, jpe.getLocalizedMessage());\n-        }\n-    }\n-\n-    @GET\n-    @Path(\"{id}/metadata\")\n-    @Produces(\"application/ld+json, application/json-ld\")\n-    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n-        return getVersionJsonLDMetadata(id, \":draft\", uriInfo, headers);\n-    }\n-            \n-    @PUT\n-    @Path(\"{id}/metadata\")\n-    @Consumes(\"application/ld+json, application/json-ld\")\n-    public Response updateVersionMetadata(String jsonLDBody, @PathParam(\"id\") String id, @DefaultValue(\"false\") @QueryParam(\"replace\") boolean replaceTerms) {\n-\n-        try {\n-            Dataset ds = findDatasetOrDie(id);\n-            DataverseRequest req = createDataverseRequest(findUserOrDie());\n-            DatasetVersion dsv = ds.getEditVersion();\n-            boolean updateDraft = ds.getLatestVersion().isDraft();\n-            dsv = JSONLDUtil.updateDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc, !replaceTerms, false);\n-            \n-            DatasetVersion managedVersion;\n-            if (updateDraft) {\n-                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n-                managedVersion = managedDataset.getEditVersion();\n-            } else {\n-                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n-            }\n-            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n-            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n-\n-        } catch (WrappedResponse ex) {\n-            return ex.getResponse();\n-        } catch (JsonParsingException jpe) {\n-            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n-            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n-        }\n-    }\n-    \n-    @PUT\n-    @Path(\"{id}/metadata/delete\")\n-    @Consumes(\"application/ld+json, application/json-ld\")\n-    public Response deleteMetadata(String jsonLDBody, @PathParam(\"id\") String id) {\n-        try {\n-            Dataset ds = findDatasetOrDie(id);\n-            DataverseRequest req = createDataverseRequest(findUserOrDie());\n-            DatasetVersion dsv = ds.getEditVersion();\n-            boolean updateDraft = ds.getLatestVersion().isDraft();\n-            dsv = JSONLDUtil.deleteDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc);\n-            DatasetVersion managedVersion;\n-            if (updateDraft) {\n-                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n-                managedVersion = managedDataset.getEditVersion();\n-            } else {\n-                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n-            }\n-            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n-            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n-\n-        } catch (WrappedResponse ex) {\n-            ex.printStackTrace();\n-            return ex.getResponse();\n-        } catch (JsonParsingException jpe) {\n-            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n-            jpe.printStackTrace();\n-            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n-        }\n-    }\n     \n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n", "next_change": {"commit": "1d54c68fe4b515e56fee490a302cd8464d278d2d", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex c1359e1c36..645b3cc835 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -651,6 +651,94 @@ public class Datasets extends AbstractApiBean {\n             \n         }\n     }\n+  \n+    @GET\n+    @Path(\"{id}/versions/{versionId}/metadata\")\n+    @Produces(\"application/ld+json, application/json-ld\")\n+    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @PathParam(\"versionId\") String versionId, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n+        try {\n+            DataverseRequest req = createDataverseRequest(findUserOrDie());\n+            DatasetVersion dsv = getDatasetVersionOrDie(req, versionId, findDatasetOrDie(id), uriInfo, headers);\n+            OREMap ore = new OREMap(dsv,\n+                    settingsService.isTrueForKey(SettingsServiceBean.Key.ExcludeEmailFromExport, false));\n+            return ok(ore.getOREMapBuilder(true));\n+\n+        } catch (WrappedResponse ex) {\n+            ex.printStackTrace();\n+            return ex.getResponse();\n+        } catch (Exception jpe) {\n+            logger.log(Level.SEVERE, \"Error getting jsonld metadata for dsv: \", jpe.getLocalizedMessage());\n+            jpe.printStackTrace();\n+            return error(Response.Status.INTERNAL_SERVER_ERROR, jpe.getLocalizedMessage());\n+        }\n+    }\n+\n+    @GET\n+    @Path(\"{id}/metadata\")\n+    @Produces(\"application/ld+json, application/json-ld\")\n+    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n+        return getVersionJsonLDMetadata(id, \":draft\", uriInfo, headers);\n+    }\n+            \n+    @PUT\n+    @Path(\"{id}/metadata\")\n+    @Consumes(\"application/ld+json, application/json-ld\")\n+    public Response updateVersionMetadata(String jsonLDBody, @PathParam(\"id\") String id, @DefaultValue(\"false\") @QueryParam(\"replace\") boolean replaceTerms) {\n+\n+        try {\n+            Dataset ds = findDatasetOrDie(id);\n+            DataverseRequest req = createDataverseRequest(findUserOrDie());\n+            DatasetVersion dsv = ds.getEditVersion();\n+            boolean updateDraft = ds.getLatestVersion().isDraft();\n+            dsv = JSONLDUtil.updateDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc, !replaceTerms, false);\n+            \n+            DatasetVersion managedVersion;\n+            if (updateDraft) {\n+                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n+                managedVersion = managedDataset.getEditVersion();\n+            } else {\n+                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n+            }\n+            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n+            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n+\n+        } catch (WrappedResponse ex) {\n+            return ex.getResponse();\n+        } catch (JsonParsingException jpe) {\n+            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n+            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n+        }\n+    }\n+    \n+    @PUT\n+    @Path(\"{id}/metadata/delete\")\n+    @Consumes(\"application/ld+json, application/json-ld\")\n+    public Response deleteMetadata(String jsonLDBody, @PathParam(\"id\") String id) {\n+        try {\n+            Dataset ds = findDatasetOrDie(id);\n+            DataverseRequest req = createDataverseRequest(findUserOrDie());\n+            DatasetVersion dsv = ds.getEditVersion();\n+            boolean updateDraft = ds.getLatestVersion().isDraft();\n+            dsv = JSONLDUtil.deleteDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc);\n+            DatasetVersion managedVersion;\n+            if (updateDraft) {\n+                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n+                managedVersion = managedDataset.getEditVersion();\n+            } else {\n+                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n+            }\n+            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n+            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n+\n+        } catch (WrappedResponse ex) {\n+            ex.printStackTrace();\n+            return ex.getResponse();\n+        } catch (JsonParsingException jpe) {\n+            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n+            jpe.printStackTrace();\n+            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n+        }\n+    }\n     \n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n", "next_change": {"commit": "5ca182e2830cda4ba8428907994bb1fbab37191f", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex 645b3cc835..126cb3e4df 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -651,94 +619,6 @@ public class Datasets extends AbstractApiBean {\n             \n         }\n     }\n-  \n-    @GET\n-    @Path(\"{id}/versions/{versionId}/metadata\")\n-    @Produces(\"application/ld+json, application/json-ld\")\n-    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @PathParam(\"versionId\") String versionId, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n-        try {\n-            DataverseRequest req = createDataverseRequest(findUserOrDie());\n-            DatasetVersion dsv = getDatasetVersionOrDie(req, versionId, findDatasetOrDie(id), uriInfo, headers);\n-            OREMap ore = new OREMap(dsv,\n-                    settingsService.isTrueForKey(SettingsServiceBean.Key.ExcludeEmailFromExport, false));\n-            return ok(ore.getOREMapBuilder(true));\n-\n-        } catch (WrappedResponse ex) {\n-            ex.printStackTrace();\n-            return ex.getResponse();\n-        } catch (Exception jpe) {\n-            logger.log(Level.SEVERE, \"Error getting jsonld metadata for dsv: \", jpe.getLocalizedMessage());\n-            jpe.printStackTrace();\n-            return error(Response.Status.INTERNAL_SERVER_ERROR, jpe.getLocalizedMessage());\n-        }\n-    }\n-\n-    @GET\n-    @Path(\"{id}/metadata\")\n-    @Produces(\"application/ld+json, application/json-ld\")\n-    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n-        return getVersionJsonLDMetadata(id, \":draft\", uriInfo, headers);\n-    }\n-            \n-    @PUT\n-    @Path(\"{id}/metadata\")\n-    @Consumes(\"application/ld+json, application/json-ld\")\n-    public Response updateVersionMetadata(String jsonLDBody, @PathParam(\"id\") String id, @DefaultValue(\"false\") @QueryParam(\"replace\") boolean replaceTerms) {\n-\n-        try {\n-            Dataset ds = findDatasetOrDie(id);\n-            DataverseRequest req = createDataverseRequest(findUserOrDie());\n-            DatasetVersion dsv = ds.getEditVersion();\n-            boolean updateDraft = ds.getLatestVersion().isDraft();\n-            dsv = JSONLDUtil.updateDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc, !replaceTerms, false);\n-            \n-            DatasetVersion managedVersion;\n-            if (updateDraft) {\n-                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n-                managedVersion = managedDataset.getEditVersion();\n-            } else {\n-                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n-            }\n-            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n-            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n-\n-        } catch (WrappedResponse ex) {\n-            return ex.getResponse();\n-        } catch (JsonParsingException jpe) {\n-            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n-            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n-        }\n-    }\n-    \n-    @PUT\n-    @Path(\"{id}/metadata/delete\")\n-    @Consumes(\"application/ld+json, application/json-ld\")\n-    public Response deleteMetadata(String jsonLDBody, @PathParam(\"id\") String id) {\n-        try {\n-            Dataset ds = findDatasetOrDie(id);\n-            DataverseRequest req = createDataverseRequest(findUserOrDie());\n-            DatasetVersion dsv = ds.getEditVersion();\n-            boolean updateDraft = ds.getLatestVersion().isDraft();\n-            dsv = JSONLDUtil.deleteDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc);\n-            DatasetVersion managedVersion;\n-            if (updateDraft) {\n-                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n-                managedVersion = managedDataset.getEditVersion();\n-            } else {\n-                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n-            }\n-            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n-            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n-\n-        } catch (WrappedResponse ex) {\n-            ex.printStackTrace();\n-            return ex.getResponse();\n-        } catch (JsonParsingException jpe) {\n-            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n-            jpe.printStackTrace();\n-            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n-        }\n-    }\n     \n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n", "next_change": {"commit": "a1f9f3ebe80dd6a20b60d1d19bb9acbd0a84713b", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex 126cb3e4df..b63b115a08 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -619,6 +620,94 @@ public class Datasets extends AbstractApiBean {\n             \n         }\n     }\n+  \n+    @GET\n+    @Path(\"{id}/versions/{versionId}/metadata\")\n+    @Produces(\"application/ld+json, application/json-ld\")\n+    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @PathParam(\"versionId\") String versionId, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n+        try {\n+            DataverseRequest req = createDataverseRequest(findUserOrDie());\n+            DatasetVersion dsv = getDatasetVersionOrDie(req, versionId, findDatasetOrDie(id), uriInfo, headers);\n+            OREMap ore = new OREMap(dsv,\n+                    settingsService.isTrueForKey(SettingsServiceBean.Key.ExcludeEmailFromExport, false));\n+            return ok(ore.getOREMapBuilder(true));\n+\n+        } catch (WrappedResponse ex) {\n+            ex.printStackTrace();\n+            return ex.getResponse();\n+        } catch (Exception jpe) {\n+            logger.log(Level.SEVERE, \"Error getting jsonld metadata for dsv: \", jpe.getLocalizedMessage());\n+            jpe.printStackTrace();\n+            return error(Response.Status.INTERNAL_SERVER_ERROR, jpe.getLocalizedMessage());\n+        }\n+    }\n+\n+    @GET\n+    @Path(\"{id}/metadata\")\n+    @Produces(\"application/ld+json, application/json-ld\")\n+    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n+        return getVersionJsonLDMetadata(id, \":draft\", uriInfo, headers);\n+    }\n+            \n+    @PUT\n+    @Path(\"{id}/metadata\")\n+    @Consumes(\"application/ld+json, application/json-ld\")\n+    public Response updateVersionMetadata(String jsonLDBody, @PathParam(\"id\") String id, @DefaultValue(\"false\") @QueryParam(\"replace\") boolean replaceTerms) {\n+\n+        try {\n+            Dataset ds = findDatasetOrDie(id);\n+            DataverseRequest req = createDataverseRequest(findUserOrDie());\n+            DatasetVersion dsv = ds.getEditVersion();\n+            boolean updateDraft = ds.getLatestVersion().isDraft();\n+            dsv = JSONLDUtil.updateDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc, !replaceTerms, false);\n+            \n+            DatasetVersion managedVersion;\n+            if (updateDraft) {\n+                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n+                managedVersion = managedDataset.getEditVersion();\n+            } else {\n+                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n+            }\n+            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n+            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n+\n+        } catch (WrappedResponse ex) {\n+            return ex.getResponse();\n+        } catch (JsonParsingException jpe) {\n+            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n+            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n+        }\n+    }\n+    \n+    @PUT\n+    @Path(\"{id}/metadata/delete\")\n+    @Consumes(\"application/ld+json, application/json-ld\")\n+    public Response deleteMetadata(String jsonLDBody, @PathParam(\"id\") String id) {\n+        try {\n+            Dataset ds = findDatasetOrDie(id);\n+            DataverseRequest req = createDataverseRequest(findUserOrDie());\n+            DatasetVersion dsv = ds.getEditVersion();\n+            boolean updateDraft = ds.getLatestVersion().isDraft();\n+            dsv = JSONLDUtil.deleteDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc);\n+            DatasetVersion managedVersion;\n+            if (updateDraft) {\n+                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n+                managedVersion = managedDataset.getEditVersion();\n+            } else {\n+                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n+            }\n+            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n+            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n+\n+        } catch (WrappedResponse ex) {\n+            ex.printStackTrace();\n+            return ex.getResponse();\n+        } catch (JsonParsingException jpe) {\n+            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n+            jpe.printStackTrace();\n+            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n+        }\n+    }\n     \n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n", "next_change": {"commit": "fd21968e515394812d8a7f034d46203f44537740", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex b63b115a08..27fbf8661f 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -620,94 +649,6 @@ public class Datasets extends AbstractApiBean {\n             \n         }\n     }\n-  \n-    @GET\n-    @Path(\"{id}/versions/{versionId}/metadata\")\n-    @Produces(\"application/ld+json, application/json-ld\")\n-    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @PathParam(\"versionId\") String versionId, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n-        try {\n-            DataverseRequest req = createDataverseRequest(findUserOrDie());\n-            DatasetVersion dsv = getDatasetVersionOrDie(req, versionId, findDatasetOrDie(id), uriInfo, headers);\n-            OREMap ore = new OREMap(dsv,\n-                    settingsService.isTrueForKey(SettingsServiceBean.Key.ExcludeEmailFromExport, false));\n-            return ok(ore.getOREMapBuilder(true));\n-\n-        } catch (WrappedResponse ex) {\n-            ex.printStackTrace();\n-            return ex.getResponse();\n-        } catch (Exception jpe) {\n-            logger.log(Level.SEVERE, \"Error getting jsonld metadata for dsv: \", jpe.getLocalizedMessage());\n-            jpe.printStackTrace();\n-            return error(Response.Status.INTERNAL_SERVER_ERROR, jpe.getLocalizedMessage());\n-        }\n-    }\n-\n-    @GET\n-    @Path(\"{id}/metadata\")\n-    @Produces(\"application/ld+json, application/json-ld\")\n-    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n-        return getVersionJsonLDMetadata(id, \":draft\", uriInfo, headers);\n-    }\n-            \n-    @PUT\n-    @Path(\"{id}/metadata\")\n-    @Consumes(\"application/ld+json, application/json-ld\")\n-    public Response updateVersionMetadata(String jsonLDBody, @PathParam(\"id\") String id, @DefaultValue(\"false\") @QueryParam(\"replace\") boolean replaceTerms) {\n-\n-        try {\n-            Dataset ds = findDatasetOrDie(id);\n-            DataverseRequest req = createDataverseRequest(findUserOrDie());\n-            DatasetVersion dsv = ds.getEditVersion();\n-            boolean updateDraft = ds.getLatestVersion().isDraft();\n-            dsv = JSONLDUtil.updateDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc, !replaceTerms, false);\n-            \n-            DatasetVersion managedVersion;\n-            if (updateDraft) {\n-                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n-                managedVersion = managedDataset.getEditVersion();\n-            } else {\n-                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n-            }\n-            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n-            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n-\n-        } catch (WrappedResponse ex) {\n-            return ex.getResponse();\n-        } catch (JsonParsingException jpe) {\n-            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n-            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n-        }\n-    }\n-    \n-    @PUT\n-    @Path(\"{id}/metadata/delete\")\n-    @Consumes(\"application/ld+json, application/json-ld\")\n-    public Response deleteMetadata(String jsonLDBody, @PathParam(\"id\") String id) {\n-        try {\n-            Dataset ds = findDatasetOrDie(id);\n-            DataverseRequest req = createDataverseRequest(findUserOrDie());\n-            DatasetVersion dsv = ds.getEditVersion();\n-            boolean updateDraft = ds.getLatestVersion().isDraft();\n-            dsv = JSONLDUtil.deleteDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc);\n-            DatasetVersion managedVersion;\n-            if (updateDraft) {\n-                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n-                managedVersion = managedDataset.getEditVersion();\n-            } else {\n-                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n-            }\n-            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n-            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n-\n-        } catch (WrappedResponse ex) {\n-            ex.printStackTrace();\n-            return ex.getResponse();\n-        } catch (JsonParsingException jpe) {\n-            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n-            jpe.printStackTrace();\n-            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n-        }\n-    }\n     \n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n", "next_change": {"commit": "19f3eac7cfd7837b45f6d22f8d8d53215354c1ad", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex 27fbf8661f..b32908a303 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -649,6 +659,94 @@ public class Datasets extends AbstractApiBean {\n             \n         }\n     }\n+\n+    @GET\n+    @Path(\"{id}/versions/{versionId}/metadata\")\n+    @Produces(\"application/ld+json, application/json-ld\")\n+    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @PathParam(\"versionId\") String versionId, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n+        try {\n+            DataverseRequest req = createDataverseRequest(findUserOrDie());\n+            DatasetVersion dsv = getDatasetVersionOrDie(req, versionId, findDatasetOrDie(id), uriInfo, headers);\n+            OREMap ore = new OREMap(dsv,\n+                    settingsService.isTrueForKey(SettingsServiceBean.Key.ExcludeEmailFromExport, false));\n+            return ok(ore.getOREMapBuilder(true));\n+\n+        } catch (WrappedResponse ex) {\n+            ex.printStackTrace();\n+            return ex.getResponse();\n+        } catch (Exception jpe) {\n+            logger.log(Level.SEVERE, \"Error getting jsonld metadata for dsv: \", jpe.getLocalizedMessage());\n+            jpe.printStackTrace();\n+            return error(Response.Status.INTERNAL_SERVER_ERROR, jpe.getLocalizedMessage());\n+        }\n+    }\n+\n+    @GET\n+    @Path(\"{id}/metadata\")\n+    @Produces(\"application/ld+json, application/json-ld\")\n+    public Response getVersionJsonLDMetadata(@PathParam(\"id\") String id, @Context UriInfo uriInfo, @Context HttpHeaders headers) {\n+        return getVersionJsonLDMetadata(id, \":draft\", uriInfo, headers);\n+    }\n+\n+    @PUT\n+    @Path(\"{id}/metadata\")\n+    @Consumes(\"application/ld+json, application/json-ld\")\n+    public Response updateVersionMetadata(String jsonLDBody, @PathParam(\"id\") String id, @DefaultValue(\"false\") @QueryParam(\"replace\") boolean replaceTerms) {\n+\n+        try {\n+            Dataset ds = findDatasetOrDie(id);\n+            DataverseRequest req = createDataverseRequest(findUserOrDie());\n+            DatasetVersion dsv = ds.getEditVersion();\n+            boolean updateDraft = ds.getLatestVersion().isDraft();\n+            dsv = JSONLDUtil.updateDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc, !replaceTerms, false);\n+\n+            DatasetVersion managedVersion;\n+            if (updateDraft) {\n+                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n+                managedVersion = managedDataset.getEditVersion();\n+            } else {\n+                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n+            }\n+            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n+            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n+\n+        } catch (WrappedResponse ex) {\n+            return ex.getResponse();\n+        } catch (JsonParsingException jpe) {\n+            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n+            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n+        }\n+    }\n+\n+    @PUT\n+    @Path(\"{id}/metadata/delete\")\n+    @Consumes(\"application/ld+json, application/json-ld\")\n+    public Response deleteMetadata(String jsonLDBody, @PathParam(\"id\") String id) {\n+        try {\n+            Dataset ds = findDatasetOrDie(id);\n+            DataverseRequest req = createDataverseRequest(findUserOrDie());\n+            DatasetVersion dsv = ds.getEditVersion();\n+            boolean updateDraft = ds.getLatestVersion().isDraft();\n+            dsv = JSONLDUtil.deleteDatasetVersionMDFromJsonLD(dsv, jsonLDBody, metadataBlockService, datasetFieldSvc);\n+            DatasetVersion managedVersion;\n+            if (updateDraft) {\n+                Dataset managedDataset = execCommand(new UpdateDatasetVersionCommand(ds, req));\n+                managedVersion = managedDataset.getEditVersion();\n+            } else {\n+                managedVersion = execCommand(new CreateDatasetVersionCommand(req, ds, dsv));\n+            }\n+            String info = updateDraft ? \"Version Updated\" : \"Version Created\";\n+            return ok(Json.createObjectBuilder().add(info, managedVersion.getVersionDate()));\n+\n+        } catch (WrappedResponse ex) {\n+            ex.printStackTrace();\n+            return ex.getResponse();\n+        } catch (JsonParsingException jpe) {\n+            logger.log(Level.SEVERE, \"Error parsing dataset json. Json: {0}\", jsonLDBody);\n+            jpe.printStackTrace();\n+            return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n+        }\n+    }\n     \n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n", "next_change": {"commit": "6cc86e020135c1916d26be8ecef37bbf14f4f7c6", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex b32908a303..9ea7e4b27f 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -747,7 +747,7 @@ public class Datasets extends AbstractApiBean {\n             return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n         }\n     }\n-    \n+\n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n     public Response deleteVersionMetadata(String jsonBody, @PathParam(\"id\") String id) throws WrappedResponse {\n", "next_change": {"commit": "c833eb98362792296239444bdb0510be10135a38", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex 9ea7e4b27f..348323b49d 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -747,7 +752,7 @@ public class Datasets extends AbstractApiBean {\n             return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n         }\n     }\n-\n+    \n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n     public Response deleteVersionMetadata(String jsonBody, @PathParam(\"id\") String id) throws WrappedResponse {\n", "next_change": {"commit": "21ff777277a49e45a8ececbd797d7f2272e7780d", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex 348323b49d..75e81efdba 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -752,7 +767,7 @@ public class Datasets extends AbstractApiBean {\n             return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n         }\n     }\n-    \n+\n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n     public Response deleteVersionMetadata(String jsonBody, @PathParam(\"id\") String id) throws WrappedResponse {\n", "next_change": {"commit": "60d7d0dff8f6f0063f94f44bf79080867e3ec0ae", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex 75e81efdba..ddb3cf489d 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -767,7 +752,7 @@ public class Datasets extends AbstractApiBean {\n             return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n         }\n     }\n-\n+    \n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n     public Response deleteVersionMetadata(String jsonBody, @PathParam(\"id\") String id) throws WrappedResponse {\n", "next_change": {"commit": "925a1c3f3d2538a365edc8f8c23735355615e08b", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex ddb3cf489d..9f86649718 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -752,7 +747,7 @@ public class Datasets extends AbstractApiBean {\n             return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n         }\n     }\n-    \n+\n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n     public Response deleteVersionMetadata(String jsonBody, @PathParam(\"id\") String id) throws WrappedResponse {\n", "next_change": {"commit": "eade0066585b3511ccb9adbc1cea1d1f4d8caf37", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex 9f86649718..c2f820fbf8 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -747,7 +755,7 @@ public class Datasets extends AbstractApiBean {\n             return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n         }\n     }\n-\n+    \n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n     public Response deleteVersionMetadata(String jsonBody, @PathParam(\"id\") String id) throws WrappedResponse {\n", "next_change": {"commit": "56fd065a1675449925d0426558aa007bf0a299e7", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex c2f820fbf8..a9b7317167 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -755,7 +766,7 @@ public class Datasets extends AbstractApiBean {\n             return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n         }\n     }\n-    \n+\n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n     public Response deleteVersionMetadata(String jsonBody, @PathParam(\"id\") String id) throws WrappedResponse {\n", "next_change": {"commit": "8f8531a23b5156f0093e32272ed683c692e27f7f", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex a9b7317167..2da116f5f6 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -766,7 +760,7 @@ public class Datasets extends AbstractApiBean {\n             return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n         }\n     }\n-\n+    \n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n     public Response deleteVersionMetadata(String jsonBody, @PathParam(\"id\") String id) throws WrappedResponse {\n", "next_change": {"commit": "fae74755535964a4f8d87f46a14f454cf8d544a5", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex 2da116f5f6..fb585a4ba9 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -760,7 +761,7 @@ public class Datasets extends AbstractApiBean {\n             return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n         }\n     }\n-    \n+\n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n     public Response deleteVersionMetadata(String jsonBody, @PathParam(\"id\") String id) throws WrappedResponse {\n", "next_change": {"commit": "c72c57ac2b225b614824d4a5ffc4bed467d73a8b", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex fb585a4ba9..ee4c5ffa12 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -761,7 +760,7 @@ public class Datasets extends AbstractApiBean {\n             return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n         }\n     }\n-\n+    \n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n     public Response deleteVersionMetadata(String jsonBody, @PathParam(\"id\") String id) throws WrappedResponse {\n", "next_change": {"commit": "d2c61b343fcdfbcba5590b18b89f0ed976ee147a", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex ee4c5ffa12..948b91ca66 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -760,7 +769,7 @@ public class Datasets extends AbstractApiBean {\n             return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n         }\n     }\n-    \n+\n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n     public Response deleteVersionMetadata(String jsonBody, @PathParam(\"id\") String id) throws WrappedResponse {\n", "next_change": {"commit": "ec1313056ada36b4d66da2938c1273c6b8d5e72b", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex 948b91ca66..8473be7065 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -769,7 +729,7 @@ public class Datasets extends AbstractApiBean {\n             return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n         }\n     }\n-\n+    \n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n     public Response deleteVersionMetadata(String jsonBody, @PathParam(\"id\") String id) throws WrappedResponse {\n", "next_change": {"commit": "f994923879e5eb5b9404c8c9eb3d77e613eea0fd", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex 8473be7065..ce5caf20db 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -729,7 +762,7 @@ public class Datasets extends AbstractApiBean {\n             return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n         }\n     }\n-    \n+\n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n     public Response deleteVersionMetadata(String jsonBody, @PathParam(\"id\") String id) throws WrappedResponse {\n", "next_change": {"commit": "8026778c742f6d6be71a6161907fe62eca061415", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex ce5caf20db..cd9c57c41a 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -762,7 +731,7 @@ public class Datasets extends AbstractApiBean {\n             return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n         }\n     }\n-\n+    \n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n     public Response deleteVersionMetadata(String jsonBody, @PathParam(\"id\") String id) throws WrappedResponse {\n", "next_change": {"commit": "c10530ce764d5c67267958970dd6d9196e9a37ef", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex cd9c57c41a..02fdaf1543 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -731,7 +737,7 @@ public class Datasets extends AbstractApiBean {\n             return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n         }\n     }\n-    \n+\n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n     public Response deleteVersionMetadata(String jsonBody, @PathParam(\"id\") String id) throws WrappedResponse {\n", "next_change": {"commit": "16d03003488998ae5e64cb80f0a94e8bb5cf6961", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex 02fdaf1543..93f4875390 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -737,7 +729,7 @@ public class Datasets extends AbstractApiBean {\n             return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n         }\n     }\n-\n+    \n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n     public Response deleteVersionMetadata(String jsonBody, @PathParam(\"id\") String id) throws WrappedResponse {\n", "next_change": {"commit": "8f596531cf0e1ec6583e89a5d96ccff38dbe46a4", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\nindex 93f4875390..7520c53117 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/api/Datasets.java\n", "chunk": "@@ -729,7 +733,7 @@ public class Datasets extends AbstractApiBean {\n             return error(Status.BAD_REQUEST, \"Error parsing Json: \" + jpe.getMessage());\n         }\n     }\n-    \n+\n     @PUT\n     @Path(\"{id}/deleteMetadata\")\n     public Response deleteVersionMetadata(String jsonBody, @PathParam(\"id\") String id) throws WrappedResponse {\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MjU3NjU1Ng==", "url": "https://github.com/IQSS/dataverse/pull/7414#discussion_r662576556", "body": "Should this be getAsString?", "bodyText": "Should this be getAsString?", "bodyHTML": "<p dir=\"auto\">Should this be getAsString?</p>", "author": "pdurbin", "createdAt": "2021-07-01T20:36:00Z", "path": "src/main/java/edu/harvard/iq/dataverse/util/bagit/BagGenerator.java", "diffHunk": "@@ -816,7 +824,7 @@ private String generateInfoFile() {\n         } else {\r\n             info.append(\r\n                     // FixMe - handle description having subfields better\r\n-                    WordUtils.wrap(getSingleValue(aggregation.getAsJsonObject(descriptionTerm.getLabel()),\r\n+                    WordUtils.wrap(getSingleValue(aggregation.get(descriptionTerm.getLabel()),\r", "originalCommit": "10ef9ff27eb38668bd06234f9bb79545782d36e7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MzE2OTc1Mw==", "url": "https://github.com/IQSS/dataverse/pull/7414#discussion_r663169753", "bodyText": "Description is a multi-valued field so this could be a JsonObject or JsonArray. The added logic here handles both cases. Nominally this is also separable from the API itself - just caught in testing along the way. Could be moved to a separate PR.", "author": "qqmyers", "createdAt": "2021-07-02T17:51:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MjU3NjU1Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NDgwNDUwOA==", "url": "https://github.com/IQSS/dataverse/pull/7414#discussion_r664804508", "bodyText": "Oh, I see the added logic now. Thanks.", "author": "pdurbin", "createdAt": "2021-07-06T18:56:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MjU3NjU1Ng=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MjU4MDIzNQ==", "url": "https://github.com/IQSS/dataverse/pull/7414#discussion_r662580235", "body": "Ah, it seems like maybe all installations do need the new .tsv file. If so, it should be added to the script that adds them all during installation.", "bodyText": "Ah, it seems like maybe all installations do need the new .tsv file. If so, it should be added to the script that adds them all during installation.", "bodyHTML": "<p dir=\"auto\">Ah, it seems like maybe all installations do need the new .tsv file. If so, it should be added to the script that adds them all during installation.</p>", "author": "pdurbin", "createdAt": "2021-07-01T20:43:07Z", "path": "src/main/java/edu/harvard/iq/dataverse/util/json/JsonLDTerm.java", "diffHunk": "@@ -48,6 +45,8 @@\n     public static JsonLDTerm totalSize = JsonLDTerm.DVCore(\"totalSize\");\r\n     public static JsonLDTerm fileCount = JsonLDTerm.DVCore(\"fileCount\");\r\n     public static JsonLDTerm maxFileSize = JsonLDTerm.DVCore(\"maxFileSize\");\r\n+    \r\n+    public static JsonLDTerm metadataOnOrig = JsonLDTerm.DVCore(\"metadataOnOrig\");\r", "originalCommit": "10ef9ff27eb38668bd06234f9bb79545782d36e7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MzE3MDI1Ng==", "url": "https://github.com/IQSS/dataverse/pull/7414#discussion_r663170256", "bodyText": "As noted above, this is optional/not needed by default. If we decide to remove the functionality, this line would also go.", "author": "qqmyers", "createdAt": "2021-07-02T17:52:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MjU4MDIzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2NjQ0NDkyMg==", "url": "https://github.com/IQSS/dataverse/pull/7414#discussion_r666444922", "bodyText": "Removed in a5a745d.", "author": "pdurbin", "createdAt": "2021-07-08T18:57:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY2MjU4MDIzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "a5a745d157036972194ddd790d3320c140219e6e", "changed_code": [{"header": "diff --git a/src/main/java/edu/harvard/iq/dataverse/util/json/JsonLDTerm.java b/src/main/java/edu/harvard/iq/dataverse/util/json/JsonLDTerm.java\nindex 18e865b2f4..20aeceda7d 100644\n--- a/src/main/java/edu/harvard/iq/dataverse/util/json/JsonLDTerm.java\n+++ b/src/main/java/edu/harvard/iq/dataverse/util/json/JsonLDTerm.java\n", "chunk": "@@ -45,8 +45,6 @@ public class JsonLDTerm {\n     public static JsonLDTerm totalSize = JsonLDTerm.DVCore(\"totalSize\");\n     public static JsonLDTerm fileCount = JsonLDTerm.DVCore(\"fileCount\");\n     public static JsonLDTerm maxFileSize = JsonLDTerm.DVCore(\"maxFileSize\");\n-    \n-    public static JsonLDTerm metadataOnOrig = JsonLDTerm.DVCore(\"metadataOnOrig\");\n \n     public JsonLDTerm(JsonLDNamespace namespace, String term) {\n         this.namespace = namespace;\n", "next_change": null}]}}, {"oid": "e159003877928889aa5f3293b4ae64b99dfbf8d2", "url": "https://github.com/IQSS/dataverse/commit/e159003877928889aa5f3293b4ae64b99dfbf8d2", "message": "fix test", "committedDate": "2021-07-02T16:20:55Z", "type": "commit"}, {"oid": "cf8b2b52f4f795c9717cef2702e53be377651a92", "url": "https://github.com/IQSS/dataverse/commit/cf8b2b52f4f795c9717cef2702e53be377651a92", "message": "Update doc/release-notes/6497-semantic-api.md\n\nCo-authored-by: Philip Durbin <philipdurbin@gmail.com>", "committedDate": "2021-07-02T16:24:48Z", "type": "commit"}, {"oid": "d5ff95563970fb5aac3622bea613fcae70a1d86c", "url": "https://github.com/IQSS/dataverse/commit/d5ff95563970fb5aac3622bea613fcae70a1d86c", "message": "Update doc/sphinx-guides/source/developers/dataset-semantic-metadata-api.rst\n\nCo-authored-by: Philip Durbin <philipdurbin@gmail.com>", "committedDate": "2021-07-02T16:30:10Z", "type": "commit"}, {"oid": "61627d161911424e3d586e2f4ffea498c02f7a80", "url": "https://github.com/IQSS/dataverse/commit/61627d161911424e3d586e2f4ffea498c02f7a80", "message": "add create example, remove solr schema copies file", "committedDate": "2021-07-02T17:23:48Z", "type": "commit"}, {"oid": "1d54c68fe4b515e56fee490a302cd8464d278d2d", "url": "https://github.com/IQSS/dataverse/commit/1d54c68fe4b515e56fee490a302cd8464d278d2d", "message": "removed debug logging", "committedDate": "2021-07-02T17:55:19Z", "type": "commit"}, {"oid": "bc821808c71334ecb180deff1bbc8e467a77db8b", "url": "https://github.com/IQSS/dataverse/commit/bc821808c71334ecb180deff1bbc8e467a77db8b", "message": "Merge branch 'IQSS/6497-semantic_api' of https://github.com/GlobalDataverseCommunityConsortium/dataverse.git into IQSS/6497-semantic_api", "committedDate": "2021-07-02T18:06:16Z", "type": "commit"}, {"oid": "4c1d31a59aa4b0be7de74a95efc8d1c08f693a36", "url": "https://github.com/IQSS/dataverse/commit/4c1d31a59aa4b0be7de74a95efc8d1c08f693a36", "message": "missing header", "committedDate": "2021-07-02T18:20:29Z", "type": "commit"}, {"oid": "a5a745d157036972194ddd790d3320c140219e6e", "url": "https://github.com/IQSS/dataverse/commit/a5a745d157036972194ddd790d3320c140219e6e", "message": "remove metadataOnOrig per review", "committedDate": "2021-07-08T16:32:14Z", "type": "commit"}, {"oid": "bd37e3023489aa903393fee0f4283ee166a80900", "url": "https://github.com/IQSS/dataverse/commit/bd37e3023489aa903393fee0f4283ee166a80900", "message": "Merge remote-tracking branch 'IQSS/develop' into IQSS/6497-semantic_api", "committedDate": "2021-07-08T16:32:33Z", "type": "commit"}, {"oid": "0138ebb8a8909ed4943c00c2345278258992d2cf", "url": "https://github.com/IQSS/dataverse/commit/0138ebb8a8909ed4943c00c2345278258992d2cf", "message": "add missing create method (in migrate PR)", "committedDate": "2021-07-13T16:54:35Z", "type": "commit"}, {"oid": "13a7841b3e08e84460fbdf1a8a0405adc53bb4a4", "url": "https://github.com/IQSS/dataverse/commit/13a7841b3e08e84460fbdf1a8a0405adc53bb4a4", "message": "No \"@id\" npe fix", "committedDate": "2021-07-13T18:41:24Z", "type": "commit"}, {"oid": "86a08e3362e84de51226f26cae258b52dab107af", "url": "https://github.com/IQSS/dataverse/commit/86a08e3362e84de51226f26cae258b52dab107af", "message": "avoid npe in logging", "committedDate": "2021-07-13T18:52:21Z", "type": "commit"}, {"oid": "0c64c68dff6be42299f1d0d27a9da3431167632b", "url": "https://github.com/IQSS/dataverse/commit/0c64c68dff6be42299f1d0d27a9da3431167632b", "message": "only require \"@id\" when migrating", "committedDate": "2021-07-13T19:39:11Z", "type": "commit"}, {"oid": "8e9f2f72223453f85dd81ff425c959582a127b9e", "url": "https://github.com/IQSS/dataverse/commit/8e9f2f72223453f85dd81ff425c959582a127b9e", "message": "fix logging in create case", "committedDate": "2021-07-13T20:36:15Z", "type": "commit"}, {"oid": "4d7097170d7e1399f751846e3dd6de07c853fc2f", "url": "https://github.com/IQSS/dataverse/commit/4d7097170d7e1399f751846e3dd6de07c853fc2f", "message": "initial semantic API endpoint", "committedDate": "2020-03-23T17:37:31Z", "type": "commit"}, {"oid": "b2befca1c389f2d170cde88083e434d923e84147", "url": "https://github.com/IQSS/dataverse/commit/b2befca1c389f2d170cde88083e434d923e84147", "message": "Merge remote-tracking branch 'IQSS/develop' into IQSS/6497", "committedDate": "2020-03-23T17:50:08Z", "type": "commit"}, {"oid": "fb6421bbd1573f2eb012f1ab49f4e9daed704372", "url": "https://github.com/IQSS/dataverse/commit/fb6421bbd1573f2eb012f1ab49f4e9daed704372", "message": "merge new fields with existing ones", "committedDate": "2020-03-24T20:29:29Z", "type": "commit"}, {"oid": "8bc3df6a800e53530b41887de3b2f46ff449a876", "url": "https://github.com/IQSS/dataverse/commit/8bc3df6a800e53530b41887de3b2f46ff449a876", "message": "Merge remote-tracking branch 'IQSS/develop' into IQSS/6497", "committedDate": "2020-03-27T14:27:50Z", "type": "commit"}, {"oid": "5b828aa78acf217858fd4de645151213613afe48", "url": "https://github.com/IQSS/dataverse/commit/5b828aa78acf217858fd4de645151213613afe48", "message": "Merge remote-tracking branch 'IQSS/develop' into IQSS/6497", "committedDate": "2020-04-17T18:28:04Z", "type": "commit"}, {"oid": "f472b6c17f6419380447d8fde1095f0598318086", "url": "https://github.com/IQSS/dataverse/commit/f472b6c17f6419380447d8fde1095f0598318086", "message": "differences from IQSS/develop that break compilation", "committedDate": "2020-04-17T18:31:00Z", "type": "commit"}, {"oid": "bab11f0927cb0660baddb5b49fd1bd40bed4b645", "url": "https://github.com/IQSS/dataverse/commit/bab11f0927cb0660baddb5b49fd1bd40bed4b645", "message": "Merge remote-tracking branch 'IQSS/develop' into IQSS/6497-semantic_api\n\nConflicts:\n\tsrc/main/java/edu/harvard/iq/dataverse/api/Datasets.java", "committedDate": "2020-08-31T16:26:42Z", "type": "commit"}, {"oid": "d30586709792d3383d77d380521549022a3f729b", "url": "https://github.com/IQSS/dataverse/commit/d30586709792d3383d77d380521549022a3f729b", "message": "Add jsonld lib to compact to local context", "committedDate": "2020-09-08T20:01:50Z", "type": "commit"}, {"oid": "98d978e45faa9e436eff53559174e6a7f2dd52e3", "url": "https://github.com/IQSS/dataverse/commit/98d978e45faa9e436eff53559174e6a7f2dd52e3", "message": "use expand/compact, refactor, add :startmigration endpoint", "committedDate": "2020-09-11T19:37:24Z", "type": "commit"}, {"oid": "244370246eba5e3e02681a478a59b2373ce21f17", "url": "https://github.com/IQSS/dataverse/commit/244370246eba5e3e02681a478a59b2373ce21f17", "message": "try fix for parse error", "committedDate": "2020-09-16T20:53:57Z", "type": "commit"}, {"oid": "d44264321edc00e2744a20b6b16bd199b3dda6ba", "url": "https://github.com/IQSS/dataverse/commit/d44264321edc00e2744a20b6b16bd199b3dda6ba", "message": "log value", "committedDate": "2020-09-16T20:55:01Z", "type": "commit"}, {"oid": "fdeac97e24b9740ca7ea95759e20d6aece254f4b", "url": "https://github.com/IQSS/dataverse/commit/fdeac97e24b9740ca7ea95759e20d6aece254f4b", "message": "return dataset", "committedDate": "2020-09-16T21:30:39Z", "type": "commit"}, {"oid": "554e62091b8b31d79b3c65882311b6dbe3db69a8", "url": "https://github.com/IQSS/dataverse/commit/554e62091b8b31d79b3c65882311b6dbe3db69a8", "message": "manage versionState, add debug output", "committedDate": "2020-09-17T14:04:16Z", "type": "commit"}, {"oid": "bee7731fe34153ba1f89dc00b6e474d9c5b33a01", "url": "https://github.com/IQSS/dataverse/commit/bee7731fe34153ba1f89dc00b6e474d9c5b33a01", "message": "move debug ore generation after configuring dataset", "committedDate": "2020-09-17T14:25:44Z", "type": "commit"}, {"oid": "f4cecd3f39992c895a73bbdf5bd2396518b0ce2c", "url": "https://github.com/IQSS/dataverse/commit/f4cecd3f39992c895a73bbdf5bd2396518b0ce2c", "message": "set versionstate, simplify, move terms init outside loop", "committedDate": "2020-09-17T16:16:56Z", "type": "commit"}, {"oid": "a4189de0f3332ec75216c57374562a50cc4f5944", "url": "https://github.com/IQSS/dataverse/commit/a4189de0f3332ec75216c57374562a50cc4f5944", "message": "parse version number", "committedDate": "2020-09-17T17:30:32Z", "type": "commit"}, {"oid": "e0de1dba2dc6f1959c03580acdbffa465332f40a", "url": "https://github.com/IQSS/dataverse/commit/e0de1dba2dc6f1959c03580acdbffa465332f40a", "message": "fix toStrings", "committedDate": "2020-09-17T17:51:48Z", "type": "commit"}, {"oid": "928a88e1df05300b45d7d03e0bb0f5dda73cd642", "url": "https://github.com/IQSS/dataverse/commit/928a88e1df05300b45d7d03e0bb0f5dda73cd642", "message": "debug null pointer in DataverseFieldTypeInputLevel", "committedDate": "2020-09-17T20:13:12Z", "type": "commit"}, {"oid": "b78aed1886d4f9f52e418731e1119826f1b08c77", "url": "https://github.com/IQSS/dataverse/commit/b78aed1886d4f9f52e418731e1119826f1b08c77", "message": "add support for fields with their own formal URI", "committedDate": "2020-09-17T22:06:12Z", "type": "commit"}, {"oid": "3a47630f339d9eada23cbb12f65cd382b2c7f2d1", "url": "https://github.com/IQSS/dataverse/commit/3a47630f339d9eada23cbb12f65cd382b2c7f2d1", "message": "allow non-published to support debugging and future use", "committedDate": "2020-09-17T22:06:32Z", "type": "commit"}, {"oid": "3f8534bd690c28b1203a1979130183c573dfff2f", "url": "https://github.com/IQSS/dataverse/commit/3f8534bd690c28b1203a1979130183c573dfff2f", "message": "refactor, use expanded version directly", "committedDate": "2020-09-18T15:18:21Z", "type": "commit"}, {"oid": "64af0e8384ecb94dcf337bc8a2b66fe83c216c30", "url": "https://github.com/IQSS/dataverse/commit/64af0e8384ecb94dcf337bc8a2b66fe83c216c30", "message": "add modification time", "committedDate": "2020-09-18T15:28:17Z", "type": "commit"}, {"oid": "04ee08ae2a47edf72a760bfebbea8312d61be5e2", "url": "https://github.com/IQSS/dataverse/commit/04ee08ae2a47edf72a760bfebbea8312d61be5e2", "message": "expanded has array with 1 val - handle it", "committedDate": "2020-09-18T16:08:41Z", "type": "commit"}, {"oid": "c7c257382fefac53bd7374f258f9dd5a4792f5a9", "url": "https://github.com/IQSS/dataverse/commit/c7c257382fefac53bd7374f258f9dd5a4792f5a9", "message": "log compound values to start", "committedDate": "2020-09-18T16:13:10Z", "type": "commit"}, {"oid": "fc77f924b113936a4c438ca4f889f1164af16540", "url": "https://github.com/IQSS/dataverse/commit/fc77f924b113936a4c438ca4f889f1164af16540", "message": "compact with no context for decontextualize", "committedDate": "2020-09-18T17:54:30Z", "type": "commit"}, {"oid": "e2876449654628b4ef51907909eb0ceda77d0093", "url": "https://github.com/IQSS/dataverse/commit/e2876449654628b4ef51907909eb0ceda77d0093", "message": "handle appending and compound fields", "committedDate": "2020-09-18T21:49:16Z", "type": "commit"}, {"oid": "8596ac80ef206f9141cfc9815c0e98ccf718b327", "url": "https://github.com/IQSS/dataverse/commit/8596ac80ef206f9141cfc9815c0e98ccf718b327", "message": "sort compound field children by display order", "committedDate": "2020-09-20T14:57:53Z", "type": "commit"}, {"oid": "ffbc05ad7422cbf5080c0f576986dd494946d935", "url": "https://github.com/IQSS/dataverse/commit/ffbc05ad7422cbf5080c0f576986dd494946d935", "message": "parse date/time correctly", "committedDate": "2020-09-22T16:15:03Z", "type": "commit"}, {"oid": "0226b0d3c6cb15f3b7700eb1c259db90a9c75fa4", "url": "https://github.com/IQSS/dataverse/commit/0226b0d3c6cb15f3b7700eb1c259db90a9c75fa4", "message": "Revert \"sort compound field children by display order\"\n\nThis reverts commit 8596ac80ef206f9141cfc9815c0e98ccf718b327.", "committedDate": "2020-09-22T19:41:53Z", "type": "commit"}, {"oid": "fad62f44203210117b968ba84e4c6428aaa2fdd8", "url": "https://github.com/IQSS/dataverse/commit/fad62f44203210117b968ba84e4c6428aaa2fdd8", "message": "typo", "committedDate": "2020-09-22T19:47:29Z", "type": "commit"}, {"oid": "c6b19a9da2d4c54367021db830309cac445ad335", "url": "https://github.com/IQSS/dataverse/commit/c6b19a9da2d4c54367021db830309cac445ad335", "message": "now use Uri instead of label when matching terms", "committedDate": "2020-09-22T20:10:46Z", "type": "commit"}, {"oid": "a014fc43aa41a58c856eca3c185d55959f097585", "url": "https://github.com/IQSS/dataverse/commit/a014fc43aa41a58c856eca3c185d55959f097585", "message": "set dsfield of dsfvalue", "committedDate": "2020-09-22T21:22:22Z", "type": "commit"}, {"oid": "5bb5e68e3e4ceb90054d1bd085ac4c4909854813", "url": "https://github.com/IQSS/dataverse/commit/5bb5e68e3e4ceb90054d1bd085ac4c4909854813", "message": "additional debug, always set display order", "committedDate": "2020-09-23T13:21:01Z", "type": "commit"}, {"oid": "6a47fad40f9afcc3f98ef9acfe2bceb119ff4ffe", "url": "https://github.com/IQSS/dataverse/commit/6a47fad40f9afcc3f98ef9acfe2bceb119ff4ffe", "message": "generate URIs for child types to match current ore maps", "committedDate": "2020-09-23T14:10:13Z", "type": "commit"}, {"oid": "f34da09948bd726ea92c525d861ee6ec8b3d0fb4", "url": "https://github.com/IQSS/dataverse/commit/f34da09948bd726ea92c525d861ee6ec8b3d0fb4", "message": "allow oremap to work w/o modified date for debug", "committedDate": "2020-09-23T14:12:51Z", "type": "commit"}, {"oid": "6b8bbc77a75bfb37e97acd6b4d1b057bc2f0ae88", "url": "https://github.com/IQSS/dataverse/commit/6b8bbc77a75bfb37e97acd6b4d1b057bc2f0ae88", "message": "null check on date itself", "committedDate": "2020-09-23T14:49:57Z", "type": "commit"}, {"oid": "8af09380bd21fe112e95af6a213f7f39eaf21970", "url": "https://github.com/IQSS/dataverse/commit/8af09380bd21fe112e95af6a213f7f39eaf21970", "message": "fix compound value iteration\n\ndon't replace existing value - always add a new value, but, if not\nappending, clear the list of values to start", "committedDate": "2020-09-23T15:01:19Z", "type": "commit"}, {"oid": "79048442a4b3421769c3d6c4c913d212ec1c6133", "url": "https://github.com/IQSS/dataverse/commit/79048442a4b3421769c3d6c4c913d212ec1c6133", "message": "fix ttype map for terms with no uri - use title not name\n\nas is done currently in generating the ORE map", "committedDate": "2020-09-23T15:12:31Z", "type": "commit"}, {"oid": "e4ceee3d7dc91d2f913cfc713502656faa459c1d", "url": "https://github.com/IQSS/dataverse/commit/e4ceee3d7dc91d2f913cfc713502656faa459c1d", "message": "handle date format variations, including DV internal ones\n\nsee note in Dataverses - using Date() versus Timestamp() causes a\ndifference in precision and, perhaps surprisingly, a difference in the\nresponse from version.getLastUpdateTime().toString() in creating the\nOREmap.", "committedDate": "2020-09-23T20:27:00Z", "type": "commit"}, {"oid": "f176387c627a06dc89f67f4b266da56e4d7cb979", "url": "https://github.com/IQSS/dataverse/commit/f176387c627a06dc89f67f4b266da56e4d7cb979", "message": "and the format in current published bags", "committedDate": "2020-09-23T21:09:28Z", "type": "commit"}, {"oid": "2724d9ebb8c543ab26eb1991d8eeeae33d13f025", "url": "https://github.com/IQSS/dataverse/commit/2724d9ebb8c543ab26eb1991d8eeeae33d13f025", "message": "initial endpoint to release a migrated dataset", "committedDate": "2020-09-24T13:55:26Z", "type": "commit"}, {"oid": "7d5006d93941a6a5f89d08ed235b10d28dfc8c80", "url": "https://github.com/IQSS/dataverse/commit/7d5006d93941a6a5f89d08ed235b10d28dfc8c80", "message": "create metadataOnOrig field", "committedDate": "2020-09-24T16:40:08Z", "type": "commit"}, {"oid": "925070b4bbc856127dadc238d163d3fbe563ebba", "url": "https://github.com/IQSS/dataverse/commit/925070b4bbc856127dadc238d163d3fbe563ebba", "message": "add metadataOnOrig to solr", "committedDate": "2020-09-24T17:43:27Z", "type": "commit"}, {"oid": "005db9753c633562987a0fe5f863d1c03a99bb6d", "url": "https://github.com/IQSS/dataverse/commit/005db9753c633562987a0fe5f863d1c03a99bb6d", "message": "use Finalize Publication command\n\nCurate is for cases with an existing published version and migrated\ndatasets only have 1 version\n\nAlso - don't want to go through Publish command since it creates new\nversion numbers, etc.", "committedDate": "2020-09-24T20:04:12Z", "type": "commit"}, {"oid": "f336cfda5bcd6ad591b22b987508abaa7e370a34", "url": "https://github.com/IQSS/dataverse/commit/f336cfda5bcd6ad591b22b987508abaa7e370a34", "message": "add debug, allow more details in 400 responses", "committedDate": "2020-09-24T21:05:50Z", "type": "commit"}, {"oid": "0de70dd4f8a81fcaa74af63090436e6fbb46a85b", "url": "https://github.com/IQSS/dataverse/commit/0de70dd4f8a81fcaa74af63090436e6fbb46a85b", "message": "fix date-time issue", "committedDate": "2020-09-24T22:03:22Z", "type": "commit"}, {"oid": "395bb71ee512fc3e969ebd48a0e2b0f631617d80", "url": "https://github.com/IQSS/dataverse/commit/395bb71ee512fc3e969ebd48a0e2b0f631617d80", "message": "typos", "committedDate": "2020-09-25T13:26:39Z", "type": "commit"}, {"oid": "61c0349061e54548d877cd37403d0aeebf1d19f7", "url": "https://github.com/IQSS/dataverse/commit/61c0349061e54548d877cd37403d0aeebf1d19f7", "message": "create transfer bag type with orig files\n\nhandle no checksums on orig files", "committedDate": "2020-09-25T17:00:54Z", "type": "commit"}, {"oid": "1753257836e34ccb0017a0b8a3b58f39d4aaa18d", "url": "https://github.com/IQSS/dataverse/commit/1753257836e34ccb0017a0b8a3b58f39d4aaa18d", "message": "missing tab", "committedDate": "2020-09-30T20:39:04Z", "type": "commit"}, {"oid": "e642c65c3490c1bfd22058c9a3321a6f115426fc", "url": "https://github.com/IQSS/dataverse/commit/e642c65c3490c1bfd22058c9a3321a6f115426fc", "message": "add type param", "committedDate": "2020-09-30T21:20:20Z", "type": "commit"}, {"oid": "df66f224d0e9fe4446f946f3a8af9ee8e258cf92", "url": "https://github.com/IQSS/dataverse/commit/df66f224d0e9fe4446f946f3a8af9ee8e258cf92", "message": "Merge remote-tracking branch 'IQSS/develop' into IQSS/6497-semantic_api\n\nConflicts:\n\tsrc/main/java/edu/harvard/iq/dataverse/api/Datasets.java", "committedDate": "2020-10-06T15:25:02Z", "type": "commit"}, {"oid": "3445daac3136cfc5b9d87daafb8ac139f5a80ed6", "url": "https://github.com/IQSS/dataverse/commit/3445daac3136cfc5b9d87daafb8ac139f5a80ed6", "message": "Merge remote-tracking branch 'IQSS/develop' into IQSS/6497-semantic_api", "committedDate": "2020-11-16T16:43:15Z", "type": "commit"}, {"oid": "2e1d914cc7e344b31f3b4169e9d799f3a5340b84", "url": "https://github.com/IQSS/dataverse/commit/2e1d914cc7e344b31f3b4169e9d799f3a5340b84", "message": "Merge remote-tracking branch 'IQSS/develop' into IQSS/6497-semantic_api", "committedDate": "2020-11-16T19:19:27Z", "type": "commit"}, {"oid": "9ad779a2d0c7b74b5c4957d93bc1e2f3f7dab23f", "url": "https://github.com/IQSS/dataverse/commit/9ad779a2d0c7b74b5c4957d93bc1e2f3f7dab23f", "message": "add semantic metadata api call only", "committedDate": "2020-11-16T19:55:12Z", "type": "commit"}, {"oid": "8abd55e9e6a0031e60cf701790aaced3e2a4cbd0", "url": "https://github.com/IQSS/dataverse/commit/8abd55e9e6a0031e60cf701790aaced3e2a4cbd0", "message": "remove OREMap parameter", "committedDate": "2020-12-01T17:43:56Z", "type": "commit"}, {"oid": "1a35ed24a1c2721f66bec1c91ad17a38571abc43", "url": "https://github.com/IQSS/dataverse/commit/1a35ed24a1c2721f66bec1c91ad17a38571abc43", "message": "fix error handling\n\nFWIW: We have an error handler for the\nedu.harvard.iq.dataverse.util.json.JsonParseException class but not for\njavax.json.stream.JsonParsingException which was getting caught by the\nThrowable handler and returned as a 500 error with json message {}", "committedDate": "2020-12-01T20:34:07Z", "type": "commit"}, {"oid": "7b1512e71ecb7c0482f41e62a5b5b7a3eb459259", "url": "https://github.com/IQSS/dataverse/commit/7b1512e71ecb7c0482f41e62a5b5b7a3eb459259", "message": "append to current terms", "committedDate": "2020-12-01T21:29:36Z", "type": "commit"}, {"oid": "e5b54dfc6739c06bccb447103633d4dcd1f930f5", "url": "https://github.com/IQSS/dataverse/commit/e5b54dfc6739c06bccb447103633d4dcd1f930f5", "message": "add replace param", "committedDate": "2020-12-01T22:01:24Z", "type": "commit"}, {"oid": "578790f0b2558721f98defab8b384681246856f3", "url": "https://github.com/IQSS/dataverse/commit/578790f0b2558721f98defab8b384681246856f3", "message": "handle append on terms - fix cut/paste errors", "committedDate": "2020-12-02T15:34:22Z", "type": "commit"}, {"oid": "acee4df8ce31d9d910766560caa459b2c15374a2", "url": "https://github.com/IQSS/dataverse/commit/acee4df8ce31d9d910766560caa459b2c15374a2", "message": "fix logic", "committedDate": "2020-12-02T16:58:50Z", "type": "commit"}, {"oid": "9185126fb88970b1b3e3a448070745f232261a11", "url": "https://github.com/IQSS/dataverse/commit/9185126fb88970b1b3e3a448070745f232261a11", "message": "specify default", "committedDate": "2020-12-02T16:59:09Z", "type": "commit"}, {"oid": "e8698dc41095d03442ebb156d5b4de03c3cec1ca", "url": "https://github.com/IQSS/dataverse/commit/e8698dc41095d03442ebb156d5b4de03c3cec1ca", "message": "make replace still append for multiple val fields", "committedDate": "2020-12-02T17:21:56Z", "type": "commit"}, {"oid": "901efe863fb13d31dfdd8751373657f469090e2b", "url": "https://github.com/IQSS/dataverse/commit/901efe863fb13d31dfdd8751373657f469090e2b", "message": "add migrating switch", "committedDate": "2020-12-02T19:38:17Z", "type": "commit"}, {"oid": "34a28a37180c3c1a698ad359c88ff945a5ed0f53", "url": "https://github.com/IQSS/dataverse/commit/34a28a37180c3c1a698ad359c88ff945a5ed0f53", "message": "expose uri in datasetField api", "committedDate": "2020-12-03T18:13:28Z", "type": "commit"}, {"oid": "1b98b2c959b2f8ad92c020e2ffb05efc5a645551", "url": "https://github.com/IQSS/dataverse/commit/1b98b2c959b2f8ad92c020e2ffb05efc5a645551", "message": "track defined namespaces\n\nand avoid having contexts with specific entries for terms that are in a\nnamespace already", "committedDate": "2020-12-03T19:27:14Z", "type": "commit"}, {"oid": "55a8b303b124b1d9982c1aba620c443a499628c0", "url": "https://github.com/IQSS/dataverse/commit/55a8b303b124b1d9982c1aba620c443a499628c0", "message": "define equals, avoid duplicates in list", "committedDate": "2020-12-03T20:22:37Z", "type": "commit"}, {"oid": "966394ad33ded6939f9d606d0ca4682cb32f25a8", "url": "https://github.com/IQSS/dataverse/commit/966394ad33ded6939f9d606d0ca4682cb32f25a8", "message": "replace string with const", "committedDate": "2020-12-04T20:27:43Z", "type": "commit"}, {"oid": "b83f7b2f134ce87e5cf2b1d7af8182b756f1faf0", "url": "https://github.com/IQSS/dataverse/commit/b83f7b2f134ce87e5cf2b1d7af8182b756f1faf0", "message": "constant for CC0_URI", "committedDate": "2020-12-04T20:28:14Z", "type": "commit"}, {"oid": "1e08f102e617fcfcdeea7482d03e5aeae8270c11", "url": "https://github.com/IQSS/dataverse/commit/1e08f102e617fcfcdeea7482d03e5aeae8270c11", "message": "GET/DELETE endpoints", "committedDate": "2020-12-04T20:28:32Z", "type": "commit"}, {"oid": "780630f3a953c736a7a6278db98e64c04371c5f9", "url": "https://github.com/IQSS/dataverse/commit/780630f3a953c736a7a6278db98e64c04371c5f9", "message": "7130-handle missing contact name", "committedDate": "2020-12-08T17:58:16Z", "type": "commit"}, {"oid": "cc7e69cf143a62df201d8a1fe30ae0ab017b7328", "url": "https://github.com/IQSS/dataverse/commit/cc7e69cf143a62df201d8a1fe30ae0ab017b7328", "message": "Merge remote-tracking branch 'IQSS/develop' into IQSS/6497-semantic_api", "committedDate": "2020-12-08T18:01:11Z", "type": "commit"}, {"oid": "e0ea36ea18d121229ed10620f4030f27017d1775", "url": "https://github.com/IQSS/dataverse/commit/e0ea36ea18d121229ed10620f4030f27017d1775", "message": "Fix multiple description logic for info file", "committedDate": "2020-12-11T18:16:08Z", "type": "commit"}, {"oid": "6d0c6153f2215815b6d9be201e66fe191ed447e0", "url": "https://github.com/IQSS/dataverse/commit/6d0c6153f2215815b6d9be201e66fe191ed447e0", "message": "put is always for :draft version", "committedDate": "2020-12-11T18:44:51Z", "type": "commit"}, {"oid": "51f8f78cbf6c30a142c481587d1bb93ed1f797a1", "url": "https://github.com/IQSS/dataverse/commit/51f8f78cbf6c30a142c481587d1bb93ed1f797a1", "message": "don't cast to String[]", "committedDate": "2020-12-11T20:17:22Z", "type": "commit"}, {"oid": "353644a0e0bf560839841ba29bb3911ae0c03e70", "url": "https://github.com/IQSS/dataverse/commit/353644a0e0bf560839841ba29bb3911ae0c03e70", "message": "add more logging", "committedDate": "2020-12-11T20:17:52Z", "type": "commit"}, {"oid": "2382fef9211623ba35f56c0f59accfb06c4bafa0", "url": "https://github.com/IQSS/dataverse/commit/2382fef9211623ba35f56c0f59accfb06c4bafa0", "message": "handle unpublished versions", "committedDate": "2020-12-11T20:34:10Z", "type": "commit"}, {"oid": "243769aee31fe5c49ca93a1f168aa8ac083d493d", "url": "https://github.com/IQSS/dataverse/commit/243769aee31fe5c49ca93a1f168aa8ac083d493d", "message": "add method that can return JsonObjectBuilder\n\nwhich can be used with existing AbstractApiBean.ok()", "committedDate": "2020-12-11T22:27:05Z", "type": "commit"}, {"oid": "9bfa7c3d2f6c492b361fccd13f0bbc109d325353", "url": "https://github.com/IQSS/dataverse/commit/9bfa7c3d2f6c492b361fccd13f0bbc109d325353", "message": "log details on failure", "committedDate": "2020-12-11T22:27:24Z", "type": "commit"}, {"oid": "60f8a99676e1b9e2c35e7f624fc4f3da58d6675d", "url": "https://github.com/IQSS/dataverse/commit/60f8a99676e1b9e2c35e7f624fc4f3da58d6675d", "message": "multiple updates/fixes, added logging", "committedDate": "2020-12-11T22:27:55Z", "type": "commit"}, {"oid": "464832a4c47e9234f62e92d04a960333d68a7e1e", "url": "https://github.com/IQSS/dataverse/commit/464832a4c47e9234f62e92d04a960333d68a7e1e", "message": "Merge remote-tracking branch 'IQSS/develop' into IQSS/6497-semantic_api", "committedDate": "2020-12-22T19:17:51Z", "type": "commit"}, {"oid": "e93114940d5ed79cbfa138fcf5262b90d36b83ef", "url": "https://github.com/IQSS/dataverse/commit/e93114940d5ed79cbfa138fcf5262b90d36b83ef", "message": "fix terms retrieval", "committedDate": "2020-12-22T20:02:12Z", "type": "commit"}, {"oid": "2b8189afc433e5e4d0367d7391fe707fead036fa", "url": "https://github.com/IQSS/dataverse/commit/2b8189afc433e5e4d0367d7391fe707fead036fa", "message": "Merge remote-tracking branch 'IQSS/develop' into IQSS/6497-semantic_api", "committedDate": "2021-01-08T14:56:23Z", "type": "commit"}, {"oid": "e8f737c7ce334643b75139770248780611de54bf", "url": "https://github.com/IQSS/dataverse/commit/e8f737c7ce334643b75139770248780611de54bf", "message": "date test fixes for locale", "committedDate": "2021-01-13T22:29:12Z", "type": "commit"}, {"oid": "1c93260df74dee477162dc24318412974dad8329", "url": "https://github.com/IQSS/dataverse/commit/1c93260df74dee477162dc24318412974dad8329", "message": "Java 11 update and test fixes inc. for different exception mesg", "committedDate": "2021-01-13T22:29:49Z", "type": "commit"}, {"oid": "a85c1d68b3873ef00a96ecc5681d301d77190760", "url": "https://github.com/IQSS/dataverse/commit/a85c1d68b3873ef00a96ecc5681d301d77190760", "message": "update pom for v11 and running tests under 11", "committedDate": "2021-01-14T18:36:03Z", "type": "commit"}, {"oid": "1476a613cb2eb455e7045712d61cc4dcfd02e473", "url": "https://github.com/IQSS/dataverse/commit/1476a613cb2eb455e7045712d61cc4dcfd02e473", "message": "Merge branch 'iqssdevelop' into IQSS/6497-semantic_api\n\nConflicts:\n\tpom.xml", "committedDate": "2021-01-14T18:53:37Z", "type": "commit"}, {"oid": "a52353b8461d4d191f7e92561b3771411e895ff3", "url": "https://github.com/IQSS/dataverse/commit/a52353b8461d4d191f7e92561b3771411e895ff3", "message": "fix for edu.harvard.iq.dataverse.api.AdminIT test fail in Java 11\n\nThe DV code tested in testLoadMetadataBlock_ErrorHandling assumed it\ncould parse the message of an ArrayOutOfBounds exception as an it to\ndetermine the column that fails. This message is now a String. Rather\nthan parse it (and fail if it changes), I modified the code so that the\nlength of the values array is visible in the catch and can be sent\ndirectly (the first out of bounds index is if/when the index is\nvalues.length).", "committedDate": "2021-01-14T20:36:48Z", "type": "commit"}, {"oid": "6f405abadb1bfe54eda29225624b975ff298e4a8", "url": "https://github.com/IQSS/dataverse/commit/6f405abadb1bfe54eda29225624b975ff298e4a8", "message": "Merge remote-tracking branch 'IQSS/develop' into IQSS/6497-semantic_api\n\nConflicts:\n\tpom.xml\n\tsrc/main/java/edu/harvard/iq/dataverse/api/DatasetFieldServiceApi.java\n\tsrc/test/java/edu/harvard/iq/dataverse/dataaccess/StorageIOTest.java", "committedDate": "2021-01-29T16:07:44Z", "type": "commit"}, {"oid": "e866ae0f9bf89df5afca790d6c0893074abb73d9", "url": "https://github.com/IQSS/dataverse/commit/e866ae0f9bf89df5afca790d6c0893074abb73d9", "message": "Merge remote-tracking branch 'IQSS/develop' into IQSS/6497-semantic_api\n\nConflicts:\n\tsrc/test/java/edu/harvard/iq/dataverse/FileMetadataTest.java", "committedDate": "2021-02-08T19:55:38Z", "type": "commit"}, {"oid": "d5b8b45b5d37cfc292c8025b3ca8e09adf93a763", "url": "https://github.com/IQSS/dataverse/commit/d5b8b45b5d37cfc292c8025b3ca8e09adf93a763", "message": "Merge remote-tracking branch 'IQSS/develop' into IQSS/6497-semantic_api\n\nConflicts:\n\tsrc/main/java/edu/harvard/iq/dataverse/api/Datasets.java", "committedDate": "2021-02-23T18:09:57Z", "type": "commit"}, {"oid": "56acda8945bdb88ae3b21b9bac11ddef05101b4e", "url": "https://github.com/IQSS/dataverse/commit/56acda8945bdb88ae3b21b9bac11ddef05101b4e", "message": "Merge remote-tracking branch 'IQSS/develop' into IQSS/6497-semantic_api\n\nConflicts:\n\tconf/solr/7.7.2/schema_dv_mdb_copies.xml\n\tconf/solr/7.7.2/schema_dv_mdb_fields.xml\n\tsrc/main/java/edu/harvard/iq/dataverse/util/bagit/OREMap.java", "committedDate": "2021-04-07T21:28:27Z", "type": "commit"}, {"oid": "f19a1997e89ea1f6c4b66daf4070ac64619329a4", "url": "https://github.com/IQSS/dataverse/commit/f19a1997e89ea1f6c4b66daf4070ac64619329a4", "message": "Merge remote-tracking branch 'IQSS/develop' into IQSS/6497-semantic_api", "committedDate": "2021-04-13T18:35:32Z", "type": "commit"}, {"oid": "a7c6b3f427e647b2d8ae69fd666fdecbd94b4b59", "url": "https://github.com/IQSS/dataverse/commit/a7c6b3f427e647b2d8ae69fd666fdecbd94b4b59", "message": "Merge remote-tracking branch 'IQSS/develop' into IQSS/6497-semantic_api\n\nConflicts:\n\tsrc/main/java/edu/harvard/iq/dataverse/api/util/JsonResponseBuilder.java", "committedDate": "2021-04-26T18:32:08Z", "type": "commit"}, {"oid": "33fb8de59683747eb488fa8795241eddb0f49ae4", "url": "https://github.com/IQSS/dataverse/commit/33fb8de59683747eb488fa8795241eddb0f49ae4", "message": "Merge remote-tracking branch 'IQSS/develop' into IQSS/6497-semantic_api\n\nConflicts:\n\tconf/solr/8.8.1/schema_dv_mdb_copies.xml", "committedDate": "2021-05-20T17:05:39Z", "type": "commit"}, {"oid": "87c581f0dfc89b5c457f9c45ea985a4d552034d2", "url": "https://github.com/IQSS/dataverse/commit/87c581f0dfc89b5c457f9c45ea985a4d552034d2", "message": "Merge remote-tracking branch 'IQSS/develop' into IQSS/6497-semantic_api", "committedDate": "2021-06-03T16:18:24Z", "type": "commit"}, {"oid": "f47b268fb83f81b09ef99514ec26c6806a70c47a", "url": "https://github.com/IQSS/dataverse/commit/f47b268fb83f81b09ef99514ec26c6806a70c47a", "message": "update StringUtils package", "committedDate": "2021-06-03T16:47:38Z", "type": "commit"}, {"oid": "6d73b61d45352deb79a1064ea159a0e1cbf59586", "url": "https://github.com/IQSS/dataverse/commit/6d73b61d45352deb79a1064ea159a0e1cbf59586", "message": "Merge remote-tracking branch 'IQSS/develop' into IQSS/6497-semantic_api", "committedDate": "2021-06-23T17:24:29Z", "type": "commit"}, {"oid": "4714ea628651cd0653f98ed31f7f07de75be9472", "url": "https://github.com/IQSS/dataverse/commit/4714ea628651cd0653f98ed31f7f07de75be9472", "message": "move metadataOnOrig out of citation block\n\nwhich makes it optional", "committedDate": "2021-06-23T17:36:43Z", "type": "commit"}, {"oid": "82a5b23842a46009c98f5da4ef671e30c9e05c37", "url": "https://github.com/IQSS/dataverse/commit/82a5b23842a46009c98f5da4ef671e30c9e05c37", "message": "sync with migration api branch (tests, docs, bug fixes)", "committedDate": "2021-06-30T15:58:49Z", "type": "commit"}, {"oid": "10ef9ff27eb38668bd06234f9bb79545782d36e7", "url": "https://github.com/IQSS/dataverse/commit/10ef9ff27eb38668bd06234f9bb79545782d36e7", "message": "Merge remote-tracking branch 'IQSS/develop' into IQSS/6497-semantic_api", "committedDate": "2021-06-30T15:59:22Z", "type": "commit"}]}