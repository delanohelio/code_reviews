{"pr_number": 1716, "pr_title": "HDDS-4606. Detect and handle duplicate ACLs when set default ACLs", "pr_author": "masstter", "pr_createdAt": "2020-12-16T13:09:36Z", "pr_url": "https://github.com/apache/ozone/pull/1716", "timeline": [{"oid": "02866a22d9ae7cc6a82f0b982274dd15930ca164", "url": "https://github.com/apache/ozone/commit/02866a22d9ae7cc6a82f0b982274dd15930ca164", "message": "HDDS-4606. Got wrong acls when set default Acl(s) on volume for repeatedly", "committedDate": "2020-12-16T13:02:51Z", "type": "commit"}, {"oid": "e7cb5ebc25e50ed106cbacd17d03592d9f00bec7", "url": "https://github.com/apache/ozone/commit/e7cb5ebc25e50ed106cbacd17d03592d9f00bec7", "message": "HDDS-4606. Got wrong acls when set default Acl(s) on volume for repeatedly", "committedDate": "2020-12-17T01:08:52Z", "type": "commit"}, {"oid": "740a5f784f86a4037b208529f59ce76408421e79", "url": "https://github.com/apache/ozone/commit/740a5f784f86a4037b208529f59ce76408421e79", "message": "HDDS-4606. Got wrong acls when set default Acl(s) on volume for repeatedly, add handle adding different acl rights to existing acl entry", "committedDate": "2020-12-21T05:24:00Z", "type": "commit"}, {"oid": "610b540b9705e063973de044a2d84c946d5c75a2", "url": "https://github.com/apache/ozone/commit/610b540b9705e063973de044a2d84c946d5c75a2", "message": "HDDS-4606. Got wrong acls when set default Acl(s) on volume for repeatedly, add handle adding different acl rights to existing acl entry", "committedDate": "2020-12-21T05:31:58Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzcyNDgxNA==", "url": "https://github.com/apache/ozone/pull/1716#discussion_r547724814", "body": "currBitSet  -> curBitSet ", "bodyText": "currBitSet  -> curBitSet", "bodyHTML": "<p dir=\"auto\">currBitSet  -&gt; curBitSet</p>", "author": "ChenSammi", "createdAt": "2020-12-23T06:53:45Z", "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/helpers/OmOzoneAclMap.java", "diffHunk": "@@ -100,28 +97,58 @@ private BitSet getAcl(OzoneAclType type, String user) {\n   // Add a new acl to the map\n   public void addAcl(OzoneAcl acl) throws OMException {\n     Objects.requireNonNull(acl, \"Acl should not be null.\");\n+    OzoneAclType aclType = OzoneAclType.valueOf(acl.getType().name());\n     if (acl.getAclScope().equals(OzoneAcl.AclScope.DEFAULT)) {\n-      defaultAclList.add(OzoneAcl.toProtobuf(acl));\n+      addDefaultAcl(acl);\n       return;\n     }\n \n-    OzoneAclType aclType = OzoneAclType.valueOf(acl.getType().name());\n     if (!getAccessAclMap(aclType).containsKey(acl.getName())) {\n       getAccessAclMap(aclType).put(acl.getName(), acl.getAclBitSet());\n     } else {\n-      // Check if we are adding new rights to existing acl.\n-      BitSet temp = (BitSet) acl.getAclBitSet().clone();\n-      BitSet curRights = (BitSet) getAccessAclMap(aclType).\n-          get(acl.getName()).clone();\n-      temp.or(curRights);\n-\n-      if (temp.equals(curRights)) {\n-        // throw exception if acl is already added.\n-        throw new OMException(\"Acl \" + acl + \" already exist.\",\n-            INVALID_REQUEST);\n+      BitSet currBitSet = getAccessAclMap(aclType).get(acl.getName());", "originalCommit": "d0f2cfdb21a54f3ecb5e97608457f010b53e0a40", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b91c1f9973b8035fbe7c0bca6372c0d04890cc90", "changed_code": [{"header": "diff --git a/hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/helpers/OmOzoneAclMap.java b/hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/helpers/OmOzoneAclMap.java\nindex 56c699808..d9fe23aea 100644\n--- a/hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/helpers/OmOzoneAclMap.java\n+++ b/hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/helpers/OmOzoneAclMap.java\n", "chunk": "@@ -106,8 +106,8 @@ public void addAcl(OzoneAcl acl) throws OMException {\n     if (!getAccessAclMap(aclType).containsKey(acl.getName())) {\n       getAccessAclMap(aclType).put(acl.getName(), acl.getAclBitSet());\n     } else {\n-      BitSet currBitSet = getAccessAclMap(aclType).get(acl.getName());\n-      BitSet bitSet = checkAndGet(acl, currBitSet);\n+      BitSet curBitSet = getAccessAclMap(aclType).get(acl.getName());\n+      BitSet bitSet = checkAndGet(acl, curBitSet);\n       getAccessAclMap(aclType).replace(acl.getName(), bitSet);\n     }\n   }\n", "next_change": {"commit": "fcd016021452d14371e3335982ee0f7cb72fac5c", "changed_code": [{"header": "diff --git a/hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/helpers/OmOzoneAclMap.java b/hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/helpers/OmOzoneAclMap.java\ndeleted file mode 100644\nindex d9fe23aea..000000000\n--- a/hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/helpers/OmOzoneAclMap.java\n+++ /dev/null\n", "chunk": "@@ -1,357 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- *  with the License.  You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- */\n-\n-package org.apache.hadoop.ozone.om.helpers;\n-\n-import static org.apache.hadoop.ozone.OzoneAcl.ZERO_BITSET;\n-import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.INVALID_REQUEST;\n-import static org.apache.hadoop.ozone.security.acl.IAccessAuthorizer.ACLType.ALL;\n-import static org.apache.hadoop.ozone.security.acl.IAccessAuthorizer.ACLType.NONE;\n-\n-import com.google.protobuf.ByteString;\n-import java.util.ArrayList;\n-import java.util.BitSet;\n-import java.util.Collection;\n-import java.util.HashMap;\n-import java.util.LinkedList;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Objects;\n-import java.util.stream.Collectors;\n-import org.apache.hadoop.ozone.OzoneAcl;\n-import org.apache.hadoop.ozone.om.exceptions.OMException;\n-import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.OzoneAclInfo;\n-import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.OzoneAclInfo.OzoneAclScope;\n-import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.OzoneAclInfo.OzoneAclType;\n-import org.apache.hadoop.ozone.security.acl.IAccessAuthorizer.ACLIdentityType;\n-import org.apache.hadoop.ozone.security.acl.IAccessAuthorizer.ACLType;\n-import org.apache.hadoop.security.UserGroupInformation;\n-\n-/**\n- * This helper class keeps a map of all user and their permissions.\n- */\n-@SuppressWarnings(\"ProtocolBufferOrdinal\")\n-public class OmOzoneAclMap {\n-  // per Acl Type user:rights map\n-  private ArrayList<Map<String, BitSet>> accessAclMap;\n-  private List<OzoneAclInfo> defaultAclList;\n-\n-  OmOzoneAclMap() {\n-    accessAclMap = new ArrayList<>();\n-    defaultAclList = new ArrayList<>();\n-    for (OzoneAclType aclType : OzoneAclType.values()) {\n-      accessAclMap.add(aclType.ordinal(), new HashMap<>());\n-    }\n-  }\n-\n-  OmOzoneAclMap(List<OzoneAclInfo> defaultAclList,\n-      ArrayList<Map<String, BitSet>> accessAclMap) {\n-    this.defaultAclList = defaultAclList;\n-    this.accessAclMap = accessAclMap;\n-  }\n-\n-  private Map<String, BitSet> getAccessAclMap(OzoneAclType type) {\n-    return accessAclMap.get(type.ordinal());\n-  }\n-\n-  // For a given acl type and user, get the stored acl\n-  private BitSet getAcl(OzoneAclType type, String user) {\n-    return getAccessAclMap(type).get(user);\n-  }\n-\n-  public List<OzoneAcl> getAcl() {\n-    List<OzoneAcl> acls = new ArrayList<>();\n-\n-    acls.addAll(getAccessAcls());\n-    acls.addAll(defaultAclList.stream().map(a ->\n-        OzoneAcl.fromProtobuf(a)).collect(Collectors.toList()));\n-    return acls;\n-  }\n-\n-  private Collection<? extends OzoneAcl> getAccessAcls() {\n-    List<OzoneAcl> acls = new ArrayList<>();\n-    for (OzoneAclType type : OzoneAclType.values()) {\n-      accessAclMap.get(type.ordinal()).entrySet().stream().\n-          forEach(entry -> acls.add(new OzoneAcl(ACLIdentityType.\n-              valueOf(type.name()), entry.getKey(), entry.getValue(),\n-              OzoneAcl.AclScope.ACCESS)));\n-    }\n-    return acls;\n-  }\n-\n-  // Add a new acl to the map\n-  public void addAcl(OzoneAcl acl) throws OMException {\n-    Objects.requireNonNull(acl, \"Acl should not be null.\");\n-    OzoneAclType aclType = OzoneAclType.valueOf(acl.getType().name());\n-    if (acl.getAclScope().equals(OzoneAcl.AclScope.DEFAULT)) {\n-      addDefaultAcl(acl);\n-      return;\n-    }\n-\n-    if (!getAccessAclMap(aclType).containsKey(acl.getName())) {\n-      getAccessAclMap(aclType).put(acl.getName(), acl.getAclBitSet());\n-    } else {\n-      BitSet curBitSet = getAccessAclMap(aclType).get(acl.getName());\n-      BitSet bitSet = checkAndGet(acl, curBitSet);\n-      getAccessAclMap(aclType).replace(acl.getName(), bitSet);\n-    }\n-  }\n-\n-  private void addDefaultAcl(OzoneAcl acl) throws OMException {\n-    OzoneAclInfo ozoneAclInfo = OzoneAcl.toProtobuf(acl);\n-    if (defaultAclList.contains(ozoneAclInfo)) {\n-      aclExistsError(acl);\n-    } else {\n-      for (int i = 0; i < defaultAclList.size(); i++) {\n-        OzoneAclInfo old = defaultAclList.get(i);\n-        if (old.getType() == ozoneAclInfo.getType() && old.getName().equals(\n-                ozoneAclInfo.getName())) {\n-          BitSet curBitSet = BitSet.valueOf(old.getRights().toByteArray());\n-          BitSet bitSet = checkAndGet(acl, curBitSet);\n-          ozoneAclInfo = OzoneAclInfo.newBuilder(ozoneAclInfo).setRights(\n-                  ByteString.copyFrom(bitSet.toByteArray())).build();\n-          defaultAclList.remove(i);\n-          defaultAclList.add(ozoneAclInfo);\n-          return;\n-        }\n-      }\n-    }\n-    defaultAclList.add(ozoneAclInfo);\n-  }\n-\n-  private void aclExistsError(OzoneAcl acl) throws OMException {\n-    // throw exception if acl is already added.\n-    throw new OMException(\"Acl \" + acl + \" already exist.\", INVALID_REQUEST);\n-  }\n-\n-  private BitSet checkAndGet(OzoneAcl acl, BitSet curBitSet)\n-          throws OMException {\n-    // Check if we are adding new rights to existing acl.\n-    BitSet temp = (BitSet) acl.getAclBitSet().clone();\n-    BitSet curRights = (BitSet) curBitSet.clone();\n-    temp.or(curRights);\n-    if (temp.equals(curRights)) {\n-      aclExistsError(acl);\n-    }\n-    return temp;\n-  }\n-\n-  // Add a new acl to the map\n-  public void setAcls(List<OzoneAcl> acls) throws OMException {\n-    Objects.requireNonNull(acls, \"Acls should not be null.\");\n-    // Remove all Acls.\n-    for (OzoneAclType type : OzoneAclType.values()) {\n-      accessAclMap.get(type.ordinal()).clear();\n-    }\n-    // Add acls.\n-    for (OzoneAcl acl : acls) {\n-      addAcl(acl);\n-    }\n-  }\n-\n-  // Add a new acl to the map\n-  public void removeAcl(OzoneAcl acl) throws OMException {\n-    Objects.requireNonNull(acl, \"Acl should not be null.\");\n-    if (acl.getAclScope().equals(OzoneAcl.AclScope.DEFAULT)) {\n-      defaultAclList.remove(OzoneAcl.toProtobuf(acl));\n-      return;\n-    }\n-\n-    OzoneAclType aclType = OzoneAclType.valueOf(acl.getType().name());\n-    if (getAccessAclMap(aclType).containsKey(acl.getName())) {\n-      BitSet aclRights = getAccessAclMap(aclType).get(acl.getName());\n-      BitSet bits = (BitSet) acl.getAclBitSet().clone();\n-      bits.and(aclRights);\n-\n-      if (bits.equals(ZERO_BITSET)) {\n-        // throw exception if acl doesn't exist.\n-        throw new OMException(\"Acl [\" + acl + \"] doesn't exist.\",\n-            INVALID_REQUEST);\n-      }\n-\n-      acl.getAclBitSet().and(aclRights);\n-      aclRights.xor(acl.getAclBitSet());\n-\n-      // Remove the acl as all rights are already set to 0.\n-      if (aclRights.equals(ZERO_BITSET)) {\n-        getAccessAclMap(aclType).remove(acl.getName());\n-      }\n-    } else {\n-      // throw exception if acl doesn't exist.\n-      throw new OMException(\"Acl [\" + acl + \"] doesn't exist.\",\n-          INVALID_REQUEST);\n-    }\n-  }\n-\n-  // Add a new acl to the map\n-  public void addAcl(OzoneAclInfo acl) throws OMException {\n-    Objects.requireNonNull(acl, \"Acl should not be null.\");\n-    if (acl.getAclScope().equals(OzoneAclInfo.OzoneAclScope.DEFAULT)) {\n-      addDefaultAcl(OzoneAcl.fromProtobuf(acl));\n-      return;\n-    }\n-\n-    if (!getAccessAclMap(acl.getType()).containsKey(acl.getName())) {\n-      BitSet acls = BitSet.valueOf(acl.getRights().toByteArray());\n-      getAccessAclMap(acl.getType()).put(acl.getName(), acls);\n-    } else {\n-      aclExistsError(OzoneAcl.fromProtobuf(acl));\n-    }\n-  }\n-\n-  // for a given acl, check if the user has access rights\n-  public boolean hasAccess(OzoneAclInfo acl) {\n-    if (acl == null) {\n-      return false;\n-    }\n-\n-    BitSet aclBitSet = getAcl(acl.getType(), acl.getName());\n-    if (aclBitSet == null) {\n-      return false;\n-    }\n-    BitSet result = BitSet.valueOf(acl.getRights().toByteArray());\n-    result.and(aclBitSet);\n-    return (!result.equals(ZERO_BITSET) || aclBitSet.get(ALL.ordinal()))\n-        && !aclBitSet.get(NONE.ordinal());\n-  }\n-\n-  /**\n-   * For a given acl, check if the user has access rights.\n-   * Acl's are checked in followoing order:\n-   * 1. Acls for USER.\n-   * 2. Acls for GROUPS.\n-   * 3. Acls for WORLD.\n-   * 4. Acls for ANONYMOUS.\n-   * @param acl\n-   * @param ugi\n-   *\n-   * @return true if given ugi has acl set, else false.\n-   * */\n-  public boolean hasAccess(ACLType acl, UserGroupInformation ugi) {\n-    if (acl == null) {\n-      return false;\n-    }\n-    if (ugi == null) {\n-      return false;\n-    }\n-\n-    // Check acls in user acl list.\n-    return checkAccessForOzoneAclType(OzoneAclType.USER, acl, ugi)\n-        || checkAccessForOzoneAclType(OzoneAclType.GROUP, acl, ugi)\n-        || checkAccessForOzoneAclType(OzoneAclType.WORLD, acl, ugi)\n-        || checkAccessForOzoneAclType(OzoneAclType.ANONYMOUS, acl, ugi);\n-  }\n-\n-  /**\n-   * Helper function to check acl access for OzoneAclType.\n-   * */\n-  private boolean checkAccessForOzoneAclType(OzoneAclType identityType,\n-      ACLType acl, UserGroupInformation ugi) {\n-\n-    switch (identityType) {\n-    case USER:\n-      return OzoneAclUtil.checkIfAclBitIsSet(acl, getAcl(identityType,\n-          ugi.getUserName()));\n-    case GROUP:\n-      // Check access for user groups.\n-      for (String userGroup : ugi.getGroupNames()) {\n-        if (OzoneAclUtil.checkIfAclBitIsSet(acl, getAcl(identityType,\n-            userGroup))) {\n-          // Return true if any user group has required permission.\n-          return true;\n-        }\n-      }\n-      break;\n-    default:\n-      // For type WORLD and ANONYMOUS we set acl type as name.\n-      if(OzoneAclUtil.checkIfAclBitIsSet(acl, getAcl(identityType,\n-          identityType.name()))) {\n-        return true;\n-      }\n-\n-    }\n-    return false;\n-  }\n-\n-  // Convert this map to OzoneAclInfo Protobuf List\n-  public List<OzoneAclInfo> ozoneAclGetProtobuf() {\n-    List<OzoneAclInfo> aclList = new LinkedList<>();\n-    for (OzoneAclType type : OzoneAclType.values()) {\n-      for (Map.Entry<String, BitSet> entry :\n-          accessAclMap.get(type.ordinal()).entrySet()) {\n-        OzoneAclInfo.Builder builder = OzoneAclInfo.newBuilder()\n-            .setName(entry.getKey())\n-            .setType(type)\n-            .setAclScope(OzoneAclScope.ACCESS)\n-            .setRights(ByteString.copyFrom(entry.getValue().toByteArray()));\n-\n-        aclList.add(builder.build());\n-      }\n-    }\n-    aclList.addAll(defaultAclList);\n-    return aclList;\n-  }\n-\n-  // Create map from list of OzoneAclInfos\n-  public static OmOzoneAclMap ozoneAclGetFromProtobuf(\n-      List<OzoneAclInfo> aclList) throws OMException {\n-    OmOzoneAclMap aclMap = new OmOzoneAclMap();\n-    for (OzoneAclInfo acl : aclList) {\n-      aclMap.addAcl(acl);\n-    }\n-    return aclMap;\n-  }\n-\n-  public Collection<? extends OzoneAcl> getAclsByScope(OzoneAclScope scope) {\n-    if (scope.equals(OzoneAclScope.DEFAULT)) {\n-      return defaultAclList.stream().map(a ->\n-          OzoneAcl.fromProtobuf(a)).collect(Collectors.toList());\n-    } else {\n-      return getAcl();\n-    }\n-  }\n-\n-  public List<OzoneAclInfo> getDefaultAclList() {\n-    return defaultAclList;\n-  }\n-\n-  /**\n-   * Return a new copy of the object.\n-   */\n-  public OmOzoneAclMap copyObject() {\n-    ArrayList<Map<String, BitSet>> accessMap = new ArrayList<>();\n-\n-    // Initialize.\n-    for (OzoneAclType aclType : OzoneAclType.values()) {\n-      accessMap.add(aclType.ordinal(), new HashMap<>());\n-    }\n-\n-    // Add from original accessAclMap to accessMap.\n-    for (OzoneAclType aclType : OzoneAclType.values()) {\n-      final int ordinal = aclType.ordinal();\n-      accessAclMap.get(ordinal).forEach((k, v) ->\n-          accessMap.get(ordinal).put(k, (BitSet) v.clone()));\n-    }\n-\n-    // We can do shallow copy here, as OzoneAclInfo is immutable structure.\n-    ArrayList<OzoneAclInfo> defaultList = new ArrayList<>();\n-    defaultList.addAll(defaultAclList);\n-\n-    return new OmOzoneAclMap(defaultList, accessMap);\n-  }\n-}\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzcyNjI3NQ==", "url": "https://github.com/apache/ozone/pull/1716#discussion_r547726275", "body": "New line indent is 2. Here second line of a long line is 4. ", "bodyText": "New line indent is 2. Here second line of a long line is 4.", "bodyHTML": "<p dir=\"auto\">New line indent is 2. Here second line of a long line is 4.</p>", "author": "ChenSammi", "createdAt": "2020-12-23T06:55:24Z", "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/helpers/OmOzoneAclMap.java", "diffHunk": "@@ -100,28 +97,58 @@ private BitSet getAcl(OzoneAclType type, String user) {\n   // Add a new acl to the map\n   public void addAcl(OzoneAcl acl) throws OMException {\n     Objects.requireNonNull(acl, \"Acl should not be null.\");\n+    OzoneAclType aclType = OzoneAclType.valueOf(acl.getType().name());\n     if (acl.getAclScope().equals(OzoneAcl.AclScope.DEFAULT)) {\n-      defaultAclList.add(OzoneAcl.toProtobuf(acl));\n+      addDefaultAcl(acl);\n       return;\n     }\n \n-    OzoneAclType aclType = OzoneAclType.valueOf(acl.getType().name());\n     if (!getAccessAclMap(aclType).containsKey(acl.getName())) {\n       getAccessAclMap(aclType).put(acl.getName(), acl.getAclBitSet());\n     } else {\n-      // Check if we are adding new rights to existing acl.\n-      BitSet temp = (BitSet) acl.getAclBitSet().clone();\n-      BitSet curRights = (BitSet) getAccessAclMap(aclType).\n-          get(acl.getName()).clone();\n-      temp.or(curRights);\n-\n-      if (temp.equals(curRights)) {\n-        // throw exception if acl is already added.\n-        throw new OMException(\"Acl \" + acl + \" already exist.\",\n-            INVALID_REQUEST);\n+      BitSet currBitSet = getAccessAclMap(aclType).get(acl.getName());\n+      BitSet bitSet = checkAndGet(acl, currBitSet);\n+      getAccessAclMap(aclType).replace(acl.getName(), bitSet);\n+    }\n+  }\n+\n+  private void addDefaultAcl(OzoneAcl acl) throws OMException {\n+    OzoneAclInfo ozoneAclInfo = OzoneAcl.toProtobuf(acl);\n+    if (defaultAclList.contains(ozoneAclInfo)) {\n+      aclExistsError(acl);\n+    } else {\n+      for (int i = 0; i < defaultAclList.size(); i++) {\n+        OzoneAclInfo old = defaultAclList.get(i);\n+        if (old.getType() == ozoneAclInfo.getType() && old.getName().equals(\n+                ozoneAclInfo.getName())) {\n+          BitSet currBitSet = BitSet.valueOf(old.getRights().toByteArray());\n+          BitSet bitSet = checkAndGet(acl, currBitSet);\n+          ozoneAclInfo = OzoneAclInfo.newBuilder(ozoneAclInfo).setRights(\n+                  ByteString.copyFrom(bitSet.toByteArray())).build();\n+          defaultAclList.remove(i);\n+          defaultAclList.add(ozoneAclInfo);\n+          return;\n+        }\n       }\n-      getAccessAclMap(aclType).replace(acl.getName(), temp);\n     }\n+    defaultAclList.add(ozoneAclInfo);\n+  }\n+\n+  private void aclExistsError(OzoneAcl acl) throws OMException {\n+    // throw exception if acl is already added.\n+    throw new OMException(\"Acl \" + acl + \" already exist.\", INVALID_REQUEST);\n+  }\n+\n+  private BitSet checkAndGet(OzoneAcl acl, BitSet currBitSet)\n+          throws OMException {", "originalCommit": "d0f2cfdb21a54f3ecb5e97608457f010b53e0a40", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b91c1f9973b8035fbe7c0bca6372c0d04890cc90", "changed_code": [{"header": "diff --git a/hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/helpers/OmOzoneAclMap.java b/hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/helpers/OmOzoneAclMap.java\nindex 56c699808..d9fe23aea 100644\n--- a/hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/helpers/OmOzoneAclMap.java\n+++ b/hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/helpers/OmOzoneAclMap.java\n", "chunk": "@@ -139,11 +139,11 @@ private void aclExistsError(OzoneAcl acl) throws OMException {\n     throw new OMException(\"Acl \" + acl + \" already exist.\", INVALID_REQUEST);\n   }\n \n-  private BitSet checkAndGet(OzoneAcl acl, BitSet currBitSet)\n+  private BitSet checkAndGet(OzoneAcl acl, BitSet curBitSet)\n           throws OMException {\n     // Check if we are adding new rights to existing acl.\n     BitSet temp = (BitSet) acl.getAclBitSet().clone();\n-    BitSet curRights = (BitSet) currBitSet.clone();\n+    BitSet curRights = (BitSet) curBitSet.clone();\n     temp.or(curRights);\n     if (temp.equals(curRights)) {\n       aclExistsError(acl);\n", "next_change": {"commit": "fcd016021452d14371e3335982ee0f7cb72fac5c", "changed_code": [{"header": "diff --git a/hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/helpers/OmOzoneAclMap.java b/hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/helpers/OmOzoneAclMap.java\ndeleted file mode 100644\nindex d9fe23aea..000000000\n--- a/hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/helpers/OmOzoneAclMap.java\n+++ /dev/null\n", "chunk": "@@ -1,357 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- *  with the License.  You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- */\n-\n-package org.apache.hadoop.ozone.om.helpers;\n-\n-import static org.apache.hadoop.ozone.OzoneAcl.ZERO_BITSET;\n-import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.INVALID_REQUEST;\n-import static org.apache.hadoop.ozone.security.acl.IAccessAuthorizer.ACLType.ALL;\n-import static org.apache.hadoop.ozone.security.acl.IAccessAuthorizer.ACLType.NONE;\n-\n-import com.google.protobuf.ByteString;\n-import java.util.ArrayList;\n-import java.util.BitSet;\n-import java.util.Collection;\n-import java.util.HashMap;\n-import java.util.LinkedList;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Objects;\n-import java.util.stream.Collectors;\n-import org.apache.hadoop.ozone.OzoneAcl;\n-import org.apache.hadoop.ozone.om.exceptions.OMException;\n-import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.OzoneAclInfo;\n-import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.OzoneAclInfo.OzoneAclScope;\n-import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.OzoneAclInfo.OzoneAclType;\n-import org.apache.hadoop.ozone.security.acl.IAccessAuthorizer.ACLIdentityType;\n-import org.apache.hadoop.ozone.security.acl.IAccessAuthorizer.ACLType;\n-import org.apache.hadoop.security.UserGroupInformation;\n-\n-/**\n- * This helper class keeps a map of all user and their permissions.\n- */\n-@SuppressWarnings(\"ProtocolBufferOrdinal\")\n-public class OmOzoneAclMap {\n-  // per Acl Type user:rights map\n-  private ArrayList<Map<String, BitSet>> accessAclMap;\n-  private List<OzoneAclInfo> defaultAclList;\n-\n-  OmOzoneAclMap() {\n-    accessAclMap = new ArrayList<>();\n-    defaultAclList = new ArrayList<>();\n-    for (OzoneAclType aclType : OzoneAclType.values()) {\n-      accessAclMap.add(aclType.ordinal(), new HashMap<>());\n-    }\n-  }\n-\n-  OmOzoneAclMap(List<OzoneAclInfo> defaultAclList,\n-      ArrayList<Map<String, BitSet>> accessAclMap) {\n-    this.defaultAclList = defaultAclList;\n-    this.accessAclMap = accessAclMap;\n-  }\n-\n-  private Map<String, BitSet> getAccessAclMap(OzoneAclType type) {\n-    return accessAclMap.get(type.ordinal());\n-  }\n-\n-  // For a given acl type and user, get the stored acl\n-  private BitSet getAcl(OzoneAclType type, String user) {\n-    return getAccessAclMap(type).get(user);\n-  }\n-\n-  public List<OzoneAcl> getAcl() {\n-    List<OzoneAcl> acls = new ArrayList<>();\n-\n-    acls.addAll(getAccessAcls());\n-    acls.addAll(defaultAclList.stream().map(a ->\n-        OzoneAcl.fromProtobuf(a)).collect(Collectors.toList()));\n-    return acls;\n-  }\n-\n-  private Collection<? extends OzoneAcl> getAccessAcls() {\n-    List<OzoneAcl> acls = new ArrayList<>();\n-    for (OzoneAclType type : OzoneAclType.values()) {\n-      accessAclMap.get(type.ordinal()).entrySet().stream().\n-          forEach(entry -> acls.add(new OzoneAcl(ACLIdentityType.\n-              valueOf(type.name()), entry.getKey(), entry.getValue(),\n-              OzoneAcl.AclScope.ACCESS)));\n-    }\n-    return acls;\n-  }\n-\n-  // Add a new acl to the map\n-  public void addAcl(OzoneAcl acl) throws OMException {\n-    Objects.requireNonNull(acl, \"Acl should not be null.\");\n-    OzoneAclType aclType = OzoneAclType.valueOf(acl.getType().name());\n-    if (acl.getAclScope().equals(OzoneAcl.AclScope.DEFAULT)) {\n-      addDefaultAcl(acl);\n-      return;\n-    }\n-\n-    if (!getAccessAclMap(aclType).containsKey(acl.getName())) {\n-      getAccessAclMap(aclType).put(acl.getName(), acl.getAclBitSet());\n-    } else {\n-      BitSet curBitSet = getAccessAclMap(aclType).get(acl.getName());\n-      BitSet bitSet = checkAndGet(acl, curBitSet);\n-      getAccessAclMap(aclType).replace(acl.getName(), bitSet);\n-    }\n-  }\n-\n-  private void addDefaultAcl(OzoneAcl acl) throws OMException {\n-    OzoneAclInfo ozoneAclInfo = OzoneAcl.toProtobuf(acl);\n-    if (defaultAclList.contains(ozoneAclInfo)) {\n-      aclExistsError(acl);\n-    } else {\n-      for (int i = 0; i < defaultAclList.size(); i++) {\n-        OzoneAclInfo old = defaultAclList.get(i);\n-        if (old.getType() == ozoneAclInfo.getType() && old.getName().equals(\n-                ozoneAclInfo.getName())) {\n-          BitSet curBitSet = BitSet.valueOf(old.getRights().toByteArray());\n-          BitSet bitSet = checkAndGet(acl, curBitSet);\n-          ozoneAclInfo = OzoneAclInfo.newBuilder(ozoneAclInfo).setRights(\n-                  ByteString.copyFrom(bitSet.toByteArray())).build();\n-          defaultAclList.remove(i);\n-          defaultAclList.add(ozoneAclInfo);\n-          return;\n-        }\n-      }\n-    }\n-    defaultAclList.add(ozoneAclInfo);\n-  }\n-\n-  private void aclExistsError(OzoneAcl acl) throws OMException {\n-    // throw exception if acl is already added.\n-    throw new OMException(\"Acl \" + acl + \" already exist.\", INVALID_REQUEST);\n-  }\n-\n-  private BitSet checkAndGet(OzoneAcl acl, BitSet curBitSet)\n-          throws OMException {\n-    // Check if we are adding new rights to existing acl.\n-    BitSet temp = (BitSet) acl.getAclBitSet().clone();\n-    BitSet curRights = (BitSet) curBitSet.clone();\n-    temp.or(curRights);\n-    if (temp.equals(curRights)) {\n-      aclExistsError(acl);\n-    }\n-    return temp;\n-  }\n-\n-  // Add a new acl to the map\n-  public void setAcls(List<OzoneAcl> acls) throws OMException {\n-    Objects.requireNonNull(acls, \"Acls should not be null.\");\n-    // Remove all Acls.\n-    for (OzoneAclType type : OzoneAclType.values()) {\n-      accessAclMap.get(type.ordinal()).clear();\n-    }\n-    // Add acls.\n-    for (OzoneAcl acl : acls) {\n-      addAcl(acl);\n-    }\n-  }\n-\n-  // Add a new acl to the map\n-  public void removeAcl(OzoneAcl acl) throws OMException {\n-    Objects.requireNonNull(acl, \"Acl should not be null.\");\n-    if (acl.getAclScope().equals(OzoneAcl.AclScope.DEFAULT)) {\n-      defaultAclList.remove(OzoneAcl.toProtobuf(acl));\n-      return;\n-    }\n-\n-    OzoneAclType aclType = OzoneAclType.valueOf(acl.getType().name());\n-    if (getAccessAclMap(aclType).containsKey(acl.getName())) {\n-      BitSet aclRights = getAccessAclMap(aclType).get(acl.getName());\n-      BitSet bits = (BitSet) acl.getAclBitSet().clone();\n-      bits.and(aclRights);\n-\n-      if (bits.equals(ZERO_BITSET)) {\n-        // throw exception if acl doesn't exist.\n-        throw new OMException(\"Acl [\" + acl + \"] doesn't exist.\",\n-            INVALID_REQUEST);\n-      }\n-\n-      acl.getAclBitSet().and(aclRights);\n-      aclRights.xor(acl.getAclBitSet());\n-\n-      // Remove the acl as all rights are already set to 0.\n-      if (aclRights.equals(ZERO_BITSET)) {\n-        getAccessAclMap(aclType).remove(acl.getName());\n-      }\n-    } else {\n-      // throw exception if acl doesn't exist.\n-      throw new OMException(\"Acl [\" + acl + \"] doesn't exist.\",\n-          INVALID_REQUEST);\n-    }\n-  }\n-\n-  // Add a new acl to the map\n-  public void addAcl(OzoneAclInfo acl) throws OMException {\n-    Objects.requireNonNull(acl, \"Acl should not be null.\");\n-    if (acl.getAclScope().equals(OzoneAclInfo.OzoneAclScope.DEFAULT)) {\n-      addDefaultAcl(OzoneAcl.fromProtobuf(acl));\n-      return;\n-    }\n-\n-    if (!getAccessAclMap(acl.getType()).containsKey(acl.getName())) {\n-      BitSet acls = BitSet.valueOf(acl.getRights().toByteArray());\n-      getAccessAclMap(acl.getType()).put(acl.getName(), acls);\n-    } else {\n-      aclExistsError(OzoneAcl.fromProtobuf(acl));\n-    }\n-  }\n-\n-  // for a given acl, check if the user has access rights\n-  public boolean hasAccess(OzoneAclInfo acl) {\n-    if (acl == null) {\n-      return false;\n-    }\n-\n-    BitSet aclBitSet = getAcl(acl.getType(), acl.getName());\n-    if (aclBitSet == null) {\n-      return false;\n-    }\n-    BitSet result = BitSet.valueOf(acl.getRights().toByteArray());\n-    result.and(aclBitSet);\n-    return (!result.equals(ZERO_BITSET) || aclBitSet.get(ALL.ordinal()))\n-        && !aclBitSet.get(NONE.ordinal());\n-  }\n-\n-  /**\n-   * For a given acl, check if the user has access rights.\n-   * Acl's are checked in followoing order:\n-   * 1. Acls for USER.\n-   * 2. Acls for GROUPS.\n-   * 3. Acls for WORLD.\n-   * 4. Acls for ANONYMOUS.\n-   * @param acl\n-   * @param ugi\n-   *\n-   * @return true if given ugi has acl set, else false.\n-   * */\n-  public boolean hasAccess(ACLType acl, UserGroupInformation ugi) {\n-    if (acl == null) {\n-      return false;\n-    }\n-    if (ugi == null) {\n-      return false;\n-    }\n-\n-    // Check acls in user acl list.\n-    return checkAccessForOzoneAclType(OzoneAclType.USER, acl, ugi)\n-        || checkAccessForOzoneAclType(OzoneAclType.GROUP, acl, ugi)\n-        || checkAccessForOzoneAclType(OzoneAclType.WORLD, acl, ugi)\n-        || checkAccessForOzoneAclType(OzoneAclType.ANONYMOUS, acl, ugi);\n-  }\n-\n-  /**\n-   * Helper function to check acl access for OzoneAclType.\n-   * */\n-  private boolean checkAccessForOzoneAclType(OzoneAclType identityType,\n-      ACLType acl, UserGroupInformation ugi) {\n-\n-    switch (identityType) {\n-    case USER:\n-      return OzoneAclUtil.checkIfAclBitIsSet(acl, getAcl(identityType,\n-          ugi.getUserName()));\n-    case GROUP:\n-      // Check access for user groups.\n-      for (String userGroup : ugi.getGroupNames()) {\n-        if (OzoneAclUtil.checkIfAclBitIsSet(acl, getAcl(identityType,\n-            userGroup))) {\n-          // Return true if any user group has required permission.\n-          return true;\n-        }\n-      }\n-      break;\n-    default:\n-      // For type WORLD and ANONYMOUS we set acl type as name.\n-      if(OzoneAclUtil.checkIfAclBitIsSet(acl, getAcl(identityType,\n-          identityType.name()))) {\n-        return true;\n-      }\n-\n-    }\n-    return false;\n-  }\n-\n-  // Convert this map to OzoneAclInfo Protobuf List\n-  public List<OzoneAclInfo> ozoneAclGetProtobuf() {\n-    List<OzoneAclInfo> aclList = new LinkedList<>();\n-    for (OzoneAclType type : OzoneAclType.values()) {\n-      for (Map.Entry<String, BitSet> entry :\n-          accessAclMap.get(type.ordinal()).entrySet()) {\n-        OzoneAclInfo.Builder builder = OzoneAclInfo.newBuilder()\n-            .setName(entry.getKey())\n-            .setType(type)\n-            .setAclScope(OzoneAclScope.ACCESS)\n-            .setRights(ByteString.copyFrom(entry.getValue().toByteArray()));\n-\n-        aclList.add(builder.build());\n-      }\n-    }\n-    aclList.addAll(defaultAclList);\n-    return aclList;\n-  }\n-\n-  // Create map from list of OzoneAclInfos\n-  public static OmOzoneAclMap ozoneAclGetFromProtobuf(\n-      List<OzoneAclInfo> aclList) throws OMException {\n-    OmOzoneAclMap aclMap = new OmOzoneAclMap();\n-    for (OzoneAclInfo acl : aclList) {\n-      aclMap.addAcl(acl);\n-    }\n-    return aclMap;\n-  }\n-\n-  public Collection<? extends OzoneAcl> getAclsByScope(OzoneAclScope scope) {\n-    if (scope.equals(OzoneAclScope.DEFAULT)) {\n-      return defaultAclList.stream().map(a ->\n-          OzoneAcl.fromProtobuf(a)).collect(Collectors.toList());\n-    } else {\n-      return getAcl();\n-    }\n-  }\n-\n-  public List<OzoneAclInfo> getDefaultAclList() {\n-    return defaultAclList;\n-  }\n-\n-  /**\n-   * Return a new copy of the object.\n-   */\n-  public OmOzoneAclMap copyObject() {\n-    ArrayList<Map<String, BitSet>> accessMap = new ArrayList<>();\n-\n-    // Initialize.\n-    for (OzoneAclType aclType : OzoneAclType.values()) {\n-      accessMap.add(aclType.ordinal(), new HashMap<>());\n-    }\n-\n-    // Add from original accessAclMap to accessMap.\n-    for (OzoneAclType aclType : OzoneAclType.values()) {\n-      final int ordinal = aclType.ordinal();\n-      accessAclMap.get(ordinal).forEach((k, v) ->\n-          accessMap.get(ordinal).put(k, (BitSet) v.clone()));\n-    }\n-\n-    // We can do shallow copy here, as OzoneAclInfo is immutable structure.\n-    ArrayList<OzoneAclInfo> defaultList = new ArrayList<>();\n-    defaultList.addAll(defaultAclList);\n-\n-    return new OmOzoneAclMap(defaultList, accessMap);\n-  }\n-}\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzcyNjQ2Nw==", "url": "https://github.com/apache/ozone/pull/1716#discussion_r547726467", "body": "currBitSet -> curBitSet", "bodyText": "currBitSet -> curBitSet", "bodyHTML": "<p dir=\"auto\">currBitSet -&gt; curBitSet</p>", "author": "ChenSammi", "createdAt": "2020-12-23T06:55:36Z", "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/helpers/OmOzoneAclMap.java", "diffHunk": "@@ -100,28 +97,58 @@ private BitSet getAcl(OzoneAclType type, String user) {\n   // Add a new acl to the map\n   public void addAcl(OzoneAcl acl) throws OMException {\n     Objects.requireNonNull(acl, \"Acl should not be null.\");\n+    OzoneAclType aclType = OzoneAclType.valueOf(acl.getType().name());\n     if (acl.getAclScope().equals(OzoneAcl.AclScope.DEFAULT)) {\n-      defaultAclList.add(OzoneAcl.toProtobuf(acl));\n+      addDefaultAcl(acl);\n       return;\n     }\n \n-    OzoneAclType aclType = OzoneAclType.valueOf(acl.getType().name());\n     if (!getAccessAclMap(aclType).containsKey(acl.getName())) {\n       getAccessAclMap(aclType).put(acl.getName(), acl.getAclBitSet());\n     } else {\n-      // Check if we are adding new rights to existing acl.\n-      BitSet temp = (BitSet) acl.getAclBitSet().clone();\n-      BitSet curRights = (BitSet) getAccessAclMap(aclType).\n-          get(acl.getName()).clone();\n-      temp.or(curRights);\n-\n-      if (temp.equals(curRights)) {\n-        // throw exception if acl is already added.\n-        throw new OMException(\"Acl \" + acl + \" already exist.\",\n-            INVALID_REQUEST);\n+      BitSet currBitSet = getAccessAclMap(aclType).get(acl.getName());\n+      BitSet bitSet = checkAndGet(acl, currBitSet);\n+      getAccessAclMap(aclType).replace(acl.getName(), bitSet);\n+    }\n+  }\n+\n+  private void addDefaultAcl(OzoneAcl acl) throws OMException {\n+    OzoneAclInfo ozoneAclInfo = OzoneAcl.toProtobuf(acl);\n+    if (defaultAclList.contains(ozoneAclInfo)) {\n+      aclExistsError(acl);\n+    } else {\n+      for (int i = 0; i < defaultAclList.size(); i++) {\n+        OzoneAclInfo old = defaultAclList.get(i);\n+        if (old.getType() == ozoneAclInfo.getType() && old.getName().equals(\n+                ozoneAclInfo.getName())) {\n+          BitSet currBitSet = BitSet.valueOf(old.getRights().toByteArray());\n+          BitSet bitSet = checkAndGet(acl, currBitSet);\n+          ozoneAclInfo = OzoneAclInfo.newBuilder(ozoneAclInfo).setRights(\n+                  ByteString.copyFrom(bitSet.toByteArray())).build();\n+          defaultAclList.remove(i);\n+          defaultAclList.add(ozoneAclInfo);\n+          return;\n+        }\n       }\n-      getAccessAclMap(aclType).replace(acl.getName(), temp);\n     }\n+    defaultAclList.add(ozoneAclInfo);\n+  }\n+\n+  private void aclExistsError(OzoneAcl acl) throws OMException {\n+    // throw exception if acl is already added.\n+    throw new OMException(\"Acl \" + acl + \" already exist.\", INVALID_REQUEST);\n+  }\n+\n+  private BitSet checkAndGet(OzoneAcl acl, BitSet currBitSet)", "originalCommit": "d0f2cfdb21a54f3ecb5e97608457f010b53e0a40", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b91c1f9973b8035fbe7c0bca6372c0d04890cc90", "changed_code": [{"header": "diff --git a/hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/helpers/OmOzoneAclMap.java b/hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/helpers/OmOzoneAclMap.java\nindex 56c699808..d9fe23aea 100644\n--- a/hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/helpers/OmOzoneAclMap.java\n+++ b/hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/helpers/OmOzoneAclMap.java\n", "chunk": "@@ -139,11 +139,11 @@ private void aclExistsError(OzoneAcl acl) throws OMException {\n     throw new OMException(\"Acl \" + acl + \" already exist.\", INVALID_REQUEST);\n   }\n \n-  private BitSet checkAndGet(OzoneAcl acl, BitSet currBitSet)\n+  private BitSet checkAndGet(OzoneAcl acl, BitSet curBitSet)\n           throws OMException {\n     // Check if we are adding new rights to existing acl.\n     BitSet temp = (BitSet) acl.getAclBitSet().clone();\n-    BitSet curRights = (BitSet) currBitSet.clone();\n+    BitSet curRights = (BitSet) curBitSet.clone();\n     temp.or(curRights);\n     if (temp.equals(curRights)) {\n       aclExistsError(acl);\n", "next_change": {"commit": "fcd016021452d14371e3335982ee0f7cb72fac5c", "changed_code": [{"header": "diff --git a/hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/helpers/OmOzoneAclMap.java b/hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/helpers/OmOzoneAclMap.java\ndeleted file mode 100644\nindex d9fe23aea..000000000\n--- a/hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/helpers/OmOzoneAclMap.java\n+++ /dev/null\n", "chunk": "@@ -1,357 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- *  with the License.  You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- */\n-\n-package org.apache.hadoop.ozone.om.helpers;\n-\n-import static org.apache.hadoop.ozone.OzoneAcl.ZERO_BITSET;\n-import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.INVALID_REQUEST;\n-import static org.apache.hadoop.ozone.security.acl.IAccessAuthorizer.ACLType.ALL;\n-import static org.apache.hadoop.ozone.security.acl.IAccessAuthorizer.ACLType.NONE;\n-\n-import com.google.protobuf.ByteString;\n-import java.util.ArrayList;\n-import java.util.BitSet;\n-import java.util.Collection;\n-import java.util.HashMap;\n-import java.util.LinkedList;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Objects;\n-import java.util.stream.Collectors;\n-import org.apache.hadoop.ozone.OzoneAcl;\n-import org.apache.hadoop.ozone.om.exceptions.OMException;\n-import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.OzoneAclInfo;\n-import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.OzoneAclInfo.OzoneAclScope;\n-import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.OzoneAclInfo.OzoneAclType;\n-import org.apache.hadoop.ozone.security.acl.IAccessAuthorizer.ACLIdentityType;\n-import org.apache.hadoop.ozone.security.acl.IAccessAuthorizer.ACLType;\n-import org.apache.hadoop.security.UserGroupInformation;\n-\n-/**\n- * This helper class keeps a map of all user and their permissions.\n- */\n-@SuppressWarnings(\"ProtocolBufferOrdinal\")\n-public class OmOzoneAclMap {\n-  // per Acl Type user:rights map\n-  private ArrayList<Map<String, BitSet>> accessAclMap;\n-  private List<OzoneAclInfo> defaultAclList;\n-\n-  OmOzoneAclMap() {\n-    accessAclMap = new ArrayList<>();\n-    defaultAclList = new ArrayList<>();\n-    for (OzoneAclType aclType : OzoneAclType.values()) {\n-      accessAclMap.add(aclType.ordinal(), new HashMap<>());\n-    }\n-  }\n-\n-  OmOzoneAclMap(List<OzoneAclInfo> defaultAclList,\n-      ArrayList<Map<String, BitSet>> accessAclMap) {\n-    this.defaultAclList = defaultAclList;\n-    this.accessAclMap = accessAclMap;\n-  }\n-\n-  private Map<String, BitSet> getAccessAclMap(OzoneAclType type) {\n-    return accessAclMap.get(type.ordinal());\n-  }\n-\n-  // For a given acl type and user, get the stored acl\n-  private BitSet getAcl(OzoneAclType type, String user) {\n-    return getAccessAclMap(type).get(user);\n-  }\n-\n-  public List<OzoneAcl> getAcl() {\n-    List<OzoneAcl> acls = new ArrayList<>();\n-\n-    acls.addAll(getAccessAcls());\n-    acls.addAll(defaultAclList.stream().map(a ->\n-        OzoneAcl.fromProtobuf(a)).collect(Collectors.toList()));\n-    return acls;\n-  }\n-\n-  private Collection<? extends OzoneAcl> getAccessAcls() {\n-    List<OzoneAcl> acls = new ArrayList<>();\n-    for (OzoneAclType type : OzoneAclType.values()) {\n-      accessAclMap.get(type.ordinal()).entrySet().stream().\n-          forEach(entry -> acls.add(new OzoneAcl(ACLIdentityType.\n-              valueOf(type.name()), entry.getKey(), entry.getValue(),\n-              OzoneAcl.AclScope.ACCESS)));\n-    }\n-    return acls;\n-  }\n-\n-  // Add a new acl to the map\n-  public void addAcl(OzoneAcl acl) throws OMException {\n-    Objects.requireNonNull(acl, \"Acl should not be null.\");\n-    OzoneAclType aclType = OzoneAclType.valueOf(acl.getType().name());\n-    if (acl.getAclScope().equals(OzoneAcl.AclScope.DEFAULT)) {\n-      addDefaultAcl(acl);\n-      return;\n-    }\n-\n-    if (!getAccessAclMap(aclType).containsKey(acl.getName())) {\n-      getAccessAclMap(aclType).put(acl.getName(), acl.getAclBitSet());\n-    } else {\n-      BitSet curBitSet = getAccessAclMap(aclType).get(acl.getName());\n-      BitSet bitSet = checkAndGet(acl, curBitSet);\n-      getAccessAclMap(aclType).replace(acl.getName(), bitSet);\n-    }\n-  }\n-\n-  private void addDefaultAcl(OzoneAcl acl) throws OMException {\n-    OzoneAclInfo ozoneAclInfo = OzoneAcl.toProtobuf(acl);\n-    if (defaultAclList.contains(ozoneAclInfo)) {\n-      aclExistsError(acl);\n-    } else {\n-      for (int i = 0; i < defaultAclList.size(); i++) {\n-        OzoneAclInfo old = defaultAclList.get(i);\n-        if (old.getType() == ozoneAclInfo.getType() && old.getName().equals(\n-                ozoneAclInfo.getName())) {\n-          BitSet curBitSet = BitSet.valueOf(old.getRights().toByteArray());\n-          BitSet bitSet = checkAndGet(acl, curBitSet);\n-          ozoneAclInfo = OzoneAclInfo.newBuilder(ozoneAclInfo).setRights(\n-                  ByteString.copyFrom(bitSet.toByteArray())).build();\n-          defaultAclList.remove(i);\n-          defaultAclList.add(ozoneAclInfo);\n-          return;\n-        }\n-      }\n-    }\n-    defaultAclList.add(ozoneAclInfo);\n-  }\n-\n-  private void aclExistsError(OzoneAcl acl) throws OMException {\n-    // throw exception if acl is already added.\n-    throw new OMException(\"Acl \" + acl + \" already exist.\", INVALID_REQUEST);\n-  }\n-\n-  private BitSet checkAndGet(OzoneAcl acl, BitSet curBitSet)\n-          throws OMException {\n-    // Check if we are adding new rights to existing acl.\n-    BitSet temp = (BitSet) acl.getAclBitSet().clone();\n-    BitSet curRights = (BitSet) curBitSet.clone();\n-    temp.or(curRights);\n-    if (temp.equals(curRights)) {\n-      aclExistsError(acl);\n-    }\n-    return temp;\n-  }\n-\n-  // Add a new acl to the map\n-  public void setAcls(List<OzoneAcl> acls) throws OMException {\n-    Objects.requireNonNull(acls, \"Acls should not be null.\");\n-    // Remove all Acls.\n-    for (OzoneAclType type : OzoneAclType.values()) {\n-      accessAclMap.get(type.ordinal()).clear();\n-    }\n-    // Add acls.\n-    for (OzoneAcl acl : acls) {\n-      addAcl(acl);\n-    }\n-  }\n-\n-  // Add a new acl to the map\n-  public void removeAcl(OzoneAcl acl) throws OMException {\n-    Objects.requireNonNull(acl, \"Acl should not be null.\");\n-    if (acl.getAclScope().equals(OzoneAcl.AclScope.DEFAULT)) {\n-      defaultAclList.remove(OzoneAcl.toProtobuf(acl));\n-      return;\n-    }\n-\n-    OzoneAclType aclType = OzoneAclType.valueOf(acl.getType().name());\n-    if (getAccessAclMap(aclType).containsKey(acl.getName())) {\n-      BitSet aclRights = getAccessAclMap(aclType).get(acl.getName());\n-      BitSet bits = (BitSet) acl.getAclBitSet().clone();\n-      bits.and(aclRights);\n-\n-      if (bits.equals(ZERO_BITSET)) {\n-        // throw exception if acl doesn't exist.\n-        throw new OMException(\"Acl [\" + acl + \"] doesn't exist.\",\n-            INVALID_REQUEST);\n-      }\n-\n-      acl.getAclBitSet().and(aclRights);\n-      aclRights.xor(acl.getAclBitSet());\n-\n-      // Remove the acl as all rights are already set to 0.\n-      if (aclRights.equals(ZERO_BITSET)) {\n-        getAccessAclMap(aclType).remove(acl.getName());\n-      }\n-    } else {\n-      // throw exception if acl doesn't exist.\n-      throw new OMException(\"Acl [\" + acl + \"] doesn't exist.\",\n-          INVALID_REQUEST);\n-    }\n-  }\n-\n-  // Add a new acl to the map\n-  public void addAcl(OzoneAclInfo acl) throws OMException {\n-    Objects.requireNonNull(acl, \"Acl should not be null.\");\n-    if (acl.getAclScope().equals(OzoneAclInfo.OzoneAclScope.DEFAULT)) {\n-      addDefaultAcl(OzoneAcl.fromProtobuf(acl));\n-      return;\n-    }\n-\n-    if (!getAccessAclMap(acl.getType()).containsKey(acl.getName())) {\n-      BitSet acls = BitSet.valueOf(acl.getRights().toByteArray());\n-      getAccessAclMap(acl.getType()).put(acl.getName(), acls);\n-    } else {\n-      aclExistsError(OzoneAcl.fromProtobuf(acl));\n-    }\n-  }\n-\n-  // for a given acl, check if the user has access rights\n-  public boolean hasAccess(OzoneAclInfo acl) {\n-    if (acl == null) {\n-      return false;\n-    }\n-\n-    BitSet aclBitSet = getAcl(acl.getType(), acl.getName());\n-    if (aclBitSet == null) {\n-      return false;\n-    }\n-    BitSet result = BitSet.valueOf(acl.getRights().toByteArray());\n-    result.and(aclBitSet);\n-    return (!result.equals(ZERO_BITSET) || aclBitSet.get(ALL.ordinal()))\n-        && !aclBitSet.get(NONE.ordinal());\n-  }\n-\n-  /**\n-   * For a given acl, check if the user has access rights.\n-   * Acl's are checked in followoing order:\n-   * 1. Acls for USER.\n-   * 2. Acls for GROUPS.\n-   * 3. Acls for WORLD.\n-   * 4. Acls for ANONYMOUS.\n-   * @param acl\n-   * @param ugi\n-   *\n-   * @return true if given ugi has acl set, else false.\n-   * */\n-  public boolean hasAccess(ACLType acl, UserGroupInformation ugi) {\n-    if (acl == null) {\n-      return false;\n-    }\n-    if (ugi == null) {\n-      return false;\n-    }\n-\n-    // Check acls in user acl list.\n-    return checkAccessForOzoneAclType(OzoneAclType.USER, acl, ugi)\n-        || checkAccessForOzoneAclType(OzoneAclType.GROUP, acl, ugi)\n-        || checkAccessForOzoneAclType(OzoneAclType.WORLD, acl, ugi)\n-        || checkAccessForOzoneAclType(OzoneAclType.ANONYMOUS, acl, ugi);\n-  }\n-\n-  /**\n-   * Helper function to check acl access for OzoneAclType.\n-   * */\n-  private boolean checkAccessForOzoneAclType(OzoneAclType identityType,\n-      ACLType acl, UserGroupInformation ugi) {\n-\n-    switch (identityType) {\n-    case USER:\n-      return OzoneAclUtil.checkIfAclBitIsSet(acl, getAcl(identityType,\n-          ugi.getUserName()));\n-    case GROUP:\n-      // Check access for user groups.\n-      for (String userGroup : ugi.getGroupNames()) {\n-        if (OzoneAclUtil.checkIfAclBitIsSet(acl, getAcl(identityType,\n-            userGroup))) {\n-          // Return true if any user group has required permission.\n-          return true;\n-        }\n-      }\n-      break;\n-    default:\n-      // For type WORLD and ANONYMOUS we set acl type as name.\n-      if(OzoneAclUtil.checkIfAclBitIsSet(acl, getAcl(identityType,\n-          identityType.name()))) {\n-        return true;\n-      }\n-\n-    }\n-    return false;\n-  }\n-\n-  // Convert this map to OzoneAclInfo Protobuf List\n-  public List<OzoneAclInfo> ozoneAclGetProtobuf() {\n-    List<OzoneAclInfo> aclList = new LinkedList<>();\n-    for (OzoneAclType type : OzoneAclType.values()) {\n-      for (Map.Entry<String, BitSet> entry :\n-          accessAclMap.get(type.ordinal()).entrySet()) {\n-        OzoneAclInfo.Builder builder = OzoneAclInfo.newBuilder()\n-            .setName(entry.getKey())\n-            .setType(type)\n-            .setAclScope(OzoneAclScope.ACCESS)\n-            .setRights(ByteString.copyFrom(entry.getValue().toByteArray()));\n-\n-        aclList.add(builder.build());\n-      }\n-    }\n-    aclList.addAll(defaultAclList);\n-    return aclList;\n-  }\n-\n-  // Create map from list of OzoneAclInfos\n-  public static OmOzoneAclMap ozoneAclGetFromProtobuf(\n-      List<OzoneAclInfo> aclList) throws OMException {\n-    OmOzoneAclMap aclMap = new OmOzoneAclMap();\n-    for (OzoneAclInfo acl : aclList) {\n-      aclMap.addAcl(acl);\n-    }\n-    return aclMap;\n-  }\n-\n-  public Collection<? extends OzoneAcl> getAclsByScope(OzoneAclScope scope) {\n-    if (scope.equals(OzoneAclScope.DEFAULT)) {\n-      return defaultAclList.stream().map(a ->\n-          OzoneAcl.fromProtobuf(a)).collect(Collectors.toList());\n-    } else {\n-      return getAcl();\n-    }\n-  }\n-\n-  public List<OzoneAclInfo> getDefaultAclList() {\n-    return defaultAclList;\n-  }\n-\n-  /**\n-   * Return a new copy of the object.\n-   */\n-  public OmOzoneAclMap copyObject() {\n-    ArrayList<Map<String, BitSet>> accessMap = new ArrayList<>();\n-\n-    // Initialize.\n-    for (OzoneAclType aclType : OzoneAclType.values()) {\n-      accessMap.add(aclType.ordinal(), new HashMap<>());\n-    }\n-\n-    // Add from original accessAclMap to accessMap.\n-    for (OzoneAclType aclType : OzoneAclType.values()) {\n-      final int ordinal = aclType.ordinal();\n-      accessAclMap.get(ordinal).forEach((k, v) ->\n-          accessMap.get(ordinal).put(k, (BitSet) v.clone()));\n-    }\n-\n-    // We can do shallow copy here, as OzoneAclInfo is immutable structure.\n-    ArrayList<OzoneAclInfo> defaultList = new ArrayList<>();\n-    defaultList.addAll(defaultAclList);\n-\n-    return new OmOzoneAclMap(defaultList, accessMap);\n-  }\n-}\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzczMzM0Nw==", "url": "https://github.com/apache/ozone/pull/1716#discussion_r547733347", "body": "Could you replace other same expection codes in this class using this aclExistsError function? ", "bodyText": "Could you replace other same expection codes in this class using this aclExistsError function?", "bodyHTML": "<p dir=\"auto\">Could you replace other same expection codes in this class using this aclExistsError function?</p>", "author": "ChenSammi", "createdAt": "2020-12-23T07:04:09Z", "path": "hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/helpers/OmOzoneAclMap.java", "diffHunk": "@@ -100,28 +97,58 @@ private BitSet getAcl(OzoneAclType type, String user) {\n   // Add a new acl to the map\n   public void addAcl(OzoneAcl acl) throws OMException {\n     Objects.requireNonNull(acl, \"Acl should not be null.\");\n+    OzoneAclType aclType = OzoneAclType.valueOf(acl.getType().name());\n     if (acl.getAclScope().equals(OzoneAcl.AclScope.DEFAULT)) {\n-      defaultAclList.add(OzoneAcl.toProtobuf(acl));\n+      addDefaultAcl(acl);\n       return;\n     }\n \n-    OzoneAclType aclType = OzoneAclType.valueOf(acl.getType().name());\n     if (!getAccessAclMap(aclType).containsKey(acl.getName())) {\n       getAccessAclMap(aclType).put(acl.getName(), acl.getAclBitSet());\n     } else {\n-      // Check if we are adding new rights to existing acl.\n-      BitSet temp = (BitSet) acl.getAclBitSet().clone();\n-      BitSet curRights = (BitSet) getAccessAclMap(aclType).\n-          get(acl.getName()).clone();\n-      temp.or(curRights);\n-\n-      if (temp.equals(curRights)) {\n-        // throw exception if acl is already added.\n-        throw new OMException(\"Acl \" + acl + \" already exist.\",\n-            INVALID_REQUEST);\n+      BitSet currBitSet = getAccessAclMap(aclType).get(acl.getName());\n+      BitSet bitSet = checkAndGet(acl, currBitSet);\n+      getAccessAclMap(aclType).replace(acl.getName(), bitSet);\n+    }\n+  }\n+\n+  private void addDefaultAcl(OzoneAcl acl) throws OMException {\n+    OzoneAclInfo ozoneAclInfo = OzoneAcl.toProtobuf(acl);\n+    if (defaultAclList.contains(ozoneAclInfo)) {\n+      aclExistsError(acl);\n+    } else {\n+      for (int i = 0; i < defaultAclList.size(); i++) {\n+        OzoneAclInfo old = defaultAclList.get(i);\n+        if (old.getType() == ozoneAclInfo.getType() && old.getName().equals(\n+                ozoneAclInfo.getName())) {\n+          BitSet currBitSet = BitSet.valueOf(old.getRights().toByteArray());\n+          BitSet bitSet = checkAndGet(acl, currBitSet);\n+          ozoneAclInfo = OzoneAclInfo.newBuilder(ozoneAclInfo).setRights(\n+                  ByteString.copyFrom(bitSet.toByteArray())).build();\n+          defaultAclList.remove(i);\n+          defaultAclList.add(ozoneAclInfo);\n+          return;\n+        }\n       }\n-      getAccessAclMap(aclType).replace(acl.getName(), temp);\n     }\n+    defaultAclList.add(ozoneAclInfo);\n+  }\n+\n+  private void aclExistsError(OzoneAcl acl) throws OMException {", "originalCommit": "d0f2cfdb21a54f3ecb5e97608457f010b53e0a40", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "b91c1f9973b8035fbe7c0bca6372c0d04890cc90", "changed_code": [{"header": "diff --git a/hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/helpers/OmOzoneAclMap.java b/hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/helpers/OmOzoneAclMap.java\nindex 56c699808..d9fe23aea 100644\n--- a/hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/helpers/OmOzoneAclMap.java\n+++ b/hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/helpers/OmOzoneAclMap.java\n", "chunk": "@@ -139,11 +139,11 @@ private void aclExistsError(OzoneAcl acl) throws OMException {\n     throw new OMException(\"Acl \" + acl + \" already exist.\", INVALID_REQUEST);\n   }\n \n-  private BitSet checkAndGet(OzoneAcl acl, BitSet currBitSet)\n+  private BitSet checkAndGet(OzoneAcl acl, BitSet curBitSet)\n           throws OMException {\n     // Check if we are adding new rights to existing acl.\n     BitSet temp = (BitSet) acl.getAclBitSet().clone();\n-    BitSet curRights = (BitSet) currBitSet.clone();\n+    BitSet curRights = (BitSet) curBitSet.clone();\n     temp.or(curRights);\n     if (temp.equals(curRights)) {\n       aclExistsError(acl);\n", "next_change": {"commit": "fcd016021452d14371e3335982ee0f7cb72fac5c", "changed_code": [{"header": "diff --git a/hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/helpers/OmOzoneAclMap.java b/hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/helpers/OmOzoneAclMap.java\ndeleted file mode 100644\nindex d9fe23aea..000000000\n--- a/hadoop-ozone/common/src/main/java/org/apache/hadoop/ozone/om/helpers/OmOzoneAclMap.java\n+++ /dev/null\n", "chunk": "@@ -1,357 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- *  with the License.  You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- */\n-\n-package org.apache.hadoop.ozone.om.helpers;\n-\n-import static org.apache.hadoop.ozone.OzoneAcl.ZERO_BITSET;\n-import static org.apache.hadoop.ozone.om.exceptions.OMException.ResultCodes.INVALID_REQUEST;\n-import static org.apache.hadoop.ozone.security.acl.IAccessAuthorizer.ACLType.ALL;\n-import static org.apache.hadoop.ozone.security.acl.IAccessAuthorizer.ACLType.NONE;\n-\n-import com.google.protobuf.ByteString;\n-import java.util.ArrayList;\n-import java.util.BitSet;\n-import java.util.Collection;\n-import java.util.HashMap;\n-import java.util.LinkedList;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Objects;\n-import java.util.stream.Collectors;\n-import org.apache.hadoop.ozone.OzoneAcl;\n-import org.apache.hadoop.ozone.om.exceptions.OMException;\n-import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.OzoneAclInfo;\n-import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.OzoneAclInfo.OzoneAclScope;\n-import org.apache.hadoop.ozone.protocol.proto.OzoneManagerProtocolProtos.OzoneAclInfo.OzoneAclType;\n-import org.apache.hadoop.ozone.security.acl.IAccessAuthorizer.ACLIdentityType;\n-import org.apache.hadoop.ozone.security.acl.IAccessAuthorizer.ACLType;\n-import org.apache.hadoop.security.UserGroupInformation;\n-\n-/**\n- * This helper class keeps a map of all user and their permissions.\n- */\n-@SuppressWarnings(\"ProtocolBufferOrdinal\")\n-public class OmOzoneAclMap {\n-  // per Acl Type user:rights map\n-  private ArrayList<Map<String, BitSet>> accessAclMap;\n-  private List<OzoneAclInfo> defaultAclList;\n-\n-  OmOzoneAclMap() {\n-    accessAclMap = new ArrayList<>();\n-    defaultAclList = new ArrayList<>();\n-    for (OzoneAclType aclType : OzoneAclType.values()) {\n-      accessAclMap.add(aclType.ordinal(), new HashMap<>());\n-    }\n-  }\n-\n-  OmOzoneAclMap(List<OzoneAclInfo> defaultAclList,\n-      ArrayList<Map<String, BitSet>> accessAclMap) {\n-    this.defaultAclList = defaultAclList;\n-    this.accessAclMap = accessAclMap;\n-  }\n-\n-  private Map<String, BitSet> getAccessAclMap(OzoneAclType type) {\n-    return accessAclMap.get(type.ordinal());\n-  }\n-\n-  // For a given acl type and user, get the stored acl\n-  private BitSet getAcl(OzoneAclType type, String user) {\n-    return getAccessAclMap(type).get(user);\n-  }\n-\n-  public List<OzoneAcl> getAcl() {\n-    List<OzoneAcl> acls = new ArrayList<>();\n-\n-    acls.addAll(getAccessAcls());\n-    acls.addAll(defaultAclList.stream().map(a ->\n-        OzoneAcl.fromProtobuf(a)).collect(Collectors.toList()));\n-    return acls;\n-  }\n-\n-  private Collection<? extends OzoneAcl> getAccessAcls() {\n-    List<OzoneAcl> acls = new ArrayList<>();\n-    for (OzoneAclType type : OzoneAclType.values()) {\n-      accessAclMap.get(type.ordinal()).entrySet().stream().\n-          forEach(entry -> acls.add(new OzoneAcl(ACLIdentityType.\n-              valueOf(type.name()), entry.getKey(), entry.getValue(),\n-              OzoneAcl.AclScope.ACCESS)));\n-    }\n-    return acls;\n-  }\n-\n-  // Add a new acl to the map\n-  public void addAcl(OzoneAcl acl) throws OMException {\n-    Objects.requireNonNull(acl, \"Acl should not be null.\");\n-    OzoneAclType aclType = OzoneAclType.valueOf(acl.getType().name());\n-    if (acl.getAclScope().equals(OzoneAcl.AclScope.DEFAULT)) {\n-      addDefaultAcl(acl);\n-      return;\n-    }\n-\n-    if (!getAccessAclMap(aclType).containsKey(acl.getName())) {\n-      getAccessAclMap(aclType).put(acl.getName(), acl.getAclBitSet());\n-    } else {\n-      BitSet curBitSet = getAccessAclMap(aclType).get(acl.getName());\n-      BitSet bitSet = checkAndGet(acl, curBitSet);\n-      getAccessAclMap(aclType).replace(acl.getName(), bitSet);\n-    }\n-  }\n-\n-  private void addDefaultAcl(OzoneAcl acl) throws OMException {\n-    OzoneAclInfo ozoneAclInfo = OzoneAcl.toProtobuf(acl);\n-    if (defaultAclList.contains(ozoneAclInfo)) {\n-      aclExistsError(acl);\n-    } else {\n-      for (int i = 0; i < defaultAclList.size(); i++) {\n-        OzoneAclInfo old = defaultAclList.get(i);\n-        if (old.getType() == ozoneAclInfo.getType() && old.getName().equals(\n-                ozoneAclInfo.getName())) {\n-          BitSet curBitSet = BitSet.valueOf(old.getRights().toByteArray());\n-          BitSet bitSet = checkAndGet(acl, curBitSet);\n-          ozoneAclInfo = OzoneAclInfo.newBuilder(ozoneAclInfo).setRights(\n-                  ByteString.copyFrom(bitSet.toByteArray())).build();\n-          defaultAclList.remove(i);\n-          defaultAclList.add(ozoneAclInfo);\n-          return;\n-        }\n-      }\n-    }\n-    defaultAclList.add(ozoneAclInfo);\n-  }\n-\n-  private void aclExistsError(OzoneAcl acl) throws OMException {\n-    // throw exception if acl is already added.\n-    throw new OMException(\"Acl \" + acl + \" already exist.\", INVALID_REQUEST);\n-  }\n-\n-  private BitSet checkAndGet(OzoneAcl acl, BitSet curBitSet)\n-          throws OMException {\n-    // Check if we are adding new rights to existing acl.\n-    BitSet temp = (BitSet) acl.getAclBitSet().clone();\n-    BitSet curRights = (BitSet) curBitSet.clone();\n-    temp.or(curRights);\n-    if (temp.equals(curRights)) {\n-      aclExistsError(acl);\n-    }\n-    return temp;\n-  }\n-\n-  // Add a new acl to the map\n-  public void setAcls(List<OzoneAcl> acls) throws OMException {\n-    Objects.requireNonNull(acls, \"Acls should not be null.\");\n-    // Remove all Acls.\n-    for (OzoneAclType type : OzoneAclType.values()) {\n-      accessAclMap.get(type.ordinal()).clear();\n-    }\n-    // Add acls.\n-    for (OzoneAcl acl : acls) {\n-      addAcl(acl);\n-    }\n-  }\n-\n-  // Add a new acl to the map\n-  public void removeAcl(OzoneAcl acl) throws OMException {\n-    Objects.requireNonNull(acl, \"Acl should not be null.\");\n-    if (acl.getAclScope().equals(OzoneAcl.AclScope.DEFAULT)) {\n-      defaultAclList.remove(OzoneAcl.toProtobuf(acl));\n-      return;\n-    }\n-\n-    OzoneAclType aclType = OzoneAclType.valueOf(acl.getType().name());\n-    if (getAccessAclMap(aclType).containsKey(acl.getName())) {\n-      BitSet aclRights = getAccessAclMap(aclType).get(acl.getName());\n-      BitSet bits = (BitSet) acl.getAclBitSet().clone();\n-      bits.and(aclRights);\n-\n-      if (bits.equals(ZERO_BITSET)) {\n-        // throw exception if acl doesn't exist.\n-        throw new OMException(\"Acl [\" + acl + \"] doesn't exist.\",\n-            INVALID_REQUEST);\n-      }\n-\n-      acl.getAclBitSet().and(aclRights);\n-      aclRights.xor(acl.getAclBitSet());\n-\n-      // Remove the acl as all rights are already set to 0.\n-      if (aclRights.equals(ZERO_BITSET)) {\n-        getAccessAclMap(aclType).remove(acl.getName());\n-      }\n-    } else {\n-      // throw exception if acl doesn't exist.\n-      throw new OMException(\"Acl [\" + acl + \"] doesn't exist.\",\n-          INVALID_REQUEST);\n-    }\n-  }\n-\n-  // Add a new acl to the map\n-  public void addAcl(OzoneAclInfo acl) throws OMException {\n-    Objects.requireNonNull(acl, \"Acl should not be null.\");\n-    if (acl.getAclScope().equals(OzoneAclInfo.OzoneAclScope.DEFAULT)) {\n-      addDefaultAcl(OzoneAcl.fromProtobuf(acl));\n-      return;\n-    }\n-\n-    if (!getAccessAclMap(acl.getType()).containsKey(acl.getName())) {\n-      BitSet acls = BitSet.valueOf(acl.getRights().toByteArray());\n-      getAccessAclMap(acl.getType()).put(acl.getName(), acls);\n-    } else {\n-      aclExistsError(OzoneAcl.fromProtobuf(acl));\n-    }\n-  }\n-\n-  // for a given acl, check if the user has access rights\n-  public boolean hasAccess(OzoneAclInfo acl) {\n-    if (acl == null) {\n-      return false;\n-    }\n-\n-    BitSet aclBitSet = getAcl(acl.getType(), acl.getName());\n-    if (aclBitSet == null) {\n-      return false;\n-    }\n-    BitSet result = BitSet.valueOf(acl.getRights().toByteArray());\n-    result.and(aclBitSet);\n-    return (!result.equals(ZERO_BITSET) || aclBitSet.get(ALL.ordinal()))\n-        && !aclBitSet.get(NONE.ordinal());\n-  }\n-\n-  /**\n-   * For a given acl, check if the user has access rights.\n-   * Acl's are checked in followoing order:\n-   * 1. Acls for USER.\n-   * 2. Acls for GROUPS.\n-   * 3. Acls for WORLD.\n-   * 4. Acls for ANONYMOUS.\n-   * @param acl\n-   * @param ugi\n-   *\n-   * @return true if given ugi has acl set, else false.\n-   * */\n-  public boolean hasAccess(ACLType acl, UserGroupInformation ugi) {\n-    if (acl == null) {\n-      return false;\n-    }\n-    if (ugi == null) {\n-      return false;\n-    }\n-\n-    // Check acls in user acl list.\n-    return checkAccessForOzoneAclType(OzoneAclType.USER, acl, ugi)\n-        || checkAccessForOzoneAclType(OzoneAclType.GROUP, acl, ugi)\n-        || checkAccessForOzoneAclType(OzoneAclType.WORLD, acl, ugi)\n-        || checkAccessForOzoneAclType(OzoneAclType.ANONYMOUS, acl, ugi);\n-  }\n-\n-  /**\n-   * Helper function to check acl access for OzoneAclType.\n-   * */\n-  private boolean checkAccessForOzoneAclType(OzoneAclType identityType,\n-      ACLType acl, UserGroupInformation ugi) {\n-\n-    switch (identityType) {\n-    case USER:\n-      return OzoneAclUtil.checkIfAclBitIsSet(acl, getAcl(identityType,\n-          ugi.getUserName()));\n-    case GROUP:\n-      // Check access for user groups.\n-      for (String userGroup : ugi.getGroupNames()) {\n-        if (OzoneAclUtil.checkIfAclBitIsSet(acl, getAcl(identityType,\n-            userGroup))) {\n-          // Return true if any user group has required permission.\n-          return true;\n-        }\n-      }\n-      break;\n-    default:\n-      // For type WORLD and ANONYMOUS we set acl type as name.\n-      if(OzoneAclUtil.checkIfAclBitIsSet(acl, getAcl(identityType,\n-          identityType.name()))) {\n-        return true;\n-      }\n-\n-    }\n-    return false;\n-  }\n-\n-  // Convert this map to OzoneAclInfo Protobuf List\n-  public List<OzoneAclInfo> ozoneAclGetProtobuf() {\n-    List<OzoneAclInfo> aclList = new LinkedList<>();\n-    for (OzoneAclType type : OzoneAclType.values()) {\n-      for (Map.Entry<String, BitSet> entry :\n-          accessAclMap.get(type.ordinal()).entrySet()) {\n-        OzoneAclInfo.Builder builder = OzoneAclInfo.newBuilder()\n-            .setName(entry.getKey())\n-            .setType(type)\n-            .setAclScope(OzoneAclScope.ACCESS)\n-            .setRights(ByteString.copyFrom(entry.getValue().toByteArray()));\n-\n-        aclList.add(builder.build());\n-      }\n-    }\n-    aclList.addAll(defaultAclList);\n-    return aclList;\n-  }\n-\n-  // Create map from list of OzoneAclInfos\n-  public static OmOzoneAclMap ozoneAclGetFromProtobuf(\n-      List<OzoneAclInfo> aclList) throws OMException {\n-    OmOzoneAclMap aclMap = new OmOzoneAclMap();\n-    for (OzoneAclInfo acl : aclList) {\n-      aclMap.addAcl(acl);\n-    }\n-    return aclMap;\n-  }\n-\n-  public Collection<? extends OzoneAcl> getAclsByScope(OzoneAclScope scope) {\n-    if (scope.equals(OzoneAclScope.DEFAULT)) {\n-      return defaultAclList.stream().map(a ->\n-          OzoneAcl.fromProtobuf(a)).collect(Collectors.toList());\n-    } else {\n-      return getAcl();\n-    }\n-  }\n-\n-  public List<OzoneAclInfo> getDefaultAclList() {\n-    return defaultAclList;\n-  }\n-\n-  /**\n-   * Return a new copy of the object.\n-   */\n-  public OmOzoneAclMap copyObject() {\n-    ArrayList<Map<String, BitSet>> accessMap = new ArrayList<>();\n-\n-    // Initialize.\n-    for (OzoneAclType aclType : OzoneAclType.values()) {\n-      accessMap.add(aclType.ordinal(), new HashMap<>());\n-    }\n-\n-    // Add from original accessAclMap to accessMap.\n-    for (OzoneAclType aclType : OzoneAclType.values()) {\n-      final int ordinal = aclType.ordinal();\n-      accessAclMap.get(ordinal).forEach((k, v) ->\n-          accessMap.get(ordinal).put(k, (BitSet) v.clone()));\n-    }\n-\n-    // We can do shallow copy here, as OzoneAclInfo is immutable structure.\n-    ArrayList<OzoneAclInfo> defaultList = new ArrayList<>();\n-    defaultList.addAll(defaultAclList);\n-\n-    return new OmOzoneAclMap(defaultList, accessMap);\n-  }\n-}\n", "next_change": null}]}}]}}, {"oid": "52a975bb90a6362dcb3e0da3248eddbe29d5973a", "url": "https://github.com/apache/ozone/commit/52a975bb90a6362dcb3e0da3248eddbe29d5973a", "message": "HDDS-4606. Detect and handle duplicate ACLs when set default ACLs", "committedDate": "2020-12-23T07:32:14Z", "type": "commit"}, {"oid": "5e37dd5e609bb513b969adbda62f564c1563a5c8", "url": "https://github.com/apache/ozone/commit/5e37dd5e609bb513b969adbda62f564c1563a5c8", "message": "Merge branch 'master' of https://github.com/apache/ozone into HDDS-4606", "committedDate": "2020-12-23T07:32:45Z", "type": "commit"}, {"oid": "5e37dd5e609bb513b969adbda62f564c1563a5c8", "url": "https://github.com/apache/ozone/commit/5e37dd5e609bb513b969adbda62f564c1563a5c8", "message": "Merge branch 'master' of https://github.com/apache/ozone into HDDS-4606", "committedDate": "2020-12-23T07:32:45Z", "type": "forcePushed"}]}