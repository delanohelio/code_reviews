{"pr_number": 1455, "pr_title": "[#1089] Scan both methods and fields for IDs and Aggregate Member annotations", "pr_author": "sandjelkovic", "pr_createdAt": "2020-06-22T10:07:10Z", "pr_url": "https://github.com/AxonFramework/AxonFramework/pull/1455", "merge_commit": "6ad2c3106254d25bb2684f46758596d9c7ca2b86", "timeline": [{"oid": "7999e32cd82c513afcf95a2159e6c1d5a729b0ec", "url": "https://github.com/AxonFramework/AxonFramework/commit/7999e32cd82c513afcf95a2159e6c1d5a729b0ec", "message": "Add support to use and annotate methods for IDs and Aggregate versions", "committedDate": "2020-05-14T16:00:17Z", "type": "commit"}, {"oid": "a2661d85e862c549a6e2db0a6e0d4a11eb58b35d", "url": "https://github.com/AxonFramework/AxonFramework/commit/a2661d85e862c549a6e2db0a6e0d4a11eb58b35d", "message": "Add support for AggregateMember annotation on methods", "committedDate": "2020-06-01T10:24:19Z", "type": "commit"}, {"oid": "9fcc8b508bbf5edb7d166017a2f842fc2cad07d1", "url": "https://github.com/AxonFramework/AxonFramework/commit/9fcc8b508bbf5edb7d166017a2f842fc2cad07d1", "message": "Merge branch 'master' into feature/1089-annotated-methods-and-fields", "committedDate": "2020-06-01T10:25:08Z", "type": "commit"}, {"oid": "67ed965f79f373e76a4e3cdc4718b0f2cf7c0c1f", "url": "https://github.com/AxonFramework/AxonFramework/commit/67ed965f79f373e76a4e3cdc4718b0f2cf7c0c1f", "message": "Add tests for AggregateMember annotation on methods and verify event forwarding", "committedDate": "2020-06-02T13:40:20Z", "type": "commit"}, {"oid": "1c399c9d2ecbb81b926bb42a7bbad4e1d8d05172", "url": "https://github.com/AxonFramework/AxonFramework/commit/1c399c9d2ecbb81b926bb42a7bbad4e1d8d05172", "message": "Merge branch 'master' into feature/1089-annotated-methods-and-fields", "committedDate": "2020-06-03T09:16:37Z", "type": "commit"}, {"oid": "0375dd02a4d6978469e46fd48f9cbdb0b270f487", "url": "https://github.com/AxonFramework/AxonFramework/commit/0375dd02a4d6978469e46fd48f9cbdb0b270f487", "message": "Add missing JavaDoc", "committedDate": "2020-06-03T12:18:42Z", "type": "commit"}, {"oid": "9a832bbbb5dc30bfaa4737739d178e8125bce115", "url": "https://github.com/AxonFramework/AxonFramework/commit/9a832bbbb5dc30bfaa4737739d178e8125bce115", "message": "Refactor and add more tests for ReflectionUtils", "committedDate": "2020-06-18T13:01:05Z", "type": "commit"}, {"oid": "bad5fb7ce8a6c5adfced70579c58584f82cf0e34", "url": "https://github.com/AxonFramework/AxonFramework/commit/bad5fb7ce8a6c5adfced70579c58584f82cf0e34", "message": "Move Distinct list to it's own Utils class", "committedDate": "2020-06-19T11:41:06Z", "type": "commit"}, {"oid": "612736878688b7c8e0732ca07517e71df4909851", "url": "https://github.com/AxonFramework/AxonFramework/commit/612736878688b7c8e0732ca07517e71df4909851", "message": "Merge branch 'master' into feature/1089-annotated-methods-and-fields", "committedDate": "2020-06-19T12:29:21Z", "type": "commit"}, {"oid": "2a0574ba7468de01783049ee57819e7ba7813e72", "url": "https://github.com/AxonFramework/AxonFramework/commit/2a0574ba7468de01783049ee57819e7ba7813e72", "message": "Adjust Javadoc", "committedDate": "2020-06-23T11:31:16Z", "type": "commit"}, {"oid": "786c2af08f24edebf338ec9bd814435907507b85", "url": "https://github.com/AxonFramework/AxonFramework/commit/786c2af08f24edebf338ec9bd814435907507b85", "message": "Delegate deprecated Field only method to new universal implementation", "committedDate": "2020-06-23T11:41:46Z", "type": "commit"}, {"oid": "ee3b11b9e1708fdabecc2974d1f04904fb0689d5", "url": "https://github.com/AxonFramework/AxonFramework/commit/ee3b11b9e1708fdabecc2974d1f04904fb0689d5", "message": "Extract exception message to a single field", "committedDate": "2020-06-23T11:43:34Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc1MzQ1OA==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1455#discussion_r444753458", "body": "```suggestion\r\n    /** \r\n     * Returns a new list containing unique elements from the given {@code list}. Original list is not modified.\r\n     *\r\n     * @param list Original list that will not be modified\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                /** Returns a new list containing unique elements from the given {@code list}. Original list is not modified.\n          \n          \n            \n                 * @param list Original list that will not be modified\n          \n          \n            \n                /** \n          \n          \n            \n                 * Returns a new list containing unique elements from the given {@code list}. Original list is not modified.\n          \n          \n            \n                 *\n          \n          \n            \n                 * @param list Original list that will not be modified", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-c\"><span class=\"pl-c\">/*</span>* Returns a new list containing unique elements from the given {@code list}. Original list is not modified.</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">     <span class=\"pl-k\">*</span> <span class=\"pl-k\">@param</span> list <span class=\"pl-smi\">Original</span> list that will not be modified</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-c\"><span class=\"pl-c\">/**</span> </span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">     <span class=\"pl-k\">*</span> <span class=\"pl-smi\">Returns</span> a <span class=\"pl-k\">new</span> list containing unique elements from the given {<span class=\"pl-k\">@code</span> list}<span class=\"pl-c1\">.</span> <span class=\"pl-smi\">Original</span> list is not modified.</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">     <span class=\"pl-k\">*</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">     <span class=\"pl-k\">*</span> <span class=\"pl-k\">@param</span> list <span class=\"pl-smi\">Original</span> list that will not be modified</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "smcvb", "createdAt": "2020-06-24T09:07:47Z", "path": "messaging/src/main/java/org/axonframework/common/ListUtils.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package org.axonframework.common;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Utility methods for operations on lists.\n+ *\n+ * @author Stefan Andjelkovic\n+ * @since 4.4\n+ */\n+public abstract class ListUtils {\n+\n+    private ListUtils() {\n+        // prevent instantiation\n+    }\n+\n+    /** Returns a new list containing unique elements from the given {@code list}. Original list is not modified.\n+     * @param list Original list that will not be modified", "originalCommit": "ee3b11b9e1708fdabecc2974d1f04904fb0689d5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "065f517477993c92ea8c7e73fcff371009d5a97d", "changed_code": [{"header": "diff --git a/messaging/src/main/java/org/axonframework/common/ListUtils.java b/messaging/src/main/java/org/axonframework/common/ListUtils.java\nindex d3e108a35..04e5b4ef8 100644\n--- a/messaging/src/main/java/org/axonframework/common/ListUtils.java\n+++ b/messaging/src/main/java/org/axonframework/common/ListUtils.java\n", "chunk": "@@ -15,7 +15,9 @@ private ListUtils() {\n         // prevent instantiation\n     }\n \n-    /** Returns a new list containing unique elements from the given {@code list}. Original list is not modified.\n+    /** \n+     * Returns a new list containing unique elements from the given {@code list}. Original list is not modified.\n+     *\n      * @param list Original list that will not be modified\n      * @param <E> The type of elements in the list\n      * @return List with unique elements\n", "next_change": {"commit": "f89594495abfe4d65bf43bdc8bc452cb5cdd9afe", "changed_code": [{"header": "diff --git a/messaging/src/main/java/org/axonframework/common/ListUtils.java b/messaging/src/main/java/org/axonframework/common/ListUtils.java\nindex 04e5b4ef8..5e556e78e 100644\n--- a/messaging/src/main/java/org/axonframework/common/ListUtils.java\n+++ b/messaging/src/main/java/org/axonframework/common/ListUtils.java\n", "chunk": "@@ -15,11 +31,11 @@ private ListUtils() {\n         // prevent instantiation\n     }\n \n-    /** \n+    /**\n      * Returns a new list containing unique elements from the given {@code list}. Original list is not modified.\n      *\n-     * @param list Original list that will not be modified\n-     * @param <E> The type of elements in the list\n+     * @param list original list that will not be modified\n+     * @param <E>  the type of elements in the list\n      * @return List with unique elements\n      */\n     public static <E> List<E> distinct(final List<E> list) {\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "6ad2c3106254d25bb2684f46758596d9c7ca2b86", "changed_code": [{"header": "diff --git a/messaging/src/main/java/org/axonframework/common/ListUtils.java b/messaging/src/main/java/org/axonframework/common/ListUtils.java\nindex d3e108a35..5e556e78e 100644\n--- a/messaging/src/main/java/org/axonframework/common/ListUtils.java\n+++ b/messaging/src/main/java/org/axonframework/common/ListUtils.java\n", "chunk": "@@ -15,9 +31,11 @@ private ListUtils() {\n         // prevent instantiation\n     }\n \n-    /** Returns a new list containing unique elements from the given {@code list}. Original list is not modified.\n-     * @param list Original list that will not be modified\n-     * @param <E> The type of elements in the list\n+    /**\n+     * Returns a new list containing unique elements from the given {@code list}. Original list is not modified.\n+     *\n+     * @param list original list that will not be modified\n+     * @param <E>  the type of elements in the list\n      * @return List with unique elements\n      */\n     public static <E> List<E> distinct(final List<E> list) {\n", "next_change": null}]}, "commits_in_main": [{"oid": "6ad2c3106254d25bb2684f46758596d9c7ca2b86", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc1NjAwMA==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1455#discussion_r444756000", "body": "Shouldn't this line state something like `the target object the given {@code method} is invoked on`?", "bodyText": "Shouldn't this line state something like the target object the given {@code method} is invoked on?", "bodyHTML": "<p dir=\"auto\">Shouldn't this line state something like <code>the target object the given {@code method} is invoked on</code>?</p>", "author": "smcvb", "createdAt": "2020-06-24T09:12:05Z", "path": "messaging/src/main/java/org/axonframework/common/ReflectionUtils.java", "diffHunk": "@@ -325,6 +340,114 @@ public static boolean isTransient(Field field) {\n         return Optional.of((Class<?>) ((ParameterizedType) genericType).getActualTypeArguments()[genericTypeIndex]);\n     }\n \n+    /**\n+     * Resolve a generic type parameter from a member declaration\n+     *\n+     * @param member           The member to find generic parameters for\n+     * @param genericTypeIndex The index of the type\n+     * @return an optional that contains the resolved type, if found\n+     */\n+    public static Optional<Class<?>> resolveMemberGenericType(Member member, int genericTypeIndex) {\n+        final Type genericType = getMemberGenericType(member);\n+        if (!(genericType instanceof ParameterizedType)\n+                || ((ParameterizedType) genericType).getActualTypeArguments().length <= genericTypeIndex) {\n+            return Optional.empty();\n+        }\n+        return Optional.of((Class<?>) ((ParameterizedType) genericType).getActualTypeArguments()[genericTypeIndex]);\n+    }\n+\n+    /**\n+     * Invokes and returns the return value of the given {@code method} in the given {@code object}. If necessary, the method is\n+     * made accessible, assuming the security manager allows it.\n+     * @param method The method to invoke\n+     * @param object The target object to retrieve the field's value from", "originalCommit": "ee3b11b9e1708fdabecc2974d1f04904fb0689d5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "84d7f38a405232e8cbf6fcd9e14db6e512282487", "changed_code": [{"header": "diff --git a/messaging/src/main/java/org/axonframework/common/ReflectionUtils.java b/messaging/src/main/java/org/axonframework/common/ReflectionUtils.java\nindex 02ccc139f..9ce19a2d1 100644\n--- a/messaging/src/main/java/org/axonframework/common/ReflectionUtils.java\n+++ b/messaging/src/main/java/org/axonframework/common/ReflectionUtils.java\n", "chunk": "@@ -360,7 +360,7 @@ public static Optional<Class<?>> resolveMemberGenericType(Member member, int gen\n      * Invokes and returns the return value of the given {@code method} in the given {@code object}. If necessary, the method is\n      * made accessible, assuming the security manager allows it.\n      * @param method The method to invoke\n-     * @param object The target object to retrieve the field's value from\n+     * @param object the target object the given {@code method} is invoked on\n      * @return the resulting value of invocation of the {@code method} in the {@code object}\n      * @throws IllegalStateException if the method is not accessible and the security manager doesn't allow it to be\n      *                               made accessible\n", "next_change": {"commit": "f89594495abfe4d65bf43bdc8bc452cb5cdd9afe", "changed_code": [{"header": "diff --git a/messaging/src/main/java/org/axonframework/common/ReflectionUtils.java b/messaging/src/main/java/org/axonframework/common/ReflectionUtils.java\nindex 9ce19a2d1..7da788598 100644\n--- a/messaging/src/main/java/org/axonframework/common/ReflectionUtils.java\n+++ b/messaging/src/main/java/org/axonframework/common/ReflectionUtils.java\n", "chunk": "@@ -357,9 +357,10 @@ public static Optional<Class<?>> resolveMemberGenericType(Member member, int gen\n     }\n \n     /**\n-     * Invokes and returns the return value of the given {@code method} in the given {@code object}. If necessary, the method is\n-     * made accessible, assuming the security manager allows it.\n-     * @param method The method to invoke\n+     * Invokes and returns the return value of the given {@code method} in the given {@code object}. If necessary, the\n+     * method is made accessible, assuming the security manager allows it.\n+     *\n+     * @param method the method to invoke\n      * @param object the target object the given {@code method} is invoked on\n      * @return the resulting value of invocation of the {@code method} in the {@code object}\n      * @throws IllegalStateException if the method is not accessible and the security manager doesn't allow it to be\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "6ad2c3106254d25bb2684f46758596d9c7ca2b86", "changed_code": [{"header": "diff --git a/messaging/src/main/java/org/axonframework/common/ReflectionUtils.java b/messaging/src/main/java/org/axonframework/common/ReflectionUtils.java\nindex 02ccc139f..78676ae93 100644\n--- a/messaging/src/main/java/org/axonframework/common/ReflectionUtils.java\n+++ b/messaging/src/main/java/org/axonframework/common/ReflectionUtils.java\n", "chunk": "@@ -357,10 +357,11 @@ public static Optional<Class<?>> resolveMemberGenericType(Member member, int gen\n     }\n \n     /**\n-     * Invokes and returns the return value of the given {@code method} in the given {@code object}. If necessary, the method is\n-     * made accessible, assuming the security manager allows it.\n-     * @param method The method to invoke\n-     * @param object The target object to retrieve the field's value from\n+     * Invokes and returns the return value of the given {@code method} in the given {@code object}. If necessary, the\n+     * method is made accessible, assuming the security manager allows it.\n+     *\n+     * @param method the method to invoke\n+     * @param object the target object the given {@code method} is invoked on\n      * @return the resulting value of invocation of the {@code method} in the {@code object}\n      * @throws IllegalStateException if the method is not accessible and the security manager doesn't allow it to be\n      *                               made accessible\n", "next_change": null}]}, "commits_in_main": [{"oid": "6ad2c3106254d25bb2684f46758596d9c7ca2b86", "message": "Merge commit", "committedDate": null}, {"oid": "41439493baa67bc8a8fdc3c9672450c18d6e56e3", "committedDate": "2020-11-09 14:51:52 +0100", "message": "Add non-recursive option to find fields/methods"}, {"oid": "8e333cb5e92a6cdc536337b617540559f25068db", "committedDate": "2022-04-15 13:56:32 +0200", "message": "React differently to primitive objects in the EqualFieldsMatcher"}, {"oid": "3a7010d7190ec0d448666f366444a60d20f3c427", "committedDate": "2022-04-15 14:04:18 +0200", "message": "Fine tune JavaDoc"}, {"oid": "5d98ac40c9a82909719eda07fb1fbfe3cbb5bb39", "committedDate": "2022-04-28 16:28:47 +0200", "message": "Adjust usage of the EqualFieldsMatcher"}, {"oid": "d291a51fcfd3bb8259caac51526dd75e2785083e", "committedDate": "2022-04-28 19:24:00 +0200", "message": "Fine tune validation steps"}, {"oid": "a550d73c50c012da4708890f6eaf4430c8eed13b", "committedDate": "2022-05-10 09:38:11 +0200", "message": "Merge pull request #2210 from AxonFramework/enhancement/field-matcher"}, {"oid": "5125103e3dc5d497bd1f6f31dc4d8ea2f49e9f85", "committedDate": "2022-07-20 13:55:54 +0200", "message": "Fix duplicate command handler detection."}, {"oid": "f83291b8c2d963cc4fcff864ad02da757232dcc9", "committedDate": "2022-07-21 13:04:14 +0200", "message": "Apply suggestions from code review of duplicate command handler detection"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc1NzE1MA==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1455#discussion_r444757150", "body": "I am assuming this constant can be `private`. If not, it'll require some javadoc to be added.", "bodyText": "I am assuming this constant can be private. If not, it'll require some javadoc to be added.", "bodyHTML": "<p dir=\"auto\">I am assuming this constant can be <code>private</code>. If not, it'll require some javadoc to be added.</p>", "author": "smcvb", "createdAt": "2020-06-24T09:14:04Z", "path": "messaging/src/main/java/org/axonframework/common/ReflectionUtils.java", "diffHunk": "@@ -34,6 +48,7 @@\n      * A map of Primitive types to their respective wrapper types.\n      */\n     private static final Map<Type, Class<?>> primitiveWrapperTypeMap = new HashMap<>(8);\n+    public static final String UNSUPPORTED_MEMBER_TYPE_EXCEPTION_MESSAGE = \"Unsupported member type [%s]\";", "originalCommit": "ee3b11b9e1708fdabecc2974d1f04904fb0689d5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "84d7f38a405232e8cbf6fcd9e14db6e512282487", "changed_code": [{"header": "diff --git a/messaging/src/main/java/org/axonframework/common/ReflectionUtils.java b/messaging/src/main/java/org/axonframework/common/ReflectionUtils.java\nindex 02ccc139f..9ce19a2d1 100644\n--- a/messaging/src/main/java/org/axonframework/common/ReflectionUtils.java\n+++ b/messaging/src/main/java/org/axonframework/common/ReflectionUtils.java\n", "chunk": "@@ -48,7 +48,7 @@ public abstract class ReflectionUtils {\n      * A map of Primitive types to their respective wrapper types.\n      */\n     private static final Map<Type, Class<?>> primitiveWrapperTypeMap = new HashMap<>(8);\n-    public static final String UNSUPPORTED_MEMBER_TYPE_EXCEPTION_MESSAGE = \"Unsupported member type [%s]\";\n+    private static final String UNSUPPORTED_MEMBER_TYPE_EXCEPTION_MESSAGE = \"Unsupported member type [%s]\";\n \n     static {\n         primitiveWrapperTypeMap.put(boolean.class, Boolean.class);\n", "next_change": null}]}, "revised_code_in_main": {"commit": "6ad2c3106254d25bb2684f46758596d9c7ca2b86", "changed_code": [{"header": "diff --git a/messaging/src/main/java/org/axonframework/common/ReflectionUtils.java b/messaging/src/main/java/org/axonframework/common/ReflectionUtils.java\nindex 02ccc139f..78676ae93 100644\n--- a/messaging/src/main/java/org/axonframework/common/ReflectionUtils.java\n+++ b/messaging/src/main/java/org/axonframework/common/ReflectionUtils.java\n", "chunk": "@@ -48,7 +48,7 @@ public abstract class ReflectionUtils {\n      * A map of Primitive types to their respective wrapper types.\n      */\n     private static final Map<Type, Class<?>> primitiveWrapperTypeMap = new HashMap<>(8);\n-    public static final String UNSUPPORTED_MEMBER_TYPE_EXCEPTION_MESSAGE = \"Unsupported member type [%s]\";\n+    private static final String UNSUPPORTED_MEMBER_TYPE_EXCEPTION_MESSAGE = \"Unsupported member type [%s]\";\n \n     static {\n         primitiveWrapperTypeMap.put(boolean.class, Boolean.class);\n", "next_change": {"commit": "41439493baa67bc8a8fdc3c9672450c18d6e56e3", "changed_code": [{"header": "diff --git a/messaging/src/main/java/org/axonframework/common/ReflectionUtils.java b/messaging/src/main/java/org/axonframework/common/ReflectionUtils.java\nindex 78676ae93..213753286 100644\n--- a/messaging/src/main/java/org/axonframework/common/ReflectionUtils.java\n+++ b/messaging/src/main/java/org/axonframework/common/ReflectionUtils.java\n", "chunk": "@@ -50,6 +50,15 @@ public abstract class ReflectionUtils {\n     private static final Map<Type, Class<?>> primitiveWrapperTypeMap = new HashMap<>(8);\n     private static final String UNSUPPORTED_MEMBER_TYPE_EXCEPTION_MESSAGE = \"Unsupported member type [%s]\";\n \n+    /**\n+     * Specifying a reflection operation should be performed recursive.\n+     */\n+    public static final boolean RECURSIVE = true;\n+    /**\n+     * Specifying a reflection operation should not be performed recursive.\n+     */\n+    public static final boolean NOT_RECURSIVE = false;\n+\n     static {\n         primitiveWrapperTypeMap.put(boolean.class, Boolean.class);\n         primitiveWrapperTypeMap.put(byte.class, Byte.class);\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "6ad2c3106254d25bb2684f46758596d9c7ca2b86", "message": "Merge commit", "committedDate": null}, {"oid": "41439493baa67bc8a8fdc3c9672450c18d6e56e3", "committedDate": "2020-11-09 14:51:52 +0100", "message": "Add non-recursive option to find fields/methods"}, {"oid": "8e333cb5e92a6cdc536337b617540559f25068db", "committedDate": "2022-04-15 13:56:32 +0200", "message": "React differently to primitive objects in the EqualFieldsMatcher"}, {"oid": "3a7010d7190ec0d448666f366444a60d20f3c427", "committedDate": "2022-04-15 14:04:18 +0200", "message": "Fine tune JavaDoc"}, {"oid": "5d98ac40c9a82909719eda07fb1fbfe3cbb5bb39", "committedDate": "2022-04-28 16:28:47 +0200", "message": "Adjust usage of the EqualFieldsMatcher"}, {"oid": "d291a51fcfd3bb8259caac51526dd75e2785083e", "committedDate": "2022-04-28 19:24:00 +0200", "message": "Fine tune validation steps"}, {"oid": "a550d73c50c012da4708890f6eaf4430c8eed13b", "committedDate": "2022-05-10 09:38:11 +0200", "message": "Merge pull request #2210 from AxonFramework/enhancement/field-matcher"}, {"oid": "5125103e3dc5d497bd1f6f31dc4d8ea2f49e9f85", "committedDate": "2022-07-20 13:55:54 +0200", "message": "Fix duplicate command handler detection."}, {"oid": "f83291b8c2d963cc4fcff864ad02da757232dcc9", "committedDate": "2022-07-21 13:04:14 +0200", "message": "Apply suggestions from code review of duplicate command handler detection"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDc1OTU2Mg==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1455#discussion_r444759562", "body": "Missing javadoc on this method.", "bodyText": "Missing javadoc on this method.", "bodyHTML": "<p dir=\"auto\">Missing javadoc on this method.</p>", "author": "smcvb", "createdAt": "2020-06-24T09:18:02Z", "path": "messaging/src/main/java/org/axonframework/common/annotation/AnnotationUtils.java", "diffHunk": "@@ -110,6 +110,15 @@ public static boolean isAnnotationPresent(AnnotatedElement element, String annot\n         return findAnnotationAttributes(element, annotationType.getName());\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n+    public static <T> Optional<T> findAnnotationAttribute(AnnotatedElement element,", "originalCommit": "ee3b11b9e1708fdabecc2974d1f04904fb0689d5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "84d7f38a405232e8cbf6fcd9e14db6e512282487", "changed_code": [{"header": "diff --git a/messaging/src/main/java/org/axonframework/common/annotation/AnnotationUtils.java b/messaging/src/main/java/org/axonframework/common/annotation/AnnotationUtils.java\nindex 7cdfb8cb4..1e7f17895 100644\n--- a/messaging/src/main/java/org/axonframework/common/annotation/AnnotationUtils.java\n+++ b/messaging/src/main/java/org/axonframework/common/annotation/AnnotationUtils.java\n", "chunk": "@@ -110,6 +110,16 @@ public static Optional<Map<String, Object>> findAnnotationAttributes(AnnotatedEl\n         return findAnnotationAttributes(element, annotationType.getName());\n     }\n \n+    /**\n+     * Find the attribute of name {@code attributeName} of an annotation of type {@code annotationType}\n+     * on the given {@code element}. The returned optional has a value present if the annotation has been found,\n+     * either directly on the {@code element}, or as a meta-annotation, and if the named attribute exist.\n+     *\n+     * @param element        The element for find the annotation on\n+     * @param annotationType The type of the annotation to find\n+     * @param attributeName  The name of the attribute to find\n+     * @return an optional that resolved to the attribute value, if the annotation is found and if the attribute exists\n+     */\n     @SuppressWarnings(\"unchecked\")\n     public static <T> Optional<T> findAnnotationAttribute(AnnotatedElement element,\n                                                           Class<? extends Annotation> annotationType,\n", "next_change": {"commit": "f89594495abfe4d65bf43bdc8bc452cb5cdd9afe", "changed_code": [{"header": "diff --git a/messaging/src/main/java/org/axonframework/common/annotation/AnnotationUtils.java b/messaging/src/main/java/org/axonframework/common/annotation/AnnotationUtils.java\nindex 1e7f17895..ac4d27e81 100644\n--- a/messaging/src/main/java/org/axonframework/common/annotation/AnnotationUtils.java\n+++ b/messaging/src/main/java/org/axonframework/common/annotation/AnnotationUtils.java\n", "chunk": "@@ -111,13 +115,13 @@ public static Optional<Map<String, Object>> findAnnotationAttributes(AnnotatedEl\n     }\n \n     /**\n-     * Find the attribute of name {@code attributeName} of an annotation of type {@code annotationType}\n-     * on the given {@code element}. The returned optional has a value present if the annotation has been found,\n-     * either directly on the {@code element}, or as a meta-annotation, and if the named attribute exist.\n+     * Find the attribute of name {@code attributeName} of an annotation of type {@code annotationType} on the given\n+     * {@code element}. The returned optional has a value present if the annotation has been found, either directly on\n+     * the {@code element}, or as a meta-annotation, and if the named attribute exist.\n      *\n-     * @param element        The element for find the annotation on\n-     * @param annotationType The type of the annotation to find\n-     * @param attributeName  The name of the attribute to find\n+     * @param element        the element to find the annotation on\n+     * @param annotationType the type of the annotation to find\n+     * @param attributeName  the name of the attribute to find\n      * @return an optional that resolved to the attribute value, if the annotation is found and if the attribute exists\n      */\n     @SuppressWarnings(\"unchecked\")\n", "next_change": {"commit": "e92bdc7082a4a9d8fa1027e496139c655a7b2874", "changed_code": [{"header": "diff --git a/messaging/src/main/java/org/axonframework/common/annotation/AnnotationUtils.java b/messaging/src/main/java/org/axonframework/common/annotation/AnnotationUtils.java\nindex ac4d27e81..871a76815 100644\n--- a/messaging/src/main/java/org/axonframework/common/annotation/AnnotationUtils.java\n+++ b/messaging/src/main/java/org/axonframework/common/annotation/AnnotationUtils.java\n", "chunk": "@@ -115,9 +114,9 @@ public static Optional<Map<String, Object>> findAnnotationAttributes(AnnotatedEl\n     }\n \n     /**\n-     * Find the attribute of name {@code attributeName} of an annotation of type {@code annotationType} on the given\n-     * {@code element}. The returned optional has a value present if the annotation has been found, either directly on\n-     * the {@code element}, or as a meta-annotation, and if the named attribute exist.\n+     * Find the {@code attributeName} of an annotation of type {@code annotationType} on the given {@code element}. The\n+     * returned optional has a value present if the annotation has been found, either directly on the {@code element},\n+     * or as a meta-annotation, <em>if</em> the named attribute exist.\n      *\n      * @param element        the element to find the annotation on\n      * @param annotationType the type of the annotation to find\n", "next_change": null}]}}, {"header": "diff --git a/messaging/src/main/java/org/axonframework/common/annotation/AnnotationUtils.java b/messaging/src/main/java/org/axonframework/common/annotation/AnnotationUtils.java\nindex 1e7f17895..ac4d27e81 100644\n--- a/messaging/src/main/java/org/axonframework/common/annotation/AnnotationUtils.java\n+++ b/messaging/src/main/java/org/axonframework/common/annotation/AnnotationUtils.java\n", "chunk": "@@ -125,7 +129,7 @@ public static <T> Optional<T> findAnnotationAttribute(AnnotatedElement element,\n                                                           Class<? extends Annotation> annotationType,\n                                                           String attributeName) {\n         return findAnnotationAttributes(element, annotationType.getName())\n-                .map(attributes ->  attributes.get(attributeName))\n+                .map(attributes -> attributes.get(attributeName))\n                 .map(attribute -> (T) attribute);\n     }\n \n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "6ad2c3106254d25bb2684f46758596d9c7ca2b86", "changed_code": [{"header": "diff --git a/messaging/src/main/java/org/axonframework/common/annotation/AnnotationUtils.java b/messaging/src/main/java/org/axonframework/common/annotation/AnnotationUtils.java\nindex 7cdfb8cb4..871a76815 100644\n--- a/messaging/src/main/java/org/axonframework/common/annotation/AnnotationUtils.java\n+++ b/messaging/src/main/java/org/axonframework/common/annotation/AnnotationUtils.java\n", "chunk": "@@ -110,12 +113,22 @@ public static Optional<Map<String, Object>> findAnnotationAttributes(AnnotatedEl\n         return findAnnotationAttributes(element, annotationType.getName());\n     }\n \n+    /**\n+     * Find the {@code attributeName} of an annotation of type {@code annotationType} on the given {@code element}. The\n+     * returned optional has a value present if the annotation has been found, either directly on the {@code element},\n+     * or as a meta-annotation, <em>if</em> the named attribute exist.\n+     *\n+     * @param element        the element to find the annotation on\n+     * @param annotationType the type of the annotation to find\n+     * @param attributeName  the name of the attribute to find\n+     * @return an optional that resolved to the attribute value, if the annotation is found and if the attribute exists\n+     */\n     @SuppressWarnings(\"unchecked\")\n     public static <T> Optional<T> findAnnotationAttribute(AnnotatedElement element,\n                                                           Class<? extends Annotation> annotationType,\n                                                           String attributeName) {\n         return findAnnotationAttributes(element, annotationType.getName())\n-                .map(attributes ->  attributes.get(attributeName))\n+                .map(attributes -> attributes.get(attributeName))\n                 .map(attribute -> (T) attribute);\n     }\n \n", "next_change": {"commit": "b76db79c7471b8eb9a2b545cd5896056de3fa10a", "changed_code": [{"header": "diff --git a/messaging/src/main/java/org/axonframework/common/annotation/AnnotationUtils.java b/messaging/src/main/java/org/axonframework/common/annotation/AnnotationUtils.java\nindex 871a76815..d08e61d98 100644\n--- a/messaging/src/main/java/org/axonframework/common/annotation/AnnotationUtils.java\n+++ b/messaging/src/main/java/org/axonframework/common/annotation/AnnotationUtils.java\n", "chunk": "@@ -132,12 +204,20 @@ public static <T> Optional<T> findAnnotationAttribute(AnnotatedElement element,\n                 .map(attribute -> (T) attribute);\n     }\n \n-    private static boolean collectAnnotationAttributes(Class<? extends Annotation> target, String annotationType, HashSet<String> visited, Map<String, Object> attributes) {\n+    private static boolean collectAnnotationAttributes(Class<? extends Annotation> target,\n+                                                       String annotationType,\n+                                                       Set<String> visited,\n+                                                       Map<String, Object> attributes,\n+                                                       boolean overrideOnly) {\n         Annotation ann = getAnnotation(target, annotationType);\n         if (ann == null && visited.add(target.getName())) {\n             for (Annotation metaAnn : target.getAnnotations()) {\n-                if (collectAnnotationAttributes(metaAnn.annotationType(), annotationType, visited, attributes)) {\n-                    collectAttributes(metaAnn, attributes);\n+                if (collectAnnotationAttributes(metaAnn.annotationType(),\n+                                                annotationType,\n+                                                visited,\n+                                                attributes,\n+                                                overrideOnly)) {\n+                    collectAttributes(metaAnn, attributes, overrideOnly);\n                     return true;\n                 }\n             }\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "6ad2c3106254d25bb2684f46758596d9c7ca2b86", "message": "Merge commit", "committedDate": null}, {"oid": "b76db79c7471b8eb9a2b545cd5896056de3fa10a", "committedDate": "2020-12-01 14:18:49 +0100", "message": "Multitude of adjustments in the util classes"}, {"oid": "692c44e27185a2842483b971670889f25a4c48d7", "committedDate": "2021-10-25 15:14:26 +0200", "message": "Replaced method.getParametersTypes().length method.getParameterCount() as it is an improvement since java8"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgxNjE3NA==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1455#discussion_r444816174", "body": "Please add by what this method is being replaced on the `@deprecated` line of javadoc.", "bodyText": "Please add by what this method is being replaced on the @deprecated line of javadoc.", "bodyHTML": "<p dir=\"auto\">Please add by what this method is being replaced on the <code>@deprecated</code> line of javadoc.</p>", "author": "smcvb", "createdAt": "2020-06-24T11:04:49Z", "path": "modelling/src/main/java/org/axonframework/modelling/command/inspection/AbstractChildEntityDefinition.java", "diffHunk": "@@ -72,31 +76,41 @@\n      *\n      * @param field a {@link java.lang.reflect.Field} containing a Child Entity\n      * @return true if the type is as required by the implementation and false if it is not\n+     * @deprecated", "originalCommit": "ee3b11b9e1708fdabecc2974d1f04904fb0689d5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "84d7f38a405232e8cbf6fcd9e14db6e512282487", "changed_code": [{"header": "diff --git a/modelling/src/main/java/org/axonframework/modelling/command/inspection/AbstractChildEntityDefinition.java b/modelling/src/main/java/org/axonframework/modelling/command/inspection/AbstractChildEntityDefinition.java\nindex 56ec07ed2..0026eb087 100644\n--- a/modelling/src/main/java/org/axonframework/modelling/command/inspection/AbstractChildEntityDefinition.java\n+++ b/modelling/src/main/java/org/axonframework/modelling/command/inspection/AbstractChildEntityDefinition.java\n", "chunk": "@@ -76,7 +76,7 @@ public <T> Optional<ChildEntity<T>> createChildDefinition(Member member, EntityM\n      *\n      * @param field a {@link java.lang.reflect.Field} containing a Child Entity\n      * @return true if the type is as required by the implementation and false if it is not\n-     * @deprecated\n+     * @deprecated in favour of {@link #isMemberTypeSupported(Member)}\n      */\n     @Deprecated\n     protected abstract boolean isFieldTypeSupported(Field field);\n", "next_change": {"commit": "f89594495abfe4d65bf43bdc8bc452cb5cdd9afe", "changed_code": [{"header": "diff --git a/modelling/src/main/java/org/axonframework/modelling/command/inspection/AbstractChildEntityDefinition.java b/modelling/src/main/java/org/axonframework/modelling/command/inspection/AbstractChildEntityDefinition.java\nindex 0026eb087..3079e9113 100644\n--- a/modelling/src/main/java/org/axonframework/modelling/command/inspection/AbstractChildEntityDefinition.java\n+++ b/modelling/src/main/java/org/axonframework/modelling/command/inspection/AbstractChildEntityDefinition.java\n", "chunk": "@@ -72,9 +74,9 @@ public <T> Optional<ChildEntity<T>> createChildDefinition(Member member, EntityM\n     }\n \n     /**\n-     * Check whether the given {@link java.lang.reflect.Field} is of a type supported by this definition.\n+     * Check whether the given {@link Field} is of a type supported by this definition.\n      *\n-     * @param field a {@link java.lang.reflect.Field} containing a Child Entity\n+     * @param field a {@link Field} containing a Child Entity\n      * @return true if the type is as required by the implementation and false if it is not\n      * @deprecated in favour of {@link #isMemberTypeSupported(Member)}\n      */\n", "next_change": {"commit": "99aea53e2decdc44ca87b51073ac88abee08acfc", "changed_code": [{"header": "diff --git a/modelling/src/main/java/org/axonframework/modelling/command/inspection/AbstractChildEntityDefinition.java b/modelling/src/main/java/org/axonframework/modelling/command/inspection/AbstractChildEntityDefinition.java\nindex 3079e9113..3de0cfa7e 100644\n--- a/modelling/src/main/java/org/axonframework/modelling/command/inspection/AbstractChildEntityDefinition.java\n+++ b/modelling/src/main/java/org/axonframework/modelling/command/inspection/AbstractChildEntityDefinition.java\n", "chunk": "@@ -81,7 +81,9 @@ public <T> Optional<ChildEntity<T>> createChildDefinition(Member member, EntityM\n      * @deprecated in favour of {@link #isMemberTypeSupported(Member)}\n      */\n     @Deprecated\n-    protected abstract boolean isFieldTypeSupported(Field field);\n+    protected boolean isFieldTypeSupported(Field field) {\n+        return isMemberTypeSupported(field);\n+    }\n \n     /**\n      * Check whether the given {@link Member} is of a type supported by this definition.\n", "next_change": null}]}}, {"header": "diff --git a/modelling/src/main/java/org/axonframework/modelling/command/inspection/AbstractChildEntityDefinition.java b/modelling/src/main/java/org/axonframework/modelling/command/inspection/AbstractChildEntityDefinition.java\nindex 0026eb087..3079e9113 100644\n--- a/modelling/src/main/java/org/axonframework/modelling/command/inspection/AbstractChildEntityDefinition.java\n+++ b/modelling/src/main/java/org/axonframework/modelling/command/inspection/AbstractChildEntityDefinition.java\n", "chunk": "@@ -82,9 +84,9 @@ public <T> Optional<ChildEntity<T>> createChildDefinition(Member member, EntityM\n     protected abstract boolean isFieldTypeSupported(Field field);\n \n     /**\n-     * Check whether the given {@link java.lang.reflect.Member} is of a type supported by this definition.\n+     * Check whether the given {@link Member} is of a type supported by this definition.\n      *\n-     * @param member a {@link java.lang.reflect.Member} containing or returning a Child Entity\n+     * @param member a {@link Member} containing or returning a Child Entity\n      * @return true if the type is as required by the implementation and false if it is not\n      */\n     protected abstract boolean isMemberTypeSupported(Member member);\n", "next_change": {"commit": "e92bdc7082a4a9d8fa1027e496139c655a7b2874", "changed_code": [{"header": "diff --git a/modelling/src/main/java/org/axonframework/modelling/command/inspection/AbstractChildEntityDefinition.java b/modelling/src/main/java/org/axonframework/modelling/command/inspection/AbstractChildEntityDefinition.java\nindex 3079e9113..acfd318ee 100644\n--- a/modelling/src/main/java/org/axonframework/modelling/command/inspection/AbstractChildEntityDefinition.java\n+++ b/modelling/src/main/java/org/axonframework/modelling/command/inspection/AbstractChildEntityDefinition.java\n", "chunk": "@@ -92,13 +92,12 @@ public <T> Optional<ChildEntity<T>> createChildDefinition(Member member, EntityM\n     protected abstract boolean isMemberTypeSupported(Member member);\n \n     /**\n-     * Extracts the Child Entity contained in the given {@code declaringEntity} as an {@link EntityModel}.\n-     * The type of the Child Entity is defined through a key in the provided {@code attributes} or based on given\n-     * {@link java.lang.reflect.Field}.\n+     * Extracts the Child Entity contained in the given {@code declaringEntity} as an {@link EntityModel}. The type of\n+     * the Child Entity is defined through a key in the provided {@code attributes} or based on given {@link Field}.\n      *\n      * @param declaringEntity the {@link EntityModel} declaring the given {@code field}\n-     * @param attributes      a {@link java.util.Map} containing the {@link AggregateMember} attributes\n-     * @param member          the {@link java.lang.reflect.Member} containing the Child Entity.\n+     * @param attributes      a {@link Map} containing the {@link AggregateMember} attributes\n+     * @param member          the {@link Member} containing the Child Entity.\n      * @param <T>             the type {@code T} of the given {@code declaringEntity} {@link EntityModel}\n      * @return the Child Entity contained in the {@code declaringEntity}\n      */\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "6ad2c3106254d25bb2684f46758596d9c7ca2b86", "changed_code": [{"header": "diff --git a/modelling/src/main/java/org/axonframework/modelling/command/inspection/AbstractChildEntityDefinition.java b/modelling/src/main/java/org/axonframework/modelling/command/inspection/AbstractChildEntityDefinition.java\nindex 56ec07ed2..3de0cfa7e 100644\n--- a/modelling/src/main/java/org/axonframework/modelling/command/inspection/AbstractChildEntityDefinition.java\n+++ b/modelling/src/main/java/org/axonframework/modelling/command/inspection/AbstractChildEntityDefinition.java\n", "chunk": "@@ -72,31 +74,32 @@ public <T> Optional<ChildEntity<T>> createChildDefinition(Member member, EntityM\n     }\n \n     /**\n-     * Check whether the given {@link java.lang.reflect.Field} is of a type supported by this definition.\n+     * Check whether the given {@link Field} is of a type supported by this definition.\n      *\n-     * @param field a {@link java.lang.reflect.Field} containing a Child Entity\n+     * @param field a {@link Field} containing a Child Entity\n      * @return true if the type is as required by the implementation and false if it is not\n-     * @deprecated\n+     * @deprecated in favour of {@link #isMemberTypeSupported(Member)}\n      */\n     @Deprecated\n-    protected abstract boolean isFieldTypeSupported(Field field);\n+    protected boolean isFieldTypeSupported(Field field) {\n+        return isMemberTypeSupported(field);\n+    }\n \n     /**\n-     * Check whether the given {@link java.lang.reflect.Member} is of a type supported by this definition.\n+     * Check whether the given {@link Member} is of a type supported by this definition.\n      *\n-     * @param member a {@link java.lang.reflect.Member} containing or returning a Child Entity\n+     * @param member a {@link Member} containing or returning a Child Entity\n      * @return true if the type is as required by the implementation and false if it is not\n      */\n     protected abstract boolean isMemberTypeSupported(Member member);\n \n     /**\n-     * Extracts the Child Entity contained in the given {@code declaringEntity} as an {@link EntityModel}.\n-     * The type of the Child Entity is defined through a key in the provided {@code attributes} or based on given\n-     * {@link java.lang.reflect.Field}.\n+     * Extracts the Child Entity contained in the given {@code declaringEntity} as an {@link EntityModel}. The type of\n+     * the Child Entity is defined through a key in the provided {@code attributes} or based on given {@link Field}.\n      *\n      * @param declaringEntity the {@link EntityModel} declaring the given {@code field}\n-     * @param attributes      a {@link java.util.Map} containing the {@link AggregateMember} attributes\n-     * @param member          the {@link java.lang.reflect.Member} containing the Child Entity.\n+     * @param attributes      a {@link Map} containing the {@link AggregateMember} attributes\n+     * @param member          the {@link Member} containing the Child Entity.\n      * @param <T>             the type {@code T} of the given {@code declaringEntity} {@link EntityModel}\n      * @return the Child Entity contained in the {@code declaringEntity}\n      */\n", "next_change": null}]}, "commits_in_main": [{"oid": "6ad2c3106254d25bb2684f46758596d9c7ca2b86", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgyODIwNA==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1455#discussion_r444828204", "body": "I'd rename this variable to `memberValue`.", "bodyText": "I'd rename this variable to memberValue.", "bodyHTML": "<p dir=\"auto\">I'd rename this variable to <code>memberValue</code>.</p>", "author": "smcvb", "createdAt": "2020-06-24T11:30:42Z", "path": "modelling/src/main/java/org/axonframework/modelling/command/inspection/AggregateMemberAnnotatedChildEntityCollectionDefinition.java", "diffHunk": "@@ -86,9 +98,9 @@ protected boolean isFieldTypeSupported(Field field) {\n     @Override\n     protected <T> Stream<Object> resolveEventTargets(EventMessage message,\n                                                      T parentEntity,\n-                                                     Field field,\n+                                                     Member member,\n                                                      ForwardingMode eventForwardingMode) {\n-        Iterable<Object> fieldValue = ReflectionUtils.getFieldValue(field, parentEntity);\n+        Iterable<Object> fieldValue = ReflectionUtils.getMemberValue(member, parentEntity);", "originalCommit": "ee3b11b9e1708fdabecc2974d1f04904fb0689d5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "84d7f38a405232e8cbf6fcd9e14db6e512282487", "changed_code": [{"header": "diff --git a/modelling/src/main/java/org/axonframework/modelling/command/inspection/AggregateMemberAnnotatedChildEntityCollectionDefinition.java b/modelling/src/main/java/org/axonframework/modelling/command/inspection/AggregateMemberAnnotatedChildEntityCollectionDefinition.java\nindex 926ba6214..1cddd867e 100644\n--- a/modelling/src/main/java/org/axonframework/modelling/command/inspection/AggregateMemberAnnotatedChildEntityCollectionDefinition.java\n+++ b/modelling/src/main/java/org/axonframework/modelling/command/inspection/AggregateMemberAnnotatedChildEntityCollectionDefinition.java\n", "chunk": "@@ -100,9 +100,9 @@ protected <T> Stream<Object> resolveEventTargets(EventMessage message,\n                                                      T parentEntity,\n                                                      Member member,\n                                                      ForwardingMode eventForwardingMode) {\n-        Iterable<Object> fieldValue = ReflectionUtils.getMemberValue(member, parentEntity);\n-        return fieldValue == null\n+        Iterable<Object> memberValue = ReflectionUtils.getMemberValue(member, parentEntity);\n+        return memberValue == null\n                 ? Stream.empty()\n-                : eventForwardingMode.filterCandidates(message, StreamSupport.stream(fieldValue.spliterator(), false));\n+                : eventForwardingMode.filterCandidates(message, StreamSupport.stream(memberValue.spliterator(), false));\n     }\n }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "6ad2c3106254d25bb2684f46758596d9c7ca2b86", "changed_code": [{"header": "diff --git a/modelling/src/main/java/org/axonframework/modelling/command/inspection/AggregateMemberAnnotatedChildEntityCollectionDefinition.java b/modelling/src/main/java/org/axonframework/modelling/command/inspection/AggregateMemberAnnotatedChildEntityCollectionDefinition.java\nindex 926ba6214..9a601317b 100644\n--- a/modelling/src/main/java/org/axonframework/modelling/command/inspection/AggregateMemberAnnotatedChildEntityCollectionDefinition.java\n+++ b/modelling/src/main/java/org/axonframework/modelling/command/inspection/AggregateMemberAnnotatedChildEntityCollectionDefinition.java\n", "chunk": "@@ -100,9 +92,9 @@ protected <T> Stream<Object> resolveEventTargets(EventMessage message,\n                                                      T parentEntity,\n                                                      Member member,\n                                                      ForwardingMode eventForwardingMode) {\n-        Iterable<Object> fieldValue = ReflectionUtils.getMemberValue(member, parentEntity);\n-        return fieldValue == null\n+        Iterable<Object> memberValue = ReflectionUtils.getMemberValue(member, parentEntity);\n+        return memberValue == null\n                 ? Stream.empty()\n-                : eventForwardingMode.filterCandidates(message, StreamSupport.stream(fieldValue.spliterator(), false));\n+                : eventForwardingMode.filterCandidates(message, StreamSupport.stream(memberValue.spliterator(), false));\n     }\n }\n", "next_change": null}]}, "commits_in_main": [{"oid": "6ad2c3106254d25bb2684f46758596d9c7ca2b86", "message": "Merge commit", "committedDate": null}, {"oid": "995e20b2745d08f303c0c976a697a447c0f9a670", "committedDate": "2021-03-23 13:05:59 +0100", "message": "Throw AxonConfigurationException if aggregate member type = an interface"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgyODQ4MQ==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1455#discussion_r444828481", "body": "I'd rename this variable to `memberValue`.", "bodyText": "I'd rename this variable to memberValue.", "bodyHTML": "<p dir=\"auto\">I'd rename this variable to <code>memberValue</code>.</p>", "author": "smcvb", "createdAt": "2020-06-24T11:31:15Z", "path": "modelling/src/main/java/org/axonframework/modelling/command/inspection/AggregateMemberAnnotatedChildEntityMapDefinition.java", "diffHunk": "@@ -65,25 +77,24 @@ protected boolean isFieldTypeSupported(Field field) {\n     @Override\n     protected <T> Object resolveCommandTarget(CommandMessage<?> msg,\n                                               T parent,\n-                                              Field field,\n+                                              Member member,\n                                               EntityModel<Object> childEntityModel) {\n         Map<String, Property<Object>> commandHandlerRoutingKeys =\n-                extractCommandHandlerRoutingKeys(field, childEntityModel);\n+                extractCommandHandlerRoutingKeys(member, childEntityModel);\n \n         Object routingValue = commandHandlerRoutingKeys.get(msg.getCommandName())\n                                                        .getValue(msg.getPayload());\n-        Map<?, ?> fieldValue = ReflectionUtils.getFieldValue(field, parent);\n+        Map<?, ?> fieldValue = ReflectionUtils.getMemberValue(member, parent);\n \n         return fieldValue == null ? null : fieldValue.get(routingValue);\n     }\n \n-    @SuppressWarnings(\"unchecked\")\n     @Override\n     protected <T> Stream<Object> resolveEventTargets(EventMessage message,\n                                                      T parentEntity,\n-                                                     Field field,\n+                                                     Member member,\n                                                      ForwardingMode eventForwardingMode) {\n-        Map<?, Object> fieldValue = ReflectionUtils.getFieldValue(field, parentEntity);\n+        Map<?, Object> fieldValue = ReflectionUtils.getMemberValue(member, parentEntity);", "originalCommit": "ee3b11b9e1708fdabecc2974d1f04904fb0689d5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "84d7f38a405232e8cbf6fcd9e14db6e512282487", "changed_code": [{"header": "diff --git a/modelling/src/main/java/org/axonframework/modelling/command/inspection/AggregateMemberAnnotatedChildEntityMapDefinition.java b/modelling/src/main/java/org/axonframework/modelling/command/inspection/AggregateMemberAnnotatedChildEntityMapDefinition.java\nindex d90e9ee46..db5d146a3 100644\n--- a/modelling/src/main/java/org/axonframework/modelling/command/inspection/AggregateMemberAnnotatedChildEntityMapDefinition.java\n+++ b/modelling/src/main/java/org/axonframework/modelling/command/inspection/AggregateMemberAnnotatedChildEntityMapDefinition.java\n", "chunk": "@@ -94,9 +94,9 @@ protected <T> Stream<Object> resolveEventTargets(EventMessage message,\n                                                      T parentEntity,\n                                                      Member member,\n                                                      ForwardingMode eventForwardingMode) {\n-        Map<?, Object> fieldValue = ReflectionUtils.getMemberValue(member, parentEntity);\n-        return fieldValue == null\n+        Map<?, Object> memberValue = ReflectionUtils.getMemberValue(member, parentEntity);\n+        return memberValue == null\n                 ? Stream.empty()\n-                : eventForwardingMode.filterCandidates(message, fieldValue.values().stream());\n+                : eventForwardingMode.filterCandidates(message, memberValue.values().stream());\n     }\n }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "6ad2c3106254d25bb2684f46758596d9c7ca2b86", "changed_code": [{"header": "diff --git a/modelling/src/main/java/org/axonframework/modelling/command/inspection/AggregateMemberAnnotatedChildEntityMapDefinition.java b/modelling/src/main/java/org/axonframework/modelling/command/inspection/AggregateMemberAnnotatedChildEntityMapDefinition.java\nindex d90e9ee46..a76feca1a 100644\n--- a/modelling/src/main/java/org/axonframework/modelling/command/inspection/AggregateMemberAnnotatedChildEntityMapDefinition.java\n+++ b/modelling/src/main/java/org/axonframework/modelling/command/inspection/AggregateMemberAnnotatedChildEntityMapDefinition.java\n", "chunk": "@@ -94,9 +87,9 @@ protected <T> Stream<Object> resolveEventTargets(EventMessage message,\n                                                      T parentEntity,\n                                                      Member member,\n                                                      ForwardingMode eventForwardingMode) {\n-        Map<?, Object> fieldValue = ReflectionUtils.getMemberValue(member, parentEntity);\n-        return fieldValue == null\n+        Map<?, Object> memberValue = ReflectionUtils.getMemberValue(member, parentEntity);\n+        return memberValue == null\n                 ? Stream.empty()\n-                : eventForwardingMode.filterCandidates(message, fieldValue.values().stream());\n+                : eventForwardingMode.filterCandidates(message, memberValue.values().stream());\n     }\n }\n", "next_change": null}]}, "commits_in_main": [{"oid": "6ad2c3106254d25bb2684f46758596d9c7ca2b86", "message": "Merge commit", "committedDate": null}, {"oid": "995e20b2745d08f303c0c976a697a447c0f9a670", "committedDate": "2021-03-23 13:05:59 +0100", "message": "Throw AxonConfigurationException if aggregate member type = an interface"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg0MzAyNg==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1455#discussion_r444843026", "body": "I think this constant should be `private`, or otherwise javadoc should be included.", "bodyText": "I think this constant should be private, or otherwise javadoc should be included.", "bodyHTML": "<p dir=\"auto\">I think this constant should be <code>private</code>, or otherwise javadoc should be included.</p>", "author": "smcvb", "createdAt": "2020-06-24T12:00:46Z", "path": "modelling/src/main/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactory.java", "diffHunk": "@@ -188,6 +194,7 @@ public AnnotatedAggregateMetaModelFactory(ParameterResolverFactory parameterReso\n \n     private class AnnotatedAggregateModel<T> implements AggregateModel<T> {\n \n+        public static final String JAVAX_PERSISTENCE_ID = \"javax.persistence.Id\";", "originalCommit": "ee3b11b9e1708fdabecc2974d1f04904fb0689d5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "84d7f38a405232e8cbf6fcd9e14db6e512282487", "changed_code": [{"header": "diff --git a/modelling/src/main/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactory.java b/modelling/src/main/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactory.java\nindex 68bd7568f..b9f211b51 100644\n--- a/modelling/src/main/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactory.java\n+++ b/modelling/src/main/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactory.java\n", "chunk": "@@ -194,7 +194,7 @@ public <T> AnnotatedAggregateModel<T> createModel(Class<? extends T> aggregateTy\n \n     private class AnnotatedAggregateModel<T> implements AggregateModel<T> {\n \n-        public static final String JAVAX_PERSISTENCE_ID = \"javax.persistence.Id\";\n+        private static final String JAVAX_PERSISTENCE_ID = \"javax.persistence.Id\";\n         private final Class<? extends T> inspectedType;\n         private final List<ChildEntity<T>> children;\n         private final AnnotatedHandlerInspector<T> handlerInspector;\n", "next_change": {"commit": "08c3e18e75bb28e33875eea63a395747f2d324a5", "changed_code": [{"header": "diff --git a/modelling/src/main/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactory.java b/modelling/src/main/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactory.java\nindex b9f211b51..54d17b68d 100644\n--- a/modelling/src/main/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactory.java\n+++ b/modelling/src/main/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactory.java\n", "chunk": "@@ -195,6 +205,7 @@ public <T> AnnotatedAggregateModel<T> createModel(Class<? extends T> aggregateTy\n     private class AnnotatedAggregateModel<T> implements AggregateModel<T> {\n \n         private static final String JAVAX_PERSISTENCE_ID = \"javax.persistence.Id\";\n+\n         private final Class<? extends T> inspectedType;\n         private final List<ChildEntity<T>> children;\n         private final AnnotatedHandlerInspector<T> handlerInspector;\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "6ad2c3106254d25bb2684f46758596d9c7ca2b86", "changed_code": [{"header": "diff --git a/modelling/src/main/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactory.java b/modelling/src/main/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactory.java\nindex 68bd7568f..d6bd1b918 100644\n--- a/modelling/src/main/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactory.java\n+++ b/modelling/src/main/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactory.java\n", "chunk": "@@ -194,7 +204,8 @@ public <T> AnnotatedAggregateModel<T> createModel(Class<? extends T> aggregateTy\n \n     private class AnnotatedAggregateModel<T> implements AggregateModel<T> {\n \n-        public static final String JAVAX_PERSISTENCE_ID = \"javax.persistence.Id\";\n+        private static final String JAVAX_PERSISTENCE_ID = \"javax.persistence.Id\";\n+\n         private final Class<? extends T> inspectedType;\n         private final List<ChildEntity<T>> children;\n         private final AnnotatedHandlerInspector<T> handlerInspector;\n", "next_change": {"commit": "a280c8e49c4a1dfa946ea77b3185b9f54d33fc18", "changed_code": [{"header": "diff --git a/modelling/src/main/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactory.java b/modelling/src/main/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactory.java\nindex d6bd1b918..a6d9c95d1 100644\n--- a/modelling/src/main/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactory.java\n+++ b/modelling/src/main/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactory.java\n", "chunk": "@@ -207,7 +207,7 @@ public <T> AnnotatedAggregateModel<T> createModel(Class<? extends T> aggregateTy\n         private static final String JAVAX_PERSISTENCE_ID = \"javax.persistence.Id\";\n \n         private final Class<? extends T> inspectedType;\n-        private final List<ChildEntity<T>> children;\n+        private final Map<Class<?>, ChildEntity<T>> children;\n         private final AnnotatedHandlerInspector<T> handlerInspector;\n         private final Map<Class<?>, List<MessageHandlingMember<? super T>>> allCommandHandlerInterceptors;\n         private final Map<Class<?>, List<MessageHandlingMember<? super T>>> allCommandHandlers;\n", "next_change": {"commit": "62ab41fd35daafd5c95f92abd44eef822dc3d8d7", "changed_code": [{"header": "diff --git a/modelling/src/main/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactory.java b/modelling/src/main/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactory.java\nindex a6d9c95d1..eae81bffb 100644\n--- a/modelling/src/main/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactory.java\n+++ b/modelling/src/main/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactory.java\n", "chunk": "@@ -207,7 +208,7 @@ public <T> AnnotatedAggregateModel<T> createModel(Class<? extends T> aggregateTy\n         private static final String JAVAX_PERSISTENCE_ID = \"javax.persistence.Id\";\n \n         private final Class<? extends T> inspectedType;\n-        private final Map<Class<?>, ChildEntity<T>> children;\n+        private final List<ChildEntity<T>> children;\n         private final AnnotatedHandlerInspector<T> handlerInspector;\n         private final Map<Class<?>, List<MessageHandlingMember<? super T>>> allCommandHandlerInterceptors;\n         private final Map<Class<?>, List<MessageHandlingMember<? super T>>> allCommandHandlers;\n", "next_change": {"commit": "af9922413402a8347b070d314bd5cb3e674b6ad3", "changed_code": [{"header": "diff --git a/modelling/src/main/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactory.java b/modelling/src/main/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactory.java\nindex eae81bffb..9fbc3b1ed 100644\n--- a/modelling/src/main/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactory.java\n+++ b/modelling/src/main/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactory.java\n", "chunk": "@@ -208,7 +209,7 @@ public <T> AnnotatedAggregateModel<T> createModel(Class<? extends T> aggregateTy\n         private static final String JAVAX_PERSISTENCE_ID = \"javax.persistence.Id\";\n \n         private final Class<? extends T> inspectedType;\n-        private final List<ChildEntity<T>> children;\n+        private final Map<Class<?>, List<ChildEntity<T>>> children;\n         private final AnnotatedHandlerInspector<T> handlerInspector;\n         private final Map<Class<?>, List<MessageHandlingMember<? super T>>> allCommandHandlerInterceptors;\n         private final Map<Class<?>, List<MessageHandlingMember<? super T>>> allCommandHandlers;\n", "next_change": {"commit": "4f4a60c4c15b893afc9ba1a83a535927b740cf84", "changed_code": [{"header": "diff --git a/modelling/src/main/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactory.java b/modelling/src/main/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactory.java\nindex 9fbc3b1ed..c38ec459d 100644\n--- a/modelling/src/main/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactory.java\n+++ b/modelling/src/main/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactory.java\n", "chunk": "@@ -206,6 +207,7 @@ public <T> AnnotatedAggregateModel<T> createModel(Class<? extends T> aggregateTy\n \n     private class AnnotatedAggregateModel<T> implements AggregateModel<T> {\n \n+        private static final String JAKARTA_PERSISTENCE_ID = \"jakarta.persistence.Id\";\n         private static final String JAVAX_PERSISTENCE_ID = \"javax.persistence.Id\";\n \n         private final Class<? extends T> inspectedType;\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "6ad2c3106254d25bb2684f46758596d9c7ca2b86", "message": "Merge commit", "committedDate": null}, {"oid": "a280c8e49c4a1dfa946ea77b3185b9f54d33fc18", "committedDate": "2020-11-03 17:05:42 +0100", "message": "Use a map of class to ChildEntity"}, {"oid": "ffb8d7dc320e7514b39ecde3099661c24588614b", "committedDate": "2020-11-03 17:08:40 +0100", "message": "Clean up touched code"}, {"oid": "62ab41fd35daafd5c95f92abd44eef822dc3d8d7", "committedDate": "2020-11-09 17:08:19 +0100", "message": "Adjust model factory to be based on inspected types"}, {"oid": "32b1f8b5655a2e3ea9e1922757ab34b016e3985a", "committedDate": "2020-11-10 10:01:40 +0100", "message": "Rename field"}, {"oid": "af9922413402a8347b070d314bd5cb3e674b6ad3", "committedDate": "2021-01-13 14:30:18 +0100", "message": "Separately prepare ChildEntity Command Handlers"}, {"oid": "995e20b2745d08f303c0c976a697a447c0f9a670", "committedDate": "2021-03-23 13:05:59 +0100", "message": "Throw AxonConfigurationException if aggregate member type = an interface"}, {"oid": "7af9eef910dd0557db127b99191e1d00eab1c8a6", "committedDate": "2022-06-08 13:52:34 +0200", "message": "Fix JavaDoc issues"}, {"oid": "4f4a60c4c15b893afc9ba1a83a535927b740cf84", "committedDate": "2023-01-17 09:00:06 +0100", "message": "Use jakarta by default. Where needed code is duplicated to support javax still."}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg0Njg1OQ==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1455#discussion_r444846859", "body": "Nit: we could move this to a private method maybe, to deduplicate the `Field` and `Method` invocations.", "bodyText": "Nit: we could move this to a private method maybe, to deduplicate the Field and Method invocations.", "bodyHTML": "<p dir=\"auto\">Nit: we could move this to a private method maybe, to deduplicate the <code>Field</code> and <code>Method</code> invocations.</p>", "author": "smcvb", "createdAt": "2020-06-24T12:08:30Z", "path": "modelling/src/main/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactory.java", "diffHunk": "@@ -303,62 +311,99 @@ private void inspectAggregateTypes() {\n \n         private String findDeclaredType(Class<?> type) {\n             return AnnotationUtils.findAnnotationAttributes(type, AggregateRoot.class)\n-                                  .map(map -> (String) map.get(\"type\")).filter(i -> i.length() > 0).orElse(type.getSimpleName());\n+                                  .map(map -> (String) map.get(\"type\")).filter(i -> i.length() > 0)\n+                                  .orElse(type.getSimpleName());\n         }\n \n-        private void inspectFields() {\n+        private void inspectFieldsAndMethods() {\n             ServiceLoader<ChildEntityDefinition> childEntityDefinitions =\n                     ServiceLoader.load(ChildEntityDefinition.class, inspectedType.getClassLoader());\n-            boolean persistenceId = false;\n+            ArrayList<Member> entityIdMembers = new ArrayList<>();\n+            ArrayList<Member> persistenceIdMembers = new ArrayList<>();\n+            ArrayList<Member> aggregateVersionMembers = new ArrayList<>();\n             for (Class<?> type : handlerInspector.getAllHandlers().keySet()) {\n                 for (Field field : ReflectionUtils.fieldsOf(type)) {\n                     childEntityDefinitions.forEach(def -> def.createChildDefinition(field, this).ifPresent(child -> {\n                         children.add(child);\n-                        child.commandHandlers().forEach(handler -> addHandler(allCommandHandlers,\n-                                                                              type,\n-                                                                              handler));\n+                        child.commandHandlers().forEach(handler -> addHandler(allCommandHandlers, type, handler));\n                     }));\n-\n-                    if (AnnotationUtils.findAnnotationAttributes(field, EntityId.class).isPresent()) {\n-                        if (identifierField != null && !field.equals(identifierField) && !persistenceId) {\n-                            throw new AggregateModellingException(format(\n-                                    \"Aggregate [%s] has two identifier fields [%s] and [%s].\",\n-                                    inspectedType,\n-                                    identifierField,\n-                                    field));\n-                        }\n-                        persistenceId = false;\n-                        identifierField = field;\n-                        Map<String, Object> attributes =\n-                                AnnotationUtils.findAnnotationAttributes(field, EntityId.class).get();\n-                        if (!\"\".equals(attributes.get(\"routingKey\"))) {\n-                            routingKey = (String) attributes.get(\"routingKey\");\n-                        } else {\n-                            routingKey = field.getName();\n-                        }\n-                    }\n-                    if (identifierField == null\n-                            && AnnotationUtils.findAnnotationAttributes(field, \"javax.persistence.Id\")\n-                                              .isPresent()) {\n-                            persistenceId = true;\n-                            identifierField = field;\n-                            routingKey = field.getName();\n-                    }\n+                    AnnotationUtils.findAnnotationAttributes(field, EntityId.class)\n+                                   .ifPresent(attributes -> entityIdMembers.add(field));\n+                    AnnotationUtils.findAnnotationAttributes(field, JAVAX_PERSISTENCE_ID)\n+                                   .ifPresent(attributes -> persistenceIdMembers.add(field));\n                     AnnotationUtils.findAnnotationAttributes(field, AggregateVersion.class)\n+                                   .ifPresent(attributes -> aggregateVersionMembers.add(field));\n+                }\n+                for (Method method : ReflectionUtils.methodsOf(type)) {\n+                    childEntityDefinitions.forEach(def -> def.createChildDefinition(method, this).ifPresent(child -> {\n+                        children.add(child);\n+                        child.commandHandlers().forEach(handler -> addHandler(allCommandHandlers, type, handler));\n+                    }));", "originalCommit": "ee3b11b9e1708fdabecc2974d1f04904fb0689d5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7f42eec03ca30afa91a004799b7790da79b32232", "changed_code": [{"header": "diff --git a/modelling/src/main/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactory.java b/modelling/src/main/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactory.java\nindex 68bd7568f..28e7a2b52 100644\n--- a/modelling/src/main/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactory.java\n+++ b/modelling/src/main/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactory.java\n", "chunk": "@@ -318,32 +318,26 @@ private String findDeclaredType(Class<?> type) {\n         private void inspectFieldsAndMethods() {\n             ServiceLoader<ChildEntityDefinition> childEntityDefinitions =\n                     ServiceLoader.load(ChildEntityDefinition.class, inspectedType.getClassLoader());\n-            ArrayList<Member> entityIdMembers = new ArrayList<>();\n-            ArrayList<Member> persistenceIdMembers = new ArrayList<>();\n-            ArrayList<Member> aggregateVersionMembers = new ArrayList<>();\n+            List<Member> entityIdMembers = new ArrayList<>();\n+            List<Member> persistenceIdMembers = new ArrayList<>();\n+            List<Member> aggregateVersionMembers = new ArrayList<>();\n             for (Class<?> type : handlerInspector.getAllHandlers().keySet()) {\n                 for (Field field : ReflectionUtils.fieldsOf(type)) {\n-                    childEntityDefinitions.forEach(def -> def.createChildDefinition(field, this).ifPresent(child -> {\n-                        children.add(child);\n-                        child.commandHandlers().forEach(handler -> addHandler(allCommandHandlers, type, handler));\n-                    }));\n+                    createChildDefinitionsAndAddHandlers(childEntityDefinitions, type, field);\n                     AnnotationUtils.findAnnotationAttributes(field, EntityId.class)\n-                                   .ifPresent(attributes -> entityIdMembers.add(field));\n+                            .ifPresent(attributes -> entityIdMembers.add(field));\n                     AnnotationUtils.findAnnotationAttributes(field, JAVAX_PERSISTENCE_ID)\n-                                   .ifPresent(attributes -> persistenceIdMembers.add(field));\n+                            .ifPresent(attributes -> persistenceIdMembers.add(field));\n                     AnnotationUtils.findAnnotationAttributes(field, AggregateVersion.class)\n                                    .ifPresent(attributes -> aggregateVersionMembers.add(field));\n                 }\n                 for (Method method : ReflectionUtils.methodsOf(type)) {\n-                    childEntityDefinitions.forEach(def -> def.createChildDefinition(method, this).ifPresent(child -> {\n-                        children.add(child);\n-                        child.commandHandlers().forEach(handler -> addHandler(allCommandHandlers, type, handler));\n-                    }));\n+                    createChildDefinitionsAndAddHandlers(childEntityDefinitions, type, method);\n                     AnnotationUtils.findAnnotationAttributes(method, EntityId.class)\n-                                   .ifPresent(attributes -> {\n-                                       assertValidValueProvidingMethod(method);\n-                                       entityIdMembers.add(method);\n-                                   });\n+                            .ifPresent(attributes -> {\n+                                assertValidValueProvidingMethod(method);\n+                                entityIdMembers.add(method);\n+                            });\n                     AnnotationUtils.findAnnotationAttributes(method, JAVAX_PERSISTENCE_ID)\n                                    .ifPresent(attributes -> {\n                                        assertValidValueProvidingMethod(method);\n", "next_change": {"commit": "f89594495abfe4d65bf43bdc8bc452cb5cdd9afe", "changed_code": [{"header": "diff --git a/modelling/src/main/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactory.java b/modelling/src/main/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactory.java\nindex 28e7a2b52..895f8f03c 100644\n--- a/modelling/src/main/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactory.java\n+++ b/modelling/src/main/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactory.java\n", "chunk": "@@ -325,19 +324,19 @@ private void inspectFieldsAndMethods() {\n                 for (Field field : ReflectionUtils.fieldsOf(type)) {\n                     createChildDefinitionsAndAddHandlers(childEntityDefinitions, type, field);\n                     AnnotationUtils.findAnnotationAttributes(field, EntityId.class)\n-                            .ifPresent(attributes -> entityIdMembers.add(field));\n+                                   .ifPresent(attributes -> entityIdMembers.add(field));\n                     AnnotationUtils.findAnnotationAttributes(field, JAVAX_PERSISTENCE_ID)\n-                            .ifPresent(attributes -> persistenceIdMembers.add(field));\n+                                   .ifPresent(attributes -> persistenceIdMembers.add(field));\n                     AnnotationUtils.findAnnotationAttributes(field, AggregateVersion.class)\n                                    .ifPresent(attributes -> aggregateVersionMembers.add(field));\n                 }\n                 for (Method method : ReflectionUtils.methodsOf(type)) {\n                     createChildDefinitionsAndAddHandlers(childEntityDefinitions, type, method);\n                     AnnotationUtils.findAnnotationAttributes(method, EntityId.class)\n-                            .ifPresent(attributes -> {\n-                                assertValidValueProvidingMethod(method);\n-                                entityIdMembers.add(method);\n-                            });\n+                                   .ifPresent(attributes -> {\n+                                       assertValidValueProvidingMethod(method);\n+                                       entityIdMembers.add(method);\n+                                   });\n                     AnnotationUtils.findAnnotationAttributes(method, JAVAX_PERSISTENCE_ID)\n                                    .ifPresent(attributes -> {\n                                        assertValidValueProvidingMethod(method);\n", "next_change": {"commit": "08c3e18e75bb28e33875eea63a395747f2d324a5", "changed_code": [{"header": "diff --git a/modelling/src/main/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactory.java b/modelling/src/main/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactory.java\nindex 895f8f03c..54d17b68d 100644\n--- a/modelling/src/main/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactory.java\n+++ b/modelling/src/main/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactory.java\n", "chunk": "@@ -320,69 +331,113 @@ private void inspectFieldsAndMethods() {\n             List<Member> entityIdMembers = new ArrayList<>();\n             List<Member> persistenceIdMembers = new ArrayList<>();\n             List<Member> aggregateVersionMembers = new ArrayList<>();\n-            for (Class<?> type : handlerInspector.getAllHandlers().keySet()) {\n-                for (Field field : ReflectionUtils.fieldsOf(type)) {\n-                    createChildDefinitionsAndAddHandlers(childEntityDefinitions, type, field);\n-                    AnnotationUtils.findAnnotationAttributes(field, EntityId.class)\n-                                   .ifPresent(attributes -> entityIdMembers.add(field));\n-                    AnnotationUtils.findAnnotationAttributes(field, JAVAX_PERSISTENCE_ID)\n-                                   .ifPresent(attributes -> persistenceIdMembers.add(field));\n-                    AnnotationUtils.findAnnotationAttributes(field, AggregateVersion.class)\n-                                   .ifPresent(attributes -> aggregateVersionMembers.add(field));\n+            for (Class<?> handlerType : handlerInspector.getAllHandlers().keySet()) {\n+                // Navigate fields for Axon related annotations\n+                for (Field field : ReflectionUtils.fieldsOf(handlerType)) {\n+                    createChildDefinitionsAndAddHandlers(childEntityDefinitions, handlerType, field);\n+                    findAnnotationAttributes(field, EntityId.class).ifPresent(attributes -> entityIdMembers.add(field));\n+                    findAnnotationAttributes(field, JAVAX_PERSISTENCE_ID).ifPresent(\n+                            attributes -> persistenceIdMembers.add(field)\n+                    );\n+                    findAnnotationAttributes(field, AggregateVersion.class).ifPresent(\n+                            attributes -> aggregateVersionMembers.add(field)\n+                    );\n                 }\n-                for (Method method : ReflectionUtils.methodsOf(type)) {\n-                    createChildDefinitionsAndAddHandlers(childEntityDefinitions, type, method);\n-                    AnnotationUtils.findAnnotationAttributes(method, EntityId.class)\n-                                   .ifPresent(attributes -> {\n-                                       assertValidValueProvidingMethod(method);\n-                                       entityIdMembers.add(method);\n-                                   });\n-                    AnnotationUtils.findAnnotationAttributes(method, JAVAX_PERSISTENCE_ID)\n-                                   .ifPresent(attributes -> {\n-                                       assertValidValueProvidingMethod(method);\n-                                       persistenceIdMembers.add(method);\n-                                   });\n-                    AnnotationUtils.findAnnotationAttributes(method, AggregateVersion.class)\n-                                   .ifPresent(attributes -> {\n-                                       assertValidValueProvidingMethod(method);\n-                                       aggregateVersionMembers.add(method);\n-                                   });\n+                // Navigate methods for Axon related annotations\n+                for (Method method : ReflectionUtils.methodsOf(handlerType)) {\n+                    createChildDefinitionsAndAddHandlers(childEntityDefinitions, handlerType, method);\n+                    findAnnotationAttributes(method, EntityId.class).ifPresent(attributes -> {\n+                        assertValidValueProvidingMethod(method, EntityId.class.getSimpleName());\n+                        entityIdMembers.add(method);\n+                    });\n+                    findAnnotationAttributes(method, JAVAX_PERSISTENCE_ID).ifPresent(attributes -> {\n+                        assertValidValueProvidingMethod(method, JAVAX_PERSISTENCE_ID);\n+                        persistenceIdMembers.add(method);\n+                    });\n+                    findAnnotationAttributes(method, AggregateVersion.class).ifPresent(attributes -> {\n+                        assertValidValueProvidingMethod(method, AggregateVersion.class.getSimpleName());\n+                        aggregateVersionMembers.add(method);\n+                    });\n                 }\n             }\n \n             findIdentifierMember(distinct(entityIdMembers), distinct(persistenceIdMembers))\n                     .ifPresent(this::setIdentifierAndRoutingKey);\n-            if (!aggregateVersionMembers.isEmpty()) {\n-                setVersionMember(aggregateVersionMembers.get(0));\n-            }\n+            setVersionMember(aggregateVersionMembers);\n             assertIdentifierValidity(identifierMember);\n         }\n \n         private void createChildDefinitionsAndAddHandlers(ServiceLoader<ChildEntityDefinition> childEntityDefinitions,\n                                                           Class<?> type,\n-                                                          Member member) {\n-            childEntityDefinitions.forEach(def -> def.createChildDefinition(member, this).ifPresent(child -> {\n-                children.add(child);\n-                child.commandHandlers().forEach(handler -> addHandler(allCommandHandlers, type, handler));\n-            }));\n+                                                          Member entityMember) {\n+            childEntityDefinitions.forEach(\n+                    definition -> definition.createChildDefinition(entityMember, this)\n+                                            .ifPresent(child -> {\n+                                                children.add(child);\n+                                                child.commandHandlers().forEach(\n+                                                        handler -> addHandler(allCommandHandlers, type, handler)\n+                                                );\n+                                            })\n+            );\n+        }\n+\n+        private void assertValidValueProvidingMethod(Method method, String annotationName) {\n+            if (method.getParameterCount() != 0) {\n+                throw new AggregateModellingException(format(\n+                        \"Aggregate [%s] has an [%s] annotated method [%s] with parameters, \"\n+                                + \"whilst none are allowed on such a method.\",\n+                        inspectedType, annotationName, method\n+                ));\n+            }\n+            if (method.getReturnType() == Void.TYPE) {\n+                throw new AggregateModellingException(format(\n+                        \"Aggregate [%s] has an [%s] annotated method [%s] with void return type, \"\n+                                + \"whilst a return value is required for such a method.\",\n+                        inspectedType, annotationName, method\n+                ));\n+            }\n+        }\n+\n+        private Optional<Member> findIdentifierMember(List<Member> entityIdMembers,\n+                                                      List<Member> persistenceIdMembers) {\n+            if (entityIdMembers.size() > 1) {\n+                throw new AggregateModellingException(format(\n+                        \"Aggregate [%s] has more than one identifier member, while only a single member is allowed.\",\n+                        inspectedType\n+                ));\n+            }\n+            if (!entityIdMembers.isEmpty()) {\n+                return Optional.of(entityIdMembers.get(0));\n+            } else if (!persistenceIdMembers.isEmpty()) {\n+                return Optional.of(persistenceIdMembers.get(0));\n+            }\n+            return Optional.empty();\n         }\n \n         private void setIdentifierAndRoutingKey(Member identifier) {\n             identifierMember = identifier;\n-            routingKey = findRoutingKey((AccessibleObject) identifier)\n-                    .orElseGet(() -> getMemberIdentifierName(identifier));\n+            routingKey = findRoutingKey((AccessibleObject) identifier).orElseGet(\n+                    () -> getMemberIdentifierName(identifier)\n+            );\n         }\n \n-        private String getMemberIdentifierName(Member identifier) {\n-            String identifierName = identifier.getName();\n-            if (identifier instanceof Method && isGetterByConvention(identifierName)) {\n-                return stripGetterConvention(identifierName);\n-            }\n-            return identifierName;\n+        private Optional<String> findRoutingKey(AccessibleObject accessibleObject) {\n+            return AnnotationUtils.<String>findAnnotationAttribute(accessibleObject, EntityId.class, \"routingKey\")\n+                    .filter(key -> !\"\".equals(key));\n         }\n \n-        private String stripGetterConvention(String identifierName) {\n-            return identifierName.substring(3, 4).toLowerCase() + identifierName.substring(4);\n+        /**\n+         * Return the given {@code identifierMember}'s {@link Member#getName()}. If the given {@code identifierMember}\n+         * is of type {@link Method} and it resembles a regular getter method, the {@code \"get\"} will be stripped off.\n+         *\n+         * @param identifierMember the {@link Member} to retrieve the name for\n+         * @return the identifier name tied to the given {@code identifierMember}\n+         */\n+        private String getMemberIdentifierName(Member identifierMember) {\n+            String identifierName = identifierMember.getName();\n+            return identifierMember instanceof Method && isGetterByConvention(identifierName)\n+                    ? stripGetterConvention(identifierName)\n+                    : identifierName;\n         }\n \n         private boolean isGetterByConvention(String identifierName) {\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "6ad2c3106254d25bb2684f46758596d9c7ca2b86", "changed_code": [{"header": "diff --git a/modelling/src/main/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactory.java b/modelling/src/main/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactory.java\nindex 68bd7568f..d6bd1b918 100644\n--- a/modelling/src/main/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactory.java\n+++ b/modelling/src/main/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactory.java\n", "chunk": "@@ -310,73 +324,91 @@ private void inspectAggregateTypes() {\n         }\n \n         private String findDeclaredType(Class<?> type) {\n-            return AnnotationUtils.findAnnotationAttributes(type, AggregateRoot.class)\n-                                  .map(map -> (String) map.get(\"type\")).filter(i -> i.length() > 0)\n-                                  .orElse(type.getSimpleName());\n+            return findAnnotationAttributes(type, AggregateRoot.class)\n+                    .map(map -> (String) map.get(\"type\")).filter(i -> i.length() > 0)\n+                    .orElse(type.getSimpleName());\n         }\n \n         private void inspectFieldsAndMethods() {\n             ServiceLoader<ChildEntityDefinition> childEntityDefinitions =\n                     ServiceLoader.load(ChildEntityDefinition.class, inspectedType.getClassLoader());\n-            ArrayList<Member> entityIdMembers = new ArrayList<>();\n-            ArrayList<Member> persistenceIdMembers = new ArrayList<>();\n-            ArrayList<Member> aggregateVersionMembers = new ArrayList<>();\n-            for (Class<?> type : handlerInspector.getAllHandlers().keySet()) {\n-                for (Field field : ReflectionUtils.fieldsOf(type)) {\n-                    childEntityDefinitions.forEach(def -> def.createChildDefinition(field, this).ifPresent(child -> {\n-                        children.add(child);\n-                        child.commandHandlers().forEach(handler -> addHandler(allCommandHandlers, type, handler));\n-                    }));\n-                    AnnotationUtils.findAnnotationAttributes(field, EntityId.class)\n-                                   .ifPresent(attributes -> entityIdMembers.add(field));\n-                    AnnotationUtils.findAnnotationAttributes(field, JAVAX_PERSISTENCE_ID)\n-                                   .ifPresent(attributes -> persistenceIdMembers.add(field));\n-                    AnnotationUtils.findAnnotationAttributes(field, AggregateVersion.class)\n-                                   .ifPresent(attributes -> aggregateVersionMembers.add(field));\n+            List<Member> entityIdMembers = new ArrayList<>();\n+            List<Member> persistenceIdMembers = new ArrayList<>();\n+            List<Member> aggregateVersionMembers = new ArrayList<>();\n+            for (Class<?> handlerType : handlerInspector.getAllHandlers().keySet()) {\n+                // Navigate fields for Axon related annotations\n+                for (Field field : ReflectionUtils.fieldsOf(handlerType)) {\n+                    createChildDefinitionsAndAddHandlers(childEntityDefinitions, handlerType, field);\n+                    findAnnotationAttributes(field, EntityId.class).ifPresent(attributes -> entityIdMembers.add(field));\n+                    findAnnotationAttributes(field, JAVAX_PERSISTENCE_ID).ifPresent(\n+                            attributes -> persistenceIdMembers.add(field)\n+                    );\n+                    findAnnotationAttributes(field, AggregateVersion.class).ifPresent(\n+                            attributes -> aggregateVersionMembers.add(field)\n+                    );\n                 }\n-                for (Method method : ReflectionUtils.methodsOf(type)) {\n-                    childEntityDefinitions.forEach(def -> def.createChildDefinition(method, this).ifPresent(child -> {\n-                        children.add(child);\n-                        child.commandHandlers().forEach(handler -> addHandler(allCommandHandlers, type, handler));\n-                    }));\n-                    AnnotationUtils.findAnnotationAttributes(method, EntityId.class)\n-                                   .ifPresent(attributes -> {\n-                                       assertValidValueProvidingMethod(method);\n-                                       entityIdMembers.add(method);\n-                                   });\n-                    AnnotationUtils.findAnnotationAttributes(method, JAVAX_PERSISTENCE_ID)\n-                                   .ifPresent(attributes -> {\n-                                       assertValidValueProvidingMethod(method);\n-                                       persistenceIdMembers.add(method);\n-                                   });\n-                    AnnotationUtils.findAnnotationAttributes(method, AggregateVersion.class)\n-                                   .ifPresent(attributes -> {\n-                                       assertValidValueProvidingMethod(method);\n-                                       aggregateVersionMembers.add(method);\n-                                   });\n+                // Navigate methods for Axon related annotations\n+                for (Method method : ReflectionUtils.methodsOf(handlerType)) {\n+                    createChildDefinitionsAndAddHandlers(childEntityDefinitions, handlerType, method);\n+                    findAnnotationAttributes(method, EntityId.class).ifPresent(attributes -> {\n+                        assertValidValueProvidingMethod(method, EntityId.class.getSimpleName());\n+                        entityIdMembers.add(method);\n+                    });\n+                    findAnnotationAttributes(method, JAVAX_PERSISTENCE_ID).ifPresent(attributes -> {\n+                        assertValidValueProvidingMethod(method, JAVAX_PERSISTENCE_ID);\n+                        persistenceIdMembers.add(method);\n+                    });\n+                    findAnnotationAttributes(method, AggregateVersion.class).ifPresent(attributes -> {\n+                        assertValidValueProvidingMethod(method, AggregateVersion.class.getSimpleName());\n+                        aggregateVersionMembers.add(method);\n+                    });\n                 }\n             }\n \n             findIdentifierMember(distinct(entityIdMembers), distinct(persistenceIdMembers))\n                     .ifPresent(this::setIdentifierAndRoutingKey);\n-            if (!aggregateVersionMembers.isEmpty()) {\n-                setVersionMember(aggregateVersionMembers.get(0));\n-            }\n+            setVersionMember(aggregateVersionMembers);\n             assertIdentifierValidity(identifierMember);\n         }\n \n-        private void setIdentifierAndRoutingKey(Member identifier) {\n-            identifierMember = identifier;\n-            routingKey = findRoutingKey((AccessibleObject) identifier)\n-                    .orElseGet(identifier::getName);\n+        private void createChildDefinitionsAndAddHandlers(ServiceLoader<ChildEntityDefinition> childEntityDefinitions,\n+                                                          Class<?> type,\n+                                                          Member entityMember) {\n+            childEntityDefinitions.forEach(\n+                    definition -> definition.createChildDefinition(entityMember, this)\n+                                            .ifPresent(child -> {\n+                                                children.add(child);\n+                                                child.commandHandlers().forEach(\n+                                                        handler -> addHandler(allCommandHandlers, type, handler)\n+                                                );\n+                                            })\n+            );\n+        }\n+\n+        private void assertValidValueProvidingMethod(Method method, String annotationName) {\n+            if (method.getParameterCount() != 0) {\n+                throw new AggregateModellingException(format(\n+                        \"Aggregate [%s] has an [%s] annotated method [%s] with parameters, \"\n+                                + \"whilst none are allowed on such a method.\",\n+                        inspectedType, annotationName, method\n+                ));\n+            }\n+            if (method.getReturnType() == Void.TYPE) {\n+                throw new AggregateModellingException(format(\n+                        \"Aggregate [%s] has an [%s] annotated method [%s] with void return type, \"\n+                                + \"whilst a return value is required for such a method.\",\n+                        inspectedType, annotationName, method\n+                ));\n+            }\n         }\n \n         private Optional<Member> findIdentifierMember(List<Member> entityIdMembers,\n                                                       List<Member> persistenceIdMembers) {\n             if (entityIdMembers.size() > 1) {\n                 throw new AggregateModellingException(format(\n-                        \"Aggregate [%s] has more than one identifier member\",\n-                        inspectedType));\n+                        \"Aggregate [%s] has more than one identifier member, while only a single member is allowed.\",\n+                        inspectedType\n+                ));\n             }\n             if (!entityIdMembers.isEmpty()) {\n                 return Optional.of(entityIdMembers.get(0));\n", "next_change": null}]}, "commits_in_main": [{"oid": "6ad2c3106254d25bb2684f46758596d9c7ca2b86", "message": "Merge commit", "committedDate": null}, {"oid": "a280c8e49c4a1dfa946ea77b3185b9f54d33fc18", "committedDate": "2020-11-03 17:05:42 +0100", "message": "Use a map of class to ChildEntity"}, {"oid": "ffb8d7dc320e7514b39ecde3099661c24588614b", "committedDate": "2020-11-03 17:08:40 +0100", "message": "Clean up touched code"}, {"oid": "62ab41fd35daafd5c95f92abd44eef822dc3d8d7", "committedDate": "2020-11-09 17:08:19 +0100", "message": "Adjust model factory to be based on inspected types"}, {"oid": "32b1f8b5655a2e3ea9e1922757ab34b016e3985a", "committedDate": "2020-11-10 10:01:40 +0100", "message": "Rename field"}, {"oid": "af9922413402a8347b070d314bd5cb3e674b6ad3", "committedDate": "2021-01-13 14:30:18 +0100", "message": "Separately prepare ChildEntity Command Handlers"}, {"oid": "995e20b2745d08f303c0c976a697a447c0f9a670", "committedDate": "2021-03-23 13:05:59 +0100", "message": "Throw AxonConfigurationException if aggregate member type = an interface"}, {"oid": "7af9eef910dd0557db127b99191e1d00eab1c8a6", "committedDate": "2022-06-08 13:52:34 +0200", "message": "Fix JavaDoc issues"}, {"oid": "4f4a60c4c15b893afc9ba1a83a535927b740cf84", "committedDate": "2023-01-17 09:00:06 +0100", "message": "Use jakarta by default. Where needed code is duplicated to support javax still."}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg0OTA3OQ==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1455#discussion_r444849079", "body": "Nit: I'd replace the type `ArrayList` for `List` here.", "bodyText": "Nit: I'd replace the type ArrayList for List here.", "bodyHTML": "<p dir=\"auto\">Nit: I'd replace the type <code>ArrayList</code> for <code>List</code> here.</p>", "author": "smcvb", "createdAt": "2020-06-24T12:13:00Z", "path": "modelling/src/main/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactory.java", "diffHunk": "@@ -303,62 +311,99 @@ private void inspectAggregateTypes() {\n \n         private String findDeclaredType(Class<?> type) {\n             return AnnotationUtils.findAnnotationAttributes(type, AggregateRoot.class)\n-                                  .map(map -> (String) map.get(\"type\")).filter(i -> i.length() > 0).orElse(type.getSimpleName());\n+                                  .map(map -> (String) map.get(\"type\")).filter(i -> i.length() > 0)\n+                                  .orElse(type.getSimpleName());\n         }\n \n-        private void inspectFields() {\n+        private void inspectFieldsAndMethods() {\n             ServiceLoader<ChildEntityDefinition> childEntityDefinitions =\n                     ServiceLoader.load(ChildEntityDefinition.class, inspectedType.getClassLoader());\n-            boolean persistenceId = false;\n+            ArrayList<Member> entityIdMembers = new ArrayList<>();", "originalCommit": "ee3b11b9e1708fdabecc2974d1f04904fb0689d5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7f42eec03ca30afa91a004799b7790da79b32232", "changed_code": [{"header": "diff --git a/modelling/src/main/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactory.java b/modelling/src/main/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactory.java\nindex 68bd7568f..28e7a2b52 100644\n--- a/modelling/src/main/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactory.java\n+++ b/modelling/src/main/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactory.java\n", "chunk": "@@ -318,32 +318,26 @@ private String findDeclaredType(Class<?> type) {\n         private void inspectFieldsAndMethods() {\n             ServiceLoader<ChildEntityDefinition> childEntityDefinitions =\n                     ServiceLoader.load(ChildEntityDefinition.class, inspectedType.getClassLoader());\n-            ArrayList<Member> entityIdMembers = new ArrayList<>();\n-            ArrayList<Member> persistenceIdMembers = new ArrayList<>();\n-            ArrayList<Member> aggregateVersionMembers = new ArrayList<>();\n+            List<Member> entityIdMembers = new ArrayList<>();\n+            List<Member> persistenceIdMembers = new ArrayList<>();\n+            List<Member> aggregateVersionMembers = new ArrayList<>();\n             for (Class<?> type : handlerInspector.getAllHandlers().keySet()) {\n                 for (Field field : ReflectionUtils.fieldsOf(type)) {\n-                    childEntityDefinitions.forEach(def -> def.createChildDefinition(field, this).ifPresent(child -> {\n-                        children.add(child);\n-                        child.commandHandlers().forEach(handler -> addHandler(allCommandHandlers, type, handler));\n-                    }));\n+                    createChildDefinitionsAndAddHandlers(childEntityDefinitions, type, field);\n                     AnnotationUtils.findAnnotationAttributes(field, EntityId.class)\n-                                   .ifPresent(attributes -> entityIdMembers.add(field));\n+                            .ifPresent(attributes -> entityIdMembers.add(field));\n                     AnnotationUtils.findAnnotationAttributes(field, JAVAX_PERSISTENCE_ID)\n-                                   .ifPresent(attributes -> persistenceIdMembers.add(field));\n+                            .ifPresent(attributes -> persistenceIdMembers.add(field));\n                     AnnotationUtils.findAnnotationAttributes(field, AggregateVersion.class)\n                                    .ifPresent(attributes -> aggregateVersionMembers.add(field));\n                 }\n                 for (Method method : ReflectionUtils.methodsOf(type)) {\n-                    childEntityDefinitions.forEach(def -> def.createChildDefinition(method, this).ifPresent(child -> {\n-                        children.add(child);\n-                        child.commandHandlers().forEach(handler -> addHandler(allCommandHandlers, type, handler));\n-                    }));\n+                    createChildDefinitionsAndAddHandlers(childEntityDefinitions, type, method);\n                     AnnotationUtils.findAnnotationAttributes(method, EntityId.class)\n-                                   .ifPresent(attributes -> {\n-                                       assertValidValueProvidingMethod(method);\n-                                       entityIdMembers.add(method);\n-                                   });\n+                            .ifPresent(attributes -> {\n+                                assertValidValueProvidingMethod(method);\n+                                entityIdMembers.add(method);\n+                            });\n                     AnnotationUtils.findAnnotationAttributes(method, JAVAX_PERSISTENCE_ID)\n                                    .ifPresent(attributes -> {\n                                        assertValidValueProvidingMethod(method);\n", "next_change": {"commit": "f89594495abfe4d65bf43bdc8bc452cb5cdd9afe", "changed_code": [{"header": "diff --git a/modelling/src/main/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactory.java b/modelling/src/main/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactory.java\nindex 28e7a2b52..895f8f03c 100644\n--- a/modelling/src/main/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactory.java\n+++ b/modelling/src/main/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactory.java\n", "chunk": "@@ -325,19 +324,19 @@ private void inspectFieldsAndMethods() {\n                 for (Field field : ReflectionUtils.fieldsOf(type)) {\n                     createChildDefinitionsAndAddHandlers(childEntityDefinitions, type, field);\n                     AnnotationUtils.findAnnotationAttributes(field, EntityId.class)\n-                            .ifPresent(attributes -> entityIdMembers.add(field));\n+                                   .ifPresent(attributes -> entityIdMembers.add(field));\n                     AnnotationUtils.findAnnotationAttributes(field, JAVAX_PERSISTENCE_ID)\n-                            .ifPresent(attributes -> persistenceIdMembers.add(field));\n+                                   .ifPresent(attributes -> persistenceIdMembers.add(field));\n                     AnnotationUtils.findAnnotationAttributes(field, AggregateVersion.class)\n                                    .ifPresent(attributes -> aggregateVersionMembers.add(field));\n                 }\n                 for (Method method : ReflectionUtils.methodsOf(type)) {\n                     createChildDefinitionsAndAddHandlers(childEntityDefinitions, type, method);\n                     AnnotationUtils.findAnnotationAttributes(method, EntityId.class)\n-                            .ifPresent(attributes -> {\n-                                assertValidValueProvidingMethod(method);\n-                                entityIdMembers.add(method);\n-                            });\n+                                   .ifPresent(attributes -> {\n+                                       assertValidValueProvidingMethod(method);\n+                                       entityIdMembers.add(method);\n+                                   });\n                     AnnotationUtils.findAnnotationAttributes(method, JAVAX_PERSISTENCE_ID)\n                                    .ifPresent(attributes -> {\n                                        assertValidValueProvidingMethod(method);\n", "next_change": {"commit": "08c3e18e75bb28e33875eea63a395747f2d324a5", "changed_code": [{"header": "diff --git a/modelling/src/main/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactory.java b/modelling/src/main/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactory.java\nindex 895f8f03c..54d17b68d 100644\n--- a/modelling/src/main/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactory.java\n+++ b/modelling/src/main/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactory.java\n", "chunk": "@@ -320,69 +331,113 @@ private void inspectFieldsAndMethods() {\n             List<Member> entityIdMembers = new ArrayList<>();\n             List<Member> persistenceIdMembers = new ArrayList<>();\n             List<Member> aggregateVersionMembers = new ArrayList<>();\n-            for (Class<?> type : handlerInspector.getAllHandlers().keySet()) {\n-                for (Field field : ReflectionUtils.fieldsOf(type)) {\n-                    createChildDefinitionsAndAddHandlers(childEntityDefinitions, type, field);\n-                    AnnotationUtils.findAnnotationAttributes(field, EntityId.class)\n-                                   .ifPresent(attributes -> entityIdMembers.add(field));\n-                    AnnotationUtils.findAnnotationAttributes(field, JAVAX_PERSISTENCE_ID)\n-                                   .ifPresent(attributes -> persistenceIdMembers.add(field));\n-                    AnnotationUtils.findAnnotationAttributes(field, AggregateVersion.class)\n-                                   .ifPresent(attributes -> aggregateVersionMembers.add(field));\n+            for (Class<?> handlerType : handlerInspector.getAllHandlers().keySet()) {\n+                // Navigate fields for Axon related annotations\n+                for (Field field : ReflectionUtils.fieldsOf(handlerType)) {\n+                    createChildDefinitionsAndAddHandlers(childEntityDefinitions, handlerType, field);\n+                    findAnnotationAttributes(field, EntityId.class).ifPresent(attributes -> entityIdMembers.add(field));\n+                    findAnnotationAttributes(field, JAVAX_PERSISTENCE_ID).ifPresent(\n+                            attributes -> persistenceIdMembers.add(field)\n+                    );\n+                    findAnnotationAttributes(field, AggregateVersion.class).ifPresent(\n+                            attributes -> aggregateVersionMembers.add(field)\n+                    );\n                 }\n-                for (Method method : ReflectionUtils.methodsOf(type)) {\n-                    createChildDefinitionsAndAddHandlers(childEntityDefinitions, type, method);\n-                    AnnotationUtils.findAnnotationAttributes(method, EntityId.class)\n-                                   .ifPresent(attributes -> {\n-                                       assertValidValueProvidingMethod(method);\n-                                       entityIdMembers.add(method);\n-                                   });\n-                    AnnotationUtils.findAnnotationAttributes(method, JAVAX_PERSISTENCE_ID)\n-                                   .ifPresent(attributes -> {\n-                                       assertValidValueProvidingMethod(method);\n-                                       persistenceIdMembers.add(method);\n-                                   });\n-                    AnnotationUtils.findAnnotationAttributes(method, AggregateVersion.class)\n-                                   .ifPresent(attributes -> {\n-                                       assertValidValueProvidingMethod(method);\n-                                       aggregateVersionMembers.add(method);\n-                                   });\n+                // Navigate methods for Axon related annotations\n+                for (Method method : ReflectionUtils.methodsOf(handlerType)) {\n+                    createChildDefinitionsAndAddHandlers(childEntityDefinitions, handlerType, method);\n+                    findAnnotationAttributes(method, EntityId.class).ifPresent(attributes -> {\n+                        assertValidValueProvidingMethod(method, EntityId.class.getSimpleName());\n+                        entityIdMembers.add(method);\n+                    });\n+                    findAnnotationAttributes(method, JAVAX_PERSISTENCE_ID).ifPresent(attributes -> {\n+                        assertValidValueProvidingMethod(method, JAVAX_PERSISTENCE_ID);\n+                        persistenceIdMembers.add(method);\n+                    });\n+                    findAnnotationAttributes(method, AggregateVersion.class).ifPresent(attributes -> {\n+                        assertValidValueProvidingMethod(method, AggregateVersion.class.getSimpleName());\n+                        aggregateVersionMembers.add(method);\n+                    });\n                 }\n             }\n \n             findIdentifierMember(distinct(entityIdMembers), distinct(persistenceIdMembers))\n                     .ifPresent(this::setIdentifierAndRoutingKey);\n-            if (!aggregateVersionMembers.isEmpty()) {\n-                setVersionMember(aggregateVersionMembers.get(0));\n-            }\n+            setVersionMember(aggregateVersionMembers);\n             assertIdentifierValidity(identifierMember);\n         }\n \n         private void createChildDefinitionsAndAddHandlers(ServiceLoader<ChildEntityDefinition> childEntityDefinitions,\n                                                           Class<?> type,\n-                                                          Member member) {\n-            childEntityDefinitions.forEach(def -> def.createChildDefinition(member, this).ifPresent(child -> {\n-                children.add(child);\n-                child.commandHandlers().forEach(handler -> addHandler(allCommandHandlers, type, handler));\n-            }));\n+                                                          Member entityMember) {\n+            childEntityDefinitions.forEach(\n+                    definition -> definition.createChildDefinition(entityMember, this)\n+                                            .ifPresent(child -> {\n+                                                children.add(child);\n+                                                child.commandHandlers().forEach(\n+                                                        handler -> addHandler(allCommandHandlers, type, handler)\n+                                                );\n+                                            })\n+            );\n+        }\n+\n+        private void assertValidValueProvidingMethod(Method method, String annotationName) {\n+            if (method.getParameterCount() != 0) {\n+                throw new AggregateModellingException(format(\n+                        \"Aggregate [%s] has an [%s] annotated method [%s] with parameters, \"\n+                                + \"whilst none are allowed on such a method.\",\n+                        inspectedType, annotationName, method\n+                ));\n+            }\n+            if (method.getReturnType() == Void.TYPE) {\n+                throw new AggregateModellingException(format(\n+                        \"Aggregate [%s] has an [%s] annotated method [%s] with void return type, \"\n+                                + \"whilst a return value is required for such a method.\",\n+                        inspectedType, annotationName, method\n+                ));\n+            }\n+        }\n+\n+        private Optional<Member> findIdentifierMember(List<Member> entityIdMembers,\n+                                                      List<Member> persistenceIdMembers) {\n+            if (entityIdMembers.size() > 1) {\n+                throw new AggregateModellingException(format(\n+                        \"Aggregate [%s] has more than one identifier member, while only a single member is allowed.\",\n+                        inspectedType\n+                ));\n+            }\n+            if (!entityIdMembers.isEmpty()) {\n+                return Optional.of(entityIdMembers.get(0));\n+            } else if (!persistenceIdMembers.isEmpty()) {\n+                return Optional.of(persistenceIdMembers.get(0));\n+            }\n+            return Optional.empty();\n         }\n \n         private void setIdentifierAndRoutingKey(Member identifier) {\n             identifierMember = identifier;\n-            routingKey = findRoutingKey((AccessibleObject) identifier)\n-                    .orElseGet(() -> getMemberIdentifierName(identifier));\n+            routingKey = findRoutingKey((AccessibleObject) identifier).orElseGet(\n+                    () -> getMemberIdentifierName(identifier)\n+            );\n         }\n \n-        private String getMemberIdentifierName(Member identifier) {\n-            String identifierName = identifier.getName();\n-            if (identifier instanceof Method && isGetterByConvention(identifierName)) {\n-                return stripGetterConvention(identifierName);\n-            }\n-            return identifierName;\n+        private Optional<String> findRoutingKey(AccessibleObject accessibleObject) {\n+            return AnnotationUtils.<String>findAnnotationAttribute(accessibleObject, EntityId.class, \"routingKey\")\n+                    .filter(key -> !\"\".equals(key));\n         }\n \n-        private String stripGetterConvention(String identifierName) {\n-            return identifierName.substring(3, 4).toLowerCase() + identifierName.substring(4);\n+        /**\n+         * Return the given {@code identifierMember}'s {@link Member#getName()}. If the given {@code identifierMember}\n+         * is of type {@link Method} and it resembles a regular getter method, the {@code \"get\"} will be stripped off.\n+         *\n+         * @param identifierMember the {@link Member} to retrieve the name for\n+         * @return the identifier name tied to the given {@code identifierMember}\n+         */\n+        private String getMemberIdentifierName(Member identifierMember) {\n+            String identifierName = identifierMember.getName();\n+            return identifierMember instanceof Method && isGetterByConvention(identifierName)\n+                    ? stripGetterConvention(identifierName)\n+                    : identifierName;\n         }\n \n         private boolean isGetterByConvention(String identifierName) {\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "6ad2c3106254d25bb2684f46758596d9c7ca2b86", "changed_code": [{"header": "diff --git a/modelling/src/main/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactory.java b/modelling/src/main/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactory.java\nindex 68bd7568f..d6bd1b918 100644\n--- a/modelling/src/main/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactory.java\n+++ b/modelling/src/main/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactory.java\n", "chunk": "@@ -310,73 +324,91 @@ private void inspectAggregateTypes() {\n         }\n \n         private String findDeclaredType(Class<?> type) {\n-            return AnnotationUtils.findAnnotationAttributes(type, AggregateRoot.class)\n-                                  .map(map -> (String) map.get(\"type\")).filter(i -> i.length() > 0)\n-                                  .orElse(type.getSimpleName());\n+            return findAnnotationAttributes(type, AggregateRoot.class)\n+                    .map(map -> (String) map.get(\"type\")).filter(i -> i.length() > 0)\n+                    .orElse(type.getSimpleName());\n         }\n \n         private void inspectFieldsAndMethods() {\n             ServiceLoader<ChildEntityDefinition> childEntityDefinitions =\n                     ServiceLoader.load(ChildEntityDefinition.class, inspectedType.getClassLoader());\n-            ArrayList<Member> entityIdMembers = new ArrayList<>();\n-            ArrayList<Member> persistenceIdMembers = new ArrayList<>();\n-            ArrayList<Member> aggregateVersionMembers = new ArrayList<>();\n-            for (Class<?> type : handlerInspector.getAllHandlers().keySet()) {\n-                for (Field field : ReflectionUtils.fieldsOf(type)) {\n-                    childEntityDefinitions.forEach(def -> def.createChildDefinition(field, this).ifPresent(child -> {\n-                        children.add(child);\n-                        child.commandHandlers().forEach(handler -> addHandler(allCommandHandlers, type, handler));\n-                    }));\n-                    AnnotationUtils.findAnnotationAttributes(field, EntityId.class)\n-                                   .ifPresent(attributes -> entityIdMembers.add(field));\n-                    AnnotationUtils.findAnnotationAttributes(field, JAVAX_PERSISTENCE_ID)\n-                                   .ifPresent(attributes -> persistenceIdMembers.add(field));\n-                    AnnotationUtils.findAnnotationAttributes(field, AggregateVersion.class)\n-                                   .ifPresent(attributes -> aggregateVersionMembers.add(field));\n+            List<Member> entityIdMembers = new ArrayList<>();\n+            List<Member> persistenceIdMembers = new ArrayList<>();\n+            List<Member> aggregateVersionMembers = new ArrayList<>();\n+            for (Class<?> handlerType : handlerInspector.getAllHandlers().keySet()) {\n+                // Navigate fields for Axon related annotations\n+                for (Field field : ReflectionUtils.fieldsOf(handlerType)) {\n+                    createChildDefinitionsAndAddHandlers(childEntityDefinitions, handlerType, field);\n+                    findAnnotationAttributes(field, EntityId.class).ifPresent(attributes -> entityIdMembers.add(field));\n+                    findAnnotationAttributes(field, JAVAX_PERSISTENCE_ID).ifPresent(\n+                            attributes -> persistenceIdMembers.add(field)\n+                    );\n+                    findAnnotationAttributes(field, AggregateVersion.class).ifPresent(\n+                            attributes -> aggregateVersionMembers.add(field)\n+                    );\n                 }\n-                for (Method method : ReflectionUtils.methodsOf(type)) {\n-                    childEntityDefinitions.forEach(def -> def.createChildDefinition(method, this).ifPresent(child -> {\n-                        children.add(child);\n-                        child.commandHandlers().forEach(handler -> addHandler(allCommandHandlers, type, handler));\n-                    }));\n-                    AnnotationUtils.findAnnotationAttributes(method, EntityId.class)\n-                                   .ifPresent(attributes -> {\n-                                       assertValidValueProvidingMethod(method);\n-                                       entityIdMembers.add(method);\n-                                   });\n-                    AnnotationUtils.findAnnotationAttributes(method, JAVAX_PERSISTENCE_ID)\n-                                   .ifPresent(attributes -> {\n-                                       assertValidValueProvidingMethod(method);\n-                                       persistenceIdMembers.add(method);\n-                                   });\n-                    AnnotationUtils.findAnnotationAttributes(method, AggregateVersion.class)\n-                                   .ifPresent(attributes -> {\n-                                       assertValidValueProvidingMethod(method);\n-                                       aggregateVersionMembers.add(method);\n-                                   });\n+                // Navigate methods for Axon related annotations\n+                for (Method method : ReflectionUtils.methodsOf(handlerType)) {\n+                    createChildDefinitionsAndAddHandlers(childEntityDefinitions, handlerType, method);\n+                    findAnnotationAttributes(method, EntityId.class).ifPresent(attributes -> {\n+                        assertValidValueProvidingMethod(method, EntityId.class.getSimpleName());\n+                        entityIdMembers.add(method);\n+                    });\n+                    findAnnotationAttributes(method, JAVAX_PERSISTENCE_ID).ifPresent(attributes -> {\n+                        assertValidValueProvidingMethod(method, JAVAX_PERSISTENCE_ID);\n+                        persistenceIdMembers.add(method);\n+                    });\n+                    findAnnotationAttributes(method, AggregateVersion.class).ifPresent(attributes -> {\n+                        assertValidValueProvidingMethod(method, AggregateVersion.class.getSimpleName());\n+                        aggregateVersionMembers.add(method);\n+                    });\n                 }\n             }\n \n             findIdentifierMember(distinct(entityIdMembers), distinct(persistenceIdMembers))\n                     .ifPresent(this::setIdentifierAndRoutingKey);\n-            if (!aggregateVersionMembers.isEmpty()) {\n-                setVersionMember(aggregateVersionMembers.get(0));\n-            }\n+            setVersionMember(aggregateVersionMembers);\n             assertIdentifierValidity(identifierMember);\n         }\n \n-        private void setIdentifierAndRoutingKey(Member identifier) {\n-            identifierMember = identifier;\n-            routingKey = findRoutingKey((AccessibleObject) identifier)\n-                    .orElseGet(identifier::getName);\n+        private void createChildDefinitionsAndAddHandlers(ServiceLoader<ChildEntityDefinition> childEntityDefinitions,\n+                                                          Class<?> type,\n+                                                          Member entityMember) {\n+            childEntityDefinitions.forEach(\n+                    definition -> definition.createChildDefinition(entityMember, this)\n+                                            .ifPresent(child -> {\n+                                                children.add(child);\n+                                                child.commandHandlers().forEach(\n+                                                        handler -> addHandler(allCommandHandlers, type, handler)\n+                                                );\n+                                            })\n+            );\n+        }\n+\n+        private void assertValidValueProvidingMethod(Method method, String annotationName) {\n+            if (method.getParameterCount() != 0) {\n+                throw new AggregateModellingException(format(\n+                        \"Aggregate [%s] has an [%s] annotated method [%s] with parameters, \"\n+                                + \"whilst none are allowed on such a method.\",\n+                        inspectedType, annotationName, method\n+                ));\n+            }\n+            if (method.getReturnType() == Void.TYPE) {\n+                throw new AggregateModellingException(format(\n+                        \"Aggregate [%s] has an [%s] annotated method [%s] with void return type, \"\n+                                + \"whilst a return value is required for such a method.\",\n+                        inspectedType, annotationName, method\n+                ));\n+            }\n         }\n \n         private Optional<Member> findIdentifierMember(List<Member> entityIdMembers,\n                                                       List<Member> persistenceIdMembers) {\n             if (entityIdMembers.size() > 1) {\n                 throw new AggregateModellingException(format(\n-                        \"Aggregate [%s] has more than one identifier member\",\n-                        inspectedType));\n+                        \"Aggregate [%s] has more than one identifier member, while only a single member is allowed.\",\n+                        inspectedType\n+                ));\n             }\n             if (!entityIdMembers.isEmpty()) {\n                 return Optional.of(entityIdMembers.get(0));\n", "next_change": null}]}, "commits_in_main": [{"oid": "6ad2c3106254d25bb2684f46758596d9c7ca2b86", "message": "Merge commit", "committedDate": null}, {"oid": "a280c8e49c4a1dfa946ea77b3185b9f54d33fc18", "committedDate": "2020-11-03 17:05:42 +0100", "message": "Use a map of class to ChildEntity"}, {"oid": "ffb8d7dc320e7514b39ecde3099661c24588614b", "committedDate": "2020-11-03 17:08:40 +0100", "message": "Clean up touched code"}, {"oid": "62ab41fd35daafd5c95f92abd44eef822dc3d8d7", "committedDate": "2020-11-09 17:08:19 +0100", "message": "Adjust model factory to be based on inspected types"}, {"oid": "32b1f8b5655a2e3ea9e1922757ab34b016e3985a", "committedDate": "2020-11-10 10:01:40 +0100", "message": "Rename field"}, {"oid": "af9922413402a8347b070d314bd5cb3e674b6ad3", "committedDate": "2021-01-13 14:30:18 +0100", "message": "Separately prepare ChildEntity Command Handlers"}, {"oid": "995e20b2745d08f303c0c976a697a447c0f9a670", "committedDate": "2021-03-23 13:05:59 +0100", "message": "Throw AxonConfigurationException if aggregate member type = an interface"}, {"oid": "7af9eef910dd0557db127b99191e1d00eab1c8a6", "committedDate": "2022-06-08 13:52:34 +0200", "message": "Fix JavaDoc issues"}, {"oid": "4f4a60c4c15b893afc9ba1a83a535927b740cf84", "committedDate": "2023-01-17 09:00:06 +0100", "message": "Use jakarta by default. Where needed code is duplicated to support javax still."}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg1NzQ5MA==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1455#discussion_r444857490", "body": "I'd add something to this exception stating that no parameters are expected for an aggregate's annotated methods. Should be careful with the wording though, as a command handler is also an annotated method of an aggregate of course :sweat_smile: ", "bodyText": "I'd add something to this exception stating that no parameters are expected for an aggregate's annotated methods. Should be careful with the wording though, as a command handler is also an annotated method of an aggregate of course \ud83d\ude05", "bodyHTML": "<p dir=\"auto\">I'd add something to this exception stating that no parameters are expected for an aggregate's annotated methods. Should be careful with the wording though, as a command handler is also an annotated method of an aggregate of course <g-emoji class=\"g-emoji\" alias=\"sweat_smile\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f605.png\">\ud83d\ude05</g-emoji></p>", "author": "smcvb", "createdAt": "2020-06-24T12:28:46Z", "path": "modelling/src/main/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactory.java", "diffHunk": "@@ -303,62 +311,99 @@ private void inspectAggregateTypes() {\n \n         private String findDeclaredType(Class<?> type) {\n             return AnnotationUtils.findAnnotationAttributes(type, AggregateRoot.class)\n-                                  .map(map -> (String) map.get(\"type\")).filter(i -> i.length() > 0).orElse(type.getSimpleName());\n+                                  .map(map -> (String) map.get(\"type\")).filter(i -> i.length() > 0)\n+                                  .orElse(type.getSimpleName());\n         }\n \n-        private void inspectFields() {\n+        private void inspectFieldsAndMethods() {\n             ServiceLoader<ChildEntityDefinition> childEntityDefinitions =\n                     ServiceLoader.load(ChildEntityDefinition.class, inspectedType.getClassLoader());\n-            boolean persistenceId = false;\n+            ArrayList<Member> entityIdMembers = new ArrayList<>();\n+            ArrayList<Member> persistenceIdMembers = new ArrayList<>();\n+            ArrayList<Member> aggregateVersionMembers = new ArrayList<>();\n             for (Class<?> type : handlerInspector.getAllHandlers().keySet()) {\n                 for (Field field : ReflectionUtils.fieldsOf(type)) {\n                     childEntityDefinitions.forEach(def -> def.createChildDefinition(field, this).ifPresent(child -> {\n                         children.add(child);\n-                        child.commandHandlers().forEach(handler -> addHandler(allCommandHandlers,\n-                                                                              type,\n-                                                                              handler));\n+                        child.commandHandlers().forEach(handler -> addHandler(allCommandHandlers, type, handler));\n                     }));\n-\n-                    if (AnnotationUtils.findAnnotationAttributes(field, EntityId.class).isPresent()) {\n-                        if (identifierField != null && !field.equals(identifierField) && !persistenceId) {\n-                            throw new AggregateModellingException(format(\n-                                    \"Aggregate [%s] has two identifier fields [%s] and [%s].\",\n-                                    inspectedType,\n-                                    identifierField,\n-                                    field));\n-                        }\n-                        persistenceId = false;\n-                        identifierField = field;\n-                        Map<String, Object> attributes =\n-                                AnnotationUtils.findAnnotationAttributes(field, EntityId.class).get();\n-                        if (!\"\".equals(attributes.get(\"routingKey\"))) {\n-                            routingKey = (String) attributes.get(\"routingKey\");\n-                        } else {\n-                            routingKey = field.getName();\n-                        }\n-                    }\n-                    if (identifierField == null\n-                            && AnnotationUtils.findAnnotationAttributes(field, \"javax.persistence.Id\")\n-                                              .isPresent()) {\n-                            persistenceId = true;\n-                            identifierField = field;\n-                            routingKey = field.getName();\n-                    }\n+                    AnnotationUtils.findAnnotationAttributes(field, EntityId.class)\n+                                   .ifPresent(attributes -> entityIdMembers.add(field));\n+                    AnnotationUtils.findAnnotationAttributes(field, JAVAX_PERSISTENCE_ID)\n+                                   .ifPresent(attributes -> persistenceIdMembers.add(field));\n                     AnnotationUtils.findAnnotationAttributes(field, AggregateVersion.class)\n+                                   .ifPresent(attributes -> aggregateVersionMembers.add(field));\n+                }\n+                for (Method method : ReflectionUtils.methodsOf(type)) {\n+                    childEntityDefinitions.forEach(def -> def.createChildDefinition(method, this).ifPresent(child -> {\n+                        children.add(child);\n+                        child.commandHandlers().forEach(handler -> addHandler(allCommandHandlers, type, handler));\n+                    }));\n+                    AnnotationUtils.findAnnotationAttributes(method, EntityId.class)\n                                    .ifPresent(attributes -> {\n-                                       if (versionField != null && !field.equals(versionField)) {\n-                                           throw new AggregateModellingException(format(\n-                                                   \"Aggregate [%s] has two version fields [%s] and [%s].\",\n-                                                   inspectedType,\n-                                                   versionField,\n-                                                   field));\n-                                       }\n-                                       versionField = field;\n+                                       assertValidValueProvidingMethod(method);\n+                                       entityIdMembers.add(method);\n+                                   });\n+                    AnnotationUtils.findAnnotationAttributes(method, JAVAX_PERSISTENCE_ID)\n+                                   .ifPresent(attributes -> {\n+                                       assertValidValueProvidingMethod(method);\n+                                       persistenceIdMembers.add(method);\n+                                   });\n+                    AnnotationUtils.findAnnotationAttributes(method, AggregateVersion.class)\n+                                   .ifPresent(attributes -> {\n+                                       assertValidValueProvidingMethod(method);\n+                                       aggregateVersionMembers.add(method);\n                                    });\n                 }\n             }\n-            if (identifierField != null) {\n-                final Class<?> idClazz = identifierField.getType();\n+\n+            findIdentifierMember(distinct(entityIdMembers), distinct(persistenceIdMembers))\n+                    .ifPresent(this::setIdentifierAndRoutingKey);\n+            if (!aggregateVersionMembers.isEmpty()) {\n+                setVersionMember(aggregateVersionMembers.get(0));\n+            }\n+            assertIdentifierValidity(identifierMember);\n+        }\n+\n+        private void setIdentifierAndRoutingKey(Member identifier) {\n+            identifierMember = identifier;\n+            routingKey = findRoutingKey((AccessibleObject) identifier)\n+                    .orElseGet(identifier::getName);\n+        }\n+\n+        private Optional<Member> findIdentifierMember(List<Member> entityIdMembers,\n+                                                      List<Member> persistenceIdMembers) {\n+            if (entityIdMembers.size() > 1) {\n+                throw new AggregateModellingException(format(\n+                        \"Aggregate [%s] has more than one identifier member\",\n+                        inspectedType));\n+            }\n+            if (!entityIdMembers.isEmpty()) {\n+                return Optional.of(entityIdMembers.get(0));\n+            } else if (!persistenceIdMembers.isEmpty()) {\n+                return Optional.of(persistenceIdMembers.get(0));\n+            }\n+            return Optional.empty();\n+        }\n+\n+        private void assertValidValueProvidingMethod(Method method) {\n+            if (method.getParameterCount() != 0) {\n+                throw new AggregateModellingException(format(\n+                        \"Aggregate [%s] has an annotated method [%s] with parameters\",", "originalCommit": "ee3b11b9e1708fdabecc2974d1f04904fb0689d5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE5ODUzMQ==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1455#discussion_r457198531", "bodyText": "Aggregate [%s] has an annotated value providing method [%s] with parameters maybe?\nThat would also be applicable to Aggregate [%s] has an annotated value providing method [%s] with void return type, but a return value is required", "author": "sandjelkovic", "createdAt": "2020-07-20T09:02:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg1NzQ5MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODA0OTA3MA==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1455#discussion_r458049070", "bodyText": "Message in the exception has been adjusted to be slightly more specific.", "author": "smcvb", "createdAt": "2020-07-21T12:13:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg1NzQ5MA=="}], "type": "inlineReview", "revised_code": {"commit": "08c3e18e75bb28e33875eea63a395747f2d324a5", "changed_code": [{"header": "diff --git a/modelling/src/main/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactory.java b/modelling/src/main/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactory.java\nindex 68bd7568f..54d17b68d 100644\n--- a/modelling/src/main/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactory.java\n+++ b/modelling/src/main/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactory.java\n", "chunk": "@@ -386,19 +414,64 @@ private Optional<Member> findIdentifierMember(List<Member> entityIdMembers,\n             return Optional.empty();\n         }\n \n-        private void assertValidValueProvidingMethod(Method method) {\n-            if (method.getParameterCount() != 0) {\n-                throw new AggregateModellingException(format(\n-                        \"Aggregate [%s] has an annotated method [%s] with parameters\",\n-                        inspectedType,\n-                        method));\n+        private void setIdentifierAndRoutingKey(Member identifier) {\n+            identifierMember = identifier;\n+            routingKey = findRoutingKey((AccessibleObject) identifier).orElseGet(\n+                    () -> getMemberIdentifierName(identifier)\n+            );\n+        }\n+\n+        private Optional<String> findRoutingKey(AccessibleObject accessibleObject) {\n+            return AnnotationUtils.<String>findAnnotationAttribute(accessibleObject, EntityId.class, \"routingKey\")\n+                    .filter(key -> !\"\".equals(key));\n+        }\n+\n+        /**\n+         * Return the given {@code identifierMember}'s {@link Member#getName()}. If the given {@code identifierMember}\n+         * is of type {@link Method} and it resembles a regular getter method, the {@code \"get\"} will be stripped off.\n+         *\n+         * @param identifierMember the {@link Member} to retrieve the name for\n+         * @return the identifier name tied to the given {@code identifierMember}\n+         */\n+        private String getMemberIdentifierName(Member identifierMember) {\n+            String identifierName = identifierMember.getName();\n+            return identifierMember instanceof Method && isGetterByConvention(identifierName)\n+                    ? stripGetterConvention(identifierName)\n+                    : identifierName;\n+        }\n+\n+        private boolean isGetterByConvention(String identifierName) {\n+            return identifierName.startsWith(\"get\")\n+                    && identifierName.length() >= 4\n+                    && Character.isUpperCase(identifierName.charAt(3));\n+        }\n+\n+        private String stripGetterConvention(String identifierName) {\n+            return identifierName.substring(3, 4).toLowerCase() + identifierName.substring(4);\n+        }\n+\n+        private void setVersionMember(List<Member> versionMembers) {\n+            if (versionMembers.isEmpty()) {\n+                logger.debug(\"No @AggregateVersion annotated Member found.\");\n+                return;\n             }\n-            if (method.getReturnType() == Void.TYPE) {\n+            if (versionMembers.size() > 1) {\n+                String versionMembersString = versionMembers.stream()\n+                                                            .map(Member::getName)\n+                                                            .collect(Collectors.joining(\", \"));\n                 throw new AggregateModellingException(format(\n-                        \"Aggregate [%s] has an annotated method [%s] with void return type, but a return value is required\",\n-                        inspectedType,\n-                        method));\n+                        \"Aggregate [%s] has two or more @AggregateVersion annotated members, \"\n+                                + \"whilst only a single member is allowed.\\n \"\n+                                + \"The following version members have been found: %s\",\n+                        inspectedType, versionMembersString\n+                ));\n             }\n+\n+            logger.debug(\n+                    \"@AggregateVersion annotated Member [{}] has been found and set as the [{}] Aggregate Version.\",\n+                    versionMembers.get(0).getName(), inspectedType\n+            );\n+            this.versionMember = versionMembers.get(0);\n         }\n \n         private void assertIdentifierValidity(Member identifier) {\n", "next_change": null}]}, "revised_code_in_main": {"commit": "6ad2c3106254d25bb2684f46758596d9c7ca2b86", "changed_code": [{"header": "diff --git a/modelling/src/main/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactory.java b/modelling/src/main/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactory.java\nindex 68bd7568f..d6bd1b918 100644\n--- a/modelling/src/main/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactory.java\n+++ b/modelling/src/main/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactory.java\n", "chunk": "@@ -386,19 +418,64 @@ private Optional<Member> findIdentifierMember(List<Member> entityIdMembers,\n             return Optional.empty();\n         }\n \n-        private void assertValidValueProvidingMethod(Method method) {\n-            if (method.getParameterCount() != 0) {\n-                throw new AggregateModellingException(format(\n-                        \"Aggregate [%s] has an annotated method [%s] with parameters\",\n-                        inspectedType,\n-                        method));\n+        private void setIdentifierAndRoutingKey(Member identifier) {\n+            identifierMember = identifier;\n+            routingKey = findRoutingKey((AccessibleObject) identifier).orElseGet(\n+                    () -> getMemberIdentifierName(identifier)\n+            );\n+        }\n+\n+        private Optional<String> findRoutingKey(AccessibleObject accessibleObject) {\n+            return AnnotationUtils.<String>findAnnotationAttribute(accessibleObject, EntityId.class, \"routingKey\")\n+                    .filter(key -> !\"\".equals(key));\n+        }\n+\n+        /**\n+         * Return the given {@code identifierMember}'s {@link Member#getName()}. If the given {@code identifierMember}\n+         * is of type {@link Method} and it resembles a regular getter method, the {@code \"get\"} will be stripped off.\n+         *\n+         * @param identifierMember the {@link Member} to retrieve the name for\n+         * @return the identifier name tied to the given {@code identifierMember}\n+         */\n+        private String getMemberIdentifierName(Member identifierMember) {\n+            String identifierName = identifierMember.getName();\n+            return identifierMember instanceof Method && isGetterByConvention(identifierName)\n+                    ? stripGetterConvention(identifierName)\n+                    : identifierName;\n+        }\n+\n+        private boolean isGetterByConvention(String identifierName) {\n+            return identifierName.startsWith(\"get\")\n+                    && identifierName.length() >= 4\n+                    && Character.isUpperCase(identifierName.charAt(3));\n+        }\n+\n+        private String stripGetterConvention(String identifierName) {\n+            return identifierName.substring(3, 4).toLowerCase() + identifierName.substring(4);\n+        }\n+\n+        private void setVersionMember(List<Member> versionMembers) {\n+            if (versionMembers.isEmpty()) {\n+                logger.debug(\"No @AggregateVersion annotated Member found.\");\n+                return;\n             }\n-            if (method.getReturnType() == Void.TYPE) {\n+            if (versionMembers.size() > 1) {\n+                String versionMembersString = versionMembers.stream()\n+                                                            .map(Member::getName)\n+                                                            .collect(Collectors.joining(\", \"));\n                 throw new AggregateModellingException(format(\n-                        \"Aggregate [%s] has an annotated method [%s] with void return type, but a return value is required\",\n-                        inspectedType,\n-                        method));\n+                        \"Aggregate [%s] has two or more @AggregateVersion annotated members, \"\n+                                + \"whilst only a single member is allowed.\\n \"\n+                                + \"The following version members have been found: %s\",\n+                        inspectedType, versionMembersString\n+                ));\n             }\n+\n+            logger.debug(\n+                    \"@AggregateVersion annotated Member [{}] has been found and set as the [{}] Aggregate Version.\",\n+                    versionMembers.get(0).getName(), inspectedType\n+            );\n+            this.versionMember = versionMembers.get(0);\n         }\n \n         private void assertIdentifierValidity(Member identifier) {\n", "next_change": null}]}, "commits_in_main": [{"oid": "6ad2c3106254d25bb2684f46758596d9c7ca2b86", "message": "Merge commit", "committedDate": null}, {"oid": "a280c8e49c4a1dfa946ea77b3185b9f54d33fc18", "committedDate": "2020-11-03 17:05:42 +0100", "message": "Use a map of class to ChildEntity"}, {"oid": "ffb8d7dc320e7514b39ecde3099661c24588614b", "committedDate": "2020-11-03 17:08:40 +0100", "message": "Clean up touched code"}, {"oid": "62ab41fd35daafd5c95f92abd44eef822dc3d8d7", "committedDate": "2020-11-09 17:08:19 +0100", "message": "Adjust model factory to be based on inspected types"}, {"oid": "32b1f8b5655a2e3ea9e1922757ab34b016e3985a", "committedDate": "2020-11-10 10:01:40 +0100", "message": "Rename field"}, {"oid": "af9922413402a8347b070d314bd5cb3e674b6ad3", "committedDate": "2021-01-13 14:30:18 +0100", "message": "Separately prepare ChildEntity Command Handlers"}, {"oid": "995e20b2745d08f303c0c976a697a447c0f9a670", "committedDate": "2021-03-23 13:05:59 +0100", "message": "Throw AxonConfigurationException if aggregate member type = an interface"}, {"oid": "7af9eef910dd0557db127b99191e1d00eab1c8a6", "committedDate": "2022-06-08 13:52:34 +0200", "message": "Fix JavaDoc issues"}, {"oid": "4f4a60c4c15b893afc9ba1a83a535927b740cf84", "committedDate": "2023-01-17 09:00:06 +0100", "message": "Use jakarta by default. Where needed code is duplicated to support javax still."}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg4MTM1NQ==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1455#discussion_r444881355", "body": "Somewhat of a bummer, but this isn't backwards compatible. Than again, chances are slim users have implemented this themselves...let's discuss whether we should go forward with this or deprecate the `Field` methods and add a `Member` method. \r\n\r\nThe latter would introduce a similar change as you did for the `AbstractChildEntityDefinition#isFieldTypeSupported(Field)`, on all the methods where `Field` has been replaced by `Member`.", "bodyText": "Somewhat of a bummer, but this isn't backwards compatible. Than again, chances are slim users have implemented this themselves...let's discuss whether we should go forward with this or deprecate the Field methods and add a Member method.\nThe latter would introduce a similar change as you did for the AbstractChildEntityDefinition#isFieldTypeSupported(Field), on all the methods where Field has been replaced by Member.", "bodyHTML": "<p dir=\"auto\">Somewhat of a bummer, but this isn't backwards compatible. Than again, chances are slim users have implemented this themselves...let's discuss whether we should go forward with this or deprecate the <code>Field</code> methods and add a <code>Member</code> method.</p>\n<p dir=\"auto\">The latter would introduce a similar change as you did for the <code>AbstractChildEntityDefinition#isFieldTypeSupported(Field)</code>, on all the methods where <code>Field</code> has been replaced by <code>Member</code>.</p>", "author": "smcvb", "createdAt": "2020-06-24T13:11:03Z", "path": "modelling/src/main/java/org/axonframework/modelling/command/ForwardingMode.java", "diffHunk": "@@ -34,12 +34,12 @@\n     /**\n      * Initializes an instance of a {@link ForwardingMode}.\n      *\n-     * @param field       The {@link java.lang.reflect.Field} to apply a ForwardingMode on. Provided to be able to check\n+     * @param member      The {@link java.lang.reflect.Member} to apply a ForwardingMode on. Provided to be able to check\n      *                    for annotations attributes which might assist in the forwarding process.\n      * @param childEntity A {@link EntityModel} constructed from the\n      *                    given {@code field}.\n      */\n-    default void initialize(Field field, EntityModel childEntity) {\n+    default void initialize(Member member, EntityModel childEntity) {", "originalCommit": "ee3b11b9e1708fdabecc2974d1f04904fb0689d5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUzNzQyMA==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1455#discussion_r457537420", "bodyText": "Resolved through internal discussion to be a none issue.", "author": "smcvb", "createdAt": "2020-07-20T16:25:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg4MTM1NQ=="}], "type": "inlineReview", "revised_code": {"commit": "e92bdc7082a4a9d8fa1027e496139c655a7b2874", "changed_code": [{"header": "diff --git a/modelling/src/main/java/org/axonframework/modelling/command/ForwardingMode.java b/modelling/src/main/java/org/axonframework/modelling/command/ForwardingMode.java\nindex f73e328ee..fdc558b62 100644\n--- a/modelling/src/main/java/org/axonframework/modelling/command/ForwardingMode.java\n+++ b/modelling/src/main/java/org/axonframework/modelling/command/ForwardingMode.java\n", "chunk": "@@ -34,17 +34,16 @@\n     /**\n      * Initializes an instance of a {@link ForwardingMode}.\n      *\n-     * @param member      The {@link java.lang.reflect.Member} to apply a ForwardingMode on. Provided to be able to check\n-     *                    for annotations attributes which might assist in the forwarding process.\n-     * @param childEntity A {@link EntityModel} constructed from the\n-     *                    given {@code field}.\n+     * @param member      The {@link java.lang.reflect.Member} to apply a ForwardingMode on. Provided to be able to\n+     *                    check for annotations attributes which might assist in the forwarding process.\n+     * @param childEntity A {@link EntityModel} constructed from the given {@code field}.\n      */\n     default void initialize(Member member, EntityModel childEntity) {\n     }\n \n     /**\n-     * Filter the given {@link java.util.stream.Stream} of {@code candidates} which are to handle the supplied\n-     * {@code message}.\n+     * Filter the given {@link java.util.stream.Stream} of {@code candidates} which are to handle the supplied {@code\n+     * message}.\n      *\n      * @param message    The message of type {@code T} to be forwarded.\n      * @param candidates The {@link java.util.stream.Stream} of candidates to filter.\n", "next_change": null}]}, "revised_code_in_main": {"commit": "6ad2c3106254d25bb2684f46758596d9c7ca2b86", "changed_code": [{"header": "diff --git a/modelling/src/main/java/org/axonframework/modelling/command/ForwardingMode.java b/modelling/src/main/java/org/axonframework/modelling/command/ForwardingMode.java\nindex f73e328ee..fdc558b62 100644\n--- a/modelling/src/main/java/org/axonframework/modelling/command/ForwardingMode.java\n+++ b/modelling/src/main/java/org/axonframework/modelling/command/ForwardingMode.java\n", "chunk": "@@ -34,17 +34,16 @@\n     /**\n      * Initializes an instance of a {@link ForwardingMode}.\n      *\n-     * @param member      The {@link java.lang.reflect.Member} to apply a ForwardingMode on. Provided to be able to check\n-     *                    for annotations attributes which might assist in the forwarding process.\n-     * @param childEntity A {@link EntityModel} constructed from the\n-     *                    given {@code field}.\n+     * @param member      The {@link java.lang.reflect.Member} to apply a ForwardingMode on. Provided to be able to\n+     *                    check for annotations attributes which might assist in the forwarding process.\n+     * @param childEntity A {@link EntityModel} constructed from the given {@code field}.\n      */\n     default void initialize(Member member, EntityModel childEntity) {\n     }\n \n     /**\n-     * Filter the given {@link java.util.stream.Stream} of {@code candidates} which are to handle the supplied\n-     * {@code message}.\n+     * Filter the given {@link java.util.stream.Stream} of {@code candidates} which are to handle the supplied {@code\n+     * message}.\n      *\n      * @param message    The message of type {@code T} to be forwarded.\n      * @param candidates The {@link java.util.stream.Stream} of candidates to filter.\n", "next_change": {"commit": "509f67f94383655e3a4002783622fe666d37710f", "changed_code": [{"header": "diff --git a/modelling/src/main/java/org/axonframework/modelling/command/ForwardingMode.java b/modelling/src/main/java/org/axonframework/modelling/command/ForwardingMode.java\nindex fdc558b62..18e2f7273 100644\n--- a/modelling/src/main/java/org/axonframework/modelling/command/ForwardingMode.java\n+++ b/modelling/src/main/java/org/axonframework/modelling/command/ForwardingMode.java\n", "chunk": "@@ -50,5 +51,5 @@ default void initialize(Member member, EntityModel childEntity) {\n      * @param <E>        The type of the {@code candidates}\n      * @return a filtered {@link java.util.stream.Stream} of {@code candidates} which will handle the {@code message}.\n      */\n-    <E> Stream<E> filterCandidates(T message, Stream<E> candidates);\n+    <E> Stream<E> filterCandidates(@Nonnull T message, @Nonnull Stream<E> candidates);\n }\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "6ad2c3106254d25bb2684f46758596d9c7ca2b86", "message": "Merge commit", "committedDate": null}, {"oid": "509f67f94383655e3a4002783622fe666d37710f", "committedDate": "2022-03-23 15:32:55 +0100", "message": "Nullability annotations"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg4MjYxMA==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1455#discussion_r444882610", "body": "Same backwards compatibility argument we need to discuss.", "bodyText": "Same backwards compatibility argument we need to discuss.", "bodyHTML": "<p dir=\"auto\">Same backwards compatibility argument we need to discuss.</p>", "author": "smcvb", "createdAt": "2020-06-24T13:13:04Z", "path": "modelling/src/main/java/org/axonframework/modelling/command/inspection/AbstractChildEntityDefinition.java", "diffHunk": "@@ -72,31 +76,41 @@\n      *\n      * @param field a {@link java.lang.reflect.Field} containing a Child Entity\n      * @return true if the type is as required by the implementation and false if it is not\n+     * @deprecated\n      */\n+    @Deprecated\n     protected abstract boolean isFieldTypeSupported(Field field);\n \n+    /**\n+     * Check whether the given {@link java.lang.reflect.Member} is of a type supported by this definition.\n+     *\n+     * @param member a {@link java.lang.reflect.Member} containing or returning a Child Entity\n+     * @return true if the type is as required by the implementation and false if it is not\n+     */\n+    protected abstract boolean isMemberTypeSupported(Member member);\n+\n     /**\n      * Extracts the Child Entity contained in the given {@code declaringEntity} as an {@link EntityModel}.\n      * The type of the Child Entity is defined through a key in the provided {@code attributes} or based on given\n      * {@link java.lang.reflect.Field}.\n      *\n      * @param declaringEntity the {@link EntityModel} declaring the given {@code field}\n      * @param attributes      a {@link java.util.Map} containing the {@link AggregateMember} attributes\n-     * @param field           the {@link java.lang.reflect.Field} containing the Child Entity.\n+     * @param member          the {@link java.lang.reflect.Member} containing the Child Entity.\n      * @param <T>             the type {@code T} of the given {@code declaringEntity} {@link EntityModel}\n      * @return the Child Entity contained in the {@code declaringEntity}\n      */\n     protected abstract <T> EntityModel<Object> extractChildEntityModel(EntityModel<T> declaringEntity,\n                                                                        Map<String, Object> attributes,\n-                                                                       Field field);", "originalCommit": "ee3b11b9e1708fdabecc2974d1f04904fb0689d5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUzNzQ4NA==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1455#discussion_r457537484", "bodyText": "Resolved through internal discussion to be a none issue.", "author": "smcvb", "createdAt": "2020-07-20T16:25:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg4MjYxMA=="}], "type": "inlineReview", "revised_code": {"commit": "f89594495abfe4d65bf43bdc8bc452cb5cdd9afe", "changed_code": [{"header": "diff --git a/modelling/src/main/java/org/axonframework/modelling/command/inspection/AbstractChildEntityDefinition.java b/modelling/src/main/java/org/axonframework/modelling/command/inspection/AbstractChildEntityDefinition.java\nindex 56ec07ed2..3079e9113 100644\n--- a/modelling/src/main/java/org/axonframework/modelling/command/inspection/AbstractChildEntityDefinition.java\n+++ b/modelling/src/main/java/org/axonframework/modelling/command/inspection/AbstractChildEntityDefinition.java\n", "chunk": "@@ -104,10 +106,10 @@ protected abstract <T> EntityModel<Object> extractChildEntityModel(EntityModel<T\n                                                                        Map<String, Object> attributes,\n                                                                        Member member);\n \n-    private ForwardingMode instantiateForwardingMode(Member member,\n-                                                     EntityModel<Object> childEntityModel,\n-                                                     Class<? extends ForwardingMode> forwardingModeClass) {\n-        ForwardingMode forwardingMode;\n+    private ForwardingMode<EventMessage<?>> instantiateForwardingMode(Member member,\n+                                                                      EntityModel<Object> childEntityModel,\n+                                                                      Class<? extends ForwardingMode<EventMessage<?>>> forwardingModeClass) {\n+        ForwardingMode<EventMessage<?>> forwardingMode;\n         try {\n             forwardingMode = forwardingModeClass.getDeclaredConstructor().newInstance();\n             forwardingMode.initialize(member, childEntityModel);\n", "next_change": null}]}, "revised_code_in_main": {"commit": "6ad2c3106254d25bb2684f46758596d9c7ca2b86", "changed_code": [{"header": "diff --git a/modelling/src/main/java/org/axonframework/modelling/command/inspection/AbstractChildEntityDefinition.java b/modelling/src/main/java/org/axonframework/modelling/command/inspection/AbstractChildEntityDefinition.java\nindex 56ec07ed2..3de0cfa7e 100644\n--- a/modelling/src/main/java/org/axonframework/modelling/command/inspection/AbstractChildEntityDefinition.java\n+++ b/modelling/src/main/java/org/axonframework/modelling/command/inspection/AbstractChildEntityDefinition.java\n", "chunk": "@@ -72,31 +74,32 @@ public <T> Optional<ChildEntity<T>> createChildDefinition(Member member, EntityM\n     }\n \n     /**\n-     * Check whether the given {@link java.lang.reflect.Field} is of a type supported by this definition.\n+     * Check whether the given {@link Field} is of a type supported by this definition.\n      *\n-     * @param field a {@link java.lang.reflect.Field} containing a Child Entity\n+     * @param field a {@link Field} containing a Child Entity\n      * @return true if the type is as required by the implementation and false if it is not\n-     * @deprecated\n+     * @deprecated in favour of {@link #isMemberTypeSupported(Member)}\n      */\n     @Deprecated\n-    protected abstract boolean isFieldTypeSupported(Field field);\n+    protected boolean isFieldTypeSupported(Field field) {\n+        return isMemberTypeSupported(field);\n+    }\n \n     /**\n-     * Check whether the given {@link java.lang.reflect.Member} is of a type supported by this definition.\n+     * Check whether the given {@link Member} is of a type supported by this definition.\n      *\n-     * @param member a {@link java.lang.reflect.Member} containing or returning a Child Entity\n+     * @param member a {@link Member} containing or returning a Child Entity\n      * @return true if the type is as required by the implementation and false if it is not\n      */\n     protected abstract boolean isMemberTypeSupported(Member member);\n \n     /**\n-     * Extracts the Child Entity contained in the given {@code declaringEntity} as an {@link EntityModel}.\n-     * The type of the Child Entity is defined through a key in the provided {@code attributes} or based on given\n-     * {@link java.lang.reflect.Field}.\n+     * Extracts the Child Entity contained in the given {@code declaringEntity} as an {@link EntityModel}. The type of\n+     * the Child Entity is defined through a key in the provided {@code attributes} or based on given {@link Field}.\n      *\n      * @param declaringEntity the {@link EntityModel} declaring the given {@code field}\n-     * @param attributes      a {@link java.util.Map} containing the {@link AggregateMember} attributes\n-     * @param member          the {@link java.lang.reflect.Member} containing the Child Entity.\n+     * @param attributes      a {@link Map} containing the {@link AggregateMember} attributes\n+     * @param member          the {@link Member} containing the Child Entity.\n      * @param <T>             the type {@code T} of the given {@code declaringEntity} {@link EntityModel}\n      * @return the Child Entity contained in the {@code declaringEntity}\n      */\n", "next_change": null}, {"header": "diff --git a/modelling/src/main/java/org/axonframework/modelling/command/inspection/AbstractChildEntityDefinition.java b/modelling/src/main/java/org/axonframework/modelling/command/inspection/AbstractChildEntityDefinition.java\nindex 56ec07ed2..3de0cfa7e 100644\n--- a/modelling/src/main/java/org/axonframework/modelling/command/inspection/AbstractChildEntityDefinition.java\n+++ b/modelling/src/main/java/org/axonframework/modelling/command/inspection/AbstractChildEntityDefinition.java\n", "chunk": "@@ -104,10 +107,10 @@ protected abstract <T> EntityModel<Object> extractChildEntityModel(EntityModel<T\n                                                                        Map<String, Object> attributes,\n                                                                        Member member);\n \n-    private ForwardingMode instantiateForwardingMode(Member member,\n-                                                     EntityModel<Object> childEntityModel,\n-                                                     Class<? extends ForwardingMode> forwardingModeClass) {\n-        ForwardingMode forwardingMode;\n+    private ForwardingMode<EventMessage<?>> instantiateForwardingMode(Member member,\n+                                                                      EntityModel<Object> childEntityModel,\n+                                                                      Class<? extends ForwardingMode<EventMessage<?>>> forwardingModeClass) {\n+        ForwardingMode<EventMessage<?>> forwardingMode;\n         try {\n             forwardingMode = forwardingModeClass.getDeclaredConstructor().newInstance();\n             forwardingMode.initialize(member, childEntityModel);\n", "next_change": null}]}, "commits_in_main": [{"oid": "6ad2c3106254d25bb2684f46758596d9c7ca2b86", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg4MjgxNA==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1455#discussion_r444882814", "body": "Same backwards compatibility argument we need to discuss.", "bodyText": "Same backwards compatibility argument we need to discuss.", "bodyHTML": "<p dir=\"auto\">Same backwards compatibility argument we need to discuss.</p>", "author": "smcvb", "createdAt": "2020-06-24T13:13:25Z", "path": "modelling/src/main/java/org/axonframework/modelling/command/inspection/AbstractChildEntityDefinition.java", "diffHunk": "@@ -113,28 +127,28 @@ private ForwardingMode instantiateForwardingMode(Field field,\n      * @param msg              the {@link org.axonframework.commandhandling.CommandMessage} which is being resolved to a\n      *                         target entity\n      * @param parent           the {@code parent} Entity of type {@code T} of this Child Entity\n-     * @param field            the {@link java.lang.reflect.Field} containing the Child Entity.\n+     * @param member           the {@link java.lang.reflect.Member} containing the Child Entity.\n      * @param childEntityModel the {@link EntityModel} for the Child Entity\n      * @param <T>              the type {@code T} of the given {@code parent} Entity\n      * @return the Child Entity which is the target of the incoming {@link org.axonframework.commandhandling.CommandMessage}.\n      */\n     protected abstract <T> Object resolveCommandTarget(CommandMessage<?> msg,", "originalCommit": "ee3b11b9e1708fdabecc2974d1f04904fb0689d5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUzNzUxNg==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1455#discussion_r457537516", "bodyText": "Resolved through internal discussion to be a none issue.", "author": "smcvb", "createdAt": "2020-07-20T16:25:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg4MjgxNA=="}], "type": "inlineReview", "revised_code": {"commit": "e92bdc7082a4a9d8fa1027e496139c655a7b2874", "changed_code": [{"header": "diff --git a/modelling/src/main/java/org/axonframework/modelling/command/inspection/AbstractChildEntityDefinition.java b/modelling/src/main/java/org/axonframework/modelling/command/inspection/AbstractChildEntityDefinition.java\nindex 56ec07ed2..acfd318ee 100644\n--- a/modelling/src/main/java/org/axonframework/modelling/command/inspection/AbstractChildEntityDefinition.java\n+++ b/modelling/src/main/java/org/axonframework/modelling/command/inspection/AbstractChildEntityDefinition.java\n", "chunk": "@@ -121,16 +122,15 @@ private ForwardingMode instantiateForwardingMode(Member member,\n     }\n \n     /**\n-     * Resolve the target of an incoming {@link org.axonframework.commandhandling.CommandMessage} to the right Child\n-     * Entity. Returns the Child Entity the {@code msg} needs to be routed to.\n+     * Resolve the target of an incoming {@link CommandMessage} to the right Child Entity. Returns the Child Entity the\n+     * {@code msg} needs to be routed to.\n      *\n-     * @param msg              the {@link org.axonframework.commandhandling.CommandMessage} which is being resolved to a\n-     *                         target entity\n+     * @param msg              the {@link CommandMessage} which is being resolved to a target entity\n      * @param parent           the {@code parent} Entity of type {@code T} of this Child Entity\n-     * @param member           the {@link java.lang.reflect.Member} containing the Child Entity.\n+     * @param member           the {@link Member} containing the Child Entity.\n      * @param childEntityModel the {@link EntityModel} for the Child Entity\n      * @param <T>              the type {@code T} of the given {@code parent} Entity\n-     * @return the Child Entity which is the target of the incoming {@link org.axonframework.commandhandling.CommandMessage}.\n+     * @return the Child Entity which is the target of the incoming {@link CommandMessage}.\n      */\n     protected abstract <T> Object resolveCommandTarget(CommandMessage<?> msg,\n                                                        T parent,\n", "next_change": null}]}, "revised_code_in_main": {"commit": "6ad2c3106254d25bb2684f46758596d9c7ca2b86", "changed_code": [{"header": "diff --git a/modelling/src/main/java/org/axonframework/modelling/command/inspection/AbstractChildEntityDefinition.java b/modelling/src/main/java/org/axonframework/modelling/command/inspection/AbstractChildEntityDefinition.java\nindex 56ec07ed2..3de0cfa7e 100644\n--- a/modelling/src/main/java/org/axonframework/modelling/command/inspection/AbstractChildEntityDefinition.java\n+++ b/modelling/src/main/java/org/axonframework/modelling/command/inspection/AbstractChildEntityDefinition.java\n", "chunk": "@@ -121,16 +124,15 @@ private ForwardingMode instantiateForwardingMode(Member member,\n     }\n \n     /**\n-     * Resolve the target of an incoming {@link org.axonframework.commandhandling.CommandMessage} to the right Child\n-     * Entity. Returns the Child Entity the {@code msg} needs to be routed to.\n+     * Resolve the target of an incoming {@link CommandMessage} to the right Child Entity. Returns the Child Entity the\n+     * {@code msg} needs to be routed to.\n      *\n-     * @param msg              the {@link org.axonframework.commandhandling.CommandMessage} which is being resolved to a\n-     *                         target entity\n+     * @param msg              the {@link CommandMessage} which is being resolved to a target entity\n      * @param parent           the {@code parent} Entity of type {@code T} of this Child Entity\n-     * @param member           the {@link java.lang.reflect.Member} containing the Child Entity.\n+     * @param member           the {@link Member} containing the Child Entity.\n      * @param childEntityModel the {@link EntityModel} for the Child Entity\n      * @param <T>              the type {@code T} of the given {@code parent} Entity\n-     * @return the Child Entity which is the target of the incoming {@link org.axonframework.commandhandling.CommandMessage}.\n+     * @return the Child Entity which is the target of the incoming {@link CommandMessage}.\n      */\n     protected abstract <T> Object resolveCommandTarget(CommandMessage<?> msg,\n                                                        T parent,\n", "next_change": null}]}, "commits_in_main": [{"oid": "6ad2c3106254d25bb2684f46758596d9c7ca2b86", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg4MjkyNg==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1455#discussion_r444882926", "body": "Same backwards compatibility argument we need to discuss.", "bodyText": "Same backwards compatibility argument we need to discuss.", "bodyHTML": "<p dir=\"auto\">Same backwards compatibility argument we need to discuss.</p>", "author": "smcvb", "createdAt": "2020-06-24T13:13:36Z", "path": "modelling/src/main/java/org/axonframework/modelling/command/inspection/AbstractChildEntityDefinition.java", "diffHunk": "@@ -113,28 +127,28 @@ private ForwardingMode instantiateForwardingMode(Field field,\n      * @param msg              the {@link org.axonframework.commandhandling.CommandMessage} which is being resolved to a\n      *                         target entity\n      * @param parent           the {@code parent} Entity of type {@code T} of this Child Entity\n-     * @param field            the {@link java.lang.reflect.Field} containing the Child Entity.\n+     * @param member           the {@link java.lang.reflect.Member} containing the Child Entity.\n      * @param childEntityModel the {@link EntityModel} for the Child Entity\n      * @param <T>              the type {@code T} of the given {@code parent} Entity\n      * @return the Child Entity which is the target of the incoming {@link org.axonframework.commandhandling.CommandMessage}.\n      */\n     protected abstract <T> Object resolveCommandTarget(CommandMessage<?> msg,\n                                                        T parent,\n-                                                       Field field,\n+                                                       Member member,\n                                                        EntityModel<Object> childEntityModel);\n \n     /**\n      * Retrieves the routing keys of every command handler on the given {@code childEntityModel} to be able to correctly\n      * route commands to Entities.\n      *\n-     * @param field            a {@link java.lang.reflect.Field} denoting the Child Entity upon which the\n+     * @param member           a {@link java.lang.reflect.Member} denoting the Child Entity upon which the\n      *                         {@code childEntityModel} is based\n      * @param childEntityModel a {@link EntityModel} to retrieve the routing key properties from\n      * @return a {@link java.util.Map} of key/value types {@link java.lang.String}\n      * {@link org.axonframework.common.property.Property} from Command Message name to routing key\n      */\n     @SuppressWarnings(\"WeakerAccess\")\n-    protected Map<String, Property<Object>> extractCommandHandlerRoutingKeys(Field field,\n+    protected Map<String, Property<Object>> extractCommandHandlerRoutingKeys(Member member,", "originalCommit": "ee3b11b9e1708fdabecc2974d1f04904fb0689d5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUzNzYwNQ==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1455#discussion_r457537605", "bodyText": "Resolved through internal discussion to be a none issue.", "author": "smcvb", "createdAt": "2020-07-20T16:25:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg4MjkyNg=="}], "type": "inlineReview", "revised_code": {"commit": "f89594495abfe4d65bf43bdc8bc452cb5cdd9afe", "changed_code": [{"header": "diff --git a/modelling/src/main/java/org/axonframework/modelling/command/inspection/AbstractChildEntityDefinition.java b/modelling/src/main/java/org/axonframework/modelling/command/inspection/AbstractChildEntityDefinition.java\nindex 56ec07ed2..3079e9113 100644\n--- a/modelling/src/main/java/org/axonframework/modelling/command/inspection/AbstractChildEntityDefinition.java\n+++ b/modelling/src/main/java/org/axonframework/modelling/command/inspection/AbstractChildEntityDefinition.java\n", "chunk": "@@ -141,13 +143,11 @@ protected abstract <T> Object resolveCommandTarget(CommandMessage<?> msg,\n      * Retrieves the routing keys of every command handler on the given {@code childEntityModel} to be able to correctly\n      * route commands to Entities.\n      *\n-     * @param member           a {@link java.lang.reflect.Member} denoting the Child Entity upon which the\n-     *                         {@code childEntityModel} is based\n+     * @param member           a {@link Member} denoting the Child Entity upon which the {@code childEntityModel} is\n+     *                         based\n      * @param childEntityModel a {@link EntityModel} to retrieve the routing key properties from\n-     * @return a {@link java.util.Map} of key/value types {@link java.lang.String}\n-     * {@link org.axonframework.common.property.Property} from Command Message name to routing key\n+     * @return a {@link Map} of key/value types {@link String} {@link Property} from Command Message name to routing key\n      */\n-    @SuppressWarnings(\"WeakerAccess\")\n     protected Map<String, Property<Object>> extractCommandHandlerRoutingKeys(Member member,\n                                                                              EntityModel<Object> childEntityModel) {\n         return childEntityModel.commandHandlers()\n", "next_change": null}]}, "revised_code_in_main": {"commit": "6ad2c3106254d25bb2684f46758596d9c7ca2b86", "changed_code": [{"header": "diff --git a/modelling/src/main/java/org/axonframework/modelling/command/inspection/AbstractChildEntityDefinition.java b/modelling/src/main/java/org/axonframework/modelling/command/inspection/AbstractChildEntityDefinition.java\nindex 56ec07ed2..3de0cfa7e 100644\n--- a/modelling/src/main/java/org/axonframework/modelling/command/inspection/AbstractChildEntityDefinition.java\n+++ b/modelling/src/main/java/org/axonframework/modelling/command/inspection/AbstractChildEntityDefinition.java\n", "chunk": "@@ -141,13 +143,11 @@ protected abstract <T> Object resolveCommandTarget(CommandMessage<?> msg,\n      * Retrieves the routing keys of every command handler on the given {@code childEntityModel} to be able to correctly\n      * route commands to Entities.\n      *\n-     * @param member           a {@link java.lang.reflect.Member} denoting the Child Entity upon which the\n-     *                         {@code childEntityModel} is based\n+     * @param member           a {@link Member} denoting the Child Entity upon which the {@code childEntityModel} is\n+     *                         based\n      * @param childEntityModel a {@link EntityModel} to retrieve the routing key properties from\n-     * @return a {@link java.util.Map} of key/value types {@link java.lang.String}\n-     * {@link org.axonframework.common.property.Property} from Command Message name to routing key\n+     * @return a {@link Map} of key/value types {@link String} {@link Property} from Command Message name to routing key\n      */\n-    @SuppressWarnings(\"WeakerAccess\")\n     protected Map<String, Property<Object>> extractCommandHandlerRoutingKeys(Member member,\n                                                                              EntityModel<Object> childEntityModel) {\n         return childEntityModel.commandHandlers()\n", "next_change": null}]}, "commits_in_main": [{"oid": "6ad2c3106254d25bb2684f46758596d9c7ca2b86", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg4MzExMQ==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1455#discussion_r444883111", "body": "Same backwards compatibility argument we need to discuss.", "bodyText": "Same backwards compatibility argument we need to discuss.", "bodyHTML": "<p dir=\"auto\">Same backwards compatibility argument we need to discuss.</p>", "author": "smcvb", "createdAt": "2020-06-24T13:13:54Z", "path": "modelling/src/main/java/org/axonframework/modelling/command/inspection/AbstractChildEntityDefinition.java", "diffHunk": "@@ -196,7 +210,7 @@ private ForwardingMode instantiateForwardingMode(Field field,\n      */\n     protected abstract <T> Stream<Object> resolveEventTargets(EventMessage message,", "originalCommit": "ee3b11b9e1708fdabecc2974d1f04904fb0689d5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUzNzY1NQ==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1455#discussion_r457537655", "bodyText": "Resolved through internal discussion to be a none issue.", "author": "smcvb", "createdAt": "2020-07-20T16:25:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg4MzExMQ=="}], "type": "inlineReview", "revised_code": {"commit": "f89594495abfe4d65bf43bdc8bc452cb5cdd9afe", "changed_code": [{"header": "diff --git a/modelling/src/main/java/org/axonframework/modelling/command/inspection/AbstractChildEntityDefinition.java b/modelling/src/main/java/org/axonframework/modelling/command/inspection/AbstractChildEntityDefinition.java\nindex 56ec07ed2..3079e9113 100644\n--- a/modelling/src/main/java/org/axonframework/modelling/command/inspection/AbstractChildEntityDefinition.java\n+++ b/modelling/src/main/java/org/axonframework/modelling/command/inspection/AbstractChildEntityDefinition.java\n", "chunk": "@@ -195,18 +195,16 @@ private Property<Object> extractCommandHandlerRoutingKey(EntityModel<Object> chi\n     }\n \n     /**\n-     * Resolve the targets of an incoming {@link org.axonframework.eventhandling.EventMessage} to the right Child\n-     * Entities. Returns a {@link java.util.stream.Stream} of all the Child Entities the Event Message should be\n-     * routed to.\n+     * Resolve the targets of an incoming {@link EventMessage} to the right Child Entities. Returns a {@link Stream} of\n+     * all the Child Entities the Event Message should be routed to.\n      *\n-     * @param message             the {@link org.axonframework.eventhandling.EventMessage} to route\n+     * @param message             the {@link EventMessage} to route\n      * @param parentEntity        the {@code parent} Entity of type {@code T} of this Child Entity\n-     * @param member              the {@link java.lang.reflect.Member} containing the Child Entity\n+     * @param member              the {@link Member} containing the Child Entity\n      * @param eventForwardingMode the {@link ForwardingMode} used to filter the {@code message} to route based on the\n      *                            ForwardingMode implementation\n      * @param <T>                 the type {@code T} of the given {@code parent} Entity\n-     * @return a filtered {@link java.util.stream.Stream} of Child Entity targets for the incoming\n-     * {@link org.axonframework.eventhandling.EventMessage}\n+     * @return a filtered {@link Stream} of Child Entity targets for the incoming {@link EventMessage}\n      */\n     protected abstract <T> Stream<Object> resolveEventTargets(EventMessage message,\n                                                               T parentEntity,\n", "next_change": null}]}, "revised_code_in_main": {"commit": "6ad2c3106254d25bb2684f46758596d9c7ca2b86", "changed_code": [{"header": "diff --git a/modelling/src/main/java/org/axonframework/modelling/command/inspection/AbstractChildEntityDefinition.java b/modelling/src/main/java/org/axonframework/modelling/command/inspection/AbstractChildEntityDefinition.java\nindex 56ec07ed2..3de0cfa7e 100644\n--- a/modelling/src/main/java/org/axonframework/modelling/command/inspection/AbstractChildEntityDefinition.java\n+++ b/modelling/src/main/java/org/axonframework/modelling/command/inspection/AbstractChildEntityDefinition.java\n", "chunk": "@@ -195,18 +195,16 @@ private Property<Object> extractCommandHandlerRoutingKey(EntityModel<Object> chi\n     }\n \n     /**\n-     * Resolve the targets of an incoming {@link org.axonframework.eventhandling.EventMessage} to the right Child\n-     * Entities. Returns a {@link java.util.stream.Stream} of all the Child Entities the Event Message should be\n-     * routed to.\n+     * Resolve the targets of an incoming {@link EventMessage} to the right Child Entities. Returns a {@link Stream} of\n+     * all the Child Entities the Event Message should be routed to.\n      *\n-     * @param message             the {@link org.axonframework.eventhandling.EventMessage} to route\n+     * @param message             the {@link EventMessage} to route\n      * @param parentEntity        the {@code parent} Entity of type {@code T} of this Child Entity\n-     * @param member              the {@link java.lang.reflect.Member} containing the Child Entity\n+     * @param member              the {@link Member} containing the Child Entity\n      * @param eventForwardingMode the {@link ForwardingMode} used to filter the {@code message} to route based on the\n      *                            ForwardingMode implementation\n      * @param <T>                 the type {@code T} of the given {@code parent} Entity\n-     * @return a filtered {@link java.util.stream.Stream} of Child Entity targets for the incoming\n-     * {@link org.axonframework.eventhandling.EventMessage}\n+     * @return a filtered {@link Stream} of Child Entity targets for the incoming {@link EventMessage}\n      */\n     protected abstract <T> Stream<Object> resolveEventTargets(EventMessage message,\n                                                               T parentEntity,\n", "next_change": null}]}, "commits_in_main": [{"oid": "6ad2c3106254d25bb2684f46758596d9c7ca2b86", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg4MzQ1Nw==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1455#discussion_r444883457", "body": "Same backwards compatibility argument we need to discuss.", "bodyText": "Same backwards compatibility argument we need to discuss.", "bodyHTML": "<p dir=\"auto\">Same backwards compatibility argument we need to discuss.</p>", "author": "smcvb", "createdAt": "2020-06-24T13:14:23Z", "path": "modelling/src/main/java/org/axonframework/modelling/command/inspection/ChildEntityDefinition.java", "diffHunk": "@@ -29,14 +29,14 @@\n public interface ChildEntityDefinition {\n \n     /**\n-     * Inspect the given {@code field}, which is declared on the given {@code declaringEntity} for the presence of a\n+     * Inspect the given {@code member}, which is declared on the given {@code declaringEntity} for the presence of a\n      * Child Entity.\n      *\n-     * @param field           The field potentially containing a Child entity\n+     * @param member          The member potentially containing a Child entity\n      * @param declaringEntity The entity model declaring the field\n      * @param <T>             The type of entity on which the field is declared\n      * @return an optional that resolved to a ChildEntity if the field represents a child.\n      */\n-    <T> Optional<ChildEntity<T>> createChildDefinition(Field field, EntityModel<T> declaringEntity);", "originalCommit": "ee3b11b9e1708fdabecc2974d1f04904fb0689d5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUzNzY5Nw==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1455#discussion_r457537697", "bodyText": "Resolved through internal discussion to be a none issue.", "author": "smcvb", "createdAt": "2020-07-20T16:25:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDg4MzQ1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "e92bdc7082a4a9d8fa1027e496139c655a7b2874", "changed_code": [{"header": "diff --git a/modelling/src/main/java/org/axonframework/modelling/command/inspection/ChildEntityDefinition.java b/modelling/src/main/java/org/axonframework/modelling/command/inspection/ChildEntityDefinition.java\nindex 147d48236..c97420135 100644\n--- a/modelling/src/main/java/org/axonframework/modelling/command/inspection/ChildEntityDefinition.java\n+++ b/modelling/src/main/java/org/axonframework/modelling/command/inspection/ChildEntityDefinition.java\n", "chunk": "@@ -32,11 +34,10 @@ public interface ChildEntityDefinition {\n      * Inspect the given {@code member}, which is declared on the given {@code declaringEntity} for the presence of a\n      * Child Entity.\n      *\n-     * @param member          The member potentially containing a Child entity\n-     * @param declaringEntity The entity model declaring the field\n-     * @param <T>             The type of entity on which the field is declared\n-     * @return an optional that resolved to a ChildEntity if the field represents a child.\n+     * @param member          the member potentially containing a Child entity\n+     * @param declaringEntity the entity model declaring the field\n+     * @param <T>             the type of entity on which the field is declared\n+     * @return an optional that resolved to a ChildEntity if the field represents a child\n      */\n     <T> Optional<ChildEntity<T>> createChildDefinition(Member member, EntityModel<T> declaringEntity);\n-\n }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "6ad2c3106254d25bb2684f46758596d9c7ca2b86", "changed_code": [{"header": "diff --git a/modelling/src/main/java/org/axonframework/modelling/command/inspection/ChildEntityDefinition.java b/modelling/src/main/java/org/axonframework/modelling/command/inspection/ChildEntityDefinition.java\nindex 147d48236..c97420135 100644\n--- a/modelling/src/main/java/org/axonframework/modelling/command/inspection/ChildEntityDefinition.java\n+++ b/modelling/src/main/java/org/axonframework/modelling/command/inspection/ChildEntityDefinition.java\n", "chunk": "@@ -32,11 +34,10 @@ public interface ChildEntityDefinition {\n      * Inspect the given {@code member}, which is declared on the given {@code declaringEntity} for the presence of a\n      * Child Entity.\n      *\n-     * @param member          The member potentially containing a Child entity\n-     * @param declaringEntity The entity model declaring the field\n-     * @param <T>             The type of entity on which the field is declared\n-     * @return an optional that resolved to a ChildEntity if the field represents a child.\n+     * @param member          the member potentially containing a Child entity\n+     * @param declaringEntity the entity model declaring the field\n+     * @param <T>             the type of entity on which the field is declared\n+     * @return an optional that resolved to a ChildEntity if the field represents a child\n      */\n     <T> Optional<ChildEntity<T>> createChildDefinition(Member member, EntityModel<T> declaringEntity);\n-\n }\n", "next_change": null}]}, "commits_in_main": [{"oid": "6ad2c3106254d25bb2684f46758596d9c7ca2b86", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDkxNzExNA==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1455#discussion_r444917114", "body": "When matching the models' routing key with the routing key in the `@CommandHandler`, it is expected to be identical to the property name in the command. So, not the method name, as is being validated here. As such, we should remove any `get` prepending the routing key if it comes from a method.", "bodyText": "When matching the models' routing key with the routing key in the @CommandHandler, it is expected to be identical to the property name in the command. So, not the method name, as is being validated here. As such, we should remove any get prepending the routing key if it comes from a method.", "bodyHTML": "<p dir=\"auto\">When matching the models' routing key with the routing key in the <code>@CommandHandler</code>, it is expected to be identical to the property name in the command. So, not the method name, as is being validated here. As such, we should remove any <code>get</code> prepending the routing key if it comes from a method.</p>", "author": "smcvb", "createdAt": "2020-06-24T14:02:55Z", "path": "modelling/src/test/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactoryTest.java", "diffHunk": "@@ -247,6 +267,26 @@ void testFindIdentifier() {\n         assertEquals(\"id\", inspector.routingKey());\n     }\n \n+    @Test\n+    void testFindGetterIdentifier() {\n+        AggregateModel<SomeGetterIdAnnotatedHandlers> inspector =\n+                AnnotatedAggregateMetaModelFactory.inspectAggregate(SomeGetterIdAnnotatedHandlers.class);\n+\n+        assertEquals(\"SomeGetterIdAnnotatedHandlers\", inspector.type());\n+        assertEquals(\"id\", inspector.getIdentifier(new SomeGetterIdAnnotatedHandlers()));\n+        assertEquals(\"getId\", inspector.routingKey());", "originalCommit": "ee3b11b9e1708fdabecc2974d1f04904fb0689d5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5ebe824c5f412fafb0f0a9aef09e06b94242f583", "changed_code": [{"header": "diff --git a/modelling/src/test/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactoryTest.java b/modelling/src/test/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactoryTest.java\nindex a7cd4e15d..baf136758 100644\n--- a/modelling/src/test/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactoryTest.java\n+++ b/modelling/src/test/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactoryTest.java\n", "chunk": "@@ -274,7 +274,7 @@ void testFindGetterIdentifier() {\n \n         assertEquals(\"SomeGetterIdAnnotatedHandlers\", inspector.type());\n         assertEquals(\"id\", inspector.getIdentifier(new SomeGetterIdAnnotatedHandlers()));\n-        assertEquals(\"getId\", inspector.routingKey());\n+        assertEquals(\"id\", inspector.routingKey());\n     }\n \n     @Test\n", "next_change": null}]}, "revised_code_in_main": {"commit": "6ad2c3106254d25bb2684f46758596d9c7ca2b86", "changed_code": [{"header": "diff --git a/modelling/src/test/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactoryTest.java b/modelling/src/test/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactoryTest.java\nindex a7cd4e15d..f34497992 100644\n--- a/modelling/src/test/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactoryTest.java\n+++ b/modelling/src/test/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactoryTest.java\n", "chunk": "@@ -274,7 +277,7 @@ void testFindGetterIdentifier() {\n \n         assertEquals(\"SomeGetterIdAnnotatedHandlers\", inspector.type());\n         assertEquals(\"id\", inspector.getIdentifier(new SomeGetterIdAnnotatedHandlers()));\n-        assertEquals(\"getId\", inspector.routingKey());\n+        assertEquals(\"id\", inspector.routingKey());\n     }\n \n     @Test\n", "next_change": {"commit": "79c3254231ec8375dd1ec3dbbedb636558d362fd", "changed_code": [{"header": "diff --git a/modelling/src/test/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactoryTest.java b/modelling/src/test/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactoryTest.java\nindex f34497992..1ba3fae7e 100644\n--- a/modelling/src/test/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactoryTest.java\n+++ b/modelling/src/test/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactoryTest.java\n", "chunk": "@@ -281,7 +282,7 @@ void testFindGetterIdentifier() {\n     }\n \n     @Test\n-    void testFindMethodIdentifier() {\n+    void findMethodIdentifier() {\n         AggregateModel<SomeMethodIdAnnotatedHandlers> inspector =\n                 AnnotatedAggregateMetaModelFactory.inspectAggregate(SomeMethodIdAnnotatedHandlers.class);\n \n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "6ad2c3106254d25bb2684f46758596d9c7ca2b86", "message": "Merge commit", "committedDate": null}, {"oid": "509f67f94383655e3a4002783622fe666d37710f", "committedDate": "2022-03-23 15:32:55 +0100", "message": "Nullability annotations"}, {"oid": "79c3254231ec8375dd1ec3dbbedb636558d362fd", "committedDate": "2022-08-30 18:30:01 +0200", "message": "Remove test prefix from test method names"}, {"oid": "4f4a60c4c15b893afc9ba1a83a535927b740cf84", "committedDate": "2023-01-17 09:00:06 +0100", "message": "Use jakarta by default. Where needed code is duplicated to support javax still."}, {"oid": "c2f087406e978184e9aefa013862d1811d5f5850", "committedDate": "2023-01-17 09:23:35 +0100", "message": "Add AnnotatedAggregateMetaModelFactoryTest for javax, and renamed javax -> jakarta in the AnnotatedAggregateMetaModelFactoryTest using jakarta."}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDkxODQ1OA==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1455#discussion_r444918458", "body": "This scenario would be a valid use case where the `routingKey` should be set on the `@EntityId`/`@AggregateIdentifier`. Would be smart to be specific about this in the javadoc too.", "bodyText": "This scenario would be a valid use case where the routingKey should be set on the @EntityId/@AggregateIdentifier. Would be smart to be specific about this in the javadoc too.", "bodyHTML": "<p dir=\"auto\">This scenario would be a valid use case where the <code>routingKey</code> should be set on the <code>@EntityId</code>/<code>@AggregateIdentifier</code>. Would be smart to be specific about this in the javadoc too.</p>", "author": "smcvb", "createdAt": "2020-06-24T14:04:59Z", "path": "modelling/src/test/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactoryTest.java", "diffHunk": "@@ -247,6 +267,26 @@ void testFindIdentifier() {\n         assertEquals(\"id\", inspector.routingKey());\n     }\n \n+    @Test\n+    void testFindGetterIdentifier() {\n+        AggregateModel<SomeGetterIdAnnotatedHandlers> inspector =\n+                AnnotatedAggregateMetaModelFactory.inspectAggregate(SomeGetterIdAnnotatedHandlers.class);\n+\n+        assertEquals(\"SomeGetterIdAnnotatedHandlers\", inspector.type());\n+        assertEquals(\"id\", inspector.getIdentifier(new SomeGetterIdAnnotatedHandlers()));\n+        assertEquals(\"getId\", inspector.routingKey());\n+    }\n+\n+    @Test\n+    void testFindMethodIdentifier() {\n+        AggregateModel<SomeMethodIdAnnotatedHandlers> inspector =\n+                AnnotatedAggregateMetaModelFactory.inspectAggregate(SomeMethodIdAnnotatedHandlers.class);\n+\n+        assertEquals(\"SomeMethodIdAnnotatedHandlers\", inspector.type());\n+        assertEquals(\"id\", inspector.getIdentifier(new SomeMethodIdAnnotatedHandlers()));\n+        assertEquals(\"calculatedId\", inspector.routingKey());", "originalCommit": "ee3b11b9e1708fdabecc2974d1f04904fb0689d5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODA0ODcwMQ==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1455#discussion_r458048701", "bodyText": "Javadoc for the @EntityId and @AggregateIdentifier has been adjusted to clarify this.", "author": "smcvb", "createdAt": "2020-07-21T12:12:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDkxODQ1OA=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "79c3254231ec8375dd1ec3dbbedb636558d362fd", "changed_code": [{"header": "diff --git a/modelling/src/test/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactoryTest.java b/modelling/src/test/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactoryTest.java\nindex a7cd4e15d..1ba3fae7e 100644\n--- a/modelling/src/test/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactoryTest.java\n+++ b/modelling/src/test/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactoryTest.java\n", "chunk": "@@ -268,17 +272,17 @@ void testFindIdentifier() {\n     }\n \n     @Test\n-    void testFindGetterIdentifier() {\n+    void findGetterIdentifier() {\n         AggregateModel<SomeGetterIdAnnotatedHandlers> inspector =\n                 AnnotatedAggregateMetaModelFactory.inspectAggregate(SomeGetterIdAnnotatedHandlers.class);\n \n         assertEquals(\"SomeGetterIdAnnotatedHandlers\", inspector.type());\n         assertEquals(\"id\", inspector.getIdentifier(new SomeGetterIdAnnotatedHandlers()));\n-        assertEquals(\"getId\", inspector.routingKey());\n+        assertEquals(\"id\", inspector.routingKey());\n     }\n \n     @Test\n-    void testFindMethodIdentifier() {\n+    void findMethodIdentifier() {\n         AggregateModel<SomeMethodIdAnnotatedHandlers> inspector =\n                 AnnotatedAggregateMetaModelFactory.inspectAggregate(SomeMethodIdAnnotatedHandlers.class);\n \n", "next_change": null}, {"header": "diff --git a/modelling/src/test/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactoryTest.java b/modelling/src/test/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactoryTest.java\nindex a7cd4e15d..1ba3fae7e 100644\n--- a/modelling/src/test/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactoryTest.java\n+++ b/modelling/src/test/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactoryTest.java\n", "chunk": "@@ -288,7 +292,7 @@ void testFindMethodIdentifier() {\n     }\n \n     @Test\n-    void testFindJavaxPersistenceIdentifier() {\n+    void findJavaxPersistenceIdentifier() {\n         AggregateModel<JavaxPersistenceAnnotatedHandlers> inspector =\n                 AnnotatedAggregateMetaModelFactory.inspectAggregate(JavaxPersistenceAnnotatedHandlers.class);\n \n", "next_change": {"commit": "c2f087406e978184e9aefa013862d1811d5f5850", "changed_code": [{"header": "diff --git a/modelling/src/test/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactoryTest.java b/modelling/src/test/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactoryTest.java\nindex 1ba3fae7e..9d0d0ea84 100644\n--- a/modelling/src/test/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactoryTest.java\n+++ b/modelling/src/test/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactoryTest.java\n", "chunk": "@@ -293,28 +283,28 @@ void findMethodIdentifier() {\n \n     @Test\n     void findJavaxPersistenceIdentifier() {\n-        AggregateModel<JavaxPersistenceAnnotatedHandlers> inspector =\n-                AnnotatedAggregateMetaModelFactory.inspectAggregate(JavaxPersistenceAnnotatedHandlers.class);\n+        AggregateModel<JakartaPersistenceAnnotatedHandlers> inspector =\n+                AnnotatedAggregateMetaModelFactory.inspectAggregate(JakartaPersistenceAnnotatedHandlers.class);\n \n-        assertEquals(\"id\", inspector.getIdentifier(new JavaxPersistenceAnnotatedHandlers()));\n+        assertEquals(\"id\", inspector.getIdentifier(new JakartaPersistenceAnnotatedHandlers()));\n         assertEquals(\"id\", inspector.routingKey());\n     }\n \n     @Test\n-    void findJavaxPersistenceGetterIdentifier() {\n-        AggregateModel<JavaxPersistenceGetterAnnotatedHandlers> inspector =\n-                AnnotatedAggregateMetaModelFactory.inspectAggregate(JavaxPersistenceGetterAnnotatedHandlers.class);\n+    void findJakartaPersistenceGetterIdentifier() {\n+        AggregateModel<JakartaPersistenceGetterAnnotatedHandlers> inspector =\n+                AnnotatedAggregateMetaModelFactory.inspectAggregate(JakartaPersistenceGetterAnnotatedHandlers.class);\n \n-        assertEquals(\"id\", inspector.getIdentifier(new JavaxPersistenceGetterAnnotatedHandlers()));\n+        assertEquals(\"id\", inspector.getIdentifier(new JakartaPersistenceGetterAnnotatedHandlers()));\n         assertEquals(\"id\", inspector.routingKey());\n     }\n \n     @Test\n-    void findJavaxPersistenceMethodIdentifier() {\n-        AggregateModel<JavaxPersistenceMethodIdAnnotatedHandlers> inspector =\n-                AnnotatedAggregateMetaModelFactory.inspectAggregate(JavaxPersistenceMethodIdAnnotatedHandlers.class);\n+    void findJakartaPersistenceMethodIdentifier() {\n+        AggregateModel<JakartaPersistenceMethodIdAnnotatedHandlers> inspector =\n+                AnnotatedAggregateMetaModelFactory.inspectAggregate(JakartaPersistenceMethodIdAnnotatedHandlers.class);\n \n-        assertEquals(\"id\", inspector.getIdentifier(new JavaxPersistenceMethodIdAnnotatedHandlers()));\n+        assertEquals(\"id\", inspector.getIdentifier(new JakartaPersistenceMethodIdAnnotatedHandlers()));\n         assertEquals(\"calculatedId\", inspector.routingKey());\n     }\n \n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "6ad2c3106254d25bb2684f46758596d9c7ca2b86", "message": "Merge commit", "committedDate": null}, {"oid": "509f67f94383655e3a4002783622fe666d37710f", "committedDate": "2022-03-23 15:32:55 +0100", "message": "Nullability annotations"}, {"oid": "79c3254231ec8375dd1ec3dbbedb636558d362fd", "committedDate": "2022-08-30 18:30:01 +0200", "message": "Remove test prefix from test method names"}, {"oid": "4f4a60c4c15b893afc9ba1a83a535927b740cf84", "committedDate": "2023-01-17 09:00:06 +0100", "message": "Use jakarta by default. Where needed code is duplicated to support javax still."}, {"oid": "c2f087406e978184e9aefa013862d1811d5f5850", "committedDate": "2023-01-17 09:23:35 +0100", "message": "Add AnnotatedAggregateMetaModelFactoryTest for javax, and renamed javax -> jakarta in the AnnotatedAggregateMetaModelFactoryTest using jakarta."}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDkyNjMxMg==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1455#discussion_r444926312", "body": "This case, when users only provide an `@Id` field, is obviously rather problematic on a method. Not sure we can do anything about this...", "bodyText": "This case, when users only provide an @Id field, is obviously rather problematic on a method. Not sure we can do anything about this...", "bodyHTML": "<p dir=\"auto\">This case, when users only provide an <code>@Id</code> field, is obviously rather problematic on a method. Not sure we can do anything about this...</p>", "author": "smcvb", "createdAt": "2020-06-24T14:16:08Z", "path": "modelling/src/test/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactoryTest.java", "diffHunk": "@@ -256,6 +296,24 @@ void testFindJavaxPersistenceIdentifier() {\n         assertEquals(\"id\", inspector.routingKey());\n     }\n \n+    @Test\n+    void testFindJavaxPersistenceGetterIdentifier() {\n+        AggregateModel<JavaxPersistenceGetterAnnotatedHandlers> inspector =\n+                AnnotatedAggregateMetaModelFactory.inspectAggregate(JavaxPersistenceGetterAnnotatedHandlers.class);\n+\n+        assertEquals(\"id\", inspector.getIdentifier(new JavaxPersistenceGetterAnnotatedHandlers()));\n+        assertEquals(\"getId\", inspector.routingKey());\n+    }\n+\n+    @Test\n+    void testFindJavaxPersistenceMethodIdentifier() {\n+        AggregateModel<JavaxPersistenceMethodIdAnnotatedHandlers> inspector =\n+                AnnotatedAggregateMetaModelFactory.inspectAggregate(JavaxPersistenceMethodIdAnnotatedHandlers.class);\n+\n+        assertEquals(\"id\", inspector.getIdentifier(new JavaxPersistenceMethodIdAnnotatedHandlers()));\n+        assertEquals(\"calculatedId\", inspector.routingKey());", "originalCommit": "ee3b11b9e1708fdabecc2974d1f04904fb0689d5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "79c3254231ec8375dd1ec3dbbedb636558d362fd", "changed_code": [{"header": "diff --git a/modelling/src/test/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactoryTest.java b/modelling/src/test/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactoryTest.java\nindex a7cd4e15d..1ba3fae7e 100644\n--- a/modelling/src/test/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactoryTest.java\n+++ b/modelling/src/test/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactoryTest.java\n", "chunk": "@@ -297,16 +301,16 @@ void testFindJavaxPersistenceIdentifier() {\n     }\n \n     @Test\n-    void testFindJavaxPersistenceGetterIdentifier() {\n+    void findJavaxPersistenceGetterIdentifier() {\n         AggregateModel<JavaxPersistenceGetterAnnotatedHandlers> inspector =\n                 AnnotatedAggregateMetaModelFactory.inspectAggregate(JavaxPersistenceGetterAnnotatedHandlers.class);\n \n         assertEquals(\"id\", inspector.getIdentifier(new JavaxPersistenceGetterAnnotatedHandlers()));\n-        assertEquals(\"getId\", inspector.routingKey());\n+        assertEquals(\"id\", inspector.routingKey());\n     }\n \n     @Test\n-    void testFindJavaxPersistenceMethodIdentifier() {\n+    void findJavaxPersistenceMethodIdentifier() {\n         AggregateModel<JavaxPersistenceMethodIdAnnotatedHandlers> inspector =\n                 AnnotatedAggregateMetaModelFactory.inspectAggregate(JavaxPersistenceMethodIdAnnotatedHandlers.class);\n \n", "next_change": {"commit": "c2f087406e978184e9aefa013862d1811d5f5850", "changed_code": [{"header": "diff --git a/modelling/src/test/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactoryTest.java b/modelling/src/test/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactoryTest.java\nindex 1ba3fae7e..9d0d0ea84 100644\n--- a/modelling/src/test/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactoryTest.java\n+++ b/modelling/src/test/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactoryTest.java\n", "chunk": "@@ -293,28 +283,28 @@ void findMethodIdentifier() {\n \n     @Test\n     void findJavaxPersistenceIdentifier() {\n-        AggregateModel<JavaxPersistenceAnnotatedHandlers> inspector =\n-                AnnotatedAggregateMetaModelFactory.inspectAggregate(JavaxPersistenceAnnotatedHandlers.class);\n+        AggregateModel<JakartaPersistenceAnnotatedHandlers> inspector =\n+                AnnotatedAggregateMetaModelFactory.inspectAggregate(JakartaPersistenceAnnotatedHandlers.class);\n \n-        assertEquals(\"id\", inspector.getIdentifier(new JavaxPersistenceAnnotatedHandlers()));\n+        assertEquals(\"id\", inspector.getIdentifier(new JakartaPersistenceAnnotatedHandlers()));\n         assertEquals(\"id\", inspector.routingKey());\n     }\n \n     @Test\n-    void findJavaxPersistenceGetterIdentifier() {\n-        AggregateModel<JavaxPersistenceGetterAnnotatedHandlers> inspector =\n-                AnnotatedAggregateMetaModelFactory.inspectAggregate(JavaxPersistenceGetterAnnotatedHandlers.class);\n+    void findJakartaPersistenceGetterIdentifier() {\n+        AggregateModel<JakartaPersistenceGetterAnnotatedHandlers> inspector =\n+                AnnotatedAggregateMetaModelFactory.inspectAggregate(JakartaPersistenceGetterAnnotatedHandlers.class);\n \n-        assertEquals(\"id\", inspector.getIdentifier(new JavaxPersistenceGetterAnnotatedHandlers()));\n+        assertEquals(\"id\", inspector.getIdentifier(new JakartaPersistenceGetterAnnotatedHandlers()));\n         assertEquals(\"id\", inspector.routingKey());\n     }\n \n     @Test\n-    void findJavaxPersistenceMethodIdentifier() {\n-        AggregateModel<JavaxPersistenceMethodIdAnnotatedHandlers> inspector =\n-                AnnotatedAggregateMetaModelFactory.inspectAggregate(JavaxPersistenceMethodIdAnnotatedHandlers.class);\n+    void findJakartaPersistenceMethodIdentifier() {\n+        AggregateModel<JakartaPersistenceMethodIdAnnotatedHandlers> inspector =\n+                AnnotatedAggregateMetaModelFactory.inspectAggregate(JakartaPersistenceMethodIdAnnotatedHandlers.class);\n \n-        assertEquals(\"id\", inspector.getIdentifier(new JavaxPersistenceMethodIdAnnotatedHandlers()));\n+        assertEquals(\"id\", inspector.getIdentifier(new JakartaPersistenceMethodIdAnnotatedHandlers()));\n         assertEquals(\"calculatedId\", inspector.routingKey());\n     }\n \n", "next_change": null}]}}, {"header": "diff --git a/modelling/src/test/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactoryTest.java b/modelling/src/test/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactoryTest.java\nindex a7cd4e15d..1ba3fae7e 100644\n--- a/modelling/src/test/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactoryTest.java\n+++ b/modelling/src/test/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactoryTest.java\n", "chunk": "@@ -315,7 +319,7 @@ void testFindJavaxPersistenceMethodIdentifier() {\n     }\n \n     @Test\n-    void testFindIdentifierInSuperClass() {\n+    void findIdentifierInSuperClass() {\n         AggregateModel<SomeSubclass> inspector =\n                 AnnotatedAggregateMetaModelFactory.inspectAggregate(SomeSubclass.class);\n \n", "next_change": null}]}, "commits_in_main": [{"oid": "6ad2c3106254d25bb2684f46758596d9c7ca2b86", "message": "Merge commit", "committedDate": null}, {"oid": "509f67f94383655e3a4002783622fe666d37710f", "committedDate": "2022-03-23 15:32:55 +0100", "message": "Nullability annotations"}, {"oid": "79c3254231ec8375dd1ec3dbbedb636558d362fd", "committedDate": "2022-08-30 18:30:01 +0200", "message": "Remove test prefix from test method names"}, {"oid": "4f4a60c4c15b893afc9ba1a83a535927b740cf84", "committedDate": "2023-01-17 09:00:06 +0100", "message": "Use jakarta by default. Where needed code is duplicated to support javax still."}, {"oid": "c2f087406e978184e9aefa013862d1811d5f5850", "committedDate": "2023-01-17 09:23:35 +0100", "message": "Add AnnotatedAggregateMetaModelFactoryTest for javax, and renamed javax -> jakarta in the AnnotatedAggregateMetaModelFactoryTest using jakarta."}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDkyODE0MA==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1455#discussion_r444928140", "body": "Shouldn't `GetterTypedIdentifierAggregate` be used for this test instead of `TypedIdentifierAggregate`?", "bodyText": "Shouldn't GetterTypedIdentifierAggregate be used for this test instead of TypedIdentifierAggregate?", "bodyHTML": "<p dir=\"auto\">Shouldn't <code>GetterTypedIdentifierAggregate</code> be used for this test instead of <code>TypedIdentifierAggregate</code>?</p>", "author": "smcvb", "createdAt": "2020-06-24T14:18:40Z", "path": "modelling/src/test/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactoryTest.java", "diffHunk": "@@ -302,6 +370,33 @@ void typedAggregateIdentifier() {\n                 () -> AnnotatedAggregateMetaModelFactory.inspectAggregate(TypedIdentifierAggregate.class));\n     }\n \n+    @Test\n+    void testGetterTypedAggregateIdentifier() {\n+        assertThrows(\n+                AxonConfigurationException.class,\n+                () -> AnnotatedAggregateMetaModelFactory.inspectAggregate(TypedIdentifierAggregate.class));", "originalCommit": "ee3b11b9e1708fdabecc2974d1f04904fb0689d5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "7f42eec03ca30afa91a004799b7790da79b32232", "changed_code": [{"header": "diff --git a/modelling/src/test/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactoryTest.java b/modelling/src/test/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactoryTest.java\nindex a7cd4e15d..901cdcf4f 100644\n--- a/modelling/src/test/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactoryTest.java\n+++ b/modelling/src/test/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactoryTest.java\n", "chunk": "@@ -374,7 +374,7 @@ void typedAggregateIdentifier() {\n     void testGetterTypedAggregateIdentifier() {\n         assertThrows(\n                 AxonConfigurationException.class,\n-                () -> AnnotatedAggregateMetaModelFactory.inspectAggregate(TypedIdentifierAggregate.class));\n+                () -> AnnotatedAggregateMetaModelFactory.inspectAggregate(GetterTypedIdentifierAggregate.class));\n     }\n \n     @Test\n", "next_change": {"commit": "08c3e18e75bb28e33875eea63a395747f2d324a5", "changed_code": [{"header": "diff --git a/modelling/src/test/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactoryTest.java b/modelling/src/test/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactoryTest.java\nindex 901cdcf4f..f34497992 100644\n--- a/modelling/src/test/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactoryTest.java\n+++ b/modelling/src/test/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactoryTest.java\n", "chunk": "@@ -367,34 +370,59 @@ void testIllegalFactoryMethodThrowsExceptionClass() {\n     void typedAggregateIdentifier() {\n         assertThrows(\n                 AxonConfigurationException.class,\n-                () -> AnnotatedAggregateMetaModelFactory.inspectAggregate(TypedIdentifierAggregate.class));\n+                () -> AnnotatedAggregateMetaModelFactory.inspectAggregate(TypedIdentifierAggregate.class)\n+        );\n     }\n \n     @Test\n     void testGetterTypedAggregateIdentifier() {\n         assertThrows(\n                 AxonConfigurationException.class,\n-                () -> AnnotatedAggregateMetaModelFactory.inspectAggregate(GetterTypedIdentifierAggregate.class));\n+                () -> AnnotatedAggregateMetaModelFactory.inspectAggregate(GetterTypedIdentifierAggregate.class)\n+        );\n     }\n \n     @Test\n     void testIllegalDoubleIdentifiers() {\n-        assertThrows(AxonConfigurationException.class,\n-                () -> AnnotatedAggregateMetaModelFactory\n-                        .inspectAggregate(IllegalDoubleIdFieldsAnnotatedAggregate.class));\n-        assertThrows(AxonConfigurationException.class,\n-                () -> AnnotatedAggregateMetaModelFactory\n-                        .inspectAggregate(IllegalDoubleIdMixedAnnotatedAggregate.class));\n-        assertThrows(AxonConfigurationException.class,\n-                () -> AnnotatedAggregateMetaModelFactory\n-                        .inspectAggregate(IllegalDoubleIdMethodsAnnotatedAggregate.class));\n+        assertThrows(AxonConfigurationException.class, () ->\n+                AnnotatedAggregateMetaModelFactory.inspectAggregate(IllegalDoubleIdFieldsAnnotatedAggregate.class)\n+        );\n+        assertThrows(AxonConfigurationException.class, () ->\n+                AnnotatedAggregateMetaModelFactory.inspectAggregate(IllegalDoubleIdMixedAnnotatedAggregate.class)\n+        );\n+        assertThrows(AxonConfigurationException.class, () ->\n+                AnnotatedAggregateMetaModelFactory.inspectAggregate(IllegalDoubleIdMethodsAnnotatedAggregate.class)\n+        );\n     }\n \n     @Test\n     void testVoidMethodIdentifier() {\n-        assertThrows(AxonConfigurationException.class,\n-                () -> AnnotatedAggregateMetaModelFactory\n-                        .inspectAggregate(IllegalVoidIdMethodAnnotatedAggregate.class));\n+        assertThrows(AxonConfigurationException.class, () ->\n+                AnnotatedAggregateMetaModelFactory.inspectAggregate(IllegalVoidIdMethodAnnotatedAggregate.class)\n+        );\n+    }\n+\n+    @Test\n+    void testAggregateVersionAnnotatedField() {\n+        AggregateModel<AggregateWithAggregateVersionField> testSubject =\n+                AnnotatedAggregateMetaModelFactory.inspectAggregate(AggregateWithAggregateVersionField.class);\n+\n+        assertEquals(42, testSubject.getVersion(new AggregateWithAggregateVersionField()));\n+    }\n+\n+    @Test\n+    void testAggregateVersionAnnotatedMethod() {\n+        AggregateModel<AggregateWithAggregateVersionMethod> testSubject =\n+                AnnotatedAggregateMetaModelFactory.inspectAggregate(AggregateWithAggregateVersionMethod.class);\n+\n+        assertEquals(9001, testSubject.getVersion(new AggregateWithAggregateVersionMethod()));\n+    }\n+\n+    @Test\n+    void testIllegalDoubleAggregateVersions() {\n+        assertThrows(AggregateModellingException.class, () ->\n+                AnnotatedAggregateMetaModelFactory.inspectAggregate(IllegalAggregateWithSeveralAggregateVersions.class)\n+        );\n     }\n \n     @SuppressWarnings(\"unchecked\")\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "6ad2c3106254d25bb2684f46758596d9c7ca2b86", "changed_code": [{"header": "diff --git a/modelling/src/test/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactoryTest.java b/modelling/src/test/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactoryTest.java\nindex a7cd4e15d..f34497992 100644\n--- a/modelling/src/test/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactoryTest.java\n+++ b/modelling/src/test/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactoryTest.java\n", "chunk": "@@ -367,34 +370,59 @@ void testIllegalFactoryMethodThrowsExceptionClass() {\n     void typedAggregateIdentifier() {\n         assertThrows(\n                 AxonConfigurationException.class,\n-                () -> AnnotatedAggregateMetaModelFactory.inspectAggregate(TypedIdentifierAggregate.class));\n+                () -> AnnotatedAggregateMetaModelFactory.inspectAggregate(TypedIdentifierAggregate.class)\n+        );\n     }\n \n     @Test\n     void testGetterTypedAggregateIdentifier() {\n         assertThrows(\n                 AxonConfigurationException.class,\n-                () -> AnnotatedAggregateMetaModelFactory.inspectAggregate(TypedIdentifierAggregate.class));\n+                () -> AnnotatedAggregateMetaModelFactory.inspectAggregate(GetterTypedIdentifierAggregate.class)\n+        );\n     }\n \n     @Test\n     void testIllegalDoubleIdentifiers() {\n-        assertThrows(AxonConfigurationException.class,\n-                () -> AnnotatedAggregateMetaModelFactory\n-                        .inspectAggregate(IllegalDoubleIdFieldsAnnotatedAggregate.class));\n-        assertThrows(AxonConfigurationException.class,\n-                () -> AnnotatedAggregateMetaModelFactory\n-                        .inspectAggregate(IllegalDoubleIdMixedAnnotatedAggregate.class));\n-        assertThrows(AxonConfigurationException.class,\n-                () -> AnnotatedAggregateMetaModelFactory\n-                        .inspectAggregate(IllegalDoubleIdMethodsAnnotatedAggregate.class));\n+        assertThrows(AxonConfigurationException.class, () ->\n+                AnnotatedAggregateMetaModelFactory.inspectAggregate(IllegalDoubleIdFieldsAnnotatedAggregate.class)\n+        );\n+        assertThrows(AxonConfigurationException.class, () ->\n+                AnnotatedAggregateMetaModelFactory.inspectAggregate(IllegalDoubleIdMixedAnnotatedAggregate.class)\n+        );\n+        assertThrows(AxonConfigurationException.class, () ->\n+                AnnotatedAggregateMetaModelFactory.inspectAggregate(IllegalDoubleIdMethodsAnnotatedAggregate.class)\n+        );\n     }\n \n     @Test\n     void testVoidMethodIdentifier() {\n-        assertThrows(AxonConfigurationException.class,\n-                () -> AnnotatedAggregateMetaModelFactory\n-                        .inspectAggregate(IllegalVoidIdMethodAnnotatedAggregate.class));\n+        assertThrows(AxonConfigurationException.class, () ->\n+                AnnotatedAggregateMetaModelFactory.inspectAggregate(IllegalVoidIdMethodAnnotatedAggregate.class)\n+        );\n+    }\n+\n+    @Test\n+    void testAggregateVersionAnnotatedField() {\n+        AggregateModel<AggregateWithAggregateVersionField> testSubject =\n+                AnnotatedAggregateMetaModelFactory.inspectAggregate(AggregateWithAggregateVersionField.class);\n+\n+        assertEquals(42, testSubject.getVersion(new AggregateWithAggregateVersionField()));\n+    }\n+\n+    @Test\n+    void testAggregateVersionAnnotatedMethod() {\n+        AggregateModel<AggregateWithAggregateVersionMethod> testSubject =\n+                AnnotatedAggregateMetaModelFactory.inspectAggregate(AggregateWithAggregateVersionMethod.class);\n+\n+        assertEquals(9001, testSubject.getVersion(new AggregateWithAggregateVersionMethod()));\n+    }\n+\n+    @Test\n+    void testIllegalDoubleAggregateVersions() {\n+        assertThrows(AggregateModellingException.class, () ->\n+                AnnotatedAggregateMetaModelFactory.inspectAggregate(IllegalAggregateWithSeveralAggregateVersions.class)\n+        );\n     }\n \n     @SuppressWarnings(\"unchecked\")\n", "next_change": {"commit": "79c3254231ec8375dd1ec3dbbedb636558d362fd", "changed_code": [{"header": "diff --git a/modelling/src/test/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactoryTest.java b/modelling/src/test/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactoryTest.java\nindex f34497992..1ba3fae7e 100644\n--- a/modelling/src/test/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactoryTest.java\n+++ b/modelling/src/test/java/org/axonframework/modelling/command/inspection/AnnotatedAggregateMetaModelFactoryTest.java\n", "chunk": "@@ -419,7 +420,7 @@ void testAggregateVersionAnnotatedMethod() {\n     }\n \n     @Test\n-    void testIllegalDoubleAggregateVersions() {\n+    void illegalDoubleAggregateVersions() {\n         assertThrows(AggregateModellingException.class, () ->\n                 AnnotatedAggregateMetaModelFactory.inspectAggregate(IllegalAggregateWithSeveralAggregateVersions.class)\n         );\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "6ad2c3106254d25bb2684f46758596d9c7ca2b86", "message": "Merge commit", "committedDate": null}, {"oid": "509f67f94383655e3a4002783622fe666d37710f", "committedDate": "2022-03-23 15:32:55 +0100", "message": "Nullability annotations"}, {"oid": "79c3254231ec8375dd1ec3dbbedb636558d362fd", "committedDate": "2022-08-30 18:30:01 +0200", "message": "Remove test prefix from test method names"}, {"oid": "4f4a60c4c15b893afc9ba1a83a535927b740cf84", "committedDate": "2023-01-17 09:00:06 +0100", "message": "Use jakarta by default. Where needed code is duplicated to support javax still."}, {"oid": "c2f087406e978184e9aefa013862d1811d5f5850", "committedDate": "2023-01-17 09:23:35 +0100", "message": "Add AnnotatedAggregateMetaModelFactoryTest for javax, and renamed javax -> jakarta in the AnnotatedAggregateMetaModelFactoryTest using jakarta."}]}, {"oid": "84d7f38a405232e8cbf6fcd9e14db6e512282487", "url": "https://github.com/AxonFramework/AxonFramework/commit/84d7f38a405232e8cbf6fcd9e14db6e512282487", "message": "Review remarks and improvements", "committedDate": "2020-07-02T12:59:21Z", "type": "commit"}, {"oid": "7f42eec03ca30afa91a004799b7790da79b32232", "url": "https://github.com/AxonFramework/AxonFramework/commit/7f42eec03ca30afa91a004799b7790da79b32232", "message": "Improvements based on review", "committedDate": "2020-07-02T14:37:24Z", "type": "commit"}, {"oid": "11a6593f4b6d6a826f47f42c7213c3a4103b5472", "url": "https://github.com/AxonFramework/AxonFramework/commit/11a6593f4b6d6a826f47f42c7213c3a4103b5472", "message": "Merge branch 'master' into feature/1089-annotated-methods-and-fields", "committedDate": "2020-07-02T14:52:04Z", "type": "commit"}, {"oid": "5ebe824c5f412fafb0f0a9aef09e06b94242f583", "url": "https://github.com/AxonFramework/AxonFramework/commit/5ebe824c5f412fafb0f0a9aef09e06b94242f583", "message": "Strip Getter names to mimic fields for routing keys", "committedDate": "2020-07-06T08:47:23Z", "type": "commit"}, {"oid": "065f517477993c92ea8c7e73fcff371009d5a97d", "url": "https://github.com/AxonFramework/AxonFramework/commit/065f517477993c92ea8c7e73fcff371009d5a97d", "message": "Update messaging/src/main/java/org/axonframework/common/ListUtils.java\n\nCo-authored-by: Steven van Beelen <steven.vanbeelen@axoniq.io>", "committedDate": "2020-07-16T07:54:10Z", "type": "commit"}, {"oid": "76802400d2edf364a9a2c1738a35f33151434448", "url": "https://github.com/AxonFramework/AxonFramework/commit/76802400d2edf364a9a2c1738a35f33151434448", "message": "Merge branch 'master' into feature/1089-annotated-methods-and-fields", "committedDate": "2020-07-16T08:08:41Z", "type": "commit"}, {"oid": "f89594495abfe4d65bf43bdc8bc452cb5cdd9afe", "url": "https://github.com/AxonFramework/AxonFramework/commit/f89594495abfe4d65bf43bdc8bc452cb5cdd9afe", "message": "Minor indentation and javadoc adjustments\n\nPerform some minute changes when it comes to indentation and javadoc, as\n well as the removal of unused code and unnecessary warnings\n\n#1089", "committedDate": "2020-07-20T16:21:34Z", "type": "commit"}, {"oid": "e92bdc7082a4a9d8fa1027e496139c655a7b2874", "url": "https://github.com/AxonFramework/AxonFramework/commit/e92bdc7082a4a9d8fa1027e496139c655a7b2874", "message": "Javadoc adjustments\n\nPerform several javadoc adjustments to clarify the intent of the\nmethod/class, or to simply clean up the documentation.\n\n#1089", "committedDate": "2020-07-21T11:53:40Z", "type": "commit"}, {"oid": "c4f1fe73d136d894141205d89f8bc83df8ffa825", "url": "https://github.com/AxonFramework/AxonFramework/commit/c4f1fe73d136d894141205d89f8bc83df8ffa825", "message": "Include method target\n\nInclude this annotation to be allowed on methods\n\n#1089", "committedDate": "2020-07-21T11:54:10Z", "type": "commit"}, {"oid": "c113bfe6d0733a020975a937d33faad322179b59", "url": "https://github.com/AxonFramework/AxonFramework/commit/c113bfe6d0733a020975a937d33faad322179b59", "message": "Simple renames and indentation changes\n\nSimple renames and indentation changes\n\n#1089", "committedDate": "2020-07-21T11:54:38Z", "type": "commit"}, {"oid": "08c3e18e75bb28e33875eea63a395747f2d324a5", "url": "https://github.com/AxonFramework/AxonFramework/commit/08c3e18e75bb28e33875eea63a395747f2d324a5", "message": "Fine tune overall inspectFieldsAndMethods process\n\n- Add static import for AnnotationUtils.findAnnotationAttributes\n- Rename \"type\" to \"handlerType\" to be more specific\n- Adjust indentation for readability\n- Add some comments, whenever applicable, for clarification\n- Reorder methods to follow regular invoke ordering\n- Add annotation name to assertValidValueProvidingMethod() method to\nimprove exception message\n- Add javadoc to private getMemberIdentifierName to clarify intent\n\n- Adjust setVersionMember to validate if more than one is provided and\nif so, throw an exception\n- Add logger to note version member settings\n- Add tests to validate aggregate version member logic\n- Use tertiary operators\n\n#1089", "committedDate": "2020-07-21T12:10:41Z", "type": "commit"}, {"oid": "d28efdfda546b9470c8734ad9ce14ce192d0717a", "url": "https://github.com/AxonFramework/AxonFramework/commit/d28efdfda546b9470c8734ad9ce14ce192d0717a", "message": "Fix sonarqube issues\n\n- Add some missing deprecation javadoc\n- Adjust complexity of some tests\n\n#1089", "committedDate": "2020-07-21T14:06:30Z", "type": "commit"}, {"oid": "e3e7fd4e39613e5a6bd01eb60f9870f6d9fc1912", "url": "https://github.com/AxonFramework/AxonFramework/commit/e3e7fd4e39613e5a6bd01eb60f9870f6d9fc1912", "message": "Merge remote-tracking branch 'origin/master' into feature/1089-annotated-methods-and-fields", "committedDate": "2020-07-21T15:12:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTMwNTgwMg==", "url": "https://github.com/AxonFramework/AxonFramework/pull/1455#discussion_r459305802", "body": "Why not remove `abstract` from this method and invoke `isMemberTypeSupported`. Having it this way, you could remove \"dummy\" impls from children of this class.", "bodyText": "Why not remove abstract from this method and invoke isMemberTypeSupported. Having it this way, you could remove \"dummy\" impls from children of this class.", "bodyHTML": "<p dir=\"auto\">Why not remove <code>abstract</code> from this method and invoke <code>isMemberTypeSupported</code>. Having it this way, you could remove \"dummy\" impls from children of this class.</p>", "author": "m1l4n54v1c", "createdAt": "2020-07-23T08:54:34Z", "path": "modelling/src/main/java/org/axonframework/modelling/command/inspection/AbstractChildEntityDefinition.java", "diffHunk": "@@ -47,56 +50,68 @@\n \n     @SuppressWarnings(\"unchecked\")  // Suppresses cast to Class of ForwardingMode\n     @Override\n-    public <T> Optional<ChildEntity<T>> createChildDefinition(Field field, EntityModel<T> declaringEntity) {\n-        Map<String, Object> attributes = findAnnotationAttributes(field, AggregateMember.class).orElse(null);\n-        if (attributes == null || !isFieldTypeSupported(field)) {\n+    public <T> Optional<ChildEntity<T>> createChildDefinition(Member member, EntityModel<T> declaringEntity) {\n+        Map<String, Object> attributes =\n+                findAnnotationAttributes((AnnotatedElement) member, AggregateMember.class).orElse(null);\n+        if (attributes == null || !isMemberTypeSupported(member)) {\n             return Optional.empty();\n         }\n \n-        EntityModel<Object> childEntityModel = extractChildEntityModel(declaringEntity, attributes, field);\n+        EntityModel<Object> childEntityModel = extractChildEntityModel(declaringEntity, attributes, member);\n \n-        ForwardingMode eventForwardingMode = instantiateForwardingMode(\n-                field, childEntityModel, (Class<? extends ForwardingMode>) attributes.get(\"eventForwardingMode\")\n+        ForwardingMode<EventMessage<?>> eventForwardingMode = instantiateForwardingMode(\n+                member,\n+                childEntityModel,\n+                (Class<? extends ForwardingMode<EventMessage<?>>>) attributes.get(\"eventForwardingMode\")\n         );\n \n         return Optional.of(new AnnotatedChildEntity<>(\n                 childEntityModel,\n                 (Boolean) attributes.get(\"forwardCommands\"),\n-                (msg, parent) -> resolveCommandTarget(msg, parent, field, childEntityModel),\n-                (msg, parent) -> resolveEventTargets(msg, parent, field, eventForwardingMode)\n+                (msg, parent) -> resolveCommandTarget(msg, parent, member, childEntityModel),\n+                (msg, parent) -> resolveEventTargets(msg, parent, member, eventForwardingMode)\n         ));\n     }\n \n     /**\n-     * Check whether the given {@link java.lang.reflect.Field} is of a type supported by this definition.\n+     * Check whether the given {@link Field} is of a type supported by this definition.\n      *\n-     * @param field a {@link java.lang.reflect.Field} containing a Child Entity\n+     * @param field a {@link Field} containing a Child Entity\n      * @return true if the type is as required by the implementation and false if it is not\n+     * @deprecated in favour of {@link #isMemberTypeSupported(Member)}\n      */\n+    @Deprecated\n     protected abstract boolean isFieldTypeSupported(Field field);", "originalCommit": "e3e7fd4e39613e5a6bd01eb60f9870f6d9fc1912", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "99aea53e2decdc44ca87b51073ac88abee08acfc", "changed_code": [{"header": "diff --git a/modelling/src/main/java/org/axonframework/modelling/command/inspection/AbstractChildEntityDefinition.java b/modelling/src/main/java/org/axonframework/modelling/command/inspection/AbstractChildEntityDefinition.java\nindex acfd318ee..3de0cfa7e 100644\n--- a/modelling/src/main/java/org/axonframework/modelling/command/inspection/AbstractChildEntityDefinition.java\n+++ b/modelling/src/main/java/org/axonframework/modelling/command/inspection/AbstractChildEntityDefinition.java\n", "chunk": "@@ -81,7 +81,9 @@ public <T> Optional<ChildEntity<T>> createChildDefinition(Member member, EntityM\n      * @deprecated in favour of {@link #isMemberTypeSupported(Member)}\n      */\n     @Deprecated\n-    protected abstract boolean isFieldTypeSupported(Field field);\n+    protected boolean isFieldTypeSupported(Field field) {\n+        return isMemberTypeSupported(field);\n+    }\n \n     /**\n      * Check whether the given {@link Member} is of a type supported by this definition.\n", "next_change": null}]}, "revised_code_in_main": {"commit": "6ad2c3106254d25bb2684f46758596d9c7ca2b86", "changed_code": [{"header": "diff --git a/modelling/src/main/java/org/axonframework/modelling/command/inspection/AbstractChildEntityDefinition.java b/modelling/src/main/java/org/axonframework/modelling/command/inspection/AbstractChildEntityDefinition.java\nindex acfd318ee..3de0cfa7e 100644\n--- a/modelling/src/main/java/org/axonframework/modelling/command/inspection/AbstractChildEntityDefinition.java\n+++ b/modelling/src/main/java/org/axonframework/modelling/command/inspection/AbstractChildEntityDefinition.java\n", "chunk": "@@ -81,7 +81,9 @@ public <T> Optional<ChildEntity<T>> createChildDefinition(Member member, EntityM\n      * @deprecated in favour of {@link #isMemberTypeSupported(Member)}\n      */\n     @Deprecated\n-    protected abstract boolean isFieldTypeSupported(Field field);\n+    protected boolean isFieldTypeSupported(Field field) {\n+        return isMemberTypeSupported(field);\n+    }\n \n     /**\n      * Check whether the given {@link Member} is of a type supported by this definition.\n", "next_change": null}]}, "commits_in_main": [{"oid": "6ad2c3106254d25bb2684f46758596d9c7ca2b86", "message": "Merge commit", "committedDate": null}]}, {"oid": "99aea53e2decdc44ca87b51073ac88abee08acfc", "url": "https://github.com/AxonFramework/AxonFramework/commit/99aea53e2decdc44ca87b51073ac88abee08acfc", "message": "Replace abstract deprecated method for implementation\n\nBy implementing the isFieldTypeSupported(Field) method, we can remove\nthe deprecated implementations on the implementations of the\nAbstractChildEntityDefinition, thus cleaning up more in one go.\n\n#1089", "committedDate": "2020-07-23T09:34:58Z", "type": "commit"}]}