{"pr_number": 7966, "pr_title": "CB-6282 Version based image choosing", "pr_author": "daszabo", "pr_createdAt": "2020-05-04T18:37:52Z", "pr_url": "https://github.com/hortonworks/cloudbreak/pull/7966", "merge_commit": "45f035557f4a1f127b6023b7420f0a0a9aef6b21", "timeline": [{"oid": "96d7912fcc4005c962506cd6da86f77cf89abd88", "url": "https://github.com/hortonworks/cloudbreak/commit/96d7912fcc4005c962506cd6da86f77cf89abd88", "message": "CB-6282 Version based image choosing", "committedDate": "2020-05-05T07:27:42Z", "type": "forcePushed"}, {"oid": "68c2901885e68873a93733120a8a89f633f49b26", "url": "https://github.com/hortonworks/cloudbreak/commit/68c2901885e68873a93733120a8a89f633f49b26", "message": "CB-6282 Version based image choosing", "committedDate": "2020-05-05T08:49:40Z", "type": "forcePushed"}, {"oid": "9f7d3cea324877837931763f2282a3e6850ed3e0", "url": "https://github.com/hortonworks/cloudbreak/commit/9f7d3cea324877837931763f2282a3e6850ed3e0", "message": "CB-6282 Version based image choosing", "committedDate": "2020-05-05T10:22:24Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc0NDA3Nw==", "url": "https://github.com/hortonworks/cloudbreak/pull/7966#discussion_r420744077", "body": "you could remove the package here", "bodyText": "you could remove the package here", "bodyHTML": "<p dir=\"auto\">you could remove the package here</p>", "author": "lacikaaa", "createdAt": "2020-05-06T12:16:41Z", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/converter/image/ImageConverter.java", "diffHunk": "@@ -8,12 +8,12 @@\n import org.springframework.stereotype.Component;\n \n import com.sequenceiq.common.api.type.InstanceGroupType;\n-import com.sequenceiq.freeipa.entity.Image;\n+import com.sequenceiq.freeipa.entity.ImageEntity;\n \n @Component\n-public class ImageConverter implements Converter<Image, com.sequenceiq.cloudbreak.cloud.model.Image> {\n+public class ImageConverter implements Converter<ImageEntity, com.sequenceiq.cloudbreak.cloud.model.Image> {\n     @Override\n-    public com.sequenceiq.cloudbreak.cloud.model.Image convert(Image source) {\n+    public com.sequenceiq.cloudbreak.cloud.model.Image convert(ImageEntity source) {", "originalCommit": "9f7d3cea324877837931763f2282a3e6850ed3e0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "46ccb46063a3136d41aa10741a46f8fd8a01a366", "changed_code": [{"header": "diff --git a/freeipa/src/main/java/com/sequenceiq/freeipa/converter/image/ImageConverter.java b/freeipa/src/main/java/com/sequenceiq/freeipa/converter/image/ImageConverter.java\nindex 6e8684cf39..94e509bfba 100644\n--- a/freeipa/src/main/java/com/sequenceiq/freeipa/converter/image/ImageConverter.java\n+++ b/freeipa/src/main/java/com/sequenceiq/freeipa/converter/image/ImageConverter.java\n", "chunk": "@@ -7,15 +7,16 @@ import java.util.Optional;\n import org.springframework.core.convert.converter.Converter;\n import org.springframework.stereotype.Component;\n \n+import com.sequenceiq.cloudbreak.cloud.model.Image;\n import com.sequenceiq.common.api.type.InstanceGroupType;\n import com.sequenceiq.freeipa.entity.ImageEntity;\n \n @Component\n-public class ImageConverter implements Converter<ImageEntity, com.sequenceiq.cloudbreak.cloud.model.Image> {\n+public class ImageConverter implements Converter<ImageEntity, Image> {\n     @Override\n-    public com.sequenceiq.cloudbreak.cloud.model.Image convert(ImageEntity source) {\n-        com.sequenceiq.cloudbreak.cloud.model.Image image =\n-                new com.sequenceiq.cloudbreak.cloud.model.Image(source.getImageName(),\n+    public Image convert(ImageEntity source) {\n+        Image image =\n+                new Image(source.getImageName(),\n                         Map.of(InstanceGroupType.GATEWAY, Optional.ofNullable(source.getUserdata()).orElse(\"\")),\n                         source.getOs(),\n                         source.getOsType(),\n", "next_change": null}]}, "revised_code_in_main": {"commit": "45f035557f4a1f127b6023b7420f0a0a9aef6b21", "changed_code": [{"header": "diff --git a/freeipa/src/main/java/com/sequenceiq/freeipa/converter/image/ImageConverter.java b/freeipa/src/main/java/com/sequenceiq/freeipa/converter/image/ImageConverter.java\nindex 6e8684cf39..94e509bfba 100644\n--- a/freeipa/src/main/java/com/sequenceiq/freeipa/converter/image/ImageConverter.java\n+++ b/freeipa/src/main/java/com/sequenceiq/freeipa/converter/image/ImageConverter.java\n", "chunk": "@@ -7,15 +7,16 @@ import java.util.Optional;\n import org.springframework.core.convert.converter.Converter;\n import org.springframework.stereotype.Component;\n \n+import com.sequenceiq.cloudbreak.cloud.model.Image;\n import com.sequenceiq.common.api.type.InstanceGroupType;\n import com.sequenceiq.freeipa.entity.ImageEntity;\n \n @Component\n-public class ImageConverter implements Converter<ImageEntity, com.sequenceiq.cloudbreak.cloud.model.Image> {\n+public class ImageConverter implements Converter<ImageEntity, Image> {\n     @Override\n-    public com.sequenceiq.cloudbreak.cloud.model.Image convert(ImageEntity source) {\n-        com.sequenceiq.cloudbreak.cloud.model.Image image =\n-                new com.sequenceiq.cloudbreak.cloud.model.Image(source.getImageName(),\n+    public Image convert(ImageEntity source) {\n+        Image image =\n+                new Image(source.getImageName(),\n                         Map.of(InstanceGroupType.GATEWAY, Optional.ofNullable(source.getUserdata()).orElse(\"\")),\n                         source.getOs(),\n                         source.getOsType(),\n", "next_change": {"commit": "e4f2d0e5bab1829e692a2dc8a938a380bd4dcdae", "changed_code": [{"header": "diff --git a/freeipa/src/main/java/com/sequenceiq/freeipa/converter/image/ImageConverter.java b/freeipa/src/main/java/com/sequenceiq/freeipa/converter/image/ImageConverter.java\nindex 94e509bfba..897e5967e1 100644\n--- a/freeipa/src/main/java/com/sequenceiq/freeipa/converter/image/ImageConverter.java\n+++ b/freeipa/src/main/java/com/sequenceiq/freeipa/converter/image/ImageConverter.java\n", "chunk": "@@ -15,15 +15,13 @@ import com.sequenceiq.freeipa.entity.ImageEntity;\n public class ImageConverter implements Converter<ImageEntity, Image> {\n     @Override\n     public Image convert(ImageEntity source) {\n-        Image image =\n-                new Image(source.getImageName(),\n-                        Map.of(InstanceGroupType.GATEWAY, Optional.ofNullable(source.getUserdata()).orElse(\"\")),\n-                        source.getOs(),\n-                        source.getOsType(),\n-                        source.getImageCatalogUrl(),\n-                        source.getImageCatalogName(),\n-                        source.getImageId(),\n-                        Collections.emptyMap());\n-        return image;\n+        return new Image(source.getImageName(),\n+                Map.of(InstanceGroupType.GATEWAY, Optional.ofNullable(source.getUserdata()).orElse(\"\")),\n+                source.getOs(),\n+                source.getOsType(),\n+                source.getImageCatalogUrl(),\n+                source.getImageCatalogName(),\n+                source.getImageId(),\n+                Collections.emptyMap());\n     }\n }\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "45f035557f4a1f127b6023b7420f0a0a9aef6b21", "message": "Merge commit", "committedDate": null}, {"oid": "e4f2d0e5bab1829e692a2dc8a938a380bd4dcdae", "committedDate": "2022-11-21 16:55:39 +0100", "message": "CB-19104 - Extend image filter to include provider specific filtering"}, {"oid": "c8e350ec7f03ef5b2fd2f0916dc8b9fb40782c6f", "committedDate": "2023-03-13 15:30:22 +0100", "message": "CB-20943 remove the plain text userdata from the database and move it to vault."}, {"oid": "e98145cc2c2dd5eaeca4fc56eba1764c48c6877d", "committedDate": "2023-03-20 20:18:46 +0100", "message": "Revert \"CB-20943 remove the plain text userdata from the database and move it to vault.\""}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc0NDI2Mg==", "url": "https://github.com/hortonworks/cloudbreak/pull/7966#discussion_r420744262", "body": "same here, remove the package", "bodyText": "same here, remove the package", "bodyHTML": "<p dir=\"auto\">same here, remove the package</p>", "author": "lacikaaa", "createdAt": "2020-05-06T12:17:03Z", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/converter/image/ImageToImageEntityConverter.java", "diffHunk": "@@ -3,15 +3,15 @@\n import org.springframework.stereotype.Component;\n \n import com.sequenceiq.cloudbreak.converter.AbstractConversionServiceAwareConverter;\n-import com.sequenceiq.freeipa.entity.Image;\n+import com.sequenceiq.freeipa.entity.ImageEntity;\n \n @Component\n-public class ImageToImageEntityConverter extends AbstractConversionServiceAwareConverter<com.sequenceiq.freeipa.api.model.image.Image, Image> {\n+public class ImageToImageEntityConverter extends AbstractConversionServiceAwareConverter<com.sequenceiq.freeipa.api.model.image.Image, ImageEntity> {\n \n     @Override\n-    public Image convert(com.sequenceiq.freeipa.api.model.image.Image source) {\n+    public ImageEntity convert(com.sequenceiq.freeipa.api.model.image.Image source) {", "originalCommit": "9f7d3cea324877837931763f2282a3e6850ed3e0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "46ccb46063a3136d41aa10741a46f8fd8a01a366", "changed_code": [{"header": "diff --git a/freeipa/src/main/java/com/sequenceiq/freeipa/converter/image/ImageToImageEntityConverter.java b/freeipa/src/main/java/com/sequenceiq/freeipa/converter/image/ImageToImageEntityConverter.java\nindex ad0e461498..47cd6b393d 100644\n--- a/freeipa/src/main/java/com/sequenceiq/freeipa/converter/image/ImageToImageEntityConverter.java\n+++ b/freeipa/src/main/java/com/sequenceiq/freeipa/converter/image/ImageToImageEntityConverter.java\n", "chunk": "@@ -3,13 +3,14 @@ package com.sequenceiq.freeipa.converter.image;\n import org.springframework.stereotype.Component;\n \n import com.sequenceiq.cloudbreak.converter.AbstractConversionServiceAwareConverter;\n+import com.sequenceiq.freeipa.api.model.image.Image;\n import com.sequenceiq.freeipa.entity.ImageEntity;\n \n @Component\n-public class ImageToImageEntityConverter extends AbstractConversionServiceAwareConverter<com.sequenceiq.freeipa.api.model.image.Image, ImageEntity> {\n+public class ImageToImageEntityConverter extends AbstractConversionServiceAwareConverter<Image, ImageEntity> {\n \n     @Override\n-    public ImageEntity convert(com.sequenceiq.freeipa.api.model.image.Image source) {\n+    public ImageEntity convert(Image source) {\n \n         ImageEntity imageEntity = new ImageEntity();\n         imageEntity.setImageId(source.getUuid());\n", "next_change": null}]}, "revised_code_in_main": {"commit": "45f035557f4a1f127b6023b7420f0a0a9aef6b21", "changed_code": [{"header": "diff --git a/freeipa/src/main/java/com/sequenceiq/freeipa/converter/image/ImageToImageEntityConverter.java b/freeipa/src/main/java/com/sequenceiq/freeipa/converter/image/ImageToImageEntityConverter.java\nindex ad0e461498..47cd6b393d 100644\n--- a/freeipa/src/main/java/com/sequenceiq/freeipa/converter/image/ImageToImageEntityConverter.java\n+++ b/freeipa/src/main/java/com/sequenceiq/freeipa/converter/image/ImageToImageEntityConverter.java\n", "chunk": "@@ -3,13 +3,14 @@ package com.sequenceiq.freeipa.converter.image;\n import org.springframework.stereotype.Component;\n \n import com.sequenceiq.cloudbreak.converter.AbstractConversionServiceAwareConverter;\n+import com.sequenceiq.freeipa.api.model.image.Image;\n import com.sequenceiq.freeipa.entity.ImageEntity;\n \n @Component\n-public class ImageToImageEntityConverter extends AbstractConversionServiceAwareConverter<com.sequenceiq.freeipa.api.model.image.Image, ImageEntity> {\n+public class ImageToImageEntityConverter extends AbstractConversionServiceAwareConverter<Image, ImageEntity> {\n \n     @Override\n-    public ImageEntity convert(com.sequenceiq.freeipa.api.model.image.Image source) {\n+    public ImageEntity convert(Image source) {\n \n         ImageEntity imageEntity = new ImageEntity();\n         imageEntity.setImageId(source.getUuid());\n", "next_change": {"commit": "450067bf68066f71fee27a11d231222c6a332d7d", "changed_code": [{"header": "diff --git a/freeipa/src/main/java/com/sequenceiq/freeipa/converter/image/ImageToImageEntityConverter.java b/freeipa/src/main/java/com/sequenceiq/freeipa/converter/image/ImageToImageEntityConverter.java\nindex 47cd6b393d..4857d19872 100644\n--- a/freeipa/src/main/java/com/sequenceiq/freeipa/converter/image/ImageToImageEntityConverter.java\n+++ b/freeipa/src/main/java/com/sequenceiq/freeipa/converter/image/ImageToImageEntityConverter.java\n", "chunk": "@@ -11,12 +11,10 @@ public class ImageToImageEntityConverter extends AbstractConversionServiceAwareC\n \n     @Override\n     public ImageEntity convert(Image source) {\n-\n         ImageEntity imageEntity = new ImageEntity();\n         imageEntity.setImageId(source.getUuid());\n         imageEntity.setOs(source.getOs());\n         imageEntity.setOsType(source.getOsType());\n         return imageEntity;\n     }\n-\n }\n", "next_change": {"commit": "19318e8ac6ff4b4117aa7ba8cafdf44edb70ea4a", "changed_code": [{"header": "diff --git a/freeipa/src/main/java/com/sequenceiq/freeipa/converter/image/ImageToImageEntityConverter.java b/freeipa/src/main/java/com/sequenceiq/freeipa/converter/image/ImageToImageEntityConverter.java\nindex 4857d19872..f25c55b675 100644\n--- a/freeipa/src/main/java/com/sequenceiq/freeipa/converter/image/ImageToImageEntityConverter.java\n+++ b/freeipa/src/main/java/com/sequenceiq/freeipa/converter/image/ImageToImageEntityConverter.java\n", "chunk": "@@ -2,19 +2,23 @@ package com.sequenceiq.freeipa.converter.image;\n \n import org.springframework.stereotype.Component;\n \n-import com.sequenceiq.cloudbreak.converter.AbstractConversionServiceAwareConverter;\n-import com.sequenceiq.freeipa.api.model.image.Image;\n+import com.sequenceiq.freeipa.api.v1.freeipa.stack.model.image.Image;\n import com.sequenceiq.freeipa.entity.ImageEntity;\n \n @Component\n-public class ImageToImageEntityConverter extends AbstractConversionServiceAwareConverter<Image, ImageEntity> {\n+public class ImageToImageEntityConverter {\n \n-    @Override\n     public ImageEntity convert(Image source) {\n         ImageEntity imageEntity = new ImageEntity();\n         imageEntity.setImageId(source.getUuid());\n         imageEntity.setOs(source.getOs());\n         imageEntity.setOsType(source.getOsType());\n+        imageEntity.setDate(source.getDate());\n+        imageEntity.setLdapAgentVersion(extractLdapAgentVersion(source));\n         return imageEntity;\n     }\n+\n+    public String extractLdapAgentVersion(Image image) {\n+        return image.getPackageVersions() == null ? null : image.getPackageVersions().get(\"freeipa-ldap-agent\");\n+    }\n }\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "45f035557f4a1f127b6023b7420f0a0a9aef6b21", "message": "Merge commit", "committedDate": null}, {"oid": "450067bf68066f71fee27a11d231222c6a332d7d", "committedDate": "2021-06-10 10:44:55 +0200", "message": "CB-12457 Image change flow for FreeIPA"}, {"oid": "28dc0a1cbbebcd7244b30e5de9e2f14b9f48615f", "committedDate": "2021-09-21 15:06:41 +0200", "message": "CB-14078 Remove the general converters with spring magic and use just the converter itself. This will help us to identify deadcodes inside the codebase."}, {"oid": "e2d415768ab56aff49e2750fd1fdde76e64874fc", "committedDate": "2021-10-19 16:47:05 +0200", "message": "CB-14458 Generate Freeipa image catalog with the currently used image"}, {"oid": "19318e8ac6ff4b4117aa7ba8cafdf44edb70ea4a", "committedDate": "2022-11-21 17:00:26 +0100", "message": "CB-18840 Expose LDAP agent version on FMS API"}, {"oid": "c8e350ec7f03ef5b2fd2f0916dc8b9fb40782c6f", "committedDate": "2023-03-13 15:30:22 +0100", "message": "CB-20943 remove the plain text userdata from the database and move it to vault."}, {"oid": "e98145cc2c2dd5eaeca4fc56eba1764c48c6877d", "committedDate": "2023-03-20 20:18:46 +0100", "message": "Revert \"CB-20943 remove the plain text userdata from the database and move it to vault.\""}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc0NjQyNw==", "url": "https://github.com/hortonworks/cloudbreak/pull/7966#discussion_r420746427", "body": "refactor this into a method please. I mean the part after `versions ->`", "bodyText": "refactor this into a method please. I mean the part after versions ->", "bodyHTML": "<p dir=\"auto\">refactor this into a method please. I mean the part after <code>versions -&gt;</code></p>", "author": "lacikaaa", "createdAt": "2020-05-06T12:20:54Z", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageCatalogProvider.java", "diffHunk": "@@ -91,7 +93,19 @@ private ImageCatalog filterImagesByOsType(ImageCatalog catalog) {\n         }\n         List<Image> catalogImages = catalog.getImages().getFreeipaImages();\n         List<Image> filterImages = filterImages(catalogImages, enabledOsPredicate());\n-        return new ImageCatalog(new Images(filterImages));\n+        List<FreeIpaVersions> filteredVersions = filterVersions(catalog, filterImages);\n+        return new ImageCatalog(new Images(filterImages), new Versions(filteredVersions));\n+    }\n+\n+    private List<FreeIpaVersions> filterVersions(ImageCatalog catalog, List<Image> filterImages) {\n+        List<String> filteredUuids = filterImages.stream().map(Image::getUuid).collect(Collectors.toList());\n+        return catalog.getVersions().getFreeIpaVersions().stream()\n+                .map(versions -> {\n+                    List<String> defaults = versions.getDefaults().stream().filter(filteredUuids::contains).collect(Collectors.toList());\n+                    List<String> imageIds = versions.getImageIds().stream().filter(filteredUuids::contains).collect(Collectors.toList());\n+                    LOGGER.debug(\"Filtered versions: [versions: {}, defaults: {}, images: {}]\", versions.getVersions(), defaults, imageIds);\n+                    return new FreeIpaVersions(versions.getVersions(), defaults, imageIds);\n+                }).collect(Collectors.toList());", "originalCommit": "9f7d3cea324877837931763f2282a3e6850ed3e0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "46ccb46063a3136d41aa10741a46f8fd8a01a366", "changed_code": [{"header": "diff --git a/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageCatalogProvider.java b/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageCatalogProvider.java\nindex fdabd589bb..13d951dcfc 100644\n--- a/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageCatalogProvider.java\n+++ b/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageCatalogProvider.java\n", "chunk": "@@ -99,13 +99,16 @@ public class ImageCatalogProvider {\n \n     private List<FreeIpaVersions> filterVersions(ImageCatalog catalog, List<Image> filterImages) {\n         List<String> filteredUuids = filterImages.stream().map(Image::getUuid).collect(Collectors.toList());\n+        LOGGER.debug(\"The following uuids will be removed from defaults and image ids fields: [{}]\", filteredUuids);\n         return catalog.getVersions().getFreeIpaVersions().stream()\n-                .map(versions -> {\n-                    List<String> defaults = versions.getDefaults().stream().filter(filteredUuids::contains).collect(Collectors.toList());\n-                    List<String> imageIds = versions.getImageIds().stream().filter(filteredUuids::contains).collect(Collectors.toList());\n-                    LOGGER.debug(\"Filtered versions: [versions: {}, defaults: {}, images: {}]\", versions.getVersions(), defaults, imageIds);\n-                    return new FreeIpaVersions(versions.getVersions(), defaults, imageIds);\n-                }).collect(Collectors.toList());\n+                .map(versions -> filterDefaultsAndImageIds(filteredUuids, versions)).collect(Collectors.toList());\n+    }\n+\n+    private FreeIpaVersions filterDefaultsAndImageIds(List<String> filteredUuids, FreeIpaVersions versions) {\n+        List<String> defaults = versions.getDefaults().stream().filter(filteredUuids::contains).collect(Collectors.toList());\n+        List<String> imageIds = versions.getImageIds().stream().filter(filteredUuids::contains).collect(Collectors.toList());\n+        LOGGER.debug(\"Filtered versions: [versions: {}, defaults: {}, images: {}]\", versions.getVersions(), defaults, imageIds);\n+        return new FreeIpaVersions(versions.getVersions(), defaults, imageIds);\n     }\n \n     private List<Image> filterImages(List<Image> imageList, Predicate<Image> predicate) {\n", "next_change": null}]}, "revised_code_in_main": {"commit": "45f035557f4a1f127b6023b7420f0a0a9aef6b21", "changed_code": [{"header": "diff --git a/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageCatalogProvider.java b/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageCatalogProvider.java\nindex fdabd589bb..13d951dcfc 100644\n--- a/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageCatalogProvider.java\n+++ b/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageCatalogProvider.java\n", "chunk": "@@ -99,13 +99,16 @@ public class ImageCatalogProvider {\n \n     private List<FreeIpaVersions> filterVersions(ImageCatalog catalog, List<Image> filterImages) {\n         List<String> filteredUuids = filterImages.stream().map(Image::getUuid).collect(Collectors.toList());\n+        LOGGER.debug(\"The following uuids will be removed from defaults and image ids fields: [{}]\", filteredUuids);\n         return catalog.getVersions().getFreeIpaVersions().stream()\n-                .map(versions -> {\n-                    List<String> defaults = versions.getDefaults().stream().filter(filteredUuids::contains).collect(Collectors.toList());\n-                    List<String> imageIds = versions.getImageIds().stream().filter(filteredUuids::contains).collect(Collectors.toList());\n-                    LOGGER.debug(\"Filtered versions: [versions: {}, defaults: {}, images: {}]\", versions.getVersions(), defaults, imageIds);\n-                    return new FreeIpaVersions(versions.getVersions(), defaults, imageIds);\n-                }).collect(Collectors.toList());\n+                .map(versions -> filterDefaultsAndImageIds(filteredUuids, versions)).collect(Collectors.toList());\n+    }\n+\n+    private FreeIpaVersions filterDefaultsAndImageIds(List<String> filteredUuids, FreeIpaVersions versions) {\n+        List<String> defaults = versions.getDefaults().stream().filter(filteredUuids::contains).collect(Collectors.toList());\n+        List<String> imageIds = versions.getImageIds().stream().filter(filteredUuids::contains).collect(Collectors.toList());\n+        LOGGER.debug(\"Filtered versions: [versions: {}, defaults: {}, images: {}]\", versions.getVersions(), defaults, imageIds);\n+        return new FreeIpaVersions(versions.getVersions(), defaults, imageIds);\n     }\n \n     private List<Image> filterImages(List<Image> imageList, Predicate<Image> predicate) {\n", "next_change": null}]}, "commits_in_main": [{"oid": "45f035557f4a1f127b6023b7420f0a0a9aef6b21", "message": "Merge commit", "committedDate": null}, {"oid": "e2d415768ab56aff49e2750fd1fdde76e64874fc", "committedDate": "2021-10-19 16:47:05 +0200", "message": "CB-14458 Generate Freeipa image catalog with the currently used image"}, {"oid": "3749bd40d0a563b5b1dc500fba95eaaed17f22ae", "committedDate": "2021-11-23 10:42:03 +0100", "message": "CB-14514 In case of missing FreeIPA versions in the image catalog json, generate a default one based on the advertised images flag and the current FreeIPA svc version. Generate image catalog command should set the advertised flag and skip versions."}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc0NjczNw==", "url": "https://github.com/hortonworks/cloudbreak/pull/7966#discussion_r420746737", "body": "should we log this? just to make investigation easier", "bodyText": "should we log this? just to make investigation easier", "bodyHTML": "<p dir=\"auto\">should we log this? just to make investigation easier</p>", "author": "lacikaaa", "createdAt": "2020-05-06T12:21:26Z", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageCatalogProvider.java", "diffHunk": "@@ -91,7 +93,19 @@ private ImageCatalog filterImagesByOsType(ImageCatalog catalog) {\n         }\n         List<Image> catalogImages = catalog.getImages().getFreeipaImages();\n         List<Image> filterImages = filterImages(catalogImages, enabledOsPredicate());\n-        return new ImageCatalog(new Images(filterImages));\n+        List<FreeIpaVersions> filteredVersions = filterVersions(catalog, filterImages);\n+        return new ImageCatalog(new Images(filterImages), new Versions(filteredVersions));\n+    }\n+\n+    private List<FreeIpaVersions> filterVersions(ImageCatalog catalog, List<Image> filterImages) {\n+        List<String> filteredUuids = filterImages.stream().map(Image::getUuid).collect(Collectors.toList());", "originalCommit": "9f7d3cea324877837931763f2282a3e6850ed3e0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "46ccb46063a3136d41aa10741a46f8fd8a01a366", "changed_code": [{"header": "diff --git a/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageCatalogProvider.java b/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageCatalogProvider.java\nindex fdabd589bb..13d951dcfc 100644\n--- a/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageCatalogProvider.java\n+++ b/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageCatalogProvider.java\n", "chunk": "@@ -99,13 +99,16 @@ public class ImageCatalogProvider {\n \n     private List<FreeIpaVersions> filterVersions(ImageCatalog catalog, List<Image> filterImages) {\n         List<String> filteredUuids = filterImages.stream().map(Image::getUuid).collect(Collectors.toList());\n+        LOGGER.debug(\"The following uuids will be removed from defaults and image ids fields: [{}]\", filteredUuids);\n         return catalog.getVersions().getFreeIpaVersions().stream()\n-                .map(versions -> {\n-                    List<String> defaults = versions.getDefaults().stream().filter(filteredUuids::contains).collect(Collectors.toList());\n-                    List<String> imageIds = versions.getImageIds().stream().filter(filteredUuids::contains).collect(Collectors.toList());\n-                    LOGGER.debug(\"Filtered versions: [versions: {}, defaults: {}, images: {}]\", versions.getVersions(), defaults, imageIds);\n-                    return new FreeIpaVersions(versions.getVersions(), defaults, imageIds);\n-                }).collect(Collectors.toList());\n+                .map(versions -> filterDefaultsAndImageIds(filteredUuids, versions)).collect(Collectors.toList());\n+    }\n+\n+    private FreeIpaVersions filterDefaultsAndImageIds(List<String> filteredUuids, FreeIpaVersions versions) {\n+        List<String> defaults = versions.getDefaults().stream().filter(filteredUuids::contains).collect(Collectors.toList());\n+        List<String> imageIds = versions.getImageIds().stream().filter(filteredUuids::contains).collect(Collectors.toList());\n+        LOGGER.debug(\"Filtered versions: [versions: {}, defaults: {}, images: {}]\", versions.getVersions(), defaults, imageIds);\n+        return new FreeIpaVersions(versions.getVersions(), defaults, imageIds);\n     }\n \n     private List<Image> filterImages(List<Image> imageList, Predicate<Image> predicate) {\n", "next_change": null}]}, "revised_code_in_main": {"commit": "45f035557f4a1f127b6023b7420f0a0a9aef6b21", "changed_code": [{"header": "diff --git a/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageCatalogProvider.java b/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageCatalogProvider.java\nindex fdabd589bb..13d951dcfc 100644\n--- a/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageCatalogProvider.java\n+++ b/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageCatalogProvider.java\n", "chunk": "@@ -99,13 +99,16 @@ public class ImageCatalogProvider {\n \n     private List<FreeIpaVersions> filterVersions(ImageCatalog catalog, List<Image> filterImages) {\n         List<String> filteredUuids = filterImages.stream().map(Image::getUuid).collect(Collectors.toList());\n+        LOGGER.debug(\"The following uuids will be removed from defaults and image ids fields: [{}]\", filteredUuids);\n         return catalog.getVersions().getFreeIpaVersions().stream()\n-                .map(versions -> {\n-                    List<String> defaults = versions.getDefaults().stream().filter(filteredUuids::contains).collect(Collectors.toList());\n-                    List<String> imageIds = versions.getImageIds().stream().filter(filteredUuids::contains).collect(Collectors.toList());\n-                    LOGGER.debug(\"Filtered versions: [versions: {}, defaults: {}, images: {}]\", versions.getVersions(), defaults, imageIds);\n-                    return new FreeIpaVersions(versions.getVersions(), defaults, imageIds);\n-                }).collect(Collectors.toList());\n+                .map(versions -> filterDefaultsAndImageIds(filteredUuids, versions)).collect(Collectors.toList());\n+    }\n+\n+    private FreeIpaVersions filterDefaultsAndImageIds(List<String> filteredUuids, FreeIpaVersions versions) {\n+        List<String> defaults = versions.getDefaults().stream().filter(filteredUuids::contains).collect(Collectors.toList());\n+        List<String> imageIds = versions.getImageIds().stream().filter(filteredUuids::contains).collect(Collectors.toList());\n+        LOGGER.debug(\"Filtered versions: [versions: {}, defaults: {}, images: {}]\", versions.getVersions(), defaults, imageIds);\n+        return new FreeIpaVersions(versions.getVersions(), defaults, imageIds);\n     }\n \n     private List<Image> filterImages(List<Image> imageList, Predicate<Image> predicate) {\n", "next_change": null}]}, "commits_in_main": [{"oid": "45f035557f4a1f127b6023b7420f0a0a9aef6b21", "message": "Merge commit", "committedDate": null}, {"oid": "e2d415768ab56aff49e2750fd1fdde76e64874fc", "committedDate": "2021-10-19 16:47:05 +0200", "message": "CB-14458 Generate Freeipa image catalog with the currently used image"}, {"oid": "3749bd40d0a563b5b1dc500fba95eaaed17f22ae", "committedDate": "2021-11-23 10:42:03 +0100", "message": "CB-14514 In case of missing FreeIPA versions in the image catalog json, generate a default one based on the advertised images flag and the current FreeIPA svc version. Generate image catalog command should set the advertised flag and skip versions."}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc0ODIxNw==", "url": "https://github.com/hortonworks/cloudbreak/pull/7966#discussion_r420748217", "body": "so I think this will match something 2.2.2-dcv, 2.2.2-rev etc. I think we should match only `dev` or `rc`", "bodyText": "so I think this will match something 2.2.2-dcv, 2.2.2-rev etc. I think we should match only dev or rc", "bodyHTML": "<p dir=\"auto\">so I think this will match something 2.2.2-dcv, 2.2.2-rev etc. I think we should match only <code>dev</code> or <code>rc</code></p>", "author": "lacikaaa", "createdAt": "2020-05-06T12:24:04Z", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java", "diffHunk": "@@ -29,6 +36,8 @@\n \n     private static final String DEFAULT_REGION = \"default\";\n \n+    private static final Pattern VERSION_PATTERN = Pattern.compile(\"^([0-9]+\\\\.[0-9]+\\\\.[0-9]+-([d,r][e,c][v]?\\\\.|[b]))[0-9]+$\");", "originalCommit": "9f7d3cea324877837931763f2282a3e6850ed3e0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "46ccb46063a3136d41aa10741a46f8fd8a01a366", "changed_code": [{"header": "diff --git a/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java b/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\nindex 03b6639445..6984c6b2bb 100644\n--- a/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\n+++ b/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\n", "chunk": "@@ -36,7 +37,7 @@ public class ImageService {\n \n     private static final String DEFAULT_REGION = \"default\";\n \n-    private static final Pattern VERSION_PATTERN = Pattern.compile(\"^([0-9]+\\\\.[0-9]+\\\\.[0-9]+-([d,r][e,c][v]?\\\\.|[b]))[0-9]+$\");\n+    private static final Pattern VERSION_PATTERN = Pattern.compile(\"^([0-9]+\\\\.[0-9]+\\\\.[0-9]+-(dev\\\\.|rc\\\\.|[b]))[0-9]+$\");\n \n     @Inject\n     private ImageToImageEntityConverter imageConverter;\n", "next_change": null}]}, "revised_code_in_main": {"commit": "45f035557f4a1f127b6023b7420f0a0a9aef6b21", "changed_code": [{"header": "diff --git a/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java b/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\nindex 03b6639445..f4ad42c7d7 100644\n--- a/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\n+++ b/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\n", "chunk": "@@ -36,7 +36,7 @@ public class ImageService {\n \n     private static final String DEFAULT_REGION = \"default\";\n \n-    private static final Pattern VERSION_PATTERN = Pattern.compile(\"^([0-9]+\\\\.[0-9]+\\\\.[0-9]+-([d,r][e,c][v]?\\\\.|[b]))[0-9]+$\");\n+    private static final Pattern VERSION_PATTERN = Pattern.compile(\"^([0-9]+\\\\.[0-9]+\\\\.[0-9]+-(dev\\\\.|rc\\\\.|[b]))[0-9]+$\");\n \n     @Inject\n     private ImageToImageEntityConverter imageConverter;\n", "next_change": {"commit": "9b05311dae1d17203186a6289eae5a70e6f96275", "changed_code": [{"header": "diff --git a/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java b/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\nindex f4ad42c7d7..2e0f2ec04e 100644\n--- a/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\n+++ b/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\n", "chunk": "@@ -36,8 +25,6 @@ public class ImageService {\n \n     private static final String DEFAULT_REGION = \"default\";\n \n-    private static final Pattern VERSION_PATTERN = Pattern.compile(\"^([0-9]+\\\\.[0-9]+\\\\.[0-9]+-(dev\\\\.|rc\\\\.|[b]))[0-9]+$\");\n-\n     @Inject\n     private ImageToImageEntityConverter imageConverter;\n \n", "next_change": {"commit": "9a8ba2a3e2bcd7fc2b4d943c880c5b02f602cd12", "changed_code": [{"header": "diff --git a/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java b/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\nindex 2e0f2ec04e..ab4ca45b12 100644\n--- a/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\n+++ b/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\n", "chunk": "@@ -25,6 +34,8 @@ public class ImageService {\n \n     private static final String DEFAULT_REGION = \"default\";\n \n+    private static final String GOV = \"_gov\";\n+\n     @Inject\n     private ImageToImageEntityConverter imageConverter;\n \n", "next_change": {"commit": "6953836422238552534c0e41f7bfc1fa6c4f3158", "changed_code": [{"header": "diff --git a/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java b/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\nindex ab4ca45b12..b2ea33a73f 100644\n--- a/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\n+++ b/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\n", "chunk": "@@ -34,8 +39,6 @@ public class ImageService {\n \n     private static final String DEFAULT_REGION = \"default\";\n \n-    private static final String GOV = \"_gov\";\n-\n     @Inject\n     private ImageToImageEntityConverter imageConverter;\n \n", "next_change": null}]}}]}}, {"header": "diff --git a/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java b/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\nindex f4ad42c7d7..2e0f2ec04e 100644\n--- a/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\n+++ b/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\n", "chunk": "@@ -45,30 +32,25 @@ public class ImageService {\n     private ImageRepository imageRepository;\n \n     @Inject\n-    private ImageCatalogProvider imageCatalogProvider;\n-\n-    @Value(\"${freeipa.image.catalog.url}\")\n-    private String defaultCatalogUrl;\n+    private ImageProviderFactory imageProviderFactory;\n \n     @Value(\"${freeipa.image.catalog.default.os}\")\n     private String defaultOs;\n \n-    @Value(\"${info.app.version:}\")\n-    private String freeIpaVersion;\n-\n     public ImageEntity create(Stack stack, ImageSettingsRequest imageRequest) {\n         String region = stack.getRegion();\n         String platformString = stack.getCloudPlatform().toLowerCase();\n-        com.sequenceiq.freeipa.api.model.image.Image imageCatalogImage = getImage(imageRequest, region, platformString);\n-        String imageName = determineImageName(platformString, region, imageCatalogImage);\n-        String catalogUrl = Objects.nonNull(imageRequest.getCatalog()) ? imageRequest.getCatalog() : defaultCatalogUrl;\n-        LOGGER.info(\"Selected VM image for CloudPlatform '{}' and region '{}' is: {} from: {} image catalog\",\n-                platformString, region, imageName, catalogUrl);\n+        ImageWrapper imageWrapper = getImage(imageRequest, region, platformString);\n+        String imageName = determineImageName(platformString, region, imageWrapper.getImage());\n+        LOGGER.info(\"Selected VM image for CloudPlatform '{}' and region '{}' is: {} from: {} image catalog with '{}' catalog name\",\n+                platformString, region, imageName, imageWrapper.getCatalogUrl(), imageWrapper.getCatalogName());\n \n-        ImageEntity imageEntity = imageConverter.convert(imageCatalogImage);\n+        ImageEntity imageEntity = imageConverter.convert(imageWrapper.getImage());\n         imageEntity.setStack(stack);\n         imageEntity.setImageName(imageName);\n-        imageEntity.setImageCatalogUrl(catalogUrl);\n+        imageEntity.setImageCatalogUrl(imageWrapper.getCatalogUrl());\n+        imageEntity.setImageCatalogName(imageWrapper.getCatalogName());\n+\n         return imageRepository.save(imageEntity);\n     }\n \n", "next_change": {"commit": "450067bf68066f71fee27a11d231222c6a332d7d", "changed_code": [{"header": "diff --git a/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java b/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\nindex 2e0f2ec04e..7176093c53 100644\n--- a/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\n+++ b/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\n", "chunk": "@@ -34,24 +36,66 @@ public class ImageService {\n     @Inject\n     private ImageProviderFactory imageProviderFactory;\n \n+    @Inject\n+    private AuditReader auditReader;\n+\n     @Value(\"${freeipa.image.catalog.default.os}\")\n     private String defaultOs;\n \n     public ImageEntity create(Stack stack, ImageSettingsRequest imageRequest) {\n+        Pair<ImageWrapper, String> imageWrapperAndNamePair = fetchImageWrapperAndName(stack, imageRequest);\n+        ImageEntity imageEntity = createImageEntity(stack, imageWrapperAndNamePair);\n+        return imageRepository.save(imageEntity);\n+    }\n+\n+    private ImageEntity createImageEntity(Stack stack, Pair<ImageWrapper, String> imageWrapperAndNamePair) {\n+        ImageWrapper imageWrapper = imageWrapperAndNamePair.getLeft();\n+        ImageEntity imageEntity = imageConverter.convert(imageWrapper.getImage());\n+        imageEntity.setStack(stack);\n+        imageEntity.setImageName(imageWrapperAndNamePair.getRight());\n+        imageEntity.setImageCatalogUrl(imageWrapper.getCatalogUrl());\n+        imageEntity.setImageCatalogName(imageWrapper.getCatalogName());\n+        return imageEntity;\n+    }\n+\n+    public ImageEntity changeImage(Stack stack, ImageSettingsRequest imageRequest) {\n+        LOGGER.info(\"Change image using request: {}\", imageRequest);\n+        Pair<ImageWrapper, String> imageWrapperAndNamePair = fetchImageWrapperAndName(stack, imageRequest);\n+        ImageEntity imageEntity = updateImageWithNewValues(stack, imageWrapperAndNamePair.getLeft(), imageWrapperAndNamePair.getRight());\n+        LOGGER.info(\"New image entity: {}\", imageEntity);\n+        return imageRepository.save(imageEntity);\n+    }\n+\n+    public Pair<ImageWrapper, String> fetchImageWrapperAndName(Stack stack, ImageSettingsRequest imageRequest) {\n         String region = stack.getRegion();\n         String platformString = stack.getCloudPlatform().toLowerCase();\n         ImageWrapper imageWrapper = getImage(imageRequest, region, platformString);\n         String imageName = determineImageName(platformString, region, imageWrapper.getImage());\n         LOGGER.info(\"Selected VM image for CloudPlatform '{}' and region '{}' is: {} from: {} image catalog with '{}' catalog name\",\n                 platformString, region, imageName, imageWrapper.getCatalogUrl(), imageWrapper.getCatalogName());\n+        return Pair.of(imageWrapper, imageName);\n+    }\n \n-        ImageEntity imageEntity = imageConverter.convert(imageWrapper.getImage());\n-        imageEntity.setStack(stack);\n+    private ImageEntity updateImageWithNewValues(Stack stack, ImageWrapper imageWrapper, String imageName) {\n+        ImageEntity imageEntity = imageRepository.getByStack(stack);\n         imageEntity.setImageName(imageName);\n+        imageEntity.setImageId(imageWrapper.getImage().getUuid());\n         imageEntity.setImageCatalogUrl(imageWrapper.getCatalogUrl());\n         imageEntity.setImageCatalogName(imageWrapper.getCatalogName());\n+        return imageEntity;\n+    }\n \n-        return imageRepository.save(imageEntity);\n+    public void revertImageToRevision(Long imageEntityId, Number revision) {\n+        ImageEntity originalImageEntity =\n+                auditReader.find(ImageEntity.class, imageEntityId, revision);\n+        LOGGER.info(\"Reverting to revision [{}] using {}\", revision, originalImageEntity);\n+        ImageEntity imageEntity = imageRepository.findById(imageEntityId).get();\n+        imageEntity.setImageName(originalImageEntity.getImageName());\n+        imageEntity.setImageId(originalImageEntity.getImageId());\n+        imageEntity.setImageCatalogName(originalImageEntity.getImageCatalogName());\n+        imageEntity.setImageCatalogUrl(originalImageEntity.getImageCatalogUrl());\n+        imageRepository.save(imageEntity);\n+        LOGGER.info(\"Image reverted\");\n     }\n \n     public ImageEntity getByStack(Stack stack) {\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "45f035557f4a1f127b6023b7420f0a0a9aef6b21", "message": "Merge commit", "committedDate": null}, {"oid": "d38fbaae70d678dbdbff37f3c96bb05415194a93", "committedDate": "2021-04-16 09:58:33 +0200", "message": "CB-12140 Extend image filtering logic to match by the image uuid as well."}, {"oid": "9b05311dae1d17203186a6289eae5a70e6f96275", "committedDate": "2021-04-19 15:08:56 +0200", "message": "CB-11904: Extension of the CB API to support custom image catalogs"}, {"oid": "b7a1800ecb0bc7dc40d1d3c5f3deaab72cbdb9c1", "committedDate": "2021-05-10 15:23:02 +0200", "message": "CB-11904: Custom image catalog CRUD operations"}, {"oid": "450067bf68066f71fee27a11d231222c6a332d7d", "committedDate": "2021-06-10 10:44:55 +0200", "message": "CB-12457 Image change flow for FreeIPA"}, {"oid": "28c71fb81880c0a3b19f833ac2791c0cc56d9692", "committedDate": "2021-09-13 16:00:18 +0200", "message": "CB-13685 Implement getFreeIpaUpgradeOptions in FreeIpaUpgradeV1Controller"}, {"oid": "f86e0832269aa151ded81f3125bbc910718572f8", "committedDate": "2021-10-05 14:48:43 +0200", "message": "CB-13339 E2E test for FreeIPA upgrade"}, {"oid": "e2d415768ab56aff49e2750fd1fdde76e64874fc", "committedDate": "2021-10-19 16:47:05 +0200", "message": "CB-14458 Generate Freeipa image catalog with the currently used image"}, {"oid": "3749bd40d0a563b5b1dc500fba95eaaed17f22ae", "committedDate": "2021-11-23 10:42:03 +0100", "message": "CB-14514 In case of missing FreeIPA versions in the image catalog json, generate a default one based on the advertised images flag and the current FreeIPA svc version. Generate image catalog command should set the advertised flag and skip versions."}, {"oid": "a691a9621273daef355ecd77c1c7ebcc74442694", "committedDate": "2022-03-17 10:11:23 +0100", "message": "CB-15873 CB-15874 CB-15875 CB-15879 Support Gov and Public AWS in the same time for local dev. Modify mock idbroker mapping roles for gov cloud. Modify region mapping to include gov cloud regions. Add new crn segment to gov cloud deployment."}, {"oid": "9a8ba2a3e2bcd7fc2b4d943c880c5b02f602cd12", "committedDate": "2022-03-30 17:47:59 +0200", "message": "CB-15872 using the right provider name for selecting gov cloud. added unit tests as well."}, {"oid": "2bc448cc3ae110755860e627945adb6203a47e28", "committedDate": "2022-06-13 16:37:17 +0200", "message": "CB-17177 Rotate salt password endpoints in environment/freeipa"}, {"oid": "01075db65d060e21989025fc99bf65cb8c98f45f", "committedDate": "2022-08-30 09:54:46 +0200", "message": "CB-18004 Implement FreeIPA flow skeleton for vertical scale"}, {"oid": "aa727ab4f0f5c1b49d061d5bb9319bf6ed6531c6", "committedDate": "2022-10-13 13:21:24 +0200", "message": "CB-18682 Freeipa upgrade consistently fails with could not prepare statement - connection is closed"}, {"oid": "19318e8ac6ff4b4117aa7ba8cafdf44edb70ea4a", "committedDate": "2022-11-21 17:00:26 +0100", "message": "CB-18840 Expose LDAP agent version on FMS API"}, {"oid": "e57164c19f0c1c3c12dcde6248252904fedaf42f", "committedDate": "2022-12-02 10:20:36 +0100", "message": "CB-19561 - Marketplace image should be chosen if CDP_AZURE_IMAGE_MARKETPLACE_ONLY is granted"}, {"oid": "6bc943225ff523b9248c9d5ce7bd72b3a3ef4e83", "committedDate": "2022-12-07 10:21:03 +0100", "message": "CB-15822 Refactor used image collection"}, {"oid": "22552e93deed6e8a8583f371d911a15b5a19928d", "committedDate": "2023-01-25 11:07:09 +0100", "message": "CB-19105 Fallback to VHD image in case of marketplace image deployment error"}, {"oid": "6953836422238552534c0e41f7bfc1fa6c4f3158", "committedDate": "2023-03-01 10:28:04 +0100", "message": "CRB-2448 [FedRAMP] Hide all non core CDP cluster template on FedRAMP control planes. This also involves dps-k8s and csi changes. We can now exclude blueprint by name and also hide templates based on the supported runtimes."}, {"oid": "c8e350ec7f03ef5b2fd2f0916dc8b9fb40782c6f", "committedDate": "2023-03-13 15:30:22 +0100", "message": "CB-20943 remove the plain text userdata from the database and move it to vault."}, {"oid": "e98145cc2c2dd5eaeca4fc56eba1764c48c6877d", "committedDate": "2023-03-20 20:18:46 +0100", "message": "Revert \"CB-20943 remove the plain text userdata from the database and move it to vault.\""}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc0ODk5NQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7966#discussion_r420748995", "body": "extract to method please", "bodyText": "extract to method please", "bodyHTML": "<p dir=\"auto\">extract to method please</p>", "author": "lacikaaa", "createdAt": "2020-05-06T12:25:24Z", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java", "diffHunk": "@@ -53,46 +65,111 @@ public Image create(Stack stack, ImageSettingsRequest imageRequest) {\n         LOGGER.info(\"Selected VM image for CloudPlatform '{}' and region '{}' is: {} from: {} image catalog\",\n                 platformString, region, imageName, catalogUrl);\n \n-        Image image = imageConverter.convert(imageCatalogImage);\n-        image.setStack(stack);\n-        image.setImageName(imageName);\n-        image.setImageCatalogUrl(catalogUrl);\n-        return imageRepository.save(image);\n+        ImageEntity imageEntity = imageConverter.convert(imageCatalogImage);\n+        imageEntity.setStack(stack);\n+        imageEntity.setImageName(imageName);\n+        imageEntity.setImageCatalogUrl(catalogUrl);\n+        return imageRepository.save(imageEntity);\n     }\n \n-    public Image getByStack(Stack stack) {\n+    public ImageEntity getByStack(Stack stack) {\n         return imageRepository.getByStack(stack);\n     }\n \n-    public Image getByStackId(Long stackId) {\n+    public ImageEntity getByStackId(Long stackId) {\n         return imageRepository.getByStackId(stackId);\n     }\n \n-    public Image decorateImageWithUserDataForStack(Stack stack, String userdata) {\n-        Image image = getByStack(stack);\n-        image.setUserdata(userdata);\n-        return imageRepository.save(image);\n+    public ImageEntity decorateImageWithUserDataForStack(Stack stack, String userdata) {\n+        ImageEntity imageEntity = getByStack(stack);\n+        imageEntity.setUserdata(userdata);\n+        return imageRepository.save(imageEntity);\n     }\n \n-    public com.sequenceiq.freeipa.api.model.image.Image getImage(ImageSettingsRequest imageSettings, String region, String platform) {\n+    public Image getImage(ImageSettingsRequest imageSettings, String region, String platform) {\n         String imageId = imageSettings.getId();\n         String catalogUrl = Objects.nonNull(imageSettings.getCatalog()) ? imageSettings.getCatalog() : defaultCatalogUrl;\n         String imageOs = Objects.nonNull(imageSettings.getOs()) ? imageSettings.getOs() : defaultOs;\n \n-        List<com.sequenceiq.freeipa.api.model.image.Image> images = imageCatalogProvider.getImageCatalog(catalogUrl).getImages().getFreeipaImages();\n-        Optional<? extends com.sequenceiq.freeipa.api.model.image.Image> image = findImage(imageId, imageOs, images, region, platform);\n-        if (image.isEmpty()) {\n-            imageCatalogProvider.evictImageCatalogCache(catalogUrl);\n-            images = imageCatalogProvider.getImageCatalog(catalogUrl).getImages().getFreeipaImages();\n-            image = findImage(imageId, imageOs, images, region, platform);\n-            if (image.isEmpty()) {\n-                throw new ImageNotFoundException(String.format(\"Could not find any image with id: '%s' in region '%s' with OS '%s'.\", imageId, region, imageOs));\n-            }\n+        ImageCatalog cachedImageCatalog = imageCatalogProvider.getImageCatalog(catalogUrl);\n+        return findImageForAppVersion(region, platform, imageId, imageOs, cachedImageCatalog)\n+                .or(() -> {\n+                    LOGGER.debug(\"Image not found with the parameters: imageId: {}, imageOs: {}, region: {}, platform: {}\", imageId, imageOs, region, platform);\n+                    LOGGER.debug(\"Evicting image catalog cache to retry.\");\n+                    imageCatalogProvider.evictImageCatalogCache(catalogUrl);\n+                    ImageCatalog renewedImageCatalog = imageCatalogProvider.getImageCatalog(catalogUrl);\n+                    return findImageForAppVersion(region, platform, imageId, imageOs, renewedImageCatalog);", "originalCommit": "9f7d3cea324877837931763f2282a3e6850ed3e0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "46ccb46063a3136d41aa10741a46f8fd8a01a366", "changed_code": [{"header": "diff --git a/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java b/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\nindex 03b6639445..6984c6b2bb 100644\n--- a/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\n+++ b/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\n", "chunk": "@@ -93,17 +94,26 @@ public class ImageService {\n \n         ImageCatalog cachedImageCatalog = imageCatalogProvider.getImageCatalog(catalogUrl);\n         return findImageForAppVersion(region, platform, imageId, imageOs, cachedImageCatalog)\n-                .or(() -> {\n-                    LOGGER.debug(\"Image not found with the parameters: imageId: {}, imageOs: {}, region: {}, platform: {}\", imageId, imageOs, region, platform);\n-                    LOGGER.debug(\"Evicting image catalog cache to retry.\");\n-                    imageCatalogProvider.evictImageCatalogCache(catalogUrl);\n-                    ImageCatalog renewedImageCatalog = imageCatalogProvider.getImageCatalog(catalogUrl);\n-                    return findImageForAppVersion(region, platform, imageId, imageOs, renewedImageCatalog);\n-                })\n-                .orElseThrow(() -> {\n-                    String message = String.format(\"Could not find any image with id: '%s' in region '%s' with OS '%s'.\", imageId, region, imageOs);\n-                    return new ImageNotFoundException(message);\n-                });\n+                .or(retryAfterEvictingCache(region, platform, imageId, catalogUrl, imageOs))\n+                .orElseThrow(throwImageNotFoundException(region, imageId, imageOs));\n+    }\n+\n+    private Supplier<ImageNotFoundException> throwImageNotFoundException(String region, String imageId, String imageOs) {\n+        return () -> {\n+            LOGGER.warn(\"Image not found in refreshed image catalog, by parameters: imageid: {}, region: {}, imageOs: {}\", imageId, region, imageOs);\n+            String message = String.format(\"Could not find any image with id: '%s' in region '%s' with OS '%s'.\", imageId, region, imageOs);\n+            return new ImageNotFoundException(message);\n+        };\n+    }\n+\n+    private Supplier<Optional<? extends Image>> retryAfterEvictingCache(String region, String platform, String imageId, String catalogUrl, String imageOs) {\n+        return () -> {\n+            LOGGER.debug(\"Image not found with the parameters: imageId: {}, imageOs: {}, region: {}, platform: {}\", imageId, imageOs, region, platform);\n+            LOGGER.debug(\"Evicting image catalog cache to retry.\");\n+            imageCatalogProvider.evictImageCatalogCache(catalogUrl);\n+            ImageCatalog renewedImageCatalog = imageCatalogProvider.getImageCatalog(catalogUrl);\n+            return findImageForAppVersion(region, platform, imageId, imageOs, renewedImageCatalog);\n+        };\n     }\n \n     private Optional<Image> findImageForAppVersion(String region, String platform, String imageId, String imageOs, ImageCatalog catalog) {\n", "next_change": {"commit": "eefc90318efb4c428601267f57741080bcfef0d8", "changed_code": [{"header": "diff --git a/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java b/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\nindex 6984c6b2bb..f4ad42c7d7 100644\n--- a/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\n+++ b/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\n", "chunk": "@@ -94,26 +93,22 @@ public class ImageService {\n \n         ImageCatalog cachedImageCatalog = imageCatalogProvider.getImageCatalog(catalogUrl);\n         return findImageForAppVersion(region, platform, imageId, imageOs, cachedImageCatalog)\n-                .or(retryAfterEvictingCache(region, platform, imageId, catalogUrl, imageOs))\n-                .orElseThrow(throwImageNotFoundException(region, imageId, imageOs));\n+                .or(() -> retryAfterEvictingCache(region, platform, imageId, catalogUrl, imageOs))\n+                .orElseThrow(() -> throwImageNotFoundException(region, imageId, imageOs));\n     }\n \n-    private Supplier<ImageNotFoundException> throwImageNotFoundException(String region, String imageId, String imageOs) {\n-        return () -> {\n+    private ImageNotFoundException throwImageNotFoundException(String region, String imageId, String imageOs) {\n             LOGGER.warn(\"Image not found in refreshed image catalog, by parameters: imageid: {}, region: {}, imageOs: {}\", imageId, region, imageOs);\n             String message = String.format(\"Could not find any image with id: '%s' in region '%s' with OS '%s'.\", imageId, region, imageOs);\n             return new ImageNotFoundException(message);\n-        };\n     }\n \n-    private Supplier<Optional<? extends Image>> retryAfterEvictingCache(String region, String platform, String imageId, String catalogUrl, String imageOs) {\n-        return () -> {\n+    private Optional<Image> retryAfterEvictingCache(String region, String platform, String imageId, String catalogUrl, String imageOs) {\n             LOGGER.debug(\"Image not found with the parameters: imageId: {}, imageOs: {}, region: {}, platform: {}\", imageId, imageOs, region, platform);\n             LOGGER.debug(\"Evicting image catalog cache to retry.\");\n             imageCatalogProvider.evictImageCatalogCache(catalogUrl);\n             ImageCatalog renewedImageCatalog = imageCatalogProvider.getImageCatalog(catalogUrl);\n             return findImageForAppVersion(region, platform, imageId, imageOs, renewedImageCatalog);\n-        };\n     }\n \n     private Optional<Image> findImageForAppVersion(String region, String platform, String imageId, String imageOs, ImageCatalog catalog) {\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "45f035557f4a1f127b6023b7420f0a0a9aef6b21", "changed_code": [{"header": "diff --git a/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java b/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\nindex 03b6639445..f4ad42c7d7 100644\n--- a/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\n+++ b/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\n", "chunk": "@@ -93,17 +93,22 @@ public class ImageService {\n \n         ImageCatalog cachedImageCatalog = imageCatalogProvider.getImageCatalog(catalogUrl);\n         return findImageForAppVersion(region, platform, imageId, imageOs, cachedImageCatalog)\n-                .or(() -> {\n-                    LOGGER.debug(\"Image not found with the parameters: imageId: {}, imageOs: {}, region: {}, platform: {}\", imageId, imageOs, region, platform);\n-                    LOGGER.debug(\"Evicting image catalog cache to retry.\");\n-                    imageCatalogProvider.evictImageCatalogCache(catalogUrl);\n-                    ImageCatalog renewedImageCatalog = imageCatalogProvider.getImageCatalog(catalogUrl);\n-                    return findImageForAppVersion(region, platform, imageId, imageOs, renewedImageCatalog);\n-                })\n-                .orElseThrow(() -> {\n-                    String message = String.format(\"Could not find any image with id: '%s' in region '%s' with OS '%s'.\", imageId, region, imageOs);\n-                    return new ImageNotFoundException(message);\n-                });\n+                .or(() -> retryAfterEvictingCache(region, platform, imageId, catalogUrl, imageOs))\n+                .orElseThrow(() -> throwImageNotFoundException(region, imageId, imageOs));\n+    }\n+\n+    private ImageNotFoundException throwImageNotFoundException(String region, String imageId, String imageOs) {\n+            LOGGER.warn(\"Image not found in refreshed image catalog, by parameters: imageid: {}, region: {}, imageOs: {}\", imageId, region, imageOs);\n+            String message = String.format(\"Could not find any image with id: '%s' in region '%s' with OS '%s'.\", imageId, region, imageOs);\n+            return new ImageNotFoundException(message);\n+    }\n+\n+    private Optional<Image> retryAfterEvictingCache(String region, String platform, String imageId, String catalogUrl, String imageOs) {\n+            LOGGER.debug(\"Image not found with the parameters: imageId: {}, imageOs: {}, region: {}, platform: {}\", imageId, imageOs, region, platform);\n+            LOGGER.debug(\"Evicting image catalog cache to retry.\");\n+            imageCatalogProvider.evictImageCatalogCache(catalogUrl);\n+            ImageCatalog renewedImageCatalog = imageCatalogProvider.getImageCatalog(catalogUrl);\n+            return findImageForAppVersion(region, platform, imageId, imageOs, renewedImageCatalog);\n     }\n \n     private Optional<Image> findImageForAppVersion(String region, String platform, String imageId, String imageOs, ImageCatalog catalog) {\n", "next_change": {"commit": "9b05311dae1d17203186a6289eae5a70e6f96275", "changed_code": [{"header": "diff --git a/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java b/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\nindex f4ad42c7d7..2e0f2ec04e 100644\n--- a/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\n+++ b/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\n", "chunk": "@@ -86,98 +68,11 @@ public class ImageService {\n         return imageRepository.save(imageEntity);\n     }\n \n-    public Image getImage(ImageSettingsRequest imageSettings, String region, String platform) {\n-        String imageId = imageSettings.getId();\n-        String catalogUrl = Objects.nonNull(imageSettings.getCatalog()) ? imageSettings.getCatalog() : defaultCatalogUrl;\n-        String imageOs = Objects.nonNull(imageSettings.getOs()) ? imageSettings.getOs() : defaultOs;\n-\n-        ImageCatalog cachedImageCatalog = imageCatalogProvider.getImageCatalog(catalogUrl);\n-        return findImageForAppVersion(region, platform, imageId, imageOs, cachedImageCatalog)\n-                .or(() -> retryAfterEvictingCache(region, platform, imageId, catalogUrl, imageOs))\n-                .orElseThrow(() -> throwImageNotFoundException(region, imageId, imageOs));\n-    }\n-\n-    private ImageNotFoundException throwImageNotFoundException(String region, String imageId, String imageOs) {\n-            LOGGER.warn(\"Image not found in refreshed image catalog, by parameters: imageid: {}, region: {}, imageOs: {}\", imageId, region, imageOs);\n-            String message = String.format(\"Could not find any image with id: '%s' in region '%s' with OS '%s'.\", imageId, region, imageOs);\n-            return new ImageNotFoundException(message);\n-    }\n-\n-    private Optional<Image> retryAfterEvictingCache(String region, String platform, String imageId, String catalogUrl, String imageOs) {\n-            LOGGER.debug(\"Image not found with the parameters: imageId: {}, imageOs: {}, region: {}, platform: {}\", imageId, imageOs, region, platform);\n-            LOGGER.debug(\"Evicting image catalog cache to retry.\");\n-            imageCatalogProvider.evictImageCatalogCache(catalogUrl);\n-            ImageCatalog renewedImageCatalog = imageCatalogProvider.getImageCatalog(catalogUrl);\n-            return findImageForAppVersion(region, platform, imageId, imageOs, renewedImageCatalog);\n-    }\n-\n-    private Optional<Image> findImageForAppVersion(String region, String platform, String imageId, String imageOs, ImageCatalog catalog) {\n-        List<FreeIpaVersions> versions = filterFreeIpaVersionsByAppVersion(catalog.getVersions().getFreeIpaVersions());\n-        List<Image> compatibleImages = findImage(imageId, imageOs, catalog.getImages().getFreeipaImages(), region, platform);\n-        LOGGER.debug(\"[{}] compatible images found, by the following parameters: imageId: {}, imageOs: {}, region: {}, platform: {}\",\n-                compatibleImages.size(), imageId, imageOs, region, platform);\n-\n-        return findImageInDefaults(versions, compatibleImages)\n-                .or(() -> findImageByApplicationVersion(versions, compatibleImages))\n-                .or(() -> findMostRecentImage(compatibleImages));\n-    }\n-\n-    private Optional<Image> findMostRecentImage(List<Image> compatibleImages) {\n-            LOGGER.debug(\"Not found any image compatible with the application version. Falling back to the most recent image.\");\n-            return compatibleImages.stream().max(Comparator.comparing(Image::getDate));\n-    }\n-\n-    private Optional<Image> findImageByApplicationVersion(List<FreeIpaVersions> versions, List<Image> compatibleImages) {\n-            LOGGER.debug(\"Default image not found. Attempt to find an image, compatible with the application version.\");\n-            return filterImages(versions, compatibleImages, FreeIpaVersions::getImageIds);\n-    }\n-\n-    private Optional<Image> findImageInDefaults(List<FreeIpaVersions> versions, List<Image> compatibleImages) {\n-        LOGGER.debug(\"Attempt to find a default image to use.\");\n-        return filterImages(versions, compatibleImages, FreeIpaVersions::getDefaults);\n-    }\n-\n-    private Optional<Image> filterImages(List<FreeIpaVersions> freeIpaVersions, List<Image> images,\n-            Function<FreeIpaVersions, List<String>> memberFunction) {\n-        List<String> imageIds = freeIpaVersions.stream().map(memberFunction).flatMap(Collection::stream).collect(Collectors.toList());\n-        return images.stream().filter(image -> imageIds.contains(image.getUuid())).max(Comparator.comparing(Image::getDate));\n-    }\n-\n-    private List<FreeIpaVersions> filterFreeIpaVersionsByAppVersion(List<FreeIpaVersions> freeIpaVersions) {\n-        List<FreeIpaVersions> exactFreeIpaVersionsMatches = freeIpaVersions.stream().filter(toExactVersionMatch()).collect(Collectors.toList());\n-        if (!exactFreeIpaVersionsMatches.isEmpty()) {\n-            LOGGER.debug(\"Exact version match found in image catalog for app version: {}\", freeIpaVersion);\n-            return exactFreeIpaVersionsMatches;\n-        }\n-        List<FreeIpaVersions> prefixFreeIpaVersions = freeIpaVersions.stream().filter(toPrefixVersionMatch()).collect(Collectors.toList());\n-        if (!prefixFreeIpaVersions.isEmpty()) {\n-            LOGGER.debug(\"Prefix version match found in image catalog for app version: {}\", freeIpaVersion);\n-            return prefixFreeIpaVersions;\n-        }\n-\n-        LOGGER.warn(\"Not found matching version in image catalog. Falling back to most recent image.\");\n-        return freeIpaVersions;\n-    }\n+    public ImageWrapper getImage(ImageSettingsRequest imageSettings, String region, String platform) {\n+        return imageProviderFactory.getImageProvider(imageSettings.getCatalog())\n+                .getImage(imageSettings, region, platform)\n+                .orElseThrow(() -> throwImageNotFoundException(region, imageSettings.getId(), Optional.ofNullable(imageSettings.getOs()).orElse(defaultOs)));\n \n-    private Predicate<? super FreeIpaVersions> toPrefixVersionMatch() {\n-        return freeIpaVersions -> freeIpaVersions.getVersions().stream().anyMatch(\n-                version -> {\n-                    Optional<String> appVersionPrefix = extractVersionWithoutBuildTypeAndNumber(freeIpaVersion);\n-                    Optional<String> versionPrefix = extractVersionWithoutBuildTypeAndNumber(version);\n-                    return appVersionPrefix.isPresent() && appVersionPrefix.equals(versionPrefix);\n-                });\n-    }\n-\n-    private Optional<String> extractVersionWithoutBuildTypeAndNumber(String version) {\n-        Matcher appVersionMatcher = VERSION_PATTERN.matcher(version);\n-        if (!appVersionMatcher.matches() || appVersionMatcher.groupCount() != 2) {\n-            return Optional.empty();\n-        }\n-        return Optional.of(appVersionMatcher.group(1));\n-    }\n-\n-    private Predicate<? super FreeIpaVersions> toExactVersionMatch() {\n-        return freeIpaVersions -> freeIpaVersions.getVersions().contains(freeIpaVersion);\n     }\n \n     public String determineImageName(String platformString, String region, Image imgFromCatalog) {\n", "next_change": {"commit": "450067bf68066f71fee27a11d231222c6a332d7d", "changed_code": [{"header": "diff --git a/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java b/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\nindex 2e0f2ec04e..7176093c53 100644\n--- a/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\n+++ b/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\n", "chunk": "@@ -79,20 +127,16 @@ public class ImageService {\n         Optional<Map<String, String>> imagesForPlatform = findStringKeyWithEqualsIgnoreCase(platformString, imgFromCatalog.getImageSetsByProvider());\n         if (imagesForPlatform.isPresent()) {\n             Map<String, String> imagesByRegion = imagesForPlatform.get();\n-            Optional<String> imageNameOpt = findStringKeyWithEqualsIgnoreCase(region, imagesByRegion);\n-            if (!imageNameOpt.isPresent()) {\n-                imageNameOpt = findStringKeyWithEqualsIgnoreCase(DEFAULT_REGION, imagesByRegion);\n-            }\n-            if (imageNameOpt.isPresent()) {\n-                return imageNameOpt.get();\n-            }\n-            String msg = String.format(\"Virtual machine image couldn't be found in image: '%s' for the selected platform: '%s' and region: '%s'.\",\n-                    imgFromCatalog, platformString, region);\n+            return findStringKeyWithEqualsIgnoreCase(region, imagesByRegion)\n+                    .or(() -> findStringKeyWithEqualsIgnoreCase(DEFAULT_REGION, imagesByRegion))\n+                    .orElseThrow(() -> new ImageNotFoundException(\n+                            String.format(\"Virtual machine image couldn't be found in image: '%s' for the selected platform: '%s' and region: '%s'.\",\n+                            imgFromCatalog, platformString, region)));\n+        } else {\n+            String msg = String.format(\"The selected image: '%s' doesn't contain virtual machine image for the selected platform: '%s'.\",\n+                    imgFromCatalog, platformString);\n             throw new ImageNotFoundException(msg);\n         }\n-        String msg = String.format(\"The selected image: '%s' doesn't contain virtual machine image for the selected platform: '%s'.\",\n-                imgFromCatalog, platformString);\n-        throw new ImageNotFoundException(msg);\n     }\n \n     private <T> Optional<T> findStringKeyWithEqualsIgnoreCase(String key, Map<String, T> map) {\n", "next_change": {"commit": "e57164c19f0c1c3c12dcde6248252904fedaf42f", "changed_code": [{"header": "diff --git a/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java b/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\nindex 7176093c53..3fbb9f6a8b 100644\n--- a/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\n+++ b/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\n", "chunk": "@@ -139,6 +171,14 @@ public class ImageService {\n         }\n     }\n \n+    private String selectImageByRegion(String platformString, String region, Image imgFromCatalog, Map<String, String> imagesByRegion) {\n+        return findStringKeyWithEqualsIgnoreCase(DEFAULT_REGION, imagesByRegion)\n+                .or(() -> findStringKeyWithEqualsIgnoreCase(region, imagesByRegion))\n+                .orElseThrow(() -> new ImageNotFoundException(\n+                        String.format(\"Virtual machine image couldn't be found in image: '%s' for the selected platform: '%s' and region: '%s'.\",\n+                                imgFromCatalog, platformString, region)));\n+    }\n+\n     private <T> Optional<T> findStringKeyWithEqualsIgnoreCase(String key, Map<String, T> map) {\n         return map.entrySet().stream()\n                 .filter(entry -> entry.getKey().equalsIgnoreCase(key))\n", "next_change": {"commit": "22552e93deed6e8a8583f371d911a15b5a19928d", "changed_code": [{"header": "diff --git a/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java b/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\nindex 3fbb9f6a8b..f1ecef558d 100644\n--- a/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\n+++ b/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\n", "chunk": "@@ -179,6 +197,13 @@ public class ImageService {\n                                 imgFromCatalog, platformString, region)));\n     }\n \n+    private String selectImageByRegion(String platformString, String region, Image imgFromCatalog, Map<String, String> imagesByRegion) {\n+        return findStringKeyWithEqualsIgnoreCase(region, imagesByRegion)\n+                .orElseThrow(() -> new ImageNotFoundException(\n+                        String.format(\"Virtual machine image couldn't be found in image: '%s' for the selected platform: '%s' and region: '%s'.\",\n+                                imgFromCatalog, platformString, region)));\n+    }\n+\n     private <T> Optional<T> findStringKeyWithEqualsIgnoreCase(String key, Map<String, T> map) {\n         return map.entrySet().stream()\n                 .filter(entry -> entry.getKey().equalsIgnoreCase(key))\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "45f035557f4a1f127b6023b7420f0a0a9aef6b21", "message": "Merge commit", "committedDate": null}, {"oid": "d38fbaae70d678dbdbff37f3c96bb05415194a93", "committedDate": "2021-04-16 09:58:33 +0200", "message": "CB-12140 Extend image filtering logic to match by the image uuid as well."}, {"oid": "9b05311dae1d17203186a6289eae5a70e6f96275", "committedDate": "2021-04-19 15:08:56 +0200", "message": "CB-11904: Extension of the CB API to support custom image catalogs"}, {"oid": "b7a1800ecb0bc7dc40d1d3c5f3deaab72cbdb9c1", "committedDate": "2021-05-10 15:23:02 +0200", "message": "CB-11904: Custom image catalog CRUD operations"}, {"oid": "450067bf68066f71fee27a11d231222c6a332d7d", "committedDate": "2021-06-10 10:44:55 +0200", "message": "CB-12457 Image change flow for FreeIPA"}, {"oid": "28c71fb81880c0a3b19f833ac2791c0cc56d9692", "committedDate": "2021-09-13 16:00:18 +0200", "message": "CB-13685 Implement getFreeIpaUpgradeOptions in FreeIpaUpgradeV1Controller"}, {"oid": "f86e0832269aa151ded81f3125bbc910718572f8", "committedDate": "2021-10-05 14:48:43 +0200", "message": "CB-13339 E2E test for FreeIPA upgrade"}, {"oid": "e2d415768ab56aff49e2750fd1fdde76e64874fc", "committedDate": "2021-10-19 16:47:05 +0200", "message": "CB-14458 Generate Freeipa image catalog with the currently used image"}, {"oid": "3749bd40d0a563b5b1dc500fba95eaaed17f22ae", "committedDate": "2021-11-23 10:42:03 +0100", "message": "CB-14514 In case of missing FreeIPA versions in the image catalog json, generate a default one based on the advertised images flag and the current FreeIPA svc version. Generate image catalog command should set the advertised flag and skip versions."}, {"oid": "a691a9621273daef355ecd77c1c7ebcc74442694", "committedDate": "2022-03-17 10:11:23 +0100", "message": "CB-15873 CB-15874 CB-15875 CB-15879 Support Gov and Public AWS in the same time for local dev. Modify mock idbroker mapping roles for gov cloud. Modify region mapping to include gov cloud regions. Add new crn segment to gov cloud deployment."}, {"oid": "9a8ba2a3e2bcd7fc2b4d943c880c5b02f602cd12", "committedDate": "2022-03-30 17:47:59 +0200", "message": "CB-15872 using the right provider name for selecting gov cloud. added unit tests as well."}, {"oid": "2bc448cc3ae110755860e627945adb6203a47e28", "committedDate": "2022-06-13 16:37:17 +0200", "message": "CB-17177 Rotate salt password endpoints in environment/freeipa"}, {"oid": "01075db65d060e21989025fc99bf65cb8c98f45f", "committedDate": "2022-08-30 09:54:46 +0200", "message": "CB-18004 Implement FreeIPA flow skeleton for vertical scale"}, {"oid": "aa727ab4f0f5c1b49d061d5bb9319bf6ed6531c6", "committedDate": "2022-10-13 13:21:24 +0200", "message": "CB-18682 Freeipa upgrade consistently fails with could not prepare statement - connection is closed"}, {"oid": "19318e8ac6ff4b4117aa7ba8cafdf44edb70ea4a", "committedDate": "2022-11-21 17:00:26 +0100", "message": "CB-18840 Expose LDAP agent version on FMS API"}, {"oid": "e57164c19f0c1c3c12dcde6248252904fedaf42f", "committedDate": "2022-12-02 10:20:36 +0100", "message": "CB-19561 - Marketplace image should be chosen if CDP_AZURE_IMAGE_MARKETPLACE_ONLY is granted"}, {"oid": "6bc943225ff523b9248c9d5ce7bd72b3a3ef4e83", "committedDate": "2022-12-07 10:21:03 +0100", "message": "CB-15822 Refactor used image collection"}, {"oid": "22552e93deed6e8a8583f371d911a15b5a19928d", "committedDate": "2023-01-25 11:07:09 +0100", "message": "CB-19105 Fallback to VHD image in case of marketplace image deployment error"}, {"oid": "6953836422238552534c0e41f7bfc1fa6c4f3158", "committedDate": "2023-03-01 10:28:04 +0100", "message": "CRB-2448 [FedRAMP] Hide all non core CDP cluster template on FedRAMP control planes. This also involves dps-k8s and csi changes. We can now exclude blueprint by name and also hide templates based on the supported runtimes."}, {"oid": "c8e350ec7f03ef5b2fd2f0916dc8b9fb40782c6f", "committedDate": "2023-03-13 15:30:22 +0100", "message": "CB-20943 remove the plain text userdata from the database and move it to vault."}, {"oid": "e98145cc2c2dd5eaeca4fc56eba1764c48c6877d", "committedDate": "2023-03-20 20:18:46 +0100", "message": "Revert \"CB-20943 remove the plain text userdata from the database and move it to vault.\""}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc0OTU5Nw==", "url": "https://github.com/hortonworks/cloudbreak/pull/7966#discussion_r420749597", "body": "extract this also, maybe we should log something here", "bodyText": "extract this also, maybe we should log something here", "bodyHTML": "<p dir=\"auto\">extract this also, maybe we should log something here</p>", "author": "lacikaaa", "createdAt": "2020-05-06T12:26:27Z", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java", "diffHunk": "@@ -53,46 +65,111 @@ public Image create(Stack stack, ImageSettingsRequest imageRequest) {\n         LOGGER.info(\"Selected VM image for CloudPlatform '{}' and region '{}' is: {} from: {} image catalog\",\n                 platformString, region, imageName, catalogUrl);\n \n-        Image image = imageConverter.convert(imageCatalogImage);\n-        image.setStack(stack);\n-        image.setImageName(imageName);\n-        image.setImageCatalogUrl(catalogUrl);\n-        return imageRepository.save(image);\n+        ImageEntity imageEntity = imageConverter.convert(imageCatalogImage);\n+        imageEntity.setStack(stack);\n+        imageEntity.setImageName(imageName);\n+        imageEntity.setImageCatalogUrl(catalogUrl);\n+        return imageRepository.save(imageEntity);\n     }\n \n-    public Image getByStack(Stack stack) {\n+    public ImageEntity getByStack(Stack stack) {\n         return imageRepository.getByStack(stack);\n     }\n \n-    public Image getByStackId(Long stackId) {\n+    public ImageEntity getByStackId(Long stackId) {\n         return imageRepository.getByStackId(stackId);\n     }\n \n-    public Image decorateImageWithUserDataForStack(Stack stack, String userdata) {\n-        Image image = getByStack(stack);\n-        image.setUserdata(userdata);\n-        return imageRepository.save(image);\n+    public ImageEntity decorateImageWithUserDataForStack(Stack stack, String userdata) {\n+        ImageEntity imageEntity = getByStack(stack);\n+        imageEntity.setUserdata(userdata);\n+        return imageRepository.save(imageEntity);\n     }\n \n-    public com.sequenceiq.freeipa.api.model.image.Image getImage(ImageSettingsRequest imageSettings, String region, String platform) {\n+    public Image getImage(ImageSettingsRequest imageSettings, String region, String platform) {\n         String imageId = imageSettings.getId();\n         String catalogUrl = Objects.nonNull(imageSettings.getCatalog()) ? imageSettings.getCatalog() : defaultCatalogUrl;\n         String imageOs = Objects.nonNull(imageSettings.getOs()) ? imageSettings.getOs() : defaultOs;\n \n-        List<com.sequenceiq.freeipa.api.model.image.Image> images = imageCatalogProvider.getImageCatalog(catalogUrl).getImages().getFreeipaImages();\n-        Optional<? extends com.sequenceiq.freeipa.api.model.image.Image> image = findImage(imageId, imageOs, images, region, platform);\n-        if (image.isEmpty()) {\n-            imageCatalogProvider.evictImageCatalogCache(catalogUrl);\n-            images = imageCatalogProvider.getImageCatalog(catalogUrl).getImages().getFreeipaImages();\n-            image = findImage(imageId, imageOs, images, region, platform);\n-            if (image.isEmpty()) {\n-                throw new ImageNotFoundException(String.format(\"Could not find any image with id: '%s' in region '%s' with OS '%s'.\", imageId, region, imageOs));\n-            }\n+        ImageCatalog cachedImageCatalog = imageCatalogProvider.getImageCatalog(catalogUrl);\n+        return findImageForAppVersion(region, platform, imageId, imageOs, cachedImageCatalog)\n+                .or(() -> {\n+                    LOGGER.debug(\"Image not found with the parameters: imageId: {}, imageOs: {}, region: {}, platform: {}\", imageId, imageOs, region, platform);\n+                    LOGGER.debug(\"Evicting image catalog cache to retry.\");\n+                    imageCatalogProvider.evictImageCatalogCache(catalogUrl);\n+                    ImageCatalog renewedImageCatalog = imageCatalogProvider.getImageCatalog(catalogUrl);\n+                    return findImageForAppVersion(region, platform, imageId, imageOs, renewedImageCatalog);\n+                })\n+                .orElseThrow(() -> {\n+                    String message = String.format(\"Could not find any image with id: '%s' in region '%s' with OS '%s'.\", imageId, region, imageOs);\n+                    return new ImageNotFoundException(message);", "originalCommit": "9f7d3cea324877837931763f2282a3e6850ed3e0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "46ccb46063a3136d41aa10741a46f8fd8a01a366", "changed_code": [{"header": "diff --git a/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java b/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\nindex 03b6639445..6984c6b2bb 100644\n--- a/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\n+++ b/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\n", "chunk": "@@ -93,17 +94,26 @@ public class ImageService {\n \n         ImageCatalog cachedImageCatalog = imageCatalogProvider.getImageCatalog(catalogUrl);\n         return findImageForAppVersion(region, platform, imageId, imageOs, cachedImageCatalog)\n-                .or(() -> {\n-                    LOGGER.debug(\"Image not found with the parameters: imageId: {}, imageOs: {}, region: {}, platform: {}\", imageId, imageOs, region, platform);\n-                    LOGGER.debug(\"Evicting image catalog cache to retry.\");\n-                    imageCatalogProvider.evictImageCatalogCache(catalogUrl);\n-                    ImageCatalog renewedImageCatalog = imageCatalogProvider.getImageCatalog(catalogUrl);\n-                    return findImageForAppVersion(region, platform, imageId, imageOs, renewedImageCatalog);\n-                })\n-                .orElseThrow(() -> {\n-                    String message = String.format(\"Could not find any image with id: '%s' in region '%s' with OS '%s'.\", imageId, region, imageOs);\n-                    return new ImageNotFoundException(message);\n-                });\n+                .or(retryAfterEvictingCache(region, platform, imageId, catalogUrl, imageOs))\n+                .orElseThrow(throwImageNotFoundException(region, imageId, imageOs));\n+    }\n+\n+    private Supplier<ImageNotFoundException> throwImageNotFoundException(String region, String imageId, String imageOs) {\n+        return () -> {\n+            LOGGER.warn(\"Image not found in refreshed image catalog, by parameters: imageid: {}, region: {}, imageOs: {}\", imageId, region, imageOs);\n+            String message = String.format(\"Could not find any image with id: '%s' in region '%s' with OS '%s'.\", imageId, region, imageOs);\n+            return new ImageNotFoundException(message);\n+        };\n+    }\n+\n+    private Supplier<Optional<? extends Image>> retryAfterEvictingCache(String region, String platform, String imageId, String catalogUrl, String imageOs) {\n+        return () -> {\n+            LOGGER.debug(\"Image not found with the parameters: imageId: {}, imageOs: {}, region: {}, platform: {}\", imageId, imageOs, region, platform);\n+            LOGGER.debug(\"Evicting image catalog cache to retry.\");\n+            imageCatalogProvider.evictImageCatalogCache(catalogUrl);\n+            ImageCatalog renewedImageCatalog = imageCatalogProvider.getImageCatalog(catalogUrl);\n+            return findImageForAppVersion(region, platform, imageId, imageOs, renewedImageCatalog);\n+        };\n     }\n \n     private Optional<Image> findImageForAppVersion(String region, String platform, String imageId, String imageOs, ImageCatalog catalog) {\n", "next_change": {"commit": "eefc90318efb4c428601267f57741080bcfef0d8", "changed_code": [{"header": "diff --git a/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java b/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\nindex 6984c6b2bb..f4ad42c7d7 100644\n--- a/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\n+++ b/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\n", "chunk": "@@ -94,26 +93,22 @@ public class ImageService {\n \n         ImageCatalog cachedImageCatalog = imageCatalogProvider.getImageCatalog(catalogUrl);\n         return findImageForAppVersion(region, platform, imageId, imageOs, cachedImageCatalog)\n-                .or(retryAfterEvictingCache(region, platform, imageId, catalogUrl, imageOs))\n-                .orElseThrow(throwImageNotFoundException(region, imageId, imageOs));\n+                .or(() -> retryAfterEvictingCache(region, platform, imageId, catalogUrl, imageOs))\n+                .orElseThrow(() -> throwImageNotFoundException(region, imageId, imageOs));\n     }\n \n-    private Supplier<ImageNotFoundException> throwImageNotFoundException(String region, String imageId, String imageOs) {\n-        return () -> {\n+    private ImageNotFoundException throwImageNotFoundException(String region, String imageId, String imageOs) {\n             LOGGER.warn(\"Image not found in refreshed image catalog, by parameters: imageid: {}, region: {}, imageOs: {}\", imageId, region, imageOs);\n             String message = String.format(\"Could not find any image with id: '%s' in region '%s' with OS '%s'.\", imageId, region, imageOs);\n             return new ImageNotFoundException(message);\n-        };\n     }\n \n-    private Supplier<Optional<? extends Image>> retryAfterEvictingCache(String region, String platform, String imageId, String catalogUrl, String imageOs) {\n-        return () -> {\n+    private Optional<Image> retryAfterEvictingCache(String region, String platform, String imageId, String catalogUrl, String imageOs) {\n             LOGGER.debug(\"Image not found with the parameters: imageId: {}, imageOs: {}, region: {}, platform: {}\", imageId, imageOs, region, platform);\n             LOGGER.debug(\"Evicting image catalog cache to retry.\");\n             imageCatalogProvider.evictImageCatalogCache(catalogUrl);\n             ImageCatalog renewedImageCatalog = imageCatalogProvider.getImageCatalog(catalogUrl);\n             return findImageForAppVersion(region, platform, imageId, imageOs, renewedImageCatalog);\n-        };\n     }\n \n     private Optional<Image> findImageForAppVersion(String region, String platform, String imageId, String imageOs, ImageCatalog catalog) {\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "45f035557f4a1f127b6023b7420f0a0a9aef6b21", "changed_code": [{"header": "diff --git a/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java b/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\nindex 03b6639445..f4ad42c7d7 100644\n--- a/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\n+++ b/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\n", "chunk": "@@ -93,17 +93,22 @@ public class ImageService {\n \n         ImageCatalog cachedImageCatalog = imageCatalogProvider.getImageCatalog(catalogUrl);\n         return findImageForAppVersion(region, platform, imageId, imageOs, cachedImageCatalog)\n-                .or(() -> {\n-                    LOGGER.debug(\"Image not found with the parameters: imageId: {}, imageOs: {}, region: {}, platform: {}\", imageId, imageOs, region, platform);\n-                    LOGGER.debug(\"Evicting image catalog cache to retry.\");\n-                    imageCatalogProvider.evictImageCatalogCache(catalogUrl);\n-                    ImageCatalog renewedImageCatalog = imageCatalogProvider.getImageCatalog(catalogUrl);\n-                    return findImageForAppVersion(region, platform, imageId, imageOs, renewedImageCatalog);\n-                })\n-                .orElseThrow(() -> {\n-                    String message = String.format(\"Could not find any image with id: '%s' in region '%s' with OS '%s'.\", imageId, region, imageOs);\n-                    return new ImageNotFoundException(message);\n-                });\n+                .or(() -> retryAfterEvictingCache(region, platform, imageId, catalogUrl, imageOs))\n+                .orElseThrow(() -> throwImageNotFoundException(region, imageId, imageOs));\n+    }\n+\n+    private ImageNotFoundException throwImageNotFoundException(String region, String imageId, String imageOs) {\n+            LOGGER.warn(\"Image not found in refreshed image catalog, by parameters: imageid: {}, region: {}, imageOs: {}\", imageId, region, imageOs);\n+            String message = String.format(\"Could not find any image with id: '%s' in region '%s' with OS '%s'.\", imageId, region, imageOs);\n+            return new ImageNotFoundException(message);\n+    }\n+\n+    private Optional<Image> retryAfterEvictingCache(String region, String platform, String imageId, String catalogUrl, String imageOs) {\n+            LOGGER.debug(\"Image not found with the parameters: imageId: {}, imageOs: {}, region: {}, platform: {}\", imageId, imageOs, region, platform);\n+            LOGGER.debug(\"Evicting image catalog cache to retry.\");\n+            imageCatalogProvider.evictImageCatalogCache(catalogUrl);\n+            ImageCatalog renewedImageCatalog = imageCatalogProvider.getImageCatalog(catalogUrl);\n+            return findImageForAppVersion(region, platform, imageId, imageOs, renewedImageCatalog);\n     }\n \n     private Optional<Image> findImageForAppVersion(String region, String platform, String imageId, String imageOs, ImageCatalog catalog) {\n", "next_change": {"commit": "9b05311dae1d17203186a6289eae5a70e6f96275", "changed_code": [{"header": "diff --git a/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java b/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\nindex f4ad42c7d7..2e0f2ec04e 100644\n--- a/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\n+++ b/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\n", "chunk": "@@ -86,98 +68,11 @@ public class ImageService {\n         return imageRepository.save(imageEntity);\n     }\n \n-    public Image getImage(ImageSettingsRequest imageSettings, String region, String platform) {\n-        String imageId = imageSettings.getId();\n-        String catalogUrl = Objects.nonNull(imageSettings.getCatalog()) ? imageSettings.getCatalog() : defaultCatalogUrl;\n-        String imageOs = Objects.nonNull(imageSettings.getOs()) ? imageSettings.getOs() : defaultOs;\n-\n-        ImageCatalog cachedImageCatalog = imageCatalogProvider.getImageCatalog(catalogUrl);\n-        return findImageForAppVersion(region, platform, imageId, imageOs, cachedImageCatalog)\n-                .or(() -> retryAfterEvictingCache(region, platform, imageId, catalogUrl, imageOs))\n-                .orElseThrow(() -> throwImageNotFoundException(region, imageId, imageOs));\n-    }\n-\n-    private ImageNotFoundException throwImageNotFoundException(String region, String imageId, String imageOs) {\n-            LOGGER.warn(\"Image not found in refreshed image catalog, by parameters: imageid: {}, region: {}, imageOs: {}\", imageId, region, imageOs);\n-            String message = String.format(\"Could not find any image with id: '%s' in region '%s' with OS '%s'.\", imageId, region, imageOs);\n-            return new ImageNotFoundException(message);\n-    }\n-\n-    private Optional<Image> retryAfterEvictingCache(String region, String platform, String imageId, String catalogUrl, String imageOs) {\n-            LOGGER.debug(\"Image not found with the parameters: imageId: {}, imageOs: {}, region: {}, platform: {}\", imageId, imageOs, region, platform);\n-            LOGGER.debug(\"Evicting image catalog cache to retry.\");\n-            imageCatalogProvider.evictImageCatalogCache(catalogUrl);\n-            ImageCatalog renewedImageCatalog = imageCatalogProvider.getImageCatalog(catalogUrl);\n-            return findImageForAppVersion(region, platform, imageId, imageOs, renewedImageCatalog);\n-    }\n-\n-    private Optional<Image> findImageForAppVersion(String region, String platform, String imageId, String imageOs, ImageCatalog catalog) {\n-        List<FreeIpaVersions> versions = filterFreeIpaVersionsByAppVersion(catalog.getVersions().getFreeIpaVersions());\n-        List<Image> compatibleImages = findImage(imageId, imageOs, catalog.getImages().getFreeipaImages(), region, platform);\n-        LOGGER.debug(\"[{}] compatible images found, by the following parameters: imageId: {}, imageOs: {}, region: {}, platform: {}\",\n-                compatibleImages.size(), imageId, imageOs, region, platform);\n-\n-        return findImageInDefaults(versions, compatibleImages)\n-                .or(() -> findImageByApplicationVersion(versions, compatibleImages))\n-                .or(() -> findMostRecentImage(compatibleImages));\n-    }\n-\n-    private Optional<Image> findMostRecentImage(List<Image> compatibleImages) {\n-            LOGGER.debug(\"Not found any image compatible with the application version. Falling back to the most recent image.\");\n-            return compatibleImages.stream().max(Comparator.comparing(Image::getDate));\n-    }\n-\n-    private Optional<Image> findImageByApplicationVersion(List<FreeIpaVersions> versions, List<Image> compatibleImages) {\n-            LOGGER.debug(\"Default image not found. Attempt to find an image, compatible with the application version.\");\n-            return filterImages(versions, compatibleImages, FreeIpaVersions::getImageIds);\n-    }\n-\n-    private Optional<Image> findImageInDefaults(List<FreeIpaVersions> versions, List<Image> compatibleImages) {\n-        LOGGER.debug(\"Attempt to find a default image to use.\");\n-        return filterImages(versions, compatibleImages, FreeIpaVersions::getDefaults);\n-    }\n-\n-    private Optional<Image> filterImages(List<FreeIpaVersions> freeIpaVersions, List<Image> images,\n-            Function<FreeIpaVersions, List<String>> memberFunction) {\n-        List<String> imageIds = freeIpaVersions.stream().map(memberFunction).flatMap(Collection::stream).collect(Collectors.toList());\n-        return images.stream().filter(image -> imageIds.contains(image.getUuid())).max(Comparator.comparing(Image::getDate));\n-    }\n-\n-    private List<FreeIpaVersions> filterFreeIpaVersionsByAppVersion(List<FreeIpaVersions> freeIpaVersions) {\n-        List<FreeIpaVersions> exactFreeIpaVersionsMatches = freeIpaVersions.stream().filter(toExactVersionMatch()).collect(Collectors.toList());\n-        if (!exactFreeIpaVersionsMatches.isEmpty()) {\n-            LOGGER.debug(\"Exact version match found in image catalog for app version: {}\", freeIpaVersion);\n-            return exactFreeIpaVersionsMatches;\n-        }\n-        List<FreeIpaVersions> prefixFreeIpaVersions = freeIpaVersions.stream().filter(toPrefixVersionMatch()).collect(Collectors.toList());\n-        if (!prefixFreeIpaVersions.isEmpty()) {\n-            LOGGER.debug(\"Prefix version match found in image catalog for app version: {}\", freeIpaVersion);\n-            return prefixFreeIpaVersions;\n-        }\n-\n-        LOGGER.warn(\"Not found matching version in image catalog. Falling back to most recent image.\");\n-        return freeIpaVersions;\n-    }\n+    public ImageWrapper getImage(ImageSettingsRequest imageSettings, String region, String platform) {\n+        return imageProviderFactory.getImageProvider(imageSettings.getCatalog())\n+                .getImage(imageSettings, region, platform)\n+                .orElseThrow(() -> throwImageNotFoundException(region, imageSettings.getId(), Optional.ofNullable(imageSettings.getOs()).orElse(defaultOs)));\n \n-    private Predicate<? super FreeIpaVersions> toPrefixVersionMatch() {\n-        return freeIpaVersions -> freeIpaVersions.getVersions().stream().anyMatch(\n-                version -> {\n-                    Optional<String> appVersionPrefix = extractVersionWithoutBuildTypeAndNumber(freeIpaVersion);\n-                    Optional<String> versionPrefix = extractVersionWithoutBuildTypeAndNumber(version);\n-                    return appVersionPrefix.isPresent() && appVersionPrefix.equals(versionPrefix);\n-                });\n-    }\n-\n-    private Optional<String> extractVersionWithoutBuildTypeAndNumber(String version) {\n-        Matcher appVersionMatcher = VERSION_PATTERN.matcher(version);\n-        if (!appVersionMatcher.matches() || appVersionMatcher.groupCount() != 2) {\n-            return Optional.empty();\n-        }\n-        return Optional.of(appVersionMatcher.group(1));\n-    }\n-\n-    private Predicate<? super FreeIpaVersions> toExactVersionMatch() {\n-        return freeIpaVersions -> freeIpaVersions.getVersions().contains(freeIpaVersion);\n     }\n \n     public String determineImageName(String platformString, String region, Image imgFromCatalog) {\n", "next_change": {"commit": "450067bf68066f71fee27a11d231222c6a332d7d", "changed_code": [{"header": "diff --git a/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java b/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\nindex 2e0f2ec04e..7176093c53 100644\n--- a/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\n+++ b/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\n", "chunk": "@@ -79,20 +127,16 @@ public class ImageService {\n         Optional<Map<String, String>> imagesForPlatform = findStringKeyWithEqualsIgnoreCase(platformString, imgFromCatalog.getImageSetsByProvider());\n         if (imagesForPlatform.isPresent()) {\n             Map<String, String> imagesByRegion = imagesForPlatform.get();\n-            Optional<String> imageNameOpt = findStringKeyWithEqualsIgnoreCase(region, imagesByRegion);\n-            if (!imageNameOpt.isPresent()) {\n-                imageNameOpt = findStringKeyWithEqualsIgnoreCase(DEFAULT_REGION, imagesByRegion);\n-            }\n-            if (imageNameOpt.isPresent()) {\n-                return imageNameOpt.get();\n-            }\n-            String msg = String.format(\"Virtual machine image couldn't be found in image: '%s' for the selected platform: '%s' and region: '%s'.\",\n-                    imgFromCatalog, platformString, region);\n+            return findStringKeyWithEqualsIgnoreCase(region, imagesByRegion)\n+                    .or(() -> findStringKeyWithEqualsIgnoreCase(DEFAULT_REGION, imagesByRegion))\n+                    .orElseThrow(() -> new ImageNotFoundException(\n+                            String.format(\"Virtual machine image couldn't be found in image: '%s' for the selected platform: '%s' and region: '%s'.\",\n+                            imgFromCatalog, platformString, region)));\n+        } else {\n+            String msg = String.format(\"The selected image: '%s' doesn't contain virtual machine image for the selected platform: '%s'.\",\n+                    imgFromCatalog, platformString);\n             throw new ImageNotFoundException(msg);\n         }\n-        String msg = String.format(\"The selected image: '%s' doesn't contain virtual machine image for the selected platform: '%s'.\",\n-                imgFromCatalog, platformString);\n-        throw new ImageNotFoundException(msg);\n     }\n \n     private <T> Optional<T> findStringKeyWithEqualsIgnoreCase(String key, Map<String, T> map) {\n", "next_change": {"commit": "e57164c19f0c1c3c12dcde6248252904fedaf42f", "changed_code": [{"header": "diff --git a/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java b/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\nindex 7176093c53..3fbb9f6a8b 100644\n--- a/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\n+++ b/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\n", "chunk": "@@ -139,6 +171,14 @@ public class ImageService {\n         }\n     }\n \n+    private String selectImageByRegion(String platformString, String region, Image imgFromCatalog, Map<String, String> imagesByRegion) {\n+        return findStringKeyWithEqualsIgnoreCase(DEFAULT_REGION, imagesByRegion)\n+                .or(() -> findStringKeyWithEqualsIgnoreCase(region, imagesByRegion))\n+                .orElseThrow(() -> new ImageNotFoundException(\n+                        String.format(\"Virtual machine image couldn't be found in image: '%s' for the selected platform: '%s' and region: '%s'.\",\n+                                imgFromCatalog, platformString, region)));\n+    }\n+\n     private <T> Optional<T> findStringKeyWithEqualsIgnoreCase(String key, Map<String, T> map) {\n         return map.entrySet().stream()\n                 .filter(entry -> entry.getKey().equalsIgnoreCase(key))\n", "next_change": {"commit": "22552e93deed6e8a8583f371d911a15b5a19928d", "changed_code": [{"header": "diff --git a/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java b/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\nindex 3fbb9f6a8b..f1ecef558d 100644\n--- a/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\n+++ b/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\n", "chunk": "@@ -179,6 +197,13 @@ public class ImageService {\n                                 imgFromCatalog, platformString, region)));\n     }\n \n+    private String selectImageByRegion(String platformString, String region, Image imgFromCatalog, Map<String, String> imagesByRegion) {\n+        return findStringKeyWithEqualsIgnoreCase(region, imagesByRegion)\n+                .orElseThrow(() -> new ImageNotFoundException(\n+                        String.format(\"Virtual machine image couldn't be found in image: '%s' for the selected platform: '%s' and region: '%s'.\",\n+                                imgFromCatalog, platformString, region)));\n+    }\n+\n     private <T> Optional<T> findStringKeyWithEqualsIgnoreCase(String key, Map<String, T> map) {\n         return map.entrySet().stream()\n                 .filter(entry -> entry.getKey().equalsIgnoreCase(key))\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "45f035557f4a1f127b6023b7420f0a0a9aef6b21", "message": "Merge commit", "committedDate": null}, {"oid": "d38fbaae70d678dbdbff37f3c96bb05415194a93", "committedDate": "2021-04-16 09:58:33 +0200", "message": "CB-12140 Extend image filtering logic to match by the image uuid as well."}, {"oid": "9b05311dae1d17203186a6289eae5a70e6f96275", "committedDate": "2021-04-19 15:08:56 +0200", "message": "CB-11904: Extension of the CB API to support custom image catalogs"}, {"oid": "b7a1800ecb0bc7dc40d1d3c5f3deaab72cbdb9c1", "committedDate": "2021-05-10 15:23:02 +0200", "message": "CB-11904: Custom image catalog CRUD operations"}, {"oid": "450067bf68066f71fee27a11d231222c6a332d7d", "committedDate": "2021-06-10 10:44:55 +0200", "message": "CB-12457 Image change flow for FreeIPA"}, {"oid": "28c71fb81880c0a3b19f833ac2791c0cc56d9692", "committedDate": "2021-09-13 16:00:18 +0200", "message": "CB-13685 Implement getFreeIpaUpgradeOptions in FreeIpaUpgradeV1Controller"}, {"oid": "f86e0832269aa151ded81f3125bbc910718572f8", "committedDate": "2021-10-05 14:48:43 +0200", "message": "CB-13339 E2E test for FreeIPA upgrade"}, {"oid": "e2d415768ab56aff49e2750fd1fdde76e64874fc", "committedDate": "2021-10-19 16:47:05 +0200", "message": "CB-14458 Generate Freeipa image catalog with the currently used image"}, {"oid": "3749bd40d0a563b5b1dc500fba95eaaed17f22ae", "committedDate": "2021-11-23 10:42:03 +0100", "message": "CB-14514 In case of missing FreeIPA versions in the image catalog json, generate a default one based on the advertised images flag and the current FreeIPA svc version. Generate image catalog command should set the advertised flag and skip versions."}, {"oid": "a691a9621273daef355ecd77c1c7ebcc74442694", "committedDate": "2022-03-17 10:11:23 +0100", "message": "CB-15873 CB-15874 CB-15875 CB-15879 Support Gov and Public AWS in the same time for local dev. Modify mock idbroker mapping roles for gov cloud. Modify region mapping to include gov cloud regions. Add new crn segment to gov cloud deployment."}, {"oid": "9a8ba2a3e2bcd7fc2b4d943c880c5b02f602cd12", "committedDate": "2022-03-30 17:47:59 +0200", "message": "CB-15872 using the right provider name for selecting gov cloud. added unit tests as well."}, {"oid": "2bc448cc3ae110755860e627945adb6203a47e28", "committedDate": "2022-06-13 16:37:17 +0200", "message": "CB-17177 Rotate salt password endpoints in environment/freeipa"}, {"oid": "01075db65d060e21989025fc99bf65cb8c98f45f", "committedDate": "2022-08-30 09:54:46 +0200", "message": "CB-18004 Implement FreeIPA flow skeleton for vertical scale"}, {"oid": "aa727ab4f0f5c1b49d061d5bb9319bf6ed6531c6", "committedDate": "2022-10-13 13:21:24 +0200", "message": "CB-18682 Freeipa upgrade consistently fails with could not prepare statement - connection is closed"}, {"oid": "19318e8ac6ff4b4117aa7ba8cafdf44edb70ea4a", "committedDate": "2022-11-21 17:00:26 +0100", "message": "CB-18840 Expose LDAP agent version on FMS API"}, {"oid": "e57164c19f0c1c3c12dcde6248252904fedaf42f", "committedDate": "2022-12-02 10:20:36 +0100", "message": "CB-19561 - Marketplace image should be chosen if CDP_AZURE_IMAGE_MARKETPLACE_ONLY is granted"}, {"oid": "6bc943225ff523b9248c9d5ce7bd72b3a3ef4e83", "committedDate": "2022-12-07 10:21:03 +0100", "message": "CB-15822 Refactor used image collection"}, {"oid": "22552e93deed6e8a8583f371d911a15b5a19928d", "committedDate": "2023-01-25 11:07:09 +0100", "message": "CB-19105 Fallback to VHD image in case of marketplace image deployment error"}, {"oid": "6953836422238552534c0e41f7bfc1fa6c4f3158", "committedDate": "2023-03-01 10:28:04 +0100", "message": "CRB-2448 [FedRAMP] Hide all non core CDP cluster template on FedRAMP control planes. This also involves dps-k8s and csi changes. We can now exclude blueprint by name and also hide templates based on the supported runtimes."}, {"oid": "c8e350ec7f03ef5b2fd2f0916dc8b9fb40782c6f", "committedDate": "2023-03-13 15:30:22 +0100", "message": "CB-20943 remove the plain text userdata from the database and move it to vault."}, {"oid": "e98145cc2c2dd5eaeca4fc56eba1764c48c6877d", "committedDate": "2023-03-20 20:18:46 +0100", "message": "Revert \"CB-20943 remove the plain text userdata from the database and move it to vault.\""}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc1MDU0NQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7966#discussion_r420750545", "body": "these should be moved to a well named method so I don't have to check the log lines to see whats happening :)", "bodyText": "these should be moved to a well named method so I don't have to check the log lines to see whats happening :)", "bodyHTML": "<p dir=\"auto\">these should be moved to a well named method so I don't have to check the log lines to see whats happening :)</p>", "author": "lacikaaa", "createdAt": "2020-05-06T12:28:02Z", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java", "diffHunk": "@@ -53,46 +65,111 @@ public Image create(Stack stack, ImageSettingsRequest imageRequest) {\n         LOGGER.info(\"Selected VM image for CloudPlatform '{}' and region '{}' is: {} from: {} image catalog\",\n                 platformString, region, imageName, catalogUrl);\n \n-        Image image = imageConverter.convert(imageCatalogImage);\n-        image.setStack(stack);\n-        image.setImageName(imageName);\n-        image.setImageCatalogUrl(catalogUrl);\n-        return imageRepository.save(image);\n+        ImageEntity imageEntity = imageConverter.convert(imageCatalogImage);\n+        imageEntity.setStack(stack);\n+        imageEntity.setImageName(imageName);\n+        imageEntity.setImageCatalogUrl(catalogUrl);\n+        return imageRepository.save(imageEntity);\n     }\n \n-    public Image getByStack(Stack stack) {\n+    public ImageEntity getByStack(Stack stack) {\n         return imageRepository.getByStack(stack);\n     }\n \n-    public Image getByStackId(Long stackId) {\n+    public ImageEntity getByStackId(Long stackId) {\n         return imageRepository.getByStackId(stackId);\n     }\n \n-    public Image decorateImageWithUserDataForStack(Stack stack, String userdata) {\n-        Image image = getByStack(stack);\n-        image.setUserdata(userdata);\n-        return imageRepository.save(image);\n+    public ImageEntity decorateImageWithUserDataForStack(Stack stack, String userdata) {\n+        ImageEntity imageEntity = getByStack(stack);\n+        imageEntity.setUserdata(userdata);\n+        return imageRepository.save(imageEntity);\n     }\n \n-    public com.sequenceiq.freeipa.api.model.image.Image getImage(ImageSettingsRequest imageSettings, String region, String platform) {\n+    public Image getImage(ImageSettingsRequest imageSettings, String region, String platform) {\n         String imageId = imageSettings.getId();\n         String catalogUrl = Objects.nonNull(imageSettings.getCatalog()) ? imageSettings.getCatalog() : defaultCatalogUrl;\n         String imageOs = Objects.nonNull(imageSettings.getOs()) ? imageSettings.getOs() : defaultOs;\n \n-        List<com.sequenceiq.freeipa.api.model.image.Image> images = imageCatalogProvider.getImageCatalog(catalogUrl).getImages().getFreeipaImages();\n-        Optional<? extends com.sequenceiq.freeipa.api.model.image.Image> image = findImage(imageId, imageOs, images, region, platform);\n-        if (image.isEmpty()) {\n-            imageCatalogProvider.evictImageCatalogCache(catalogUrl);\n-            images = imageCatalogProvider.getImageCatalog(catalogUrl).getImages().getFreeipaImages();\n-            image = findImage(imageId, imageOs, images, region, platform);\n-            if (image.isEmpty()) {\n-                throw new ImageNotFoundException(String.format(\"Could not find any image with id: '%s' in region '%s' with OS '%s'.\", imageId, region, imageOs));\n-            }\n+        ImageCatalog cachedImageCatalog = imageCatalogProvider.getImageCatalog(catalogUrl);\n+        return findImageForAppVersion(region, platform, imageId, imageOs, cachedImageCatalog)\n+                .or(() -> {\n+                    LOGGER.debug(\"Image not found with the parameters: imageId: {}, imageOs: {}, region: {}, platform: {}\", imageId, imageOs, region, platform);\n+                    LOGGER.debug(\"Evicting image catalog cache to retry.\");\n+                    imageCatalogProvider.evictImageCatalogCache(catalogUrl);\n+                    ImageCatalog renewedImageCatalog = imageCatalogProvider.getImageCatalog(catalogUrl);\n+                    return findImageForAppVersion(region, platform, imageId, imageOs, renewedImageCatalog);\n+                })\n+                .orElseThrow(() -> {\n+                    String message = String.format(\"Could not find any image with id: '%s' in region '%s' with OS '%s'.\", imageId, region, imageOs);\n+                    return new ImageNotFoundException(message);\n+                });\n+    }\n+\n+    private Optional<Image> findImageForAppVersion(String region, String platform, String imageId, String imageOs, ImageCatalog catalog) {\n+        List<FreeIpaVersions> versions = filterFreeIpaVersionsByAppVersion(catalog.getVersions().getFreeIpaVersions());\n+        List<Image> compatibleImages = findImage(imageId, imageOs, catalog.getImages().getFreeipaImages(), region, platform);\n+        LOGGER.debug(\"[{}] compatible images found, by the following parameters: imageId: {}, imageOs: {}, region: {}, platform: {}\",\n+                compatibleImages.size(), imageId, imageOs, region, platform);\n+\n+        LOGGER.debug(\"Attempt to find a default image to use.\");\n+        return filterImages(versions, compatibleImages, FreeIpaVersions::getDefaults).or(\n+                () -> {\n+                    LOGGER.debug(\"Default image not found. Attempt to find an image, compatible with the application version.\");\n+                    return filterImages(versions, compatibleImages, FreeIpaVersions::getImageIds);\n+                }\n+        ).or(\n+                () -> {\n+                    LOGGER.debug(\"Not found any image compatible with the application version. Falling back to the most recent image.\");\n+                    return compatibleImages.stream().max(Comparator.comparing(Image::getDate));\n+                }", "originalCommit": "9f7d3cea324877837931763f2282a3e6850ed3e0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "46ccb46063a3136d41aa10741a46f8fd8a01a366", "changed_code": [{"header": "diff --git a/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java b/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\nindex 03b6639445..6984c6b2bb 100644\n--- a/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\n+++ b/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\n", "chunk": "@@ -112,18 +122,28 @@ public class ImageService {\n         LOGGER.debug(\"[{}] compatible images found, by the following parameters: imageId: {}, imageOs: {}, region: {}, platform: {}\",\n                 compatibleImages.size(), imageId, imageOs, region, platform);\n \n+        return findImageInDefaults(versions, compatibleImages)\n+                .or(findImageByApplicationVersion(versions, compatibleImages))\n+                .or(findMostRecentImage(compatibleImages));\n+    }\n+\n+    private Supplier<Optional<? extends Image>> findMostRecentImage(List<Image> compatibleImages) {\n+        return () -> {\n+            LOGGER.debug(\"Not found any image compatible with the application version. Falling back to the most recent image.\");\n+            return compatibleImages.stream().max(Comparator.comparing(Image::getDate));\n+        };\n+    }\n+\n+    private Supplier<Optional<? extends Image>> findImageByApplicationVersion(List<FreeIpaVersions> versions, List<Image> compatibleImages) {\n+        return () -> {\n+            LOGGER.debug(\"Default image not found. Attempt to find an image, compatible with the application version.\");\n+            return filterImages(versions, compatibleImages, FreeIpaVersions::getImageIds);\n+        };\n+    }\n+\n+    private Optional<Image> findImageInDefaults(List<FreeIpaVersions> versions, List<Image> compatibleImages) {\n         LOGGER.debug(\"Attempt to find a default image to use.\");\n-        return filterImages(versions, compatibleImages, FreeIpaVersions::getDefaults).or(\n-                () -> {\n-                    LOGGER.debug(\"Default image not found. Attempt to find an image, compatible with the application version.\");\n-                    return filterImages(versions, compatibleImages, FreeIpaVersions::getImageIds);\n-                }\n-        ).or(\n-                () -> {\n-                    LOGGER.debug(\"Not found any image compatible with the application version. Falling back to the most recent image.\");\n-                    return compatibleImages.stream().max(Comparator.comparing(Image::getDate));\n-                }\n-        );\n+        return filterImages(versions, compatibleImages, FreeIpaVersions::getDefaults);\n     }\n \n     private Optional<Image> filterImages(List<FreeIpaVersions> freeIpaVersions, List<Image> images,\n", "next_change": null}]}, "revised_code_in_main": {"commit": "45f035557f4a1f127b6023b7420f0a0a9aef6b21", "changed_code": [{"header": "diff --git a/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java b/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\nindex 03b6639445..f4ad42c7d7 100644\n--- a/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\n+++ b/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\n", "chunk": "@@ -112,18 +117,24 @@ public class ImageService {\n         LOGGER.debug(\"[{}] compatible images found, by the following parameters: imageId: {}, imageOs: {}, region: {}, platform: {}\",\n                 compatibleImages.size(), imageId, imageOs, region, platform);\n \n+        return findImageInDefaults(versions, compatibleImages)\n+                .or(() -> findImageByApplicationVersion(versions, compatibleImages))\n+                .or(() -> findMostRecentImage(compatibleImages));\n+    }\n+\n+    private Optional<Image> findMostRecentImage(List<Image> compatibleImages) {\n+            LOGGER.debug(\"Not found any image compatible with the application version. Falling back to the most recent image.\");\n+            return compatibleImages.stream().max(Comparator.comparing(Image::getDate));\n+    }\n+\n+    private Optional<Image> findImageByApplicationVersion(List<FreeIpaVersions> versions, List<Image> compatibleImages) {\n+            LOGGER.debug(\"Default image not found. Attempt to find an image, compatible with the application version.\");\n+            return filterImages(versions, compatibleImages, FreeIpaVersions::getImageIds);\n+    }\n+\n+    private Optional<Image> findImageInDefaults(List<FreeIpaVersions> versions, List<Image> compatibleImages) {\n         LOGGER.debug(\"Attempt to find a default image to use.\");\n-        return filterImages(versions, compatibleImages, FreeIpaVersions::getDefaults).or(\n-                () -> {\n-                    LOGGER.debug(\"Default image not found. Attempt to find an image, compatible with the application version.\");\n-                    return filterImages(versions, compatibleImages, FreeIpaVersions::getImageIds);\n-                }\n-        ).or(\n-                () -> {\n-                    LOGGER.debug(\"Not found any image compatible with the application version. Falling back to the most recent image.\");\n-                    return compatibleImages.stream().max(Comparator.comparing(Image::getDate));\n-                }\n-        );\n+        return filterImages(versions, compatibleImages, FreeIpaVersions::getDefaults);\n     }\n \n     private Optional<Image> filterImages(List<FreeIpaVersions> freeIpaVersions, List<Image> images,\n", "next_change": {"commit": "9b05311dae1d17203186a6289eae5a70e6f96275", "changed_code": [{"header": "diff --git a/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java b/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\nindex f4ad42c7d7..2e0f2ec04e 100644\n--- a/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\n+++ b/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\n", "chunk": "@@ -86,98 +68,11 @@ public class ImageService {\n         return imageRepository.save(imageEntity);\n     }\n \n-    public Image getImage(ImageSettingsRequest imageSettings, String region, String platform) {\n-        String imageId = imageSettings.getId();\n-        String catalogUrl = Objects.nonNull(imageSettings.getCatalog()) ? imageSettings.getCatalog() : defaultCatalogUrl;\n-        String imageOs = Objects.nonNull(imageSettings.getOs()) ? imageSettings.getOs() : defaultOs;\n-\n-        ImageCatalog cachedImageCatalog = imageCatalogProvider.getImageCatalog(catalogUrl);\n-        return findImageForAppVersion(region, platform, imageId, imageOs, cachedImageCatalog)\n-                .or(() -> retryAfterEvictingCache(region, platform, imageId, catalogUrl, imageOs))\n-                .orElseThrow(() -> throwImageNotFoundException(region, imageId, imageOs));\n-    }\n-\n-    private ImageNotFoundException throwImageNotFoundException(String region, String imageId, String imageOs) {\n-            LOGGER.warn(\"Image not found in refreshed image catalog, by parameters: imageid: {}, region: {}, imageOs: {}\", imageId, region, imageOs);\n-            String message = String.format(\"Could not find any image with id: '%s' in region '%s' with OS '%s'.\", imageId, region, imageOs);\n-            return new ImageNotFoundException(message);\n-    }\n-\n-    private Optional<Image> retryAfterEvictingCache(String region, String platform, String imageId, String catalogUrl, String imageOs) {\n-            LOGGER.debug(\"Image not found with the parameters: imageId: {}, imageOs: {}, region: {}, platform: {}\", imageId, imageOs, region, platform);\n-            LOGGER.debug(\"Evicting image catalog cache to retry.\");\n-            imageCatalogProvider.evictImageCatalogCache(catalogUrl);\n-            ImageCatalog renewedImageCatalog = imageCatalogProvider.getImageCatalog(catalogUrl);\n-            return findImageForAppVersion(region, platform, imageId, imageOs, renewedImageCatalog);\n-    }\n-\n-    private Optional<Image> findImageForAppVersion(String region, String platform, String imageId, String imageOs, ImageCatalog catalog) {\n-        List<FreeIpaVersions> versions = filterFreeIpaVersionsByAppVersion(catalog.getVersions().getFreeIpaVersions());\n-        List<Image> compatibleImages = findImage(imageId, imageOs, catalog.getImages().getFreeipaImages(), region, platform);\n-        LOGGER.debug(\"[{}] compatible images found, by the following parameters: imageId: {}, imageOs: {}, region: {}, platform: {}\",\n-                compatibleImages.size(), imageId, imageOs, region, platform);\n-\n-        return findImageInDefaults(versions, compatibleImages)\n-                .or(() -> findImageByApplicationVersion(versions, compatibleImages))\n-                .or(() -> findMostRecentImage(compatibleImages));\n-    }\n-\n-    private Optional<Image> findMostRecentImage(List<Image> compatibleImages) {\n-            LOGGER.debug(\"Not found any image compatible with the application version. Falling back to the most recent image.\");\n-            return compatibleImages.stream().max(Comparator.comparing(Image::getDate));\n-    }\n-\n-    private Optional<Image> findImageByApplicationVersion(List<FreeIpaVersions> versions, List<Image> compatibleImages) {\n-            LOGGER.debug(\"Default image not found. Attempt to find an image, compatible with the application version.\");\n-            return filterImages(versions, compatibleImages, FreeIpaVersions::getImageIds);\n-    }\n-\n-    private Optional<Image> findImageInDefaults(List<FreeIpaVersions> versions, List<Image> compatibleImages) {\n-        LOGGER.debug(\"Attempt to find a default image to use.\");\n-        return filterImages(versions, compatibleImages, FreeIpaVersions::getDefaults);\n-    }\n-\n-    private Optional<Image> filterImages(List<FreeIpaVersions> freeIpaVersions, List<Image> images,\n-            Function<FreeIpaVersions, List<String>> memberFunction) {\n-        List<String> imageIds = freeIpaVersions.stream().map(memberFunction).flatMap(Collection::stream).collect(Collectors.toList());\n-        return images.stream().filter(image -> imageIds.contains(image.getUuid())).max(Comparator.comparing(Image::getDate));\n-    }\n-\n-    private List<FreeIpaVersions> filterFreeIpaVersionsByAppVersion(List<FreeIpaVersions> freeIpaVersions) {\n-        List<FreeIpaVersions> exactFreeIpaVersionsMatches = freeIpaVersions.stream().filter(toExactVersionMatch()).collect(Collectors.toList());\n-        if (!exactFreeIpaVersionsMatches.isEmpty()) {\n-            LOGGER.debug(\"Exact version match found in image catalog for app version: {}\", freeIpaVersion);\n-            return exactFreeIpaVersionsMatches;\n-        }\n-        List<FreeIpaVersions> prefixFreeIpaVersions = freeIpaVersions.stream().filter(toPrefixVersionMatch()).collect(Collectors.toList());\n-        if (!prefixFreeIpaVersions.isEmpty()) {\n-            LOGGER.debug(\"Prefix version match found in image catalog for app version: {}\", freeIpaVersion);\n-            return prefixFreeIpaVersions;\n-        }\n-\n-        LOGGER.warn(\"Not found matching version in image catalog. Falling back to most recent image.\");\n-        return freeIpaVersions;\n-    }\n+    public ImageWrapper getImage(ImageSettingsRequest imageSettings, String region, String platform) {\n+        return imageProviderFactory.getImageProvider(imageSettings.getCatalog())\n+                .getImage(imageSettings, region, platform)\n+                .orElseThrow(() -> throwImageNotFoundException(region, imageSettings.getId(), Optional.ofNullable(imageSettings.getOs()).orElse(defaultOs)));\n \n-    private Predicate<? super FreeIpaVersions> toPrefixVersionMatch() {\n-        return freeIpaVersions -> freeIpaVersions.getVersions().stream().anyMatch(\n-                version -> {\n-                    Optional<String> appVersionPrefix = extractVersionWithoutBuildTypeAndNumber(freeIpaVersion);\n-                    Optional<String> versionPrefix = extractVersionWithoutBuildTypeAndNumber(version);\n-                    return appVersionPrefix.isPresent() && appVersionPrefix.equals(versionPrefix);\n-                });\n-    }\n-\n-    private Optional<String> extractVersionWithoutBuildTypeAndNumber(String version) {\n-        Matcher appVersionMatcher = VERSION_PATTERN.matcher(version);\n-        if (!appVersionMatcher.matches() || appVersionMatcher.groupCount() != 2) {\n-            return Optional.empty();\n-        }\n-        return Optional.of(appVersionMatcher.group(1));\n-    }\n-\n-    private Predicate<? super FreeIpaVersions> toExactVersionMatch() {\n-        return freeIpaVersions -> freeIpaVersions.getVersions().contains(freeIpaVersion);\n     }\n \n     public String determineImageName(String platformString, String region, Image imgFromCatalog) {\n", "next_change": {"commit": "450067bf68066f71fee27a11d231222c6a332d7d", "changed_code": [{"header": "diff --git a/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java b/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\nindex 2e0f2ec04e..7176093c53 100644\n--- a/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\n+++ b/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\n", "chunk": "@@ -79,20 +127,16 @@ public class ImageService {\n         Optional<Map<String, String>> imagesForPlatform = findStringKeyWithEqualsIgnoreCase(platformString, imgFromCatalog.getImageSetsByProvider());\n         if (imagesForPlatform.isPresent()) {\n             Map<String, String> imagesByRegion = imagesForPlatform.get();\n-            Optional<String> imageNameOpt = findStringKeyWithEqualsIgnoreCase(region, imagesByRegion);\n-            if (!imageNameOpt.isPresent()) {\n-                imageNameOpt = findStringKeyWithEqualsIgnoreCase(DEFAULT_REGION, imagesByRegion);\n-            }\n-            if (imageNameOpt.isPresent()) {\n-                return imageNameOpt.get();\n-            }\n-            String msg = String.format(\"Virtual machine image couldn't be found in image: '%s' for the selected platform: '%s' and region: '%s'.\",\n-                    imgFromCatalog, platformString, region);\n+            return findStringKeyWithEqualsIgnoreCase(region, imagesByRegion)\n+                    .or(() -> findStringKeyWithEqualsIgnoreCase(DEFAULT_REGION, imagesByRegion))\n+                    .orElseThrow(() -> new ImageNotFoundException(\n+                            String.format(\"Virtual machine image couldn't be found in image: '%s' for the selected platform: '%s' and region: '%s'.\",\n+                            imgFromCatalog, platformString, region)));\n+        } else {\n+            String msg = String.format(\"The selected image: '%s' doesn't contain virtual machine image for the selected platform: '%s'.\",\n+                    imgFromCatalog, platformString);\n             throw new ImageNotFoundException(msg);\n         }\n-        String msg = String.format(\"The selected image: '%s' doesn't contain virtual machine image for the selected platform: '%s'.\",\n-                imgFromCatalog, platformString);\n-        throw new ImageNotFoundException(msg);\n     }\n \n     private <T> Optional<T> findStringKeyWithEqualsIgnoreCase(String key, Map<String, T> map) {\n", "next_change": {"commit": "e57164c19f0c1c3c12dcde6248252904fedaf42f", "changed_code": [{"header": "diff --git a/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java b/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\nindex 7176093c53..3fbb9f6a8b 100644\n--- a/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\n+++ b/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\n", "chunk": "@@ -139,6 +171,14 @@ public class ImageService {\n         }\n     }\n \n+    private String selectImageByRegion(String platformString, String region, Image imgFromCatalog, Map<String, String> imagesByRegion) {\n+        return findStringKeyWithEqualsIgnoreCase(DEFAULT_REGION, imagesByRegion)\n+                .or(() -> findStringKeyWithEqualsIgnoreCase(region, imagesByRegion))\n+                .orElseThrow(() -> new ImageNotFoundException(\n+                        String.format(\"Virtual machine image couldn't be found in image: '%s' for the selected platform: '%s' and region: '%s'.\",\n+                                imgFromCatalog, platformString, region)));\n+    }\n+\n     private <T> Optional<T> findStringKeyWithEqualsIgnoreCase(String key, Map<String, T> map) {\n         return map.entrySet().stream()\n                 .filter(entry -> entry.getKey().equalsIgnoreCase(key))\n", "next_change": {"commit": "22552e93deed6e8a8583f371d911a15b5a19928d", "changed_code": [{"header": "diff --git a/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java b/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\nindex 3fbb9f6a8b..f1ecef558d 100644\n--- a/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\n+++ b/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\n", "chunk": "@@ -179,6 +197,13 @@ public class ImageService {\n                                 imgFromCatalog, platformString, region)));\n     }\n \n+    private String selectImageByRegion(String platformString, String region, Image imgFromCatalog, Map<String, String> imagesByRegion) {\n+        return findStringKeyWithEqualsIgnoreCase(region, imagesByRegion)\n+                .orElseThrow(() -> new ImageNotFoundException(\n+                        String.format(\"Virtual machine image couldn't be found in image: '%s' for the selected platform: '%s' and region: '%s'.\",\n+                                imgFromCatalog, platformString, region)));\n+    }\n+\n     private <T> Optional<T> findStringKeyWithEqualsIgnoreCase(String key, Map<String, T> map) {\n         return map.entrySet().stream()\n                 .filter(entry -> entry.getKey().equalsIgnoreCase(key))\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "45f035557f4a1f127b6023b7420f0a0a9aef6b21", "message": "Merge commit", "committedDate": null}, {"oid": "d38fbaae70d678dbdbff37f3c96bb05415194a93", "committedDate": "2021-04-16 09:58:33 +0200", "message": "CB-12140 Extend image filtering logic to match by the image uuid as well."}, {"oid": "9b05311dae1d17203186a6289eae5a70e6f96275", "committedDate": "2021-04-19 15:08:56 +0200", "message": "CB-11904: Extension of the CB API to support custom image catalogs"}, {"oid": "b7a1800ecb0bc7dc40d1d3c5f3deaab72cbdb9c1", "committedDate": "2021-05-10 15:23:02 +0200", "message": "CB-11904: Custom image catalog CRUD operations"}, {"oid": "450067bf68066f71fee27a11d231222c6a332d7d", "committedDate": "2021-06-10 10:44:55 +0200", "message": "CB-12457 Image change flow for FreeIPA"}, {"oid": "28c71fb81880c0a3b19f833ac2791c0cc56d9692", "committedDate": "2021-09-13 16:00:18 +0200", "message": "CB-13685 Implement getFreeIpaUpgradeOptions in FreeIpaUpgradeV1Controller"}, {"oid": "f86e0832269aa151ded81f3125bbc910718572f8", "committedDate": "2021-10-05 14:48:43 +0200", "message": "CB-13339 E2E test for FreeIPA upgrade"}, {"oid": "e2d415768ab56aff49e2750fd1fdde76e64874fc", "committedDate": "2021-10-19 16:47:05 +0200", "message": "CB-14458 Generate Freeipa image catalog with the currently used image"}, {"oid": "3749bd40d0a563b5b1dc500fba95eaaed17f22ae", "committedDate": "2021-11-23 10:42:03 +0100", "message": "CB-14514 In case of missing FreeIPA versions in the image catalog json, generate a default one based on the advertised images flag and the current FreeIPA svc version. Generate image catalog command should set the advertised flag and skip versions."}, {"oid": "a691a9621273daef355ecd77c1c7ebcc74442694", "committedDate": "2022-03-17 10:11:23 +0100", "message": "CB-15873 CB-15874 CB-15875 CB-15879 Support Gov and Public AWS in the same time for local dev. Modify mock idbroker mapping roles for gov cloud. Modify region mapping to include gov cloud regions. Add new crn segment to gov cloud deployment."}, {"oid": "9a8ba2a3e2bcd7fc2b4d943c880c5b02f602cd12", "committedDate": "2022-03-30 17:47:59 +0200", "message": "CB-15872 using the right provider name for selecting gov cloud. added unit tests as well."}, {"oid": "2bc448cc3ae110755860e627945adb6203a47e28", "committedDate": "2022-06-13 16:37:17 +0200", "message": "CB-17177 Rotate salt password endpoints in environment/freeipa"}, {"oid": "01075db65d060e21989025fc99bf65cb8c98f45f", "committedDate": "2022-08-30 09:54:46 +0200", "message": "CB-18004 Implement FreeIPA flow skeleton for vertical scale"}, {"oid": "aa727ab4f0f5c1b49d061d5bb9319bf6ed6531c6", "committedDate": "2022-10-13 13:21:24 +0200", "message": "CB-18682 Freeipa upgrade consistently fails with could not prepare statement - connection is closed"}, {"oid": "19318e8ac6ff4b4117aa7ba8cafdf44edb70ea4a", "committedDate": "2022-11-21 17:00:26 +0100", "message": "CB-18840 Expose LDAP agent version on FMS API"}, {"oid": "e57164c19f0c1c3c12dcde6248252904fedaf42f", "committedDate": "2022-12-02 10:20:36 +0100", "message": "CB-19561 - Marketplace image should be chosen if CDP_AZURE_IMAGE_MARKETPLACE_ONLY is granted"}, {"oid": "6bc943225ff523b9248c9d5ce7bd72b3a3ef4e83", "committedDate": "2022-12-07 10:21:03 +0100", "message": "CB-15822 Refactor used image collection"}, {"oid": "22552e93deed6e8a8583f371d911a15b5a19928d", "committedDate": "2023-01-25 11:07:09 +0100", "message": "CB-19105 Fallback to VHD image in case of marketplace image deployment error"}, {"oid": "6953836422238552534c0e41f7bfc1fa6c4f3158", "committedDate": "2023-03-01 10:28:04 +0100", "message": "CRB-2448 [FedRAMP] Hide all non core CDP cluster template on FedRAMP control planes. This also involves dps-k8s and csi changes. We can now exclude blueprint by name and also hide templates based on the supported runtimes."}, {"oid": "c8e350ec7f03ef5b2fd2f0916dc8b9fb40782c6f", "committedDate": "2023-03-13 15:30:22 +0100", "message": "CB-20943 remove the plain text userdata from the database and move it to vault."}, {"oid": "e98145cc2c2dd5eaeca4fc56eba1764c48c6877d", "committedDate": "2023-03-20 20:18:46 +0100", "message": "Revert \"CB-20943 remove the plain text userdata from the database and move it to vault.\""}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc1NjI1OA==", "url": "https://github.com/hortonworks/cloudbreak/pull/7966#discussion_r420756258", "body": "it's a bit hard to understand at first glance what's happening here, so I would suggest some refactor to make it easier.\r\nso `appVersionrefix` (which is misspelled) could come from a method and could be optional. similarly `versionPrefix` could come from a well named method and finally you could have a return like `appVersionrefix.isPresent() && versionPrefix.isPresent() && appVersionrefix.get().equals(versionPrefix.get())`", "bodyText": "it's a bit hard to understand at first glance what's happening here, so I would suggest some refactor to make it easier.\nso appVersionrefix (which is misspelled) could come from a method and could be optional. similarly versionPrefix could come from a well named method and finally you could have a return like appVersionrefix.isPresent() && versionPrefix.isPresent() && appVersionrefix.get().equals(versionPrefix.get())", "bodyHTML": "<p dir=\"auto\">it's a bit hard to understand at first glance what's happening here, so I would suggest some refactor to make it easier.<br>\nso <code>appVersionrefix</code> (which is misspelled) could come from a method and could be optional. similarly <code>versionPrefix</code> could come from a well named method and finally you could have a return like <code>appVersionrefix.isPresent() &amp;&amp; versionPrefix.isPresent() &amp;&amp; appVersionrefix.get().equals(versionPrefix.get())</code></p>", "author": "lacikaaa", "createdAt": "2020-05-06T12:37:37Z", "path": "freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java", "diffHunk": "@@ -53,46 +65,111 @@ public Image create(Stack stack, ImageSettingsRequest imageRequest) {\n         LOGGER.info(\"Selected VM image for CloudPlatform '{}' and region '{}' is: {} from: {} image catalog\",\n                 platformString, region, imageName, catalogUrl);\n \n-        Image image = imageConverter.convert(imageCatalogImage);\n-        image.setStack(stack);\n-        image.setImageName(imageName);\n-        image.setImageCatalogUrl(catalogUrl);\n-        return imageRepository.save(image);\n+        ImageEntity imageEntity = imageConverter.convert(imageCatalogImage);\n+        imageEntity.setStack(stack);\n+        imageEntity.setImageName(imageName);\n+        imageEntity.setImageCatalogUrl(catalogUrl);\n+        return imageRepository.save(imageEntity);\n     }\n \n-    public Image getByStack(Stack stack) {\n+    public ImageEntity getByStack(Stack stack) {\n         return imageRepository.getByStack(stack);\n     }\n \n-    public Image getByStackId(Long stackId) {\n+    public ImageEntity getByStackId(Long stackId) {\n         return imageRepository.getByStackId(stackId);\n     }\n \n-    public Image decorateImageWithUserDataForStack(Stack stack, String userdata) {\n-        Image image = getByStack(stack);\n-        image.setUserdata(userdata);\n-        return imageRepository.save(image);\n+    public ImageEntity decorateImageWithUserDataForStack(Stack stack, String userdata) {\n+        ImageEntity imageEntity = getByStack(stack);\n+        imageEntity.setUserdata(userdata);\n+        return imageRepository.save(imageEntity);\n     }\n \n-    public com.sequenceiq.freeipa.api.model.image.Image getImage(ImageSettingsRequest imageSettings, String region, String platform) {\n+    public Image getImage(ImageSettingsRequest imageSettings, String region, String platform) {\n         String imageId = imageSettings.getId();\n         String catalogUrl = Objects.nonNull(imageSettings.getCatalog()) ? imageSettings.getCatalog() : defaultCatalogUrl;\n         String imageOs = Objects.nonNull(imageSettings.getOs()) ? imageSettings.getOs() : defaultOs;\n \n-        List<com.sequenceiq.freeipa.api.model.image.Image> images = imageCatalogProvider.getImageCatalog(catalogUrl).getImages().getFreeipaImages();\n-        Optional<? extends com.sequenceiq.freeipa.api.model.image.Image> image = findImage(imageId, imageOs, images, region, platform);\n-        if (image.isEmpty()) {\n-            imageCatalogProvider.evictImageCatalogCache(catalogUrl);\n-            images = imageCatalogProvider.getImageCatalog(catalogUrl).getImages().getFreeipaImages();\n-            image = findImage(imageId, imageOs, images, region, platform);\n-            if (image.isEmpty()) {\n-                throw new ImageNotFoundException(String.format(\"Could not find any image with id: '%s' in region '%s' with OS '%s'.\", imageId, region, imageOs));\n-            }\n+        ImageCatalog cachedImageCatalog = imageCatalogProvider.getImageCatalog(catalogUrl);\n+        return findImageForAppVersion(region, platform, imageId, imageOs, cachedImageCatalog)\n+                .or(() -> {\n+                    LOGGER.debug(\"Image not found with the parameters: imageId: {}, imageOs: {}, region: {}, platform: {}\", imageId, imageOs, region, platform);\n+                    LOGGER.debug(\"Evicting image catalog cache to retry.\");\n+                    imageCatalogProvider.evictImageCatalogCache(catalogUrl);\n+                    ImageCatalog renewedImageCatalog = imageCatalogProvider.getImageCatalog(catalogUrl);\n+                    return findImageForAppVersion(region, platform, imageId, imageOs, renewedImageCatalog);\n+                })\n+                .orElseThrow(() -> {\n+                    String message = String.format(\"Could not find any image with id: '%s' in region '%s' with OS '%s'.\", imageId, region, imageOs);\n+                    return new ImageNotFoundException(message);\n+                });\n+    }\n+\n+    private Optional<Image> findImageForAppVersion(String region, String platform, String imageId, String imageOs, ImageCatalog catalog) {\n+        List<FreeIpaVersions> versions = filterFreeIpaVersionsByAppVersion(catalog.getVersions().getFreeIpaVersions());\n+        List<Image> compatibleImages = findImage(imageId, imageOs, catalog.getImages().getFreeipaImages(), region, platform);\n+        LOGGER.debug(\"[{}] compatible images found, by the following parameters: imageId: {}, imageOs: {}, region: {}, platform: {}\",\n+                compatibleImages.size(), imageId, imageOs, region, platform);\n+\n+        LOGGER.debug(\"Attempt to find a default image to use.\");\n+        return filterImages(versions, compatibleImages, FreeIpaVersions::getDefaults).or(\n+                () -> {\n+                    LOGGER.debug(\"Default image not found. Attempt to find an image, compatible with the application version.\");\n+                    return filterImages(versions, compatibleImages, FreeIpaVersions::getImageIds);\n+                }\n+        ).or(\n+                () -> {\n+                    LOGGER.debug(\"Not found any image compatible with the application version. Falling back to the most recent image.\");\n+                    return compatibleImages.stream().max(Comparator.comparing(Image::getDate));\n+                }\n+        );\n+    }\n+\n+    private Optional<Image> filterImages(List<FreeIpaVersions> freeIpaVersions, List<Image> images,\n+            Function<FreeIpaVersions, List<String>> memberFunction) {\n+        List<String> imageIds = freeIpaVersions.stream().map(memberFunction).flatMap(Collection::stream).collect(Collectors.toList());\n+        return images.stream().filter(image -> imageIds.contains(image.getUuid())).max(Comparator.comparing(Image::getDate));\n+    }\n+\n+    private List<FreeIpaVersions> filterFreeIpaVersionsByAppVersion(List<FreeIpaVersions> freeIpaVersions) {\n+        List<FreeIpaVersions> exactFreeIpaVersionsMatches = freeIpaVersions.stream().filter(toExactVersionMatch()).collect(Collectors.toList());\n+        if (!exactFreeIpaVersionsMatches.isEmpty()) {\n+            LOGGER.debug(\"Exact version match found in image catalog for app version: {}\", freeIpaVersion);\n+            return exactFreeIpaVersionsMatches;\n+        }\n+        List<FreeIpaVersions> prefixFreeIpaVersions = freeIpaVersions.stream().filter(toPrefixVersionMatch()).collect(Collectors.toList());\n+        if (!prefixFreeIpaVersions.isEmpty()) {\n+            LOGGER.debug(\"Prefix version match found in image catalog for app version: {}\", freeIpaVersion);\n+            return prefixFreeIpaVersions;\n         }\n-        return image.get();\n+\n+        LOGGER.warn(\"Not found matching version in image catalog. Falling back to most recent image.\");\n+        return freeIpaVersions;\n+    }\n+\n+    private Predicate<? super FreeIpaVersions> toPrefixVersionMatch() {\n+        return freeIpaVersions -> freeIpaVersions.getVersions().stream().anyMatch(\n+                version -> {\n+                    Matcher appVersionMatcher = VERSION_PATTERN.matcher(freeIpaVersion);\n+                    if (!appVersionMatcher.matches() || appVersionMatcher.groupCount() != 2) {\n+                        return false;\n+                    }\n+                    String appVersionrefix = appVersionMatcher.group(1);\n+                    Matcher versionPrefixMatcher = VERSION_PATTERN.matcher(version);\n+                    if (!versionPrefixMatcher.matches() || versionPrefixMatcher.groupCount() != 2) {\n+                        return false;\n+                    }\n+                    String versionPrefix = versionPrefixMatcher.group(1);\n+                    return appVersionrefix.equals(versionPrefix);\n+                });", "originalCommit": "9f7d3cea324877837931763f2282a3e6850ed3e0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "46ccb46063a3136d41aa10741a46f8fd8a01a366", "changed_code": [{"header": "diff --git a/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java b/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\nindex 03b6639445..6984c6b2bb 100644\n--- a/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\n+++ b/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\n", "chunk": "@@ -151,20 +171,20 @@ public class ImageService {\n     private Predicate<? super FreeIpaVersions> toPrefixVersionMatch() {\n         return freeIpaVersions -> freeIpaVersions.getVersions().stream().anyMatch(\n                 version -> {\n-                    Matcher appVersionMatcher = VERSION_PATTERN.matcher(freeIpaVersion);\n-                    if (!appVersionMatcher.matches() || appVersionMatcher.groupCount() != 2) {\n-                        return false;\n-                    }\n-                    String appVersionrefix = appVersionMatcher.group(1);\n-                    Matcher versionPrefixMatcher = VERSION_PATTERN.matcher(version);\n-                    if (!versionPrefixMatcher.matches() || versionPrefixMatcher.groupCount() != 2) {\n-                        return false;\n-                    }\n-                    String versionPrefix = versionPrefixMatcher.group(1);\n-                    return appVersionrefix.equals(versionPrefix);\n+                    Optional<String> appVersionPrefix = extractVersionWithoutBuildTypeAndNumber(freeIpaVersion);\n+                    Optional<String> versionPrefix = extractVersionWithoutBuildTypeAndNumber(version);\n+                    return appVersionPrefix.isPresent() && appVersionPrefix.equals(versionPrefix);\n                 });\n     }\n \n+    private Optional<String> extractVersionWithoutBuildTypeAndNumber(String version) {\n+        Matcher appVersionMatcher = VERSION_PATTERN.matcher(version);\n+        if (!appVersionMatcher.matches() || appVersionMatcher.groupCount() != 2) {\n+            return Optional.empty();\n+        }\n+        return Optional.of(appVersionMatcher.group(1));\n+    }\n+\n     private Predicate<? super FreeIpaVersions> toExactVersionMatch() {\n         return freeIpaVersions -> freeIpaVersions.getVersions().contains(freeIpaVersion);\n     }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "45f035557f4a1f127b6023b7420f0a0a9aef6b21", "changed_code": [{"header": "diff --git a/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java b/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\nindex 03b6639445..f4ad42c7d7 100644\n--- a/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\n+++ b/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\n", "chunk": "@@ -151,20 +162,20 @@ public class ImageService {\n     private Predicate<? super FreeIpaVersions> toPrefixVersionMatch() {\n         return freeIpaVersions -> freeIpaVersions.getVersions().stream().anyMatch(\n                 version -> {\n-                    Matcher appVersionMatcher = VERSION_PATTERN.matcher(freeIpaVersion);\n-                    if (!appVersionMatcher.matches() || appVersionMatcher.groupCount() != 2) {\n-                        return false;\n-                    }\n-                    String appVersionrefix = appVersionMatcher.group(1);\n-                    Matcher versionPrefixMatcher = VERSION_PATTERN.matcher(version);\n-                    if (!versionPrefixMatcher.matches() || versionPrefixMatcher.groupCount() != 2) {\n-                        return false;\n-                    }\n-                    String versionPrefix = versionPrefixMatcher.group(1);\n-                    return appVersionrefix.equals(versionPrefix);\n+                    Optional<String> appVersionPrefix = extractVersionWithoutBuildTypeAndNumber(freeIpaVersion);\n+                    Optional<String> versionPrefix = extractVersionWithoutBuildTypeAndNumber(version);\n+                    return appVersionPrefix.isPresent() && appVersionPrefix.equals(versionPrefix);\n                 });\n     }\n \n+    private Optional<String> extractVersionWithoutBuildTypeAndNumber(String version) {\n+        Matcher appVersionMatcher = VERSION_PATTERN.matcher(version);\n+        if (!appVersionMatcher.matches() || appVersionMatcher.groupCount() != 2) {\n+            return Optional.empty();\n+        }\n+        return Optional.of(appVersionMatcher.group(1));\n+    }\n+\n     private Predicate<? super FreeIpaVersions> toExactVersionMatch() {\n         return freeIpaVersions -> freeIpaVersions.getVersions().contains(freeIpaVersion);\n     }\n", "next_change": {"commit": "9b05311dae1d17203186a6289eae5a70e6f96275", "changed_code": [{"header": "diff --git a/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java b/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\nindex f4ad42c7d7..2e0f2ec04e 100644\n--- a/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\n+++ b/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\n", "chunk": "@@ -86,98 +68,11 @@ public class ImageService {\n         return imageRepository.save(imageEntity);\n     }\n \n-    public Image getImage(ImageSettingsRequest imageSettings, String region, String platform) {\n-        String imageId = imageSettings.getId();\n-        String catalogUrl = Objects.nonNull(imageSettings.getCatalog()) ? imageSettings.getCatalog() : defaultCatalogUrl;\n-        String imageOs = Objects.nonNull(imageSettings.getOs()) ? imageSettings.getOs() : defaultOs;\n-\n-        ImageCatalog cachedImageCatalog = imageCatalogProvider.getImageCatalog(catalogUrl);\n-        return findImageForAppVersion(region, platform, imageId, imageOs, cachedImageCatalog)\n-                .or(() -> retryAfterEvictingCache(region, platform, imageId, catalogUrl, imageOs))\n-                .orElseThrow(() -> throwImageNotFoundException(region, imageId, imageOs));\n-    }\n-\n-    private ImageNotFoundException throwImageNotFoundException(String region, String imageId, String imageOs) {\n-            LOGGER.warn(\"Image not found in refreshed image catalog, by parameters: imageid: {}, region: {}, imageOs: {}\", imageId, region, imageOs);\n-            String message = String.format(\"Could not find any image with id: '%s' in region '%s' with OS '%s'.\", imageId, region, imageOs);\n-            return new ImageNotFoundException(message);\n-    }\n-\n-    private Optional<Image> retryAfterEvictingCache(String region, String platform, String imageId, String catalogUrl, String imageOs) {\n-            LOGGER.debug(\"Image not found with the parameters: imageId: {}, imageOs: {}, region: {}, platform: {}\", imageId, imageOs, region, platform);\n-            LOGGER.debug(\"Evicting image catalog cache to retry.\");\n-            imageCatalogProvider.evictImageCatalogCache(catalogUrl);\n-            ImageCatalog renewedImageCatalog = imageCatalogProvider.getImageCatalog(catalogUrl);\n-            return findImageForAppVersion(region, platform, imageId, imageOs, renewedImageCatalog);\n-    }\n-\n-    private Optional<Image> findImageForAppVersion(String region, String platform, String imageId, String imageOs, ImageCatalog catalog) {\n-        List<FreeIpaVersions> versions = filterFreeIpaVersionsByAppVersion(catalog.getVersions().getFreeIpaVersions());\n-        List<Image> compatibleImages = findImage(imageId, imageOs, catalog.getImages().getFreeipaImages(), region, platform);\n-        LOGGER.debug(\"[{}] compatible images found, by the following parameters: imageId: {}, imageOs: {}, region: {}, platform: {}\",\n-                compatibleImages.size(), imageId, imageOs, region, platform);\n-\n-        return findImageInDefaults(versions, compatibleImages)\n-                .or(() -> findImageByApplicationVersion(versions, compatibleImages))\n-                .or(() -> findMostRecentImage(compatibleImages));\n-    }\n-\n-    private Optional<Image> findMostRecentImage(List<Image> compatibleImages) {\n-            LOGGER.debug(\"Not found any image compatible with the application version. Falling back to the most recent image.\");\n-            return compatibleImages.stream().max(Comparator.comparing(Image::getDate));\n-    }\n-\n-    private Optional<Image> findImageByApplicationVersion(List<FreeIpaVersions> versions, List<Image> compatibleImages) {\n-            LOGGER.debug(\"Default image not found. Attempt to find an image, compatible with the application version.\");\n-            return filterImages(versions, compatibleImages, FreeIpaVersions::getImageIds);\n-    }\n-\n-    private Optional<Image> findImageInDefaults(List<FreeIpaVersions> versions, List<Image> compatibleImages) {\n-        LOGGER.debug(\"Attempt to find a default image to use.\");\n-        return filterImages(versions, compatibleImages, FreeIpaVersions::getDefaults);\n-    }\n-\n-    private Optional<Image> filterImages(List<FreeIpaVersions> freeIpaVersions, List<Image> images,\n-            Function<FreeIpaVersions, List<String>> memberFunction) {\n-        List<String> imageIds = freeIpaVersions.stream().map(memberFunction).flatMap(Collection::stream).collect(Collectors.toList());\n-        return images.stream().filter(image -> imageIds.contains(image.getUuid())).max(Comparator.comparing(Image::getDate));\n-    }\n-\n-    private List<FreeIpaVersions> filterFreeIpaVersionsByAppVersion(List<FreeIpaVersions> freeIpaVersions) {\n-        List<FreeIpaVersions> exactFreeIpaVersionsMatches = freeIpaVersions.stream().filter(toExactVersionMatch()).collect(Collectors.toList());\n-        if (!exactFreeIpaVersionsMatches.isEmpty()) {\n-            LOGGER.debug(\"Exact version match found in image catalog for app version: {}\", freeIpaVersion);\n-            return exactFreeIpaVersionsMatches;\n-        }\n-        List<FreeIpaVersions> prefixFreeIpaVersions = freeIpaVersions.stream().filter(toPrefixVersionMatch()).collect(Collectors.toList());\n-        if (!prefixFreeIpaVersions.isEmpty()) {\n-            LOGGER.debug(\"Prefix version match found in image catalog for app version: {}\", freeIpaVersion);\n-            return prefixFreeIpaVersions;\n-        }\n-\n-        LOGGER.warn(\"Not found matching version in image catalog. Falling back to most recent image.\");\n-        return freeIpaVersions;\n-    }\n+    public ImageWrapper getImage(ImageSettingsRequest imageSettings, String region, String platform) {\n+        return imageProviderFactory.getImageProvider(imageSettings.getCatalog())\n+                .getImage(imageSettings, region, platform)\n+                .orElseThrow(() -> throwImageNotFoundException(region, imageSettings.getId(), Optional.ofNullable(imageSettings.getOs()).orElse(defaultOs)));\n \n-    private Predicate<? super FreeIpaVersions> toPrefixVersionMatch() {\n-        return freeIpaVersions -> freeIpaVersions.getVersions().stream().anyMatch(\n-                version -> {\n-                    Optional<String> appVersionPrefix = extractVersionWithoutBuildTypeAndNumber(freeIpaVersion);\n-                    Optional<String> versionPrefix = extractVersionWithoutBuildTypeAndNumber(version);\n-                    return appVersionPrefix.isPresent() && appVersionPrefix.equals(versionPrefix);\n-                });\n-    }\n-\n-    private Optional<String> extractVersionWithoutBuildTypeAndNumber(String version) {\n-        Matcher appVersionMatcher = VERSION_PATTERN.matcher(version);\n-        if (!appVersionMatcher.matches() || appVersionMatcher.groupCount() != 2) {\n-            return Optional.empty();\n-        }\n-        return Optional.of(appVersionMatcher.group(1));\n-    }\n-\n-    private Predicate<? super FreeIpaVersions> toExactVersionMatch() {\n-        return freeIpaVersions -> freeIpaVersions.getVersions().contains(freeIpaVersion);\n     }\n \n     public String determineImageName(String platformString, String region, Image imgFromCatalog) {\n", "next_change": {"commit": "450067bf68066f71fee27a11d231222c6a332d7d", "changed_code": [{"header": "diff --git a/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java b/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\nindex 2e0f2ec04e..7176093c53 100644\n--- a/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\n+++ b/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\n", "chunk": "@@ -79,20 +127,16 @@ public class ImageService {\n         Optional<Map<String, String>> imagesForPlatform = findStringKeyWithEqualsIgnoreCase(platformString, imgFromCatalog.getImageSetsByProvider());\n         if (imagesForPlatform.isPresent()) {\n             Map<String, String> imagesByRegion = imagesForPlatform.get();\n-            Optional<String> imageNameOpt = findStringKeyWithEqualsIgnoreCase(region, imagesByRegion);\n-            if (!imageNameOpt.isPresent()) {\n-                imageNameOpt = findStringKeyWithEqualsIgnoreCase(DEFAULT_REGION, imagesByRegion);\n-            }\n-            if (imageNameOpt.isPresent()) {\n-                return imageNameOpt.get();\n-            }\n-            String msg = String.format(\"Virtual machine image couldn't be found in image: '%s' for the selected platform: '%s' and region: '%s'.\",\n-                    imgFromCatalog, platformString, region);\n+            return findStringKeyWithEqualsIgnoreCase(region, imagesByRegion)\n+                    .or(() -> findStringKeyWithEqualsIgnoreCase(DEFAULT_REGION, imagesByRegion))\n+                    .orElseThrow(() -> new ImageNotFoundException(\n+                            String.format(\"Virtual machine image couldn't be found in image: '%s' for the selected platform: '%s' and region: '%s'.\",\n+                            imgFromCatalog, platformString, region)));\n+        } else {\n+            String msg = String.format(\"The selected image: '%s' doesn't contain virtual machine image for the selected platform: '%s'.\",\n+                    imgFromCatalog, platformString);\n             throw new ImageNotFoundException(msg);\n         }\n-        String msg = String.format(\"The selected image: '%s' doesn't contain virtual machine image for the selected platform: '%s'.\",\n-                imgFromCatalog, platformString);\n-        throw new ImageNotFoundException(msg);\n     }\n \n     private <T> Optional<T> findStringKeyWithEqualsIgnoreCase(String key, Map<String, T> map) {\n", "next_change": {"commit": "e57164c19f0c1c3c12dcde6248252904fedaf42f", "changed_code": [{"header": "diff --git a/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java b/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\nindex 7176093c53..3fbb9f6a8b 100644\n--- a/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\n+++ b/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\n", "chunk": "@@ -139,6 +171,14 @@ public class ImageService {\n         }\n     }\n \n+    private String selectImageByRegion(String platformString, String region, Image imgFromCatalog, Map<String, String> imagesByRegion) {\n+        return findStringKeyWithEqualsIgnoreCase(DEFAULT_REGION, imagesByRegion)\n+                .or(() -> findStringKeyWithEqualsIgnoreCase(region, imagesByRegion))\n+                .orElseThrow(() -> new ImageNotFoundException(\n+                        String.format(\"Virtual machine image couldn't be found in image: '%s' for the selected platform: '%s' and region: '%s'.\",\n+                                imgFromCatalog, platformString, region)));\n+    }\n+\n     private <T> Optional<T> findStringKeyWithEqualsIgnoreCase(String key, Map<String, T> map) {\n         return map.entrySet().stream()\n                 .filter(entry -> entry.getKey().equalsIgnoreCase(key))\n", "next_change": {"commit": "22552e93deed6e8a8583f371d911a15b5a19928d", "changed_code": [{"header": "diff --git a/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java b/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\nindex 3fbb9f6a8b..f1ecef558d 100644\n--- a/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\n+++ b/freeipa/src/main/java/com/sequenceiq/freeipa/service/image/ImageService.java\n", "chunk": "@@ -179,6 +197,13 @@ public class ImageService {\n                                 imgFromCatalog, platformString, region)));\n     }\n \n+    private String selectImageByRegion(String platformString, String region, Image imgFromCatalog, Map<String, String> imagesByRegion) {\n+        return findStringKeyWithEqualsIgnoreCase(region, imagesByRegion)\n+                .orElseThrow(() -> new ImageNotFoundException(\n+                        String.format(\"Virtual machine image couldn't be found in image: '%s' for the selected platform: '%s' and region: '%s'.\",\n+                                imgFromCatalog, platformString, region)));\n+    }\n+\n     private <T> Optional<T> findStringKeyWithEqualsIgnoreCase(String key, Map<String, T> map) {\n         return map.entrySet().stream()\n                 .filter(entry -> entry.getKey().equalsIgnoreCase(key))\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "45f035557f4a1f127b6023b7420f0a0a9aef6b21", "message": "Merge commit", "committedDate": null}, {"oid": "d38fbaae70d678dbdbff37f3c96bb05415194a93", "committedDate": "2021-04-16 09:58:33 +0200", "message": "CB-12140 Extend image filtering logic to match by the image uuid as well."}, {"oid": "9b05311dae1d17203186a6289eae5a70e6f96275", "committedDate": "2021-04-19 15:08:56 +0200", "message": "CB-11904: Extension of the CB API to support custom image catalogs"}, {"oid": "b7a1800ecb0bc7dc40d1d3c5f3deaab72cbdb9c1", "committedDate": "2021-05-10 15:23:02 +0200", "message": "CB-11904: Custom image catalog CRUD operations"}, {"oid": "450067bf68066f71fee27a11d231222c6a332d7d", "committedDate": "2021-06-10 10:44:55 +0200", "message": "CB-12457 Image change flow for FreeIPA"}, {"oid": "28c71fb81880c0a3b19f833ac2791c0cc56d9692", "committedDate": "2021-09-13 16:00:18 +0200", "message": "CB-13685 Implement getFreeIpaUpgradeOptions in FreeIpaUpgradeV1Controller"}, {"oid": "f86e0832269aa151ded81f3125bbc910718572f8", "committedDate": "2021-10-05 14:48:43 +0200", "message": "CB-13339 E2E test for FreeIPA upgrade"}, {"oid": "e2d415768ab56aff49e2750fd1fdde76e64874fc", "committedDate": "2021-10-19 16:47:05 +0200", "message": "CB-14458 Generate Freeipa image catalog with the currently used image"}, {"oid": "3749bd40d0a563b5b1dc500fba95eaaed17f22ae", "committedDate": "2021-11-23 10:42:03 +0100", "message": "CB-14514 In case of missing FreeIPA versions in the image catalog json, generate a default one based on the advertised images flag and the current FreeIPA svc version. Generate image catalog command should set the advertised flag and skip versions."}, {"oid": "a691a9621273daef355ecd77c1c7ebcc74442694", "committedDate": "2022-03-17 10:11:23 +0100", "message": "CB-15873 CB-15874 CB-15875 CB-15879 Support Gov and Public AWS in the same time for local dev. Modify mock idbroker mapping roles for gov cloud. Modify region mapping to include gov cloud regions. Add new crn segment to gov cloud deployment."}, {"oid": "9a8ba2a3e2bcd7fc2b4d943c880c5b02f602cd12", "committedDate": "2022-03-30 17:47:59 +0200", "message": "CB-15872 using the right provider name for selecting gov cloud. added unit tests as well."}, {"oid": "2bc448cc3ae110755860e627945adb6203a47e28", "committedDate": "2022-06-13 16:37:17 +0200", "message": "CB-17177 Rotate salt password endpoints in environment/freeipa"}, {"oid": "01075db65d060e21989025fc99bf65cb8c98f45f", "committedDate": "2022-08-30 09:54:46 +0200", "message": "CB-18004 Implement FreeIPA flow skeleton for vertical scale"}, {"oid": "aa727ab4f0f5c1b49d061d5bb9319bf6ed6531c6", "committedDate": "2022-10-13 13:21:24 +0200", "message": "CB-18682 Freeipa upgrade consistently fails with could not prepare statement - connection is closed"}, {"oid": "19318e8ac6ff4b4117aa7ba8cafdf44edb70ea4a", "committedDate": "2022-11-21 17:00:26 +0100", "message": "CB-18840 Expose LDAP agent version on FMS API"}, {"oid": "e57164c19f0c1c3c12dcde6248252904fedaf42f", "committedDate": "2022-12-02 10:20:36 +0100", "message": "CB-19561 - Marketplace image should be chosen if CDP_AZURE_IMAGE_MARKETPLACE_ONLY is granted"}, {"oid": "6bc943225ff523b9248c9d5ce7bd72b3a3ef4e83", "committedDate": "2022-12-07 10:21:03 +0100", "message": "CB-15822 Refactor used image collection"}, {"oid": "22552e93deed6e8a8583f371d911a15b5a19928d", "committedDate": "2023-01-25 11:07:09 +0100", "message": "CB-19105 Fallback to VHD image in case of marketplace image deployment error"}, {"oid": "6953836422238552534c0e41f7bfc1fa6c4f3158", "committedDate": "2023-03-01 10:28:04 +0100", "message": "CRB-2448 [FedRAMP] Hide all non core CDP cluster template on FedRAMP control planes. This also involves dps-k8s and csi changes. We can now exclude blueprint by name and also hide templates based on the supported runtimes."}, {"oid": "c8e350ec7f03ef5b2fd2f0916dc8b9fb40782c6f", "committedDate": "2023-03-13 15:30:22 +0100", "message": "CB-20943 remove the plain text userdata from the database and move it to vault."}, {"oid": "e98145cc2c2dd5eaeca4fc56eba1764c48c6877d", "committedDate": "2023-03-20 20:18:46 +0100", "message": "Revert \"CB-20943 remove the plain text userdata from the database and move it to vault.\""}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc1ODU2OQ==", "url": "https://github.com/hortonworks/cloudbreak/pull/7966#discussion_r420758569", "body": "could you add a test case where the version doesn't match the pattern?", "bodyText": "could you add a test case where the version doesn't match the pattern?", "bodyHTML": "<p dir=\"auto\">could you add a test case where the version doesn't match the pattern?</p>", "author": "lacikaaa", "createdAt": "2020-05-06T12:41:36Z", "path": "freeipa/src/test/java/com/sequenceiq/freeipa/service/image/ImageServiceTest.java", "diffHunk": "@@ -65,10 +67,22 @@ public void setup() throws Exception {\n         image = imageCatalog.getImages().getFreeipaImages().get(0);\n         ReflectionTestUtils.setField(underTest, ImageService.class, \"defaultCatalogUrl\", DEFAULT_CATALOG_URL, null);\n         ReflectionTestUtils.setField(underTest, ImageService.class, \"defaultOs\", DEFAULT_OS, null);\n+        ReflectionTestUtils.setField(underTest, ImageService.class, \"freeIpaVersion\", DEFAULT_VERSION, null);\n+    }\n+\n+    @Test\n+    public void testGetImageGivenNoInputWithGbnAppVersion() {", "originalCommit": "9f7d3cea324877837931763f2282a3e6850ed3e0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "46ccb46063a3136d41aa10741a46f8fd8a01a366", "changed_code": [{"header": "diff --git a/freeipa/src/test/java/com/sequenceiq/freeipa/service/image/ImageServiceTest.java b/freeipa/src/test/java/com/sequenceiq/freeipa/service/image/ImageServiceTest.java\nindex a1a44a97ba..d1d9089193 100644\n--- a/freeipa/src/test/java/com/sequenceiq/freeipa/service/image/ImageServiceTest.java\n+++ b/freeipa/src/test/java/com/sequenceiq/freeipa/service/image/ImageServiceTest.java\n", "chunk": "@@ -70,6 +70,16 @@ public class ImageServiceTest {\n         ReflectionTestUtils.setField(underTest, ImageService.class, \"freeIpaVersion\", DEFAULT_VERSION, null);\n     }\n \n+    @Test\n+    public void testGetImageGivenNoInputWithInvalidAppVersion() {\n+        ReflectionTestUtils.setField(underTest, ImageService.class, \"freeIpaVersion\", \"2.21.0-dcv.1\", null);\n+        ImageSettingsRequest is = setupImageSettingsRequest(null, null, \"centos7\");\n+        Image image = underTest.getImage(is, DEFAULT_REGION, DEFAULT_PLATFORM);\n+        assertEquals(\"centos7\", image.getOs());\n+        assertEquals(\"Assuming the latest image to be selected\", \"2019-05-09\", image.getDate());\n+        assertEquals(\"91851893-8340-411d-afb7-e1b55107fb10\", image.getUuid());\n+    }\n+\n     @Test\n     public void testGetImageGivenNoInputWithGbnAppVersion() {\n         ReflectionTestUtils.setField(underTest, ImageService.class, \"freeIpaVersion\", \"2.21.0-b1\", null);\n", "next_change": null}]}, "revised_code_in_main": {"commit": "45f035557f4a1f127b6023b7420f0a0a9aef6b21", "changed_code": [{"header": "diff --git a/freeipa/src/test/java/com/sequenceiq/freeipa/service/image/ImageServiceTest.java b/freeipa/src/test/java/com/sequenceiq/freeipa/service/image/ImageServiceTest.java\nindex a1a44a97ba..d1d9089193 100644\n--- a/freeipa/src/test/java/com/sequenceiq/freeipa/service/image/ImageServiceTest.java\n+++ b/freeipa/src/test/java/com/sequenceiq/freeipa/service/image/ImageServiceTest.java\n", "chunk": "@@ -70,6 +70,16 @@ public class ImageServiceTest {\n         ReflectionTestUtils.setField(underTest, ImageService.class, \"freeIpaVersion\", DEFAULT_VERSION, null);\n     }\n \n+    @Test\n+    public void testGetImageGivenNoInputWithInvalidAppVersion() {\n+        ReflectionTestUtils.setField(underTest, ImageService.class, \"freeIpaVersion\", \"2.21.0-dcv.1\", null);\n+        ImageSettingsRequest is = setupImageSettingsRequest(null, null, \"centos7\");\n+        Image image = underTest.getImage(is, DEFAULT_REGION, DEFAULT_PLATFORM);\n+        assertEquals(\"centos7\", image.getOs());\n+        assertEquals(\"Assuming the latest image to be selected\", \"2019-05-09\", image.getDate());\n+        assertEquals(\"91851893-8340-411d-afb7-e1b55107fb10\", image.getUuid());\n+    }\n+\n     @Test\n     public void testGetImageGivenNoInputWithGbnAppVersion() {\n         ReflectionTestUtils.setField(underTest, ImageService.class, \"freeIpaVersion\", \"2.21.0-b1\", null);\n", "next_change": {"commit": "9b05311dae1d17203186a6289eae5a70e6f96275", "changed_code": [{"header": "diff --git a/freeipa/src/test/java/com/sequenceiq/freeipa/service/image/ImageServiceTest.java b/freeipa/src/test/java/com/sequenceiq/freeipa/service/image/ImageServiceTest.java\nindex d1d9089193..96b98ec10e 100644\n--- a/freeipa/src/test/java/com/sequenceiq/freeipa/service/image/ImageServiceTest.java\n+++ b/freeipa/src/test/java/com/sequenceiq/freeipa/service/image/ImageServiceTest.java\n", "chunk": "@@ -4,166 +4,78 @@ import static org.junit.Assert.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertThrows;\n import static org.mockito.Mockito.when;\n \n-import java.io.IOException;\n+import java.util.Collections;\n+import java.util.Optional;\n \n import org.hamcrest.CoreMatchers;\n import org.junit.Assert;\n-import org.junit.Before;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n import org.mockito.InjectMocks;\n import org.mockito.Mock;\n-import org.mockito.Spy;\n import org.mockito.junit.MockitoJUnitRunner;\n-import org.springframework.test.util.ReflectionTestUtils;\n \n-import com.fasterxml.jackson.databind.ObjectMapper;\n-import com.sequenceiq.cloudbreak.util.FileReaderUtils;\n import com.sequenceiq.freeipa.api.model.image.Image;\n-import com.sequenceiq.freeipa.api.model.image.ImageCatalog;\n import com.sequenceiq.freeipa.api.v1.freeipa.stack.model.common.image.ImageSettingsRequest;\n \n @RunWith(MockitoJUnitRunner.class)\n public class ImageServiceTest {\n \n-    private static final String DEFAULT_CATALOG_URL = \"https://cloudbreak-imagecatalog.s3.amazonaws.com/freeipa-image-catalog.json\";\n-\n-    private static final String CUSTOM_IMAGE_CATALOG_URL = \"http://localhost/custom-imagecatalog-url\";\n-\n-    private static final String CATALOG_FILE = \"com/sequenceiq/freeipa/service/image/freeipa-catalog-1.json\";\n-\n-    private static final String DEFAULT_OS = \"redhat7\";\n-\n     private static final String DEFAULT_PLATFORM = \"aws\";\n \n     private static final String DEFAULT_REGION = \"eu-west-1\";\n \n-    private static final String LATEST_DATE = \"2019-05-06\";\n-\n-    private static final String LATEST_DATE_NO_INPUT = \"2019-05-07\";\n-\n     private static final String EXISTING_ID = \"ami-09fea90f257c85513\";\n \n-    private static final String NON_EXISTING_ID = \"fake-ami-0a6931aea1415eb0e\";\n+    private static final String FAKE_ID = \"fake-ami-0a6931aea1415eb0e\";\n \n-    private static final String NON_EXISTING_OS = \"Ubuntu7\";\n+    private static final String IMAGE_CATALOG = \"image catalog\";\n \n-    private static final String DEFAULT_VERSION = \"2.20.0-dev.1\";\n+    private static final String DEFAULT_OS = \"redhat7\";\n+\n+    @Mock\n+    private ImageProviderFactory imageProviderFactory;\n \n     @Mock\n-    private ImageCatalogProvider imageCatalogProvider;\n+    private ImageProvider imageProvider;\n \n     @InjectMocks\n     private ImageService underTest;\n \n-    @Spy\n-    private ObjectMapper objectMapper;\n-\n+    @Mock\n     private Image image;\n \n-    @Before\n-    public void setup() throws Exception {\n-        ImageCatalog imageCatalog = setupImageCatalogProvider(CUSTOM_IMAGE_CATALOG_URL, CATALOG_FILE);\n-        image = imageCatalog.getImages().getFreeipaImages().get(0);\n-        ReflectionTestUtils.setField(underTest, ImageService.class, \"defaultCatalogUrl\", DEFAULT_CATALOG_URL, null);\n-        ReflectionTestUtils.setField(underTest, ImageService.class, \"defaultOs\", DEFAULT_OS, null);\n-        ReflectionTestUtils.setField(underTest, ImageService.class, \"freeIpaVersion\", DEFAULT_VERSION, null);\n-    }\n-\n-    @Test\n-    public void testGetImageGivenNoInputWithInvalidAppVersion() {\n-        ReflectionTestUtils.setField(underTest, ImageService.class, \"freeIpaVersion\", \"2.21.0-dcv.1\", null);\n-        ImageSettingsRequest is = setupImageSettingsRequest(null, null, \"centos7\");\n-        Image image = underTest.getImage(is, DEFAULT_REGION, DEFAULT_PLATFORM);\n-        assertEquals(\"centos7\", image.getOs());\n-        assertEquals(\"Assuming the latest image to be selected\", \"2019-05-09\", image.getDate());\n-        assertEquals(\"91851893-8340-411d-afb7-e1b55107fb10\", image.getUuid());\n-    }\n-\n-    @Test\n-    public void testGetImageGivenNoInputWithGbnAppVersion() {\n-        ReflectionTestUtils.setField(underTest, ImageService.class, \"freeIpaVersion\", \"2.21.0-b1\", null);\n-        doTestGetImageGivenNoInput();\n-    }\n-\n-    @Test\n-    public void testGetImageGivenNoInputWithVersionNotInCatalog() {\n-        ReflectionTestUtils.setField(underTest, ImageService.class, \"freeIpaVersion\", \"2.20.0-dev.2\", null);\n-        doTestGetImageGivenNoInput();\n-    }\n-\n-    private void doTestGetImageGivenNoInput() {\n-        ImageSettingsRequest is = setupImageSettingsRequest(null, null, null);\n-        Image image = underTest.getImage(is, DEFAULT_REGION, DEFAULT_PLATFORM);\n-        assertEquals(DEFAULT_OS, image.getOs());\n-        assertEquals(\"Assuming the latest image to be selected\", LATEST_DATE_NO_INPUT, image.getDate());\n-        assertEquals(\"71851893-8340-411d-afb7-e1b55107fb10\", image.getUuid());\n-    }\n-\n-    @Test\n-    public void testGetImageGivenAllInput() {\n-        ImageSettingsRequest is = setupImageSettingsRequest(EXISTING_ID, CUSTOM_IMAGE_CATALOG_URL, DEFAULT_OS);\n-        Image image = underTest.getImage(is, DEFAULT_REGION, DEFAULT_PLATFORM);\n-        assertEquals(DEFAULT_OS, image.getOs());\n-        assertEquals(\"Assuming the latest image to be selected\", LATEST_DATE, image.getDate());\n-        assertEquals(\"61851893-8340-411d-afb7-e1b55107fb10\", image.getUuid());\n-    }\n-\n-    @Test\n-    public void testGetImageGivenAllInputNonExistentOS() {\n-        ImageSettingsRequest is = setupImageSettingsRequest(EXISTING_ID, CUSTOM_IMAGE_CATALOG_URL, NON_EXISTING_OS);\n-        Image image = underTest.getImage(is, DEFAULT_REGION, DEFAULT_PLATFORM);\n-        assertEquals(DEFAULT_OS, image.getOs());\n-        assertEquals(\"Assuming the latest image to be selected\", LATEST_DATE, image.getDate());\n-        assertEquals(\"61851893-8340-411d-afb7-e1b55107fb10\", image.getUuid());\n-    }\n-\n-    @Test\n-    public void testGetImageGivenIdInputFound() {\n-        ImageSettingsRequest is = setupImageSettingsRequest(EXISTING_ID, null, null);\n-        Image image = underTest.getImage(is, DEFAULT_REGION, DEFAULT_PLATFORM);\n-        assertEquals(DEFAULT_OS, image.getOs());\n-        assertEquals(\"Assuming the latest image to be selected\", LATEST_DATE, image.getDate());\n-        assertEquals(\"61851893-8340-411d-afb7-e1b55107fb10\", image.getUuid());\n-    }\n-\n-    @Test\n-    public void testGetImageGivenIdInputNotFound() {\n-        ImageSettingsRequest is = setupImageSettingsRequest(NON_EXISTING_ID, null, null);\n-\n-        Exception exception = assertThrows(RuntimeException.class, () ->\n-                underTest.getImage(is, DEFAULT_REGION, DEFAULT_PLATFORM));\n-        String exceptionMessage = \"Could not find any image with id: 'fake-ami-0a6931aea1415eb0e' in region 'eu-west-1' with OS 'redhat7'.\";\n-        assertEquals(exceptionMessage, exception.getMessage());\n-    }\n-\n     @Test\n     public void tesDetermineImageNameFound() {\n+        when(image.getImageSetsByProvider()).thenReturn(Collections.singletonMap(DEFAULT_PLATFORM, Collections.singletonMap(DEFAULT_REGION, EXISTING_ID)));\n+\n         String imageName = underTest.determineImageName(DEFAULT_PLATFORM, DEFAULT_REGION, image);\n         assertEquals(\"ami-09fea90f257c85513\", imageName);\n     }\n \n     @Test\n     public void tesDetermineImageNameNotFound() {\n+        when(image.getImageSetsByProvider()).thenReturn(Collections.singletonMap(DEFAULT_PLATFORM, Collections.singletonMap(DEFAULT_REGION, EXISTING_ID)));\n+\n         Exception exception = assertThrows(RuntimeException.class, () ->\n                 underTest.determineImageName(DEFAULT_PLATFORM, \"fake-region\", image));\n         String exceptionMessage = \"Virtual machine image couldn't be found in image\";\n         Assert.assertThat(exception.getMessage(), CoreMatchers.containsString(exceptionMessage));\n     }\n \n-    private ImageCatalog setupImageCatalogProvider(String catalogUrl, String catalogFile) throws IOException {\n-        String catalogJson = FileReaderUtils.readFileFromClasspath(catalogFile);\n-        ImageCatalog catalog = objectMapper.readValue(catalogJson, ImageCatalog.class);\n-        when(imageCatalogProvider.getImageCatalog(catalogUrl)).thenReturn(catalog);\n-        when(imageCatalogProvider.getImageCatalog(DEFAULT_CATALOG_URL)).thenReturn(catalog);\n-        return catalog;\n-    }\n+    @Test\n+    public void testGetImageGivenIdInputNotFound() {\n+        ImageSettingsRequest imageSettings = new ImageSettingsRequest();\n+        imageSettings.setCatalog(IMAGE_CATALOG);\n+        imageSettings.setId(FAKE_ID);\n+        imageSettings.setOs(DEFAULT_OS);\n+\n+        when(imageProviderFactory.getImageProvider(IMAGE_CATALOG)).thenReturn(imageProvider);\n+        when(imageProvider.getImage(imageSettings, DEFAULT_REGION, DEFAULT_PLATFORM)).thenReturn(Optional.empty());\n \n-    private ImageSettingsRequest setupImageSettingsRequest(String id, String catalog, String os) {\n-        ImageSettingsRequest is = new ImageSettingsRequest();\n-        is.setId(id);\n-        is.setCatalog(catalog);\n-        is.setOs(os);\n-        return is;\n+        Exception exception = assertThrows(RuntimeException.class, () ->\n+                underTest.getImage(imageSettings, DEFAULT_REGION, DEFAULT_PLATFORM));\n+        String exceptionMessage = \"Could not find any image with id: 'fake-ami-0a6931aea1415eb0e' in region 'eu-west-1' with OS 'redhat7'.\";\n+        assertEquals(exceptionMessage, exception.getMessage());\n     }\n }\n", "next_change": {"commit": "450067bf68066f71fee27a11d231222c6a332d7d", "changed_code": [{"header": "diff --git a/freeipa/src/test/java/com/sequenceiq/freeipa/service/image/ImageServiceTest.java b/freeipa/src/test/java/com/sequenceiq/freeipa/service/image/ImageServiceTest.java\nindex 96b98ec10e..f3b292d03d 100644\n--- a/freeipa/src/test/java/com/sequenceiq/freeipa/service/image/ImageServiceTest.java\n+++ b/freeipa/src/test/java/com/sequenceiq/freeipa/service/image/ImageServiceTest.java\n", "chunk": "@@ -78,4 +96,50 @@ public class ImageServiceTest {\n         String exceptionMessage = \"Could not find any image with id: 'fake-ami-0a6931aea1415eb0e' in region 'eu-west-1' with OS 'redhat7'.\";\n         assertEquals(exceptionMessage, exception.getMessage());\n     }\n+\n+    @Test\n+    public void testImageChange() {\n+        Stack stack = new Stack();\n+        stack.setCloudPlatform(DEFAULT_PLATFORM);\n+        stack.setRegion(DEFAULT_REGION);\n+        ImageSettingsRequest imageRequest = new ImageSettingsRequest();\n+        when(imageProviderFactory.getImageProvider(any())).thenReturn(imageProvider);\n+        when(imageProvider.getImage(imageRequest, stack.getRegion(), stack.getCloudPlatform()))\n+                .thenReturn(Optional.of(new ImageWrapper(image, IMAGE_CATALOG_URL, IMAGE_CATALOG)));\n+        when(image.getImageSetsByProvider()).thenReturn(Collections.singletonMap(DEFAULT_PLATFORM, Collections.singletonMap(DEFAULT_REGION, EXISTING_ID)));\n+        when(imageRepository.getByStack(stack)).thenReturn(new ImageEntity());\n+        when(image.getUuid()).thenReturn(IMAGE_UUID);\n+        when(imageRepository.save(any(ImageEntity.class))).thenAnswer(invocation -> invocation.getArgument(0, ImageEntity.class));\n+\n+        ImageEntity imageEntity = underTest.changeImage(stack, imageRequest);\n+\n+        assertEquals(EXISTING_ID, imageEntity.getImageName());\n+        assertEquals(IMAGE_CATALOG_URL, imageEntity.getImageCatalogUrl());\n+        assertEquals(IMAGE_CATALOG, imageEntity.getImageCatalogName());\n+        assertEquals(IMAGE_UUID, imageEntity.getImageId());\n+    }\n+\n+    @Test\n+    public void testRevert() {\n+        ImageEntity originalImage = new ImageEntity();\n+        originalImage.setImageName(EXISTING_ID);\n+        originalImage.setImageId(IMAGE_UUID);\n+        originalImage.setImageCatalogName(IMAGE_CATALOG);\n+        originalImage.setImageCatalogUrl(IMAGE_CATALOG_URL);\n+        when(auditReader.find(ImageEntity.class, 2L, 3L)).thenReturn(originalImage);\n+        ImageEntity currentImage = new ImageEntity();\n+        currentImage.setId(2L);\n+        when(imageRepository.findById(2L)).thenReturn(Optional.of(currentImage));\n+\n+        underTest.revertImageToRevision(2L, 3L);\n+\n+        ArgumentCaptor<ImageEntity> captor = ArgumentCaptor.forClass(ImageEntity.class);\n+        verify(imageRepository).save(captor.capture());\n+        ImageEntity revertedImage = captor.getValue();\n+        assertEquals(2L, revertedImage.getId());\n+        assertEquals(IMAGE_UUID, revertedImage.getImageId());\n+        assertEquals(IMAGE_CATALOG, revertedImage.getImageCatalogName());\n+        assertEquals(IMAGE_CATALOG_URL, revertedImage.getImageCatalogUrl());\n+        assertEquals(EXISTING_ID, revertedImage.getImageName());\n+    }\n }\n", "next_change": {"commit": "e2d415768ab56aff49e2750fd1fdde76e64874fc", "changed_code": [{"header": "diff --git a/freeipa/src/test/java/com/sequenceiq/freeipa/service/image/ImageServiceTest.java b/freeipa/src/test/java/com/sequenceiq/freeipa/service/image/ImageServiceTest.java\nindex f3b292d03d..ce793d4a3e 100644\n--- a/freeipa/src/test/java/com/sequenceiq/freeipa/service/image/ImageServiceTest.java\n+++ b/freeipa/src/test/java/com/sequenceiq/freeipa/service/image/ImageServiceTest.java\n", "chunk": "@@ -142,4 +156,39 @@ public class ImageServiceTest {\n         assertEquals(IMAGE_CATALOG_URL, revertedImage.getImageCatalogUrl());\n         assertEquals(EXISTING_ID, revertedImage.getImageName());\n     }\n+\n+    @Test\n+    void testGenerateForStack() throws NoSuchFieldException {\n+        ReflectionUtils.setField(ImageService.class.getDeclaredField(\"freeIpaVersion\"), underTest, FREEIPA_VERSION);\n+\n+        Stack stack = new Stack();\n+        stack.setRegion(DEFAULT_REGION);\n+        stack.setCloudPlatform(DEFAULT_PLATFORM);\n+        ImageEntity imageEntity = new ImageEntity();\n+        imageEntity.setImageId(IMAGE_UUID);\n+        imageEntity.setOs(DEFAULT_OS);\n+        imageEntity.setImageCatalogName(IMAGE_CATALOG);\n+        imageEntity.setImageCatalogUrl(IMAGE_CATALOG_URL);\n+        when(imageRepository.getByStack(stack)).thenReturn(imageEntity);\n+\n+        when(imageProviderFactory.getImageProvider(IMAGE_CATALOG)).thenReturn(imageProvider);\n+        Image image = new Image(123L, \"now\", \"desc\", DEFAULT_OS, IMAGE_UUID, Map.of(), \"os\", Map.of());\n+        ImageWrapper imageWrapper = new ImageWrapper(image, IMAGE_CATALOG_URL, IMAGE_CATALOG);\n+        when(imageProvider.getImage(any(), any(), any())).thenReturn(Optional.of(imageWrapper));\n+\n+        ImageCatalog result = underTest.generateImageCatalogForStack(stack);\n+\n+        verify(imageProvider).getImage(imageSettingsRequestCaptor.capture(), eq(DEFAULT_REGION), eq(DEFAULT_PLATFORM));\n+        assertThat(imageSettingsRequestCaptor.getValue())\n+                .returns(IMAGE_CATALOG, ImageSettingsBase::getCatalog)\n+                .returns(IMAGE_UUID, ImageSettingsBase::getId);\n+\n+        assertThat(result.getImages().getFreeipaImages())\n+                .containsExactly(image);\n+        assertThat(result.getVersions().getFreeIpaVersions())\n+                .singleElement()\n+                .returns(List.of(FREEIPA_VERSION), FreeIpaVersions::getVersions)\n+                .returns(List.of(IMAGE_UUID), FreeIpaVersions::getImageIds)\n+                .returns(List.of(IMAGE_UUID), FreeIpaVersions::getDefaults);\n+    }\n }\n", "next_change": {"commit": "3749bd40d0a563b5b1dc500fba95eaaed17f22ae", "changed_code": [{"header": "diff --git a/freeipa/src/test/java/com/sequenceiq/freeipa/service/image/ImageServiceTest.java b/freeipa/src/test/java/com/sequenceiq/freeipa/service/image/ImageServiceTest.java\nindex ce793d4a3e..a59451d925 100644\n--- a/freeipa/src/test/java/com/sequenceiq/freeipa/service/image/ImageServiceTest.java\n+++ b/freeipa/src/test/java/com/sequenceiq/freeipa/service/image/ImageServiceTest.java\n", "chunk": "@@ -185,10 +183,6 @@ public class ImageServiceTest {\n \n         assertThat(result.getImages().getFreeipaImages())\n                 .containsExactly(image);\n-        assertThat(result.getVersions().getFreeIpaVersions())\n-                .singleElement()\n-                .returns(List.of(FREEIPA_VERSION), FreeIpaVersions::getVersions)\n-                .returns(List.of(IMAGE_UUID), FreeIpaVersions::getImageIds)\n-                .returns(List.of(IMAGE_UUID), FreeIpaVersions::getDefaults);\n+        assertThat(result.getVersions()).isNull();\n     }\n }\n", "next_change": {"commit": "6bc943225ff523b9248c9d5ce7bd72b3a3ef4e83", "changed_code": [{"header": "diff --git a/freeipa/src/test/java/com/sequenceiq/freeipa/service/image/ImageServiceTest.java b/freeipa/src/test/java/com/sequenceiq/freeipa/service/image/ImageServiceTest.java\nindex a59451d925..1542b2cd81 100644\n--- a/freeipa/src/test/java/com/sequenceiq/freeipa/service/image/ImageServiceTest.java\n+++ b/freeipa/src/test/java/com/sequenceiq/freeipa/service/image/ImageServiceTest.java\n", "chunk": "@@ -185,4 +230,24 @@ public class ImageServiceTest {\n                 .containsExactly(image);\n         assertThat(result.getVersions()).isNull();\n     }\n+\n+    @Test\n+    void getImagesOfAliveStacksWithNoThresholdShouldCallRepositoryWithCurrentTimestamp() {\n+        when(clock.getCurrentLocalDateTime()).thenReturn(MOCK_NOW);\n+\n+        underTest.getImagesOfAliveStacks(null);\n+\n+        verify(imageRepository).findImagesOfAliveStacks(Timestamp.valueOf(MOCK_NOW).getTime());\n+    }\n+\n+    @Test\n+    void getImagesOfAliveStacksWithThresholdShouldCallRepositoryWithModifiedTimestamp() {\n+        final int thresholdInDays = 180;\n+        final LocalDateTime thresholdTime = MOCK_NOW.minusDays(thresholdInDays);\n+        when(clock.getCurrentLocalDateTime()).thenReturn(MOCK_NOW);\n+\n+        underTest.getImagesOfAliveStacks(thresholdInDays);\n+\n+        verify(imageRepository).findImagesOfAliveStacks(Timestamp.valueOf(thresholdTime).getTime());\n+    }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "45f035557f4a1f127b6023b7420f0a0a9aef6b21", "message": "Merge commit", "committedDate": null}, {"oid": "d38fbaae70d678dbdbff37f3c96bb05415194a93", "committedDate": "2021-04-16 09:58:33 +0200", "message": "CB-12140 Extend image filtering logic to match by the image uuid as well."}, {"oid": "9b05311dae1d17203186a6289eae5a70e6f96275", "committedDate": "2021-04-19 15:08:56 +0200", "message": "CB-11904: Extension of the CB API to support custom image catalogs"}, {"oid": "450067bf68066f71fee27a11d231222c6a332d7d", "committedDate": "2021-06-10 10:44:55 +0200", "message": "CB-12457 Image change flow for FreeIPA"}, {"oid": "e2d415768ab56aff49e2750fd1fdde76e64874fc", "committedDate": "2021-10-19 16:47:05 +0200", "message": "CB-14458 Generate Freeipa image catalog with the currently used image"}, {"oid": "3749bd40d0a563b5b1dc500fba95eaaed17f22ae", "committedDate": "2021-11-23 10:42:03 +0100", "message": "CB-14514 In case of missing FreeIPA versions in the image catalog json, generate a default one based on the advertised images flag and the current FreeIPA svc version. Generate image catalog command should set the advertised flag and skip versions."}, {"oid": "aa727ab4f0f5c1b49d061d5bb9319bf6ed6531c6", "committedDate": "2022-10-13 13:21:24 +0200", "message": "CB-18682 Freeipa upgrade consistently fails with could not prepare statement - connection is closed"}, {"oid": "19318e8ac6ff4b4117aa7ba8cafdf44edb70ea4a", "committedDate": "2022-11-21 17:00:26 +0100", "message": "CB-18840 Expose LDAP agent version on FMS API"}, {"oid": "e57164c19f0c1c3c12dcde6248252904fedaf42f", "committedDate": "2022-12-02 10:20:36 +0100", "message": "CB-19561 - Marketplace image should be chosen if CDP_AZURE_IMAGE_MARKETPLACE_ONLY is granted"}, {"oid": "6bc943225ff523b9248c9d5ce7bd72b3a3ef4e83", "committedDate": "2022-12-07 10:21:03 +0100", "message": "CB-15822 Refactor used image collection"}, {"oid": "c8e350ec7f03ef5b2fd2f0916dc8b9fb40782c6f", "committedDate": "2023-03-13 15:30:22 +0100", "message": "CB-20943 remove the plain text userdata from the database and move it to vault."}, {"oid": "e98145cc2c2dd5eaeca4fc56eba1764c48c6877d", "committedDate": "2023-03-20 20:18:46 +0100", "message": "Revert \"CB-20943 remove the plain text userdata from the database and move it to vault.\""}]}, {"oid": "46ccb46063a3136d41aa10741a46f8fd8a01a366", "url": "https://github.com/hortonworks/cloudbreak/commit/46ccb46063a3136d41aa10741a46f8fd8a01a366", "message": "CB-6282 Version based image choosing", "committedDate": "2020-05-07T13:22:06Z", "type": "forcePushed"}, {"oid": "eefc90318efb4c428601267f57741080bcfef0d8", "url": "https://github.com/hortonworks/cloudbreak/commit/eefc90318efb4c428601267f57741080bcfef0d8", "message": "CB-6282 Version based image choosing", "committedDate": "2020-05-08T09:06:18Z", "type": "commit"}, {"oid": "eefc90318efb4c428601267f57741080bcfef0d8", "url": "https://github.com/hortonworks/cloudbreak/commit/eefc90318efb4c428601267f57741080bcfef0d8", "message": "CB-6282 Version based image choosing", "committedDate": "2020-05-08T09:06:18Z", "type": "forcePushed"}]}