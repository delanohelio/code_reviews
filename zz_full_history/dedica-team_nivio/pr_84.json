{"pr_number": 84, "pr_title": "83 csv import", "pr_author": "bonndan", "pr_createdAt": "2020-01-16T05:41:15Z", "pr_url": "https://github.com/dedica-team/nivio/pull/84", "merge_commit": "3cc759cf5a1486bf95516599fa3dc20a47d41b4f", "timeline": [{"oid": "e21407d4f337c3413caff75182806bbadad0e0a1", "url": "https://github.com/dedica-team/nivio/commit/e21407d4f337c3413caff75182806bbadad0e0a1", "message": "[#83] csv reader in item description factory", "committedDate": "2020-01-15T21:57:51Z", "type": "commit"}, {"oid": "12deadf6825ad7f741ddf614249563d8d1c5aea3", "url": "https://github.com/dedica-team/nivio/commit/12deadf6825ad7f741ddf614249563d8d1c5aea3", "message": "[#83] added csv in input / output graph", "committedDate": "2020-01-15T22:12:27Z", "type": "commit"}, {"oid": "473148991811120943767017200410f8ef739675", "url": "https://github.com/dedica-team/nivio/commit/473148991811120943767017200410f8ef739675", "message": "label to field processor can handle links", "committedDate": "2020-01-16T04:25:50Z", "type": "commit"}, {"oid": "c8799806430f83b669c65d96b951a5db4d2cab6c", "url": "https://github.com/dedica-team/nivio/commit/c8799806430f83b669c65d96b951a5db4d2cab6c", "message": "[#83] added test", "committedDate": "2020-01-16T04:26:24Z", "type": "commit"}, {"oid": "7c4c11968ed4a09a24ee15ff660dfd00c5c87221", "url": "https://github.com/dedica-team/nivio/commit/7c4c11968ed4a09a24ee15ff660dfd00c5c87221", "message": "[#83] integration test and fixes", "committedDate": "2020-01-16T04:54:35Z", "type": "commit"}, {"oid": "fc4aa30f9cf6173ecbb07078acc8c1040c2d545b", "url": "https://github.com/dedica-team/nivio/commit/fc4aa30f9cf6173ecbb07078acc8c1040c2d545b", "message": "[#83] documented csv as input source", "committedDate": "2020-01-16T05:27:13Z", "type": "commit"}, {"oid": "e889de0e97f8ec614b40d782788fc498aaa859f0", "url": "https://github.com/dedica-team/nivio/commit/e889de0e97f8ec614b40d782788fc498aaa859f0", "message": "[#83] updated documentation", "committedDate": "2020-01-16T05:39:16Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTAwNjc5OQ==", "url": "https://github.com/dedica-team/nivio/pull/84#discussion_r369006799", "body": "btw: ItemDescriptionFactory has loads of if-statements without braces. \ud83d\ude43", "bodyText": "btw: ItemDescriptionFactory has loads of if-statements without braces. \ud83d\ude43", "bodyHTML": "<p dir=\"auto\">btw: ItemDescriptionFactory has loads of if-statements without braces. <g-emoji class=\"g-emoji\" alias=\"upside_down_face\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f643.png\">\ud83d\ude43</g-emoji></p>", "author": "jpgoelz", "createdAt": "2020-01-21T13:43:45Z", "path": "src/main/java/de/bonndan/nivio/input/csv/ItemDescriptionFactoryCSV.java", "diffHunk": "@@ -0,0 +1,80 @@\n+package de.bonndan.nivio.input.csv;\n+\n+import com.opencsv.CSVParser;\n+import com.opencsv.CSVParserBuilder;\n+import com.opencsv.CSVReader;\n+import com.opencsv.CSVReaderBuilder;\n+import de.bonndan.nivio.ProcessingException;\n+import de.bonndan.nivio.input.FileFetcher;\n+import de.bonndan.nivio.input.ItemDescriptionFactory;\n+import de.bonndan.nivio.input.LabelToFieldProcessor;\n+import de.bonndan.nivio.input.dto.ItemDescription;\n+import de.bonndan.nivio.input.dto.SourceReference;\n+import org.springframework.stereotype.Service;\n+\n+import java.io.StringReader;\n+import java.net.URL;\n+import java.util.*;\n+\n+@Service\n+public class ItemDescriptionFactoryCSV implements ItemDescriptionFactory {", "originalCommit": "e889de0e97f8ec614b40d782788fc498aaa859f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE1NDYwOA==", "url": "https://github.com/dedica-team/nivio/pull/84#discussion_r369154608", "bodyText": "cannot find any", "author": "bonndan", "createdAt": "2020-01-21T17:58:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTAwNjc5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTIzNTg2MA==", "url": "https://github.com/dedica-team/nivio/pull/84#discussion_r369235860", "bodyText": "Lines 25 through 64...?\nItemDescriptionFactory.java in 83_csv_import", "author": "jpgoelz", "createdAt": "2020-01-21T20:50:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTAwNjc5OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQzMDUxMA==", "url": "https://github.com/dedica-team/nivio/pull/84#discussion_r369430510", "bodyText": "Right. I've been looking into the wrong file.", "author": "bonndan", "createdAt": "2020-01-22T08:46:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTAwNjc5OQ=="}], "type": "inlineReview", "revised_code": {"commit": "5d637ce63a05746487a5cd63bb5ab26b4c4a2297", "changed_code": [{"header": "diff --git a/src/main/java/de/bonndan/nivio/input/csv/ItemDescriptionFactoryCSV.java b/src/main/java/de/bonndan/nivio/input/csv/ItemDescriptionFactoryCSV.java\nindex ab76b10c..010c86fa 100644\n--- a/src/main/java/de/bonndan/nivio/input/csv/ItemDescriptionFactoryCSV.java\n+++ b/src/main/java/de/bonndan/nivio/input/csv/ItemDescriptionFactoryCSV.java\n", "chunk": "@@ -14,7 +14,10 @@ import org.springframework.stereotype.Service;\n \n import java.io.StringReader;\n import java.net.URL;\n-import java.util.*;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n \n @Service\n public class ItemDescriptionFactoryCSV implements ItemDescriptionFactory {\n", "next_change": null}]}, "revised_code_in_main": {"commit": "3cc759cf5a1486bf95516599fa3dc20a47d41b4f", "changed_code": [{"header": "diff --git a/src/main/java/de/bonndan/nivio/input/csv/ItemDescriptionFactoryCSV.java b/src/main/java/de/bonndan/nivio/input/csv/ItemDescriptionFactoryCSV.java\nindex ab76b10c..2e6bb2f5 100644\n--- a/src/main/java/de/bonndan/nivio/input/csv/ItemDescriptionFactoryCSV.java\n+++ b/src/main/java/de/bonndan/nivio/input/csv/ItemDescriptionFactoryCSV.java\n", "chunk": "@@ -14,7 +14,10 @@ import org.springframework.stereotype.Service;\n \n import java.io.StringReader;\n import java.net.URL;\n-import java.util.*;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n \n @Service\n public class ItemDescriptionFactoryCSV implements ItemDescriptionFactory {\n", "next_change": {"commit": "f4daabc4b9402cd4057d9a43d26585d523f70a9e", "changed_code": [{"header": "diff --git a/src/main/java/de/bonndan/nivio/input/csv/ItemDescriptionFactoryCSV.java b/src/main/java/de/bonndan/nivio/input/csv/InputFormatHandlerCSV.java\nsimilarity index 75%\nrename from src/main/java/de/bonndan/nivio/input/csv/ItemDescriptionFactoryCSV.java\nrename to src/main/java/de/bonndan/nivio/input/csv/InputFormatHandlerCSV.java\nindex 2e6bb2f5..5166ef36 100644\n--- a/src/main/java/de/bonndan/nivio/input/csv/ItemDescriptionFactoryCSV.java\n+++ b/src/main/java/de/bonndan/nivio/input/csv/InputFormatHandlerCSV.java\n", "chunk": "@@ -19,13 +24,16 @@ import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n \n+\n @Service\n-public class ItemDescriptionFactoryCSV implements ItemDescriptionFactory {\n+public class InputFormatHandlerCSV implements InputFormatHandler {\n \n+    private static final Logger LOGGER = LoggerFactory.getLogger(InputFormatHandlerCSV.class);\n     public static final String IDENTIFIER_KEY = \"identifier\";\n+\n     private final FileFetcher fileFetcher;\n \n-    public ItemDescriptionFactoryCSV(FileFetcher fileFetcher) {\n+    public InputFormatHandlerCSV(FileFetcher fileFetcher) {\n         this.fileFetcher = fileFetcher;\n     }\n \n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "3cc759cf5a1486bf95516599fa3dc20a47d41b4f", "message": "Merge commit", "committedDate": null}, {"oid": "5da653cabd63e08f5465e87c37b57c4196b96eba", "committedDate": "2020-08-05 23:16:00 +0200", "message": "[#213] icon and color are first class Component fields again, appearance is determine independently from rendering"}, {"oid": "f4daabc4b9402cd4057d9a43d26585d523f70a9e", "committedDate": "2020-09-12 21:00:34 +0200", "message": "[#248] source reference based observers"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTAxMDc1OA==", "url": "https://github.com/dedica-team/nivio/pull/84#discussion_r369010758", "body": "Personally, I would go with `List.of(\"csv\")`, which is also immutable.\r\n\r\nSee [Singleton List Showdown: Collections::singletonList Vs. List::of](https://dzone.com/articles/singleton-list-showdown-collectionssingletonlist-v) (**tl;dr**: \"Both Collections::singletonList and List:of are great choices for creating single-element lists. [...] I recommend going with List:of for its ease of use, readability, and **better-documented immutability**.)", "bodyText": "Personally, I would go with List.of(\"csv\"), which is also immutable.\nSee Singleton List Showdown: Collections::singletonList Vs. List::of (tl;dr: \"Both Collections::singletonList and List:of are great choices for creating single-element lists. [...] I recommend going with List:of for its ease of use, readability, and better-documented immutability.)", "bodyHTML": "<p dir=\"auto\">Personally, I would go with <code>List.of(\"csv\")</code>, which is also immutable.</p>\n<p dir=\"auto\">See <a href=\"https://dzone.com/articles/singleton-list-showdown-collectionssingletonlist-v\" rel=\"nofollow\">Singleton List Showdown: Collections::singletonList Vs. List::of</a> (<strong>tl;dr</strong>: \"Both Collections::singletonList and List:of are great choices for creating single-element lists. [...] I recommend going with List:of for its ease of use, readability, and <strong>better-documented immutability</strong>.)</p>", "author": "jpgoelz", "createdAt": "2020-01-21T13:51:25Z", "path": "src/main/java/de/bonndan/nivio/input/csv/ItemDescriptionFactoryCSV.java", "diffHunk": "@@ -0,0 +1,80 @@\n+package de.bonndan.nivio.input.csv;\n+\n+import com.opencsv.CSVParser;\n+import com.opencsv.CSVParserBuilder;\n+import com.opencsv.CSVReader;\n+import com.opencsv.CSVReaderBuilder;\n+import de.bonndan.nivio.ProcessingException;\n+import de.bonndan.nivio.input.FileFetcher;\n+import de.bonndan.nivio.input.ItemDescriptionFactory;\n+import de.bonndan.nivio.input.LabelToFieldProcessor;\n+import de.bonndan.nivio.input.dto.ItemDescription;\n+import de.bonndan.nivio.input.dto.SourceReference;\n+import org.springframework.stereotype.Service;\n+\n+import java.io.StringReader;\n+import java.net.URL;\n+import java.util.*;\n+\n+@Service\n+public class ItemDescriptionFactoryCSV implements ItemDescriptionFactory {\n+\n+    public static final String IDENTIFIER_KEY = \"identifier\";\n+    private final FileFetcher fileFetcher;\n+\n+    public ItemDescriptionFactoryCSV(FileFetcher fileFetcher) {\n+        this.fileFetcher = fileFetcher;\n+    }\n+\n+    @Override\n+    public List<String> getFormats() {\n+        return Collections.singletonList(\"csv\");", "originalCommit": "e889de0e97f8ec614b40d782788fc498aaa859f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE1NDExNQ==", "url": "https://github.com/dedica-team/nivio/pull/84#discussion_r369154115", "bodyText": "done", "author": "bonndan", "createdAt": "2020-01-21T17:57:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTAxMDc1OA=="}], "type": "inlineReview", "revised_code": {"commit": "5d637ce63a05746487a5cd63bb5ab26b4c4a2297", "changed_code": [{"header": "diff --git a/src/main/java/de/bonndan/nivio/input/csv/ItemDescriptionFactoryCSV.java b/src/main/java/de/bonndan/nivio/input/csv/ItemDescriptionFactoryCSV.java\nindex ab76b10c..010c86fa 100644\n--- a/src/main/java/de/bonndan/nivio/input/csv/ItemDescriptionFactoryCSV.java\n+++ b/src/main/java/de/bonndan/nivio/input/csv/ItemDescriptionFactoryCSV.java\n", "chunk": "@@ -28,7 +31,7 @@ public class ItemDescriptionFactoryCSV implements ItemDescriptionFactory {\n \n     @Override\n     public List<String> getFormats() {\n-        return Collections.singletonList(\"csv\");\n+        return List.of(\"csv\");\n     }\n \n     @Override\n", "next_change": null}]}, "revised_code_in_main": {"commit": "3cc759cf5a1486bf95516599fa3dc20a47d41b4f", "changed_code": [{"header": "diff --git a/src/main/java/de/bonndan/nivio/input/csv/ItemDescriptionFactoryCSV.java b/src/main/java/de/bonndan/nivio/input/csv/ItemDescriptionFactoryCSV.java\nindex ab76b10c..2e6bb2f5 100644\n--- a/src/main/java/de/bonndan/nivio/input/csv/ItemDescriptionFactoryCSV.java\n+++ b/src/main/java/de/bonndan/nivio/input/csv/ItemDescriptionFactoryCSV.java\n", "chunk": "@@ -28,7 +31,7 @@ public class ItemDescriptionFactoryCSV implements ItemDescriptionFactory {\n \n     @Override\n     public List<String> getFormats() {\n-        return Collections.singletonList(\"csv\");\n+        return List.of(\"csv\");\n     }\n \n     @Override\n", "next_change": null}]}, "commits_in_main": [{"oid": "3cc759cf5a1486bf95516599fa3dc20a47d41b4f", "message": "Merge commit", "committedDate": null}, {"oid": "5da653cabd63e08f5465e87c37b57c4196b96eba", "committedDate": "2020-08-05 23:16:00 +0200", "message": "[#213] icon and color are first class Component fields again, appearance is determine independently from rendering"}, {"oid": "f4daabc4b9402cd4057d9a43d26585d523f70a9e", "committedDate": "2020-09-12 21:00:34 +0200", "message": "[#248] source reference based observers"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTAxMTgxOA==", "url": "https://github.com/dedica-team/nivio/pull/84#discussion_r369011818", "body": "Because it is a sentence with a period: **M**apping...", "bodyText": "Because it is a sentence with a period: Mapping...", "bodyHTML": "<p dir=\"auto\">Because it is a sentence with a period: <strong>M</strong>apping...</p>", "author": "jpgoelz", "createdAt": "2020-01-21T13:53:19Z", "path": "src/main/java/de/bonndan/nivio/input/csv/ItemDescriptionFactoryCSV.java", "diffHunk": "@@ -0,0 +1,80 @@\n+package de.bonndan.nivio.input.csv;\n+\n+import com.opencsv.CSVParser;\n+import com.opencsv.CSVParserBuilder;\n+import com.opencsv.CSVReader;\n+import com.opencsv.CSVReaderBuilder;\n+import de.bonndan.nivio.ProcessingException;\n+import de.bonndan.nivio.input.FileFetcher;\n+import de.bonndan.nivio.input.ItemDescriptionFactory;\n+import de.bonndan.nivio.input.LabelToFieldProcessor;\n+import de.bonndan.nivio.input.dto.ItemDescription;\n+import de.bonndan.nivio.input.dto.SourceReference;\n+import org.springframework.stereotype.Service;\n+\n+import java.io.StringReader;\n+import java.net.URL;\n+import java.util.*;\n+\n+@Service\n+public class ItemDescriptionFactoryCSV implements ItemDescriptionFactory {\n+\n+    public static final String IDENTIFIER_KEY = \"identifier\";\n+    private final FileFetcher fileFetcher;\n+\n+    public ItemDescriptionFactoryCSV(FileFetcher fileFetcher) {\n+        this.fileFetcher = fileFetcher;\n+    }\n+\n+    @Override\n+    public List<String> getFormats() {\n+        return Collections.singletonList(\"csv\");\n+    }\n+\n+    @Override\n+    public List<ItemDescription> getDescriptions(SourceReference reference, URL baseUrl) {\n+        List<ItemDescription> itemDescriptions = new ArrayList<>();\n+        String content = fileFetcher.get(reference, baseUrl);\n+        CSVReader reader = getReader(reference, content);\n+\n+        Map<String, Object> mapping = (Map<String, Object>) reference.getProperty(\"mapping\");\n+        if (mapping == null) {\n+            throw new ProcessingException(reference.getLandscapeDescription(), \"mapping must be present in configuration.\");", "originalCommit": "e889de0e97f8ec614b40d782788fc498aaa859f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE1NDQzMA==", "url": "https://github.com/dedica-team/nivio/pull/84#discussion_r369154430", "bodyText": "put quotes around it", "author": "bonndan", "createdAt": "2020-01-21T17:58:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTAxMTgxOA=="}], "type": "inlineReview", "revised_code": {"commit": "5d637ce63a05746487a5cd63bb5ab26b4c4a2297", "changed_code": [{"header": "diff --git a/src/main/java/de/bonndan/nivio/input/csv/ItemDescriptionFactoryCSV.java b/src/main/java/de/bonndan/nivio/input/csv/ItemDescriptionFactoryCSV.java\nindex ab76b10c..010c86fa 100644\n--- a/src/main/java/de/bonndan/nivio/input/csv/ItemDescriptionFactoryCSV.java\n+++ b/src/main/java/de/bonndan/nivio/input/csv/ItemDescriptionFactoryCSV.java\n", "chunk": "@@ -39,7 +42,7 @@ public class ItemDescriptionFactoryCSV implements ItemDescriptionFactory {\n \n         Map<String, Object> mapping = (Map<String, Object>) reference.getProperty(\"mapping\");\n         if (mapping == null) {\n-            throw new ProcessingException(reference.getLandscapeDescription(), \"mapping must be present in configuration.\");\n+            throw new ProcessingException(reference.getLandscapeDescription(), \"'mapping' must be present in configuration.\");\n         }\n         if (!mapping.containsKey(IDENTIFIER_KEY)) {\n             throw new ProcessingException(reference.getLandscapeDescription(), \"'\" + IDENTIFIER_KEY + \"' must be present in configured mapping.\");\n", "next_change": {"commit": "3cc759cf5a1486bf95516599fa3dc20a47d41b4f", "changed_code": [{"header": "diff --git a/src/main/java/de/bonndan/nivio/input/csv/ItemDescriptionFactoryCSV.java b/src/main/java/de/bonndan/nivio/input/csv/ItemDescriptionFactoryCSV.java\nindex 010c86fa..2e6bb2f5 100644\n--- a/src/main/java/de/bonndan/nivio/input/csv/ItemDescriptionFactoryCSV.java\n+++ b/src/main/java/de/bonndan/nivio/input/csv/ItemDescriptionFactoryCSV.java\n", "chunk": "@@ -51,7 +51,7 @@ public class ItemDescriptionFactoryCSV implements ItemDescriptionFactory {\n         reader.iterator().forEachRemaining(strings -> {\n             ItemDescription itemDescription = new ItemDescription();\n             mapping.forEach((key, value) -> {\n-                Integer colNum = (Integer) value;\n+                Integer colNum = Integer.valueOf((String)value);\n \n                 if (IDENTIFIER_KEY.equals(key)) {\n                     itemDescription.setIdentifier(strings[colNum]);\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "3cc759cf5a1486bf95516599fa3dc20a47d41b4f", "changed_code": [{"header": "diff --git a/src/main/java/de/bonndan/nivio/input/csv/ItemDescriptionFactoryCSV.java b/src/main/java/de/bonndan/nivio/input/csv/ItemDescriptionFactoryCSV.java\nindex ab76b10c..2e6bb2f5 100644\n--- a/src/main/java/de/bonndan/nivio/input/csv/ItemDescriptionFactoryCSV.java\n+++ b/src/main/java/de/bonndan/nivio/input/csv/ItemDescriptionFactoryCSV.java\n", "chunk": "@@ -39,7 +42,7 @@ public class ItemDescriptionFactoryCSV implements ItemDescriptionFactory {\n \n         Map<String, Object> mapping = (Map<String, Object>) reference.getProperty(\"mapping\");\n         if (mapping == null) {\n-            throw new ProcessingException(reference.getLandscapeDescription(), \"mapping must be present in configuration.\");\n+            throw new ProcessingException(reference.getLandscapeDescription(), \"'mapping' must be present in configuration.\");\n         }\n         if (!mapping.containsKey(IDENTIFIER_KEY)) {\n             throw new ProcessingException(reference.getLandscapeDescription(), \"'\" + IDENTIFIER_KEY + \"' must be present in configured mapping.\");\n", "next_change": {"commit": "5da653cabd63e08f5465e87c37b57c4196b96eba", "changed_code": [{"header": "diff --git a/src/main/java/de/bonndan/nivio/input/csv/ItemDescriptionFactoryCSV.java b/src/main/java/de/bonndan/nivio/input/csv/ItemDescriptionFactoryCSV.java\nindex 2e6bb2f5..b99b247b 100644\n--- a/src/main/java/de/bonndan/nivio/input/csv/ItemDescriptionFactoryCSV.java\n+++ b/src/main/java/de/bonndan/nivio/input/csv/ItemDescriptionFactoryCSV.java\n", "chunk": "@@ -51,7 +52,15 @@ public class ItemDescriptionFactoryCSV implements ItemDescriptionFactory {\n         reader.iterator().forEachRemaining(strings -> {\n             ItemDescription itemDescription = new ItemDescription();\n             mapping.forEach((key, value) -> {\n-                Integer colNum = Integer.valueOf((String)value);\n+                Integer colNum = 0;\n+                if (value instanceof String) {\n+                    colNum = Integer.valueOf((String)value);\n+                }\n+\n+                if (value instanceof Integer) {\n+                    colNum = (Integer) value;\n+                }\n+\n \n                 if (IDENTIFIER_KEY.equals(key)) {\n                     itemDescription.setIdentifier(strings[colNum]);\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "3cc759cf5a1486bf95516599fa3dc20a47d41b4f", "message": "Merge commit", "committedDate": null}, {"oid": "5da653cabd63e08f5465e87c37b57c4196b96eba", "committedDate": "2020-08-05 23:16:00 +0200", "message": "[#213] icon and color are first class Component fields again, appearance is determine independently from rendering"}, {"oid": "f4daabc4b9402cd4057d9a43d26585d523f70a9e", "committedDate": "2020-09-12 21:00:34 +0200", "message": "[#248] source reference based observers"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTAxNTcyOQ==", "url": "https://github.com/dedica-team/nivio/pull/84#discussion_r369015729", "body": "This class contains if-statements without braces.", "bodyText": "This class contains if-statements without braces.", "bodyHTML": "<p dir=\"auto\">This class contains if-statements without braces.</p>", "author": "jpgoelz", "createdAt": "2020-01-21T14:00:01Z", "path": "src/main/java/de/bonndan/nivio/input/dto/ItemDescription.java", "diffHunk": "@@ -17,6 +17,8 @@\n  */\n public class ItemDescription implements LandscapeItem {", "originalCommit": "e889de0e97f8ec614b40d782788fc498aaa859f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE1NTMyNw==", "url": "https://github.com/dedica-team/nivio/pull/84#discussion_r369155327", "bodyText": "done", "author": "bonndan", "createdAt": "2020-01-21T18:00:30Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTAxNTcyOQ=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "60ba5298aa856003282b40b0086b92fd1416696c", "changed_code": [{"header": "diff --git a/src/main/java/de/bonndan/nivio/input/dto/ItemDescription.java b/src/main/java/de/bonndan/nivio/input/dto/ItemDescription.java\nindex f0d5b7d8..05c3a754 100644\n--- a/src/main/java/de/bonndan/nivio/input/dto/ItemDescription.java\n+++ b/src/main/java/de/bonndan/nivio/input/dto/ItemDescription.java\n", "chunk": "@@ -15,7 +16,7 @@ import java.util.stream.Collectors;\n /**\n  * This is representation of a service in the textual form as described in a source file.\n  */\n-public class ItemDescription implements LandscapeItem {\n+public class ItemDescription implements LandscapeItem, Labeled {\n \n     public static final String LINKS_FIELD = \"links\";\n \n", "next_change": {"commit": "22cf33cc6e8aab51ba81dfc03a83cb562acc2491", "changed_code": [{"header": "diff --git a/src/main/java/de/bonndan/nivio/input/dto/ItemDescription.java b/src/main/java/de/bonndan/nivio/input/dto/ItemDescription.java\nindex 05c3a754..1ed23910 100644\n--- a/src/main/java/de/bonndan/nivio/input/dto/ItemDescription.java\n+++ b/src/main/java/de/bonndan/nivio/input/dto/ItemDescription.java\n", "chunk": "@@ -16,46 +16,24 @@ import java.util.stream.Collectors;\n /**\n  * This is representation of a service in the textual form as described in a source file.\n  */\n-public class ItemDescription implements LandscapeItem, Labeled {\n+public class ItemDescription implements LandscapeItem, Labeled, Linked, Tagged {\n \n     public static final String LINKS_FIELD = \"links\";\n \n     @NotEmpty\n     private String environment;\n \n-    @NotEmpty\n-    private String layer = LandscapeItem.LAYER_APPLICATION;\n-\n-    private String type;\n-\n     @NotEmpty\n     private String identifier;\n \n     @NotEmpty\n     private String name;\n \n-    private String note;\n-\n-    private String shortName;\n-    private String icon;\n-\n-    private String version;\n-    private String software;\n     private String owner;\n     private String description;\n-    private String team;\n     private String contact;\n     private Map<String, URL> links = new HashMap<>();\n     private String group;\n-    private String visibility;\n-    private String[] tags;\n-    private Set<String> networks = new HashSet<>();\n-    private String machine;\n-    private String scale;\n-    private String hostType;\n-\n-    private String costs;\n-    private String capability;\n \n     @JsonDeserialize(contentAs = StatusDescription.class)\n     private Set<StatusItem> statuses = new HashSet<>();\n", "next_change": {"commit": "959f4c5ee7d1dc2f2e1fb66ad43902f1d1d6a5b5", "changed_code": [{"header": "diff --git a/src/main/java/de/bonndan/nivio/input/dto/ItemDescription.java b/src/main/java/de/bonndan/nivio/input/dto/ItemDescription.java\nindex 1ed23910..6b18c56a 100644\n--- a/src/main/java/de/bonndan/nivio/input/dto/ItemDescription.java\n+++ b/src/main/java/de/bonndan/nivio/input/dto/ItemDescription.java\n", "chunk": "@@ -36,7 +36,7 @@ public class ItemDescription implements LandscapeItem, Labeled, Linked, Tagged {\n     private String group;\n \n     @JsonDeserialize(contentAs = StatusDescription.class)\n-    private Set<StatusItem> statuses = new HashSet<>();\n+    private Set<StatusValue> statuses = new HashSet<>();\n \n     @JsonDeserialize(contentAs = InterfaceDescription.class)\n     private Set<InterfaceItem> interfaces = new HashSet<>();\n", "next_change": {"commit": "5418595eabf7be44b041f2a8dabfa077bcaf98d8", "changed_code": [{"header": "diff --git a/src/main/java/de/bonndan/nivio/input/dto/ItemDescription.java b/src/main/java/de/bonndan/nivio/input/dto/ItemDescription.java\nindex 6b18c56a..569a61d6 100644\n--- a/src/main/java/de/bonndan/nivio/input/dto/ItemDescription.java\n+++ b/src/main/java/de/bonndan/nivio/input/dto/ItemDescription.java\n", "chunk": "@@ -35,9 +35,6 @@ public class ItemDescription implements LandscapeItem, Labeled, Linked, Tagged {\n     private Map<String, URL> links = new HashMap<>();\n     private String group;\n \n-    @JsonDeserialize(contentAs = StatusDescription.class)\n-    private Set<StatusValue> statuses = new HashSet<>();\n-\n     @JsonDeserialize(contentAs = InterfaceDescription.class)\n     private Set<InterfaceItem> interfaces = new HashSet<>();\n \n", "next_change": {"commit": "94e2c6b1e84c5ff0a03644cd35a8654401defce8", "changed_code": [{"header": "diff --git a/src/main/java/de/bonndan/nivio/input/dto/ItemDescription.java b/src/main/java/de/bonndan/nivio/input/dto/ItemDescription.java\nindex 569a61d6..cbe4e015 100644\n--- a/src/main/java/de/bonndan/nivio/input/dto/ItemDescription.java\n+++ b/src/main/java/de/bonndan/nivio/input/dto/ItemDescription.java\n", "chunk": "@@ -39,11 +38,9 @@ public class ItemDescription implements LandscapeItem, Labeled, Linked, Tagged {\n     private Set<InterfaceItem> interfaces = new HashSet<>();\n \n     @JsonDeserialize(contentAs = RelationDescription.class)\n-    private Set<RelationItem<String>> relations = new HashSet<>();\n-\n-    private Lifecycle lifecycle;\n+    private final Set<RelationItem<String>> relations = new HashSet<>();\n \n-    private Map<String, String> labels = new HashMap<>();\n+    private final Map<String, String> labels = new HashMap<>();\n \n     private List<String> providedBy = new ArrayList<>();\n \n", "next_change": {"commit": "5da653cabd63e08f5465e87c37b57c4196b96eba", "changed_code": [{"header": "diff --git a/src/main/java/de/bonndan/nivio/input/dto/ItemDescription.java b/src/main/java/de/bonndan/nivio/input/dto/ItemDescription.java\nindex cbe4e015..90eba8a7 100644\n--- a/src/main/java/de/bonndan/nivio/input/dto/ItemDescription.java\n+++ b/src/main/java/de/bonndan/nivio/input/dto/ItemDescription.java\n", "chunk": "@@ -43,6 +42,8 @@ public class ItemDescription implements LandscapeItem, Labeled, Linked, Tagged {\n     private final Map<String, String> labels = new HashMap<>();\n \n     private List<String> providedBy = new ArrayList<>();\n+    private String icon;\n+    private String color;\n \n     public ItemDescription() {\n     }\n", "next_change": {"commit": "07d26e46731116767396fee33211ce2f4b1fdb05", "changed_code": [{"header": "diff --git a/src/main/java/de/bonndan/nivio/input/dto/ItemDescription.java b/src/main/java/de/bonndan/nivio/input/dto/ItemDescription.java\nindex 90eba8a7..9dfc4ce2 100644\n--- a/src/main/java/de/bonndan/nivio/input/dto/ItemDescription.java\n+++ b/src/main/java/de/bonndan/nivio/input/dto/ItemDescription.java\n", "chunk": "@@ -18,29 +18,22 @@ import java.util.*;\n  */\n public class ItemDescription implements LandscapeItem, Labeled, Linked, Tagged {\n \n+    private final Map<String, Link> links = new HashMap<>();\n+    @JsonDeserialize(contentAs = RelationDescription.class)\n+    private final Set<RelationItem<String>> relations = new HashSet<>();\n+    private final Map<String, String> labels = new HashMap<>();\n     @NotEmpty\n     private String environment;\n-\n     @NotEmpty\n     private String identifier;\n-\n     @NotEmpty\n     private String name;\n-\n     private String owner;\n     private String description;\n     private String contact;\n-    private final Map<String, Link> links = new HashMap<>();\n     private String group;\n-\n     @JsonDeserialize(contentAs = InterfaceDescription.class)\n     private Set<InterfaceItem> interfaces = new HashSet<>();\n-\n-    @JsonDeserialize(contentAs = RelationDescription.class)\n-    private final Set<RelationItem<String>> relations = new HashSet<>();\n-\n-    private final Map<String, String> labels = new HashMap<>();\n-\n     private List<String> providedBy = new ArrayList<>();\n     private String icon;\n     private String color;\n", "next_change": {"commit": "afac05bc7fe99058c8ae7f65595771cf179db966", "changed_code": [{"header": "diff --git a/src/main/java/de/bonndan/nivio/input/dto/ItemDescription.java b/src/main/java/de/bonndan/nivio/input/dto/ItemDescription.java\nindex 9dfc4ce2..6b89fa0a 100644\n--- a/src/main/java/de/bonndan/nivio/input/dto/ItemDescription.java\n+++ b/src/main/java/de/bonndan/nivio/input/dto/ItemDescription.java\n", "chunk": "@@ -33,7 +33,7 @@ public class ItemDescription implements LandscapeItem, Labeled, Linked, Tagged {\n     private String contact;\n     private String group;\n     @JsonDeserialize(contentAs = InterfaceDescription.class)\n-    private Set<InterfaceItem> interfaces = new HashSet<>();\n+    private Set<InterfaceDescription> interfaces = new HashSet<>();\n     private List<String> providedBy = new ArrayList<>();\n     private String icon;\n     private String color;\n", "next_change": {"commit": "375894a43b5a0946321bc9ddaf2d731ac96ab8af", "changed_code": [{"header": "diff --git a/src/main/java/de/bonndan/nivio/input/dto/ItemDescription.java b/src/main/java/de/bonndan/nivio/input/dto/ItemDescription.java\nindex 6b89fa0a..19a20cd5 100644\n--- a/src/main/java/de/bonndan/nivio/input/dto/ItemDescription.java\n+++ b/src/main/java/de/bonndan/nivio/input/dto/ItemDescription.java\n", "chunk": "@@ -38,6 +37,11 @@ public class ItemDescription implements Labeled, Linked, Tagged {\n     private String icon;\n     private String color;\n \n+    /**\n+     * technical address, URI\n+     */\n+    private String address;\n+\n     public ItemDescription() {\n     }\n \n", "next_change": {"commit": "a0dde3ade220174fe9698cad7df3706e33cf9cbb", "changed_code": [{"header": "diff --git a/src/main/java/de/bonndan/nivio/input/dto/ItemDescription.java b/src/main/java/de/bonndan/nivio/input/dto/ItemDescription.java\nindex 19a20cd5..3bb9c084 100644\n--- a/src/main/java/de/bonndan/nivio/input/dto/ItemDescription.java\n+++ b/src/main/java/de/bonndan/nivio/input/dto/ItemDescription.java\n", "chunk": "@@ -19,27 +21,54 @@ import java.util.*;\n public class ItemDescription implements ComponentDescription, Labeled, Linked, Tagged {\n \n     private final Map<String, Link> links = new HashMap<>();\n+\n+    @Schema(description = \"Relations to other landscape items.\")\n     @JsonDeserialize(contentAs = RelationDescription.class)\n     private final Set<RelationDescription> relations = new HashSet<>();\n+\n+    @Schema(description = \"Key-value pair labels for an item.\")\n     private final Map<String, String> labels = new HashMap<>();\n+\n+    @Schema(hidden = true)\n     @NotEmpty\n     private String environment;\n+\n+    @Schema(required = true,\n+            description = \"Immutable unique identifier (maybe use an URN). Primary means to identify items in searches.\",\n+            pattern = Item.IDENTIFIER_VALIDATION)\n     @NotEmpty\n     private String identifier;\n+\n+    @Schema(description = \"A human readable name/title. The name is considered when items are searched\", example = \"my beautiful service\")\n     private String name;\n+\n+    @Schema(description = \"The business owner of the item. Preferably use an email address.\", example = \"johnson@acme.com\")\n     private String owner;\n+\n+    @Schema(description = \"A brief description\")\n     private String description;\n+\n+    @Schema(description = \"The primary way to contact a responsible person or team . Preferably use an email address.\", example = \"johnson@acme.com\")\n     private String contact;\n+\n+    @Schema(description = \"The identifier of the group this item belongs in. Every requires a group internally, so if nothing is given, the value is set to '\" + Group.COMMON + \"'\",\n+            example = \"shipping\")\n     private String group;\n+\n+    @Schema(description = \"A collection of low level interfaces. Can be used to describe Http API endpoints for instance.\")\n     @JsonDeserialize(contentAs = InterfaceDescription.class)\n     private Set<InterfaceDescription> interfaces = new HashSet<>();\n+\n+    @Schema(description = \"A collection of identifiers which are providers for this item (i.e. hard dependencies that are required). This is a convenience fields to build relations.\", example = \"shipping-mysqldb\")\n     private List<String> providedBy = new ArrayList<>();\n+\n+    @Schema(description = \"An icon name or url to set the displayed map icon. The default icon set is https://materialdesignicons.com/ and all names can be used (aliases do not work).\")\n     private String icon;\n+\n+    @Schema(description = \"Overrides the group color. Use a HTML hex color code without leading hash.\", example = \"4400FF\")\n     private String color;\n \n-    /**\n-     * technical address, URI\n-     */\n+    @Schema(description = \"The technical address of the item (should be an URI). Taken into account when matching relation endpoints.\")\n     private String address;\n \n     public ItemDescription() {\n", "next_change": {"commit": "24b15baf470072e9d12fa43d18eed9f6e0eb4fcc", "changed_code": [{"header": "diff --git a/src/main/java/de/bonndan/nivio/input/dto/ItemDescription.java b/src/main/java/de/bonndan/nivio/input/dto/ItemDescription.java\nindex 3bb9c084..65890638 100644\n--- a/src/main/java/de/bonndan/nivio/input/dto/ItemDescription.java\n+++ b/src/main/java/de/bonndan/nivio/input/dto/ItemDescription.java\n", "chunk": "@@ -39,33 +39,33 @@ public class ItemDescription implements ComponentDescription, Labeled, Linked, T\n     @NotEmpty\n     private String identifier;\n \n-    @Schema(description = \"A human readable name/title. The name is considered when items are searched\", example = \"my beautiful service\")\n+    @Schema(description = \"A human readable name/title. The name is considered when items are searched.\", example = \"my beautiful service\")\n     private String name;\n \n     @Schema(description = \"The business owner of the item. Preferably use an email address.\", example = \"johnson@acme.com\")\n     private String owner;\n \n-    @Schema(description = \"A brief description\")\n+    @Schema(description = \"A brief description.\")\n     private String description;\n \n-    @Schema(description = \"The primary way to contact a responsible person or team . Preferably use an email address.\", example = \"johnson@acme.com\")\n+    @Schema(description = \"The primary way to contact a responsible person or team. Preferably use an email address.\", example = \"johnson@acme.com\")\n     private String contact;\n \n-    @Schema(description = \"The identifier of the group this item belongs in. Every requires a group internally, so if nothing is given, the value is set to '\" + Group.COMMON + \"'\",\n+    @Schema(description = \"The identifier of the group this item belongs in. Every item requires to be member of a group internally, so if nothing is given, the value is set to \" + Group.COMMON + \".\",\n             example = \"shipping\")\n     private String group;\n \n-    @Schema(description = \"A collection of low level interfaces. Can be used to describe Http API endpoints for instance.\")\n+    @Schema(description = \"A collection of low level interfaces. Can be used to describe HTTP API endpoints for instance.\")\n     @JsonDeserialize(contentAs = InterfaceDescription.class)\n     private Set<InterfaceDescription> interfaces = new HashSet<>();\n \n-    @Schema(description = \"A collection of identifiers which are providers for this item (i.e. hard dependencies that are required). This is a convenience fields to build relations.\", example = \"shipping-mysqldb\")\n+    @Schema(description = \"A collection of identifiers which are providers for this item (i.e. hard dependencies that are required). This is a convenience field to build relations.\", example = \"shipping-mysqldb\")\n     private List<String> providedBy = new ArrayList<>();\n \n-    @Schema(description = \"An icon name or url to set the displayed map icon. The default icon set is https://materialdesignicons.com/ and all names can be used (aliases do not work).\")\n+    @Schema(description = \"An icon name or URL to set the displayed map icon. The default icon set is https://materialdesignicons.com/ and all names can be used (aliases do not work).\")\n     private String icon;\n \n-    @Schema(description = \"Overrides the group color. Use a HTML hex color code without leading hash.\", example = \"4400FF\")\n+    @Schema(description = \"Overrides the group color. Use an HTML hex color code without the leading hash.\", example = \"4400FF\")\n     private String color;\n \n     @Schema(description = \"The technical address of the item (should be an URI). Taken into account when matching relation endpoints.\")\n", "next_change": {"commit": "8cdf86e81ed733fd382d83a4ebb0d2afff5a80f5", "changed_code": [{"header": "diff --git a/src/main/java/de/bonndan/nivio/input/dto/ItemDescription.java b/src/main/java/de/bonndan/nivio/input/dto/ItemDescription.java\nindex 65890638..87f58d47 100644\n--- a/src/main/java/de/bonndan/nivio/input/dto/ItemDescription.java\n+++ b/src/main/java/de/bonndan/nivio/input/dto/ItemDescription.java\n", "chunk": "@@ -39,33 +39,33 @@ public class ItemDescription implements ComponentDescription, Labeled, Linked, T\n     @NotEmpty\n     private String identifier;\n \n-    @Schema(description = \"A human readable name/title. The name is considered when items are searched.\", example = \"my beautiful service\")\n+    @Schema(description = \"A human readable name/title. The name is considered when items are searched\", example = \"my beautiful service\")\n     private String name;\n \n     @Schema(description = \"The business owner of the item. Preferably use an email address.\", example = \"johnson@acme.com\")\n     private String owner;\n \n-    @Schema(description = \"A brief description.\")\n+    @Schema(description = \"A brief description\")\n     private String description;\n \n-    @Schema(description = \"The primary way to contact a responsible person or team. Preferably use an email address.\", example = \"johnson@acme.com\")\n+    @Schema(description = \"The primary way to contact a responsible person or team . Preferably use an email address.\", example = \"johnson@acme.com\")\n     private String contact;\n \n-    @Schema(description = \"The identifier of the group this item belongs in. Every item requires to be member of a group internally, so if nothing is given, the value is set to \" + Group.COMMON + \".\",\n+    @Schema(description = \"The identifier of the group this item belongs in. Every item requires to be member a group internally, so if nothing is given, the value is set to \" + Group.COMMON,\n             example = \"shipping\")\n     private String group;\n \n-    @Schema(description = \"A collection of low level interfaces. Can be used to describe HTTP API endpoints for instance.\")\n+    @Schema(description = \"A collection of low level interfaces. Can be used to describe Http API endpoints for instance.\")\n     @JsonDeserialize(contentAs = InterfaceDescription.class)\n     private Set<InterfaceDescription> interfaces = new HashSet<>();\n \n-    @Schema(description = \"A collection of identifiers which are providers for this item (i.e. hard dependencies that are required). This is a convenience field to build relations.\", example = \"shipping-mysqldb\")\n+    @Schema(description = \"A collection of identifiers which are providers for this item (i.e. hard dependencies that are required). This is a convenience fields to build relations.\", example = \"shipping-mysqldb\")\n     private List<String> providedBy = new ArrayList<>();\n \n-    @Schema(description = \"An icon name or URL to set the displayed map icon. The default icon set is https://materialdesignicons.com/ and all names can be used (aliases do not work).\")\n+    @Schema(description = \"An icon name or url to set the displayed map icon. The default icon set is https://materialdesignicons.com/ and all names can be used (aliases do not work).\")\n     private String icon;\n \n-    @Schema(description = \"Overrides the group color. Use an HTML hex color code without the leading hash.\", example = \"4400FF\")\n+    @Schema(description = \"Overrides the group color. Use a HTML hex color code without leading hash.\", example = \"4400FF\")\n     private String color;\n \n     @Schema(description = \"The technical address of the item (should be an URI). Taken into account when matching relation endpoints.\")\n", "next_change": {"commit": "737d7c203b1632978deedc0e27fc649e6a6971eb", "changed_code": [{"header": "diff --git a/src/main/java/de/bonndan/nivio/input/dto/ItemDescription.java b/src/main/java/de/bonndan/nivio/input/dto/ItemDescription.java\nindex 87f58d47..57e253bd 100644\n--- a/src/main/java/de/bonndan/nivio/input/dto/ItemDescription.java\n+++ b/src/main/java/de/bonndan/nivio/input/dto/ItemDescription.java\n", "chunk": "@@ -39,33 +39,33 @@ public class ItemDescription implements ComponentDescription, Labeled, Linked, T\n     @NotEmpty\n     private String identifier;\n \n-    @Schema(description = \"A human readable name/title. The name is considered when items are searched\", example = \"my beautiful service\")\n+    @Schema(description = \"A human readable name/title. The name is considered when items are searched.\", example = \"my beautiful service\")\n     private String name;\n \n     @Schema(description = \"The business owner of the item. Preferably use an email address.\", example = \"johnson@acme.com\")\n     private String owner;\n \n-    @Schema(description = \"A brief description\")\n+    @Schema(description = \"A brief description.\")\n     private String description;\n \n-    @Schema(description = \"The primary way to contact a responsible person or team . Preferably use an email address.\", example = \"johnson@acme.com\")\n+    @Schema(description = \"The primary way to contact a responsible person or team. Preferably use an email address.\", example = \"johnson@acme.com\")\n     private String contact;\n \n-    @Schema(description = \"The identifier of the group this item belongs in. Every item requires to be member a group internally, so if nothing is given, the value is set to \" + Group.COMMON,\n+    @Schema(description = \"The identifier of the group this item belongs in. Every item requires to be member of a group internally, so if nothing is given, the value is set to \" + Group.COMMON + \".\",\n             example = \"shipping\")\n     private String group;\n \n-    @Schema(description = \"A collection of low level interfaces. Can be used to describe Http API endpoints for instance.\")\n+    @Schema(description = \"A collection of low level interfaces. Can be used to describe HTTP API endpoints for instance.\")\n     @JsonDeserialize(contentAs = InterfaceDescription.class)\n     private Set<InterfaceDescription> interfaces = new HashSet<>();\n \n-    @Schema(description = \"A collection of identifiers which are providers for this item (i.e. hard dependencies that are required). This is a convenience fields to build relations.\", example = \"shipping-mysqldb\")\n+    @Schema(description = \"A collection of identifiers which are providers for this item (i.e. hard dependencies that are required). This is a convenience field to build relations.\", example = \"shipping-mysqldb\")\n     private List<String> providedBy = new ArrayList<>();\n \n-    @Schema(description = \"An icon name or url to set the displayed map icon. The default icon set is https://materialdesignicons.com/ and all names can be used (aliases do not work).\")\n+    @Schema(description = \"An icon name or URL to set the displayed map icon. The default icon set is https://materialdesignicons.com/ and all names can be used (aliases do not work).\")\n     private String icon;\n \n-    @Schema(description = \"Overrides the group color. Use a HTML hex color code without leading hash.\", example = \"4400FF\")\n+    @Schema(description = \"Overrides the group color. Use an HTML hex color code without the leading hash.\", example = \"4400FF\")\n     private String color;\n \n     @Schema(description = \"The technical address of the item (should be an URI). Taken into account when matching relation endpoints.\")\n", "next_change": {"commit": "ec3422f15f2ed192d34cfb617516aa27ea2cbc26", "changed_code": [{"header": "diff --git a/src/main/java/de/bonndan/nivio/input/dto/ItemDescription.java b/src/main/java/de/bonndan/nivio/input/dto/ItemDescription.java\nindex 57e253bd..8984b9fa 100644\n--- a/src/main/java/de/bonndan/nivio/input/dto/ItemDescription.java\n+++ b/src/main/java/de/bonndan/nivio/input/dto/ItemDescription.java\n", "chunk": "@@ -71,6 +70,9 @@ public class ItemDescription implements ComponentDescription, Labeled, Linked, T\n     @Schema(description = \"The technical address of the item (should be an URI). Taken into account when matching relation endpoints.\")\n     private String address;\n \n+    @Schema(description = \"The type of the item. A string describing its nature. If no icon is set, the type determines the displayed icon.\", example = \"service|database|volume\")\n+    private String type;\n+\n     public ItemDescription() {\n     }\n \n", "next_change": {"commit": "b02a7881b77721d80fcc5f3d8b2b16ac04fa9cd0", "changed_code": [{"header": "diff --git a/src/main/java/de/bonndan/nivio/input/dto/ItemDescription.java b/src/main/java/de/bonndan/nivio/input/dto/ItemDescription.java\nindex 8984b9fa..80ae93b1 100644\n--- a/src/main/java/de/bonndan/nivio/input/dto/ItemDescription.java\n+++ b/src/main/java/de/bonndan/nivio/input/dto/ItemDescription.java\n", "chunk": "@@ -77,7 +77,7 @@ public class ItemDescription implements ComponentDescription, Labeled, Linked, T\n     }\n \n     public ItemDescription(String identifier) {\n-        this.identifier = identifier;\n+        this.identifier = IdentifierValidation.getValidIdentifier(identifier);\n     }\n \n     public ItemDescription(FullyQualifiedIdentifier fqi) {\n", "next_change": {"commit": "52defeb13af5518a10f5f7cc61c99f1f34e95ee3", "changed_code": [{"header": "diff --git a/src/main/java/de/bonndan/nivio/input/dto/ItemDescription.java b/src/main/java/de/bonndan/nivio/input/dto/ItemDescription.java\nindex 80ae93b1..494c9f12 100644\n--- a/src/main/java/de/bonndan/nivio/input/dto/ItemDescription.java\n+++ b/src/main/java/de/bonndan/nivio/input/dto/ItemDescription.java\n", "chunk": "@@ -77,7 +80,7 @@ public class ItemDescription implements ComponentDescription, Labeled, Linked, T\n     }\n \n     public ItemDescription(String identifier) {\n-        this.identifier = IdentifierValidation.getValidIdentifier(identifier);\n+        this.identifier = identifier;\n     }\n \n     public ItemDescription(FullyQualifiedIdentifier fqi) {\n", "next_change": {"commit": "7d4e584ba56b8b49f7760e37b4ea72f4963a71e5", "changed_code": [{"header": "diff --git a/src/main/java/de/bonndan/nivio/input/dto/ItemDescription.java b/src/main/java/de/bonndan/nivio/input/dto/ItemDescription.java\nindex 494c9f12..c2bdbf06 100644\n--- a/src/main/java/de/bonndan/nivio/input/dto/ItemDescription.java\n+++ b/src/main/java/de/bonndan/nivio/input/dto/ItemDescription.java\n", "chunk": "@@ -80,7 +80,7 @@ public class ItemDescription implements ComponentDescription, Labeled, Linked, T\n     }\n \n     public ItemDescription(String identifier) {\n-        this.identifier = identifier;\n+        this.identifier = IdentifierValidation.getValidIdentifier(identifier);\n     }\n \n     public ItemDescription(FullyQualifiedIdentifier fqi) {\n", "next_change": {"commit": "a0fba55ecc3708631c38ed5e1aa670836ba597fd", "changed_code": [{"header": "diff --git a/src/main/java/de/bonndan/nivio/input/dto/ItemDescription.java b/src/main/java/de/bonndan/nivio/input/dto/ItemDescription.java\nindex c2bdbf06..57d49e7f 100644\n--- a/src/main/java/de/bonndan/nivio/input/dto/ItemDescription.java\n+++ b/src/main/java/de/bonndan/nivio/input/dto/ItemDescription.java\n", "chunk": "@@ -80,7 +77,7 @@ public class ItemDescription implements ComponentDescription, Labeled, Linked, T\n     }\n \n     public ItemDescription(String identifier) {\n-        this.identifier = IdentifierValidation.getValidIdentifier(identifier);\n+        this.identifier = identifier;\n     }\n \n     public ItemDescription(FullyQualifiedIdentifier fqi) {\n", "next_change": {"commit": "9057bb7647ac87558fdd7435d615aad915d81a26", "changed_code": [{"header": "diff --git a/src/main/java/de/bonndan/nivio/input/dto/ItemDescription.java b/src/main/java/de/bonndan/nivio/input/dto/ItemDescription.java\nindex 57d49e7f..b8459df5 100644\n--- a/src/main/java/de/bonndan/nivio/input/dto/ItemDescription.java\n+++ b/src/main/java/de/bonndan/nivio/input/dto/ItemDescription.java\n", "chunk": "@@ -77,7 +79,7 @@ public class ItemDescription implements ComponentDescription, Labeled, Linked, T\n     }\n \n     public ItemDescription(String identifier) {\n-        this.identifier = identifier;\n+        this.identifier = IdentifierValidation.getValidIdentifier(identifier);\n     }\n \n     public ItemDescription(FullyQualifiedIdentifier fqi) {\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "3cc759cf5a1486bf95516599fa3dc20a47d41b4f", "message": "Merge commit", "committedDate": null}, {"oid": "60ba5298aa856003282b40b0086b92fd1416696c", "committedDate": "2020-03-01 16:12:19 +0100", "message": "[#95] rendering fill or icon"}, {"oid": "22cf33cc6e8aab51ba81dfc03a83cb562acc2491", "committedDate": "2020-03-14 10:34:32 +0100", "message": "[#114] using labels for uncommon fields"}, {"oid": "959f4c5ee7d1dc2f2e1fb66ad43902f1d1d6a5b5", "committedDate": "2020-04-02 21:33:40 +0200", "message": "refactoring wip"}, {"oid": "5418595eabf7be44b041f2a8dabfa077bcaf98d8", "committedDate": "2020-04-09 07:36:51 +0200", "message": "[#114] [#12] refactored status, introduced basic assessment"}, {"oid": "b2c63680662b8e4d437bb443e74496da715ccaf8", "committedDate": "2020-04-09 11:47:49 +0200", "message": "[#114] test fixes"}, {"oid": "07cb39b03d1a8cc4dc7952174343b98153648eb0", "committedDate": "2020-05-01 21:43:33 +0200", "message": "[#114] refactored FullyQualifiedIdentifier: extracted class ItemMatcher for searching purposes"}, {"oid": "04e4237254167ad5edaeda215f2c4fffd5a007c8", "committedDate": "2020-06-06 10:29:29 +0200", "message": "[#146] added explanations to labels, made label enums lowercase for consistency"}, {"oid": "94e2c6b1e84c5ff0a03644cd35a8654401defce8", "committedDate": "2020-06-08 22:22:03 +0200", "message": "[#145] lifecycle as label"}, {"oid": "5420653e8bafe8c760e7c70f1ec382cc3e423fd9", "committedDate": "2020-07-02 09:12:23 +0200", "message": "[#167] removed hateoas lib (#168)"}, {"oid": "248b4e1cdc016b320ebfd900903ed3f23f9ee534", "committedDate": "2020-07-06 23:39:03 +0200", "message": "[#151] code cleanup"}, {"oid": "5da653cabd63e08f5465e87c37b57c4196b96eba", "committedDate": "2020-08-05 23:16:00 +0200", "message": "[#213] icon and color are first class Component fields again, appearance is determine independently from rendering"}, {"oid": "07d26e46731116767396fee33211ce2f4b1fdb05", "committedDate": "2020-09-06 18:50:22 +0200", "message": "make ReportGenerator more dynamic"}, {"oid": "afac05bc7fe99058c8ae7f65595771cf179db966", "committedDate": "2020-10-10 20:19:16 +0200", "message": "WIP: removing Interfaces from Description objects"}, {"oid": "187b77bd61650b28e820c5e46b9dd8ffce0bb0df", "committedDate": "2020-12-14 12:07:18 +0100", "message": "[#97] external links resolved earlier, now contribute to input DTOs"}, {"oid": "402c5504ee649c32bf27f209db5ff526911144da", "committedDate": "2020-12-19 14:17:56 +0100", "message": "[#97] name,description can be null in ComponentDescription"}, {"oid": "2536e8924030ea16c658f070b14bdf69da34a955", "committedDate": "2020-12-21 14:10:57 +0100", "message": "changed wording: statuses -> status"}, {"oid": "e8165a401f1e509b0297546525984cc0ed589f09", "committedDate": "2020-12-30 21:18:41 +0100", "message": "[#164] added k8s example entry"}, {"oid": "fda1a68999637abdf86a9cb1a5f7c239ff0a5e75", "committedDate": "2021-01-04 17:02:54 +0100", "message": "Merge branch 'develop' into gitlab_link_resolver"}, {"oid": "375894a43b5a0946321bc9ddaf2d731ac96ab8af", "committedDate": "2021-01-23 07:30:52 +0100", "message": "[#355] introduced item \"address\""}, {"oid": "a0dde3ade220174fe9698cad7df3706e33cf9cbb", "committedDate": "2021-03-12 06:49:28 +0100", "message": "[#473] improved docs"}, {"oid": "17d59e1e9d67c39024764e75af7c51d2b3eb96fb", "committedDate": "2021-03-12 17:39:52 +0100", "message": "[#473] improved rst models to use tables"}, {"oid": "d0a4d9f795977ea5da06a8eced8e991c9fead727", "committedDate": "2021-03-12 20:10:34 +0100", "message": "[#473] configured primitive types"}, {"oid": "24b15baf470072e9d12fa43d18eed9f6e0eb4fcc", "committedDate": "2021-04-13 01:25:28 +0200", "message": "Proofread and update DTO/schema"}, {"oid": "8cdf86e81ed733fd382d83a4ebb0d2afff5a80f5", "committedDate": "2021-04-26 19:57:08 +0200", "message": "[#528] updated RelationEndpointResolver"}, {"oid": "737d7c203b1632978deedc0e27fc649e6a6971eb", "committedDate": "2021-05-12 12:17:08 +0200", "message": "Merge branch 'develop' into 286_pet_clinic"}, {"oid": "53667667ed91a45a6734dc9267f0b4061b4b10d8", "committedDate": "2021-05-22 14:23:55 +0200", "message": "[#286] label/map for used frameworks"}, {"oid": "ea7190bf0a34d9cc526f5259d50ee9f6fb22891a", "committedDate": "2021-05-24 11:12:21 +0200", "message": "[#286] cleanup"}, {"oid": "8232e72a5a6c9cb524a0c2a9f1926e8b6c7b52fa", "committedDate": "2021-06-06 12:39:16 +0200", "message": "[#548] documented frameworks"}, {"oid": "6534758dffc654f3307f8e0c3fc33e3481bd25fb", "committedDate": "2021-06-06 12:39:16 +0200", "message": "[#548] added test and docs"}, {"oid": "d99570740e1658866b625e905defb353a05678c1", "committedDate": "2021-06-09 12:27:38 +0200", "message": "[#565] csv input can read relations"}, {"oid": "e0aee2ae343647658d06553f3800a777a589370e", "committedDate": "2021-06-20 09:26:34 +0200", "message": "[#565] relations with labels"}, {"oid": "a76a37d5dbf86c2c2f8220427487b34cbfdb7d19", "committedDate": "2021-06-22 08:36:31 +0200", "message": "[#565] relations with labels"}, {"oid": "063069affe1fa5482e0730bcf4137523e14f963f", "committedDate": "2021-06-24 09:28:31 +0200", "message": "group description has anySetter to accept arbitrary labels"}, {"oid": "1c2ba42ab2931986a7fd927da2e38350ceb995c3", "committedDate": "2021-06-24 20:35:30 +0200", "message": "[#565] added test"}, {"oid": "b1e025879d27b13ea3b72a8dda2aa21f51d380dc", "committedDate": "2021-08-02 14:41:12 +0200", "message": "[#565] cleanup"}, {"oid": "ec3422f15f2ed192d34cfb617516aa27ea2cbc26", "committedDate": "2021-08-08 22:01:59 +0200", "message": "[#637] introduced AssessmentChangedEvent [#543] introduced ApiModels, internal labels"}, {"oid": "6bcd1509c544b6e0d5d649b9c973cef4eda482f3", "committedDate": "2021-09-06 08:50:30 +0200", "message": "[#666] improved relation handling"}, {"oid": "b02a7881b77721d80fcc5f3d8b2b16ac04fa9cd0", "committedDate": "2021-09-12 10:42:24 +0200", "message": "[#425] identifier validation"}, {"oid": "52defeb13af5518a10f5f7cc61c99f1f34e95ee3", "committedDate": "2021-09-13 16:29:01 +0200", "message": "extended icon mapping item with layer cleanup"}, {"oid": "7d4e584ba56b8b49f7760e37b4ea72f4963a71e5", "committedDate": "2021-09-13 16:33:21 +0200", "message": "Merge branch 'custom_json_mapping' of https://github.com/dedica-team/nivio into custom_json_mapping"}, {"oid": "a9fe40f7282f493a85b9c5883a7c65476f35df5b", "committedDate": "2021-09-16 21:18:02 +0200", "message": "landscape now has two default groups based on layers"}, {"oid": "a0fba55ecc3708631c38ed5e1aa670836ba597fd", "committedDate": "2021-11-05 10:07:31 +0100", "message": "[#717] adding @JsonAnySetter/Getter to Group/Item/Landscape + add getIcon, setICon to ComponentDescription.java and Component.java"}, {"oid": "f2d4b1af5c71651920ea6aa0a7434e05269758b9", "committedDate": "2021-11-05 10:54:11 +0100", "message": "[#717] bug fix unknown property in yaml test"}, {"oid": "1d47586ef304fe6809f5c93028f559a96944bdf1", "committedDate": "2021-11-05 11:51:34 +0100", "message": "[#717] AppearanceProcessor case item solved"}, {"oid": "9057bb7647ac87558fdd7435d615aad915d81a26", "committedDate": "2021-11-16 06:32:16 +0100", "message": "Merge branch 'develop' into custom_json_mapping"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTAyODE5Mg==", "url": "https://github.com/dedica-team/nivio/pull/84#discussion_r369028192", "body": "1. Why are not all test methods public?\r\n2. The names of the methods don't really give away, what they are testing. Maybe change method names or at least use `@DisplayName(\"Expect this and that\")`.", "bodyText": "Why are not all test methods public?\nThe names of the methods don't really give away, what they are testing. Maybe change method names or at least use @DisplayName(\"Expect this and that\").", "bodyHTML": "<ol dir=\"auto\">\n<li>Why are not all test methods public?</li>\n<li>The names of the methods don't really give away, what they are testing. Maybe change method names or at least use <code>@DisplayName(\"Expect this and that\")</code>.</li>\n</ol>", "author": "jpgoelz", "createdAt": "2020-01-21T14:22:13Z", "path": "src/test/java/de/bonndan/nivio/input/LabelToFieldProcessorTest.java", "diffHunk": "@@ -7,6 +7,9 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import java.net.URL;\n+import java.util.Map;\n+\n import static org.junit.jupiter.api.Assertions.*;\n \n class LabelToFieldProcessorTest {", "originalCommit": "e889de0e97f8ec614b40d782788fc498aaa859f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE1OTEzMA==", "url": "https://github.com/dedica-team/nivio/pull/84#discussion_r369159130", "bodyText": "Test methods do not need to be public afaik. It's more a habit of good old PHP times.", "author": "bonndan", "createdAt": "2020-01-21T18:08:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTAyODE5Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE1OTI3MA==", "url": "https://github.com/dedica-team/nivio/pull/84#discussion_r369159270", "bodyText": "added @DisplayName annotations", "author": "bonndan", "createdAt": "2020-01-21T18:09:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTAyODE5Mg=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "c3a7d0abefbf39c2b87147277a82ed27f995bff5", "changed_code": [{"header": "diff --git a/src/test/java/de/bonndan/nivio/input/LabelToFieldProcessorTest.java b/src/test/java/de/bonndan/nivio/input/LabelToFieldProcessorTest.java\ndeleted file mode 100644\nindex fa7e6ae6..00000000\n--- a/src/test/java/de/bonndan/nivio/input/LabelToFieldProcessorTest.java\n+++ /dev/null\n", "chunk": "@@ -1,86 +0,0 @@\n-package de.bonndan.nivio.input;\n-\n-import de.bonndan.nivio.input.dto.ItemDescription;\n-import de.bonndan.nivio.input.dto.LandscapeDescription;\n-import org.junit.jupiter.api.BeforeEach;\n-import org.junit.jupiter.api.Test;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import java.net.URL;\n-import java.util.Map;\n-\n-import static org.junit.jupiter.api.Assertions.*;\n-\n-class LabelToFieldProcessorTest {\n-\n-    private LabelToFieldProcessor processor;\n-\n-    @BeforeEach\n-    public void setup() {\n-        Logger logger = LoggerFactory.getLogger(LabelToFieldProcessorTest.class);\n-        ProcessLog processLog = new ProcessLog(logger);\n-        processor = new LabelToFieldProcessor(processLog);\n-    }\n-\n-    @Test\n-    void process() {\n-        ItemDescription item1 = new ItemDescription();\n-        item1.getLabels().put(\"a\", \"b\");\n-        item1.getLabels().put(\"nivio.name\", \"foo\");\n-        item1.getLabels().put(\"NiVIO.description\", \"bar\");\n-        item1.getLabels().put(\"NIVIO.providedBy\", \"baz, bak\");\n-\n-        LandscapeDescription input = new LandscapeDescription();\n-        input.getItemDescriptions().add(item1);\n-\n-        //when\n-        processor.process(input, null);\n-\n-        //then\n-        assertEquals(\"foo\", item1.getName());\n-        assertEquals(\"bar\", item1.getDescription());\n-        assertEquals(2, item1.getProvidedBy().size());\n-    }\n-\n-\n-    @Test\n-    public void listFieldLabelWithoutDelimiter() {\n-        ItemDescription item1 = new ItemDescription();\n-        item1.getLabels().put(\"a\", \"b\");\n-        item1.getLabels().put(\"nivio.name\", \"foo\");\n-        item1.getLabels().put(\"NiVIO.description\", \"bar\");\n-        item1.getLabels().put(\"NIVIO.providedBy\", \"baz \");\n-\n-        LandscapeDescription input = new LandscapeDescription();\n-        input.getItemDescriptions().add(item1);\n-\n-        //when\n-        processor.process(input, null);\n-\n-        //then\n-        assertEquals(\"foo\", item1.getName());\n-        assertEquals(\"bar\", item1.getDescription());\n-        assertEquals(1, item1.getProvidedBy().size());\n-    }\n-\n-    @Test\n-    public void links() {\n-        ItemDescription item1 = new ItemDescription();\n-        item1.getLabels().put(\"a\", \"b\");\n-        item1.getLabels().put(\"nivio.links\", \"http://one.com, https://two.net\");\n-\n-        LandscapeDescription input = new LandscapeDescription();\n-        input.getItemDescriptions().add(item1);\n-\n-        //when\n-        processor.process(input, null);\n-\n-        //then\n-        Map<String, URL> links = item1.getLinks();\n-        assertFalse(links.isEmpty());\n-        URL url = links.get(\"1\");\n-        assertNotNull(url);\n-        assertEquals(\"http://one.com\", url.toString());\n-    }\n-}\n\\ No newline at end of file\n", "next_change": null}]}, "commits_in_main": [{"oid": "3cc759cf5a1486bf95516599fa3dc20a47d41b4f", "message": "Merge commit", "committedDate": null}, {"oid": "b2c63680662b8e4d437bb443e74496da715ccaf8", "committedDate": "2020-04-09 11:47:49 +0200", "message": "[#114] test fixes"}, {"oid": "5420653e8bafe8c760e7c70f1ec382cc3e423fd9", "committedDate": "2020-07-02 09:12:23 +0200", "message": "[#167] removed hateoas lib (#168)"}, {"oid": "aa8dccd704204a8f9b4dbe74f5bc9282fa0fdd16", "committedDate": "2020-09-10 12:53:16 +0200", "message": "[#266] label cleanup, writing prefixed labels to item labels"}, {"oid": "c3a7d0abefbf39c2b87147277a82ed27f995bff5", "committedDate": "2020-12-15 10:38:05 +0100", "message": "[#97] refactored indexer: distinction between Processor and Resolver"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTAzMDI4Mg==", "url": "https://github.com/dedica-team/nivio/pull/84#discussion_r369030282", "body": "IntelliJ complains: \"Statement lambda can be replaced with expression lambda.\"\r\nWhat are your thoughts on that, @bonndan, @Matthimatiker?", "bodyText": "IntelliJ complains: \"Statement lambda can be replaced with expression lambda.\"\nWhat are your thoughts on that, @bonndan, @Matthimatiker?", "bodyHTML": "<p dir=\"auto\">IntelliJ complains: \"Statement lambda can be replaced with expression lambda.\"<br>\nWhat are your thoughts on that, <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/bonndan/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/bonndan\">@bonndan</a>, <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/Matthimatiker/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/Matthimatiker\">@Matthimatiker</a>?</p>", "author": "jpgoelz", "createdAt": "2020-01-21T14:25:42Z", "path": "src/test/java/de/bonndan/nivio/input/csv/ItemDescriptionFactoryCSVTest.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package de.bonndan.nivio.input.csv;\n+\n+import de.bonndan.nivio.ProcessingException;\n+import de.bonndan.nivio.input.FileFetcher;\n+import de.bonndan.nivio.input.dto.ItemDescription;\n+import de.bonndan.nivio.input.dto.SourceReference;\n+import de.bonndan.nivio.input.http.HttpService;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class ItemDescriptionFactoryCSVTest {\n+\n+    private FileFetcher fileFetcher;\n+\n+    @BeforeEach\n+    public void setup() {\n+        fileFetcher = new FileFetcher(new HttpService());\n+    }\n+\n+    @Test\n+    public void read() {\n+\n+        SourceReference file = new SourceReference(getRootPath() + \"/src/test/resources/example/services/test.csv\");\n+\n+        Map<String, String> mapping = new HashMap<>();\n+        mapping.put(\"identifier\", \"1\");\n+        mapping.put(\"name\", \"0\");\n+        mapping.put(\"description\", \"2\");\n+        file.setProperty(\"mapping\", mapping);\n+        file.setProperty(\"skipLines\", 1);\n+        file.setProperty(\"separator\", \";\");\n+\n+        ItemDescriptionFactoryCSV factoryCSV = new ItemDescriptionFactoryCSV(fileFetcher);\n+        List<ItemDescription> services = factoryCSV.getDescriptions(file, null);\n+        assertEquals(3, services.size());\n+        ItemDescription foo = services.get(0);\n+        assertNotNull(foo);\n+\n+        assertEquals(\"foo\", foo.getIdentifier());\n+        assertTrue(foo.getLabels().containsKey(\"nivio.name\"));\n+        assertEquals(\"foo\", foo.getLabels().get(\"nivio.name\"));\n+        assertTrue(foo.getLabels().containsKey(\"nivio.description\"));\n+        assertEquals(\"This does nothing\", foo.getLabels().get(\"nivio.description\"));\n+\n+        ItemDescription bar = services.get(1);\n+        assertNotNull(bar);\n+\n+        assertEquals(\"bar\", bar.getIdentifier());\n+        assertTrue(bar.getLabels().containsKey(\"nivio.name\"));\n+        assertEquals(\"bar\", bar.getLabels().get(\"nivio.name\"));\n+        assertTrue(bar.getLabels().containsKey(\"nivio.description\"));\n+        assertEquals(\"\", bar.getLabels().get(\"nivio.description\"));\n+\n+        ItemDescription super1 = services.get(2);\n+        assertNotNull(super1);\n+\n+        assertEquals(\"super1\", super1.getIdentifier());\n+        assertTrue(super1.getLabels().containsKey(\"nivio.name\"));\n+        assertEquals(\"Super Service\", super1.getLabels().get(\"nivio.name\"));\n+        assertTrue(super1.getLabels().containsKey(\"nivio.description\"));\n+        assertEquals(\"superior\", super1.getLabels().get(\"nivio.description\"));\n+    }\n+\n+    @Test\n+    public void failsWithoutMapping() {\n+\n+        SourceReference file = new SourceReference(getRootPath() + \"/src/test/resources/example/services/test.csv\");\n+        ItemDescriptionFactoryCSV factoryCSV = new ItemDescriptionFactoryCSV(fileFetcher);\n+\n+        assertThrows(ProcessingException.class, () -> {\n+            factoryCSV.getDescriptions(file, null);\n+        });", "originalCommit": "e889de0e97f8ec614b40d782788fc498aaa859f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE2MDIwMQ==", "url": "https://github.com/dedica-team/nivio/pull/84#discussion_r369160201", "bodyText": "I'd say this does not matter in tests, and here it is perhaps better to work with the system under test as usual.", "author": "bonndan", "createdAt": "2020-01-21T18:11:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTAzMDI4Mg=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "f4daabc4b9402cd4057d9a43d26585d523f70a9e", "changed_code": [{"header": "diff --git a/src/test/java/de/bonndan/nivio/input/csv/ItemDescriptionFactoryCSVTest.java b/src/test/java/de/bonndan/nivio/input/csv/InputFormatHandlerCSVTest.java\nsimilarity index 76%\nrename from src/test/java/de/bonndan/nivio/input/csv/ItemDescriptionFactoryCSVTest.java\nrename to src/test/java/de/bonndan/nivio/input/csv/InputFormatHandlerCSVTest.java\nindex 4fdf1322..27669f6d 100644\n--- a/src/test/java/de/bonndan/nivio/input/csv/ItemDescriptionFactoryCSVTest.java\n+++ b/src/test/java/de/bonndan/nivio/input/csv/InputFormatHandlerCSVTest.java\n", "chunk": "@@ -73,7 +79,7 @@ class ItemDescriptionFactoryCSVTest {\n     public void failsWithoutMapping() {\n \n         SourceReference file = new SourceReference(getRootPath() + \"/src/test/resources/example/services/test.csv\");\n-        ItemDescriptionFactoryCSV factoryCSV = new ItemDescriptionFactoryCSV(fileFetcher);\n+        InputFormatHandlerCSV factoryCSV = new InputFormatHandlerCSV(fileFetcher);\n \n         assertThrows(ProcessingException.class, () -> {\n             factoryCSV.getDescriptions(file, null);\n", "next_change": null}]}, "commits_in_main": [{"oid": "3cc759cf5a1486bf95516599fa3dc20a47d41b4f", "message": "Merge commit", "committedDate": null}, {"oid": "f4daabc4b9402cd4057d9a43d26585d523f70a9e", "committedDate": "2020-09-12 21:00:34 +0200", "message": "[#248] source reference based observers"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTAzMDY5NA==", "url": "https://github.com/dedica-team/nivio/pull/84#discussion_r369030694", "body": "see above (+78 to +80).", "bodyText": "see above (+78 to +80).", "bodyHTML": "<p dir=\"auto\">see above (+78 to +80).</p>", "author": "jpgoelz", "createdAt": "2020-01-21T14:26:24Z", "path": "src/test/java/de/bonndan/nivio/input/csv/ItemDescriptionFactoryCSVTest.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package de.bonndan.nivio.input.csv;\n+\n+import de.bonndan.nivio.ProcessingException;\n+import de.bonndan.nivio.input.FileFetcher;\n+import de.bonndan.nivio.input.dto.ItemDescription;\n+import de.bonndan.nivio.input.dto.SourceReference;\n+import de.bonndan.nivio.input.http.HttpService;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class ItemDescriptionFactoryCSVTest {\n+\n+    private FileFetcher fileFetcher;\n+\n+    @BeforeEach\n+    public void setup() {\n+        fileFetcher = new FileFetcher(new HttpService());\n+    }\n+\n+    @Test\n+    public void read() {\n+\n+        SourceReference file = new SourceReference(getRootPath() + \"/src/test/resources/example/services/test.csv\");\n+\n+        Map<String, String> mapping = new HashMap<>();\n+        mapping.put(\"identifier\", \"1\");\n+        mapping.put(\"name\", \"0\");\n+        mapping.put(\"description\", \"2\");\n+        file.setProperty(\"mapping\", mapping);\n+        file.setProperty(\"skipLines\", 1);\n+        file.setProperty(\"separator\", \";\");\n+\n+        ItemDescriptionFactoryCSV factoryCSV = new ItemDescriptionFactoryCSV(fileFetcher);\n+        List<ItemDescription> services = factoryCSV.getDescriptions(file, null);\n+        assertEquals(3, services.size());\n+        ItemDescription foo = services.get(0);\n+        assertNotNull(foo);\n+\n+        assertEquals(\"foo\", foo.getIdentifier());\n+        assertTrue(foo.getLabels().containsKey(\"nivio.name\"));\n+        assertEquals(\"foo\", foo.getLabels().get(\"nivio.name\"));\n+        assertTrue(foo.getLabels().containsKey(\"nivio.description\"));\n+        assertEquals(\"This does nothing\", foo.getLabels().get(\"nivio.description\"));\n+\n+        ItemDescription bar = services.get(1);\n+        assertNotNull(bar);\n+\n+        assertEquals(\"bar\", bar.getIdentifier());\n+        assertTrue(bar.getLabels().containsKey(\"nivio.name\"));\n+        assertEquals(\"bar\", bar.getLabels().get(\"nivio.name\"));\n+        assertTrue(bar.getLabels().containsKey(\"nivio.description\"));\n+        assertEquals(\"\", bar.getLabels().get(\"nivio.description\"));\n+\n+        ItemDescription super1 = services.get(2);\n+        assertNotNull(super1);\n+\n+        assertEquals(\"super1\", super1.getIdentifier());\n+        assertTrue(super1.getLabels().containsKey(\"nivio.name\"));\n+        assertEquals(\"Super Service\", super1.getLabels().get(\"nivio.name\"));\n+        assertTrue(super1.getLabels().containsKey(\"nivio.description\"));\n+        assertEquals(\"superior\", super1.getLabels().get(\"nivio.description\"));\n+    }\n+\n+    @Test\n+    public void failsWithoutMapping() {\n+\n+        SourceReference file = new SourceReference(getRootPath() + \"/src/test/resources/example/services/test.csv\");\n+        ItemDescriptionFactoryCSV factoryCSV = new ItemDescriptionFactoryCSV(fileFetcher);\n+\n+        assertThrows(ProcessingException.class, () -> {\n+            factoryCSV.getDescriptions(file, null);\n+        });\n+    }\n+\n+    @Test\n+    public void failsWithoutIdentifierInMapping() {\n+\n+        SourceReference file = new SourceReference(getRootPath() + \"/src/test/resources/example/services/test.csv\");\n+        Map<String, String> mapping = new HashMap<>();\n+        mapping.put(\"name\", \"0\");\n+        file.setProperty(\"mapping\", mapping);\n+\n+        ItemDescriptionFactoryCSV factoryCSV = new ItemDescriptionFactoryCSV(fileFetcher);\n+\n+        assertThrows(ProcessingException.class, () -> {\n+            factoryCSV.getDescriptions(file, null);\n+        });", "originalCommit": "e889de0e97f8ec614b40d782788fc498aaa859f0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "f4daabc4b9402cd4057d9a43d26585d523f70a9e", "changed_code": [{"header": "diff --git a/src/test/java/de/bonndan/nivio/input/csv/ItemDescriptionFactoryCSVTest.java b/src/test/java/de/bonndan/nivio/input/csv/InputFormatHandlerCSVTest.java\nsimilarity index 76%\nrename from src/test/java/de/bonndan/nivio/input/csv/ItemDescriptionFactoryCSVTest.java\nrename to src/test/java/de/bonndan/nivio/input/csv/InputFormatHandlerCSVTest.java\nindex 4fdf1322..27669f6d 100644\n--- a/src/test/java/de/bonndan/nivio/input/csv/ItemDescriptionFactoryCSVTest.java\n+++ b/src/test/java/de/bonndan/nivio/input/csv/InputFormatHandlerCSVTest.java\n", "chunk": "@@ -88,13 +94,29 @@ class ItemDescriptionFactoryCSVTest {\n         mapping.put(\"name\", \"0\");\n         file.setProperty(\"mapping\", mapping);\n \n-        ItemDescriptionFactoryCSV factoryCSV = new ItemDescriptionFactoryCSV(fileFetcher);\n+        InputFormatHandlerCSV factoryCSV = new InputFormatHandlerCSV(fileFetcher);\n \n         assertThrows(ProcessingException.class, () -> {\n             factoryCSV.getDescriptions(file, null);\n         });\n     }\n \n+    @Test\n+    public void returnsUrlObserver() {\n+        SourceReference file = new SourceReference(getRootPath() + \"/src/test/resources/example/services/test.csv\");\n+        Map<String, String> mapping = new HashMap<>();\n+        mapping.put(\"name\", \"0\");\n+        file.setProperty(\"mapping\", mapping);\n+\n+        InputFormatHandlerCSV factoryCSV = new InputFormatHandlerCSV(fileFetcher);\n+\n+        //when\n+        InputFormatObserver observer = factoryCSV.getObserver(file, null);\n+\n+        //then\n+        assertNotNull(observer);\n+    }\n+\n     private String getRootPath() {\n         Path currentRelativePath = Paths.get(\"\");\n         return currentRelativePath.toAbsolutePath().toString();\n", "next_change": null}]}, "commits_in_main": [{"oid": "3cc759cf5a1486bf95516599fa3dc20a47d41b4f", "message": "Merge commit", "committedDate": null}, {"oid": "f4daabc4b9402cd4057d9a43d26585d523f70a9e", "committedDate": "2020-09-12 21:00:34 +0200", "message": "[#248] source reference based observers"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTAzNDI5Nw==", "url": "https://github.com/dedica-team/nivio/pull/84#discussion_r369034297", "body": "add a blank line after this", "bodyText": "add a blank line after this", "bodyHTML": "<p dir=\"auto\">add a blank line after this</p>", "author": "jpgoelz", "createdAt": "2020-01-21T14:32:31Z", "path": "src/test/java/de/bonndan/nivio/input/csv/ItemDescriptionFactoryCSVTest.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package de.bonndan.nivio.input.csv;\n+\n+import de.bonndan.nivio.ProcessingException;\n+import de.bonndan.nivio.input.FileFetcher;\n+import de.bonndan.nivio.input.dto.ItemDescription;\n+import de.bonndan.nivio.input.dto.SourceReference;\n+import de.bonndan.nivio.input.http.HttpService;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class ItemDescriptionFactoryCSVTest {\n+\n+    private FileFetcher fileFetcher;\n+\n+    @BeforeEach\n+    public void setup() {\n+        fileFetcher = new FileFetcher(new HttpService());\n+    }\n+\n+    @Test\n+    public void read() {\n+\n+        SourceReference file = new SourceReference(getRootPath() + \"/src/test/resources/example/services/test.csv\");\n+\n+        Map<String, String> mapping = new HashMap<>();\n+        mapping.put(\"identifier\", \"1\");\n+        mapping.put(\"name\", \"0\");\n+        mapping.put(\"description\", \"2\");\n+        file.setProperty(\"mapping\", mapping);\n+        file.setProperty(\"skipLines\", 1);\n+        file.setProperty(\"separator\", \";\");\n+\n+        ItemDescriptionFactoryCSV factoryCSV = new ItemDescriptionFactoryCSV(fileFetcher);\n+        List<ItemDescription> services = factoryCSV.getDescriptions(file, null);\n+        assertEquals(3, services.size());", "originalCommit": "e889de0e97f8ec614b40d782788fc498aaa859f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE2MDg2Mw==", "url": "https://github.com/dedica-team/nivio/pull/84#discussion_r369160863", "bodyText": "done", "author": "bonndan", "createdAt": "2020-01-21T18:12:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTAzNDI5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "5d637ce63a05746487a5cd63bb5ab26b4c4a2297", "changed_code": [{"header": "diff --git a/src/test/java/de/bonndan/nivio/input/csv/ItemDescriptionFactoryCSVTest.java b/src/test/java/de/bonndan/nivio/input/csv/ItemDescriptionFactoryCSVTest.java\nindex 4fdf1322..7c7798fc 100644\n--- a/src/test/java/de/bonndan/nivio/input/csv/ItemDescriptionFactoryCSVTest.java\n+++ b/src/test/java/de/bonndan/nivio/input/csv/ItemDescriptionFactoryCSVTest.java\n", "chunk": "@@ -40,6 +40,7 @@ class ItemDescriptionFactoryCSVTest {\n \n         ItemDescriptionFactoryCSV factoryCSV = new ItemDescriptionFactoryCSV(fileFetcher);\n         List<ItemDescription> services = factoryCSV.getDescriptions(file, null);\n+\n         assertEquals(3, services.size());\n         ItemDescription foo = services.get(0);\n         assertNotNull(foo);\n", "next_change": null}]}, "revised_code_in_main": {"commit": "3cc759cf5a1486bf95516599fa3dc20a47d41b4f", "changed_code": [{"header": "diff --git a/src/test/java/de/bonndan/nivio/input/csv/ItemDescriptionFactoryCSVTest.java b/src/test/java/de/bonndan/nivio/input/csv/ItemDescriptionFactoryCSVTest.java\nindex 4fdf1322..7c7798fc 100644\n--- a/src/test/java/de/bonndan/nivio/input/csv/ItemDescriptionFactoryCSVTest.java\n+++ b/src/test/java/de/bonndan/nivio/input/csv/ItemDescriptionFactoryCSVTest.java\n", "chunk": "@@ -40,6 +40,7 @@ class ItemDescriptionFactoryCSVTest {\n \n         ItemDescriptionFactoryCSV factoryCSV = new ItemDescriptionFactoryCSV(fileFetcher);\n         List<ItemDescription> services = factoryCSV.getDescriptions(file, null);\n+\n         assertEquals(3, services.size());\n         ItemDescription foo = services.get(0);\n         assertNotNull(foo);\n", "next_change": {"commit": "f4daabc4b9402cd4057d9a43d26585d523f70a9e", "changed_code": [{"header": "diff --git a/src/test/java/de/bonndan/nivio/input/csv/ItemDescriptionFactoryCSVTest.java b/src/test/java/de/bonndan/nivio/input/csv/InputFormatHandlerCSVTest.java\nsimilarity index 76%\nrename from src/test/java/de/bonndan/nivio/input/csv/ItemDescriptionFactoryCSVTest.java\nrename to src/test/java/de/bonndan/nivio/input/csv/InputFormatHandlerCSVTest.java\nindex 7c7798fc..27669f6d 100644\n--- a/src/test/java/de/bonndan/nivio/input/csv/ItemDescriptionFactoryCSVTest.java\n+++ b/src/test/java/de/bonndan/nivio/input/csv/InputFormatHandlerCSVTest.java\n", "chunk": "@@ -38,7 +43,7 @@ class ItemDescriptionFactoryCSVTest {\n         file.setProperty(\"skipLines\", 1);\n         file.setProperty(\"separator\", \";\");\n \n-        ItemDescriptionFactoryCSV factoryCSV = new ItemDescriptionFactoryCSV(fileFetcher);\n+        InputFormatHandlerCSV factoryCSV = new InputFormatHandlerCSV(fileFetcher);\n         List<ItemDescription> services = factoryCSV.getDescriptions(file, null);\n \n         assertEquals(3, services.size());\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "3cc759cf5a1486bf95516599fa3dc20a47d41b4f", "message": "Merge commit", "committedDate": null}, {"oid": "f4daabc4b9402cd4057d9a43d26585d523f70a9e", "committedDate": "2020-09-12 21:00:34 +0200", "message": "[#248] source reference based observers"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTA0NzA0MA==", "url": "https://github.com/dedica-team/nivio/pull/84#discussion_r369047040", "body": "Why do these return mxGraph, if the return value is never used?", "bodyText": "Why do these return mxGraph, if the return value is never used?", "bodyHTML": "<p dir=\"auto\">Why do these return mxGraph, if the return value is never used?</p>", "author": "jpgoelz", "createdAt": "2020-01-21T14:53:06Z", "path": "src/test/java/de/bonndan/nivio/output/jgraphx/JGraphXRendererTest.java", "diffHunk": "@@ -48,12 +53,18 @@ private LandscapeImpl getLandscape(String path) {\n     }\n \n     private mxGraph debugRender(String path) throws IOException {\n+        return debugRender(path, true);\n+    }\n+\n+    private mxGraph debugRender(String path, boolean debugMode) throws IOException {\n         LandscapeImpl landscape = getLandscape(path + \".yml\");\n-        return debugRenderLandscape(path, landscape, true);\n+        return debugRenderLandscape(path, landscape, debugMode);\n     }", "originalCommit": "e889de0e97f8ec614b40d782788fc498aaa859f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE2MjA4MQ==", "url": "https://github.com/dedica-team/nivio/pull/84#discussion_r369162081", "bodyText": "This maybe remained from earlier examinations of the graph. As always, I'd say this is not worth refactoring, since it is just test code.", "author": "bonndan", "createdAt": "2020-01-21T18:15:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTA0NzA0MA=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "1238e48b7fc7a4bdd4d180515a863b82ed406a66", "changed_code": [{"header": "diff --git a/src/test/java/de/bonndan/nivio/output/jgraphx/JGraphXRendererTest.java b/src/test/java/de/bonndan/nivio/output/jgraphx/JGraphXRendererTest.java\nindex 8f961e5d..ee978bef 100644\n--- a/src/test/java/de/bonndan/nivio/output/jgraphx/JGraphXRendererTest.java\n+++ b/src/test/java/de/bonndan/nivio/output/jgraphx/JGraphXRendererTest.java\n", "chunk": "@@ -62,11 +70,9 @@ class JGraphXRendererTest {\n     }\n \n     private mxGraph debugRenderLandscape(String path, LandscapeImpl landscape, boolean debugMode) throws IOException {\n-        IconService iconService = new IconService();\n-        iconService.setImageProxy(\"\");\n-        JGraphXRenderer jGraphXRenderer = new JGraphXRenderer(debugMode ? null : iconService);\n-        jGraphXRenderer.setDebugMode(debugMode);\n \n+        JGraphXRenderer jGraphXRenderer = new JGraphXRenderer();\n+        jGraphXRenderer.setDebugMode(debugMode);\n         mxGraph graph = jGraphXRenderer.render(landscape).getRendered();\n \n         BufferedImage image = mxCellRenderer.createBufferedImage(graph, null, 1, null, true, null);\n", "next_change": {"commit": "1c54564b6bbc26a598a5b9cd0258469858ebd46c", "changed_code": [{"header": "diff --git a/src/test/java/de/bonndan/nivio/output/jgraphx/JGraphXRendererTest.java b/src/test/java/de/bonndan/nivio/output/layout/OrganicLayouterTest.java\nsimilarity index 74%\nrename from src/test/java/de/bonndan/nivio/output/jgraphx/JGraphXRendererTest.java\nrename to src/test/java/de/bonndan/nivio/output/layout/OrganicLayouterTest.java\nindex ee978bef..87eea10e 100644\n--- a/src/test/java/de/bonndan/nivio/output/jgraphx/JGraphXRendererTest.java\n+++ b/src/test/java/de/bonndan/nivio/output/layout/OrganicLayouterTest.java\n", "chunk": "@@ -37,51 +33,66 @@ import java.util.ArrayList;\n import java.util.List;\n import java.util.Map;\n \n-import static org.junit.jupiter.api.Assertions.*;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n \n-class JGraphXRendererTest {\n+class OrganicLayouterTest {\n \n     private LandscapeRepository landscapeRepository;\n     private ItemDescriptionFormatFactory formatFactory;\n     private Indexer indexer;\n+    private LandscapeDescriptionFactory factory;\n \n     @BeforeEach\n     public void setup() {\n         landscapeRepository = new LandscapeRepository();\n         formatFactory = ItemDescriptionFormatFactory.with(ItemDescriptionFactoryNivio.forTesting());\n+        FileFetcher fileFetcher = new FileFetcher(mock(HttpService.class));\n+        factory = new LandscapeDescriptionFactory(fileFetcher);\n \n-        indexer = new Indexer(landscapeRepository, formatFactory, new NotificationService(null));\n+        indexer = new Indexer(landscapeRepository, formatFactory, mock(ApplicationEventPublisher.class));\n     }\n \n     private LandscapeImpl getLandscape(String path) {\n         File file = new File(RootPath.get() + path);\n-        LandscapeDescription landscapeDescription = LandscapeDescriptionFactory.fromYaml(file);\n+        LandscapeDescription landscapeDescription = factory.fromYaml(file);\n         indexer.reIndex(landscapeDescription);\n         return landscapeRepository.findDistinctByIdentifier(landscapeDescription.getIdentifier()).orElseThrow();\n     }\n \n-    private mxGraph debugRender(String path) throws IOException {\n+    private ComponentBounds debugRender(String path) throws IOException {\n         return debugRender(path, true);\n     }\n \n-    private mxGraph debugRender(String path, boolean debugMode) throws IOException {\n+    private ComponentBounds debugRender(String path, boolean debugMode) throws IOException {\n         LandscapeImpl landscape = getLandscape(path + \".yml\");\n         return debugRenderLandscape(path, landscape, debugMode);\n     }\n \n-    private mxGraph debugRenderLandscape(String path, LandscapeImpl landscape, boolean debugMode) throws IOException {\n+    private ComponentBounds debugRenderLandscape(String path, LandscapeImpl landscape, boolean debugMode) throws IOException {\n+\n+        OrganicLayouter layouter = new OrganicLayouter(new LocalServer(\"\", new VendorIcons()));\n+        LayoutedArtifact<ComponentBounds> graph = layouter.layout(landscape);\n+        toSVG(landscape, graph, RootPath.get() + path);\n+        return graph.getRendered();\n+    }\n+\n+    private void toSVG(LandscapeImpl landscape, LayoutedArtifact<ComponentBounds> render, String filename) throws IOException {\n \n-        JGraphXRenderer jGraphXRenderer = new JGraphXRenderer();\n-        jGraphXRenderer.setDebugMode(debugMode);\n-        mxGraph graph = jGraphXRenderer.render(landscape).getRendered();\n+        MapStyleSheetFactory mapStyleSheetFactory = mock(MapStyleSheetFactory.class);\n+        when(mapStyleSheetFactory.getMapStylesheet(ArgumentMatchers.any(), ArgumentMatchers.any())).thenReturn(\"\");\n \n-        BufferedImage image = mxCellRenderer.createBufferedImage(graph, null, 1, null, true, null);\n-        assertNotNull(image);\n+        File json = new File(filename + \"_debug.json\");\n+        new ObjectMapper().writeValue(json, render);\n \n-        File png = new File(RootPath.get() + path + \"_debug.png\");\n-        ImageIO.write(image, \"PNG\", png);\n+        SVGDocument SVGDocument = new SVGDocument(landscape, mapStyleSheetFactory);\n+        SVGDocument.setDebug(true);\n+        String svg = SVGDocument.getXML();\n \n-        return graph;\n+        File svgFile = new File(filename + \"_debug.svg\");\n+        FileWriter fileWriter = new FileWriter(svgFile);\n+        fileWriter.write(svg);\n+        fileWriter.close();\n     }\n \n     @Test\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "3cc759cf5a1486bf95516599fa3dc20a47d41b4f", "message": "Merge commit", "committedDate": null}, {"oid": "bc6d564c2054e8d3c5506054e6fa05f100417a82", "committedDate": "2020-01-26 21:11:33 +0100", "message": "[#90] added test (disabled) to render large svg"}, {"oid": "7ae969c15d38ee48a5e22af2e84d101039dfd68c", "committedDate": "2020-02-13 23:32:12 +0100", "message": "[#93] A* path finding algorithm"}, {"oid": "d71adb644781ef6e2c8e119a46cc6636ebf4f6f2", "committedDate": "2020-02-15 18:22:57 +0100", "message": "[#81] planned relations as dotted line"}, {"oid": "1238e48b7fc7a4bdd4d180515a863b82ed406a66", "committedDate": "2020-02-24 13:43:56 +0100", "message": "refactored LocalServer and IconService.java which were mostly used together"}, {"oid": "31d5b988538f1de2f6326e2dc140b1466494babc", "committedDate": "2020-02-24 14:17:14 +0100", "message": "vendor icons as config"}, {"oid": "935a452dbef8ee2a04e8b89e10264c3ee9cdb294", "committedDate": "2020-02-24 20:26:53 +0100", "message": "[#95] optimisation for item labels"}, {"oid": "60ba5298aa856003282b40b0086b92fd1416696c", "committedDate": "2020-03-01 16:12:19 +0100", "message": "[#95] rendering fill or icon"}, {"oid": "f976b1cbccb29cd87f24737a2b5ba572e00ee971", "committedDate": "2020-03-01 20:33:04 +0100", "message": "[#95] extracted factory"}, {"oid": "959f4c5ee7d1dc2f2e1fb66ad43902f1d1d6a5b5", "committedDate": "2020-04-02 21:33:40 +0200", "message": "refactoring wip"}, {"oid": "b70d28bf98d424346fef6b18f03b38cbcf649325", "committedDate": "2020-04-05 09:33:24 +0200", "message": "cache to speed on png rendering"}, {"oid": "31f95898fcdc85690bcb1c2bc5a349eb371ae24a", "committedDate": "2020-04-28 22:12:43 +0200", "message": "Merge branch 'develop' into 114_remodel"}, {"oid": "4c8f661e5ee817e681b136b77e65fddb57f0000e", "committedDate": "2020-06-16 22:15:49 +0200", "message": "[#147] refactorings/cleanup"}, {"oid": "5420653e8bafe8c760e7c70f1ec382cc3e423fd9", "committedDate": "2020-07-02 09:12:23 +0200", "message": "[#167] removed hateoas lib (#168)"}, {"oid": "248b4e1cdc016b320ebfd900903ed3f23f9ee534", "committedDate": "2020-07-06 23:39:03 +0200", "message": "[#151] code cleanup"}, {"oid": "1c54564b6bbc26a598a5b9cd0258469858ebd46c", "committedDate": "2020-07-24 23:13:42 +0200", "message": "[#193] layout without jgraphx"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTA1MTQyNQ==", "url": "https://github.com/dedica-team/nivio/pull/84#discussion_r369051425", "body": "Not one of the changes, but there is a typo on line 166: _lanscape_.", "bodyText": "Not one of the changes, but there is a typo on line 166: lanscape.", "bodyHTML": "<p dir=\"auto\">Not one of the changes, but there is a typo on line 166: <em>lanscape</em>.</p>", "author": "jpgoelz", "createdAt": "2020-01-21T15:00:10Z", "path": "src/main/java/de/bonndan/nivio/api/ApiController.java", "diffHunk": "@@ -8,7 +8,6 @@\n import de.bonndan.nivio.input.dto.SourceReference;", "originalCommit": "e889de0e97f8ec614b40d782788fc498aaa859f0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "88e8d2b1a6ac9977b05b46bf9e6fa768bc2ab517", "changed_code": [{"header": "diff --git a/src/main/java/de/bonndan/nivio/api/ApiController.java b/src/main/java/de/bonndan/nivio/api/ApiController.java\nindex 6c77b758..72f11da3 100644\n--- a/src/main/java/de/bonndan/nivio/api/ApiController.java\n+++ b/src/main/java/de/bonndan/nivio/api/ApiController.java\n", "chunk": "@@ -2,6 +2,7 @@ package de.bonndan.nivio.api;\n \n import de.bonndan.nivio.ProcessingException;\n import de.bonndan.nivio.api.dto.LandscapeDTO;\n+import de.bonndan.nivio.assessment.Assessment;\n import de.bonndan.nivio.input.*;\n import de.bonndan.nivio.input.dto.LandscapeDescription;\n import de.bonndan.nivio.input.dto.ItemDescription;\n", "next_change": {"commit": "7ed72e845dee5181cef37faf88e5abc2f6c16482", "changed_code": [{"header": "diff --git a/src/main/java/de/bonndan/nivio/api/ApiController.java b/src/main/java/de/bonndan/nivio/api/ApiController.java\nindex 72f11da3..adb82030 100644\n--- a/src/main/java/de/bonndan/nivio/api/ApiController.java\n+++ b/src/main/java/de/bonndan/nivio/api/ApiController.java\n", "chunk": "@@ -1,15 +1,14 @@\n package de.bonndan.nivio.api;\n \n import de.bonndan.nivio.ProcessingException;\n-import de.bonndan.nivio.api.dto.LandscapeDTO;\n-import de.bonndan.nivio.assessment.Assessment;\n import de.bonndan.nivio.input.*;\n-import de.bonndan.nivio.input.dto.LandscapeDescription;\n import de.bonndan.nivio.input.dto.ItemDescription;\n+import de.bonndan.nivio.input.dto.LandscapeDescription;\n import de.bonndan.nivio.input.dto.SourceReference;\n import de.bonndan.nivio.model.*;\n import de.bonndan.nivio.util.URLHelper;\n-import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.hateoas.IanaLinkRelations;\n+import org.springframework.hateoas.RepresentationModel;\n import org.springframework.http.HttpStatus;\n import org.springframework.http.MediaType;\n import org.springframework.http.ResponseEntity;\n", "next_change": {"commit": "4c8f661e5ee817e681b136b77e65fddb57f0000e", "changed_code": [{"header": "diff --git a/src/main/java/de/bonndan/nivio/api/ApiController.java b/src/main/java/de/bonndan/nivio/api/ApiController.java\nindex adb82030..44d656a4 100644\n--- a/src/main/java/de/bonndan/nivio/api/ApiController.java\n+++ b/src/main/java/de/bonndan/nivio/api/ApiController.java\n", "chunk": "@@ -1,14 +1,13 @@\n package de.bonndan.nivio.api;\n \n import de.bonndan.nivio.ProcessingException;\n+import de.bonndan.nivio.api.dto.LandscapeDTO;\n import de.bonndan.nivio.input.*;\n import de.bonndan.nivio.input.dto.ItemDescription;\n import de.bonndan.nivio.input.dto.LandscapeDescription;\n import de.bonndan.nivio.input.dto.SourceReference;\n import de.bonndan.nivio.model.*;\n import de.bonndan.nivio.util.URLHelper;\n-import org.springframework.hateoas.IanaLinkRelations;\n-import org.springframework.hateoas.RepresentationModel;\n import org.springframework.http.HttpStatus;\n import org.springframework.http.MediaType;\n import org.springframework.http.ResponseEntity;\n", "next_change": {"commit": "a39db566550460c2f6dd18e092139dfdd6cf2c19", "changed_code": [{"header": "diff --git a/src/main/java/de/bonndan/nivio/api/ApiController.java b/src/main/java/de/bonndan/nivio/api/ApiController.java\nindex 44d656a4..8bb50c82 100644\n--- a/src/main/java/de/bonndan/nivio/api/ApiController.java\n+++ b/src/main/java/de/bonndan/nivio/api/ApiController.java\n", "chunk": "@@ -1,13 +1,14 @@\n package de.bonndan.nivio.api;\n \n import de.bonndan.nivio.ProcessingException;\n-import de.bonndan.nivio.api.dto.LandscapeDTO;\n import de.bonndan.nivio.input.*;\n import de.bonndan.nivio.input.dto.ItemDescription;\n import de.bonndan.nivio.input.dto.LandscapeDescription;\n import de.bonndan.nivio.input.dto.SourceReference;\n import de.bonndan.nivio.model.*;\n import de.bonndan.nivio.util.URLHelper;\n+import org.springframework.hateoas.IanaLinkRelations;\n+import org.springframework.hateoas.RepresentationModel;\n import org.springframework.http.HttpStatus;\n import org.springframework.http.MediaType;\n import org.springframework.http.ResponseEntity;\n", "next_change": {"commit": "5420653e8bafe8c760e7c70f1ec382cc3e423fd9", "changed_code": [{"header": "diff --git a/src/main/java/de/bonndan/nivio/api/ApiController.java b/src/main/java/de/bonndan/nivio/api/ApiController.java\nindex 8bb50c82..b8e4f2cc 100644\n--- a/src/main/java/de/bonndan/nivio/api/ApiController.java\n+++ b/src/main/java/de/bonndan/nivio/api/ApiController.java\n", "chunk": "@@ -7,8 +7,6 @@ import de.bonndan.nivio.input.dto.LandscapeDescription;\n import de.bonndan.nivio.input.dto.SourceReference;\n import de.bonndan.nivio.model.*;\n import de.bonndan.nivio.util.URLHelper;\n-import org.springframework.hateoas.IanaLinkRelations;\n-import org.springframework.hateoas.RepresentationModel;\n import org.springframework.http.HttpStatus;\n import org.springframework.http.MediaType;\n import org.springframework.http.ResponseEntity;\n", "next_change": {"commit": "ac0583308ae3e57b183d08bdf166edbab2588f22", "changed_code": [{"header": "diff --git a/src/main/java/de/bonndan/nivio/api/ApiController.java b/src/main/java/de/bonndan/nivio/api/ApiController.java\nindex b8e4f2cc..5c2cec9c 100644\n--- a/src/main/java/de/bonndan/nivio/api/ApiController.java\n+++ b/src/main/java/de/bonndan/nivio/api/ApiController.java\n", "chunk": "@@ -7,6 +7,7 @@ import de.bonndan.nivio.input.dto.LandscapeDescription;\n import de.bonndan.nivio.input.dto.SourceReference;\n import de.bonndan.nivio.model.*;\n import de.bonndan.nivio.util.URLHelper;\n+import org.slf4j.LoggerFactory;\n import org.springframework.http.HttpStatus;\n import org.springframework.http.MediaType;\n import org.springframework.http.ResponseEntity;\n", "next_change": {"commit": "c0903be5786183fd1981a65bb6af73abe1e25b9f", "changed_code": [{"header": "diff --git a/src/main/java/de/bonndan/nivio/api/ApiController.java b/src/main/java/de/bonndan/nivio/api/ApiController.java\nindex 5c2cec9c..1e4946cc 100644\n--- a/src/main/java/de/bonndan/nivio/api/ApiController.java\n+++ b/src/main/java/de/bonndan/nivio/api/ApiController.java\n", "chunk": "@@ -7,6 +7,7 @@ import de.bonndan.nivio.input.dto.LandscapeDescription;\n import de.bonndan.nivio.input.dto.SourceReference;\n import de.bonndan.nivio.model.*;\n import de.bonndan.nivio.util.URLHelper;\n+import org.apache.lucene.facet.FacetResult;\n import org.slf4j.LoggerFactory;\n import org.springframework.http.HttpStatus;\n import org.springframework.http.MediaType;\n", "next_change": {"commit": "2061ebc69d6bc7ee64947ed9c340a1744907825a", "changed_code": [{"header": "diff --git a/src/main/java/de/bonndan/nivio/api/ApiController.java b/src/main/java/de/bonndan/nivio/api/ApiController.java\nindex 1e4946cc..2e40f371 100644\n--- a/src/main/java/de/bonndan/nivio/api/ApiController.java\n+++ b/src/main/java/de/bonndan/nivio/api/ApiController.java\n", "chunk": "@@ -7,6 +7,7 @@ import de.bonndan.nivio.input.dto.LandscapeDescription;\n import de.bonndan.nivio.input.dto.SourceReference;\n import de.bonndan.nivio.model.*;\n import de.bonndan.nivio.util.URLHelper;\n+import org.apache.http.entity.ContentType;\n import org.apache.lucene.facet.FacetResult;\n import org.slf4j.LoggerFactory;\n import org.springframework.http.HttpStatus;\n", "next_change": {"commit": "f4daabc4b9402cd4057d9a43d26585d523f70a9e", "changed_code": [{"header": "diff --git a/src/main/java/de/bonndan/nivio/api/ApiController.java b/src/main/java/de/bonndan/nivio/api/ApiController.java\nindex 2e40f371..5f906da9 100644\n--- a/src/main/java/de/bonndan/nivio/api/ApiController.java\n+++ b/src/main/java/de/bonndan/nivio/api/ApiController.java\n", "chunk": "@@ -7,7 +7,6 @@ import de.bonndan.nivio.input.dto.LandscapeDescription;\n import de.bonndan.nivio.input.dto.SourceReference;\n import de.bonndan.nivio.model.*;\n import de.bonndan.nivio.util.URLHelper;\n-import org.apache.http.entity.ContentType;\n import org.apache.lucene.facet.FacetResult;\n import org.slf4j.LoggerFactory;\n import org.springframework.http.HttpStatus;\n", "next_change": {"commit": "10d61e3284ba79358fbf80dc4c73a0a0cd3ed399", "changed_code": [{"header": "diff --git a/src/main/java/de/bonndan/nivio/api/ApiController.java b/src/main/java/de/bonndan/nivio/api/ApiController.java\nindex 5f906da9..50696440 100644\n--- a/src/main/java/de/bonndan/nivio/api/ApiController.java\n+++ b/src/main/java/de/bonndan/nivio/api/ApiController.java\n", "chunk": "@@ -9,6 +10,7 @@ import de.bonndan.nivio.model.*;\n import de.bonndan.nivio.util.URLHelper;\n import org.apache.lucene.facet.FacetResult;\n import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationEventPublisher;\n import org.springframework.http.HttpStatus;\n import org.springframework.http.MediaType;\n import org.springframework.http.ResponseEntity;\n", "next_change": {"commit": "e8165a401f1e509b0297546525984cc0ed589f09", "changed_code": [{"header": "diff --git a/src/main/java/de/bonndan/nivio/api/ApiController.java b/src/main/java/de/bonndan/nivio/api/ApiController.java\nindex 50696440..882b1327 100644\n--- a/src/main/java/de/bonndan/nivio/api/ApiController.java\n+++ b/src/main/java/de/bonndan/nivio/api/ApiController.java\n", "chunk": "@@ -10,7 +9,6 @@ import de.bonndan.nivio.model.*;\n import de.bonndan.nivio.util.URLHelper;\n import org.apache.lucene.facet.FacetResult;\n import org.slf4j.LoggerFactory;\n-import org.springframework.context.ApplicationEventPublisher;\n import org.springframework.http.HttpStatus;\n import org.springframework.http.MediaType;\n import org.springframework.http.ResponseEntity;\n", "next_change": {"commit": "9637ad57ac61e0f76e86bfe81d033934e4e6b90f", "changed_code": [{"header": "diff --git a/src/main/java/de/bonndan/nivio/api/ApiController.java b/src/main/java/de/bonndan/nivio/api/ApiController.java\nindex 882b1327..1b64a0b3 100644\n--- a/src/main/java/de/bonndan/nivio/api/ApiController.java\n+++ b/src/main/java/de/bonndan/nivio/api/ApiController.java\n", "chunk": "@@ -9,6 +11,7 @@ import de.bonndan.nivio.model.*;\n import de.bonndan.nivio.util.URLHelper;\n import org.apache.lucene.facet.FacetResult;\n import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationEventPublisher;\n import org.springframework.http.HttpStatus;\n import org.springframework.http.MediaType;\n import org.springframework.http.ResponseEntity;\n", "next_change": {"commit": "5349f58fe57c0a021d250e589ccd7752b63b151a", "changed_code": [{"header": "diff --git a/src/main/java/de/bonndan/nivio/api/ApiController.java b/src/main/java/de/bonndan/nivio/api/ApiController.java\nindex 1b64a0b3..d91ae72d 100644\n--- a/src/main/java/de/bonndan/nivio/api/ApiController.java\n+++ b/src/main/java/de/bonndan/nivio/api/ApiController.java\n", "chunk": "@@ -1,26 +1,21 @@\n package de.bonndan.nivio.api;\n \n-import de.bonndan.nivio.input.ProcessingException;\n-import de.bonndan.nivio.IndexEvent;\n-import de.bonndan.nivio.ProcessingException;\n-import de.bonndan.nivio.input.*;\n-import de.bonndan.nivio.input.dto.ItemDescription;\n+import de.bonndan.nivio.input.IndexingDispatcher;\n+import de.bonndan.nivio.input.ProcessLog;\n import de.bonndan.nivio.input.dto.LandscapeDescription;\n-import de.bonndan.nivio.input.dto.SourceReference;\n import de.bonndan.nivio.model.*;\n-import de.bonndan.nivio.util.URLHelper;\n import org.apache.lucene.facet.FacetResult;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.context.ApplicationEventPublisher;\n import org.springframework.http.HttpStatus;\n import org.springframework.http.MediaType;\n import org.springframework.http.ResponseEntity;\n-import org.springframework.util.StringUtils;\n import org.springframework.web.bind.annotation.*;\n \n-import java.io.File;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n import java.net.URL;\n-import java.util.*;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n \n @RestController\n @RequestMapping(path = ApiController.PATH)\n", "next_change": {"commit": "9f057b6dce409892336a2a0bdefc6692986ac9b4", "changed_code": [{"header": "diff --git a/src/main/java/de/bonndan/nivio/api/ApiController.java b/src/main/java/de/bonndan/nivio/api/ApiController.java\nindex d91ae72d..7a535e4c 100644\n--- a/src/main/java/de/bonndan/nivio/api/ApiController.java\n+++ b/src/main/java/de/bonndan/nivio/api/ApiController.java\n", "chunk": "@@ -21,6 +23,8 @@ import java.util.Set;\n @RequestMapping(path = ApiController.PATH)\n public class ApiController {\n \n+    private static final Logger LOGGER = LoggerFactory.getLogger(ApiController.class);\n+\n     public static final String PATH = \"/api\";\n \n     private final LandscapeRepository landscapeRepository;\n", "next_change": {"commit": "14c815b838e17c4ba983334d640aa98cad74af4d", "changed_code": [{"header": "diff --git a/src/main/java/de/bonndan/nivio/api/ApiController.java b/src/main/java/de/bonndan/nivio/api/ApiController.java\nindex 7a535e4c..dc0955f9 100644\n--- a/src/main/java/de/bonndan/nivio/api/ApiController.java\n+++ b/src/main/java/de/bonndan/nivio/api/ApiController.java\n", "chunk": "@@ -30,21 +34,24 @@ public class ApiController {\n     private final LandscapeRepository landscapeRepository;\n     private final LinkFactory linkFactory;\n     private final IndexingDispatcher indexingDispatcher;\n+    private final FrontendMapping frontendMapping;\n \n     public ApiController(LandscapeRepository landscapeRepository,\n                          LinkFactory linkFactory,\n-                         IndexingDispatcher indexingDispatcher\n+                         IndexingDispatcher indexingDispatcher,\n+                         FrontendMapping frontendMapping\n     ) {\n         this.landscapeRepository = landscapeRepository;\n         this.linkFactory = linkFactory;\n         this.indexingDispatcher = indexingDispatcher;\n+        this.frontendMapping = frontendMapping;\n     }\n \n     /**\n      * Overview on all landscapes.\n      */\n     @CrossOrigin(methods = RequestMethod.GET)\n-    @RequestMapping(path = \"/\", produces = MediaType.APPLICATION_JSON_VALUE)\n+    @GetMapping(path = \"/\", produces = MediaType.APPLICATION_JSON_VALUE)\n     public Index index() {\n         return linkFactory.getIndex(landscapeRepository.findAll());\n     }\n", "next_change": {"commit": "40f45b41f158df5b05d6c0109d115f632183144f", "changed_code": [{"header": "diff --git a/src/main/java/de/bonndan/nivio/api/ApiController.java b/src/main/java/de/bonndan/nivio/api/ApiController.java\nindex dc0955f9..750ba493 100644\n--- a/src/main/java/de/bonndan/nivio/api/ApiController.java\n+++ b/src/main/java/de/bonndan/nivio/api/ApiController.java\n", "chunk": "@@ -48,7 +48,7 @@ public class ApiController {\n     }\n \n     /**\n-     * Overview on all landscapes.\n+     * Overview about config properties, all landscapes and oauth2Links\n      */\n     @CrossOrigin(methods = RequestMethod.GET)\n     @GetMapping(path = \"/\", produces = MediaType.APPLICATION_JSON_VALUE)\n", "next_change": {"commit": "9530c875d0cc0b17b9e6b13415804d3e56fa2fae", "changed_code": [{"header": "diff --git a/src/main/java/de/bonndan/nivio/api/ApiController.java b/src/main/java/de/bonndan/nivio/api/ApiController.java\nindex 750ba493..4d1eebac 100644\n--- a/src/main/java/de/bonndan/nivio/api/ApiController.java\n+++ b/src/main/java/de/bonndan/nivio/api/ApiController.java\n", "chunk": "@@ -39,17 +42,15 @@ public class ApiController {\n     public ApiController(LandscapeRepository landscapeRepository,\n                          LinkFactory linkFactory,\n                          IndexingDispatcher indexingDispatcher,\n-                         FrontendMapping frontendMapping) {\n-\n+                         FrontendMapping frontendMapping\n+    ) {\n         this.landscapeRepository = landscapeRepository;\n         this.linkFactory = linkFactory;\n         this.indexingDispatcher = indexingDispatcher;\n         this.frontendMapping = frontendMapping;\n     }\n \n-    /**\n-     * Overview about config properties, all landscapes and oauth2Links\n-     */\n+    @Operation(summary = \"Overview on all landscape and global configuration\")\n     @CrossOrigin(methods = RequestMethod.GET)\n     @GetMapping(path = \"/\", produces = MediaType.APPLICATION_JSON_VALUE)\n     public Index index() {\n", "next_change": {"commit": "26629eadcfe09de106036d8e64fca70dda42beca", "changed_code": [{"header": "diff --git a/src/main/java/de/bonndan/nivio/api/ApiController.java b/src/main/java/de/bonndan/nivio/api/ApiController.java\nindex 4d1eebac..087e917f 100644\n--- a/src/main/java/de/bonndan/nivio/api/ApiController.java\n+++ b/src/main/java/de/bonndan/nivio/api/ApiController.java\n", "chunk": "@@ -50,7 +50,9 @@ public class ApiController {\n         this.frontendMapping = frontendMapping;\n     }\n \n-    @Operation(summary = \"Overview on all landscape and global configuration\")\n+    /**\n+     * Overview on all landscapes.\n+     */\n     @CrossOrigin(methods = RequestMethod.GET)\n     @GetMapping(path = \"/\", produces = MediaType.APPLICATION_JSON_VALUE)\n     public Index index() {\n", "next_change": {"commit": "91072d5cbc92384709f759b48c0f84b64a5166a3", "changed_code": [{"header": "diff --git a/src/main/java/de/bonndan/nivio/api/ApiController.java b/src/main/java/de/bonndan/nivio/api/ApiController.java\nindex 087e917f..776bef02 100644\n--- a/src/main/java/de/bonndan/nivio/api/ApiController.java\n+++ b/src/main/java/de/bonndan/nivio/api/ApiController.java\n", "chunk": "@@ -50,9 +51,7 @@ public class ApiController {\n         this.frontendMapping = frontendMapping;\n     }\n \n-    /**\n-     * Overview on all landscapes.\n-     */\n+    @Operation(summary = \"Overview on all landscape and global configuration\")\n     @CrossOrigin(methods = RequestMethod.GET)\n     @GetMapping(path = \"/\", produces = MediaType.APPLICATION_JSON_VALUE)\n     public Index index() {\n", "next_change": {"commit": "16c2cfe87cd94f431eaa06c3987fddfe64f7f70d", "changed_code": [{"header": "diff --git a/src/main/java/de/bonndan/nivio/api/ApiController.java b/src/main/java/de/bonndan/nivio/api/ApiController.java\nindex 776bef02..14369925 100644\n--- a/src/main/java/de/bonndan/nivio/api/ApiController.java\n+++ b/src/main/java/de/bonndan/nivio/api/ApiController.java\n", "chunk": "@@ -52,7 +50,6 @@ public class ApiController {\n     }\n \n     @Operation(summary = \"Overview on all landscape and global configuration\")\n-    @CrossOrigin(methods = RequestMethod.GET)\n     @GetMapping(path = \"/\", produces = MediaType.APPLICATION_JSON_VALUE)\n     public Index index() {\n         return linkFactory.getIndex(landscapeRepository.findAll());\n", "next_change": null}, {"header": "diff --git a/src/main/java/de/bonndan/nivio/api/ApiController.java b/src/main/java/de/bonndan/nivio/api/ApiController.java\nindex 776bef02..14369925 100644\n--- a/src/main/java/de/bonndan/nivio/api/ApiController.java\n+++ b/src/main/java/de/bonndan/nivio/api/ApiController.java\n", "chunk": "@@ -60,7 +57,6 @@ public class ApiController {\n \n \n     @Operation(summary = \"This resource serves a landscape and can be addressed by using a fully qualified identifier\")\n-    @CrossOrigin(methods = RequestMethod.GET)\n     @GetMapping(path = \"/{landscapeIdentifier}\", produces = MediaType.APPLICATION_JSON_VALUE)\n     public ResponseEntity<LandscapeApiModel> landscape(@PathVariable String landscapeIdentifier) {\n         Landscape landscape = landscapeRepository.findDistinctByIdentifier(landscapeIdentifier).orElse(null);\n", "next_change": null}]}}, {"header": "diff --git a/src/main/java/de/bonndan/nivio/api/ApiController.java b/src/main/java/de/bonndan/nivio/api/ApiController.java\nindex 087e917f..776bef02 100644\n--- a/src/main/java/de/bonndan/nivio/api/ApiController.java\n+++ b/src/main/java/de/bonndan/nivio/api/ApiController.java\n", "chunk": "@@ -60,11 +59,7 @@ public class ApiController {\n     }\n \n \n-    /**\n-     * This resource serves a landscape DTO and can be addressed by using a {@link FullyQualifiedIdentifier}\n-     *\n-     * @return response entity of landscape\n-     */\n+    @Operation(summary = \"This resource serves a landscape and can be addressed by using a fully qualified identifier\")\n     @CrossOrigin(methods = RequestMethod.GET)\n     @GetMapping(path = \"/{landscapeIdentifier}\", produces = MediaType.APPLICATION_JSON_VALUE)\n     public ResponseEntity<LandscapeApiModel> landscape(@PathVariable String landscapeIdentifier) {\n", "next_change": {"commit": "16c2cfe87cd94f431eaa06c3987fddfe64f7f70d", "changed_code": [{"header": "diff --git a/src/main/java/de/bonndan/nivio/api/ApiController.java b/src/main/java/de/bonndan/nivio/api/ApiController.java\nindex 776bef02..14369925 100644\n--- a/src/main/java/de/bonndan/nivio/api/ApiController.java\n+++ b/src/main/java/de/bonndan/nivio/api/ApiController.java\n", "chunk": "@@ -60,7 +57,6 @@ public class ApiController {\n \n \n     @Operation(summary = \"This resource serves a landscape and can be addressed by using a fully qualified identifier\")\n-    @CrossOrigin(methods = RequestMethod.GET)\n     @GetMapping(path = \"/{landscapeIdentifier}\", produces = MediaType.APPLICATION_JSON_VALUE)\n     public ResponseEntity<LandscapeApiModel> landscape(@PathVariable String landscapeIdentifier) {\n         Landscape landscape = landscapeRepository.findDistinctByIdentifier(landscapeIdentifier).orElse(null);\n", "next_change": null}]}}]}}, {"header": "diff --git a/src/main/java/de/bonndan/nivio/api/ApiController.java b/src/main/java/de/bonndan/nivio/api/ApiController.java\nindex 4d1eebac..087e917f 100644\n--- a/src/main/java/de/bonndan/nivio/api/ApiController.java\n+++ b/src/main/java/de/bonndan/nivio/api/ApiController.java\n", "chunk": "@@ -58,7 +60,11 @@ public class ApiController {\n     }\n \n \n-    @Operation(summary = \"This resource serves a landscape and can be addressed by using a fully qualified identifier\")\n+    /**\n+     * This resource serves a landscape DTO and can be addressed by using a {@link FullyQualifiedIdentifier}\n+     *\n+     * @return response entity of landscape\n+     */\n     @CrossOrigin(methods = RequestMethod.GET)\n     @GetMapping(path = \"/{landscapeIdentifier}\", produces = MediaType.APPLICATION_JSON_VALUE)\n     public ResponseEntity<LandscapeApiModel> landscape(@PathVariable String landscapeIdentifier) {\n", "next_change": {"commit": "91072d5cbc92384709f759b48c0f84b64a5166a3", "changed_code": [{"header": "diff --git a/src/main/java/de/bonndan/nivio/api/ApiController.java b/src/main/java/de/bonndan/nivio/api/ApiController.java\nindex 087e917f..776bef02 100644\n--- a/src/main/java/de/bonndan/nivio/api/ApiController.java\n+++ b/src/main/java/de/bonndan/nivio/api/ApiController.java\n", "chunk": "@@ -60,11 +59,7 @@ public class ApiController {\n     }\n \n \n-    /**\n-     * This resource serves a landscape DTO and can be addressed by using a {@link FullyQualifiedIdentifier}\n-     *\n-     * @return response entity of landscape\n-     */\n+    @Operation(summary = \"This resource serves a landscape and can be addressed by using a fully qualified identifier\")\n     @CrossOrigin(methods = RequestMethod.GET)\n     @GetMapping(path = \"/{landscapeIdentifier}\", produces = MediaType.APPLICATION_JSON_VALUE)\n     public ResponseEntity<LandscapeApiModel> landscape(@PathVariable String landscapeIdentifier) {\n", "next_change": {"commit": "16c2cfe87cd94f431eaa06c3987fddfe64f7f70d", "changed_code": [{"header": "diff --git a/src/main/java/de/bonndan/nivio/api/ApiController.java b/src/main/java/de/bonndan/nivio/api/ApiController.java\nindex 776bef02..14369925 100644\n--- a/src/main/java/de/bonndan/nivio/api/ApiController.java\n+++ b/src/main/java/de/bonndan/nivio/api/ApiController.java\n", "chunk": "@@ -60,7 +57,6 @@ public class ApiController {\n \n \n     @Operation(summary = \"This resource serves a landscape and can be addressed by using a fully qualified identifier\")\n-    @CrossOrigin(methods = RequestMethod.GET)\n     @GetMapping(path = \"/{landscapeIdentifier}\", produces = MediaType.APPLICATION_JSON_VALUE)\n     public ResponseEntity<LandscapeApiModel> landscape(@PathVariable String landscapeIdentifier) {\n         Landscape landscape = landscapeRepository.findDistinctByIdentifier(landscapeIdentifier).orElse(null);\n", "next_change": null}]}}]}}]}}, {"header": "diff --git a/src/main/java/de/bonndan/nivio/api/ApiController.java b/src/main/java/de/bonndan/nivio/api/ApiController.java\nindex 750ba493..4d1eebac 100644\n--- a/src/main/java/de/bonndan/nivio/api/ApiController.java\n+++ b/src/main/java/de/bonndan/nivio/api/ApiController.java\n", "chunk": "@@ -57,11 +58,7 @@ public class ApiController {\n     }\n \n \n-    /**\n-     * This resource serves a landscape DTO and can be addressed by using a {@link FullyQualifiedIdentifier}\n-     *\n-     * @return response entity of landscape\n-     */\n+    @Operation(summary = \"This resource serves a landscape and can be addressed by using a fully qualified identifier\")\n     @CrossOrigin(methods = RequestMethod.GET)\n     @GetMapping(path = \"/{landscapeIdentifier}\", produces = MediaType.APPLICATION_JSON_VALUE)\n     public ResponseEntity<LandscapeApiModel> landscape(@PathVariable String landscapeIdentifier) {\n", "next_change": {"commit": "26629eadcfe09de106036d8e64fca70dda42beca", "changed_code": [{"header": "diff --git a/src/main/java/de/bonndan/nivio/api/ApiController.java b/src/main/java/de/bonndan/nivio/api/ApiController.java\nindex 4d1eebac..087e917f 100644\n--- a/src/main/java/de/bonndan/nivio/api/ApiController.java\n+++ b/src/main/java/de/bonndan/nivio/api/ApiController.java\n", "chunk": "@@ -58,7 +60,11 @@ public class ApiController {\n     }\n \n \n-    @Operation(summary = \"This resource serves a landscape and can be addressed by using a fully qualified identifier\")\n+    /**\n+     * This resource serves a landscape DTO and can be addressed by using a {@link FullyQualifiedIdentifier}\n+     *\n+     * @return response entity of landscape\n+     */\n     @CrossOrigin(methods = RequestMethod.GET)\n     @GetMapping(path = \"/{landscapeIdentifier}\", produces = MediaType.APPLICATION_JSON_VALUE)\n     public ResponseEntity<LandscapeApiModel> landscape(@PathVariable String landscapeIdentifier) {\n", "next_change": {"commit": "91072d5cbc92384709f759b48c0f84b64a5166a3", "changed_code": [{"header": "diff --git a/src/main/java/de/bonndan/nivio/api/ApiController.java b/src/main/java/de/bonndan/nivio/api/ApiController.java\nindex 087e917f..776bef02 100644\n--- a/src/main/java/de/bonndan/nivio/api/ApiController.java\n+++ b/src/main/java/de/bonndan/nivio/api/ApiController.java\n", "chunk": "@@ -60,11 +59,7 @@ public class ApiController {\n     }\n \n \n-    /**\n-     * This resource serves a landscape DTO and can be addressed by using a {@link FullyQualifiedIdentifier}\n-     *\n-     * @return response entity of landscape\n-     */\n+    @Operation(summary = \"This resource serves a landscape and can be addressed by using a fully qualified identifier\")\n     @CrossOrigin(methods = RequestMethod.GET)\n     @GetMapping(path = \"/{landscapeIdentifier}\", produces = MediaType.APPLICATION_JSON_VALUE)\n     public ResponseEntity<LandscapeApiModel> landscape(@PathVariable String landscapeIdentifier) {\n", "next_change": {"commit": "16c2cfe87cd94f431eaa06c3987fddfe64f7f70d", "changed_code": [{"header": "diff --git a/src/main/java/de/bonndan/nivio/api/ApiController.java b/src/main/java/de/bonndan/nivio/api/ApiController.java\nindex 776bef02..14369925 100644\n--- a/src/main/java/de/bonndan/nivio/api/ApiController.java\n+++ b/src/main/java/de/bonndan/nivio/api/ApiController.java\n", "chunk": "@@ -60,7 +57,6 @@ public class ApiController {\n \n \n     @Operation(summary = \"This resource serves a landscape and can be addressed by using a fully qualified identifier\")\n-    @CrossOrigin(methods = RequestMethod.GET)\n     @GetMapping(path = \"/{landscapeIdentifier}\", produces = MediaType.APPLICATION_JSON_VALUE)\n     public ResponseEntity<LandscapeApiModel> landscape(@PathVariable String landscapeIdentifier) {\n         Landscape landscape = landscapeRepository.findDistinctByIdentifier(landscapeIdentifier).orElse(null);\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"header": "diff --git a/src/main/java/de/bonndan/nivio/api/ApiController.java b/src/main/java/de/bonndan/nivio/api/ApiController.java\nindex 8bb50c82..b8e4f2cc 100644\n--- a/src/main/java/de/bonndan/nivio/api/ApiController.java\n+++ b/src/main/java/de/bonndan/nivio/api/ApiController.java\n", "chunk": "@@ -17,10 +15,7 @@ import org.springframework.web.bind.annotation.*;\n \n import java.io.File;\n import java.net.URL;\n-import java.util.List;\n-import java.util.Objects;\n-import java.util.Optional;\n-import java.util.stream.StreamSupport;\n+import java.util.*;\n \n @RestController\n @RequestMapping(path = ApiController.PATH)\n", "next_change": {"commit": "e20bd666edb9a2aa31d7aba78b6a81562e4e4c95", "changed_code": [{"header": "diff --git a/src/main/java/de/bonndan/nivio/api/ApiController.java b/src/main/java/de/bonndan/nivio/api/ApiController.java\nindex b8e4f2cc..6c5db042 100644\n--- a/src/main/java/de/bonndan/nivio/api/ApiController.java\n+++ b/src/main/java/de/bonndan/nivio/api/ApiController.java\n", "chunk": "@@ -16,6 +18,7 @@ import org.springframework.web.bind.annotation.*;\n import java.io.File;\n import java.net.URL;\n import java.util.*;\n+import java.util.stream.Collectors;\n \n @RestController\n @RequestMapping(path = ApiController.PATH)\n", "next_change": {"commit": "9637ad57ac61e0f76e86bfe81d033934e4e6b90f", "changed_code": [{"header": "diff --git a/src/main/java/de/bonndan/nivio/api/ApiController.java b/src/main/java/de/bonndan/nivio/api/ApiController.java\nindex 6c5db042..1b64a0b3 100644\n--- a/src/main/java/de/bonndan/nivio/api/ApiController.java\n+++ b/src/main/java/de/bonndan/nivio/api/ApiController.java\n", "chunk": "@@ -18,7 +21,6 @@ import org.springframework.web.bind.annotation.*;\n import java.io.File;\n import java.net.URL;\n import java.util.*;\n-import java.util.stream.Collectors;\n \n @RestController\n @RequestMapping(path = ApiController.PATH)\n", "next_change": {"commit": "5349f58fe57c0a021d250e589ccd7752b63b151a", "changed_code": [{"header": "diff --git a/src/main/java/de/bonndan/nivio/api/ApiController.java b/src/main/java/de/bonndan/nivio/api/ApiController.java\nindex 1b64a0b3..d91ae72d 100644\n--- a/src/main/java/de/bonndan/nivio/api/ApiController.java\n+++ b/src/main/java/de/bonndan/nivio/api/ApiController.java\n", "chunk": "@@ -1,26 +1,21 @@\n package de.bonndan.nivio.api;\n \n-import de.bonndan.nivio.input.ProcessingException;\n-import de.bonndan.nivio.IndexEvent;\n-import de.bonndan.nivio.ProcessingException;\n-import de.bonndan.nivio.input.*;\n-import de.bonndan.nivio.input.dto.ItemDescription;\n+import de.bonndan.nivio.input.IndexingDispatcher;\n+import de.bonndan.nivio.input.ProcessLog;\n import de.bonndan.nivio.input.dto.LandscapeDescription;\n-import de.bonndan.nivio.input.dto.SourceReference;\n import de.bonndan.nivio.model.*;\n-import de.bonndan.nivio.util.URLHelper;\n import org.apache.lucene.facet.FacetResult;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.context.ApplicationEventPublisher;\n import org.springframework.http.HttpStatus;\n import org.springframework.http.MediaType;\n import org.springframework.http.ResponseEntity;\n-import org.springframework.util.StringUtils;\n import org.springframework.web.bind.annotation.*;\n \n-import java.io.File;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n import java.net.URL;\n-import java.util.*;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n \n @RestController\n @RequestMapping(path = ApiController.PATH)\n", "next_change": {"commit": "9f057b6dce409892336a2a0bdefc6692986ac9b4", "changed_code": [{"header": "diff --git a/src/main/java/de/bonndan/nivio/api/ApiController.java b/src/main/java/de/bonndan/nivio/api/ApiController.java\nindex d91ae72d..7a535e4c 100644\n--- a/src/main/java/de/bonndan/nivio/api/ApiController.java\n+++ b/src/main/java/de/bonndan/nivio/api/ApiController.java\n", "chunk": "@@ -21,6 +23,8 @@ import java.util.Set;\n @RequestMapping(path = ApiController.PATH)\n public class ApiController {\n \n+    private static final Logger LOGGER = LoggerFactory.getLogger(ApiController.class);\n+\n     public static final String PATH = \"/api\";\n \n     private final LandscapeRepository landscapeRepository;\n", "next_change": {"commit": "14c815b838e17c4ba983334d640aa98cad74af4d", "changed_code": [{"header": "diff --git a/src/main/java/de/bonndan/nivio/api/ApiController.java b/src/main/java/de/bonndan/nivio/api/ApiController.java\nindex 7a535e4c..dc0955f9 100644\n--- a/src/main/java/de/bonndan/nivio/api/ApiController.java\n+++ b/src/main/java/de/bonndan/nivio/api/ApiController.java\n", "chunk": "@@ -30,21 +34,24 @@ public class ApiController {\n     private final LandscapeRepository landscapeRepository;\n     private final LinkFactory linkFactory;\n     private final IndexingDispatcher indexingDispatcher;\n+    private final FrontendMapping frontendMapping;\n \n     public ApiController(LandscapeRepository landscapeRepository,\n                          LinkFactory linkFactory,\n-                         IndexingDispatcher indexingDispatcher\n+                         IndexingDispatcher indexingDispatcher,\n+                         FrontendMapping frontendMapping\n     ) {\n         this.landscapeRepository = landscapeRepository;\n         this.linkFactory = linkFactory;\n         this.indexingDispatcher = indexingDispatcher;\n+        this.frontendMapping = frontendMapping;\n     }\n \n     /**\n      * Overview on all landscapes.\n      */\n     @CrossOrigin(methods = RequestMethod.GET)\n-    @RequestMapping(path = \"/\", produces = MediaType.APPLICATION_JSON_VALUE)\n+    @GetMapping(path = \"/\", produces = MediaType.APPLICATION_JSON_VALUE)\n     public Index index() {\n         return linkFactory.getIndex(landscapeRepository.findAll());\n     }\n", "next_change": {"commit": "40f45b41f158df5b05d6c0109d115f632183144f", "changed_code": [{"header": "diff --git a/src/main/java/de/bonndan/nivio/api/ApiController.java b/src/main/java/de/bonndan/nivio/api/ApiController.java\nindex dc0955f9..750ba493 100644\n--- a/src/main/java/de/bonndan/nivio/api/ApiController.java\n+++ b/src/main/java/de/bonndan/nivio/api/ApiController.java\n", "chunk": "@@ -48,7 +48,7 @@ public class ApiController {\n     }\n \n     /**\n-     * Overview on all landscapes.\n+     * Overview about config properties, all landscapes and oauth2Links\n      */\n     @CrossOrigin(methods = RequestMethod.GET)\n     @GetMapping(path = \"/\", produces = MediaType.APPLICATION_JSON_VALUE)\n", "next_change": {"commit": "9530c875d0cc0b17b9e6b13415804d3e56fa2fae", "changed_code": [{"header": "diff --git a/src/main/java/de/bonndan/nivio/api/ApiController.java b/src/main/java/de/bonndan/nivio/api/ApiController.java\nindex 750ba493..4d1eebac 100644\n--- a/src/main/java/de/bonndan/nivio/api/ApiController.java\n+++ b/src/main/java/de/bonndan/nivio/api/ApiController.java\n", "chunk": "@@ -39,17 +42,15 @@ public class ApiController {\n     public ApiController(LandscapeRepository landscapeRepository,\n                          LinkFactory linkFactory,\n                          IndexingDispatcher indexingDispatcher,\n-                         FrontendMapping frontendMapping) {\n-\n+                         FrontendMapping frontendMapping\n+    ) {\n         this.landscapeRepository = landscapeRepository;\n         this.linkFactory = linkFactory;\n         this.indexingDispatcher = indexingDispatcher;\n         this.frontendMapping = frontendMapping;\n     }\n \n-    /**\n-     * Overview about config properties, all landscapes and oauth2Links\n-     */\n+    @Operation(summary = \"Overview on all landscape and global configuration\")\n     @CrossOrigin(methods = RequestMethod.GET)\n     @GetMapping(path = \"/\", produces = MediaType.APPLICATION_JSON_VALUE)\n     public Index index() {\n", "next_change": {"commit": "26629eadcfe09de106036d8e64fca70dda42beca", "changed_code": [{"header": "diff --git a/src/main/java/de/bonndan/nivio/api/ApiController.java b/src/main/java/de/bonndan/nivio/api/ApiController.java\nindex 4d1eebac..087e917f 100644\n--- a/src/main/java/de/bonndan/nivio/api/ApiController.java\n+++ b/src/main/java/de/bonndan/nivio/api/ApiController.java\n", "chunk": "@@ -50,7 +50,9 @@ public class ApiController {\n         this.frontendMapping = frontendMapping;\n     }\n \n-    @Operation(summary = \"Overview on all landscape and global configuration\")\n+    /**\n+     * Overview on all landscapes.\n+     */\n     @CrossOrigin(methods = RequestMethod.GET)\n     @GetMapping(path = \"/\", produces = MediaType.APPLICATION_JSON_VALUE)\n     public Index index() {\n", "next_change": {"commit": "91072d5cbc92384709f759b48c0f84b64a5166a3", "changed_code": [{"header": "diff --git a/src/main/java/de/bonndan/nivio/api/ApiController.java b/src/main/java/de/bonndan/nivio/api/ApiController.java\nindex 087e917f..776bef02 100644\n--- a/src/main/java/de/bonndan/nivio/api/ApiController.java\n+++ b/src/main/java/de/bonndan/nivio/api/ApiController.java\n", "chunk": "@@ -50,9 +51,7 @@ public class ApiController {\n         this.frontendMapping = frontendMapping;\n     }\n \n-    /**\n-     * Overview on all landscapes.\n-     */\n+    @Operation(summary = \"Overview on all landscape and global configuration\")\n     @CrossOrigin(methods = RequestMethod.GET)\n     @GetMapping(path = \"/\", produces = MediaType.APPLICATION_JSON_VALUE)\n     public Index index() {\n", "next_change": {"commit": "16c2cfe87cd94f431eaa06c3987fddfe64f7f70d", "changed_code": [{"header": "diff --git a/src/main/java/de/bonndan/nivio/api/ApiController.java b/src/main/java/de/bonndan/nivio/api/ApiController.java\nindex 776bef02..14369925 100644\n--- a/src/main/java/de/bonndan/nivio/api/ApiController.java\n+++ b/src/main/java/de/bonndan/nivio/api/ApiController.java\n", "chunk": "@@ -52,7 +50,6 @@ public class ApiController {\n     }\n \n     @Operation(summary = \"Overview on all landscape and global configuration\")\n-    @CrossOrigin(methods = RequestMethod.GET)\n     @GetMapping(path = \"/\", produces = MediaType.APPLICATION_JSON_VALUE)\n     public Index index() {\n         return linkFactory.getIndex(landscapeRepository.findAll());\n", "next_change": null}, {"header": "diff --git a/src/main/java/de/bonndan/nivio/api/ApiController.java b/src/main/java/de/bonndan/nivio/api/ApiController.java\nindex 776bef02..14369925 100644\n--- a/src/main/java/de/bonndan/nivio/api/ApiController.java\n+++ b/src/main/java/de/bonndan/nivio/api/ApiController.java\n", "chunk": "@@ -60,7 +57,6 @@ public class ApiController {\n \n \n     @Operation(summary = \"This resource serves a landscape and can be addressed by using a fully qualified identifier\")\n-    @CrossOrigin(methods = RequestMethod.GET)\n     @GetMapping(path = \"/{landscapeIdentifier}\", produces = MediaType.APPLICATION_JSON_VALUE)\n     public ResponseEntity<LandscapeApiModel> landscape(@PathVariable String landscapeIdentifier) {\n         Landscape landscape = landscapeRepository.findDistinctByIdentifier(landscapeIdentifier).orElse(null);\n", "next_change": null}]}}, {"header": "diff --git a/src/main/java/de/bonndan/nivio/api/ApiController.java b/src/main/java/de/bonndan/nivio/api/ApiController.java\nindex 087e917f..776bef02 100644\n--- a/src/main/java/de/bonndan/nivio/api/ApiController.java\n+++ b/src/main/java/de/bonndan/nivio/api/ApiController.java\n", "chunk": "@@ -60,11 +59,7 @@ public class ApiController {\n     }\n \n \n-    /**\n-     * This resource serves a landscape DTO and can be addressed by using a {@link FullyQualifiedIdentifier}\n-     *\n-     * @return response entity of landscape\n-     */\n+    @Operation(summary = \"This resource serves a landscape and can be addressed by using a fully qualified identifier\")\n     @CrossOrigin(methods = RequestMethod.GET)\n     @GetMapping(path = \"/{landscapeIdentifier}\", produces = MediaType.APPLICATION_JSON_VALUE)\n     public ResponseEntity<LandscapeApiModel> landscape(@PathVariable String landscapeIdentifier) {\n", "next_change": {"commit": "16c2cfe87cd94f431eaa06c3987fddfe64f7f70d", "changed_code": [{"header": "diff --git a/src/main/java/de/bonndan/nivio/api/ApiController.java b/src/main/java/de/bonndan/nivio/api/ApiController.java\nindex 776bef02..14369925 100644\n--- a/src/main/java/de/bonndan/nivio/api/ApiController.java\n+++ b/src/main/java/de/bonndan/nivio/api/ApiController.java\n", "chunk": "@@ -60,7 +57,6 @@ public class ApiController {\n \n \n     @Operation(summary = \"This resource serves a landscape and can be addressed by using a fully qualified identifier\")\n-    @CrossOrigin(methods = RequestMethod.GET)\n     @GetMapping(path = \"/{landscapeIdentifier}\", produces = MediaType.APPLICATION_JSON_VALUE)\n     public ResponseEntity<LandscapeApiModel> landscape(@PathVariable String landscapeIdentifier) {\n         Landscape landscape = landscapeRepository.findDistinctByIdentifier(landscapeIdentifier).orElse(null);\n", "next_change": null}]}}]}}, {"header": "diff --git a/src/main/java/de/bonndan/nivio/api/ApiController.java b/src/main/java/de/bonndan/nivio/api/ApiController.java\nindex 4d1eebac..087e917f 100644\n--- a/src/main/java/de/bonndan/nivio/api/ApiController.java\n+++ b/src/main/java/de/bonndan/nivio/api/ApiController.java\n", "chunk": "@@ -58,7 +60,11 @@ public class ApiController {\n     }\n \n \n-    @Operation(summary = \"This resource serves a landscape and can be addressed by using a fully qualified identifier\")\n+    /**\n+     * This resource serves a landscape DTO and can be addressed by using a {@link FullyQualifiedIdentifier}\n+     *\n+     * @return response entity of landscape\n+     */\n     @CrossOrigin(methods = RequestMethod.GET)\n     @GetMapping(path = \"/{landscapeIdentifier}\", produces = MediaType.APPLICATION_JSON_VALUE)\n     public ResponseEntity<LandscapeApiModel> landscape(@PathVariable String landscapeIdentifier) {\n", "next_change": {"commit": "91072d5cbc92384709f759b48c0f84b64a5166a3", "changed_code": [{"header": "diff --git a/src/main/java/de/bonndan/nivio/api/ApiController.java b/src/main/java/de/bonndan/nivio/api/ApiController.java\nindex 087e917f..776bef02 100644\n--- a/src/main/java/de/bonndan/nivio/api/ApiController.java\n+++ b/src/main/java/de/bonndan/nivio/api/ApiController.java\n", "chunk": "@@ -60,11 +59,7 @@ public class ApiController {\n     }\n \n \n-    /**\n-     * This resource serves a landscape DTO and can be addressed by using a {@link FullyQualifiedIdentifier}\n-     *\n-     * @return response entity of landscape\n-     */\n+    @Operation(summary = \"This resource serves a landscape and can be addressed by using a fully qualified identifier\")\n     @CrossOrigin(methods = RequestMethod.GET)\n     @GetMapping(path = \"/{landscapeIdentifier}\", produces = MediaType.APPLICATION_JSON_VALUE)\n     public ResponseEntity<LandscapeApiModel> landscape(@PathVariable String landscapeIdentifier) {\n", "next_change": {"commit": "16c2cfe87cd94f431eaa06c3987fddfe64f7f70d", "changed_code": [{"header": "diff --git a/src/main/java/de/bonndan/nivio/api/ApiController.java b/src/main/java/de/bonndan/nivio/api/ApiController.java\nindex 776bef02..14369925 100644\n--- a/src/main/java/de/bonndan/nivio/api/ApiController.java\n+++ b/src/main/java/de/bonndan/nivio/api/ApiController.java\n", "chunk": "@@ -60,7 +57,6 @@ public class ApiController {\n \n \n     @Operation(summary = \"This resource serves a landscape and can be addressed by using a fully qualified identifier\")\n-    @CrossOrigin(methods = RequestMethod.GET)\n     @GetMapping(path = \"/{landscapeIdentifier}\", produces = MediaType.APPLICATION_JSON_VALUE)\n     public ResponseEntity<LandscapeApiModel> landscape(@PathVariable String landscapeIdentifier) {\n         Landscape landscape = landscapeRepository.findDistinctByIdentifier(landscapeIdentifier).orElse(null);\n", "next_change": null}]}}]}}]}}, {"header": "diff --git a/src/main/java/de/bonndan/nivio/api/ApiController.java b/src/main/java/de/bonndan/nivio/api/ApiController.java\nindex 750ba493..4d1eebac 100644\n--- a/src/main/java/de/bonndan/nivio/api/ApiController.java\n+++ b/src/main/java/de/bonndan/nivio/api/ApiController.java\n", "chunk": "@@ -57,11 +58,7 @@ public class ApiController {\n     }\n \n \n-    /**\n-     * This resource serves a landscape DTO and can be addressed by using a {@link FullyQualifiedIdentifier}\n-     *\n-     * @return response entity of landscape\n-     */\n+    @Operation(summary = \"This resource serves a landscape and can be addressed by using a fully qualified identifier\")\n     @CrossOrigin(methods = RequestMethod.GET)\n     @GetMapping(path = \"/{landscapeIdentifier}\", produces = MediaType.APPLICATION_JSON_VALUE)\n     public ResponseEntity<LandscapeApiModel> landscape(@PathVariable String landscapeIdentifier) {\n", "next_change": {"commit": "26629eadcfe09de106036d8e64fca70dda42beca", "changed_code": [{"header": "diff --git a/src/main/java/de/bonndan/nivio/api/ApiController.java b/src/main/java/de/bonndan/nivio/api/ApiController.java\nindex 4d1eebac..087e917f 100644\n--- a/src/main/java/de/bonndan/nivio/api/ApiController.java\n+++ b/src/main/java/de/bonndan/nivio/api/ApiController.java\n", "chunk": "@@ -58,7 +60,11 @@ public class ApiController {\n     }\n \n \n-    @Operation(summary = \"This resource serves a landscape and can be addressed by using a fully qualified identifier\")\n+    /**\n+     * This resource serves a landscape DTO and can be addressed by using a {@link FullyQualifiedIdentifier}\n+     *\n+     * @return response entity of landscape\n+     */\n     @CrossOrigin(methods = RequestMethod.GET)\n     @GetMapping(path = \"/{landscapeIdentifier}\", produces = MediaType.APPLICATION_JSON_VALUE)\n     public ResponseEntity<LandscapeApiModel> landscape(@PathVariable String landscapeIdentifier) {\n", "next_change": {"commit": "91072d5cbc92384709f759b48c0f84b64a5166a3", "changed_code": [{"header": "diff --git a/src/main/java/de/bonndan/nivio/api/ApiController.java b/src/main/java/de/bonndan/nivio/api/ApiController.java\nindex 087e917f..776bef02 100644\n--- a/src/main/java/de/bonndan/nivio/api/ApiController.java\n+++ b/src/main/java/de/bonndan/nivio/api/ApiController.java\n", "chunk": "@@ -60,11 +59,7 @@ public class ApiController {\n     }\n \n \n-    /**\n-     * This resource serves a landscape DTO and can be addressed by using a {@link FullyQualifiedIdentifier}\n-     *\n-     * @return response entity of landscape\n-     */\n+    @Operation(summary = \"This resource serves a landscape and can be addressed by using a fully qualified identifier\")\n     @CrossOrigin(methods = RequestMethod.GET)\n     @GetMapping(path = \"/{landscapeIdentifier}\", produces = MediaType.APPLICATION_JSON_VALUE)\n     public ResponseEntity<LandscapeApiModel> landscape(@PathVariable String landscapeIdentifier) {\n", "next_change": {"commit": "16c2cfe87cd94f431eaa06c3987fddfe64f7f70d", "changed_code": [{"header": "diff --git a/src/main/java/de/bonndan/nivio/api/ApiController.java b/src/main/java/de/bonndan/nivio/api/ApiController.java\nindex 776bef02..14369925 100644\n--- a/src/main/java/de/bonndan/nivio/api/ApiController.java\n+++ b/src/main/java/de/bonndan/nivio/api/ApiController.java\n", "chunk": "@@ -60,7 +57,6 @@ public class ApiController {\n \n \n     @Operation(summary = \"This resource serves a landscape and can be addressed by using a fully qualified identifier\")\n-    @CrossOrigin(methods = RequestMethod.GET)\n     @GetMapping(path = \"/{landscapeIdentifier}\", produces = MediaType.APPLICATION_JSON_VALUE)\n     public ResponseEntity<LandscapeApiModel> landscape(@PathVariable String landscapeIdentifier) {\n         Landscape landscape = landscapeRepository.findDistinctByIdentifier(landscapeIdentifier).orElse(null);\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}, {"header": "diff --git a/src/main/java/de/bonndan/nivio/api/ApiController.java b/src/main/java/de/bonndan/nivio/api/ApiController.java\nindex 1b64a0b3..d91ae72d 100644\n--- a/src/main/java/de/bonndan/nivio/api/ApiController.java\n+++ b/src/main/java/de/bonndan/nivio/api/ApiController.java\n", "chunk": "@@ -29,24 +24,16 @@ public class ApiController {\n     public static final String PATH = \"/api\";\n \n     private final LandscapeRepository landscapeRepository;\n-    private final LandscapeDescriptionFactory landscapeDescriptionFactory;\n-    private final InputFormatHandlerFactory formatFactory;\n-    private final Indexer indexer;\n     private final LinkFactory linkFactory;\n-    private final ApplicationEventPublisher publisher;\n+    private final IndexingDispatcher indexingDispatcher;\n \n     public ApiController(LandscapeRepository landscapeRepository,\n-                         LandscapeDescriptionFactory landscapeDescriptionFactory,\n-                         InputFormatHandlerFactory formatFactory,\n-                         Indexer indexer,\n                          LinkFactory linkFactory,\n-                         ApplicationEventPublisher publisher) {\n+                         IndexingDispatcher indexingDispatcher\n+    ) {\n         this.landscapeRepository = landscapeRepository;\n-        this.landscapeDescriptionFactory = landscapeDescriptionFactory;\n-        this.formatFactory = formatFactory;\n-        this.indexer = indexer;\n         this.linkFactory = linkFactory;\n-        this.publisher = publisher;\n+        this.indexingDispatcher = indexingDispatcher;\n     }\n \n     /**\n", "next_change": {"commit": "c3aa2bf257072fd49560351bcb0d661411913caa", "changed_code": [{"header": "diff --git a/src/main/java/de/bonndan/nivio/api/ApiController.java b/src/main/java/de/bonndan/nivio/api/ApiController.java\nindex d91ae72d..f1982ff0 100644\n--- a/src/main/java/de/bonndan/nivio/api/ApiController.java\n+++ b/src/main/java/de/bonndan/nivio/api/ApiController.java\n", "chunk": "@@ -40,7 +44,7 @@ public class ApiController {\n      * Overview on all landscapes.\n      */\n     @CrossOrigin(methods = RequestMethod.GET)\n-    @RequestMapping(path = \"/\", produces = MediaType.APPLICATION_JSON_VALUE)\n+    @RequestMapping(path = \"/\", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)\n     public Index index() {\n         return linkFactory.getIndex(landscapeRepository.findAll());\n     }\n", "next_change": {"commit": "538afa4695f64b8e6ed7f513e25f12f52c851550", "changed_code": [{"header": "diff --git a/src/main/java/de/bonndan/nivio/api/ApiController.java b/src/main/java/de/bonndan/nivio/api/ApiController.java\nindex f1982ff0..bbd9bffd 100644\n--- a/src/main/java/de/bonndan/nivio/api/ApiController.java\n+++ b/src/main/java/de/bonndan/nivio/api/ApiController.java\n", "chunk": "@@ -44,7 +44,7 @@ public class ApiController {\n      * Overview on all landscapes.\n      */\n     @CrossOrigin(methods = RequestMethod.GET)\n-    @RequestMapping(path = \"/\", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)\n+    @GetMapping(path = \"/\", produces = MediaType.APPLICATION_JSON_VALUE)\n     public Index index() {\n         return linkFactory.getIndex(landscapeRepository.findAll());\n     }\n", "next_change": {"commit": "40f45b41f158df5b05d6c0109d115f632183144f", "changed_code": [{"header": "diff --git a/src/main/java/de/bonndan/nivio/api/ApiController.java b/src/main/java/de/bonndan/nivio/api/ApiController.java\nindex bbd9bffd..750ba493 100644\n--- a/src/main/java/de/bonndan/nivio/api/ApiController.java\n+++ b/src/main/java/de/bonndan/nivio/api/ApiController.java\n", "chunk": "@@ -16,32 +20,35 @@ import java.net.URI;\n import java.net.URISyntaxException;\n import java.net.URL;\n import java.util.List;\n+import java.util.Map;\n import java.util.Optional;\n import java.util.Set;\n+import java.util.stream.Collectors;\n \n @RestController\n @RequestMapping(path = ApiController.PATH)\n public class ApiController {\n \n-    private static final Logger LOGGER = LoggerFactory.getLogger(ApiController.class);\n-\n     public static final String PATH = \"/api\";\n-\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ApiController.class);\n     private final LandscapeRepository landscapeRepository;\n     private final LinkFactory linkFactory;\n     private final IndexingDispatcher indexingDispatcher;\n+    private final FrontendMapping frontendMapping;\n \n     public ApiController(LandscapeRepository landscapeRepository,\n                          LinkFactory linkFactory,\n-                         IndexingDispatcher indexingDispatcher\n-    ) {\n+                         IndexingDispatcher indexingDispatcher,\n+                         FrontendMapping frontendMapping) {\n+\n         this.landscapeRepository = landscapeRepository;\n         this.linkFactory = linkFactory;\n         this.indexingDispatcher = indexingDispatcher;\n+        this.frontendMapping = frontendMapping;\n     }\n \n     /**\n-     * Overview on all landscapes.\n+     * Overview about config properties, all landscapes and oauth2Links\n      */\n     @CrossOrigin(methods = RequestMethod.GET)\n     @GetMapping(path = \"/\", produces = MediaType.APPLICATION_JSON_VALUE)\n", "next_change": {"commit": "9530c875d0cc0b17b9e6b13415804d3e56fa2fae", "changed_code": [{"header": "diff --git a/src/main/java/de/bonndan/nivio/api/ApiController.java b/src/main/java/de/bonndan/nivio/api/ApiController.java\nindex 750ba493..4d1eebac 100644\n--- a/src/main/java/de/bonndan/nivio/api/ApiController.java\n+++ b/src/main/java/de/bonndan/nivio/api/ApiController.java\n", "chunk": "@@ -39,17 +42,15 @@ public class ApiController {\n     public ApiController(LandscapeRepository landscapeRepository,\n                          LinkFactory linkFactory,\n                          IndexingDispatcher indexingDispatcher,\n-                         FrontendMapping frontendMapping) {\n-\n+                         FrontendMapping frontendMapping\n+    ) {\n         this.landscapeRepository = landscapeRepository;\n         this.linkFactory = linkFactory;\n         this.indexingDispatcher = indexingDispatcher;\n         this.frontendMapping = frontendMapping;\n     }\n \n-    /**\n-     * Overview about config properties, all landscapes and oauth2Links\n-     */\n+    @Operation(summary = \"Overview on all landscape and global configuration\")\n     @CrossOrigin(methods = RequestMethod.GET)\n     @GetMapping(path = \"/\", produces = MediaType.APPLICATION_JSON_VALUE)\n     public Index index() {\n", "next_change": {"commit": "26629eadcfe09de106036d8e64fca70dda42beca", "changed_code": [{"header": "diff --git a/src/main/java/de/bonndan/nivio/api/ApiController.java b/src/main/java/de/bonndan/nivio/api/ApiController.java\nindex 4d1eebac..087e917f 100644\n--- a/src/main/java/de/bonndan/nivio/api/ApiController.java\n+++ b/src/main/java/de/bonndan/nivio/api/ApiController.java\n", "chunk": "@@ -50,7 +50,9 @@ public class ApiController {\n         this.frontendMapping = frontendMapping;\n     }\n \n-    @Operation(summary = \"Overview on all landscape and global configuration\")\n+    /**\n+     * Overview on all landscapes.\n+     */\n     @CrossOrigin(methods = RequestMethod.GET)\n     @GetMapping(path = \"/\", produces = MediaType.APPLICATION_JSON_VALUE)\n     public Index index() {\n", "next_change": {"commit": "91072d5cbc92384709f759b48c0f84b64a5166a3", "changed_code": [{"header": "diff --git a/src/main/java/de/bonndan/nivio/api/ApiController.java b/src/main/java/de/bonndan/nivio/api/ApiController.java\nindex 087e917f..776bef02 100644\n--- a/src/main/java/de/bonndan/nivio/api/ApiController.java\n+++ b/src/main/java/de/bonndan/nivio/api/ApiController.java\n", "chunk": "@@ -50,9 +51,7 @@ public class ApiController {\n         this.frontendMapping = frontendMapping;\n     }\n \n-    /**\n-     * Overview on all landscapes.\n-     */\n+    @Operation(summary = \"Overview on all landscape and global configuration\")\n     @CrossOrigin(methods = RequestMethod.GET)\n     @GetMapping(path = \"/\", produces = MediaType.APPLICATION_JSON_VALUE)\n     public Index index() {\n", "next_change": {"commit": "16c2cfe87cd94f431eaa06c3987fddfe64f7f70d", "changed_code": [{"header": "diff --git a/src/main/java/de/bonndan/nivio/api/ApiController.java b/src/main/java/de/bonndan/nivio/api/ApiController.java\nindex 776bef02..14369925 100644\n--- a/src/main/java/de/bonndan/nivio/api/ApiController.java\n+++ b/src/main/java/de/bonndan/nivio/api/ApiController.java\n", "chunk": "@@ -52,7 +50,6 @@ public class ApiController {\n     }\n \n     @Operation(summary = \"Overview on all landscape and global configuration\")\n-    @CrossOrigin(methods = RequestMethod.GET)\n     @GetMapping(path = \"/\", produces = MediaType.APPLICATION_JSON_VALUE)\n     public Index index() {\n         return linkFactory.getIndex(landscapeRepository.findAll());\n", "next_change": null}, {"header": "diff --git a/src/main/java/de/bonndan/nivio/api/ApiController.java b/src/main/java/de/bonndan/nivio/api/ApiController.java\nindex 776bef02..14369925 100644\n--- a/src/main/java/de/bonndan/nivio/api/ApiController.java\n+++ b/src/main/java/de/bonndan/nivio/api/ApiController.java\n", "chunk": "@@ -60,7 +57,6 @@ public class ApiController {\n \n \n     @Operation(summary = \"This resource serves a landscape and can be addressed by using a fully qualified identifier\")\n-    @CrossOrigin(methods = RequestMethod.GET)\n     @GetMapping(path = \"/{landscapeIdentifier}\", produces = MediaType.APPLICATION_JSON_VALUE)\n     public ResponseEntity<LandscapeApiModel> landscape(@PathVariable String landscapeIdentifier) {\n         Landscape landscape = landscapeRepository.findDistinctByIdentifier(landscapeIdentifier).orElse(null);\n", "next_change": null}]}}, {"header": "diff --git a/src/main/java/de/bonndan/nivio/api/ApiController.java b/src/main/java/de/bonndan/nivio/api/ApiController.java\nindex 087e917f..776bef02 100644\n--- a/src/main/java/de/bonndan/nivio/api/ApiController.java\n+++ b/src/main/java/de/bonndan/nivio/api/ApiController.java\n", "chunk": "@@ -60,11 +59,7 @@ public class ApiController {\n     }\n \n \n-    /**\n-     * This resource serves a landscape DTO and can be addressed by using a {@link FullyQualifiedIdentifier}\n-     *\n-     * @return response entity of landscape\n-     */\n+    @Operation(summary = \"This resource serves a landscape and can be addressed by using a fully qualified identifier\")\n     @CrossOrigin(methods = RequestMethod.GET)\n     @GetMapping(path = \"/{landscapeIdentifier}\", produces = MediaType.APPLICATION_JSON_VALUE)\n     public ResponseEntity<LandscapeApiModel> landscape(@PathVariable String landscapeIdentifier) {\n", "next_change": {"commit": "16c2cfe87cd94f431eaa06c3987fddfe64f7f70d", "changed_code": [{"header": "diff --git a/src/main/java/de/bonndan/nivio/api/ApiController.java b/src/main/java/de/bonndan/nivio/api/ApiController.java\nindex 776bef02..14369925 100644\n--- a/src/main/java/de/bonndan/nivio/api/ApiController.java\n+++ b/src/main/java/de/bonndan/nivio/api/ApiController.java\n", "chunk": "@@ -60,7 +57,6 @@ public class ApiController {\n \n \n     @Operation(summary = \"This resource serves a landscape and can be addressed by using a fully qualified identifier\")\n-    @CrossOrigin(methods = RequestMethod.GET)\n     @GetMapping(path = \"/{landscapeIdentifier}\", produces = MediaType.APPLICATION_JSON_VALUE)\n     public ResponseEntity<LandscapeApiModel> landscape(@PathVariable String landscapeIdentifier) {\n         Landscape landscape = landscapeRepository.findDistinctByIdentifier(landscapeIdentifier).orElse(null);\n", "next_change": null}]}}]}}, {"header": "diff --git a/src/main/java/de/bonndan/nivio/api/ApiController.java b/src/main/java/de/bonndan/nivio/api/ApiController.java\nindex 4d1eebac..087e917f 100644\n--- a/src/main/java/de/bonndan/nivio/api/ApiController.java\n+++ b/src/main/java/de/bonndan/nivio/api/ApiController.java\n", "chunk": "@@ -58,7 +60,11 @@ public class ApiController {\n     }\n \n \n-    @Operation(summary = \"This resource serves a landscape and can be addressed by using a fully qualified identifier\")\n+    /**\n+     * This resource serves a landscape DTO and can be addressed by using a {@link FullyQualifiedIdentifier}\n+     *\n+     * @return response entity of landscape\n+     */\n     @CrossOrigin(methods = RequestMethod.GET)\n     @GetMapping(path = \"/{landscapeIdentifier}\", produces = MediaType.APPLICATION_JSON_VALUE)\n     public ResponseEntity<LandscapeApiModel> landscape(@PathVariable String landscapeIdentifier) {\n", "next_change": {"commit": "91072d5cbc92384709f759b48c0f84b64a5166a3", "changed_code": [{"header": "diff --git a/src/main/java/de/bonndan/nivio/api/ApiController.java b/src/main/java/de/bonndan/nivio/api/ApiController.java\nindex 087e917f..776bef02 100644\n--- a/src/main/java/de/bonndan/nivio/api/ApiController.java\n+++ b/src/main/java/de/bonndan/nivio/api/ApiController.java\n", "chunk": "@@ -60,11 +59,7 @@ public class ApiController {\n     }\n \n \n-    /**\n-     * This resource serves a landscape DTO and can be addressed by using a {@link FullyQualifiedIdentifier}\n-     *\n-     * @return response entity of landscape\n-     */\n+    @Operation(summary = \"This resource serves a landscape and can be addressed by using a fully qualified identifier\")\n     @CrossOrigin(methods = RequestMethod.GET)\n     @GetMapping(path = \"/{landscapeIdentifier}\", produces = MediaType.APPLICATION_JSON_VALUE)\n     public ResponseEntity<LandscapeApiModel> landscape(@PathVariable String landscapeIdentifier) {\n", "next_change": {"commit": "16c2cfe87cd94f431eaa06c3987fddfe64f7f70d", "changed_code": [{"header": "diff --git a/src/main/java/de/bonndan/nivio/api/ApiController.java b/src/main/java/de/bonndan/nivio/api/ApiController.java\nindex 776bef02..14369925 100644\n--- a/src/main/java/de/bonndan/nivio/api/ApiController.java\n+++ b/src/main/java/de/bonndan/nivio/api/ApiController.java\n", "chunk": "@@ -60,7 +57,6 @@ public class ApiController {\n \n \n     @Operation(summary = \"This resource serves a landscape and can be addressed by using a fully qualified identifier\")\n-    @CrossOrigin(methods = RequestMethod.GET)\n     @GetMapping(path = \"/{landscapeIdentifier}\", produces = MediaType.APPLICATION_JSON_VALUE)\n     public ResponseEntity<LandscapeApiModel> landscape(@PathVariable String landscapeIdentifier) {\n         Landscape landscape = landscapeRepository.findDistinctByIdentifier(landscapeIdentifier).orElse(null);\n", "next_change": null}]}}]}}]}}, {"header": "diff --git a/src/main/java/de/bonndan/nivio/api/ApiController.java b/src/main/java/de/bonndan/nivio/api/ApiController.java\nindex 750ba493..4d1eebac 100644\n--- a/src/main/java/de/bonndan/nivio/api/ApiController.java\n+++ b/src/main/java/de/bonndan/nivio/api/ApiController.java\n", "chunk": "@@ -57,11 +58,7 @@ public class ApiController {\n     }\n \n \n-    /**\n-     * This resource serves a landscape DTO and can be addressed by using a {@link FullyQualifiedIdentifier}\n-     *\n-     * @return response entity of landscape\n-     */\n+    @Operation(summary = \"This resource serves a landscape and can be addressed by using a fully qualified identifier\")\n     @CrossOrigin(methods = RequestMethod.GET)\n     @GetMapping(path = \"/{landscapeIdentifier}\", produces = MediaType.APPLICATION_JSON_VALUE)\n     public ResponseEntity<LandscapeApiModel> landscape(@PathVariable String landscapeIdentifier) {\n", "next_change": {"commit": "26629eadcfe09de106036d8e64fca70dda42beca", "changed_code": [{"header": "diff --git a/src/main/java/de/bonndan/nivio/api/ApiController.java b/src/main/java/de/bonndan/nivio/api/ApiController.java\nindex 4d1eebac..087e917f 100644\n--- a/src/main/java/de/bonndan/nivio/api/ApiController.java\n+++ b/src/main/java/de/bonndan/nivio/api/ApiController.java\n", "chunk": "@@ -58,7 +60,11 @@ public class ApiController {\n     }\n \n \n-    @Operation(summary = \"This resource serves a landscape and can be addressed by using a fully qualified identifier\")\n+    /**\n+     * This resource serves a landscape DTO and can be addressed by using a {@link FullyQualifiedIdentifier}\n+     *\n+     * @return response entity of landscape\n+     */\n     @CrossOrigin(methods = RequestMethod.GET)\n     @GetMapping(path = \"/{landscapeIdentifier}\", produces = MediaType.APPLICATION_JSON_VALUE)\n     public ResponseEntity<LandscapeApiModel> landscape(@PathVariable String landscapeIdentifier) {\n", "next_change": {"commit": "91072d5cbc92384709f759b48c0f84b64a5166a3", "changed_code": [{"header": "diff --git a/src/main/java/de/bonndan/nivio/api/ApiController.java b/src/main/java/de/bonndan/nivio/api/ApiController.java\nindex 087e917f..776bef02 100644\n--- a/src/main/java/de/bonndan/nivio/api/ApiController.java\n+++ b/src/main/java/de/bonndan/nivio/api/ApiController.java\n", "chunk": "@@ -60,11 +59,7 @@ public class ApiController {\n     }\n \n \n-    /**\n-     * This resource serves a landscape DTO and can be addressed by using a {@link FullyQualifiedIdentifier}\n-     *\n-     * @return response entity of landscape\n-     */\n+    @Operation(summary = \"This resource serves a landscape and can be addressed by using a fully qualified identifier\")\n     @CrossOrigin(methods = RequestMethod.GET)\n     @GetMapping(path = \"/{landscapeIdentifier}\", produces = MediaType.APPLICATION_JSON_VALUE)\n     public ResponseEntity<LandscapeApiModel> landscape(@PathVariable String landscapeIdentifier) {\n", "next_change": {"commit": "16c2cfe87cd94f431eaa06c3987fddfe64f7f70d", "changed_code": [{"header": "diff --git a/src/main/java/de/bonndan/nivio/api/ApiController.java b/src/main/java/de/bonndan/nivio/api/ApiController.java\nindex 776bef02..14369925 100644\n--- a/src/main/java/de/bonndan/nivio/api/ApiController.java\n+++ b/src/main/java/de/bonndan/nivio/api/ApiController.java\n", "chunk": "@@ -60,7 +57,6 @@ public class ApiController {\n \n \n     @Operation(summary = \"This resource serves a landscape and can be addressed by using a fully qualified identifier\")\n-    @CrossOrigin(methods = RequestMethod.GET)\n     @GetMapping(path = \"/{landscapeIdentifier}\", produces = MediaType.APPLICATION_JSON_VALUE)\n     public ResponseEntity<LandscapeApiModel> landscape(@PathVariable String landscapeIdentifier) {\n         Landscape landscape = landscapeRepository.findDistinctByIdentifier(landscapeIdentifier).orElse(null);\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "3cc759cf5a1486bf95516599fa3dc20a47d41b4f", "message": "Merge commit", "committedDate": null}, {"oid": "88e8d2b1a6ac9977b05b46bf9e6fa768bc2ab517", "committedDate": "2020-04-10 13:57:51 +0200", "message": "[#114] better api landscape representation"}, {"oid": "07cb39b03d1a8cc4dc7952174343b98153648eb0", "committedDate": "2020-05-01 21:43:33 +0200", "message": "[#114] refactored FullyQualifiedIdentifier: extracted class ItemMatcher for searching purposes"}, {"oid": "7ed72e845dee5181cef37faf88e5abc2f6c16482", "committedDate": "2020-06-11 11:33:16 +0200", "message": "[#137] first draft of api refactoring"}, {"oid": "4c8f661e5ee817e681b136b77e65fddb57f0000e", "committedDate": "2020-06-16 22:15:49 +0200", "message": "[#147] refactorings/cleanup"}, {"oid": "a39db566550460c2f6dd18e092139dfdd6cf2c19", "committedDate": "2020-06-28 18:00:17 +0200", "message": "Merge branch 'develop' into 147_remove_directory_watcher"}, {"oid": "5420653e8bafe8c760e7c70f1ec382cc3e423fd9", "committedDate": "2020-07-02 09:12:23 +0200", "message": "[#167] removed hateoas lib (#168)"}, {"oid": "ac0583308ae3e57b183d08bdf166edbab2588f22", "committedDate": "2020-07-16 13:41:59 +0200", "message": "[#1174] cleanup"}, {"oid": "09b1dd922ae1c00a4c1772b2614dc52040cef592", "committedDate": "2020-07-16 23:37:32 +0200", "message": "[#185] swagger fixes"}, {"oid": "8210ad5a9db8fd6b5564742105f3fcc1f9f69b05", "committedDate": "2020-07-29 07:09:32 +0200", "message": "[#185] fix swagger docs"}, {"oid": "9cf68aeec25a10ecf9deebe1e3387b6bd899a733", "committedDate": "2020-08-01 08:34:52 +0200", "message": "[#204] removed the magic from landscape.getGroup()"}, {"oid": "008de262b5620df76ba6c41a39c7eec3948fb4a4", "committedDate": "2020-08-08 16:28:40 +0200", "message": "[#226] test fixes"}, {"oid": "ef5a24ac0c472d41e17a5a71094c944758c2fa0b", "committedDate": "2020-08-13 17:03:14 +0200", "message": "Merge pull request #204 from dedica-team/test"}, {"oid": "ca3e3666050577c360d35d2e528b16cff17f5451", "committedDate": "2020-08-22 11:59:33 +0200", "message": "Merge branch 'develop' into 226_search"}, {"oid": "c0903be5786183fd1981a65bb6af73abe1e25b9f", "committedDate": "2020-08-30 11:40:03 +0200", "message": "[#226] search facets"}, {"oid": "2061ebc69d6bc7ee64947ed9c340a1744907825a", "committedDate": "2020-08-30 11:41:03 +0200", "message": "[#226] showing some facets in frontend"}, {"oid": "f4daabc4b9402cd4057d9a43d26585d523f70a9e", "committedDate": "2020-09-12 21:00:34 +0200", "message": "[#248] source reference based observers"}, {"oid": "dfd37c9c22b0676fe1f88ce2ee45eceb1c82033b", "committedDate": "2020-09-13 08:59:20 +0200", "message": "[#248] refactored URLHelper to use Optional"}, {"oid": "8416e6e49ec68c0433502636bd9c234f688f5dc6", "committedDate": "2020-09-13 22:05:17 +0200", "message": "[#248] removed obsolete param"}, {"oid": "0a80c9537d50e7f065c489cb03607dbb5fe9d881", "committedDate": "2020-09-13 22:15:03 +0200", "message": "[#248] cleanup"}, {"oid": "3cd130af3fd746e5e3d6bcbad53fa7eb2887d373", "committedDate": "2020-09-13 22:29:23 +0200", "message": "[#248] cleanup"}, {"oid": "66c7d724ddbf8ee4eb3f771e460d62c966af0ed4", "committedDate": "2020-09-13 22:46:16 +0200", "message": "[#248] cleanup"}, {"oid": "afac05bc7fe99058c8ae7f65595771cf179db966", "committedDate": "2020-10-10 20:19:16 +0200", "message": "WIP: removing Interfaces from Description objects"}, {"oid": "a863cbd9ebe81bf91b428717d5b6bb06a7a153a0", "committedDate": "2020-10-11 19:15:07 +0200", "message": "renamed LandscapeImpl to Landscape"}, {"oid": "a19c49603a6703139b0af770c461115b667eea4f", "committedDate": "2020-11-27 07:52:45 +0100", "message": "[#321] renamed method, added comments"}, {"oid": "10d61e3284ba79358fbf80dc4c73a0a0cd3ed399", "committedDate": "2020-12-29 00:23:30 +0530", "message": "initial commit"}, {"oid": "ea8fa9b464ab862208572c8da5521c03d5f238a2", "committedDate": "2020-12-29 00:34:06 +0530", "message": "updated controller"}, {"oid": "e8165a401f1e509b0297546525984cc0ed589f09", "committedDate": "2020-12-30 21:18:41 +0100", "message": "[#164] added k8s example entry"}, {"oid": "e20bd666edb9a2aa31d7aba78b6a81562e4e4c95", "committedDate": "2021-01-24 19:29:43 +0100", "message": "[#355] removed duplicate implementation of item index"}, {"oid": "9637ad57ac61e0f76e86bfe81d033934e4e6b90f", "committedDate": "2021-01-31 07:05:07 +0100", "message": "Merge branch 'develop' into 309_indexer"}, {"oid": "5349f58fe57c0a021d250e589ccd7752b63b151a", "committedDate": "2021-01-31 09:08:11 +0100", "message": "[#394] change api behaviour to return links instead of process log"}, {"oid": "40d519de72aa73f17acb0b3a4f4b782a527f8f94", "committedDate": "2021-02-07 18:45:49 +0100", "message": "Merge branch 'develop' into 355_improve_relation_resolver"}, {"oid": "3625dc46f9159bc151120b77d12fbd1c2bc2b599", "committedDate": "2021-02-08 21:47:21 +0100", "message": "search response mediatype"}, {"oid": "9f057b6dce409892336a2a0bdefc6692986ac9b4", "committedDate": "2021-02-08 22:16:52 +0100", "message": "not ignoring search error"}, {"oid": "c3aa2bf257072fd49560351bcb0d661411913caa", "committedDate": "2021-02-13 14:15:15 +0100", "message": "[#416] documented/limited request methods in controller"}, {"oid": "e276f5403c3add893f18f39b03edc85d63e8ead1", "committedDate": "2021-04-13 12:55:35 +0200", "message": "[#498] decoupled ItemIndex.java from SearchIndex.java, added indexing listener"}, {"oid": "538afa4695f64b8e6ed7f513e25f12f52c851550", "committedDate": "2021-06-05 06:37:05 +0200", "message": "[#494] cleanup"}, {"oid": "ec3422f15f2ed192d34cfb617516aa27ea2cbc26", "committedDate": "2021-08-08 22:01:59 +0200", "message": "[#637] introduced AssessmentChangedEvent [#543] introduced ApiModels, internal labels"}, {"oid": "672cd55ce2276b304cead0815d2cf54c64ab2350", "committedDate": "2021-09-01 18:13:22 +0200", "message": "groups without item references"}, {"oid": "7e8230bbf880e8fc020ca0b61f23f7cb2a14f9fb", "committedDate": "2021-09-12 08:14:40 +0200", "message": "refactoring"}, {"oid": "dae138fe0f71439e8d7599e768aaee5978aa0eb6", "committedDate": "2021-09-13 07:45:45 +0200", "message": "cleanup"}, {"oid": "b6d0c497b45fcc3dd8a64dfc62a8027bd0fb0596", "committedDate": "2021-10-07 07:39:54 +0200", "message": "Merge branch 'develop' into custom_json_mapping"}, {"oid": "14c815b838e17c4ba983334d640aa98cad74af4d", "committedDate": "2021-10-19 11:25:27 +0200", "message": "Add backend to frontend mapping API"}, {"oid": "7d6721c73cc110a9f949177879ea1f6c4dd00a3c", "committedDate": "2021-10-20 10:40:42 +0200", "message": "Extracted mapping from application.yml"}, {"oid": "c0138fa2077895747981fbbfb9fee0974ed0e2c7", "committedDate": "2021-10-21 21:02:26 +0200", "message": "Merge branch 'develop' into custom_json_mapping"}, {"oid": "92b5bac5eaeaf6dca8f101e407baf0bf24be5ded", "committedDate": "2021-12-08 09:19:44 +0100", "message": "Add Spring Security and OAuth2 Login"}, {"oid": "4f7f0e5388e80a44b1259d3a3c30f205f000ef5c", "committedDate": "2021-12-08 10:18:14 +0100", "message": "Merge 741_add_spring_security_jennifer into 741_oauth2"}, {"oid": "40f45b41f158df5b05d6c0109d115f632183144f", "committedDate": "2021-12-08 17:27:21 +0100", "message": "add oauth2links to api"}, {"oid": "9530c875d0cc0b17b9e6b13415804d3e56fa2fae", "committedDate": "2021-12-11 11:16:17 +0100", "message": "[#813] REST api compliant endpoints"}, {"oid": "658fe1ca5158949c635cddee2987fe8c86897346", "committedDate": "2021-12-12 21:10:26 +0100", "message": "[#807] updated docs"}, {"oid": "26629eadcfe09de106036d8e64fca70dda42beca", "committedDate": "2021-12-19 12:44:02 +0100", "message": "[#814] frontend mapping cleanup"}, {"oid": "91072d5cbc92384709f759b48c0f84b64a5166a3", "committedDate": "2021-12-20 17:47:15 +0100", "message": "Merge branch 'develop' into 807_step_by_step"}, {"oid": "ba4da1107826642be38f44ab9e0004ec4e9e2027", "committedDate": "2022-01-03 11:16:14 +0100", "message": "Merge branch 'develop' into 741_oauth2"}, {"oid": "16c2cfe87cd94f431eaa06c3987fddfe64f7f70d", "committedDate": "2022-01-10 09:29:29 +0100", "message": "[#741] cors/cookie auth fixes"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTA1MzYwMA==", "url": "https://github.com/dedica-team/nivio/pull/84#discussion_r369053600", "body": "I like spaces between `i`, `+` and `1`. :)", "bodyText": "I like spaces between i, + and 1. :)", "bodyHTML": "<p dir=\"auto\">I like spaces between <code>i</code>, <code>+</code> and <code>1</code>. :)</p>", "author": "jpgoelz", "createdAt": "2020-01-21T15:03:45Z", "path": "src/main/java/de/bonndan/nivio/input/LabelToFieldProcessor.java", "diffHunk": "@@ -54,20 +58,38 @@ private void setValue(ItemDescription item, String name, String value) {\n                 myAccessor.setPropertyValue(name, Arrays.asList(o));\n                 return;\n             }\n+\n             if (propertyType != null && propertyType.isAssignableFrom(Set.class)) {\n                 String[] o = getParts(value);\n                 myAccessor.setPropertyValue(name, Set.of(o));\n                 return;\n             }\n \n+            if (propertyType != null && propertyType.isAssignableFrom(Map.class)) {\n+                String[] o = getParts(value);\n+                Map propertyValue = (Map) myAccessor.getPropertyValue(name);\n+                for (int i = 0; i < o.length; i++) {\n+                    if (ItemDescription.LINKS_FIELD.equals(name)) {\n+                        try {\n+                            propertyValue.put(String.valueOf(i+1), new URL(o[i]));", "originalCommit": "e889de0e97f8ec614b40d782788fc498aaa859f0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5d637ce63a05746487a5cd63bb5ab26b4c4a2297", "changed_code": [{"header": "diff --git a/src/main/java/de/bonndan/nivio/input/LabelToFieldProcessor.java b/src/main/java/de/bonndan/nivio/input/LabelToFieldProcessor.java\nindex e34e0a39..5b28f6a7 100644\n--- a/src/main/java/de/bonndan/nivio/input/LabelToFieldProcessor.java\n+++ b/src/main/java/de/bonndan/nivio/input/LabelToFieldProcessor.java\n", "chunk": "@@ -71,12 +68,12 @@ public class LabelToFieldProcessor {\n                 for (int i = 0; i < o.length; i++) {\n                     if (ItemDescription.LINKS_FIELD.equals(name)) {\n                         try {\n-                            propertyValue.put(String.valueOf(i+1), new URL(o[i]));\n+                            propertyValue.put(String.valueOf(i + 1), new URL(o[i]));\n                         } catch (MalformedURLException e) {\n                             logger.warn(\"Failed to parse link \" + o[i]);\n                         }\n                     } else {\n-                        propertyValue.put(String.valueOf(i+1), o[i]);\n+                        propertyValue.put(String.valueOf(i + 1), o[i]);\n                     }\n                 }\n                 return;\n", "next_change": null}]}, "revised_code_in_main": {"commit": "3cc759cf5a1486bf95516599fa3dc20a47d41b4f", "changed_code": [{"header": "diff --git a/src/main/java/de/bonndan/nivio/input/LabelToFieldProcessor.java b/src/main/java/de/bonndan/nivio/input/LabelToFieldProcessor.java\nindex e34e0a39..5b28f6a7 100644\n--- a/src/main/java/de/bonndan/nivio/input/LabelToFieldProcessor.java\n+++ b/src/main/java/de/bonndan/nivio/input/LabelToFieldProcessor.java\n", "chunk": "@@ -71,12 +68,12 @@ public class LabelToFieldProcessor {\n                 for (int i = 0; i < o.length; i++) {\n                     if (ItemDescription.LINKS_FIELD.equals(name)) {\n                         try {\n-                            propertyValue.put(String.valueOf(i+1), new URL(o[i]));\n+                            propertyValue.put(String.valueOf(i + 1), new URL(o[i]));\n                         } catch (MalformedURLException e) {\n                             logger.warn(\"Failed to parse link \" + o[i]);\n                         }\n                     } else {\n-                        propertyValue.put(String.valueOf(i+1), o[i]);\n+                        propertyValue.put(String.valueOf(i + 1), o[i]);\n                     }\n                 }\n                 return;\n", "next_change": {"commit": "b2c63680662b8e4d437bb443e74496da715ccaf8", "changed_code": [{"header": "diff --git a/src/main/java/de/bonndan/nivio/input/LabelToFieldProcessor.java b/src/main/java/de/bonndan/nivio/input/LabelToFieldProcessor.java\nindex 5b28f6a7..77790b1d 100644\n--- a/src/main/java/de/bonndan/nivio/input/LabelToFieldProcessor.java\n+++ b/src/main/java/de/bonndan/nivio/input/LabelToFieldProcessor.java\n", "chunk": "@@ -79,9 +81,15 @@ public class LabelToFieldProcessor {\n                 return;\n             }\n \n-            myAccessor.setPropertyValue(name, value.trim());\n+            if (name.startsWith(Linked.LINK_LABEL_PREFIX)) {\n+                item.setLink(name.replace(Linked.LINK_LABEL_PREFIX, \"\"), new URL(value));\n+            } else {\n+                myAccessor.setPropertyValue(name, value.trim());\n+            }\n         } catch (NotWritablePropertyException e) {\n             logger.warn(\"Failed to write field '\" + name + \"' via label\");\n+        } catch (MalformedURLException e) {\n+            logger.warn(\"Failed to add link '\" + name + \"' via label because of malformed URL \" + value);\n         }\n     }\n \n", "next_change": {"commit": "aa8dccd704204a8f9b4dbe74f5bc9282fa0fdd16", "changed_code": [{"header": "diff --git a/src/main/java/de/bonndan/nivio/input/LabelToFieldProcessor.java b/src/main/java/de/bonndan/nivio/input/LabelToFieldProcessor.java\nindex 77790b1d..8e8fc772 100644\n--- a/src/main/java/de/bonndan/nivio/input/LabelToFieldProcessor.java\n+++ b/src/main/java/de/bonndan/nivio/input/LabelToFieldProcessor.java\n", "chunk": "@@ -87,7 +99,8 @@ public class LabelToFieldProcessor {\n                 myAccessor.setPropertyValue(name, value.trim());\n             }\n         } catch (NotWritablePropertyException e) {\n-            logger.warn(\"Failed to write field '\" + name + \"' via label\");\n+            logger.debug(\"Failed to write field '\" + name + \"' via label\");\n+            item.getLabels().put(name, value);\n         } catch (MalformedURLException e) {\n             logger.warn(\"Failed to add link '\" + name + \"' via label because of malformed URL \" + value);\n         }\n", "next_change": {"commit": "c3a7d0abefbf39c2b87147277a82ed27f995bff5", "changed_code": [{"header": "diff --git a/src/main/java/de/bonndan/nivio/input/LabelToFieldProcessor.java b/src/main/java/de/bonndan/nivio/input/LabelToFieldResolver.java\nsimilarity index 84%\nrename from src/main/java/de/bonndan/nivio/input/LabelToFieldProcessor.java\nrename to src/main/java/de/bonndan/nivio/input/LabelToFieldResolver.java\nindex 8e8fc772..670b2c1d 100644\n--- a/src/main/java/de/bonndan/nivio/input/LabelToFieldProcessor.java\n+++ b/src/main/java/de/bonndan/nivio/input/LabelToFieldResolver.java\n", "chunk": "@@ -99,10 +97,10 @@ public class LabelToFieldProcessor {\n                 myAccessor.setPropertyValue(name, value.trim());\n             }\n         } catch (NotWritablePropertyException e) {\n-            logger.debug(\"Failed to write field '\" + name + \"' via label\");\n+            processLog.debug(\"Failed to write field '\" + name + \"' via label\");\n             item.getLabels().put(name, value);\n         } catch (MalformedURLException e) {\n-            logger.warn(\"Failed to add link '\" + name + \"' via label because of malformed URL \" + value);\n+            processLog.warn(\"Failed to add link '\" + name + \"' via label because of malformed URL \" + value);\n         }\n     }\n \n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "3cc759cf5a1486bf95516599fa3dc20a47d41b4f", "message": "Merge commit", "committedDate": null}, {"oid": "b2c63680662b8e4d437bb443e74496da715ccaf8", "committedDate": "2020-04-09 11:47:49 +0200", "message": "[#114] test fixes"}, {"oid": "5420653e8bafe8c760e7c70f1ec382cc3e423fd9", "committedDate": "2020-07-02 09:12:23 +0200", "message": "[#167] removed hateoas lib (#168)"}, {"oid": "248b4e1cdc016b320ebfd900903ed3f23f9ee534", "committedDate": "2020-07-06 23:39:03 +0200", "message": "[#151] code cleanup"}, {"oid": "aa8dccd704204a8f9b4dbe74f5bc9282fa0fdd16", "committedDate": "2020-09-10 12:53:16 +0200", "message": "[#266] label cleanup, writing prefixed labels to item labels"}, {"oid": "a863cbd9ebe81bf91b428717d5b6bb06a7a153a0", "committedDate": "2020-10-11 19:15:07 +0200", "message": "renamed LandscapeImpl to Landscape"}, {"oid": "c3a7d0abefbf39c2b87147277a82ed27f995bff5", "committedDate": "2020-12-15 10:38:05 +0100", "message": "[#97] refactored indexer: distinction between Processor and Resolver"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTA1MzcyMg==", "url": "https://github.com/dedica-team/nivio/pull/84#discussion_r369053722", "body": "more spaces please", "bodyText": "more spaces please", "bodyHTML": "<p dir=\"auto\">more spaces please</p>", "author": "jpgoelz", "createdAt": "2020-01-21T15:03:58Z", "path": "src/main/java/de/bonndan/nivio/input/LabelToFieldProcessor.java", "diffHunk": "@@ -54,20 +58,38 @@ private void setValue(ItemDescription item, String name, String value) {\n                 myAccessor.setPropertyValue(name, Arrays.asList(o));\n                 return;\n             }\n+\n             if (propertyType != null && propertyType.isAssignableFrom(Set.class)) {\n                 String[] o = getParts(value);\n                 myAccessor.setPropertyValue(name, Set.of(o));\n                 return;\n             }\n \n+            if (propertyType != null && propertyType.isAssignableFrom(Map.class)) {\n+                String[] o = getParts(value);\n+                Map propertyValue = (Map) myAccessor.getPropertyValue(name);\n+                for (int i = 0; i < o.length; i++) {\n+                    if (ItemDescription.LINKS_FIELD.equals(name)) {\n+                        try {\n+                            propertyValue.put(String.valueOf(i+1), new URL(o[i]));\n+                        } catch (MalformedURLException e) {\n+                            logger.warn(\"Failed to parse link \" + o[i]);\n+                        }\n+                    } else {\n+                        propertyValue.put(String.valueOf(i+1), o[i]);", "originalCommit": "e889de0e97f8ec614b40d782788fc498aaa859f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE1NTk2Nw==", "url": "https://github.com/dedica-team/nivio/pull/84#discussion_r369155967", "bodyText": "reformatted file", "author": "bonndan", "createdAt": "2020-01-21T18:01:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTA1MzcyMg=="}], "type": "inlineReview", "revised_code": {"commit": "5d637ce63a05746487a5cd63bb5ab26b4c4a2297", "changed_code": [{"header": "diff --git a/src/main/java/de/bonndan/nivio/input/LabelToFieldProcessor.java b/src/main/java/de/bonndan/nivio/input/LabelToFieldProcessor.java\nindex e34e0a39..5b28f6a7 100644\n--- a/src/main/java/de/bonndan/nivio/input/LabelToFieldProcessor.java\n+++ b/src/main/java/de/bonndan/nivio/input/LabelToFieldProcessor.java\n", "chunk": "@@ -71,12 +68,12 @@ public class LabelToFieldProcessor {\n                 for (int i = 0; i < o.length; i++) {\n                     if (ItemDescription.LINKS_FIELD.equals(name)) {\n                         try {\n-                            propertyValue.put(String.valueOf(i+1), new URL(o[i]));\n+                            propertyValue.put(String.valueOf(i + 1), new URL(o[i]));\n                         } catch (MalformedURLException e) {\n                             logger.warn(\"Failed to parse link \" + o[i]);\n                         }\n                     } else {\n-                        propertyValue.put(String.valueOf(i+1), o[i]);\n+                        propertyValue.put(String.valueOf(i + 1), o[i]);\n                     }\n                 }\n                 return;\n", "next_change": null}]}, "revised_code_in_main": {"commit": "3cc759cf5a1486bf95516599fa3dc20a47d41b4f", "changed_code": [{"header": "diff --git a/src/main/java/de/bonndan/nivio/input/LabelToFieldProcessor.java b/src/main/java/de/bonndan/nivio/input/LabelToFieldProcessor.java\nindex e34e0a39..5b28f6a7 100644\n--- a/src/main/java/de/bonndan/nivio/input/LabelToFieldProcessor.java\n+++ b/src/main/java/de/bonndan/nivio/input/LabelToFieldProcessor.java\n", "chunk": "@@ -71,12 +68,12 @@ public class LabelToFieldProcessor {\n                 for (int i = 0; i < o.length; i++) {\n                     if (ItemDescription.LINKS_FIELD.equals(name)) {\n                         try {\n-                            propertyValue.put(String.valueOf(i+1), new URL(o[i]));\n+                            propertyValue.put(String.valueOf(i + 1), new URL(o[i]));\n                         } catch (MalformedURLException e) {\n                             logger.warn(\"Failed to parse link \" + o[i]);\n                         }\n                     } else {\n-                        propertyValue.put(String.valueOf(i+1), o[i]);\n+                        propertyValue.put(String.valueOf(i + 1), o[i]);\n                     }\n                 }\n                 return;\n", "next_change": {"commit": "b2c63680662b8e4d437bb443e74496da715ccaf8", "changed_code": [{"header": "diff --git a/src/main/java/de/bonndan/nivio/input/LabelToFieldProcessor.java b/src/main/java/de/bonndan/nivio/input/LabelToFieldProcessor.java\nindex 5b28f6a7..77790b1d 100644\n--- a/src/main/java/de/bonndan/nivio/input/LabelToFieldProcessor.java\n+++ b/src/main/java/de/bonndan/nivio/input/LabelToFieldProcessor.java\n", "chunk": "@@ -79,9 +81,15 @@ public class LabelToFieldProcessor {\n                 return;\n             }\n \n-            myAccessor.setPropertyValue(name, value.trim());\n+            if (name.startsWith(Linked.LINK_LABEL_PREFIX)) {\n+                item.setLink(name.replace(Linked.LINK_LABEL_PREFIX, \"\"), new URL(value));\n+            } else {\n+                myAccessor.setPropertyValue(name, value.trim());\n+            }\n         } catch (NotWritablePropertyException e) {\n             logger.warn(\"Failed to write field '\" + name + \"' via label\");\n+        } catch (MalformedURLException e) {\n+            logger.warn(\"Failed to add link '\" + name + \"' via label because of malformed URL \" + value);\n         }\n     }\n \n", "next_change": {"commit": "aa8dccd704204a8f9b4dbe74f5bc9282fa0fdd16", "changed_code": [{"header": "diff --git a/src/main/java/de/bonndan/nivio/input/LabelToFieldProcessor.java b/src/main/java/de/bonndan/nivio/input/LabelToFieldProcessor.java\nindex 77790b1d..8e8fc772 100644\n--- a/src/main/java/de/bonndan/nivio/input/LabelToFieldProcessor.java\n+++ b/src/main/java/de/bonndan/nivio/input/LabelToFieldProcessor.java\n", "chunk": "@@ -87,7 +99,8 @@ public class LabelToFieldProcessor {\n                 myAccessor.setPropertyValue(name, value.trim());\n             }\n         } catch (NotWritablePropertyException e) {\n-            logger.warn(\"Failed to write field '\" + name + \"' via label\");\n+            logger.debug(\"Failed to write field '\" + name + \"' via label\");\n+            item.getLabels().put(name, value);\n         } catch (MalformedURLException e) {\n             logger.warn(\"Failed to add link '\" + name + \"' via label because of malformed URL \" + value);\n         }\n", "next_change": {"commit": "c3a7d0abefbf39c2b87147277a82ed27f995bff5", "changed_code": [{"header": "diff --git a/src/main/java/de/bonndan/nivio/input/LabelToFieldProcessor.java b/src/main/java/de/bonndan/nivio/input/LabelToFieldResolver.java\nsimilarity index 84%\nrename from src/main/java/de/bonndan/nivio/input/LabelToFieldProcessor.java\nrename to src/main/java/de/bonndan/nivio/input/LabelToFieldResolver.java\nindex 8e8fc772..670b2c1d 100644\n--- a/src/main/java/de/bonndan/nivio/input/LabelToFieldProcessor.java\n+++ b/src/main/java/de/bonndan/nivio/input/LabelToFieldResolver.java\n", "chunk": "@@ -99,10 +97,10 @@ public class LabelToFieldProcessor {\n                 myAccessor.setPropertyValue(name, value.trim());\n             }\n         } catch (NotWritablePropertyException e) {\n-            logger.debug(\"Failed to write field '\" + name + \"' via label\");\n+            processLog.debug(\"Failed to write field '\" + name + \"' via label\");\n             item.getLabels().put(name, value);\n         } catch (MalformedURLException e) {\n-            logger.warn(\"Failed to add link '\" + name + \"' via label because of malformed URL \" + value);\n+            processLog.warn(\"Failed to add link '\" + name + \"' via label because of malformed URL \" + value);\n         }\n     }\n \n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "3cc759cf5a1486bf95516599fa3dc20a47d41b4f", "message": "Merge commit", "committedDate": null}, {"oid": "b2c63680662b8e4d437bb443e74496da715ccaf8", "committedDate": "2020-04-09 11:47:49 +0200", "message": "[#114] test fixes"}, {"oid": "5420653e8bafe8c760e7c70f1ec382cc3e423fd9", "committedDate": "2020-07-02 09:12:23 +0200", "message": "[#167] removed hateoas lib (#168)"}, {"oid": "248b4e1cdc016b320ebfd900903ed3f23f9ee534", "committedDate": "2020-07-06 23:39:03 +0200", "message": "[#151] code cleanup"}, {"oid": "aa8dccd704204a8f9b4dbe74f5bc9282fa0fdd16", "committedDate": "2020-09-10 12:53:16 +0200", "message": "[#266] label cleanup, writing prefixed labels to item labels"}, {"oid": "a863cbd9ebe81bf91b428717d5b6bb06a7a153a0", "committedDate": "2020-10-11 19:15:07 +0200", "message": "renamed LandscapeImpl to Landscape"}, {"oid": "c3a7d0abefbf39c2b87147277a82ed27f995bff5", "committedDate": "2020-12-15 10:38:05 +0100", "message": "[#97] refactored indexer: distinction between Processor and Resolver"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTA1NDk4MA==", "url": "https://github.com/dedica-team/nivio/pull/84#discussion_r369054980", "body": "Imho static, albeit private methods should go to the top of a class, even before public methods. What's your opinion @Matthimatiker?", "bodyText": "Imho static, albeit private methods should go to the top of a class, even before public methods. What's your opinion @Matthimatiker?", "bodyHTML": "<p dir=\"auto\">Imho static, albeit private methods should go to the top of a class, even before public methods. What's your opinion <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/Matthimatiker/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/Matthimatiker\">@Matthimatiker</a>?</p>", "author": "jpgoelz", "createdAt": "2020-01-21T15:06:10Z", "path": "src/main/java/de/bonndan/nivio/input/LabelToFieldProcessor.java", "diffHunk": "@@ -54,20 +58,38 @@ private void setValue(ItemDescription item, String name, String value) {\n                 myAccessor.setPropertyValue(name, Arrays.asList(o));\n                 return;\n             }\n+\n             if (propertyType != null && propertyType.isAssignableFrom(Set.class)) {\n                 String[] o = getParts(value);\n                 myAccessor.setPropertyValue(name, Set.of(o));\n                 return;\n             }\n \n+            if (propertyType != null && propertyType.isAssignableFrom(Map.class)) {\n+                String[] o = getParts(value);\n+                Map propertyValue = (Map) myAccessor.getPropertyValue(name);\n+                for (int i = 0; i < o.length; i++) {\n+                    if (ItemDescription.LINKS_FIELD.equals(name)) {\n+                        try {\n+                            propertyValue.put(String.valueOf(i+1), new URL(o[i]));\n+                        } catch (MalformedURLException e) {\n+                            logger.warn(\"Failed to parse link \" + o[i]);\n+                        }\n+                    } else {\n+                        propertyValue.put(String.valueOf(i+1), o[i]);\n+                    }\n+                }\n+                return;\n+            }\n+\n             myAccessor.setPropertyValue(name, value.trim());\n         } catch (NotWritablePropertyException e) {\n             logger.warn(\"Failed to write field '\" + name + \"' via label\");\n         }\n     }\n \n     private static String[] getParts(String value) {", "originalCommit": "e889de0e97f8ec614b40d782788fc498aaa859f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE2MzIwMA==", "url": "https://github.com/dedica-team/nivio/pull/84#discussion_r369163200", "bodyText": "My opinion(!) is: public stuff comes first. You are however free to change it.", "author": "bonndan", "createdAt": "2020-01-21T18:17:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTA1NDk4MA=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "b2c63680662b8e4d437bb443e74496da715ccaf8", "changed_code": [{"header": "diff --git a/src/main/java/de/bonndan/nivio/input/LabelToFieldProcessor.java b/src/main/java/de/bonndan/nivio/input/LabelToFieldProcessor.java\nindex e34e0a39..77790b1d 100644\n--- a/src/main/java/de/bonndan/nivio/input/LabelToFieldProcessor.java\n+++ b/src/main/java/de/bonndan/nivio/input/LabelToFieldProcessor.java\n", "chunk": "@@ -66,25 +64,32 @@ public class LabelToFieldProcessor {\n             }\n \n             if (propertyType != null && propertyType.isAssignableFrom(Map.class)) {\n-                String[] o = getParts(value);\n+                String[] o = getParts(value); // value is only a list of strings\n                 Map propertyValue = (Map) myAccessor.getPropertyValue(name);\n                 for (int i = 0; i < o.length; i++) {\n-                    if (ItemDescription.LINKS_FIELD.equals(name)) {\n+                    if (\"links\".equals(name)) {\n+                        logger.warn(\"Found deprecated label named links.\");\n                         try {\n-                            propertyValue.put(String.valueOf(i+1), new URL(o[i]));\n+                            propertyValue.put(String.valueOf(i + 1), new URL(o[i]));\n                         } catch (MalformedURLException e) {\n                             logger.warn(\"Failed to parse link \" + o[i]);\n                         }\n                     } else {\n-                        propertyValue.put(String.valueOf(i+1), o[i]);\n+                        propertyValue.put(String.valueOf(i + 1), o[i]);\n                     }\n                 }\n                 return;\n             }\n \n-            myAccessor.setPropertyValue(name, value.trim());\n+            if (name.startsWith(Linked.LINK_LABEL_PREFIX)) {\n+                item.setLink(name.replace(Linked.LINK_LABEL_PREFIX, \"\"), new URL(value));\n+            } else {\n+                myAccessor.setPropertyValue(name, value.trim());\n+            }\n         } catch (NotWritablePropertyException e) {\n             logger.warn(\"Failed to write field '\" + name + \"' via label\");\n+        } catch (MalformedURLException e) {\n+            logger.warn(\"Failed to add link '\" + name + \"' via label because of malformed URL \" + value);\n         }\n     }\n \n", "next_change": {"commit": "aa8dccd704204a8f9b4dbe74f5bc9282fa0fdd16", "changed_code": [{"header": "diff --git a/src/main/java/de/bonndan/nivio/input/LabelToFieldProcessor.java b/src/main/java/de/bonndan/nivio/input/LabelToFieldProcessor.java\nindex 77790b1d..8e8fc772 100644\n--- a/src/main/java/de/bonndan/nivio/input/LabelToFieldProcessor.java\n+++ b/src/main/java/de/bonndan/nivio/input/LabelToFieldProcessor.java\n", "chunk": "@@ -87,7 +99,8 @@ public class LabelToFieldProcessor {\n                 myAccessor.setPropertyValue(name, value.trim());\n             }\n         } catch (NotWritablePropertyException e) {\n-            logger.warn(\"Failed to write field '\" + name + \"' via label\");\n+            logger.debug(\"Failed to write field '\" + name + \"' via label\");\n+            item.getLabels().put(name, value);\n         } catch (MalformedURLException e) {\n             logger.warn(\"Failed to add link '\" + name + \"' via label because of malformed URL \" + value);\n         }\n", "next_change": {"commit": "c3a7d0abefbf39c2b87147277a82ed27f995bff5", "changed_code": [{"header": "diff --git a/src/main/java/de/bonndan/nivio/input/LabelToFieldProcessor.java b/src/main/java/de/bonndan/nivio/input/LabelToFieldResolver.java\nsimilarity index 84%\nrename from src/main/java/de/bonndan/nivio/input/LabelToFieldProcessor.java\nrename to src/main/java/de/bonndan/nivio/input/LabelToFieldResolver.java\nindex 8e8fc772..670b2c1d 100644\n--- a/src/main/java/de/bonndan/nivio/input/LabelToFieldProcessor.java\n+++ b/src/main/java/de/bonndan/nivio/input/LabelToFieldResolver.java\n", "chunk": "@@ -99,10 +97,10 @@ public class LabelToFieldProcessor {\n                 myAccessor.setPropertyValue(name, value.trim());\n             }\n         } catch (NotWritablePropertyException e) {\n-            logger.debug(\"Failed to write field '\" + name + \"' via label\");\n+            processLog.debug(\"Failed to write field '\" + name + \"' via label\");\n             item.getLabels().put(name, value);\n         } catch (MalformedURLException e) {\n-            logger.warn(\"Failed to add link '\" + name + \"' via label because of malformed URL \" + value);\n+            processLog.warn(\"Failed to add link '\" + name + \"' via label because of malformed URL \" + value);\n         }\n     }\n \n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "3cc759cf5a1486bf95516599fa3dc20a47d41b4f", "message": "Merge commit", "committedDate": null}, {"oid": "b2c63680662b8e4d437bb443e74496da715ccaf8", "committedDate": "2020-04-09 11:47:49 +0200", "message": "[#114] test fixes"}, {"oid": "5420653e8bafe8c760e7c70f1ec382cc3e423fd9", "committedDate": "2020-07-02 09:12:23 +0200", "message": "[#167] removed hateoas lib (#168)"}, {"oid": "248b4e1cdc016b320ebfd900903ed3f23f9ee534", "committedDate": "2020-07-06 23:39:03 +0200", "message": "[#151] code cleanup"}, {"oid": "aa8dccd704204a8f9b4dbe74f5bc9282fa0fdd16", "committedDate": "2020-09-10 12:53:16 +0200", "message": "[#266] label cleanup, writing prefixed labels to item labels"}, {"oid": "a863cbd9ebe81bf91b428717d5b6bb06a7a153a0", "committedDate": "2020-10-11 19:15:07 +0200", "message": "renamed LandscapeImpl to Landscape"}, {"oid": "c3a7d0abefbf39c2b87147277a82ed27f995bff5", "committedDate": "2020-12-15 10:38:05 +0100", "message": "[#97] refactored indexer: distinction between Processor and Resolver"}]}, {"oid": "0ca8bc1bf974b72c83bbc2d1a4cc9864a49a1f90", "url": "https://github.com/dedica-team/nivio/commit/0ca8bc1bf974b72c83bbc2d1a4cc9864a49a1f90", "message": "Merge branch 'develop' into 83_csv_import", "committedDate": "2020-01-21T17:48:54Z", "type": "commit"}, {"oid": "5d637ce63a05746487a5cd63bb5ab26b4c4a2297", "url": "https://github.com/dedica-team/nivio/commit/5d637ce63a05746487a5cd63bb5ab26b4c4a2297", "message": "[#84] fixes, wording", "committedDate": "2020-01-21T18:12:21Z", "type": "commit"}, {"oid": "3cc759cf5a1486bf95516599fa3dc20a47d41b4f", "url": "https://github.com/dedica-team/nivio/commit/3cc759cf5a1486bf95516599fa3dc20a47d41b4f", "message": "[#84] test fix", "committedDate": "2020-01-21T18:19:30Z", "type": "commit"}]}