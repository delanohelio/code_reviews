{"pr_number": 1828, "pr_title": "[#1272] Implement new Device Connection API methods", "pr_author": "calohmn", "pr_createdAt": "2020-03-11T12:41:28Z", "pr_url": "https://github.com/eclipse/hono/pull/1828", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk0NjExOA==", "url": "https://github.com/eclipse/hono/pull/1828#discussion_r390946118", "body": "final ?", "bodyText": "final ?", "bodyHTML": "<p dir=\"auto\">final ?</p>", "author": "sophokles73", "createdAt": "2020-03-11T12:48:52Z", "path": "client-device-connection-infinispan/src/main/java/org/eclipse/hono/deviceconnection/infinispan/client/Versioned.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.deviceconnection.infinispan.client;\n+\n+/**\n+ * A versioned entry.\n+ * \n+ * @param <T> The payload type.\n+ */\n+public class Versioned<T> {", "originalCommit": "0f22270cce271059d9003e3d48adf421458d03bc", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "2760ef2abea9015a4b0b4095effae3c67b24e79c", "changed_code": [{"header": "diff --git a/client-device-connection-infinispan/src/main/java/org/eclipse/hono/deviceconnection/infinispan/client/Versioned.java b/client-device-connection-infinispan/src/main/java/org/eclipse/hono/deviceconnection/infinispan/client/Versioned.java\nindex e3b1a24a1..7ff399c48 100644\n--- a/client-device-connection-infinispan/src/main/java/org/eclipse/hono/deviceconnection/infinispan/client/Versioned.java\n+++ b/client-device-connection-infinispan/src/main/java/org/eclipse/hono/deviceconnection/infinispan/client/Versioned.java\n", "chunk": "@@ -18,7 +18,7 @@ package org.eclipse.hono.deviceconnection.infinispan.client;\n  * \n  * @param <T> The payload type.\n  */\n-public class Versioned<T> {\n+public final class Versioned<T> {\n \n     private final long version;\n     private final T value;\n", "next_change": {"commit": "0e622a43550aabb5595724c40d90d8893446b9b8", "changed_code": [{"header": "diff --git a/client-device-connection-infinispan/src/main/java/org/eclipse/hono/deviceconnection/infinispan/client/Versioned.java b/client-device-connection-infinispan/src/main/java/org/eclipse/hono/deviceconnection/infinispan/client/Versioned.java\ndeleted file mode 100644\nindex 7ff399c48..000000000\n--- a/client-device-connection-infinispan/src/main/java/org/eclipse/hono/deviceconnection/infinispan/client/Versioned.java\n+++ /dev/null\n", "chunk": "@@ -1,45 +0,0 @@\n-/*******************************************************************************\n- * Copyright (c) 2020 Contributors to the Eclipse Foundation\n- *\n- * See the NOTICE file(s) distributed with this work for additional\n- * information regarding copyright ownership.\n- *\n- * This program and the accompanying materials are made available under the\n- * terms of the Eclipse Public License 2.0 which is available at\n- * http://www.eclipse.org/legal/epl-2.0\n- *\n- * SPDX-License-Identifier: EPL-2.0\n- *******************************************************************************/\n-\n-package org.eclipse.hono.deviceconnection.infinispan.client;\n-\n-/**\n- * A versioned entry.\n- * \n- * @param <T> The payload type.\n- */\n-public final class Versioned<T> {\n-\n-    private final long version;\n-    private final T value;\n-\n-    /**\n-     * Created a new versioned entry.\n-     * \n-     * @param version The version.\n-     * @param value The value.\n-     */\n-    public Versioned(final long version, final T value) {\n-        this.version = version;\n-        this.value = value;\n-    }\n-\n-    public T getValue() {\n-        return this.value;\n-    }\n-\n-    public long getVersion() {\n-        return this.version;\n-    }\n-\n-}\n", "next_change": null}]}}]}}, {"oid": "66147524277f3efefad19f2c67040ae81b90b6ea", "url": "https://github.com/eclipse/hono/commit/66147524277f3efefad19f2c67040ae81b90b6ea", "message": "[#1272] Implement new Device Connection API methods.\n\nSigned-off-by: Carsten Lohmann <carsten.lohmann@bosch.io>", "committedDate": "2020-03-11T14:46:22Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY1OTkxNg==", "url": "https://github.com/eclipse/hono/pull/1828#discussion_r391659916", "body": "the last known gateway id ?", "bodyText": "the last known gateway id ?", "bodyHTML": "<p dir=\"auto\">the last known gateway id ?</p>", "author": "sophokles73", "createdAt": "2020-03-12T14:29:16Z", "path": "services/device-connection/src/test/java/org/eclipse/hono/deviceconnection/infinispan/RemoteCacheBasedDeviceConnectionServiceTest.java", "diffHunk": "@@ -139,4 +139,28 @@ public void testGetLastKnownGatewayForDeviceNotFound(final VertxTestContext ctx)\n             ctx.completeNow();\n         }));\n     }\n+\n+    /**\n+     * Verifies that the last known gateway id can be set via the <em>setCommandHandlingAdapterInstance</em> operation.", "originalCommit": "66147524277f3efefad19f2c67040ae81b90b6ea", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc5MDMwNQ==", "url": "https://github.com/eclipse/hono/pull/1828#discussion_r391790305", "bodyText": "Fixed.", "author": "calohmn", "createdAt": "2020-03-12T17:47:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY1OTkxNg=="}], "type": "inlineReview", "revised_code": {"commit": "2760ef2abea9015a4b0b4095effae3c67b24e79c", "changed_code": [{"header": "diff --git a/services/device-connection/src/test/java/org/eclipse/hono/deviceconnection/infinispan/RemoteCacheBasedDeviceConnectionServiceTest.java b/services/device-connection/src/test/java/org/eclipse/hono/deviceconnection/infinispan/RemoteCacheBasedDeviceConnectionServiceTest.java\nindex 1ed3fdb49..408f20575 100644\n--- a/services/device-connection/src/test/java/org/eclipse/hono/deviceconnection/infinispan/RemoteCacheBasedDeviceConnectionServiceTest.java\n+++ b/services/device-connection/src/test/java/org/eclipse/hono/deviceconnection/infinispan/RemoteCacheBasedDeviceConnectionServiceTest.java\n", "chunk": "@@ -141,7 +141,8 @@ public class RemoteCacheBasedDeviceConnectionServiceTest {\n     }\n \n     /**\n-     * Verifies that the last known gateway id can be set via the <em>setCommandHandlingAdapterInstance</em> operation.\n+     * Verifies that the <em>setCommandHandlingAdapterInstance</em> operation succeeds and invokes the\n+     * corresponding method on the {@link DeviceConnectionInfo} instance.\n      *\n      * @param ctx The vert.x context.\n      */\n", "next_change": {"commit": "3dca60db2a92b7db1eb7ed9834674ab2b9690854", "changed_code": [{"header": "diff --git a/services/device-connection/src/test/java/org/eclipse/hono/deviceconnection/infinispan/RemoteCacheBasedDeviceConnectionServiceTest.java b/services/device-connection/src/test/java/org/eclipse/hono/deviceconnection/infinispan/RemoteCacheBasedDeviceConnectionServiceTest.java\nindex 408f20575..0c39762e6 100644\n--- a/services/device-connection/src/test/java/org/eclipse/hono/deviceconnection/infinispan/RemoteCacheBasedDeviceConnectionServiceTest.java\n+++ b/services/device-connection/src/test/java/org/eclipse/hono/deviceconnection/infinispan/RemoteCacheBasedDeviceConnectionServiceTest.java\n", "chunk": "@@ -151,15 +156,15 @@ public class RemoteCacheBasedDeviceConnectionServiceTest {\n \n         final String deviceId = \"testDevice\";\n         final String adapterInstanceId = \"adapterInstanceId\";\n-        when(cache.setCommandHandlingAdapterInstance(anyString(), anyString(), anyString(), any(SpanContext.class)))\n+        when(cache.setCommandHandlingAdapterInstance(anyString(), anyString(), anyString(), anyInt(), any(SpanContext.class)))\n                 .thenReturn(Future.succeededFuture());\n \n         givenAStartedService()\n-                .compose(ok -> svc.setCommandHandlingAdapterInstance(Constants.DEFAULT_TENANT, deviceId, adapterInstanceId, span))\n+                .compose(ok -> svc.setCommandHandlingAdapterInstance(Constants.DEFAULT_TENANT, deviceId, adapterInstanceId, -1, span))\n                 .setHandler(ctx.succeeding(result -> {\n                     ctx.verify(() -> {\n                         assertThat(result.getStatus()).isEqualTo(HttpURLConnection.HTTP_NO_CONTENT);\n-                        verify(cache).setCommandHandlingAdapterInstance(eq(Constants.DEFAULT_TENANT), eq(deviceId), eq(adapterInstanceId), any(SpanContext.class));\n+                        verify(cache).setCommandHandlingAdapterInstance(eq(Constants.DEFAULT_TENANT), eq(deviceId), eq(adapterInstanceId), anyInt(), any(SpanContext.class));\n                     });\n                     ctx.completeNow();\n                 }));\n", "next_change": {"commit": "d99f19ed48b936c45a7a4f5c7afc9a42dda35248", "changed_code": [{"header": "diff --git a/services/device-connection/src/test/java/org/eclipse/hono/deviceconnection/infinispan/RemoteCacheBasedDeviceConnectionServiceTest.java b/services/device-connection/src/test/java/org/eclipse/hono/deviceconnection/infinispan/RemoteCacheBasedDeviceConnectionServiceTest.java\nindex 0c39762e6..0ca7f0c3e 100644\n--- a/services/device-connection/src/test/java/org/eclipse/hono/deviceconnection/infinispan/RemoteCacheBasedDeviceConnectionServiceTest.java\n+++ b/services/device-connection/src/test/java/org/eclipse/hono/deviceconnection/infinispan/RemoteCacheBasedDeviceConnectionServiceTest.java\n", "chunk": "@@ -156,15 +155,15 @@ public class RemoteCacheBasedDeviceConnectionServiceTest {\n \n         final String deviceId = \"testDevice\";\n         final String adapterInstanceId = \"adapterInstanceId\";\n-        when(cache.setCommandHandlingAdapterInstance(anyString(), anyString(), anyString(), anyInt(), any(SpanContext.class)))\n+        when(cache.setCommandHandlingAdapterInstance(anyString(), anyString(), anyString(), any(), any(SpanContext.class)))\n                 .thenReturn(Future.succeededFuture());\n \n         givenAStartedService()\n-                .compose(ok -> svc.setCommandHandlingAdapterInstance(Constants.DEFAULT_TENANT, deviceId, adapterInstanceId, -1, span))\n+                .compose(ok -> svc.setCommandHandlingAdapterInstance(Constants.DEFAULT_TENANT, deviceId, adapterInstanceId, null, span))\n                 .setHandler(ctx.succeeding(result -> {\n                     ctx.verify(() -> {\n                         assertThat(result.getStatus()).isEqualTo(HttpURLConnection.HTTP_NO_CONTENT);\n-                        verify(cache).setCommandHandlingAdapterInstance(eq(Constants.DEFAULT_TENANT), eq(deviceId), eq(adapterInstanceId), anyInt(), any(SpanContext.class));\n+                        verify(cache).setCommandHandlingAdapterInstance(eq(Constants.DEFAULT_TENANT), eq(deviceId), eq(adapterInstanceId), any(), any(SpanContext.class));\n                     });\n                     ctx.completeNow();\n                 }));\n", "next_change": {"commit": "478e626f1d4d7f481184a16f85775b88cbdfeff6", "changed_code": [{"header": "diff --git a/services/device-connection/src/test/java/org/eclipse/hono/deviceconnection/infinispan/RemoteCacheBasedDeviceConnectionServiceTest.java b/services/device-connection/src/test/java/org/eclipse/hono/deviceconnection/infinispan/RemoteCacheBasedDeviceConnectionServiceTest.java\nindex 0ca7f0c3e..b93956de7 100644\n--- a/services/device-connection/src/test/java/org/eclipse/hono/deviceconnection/infinispan/RemoteCacheBasedDeviceConnectionServiceTest.java\n+++ b/services/device-connection/src/test/java/org/eclipse/hono/deviceconnection/infinispan/RemoteCacheBasedDeviceConnectionServiceTest.java\n", "chunk": "@@ -155,17 +156,20 @@ public class RemoteCacheBasedDeviceConnectionServiceTest {\n \n         final String deviceId = \"testDevice\";\n         final String adapterInstanceId = \"adapterInstanceId\";\n-        when(cache.setCommandHandlingAdapterInstance(anyString(), anyString(), anyString(), any(), any(SpanContext.class)))\n+        final boolean updateOnly = true;\n+        when(cache.setCommandHandlingAdapterInstance(anyString(), anyString(), anyString(), any(), anyBoolean(), any(SpanContext.class)))\n                 .thenReturn(Future.succeededFuture());\n \n         givenAStartedService()\n-                .compose(ok -> svc.setCommandHandlingAdapterInstance(Constants.DEFAULT_TENANT, deviceId, adapterInstanceId, null, span))\n-                .setHandler(ctx.succeeding(result -> {\n-                    ctx.verify(() -> {\n-                        assertThat(result.getStatus()).isEqualTo(HttpURLConnection.HTTP_NO_CONTENT);\n-                        verify(cache).setCommandHandlingAdapterInstance(eq(Constants.DEFAULT_TENANT), eq(deviceId), eq(adapterInstanceId), any(), any(SpanContext.class));\n-                    });\n-                    ctx.completeNow();\n-                }));\n+        .compose(ok -> svc.setCommandHandlingAdapterInstance(Constants.DEFAULT_TENANT, deviceId, adapterInstanceId, null,\n+                updateOnly, span))\n+        .setHandler(ctx.succeeding(result -> {\n+            ctx.verify(() -> {\n+                assertThat(result.getStatus()).isEqualTo(HttpURLConnection.HTTP_NO_CONTENT);\n+                verify(cache).setCommandHandlingAdapterInstance(eq(Constants.DEFAULT_TENANT), eq(deviceId), eq(adapterInstanceId), any(),\n+                        eq(updateOnly), any(SpanContext.class));\n+            });\n+            ctx.completeNow();\n+        }));\n     }\n }\n", "next_change": {"commit": "5e867466b06d7c92b754c5a6ba31bfa00a050e60", "changed_code": [{"header": "diff --git a/services/device-connection/src/test/java/org/eclipse/hono/deviceconnection/infinispan/RemoteCacheBasedDeviceConnectionServiceTest.java b/services/device-connection/src/test/java/org/eclipse/hono/deviceconnection/infinispan/CacheBasedDeviceConnectionServiceTest.java\nsimilarity index 71%\nrename from services/device-connection/src/test/java/org/eclipse/hono/deviceconnection/infinispan/RemoteCacheBasedDeviceConnectionServiceTest.java\nrename to services/device-connection/src/test/java/org/eclipse/hono/deviceconnection/infinispan/CacheBasedDeviceConnectionServiceTest.java\nindex b93956de7..859a2ddad 100644\n--- a/services/device-connection/src/test/java/org/eclipse/hono/deviceconnection/infinispan/RemoteCacheBasedDeviceConnectionServiceTest.java\n+++ b/services/device-connection/src/test/java/org/eclipse/hono/deviceconnection/infinispan/CacheBasedDeviceConnectionServiceTest.java\n", "chunk": "@@ -172,4 +172,56 @@ public class RemoteCacheBasedDeviceConnectionServiceTest {\n             ctx.completeNow();\n         }));\n     }\n+\n+    /**\n+     * Verifies that the <em>removeCommandHandlingAdapterInstance</em> operation succeeds, invokes the\n+     * corresponding method on the {@link DeviceConnectionInfo} instance, and returns the correct status code.\n+     * This test uses a {@code true} return value of <em>removeCommandHandlingAdapterInstance</em>.\n+     *\n+     * @param ctx The vert.x context.\n+     */\n+    @Test\n+    public void testRemoveCommandHandlingAdapterInstanceReturningTrue(final VertxTestContext ctx) {\n+\n+        final String deviceId = \"testDevice\";\n+        final String adapterInstanceId = \"adapterInstanceId\";\n+        when(cache.removeCommandHandlingAdapterInstance(anyString(), anyString(), anyString(), any(SpanContext.class)))\n+                .thenReturn(Future.succeededFuture(true));\n+\n+        givenAStartedService()\n+                .compose(ok -> svc.removeCommandHandlingAdapterInstance(Constants.DEFAULT_TENANT, deviceId, adapterInstanceId, span))\n+                .setHandler(ctx.succeeding(result -> {\n+                    ctx.verify(() -> {\n+                        assertThat(result.getStatus()).isEqualTo(HttpURLConnection.HTTP_NO_CONTENT);\n+                        verify(cache).removeCommandHandlingAdapterInstance(eq(Constants.DEFAULT_TENANT), eq(deviceId), eq(adapterInstanceId), any(SpanContext.class));\n+                    });\n+                    ctx.completeNow();\n+                }));\n+    }\n+\n+    /**\n+     * Verifies that the <em>removeCommandHandlingAdapterInstance</em> operation succeeds, invokes the\n+     * corresponding method on the {@link DeviceConnectionInfo} instance, and returns the correct status code.\n+     * This test uses a {@code false} return value of <em>removeCommandHandlingAdapterInstance</em>.\n+     *\n+     * @param ctx The vert.x context.\n+     */\n+    @Test\n+    public void testRemoveCommandHandlingAdapterInstanceReturningFalse(final VertxTestContext ctx) {\n+\n+        final String deviceId = \"testDevice\";\n+        final String adapterInstanceId = \"adapterInstanceId\";\n+        when(cache.removeCommandHandlingAdapterInstance(anyString(), anyString(), anyString(), any(SpanContext.class)))\n+                .thenReturn(Future.succeededFuture(false));\n+\n+        givenAStartedService()\n+                .compose(ok -> svc.removeCommandHandlingAdapterInstance(Constants.DEFAULT_TENANT, deviceId, adapterInstanceId, span))\n+                .setHandler(ctx.succeeding(result -> {\n+                    ctx.verify(() -> {\n+                        assertThat(result.getStatus()).isEqualTo(HttpURLConnection.HTTP_PRECON_FAILED);\n+                        verify(cache).removeCommandHandlingAdapterInstance(eq(Constants.DEFAULT_TENANT), eq(deviceId), eq(adapterInstanceId), any(SpanContext.class));\n+                    });\n+                    ctx.completeNow();\n+                }));\n+    }\n }\n", "next_change": null}]}}]}}]}}]}}]}}, {"oid": "48812c147d8ec2a2ade479217cf30df9aa96caf4", "url": "https://github.com/eclipse/hono/commit/48812c147d8ec2a2ade479217cf30df9aa96caf4", "message": "[#1272] Implement new Device Connection API methods.\n\nSigned-off-by: Carsten Lohmann <carsten.lohmann@bosch.io>", "committedDate": "2020-03-12T17:46:56Z", "type": "commit"}, {"oid": "48812c147d8ec2a2ade479217cf30df9aa96caf4", "url": "https://github.com/eclipse/hono/commit/48812c147d8ec2a2ade479217cf30df9aa96caf4", "message": "[#1272] Implement new Device Connection API methods.\n\nSigned-off-by: Carsten Lohmann <carsten.lohmann@bosch.io>", "committedDate": "2020-03-12T17:46:56Z", "type": "forcePushed"}]}