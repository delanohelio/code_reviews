{"pr_number": 2123, "pr_title": "Split Unit duties into a Hangar class", "pr_author": "sixlettervariables", "pr_createdAt": "2020-10-05T20:43:49Z", "pr_url": "https://github.com/MegaMek/mekhq/pull/2123", "merge_commit": "3f55aabad31fb84ff1e5af9c8caac7bd8c8999a0", "timeline": [{"oid": "e145018d37220795b2c41652acca0ebf724a1770", "url": "https://github.com/MegaMek/mekhq/commit/e145018d37220795b2c41652acca0ebf724a1770", "message": "Add a Hangar class to handle unit related actions", "committedDate": "2020-10-06T19:13:39Z", "type": "commit"}, {"oid": "c830304a7dc1c67a19f9a76be2f76e290c33953a", "url": "https://github.com/MegaMek/mekhq/commit/c830304a7dc1c67a19f9a76be2f76e290c33953a", "message": "Move the Campaign to use the new Hangar", "committedDate": "2020-10-06T19:13:39Z", "type": "commit"}, {"oid": "0fbf6ddf6ab8334212a53acc4413373866a0b70b", "url": "https://github.com/MegaMek/mekhq/commit/0fbf6ddf6ab8334212a53acc4413373866a0b70b", "message": "Rename Campaign::addUnit to addNewUnit", "committedDate": "2020-10-06T19:13:39Z", "type": "commit"}, {"oid": "211a0bb678070803c080859b84d42ddfc9c385c2", "url": "https://github.com/MegaMek/mekhq/commit/211a0bb678070803c080859b84d42ddfc9c385c2", "message": "Split out sorted views of the hangar into HangarSorter", "committedDate": "2020-10-06T19:13:40Z", "type": "commit"}, {"oid": "8a8709b596b25c291adb76fdb772eaa1f503729f", "url": "https://github.com/MegaMek/mekhq/commit/8a8709b596b25c291adb76fdb772eaa1f503729f", "message": "Move specialized requirements on getUnits to callers", "committedDate": "2020-10-06T19:13:40Z", "type": "commit"}, {"oid": "eb461f07fa33a6b4ea2ca65fa5de5b7ebafce619", "url": "https://github.com/MegaMek/mekhq/commit/eb461f07fa33a6b4ea2ca65fa5de5b7ebafce619", "message": "Transition away from Campaign::getUnits", "committedDate": "2020-10-06T19:14:26Z", "type": "commit"}, {"oid": "02cf732d561f245a8a8d39a2b8a819cb45ac94ca", "url": "https://github.com/MegaMek/mekhq/commit/02cf732d561f245a8a8d39a2b8a819cb45ac94ca", "message": "Remove unnecessary import", "committedDate": "2020-10-06T19:14:28Z", "type": "commit"}, {"oid": "02cf732d561f245a8a8d39a2b8a819cb45ac94ca", "url": "https://github.com/MegaMek/mekhq/commit/02cf732d561f245a8a8d39a2b8a819cb45ac94ca", "message": "Remove unnecessary import", "committedDate": "2020-10-06T19:14:28Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU0ODA4NA==", "url": "https://github.com/MegaMek/mekhq/pull/2123#discussion_r500548084", "body": "Tab spacing", "bodyText": "Tab spacing", "bodyHTML": "<p dir=\"auto\">Tab spacing</p>", "author": "Windchild292", "createdAt": "2020-10-06T19:35:50Z", "path": "MekHQ/src/mekhq/gui/dialog/PersonnelMarketDialog.java", "diffHunk": "@@ -365,14 +365,7 @@ private void addUnit(Entity en, boolean pay) {\n \t\t\t\tcampaign.getLocalDate())) {\n \t\t\treturn;\n \t\t}\n-\t\tcampaign.addUnit(en, false, 0);\n-\t\tUnit unit = null;\n-\t\tfor (Unit u : campaign.getUnits()) {\n-\t\t\tif (u.getEntity() == en) {\n-\t\t\t\tunit = u;\n-\t\t\t\tbreak;\n-\t\t\t}\n-        }\n+\t\tUnit unit = campaign.addNewUnit(en, false, 0);\n         if (unit == null) {\n             // No such unit matching the entity.\n             return;", "originalCommit": "02cf732d561f245a8a8d39a2b8a819cb45ac94ca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU2NjA1NA==", "url": "https://github.com/MegaMek/mekhq/pull/2123#discussion_r500566054", "bodyText": "Swore I got all of these, may not have pushed the change.", "author": "sixlettervariables", "createdAt": "2020-10-06T20:09:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU0ODA4NA=="}], "type": "inlineReview", "revised_code": {"commit": "6017ea3690ecd5a4a3fa881bc208359bfe7d2d61", "changed_code": [{"header": "diff --git a/MekHQ/src/mekhq/gui/dialog/PersonnelMarketDialog.java b/MekHQ/src/mekhq/gui/dialog/PersonnelMarketDialog.java\nindex 397983640..1ec9f6911 100644\n--- a/MekHQ/src/mekhq/gui/dialog/PersonnelMarketDialog.java\n+++ b/MekHQ/src/mekhq/gui/dialog/PersonnelMarketDialog.java\n", "chunk": "@@ -353,50 +353,50 @@ public class PersonnelMarketDialog extends JDialog {\n                 personnelMarket.removeAttachedEntity(pid);\n             }\n             refreshPersonView();\n-\t\t}\n-\t}\n-\n-\tprivate void addUnit(Entity en, boolean pay) {\n-\t\tif (null == en) {\n-\t\t\treturn;\n-\t\t}\n-\t\tif (pay && !campaign.getFinances().debit(unitCost, Transaction.C_UNIT,\n-\t\t\t\t\"Purchased \" + en.getShortName(),\n-\t\t\t\tcampaign.getLocalDate())) {\n-\t\t\treturn;\n-\t\t}\n-\t\tUnit unit = campaign.addNewUnit(en, false, 0);\n+        }\n+    }\n+\n+    private void addUnit(Entity en, boolean pay) {\n+        if (null == en) {\n+            return;\n+        }\n+        if (pay && !campaign.getFinances().debit(unitCost, Transaction.C_UNIT,\n+                \"Purchased \" + en.getShortName(),\n+                campaign.getLocalDate())) {\n+            return;\n+        }\n+        Unit unit = campaign.addNewUnit(en, false, 0);\n         if (unit == null) {\n             // No such unit matching the entity.\n             return;\n         }\n \n-\t\tif (unit.usesSoloPilot()) {\n-\t\t\tunit.addPilotOrSoldier(selectedPerson);\n-\t\t\tselectedPerson.setOriginalUnit(unit);\n-\t\t} else if (unit.usesSoldiers()) {\n-\t\t\tunit.addPilotOrSoldier(selectedPerson);\n-\t\t} else if (selectedPerson.canDrive(en)) {\n-\t\t\tunit.addDriver(selectedPerson);\n-\t\t} else if (selectedPerson.canGun(en)) {\n-\t\t\tunit.addGunner(selectedPerson);\n-\t\t} else if (selectedPerson.getPrimaryRole() == Person.T_NAVIGATOR) {\n-\t\t\tunit.setNavigator(selectedPerson);\n-\t\t} else {\n-\t\t\tunit.addVesselCrew(selectedPerson);\n-\t\t}\n-\n-\t\tcampaign.hirePersonnelFor(unit.getId(), !pay);\n-\t}\n-\n-\tprivate void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {\n-\t    selectedPerson = null;\n-    \tpersonnelMarket.setPaidRecruitment(radioPaidRecruitment.isSelected());\n-    \tif (radioPaidRecruitment.isSelected()) {\n-    \t\tpersonnelMarket.setPaidRecruitType(comboRecruitType.getSelectedIndex() + 1);\n-    \t}\n-\t    setVisible(false);\n-\t}\n+        if (unit.usesSoloPilot()) {\n+            unit.addPilotOrSoldier(selectedPerson);\n+            selectedPerson.setOriginalUnit(unit);\n+        } else if (unit.usesSoldiers()) {\n+            unit.addPilotOrSoldier(selectedPerson);\n+        } else if (selectedPerson.canDrive(en)) {\n+            unit.addDriver(selectedPerson);\n+        } else if (selectedPerson.canGun(en)) {\n+            unit.addGunner(selectedPerson);\n+        } else if (selectedPerson.getPrimaryRole() == Person.T_NAVIGATOR) {\n+            unit.setNavigator(selectedPerson);\n+        } else {\n+            unit.addVesselCrew(selectedPerson);\n+        }\n+\n+        campaign.hirePersonnelFor(unit.getId(), !pay);\n+    }\n+\n+    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {\n+        selectedPerson = null;\n+        personnelMarket.setPaidRecruitment(radioPaidRecruitment.isSelected());\n+        if (radioPaidRecruitment.isSelected()) {\n+            personnelMarket.setPaidRecruitType(comboRecruitType.getSelectedIndex() + 1);\n+        }\n+        setVisible(false);\n+    }\n \n     private void filterPersonnel() {\n         PersonnelFilter nGroup = (comboPersonType.getSelectedItem() != null)\n", "next_change": null}]}, "revised_code_in_main": {"commit": "3f55aabad31fb84ff1e5af9c8caac7bd8c8999a0", "changed_code": [{"header": "diff --git a/MekHQ/src/mekhq/gui/dialog/PersonnelMarketDialog.java b/MekHQ/src/mekhq/gui/dialog/PersonnelMarketDialog.java\nindex 397983640..6e0ddb410 100644\n--- a/MekHQ/src/mekhq/gui/dialog/PersonnelMarketDialog.java\n+++ b/MekHQ/src/mekhq/gui/dialog/PersonnelMarketDialog.java\n", "chunk": "@@ -353,50 +349,50 @@ public class PersonnelMarketDialog extends JDialog {\n                 personnelMarket.removeAttachedEntity(pid);\n             }\n             refreshPersonView();\n-\t\t}\n-\t}\n-\n-\tprivate void addUnit(Entity en, boolean pay) {\n-\t\tif (null == en) {\n-\t\t\treturn;\n-\t\t}\n-\t\tif (pay && !campaign.getFinances().debit(unitCost, Transaction.C_UNIT,\n-\t\t\t\t\"Purchased \" + en.getShortName(),\n-\t\t\t\tcampaign.getLocalDate())) {\n-\t\t\treturn;\n-\t\t}\n-\t\tUnit unit = campaign.addNewUnit(en, false, 0);\n+        }\n+    }\n+\n+    private void addUnit(Entity en, boolean pay) {\n+        if (null == en) {\n+            return;\n+        }\n+        if (pay && !campaign.getFinances().debit(unitCost, Transaction.C_UNIT,\n+                \"Purchased \" + en.getShortName(),\n+                campaign.getLocalDate())) {\n+            return;\n+        }\n+        Unit unit = campaign.addNewUnit(en, false, 0);\n         if (unit == null) {\n             // No such unit matching the entity.\n             return;\n         }\n \n-\t\tif (unit.usesSoloPilot()) {\n-\t\t\tunit.addPilotOrSoldier(selectedPerson);\n-\t\t\tselectedPerson.setOriginalUnit(unit);\n-\t\t} else if (unit.usesSoldiers()) {\n-\t\t\tunit.addPilotOrSoldier(selectedPerson);\n-\t\t} else if (selectedPerson.canDrive(en)) {\n-\t\t\tunit.addDriver(selectedPerson);\n-\t\t} else if (selectedPerson.canGun(en)) {\n-\t\t\tunit.addGunner(selectedPerson);\n-\t\t} else if (selectedPerson.getPrimaryRole() == Person.T_NAVIGATOR) {\n-\t\t\tunit.setNavigator(selectedPerson);\n-\t\t} else {\n-\t\t\tunit.addVesselCrew(selectedPerson);\n-\t\t}\n-\n-\t\tcampaign.hirePersonnelFor(unit.getId(), !pay);\n-\t}\n-\n-\tprivate void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {\n-\t    selectedPerson = null;\n-    \tpersonnelMarket.setPaidRecruitment(radioPaidRecruitment.isSelected());\n-    \tif (radioPaidRecruitment.isSelected()) {\n-    \t\tpersonnelMarket.setPaidRecruitType(comboRecruitType.getSelectedIndex() + 1);\n-    \t}\n-\t    setVisible(false);\n-\t}\n+        if (unit.usesSoloPilot()) {\n+            unit.addPilotOrSoldier(selectedPerson);\n+            selectedPerson.setOriginalUnit(unit);\n+        } else if (unit.usesSoldiers()) {\n+            unit.addPilotOrSoldier(selectedPerson);\n+        } else if (selectedPerson.canDrive(en)) {\n+            unit.addDriver(selectedPerson);\n+        } else if (selectedPerson.canGun(en)) {\n+            unit.addGunner(selectedPerson);\n+        } else if (selectedPerson.getPrimaryRole() == Person.T_NAVIGATOR) {\n+            unit.setNavigator(selectedPerson);\n+        } else {\n+            unit.addVesselCrew(selectedPerson);\n+        }\n+\n+        campaign.hirePersonnelFor(unit.getId(), !pay);\n+    }\n+\n+    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {\n+        selectedPerson = null;\n+        personnelMarket.setPaidRecruitment(radioPaidRecruitment.isSelected());\n+        if (radioPaidRecruitment.isSelected()) {\n+            personnelMarket.setPaidRecruitType(comboRecruitType.getSelectedIndex() + 1);\n+        }\n+        setVisible(false);\n+    }\n \n     private void filterPersonnel() {\n         PersonnelFilter nGroup = (comboPersonType.getSelectedItem() != null)\n", "next_change": {"commit": "1077aa3ce47d85a2b52d46fe24d0a9d6500338b3", "changed_code": [{"header": "diff --git a/MekHQ/src/mekhq/gui/dialog/PersonnelMarketDialog.java b/MekHQ/src/mekhq/gui/dialog/PersonnelMarketDialog.java\nindex 6e0ddb410..7015d2183 100644\n--- a/MekHQ/src/mekhq/gui/dialog/PersonnelMarketDialog.java\n+++ b/MekHQ/src/mekhq/gui/dialog/PersonnelMarketDialog.java\n", "chunk": "@@ -376,20 +382,21 @@ public class PersonnelMarketDialog extends JDialog {\n             unit.addDriver(selectedPerson);\n         } else if (selectedPerson.canGun(en)) {\n             unit.addGunner(selectedPerson);\n-        } else if (selectedPerson.getPrimaryRole() == Person.T_NAVIGATOR) {\n+        } else if (selectedPerson.getPrimaryRole().isVesselNavigator()) {\n             unit.setNavigator(selectedPerson);\n         } else {\n             unit.addVesselCrew(selectedPerson);\n         }\n \n-        campaign.hirePersonnelFor(unit.getId(), !pay);\n+        HirePersonnelUnitAction hireAction = new HirePersonnelUnitAction(!pay);\n+        hireAction.execute(campaign, unit);\n     }\n \n-    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {\n+    private void btnCloseActionPerformed(ActionEvent evt) {\n         selectedPerson = null;\n         personnelMarket.setPaidRecruitment(radioPaidRecruitment.isSelected());\n         if (radioPaidRecruitment.isSelected()) {\n-            personnelMarket.setPaidRecruitType(comboRecruitType.getSelectedIndex() + 1);\n+            personnelMarket.setPaidRecruitRole((PersonnelRole) comboRecruitRole.getSelectedItem());\n         }\n         setVisible(false);\n     }\n", "next_change": {"commit": "2db5d447486a94fd80b74fbecf4ce11013d3c4a7", "changed_code": [{"header": "diff --git a/MekHQ/src/mekhq/gui/dialog/PersonnelMarketDialog.java b/MekHQ/src/mekhq/gui/dialog/PersonnelMarketDialog.java\nindex 7015d2183..b5dab99d5 100644\n--- a/MekHQ/src/mekhq/gui/dialog/PersonnelMarketDialog.java\n+++ b/MekHQ/src/mekhq/gui/dialog/PersonnelMarketDialog.java\n", "chunk": "@@ -392,11 +387,11 @@ public class PersonnelMarketDialog extends JDialog {\n         hireAction.execute(campaign, unit);\n     }\n \n-    private void btnCloseActionPerformed(ActionEvent evt) {\n+    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {\n         selectedPerson = null;\n         personnelMarket.setPaidRecruitment(radioPaidRecruitment.isSelected());\n         if (radioPaidRecruitment.isSelected()) {\n-            personnelMarket.setPaidRecruitRole((PersonnelRole) comboRecruitRole.getSelectedItem());\n+            personnelMarket.setPaidRecruitType(comboRecruitType.getSelectedIndex() + 1);\n         }\n         setVisible(false);\n     }\n", "next_change": {"commit": "ec5843cb0d12174c7d5f83419268e5184d2d60f6", "changed_code": [{"header": "diff --git a/MekHQ/src/mekhq/gui/dialog/PersonnelMarketDialog.java b/MekHQ/src/mekhq/gui/dialog/PersonnelMarketDialog.java\nindex b5dab99d5..b82114019 100644\n--- a/MekHQ/src/mekhq/gui/dialog/PersonnelMarketDialog.java\n+++ b/MekHQ/src/mekhq/gui/dialog/PersonnelMarketDialog.java\n", "chunk": "@@ -387,11 +392,11 @@ public class PersonnelMarketDialog extends JDialog {\n         hireAction.execute(campaign, unit);\n     }\n \n-    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {\n+    private void btnCloseActionPerformed(ActionEvent evt) {\n         selectedPerson = null;\n         personnelMarket.setPaidRecruitment(radioPaidRecruitment.isSelected());\n         if (radioPaidRecruitment.isSelected()) {\n-            personnelMarket.setPaidRecruitType(comboRecruitType.getSelectedIndex() + 1);\n+            personnelMarket.setPaidRecruitRole((PersonnelRole) comboRecruitRole.getSelectedItem());\n         }\n         setVisible(false);\n     }\n", "next_change": {"commit": "6657632d012f4c360cebe06d2367433c24e31f19", "changed_code": [{"header": "diff --git a/MekHQ/src/mekhq/gui/dialog/PersonnelMarketDialog.java b/MekHQ/src/mekhq/gui/dialog/PersonnelMarketDialog.java\nindex b82114019..5798223f2 100644\n--- a/MekHQ/src/mekhq/gui/dialog/PersonnelMarketDialog.java\n+++ b/MekHQ/src/mekhq/gui/dialog/PersonnelMarketDialog.java\n", "chunk": "@@ -405,7 +414,7 @@ public class PersonnelMarketDialog extends JDialog {\n         PersonnelFilter nGroup = (comboPersonType.getSelectedItem() != null)\n                 ? (PersonnelFilter) comboPersonType.getSelectedItem()\n                 : PersonnelFilter.ACTIVE;\n-        sorter.setRowFilter(new RowFilter<PersonnelTableModel, Integer>() {\n+        sorter.setRowFilter(new RowFilter<>() {\n             @Override\n             public boolean include(Entry<? extends PersonnelTableModel, ? extends Integer> entry) {\n                 return nGroup.getFilteredInformation(entry.getModel().getPerson(entry.getIdentifier()));\n", "next_change": {"commit": "3da86ee256cdcbd192529cd8afb7a73cd4db97c2", "changed_code": [{"header": "diff --git a/MekHQ/src/mekhq/gui/dialog/PersonnelMarketDialog.java b/MekHQ/src/mekhq/gui/dialog/PersonnelMarketDialog.java\nindex 5798223f2..ff91e99b9 100644\n--- a/MekHQ/src/mekhq/gui/dialog/PersonnelMarketDialog.java\n+++ b/MekHQ/src/mekhq/gui/dialog/PersonnelMarketDialog.java\n", "chunk": "@@ -422,10 +424,10 @@ public class PersonnelMarketDialog extends JDialog {\n         });\n     }\n \n-    private void personChanged(javax.swing.event.ListSelectionEvent evt) {\n+    private void personChanged(ListSelectionEvent evt) {\n         int view = tablePersonnel.getSelectedRow();\n         if (view < 0) {\n-            //selection got filtered away\n+            // selection got filtered away\n             selectedPerson = null;\n             refreshPersonView();\n             return;\n", "next_change": null}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "3f55aabad31fb84ff1e5af9c8caac7bd8c8999a0", "message": "Merge commit", "committedDate": null}, {"oid": "4bfb742ec7360075418f7944b61ee0d4b825c0f0", "committedDate": "2020-10-24 10:36:45 -0400", "message": "Implementing PersonnelFilterStyle"}, {"oid": "b60b5a84ad487fe05e6369a11fedccb4f233a69d", "committedDate": "2020-10-29 15:28:06 -0400", "message": "Move Hire Personnel for a Unit to an action"}, {"oid": "b454edaa02957ae6dcf59c50a1cf582ed338ed3d", "committedDate": "2020-10-29 15:31:29 -0400", "message": "Fix casing of IUnitAction::execute"}, {"oid": "1077aa3ce47d85a2b52d46fe24d0a9d6500338b3", "committedDate": "2021-01-07 22:38:01 -0500", "message": "Implementing PersonnelRole Enum"}, {"oid": "2db5d447486a94fd80b74fbecf4ce11013d3c4a7", "committedDate": "2021-03-02 14:11:04 -0700", "message": "Moving components and preferences to MM"}, {"oid": "ec5843cb0d12174c7d5f83419268e5184d2d60f6", "committedDate": "2021-03-13 09:08:04 -0700", "message": "Fixing merge conflicts"}, {"oid": "9d58feb51dbeadff68cd0075c962e615d1bdf5ec", "committedDate": "2021-04-29 13:33:58 -0400", "message": "Fixing preferences issue in the Personnel Market"}, {"oid": "7042b484e69290c91cf89f59909b94a3d41090b7", "committedDate": "2021-06-02 17:09:58 -0400", "message": "Finishing up the GUI Enum changes"}, {"oid": "ec7e4bc4aeed27a5b835b44d295642228bcc16c3", "committedDate": "2021-08-10 12:37:47 -0400", "message": "Transaction Type Enum"}, {"oid": "795d3aba4875a600dd0a6ec91a10cb7e90814c6c", "committedDate": "2021-08-18 12:48:20 -0400", "message": "Removing Person's Campaign save and switching to full pass-by-reference for Campaign"}, {"oid": "70aa4b94439c59d6e5de9d6191a3c0a02365e644", "committedDate": "2021-08-24 13:39:42 -0400", "message": "Fixing merge conflicts"}, {"oid": "21600c478569436ab215402bbca4bbbeced841a8", "committedDate": "2021-11-03 20:59:54 -0400", "message": "Adding localization to all MekHQ resource maps"}, {"oid": "6657632d012f4c360cebe06d2367433c24e31f19", "committedDate": "2021-12-21 12:09:30 -0500", "message": "Implementing the PersonnelTableModelColumn Enum"}, {"oid": "9e27bb6e3e816106a4c33a0e66bcd9bddd510ef3", "committedDate": "2021-12-21 16:26:16 -0500", "message": "Fixing merge conflicts"}, {"oid": "5089ba272b3ca25ab52ca4fcc1bef3766377f2ec", "committedDate": "2022-01-08 13:22:56 -0500", "message": "Fixing merge conflicts"}, {"oid": "cc823a078ddc1a8924d1e2c02e93375a6b27d327", "committedDate": "2022-01-19 19:19:33 -0500", "message": "Removing all serialVersionUID uses in MekHQ"}, {"oid": "c9ac45226f5852f8bb76af479c9d962105bbbed7", "committedDate": "2022-01-19 20:02:33 -0500", "message": "Mass spacing fixes"}, {"oid": "bc2c2966614f17d153b03c3087b46c1a4b44b969", "committedDate": "2022-01-21 19:03:24 -0500", "message": "SuiteOptions: Naming standardization and finishing initial setup"}, {"oid": "e8395d1d642870050d705d4fac2a0df255cea722", "committedDate": "2022-01-24 12:28:09 -0500", "message": "Fixing merge conflicts"}, {"oid": "01633b8cfb55eee9c3240bff79e0122fbc54386b", "committedDate": "2022-02-13 13:10:41 -0500", "message": "Fixing MHQ's Javadoc Build"}, {"oid": "483ec96cd157a857a1e7155be64dc5ef7c72346a", "committedDate": "2022-02-24 20:32:12 -0500", "message": "Migrating a bunch of MHQ utility code to MM"}, {"oid": "1cffb4893add13dfeca148a293bc45d259f158cc", "committedDate": "2022-03-21 00:50:58 -0400", "message": "Removing the MHQ NLS and i18n useless comments"}, {"oid": "a5551976147ed27452460826747e8e78adaba7f3", "committedDate": "2022-04-06 19:13:31 -0400", "message": "StringUtility: Renaming isNullOrEmpty to the proper isNullOrBlank"}, {"oid": "4760df533eefdeddf1171de8ab688be49b0589ac", "committedDate": "2022-04-19 20:32:56 -0400", "message": "Fixing a ton of MHQ spelling mistakes"}, {"oid": "c36b9abebeafcfe3f11349022312a69d6629cdf9", "committedDate": "2022-04-20 18:11:24 -0400", "message": "Swapping to using a single XTableColumnModel"}, {"oid": "92fea47bd23daff29331168cdd9cad96b3596bfa", "committedDate": "2022-05-03 22:01:59 -0400", "message": "Applying changes from MM's assert removals"}, {"oid": "6700d0e0f307a99c1b3b4c197cecab2f66d964a5", "committedDate": "2022-05-03 22:25:37 -0400", "message": "Applying changes from personal review"}, {"oid": "1d4e6272ff1e8d4430427ddaee36f9f5e7515769", "committedDate": "2022-05-03 22:29:18 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_SuiteCleanup2"}, {"oid": "befe16cd103b8249c4fb645bf26d587fb519d521", "committedDate": "2022-05-30 18:15:56 -0400", "message": "Merge branch 'master' into dev_Windchild_SuiteCleanup2"}, {"oid": "a6d88033b71b9291e4774a5cbc3e8f577287a523", "committedDate": "2022-12-16 22:33:19 -0500", "message": "Tearing out EncodeControl"}, {"oid": "e3e1ce62490858d93d695b7e7f8bf17dca068936", "committedDate": "2022-12-29 14:30:54 -0500", "message": "Standardize option naming"}, {"oid": "3a03d85973df2d61e72601f9f85cd0101e4e9888", "committedDate": "2023-01-29 20:03:18 -0500", "message": "Swap Frame Uses to JFrame"}, {"oid": "724a8333d072d631c1072fd7ccf2707efe6e2b40", "committedDate": "2023-02-07 20:56:16 -0500", "message": "Fixing merge conflicts"}, {"oid": "e6ffc6ee4be8b7e8b0909bed43c5c399397ba85f", "committedDate": "2023-02-08 00:30:58 -0500", "message": "Simplifying out useless java.awt.* calls"}, {"oid": "3da86ee256cdcbd192529cd8afb7a73cd4db97c2", "committedDate": "2023-02-08 01:23:52 -0500", "message": "Simplifying Javax.swing calls"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU1MDAwNg==", "url": "https://github.com/MegaMek/mekhq/pull/2123#discussion_r500550006", "body": "We should never have a null unit, so we probably want to fix the backend reason for this check if it still exists", "bodyText": "We should never have a null unit, so we probably want to fix the backend reason for this check if it still exists", "bodyHTML": "<p dir=\"auto\">We should never have a null unit, so we probably want to fix the backend reason for this check if it still exists</p>", "author": "Windchild292", "createdAt": "2020-10-06T19:39:36Z", "path": "MekHQ/src/mekhq/campaign/rating/CampaignOpsReputation.java", "diffHunk": "@@ -248,8 +247,7 @@ private int getTotalForceUnits() {\n         // Count total units for transport\n         getTotalCombatUnits();\n \n-        List<Unit> unitList = getCampaign().getCopyOfUnits();\n-        for (Unit u : unitList) {\n+        for (Unit u : getCampaign().getHangar().getUnits()) {\n             if (u == null) {\n                 continue;\n             }", "originalCommit": "02cf732d561f245a8a8d39a2b8a819cb45ac94ca", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "133ab1e5b7987a643bc8f1d2d03e8f9e4ce829a0", "changed_code": [{"header": "diff --git a/MekHQ/src/mekhq/campaign/rating/CampaignOpsReputation.java b/MekHQ/src/mekhq/campaign/rating/CampaignOpsReputation.java\nindex 066e2c328..f4ba5d8c4 100644\n--- a/MekHQ/src/mekhq/campaign/rating/CampaignOpsReputation.java\n+++ b/MekHQ/src/mekhq/campaign/rating/CampaignOpsReputation.java\n", "chunk": "@@ -242,7 +233,6 @@ public class CampaignOpsReputation extends AbstractUnitRating {\n         int totalAero = 0;\n         int totalInfantry = 0;\n         int totalBattleArmor = 0;\n-        int forceTotal;\n \n         // Count total units for transport\n         getTotalCombatUnits();\n", "next_change": {"commit": "a328a1e42771f0c7052a7c9c1b2583134a8534f4", "changed_code": [{"header": "diff --git a/MekHQ/src/mekhq/campaign/rating/CampaignOpsReputation.java b/MekHQ/src/mekhq/campaign/rating/CampaignOpsReputation.java\nindex f4ba5d8c4..8aa7a4ba1 100644\n--- a/MekHQ/src/mekhq/campaign/rating/CampaignOpsReputation.java\n+++ b/MekHQ/src/mekhq/campaign/rating/CampaignOpsReputation.java\n", "chunk": "@@ -233,6 +238,7 @@ public class CampaignOpsReputation extends AbstractUnitRating {\n         int totalAero = 0;\n         int totalInfantry = 0;\n         int totalBattleArmor = 0;\n+        int forceTotal;\n \n         // Count total units for transport\n         getTotalCombatUnits();\n", "next_change": {"commit": "e0f16b480db19ce9d36290caa03be8f6be77cace", "changed_code": [{"header": "diff --git a/MekHQ/src/mekhq/campaign/rating/CampaignOpsReputation.java b/MekHQ/src/mekhq/campaign/rating/CampaignOpsReputation.java\nindex 8aa7a4ba1..3f42bd2b8 100644\n--- a/MekHQ/src/mekhq/campaign/rating/CampaignOpsReputation.java\n+++ b/MekHQ/src/mekhq/campaign/rating/CampaignOpsReputation.java\n", "chunk": "@@ -238,7 +232,6 @@ public class CampaignOpsReputation extends AbstractUnitRating {\n         int totalAero = 0;\n         int totalInfantry = 0;\n         int totalBattleArmor = 0;\n-        int forceTotal;\n \n         // Count total units for transport\n         getTotalCombatUnits();\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "3f55aabad31fb84ff1e5af9c8caac7bd8c8999a0", "message": "Merge commit", "committedDate": null}, {"oid": "1077aa3ce47d85a2b52d46fe24d0a9d6500338b3", "committedDate": "2021-01-07 22:38:01 -0500", "message": "Implementing PersonnelRole Enum"}, {"oid": "c9ac45226f5852f8bb76af479c9d962105bbbed7", "committedDate": "2022-01-19 20:02:33 -0500", "message": "Mass spacing fixes"}, {"oid": "01633b8cfb55eee9c3240bff79e0122fbc54386b", "committedDate": "2022-02-13 13:10:41 -0500", "message": "Fixing MHQ's Javadoc Build"}, {"oid": "5225447616982c3b8133c254025dc0e013dea986", "committedDate": "2022-11-03 22:28:21 -0400", "message": "Added Partial Success to rating dialog for FMMr and Cam Ops"}, {"oid": "133ab1e5b7987a643bc8f1d2d03e8f9e4ce829a0", "committedDate": "2023-01-17 21:29:40 -0500", "message": "Migrating Unit Rating to SkillLevel"}, {"oid": "a328a1e42771f0c7052a7c9c1b2583134a8534f4", "committedDate": "2023-01-25 22:45:44 -0500", "message": "Campaign Ops Unit Rating: Properly Calculate Personnel Numbers"}, {"oid": "5ad55c0aa2dd0422f1e05d2704860f7674936984", "committedDate": "2023-01-25 23:11:45 -0500", "message": "Applying changes from testing and further rule reading"}, {"oid": "411fcb9f91fa41afc9d7e0288e2044552000d3b0", "committedDate": "2023-01-25 23:14:24 -0500", "message": "Fixing some comment spelling"}, {"oid": "e0f16b480db19ce9d36290caa03be8f6be77cace", "committedDate": "2023-02-07 21:43:07 -0500", "message": "Fixing merge conflicts"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU1MjY0Nw==", "url": "https://github.com/MegaMek/mekhq/pull/2123#discussion_r500552647", "body": "```suggestion\r\n            if (j == units.size()) {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if(j == units.size()) {\n          \n          \n            \n                        if (j == units.size()) {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-k\">if</span>(j <span class=\"pl-k\">==</span> units<span class=\"pl-k\">.</span>size()) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-k\">if</span><span class=\"x x-first x-last\"> </span>(j <span class=\"pl-k\">==</span> units<span class=\"pl-k\">.</span>size()) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "Windchild292", "createdAt": "2020-10-06T19:44:38Z", "path": "MekHQ/src/mekhq/gui/dialog/PayCollateralDialog.java", "diffHunk": "@@ -137,7 +137,7 @@ private void initComponents() {\n             gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n             gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;\n             gridBagConstraints.weightx = 1.0;\n-            if(j == (units.size())) {\n+            if(j == units.size()) {", "originalCommit": "02cf732d561f245a8a8d39a2b8a819cb45ac94ca", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cb64714e6e2b7d03de487c72eb18c3c09948b6c6", "changed_code": [{"header": "diff --git a/MekHQ/src/mekhq/gui/dialog/PayCollateralDialog.java b/MekHQ/src/mekhq/gui/dialog/PayCollateralDialog.java\nindex 07ee3734b..a5fab7847 100644\n--- a/MekHQ/src/mekhq/gui/dialog/PayCollateralDialog.java\n+++ b/MekHQ/src/mekhq/gui/dialog/PayCollateralDialog.java\n", "chunk": "@@ -137,7 +137,7 @@ public class PayCollateralDialog extends JDialog {\n             gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n             gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;\n             gridBagConstraints.weightx = 1.0;\n-            if(j == units.size()) {\n+            if (j == units.size()) {\n                 gridBagConstraints.weighty = 1.0;\n             }\n             gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);\n", "next_change": null}]}, "revised_code_in_main": {"commit": "3f55aabad31fb84ff1e5af9c8caac7bd8c8999a0", "changed_code": [{"header": "diff --git a/MekHQ/src/mekhq/gui/dialog/PayCollateralDialog.java b/MekHQ/src/mekhq/gui/dialog/PayCollateralDialog.java\nindex 07ee3734b..a5fab7847 100644\n--- a/MekHQ/src/mekhq/gui/dialog/PayCollateralDialog.java\n+++ b/MekHQ/src/mekhq/gui/dialog/PayCollateralDialog.java\n", "chunk": "@@ -137,7 +137,7 @@ public class PayCollateralDialog extends JDialog {\n             gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n             gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;\n             gridBagConstraints.weightx = 1.0;\n-            if(j == units.size()) {\n+            if (j == units.size()) {\n                 gridBagConstraints.weighty = 1.0;\n             }\n             gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);\n", "next_change": {"commit": "e6ffc6ee4be8b7e8b0909bed43c5c399397ba85f", "changed_code": [{"header": "diff --git a/MekHQ/src/mekhq/gui/dialog/PayCollateralDialog.java b/MekHQ/src/mekhq/gui/dialog/PayCollateralDialog.java\nindex a5fab7847..ed2e72032 100644\n--- a/MekHQ/src/mekhq/gui/dialog/PayCollateralDialog.java\n+++ b/MekHQ/src/mekhq/gui/dialog/PayCollateralDialog.java\n", "chunk": "@@ -131,40 +107,40 @@ public class PayCollateralDialog extends JDialog {\n             box.setEnabled(u.isPresent() && !u.isDeployed());\n             box.addItemListener(evt -> updateAmount());\n             unitBoxes.put(box, u.getId());\n-            gridBagConstraints = new java.awt.GridBagConstraints();\n+            gridBagConstraints = new GridBagConstraints();\n             gridBagConstraints.gridx = 0;\n             gridBagConstraints.gridy = i;\n-            gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;\n+            gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;\n             gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;\n             gridBagConstraints.weightx = 1.0;\n             if (j == units.size()) {\n                 gridBagConstraints.weighty = 1.0;\n             }\n-            gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);\n+            gridBagConstraints.insets = new Insets(5, 5, 0, 0);\n             pnlUnits.add(box, gridBagConstraints);\n             i++;\n         }\n         JScrollPane scrUnits = new JScrollPane();\n         scrUnits.setViewportView(pnlUnits);\n-        scrUnits.setMinimumSize(new java.awt.Dimension(400, 300));\n-        scrUnits.setPreferredSize(new java.awt.Dimension(400, 300));\n+        scrUnits.setMinimumSize(new Dimension(400, 300));\n+        scrUnits.setPreferredSize(new Dimension(400, 300));\n \n         partSliders = new LinkedHashMap<>();\n         JPanel pnlParts = new JPanel(new GridBagLayout());\n         i = 0;\n         j = 0;\n         JSlider partSlider;\n-        ArrayList<Part> spareParts = campaign.getSpareParts();\n-        for(Part p : spareParts) {\n+        List<Part> spareParts = campaign.getWarehouse().getSpareParts();\n+        for (Part p : spareParts) {\n             j++;\n             int quantity = p.getQuantity();\n-            if(p instanceof AmmoStorage) {\n-                quantity = ((AmmoStorage)p).getQuantity();\n+            if (p instanceof AmmoStorage) {\n+                quantity = ((AmmoStorage) p).getQuantity();\n             }\n             partSlider = new JSlider(JSlider.HORIZONTAL, 0, quantity, 0);\n             //TODO: deal with armors\n             partSlider.setMajorTickSpacing(1);\n-            if(quantity < 11) {\n+            if (quantity < 11) {\n                 partSlider.setPaintLabels(true);\n             }\n             partSlider.setPaintTicks(true);\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "3f55aabad31fb84ff1e5af9c8caac7bd8c8999a0", "message": "Merge commit", "committedDate": null}, {"oid": "c883a5f8c0085c74e8f448ecd3c0f9c04227b067", "committedDate": "2020-10-27 17:22:03 -0400", "message": "Move spare part helpers to Warehouse and add tests"}, {"oid": "2db5d447486a94fd80b74fbecf4ce11013d3c4a7", "committedDate": "2021-03-02 14:11:04 -0700", "message": "Moving components and preferences to MM"}, {"oid": "3d303b442ab8d664c56fd8709d970f86c7eed83f", "committedDate": "2021-07-30 10:40:29 -0400", "message": "Loan code cleanup and refactoring"}, {"oid": "21600c478569436ab215402bbca4bbbeced841a8", "committedDate": "2021-11-03 20:59:54 -0400", "message": "Adding localization to all MekHQ resource maps"}, {"oid": "3b458aafcf56ec74e926bf3a593b88b9c7d14842", "committedDate": "2022-01-10 14:42:55 -0500", "message": "Fixing the remaining tab spacing in MekHQ"}, {"oid": "cc823a078ddc1a8924d1e2c02e93375a6b27d327", "committedDate": "2022-01-19 19:19:33 -0500", "message": "Removing all serialVersionUID uses in MekHQ"}, {"oid": "c9ac45226f5852f8bb76af479c9d962105bbbed7", "committedDate": "2022-01-19 20:02:33 -0500", "message": "Mass spacing fixes"}, {"oid": "bc2c2966614f17d153b03c3087b46c1a4b44b969", "committedDate": "2022-01-21 19:03:24 -0500", "message": "SuiteOptions: Naming standardization and finishing initial setup"}, {"oid": "e8395d1d642870050d705d4fac2a0df255cea722", "committedDate": "2022-01-24 12:28:09 -0500", "message": "Fixing merge conflicts"}, {"oid": "01633b8cfb55eee9c3240bff79e0122fbc54386b", "committedDate": "2022-02-13 13:10:41 -0500", "message": "Fixing MHQ's Javadoc Build"}, {"oid": "1cffb4893add13dfeca148a293bc45d259f158cc", "committedDate": "2022-03-21 00:50:58 -0400", "message": "Removing the MHQ NLS and i18n useless comments"}, {"oid": "92fea47bd23daff29331168cdd9cad96b3596bfa", "committedDate": "2022-05-03 22:01:59 -0400", "message": "Applying changes from MM's assert removals"}, {"oid": "6a7f86fb972db508802e14ca60a0c4f21b4272c3", "committedDate": "2022-05-25 18:41:28 -0400", "message": "Renaming finances array getters to get* from getAll*"}, {"oid": "7543b6525f7b6b9b34f68443bf3184d66b86f8b2", "committedDate": "2022-05-30 17:24:30 -0400", "message": "Merge pull request #3261 from Windchild292/dev_Windchild_AssertionCleanup"}, {"oid": "1d595f40671054903b374d0d10de45a07e16c935", "committedDate": "2022-06-01 12:54:12 -0400", "message": "Merging getCurrentPrice with getActualValue, so it actually applies the campaign options"}, {"oid": "76223b1f01db0e020c9069b9c361d7af9f174e6a", "committedDate": "2022-06-01 17:49:36 -0400", "message": "Merge remote-tracking branch 'origin/master' into dev_Windchild_PartPriceApplications"}, {"oid": "a6d88033b71b9291e4774a5cbc3e8f577287a523", "committedDate": "2022-12-16 22:33:19 -0500", "message": "Tearing out EncodeControl"}, {"oid": "3a03d85973df2d61e72601f9f85cd0101e4e9888", "committedDate": "2023-01-29 20:03:18 -0500", "message": "Swap Frame Uses to JFrame"}, {"oid": "e6ffc6ee4be8b7e8b0909bed43c5c399397ba85f", "committedDate": "2023-02-08 00:30:58 -0500", "message": "Simplifying out useless java.awt.* calls"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU1NDYwMw==", "url": "https://github.com/MegaMek/mekhq/pull/2123#discussion_r500554603", "body": "```suggestion\r\n        if (unit.getId() == null) {\r\n            unit.setId(UUID.randomUUID());\r\n        }\r\n\r\n        units.put(unit.getId(), unit);\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    UUID id = unit.getId();\n          \n          \n            \n                    if (id == null) {\n          \n          \n            \n                        id = UUID.randomUUID();\n          \n          \n            \n                        unit.setId(id);\n          \n          \n            \n                    }\n          \n          \n            \n            \n          \n          \n            \n                    units.put(id, unit);\n          \n          \n            \n                    if (unit.getId() == null) {\n          \n          \n            \n                        unit.setId(UUID.randomUUID());\n          \n          \n            \n                    }\n          \n          \n            \n            \n          \n          \n            \n                    units.put(unit.getId(), unit);", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-smi\">UUID</span> id <span class=\"pl-k\">=</span> unit<span class=\"pl-k\">.</span>getId();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">if</span> (id <span class=\"pl-k\">==</span> <span class=\"pl-c1\">null</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            id <span class=\"pl-k\">=</span> <span class=\"pl-c1\">UUID</span><span class=\"pl-k\">.</span>randomUUID();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            unit<span class=\"pl-k\">.</span>setId(id);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        units<span class=\"pl-k\">.</span>put(id, unit);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">if</span> (unit<span class=\"pl-k\">.</span>getId() <span class=\"pl-k\">==</span> <span class=\"pl-c1\">null</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            unit<span class=\"pl-k\">.</span>setId(<span class=\"pl-c1\">UUID</span><span class=\"pl-k\">.</span>randomUUID());</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        units<span class=\"pl-k\">.</span>put(unit<span class=\"pl-k\">.</span>getId(), unit);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "Windchild292", "createdAt": "2020-10-06T19:48:27Z", "path": "MekHQ/src/mekhq/campaign/Hangar.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/*\n+ * Hangar.java\n+ *\n+ * Copyright (c) 2020 - The MegaMek Team. All Rights Reserved.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package mekhq.campaign;\n+\n+import java.io.PrintWriter;\n+import java.util.Collection;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.function.BiConsumer;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+import java.util.stream.Stream;\n+\n+import mekhq.MekHqXmlUtil;\n+import mekhq.campaign.finances.Money;\n+import mekhq.campaign.unit.Unit;\n+\n+/**\n+ * Represents a hangar which contains zero or more units.\n+ */\n+public class Hangar {\n+    private Map<UUID, Unit> units = new LinkedHashMap<>();\n+\n+    /**\n+     * Adds a unit to the hangar.\n+     *\n+     * If the unit does not have an ID, one is\n+     * assigned to it.\n+     *\n+     * @param unit The unit to add to the hangar.\n+     */\n+    public void addUnit(Unit unit) {\n+        if (unit == null) {\n+            return;\n+        }\n+\n+        UUID id = unit.getId();\n+        if (id == null) {\n+            id = UUID.randomUUID();\n+            unit.setId(id);\n+        }\n+\n+        units.put(id, unit);", "originalCommit": "02cf732d561f245a8a8d39a2b8a819cb45ac94ca", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU1NTU3OQ==", "url": "https://github.com/MegaMek/mekhq/pull/2123#discussion_r500555579", "bodyText": "Just an idea, because this is a default getter it should be fine", "author": "Windchild292", "createdAt": "2020-10-06T19:50:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU1NDYwMw=="}], "type": "inlineReview", "revised_code": {"commit": "cb64714e6e2b7d03de487c72eb18c3c09948b6c6", "changed_code": [{"header": "diff --git a/MekHQ/src/mekhq/campaign/Hangar.java b/MekHQ/src/mekhq/campaign/Hangar.java\nindex 78e735d90..4be3f1f60 100644\n--- a/MekHQ/src/mekhq/campaign/Hangar.java\n+++ b/MekHQ/src/mekhq/campaign/Hangar.java\n", "chunk": "@@ -55,13 +55,11 @@ public class Hangar {\n             return;\n         }\n \n-        UUID id = unit.getId();\n-        if (id == null) {\n-            id = UUID.randomUUID();\n-            unit.setId(id);\n+        if (unit.getId() == null) {\n+            unit.setId(UUID.randomUUID());\n         }\n \n-        units.put(id, unit);\n+        units.put(unit.getId(), unit);\n     }\n \n     /**\n", "next_change": null}]}, "revised_code_in_main": {"commit": "3f55aabad31fb84ff1e5af9c8caac7bd8c8999a0", "changed_code": [{"header": "diff --git a/MekHQ/src/mekhq/campaign/Hangar.java b/MekHQ/src/mekhq/campaign/Hangar.java\nindex 78e735d90..4be3f1f60 100644\n--- a/MekHQ/src/mekhq/campaign/Hangar.java\n+++ b/MekHQ/src/mekhq/campaign/Hangar.java\n", "chunk": "@@ -55,13 +55,11 @@ public class Hangar {\n             return;\n         }\n \n-        UUID id = unit.getId();\n-        if (id == null) {\n-            id = UUID.randomUUID();\n-            unit.setId(id);\n+        if (unit.getId() == null) {\n+            unit.setId(UUID.randomUUID());\n         }\n \n-        units.put(id, unit);\n+        units.put(unit.getId(), unit);\n     }\n \n     /**\n", "next_change": {"commit": "494b38fcedcda31bef2e6f701152a47ce1b0e397", "changed_code": [{"header": "diff --git a/MekHQ/src/mekhq/campaign/Hangar.java b/MekHQ/src/mekhq/campaign/Hangar.java\nindex 4be3f1f60..f1bedda5d 100644\n--- a/MekHQ/src/mekhq/campaign/Hangar.java\n+++ b/MekHQ/src/mekhq/campaign/Hangar.java\n", "chunk": "@@ -68,7 +69,7 @@ public class Hangar {\n      * @return The unit matching the unique identifier,\n      *         otherwise null if that unit does not exist.\n      */\n-    public Unit getUnit(UUID id) {\n+    public @Nullable Unit getUnit(UUID id) {\n         return units.get(id);\n     }\n \n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "3f55aabad31fb84ff1e5af9c8caac7bd8c8999a0", "message": "Merge commit", "committedDate": null}, {"oid": "3b458aafcf56ec74e926bf3a593b88b9c7d14842", "committedDate": "2022-01-10 14:42:55 -0500", "message": "Fixing the remaining tab spacing in MekHQ"}, {"oid": "4bddfb6f0d3906ed96120594d84d4e476e42d971", "committedDate": "2022-01-19 17:09:56 -0500", "message": "Tearing out MekHQ/src/mekhq/MekHqXmlSerializable.java"}, {"oid": "494b38fcedcda31bef2e6f701152a47ce1b0e397", "committedDate": "2022-04-11 00:16:20 -0400", "message": "Issue #3196: Fixing Remove Unit NPE"}, {"oid": "8b34d18aa825a1416df7b1a8ecb2bb898cea1026", "committedDate": "2022-05-25 18:27:34 -0400", "message": "Renaming MekHqXmlXmlUtil to utilities/MHQXMLUtility"}, {"oid": "5213209bddb612458226cdfa7561a7220f8b3b67", "committedDate": "2022-11-15 15:54:47 -0500", "message": "Fixing deprecated XML utility uses and fixing indentation issues for parts"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU1NzU4Mw==", "url": "https://github.com/MegaMek/mekhq/pull/2123#discussion_r500557583", "body": "```suggestion\r\n        MekHqXmlUtil.writeSimpleXMLOpenIndentedLine(pw1, indent, tag);\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    pw1.println(MekHqXmlUtil.indentStr(indent) + \"<\" + tag + \">\");\n          \n          \n            \n                    MekHqXmlUtil.writeSimpleXMLOpenIndentedLine(pw1, indent, tag);", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"x x-first\">pw1</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">println(</span><span class=\"pl-smi\">MekHqXmlUtil</span><span class=\"pl-k\">.</span><span class=\"x x-first x-last\">indentStr(</span>indent<span class=\"x x-first\">) </span><span class=\"pl-k x\">+</span><span class=\"x\"> </span><span class=\"pl-s\"><span class=\"pl-pds x\">\"</span><span class=\"x\">&lt;</span><span class=\"pl-pds x\">\"</span></span><span class=\"x\"> </span><span class=\"pl-k x\">+</span><span class=\"x x-last\"> </span>tag<span class=\"x x-first\"> </span><span class=\"pl-k x\">+</span><span class=\"x\"> </span><span class=\"pl-s\"><span class=\"pl-pds x\">\"</span><span class=\"x\">&gt;</span><span class=\"pl-pds x x-last\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-smi\">MekHqXmlUtil</span><span class=\"pl-k\">.</span><span class=\"x x-first x-last\">writeSimpleXMLOpenIndentedLine(pw1, </span>indent<span class=\"x x-first x-last\">, </span>tag);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "Windchild292", "createdAt": "2020-10-06T19:54:06Z", "path": "MekHQ/src/mekhq/campaign/Hangar.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/*\n+ * Hangar.java\n+ *\n+ * Copyright (c) 2020 - The MegaMek Team. All Rights Reserved.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package mekhq.campaign;\n+\n+import java.io.PrintWriter;\n+import java.util.Collection;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.function.BiConsumer;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+import java.util.stream.Stream;\n+\n+import mekhq.MekHqXmlUtil;\n+import mekhq.campaign.finances.Money;\n+import mekhq.campaign.unit.Unit;\n+\n+/**\n+ * Represents a hangar which contains zero or more units.\n+ */\n+public class Hangar {\n+    private Map<UUID, Unit> units = new LinkedHashMap<>();\n+\n+    /**\n+     * Adds a unit to the hangar.\n+     *\n+     * If the unit does not have an ID, one is\n+     * assigned to it.\n+     *\n+     * @param unit The unit to add to the hangar.\n+     */\n+    public void addUnit(Unit unit) {\n+        if (unit == null) {\n+            return;\n+        }\n+\n+        UUID id = unit.getId();\n+        if (id == null) {\n+            id = UUID.randomUUID();\n+            unit.setId(id);\n+        }\n+\n+        units.put(id, unit);\n+    }\n+\n+    /**\n+     * Gets a unit by a given ID.\n+     * @param id The unique identifier of a unit.\n+     * @return The unit matching the unique identifier,\n+     *         otherwise null if that unit does not exist.\n+     */\n+    public Unit getUnit(UUID id) {\n+        return units.get(id);\n+    }\n+\n+    /**\n+     * Gets a collection of units in the hangar.\n+     * @return A collection of units in the hangar.\n+     */\n+    public Collection<Unit> getUnits() {\n+        return units.values();\n+    }\n+\n+    /**\n+     * Gets a Stream of units in the hangar.\n+     * @return A Stream of units in the hangar.\n+     */\n+    public Stream<Unit> getUnitsStream() {\n+        return units.values().stream();\n+    }\n+\n+    /**\n+     * Calculates the total costs for the units in the hangar.\n+     * @param getCosts A function which returns a cost for a unit.\n+     * @return The total costs for the units.\n+     */\n+    public Money getUnitCosts(Function<Unit, Money> getCosts) {\n+        return getUnitsStream().map(getCosts).reduce(Money.zero(), Money::plus);\n+    }\n+\n+    /**\n+     * Calculates the total costs for the units matching a predicate\n+     * in the hangar.\n+     * @param predicate A function to use to select a unit.\n+     * @param getCosts A function which returns a cost for a selected unit.\n+     * @return The total costs for the units selected by the predicate.\n+     */\n+    public Money getUnitCosts(Predicate<Unit> predicate, Function<Unit, Money> getCosts) {\n+        return getUnitsStream().filter(predicate).map(getCosts).reduce(Money.zero(), Money::plus);\n+    }\n+\n+    /**\n+     * Executes a function for each unit in the hangar.\n+     * @param consumer A function to apply to each unit.\n+     */\n+    public void forEachUnit(Consumer<Unit> consumer) {\n+        units.forEach((id, unit) -> consumer.accept(unit));\n+    }\n+\n+    /**\n+     * Executes a function for each unit in the hangar.\n+     * @param consumer A function to apply to each ID-unit pair.\n+     */\n+    public void forEachUnit(BiConsumer<UUID, Unit> consumer) {\n+        units.forEach(consumer);\n+    }\n+\n+    /**\n+     * Searches for a specific unit using the given predicate.\n+     * @param predicate A function to use to select a given unit.\n+     * @return The first unit found which matches the predicate,\n+     *         otherwise null if no unit was found.\n+     */\n+    public Unit findUnit(Predicate<Unit> predicate) {\n+        if (predicate == null) {\n+            return null;\n+        }\n+\n+        for (Unit unit : units.values()) {\n+            if (predicate.test(unit)) {\n+                return unit;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Removes a unit from the hangar.\n+     * @param id The unit ID.\n+     * @return true if the unit was removed, otherwise false.\n+     */\n+    public boolean removeUnit(UUID id) {\n+        return null != units.remove(id);\n+    }\n+\n+\tpublic void writeToXml(PrintWriter pw1, int indent, String tag) {\n+        pw1.println(MekHqXmlUtil.indentStr(indent) + \"<\" + tag + \">\");", "originalCommit": "02cf732d561f245a8a8d39a2b8a819cb45ac94ca", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cb64714e6e2b7d03de487c72eb18c3c09948b6c6", "changed_code": [{"header": "diff --git a/MekHQ/src/mekhq/campaign/Hangar.java b/MekHQ/src/mekhq/campaign/Hangar.java\nindex 78e735d90..4be3f1f60 100644\n--- a/MekHQ/src/mekhq/campaign/Hangar.java\n+++ b/MekHQ/src/mekhq/campaign/Hangar.java\n", "chunk": "@@ -155,12 +153,12 @@ public class Hangar {\n     }\n \n \tpublic void writeToXml(PrintWriter pw1, int indent, String tag) {\n-        pw1.println(MekHqXmlUtil.indentStr(indent) + \"<\" + tag + \">\");\n+        MekHqXmlUtil.writeSimpleXMLOpenIndentedLine(pw1, indent, tag);\n \n         forEachUnit(unit -> {\n             unit.writeToXml(pw1, indent + 1);\n         });\n \n-        pw1.println(MekHqXmlUtil.indentStr(indent) + \"</\" + tag + \">\");\n+        MekHqXmlUtil.writeSimpleXMLCloseIndentedLine(pw1, indent, tag);\n \t}\n }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "3f55aabad31fb84ff1e5af9c8caac7bd8c8999a0", "changed_code": [{"header": "diff --git a/MekHQ/src/mekhq/campaign/Hangar.java b/MekHQ/src/mekhq/campaign/Hangar.java\nindex 78e735d90..4be3f1f60 100644\n--- a/MekHQ/src/mekhq/campaign/Hangar.java\n+++ b/MekHQ/src/mekhq/campaign/Hangar.java\n", "chunk": "@@ -155,12 +153,12 @@ public class Hangar {\n     }\n \n \tpublic void writeToXml(PrintWriter pw1, int indent, String tag) {\n-        pw1.println(MekHqXmlUtil.indentStr(indent) + \"<\" + tag + \">\");\n+        MekHqXmlUtil.writeSimpleXMLOpenIndentedLine(pw1, indent, tag);\n \n         forEachUnit(unit -> {\n             unit.writeToXml(pw1, indent + 1);\n         });\n \n-        pw1.println(MekHqXmlUtil.indentStr(indent) + \"</\" + tag + \">\");\n+        MekHqXmlUtil.writeSimpleXMLCloseIndentedLine(pw1, indent, tag);\n \t}\n }\n", "next_change": {"commit": "3b458aafcf56ec74e926bf3a593b88b9c7d14842", "changed_code": [{"header": "diff --git a/MekHQ/src/mekhq/campaign/Hangar.java b/MekHQ/src/mekhq/campaign/Hangar.java\nindex 4be3f1f60..ffe7a3fbf 100644\n--- a/MekHQ/src/mekhq/campaign/Hangar.java\n+++ b/MekHQ/src/mekhq/campaign/Hangar.java\n", "chunk": "@@ -160,5 +160,5 @@ public class Hangar {\n         });\n \n         MekHqXmlUtil.writeSimpleXMLCloseIndentedLine(pw1, indent, tag);\n-\t}\n+    }\n }\n", "next_change": {"commit": "4bddfb6f0d3906ed96120594d84d4e476e42d971", "changed_code": [{"header": "diff --git a/MekHQ/src/mekhq/campaign/Hangar.java b/MekHQ/src/mekhq/campaign/Hangar.java\nindex ffe7a3fbf..0e72dff27 100644\n--- a/MekHQ/src/mekhq/campaign/Hangar.java\n+++ b/MekHQ/src/mekhq/campaign/Hangar.java\n", "chunk": "@@ -156,7 +156,7 @@ public class Hangar {\n         MekHqXmlUtil.writeSimpleXMLOpenIndentedLine(pw1, indent, tag);\n \n         forEachUnit(unit -> {\n-            unit.writeToXml(pw1, indent + 1);\n+            unit.writeToXML(pw1, indent + 1);\n         });\n \n         MekHqXmlUtil.writeSimpleXMLCloseIndentedLine(pw1, indent, tag);\n", "next_change": {"commit": "8b34d18aa825a1416df7b1a8ecb2bb898cea1026", "changed_code": [{"header": "diff --git a/MekHQ/src/mekhq/campaign/Hangar.java b/MekHQ/src/mekhq/campaign/Hangar.java\nindex 0e72dff27..41a68efad 100644\n--- a/MekHQ/src/mekhq/campaign/Hangar.java\n+++ b/MekHQ/src/mekhq/campaign/Hangar.java\n", "chunk": "@@ -153,12 +154,12 @@ public class Hangar {\n     }\n \n     public void writeToXml(PrintWriter pw1, int indent, String tag) {\n-        MekHqXmlUtil.writeSimpleXMLOpenIndentedLine(pw1, indent, tag);\n+        MHQXMLUtility.writeSimpleXMLOpenIndentedLine(pw1, indent, tag);\n \n         forEachUnit(unit -> {\n             unit.writeToXML(pw1, indent + 1);\n         });\n \n-        MekHqXmlUtil.writeSimpleXMLCloseIndentedLine(pw1, indent, tag);\n+        MHQXMLUtility.writeSimpleXMLCloseIndentedLine(pw1, indent, tag);\n     }\n }\n", "next_change": {"commit": "5213209bddb612458226cdfa7561a7220f8b3b67", "changed_code": [{"header": "diff --git a/MekHQ/src/mekhq/campaign/Hangar.java b/MekHQ/src/mekhq/campaign/Hangar.java\nindex 41a68efad..bf0eb2ecf 100644\n--- a/MekHQ/src/mekhq/campaign/Hangar.java\n+++ b/MekHQ/src/mekhq/campaign/Hangar.java\n", "chunk": "@@ -153,13 +153,9 @@ public class Hangar {\n         return null != units.remove(id);\n     }\n \n-    public void writeToXml(PrintWriter pw1, int indent, String tag) {\n-        MHQXMLUtility.writeSimpleXMLOpenIndentedLine(pw1, indent, tag);\n-\n-        forEachUnit(unit -> {\n-            unit.writeToXML(pw1, indent + 1);\n-        });\n-\n-        MHQXMLUtility.writeSimpleXMLCloseIndentedLine(pw1, indent, tag);\n+    public void writeToXML(final PrintWriter pw, final int indent, final String tag) {\n+        MHQXMLUtility.writeSimpleXMLOpenTag(pw, indent, tag);\n+        forEachUnit(unit -> unit.writeToXML(pw, indent + 1));\n+        MHQXMLUtility.writeSimpleXMLCloseTag(pw, indent, tag);\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "3f55aabad31fb84ff1e5af9c8caac7bd8c8999a0", "message": "Merge commit", "committedDate": null}, {"oid": "3b458aafcf56ec74e926bf3a593b88b9c7d14842", "committedDate": "2022-01-10 14:42:55 -0500", "message": "Fixing the remaining tab spacing in MekHQ"}, {"oid": "4bddfb6f0d3906ed96120594d84d4e476e42d971", "committedDate": "2022-01-19 17:09:56 -0500", "message": "Tearing out MekHQ/src/mekhq/MekHqXmlSerializable.java"}, {"oid": "494b38fcedcda31bef2e6f701152a47ce1b0e397", "committedDate": "2022-04-11 00:16:20 -0400", "message": "Issue #3196: Fixing Remove Unit NPE"}, {"oid": "8b34d18aa825a1416df7b1a8ecb2bb898cea1026", "committedDate": "2022-05-25 18:27:34 -0400", "message": "Renaming MekHqXmlXmlUtil to utilities/MHQXMLUtility"}, {"oid": "5213209bddb612458226cdfa7561a7220f8b3b67", "committedDate": "2022-11-15 15:54:47 -0500", "message": "Fixing deprecated XML utility uses and fixing indentation issues for parts"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU1ODAyNQ==", "url": "https://github.com/MegaMek/mekhq/pull/2123#discussion_r500558025", "body": "```suggestion\r\n        MekHqXmlUtil.writeSimpleXMLCloseIndentedLine(pw1, indent, tag);\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    pw1.println(MekHqXmlUtil.indentStr(indent) + \"</\" + tag + \">\");\n          \n          \n            \n                    MekHqXmlUtil.writeSimpleXMLCloseIndentedLine(pw1, indent, tag);", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"x x-first\">pw1</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">println(</span><span class=\"pl-smi\">MekHqXmlUtil</span><span class=\"pl-k\">.</span><span class=\"x x-first x-last\">indentStr(</span>indent<span class=\"x x-first\">) </span><span class=\"pl-k x\">+</span><span class=\"x\"> </span><span class=\"pl-s\"><span class=\"pl-pds x\">\"</span><span class=\"x\">&lt;/</span><span class=\"pl-pds x\">\"</span></span><span class=\"x\"> </span><span class=\"pl-k x\">+</span><span class=\"x x-last\"> </span>tag<span class=\"x x-first\"> </span><span class=\"pl-k x\">+</span><span class=\"x\"> </span><span class=\"pl-s\"><span class=\"pl-pds x\">\"</span><span class=\"x\">&gt;</span><span class=\"pl-pds x x-last\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-smi\">MekHqXmlUtil</span><span class=\"pl-k\">.</span><span class=\"x x-first x-last\">writeSimpleXMLCloseIndentedLine(pw1, </span>indent<span class=\"x x-first x-last\">, </span>tag);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "Windchild292", "createdAt": "2020-10-06T19:54:57Z", "path": "MekHQ/src/mekhq/campaign/Hangar.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/*\n+ * Hangar.java\n+ *\n+ * Copyright (c) 2020 - The MegaMek Team. All Rights Reserved.\n+ *\n+ * This file is part of MekHQ.\n+ *\n+ * MekHQ is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as published by\n+ * the Free Software Foundation, either version 3 of the License, or\n+ * (at your option) any later version.\n+ *\n+ * MekHQ is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public License\n+ * along with MekHQ. If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package mekhq.campaign;\n+\n+import java.io.PrintWriter;\n+import java.util.Collection;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.function.BiConsumer;\n+import java.util.function.Consumer;\n+import java.util.function.Function;\n+import java.util.function.Predicate;\n+import java.util.stream.Stream;\n+\n+import mekhq.MekHqXmlUtil;\n+import mekhq.campaign.finances.Money;\n+import mekhq.campaign.unit.Unit;\n+\n+/**\n+ * Represents a hangar which contains zero or more units.\n+ */\n+public class Hangar {\n+    private Map<UUID, Unit> units = new LinkedHashMap<>();\n+\n+    /**\n+     * Adds a unit to the hangar.\n+     *\n+     * If the unit does not have an ID, one is\n+     * assigned to it.\n+     *\n+     * @param unit The unit to add to the hangar.\n+     */\n+    public void addUnit(Unit unit) {\n+        if (unit == null) {\n+            return;\n+        }\n+\n+        UUID id = unit.getId();\n+        if (id == null) {\n+            id = UUID.randomUUID();\n+            unit.setId(id);\n+        }\n+\n+        units.put(id, unit);\n+    }\n+\n+    /**\n+     * Gets a unit by a given ID.\n+     * @param id The unique identifier of a unit.\n+     * @return The unit matching the unique identifier,\n+     *         otherwise null if that unit does not exist.\n+     */\n+    public Unit getUnit(UUID id) {\n+        return units.get(id);\n+    }\n+\n+    /**\n+     * Gets a collection of units in the hangar.\n+     * @return A collection of units in the hangar.\n+     */\n+    public Collection<Unit> getUnits() {\n+        return units.values();\n+    }\n+\n+    /**\n+     * Gets a Stream of units in the hangar.\n+     * @return A Stream of units in the hangar.\n+     */\n+    public Stream<Unit> getUnitsStream() {\n+        return units.values().stream();\n+    }\n+\n+    /**\n+     * Calculates the total costs for the units in the hangar.\n+     * @param getCosts A function which returns a cost for a unit.\n+     * @return The total costs for the units.\n+     */\n+    public Money getUnitCosts(Function<Unit, Money> getCosts) {\n+        return getUnitsStream().map(getCosts).reduce(Money.zero(), Money::plus);\n+    }\n+\n+    /**\n+     * Calculates the total costs for the units matching a predicate\n+     * in the hangar.\n+     * @param predicate A function to use to select a unit.\n+     * @param getCosts A function which returns a cost for a selected unit.\n+     * @return The total costs for the units selected by the predicate.\n+     */\n+    public Money getUnitCosts(Predicate<Unit> predicate, Function<Unit, Money> getCosts) {\n+        return getUnitsStream().filter(predicate).map(getCosts).reduce(Money.zero(), Money::plus);\n+    }\n+\n+    /**\n+     * Executes a function for each unit in the hangar.\n+     * @param consumer A function to apply to each unit.\n+     */\n+    public void forEachUnit(Consumer<Unit> consumer) {\n+        units.forEach((id, unit) -> consumer.accept(unit));\n+    }\n+\n+    /**\n+     * Executes a function for each unit in the hangar.\n+     * @param consumer A function to apply to each ID-unit pair.\n+     */\n+    public void forEachUnit(BiConsumer<UUID, Unit> consumer) {\n+        units.forEach(consumer);\n+    }\n+\n+    /**\n+     * Searches for a specific unit using the given predicate.\n+     * @param predicate A function to use to select a given unit.\n+     * @return The first unit found which matches the predicate,\n+     *         otherwise null if no unit was found.\n+     */\n+    public Unit findUnit(Predicate<Unit> predicate) {\n+        if (predicate == null) {\n+            return null;\n+        }\n+\n+        for (Unit unit : units.values()) {\n+            if (predicate.test(unit)) {\n+                return unit;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    /**\n+     * Removes a unit from the hangar.\n+     * @param id The unit ID.\n+     * @return true if the unit was removed, otherwise false.\n+     */\n+    public boolean removeUnit(UUID id) {\n+        return null != units.remove(id);\n+    }\n+\n+\tpublic void writeToXml(PrintWriter pw1, int indent, String tag) {\n+        pw1.println(MekHqXmlUtil.indentStr(indent) + \"<\" + tag + \">\");\n+\n+        forEachUnit(unit -> {\n+            unit.writeToXml(pw1, indent + 1);\n+        });\n+\n+        pw1.println(MekHqXmlUtil.indentStr(indent) + \"</\" + tag + \">\");", "originalCommit": "02cf732d561f245a8a8d39a2b8a819cb45ac94ca", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cb64714e6e2b7d03de487c72eb18c3c09948b6c6", "changed_code": [{"header": "diff --git a/MekHQ/src/mekhq/campaign/Hangar.java b/MekHQ/src/mekhq/campaign/Hangar.java\nindex 78e735d90..4be3f1f60 100644\n--- a/MekHQ/src/mekhq/campaign/Hangar.java\n+++ b/MekHQ/src/mekhq/campaign/Hangar.java\n", "chunk": "@@ -155,12 +153,12 @@ public class Hangar {\n     }\n \n \tpublic void writeToXml(PrintWriter pw1, int indent, String tag) {\n-        pw1.println(MekHqXmlUtil.indentStr(indent) + \"<\" + tag + \">\");\n+        MekHqXmlUtil.writeSimpleXMLOpenIndentedLine(pw1, indent, tag);\n \n         forEachUnit(unit -> {\n             unit.writeToXml(pw1, indent + 1);\n         });\n \n-        pw1.println(MekHqXmlUtil.indentStr(indent) + \"</\" + tag + \">\");\n+        MekHqXmlUtil.writeSimpleXMLCloseIndentedLine(pw1, indent, tag);\n \t}\n }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "3f55aabad31fb84ff1e5af9c8caac7bd8c8999a0", "changed_code": [{"header": "diff --git a/MekHQ/src/mekhq/campaign/Hangar.java b/MekHQ/src/mekhq/campaign/Hangar.java\nindex 78e735d90..4be3f1f60 100644\n--- a/MekHQ/src/mekhq/campaign/Hangar.java\n+++ b/MekHQ/src/mekhq/campaign/Hangar.java\n", "chunk": "@@ -155,12 +153,12 @@ public class Hangar {\n     }\n \n \tpublic void writeToXml(PrintWriter pw1, int indent, String tag) {\n-        pw1.println(MekHqXmlUtil.indentStr(indent) + \"<\" + tag + \">\");\n+        MekHqXmlUtil.writeSimpleXMLOpenIndentedLine(pw1, indent, tag);\n \n         forEachUnit(unit -> {\n             unit.writeToXml(pw1, indent + 1);\n         });\n \n-        pw1.println(MekHqXmlUtil.indentStr(indent) + \"</\" + tag + \">\");\n+        MekHqXmlUtil.writeSimpleXMLCloseIndentedLine(pw1, indent, tag);\n \t}\n }\n", "next_change": {"commit": "3b458aafcf56ec74e926bf3a593b88b9c7d14842", "changed_code": [{"header": "diff --git a/MekHQ/src/mekhq/campaign/Hangar.java b/MekHQ/src/mekhq/campaign/Hangar.java\nindex 4be3f1f60..ffe7a3fbf 100644\n--- a/MekHQ/src/mekhq/campaign/Hangar.java\n+++ b/MekHQ/src/mekhq/campaign/Hangar.java\n", "chunk": "@@ -160,5 +160,5 @@ public class Hangar {\n         });\n \n         MekHqXmlUtil.writeSimpleXMLCloseIndentedLine(pw1, indent, tag);\n-\t}\n+    }\n }\n", "next_change": {"commit": "4bddfb6f0d3906ed96120594d84d4e476e42d971", "changed_code": [{"header": "diff --git a/MekHQ/src/mekhq/campaign/Hangar.java b/MekHQ/src/mekhq/campaign/Hangar.java\nindex ffe7a3fbf..0e72dff27 100644\n--- a/MekHQ/src/mekhq/campaign/Hangar.java\n+++ b/MekHQ/src/mekhq/campaign/Hangar.java\n", "chunk": "@@ -156,7 +156,7 @@ public class Hangar {\n         MekHqXmlUtil.writeSimpleXMLOpenIndentedLine(pw1, indent, tag);\n \n         forEachUnit(unit -> {\n-            unit.writeToXml(pw1, indent + 1);\n+            unit.writeToXML(pw1, indent + 1);\n         });\n \n         MekHqXmlUtil.writeSimpleXMLCloseIndentedLine(pw1, indent, tag);\n", "next_change": {"commit": "8b34d18aa825a1416df7b1a8ecb2bb898cea1026", "changed_code": [{"header": "diff --git a/MekHQ/src/mekhq/campaign/Hangar.java b/MekHQ/src/mekhq/campaign/Hangar.java\nindex 0e72dff27..41a68efad 100644\n--- a/MekHQ/src/mekhq/campaign/Hangar.java\n+++ b/MekHQ/src/mekhq/campaign/Hangar.java\n", "chunk": "@@ -153,12 +154,12 @@ public class Hangar {\n     }\n \n     public void writeToXml(PrintWriter pw1, int indent, String tag) {\n-        MekHqXmlUtil.writeSimpleXMLOpenIndentedLine(pw1, indent, tag);\n+        MHQXMLUtility.writeSimpleXMLOpenIndentedLine(pw1, indent, tag);\n \n         forEachUnit(unit -> {\n             unit.writeToXML(pw1, indent + 1);\n         });\n \n-        MekHqXmlUtil.writeSimpleXMLCloseIndentedLine(pw1, indent, tag);\n+        MHQXMLUtility.writeSimpleXMLCloseIndentedLine(pw1, indent, tag);\n     }\n }\n", "next_change": {"commit": "5213209bddb612458226cdfa7561a7220f8b3b67", "changed_code": [{"header": "diff --git a/MekHQ/src/mekhq/campaign/Hangar.java b/MekHQ/src/mekhq/campaign/Hangar.java\nindex 41a68efad..bf0eb2ecf 100644\n--- a/MekHQ/src/mekhq/campaign/Hangar.java\n+++ b/MekHQ/src/mekhq/campaign/Hangar.java\n", "chunk": "@@ -153,13 +153,9 @@ public class Hangar {\n         return null != units.remove(id);\n     }\n \n-    public void writeToXml(PrintWriter pw1, int indent, String tag) {\n-        MHQXMLUtility.writeSimpleXMLOpenIndentedLine(pw1, indent, tag);\n-\n-        forEachUnit(unit -> {\n-            unit.writeToXML(pw1, indent + 1);\n-        });\n-\n-        MHQXMLUtility.writeSimpleXMLCloseIndentedLine(pw1, indent, tag);\n+    public void writeToXML(final PrintWriter pw, final int indent, final String tag) {\n+        MHQXMLUtility.writeSimpleXMLOpenTag(pw, indent, tag);\n+        forEachUnit(unit -> unit.writeToXML(pw, indent + 1));\n+        MHQXMLUtility.writeSimpleXMLCloseTag(pw, indent, tag);\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "3f55aabad31fb84ff1e5af9c8caac7bd8c8999a0", "message": "Merge commit", "committedDate": null}, {"oid": "3b458aafcf56ec74e926bf3a593b88b9c7d14842", "committedDate": "2022-01-10 14:42:55 -0500", "message": "Fixing the remaining tab spacing in MekHQ"}, {"oid": "4bddfb6f0d3906ed96120594d84d4e476e42d971", "committedDate": "2022-01-19 17:09:56 -0500", "message": "Tearing out MekHQ/src/mekhq/MekHqXmlSerializable.java"}, {"oid": "494b38fcedcda31bef2e6f701152a47ce1b0e397", "committedDate": "2022-04-11 00:16:20 -0400", "message": "Issue #3196: Fixing Remove Unit NPE"}, {"oid": "8b34d18aa825a1416df7b1a8ecb2bb898cea1026", "committedDate": "2022-05-25 18:27:34 -0400", "message": "Renaming MekHqXmlXmlUtil to utilities/MHQXMLUtility"}, {"oid": "5213209bddb612458226cdfa7561a7220f8b3b67", "committedDate": "2022-11-15 15:54:47 -0500", "message": "Fixing deprecated XML utility uses and fixing indentation issues for parts"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU2MDg3Ng==", "url": "https://github.com/MegaMek/mekhq/pull/2123#discussion_r500560876", "body": "```suggestion\r\n                .filter(u -> u.requiresMaintenance() && (null != u.getTech()))\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            .filter(u -> u.requiresMaintenance() && null != u.getTech())\n          \n          \n            \n                            .filter(u -> u.requiresMaintenance() && (null != u.getTech()))", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                .filter(u <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> u<span class=\"pl-k\">.</span>requiresMaintenance() <span class=\"pl-k\">&amp;&amp;</span> <span class=\"pl-c1\">null</span> <span class=\"pl-k\">!=</span> u<span class=\"pl-k\">.</span>getTech())</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                .filter(u <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> u<span class=\"pl-k\">.</span>requiresMaintenance() <span class=\"pl-k\">&amp;&amp;</span> <span class=\"x x-first x-last\">(</span><span class=\"pl-c1\">null</span> <span class=\"pl-k\">!=</span> u<span class=\"pl-k\">.</span>getTech(<span class=\"x x-first x-last\">)</span>))</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "Windchild292", "createdAt": "2020-10-06T20:00:17Z", "path": "MekHQ/src/mekhq/campaign/Campaign.java", "diffHunk": "@@ -3676,24 +3617,19 @@ private Money getTheoreticalPayroll(boolean noInfantry) {\n     }\n \n     public Money getMaintenanceCosts() {\n-        Money costs = Money.zero();\n         if (campaignOptions.payForMaintain()) {\n-            for (Map.Entry<UUID, Unit> mu : units.entrySet()) {\n-                Unit u = mu.getValue();\n-                if (u.requiresMaintenance() && null != u.getTech()) {\n-                    costs = costs.plus(u.getMaintenanceCost());\n-                }\n-            }\n+            return getHangar().getUnitsStream()\n+                .filter(u -> u.requiresMaintenance() && null != u.getTech())", "originalCommit": "02cf732d561f245a8a8d39a2b8a819cb45ac94ca", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cb64714e6e2b7d03de487c72eb18c3c09948b6c6", "changed_code": [{"header": "diff --git a/MekHQ/src/mekhq/campaign/Campaign.java b/MekHQ/src/mekhq/campaign/Campaign.java\nindex c9db948ab..4dff77b1d 100644\n--- a/MekHQ/src/mekhq/campaign/Campaign.java\n+++ b/MekHQ/src/mekhq/campaign/Campaign.java\n", "chunk": "@@ -3619,7 +3619,7 @@ public class Campaign implements Serializable, ITechManager {\n     public Money getMaintenanceCosts() {\n         if (campaignOptions.payForMaintain()) {\n             return getHangar().getUnitsStream()\n-                .filter(u -> u.requiresMaintenance() && null != u.getTech())\n+                .filter(u -> u.requiresMaintenance() && (null != u.getTech()))\n                 .map(Unit::getMaintenanceCost)\n                 .reduce(Money.zero(), (a, b) -> a.plus(b));\n         }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "3f55aabad31fb84ff1e5af9c8caac7bd8c8999a0", "changed_code": [{"header": "diff --git a/MekHQ/src/mekhq/campaign/Campaign.java b/MekHQ/src/mekhq/campaign/Campaign.java\nindex c9db948ab..0f69d5116 100644\n--- a/MekHQ/src/mekhq/campaign/Campaign.java\n+++ b/MekHQ/src/mekhq/campaign/Campaign.java\n", "chunk": "@@ -3619,7 +3616,7 @@ public class Campaign implements Serializable, ITechManager {\n     public Money getMaintenanceCosts() {\n         if (campaignOptions.payForMaintain()) {\n             return getHangar().getUnitsStream()\n-                .filter(u -> u.requiresMaintenance() && null != u.getTech())\n+                .filter(u -> u.requiresMaintenance() && (null != u.getTech()))\n                 .map(Unit::getMaintenanceCost)\n                 .reduce(Money.zero(), (a, b) -> a.plus(b));\n         }\n", "next_change": {"commit": "a0c1cbf9746ed9486f08ce4aa2376828e846c786", "changed_code": [{"header": "diff --git a/MekHQ/src/mekhq/campaign/Campaign.java b/MekHQ/src/mekhq/campaign/Campaign.java\nindex 0f69d5116..e49c8ce15 100644\n--- a/MekHQ/src/mekhq/campaign/Campaign.java\n+++ b/MekHQ/src/mekhq/campaign/Campaign.java\n", "chunk": "@@ -3614,31 +3166,36 @@ public class Campaign implements Serializable, ITechManager {\n     }\n \n     public Money getMaintenanceCosts() {\n-        if (campaignOptions.payForMaintain()) {\n-            return getHangar().getUnitsStream()\n-                .filter(u -> u.requiresMaintenance() && (null != u.getTech()))\n-                .map(Unit::getMaintenanceCost)\n-                .reduce(Money.zero(), (a, b) -> a.plus(b));\n+        Money costs = Money.zero();\n+        if(campaignOptions.payForMaintain()) {\n+            for (Map.Entry<UUID, Unit> mu : units.entrySet()) {\n+                Unit u = mu.getValue();\n+                if (u.requiresMaintenance() && null != u.getTech()) {\n+                    costs = costs.plus(u.getMaintenanceCost());\n+                }\n+            }\n         }\n-        return Money.zero();\n+        return costs;\n     }\n \n     public Money getWeeklyMaintenanceCosts() {\n-        return getHangar().getUnitsStream()\n-            .map(Unit::getWeeklyMaintenanceCost)\n-            .reduce(Money.zero(), (a, b) -> a.plus(b));\n+        Money costs = Money.zero();\n+        for (Map.Entry<UUID, Unit> u : units.entrySet()) {\n+            costs = costs.plus(u.getValue().getWeeklyMaintenanceCost());\n+        }\n+        return costs;\n     }\n \n     public Money getOverheadExpenses() {\n-        if (getCampaignOptions().payForOverhead()) {\n-            return getTheoreticalPayroll(false).multipliedBy(0.05);\n-        } else {\n+        if(!campaignOptions.payForOverhead()) {\n             return Money.zero();\n         }\n+\n+        return getTheoreticalPayroll(false).multipliedBy(0.05);\n     }\n \n     public void removeUnit(UUID id) {\n-        Unit unit = getHangar().getUnit(id);\n+        Unit unit = getUnit(id);\n \n         // remove all parts for this unit as well\n         for (Part p : unit.getParts()) {\n", "next_change": {"commit": "ed6a5c015aa33d0bffdcd3297b9482ce600eb146", "changed_code": [{"header": "diff --git a/MekHQ/src/mekhq/campaign/Campaign.java b/MekHQ/src/mekhq/campaign/Campaign.java\nindex e49c8ce15..5e8e38209 100644\n--- a/MekHQ/src/mekhq/campaign/Campaign.java\n+++ b/MekHQ/src/mekhq/campaign/Campaign.java\n", "chunk": "@@ -3187,11 +3863,11 @@ public class Campaign implements Serializable, ITechManager {\n     }\n \n     public Money getOverheadExpenses() {\n-        if(!campaignOptions.payForOverhead()) {\n+        if (getCampaignOptions().payForOverhead()) {\n+            return getTheoreticalPayroll(false).multipliedBy(0.05);\n+        } else {\n             return Money.zero();\n         }\n-\n-        return getTheoreticalPayroll(false).multipliedBy(0.05);\n     }\n \n     public void removeUnit(UUID id) {\n", "next_change": {"commit": "04a16de448a0c7d576a6c3c64c9d23ae08384bae", "changed_code": [{"header": "diff --git a/MekHQ/src/mekhq/campaign/Campaign.java b/MekHQ/src/mekhq/campaign/Campaign.java\nindex 5e8e38209..993f59cfe 100644\n--- a/MekHQ/src/mekhq/campaign/Campaign.java\n+++ b/MekHQ/src/mekhq/campaign/Campaign.java\n", "chunk": "@@ -3871,7 +3640,7 @@ public class Campaign implements Serializable, ITechManager {\n     }\n \n     public void removeUnit(UUID id) {\n-        Unit unit = getUnit(id);\n+        Unit unit = getHangar().getUnit(id);\n \n         // remove all parts for this unit as well\n         for (Part p : unit.getParts()) {\n", "next_change": {"commit": "796379c3c13e8dadad4ac4cfd29f02a30e9c2bd1", "changed_code": [{"header": "diff --git a/MekHQ/src/mekhq/campaign/Campaign.java b/MekHQ/src/mekhq/campaign/Campaign.java\nindex 993f59cfe..fe45182fd 100644\n--- a/MekHQ/src/mekhq/campaign/Campaign.java\n+++ b/MekHQ/src/mekhq/campaign/Campaign.java\n", "chunk": "@@ -3587,58 +3587,6 @@ public class Campaign implements Serializable, ITechManager {\n         return null;\n     }\n \n-    public Money getPayRoll() {\n-        return getPayRoll(false);\n-    }\n-\n-    public Money getPayRoll(boolean noInfantry) {\n-        if (getCampaignOptions().payForSalaries()) {\n-            return getTheoreticalPayroll(noInfantry);\n-        } else {\n-            return Money.zero();\n-        }\n-    }\n-\n-    private Money getTheoreticalPayroll(boolean noInfantry) {\n-        Money salaries = Money.zero();\n-        for (Person p : getActivePersonnel()) {\n-            // Optionized infantry (Unofficial)\n-            if (!(noInfantry && (p.getPrimaryRole() == Person.T_INFANTRY))) {\n-                salaries = salaries.plus(p.getSalary());\n-            }\n-        }\n-        // add in astechs from the astech pool\n-        // we will assume Mech Tech * able-bodied * enlisted (changed from vee mechanic)\n-        // 800 * 0.5 * 0.6 = 240\n-        salaries = salaries.plus(240.0 * astechPool);\n-        salaries = salaries.plus(320.0 * medicPool);\n-        return salaries;\n-    }\n-\n-    public Money getMaintenanceCosts() {\n-        if (campaignOptions.payForMaintain()) {\n-            return getHangar().getUnitsStream()\n-                .filter(u -> u.requiresMaintenance() && (null != u.getTech()))\n-                .map(Unit::getMaintenanceCost)\n-                .reduce(Money.zero(), (a, b) -> a.plus(b));\n-        }\n-        return Money.zero();\n-    }\n-\n-    public Money getWeeklyMaintenanceCosts() {\n-        return getHangar().getUnitsStream()\n-            .map(Unit::getWeeklyMaintenanceCost)\n-            .reduce(Money.zero(), (a, b) -> a.plus(b));\n-    }\n-\n-    public Money getOverheadExpenses() {\n-        if (getCampaignOptions().payForOverhead()) {\n-            return getTheoreticalPayroll(false).multipliedBy(0.05);\n-        } else {\n-            return Money.zero();\n-        }\n-    }\n-\n     public void removeUnit(UUID id) {\n         Unit unit = getHangar().getUnit(id);\n \n", "next_change": {"commit": "0400aac175c219dc2fb73ea0a8dfbbf429aaff6e", "changed_code": [{"header": "diff --git a/MekHQ/src/mekhq/campaign/Campaign.java b/MekHQ/src/mekhq/campaign/Campaign.java\nindex fe45182fd..dfecec111 100644\n--- a/MekHQ/src/mekhq/campaign/Campaign.java\n+++ b/MekHQ/src/mekhq/campaign/Campaign.java\n", "chunk": "@@ -3587,6 +3586,58 @@ public class Campaign implements Serializable, ITechManager {\n         return null;\n     }\n \n+    public Money getPayRoll() {\n+        return getPayRoll(false);\n+    }\n+\n+    public Money getPayRoll(boolean noInfantry) {\n+        if (getCampaignOptions().payForSalaries()) {\n+            return getTheoreticalPayroll(noInfantry);\n+        } else {\n+            return Money.zero();\n+        }\n+    }\n+\n+    private Money getTheoreticalPayroll(boolean noInfantry) {\n+        Money salaries = Money.zero();\n+        for (Person p : getActivePersonnel()) {\n+            // Optionized infantry (Unofficial)\n+            if (!(noInfantry && (p.getPrimaryRole() == Person.T_INFANTRY))) {\n+                salaries = salaries.plus(p.getSalary());\n+            }\n+        }\n+        // add in astechs from the astech pool\n+        // we will assume Mech Tech * able-bodied * enlisted (changed from vee mechanic)\n+        // 800 * 0.5 * 0.6 = 240\n+        salaries = salaries.plus(240.0 * astechPool);\n+        salaries = salaries.plus(320.0 * medicPool);\n+        return salaries;\n+    }\n+\n+    public Money getMaintenanceCosts() {\n+        if (campaignOptions.payForMaintain()) {\n+            return getHangar().getUnitsStream()\n+                .filter(u -> u.requiresMaintenance() && (null != u.getTech()))\n+                .map(Unit::getMaintenanceCost)\n+                .reduce(Money.zero(), (a, b) -> a.plus(b));\n+        }\n+        return Money.zero();\n+    }\n+\n+    public Money getWeeklyMaintenanceCosts() {\n+        return getHangar().getUnitsStream()\n+            .map(Unit::getWeeklyMaintenanceCost)\n+            .reduce(Money.zero(), (a, b) -> a.plus(b));\n+    }\n+\n+    public Money getOverheadExpenses() {\n+        if (getCampaignOptions().payForOverhead()) {\n+            return getTheoreticalPayroll(false).multipliedBy(0.05);\n+        } else {\n+            return Money.zero();\n+        }\n+    }\n+\n     public void removeUnit(UUID id) {\n         Unit unit = getHangar().getUnit(id);\n \n", "next_change": {"commit": "63e028b04713a41ec415910ea4d0ed03a3678864", "changed_code": [{"header": "diff --git a/MekHQ/src/mekhq/campaign/Campaign.java b/MekHQ/src/mekhq/campaign/Campaign.java\nindex dfecec111..6d504e628 100644\n--- a/MekHQ/src/mekhq/campaign/Campaign.java\n+++ b/MekHQ/src/mekhq/campaign/Campaign.java\n", "chunk": "@@ -3586,58 +3602,6 @@ public class Campaign implements Serializable, ITechManager {\n         return null;\n     }\n \n-    public Money getPayRoll() {\n-        return getPayRoll(false);\n-    }\n-\n-    public Money getPayRoll(boolean noInfantry) {\n-        if (getCampaignOptions().payForSalaries()) {\n-            return getTheoreticalPayroll(noInfantry);\n-        } else {\n-            return Money.zero();\n-        }\n-    }\n-\n-    private Money getTheoreticalPayroll(boolean noInfantry) {\n-        Money salaries = Money.zero();\n-        for (Person p : getActivePersonnel()) {\n-            // Optionized infantry (Unofficial)\n-            if (!(noInfantry && (p.getPrimaryRole() == Person.T_INFANTRY))) {\n-                salaries = salaries.plus(p.getSalary());\n-            }\n-        }\n-        // add in astechs from the astech pool\n-        // we will assume Mech Tech * able-bodied * enlisted (changed from vee mechanic)\n-        // 800 * 0.5 * 0.6 = 240\n-        salaries = salaries.plus(240.0 * astechPool);\n-        salaries = salaries.plus(320.0 * medicPool);\n-        return salaries;\n-    }\n-\n-    public Money getMaintenanceCosts() {\n-        if (campaignOptions.payForMaintain()) {\n-            return getHangar().getUnitsStream()\n-                .filter(u -> u.requiresMaintenance() && (null != u.getTech()))\n-                .map(Unit::getMaintenanceCost)\n-                .reduce(Money.zero(), (a, b) -> a.plus(b));\n-        }\n-        return Money.zero();\n-    }\n-\n-    public Money getWeeklyMaintenanceCosts() {\n-        return getHangar().getUnitsStream()\n-            .map(Unit::getWeeklyMaintenanceCost)\n-            .reduce(Money.zero(), (a, b) -> a.plus(b));\n-    }\n-\n-    public Money getOverheadExpenses() {\n-        if (getCampaignOptions().payForOverhead()) {\n-            return getTheoreticalPayroll(false).multipliedBy(0.05);\n-        } else {\n-            return Money.zero();\n-        }\n-    }\n-\n     public void removeUnit(UUID id) {\n         Unit unit = getHangar().getUnit(id);\n \n", "next_change": {"commit": "0cbe836f9e807faf4cbef1d391b1ce3ad0e865d1", "changed_code": [{"header": "diff --git a/MekHQ/src/mekhq/campaign/Campaign.java b/MekHQ/src/mekhq/campaign/Campaign.java\nindex 6d504e628..618f9d792 100644\n--- a/MekHQ/src/mekhq/campaign/Campaign.java\n+++ b/MekHQ/src/mekhq/campaign/Campaign.java\n", "chunk": "@@ -3607,7 +3468,7 @@ public class Campaign implements Serializable, ITechManager {\n \n         // remove all parts for this unit as well\n         for (Part p : unit.getParts()) {\n-            removePart(p);\n+            getWarehouse().removePart(p);\n         }\n \n         // remove any personnel from this unit\n", "next_change": {"commit": "18cddebe515dbc58e76c49ef789cb3f4b31bc8a2", "changed_code": [{"header": "diff --git a/MekHQ/src/mekhq/campaign/Campaign.java b/MekHQ/src/mekhq/campaign/Campaign.java\nindex 618f9d792..c25cf0c03 100644\n--- a/MekHQ/src/mekhq/campaign/Campaign.java\n+++ b/MekHQ/src/mekhq/campaign/Campaign.java\n", "chunk": "@@ -3468,7 +3521,7 @@ public class Campaign implements Serializable, ITechManager {\n \n         // remove all parts for this unit as well\n         for (Part p : unit.getParts()) {\n-            getWarehouse().removePart(p);\n+            removePart(p);\n         }\n \n         // remove any personnel from this unit\n", "next_change": {"commit": "a38a43b4cc7f7670aa7ffad2bf318bc15334d0a1", "changed_code": [{"header": "diff --git a/MekHQ/src/mekhq/campaign/Campaign.java b/MekHQ/src/mekhq/campaign/Campaign.java\nindex c25cf0c03..cfc070d0e 100644\n--- a/MekHQ/src/mekhq/campaign/Campaign.java\n+++ b/MekHQ/src/mekhq/campaign/Campaign.java\n", "chunk": "@@ -3521,7 +3473,7 @@ public class Campaign implements Serializable, ITechManager {\n \n         // remove all parts for this unit as well\n         for (Part p : unit.getParts()) {\n-            removePart(p);\n+            getWarehouse().removePart(p);\n         }\n \n         // remove any personnel from this unit\n", "next_change": {"commit": "494b38fcedcda31bef2e6f701152a47ce1b0e397", "changed_code": [{"header": "diff --git a/MekHQ/src/mekhq/campaign/Campaign.java b/MekHQ/src/mekhq/campaign/Campaign.java\nindex cfc070d0e..92ebf55a1 100644\n--- a/MekHQ/src/mekhq/campaign/Campaign.java\n+++ b/MekHQ/src/mekhq/campaign/Campaign.java\n", "chunk": "@@ -3470,6 +3501,9 @@ public class Campaign implements Serializable, ITechManager {\n \n     public void removeUnit(UUID id) {\n         Unit unit = getHangar().getUnit(id);\n+        if (unit == null) {\n+            return;\n+        }\n \n         // remove all parts for this unit as well\n         for (Part p : unit.getParts()) {\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "3f55aabad31fb84ff1e5af9c8caac7bd8c8999a0", "message": "Merge commit", "committedDate": null}, {"oid": "a0c1cbf9746ed9486f08ce4aa2376828e846c786", "committedDate": "2019-02-26 21:45:56 -0500", "message": "merge"}, {"oid": "3002e321d67f944da3a051a049f0706c0e353aa0", "committedDate": "2019-03-04 20:50:34 -0500", "message": "merge from upstream"}, {"oid": "34f5dfffab4318e94903fece9dbf49dd1ee475c7", "committedDate": "2019-04-23 22:53:00 -0400", "message": "continues work on track gui and rules"}, {"oid": "b1c2e0f95fc8ad45080d9962da602d5fe815c34b", "committedDate": "2019-04-26 22:02:27 -0400", "message": "hook up stratcon rules manager to mekhq event bus"}, {"oid": "6f180f04dabdd9901dc392b093561514eb2e84cc", "committedDate": "2019-05-04 12:17:55 -0400", "message": "merge from upstream"}, {"oid": "119ff411ebb80f91b83b3fe139bb911a79048b3d", "committedDate": "2019-05-12 15:48:11 -0400", "message": "scenario setup work"}, {"oid": "2548381ed541547a775bb8c96fd53802087ec9aa", "committedDate": "2019-06-20 23:58:58 -0400", "message": "merge from upstream"}, {"oid": "ed6a5c015aa33d0bffdcd3297b9482ce600eb146", "committedDate": "2020-04-11 22:33:14 -0400", "message": "merge from upstream"}, {"oid": "ca46ea5005775f38ad56f98bfb8899a187571e49", "committedDate": "2020-06-03 11:30:19 -0400", "message": "merge from upstream"}, {"oid": "b2f014d250be5b4b75ed3f765f10ee1781ab96ae", "committedDate": "2020-06-23 22:21:32 -0400", "message": "merge from upstream"}, {"oid": "2bd7638ed4cc2ad5bc80e4b1bc78ff091c318a87", "committedDate": "2020-07-13 00:06:30 -0400", "message": "merge from upstream"}, {"oid": "d4f035c262d3d9ea7b7f5e935a5807bf5275aa91", "committedDate": "2020-08-08 23:08:38 -0400", "message": "merge from upstream"}, {"oid": "5830ebef6d2f671d0b152f328436ab36bcddacf4", "committedDate": "2020-08-24 20:32:16 -0400", "message": "merge from upstream"}, {"oid": "c8622590fef59265a5a8c4f68676a4a628d0fc0a", "committedDate": "2020-08-26 23:17:49 -0400", "message": "multiple bug fixes and hookup to actual campaign"}, {"oid": "935339ac1b799e58664d736142b2a1fa0d9e4263", "committedDate": "2020-09-09 00:06:07 -0400", "message": "merge from upstream"}, {"oid": "c7d9edb3737ba14da075190a1292ac94bbd7e0f2", "committedDate": "2020-09-20 14:36:56 -0600", "message": "Adding code for a log entry when swapping TOE force."}, {"oid": "2e590a1dbeb8a7b132cd5d312b93af37b9e0620a", "committedDate": "2020-09-29 10:15:54 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_476"}, {"oid": "04f10ee4b7f5bf57284109439ec1ab178b15857e", "committedDate": "2020-10-06 21:41:18 -0400", "message": "merge from upstream"}, {"oid": "04a16de448a0c7d576a6c3c64c9d23ae08384bae", "committedDate": "2020-10-07 14:33:13 -0400", "message": "Split out cargo and hangar statistics from Campaign"}, {"oid": "796379c3c13e8dadad4ac4cfd29f02a30e9c2bd1", "committedDate": "2020-10-07 14:33:13 -0400", "message": "Split out accounting from the Campaign"}, {"oid": "a254e204d91c3fd90698936f8d21aba26aaf0142", "committedDate": "2020-10-07 14:33:14 -0400", "message": "Move PersonnelReport methods"}, {"oid": "361dde24295aa66e89fea69823b01cf497cf4664", "committedDate": "2020-10-07 14:33:14 -0400", "message": "Move more financial reporting out of Campaign"}, {"oid": "c28db6f06dec2b03e487c15f514685d852bdca1e", "committedDate": "2020-10-07 14:33:14 -0400", "message": "Remove unused methods"}, {"oid": "039786019051fddf3af641c0cc0e35e7c85eb156", "committedDate": "2020-10-07 15:49:11 -0400", "message": "Make testing Accountant easier for a Campaign"}, {"oid": "a72b07d7b8ec62055140cd346314602fb020119e", "committedDate": "2020-10-07 16:11:53 -0400", "message": "Make it easier to mock stats classes"}, {"oid": "0400aac175c219dc2fb73ea0a8dfbbf429aaff6e", "committedDate": "2020-10-07 16:45:26 -0400", "message": "Add forEachSparePart to improve performance"}, {"oid": "63e028b04713a41ec415910ea4d0ed03a3678864", "committedDate": "2020-10-08 13:32:32 -0400", "message": "Merge remote-tracking branch 'upstream/master' into move-accounting-and-stats-out-of-campaign"}, {"oid": "13de948b34166d73f4f7a2e5a8982c9f693b12bc", "committedDate": "2020-10-10 15:15:00 -0400", "message": "Use Person directly instead of IDs in Unit"}, {"oid": "923a477ddb1060c2a48c13cca7c5900a40c0f82a", "committedDate": "2020-10-10 15:15:00 -0400", "message": "Use Person instead of an ID"}, {"oid": "58291b29acbe7cc24a4491f3d3ab911f0468a7dc", "committedDate": "2020-10-10 15:41:57 -0400", "message": "Fix logic to check for Already Being Worked On"}, {"oid": "998ab0faf85804f17cc7444ae1b46c2591b5db1f", "committedDate": "2020-10-15 23:34:03 -0400", "message": "merge from upstream"}, {"oid": "75e396b885c6008c6f6a7d72f1bbd7aad8099970", "committedDate": "2020-10-16 16:29:27 -0400", "message": "Moving to an enum for mission status"}, {"oid": "24de5e9720cf823838bf74e4cf4eb562bedbb437", "committedDate": "2020-10-16 18:28:46 -0400", "message": "Merging useUnitRating with the UnitRatingMethod enum"}, {"oid": "ca615b8e13e2158834a33079c6f89b02504c0bf7", "committedDate": "2020-10-17 01:17:28 -0400", "message": "Moving to using AbstractIcon for constants"}, {"oid": "4a54c7e9a18be4084eb1d3748a891b46400bf53d", "committedDate": "2020-10-17 13:11:47 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_IconConstants"}, {"oid": "9c1a47e2e6268b362edd3d6eb2e39018b5802179", "committedDate": "2020-10-20 14:49:01 -0400", "message": "Address PR feedback"}, {"oid": "b5d38e8af270f50fc091db05cf882ea8380fe3a7", "committedDate": "2020-10-20 14:49:08 -0400", "message": "Merge remote-tracking branch 'upstream/master' into units-hold-actual-persons"}, {"oid": "f34ac06c3db416f5e852246e928d3b1c6c132500", "committedDate": "2020-10-20 21:00:04 -0400", "message": "Merge branch 'master' into dev_Windchild_MissionStatus"}, {"oid": "fbc730260407b11dc98571c9b5e184e8f05e6a89", "committedDate": "2020-10-22 12:56:22 -0400", "message": "Standardizing to use the PortraitChooser instead of the older icon selector"}, {"oid": "0637c9d04376fbc5378a09826bdd58e1092b97f0", "committedDate": "2020-10-22 15:07:25 -0400", "message": "Use Units rather than their IDs"}, {"oid": "d25f391110cab3b64118d5963e321c379f8ab3ec", "committedDate": "2020-10-22 15:07:25 -0400", "message": "Do not use Unit IDs in Refits"}, {"oid": "5bf80c3e80c7fd9247fee197d749605de4a4e17b", "committedDate": "2020-10-22 15:07:49 -0400", "message": "Merge branch 'master' into dev_Windchild_IconConstants"}, {"oid": "2eec6da85e021ce0398fd3d715071b7b625855ba", "committedDate": "2020-10-22 23:15:38 -0400", "message": "merge from upstream"}, {"oid": "599b0a3158d94a3eea50fe8314c55177a344c2a9", "committedDate": "2020-10-24 14:22:32 -0400", "message": "Merge remote-tracking branch 'upstream/master' into use-units-not-ids"}, {"oid": "1d9b9a6ee2a71f128d65bb7754463be3ca9a71bc", "committedDate": "2020-10-24 14:26:31 -0400", "message": "Address LGTM issues"}, {"oid": "9f22e79abf71f3d8cf935d5d83d4790af02b32ce", "committedDate": "2020-10-24 14:48:29 -0400", "message": "Add tests for transport unit sets"}, {"oid": "851026ff48ec4e39238b2c56212bac2ea7993670", "committedDate": "2020-10-26 14:53:19 -0400", "message": "Use new Warehouse type in Campaign (etc)"}, {"oid": "37fc5840de9bf6c5bb19b38767e1394be220e1b9", "committedDate": "2020-10-26 16:02:30 -0400", "message": "Move some event logic to the Warehouse"}, {"oid": "3f795a2b3ba1840a198ca067a1d76aed4429f699", "committedDate": "2020-10-26 17:26:50 -0400", "message": "Move removing child parts to the Warehouse"}, {"oid": "d597a8aab6c1b948ebfdcc3f58d2213acb04b200", "committedDate": "2020-10-27 12:29:29 -0400", "message": "Starting to implement edge fixes"}, {"oid": "9978a0b21dd7d6fbd2d0077748027c6ed31753b0", "committedDate": "2020-10-27 12:29:35 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_Edge"}, {"oid": "b2aea6b5d940c4fa06a42cd1b04559815323ab63", "committedDate": "2020-10-27 13:04:35 -0400", "message": "Working on edge code"}, {"oid": "fbd0d470437e527c764daa294d1521ca7509a6af", "committedDate": "2020-10-27 14:04:21 -0400", "message": "Implementing changes as per review"}, {"oid": "c883a5f8c0085c74e8f448ecd3c0f9c04227b067", "committedDate": "2020-10-27 17:22:03 -0400", "message": "Move spare part helpers to Warehouse and add tests"}, {"oid": "dfca32fc2a15a2908cd4f1277261d416fcad1f00", "committedDate": "2020-10-27 21:14:06 -0400", "message": "merge from upstream"}, {"oid": "a7d7c78d0149d3de3828501499fdf61b5ae75be6", "committedDate": "2020-10-28 14:17:13 -0400", "message": "Merge pull request #2167 from sixlettervariables/add-parts-warehouse"}, {"oid": "d9aa78378bd639bd9bd8b36e16e9d407d5c2f1a6", "committedDate": "2020-10-28 14:28:37 -0400", "message": "Clean up part events in Campaign"}, {"oid": "f6acac4474902742fd52f7d3d9cc3cf3c074d16a", "committedDate": "2020-10-28 15:35:29 -0400", "message": "Address LGTM nit"}, {"oid": "b60b5a84ad487fe05e6369a11fedccb4f233a69d", "committedDate": "2020-10-29 15:28:06 -0400", "message": "Move Hire Personnel for a Unit to an action"}, {"oid": "d32837864805c67ac3894ce3a6b84ee8dae064a3", "committedDate": "2020-10-29 15:43:23 -0400", "message": "Don't use unit IDs for parts needing service"}, {"oid": "92b838a6428bae18030b98719a0c20d399377282", "committedDate": "2020-10-29 15:51:09 -0400", "message": "Move unnecessary unit logic from Campaign and into Unit"}, {"oid": "fd327a8f439a378f8f34afcb3067fe57153dcc2d", "committedDate": "2020-11-03 21:23:25 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_MHQPortraitSelector"}, {"oid": "0cbe836f9e807faf4cbef1d391b1ce3ad0e865d1", "committedDate": "2020-11-04 16:17:23 -0500", "message": "Add Quartermaster to manage machines and materiel"}, {"oid": "18cddebe515dbc58e76c49ef789cb3f4b31bc8a2", "committedDate": "2020-11-06 14:57:11 -0500", "message": "Address PR feedback and fix #1801"}, {"oid": "dd8b9c84414cb11c30ec6e2d395e2260235cd73a", "committedDate": "2020-11-06 14:58:38 -0500", "message": "Fix extraneous whitespace"}, {"oid": "31c96a9e64873aa2840946dbb1c12d347994780d", "committedDate": "2020-11-06 16:10:50 -0500", "message": "Swapping portrait generation to use system-based file path comparison"}, {"oid": "8bf24b6a7be023940aad58a0c3c3ded1ee2a9358", "committedDate": "2020-11-06 16:50:16 -0500", "message": "Fixing merge conflicts"}, {"oid": "206529fd93c7b6efd22949d747ea14ec2a1942ed", "committedDate": "2020-11-06 19:38:46 -0500", "message": "Merge pull request #2185 from sixlettervariables/use-units-not-ids-for-transports"}, {"oid": "f246ee2085262fe713a9f24b3eaf6e7adb142e41", "committedDate": "2020-11-07 10:40:39 -0500", "message": "Moving portrait generation code into a random portrait generator"}, {"oid": "139d94f86981a4c6b681ec14d16630b99198024a", "committedDate": "2020-11-07 12:32:07 -0500", "message": "AbstractIcon: Simplifying icon-related code"}, {"oid": "cbec2bdc4861f772bb509fc69f37a8c053522347", "committedDate": "2020-11-07 12:39:03 -0500", "message": "Removing duplicate constants in campaign"}, {"oid": "e9c4a88af33312b049543ac024e2c32784a7b209", "committedDate": "2020-11-07 12:52:54 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_AIPS"}, {"oid": "76f57ccbde3ae98e58e5264c5d06be29b03ce3af", "committedDate": "2020-11-07 15:16:08 -0500", "message": "Merge pull request #2209 from Windchild292/dev_Windchild_RPG"}, {"oid": "067bacc6c00b10192faa2b4e13d4c2127ba75292", "committedDate": "2020-11-07 22:39:06 -0500", "message": "Merge pull request #2211 from Windchild292/dev_Windchild_AIPS"}, {"oid": "a38a43b4cc7f7670aa7ffad2bf318bc15334d0a1", "committedDate": "2020-11-08 13:55:37 -0500", "message": "Merge remote-tracking branch 'upstream/master' into add-quartermaster-2"}, {"oid": "6b4dfeadd20c22e92cb2a0328030ed58c3df5cd1", "committedDate": "2020-11-14 19:29:15 -0500", "message": "Swapping Genealogy and FormerSpouse to no longer use id when active."}, {"oid": "aa59e47ee67a276b3a415ab3cb761291fa2d1593", "committedDate": "2020-11-15 16:10:53 -0500", "message": "Only return non-zero quantities of parts, fixing #2231"}, {"oid": "24c2199bd396e7e059f3a3123c060fce92c04726", "committedDate": "2020-11-30 21:41:10 -0500", "message": "merge from upstream"}, {"oid": "6b3e4afa0664f35d2fc49a8e881b2fd7f22ea981", "committedDate": "2020-12-04 07:37:02 -0500", "message": "Use tested spare part consolidation logic"}, {"oid": "749469b9d6c8f7a36748d76c53dae5cc39365894", "committedDate": "2020-12-04 10:33:33 -0500", "message": "Fixup whitespace"}, {"oid": "cb8a407413b0629636afe9dc153a93699cbcb2da", "committedDate": "2020-12-04 12:21:25 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_476"}, {"oid": "7c0dd98fed591d24803031e815a39480fae3da18", "committedDate": "2020-12-04 12:24:21 -0500", "message": "Fixing merge conflitcs"}, {"oid": "d770e67e26237234553967696e546ef4cd5e6c4a", "committedDate": "2020-12-04 16:20:00 -0500", "message": "Moving ranks to their own folder"}, {"oid": "198ea362215a2605015f13d5baf7a6f9a27e2323", "committedDate": "2020-12-04 17:57:54 -0500", "message": "Moving ranks system names to the Rank XML file"}, {"oid": "c88ca2c1c698dfe730b493048b630ef6d20ce973", "committedDate": "2020-12-13 02:45:36 -0500", "message": "Restore AtBContract references in the ContractMarket #2141"}, {"oid": "dce8434c1c674caf8ba284f7e99a0da72a679958", "committedDate": "2020-12-14 18:14:37 -0500", "message": "Merge pull request #2263 from Windchild292/dev_Windchild_2200"}, {"oid": "02b7023e03f921ec06430d3a3bfbf3fd4d06f12d", "committedDate": "2020-12-16 17:45:57 -0500", "message": "Add the ability to swap out instances of static classes"}, {"oid": "6fe11ed3dea3b240bc594dd3153526f8fa1efcd1", "committedDate": "2020-12-22 17:15:50 -0500", "message": "merge from upstream"}, {"oid": "1080fdc3cc0abf4b10a986fa95243f6a883a2446", "committedDate": "2020-12-22 17:22:20 -0500", "message": "Do not display unknown armor types in the Parts In Use report, fixes #2298"}, {"oid": "26577933fe91fcc839a403192479257fcf64f842", "committedDate": "2020-12-25 17:30:07 -0500", "message": "PlayerColours, Colour Camo Standardization, and standardizing camo selector"}, {"oid": "b7106b6df15109159676c4d5c76d6b57d98d749c", "committedDate": "2020-12-25 17:31:02 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_1727"}, {"oid": "256150fa6780932824d092bb5e1cfc5160a82798", "committedDate": "2020-12-26 23:02:07 -0500", "message": "Fixing colour camouflage during colour set"}, {"oid": "05bda11a452176725c2023ddfda641c5b9d77ff2", "committedDate": "2020-12-30 11:28:06 -0500", "message": "Merge pull request #2294 from sixlettervariables/add-contract-market-tests"}, {"oid": "d96560342ac372c6159e2eb36a930d730575079e", "committedDate": "2020-12-31 10:50:32 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_1727"}, {"oid": "87fef495531a68093af610ebd4d170ad9fe58ed7", "committedDate": "2020-12-31 13:13:30 -0500", "message": "Applying requisite changes in other files"}, {"oid": "1077aa3ce47d85a2b52d46fe24d0a9d6500338b3", "committedDate": "2021-01-07 22:38:01 -0500", "message": "Implementing PersonnelRole Enum"}, {"oid": "7ee43f4d3196080806f016767d68fcc646806b95", "committedDate": "2021-01-08 13:14:46 -0500", "message": "Fixing merge conflicts"}, {"oid": "461f2e03e5c7b7e233ccb188ab3acbea84217051", "committedDate": "2021-01-09 12:33:02 -0500", "message": "Fixing merge conflicts"}, {"oid": "7715f2d53d7b785432c6d12abe076dd9fe734b63", "committedDate": "2021-01-11 00:08:57 -0500", "message": "Continuing camouflage AbstractIcon implementation"}, {"oid": "5c767fe20f909aed7ad9ee04af783fada0f01183", "committedDate": "2021-01-13 14:44:22 -0500", "message": "Fixing colour set and moving EntityImage to use proper camo type"}, {"oid": "13a860aed5400a5bf2ccb7ff55f12b6266ed1c86", "committedDate": "2021-01-14 15:40:05 -0500", "message": "Moving to fully use isConventionalInfantry"}, {"oid": "b395926d66b44f814eeccbcdf238377754b3497f", "committedDate": "2021-01-16 12:03:30 -0500", "message": "Swapping to using streams for missions"}, {"oid": "3c08e5b43761cd85a411618df940a669f43b0f74", "committedDate": "2021-01-16 12:03:41 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_MissionStatus"}, {"oid": "56075ee22d31cf6645cfbc078f6d0059a7c35a2e", "committedDate": "2021-01-16 13:07:08 -0500", "message": "Swapping to stream implementation"}, {"oid": "c56982c6b4c7590fa58659f5739adb6fb98c38b3", "committedDate": "2021-01-16 13:20:27 -0500", "message": "Applying changes from personal review"}, {"oid": "bac1ae00109056ac5aaf4ddf35370fb62657e4ed", "committedDate": "2021-01-16 13:40:07 -0500", "message": "Moving to only use getMissions when necessary"}, {"oid": "6a6ab7d22aae49fceae02409ae8f3121e890ccc1", "committedDate": "2021-01-16 13:57:34 -0500", "message": "Moving to isActiveOn"}, {"oid": "e0a11cd0c98c4fd665190822f79c498645f15426", "committedDate": "2021-01-31 13:08:13 -0700", "message": "Renaming a bunch of personnel options"}, {"oid": "a16944f0ca0f8452a8500b311c0d4c1afd4f69ad", "committedDate": "2021-01-31 13:14:59 -0700", "message": "Finishing the option renames"}, {"oid": "3055e76295deb7d552bc3972b69cc6e0fb1f8760", "committedDate": "2021-02-01 10:17:56 -0700", "message": "Starting to implement Automatic Company Generation"}, {"oid": "909ceb8a84cdd6031bf90c300d47b4d2da527643", "committedDate": "2021-02-01 21:19:14 -0700", "message": "Continuing to work on an AtB Company Generator"}, {"oid": "50d74c591ba7b25978e91a326e3d0ce53513c6cd", "committedDate": "2021-02-07 16:50:13 -0700", "message": "Continuing to implement company generation and its options"}, {"oid": "426328755b88eceb8119a0c91696b2e655a0c00e", "committedDate": "2021-02-08 12:27:32 -0700", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_PersonnelRoles"}, {"oid": "9cbf543bf750926dffd2ad77d82e8da2dc416a54", "committedDate": "2021-02-08 12:57:48 -0700", "message": "Bugfixes and some code cleanup from personal review"}, {"oid": "f00627349f7dfb1bfb29305b3377fa3fea2776c5", "committedDate": "2021-02-11 10:55:45 -0700", "message": "Adding Unit::isConventionalInfantry to ensure the entity is null checked"}, {"oid": "d5767fac16735b748124c2759fa7e02388f3e3e0", "committedDate": "2021-02-11 12:52:56 -0700", "message": "Applying changes from personal review"}, {"oid": "d69c0121a94474264821a25df299ecf667dfefdf", "committedDate": "2021-02-12 22:37:21 -0500", "message": "merge from upstream"}, {"oid": "17e3819e3ef169b2b2bf9114df56a23fc8f57f8b", "committedDate": "2021-02-19 09:26:24 -0500", "message": "Add logging and error trapping on daily unit maintenance #2427"}, {"oid": "3a7dc0d62fbf19186d1bbebeefc14a1838733180", "committedDate": "2021-02-19 09:32:56 -0500", "message": "Add error trapping to daily part maintenance, related to #2427"}, {"oid": "efa0010ac4de3087fd997cad083dfcc7307f1fae", "committedDate": "2021-02-19 10:53:09 -0700", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_PersonnelOptionsTab"}, {"oid": "1e74b62a2b90eefb8fd7a24d4c24faf08d1c6b3b", "committedDate": "2021-02-19 12:27:59 -0700", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_AtBCompanyGeneration"}, {"oid": "8f0b7abad948bde3df857ec022c1a3668076b29c", "committedDate": "2021-02-26 13:31:57 -0700", "message": "2442: Fixing Ranks Issues: Removing ancient migration and code, Using proper setter, and using the Ranks as the spinner"}, {"oid": "d52c982d8da547329729b0caea1fffab274e1b0c", "committedDate": "2021-02-27 10:23:14 -0500", "message": "Use MM's new UnitNameTracker for name collisions"}, {"oid": "3c5f987fa51fbe18454c55214f4d5d5f2b980a90", "committedDate": "2021-03-01 09:12:20 -0700", "message": "Fixing merge conflicts"}, {"oid": "b9f8896698477ed928a80443d0345d6397c58bb2", "committedDate": "2021-03-03 10:07:04 -0700", "message": "Fixing merge conflicts"}, {"oid": "1a9d000431b1f187634f7e6ef15161dd07678998", "committedDate": "2021-03-05 12:19:51 -0700", "message": "Continuing to work on the company generator"}, {"oid": "7f59899475e511f98ed9f64a1c10efab11737c43", "committedDate": "2021-03-05 21:50:52 -0500", "message": "merge from upstream"}, {"oid": "1a6354d39d3f6108e9e0e6f9e455c5a126627347", "committedDate": "2021-03-06 10:44:21 -0500", "message": "Address review comments"}, {"oid": "18c7330a3cc319d1dc3e55892a46c5c80539db9a", "committedDate": "2021-03-06 09:56:12 -0700", "message": "Fixing merge conflicts"}, {"oid": "b19752176bb0619f7ccda9f75d551b050521a106", "committedDate": "2021-03-08 23:25:41 -0500", "message": "merge from upstream"}, {"oid": "0bc70593b2b327657e4ff7709e320451adfadbe6", "committedDate": "2021-03-09 09:01:53 -0700", "message": "Fixing merge conflicts"}, {"oid": "9eca5ea7a7d0fe44db02d1ce091f5bf294cb156d", "committedDate": "2021-03-09 09:07:57 -0700", "message": "Fixing merge conflicts"}, {"oid": "baefb52c3074832565148fffae6d1363449fa8ae", "committedDate": "2021-03-09 09:19:18 -0700", "message": "Fixing merge conflicts"}, {"oid": "9499ad003bfeb58930187abad3334129be912b4e", "committedDate": "2021-03-09 09:23:18 -0700", "message": "Fixing merge conflicts"}, {"oid": "d0e34e3b80c163ff4ed03474a3adcd39d061c9ee", "committedDate": "2021-03-09 09:39:24 -0700", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_ShoppingList"}, {"oid": "8ee805b229c9373e653376a749274023ef13139b", "committedDate": "2021-03-09 11:54:07 -0500", "message": "Merge pull request #2373 from Windchild292/dev_Windchild_isConventionalInfantry"}, {"oid": "559cb006d560fd2099639e701e37538aded7f3a1", "committedDate": "2021-03-09 12:19:33 -0500", "message": "Merge pull request #2337 from Windchild292/dev_Windchild_ShoppingList"}, {"oid": "2bf37308c59c435acc52e0cf512ce9f74d1adc7e", "committedDate": "2021-03-09 10:26:52 -0700", "message": "Fixing merge conflicts"}, {"oid": "62726bf22f84cafc8872cbdebd5a8edce980e60a", "committedDate": "2021-03-09 10:27:33 -0700", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_CamouflageIcon"}, {"oid": "5082524cc2a32c4a8360cb845951a5e2b94300df", "committedDate": "2021-03-09 11:46:51 -0700", "message": "Fixing merge conflicts"}, {"oid": "c640fe5cc744f25a6fb292dd50220c8ecfe1c986", "committedDate": "2021-03-09 12:27:38 -0700", "message": "Fixing merge conflicts"}, {"oid": "64b151aab1a311e538c895526ba3f807216917c1", "committedDate": "2021-03-11 19:48:54 -0700", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_MissionStatus"}, {"oid": "98253ba4fbbd681dca588b7cb766e8439c19d880", "committedDate": "2021-03-11 19:59:41 -0700", "message": "Applying bugfixes from review"}, {"oid": "8d7d2a8df4596249f133919b569b56249b0068aa", "committedDate": "2021-03-12 14:28:19 -0700", "message": "Improving default contract name and sort"}, {"oid": "c13dedfdb7ce73cfdfe1d464e83765140336736c", "committedDate": "2021-03-12 14:59:22 -0700", "message": "2458: Adding Insufficient Astech warnings for MRMS and adding some more Astech/Medic pool functions"}, {"oid": "d2b11fb805eea82905ab0d8f846ca96bd69124e3", "committedDate": "2021-03-13 09:01:10 -0700", "message": "Fixing merge conflicts"}, {"oid": "902ebb67bf5dbe2e94cc32810992a2d1aa6c321c", "committedDate": "2021-03-13 09:02:31 -0700", "message": "Fixing merge conflicts"}, {"oid": "ec5843cb0d12174c7d5f83419268e5184d2d60f6", "committedDate": "2021-03-13 09:08:04 -0700", "message": "Fixing merge conflicts"}, {"oid": "1e0c0d260af35ecf86a9b8b9519c8cceee2e7028", "committedDate": "2021-03-13 11:47:11 -0700", "message": "Moving the unit market changes into an individual branch that contains some parts of the contract market changes"}, {"oid": "a5382b0386cb0354a4b3c870fdd8fee5e2f5330a", "committedDate": "2021-03-13 22:22:50 -0500", "message": "additional code review changes"}, {"oid": "fe6e045bb8acb2700cc38bd6a25ec62011977264", "committedDate": "2021-03-14 01:21:48 -0500", "message": "merge from upstream"}, {"oid": "48663cfaebb3a6a04f5680e7f755c532bd159779", "committedDate": "2021-03-14 10:58:03 -0600", "message": "Fixing merge conflicts"}, {"oid": "b8ccd096938dcbd22c56b4a93c87c78d770df189", "committedDate": "2021-03-16 10:03:47 -0600", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_AbstractUnitMarket"}, {"oid": "00db4b9f4381f0d6bcaadbbaa197f0be1c80d30b", "committedDate": "2021-03-17 12:29:14 -0400", "message": "Merge pull request #2445 from sixlettervariables/issue-2597-protect-duplicate-name-hash"}, {"oid": "a79e2e08ae5167e26dc37999b749296e47e179b9", "committedDate": "2021-03-17 12:27:27 -0600", "message": "Finishing the Unit Market Dialog"}, {"oid": "9d4975c56dc9ea4c18da5c7b146cfa794453f668", "committedDate": "2021-03-17 12:53:48 -0600", "message": "Swapping to EmptyUnitMarket instead of null"}, {"oid": "795721747293b0a0a0b4a5e12334158e9da303da", "committedDate": "2021-03-17 14:00:33 -0600", "message": "Fixing merge conflicts"}, {"oid": "aac2ced366aa376eb9fa78ab230f38e43d0c8362", "committedDate": "2021-03-17 21:16:52 -0400", "message": "code review changes"}, {"oid": "67d86a55c23420a76995a1457504c22f1b9cc48a", "committedDate": "2021-03-18 10:00:41 -0600", "message": "338: Base Free Time Sort"}, {"oid": "b634beb8d18a3ebafa13e3332256da259e3ef1c1", "committedDate": "2021-03-18 14:35:10 -0600", "message": "Finishing up working on abstracting out the Unit Market"}, {"oid": "8627de7d060ea44d3e33d04c259f8ab05f5bba9f", "committedDate": "2021-03-21 20:29:53 -0400", "message": "merge from upstream"}, {"oid": "04087a9bc33d0e3547e9c2dc68db496eac62b82b", "committedDate": "2021-03-21 20:10:23 -0600", "message": "Fixing merge conflicts"}, {"oid": "093eaeb8fbe362bb2d525d661180c433576aab9b", "committedDate": "2021-03-24 00:26:51 -0400", "message": "merge from upstream"}, {"oid": "2a2559d3ab5da713e7b8864ab0de458849dce6b6", "committedDate": "2021-03-24 09:29:25 -0600", "message": "Swapping over to using a three tiered rank setup"}, {"oid": "1e4e1993ec9f2278c7f326d28bcae5a7bff9c4a0", "committedDate": "2021-03-24 12:05:23 -0600", "message": "Heavy simplification of rank profession code"}, {"oid": "a57000e9696c4bf593f3215fa36543b2d13ed5ea", "committedDate": "2021-03-24 12:30:48 -0600", "message": "2196: Swapping to a standardized display wrapper class for rank display"}, {"oid": "b903aa7de36203afa40ede49922eb9e422fdcf43", "committedDate": "2021-03-24 13:07:46 -0600", "message": "1483: Adding Rank System import/export"}, {"oid": "e5b1d3a3fc6d825d722e496ad49832555fa65754", "committedDate": "2021-03-25 14:08:49 -0400", "message": "units deployed to StratCon tracks are ineligible for repairs"}, {"oid": "e7042962dd815937b9d91c1335d85ccec3647bf7", "committedDate": "2021-03-30 13:26:17 -0400", "message": "Merge pull request #2371 from Windchild292/dev_Windchild_CamouflageIcon"}, {"oid": "091d87a31e8cf5d1061ccf76a256bf990a0a623b", "committedDate": "2021-03-30 11:27:53 -0600", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_2449"}, {"oid": "37144650aef43bd5f3a8a14257376f2d6fe133f8", "committedDate": "2021-03-30 16:21:13 -0400", "message": "merge from upstream"}, {"oid": "5854d37bf8fbd63f741b9601ef373a16253a9b32", "committedDate": "2021-04-04 09:12:14 -0600", "message": "Adding the ability to create a custom rank system"}, {"oid": "db96404f216df48ce5321de053ce56015837d2cd", "committedDate": "2021-04-04 09:43:32 -0600", "message": "Renaming the campaign rank system methods to properly handle rank system changes"}, {"oid": "ae6bdf14123e6ac4ba92f5884b58b533b6cad2d3", "committedDate": "2021-04-04 10:12:54 -0600", "message": "Moving personnel rank changes to their proper location within person"}, {"oid": "19f0f0ce5d069f8f6f4f481cda04cdee3e05402a", "committedDate": "2021-04-04 11:59:18 -0600", "message": "Working on rank import/export"}, {"oid": "a34e385bf50ab28870531fe663d288b7b98b2697", "committedDate": "2021-04-06 10:54:55 -0600", "message": "Fixing and improving validation issues"}, {"oid": "3f3d7b237f61dd118eeb39087eb7fe9de6be03a0", "committedDate": "2021-04-06 11:53:59 -0600", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_GenealogyIdReference"}, {"oid": "80202c7f73397f3bc36193b0f3e2fce444bc4070", "committedDate": "2021-04-06 16:04:51 -0600", "message": "Fixing merge conflicts"}, {"oid": "ab655fb9abe6d2b9be4e20eba7e4c74b4b8e5c22", "committedDate": "2021-04-06 16:20:53 -0600", "message": "Fixing merge conflicts"}, {"oid": "729ef155ccdbaca3a1f23f1e57309d3b973851da", "committedDate": "2021-04-06 16:38:48 -0600", "message": "Fixing merge conflicts"}, {"oid": "a4c29e55f023d3416dd5e3f18a9d2061ab841fa1", "committedDate": "2021-04-06 17:56:58 -0600", "message": "Fixing merge conflicts"}, {"oid": "47bf0ed7fa9b09a4d76b634d900cceac953e17ed", "committedDate": "2021-04-06 19:54:46 -0600", "message": "Fixing merge conflicts"}, {"oid": "c2d264c23786de4ea703861360c3bcb46e79c5ac", "committedDate": "2021-04-07 00:13:59 -0400", "message": "merge from upstream"}, {"oid": "a5d70a5c672e494c7ec8be19e05d642b0259c9c4", "committedDate": "2021-04-07 14:24:17 -0600", "message": "Implementing multiple new procreation options and moving it to work based on a supplied date"}, {"oid": "18e6e46b095f8bbb1c623c60fd3aa177b7fe8682", "committedDate": "2021-04-09 09:22:39 -0600", "message": "Fixing merge conflicts"}, {"oid": "ae01b6e6d0fa55b766f741fa6fb35f727fff344b", "committedDate": "2021-04-12 09:45:59 -0600", "message": "Creating ScenarioStatus Enum and updating how scenarios are gotten"}, {"oid": "133e5865e2ee8dd5900b26dfe5f9aa0459a1a04c", "committedDate": "2021-04-14 11:31:25 -0400", "message": "multiple bugs with ignoring scenarios; ground pirats on air maps"}, {"oid": "3d8916caadfbc4085e509724142f929fc9d7f1d5", "committedDate": "2021-04-16 17:31:08 -0400", "message": "add text resources; remove campaign scenarios after ignoring in stratcon UI"}, {"oid": "2e00ea9a5b972b07d7446e75a06d3d493ac69426", "committedDate": "2021-04-16 21:14:35 -0400", "message": "code review changes"}, {"oid": "becffdc94075004fa3890bb36799389a48105c33", "committedDate": "2021-04-16 23:10:50 -0400", "message": "code review changes; data fix; stop nagging once user hits 'no' once"}, {"oid": "d71320d4f7a9ae41189a6b4651979960cb9dcc0f", "committedDate": "2021-04-20 21:55:21 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_2449"}, {"oid": "39603f48e1d441dd892227bef76e398c95cd4852", "committedDate": "2021-04-20 21:59:13 -0400", "message": "Fixing merge conflicts"}, {"oid": "3f7306636c42a999caf904b8d513f267243def42", "committedDate": "2021-04-20 22:01:54 -0400", "message": "Fixing merge conflicts"}, {"oid": "1c0e5821f637a666ef7632b5d821db62d76f624d", "committedDate": "2021-04-20 22:20:35 -0400", "message": "Fixing merge conflicts"}, {"oid": "9b9545c3b2e6890b9bef97677c61bb175cd5cc89", "committedDate": "2021-04-21 00:39:22 -0400", "message": "allow extra time for maintenance"}, {"oid": "de34b46d2f53c172612ebe5aa1abffe16b249f06", "committedDate": "2021-04-23 10:23:26 -0400", "message": "Bugfixing"}, {"oid": "b82fd9901fd0447da0211522ffc97ccae5c708ac", "committedDate": "2021-04-23 11:36:57 -0400", "message": "Fixing merge conflicts"}, {"oid": "bb7b0c375b9a2fd6baeced3e5e94501eb2e636ed", "committedDate": "2021-04-23 13:03:53 -0400", "message": "Moving into selectors folders"}, {"oid": "1ba164a58381a4be88ec479fee5841c1b8cdcf99", "committedDate": "2021-04-23 13:15:11 -0400", "message": "Making initial faction changes for constructors and ordering"}, {"oid": "fc7a0539b85c7af6a166ed9d779e7b723307b883", "committedDate": "2021-04-23 15:57:04 -0400", "message": "Making RandomOriginOptions, which will allow its use in multiple locations"}, {"oid": "1741bea67582d0555d094cbdd0fa977eec707bcc", "committedDate": "2021-04-24 22:10:27 -0400", "message": "fix scenario date/force resets"}, {"oid": "cebc3d0c231e54580eb29e4756f549b702b9ace1", "committedDate": "2021-04-27 14:41:42 -0400", "message": "Merge pull request #2462 from Windchild292/dev_Windchild_2460"}, {"oid": "b0c3badc393ff67ccba2cbe34623ca496c576782", "committedDate": "2021-04-27 14:42:27 -0400", "message": "Merge pull request #2352 from Windchild292/dev_Windchild_PersonnelRoles"}, {"oid": "138d08410b585fae3ba4af354d18d2b15d5d36c8", "committedDate": "2021-04-27 14:48:43 -0400", "message": "Fixing merge conflicts"}, {"oid": "5f426e90c201a24d339c0322897809938b79db5a", "committedDate": "2021-04-27 15:08:01 -0400", "message": "Fixing merge conflicts"}, {"oid": "7b4772ec38db2aa8d657d0a22ed7868d0c4f6117", "committedDate": "2021-04-27 15:45:52 -0400", "message": "Fixing merge conflicts"}, {"oid": "ce0b3b652feb9205fb4ed8cc3ae599bb5da9a308", "committedDate": "2021-04-27 15:47:48 -0400", "message": "Fixing merge conflicts"}, {"oid": "f7d684241f42639eb35d60508c39dbb00b0d9dbc", "committedDate": "2021-04-28 10:56:49 -0400", "message": "Fixing merge conflicts"}, {"oid": "8dd83b6c46f8f2454ba4d4accfe8176c58e398d7", "committedDate": "2021-04-29 23:22:27 -0400", "message": "Fixing merge conflicts"}, {"oid": "87033ef81af06d5a8c2af9d93a9b9057e49f0fde", "committedDate": "2021-05-01 17:09:56 -0400", "message": "Fixing merge conflicts"}, {"oid": "815f8fa858fdbf707019709a5d51524b5e61472a", "committedDate": "2021-05-04 14:12:54 -0400", "message": "Dependent Flag Swapover"}, {"oid": "66f6a880e1b615fb97de9757be649fc18c10f049", "committedDate": "2021-05-04 19:52:08 -0400", "message": "Implementing auto-hiring pool on new day"}, {"oid": "bbcc984be566d1587a598efc974fb1dbb399868a", "committedDate": "2021-05-05 18:25:22 -0400", "message": "Fixing merge conflicts"}, {"oid": "741d61daa6ac3570f7a3c569ee6e6dc87a902441", "committedDate": "2021-05-08 20:32:38 -0400", "message": "Fixing merge conflicts"}, {"oid": "227d6642ef68511eb067588bdf263aa2ad88f421", "committedDate": "2021-05-09 10:13:42 -0400", "message": "Creating the backend implementation for random procreation modules"}, {"oid": "e0faed52760616365379933d91f9343f58c61cb4", "committedDate": "2021-05-09 14:30:58 -0400", "message": "Renaming the directory from random procreation to procreation"}, {"oid": "7943361f04c7c5cc1753852ddba3a77d8259ab57", "committedDate": "2021-05-11 09:52:44 -0400", "message": "2607: Starting to work on redoing the salvage calculations"}, {"oid": "0539aea6159ca7cfbbb77a035ffb6c51d590d29f", "committedDate": "2021-05-11 10:40:37 -0400", "message": "2607: Properly calculating and paying for payment overages"}, {"oid": "33d43f4fe9a41925e3cc417f5d782c19f097ad63", "committedDate": "2021-05-15 06:53:31 -0400", "message": "Merge pull request #2583 from Windchild292/dev_Windchild_DependentFlagSwapover"}, {"oid": "55da24b03b3ecbc71f7d6ab739e1820f1814fda1", "committedDate": "2021-05-17 13:46:12 -0400", "message": "Creating AtB Contract Type and AtB Morale Level enums"}, {"oid": "470df7bcd395e57ffe3f3e59660f0e468cdcfaf1", "committedDate": "2021-05-18 01:31:38 -0400", "message": "fix multiple issues generating fixed objective scenarios"}, {"oid": "ffcd06cfa996127e858ea60096b58286f97a8a8a", "committedDate": "2021-05-19 09:33:39 -0400", "message": "Implementing save code swapover"}, {"oid": "c03f4deaeb4d632a5e2e614ae5204da255eea805", "committedDate": "2021-05-22 22:01:49 -0400", "message": "Merge pull request #2608 from Windchild292/dev_Windchild_2607"}, {"oid": "f9cf763bd4ff9a8e017e54464ad20989c2e772d3", "committedDate": "2021-05-23 23:33:39 -0400", "message": "Fixing merge conflicts"}, {"oid": "b5b8facc5de91af84188412dc8d1ec3df00e3ae6", "committedDate": "2021-05-24 13:55:12 -0400", "message": "Fixing merge conflicts"}, {"oid": "1b33879affd0101e7870d5696137e354b636d342", "committedDate": "2021-05-24 13:57:36 -0400", "message": "Fixing merge conflicts"}, {"oid": "f4c2aadcbf8a9e3bc45db1e7227160e36f43d47a", "committedDate": "2021-05-24 14:00:22 -0400", "message": "Merge branch 'master' into dev_Windchild_CamouflageRework"}, {"oid": "fe024592b6ac70b9cf1a9cd546a54ebc8bb02363", "committedDate": "2021-05-24 17:16:21 -0400", "message": "2625: Properly Clear Tech Units on Person removal/retirement"}, {"oid": "530decc0b587e53087c8cacbe31aeba13dd82f41", "committedDate": "2021-05-29 11:32:44 -0400", "message": "Fixing merge conflicts"}, {"oid": "156500be4e08594aeaf3efa424938f295b2ed86e", "committedDate": "2021-05-29 16:04:26 -0400", "message": "Phase one of Campaign Preset rework"}, {"oid": "34d76d4e22674638bd3ce602a713238ff5c203b8", "committedDate": "2021-05-30 14:33:28 -0400", "message": "Phase Two: finishing internal work and starting on GUI implementation"}, {"oid": "12f96f2ab3335b805508c31bbbc08a9bcf5491d7", "committedDate": "2021-05-30 21:57:28 -0400", "message": "Fixing merge conflicts"}, {"oid": "b109f86e86e8aba9c5b4aa279919f2d6547979b9", "committedDate": "2021-05-31 10:38:11 -0400", "message": "Fixing merge conflicts"}, {"oid": "65a009b4cf6307795c815aacdb82feb8fba0a01d", "committedDate": "2021-05-31 17:00:21 -0400", "message": "Fixing merge conflicts"}, {"oid": "14d482cda0564e28b6c5ea95e20725e2200f51ff", "committedDate": "2021-05-31 17:57:20 -0400", "message": "Merge branch 'master' into maintenance_extra_time"}, {"oid": "00a30fe49ee531dda71cb88bacc2f56dbe0a5b9e", "committedDate": "2021-05-31 18:05:23 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_2654"}, {"oid": "fa54f8e9f392dc2f02cb5b1b5bc9e8c428a88e61", "committedDate": "2021-06-02 12:29:42 -0400", "message": "Creating a base ignorable nag dialog for MekHQ and implementing it in all current new day nags"}, {"oid": "2509a0841acae929e7340ae5fe4d01f7bf437d40", "committedDate": "2021-06-02 16:20:48 -0400", "message": "Fixing merge conflicts"}, {"oid": "6b416ee90791ecb016edf0ae5b5c0e16ebdd4760", "committedDate": "2021-06-09 16:05:55 -0400", "message": "Fixing merge conflicts"}, {"oid": "d36c47d7aaa8978e4d523b2031d299babd654e2a", "committedDate": "2021-06-09 16:08:35 -0400", "message": "Fixing merge conflicts"}, {"oid": "7fe956938b8b76f05f395b681f8bd5f4bd02d25a", "committedDate": "2021-06-09 21:27:13 -0400", "message": "Fixing merge conflicts"}, {"oid": "055b02a76318d18eed5ad27a93333893cf8b74db", "committedDate": "2021-06-09 22:30:38 -0400", "message": "Fixing merge conflicts"}, {"oid": "e8c2b13279e2b5d226f4de5b350e2d12ff468577", "committedDate": "2021-06-11 00:26:36 -0400", "message": "Fixing merge conflicts"}, {"oid": "d4b45a4c9543d0786feacc4344d364fee2997970", "committedDate": "2021-06-11 12:46:28 -0400", "message": "Fixing merge conflicts"}, {"oid": "2560bdda30482870c73884470b53cb579bcaa47a", "committedDate": "2021-06-14 13:25:17 -0400", "message": "Force icon implementation migration from outdated previous branch"}, {"oid": "6fd836ff4e8a233aa293e2a3fc08cd3316f64b66", "committedDate": "2021-06-14 14:23:04 -0400", "message": "Adding UnitIcon, GM Tools implementation, and baseline for export"}, {"oid": "eaf4453f2f1f40707d9594de5dd6aa83d594b776", "committedDate": "2021-06-14 18:04:32 -0400", "message": "Applying personal code review changes and starting unit icon code"}, {"oid": "e1a7f7166de5f36fa0c44b7151478c944e6a4b89", "committedDate": "2021-06-21 13:16:19 -0400", "message": "Apply overtime to the last chunk worked as well #2679"}, {"oid": "9c62597332ac0ba24004132e537ba0cf049741e3", "committedDate": "2021-07-01 12:35:33 -0400", "message": "Fixing merge conflicts"}, {"oid": "809c6366e1ce1dea3f4b2fa21841aab6639992a4", "committedDate": "2021-07-10 11:47:52 -0400", "message": "Finishing the portrait swapover"}, {"oid": "0ddba79849d418947ba1ce309a4c673ac78292d4", "committedDate": "2021-07-10 20:58:49 -0400", "message": "Bugfixing, phase 1"}, {"oid": "10a9609cabffc8f5e7068b6c0c33c0f65f796508", "committedDate": "2021-07-12 18:39:55 -0400", "message": "Fixing unit tests"}, {"oid": "06664ff8286a85fe165e5f92aaaf22326e692c90", "committedDate": "2021-07-15 10:22:09 -0400", "message": "Merge branch 'master' into dev_Windchild_476"}, {"oid": "e0e383e2453514ee7c9c7abc9214a2a1a869a068", "committedDate": "2021-07-15 10:34:25 -0400", "message": "Fixing merge conflicts"}, {"oid": "7211585d4a34159d5c80c9ea30fa44bc2746c1b4", "committedDate": "2021-07-17 20:03:19 -0400", "message": "Fixing a few potential divide by zero issues"}, {"oid": "a3eb7d3dfe3477e32117d175e717023f539795eb", "committedDate": "2021-07-17 20:11:58 -0400", "message": "Further cleanups from personal review"}, {"oid": "21a75e1c9ca5516bb7394f30fa2c0b4d9a68b9ad", "committedDate": "2021-07-17 20:27:51 -0400", "message": "Further cleanups, and adding an astech team size constant"}, {"oid": "35bffb052c1b608df03fb41f6548a3e9f847cca6", "committedDate": "2021-07-18 10:43:10 -0400", "message": "Fixing NPE warning and cleaning up the if statement"}, {"oid": "a7670828c4762e3852dbd248b348c2dd371b5018", "committedDate": "2021-07-18 12:12:40 -0400", "message": "Fixing possible confusion of local and field warnings"}, {"oid": "951b55f7a5fb6036e67897e709cd6a0dbbb45b39", "committedDate": "2021-07-18 12:33:08 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_Procreation"}, {"oid": "61cc2fd1669914bef276e018cb7562be422b1f7c", "committedDate": "2021-07-18 14:30:17 -0400", "message": "Removing Deprecated Usages: Logger swapover"}, {"oid": "542307adf490f10930d9470ff64879b4b7ee6b0a", "committedDate": "2021-07-20 10:11:31 -0400", "message": "Moving crew null check and fallback logic into Campaign::getShorthandedModForCrews"}, {"oid": "f6e661dba426e63388e9b57d224a7090006e3203", "committedDate": "2021-07-20 10:18:55 -0400", "message": "Merge pull request #2751 from Windchild292/dev_Windchild_AstechDivideByZero"}, {"oid": "f3bd90fefb0af89a7177be76f70aeed033a7b258", "committedDate": "2021-07-20 10:20:25 -0400", "message": "Fixing merge conflicts"}, {"oid": "424407a51980930adead83bbfa918bf2b0d8a441", "committedDate": "2021-07-20 21:09:32 -0400", "message": "Fixing merge conflicts"}, {"oid": "497f1345950b39b1eb1e2d1389b63a7fcd5eef14", "committedDate": "2021-07-20 21:26:53 -0400", "message": "Fixing merge conflicts"}, {"oid": "bc21146f53fc23bdfd1f5f4273f07b588b0904e2", "committedDate": "2021-07-24 10:15:39 -0400", "message": "Fixing merge conflicts"}, {"oid": "a5e9303ebeafcd74e0348b8b2f767c5f8e12c8cb", "committedDate": "2021-07-26 12:32:33 -0400", "message": "2558: Swapping removePerson to be object instead of id based"}, {"oid": "0a76a9693556237907de0f6e2a5a08f48dcfd3be", "committedDate": "2021-07-26 12:38:50 -0400", "message": "2558: Custom message for when dependants leave"}, {"oid": "1babc7de6f9de3b1f517061f1c249c3339f13e10", "committedDate": "2021-07-26 12:54:49 -0400", "message": "2558: Adding unique dependent add message"}, {"oid": "b214bdb7975aabd1cdc8d39cb9f1fdea3541b58d", "committedDate": "2021-07-26 15:13:02 -0400", "message": "Fixing merge conflicts"}, {"oid": "d86c1c8c70ae0bcc2a9d6dd09e7fe963745b5e37", "committedDate": "2021-07-26 22:20:42 -0400", "message": "Merge pull request #2478 from Windchild292/dev_Windchild_AbstractUnitMarket"}, {"oid": "d83ce12b4886460ba57e84afbf15b20e30fab693", "committedDate": "2021-07-28 15:48:34 -0400", "message": "Isolating RATs into the RAT Tab"}, {"oid": "3d303b442ab8d664c56fd8709d970f86c7eed83f", "committedDate": "2021-07-30 10:40:29 -0400", "message": "Loan code cleanup and refactoring"}, {"oid": "56910a666af8115ec4e364b98a16fc009c1a65b5", "committedDate": "2021-07-30 11:11:21 -0400", "message": "Fixing merge conflicts"}, {"oid": "ec7e4bc4aeed27a5b835b44d295642228bcc16c3", "committedDate": "2021-08-10 12:37:47 -0400", "message": "Transaction Type Enum"}, {"oid": "497976540984392426f984acd40477886555e06d", "committedDate": "2021-08-10 15:25:55 -0400", "message": "Fixing merge conflicts"}, {"oid": "1faa42c3d120f62fa60bebc946c56cae3ba293f8", "committedDate": "2021-08-10 15:47:16 -0400", "message": "Doing some personal review cleanup"}, {"oid": "be94a7ab35307e2b345d967cbd0163417ea9802d", "committedDate": "2021-08-12 21:28:51 -0400", "message": "bulletproofing for a couple of individual unit actions"}, {"oid": "01f8aa5c3d90cd2d8b553c5c8c73a336af524e8b", "committedDate": "2021-08-13 22:07:09 -0400", "message": "2798: Adding total XP earnings tracking"}, {"oid": "771c3107183e31fa9da9b2e417a6fc0d0b673a48", "committedDate": "2021-08-14 00:07:09 -0400", "message": "274: Moving Era definitions to a file"}, {"oid": "795d3aba4875a600dd0a6ec91a10cb7e90814c6c", "committedDate": "2021-08-18 12:48:20 -0400", "message": "Removing Person's Campaign save and switching to full pass-by-reference for Campaign"}, {"oid": "4e80bdad1f20ebfb53cfe559ade8975594f3d362", "committedDate": "2021-08-21 12:12:11 -0400", "message": "2754: Properly clearing Narc and iNarc Flags during scenario resolution"}, {"oid": "ed447da30212105694957e35687f1bfedd6b56b0", "committedDate": "2021-08-24 13:11:20 -0400", "message": "Merge pull request #2805 from Windchild292/dev_Windchild_274"}, {"oid": "7120d3b0aa69ebd282e855a4b2a47bda4697ba78", "committedDate": "2021-08-24 13:14:09 -0400", "message": "Merge pull request #2793 from Windchild292/dev_Windchild_TransactionType"}, {"oid": "9e7480b600f9290c00f5f082dd91201999d12f42", "committedDate": "2021-08-24 13:14:19 -0400", "message": "Merge pull request #2804 from Windchild292/dev_Windchild_2798"}, {"oid": "70aa4b94439c59d6e5de9d6191a3c0a02365e644", "committedDate": "2021-08-24 13:39:42 -0400", "message": "Fixing merge conflicts"}, {"oid": "0e72a8bc212f26b8d9b7bb789b0c1f84f1426c78", "committedDate": "2021-08-24 13:42:42 -0400", "message": "Fixing merge conflicts"}, {"oid": "3a01897bb20c8be27823164f09aca9af1aa3360d", "committedDate": "2021-08-24 13:53:59 -0400", "message": "Fixing merge conflicts"}, {"oid": "bacc8f3e733e0cd4cc0fa629ced5d3b5079abc76", "committedDate": "2021-08-24 17:23:41 -0400", "message": "Fixing merge conflicts"}, {"oid": "e273d7035001140a977ebe3299d17602ef52d498", "committedDate": "2021-08-28 17:37:23 -0400", "message": "Fixing merge conflicts"}, {"oid": "59fca0be576b219f25123793a2118255168d1c03", "committedDate": "2021-08-29 11:15:40 -0400", "message": "Modularized Marriage"}, {"oid": "6a48665a09b5cfd3b2309975077163fae687c39e", "committedDate": "2021-08-29 14:41:32 -0400", "message": "Adding creation dialog and bugfixing"}, {"oid": "0a89d7421946ba75d7d926af996b27e9e994a911", "committedDate": "2021-08-31 14:50:25 -0400", "message": "Fixing merge conflicts"}, {"oid": "0f4e17188d8360baf639cbc66dd29da85336be81", "committedDate": "2021-08-31 15:28:05 -0400", "message": "Applying changes from personal review"}, {"oid": "bd9dded105bfbfdf64e7b10e2059f2633326c113", "committedDate": "2021-08-31 15:39:04 -0400", "message": "Swapping to weighted double map"}, {"oid": "5eaf88579bd60bfee3c39a936a9d647a4eb1de4f", "committedDate": "2021-08-31 16:45:21 -0400", "message": "Reworking to use random origin options instead of the internally stored values"}, {"oid": "bbccfa2dcef0be4fbb07cd3af6cdbd15d7ced036", "committedDate": "2021-08-31 18:09:33 -0400", "message": "Missed two cases"}, {"oid": "7acc107b13f019250d4c17ee0b034a3aa263f56b", "committedDate": "2021-09-22 13:23:13 -0400", "message": "Removing MekHQ's version by swapping to a standardized suite version"}, {"oid": "f0a07bfbd15d93ff86dda49a32e0c489ca590a8c", "committedDate": "2021-09-22 17:45:34 -0400", "message": "Fixing merge conflicts"}, {"oid": "673baa71af916391d268ede436174881a85b7340", "committedDate": "2021-09-23 20:01:05 -0400", "message": "Adding the ability to automatically have the Operational Status indicator be determined on a new day"}, {"oid": "18f49cd8c6ba3721e84dce0b606a346b242cb49c", "committedDate": "2021-09-25 10:56:33 -0400", "message": "Moving training XP assignment to AtB new day processing"}, {"oid": "932423c6da7f04b29d61df88c014f5e432356eae", "committedDate": "2021-09-25 17:10:11 -0400", "message": "Standardizing and simplifying Campaign::getTargetForAcquisitioncalls"}, {"oid": "29c1cae15f03b025f7c6f4a4acdee0a86082eae8", "committedDate": "2021-09-25 17:12:00 -0400", "message": "2567: AtB Part Procurement uses proper campaign option"}, {"oid": "e1c6be34a128676429850de67af7a3c3e1d31c48", "committedDate": "2021-09-25 17:47:32 -0400", "message": "Fixing the active checks and removing the AtB casts"}, {"oid": "0527903721699cf7e73e7000ebc0db049c96529d", "committedDate": "2021-09-25 17:48:18 -0400", "message": "Removing testing logging"}, {"oid": "6dc414e21f3f3a8bf95c7059b83c0c34ced93e61", "committedDate": "2021-09-28 22:10:41 -0400", "message": "Merge pull request #2888 from Windchild292/dev_Windchild_2567"}, {"oid": "1065b3bc8de9084f48208d2ca865ce58ac8b3c41", "committedDate": "2021-09-28 22:29:59 -0400", "message": "Fixing merge conflicts"}, {"oid": "e55c3ca107c0d4a68d05b67ffa95825ee33af974", "committedDate": "2021-09-28 22:33:50 -0400", "message": "Fixing merge conflicts"}, {"oid": "6e5bfd3fe778c2db9847358b2bde358a61106707", "committedDate": "2021-09-28 22:38:51 -0400", "message": "Fixing merge conflicts"}, {"oid": "4fdc8e401f17fac7995037b1852f1ce2353c8e3f", "committedDate": "2021-09-28 22:48:35 -0400", "message": "Fixing merge conflicts"}, {"oid": "6f6fbddc710af1a588c433c779edd75f638a3c9d", "committedDate": "2021-10-01 10:01:00 -0400", "message": "Merge pull request #2880 from Windchild292/dev_Windchild_Version"}, {"oid": "901e499a75807e3ed64c36d0fcb8e1b024787c95", "committedDate": "2021-10-01 22:06:56 -0400", "message": "Fixing merge conflicts"}, {"oid": "b69522079e9a04b394864bbc4e43ff4c4e125cca", "committedDate": "2021-10-01 22:17:46 -0400", "message": "Fixing merge conflicts"}, {"oid": "84837c3610f8109aeb1985357178de229560de80", "committedDate": "2021-10-01 22:50:02 -0400", "message": "Fixing merge conflicts"}, {"oid": "4971437339838aa89b83785c6e9572074c95d245", "committedDate": "2021-10-02 23:21:37 -0400", "message": "Fixing merge conflicts"}, {"oid": "ed006b48eaf1c0580c2480f4f0000a3c1aed8361", "committedDate": "2021-10-10 00:10:05 -0400", "message": "Adding prisoner and clanner options for procreation"}, {"oid": "54e588d2cafddcab2f585c8ed5d6ee3c829d155f", "committedDate": "2021-10-10 01:00:00 -0400", "message": "Fixing merge conflicts"}, {"oid": "f211d8a677daa66c3a88f444de02a072ea5ab8a0", "committedDate": "2021-10-11 09:36:37 -0400", "message": "Fixing merge conflicts"}, {"oid": "3ee602c2e85defa1c3b05d08d609340d4b194883", "committedDate": "2021-10-11 09:37:52 -0400", "message": "Merge branch 'master' into dev_Windchild_2654"}, {"oid": "a30ac65fc45c76f1c1f6df0d70fa356aa41ef438", "committedDate": "2021-10-11 09:38:33 -0400", "message": "Merge branch 'master' into dev_Windchild_PersonnelRandomization"}, {"oid": "6f2f688a386d187426b7c92d4dd391c239d1ad70", "committedDate": "2021-10-11 09:43:54 -0400", "message": "Fixing merge conflicts"}, {"oid": "125e3093d92e248b4e50bc9131ff8fdeb35c6787", "committedDate": "2021-10-11 10:22:27 -0400", "message": "Fixing merge conflicts"}, {"oid": "f8e040a424e1e8d8f886b334ce6fe78c1c697e21", "committedDate": "2021-10-11 12:17:56 -0400", "message": "Standardizing canMarry and adding clanner/prisoner options"}, {"oid": "358b2e9bb76ee69f0aef232dc656af54a6b78e75", "committedDate": "2021-10-11 16:26:24 -0400", "message": "Creating a divorce module, with a daily percentage-based random divorce setup"}, {"oid": "8ecba07dd7693346338cbae98b207e87e1cfb844", "committedDate": "2021-10-14 20:08:46 -0400", "message": "Fixing merge conflicts"}, {"oid": "accf7255b1c83499aa1f79f5074b2bc44e3619f8", "committedDate": "2021-10-17 18:16:46 -0400", "message": "Fixing merge conflicts"}, {"oid": "4e4ae81eb8a7a923cdf8688c645023ce047c7d99", "committedDate": "2021-10-17 18:53:40 -0400", "message": "Fixing merge conflicts"}, {"oid": "08ec6ef40e59afa4cba88228bc29dba9745de098", "committedDate": "2021-10-18 15:52:01 -0400", "message": "Fixing merge conflicts"}, {"oid": "c67d7074f17378d88774a553e3fca273bc047705", "committedDate": "2021-10-18 15:52:40 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_PersonCampaign"}, {"oid": "1a7109d4439d3900ff897d0c9ba7091e88960ead", "committedDate": "2021-10-18 16:06:05 -0400", "message": "Fixing merge conflicts"}, {"oid": "2d589706bc9112203a6043adf8d7aed7d0f22301", "committedDate": "2021-10-18 16:07:21 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_ExpandedDeathStatus"}, {"oid": "84e2f57820e6fac4c9604e8fdf4c370849b21914", "committedDate": "2021-10-18 17:26:22 -0400", "message": "Fixing merge conflicts"}, {"oid": "033d776c732e66ad776357bee1afe597f5e77b20", "committedDate": "2021-10-30 15:59:59 -0400", "message": "Fixing merge conflicts"}, {"oid": "4e45f1a0a0bb1a3a900ecde01c8feab5a6e48329", "committedDate": "2021-11-01 17:31:14 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_AtBCompanyGeneration"}, {"oid": "258f3a3b0b352aa70b42b8c2034ebd6ab90d96ca", "committedDate": "2021-11-01 18:20:49 -0400", "message": "Fixing merge conflicts"}, {"oid": "7eea9a399d3d7400b1f2b94f6d772ad5416a0645", "committedDate": "2021-11-01 21:48:44 -0400", "message": "Fixing merge conflicts"}, {"oid": "3e4bca7cdb006005bd034f9621872250d0e96dbb", "committedDate": "2021-11-01 21:52:24 -0400", "message": "fixing merge conflicts"}, {"oid": "ab6c1c01bfb4498a16c3b9f69c18c4903900de83", "committedDate": "2021-11-01 22:00:44 -0400", "message": "Fixing merge conflicts"}, {"oid": "1b1b0f68f52f9d821ddc10f663a44fe6d72462cd", "committedDate": "2021-11-01 22:03:27 -0400", "message": "Fixing merge conflicts"}, {"oid": "f1ce41fa694124c762338f78fb45a139926db77c", "committedDate": "2021-11-01 22:20:22 -0400", "message": "Fixing merge conflicts"}, {"oid": "01163b1f4fae088ba39a2f1c1145d5653f71b9e8", "committedDate": "2021-11-01 22:22:46 -0400", "message": "Fixing merge conflicts"}, {"oid": "21600c478569436ab215402bbca4bbbeced841a8", "committedDate": "2021-11-03 20:59:54 -0400", "message": "Adding localization to all MekHQ resource maps"}, {"oid": "1a5ba2fa871c8629e951d371c2ee96cc29fa8f93", "committedDate": "2021-11-07 13:49:58 -0500", "message": "Fixing merge conflicts"}, {"oid": "a851f6c71e5a1f825a840c64be2bae6da2a77eaf", "committedDate": "2021-11-07 14:05:08 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_PersonnelRandomization"}, {"oid": "65eb27ddf74244265359db14e66c097eb2299df0", "committedDate": "2021-11-07 14:50:33 -0500", "message": "Fixing merge conflicts"}, {"oid": "1b57359b3037938ef8291d96de3449013c82b9a4", "committedDate": "2021-11-09 09:23:24 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_ForceIconRework"}, {"oid": "7e997be9838621bdc8bbecbcdbc908a7580060ed", "committedDate": "2021-11-12 21:17:13 -0500", "message": "Removing unused tech functionality"}, {"oid": "dbfb302ab8e895c2e37a41f10415f634d1039c4c", "committedDate": "2021-11-21 18:45:43 -0500", "message": "Expanding Finances newDay"}, {"oid": "b6ffe21c8b07b35f599a2f6bd11da05d7961af0d", "committedDate": "2021-11-23 10:10:34 -0500", "message": "Merge pull request #2028 from Windchild292/dev_Windchild_476"}, {"oid": "e51f331c5e7b430e3f560fee9ad58995fb944704", "committedDate": "2021-11-23 17:35:05 -0500", "message": "2962: AtB Campaigns Now Properly Load with Automatic or Tech Acquisition Skills"}, {"oid": "2f445541d15fd465279057131bf48ef28d9bd162", "committedDate": "2021-11-23 18:55:05 -0500", "message": "Fixing merge conflicts"}, {"oid": "c06560e49182859791bab98148ba76507f26612b", "committedDate": "2021-11-27 14:04:02 -0500", "message": "Merge pull request #2966 from Windchild292/dev_Windchild_2962"}, {"oid": "69f79e10f44976d90e36ca3acb5256b6dfc91548", "committedDate": "2021-11-27 18:49:28 -0500", "message": "Implementing the retirement and dependent stopgap options and option updates"}, {"oid": "135cb6d188296ed5db33602f9d65eacbedfb2fa3", "committedDate": "2021-11-27 22:07:45 -0500", "message": "Finishing dependent options and starting on retirement setup"}, {"oid": "a831b4695fd5ea8b1679db9068c85d9ac235f5e0", "committedDate": "2021-11-27 22:57:22 -0500", "message": "Starting to implement the new options"}, {"oid": "bfaed6eccd3257e67b05ad33dadd14cfd98ce560", "committedDate": "2021-12-02 18:05:59 -0500", "message": "Fixing merge conflicts"}, {"oid": "a31998dda25a2856241c10aba4f25a3e8975fc28", "committedDate": "2021-12-02 19:47:30 -0500", "message": "Fixing merge conflicts"}, {"oid": "8ae7fffc1b4afde219beaf122edf562b69a810d4", "committedDate": "2021-12-02 19:49:14 -0500", "message": "Fixing merge conflicts"}, {"oid": "c76c94e6cd4abe6e9f39bb57f5376dcfcf8c29ca", "committedDate": "2021-12-02 19:59:15 -0500", "message": "Fixing merge conflicts"}, {"oid": "8ad7114a3a34794b2d77e3d201f63d2c646a9361", "committedDate": "2021-12-04 14:45:10 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_RetirementDependentStopgaps"}, {"oid": "71c75c8296ecc0c857b75d51ff1c7984efa7e9aa", "committedDate": "2021-12-04 15:03:37 -0500", "message": "Finishing the internal code for the retirement and dependent stopgaps"}, {"oid": "4fb12af6ec7c26ac06d9a498016211a5e3889240", "committedDate": "2021-12-04 15:13:25 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_AssetTerms"}, {"oid": "ea8d42d1c280d499d207c0da43feb77a06b6dcba", "committedDate": "2021-12-04 16:10:22 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_MHQLocalization"}, {"oid": "97af694c5485ad1dbf5900228d3b5e6de405cb02", "committedDate": "2021-12-11 17:07:11 -0500", "message": "MekHQ Log4j 2 Implementation"}, {"oid": "122363fd9f8d850c11781b0ed50335433bcf418b", "committedDate": "2021-12-17 20:08:30 -0500", "message": "Fixing merge conflicts"}, {"oid": "b781d1a8406d5cfec346343463484ac519d1ee9a", "committedDate": "2021-12-20 13:20:34 -0500", "message": "Fixing merge conflicts"}, {"oid": "1bc3ac4e6576a7fa06103828a729d010f6a7b3ef", "committedDate": "2021-12-20 15:37:16 -0500", "message": "Actually print the stacktrace for individual exceptions"}, {"oid": "6e868f9400798d8cc8b61055b96de07531af1f34", "committedDate": "2021-12-20 16:21:24 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_RetirementDependentStopgaps"}, {"oid": "056f0d1e618651857b043280dbe226e80eb91d7a", "committedDate": "2021-12-20 16:27:18 -0500", "message": "Fixing merge conflicts"}, {"oid": "0e5e7675cc3b0606c97f5060a8fd53a69a90641e", "committedDate": "2021-12-20 16:31:40 -0500", "message": "Fixing merge conflicts"}, {"oid": "fb5e5a836a6100119706df72ee695325d77cf5af", "committedDate": "2021-12-20 16:36:02 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_PersonnelRandomization"}, {"oid": "30d7086d1389ed93b333b5eb614a4777498bd826", "committedDate": "2021-12-20 16:41:54 -0500", "message": "Fixing merge conflicts"}, {"oid": "c28b63e7005b99a3f80a9cb73b0255b8a2402db2", "committedDate": "2021-12-20 16:45:19 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_PersonCampaign"}, {"oid": "89a7c65022eabe2af8f5efaabaf9296aa79bde74", "committedDate": "2021-12-21 15:01:54 -0500", "message": "Fixing merge conflicts"}, {"oid": "23519608cf466cb86aef259568ba2aa8ddeb098a", "committedDate": "2021-12-21 16:00:33 -0500", "message": "Fixing merge conflicts"}, {"oid": "bbbe2057261145f9f51c2ac129b4cca3bcd2ccf6", "committedDate": "2021-12-21 16:04:48 -0500", "message": "Fixing merge conflicts"}, {"oid": "b65b9f1efdb52692da51596d934b6360533b2bf7", "committedDate": "2021-12-21 16:23:03 -0500", "message": "Fixing merge conflicts"}, {"oid": "a253bfba5d4bc811ccd0c6c17e659dff178fbbb0", "committedDate": "2021-12-21 16:30:49 -0500", "message": "Fixing merge conflicts"}, {"oid": "0caff4e79e691213a2621323b94dfadfa73c9060", "committedDate": "2021-12-22 08:16:56 -0500", "message": "Fixing merge conflicts"}, {"oid": "a44cee38dbe9808a000178e575eb90d60a401175", "committedDate": "2021-12-23 12:26:57 -0500", "message": "Merge pull request #3015 from MegaMek/dev_Windchild_3326"}, {"oid": "ea6a179e03d1519afc3236abe50978edc43fc3d8", "committedDate": "2021-12-23 12:32:38 -0500", "message": "Merge pull request #2812 from Windchild292/dev_Windchild_PersonCampaign"}, {"oid": "d88588cf01f272577d96e1ff2a27c7286def7db9", "committedDate": "2021-12-23 21:04:47 -0500", "message": "Fixing merge conflicts"}, {"oid": "94ca7dff3bd09ef2fbb82e5d3ce0a5dccab335a8", "committedDate": "2021-12-28 18:08:30 -0500", "message": "Fixing merge conflicts"}, {"oid": "5089ba272b3ca25ab52ca4fcc1bef3766377f2ec", "committedDate": "2022-01-08 13:22:56 -0500", "message": "Fixing merge conflicts"}, {"oid": "375a9524c6382f5214c980bf8ad8b07a22f75120", "committedDate": "2022-01-08 13:28:11 -0500", "message": "Fixing merge conflicts"}, {"oid": "0e0aa7780df25016999f813dc36110599ee1b380", "committedDate": "2022-01-08 13:40:54 -0500", "message": "Fixing merge conflicts, round 2"}, {"oid": "5cc8ac688c67e1e1817c0cbb4a78eaf7dd0a477b", "committedDate": "2022-01-08 14:03:23 -0500", "message": "Fixing merge conflicts"}, {"oid": "eb7c6c828694fb624746168dbb4c35b1289f6e11", "committedDate": "2022-01-08 17:22:10 -0500", "message": "Fixing merge conflicts"}, {"oid": "dcb18ce61944010cc634325d3f46ccaf907758be", "committedDate": "2022-01-08 18:01:56 -0500", "message": "Cleaning up a bit of person creation"}, {"oid": "4d86865e1498a1312a21b91323c33d18f33a8dc9", "committedDate": "2022-01-09 11:12:58 -0500", "message": "Adding missing nullable tag and fixing missing null handling for faction selector"}, {"oid": "6023dd377efcb7802f6c905de61231ec50fee675", "committedDate": "2022-01-09 11:48:57 -0500", "message": "Missed that a null faction is fine for planet generation"}, {"oid": "4bddfb6f0d3906ed96120594d84d4e476e42d971", "committedDate": "2022-01-19 17:09:56 -0500", "message": "Tearing out MekHQ/src/mekhq/MekHqXmlSerializable.java"}, {"oid": "cc823a078ddc1a8924d1e2c02e93375a6b27d327", "committedDate": "2022-01-19 19:19:33 -0500", "message": "Removing all serialVersionUID uses in MekHQ"}, {"oid": "c9ac45226f5852f8bb76af479c9d962105bbbed7", "committedDate": "2022-01-19 20:02:33 -0500", "message": "Mass spacing fixes"}, {"oid": "be1cfbd484c6adc1c8f66578c5bfe94b39047b3c", "committedDate": "2022-01-20 09:59:55 -0500", "message": "Applying changes from initial personal review"}, {"oid": "2c71e119c210a9c95690eae19a0cdab5beb69bd6", "committedDate": "2022-01-20 10:30:23 -0500", "message": "Updating everything using final PrintWriter so that they're up to date, so I have a nice way to track what's updated and what is not"}, {"oid": "bc2c2966614f17d153b03c3087b46c1a4b44b969", "committedDate": "2022-01-21 19:03:24 -0500", "message": "SuiteOptions: Naming standardization and finishing initial setup"}, {"oid": "f3b9f5b924748acfd1ad404aed3ae99e4382b885", "committedDate": "2022-01-24 12:24:25 -0500", "message": "Fixing merge conflicts"}, {"oid": "e8395d1d642870050d705d4fac2a0df255cea722", "committedDate": "2022-01-24 12:28:09 -0500", "message": "Fixing merge conflicts"}, {"oid": "d91ac31cb62f0842eb972ad045bdab45c9c3f814", "committedDate": "2022-01-25 17:42:20 -0500", "message": "PIND Migration"}, {"oid": "9fac7b8c6dfc3095299a8f2b2698099818ff5f0a", "committedDate": "2022-01-26 20:37:16 -0500", "message": "Fixing merge conflicts"}, {"oid": "68ef07dd4c65a1c3d546c2da6f01575f3f3c3ad6", "committedDate": "2022-01-26 20:47:30 -0500", "message": "Fixing merge conflicts"}, {"oid": "4d88d0c53f0069b883caece02ec49678aeeeef7e", "committedDate": "2022-02-01 14:20:52 -0500", "message": "Fixing merge conflicts"}, {"oid": "add1e0e345d4bfcfbff554d48b42166703dc9742", "committedDate": "2022-02-03 13:52:45 -0500", "message": "Fixing merge conflicts"}, {"oid": "01633b8cfb55eee9c3240bff79e0122fbc54386b", "committedDate": "2022-02-13 13:10:41 -0500", "message": "Fixing MHQ's Javadoc Build"}, {"oid": "adeb4ea20e6a8eeb365e6887e79ce6a4dd8b18dd", "committedDate": "2022-02-22 19:16:53 -0500", "message": "Initial code for creating standardized code utilities"}, {"oid": "483ec96cd157a857a1e7155be64dc5ef7c72346a", "committedDate": "2022-02-24 20:32:12 -0500", "message": "Migrating a bunch of MHQ utility code to MM"}, {"oid": "88ce57b5171b2d38c738446af4ab779e6d17ae7f", "committedDate": "2022-02-28 20:23:04 -0500", "message": "3146: Properly handling null force to null force reassignment messages"}, {"oid": "c94fc298803b71e6ac75eb935cabba921a8a6571", "committedDate": "2022-03-06 11:49:08 -0500", "message": "Fixing merge conflicts"}, {"oid": "d4b96fd69deddff97744565c43e2d56b8e31c53f", "committedDate": "2022-03-07 17:19:54 -0500", "message": "Fixing two accidentally kept negations for Random Dependents Removal"}, {"oid": "48f8d58a75de4c6a5c2868f65554dad4d3a14fd5", "committedDate": "2022-03-09 10:01:16 -0500", "message": "Merge pull request #3148 from Windchild292/dev_Windchild_3146"}, {"oid": "1c307bc93de3a536ba17dd566a9fd49bd0046c8e", "committedDate": "2022-03-21 18:22:40 -0400", "message": "Fixing a bunch of spacing readability issues"}, {"oid": "913c01672fe040a25b473e8142805d2ff4ebfa1b", "committedDate": "2022-03-22 18:24:32 -0400", "message": "Modernizing Lambdas to Method References"}, {"oid": "cc400b9fa7512b6b91ed8a8f434f365b442306a8", "committedDate": "2022-03-22 23:54:28 -0400", "message": "Modernize List::size to List::isEmpty and String::isEmpty to String::isBlank"}, {"oid": "4699f3e482938fb8c322f1daf1bc3b42d78c2a64", "committedDate": "2022-03-28 22:35:03 -0400", "message": "Fixing unused imports"}, {"oid": "494b38fcedcda31bef2e6f701152a47ce1b0e397", "committedDate": "2022-04-11 00:16:20 -0400", "message": "Issue #3196: Fixing Remove Unit NPE"}, {"oid": "4e863ffcf0393e88ebb25b76dd314d994b2cfad5", "committedDate": "2022-04-12 17:18:21 -0400", "message": "Death Module: Initial Commit For the New Setup"}, {"oid": "2e8d0c32fa5c09c862fb6c5625a58d206b70ba34", "committedDate": "2022-04-12 18:20:50 -0400", "message": "Cleaning up and modernizing the death code"}, {"oid": "be00026349d450b7f2fb262f11d161ca249c5ab5", "committedDate": "2022-04-17 21:14:46 -0400", "message": "Standardizing Personnel Flags into their own setup instead of multiple previous setups"}, {"oid": "114c9ef6cbeb045e3cc88716964526ee70372408", "committedDate": "2022-05-04 10:10:43 -0400", "message": "3260: Clear Makeshift Clubs Upon Return To MekHQ"}, {"oid": "e0f4dd9d34946716a517c0b42401b33740c51f30", "committedDate": "2022-05-06 19:58:04 -0400", "message": "Renaming the civilian role check to isCivilian, and adding missing logging for a civilian error"}, {"oid": "5b35da02f167e0d577e779b21dfd3cbd2110f92b", "committedDate": "2022-05-06 22:48:48 -0400", "message": "Merge pull request #3266 from Windchild292/dev_Windchild_RetirementDependentOrNoneLogging"}, {"oid": "c6db6046da0de4e7d40d7ac930a453d2805f6a92", "committedDate": "2022-05-10 18:34:57 -0400", "message": "Merge branch 'MegaMek:master' into dev_Windchild_AssetTerms"}, {"oid": "6b720cfa833458c385546a054b762d2745c37ce1", "committedDate": "2022-05-14 10:11:35 -0400", "message": "Fixing method name"}, {"oid": "72a352ee60bdec3467fa07665ed9753cc399b6f9", "committedDate": "2022-05-15 12:41:06 -0400", "message": "Swapping MekHQ to JUnit 5"}, {"oid": "0a2050177f55c5540d898835cfd48e4f976bb4cb", "committedDate": "2022-05-25 16:54:44 -0400", "message": "Modernizing finances XML read and write"}, {"oid": "8b34d18aa825a1416df7b1a8ecb2bb898cea1026", "committedDate": "2022-05-25 18:27:34 -0400", "message": "Renaming MekHqXmlXmlUtil to utilities/MHQXMLUtility"}, {"oid": "3c19a5aba0df7a2035e7a81e61a8b5543cb13a9c", "committedDate": "2022-05-25 18:36:42 -0400", "message": "Fixing merge conflicts"}, {"oid": "4a84ac8700a2d5bf7624dd25d4c77cff34478500", "committedDate": "2022-05-25 23:32:29 -0400", "message": "Merge branch 'master' into dev_Windchild_CurrentLocationXML"}, {"oid": "32aaaac33b8e53a355c373879ee4de9f91747c39", "committedDate": "2022-05-26 07:16:40 -0400", "message": "Merge branch 'master' into dev_Windchild_PersonFlags"}, {"oid": "9472637ad3cb3c27cba2c318c5ccdf022ca56d86", "committedDate": "2022-05-26 08:10:57 -0400", "message": "Fixing merge conflicts"}, {"oid": "f35709d1278c76d1ea7c10485071e0097b1aebf0", "committedDate": "2022-05-26 08:39:19 -0400", "message": "Switching to a single retirement report"}, {"oid": "b40d7b0e6bd9003de8df60cc732b5e195741d8aa", "committedDate": "2022-05-30 16:37:32 -0400", "message": "Merge pull request #3234 from Windchild292/dev_Windchild_PersonFlags"}, {"oid": "f7e43611ee653404079cc2fdced92c083c35362f", "committedDate": "2022-06-01 13:26:16 -0400", "message": "More swaps to using getActualValue"}, {"oid": "76223b1f01db0e020c9069b9c361d7af9f174e6a", "committedDate": "2022-06-01 17:49:36 -0400", "message": "Merge remote-tracking branch 'origin/master' into dev_Windchild_PartPriceApplications"}, {"oid": "e7755fbeddc7d00cc126c3281f4be93685eb83fa", "committedDate": "2022-06-08 20:05:45 -0400", "message": "Ignore End Date for Scenario Assignment to Active Contracts"}, {"oid": "c17408bc1409591bdb76664788c6ad4f55a5d813", "committedDate": "2022-06-18 17:51:05 -0400", "message": "Campaign::getPerson : Adding Nullable Annotation"}, {"oid": "f2abd2addef945880eefcf2a11ccfb5eec610ea3", "committedDate": "2022-06-18 17:59:08 -0400", "message": "Renaming clearGenealogy to clearGenealogyLinks (as that's what it does), and more test progress"}, {"oid": "39ac9b544233876ab9e4a6f914abaf549c76aded", "committedDate": "2022-06-20 22:59:32 -0400", "message": "Bunch of enum cleanups"}, {"oid": "a576a51fb82bbc625198e50a04894cd7749bed1c", "committedDate": "2022-06-21 16:25:02 -0400", "message": "Lots more tests, largely simple ones"}, {"oid": "0f60e6bba5ebdf538b335609e5bfd7817f614393", "committedDate": "2022-06-23 16:17:56 -0400", "message": "3372: Fixing Campaign Loan Report Issues"}, {"oid": "7441a156d93c5a7fb5dab7f9a38a5f87f6321f14", "committedDate": "2022-06-24 22:32:50 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_GenealogyTest"}, {"oid": "f5bb76bdee8f7d7aba18dd83f2d903036ea1f68b", "committedDate": "2022-06-27 13:25:57 -0400", "message": "Merge pull request #3378 from Windchild292/dev_Windchild_3372"}, {"oid": "0948c47088632642d946b7a5eec4eb595a21ac76", "committedDate": "2022-06-29 20:04:53 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_GenealogyTest"}, {"oid": "505318be000041c18ae226d4e1521dc527fc7133", "committedDate": "2022-07-14 17:41:42 -0400", "message": "Adding market enum testing"}, {"oid": "8d3060de0fe1375a8186d41be98a059652a81bed", "committedDate": "2022-07-31 00:15:10 -0400", "message": "add remove stratcon scenario option"}, {"oid": "9d2ebd8a76bc41afdf298da710ad80e1e4b80c0a", "committedDate": "2022-08-02 19:49:23 -0400", "message": "Checking this"}, {"oid": "803755f3d14a7ba3e66bb1e6364d6c4220bac841", "committedDate": "2022-08-03 20:51:52 -0400", "message": "Properly disabling the random tests"}, {"oid": "f79a61c91b06b467d1bbed4dfeaa36f97fd755e3", "committedDate": "2022-08-04 11:12:44 -0400", "message": "Using correct collector"}, {"oid": "4b3952367635a7620bddb96a9e81a7f1a97a2219", "committedDate": "2022-11-15 14:07:43 -0500", "message": "Removing duplicated name generation info from the campaign file"}, {"oid": "5213209bddb612458226cdfa7561a7220f8b3b67", "committedDate": "2022-11-15 15:54:47 -0500", "message": "Fixing deprecated XML utility uses and fixing indentation issues for parts"}, {"oid": "53e7b27c2173373019055e800950173ed7eb20df", "committedDate": "2022-11-15 19:05:53 -0500", "message": "Company Generator: Faction Options"}, {"oid": "230c025b083606834270681ce668a836c76dfc1b", "committedDate": "2022-11-22 16:25:51 -0500", "message": "3489: Adding Small Craft and DropShip Transport Support"}, {"oid": "b5349ccb7e3e9c0345d6685bb9a76a53afed8bdc", "committedDate": "2022-11-26 08:40:31 -0500", "message": "Merge pull request #3510 from MegaMek/dev_Windchild_3489"}, {"oid": "b3f06f70d94e83ed6fad6368cbe5df5d35c20296", "committedDate": "2022-11-26 11:38:42 -0500", "message": "Finishing adding the new option as a selection"}, {"oid": "1cb49fa503593c75f3bee4ebc6cf2574faec13de", "committedDate": "2022-11-26 11:49:33 -0500", "message": "Merge branch 'MegaMek:master' into dev_Windchild_CompanyGeneratorFactionGeneration"}, {"oid": "b47a12937f6b979925f82cb31bb6f2f33cf789e5", "committedDate": "2022-12-05 15:34:26 -0500", "message": "Scenarios are now Scenarios, not Missions"}, {"oid": "b57de2f09b47ffa8da9ab0bd7bba356d1e2e235c", "committedDate": "2022-12-08 23:00:17 -0500", "message": "Merge pull request #3501 from Windchild292/dev_Windchild_DeprecatedXML"}, {"oid": "ade20da3d68431198324cbad4bd7cfcc2fd1ef66", "committedDate": "2022-12-11 23:37:05 -0500", "message": "Merge pull request #3520 from Windchild292/dev_Windchild_ScenariosAreScenarios"}, {"oid": "a6d88033b71b9291e4774a5cbc3e8f577287a523", "committedDate": "2022-12-16 22:33:19 -0500", "message": "Tearing out EncodeControl"}, {"oid": "cec1df762e06d6e3e6c4c437c0d0a25892f44a7d", "committedDate": "2022-12-29 13:15:59 -0500", "message": "Fixing Option Naming Typos"}, {"oid": "e3e1ce62490858d93d695b7e7f8bf17dca068936", "committedDate": "2022-12-29 14:30:54 -0500", "message": "Standardize option naming"}, {"oid": "d385d0bc8fd91a75c631f546272abbff8e07311a", "committedDate": "2022-12-30 13:05:34 -0500", "message": "SkillLevel: Reducing SkillType::getExperienceLevelName calls"}, {"oid": "332b06c4b29e7f809e9cf0cab16a062f65544391", "committedDate": "2023-01-08 20:33:20 -0500", "message": "Yearly Retirement Nag Now Follows Campaign Options"}, {"oid": "62afc895d75aece8a3079267b20eb9e8c3de5cfc", "committedDate": "2023-01-14 16:34:36 -0500", "message": "3558: RATs are Used Outside of AtB"}, {"oid": "0e39c3c4517d5cd46e99546d8e3b3a1cea7cb30b", "committedDate": "2023-01-17 20:12:29 -0500", "message": "Merge branch 'master' into dev_Windchild_CampaignOptionsCleanup"}, {"oid": "da71474de7674e9b213472ce61b254a744c6ae5a", "committedDate": "2023-01-17 20:12:53 -0500", "message": "Merge branch 'MegaMek:master' into dev_Windchild_IsolatedSkillLevelEnumSwapovers"}, {"oid": "a328a1e42771f0c7052a7c9c1b2583134a8534f4", "committedDate": "2023-01-25 22:45:44 -0500", "message": "Campaign Ops Unit Rating: Properly Calculate Personnel Numbers"}, {"oid": "5ad55c0aa2dd0422f1e05d2704860f7674936984", "committedDate": "2023-01-25 23:11:45 -0500", "message": "Applying changes from testing and further rule reading"}, {"oid": "8fc36fbd275ffccf0ed91df60b637a5cc3135a86", "committedDate": "2023-01-29 18:24:48 -0500", "message": "Phenotype Enum: Migrating Uses to Simplification Methods"}, {"oid": "a462c5436ab5bec1a54c2f652f232fdff88f7a42", "committedDate": "2023-01-29 19:28:49 -0500", "message": "Tearing out unused code and swapping to using a map"}, {"oid": "542356e26d4b14d760fa69f33f627ed2b692908b", "committedDate": "2023-02-06 21:17:17 -0500", "message": "Merge pull request #3589 from Windchild292/dev_Windchild_PhenotypeSimplificationMethods"}, {"oid": "2757b555a5a0aa6fdf73322d58173bbee7d22ba5", "committedDate": "2023-02-06 21:25:38 -0500", "message": "Merge pull request #3590 from Windchild292/dev_Windchild_UnusedSPACleanup"}, {"oid": "6784f22a192b7c650bd5be0354bc6946bfec896f", "committedDate": "2023-02-06 21:41:30 -0500", "message": "Merge pull request #3557 from Windchild292/dev_Windchild_YearlyRetirementNag"}, {"oid": "724a8333d072d631c1072fd7ccf2707efe6e2b40", "committedDate": "2023-02-07 20:56:16 -0500", "message": "Fixing merge conflicts"}, {"oid": "e0f16b480db19ce9d36290caa03be8f6be77cace", "committedDate": "2023-02-07 21:43:07 -0500", "message": "Fixing merge conflicts"}, {"oid": "8996781abfef1f08293a06ef53e3af92812a9b5d", "committedDate": "2023-02-07 22:53:45 -0500", "message": "Standardize Mass Repair Mass Salvage naming to MRMS"}, {"oid": "1ccab8e5b040389be54c4730103354fbc0f06406", "committedDate": "2023-02-18 19:25:18 +0000", "message": "3318: Add manual personnel payments that generate Finance debit"}, {"oid": "86649c7c93250458658d765a7e2007134c385c74", "committedDate": "2023-02-25 20:07:13 -0500", "message": "Some related code cleanup"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU2MzMxMg==", "url": "https://github.com/MegaMek/mekhq/pull/2123#discussion_r500563312", "body": "```suggestion\r\n        return (int) Math.round(getHangar().getUnitsStream()\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return (int)Math.round(getHangar().getUnitsStream()\n          \n          \n            \n                    return (int) Math.round(getHangar().getUnitsStream()", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">return</span> (<span class=\"pl-k\">int</span>)<span class=\"pl-smi\">Math</span><span class=\"pl-k\">.</span>round(getHangar()<span class=\"pl-k\">.</span>getUnitsStream()</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">return</span> (<span class=\"pl-k\">int</span>)<span class=\"x x-first x-last\"> </span><span class=\"pl-smi\">Math</span><span class=\"pl-k\">.</span>round(getHangar()<span class=\"pl-k\">.</span>getUnitsStream()</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "Windchild292", "createdAt": "2020-10-06T20:04:38Z", "path": "MekHQ/src/mekhq/campaign/Campaign.java", "diffHunk": "@@ -7236,117 +7172,88 @@ public void setHealingTimeOptions(int newHeal, int newNaturalHeal) {\n     }\n \n     public int getTotalMechBays() {\n-        double bays = 0;\n-        for (Unit u : getUnits()) {\n-            bays += u.getMechCapacity();\n-        }\n-        return (int)Math.round(bays);\n+        return (int)Math.round(getHangar().getUnitsStream()", "originalCommit": "02cf732d561f245a8a8d39a2b8a819cb45ac94ca", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cb64714e6e2b7d03de487c72eb18c3c09948b6c6", "changed_code": [{"header": "diff --git a/MekHQ/src/mekhq/campaign/Campaign.java b/MekHQ/src/mekhq/campaign/Campaign.java\nindex c9db948ab..4dff77b1d 100644\n--- a/MekHQ/src/mekhq/campaign/Campaign.java\n+++ b/MekHQ/src/mekhq/campaign/Campaign.java\n", "chunk": "@@ -7172,49 +7172,49 @@ public class Campaign implements Serializable, ITechManager {\n     }\n \n     public int getTotalMechBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getMechCapacity)\n             .sum());\n     }\n \n     public int getTotalASFBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getASFCapacity)\n             .sum());\n     }\n \n     public int getTotalSmallCraftBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getSmallCraftCapacity)\n             .sum());\n     }\n \n     public int getTotalBattleArmorBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getBattleArmorCapacity)\n             .sum());\n     }\n \n     public int getTotalInfantryBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getInfantryCapacity)\n             .sum());\n     }\n \n     public int getTotalHeavyVehicleBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getHeavyVehicleCapacity)\n             .sum());\n     }\n \n     public int getTotalLightVehicleBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getLightVehicleCapacity)\n             .sum());\n     }\n \n     public int getTotalProtomechBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getProtomechCapacity)\n             .sum());\n     }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "3f55aabad31fb84ff1e5af9c8caac7bd8c8999a0", "changed_code": [{"header": "diff --git a/MekHQ/src/mekhq/campaign/Campaign.java b/MekHQ/src/mekhq/campaign/Campaign.java\nindex c9db948ab..0f69d5116 100644\n--- a/MekHQ/src/mekhq/campaign/Campaign.java\n+++ b/MekHQ/src/mekhq/campaign/Campaign.java\n", "chunk": "@@ -7172,49 +7161,49 @@ public class Campaign implements Serializable, ITechManager {\n     }\n \n     public int getTotalMechBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getMechCapacity)\n             .sum());\n     }\n \n     public int getTotalASFBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getASFCapacity)\n             .sum());\n     }\n \n     public int getTotalSmallCraftBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getSmallCraftCapacity)\n             .sum());\n     }\n \n     public int getTotalBattleArmorBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getBattleArmorCapacity)\n             .sum());\n     }\n \n     public int getTotalInfantryBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getInfantryCapacity)\n             .sum());\n     }\n \n     public int getTotalHeavyVehicleBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getHeavyVehicleCapacity)\n             .sum());\n     }\n \n     public int getTotalLightVehicleBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getLightVehicleCapacity)\n             .sum());\n     }\n \n     public int getTotalProtomechBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getProtomechCapacity)\n             .sum());\n     }\n", "next_change": {"commit": "a0c1cbf9746ed9486f08ce4aa2376828e846c786", "changed_code": [{"header": "diff --git a/MekHQ/src/mekhq/campaign/Campaign.java b/MekHQ/src/mekhq/campaign/Campaign.java\nindex 0f69d5116..e49c8ce15 100644\n--- a/MekHQ/src/mekhq/campaign/Campaign.java\n+++ b/MekHQ/src/mekhq/campaign/Campaign.java\n", "chunk": "@@ -7152,97 +7101,119 @@ public class Campaign implements Serializable, ITechManager {\n             }\n         }\n     }\n-    /**\n-     * Returns our list of potential transport ships\n-     * @return\n-     */\n-    public Set<UUID> getTransportShips() {\n-        return transportShips;\n-    }\n \n     public int getTotalMechBays() {\n-        return (int) Math.round(getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getMechCapacity)\n-            .sum());\n+        double bays = 0;\n+        for (Unit u : getUnits()) {\n+            bays += u.getMechCapacity();\n+        }\n+        return (int)Math.round(bays);\n     }\n \n     public int getTotalASFBays() {\n-        return (int) Math.round(getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getASFCapacity)\n-            .sum());\n+        double bays = 0;\n+        for (Unit u : getUnits()) {\n+            bays += u.getASFCapacity();\n+        }\n+        return (int)Math.round(bays);\n     }\n \n     public int getTotalSmallCraftBays() {\n-        return (int) Math.round(getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getSmallCraftCapacity)\n-            .sum());\n+        double bays = 0;\n+        for (Unit u : getUnits()) {\n+            bays += u.getSmallCraftCapacity();\n+        }\n+        return (int)Math.round(bays);\n     }\n \n     public int getTotalBattleArmorBays() {\n-        return (int) Math.round(getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getBattleArmorCapacity)\n-            .sum());\n+        double bays = 0;\n+        for (Unit u : getUnits()) {\n+            bays += u.getBattleArmorCapacity();\n+        }\n+        return (int)Math.round(bays);\n     }\n \n     public int getTotalInfantryBays() {\n-        return (int) Math.round(getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getInfantryCapacity)\n-            .sum());\n+        double bays = 0;\n+        for (Unit u : getUnits()) {\n+            bays += u.getInfantryCapacity();\n+        }\n+        return (int)Math.round(bays);\n     }\n \n     public int getTotalHeavyVehicleBays() {\n-        return (int) Math.round(getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getHeavyVehicleCapacity)\n-            .sum());\n+        double bays = 0;\n+        for (Unit u : getUnits()) {\n+            bays += u.getHeavyVehicleCapacity();\n+        }\n+        return (int)Math.round(bays);\n     }\n \n     public int getTotalLightVehicleBays() {\n-        return (int) Math.round(getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getLightVehicleCapacity)\n-            .sum());\n+        double bays = 0;\n+        for (Unit u : getUnits()) {\n+            bays += u.getLightVehicleCapacity();\n+        }\n+        return (int)Math.round(bays);\n     }\n \n     public int getTotalProtomechBays() {\n-        return (int) Math.round(getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getProtomechCapacity)\n-            .sum());\n+        double bays = 0;\n+        for (Unit u : getUnits()) {\n+            bays += u.getProtomechCapacity();\n+        }\n+        return (int)Math.round(bays);\n     }\n \n     public int getTotalDockingCollars() {\n-        return getHangar().getUnitsStream()\n-            .filter(u -> u.getEntity() instanceof Jumpship)\n-            .mapToInt(Unit::getDocks)\n-            .sum();\n+        double collars = 0;\n+        for (Unit u : getUnits()) {\n+            if (u.getEntity() instanceof Jumpship) {\n+                collars += u.getDocks();\n+            }\n+        }\n+        return (int)Math.round(collars);\n     }\n \n     public double getTotalInsulatedCargoCapacity() {\n-        return getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getInsulatedCargoCapacity)\n-            .sum();\n+        double capacity = 0;\n+        for (Unit u : getUnits()) {\n+            capacity += u.getInsulatedCargoCapacity();\n+        }\n+        return capacity;\n     }\n \n     public double getTotalRefrigeratedCargoCapacity() {\n-        return getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getRefrigeratedCargoCapacity)\n-            .sum();\n+        double capacity = 0;\n+        for (Unit u : getUnits()) {\n+            capacity += u.getRefrigeratedCargoCapacity();\n+        }\n+        return capacity;\n     }\n \n     public double getTotalLivestockCargoCapacity() {\n-        return getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getLivestockCargoCapacity)\n-            .sum();\n+        double capacity = 0;\n+        for (Unit u : getUnits()) {\n+            capacity += u.getLivestockCargoCapacity();\n+        }\n+        return capacity;\n     }\n \n     public double getTotalLiquidCargoCapacity() {\n-        return getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getLiquidCargoCapacity)\n-            .sum();\n+        double capacity = 0;\n+        for (Unit u : getUnits()) {\n+            capacity += u.getLiquidCargoCapacity();\n+        }\n+        return capacity;\n     }\n \n     public double getTotalCargoCapacity() {\n-        return getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getCargoCapacity)\n-            .sum();\n+        double capacity = 0;\n+        for (Unit u : getUnits()) {\n+            capacity += u.getCargoCapacity();\n+        }\n+        return capacity;\n     }\n \n     // Liquid not included\n", "next_change": {"commit": "04a16de448a0c7d576a6c3c64c9d23ae08384bae", "changed_code": [{"header": "diff --git a/MekHQ/src/mekhq/campaign/Campaign.java b/MekHQ/src/mekhq/campaign/Campaign.java\nindex e49c8ce15..993f59cfe 100644\n--- a/MekHQ/src/mekhq/campaign/Campaign.java\n+++ b/MekHQ/src/mekhq/campaign/Campaign.java\n", "chunk": "@@ -7101,900 +7157,440 @@ public class Campaign implements Serializable, ITechManager {\n             }\n         }\n     }\n-\n-    public int getTotalMechBays() {\n-        double bays = 0;\n-        for (Unit u : getUnits()) {\n-            bays += u.getMechCapacity();\n-        }\n-        return (int)Math.round(bays);\n+    /**\n+     * Returns our list of potential transport ships\n+     * @return\n+     */\n+    public Set<UUID> getTransportShips() {\n+        return transportShips;\n     }\n \n-    public int getTotalASFBays() {\n-        double bays = 0;\n-        for (Unit u : getUnits()) {\n-            bays += u.getASFCapacity();\n-        }\n-        return (int)Math.round(bays);\n-    }\n+    public String getCombatPersonnelDetails() {\n+        int[] countPersonByType = new int[Person.T_NUM];\n+        int countTotal = 0;\n+        int countInjured = 0;\n+        int countMIA = 0;\n+        int countKIA = 0;\n+        int countDead = 0;\n+        int countRetired = 0;\n+        Money salary = Money.zero();\n \n-    public int getTotalSmallCraftBays() {\n-        double bays = 0;\n-        for (Unit u : getUnits()) {\n-            bays += u.getSmallCraftCapacity();\n-        }\n-        return (int)Math.round(bays);\n-    }\n+        for (Person p : getPersonnel()) {\n+            if (!p.hasPrimaryCombatRole() || !p.getPrisonerStatus().isFree()) {\n+                continue;\n+            }\n \n-    public int getTotalBattleArmorBays() {\n-        double bays = 0;\n-        for (Unit u : getUnits()) {\n-            bays += u.getBattleArmorCapacity();\n+            // Add them to the total count\n+            if (p.getStatus().isActive()) {\n+                countPersonByType[p.getPrimaryRole()]++;\n+                countTotal++;\n+                if (getCampaignOptions().useAdvancedMedical() && p.getInjuries().size() > 0) {\n+                    countInjured++;\n+                } else if (p.getHits() > 0) {\n+                    countInjured++;\n+                }\n+                salary = salary.plus(p.getSalary());\n+            } else if (p.getStatus().isRetired()) {\n+                countRetired++;\n+            } else if (p.getStatus().isMIA()) {\n+                countMIA++;\n+            } else if (p.getStatus().isKIA()) {\n+                countKIA++;\n+                countDead++;\n+            } else if (p.getStatus().isDead()) {\n+                countDead++;\n+            }\n         }\n-        return (int)Math.round(bays);\n-    }\n \n-    public int getTotalInfantryBays() {\n-        double bays = 0;\n-        for (Unit u : getUnits()) {\n-            bays += u.getInfantryCapacity();\n-        }\n-        return (int)Math.round(bays);\n-    }\n+        StringBuilder sb = new StringBuilder(\"Combat Personnel\\n\\n\");\n \n-    public int getTotalHeavyVehicleBays() {\n-        double bays = 0;\n-        for (Unit u : getUnits()) {\n-            bays += u.getHeavyVehicleCapacity();\n-        }\n-        return (int)Math.round(bays);\n-    }\n+        sb.append(String.format(\"%-30s        %4s\\n\", \"Total Combat Personnel\", countTotal));\n \n-    public int getTotalLightVehicleBays() {\n-        double bays = 0;\n-        for (Unit u : getUnits()) {\n-            bays += u.getLightVehicleCapacity();\n+        for (int i = 0; i < Person.T_NUM; i++) {\n+            if (Person.isCombatRole(i)) {\n+                sb.append(String.format(\"    %-30s    %4s\\n\",\n+                        Person.getRoleDesc(i, getFaction().isClan()), countPersonByType[i]));\n+            }\n         }\n-        return (int)Math.round(bays);\n-    }\n \n-    public int getTotalProtomechBays() {\n-        double bays = 0;\n-        for (Unit u : getUnits()) {\n-            bays += u.getProtomechCapacity();\n-        }\n-        return (int)Math.round(bays);\n+        sb.append(\"\\n\")\n+                .append(String.format(\"%-30s        %4s\\n\", \"Injured Combat Personnel\", countInjured))\n+                .append(String.format(\"%-30s        %4s\\n\", \"MIA Combat Personnel\", countMIA))\n+                .append(String.format(\"%-30s        %4s\\n\", \"KIA Combat Personnel\", countKIA))\n+                .append(String.format(\"%-30s        %4s\\n\", \"Retired Combat Personnel\", countRetired))\n+                .append(String.format(\"%-30s        %4s\\n\", \"Dead Combat Personnel\", countDead))\n+                .append(\"\\nMonthly Salary For Combat Personnel: \").append(salary.toAmountAndSymbolString());\n+\n+        return sb.toString();\n     }\n \n-    public int getTotalDockingCollars() {\n-        double collars = 0;\n-        for (Unit u : getUnits()) {\n-            if (u.getEntity() instanceof Jumpship) {\n-                collars += u.getDocks();\n+    public String getSupportPersonnelDetails() {\n+        int[] countPersonByType = new int[Person.T_NUM];\n+        int countTotal = 0;\n+        int countInjured = 0;\n+        int countMIA = 0;\n+        int countKIA = 0;\n+        int countDead = 0;\n+        int countRetired = 0;\n+        Money salary = Money.zero();\n+        int prisoners = 0;\n+        int bondsmen = 0;\n+        int dependents = 0;\n+\n+        for (Person p : getPersonnel()) {\n+            // Add them to the total count\n+            boolean primarySupport = p.hasPrimarySupportRole(false);\n+\n+            if (primarySupport && p.getPrisonerStatus().isFree() && p.getStatus().isActive()) {\n+                countPersonByType[p.getPrimaryRole()]++;\n+                countTotal++;\n+                if (p.getInjuries().size() > 0 || p.getHits() > 0) {\n+                    countInjured++;\n+                }\n+                salary = salary.plus(p.getSalary());\n+            } else if (p.getPrisonerStatus().isPrisoner() && p.getStatus().isActive()) {\n+                prisoners++;\n+                if (p.getInjuries().size() > 0 || p.getHits() > 0) {\n+                    countInjured++;\n+                }\n+            } else if (p.getPrisonerStatus().isBondsman() && p.getStatus().isActive()) {\n+                bondsmen++;\n+                if (p.getInjuries().size() > 0 || p.getHits() > 0) {\n+                    countInjured++;\n+                }\n+            } else if (primarySupport && p.getStatus().isRetired()) {\n+                countRetired++;\n+            } else if (primarySupport && p.getStatus().isMIA()) {\n+                countMIA++;\n+            } else if (primarySupport && p.getStatus().isKIA()) {\n+                countKIA++;\n+                countDead++;\n+            } else if (primarySupport && p.getStatus().isDead()) {\n+                countDead++;\n             }\n-        }\n-        return (int)Math.round(collars);\n-    }\n \n-    public double getTotalInsulatedCargoCapacity() {\n-        double capacity = 0;\n-        for (Unit u : getUnits()) {\n-            capacity += u.getInsulatedCargoCapacity();\n+            if (p.isDependent() && p.getStatus().isActive() && p.getPrisonerStatus().isFree()) {\n+                dependents++;\n+            }\n         }\n-        return capacity;\n-    }\n \n-    public double getTotalRefrigeratedCargoCapacity() {\n-        double capacity = 0;\n-        for (Unit u : getUnits()) {\n-            capacity += u.getRefrigeratedCargoCapacity();\n-        }\n-        return capacity;\n-    }\n+        StringBuilder sb = new StringBuilder(\"Support Personnel\\n\\n\");\n \n-    public double getTotalLivestockCargoCapacity() {\n-        double capacity = 0;\n-        for (Unit u : getUnits()) {\n-            capacity += u.getLivestockCargoCapacity();\n-        }\n-        return capacity;\n-    }\n+        sb.append(String.format(\"%-30s        %4s\\n\", \"Total Support Personnel\", countTotal));\n \n-    public double getTotalLiquidCargoCapacity() {\n-        double capacity = 0;\n-        for (Unit u : getUnits()) {\n-            capacity += u.getLiquidCargoCapacity();\n+        for (int i = 0; i < Person.T_NUM; i++) {\n+            if (Person.isSupportRole(i)) {\n+                sb.append(String.format(\"    %-30s    %4s\\n\",\n+                        Person.getRoleDesc(i, getFaction().isClan()), countPersonByType[i]));\n+            }\n         }\n-        return capacity;\n-    }\n \n-    public double getTotalCargoCapacity() {\n-        double capacity = 0;\n-        for (Unit u : getUnits()) {\n-            capacity += u.getCargoCapacity();\n-        }\n-        return capacity;\n-    }\n-\n-    // Liquid not included\n-    public double getTotalCombinedCargoCapacity() {\n-        return getTotalCargoCapacity() + getTotalLivestockCargoCapacity()\n-                + getTotalInsulatedCargoCapacity() + getTotalRefrigeratedCargoCapacity();\n-    }\n-\n-    public int getNumberOfUnitsByType(long type) {\n-        return getNumberOfUnitsByType(type, false, false);\n-    }\n+        sb.append(\"\\n\")\n+                .append(String.format(\"%-30s        %4s\\n\", \"Injured Support Personnel\", countInjured))\n+                .append(String.format(\"%-30s        %4s\\n\", \"MIA Support Personnel\", countMIA))\n+                .append(String.format(\"%-30s        %4s\\n\", \"KIA Support Personnel\", countKIA))\n+                .append(String.format(\"%-30s        %4s\\n\", \"Retired Support Personnel\", countRetired))\n+                .append(String.format(\"%-30s        %4s\\n\", \"Dead Support Personnel\", countDead))\n+                .append(\"\\nMonthly Salary For Support Personnel: \").append(salary.toAmountAndSymbolString())\n+                .append(String.format(\"\\nYou have \" + dependents + \" %s\", (dependents == 1) ? \"dependent\" : \"dependents\"))\n+                .append(String.format(\"\\nYou have \" + prisoners + \" prisoner%s\", (prisoners == 1) ? \"\" : \"s\"))\n+                .append(String.format(\"\\nYou have \" + bondsmen + \" %s\", (bondsmen == 1) ? \"bondsman\" : \"bondsmen\"));\n \n-    public int getNumberOfUnitsByType(long type, boolean inTransit) {\n-        return getNumberOfUnitsByType(type, inTransit, false);\n+        return sb.toString();\n     }\n \n-    public int getNumberOfUnitsByType(long type, boolean inTransit, boolean lv) {\n-        int num = 0;\n-        for (Unit unit : getUnits()) {\n-            if (!inTransit && !unit.isPresent()) {\n-                continue;\n-            }\n-            if (unit.isMothballed()) {\n-                if (type == Unit.ETYPE_MOTHBALLED) {\n-                    num++;\n-                }\n-                continue;\n-            }\n-            Entity en = unit.getEntity();\n-            if (en instanceof GunEmplacement || en instanceof FighterSquadron || en instanceof Jumpship) {\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_MECH && en instanceof Mech) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_DROPSHIP && en instanceof Dropship) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_SMALL_CRAFT && en instanceof SmallCraft\n-                    && !(en instanceof Dropship)) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_CONV_FIGHTER && en instanceof ConvFighter) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_AERO && en instanceof Aero\n-                    && !(en instanceof SmallCraft || en instanceof ConvFighter)) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_INFANTRY && en instanceof Infantry && !(en instanceof BattleArmor)) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_BATTLEARMOR && en instanceof BattleArmor) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_TANK && en instanceof Tank) {\n-                if ((en.getWeight() <= 50 && lv) || (en.getWeight() > 50 && !lv)) {\n-                    num++;\n-                }\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_PROTOMECH && en instanceof Protomech) {\n-                num++;\n-                continue;\n-            }\n+    public void doMaintenance(Unit u) {\n+        if (!u.requiresMaintenance() || !campaignOptions.checkMaintenance()) {\n+            return;\n         }\n-\n-        return num;\n-    }\n-\n-    public double getCargoTonnage(boolean inTransit) {\n-        return getCargoTonnage(inTransit, false);\n-    }\n-\n-    @SuppressWarnings(\"unused\") // FIXME: This whole method needs re-worked once Dropship Assignments are in\n-    public double getCargoTonnage(boolean inTransit, boolean mothballed) {\n-        double cargoTonnage = 0;\n-        double mothballedTonnage = 0;\n-        int mechs = getNumberOfUnitsByType(Entity.ETYPE_MECH);\n-        int ds = getNumberOfUnitsByType(Entity.ETYPE_DROPSHIP);\n-        int sc = getNumberOfUnitsByType(Entity.ETYPE_SMALL_CRAFT);\n-        int cf = getNumberOfUnitsByType(Entity.ETYPE_CONV_FIGHTER);\n-        int asf = getNumberOfUnitsByType(Entity.ETYPE_AERO);\n-        int inf = getNumberOfUnitsByType(Entity.ETYPE_INFANTRY);\n-        int ba = getNumberOfUnitsByType(Entity.ETYPE_BATTLEARMOR);\n-        int lv = getNumberOfUnitsByType(Entity.ETYPE_TANK, true);\n-        int hv = getNumberOfUnitsByType(Entity.ETYPE_TANK, false);\n-        int protos = getNumberOfUnitsByType(Entity.ETYPE_PROTOMECH);\n-\n-        for (Part part : getSpareParts()) {\n-            if (!inTransit && !part.isPresent()) {\n-                continue;\n-            }\n-            cargoTonnage += (part.getQuantity() * part.getTonnage());\n+        // lets start by checking times\n+        Person tech = u.getTech();\n+        int minutesUsed = u.getMaintenanceTime();\n+        int astechsUsed = getAvailableAstechs(minutesUsed, false);\n+        boolean maintained = ((tech != null) && (tech.getMinutesLeft() >= minutesUsed)\n+                && !tech.isMothballing());\n+        boolean paidMaintenance = true;\n+        if (maintained) {\n+            // use the time\n+            tech.setMinutesLeft(tech.getMinutesLeft() - minutesUsed);\n+            astechPoolMinutes -= astechsUsed * minutesUsed;\n         }\n+        u.incrementDaysSinceMaintenance(maintained, astechsUsed);\n \n-        // place units in bays\n-        // FIXME: This has been temporarily disabled. It really needs dropship assignments done to fix it correctly.\n-        // Remaining units go into cargo\n-        for (Unit unit : getUnits()) {\n-            if (!inTransit && !unit.isPresent()) {\n-                continue;\n-            }\n-            Entity en = unit.getEntity();\n-            if (unit.isMothballed()) {\n-                mothballedTonnage += en.getWeight();\n-                continue;\n-            }\n-            if (en instanceof GunEmplacement || en instanceof FighterSquadron || en instanceof Jumpship) {\n-                continue;\n-            }\n-            // cargoTonnage += en.getWeight();\n-        }\n-        if (mothballed) {\n-            return mothballedTonnage;\n+        int ruggedMultiplier = 1;\n+        if (u.getEntity().hasQuirk(OptionsConstants.QUIRK_POS_RUGGED_1)) {\n+            ruggedMultiplier = 2;\n         }\n-        return cargoTonnage;\n-    }\n \n-    public String getCargoDetails() {\n-        StringBuffer sb = new StringBuffer(\"Cargo\\n\\n\");\n-        double ccc = this.getTotalCombinedCargoCapacity();\n-        double gcc = this.getTotalCargoCapacity();\n-        double icc = this.getTotalInsulatedCargoCapacity();\n-        double lcc = this.getTotalLiquidCargoCapacity();\n-        double scc = this.getTotalLivestockCargoCapacity();\n-        double rcc = this.getTotalRefrigeratedCargoCapacity();\n-        double tonnage = this.getCargoTonnage(false);\n-        double mothballedTonnage = this.getCargoTonnage(false, true);\n-        double mothballedUnits = Math.max(getNumberOfUnitsByType(Unit.ETYPE_MOTHBALLED), 0);\n-        double combined = (tonnage + mothballedTonnage);\n-        double transported = combined > ccc ? ccc : combined;\n-        double overage = combined - transported;\n-\n-        sb.append(String.format(\"%-35s      %6.3f\\n\", \"Total Capacity:\", ccc));\n-        sb.append(String.format(\"%-35s      %6.3f\\n\", \"General Capacity:\", gcc));\n-        sb.append(String.format(\"%-35s      %6.3f\\n\", \"Insulated Capacity:\", icc));\n-        sb.append(String.format(\"%-35s      %6.3f\\n\", \"Liquid Capacity:\", lcc));\n-        sb.append(String.format(\"%-35s      %6.3f\\n\", \"Livestock Capacity:\", scc));\n-        sb.append(String.format(\"%-35s      %6.3f\\n\", \"Refrigerated Capacity:\", rcc));\n-        sb.append(String.format(\"%-35s      %6.3f\\n\", \"Cargo Transported:\", tonnage));\n-        sb.append(String.format(\"%-35s      %4s (%1.0f)\\n\", \"Mothballed Units as Cargo (Tons):\", mothballedUnits, mothballedTonnage));\n-        sb.append(String.format(\"%-35s      %6.3f/%1.3f\\n\", \"Transported/Capacity:\", transported, ccc));\n-        sb.append(String.format(\"%-35s      %6.3f\\n\", \"Overage Not Transported:\", overage));\n+        if (u.getEntity().hasQuirk(OptionsConstants.QUIRK_POS_RUGGED_2)) {\n+            ruggedMultiplier = 3;\n+        }\n \n-        return new String(sb);\n-    }\n+        if (u.getDaysSinceMaintenance() >= (getCampaignOptions().getMaintenanceCycleDays() * ruggedMultiplier)) {\n+            // maybe use the money\n+            if (campaignOptions.payForMaintain()) {\n+                if (!(finances.debit(u.getMaintenanceCost(), Transaction.C_MAINTAIN, \"Maintenance for \"\n+                                + u.getName(), getLocalDate()))) {\n+                    addReport(\"<font color='red'><b>You cannot afford to pay maintenance costs for \"\n+                            + u.getHyperlinkedName() + \"!</b></font>\");\n+                    paidMaintenance = false;\n+                }\n+            }\n+            // it is time for a maintenance check\n+            int qualityOrig = u.getQuality();\n+            String techName = \"Nobody\";\n+            String techNameLinked = techName;\n+            if (null != tech) {\n+                techName = tech.getFullTitle();\n+                techNameLinked = tech.getHyperlinkedFullTitle();\n+            }\n+            // don't do actual damage until we clear the for loop to avoid\n+            // concurrent mod problems\n+            // put it into a hash - 4 points of damage will mean destruction\n+            Map<Part, Integer> partsToDamage = new HashMap<>();\n+            StringBuilder maintenanceReport = new StringBuilder(\"<emph>\" + techName + \" performing maintenance</emph><br><br>\");\n+            for (Part p : u.getParts()) {\n+                String partReport = \"<b>\" + p.getName() + \"</b> (Quality \" + p.getQualityName() + \")\";\n+                if (!p.needsMaintenance()) {\n+                    continue;\n+                }\n+                int oldQuality = p.getQuality();\n+                TargetRoll target = getTargetForMaintenance(p, tech);\n+                if (!paidMaintenance) {\n+                    // TODO : Make this modifier user inputtable\n+                    target.addModifier(1, \"did not pay for maintenance\");\n+                }\n \n-    public int getOccupiedBays(long type) {\n-        return getOccupiedBays(type, false);\n-    }\n+                partReport += \", TN \" + target.getValue() + \"[\" + target.getDesc() + \"]\";\n+                int roll = Compute.d6(2);\n+                int margin = roll - target.getValue();\n+                partReport += \" rolled a \" + roll + \", margin of \" + margin;\n \n-    public int getOccupiedBays(long type, boolean lv) {\n-        int num = 0;\n-        for (Unit unit : getUnits()) {\n-            if (unit.isMothballed()) {\n-                continue;\n-            }\n-            Entity en = unit.getEntity();\n-            if (en instanceof GunEmplacement || en instanceof Jumpship) {\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_MECH && en instanceof Mech) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_DROPSHIP && en instanceof Dropship) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_SMALL_CRAFT && en instanceof SmallCraft && !(en instanceof Dropship)) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_CONV_FIGHTER && en instanceof ConvFighter) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_AERO && en instanceof Aero\n-                    && !(en instanceof SmallCraft || en instanceof ConvFighter)) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_INFANTRY && en instanceof Infantry && !(en instanceof BattleArmor)) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_BATTLEARMOR && en instanceof BattleArmor) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_TANK && en instanceof Tank) {\n-                if ((en.getWeight() <= 50 && lv) || (en.getWeight() > 50 && !lv)) {\n-                    num++;\n+                switch (p.getQuality()) {\n+                    case Part.QUALITY_A: {\n+                        if (margin >= 4) {\n+                            p.improveQuality();\n+                        }\n+                        if (!campaignOptions.useUnofficialMaintenance()) {\n+                            if (margin < -6) {\n+                                partsToDamage.put(p, 4);\n+                            } else if (margin < -4) {\n+                                partsToDamage.put(p, 3);\n+                            } else if (margin == -4) {\n+                                partsToDamage.put(p, 2);\n+                            } else if (margin < -1) {\n+                                partsToDamage.put(p, 1);\n+                            }\n+                        } else if (margin < -6) {\n+                            partsToDamage.put(p, 1);\n+                        }\n+                        break;\n+                    }\n+                    case Part.QUALITY_B: {\n+                        if (margin >= 4) {\n+                            p.improveQuality();\n+                        } else if (margin < -5) {\n+                            p.decreaseQuality();\n+                        }\n+                        if (!campaignOptions.useUnofficialMaintenance()) {\n+                            if (margin < -6) {\n+                                partsToDamage.put(p, 2);\n+                            } else if (margin < -2) {\n+                                partsToDamage.put(p, 1);\n+                            }\n+                        }\n+                        break;\n+                    }\n+                    case Part.QUALITY_C: {\n+                        if (margin < -4) {\n+                            p.decreaseQuality();\n+                        } else if (margin >= 5) {\n+                            p.improveQuality();\n+                        }\n+                        if (!campaignOptions.useUnofficialMaintenance()) {\n+                            if (margin < -6) {\n+                                partsToDamage.put(p, 2);\n+                            } else if (margin < -3) {\n+                                partsToDamage.put(p, 1);\n+                            }\n+                        }\n+                        break;\n+                    }\n+                    case Part.QUALITY_D: {\n+                        if (margin < -3) {\n+                            p.decreaseQuality();\n+                            if ((margin < -4) && !campaignOptions.useUnofficialMaintenance()) {\n+                                partsToDamage.put(p, 1);\n+                            }\n+                        } else if (margin >= 5) {\n+                            p.improveQuality();\n+                        }\n+                        break;\n+                    }\n+                    case Part.QUALITY_E:\n+                        if (margin < -2) {\n+                            p.decreaseQuality();\n+                            if ((margin < -5) && !campaignOptions.useUnofficialMaintenance()) {\n+                                partsToDamage.put(p, 1);\n+                            }\n+                        } else if (margin >= 6) {\n+                            p.improveQuality();\n+                        }\n+                        break;\n+                    case Part.QUALITY_F:\n+                    default:\n+                        if (margin < -2) {\n+                            p.decreaseQuality();\n+                            if (margin < -6 && !campaignOptions.useUnofficialMaintenance()) {\n+                                partsToDamage.put(p, 1);\n+                            }\n+                        }\n+                        // TODO: award XP point if margin >= 6 (make this optional)\n+                        //if (margin >= 6) {\n+                        //\n+                        //}\n+                        break;\n                 }\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_PROTOMECH && en instanceof Protomech) {\n-                num++;\n-                continue;\n+                if (p.getQuality() > oldQuality) {\n+                    partReport += \": <font color='green'>new quality is \" + p.getQualityName() + \"</font>\";\n+                } else if (p.getQuality() < oldQuality) {\n+                    partReport += \": <font color='red'>new quality is \" + p.getQualityName() + \"</font>\";\n+                } else {\n+                    partReport += \": quality remains \" + p.getQualityName();\n+                }\n+                if (null != partsToDamage.get(p)) {\n+                    if (partsToDamage.get(p) > 3) {\n+                        partReport += \", <font color='red'><b>part destroyed</b></font>\";\n+                    } else {\n+                        partReport += \", <font color='red'><b>part damaged</b></font>\";\n+                    }\n+                }\n+                maintenanceReport.append(partReport).append(\"<br>\");\n             }\n-        }\n \n-        if (type == Entity.ETYPE_MECH) {\n-            if (getTotalMechBays() > num) {\n-                return num;\n+            int nDamage = 0;\n+            int nDestroy = 0;\n+            for (Map.Entry<Part, Integer> p : partsToDamage.entrySet()) {\n+                int damage = p.getValue();\n+                if (damage > 3) {\n+                    nDestroy++;\n+                    p.getKey().remove(false);\n+                } else {\n+                    p.getKey().doMaintenanceDamage(damage);\n+                    nDamage++;\n+                }\n             }\n-            return getTotalMechBays();\n-        }\n \n-        if (type == Entity.ETYPE_AERO) {\n-            if (getTotalASFBays() > num) {\n-                return num;\n-            }\n-            return getTotalASFBays();\n-        }\n+            u.setLastMaintenanceReport(maintenanceReport.toString());\n \n-        if (type == Entity.ETYPE_INFANTRY) {\n-            if (getTotalInfantryBays() > num) {\n-                return num;\n+            if (getCampaignOptions().logMaintenance()) {\n+                MekHQ.getLogger().info(getClass(), \"doMaintenance\", maintenanceReport.toString());\n             }\n-            return getTotalInfantryBays();\n-        }\n \n-        if (type == Entity.ETYPE_BATTLEARMOR) {\n-            if (getTotalBattleArmorBays() > num) {\n-                return num;\n+            int quality = u.getQuality();\n+            String qualityString;\n+            boolean reverse = getCampaignOptions().reverseQualityNames();\n+            if (quality > qualityOrig) {\n+                qualityString = \"<font color='green'>Overall quality improves from \"\n+                        + Part.getQualityName(qualityOrig, reverse) + \" to \" + Part.getQualityName(quality, reverse)\n+                        + \"</font>\";\n+            } else if (quality < qualityOrig) {\n+                qualityString = \"<font color='red'>Overall quality declines from \"\n+                        + Part.getQualityName(qualityOrig, reverse) + \" to \" + Part.getQualityName(quality, reverse)\n+                        + \"</font>\";\n+            } else {\n+                qualityString = \"Overall quality remains \" + Part.getQualityName(quality, reverse);\n             }\n-            return getTotalBattleArmorBays();\n-        }\n-\n-        if (type == Entity.ETYPE_TANK) {\n-            if (lv) {\n-                if (getTotalLightVehicleBays() > num) {\n-                    return num;\n-                }\n-                return getTotalLightVehicleBays();\n+            String damageString = \"\";\n+            if (nDamage > 0) {\n+                damageString += nDamage + \" parts were damaged. \";\n             }\n-            if (getTotalHeavyVehicleBays() > num) {\n-                return num;\n+            if (nDestroy > 0) {\n+                damageString += nDestroy + \" parts were destroyed.\";\n             }\n-            return getTotalHeavyVehicleBays();\n-        }\n-\n-        if (type == Entity.ETYPE_SMALL_CRAFT) {\n-            if (getTotalSmallCraftBays() > num) {\n-                return num;\n+            if (!damageString.isEmpty()) {\n+                damageString = \"<b><font color='red'>\" + damageString + \"</b></font> [<a href='REPAIR|\" + u.getId()\n+                        + \"'>Repair bay</a>]\";\n             }\n-            return getTotalSmallCraftBays();\n-        }\n-\n-        if (type == Entity.ETYPE_PROTOMECH) {\n-            if (getTotalProtomechBays() > num) {\n-                return num;\n+            String paidString = \"\";\n+            if (!paidMaintenance) {\n+                paidString = \"<font color='red'>Could not afford maintenance costs, so check is at a penalty.</font>\";\n             }\n-            return getTotalProtomechBays();\n-        }\n+            addReport(techNameLinked + \" performs maintenance on \" + u.getHyperlinkedName() + \". \" + paidString\n+                    + qualityString + \". \" + damageString + \" [<a href='MAINTENANCE|\" + u.getId()\n+                    + \"'>Get details</a>]\");\n \n-        if (type == Entity.ETYPE_DROPSHIP) {\n-            if (getTotalDockingCollars() > num) {\n-                return num;\n-            }\n-            return getTotalDockingCollars();\n+            u.resetDaysSinceMaintenance();\n         }\n-\n-        return -1; // default, this is an error condition\n     }\n \n-    public String getTransportDetails() {\n-        int noMech = Math.max(getNumberOfUnitsByType(Entity.ETYPE_MECH) - getOccupiedBays(Entity.ETYPE_MECH), 0);\n-        int noDS = Math.max(getNumberOfUnitsByType(Entity.ETYPE_DROPSHIP) - getOccupiedBays(Entity.ETYPE_DROPSHIP), 0);\n-        int noSC = Math.max(getNumberOfUnitsByType(Entity.ETYPE_SMALL_CRAFT) - getOccupiedBays(Entity.ETYPE_SMALL_CRAFT), 0);\n-        @SuppressWarnings(\"unused\") // FIXME: What type of bays do ConvFighters use?\n-        int noCF = Math\n-                .max(getNumberOfUnitsByType(Entity.ETYPE_CONV_FIGHTER) - getOccupiedBays(Entity.ETYPE_CONV_FIGHTER), 0);\n-        int noASF = Math.max(getNumberOfUnitsByType(Entity.ETYPE_AERO) - getOccupiedBays(Entity.ETYPE_AERO), 0);\n-        int nolv = Math.max(getNumberOfUnitsByType(Entity.ETYPE_TANK, false, true) - getOccupiedBays(Entity.ETYPE_TANK, true), 0);\n-        int nohv = Math.max(getNumberOfUnitsByType(Entity.ETYPE_TANK) - getOccupiedBays(Entity.ETYPE_TANK), 0);\n-        int noinf = Math.max(getNumberOfUnitsByType(Entity.ETYPE_INFANTRY) - getOccupiedBays(Entity.ETYPE_INFANTRY), 0);\n-        int noBA = Math.max(getNumberOfUnitsByType(Entity.ETYPE_BATTLEARMOR) - getOccupiedBays(Entity.ETYPE_BATTLEARMOR), 0);\n-        @SuppressWarnings(\"unused\") // FIXME: This should be used somewhere...\n-        int noProto = Math.max(getNumberOfUnitsByType(Entity.ETYPE_PROTOMECH) - getOccupiedBays(Entity.ETYPE_PROTOMECH),\n-                0);\n-        int freehv = Math.max(getTotalHeavyVehicleBays() - getOccupiedBays(Entity.ETYPE_TANK), 0);\n-        int freeinf = Math.max(getTotalInfantryBays() - getOccupiedBays(Entity.ETYPE_INFANTRY), 0);\n-        int freeba = Math.max(getTotalBattleArmorBays() - getOccupiedBays(Entity.ETYPE_BATTLEARMOR), 0);\n-        int freeSC = Math.max(getTotalSmallCraftBays() - getOccupiedBays(Entity.ETYPE_SMALL_CRAFT), 0);\n-        int mothballedAsCargo = Math.max(getNumberOfUnitsByType(Unit.ETYPE_MOTHBALLED), 0);\n-\n-        String asfAppend = \"\";\n-        int newNoASF = Math.max(noASF - freeSC, 0);\n-        int placedASF = Math.max(noASF - newNoASF, 0);\n-        if (noASF > 0 && freeSC > 0) {\n-            asfAppend = \" [\" + placedASF + \" ASF will be placed in Small Craft bays]\";\n-            freeSC -= placedASF;\n-        }\n-\n-        String lvAppend = \"\";\n-        int newNolv = Math.max(nolv - freehv, 0);\n-        int placedlv = Math.max(nolv - newNolv, 0);\n-        if (nolv > 0 && freehv > 0) {\n-            lvAppend = \" [\" + placedlv + \" Light Vehicles will be placed in Heavy Vehicle bays]\";\n-            freehv -= placedlv;\n-        }\n-\n-        if (noBA > 0 && freeinf > 0) {\n-\n-        }\n-\n-        if (noinf > 0 && freeba > 0) {\n-\n-        }\n-\n-        StringBuffer sb = new StringBuffer(\"Transports\\n\\n\");\n-\n-        // Lets do Mechs first.\n-        sb.append(String.format(\"%-35s      %4d (%4d)      %-35s     %4d\\n\", \"Mech Bays (Occupied):\",\n-                getTotalMechBays(), getOccupiedBays(Entity.ETYPE_MECH), \"Mechs Not Transported:\", noMech));\n-\n-        // Lets do ASF next.\n-        sb.append(String.format(\"%-35s      %4d (%4d)      %-35s     %4d%s\\n\", \"ASF Bays (Occupied):\",\n-                getTotalASFBays(), getOccupiedBays(Entity.ETYPE_AERO), \"ASF Not Transported:\", noASF, asfAppend));\n-\n-        // Lets do Light Vehicles next.\n-        sb.append(String.format(\"%-35s      %4d (%4d)      %-35s     %4d%s\\n\", \"Light Vehicle Bays (Occupied):\",\n-                getTotalLightVehicleBays(), getOccupiedBays(Entity.ETYPE_TANK, true), \"Light Vehicles Not Transported:\",\n-                nolv, lvAppend));\n-\n-        // Lets do Heavy Vehicles next.\n-        sb.append(String.format(\"%-35s      %4d (%4d)      %-35s     %4d\\n\", \"Heavy Vehicle Bays (Occupied):\",\n-                getTotalHeavyVehicleBays(), getOccupiedBays(Entity.ETYPE_TANK), \"Heavy Vehicles Not Transported:\",\n-                nohv));\n-\n-        if (noASF > 0 && freeSC > 0) {\n-            // Lets do ASF in Free Small Craft Bays next.\n-            sb.append(String.format(\"%-35s   %4d (%4d)      %-35s     %4d\\n\", \"   Light Vehicles in Heavy Vehicle Bays (Occupied):\",\n-                    getTotalHeavyVehicleBays(), getOccupiedBays(Entity.ETYPE_TANK) + placedlv,\n-                    \"Light Vehicles Not Transported:\", newNolv));\n-        }\n-\n-        if (nolv > 0 && freehv > 0) {\n-\n-        }\n-\n-        // Lets do Infantry next.\n-        sb.append(String.format(\"%-35s      %4d (%4d)      %-35s     %4d\\n\", \"Infantry Bays (Occupied):\",\n-                getTotalInfantryBays(), getOccupiedBays(Entity.ETYPE_INFANTRY), \"Infantry Not Transported:\", noinf));\n-\n-        if (noBA > 0 && freeinf > 0) {\n-\n-        }\n-\n-        // Lets do Battle Armor next.\n-        sb.append(String.format(\"%-35s      %4d (%4d)      %-35s     %4d\\n\", \"Battle Armor Bays (Occupied):\",\n-                getTotalBattleArmorBays(), getOccupiedBays(Entity.ETYPE_BATTLEARMOR), \"Battle Armor Not Transported:\",\n-                noBA));\n-\n-        if (noinf > 0 && freeba > 0) {\n-\n-        }\n-\n-        // Lets do Small Craft next.\n-        sb.append(String.format(\"%-35s      %4d (%4d)      %-35s     %4d\\n\", \"Small Craft Bays (Occupied):\",\n-                getTotalSmallCraftBays(), getOccupiedBays(Entity.ETYPE_SMALL_CRAFT), \"Small Craft Not Transported:\",\n-                noSC));\n-\n-        if (noASF > 0 && freeSC > 0) {\n-            // Lets do ASF in Free Small Craft Bays next.\n-            sb.append(String.format(\"%-35s   %4d (%4d)      %-35s     %4d\\n\", \"   ASF in Small Craft Bays (Occupied):\",\n-                    getTotalSmallCraftBays(), getOccupiedBays(Entity.ETYPE_SMALL_CRAFT) + placedASF,\n-                    \"ASF Not Transported:\", newNoASF));\n-        }\n-\n-        // Lets do Protomechs next.\n-        sb.append(String.format(\"%-35s      %4d (%4d)      %-35s     %4d\\n\", \"Protomech Bays (Occupied):\",\n-                getTotalProtomechBays(), getOccupiedBays(Entity.ETYPE_PROTOMECH), \"Protomechs Not Transported:\", noSC));\n-\n-        sb.append(\"\\n\\n\");\n-\n-        sb.append(String.format(\"%-35s      %4d (%4d)      %-35s     %4d\\n\", \"Docking Collars (Occupied):\",\n-                getTotalDockingCollars(), getOccupiedBays(Entity.ETYPE_DROPSHIP), \"Dropships Not Transported:\", noDS));\n-\n-        sb.append(\"\\n\\n\");\n-\n-        sb.append(String.format(\"%-35s      %4d\\n\", \"Mothballed Units (see Cargo report)\", mothballedAsCargo));\n-\n-        return new String(sb);\n-    }\n-\n-    public String getCombatPersonnelDetails() {\n-        int[] countPersonByType = new int[Person.T_NUM];\n-        int countTotal = 0;\n-        int countInjured = 0;\n-        int countMIA = 0;\n-        int countKIA = 0;\n-        int countRetired = 0;\n-        Money salary = Money.zero();\n-\n+    public void initTimeInService() {\n         for (Person p : getPersonnel()) {\n-            // Add them to the total count\n-            if (Person.isCombatRole(p.getPrimaryRole()) && !p.isPrisoner()\n-                    && !p.isBondsman() && p.isActive()) {\n-                countPersonByType[p.getPrimaryRole()]++;\n-                countTotal++;\n-                if (getCampaignOptions().useAdvancedMedical()\n-                        && p.getInjuries().size() > 0) {\n-                    countInjured++;\n-                } else if (p.getHits() > 0) {\n-                    countInjured++;\n+            if (!p.isDependent() && p.getPrisonerStatus().isFree()) {\n+                LocalDate join = null;\n+                for (LogEntry e : p.getPersonnelLog()) {\n+                    if (join == null) {\n+                        // If by some nightmare there is no Joined date just use the first entry.\n+                        join = e.getDate();\n+                    }\n+                    if (e.getDesc().startsWith(\"Joined \") || e.getDesc().startsWith(\"Freed \")) {\n+                        join = e.getDate();\n+                        break;\n+                    }\n                 }\n-                salary = salary.plus(p.getSalary());\n-            } else if (Person.isCombatRole(p.getPrimaryRole())\n-                    && p.getStatus() == Person.S_RETIRED) {\n-                countRetired++;\n-            } else if (Person.isCombatRole(p.getPrimaryRole())\n-                    && p.getStatus() == Person.S_MIA) {\n-                countMIA++;\n-            } else if (Person.isCombatRole(p.getPrimaryRole())\n-                    && p.getStatus() == Person.S_KIA) {\n-                countKIA++;\n-            }\n-        }\n \n-        StringBuffer sb = new StringBuffer(\"Combat Personnel\\n\\n\");\n-\n-        String buffer = String.format(\"%-30s        %4s\\n\", \"Total Combat Personnel\",\n-                countTotal);\n-        sb.append(buffer);\n-\n-        for (int i = 0; i < Person.T_NUM; i++) {\n-            if (Person.isCombatRole(i)) {\n-                buffer = String.format(\"    %-30s    %4s\\n\", Person.getRoleDesc(i, getFaction().isClan()),\n-                        countPersonByType[i]);\n-                sb.append(buffer);\n+                p.setRecruitment((join != null) ? join : getLocalDate().minusYears(1));\n             }\n         }\n-\n-        buffer = String.format(\"%-30s        %4s\\n\",\n-                \"Injured Combat Personnel\", countInjured);\n-        sb.append(\"\\n\" + buffer);\n-        buffer = String.format(\"%-30s        %4s\\n\", \"MIA Combat Personnel\",\n-                countMIA);\n-        sb.append(buffer);\n-        buffer = String.format(\"%-30s        %4s\\n\", \"KIA Combat Personnel\",\n-                countKIA);\n-        sb.append(buffer);\n-        buffer = String.format(\"%-30s        %4s\\n\",\n-                \"Retired Combat Personnel\", countRetired);\n-        sb.append(buffer);\n-\n-        sb.append(\"\\nMonthly Salary For Combat Personnel: \" + salary.toAmountAndSymbolString());\n-\n-        return new String(sb);\n     }\n \n-    public String getSupportPersonnelDetails() {\n-        int[] countPersonByType = new int[Person.T_NUM];\n-        int countTotal = 0;\n-        int countInjured = 0;\n-        int countMIA = 0;\n-        int countKIA = 0;\n-        int countRetired = 0;\n-        Money salary = Money.zero();\n-        int prisoners = 0;\n-        int bondsmen = 0;\n-\n+    public void initTimeInRank() {\n         for (Person p : getPersonnel()) {\n-            // Add them to the total count\n-            if (Person.isSupportRole(p.getPrimaryRole()) && !p.isPrisoner()\n-                    && !p.isBondsman() && p.isActive()) {\n-                countPersonByType[p.getPrimaryRole()]++;\n-                countTotal++;\n-                if (p.getInjuries().size() > 0 || p.getHits() > 0) {\n-                    countInjured++;\n-                }\n-                salary = salary.plus(p.getSalary());\n-            } else if (p.isPrisoner() && p.isActive()) {\n-                prisoners++;\n-                if (p.getInjuries().size() > 0 || p.getHits() > 0) {\n-                    countInjured++;\n-                }\n-            } else if (p.isBondsman() && p.isActive()) {\n-                bondsmen++;\n-                if (p.getInjuries().size() > 0 || p.getHits() > 0) {\n-                    countInjured++;\n-                }\n-            } else if (Person.isSupportRole(p.getPrimaryRole())\n-                    && p.getStatus() == Person.S_RETIRED) {\n-                countRetired++;\n-            } else if (Person.isSupportRole(p.getPrimaryRole())\n-                    && p.getStatus() == Person.S_MIA) {\n-                countMIA++;\n-            } else if (Person.isSupportRole(p.getPrimaryRole())\n-                    && p.getStatus() == Person.S_KIA) {\n-                countKIA++;\n-            }\n-        }\n+            if (!p.isDependent() && p.getPrisonerStatus().isFree()) {\n \n-        StringBuffer sb = new StringBuffer(\"Support Personnel\\n\\n\");\n+                LocalDate join = null;\n+                for (LogEntry e : p.getPersonnelLog()) {\n+                    if (join == null) {\n+                        // If by some nightmare there is no date from the below, just use the first entry.\n+                        join = e.getDate();\n+                    }\n \n-        String buffer = String.format(\"%-30s        %4s\\n\", \"Total Support Personnel\",\n-                countTotal);\n-        sb.append(buffer);\n+                    if (e.getDesc().startsWith(\"Joined \") || e.getDesc().startsWith(\"Freed \")\n+                            || e.getDesc().startsWith(\"Promoted \") || e.getDesc().startsWith(\"Demoted \")) {\n+                        join = e.getDate();\n+                    }\n+                }\n \n-        for (int i = 0; i < Person.T_NUM; i++) {\n-            if (Person.isSupportRole(i)) {\n-                buffer = String.format(\"    %-30s    %4s\\n\", Person.getRoleDesc(i, getFaction().isClan()),\n-                        countPersonByType[i]);\n-                sb.append(buffer);\n+                // For that one in a billion chance the log is empty. Clone today's date and subtract a year\n+                p.setLastRankChangeDate((join != null) ? join : getLocalDate().minusYears(1));\n             }\n         }\n-\n-        buffer = String.format(\"%-30s        %4s\\n\",\n-                \"Injured Support Personnel\", countInjured);\n-        sb.append(\"\\n\" + buffer);\n-        buffer = String.format(\"%-30s        %4s\\n\", \"MIA Support Personnel\",\n-                countMIA);\n-        sb.append(buffer);\n-        buffer = String.format(\"%-30s        %4s\\n\", \"KIA Support Personnel\",\n-                countKIA);\n-        sb.append(buffer);\n-        buffer = String.format(\"%-30s        %4s\\n\",\n-                \"Retired Support Personnel\", countRetired);\n-        sb.append(buffer);\n-\n-        sb.append(\"\\nMonthly Salary For Support Personnel: \" + salary.toAmountAndSymbolString());\n-\n-        sb.append(String.format(\"\\nYou have \" + prisoners + \" prisoner%s\",\n-                prisoners == 1 ? \"\" : \"s\"));\n-        sb.append(String.format(\"\\nYou have \" + bondsmen + \" %s\",\n-                bondsmen == 1 ? \"bondsman\" : \"bondsmen\"));\n-\n-        return new String(sb);\n     }\n \n-    public void doMaintenance(Unit u) {\n-        if (!u.requiresMaintenance()) {\n-            return;\n-        }\n-        // lets start by checking times\n-        Person tech = u.getTech();\n-        int minutesUsed = u.getMaintenanceTime();\n-        int astechsUsed = getAvailableAstechs(minutesUsed, false);\n-        boolean maintained = null != tech\n-                && tech.getMinutesLeft() >= minutesUsed && !tech.isMothballing();\n-        boolean paidMaintenance = true;\n-        if (maintained) {\n-            // use the time\n-            tech.setMinutesLeft(tech.getMinutesLeft() - minutesUsed);\n-            astechPoolMinutes -= astechsUsed * minutesUsed;\n-        }\n-        u.incrementDaysSinceMaintenance(maintained, astechsUsed);\n-        if (u.getDaysSinceMaintenance() >= getCampaignOptions().getMaintenanceCycleDays()) {\n-            // maybe use the money\n-            if (campaignOptions.payForMaintain()) {\n-                if (finances.debit(u.getMaintenanceCost(), Transaction.C_MAINTAIN, \"Maintenance for \" + u.getName(),\n-                        calendar.getTime())) {\n-                } else {\n-                    addReport(\"<font color='red'><b>You cannot afford to pay maintenance costs for \"\n-                            + u.getHyperlinkedName() + \"!</b></font>\");\n-                    paidMaintenance = false;\n-                }\n-            }\n-            if (getCampaignOptions().checkMaintenance()) {\n-                // its time for a maintenance check\n-                int qualityOrig = u.getQuality();\n-                String techName = \"Nobody\";\n-                String techNameLinked = techName;\n-                if (null != tech) {\n-                    techName = tech.getFullTitle();\n-                    techNameLinked = tech.getHyperlinkedFullTitle();\n-                }\n-                // dont do actual damage until we clear the for loop to avoid\n-                // concurrent mod problems\n-                // put it into a hash - 4 points of damage will mean destruction\n-                HashMap<Integer, Integer> partsToDamage = new HashMap<>();\n-                String maintenanceReport = \"<emph>\" + techName + \" performing maintenance</emph><br><br>\";\n-                for (Part p : u.getParts()) {\n-                    String partReport = \"<b>\" + p.getName() + \"</b> (Quality \" + p.getQualityName() + \")\";\n-                    if (!p.needsMaintenance()) {\n-                        continue;\n-                    }\n-                    int oldQuality = p.getQuality();\n-                    TargetRoll target = getTargetForMaintenance(p, tech);\n-                    if (!paidMaintenance) {\n-                        // I should probably make this modifier user inputtable\n-                        target.addModifier(1, \"did not pay maintenance\");\n-                    }\n-                    partReport += \", TN \" + target.getValue() + \"[\" + target.getDesc() + \"]\";\n-                    int roll = Compute.d6(2);\n-                    int margin = roll - target.getValue();\n-                    partReport += \" rolled a \" + roll + \", margin of \" + margin;\n-                    switch (p.getQuality()) {\n-                        case Part.QUALITY_F:\n-                            if (margin < -2) {\n-                                p.decreaseQuality();\n-                                if (margin < -6 && !campaignOptions.useUnofficialMaintenance()) {\n-                                    partsToDamage.put(p.getId(), 1);\n-                                }\n-                            }\n-                            if (margin >= 6) {\n-                                // TODO: award XP point (make this optional)\n-                            }\n-                            break;\n-                        case Part.QUALITY_E:\n-                            if (margin < -2) {\n-                                p.decreaseQuality();\n-                                if (margin < -5 && !campaignOptions.useUnofficialMaintenance()) {\n-                                    partsToDamage.put(p.getId(), 1);\n-                                }\n-                            }\n-                            if (margin >= 6) {\n-                                p.improveQuality();\n-                            }\n-                            break;\n-                        case Part.QUALITY_D:\n-                            if (margin < -3) {\n-                                p.decreaseQuality();\n-                                if (margin < -4 && !campaignOptions.useUnofficialMaintenance()) {\n-                                    partsToDamage.put(p.getId(), 1);\n-                                }\n-                            }\n-                            if (margin >= 5) {\n-                                p.improveQuality();\n-                            }\n-                            break;\n-                        case Part.QUALITY_C:\n-                            if (margin < -4) {\n-                                p.decreaseQuality();\n-                            }\n-                            if (!campaignOptions.useUnofficialMaintenance()) {\n-                                if (margin < -6) {\n-                                    partsToDamage.put(p.getId(), 2);\n-                                } else if (margin < -3) {\n-                                    partsToDamage.put(p.getId(), 1);\n-                                }\n-                            }\n-                            if (margin >= 5) {\n-                                p.improveQuality();\n-                            }\n-                            break;\n-                        case Part.QUALITY_B:\n-                            if (margin < -5) {\n-                                p.decreaseQuality();\n-                            }\n-                            if (!campaignOptions.useUnofficialMaintenance()) {\n-                                if (margin < -6) {\n-                                    partsToDamage.put(p.getId(), 2);\n-                                } else if (margin < -2) {\n-                                    partsToDamage.put(p.getId(), 1);\n-                                }\n-                            }\n-                            if (margin >= 4) {\n-                                p.improveQuality();\n-                            }\n-                            break;\n-                        case Part.QUALITY_A:\n-                            if (!campaignOptions.useUnofficialMaintenance()) {\n-                                if (margin < -6) {\n-                                    partsToDamage.put(p.getId(), 4);\n-                                } else if (margin < -4) {\n-                                    partsToDamage.put(p.getId(), 3);\n-                                } else if (margin == -4) {\n-                                    partsToDamage.put(p.getId(), 2);\n-                                } else if (margin < -1) {\n-                                    partsToDamage.put(p.getId(), 1);\n-                                }\n-                            } else if (margin < -6) {\n-                                partsToDamage.put(p.getId(), 1);\n-                            }\n-                            if (margin >= 4) {\n-                                p.improveQuality();\n-                            }\n-                            break;\n-                    }\n-                    if (p.getQuality() > oldQuality) {\n-                        partReport += \": <font color='green'>new quality is \" + p.getQualityName() + \"</font>\";\n-                    } else if (p.getQuality() < oldQuality) {\n-                        partReport += \": <font color='red'>new quality is \" + p.getQualityName() + \"</font>\";\n-                    } else {\n-                        partReport += \": quality remains \" + p.getQualityName();\n-                    }\n-                    if (null != partsToDamage.get(p.getId())) {\n-                        if (partsToDamage.get(p.getId()) > 3) {\n-                            partReport += \", <font color='red'><b>part destroyed</b></font>\";\n-                        } else {\n-                            partReport += \", <font color='red'><b>part damaged</b></font>\";\n-                        }\n-                    }\n-                    maintenanceReport += partReport + \"<br>\";\n-                }\n-                int nDamage = 0;\n-                int nDestroy = 0;\n-                for (int key : partsToDamage.keySet()) {\n-                    Part p = getPart(key);\n-                    if (null != p) {\n-                        int damage = partsToDamage.get(key);\n-                        if (damage > 3) {\n-                            nDestroy++;\n-                            p.remove(false);\n-                        } else {\n-                            p.doMaintenanceDamage(damage);\n-                            nDamage++;\n-                        }\n+    public void initRetirementDateTracking() {\n+        for (Person person : getPersonnel()) {\n+            if (person.getStatus().isRetired()) {\n+                LocalDate retired = null;\n+                LocalDate lastLoggedDate = null;\n+                for (LogEntry entry : person.getPersonnelLog()) {\n+                    lastLoggedDate = entry.getDate();\n+                    if (entry.getDesc().startsWith(\"Retired\")) {\n+                        retired = entry.getDate();\n                     }\n                 }\n-                u.setLastMaintenanceReport(maintenanceReport);\n-                int quality = u.getQuality();\n-                String qualityString;\n-                boolean reverse = getCampaignOptions().reverseQualityNames();\n-                if (quality > qualityOrig) {\n-                    qualityString = \"<font color='green'>Overall quality improves from \"\n-                            + Part.getQualityName(qualityOrig, reverse) + \" to \" + Part.getQualityName(quality, reverse)\n-                            + \"</font>\";\n-                } else if (quality < qualityOrig) {\n-                    qualityString = \"<font color='red'>Overall quality declines from \"\n-                            + Part.getQualityName(qualityOrig, reverse) + \" to \" + Part.getQualityName(quality, reverse)\n-                            + \"</font>\";\n-                } else {\n-                    qualityString = \"Overall quality remains \" + Part.getQualityName(quality, reverse);\n-                }\n-                String damageString = \"\";\n-                if (nDamage > 0) {\n-                    damageString += nDamage + \" parts were damaged. \";\n-                }\n-                if (nDestroy > 0) {\n-                    damageString += nDestroy + \" parts were destroyed.\";\n-                }\n-                if (!damageString.isEmpty()) {\n-                    damageString = \"<b><font color='red'>\" + damageString + \"</b></font> [<a href='REPAIR|\" + u.getId()\n-                            + \"'>Repair bay</a>]\";\n-                }\n-                String paidString = \"\";\n-                if (!paidMaintenance) {\n-                    paidString = \"<font color='red'>Could not afford maintenance costs, so check is at a penalty.</font>\";\n-                }\n-                addReport(techNameLinked + \" performs maintenance on \" + u.getHyperlinkedName() + \". \" + paidString\n-                        + qualityString + \". \" + damageString + \" [<a href='MAINTENANCE|\" + u.getId()\n-                        + \"'>Get details</a>]\");\n-            }\n-            u.resetDaysSinceMaintenance();\n-        }\n-    }\n \n-    public void initTimeInService() {\n-        for (Person p : getPersonnel()) {\n-            Date join = null;\n-            for (LogEntry e : p.getPersonnelLog()) {\n-                if (join == null){\n-                    // If by some nightmare there is no Joined date just use the first entry.\n-                    join = e.getDate();\n-                }\n-                if (e.getDesc().startsWith(\"Joined \") || e.getDesc().startsWith(\"Freed \")) {\n-                    join = e.getDate();\n-                    break;\n-                }\n-            }\n-            if (!p.isDependent() && !p.isPrisoner() && !p.isBondsman()) {\n-                GregorianCalendar cal = (GregorianCalendar) GregorianCalendar.getInstance();\n-                // For that one in a billion chance the log is empty. Clone todays date and subtract a year\n-                if (join == null) {\n-                    cal = (GregorianCalendar)calendar.clone();\n-                    cal.add(Calendar.YEAR, -1);\n-                    p.setRecruitment(cal);\n-                } else {\n-                    cal.setTime(join);\n-                    p.setRecruitment(cal);\n+                if (retired == null) {\n+                    retired = lastLoggedDate;\n                 }\n+\n+                // For that one in a billion chance the log is empty. Clone today's date and subtract a year\n+                person.setRetirement((retired != null) ? retired : getLocalDate().minusYears(1));\n             }\n         }\n     }\n \n     public void initAtB(boolean newCampaign) {\n-        getRetirementDefectionTracker().setLastRetirementRoll(getCalendar());\n+        getRetirementDefectionTracker().setLastRetirementRoll(getLocalDate());\n \n         if (!newCampaign) {\n             /*\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "3f55aabad31fb84ff1e5af9c8caac7bd8c8999a0", "message": "Merge commit", "committedDate": null}, {"oid": "a0c1cbf9746ed9486f08ce4aa2376828e846c786", "committedDate": "2019-02-26 21:45:56 -0500", "message": "merge"}, {"oid": "3002e321d67f944da3a051a049f0706c0e353aa0", "committedDate": "2019-03-04 20:50:34 -0500", "message": "merge from upstream"}, {"oid": "34f5dfffab4318e94903fece9dbf49dd1ee475c7", "committedDate": "2019-04-23 22:53:00 -0400", "message": "continues work on track gui and rules"}, {"oid": "b1c2e0f95fc8ad45080d9962da602d5fe815c34b", "committedDate": "2019-04-26 22:02:27 -0400", "message": "hook up stratcon rules manager to mekhq event bus"}, {"oid": "6f180f04dabdd9901dc392b093561514eb2e84cc", "committedDate": "2019-05-04 12:17:55 -0400", "message": "merge from upstream"}, {"oid": "119ff411ebb80f91b83b3fe139bb911a79048b3d", "committedDate": "2019-05-12 15:48:11 -0400", "message": "scenario setup work"}, {"oid": "2548381ed541547a775bb8c96fd53802087ec9aa", "committedDate": "2019-06-20 23:58:58 -0400", "message": "merge from upstream"}, {"oid": "ed6a5c015aa33d0bffdcd3297b9482ce600eb146", "committedDate": "2020-04-11 22:33:14 -0400", "message": "merge from upstream"}, {"oid": "ca46ea5005775f38ad56f98bfb8899a187571e49", "committedDate": "2020-06-03 11:30:19 -0400", "message": "merge from upstream"}, {"oid": "b2f014d250be5b4b75ed3f765f10ee1781ab96ae", "committedDate": "2020-06-23 22:21:32 -0400", "message": "merge from upstream"}, {"oid": "2bd7638ed4cc2ad5bc80e4b1bc78ff091c318a87", "committedDate": "2020-07-13 00:06:30 -0400", "message": "merge from upstream"}, {"oid": "d4f035c262d3d9ea7b7f5e935a5807bf5275aa91", "committedDate": "2020-08-08 23:08:38 -0400", "message": "merge from upstream"}, {"oid": "5830ebef6d2f671d0b152f328436ab36bcddacf4", "committedDate": "2020-08-24 20:32:16 -0400", "message": "merge from upstream"}, {"oid": "c8622590fef59265a5a8c4f68676a4a628d0fc0a", "committedDate": "2020-08-26 23:17:49 -0400", "message": "multiple bug fixes and hookup to actual campaign"}, {"oid": "935339ac1b799e58664d736142b2a1fa0d9e4263", "committedDate": "2020-09-09 00:06:07 -0400", "message": "merge from upstream"}, {"oid": "c7d9edb3737ba14da075190a1292ac94bbd7e0f2", "committedDate": "2020-09-20 14:36:56 -0600", "message": "Adding code for a log entry when swapping TOE force."}, {"oid": "2e590a1dbeb8a7b132cd5d312b93af37b9e0620a", "committedDate": "2020-09-29 10:15:54 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_476"}, {"oid": "04f10ee4b7f5bf57284109439ec1ab178b15857e", "committedDate": "2020-10-06 21:41:18 -0400", "message": "merge from upstream"}, {"oid": "04a16de448a0c7d576a6c3c64c9d23ae08384bae", "committedDate": "2020-10-07 14:33:13 -0400", "message": "Split out cargo and hangar statistics from Campaign"}, {"oid": "796379c3c13e8dadad4ac4cfd29f02a30e9c2bd1", "committedDate": "2020-10-07 14:33:13 -0400", "message": "Split out accounting from the Campaign"}, {"oid": "a254e204d91c3fd90698936f8d21aba26aaf0142", "committedDate": "2020-10-07 14:33:14 -0400", "message": "Move PersonnelReport methods"}, {"oid": "361dde24295aa66e89fea69823b01cf497cf4664", "committedDate": "2020-10-07 14:33:14 -0400", "message": "Move more financial reporting out of Campaign"}, {"oid": "c28db6f06dec2b03e487c15f514685d852bdca1e", "committedDate": "2020-10-07 14:33:14 -0400", "message": "Remove unused methods"}, {"oid": "039786019051fddf3af641c0cc0e35e7c85eb156", "committedDate": "2020-10-07 15:49:11 -0400", "message": "Make testing Accountant easier for a Campaign"}, {"oid": "a72b07d7b8ec62055140cd346314602fb020119e", "committedDate": "2020-10-07 16:11:53 -0400", "message": "Make it easier to mock stats classes"}, {"oid": "0400aac175c219dc2fb73ea0a8dfbbf429aaff6e", "committedDate": "2020-10-07 16:45:26 -0400", "message": "Add forEachSparePart to improve performance"}, {"oid": "63e028b04713a41ec415910ea4d0ed03a3678864", "committedDate": "2020-10-08 13:32:32 -0400", "message": "Merge remote-tracking branch 'upstream/master' into move-accounting-and-stats-out-of-campaign"}, {"oid": "13de948b34166d73f4f7a2e5a8982c9f693b12bc", "committedDate": "2020-10-10 15:15:00 -0400", "message": "Use Person directly instead of IDs in Unit"}, {"oid": "923a477ddb1060c2a48c13cca7c5900a40c0f82a", "committedDate": "2020-10-10 15:15:00 -0400", "message": "Use Person instead of an ID"}, {"oid": "58291b29acbe7cc24a4491f3d3ab911f0468a7dc", "committedDate": "2020-10-10 15:41:57 -0400", "message": "Fix logic to check for Already Being Worked On"}, {"oid": "998ab0faf85804f17cc7444ae1b46c2591b5db1f", "committedDate": "2020-10-15 23:34:03 -0400", "message": "merge from upstream"}, {"oid": "75e396b885c6008c6f6a7d72f1bbd7aad8099970", "committedDate": "2020-10-16 16:29:27 -0400", "message": "Moving to an enum for mission status"}, {"oid": "24de5e9720cf823838bf74e4cf4eb562bedbb437", "committedDate": "2020-10-16 18:28:46 -0400", "message": "Merging useUnitRating with the UnitRatingMethod enum"}, {"oid": "ca615b8e13e2158834a33079c6f89b02504c0bf7", "committedDate": "2020-10-17 01:17:28 -0400", "message": "Moving to using AbstractIcon for constants"}, {"oid": "4a54c7e9a18be4084eb1d3748a891b46400bf53d", "committedDate": "2020-10-17 13:11:47 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_IconConstants"}, {"oid": "9c1a47e2e6268b362edd3d6eb2e39018b5802179", "committedDate": "2020-10-20 14:49:01 -0400", "message": "Address PR feedback"}, {"oid": "b5d38e8af270f50fc091db05cf882ea8380fe3a7", "committedDate": "2020-10-20 14:49:08 -0400", "message": "Merge remote-tracking branch 'upstream/master' into units-hold-actual-persons"}, {"oid": "f34ac06c3db416f5e852246e928d3b1c6c132500", "committedDate": "2020-10-20 21:00:04 -0400", "message": "Merge branch 'master' into dev_Windchild_MissionStatus"}, {"oid": "fbc730260407b11dc98571c9b5e184e8f05e6a89", "committedDate": "2020-10-22 12:56:22 -0400", "message": "Standardizing to use the PortraitChooser instead of the older icon selector"}, {"oid": "0637c9d04376fbc5378a09826bdd58e1092b97f0", "committedDate": "2020-10-22 15:07:25 -0400", "message": "Use Units rather than their IDs"}, {"oid": "d25f391110cab3b64118d5963e321c379f8ab3ec", "committedDate": "2020-10-22 15:07:25 -0400", "message": "Do not use Unit IDs in Refits"}, {"oid": "5bf80c3e80c7fd9247fee197d749605de4a4e17b", "committedDate": "2020-10-22 15:07:49 -0400", "message": "Merge branch 'master' into dev_Windchild_IconConstants"}, {"oid": "2eec6da85e021ce0398fd3d715071b7b625855ba", "committedDate": "2020-10-22 23:15:38 -0400", "message": "merge from upstream"}, {"oid": "599b0a3158d94a3eea50fe8314c55177a344c2a9", "committedDate": "2020-10-24 14:22:32 -0400", "message": "Merge remote-tracking branch 'upstream/master' into use-units-not-ids"}, {"oid": "1d9b9a6ee2a71f128d65bb7754463be3ca9a71bc", "committedDate": "2020-10-24 14:26:31 -0400", "message": "Address LGTM issues"}, {"oid": "9f22e79abf71f3d8cf935d5d83d4790af02b32ce", "committedDate": "2020-10-24 14:48:29 -0400", "message": "Add tests for transport unit sets"}, {"oid": "851026ff48ec4e39238b2c56212bac2ea7993670", "committedDate": "2020-10-26 14:53:19 -0400", "message": "Use new Warehouse type in Campaign (etc)"}, {"oid": "37fc5840de9bf6c5bb19b38767e1394be220e1b9", "committedDate": "2020-10-26 16:02:30 -0400", "message": "Move some event logic to the Warehouse"}, {"oid": "3f795a2b3ba1840a198ca067a1d76aed4429f699", "committedDate": "2020-10-26 17:26:50 -0400", "message": "Move removing child parts to the Warehouse"}, {"oid": "d597a8aab6c1b948ebfdcc3f58d2213acb04b200", "committedDate": "2020-10-27 12:29:29 -0400", "message": "Starting to implement edge fixes"}, {"oid": "9978a0b21dd7d6fbd2d0077748027c6ed31753b0", "committedDate": "2020-10-27 12:29:35 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_Edge"}, {"oid": "b2aea6b5d940c4fa06a42cd1b04559815323ab63", "committedDate": "2020-10-27 13:04:35 -0400", "message": "Working on edge code"}, {"oid": "fbd0d470437e527c764daa294d1521ca7509a6af", "committedDate": "2020-10-27 14:04:21 -0400", "message": "Implementing changes as per review"}, {"oid": "c883a5f8c0085c74e8f448ecd3c0f9c04227b067", "committedDate": "2020-10-27 17:22:03 -0400", "message": "Move spare part helpers to Warehouse and add tests"}, {"oid": "dfca32fc2a15a2908cd4f1277261d416fcad1f00", "committedDate": "2020-10-27 21:14:06 -0400", "message": "merge from upstream"}, {"oid": "a7d7c78d0149d3de3828501499fdf61b5ae75be6", "committedDate": "2020-10-28 14:17:13 -0400", "message": "Merge pull request #2167 from sixlettervariables/add-parts-warehouse"}, {"oid": "d9aa78378bd639bd9bd8b36e16e9d407d5c2f1a6", "committedDate": "2020-10-28 14:28:37 -0400", "message": "Clean up part events in Campaign"}, {"oid": "f6acac4474902742fd52f7d3d9cc3cf3c074d16a", "committedDate": "2020-10-28 15:35:29 -0400", "message": "Address LGTM nit"}, {"oid": "b60b5a84ad487fe05e6369a11fedccb4f233a69d", "committedDate": "2020-10-29 15:28:06 -0400", "message": "Move Hire Personnel for a Unit to an action"}, {"oid": "d32837864805c67ac3894ce3a6b84ee8dae064a3", "committedDate": "2020-10-29 15:43:23 -0400", "message": "Don't use unit IDs for parts needing service"}, {"oid": "92b838a6428bae18030b98719a0c20d399377282", "committedDate": "2020-10-29 15:51:09 -0400", "message": "Move unnecessary unit logic from Campaign and into Unit"}, {"oid": "fd327a8f439a378f8f34afcb3067fe57153dcc2d", "committedDate": "2020-11-03 21:23:25 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_MHQPortraitSelector"}, {"oid": "0cbe836f9e807faf4cbef1d391b1ce3ad0e865d1", "committedDate": "2020-11-04 16:17:23 -0500", "message": "Add Quartermaster to manage machines and materiel"}, {"oid": "18cddebe515dbc58e76c49ef789cb3f4b31bc8a2", "committedDate": "2020-11-06 14:57:11 -0500", "message": "Address PR feedback and fix #1801"}, {"oid": "dd8b9c84414cb11c30ec6e2d395e2260235cd73a", "committedDate": "2020-11-06 14:58:38 -0500", "message": "Fix extraneous whitespace"}, {"oid": "31c96a9e64873aa2840946dbb1c12d347994780d", "committedDate": "2020-11-06 16:10:50 -0500", "message": "Swapping portrait generation to use system-based file path comparison"}, {"oid": "8bf24b6a7be023940aad58a0c3c3ded1ee2a9358", "committedDate": "2020-11-06 16:50:16 -0500", "message": "Fixing merge conflicts"}, {"oid": "206529fd93c7b6efd22949d747ea14ec2a1942ed", "committedDate": "2020-11-06 19:38:46 -0500", "message": "Merge pull request #2185 from sixlettervariables/use-units-not-ids-for-transports"}, {"oid": "f246ee2085262fe713a9f24b3eaf6e7adb142e41", "committedDate": "2020-11-07 10:40:39 -0500", "message": "Moving portrait generation code into a random portrait generator"}, {"oid": "139d94f86981a4c6b681ec14d16630b99198024a", "committedDate": "2020-11-07 12:32:07 -0500", "message": "AbstractIcon: Simplifying icon-related code"}, {"oid": "cbec2bdc4861f772bb509fc69f37a8c053522347", "committedDate": "2020-11-07 12:39:03 -0500", "message": "Removing duplicate constants in campaign"}, {"oid": "e9c4a88af33312b049543ac024e2c32784a7b209", "committedDate": "2020-11-07 12:52:54 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_AIPS"}, {"oid": "76f57ccbde3ae98e58e5264c5d06be29b03ce3af", "committedDate": "2020-11-07 15:16:08 -0500", "message": "Merge pull request #2209 from Windchild292/dev_Windchild_RPG"}, {"oid": "067bacc6c00b10192faa2b4e13d4c2127ba75292", "committedDate": "2020-11-07 22:39:06 -0500", "message": "Merge pull request #2211 from Windchild292/dev_Windchild_AIPS"}, {"oid": "a38a43b4cc7f7670aa7ffad2bf318bc15334d0a1", "committedDate": "2020-11-08 13:55:37 -0500", "message": "Merge remote-tracking branch 'upstream/master' into add-quartermaster-2"}, {"oid": "6b4dfeadd20c22e92cb2a0328030ed58c3df5cd1", "committedDate": "2020-11-14 19:29:15 -0500", "message": "Swapping Genealogy and FormerSpouse to no longer use id when active."}, {"oid": "aa59e47ee67a276b3a415ab3cb761291fa2d1593", "committedDate": "2020-11-15 16:10:53 -0500", "message": "Only return non-zero quantities of parts, fixing #2231"}, {"oid": "24c2199bd396e7e059f3a3123c060fce92c04726", "committedDate": "2020-11-30 21:41:10 -0500", "message": "merge from upstream"}, {"oid": "6b3e4afa0664f35d2fc49a8e881b2fd7f22ea981", "committedDate": "2020-12-04 07:37:02 -0500", "message": "Use tested spare part consolidation logic"}, {"oid": "749469b9d6c8f7a36748d76c53dae5cc39365894", "committedDate": "2020-12-04 10:33:33 -0500", "message": "Fixup whitespace"}, {"oid": "cb8a407413b0629636afe9dc153a93699cbcb2da", "committedDate": "2020-12-04 12:21:25 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_476"}, {"oid": "7c0dd98fed591d24803031e815a39480fae3da18", "committedDate": "2020-12-04 12:24:21 -0500", "message": "Fixing merge conflitcs"}, {"oid": "d770e67e26237234553967696e546ef4cd5e6c4a", "committedDate": "2020-12-04 16:20:00 -0500", "message": "Moving ranks to their own folder"}, {"oid": "198ea362215a2605015f13d5baf7a6f9a27e2323", "committedDate": "2020-12-04 17:57:54 -0500", "message": "Moving ranks system names to the Rank XML file"}, {"oid": "c88ca2c1c698dfe730b493048b630ef6d20ce973", "committedDate": "2020-12-13 02:45:36 -0500", "message": "Restore AtBContract references in the ContractMarket #2141"}, {"oid": "dce8434c1c674caf8ba284f7e99a0da72a679958", "committedDate": "2020-12-14 18:14:37 -0500", "message": "Merge pull request #2263 from Windchild292/dev_Windchild_2200"}, {"oid": "02b7023e03f921ec06430d3a3bfbf3fd4d06f12d", "committedDate": "2020-12-16 17:45:57 -0500", "message": "Add the ability to swap out instances of static classes"}, {"oid": "6fe11ed3dea3b240bc594dd3153526f8fa1efcd1", "committedDate": "2020-12-22 17:15:50 -0500", "message": "merge from upstream"}, {"oid": "1080fdc3cc0abf4b10a986fa95243f6a883a2446", "committedDate": "2020-12-22 17:22:20 -0500", "message": "Do not display unknown armor types in the Parts In Use report, fixes #2298"}, {"oid": "26577933fe91fcc839a403192479257fcf64f842", "committedDate": "2020-12-25 17:30:07 -0500", "message": "PlayerColours, Colour Camo Standardization, and standardizing camo selector"}, {"oid": "b7106b6df15109159676c4d5c76d6b57d98d749c", "committedDate": "2020-12-25 17:31:02 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_1727"}, {"oid": "256150fa6780932824d092bb5e1cfc5160a82798", "committedDate": "2020-12-26 23:02:07 -0500", "message": "Fixing colour camouflage during colour set"}, {"oid": "05bda11a452176725c2023ddfda641c5b9d77ff2", "committedDate": "2020-12-30 11:28:06 -0500", "message": "Merge pull request #2294 from sixlettervariables/add-contract-market-tests"}, {"oid": "d96560342ac372c6159e2eb36a930d730575079e", "committedDate": "2020-12-31 10:50:32 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_1727"}, {"oid": "87fef495531a68093af610ebd4d170ad9fe58ed7", "committedDate": "2020-12-31 13:13:30 -0500", "message": "Applying requisite changes in other files"}, {"oid": "1077aa3ce47d85a2b52d46fe24d0a9d6500338b3", "committedDate": "2021-01-07 22:38:01 -0500", "message": "Implementing PersonnelRole Enum"}, {"oid": "7ee43f4d3196080806f016767d68fcc646806b95", "committedDate": "2021-01-08 13:14:46 -0500", "message": "Fixing merge conflicts"}, {"oid": "461f2e03e5c7b7e233ccb188ab3acbea84217051", "committedDate": "2021-01-09 12:33:02 -0500", "message": "Fixing merge conflicts"}, {"oid": "7715f2d53d7b785432c6d12abe076dd9fe734b63", "committedDate": "2021-01-11 00:08:57 -0500", "message": "Continuing camouflage AbstractIcon implementation"}, {"oid": "5c767fe20f909aed7ad9ee04af783fada0f01183", "committedDate": "2021-01-13 14:44:22 -0500", "message": "Fixing colour set and moving EntityImage to use proper camo type"}, {"oid": "13a860aed5400a5bf2ccb7ff55f12b6266ed1c86", "committedDate": "2021-01-14 15:40:05 -0500", "message": "Moving to fully use isConventionalInfantry"}, {"oid": "b395926d66b44f814eeccbcdf238377754b3497f", "committedDate": "2021-01-16 12:03:30 -0500", "message": "Swapping to using streams for missions"}, {"oid": "3c08e5b43761cd85a411618df940a669f43b0f74", "committedDate": "2021-01-16 12:03:41 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_MissionStatus"}, {"oid": "56075ee22d31cf6645cfbc078f6d0059a7c35a2e", "committedDate": "2021-01-16 13:07:08 -0500", "message": "Swapping to stream implementation"}, {"oid": "c56982c6b4c7590fa58659f5739adb6fb98c38b3", "committedDate": "2021-01-16 13:20:27 -0500", "message": "Applying changes from personal review"}, {"oid": "bac1ae00109056ac5aaf4ddf35370fb62657e4ed", "committedDate": "2021-01-16 13:40:07 -0500", "message": "Moving to only use getMissions when necessary"}, {"oid": "6a6ab7d22aae49fceae02409ae8f3121e890ccc1", "committedDate": "2021-01-16 13:57:34 -0500", "message": "Moving to isActiveOn"}, {"oid": "e0a11cd0c98c4fd665190822f79c498645f15426", "committedDate": "2021-01-31 13:08:13 -0700", "message": "Renaming a bunch of personnel options"}, {"oid": "a16944f0ca0f8452a8500b311c0d4c1afd4f69ad", "committedDate": "2021-01-31 13:14:59 -0700", "message": "Finishing the option renames"}, {"oid": "3055e76295deb7d552bc3972b69cc6e0fb1f8760", "committedDate": "2021-02-01 10:17:56 -0700", "message": "Starting to implement Automatic Company Generation"}, {"oid": "909ceb8a84cdd6031bf90c300d47b4d2da527643", "committedDate": "2021-02-01 21:19:14 -0700", "message": "Continuing to work on an AtB Company Generator"}, {"oid": "50d74c591ba7b25978e91a326e3d0ce53513c6cd", "committedDate": "2021-02-07 16:50:13 -0700", "message": "Continuing to implement company generation and its options"}, {"oid": "426328755b88eceb8119a0c91696b2e655a0c00e", "committedDate": "2021-02-08 12:27:32 -0700", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_PersonnelRoles"}, {"oid": "9cbf543bf750926dffd2ad77d82e8da2dc416a54", "committedDate": "2021-02-08 12:57:48 -0700", "message": "Bugfixes and some code cleanup from personal review"}, {"oid": "f00627349f7dfb1bfb29305b3377fa3fea2776c5", "committedDate": "2021-02-11 10:55:45 -0700", "message": "Adding Unit::isConventionalInfantry to ensure the entity is null checked"}, {"oid": "d5767fac16735b748124c2759fa7e02388f3e3e0", "committedDate": "2021-02-11 12:52:56 -0700", "message": "Applying changes from personal review"}, {"oid": "d69c0121a94474264821a25df299ecf667dfefdf", "committedDate": "2021-02-12 22:37:21 -0500", "message": "merge from upstream"}, {"oid": "17e3819e3ef169b2b2bf9114df56a23fc8f57f8b", "committedDate": "2021-02-19 09:26:24 -0500", "message": "Add logging and error trapping on daily unit maintenance #2427"}, {"oid": "3a7dc0d62fbf19186d1bbebeefc14a1838733180", "committedDate": "2021-02-19 09:32:56 -0500", "message": "Add error trapping to daily part maintenance, related to #2427"}, {"oid": "efa0010ac4de3087fd997cad083dfcc7307f1fae", "committedDate": "2021-02-19 10:53:09 -0700", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_PersonnelOptionsTab"}, {"oid": "1e74b62a2b90eefb8fd7a24d4c24faf08d1c6b3b", "committedDate": "2021-02-19 12:27:59 -0700", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_AtBCompanyGeneration"}, {"oid": "8f0b7abad948bde3df857ec022c1a3668076b29c", "committedDate": "2021-02-26 13:31:57 -0700", "message": "2442: Fixing Ranks Issues: Removing ancient migration and code, Using proper setter, and using the Ranks as the spinner"}, {"oid": "d52c982d8da547329729b0caea1fffab274e1b0c", "committedDate": "2021-02-27 10:23:14 -0500", "message": "Use MM's new UnitNameTracker for name collisions"}, {"oid": "3c5f987fa51fbe18454c55214f4d5d5f2b980a90", "committedDate": "2021-03-01 09:12:20 -0700", "message": "Fixing merge conflicts"}, {"oid": "b9f8896698477ed928a80443d0345d6397c58bb2", "committedDate": "2021-03-03 10:07:04 -0700", "message": "Fixing merge conflicts"}, {"oid": "1a9d000431b1f187634f7e6ef15161dd07678998", "committedDate": "2021-03-05 12:19:51 -0700", "message": "Continuing to work on the company generator"}, {"oid": "7f59899475e511f98ed9f64a1c10efab11737c43", "committedDate": "2021-03-05 21:50:52 -0500", "message": "merge from upstream"}, {"oid": "1a6354d39d3f6108e9e0e6f9e455c5a126627347", "committedDate": "2021-03-06 10:44:21 -0500", "message": "Address review comments"}, {"oid": "18c7330a3cc319d1dc3e55892a46c5c80539db9a", "committedDate": "2021-03-06 09:56:12 -0700", "message": "Fixing merge conflicts"}, {"oid": "b19752176bb0619f7ccda9f75d551b050521a106", "committedDate": "2021-03-08 23:25:41 -0500", "message": "merge from upstream"}, {"oid": "0bc70593b2b327657e4ff7709e320451adfadbe6", "committedDate": "2021-03-09 09:01:53 -0700", "message": "Fixing merge conflicts"}, {"oid": "9eca5ea7a7d0fe44db02d1ce091f5bf294cb156d", "committedDate": "2021-03-09 09:07:57 -0700", "message": "Fixing merge conflicts"}, {"oid": "baefb52c3074832565148fffae6d1363449fa8ae", "committedDate": "2021-03-09 09:19:18 -0700", "message": "Fixing merge conflicts"}, {"oid": "9499ad003bfeb58930187abad3334129be912b4e", "committedDate": "2021-03-09 09:23:18 -0700", "message": "Fixing merge conflicts"}, {"oid": "d0e34e3b80c163ff4ed03474a3adcd39d061c9ee", "committedDate": "2021-03-09 09:39:24 -0700", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_ShoppingList"}, {"oid": "8ee805b229c9373e653376a749274023ef13139b", "committedDate": "2021-03-09 11:54:07 -0500", "message": "Merge pull request #2373 from Windchild292/dev_Windchild_isConventionalInfantry"}, {"oid": "559cb006d560fd2099639e701e37538aded7f3a1", "committedDate": "2021-03-09 12:19:33 -0500", "message": "Merge pull request #2337 from Windchild292/dev_Windchild_ShoppingList"}, {"oid": "2bf37308c59c435acc52e0cf512ce9f74d1adc7e", "committedDate": "2021-03-09 10:26:52 -0700", "message": "Fixing merge conflicts"}, {"oid": "62726bf22f84cafc8872cbdebd5a8edce980e60a", "committedDate": "2021-03-09 10:27:33 -0700", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_CamouflageIcon"}, {"oid": "5082524cc2a32c4a8360cb845951a5e2b94300df", "committedDate": "2021-03-09 11:46:51 -0700", "message": "Fixing merge conflicts"}, {"oid": "c640fe5cc744f25a6fb292dd50220c8ecfe1c986", "committedDate": "2021-03-09 12:27:38 -0700", "message": "Fixing merge conflicts"}, {"oid": "64b151aab1a311e538c895526ba3f807216917c1", "committedDate": "2021-03-11 19:48:54 -0700", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_MissionStatus"}, {"oid": "98253ba4fbbd681dca588b7cb766e8439c19d880", "committedDate": "2021-03-11 19:59:41 -0700", "message": "Applying bugfixes from review"}, {"oid": "8d7d2a8df4596249f133919b569b56249b0068aa", "committedDate": "2021-03-12 14:28:19 -0700", "message": "Improving default contract name and sort"}, {"oid": "c13dedfdb7ce73cfdfe1d464e83765140336736c", "committedDate": "2021-03-12 14:59:22 -0700", "message": "2458: Adding Insufficient Astech warnings for MRMS and adding some more Astech/Medic pool functions"}, {"oid": "d2b11fb805eea82905ab0d8f846ca96bd69124e3", "committedDate": "2021-03-13 09:01:10 -0700", "message": "Fixing merge conflicts"}, {"oid": "902ebb67bf5dbe2e94cc32810992a2d1aa6c321c", "committedDate": "2021-03-13 09:02:31 -0700", "message": "Fixing merge conflicts"}, {"oid": "ec5843cb0d12174c7d5f83419268e5184d2d60f6", "committedDate": "2021-03-13 09:08:04 -0700", "message": "Fixing merge conflicts"}, {"oid": "1e0c0d260af35ecf86a9b8b9519c8cceee2e7028", "committedDate": "2021-03-13 11:47:11 -0700", "message": "Moving the unit market changes into an individual branch that contains some parts of the contract market changes"}, {"oid": "a5382b0386cb0354a4b3c870fdd8fee5e2f5330a", "committedDate": "2021-03-13 22:22:50 -0500", "message": "additional code review changes"}, {"oid": "fe6e045bb8acb2700cc38bd6a25ec62011977264", "committedDate": "2021-03-14 01:21:48 -0500", "message": "merge from upstream"}, {"oid": "48663cfaebb3a6a04f5680e7f755c532bd159779", "committedDate": "2021-03-14 10:58:03 -0600", "message": "Fixing merge conflicts"}, {"oid": "b8ccd096938dcbd22c56b4a93c87c78d770df189", "committedDate": "2021-03-16 10:03:47 -0600", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_AbstractUnitMarket"}, {"oid": "00db4b9f4381f0d6bcaadbbaa197f0be1c80d30b", "committedDate": "2021-03-17 12:29:14 -0400", "message": "Merge pull request #2445 from sixlettervariables/issue-2597-protect-duplicate-name-hash"}, {"oid": "a79e2e08ae5167e26dc37999b749296e47e179b9", "committedDate": "2021-03-17 12:27:27 -0600", "message": "Finishing the Unit Market Dialog"}, {"oid": "9d4975c56dc9ea4c18da5c7b146cfa794453f668", "committedDate": "2021-03-17 12:53:48 -0600", "message": "Swapping to EmptyUnitMarket instead of null"}, {"oid": "795721747293b0a0a0b4a5e12334158e9da303da", "committedDate": "2021-03-17 14:00:33 -0600", "message": "Fixing merge conflicts"}, {"oid": "aac2ced366aa376eb9fa78ab230f38e43d0c8362", "committedDate": "2021-03-17 21:16:52 -0400", "message": "code review changes"}, {"oid": "67d86a55c23420a76995a1457504c22f1b9cc48a", "committedDate": "2021-03-18 10:00:41 -0600", "message": "338: Base Free Time Sort"}, {"oid": "b634beb8d18a3ebafa13e3332256da259e3ef1c1", "committedDate": "2021-03-18 14:35:10 -0600", "message": "Finishing up working on abstracting out the Unit Market"}, {"oid": "8627de7d060ea44d3e33d04c259f8ab05f5bba9f", "committedDate": "2021-03-21 20:29:53 -0400", "message": "merge from upstream"}, {"oid": "04087a9bc33d0e3547e9c2dc68db496eac62b82b", "committedDate": "2021-03-21 20:10:23 -0600", "message": "Fixing merge conflicts"}, {"oid": "093eaeb8fbe362bb2d525d661180c433576aab9b", "committedDate": "2021-03-24 00:26:51 -0400", "message": "merge from upstream"}, {"oid": "2a2559d3ab5da713e7b8864ab0de458849dce6b6", "committedDate": "2021-03-24 09:29:25 -0600", "message": "Swapping over to using a three tiered rank setup"}, {"oid": "1e4e1993ec9f2278c7f326d28bcae5a7bff9c4a0", "committedDate": "2021-03-24 12:05:23 -0600", "message": "Heavy simplification of rank profession code"}, {"oid": "a57000e9696c4bf593f3215fa36543b2d13ed5ea", "committedDate": "2021-03-24 12:30:48 -0600", "message": "2196: Swapping to a standardized display wrapper class for rank display"}, {"oid": "b903aa7de36203afa40ede49922eb9e422fdcf43", "committedDate": "2021-03-24 13:07:46 -0600", "message": "1483: Adding Rank System import/export"}, {"oid": "e5b1d3a3fc6d825d722e496ad49832555fa65754", "committedDate": "2021-03-25 14:08:49 -0400", "message": "units deployed to StratCon tracks are ineligible for repairs"}, {"oid": "e7042962dd815937b9d91c1335d85ccec3647bf7", "committedDate": "2021-03-30 13:26:17 -0400", "message": "Merge pull request #2371 from Windchild292/dev_Windchild_CamouflageIcon"}, {"oid": "091d87a31e8cf5d1061ccf76a256bf990a0a623b", "committedDate": "2021-03-30 11:27:53 -0600", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_2449"}, {"oid": "37144650aef43bd5f3a8a14257376f2d6fe133f8", "committedDate": "2021-03-30 16:21:13 -0400", "message": "merge from upstream"}, {"oid": "5854d37bf8fbd63f741b9601ef373a16253a9b32", "committedDate": "2021-04-04 09:12:14 -0600", "message": "Adding the ability to create a custom rank system"}, {"oid": "db96404f216df48ce5321de053ce56015837d2cd", "committedDate": "2021-04-04 09:43:32 -0600", "message": "Renaming the campaign rank system methods to properly handle rank system changes"}, {"oid": "ae6bdf14123e6ac4ba92f5884b58b533b6cad2d3", "committedDate": "2021-04-04 10:12:54 -0600", "message": "Moving personnel rank changes to their proper location within person"}, {"oid": "19f0f0ce5d069f8f6f4f481cda04cdee3e05402a", "committedDate": "2021-04-04 11:59:18 -0600", "message": "Working on rank import/export"}, {"oid": "a34e385bf50ab28870531fe663d288b7b98b2697", "committedDate": "2021-04-06 10:54:55 -0600", "message": "Fixing and improving validation issues"}, {"oid": "3f3d7b237f61dd118eeb39087eb7fe9de6be03a0", "committedDate": "2021-04-06 11:53:59 -0600", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_GenealogyIdReference"}, {"oid": "80202c7f73397f3bc36193b0f3e2fce444bc4070", "committedDate": "2021-04-06 16:04:51 -0600", "message": "Fixing merge conflicts"}, {"oid": "ab655fb9abe6d2b9be4e20eba7e4c74b4b8e5c22", "committedDate": "2021-04-06 16:20:53 -0600", "message": "Fixing merge conflicts"}, {"oid": "729ef155ccdbaca3a1f23f1e57309d3b973851da", "committedDate": "2021-04-06 16:38:48 -0600", "message": "Fixing merge conflicts"}, {"oid": "a4c29e55f023d3416dd5e3f18a9d2061ab841fa1", "committedDate": "2021-04-06 17:56:58 -0600", "message": "Fixing merge conflicts"}, {"oid": "47bf0ed7fa9b09a4d76b634d900cceac953e17ed", "committedDate": "2021-04-06 19:54:46 -0600", "message": "Fixing merge conflicts"}, {"oid": "c2d264c23786de4ea703861360c3bcb46e79c5ac", "committedDate": "2021-04-07 00:13:59 -0400", "message": "merge from upstream"}, {"oid": "a5d70a5c672e494c7ec8be19e05d642b0259c9c4", "committedDate": "2021-04-07 14:24:17 -0600", "message": "Implementing multiple new procreation options and moving it to work based on a supplied date"}, {"oid": "18e6e46b095f8bbb1c623c60fd3aa177b7fe8682", "committedDate": "2021-04-09 09:22:39 -0600", "message": "Fixing merge conflicts"}, {"oid": "ae01b6e6d0fa55b766f741fa6fb35f727fff344b", "committedDate": "2021-04-12 09:45:59 -0600", "message": "Creating ScenarioStatus Enum and updating how scenarios are gotten"}, {"oid": "133e5865e2ee8dd5900b26dfe5f9aa0459a1a04c", "committedDate": "2021-04-14 11:31:25 -0400", "message": "multiple bugs with ignoring scenarios; ground pirats on air maps"}, {"oid": "3d8916caadfbc4085e509724142f929fc9d7f1d5", "committedDate": "2021-04-16 17:31:08 -0400", "message": "add text resources; remove campaign scenarios after ignoring in stratcon UI"}, {"oid": "2e00ea9a5b972b07d7446e75a06d3d493ac69426", "committedDate": "2021-04-16 21:14:35 -0400", "message": "code review changes"}, {"oid": "becffdc94075004fa3890bb36799389a48105c33", "committedDate": "2021-04-16 23:10:50 -0400", "message": "code review changes; data fix; stop nagging once user hits 'no' once"}, {"oid": "d71320d4f7a9ae41189a6b4651979960cb9dcc0f", "committedDate": "2021-04-20 21:55:21 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_2449"}, {"oid": "39603f48e1d441dd892227bef76e398c95cd4852", "committedDate": "2021-04-20 21:59:13 -0400", "message": "Fixing merge conflicts"}, {"oid": "3f7306636c42a999caf904b8d513f267243def42", "committedDate": "2021-04-20 22:01:54 -0400", "message": "Fixing merge conflicts"}, {"oid": "1c0e5821f637a666ef7632b5d821db62d76f624d", "committedDate": "2021-04-20 22:20:35 -0400", "message": "Fixing merge conflicts"}, {"oid": "9b9545c3b2e6890b9bef97677c61bb175cd5cc89", "committedDate": "2021-04-21 00:39:22 -0400", "message": "allow extra time for maintenance"}, {"oid": "de34b46d2f53c172612ebe5aa1abffe16b249f06", "committedDate": "2021-04-23 10:23:26 -0400", "message": "Bugfixing"}, {"oid": "b82fd9901fd0447da0211522ffc97ccae5c708ac", "committedDate": "2021-04-23 11:36:57 -0400", "message": "Fixing merge conflicts"}, {"oid": "bb7b0c375b9a2fd6baeced3e5e94501eb2e636ed", "committedDate": "2021-04-23 13:03:53 -0400", "message": "Moving into selectors folders"}, {"oid": "1ba164a58381a4be88ec479fee5841c1b8cdcf99", "committedDate": "2021-04-23 13:15:11 -0400", "message": "Making initial faction changes for constructors and ordering"}, {"oid": "fc7a0539b85c7af6a166ed9d779e7b723307b883", "committedDate": "2021-04-23 15:57:04 -0400", "message": "Making RandomOriginOptions, which will allow its use in multiple locations"}, {"oid": "1741bea67582d0555d094cbdd0fa977eec707bcc", "committedDate": "2021-04-24 22:10:27 -0400", "message": "fix scenario date/force resets"}, {"oid": "cebc3d0c231e54580eb29e4756f549b702b9ace1", "committedDate": "2021-04-27 14:41:42 -0400", "message": "Merge pull request #2462 from Windchild292/dev_Windchild_2460"}, {"oid": "b0c3badc393ff67ccba2cbe34623ca496c576782", "committedDate": "2021-04-27 14:42:27 -0400", "message": "Merge pull request #2352 from Windchild292/dev_Windchild_PersonnelRoles"}, {"oid": "138d08410b585fae3ba4af354d18d2b15d5d36c8", "committedDate": "2021-04-27 14:48:43 -0400", "message": "Fixing merge conflicts"}, {"oid": "5f426e90c201a24d339c0322897809938b79db5a", "committedDate": "2021-04-27 15:08:01 -0400", "message": "Fixing merge conflicts"}, {"oid": "7b4772ec38db2aa8d657d0a22ed7868d0c4f6117", "committedDate": "2021-04-27 15:45:52 -0400", "message": "Fixing merge conflicts"}, {"oid": "ce0b3b652feb9205fb4ed8cc3ae599bb5da9a308", "committedDate": "2021-04-27 15:47:48 -0400", "message": "Fixing merge conflicts"}, {"oid": "f7d684241f42639eb35d60508c39dbb00b0d9dbc", "committedDate": "2021-04-28 10:56:49 -0400", "message": "Fixing merge conflicts"}, {"oid": "8dd83b6c46f8f2454ba4d4accfe8176c58e398d7", "committedDate": "2021-04-29 23:22:27 -0400", "message": "Fixing merge conflicts"}, {"oid": "87033ef81af06d5a8c2af9d93a9b9057e49f0fde", "committedDate": "2021-05-01 17:09:56 -0400", "message": "Fixing merge conflicts"}, {"oid": "815f8fa858fdbf707019709a5d51524b5e61472a", "committedDate": "2021-05-04 14:12:54 -0400", "message": "Dependent Flag Swapover"}, {"oid": "66f6a880e1b615fb97de9757be649fc18c10f049", "committedDate": "2021-05-04 19:52:08 -0400", "message": "Implementing auto-hiring pool on new day"}, {"oid": "bbcc984be566d1587a598efc974fb1dbb399868a", "committedDate": "2021-05-05 18:25:22 -0400", "message": "Fixing merge conflicts"}, {"oid": "741d61daa6ac3570f7a3c569ee6e6dc87a902441", "committedDate": "2021-05-08 20:32:38 -0400", "message": "Fixing merge conflicts"}, {"oid": "227d6642ef68511eb067588bdf263aa2ad88f421", "committedDate": "2021-05-09 10:13:42 -0400", "message": "Creating the backend implementation for random procreation modules"}, {"oid": "e0faed52760616365379933d91f9343f58c61cb4", "committedDate": "2021-05-09 14:30:58 -0400", "message": "Renaming the directory from random procreation to procreation"}, {"oid": "7943361f04c7c5cc1753852ddba3a77d8259ab57", "committedDate": "2021-05-11 09:52:44 -0400", "message": "2607: Starting to work on redoing the salvage calculations"}, {"oid": "0539aea6159ca7cfbbb77a035ffb6c51d590d29f", "committedDate": "2021-05-11 10:40:37 -0400", "message": "2607: Properly calculating and paying for payment overages"}, {"oid": "33d43f4fe9a41925e3cc417f5d782c19f097ad63", "committedDate": "2021-05-15 06:53:31 -0400", "message": "Merge pull request #2583 from Windchild292/dev_Windchild_DependentFlagSwapover"}, {"oid": "55da24b03b3ecbc71f7d6ab739e1820f1814fda1", "committedDate": "2021-05-17 13:46:12 -0400", "message": "Creating AtB Contract Type and AtB Morale Level enums"}, {"oid": "470df7bcd395e57ffe3f3e59660f0e468cdcfaf1", "committedDate": "2021-05-18 01:31:38 -0400", "message": "fix multiple issues generating fixed objective scenarios"}, {"oid": "ffcd06cfa996127e858ea60096b58286f97a8a8a", "committedDate": "2021-05-19 09:33:39 -0400", "message": "Implementing save code swapover"}, {"oid": "c03f4deaeb4d632a5e2e614ae5204da255eea805", "committedDate": "2021-05-22 22:01:49 -0400", "message": "Merge pull request #2608 from Windchild292/dev_Windchild_2607"}, {"oid": "f9cf763bd4ff9a8e017e54464ad20989c2e772d3", "committedDate": "2021-05-23 23:33:39 -0400", "message": "Fixing merge conflicts"}, {"oid": "b5b8facc5de91af84188412dc8d1ec3df00e3ae6", "committedDate": "2021-05-24 13:55:12 -0400", "message": "Fixing merge conflicts"}, {"oid": "1b33879affd0101e7870d5696137e354b636d342", "committedDate": "2021-05-24 13:57:36 -0400", "message": "Fixing merge conflicts"}, {"oid": "f4c2aadcbf8a9e3bc45db1e7227160e36f43d47a", "committedDate": "2021-05-24 14:00:22 -0400", "message": "Merge branch 'master' into dev_Windchild_CamouflageRework"}, {"oid": "fe024592b6ac70b9cf1a9cd546a54ebc8bb02363", "committedDate": "2021-05-24 17:16:21 -0400", "message": "2625: Properly Clear Tech Units on Person removal/retirement"}, {"oid": "530decc0b587e53087c8cacbe31aeba13dd82f41", "committedDate": "2021-05-29 11:32:44 -0400", "message": "Fixing merge conflicts"}, {"oid": "156500be4e08594aeaf3efa424938f295b2ed86e", "committedDate": "2021-05-29 16:04:26 -0400", "message": "Phase one of Campaign Preset rework"}, {"oid": "34d76d4e22674638bd3ce602a713238ff5c203b8", "committedDate": "2021-05-30 14:33:28 -0400", "message": "Phase Two: finishing internal work and starting on GUI implementation"}, {"oid": "12f96f2ab3335b805508c31bbbc08a9bcf5491d7", "committedDate": "2021-05-30 21:57:28 -0400", "message": "Fixing merge conflicts"}, {"oid": "b109f86e86e8aba9c5b4aa279919f2d6547979b9", "committedDate": "2021-05-31 10:38:11 -0400", "message": "Fixing merge conflicts"}, {"oid": "65a009b4cf6307795c815aacdb82feb8fba0a01d", "committedDate": "2021-05-31 17:00:21 -0400", "message": "Fixing merge conflicts"}, {"oid": "14d482cda0564e28b6c5ea95e20725e2200f51ff", "committedDate": "2021-05-31 17:57:20 -0400", "message": "Merge branch 'master' into maintenance_extra_time"}, {"oid": "00a30fe49ee531dda71cb88bacc2f56dbe0a5b9e", "committedDate": "2021-05-31 18:05:23 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_2654"}, {"oid": "fa54f8e9f392dc2f02cb5b1b5bc9e8c428a88e61", "committedDate": "2021-06-02 12:29:42 -0400", "message": "Creating a base ignorable nag dialog for MekHQ and implementing it in all current new day nags"}, {"oid": "2509a0841acae929e7340ae5fe4d01f7bf437d40", "committedDate": "2021-06-02 16:20:48 -0400", "message": "Fixing merge conflicts"}, {"oid": "6b416ee90791ecb016edf0ae5b5c0e16ebdd4760", "committedDate": "2021-06-09 16:05:55 -0400", "message": "Fixing merge conflicts"}, {"oid": "d36c47d7aaa8978e4d523b2031d299babd654e2a", "committedDate": "2021-06-09 16:08:35 -0400", "message": "Fixing merge conflicts"}, {"oid": "7fe956938b8b76f05f395b681f8bd5f4bd02d25a", "committedDate": "2021-06-09 21:27:13 -0400", "message": "Fixing merge conflicts"}, {"oid": "055b02a76318d18eed5ad27a93333893cf8b74db", "committedDate": "2021-06-09 22:30:38 -0400", "message": "Fixing merge conflicts"}, {"oid": "e8c2b13279e2b5d226f4de5b350e2d12ff468577", "committedDate": "2021-06-11 00:26:36 -0400", "message": "Fixing merge conflicts"}, {"oid": "d4b45a4c9543d0786feacc4344d364fee2997970", "committedDate": "2021-06-11 12:46:28 -0400", "message": "Fixing merge conflicts"}, {"oid": "2560bdda30482870c73884470b53cb579bcaa47a", "committedDate": "2021-06-14 13:25:17 -0400", "message": "Force icon implementation migration from outdated previous branch"}, {"oid": "6fd836ff4e8a233aa293e2a3fc08cd3316f64b66", "committedDate": "2021-06-14 14:23:04 -0400", "message": "Adding UnitIcon, GM Tools implementation, and baseline for export"}, {"oid": "eaf4453f2f1f40707d9594de5dd6aa83d594b776", "committedDate": "2021-06-14 18:04:32 -0400", "message": "Applying personal code review changes and starting unit icon code"}, {"oid": "e1a7f7166de5f36fa0c44b7151478c944e6a4b89", "committedDate": "2021-06-21 13:16:19 -0400", "message": "Apply overtime to the last chunk worked as well #2679"}, {"oid": "9c62597332ac0ba24004132e537ba0cf049741e3", "committedDate": "2021-07-01 12:35:33 -0400", "message": "Fixing merge conflicts"}, {"oid": "809c6366e1ce1dea3f4b2fa21841aab6639992a4", "committedDate": "2021-07-10 11:47:52 -0400", "message": "Finishing the portrait swapover"}, {"oid": "0ddba79849d418947ba1ce309a4c673ac78292d4", "committedDate": "2021-07-10 20:58:49 -0400", "message": "Bugfixing, phase 1"}, {"oid": "10a9609cabffc8f5e7068b6c0c33c0f65f796508", "committedDate": "2021-07-12 18:39:55 -0400", "message": "Fixing unit tests"}, {"oid": "06664ff8286a85fe165e5f92aaaf22326e692c90", "committedDate": "2021-07-15 10:22:09 -0400", "message": "Merge branch 'master' into dev_Windchild_476"}, {"oid": "e0e383e2453514ee7c9c7abc9214a2a1a869a068", "committedDate": "2021-07-15 10:34:25 -0400", "message": "Fixing merge conflicts"}, {"oid": "7211585d4a34159d5c80c9ea30fa44bc2746c1b4", "committedDate": "2021-07-17 20:03:19 -0400", "message": "Fixing a few potential divide by zero issues"}, {"oid": "a3eb7d3dfe3477e32117d175e717023f539795eb", "committedDate": "2021-07-17 20:11:58 -0400", "message": "Further cleanups from personal review"}, {"oid": "21a75e1c9ca5516bb7394f30fa2c0b4d9a68b9ad", "committedDate": "2021-07-17 20:27:51 -0400", "message": "Further cleanups, and adding an astech team size constant"}, {"oid": "35bffb052c1b608df03fb41f6548a3e9f847cca6", "committedDate": "2021-07-18 10:43:10 -0400", "message": "Fixing NPE warning and cleaning up the if statement"}, {"oid": "a7670828c4762e3852dbd248b348c2dd371b5018", "committedDate": "2021-07-18 12:12:40 -0400", "message": "Fixing possible confusion of local and field warnings"}, {"oid": "951b55f7a5fb6036e67897e709cd6a0dbbb45b39", "committedDate": "2021-07-18 12:33:08 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_Procreation"}, {"oid": "61cc2fd1669914bef276e018cb7562be422b1f7c", "committedDate": "2021-07-18 14:30:17 -0400", "message": "Removing Deprecated Usages: Logger swapover"}, {"oid": "542307adf490f10930d9470ff64879b4b7ee6b0a", "committedDate": "2021-07-20 10:11:31 -0400", "message": "Moving crew null check and fallback logic into Campaign::getShorthandedModForCrews"}, {"oid": "f6e661dba426e63388e9b57d224a7090006e3203", "committedDate": "2021-07-20 10:18:55 -0400", "message": "Merge pull request #2751 from Windchild292/dev_Windchild_AstechDivideByZero"}, {"oid": "f3bd90fefb0af89a7177be76f70aeed033a7b258", "committedDate": "2021-07-20 10:20:25 -0400", "message": "Fixing merge conflicts"}, {"oid": "424407a51980930adead83bbfa918bf2b0d8a441", "committedDate": "2021-07-20 21:09:32 -0400", "message": "Fixing merge conflicts"}, {"oid": "497f1345950b39b1eb1e2d1389b63a7fcd5eef14", "committedDate": "2021-07-20 21:26:53 -0400", "message": "Fixing merge conflicts"}, {"oid": "bc21146f53fc23bdfd1f5f4273f07b588b0904e2", "committedDate": "2021-07-24 10:15:39 -0400", "message": "Fixing merge conflicts"}, {"oid": "a5e9303ebeafcd74e0348b8b2f767c5f8e12c8cb", "committedDate": "2021-07-26 12:32:33 -0400", "message": "2558: Swapping removePerson to be object instead of id based"}, {"oid": "0a76a9693556237907de0f6e2a5a08f48dcfd3be", "committedDate": "2021-07-26 12:38:50 -0400", "message": "2558: Custom message for when dependants leave"}, {"oid": "1babc7de6f9de3b1f517061f1c249c3339f13e10", "committedDate": "2021-07-26 12:54:49 -0400", "message": "2558: Adding unique dependent add message"}, {"oid": "b214bdb7975aabd1cdc8d39cb9f1fdea3541b58d", "committedDate": "2021-07-26 15:13:02 -0400", "message": "Fixing merge conflicts"}, {"oid": "d86c1c8c70ae0bcc2a9d6dd09e7fe963745b5e37", "committedDate": "2021-07-26 22:20:42 -0400", "message": "Merge pull request #2478 from Windchild292/dev_Windchild_AbstractUnitMarket"}, {"oid": "d83ce12b4886460ba57e84afbf15b20e30fab693", "committedDate": "2021-07-28 15:48:34 -0400", "message": "Isolating RATs into the RAT Tab"}, {"oid": "3d303b442ab8d664c56fd8709d970f86c7eed83f", "committedDate": "2021-07-30 10:40:29 -0400", "message": "Loan code cleanup and refactoring"}, {"oid": "56910a666af8115ec4e364b98a16fc009c1a65b5", "committedDate": "2021-07-30 11:11:21 -0400", "message": "Fixing merge conflicts"}, {"oid": "ec7e4bc4aeed27a5b835b44d295642228bcc16c3", "committedDate": "2021-08-10 12:37:47 -0400", "message": "Transaction Type Enum"}, {"oid": "497976540984392426f984acd40477886555e06d", "committedDate": "2021-08-10 15:25:55 -0400", "message": "Fixing merge conflicts"}, {"oid": "1faa42c3d120f62fa60bebc946c56cae3ba293f8", "committedDate": "2021-08-10 15:47:16 -0400", "message": "Doing some personal review cleanup"}, {"oid": "be94a7ab35307e2b345d967cbd0163417ea9802d", "committedDate": "2021-08-12 21:28:51 -0400", "message": "bulletproofing for a couple of individual unit actions"}, {"oid": "01f8aa5c3d90cd2d8b553c5c8c73a336af524e8b", "committedDate": "2021-08-13 22:07:09 -0400", "message": "2798: Adding total XP earnings tracking"}, {"oid": "771c3107183e31fa9da9b2e417a6fc0d0b673a48", "committedDate": "2021-08-14 00:07:09 -0400", "message": "274: Moving Era definitions to a file"}, {"oid": "795d3aba4875a600dd0a6ec91a10cb7e90814c6c", "committedDate": "2021-08-18 12:48:20 -0400", "message": "Removing Person's Campaign save and switching to full pass-by-reference for Campaign"}, {"oid": "4e80bdad1f20ebfb53cfe559ade8975594f3d362", "committedDate": "2021-08-21 12:12:11 -0400", "message": "2754: Properly clearing Narc and iNarc Flags during scenario resolution"}, {"oid": "ed447da30212105694957e35687f1bfedd6b56b0", "committedDate": "2021-08-24 13:11:20 -0400", "message": "Merge pull request #2805 from Windchild292/dev_Windchild_274"}, {"oid": "7120d3b0aa69ebd282e855a4b2a47bda4697ba78", "committedDate": "2021-08-24 13:14:09 -0400", "message": "Merge pull request #2793 from Windchild292/dev_Windchild_TransactionType"}, {"oid": "9e7480b600f9290c00f5f082dd91201999d12f42", "committedDate": "2021-08-24 13:14:19 -0400", "message": "Merge pull request #2804 from Windchild292/dev_Windchild_2798"}, {"oid": "70aa4b94439c59d6e5de9d6191a3c0a02365e644", "committedDate": "2021-08-24 13:39:42 -0400", "message": "Fixing merge conflicts"}, {"oid": "0e72a8bc212f26b8d9b7bb789b0c1f84f1426c78", "committedDate": "2021-08-24 13:42:42 -0400", "message": "Fixing merge conflicts"}, {"oid": "3a01897bb20c8be27823164f09aca9af1aa3360d", "committedDate": "2021-08-24 13:53:59 -0400", "message": "Fixing merge conflicts"}, {"oid": "bacc8f3e733e0cd4cc0fa629ced5d3b5079abc76", "committedDate": "2021-08-24 17:23:41 -0400", "message": "Fixing merge conflicts"}, {"oid": "e273d7035001140a977ebe3299d17602ef52d498", "committedDate": "2021-08-28 17:37:23 -0400", "message": "Fixing merge conflicts"}, {"oid": "59fca0be576b219f25123793a2118255168d1c03", "committedDate": "2021-08-29 11:15:40 -0400", "message": "Modularized Marriage"}, {"oid": "6a48665a09b5cfd3b2309975077163fae687c39e", "committedDate": "2021-08-29 14:41:32 -0400", "message": "Adding creation dialog and bugfixing"}, {"oid": "0a89d7421946ba75d7d926af996b27e9e994a911", "committedDate": "2021-08-31 14:50:25 -0400", "message": "Fixing merge conflicts"}, {"oid": "0f4e17188d8360baf639cbc66dd29da85336be81", "committedDate": "2021-08-31 15:28:05 -0400", "message": "Applying changes from personal review"}, {"oid": "bd9dded105bfbfdf64e7b10e2059f2633326c113", "committedDate": "2021-08-31 15:39:04 -0400", "message": "Swapping to weighted double map"}, {"oid": "5eaf88579bd60bfee3c39a936a9d647a4eb1de4f", "committedDate": "2021-08-31 16:45:21 -0400", "message": "Reworking to use random origin options instead of the internally stored values"}, {"oid": "bbccfa2dcef0be4fbb07cd3af6cdbd15d7ced036", "committedDate": "2021-08-31 18:09:33 -0400", "message": "Missed two cases"}, {"oid": "7acc107b13f019250d4c17ee0b034a3aa263f56b", "committedDate": "2021-09-22 13:23:13 -0400", "message": "Removing MekHQ's version by swapping to a standardized suite version"}, {"oid": "f0a07bfbd15d93ff86dda49a32e0c489ca590a8c", "committedDate": "2021-09-22 17:45:34 -0400", "message": "Fixing merge conflicts"}, {"oid": "673baa71af916391d268ede436174881a85b7340", "committedDate": "2021-09-23 20:01:05 -0400", "message": "Adding the ability to automatically have the Operational Status indicator be determined on a new day"}, {"oid": "18f49cd8c6ba3721e84dce0b606a346b242cb49c", "committedDate": "2021-09-25 10:56:33 -0400", "message": "Moving training XP assignment to AtB new day processing"}, {"oid": "932423c6da7f04b29d61df88c014f5e432356eae", "committedDate": "2021-09-25 17:10:11 -0400", "message": "Standardizing and simplifying Campaign::getTargetForAcquisitioncalls"}, {"oid": "29c1cae15f03b025f7c6f4a4acdee0a86082eae8", "committedDate": "2021-09-25 17:12:00 -0400", "message": "2567: AtB Part Procurement uses proper campaign option"}, {"oid": "e1c6be34a128676429850de67af7a3c3e1d31c48", "committedDate": "2021-09-25 17:47:32 -0400", "message": "Fixing the active checks and removing the AtB casts"}, {"oid": "0527903721699cf7e73e7000ebc0db049c96529d", "committedDate": "2021-09-25 17:48:18 -0400", "message": "Removing testing logging"}, {"oid": "6dc414e21f3f3a8bf95c7059b83c0c34ced93e61", "committedDate": "2021-09-28 22:10:41 -0400", "message": "Merge pull request #2888 from Windchild292/dev_Windchild_2567"}, {"oid": "1065b3bc8de9084f48208d2ca865ce58ac8b3c41", "committedDate": "2021-09-28 22:29:59 -0400", "message": "Fixing merge conflicts"}, {"oid": "e55c3ca107c0d4a68d05b67ffa95825ee33af974", "committedDate": "2021-09-28 22:33:50 -0400", "message": "Fixing merge conflicts"}, {"oid": "6e5bfd3fe778c2db9847358b2bde358a61106707", "committedDate": "2021-09-28 22:38:51 -0400", "message": "Fixing merge conflicts"}, {"oid": "4fdc8e401f17fac7995037b1852f1ce2353c8e3f", "committedDate": "2021-09-28 22:48:35 -0400", "message": "Fixing merge conflicts"}, {"oid": "6f6fbddc710af1a588c433c779edd75f638a3c9d", "committedDate": "2021-10-01 10:01:00 -0400", "message": "Merge pull request #2880 from Windchild292/dev_Windchild_Version"}, {"oid": "901e499a75807e3ed64c36d0fcb8e1b024787c95", "committedDate": "2021-10-01 22:06:56 -0400", "message": "Fixing merge conflicts"}, {"oid": "b69522079e9a04b394864bbc4e43ff4c4e125cca", "committedDate": "2021-10-01 22:17:46 -0400", "message": "Fixing merge conflicts"}, {"oid": "84837c3610f8109aeb1985357178de229560de80", "committedDate": "2021-10-01 22:50:02 -0400", "message": "Fixing merge conflicts"}, {"oid": "4971437339838aa89b83785c6e9572074c95d245", "committedDate": "2021-10-02 23:21:37 -0400", "message": "Fixing merge conflicts"}, {"oid": "ed006b48eaf1c0580c2480f4f0000a3c1aed8361", "committedDate": "2021-10-10 00:10:05 -0400", "message": "Adding prisoner and clanner options for procreation"}, {"oid": "54e588d2cafddcab2f585c8ed5d6ee3c829d155f", "committedDate": "2021-10-10 01:00:00 -0400", "message": "Fixing merge conflicts"}, {"oid": "f211d8a677daa66c3a88f444de02a072ea5ab8a0", "committedDate": "2021-10-11 09:36:37 -0400", "message": "Fixing merge conflicts"}, {"oid": "3ee602c2e85defa1c3b05d08d609340d4b194883", "committedDate": "2021-10-11 09:37:52 -0400", "message": "Merge branch 'master' into dev_Windchild_2654"}, {"oid": "a30ac65fc45c76f1c1f6df0d70fa356aa41ef438", "committedDate": "2021-10-11 09:38:33 -0400", "message": "Merge branch 'master' into dev_Windchild_PersonnelRandomization"}, {"oid": "6f2f688a386d187426b7c92d4dd391c239d1ad70", "committedDate": "2021-10-11 09:43:54 -0400", "message": "Fixing merge conflicts"}, {"oid": "125e3093d92e248b4e50bc9131ff8fdeb35c6787", "committedDate": "2021-10-11 10:22:27 -0400", "message": "Fixing merge conflicts"}, {"oid": "f8e040a424e1e8d8f886b334ce6fe78c1c697e21", "committedDate": "2021-10-11 12:17:56 -0400", "message": "Standardizing canMarry and adding clanner/prisoner options"}, {"oid": "358b2e9bb76ee69f0aef232dc656af54a6b78e75", "committedDate": "2021-10-11 16:26:24 -0400", "message": "Creating a divorce module, with a daily percentage-based random divorce setup"}, {"oid": "8ecba07dd7693346338cbae98b207e87e1cfb844", "committedDate": "2021-10-14 20:08:46 -0400", "message": "Fixing merge conflicts"}, {"oid": "accf7255b1c83499aa1f79f5074b2bc44e3619f8", "committedDate": "2021-10-17 18:16:46 -0400", "message": "Fixing merge conflicts"}, {"oid": "4e4ae81eb8a7a923cdf8688c645023ce047c7d99", "committedDate": "2021-10-17 18:53:40 -0400", "message": "Fixing merge conflicts"}, {"oid": "08ec6ef40e59afa4cba88228bc29dba9745de098", "committedDate": "2021-10-18 15:52:01 -0400", "message": "Fixing merge conflicts"}, {"oid": "c67d7074f17378d88774a553e3fca273bc047705", "committedDate": "2021-10-18 15:52:40 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_PersonCampaign"}, {"oid": "1a7109d4439d3900ff897d0c9ba7091e88960ead", "committedDate": "2021-10-18 16:06:05 -0400", "message": "Fixing merge conflicts"}, {"oid": "2d589706bc9112203a6043adf8d7aed7d0f22301", "committedDate": "2021-10-18 16:07:21 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_ExpandedDeathStatus"}, {"oid": "84e2f57820e6fac4c9604e8fdf4c370849b21914", "committedDate": "2021-10-18 17:26:22 -0400", "message": "Fixing merge conflicts"}, {"oid": "033d776c732e66ad776357bee1afe597f5e77b20", "committedDate": "2021-10-30 15:59:59 -0400", "message": "Fixing merge conflicts"}, {"oid": "4e45f1a0a0bb1a3a900ecde01c8feab5a6e48329", "committedDate": "2021-11-01 17:31:14 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_AtBCompanyGeneration"}, {"oid": "258f3a3b0b352aa70b42b8c2034ebd6ab90d96ca", "committedDate": "2021-11-01 18:20:49 -0400", "message": "Fixing merge conflicts"}, {"oid": "7eea9a399d3d7400b1f2b94f6d772ad5416a0645", "committedDate": "2021-11-01 21:48:44 -0400", "message": "Fixing merge conflicts"}, {"oid": "3e4bca7cdb006005bd034f9621872250d0e96dbb", "committedDate": "2021-11-01 21:52:24 -0400", "message": "fixing merge conflicts"}, {"oid": "ab6c1c01bfb4498a16c3b9f69c18c4903900de83", "committedDate": "2021-11-01 22:00:44 -0400", "message": "Fixing merge conflicts"}, {"oid": "1b1b0f68f52f9d821ddc10f663a44fe6d72462cd", "committedDate": "2021-11-01 22:03:27 -0400", "message": "Fixing merge conflicts"}, {"oid": "f1ce41fa694124c762338f78fb45a139926db77c", "committedDate": "2021-11-01 22:20:22 -0400", "message": "Fixing merge conflicts"}, {"oid": "01163b1f4fae088ba39a2f1c1145d5653f71b9e8", "committedDate": "2021-11-01 22:22:46 -0400", "message": "Fixing merge conflicts"}, {"oid": "21600c478569436ab215402bbca4bbbeced841a8", "committedDate": "2021-11-03 20:59:54 -0400", "message": "Adding localization to all MekHQ resource maps"}, {"oid": "1a5ba2fa871c8629e951d371c2ee96cc29fa8f93", "committedDate": "2021-11-07 13:49:58 -0500", "message": "Fixing merge conflicts"}, {"oid": "a851f6c71e5a1f825a840c64be2bae6da2a77eaf", "committedDate": "2021-11-07 14:05:08 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_PersonnelRandomization"}, {"oid": "65eb27ddf74244265359db14e66c097eb2299df0", "committedDate": "2021-11-07 14:50:33 -0500", "message": "Fixing merge conflicts"}, {"oid": "1b57359b3037938ef8291d96de3449013c82b9a4", "committedDate": "2021-11-09 09:23:24 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_ForceIconRework"}, {"oid": "7e997be9838621bdc8bbecbcdbc908a7580060ed", "committedDate": "2021-11-12 21:17:13 -0500", "message": "Removing unused tech functionality"}, {"oid": "dbfb302ab8e895c2e37a41f10415f634d1039c4c", "committedDate": "2021-11-21 18:45:43 -0500", "message": "Expanding Finances newDay"}, {"oid": "b6ffe21c8b07b35f599a2f6bd11da05d7961af0d", "committedDate": "2021-11-23 10:10:34 -0500", "message": "Merge pull request #2028 from Windchild292/dev_Windchild_476"}, {"oid": "e51f331c5e7b430e3f560fee9ad58995fb944704", "committedDate": "2021-11-23 17:35:05 -0500", "message": "2962: AtB Campaigns Now Properly Load with Automatic or Tech Acquisition Skills"}, {"oid": "2f445541d15fd465279057131bf48ef28d9bd162", "committedDate": "2021-11-23 18:55:05 -0500", "message": "Fixing merge conflicts"}, {"oid": "c06560e49182859791bab98148ba76507f26612b", "committedDate": "2021-11-27 14:04:02 -0500", "message": "Merge pull request #2966 from Windchild292/dev_Windchild_2962"}, {"oid": "69f79e10f44976d90e36ca3acb5256b6dfc91548", "committedDate": "2021-11-27 18:49:28 -0500", "message": "Implementing the retirement and dependent stopgap options and option updates"}, {"oid": "135cb6d188296ed5db33602f9d65eacbedfb2fa3", "committedDate": "2021-11-27 22:07:45 -0500", "message": "Finishing dependent options and starting on retirement setup"}, {"oid": "a831b4695fd5ea8b1679db9068c85d9ac235f5e0", "committedDate": "2021-11-27 22:57:22 -0500", "message": "Starting to implement the new options"}, {"oid": "bfaed6eccd3257e67b05ad33dadd14cfd98ce560", "committedDate": "2021-12-02 18:05:59 -0500", "message": "Fixing merge conflicts"}, {"oid": "a31998dda25a2856241c10aba4f25a3e8975fc28", "committedDate": "2021-12-02 19:47:30 -0500", "message": "Fixing merge conflicts"}, {"oid": "8ae7fffc1b4afde219beaf122edf562b69a810d4", "committedDate": "2021-12-02 19:49:14 -0500", "message": "Fixing merge conflicts"}, {"oid": "c76c94e6cd4abe6e9f39bb57f5376dcfcf8c29ca", "committedDate": "2021-12-02 19:59:15 -0500", "message": "Fixing merge conflicts"}, {"oid": "8ad7114a3a34794b2d77e3d201f63d2c646a9361", "committedDate": "2021-12-04 14:45:10 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_RetirementDependentStopgaps"}, {"oid": "71c75c8296ecc0c857b75d51ff1c7984efa7e9aa", "committedDate": "2021-12-04 15:03:37 -0500", "message": "Finishing the internal code for the retirement and dependent stopgaps"}, {"oid": "4fb12af6ec7c26ac06d9a498016211a5e3889240", "committedDate": "2021-12-04 15:13:25 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_AssetTerms"}, {"oid": "ea8d42d1c280d499d207c0da43feb77a06b6dcba", "committedDate": "2021-12-04 16:10:22 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_MHQLocalization"}, {"oid": "97af694c5485ad1dbf5900228d3b5e6de405cb02", "committedDate": "2021-12-11 17:07:11 -0500", "message": "MekHQ Log4j 2 Implementation"}, {"oid": "122363fd9f8d850c11781b0ed50335433bcf418b", "committedDate": "2021-12-17 20:08:30 -0500", "message": "Fixing merge conflicts"}, {"oid": "b781d1a8406d5cfec346343463484ac519d1ee9a", "committedDate": "2021-12-20 13:20:34 -0500", "message": "Fixing merge conflicts"}, {"oid": "1bc3ac4e6576a7fa06103828a729d010f6a7b3ef", "committedDate": "2021-12-20 15:37:16 -0500", "message": "Actually print the stacktrace for individual exceptions"}, {"oid": "6e868f9400798d8cc8b61055b96de07531af1f34", "committedDate": "2021-12-20 16:21:24 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_RetirementDependentStopgaps"}, {"oid": "056f0d1e618651857b043280dbe226e80eb91d7a", "committedDate": "2021-12-20 16:27:18 -0500", "message": "Fixing merge conflicts"}, {"oid": "0e5e7675cc3b0606c97f5060a8fd53a69a90641e", "committedDate": "2021-12-20 16:31:40 -0500", "message": "Fixing merge conflicts"}, {"oid": "fb5e5a836a6100119706df72ee695325d77cf5af", "committedDate": "2021-12-20 16:36:02 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_PersonnelRandomization"}, {"oid": "30d7086d1389ed93b333b5eb614a4777498bd826", "committedDate": "2021-12-20 16:41:54 -0500", "message": "Fixing merge conflicts"}, {"oid": "c28b63e7005b99a3f80a9cb73b0255b8a2402db2", "committedDate": "2021-12-20 16:45:19 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_PersonCampaign"}, {"oid": "89a7c65022eabe2af8f5efaabaf9296aa79bde74", "committedDate": "2021-12-21 15:01:54 -0500", "message": "Fixing merge conflicts"}, {"oid": "23519608cf466cb86aef259568ba2aa8ddeb098a", "committedDate": "2021-12-21 16:00:33 -0500", "message": "Fixing merge conflicts"}, {"oid": "bbbe2057261145f9f51c2ac129b4cca3bcd2ccf6", "committedDate": "2021-12-21 16:04:48 -0500", "message": "Fixing merge conflicts"}, {"oid": "b65b9f1efdb52692da51596d934b6360533b2bf7", "committedDate": "2021-12-21 16:23:03 -0500", "message": "Fixing merge conflicts"}, {"oid": "a253bfba5d4bc811ccd0c6c17e659dff178fbbb0", "committedDate": "2021-12-21 16:30:49 -0500", "message": "Fixing merge conflicts"}, {"oid": "0caff4e79e691213a2621323b94dfadfa73c9060", "committedDate": "2021-12-22 08:16:56 -0500", "message": "Fixing merge conflicts"}, {"oid": "a44cee38dbe9808a000178e575eb90d60a401175", "committedDate": "2021-12-23 12:26:57 -0500", "message": "Merge pull request #3015 from MegaMek/dev_Windchild_3326"}, {"oid": "ea6a179e03d1519afc3236abe50978edc43fc3d8", "committedDate": "2021-12-23 12:32:38 -0500", "message": "Merge pull request #2812 from Windchild292/dev_Windchild_PersonCampaign"}, {"oid": "d88588cf01f272577d96e1ff2a27c7286def7db9", "committedDate": "2021-12-23 21:04:47 -0500", "message": "Fixing merge conflicts"}, {"oid": "94ca7dff3bd09ef2fbb82e5d3ce0a5dccab335a8", "committedDate": "2021-12-28 18:08:30 -0500", "message": "Fixing merge conflicts"}, {"oid": "5089ba272b3ca25ab52ca4fcc1bef3766377f2ec", "committedDate": "2022-01-08 13:22:56 -0500", "message": "Fixing merge conflicts"}, {"oid": "375a9524c6382f5214c980bf8ad8b07a22f75120", "committedDate": "2022-01-08 13:28:11 -0500", "message": "Fixing merge conflicts"}, {"oid": "0e0aa7780df25016999f813dc36110599ee1b380", "committedDate": "2022-01-08 13:40:54 -0500", "message": "Fixing merge conflicts, round 2"}, {"oid": "5cc8ac688c67e1e1817c0cbb4a78eaf7dd0a477b", "committedDate": "2022-01-08 14:03:23 -0500", "message": "Fixing merge conflicts"}, {"oid": "eb7c6c828694fb624746168dbb4c35b1289f6e11", "committedDate": "2022-01-08 17:22:10 -0500", "message": "Fixing merge conflicts"}, {"oid": "dcb18ce61944010cc634325d3f46ccaf907758be", "committedDate": "2022-01-08 18:01:56 -0500", "message": "Cleaning up a bit of person creation"}, {"oid": "4d86865e1498a1312a21b91323c33d18f33a8dc9", "committedDate": "2022-01-09 11:12:58 -0500", "message": "Adding missing nullable tag and fixing missing null handling for faction selector"}, {"oid": "6023dd377efcb7802f6c905de61231ec50fee675", "committedDate": "2022-01-09 11:48:57 -0500", "message": "Missed that a null faction is fine for planet generation"}, {"oid": "4bddfb6f0d3906ed96120594d84d4e476e42d971", "committedDate": "2022-01-19 17:09:56 -0500", "message": "Tearing out MekHQ/src/mekhq/MekHqXmlSerializable.java"}, {"oid": "cc823a078ddc1a8924d1e2c02e93375a6b27d327", "committedDate": "2022-01-19 19:19:33 -0500", "message": "Removing all serialVersionUID uses in MekHQ"}, {"oid": "c9ac45226f5852f8bb76af479c9d962105bbbed7", "committedDate": "2022-01-19 20:02:33 -0500", "message": "Mass spacing fixes"}, {"oid": "be1cfbd484c6adc1c8f66578c5bfe94b39047b3c", "committedDate": "2022-01-20 09:59:55 -0500", "message": "Applying changes from initial personal review"}, {"oid": "2c71e119c210a9c95690eae19a0cdab5beb69bd6", "committedDate": "2022-01-20 10:30:23 -0500", "message": "Updating everything using final PrintWriter so that they're up to date, so I have a nice way to track what's updated and what is not"}, {"oid": "bc2c2966614f17d153b03c3087b46c1a4b44b969", "committedDate": "2022-01-21 19:03:24 -0500", "message": "SuiteOptions: Naming standardization and finishing initial setup"}, {"oid": "f3b9f5b924748acfd1ad404aed3ae99e4382b885", "committedDate": "2022-01-24 12:24:25 -0500", "message": "Fixing merge conflicts"}, {"oid": "e8395d1d642870050d705d4fac2a0df255cea722", "committedDate": "2022-01-24 12:28:09 -0500", "message": "Fixing merge conflicts"}, {"oid": "d91ac31cb62f0842eb972ad045bdab45c9c3f814", "committedDate": "2022-01-25 17:42:20 -0500", "message": "PIND Migration"}, {"oid": "9fac7b8c6dfc3095299a8f2b2698099818ff5f0a", "committedDate": "2022-01-26 20:37:16 -0500", "message": "Fixing merge conflicts"}, {"oid": "68ef07dd4c65a1c3d546c2da6f01575f3f3c3ad6", "committedDate": "2022-01-26 20:47:30 -0500", "message": "Fixing merge conflicts"}, {"oid": "4d88d0c53f0069b883caece02ec49678aeeeef7e", "committedDate": "2022-02-01 14:20:52 -0500", "message": "Fixing merge conflicts"}, {"oid": "add1e0e345d4bfcfbff554d48b42166703dc9742", "committedDate": "2022-02-03 13:52:45 -0500", "message": "Fixing merge conflicts"}, {"oid": "01633b8cfb55eee9c3240bff79e0122fbc54386b", "committedDate": "2022-02-13 13:10:41 -0500", "message": "Fixing MHQ's Javadoc Build"}, {"oid": "adeb4ea20e6a8eeb365e6887e79ce6a4dd8b18dd", "committedDate": "2022-02-22 19:16:53 -0500", "message": "Initial code for creating standardized code utilities"}, {"oid": "483ec96cd157a857a1e7155be64dc5ef7c72346a", "committedDate": "2022-02-24 20:32:12 -0500", "message": "Migrating a bunch of MHQ utility code to MM"}, {"oid": "88ce57b5171b2d38c738446af4ab779e6d17ae7f", "committedDate": "2022-02-28 20:23:04 -0500", "message": "3146: Properly handling null force to null force reassignment messages"}, {"oid": "c94fc298803b71e6ac75eb935cabba921a8a6571", "committedDate": "2022-03-06 11:49:08 -0500", "message": "Fixing merge conflicts"}, {"oid": "d4b96fd69deddff97744565c43e2d56b8e31c53f", "committedDate": "2022-03-07 17:19:54 -0500", "message": "Fixing two accidentally kept negations for Random Dependents Removal"}, {"oid": "48f8d58a75de4c6a5c2868f65554dad4d3a14fd5", "committedDate": "2022-03-09 10:01:16 -0500", "message": "Merge pull request #3148 from Windchild292/dev_Windchild_3146"}, {"oid": "1c307bc93de3a536ba17dd566a9fd49bd0046c8e", "committedDate": "2022-03-21 18:22:40 -0400", "message": "Fixing a bunch of spacing readability issues"}, {"oid": "913c01672fe040a25b473e8142805d2ff4ebfa1b", "committedDate": "2022-03-22 18:24:32 -0400", "message": "Modernizing Lambdas to Method References"}, {"oid": "cc400b9fa7512b6b91ed8a8f434f365b442306a8", "committedDate": "2022-03-22 23:54:28 -0400", "message": "Modernize List::size to List::isEmpty and String::isEmpty to String::isBlank"}, {"oid": "4699f3e482938fb8c322f1daf1bc3b42d78c2a64", "committedDate": "2022-03-28 22:35:03 -0400", "message": "Fixing unused imports"}, {"oid": "494b38fcedcda31bef2e6f701152a47ce1b0e397", "committedDate": "2022-04-11 00:16:20 -0400", "message": "Issue #3196: Fixing Remove Unit NPE"}, {"oid": "4e863ffcf0393e88ebb25b76dd314d994b2cfad5", "committedDate": "2022-04-12 17:18:21 -0400", "message": "Death Module: Initial Commit For the New Setup"}, {"oid": "2e8d0c32fa5c09c862fb6c5625a58d206b70ba34", "committedDate": "2022-04-12 18:20:50 -0400", "message": "Cleaning up and modernizing the death code"}, {"oid": "be00026349d450b7f2fb262f11d161ca249c5ab5", "committedDate": "2022-04-17 21:14:46 -0400", "message": "Standardizing Personnel Flags into their own setup instead of multiple previous setups"}, {"oid": "114c9ef6cbeb045e3cc88716964526ee70372408", "committedDate": "2022-05-04 10:10:43 -0400", "message": "3260: Clear Makeshift Clubs Upon Return To MekHQ"}, {"oid": "e0f4dd9d34946716a517c0b42401b33740c51f30", "committedDate": "2022-05-06 19:58:04 -0400", "message": "Renaming the civilian role check to isCivilian, and adding missing logging for a civilian error"}, {"oid": "5b35da02f167e0d577e779b21dfd3cbd2110f92b", "committedDate": "2022-05-06 22:48:48 -0400", "message": "Merge pull request #3266 from Windchild292/dev_Windchild_RetirementDependentOrNoneLogging"}, {"oid": "c6db6046da0de4e7d40d7ac930a453d2805f6a92", "committedDate": "2022-05-10 18:34:57 -0400", "message": "Merge branch 'MegaMek:master' into dev_Windchild_AssetTerms"}, {"oid": "6b720cfa833458c385546a054b762d2745c37ce1", "committedDate": "2022-05-14 10:11:35 -0400", "message": "Fixing method name"}, {"oid": "72a352ee60bdec3467fa07665ed9753cc399b6f9", "committedDate": "2022-05-15 12:41:06 -0400", "message": "Swapping MekHQ to JUnit 5"}, {"oid": "0a2050177f55c5540d898835cfd48e4f976bb4cb", "committedDate": "2022-05-25 16:54:44 -0400", "message": "Modernizing finances XML read and write"}, {"oid": "8b34d18aa825a1416df7b1a8ecb2bb898cea1026", "committedDate": "2022-05-25 18:27:34 -0400", "message": "Renaming MekHqXmlXmlUtil to utilities/MHQXMLUtility"}, {"oid": "3c19a5aba0df7a2035e7a81e61a8b5543cb13a9c", "committedDate": "2022-05-25 18:36:42 -0400", "message": "Fixing merge conflicts"}, {"oid": "4a84ac8700a2d5bf7624dd25d4c77cff34478500", "committedDate": "2022-05-25 23:32:29 -0400", "message": "Merge branch 'master' into dev_Windchild_CurrentLocationXML"}, {"oid": "32aaaac33b8e53a355c373879ee4de9f91747c39", "committedDate": "2022-05-26 07:16:40 -0400", "message": "Merge branch 'master' into dev_Windchild_PersonFlags"}, {"oid": "9472637ad3cb3c27cba2c318c5ccdf022ca56d86", "committedDate": "2022-05-26 08:10:57 -0400", "message": "Fixing merge conflicts"}, {"oid": "f35709d1278c76d1ea7c10485071e0097b1aebf0", "committedDate": "2022-05-26 08:39:19 -0400", "message": "Switching to a single retirement report"}, {"oid": "b40d7b0e6bd9003de8df60cc732b5e195741d8aa", "committedDate": "2022-05-30 16:37:32 -0400", "message": "Merge pull request #3234 from Windchild292/dev_Windchild_PersonFlags"}, {"oid": "f7e43611ee653404079cc2fdced92c083c35362f", "committedDate": "2022-06-01 13:26:16 -0400", "message": "More swaps to using getActualValue"}, {"oid": "76223b1f01db0e020c9069b9c361d7af9f174e6a", "committedDate": "2022-06-01 17:49:36 -0400", "message": "Merge remote-tracking branch 'origin/master' into dev_Windchild_PartPriceApplications"}, {"oid": "e7755fbeddc7d00cc126c3281f4be93685eb83fa", "committedDate": "2022-06-08 20:05:45 -0400", "message": "Ignore End Date for Scenario Assignment to Active Contracts"}, {"oid": "c17408bc1409591bdb76664788c6ad4f55a5d813", "committedDate": "2022-06-18 17:51:05 -0400", "message": "Campaign::getPerson : Adding Nullable Annotation"}, {"oid": "f2abd2addef945880eefcf2a11ccfb5eec610ea3", "committedDate": "2022-06-18 17:59:08 -0400", "message": "Renaming clearGenealogy to clearGenealogyLinks (as that's what it does), and more test progress"}, {"oid": "39ac9b544233876ab9e4a6f914abaf549c76aded", "committedDate": "2022-06-20 22:59:32 -0400", "message": "Bunch of enum cleanups"}, {"oid": "a576a51fb82bbc625198e50a04894cd7749bed1c", "committedDate": "2022-06-21 16:25:02 -0400", "message": "Lots more tests, largely simple ones"}, {"oid": "0f60e6bba5ebdf538b335609e5bfd7817f614393", "committedDate": "2022-06-23 16:17:56 -0400", "message": "3372: Fixing Campaign Loan Report Issues"}, {"oid": "7441a156d93c5a7fb5dab7f9a38a5f87f6321f14", "committedDate": "2022-06-24 22:32:50 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_GenealogyTest"}, {"oid": "f5bb76bdee8f7d7aba18dd83f2d903036ea1f68b", "committedDate": "2022-06-27 13:25:57 -0400", "message": "Merge pull request #3378 from Windchild292/dev_Windchild_3372"}, {"oid": "0948c47088632642d946b7a5eec4eb595a21ac76", "committedDate": "2022-06-29 20:04:53 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_GenealogyTest"}, {"oid": "505318be000041c18ae226d4e1521dc527fc7133", "committedDate": "2022-07-14 17:41:42 -0400", "message": "Adding market enum testing"}, {"oid": "8d3060de0fe1375a8186d41be98a059652a81bed", "committedDate": "2022-07-31 00:15:10 -0400", "message": "add remove stratcon scenario option"}, {"oid": "9d2ebd8a76bc41afdf298da710ad80e1e4b80c0a", "committedDate": "2022-08-02 19:49:23 -0400", "message": "Checking this"}, {"oid": "803755f3d14a7ba3e66bb1e6364d6c4220bac841", "committedDate": "2022-08-03 20:51:52 -0400", "message": "Properly disabling the random tests"}, {"oid": "f79a61c91b06b467d1bbed4dfeaa36f97fd755e3", "committedDate": "2022-08-04 11:12:44 -0400", "message": "Using correct collector"}, {"oid": "4b3952367635a7620bddb96a9e81a7f1a97a2219", "committedDate": "2022-11-15 14:07:43 -0500", "message": "Removing duplicated name generation info from the campaign file"}, {"oid": "5213209bddb612458226cdfa7561a7220f8b3b67", "committedDate": "2022-11-15 15:54:47 -0500", "message": "Fixing deprecated XML utility uses and fixing indentation issues for parts"}, {"oid": "53e7b27c2173373019055e800950173ed7eb20df", "committedDate": "2022-11-15 19:05:53 -0500", "message": "Company Generator: Faction Options"}, {"oid": "230c025b083606834270681ce668a836c76dfc1b", "committedDate": "2022-11-22 16:25:51 -0500", "message": "3489: Adding Small Craft and DropShip Transport Support"}, {"oid": "b5349ccb7e3e9c0345d6685bb9a76a53afed8bdc", "committedDate": "2022-11-26 08:40:31 -0500", "message": "Merge pull request #3510 from MegaMek/dev_Windchild_3489"}, {"oid": "b3f06f70d94e83ed6fad6368cbe5df5d35c20296", "committedDate": "2022-11-26 11:38:42 -0500", "message": "Finishing adding the new option as a selection"}, {"oid": "1cb49fa503593c75f3bee4ebc6cf2574faec13de", "committedDate": "2022-11-26 11:49:33 -0500", "message": "Merge branch 'MegaMek:master' into dev_Windchild_CompanyGeneratorFactionGeneration"}, {"oid": "b47a12937f6b979925f82cb31bb6f2f33cf789e5", "committedDate": "2022-12-05 15:34:26 -0500", "message": "Scenarios are now Scenarios, not Missions"}, {"oid": "b57de2f09b47ffa8da9ab0bd7bba356d1e2e235c", "committedDate": "2022-12-08 23:00:17 -0500", "message": "Merge pull request #3501 from Windchild292/dev_Windchild_DeprecatedXML"}, {"oid": "ade20da3d68431198324cbad4bd7cfcc2fd1ef66", "committedDate": "2022-12-11 23:37:05 -0500", "message": "Merge pull request #3520 from Windchild292/dev_Windchild_ScenariosAreScenarios"}, {"oid": "a6d88033b71b9291e4774a5cbc3e8f577287a523", "committedDate": "2022-12-16 22:33:19 -0500", "message": "Tearing out EncodeControl"}, {"oid": "cec1df762e06d6e3e6c4c437c0d0a25892f44a7d", "committedDate": "2022-12-29 13:15:59 -0500", "message": "Fixing Option Naming Typos"}, {"oid": "e3e1ce62490858d93d695b7e7f8bf17dca068936", "committedDate": "2022-12-29 14:30:54 -0500", "message": "Standardize option naming"}, {"oid": "d385d0bc8fd91a75c631f546272abbff8e07311a", "committedDate": "2022-12-30 13:05:34 -0500", "message": "SkillLevel: Reducing SkillType::getExperienceLevelName calls"}, {"oid": "332b06c4b29e7f809e9cf0cab16a062f65544391", "committedDate": "2023-01-08 20:33:20 -0500", "message": "Yearly Retirement Nag Now Follows Campaign Options"}, {"oid": "62afc895d75aece8a3079267b20eb9e8c3de5cfc", "committedDate": "2023-01-14 16:34:36 -0500", "message": "3558: RATs are Used Outside of AtB"}, {"oid": "0e39c3c4517d5cd46e99546d8e3b3a1cea7cb30b", "committedDate": "2023-01-17 20:12:29 -0500", "message": "Merge branch 'master' into dev_Windchild_CampaignOptionsCleanup"}, {"oid": "da71474de7674e9b213472ce61b254a744c6ae5a", "committedDate": "2023-01-17 20:12:53 -0500", "message": "Merge branch 'MegaMek:master' into dev_Windchild_IsolatedSkillLevelEnumSwapovers"}, {"oid": "a328a1e42771f0c7052a7c9c1b2583134a8534f4", "committedDate": "2023-01-25 22:45:44 -0500", "message": "Campaign Ops Unit Rating: Properly Calculate Personnel Numbers"}, {"oid": "5ad55c0aa2dd0422f1e05d2704860f7674936984", "committedDate": "2023-01-25 23:11:45 -0500", "message": "Applying changes from testing and further rule reading"}, {"oid": "8fc36fbd275ffccf0ed91df60b637a5cc3135a86", "committedDate": "2023-01-29 18:24:48 -0500", "message": "Phenotype Enum: Migrating Uses to Simplification Methods"}, {"oid": "a462c5436ab5bec1a54c2f652f232fdff88f7a42", "committedDate": "2023-01-29 19:28:49 -0500", "message": "Tearing out unused code and swapping to using a map"}, {"oid": "542356e26d4b14d760fa69f33f627ed2b692908b", "committedDate": "2023-02-06 21:17:17 -0500", "message": "Merge pull request #3589 from Windchild292/dev_Windchild_PhenotypeSimplificationMethods"}, {"oid": "2757b555a5a0aa6fdf73322d58173bbee7d22ba5", "committedDate": "2023-02-06 21:25:38 -0500", "message": "Merge pull request #3590 from Windchild292/dev_Windchild_UnusedSPACleanup"}, {"oid": "6784f22a192b7c650bd5be0354bc6946bfec896f", "committedDate": "2023-02-06 21:41:30 -0500", "message": "Merge pull request #3557 from Windchild292/dev_Windchild_YearlyRetirementNag"}, {"oid": "724a8333d072d631c1072fd7ccf2707efe6e2b40", "committedDate": "2023-02-07 20:56:16 -0500", "message": "Fixing merge conflicts"}, {"oid": "e0f16b480db19ce9d36290caa03be8f6be77cace", "committedDate": "2023-02-07 21:43:07 -0500", "message": "Fixing merge conflicts"}, {"oid": "8996781abfef1f08293a06ef53e3af92812a9b5d", "committedDate": "2023-02-07 22:53:45 -0500", "message": "Standardize Mass Repair Mass Salvage naming to MRMS"}, {"oid": "1ccab8e5b040389be54c4730103354fbc0f06406", "committedDate": "2023-02-18 19:25:18 +0000", "message": "3318: Add manual personnel payments that generate Finance debit"}, {"oid": "86649c7c93250458658d765a7e2007134c385c74", "committedDate": "2023-02-25 20:07:13 -0500", "message": "Some related code cleanup"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU2MzQzNQ==", "url": "https://github.com/MegaMek/mekhq/pull/2123#discussion_r500563435", "body": "```suggestion\r\n        return (int) Math.round(getHangar().getUnitsStream()\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return (int)Math.round(getHangar().getUnitsStream()\n          \n          \n            \n                    return (int) Math.round(getHangar().getUnitsStream()", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">return</span> (<span class=\"pl-k\">int</span>)<span class=\"pl-smi\">Math</span><span class=\"pl-k\">.</span>round(getHangar()<span class=\"pl-k\">.</span>getUnitsStream()</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">return</span> (<span class=\"pl-k\">int</span>)<span class=\"x x-first x-last\"> </span><span class=\"pl-smi\">Math</span><span class=\"pl-k\">.</span>round(getHangar()<span class=\"pl-k\">.</span>getUnitsStream()</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "Windchild292", "createdAt": "2020-10-06T20:04:50Z", "path": "MekHQ/src/mekhq/campaign/Campaign.java", "diffHunk": "@@ -7236,117 +7172,88 @@ public void setHealingTimeOptions(int newHeal, int newNaturalHeal) {\n     }\n \n     public int getTotalMechBays() {\n-        double bays = 0;\n-        for (Unit u : getUnits()) {\n-            bays += u.getMechCapacity();\n-        }\n-        return (int)Math.round(bays);\n+        return (int)Math.round(getHangar().getUnitsStream()\n+            .mapToDouble(Unit::getMechCapacity)\n+            .sum());\n     }\n \n     public int getTotalASFBays() {\n-        double bays = 0;\n-        for (Unit u : getUnits()) {\n-            bays += u.getASFCapacity();\n-        }\n-        return (int)Math.round(bays);\n+        return (int)Math.round(getHangar().getUnitsStream()", "originalCommit": "02cf732d561f245a8a8d39a2b8a819cb45ac94ca", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cb64714e6e2b7d03de487c72eb18c3c09948b6c6", "changed_code": [{"header": "diff --git a/MekHQ/src/mekhq/campaign/Campaign.java b/MekHQ/src/mekhq/campaign/Campaign.java\nindex c9db948ab..4dff77b1d 100644\n--- a/MekHQ/src/mekhq/campaign/Campaign.java\n+++ b/MekHQ/src/mekhq/campaign/Campaign.java\n", "chunk": "@@ -7172,49 +7172,49 @@ public class Campaign implements Serializable, ITechManager {\n     }\n \n     public int getTotalMechBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getMechCapacity)\n             .sum());\n     }\n \n     public int getTotalASFBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getASFCapacity)\n             .sum());\n     }\n \n     public int getTotalSmallCraftBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getSmallCraftCapacity)\n             .sum());\n     }\n \n     public int getTotalBattleArmorBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getBattleArmorCapacity)\n             .sum());\n     }\n \n     public int getTotalInfantryBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getInfantryCapacity)\n             .sum());\n     }\n \n     public int getTotalHeavyVehicleBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getHeavyVehicleCapacity)\n             .sum());\n     }\n \n     public int getTotalLightVehicleBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getLightVehicleCapacity)\n             .sum());\n     }\n \n     public int getTotalProtomechBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getProtomechCapacity)\n             .sum());\n     }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "3f55aabad31fb84ff1e5af9c8caac7bd8c8999a0", "changed_code": [{"header": "diff --git a/MekHQ/src/mekhq/campaign/Campaign.java b/MekHQ/src/mekhq/campaign/Campaign.java\nindex c9db948ab..0f69d5116 100644\n--- a/MekHQ/src/mekhq/campaign/Campaign.java\n+++ b/MekHQ/src/mekhq/campaign/Campaign.java\n", "chunk": "@@ -7172,49 +7161,49 @@ public class Campaign implements Serializable, ITechManager {\n     }\n \n     public int getTotalMechBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getMechCapacity)\n             .sum());\n     }\n \n     public int getTotalASFBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getASFCapacity)\n             .sum());\n     }\n \n     public int getTotalSmallCraftBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getSmallCraftCapacity)\n             .sum());\n     }\n \n     public int getTotalBattleArmorBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getBattleArmorCapacity)\n             .sum());\n     }\n \n     public int getTotalInfantryBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getInfantryCapacity)\n             .sum());\n     }\n \n     public int getTotalHeavyVehicleBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getHeavyVehicleCapacity)\n             .sum());\n     }\n \n     public int getTotalLightVehicleBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getLightVehicleCapacity)\n             .sum());\n     }\n \n     public int getTotalProtomechBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getProtomechCapacity)\n             .sum());\n     }\n", "next_change": {"commit": "a0c1cbf9746ed9486f08ce4aa2376828e846c786", "changed_code": [{"header": "diff --git a/MekHQ/src/mekhq/campaign/Campaign.java b/MekHQ/src/mekhq/campaign/Campaign.java\nindex 0f69d5116..e49c8ce15 100644\n--- a/MekHQ/src/mekhq/campaign/Campaign.java\n+++ b/MekHQ/src/mekhq/campaign/Campaign.java\n", "chunk": "@@ -7152,97 +7101,119 @@ public class Campaign implements Serializable, ITechManager {\n             }\n         }\n     }\n-    /**\n-     * Returns our list of potential transport ships\n-     * @return\n-     */\n-    public Set<UUID> getTransportShips() {\n-        return transportShips;\n-    }\n \n     public int getTotalMechBays() {\n-        return (int) Math.round(getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getMechCapacity)\n-            .sum());\n+        double bays = 0;\n+        for (Unit u : getUnits()) {\n+            bays += u.getMechCapacity();\n+        }\n+        return (int)Math.round(bays);\n     }\n \n     public int getTotalASFBays() {\n-        return (int) Math.round(getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getASFCapacity)\n-            .sum());\n+        double bays = 0;\n+        for (Unit u : getUnits()) {\n+            bays += u.getASFCapacity();\n+        }\n+        return (int)Math.round(bays);\n     }\n \n     public int getTotalSmallCraftBays() {\n-        return (int) Math.round(getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getSmallCraftCapacity)\n-            .sum());\n+        double bays = 0;\n+        for (Unit u : getUnits()) {\n+            bays += u.getSmallCraftCapacity();\n+        }\n+        return (int)Math.round(bays);\n     }\n \n     public int getTotalBattleArmorBays() {\n-        return (int) Math.round(getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getBattleArmorCapacity)\n-            .sum());\n+        double bays = 0;\n+        for (Unit u : getUnits()) {\n+            bays += u.getBattleArmorCapacity();\n+        }\n+        return (int)Math.round(bays);\n     }\n \n     public int getTotalInfantryBays() {\n-        return (int) Math.round(getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getInfantryCapacity)\n-            .sum());\n+        double bays = 0;\n+        for (Unit u : getUnits()) {\n+            bays += u.getInfantryCapacity();\n+        }\n+        return (int)Math.round(bays);\n     }\n \n     public int getTotalHeavyVehicleBays() {\n-        return (int) Math.round(getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getHeavyVehicleCapacity)\n-            .sum());\n+        double bays = 0;\n+        for (Unit u : getUnits()) {\n+            bays += u.getHeavyVehicleCapacity();\n+        }\n+        return (int)Math.round(bays);\n     }\n \n     public int getTotalLightVehicleBays() {\n-        return (int) Math.round(getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getLightVehicleCapacity)\n-            .sum());\n+        double bays = 0;\n+        for (Unit u : getUnits()) {\n+            bays += u.getLightVehicleCapacity();\n+        }\n+        return (int)Math.round(bays);\n     }\n \n     public int getTotalProtomechBays() {\n-        return (int) Math.round(getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getProtomechCapacity)\n-            .sum());\n+        double bays = 0;\n+        for (Unit u : getUnits()) {\n+            bays += u.getProtomechCapacity();\n+        }\n+        return (int)Math.round(bays);\n     }\n \n     public int getTotalDockingCollars() {\n-        return getHangar().getUnitsStream()\n-            .filter(u -> u.getEntity() instanceof Jumpship)\n-            .mapToInt(Unit::getDocks)\n-            .sum();\n+        double collars = 0;\n+        for (Unit u : getUnits()) {\n+            if (u.getEntity() instanceof Jumpship) {\n+                collars += u.getDocks();\n+            }\n+        }\n+        return (int)Math.round(collars);\n     }\n \n     public double getTotalInsulatedCargoCapacity() {\n-        return getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getInsulatedCargoCapacity)\n-            .sum();\n+        double capacity = 0;\n+        for (Unit u : getUnits()) {\n+            capacity += u.getInsulatedCargoCapacity();\n+        }\n+        return capacity;\n     }\n \n     public double getTotalRefrigeratedCargoCapacity() {\n-        return getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getRefrigeratedCargoCapacity)\n-            .sum();\n+        double capacity = 0;\n+        for (Unit u : getUnits()) {\n+            capacity += u.getRefrigeratedCargoCapacity();\n+        }\n+        return capacity;\n     }\n \n     public double getTotalLivestockCargoCapacity() {\n-        return getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getLivestockCargoCapacity)\n-            .sum();\n+        double capacity = 0;\n+        for (Unit u : getUnits()) {\n+            capacity += u.getLivestockCargoCapacity();\n+        }\n+        return capacity;\n     }\n \n     public double getTotalLiquidCargoCapacity() {\n-        return getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getLiquidCargoCapacity)\n-            .sum();\n+        double capacity = 0;\n+        for (Unit u : getUnits()) {\n+            capacity += u.getLiquidCargoCapacity();\n+        }\n+        return capacity;\n     }\n \n     public double getTotalCargoCapacity() {\n-        return getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getCargoCapacity)\n-            .sum();\n+        double capacity = 0;\n+        for (Unit u : getUnits()) {\n+            capacity += u.getCargoCapacity();\n+        }\n+        return capacity;\n     }\n \n     // Liquid not included\n", "next_change": {"commit": "04a16de448a0c7d576a6c3c64c9d23ae08384bae", "changed_code": [{"header": "diff --git a/MekHQ/src/mekhq/campaign/Campaign.java b/MekHQ/src/mekhq/campaign/Campaign.java\nindex e49c8ce15..993f59cfe 100644\n--- a/MekHQ/src/mekhq/campaign/Campaign.java\n+++ b/MekHQ/src/mekhq/campaign/Campaign.java\n", "chunk": "@@ -7101,900 +7157,440 @@ public class Campaign implements Serializable, ITechManager {\n             }\n         }\n     }\n-\n-    public int getTotalMechBays() {\n-        double bays = 0;\n-        for (Unit u : getUnits()) {\n-            bays += u.getMechCapacity();\n-        }\n-        return (int)Math.round(bays);\n+    /**\n+     * Returns our list of potential transport ships\n+     * @return\n+     */\n+    public Set<UUID> getTransportShips() {\n+        return transportShips;\n     }\n \n-    public int getTotalASFBays() {\n-        double bays = 0;\n-        for (Unit u : getUnits()) {\n-            bays += u.getASFCapacity();\n-        }\n-        return (int)Math.round(bays);\n-    }\n+    public String getCombatPersonnelDetails() {\n+        int[] countPersonByType = new int[Person.T_NUM];\n+        int countTotal = 0;\n+        int countInjured = 0;\n+        int countMIA = 0;\n+        int countKIA = 0;\n+        int countDead = 0;\n+        int countRetired = 0;\n+        Money salary = Money.zero();\n \n-    public int getTotalSmallCraftBays() {\n-        double bays = 0;\n-        for (Unit u : getUnits()) {\n-            bays += u.getSmallCraftCapacity();\n-        }\n-        return (int)Math.round(bays);\n-    }\n+        for (Person p : getPersonnel()) {\n+            if (!p.hasPrimaryCombatRole() || !p.getPrisonerStatus().isFree()) {\n+                continue;\n+            }\n \n-    public int getTotalBattleArmorBays() {\n-        double bays = 0;\n-        for (Unit u : getUnits()) {\n-            bays += u.getBattleArmorCapacity();\n+            // Add them to the total count\n+            if (p.getStatus().isActive()) {\n+                countPersonByType[p.getPrimaryRole()]++;\n+                countTotal++;\n+                if (getCampaignOptions().useAdvancedMedical() && p.getInjuries().size() > 0) {\n+                    countInjured++;\n+                } else if (p.getHits() > 0) {\n+                    countInjured++;\n+                }\n+                salary = salary.plus(p.getSalary());\n+            } else if (p.getStatus().isRetired()) {\n+                countRetired++;\n+            } else if (p.getStatus().isMIA()) {\n+                countMIA++;\n+            } else if (p.getStatus().isKIA()) {\n+                countKIA++;\n+                countDead++;\n+            } else if (p.getStatus().isDead()) {\n+                countDead++;\n+            }\n         }\n-        return (int)Math.round(bays);\n-    }\n \n-    public int getTotalInfantryBays() {\n-        double bays = 0;\n-        for (Unit u : getUnits()) {\n-            bays += u.getInfantryCapacity();\n-        }\n-        return (int)Math.round(bays);\n-    }\n+        StringBuilder sb = new StringBuilder(\"Combat Personnel\\n\\n\");\n \n-    public int getTotalHeavyVehicleBays() {\n-        double bays = 0;\n-        for (Unit u : getUnits()) {\n-            bays += u.getHeavyVehicleCapacity();\n-        }\n-        return (int)Math.round(bays);\n-    }\n+        sb.append(String.format(\"%-30s        %4s\\n\", \"Total Combat Personnel\", countTotal));\n \n-    public int getTotalLightVehicleBays() {\n-        double bays = 0;\n-        for (Unit u : getUnits()) {\n-            bays += u.getLightVehicleCapacity();\n+        for (int i = 0; i < Person.T_NUM; i++) {\n+            if (Person.isCombatRole(i)) {\n+                sb.append(String.format(\"    %-30s    %4s\\n\",\n+                        Person.getRoleDesc(i, getFaction().isClan()), countPersonByType[i]));\n+            }\n         }\n-        return (int)Math.round(bays);\n-    }\n \n-    public int getTotalProtomechBays() {\n-        double bays = 0;\n-        for (Unit u : getUnits()) {\n-            bays += u.getProtomechCapacity();\n-        }\n-        return (int)Math.round(bays);\n+        sb.append(\"\\n\")\n+                .append(String.format(\"%-30s        %4s\\n\", \"Injured Combat Personnel\", countInjured))\n+                .append(String.format(\"%-30s        %4s\\n\", \"MIA Combat Personnel\", countMIA))\n+                .append(String.format(\"%-30s        %4s\\n\", \"KIA Combat Personnel\", countKIA))\n+                .append(String.format(\"%-30s        %4s\\n\", \"Retired Combat Personnel\", countRetired))\n+                .append(String.format(\"%-30s        %4s\\n\", \"Dead Combat Personnel\", countDead))\n+                .append(\"\\nMonthly Salary For Combat Personnel: \").append(salary.toAmountAndSymbolString());\n+\n+        return sb.toString();\n     }\n \n-    public int getTotalDockingCollars() {\n-        double collars = 0;\n-        for (Unit u : getUnits()) {\n-            if (u.getEntity() instanceof Jumpship) {\n-                collars += u.getDocks();\n+    public String getSupportPersonnelDetails() {\n+        int[] countPersonByType = new int[Person.T_NUM];\n+        int countTotal = 0;\n+        int countInjured = 0;\n+        int countMIA = 0;\n+        int countKIA = 0;\n+        int countDead = 0;\n+        int countRetired = 0;\n+        Money salary = Money.zero();\n+        int prisoners = 0;\n+        int bondsmen = 0;\n+        int dependents = 0;\n+\n+        for (Person p : getPersonnel()) {\n+            // Add them to the total count\n+            boolean primarySupport = p.hasPrimarySupportRole(false);\n+\n+            if (primarySupport && p.getPrisonerStatus().isFree() && p.getStatus().isActive()) {\n+                countPersonByType[p.getPrimaryRole()]++;\n+                countTotal++;\n+                if (p.getInjuries().size() > 0 || p.getHits() > 0) {\n+                    countInjured++;\n+                }\n+                salary = salary.plus(p.getSalary());\n+            } else if (p.getPrisonerStatus().isPrisoner() && p.getStatus().isActive()) {\n+                prisoners++;\n+                if (p.getInjuries().size() > 0 || p.getHits() > 0) {\n+                    countInjured++;\n+                }\n+            } else if (p.getPrisonerStatus().isBondsman() && p.getStatus().isActive()) {\n+                bondsmen++;\n+                if (p.getInjuries().size() > 0 || p.getHits() > 0) {\n+                    countInjured++;\n+                }\n+            } else if (primarySupport && p.getStatus().isRetired()) {\n+                countRetired++;\n+            } else if (primarySupport && p.getStatus().isMIA()) {\n+                countMIA++;\n+            } else if (primarySupport && p.getStatus().isKIA()) {\n+                countKIA++;\n+                countDead++;\n+            } else if (primarySupport && p.getStatus().isDead()) {\n+                countDead++;\n             }\n-        }\n-        return (int)Math.round(collars);\n-    }\n \n-    public double getTotalInsulatedCargoCapacity() {\n-        double capacity = 0;\n-        for (Unit u : getUnits()) {\n-            capacity += u.getInsulatedCargoCapacity();\n+            if (p.isDependent() && p.getStatus().isActive() && p.getPrisonerStatus().isFree()) {\n+                dependents++;\n+            }\n         }\n-        return capacity;\n-    }\n \n-    public double getTotalRefrigeratedCargoCapacity() {\n-        double capacity = 0;\n-        for (Unit u : getUnits()) {\n-            capacity += u.getRefrigeratedCargoCapacity();\n-        }\n-        return capacity;\n-    }\n+        StringBuilder sb = new StringBuilder(\"Support Personnel\\n\\n\");\n \n-    public double getTotalLivestockCargoCapacity() {\n-        double capacity = 0;\n-        for (Unit u : getUnits()) {\n-            capacity += u.getLivestockCargoCapacity();\n-        }\n-        return capacity;\n-    }\n+        sb.append(String.format(\"%-30s        %4s\\n\", \"Total Support Personnel\", countTotal));\n \n-    public double getTotalLiquidCargoCapacity() {\n-        double capacity = 0;\n-        for (Unit u : getUnits()) {\n-            capacity += u.getLiquidCargoCapacity();\n+        for (int i = 0; i < Person.T_NUM; i++) {\n+            if (Person.isSupportRole(i)) {\n+                sb.append(String.format(\"    %-30s    %4s\\n\",\n+                        Person.getRoleDesc(i, getFaction().isClan()), countPersonByType[i]));\n+            }\n         }\n-        return capacity;\n-    }\n \n-    public double getTotalCargoCapacity() {\n-        double capacity = 0;\n-        for (Unit u : getUnits()) {\n-            capacity += u.getCargoCapacity();\n-        }\n-        return capacity;\n-    }\n-\n-    // Liquid not included\n-    public double getTotalCombinedCargoCapacity() {\n-        return getTotalCargoCapacity() + getTotalLivestockCargoCapacity()\n-                + getTotalInsulatedCargoCapacity() + getTotalRefrigeratedCargoCapacity();\n-    }\n-\n-    public int getNumberOfUnitsByType(long type) {\n-        return getNumberOfUnitsByType(type, false, false);\n-    }\n+        sb.append(\"\\n\")\n+                .append(String.format(\"%-30s        %4s\\n\", \"Injured Support Personnel\", countInjured))\n+                .append(String.format(\"%-30s        %4s\\n\", \"MIA Support Personnel\", countMIA))\n+                .append(String.format(\"%-30s        %4s\\n\", \"KIA Support Personnel\", countKIA))\n+                .append(String.format(\"%-30s        %4s\\n\", \"Retired Support Personnel\", countRetired))\n+                .append(String.format(\"%-30s        %4s\\n\", \"Dead Support Personnel\", countDead))\n+                .append(\"\\nMonthly Salary For Support Personnel: \").append(salary.toAmountAndSymbolString())\n+                .append(String.format(\"\\nYou have \" + dependents + \" %s\", (dependents == 1) ? \"dependent\" : \"dependents\"))\n+                .append(String.format(\"\\nYou have \" + prisoners + \" prisoner%s\", (prisoners == 1) ? \"\" : \"s\"))\n+                .append(String.format(\"\\nYou have \" + bondsmen + \" %s\", (bondsmen == 1) ? \"bondsman\" : \"bondsmen\"));\n \n-    public int getNumberOfUnitsByType(long type, boolean inTransit) {\n-        return getNumberOfUnitsByType(type, inTransit, false);\n+        return sb.toString();\n     }\n \n-    public int getNumberOfUnitsByType(long type, boolean inTransit, boolean lv) {\n-        int num = 0;\n-        for (Unit unit : getUnits()) {\n-            if (!inTransit && !unit.isPresent()) {\n-                continue;\n-            }\n-            if (unit.isMothballed()) {\n-                if (type == Unit.ETYPE_MOTHBALLED) {\n-                    num++;\n-                }\n-                continue;\n-            }\n-            Entity en = unit.getEntity();\n-            if (en instanceof GunEmplacement || en instanceof FighterSquadron || en instanceof Jumpship) {\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_MECH && en instanceof Mech) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_DROPSHIP && en instanceof Dropship) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_SMALL_CRAFT && en instanceof SmallCraft\n-                    && !(en instanceof Dropship)) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_CONV_FIGHTER && en instanceof ConvFighter) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_AERO && en instanceof Aero\n-                    && !(en instanceof SmallCraft || en instanceof ConvFighter)) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_INFANTRY && en instanceof Infantry && !(en instanceof BattleArmor)) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_BATTLEARMOR && en instanceof BattleArmor) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_TANK && en instanceof Tank) {\n-                if ((en.getWeight() <= 50 && lv) || (en.getWeight() > 50 && !lv)) {\n-                    num++;\n-                }\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_PROTOMECH && en instanceof Protomech) {\n-                num++;\n-                continue;\n-            }\n+    public void doMaintenance(Unit u) {\n+        if (!u.requiresMaintenance() || !campaignOptions.checkMaintenance()) {\n+            return;\n         }\n-\n-        return num;\n-    }\n-\n-    public double getCargoTonnage(boolean inTransit) {\n-        return getCargoTonnage(inTransit, false);\n-    }\n-\n-    @SuppressWarnings(\"unused\") // FIXME: This whole method needs re-worked once Dropship Assignments are in\n-    public double getCargoTonnage(boolean inTransit, boolean mothballed) {\n-        double cargoTonnage = 0;\n-        double mothballedTonnage = 0;\n-        int mechs = getNumberOfUnitsByType(Entity.ETYPE_MECH);\n-        int ds = getNumberOfUnitsByType(Entity.ETYPE_DROPSHIP);\n-        int sc = getNumberOfUnitsByType(Entity.ETYPE_SMALL_CRAFT);\n-        int cf = getNumberOfUnitsByType(Entity.ETYPE_CONV_FIGHTER);\n-        int asf = getNumberOfUnitsByType(Entity.ETYPE_AERO);\n-        int inf = getNumberOfUnitsByType(Entity.ETYPE_INFANTRY);\n-        int ba = getNumberOfUnitsByType(Entity.ETYPE_BATTLEARMOR);\n-        int lv = getNumberOfUnitsByType(Entity.ETYPE_TANK, true);\n-        int hv = getNumberOfUnitsByType(Entity.ETYPE_TANK, false);\n-        int protos = getNumberOfUnitsByType(Entity.ETYPE_PROTOMECH);\n-\n-        for (Part part : getSpareParts()) {\n-            if (!inTransit && !part.isPresent()) {\n-                continue;\n-            }\n-            cargoTonnage += (part.getQuantity() * part.getTonnage());\n+        // lets start by checking times\n+        Person tech = u.getTech();\n+        int minutesUsed = u.getMaintenanceTime();\n+        int astechsUsed = getAvailableAstechs(minutesUsed, false);\n+        boolean maintained = ((tech != null) && (tech.getMinutesLeft() >= minutesUsed)\n+                && !tech.isMothballing());\n+        boolean paidMaintenance = true;\n+        if (maintained) {\n+            // use the time\n+            tech.setMinutesLeft(tech.getMinutesLeft() - minutesUsed);\n+            astechPoolMinutes -= astechsUsed * minutesUsed;\n         }\n+        u.incrementDaysSinceMaintenance(maintained, astechsUsed);\n \n-        // place units in bays\n-        // FIXME: This has been temporarily disabled. It really needs dropship assignments done to fix it correctly.\n-        // Remaining units go into cargo\n-        for (Unit unit : getUnits()) {\n-            if (!inTransit && !unit.isPresent()) {\n-                continue;\n-            }\n-            Entity en = unit.getEntity();\n-            if (unit.isMothballed()) {\n-                mothballedTonnage += en.getWeight();\n-                continue;\n-            }\n-            if (en instanceof GunEmplacement || en instanceof FighterSquadron || en instanceof Jumpship) {\n-                continue;\n-            }\n-            // cargoTonnage += en.getWeight();\n-        }\n-        if (mothballed) {\n-            return mothballedTonnage;\n+        int ruggedMultiplier = 1;\n+        if (u.getEntity().hasQuirk(OptionsConstants.QUIRK_POS_RUGGED_1)) {\n+            ruggedMultiplier = 2;\n         }\n-        return cargoTonnage;\n-    }\n \n-    public String getCargoDetails() {\n-        StringBuffer sb = new StringBuffer(\"Cargo\\n\\n\");\n-        double ccc = this.getTotalCombinedCargoCapacity();\n-        double gcc = this.getTotalCargoCapacity();\n-        double icc = this.getTotalInsulatedCargoCapacity();\n-        double lcc = this.getTotalLiquidCargoCapacity();\n-        double scc = this.getTotalLivestockCargoCapacity();\n-        double rcc = this.getTotalRefrigeratedCargoCapacity();\n-        double tonnage = this.getCargoTonnage(false);\n-        double mothballedTonnage = this.getCargoTonnage(false, true);\n-        double mothballedUnits = Math.max(getNumberOfUnitsByType(Unit.ETYPE_MOTHBALLED), 0);\n-        double combined = (tonnage + mothballedTonnage);\n-        double transported = combined > ccc ? ccc : combined;\n-        double overage = combined - transported;\n-\n-        sb.append(String.format(\"%-35s      %6.3f\\n\", \"Total Capacity:\", ccc));\n-        sb.append(String.format(\"%-35s      %6.3f\\n\", \"General Capacity:\", gcc));\n-        sb.append(String.format(\"%-35s      %6.3f\\n\", \"Insulated Capacity:\", icc));\n-        sb.append(String.format(\"%-35s      %6.3f\\n\", \"Liquid Capacity:\", lcc));\n-        sb.append(String.format(\"%-35s      %6.3f\\n\", \"Livestock Capacity:\", scc));\n-        sb.append(String.format(\"%-35s      %6.3f\\n\", \"Refrigerated Capacity:\", rcc));\n-        sb.append(String.format(\"%-35s      %6.3f\\n\", \"Cargo Transported:\", tonnage));\n-        sb.append(String.format(\"%-35s      %4s (%1.0f)\\n\", \"Mothballed Units as Cargo (Tons):\", mothballedUnits, mothballedTonnage));\n-        sb.append(String.format(\"%-35s      %6.3f/%1.3f\\n\", \"Transported/Capacity:\", transported, ccc));\n-        sb.append(String.format(\"%-35s      %6.3f\\n\", \"Overage Not Transported:\", overage));\n+        if (u.getEntity().hasQuirk(OptionsConstants.QUIRK_POS_RUGGED_2)) {\n+            ruggedMultiplier = 3;\n+        }\n \n-        return new String(sb);\n-    }\n+        if (u.getDaysSinceMaintenance() >= (getCampaignOptions().getMaintenanceCycleDays() * ruggedMultiplier)) {\n+            // maybe use the money\n+            if (campaignOptions.payForMaintain()) {\n+                if (!(finances.debit(u.getMaintenanceCost(), Transaction.C_MAINTAIN, \"Maintenance for \"\n+                                + u.getName(), getLocalDate()))) {\n+                    addReport(\"<font color='red'><b>You cannot afford to pay maintenance costs for \"\n+                            + u.getHyperlinkedName() + \"!</b></font>\");\n+                    paidMaintenance = false;\n+                }\n+            }\n+            // it is time for a maintenance check\n+            int qualityOrig = u.getQuality();\n+            String techName = \"Nobody\";\n+            String techNameLinked = techName;\n+            if (null != tech) {\n+                techName = tech.getFullTitle();\n+                techNameLinked = tech.getHyperlinkedFullTitle();\n+            }\n+            // don't do actual damage until we clear the for loop to avoid\n+            // concurrent mod problems\n+            // put it into a hash - 4 points of damage will mean destruction\n+            Map<Part, Integer> partsToDamage = new HashMap<>();\n+            StringBuilder maintenanceReport = new StringBuilder(\"<emph>\" + techName + \" performing maintenance</emph><br><br>\");\n+            for (Part p : u.getParts()) {\n+                String partReport = \"<b>\" + p.getName() + \"</b> (Quality \" + p.getQualityName() + \")\";\n+                if (!p.needsMaintenance()) {\n+                    continue;\n+                }\n+                int oldQuality = p.getQuality();\n+                TargetRoll target = getTargetForMaintenance(p, tech);\n+                if (!paidMaintenance) {\n+                    // TODO : Make this modifier user inputtable\n+                    target.addModifier(1, \"did not pay for maintenance\");\n+                }\n \n-    public int getOccupiedBays(long type) {\n-        return getOccupiedBays(type, false);\n-    }\n+                partReport += \", TN \" + target.getValue() + \"[\" + target.getDesc() + \"]\";\n+                int roll = Compute.d6(2);\n+                int margin = roll - target.getValue();\n+                partReport += \" rolled a \" + roll + \", margin of \" + margin;\n \n-    public int getOccupiedBays(long type, boolean lv) {\n-        int num = 0;\n-        for (Unit unit : getUnits()) {\n-            if (unit.isMothballed()) {\n-                continue;\n-            }\n-            Entity en = unit.getEntity();\n-            if (en instanceof GunEmplacement || en instanceof Jumpship) {\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_MECH && en instanceof Mech) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_DROPSHIP && en instanceof Dropship) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_SMALL_CRAFT && en instanceof SmallCraft && !(en instanceof Dropship)) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_CONV_FIGHTER && en instanceof ConvFighter) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_AERO && en instanceof Aero\n-                    && !(en instanceof SmallCraft || en instanceof ConvFighter)) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_INFANTRY && en instanceof Infantry && !(en instanceof BattleArmor)) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_BATTLEARMOR && en instanceof BattleArmor) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_TANK && en instanceof Tank) {\n-                if ((en.getWeight() <= 50 && lv) || (en.getWeight() > 50 && !lv)) {\n-                    num++;\n+                switch (p.getQuality()) {\n+                    case Part.QUALITY_A: {\n+                        if (margin >= 4) {\n+                            p.improveQuality();\n+                        }\n+                        if (!campaignOptions.useUnofficialMaintenance()) {\n+                            if (margin < -6) {\n+                                partsToDamage.put(p, 4);\n+                            } else if (margin < -4) {\n+                                partsToDamage.put(p, 3);\n+                            } else if (margin == -4) {\n+                                partsToDamage.put(p, 2);\n+                            } else if (margin < -1) {\n+                                partsToDamage.put(p, 1);\n+                            }\n+                        } else if (margin < -6) {\n+                            partsToDamage.put(p, 1);\n+                        }\n+                        break;\n+                    }\n+                    case Part.QUALITY_B: {\n+                        if (margin >= 4) {\n+                            p.improveQuality();\n+                        } else if (margin < -5) {\n+                            p.decreaseQuality();\n+                        }\n+                        if (!campaignOptions.useUnofficialMaintenance()) {\n+                            if (margin < -6) {\n+                                partsToDamage.put(p, 2);\n+                            } else if (margin < -2) {\n+                                partsToDamage.put(p, 1);\n+                            }\n+                        }\n+                        break;\n+                    }\n+                    case Part.QUALITY_C: {\n+                        if (margin < -4) {\n+                            p.decreaseQuality();\n+                        } else if (margin >= 5) {\n+                            p.improveQuality();\n+                        }\n+                        if (!campaignOptions.useUnofficialMaintenance()) {\n+                            if (margin < -6) {\n+                                partsToDamage.put(p, 2);\n+                            } else if (margin < -3) {\n+                                partsToDamage.put(p, 1);\n+                            }\n+                        }\n+                        break;\n+                    }\n+                    case Part.QUALITY_D: {\n+                        if (margin < -3) {\n+                            p.decreaseQuality();\n+                            if ((margin < -4) && !campaignOptions.useUnofficialMaintenance()) {\n+                                partsToDamage.put(p, 1);\n+                            }\n+                        } else if (margin >= 5) {\n+                            p.improveQuality();\n+                        }\n+                        break;\n+                    }\n+                    case Part.QUALITY_E:\n+                        if (margin < -2) {\n+                            p.decreaseQuality();\n+                            if ((margin < -5) && !campaignOptions.useUnofficialMaintenance()) {\n+                                partsToDamage.put(p, 1);\n+                            }\n+                        } else if (margin >= 6) {\n+                            p.improveQuality();\n+                        }\n+                        break;\n+                    case Part.QUALITY_F:\n+                    default:\n+                        if (margin < -2) {\n+                            p.decreaseQuality();\n+                            if (margin < -6 && !campaignOptions.useUnofficialMaintenance()) {\n+                                partsToDamage.put(p, 1);\n+                            }\n+                        }\n+                        // TODO: award XP point if margin >= 6 (make this optional)\n+                        //if (margin >= 6) {\n+                        //\n+                        //}\n+                        break;\n                 }\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_PROTOMECH && en instanceof Protomech) {\n-                num++;\n-                continue;\n+                if (p.getQuality() > oldQuality) {\n+                    partReport += \": <font color='green'>new quality is \" + p.getQualityName() + \"</font>\";\n+                } else if (p.getQuality() < oldQuality) {\n+                    partReport += \": <font color='red'>new quality is \" + p.getQualityName() + \"</font>\";\n+                } else {\n+                    partReport += \": quality remains \" + p.getQualityName();\n+                }\n+                if (null != partsToDamage.get(p)) {\n+                    if (partsToDamage.get(p) > 3) {\n+                        partReport += \", <font color='red'><b>part destroyed</b></font>\";\n+                    } else {\n+                        partReport += \", <font color='red'><b>part damaged</b></font>\";\n+                    }\n+                }\n+                maintenanceReport.append(partReport).append(\"<br>\");\n             }\n-        }\n \n-        if (type == Entity.ETYPE_MECH) {\n-            if (getTotalMechBays() > num) {\n-                return num;\n+            int nDamage = 0;\n+            int nDestroy = 0;\n+            for (Map.Entry<Part, Integer> p : partsToDamage.entrySet()) {\n+                int damage = p.getValue();\n+                if (damage > 3) {\n+                    nDestroy++;\n+                    p.getKey().remove(false);\n+                } else {\n+                    p.getKey().doMaintenanceDamage(damage);\n+                    nDamage++;\n+                }\n             }\n-            return getTotalMechBays();\n-        }\n \n-        if (type == Entity.ETYPE_AERO) {\n-            if (getTotalASFBays() > num) {\n-                return num;\n-            }\n-            return getTotalASFBays();\n-        }\n+            u.setLastMaintenanceReport(maintenanceReport.toString());\n \n-        if (type == Entity.ETYPE_INFANTRY) {\n-            if (getTotalInfantryBays() > num) {\n-                return num;\n+            if (getCampaignOptions().logMaintenance()) {\n+                MekHQ.getLogger().info(getClass(), \"doMaintenance\", maintenanceReport.toString());\n             }\n-            return getTotalInfantryBays();\n-        }\n \n-        if (type == Entity.ETYPE_BATTLEARMOR) {\n-            if (getTotalBattleArmorBays() > num) {\n-                return num;\n+            int quality = u.getQuality();\n+            String qualityString;\n+            boolean reverse = getCampaignOptions().reverseQualityNames();\n+            if (quality > qualityOrig) {\n+                qualityString = \"<font color='green'>Overall quality improves from \"\n+                        + Part.getQualityName(qualityOrig, reverse) + \" to \" + Part.getQualityName(quality, reverse)\n+                        + \"</font>\";\n+            } else if (quality < qualityOrig) {\n+                qualityString = \"<font color='red'>Overall quality declines from \"\n+                        + Part.getQualityName(qualityOrig, reverse) + \" to \" + Part.getQualityName(quality, reverse)\n+                        + \"</font>\";\n+            } else {\n+                qualityString = \"Overall quality remains \" + Part.getQualityName(quality, reverse);\n             }\n-            return getTotalBattleArmorBays();\n-        }\n-\n-        if (type == Entity.ETYPE_TANK) {\n-            if (lv) {\n-                if (getTotalLightVehicleBays() > num) {\n-                    return num;\n-                }\n-                return getTotalLightVehicleBays();\n+            String damageString = \"\";\n+            if (nDamage > 0) {\n+                damageString += nDamage + \" parts were damaged. \";\n             }\n-            if (getTotalHeavyVehicleBays() > num) {\n-                return num;\n+            if (nDestroy > 0) {\n+                damageString += nDestroy + \" parts were destroyed.\";\n             }\n-            return getTotalHeavyVehicleBays();\n-        }\n-\n-        if (type == Entity.ETYPE_SMALL_CRAFT) {\n-            if (getTotalSmallCraftBays() > num) {\n-                return num;\n+            if (!damageString.isEmpty()) {\n+                damageString = \"<b><font color='red'>\" + damageString + \"</b></font> [<a href='REPAIR|\" + u.getId()\n+                        + \"'>Repair bay</a>]\";\n             }\n-            return getTotalSmallCraftBays();\n-        }\n-\n-        if (type == Entity.ETYPE_PROTOMECH) {\n-            if (getTotalProtomechBays() > num) {\n-                return num;\n+            String paidString = \"\";\n+            if (!paidMaintenance) {\n+                paidString = \"<font color='red'>Could not afford maintenance costs, so check is at a penalty.</font>\";\n             }\n-            return getTotalProtomechBays();\n-        }\n+            addReport(techNameLinked + \" performs maintenance on \" + u.getHyperlinkedName() + \". \" + paidString\n+                    + qualityString + \". \" + damageString + \" [<a href='MAINTENANCE|\" + u.getId()\n+                    + \"'>Get details</a>]\");\n \n-        if (type == Entity.ETYPE_DROPSHIP) {\n-            if (getTotalDockingCollars() > num) {\n-                return num;\n-            }\n-            return getTotalDockingCollars();\n+            u.resetDaysSinceMaintenance();\n         }\n-\n-        return -1; // default, this is an error condition\n     }\n \n-    public String getTransportDetails() {\n-        int noMech = Math.max(getNumberOfUnitsByType(Entity.ETYPE_MECH) - getOccupiedBays(Entity.ETYPE_MECH), 0);\n-        int noDS = Math.max(getNumberOfUnitsByType(Entity.ETYPE_DROPSHIP) - getOccupiedBays(Entity.ETYPE_DROPSHIP), 0);\n-        int noSC = Math.max(getNumberOfUnitsByType(Entity.ETYPE_SMALL_CRAFT) - getOccupiedBays(Entity.ETYPE_SMALL_CRAFT), 0);\n-        @SuppressWarnings(\"unused\") // FIXME: What type of bays do ConvFighters use?\n-        int noCF = Math\n-                .max(getNumberOfUnitsByType(Entity.ETYPE_CONV_FIGHTER) - getOccupiedBays(Entity.ETYPE_CONV_FIGHTER), 0);\n-        int noASF = Math.max(getNumberOfUnitsByType(Entity.ETYPE_AERO) - getOccupiedBays(Entity.ETYPE_AERO), 0);\n-        int nolv = Math.max(getNumberOfUnitsByType(Entity.ETYPE_TANK, false, true) - getOccupiedBays(Entity.ETYPE_TANK, true), 0);\n-        int nohv = Math.max(getNumberOfUnitsByType(Entity.ETYPE_TANK) - getOccupiedBays(Entity.ETYPE_TANK), 0);\n-        int noinf = Math.max(getNumberOfUnitsByType(Entity.ETYPE_INFANTRY) - getOccupiedBays(Entity.ETYPE_INFANTRY), 0);\n-        int noBA = Math.max(getNumberOfUnitsByType(Entity.ETYPE_BATTLEARMOR) - getOccupiedBays(Entity.ETYPE_BATTLEARMOR), 0);\n-        @SuppressWarnings(\"unused\") // FIXME: This should be used somewhere...\n-        int noProto = Math.max(getNumberOfUnitsByType(Entity.ETYPE_PROTOMECH) - getOccupiedBays(Entity.ETYPE_PROTOMECH),\n-                0);\n-        int freehv = Math.max(getTotalHeavyVehicleBays() - getOccupiedBays(Entity.ETYPE_TANK), 0);\n-        int freeinf = Math.max(getTotalInfantryBays() - getOccupiedBays(Entity.ETYPE_INFANTRY), 0);\n-        int freeba = Math.max(getTotalBattleArmorBays() - getOccupiedBays(Entity.ETYPE_BATTLEARMOR), 0);\n-        int freeSC = Math.max(getTotalSmallCraftBays() - getOccupiedBays(Entity.ETYPE_SMALL_CRAFT), 0);\n-        int mothballedAsCargo = Math.max(getNumberOfUnitsByType(Unit.ETYPE_MOTHBALLED), 0);\n-\n-        String asfAppend = \"\";\n-        int newNoASF = Math.max(noASF - freeSC, 0);\n-        int placedASF = Math.max(noASF - newNoASF, 0);\n-        if (noASF > 0 && freeSC > 0) {\n-            asfAppend = \" [\" + placedASF + \" ASF will be placed in Small Craft bays]\";\n-            freeSC -= placedASF;\n-        }\n-\n-        String lvAppend = \"\";\n-        int newNolv = Math.max(nolv - freehv, 0);\n-        int placedlv = Math.max(nolv - newNolv, 0);\n-        if (nolv > 0 && freehv > 0) {\n-            lvAppend = \" [\" + placedlv + \" Light Vehicles will be placed in Heavy Vehicle bays]\";\n-            freehv -= placedlv;\n-        }\n-\n-        if (noBA > 0 && freeinf > 0) {\n-\n-        }\n-\n-        if (noinf > 0 && freeba > 0) {\n-\n-        }\n-\n-        StringBuffer sb = new StringBuffer(\"Transports\\n\\n\");\n-\n-        // Lets do Mechs first.\n-        sb.append(String.format(\"%-35s      %4d (%4d)      %-35s     %4d\\n\", \"Mech Bays (Occupied):\",\n-                getTotalMechBays(), getOccupiedBays(Entity.ETYPE_MECH), \"Mechs Not Transported:\", noMech));\n-\n-        // Lets do ASF next.\n-        sb.append(String.format(\"%-35s      %4d (%4d)      %-35s     %4d%s\\n\", \"ASF Bays (Occupied):\",\n-                getTotalASFBays(), getOccupiedBays(Entity.ETYPE_AERO), \"ASF Not Transported:\", noASF, asfAppend));\n-\n-        // Lets do Light Vehicles next.\n-        sb.append(String.format(\"%-35s      %4d (%4d)      %-35s     %4d%s\\n\", \"Light Vehicle Bays (Occupied):\",\n-                getTotalLightVehicleBays(), getOccupiedBays(Entity.ETYPE_TANK, true), \"Light Vehicles Not Transported:\",\n-                nolv, lvAppend));\n-\n-        // Lets do Heavy Vehicles next.\n-        sb.append(String.format(\"%-35s      %4d (%4d)      %-35s     %4d\\n\", \"Heavy Vehicle Bays (Occupied):\",\n-                getTotalHeavyVehicleBays(), getOccupiedBays(Entity.ETYPE_TANK), \"Heavy Vehicles Not Transported:\",\n-                nohv));\n-\n-        if (noASF > 0 && freeSC > 0) {\n-            // Lets do ASF in Free Small Craft Bays next.\n-            sb.append(String.format(\"%-35s   %4d (%4d)      %-35s     %4d\\n\", \"   Light Vehicles in Heavy Vehicle Bays (Occupied):\",\n-                    getTotalHeavyVehicleBays(), getOccupiedBays(Entity.ETYPE_TANK) + placedlv,\n-                    \"Light Vehicles Not Transported:\", newNolv));\n-        }\n-\n-        if (nolv > 0 && freehv > 0) {\n-\n-        }\n-\n-        // Lets do Infantry next.\n-        sb.append(String.format(\"%-35s      %4d (%4d)      %-35s     %4d\\n\", \"Infantry Bays (Occupied):\",\n-                getTotalInfantryBays(), getOccupiedBays(Entity.ETYPE_INFANTRY), \"Infantry Not Transported:\", noinf));\n-\n-        if (noBA > 0 && freeinf > 0) {\n-\n-        }\n-\n-        // Lets do Battle Armor next.\n-        sb.append(String.format(\"%-35s      %4d (%4d)      %-35s     %4d\\n\", \"Battle Armor Bays (Occupied):\",\n-                getTotalBattleArmorBays(), getOccupiedBays(Entity.ETYPE_BATTLEARMOR), \"Battle Armor Not Transported:\",\n-                noBA));\n-\n-        if (noinf > 0 && freeba > 0) {\n-\n-        }\n-\n-        // Lets do Small Craft next.\n-        sb.append(String.format(\"%-35s      %4d (%4d)      %-35s     %4d\\n\", \"Small Craft Bays (Occupied):\",\n-                getTotalSmallCraftBays(), getOccupiedBays(Entity.ETYPE_SMALL_CRAFT), \"Small Craft Not Transported:\",\n-                noSC));\n-\n-        if (noASF > 0 && freeSC > 0) {\n-            // Lets do ASF in Free Small Craft Bays next.\n-            sb.append(String.format(\"%-35s   %4d (%4d)      %-35s     %4d\\n\", \"   ASF in Small Craft Bays (Occupied):\",\n-                    getTotalSmallCraftBays(), getOccupiedBays(Entity.ETYPE_SMALL_CRAFT) + placedASF,\n-                    \"ASF Not Transported:\", newNoASF));\n-        }\n-\n-        // Lets do Protomechs next.\n-        sb.append(String.format(\"%-35s      %4d (%4d)      %-35s     %4d\\n\", \"Protomech Bays (Occupied):\",\n-                getTotalProtomechBays(), getOccupiedBays(Entity.ETYPE_PROTOMECH), \"Protomechs Not Transported:\", noSC));\n-\n-        sb.append(\"\\n\\n\");\n-\n-        sb.append(String.format(\"%-35s      %4d (%4d)      %-35s     %4d\\n\", \"Docking Collars (Occupied):\",\n-                getTotalDockingCollars(), getOccupiedBays(Entity.ETYPE_DROPSHIP), \"Dropships Not Transported:\", noDS));\n-\n-        sb.append(\"\\n\\n\");\n-\n-        sb.append(String.format(\"%-35s      %4d\\n\", \"Mothballed Units (see Cargo report)\", mothballedAsCargo));\n-\n-        return new String(sb);\n-    }\n-\n-    public String getCombatPersonnelDetails() {\n-        int[] countPersonByType = new int[Person.T_NUM];\n-        int countTotal = 0;\n-        int countInjured = 0;\n-        int countMIA = 0;\n-        int countKIA = 0;\n-        int countRetired = 0;\n-        Money salary = Money.zero();\n-\n+    public void initTimeInService() {\n         for (Person p : getPersonnel()) {\n-            // Add them to the total count\n-            if (Person.isCombatRole(p.getPrimaryRole()) && !p.isPrisoner()\n-                    && !p.isBondsman() && p.isActive()) {\n-                countPersonByType[p.getPrimaryRole()]++;\n-                countTotal++;\n-                if (getCampaignOptions().useAdvancedMedical()\n-                        && p.getInjuries().size() > 0) {\n-                    countInjured++;\n-                } else if (p.getHits() > 0) {\n-                    countInjured++;\n+            if (!p.isDependent() && p.getPrisonerStatus().isFree()) {\n+                LocalDate join = null;\n+                for (LogEntry e : p.getPersonnelLog()) {\n+                    if (join == null) {\n+                        // If by some nightmare there is no Joined date just use the first entry.\n+                        join = e.getDate();\n+                    }\n+                    if (e.getDesc().startsWith(\"Joined \") || e.getDesc().startsWith(\"Freed \")) {\n+                        join = e.getDate();\n+                        break;\n+                    }\n                 }\n-                salary = salary.plus(p.getSalary());\n-            } else if (Person.isCombatRole(p.getPrimaryRole())\n-                    && p.getStatus() == Person.S_RETIRED) {\n-                countRetired++;\n-            } else if (Person.isCombatRole(p.getPrimaryRole())\n-                    && p.getStatus() == Person.S_MIA) {\n-                countMIA++;\n-            } else if (Person.isCombatRole(p.getPrimaryRole())\n-                    && p.getStatus() == Person.S_KIA) {\n-                countKIA++;\n-            }\n-        }\n \n-        StringBuffer sb = new StringBuffer(\"Combat Personnel\\n\\n\");\n-\n-        String buffer = String.format(\"%-30s        %4s\\n\", \"Total Combat Personnel\",\n-                countTotal);\n-        sb.append(buffer);\n-\n-        for (int i = 0; i < Person.T_NUM; i++) {\n-            if (Person.isCombatRole(i)) {\n-                buffer = String.format(\"    %-30s    %4s\\n\", Person.getRoleDesc(i, getFaction().isClan()),\n-                        countPersonByType[i]);\n-                sb.append(buffer);\n+                p.setRecruitment((join != null) ? join : getLocalDate().minusYears(1));\n             }\n         }\n-\n-        buffer = String.format(\"%-30s        %4s\\n\",\n-                \"Injured Combat Personnel\", countInjured);\n-        sb.append(\"\\n\" + buffer);\n-        buffer = String.format(\"%-30s        %4s\\n\", \"MIA Combat Personnel\",\n-                countMIA);\n-        sb.append(buffer);\n-        buffer = String.format(\"%-30s        %4s\\n\", \"KIA Combat Personnel\",\n-                countKIA);\n-        sb.append(buffer);\n-        buffer = String.format(\"%-30s        %4s\\n\",\n-                \"Retired Combat Personnel\", countRetired);\n-        sb.append(buffer);\n-\n-        sb.append(\"\\nMonthly Salary For Combat Personnel: \" + salary.toAmountAndSymbolString());\n-\n-        return new String(sb);\n     }\n \n-    public String getSupportPersonnelDetails() {\n-        int[] countPersonByType = new int[Person.T_NUM];\n-        int countTotal = 0;\n-        int countInjured = 0;\n-        int countMIA = 0;\n-        int countKIA = 0;\n-        int countRetired = 0;\n-        Money salary = Money.zero();\n-        int prisoners = 0;\n-        int bondsmen = 0;\n-\n+    public void initTimeInRank() {\n         for (Person p : getPersonnel()) {\n-            // Add them to the total count\n-            if (Person.isSupportRole(p.getPrimaryRole()) && !p.isPrisoner()\n-                    && !p.isBondsman() && p.isActive()) {\n-                countPersonByType[p.getPrimaryRole()]++;\n-                countTotal++;\n-                if (p.getInjuries().size() > 0 || p.getHits() > 0) {\n-                    countInjured++;\n-                }\n-                salary = salary.plus(p.getSalary());\n-            } else if (p.isPrisoner() && p.isActive()) {\n-                prisoners++;\n-                if (p.getInjuries().size() > 0 || p.getHits() > 0) {\n-                    countInjured++;\n-                }\n-            } else if (p.isBondsman() && p.isActive()) {\n-                bondsmen++;\n-                if (p.getInjuries().size() > 0 || p.getHits() > 0) {\n-                    countInjured++;\n-                }\n-            } else if (Person.isSupportRole(p.getPrimaryRole())\n-                    && p.getStatus() == Person.S_RETIRED) {\n-                countRetired++;\n-            } else if (Person.isSupportRole(p.getPrimaryRole())\n-                    && p.getStatus() == Person.S_MIA) {\n-                countMIA++;\n-            } else if (Person.isSupportRole(p.getPrimaryRole())\n-                    && p.getStatus() == Person.S_KIA) {\n-                countKIA++;\n-            }\n-        }\n+            if (!p.isDependent() && p.getPrisonerStatus().isFree()) {\n \n-        StringBuffer sb = new StringBuffer(\"Support Personnel\\n\\n\");\n+                LocalDate join = null;\n+                for (LogEntry e : p.getPersonnelLog()) {\n+                    if (join == null) {\n+                        // If by some nightmare there is no date from the below, just use the first entry.\n+                        join = e.getDate();\n+                    }\n \n-        String buffer = String.format(\"%-30s        %4s\\n\", \"Total Support Personnel\",\n-                countTotal);\n-        sb.append(buffer);\n+                    if (e.getDesc().startsWith(\"Joined \") || e.getDesc().startsWith(\"Freed \")\n+                            || e.getDesc().startsWith(\"Promoted \") || e.getDesc().startsWith(\"Demoted \")) {\n+                        join = e.getDate();\n+                    }\n+                }\n \n-        for (int i = 0; i < Person.T_NUM; i++) {\n-            if (Person.isSupportRole(i)) {\n-                buffer = String.format(\"    %-30s    %4s\\n\", Person.getRoleDesc(i, getFaction().isClan()),\n-                        countPersonByType[i]);\n-                sb.append(buffer);\n+                // For that one in a billion chance the log is empty. Clone today's date and subtract a year\n+                p.setLastRankChangeDate((join != null) ? join : getLocalDate().minusYears(1));\n             }\n         }\n-\n-        buffer = String.format(\"%-30s        %4s\\n\",\n-                \"Injured Support Personnel\", countInjured);\n-        sb.append(\"\\n\" + buffer);\n-        buffer = String.format(\"%-30s        %4s\\n\", \"MIA Support Personnel\",\n-                countMIA);\n-        sb.append(buffer);\n-        buffer = String.format(\"%-30s        %4s\\n\", \"KIA Support Personnel\",\n-                countKIA);\n-        sb.append(buffer);\n-        buffer = String.format(\"%-30s        %4s\\n\",\n-                \"Retired Support Personnel\", countRetired);\n-        sb.append(buffer);\n-\n-        sb.append(\"\\nMonthly Salary For Support Personnel: \" + salary.toAmountAndSymbolString());\n-\n-        sb.append(String.format(\"\\nYou have \" + prisoners + \" prisoner%s\",\n-                prisoners == 1 ? \"\" : \"s\"));\n-        sb.append(String.format(\"\\nYou have \" + bondsmen + \" %s\",\n-                bondsmen == 1 ? \"bondsman\" : \"bondsmen\"));\n-\n-        return new String(sb);\n     }\n \n-    public void doMaintenance(Unit u) {\n-        if (!u.requiresMaintenance()) {\n-            return;\n-        }\n-        // lets start by checking times\n-        Person tech = u.getTech();\n-        int minutesUsed = u.getMaintenanceTime();\n-        int astechsUsed = getAvailableAstechs(minutesUsed, false);\n-        boolean maintained = null != tech\n-                && tech.getMinutesLeft() >= minutesUsed && !tech.isMothballing();\n-        boolean paidMaintenance = true;\n-        if (maintained) {\n-            // use the time\n-            tech.setMinutesLeft(tech.getMinutesLeft() - minutesUsed);\n-            astechPoolMinutes -= astechsUsed * minutesUsed;\n-        }\n-        u.incrementDaysSinceMaintenance(maintained, astechsUsed);\n-        if (u.getDaysSinceMaintenance() >= getCampaignOptions().getMaintenanceCycleDays()) {\n-            // maybe use the money\n-            if (campaignOptions.payForMaintain()) {\n-                if (finances.debit(u.getMaintenanceCost(), Transaction.C_MAINTAIN, \"Maintenance for \" + u.getName(),\n-                        calendar.getTime())) {\n-                } else {\n-                    addReport(\"<font color='red'><b>You cannot afford to pay maintenance costs for \"\n-                            + u.getHyperlinkedName() + \"!</b></font>\");\n-                    paidMaintenance = false;\n-                }\n-            }\n-            if (getCampaignOptions().checkMaintenance()) {\n-                // its time for a maintenance check\n-                int qualityOrig = u.getQuality();\n-                String techName = \"Nobody\";\n-                String techNameLinked = techName;\n-                if (null != tech) {\n-                    techName = tech.getFullTitle();\n-                    techNameLinked = tech.getHyperlinkedFullTitle();\n-                }\n-                // dont do actual damage until we clear the for loop to avoid\n-                // concurrent mod problems\n-                // put it into a hash - 4 points of damage will mean destruction\n-                HashMap<Integer, Integer> partsToDamage = new HashMap<>();\n-                String maintenanceReport = \"<emph>\" + techName + \" performing maintenance</emph><br><br>\";\n-                for (Part p : u.getParts()) {\n-                    String partReport = \"<b>\" + p.getName() + \"</b> (Quality \" + p.getQualityName() + \")\";\n-                    if (!p.needsMaintenance()) {\n-                        continue;\n-                    }\n-                    int oldQuality = p.getQuality();\n-                    TargetRoll target = getTargetForMaintenance(p, tech);\n-                    if (!paidMaintenance) {\n-                        // I should probably make this modifier user inputtable\n-                        target.addModifier(1, \"did not pay maintenance\");\n-                    }\n-                    partReport += \", TN \" + target.getValue() + \"[\" + target.getDesc() + \"]\";\n-                    int roll = Compute.d6(2);\n-                    int margin = roll - target.getValue();\n-                    partReport += \" rolled a \" + roll + \", margin of \" + margin;\n-                    switch (p.getQuality()) {\n-                        case Part.QUALITY_F:\n-                            if (margin < -2) {\n-                                p.decreaseQuality();\n-                                if (margin < -6 && !campaignOptions.useUnofficialMaintenance()) {\n-                                    partsToDamage.put(p.getId(), 1);\n-                                }\n-                            }\n-                            if (margin >= 6) {\n-                                // TODO: award XP point (make this optional)\n-                            }\n-                            break;\n-                        case Part.QUALITY_E:\n-                            if (margin < -2) {\n-                                p.decreaseQuality();\n-                                if (margin < -5 && !campaignOptions.useUnofficialMaintenance()) {\n-                                    partsToDamage.put(p.getId(), 1);\n-                                }\n-                            }\n-                            if (margin >= 6) {\n-                                p.improveQuality();\n-                            }\n-                            break;\n-                        case Part.QUALITY_D:\n-                            if (margin < -3) {\n-                                p.decreaseQuality();\n-                                if (margin < -4 && !campaignOptions.useUnofficialMaintenance()) {\n-                                    partsToDamage.put(p.getId(), 1);\n-                                }\n-                            }\n-                            if (margin >= 5) {\n-                                p.improveQuality();\n-                            }\n-                            break;\n-                        case Part.QUALITY_C:\n-                            if (margin < -4) {\n-                                p.decreaseQuality();\n-                            }\n-                            if (!campaignOptions.useUnofficialMaintenance()) {\n-                                if (margin < -6) {\n-                                    partsToDamage.put(p.getId(), 2);\n-                                } else if (margin < -3) {\n-                                    partsToDamage.put(p.getId(), 1);\n-                                }\n-                            }\n-                            if (margin >= 5) {\n-                                p.improveQuality();\n-                            }\n-                            break;\n-                        case Part.QUALITY_B:\n-                            if (margin < -5) {\n-                                p.decreaseQuality();\n-                            }\n-                            if (!campaignOptions.useUnofficialMaintenance()) {\n-                                if (margin < -6) {\n-                                    partsToDamage.put(p.getId(), 2);\n-                                } else if (margin < -2) {\n-                                    partsToDamage.put(p.getId(), 1);\n-                                }\n-                            }\n-                            if (margin >= 4) {\n-                                p.improveQuality();\n-                            }\n-                            break;\n-                        case Part.QUALITY_A:\n-                            if (!campaignOptions.useUnofficialMaintenance()) {\n-                                if (margin < -6) {\n-                                    partsToDamage.put(p.getId(), 4);\n-                                } else if (margin < -4) {\n-                                    partsToDamage.put(p.getId(), 3);\n-                                } else if (margin == -4) {\n-                                    partsToDamage.put(p.getId(), 2);\n-                                } else if (margin < -1) {\n-                                    partsToDamage.put(p.getId(), 1);\n-                                }\n-                            } else if (margin < -6) {\n-                                partsToDamage.put(p.getId(), 1);\n-                            }\n-                            if (margin >= 4) {\n-                                p.improveQuality();\n-                            }\n-                            break;\n-                    }\n-                    if (p.getQuality() > oldQuality) {\n-                        partReport += \": <font color='green'>new quality is \" + p.getQualityName() + \"</font>\";\n-                    } else if (p.getQuality() < oldQuality) {\n-                        partReport += \": <font color='red'>new quality is \" + p.getQualityName() + \"</font>\";\n-                    } else {\n-                        partReport += \": quality remains \" + p.getQualityName();\n-                    }\n-                    if (null != partsToDamage.get(p.getId())) {\n-                        if (partsToDamage.get(p.getId()) > 3) {\n-                            partReport += \", <font color='red'><b>part destroyed</b></font>\";\n-                        } else {\n-                            partReport += \", <font color='red'><b>part damaged</b></font>\";\n-                        }\n-                    }\n-                    maintenanceReport += partReport + \"<br>\";\n-                }\n-                int nDamage = 0;\n-                int nDestroy = 0;\n-                for (int key : partsToDamage.keySet()) {\n-                    Part p = getPart(key);\n-                    if (null != p) {\n-                        int damage = partsToDamage.get(key);\n-                        if (damage > 3) {\n-                            nDestroy++;\n-                            p.remove(false);\n-                        } else {\n-                            p.doMaintenanceDamage(damage);\n-                            nDamage++;\n-                        }\n+    public void initRetirementDateTracking() {\n+        for (Person person : getPersonnel()) {\n+            if (person.getStatus().isRetired()) {\n+                LocalDate retired = null;\n+                LocalDate lastLoggedDate = null;\n+                for (LogEntry entry : person.getPersonnelLog()) {\n+                    lastLoggedDate = entry.getDate();\n+                    if (entry.getDesc().startsWith(\"Retired\")) {\n+                        retired = entry.getDate();\n                     }\n                 }\n-                u.setLastMaintenanceReport(maintenanceReport);\n-                int quality = u.getQuality();\n-                String qualityString;\n-                boolean reverse = getCampaignOptions().reverseQualityNames();\n-                if (quality > qualityOrig) {\n-                    qualityString = \"<font color='green'>Overall quality improves from \"\n-                            + Part.getQualityName(qualityOrig, reverse) + \" to \" + Part.getQualityName(quality, reverse)\n-                            + \"</font>\";\n-                } else if (quality < qualityOrig) {\n-                    qualityString = \"<font color='red'>Overall quality declines from \"\n-                            + Part.getQualityName(qualityOrig, reverse) + \" to \" + Part.getQualityName(quality, reverse)\n-                            + \"</font>\";\n-                } else {\n-                    qualityString = \"Overall quality remains \" + Part.getQualityName(quality, reverse);\n-                }\n-                String damageString = \"\";\n-                if (nDamage > 0) {\n-                    damageString += nDamage + \" parts were damaged. \";\n-                }\n-                if (nDestroy > 0) {\n-                    damageString += nDestroy + \" parts were destroyed.\";\n-                }\n-                if (!damageString.isEmpty()) {\n-                    damageString = \"<b><font color='red'>\" + damageString + \"</b></font> [<a href='REPAIR|\" + u.getId()\n-                            + \"'>Repair bay</a>]\";\n-                }\n-                String paidString = \"\";\n-                if (!paidMaintenance) {\n-                    paidString = \"<font color='red'>Could not afford maintenance costs, so check is at a penalty.</font>\";\n-                }\n-                addReport(techNameLinked + \" performs maintenance on \" + u.getHyperlinkedName() + \". \" + paidString\n-                        + qualityString + \". \" + damageString + \" [<a href='MAINTENANCE|\" + u.getId()\n-                        + \"'>Get details</a>]\");\n-            }\n-            u.resetDaysSinceMaintenance();\n-        }\n-    }\n \n-    public void initTimeInService() {\n-        for (Person p : getPersonnel()) {\n-            Date join = null;\n-            for (LogEntry e : p.getPersonnelLog()) {\n-                if (join == null){\n-                    // If by some nightmare there is no Joined date just use the first entry.\n-                    join = e.getDate();\n-                }\n-                if (e.getDesc().startsWith(\"Joined \") || e.getDesc().startsWith(\"Freed \")) {\n-                    join = e.getDate();\n-                    break;\n-                }\n-            }\n-            if (!p.isDependent() && !p.isPrisoner() && !p.isBondsman()) {\n-                GregorianCalendar cal = (GregorianCalendar) GregorianCalendar.getInstance();\n-                // For that one in a billion chance the log is empty. Clone todays date and subtract a year\n-                if (join == null) {\n-                    cal = (GregorianCalendar)calendar.clone();\n-                    cal.add(Calendar.YEAR, -1);\n-                    p.setRecruitment(cal);\n-                } else {\n-                    cal.setTime(join);\n-                    p.setRecruitment(cal);\n+                if (retired == null) {\n+                    retired = lastLoggedDate;\n                 }\n+\n+                // For that one in a billion chance the log is empty. Clone today's date and subtract a year\n+                person.setRetirement((retired != null) ? retired : getLocalDate().minusYears(1));\n             }\n         }\n     }\n \n     public void initAtB(boolean newCampaign) {\n-        getRetirementDefectionTracker().setLastRetirementRoll(getCalendar());\n+        getRetirementDefectionTracker().setLastRetirementRoll(getLocalDate());\n \n         if (!newCampaign) {\n             /*\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "3f55aabad31fb84ff1e5af9c8caac7bd8c8999a0", "message": "Merge commit", "committedDate": null}, {"oid": "a0c1cbf9746ed9486f08ce4aa2376828e846c786", "committedDate": "2019-02-26 21:45:56 -0500", "message": "merge"}, {"oid": "3002e321d67f944da3a051a049f0706c0e353aa0", "committedDate": "2019-03-04 20:50:34 -0500", "message": "merge from upstream"}, {"oid": "34f5dfffab4318e94903fece9dbf49dd1ee475c7", "committedDate": "2019-04-23 22:53:00 -0400", "message": "continues work on track gui and rules"}, {"oid": "b1c2e0f95fc8ad45080d9962da602d5fe815c34b", "committedDate": "2019-04-26 22:02:27 -0400", "message": "hook up stratcon rules manager to mekhq event bus"}, {"oid": "6f180f04dabdd9901dc392b093561514eb2e84cc", "committedDate": "2019-05-04 12:17:55 -0400", "message": "merge from upstream"}, {"oid": "119ff411ebb80f91b83b3fe139bb911a79048b3d", "committedDate": "2019-05-12 15:48:11 -0400", "message": "scenario setup work"}, {"oid": "2548381ed541547a775bb8c96fd53802087ec9aa", "committedDate": "2019-06-20 23:58:58 -0400", "message": "merge from upstream"}, {"oid": "ed6a5c015aa33d0bffdcd3297b9482ce600eb146", "committedDate": "2020-04-11 22:33:14 -0400", "message": "merge from upstream"}, {"oid": "ca46ea5005775f38ad56f98bfb8899a187571e49", "committedDate": "2020-06-03 11:30:19 -0400", "message": "merge from upstream"}, {"oid": "b2f014d250be5b4b75ed3f765f10ee1781ab96ae", "committedDate": "2020-06-23 22:21:32 -0400", "message": "merge from upstream"}, {"oid": "2bd7638ed4cc2ad5bc80e4b1bc78ff091c318a87", "committedDate": "2020-07-13 00:06:30 -0400", "message": "merge from upstream"}, {"oid": "d4f035c262d3d9ea7b7f5e935a5807bf5275aa91", "committedDate": "2020-08-08 23:08:38 -0400", "message": "merge from upstream"}, {"oid": "5830ebef6d2f671d0b152f328436ab36bcddacf4", "committedDate": "2020-08-24 20:32:16 -0400", "message": "merge from upstream"}, {"oid": "c8622590fef59265a5a8c4f68676a4a628d0fc0a", "committedDate": "2020-08-26 23:17:49 -0400", "message": "multiple bug fixes and hookup to actual campaign"}, {"oid": "935339ac1b799e58664d736142b2a1fa0d9e4263", "committedDate": "2020-09-09 00:06:07 -0400", "message": "merge from upstream"}, {"oid": "c7d9edb3737ba14da075190a1292ac94bbd7e0f2", "committedDate": "2020-09-20 14:36:56 -0600", "message": "Adding code for a log entry when swapping TOE force."}, {"oid": "2e590a1dbeb8a7b132cd5d312b93af37b9e0620a", "committedDate": "2020-09-29 10:15:54 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_476"}, {"oid": "04f10ee4b7f5bf57284109439ec1ab178b15857e", "committedDate": "2020-10-06 21:41:18 -0400", "message": "merge from upstream"}, {"oid": "04a16de448a0c7d576a6c3c64c9d23ae08384bae", "committedDate": "2020-10-07 14:33:13 -0400", "message": "Split out cargo and hangar statistics from Campaign"}, {"oid": "796379c3c13e8dadad4ac4cfd29f02a30e9c2bd1", "committedDate": "2020-10-07 14:33:13 -0400", "message": "Split out accounting from the Campaign"}, {"oid": "a254e204d91c3fd90698936f8d21aba26aaf0142", "committedDate": "2020-10-07 14:33:14 -0400", "message": "Move PersonnelReport methods"}, {"oid": "361dde24295aa66e89fea69823b01cf497cf4664", "committedDate": "2020-10-07 14:33:14 -0400", "message": "Move more financial reporting out of Campaign"}, {"oid": "c28db6f06dec2b03e487c15f514685d852bdca1e", "committedDate": "2020-10-07 14:33:14 -0400", "message": "Remove unused methods"}, {"oid": "039786019051fddf3af641c0cc0e35e7c85eb156", "committedDate": "2020-10-07 15:49:11 -0400", "message": "Make testing Accountant easier for a Campaign"}, {"oid": "a72b07d7b8ec62055140cd346314602fb020119e", "committedDate": "2020-10-07 16:11:53 -0400", "message": "Make it easier to mock stats classes"}, {"oid": "0400aac175c219dc2fb73ea0a8dfbbf429aaff6e", "committedDate": "2020-10-07 16:45:26 -0400", "message": "Add forEachSparePart to improve performance"}, {"oid": "63e028b04713a41ec415910ea4d0ed03a3678864", "committedDate": "2020-10-08 13:32:32 -0400", "message": "Merge remote-tracking branch 'upstream/master' into move-accounting-and-stats-out-of-campaign"}, {"oid": "13de948b34166d73f4f7a2e5a8982c9f693b12bc", "committedDate": "2020-10-10 15:15:00 -0400", "message": "Use Person directly instead of IDs in Unit"}, {"oid": "923a477ddb1060c2a48c13cca7c5900a40c0f82a", "committedDate": "2020-10-10 15:15:00 -0400", "message": "Use Person instead of an ID"}, {"oid": "58291b29acbe7cc24a4491f3d3ab911f0468a7dc", "committedDate": "2020-10-10 15:41:57 -0400", "message": "Fix logic to check for Already Being Worked On"}, {"oid": "998ab0faf85804f17cc7444ae1b46c2591b5db1f", "committedDate": "2020-10-15 23:34:03 -0400", "message": "merge from upstream"}, {"oid": "75e396b885c6008c6f6a7d72f1bbd7aad8099970", "committedDate": "2020-10-16 16:29:27 -0400", "message": "Moving to an enum for mission status"}, {"oid": "24de5e9720cf823838bf74e4cf4eb562bedbb437", "committedDate": "2020-10-16 18:28:46 -0400", "message": "Merging useUnitRating with the UnitRatingMethod enum"}, {"oid": "ca615b8e13e2158834a33079c6f89b02504c0bf7", "committedDate": "2020-10-17 01:17:28 -0400", "message": "Moving to using AbstractIcon for constants"}, {"oid": "4a54c7e9a18be4084eb1d3748a891b46400bf53d", "committedDate": "2020-10-17 13:11:47 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_IconConstants"}, {"oid": "9c1a47e2e6268b362edd3d6eb2e39018b5802179", "committedDate": "2020-10-20 14:49:01 -0400", "message": "Address PR feedback"}, {"oid": "b5d38e8af270f50fc091db05cf882ea8380fe3a7", "committedDate": "2020-10-20 14:49:08 -0400", "message": "Merge remote-tracking branch 'upstream/master' into units-hold-actual-persons"}, {"oid": "f34ac06c3db416f5e852246e928d3b1c6c132500", "committedDate": "2020-10-20 21:00:04 -0400", "message": "Merge branch 'master' into dev_Windchild_MissionStatus"}, {"oid": "fbc730260407b11dc98571c9b5e184e8f05e6a89", "committedDate": "2020-10-22 12:56:22 -0400", "message": "Standardizing to use the PortraitChooser instead of the older icon selector"}, {"oid": "0637c9d04376fbc5378a09826bdd58e1092b97f0", "committedDate": "2020-10-22 15:07:25 -0400", "message": "Use Units rather than their IDs"}, {"oid": "d25f391110cab3b64118d5963e321c379f8ab3ec", "committedDate": "2020-10-22 15:07:25 -0400", "message": "Do not use Unit IDs in Refits"}, {"oid": "5bf80c3e80c7fd9247fee197d749605de4a4e17b", "committedDate": "2020-10-22 15:07:49 -0400", "message": "Merge branch 'master' into dev_Windchild_IconConstants"}, {"oid": "2eec6da85e021ce0398fd3d715071b7b625855ba", "committedDate": "2020-10-22 23:15:38 -0400", "message": "merge from upstream"}, {"oid": "599b0a3158d94a3eea50fe8314c55177a344c2a9", "committedDate": "2020-10-24 14:22:32 -0400", "message": "Merge remote-tracking branch 'upstream/master' into use-units-not-ids"}, {"oid": "1d9b9a6ee2a71f128d65bb7754463be3ca9a71bc", "committedDate": "2020-10-24 14:26:31 -0400", "message": "Address LGTM issues"}, {"oid": "9f22e79abf71f3d8cf935d5d83d4790af02b32ce", "committedDate": "2020-10-24 14:48:29 -0400", "message": "Add tests for transport unit sets"}, {"oid": "851026ff48ec4e39238b2c56212bac2ea7993670", "committedDate": "2020-10-26 14:53:19 -0400", "message": "Use new Warehouse type in Campaign (etc)"}, {"oid": "37fc5840de9bf6c5bb19b38767e1394be220e1b9", "committedDate": "2020-10-26 16:02:30 -0400", "message": "Move some event logic to the Warehouse"}, {"oid": "3f795a2b3ba1840a198ca067a1d76aed4429f699", "committedDate": "2020-10-26 17:26:50 -0400", "message": "Move removing child parts to the Warehouse"}, {"oid": "d597a8aab6c1b948ebfdcc3f58d2213acb04b200", "committedDate": "2020-10-27 12:29:29 -0400", "message": "Starting to implement edge fixes"}, {"oid": "9978a0b21dd7d6fbd2d0077748027c6ed31753b0", "committedDate": "2020-10-27 12:29:35 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_Edge"}, {"oid": "b2aea6b5d940c4fa06a42cd1b04559815323ab63", "committedDate": "2020-10-27 13:04:35 -0400", "message": "Working on edge code"}, {"oid": "fbd0d470437e527c764daa294d1521ca7509a6af", "committedDate": "2020-10-27 14:04:21 -0400", "message": "Implementing changes as per review"}, {"oid": "c883a5f8c0085c74e8f448ecd3c0f9c04227b067", "committedDate": "2020-10-27 17:22:03 -0400", "message": "Move spare part helpers to Warehouse and add tests"}, {"oid": "dfca32fc2a15a2908cd4f1277261d416fcad1f00", "committedDate": "2020-10-27 21:14:06 -0400", "message": "merge from upstream"}, {"oid": "a7d7c78d0149d3de3828501499fdf61b5ae75be6", "committedDate": "2020-10-28 14:17:13 -0400", "message": "Merge pull request #2167 from sixlettervariables/add-parts-warehouse"}, {"oid": "d9aa78378bd639bd9bd8b36e16e9d407d5c2f1a6", "committedDate": "2020-10-28 14:28:37 -0400", "message": "Clean up part events in Campaign"}, {"oid": "f6acac4474902742fd52f7d3d9cc3cf3c074d16a", "committedDate": "2020-10-28 15:35:29 -0400", "message": "Address LGTM nit"}, {"oid": "b60b5a84ad487fe05e6369a11fedccb4f233a69d", "committedDate": "2020-10-29 15:28:06 -0400", "message": "Move Hire Personnel for a Unit to an action"}, {"oid": "d32837864805c67ac3894ce3a6b84ee8dae064a3", "committedDate": "2020-10-29 15:43:23 -0400", "message": "Don't use unit IDs for parts needing service"}, {"oid": "92b838a6428bae18030b98719a0c20d399377282", "committedDate": "2020-10-29 15:51:09 -0400", "message": "Move unnecessary unit logic from Campaign and into Unit"}, {"oid": "fd327a8f439a378f8f34afcb3067fe57153dcc2d", "committedDate": "2020-11-03 21:23:25 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_MHQPortraitSelector"}, {"oid": "0cbe836f9e807faf4cbef1d391b1ce3ad0e865d1", "committedDate": "2020-11-04 16:17:23 -0500", "message": "Add Quartermaster to manage machines and materiel"}, {"oid": "18cddebe515dbc58e76c49ef789cb3f4b31bc8a2", "committedDate": "2020-11-06 14:57:11 -0500", "message": "Address PR feedback and fix #1801"}, {"oid": "dd8b9c84414cb11c30ec6e2d395e2260235cd73a", "committedDate": "2020-11-06 14:58:38 -0500", "message": "Fix extraneous whitespace"}, {"oid": "31c96a9e64873aa2840946dbb1c12d347994780d", "committedDate": "2020-11-06 16:10:50 -0500", "message": "Swapping portrait generation to use system-based file path comparison"}, {"oid": "8bf24b6a7be023940aad58a0c3c3ded1ee2a9358", "committedDate": "2020-11-06 16:50:16 -0500", "message": "Fixing merge conflicts"}, {"oid": "206529fd93c7b6efd22949d747ea14ec2a1942ed", "committedDate": "2020-11-06 19:38:46 -0500", "message": "Merge pull request #2185 from sixlettervariables/use-units-not-ids-for-transports"}, {"oid": "f246ee2085262fe713a9f24b3eaf6e7adb142e41", "committedDate": "2020-11-07 10:40:39 -0500", "message": "Moving portrait generation code into a random portrait generator"}, {"oid": "139d94f86981a4c6b681ec14d16630b99198024a", "committedDate": "2020-11-07 12:32:07 -0500", "message": "AbstractIcon: Simplifying icon-related code"}, {"oid": "cbec2bdc4861f772bb509fc69f37a8c053522347", "committedDate": "2020-11-07 12:39:03 -0500", "message": "Removing duplicate constants in campaign"}, {"oid": "e9c4a88af33312b049543ac024e2c32784a7b209", "committedDate": "2020-11-07 12:52:54 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_AIPS"}, {"oid": "76f57ccbde3ae98e58e5264c5d06be29b03ce3af", "committedDate": "2020-11-07 15:16:08 -0500", "message": "Merge pull request #2209 from Windchild292/dev_Windchild_RPG"}, {"oid": "067bacc6c00b10192faa2b4e13d4c2127ba75292", "committedDate": "2020-11-07 22:39:06 -0500", "message": "Merge pull request #2211 from Windchild292/dev_Windchild_AIPS"}, {"oid": "a38a43b4cc7f7670aa7ffad2bf318bc15334d0a1", "committedDate": "2020-11-08 13:55:37 -0500", "message": "Merge remote-tracking branch 'upstream/master' into add-quartermaster-2"}, {"oid": "6b4dfeadd20c22e92cb2a0328030ed58c3df5cd1", "committedDate": "2020-11-14 19:29:15 -0500", "message": "Swapping Genealogy and FormerSpouse to no longer use id when active."}, {"oid": "aa59e47ee67a276b3a415ab3cb761291fa2d1593", "committedDate": "2020-11-15 16:10:53 -0500", "message": "Only return non-zero quantities of parts, fixing #2231"}, {"oid": "24c2199bd396e7e059f3a3123c060fce92c04726", "committedDate": "2020-11-30 21:41:10 -0500", "message": "merge from upstream"}, {"oid": "6b3e4afa0664f35d2fc49a8e881b2fd7f22ea981", "committedDate": "2020-12-04 07:37:02 -0500", "message": "Use tested spare part consolidation logic"}, {"oid": "749469b9d6c8f7a36748d76c53dae5cc39365894", "committedDate": "2020-12-04 10:33:33 -0500", "message": "Fixup whitespace"}, {"oid": "cb8a407413b0629636afe9dc153a93699cbcb2da", "committedDate": "2020-12-04 12:21:25 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_476"}, {"oid": "7c0dd98fed591d24803031e815a39480fae3da18", "committedDate": "2020-12-04 12:24:21 -0500", "message": "Fixing merge conflitcs"}, {"oid": "d770e67e26237234553967696e546ef4cd5e6c4a", "committedDate": "2020-12-04 16:20:00 -0500", "message": "Moving ranks to their own folder"}, {"oid": "198ea362215a2605015f13d5baf7a6f9a27e2323", "committedDate": "2020-12-04 17:57:54 -0500", "message": "Moving ranks system names to the Rank XML file"}, {"oid": "c88ca2c1c698dfe730b493048b630ef6d20ce973", "committedDate": "2020-12-13 02:45:36 -0500", "message": "Restore AtBContract references in the ContractMarket #2141"}, {"oid": "dce8434c1c674caf8ba284f7e99a0da72a679958", "committedDate": "2020-12-14 18:14:37 -0500", "message": "Merge pull request #2263 from Windchild292/dev_Windchild_2200"}, {"oid": "02b7023e03f921ec06430d3a3bfbf3fd4d06f12d", "committedDate": "2020-12-16 17:45:57 -0500", "message": "Add the ability to swap out instances of static classes"}, {"oid": "6fe11ed3dea3b240bc594dd3153526f8fa1efcd1", "committedDate": "2020-12-22 17:15:50 -0500", "message": "merge from upstream"}, {"oid": "1080fdc3cc0abf4b10a986fa95243f6a883a2446", "committedDate": "2020-12-22 17:22:20 -0500", "message": "Do not display unknown armor types in the Parts In Use report, fixes #2298"}, {"oid": "26577933fe91fcc839a403192479257fcf64f842", "committedDate": "2020-12-25 17:30:07 -0500", "message": "PlayerColours, Colour Camo Standardization, and standardizing camo selector"}, {"oid": "b7106b6df15109159676c4d5c76d6b57d98d749c", "committedDate": "2020-12-25 17:31:02 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_1727"}, {"oid": "256150fa6780932824d092bb5e1cfc5160a82798", "committedDate": "2020-12-26 23:02:07 -0500", "message": "Fixing colour camouflage during colour set"}, {"oid": "05bda11a452176725c2023ddfda641c5b9d77ff2", "committedDate": "2020-12-30 11:28:06 -0500", "message": "Merge pull request #2294 from sixlettervariables/add-contract-market-tests"}, {"oid": "d96560342ac372c6159e2eb36a930d730575079e", "committedDate": "2020-12-31 10:50:32 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_1727"}, {"oid": "87fef495531a68093af610ebd4d170ad9fe58ed7", "committedDate": "2020-12-31 13:13:30 -0500", "message": "Applying requisite changes in other files"}, {"oid": "1077aa3ce47d85a2b52d46fe24d0a9d6500338b3", "committedDate": "2021-01-07 22:38:01 -0500", "message": "Implementing PersonnelRole Enum"}, {"oid": "7ee43f4d3196080806f016767d68fcc646806b95", "committedDate": "2021-01-08 13:14:46 -0500", "message": "Fixing merge conflicts"}, {"oid": "461f2e03e5c7b7e233ccb188ab3acbea84217051", "committedDate": "2021-01-09 12:33:02 -0500", "message": "Fixing merge conflicts"}, {"oid": "7715f2d53d7b785432c6d12abe076dd9fe734b63", "committedDate": "2021-01-11 00:08:57 -0500", "message": "Continuing camouflage AbstractIcon implementation"}, {"oid": "5c767fe20f909aed7ad9ee04af783fada0f01183", "committedDate": "2021-01-13 14:44:22 -0500", "message": "Fixing colour set and moving EntityImage to use proper camo type"}, {"oid": "13a860aed5400a5bf2ccb7ff55f12b6266ed1c86", "committedDate": "2021-01-14 15:40:05 -0500", "message": "Moving to fully use isConventionalInfantry"}, {"oid": "b395926d66b44f814eeccbcdf238377754b3497f", "committedDate": "2021-01-16 12:03:30 -0500", "message": "Swapping to using streams for missions"}, {"oid": "3c08e5b43761cd85a411618df940a669f43b0f74", "committedDate": "2021-01-16 12:03:41 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_MissionStatus"}, {"oid": "56075ee22d31cf6645cfbc078f6d0059a7c35a2e", "committedDate": "2021-01-16 13:07:08 -0500", "message": "Swapping to stream implementation"}, {"oid": "c56982c6b4c7590fa58659f5739adb6fb98c38b3", "committedDate": "2021-01-16 13:20:27 -0500", "message": "Applying changes from personal review"}, {"oid": "bac1ae00109056ac5aaf4ddf35370fb62657e4ed", "committedDate": "2021-01-16 13:40:07 -0500", "message": "Moving to only use getMissions when necessary"}, {"oid": "6a6ab7d22aae49fceae02409ae8f3121e890ccc1", "committedDate": "2021-01-16 13:57:34 -0500", "message": "Moving to isActiveOn"}, {"oid": "e0a11cd0c98c4fd665190822f79c498645f15426", "committedDate": "2021-01-31 13:08:13 -0700", "message": "Renaming a bunch of personnel options"}, {"oid": "a16944f0ca0f8452a8500b311c0d4c1afd4f69ad", "committedDate": "2021-01-31 13:14:59 -0700", "message": "Finishing the option renames"}, {"oid": "3055e76295deb7d552bc3972b69cc6e0fb1f8760", "committedDate": "2021-02-01 10:17:56 -0700", "message": "Starting to implement Automatic Company Generation"}, {"oid": "909ceb8a84cdd6031bf90c300d47b4d2da527643", "committedDate": "2021-02-01 21:19:14 -0700", "message": "Continuing to work on an AtB Company Generator"}, {"oid": "50d74c591ba7b25978e91a326e3d0ce53513c6cd", "committedDate": "2021-02-07 16:50:13 -0700", "message": "Continuing to implement company generation and its options"}, {"oid": "426328755b88eceb8119a0c91696b2e655a0c00e", "committedDate": "2021-02-08 12:27:32 -0700", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_PersonnelRoles"}, {"oid": "9cbf543bf750926dffd2ad77d82e8da2dc416a54", "committedDate": "2021-02-08 12:57:48 -0700", "message": "Bugfixes and some code cleanup from personal review"}, {"oid": "f00627349f7dfb1bfb29305b3377fa3fea2776c5", "committedDate": "2021-02-11 10:55:45 -0700", "message": "Adding Unit::isConventionalInfantry to ensure the entity is null checked"}, {"oid": "d5767fac16735b748124c2759fa7e02388f3e3e0", "committedDate": "2021-02-11 12:52:56 -0700", "message": "Applying changes from personal review"}, {"oid": "d69c0121a94474264821a25df299ecf667dfefdf", "committedDate": "2021-02-12 22:37:21 -0500", "message": "merge from upstream"}, {"oid": "17e3819e3ef169b2b2bf9114df56a23fc8f57f8b", "committedDate": "2021-02-19 09:26:24 -0500", "message": "Add logging and error trapping on daily unit maintenance #2427"}, {"oid": "3a7dc0d62fbf19186d1bbebeefc14a1838733180", "committedDate": "2021-02-19 09:32:56 -0500", "message": "Add error trapping to daily part maintenance, related to #2427"}, {"oid": "efa0010ac4de3087fd997cad083dfcc7307f1fae", "committedDate": "2021-02-19 10:53:09 -0700", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_PersonnelOptionsTab"}, {"oid": "1e74b62a2b90eefb8fd7a24d4c24faf08d1c6b3b", "committedDate": "2021-02-19 12:27:59 -0700", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_AtBCompanyGeneration"}, {"oid": "8f0b7abad948bde3df857ec022c1a3668076b29c", "committedDate": "2021-02-26 13:31:57 -0700", "message": "2442: Fixing Ranks Issues: Removing ancient migration and code, Using proper setter, and using the Ranks as the spinner"}, {"oid": "d52c982d8da547329729b0caea1fffab274e1b0c", "committedDate": "2021-02-27 10:23:14 -0500", "message": "Use MM's new UnitNameTracker for name collisions"}, {"oid": "3c5f987fa51fbe18454c55214f4d5d5f2b980a90", "committedDate": "2021-03-01 09:12:20 -0700", "message": "Fixing merge conflicts"}, {"oid": "b9f8896698477ed928a80443d0345d6397c58bb2", "committedDate": "2021-03-03 10:07:04 -0700", "message": "Fixing merge conflicts"}, {"oid": "1a9d000431b1f187634f7e6ef15161dd07678998", "committedDate": "2021-03-05 12:19:51 -0700", "message": "Continuing to work on the company generator"}, {"oid": "7f59899475e511f98ed9f64a1c10efab11737c43", "committedDate": "2021-03-05 21:50:52 -0500", "message": "merge from upstream"}, {"oid": "1a6354d39d3f6108e9e0e6f9e455c5a126627347", "committedDate": "2021-03-06 10:44:21 -0500", "message": "Address review comments"}, {"oid": "18c7330a3cc319d1dc3e55892a46c5c80539db9a", "committedDate": "2021-03-06 09:56:12 -0700", "message": "Fixing merge conflicts"}, {"oid": "b19752176bb0619f7ccda9f75d551b050521a106", "committedDate": "2021-03-08 23:25:41 -0500", "message": "merge from upstream"}, {"oid": "0bc70593b2b327657e4ff7709e320451adfadbe6", "committedDate": "2021-03-09 09:01:53 -0700", "message": "Fixing merge conflicts"}, {"oid": "9eca5ea7a7d0fe44db02d1ce091f5bf294cb156d", "committedDate": "2021-03-09 09:07:57 -0700", "message": "Fixing merge conflicts"}, {"oid": "baefb52c3074832565148fffae6d1363449fa8ae", "committedDate": "2021-03-09 09:19:18 -0700", "message": "Fixing merge conflicts"}, {"oid": "9499ad003bfeb58930187abad3334129be912b4e", "committedDate": "2021-03-09 09:23:18 -0700", "message": "Fixing merge conflicts"}, {"oid": "d0e34e3b80c163ff4ed03474a3adcd39d061c9ee", "committedDate": "2021-03-09 09:39:24 -0700", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_ShoppingList"}, {"oid": "8ee805b229c9373e653376a749274023ef13139b", "committedDate": "2021-03-09 11:54:07 -0500", "message": "Merge pull request #2373 from Windchild292/dev_Windchild_isConventionalInfantry"}, {"oid": "559cb006d560fd2099639e701e37538aded7f3a1", "committedDate": "2021-03-09 12:19:33 -0500", "message": "Merge pull request #2337 from Windchild292/dev_Windchild_ShoppingList"}, {"oid": "2bf37308c59c435acc52e0cf512ce9f74d1adc7e", "committedDate": "2021-03-09 10:26:52 -0700", "message": "Fixing merge conflicts"}, {"oid": "62726bf22f84cafc8872cbdebd5a8edce980e60a", "committedDate": "2021-03-09 10:27:33 -0700", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_CamouflageIcon"}, {"oid": "5082524cc2a32c4a8360cb845951a5e2b94300df", "committedDate": "2021-03-09 11:46:51 -0700", "message": "Fixing merge conflicts"}, {"oid": "c640fe5cc744f25a6fb292dd50220c8ecfe1c986", "committedDate": "2021-03-09 12:27:38 -0700", "message": "Fixing merge conflicts"}, {"oid": "64b151aab1a311e538c895526ba3f807216917c1", "committedDate": "2021-03-11 19:48:54 -0700", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_MissionStatus"}, {"oid": "98253ba4fbbd681dca588b7cb766e8439c19d880", "committedDate": "2021-03-11 19:59:41 -0700", "message": "Applying bugfixes from review"}, {"oid": "8d7d2a8df4596249f133919b569b56249b0068aa", "committedDate": "2021-03-12 14:28:19 -0700", "message": "Improving default contract name and sort"}, {"oid": "c13dedfdb7ce73cfdfe1d464e83765140336736c", "committedDate": "2021-03-12 14:59:22 -0700", "message": "2458: Adding Insufficient Astech warnings for MRMS and adding some more Astech/Medic pool functions"}, {"oid": "d2b11fb805eea82905ab0d8f846ca96bd69124e3", "committedDate": "2021-03-13 09:01:10 -0700", "message": "Fixing merge conflicts"}, {"oid": "902ebb67bf5dbe2e94cc32810992a2d1aa6c321c", "committedDate": "2021-03-13 09:02:31 -0700", "message": "Fixing merge conflicts"}, {"oid": "ec5843cb0d12174c7d5f83419268e5184d2d60f6", "committedDate": "2021-03-13 09:08:04 -0700", "message": "Fixing merge conflicts"}, {"oid": "1e0c0d260af35ecf86a9b8b9519c8cceee2e7028", "committedDate": "2021-03-13 11:47:11 -0700", "message": "Moving the unit market changes into an individual branch that contains some parts of the contract market changes"}, {"oid": "a5382b0386cb0354a4b3c870fdd8fee5e2f5330a", "committedDate": "2021-03-13 22:22:50 -0500", "message": "additional code review changes"}, {"oid": "fe6e045bb8acb2700cc38bd6a25ec62011977264", "committedDate": "2021-03-14 01:21:48 -0500", "message": "merge from upstream"}, {"oid": "48663cfaebb3a6a04f5680e7f755c532bd159779", "committedDate": "2021-03-14 10:58:03 -0600", "message": "Fixing merge conflicts"}, {"oid": "b8ccd096938dcbd22c56b4a93c87c78d770df189", "committedDate": "2021-03-16 10:03:47 -0600", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_AbstractUnitMarket"}, {"oid": "00db4b9f4381f0d6bcaadbbaa197f0be1c80d30b", "committedDate": "2021-03-17 12:29:14 -0400", "message": "Merge pull request #2445 from sixlettervariables/issue-2597-protect-duplicate-name-hash"}, {"oid": "a79e2e08ae5167e26dc37999b749296e47e179b9", "committedDate": "2021-03-17 12:27:27 -0600", "message": "Finishing the Unit Market Dialog"}, {"oid": "9d4975c56dc9ea4c18da5c7b146cfa794453f668", "committedDate": "2021-03-17 12:53:48 -0600", "message": "Swapping to EmptyUnitMarket instead of null"}, {"oid": "795721747293b0a0a0b4a5e12334158e9da303da", "committedDate": "2021-03-17 14:00:33 -0600", "message": "Fixing merge conflicts"}, {"oid": "aac2ced366aa376eb9fa78ab230f38e43d0c8362", "committedDate": "2021-03-17 21:16:52 -0400", "message": "code review changes"}, {"oid": "67d86a55c23420a76995a1457504c22f1b9cc48a", "committedDate": "2021-03-18 10:00:41 -0600", "message": "338: Base Free Time Sort"}, {"oid": "b634beb8d18a3ebafa13e3332256da259e3ef1c1", "committedDate": "2021-03-18 14:35:10 -0600", "message": "Finishing up working on abstracting out the Unit Market"}, {"oid": "8627de7d060ea44d3e33d04c259f8ab05f5bba9f", "committedDate": "2021-03-21 20:29:53 -0400", "message": "merge from upstream"}, {"oid": "04087a9bc33d0e3547e9c2dc68db496eac62b82b", "committedDate": "2021-03-21 20:10:23 -0600", "message": "Fixing merge conflicts"}, {"oid": "093eaeb8fbe362bb2d525d661180c433576aab9b", "committedDate": "2021-03-24 00:26:51 -0400", "message": "merge from upstream"}, {"oid": "2a2559d3ab5da713e7b8864ab0de458849dce6b6", "committedDate": "2021-03-24 09:29:25 -0600", "message": "Swapping over to using a three tiered rank setup"}, {"oid": "1e4e1993ec9f2278c7f326d28bcae5a7bff9c4a0", "committedDate": "2021-03-24 12:05:23 -0600", "message": "Heavy simplification of rank profession code"}, {"oid": "a57000e9696c4bf593f3215fa36543b2d13ed5ea", "committedDate": "2021-03-24 12:30:48 -0600", "message": "2196: Swapping to a standardized display wrapper class for rank display"}, {"oid": "b903aa7de36203afa40ede49922eb9e422fdcf43", "committedDate": "2021-03-24 13:07:46 -0600", "message": "1483: Adding Rank System import/export"}, {"oid": "e5b1d3a3fc6d825d722e496ad49832555fa65754", "committedDate": "2021-03-25 14:08:49 -0400", "message": "units deployed to StratCon tracks are ineligible for repairs"}, {"oid": "e7042962dd815937b9d91c1335d85ccec3647bf7", "committedDate": "2021-03-30 13:26:17 -0400", "message": "Merge pull request #2371 from Windchild292/dev_Windchild_CamouflageIcon"}, {"oid": "091d87a31e8cf5d1061ccf76a256bf990a0a623b", "committedDate": "2021-03-30 11:27:53 -0600", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_2449"}, {"oid": "37144650aef43bd5f3a8a14257376f2d6fe133f8", "committedDate": "2021-03-30 16:21:13 -0400", "message": "merge from upstream"}, {"oid": "5854d37bf8fbd63f741b9601ef373a16253a9b32", "committedDate": "2021-04-04 09:12:14 -0600", "message": "Adding the ability to create a custom rank system"}, {"oid": "db96404f216df48ce5321de053ce56015837d2cd", "committedDate": "2021-04-04 09:43:32 -0600", "message": "Renaming the campaign rank system methods to properly handle rank system changes"}, {"oid": "ae6bdf14123e6ac4ba92f5884b58b533b6cad2d3", "committedDate": "2021-04-04 10:12:54 -0600", "message": "Moving personnel rank changes to their proper location within person"}, {"oid": "19f0f0ce5d069f8f6f4f481cda04cdee3e05402a", "committedDate": "2021-04-04 11:59:18 -0600", "message": "Working on rank import/export"}, {"oid": "a34e385bf50ab28870531fe663d288b7b98b2697", "committedDate": "2021-04-06 10:54:55 -0600", "message": "Fixing and improving validation issues"}, {"oid": "3f3d7b237f61dd118eeb39087eb7fe9de6be03a0", "committedDate": "2021-04-06 11:53:59 -0600", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_GenealogyIdReference"}, {"oid": "80202c7f73397f3bc36193b0f3e2fce444bc4070", "committedDate": "2021-04-06 16:04:51 -0600", "message": "Fixing merge conflicts"}, {"oid": "ab655fb9abe6d2b9be4e20eba7e4c74b4b8e5c22", "committedDate": "2021-04-06 16:20:53 -0600", "message": "Fixing merge conflicts"}, {"oid": "729ef155ccdbaca3a1f23f1e57309d3b973851da", "committedDate": "2021-04-06 16:38:48 -0600", "message": "Fixing merge conflicts"}, {"oid": "a4c29e55f023d3416dd5e3f18a9d2061ab841fa1", "committedDate": "2021-04-06 17:56:58 -0600", "message": "Fixing merge conflicts"}, {"oid": "47bf0ed7fa9b09a4d76b634d900cceac953e17ed", "committedDate": "2021-04-06 19:54:46 -0600", "message": "Fixing merge conflicts"}, {"oid": "c2d264c23786de4ea703861360c3bcb46e79c5ac", "committedDate": "2021-04-07 00:13:59 -0400", "message": "merge from upstream"}, {"oid": "a5d70a5c672e494c7ec8be19e05d642b0259c9c4", "committedDate": "2021-04-07 14:24:17 -0600", "message": "Implementing multiple new procreation options and moving it to work based on a supplied date"}, {"oid": "18e6e46b095f8bbb1c623c60fd3aa177b7fe8682", "committedDate": "2021-04-09 09:22:39 -0600", "message": "Fixing merge conflicts"}, {"oid": "ae01b6e6d0fa55b766f741fa6fb35f727fff344b", "committedDate": "2021-04-12 09:45:59 -0600", "message": "Creating ScenarioStatus Enum and updating how scenarios are gotten"}, {"oid": "133e5865e2ee8dd5900b26dfe5f9aa0459a1a04c", "committedDate": "2021-04-14 11:31:25 -0400", "message": "multiple bugs with ignoring scenarios; ground pirats on air maps"}, {"oid": "3d8916caadfbc4085e509724142f929fc9d7f1d5", "committedDate": "2021-04-16 17:31:08 -0400", "message": "add text resources; remove campaign scenarios after ignoring in stratcon UI"}, {"oid": "2e00ea9a5b972b07d7446e75a06d3d493ac69426", "committedDate": "2021-04-16 21:14:35 -0400", "message": "code review changes"}, {"oid": "becffdc94075004fa3890bb36799389a48105c33", "committedDate": "2021-04-16 23:10:50 -0400", "message": "code review changes; data fix; stop nagging once user hits 'no' once"}, {"oid": "d71320d4f7a9ae41189a6b4651979960cb9dcc0f", "committedDate": "2021-04-20 21:55:21 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_2449"}, {"oid": "39603f48e1d441dd892227bef76e398c95cd4852", "committedDate": "2021-04-20 21:59:13 -0400", "message": "Fixing merge conflicts"}, {"oid": "3f7306636c42a999caf904b8d513f267243def42", "committedDate": "2021-04-20 22:01:54 -0400", "message": "Fixing merge conflicts"}, {"oid": "1c0e5821f637a666ef7632b5d821db62d76f624d", "committedDate": "2021-04-20 22:20:35 -0400", "message": "Fixing merge conflicts"}, {"oid": "9b9545c3b2e6890b9bef97677c61bb175cd5cc89", "committedDate": "2021-04-21 00:39:22 -0400", "message": "allow extra time for maintenance"}, {"oid": "de34b46d2f53c172612ebe5aa1abffe16b249f06", "committedDate": "2021-04-23 10:23:26 -0400", "message": "Bugfixing"}, {"oid": "b82fd9901fd0447da0211522ffc97ccae5c708ac", "committedDate": "2021-04-23 11:36:57 -0400", "message": "Fixing merge conflicts"}, {"oid": "bb7b0c375b9a2fd6baeced3e5e94501eb2e636ed", "committedDate": "2021-04-23 13:03:53 -0400", "message": "Moving into selectors folders"}, {"oid": "1ba164a58381a4be88ec479fee5841c1b8cdcf99", "committedDate": "2021-04-23 13:15:11 -0400", "message": "Making initial faction changes for constructors and ordering"}, {"oid": "fc7a0539b85c7af6a166ed9d779e7b723307b883", "committedDate": "2021-04-23 15:57:04 -0400", "message": "Making RandomOriginOptions, which will allow its use in multiple locations"}, {"oid": "1741bea67582d0555d094cbdd0fa977eec707bcc", "committedDate": "2021-04-24 22:10:27 -0400", "message": "fix scenario date/force resets"}, {"oid": "cebc3d0c231e54580eb29e4756f549b702b9ace1", "committedDate": "2021-04-27 14:41:42 -0400", "message": "Merge pull request #2462 from Windchild292/dev_Windchild_2460"}, {"oid": "b0c3badc393ff67ccba2cbe34623ca496c576782", "committedDate": "2021-04-27 14:42:27 -0400", "message": "Merge pull request #2352 from Windchild292/dev_Windchild_PersonnelRoles"}, {"oid": "138d08410b585fae3ba4af354d18d2b15d5d36c8", "committedDate": "2021-04-27 14:48:43 -0400", "message": "Fixing merge conflicts"}, {"oid": "5f426e90c201a24d339c0322897809938b79db5a", "committedDate": "2021-04-27 15:08:01 -0400", "message": "Fixing merge conflicts"}, {"oid": "7b4772ec38db2aa8d657d0a22ed7868d0c4f6117", "committedDate": "2021-04-27 15:45:52 -0400", "message": "Fixing merge conflicts"}, {"oid": "ce0b3b652feb9205fb4ed8cc3ae599bb5da9a308", "committedDate": "2021-04-27 15:47:48 -0400", "message": "Fixing merge conflicts"}, {"oid": "f7d684241f42639eb35d60508c39dbb00b0d9dbc", "committedDate": "2021-04-28 10:56:49 -0400", "message": "Fixing merge conflicts"}, {"oid": "8dd83b6c46f8f2454ba4d4accfe8176c58e398d7", "committedDate": "2021-04-29 23:22:27 -0400", "message": "Fixing merge conflicts"}, {"oid": "87033ef81af06d5a8c2af9d93a9b9057e49f0fde", "committedDate": "2021-05-01 17:09:56 -0400", "message": "Fixing merge conflicts"}, {"oid": "815f8fa858fdbf707019709a5d51524b5e61472a", "committedDate": "2021-05-04 14:12:54 -0400", "message": "Dependent Flag Swapover"}, {"oid": "66f6a880e1b615fb97de9757be649fc18c10f049", "committedDate": "2021-05-04 19:52:08 -0400", "message": "Implementing auto-hiring pool on new day"}, {"oid": "bbcc984be566d1587a598efc974fb1dbb399868a", "committedDate": "2021-05-05 18:25:22 -0400", "message": "Fixing merge conflicts"}, {"oid": "741d61daa6ac3570f7a3c569ee6e6dc87a902441", "committedDate": "2021-05-08 20:32:38 -0400", "message": "Fixing merge conflicts"}, {"oid": "227d6642ef68511eb067588bdf263aa2ad88f421", "committedDate": "2021-05-09 10:13:42 -0400", "message": "Creating the backend implementation for random procreation modules"}, {"oid": "e0faed52760616365379933d91f9343f58c61cb4", "committedDate": "2021-05-09 14:30:58 -0400", "message": "Renaming the directory from random procreation to procreation"}, {"oid": "7943361f04c7c5cc1753852ddba3a77d8259ab57", "committedDate": "2021-05-11 09:52:44 -0400", "message": "2607: Starting to work on redoing the salvage calculations"}, {"oid": "0539aea6159ca7cfbbb77a035ffb6c51d590d29f", "committedDate": "2021-05-11 10:40:37 -0400", "message": "2607: Properly calculating and paying for payment overages"}, {"oid": "33d43f4fe9a41925e3cc417f5d782c19f097ad63", "committedDate": "2021-05-15 06:53:31 -0400", "message": "Merge pull request #2583 from Windchild292/dev_Windchild_DependentFlagSwapover"}, {"oid": "55da24b03b3ecbc71f7d6ab739e1820f1814fda1", "committedDate": "2021-05-17 13:46:12 -0400", "message": "Creating AtB Contract Type and AtB Morale Level enums"}, {"oid": "470df7bcd395e57ffe3f3e59660f0e468cdcfaf1", "committedDate": "2021-05-18 01:31:38 -0400", "message": "fix multiple issues generating fixed objective scenarios"}, {"oid": "ffcd06cfa996127e858ea60096b58286f97a8a8a", "committedDate": "2021-05-19 09:33:39 -0400", "message": "Implementing save code swapover"}, {"oid": "c03f4deaeb4d632a5e2e614ae5204da255eea805", "committedDate": "2021-05-22 22:01:49 -0400", "message": "Merge pull request #2608 from Windchild292/dev_Windchild_2607"}, {"oid": "f9cf763bd4ff9a8e017e54464ad20989c2e772d3", "committedDate": "2021-05-23 23:33:39 -0400", "message": "Fixing merge conflicts"}, {"oid": "b5b8facc5de91af84188412dc8d1ec3df00e3ae6", "committedDate": "2021-05-24 13:55:12 -0400", "message": "Fixing merge conflicts"}, {"oid": "1b33879affd0101e7870d5696137e354b636d342", "committedDate": "2021-05-24 13:57:36 -0400", "message": "Fixing merge conflicts"}, {"oid": "f4c2aadcbf8a9e3bc45db1e7227160e36f43d47a", "committedDate": "2021-05-24 14:00:22 -0400", "message": "Merge branch 'master' into dev_Windchild_CamouflageRework"}, {"oid": "fe024592b6ac70b9cf1a9cd546a54ebc8bb02363", "committedDate": "2021-05-24 17:16:21 -0400", "message": "2625: Properly Clear Tech Units on Person removal/retirement"}, {"oid": "530decc0b587e53087c8cacbe31aeba13dd82f41", "committedDate": "2021-05-29 11:32:44 -0400", "message": "Fixing merge conflicts"}, {"oid": "156500be4e08594aeaf3efa424938f295b2ed86e", "committedDate": "2021-05-29 16:04:26 -0400", "message": "Phase one of Campaign Preset rework"}, {"oid": "34d76d4e22674638bd3ce602a713238ff5c203b8", "committedDate": "2021-05-30 14:33:28 -0400", "message": "Phase Two: finishing internal work and starting on GUI implementation"}, {"oid": "12f96f2ab3335b805508c31bbbc08a9bcf5491d7", "committedDate": "2021-05-30 21:57:28 -0400", "message": "Fixing merge conflicts"}, {"oid": "b109f86e86e8aba9c5b4aa279919f2d6547979b9", "committedDate": "2021-05-31 10:38:11 -0400", "message": "Fixing merge conflicts"}, {"oid": "65a009b4cf6307795c815aacdb82feb8fba0a01d", "committedDate": "2021-05-31 17:00:21 -0400", "message": "Fixing merge conflicts"}, {"oid": "14d482cda0564e28b6c5ea95e20725e2200f51ff", "committedDate": "2021-05-31 17:57:20 -0400", "message": "Merge branch 'master' into maintenance_extra_time"}, {"oid": "00a30fe49ee531dda71cb88bacc2f56dbe0a5b9e", "committedDate": "2021-05-31 18:05:23 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_2654"}, {"oid": "fa54f8e9f392dc2f02cb5b1b5bc9e8c428a88e61", "committedDate": "2021-06-02 12:29:42 -0400", "message": "Creating a base ignorable nag dialog for MekHQ and implementing it in all current new day nags"}, {"oid": "2509a0841acae929e7340ae5fe4d01f7bf437d40", "committedDate": "2021-06-02 16:20:48 -0400", "message": "Fixing merge conflicts"}, {"oid": "6b416ee90791ecb016edf0ae5b5c0e16ebdd4760", "committedDate": "2021-06-09 16:05:55 -0400", "message": "Fixing merge conflicts"}, {"oid": "d36c47d7aaa8978e4d523b2031d299babd654e2a", "committedDate": "2021-06-09 16:08:35 -0400", "message": "Fixing merge conflicts"}, {"oid": "7fe956938b8b76f05f395b681f8bd5f4bd02d25a", "committedDate": "2021-06-09 21:27:13 -0400", "message": "Fixing merge conflicts"}, {"oid": "055b02a76318d18eed5ad27a93333893cf8b74db", "committedDate": "2021-06-09 22:30:38 -0400", "message": "Fixing merge conflicts"}, {"oid": "e8c2b13279e2b5d226f4de5b350e2d12ff468577", "committedDate": "2021-06-11 00:26:36 -0400", "message": "Fixing merge conflicts"}, {"oid": "d4b45a4c9543d0786feacc4344d364fee2997970", "committedDate": "2021-06-11 12:46:28 -0400", "message": "Fixing merge conflicts"}, {"oid": "2560bdda30482870c73884470b53cb579bcaa47a", "committedDate": "2021-06-14 13:25:17 -0400", "message": "Force icon implementation migration from outdated previous branch"}, {"oid": "6fd836ff4e8a233aa293e2a3fc08cd3316f64b66", "committedDate": "2021-06-14 14:23:04 -0400", "message": "Adding UnitIcon, GM Tools implementation, and baseline for export"}, {"oid": "eaf4453f2f1f40707d9594de5dd6aa83d594b776", "committedDate": "2021-06-14 18:04:32 -0400", "message": "Applying personal code review changes and starting unit icon code"}, {"oid": "e1a7f7166de5f36fa0c44b7151478c944e6a4b89", "committedDate": "2021-06-21 13:16:19 -0400", "message": "Apply overtime to the last chunk worked as well #2679"}, {"oid": "9c62597332ac0ba24004132e537ba0cf049741e3", "committedDate": "2021-07-01 12:35:33 -0400", "message": "Fixing merge conflicts"}, {"oid": "809c6366e1ce1dea3f4b2fa21841aab6639992a4", "committedDate": "2021-07-10 11:47:52 -0400", "message": "Finishing the portrait swapover"}, {"oid": "0ddba79849d418947ba1ce309a4c673ac78292d4", "committedDate": "2021-07-10 20:58:49 -0400", "message": "Bugfixing, phase 1"}, {"oid": "10a9609cabffc8f5e7068b6c0c33c0f65f796508", "committedDate": "2021-07-12 18:39:55 -0400", "message": "Fixing unit tests"}, {"oid": "06664ff8286a85fe165e5f92aaaf22326e692c90", "committedDate": "2021-07-15 10:22:09 -0400", "message": "Merge branch 'master' into dev_Windchild_476"}, {"oid": "e0e383e2453514ee7c9c7abc9214a2a1a869a068", "committedDate": "2021-07-15 10:34:25 -0400", "message": "Fixing merge conflicts"}, {"oid": "7211585d4a34159d5c80c9ea30fa44bc2746c1b4", "committedDate": "2021-07-17 20:03:19 -0400", "message": "Fixing a few potential divide by zero issues"}, {"oid": "a3eb7d3dfe3477e32117d175e717023f539795eb", "committedDate": "2021-07-17 20:11:58 -0400", "message": "Further cleanups from personal review"}, {"oid": "21a75e1c9ca5516bb7394f30fa2c0b4d9a68b9ad", "committedDate": "2021-07-17 20:27:51 -0400", "message": "Further cleanups, and adding an astech team size constant"}, {"oid": "35bffb052c1b608df03fb41f6548a3e9f847cca6", "committedDate": "2021-07-18 10:43:10 -0400", "message": "Fixing NPE warning and cleaning up the if statement"}, {"oid": "a7670828c4762e3852dbd248b348c2dd371b5018", "committedDate": "2021-07-18 12:12:40 -0400", "message": "Fixing possible confusion of local and field warnings"}, {"oid": "951b55f7a5fb6036e67897e709cd6a0dbbb45b39", "committedDate": "2021-07-18 12:33:08 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_Procreation"}, {"oid": "61cc2fd1669914bef276e018cb7562be422b1f7c", "committedDate": "2021-07-18 14:30:17 -0400", "message": "Removing Deprecated Usages: Logger swapover"}, {"oid": "542307adf490f10930d9470ff64879b4b7ee6b0a", "committedDate": "2021-07-20 10:11:31 -0400", "message": "Moving crew null check and fallback logic into Campaign::getShorthandedModForCrews"}, {"oid": "f6e661dba426e63388e9b57d224a7090006e3203", "committedDate": "2021-07-20 10:18:55 -0400", "message": "Merge pull request #2751 from Windchild292/dev_Windchild_AstechDivideByZero"}, {"oid": "f3bd90fefb0af89a7177be76f70aeed033a7b258", "committedDate": "2021-07-20 10:20:25 -0400", "message": "Fixing merge conflicts"}, {"oid": "424407a51980930adead83bbfa918bf2b0d8a441", "committedDate": "2021-07-20 21:09:32 -0400", "message": "Fixing merge conflicts"}, {"oid": "497f1345950b39b1eb1e2d1389b63a7fcd5eef14", "committedDate": "2021-07-20 21:26:53 -0400", "message": "Fixing merge conflicts"}, {"oid": "bc21146f53fc23bdfd1f5f4273f07b588b0904e2", "committedDate": "2021-07-24 10:15:39 -0400", "message": "Fixing merge conflicts"}, {"oid": "a5e9303ebeafcd74e0348b8b2f767c5f8e12c8cb", "committedDate": "2021-07-26 12:32:33 -0400", "message": "2558: Swapping removePerson to be object instead of id based"}, {"oid": "0a76a9693556237907de0f6e2a5a08f48dcfd3be", "committedDate": "2021-07-26 12:38:50 -0400", "message": "2558: Custom message for when dependants leave"}, {"oid": "1babc7de6f9de3b1f517061f1c249c3339f13e10", "committedDate": "2021-07-26 12:54:49 -0400", "message": "2558: Adding unique dependent add message"}, {"oid": "b214bdb7975aabd1cdc8d39cb9f1fdea3541b58d", "committedDate": "2021-07-26 15:13:02 -0400", "message": "Fixing merge conflicts"}, {"oid": "d86c1c8c70ae0bcc2a9d6dd09e7fe963745b5e37", "committedDate": "2021-07-26 22:20:42 -0400", "message": "Merge pull request #2478 from Windchild292/dev_Windchild_AbstractUnitMarket"}, {"oid": "d83ce12b4886460ba57e84afbf15b20e30fab693", "committedDate": "2021-07-28 15:48:34 -0400", "message": "Isolating RATs into the RAT Tab"}, {"oid": "3d303b442ab8d664c56fd8709d970f86c7eed83f", "committedDate": "2021-07-30 10:40:29 -0400", "message": "Loan code cleanup and refactoring"}, {"oid": "56910a666af8115ec4e364b98a16fc009c1a65b5", "committedDate": "2021-07-30 11:11:21 -0400", "message": "Fixing merge conflicts"}, {"oid": "ec7e4bc4aeed27a5b835b44d295642228bcc16c3", "committedDate": "2021-08-10 12:37:47 -0400", "message": "Transaction Type Enum"}, {"oid": "497976540984392426f984acd40477886555e06d", "committedDate": "2021-08-10 15:25:55 -0400", "message": "Fixing merge conflicts"}, {"oid": "1faa42c3d120f62fa60bebc946c56cae3ba293f8", "committedDate": "2021-08-10 15:47:16 -0400", "message": "Doing some personal review cleanup"}, {"oid": "be94a7ab35307e2b345d967cbd0163417ea9802d", "committedDate": "2021-08-12 21:28:51 -0400", "message": "bulletproofing for a couple of individual unit actions"}, {"oid": "01f8aa5c3d90cd2d8b553c5c8c73a336af524e8b", "committedDate": "2021-08-13 22:07:09 -0400", "message": "2798: Adding total XP earnings tracking"}, {"oid": "771c3107183e31fa9da9b2e417a6fc0d0b673a48", "committedDate": "2021-08-14 00:07:09 -0400", "message": "274: Moving Era definitions to a file"}, {"oid": "795d3aba4875a600dd0a6ec91a10cb7e90814c6c", "committedDate": "2021-08-18 12:48:20 -0400", "message": "Removing Person's Campaign save and switching to full pass-by-reference for Campaign"}, {"oid": "4e80bdad1f20ebfb53cfe559ade8975594f3d362", "committedDate": "2021-08-21 12:12:11 -0400", "message": "2754: Properly clearing Narc and iNarc Flags during scenario resolution"}, {"oid": "ed447da30212105694957e35687f1bfedd6b56b0", "committedDate": "2021-08-24 13:11:20 -0400", "message": "Merge pull request #2805 from Windchild292/dev_Windchild_274"}, {"oid": "7120d3b0aa69ebd282e855a4b2a47bda4697ba78", "committedDate": "2021-08-24 13:14:09 -0400", "message": "Merge pull request #2793 from Windchild292/dev_Windchild_TransactionType"}, {"oid": "9e7480b600f9290c00f5f082dd91201999d12f42", "committedDate": "2021-08-24 13:14:19 -0400", "message": "Merge pull request #2804 from Windchild292/dev_Windchild_2798"}, {"oid": "70aa4b94439c59d6e5de9d6191a3c0a02365e644", "committedDate": "2021-08-24 13:39:42 -0400", "message": "Fixing merge conflicts"}, {"oid": "0e72a8bc212f26b8d9b7bb789b0c1f84f1426c78", "committedDate": "2021-08-24 13:42:42 -0400", "message": "Fixing merge conflicts"}, {"oid": "3a01897bb20c8be27823164f09aca9af1aa3360d", "committedDate": "2021-08-24 13:53:59 -0400", "message": "Fixing merge conflicts"}, {"oid": "bacc8f3e733e0cd4cc0fa629ced5d3b5079abc76", "committedDate": "2021-08-24 17:23:41 -0400", "message": "Fixing merge conflicts"}, {"oid": "e273d7035001140a977ebe3299d17602ef52d498", "committedDate": "2021-08-28 17:37:23 -0400", "message": "Fixing merge conflicts"}, {"oid": "59fca0be576b219f25123793a2118255168d1c03", "committedDate": "2021-08-29 11:15:40 -0400", "message": "Modularized Marriage"}, {"oid": "6a48665a09b5cfd3b2309975077163fae687c39e", "committedDate": "2021-08-29 14:41:32 -0400", "message": "Adding creation dialog and bugfixing"}, {"oid": "0a89d7421946ba75d7d926af996b27e9e994a911", "committedDate": "2021-08-31 14:50:25 -0400", "message": "Fixing merge conflicts"}, {"oid": "0f4e17188d8360baf639cbc66dd29da85336be81", "committedDate": "2021-08-31 15:28:05 -0400", "message": "Applying changes from personal review"}, {"oid": "bd9dded105bfbfdf64e7b10e2059f2633326c113", "committedDate": "2021-08-31 15:39:04 -0400", "message": "Swapping to weighted double map"}, {"oid": "5eaf88579bd60bfee3c39a936a9d647a4eb1de4f", "committedDate": "2021-08-31 16:45:21 -0400", "message": "Reworking to use random origin options instead of the internally stored values"}, {"oid": "bbccfa2dcef0be4fbb07cd3af6cdbd15d7ced036", "committedDate": "2021-08-31 18:09:33 -0400", "message": "Missed two cases"}, {"oid": "7acc107b13f019250d4c17ee0b034a3aa263f56b", "committedDate": "2021-09-22 13:23:13 -0400", "message": "Removing MekHQ's version by swapping to a standardized suite version"}, {"oid": "f0a07bfbd15d93ff86dda49a32e0c489ca590a8c", "committedDate": "2021-09-22 17:45:34 -0400", "message": "Fixing merge conflicts"}, {"oid": "673baa71af916391d268ede436174881a85b7340", "committedDate": "2021-09-23 20:01:05 -0400", "message": "Adding the ability to automatically have the Operational Status indicator be determined on a new day"}, {"oid": "18f49cd8c6ba3721e84dce0b606a346b242cb49c", "committedDate": "2021-09-25 10:56:33 -0400", "message": "Moving training XP assignment to AtB new day processing"}, {"oid": "932423c6da7f04b29d61df88c014f5e432356eae", "committedDate": "2021-09-25 17:10:11 -0400", "message": "Standardizing and simplifying Campaign::getTargetForAcquisitioncalls"}, {"oid": "29c1cae15f03b025f7c6f4a4acdee0a86082eae8", "committedDate": "2021-09-25 17:12:00 -0400", "message": "2567: AtB Part Procurement uses proper campaign option"}, {"oid": "e1c6be34a128676429850de67af7a3c3e1d31c48", "committedDate": "2021-09-25 17:47:32 -0400", "message": "Fixing the active checks and removing the AtB casts"}, {"oid": "0527903721699cf7e73e7000ebc0db049c96529d", "committedDate": "2021-09-25 17:48:18 -0400", "message": "Removing testing logging"}, {"oid": "6dc414e21f3f3a8bf95c7059b83c0c34ced93e61", "committedDate": "2021-09-28 22:10:41 -0400", "message": "Merge pull request #2888 from Windchild292/dev_Windchild_2567"}, {"oid": "1065b3bc8de9084f48208d2ca865ce58ac8b3c41", "committedDate": "2021-09-28 22:29:59 -0400", "message": "Fixing merge conflicts"}, {"oid": "e55c3ca107c0d4a68d05b67ffa95825ee33af974", "committedDate": "2021-09-28 22:33:50 -0400", "message": "Fixing merge conflicts"}, {"oid": "6e5bfd3fe778c2db9847358b2bde358a61106707", "committedDate": "2021-09-28 22:38:51 -0400", "message": "Fixing merge conflicts"}, {"oid": "4fdc8e401f17fac7995037b1852f1ce2353c8e3f", "committedDate": "2021-09-28 22:48:35 -0400", "message": "Fixing merge conflicts"}, {"oid": "6f6fbddc710af1a588c433c779edd75f638a3c9d", "committedDate": "2021-10-01 10:01:00 -0400", "message": "Merge pull request #2880 from Windchild292/dev_Windchild_Version"}, {"oid": "901e499a75807e3ed64c36d0fcb8e1b024787c95", "committedDate": "2021-10-01 22:06:56 -0400", "message": "Fixing merge conflicts"}, {"oid": "b69522079e9a04b394864bbc4e43ff4c4e125cca", "committedDate": "2021-10-01 22:17:46 -0400", "message": "Fixing merge conflicts"}, {"oid": "84837c3610f8109aeb1985357178de229560de80", "committedDate": "2021-10-01 22:50:02 -0400", "message": "Fixing merge conflicts"}, {"oid": "4971437339838aa89b83785c6e9572074c95d245", "committedDate": "2021-10-02 23:21:37 -0400", "message": "Fixing merge conflicts"}, {"oid": "ed006b48eaf1c0580c2480f4f0000a3c1aed8361", "committedDate": "2021-10-10 00:10:05 -0400", "message": "Adding prisoner and clanner options for procreation"}, {"oid": "54e588d2cafddcab2f585c8ed5d6ee3c829d155f", "committedDate": "2021-10-10 01:00:00 -0400", "message": "Fixing merge conflicts"}, {"oid": "f211d8a677daa66c3a88f444de02a072ea5ab8a0", "committedDate": "2021-10-11 09:36:37 -0400", "message": "Fixing merge conflicts"}, {"oid": "3ee602c2e85defa1c3b05d08d609340d4b194883", "committedDate": "2021-10-11 09:37:52 -0400", "message": "Merge branch 'master' into dev_Windchild_2654"}, {"oid": "a30ac65fc45c76f1c1f6df0d70fa356aa41ef438", "committedDate": "2021-10-11 09:38:33 -0400", "message": "Merge branch 'master' into dev_Windchild_PersonnelRandomization"}, {"oid": "6f2f688a386d187426b7c92d4dd391c239d1ad70", "committedDate": "2021-10-11 09:43:54 -0400", "message": "Fixing merge conflicts"}, {"oid": "125e3093d92e248b4e50bc9131ff8fdeb35c6787", "committedDate": "2021-10-11 10:22:27 -0400", "message": "Fixing merge conflicts"}, {"oid": "f8e040a424e1e8d8f886b334ce6fe78c1c697e21", "committedDate": "2021-10-11 12:17:56 -0400", "message": "Standardizing canMarry and adding clanner/prisoner options"}, {"oid": "358b2e9bb76ee69f0aef232dc656af54a6b78e75", "committedDate": "2021-10-11 16:26:24 -0400", "message": "Creating a divorce module, with a daily percentage-based random divorce setup"}, {"oid": "8ecba07dd7693346338cbae98b207e87e1cfb844", "committedDate": "2021-10-14 20:08:46 -0400", "message": "Fixing merge conflicts"}, {"oid": "accf7255b1c83499aa1f79f5074b2bc44e3619f8", "committedDate": "2021-10-17 18:16:46 -0400", "message": "Fixing merge conflicts"}, {"oid": "4e4ae81eb8a7a923cdf8688c645023ce047c7d99", "committedDate": "2021-10-17 18:53:40 -0400", "message": "Fixing merge conflicts"}, {"oid": "08ec6ef40e59afa4cba88228bc29dba9745de098", "committedDate": "2021-10-18 15:52:01 -0400", "message": "Fixing merge conflicts"}, {"oid": "c67d7074f17378d88774a553e3fca273bc047705", "committedDate": "2021-10-18 15:52:40 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_PersonCampaign"}, {"oid": "1a7109d4439d3900ff897d0c9ba7091e88960ead", "committedDate": "2021-10-18 16:06:05 -0400", "message": "Fixing merge conflicts"}, {"oid": "2d589706bc9112203a6043adf8d7aed7d0f22301", "committedDate": "2021-10-18 16:07:21 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_ExpandedDeathStatus"}, {"oid": "84e2f57820e6fac4c9604e8fdf4c370849b21914", "committedDate": "2021-10-18 17:26:22 -0400", "message": "Fixing merge conflicts"}, {"oid": "033d776c732e66ad776357bee1afe597f5e77b20", "committedDate": "2021-10-30 15:59:59 -0400", "message": "Fixing merge conflicts"}, {"oid": "4e45f1a0a0bb1a3a900ecde01c8feab5a6e48329", "committedDate": "2021-11-01 17:31:14 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_AtBCompanyGeneration"}, {"oid": "258f3a3b0b352aa70b42b8c2034ebd6ab90d96ca", "committedDate": "2021-11-01 18:20:49 -0400", "message": "Fixing merge conflicts"}, {"oid": "7eea9a399d3d7400b1f2b94f6d772ad5416a0645", "committedDate": "2021-11-01 21:48:44 -0400", "message": "Fixing merge conflicts"}, {"oid": "3e4bca7cdb006005bd034f9621872250d0e96dbb", "committedDate": "2021-11-01 21:52:24 -0400", "message": "fixing merge conflicts"}, {"oid": "ab6c1c01bfb4498a16c3b9f69c18c4903900de83", "committedDate": "2021-11-01 22:00:44 -0400", "message": "Fixing merge conflicts"}, {"oid": "1b1b0f68f52f9d821ddc10f663a44fe6d72462cd", "committedDate": "2021-11-01 22:03:27 -0400", "message": "Fixing merge conflicts"}, {"oid": "f1ce41fa694124c762338f78fb45a139926db77c", "committedDate": "2021-11-01 22:20:22 -0400", "message": "Fixing merge conflicts"}, {"oid": "01163b1f4fae088ba39a2f1c1145d5653f71b9e8", "committedDate": "2021-11-01 22:22:46 -0400", "message": "Fixing merge conflicts"}, {"oid": "21600c478569436ab215402bbca4bbbeced841a8", "committedDate": "2021-11-03 20:59:54 -0400", "message": "Adding localization to all MekHQ resource maps"}, {"oid": "1a5ba2fa871c8629e951d371c2ee96cc29fa8f93", "committedDate": "2021-11-07 13:49:58 -0500", "message": "Fixing merge conflicts"}, {"oid": "a851f6c71e5a1f825a840c64be2bae6da2a77eaf", "committedDate": "2021-11-07 14:05:08 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_PersonnelRandomization"}, {"oid": "65eb27ddf74244265359db14e66c097eb2299df0", "committedDate": "2021-11-07 14:50:33 -0500", "message": "Fixing merge conflicts"}, {"oid": "1b57359b3037938ef8291d96de3449013c82b9a4", "committedDate": "2021-11-09 09:23:24 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_ForceIconRework"}, {"oid": "7e997be9838621bdc8bbecbcdbc908a7580060ed", "committedDate": "2021-11-12 21:17:13 -0500", "message": "Removing unused tech functionality"}, {"oid": "dbfb302ab8e895c2e37a41f10415f634d1039c4c", "committedDate": "2021-11-21 18:45:43 -0500", "message": "Expanding Finances newDay"}, {"oid": "b6ffe21c8b07b35f599a2f6bd11da05d7961af0d", "committedDate": "2021-11-23 10:10:34 -0500", "message": "Merge pull request #2028 from Windchild292/dev_Windchild_476"}, {"oid": "e51f331c5e7b430e3f560fee9ad58995fb944704", "committedDate": "2021-11-23 17:35:05 -0500", "message": "2962: AtB Campaigns Now Properly Load with Automatic or Tech Acquisition Skills"}, {"oid": "2f445541d15fd465279057131bf48ef28d9bd162", "committedDate": "2021-11-23 18:55:05 -0500", "message": "Fixing merge conflicts"}, {"oid": "c06560e49182859791bab98148ba76507f26612b", "committedDate": "2021-11-27 14:04:02 -0500", "message": "Merge pull request #2966 from Windchild292/dev_Windchild_2962"}, {"oid": "69f79e10f44976d90e36ca3acb5256b6dfc91548", "committedDate": "2021-11-27 18:49:28 -0500", "message": "Implementing the retirement and dependent stopgap options and option updates"}, {"oid": "135cb6d188296ed5db33602f9d65eacbedfb2fa3", "committedDate": "2021-11-27 22:07:45 -0500", "message": "Finishing dependent options and starting on retirement setup"}, {"oid": "a831b4695fd5ea8b1679db9068c85d9ac235f5e0", "committedDate": "2021-11-27 22:57:22 -0500", "message": "Starting to implement the new options"}, {"oid": "bfaed6eccd3257e67b05ad33dadd14cfd98ce560", "committedDate": "2021-12-02 18:05:59 -0500", "message": "Fixing merge conflicts"}, {"oid": "a31998dda25a2856241c10aba4f25a3e8975fc28", "committedDate": "2021-12-02 19:47:30 -0500", "message": "Fixing merge conflicts"}, {"oid": "8ae7fffc1b4afde219beaf122edf562b69a810d4", "committedDate": "2021-12-02 19:49:14 -0500", "message": "Fixing merge conflicts"}, {"oid": "c76c94e6cd4abe6e9f39bb57f5376dcfcf8c29ca", "committedDate": "2021-12-02 19:59:15 -0500", "message": "Fixing merge conflicts"}, {"oid": "8ad7114a3a34794b2d77e3d201f63d2c646a9361", "committedDate": "2021-12-04 14:45:10 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_RetirementDependentStopgaps"}, {"oid": "71c75c8296ecc0c857b75d51ff1c7984efa7e9aa", "committedDate": "2021-12-04 15:03:37 -0500", "message": "Finishing the internal code for the retirement and dependent stopgaps"}, {"oid": "4fb12af6ec7c26ac06d9a498016211a5e3889240", "committedDate": "2021-12-04 15:13:25 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_AssetTerms"}, {"oid": "ea8d42d1c280d499d207c0da43feb77a06b6dcba", "committedDate": "2021-12-04 16:10:22 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_MHQLocalization"}, {"oid": "97af694c5485ad1dbf5900228d3b5e6de405cb02", "committedDate": "2021-12-11 17:07:11 -0500", "message": "MekHQ Log4j 2 Implementation"}, {"oid": "122363fd9f8d850c11781b0ed50335433bcf418b", "committedDate": "2021-12-17 20:08:30 -0500", "message": "Fixing merge conflicts"}, {"oid": "b781d1a8406d5cfec346343463484ac519d1ee9a", "committedDate": "2021-12-20 13:20:34 -0500", "message": "Fixing merge conflicts"}, {"oid": "1bc3ac4e6576a7fa06103828a729d010f6a7b3ef", "committedDate": "2021-12-20 15:37:16 -0500", "message": "Actually print the stacktrace for individual exceptions"}, {"oid": "6e868f9400798d8cc8b61055b96de07531af1f34", "committedDate": "2021-12-20 16:21:24 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_RetirementDependentStopgaps"}, {"oid": "056f0d1e618651857b043280dbe226e80eb91d7a", "committedDate": "2021-12-20 16:27:18 -0500", "message": "Fixing merge conflicts"}, {"oid": "0e5e7675cc3b0606c97f5060a8fd53a69a90641e", "committedDate": "2021-12-20 16:31:40 -0500", "message": "Fixing merge conflicts"}, {"oid": "fb5e5a836a6100119706df72ee695325d77cf5af", "committedDate": "2021-12-20 16:36:02 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_PersonnelRandomization"}, {"oid": "30d7086d1389ed93b333b5eb614a4777498bd826", "committedDate": "2021-12-20 16:41:54 -0500", "message": "Fixing merge conflicts"}, {"oid": "c28b63e7005b99a3f80a9cb73b0255b8a2402db2", "committedDate": "2021-12-20 16:45:19 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_PersonCampaign"}, {"oid": "89a7c65022eabe2af8f5efaabaf9296aa79bde74", "committedDate": "2021-12-21 15:01:54 -0500", "message": "Fixing merge conflicts"}, {"oid": "23519608cf466cb86aef259568ba2aa8ddeb098a", "committedDate": "2021-12-21 16:00:33 -0500", "message": "Fixing merge conflicts"}, {"oid": "bbbe2057261145f9f51c2ac129b4cca3bcd2ccf6", "committedDate": "2021-12-21 16:04:48 -0500", "message": "Fixing merge conflicts"}, {"oid": "b65b9f1efdb52692da51596d934b6360533b2bf7", "committedDate": "2021-12-21 16:23:03 -0500", "message": "Fixing merge conflicts"}, {"oid": "a253bfba5d4bc811ccd0c6c17e659dff178fbbb0", "committedDate": "2021-12-21 16:30:49 -0500", "message": "Fixing merge conflicts"}, {"oid": "0caff4e79e691213a2621323b94dfadfa73c9060", "committedDate": "2021-12-22 08:16:56 -0500", "message": "Fixing merge conflicts"}, {"oid": "a44cee38dbe9808a000178e575eb90d60a401175", "committedDate": "2021-12-23 12:26:57 -0500", "message": "Merge pull request #3015 from MegaMek/dev_Windchild_3326"}, {"oid": "ea6a179e03d1519afc3236abe50978edc43fc3d8", "committedDate": "2021-12-23 12:32:38 -0500", "message": "Merge pull request #2812 from Windchild292/dev_Windchild_PersonCampaign"}, {"oid": "d88588cf01f272577d96e1ff2a27c7286def7db9", "committedDate": "2021-12-23 21:04:47 -0500", "message": "Fixing merge conflicts"}, {"oid": "94ca7dff3bd09ef2fbb82e5d3ce0a5dccab335a8", "committedDate": "2021-12-28 18:08:30 -0500", "message": "Fixing merge conflicts"}, {"oid": "5089ba272b3ca25ab52ca4fcc1bef3766377f2ec", "committedDate": "2022-01-08 13:22:56 -0500", "message": "Fixing merge conflicts"}, {"oid": "375a9524c6382f5214c980bf8ad8b07a22f75120", "committedDate": "2022-01-08 13:28:11 -0500", "message": "Fixing merge conflicts"}, {"oid": "0e0aa7780df25016999f813dc36110599ee1b380", "committedDate": "2022-01-08 13:40:54 -0500", "message": "Fixing merge conflicts, round 2"}, {"oid": "5cc8ac688c67e1e1817c0cbb4a78eaf7dd0a477b", "committedDate": "2022-01-08 14:03:23 -0500", "message": "Fixing merge conflicts"}, {"oid": "eb7c6c828694fb624746168dbb4c35b1289f6e11", "committedDate": "2022-01-08 17:22:10 -0500", "message": "Fixing merge conflicts"}, {"oid": "dcb18ce61944010cc634325d3f46ccaf907758be", "committedDate": "2022-01-08 18:01:56 -0500", "message": "Cleaning up a bit of person creation"}, {"oid": "4d86865e1498a1312a21b91323c33d18f33a8dc9", "committedDate": "2022-01-09 11:12:58 -0500", "message": "Adding missing nullable tag and fixing missing null handling for faction selector"}, {"oid": "6023dd377efcb7802f6c905de61231ec50fee675", "committedDate": "2022-01-09 11:48:57 -0500", "message": "Missed that a null faction is fine for planet generation"}, {"oid": "4bddfb6f0d3906ed96120594d84d4e476e42d971", "committedDate": "2022-01-19 17:09:56 -0500", "message": "Tearing out MekHQ/src/mekhq/MekHqXmlSerializable.java"}, {"oid": "cc823a078ddc1a8924d1e2c02e93375a6b27d327", "committedDate": "2022-01-19 19:19:33 -0500", "message": "Removing all serialVersionUID uses in MekHQ"}, {"oid": "c9ac45226f5852f8bb76af479c9d962105bbbed7", "committedDate": "2022-01-19 20:02:33 -0500", "message": "Mass spacing fixes"}, {"oid": "be1cfbd484c6adc1c8f66578c5bfe94b39047b3c", "committedDate": "2022-01-20 09:59:55 -0500", "message": "Applying changes from initial personal review"}, {"oid": "2c71e119c210a9c95690eae19a0cdab5beb69bd6", "committedDate": "2022-01-20 10:30:23 -0500", "message": "Updating everything using final PrintWriter so that they're up to date, so I have a nice way to track what's updated and what is not"}, {"oid": "bc2c2966614f17d153b03c3087b46c1a4b44b969", "committedDate": "2022-01-21 19:03:24 -0500", "message": "SuiteOptions: Naming standardization and finishing initial setup"}, {"oid": "f3b9f5b924748acfd1ad404aed3ae99e4382b885", "committedDate": "2022-01-24 12:24:25 -0500", "message": "Fixing merge conflicts"}, {"oid": "e8395d1d642870050d705d4fac2a0df255cea722", "committedDate": "2022-01-24 12:28:09 -0500", "message": "Fixing merge conflicts"}, {"oid": "d91ac31cb62f0842eb972ad045bdab45c9c3f814", "committedDate": "2022-01-25 17:42:20 -0500", "message": "PIND Migration"}, {"oid": "9fac7b8c6dfc3095299a8f2b2698099818ff5f0a", "committedDate": "2022-01-26 20:37:16 -0500", "message": "Fixing merge conflicts"}, {"oid": "68ef07dd4c65a1c3d546c2da6f01575f3f3c3ad6", "committedDate": "2022-01-26 20:47:30 -0500", "message": "Fixing merge conflicts"}, {"oid": "4d88d0c53f0069b883caece02ec49678aeeeef7e", "committedDate": "2022-02-01 14:20:52 -0500", "message": "Fixing merge conflicts"}, {"oid": "add1e0e345d4bfcfbff554d48b42166703dc9742", "committedDate": "2022-02-03 13:52:45 -0500", "message": "Fixing merge conflicts"}, {"oid": "01633b8cfb55eee9c3240bff79e0122fbc54386b", "committedDate": "2022-02-13 13:10:41 -0500", "message": "Fixing MHQ's Javadoc Build"}, {"oid": "adeb4ea20e6a8eeb365e6887e79ce6a4dd8b18dd", "committedDate": "2022-02-22 19:16:53 -0500", "message": "Initial code for creating standardized code utilities"}, {"oid": "483ec96cd157a857a1e7155be64dc5ef7c72346a", "committedDate": "2022-02-24 20:32:12 -0500", "message": "Migrating a bunch of MHQ utility code to MM"}, {"oid": "88ce57b5171b2d38c738446af4ab779e6d17ae7f", "committedDate": "2022-02-28 20:23:04 -0500", "message": "3146: Properly handling null force to null force reassignment messages"}, {"oid": "c94fc298803b71e6ac75eb935cabba921a8a6571", "committedDate": "2022-03-06 11:49:08 -0500", "message": "Fixing merge conflicts"}, {"oid": "d4b96fd69deddff97744565c43e2d56b8e31c53f", "committedDate": "2022-03-07 17:19:54 -0500", "message": "Fixing two accidentally kept negations for Random Dependents Removal"}, {"oid": "48f8d58a75de4c6a5c2868f65554dad4d3a14fd5", "committedDate": "2022-03-09 10:01:16 -0500", "message": "Merge pull request #3148 from Windchild292/dev_Windchild_3146"}, {"oid": "1c307bc93de3a536ba17dd566a9fd49bd0046c8e", "committedDate": "2022-03-21 18:22:40 -0400", "message": "Fixing a bunch of spacing readability issues"}, {"oid": "913c01672fe040a25b473e8142805d2ff4ebfa1b", "committedDate": "2022-03-22 18:24:32 -0400", "message": "Modernizing Lambdas to Method References"}, {"oid": "cc400b9fa7512b6b91ed8a8f434f365b442306a8", "committedDate": "2022-03-22 23:54:28 -0400", "message": "Modernize List::size to List::isEmpty and String::isEmpty to String::isBlank"}, {"oid": "4699f3e482938fb8c322f1daf1bc3b42d78c2a64", "committedDate": "2022-03-28 22:35:03 -0400", "message": "Fixing unused imports"}, {"oid": "494b38fcedcda31bef2e6f701152a47ce1b0e397", "committedDate": "2022-04-11 00:16:20 -0400", "message": "Issue #3196: Fixing Remove Unit NPE"}, {"oid": "4e863ffcf0393e88ebb25b76dd314d994b2cfad5", "committedDate": "2022-04-12 17:18:21 -0400", "message": "Death Module: Initial Commit For the New Setup"}, {"oid": "2e8d0c32fa5c09c862fb6c5625a58d206b70ba34", "committedDate": "2022-04-12 18:20:50 -0400", "message": "Cleaning up and modernizing the death code"}, {"oid": "be00026349d450b7f2fb262f11d161ca249c5ab5", "committedDate": "2022-04-17 21:14:46 -0400", "message": "Standardizing Personnel Flags into their own setup instead of multiple previous setups"}, {"oid": "114c9ef6cbeb045e3cc88716964526ee70372408", "committedDate": "2022-05-04 10:10:43 -0400", "message": "3260: Clear Makeshift Clubs Upon Return To MekHQ"}, {"oid": "e0f4dd9d34946716a517c0b42401b33740c51f30", "committedDate": "2022-05-06 19:58:04 -0400", "message": "Renaming the civilian role check to isCivilian, and adding missing logging for a civilian error"}, {"oid": "5b35da02f167e0d577e779b21dfd3cbd2110f92b", "committedDate": "2022-05-06 22:48:48 -0400", "message": "Merge pull request #3266 from Windchild292/dev_Windchild_RetirementDependentOrNoneLogging"}, {"oid": "c6db6046da0de4e7d40d7ac930a453d2805f6a92", "committedDate": "2022-05-10 18:34:57 -0400", "message": "Merge branch 'MegaMek:master' into dev_Windchild_AssetTerms"}, {"oid": "6b720cfa833458c385546a054b762d2745c37ce1", "committedDate": "2022-05-14 10:11:35 -0400", "message": "Fixing method name"}, {"oid": "72a352ee60bdec3467fa07665ed9753cc399b6f9", "committedDate": "2022-05-15 12:41:06 -0400", "message": "Swapping MekHQ to JUnit 5"}, {"oid": "0a2050177f55c5540d898835cfd48e4f976bb4cb", "committedDate": "2022-05-25 16:54:44 -0400", "message": "Modernizing finances XML read and write"}, {"oid": "8b34d18aa825a1416df7b1a8ecb2bb898cea1026", "committedDate": "2022-05-25 18:27:34 -0400", "message": "Renaming MekHqXmlXmlUtil to utilities/MHQXMLUtility"}, {"oid": "3c19a5aba0df7a2035e7a81e61a8b5543cb13a9c", "committedDate": "2022-05-25 18:36:42 -0400", "message": "Fixing merge conflicts"}, {"oid": "4a84ac8700a2d5bf7624dd25d4c77cff34478500", "committedDate": "2022-05-25 23:32:29 -0400", "message": "Merge branch 'master' into dev_Windchild_CurrentLocationXML"}, {"oid": "32aaaac33b8e53a355c373879ee4de9f91747c39", "committedDate": "2022-05-26 07:16:40 -0400", "message": "Merge branch 'master' into dev_Windchild_PersonFlags"}, {"oid": "9472637ad3cb3c27cba2c318c5ccdf022ca56d86", "committedDate": "2022-05-26 08:10:57 -0400", "message": "Fixing merge conflicts"}, {"oid": "f35709d1278c76d1ea7c10485071e0097b1aebf0", "committedDate": "2022-05-26 08:39:19 -0400", "message": "Switching to a single retirement report"}, {"oid": "b40d7b0e6bd9003de8df60cc732b5e195741d8aa", "committedDate": "2022-05-30 16:37:32 -0400", "message": "Merge pull request #3234 from Windchild292/dev_Windchild_PersonFlags"}, {"oid": "f7e43611ee653404079cc2fdced92c083c35362f", "committedDate": "2022-06-01 13:26:16 -0400", "message": "More swaps to using getActualValue"}, {"oid": "76223b1f01db0e020c9069b9c361d7af9f174e6a", "committedDate": "2022-06-01 17:49:36 -0400", "message": "Merge remote-tracking branch 'origin/master' into dev_Windchild_PartPriceApplications"}, {"oid": "e7755fbeddc7d00cc126c3281f4be93685eb83fa", "committedDate": "2022-06-08 20:05:45 -0400", "message": "Ignore End Date for Scenario Assignment to Active Contracts"}, {"oid": "c17408bc1409591bdb76664788c6ad4f55a5d813", "committedDate": "2022-06-18 17:51:05 -0400", "message": "Campaign::getPerson : Adding Nullable Annotation"}, {"oid": "f2abd2addef945880eefcf2a11ccfb5eec610ea3", "committedDate": "2022-06-18 17:59:08 -0400", "message": "Renaming clearGenealogy to clearGenealogyLinks (as that's what it does), and more test progress"}, {"oid": "39ac9b544233876ab9e4a6f914abaf549c76aded", "committedDate": "2022-06-20 22:59:32 -0400", "message": "Bunch of enum cleanups"}, {"oid": "a576a51fb82bbc625198e50a04894cd7749bed1c", "committedDate": "2022-06-21 16:25:02 -0400", "message": "Lots more tests, largely simple ones"}, {"oid": "0f60e6bba5ebdf538b335609e5bfd7817f614393", "committedDate": "2022-06-23 16:17:56 -0400", "message": "3372: Fixing Campaign Loan Report Issues"}, {"oid": "7441a156d93c5a7fb5dab7f9a38a5f87f6321f14", "committedDate": "2022-06-24 22:32:50 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_GenealogyTest"}, {"oid": "f5bb76bdee8f7d7aba18dd83f2d903036ea1f68b", "committedDate": "2022-06-27 13:25:57 -0400", "message": "Merge pull request #3378 from Windchild292/dev_Windchild_3372"}, {"oid": "0948c47088632642d946b7a5eec4eb595a21ac76", "committedDate": "2022-06-29 20:04:53 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_GenealogyTest"}, {"oid": "505318be000041c18ae226d4e1521dc527fc7133", "committedDate": "2022-07-14 17:41:42 -0400", "message": "Adding market enum testing"}, {"oid": "8d3060de0fe1375a8186d41be98a059652a81bed", "committedDate": "2022-07-31 00:15:10 -0400", "message": "add remove stratcon scenario option"}, {"oid": "9d2ebd8a76bc41afdf298da710ad80e1e4b80c0a", "committedDate": "2022-08-02 19:49:23 -0400", "message": "Checking this"}, {"oid": "803755f3d14a7ba3e66bb1e6364d6c4220bac841", "committedDate": "2022-08-03 20:51:52 -0400", "message": "Properly disabling the random tests"}, {"oid": "f79a61c91b06b467d1bbed4dfeaa36f97fd755e3", "committedDate": "2022-08-04 11:12:44 -0400", "message": "Using correct collector"}, {"oid": "4b3952367635a7620bddb96a9e81a7f1a97a2219", "committedDate": "2022-11-15 14:07:43 -0500", "message": "Removing duplicated name generation info from the campaign file"}, {"oid": "5213209bddb612458226cdfa7561a7220f8b3b67", "committedDate": "2022-11-15 15:54:47 -0500", "message": "Fixing deprecated XML utility uses and fixing indentation issues for parts"}, {"oid": "53e7b27c2173373019055e800950173ed7eb20df", "committedDate": "2022-11-15 19:05:53 -0500", "message": "Company Generator: Faction Options"}, {"oid": "230c025b083606834270681ce668a836c76dfc1b", "committedDate": "2022-11-22 16:25:51 -0500", "message": "3489: Adding Small Craft and DropShip Transport Support"}, {"oid": "b5349ccb7e3e9c0345d6685bb9a76a53afed8bdc", "committedDate": "2022-11-26 08:40:31 -0500", "message": "Merge pull request #3510 from MegaMek/dev_Windchild_3489"}, {"oid": "b3f06f70d94e83ed6fad6368cbe5df5d35c20296", "committedDate": "2022-11-26 11:38:42 -0500", "message": "Finishing adding the new option as a selection"}, {"oid": "1cb49fa503593c75f3bee4ebc6cf2574faec13de", "committedDate": "2022-11-26 11:49:33 -0500", "message": "Merge branch 'MegaMek:master' into dev_Windchild_CompanyGeneratorFactionGeneration"}, {"oid": "b47a12937f6b979925f82cb31bb6f2f33cf789e5", "committedDate": "2022-12-05 15:34:26 -0500", "message": "Scenarios are now Scenarios, not Missions"}, {"oid": "b57de2f09b47ffa8da9ab0bd7bba356d1e2e235c", "committedDate": "2022-12-08 23:00:17 -0500", "message": "Merge pull request #3501 from Windchild292/dev_Windchild_DeprecatedXML"}, {"oid": "ade20da3d68431198324cbad4bd7cfcc2fd1ef66", "committedDate": "2022-12-11 23:37:05 -0500", "message": "Merge pull request #3520 from Windchild292/dev_Windchild_ScenariosAreScenarios"}, {"oid": "a6d88033b71b9291e4774a5cbc3e8f577287a523", "committedDate": "2022-12-16 22:33:19 -0500", "message": "Tearing out EncodeControl"}, {"oid": "cec1df762e06d6e3e6c4c437c0d0a25892f44a7d", "committedDate": "2022-12-29 13:15:59 -0500", "message": "Fixing Option Naming Typos"}, {"oid": "e3e1ce62490858d93d695b7e7f8bf17dca068936", "committedDate": "2022-12-29 14:30:54 -0500", "message": "Standardize option naming"}, {"oid": "d385d0bc8fd91a75c631f546272abbff8e07311a", "committedDate": "2022-12-30 13:05:34 -0500", "message": "SkillLevel: Reducing SkillType::getExperienceLevelName calls"}, {"oid": "332b06c4b29e7f809e9cf0cab16a062f65544391", "committedDate": "2023-01-08 20:33:20 -0500", "message": "Yearly Retirement Nag Now Follows Campaign Options"}, {"oid": "62afc895d75aece8a3079267b20eb9e8c3de5cfc", "committedDate": "2023-01-14 16:34:36 -0500", "message": "3558: RATs are Used Outside of AtB"}, {"oid": "0e39c3c4517d5cd46e99546d8e3b3a1cea7cb30b", "committedDate": "2023-01-17 20:12:29 -0500", "message": "Merge branch 'master' into dev_Windchild_CampaignOptionsCleanup"}, {"oid": "da71474de7674e9b213472ce61b254a744c6ae5a", "committedDate": "2023-01-17 20:12:53 -0500", "message": "Merge branch 'MegaMek:master' into dev_Windchild_IsolatedSkillLevelEnumSwapovers"}, {"oid": "a328a1e42771f0c7052a7c9c1b2583134a8534f4", "committedDate": "2023-01-25 22:45:44 -0500", "message": "Campaign Ops Unit Rating: Properly Calculate Personnel Numbers"}, {"oid": "5ad55c0aa2dd0422f1e05d2704860f7674936984", "committedDate": "2023-01-25 23:11:45 -0500", "message": "Applying changes from testing and further rule reading"}, {"oid": "8fc36fbd275ffccf0ed91df60b637a5cc3135a86", "committedDate": "2023-01-29 18:24:48 -0500", "message": "Phenotype Enum: Migrating Uses to Simplification Methods"}, {"oid": "a462c5436ab5bec1a54c2f652f232fdff88f7a42", "committedDate": "2023-01-29 19:28:49 -0500", "message": "Tearing out unused code and swapping to using a map"}, {"oid": "542356e26d4b14d760fa69f33f627ed2b692908b", "committedDate": "2023-02-06 21:17:17 -0500", "message": "Merge pull request #3589 from Windchild292/dev_Windchild_PhenotypeSimplificationMethods"}, {"oid": "2757b555a5a0aa6fdf73322d58173bbee7d22ba5", "committedDate": "2023-02-06 21:25:38 -0500", "message": "Merge pull request #3590 from Windchild292/dev_Windchild_UnusedSPACleanup"}, {"oid": "6784f22a192b7c650bd5be0354bc6946bfec896f", "committedDate": "2023-02-06 21:41:30 -0500", "message": "Merge pull request #3557 from Windchild292/dev_Windchild_YearlyRetirementNag"}, {"oid": "724a8333d072d631c1072fd7ccf2707efe6e2b40", "committedDate": "2023-02-07 20:56:16 -0500", "message": "Fixing merge conflicts"}, {"oid": "e0f16b480db19ce9d36290caa03be8f6be77cace", "committedDate": "2023-02-07 21:43:07 -0500", "message": "Fixing merge conflicts"}, {"oid": "8996781abfef1f08293a06ef53e3af92812a9b5d", "committedDate": "2023-02-07 22:53:45 -0500", "message": "Standardize Mass Repair Mass Salvage naming to MRMS"}, {"oid": "1ccab8e5b040389be54c4730103354fbc0f06406", "committedDate": "2023-02-18 19:25:18 +0000", "message": "3318: Add manual personnel payments that generate Finance debit"}, {"oid": "86649c7c93250458658d765a7e2007134c385c74", "committedDate": "2023-02-25 20:07:13 -0500", "message": "Some related code cleanup"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU2MzUyMg==", "url": "https://github.com/MegaMek/mekhq/pull/2123#discussion_r500563522", "body": "```suggestion\r\n        return (int) Math.round(getHangar().getUnitsStream()\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return (int)Math.round(getHangar().getUnitsStream()\n          \n          \n            \n                    return (int) Math.round(getHangar().getUnitsStream()", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">return</span> (<span class=\"pl-k\">int</span>)<span class=\"pl-smi\">Math</span><span class=\"pl-k\">.</span>round(getHangar()<span class=\"pl-k\">.</span>getUnitsStream()</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">return</span> (<span class=\"pl-k\">int</span>)<span class=\"x x-first x-last\"> </span><span class=\"pl-smi\">Math</span><span class=\"pl-k\">.</span>round(getHangar()<span class=\"pl-k\">.</span>getUnitsStream()</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "Windchild292", "createdAt": "2020-10-06T20:04:57Z", "path": "MekHQ/src/mekhq/campaign/Campaign.java", "diffHunk": "@@ -7236,117 +7172,88 @@ public void setHealingTimeOptions(int newHeal, int newNaturalHeal) {\n     }\n \n     public int getTotalMechBays() {\n-        double bays = 0;\n-        for (Unit u : getUnits()) {\n-            bays += u.getMechCapacity();\n-        }\n-        return (int)Math.round(bays);\n+        return (int)Math.round(getHangar().getUnitsStream()\n+            .mapToDouble(Unit::getMechCapacity)\n+            .sum());\n     }\n \n     public int getTotalASFBays() {\n-        double bays = 0;\n-        for (Unit u : getUnits()) {\n-            bays += u.getASFCapacity();\n-        }\n-        return (int)Math.round(bays);\n+        return (int)Math.round(getHangar().getUnitsStream()\n+            .mapToDouble(Unit::getASFCapacity)\n+            .sum());\n     }\n \n     public int getTotalSmallCraftBays() {\n-        double bays = 0;\n-        for (Unit u : getUnits()) {\n-            bays += u.getSmallCraftCapacity();\n-        }\n-        return (int)Math.round(bays);\n+        return (int)Math.round(getHangar().getUnitsStream()\n+            .mapToDouble(Unit::getSmallCraftCapacity)\n+            .sum());\n     }\n \n     public int getTotalBattleArmorBays() {\n-        double bays = 0;\n-        for (Unit u : getUnits()) {\n-            bays += u.getBattleArmorCapacity();\n-        }\n-        return (int)Math.round(bays);\n+        return (int)Math.round(getHangar().getUnitsStream()", "originalCommit": "02cf732d561f245a8a8d39a2b8a819cb45ac94ca", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cb64714e6e2b7d03de487c72eb18c3c09948b6c6", "changed_code": [{"header": "diff --git a/MekHQ/src/mekhq/campaign/Campaign.java b/MekHQ/src/mekhq/campaign/Campaign.java\nindex c9db948ab..4dff77b1d 100644\n--- a/MekHQ/src/mekhq/campaign/Campaign.java\n+++ b/MekHQ/src/mekhq/campaign/Campaign.java\n", "chunk": "@@ -7172,49 +7172,49 @@ public class Campaign implements Serializable, ITechManager {\n     }\n \n     public int getTotalMechBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getMechCapacity)\n             .sum());\n     }\n \n     public int getTotalASFBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getASFCapacity)\n             .sum());\n     }\n \n     public int getTotalSmallCraftBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getSmallCraftCapacity)\n             .sum());\n     }\n \n     public int getTotalBattleArmorBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getBattleArmorCapacity)\n             .sum());\n     }\n \n     public int getTotalInfantryBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getInfantryCapacity)\n             .sum());\n     }\n \n     public int getTotalHeavyVehicleBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getHeavyVehicleCapacity)\n             .sum());\n     }\n \n     public int getTotalLightVehicleBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getLightVehicleCapacity)\n             .sum());\n     }\n \n     public int getTotalProtomechBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getProtomechCapacity)\n             .sum());\n     }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "3f55aabad31fb84ff1e5af9c8caac7bd8c8999a0", "changed_code": [{"header": "diff --git a/MekHQ/src/mekhq/campaign/Campaign.java b/MekHQ/src/mekhq/campaign/Campaign.java\nindex c9db948ab..0f69d5116 100644\n--- a/MekHQ/src/mekhq/campaign/Campaign.java\n+++ b/MekHQ/src/mekhq/campaign/Campaign.java\n", "chunk": "@@ -7172,49 +7161,49 @@ public class Campaign implements Serializable, ITechManager {\n     }\n \n     public int getTotalMechBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getMechCapacity)\n             .sum());\n     }\n \n     public int getTotalASFBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getASFCapacity)\n             .sum());\n     }\n \n     public int getTotalSmallCraftBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getSmallCraftCapacity)\n             .sum());\n     }\n \n     public int getTotalBattleArmorBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getBattleArmorCapacity)\n             .sum());\n     }\n \n     public int getTotalInfantryBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getInfantryCapacity)\n             .sum());\n     }\n \n     public int getTotalHeavyVehicleBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getHeavyVehicleCapacity)\n             .sum());\n     }\n \n     public int getTotalLightVehicleBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getLightVehicleCapacity)\n             .sum());\n     }\n \n     public int getTotalProtomechBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getProtomechCapacity)\n             .sum());\n     }\n", "next_change": {"commit": "a0c1cbf9746ed9486f08ce4aa2376828e846c786", "changed_code": [{"header": "diff --git a/MekHQ/src/mekhq/campaign/Campaign.java b/MekHQ/src/mekhq/campaign/Campaign.java\nindex 0f69d5116..e49c8ce15 100644\n--- a/MekHQ/src/mekhq/campaign/Campaign.java\n+++ b/MekHQ/src/mekhq/campaign/Campaign.java\n", "chunk": "@@ -7152,97 +7101,119 @@ public class Campaign implements Serializable, ITechManager {\n             }\n         }\n     }\n-    /**\n-     * Returns our list of potential transport ships\n-     * @return\n-     */\n-    public Set<UUID> getTransportShips() {\n-        return transportShips;\n-    }\n \n     public int getTotalMechBays() {\n-        return (int) Math.round(getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getMechCapacity)\n-            .sum());\n+        double bays = 0;\n+        for (Unit u : getUnits()) {\n+            bays += u.getMechCapacity();\n+        }\n+        return (int)Math.round(bays);\n     }\n \n     public int getTotalASFBays() {\n-        return (int) Math.round(getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getASFCapacity)\n-            .sum());\n+        double bays = 0;\n+        for (Unit u : getUnits()) {\n+            bays += u.getASFCapacity();\n+        }\n+        return (int)Math.round(bays);\n     }\n \n     public int getTotalSmallCraftBays() {\n-        return (int) Math.round(getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getSmallCraftCapacity)\n-            .sum());\n+        double bays = 0;\n+        for (Unit u : getUnits()) {\n+            bays += u.getSmallCraftCapacity();\n+        }\n+        return (int)Math.round(bays);\n     }\n \n     public int getTotalBattleArmorBays() {\n-        return (int) Math.round(getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getBattleArmorCapacity)\n-            .sum());\n+        double bays = 0;\n+        for (Unit u : getUnits()) {\n+            bays += u.getBattleArmorCapacity();\n+        }\n+        return (int)Math.round(bays);\n     }\n \n     public int getTotalInfantryBays() {\n-        return (int) Math.round(getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getInfantryCapacity)\n-            .sum());\n+        double bays = 0;\n+        for (Unit u : getUnits()) {\n+            bays += u.getInfantryCapacity();\n+        }\n+        return (int)Math.round(bays);\n     }\n \n     public int getTotalHeavyVehicleBays() {\n-        return (int) Math.round(getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getHeavyVehicleCapacity)\n-            .sum());\n+        double bays = 0;\n+        for (Unit u : getUnits()) {\n+            bays += u.getHeavyVehicleCapacity();\n+        }\n+        return (int)Math.round(bays);\n     }\n \n     public int getTotalLightVehicleBays() {\n-        return (int) Math.round(getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getLightVehicleCapacity)\n-            .sum());\n+        double bays = 0;\n+        for (Unit u : getUnits()) {\n+            bays += u.getLightVehicleCapacity();\n+        }\n+        return (int)Math.round(bays);\n     }\n \n     public int getTotalProtomechBays() {\n-        return (int) Math.round(getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getProtomechCapacity)\n-            .sum());\n+        double bays = 0;\n+        for (Unit u : getUnits()) {\n+            bays += u.getProtomechCapacity();\n+        }\n+        return (int)Math.round(bays);\n     }\n \n     public int getTotalDockingCollars() {\n-        return getHangar().getUnitsStream()\n-            .filter(u -> u.getEntity() instanceof Jumpship)\n-            .mapToInt(Unit::getDocks)\n-            .sum();\n+        double collars = 0;\n+        for (Unit u : getUnits()) {\n+            if (u.getEntity() instanceof Jumpship) {\n+                collars += u.getDocks();\n+            }\n+        }\n+        return (int)Math.round(collars);\n     }\n \n     public double getTotalInsulatedCargoCapacity() {\n-        return getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getInsulatedCargoCapacity)\n-            .sum();\n+        double capacity = 0;\n+        for (Unit u : getUnits()) {\n+            capacity += u.getInsulatedCargoCapacity();\n+        }\n+        return capacity;\n     }\n \n     public double getTotalRefrigeratedCargoCapacity() {\n-        return getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getRefrigeratedCargoCapacity)\n-            .sum();\n+        double capacity = 0;\n+        for (Unit u : getUnits()) {\n+            capacity += u.getRefrigeratedCargoCapacity();\n+        }\n+        return capacity;\n     }\n \n     public double getTotalLivestockCargoCapacity() {\n-        return getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getLivestockCargoCapacity)\n-            .sum();\n+        double capacity = 0;\n+        for (Unit u : getUnits()) {\n+            capacity += u.getLivestockCargoCapacity();\n+        }\n+        return capacity;\n     }\n \n     public double getTotalLiquidCargoCapacity() {\n-        return getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getLiquidCargoCapacity)\n-            .sum();\n+        double capacity = 0;\n+        for (Unit u : getUnits()) {\n+            capacity += u.getLiquidCargoCapacity();\n+        }\n+        return capacity;\n     }\n \n     public double getTotalCargoCapacity() {\n-        return getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getCargoCapacity)\n-            .sum();\n+        double capacity = 0;\n+        for (Unit u : getUnits()) {\n+            capacity += u.getCargoCapacity();\n+        }\n+        return capacity;\n     }\n \n     // Liquid not included\n", "next_change": {"commit": "04a16de448a0c7d576a6c3c64c9d23ae08384bae", "changed_code": [{"header": "diff --git a/MekHQ/src/mekhq/campaign/Campaign.java b/MekHQ/src/mekhq/campaign/Campaign.java\nindex e49c8ce15..993f59cfe 100644\n--- a/MekHQ/src/mekhq/campaign/Campaign.java\n+++ b/MekHQ/src/mekhq/campaign/Campaign.java\n", "chunk": "@@ -7101,900 +7157,440 @@ public class Campaign implements Serializable, ITechManager {\n             }\n         }\n     }\n-\n-    public int getTotalMechBays() {\n-        double bays = 0;\n-        for (Unit u : getUnits()) {\n-            bays += u.getMechCapacity();\n-        }\n-        return (int)Math.round(bays);\n+    /**\n+     * Returns our list of potential transport ships\n+     * @return\n+     */\n+    public Set<UUID> getTransportShips() {\n+        return transportShips;\n     }\n \n-    public int getTotalASFBays() {\n-        double bays = 0;\n-        for (Unit u : getUnits()) {\n-            bays += u.getASFCapacity();\n-        }\n-        return (int)Math.round(bays);\n-    }\n+    public String getCombatPersonnelDetails() {\n+        int[] countPersonByType = new int[Person.T_NUM];\n+        int countTotal = 0;\n+        int countInjured = 0;\n+        int countMIA = 0;\n+        int countKIA = 0;\n+        int countDead = 0;\n+        int countRetired = 0;\n+        Money salary = Money.zero();\n \n-    public int getTotalSmallCraftBays() {\n-        double bays = 0;\n-        for (Unit u : getUnits()) {\n-            bays += u.getSmallCraftCapacity();\n-        }\n-        return (int)Math.round(bays);\n-    }\n+        for (Person p : getPersonnel()) {\n+            if (!p.hasPrimaryCombatRole() || !p.getPrisonerStatus().isFree()) {\n+                continue;\n+            }\n \n-    public int getTotalBattleArmorBays() {\n-        double bays = 0;\n-        for (Unit u : getUnits()) {\n-            bays += u.getBattleArmorCapacity();\n+            // Add them to the total count\n+            if (p.getStatus().isActive()) {\n+                countPersonByType[p.getPrimaryRole()]++;\n+                countTotal++;\n+                if (getCampaignOptions().useAdvancedMedical() && p.getInjuries().size() > 0) {\n+                    countInjured++;\n+                } else if (p.getHits() > 0) {\n+                    countInjured++;\n+                }\n+                salary = salary.plus(p.getSalary());\n+            } else if (p.getStatus().isRetired()) {\n+                countRetired++;\n+            } else if (p.getStatus().isMIA()) {\n+                countMIA++;\n+            } else if (p.getStatus().isKIA()) {\n+                countKIA++;\n+                countDead++;\n+            } else if (p.getStatus().isDead()) {\n+                countDead++;\n+            }\n         }\n-        return (int)Math.round(bays);\n-    }\n \n-    public int getTotalInfantryBays() {\n-        double bays = 0;\n-        for (Unit u : getUnits()) {\n-            bays += u.getInfantryCapacity();\n-        }\n-        return (int)Math.round(bays);\n-    }\n+        StringBuilder sb = new StringBuilder(\"Combat Personnel\\n\\n\");\n \n-    public int getTotalHeavyVehicleBays() {\n-        double bays = 0;\n-        for (Unit u : getUnits()) {\n-            bays += u.getHeavyVehicleCapacity();\n-        }\n-        return (int)Math.round(bays);\n-    }\n+        sb.append(String.format(\"%-30s        %4s\\n\", \"Total Combat Personnel\", countTotal));\n \n-    public int getTotalLightVehicleBays() {\n-        double bays = 0;\n-        for (Unit u : getUnits()) {\n-            bays += u.getLightVehicleCapacity();\n+        for (int i = 0; i < Person.T_NUM; i++) {\n+            if (Person.isCombatRole(i)) {\n+                sb.append(String.format(\"    %-30s    %4s\\n\",\n+                        Person.getRoleDesc(i, getFaction().isClan()), countPersonByType[i]));\n+            }\n         }\n-        return (int)Math.round(bays);\n-    }\n \n-    public int getTotalProtomechBays() {\n-        double bays = 0;\n-        for (Unit u : getUnits()) {\n-            bays += u.getProtomechCapacity();\n-        }\n-        return (int)Math.round(bays);\n+        sb.append(\"\\n\")\n+                .append(String.format(\"%-30s        %4s\\n\", \"Injured Combat Personnel\", countInjured))\n+                .append(String.format(\"%-30s        %4s\\n\", \"MIA Combat Personnel\", countMIA))\n+                .append(String.format(\"%-30s        %4s\\n\", \"KIA Combat Personnel\", countKIA))\n+                .append(String.format(\"%-30s        %4s\\n\", \"Retired Combat Personnel\", countRetired))\n+                .append(String.format(\"%-30s        %4s\\n\", \"Dead Combat Personnel\", countDead))\n+                .append(\"\\nMonthly Salary For Combat Personnel: \").append(salary.toAmountAndSymbolString());\n+\n+        return sb.toString();\n     }\n \n-    public int getTotalDockingCollars() {\n-        double collars = 0;\n-        for (Unit u : getUnits()) {\n-            if (u.getEntity() instanceof Jumpship) {\n-                collars += u.getDocks();\n+    public String getSupportPersonnelDetails() {\n+        int[] countPersonByType = new int[Person.T_NUM];\n+        int countTotal = 0;\n+        int countInjured = 0;\n+        int countMIA = 0;\n+        int countKIA = 0;\n+        int countDead = 0;\n+        int countRetired = 0;\n+        Money salary = Money.zero();\n+        int prisoners = 0;\n+        int bondsmen = 0;\n+        int dependents = 0;\n+\n+        for (Person p : getPersonnel()) {\n+            // Add them to the total count\n+            boolean primarySupport = p.hasPrimarySupportRole(false);\n+\n+            if (primarySupport && p.getPrisonerStatus().isFree() && p.getStatus().isActive()) {\n+                countPersonByType[p.getPrimaryRole()]++;\n+                countTotal++;\n+                if (p.getInjuries().size() > 0 || p.getHits() > 0) {\n+                    countInjured++;\n+                }\n+                salary = salary.plus(p.getSalary());\n+            } else if (p.getPrisonerStatus().isPrisoner() && p.getStatus().isActive()) {\n+                prisoners++;\n+                if (p.getInjuries().size() > 0 || p.getHits() > 0) {\n+                    countInjured++;\n+                }\n+            } else if (p.getPrisonerStatus().isBondsman() && p.getStatus().isActive()) {\n+                bondsmen++;\n+                if (p.getInjuries().size() > 0 || p.getHits() > 0) {\n+                    countInjured++;\n+                }\n+            } else if (primarySupport && p.getStatus().isRetired()) {\n+                countRetired++;\n+            } else if (primarySupport && p.getStatus().isMIA()) {\n+                countMIA++;\n+            } else if (primarySupport && p.getStatus().isKIA()) {\n+                countKIA++;\n+                countDead++;\n+            } else if (primarySupport && p.getStatus().isDead()) {\n+                countDead++;\n             }\n-        }\n-        return (int)Math.round(collars);\n-    }\n \n-    public double getTotalInsulatedCargoCapacity() {\n-        double capacity = 0;\n-        for (Unit u : getUnits()) {\n-            capacity += u.getInsulatedCargoCapacity();\n+            if (p.isDependent() && p.getStatus().isActive() && p.getPrisonerStatus().isFree()) {\n+                dependents++;\n+            }\n         }\n-        return capacity;\n-    }\n \n-    public double getTotalRefrigeratedCargoCapacity() {\n-        double capacity = 0;\n-        for (Unit u : getUnits()) {\n-            capacity += u.getRefrigeratedCargoCapacity();\n-        }\n-        return capacity;\n-    }\n+        StringBuilder sb = new StringBuilder(\"Support Personnel\\n\\n\");\n \n-    public double getTotalLivestockCargoCapacity() {\n-        double capacity = 0;\n-        for (Unit u : getUnits()) {\n-            capacity += u.getLivestockCargoCapacity();\n-        }\n-        return capacity;\n-    }\n+        sb.append(String.format(\"%-30s        %4s\\n\", \"Total Support Personnel\", countTotal));\n \n-    public double getTotalLiquidCargoCapacity() {\n-        double capacity = 0;\n-        for (Unit u : getUnits()) {\n-            capacity += u.getLiquidCargoCapacity();\n+        for (int i = 0; i < Person.T_NUM; i++) {\n+            if (Person.isSupportRole(i)) {\n+                sb.append(String.format(\"    %-30s    %4s\\n\",\n+                        Person.getRoleDesc(i, getFaction().isClan()), countPersonByType[i]));\n+            }\n         }\n-        return capacity;\n-    }\n \n-    public double getTotalCargoCapacity() {\n-        double capacity = 0;\n-        for (Unit u : getUnits()) {\n-            capacity += u.getCargoCapacity();\n-        }\n-        return capacity;\n-    }\n-\n-    // Liquid not included\n-    public double getTotalCombinedCargoCapacity() {\n-        return getTotalCargoCapacity() + getTotalLivestockCargoCapacity()\n-                + getTotalInsulatedCargoCapacity() + getTotalRefrigeratedCargoCapacity();\n-    }\n-\n-    public int getNumberOfUnitsByType(long type) {\n-        return getNumberOfUnitsByType(type, false, false);\n-    }\n+        sb.append(\"\\n\")\n+                .append(String.format(\"%-30s        %4s\\n\", \"Injured Support Personnel\", countInjured))\n+                .append(String.format(\"%-30s        %4s\\n\", \"MIA Support Personnel\", countMIA))\n+                .append(String.format(\"%-30s        %4s\\n\", \"KIA Support Personnel\", countKIA))\n+                .append(String.format(\"%-30s        %4s\\n\", \"Retired Support Personnel\", countRetired))\n+                .append(String.format(\"%-30s        %4s\\n\", \"Dead Support Personnel\", countDead))\n+                .append(\"\\nMonthly Salary For Support Personnel: \").append(salary.toAmountAndSymbolString())\n+                .append(String.format(\"\\nYou have \" + dependents + \" %s\", (dependents == 1) ? \"dependent\" : \"dependents\"))\n+                .append(String.format(\"\\nYou have \" + prisoners + \" prisoner%s\", (prisoners == 1) ? \"\" : \"s\"))\n+                .append(String.format(\"\\nYou have \" + bondsmen + \" %s\", (bondsmen == 1) ? \"bondsman\" : \"bondsmen\"));\n \n-    public int getNumberOfUnitsByType(long type, boolean inTransit) {\n-        return getNumberOfUnitsByType(type, inTransit, false);\n+        return sb.toString();\n     }\n \n-    public int getNumberOfUnitsByType(long type, boolean inTransit, boolean lv) {\n-        int num = 0;\n-        for (Unit unit : getUnits()) {\n-            if (!inTransit && !unit.isPresent()) {\n-                continue;\n-            }\n-            if (unit.isMothballed()) {\n-                if (type == Unit.ETYPE_MOTHBALLED) {\n-                    num++;\n-                }\n-                continue;\n-            }\n-            Entity en = unit.getEntity();\n-            if (en instanceof GunEmplacement || en instanceof FighterSquadron || en instanceof Jumpship) {\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_MECH && en instanceof Mech) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_DROPSHIP && en instanceof Dropship) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_SMALL_CRAFT && en instanceof SmallCraft\n-                    && !(en instanceof Dropship)) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_CONV_FIGHTER && en instanceof ConvFighter) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_AERO && en instanceof Aero\n-                    && !(en instanceof SmallCraft || en instanceof ConvFighter)) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_INFANTRY && en instanceof Infantry && !(en instanceof BattleArmor)) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_BATTLEARMOR && en instanceof BattleArmor) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_TANK && en instanceof Tank) {\n-                if ((en.getWeight() <= 50 && lv) || (en.getWeight() > 50 && !lv)) {\n-                    num++;\n-                }\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_PROTOMECH && en instanceof Protomech) {\n-                num++;\n-                continue;\n-            }\n+    public void doMaintenance(Unit u) {\n+        if (!u.requiresMaintenance() || !campaignOptions.checkMaintenance()) {\n+            return;\n         }\n-\n-        return num;\n-    }\n-\n-    public double getCargoTonnage(boolean inTransit) {\n-        return getCargoTonnage(inTransit, false);\n-    }\n-\n-    @SuppressWarnings(\"unused\") // FIXME: This whole method needs re-worked once Dropship Assignments are in\n-    public double getCargoTonnage(boolean inTransit, boolean mothballed) {\n-        double cargoTonnage = 0;\n-        double mothballedTonnage = 0;\n-        int mechs = getNumberOfUnitsByType(Entity.ETYPE_MECH);\n-        int ds = getNumberOfUnitsByType(Entity.ETYPE_DROPSHIP);\n-        int sc = getNumberOfUnitsByType(Entity.ETYPE_SMALL_CRAFT);\n-        int cf = getNumberOfUnitsByType(Entity.ETYPE_CONV_FIGHTER);\n-        int asf = getNumberOfUnitsByType(Entity.ETYPE_AERO);\n-        int inf = getNumberOfUnitsByType(Entity.ETYPE_INFANTRY);\n-        int ba = getNumberOfUnitsByType(Entity.ETYPE_BATTLEARMOR);\n-        int lv = getNumberOfUnitsByType(Entity.ETYPE_TANK, true);\n-        int hv = getNumberOfUnitsByType(Entity.ETYPE_TANK, false);\n-        int protos = getNumberOfUnitsByType(Entity.ETYPE_PROTOMECH);\n-\n-        for (Part part : getSpareParts()) {\n-            if (!inTransit && !part.isPresent()) {\n-                continue;\n-            }\n-            cargoTonnage += (part.getQuantity() * part.getTonnage());\n+        // lets start by checking times\n+        Person tech = u.getTech();\n+        int minutesUsed = u.getMaintenanceTime();\n+        int astechsUsed = getAvailableAstechs(minutesUsed, false);\n+        boolean maintained = ((tech != null) && (tech.getMinutesLeft() >= minutesUsed)\n+                && !tech.isMothballing());\n+        boolean paidMaintenance = true;\n+        if (maintained) {\n+            // use the time\n+            tech.setMinutesLeft(tech.getMinutesLeft() - minutesUsed);\n+            astechPoolMinutes -= astechsUsed * minutesUsed;\n         }\n+        u.incrementDaysSinceMaintenance(maintained, astechsUsed);\n \n-        // place units in bays\n-        // FIXME: This has been temporarily disabled. It really needs dropship assignments done to fix it correctly.\n-        // Remaining units go into cargo\n-        for (Unit unit : getUnits()) {\n-            if (!inTransit && !unit.isPresent()) {\n-                continue;\n-            }\n-            Entity en = unit.getEntity();\n-            if (unit.isMothballed()) {\n-                mothballedTonnage += en.getWeight();\n-                continue;\n-            }\n-            if (en instanceof GunEmplacement || en instanceof FighterSquadron || en instanceof Jumpship) {\n-                continue;\n-            }\n-            // cargoTonnage += en.getWeight();\n-        }\n-        if (mothballed) {\n-            return mothballedTonnage;\n+        int ruggedMultiplier = 1;\n+        if (u.getEntity().hasQuirk(OptionsConstants.QUIRK_POS_RUGGED_1)) {\n+            ruggedMultiplier = 2;\n         }\n-        return cargoTonnage;\n-    }\n \n-    public String getCargoDetails() {\n-        StringBuffer sb = new StringBuffer(\"Cargo\\n\\n\");\n-        double ccc = this.getTotalCombinedCargoCapacity();\n-        double gcc = this.getTotalCargoCapacity();\n-        double icc = this.getTotalInsulatedCargoCapacity();\n-        double lcc = this.getTotalLiquidCargoCapacity();\n-        double scc = this.getTotalLivestockCargoCapacity();\n-        double rcc = this.getTotalRefrigeratedCargoCapacity();\n-        double tonnage = this.getCargoTonnage(false);\n-        double mothballedTonnage = this.getCargoTonnage(false, true);\n-        double mothballedUnits = Math.max(getNumberOfUnitsByType(Unit.ETYPE_MOTHBALLED), 0);\n-        double combined = (tonnage + mothballedTonnage);\n-        double transported = combined > ccc ? ccc : combined;\n-        double overage = combined - transported;\n-\n-        sb.append(String.format(\"%-35s      %6.3f\\n\", \"Total Capacity:\", ccc));\n-        sb.append(String.format(\"%-35s      %6.3f\\n\", \"General Capacity:\", gcc));\n-        sb.append(String.format(\"%-35s      %6.3f\\n\", \"Insulated Capacity:\", icc));\n-        sb.append(String.format(\"%-35s      %6.3f\\n\", \"Liquid Capacity:\", lcc));\n-        sb.append(String.format(\"%-35s      %6.3f\\n\", \"Livestock Capacity:\", scc));\n-        sb.append(String.format(\"%-35s      %6.3f\\n\", \"Refrigerated Capacity:\", rcc));\n-        sb.append(String.format(\"%-35s      %6.3f\\n\", \"Cargo Transported:\", tonnage));\n-        sb.append(String.format(\"%-35s      %4s (%1.0f)\\n\", \"Mothballed Units as Cargo (Tons):\", mothballedUnits, mothballedTonnage));\n-        sb.append(String.format(\"%-35s      %6.3f/%1.3f\\n\", \"Transported/Capacity:\", transported, ccc));\n-        sb.append(String.format(\"%-35s      %6.3f\\n\", \"Overage Not Transported:\", overage));\n+        if (u.getEntity().hasQuirk(OptionsConstants.QUIRK_POS_RUGGED_2)) {\n+            ruggedMultiplier = 3;\n+        }\n \n-        return new String(sb);\n-    }\n+        if (u.getDaysSinceMaintenance() >= (getCampaignOptions().getMaintenanceCycleDays() * ruggedMultiplier)) {\n+            // maybe use the money\n+            if (campaignOptions.payForMaintain()) {\n+                if (!(finances.debit(u.getMaintenanceCost(), Transaction.C_MAINTAIN, \"Maintenance for \"\n+                                + u.getName(), getLocalDate()))) {\n+                    addReport(\"<font color='red'><b>You cannot afford to pay maintenance costs for \"\n+                            + u.getHyperlinkedName() + \"!</b></font>\");\n+                    paidMaintenance = false;\n+                }\n+            }\n+            // it is time for a maintenance check\n+            int qualityOrig = u.getQuality();\n+            String techName = \"Nobody\";\n+            String techNameLinked = techName;\n+            if (null != tech) {\n+                techName = tech.getFullTitle();\n+                techNameLinked = tech.getHyperlinkedFullTitle();\n+            }\n+            // don't do actual damage until we clear the for loop to avoid\n+            // concurrent mod problems\n+            // put it into a hash - 4 points of damage will mean destruction\n+            Map<Part, Integer> partsToDamage = new HashMap<>();\n+            StringBuilder maintenanceReport = new StringBuilder(\"<emph>\" + techName + \" performing maintenance</emph><br><br>\");\n+            for (Part p : u.getParts()) {\n+                String partReport = \"<b>\" + p.getName() + \"</b> (Quality \" + p.getQualityName() + \")\";\n+                if (!p.needsMaintenance()) {\n+                    continue;\n+                }\n+                int oldQuality = p.getQuality();\n+                TargetRoll target = getTargetForMaintenance(p, tech);\n+                if (!paidMaintenance) {\n+                    // TODO : Make this modifier user inputtable\n+                    target.addModifier(1, \"did not pay for maintenance\");\n+                }\n \n-    public int getOccupiedBays(long type) {\n-        return getOccupiedBays(type, false);\n-    }\n+                partReport += \", TN \" + target.getValue() + \"[\" + target.getDesc() + \"]\";\n+                int roll = Compute.d6(2);\n+                int margin = roll - target.getValue();\n+                partReport += \" rolled a \" + roll + \", margin of \" + margin;\n \n-    public int getOccupiedBays(long type, boolean lv) {\n-        int num = 0;\n-        for (Unit unit : getUnits()) {\n-            if (unit.isMothballed()) {\n-                continue;\n-            }\n-            Entity en = unit.getEntity();\n-            if (en instanceof GunEmplacement || en instanceof Jumpship) {\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_MECH && en instanceof Mech) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_DROPSHIP && en instanceof Dropship) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_SMALL_CRAFT && en instanceof SmallCraft && !(en instanceof Dropship)) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_CONV_FIGHTER && en instanceof ConvFighter) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_AERO && en instanceof Aero\n-                    && !(en instanceof SmallCraft || en instanceof ConvFighter)) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_INFANTRY && en instanceof Infantry && !(en instanceof BattleArmor)) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_BATTLEARMOR && en instanceof BattleArmor) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_TANK && en instanceof Tank) {\n-                if ((en.getWeight() <= 50 && lv) || (en.getWeight() > 50 && !lv)) {\n-                    num++;\n+                switch (p.getQuality()) {\n+                    case Part.QUALITY_A: {\n+                        if (margin >= 4) {\n+                            p.improveQuality();\n+                        }\n+                        if (!campaignOptions.useUnofficialMaintenance()) {\n+                            if (margin < -6) {\n+                                partsToDamage.put(p, 4);\n+                            } else if (margin < -4) {\n+                                partsToDamage.put(p, 3);\n+                            } else if (margin == -4) {\n+                                partsToDamage.put(p, 2);\n+                            } else if (margin < -1) {\n+                                partsToDamage.put(p, 1);\n+                            }\n+                        } else if (margin < -6) {\n+                            partsToDamage.put(p, 1);\n+                        }\n+                        break;\n+                    }\n+                    case Part.QUALITY_B: {\n+                        if (margin >= 4) {\n+                            p.improveQuality();\n+                        } else if (margin < -5) {\n+                            p.decreaseQuality();\n+                        }\n+                        if (!campaignOptions.useUnofficialMaintenance()) {\n+                            if (margin < -6) {\n+                                partsToDamage.put(p, 2);\n+                            } else if (margin < -2) {\n+                                partsToDamage.put(p, 1);\n+                            }\n+                        }\n+                        break;\n+                    }\n+                    case Part.QUALITY_C: {\n+                        if (margin < -4) {\n+                            p.decreaseQuality();\n+                        } else if (margin >= 5) {\n+                            p.improveQuality();\n+                        }\n+                        if (!campaignOptions.useUnofficialMaintenance()) {\n+                            if (margin < -6) {\n+                                partsToDamage.put(p, 2);\n+                            } else if (margin < -3) {\n+                                partsToDamage.put(p, 1);\n+                            }\n+                        }\n+                        break;\n+                    }\n+                    case Part.QUALITY_D: {\n+                        if (margin < -3) {\n+                            p.decreaseQuality();\n+                            if ((margin < -4) && !campaignOptions.useUnofficialMaintenance()) {\n+                                partsToDamage.put(p, 1);\n+                            }\n+                        } else if (margin >= 5) {\n+                            p.improveQuality();\n+                        }\n+                        break;\n+                    }\n+                    case Part.QUALITY_E:\n+                        if (margin < -2) {\n+                            p.decreaseQuality();\n+                            if ((margin < -5) && !campaignOptions.useUnofficialMaintenance()) {\n+                                partsToDamage.put(p, 1);\n+                            }\n+                        } else if (margin >= 6) {\n+                            p.improveQuality();\n+                        }\n+                        break;\n+                    case Part.QUALITY_F:\n+                    default:\n+                        if (margin < -2) {\n+                            p.decreaseQuality();\n+                            if (margin < -6 && !campaignOptions.useUnofficialMaintenance()) {\n+                                partsToDamage.put(p, 1);\n+                            }\n+                        }\n+                        // TODO: award XP point if margin >= 6 (make this optional)\n+                        //if (margin >= 6) {\n+                        //\n+                        //}\n+                        break;\n                 }\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_PROTOMECH && en instanceof Protomech) {\n-                num++;\n-                continue;\n+                if (p.getQuality() > oldQuality) {\n+                    partReport += \": <font color='green'>new quality is \" + p.getQualityName() + \"</font>\";\n+                } else if (p.getQuality() < oldQuality) {\n+                    partReport += \": <font color='red'>new quality is \" + p.getQualityName() + \"</font>\";\n+                } else {\n+                    partReport += \": quality remains \" + p.getQualityName();\n+                }\n+                if (null != partsToDamage.get(p)) {\n+                    if (partsToDamage.get(p) > 3) {\n+                        partReport += \", <font color='red'><b>part destroyed</b></font>\";\n+                    } else {\n+                        partReport += \", <font color='red'><b>part damaged</b></font>\";\n+                    }\n+                }\n+                maintenanceReport.append(partReport).append(\"<br>\");\n             }\n-        }\n \n-        if (type == Entity.ETYPE_MECH) {\n-            if (getTotalMechBays() > num) {\n-                return num;\n+            int nDamage = 0;\n+            int nDestroy = 0;\n+            for (Map.Entry<Part, Integer> p : partsToDamage.entrySet()) {\n+                int damage = p.getValue();\n+                if (damage > 3) {\n+                    nDestroy++;\n+                    p.getKey().remove(false);\n+                } else {\n+                    p.getKey().doMaintenanceDamage(damage);\n+                    nDamage++;\n+                }\n             }\n-            return getTotalMechBays();\n-        }\n \n-        if (type == Entity.ETYPE_AERO) {\n-            if (getTotalASFBays() > num) {\n-                return num;\n-            }\n-            return getTotalASFBays();\n-        }\n+            u.setLastMaintenanceReport(maintenanceReport.toString());\n \n-        if (type == Entity.ETYPE_INFANTRY) {\n-            if (getTotalInfantryBays() > num) {\n-                return num;\n+            if (getCampaignOptions().logMaintenance()) {\n+                MekHQ.getLogger().info(getClass(), \"doMaintenance\", maintenanceReport.toString());\n             }\n-            return getTotalInfantryBays();\n-        }\n \n-        if (type == Entity.ETYPE_BATTLEARMOR) {\n-            if (getTotalBattleArmorBays() > num) {\n-                return num;\n+            int quality = u.getQuality();\n+            String qualityString;\n+            boolean reverse = getCampaignOptions().reverseQualityNames();\n+            if (quality > qualityOrig) {\n+                qualityString = \"<font color='green'>Overall quality improves from \"\n+                        + Part.getQualityName(qualityOrig, reverse) + \" to \" + Part.getQualityName(quality, reverse)\n+                        + \"</font>\";\n+            } else if (quality < qualityOrig) {\n+                qualityString = \"<font color='red'>Overall quality declines from \"\n+                        + Part.getQualityName(qualityOrig, reverse) + \" to \" + Part.getQualityName(quality, reverse)\n+                        + \"</font>\";\n+            } else {\n+                qualityString = \"Overall quality remains \" + Part.getQualityName(quality, reverse);\n             }\n-            return getTotalBattleArmorBays();\n-        }\n-\n-        if (type == Entity.ETYPE_TANK) {\n-            if (lv) {\n-                if (getTotalLightVehicleBays() > num) {\n-                    return num;\n-                }\n-                return getTotalLightVehicleBays();\n+            String damageString = \"\";\n+            if (nDamage > 0) {\n+                damageString += nDamage + \" parts were damaged. \";\n             }\n-            if (getTotalHeavyVehicleBays() > num) {\n-                return num;\n+            if (nDestroy > 0) {\n+                damageString += nDestroy + \" parts were destroyed.\";\n             }\n-            return getTotalHeavyVehicleBays();\n-        }\n-\n-        if (type == Entity.ETYPE_SMALL_CRAFT) {\n-            if (getTotalSmallCraftBays() > num) {\n-                return num;\n+            if (!damageString.isEmpty()) {\n+                damageString = \"<b><font color='red'>\" + damageString + \"</b></font> [<a href='REPAIR|\" + u.getId()\n+                        + \"'>Repair bay</a>]\";\n             }\n-            return getTotalSmallCraftBays();\n-        }\n-\n-        if (type == Entity.ETYPE_PROTOMECH) {\n-            if (getTotalProtomechBays() > num) {\n-                return num;\n+            String paidString = \"\";\n+            if (!paidMaintenance) {\n+                paidString = \"<font color='red'>Could not afford maintenance costs, so check is at a penalty.</font>\";\n             }\n-            return getTotalProtomechBays();\n-        }\n+            addReport(techNameLinked + \" performs maintenance on \" + u.getHyperlinkedName() + \". \" + paidString\n+                    + qualityString + \". \" + damageString + \" [<a href='MAINTENANCE|\" + u.getId()\n+                    + \"'>Get details</a>]\");\n \n-        if (type == Entity.ETYPE_DROPSHIP) {\n-            if (getTotalDockingCollars() > num) {\n-                return num;\n-            }\n-            return getTotalDockingCollars();\n+            u.resetDaysSinceMaintenance();\n         }\n-\n-        return -1; // default, this is an error condition\n     }\n \n-    public String getTransportDetails() {\n-        int noMech = Math.max(getNumberOfUnitsByType(Entity.ETYPE_MECH) - getOccupiedBays(Entity.ETYPE_MECH), 0);\n-        int noDS = Math.max(getNumberOfUnitsByType(Entity.ETYPE_DROPSHIP) - getOccupiedBays(Entity.ETYPE_DROPSHIP), 0);\n-        int noSC = Math.max(getNumberOfUnitsByType(Entity.ETYPE_SMALL_CRAFT) - getOccupiedBays(Entity.ETYPE_SMALL_CRAFT), 0);\n-        @SuppressWarnings(\"unused\") // FIXME: What type of bays do ConvFighters use?\n-        int noCF = Math\n-                .max(getNumberOfUnitsByType(Entity.ETYPE_CONV_FIGHTER) - getOccupiedBays(Entity.ETYPE_CONV_FIGHTER), 0);\n-        int noASF = Math.max(getNumberOfUnitsByType(Entity.ETYPE_AERO) - getOccupiedBays(Entity.ETYPE_AERO), 0);\n-        int nolv = Math.max(getNumberOfUnitsByType(Entity.ETYPE_TANK, false, true) - getOccupiedBays(Entity.ETYPE_TANK, true), 0);\n-        int nohv = Math.max(getNumberOfUnitsByType(Entity.ETYPE_TANK) - getOccupiedBays(Entity.ETYPE_TANK), 0);\n-        int noinf = Math.max(getNumberOfUnitsByType(Entity.ETYPE_INFANTRY) - getOccupiedBays(Entity.ETYPE_INFANTRY), 0);\n-        int noBA = Math.max(getNumberOfUnitsByType(Entity.ETYPE_BATTLEARMOR) - getOccupiedBays(Entity.ETYPE_BATTLEARMOR), 0);\n-        @SuppressWarnings(\"unused\") // FIXME: This should be used somewhere...\n-        int noProto = Math.max(getNumberOfUnitsByType(Entity.ETYPE_PROTOMECH) - getOccupiedBays(Entity.ETYPE_PROTOMECH),\n-                0);\n-        int freehv = Math.max(getTotalHeavyVehicleBays() - getOccupiedBays(Entity.ETYPE_TANK), 0);\n-        int freeinf = Math.max(getTotalInfantryBays() - getOccupiedBays(Entity.ETYPE_INFANTRY), 0);\n-        int freeba = Math.max(getTotalBattleArmorBays() - getOccupiedBays(Entity.ETYPE_BATTLEARMOR), 0);\n-        int freeSC = Math.max(getTotalSmallCraftBays() - getOccupiedBays(Entity.ETYPE_SMALL_CRAFT), 0);\n-        int mothballedAsCargo = Math.max(getNumberOfUnitsByType(Unit.ETYPE_MOTHBALLED), 0);\n-\n-        String asfAppend = \"\";\n-        int newNoASF = Math.max(noASF - freeSC, 0);\n-        int placedASF = Math.max(noASF - newNoASF, 0);\n-        if (noASF > 0 && freeSC > 0) {\n-            asfAppend = \" [\" + placedASF + \" ASF will be placed in Small Craft bays]\";\n-            freeSC -= placedASF;\n-        }\n-\n-        String lvAppend = \"\";\n-        int newNolv = Math.max(nolv - freehv, 0);\n-        int placedlv = Math.max(nolv - newNolv, 0);\n-        if (nolv > 0 && freehv > 0) {\n-            lvAppend = \" [\" + placedlv + \" Light Vehicles will be placed in Heavy Vehicle bays]\";\n-            freehv -= placedlv;\n-        }\n-\n-        if (noBA > 0 && freeinf > 0) {\n-\n-        }\n-\n-        if (noinf > 0 && freeba > 0) {\n-\n-        }\n-\n-        StringBuffer sb = new StringBuffer(\"Transports\\n\\n\");\n-\n-        // Lets do Mechs first.\n-        sb.append(String.format(\"%-35s      %4d (%4d)      %-35s     %4d\\n\", \"Mech Bays (Occupied):\",\n-                getTotalMechBays(), getOccupiedBays(Entity.ETYPE_MECH), \"Mechs Not Transported:\", noMech));\n-\n-        // Lets do ASF next.\n-        sb.append(String.format(\"%-35s      %4d (%4d)      %-35s     %4d%s\\n\", \"ASF Bays (Occupied):\",\n-                getTotalASFBays(), getOccupiedBays(Entity.ETYPE_AERO), \"ASF Not Transported:\", noASF, asfAppend));\n-\n-        // Lets do Light Vehicles next.\n-        sb.append(String.format(\"%-35s      %4d (%4d)      %-35s     %4d%s\\n\", \"Light Vehicle Bays (Occupied):\",\n-                getTotalLightVehicleBays(), getOccupiedBays(Entity.ETYPE_TANK, true), \"Light Vehicles Not Transported:\",\n-                nolv, lvAppend));\n-\n-        // Lets do Heavy Vehicles next.\n-        sb.append(String.format(\"%-35s      %4d (%4d)      %-35s     %4d\\n\", \"Heavy Vehicle Bays (Occupied):\",\n-                getTotalHeavyVehicleBays(), getOccupiedBays(Entity.ETYPE_TANK), \"Heavy Vehicles Not Transported:\",\n-                nohv));\n-\n-        if (noASF > 0 && freeSC > 0) {\n-            // Lets do ASF in Free Small Craft Bays next.\n-            sb.append(String.format(\"%-35s   %4d (%4d)      %-35s     %4d\\n\", \"   Light Vehicles in Heavy Vehicle Bays (Occupied):\",\n-                    getTotalHeavyVehicleBays(), getOccupiedBays(Entity.ETYPE_TANK) + placedlv,\n-                    \"Light Vehicles Not Transported:\", newNolv));\n-        }\n-\n-        if (nolv > 0 && freehv > 0) {\n-\n-        }\n-\n-        // Lets do Infantry next.\n-        sb.append(String.format(\"%-35s      %4d (%4d)      %-35s     %4d\\n\", \"Infantry Bays (Occupied):\",\n-                getTotalInfantryBays(), getOccupiedBays(Entity.ETYPE_INFANTRY), \"Infantry Not Transported:\", noinf));\n-\n-        if (noBA > 0 && freeinf > 0) {\n-\n-        }\n-\n-        // Lets do Battle Armor next.\n-        sb.append(String.format(\"%-35s      %4d (%4d)      %-35s     %4d\\n\", \"Battle Armor Bays (Occupied):\",\n-                getTotalBattleArmorBays(), getOccupiedBays(Entity.ETYPE_BATTLEARMOR), \"Battle Armor Not Transported:\",\n-                noBA));\n-\n-        if (noinf > 0 && freeba > 0) {\n-\n-        }\n-\n-        // Lets do Small Craft next.\n-        sb.append(String.format(\"%-35s      %4d (%4d)      %-35s     %4d\\n\", \"Small Craft Bays (Occupied):\",\n-                getTotalSmallCraftBays(), getOccupiedBays(Entity.ETYPE_SMALL_CRAFT), \"Small Craft Not Transported:\",\n-                noSC));\n-\n-        if (noASF > 0 && freeSC > 0) {\n-            // Lets do ASF in Free Small Craft Bays next.\n-            sb.append(String.format(\"%-35s   %4d (%4d)      %-35s     %4d\\n\", \"   ASF in Small Craft Bays (Occupied):\",\n-                    getTotalSmallCraftBays(), getOccupiedBays(Entity.ETYPE_SMALL_CRAFT) + placedASF,\n-                    \"ASF Not Transported:\", newNoASF));\n-        }\n-\n-        // Lets do Protomechs next.\n-        sb.append(String.format(\"%-35s      %4d (%4d)      %-35s     %4d\\n\", \"Protomech Bays (Occupied):\",\n-                getTotalProtomechBays(), getOccupiedBays(Entity.ETYPE_PROTOMECH), \"Protomechs Not Transported:\", noSC));\n-\n-        sb.append(\"\\n\\n\");\n-\n-        sb.append(String.format(\"%-35s      %4d (%4d)      %-35s     %4d\\n\", \"Docking Collars (Occupied):\",\n-                getTotalDockingCollars(), getOccupiedBays(Entity.ETYPE_DROPSHIP), \"Dropships Not Transported:\", noDS));\n-\n-        sb.append(\"\\n\\n\");\n-\n-        sb.append(String.format(\"%-35s      %4d\\n\", \"Mothballed Units (see Cargo report)\", mothballedAsCargo));\n-\n-        return new String(sb);\n-    }\n-\n-    public String getCombatPersonnelDetails() {\n-        int[] countPersonByType = new int[Person.T_NUM];\n-        int countTotal = 0;\n-        int countInjured = 0;\n-        int countMIA = 0;\n-        int countKIA = 0;\n-        int countRetired = 0;\n-        Money salary = Money.zero();\n-\n+    public void initTimeInService() {\n         for (Person p : getPersonnel()) {\n-            // Add them to the total count\n-            if (Person.isCombatRole(p.getPrimaryRole()) && !p.isPrisoner()\n-                    && !p.isBondsman() && p.isActive()) {\n-                countPersonByType[p.getPrimaryRole()]++;\n-                countTotal++;\n-                if (getCampaignOptions().useAdvancedMedical()\n-                        && p.getInjuries().size() > 0) {\n-                    countInjured++;\n-                } else if (p.getHits() > 0) {\n-                    countInjured++;\n+            if (!p.isDependent() && p.getPrisonerStatus().isFree()) {\n+                LocalDate join = null;\n+                for (LogEntry e : p.getPersonnelLog()) {\n+                    if (join == null) {\n+                        // If by some nightmare there is no Joined date just use the first entry.\n+                        join = e.getDate();\n+                    }\n+                    if (e.getDesc().startsWith(\"Joined \") || e.getDesc().startsWith(\"Freed \")) {\n+                        join = e.getDate();\n+                        break;\n+                    }\n                 }\n-                salary = salary.plus(p.getSalary());\n-            } else if (Person.isCombatRole(p.getPrimaryRole())\n-                    && p.getStatus() == Person.S_RETIRED) {\n-                countRetired++;\n-            } else if (Person.isCombatRole(p.getPrimaryRole())\n-                    && p.getStatus() == Person.S_MIA) {\n-                countMIA++;\n-            } else if (Person.isCombatRole(p.getPrimaryRole())\n-                    && p.getStatus() == Person.S_KIA) {\n-                countKIA++;\n-            }\n-        }\n \n-        StringBuffer sb = new StringBuffer(\"Combat Personnel\\n\\n\");\n-\n-        String buffer = String.format(\"%-30s        %4s\\n\", \"Total Combat Personnel\",\n-                countTotal);\n-        sb.append(buffer);\n-\n-        for (int i = 0; i < Person.T_NUM; i++) {\n-            if (Person.isCombatRole(i)) {\n-                buffer = String.format(\"    %-30s    %4s\\n\", Person.getRoleDesc(i, getFaction().isClan()),\n-                        countPersonByType[i]);\n-                sb.append(buffer);\n+                p.setRecruitment((join != null) ? join : getLocalDate().minusYears(1));\n             }\n         }\n-\n-        buffer = String.format(\"%-30s        %4s\\n\",\n-                \"Injured Combat Personnel\", countInjured);\n-        sb.append(\"\\n\" + buffer);\n-        buffer = String.format(\"%-30s        %4s\\n\", \"MIA Combat Personnel\",\n-                countMIA);\n-        sb.append(buffer);\n-        buffer = String.format(\"%-30s        %4s\\n\", \"KIA Combat Personnel\",\n-                countKIA);\n-        sb.append(buffer);\n-        buffer = String.format(\"%-30s        %4s\\n\",\n-                \"Retired Combat Personnel\", countRetired);\n-        sb.append(buffer);\n-\n-        sb.append(\"\\nMonthly Salary For Combat Personnel: \" + salary.toAmountAndSymbolString());\n-\n-        return new String(sb);\n     }\n \n-    public String getSupportPersonnelDetails() {\n-        int[] countPersonByType = new int[Person.T_NUM];\n-        int countTotal = 0;\n-        int countInjured = 0;\n-        int countMIA = 0;\n-        int countKIA = 0;\n-        int countRetired = 0;\n-        Money salary = Money.zero();\n-        int prisoners = 0;\n-        int bondsmen = 0;\n-\n+    public void initTimeInRank() {\n         for (Person p : getPersonnel()) {\n-            // Add them to the total count\n-            if (Person.isSupportRole(p.getPrimaryRole()) && !p.isPrisoner()\n-                    && !p.isBondsman() && p.isActive()) {\n-                countPersonByType[p.getPrimaryRole()]++;\n-                countTotal++;\n-                if (p.getInjuries().size() > 0 || p.getHits() > 0) {\n-                    countInjured++;\n-                }\n-                salary = salary.plus(p.getSalary());\n-            } else if (p.isPrisoner() && p.isActive()) {\n-                prisoners++;\n-                if (p.getInjuries().size() > 0 || p.getHits() > 0) {\n-                    countInjured++;\n-                }\n-            } else if (p.isBondsman() && p.isActive()) {\n-                bondsmen++;\n-                if (p.getInjuries().size() > 0 || p.getHits() > 0) {\n-                    countInjured++;\n-                }\n-            } else if (Person.isSupportRole(p.getPrimaryRole())\n-                    && p.getStatus() == Person.S_RETIRED) {\n-                countRetired++;\n-            } else if (Person.isSupportRole(p.getPrimaryRole())\n-                    && p.getStatus() == Person.S_MIA) {\n-                countMIA++;\n-            } else if (Person.isSupportRole(p.getPrimaryRole())\n-                    && p.getStatus() == Person.S_KIA) {\n-                countKIA++;\n-            }\n-        }\n+            if (!p.isDependent() && p.getPrisonerStatus().isFree()) {\n \n-        StringBuffer sb = new StringBuffer(\"Support Personnel\\n\\n\");\n+                LocalDate join = null;\n+                for (LogEntry e : p.getPersonnelLog()) {\n+                    if (join == null) {\n+                        // If by some nightmare there is no date from the below, just use the first entry.\n+                        join = e.getDate();\n+                    }\n \n-        String buffer = String.format(\"%-30s        %4s\\n\", \"Total Support Personnel\",\n-                countTotal);\n-        sb.append(buffer);\n+                    if (e.getDesc().startsWith(\"Joined \") || e.getDesc().startsWith(\"Freed \")\n+                            || e.getDesc().startsWith(\"Promoted \") || e.getDesc().startsWith(\"Demoted \")) {\n+                        join = e.getDate();\n+                    }\n+                }\n \n-        for (int i = 0; i < Person.T_NUM; i++) {\n-            if (Person.isSupportRole(i)) {\n-                buffer = String.format(\"    %-30s    %4s\\n\", Person.getRoleDesc(i, getFaction().isClan()),\n-                        countPersonByType[i]);\n-                sb.append(buffer);\n+                // For that one in a billion chance the log is empty. Clone today's date and subtract a year\n+                p.setLastRankChangeDate((join != null) ? join : getLocalDate().minusYears(1));\n             }\n         }\n-\n-        buffer = String.format(\"%-30s        %4s\\n\",\n-                \"Injured Support Personnel\", countInjured);\n-        sb.append(\"\\n\" + buffer);\n-        buffer = String.format(\"%-30s        %4s\\n\", \"MIA Support Personnel\",\n-                countMIA);\n-        sb.append(buffer);\n-        buffer = String.format(\"%-30s        %4s\\n\", \"KIA Support Personnel\",\n-                countKIA);\n-        sb.append(buffer);\n-        buffer = String.format(\"%-30s        %4s\\n\",\n-                \"Retired Support Personnel\", countRetired);\n-        sb.append(buffer);\n-\n-        sb.append(\"\\nMonthly Salary For Support Personnel: \" + salary.toAmountAndSymbolString());\n-\n-        sb.append(String.format(\"\\nYou have \" + prisoners + \" prisoner%s\",\n-                prisoners == 1 ? \"\" : \"s\"));\n-        sb.append(String.format(\"\\nYou have \" + bondsmen + \" %s\",\n-                bondsmen == 1 ? \"bondsman\" : \"bondsmen\"));\n-\n-        return new String(sb);\n     }\n \n-    public void doMaintenance(Unit u) {\n-        if (!u.requiresMaintenance()) {\n-            return;\n-        }\n-        // lets start by checking times\n-        Person tech = u.getTech();\n-        int minutesUsed = u.getMaintenanceTime();\n-        int astechsUsed = getAvailableAstechs(minutesUsed, false);\n-        boolean maintained = null != tech\n-                && tech.getMinutesLeft() >= minutesUsed && !tech.isMothballing();\n-        boolean paidMaintenance = true;\n-        if (maintained) {\n-            // use the time\n-            tech.setMinutesLeft(tech.getMinutesLeft() - minutesUsed);\n-            astechPoolMinutes -= astechsUsed * minutesUsed;\n-        }\n-        u.incrementDaysSinceMaintenance(maintained, astechsUsed);\n-        if (u.getDaysSinceMaintenance() >= getCampaignOptions().getMaintenanceCycleDays()) {\n-            // maybe use the money\n-            if (campaignOptions.payForMaintain()) {\n-                if (finances.debit(u.getMaintenanceCost(), Transaction.C_MAINTAIN, \"Maintenance for \" + u.getName(),\n-                        calendar.getTime())) {\n-                } else {\n-                    addReport(\"<font color='red'><b>You cannot afford to pay maintenance costs for \"\n-                            + u.getHyperlinkedName() + \"!</b></font>\");\n-                    paidMaintenance = false;\n-                }\n-            }\n-            if (getCampaignOptions().checkMaintenance()) {\n-                // its time for a maintenance check\n-                int qualityOrig = u.getQuality();\n-                String techName = \"Nobody\";\n-                String techNameLinked = techName;\n-                if (null != tech) {\n-                    techName = tech.getFullTitle();\n-                    techNameLinked = tech.getHyperlinkedFullTitle();\n-                }\n-                // dont do actual damage until we clear the for loop to avoid\n-                // concurrent mod problems\n-                // put it into a hash - 4 points of damage will mean destruction\n-                HashMap<Integer, Integer> partsToDamage = new HashMap<>();\n-                String maintenanceReport = \"<emph>\" + techName + \" performing maintenance</emph><br><br>\";\n-                for (Part p : u.getParts()) {\n-                    String partReport = \"<b>\" + p.getName() + \"</b> (Quality \" + p.getQualityName() + \")\";\n-                    if (!p.needsMaintenance()) {\n-                        continue;\n-                    }\n-                    int oldQuality = p.getQuality();\n-                    TargetRoll target = getTargetForMaintenance(p, tech);\n-                    if (!paidMaintenance) {\n-                        // I should probably make this modifier user inputtable\n-                        target.addModifier(1, \"did not pay maintenance\");\n-                    }\n-                    partReport += \", TN \" + target.getValue() + \"[\" + target.getDesc() + \"]\";\n-                    int roll = Compute.d6(2);\n-                    int margin = roll - target.getValue();\n-                    partReport += \" rolled a \" + roll + \", margin of \" + margin;\n-                    switch (p.getQuality()) {\n-                        case Part.QUALITY_F:\n-                            if (margin < -2) {\n-                                p.decreaseQuality();\n-                                if (margin < -6 && !campaignOptions.useUnofficialMaintenance()) {\n-                                    partsToDamage.put(p.getId(), 1);\n-                                }\n-                            }\n-                            if (margin >= 6) {\n-                                // TODO: award XP point (make this optional)\n-                            }\n-                            break;\n-                        case Part.QUALITY_E:\n-                            if (margin < -2) {\n-                                p.decreaseQuality();\n-                                if (margin < -5 && !campaignOptions.useUnofficialMaintenance()) {\n-                                    partsToDamage.put(p.getId(), 1);\n-                                }\n-                            }\n-                            if (margin >= 6) {\n-                                p.improveQuality();\n-                            }\n-                            break;\n-                        case Part.QUALITY_D:\n-                            if (margin < -3) {\n-                                p.decreaseQuality();\n-                                if (margin < -4 && !campaignOptions.useUnofficialMaintenance()) {\n-                                    partsToDamage.put(p.getId(), 1);\n-                                }\n-                            }\n-                            if (margin >= 5) {\n-                                p.improveQuality();\n-                            }\n-                            break;\n-                        case Part.QUALITY_C:\n-                            if (margin < -4) {\n-                                p.decreaseQuality();\n-                            }\n-                            if (!campaignOptions.useUnofficialMaintenance()) {\n-                                if (margin < -6) {\n-                                    partsToDamage.put(p.getId(), 2);\n-                                } else if (margin < -3) {\n-                                    partsToDamage.put(p.getId(), 1);\n-                                }\n-                            }\n-                            if (margin >= 5) {\n-                                p.improveQuality();\n-                            }\n-                            break;\n-                        case Part.QUALITY_B:\n-                            if (margin < -5) {\n-                                p.decreaseQuality();\n-                            }\n-                            if (!campaignOptions.useUnofficialMaintenance()) {\n-                                if (margin < -6) {\n-                                    partsToDamage.put(p.getId(), 2);\n-                                } else if (margin < -2) {\n-                                    partsToDamage.put(p.getId(), 1);\n-                                }\n-                            }\n-                            if (margin >= 4) {\n-                                p.improveQuality();\n-                            }\n-                            break;\n-                        case Part.QUALITY_A:\n-                            if (!campaignOptions.useUnofficialMaintenance()) {\n-                                if (margin < -6) {\n-                                    partsToDamage.put(p.getId(), 4);\n-                                } else if (margin < -4) {\n-                                    partsToDamage.put(p.getId(), 3);\n-                                } else if (margin == -4) {\n-                                    partsToDamage.put(p.getId(), 2);\n-                                } else if (margin < -1) {\n-                                    partsToDamage.put(p.getId(), 1);\n-                                }\n-                            } else if (margin < -6) {\n-                                partsToDamage.put(p.getId(), 1);\n-                            }\n-                            if (margin >= 4) {\n-                                p.improveQuality();\n-                            }\n-                            break;\n-                    }\n-                    if (p.getQuality() > oldQuality) {\n-                        partReport += \": <font color='green'>new quality is \" + p.getQualityName() + \"</font>\";\n-                    } else if (p.getQuality() < oldQuality) {\n-                        partReport += \": <font color='red'>new quality is \" + p.getQualityName() + \"</font>\";\n-                    } else {\n-                        partReport += \": quality remains \" + p.getQualityName();\n-                    }\n-                    if (null != partsToDamage.get(p.getId())) {\n-                        if (partsToDamage.get(p.getId()) > 3) {\n-                            partReport += \", <font color='red'><b>part destroyed</b></font>\";\n-                        } else {\n-                            partReport += \", <font color='red'><b>part damaged</b></font>\";\n-                        }\n-                    }\n-                    maintenanceReport += partReport + \"<br>\";\n-                }\n-                int nDamage = 0;\n-                int nDestroy = 0;\n-                for (int key : partsToDamage.keySet()) {\n-                    Part p = getPart(key);\n-                    if (null != p) {\n-                        int damage = partsToDamage.get(key);\n-                        if (damage > 3) {\n-                            nDestroy++;\n-                            p.remove(false);\n-                        } else {\n-                            p.doMaintenanceDamage(damage);\n-                            nDamage++;\n-                        }\n+    public void initRetirementDateTracking() {\n+        for (Person person : getPersonnel()) {\n+            if (person.getStatus().isRetired()) {\n+                LocalDate retired = null;\n+                LocalDate lastLoggedDate = null;\n+                for (LogEntry entry : person.getPersonnelLog()) {\n+                    lastLoggedDate = entry.getDate();\n+                    if (entry.getDesc().startsWith(\"Retired\")) {\n+                        retired = entry.getDate();\n                     }\n                 }\n-                u.setLastMaintenanceReport(maintenanceReport);\n-                int quality = u.getQuality();\n-                String qualityString;\n-                boolean reverse = getCampaignOptions().reverseQualityNames();\n-                if (quality > qualityOrig) {\n-                    qualityString = \"<font color='green'>Overall quality improves from \"\n-                            + Part.getQualityName(qualityOrig, reverse) + \" to \" + Part.getQualityName(quality, reverse)\n-                            + \"</font>\";\n-                } else if (quality < qualityOrig) {\n-                    qualityString = \"<font color='red'>Overall quality declines from \"\n-                            + Part.getQualityName(qualityOrig, reverse) + \" to \" + Part.getQualityName(quality, reverse)\n-                            + \"</font>\";\n-                } else {\n-                    qualityString = \"Overall quality remains \" + Part.getQualityName(quality, reverse);\n-                }\n-                String damageString = \"\";\n-                if (nDamage > 0) {\n-                    damageString += nDamage + \" parts were damaged. \";\n-                }\n-                if (nDestroy > 0) {\n-                    damageString += nDestroy + \" parts were destroyed.\";\n-                }\n-                if (!damageString.isEmpty()) {\n-                    damageString = \"<b><font color='red'>\" + damageString + \"</b></font> [<a href='REPAIR|\" + u.getId()\n-                            + \"'>Repair bay</a>]\";\n-                }\n-                String paidString = \"\";\n-                if (!paidMaintenance) {\n-                    paidString = \"<font color='red'>Could not afford maintenance costs, so check is at a penalty.</font>\";\n-                }\n-                addReport(techNameLinked + \" performs maintenance on \" + u.getHyperlinkedName() + \". \" + paidString\n-                        + qualityString + \". \" + damageString + \" [<a href='MAINTENANCE|\" + u.getId()\n-                        + \"'>Get details</a>]\");\n-            }\n-            u.resetDaysSinceMaintenance();\n-        }\n-    }\n \n-    public void initTimeInService() {\n-        for (Person p : getPersonnel()) {\n-            Date join = null;\n-            for (LogEntry e : p.getPersonnelLog()) {\n-                if (join == null){\n-                    // If by some nightmare there is no Joined date just use the first entry.\n-                    join = e.getDate();\n-                }\n-                if (e.getDesc().startsWith(\"Joined \") || e.getDesc().startsWith(\"Freed \")) {\n-                    join = e.getDate();\n-                    break;\n-                }\n-            }\n-            if (!p.isDependent() && !p.isPrisoner() && !p.isBondsman()) {\n-                GregorianCalendar cal = (GregorianCalendar) GregorianCalendar.getInstance();\n-                // For that one in a billion chance the log is empty. Clone todays date and subtract a year\n-                if (join == null) {\n-                    cal = (GregorianCalendar)calendar.clone();\n-                    cal.add(Calendar.YEAR, -1);\n-                    p.setRecruitment(cal);\n-                } else {\n-                    cal.setTime(join);\n-                    p.setRecruitment(cal);\n+                if (retired == null) {\n+                    retired = lastLoggedDate;\n                 }\n+\n+                // For that one in a billion chance the log is empty. Clone today's date and subtract a year\n+                person.setRetirement((retired != null) ? retired : getLocalDate().minusYears(1));\n             }\n         }\n     }\n \n     public void initAtB(boolean newCampaign) {\n-        getRetirementDefectionTracker().setLastRetirementRoll(getCalendar());\n+        getRetirementDefectionTracker().setLastRetirementRoll(getLocalDate());\n \n         if (!newCampaign) {\n             /*\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "3f55aabad31fb84ff1e5af9c8caac7bd8c8999a0", "message": "Merge commit", "committedDate": null}, {"oid": "a0c1cbf9746ed9486f08ce4aa2376828e846c786", "committedDate": "2019-02-26 21:45:56 -0500", "message": "merge"}, {"oid": "3002e321d67f944da3a051a049f0706c0e353aa0", "committedDate": "2019-03-04 20:50:34 -0500", "message": "merge from upstream"}, {"oid": "34f5dfffab4318e94903fece9dbf49dd1ee475c7", "committedDate": "2019-04-23 22:53:00 -0400", "message": "continues work on track gui and rules"}, {"oid": "b1c2e0f95fc8ad45080d9962da602d5fe815c34b", "committedDate": "2019-04-26 22:02:27 -0400", "message": "hook up stratcon rules manager to mekhq event bus"}, {"oid": "6f180f04dabdd9901dc392b093561514eb2e84cc", "committedDate": "2019-05-04 12:17:55 -0400", "message": "merge from upstream"}, {"oid": "119ff411ebb80f91b83b3fe139bb911a79048b3d", "committedDate": "2019-05-12 15:48:11 -0400", "message": "scenario setup work"}, {"oid": "2548381ed541547a775bb8c96fd53802087ec9aa", "committedDate": "2019-06-20 23:58:58 -0400", "message": "merge from upstream"}, {"oid": "ed6a5c015aa33d0bffdcd3297b9482ce600eb146", "committedDate": "2020-04-11 22:33:14 -0400", "message": "merge from upstream"}, {"oid": "ca46ea5005775f38ad56f98bfb8899a187571e49", "committedDate": "2020-06-03 11:30:19 -0400", "message": "merge from upstream"}, {"oid": "b2f014d250be5b4b75ed3f765f10ee1781ab96ae", "committedDate": "2020-06-23 22:21:32 -0400", "message": "merge from upstream"}, {"oid": "2bd7638ed4cc2ad5bc80e4b1bc78ff091c318a87", "committedDate": "2020-07-13 00:06:30 -0400", "message": "merge from upstream"}, {"oid": "d4f035c262d3d9ea7b7f5e935a5807bf5275aa91", "committedDate": "2020-08-08 23:08:38 -0400", "message": "merge from upstream"}, {"oid": "5830ebef6d2f671d0b152f328436ab36bcddacf4", "committedDate": "2020-08-24 20:32:16 -0400", "message": "merge from upstream"}, {"oid": "c8622590fef59265a5a8c4f68676a4a628d0fc0a", "committedDate": "2020-08-26 23:17:49 -0400", "message": "multiple bug fixes and hookup to actual campaign"}, {"oid": "935339ac1b799e58664d736142b2a1fa0d9e4263", "committedDate": "2020-09-09 00:06:07 -0400", "message": "merge from upstream"}, {"oid": "c7d9edb3737ba14da075190a1292ac94bbd7e0f2", "committedDate": "2020-09-20 14:36:56 -0600", "message": "Adding code for a log entry when swapping TOE force."}, {"oid": "2e590a1dbeb8a7b132cd5d312b93af37b9e0620a", "committedDate": "2020-09-29 10:15:54 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_476"}, {"oid": "04f10ee4b7f5bf57284109439ec1ab178b15857e", "committedDate": "2020-10-06 21:41:18 -0400", "message": "merge from upstream"}, {"oid": "04a16de448a0c7d576a6c3c64c9d23ae08384bae", "committedDate": "2020-10-07 14:33:13 -0400", "message": "Split out cargo and hangar statistics from Campaign"}, {"oid": "796379c3c13e8dadad4ac4cfd29f02a30e9c2bd1", "committedDate": "2020-10-07 14:33:13 -0400", "message": "Split out accounting from the Campaign"}, {"oid": "a254e204d91c3fd90698936f8d21aba26aaf0142", "committedDate": "2020-10-07 14:33:14 -0400", "message": "Move PersonnelReport methods"}, {"oid": "361dde24295aa66e89fea69823b01cf497cf4664", "committedDate": "2020-10-07 14:33:14 -0400", "message": "Move more financial reporting out of Campaign"}, {"oid": "c28db6f06dec2b03e487c15f514685d852bdca1e", "committedDate": "2020-10-07 14:33:14 -0400", "message": "Remove unused methods"}, {"oid": "039786019051fddf3af641c0cc0e35e7c85eb156", "committedDate": "2020-10-07 15:49:11 -0400", "message": "Make testing Accountant easier for a Campaign"}, {"oid": "a72b07d7b8ec62055140cd346314602fb020119e", "committedDate": "2020-10-07 16:11:53 -0400", "message": "Make it easier to mock stats classes"}, {"oid": "0400aac175c219dc2fb73ea0a8dfbbf429aaff6e", "committedDate": "2020-10-07 16:45:26 -0400", "message": "Add forEachSparePart to improve performance"}, {"oid": "63e028b04713a41ec415910ea4d0ed03a3678864", "committedDate": "2020-10-08 13:32:32 -0400", "message": "Merge remote-tracking branch 'upstream/master' into move-accounting-and-stats-out-of-campaign"}, {"oid": "13de948b34166d73f4f7a2e5a8982c9f693b12bc", "committedDate": "2020-10-10 15:15:00 -0400", "message": "Use Person directly instead of IDs in Unit"}, {"oid": "923a477ddb1060c2a48c13cca7c5900a40c0f82a", "committedDate": "2020-10-10 15:15:00 -0400", "message": "Use Person instead of an ID"}, {"oid": "58291b29acbe7cc24a4491f3d3ab911f0468a7dc", "committedDate": "2020-10-10 15:41:57 -0400", "message": "Fix logic to check for Already Being Worked On"}, {"oid": "998ab0faf85804f17cc7444ae1b46c2591b5db1f", "committedDate": "2020-10-15 23:34:03 -0400", "message": "merge from upstream"}, {"oid": "75e396b885c6008c6f6a7d72f1bbd7aad8099970", "committedDate": "2020-10-16 16:29:27 -0400", "message": "Moving to an enum for mission status"}, {"oid": "24de5e9720cf823838bf74e4cf4eb562bedbb437", "committedDate": "2020-10-16 18:28:46 -0400", "message": "Merging useUnitRating with the UnitRatingMethod enum"}, {"oid": "ca615b8e13e2158834a33079c6f89b02504c0bf7", "committedDate": "2020-10-17 01:17:28 -0400", "message": "Moving to using AbstractIcon for constants"}, {"oid": "4a54c7e9a18be4084eb1d3748a891b46400bf53d", "committedDate": "2020-10-17 13:11:47 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_IconConstants"}, {"oid": "9c1a47e2e6268b362edd3d6eb2e39018b5802179", "committedDate": "2020-10-20 14:49:01 -0400", "message": "Address PR feedback"}, {"oid": "b5d38e8af270f50fc091db05cf882ea8380fe3a7", "committedDate": "2020-10-20 14:49:08 -0400", "message": "Merge remote-tracking branch 'upstream/master' into units-hold-actual-persons"}, {"oid": "f34ac06c3db416f5e852246e928d3b1c6c132500", "committedDate": "2020-10-20 21:00:04 -0400", "message": "Merge branch 'master' into dev_Windchild_MissionStatus"}, {"oid": "fbc730260407b11dc98571c9b5e184e8f05e6a89", "committedDate": "2020-10-22 12:56:22 -0400", "message": "Standardizing to use the PortraitChooser instead of the older icon selector"}, {"oid": "0637c9d04376fbc5378a09826bdd58e1092b97f0", "committedDate": "2020-10-22 15:07:25 -0400", "message": "Use Units rather than their IDs"}, {"oid": "d25f391110cab3b64118d5963e321c379f8ab3ec", "committedDate": "2020-10-22 15:07:25 -0400", "message": "Do not use Unit IDs in Refits"}, {"oid": "5bf80c3e80c7fd9247fee197d749605de4a4e17b", "committedDate": "2020-10-22 15:07:49 -0400", "message": "Merge branch 'master' into dev_Windchild_IconConstants"}, {"oid": "2eec6da85e021ce0398fd3d715071b7b625855ba", "committedDate": "2020-10-22 23:15:38 -0400", "message": "merge from upstream"}, {"oid": "599b0a3158d94a3eea50fe8314c55177a344c2a9", "committedDate": "2020-10-24 14:22:32 -0400", "message": "Merge remote-tracking branch 'upstream/master' into use-units-not-ids"}, {"oid": "1d9b9a6ee2a71f128d65bb7754463be3ca9a71bc", "committedDate": "2020-10-24 14:26:31 -0400", "message": "Address LGTM issues"}, {"oid": "9f22e79abf71f3d8cf935d5d83d4790af02b32ce", "committedDate": "2020-10-24 14:48:29 -0400", "message": "Add tests for transport unit sets"}, {"oid": "851026ff48ec4e39238b2c56212bac2ea7993670", "committedDate": "2020-10-26 14:53:19 -0400", "message": "Use new Warehouse type in Campaign (etc)"}, {"oid": "37fc5840de9bf6c5bb19b38767e1394be220e1b9", "committedDate": "2020-10-26 16:02:30 -0400", "message": "Move some event logic to the Warehouse"}, {"oid": "3f795a2b3ba1840a198ca067a1d76aed4429f699", "committedDate": "2020-10-26 17:26:50 -0400", "message": "Move removing child parts to the Warehouse"}, {"oid": "d597a8aab6c1b948ebfdcc3f58d2213acb04b200", "committedDate": "2020-10-27 12:29:29 -0400", "message": "Starting to implement edge fixes"}, {"oid": "9978a0b21dd7d6fbd2d0077748027c6ed31753b0", "committedDate": "2020-10-27 12:29:35 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_Edge"}, {"oid": "b2aea6b5d940c4fa06a42cd1b04559815323ab63", "committedDate": "2020-10-27 13:04:35 -0400", "message": "Working on edge code"}, {"oid": "fbd0d470437e527c764daa294d1521ca7509a6af", "committedDate": "2020-10-27 14:04:21 -0400", "message": "Implementing changes as per review"}, {"oid": "c883a5f8c0085c74e8f448ecd3c0f9c04227b067", "committedDate": "2020-10-27 17:22:03 -0400", "message": "Move spare part helpers to Warehouse and add tests"}, {"oid": "dfca32fc2a15a2908cd4f1277261d416fcad1f00", "committedDate": "2020-10-27 21:14:06 -0400", "message": "merge from upstream"}, {"oid": "a7d7c78d0149d3de3828501499fdf61b5ae75be6", "committedDate": "2020-10-28 14:17:13 -0400", "message": "Merge pull request #2167 from sixlettervariables/add-parts-warehouse"}, {"oid": "d9aa78378bd639bd9bd8b36e16e9d407d5c2f1a6", "committedDate": "2020-10-28 14:28:37 -0400", "message": "Clean up part events in Campaign"}, {"oid": "f6acac4474902742fd52f7d3d9cc3cf3c074d16a", "committedDate": "2020-10-28 15:35:29 -0400", "message": "Address LGTM nit"}, {"oid": "b60b5a84ad487fe05e6369a11fedccb4f233a69d", "committedDate": "2020-10-29 15:28:06 -0400", "message": "Move Hire Personnel for a Unit to an action"}, {"oid": "d32837864805c67ac3894ce3a6b84ee8dae064a3", "committedDate": "2020-10-29 15:43:23 -0400", "message": "Don't use unit IDs for parts needing service"}, {"oid": "92b838a6428bae18030b98719a0c20d399377282", "committedDate": "2020-10-29 15:51:09 -0400", "message": "Move unnecessary unit logic from Campaign and into Unit"}, {"oid": "fd327a8f439a378f8f34afcb3067fe57153dcc2d", "committedDate": "2020-11-03 21:23:25 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_MHQPortraitSelector"}, {"oid": "0cbe836f9e807faf4cbef1d391b1ce3ad0e865d1", "committedDate": "2020-11-04 16:17:23 -0500", "message": "Add Quartermaster to manage machines and materiel"}, {"oid": "18cddebe515dbc58e76c49ef789cb3f4b31bc8a2", "committedDate": "2020-11-06 14:57:11 -0500", "message": "Address PR feedback and fix #1801"}, {"oid": "dd8b9c84414cb11c30ec6e2d395e2260235cd73a", "committedDate": "2020-11-06 14:58:38 -0500", "message": "Fix extraneous whitespace"}, {"oid": "31c96a9e64873aa2840946dbb1c12d347994780d", "committedDate": "2020-11-06 16:10:50 -0500", "message": "Swapping portrait generation to use system-based file path comparison"}, {"oid": "8bf24b6a7be023940aad58a0c3c3ded1ee2a9358", "committedDate": "2020-11-06 16:50:16 -0500", "message": "Fixing merge conflicts"}, {"oid": "206529fd93c7b6efd22949d747ea14ec2a1942ed", "committedDate": "2020-11-06 19:38:46 -0500", "message": "Merge pull request #2185 from sixlettervariables/use-units-not-ids-for-transports"}, {"oid": "f246ee2085262fe713a9f24b3eaf6e7adb142e41", "committedDate": "2020-11-07 10:40:39 -0500", "message": "Moving portrait generation code into a random portrait generator"}, {"oid": "139d94f86981a4c6b681ec14d16630b99198024a", "committedDate": "2020-11-07 12:32:07 -0500", "message": "AbstractIcon: Simplifying icon-related code"}, {"oid": "cbec2bdc4861f772bb509fc69f37a8c053522347", "committedDate": "2020-11-07 12:39:03 -0500", "message": "Removing duplicate constants in campaign"}, {"oid": "e9c4a88af33312b049543ac024e2c32784a7b209", "committedDate": "2020-11-07 12:52:54 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_AIPS"}, {"oid": "76f57ccbde3ae98e58e5264c5d06be29b03ce3af", "committedDate": "2020-11-07 15:16:08 -0500", "message": "Merge pull request #2209 from Windchild292/dev_Windchild_RPG"}, {"oid": "067bacc6c00b10192faa2b4e13d4c2127ba75292", "committedDate": "2020-11-07 22:39:06 -0500", "message": "Merge pull request #2211 from Windchild292/dev_Windchild_AIPS"}, {"oid": "a38a43b4cc7f7670aa7ffad2bf318bc15334d0a1", "committedDate": "2020-11-08 13:55:37 -0500", "message": "Merge remote-tracking branch 'upstream/master' into add-quartermaster-2"}, {"oid": "6b4dfeadd20c22e92cb2a0328030ed58c3df5cd1", "committedDate": "2020-11-14 19:29:15 -0500", "message": "Swapping Genealogy and FormerSpouse to no longer use id when active."}, {"oid": "aa59e47ee67a276b3a415ab3cb761291fa2d1593", "committedDate": "2020-11-15 16:10:53 -0500", "message": "Only return non-zero quantities of parts, fixing #2231"}, {"oid": "24c2199bd396e7e059f3a3123c060fce92c04726", "committedDate": "2020-11-30 21:41:10 -0500", "message": "merge from upstream"}, {"oid": "6b3e4afa0664f35d2fc49a8e881b2fd7f22ea981", "committedDate": "2020-12-04 07:37:02 -0500", "message": "Use tested spare part consolidation logic"}, {"oid": "749469b9d6c8f7a36748d76c53dae5cc39365894", "committedDate": "2020-12-04 10:33:33 -0500", "message": "Fixup whitespace"}, {"oid": "cb8a407413b0629636afe9dc153a93699cbcb2da", "committedDate": "2020-12-04 12:21:25 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_476"}, {"oid": "7c0dd98fed591d24803031e815a39480fae3da18", "committedDate": "2020-12-04 12:24:21 -0500", "message": "Fixing merge conflitcs"}, {"oid": "d770e67e26237234553967696e546ef4cd5e6c4a", "committedDate": "2020-12-04 16:20:00 -0500", "message": "Moving ranks to their own folder"}, {"oid": "198ea362215a2605015f13d5baf7a6f9a27e2323", "committedDate": "2020-12-04 17:57:54 -0500", "message": "Moving ranks system names to the Rank XML file"}, {"oid": "c88ca2c1c698dfe730b493048b630ef6d20ce973", "committedDate": "2020-12-13 02:45:36 -0500", "message": "Restore AtBContract references in the ContractMarket #2141"}, {"oid": "dce8434c1c674caf8ba284f7e99a0da72a679958", "committedDate": "2020-12-14 18:14:37 -0500", "message": "Merge pull request #2263 from Windchild292/dev_Windchild_2200"}, {"oid": "02b7023e03f921ec06430d3a3bfbf3fd4d06f12d", "committedDate": "2020-12-16 17:45:57 -0500", "message": "Add the ability to swap out instances of static classes"}, {"oid": "6fe11ed3dea3b240bc594dd3153526f8fa1efcd1", "committedDate": "2020-12-22 17:15:50 -0500", "message": "merge from upstream"}, {"oid": "1080fdc3cc0abf4b10a986fa95243f6a883a2446", "committedDate": "2020-12-22 17:22:20 -0500", "message": "Do not display unknown armor types in the Parts In Use report, fixes #2298"}, {"oid": "26577933fe91fcc839a403192479257fcf64f842", "committedDate": "2020-12-25 17:30:07 -0500", "message": "PlayerColours, Colour Camo Standardization, and standardizing camo selector"}, {"oid": "b7106b6df15109159676c4d5c76d6b57d98d749c", "committedDate": "2020-12-25 17:31:02 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_1727"}, {"oid": "256150fa6780932824d092bb5e1cfc5160a82798", "committedDate": "2020-12-26 23:02:07 -0500", "message": "Fixing colour camouflage during colour set"}, {"oid": "05bda11a452176725c2023ddfda641c5b9d77ff2", "committedDate": "2020-12-30 11:28:06 -0500", "message": "Merge pull request #2294 from sixlettervariables/add-contract-market-tests"}, {"oid": "d96560342ac372c6159e2eb36a930d730575079e", "committedDate": "2020-12-31 10:50:32 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_1727"}, {"oid": "87fef495531a68093af610ebd4d170ad9fe58ed7", "committedDate": "2020-12-31 13:13:30 -0500", "message": "Applying requisite changes in other files"}, {"oid": "1077aa3ce47d85a2b52d46fe24d0a9d6500338b3", "committedDate": "2021-01-07 22:38:01 -0500", "message": "Implementing PersonnelRole Enum"}, {"oid": "7ee43f4d3196080806f016767d68fcc646806b95", "committedDate": "2021-01-08 13:14:46 -0500", "message": "Fixing merge conflicts"}, {"oid": "461f2e03e5c7b7e233ccb188ab3acbea84217051", "committedDate": "2021-01-09 12:33:02 -0500", "message": "Fixing merge conflicts"}, {"oid": "7715f2d53d7b785432c6d12abe076dd9fe734b63", "committedDate": "2021-01-11 00:08:57 -0500", "message": "Continuing camouflage AbstractIcon implementation"}, {"oid": "5c767fe20f909aed7ad9ee04af783fada0f01183", "committedDate": "2021-01-13 14:44:22 -0500", "message": "Fixing colour set and moving EntityImage to use proper camo type"}, {"oid": "13a860aed5400a5bf2ccb7ff55f12b6266ed1c86", "committedDate": "2021-01-14 15:40:05 -0500", "message": "Moving to fully use isConventionalInfantry"}, {"oid": "b395926d66b44f814eeccbcdf238377754b3497f", "committedDate": "2021-01-16 12:03:30 -0500", "message": "Swapping to using streams for missions"}, {"oid": "3c08e5b43761cd85a411618df940a669f43b0f74", "committedDate": "2021-01-16 12:03:41 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_MissionStatus"}, {"oid": "56075ee22d31cf6645cfbc078f6d0059a7c35a2e", "committedDate": "2021-01-16 13:07:08 -0500", "message": "Swapping to stream implementation"}, {"oid": "c56982c6b4c7590fa58659f5739adb6fb98c38b3", "committedDate": "2021-01-16 13:20:27 -0500", "message": "Applying changes from personal review"}, {"oid": "bac1ae00109056ac5aaf4ddf35370fb62657e4ed", "committedDate": "2021-01-16 13:40:07 -0500", "message": "Moving to only use getMissions when necessary"}, {"oid": "6a6ab7d22aae49fceae02409ae8f3121e890ccc1", "committedDate": "2021-01-16 13:57:34 -0500", "message": "Moving to isActiveOn"}, {"oid": "e0a11cd0c98c4fd665190822f79c498645f15426", "committedDate": "2021-01-31 13:08:13 -0700", "message": "Renaming a bunch of personnel options"}, {"oid": "a16944f0ca0f8452a8500b311c0d4c1afd4f69ad", "committedDate": "2021-01-31 13:14:59 -0700", "message": "Finishing the option renames"}, {"oid": "3055e76295deb7d552bc3972b69cc6e0fb1f8760", "committedDate": "2021-02-01 10:17:56 -0700", "message": "Starting to implement Automatic Company Generation"}, {"oid": "909ceb8a84cdd6031bf90c300d47b4d2da527643", "committedDate": "2021-02-01 21:19:14 -0700", "message": "Continuing to work on an AtB Company Generator"}, {"oid": "50d74c591ba7b25978e91a326e3d0ce53513c6cd", "committedDate": "2021-02-07 16:50:13 -0700", "message": "Continuing to implement company generation and its options"}, {"oid": "426328755b88eceb8119a0c91696b2e655a0c00e", "committedDate": "2021-02-08 12:27:32 -0700", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_PersonnelRoles"}, {"oid": "9cbf543bf750926dffd2ad77d82e8da2dc416a54", "committedDate": "2021-02-08 12:57:48 -0700", "message": "Bugfixes and some code cleanup from personal review"}, {"oid": "f00627349f7dfb1bfb29305b3377fa3fea2776c5", "committedDate": "2021-02-11 10:55:45 -0700", "message": "Adding Unit::isConventionalInfantry to ensure the entity is null checked"}, {"oid": "d5767fac16735b748124c2759fa7e02388f3e3e0", "committedDate": "2021-02-11 12:52:56 -0700", "message": "Applying changes from personal review"}, {"oid": "d69c0121a94474264821a25df299ecf667dfefdf", "committedDate": "2021-02-12 22:37:21 -0500", "message": "merge from upstream"}, {"oid": "17e3819e3ef169b2b2bf9114df56a23fc8f57f8b", "committedDate": "2021-02-19 09:26:24 -0500", "message": "Add logging and error trapping on daily unit maintenance #2427"}, {"oid": "3a7dc0d62fbf19186d1bbebeefc14a1838733180", "committedDate": "2021-02-19 09:32:56 -0500", "message": "Add error trapping to daily part maintenance, related to #2427"}, {"oid": "efa0010ac4de3087fd997cad083dfcc7307f1fae", "committedDate": "2021-02-19 10:53:09 -0700", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_PersonnelOptionsTab"}, {"oid": "1e74b62a2b90eefb8fd7a24d4c24faf08d1c6b3b", "committedDate": "2021-02-19 12:27:59 -0700", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_AtBCompanyGeneration"}, {"oid": "8f0b7abad948bde3df857ec022c1a3668076b29c", "committedDate": "2021-02-26 13:31:57 -0700", "message": "2442: Fixing Ranks Issues: Removing ancient migration and code, Using proper setter, and using the Ranks as the spinner"}, {"oid": "d52c982d8da547329729b0caea1fffab274e1b0c", "committedDate": "2021-02-27 10:23:14 -0500", "message": "Use MM's new UnitNameTracker for name collisions"}, {"oid": "3c5f987fa51fbe18454c55214f4d5d5f2b980a90", "committedDate": "2021-03-01 09:12:20 -0700", "message": "Fixing merge conflicts"}, {"oid": "b9f8896698477ed928a80443d0345d6397c58bb2", "committedDate": "2021-03-03 10:07:04 -0700", "message": "Fixing merge conflicts"}, {"oid": "1a9d000431b1f187634f7e6ef15161dd07678998", "committedDate": "2021-03-05 12:19:51 -0700", "message": "Continuing to work on the company generator"}, {"oid": "7f59899475e511f98ed9f64a1c10efab11737c43", "committedDate": "2021-03-05 21:50:52 -0500", "message": "merge from upstream"}, {"oid": "1a6354d39d3f6108e9e0e6f9e455c5a126627347", "committedDate": "2021-03-06 10:44:21 -0500", "message": "Address review comments"}, {"oid": "18c7330a3cc319d1dc3e55892a46c5c80539db9a", "committedDate": "2021-03-06 09:56:12 -0700", "message": "Fixing merge conflicts"}, {"oid": "b19752176bb0619f7ccda9f75d551b050521a106", "committedDate": "2021-03-08 23:25:41 -0500", "message": "merge from upstream"}, {"oid": "0bc70593b2b327657e4ff7709e320451adfadbe6", "committedDate": "2021-03-09 09:01:53 -0700", "message": "Fixing merge conflicts"}, {"oid": "9eca5ea7a7d0fe44db02d1ce091f5bf294cb156d", "committedDate": "2021-03-09 09:07:57 -0700", "message": "Fixing merge conflicts"}, {"oid": "baefb52c3074832565148fffae6d1363449fa8ae", "committedDate": "2021-03-09 09:19:18 -0700", "message": "Fixing merge conflicts"}, {"oid": "9499ad003bfeb58930187abad3334129be912b4e", "committedDate": "2021-03-09 09:23:18 -0700", "message": "Fixing merge conflicts"}, {"oid": "d0e34e3b80c163ff4ed03474a3adcd39d061c9ee", "committedDate": "2021-03-09 09:39:24 -0700", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_ShoppingList"}, {"oid": "8ee805b229c9373e653376a749274023ef13139b", "committedDate": "2021-03-09 11:54:07 -0500", "message": "Merge pull request #2373 from Windchild292/dev_Windchild_isConventionalInfantry"}, {"oid": "559cb006d560fd2099639e701e37538aded7f3a1", "committedDate": "2021-03-09 12:19:33 -0500", "message": "Merge pull request #2337 from Windchild292/dev_Windchild_ShoppingList"}, {"oid": "2bf37308c59c435acc52e0cf512ce9f74d1adc7e", "committedDate": "2021-03-09 10:26:52 -0700", "message": "Fixing merge conflicts"}, {"oid": "62726bf22f84cafc8872cbdebd5a8edce980e60a", "committedDate": "2021-03-09 10:27:33 -0700", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_CamouflageIcon"}, {"oid": "5082524cc2a32c4a8360cb845951a5e2b94300df", "committedDate": "2021-03-09 11:46:51 -0700", "message": "Fixing merge conflicts"}, {"oid": "c640fe5cc744f25a6fb292dd50220c8ecfe1c986", "committedDate": "2021-03-09 12:27:38 -0700", "message": "Fixing merge conflicts"}, {"oid": "64b151aab1a311e538c895526ba3f807216917c1", "committedDate": "2021-03-11 19:48:54 -0700", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_MissionStatus"}, {"oid": "98253ba4fbbd681dca588b7cb766e8439c19d880", "committedDate": "2021-03-11 19:59:41 -0700", "message": "Applying bugfixes from review"}, {"oid": "8d7d2a8df4596249f133919b569b56249b0068aa", "committedDate": "2021-03-12 14:28:19 -0700", "message": "Improving default contract name and sort"}, {"oid": "c13dedfdb7ce73cfdfe1d464e83765140336736c", "committedDate": "2021-03-12 14:59:22 -0700", "message": "2458: Adding Insufficient Astech warnings for MRMS and adding some more Astech/Medic pool functions"}, {"oid": "d2b11fb805eea82905ab0d8f846ca96bd69124e3", "committedDate": "2021-03-13 09:01:10 -0700", "message": "Fixing merge conflicts"}, {"oid": "902ebb67bf5dbe2e94cc32810992a2d1aa6c321c", "committedDate": "2021-03-13 09:02:31 -0700", "message": "Fixing merge conflicts"}, {"oid": "ec5843cb0d12174c7d5f83419268e5184d2d60f6", "committedDate": "2021-03-13 09:08:04 -0700", "message": "Fixing merge conflicts"}, {"oid": "1e0c0d260af35ecf86a9b8b9519c8cceee2e7028", "committedDate": "2021-03-13 11:47:11 -0700", "message": "Moving the unit market changes into an individual branch that contains some parts of the contract market changes"}, {"oid": "a5382b0386cb0354a4b3c870fdd8fee5e2f5330a", "committedDate": "2021-03-13 22:22:50 -0500", "message": "additional code review changes"}, {"oid": "fe6e045bb8acb2700cc38bd6a25ec62011977264", "committedDate": "2021-03-14 01:21:48 -0500", "message": "merge from upstream"}, {"oid": "48663cfaebb3a6a04f5680e7f755c532bd159779", "committedDate": "2021-03-14 10:58:03 -0600", "message": "Fixing merge conflicts"}, {"oid": "b8ccd096938dcbd22c56b4a93c87c78d770df189", "committedDate": "2021-03-16 10:03:47 -0600", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_AbstractUnitMarket"}, {"oid": "00db4b9f4381f0d6bcaadbbaa197f0be1c80d30b", "committedDate": "2021-03-17 12:29:14 -0400", "message": "Merge pull request #2445 from sixlettervariables/issue-2597-protect-duplicate-name-hash"}, {"oid": "a79e2e08ae5167e26dc37999b749296e47e179b9", "committedDate": "2021-03-17 12:27:27 -0600", "message": "Finishing the Unit Market Dialog"}, {"oid": "9d4975c56dc9ea4c18da5c7b146cfa794453f668", "committedDate": "2021-03-17 12:53:48 -0600", "message": "Swapping to EmptyUnitMarket instead of null"}, {"oid": "795721747293b0a0a0b4a5e12334158e9da303da", "committedDate": "2021-03-17 14:00:33 -0600", "message": "Fixing merge conflicts"}, {"oid": "aac2ced366aa376eb9fa78ab230f38e43d0c8362", "committedDate": "2021-03-17 21:16:52 -0400", "message": "code review changes"}, {"oid": "67d86a55c23420a76995a1457504c22f1b9cc48a", "committedDate": "2021-03-18 10:00:41 -0600", "message": "338: Base Free Time Sort"}, {"oid": "b634beb8d18a3ebafa13e3332256da259e3ef1c1", "committedDate": "2021-03-18 14:35:10 -0600", "message": "Finishing up working on abstracting out the Unit Market"}, {"oid": "8627de7d060ea44d3e33d04c259f8ab05f5bba9f", "committedDate": "2021-03-21 20:29:53 -0400", "message": "merge from upstream"}, {"oid": "04087a9bc33d0e3547e9c2dc68db496eac62b82b", "committedDate": "2021-03-21 20:10:23 -0600", "message": "Fixing merge conflicts"}, {"oid": "093eaeb8fbe362bb2d525d661180c433576aab9b", "committedDate": "2021-03-24 00:26:51 -0400", "message": "merge from upstream"}, {"oid": "2a2559d3ab5da713e7b8864ab0de458849dce6b6", "committedDate": "2021-03-24 09:29:25 -0600", "message": "Swapping over to using a three tiered rank setup"}, {"oid": "1e4e1993ec9f2278c7f326d28bcae5a7bff9c4a0", "committedDate": "2021-03-24 12:05:23 -0600", "message": "Heavy simplification of rank profession code"}, {"oid": "a57000e9696c4bf593f3215fa36543b2d13ed5ea", "committedDate": "2021-03-24 12:30:48 -0600", "message": "2196: Swapping to a standardized display wrapper class for rank display"}, {"oid": "b903aa7de36203afa40ede49922eb9e422fdcf43", "committedDate": "2021-03-24 13:07:46 -0600", "message": "1483: Adding Rank System import/export"}, {"oid": "e5b1d3a3fc6d825d722e496ad49832555fa65754", "committedDate": "2021-03-25 14:08:49 -0400", "message": "units deployed to StratCon tracks are ineligible for repairs"}, {"oid": "e7042962dd815937b9d91c1335d85ccec3647bf7", "committedDate": "2021-03-30 13:26:17 -0400", "message": "Merge pull request #2371 from Windchild292/dev_Windchild_CamouflageIcon"}, {"oid": "091d87a31e8cf5d1061ccf76a256bf990a0a623b", "committedDate": "2021-03-30 11:27:53 -0600", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_2449"}, {"oid": "37144650aef43bd5f3a8a14257376f2d6fe133f8", "committedDate": "2021-03-30 16:21:13 -0400", "message": "merge from upstream"}, {"oid": "5854d37bf8fbd63f741b9601ef373a16253a9b32", "committedDate": "2021-04-04 09:12:14 -0600", "message": "Adding the ability to create a custom rank system"}, {"oid": "db96404f216df48ce5321de053ce56015837d2cd", "committedDate": "2021-04-04 09:43:32 -0600", "message": "Renaming the campaign rank system methods to properly handle rank system changes"}, {"oid": "ae6bdf14123e6ac4ba92f5884b58b533b6cad2d3", "committedDate": "2021-04-04 10:12:54 -0600", "message": "Moving personnel rank changes to their proper location within person"}, {"oid": "19f0f0ce5d069f8f6f4f481cda04cdee3e05402a", "committedDate": "2021-04-04 11:59:18 -0600", "message": "Working on rank import/export"}, {"oid": "a34e385bf50ab28870531fe663d288b7b98b2697", "committedDate": "2021-04-06 10:54:55 -0600", "message": "Fixing and improving validation issues"}, {"oid": "3f3d7b237f61dd118eeb39087eb7fe9de6be03a0", "committedDate": "2021-04-06 11:53:59 -0600", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_GenealogyIdReference"}, {"oid": "80202c7f73397f3bc36193b0f3e2fce444bc4070", "committedDate": "2021-04-06 16:04:51 -0600", "message": "Fixing merge conflicts"}, {"oid": "ab655fb9abe6d2b9be4e20eba7e4c74b4b8e5c22", "committedDate": "2021-04-06 16:20:53 -0600", "message": "Fixing merge conflicts"}, {"oid": "729ef155ccdbaca3a1f23f1e57309d3b973851da", "committedDate": "2021-04-06 16:38:48 -0600", "message": "Fixing merge conflicts"}, {"oid": "a4c29e55f023d3416dd5e3f18a9d2061ab841fa1", "committedDate": "2021-04-06 17:56:58 -0600", "message": "Fixing merge conflicts"}, {"oid": "47bf0ed7fa9b09a4d76b634d900cceac953e17ed", "committedDate": "2021-04-06 19:54:46 -0600", "message": "Fixing merge conflicts"}, {"oid": "c2d264c23786de4ea703861360c3bcb46e79c5ac", "committedDate": "2021-04-07 00:13:59 -0400", "message": "merge from upstream"}, {"oid": "a5d70a5c672e494c7ec8be19e05d642b0259c9c4", "committedDate": "2021-04-07 14:24:17 -0600", "message": "Implementing multiple new procreation options and moving it to work based on a supplied date"}, {"oid": "18e6e46b095f8bbb1c623c60fd3aa177b7fe8682", "committedDate": "2021-04-09 09:22:39 -0600", "message": "Fixing merge conflicts"}, {"oid": "ae01b6e6d0fa55b766f741fa6fb35f727fff344b", "committedDate": "2021-04-12 09:45:59 -0600", "message": "Creating ScenarioStatus Enum and updating how scenarios are gotten"}, {"oid": "133e5865e2ee8dd5900b26dfe5f9aa0459a1a04c", "committedDate": "2021-04-14 11:31:25 -0400", "message": "multiple bugs with ignoring scenarios; ground pirats on air maps"}, {"oid": "3d8916caadfbc4085e509724142f929fc9d7f1d5", "committedDate": "2021-04-16 17:31:08 -0400", "message": "add text resources; remove campaign scenarios after ignoring in stratcon UI"}, {"oid": "2e00ea9a5b972b07d7446e75a06d3d493ac69426", "committedDate": "2021-04-16 21:14:35 -0400", "message": "code review changes"}, {"oid": "becffdc94075004fa3890bb36799389a48105c33", "committedDate": "2021-04-16 23:10:50 -0400", "message": "code review changes; data fix; stop nagging once user hits 'no' once"}, {"oid": "d71320d4f7a9ae41189a6b4651979960cb9dcc0f", "committedDate": "2021-04-20 21:55:21 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_2449"}, {"oid": "39603f48e1d441dd892227bef76e398c95cd4852", "committedDate": "2021-04-20 21:59:13 -0400", "message": "Fixing merge conflicts"}, {"oid": "3f7306636c42a999caf904b8d513f267243def42", "committedDate": "2021-04-20 22:01:54 -0400", "message": "Fixing merge conflicts"}, {"oid": "1c0e5821f637a666ef7632b5d821db62d76f624d", "committedDate": "2021-04-20 22:20:35 -0400", "message": "Fixing merge conflicts"}, {"oid": "9b9545c3b2e6890b9bef97677c61bb175cd5cc89", "committedDate": "2021-04-21 00:39:22 -0400", "message": "allow extra time for maintenance"}, {"oid": "de34b46d2f53c172612ebe5aa1abffe16b249f06", "committedDate": "2021-04-23 10:23:26 -0400", "message": "Bugfixing"}, {"oid": "b82fd9901fd0447da0211522ffc97ccae5c708ac", "committedDate": "2021-04-23 11:36:57 -0400", "message": "Fixing merge conflicts"}, {"oid": "bb7b0c375b9a2fd6baeced3e5e94501eb2e636ed", "committedDate": "2021-04-23 13:03:53 -0400", "message": "Moving into selectors folders"}, {"oid": "1ba164a58381a4be88ec479fee5841c1b8cdcf99", "committedDate": "2021-04-23 13:15:11 -0400", "message": "Making initial faction changes for constructors and ordering"}, {"oid": "fc7a0539b85c7af6a166ed9d779e7b723307b883", "committedDate": "2021-04-23 15:57:04 -0400", "message": "Making RandomOriginOptions, which will allow its use in multiple locations"}, {"oid": "1741bea67582d0555d094cbdd0fa977eec707bcc", "committedDate": "2021-04-24 22:10:27 -0400", "message": "fix scenario date/force resets"}, {"oid": "cebc3d0c231e54580eb29e4756f549b702b9ace1", "committedDate": "2021-04-27 14:41:42 -0400", "message": "Merge pull request #2462 from Windchild292/dev_Windchild_2460"}, {"oid": "b0c3badc393ff67ccba2cbe34623ca496c576782", "committedDate": "2021-04-27 14:42:27 -0400", "message": "Merge pull request #2352 from Windchild292/dev_Windchild_PersonnelRoles"}, {"oid": "138d08410b585fae3ba4af354d18d2b15d5d36c8", "committedDate": "2021-04-27 14:48:43 -0400", "message": "Fixing merge conflicts"}, {"oid": "5f426e90c201a24d339c0322897809938b79db5a", "committedDate": "2021-04-27 15:08:01 -0400", "message": "Fixing merge conflicts"}, {"oid": "7b4772ec38db2aa8d657d0a22ed7868d0c4f6117", "committedDate": "2021-04-27 15:45:52 -0400", "message": "Fixing merge conflicts"}, {"oid": "ce0b3b652feb9205fb4ed8cc3ae599bb5da9a308", "committedDate": "2021-04-27 15:47:48 -0400", "message": "Fixing merge conflicts"}, {"oid": "f7d684241f42639eb35d60508c39dbb00b0d9dbc", "committedDate": "2021-04-28 10:56:49 -0400", "message": "Fixing merge conflicts"}, {"oid": "8dd83b6c46f8f2454ba4d4accfe8176c58e398d7", "committedDate": "2021-04-29 23:22:27 -0400", "message": "Fixing merge conflicts"}, {"oid": "87033ef81af06d5a8c2af9d93a9b9057e49f0fde", "committedDate": "2021-05-01 17:09:56 -0400", "message": "Fixing merge conflicts"}, {"oid": "815f8fa858fdbf707019709a5d51524b5e61472a", "committedDate": "2021-05-04 14:12:54 -0400", "message": "Dependent Flag Swapover"}, {"oid": "66f6a880e1b615fb97de9757be649fc18c10f049", "committedDate": "2021-05-04 19:52:08 -0400", "message": "Implementing auto-hiring pool on new day"}, {"oid": "bbcc984be566d1587a598efc974fb1dbb399868a", "committedDate": "2021-05-05 18:25:22 -0400", "message": "Fixing merge conflicts"}, {"oid": "741d61daa6ac3570f7a3c569ee6e6dc87a902441", "committedDate": "2021-05-08 20:32:38 -0400", "message": "Fixing merge conflicts"}, {"oid": "227d6642ef68511eb067588bdf263aa2ad88f421", "committedDate": "2021-05-09 10:13:42 -0400", "message": "Creating the backend implementation for random procreation modules"}, {"oid": "e0faed52760616365379933d91f9343f58c61cb4", "committedDate": "2021-05-09 14:30:58 -0400", "message": "Renaming the directory from random procreation to procreation"}, {"oid": "7943361f04c7c5cc1753852ddba3a77d8259ab57", "committedDate": "2021-05-11 09:52:44 -0400", "message": "2607: Starting to work on redoing the salvage calculations"}, {"oid": "0539aea6159ca7cfbbb77a035ffb6c51d590d29f", "committedDate": "2021-05-11 10:40:37 -0400", "message": "2607: Properly calculating and paying for payment overages"}, {"oid": "33d43f4fe9a41925e3cc417f5d782c19f097ad63", "committedDate": "2021-05-15 06:53:31 -0400", "message": "Merge pull request #2583 from Windchild292/dev_Windchild_DependentFlagSwapover"}, {"oid": "55da24b03b3ecbc71f7d6ab739e1820f1814fda1", "committedDate": "2021-05-17 13:46:12 -0400", "message": "Creating AtB Contract Type and AtB Morale Level enums"}, {"oid": "470df7bcd395e57ffe3f3e59660f0e468cdcfaf1", "committedDate": "2021-05-18 01:31:38 -0400", "message": "fix multiple issues generating fixed objective scenarios"}, {"oid": "ffcd06cfa996127e858ea60096b58286f97a8a8a", "committedDate": "2021-05-19 09:33:39 -0400", "message": "Implementing save code swapover"}, {"oid": "c03f4deaeb4d632a5e2e614ae5204da255eea805", "committedDate": "2021-05-22 22:01:49 -0400", "message": "Merge pull request #2608 from Windchild292/dev_Windchild_2607"}, {"oid": "f9cf763bd4ff9a8e017e54464ad20989c2e772d3", "committedDate": "2021-05-23 23:33:39 -0400", "message": "Fixing merge conflicts"}, {"oid": "b5b8facc5de91af84188412dc8d1ec3df00e3ae6", "committedDate": "2021-05-24 13:55:12 -0400", "message": "Fixing merge conflicts"}, {"oid": "1b33879affd0101e7870d5696137e354b636d342", "committedDate": "2021-05-24 13:57:36 -0400", "message": "Fixing merge conflicts"}, {"oid": "f4c2aadcbf8a9e3bc45db1e7227160e36f43d47a", "committedDate": "2021-05-24 14:00:22 -0400", "message": "Merge branch 'master' into dev_Windchild_CamouflageRework"}, {"oid": "fe024592b6ac70b9cf1a9cd546a54ebc8bb02363", "committedDate": "2021-05-24 17:16:21 -0400", "message": "2625: Properly Clear Tech Units on Person removal/retirement"}, {"oid": "530decc0b587e53087c8cacbe31aeba13dd82f41", "committedDate": "2021-05-29 11:32:44 -0400", "message": "Fixing merge conflicts"}, {"oid": "156500be4e08594aeaf3efa424938f295b2ed86e", "committedDate": "2021-05-29 16:04:26 -0400", "message": "Phase one of Campaign Preset rework"}, {"oid": "34d76d4e22674638bd3ce602a713238ff5c203b8", "committedDate": "2021-05-30 14:33:28 -0400", "message": "Phase Two: finishing internal work and starting on GUI implementation"}, {"oid": "12f96f2ab3335b805508c31bbbc08a9bcf5491d7", "committedDate": "2021-05-30 21:57:28 -0400", "message": "Fixing merge conflicts"}, {"oid": "b109f86e86e8aba9c5b4aa279919f2d6547979b9", "committedDate": "2021-05-31 10:38:11 -0400", "message": "Fixing merge conflicts"}, {"oid": "65a009b4cf6307795c815aacdb82feb8fba0a01d", "committedDate": "2021-05-31 17:00:21 -0400", "message": "Fixing merge conflicts"}, {"oid": "14d482cda0564e28b6c5ea95e20725e2200f51ff", "committedDate": "2021-05-31 17:57:20 -0400", "message": "Merge branch 'master' into maintenance_extra_time"}, {"oid": "00a30fe49ee531dda71cb88bacc2f56dbe0a5b9e", "committedDate": "2021-05-31 18:05:23 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_2654"}, {"oid": "fa54f8e9f392dc2f02cb5b1b5bc9e8c428a88e61", "committedDate": "2021-06-02 12:29:42 -0400", "message": "Creating a base ignorable nag dialog for MekHQ and implementing it in all current new day nags"}, {"oid": "2509a0841acae929e7340ae5fe4d01f7bf437d40", "committedDate": "2021-06-02 16:20:48 -0400", "message": "Fixing merge conflicts"}, {"oid": "6b416ee90791ecb016edf0ae5b5c0e16ebdd4760", "committedDate": "2021-06-09 16:05:55 -0400", "message": "Fixing merge conflicts"}, {"oid": "d36c47d7aaa8978e4d523b2031d299babd654e2a", "committedDate": "2021-06-09 16:08:35 -0400", "message": "Fixing merge conflicts"}, {"oid": "7fe956938b8b76f05f395b681f8bd5f4bd02d25a", "committedDate": "2021-06-09 21:27:13 -0400", "message": "Fixing merge conflicts"}, {"oid": "055b02a76318d18eed5ad27a93333893cf8b74db", "committedDate": "2021-06-09 22:30:38 -0400", "message": "Fixing merge conflicts"}, {"oid": "e8c2b13279e2b5d226f4de5b350e2d12ff468577", "committedDate": "2021-06-11 00:26:36 -0400", "message": "Fixing merge conflicts"}, {"oid": "d4b45a4c9543d0786feacc4344d364fee2997970", "committedDate": "2021-06-11 12:46:28 -0400", "message": "Fixing merge conflicts"}, {"oid": "2560bdda30482870c73884470b53cb579bcaa47a", "committedDate": "2021-06-14 13:25:17 -0400", "message": "Force icon implementation migration from outdated previous branch"}, {"oid": "6fd836ff4e8a233aa293e2a3fc08cd3316f64b66", "committedDate": "2021-06-14 14:23:04 -0400", "message": "Adding UnitIcon, GM Tools implementation, and baseline for export"}, {"oid": "eaf4453f2f1f40707d9594de5dd6aa83d594b776", "committedDate": "2021-06-14 18:04:32 -0400", "message": "Applying personal code review changes and starting unit icon code"}, {"oid": "e1a7f7166de5f36fa0c44b7151478c944e6a4b89", "committedDate": "2021-06-21 13:16:19 -0400", "message": "Apply overtime to the last chunk worked as well #2679"}, {"oid": "9c62597332ac0ba24004132e537ba0cf049741e3", "committedDate": "2021-07-01 12:35:33 -0400", "message": "Fixing merge conflicts"}, {"oid": "809c6366e1ce1dea3f4b2fa21841aab6639992a4", "committedDate": "2021-07-10 11:47:52 -0400", "message": "Finishing the portrait swapover"}, {"oid": "0ddba79849d418947ba1ce309a4c673ac78292d4", "committedDate": "2021-07-10 20:58:49 -0400", "message": "Bugfixing, phase 1"}, {"oid": "10a9609cabffc8f5e7068b6c0c33c0f65f796508", "committedDate": "2021-07-12 18:39:55 -0400", "message": "Fixing unit tests"}, {"oid": "06664ff8286a85fe165e5f92aaaf22326e692c90", "committedDate": "2021-07-15 10:22:09 -0400", "message": "Merge branch 'master' into dev_Windchild_476"}, {"oid": "e0e383e2453514ee7c9c7abc9214a2a1a869a068", "committedDate": "2021-07-15 10:34:25 -0400", "message": "Fixing merge conflicts"}, {"oid": "7211585d4a34159d5c80c9ea30fa44bc2746c1b4", "committedDate": "2021-07-17 20:03:19 -0400", "message": "Fixing a few potential divide by zero issues"}, {"oid": "a3eb7d3dfe3477e32117d175e717023f539795eb", "committedDate": "2021-07-17 20:11:58 -0400", "message": "Further cleanups from personal review"}, {"oid": "21a75e1c9ca5516bb7394f30fa2c0b4d9a68b9ad", "committedDate": "2021-07-17 20:27:51 -0400", "message": "Further cleanups, and adding an astech team size constant"}, {"oid": "35bffb052c1b608df03fb41f6548a3e9f847cca6", "committedDate": "2021-07-18 10:43:10 -0400", "message": "Fixing NPE warning and cleaning up the if statement"}, {"oid": "a7670828c4762e3852dbd248b348c2dd371b5018", "committedDate": "2021-07-18 12:12:40 -0400", "message": "Fixing possible confusion of local and field warnings"}, {"oid": "951b55f7a5fb6036e67897e709cd6a0dbbb45b39", "committedDate": "2021-07-18 12:33:08 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_Procreation"}, {"oid": "61cc2fd1669914bef276e018cb7562be422b1f7c", "committedDate": "2021-07-18 14:30:17 -0400", "message": "Removing Deprecated Usages: Logger swapover"}, {"oid": "542307adf490f10930d9470ff64879b4b7ee6b0a", "committedDate": "2021-07-20 10:11:31 -0400", "message": "Moving crew null check and fallback logic into Campaign::getShorthandedModForCrews"}, {"oid": "f6e661dba426e63388e9b57d224a7090006e3203", "committedDate": "2021-07-20 10:18:55 -0400", "message": "Merge pull request #2751 from Windchild292/dev_Windchild_AstechDivideByZero"}, {"oid": "f3bd90fefb0af89a7177be76f70aeed033a7b258", "committedDate": "2021-07-20 10:20:25 -0400", "message": "Fixing merge conflicts"}, {"oid": "424407a51980930adead83bbfa918bf2b0d8a441", "committedDate": "2021-07-20 21:09:32 -0400", "message": "Fixing merge conflicts"}, {"oid": "497f1345950b39b1eb1e2d1389b63a7fcd5eef14", "committedDate": "2021-07-20 21:26:53 -0400", "message": "Fixing merge conflicts"}, {"oid": "bc21146f53fc23bdfd1f5f4273f07b588b0904e2", "committedDate": "2021-07-24 10:15:39 -0400", "message": "Fixing merge conflicts"}, {"oid": "a5e9303ebeafcd74e0348b8b2f767c5f8e12c8cb", "committedDate": "2021-07-26 12:32:33 -0400", "message": "2558: Swapping removePerson to be object instead of id based"}, {"oid": "0a76a9693556237907de0f6e2a5a08f48dcfd3be", "committedDate": "2021-07-26 12:38:50 -0400", "message": "2558: Custom message for when dependants leave"}, {"oid": "1babc7de6f9de3b1f517061f1c249c3339f13e10", "committedDate": "2021-07-26 12:54:49 -0400", "message": "2558: Adding unique dependent add message"}, {"oid": "b214bdb7975aabd1cdc8d39cb9f1fdea3541b58d", "committedDate": "2021-07-26 15:13:02 -0400", "message": "Fixing merge conflicts"}, {"oid": "d86c1c8c70ae0bcc2a9d6dd09e7fe963745b5e37", "committedDate": "2021-07-26 22:20:42 -0400", "message": "Merge pull request #2478 from Windchild292/dev_Windchild_AbstractUnitMarket"}, {"oid": "d83ce12b4886460ba57e84afbf15b20e30fab693", "committedDate": "2021-07-28 15:48:34 -0400", "message": "Isolating RATs into the RAT Tab"}, {"oid": "3d303b442ab8d664c56fd8709d970f86c7eed83f", "committedDate": "2021-07-30 10:40:29 -0400", "message": "Loan code cleanup and refactoring"}, {"oid": "56910a666af8115ec4e364b98a16fc009c1a65b5", "committedDate": "2021-07-30 11:11:21 -0400", "message": "Fixing merge conflicts"}, {"oid": "ec7e4bc4aeed27a5b835b44d295642228bcc16c3", "committedDate": "2021-08-10 12:37:47 -0400", "message": "Transaction Type Enum"}, {"oid": "497976540984392426f984acd40477886555e06d", "committedDate": "2021-08-10 15:25:55 -0400", "message": "Fixing merge conflicts"}, {"oid": "1faa42c3d120f62fa60bebc946c56cae3ba293f8", "committedDate": "2021-08-10 15:47:16 -0400", "message": "Doing some personal review cleanup"}, {"oid": "be94a7ab35307e2b345d967cbd0163417ea9802d", "committedDate": "2021-08-12 21:28:51 -0400", "message": "bulletproofing for a couple of individual unit actions"}, {"oid": "01f8aa5c3d90cd2d8b553c5c8c73a336af524e8b", "committedDate": "2021-08-13 22:07:09 -0400", "message": "2798: Adding total XP earnings tracking"}, {"oid": "771c3107183e31fa9da9b2e417a6fc0d0b673a48", "committedDate": "2021-08-14 00:07:09 -0400", "message": "274: Moving Era definitions to a file"}, {"oid": "795d3aba4875a600dd0a6ec91a10cb7e90814c6c", "committedDate": "2021-08-18 12:48:20 -0400", "message": "Removing Person's Campaign save and switching to full pass-by-reference for Campaign"}, {"oid": "4e80bdad1f20ebfb53cfe559ade8975594f3d362", "committedDate": "2021-08-21 12:12:11 -0400", "message": "2754: Properly clearing Narc and iNarc Flags during scenario resolution"}, {"oid": "ed447da30212105694957e35687f1bfedd6b56b0", "committedDate": "2021-08-24 13:11:20 -0400", "message": "Merge pull request #2805 from Windchild292/dev_Windchild_274"}, {"oid": "7120d3b0aa69ebd282e855a4b2a47bda4697ba78", "committedDate": "2021-08-24 13:14:09 -0400", "message": "Merge pull request #2793 from Windchild292/dev_Windchild_TransactionType"}, {"oid": "9e7480b600f9290c00f5f082dd91201999d12f42", "committedDate": "2021-08-24 13:14:19 -0400", "message": "Merge pull request #2804 from Windchild292/dev_Windchild_2798"}, {"oid": "70aa4b94439c59d6e5de9d6191a3c0a02365e644", "committedDate": "2021-08-24 13:39:42 -0400", "message": "Fixing merge conflicts"}, {"oid": "0e72a8bc212f26b8d9b7bb789b0c1f84f1426c78", "committedDate": "2021-08-24 13:42:42 -0400", "message": "Fixing merge conflicts"}, {"oid": "3a01897bb20c8be27823164f09aca9af1aa3360d", "committedDate": "2021-08-24 13:53:59 -0400", "message": "Fixing merge conflicts"}, {"oid": "bacc8f3e733e0cd4cc0fa629ced5d3b5079abc76", "committedDate": "2021-08-24 17:23:41 -0400", "message": "Fixing merge conflicts"}, {"oid": "e273d7035001140a977ebe3299d17602ef52d498", "committedDate": "2021-08-28 17:37:23 -0400", "message": "Fixing merge conflicts"}, {"oid": "59fca0be576b219f25123793a2118255168d1c03", "committedDate": "2021-08-29 11:15:40 -0400", "message": "Modularized Marriage"}, {"oid": "6a48665a09b5cfd3b2309975077163fae687c39e", "committedDate": "2021-08-29 14:41:32 -0400", "message": "Adding creation dialog and bugfixing"}, {"oid": "0a89d7421946ba75d7d926af996b27e9e994a911", "committedDate": "2021-08-31 14:50:25 -0400", "message": "Fixing merge conflicts"}, {"oid": "0f4e17188d8360baf639cbc66dd29da85336be81", "committedDate": "2021-08-31 15:28:05 -0400", "message": "Applying changes from personal review"}, {"oid": "bd9dded105bfbfdf64e7b10e2059f2633326c113", "committedDate": "2021-08-31 15:39:04 -0400", "message": "Swapping to weighted double map"}, {"oid": "5eaf88579bd60bfee3c39a936a9d647a4eb1de4f", "committedDate": "2021-08-31 16:45:21 -0400", "message": "Reworking to use random origin options instead of the internally stored values"}, {"oid": "bbccfa2dcef0be4fbb07cd3af6cdbd15d7ced036", "committedDate": "2021-08-31 18:09:33 -0400", "message": "Missed two cases"}, {"oid": "7acc107b13f019250d4c17ee0b034a3aa263f56b", "committedDate": "2021-09-22 13:23:13 -0400", "message": "Removing MekHQ's version by swapping to a standardized suite version"}, {"oid": "f0a07bfbd15d93ff86dda49a32e0c489ca590a8c", "committedDate": "2021-09-22 17:45:34 -0400", "message": "Fixing merge conflicts"}, {"oid": "673baa71af916391d268ede436174881a85b7340", "committedDate": "2021-09-23 20:01:05 -0400", "message": "Adding the ability to automatically have the Operational Status indicator be determined on a new day"}, {"oid": "18f49cd8c6ba3721e84dce0b606a346b242cb49c", "committedDate": "2021-09-25 10:56:33 -0400", "message": "Moving training XP assignment to AtB new day processing"}, {"oid": "932423c6da7f04b29d61df88c014f5e432356eae", "committedDate": "2021-09-25 17:10:11 -0400", "message": "Standardizing and simplifying Campaign::getTargetForAcquisitioncalls"}, {"oid": "29c1cae15f03b025f7c6f4a4acdee0a86082eae8", "committedDate": "2021-09-25 17:12:00 -0400", "message": "2567: AtB Part Procurement uses proper campaign option"}, {"oid": "e1c6be34a128676429850de67af7a3c3e1d31c48", "committedDate": "2021-09-25 17:47:32 -0400", "message": "Fixing the active checks and removing the AtB casts"}, {"oid": "0527903721699cf7e73e7000ebc0db049c96529d", "committedDate": "2021-09-25 17:48:18 -0400", "message": "Removing testing logging"}, {"oid": "6dc414e21f3f3a8bf95c7059b83c0c34ced93e61", "committedDate": "2021-09-28 22:10:41 -0400", "message": "Merge pull request #2888 from Windchild292/dev_Windchild_2567"}, {"oid": "1065b3bc8de9084f48208d2ca865ce58ac8b3c41", "committedDate": "2021-09-28 22:29:59 -0400", "message": "Fixing merge conflicts"}, {"oid": "e55c3ca107c0d4a68d05b67ffa95825ee33af974", "committedDate": "2021-09-28 22:33:50 -0400", "message": "Fixing merge conflicts"}, {"oid": "6e5bfd3fe778c2db9847358b2bde358a61106707", "committedDate": "2021-09-28 22:38:51 -0400", "message": "Fixing merge conflicts"}, {"oid": "4fdc8e401f17fac7995037b1852f1ce2353c8e3f", "committedDate": "2021-09-28 22:48:35 -0400", "message": "Fixing merge conflicts"}, {"oid": "6f6fbddc710af1a588c433c779edd75f638a3c9d", "committedDate": "2021-10-01 10:01:00 -0400", "message": "Merge pull request #2880 from Windchild292/dev_Windchild_Version"}, {"oid": "901e499a75807e3ed64c36d0fcb8e1b024787c95", "committedDate": "2021-10-01 22:06:56 -0400", "message": "Fixing merge conflicts"}, {"oid": "b69522079e9a04b394864bbc4e43ff4c4e125cca", "committedDate": "2021-10-01 22:17:46 -0400", "message": "Fixing merge conflicts"}, {"oid": "84837c3610f8109aeb1985357178de229560de80", "committedDate": "2021-10-01 22:50:02 -0400", "message": "Fixing merge conflicts"}, {"oid": "4971437339838aa89b83785c6e9572074c95d245", "committedDate": "2021-10-02 23:21:37 -0400", "message": "Fixing merge conflicts"}, {"oid": "ed006b48eaf1c0580c2480f4f0000a3c1aed8361", "committedDate": "2021-10-10 00:10:05 -0400", "message": "Adding prisoner and clanner options for procreation"}, {"oid": "54e588d2cafddcab2f585c8ed5d6ee3c829d155f", "committedDate": "2021-10-10 01:00:00 -0400", "message": "Fixing merge conflicts"}, {"oid": "f211d8a677daa66c3a88f444de02a072ea5ab8a0", "committedDate": "2021-10-11 09:36:37 -0400", "message": "Fixing merge conflicts"}, {"oid": "3ee602c2e85defa1c3b05d08d609340d4b194883", "committedDate": "2021-10-11 09:37:52 -0400", "message": "Merge branch 'master' into dev_Windchild_2654"}, {"oid": "a30ac65fc45c76f1c1f6df0d70fa356aa41ef438", "committedDate": "2021-10-11 09:38:33 -0400", "message": "Merge branch 'master' into dev_Windchild_PersonnelRandomization"}, {"oid": "6f2f688a386d187426b7c92d4dd391c239d1ad70", "committedDate": "2021-10-11 09:43:54 -0400", "message": "Fixing merge conflicts"}, {"oid": "125e3093d92e248b4e50bc9131ff8fdeb35c6787", "committedDate": "2021-10-11 10:22:27 -0400", "message": "Fixing merge conflicts"}, {"oid": "f8e040a424e1e8d8f886b334ce6fe78c1c697e21", "committedDate": "2021-10-11 12:17:56 -0400", "message": "Standardizing canMarry and adding clanner/prisoner options"}, {"oid": "358b2e9bb76ee69f0aef232dc656af54a6b78e75", "committedDate": "2021-10-11 16:26:24 -0400", "message": "Creating a divorce module, with a daily percentage-based random divorce setup"}, {"oid": "8ecba07dd7693346338cbae98b207e87e1cfb844", "committedDate": "2021-10-14 20:08:46 -0400", "message": "Fixing merge conflicts"}, {"oid": "accf7255b1c83499aa1f79f5074b2bc44e3619f8", "committedDate": "2021-10-17 18:16:46 -0400", "message": "Fixing merge conflicts"}, {"oid": "4e4ae81eb8a7a923cdf8688c645023ce047c7d99", "committedDate": "2021-10-17 18:53:40 -0400", "message": "Fixing merge conflicts"}, {"oid": "08ec6ef40e59afa4cba88228bc29dba9745de098", "committedDate": "2021-10-18 15:52:01 -0400", "message": "Fixing merge conflicts"}, {"oid": "c67d7074f17378d88774a553e3fca273bc047705", "committedDate": "2021-10-18 15:52:40 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_PersonCampaign"}, {"oid": "1a7109d4439d3900ff897d0c9ba7091e88960ead", "committedDate": "2021-10-18 16:06:05 -0400", "message": "Fixing merge conflicts"}, {"oid": "2d589706bc9112203a6043adf8d7aed7d0f22301", "committedDate": "2021-10-18 16:07:21 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_ExpandedDeathStatus"}, {"oid": "84e2f57820e6fac4c9604e8fdf4c370849b21914", "committedDate": "2021-10-18 17:26:22 -0400", "message": "Fixing merge conflicts"}, {"oid": "033d776c732e66ad776357bee1afe597f5e77b20", "committedDate": "2021-10-30 15:59:59 -0400", "message": "Fixing merge conflicts"}, {"oid": "4e45f1a0a0bb1a3a900ecde01c8feab5a6e48329", "committedDate": "2021-11-01 17:31:14 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_AtBCompanyGeneration"}, {"oid": "258f3a3b0b352aa70b42b8c2034ebd6ab90d96ca", "committedDate": "2021-11-01 18:20:49 -0400", "message": "Fixing merge conflicts"}, {"oid": "7eea9a399d3d7400b1f2b94f6d772ad5416a0645", "committedDate": "2021-11-01 21:48:44 -0400", "message": "Fixing merge conflicts"}, {"oid": "3e4bca7cdb006005bd034f9621872250d0e96dbb", "committedDate": "2021-11-01 21:52:24 -0400", "message": "fixing merge conflicts"}, {"oid": "ab6c1c01bfb4498a16c3b9f69c18c4903900de83", "committedDate": "2021-11-01 22:00:44 -0400", "message": "Fixing merge conflicts"}, {"oid": "1b1b0f68f52f9d821ddc10f663a44fe6d72462cd", "committedDate": "2021-11-01 22:03:27 -0400", "message": "Fixing merge conflicts"}, {"oid": "f1ce41fa694124c762338f78fb45a139926db77c", "committedDate": "2021-11-01 22:20:22 -0400", "message": "Fixing merge conflicts"}, {"oid": "01163b1f4fae088ba39a2f1c1145d5653f71b9e8", "committedDate": "2021-11-01 22:22:46 -0400", "message": "Fixing merge conflicts"}, {"oid": "21600c478569436ab215402bbca4bbbeced841a8", "committedDate": "2021-11-03 20:59:54 -0400", "message": "Adding localization to all MekHQ resource maps"}, {"oid": "1a5ba2fa871c8629e951d371c2ee96cc29fa8f93", "committedDate": "2021-11-07 13:49:58 -0500", "message": "Fixing merge conflicts"}, {"oid": "a851f6c71e5a1f825a840c64be2bae6da2a77eaf", "committedDate": "2021-11-07 14:05:08 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_PersonnelRandomization"}, {"oid": "65eb27ddf74244265359db14e66c097eb2299df0", "committedDate": "2021-11-07 14:50:33 -0500", "message": "Fixing merge conflicts"}, {"oid": "1b57359b3037938ef8291d96de3449013c82b9a4", "committedDate": "2021-11-09 09:23:24 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_ForceIconRework"}, {"oid": "7e997be9838621bdc8bbecbcdbc908a7580060ed", "committedDate": "2021-11-12 21:17:13 -0500", "message": "Removing unused tech functionality"}, {"oid": "dbfb302ab8e895c2e37a41f10415f634d1039c4c", "committedDate": "2021-11-21 18:45:43 -0500", "message": "Expanding Finances newDay"}, {"oid": "b6ffe21c8b07b35f599a2f6bd11da05d7961af0d", "committedDate": "2021-11-23 10:10:34 -0500", "message": "Merge pull request #2028 from Windchild292/dev_Windchild_476"}, {"oid": "e51f331c5e7b430e3f560fee9ad58995fb944704", "committedDate": "2021-11-23 17:35:05 -0500", "message": "2962: AtB Campaigns Now Properly Load with Automatic or Tech Acquisition Skills"}, {"oid": "2f445541d15fd465279057131bf48ef28d9bd162", "committedDate": "2021-11-23 18:55:05 -0500", "message": "Fixing merge conflicts"}, {"oid": "c06560e49182859791bab98148ba76507f26612b", "committedDate": "2021-11-27 14:04:02 -0500", "message": "Merge pull request #2966 from Windchild292/dev_Windchild_2962"}, {"oid": "69f79e10f44976d90e36ca3acb5256b6dfc91548", "committedDate": "2021-11-27 18:49:28 -0500", "message": "Implementing the retirement and dependent stopgap options and option updates"}, {"oid": "135cb6d188296ed5db33602f9d65eacbedfb2fa3", "committedDate": "2021-11-27 22:07:45 -0500", "message": "Finishing dependent options and starting on retirement setup"}, {"oid": "a831b4695fd5ea8b1679db9068c85d9ac235f5e0", "committedDate": "2021-11-27 22:57:22 -0500", "message": "Starting to implement the new options"}, {"oid": "bfaed6eccd3257e67b05ad33dadd14cfd98ce560", "committedDate": "2021-12-02 18:05:59 -0500", "message": "Fixing merge conflicts"}, {"oid": "a31998dda25a2856241c10aba4f25a3e8975fc28", "committedDate": "2021-12-02 19:47:30 -0500", "message": "Fixing merge conflicts"}, {"oid": "8ae7fffc1b4afde219beaf122edf562b69a810d4", "committedDate": "2021-12-02 19:49:14 -0500", "message": "Fixing merge conflicts"}, {"oid": "c76c94e6cd4abe6e9f39bb57f5376dcfcf8c29ca", "committedDate": "2021-12-02 19:59:15 -0500", "message": "Fixing merge conflicts"}, {"oid": "8ad7114a3a34794b2d77e3d201f63d2c646a9361", "committedDate": "2021-12-04 14:45:10 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_RetirementDependentStopgaps"}, {"oid": "71c75c8296ecc0c857b75d51ff1c7984efa7e9aa", "committedDate": "2021-12-04 15:03:37 -0500", "message": "Finishing the internal code for the retirement and dependent stopgaps"}, {"oid": "4fb12af6ec7c26ac06d9a498016211a5e3889240", "committedDate": "2021-12-04 15:13:25 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_AssetTerms"}, {"oid": "ea8d42d1c280d499d207c0da43feb77a06b6dcba", "committedDate": "2021-12-04 16:10:22 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_MHQLocalization"}, {"oid": "97af694c5485ad1dbf5900228d3b5e6de405cb02", "committedDate": "2021-12-11 17:07:11 -0500", "message": "MekHQ Log4j 2 Implementation"}, {"oid": "122363fd9f8d850c11781b0ed50335433bcf418b", "committedDate": "2021-12-17 20:08:30 -0500", "message": "Fixing merge conflicts"}, {"oid": "b781d1a8406d5cfec346343463484ac519d1ee9a", "committedDate": "2021-12-20 13:20:34 -0500", "message": "Fixing merge conflicts"}, {"oid": "1bc3ac4e6576a7fa06103828a729d010f6a7b3ef", "committedDate": "2021-12-20 15:37:16 -0500", "message": "Actually print the stacktrace for individual exceptions"}, {"oid": "6e868f9400798d8cc8b61055b96de07531af1f34", "committedDate": "2021-12-20 16:21:24 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_RetirementDependentStopgaps"}, {"oid": "056f0d1e618651857b043280dbe226e80eb91d7a", "committedDate": "2021-12-20 16:27:18 -0500", "message": "Fixing merge conflicts"}, {"oid": "0e5e7675cc3b0606c97f5060a8fd53a69a90641e", "committedDate": "2021-12-20 16:31:40 -0500", "message": "Fixing merge conflicts"}, {"oid": "fb5e5a836a6100119706df72ee695325d77cf5af", "committedDate": "2021-12-20 16:36:02 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_PersonnelRandomization"}, {"oid": "30d7086d1389ed93b333b5eb614a4777498bd826", "committedDate": "2021-12-20 16:41:54 -0500", "message": "Fixing merge conflicts"}, {"oid": "c28b63e7005b99a3f80a9cb73b0255b8a2402db2", "committedDate": "2021-12-20 16:45:19 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_PersonCampaign"}, {"oid": "89a7c65022eabe2af8f5efaabaf9296aa79bde74", "committedDate": "2021-12-21 15:01:54 -0500", "message": "Fixing merge conflicts"}, {"oid": "23519608cf466cb86aef259568ba2aa8ddeb098a", "committedDate": "2021-12-21 16:00:33 -0500", "message": "Fixing merge conflicts"}, {"oid": "bbbe2057261145f9f51c2ac129b4cca3bcd2ccf6", "committedDate": "2021-12-21 16:04:48 -0500", "message": "Fixing merge conflicts"}, {"oid": "b65b9f1efdb52692da51596d934b6360533b2bf7", "committedDate": "2021-12-21 16:23:03 -0500", "message": "Fixing merge conflicts"}, {"oid": "a253bfba5d4bc811ccd0c6c17e659dff178fbbb0", "committedDate": "2021-12-21 16:30:49 -0500", "message": "Fixing merge conflicts"}, {"oid": "0caff4e79e691213a2621323b94dfadfa73c9060", "committedDate": "2021-12-22 08:16:56 -0500", "message": "Fixing merge conflicts"}, {"oid": "a44cee38dbe9808a000178e575eb90d60a401175", "committedDate": "2021-12-23 12:26:57 -0500", "message": "Merge pull request #3015 from MegaMek/dev_Windchild_3326"}, {"oid": "ea6a179e03d1519afc3236abe50978edc43fc3d8", "committedDate": "2021-12-23 12:32:38 -0500", "message": "Merge pull request #2812 from Windchild292/dev_Windchild_PersonCampaign"}, {"oid": "d88588cf01f272577d96e1ff2a27c7286def7db9", "committedDate": "2021-12-23 21:04:47 -0500", "message": "Fixing merge conflicts"}, {"oid": "94ca7dff3bd09ef2fbb82e5d3ce0a5dccab335a8", "committedDate": "2021-12-28 18:08:30 -0500", "message": "Fixing merge conflicts"}, {"oid": "5089ba272b3ca25ab52ca4fcc1bef3766377f2ec", "committedDate": "2022-01-08 13:22:56 -0500", "message": "Fixing merge conflicts"}, {"oid": "375a9524c6382f5214c980bf8ad8b07a22f75120", "committedDate": "2022-01-08 13:28:11 -0500", "message": "Fixing merge conflicts"}, {"oid": "0e0aa7780df25016999f813dc36110599ee1b380", "committedDate": "2022-01-08 13:40:54 -0500", "message": "Fixing merge conflicts, round 2"}, {"oid": "5cc8ac688c67e1e1817c0cbb4a78eaf7dd0a477b", "committedDate": "2022-01-08 14:03:23 -0500", "message": "Fixing merge conflicts"}, {"oid": "eb7c6c828694fb624746168dbb4c35b1289f6e11", "committedDate": "2022-01-08 17:22:10 -0500", "message": "Fixing merge conflicts"}, {"oid": "dcb18ce61944010cc634325d3f46ccaf907758be", "committedDate": "2022-01-08 18:01:56 -0500", "message": "Cleaning up a bit of person creation"}, {"oid": "4d86865e1498a1312a21b91323c33d18f33a8dc9", "committedDate": "2022-01-09 11:12:58 -0500", "message": "Adding missing nullable tag and fixing missing null handling for faction selector"}, {"oid": "6023dd377efcb7802f6c905de61231ec50fee675", "committedDate": "2022-01-09 11:48:57 -0500", "message": "Missed that a null faction is fine for planet generation"}, {"oid": "4bddfb6f0d3906ed96120594d84d4e476e42d971", "committedDate": "2022-01-19 17:09:56 -0500", "message": "Tearing out MekHQ/src/mekhq/MekHqXmlSerializable.java"}, {"oid": "cc823a078ddc1a8924d1e2c02e93375a6b27d327", "committedDate": "2022-01-19 19:19:33 -0500", "message": "Removing all serialVersionUID uses in MekHQ"}, {"oid": "c9ac45226f5852f8bb76af479c9d962105bbbed7", "committedDate": "2022-01-19 20:02:33 -0500", "message": "Mass spacing fixes"}, {"oid": "be1cfbd484c6adc1c8f66578c5bfe94b39047b3c", "committedDate": "2022-01-20 09:59:55 -0500", "message": "Applying changes from initial personal review"}, {"oid": "2c71e119c210a9c95690eae19a0cdab5beb69bd6", "committedDate": "2022-01-20 10:30:23 -0500", "message": "Updating everything using final PrintWriter so that they're up to date, so I have a nice way to track what's updated and what is not"}, {"oid": "bc2c2966614f17d153b03c3087b46c1a4b44b969", "committedDate": "2022-01-21 19:03:24 -0500", "message": "SuiteOptions: Naming standardization and finishing initial setup"}, {"oid": "f3b9f5b924748acfd1ad404aed3ae99e4382b885", "committedDate": "2022-01-24 12:24:25 -0500", "message": "Fixing merge conflicts"}, {"oid": "e8395d1d642870050d705d4fac2a0df255cea722", "committedDate": "2022-01-24 12:28:09 -0500", "message": "Fixing merge conflicts"}, {"oid": "d91ac31cb62f0842eb972ad045bdab45c9c3f814", "committedDate": "2022-01-25 17:42:20 -0500", "message": "PIND Migration"}, {"oid": "9fac7b8c6dfc3095299a8f2b2698099818ff5f0a", "committedDate": "2022-01-26 20:37:16 -0500", "message": "Fixing merge conflicts"}, {"oid": "68ef07dd4c65a1c3d546c2da6f01575f3f3c3ad6", "committedDate": "2022-01-26 20:47:30 -0500", "message": "Fixing merge conflicts"}, {"oid": "4d88d0c53f0069b883caece02ec49678aeeeef7e", "committedDate": "2022-02-01 14:20:52 -0500", "message": "Fixing merge conflicts"}, {"oid": "add1e0e345d4bfcfbff554d48b42166703dc9742", "committedDate": "2022-02-03 13:52:45 -0500", "message": "Fixing merge conflicts"}, {"oid": "01633b8cfb55eee9c3240bff79e0122fbc54386b", "committedDate": "2022-02-13 13:10:41 -0500", "message": "Fixing MHQ's Javadoc Build"}, {"oid": "adeb4ea20e6a8eeb365e6887e79ce6a4dd8b18dd", "committedDate": "2022-02-22 19:16:53 -0500", "message": "Initial code for creating standardized code utilities"}, {"oid": "483ec96cd157a857a1e7155be64dc5ef7c72346a", "committedDate": "2022-02-24 20:32:12 -0500", "message": "Migrating a bunch of MHQ utility code to MM"}, {"oid": "88ce57b5171b2d38c738446af4ab779e6d17ae7f", "committedDate": "2022-02-28 20:23:04 -0500", "message": "3146: Properly handling null force to null force reassignment messages"}, {"oid": "c94fc298803b71e6ac75eb935cabba921a8a6571", "committedDate": "2022-03-06 11:49:08 -0500", "message": "Fixing merge conflicts"}, {"oid": "d4b96fd69deddff97744565c43e2d56b8e31c53f", "committedDate": "2022-03-07 17:19:54 -0500", "message": "Fixing two accidentally kept negations for Random Dependents Removal"}, {"oid": "48f8d58a75de4c6a5c2868f65554dad4d3a14fd5", "committedDate": "2022-03-09 10:01:16 -0500", "message": "Merge pull request #3148 from Windchild292/dev_Windchild_3146"}, {"oid": "1c307bc93de3a536ba17dd566a9fd49bd0046c8e", "committedDate": "2022-03-21 18:22:40 -0400", "message": "Fixing a bunch of spacing readability issues"}, {"oid": "913c01672fe040a25b473e8142805d2ff4ebfa1b", "committedDate": "2022-03-22 18:24:32 -0400", "message": "Modernizing Lambdas to Method References"}, {"oid": "cc400b9fa7512b6b91ed8a8f434f365b442306a8", "committedDate": "2022-03-22 23:54:28 -0400", "message": "Modernize List::size to List::isEmpty and String::isEmpty to String::isBlank"}, {"oid": "4699f3e482938fb8c322f1daf1bc3b42d78c2a64", "committedDate": "2022-03-28 22:35:03 -0400", "message": "Fixing unused imports"}, {"oid": "494b38fcedcda31bef2e6f701152a47ce1b0e397", "committedDate": "2022-04-11 00:16:20 -0400", "message": "Issue #3196: Fixing Remove Unit NPE"}, {"oid": "4e863ffcf0393e88ebb25b76dd314d994b2cfad5", "committedDate": "2022-04-12 17:18:21 -0400", "message": "Death Module: Initial Commit For the New Setup"}, {"oid": "2e8d0c32fa5c09c862fb6c5625a58d206b70ba34", "committedDate": "2022-04-12 18:20:50 -0400", "message": "Cleaning up and modernizing the death code"}, {"oid": "be00026349d450b7f2fb262f11d161ca249c5ab5", "committedDate": "2022-04-17 21:14:46 -0400", "message": "Standardizing Personnel Flags into their own setup instead of multiple previous setups"}, {"oid": "114c9ef6cbeb045e3cc88716964526ee70372408", "committedDate": "2022-05-04 10:10:43 -0400", "message": "3260: Clear Makeshift Clubs Upon Return To MekHQ"}, {"oid": "e0f4dd9d34946716a517c0b42401b33740c51f30", "committedDate": "2022-05-06 19:58:04 -0400", "message": "Renaming the civilian role check to isCivilian, and adding missing logging for a civilian error"}, {"oid": "5b35da02f167e0d577e779b21dfd3cbd2110f92b", "committedDate": "2022-05-06 22:48:48 -0400", "message": "Merge pull request #3266 from Windchild292/dev_Windchild_RetirementDependentOrNoneLogging"}, {"oid": "c6db6046da0de4e7d40d7ac930a453d2805f6a92", "committedDate": "2022-05-10 18:34:57 -0400", "message": "Merge branch 'MegaMek:master' into dev_Windchild_AssetTerms"}, {"oid": "6b720cfa833458c385546a054b762d2745c37ce1", "committedDate": "2022-05-14 10:11:35 -0400", "message": "Fixing method name"}, {"oid": "72a352ee60bdec3467fa07665ed9753cc399b6f9", "committedDate": "2022-05-15 12:41:06 -0400", "message": "Swapping MekHQ to JUnit 5"}, {"oid": "0a2050177f55c5540d898835cfd48e4f976bb4cb", "committedDate": "2022-05-25 16:54:44 -0400", "message": "Modernizing finances XML read and write"}, {"oid": "8b34d18aa825a1416df7b1a8ecb2bb898cea1026", "committedDate": "2022-05-25 18:27:34 -0400", "message": "Renaming MekHqXmlXmlUtil to utilities/MHQXMLUtility"}, {"oid": "3c19a5aba0df7a2035e7a81e61a8b5543cb13a9c", "committedDate": "2022-05-25 18:36:42 -0400", "message": "Fixing merge conflicts"}, {"oid": "4a84ac8700a2d5bf7624dd25d4c77cff34478500", "committedDate": "2022-05-25 23:32:29 -0400", "message": "Merge branch 'master' into dev_Windchild_CurrentLocationXML"}, {"oid": "32aaaac33b8e53a355c373879ee4de9f91747c39", "committedDate": "2022-05-26 07:16:40 -0400", "message": "Merge branch 'master' into dev_Windchild_PersonFlags"}, {"oid": "9472637ad3cb3c27cba2c318c5ccdf022ca56d86", "committedDate": "2022-05-26 08:10:57 -0400", "message": "Fixing merge conflicts"}, {"oid": "f35709d1278c76d1ea7c10485071e0097b1aebf0", "committedDate": "2022-05-26 08:39:19 -0400", "message": "Switching to a single retirement report"}, {"oid": "b40d7b0e6bd9003de8df60cc732b5e195741d8aa", "committedDate": "2022-05-30 16:37:32 -0400", "message": "Merge pull request #3234 from Windchild292/dev_Windchild_PersonFlags"}, {"oid": "f7e43611ee653404079cc2fdced92c083c35362f", "committedDate": "2022-06-01 13:26:16 -0400", "message": "More swaps to using getActualValue"}, {"oid": "76223b1f01db0e020c9069b9c361d7af9f174e6a", "committedDate": "2022-06-01 17:49:36 -0400", "message": "Merge remote-tracking branch 'origin/master' into dev_Windchild_PartPriceApplications"}, {"oid": "e7755fbeddc7d00cc126c3281f4be93685eb83fa", "committedDate": "2022-06-08 20:05:45 -0400", "message": "Ignore End Date for Scenario Assignment to Active Contracts"}, {"oid": "c17408bc1409591bdb76664788c6ad4f55a5d813", "committedDate": "2022-06-18 17:51:05 -0400", "message": "Campaign::getPerson : Adding Nullable Annotation"}, {"oid": "f2abd2addef945880eefcf2a11ccfb5eec610ea3", "committedDate": "2022-06-18 17:59:08 -0400", "message": "Renaming clearGenealogy to clearGenealogyLinks (as that's what it does), and more test progress"}, {"oid": "39ac9b544233876ab9e4a6f914abaf549c76aded", "committedDate": "2022-06-20 22:59:32 -0400", "message": "Bunch of enum cleanups"}, {"oid": "a576a51fb82bbc625198e50a04894cd7749bed1c", "committedDate": "2022-06-21 16:25:02 -0400", "message": "Lots more tests, largely simple ones"}, {"oid": "0f60e6bba5ebdf538b335609e5bfd7817f614393", "committedDate": "2022-06-23 16:17:56 -0400", "message": "3372: Fixing Campaign Loan Report Issues"}, {"oid": "7441a156d93c5a7fb5dab7f9a38a5f87f6321f14", "committedDate": "2022-06-24 22:32:50 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_GenealogyTest"}, {"oid": "f5bb76bdee8f7d7aba18dd83f2d903036ea1f68b", "committedDate": "2022-06-27 13:25:57 -0400", "message": "Merge pull request #3378 from Windchild292/dev_Windchild_3372"}, {"oid": "0948c47088632642d946b7a5eec4eb595a21ac76", "committedDate": "2022-06-29 20:04:53 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_GenealogyTest"}, {"oid": "505318be000041c18ae226d4e1521dc527fc7133", "committedDate": "2022-07-14 17:41:42 -0400", "message": "Adding market enum testing"}, {"oid": "8d3060de0fe1375a8186d41be98a059652a81bed", "committedDate": "2022-07-31 00:15:10 -0400", "message": "add remove stratcon scenario option"}, {"oid": "9d2ebd8a76bc41afdf298da710ad80e1e4b80c0a", "committedDate": "2022-08-02 19:49:23 -0400", "message": "Checking this"}, {"oid": "803755f3d14a7ba3e66bb1e6364d6c4220bac841", "committedDate": "2022-08-03 20:51:52 -0400", "message": "Properly disabling the random tests"}, {"oid": "f79a61c91b06b467d1bbed4dfeaa36f97fd755e3", "committedDate": "2022-08-04 11:12:44 -0400", "message": "Using correct collector"}, {"oid": "4b3952367635a7620bddb96a9e81a7f1a97a2219", "committedDate": "2022-11-15 14:07:43 -0500", "message": "Removing duplicated name generation info from the campaign file"}, {"oid": "5213209bddb612458226cdfa7561a7220f8b3b67", "committedDate": "2022-11-15 15:54:47 -0500", "message": "Fixing deprecated XML utility uses and fixing indentation issues for parts"}, {"oid": "53e7b27c2173373019055e800950173ed7eb20df", "committedDate": "2022-11-15 19:05:53 -0500", "message": "Company Generator: Faction Options"}, {"oid": "230c025b083606834270681ce668a836c76dfc1b", "committedDate": "2022-11-22 16:25:51 -0500", "message": "3489: Adding Small Craft and DropShip Transport Support"}, {"oid": "b5349ccb7e3e9c0345d6685bb9a76a53afed8bdc", "committedDate": "2022-11-26 08:40:31 -0500", "message": "Merge pull request #3510 from MegaMek/dev_Windchild_3489"}, {"oid": "b3f06f70d94e83ed6fad6368cbe5df5d35c20296", "committedDate": "2022-11-26 11:38:42 -0500", "message": "Finishing adding the new option as a selection"}, {"oid": "1cb49fa503593c75f3bee4ebc6cf2574faec13de", "committedDate": "2022-11-26 11:49:33 -0500", "message": "Merge branch 'MegaMek:master' into dev_Windchild_CompanyGeneratorFactionGeneration"}, {"oid": "b47a12937f6b979925f82cb31bb6f2f33cf789e5", "committedDate": "2022-12-05 15:34:26 -0500", "message": "Scenarios are now Scenarios, not Missions"}, {"oid": "b57de2f09b47ffa8da9ab0bd7bba356d1e2e235c", "committedDate": "2022-12-08 23:00:17 -0500", "message": "Merge pull request #3501 from Windchild292/dev_Windchild_DeprecatedXML"}, {"oid": "ade20da3d68431198324cbad4bd7cfcc2fd1ef66", "committedDate": "2022-12-11 23:37:05 -0500", "message": "Merge pull request #3520 from Windchild292/dev_Windchild_ScenariosAreScenarios"}, {"oid": "a6d88033b71b9291e4774a5cbc3e8f577287a523", "committedDate": "2022-12-16 22:33:19 -0500", "message": "Tearing out EncodeControl"}, {"oid": "cec1df762e06d6e3e6c4c437c0d0a25892f44a7d", "committedDate": "2022-12-29 13:15:59 -0500", "message": "Fixing Option Naming Typos"}, {"oid": "e3e1ce62490858d93d695b7e7f8bf17dca068936", "committedDate": "2022-12-29 14:30:54 -0500", "message": "Standardize option naming"}, {"oid": "d385d0bc8fd91a75c631f546272abbff8e07311a", "committedDate": "2022-12-30 13:05:34 -0500", "message": "SkillLevel: Reducing SkillType::getExperienceLevelName calls"}, {"oid": "332b06c4b29e7f809e9cf0cab16a062f65544391", "committedDate": "2023-01-08 20:33:20 -0500", "message": "Yearly Retirement Nag Now Follows Campaign Options"}, {"oid": "62afc895d75aece8a3079267b20eb9e8c3de5cfc", "committedDate": "2023-01-14 16:34:36 -0500", "message": "3558: RATs are Used Outside of AtB"}, {"oid": "0e39c3c4517d5cd46e99546d8e3b3a1cea7cb30b", "committedDate": "2023-01-17 20:12:29 -0500", "message": "Merge branch 'master' into dev_Windchild_CampaignOptionsCleanup"}, {"oid": "da71474de7674e9b213472ce61b254a744c6ae5a", "committedDate": "2023-01-17 20:12:53 -0500", "message": "Merge branch 'MegaMek:master' into dev_Windchild_IsolatedSkillLevelEnumSwapovers"}, {"oid": "a328a1e42771f0c7052a7c9c1b2583134a8534f4", "committedDate": "2023-01-25 22:45:44 -0500", "message": "Campaign Ops Unit Rating: Properly Calculate Personnel Numbers"}, {"oid": "5ad55c0aa2dd0422f1e05d2704860f7674936984", "committedDate": "2023-01-25 23:11:45 -0500", "message": "Applying changes from testing and further rule reading"}, {"oid": "8fc36fbd275ffccf0ed91df60b637a5cc3135a86", "committedDate": "2023-01-29 18:24:48 -0500", "message": "Phenotype Enum: Migrating Uses to Simplification Methods"}, {"oid": "a462c5436ab5bec1a54c2f652f232fdff88f7a42", "committedDate": "2023-01-29 19:28:49 -0500", "message": "Tearing out unused code and swapping to using a map"}, {"oid": "542356e26d4b14d760fa69f33f627ed2b692908b", "committedDate": "2023-02-06 21:17:17 -0500", "message": "Merge pull request #3589 from Windchild292/dev_Windchild_PhenotypeSimplificationMethods"}, {"oid": "2757b555a5a0aa6fdf73322d58173bbee7d22ba5", "committedDate": "2023-02-06 21:25:38 -0500", "message": "Merge pull request #3590 from Windchild292/dev_Windchild_UnusedSPACleanup"}, {"oid": "6784f22a192b7c650bd5be0354bc6946bfec896f", "committedDate": "2023-02-06 21:41:30 -0500", "message": "Merge pull request #3557 from Windchild292/dev_Windchild_YearlyRetirementNag"}, {"oid": "724a8333d072d631c1072fd7ccf2707efe6e2b40", "committedDate": "2023-02-07 20:56:16 -0500", "message": "Fixing merge conflicts"}, {"oid": "e0f16b480db19ce9d36290caa03be8f6be77cace", "committedDate": "2023-02-07 21:43:07 -0500", "message": "Fixing merge conflicts"}, {"oid": "8996781abfef1f08293a06ef53e3af92812a9b5d", "committedDate": "2023-02-07 22:53:45 -0500", "message": "Standardize Mass Repair Mass Salvage naming to MRMS"}, {"oid": "1ccab8e5b040389be54c4730103354fbc0f06406", "committedDate": "2023-02-18 19:25:18 +0000", "message": "3318: Add manual personnel payments that generate Finance debit"}, {"oid": "86649c7c93250458658d765a7e2007134c385c74", "committedDate": "2023-02-25 20:07:13 -0500", "message": "Some related code cleanup"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU2MzU5Nw==", "url": "https://github.com/MegaMek/mekhq/pull/2123#discussion_r500563597", "body": "```suggestion\r\n        return (int) Math.round(getHangar().getUnitsStream()\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return (int)Math.round(getHangar().getUnitsStream()\n          \n          \n            \n                    return (int) Math.round(getHangar().getUnitsStream()", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">return</span> (<span class=\"pl-k\">int</span>)<span class=\"pl-smi\">Math</span><span class=\"pl-k\">.</span>round(getHangar()<span class=\"pl-k\">.</span>getUnitsStream()</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">return</span> (<span class=\"pl-k\">int</span>)<span class=\"x x-first x-last\"> </span><span class=\"pl-smi\">Math</span><span class=\"pl-k\">.</span>round(getHangar()<span class=\"pl-k\">.</span>getUnitsStream()</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "Windchild292", "createdAt": "2020-10-06T20:05:02Z", "path": "MekHQ/src/mekhq/campaign/Campaign.java", "diffHunk": "@@ -7236,117 +7172,88 @@ public void setHealingTimeOptions(int newHeal, int newNaturalHeal) {\n     }\n \n     public int getTotalMechBays() {\n-        double bays = 0;\n-        for (Unit u : getUnits()) {\n-            bays += u.getMechCapacity();\n-        }\n-        return (int)Math.round(bays);\n+        return (int)Math.round(getHangar().getUnitsStream()\n+            .mapToDouble(Unit::getMechCapacity)\n+            .sum());\n     }\n \n     public int getTotalASFBays() {\n-        double bays = 0;\n-        for (Unit u : getUnits()) {\n-            bays += u.getASFCapacity();\n-        }\n-        return (int)Math.round(bays);\n+        return (int)Math.round(getHangar().getUnitsStream()\n+            .mapToDouble(Unit::getASFCapacity)\n+            .sum());\n     }\n \n     public int getTotalSmallCraftBays() {\n-        double bays = 0;\n-        for (Unit u : getUnits()) {\n-            bays += u.getSmallCraftCapacity();\n-        }\n-        return (int)Math.round(bays);\n+        return (int)Math.round(getHangar().getUnitsStream()", "originalCommit": "02cf732d561f245a8a8d39a2b8a819cb45ac94ca", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cb64714e6e2b7d03de487c72eb18c3c09948b6c6", "changed_code": [{"header": "diff --git a/MekHQ/src/mekhq/campaign/Campaign.java b/MekHQ/src/mekhq/campaign/Campaign.java\nindex c9db948ab..4dff77b1d 100644\n--- a/MekHQ/src/mekhq/campaign/Campaign.java\n+++ b/MekHQ/src/mekhq/campaign/Campaign.java\n", "chunk": "@@ -7172,49 +7172,49 @@ public class Campaign implements Serializable, ITechManager {\n     }\n \n     public int getTotalMechBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getMechCapacity)\n             .sum());\n     }\n \n     public int getTotalASFBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getASFCapacity)\n             .sum());\n     }\n \n     public int getTotalSmallCraftBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getSmallCraftCapacity)\n             .sum());\n     }\n \n     public int getTotalBattleArmorBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getBattleArmorCapacity)\n             .sum());\n     }\n \n     public int getTotalInfantryBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getInfantryCapacity)\n             .sum());\n     }\n \n     public int getTotalHeavyVehicleBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getHeavyVehicleCapacity)\n             .sum());\n     }\n \n     public int getTotalLightVehicleBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getLightVehicleCapacity)\n             .sum());\n     }\n \n     public int getTotalProtomechBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getProtomechCapacity)\n             .sum());\n     }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "3f55aabad31fb84ff1e5af9c8caac7bd8c8999a0", "changed_code": [{"header": "diff --git a/MekHQ/src/mekhq/campaign/Campaign.java b/MekHQ/src/mekhq/campaign/Campaign.java\nindex c9db948ab..0f69d5116 100644\n--- a/MekHQ/src/mekhq/campaign/Campaign.java\n+++ b/MekHQ/src/mekhq/campaign/Campaign.java\n", "chunk": "@@ -7172,49 +7161,49 @@ public class Campaign implements Serializable, ITechManager {\n     }\n \n     public int getTotalMechBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getMechCapacity)\n             .sum());\n     }\n \n     public int getTotalASFBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getASFCapacity)\n             .sum());\n     }\n \n     public int getTotalSmallCraftBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getSmallCraftCapacity)\n             .sum());\n     }\n \n     public int getTotalBattleArmorBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getBattleArmorCapacity)\n             .sum());\n     }\n \n     public int getTotalInfantryBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getInfantryCapacity)\n             .sum());\n     }\n \n     public int getTotalHeavyVehicleBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getHeavyVehicleCapacity)\n             .sum());\n     }\n \n     public int getTotalLightVehicleBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getLightVehicleCapacity)\n             .sum());\n     }\n \n     public int getTotalProtomechBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getProtomechCapacity)\n             .sum());\n     }\n", "next_change": {"commit": "a0c1cbf9746ed9486f08ce4aa2376828e846c786", "changed_code": [{"header": "diff --git a/MekHQ/src/mekhq/campaign/Campaign.java b/MekHQ/src/mekhq/campaign/Campaign.java\nindex 0f69d5116..e49c8ce15 100644\n--- a/MekHQ/src/mekhq/campaign/Campaign.java\n+++ b/MekHQ/src/mekhq/campaign/Campaign.java\n", "chunk": "@@ -7152,97 +7101,119 @@ public class Campaign implements Serializable, ITechManager {\n             }\n         }\n     }\n-    /**\n-     * Returns our list of potential transport ships\n-     * @return\n-     */\n-    public Set<UUID> getTransportShips() {\n-        return transportShips;\n-    }\n \n     public int getTotalMechBays() {\n-        return (int) Math.round(getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getMechCapacity)\n-            .sum());\n+        double bays = 0;\n+        for (Unit u : getUnits()) {\n+            bays += u.getMechCapacity();\n+        }\n+        return (int)Math.round(bays);\n     }\n \n     public int getTotalASFBays() {\n-        return (int) Math.round(getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getASFCapacity)\n-            .sum());\n+        double bays = 0;\n+        for (Unit u : getUnits()) {\n+            bays += u.getASFCapacity();\n+        }\n+        return (int)Math.round(bays);\n     }\n \n     public int getTotalSmallCraftBays() {\n-        return (int) Math.round(getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getSmallCraftCapacity)\n-            .sum());\n+        double bays = 0;\n+        for (Unit u : getUnits()) {\n+            bays += u.getSmallCraftCapacity();\n+        }\n+        return (int)Math.round(bays);\n     }\n \n     public int getTotalBattleArmorBays() {\n-        return (int) Math.round(getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getBattleArmorCapacity)\n-            .sum());\n+        double bays = 0;\n+        for (Unit u : getUnits()) {\n+            bays += u.getBattleArmorCapacity();\n+        }\n+        return (int)Math.round(bays);\n     }\n \n     public int getTotalInfantryBays() {\n-        return (int) Math.round(getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getInfantryCapacity)\n-            .sum());\n+        double bays = 0;\n+        for (Unit u : getUnits()) {\n+            bays += u.getInfantryCapacity();\n+        }\n+        return (int)Math.round(bays);\n     }\n \n     public int getTotalHeavyVehicleBays() {\n-        return (int) Math.round(getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getHeavyVehicleCapacity)\n-            .sum());\n+        double bays = 0;\n+        for (Unit u : getUnits()) {\n+            bays += u.getHeavyVehicleCapacity();\n+        }\n+        return (int)Math.round(bays);\n     }\n \n     public int getTotalLightVehicleBays() {\n-        return (int) Math.round(getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getLightVehicleCapacity)\n-            .sum());\n+        double bays = 0;\n+        for (Unit u : getUnits()) {\n+            bays += u.getLightVehicleCapacity();\n+        }\n+        return (int)Math.round(bays);\n     }\n \n     public int getTotalProtomechBays() {\n-        return (int) Math.round(getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getProtomechCapacity)\n-            .sum());\n+        double bays = 0;\n+        for (Unit u : getUnits()) {\n+            bays += u.getProtomechCapacity();\n+        }\n+        return (int)Math.round(bays);\n     }\n \n     public int getTotalDockingCollars() {\n-        return getHangar().getUnitsStream()\n-            .filter(u -> u.getEntity() instanceof Jumpship)\n-            .mapToInt(Unit::getDocks)\n-            .sum();\n+        double collars = 0;\n+        for (Unit u : getUnits()) {\n+            if (u.getEntity() instanceof Jumpship) {\n+                collars += u.getDocks();\n+            }\n+        }\n+        return (int)Math.round(collars);\n     }\n \n     public double getTotalInsulatedCargoCapacity() {\n-        return getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getInsulatedCargoCapacity)\n-            .sum();\n+        double capacity = 0;\n+        for (Unit u : getUnits()) {\n+            capacity += u.getInsulatedCargoCapacity();\n+        }\n+        return capacity;\n     }\n \n     public double getTotalRefrigeratedCargoCapacity() {\n-        return getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getRefrigeratedCargoCapacity)\n-            .sum();\n+        double capacity = 0;\n+        for (Unit u : getUnits()) {\n+            capacity += u.getRefrigeratedCargoCapacity();\n+        }\n+        return capacity;\n     }\n \n     public double getTotalLivestockCargoCapacity() {\n-        return getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getLivestockCargoCapacity)\n-            .sum();\n+        double capacity = 0;\n+        for (Unit u : getUnits()) {\n+            capacity += u.getLivestockCargoCapacity();\n+        }\n+        return capacity;\n     }\n \n     public double getTotalLiquidCargoCapacity() {\n-        return getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getLiquidCargoCapacity)\n-            .sum();\n+        double capacity = 0;\n+        for (Unit u : getUnits()) {\n+            capacity += u.getLiquidCargoCapacity();\n+        }\n+        return capacity;\n     }\n \n     public double getTotalCargoCapacity() {\n-        return getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getCargoCapacity)\n-            .sum();\n+        double capacity = 0;\n+        for (Unit u : getUnits()) {\n+            capacity += u.getCargoCapacity();\n+        }\n+        return capacity;\n     }\n \n     // Liquid not included\n", "next_change": {"commit": "04a16de448a0c7d576a6c3c64c9d23ae08384bae", "changed_code": [{"header": "diff --git a/MekHQ/src/mekhq/campaign/Campaign.java b/MekHQ/src/mekhq/campaign/Campaign.java\nindex e49c8ce15..993f59cfe 100644\n--- a/MekHQ/src/mekhq/campaign/Campaign.java\n+++ b/MekHQ/src/mekhq/campaign/Campaign.java\n", "chunk": "@@ -7101,900 +7157,440 @@ public class Campaign implements Serializable, ITechManager {\n             }\n         }\n     }\n-\n-    public int getTotalMechBays() {\n-        double bays = 0;\n-        for (Unit u : getUnits()) {\n-            bays += u.getMechCapacity();\n-        }\n-        return (int)Math.round(bays);\n+    /**\n+     * Returns our list of potential transport ships\n+     * @return\n+     */\n+    public Set<UUID> getTransportShips() {\n+        return transportShips;\n     }\n \n-    public int getTotalASFBays() {\n-        double bays = 0;\n-        for (Unit u : getUnits()) {\n-            bays += u.getASFCapacity();\n-        }\n-        return (int)Math.round(bays);\n-    }\n+    public String getCombatPersonnelDetails() {\n+        int[] countPersonByType = new int[Person.T_NUM];\n+        int countTotal = 0;\n+        int countInjured = 0;\n+        int countMIA = 0;\n+        int countKIA = 0;\n+        int countDead = 0;\n+        int countRetired = 0;\n+        Money salary = Money.zero();\n \n-    public int getTotalSmallCraftBays() {\n-        double bays = 0;\n-        for (Unit u : getUnits()) {\n-            bays += u.getSmallCraftCapacity();\n-        }\n-        return (int)Math.round(bays);\n-    }\n+        for (Person p : getPersonnel()) {\n+            if (!p.hasPrimaryCombatRole() || !p.getPrisonerStatus().isFree()) {\n+                continue;\n+            }\n \n-    public int getTotalBattleArmorBays() {\n-        double bays = 0;\n-        for (Unit u : getUnits()) {\n-            bays += u.getBattleArmorCapacity();\n+            // Add them to the total count\n+            if (p.getStatus().isActive()) {\n+                countPersonByType[p.getPrimaryRole()]++;\n+                countTotal++;\n+                if (getCampaignOptions().useAdvancedMedical() && p.getInjuries().size() > 0) {\n+                    countInjured++;\n+                } else if (p.getHits() > 0) {\n+                    countInjured++;\n+                }\n+                salary = salary.plus(p.getSalary());\n+            } else if (p.getStatus().isRetired()) {\n+                countRetired++;\n+            } else if (p.getStatus().isMIA()) {\n+                countMIA++;\n+            } else if (p.getStatus().isKIA()) {\n+                countKIA++;\n+                countDead++;\n+            } else if (p.getStatus().isDead()) {\n+                countDead++;\n+            }\n         }\n-        return (int)Math.round(bays);\n-    }\n \n-    public int getTotalInfantryBays() {\n-        double bays = 0;\n-        for (Unit u : getUnits()) {\n-            bays += u.getInfantryCapacity();\n-        }\n-        return (int)Math.round(bays);\n-    }\n+        StringBuilder sb = new StringBuilder(\"Combat Personnel\\n\\n\");\n \n-    public int getTotalHeavyVehicleBays() {\n-        double bays = 0;\n-        for (Unit u : getUnits()) {\n-            bays += u.getHeavyVehicleCapacity();\n-        }\n-        return (int)Math.round(bays);\n-    }\n+        sb.append(String.format(\"%-30s        %4s\\n\", \"Total Combat Personnel\", countTotal));\n \n-    public int getTotalLightVehicleBays() {\n-        double bays = 0;\n-        for (Unit u : getUnits()) {\n-            bays += u.getLightVehicleCapacity();\n+        for (int i = 0; i < Person.T_NUM; i++) {\n+            if (Person.isCombatRole(i)) {\n+                sb.append(String.format(\"    %-30s    %4s\\n\",\n+                        Person.getRoleDesc(i, getFaction().isClan()), countPersonByType[i]));\n+            }\n         }\n-        return (int)Math.round(bays);\n-    }\n \n-    public int getTotalProtomechBays() {\n-        double bays = 0;\n-        for (Unit u : getUnits()) {\n-            bays += u.getProtomechCapacity();\n-        }\n-        return (int)Math.round(bays);\n+        sb.append(\"\\n\")\n+                .append(String.format(\"%-30s        %4s\\n\", \"Injured Combat Personnel\", countInjured))\n+                .append(String.format(\"%-30s        %4s\\n\", \"MIA Combat Personnel\", countMIA))\n+                .append(String.format(\"%-30s        %4s\\n\", \"KIA Combat Personnel\", countKIA))\n+                .append(String.format(\"%-30s        %4s\\n\", \"Retired Combat Personnel\", countRetired))\n+                .append(String.format(\"%-30s        %4s\\n\", \"Dead Combat Personnel\", countDead))\n+                .append(\"\\nMonthly Salary For Combat Personnel: \").append(salary.toAmountAndSymbolString());\n+\n+        return sb.toString();\n     }\n \n-    public int getTotalDockingCollars() {\n-        double collars = 0;\n-        for (Unit u : getUnits()) {\n-            if (u.getEntity() instanceof Jumpship) {\n-                collars += u.getDocks();\n+    public String getSupportPersonnelDetails() {\n+        int[] countPersonByType = new int[Person.T_NUM];\n+        int countTotal = 0;\n+        int countInjured = 0;\n+        int countMIA = 0;\n+        int countKIA = 0;\n+        int countDead = 0;\n+        int countRetired = 0;\n+        Money salary = Money.zero();\n+        int prisoners = 0;\n+        int bondsmen = 0;\n+        int dependents = 0;\n+\n+        for (Person p : getPersonnel()) {\n+            // Add them to the total count\n+            boolean primarySupport = p.hasPrimarySupportRole(false);\n+\n+            if (primarySupport && p.getPrisonerStatus().isFree() && p.getStatus().isActive()) {\n+                countPersonByType[p.getPrimaryRole()]++;\n+                countTotal++;\n+                if (p.getInjuries().size() > 0 || p.getHits() > 0) {\n+                    countInjured++;\n+                }\n+                salary = salary.plus(p.getSalary());\n+            } else if (p.getPrisonerStatus().isPrisoner() && p.getStatus().isActive()) {\n+                prisoners++;\n+                if (p.getInjuries().size() > 0 || p.getHits() > 0) {\n+                    countInjured++;\n+                }\n+            } else if (p.getPrisonerStatus().isBondsman() && p.getStatus().isActive()) {\n+                bondsmen++;\n+                if (p.getInjuries().size() > 0 || p.getHits() > 0) {\n+                    countInjured++;\n+                }\n+            } else if (primarySupport && p.getStatus().isRetired()) {\n+                countRetired++;\n+            } else if (primarySupport && p.getStatus().isMIA()) {\n+                countMIA++;\n+            } else if (primarySupport && p.getStatus().isKIA()) {\n+                countKIA++;\n+                countDead++;\n+            } else if (primarySupport && p.getStatus().isDead()) {\n+                countDead++;\n             }\n-        }\n-        return (int)Math.round(collars);\n-    }\n \n-    public double getTotalInsulatedCargoCapacity() {\n-        double capacity = 0;\n-        for (Unit u : getUnits()) {\n-            capacity += u.getInsulatedCargoCapacity();\n+            if (p.isDependent() && p.getStatus().isActive() && p.getPrisonerStatus().isFree()) {\n+                dependents++;\n+            }\n         }\n-        return capacity;\n-    }\n \n-    public double getTotalRefrigeratedCargoCapacity() {\n-        double capacity = 0;\n-        for (Unit u : getUnits()) {\n-            capacity += u.getRefrigeratedCargoCapacity();\n-        }\n-        return capacity;\n-    }\n+        StringBuilder sb = new StringBuilder(\"Support Personnel\\n\\n\");\n \n-    public double getTotalLivestockCargoCapacity() {\n-        double capacity = 0;\n-        for (Unit u : getUnits()) {\n-            capacity += u.getLivestockCargoCapacity();\n-        }\n-        return capacity;\n-    }\n+        sb.append(String.format(\"%-30s        %4s\\n\", \"Total Support Personnel\", countTotal));\n \n-    public double getTotalLiquidCargoCapacity() {\n-        double capacity = 0;\n-        for (Unit u : getUnits()) {\n-            capacity += u.getLiquidCargoCapacity();\n+        for (int i = 0; i < Person.T_NUM; i++) {\n+            if (Person.isSupportRole(i)) {\n+                sb.append(String.format(\"    %-30s    %4s\\n\",\n+                        Person.getRoleDesc(i, getFaction().isClan()), countPersonByType[i]));\n+            }\n         }\n-        return capacity;\n-    }\n \n-    public double getTotalCargoCapacity() {\n-        double capacity = 0;\n-        for (Unit u : getUnits()) {\n-            capacity += u.getCargoCapacity();\n-        }\n-        return capacity;\n-    }\n-\n-    // Liquid not included\n-    public double getTotalCombinedCargoCapacity() {\n-        return getTotalCargoCapacity() + getTotalLivestockCargoCapacity()\n-                + getTotalInsulatedCargoCapacity() + getTotalRefrigeratedCargoCapacity();\n-    }\n-\n-    public int getNumberOfUnitsByType(long type) {\n-        return getNumberOfUnitsByType(type, false, false);\n-    }\n+        sb.append(\"\\n\")\n+                .append(String.format(\"%-30s        %4s\\n\", \"Injured Support Personnel\", countInjured))\n+                .append(String.format(\"%-30s        %4s\\n\", \"MIA Support Personnel\", countMIA))\n+                .append(String.format(\"%-30s        %4s\\n\", \"KIA Support Personnel\", countKIA))\n+                .append(String.format(\"%-30s        %4s\\n\", \"Retired Support Personnel\", countRetired))\n+                .append(String.format(\"%-30s        %4s\\n\", \"Dead Support Personnel\", countDead))\n+                .append(\"\\nMonthly Salary For Support Personnel: \").append(salary.toAmountAndSymbolString())\n+                .append(String.format(\"\\nYou have \" + dependents + \" %s\", (dependents == 1) ? \"dependent\" : \"dependents\"))\n+                .append(String.format(\"\\nYou have \" + prisoners + \" prisoner%s\", (prisoners == 1) ? \"\" : \"s\"))\n+                .append(String.format(\"\\nYou have \" + bondsmen + \" %s\", (bondsmen == 1) ? \"bondsman\" : \"bondsmen\"));\n \n-    public int getNumberOfUnitsByType(long type, boolean inTransit) {\n-        return getNumberOfUnitsByType(type, inTransit, false);\n+        return sb.toString();\n     }\n \n-    public int getNumberOfUnitsByType(long type, boolean inTransit, boolean lv) {\n-        int num = 0;\n-        for (Unit unit : getUnits()) {\n-            if (!inTransit && !unit.isPresent()) {\n-                continue;\n-            }\n-            if (unit.isMothballed()) {\n-                if (type == Unit.ETYPE_MOTHBALLED) {\n-                    num++;\n-                }\n-                continue;\n-            }\n-            Entity en = unit.getEntity();\n-            if (en instanceof GunEmplacement || en instanceof FighterSquadron || en instanceof Jumpship) {\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_MECH && en instanceof Mech) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_DROPSHIP && en instanceof Dropship) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_SMALL_CRAFT && en instanceof SmallCraft\n-                    && !(en instanceof Dropship)) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_CONV_FIGHTER && en instanceof ConvFighter) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_AERO && en instanceof Aero\n-                    && !(en instanceof SmallCraft || en instanceof ConvFighter)) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_INFANTRY && en instanceof Infantry && !(en instanceof BattleArmor)) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_BATTLEARMOR && en instanceof BattleArmor) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_TANK && en instanceof Tank) {\n-                if ((en.getWeight() <= 50 && lv) || (en.getWeight() > 50 && !lv)) {\n-                    num++;\n-                }\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_PROTOMECH && en instanceof Protomech) {\n-                num++;\n-                continue;\n-            }\n+    public void doMaintenance(Unit u) {\n+        if (!u.requiresMaintenance() || !campaignOptions.checkMaintenance()) {\n+            return;\n         }\n-\n-        return num;\n-    }\n-\n-    public double getCargoTonnage(boolean inTransit) {\n-        return getCargoTonnage(inTransit, false);\n-    }\n-\n-    @SuppressWarnings(\"unused\") // FIXME: This whole method needs re-worked once Dropship Assignments are in\n-    public double getCargoTonnage(boolean inTransit, boolean mothballed) {\n-        double cargoTonnage = 0;\n-        double mothballedTonnage = 0;\n-        int mechs = getNumberOfUnitsByType(Entity.ETYPE_MECH);\n-        int ds = getNumberOfUnitsByType(Entity.ETYPE_DROPSHIP);\n-        int sc = getNumberOfUnitsByType(Entity.ETYPE_SMALL_CRAFT);\n-        int cf = getNumberOfUnitsByType(Entity.ETYPE_CONV_FIGHTER);\n-        int asf = getNumberOfUnitsByType(Entity.ETYPE_AERO);\n-        int inf = getNumberOfUnitsByType(Entity.ETYPE_INFANTRY);\n-        int ba = getNumberOfUnitsByType(Entity.ETYPE_BATTLEARMOR);\n-        int lv = getNumberOfUnitsByType(Entity.ETYPE_TANK, true);\n-        int hv = getNumberOfUnitsByType(Entity.ETYPE_TANK, false);\n-        int protos = getNumberOfUnitsByType(Entity.ETYPE_PROTOMECH);\n-\n-        for (Part part : getSpareParts()) {\n-            if (!inTransit && !part.isPresent()) {\n-                continue;\n-            }\n-            cargoTonnage += (part.getQuantity() * part.getTonnage());\n+        // lets start by checking times\n+        Person tech = u.getTech();\n+        int minutesUsed = u.getMaintenanceTime();\n+        int astechsUsed = getAvailableAstechs(minutesUsed, false);\n+        boolean maintained = ((tech != null) && (tech.getMinutesLeft() >= minutesUsed)\n+                && !tech.isMothballing());\n+        boolean paidMaintenance = true;\n+        if (maintained) {\n+            // use the time\n+            tech.setMinutesLeft(tech.getMinutesLeft() - minutesUsed);\n+            astechPoolMinutes -= astechsUsed * minutesUsed;\n         }\n+        u.incrementDaysSinceMaintenance(maintained, astechsUsed);\n \n-        // place units in bays\n-        // FIXME: This has been temporarily disabled. It really needs dropship assignments done to fix it correctly.\n-        // Remaining units go into cargo\n-        for (Unit unit : getUnits()) {\n-            if (!inTransit && !unit.isPresent()) {\n-                continue;\n-            }\n-            Entity en = unit.getEntity();\n-            if (unit.isMothballed()) {\n-                mothballedTonnage += en.getWeight();\n-                continue;\n-            }\n-            if (en instanceof GunEmplacement || en instanceof FighterSquadron || en instanceof Jumpship) {\n-                continue;\n-            }\n-            // cargoTonnage += en.getWeight();\n-        }\n-        if (mothballed) {\n-            return mothballedTonnage;\n+        int ruggedMultiplier = 1;\n+        if (u.getEntity().hasQuirk(OptionsConstants.QUIRK_POS_RUGGED_1)) {\n+            ruggedMultiplier = 2;\n         }\n-        return cargoTonnage;\n-    }\n \n-    public String getCargoDetails() {\n-        StringBuffer sb = new StringBuffer(\"Cargo\\n\\n\");\n-        double ccc = this.getTotalCombinedCargoCapacity();\n-        double gcc = this.getTotalCargoCapacity();\n-        double icc = this.getTotalInsulatedCargoCapacity();\n-        double lcc = this.getTotalLiquidCargoCapacity();\n-        double scc = this.getTotalLivestockCargoCapacity();\n-        double rcc = this.getTotalRefrigeratedCargoCapacity();\n-        double tonnage = this.getCargoTonnage(false);\n-        double mothballedTonnage = this.getCargoTonnage(false, true);\n-        double mothballedUnits = Math.max(getNumberOfUnitsByType(Unit.ETYPE_MOTHBALLED), 0);\n-        double combined = (tonnage + mothballedTonnage);\n-        double transported = combined > ccc ? ccc : combined;\n-        double overage = combined - transported;\n-\n-        sb.append(String.format(\"%-35s      %6.3f\\n\", \"Total Capacity:\", ccc));\n-        sb.append(String.format(\"%-35s      %6.3f\\n\", \"General Capacity:\", gcc));\n-        sb.append(String.format(\"%-35s      %6.3f\\n\", \"Insulated Capacity:\", icc));\n-        sb.append(String.format(\"%-35s      %6.3f\\n\", \"Liquid Capacity:\", lcc));\n-        sb.append(String.format(\"%-35s      %6.3f\\n\", \"Livestock Capacity:\", scc));\n-        sb.append(String.format(\"%-35s      %6.3f\\n\", \"Refrigerated Capacity:\", rcc));\n-        sb.append(String.format(\"%-35s      %6.3f\\n\", \"Cargo Transported:\", tonnage));\n-        sb.append(String.format(\"%-35s      %4s (%1.0f)\\n\", \"Mothballed Units as Cargo (Tons):\", mothballedUnits, mothballedTonnage));\n-        sb.append(String.format(\"%-35s      %6.3f/%1.3f\\n\", \"Transported/Capacity:\", transported, ccc));\n-        sb.append(String.format(\"%-35s      %6.3f\\n\", \"Overage Not Transported:\", overage));\n+        if (u.getEntity().hasQuirk(OptionsConstants.QUIRK_POS_RUGGED_2)) {\n+            ruggedMultiplier = 3;\n+        }\n \n-        return new String(sb);\n-    }\n+        if (u.getDaysSinceMaintenance() >= (getCampaignOptions().getMaintenanceCycleDays() * ruggedMultiplier)) {\n+            // maybe use the money\n+            if (campaignOptions.payForMaintain()) {\n+                if (!(finances.debit(u.getMaintenanceCost(), Transaction.C_MAINTAIN, \"Maintenance for \"\n+                                + u.getName(), getLocalDate()))) {\n+                    addReport(\"<font color='red'><b>You cannot afford to pay maintenance costs for \"\n+                            + u.getHyperlinkedName() + \"!</b></font>\");\n+                    paidMaintenance = false;\n+                }\n+            }\n+            // it is time for a maintenance check\n+            int qualityOrig = u.getQuality();\n+            String techName = \"Nobody\";\n+            String techNameLinked = techName;\n+            if (null != tech) {\n+                techName = tech.getFullTitle();\n+                techNameLinked = tech.getHyperlinkedFullTitle();\n+            }\n+            // don't do actual damage until we clear the for loop to avoid\n+            // concurrent mod problems\n+            // put it into a hash - 4 points of damage will mean destruction\n+            Map<Part, Integer> partsToDamage = new HashMap<>();\n+            StringBuilder maintenanceReport = new StringBuilder(\"<emph>\" + techName + \" performing maintenance</emph><br><br>\");\n+            for (Part p : u.getParts()) {\n+                String partReport = \"<b>\" + p.getName() + \"</b> (Quality \" + p.getQualityName() + \")\";\n+                if (!p.needsMaintenance()) {\n+                    continue;\n+                }\n+                int oldQuality = p.getQuality();\n+                TargetRoll target = getTargetForMaintenance(p, tech);\n+                if (!paidMaintenance) {\n+                    // TODO : Make this modifier user inputtable\n+                    target.addModifier(1, \"did not pay for maintenance\");\n+                }\n \n-    public int getOccupiedBays(long type) {\n-        return getOccupiedBays(type, false);\n-    }\n+                partReport += \", TN \" + target.getValue() + \"[\" + target.getDesc() + \"]\";\n+                int roll = Compute.d6(2);\n+                int margin = roll - target.getValue();\n+                partReport += \" rolled a \" + roll + \", margin of \" + margin;\n \n-    public int getOccupiedBays(long type, boolean lv) {\n-        int num = 0;\n-        for (Unit unit : getUnits()) {\n-            if (unit.isMothballed()) {\n-                continue;\n-            }\n-            Entity en = unit.getEntity();\n-            if (en instanceof GunEmplacement || en instanceof Jumpship) {\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_MECH && en instanceof Mech) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_DROPSHIP && en instanceof Dropship) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_SMALL_CRAFT && en instanceof SmallCraft && !(en instanceof Dropship)) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_CONV_FIGHTER && en instanceof ConvFighter) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_AERO && en instanceof Aero\n-                    && !(en instanceof SmallCraft || en instanceof ConvFighter)) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_INFANTRY && en instanceof Infantry && !(en instanceof BattleArmor)) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_BATTLEARMOR && en instanceof BattleArmor) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_TANK && en instanceof Tank) {\n-                if ((en.getWeight() <= 50 && lv) || (en.getWeight() > 50 && !lv)) {\n-                    num++;\n+                switch (p.getQuality()) {\n+                    case Part.QUALITY_A: {\n+                        if (margin >= 4) {\n+                            p.improveQuality();\n+                        }\n+                        if (!campaignOptions.useUnofficialMaintenance()) {\n+                            if (margin < -6) {\n+                                partsToDamage.put(p, 4);\n+                            } else if (margin < -4) {\n+                                partsToDamage.put(p, 3);\n+                            } else if (margin == -4) {\n+                                partsToDamage.put(p, 2);\n+                            } else if (margin < -1) {\n+                                partsToDamage.put(p, 1);\n+                            }\n+                        } else if (margin < -6) {\n+                            partsToDamage.put(p, 1);\n+                        }\n+                        break;\n+                    }\n+                    case Part.QUALITY_B: {\n+                        if (margin >= 4) {\n+                            p.improveQuality();\n+                        } else if (margin < -5) {\n+                            p.decreaseQuality();\n+                        }\n+                        if (!campaignOptions.useUnofficialMaintenance()) {\n+                            if (margin < -6) {\n+                                partsToDamage.put(p, 2);\n+                            } else if (margin < -2) {\n+                                partsToDamage.put(p, 1);\n+                            }\n+                        }\n+                        break;\n+                    }\n+                    case Part.QUALITY_C: {\n+                        if (margin < -4) {\n+                            p.decreaseQuality();\n+                        } else if (margin >= 5) {\n+                            p.improveQuality();\n+                        }\n+                        if (!campaignOptions.useUnofficialMaintenance()) {\n+                            if (margin < -6) {\n+                                partsToDamage.put(p, 2);\n+                            } else if (margin < -3) {\n+                                partsToDamage.put(p, 1);\n+                            }\n+                        }\n+                        break;\n+                    }\n+                    case Part.QUALITY_D: {\n+                        if (margin < -3) {\n+                            p.decreaseQuality();\n+                            if ((margin < -4) && !campaignOptions.useUnofficialMaintenance()) {\n+                                partsToDamage.put(p, 1);\n+                            }\n+                        } else if (margin >= 5) {\n+                            p.improveQuality();\n+                        }\n+                        break;\n+                    }\n+                    case Part.QUALITY_E:\n+                        if (margin < -2) {\n+                            p.decreaseQuality();\n+                            if ((margin < -5) && !campaignOptions.useUnofficialMaintenance()) {\n+                                partsToDamage.put(p, 1);\n+                            }\n+                        } else if (margin >= 6) {\n+                            p.improveQuality();\n+                        }\n+                        break;\n+                    case Part.QUALITY_F:\n+                    default:\n+                        if (margin < -2) {\n+                            p.decreaseQuality();\n+                            if (margin < -6 && !campaignOptions.useUnofficialMaintenance()) {\n+                                partsToDamage.put(p, 1);\n+                            }\n+                        }\n+                        // TODO: award XP point if margin >= 6 (make this optional)\n+                        //if (margin >= 6) {\n+                        //\n+                        //}\n+                        break;\n                 }\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_PROTOMECH && en instanceof Protomech) {\n-                num++;\n-                continue;\n+                if (p.getQuality() > oldQuality) {\n+                    partReport += \": <font color='green'>new quality is \" + p.getQualityName() + \"</font>\";\n+                } else if (p.getQuality() < oldQuality) {\n+                    partReport += \": <font color='red'>new quality is \" + p.getQualityName() + \"</font>\";\n+                } else {\n+                    partReport += \": quality remains \" + p.getQualityName();\n+                }\n+                if (null != partsToDamage.get(p)) {\n+                    if (partsToDamage.get(p) > 3) {\n+                        partReport += \", <font color='red'><b>part destroyed</b></font>\";\n+                    } else {\n+                        partReport += \", <font color='red'><b>part damaged</b></font>\";\n+                    }\n+                }\n+                maintenanceReport.append(partReport).append(\"<br>\");\n             }\n-        }\n \n-        if (type == Entity.ETYPE_MECH) {\n-            if (getTotalMechBays() > num) {\n-                return num;\n+            int nDamage = 0;\n+            int nDestroy = 0;\n+            for (Map.Entry<Part, Integer> p : partsToDamage.entrySet()) {\n+                int damage = p.getValue();\n+                if (damage > 3) {\n+                    nDestroy++;\n+                    p.getKey().remove(false);\n+                } else {\n+                    p.getKey().doMaintenanceDamage(damage);\n+                    nDamage++;\n+                }\n             }\n-            return getTotalMechBays();\n-        }\n \n-        if (type == Entity.ETYPE_AERO) {\n-            if (getTotalASFBays() > num) {\n-                return num;\n-            }\n-            return getTotalASFBays();\n-        }\n+            u.setLastMaintenanceReport(maintenanceReport.toString());\n \n-        if (type == Entity.ETYPE_INFANTRY) {\n-            if (getTotalInfantryBays() > num) {\n-                return num;\n+            if (getCampaignOptions().logMaintenance()) {\n+                MekHQ.getLogger().info(getClass(), \"doMaintenance\", maintenanceReport.toString());\n             }\n-            return getTotalInfantryBays();\n-        }\n \n-        if (type == Entity.ETYPE_BATTLEARMOR) {\n-            if (getTotalBattleArmorBays() > num) {\n-                return num;\n+            int quality = u.getQuality();\n+            String qualityString;\n+            boolean reverse = getCampaignOptions().reverseQualityNames();\n+            if (quality > qualityOrig) {\n+                qualityString = \"<font color='green'>Overall quality improves from \"\n+                        + Part.getQualityName(qualityOrig, reverse) + \" to \" + Part.getQualityName(quality, reverse)\n+                        + \"</font>\";\n+            } else if (quality < qualityOrig) {\n+                qualityString = \"<font color='red'>Overall quality declines from \"\n+                        + Part.getQualityName(qualityOrig, reverse) + \" to \" + Part.getQualityName(quality, reverse)\n+                        + \"</font>\";\n+            } else {\n+                qualityString = \"Overall quality remains \" + Part.getQualityName(quality, reverse);\n             }\n-            return getTotalBattleArmorBays();\n-        }\n-\n-        if (type == Entity.ETYPE_TANK) {\n-            if (lv) {\n-                if (getTotalLightVehicleBays() > num) {\n-                    return num;\n-                }\n-                return getTotalLightVehicleBays();\n+            String damageString = \"\";\n+            if (nDamage > 0) {\n+                damageString += nDamage + \" parts were damaged. \";\n             }\n-            if (getTotalHeavyVehicleBays() > num) {\n-                return num;\n+            if (nDestroy > 0) {\n+                damageString += nDestroy + \" parts were destroyed.\";\n             }\n-            return getTotalHeavyVehicleBays();\n-        }\n-\n-        if (type == Entity.ETYPE_SMALL_CRAFT) {\n-            if (getTotalSmallCraftBays() > num) {\n-                return num;\n+            if (!damageString.isEmpty()) {\n+                damageString = \"<b><font color='red'>\" + damageString + \"</b></font> [<a href='REPAIR|\" + u.getId()\n+                        + \"'>Repair bay</a>]\";\n             }\n-            return getTotalSmallCraftBays();\n-        }\n-\n-        if (type == Entity.ETYPE_PROTOMECH) {\n-            if (getTotalProtomechBays() > num) {\n-                return num;\n+            String paidString = \"\";\n+            if (!paidMaintenance) {\n+                paidString = \"<font color='red'>Could not afford maintenance costs, so check is at a penalty.</font>\";\n             }\n-            return getTotalProtomechBays();\n-        }\n+            addReport(techNameLinked + \" performs maintenance on \" + u.getHyperlinkedName() + \". \" + paidString\n+                    + qualityString + \". \" + damageString + \" [<a href='MAINTENANCE|\" + u.getId()\n+                    + \"'>Get details</a>]\");\n \n-        if (type == Entity.ETYPE_DROPSHIP) {\n-            if (getTotalDockingCollars() > num) {\n-                return num;\n-            }\n-            return getTotalDockingCollars();\n+            u.resetDaysSinceMaintenance();\n         }\n-\n-        return -1; // default, this is an error condition\n     }\n \n-    public String getTransportDetails() {\n-        int noMech = Math.max(getNumberOfUnitsByType(Entity.ETYPE_MECH) - getOccupiedBays(Entity.ETYPE_MECH), 0);\n-        int noDS = Math.max(getNumberOfUnitsByType(Entity.ETYPE_DROPSHIP) - getOccupiedBays(Entity.ETYPE_DROPSHIP), 0);\n-        int noSC = Math.max(getNumberOfUnitsByType(Entity.ETYPE_SMALL_CRAFT) - getOccupiedBays(Entity.ETYPE_SMALL_CRAFT), 0);\n-        @SuppressWarnings(\"unused\") // FIXME: What type of bays do ConvFighters use?\n-        int noCF = Math\n-                .max(getNumberOfUnitsByType(Entity.ETYPE_CONV_FIGHTER) - getOccupiedBays(Entity.ETYPE_CONV_FIGHTER), 0);\n-        int noASF = Math.max(getNumberOfUnitsByType(Entity.ETYPE_AERO) - getOccupiedBays(Entity.ETYPE_AERO), 0);\n-        int nolv = Math.max(getNumberOfUnitsByType(Entity.ETYPE_TANK, false, true) - getOccupiedBays(Entity.ETYPE_TANK, true), 0);\n-        int nohv = Math.max(getNumberOfUnitsByType(Entity.ETYPE_TANK) - getOccupiedBays(Entity.ETYPE_TANK), 0);\n-        int noinf = Math.max(getNumberOfUnitsByType(Entity.ETYPE_INFANTRY) - getOccupiedBays(Entity.ETYPE_INFANTRY), 0);\n-        int noBA = Math.max(getNumberOfUnitsByType(Entity.ETYPE_BATTLEARMOR) - getOccupiedBays(Entity.ETYPE_BATTLEARMOR), 0);\n-        @SuppressWarnings(\"unused\") // FIXME: This should be used somewhere...\n-        int noProto = Math.max(getNumberOfUnitsByType(Entity.ETYPE_PROTOMECH) - getOccupiedBays(Entity.ETYPE_PROTOMECH),\n-                0);\n-        int freehv = Math.max(getTotalHeavyVehicleBays() - getOccupiedBays(Entity.ETYPE_TANK), 0);\n-        int freeinf = Math.max(getTotalInfantryBays() - getOccupiedBays(Entity.ETYPE_INFANTRY), 0);\n-        int freeba = Math.max(getTotalBattleArmorBays() - getOccupiedBays(Entity.ETYPE_BATTLEARMOR), 0);\n-        int freeSC = Math.max(getTotalSmallCraftBays() - getOccupiedBays(Entity.ETYPE_SMALL_CRAFT), 0);\n-        int mothballedAsCargo = Math.max(getNumberOfUnitsByType(Unit.ETYPE_MOTHBALLED), 0);\n-\n-        String asfAppend = \"\";\n-        int newNoASF = Math.max(noASF - freeSC, 0);\n-        int placedASF = Math.max(noASF - newNoASF, 0);\n-        if (noASF > 0 && freeSC > 0) {\n-            asfAppend = \" [\" + placedASF + \" ASF will be placed in Small Craft bays]\";\n-            freeSC -= placedASF;\n-        }\n-\n-        String lvAppend = \"\";\n-        int newNolv = Math.max(nolv - freehv, 0);\n-        int placedlv = Math.max(nolv - newNolv, 0);\n-        if (nolv > 0 && freehv > 0) {\n-            lvAppend = \" [\" + placedlv + \" Light Vehicles will be placed in Heavy Vehicle bays]\";\n-            freehv -= placedlv;\n-        }\n-\n-        if (noBA > 0 && freeinf > 0) {\n-\n-        }\n-\n-        if (noinf > 0 && freeba > 0) {\n-\n-        }\n-\n-        StringBuffer sb = new StringBuffer(\"Transports\\n\\n\");\n-\n-        // Lets do Mechs first.\n-        sb.append(String.format(\"%-35s      %4d (%4d)      %-35s     %4d\\n\", \"Mech Bays (Occupied):\",\n-                getTotalMechBays(), getOccupiedBays(Entity.ETYPE_MECH), \"Mechs Not Transported:\", noMech));\n-\n-        // Lets do ASF next.\n-        sb.append(String.format(\"%-35s      %4d (%4d)      %-35s     %4d%s\\n\", \"ASF Bays (Occupied):\",\n-                getTotalASFBays(), getOccupiedBays(Entity.ETYPE_AERO), \"ASF Not Transported:\", noASF, asfAppend));\n-\n-        // Lets do Light Vehicles next.\n-        sb.append(String.format(\"%-35s      %4d (%4d)      %-35s     %4d%s\\n\", \"Light Vehicle Bays (Occupied):\",\n-                getTotalLightVehicleBays(), getOccupiedBays(Entity.ETYPE_TANK, true), \"Light Vehicles Not Transported:\",\n-                nolv, lvAppend));\n-\n-        // Lets do Heavy Vehicles next.\n-        sb.append(String.format(\"%-35s      %4d (%4d)      %-35s     %4d\\n\", \"Heavy Vehicle Bays (Occupied):\",\n-                getTotalHeavyVehicleBays(), getOccupiedBays(Entity.ETYPE_TANK), \"Heavy Vehicles Not Transported:\",\n-                nohv));\n-\n-        if (noASF > 0 && freeSC > 0) {\n-            // Lets do ASF in Free Small Craft Bays next.\n-            sb.append(String.format(\"%-35s   %4d (%4d)      %-35s     %4d\\n\", \"   Light Vehicles in Heavy Vehicle Bays (Occupied):\",\n-                    getTotalHeavyVehicleBays(), getOccupiedBays(Entity.ETYPE_TANK) + placedlv,\n-                    \"Light Vehicles Not Transported:\", newNolv));\n-        }\n-\n-        if (nolv > 0 && freehv > 0) {\n-\n-        }\n-\n-        // Lets do Infantry next.\n-        sb.append(String.format(\"%-35s      %4d (%4d)      %-35s     %4d\\n\", \"Infantry Bays (Occupied):\",\n-                getTotalInfantryBays(), getOccupiedBays(Entity.ETYPE_INFANTRY), \"Infantry Not Transported:\", noinf));\n-\n-        if (noBA > 0 && freeinf > 0) {\n-\n-        }\n-\n-        // Lets do Battle Armor next.\n-        sb.append(String.format(\"%-35s      %4d (%4d)      %-35s     %4d\\n\", \"Battle Armor Bays (Occupied):\",\n-                getTotalBattleArmorBays(), getOccupiedBays(Entity.ETYPE_BATTLEARMOR), \"Battle Armor Not Transported:\",\n-                noBA));\n-\n-        if (noinf > 0 && freeba > 0) {\n-\n-        }\n-\n-        // Lets do Small Craft next.\n-        sb.append(String.format(\"%-35s      %4d (%4d)      %-35s     %4d\\n\", \"Small Craft Bays (Occupied):\",\n-                getTotalSmallCraftBays(), getOccupiedBays(Entity.ETYPE_SMALL_CRAFT), \"Small Craft Not Transported:\",\n-                noSC));\n-\n-        if (noASF > 0 && freeSC > 0) {\n-            // Lets do ASF in Free Small Craft Bays next.\n-            sb.append(String.format(\"%-35s   %4d (%4d)      %-35s     %4d\\n\", \"   ASF in Small Craft Bays (Occupied):\",\n-                    getTotalSmallCraftBays(), getOccupiedBays(Entity.ETYPE_SMALL_CRAFT) + placedASF,\n-                    \"ASF Not Transported:\", newNoASF));\n-        }\n-\n-        // Lets do Protomechs next.\n-        sb.append(String.format(\"%-35s      %4d (%4d)      %-35s     %4d\\n\", \"Protomech Bays (Occupied):\",\n-                getTotalProtomechBays(), getOccupiedBays(Entity.ETYPE_PROTOMECH), \"Protomechs Not Transported:\", noSC));\n-\n-        sb.append(\"\\n\\n\");\n-\n-        sb.append(String.format(\"%-35s      %4d (%4d)      %-35s     %4d\\n\", \"Docking Collars (Occupied):\",\n-                getTotalDockingCollars(), getOccupiedBays(Entity.ETYPE_DROPSHIP), \"Dropships Not Transported:\", noDS));\n-\n-        sb.append(\"\\n\\n\");\n-\n-        sb.append(String.format(\"%-35s      %4d\\n\", \"Mothballed Units (see Cargo report)\", mothballedAsCargo));\n-\n-        return new String(sb);\n-    }\n-\n-    public String getCombatPersonnelDetails() {\n-        int[] countPersonByType = new int[Person.T_NUM];\n-        int countTotal = 0;\n-        int countInjured = 0;\n-        int countMIA = 0;\n-        int countKIA = 0;\n-        int countRetired = 0;\n-        Money salary = Money.zero();\n-\n+    public void initTimeInService() {\n         for (Person p : getPersonnel()) {\n-            // Add them to the total count\n-            if (Person.isCombatRole(p.getPrimaryRole()) && !p.isPrisoner()\n-                    && !p.isBondsman() && p.isActive()) {\n-                countPersonByType[p.getPrimaryRole()]++;\n-                countTotal++;\n-                if (getCampaignOptions().useAdvancedMedical()\n-                        && p.getInjuries().size() > 0) {\n-                    countInjured++;\n-                } else if (p.getHits() > 0) {\n-                    countInjured++;\n+            if (!p.isDependent() && p.getPrisonerStatus().isFree()) {\n+                LocalDate join = null;\n+                for (LogEntry e : p.getPersonnelLog()) {\n+                    if (join == null) {\n+                        // If by some nightmare there is no Joined date just use the first entry.\n+                        join = e.getDate();\n+                    }\n+                    if (e.getDesc().startsWith(\"Joined \") || e.getDesc().startsWith(\"Freed \")) {\n+                        join = e.getDate();\n+                        break;\n+                    }\n                 }\n-                salary = salary.plus(p.getSalary());\n-            } else if (Person.isCombatRole(p.getPrimaryRole())\n-                    && p.getStatus() == Person.S_RETIRED) {\n-                countRetired++;\n-            } else if (Person.isCombatRole(p.getPrimaryRole())\n-                    && p.getStatus() == Person.S_MIA) {\n-                countMIA++;\n-            } else if (Person.isCombatRole(p.getPrimaryRole())\n-                    && p.getStatus() == Person.S_KIA) {\n-                countKIA++;\n-            }\n-        }\n \n-        StringBuffer sb = new StringBuffer(\"Combat Personnel\\n\\n\");\n-\n-        String buffer = String.format(\"%-30s        %4s\\n\", \"Total Combat Personnel\",\n-                countTotal);\n-        sb.append(buffer);\n-\n-        for (int i = 0; i < Person.T_NUM; i++) {\n-            if (Person.isCombatRole(i)) {\n-                buffer = String.format(\"    %-30s    %4s\\n\", Person.getRoleDesc(i, getFaction().isClan()),\n-                        countPersonByType[i]);\n-                sb.append(buffer);\n+                p.setRecruitment((join != null) ? join : getLocalDate().minusYears(1));\n             }\n         }\n-\n-        buffer = String.format(\"%-30s        %4s\\n\",\n-                \"Injured Combat Personnel\", countInjured);\n-        sb.append(\"\\n\" + buffer);\n-        buffer = String.format(\"%-30s        %4s\\n\", \"MIA Combat Personnel\",\n-                countMIA);\n-        sb.append(buffer);\n-        buffer = String.format(\"%-30s        %4s\\n\", \"KIA Combat Personnel\",\n-                countKIA);\n-        sb.append(buffer);\n-        buffer = String.format(\"%-30s        %4s\\n\",\n-                \"Retired Combat Personnel\", countRetired);\n-        sb.append(buffer);\n-\n-        sb.append(\"\\nMonthly Salary For Combat Personnel: \" + salary.toAmountAndSymbolString());\n-\n-        return new String(sb);\n     }\n \n-    public String getSupportPersonnelDetails() {\n-        int[] countPersonByType = new int[Person.T_NUM];\n-        int countTotal = 0;\n-        int countInjured = 0;\n-        int countMIA = 0;\n-        int countKIA = 0;\n-        int countRetired = 0;\n-        Money salary = Money.zero();\n-        int prisoners = 0;\n-        int bondsmen = 0;\n-\n+    public void initTimeInRank() {\n         for (Person p : getPersonnel()) {\n-            // Add them to the total count\n-            if (Person.isSupportRole(p.getPrimaryRole()) && !p.isPrisoner()\n-                    && !p.isBondsman() && p.isActive()) {\n-                countPersonByType[p.getPrimaryRole()]++;\n-                countTotal++;\n-                if (p.getInjuries().size() > 0 || p.getHits() > 0) {\n-                    countInjured++;\n-                }\n-                salary = salary.plus(p.getSalary());\n-            } else if (p.isPrisoner() && p.isActive()) {\n-                prisoners++;\n-                if (p.getInjuries().size() > 0 || p.getHits() > 0) {\n-                    countInjured++;\n-                }\n-            } else if (p.isBondsman() && p.isActive()) {\n-                bondsmen++;\n-                if (p.getInjuries().size() > 0 || p.getHits() > 0) {\n-                    countInjured++;\n-                }\n-            } else if (Person.isSupportRole(p.getPrimaryRole())\n-                    && p.getStatus() == Person.S_RETIRED) {\n-                countRetired++;\n-            } else if (Person.isSupportRole(p.getPrimaryRole())\n-                    && p.getStatus() == Person.S_MIA) {\n-                countMIA++;\n-            } else if (Person.isSupportRole(p.getPrimaryRole())\n-                    && p.getStatus() == Person.S_KIA) {\n-                countKIA++;\n-            }\n-        }\n+            if (!p.isDependent() && p.getPrisonerStatus().isFree()) {\n \n-        StringBuffer sb = new StringBuffer(\"Support Personnel\\n\\n\");\n+                LocalDate join = null;\n+                for (LogEntry e : p.getPersonnelLog()) {\n+                    if (join == null) {\n+                        // If by some nightmare there is no date from the below, just use the first entry.\n+                        join = e.getDate();\n+                    }\n \n-        String buffer = String.format(\"%-30s        %4s\\n\", \"Total Support Personnel\",\n-                countTotal);\n-        sb.append(buffer);\n+                    if (e.getDesc().startsWith(\"Joined \") || e.getDesc().startsWith(\"Freed \")\n+                            || e.getDesc().startsWith(\"Promoted \") || e.getDesc().startsWith(\"Demoted \")) {\n+                        join = e.getDate();\n+                    }\n+                }\n \n-        for (int i = 0; i < Person.T_NUM; i++) {\n-            if (Person.isSupportRole(i)) {\n-                buffer = String.format(\"    %-30s    %4s\\n\", Person.getRoleDesc(i, getFaction().isClan()),\n-                        countPersonByType[i]);\n-                sb.append(buffer);\n+                // For that one in a billion chance the log is empty. Clone today's date and subtract a year\n+                p.setLastRankChangeDate((join != null) ? join : getLocalDate().minusYears(1));\n             }\n         }\n-\n-        buffer = String.format(\"%-30s        %4s\\n\",\n-                \"Injured Support Personnel\", countInjured);\n-        sb.append(\"\\n\" + buffer);\n-        buffer = String.format(\"%-30s        %4s\\n\", \"MIA Support Personnel\",\n-                countMIA);\n-        sb.append(buffer);\n-        buffer = String.format(\"%-30s        %4s\\n\", \"KIA Support Personnel\",\n-                countKIA);\n-        sb.append(buffer);\n-        buffer = String.format(\"%-30s        %4s\\n\",\n-                \"Retired Support Personnel\", countRetired);\n-        sb.append(buffer);\n-\n-        sb.append(\"\\nMonthly Salary For Support Personnel: \" + salary.toAmountAndSymbolString());\n-\n-        sb.append(String.format(\"\\nYou have \" + prisoners + \" prisoner%s\",\n-                prisoners == 1 ? \"\" : \"s\"));\n-        sb.append(String.format(\"\\nYou have \" + bondsmen + \" %s\",\n-                bondsmen == 1 ? \"bondsman\" : \"bondsmen\"));\n-\n-        return new String(sb);\n     }\n \n-    public void doMaintenance(Unit u) {\n-        if (!u.requiresMaintenance()) {\n-            return;\n-        }\n-        // lets start by checking times\n-        Person tech = u.getTech();\n-        int minutesUsed = u.getMaintenanceTime();\n-        int astechsUsed = getAvailableAstechs(minutesUsed, false);\n-        boolean maintained = null != tech\n-                && tech.getMinutesLeft() >= minutesUsed && !tech.isMothballing();\n-        boolean paidMaintenance = true;\n-        if (maintained) {\n-            // use the time\n-            tech.setMinutesLeft(tech.getMinutesLeft() - minutesUsed);\n-            astechPoolMinutes -= astechsUsed * minutesUsed;\n-        }\n-        u.incrementDaysSinceMaintenance(maintained, astechsUsed);\n-        if (u.getDaysSinceMaintenance() >= getCampaignOptions().getMaintenanceCycleDays()) {\n-            // maybe use the money\n-            if (campaignOptions.payForMaintain()) {\n-                if (finances.debit(u.getMaintenanceCost(), Transaction.C_MAINTAIN, \"Maintenance for \" + u.getName(),\n-                        calendar.getTime())) {\n-                } else {\n-                    addReport(\"<font color='red'><b>You cannot afford to pay maintenance costs for \"\n-                            + u.getHyperlinkedName() + \"!</b></font>\");\n-                    paidMaintenance = false;\n-                }\n-            }\n-            if (getCampaignOptions().checkMaintenance()) {\n-                // its time for a maintenance check\n-                int qualityOrig = u.getQuality();\n-                String techName = \"Nobody\";\n-                String techNameLinked = techName;\n-                if (null != tech) {\n-                    techName = tech.getFullTitle();\n-                    techNameLinked = tech.getHyperlinkedFullTitle();\n-                }\n-                // dont do actual damage until we clear the for loop to avoid\n-                // concurrent mod problems\n-                // put it into a hash - 4 points of damage will mean destruction\n-                HashMap<Integer, Integer> partsToDamage = new HashMap<>();\n-                String maintenanceReport = \"<emph>\" + techName + \" performing maintenance</emph><br><br>\";\n-                for (Part p : u.getParts()) {\n-                    String partReport = \"<b>\" + p.getName() + \"</b> (Quality \" + p.getQualityName() + \")\";\n-                    if (!p.needsMaintenance()) {\n-                        continue;\n-                    }\n-                    int oldQuality = p.getQuality();\n-                    TargetRoll target = getTargetForMaintenance(p, tech);\n-                    if (!paidMaintenance) {\n-                        // I should probably make this modifier user inputtable\n-                        target.addModifier(1, \"did not pay maintenance\");\n-                    }\n-                    partReport += \", TN \" + target.getValue() + \"[\" + target.getDesc() + \"]\";\n-                    int roll = Compute.d6(2);\n-                    int margin = roll - target.getValue();\n-                    partReport += \" rolled a \" + roll + \", margin of \" + margin;\n-                    switch (p.getQuality()) {\n-                        case Part.QUALITY_F:\n-                            if (margin < -2) {\n-                                p.decreaseQuality();\n-                                if (margin < -6 && !campaignOptions.useUnofficialMaintenance()) {\n-                                    partsToDamage.put(p.getId(), 1);\n-                                }\n-                            }\n-                            if (margin >= 6) {\n-                                // TODO: award XP point (make this optional)\n-                            }\n-                            break;\n-                        case Part.QUALITY_E:\n-                            if (margin < -2) {\n-                                p.decreaseQuality();\n-                                if (margin < -5 && !campaignOptions.useUnofficialMaintenance()) {\n-                                    partsToDamage.put(p.getId(), 1);\n-                                }\n-                            }\n-                            if (margin >= 6) {\n-                                p.improveQuality();\n-                            }\n-                            break;\n-                        case Part.QUALITY_D:\n-                            if (margin < -3) {\n-                                p.decreaseQuality();\n-                                if (margin < -4 && !campaignOptions.useUnofficialMaintenance()) {\n-                                    partsToDamage.put(p.getId(), 1);\n-                                }\n-                            }\n-                            if (margin >= 5) {\n-                                p.improveQuality();\n-                            }\n-                            break;\n-                        case Part.QUALITY_C:\n-                            if (margin < -4) {\n-                                p.decreaseQuality();\n-                            }\n-                            if (!campaignOptions.useUnofficialMaintenance()) {\n-                                if (margin < -6) {\n-                                    partsToDamage.put(p.getId(), 2);\n-                                } else if (margin < -3) {\n-                                    partsToDamage.put(p.getId(), 1);\n-                                }\n-                            }\n-                            if (margin >= 5) {\n-                                p.improveQuality();\n-                            }\n-                            break;\n-                        case Part.QUALITY_B:\n-                            if (margin < -5) {\n-                                p.decreaseQuality();\n-                            }\n-                            if (!campaignOptions.useUnofficialMaintenance()) {\n-                                if (margin < -6) {\n-                                    partsToDamage.put(p.getId(), 2);\n-                                } else if (margin < -2) {\n-                                    partsToDamage.put(p.getId(), 1);\n-                                }\n-                            }\n-                            if (margin >= 4) {\n-                                p.improveQuality();\n-                            }\n-                            break;\n-                        case Part.QUALITY_A:\n-                            if (!campaignOptions.useUnofficialMaintenance()) {\n-                                if (margin < -6) {\n-                                    partsToDamage.put(p.getId(), 4);\n-                                } else if (margin < -4) {\n-                                    partsToDamage.put(p.getId(), 3);\n-                                } else if (margin == -4) {\n-                                    partsToDamage.put(p.getId(), 2);\n-                                } else if (margin < -1) {\n-                                    partsToDamage.put(p.getId(), 1);\n-                                }\n-                            } else if (margin < -6) {\n-                                partsToDamage.put(p.getId(), 1);\n-                            }\n-                            if (margin >= 4) {\n-                                p.improveQuality();\n-                            }\n-                            break;\n-                    }\n-                    if (p.getQuality() > oldQuality) {\n-                        partReport += \": <font color='green'>new quality is \" + p.getQualityName() + \"</font>\";\n-                    } else if (p.getQuality() < oldQuality) {\n-                        partReport += \": <font color='red'>new quality is \" + p.getQualityName() + \"</font>\";\n-                    } else {\n-                        partReport += \": quality remains \" + p.getQualityName();\n-                    }\n-                    if (null != partsToDamage.get(p.getId())) {\n-                        if (partsToDamage.get(p.getId()) > 3) {\n-                            partReport += \", <font color='red'><b>part destroyed</b></font>\";\n-                        } else {\n-                            partReport += \", <font color='red'><b>part damaged</b></font>\";\n-                        }\n-                    }\n-                    maintenanceReport += partReport + \"<br>\";\n-                }\n-                int nDamage = 0;\n-                int nDestroy = 0;\n-                for (int key : partsToDamage.keySet()) {\n-                    Part p = getPart(key);\n-                    if (null != p) {\n-                        int damage = partsToDamage.get(key);\n-                        if (damage > 3) {\n-                            nDestroy++;\n-                            p.remove(false);\n-                        } else {\n-                            p.doMaintenanceDamage(damage);\n-                            nDamage++;\n-                        }\n+    public void initRetirementDateTracking() {\n+        for (Person person : getPersonnel()) {\n+            if (person.getStatus().isRetired()) {\n+                LocalDate retired = null;\n+                LocalDate lastLoggedDate = null;\n+                for (LogEntry entry : person.getPersonnelLog()) {\n+                    lastLoggedDate = entry.getDate();\n+                    if (entry.getDesc().startsWith(\"Retired\")) {\n+                        retired = entry.getDate();\n                     }\n                 }\n-                u.setLastMaintenanceReport(maintenanceReport);\n-                int quality = u.getQuality();\n-                String qualityString;\n-                boolean reverse = getCampaignOptions().reverseQualityNames();\n-                if (quality > qualityOrig) {\n-                    qualityString = \"<font color='green'>Overall quality improves from \"\n-                            + Part.getQualityName(qualityOrig, reverse) + \" to \" + Part.getQualityName(quality, reverse)\n-                            + \"</font>\";\n-                } else if (quality < qualityOrig) {\n-                    qualityString = \"<font color='red'>Overall quality declines from \"\n-                            + Part.getQualityName(qualityOrig, reverse) + \" to \" + Part.getQualityName(quality, reverse)\n-                            + \"</font>\";\n-                } else {\n-                    qualityString = \"Overall quality remains \" + Part.getQualityName(quality, reverse);\n-                }\n-                String damageString = \"\";\n-                if (nDamage > 0) {\n-                    damageString += nDamage + \" parts were damaged. \";\n-                }\n-                if (nDestroy > 0) {\n-                    damageString += nDestroy + \" parts were destroyed.\";\n-                }\n-                if (!damageString.isEmpty()) {\n-                    damageString = \"<b><font color='red'>\" + damageString + \"</b></font> [<a href='REPAIR|\" + u.getId()\n-                            + \"'>Repair bay</a>]\";\n-                }\n-                String paidString = \"\";\n-                if (!paidMaintenance) {\n-                    paidString = \"<font color='red'>Could not afford maintenance costs, so check is at a penalty.</font>\";\n-                }\n-                addReport(techNameLinked + \" performs maintenance on \" + u.getHyperlinkedName() + \". \" + paidString\n-                        + qualityString + \". \" + damageString + \" [<a href='MAINTENANCE|\" + u.getId()\n-                        + \"'>Get details</a>]\");\n-            }\n-            u.resetDaysSinceMaintenance();\n-        }\n-    }\n \n-    public void initTimeInService() {\n-        for (Person p : getPersonnel()) {\n-            Date join = null;\n-            for (LogEntry e : p.getPersonnelLog()) {\n-                if (join == null){\n-                    // If by some nightmare there is no Joined date just use the first entry.\n-                    join = e.getDate();\n-                }\n-                if (e.getDesc().startsWith(\"Joined \") || e.getDesc().startsWith(\"Freed \")) {\n-                    join = e.getDate();\n-                    break;\n-                }\n-            }\n-            if (!p.isDependent() && !p.isPrisoner() && !p.isBondsman()) {\n-                GregorianCalendar cal = (GregorianCalendar) GregorianCalendar.getInstance();\n-                // For that one in a billion chance the log is empty. Clone todays date and subtract a year\n-                if (join == null) {\n-                    cal = (GregorianCalendar)calendar.clone();\n-                    cal.add(Calendar.YEAR, -1);\n-                    p.setRecruitment(cal);\n-                } else {\n-                    cal.setTime(join);\n-                    p.setRecruitment(cal);\n+                if (retired == null) {\n+                    retired = lastLoggedDate;\n                 }\n+\n+                // For that one in a billion chance the log is empty. Clone today's date and subtract a year\n+                person.setRetirement((retired != null) ? retired : getLocalDate().minusYears(1));\n             }\n         }\n     }\n \n     public void initAtB(boolean newCampaign) {\n-        getRetirementDefectionTracker().setLastRetirementRoll(getCalendar());\n+        getRetirementDefectionTracker().setLastRetirementRoll(getLocalDate());\n \n         if (!newCampaign) {\n             /*\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "3f55aabad31fb84ff1e5af9c8caac7bd8c8999a0", "message": "Merge commit", "committedDate": null}, {"oid": "a0c1cbf9746ed9486f08ce4aa2376828e846c786", "committedDate": "2019-02-26 21:45:56 -0500", "message": "merge"}, {"oid": "3002e321d67f944da3a051a049f0706c0e353aa0", "committedDate": "2019-03-04 20:50:34 -0500", "message": "merge from upstream"}, {"oid": "34f5dfffab4318e94903fece9dbf49dd1ee475c7", "committedDate": "2019-04-23 22:53:00 -0400", "message": "continues work on track gui and rules"}, {"oid": "b1c2e0f95fc8ad45080d9962da602d5fe815c34b", "committedDate": "2019-04-26 22:02:27 -0400", "message": "hook up stratcon rules manager to mekhq event bus"}, {"oid": "6f180f04dabdd9901dc392b093561514eb2e84cc", "committedDate": "2019-05-04 12:17:55 -0400", "message": "merge from upstream"}, {"oid": "119ff411ebb80f91b83b3fe139bb911a79048b3d", "committedDate": "2019-05-12 15:48:11 -0400", "message": "scenario setup work"}, {"oid": "2548381ed541547a775bb8c96fd53802087ec9aa", "committedDate": "2019-06-20 23:58:58 -0400", "message": "merge from upstream"}, {"oid": "ed6a5c015aa33d0bffdcd3297b9482ce600eb146", "committedDate": "2020-04-11 22:33:14 -0400", "message": "merge from upstream"}, {"oid": "ca46ea5005775f38ad56f98bfb8899a187571e49", "committedDate": "2020-06-03 11:30:19 -0400", "message": "merge from upstream"}, {"oid": "b2f014d250be5b4b75ed3f765f10ee1781ab96ae", "committedDate": "2020-06-23 22:21:32 -0400", "message": "merge from upstream"}, {"oid": "2bd7638ed4cc2ad5bc80e4b1bc78ff091c318a87", "committedDate": "2020-07-13 00:06:30 -0400", "message": "merge from upstream"}, {"oid": "d4f035c262d3d9ea7b7f5e935a5807bf5275aa91", "committedDate": "2020-08-08 23:08:38 -0400", "message": "merge from upstream"}, {"oid": "5830ebef6d2f671d0b152f328436ab36bcddacf4", "committedDate": "2020-08-24 20:32:16 -0400", "message": "merge from upstream"}, {"oid": "c8622590fef59265a5a8c4f68676a4a628d0fc0a", "committedDate": "2020-08-26 23:17:49 -0400", "message": "multiple bug fixes and hookup to actual campaign"}, {"oid": "935339ac1b799e58664d736142b2a1fa0d9e4263", "committedDate": "2020-09-09 00:06:07 -0400", "message": "merge from upstream"}, {"oid": "c7d9edb3737ba14da075190a1292ac94bbd7e0f2", "committedDate": "2020-09-20 14:36:56 -0600", "message": "Adding code for a log entry when swapping TOE force."}, {"oid": "2e590a1dbeb8a7b132cd5d312b93af37b9e0620a", "committedDate": "2020-09-29 10:15:54 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_476"}, {"oid": "04f10ee4b7f5bf57284109439ec1ab178b15857e", "committedDate": "2020-10-06 21:41:18 -0400", "message": "merge from upstream"}, {"oid": "04a16de448a0c7d576a6c3c64c9d23ae08384bae", "committedDate": "2020-10-07 14:33:13 -0400", "message": "Split out cargo and hangar statistics from Campaign"}, {"oid": "796379c3c13e8dadad4ac4cfd29f02a30e9c2bd1", "committedDate": "2020-10-07 14:33:13 -0400", "message": "Split out accounting from the Campaign"}, {"oid": "a254e204d91c3fd90698936f8d21aba26aaf0142", "committedDate": "2020-10-07 14:33:14 -0400", "message": "Move PersonnelReport methods"}, {"oid": "361dde24295aa66e89fea69823b01cf497cf4664", "committedDate": "2020-10-07 14:33:14 -0400", "message": "Move more financial reporting out of Campaign"}, {"oid": "c28db6f06dec2b03e487c15f514685d852bdca1e", "committedDate": "2020-10-07 14:33:14 -0400", "message": "Remove unused methods"}, {"oid": "039786019051fddf3af641c0cc0e35e7c85eb156", "committedDate": "2020-10-07 15:49:11 -0400", "message": "Make testing Accountant easier for a Campaign"}, {"oid": "a72b07d7b8ec62055140cd346314602fb020119e", "committedDate": "2020-10-07 16:11:53 -0400", "message": "Make it easier to mock stats classes"}, {"oid": "0400aac175c219dc2fb73ea0a8dfbbf429aaff6e", "committedDate": "2020-10-07 16:45:26 -0400", "message": "Add forEachSparePart to improve performance"}, {"oid": "63e028b04713a41ec415910ea4d0ed03a3678864", "committedDate": "2020-10-08 13:32:32 -0400", "message": "Merge remote-tracking branch 'upstream/master' into move-accounting-and-stats-out-of-campaign"}, {"oid": "13de948b34166d73f4f7a2e5a8982c9f693b12bc", "committedDate": "2020-10-10 15:15:00 -0400", "message": "Use Person directly instead of IDs in Unit"}, {"oid": "923a477ddb1060c2a48c13cca7c5900a40c0f82a", "committedDate": "2020-10-10 15:15:00 -0400", "message": "Use Person instead of an ID"}, {"oid": "58291b29acbe7cc24a4491f3d3ab911f0468a7dc", "committedDate": "2020-10-10 15:41:57 -0400", "message": "Fix logic to check for Already Being Worked On"}, {"oid": "998ab0faf85804f17cc7444ae1b46c2591b5db1f", "committedDate": "2020-10-15 23:34:03 -0400", "message": "merge from upstream"}, {"oid": "75e396b885c6008c6f6a7d72f1bbd7aad8099970", "committedDate": "2020-10-16 16:29:27 -0400", "message": "Moving to an enum for mission status"}, {"oid": "24de5e9720cf823838bf74e4cf4eb562bedbb437", "committedDate": "2020-10-16 18:28:46 -0400", "message": "Merging useUnitRating with the UnitRatingMethod enum"}, {"oid": "ca615b8e13e2158834a33079c6f89b02504c0bf7", "committedDate": "2020-10-17 01:17:28 -0400", "message": "Moving to using AbstractIcon for constants"}, {"oid": "4a54c7e9a18be4084eb1d3748a891b46400bf53d", "committedDate": "2020-10-17 13:11:47 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_IconConstants"}, {"oid": "9c1a47e2e6268b362edd3d6eb2e39018b5802179", "committedDate": "2020-10-20 14:49:01 -0400", "message": "Address PR feedback"}, {"oid": "b5d38e8af270f50fc091db05cf882ea8380fe3a7", "committedDate": "2020-10-20 14:49:08 -0400", "message": "Merge remote-tracking branch 'upstream/master' into units-hold-actual-persons"}, {"oid": "f34ac06c3db416f5e852246e928d3b1c6c132500", "committedDate": "2020-10-20 21:00:04 -0400", "message": "Merge branch 'master' into dev_Windchild_MissionStatus"}, {"oid": "fbc730260407b11dc98571c9b5e184e8f05e6a89", "committedDate": "2020-10-22 12:56:22 -0400", "message": "Standardizing to use the PortraitChooser instead of the older icon selector"}, {"oid": "0637c9d04376fbc5378a09826bdd58e1092b97f0", "committedDate": "2020-10-22 15:07:25 -0400", "message": "Use Units rather than their IDs"}, {"oid": "d25f391110cab3b64118d5963e321c379f8ab3ec", "committedDate": "2020-10-22 15:07:25 -0400", "message": "Do not use Unit IDs in Refits"}, {"oid": "5bf80c3e80c7fd9247fee197d749605de4a4e17b", "committedDate": "2020-10-22 15:07:49 -0400", "message": "Merge branch 'master' into dev_Windchild_IconConstants"}, {"oid": "2eec6da85e021ce0398fd3d715071b7b625855ba", "committedDate": "2020-10-22 23:15:38 -0400", "message": "merge from upstream"}, {"oid": "599b0a3158d94a3eea50fe8314c55177a344c2a9", "committedDate": "2020-10-24 14:22:32 -0400", "message": "Merge remote-tracking branch 'upstream/master' into use-units-not-ids"}, {"oid": "1d9b9a6ee2a71f128d65bb7754463be3ca9a71bc", "committedDate": "2020-10-24 14:26:31 -0400", "message": "Address LGTM issues"}, {"oid": "9f22e79abf71f3d8cf935d5d83d4790af02b32ce", "committedDate": "2020-10-24 14:48:29 -0400", "message": "Add tests for transport unit sets"}, {"oid": "851026ff48ec4e39238b2c56212bac2ea7993670", "committedDate": "2020-10-26 14:53:19 -0400", "message": "Use new Warehouse type in Campaign (etc)"}, {"oid": "37fc5840de9bf6c5bb19b38767e1394be220e1b9", "committedDate": "2020-10-26 16:02:30 -0400", "message": "Move some event logic to the Warehouse"}, {"oid": "3f795a2b3ba1840a198ca067a1d76aed4429f699", "committedDate": "2020-10-26 17:26:50 -0400", "message": "Move removing child parts to the Warehouse"}, {"oid": "d597a8aab6c1b948ebfdcc3f58d2213acb04b200", "committedDate": "2020-10-27 12:29:29 -0400", "message": "Starting to implement edge fixes"}, {"oid": "9978a0b21dd7d6fbd2d0077748027c6ed31753b0", "committedDate": "2020-10-27 12:29:35 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_Edge"}, {"oid": "b2aea6b5d940c4fa06a42cd1b04559815323ab63", "committedDate": "2020-10-27 13:04:35 -0400", "message": "Working on edge code"}, {"oid": "fbd0d470437e527c764daa294d1521ca7509a6af", "committedDate": "2020-10-27 14:04:21 -0400", "message": "Implementing changes as per review"}, {"oid": "c883a5f8c0085c74e8f448ecd3c0f9c04227b067", "committedDate": "2020-10-27 17:22:03 -0400", "message": "Move spare part helpers to Warehouse and add tests"}, {"oid": "dfca32fc2a15a2908cd4f1277261d416fcad1f00", "committedDate": "2020-10-27 21:14:06 -0400", "message": "merge from upstream"}, {"oid": "a7d7c78d0149d3de3828501499fdf61b5ae75be6", "committedDate": "2020-10-28 14:17:13 -0400", "message": "Merge pull request #2167 from sixlettervariables/add-parts-warehouse"}, {"oid": "d9aa78378bd639bd9bd8b36e16e9d407d5c2f1a6", "committedDate": "2020-10-28 14:28:37 -0400", "message": "Clean up part events in Campaign"}, {"oid": "f6acac4474902742fd52f7d3d9cc3cf3c074d16a", "committedDate": "2020-10-28 15:35:29 -0400", "message": "Address LGTM nit"}, {"oid": "b60b5a84ad487fe05e6369a11fedccb4f233a69d", "committedDate": "2020-10-29 15:28:06 -0400", "message": "Move Hire Personnel for a Unit to an action"}, {"oid": "d32837864805c67ac3894ce3a6b84ee8dae064a3", "committedDate": "2020-10-29 15:43:23 -0400", "message": "Don't use unit IDs for parts needing service"}, {"oid": "92b838a6428bae18030b98719a0c20d399377282", "committedDate": "2020-10-29 15:51:09 -0400", "message": "Move unnecessary unit logic from Campaign and into Unit"}, {"oid": "fd327a8f439a378f8f34afcb3067fe57153dcc2d", "committedDate": "2020-11-03 21:23:25 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_MHQPortraitSelector"}, {"oid": "0cbe836f9e807faf4cbef1d391b1ce3ad0e865d1", "committedDate": "2020-11-04 16:17:23 -0500", "message": "Add Quartermaster to manage machines and materiel"}, {"oid": "18cddebe515dbc58e76c49ef789cb3f4b31bc8a2", "committedDate": "2020-11-06 14:57:11 -0500", "message": "Address PR feedback and fix #1801"}, {"oid": "dd8b9c84414cb11c30ec6e2d395e2260235cd73a", "committedDate": "2020-11-06 14:58:38 -0500", "message": "Fix extraneous whitespace"}, {"oid": "31c96a9e64873aa2840946dbb1c12d347994780d", "committedDate": "2020-11-06 16:10:50 -0500", "message": "Swapping portrait generation to use system-based file path comparison"}, {"oid": "8bf24b6a7be023940aad58a0c3c3ded1ee2a9358", "committedDate": "2020-11-06 16:50:16 -0500", "message": "Fixing merge conflicts"}, {"oid": "206529fd93c7b6efd22949d747ea14ec2a1942ed", "committedDate": "2020-11-06 19:38:46 -0500", "message": "Merge pull request #2185 from sixlettervariables/use-units-not-ids-for-transports"}, {"oid": "f246ee2085262fe713a9f24b3eaf6e7adb142e41", "committedDate": "2020-11-07 10:40:39 -0500", "message": "Moving portrait generation code into a random portrait generator"}, {"oid": "139d94f86981a4c6b681ec14d16630b99198024a", "committedDate": "2020-11-07 12:32:07 -0500", "message": "AbstractIcon: Simplifying icon-related code"}, {"oid": "cbec2bdc4861f772bb509fc69f37a8c053522347", "committedDate": "2020-11-07 12:39:03 -0500", "message": "Removing duplicate constants in campaign"}, {"oid": "e9c4a88af33312b049543ac024e2c32784a7b209", "committedDate": "2020-11-07 12:52:54 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_AIPS"}, {"oid": "76f57ccbde3ae98e58e5264c5d06be29b03ce3af", "committedDate": "2020-11-07 15:16:08 -0500", "message": "Merge pull request #2209 from Windchild292/dev_Windchild_RPG"}, {"oid": "067bacc6c00b10192faa2b4e13d4c2127ba75292", "committedDate": "2020-11-07 22:39:06 -0500", "message": "Merge pull request #2211 from Windchild292/dev_Windchild_AIPS"}, {"oid": "a38a43b4cc7f7670aa7ffad2bf318bc15334d0a1", "committedDate": "2020-11-08 13:55:37 -0500", "message": "Merge remote-tracking branch 'upstream/master' into add-quartermaster-2"}, {"oid": "6b4dfeadd20c22e92cb2a0328030ed58c3df5cd1", "committedDate": "2020-11-14 19:29:15 -0500", "message": "Swapping Genealogy and FormerSpouse to no longer use id when active."}, {"oid": "aa59e47ee67a276b3a415ab3cb761291fa2d1593", "committedDate": "2020-11-15 16:10:53 -0500", "message": "Only return non-zero quantities of parts, fixing #2231"}, {"oid": "24c2199bd396e7e059f3a3123c060fce92c04726", "committedDate": "2020-11-30 21:41:10 -0500", "message": "merge from upstream"}, {"oid": "6b3e4afa0664f35d2fc49a8e881b2fd7f22ea981", "committedDate": "2020-12-04 07:37:02 -0500", "message": "Use tested spare part consolidation logic"}, {"oid": "749469b9d6c8f7a36748d76c53dae5cc39365894", "committedDate": "2020-12-04 10:33:33 -0500", "message": "Fixup whitespace"}, {"oid": "cb8a407413b0629636afe9dc153a93699cbcb2da", "committedDate": "2020-12-04 12:21:25 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_476"}, {"oid": "7c0dd98fed591d24803031e815a39480fae3da18", "committedDate": "2020-12-04 12:24:21 -0500", "message": "Fixing merge conflitcs"}, {"oid": "d770e67e26237234553967696e546ef4cd5e6c4a", "committedDate": "2020-12-04 16:20:00 -0500", "message": "Moving ranks to their own folder"}, {"oid": "198ea362215a2605015f13d5baf7a6f9a27e2323", "committedDate": "2020-12-04 17:57:54 -0500", "message": "Moving ranks system names to the Rank XML file"}, {"oid": "c88ca2c1c698dfe730b493048b630ef6d20ce973", "committedDate": "2020-12-13 02:45:36 -0500", "message": "Restore AtBContract references in the ContractMarket #2141"}, {"oid": "dce8434c1c674caf8ba284f7e99a0da72a679958", "committedDate": "2020-12-14 18:14:37 -0500", "message": "Merge pull request #2263 from Windchild292/dev_Windchild_2200"}, {"oid": "02b7023e03f921ec06430d3a3bfbf3fd4d06f12d", "committedDate": "2020-12-16 17:45:57 -0500", "message": "Add the ability to swap out instances of static classes"}, {"oid": "6fe11ed3dea3b240bc594dd3153526f8fa1efcd1", "committedDate": "2020-12-22 17:15:50 -0500", "message": "merge from upstream"}, {"oid": "1080fdc3cc0abf4b10a986fa95243f6a883a2446", "committedDate": "2020-12-22 17:22:20 -0500", "message": "Do not display unknown armor types in the Parts In Use report, fixes #2298"}, {"oid": "26577933fe91fcc839a403192479257fcf64f842", "committedDate": "2020-12-25 17:30:07 -0500", "message": "PlayerColours, Colour Camo Standardization, and standardizing camo selector"}, {"oid": "b7106b6df15109159676c4d5c76d6b57d98d749c", "committedDate": "2020-12-25 17:31:02 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_1727"}, {"oid": "256150fa6780932824d092bb5e1cfc5160a82798", "committedDate": "2020-12-26 23:02:07 -0500", "message": "Fixing colour camouflage during colour set"}, {"oid": "05bda11a452176725c2023ddfda641c5b9d77ff2", "committedDate": "2020-12-30 11:28:06 -0500", "message": "Merge pull request #2294 from sixlettervariables/add-contract-market-tests"}, {"oid": "d96560342ac372c6159e2eb36a930d730575079e", "committedDate": "2020-12-31 10:50:32 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_1727"}, {"oid": "87fef495531a68093af610ebd4d170ad9fe58ed7", "committedDate": "2020-12-31 13:13:30 -0500", "message": "Applying requisite changes in other files"}, {"oid": "1077aa3ce47d85a2b52d46fe24d0a9d6500338b3", "committedDate": "2021-01-07 22:38:01 -0500", "message": "Implementing PersonnelRole Enum"}, {"oid": "7ee43f4d3196080806f016767d68fcc646806b95", "committedDate": "2021-01-08 13:14:46 -0500", "message": "Fixing merge conflicts"}, {"oid": "461f2e03e5c7b7e233ccb188ab3acbea84217051", "committedDate": "2021-01-09 12:33:02 -0500", "message": "Fixing merge conflicts"}, {"oid": "7715f2d53d7b785432c6d12abe076dd9fe734b63", "committedDate": "2021-01-11 00:08:57 -0500", "message": "Continuing camouflage AbstractIcon implementation"}, {"oid": "5c767fe20f909aed7ad9ee04af783fada0f01183", "committedDate": "2021-01-13 14:44:22 -0500", "message": "Fixing colour set and moving EntityImage to use proper camo type"}, {"oid": "13a860aed5400a5bf2ccb7ff55f12b6266ed1c86", "committedDate": "2021-01-14 15:40:05 -0500", "message": "Moving to fully use isConventionalInfantry"}, {"oid": "b395926d66b44f814eeccbcdf238377754b3497f", "committedDate": "2021-01-16 12:03:30 -0500", "message": "Swapping to using streams for missions"}, {"oid": "3c08e5b43761cd85a411618df940a669f43b0f74", "committedDate": "2021-01-16 12:03:41 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_MissionStatus"}, {"oid": "56075ee22d31cf6645cfbc078f6d0059a7c35a2e", "committedDate": "2021-01-16 13:07:08 -0500", "message": "Swapping to stream implementation"}, {"oid": "c56982c6b4c7590fa58659f5739adb6fb98c38b3", "committedDate": "2021-01-16 13:20:27 -0500", "message": "Applying changes from personal review"}, {"oid": "bac1ae00109056ac5aaf4ddf35370fb62657e4ed", "committedDate": "2021-01-16 13:40:07 -0500", "message": "Moving to only use getMissions when necessary"}, {"oid": "6a6ab7d22aae49fceae02409ae8f3121e890ccc1", "committedDate": "2021-01-16 13:57:34 -0500", "message": "Moving to isActiveOn"}, {"oid": "e0a11cd0c98c4fd665190822f79c498645f15426", "committedDate": "2021-01-31 13:08:13 -0700", "message": "Renaming a bunch of personnel options"}, {"oid": "a16944f0ca0f8452a8500b311c0d4c1afd4f69ad", "committedDate": "2021-01-31 13:14:59 -0700", "message": "Finishing the option renames"}, {"oid": "3055e76295deb7d552bc3972b69cc6e0fb1f8760", "committedDate": "2021-02-01 10:17:56 -0700", "message": "Starting to implement Automatic Company Generation"}, {"oid": "909ceb8a84cdd6031bf90c300d47b4d2da527643", "committedDate": "2021-02-01 21:19:14 -0700", "message": "Continuing to work on an AtB Company Generator"}, {"oid": "50d74c591ba7b25978e91a326e3d0ce53513c6cd", "committedDate": "2021-02-07 16:50:13 -0700", "message": "Continuing to implement company generation and its options"}, {"oid": "426328755b88eceb8119a0c91696b2e655a0c00e", "committedDate": "2021-02-08 12:27:32 -0700", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_PersonnelRoles"}, {"oid": "9cbf543bf750926dffd2ad77d82e8da2dc416a54", "committedDate": "2021-02-08 12:57:48 -0700", "message": "Bugfixes and some code cleanup from personal review"}, {"oid": "f00627349f7dfb1bfb29305b3377fa3fea2776c5", "committedDate": "2021-02-11 10:55:45 -0700", "message": "Adding Unit::isConventionalInfantry to ensure the entity is null checked"}, {"oid": "d5767fac16735b748124c2759fa7e02388f3e3e0", "committedDate": "2021-02-11 12:52:56 -0700", "message": "Applying changes from personal review"}, {"oid": "d69c0121a94474264821a25df299ecf667dfefdf", "committedDate": "2021-02-12 22:37:21 -0500", "message": "merge from upstream"}, {"oid": "17e3819e3ef169b2b2bf9114df56a23fc8f57f8b", "committedDate": "2021-02-19 09:26:24 -0500", "message": "Add logging and error trapping on daily unit maintenance #2427"}, {"oid": "3a7dc0d62fbf19186d1bbebeefc14a1838733180", "committedDate": "2021-02-19 09:32:56 -0500", "message": "Add error trapping to daily part maintenance, related to #2427"}, {"oid": "efa0010ac4de3087fd997cad083dfcc7307f1fae", "committedDate": "2021-02-19 10:53:09 -0700", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_PersonnelOptionsTab"}, {"oid": "1e74b62a2b90eefb8fd7a24d4c24faf08d1c6b3b", "committedDate": "2021-02-19 12:27:59 -0700", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_AtBCompanyGeneration"}, {"oid": "8f0b7abad948bde3df857ec022c1a3668076b29c", "committedDate": "2021-02-26 13:31:57 -0700", "message": "2442: Fixing Ranks Issues: Removing ancient migration and code, Using proper setter, and using the Ranks as the spinner"}, {"oid": "d52c982d8da547329729b0caea1fffab274e1b0c", "committedDate": "2021-02-27 10:23:14 -0500", "message": "Use MM's new UnitNameTracker for name collisions"}, {"oid": "3c5f987fa51fbe18454c55214f4d5d5f2b980a90", "committedDate": "2021-03-01 09:12:20 -0700", "message": "Fixing merge conflicts"}, {"oid": "b9f8896698477ed928a80443d0345d6397c58bb2", "committedDate": "2021-03-03 10:07:04 -0700", "message": "Fixing merge conflicts"}, {"oid": "1a9d000431b1f187634f7e6ef15161dd07678998", "committedDate": "2021-03-05 12:19:51 -0700", "message": "Continuing to work on the company generator"}, {"oid": "7f59899475e511f98ed9f64a1c10efab11737c43", "committedDate": "2021-03-05 21:50:52 -0500", "message": "merge from upstream"}, {"oid": "1a6354d39d3f6108e9e0e6f9e455c5a126627347", "committedDate": "2021-03-06 10:44:21 -0500", "message": "Address review comments"}, {"oid": "18c7330a3cc319d1dc3e55892a46c5c80539db9a", "committedDate": "2021-03-06 09:56:12 -0700", "message": "Fixing merge conflicts"}, {"oid": "b19752176bb0619f7ccda9f75d551b050521a106", "committedDate": "2021-03-08 23:25:41 -0500", "message": "merge from upstream"}, {"oid": "0bc70593b2b327657e4ff7709e320451adfadbe6", "committedDate": "2021-03-09 09:01:53 -0700", "message": "Fixing merge conflicts"}, {"oid": "9eca5ea7a7d0fe44db02d1ce091f5bf294cb156d", "committedDate": "2021-03-09 09:07:57 -0700", "message": "Fixing merge conflicts"}, {"oid": "baefb52c3074832565148fffae6d1363449fa8ae", "committedDate": "2021-03-09 09:19:18 -0700", "message": "Fixing merge conflicts"}, {"oid": "9499ad003bfeb58930187abad3334129be912b4e", "committedDate": "2021-03-09 09:23:18 -0700", "message": "Fixing merge conflicts"}, {"oid": "d0e34e3b80c163ff4ed03474a3adcd39d061c9ee", "committedDate": "2021-03-09 09:39:24 -0700", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_ShoppingList"}, {"oid": "8ee805b229c9373e653376a749274023ef13139b", "committedDate": "2021-03-09 11:54:07 -0500", "message": "Merge pull request #2373 from Windchild292/dev_Windchild_isConventionalInfantry"}, {"oid": "559cb006d560fd2099639e701e37538aded7f3a1", "committedDate": "2021-03-09 12:19:33 -0500", "message": "Merge pull request #2337 from Windchild292/dev_Windchild_ShoppingList"}, {"oid": "2bf37308c59c435acc52e0cf512ce9f74d1adc7e", "committedDate": "2021-03-09 10:26:52 -0700", "message": "Fixing merge conflicts"}, {"oid": "62726bf22f84cafc8872cbdebd5a8edce980e60a", "committedDate": "2021-03-09 10:27:33 -0700", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_CamouflageIcon"}, {"oid": "5082524cc2a32c4a8360cb845951a5e2b94300df", "committedDate": "2021-03-09 11:46:51 -0700", "message": "Fixing merge conflicts"}, {"oid": "c640fe5cc744f25a6fb292dd50220c8ecfe1c986", "committedDate": "2021-03-09 12:27:38 -0700", "message": "Fixing merge conflicts"}, {"oid": "64b151aab1a311e538c895526ba3f807216917c1", "committedDate": "2021-03-11 19:48:54 -0700", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_MissionStatus"}, {"oid": "98253ba4fbbd681dca588b7cb766e8439c19d880", "committedDate": "2021-03-11 19:59:41 -0700", "message": "Applying bugfixes from review"}, {"oid": "8d7d2a8df4596249f133919b569b56249b0068aa", "committedDate": "2021-03-12 14:28:19 -0700", "message": "Improving default contract name and sort"}, {"oid": "c13dedfdb7ce73cfdfe1d464e83765140336736c", "committedDate": "2021-03-12 14:59:22 -0700", "message": "2458: Adding Insufficient Astech warnings for MRMS and adding some more Astech/Medic pool functions"}, {"oid": "d2b11fb805eea82905ab0d8f846ca96bd69124e3", "committedDate": "2021-03-13 09:01:10 -0700", "message": "Fixing merge conflicts"}, {"oid": "902ebb67bf5dbe2e94cc32810992a2d1aa6c321c", "committedDate": "2021-03-13 09:02:31 -0700", "message": "Fixing merge conflicts"}, {"oid": "ec5843cb0d12174c7d5f83419268e5184d2d60f6", "committedDate": "2021-03-13 09:08:04 -0700", "message": "Fixing merge conflicts"}, {"oid": "1e0c0d260af35ecf86a9b8b9519c8cceee2e7028", "committedDate": "2021-03-13 11:47:11 -0700", "message": "Moving the unit market changes into an individual branch that contains some parts of the contract market changes"}, {"oid": "a5382b0386cb0354a4b3c870fdd8fee5e2f5330a", "committedDate": "2021-03-13 22:22:50 -0500", "message": "additional code review changes"}, {"oid": "fe6e045bb8acb2700cc38bd6a25ec62011977264", "committedDate": "2021-03-14 01:21:48 -0500", "message": "merge from upstream"}, {"oid": "48663cfaebb3a6a04f5680e7f755c532bd159779", "committedDate": "2021-03-14 10:58:03 -0600", "message": "Fixing merge conflicts"}, {"oid": "b8ccd096938dcbd22c56b4a93c87c78d770df189", "committedDate": "2021-03-16 10:03:47 -0600", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_AbstractUnitMarket"}, {"oid": "00db4b9f4381f0d6bcaadbbaa197f0be1c80d30b", "committedDate": "2021-03-17 12:29:14 -0400", "message": "Merge pull request #2445 from sixlettervariables/issue-2597-protect-duplicate-name-hash"}, {"oid": "a79e2e08ae5167e26dc37999b749296e47e179b9", "committedDate": "2021-03-17 12:27:27 -0600", "message": "Finishing the Unit Market Dialog"}, {"oid": "9d4975c56dc9ea4c18da5c7b146cfa794453f668", "committedDate": "2021-03-17 12:53:48 -0600", "message": "Swapping to EmptyUnitMarket instead of null"}, {"oid": "795721747293b0a0a0b4a5e12334158e9da303da", "committedDate": "2021-03-17 14:00:33 -0600", "message": "Fixing merge conflicts"}, {"oid": "aac2ced366aa376eb9fa78ab230f38e43d0c8362", "committedDate": "2021-03-17 21:16:52 -0400", "message": "code review changes"}, {"oid": "67d86a55c23420a76995a1457504c22f1b9cc48a", "committedDate": "2021-03-18 10:00:41 -0600", "message": "338: Base Free Time Sort"}, {"oid": "b634beb8d18a3ebafa13e3332256da259e3ef1c1", "committedDate": "2021-03-18 14:35:10 -0600", "message": "Finishing up working on abstracting out the Unit Market"}, {"oid": "8627de7d060ea44d3e33d04c259f8ab05f5bba9f", "committedDate": "2021-03-21 20:29:53 -0400", "message": "merge from upstream"}, {"oid": "04087a9bc33d0e3547e9c2dc68db496eac62b82b", "committedDate": "2021-03-21 20:10:23 -0600", "message": "Fixing merge conflicts"}, {"oid": "093eaeb8fbe362bb2d525d661180c433576aab9b", "committedDate": "2021-03-24 00:26:51 -0400", "message": "merge from upstream"}, {"oid": "2a2559d3ab5da713e7b8864ab0de458849dce6b6", "committedDate": "2021-03-24 09:29:25 -0600", "message": "Swapping over to using a three tiered rank setup"}, {"oid": "1e4e1993ec9f2278c7f326d28bcae5a7bff9c4a0", "committedDate": "2021-03-24 12:05:23 -0600", "message": "Heavy simplification of rank profession code"}, {"oid": "a57000e9696c4bf593f3215fa36543b2d13ed5ea", "committedDate": "2021-03-24 12:30:48 -0600", "message": "2196: Swapping to a standardized display wrapper class for rank display"}, {"oid": "b903aa7de36203afa40ede49922eb9e422fdcf43", "committedDate": "2021-03-24 13:07:46 -0600", "message": "1483: Adding Rank System import/export"}, {"oid": "e5b1d3a3fc6d825d722e496ad49832555fa65754", "committedDate": "2021-03-25 14:08:49 -0400", "message": "units deployed to StratCon tracks are ineligible for repairs"}, {"oid": "e7042962dd815937b9d91c1335d85ccec3647bf7", "committedDate": "2021-03-30 13:26:17 -0400", "message": "Merge pull request #2371 from Windchild292/dev_Windchild_CamouflageIcon"}, {"oid": "091d87a31e8cf5d1061ccf76a256bf990a0a623b", "committedDate": "2021-03-30 11:27:53 -0600", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_2449"}, {"oid": "37144650aef43bd5f3a8a14257376f2d6fe133f8", "committedDate": "2021-03-30 16:21:13 -0400", "message": "merge from upstream"}, {"oid": "5854d37bf8fbd63f741b9601ef373a16253a9b32", "committedDate": "2021-04-04 09:12:14 -0600", "message": "Adding the ability to create a custom rank system"}, {"oid": "db96404f216df48ce5321de053ce56015837d2cd", "committedDate": "2021-04-04 09:43:32 -0600", "message": "Renaming the campaign rank system methods to properly handle rank system changes"}, {"oid": "ae6bdf14123e6ac4ba92f5884b58b533b6cad2d3", "committedDate": "2021-04-04 10:12:54 -0600", "message": "Moving personnel rank changes to their proper location within person"}, {"oid": "19f0f0ce5d069f8f6f4f481cda04cdee3e05402a", "committedDate": "2021-04-04 11:59:18 -0600", "message": "Working on rank import/export"}, {"oid": "a34e385bf50ab28870531fe663d288b7b98b2697", "committedDate": "2021-04-06 10:54:55 -0600", "message": "Fixing and improving validation issues"}, {"oid": "3f3d7b237f61dd118eeb39087eb7fe9de6be03a0", "committedDate": "2021-04-06 11:53:59 -0600", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_GenealogyIdReference"}, {"oid": "80202c7f73397f3bc36193b0f3e2fce444bc4070", "committedDate": "2021-04-06 16:04:51 -0600", "message": "Fixing merge conflicts"}, {"oid": "ab655fb9abe6d2b9be4e20eba7e4c74b4b8e5c22", "committedDate": "2021-04-06 16:20:53 -0600", "message": "Fixing merge conflicts"}, {"oid": "729ef155ccdbaca3a1f23f1e57309d3b973851da", "committedDate": "2021-04-06 16:38:48 -0600", "message": "Fixing merge conflicts"}, {"oid": "a4c29e55f023d3416dd5e3f18a9d2061ab841fa1", "committedDate": "2021-04-06 17:56:58 -0600", "message": "Fixing merge conflicts"}, {"oid": "47bf0ed7fa9b09a4d76b634d900cceac953e17ed", "committedDate": "2021-04-06 19:54:46 -0600", "message": "Fixing merge conflicts"}, {"oid": "c2d264c23786de4ea703861360c3bcb46e79c5ac", "committedDate": "2021-04-07 00:13:59 -0400", "message": "merge from upstream"}, {"oid": "a5d70a5c672e494c7ec8be19e05d642b0259c9c4", "committedDate": "2021-04-07 14:24:17 -0600", "message": "Implementing multiple new procreation options and moving it to work based on a supplied date"}, {"oid": "18e6e46b095f8bbb1c623c60fd3aa177b7fe8682", "committedDate": "2021-04-09 09:22:39 -0600", "message": "Fixing merge conflicts"}, {"oid": "ae01b6e6d0fa55b766f741fa6fb35f727fff344b", "committedDate": "2021-04-12 09:45:59 -0600", "message": "Creating ScenarioStatus Enum and updating how scenarios are gotten"}, {"oid": "133e5865e2ee8dd5900b26dfe5f9aa0459a1a04c", "committedDate": "2021-04-14 11:31:25 -0400", "message": "multiple bugs with ignoring scenarios; ground pirats on air maps"}, {"oid": "3d8916caadfbc4085e509724142f929fc9d7f1d5", "committedDate": "2021-04-16 17:31:08 -0400", "message": "add text resources; remove campaign scenarios after ignoring in stratcon UI"}, {"oid": "2e00ea9a5b972b07d7446e75a06d3d493ac69426", "committedDate": "2021-04-16 21:14:35 -0400", "message": "code review changes"}, {"oid": "becffdc94075004fa3890bb36799389a48105c33", "committedDate": "2021-04-16 23:10:50 -0400", "message": "code review changes; data fix; stop nagging once user hits 'no' once"}, {"oid": "d71320d4f7a9ae41189a6b4651979960cb9dcc0f", "committedDate": "2021-04-20 21:55:21 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_2449"}, {"oid": "39603f48e1d441dd892227bef76e398c95cd4852", "committedDate": "2021-04-20 21:59:13 -0400", "message": "Fixing merge conflicts"}, {"oid": "3f7306636c42a999caf904b8d513f267243def42", "committedDate": "2021-04-20 22:01:54 -0400", "message": "Fixing merge conflicts"}, {"oid": "1c0e5821f637a666ef7632b5d821db62d76f624d", "committedDate": "2021-04-20 22:20:35 -0400", "message": "Fixing merge conflicts"}, {"oid": "9b9545c3b2e6890b9bef97677c61bb175cd5cc89", "committedDate": "2021-04-21 00:39:22 -0400", "message": "allow extra time for maintenance"}, {"oid": "de34b46d2f53c172612ebe5aa1abffe16b249f06", "committedDate": "2021-04-23 10:23:26 -0400", "message": "Bugfixing"}, {"oid": "b82fd9901fd0447da0211522ffc97ccae5c708ac", "committedDate": "2021-04-23 11:36:57 -0400", "message": "Fixing merge conflicts"}, {"oid": "bb7b0c375b9a2fd6baeced3e5e94501eb2e636ed", "committedDate": "2021-04-23 13:03:53 -0400", "message": "Moving into selectors folders"}, {"oid": "1ba164a58381a4be88ec479fee5841c1b8cdcf99", "committedDate": "2021-04-23 13:15:11 -0400", "message": "Making initial faction changes for constructors and ordering"}, {"oid": "fc7a0539b85c7af6a166ed9d779e7b723307b883", "committedDate": "2021-04-23 15:57:04 -0400", "message": "Making RandomOriginOptions, which will allow its use in multiple locations"}, {"oid": "1741bea67582d0555d094cbdd0fa977eec707bcc", "committedDate": "2021-04-24 22:10:27 -0400", "message": "fix scenario date/force resets"}, {"oid": "cebc3d0c231e54580eb29e4756f549b702b9ace1", "committedDate": "2021-04-27 14:41:42 -0400", "message": "Merge pull request #2462 from Windchild292/dev_Windchild_2460"}, {"oid": "b0c3badc393ff67ccba2cbe34623ca496c576782", "committedDate": "2021-04-27 14:42:27 -0400", "message": "Merge pull request #2352 from Windchild292/dev_Windchild_PersonnelRoles"}, {"oid": "138d08410b585fae3ba4af354d18d2b15d5d36c8", "committedDate": "2021-04-27 14:48:43 -0400", "message": "Fixing merge conflicts"}, {"oid": "5f426e90c201a24d339c0322897809938b79db5a", "committedDate": "2021-04-27 15:08:01 -0400", "message": "Fixing merge conflicts"}, {"oid": "7b4772ec38db2aa8d657d0a22ed7868d0c4f6117", "committedDate": "2021-04-27 15:45:52 -0400", "message": "Fixing merge conflicts"}, {"oid": "ce0b3b652feb9205fb4ed8cc3ae599bb5da9a308", "committedDate": "2021-04-27 15:47:48 -0400", "message": "Fixing merge conflicts"}, {"oid": "f7d684241f42639eb35d60508c39dbb00b0d9dbc", "committedDate": "2021-04-28 10:56:49 -0400", "message": "Fixing merge conflicts"}, {"oid": "8dd83b6c46f8f2454ba4d4accfe8176c58e398d7", "committedDate": "2021-04-29 23:22:27 -0400", "message": "Fixing merge conflicts"}, {"oid": "87033ef81af06d5a8c2af9d93a9b9057e49f0fde", "committedDate": "2021-05-01 17:09:56 -0400", "message": "Fixing merge conflicts"}, {"oid": "815f8fa858fdbf707019709a5d51524b5e61472a", "committedDate": "2021-05-04 14:12:54 -0400", "message": "Dependent Flag Swapover"}, {"oid": "66f6a880e1b615fb97de9757be649fc18c10f049", "committedDate": "2021-05-04 19:52:08 -0400", "message": "Implementing auto-hiring pool on new day"}, {"oid": "bbcc984be566d1587a598efc974fb1dbb399868a", "committedDate": "2021-05-05 18:25:22 -0400", "message": "Fixing merge conflicts"}, {"oid": "741d61daa6ac3570f7a3c569ee6e6dc87a902441", "committedDate": "2021-05-08 20:32:38 -0400", "message": "Fixing merge conflicts"}, {"oid": "227d6642ef68511eb067588bdf263aa2ad88f421", "committedDate": "2021-05-09 10:13:42 -0400", "message": "Creating the backend implementation for random procreation modules"}, {"oid": "e0faed52760616365379933d91f9343f58c61cb4", "committedDate": "2021-05-09 14:30:58 -0400", "message": "Renaming the directory from random procreation to procreation"}, {"oid": "7943361f04c7c5cc1753852ddba3a77d8259ab57", "committedDate": "2021-05-11 09:52:44 -0400", "message": "2607: Starting to work on redoing the salvage calculations"}, {"oid": "0539aea6159ca7cfbbb77a035ffb6c51d590d29f", "committedDate": "2021-05-11 10:40:37 -0400", "message": "2607: Properly calculating and paying for payment overages"}, {"oid": "33d43f4fe9a41925e3cc417f5d782c19f097ad63", "committedDate": "2021-05-15 06:53:31 -0400", "message": "Merge pull request #2583 from Windchild292/dev_Windchild_DependentFlagSwapover"}, {"oid": "55da24b03b3ecbc71f7d6ab739e1820f1814fda1", "committedDate": "2021-05-17 13:46:12 -0400", "message": "Creating AtB Contract Type and AtB Morale Level enums"}, {"oid": "470df7bcd395e57ffe3f3e59660f0e468cdcfaf1", "committedDate": "2021-05-18 01:31:38 -0400", "message": "fix multiple issues generating fixed objective scenarios"}, {"oid": "ffcd06cfa996127e858ea60096b58286f97a8a8a", "committedDate": "2021-05-19 09:33:39 -0400", "message": "Implementing save code swapover"}, {"oid": "c03f4deaeb4d632a5e2e614ae5204da255eea805", "committedDate": "2021-05-22 22:01:49 -0400", "message": "Merge pull request #2608 from Windchild292/dev_Windchild_2607"}, {"oid": "f9cf763bd4ff9a8e017e54464ad20989c2e772d3", "committedDate": "2021-05-23 23:33:39 -0400", "message": "Fixing merge conflicts"}, {"oid": "b5b8facc5de91af84188412dc8d1ec3df00e3ae6", "committedDate": "2021-05-24 13:55:12 -0400", "message": "Fixing merge conflicts"}, {"oid": "1b33879affd0101e7870d5696137e354b636d342", "committedDate": "2021-05-24 13:57:36 -0400", "message": "Fixing merge conflicts"}, {"oid": "f4c2aadcbf8a9e3bc45db1e7227160e36f43d47a", "committedDate": "2021-05-24 14:00:22 -0400", "message": "Merge branch 'master' into dev_Windchild_CamouflageRework"}, {"oid": "fe024592b6ac70b9cf1a9cd546a54ebc8bb02363", "committedDate": "2021-05-24 17:16:21 -0400", "message": "2625: Properly Clear Tech Units on Person removal/retirement"}, {"oid": "530decc0b587e53087c8cacbe31aeba13dd82f41", "committedDate": "2021-05-29 11:32:44 -0400", "message": "Fixing merge conflicts"}, {"oid": "156500be4e08594aeaf3efa424938f295b2ed86e", "committedDate": "2021-05-29 16:04:26 -0400", "message": "Phase one of Campaign Preset rework"}, {"oid": "34d76d4e22674638bd3ce602a713238ff5c203b8", "committedDate": "2021-05-30 14:33:28 -0400", "message": "Phase Two: finishing internal work and starting on GUI implementation"}, {"oid": "12f96f2ab3335b805508c31bbbc08a9bcf5491d7", "committedDate": "2021-05-30 21:57:28 -0400", "message": "Fixing merge conflicts"}, {"oid": "b109f86e86e8aba9c5b4aa279919f2d6547979b9", "committedDate": "2021-05-31 10:38:11 -0400", "message": "Fixing merge conflicts"}, {"oid": "65a009b4cf6307795c815aacdb82feb8fba0a01d", "committedDate": "2021-05-31 17:00:21 -0400", "message": "Fixing merge conflicts"}, {"oid": "14d482cda0564e28b6c5ea95e20725e2200f51ff", "committedDate": "2021-05-31 17:57:20 -0400", "message": "Merge branch 'master' into maintenance_extra_time"}, {"oid": "00a30fe49ee531dda71cb88bacc2f56dbe0a5b9e", "committedDate": "2021-05-31 18:05:23 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_2654"}, {"oid": "fa54f8e9f392dc2f02cb5b1b5bc9e8c428a88e61", "committedDate": "2021-06-02 12:29:42 -0400", "message": "Creating a base ignorable nag dialog for MekHQ and implementing it in all current new day nags"}, {"oid": "2509a0841acae929e7340ae5fe4d01f7bf437d40", "committedDate": "2021-06-02 16:20:48 -0400", "message": "Fixing merge conflicts"}, {"oid": "6b416ee90791ecb016edf0ae5b5c0e16ebdd4760", "committedDate": "2021-06-09 16:05:55 -0400", "message": "Fixing merge conflicts"}, {"oid": "d36c47d7aaa8978e4d523b2031d299babd654e2a", "committedDate": "2021-06-09 16:08:35 -0400", "message": "Fixing merge conflicts"}, {"oid": "7fe956938b8b76f05f395b681f8bd5f4bd02d25a", "committedDate": "2021-06-09 21:27:13 -0400", "message": "Fixing merge conflicts"}, {"oid": "055b02a76318d18eed5ad27a93333893cf8b74db", "committedDate": "2021-06-09 22:30:38 -0400", "message": "Fixing merge conflicts"}, {"oid": "e8c2b13279e2b5d226f4de5b350e2d12ff468577", "committedDate": "2021-06-11 00:26:36 -0400", "message": "Fixing merge conflicts"}, {"oid": "d4b45a4c9543d0786feacc4344d364fee2997970", "committedDate": "2021-06-11 12:46:28 -0400", "message": "Fixing merge conflicts"}, {"oid": "2560bdda30482870c73884470b53cb579bcaa47a", "committedDate": "2021-06-14 13:25:17 -0400", "message": "Force icon implementation migration from outdated previous branch"}, {"oid": "6fd836ff4e8a233aa293e2a3fc08cd3316f64b66", "committedDate": "2021-06-14 14:23:04 -0400", "message": "Adding UnitIcon, GM Tools implementation, and baseline for export"}, {"oid": "eaf4453f2f1f40707d9594de5dd6aa83d594b776", "committedDate": "2021-06-14 18:04:32 -0400", "message": "Applying personal code review changes and starting unit icon code"}, {"oid": "e1a7f7166de5f36fa0c44b7151478c944e6a4b89", "committedDate": "2021-06-21 13:16:19 -0400", "message": "Apply overtime to the last chunk worked as well #2679"}, {"oid": "9c62597332ac0ba24004132e537ba0cf049741e3", "committedDate": "2021-07-01 12:35:33 -0400", "message": "Fixing merge conflicts"}, {"oid": "809c6366e1ce1dea3f4b2fa21841aab6639992a4", "committedDate": "2021-07-10 11:47:52 -0400", "message": "Finishing the portrait swapover"}, {"oid": "0ddba79849d418947ba1ce309a4c673ac78292d4", "committedDate": "2021-07-10 20:58:49 -0400", "message": "Bugfixing, phase 1"}, {"oid": "10a9609cabffc8f5e7068b6c0c33c0f65f796508", "committedDate": "2021-07-12 18:39:55 -0400", "message": "Fixing unit tests"}, {"oid": "06664ff8286a85fe165e5f92aaaf22326e692c90", "committedDate": "2021-07-15 10:22:09 -0400", "message": "Merge branch 'master' into dev_Windchild_476"}, {"oid": "e0e383e2453514ee7c9c7abc9214a2a1a869a068", "committedDate": "2021-07-15 10:34:25 -0400", "message": "Fixing merge conflicts"}, {"oid": "7211585d4a34159d5c80c9ea30fa44bc2746c1b4", "committedDate": "2021-07-17 20:03:19 -0400", "message": "Fixing a few potential divide by zero issues"}, {"oid": "a3eb7d3dfe3477e32117d175e717023f539795eb", "committedDate": "2021-07-17 20:11:58 -0400", "message": "Further cleanups from personal review"}, {"oid": "21a75e1c9ca5516bb7394f30fa2c0b4d9a68b9ad", "committedDate": "2021-07-17 20:27:51 -0400", "message": "Further cleanups, and adding an astech team size constant"}, {"oid": "35bffb052c1b608df03fb41f6548a3e9f847cca6", "committedDate": "2021-07-18 10:43:10 -0400", "message": "Fixing NPE warning and cleaning up the if statement"}, {"oid": "a7670828c4762e3852dbd248b348c2dd371b5018", "committedDate": "2021-07-18 12:12:40 -0400", "message": "Fixing possible confusion of local and field warnings"}, {"oid": "951b55f7a5fb6036e67897e709cd6a0dbbb45b39", "committedDate": "2021-07-18 12:33:08 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_Procreation"}, {"oid": "61cc2fd1669914bef276e018cb7562be422b1f7c", "committedDate": "2021-07-18 14:30:17 -0400", "message": "Removing Deprecated Usages: Logger swapover"}, {"oid": "542307adf490f10930d9470ff64879b4b7ee6b0a", "committedDate": "2021-07-20 10:11:31 -0400", "message": "Moving crew null check and fallback logic into Campaign::getShorthandedModForCrews"}, {"oid": "f6e661dba426e63388e9b57d224a7090006e3203", "committedDate": "2021-07-20 10:18:55 -0400", "message": "Merge pull request #2751 from Windchild292/dev_Windchild_AstechDivideByZero"}, {"oid": "f3bd90fefb0af89a7177be76f70aeed033a7b258", "committedDate": "2021-07-20 10:20:25 -0400", "message": "Fixing merge conflicts"}, {"oid": "424407a51980930adead83bbfa918bf2b0d8a441", "committedDate": "2021-07-20 21:09:32 -0400", "message": "Fixing merge conflicts"}, {"oid": "497f1345950b39b1eb1e2d1389b63a7fcd5eef14", "committedDate": "2021-07-20 21:26:53 -0400", "message": "Fixing merge conflicts"}, {"oid": "bc21146f53fc23bdfd1f5f4273f07b588b0904e2", "committedDate": "2021-07-24 10:15:39 -0400", "message": "Fixing merge conflicts"}, {"oid": "a5e9303ebeafcd74e0348b8b2f767c5f8e12c8cb", "committedDate": "2021-07-26 12:32:33 -0400", "message": "2558: Swapping removePerson to be object instead of id based"}, {"oid": "0a76a9693556237907de0f6e2a5a08f48dcfd3be", "committedDate": "2021-07-26 12:38:50 -0400", "message": "2558: Custom message for when dependants leave"}, {"oid": "1babc7de6f9de3b1f517061f1c249c3339f13e10", "committedDate": "2021-07-26 12:54:49 -0400", "message": "2558: Adding unique dependent add message"}, {"oid": "b214bdb7975aabd1cdc8d39cb9f1fdea3541b58d", "committedDate": "2021-07-26 15:13:02 -0400", "message": "Fixing merge conflicts"}, {"oid": "d86c1c8c70ae0bcc2a9d6dd09e7fe963745b5e37", "committedDate": "2021-07-26 22:20:42 -0400", "message": "Merge pull request #2478 from Windchild292/dev_Windchild_AbstractUnitMarket"}, {"oid": "d83ce12b4886460ba57e84afbf15b20e30fab693", "committedDate": "2021-07-28 15:48:34 -0400", "message": "Isolating RATs into the RAT Tab"}, {"oid": "3d303b442ab8d664c56fd8709d970f86c7eed83f", "committedDate": "2021-07-30 10:40:29 -0400", "message": "Loan code cleanup and refactoring"}, {"oid": "56910a666af8115ec4e364b98a16fc009c1a65b5", "committedDate": "2021-07-30 11:11:21 -0400", "message": "Fixing merge conflicts"}, {"oid": "ec7e4bc4aeed27a5b835b44d295642228bcc16c3", "committedDate": "2021-08-10 12:37:47 -0400", "message": "Transaction Type Enum"}, {"oid": "497976540984392426f984acd40477886555e06d", "committedDate": "2021-08-10 15:25:55 -0400", "message": "Fixing merge conflicts"}, {"oid": "1faa42c3d120f62fa60bebc946c56cae3ba293f8", "committedDate": "2021-08-10 15:47:16 -0400", "message": "Doing some personal review cleanup"}, {"oid": "be94a7ab35307e2b345d967cbd0163417ea9802d", "committedDate": "2021-08-12 21:28:51 -0400", "message": "bulletproofing for a couple of individual unit actions"}, {"oid": "01f8aa5c3d90cd2d8b553c5c8c73a336af524e8b", "committedDate": "2021-08-13 22:07:09 -0400", "message": "2798: Adding total XP earnings tracking"}, {"oid": "771c3107183e31fa9da9b2e417a6fc0d0b673a48", "committedDate": "2021-08-14 00:07:09 -0400", "message": "274: Moving Era definitions to a file"}, {"oid": "795d3aba4875a600dd0a6ec91a10cb7e90814c6c", "committedDate": "2021-08-18 12:48:20 -0400", "message": "Removing Person's Campaign save and switching to full pass-by-reference for Campaign"}, {"oid": "4e80bdad1f20ebfb53cfe559ade8975594f3d362", "committedDate": "2021-08-21 12:12:11 -0400", "message": "2754: Properly clearing Narc and iNarc Flags during scenario resolution"}, {"oid": "ed447da30212105694957e35687f1bfedd6b56b0", "committedDate": "2021-08-24 13:11:20 -0400", "message": "Merge pull request #2805 from Windchild292/dev_Windchild_274"}, {"oid": "7120d3b0aa69ebd282e855a4b2a47bda4697ba78", "committedDate": "2021-08-24 13:14:09 -0400", "message": "Merge pull request #2793 from Windchild292/dev_Windchild_TransactionType"}, {"oid": "9e7480b600f9290c00f5f082dd91201999d12f42", "committedDate": "2021-08-24 13:14:19 -0400", "message": "Merge pull request #2804 from Windchild292/dev_Windchild_2798"}, {"oid": "70aa4b94439c59d6e5de9d6191a3c0a02365e644", "committedDate": "2021-08-24 13:39:42 -0400", "message": "Fixing merge conflicts"}, {"oid": "0e72a8bc212f26b8d9b7bb789b0c1f84f1426c78", "committedDate": "2021-08-24 13:42:42 -0400", "message": "Fixing merge conflicts"}, {"oid": "3a01897bb20c8be27823164f09aca9af1aa3360d", "committedDate": "2021-08-24 13:53:59 -0400", "message": "Fixing merge conflicts"}, {"oid": "bacc8f3e733e0cd4cc0fa629ced5d3b5079abc76", "committedDate": "2021-08-24 17:23:41 -0400", "message": "Fixing merge conflicts"}, {"oid": "e273d7035001140a977ebe3299d17602ef52d498", "committedDate": "2021-08-28 17:37:23 -0400", "message": "Fixing merge conflicts"}, {"oid": "59fca0be576b219f25123793a2118255168d1c03", "committedDate": "2021-08-29 11:15:40 -0400", "message": "Modularized Marriage"}, {"oid": "6a48665a09b5cfd3b2309975077163fae687c39e", "committedDate": "2021-08-29 14:41:32 -0400", "message": "Adding creation dialog and bugfixing"}, {"oid": "0a89d7421946ba75d7d926af996b27e9e994a911", "committedDate": "2021-08-31 14:50:25 -0400", "message": "Fixing merge conflicts"}, {"oid": "0f4e17188d8360baf639cbc66dd29da85336be81", "committedDate": "2021-08-31 15:28:05 -0400", "message": "Applying changes from personal review"}, {"oid": "bd9dded105bfbfdf64e7b10e2059f2633326c113", "committedDate": "2021-08-31 15:39:04 -0400", "message": "Swapping to weighted double map"}, {"oid": "5eaf88579bd60bfee3c39a936a9d647a4eb1de4f", "committedDate": "2021-08-31 16:45:21 -0400", "message": "Reworking to use random origin options instead of the internally stored values"}, {"oid": "bbccfa2dcef0be4fbb07cd3af6cdbd15d7ced036", "committedDate": "2021-08-31 18:09:33 -0400", "message": "Missed two cases"}, {"oid": "7acc107b13f019250d4c17ee0b034a3aa263f56b", "committedDate": "2021-09-22 13:23:13 -0400", "message": "Removing MekHQ's version by swapping to a standardized suite version"}, {"oid": "f0a07bfbd15d93ff86dda49a32e0c489ca590a8c", "committedDate": "2021-09-22 17:45:34 -0400", "message": "Fixing merge conflicts"}, {"oid": "673baa71af916391d268ede436174881a85b7340", "committedDate": "2021-09-23 20:01:05 -0400", "message": "Adding the ability to automatically have the Operational Status indicator be determined on a new day"}, {"oid": "18f49cd8c6ba3721e84dce0b606a346b242cb49c", "committedDate": "2021-09-25 10:56:33 -0400", "message": "Moving training XP assignment to AtB new day processing"}, {"oid": "932423c6da7f04b29d61df88c014f5e432356eae", "committedDate": "2021-09-25 17:10:11 -0400", "message": "Standardizing and simplifying Campaign::getTargetForAcquisitioncalls"}, {"oid": "29c1cae15f03b025f7c6f4a4acdee0a86082eae8", "committedDate": "2021-09-25 17:12:00 -0400", "message": "2567: AtB Part Procurement uses proper campaign option"}, {"oid": "e1c6be34a128676429850de67af7a3c3e1d31c48", "committedDate": "2021-09-25 17:47:32 -0400", "message": "Fixing the active checks and removing the AtB casts"}, {"oid": "0527903721699cf7e73e7000ebc0db049c96529d", "committedDate": "2021-09-25 17:48:18 -0400", "message": "Removing testing logging"}, {"oid": "6dc414e21f3f3a8bf95c7059b83c0c34ced93e61", "committedDate": "2021-09-28 22:10:41 -0400", "message": "Merge pull request #2888 from Windchild292/dev_Windchild_2567"}, {"oid": "1065b3bc8de9084f48208d2ca865ce58ac8b3c41", "committedDate": "2021-09-28 22:29:59 -0400", "message": "Fixing merge conflicts"}, {"oid": "e55c3ca107c0d4a68d05b67ffa95825ee33af974", "committedDate": "2021-09-28 22:33:50 -0400", "message": "Fixing merge conflicts"}, {"oid": "6e5bfd3fe778c2db9847358b2bde358a61106707", "committedDate": "2021-09-28 22:38:51 -0400", "message": "Fixing merge conflicts"}, {"oid": "4fdc8e401f17fac7995037b1852f1ce2353c8e3f", "committedDate": "2021-09-28 22:48:35 -0400", "message": "Fixing merge conflicts"}, {"oid": "6f6fbddc710af1a588c433c779edd75f638a3c9d", "committedDate": "2021-10-01 10:01:00 -0400", "message": "Merge pull request #2880 from Windchild292/dev_Windchild_Version"}, {"oid": "901e499a75807e3ed64c36d0fcb8e1b024787c95", "committedDate": "2021-10-01 22:06:56 -0400", "message": "Fixing merge conflicts"}, {"oid": "b69522079e9a04b394864bbc4e43ff4c4e125cca", "committedDate": "2021-10-01 22:17:46 -0400", "message": "Fixing merge conflicts"}, {"oid": "84837c3610f8109aeb1985357178de229560de80", "committedDate": "2021-10-01 22:50:02 -0400", "message": "Fixing merge conflicts"}, {"oid": "4971437339838aa89b83785c6e9572074c95d245", "committedDate": "2021-10-02 23:21:37 -0400", "message": "Fixing merge conflicts"}, {"oid": "ed006b48eaf1c0580c2480f4f0000a3c1aed8361", "committedDate": "2021-10-10 00:10:05 -0400", "message": "Adding prisoner and clanner options for procreation"}, {"oid": "54e588d2cafddcab2f585c8ed5d6ee3c829d155f", "committedDate": "2021-10-10 01:00:00 -0400", "message": "Fixing merge conflicts"}, {"oid": "f211d8a677daa66c3a88f444de02a072ea5ab8a0", "committedDate": "2021-10-11 09:36:37 -0400", "message": "Fixing merge conflicts"}, {"oid": "3ee602c2e85defa1c3b05d08d609340d4b194883", "committedDate": "2021-10-11 09:37:52 -0400", "message": "Merge branch 'master' into dev_Windchild_2654"}, {"oid": "a30ac65fc45c76f1c1f6df0d70fa356aa41ef438", "committedDate": "2021-10-11 09:38:33 -0400", "message": "Merge branch 'master' into dev_Windchild_PersonnelRandomization"}, {"oid": "6f2f688a386d187426b7c92d4dd391c239d1ad70", "committedDate": "2021-10-11 09:43:54 -0400", "message": "Fixing merge conflicts"}, {"oid": "125e3093d92e248b4e50bc9131ff8fdeb35c6787", "committedDate": "2021-10-11 10:22:27 -0400", "message": "Fixing merge conflicts"}, {"oid": "f8e040a424e1e8d8f886b334ce6fe78c1c697e21", "committedDate": "2021-10-11 12:17:56 -0400", "message": "Standardizing canMarry and adding clanner/prisoner options"}, {"oid": "358b2e9bb76ee69f0aef232dc656af54a6b78e75", "committedDate": "2021-10-11 16:26:24 -0400", "message": "Creating a divorce module, with a daily percentage-based random divorce setup"}, {"oid": "8ecba07dd7693346338cbae98b207e87e1cfb844", "committedDate": "2021-10-14 20:08:46 -0400", "message": "Fixing merge conflicts"}, {"oid": "accf7255b1c83499aa1f79f5074b2bc44e3619f8", "committedDate": "2021-10-17 18:16:46 -0400", "message": "Fixing merge conflicts"}, {"oid": "4e4ae81eb8a7a923cdf8688c645023ce047c7d99", "committedDate": "2021-10-17 18:53:40 -0400", "message": "Fixing merge conflicts"}, {"oid": "08ec6ef40e59afa4cba88228bc29dba9745de098", "committedDate": "2021-10-18 15:52:01 -0400", "message": "Fixing merge conflicts"}, {"oid": "c67d7074f17378d88774a553e3fca273bc047705", "committedDate": "2021-10-18 15:52:40 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_PersonCampaign"}, {"oid": "1a7109d4439d3900ff897d0c9ba7091e88960ead", "committedDate": "2021-10-18 16:06:05 -0400", "message": "Fixing merge conflicts"}, {"oid": "2d589706bc9112203a6043adf8d7aed7d0f22301", "committedDate": "2021-10-18 16:07:21 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_ExpandedDeathStatus"}, {"oid": "84e2f57820e6fac4c9604e8fdf4c370849b21914", "committedDate": "2021-10-18 17:26:22 -0400", "message": "Fixing merge conflicts"}, {"oid": "033d776c732e66ad776357bee1afe597f5e77b20", "committedDate": "2021-10-30 15:59:59 -0400", "message": "Fixing merge conflicts"}, {"oid": "4e45f1a0a0bb1a3a900ecde01c8feab5a6e48329", "committedDate": "2021-11-01 17:31:14 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_AtBCompanyGeneration"}, {"oid": "258f3a3b0b352aa70b42b8c2034ebd6ab90d96ca", "committedDate": "2021-11-01 18:20:49 -0400", "message": "Fixing merge conflicts"}, {"oid": "7eea9a399d3d7400b1f2b94f6d772ad5416a0645", "committedDate": "2021-11-01 21:48:44 -0400", "message": "Fixing merge conflicts"}, {"oid": "3e4bca7cdb006005bd034f9621872250d0e96dbb", "committedDate": "2021-11-01 21:52:24 -0400", "message": "fixing merge conflicts"}, {"oid": "ab6c1c01bfb4498a16c3b9f69c18c4903900de83", "committedDate": "2021-11-01 22:00:44 -0400", "message": "Fixing merge conflicts"}, {"oid": "1b1b0f68f52f9d821ddc10f663a44fe6d72462cd", "committedDate": "2021-11-01 22:03:27 -0400", "message": "Fixing merge conflicts"}, {"oid": "f1ce41fa694124c762338f78fb45a139926db77c", "committedDate": "2021-11-01 22:20:22 -0400", "message": "Fixing merge conflicts"}, {"oid": "01163b1f4fae088ba39a2f1c1145d5653f71b9e8", "committedDate": "2021-11-01 22:22:46 -0400", "message": "Fixing merge conflicts"}, {"oid": "21600c478569436ab215402bbca4bbbeced841a8", "committedDate": "2021-11-03 20:59:54 -0400", "message": "Adding localization to all MekHQ resource maps"}, {"oid": "1a5ba2fa871c8629e951d371c2ee96cc29fa8f93", "committedDate": "2021-11-07 13:49:58 -0500", "message": "Fixing merge conflicts"}, {"oid": "a851f6c71e5a1f825a840c64be2bae6da2a77eaf", "committedDate": "2021-11-07 14:05:08 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_PersonnelRandomization"}, {"oid": "65eb27ddf74244265359db14e66c097eb2299df0", "committedDate": "2021-11-07 14:50:33 -0500", "message": "Fixing merge conflicts"}, {"oid": "1b57359b3037938ef8291d96de3449013c82b9a4", "committedDate": "2021-11-09 09:23:24 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_ForceIconRework"}, {"oid": "7e997be9838621bdc8bbecbcdbc908a7580060ed", "committedDate": "2021-11-12 21:17:13 -0500", "message": "Removing unused tech functionality"}, {"oid": "dbfb302ab8e895c2e37a41f10415f634d1039c4c", "committedDate": "2021-11-21 18:45:43 -0500", "message": "Expanding Finances newDay"}, {"oid": "b6ffe21c8b07b35f599a2f6bd11da05d7961af0d", "committedDate": "2021-11-23 10:10:34 -0500", "message": "Merge pull request #2028 from Windchild292/dev_Windchild_476"}, {"oid": "e51f331c5e7b430e3f560fee9ad58995fb944704", "committedDate": "2021-11-23 17:35:05 -0500", "message": "2962: AtB Campaigns Now Properly Load with Automatic or Tech Acquisition Skills"}, {"oid": "2f445541d15fd465279057131bf48ef28d9bd162", "committedDate": "2021-11-23 18:55:05 -0500", "message": "Fixing merge conflicts"}, {"oid": "c06560e49182859791bab98148ba76507f26612b", "committedDate": "2021-11-27 14:04:02 -0500", "message": "Merge pull request #2966 from Windchild292/dev_Windchild_2962"}, {"oid": "69f79e10f44976d90e36ca3acb5256b6dfc91548", "committedDate": "2021-11-27 18:49:28 -0500", "message": "Implementing the retirement and dependent stopgap options and option updates"}, {"oid": "135cb6d188296ed5db33602f9d65eacbedfb2fa3", "committedDate": "2021-11-27 22:07:45 -0500", "message": "Finishing dependent options and starting on retirement setup"}, {"oid": "a831b4695fd5ea8b1679db9068c85d9ac235f5e0", "committedDate": "2021-11-27 22:57:22 -0500", "message": "Starting to implement the new options"}, {"oid": "bfaed6eccd3257e67b05ad33dadd14cfd98ce560", "committedDate": "2021-12-02 18:05:59 -0500", "message": "Fixing merge conflicts"}, {"oid": "a31998dda25a2856241c10aba4f25a3e8975fc28", "committedDate": "2021-12-02 19:47:30 -0500", "message": "Fixing merge conflicts"}, {"oid": "8ae7fffc1b4afde219beaf122edf562b69a810d4", "committedDate": "2021-12-02 19:49:14 -0500", "message": "Fixing merge conflicts"}, {"oid": "c76c94e6cd4abe6e9f39bb57f5376dcfcf8c29ca", "committedDate": "2021-12-02 19:59:15 -0500", "message": "Fixing merge conflicts"}, {"oid": "8ad7114a3a34794b2d77e3d201f63d2c646a9361", "committedDate": "2021-12-04 14:45:10 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_RetirementDependentStopgaps"}, {"oid": "71c75c8296ecc0c857b75d51ff1c7984efa7e9aa", "committedDate": "2021-12-04 15:03:37 -0500", "message": "Finishing the internal code for the retirement and dependent stopgaps"}, {"oid": "4fb12af6ec7c26ac06d9a498016211a5e3889240", "committedDate": "2021-12-04 15:13:25 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_AssetTerms"}, {"oid": "ea8d42d1c280d499d207c0da43feb77a06b6dcba", "committedDate": "2021-12-04 16:10:22 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_MHQLocalization"}, {"oid": "97af694c5485ad1dbf5900228d3b5e6de405cb02", "committedDate": "2021-12-11 17:07:11 -0500", "message": "MekHQ Log4j 2 Implementation"}, {"oid": "122363fd9f8d850c11781b0ed50335433bcf418b", "committedDate": "2021-12-17 20:08:30 -0500", "message": "Fixing merge conflicts"}, {"oid": "b781d1a8406d5cfec346343463484ac519d1ee9a", "committedDate": "2021-12-20 13:20:34 -0500", "message": "Fixing merge conflicts"}, {"oid": "1bc3ac4e6576a7fa06103828a729d010f6a7b3ef", "committedDate": "2021-12-20 15:37:16 -0500", "message": "Actually print the stacktrace for individual exceptions"}, {"oid": "6e868f9400798d8cc8b61055b96de07531af1f34", "committedDate": "2021-12-20 16:21:24 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_RetirementDependentStopgaps"}, {"oid": "056f0d1e618651857b043280dbe226e80eb91d7a", "committedDate": "2021-12-20 16:27:18 -0500", "message": "Fixing merge conflicts"}, {"oid": "0e5e7675cc3b0606c97f5060a8fd53a69a90641e", "committedDate": "2021-12-20 16:31:40 -0500", "message": "Fixing merge conflicts"}, {"oid": "fb5e5a836a6100119706df72ee695325d77cf5af", "committedDate": "2021-12-20 16:36:02 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_PersonnelRandomization"}, {"oid": "30d7086d1389ed93b333b5eb614a4777498bd826", "committedDate": "2021-12-20 16:41:54 -0500", "message": "Fixing merge conflicts"}, {"oid": "c28b63e7005b99a3f80a9cb73b0255b8a2402db2", "committedDate": "2021-12-20 16:45:19 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_PersonCampaign"}, {"oid": "89a7c65022eabe2af8f5efaabaf9296aa79bde74", "committedDate": "2021-12-21 15:01:54 -0500", "message": "Fixing merge conflicts"}, {"oid": "23519608cf466cb86aef259568ba2aa8ddeb098a", "committedDate": "2021-12-21 16:00:33 -0500", "message": "Fixing merge conflicts"}, {"oid": "bbbe2057261145f9f51c2ac129b4cca3bcd2ccf6", "committedDate": "2021-12-21 16:04:48 -0500", "message": "Fixing merge conflicts"}, {"oid": "b65b9f1efdb52692da51596d934b6360533b2bf7", "committedDate": "2021-12-21 16:23:03 -0500", "message": "Fixing merge conflicts"}, {"oid": "a253bfba5d4bc811ccd0c6c17e659dff178fbbb0", "committedDate": "2021-12-21 16:30:49 -0500", "message": "Fixing merge conflicts"}, {"oid": "0caff4e79e691213a2621323b94dfadfa73c9060", "committedDate": "2021-12-22 08:16:56 -0500", "message": "Fixing merge conflicts"}, {"oid": "a44cee38dbe9808a000178e575eb90d60a401175", "committedDate": "2021-12-23 12:26:57 -0500", "message": "Merge pull request #3015 from MegaMek/dev_Windchild_3326"}, {"oid": "ea6a179e03d1519afc3236abe50978edc43fc3d8", "committedDate": "2021-12-23 12:32:38 -0500", "message": "Merge pull request #2812 from Windchild292/dev_Windchild_PersonCampaign"}, {"oid": "d88588cf01f272577d96e1ff2a27c7286def7db9", "committedDate": "2021-12-23 21:04:47 -0500", "message": "Fixing merge conflicts"}, {"oid": "94ca7dff3bd09ef2fbb82e5d3ce0a5dccab335a8", "committedDate": "2021-12-28 18:08:30 -0500", "message": "Fixing merge conflicts"}, {"oid": "5089ba272b3ca25ab52ca4fcc1bef3766377f2ec", "committedDate": "2022-01-08 13:22:56 -0500", "message": "Fixing merge conflicts"}, {"oid": "375a9524c6382f5214c980bf8ad8b07a22f75120", "committedDate": "2022-01-08 13:28:11 -0500", "message": "Fixing merge conflicts"}, {"oid": "0e0aa7780df25016999f813dc36110599ee1b380", "committedDate": "2022-01-08 13:40:54 -0500", "message": "Fixing merge conflicts, round 2"}, {"oid": "5cc8ac688c67e1e1817c0cbb4a78eaf7dd0a477b", "committedDate": "2022-01-08 14:03:23 -0500", "message": "Fixing merge conflicts"}, {"oid": "eb7c6c828694fb624746168dbb4c35b1289f6e11", "committedDate": "2022-01-08 17:22:10 -0500", "message": "Fixing merge conflicts"}, {"oid": "dcb18ce61944010cc634325d3f46ccaf907758be", "committedDate": "2022-01-08 18:01:56 -0500", "message": "Cleaning up a bit of person creation"}, {"oid": "4d86865e1498a1312a21b91323c33d18f33a8dc9", "committedDate": "2022-01-09 11:12:58 -0500", "message": "Adding missing nullable tag and fixing missing null handling for faction selector"}, {"oid": "6023dd377efcb7802f6c905de61231ec50fee675", "committedDate": "2022-01-09 11:48:57 -0500", "message": "Missed that a null faction is fine for planet generation"}, {"oid": "4bddfb6f0d3906ed96120594d84d4e476e42d971", "committedDate": "2022-01-19 17:09:56 -0500", "message": "Tearing out MekHQ/src/mekhq/MekHqXmlSerializable.java"}, {"oid": "cc823a078ddc1a8924d1e2c02e93375a6b27d327", "committedDate": "2022-01-19 19:19:33 -0500", "message": "Removing all serialVersionUID uses in MekHQ"}, {"oid": "c9ac45226f5852f8bb76af479c9d962105bbbed7", "committedDate": "2022-01-19 20:02:33 -0500", "message": "Mass spacing fixes"}, {"oid": "be1cfbd484c6adc1c8f66578c5bfe94b39047b3c", "committedDate": "2022-01-20 09:59:55 -0500", "message": "Applying changes from initial personal review"}, {"oid": "2c71e119c210a9c95690eae19a0cdab5beb69bd6", "committedDate": "2022-01-20 10:30:23 -0500", "message": "Updating everything using final PrintWriter so that they're up to date, so I have a nice way to track what's updated and what is not"}, {"oid": "bc2c2966614f17d153b03c3087b46c1a4b44b969", "committedDate": "2022-01-21 19:03:24 -0500", "message": "SuiteOptions: Naming standardization and finishing initial setup"}, {"oid": "f3b9f5b924748acfd1ad404aed3ae99e4382b885", "committedDate": "2022-01-24 12:24:25 -0500", "message": "Fixing merge conflicts"}, {"oid": "e8395d1d642870050d705d4fac2a0df255cea722", "committedDate": "2022-01-24 12:28:09 -0500", "message": "Fixing merge conflicts"}, {"oid": "d91ac31cb62f0842eb972ad045bdab45c9c3f814", "committedDate": "2022-01-25 17:42:20 -0500", "message": "PIND Migration"}, {"oid": "9fac7b8c6dfc3095299a8f2b2698099818ff5f0a", "committedDate": "2022-01-26 20:37:16 -0500", "message": "Fixing merge conflicts"}, {"oid": "68ef07dd4c65a1c3d546c2da6f01575f3f3c3ad6", "committedDate": "2022-01-26 20:47:30 -0500", "message": "Fixing merge conflicts"}, {"oid": "4d88d0c53f0069b883caece02ec49678aeeeef7e", "committedDate": "2022-02-01 14:20:52 -0500", "message": "Fixing merge conflicts"}, {"oid": "add1e0e345d4bfcfbff554d48b42166703dc9742", "committedDate": "2022-02-03 13:52:45 -0500", "message": "Fixing merge conflicts"}, {"oid": "01633b8cfb55eee9c3240bff79e0122fbc54386b", "committedDate": "2022-02-13 13:10:41 -0500", "message": "Fixing MHQ's Javadoc Build"}, {"oid": "adeb4ea20e6a8eeb365e6887e79ce6a4dd8b18dd", "committedDate": "2022-02-22 19:16:53 -0500", "message": "Initial code for creating standardized code utilities"}, {"oid": "483ec96cd157a857a1e7155be64dc5ef7c72346a", "committedDate": "2022-02-24 20:32:12 -0500", "message": "Migrating a bunch of MHQ utility code to MM"}, {"oid": "88ce57b5171b2d38c738446af4ab779e6d17ae7f", "committedDate": "2022-02-28 20:23:04 -0500", "message": "3146: Properly handling null force to null force reassignment messages"}, {"oid": "c94fc298803b71e6ac75eb935cabba921a8a6571", "committedDate": "2022-03-06 11:49:08 -0500", "message": "Fixing merge conflicts"}, {"oid": "d4b96fd69deddff97744565c43e2d56b8e31c53f", "committedDate": "2022-03-07 17:19:54 -0500", "message": "Fixing two accidentally kept negations for Random Dependents Removal"}, {"oid": "48f8d58a75de4c6a5c2868f65554dad4d3a14fd5", "committedDate": "2022-03-09 10:01:16 -0500", "message": "Merge pull request #3148 from Windchild292/dev_Windchild_3146"}, {"oid": "1c307bc93de3a536ba17dd566a9fd49bd0046c8e", "committedDate": "2022-03-21 18:22:40 -0400", "message": "Fixing a bunch of spacing readability issues"}, {"oid": "913c01672fe040a25b473e8142805d2ff4ebfa1b", "committedDate": "2022-03-22 18:24:32 -0400", "message": "Modernizing Lambdas to Method References"}, {"oid": "cc400b9fa7512b6b91ed8a8f434f365b442306a8", "committedDate": "2022-03-22 23:54:28 -0400", "message": "Modernize List::size to List::isEmpty and String::isEmpty to String::isBlank"}, {"oid": "4699f3e482938fb8c322f1daf1bc3b42d78c2a64", "committedDate": "2022-03-28 22:35:03 -0400", "message": "Fixing unused imports"}, {"oid": "494b38fcedcda31bef2e6f701152a47ce1b0e397", "committedDate": "2022-04-11 00:16:20 -0400", "message": "Issue #3196: Fixing Remove Unit NPE"}, {"oid": "4e863ffcf0393e88ebb25b76dd314d994b2cfad5", "committedDate": "2022-04-12 17:18:21 -0400", "message": "Death Module: Initial Commit For the New Setup"}, {"oid": "2e8d0c32fa5c09c862fb6c5625a58d206b70ba34", "committedDate": "2022-04-12 18:20:50 -0400", "message": "Cleaning up and modernizing the death code"}, {"oid": "be00026349d450b7f2fb262f11d161ca249c5ab5", "committedDate": "2022-04-17 21:14:46 -0400", "message": "Standardizing Personnel Flags into their own setup instead of multiple previous setups"}, {"oid": "114c9ef6cbeb045e3cc88716964526ee70372408", "committedDate": "2022-05-04 10:10:43 -0400", "message": "3260: Clear Makeshift Clubs Upon Return To MekHQ"}, {"oid": "e0f4dd9d34946716a517c0b42401b33740c51f30", "committedDate": "2022-05-06 19:58:04 -0400", "message": "Renaming the civilian role check to isCivilian, and adding missing logging for a civilian error"}, {"oid": "5b35da02f167e0d577e779b21dfd3cbd2110f92b", "committedDate": "2022-05-06 22:48:48 -0400", "message": "Merge pull request #3266 from Windchild292/dev_Windchild_RetirementDependentOrNoneLogging"}, {"oid": "c6db6046da0de4e7d40d7ac930a453d2805f6a92", "committedDate": "2022-05-10 18:34:57 -0400", "message": "Merge branch 'MegaMek:master' into dev_Windchild_AssetTerms"}, {"oid": "6b720cfa833458c385546a054b762d2745c37ce1", "committedDate": "2022-05-14 10:11:35 -0400", "message": "Fixing method name"}, {"oid": "72a352ee60bdec3467fa07665ed9753cc399b6f9", "committedDate": "2022-05-15 12:41:06 -0400", "message": "Swapping MekHQ to JUnit 5"}, {"oid": "0a2050177f55c5540d898835cfd48e4f976bb4cb", "committedDate": "2022-05-25 16:54:44 -0400", "message": "Modernizing finances XML read and write"}, {"oid": "8b34d18aa825a1416df7b1a8ecb2bb898cea1026", "committedDate": "2022-05-25 18:27:34 -0400", "message": "Renaming MekHqXmlXmlUtil to utilities/MHQXMLUtility"}, {"oid": "3c19a5aba0df7a2035e7a81e61a8b5543cb13a9c", "committedDate": "2022-05-25 18:36:42 -0400", "message": "Fixing merge conflicts"}, {"oid": "4a84ac8700a2d5bf7624dd25d4c77cff34478500", "committedDate": "2022-05-25 23:32:29 -0400", "message": "Merge branch 'master' into dev_Windchild_CurrentLocationXML"}, {"oid": "32aaaac33b8e53a355c373879ee4de9f91747c39", "committedDate": "2022-05-26 07:16:40 -0400", "message": "Merge branch 'master' into dev_Windchild_PersonFlags"}, {"oid": "9472637ad3cb3c27cba2c318c5ccdf022ca56d86", "committedDate": "2022-05-26 08:10:57 -0400", "message": "Fixing merge conflicts"}, {"oid": "f35709d1278c76d1ea7c10485071e0097b1aebf0", "committedDate": "2022-05-26 08:39:19 -0400", "message": "Switching to a single retirement report"}, {"oid": "b40d7b0e6bd9003de8df60cc732b5e195741d8aa", "committedDate": "2022-05-30 16:37:32 -0400", "message": "Merge pull request #3234 from Windchild292/dev_Windchild_PersonFlags"}, {"oid": "f7e43611ee653404079cc2fdced92c083c35362f", "committedDate": "2022-06-01 13:26:16 -0400", "message": "More swaps to using getActualValue"}, {"oid": "76223b1f01db0e020c9069b9c361d7af9f174e6a", "committedDate": "2022-06-01 17:49:36 -0400", "message": "Merge remote-tracking branch 'origin/master' into dev_Windchild_PartPriceApplications"}, {"oid": "e7755fbeddc7d00cc126c3281f4be93685eb83fa", "committedDate": "2022-06-08 20:05:45 -0400", "message": "Ignore End Date for Scenario Assignment to Active Contracts"}, {"oid": "c17408bc1409591bdb76664788c6ad4f55a5d813", "committedDate": "2022-06-18 17:51:05 -0400", "message": "Campaign::getPerson : Adding Nullable Annotation"}, {"oid": "f2abd2addef945880eefcf2a11ccfb5eec610ea3", "committedDate": "2022-06-18 17:59:08 -0400", "message": "Renaming clearGenealogy to clearGenealogyLinks (as that's what it does), and more test progress"}, {"oid": "39ac9b544233876ab9e4a6f914abaf549c76aded", "committedDate": "2022-06-20 22:59:32 -0400", "message": "Bunch of enum cleanups"}, {"oid": "a576a51fb82bbc625198e50a04894cd7749bed1c", "committedDate": "2022-06-21 16:25:02 -0400", "message": "Lots more tests, largely simple ones"}, {"oid": "0f60e6bba5ebdf538b335609e5bfd7817f614393", "committedDate": "2022-06-23 16:17:56 -0400", "message": "3372: Fixing Campaign Loan Report Issues"}, {"oid": "7441a156d93c5a7fb5dab7f9a38a5f87f6321f14", "committedDate": "2022-06-24 22:32:50 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_GenealogyTest"}, {"oid": "f5bb76bdee8f7d7aba18dd83f2d903036ea1f68b", "committedDate": "2022-06-27 13:25:57 -0400", "message": "Merge pull request #3378 from Windchild292/dev_Windchild_3372"}, {"oid": "0948c47088632642d946b7a5eec4eb595a21ac76", "committedDate": "2022-06-29 20:04:53 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_GenealogyTest"}, {"oid": "505318be000041c18ae226d4e1521dc527fc7133", "committedDate": "2022-07-14 17:41:42 -0400", "message": "Adding market enum testing"}, {"oid": "8d3060de0fe1375a8186d41be98a059652a81bed", "committedDate": "2022-07-31 00:15:10 -0400", "message": "add remove stratcon scenario option"}, {"oid": "9d2ebd8a76bc41afdf298da710ad80e1e4b80c0a", "committedDate": "2022-08-02 19:49:23 -0400", "message": "Checking this"}, {"oid": "803755f3d14a7ba3e66bb1e6364d6c4220bac841", "committedDate": "2022-08-03 20:51:52 -0400", "message": "Properly disabling the random tests"}, {"oid": "f79a61c91b06b467d1bbed4dfeaa36f97fd755e3", "committedDate": "2022-08-04 11:12:44 -0400", "message": "Using correct collector"}, {"oid": "4b3952367635a7620bddb96a9e81a7f1a97a2219", "committedDate": "2022-11-15 14:07:43 -0500", "message": "Removing duplicated name generation info from the campaign file"}, {"oid": "5213209bddb612458226cdfa7561a7220f8b3b67", "committedDate": "2022-11-15 15:54:47 -0500", "message": "Fixing deprecated XML utility uses and fixing indentation issues for parts"}, {"oid": "53e7b27c2173373019055e800950173ed7eb20df", "committedDate": "2022-11-15 19:05:53 -0500", "message": "Company Generator: Faction Options"}, {"oid": "230c025b083606834270681ce668a836c76dfc1b", "committedDate": "2022-11-22 16:25:51 -0500", "message": "3489: Adding Small Craft and DropShip Transport Support"}, {"oid": "b5349ccb7e3e9c0345d6685bb9a76a53afed8bdc", "committedDate": "2022-11-26 08:40:31 -0500", "message": "Merge pull request #3510 from MegaMek/dev_Windchild_3489"}, {"oid": "b3f06f70d94e83ed6fad6368cbe5df5d35c20296", "committedDate": "2022-11-26 11:38:42 -0500", "message": "Finishing adding the new option as a selection"}, {"oid": "1cb49fa503593c75f3bee4ebc6cf2574faec13de", "committedDate": "2022-11-26 11:49:33 -0500", "message": "Merge branch 'MegaMek:master' into dev_Windchild_CompanyGeneratorFactionGeneration"}, {"oid": "b47a12937f6b979925f82cb31bb6f2f33cf789e5", "committedDate": "2022-12-05 15:34:26 -0500", "message": "Scenarios are now Scenarios, not Missions"}, {"oid": "b57de2f09b47ffa8da9ab0bd7bba356d1e2e235c", "committedDate": "2022-12-08 23:00:17 -0500", "message": "Merge pull request #3501 from Windchild292/dev_Windchild_DeprecatedXML"}, {"oid": "ade20da3d68431198324cbad4bd7cfcc2fd1ef66", "committedDate": "2022-12-11 23:37:05 -0500", "message": "Merge pull request #3520 from Windchild292/dev_Windchild_ScenariosAreScenarios"}, {"oid": "a6d88033b71b9291e4774a5cbc3e8f577287a523", "committedDate": "2022-12-16 22:33:19 -0500", "message": "Tearing out EncodeControl"}, {"oid": "cec1df762e06d6e3e6c4c437c0d0a25892f44a7d", "committedDate": "2022-12-29 13:15:59 -0500", "message": "Fixing Option Naming Typos"}, {"oid": "e3e1ce62490858d93d695b7e7f8bf17dca068936", "committedDate": "2022-12-29 14:30:54 -0500", "message": "Standardize option naming"}, {"oid": "d385d0bc8fd91a75c631f546272abbff8e07311a", "committedDate": "2022-12-30 13:05:34 -0500", "message": "SkillLevel: Reducing SkillType::getExperienceLevelName calls"}, {"oid": "332b06c4b29e7f809e9cf0cab16a062f65544391", "committedDate": "2023-01-08 20:33:20 -0500", "message": "Yearly Retirement Nag Now Follows Campaign Options"}, {"oid": "62afc895d75aece8a3079267b20eb9e8c3de5cfc", "committedDate": "2023-01-14 16:34:36 -0500", "message": "3558: RATs are Used Outside of AtB"}, {"oid": "0e39c3c4517d5cd46e99546d8e3b3a1cea7cb30b", "committedDate": "2023-01-17 20:12:29 -0500", "message": "Merge branch 'master' into dev_Windchild_CampaignOptionsCleanup"}, {"oid": "da71474de7674e9b213472ce61b254a744c6ae5a", "committedDate": "2023-01-17 20:12:53 -0500", "message": "Merge branch 'MegaMek:master' into dev_Windchild_IsolatedSkillLevelEnumSwapovers"}, {"oid": "a328a1e42771f0c7052a7c9c1b2583134a8534f4", "committedDate": "2023-01-25 22:45:44 -0500", "message": "Campaign Ops Unit Rating: Properly Calculate Personnel Numbers"}, {"oid": "5ad55c0aa2dd0422f1e05d2704860f7674936984", "committedDate": "2023-01-25 23:11:45 -0500", "message": "Applying changes from testing and further rule reading"}, {"oid": "8fc36fbd275ffccf0ed91df60b637a5cc3135a86", "committedDate": "2023-01-29 18:24:48 -0500", "message": "Phenotype Enum: Migrating Uses to Simplification Methods"}, {"oid": "a462c5436ab5bec1a54c2f652f232fdff88f7a42", "committedDate": "2023-01-29 19:28:49 -0500", "message": "Tearing out unused code and swapping to using a map"}, {"oid": "542356e26d4b14d760fa69f33f627ed2b692908b", "committedDate": "2023-02-06 21:17:17 -0500", "message": "Merge pull request #3589 from Windchild292/dev_Windchild_PhenotypeSimplificationMethods"}, {"oid": "2757b555a5a0aa6fdf73322d58173bbee7d22ba5", "committedDate": "2023-02-06 21:25:38 -0500", "message": "Merge pull request #3590 from Windchild292/dev_Windchild_UnusedSPACleanup"}, {"oid": "6784f22a192b7c650bd5be0354bc6946bfec896f", "committedDate": "2023-02-06 21:41:30 -0500", "message": "Merge pull request #3557 from Windchild292/dev_Windchild_YearlyRetirementNag"}, {"oid": "724a8333d072d631c1072fd7ccf2707efe6e2b40", "committedDate": "2023-02-07 20:56:16 -0500", "message": "Fixing merge conflicts"}, {"oid": "e0f16b480db19ce9d36290caa03be8f6be77cace", "committedDate": "2023-02-07 21:43:07 -0500", "message": "Fixing merge conflicts"}, {"oid": "8996781abfef1f08293a06ef53e3af92812a9b5d", "committedDate": "2023-02-07 22:53:45 -0500", "message": "Standardize Mass Repair Mass Salvage naming to MRMS"}, {"oid": "1ccab8e5b040389be54c4730103354fbc0f06406", "committedDate": "2023-02-18 19:25:18 +0000", "message": "3318: Add manual personnel payments that generate Finance debit"}, {"oid": "86649c7c93250458658d765a7e2007134c385c74", "committedDate": "2023-02-25 20:07:13 -0500", "message": "Some related code cleanup"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU2NDA0Mw==", "url": "https://github.com/MegaMek/mekhq/pull/2123#discussion_r500564043", "body": "```suggestion\r\n        return (int) Math.round(getHangar().getUnitsStream()\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return (int)Math.round(getHangar().getUnitsStream()\n          \n          \n            \n                    return (int) Math.round(getHangar().getUnitsStream()", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">return</span> (<span class=\"pl-k\">int</span>)<span class=\"pl-smi\">Math</span><span class=\"pl-k\">.</span>round(getHangar()<span class=\"pl-k\">.</span>getUnitsStream()</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">return</span> (<span class=\"pl-k\">int</span>)<span class=\"x x-first x-last\"> </span><span class=\"pl-smi\">Math</span><span class=\"pl-k\">.</span>round(getHangar()<span class=\"pl-k\">.</span>getUnitsStream()</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "Windchild292", "createdAt": "2020-10-06T20:05:48Z", "path": "MekHQ/src/mekhq/campaign/Campaign.java", "diffHunk": "@@ -7236,117 +7172,88 @@ public void setHealingTimeOptions(int newHeal, int newNaturalHeal) {\n     }\n \n     public int getTotalMechBays() {\n-        double bays = 0;\n-        for (Unit u : getUnits()) {\n-            bays += u.getMechCapacity();\n-        }\n-        return (int)Math.round(bays);\n+        return (int)Math.round(getHangar().getUnitsStream()\n+            .mapToDouble(Unit::getMechCapacity)\n+            .sum());\n     }\n \n     public int getTotalASFBays() {\n-        double bays = 0;\n-        for (Unit u : getUnits()) {\n-            bays += u.getASFCapacity();\n-        }\n-        return (int)Math.round(bays);\n+        return (int)Math.round(getHangar().getUnitsStream()\n+            .mapToDouble(Unit::getASFCapacity)\n+            .sum());\n     }\n \n     public int getTotalSmallCraftBays() {\n-        double bays = 0;\n-        for (Unit u : getUnits()) {\n-            bays += u.getSmallCraftCapacity();\n-        }\n-        return (int)Math.round(bays);\n+        return (int)Math.round(getHangar().getUnitsStream()\n+            .mapToDouble(Unit::getSmallCraftCapacity)\n+            .sum());\n     }\n \n     public int getTotalBattleArmorBays() {\n-        double bays = 0;\n-        for (Unit u : getUnits()) {\n-            bays += u.getBattleArmorCapacity();\n-        }\n-        return (int)Math.round(bays);\n+        return (int)Math.round(getHangar().getUnitsStream()\n+            .mapToDouble(Unit::getBattleArmorCapacity)\n+            .sum());\n     }\n \n     public int getTotalInfantryBays() {\n-        double bays = 0;\n-        for (Unit u : getUnits()) {\n-            bays += u.getInfantryCapacity();\n-        }\n-        return (int)Math.round(bays);\n+        return (int)Math.round(getHangar().getUnitsStream()\n+            .mapToDouble(Unit::getInfantryCapacity)\n+            .sum());\n     }\n \n     public int getTotalHeavyVehicleBays() {\n-        double bays = 0;\n-        for (Unit u : getUnits()) {\n-            bays += u.getHeavyVehicleCapacity();\n-        }\n-        return (int)Math.round(bays);\n+        return (int)Math.round(getHangar().getUnitsStream()\n+            .mapToDouble(Unit::getHeavyVehicleCapacity)\n+            .sum());\n     }\n \n     public int getTotalLightVehicleBays() {\n-        double bays = 0;\n-        for (Unit u : getUnits()) {\n-            bays += u.getLightVehicleCapacity();\n-        }\n-        return (int)Math.round(bays);\n+        return (int)Math.round(getHangar().getUnitsStream()", "originalCommit": "02cf732d561f245a8a8d39a2b8a819cb45ac94ca", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cb64714e6e2b7d03de487c72eb18c3c09948b6c6", "changed_code": [{"header": "diff --git a/MekHQ/src/mekhq/campaign/Campaign.java b/MekHQ/src/mekhq/campaign/Campaign.java\nindex c9db948ab..4dff77b1d 100644\n--- a/MekHQ/src/mekhq/campaign/Campaign.java\n+++ b/MekHQ/src/mekhq/campaign/Campaign.java\n", "chunk": "@@ -7172,49 +7172,49 @@ public class Campaign implements Serializable, ITechManager {\n     }\n \n     public int getTotalMechBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getMechCapacity)\n             .sum());\n     }\n \n     public int getTotalASFBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getASFCapacity)\n             .sum());\n     }\n \n     public int getTotalSmallCraftBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getSmallCraftCapacity)\n             .sum());\n     }\n \n     public int getTotalBattleArmorBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getBattleArmorCapacity)\n             .sum());\n     }\n \n     public int getTotalInfantryBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getInfantryCapacity)\n             .sum());\n     }\n \n     public int getTotalHeavyVehicleBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getHeavyVehicleCapacity)\n             .sum());\n     }\n \n     public int getTotalLightVehicleBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getLightVehicleCapacity)\n             .sum());\n     }\n \n     public int getTotalProtomechBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getProtomechCapacity)\n             .sum());\n     }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "3f55aabad31fb84ff1e5af9c8caac7bd8c8999a0", "changed_code": [{"header": "diff --git a/MekHQ/src/mekhq/campaign/Campaign.java b/MekHQ/src/mekhq/campaign/Campaign.java\nindex c9db948ab..0f69d5116 100644\n--- a/MekHQ/src/mekhq/campaign/Campaign.java\n+++ b/MekHQ/src/mekhq/campaign/Campaign.java\n", "chunk": "@@ -7172,49 +7161,49 @@ public class Campaign implements Serializable, ITechManager {\n     }\n \n     public int getTotalMechBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getMechCapacity)\n             .sum());\n     }\n \n     public int getTotalASFBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getASFCapacity)\n             .sum());\n     }\n \n     public int getTotalSmallCraftBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getSmallCraftCapacity)\n             .sum());\n     }\n \n     public int getTotalBattleArmorBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getBattleArmorCapacity)\n             .sum());\n     }\n \n     public int getTotalInfantryBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getInfantryCapacity)\n             .sum());\n     }\n \n     public int getTotalHeavyVehicleBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getHeavyVehicleCapacity)\n             .sum());\n     }\n \n     public int getTotalLightVehicleBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getLightVehicleCapacity)\n             .sum());\n     }\n \n     public int getTotalProtomechBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getProtomechCapacity)\n             .sum());\n     }\n", "next_change": {"commit": "a0c1cbf9746ed9486f08ce4aa2376828e846c786", "changed_code": [{"header": "diff --git a/MekHQ/src/mekhq/campaign/Campaign.java b/MekHQ/src/mekhq/campaign/Campaign.java\nindex 0f69d5116..e49c8ce15 100644\n--- a/MekHQ/src/mekhq/campaign/Campaign.java\n+++ b/MekHQ/src/mekhq/campaign/Campaign.java\n", "chunk": "@@ -7152,97 +7101,119 @@ public class Campaign implements Serializable, ITechManager {\n             }\n         }\n     }\n-    /**\n-     * Returns our list of potential transport ships\n-     * @return\n-     */\n-    public Set<UUID> getTransportShips() {\n-        return transportShips;\n-    }\n \n     public int getTotalMechBays() {\n-        return (int) Math.round(getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getMechCapacity)\n-            .sum());\n+        double bays = 0;\n+        for (Unit u : getUnits()) {\n+            bays += u.getMechCapacity();\n+        }\n+        return (int)Math.round(bays);\n     }\n \n     public int getTotalASFBays() {\n-        return (int) Math.round(getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getASFCapacity)\n-            .sum());\n+        double bays = 0;\n+        for (Unit u : getUnits()) {\n+            bays += u.getASFCapacity();\n+        }\n+        return (int)Math.round(bays);\n     }\n \n     public int getTotalSmallCraftBays() {\n-        return (int) Math.round(getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getSmallCraftCapacity)\n-            .sum());\n+        double bays = 0;\n+        for (Unit u : getUnits()) {\n+            bays += u.getSmallCraftCapacity();\n+        }\n+        return (int)Math.round(bays);\n     }\n \n     public int getTotalBattleArmorBays() {\n-        return (int) Math.round(getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getBattleArmorCapacity)\n-            .sum());\n+        double bays = 0;\n+        for (Unit u : getUnits()) {\n+            bays += u.getBattleArmorCapacity();\n+        }\n+        return (int)Math.round(bays);\n     }\n \n     public int getTotalInfantryBays() {\n-        return (int) Math.round(getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getInfantryCapacity)\n-            .sum());\n+        double bays = 0;\n+        for (Unit u : getUnits()) {\n+            bays += u.getInfantryCapacity();\n+        }\n+        return (int)Math.round(bays);\n     }\n \n     public int getTotalHeavyVehicleBays() {\n-        return (int) Math.round(getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getHeavyVehicleCapacity)\n-            .sum());\n+        double bays = 0;\n+        for (Unit u : getUnits()) {\n+            bays += u.getHeavyVehicleCapacity();\n+        }\n+        return (int)Math.round(bays);\n     }\n \n     public int getTotalLightVehicleBays() {\n-        return (int) Math.round(getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getLightVehicleCapacity)\n-            .sum());\n+        double bays = 0;\n+        for (Unit u : getUnits()) {\n+            bays += u.getLightVehicleCapacity();\n+        }\n+        return (int)Math.round(bays);\n     }\n \n     public int getTotalProtomechBays() {\n-        return (int) Math.round(getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getProtomechCapacity)\n-            .sum());\n+        double bays = 0;\n+        for (Unit u : getUnits()) {\n+            bays += u.getProtomechCapacity();\n+        }\n+        return (int)Math.round(bays);\n     }\n \n     public int getTotalDockingCollars() {\n-        return getHangar().getUnitsStream()\n-            .filter(u -> u.getEntity() instanceof Jumpship)\n-            .mapToInt(Unit::getDocks)\n-            .sum();\n+        double collars = 0;\n+        for (Unit u : getUnits()) {\n+            if (u.getEntity() instanceof Jumpship) {\n+                collars += u.getDocks();\n+            }\n+        }\n+        return (int)Math.round(collars);\n     }\n \n     public double getTotalInsulatedCargoCapacity() {\n-        return getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getInsulatedCargoCapacity)\n-            .sum();\n+        double capacity = 0;\n+        for (Unit u : getUnits()) {\n+            capacity += u.getInsulatedCargoCapacity();\n+        }\n+        return capacity;\n     }\n \n     public double getTotalRefrigeratedCargoCapacity() {\n-        return getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getRefrigeratedCargoCapacity)\n-            .sum();\n+        double capacity = 0;\n+        for (Unit u : getUnits()) {\n+            capacity += u.getRefrigeratedCargoCapacity();\n+        }\n+        return capacity;\n     }\n \n     public double getTotalLivestockCargoCapacity() {\n-        return getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getLivestockCargoCapacity)\n-            .sum();\n+        double capacity = 0;\n+        for (Unit u : getUnits()) {\n+            capacity += u.getLivestockCargoCapacity();\n+        }\n+        return capacity;\n     }\n \n     public double getTotalLiquidCargoCapacity() {\n-        return getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getLiquidCargoCapacity)\n-            .sum();\n+        double capacity = 0;\n+        for (Unit u : getUnits()) {\n+            capacity += u.getLiquidCargoCapacity();\n+        }\n+        return capacity;\n     }\n \n     public double getTotalCargoCapacity() {\n-        return getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getCargoCapacity)\n-            .sum();\n+        double capacity = 0;\n+        for (Unit u : getUnits()) {\n+            capacity += u.getCargoCapacity();\n+        }\n+        return capacity;\n     }\n \n     // Liquid not included\n", "next_change": {"commit": "04a16de448a0c7d576a6c3c64c9d23ae08384bae", "changed_code": [{"header": "diff --git a/MekHQ/src/mekhq/campaign/Campaign.java b/MekHQ/src/mekhq/campaign/Campaign.java\nindex e49c8ce15..993f59cfe 100644\n--- a/MekHQ/src/mekhq/campaign/Campaign.java\n+++ b/MekHQ/src/mekhq/campaign/Campaign.java\n", "chunk": "@@ -7101,900 +7157,440 @@ public class Campaign implements Serializable, ITechManager {\n             }\n         }\n     }\n-\n-    public int getTotalMechBays() {\n-        double bays = 0;\n-        for (Unit u : getUnits()) {\n-            bays += u.getMechCapacity();\n-        }\n-        return (int)Math.round(bays);\n+    /**\n+     * Returns our list of potential transport ships\n+     * @return\n+     */\n+    public Set<UUID> getTransportShips() {\n+        return transportShips;\n     }\n \n-    public int getTotalASFBays() {\n-        double bays = 0;\n-        for (Unit u : getUnits()) {\n-            bays += u.getASFCapacity();\n-        }\n-        return (int)Math.round(bays);\n-    }\n+    public String getCombatPersonnelDetails() {\n+        int[] countPersonByType = new int[Person.T_NUM];\n+        int countTotal = 0;\n+        int countInjured = 0;\n+        int countMIA = 0;\n+        int countKIA = 0;\n+        int countDead = 0;\n+        int countRetired = 0;\n+        Money salary = Money.zero();\n \n-    public int getTotalSmallCraftBays() {\n-        double bays = 0;\n-        for (Unit u : getUnits()) {\n-            bays += u.getSmallCraftCapacity();\n-        }\n-        return (int)Math.round(bays);\n-    }\n+        for (Person p : getPersonnel()) {\n+            if (!p.hasPrimaryCombatRole() || !p.getPrisonerStatus().isFree()) {\n+                continue;\n+            }\n \n-    public int getTotalBattleArmorBays() {\n-        double bays = 0;\n-        for (Unit u : getUnits()) {\n-            bays += u.getBattleArmorCapacity();\n+            // Add them to the total count\n+            if (p.getStatus().isActive()) {\n+                countPersonByType[p.getPrimaryRole()]++;\n+                countTotal++;\n+                if (getCampaignOptions().useAdvancedMedical() && p.getInjuries().size() > 0) {\n+                    countInjured++;\n+                } else if (p.getHits() > 0) {\n+                    countInjured++;\n+                }\n+                salary = salary.plus(p.getSalary());\n+            } else if (p.getStatus().isRetired()) {\n+                countRetired++;\n+            } else if (p.getStatus().isMIA()) {\n+                countMIA++;\n+            } else if (p.getStatus().isKIA()) {\n+                countKIA++;\n+                countDead++;\n+            } else if (p.getStatus().isDead()) {\n+                countDead++;\n+            }\n         }\n-        return (int)Math.round(bays);\n-    }\n \n-    public int getTotalInfantryBays() {\n-        double bays = 0;\n-        for (Unit u : getUnits()) {\n-            bays += u.getInfantryCapacity();\n-        }\n-        return (int)Math.round(bays);\n-    }\n+        StringBuilder sb = new StringBuilder(\"Combat Personnel\\n\\n\");\n \n-    public int getTotalHeavyVehicleBays() {\n-        double bays = 0;\n-        for (Unit u : getUnits()) {\n-            bays += u.getHeavyVehicleCapacity();\n-        }\n-        return (int)Math.round(bays);\n-    }\n+        sb.append(String.format(\"%-30s        %4s\\n\", \"Total Combat Personnel\", countTotal));\n \n-    public int getTotalLightVehicleBays() {\n-        double bays = 0;\n-        for (Unit u : getUnits()) {\n-            bays += u.getLightVehicleCapacity();\n+        for (int i = 0; i < Person.T_NUM; i++) {\n+            if (Person.isCombatRole(i)) {\n+                sb.append(String.format(\"    %-30s    %4s\\n\",\n+                        Person.getRoleDesc(i, getFaction().isClan()), countPersonByType[i]));\n+            }\n         }\n-        return (int)Math.round(bays);\n-    }\n \n-    public int getTotalProtomechBays() {\n-        double bays = 0;\n-        for (Unit u : getUnits()) {\n-            bays += u.getProtomechCapacity();\n-        }\n-        return (int)Math.round(bays);\n+        sb.append(\"\\n\")\n+                .append(String.format(\"%-30s        %4s\\n\", \"Injured Combat Personnel\", countInjured))\n+                .append(String.format(\"%-30s        %4s\\n\", \"MIA Combat Personnel\", countMIA))\n+                .append(String.format(\"%-30s        %4s\\n\", \"KIA Combat Personnel\", countKIA))\n+                .append(String.format(\"%-30s        %4s\\n\", \"Retired Combat Personnel\", countRetired))\n+                .append(String.format(\"%-30s        %4s\\n\", \"Dead Combat Personnel\", countDead))\n+                .append(\"\\nMonthly Salary For Combat Personnel: \").append(salary.toAmountAndSymbolString());\n+\n+        return sb.toString();\n     }\n \n-    public int getTotalDockingCollars() {\n-        double collars = 0;\n-        for (Unit u : getUnits()) {\n-            if (u.getEntity() instanceof Jumpship) {\n-                collars += u.getDocks();\n+    public String getSupportPersonnelDetails() {\n+        int[] countPersonByType = new int[Person.T_NUM];\n+        int countTotal = 0;\n+        int countInjured = 0;\n+        int countMIA = 0;\n+        int countKIA = 0;\n+        int countDead = 0;\n+        int countRetired = 0;\n+        Money salary = Money.zero();\n+        int prisoners = 0;\n+        int bondsmen = 0;\n+        int dependents = 0;\n+\n+        for (Person p : getPersonnel()) {\n+            // Add them to the total count\n+            boolean primarySupport = p.hasPrimarySupportRole(false);\n+\n+            if (primarySupport && p.getPrisonerStatus().isFree() && p.getStatus().isActive()) {\n+                countPersonByType[p.getPrimaryRole()]++;\n+                countTotal++;\n+                if (p.getInjuries().size() > 0 || p.getHits() > 0) {\n+                    countInjured++;\n+                }\n+                salary = salary.plus(p.getSalary());\n+            } else if (p.getPrisonerStatus().isPrisoner() && p.getStatus().isActive()) {\n+                prisoners++;\n+                if (p.getInjuries().size() > 0 || p.getHits() > 0) {\n+                    countInjured++;\n+                }\n+            } else if (p.getPrisonerStatus().isBondsman() && p.getStatus().isActive()) {\n+                bondsmen++;\n+                if (p.getInjuries().size() > 0 || p.getHits() > 0) {\n+                    countInjured++;\n+                }\n+            } else if (primarySupport && p.getStatus().isRetired()) {\n+                countRetired++;\n+            } else if (primarySupport && p.getStatus().isMIA()) {\n+                countMIA++;\n+            } else if (primarySupport && p.getStatus().isKIA()) {\n+                countKIA++;\n+                countDead++;\n+            } else if (primarySupport && p.getStatus().isDead()) {\n+                countDead++;\n             }\n-        }\n-        return (int)Math.round(collars);\n-    }\n \n-    public double getTotalInsulatedCargoCapacity() {\n-        double capacity = 0;\n-        for (Unit u : getUnits()) {\n-            capacity += u.getInsulatedCargoCapacity();\n+            if (p.isDependent() && p.getStatus().isActive() && p.getPrisonerStatus().isFree()) {\n+                dependents++;\n+            }\n         }\n-        return capacity;\n-    }\n \n-    public double getTotalRefrigeratedCargoCapacity() {\n-        double capacity = 0;\n-        for (Unit u : getUnits()) {\n-            capacity += u.getRefrigeratedCargoCapacity();\n-        }\n-        return capacity;\n-    }\n+        StringBuilder sb = new StringBuilder(\"Support Personnel\\n\\n\");\n \n-    public double getTotalLivestockCargoCapacity() {\n-        double capacity = 0;\n-        for (Unit u : getUnits()) {\n-            capacity += u.getLivestockCargoCapacity();\n-        }\n-        return capacity;\n-    }\n+        sb.append(String.format(\"%-30s        %4s\\n\", \"Total Support Personnel\", countTotal));\n \n-    public double getTotalLiquidCargoCapacity() {\n-        double capacity = 0;\n-        for (Unit u : getUnits()) {\n-            capacity += u.getLiquidCargoCapacity();\n+        for (int i = 0; i < Person.T_NUM; i++) {\n+            if (Person.isSupportRole(i)) {\n+                sb.append(String.format(\"    %-30s    %4s\\n\",\n+                        Person.getRoleDesc(i, getFaction().isClan()), countPersonByType[i]));\n+            }\n         }\n-        return capacity;\n-    }\n \n-    public double getTotalCargoCapacity() {\n-        double capacity = 0;\n-        for (Unit u : getUnits()) {\n-            capacity += u.getCargoCapacity();\n-        }\n-        return capacity;\n-    }\n-\n-    // Liquid not included\n-    public double getTotalCombinedCargoCapacity() {\n-        return getTotalCargoCapacity() + getTotalLivestockCargoCapacity()\n-                + getTotalInsulatedCargoCapacity() + getTotalRefrigeratedCargoCapacity();\n-    }\n-\n-    public int getNumberOfUnitsByType(long type) {\n-        return getNumberOfUnitsByType(type, false, false);\n-    }\n+        sb.append(\"\\n\")\n+                .append(String.format(\"%-30s        %4s\\n\", \"Injured Support Personnel\", countInjured))\n+                .append(String.format(\"%-30s        %4s\\n\", \"MIA Support Personnel\", countMIA))\n+                .append(String.format(\"%-30s        %4s\\n\", \"KIA Support Personnel\", countKIA))\n+                .append(String.format(\"%-30s        %4s\\n\", \"Retired Support Personnel\", countRetired))\n+                .append(String.format(\"%-30s        %4s\\n\", \"Dead Support Personnel\", countDead))\n+                .append(\"\\nMonthly Salary For Support Personnel: \").append(salary.toAmountAndSymbolString())\n+                .append(String.format(\"\\nYou have \" + dependents + \" %s\", (dependents == 1) ? \"dependent\" : \"dependents\"))\n+                .append(String.format(\"\\nYou have \" + prisoners + \" prisoner%s\", (prisoners == 1) ? \"\" : \"s\"))\n+                .append(String.format(\"\\nYou have \" + bondsmen + \" %s\", (bondsmen == 1) ? \"bondsman\" : \"bondsmen\"));\n \n-    public int getNumberOfUnitsByType(long type, boolean inTransit) {\n-        return getNumberOfUnitsByType(type, inTransit, false);\n+        return sb.toString();\n     }\n \n-    public int getNumberOfUnitsByType(long type, boolean inTransit, boolean lv) {\n-        int num = 0;\n-        for (Unit unit : getUnits()) {\n-            if (!inTransit && !unit.isPresent()) {\n-                continue;\n-            }\n-            if (unit.isMothballed()) {\n-                if (type == Unit.ETYPE_MOTHBALLED) {\n-                    num++;\n-                }\n-                continue;\n-            }\n-            Entity en = unit.getEntity();\n-            if (en instanceof GunEmplacement || en instanceof FighterSquadron || en instanceof Jumpship) {\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_MECH && en instanceof Mech) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_DROPSHIP && en instanceof Dropship) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_SMALL_CRAFT && en instanceof SmallCraft\n-                    && !(en instanceof Dropship)) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_CONV_FIGHTER && en instanceof ConvFighter) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_AERO && en instanceof Aero\n-                    && !(en instanceof SmallCraft || en instanceof ConvFighter)) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_INFANTRY && en instanceof Infantry && !(en instanceof BattleArmor)) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_BATTLEARMOR && en instanceof BattleArmor) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_TANK && en instanceof Tank) {\n-                if ((en.getWeight() <= 50 && lv) || (en.getWeight() > 50 && !lv)) {\n-                    num++;\n-                }\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_PROTOMECH && en instanceof Protomech) {\n-                num++;\n-                continue;\n-            }\n+    public void doMaintenance(Unit u) {\n+        if (!u.requiresMaintenance() || !campaignOptions.checkMaintenance()) {\n+            return;\n         }\n-\n-        return num;\n-    }\n-\n-    public double getCargoTonnage(boolean inTransit) {\n-        return getCargoTonnage(inTransit, false);\n-    }\n-\n-    @SuppressWarnings(\"unused\") // FIXME: This whole method needs re-worked once Dropship Assignments are in\n-    public double getCargoTonnage(boolean inTransit, boolean mothballed) {\n-        double cargoTonnage = 0;\n-        double mothballedTonnage = 0;\n-        int mechs = getNumberOfUnitsByType(Entity.ETYPE_MECH);\n-        int ds = getNumberOfUnitsByType(Entity.ETYPE_DROPSHIP);\n-        int sc = getNumberOfUnitsByType(Entity.ETYPE_SMALL_CRAFT);\n-        int cf = getNumberOfUnitsByType(Entity.ETYPE_CONV_FIGHTER);\n-        int asf = getNumberOfUnitsByType(Entity.ETYPE_AERO);\n-        int inf = getNumberOfUnitsByType(Entity.ETYPE_INFANTRY);\n-        int ba = getNumberOfUnitsByType(Entity.ETYPE_BATTLEARMOR);\n-        int lv = getNumberOfUnitsByType(Entity.ETYPE_TANK, true);\n-        int hv = getNumberOfUnitsByType(Entity.ETYPE_TANK, false);\n-        int protos = getNumberOfUnitsByType(Entity.ETYPE_PROTOMECH);\n-\n-        for (Part part : getSpareParts()) {\n-            if (!inTransit && !part.isPresent()) {\n-                continue;\n-            }\n-            cargoTonnage += (part.getQuantity() * part.getTonnage());\n+        // lets start by checking times\n+        Person tech = u.getTech();\n+        int minutesUsed = u.getMaintenanceTime();\n+        int astechsUsed = getAvailableAstechs(minutesUsed, false);\n+        boolean maintained = ((tech != null) && (tech.getMinutesLeft() >= minutesUsed)\n+                && !tech.isMothballing());\n+        boolean paidMaintenance = true;\n+        if (maintained) {\n+            // use the time\n+            tech.setMinutesLeft(tech.getMinutesLeft() - minutesUsed);\n+            astechPoolMinutes -= astechsUsed * minutesUsed;\n         }\n+        u.incrementDaysSinceMaintenance(maintained, astechsUsed);\n \n-        // place units in bays\n-        // FIXME: This has been temporarily disabled. It really needs dropship assignments done to fix it correctly.\n-        // Remaining units go into cargo\n-        for (Unit unit : getUnits()) {\n-            if (!inTransit && !unit.isPresent()) {\n-                continue;\n-            }\n-            Entity en = unit.getEntity();\n-            if (unit.isMothballed()) {\n-                mothballedTonnage += en.getWeight();\n-                continue;\n-            }\n-            if (en instanceof GunEmplacement || en instanceof FighterSquadron || en instanceof Jumpship) {\n-                continue;\n-            }\n-            // cargoTonnage += en.getWeight();\n-        }\n-        if (mothballed) {\n-            return mothballedTonnage;\n+        int ruggedMultiplier = 1;\n+        if (u.getEntity().hasQuirk(OptionsConstants.QUIRK_POS_RUGGED_1)) {\n+            ruggedMultiplier = 2;\n         }\n-        return cargoTonnage;\n-    }\n \n-    public String getCargoDetails() {\n-        StringBuffer sb = new StringBuffer(\"Cargo\\n\\n\");\n-        double ccc = this.getTotalCombinedCargoCapacity();\n-        double gcc = this.getTotalCargoCapacity();\n-        double icc = this.getTotalInsulatedCargoCapacity();\n-        double lcc = this.getTotalLiquidCargoCapacity();\n-        double scc = this.getTotalLivestockCargoCapacity();\n-        double rcc = this.getTotalRefrigeratedCargoCapacity();\n-        double tonnage = this.getCargoTonnage(false);\n-        double mothballedTonnage = this.getCargoTonnage(false, true);\n-        double mothballedUnits = Math.max(getNumberOfUnitsByType(Unit.ETYPE_MOTHBALLED), 0);\n-        double combined = (tonnage + mothballedTonnage);\n-        double transported = combined > ccc ? ccc : combined;\n-        double overage = combined - transported;\n-\n-        sb.append(String.format(\"%-35s      %6.3f\\n\", \"Total Capacity:\", ccc));\n-        sb.append(String.format(\"%-35s      %6.3f\\n\", \"General Capacity:\", gcc));\n-        sb.append(String.format(\"%-35s      %6.3f\\n\", \"Insulated Capacity:\", icc));\n-        sb.append(String.format(\"%-35s      %6.3f\\n\", \"Liquid Capacity:\", lcc));\n-        sb.append(String.format(\"%-35s      %6.3f\\n\", \"Livestock Capacity:\", scc));\n-        sb.append(String.format(\"%-35s      %6.3f\\n\", \"Refrigerated Capacity:\", rcc));\n-        sb.append(String.format(\"%-35s      %6.3f\\n\", \"Cargo Transported:\", tonnage));\n-        sb.append(String.format(\"%-35s      %4s (%1.0f)\\n\", \"Mothballed Units as Cargo (Tons):\", mothballedUnits, mothballedTonnage));\n-        sb.append(String.format(\"%-35s      %6.3f/%1.3f\\n\", \"Transported/Capacity:\", transported, ccc));\n-        sb.append(String.format(\"%-35s      %6.3f\\n\", \"Overage Not Transported:\", overage));\n+        if (u.getEntity().hasQuirk(OptionsConstants.QUIRK_POS_RUGGED_2)) {\n+            ruggedMultiplier = 3;\n+        }\n \n-        return new String(sb);\n-    }\n+        if (u.getDaysSinceMaintenance() >= (getCampaignOptions().getMaintenanceCycleDays() * ruggedMultiplier)) {\n+            // maybe use the money\n+            if (campaignOptions.payForMaintain()) {\n+                if (!(finances.debit(u.getMaintenanceCost(), Transaction.C_MAINTAIN, \"Maintenance for \"\n+                                + u.getName(), getLocalDate()))) {\n+                    addReport(\"<font color='red'><b>You cannot afford to pay maintenance costs for \"\n+                            + u.getHyperlinkedName() + \"!</b></font>\");\n+                    paidMaintenance = false;\n+                }\n+            }\n+            // it is time for a maintenance check\n+            int qualityOrig = u.getQuality();\n+            String techName = \"Nobody\";\n+            String techNameLinked = techName;\n+            if (null != tech) {\n+                techName = tech.getFullTitle();\n+                techNameLinked = tech.getHyperlinkedFullTitle();\n+            }\n+            // don't do actual damage until we clear the for loop to avoid\n+            // concurrent mod problems\n+            // put it into a hash - 4 points of damage will mean destruction\n+            Map<Part, Integer> partsToDamage = new HashMap<>();\n+            StringBuilder maintenanceReport = new StringBuilder(\"<emph>\" + techName + \" performing maintenance</emph><br><br>\");\n+            for (Part p : u.getParts()) {\n+                String partReport = \"<b>\" + p.getName() + \"</b> (Quality \" + p.getQualityName() + \")\";\n+                if (!p.needsMaintenance()) {\n+                    continue;\n+                }\n+                int oldQuality = p.getQuality();\n+                TargetRoll target = getTargetForMaintenance(p, tech);\n+                if (!paidMaintenance) {\n+                    // TODO : Make this modifier user inputtable\n+                    target.addModifier(1, \"did not pay for maintenance\");\n+                }\n \n-    public int getOccupiedBays(long type) {\n-        return getOccupiedBays(type, false);\n-    }\n+                partReport += \", TN \" + target.getValue() + \"[\" + target.getDesc() + \"]\";\n+                int roll = Compute.d6(2);\n+                int margin = roll - target.getValue();\n+                partReport += \" rolled a \" + roll + \", margin of \" + margin;\n \n-    public int getOccupiedBays(long type, boolean lv) {\n-        int num = 0;\n-        for (Unit unit : getUnits()) {\n-            if (unit.isMothballed()) {\n-                continue;\n-            }\n-            Entity en = unit.getEntity();\n-            if (en instanceof GunEmplacement || en instanceof Jumpship) {\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_MECH && en instanceof Mech) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_DROPSHIP && en instanceof Dropship) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_SMALL_CRAFT && en instanceof SmallCraft && !(en instanceof Dropship)) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_CONV_FIGHTER && en instanceof ConvFighter) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_AERO && en instanceof Aero\n-                    && !(en instanceof SmallCraft || en instanceof ConvFighter)) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_INFANTRY && en instanceof Infantry && !(en instanceof BattleArmor)) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_BATTLEARMOR && en instanceof BattleArmor) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_TANK && en instanceof Tank) {\n-                if ((en.getWeight() <= 50 && lv) || (en.getWeight() > 50 && !lv)) {\n-                    num++;\n+                switch (p.getQuality()) {\n+                    case Part.QUALITY_A: {\n+                        if (margin >= 4) {\n+                            p.improveQuality();\n+                        }\n+                        if (!campaignOptions.useUnofficialMaintenance()) {\n+                            if (margin < -6) {\n+                                partsToDamage.put(p, 4);\n+                            } else if (margin < -4) {\n+                                partsToDamage.put(p, 3);\n+                            } else if (margin == -4) {\n+                                partsToDamage.put(p, 2);\n+                            } else if (margin < -1) {\n+                                partsToDamage.put(p, 1);\n+                            }\n+                        } else if (margin < -6) {\n+                            partsToDamage.put(p, 1);\n+                        }\n+                        break;\n+                    }\n+                    case Part.QUALITY_B: {\n+                        if (margin >= 4) {\n+                            p.improveQuality();\n+                        } else if (margin < -5) {\n+                            p.decreaseQuality();\n+                        }\n+                        if (!campaignOptions.useUnofficialMaintenance()) {\n+                            if (margin < -6) {\n+                                partsToDamage.put(p, 2);\n+                            } else if (margin < -2) {\n+                                partsToDamage.put(p, 1);\n+                            }\n+                        }\n+                        break;\n+                    }\n+                    case Part.QUALITY_C: {\n+                        if (margin < -4) {\n+                            p.decreaseQuality();\n+                        } else if (margin >= 5) {\n+                            p.improveQuality();\n+                        }\n+                        if (!campaignOptions.useUnofficialMaintenance()) {\n+                            if (margin < -6) {\n+                                partsToDamage.put(p, 2);\n+                            } else if (margin < -3) {\n+                                partsToDamage.put(p, 1);\n+                            }\n+                        }\n+                        break;\n+                    }\n+                    case Part.QUALITY_D: {\n+                        if (margin < -3) {\n+                            p.decreaseQuality();\n+                            if ((margin < -4) && !campaignOptions.useUnofficialMaintenance()) {\n+                                partsToDamage.put(p, 1);\n+                            }\n+                        } else if (margin >= 5) {\n+                            p.improveQuality();\n+                        }\n+                        break;\n+                    }\n+                    case Part.QUALITY_E:\n+                        if (margin < -2) {\n+                            p.decreaseQuality();\n+                            if ((margin < -5) && !campaignOptions.useUnofficialMaintenance()) {\n+                                partsToDamage.put(p, 1);\n+                            }\n+                        } else if (margin >= 6) {\n+                            p.improveQuality();\n+                        }\n+                        break;\n+                    case Part.QUALITY_F:\n+                    default:\n+                        if (margin < -2) {\n+                            p.decreaseQuality();\n+                            if (margin < -6 && !campaignOptions.useUnofficialMaintenance()) {\n+                                partsToDamage.put(p, 1);\n+                            }\n+                        }\n+                        // TODO: award XP point if margin >= 6 (make this optional)\n+                        //if (margin >= 6) {\n+                        //\n+                        //}\n+                        break;\n                 }\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_PROTOMECH && en instanceof Protomech) {\n-                num++;\n-                continue;\n+                if (p.getQuality() > oldQuality) {\n+                    partReport += \": <font color='green'>new quality is \" + p.getQualityName() + \"</font>\";\n+                } else if (p.getQuality() < oldQuality) {\n+                    partReport += \": <font color='red'>new quality is \" + p.getQualityName() + \"</font>\";\n+                } else {\n+                    partReport += \": quality remains \" + p.getQualityName();\n+                }\n+                if (null != partsToDamage.get(p)) {\n+                    if (partsToDamage.get(p) > 3) {\n+                        partReport += \", <font color='red'><b>part destroyed</b></font>\";\n+                    } else {\n+                        partReport += \", <font color='red'><b>part damaged</b></font>\";\n+                    }\n+                }\n+                maintenanceReport.append(partReport).append(\"<br>\");\n             }\n-        }\n \n-        if (type == Entity.ETYPE_MECH) {\n-            if (getTotalMechBays() > num) {\n-                return num;\n+            int nDamage = 0;\n+            int nDestroy = 0;\n+            for (Map.Entry<Part, Integer> p : partsToDamage.entrySet()) {\n+                int damage = p.getValue();\n+                if (damage > 3) {\n+                    nDestroy++;\n+                    p.getKey().remove(false);\n+                } else {\n+                    p.getKey().doMaintenanceDamage(damage);\n+                    nDamage++;\n+                }\n             }\n-            return getTotalMechBays();\n-        }\n \n-        if (type == Entity.ETYPE_AERO) {\n-            if (getTotalASFBays() > num) {\n-                return num;\n-            }\n-            return getTotalASFBays();\n-        }\n+            u.setLastMaintenanceReport(maintenanceReport.toString());\n \n-        if (type == Entity.ETYPE_INFANTRY) {\n-            if (getTotalInfantryBays() > num) {\n-                return num;\n+            if (getCampaignOptions().logMaintenance()) {\n+                MekHQ.getLogger().info(getClass(), \"doMaintenance\", maintenanceReport.toString());\n             }\n-            return getTotalInfantryBays();\n-        }\n \n-        if (type == Entity.ETYPE_BATTLEARMOR) {\n-            if (getTotalBattleArmorBays() > num) {\n-                return num;\n+            int quality = u.getQuality();\n+            String qualityString;\n+            boolean reverse = getCampaignOptions().reverseQualityNames();\n+            if (quality > qualityOrig) {\n+                qualityString = \"<font color='green'>Overall quality improves from \"\n+                        + Part.getQualityName(qualityOrig, reverse) + \" to \" + Part.getQualityName(quality, reverse)\n+                        + \"</font>\";\n+            } else if (quality < qualityOrig) {\n+                qualityString = \"<font color='red'>Overall quality declines from \"\n+                        + Part.getQualityName(qualityOrig, reverse) + \" to \" + Part.getQualityName(quality, reverse)\n+                        + \"</font>\";\n+            } else {\n+                qualityString = \"Overall quality remains \" + Part.getQualityName(quality, reverse);\n             }\n-            return getTotalBattleArmorBays();\n-        }\n-\n-        if (type == Entity.ETYPE_TANK) {\n-            if (lv) {\n-                if (getTotalLightVehicleBays() > num) {\n-                    return num;\n-                }\n-                return getTotalLightVehicleBays();\n+            String damageString = \"\";\n+            if (nDamage > 0) {\n+                damageString += nDamage + \" parts were damaged. \";\n             }\n-            if (getTotalHeavyVehicleBays() > num) {\n-                return num;\n+            if (nDestroy > 0) {\n+                damageString += nDestroy + \" parts were destroyed.\";\n             }\n-            return getTotalHeavyVehicleBays();\n-        }\n-\n-        if (type == Entity.ETYPE_SMALL_CRAFT) {\n-            if (getTotalSmallCraftBays() > num) {\n-                return num;\n+            if (!damageString.isEmpty()) {\n+                damageString = \"<b><font color='red'>\" + damageString + \"</b></font> [<a href='REPAIR|\" + u.getId()\n+                        + \"'>Repair bay</a>]\";\n             }\n-            return getTotalSmallCraftBays();\n-        }\n-\n-        if (type == Entity.ETYPE_PROTOMECH) {\n-            if (getTotalProtomechBays() > num) {\n-                return num;\n+            String paidString = \"\";\n+            if (!paidMaintenance) {\n+                paidString = \"<font color='red'>Could not afford maintenance costs, so check is at a penalty.</font>\";\n             }\n-            return getTotalProtomechBays();\n-        }\n+            addReport(techNameLinked + \" performs maintenance on \" + u.getHyperlinkedName() + \". \" + paidString\n+                    + qualityString + \". \" + damageString + \" [<a href='MAINTENANCE|\" + u.getId()\n+                    + \"'>Get details</a>]\");\n \n-        if (type == Entity.ETYPE_DROPSHIP) {\n-            if (getTotalDockingCollars() > num) {\n-                return num;\n-            }\n-            return getTotalDockingCollars();\n+            u.resetDaysSinceMaintenance();\n         }\n-\n-        return -1; // default, this is an error condition\n     }\n \n-    public String getTransportDetails() {\n-        int noMech = Math.max(getNumberOfUnitsByType(Entity.ETYPE_MECH) - getOccupiedBays(Entity.ETYPE_MECH), 0);\n-        int noDS = Math.max(getNumberOfUnitsByType(Entity.ETYPE_DROPSHIP) - getOccupiedBays(Entity.ETYPE_DROPSHIP), 0);\n-        int noSC = Math.max(getNumberOfUnitsByType(Entity.ETYPE_SMALL_CRAFT) - getOccupiedBays(Entity.ETYPE_SMALL_CRAFT), 0);\n-        @SuppressWarnings(\"unused\") // FIXME: What type of bays do ConvFighters use?\n-        int noCF = Math\n-                .max(getNumberOfUnitsByType(Entity.ETYPE_CONV_FIGHTER) - getOccupiedBays(Entity.ETYPE_CONV_FIGHTER), 0);\n-        int noASF = Math.max(getNumberOfUnitsByType(Entity.ETYPE_AERO) - getOccupiedBays(Entity.ETYPE_AERO), 0);\n-        int nolv = Math.max(getNumberOfUnitsByType(Entity.ETYPE_TANK, false, true) - getOccupiedBays(Entity.ETYPE_TANK, true), 0);\n-        int nohv = Math.max(getNumberOfUnitsByType(Entity.ETYPE_TANK) - getOccupiedBays(Entity.ETYPE_TANK), 0);\n-        int noinf = Math.max(getNumberOfUnitsByType(Entity.ETYPE_INFANTRY) - getOccupiedBays(Entity.ETYPE_INFANTRY), 0);\n-        int noBA = Math.max(getNumberOfUnitsByType(Entity.ETYPE_BATTLEARMOR) - getOccupiedBays(Entity.ETYPE_BATTLEARMOR), 0);\n-        @SuppressWarnings(\"unused\") // FIXME: This should be used somewhere...\n-        int noProto = Math.max(getNumberOfUnitsByType(Entity.ETYPE_PROTOMECH) - getOccupiedBays(Entity.ETYPE_PROTOMECH),\n-                0);\n-        int freehv = Math.max(getTotalHeavyVehicleBays() - getOccupiedBays(Entity.ETYPE_TANK), 0);\n-        int freeinf = Math.max(getTotalInfantryBays() - getOccupiedBays(Entity.ETYPE_INFANTRY), 0);\n-        int freeba = Math.max(getTotalBattleArmorBays() - getOccupiedBays(Entity.ETYPE_BATTLEARMOR), 0);\n-        int freeSC = Math.max(getTotalSmallCraftBays() - getOccupiedBays(Entity.ETYPE_SMALL_CRAFT), 0);\n-        int mothballedAsCargo = Math.max(getNumberOfUnitsByType(Unit.ETYPE_MOTHBALLED), 0);\n-\n-        String asfAppend = \"\";\n-        int newNoASF = Math.max(noASF - freeSC, 0);\n-        int placedASF = Math.max(noASF - newNoASF, 0);\n-        if (noASF > 0 && freeSC > 0) {\n-            asfAppend = \" [\" + placedASF + \" ASF will be placed in Small Craft bays]\";\n-            freeSC -= placedASF;\n-        }\n-\n-        String lvAppend = \"\";\n-        int newNolv = Math.max(nolv - freehv, 0);\n-        int placedlv = Math.max(nolv - newNolv, 0);\n-        if (nolv > 0 && freehv > 0) {\n-            lvAppend = \" [\" + placedlv + \" Light Vehicles will be placed in Heavy Vehicle bays]\";\n-            freehv -= placedlv;\n-        }\n-\n-        if (noBA > 0 && freeinf > 0) {\n-\n-        }\n-\n-        if (noinf > 0 && freeba > 0) {\n-\n-        }\n-\n-        StringBuffer sb = new StringBuffer(\"Transports\\n\\n\");\n-\n-        // Lets do Mechs first.\n-        sb.append(String.format(\"%-35s      %4d (%4d)      %-35s     %4d\\n\", \"Mech Bays (Occupied):\",\n-                getTotalMechBays(), getOccupiedBays(Entity.ETYPE_MECH), \"Mechs Not Transported:\", noMech));\n-\n-        // Lets do ASF next.\n-        sb.append(String.format(\"%-35s      %4d (%4d)      %-35s     %4d%s\\n\", \"ASF Bays (Occupied):\",\n-                getTotalASFBays(), getOccupiedBays(Entity.ETYPE_AERO), \"ASF Not Transported:\", noASF, asfAppend));\n-\n-        // Lets do Light Vehicles next.\n-        sb.append(String.format(\"%-35s      %4d (%4d)      %-35s     %4d%s\\n\", \"Light Vehicle Bays (Occupied):\",\n-                getTotalLightVehicleBays(), getOccupiedBays(Entity.ETYPE_TANK, true), \"Light Vehicles Not Transported:\",\n-                nolv, lvAppend));\n-\n-        // Lets do Heavy Vehicles next.\n-        sb.append(String.format(\"%-35s      %4d (%4d)      %-35s     %4d\\n\", \"Heavy Vehicle Bays (Occupied):\",\n-                getTotalHeavyVehicleBays(), getOccupiedBays(Entity.ETYPE_TANK), \"Heavy Vehicles Not Transported:\",\n-                nohv));\n-\n-        if (noASF > 0 && freeSC > 0) {\n-            // Lets do ASF in Free Small Craft Bays next.\n-            sb.append(String.format(\"%-35s   %4d (%4d)      %-35s     %4d\\n\", \"   Light Vehicles in Heavy Vehicle Bays (Occupied):\",\n-                    getTotalHeavyVehicleBays(), getOccupiedBays(Entity.ETYPE_TANK) + placedlv,\n-                    \"Light Vehicles Not Transported:\", newNolv));\n-        }\n-\n-        if (nolv > 0 && freehv > 0) {\n-\n-        }\n-\n-        // Lets do Infantry next.\n-        sb.append(String.format(\"%-35s      %4d (%4d)      %-35s     %4d\\n\", \"Infantry Bays (Occupied):\",\n-                getTotalInfantryBays(), getOccupiedBays(Entity.ETYPE_INFANTRY), \"Infantry Not Transported:\", noinf));\n-\n-        if (noBA > 0 && freeinf > 0) {\n-\n-        }\n-\n-        // Lets do Battle Armor next.\n-        sb.append(String.format(\"%-35s      %4d (%4d)      %-35s     %4d\\n\", \"Battle Armor Bays (Occupied):\",\n-                getTotalBattleArmorBays(), getOccupiedBays(Entity.ETYPE_BATTLEARMOR), \"Battle Armor Not Transported:\",\n-                noBA));\n-\n-        if (noinf > 0 && freeba > 0) {\n-\n-        }\n-\n-        // Lets do Small Craft next.\n-        sb.append(String.format(\"%-35s      %4d (%4d)      %-35s     %4d\\n\", \"Small Craft Bays (Occupied):\",\n-                getTotalSmallCraftBays(), getOccupiedBays(Entity.ETYPE_SMALL_CRAFT), \"Small Craft Not Transported:\",\n-                noSC));\n-\n-        if (noASF > 0 && freeSC > 0) {\n-            // Lets do ASF in Free Small Craft Bays next.\n-            sb.append(String.format(\"%-35s   %4d (%4d)      %-35s     %4d\\n\", \"   ASF in Small Craft Bays (Occupied):\",\n-                    getTotalSmallCraftBays(), getOccupiedBays(Entity.ETYPE_SMALL_CRAFT) + placedASF,\n-                    \"ASF Not Transported:\", newNoASF));\n-        }\n-\n-        // Lets do Protomechs next.\n-        sb.append(String.format(\"%-35s      %4d (%4d)      %-35s     %4d\\n\", \"Protomech Bays (Occupied):\",\n-                getTotalProtomechBays(), getOccupiedBays(Entity.ETYPE_PROTOMECH), \"Protomechs Not Transported:\", noSC));\n-\n-        sb.append(\"\\n\\n\");\n-\n-        sb.append(String.format(\"%-35s      %4d (%4d)      %-35s     %4d\\n\", \"Docking Collars (Occupied):\",\n-                getTotalDockingCollars(), getOccupiedBays(Entity.ETYPE_DROPSHIP), \"Dropships Not Transported:\", noDS));\n-\n-        sb.append(\"\\n\\n\");\n-\n-        sb.append(String.format(\"%-35s      %4d\\n\", \"Mothballed Units (see Cargo report)\", mothballedAsCargo));\n-\n-        return new String(sb);\n-    }\n-\n-    public String getCombatPersonnelDetails() {\n-        int[] countPersonByType = new int[Person.T_NUM];\n-        int countTotal = 0;\n-        int countInjured = 0;\n-        int countMIA = 0;\n-        int countKIA = 0;\n-        int countRetired = 0;\n-        Money salary = Money.zero();\n-\n+    public void initTimeInService() {\n         for (Person p : getPersonnel()) {\n-            // Add them to the total count\n-            if (Person.isCombatRole(p.getPrimaryRole()) && !p.isPrisoner()\n-                    && !p.isBondsman() && p.isActive()) {\n-                countPersonByType[p.getPrimaryRole()]++;\n-                countTotal++;\n-                if (getCampaignOptions().useAdvancedMedical()\n-                        && p.getInjuries().size() > 0) {\n-                    countInjured++;\n-                } else if (p.getHits() > 0) {\n-                    countInjured++;\n+            if (!p.isDependent() && p.getPrisonerStatus().isFree()) {\n+                LocalDate join = null;\n+                for (LogEntry e : p.getPersonnelLog()) {\n+                    if (join == null) {\n+                        // If by some nightmare there is no Joined date just use the first entry.\n+                        join = e.getDate();\n+                    }\n+                    if (e.getDesc().startsWith(\"Joined \") || e.getDesc().startsWith(\"Freed \")) {\n+                        join = e.getDate();\n+                        break;\n+                    }\n                 }\n-                salary = salary.plus(p.getSalary());\n-            } else if (Person.isCombatRole(p.getPrimaryRole())\n-                    && p.getStatus() == Person.S_RETIRED) {\n-                countRetired++;\n-            } else if (Person.isCombatRole(p.getPrimaryRole())\n-                    && p.getStatus() == Person.S_MIA) {\n-                countMIA++;\n-            } else if (Person.isCombatRole(p.getPrimaryRole())\n-                    && p.getStatus() == Person.S_KIA) {\n-                countKIA++;\n-            }\n-        }\n \n-        StringBuffer sb = new StringBuffer(\"Combat Personnel\\n\\n\");\n-\n-        String buffer = String.format(\"%-30s        %4s\\n\", \"Total Combat Personnel\",\n-                countTotal);\n-        sb.append(buffer);\n-\n-        for (int i = 0; i < Person.T_NUM; i++) {\n-            if (Person.isCombatRole(i)) {\n-                buffer = String.format(\"    %-30s    %4s\\n\", Person.getRoleDesc(i, getFaction().isClan()),\n-                        countPersonByType[i]);\n-                sb.append(buffer);\n+                p.setRecruitment((join != null) ? join : getLocalDate().minusYears(1));\n             }\n         }\n-\n-        buffer = String.format(\"%-30s        %4s\\n\",\n-                \"Injured Combat Personnel\", countInjured);\n-        sb.append(\"\\n\" + buffer);\n-        buffer = String.format(\"%-30s        %4s\\n\", \"MIA Combat Personnel\",\n-                countMIA);\n-        sb.append(buffer);\n-        buffer = String.format(\"%-30s        %4s\\n\", \"KIA Combat Personnel\",\n-                countKIA);\n-        sb.append(buffer);\n-        buffer = String.format(\"%-30s        %4s\\n\",\n-                \"Retired Combat Personnel\", countRetired);\n-        sb.append(buffer);\n-\n-        sb.append(\"\\nMonthly Salary For Combat Personnel: \" + salary.toAmountAndSymbolString());\n-\n-        return new String(sb);\n     }\n \n-    public String getSupportPersonnelDetails() {\n-        int[] countPersonByType = new int[Person.T_NUM];\n-        int countTotal = 0;\n-        int countInjured = 0;\n-        int countMIA = 0;\n-        int countKIA = 0;\n-        int countRetired = 0;\n-        Money salary = Money.zero();\n-        int prisoners = 0;\n-        int bondsmen = 0;\n-\n+    public void initTimeInRank() {\n         for (Person p : getPersonnel()) {\n-            // Add them to the total count\n-            if (Person.isSupportRole(p.getPrimaryRole()) && !p.isPrisoner()\n-                    && !p.isBondsman() && p.isActive()) {\n-                countPersonByType[p.getPrimaryRole()]++;\n-                countTotal++;\n-                if (p.getInjuries().size() > 0 || p.getHits() > 0) {\n-                    countInjured++;\n-                }\n-                salary = salary.plus(p.getSalary());\n-            } else if (p.isPrisoner() && p.isActive()) {\n-                prisoners++;\n-                if (p.getInjuries().size() > 0 || p.getHits() > 0) {\n-                    countInjured++;\n-                }\n-            } else if (p.isBondsman() && p.isActive()) {\n-                bondsmen++;\n-                if (p.getInjuries().size() > 0 || p.getHits() > 0) {\n-                    countInjured++;\n-                }\n-            } else if (Person.isSupportRole(p.getPrimaryRole())\n-                    && p.getStatus() == Person.S_RETIRED) {\n-                countRetired++;\n-            } else if (Person.isSupportRole(p.getPrimaryRole())\n-                    && p.getStatus() == Person.S_MIA) {\n-                countMIA++;\n-            } else if (Person.isSupportRole(p.getPrimaryRole())\n-                    && p.getStatus() == Person.S_KIA) {\n-                countKIA++;\n-            }\n-        }\n+            if (!p.isDependent() && p.getPrisonerStatus().isFree()) {\n \n-        StringBuffer sb = new StringBuffer(\"Support Personnel\\n\\n\");\n+                LocalDate join = null;\n+                for (LogEntry e : p.getPersonnelLog()) {\n+                    if (join == null) {\n+                        // If by some nightmare there is no date from the below, just use the first entry.\n+                        join = e.getDate();\n+                    }\n \n-        String buffer = String.format(\"%-30s        %4s\\n\", \"Total Support Personnel\",\n-                countTotal);\n-        sb.append(buffer);\n+                    if (e.getDesc().startsWith(\"Joined \") || e.getDesc().startsWith(\"Freed \")\n+                            || e.getDesc().startsWith(\"Promoted \") || e.getDesc().startsWith(\"Demoted \")) {\n+                        join = e.getDate();\n+                    }\n+                }\n \n-        for (int i = 0; i < Person.T_NUM; i++) {\n-            if (Person.isSupportRole(i)) {\n-                buffer = String.format(\"    %-30s    %4s\\n\", Person.getRoleDesc(i, getFaction().isClan()),\n-                        countPersonByType[i]);\n-                sb.append(buffer);\n+                // For that one in a billion chance the log is empty. Clone today's date and subtract a year\n+                p.setLastRankChangeDate((join != null) ? join : getLocalDate().minusYears(1));\n             }\n         }\n-\n-        buffer = String.format(\"%-30s        %4s\\n\",\n-                \"Injured Support Personnel\", countInjured);\n-        sb.append(\"\\n\" + buffer);\n-        buffer = String.format(\"%-30s        %4s\\n\", \"MIA Support Personnel\",\n-                countMIA);\n-        sb.append(buffer);\n-        buffer = String.format(\"%-30s        %4s\\n\", \"KIA Support Personnel\",\n-                countKIA);\n-        sb.append(buffer);\n-        buffer = String.format(\"%-30s        %4s\\n\",\n-                \"Retired Support Personnel\", countRetired);\n-        sb.append(buffer);\n-\n-        sb.append(\"\\nMonthly Salary For Support Personnel: \" + salary.toAmountAndSymbolString());\n-\n-        sb.append(String.format(\"\\nYou have \" + prisoners + \" prisoner%s\",\n-                prisoners == 1 ? \"\" : \"s\"));\n-        sb.append(String.format(\"\\nYou have \" + bondsmen + \" %s\",\n-                bondsmen == 1 ? \"bondsman\" : \"bondsmen\"));\n-\n-        return new String(sb);\n     }\n \n-    public void doMaintenance(Unit u) {\n-        if (!u.requiresMaintenance()) {\n-            return;\n-        }\n-        // lets start by checking times\n-        Person tech = u.getTech();\n-        int minutesUsed = u.getMaintenanceTime();\n-        int astechsUsed = getAvailableAstechs(minutesUsed, false);\n-        boolean maintained = null != tech\n-                && tech.getMinutesLeft() >= minutesUsed && !tech.isMothballing();\n-        boolean paidMaintenance = true;\n-        if (maintained) {\n-            // use the time\n-            tech.setMinutesLeft(tech.getMinutesLeft() - minutesUsed);\n-            astechPoolMinutes -= astechsUsed * minutesUsed;\n-        }\n-        u.incrementDaysSinceMaintenance(maintained, astechsUsed);\n-        if (u.getDaysSinceMaintenance() >= getCampaignOptions().getMaintenanceCycleDays()) {\n-            // maybe use the money\n-            if (campaignOptions.payForMaintain()) {\n-                if (finances.debit(u.getMaintenanceCost(), Transaction.C_MAINTAIN, \"Maintenance for \" + u.getName(),\n-                        calendar.getTime())) {\n-                } else {\n-                    addReport(\"<font color='red'><b>You cannot afford to pay maintenance costs for \"\n-                            + u.getHyperlinkedName() + \"!</b></font>\");\n-                    paidMaintenance = false;\n-                }\n-            }\n-            if (getCampaignOptions().checkMaintenance()) {\n-                // its time for a maintenance check\n-                int qualityOrig = u.getQuality();\n-                String techName = \"Nobody\";\n-                String techNameLinked = techName;\n-                if (null != tech) {\n-                    techName = tech.getFullTitle();\n-                    techNameLinked = tech.getHyperlinkedFullTitle();\n-                }\n-                // dont do actual damage until we clear the for loop to avoid\n-                // concurrent mod problems\n-                // put it into a hash - 4 points of damage will mean destruction\n-                HashMap<Integer, Integer> partsToDamage = new HashMap<>();\n-                String maintenanceReport = \"<emph>\" + techName + \" performing maintenance</emph><br><br>\";\n-                for (Part p : u.getParts()) {\n-                    String partReport = \"<b>\" + p.getName() + \"</b> (Quality \" + p.getQualityName() + \")\";\n-                    if (!p.needsMaintenance()) {\n-                        continue;\n-                    }\n-                    int oldQuality = p.getQuality();\n-                    TargetRoll target = getTargetForMaintenance(p, tech);\n-                    if (!paidMaintenance) {\n-                        // I should probably make this modifier user inputtable\n-                        target.addModifier(1, \"did not pay maintenance\");\n-                    }\n-                    partReport += \", TN \" + target.getValue() + \"[\" + target.getDesc() + \"]\";\n-                    int roll = Compute.d6(2);\n-                    int margin = roll - target.getValue();\n-                    partReport += \" rolled a \" + roll + \", margin of \" + margin;\n-                    switch (p.getQuality()) {\n-                        case Part.QUALITY_F:\n-                            if (margin < -2) {\n-                                p.decreaseQuality();\n-                                if (margin < -6 && !campaignOptions.useUnofficialMaintenance()) {\n-                                    partsToDamage.put(p.getId(), 1);\n-                                }\n-                            }\n-                            if (margin >= 6) {\n-                                // TODO: award XP point (make this optional)\n-                            }\n-                            break;\n-                        case Part.QUALITY_E:\n-                            if (margin < -2) {\n-                                p.decreaseQuality();\n-                                if (margin < -5 && !campaignOptions.useUnofficialMaintenance()) {\n-                                    partsToDamage.put(p.getId(), 1);\n-                                }\n-                            }\n-                            if (margin >= 6) {\n-                                p.improveQuality();\n-                            }\n-                            break;\n-                        case Part.QUALITY_D:\n-                            if (margin < -3) {\n-                                p.decreaseQuality();\n-                                if (margin < -4 && !campaignOptions.useUnofficialMaintenance()) {\n-                                    partsToDamage.put(p.getId(), 1);\n-                                }\n-                            }\n-                            if (margin >= 5) {\n-                                p.improveQuality();\n-                            }\n-                            break;\n-                        case Part.QUALITY_C:\n-                            if (margin < -4) {\n-                                p.decreaseQuality();\n-                            }\n-                            if (!campaignOptions.useUnofficialMaintenance()) {\n-                                if (margin < -6) {\n-                                    partsToDamage.put(p.getId(), 2);\n-                                } else if (margin < -3) {\n-                                    partsToDamage.put(p.getId(), 1);\n-                                }\n-                            }\n-                            if (margin >= 5) {\n-                                p.improveQuality();\n-                            }\n-                            break;\n-                        case Part.QUALITY_B:\n-                            if (margin < -5) {\n-                                p.decreaseQuality();\n-                            }\n-                            if (!campaignOptions.useUnofficialMaintenance()) {\n-                                if (margin < -6) {\n-                                    partsToDamage.put(p.getId(), 2);\n-                                } else if (margin < -2) {\n-                                    partsToDamage.put(p.getId(), 1);\n-                                }\n-                            }\n-                            if (margin >= 4) {\n-                                p.improveQuality();\n-                            }\n-                            break;\n-                        case Part.QUALITY_A:\n-                            if (!campaignOptions.useUnofficialMaintenance()) {\n-                                if (margin < -6) {\n-                                    partsToDamage.put(p.getId(), 4);\n-                                } else if (margin < -4) {\n-                                    partsToDamage.put(p.getId(), 3);\n-                                } else if (margin == -4) {\n-                                    partsToDamage.put(p.getId(), 2);\n-                                } else if (margin < -1) {\n-                                    partsToDamage.put(p.getId(), 1);\n-                                }\n-                            } else if (margin < -6) {\n-                                partsToDamage.put(p.getId(), 1);\n-                            }\n-                            if (margin >= 4) {\n-                                p.improveQuality();\n-                            }\n-                            break;\n-                    }\n-                    if (p.getQuality() > oldQuality) {\n-                        partReport += \": <font color='green'>new quality is \" + p.getQualityName() + \"</font>\";\n-                    } else if (p.getQuality() < oldQuality) {\n-                        partReport += \": <font color='red'>new quality is \" + p.getQualityName() + \"</font>\";\n-                    } else {\n-                        partReport += \": quality remains \" + p.getQualityName();\n-                    }\n-                    if (null != partsToDamage.get(p.getId())) {\n-                        if (partsToDamage.get(p.getId()) > 3) {\n-                            partReport += \", <font color='red'><b>part destroyed</b></font>\";\n-                        } else {\n-                            partReport += \", <font color='red'><b>part damaged</b></font>\";\n-                        }\n-                    }\n-                    maintenanceReport += partReport + \"<br>\";\n-                }\n-                int nDamage = 0;\n-                int nDestroy = 0;\n-                for (int key : partsToDamage.keySet()) {\n-                    Part p = getPart(key);\n-                    if (null != p) {\n-                        int damage = partsToDamage.get(key);\n-                        if (damage > 3) {\n-                            nDestroy++;\n-                            p.remove(false);\n-                        } else {\n-                            p.doMaintenanceDamage(damage);\n-                            nDamage++;\n-                        }\n+    public void initRetirementDateTracking() {\n+        for (Person person : getPersonnel()) {\n+            if (person.getStatus().isRetired()) {\n+                LocalDate retired = null;\n+                LocalDate lastLoggedDate = null;\n+                for (LogEntry entry : person.getPersonnelLog()) {\n+                    lastLoggedDate = entry.getDate();\n+                    if (entry.getDesc().startsWith(\"Retired\")) {\n+                        retired = entry.getDate();\n                     }\n                 }\n-                u.setLastMaintenanceReport(maintenanceReport);\n-                int quality = u.getQuality();\n-                String qualityString;\n-                boolean reverse = getCampaignOptions().reverseQualityNames();\n-                if (quality > qualityOrig) {\n-                    qualityString = \"<font color='green'>Overall quality improves from \"\n-                            + Part.getQualityName(qualityOrig, reverse) + \" to \" + Part.getQualityName(quality, reverse)\n-                            + \"</font>\";\n-                } else if (quality < qualityOrig) {\n-                    qualityString = \"<font color='red'>Overall quality declines from \"\n-                            + Part.getQualityName(qualityOrig, reverse) + \" to \" + Part.getQualityName(quality, reverse)\n-                            + \"</font>\";\n-                } else {\n-                    qualityString = \"Overall quality remains \" + Part.getQualityName(quality, reverse);\n-                }\n-                String damageString = \"\";\n-                if (nDamage > 0) {\n-                    damageString += nDamage + \" parts were damaged. \";\n-                }\n-                if (nDestroy > 0) {\n-                    damageString += nDestroy + \" parts were destroyed.\";\n-                }\n-                if (!damageString.isEmpty()) {\n-                    damageString = \"<b><font color='red'>\" + damageString + \"</b></font> [<a href='REPAIR|\" + u.getId()\n-                            + \"'>Repair bay</a>]\";\n-                }\n-                String paidString = \"\";\n-                if (!paidMaintenance) {\n-                    paidString = \"<font color='red'>Could not afford maintenance costs, so check is at a penalty.</font>\";\n-                }\n-                addReport(techNameLinked + \" performs maintenance on \" + u.getHyperlinkedName() + \". \" + paidString\n-                        + qualityString + \". \" + damageString + \" [<a href='MAINTENANCE|\" + u.getId()\n-                        + \"'>Get details</a>]\");\n-            }\n-            u.resetDaysSinceMaintenance();\n-        }\n-    }\n \n-    public void initTimeInService() {\n-        for (Person p : getPersonnel()) {\n-            Date join = null;\n-            for (LogEntry e : p.getPersonnelLog()) {\n-                if (join == null){\n-                    // If by some nightmare there is no Joined date just use the first entry.\n-                    join = e.getDate();\n-                }\n-                if (e.getDesc().startsWith(\"Joined \") || e.getDesc().startsWith(\"Freed \")) {\n-                    join = e.getDate();\n-                    break;\n-                }\n-            }\n-            if (!p.isDependent() && !p.isPrisoner() && !p.isBondsman()) {\n-                GregorianCalendar cal = (GregorianCalendar) GregorianCalendar.getInstance();\n-                // For that one in a billion chance the log is empty. Clone todays date and subtract a year\n-                if (join == null) {\n-                    cal = (GregorianCalendar)calendar.clone();\n-                    cal.add(Calendar.YEAR, -1);\n-                    p.setRecruitment(cal);\n-                } else {\n-                    cal.setTime(join);\n-                    p.setRecruitment(cal);\n+                if (retired == null) {\n+                    retired = lastLoggedDate;\n                 }\n+\n+                // For that one in a billion chance the log is empty. Clone today's date and subtract a year\n+                person.setRetirement((retired != null) ? retired : getLocalDate().minusYears(1));\n             }\n         }\n     }\n \n     public void initAtB(boolean newCampaign) {\n-        getRetirementDefectionTracker().setLastRetirementRoll(getCalendar());\n+        getRetirementDefectionTracker().setLastRetirementRoll(getLocalDate());\n \n         if (!newCampaign) {\n             /*\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "3f55aabad31fb84ff1e5af9c8caac7bd8c8999a0", "message": "Merge commit", "committedDate": null}, {"oid": "a0c1cbf9746ed9486f08ce4aa2376828e846c786", "committedDate": "2019-02-26 21:45:56 -0500", "message": "merge"}, {"oid": "3002e321d67f944da3a051a049f0706c0e353aa0", "committedDate": "2019-03-04 20:50:34 -0500", "message": "merge from upstream"}, {"oid": "34f5dfffab4318e94903fece9dbf49dd1ee475c7", "committedDate": "2019-04-23 22:53:00 -0400", "message": "continues work on track gui and rules"}, {"oid": "b1c2e0f95fc8ad45080d9962da602d5fe815c34b", "committedDate": "2019-04-26 22:02:27 -0400", "message": "hook up stratcon rules manager to mekhq event bus"}, {"oid": "6f180f04dabdd9901dc392b093561514eb2e84cc", "committedDate": "2019-05-04 12:17:55 -0400", "message": "merge from upstream"}, {"oid": "119ff411ebb80f91b83b3fe139bb911a79048b3d", "committedDate": "2019-05-12 15:48:11 -0400", "message": "scenario setup work"}, {"oid": "2548381ed541547a775bb8c96fd53802087ec9aa", "committedDate": "2019-06-20 23:58:58 -0400", "message": "merge from upstream"}, {"oid": "ed6a5c015aa33d0bffdcd3297b9482ce600eb146", "committedDate": "2020-04-11 22:33:14 -0400", "message": "merge from upstream"}, {"oid": "ca46ea5005775f38ad56f98bfb8899a187571e49", "committedDate": "2020-06-03 11:30:19 -0400", "message": "merge from upstream"}, {"oid": "b2f014d250be5b4b75ed3f765f10ee1781ab96ae", "committedDate": "2020-06-23 22:21:32 -0400", "message": "merge from upstream"}, {"oid": "2bd7638ed4cc2ad5bc80e4b1bc78ff091c318a87", "committedDate": "2020-07-13 00:06:30 -0400", "message": "merge from upstream"}, {"oid": "d4f035c262d3d9ea7b7f5e935a5807bf5275aa91", "committedDate": "2020-08-08 23:08:38 -0400", "message": "merge from upstream"}, {"oid": "5830ebef6d2f671d0b152f328436ab36bcddacf4", "committedDate": "2020-08-24 20:32:16 -0400", "message": "merge from upstream"}, {"oid": "c8622590fef59265a5a8c4f68676a4a628d0fc0a", "committedDate": "2020-08-26 23:17:49 -0400", "message": "multiple bug fixes and hookup to actual campaign"}, {"oid": "935339ac1b799e58664d736142b2a1fa0d9e4263", "committedDate": "2020-09-09 00:06:07 -0400", "message": "merge from upstream"}, {"oid": "c7d9edb3737ba14da075190a1292ac94bbd7e0f2", "committedDate": "2020-09-20 14:36:56 -0600", "message": "Adding code for a log entry when swapping TOE force."}, {"oid": "2e590a1dbeb8a7b132cd5d312b93af37b9e0620a", "committedDate": "2020-09-29 10:15:54 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_476"}, {"oid": "04f10ee4b7f5bf57284109439ec1ab178b15857e", "committedDate": "2020-10-06 21:41:18 -0400", "message": "merge from upstream"}, {"oid": "04a16de448a0c7d576a6c3c64c9d23ae08384bae", "committedDate": "2020-10-07 14:33:13 -0400", "message": "Split out cargo and hangar statistics from Campaign"}, {"oid": "796379c3c13e8dadad4ac4cfd29f02a30e9c2bd1", "committedDate": "2020-10-07 14:33:13 -0400", "message": "Split out accounting from the Campaign"}, {"oid": "a254e204d91c3fd90698936f8d21aba26aaf0142", "committedDate": "2020-10-07 14:33:14 -0400", "message": "Move PersonnelReport methods"}, {"oid": "361dde24295aa66e89fea69823b01cf497cf4664", "committedDate": "2020-10-07 14:33:14 -0400", "message": "Move more financial reporting out of Campaign"}, {"oid": "c28db6f06dec2b03e487c15f514685d852bdca1e", "committedDate": "2020-10-07 14:33:14 -0400", "message": "Remove unused methods"}, {"oid": "039786019051fddf3af641c0cc0e35e7c85eb156", "committedDate": "2020-10-07 15:49:11 -0400", "message": "Make testing Accountant easier for a Campaign"}, {"oid": "a72b07d7b8ec62055140cd346314602fb020119e", "committedDate": "2020-10-07 16:11:53 -0400", "message": "Make it easier to mock stats classes"}, {"oid": "0400aac175c219dc2fb73ea0a8dfbbf429aaff6e", "committedDate": "2020-10-07 16:45:26 -0400", "message": "Add forEachSparePart to improve performance"}, {"oid": "63e028b04713a41ec415910ea4d0ed03a3678864", "committedDate": "2020-10-08 13:32:32 -0400", "message": "Merge remote-tracking branch 'upstream/master' into move-accounting-and-stats-out-of-campaign"}, {"oid": "13de948b34166d73f4f7a2e5a8982c9f693b12bc", "committedDate": "2020-10-10 15:15:00 -0400", "message": "Use Person directly instead of IDs in Unit"}, {"oid": "923a477ddb1060c2a48c13cca7c5900a40c0f82a", "committedDate": "2020-10-10 15:15:00 -0400", "message": "Use Person instead of an ID"}, {"oid": "58291b29acbe7cc24a4491f3d3ab911f0468a7dc", "committedDate": "2020-10-10 15:41:57 -0400", "message": "Fix logic to check for Already Being Worked On"}, {"oid": "998ab0faf85804f17cc7444ae1b46c2591b5db1f", "committedDate": "2020-10-15 23:34:03 -0400", "message": "merge from upstream"}, {"oid": "75e396b885c6008c6f6a7d72f1bbd7aad8099970", "committedDate": "2020-10-16 16:29:27 -0400", "message": "Moving to an enum for mission status"}, {"oid": "24de5e9720cf823838bf74e4cf4eb562bedbb437", "committedDate": "2020-10-16 18:28:46 -0400", "message": "Merging useUnitRating with the UnitRatingMethod enum"}, {"oid": "ca615b8e13e2158834a33079c6f89b02504c0bf7", "committedDate": "2020-10-17 01:17:28 -0400", "message": "Moving to using AbstractIcon for constants"}, {"oid": "4a54c7e9a18be4084eb1d3748a891b46400bf53d", "committedDate": "2020-10-17 13:11:47 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_IconConstants"}, {"oid": "9c1a47e2e6268b362edd3d6eb2e39018b5802179", "committedDate": "2020-10-20 14:49:01 -0400", "message": "Address PR feedback"}, {"oid": "b5d38e8af270f50fc091db05cf882ea8380fe3a7", "committedDate": "2020-10-20 14:49:08 -0400", "message": "Merge remote-tracking branch 'upstream/master' into units-hold-actual-persons"}, {"oid": "f34ac06c3db416f5e852246e928d3b1c6c132500", "committedDate": "2020-10-20 21:00:04 -0400", "message": "Merge branch 'master' into dev_Windchild_MissionStatus"}, {"oid": "fbc730260407b11dc98571c9b5e184e8f05e6a89", "committedDate": "2020-10-22 12:56:22 -0400", "message": "Standardizing to use the PortraitChooser instead of the older icon selector"}, {"oid": "0637c9d04376fbc5378a09826bdd58e1092b97f0", "committedDate": "2020-10-22 15:07:25 -0400", "message": "Use Units rather than their IDs"}, {"oid": "d25f391110cab3b64118d5963e321c379f8ab3ec", "committedDate": "2020-10-22 15:07:25 -0400", "message": "Do not use Unit IDs in Refits"}, {"oid": "5bf80c3e80c7fd9247fee197d749605de4a4e17b", "committedDate": "2020-10-22 15:07:49 -0400", "message": "Merge branch 'master' into dev_Windchild_IconConstants"}, {"oid": "2eec6da85e021ce0398fd3d715071b7b625855ba", "committedDate": "2020-10-22 23:15:38 -0400", "message": "merge from upstream"}, {"oid": "599b0a3158d94a3eea50fe8314c55177a344c2a9", "committedDate": "2020-10-24 14:22:32 -0400", "message": "Merge remote-tracking branch 'upstream/master' into use-units-not-ids"}, {"oid": "1d9b9a6ee2a71f128d65bb7754463be3ca9a71bc", "committedDate": "2020-10-24 14:26:31 -0400", "message": "Address LGTM issues"}, {"oid": "9f22e79abf71f3d8cf935d5d83d4790af02b32ce", "committedDate": "2020-10-24 14:48:29 -0400", "message": "Add tests for transport unit sets"}, {"oid": "851026ff48ec4e39238b2c56212bac2ea7993670", "committedDate": "2020-10-26 14:53:19 -0400", "message": "Use new Warehouse type in Campaign (etc)"}, {"oid": "37fc5840de9bf6c5bb19b38767e1394be220e1b9", "committedDate": "2020-10-26 16:02:30 -0400", "message": "Move some event logic to the Warehouse"}, {"oid": "3f795a2b3ba1840a198ca067a1d76aed4429f699", "committedDate": "2020-10-26 17:26:50 -0400", "message": "Move removing child parts to the Warehouse"}, {"oid": "d597a8aab6c1b948ebfdcc3f58d2213acb04b200", "committedDate": "2020-10-27 12:29:29 -0400", "message": "Starting to implement edge fixes"}, {"oid": "9978a0b21dd7d6fbd2d0077748027c6ed31753b0", "committedDate": "2020-10-27 12:29:35 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_Edge"}, {"oid": "b2aea6b5d940c4fa06a42cd1b04559815323ab63", "committedDate": "2020-10-27 13:04:35 -0400", "message": "Working on edge code"}, {"oid": "fbd0d470437e527c764daa294d1521ca7509a6af", "committedDate": "2020-10-27 14:04:21 -0400", "message": "Implementing changes as per review"}, {"oid": "c883a5f8c0085c74e8f448ecd3c0f9c04227b067", "committedDate": "2020-10-27 17:22:03 -0400", "message": "Move spare part helpers to Warehouse and add tests"}, {"oid": "dfca32fc2a15a2908cd4f1277261d416fcad1f00", "committedDate": "2020-10-27 21:14:06 -0400", "message": "merge from upstream"}, {"oid": "a7d7c78d0149d3de3828501499fdf61b5ae75be6", "committedDate": "2020-10-28 14:17:13 -0400", "message": "Merge pull request #2167 from sixlettervariables/add-parts-warehouse"}, {"oid": "d9aa78378bd639bd9bd8b36e16e9d407d5c2f1a6", "committedDate": "2020-10-28 14:28:37 -0400", "message": "Clean up part events in Campaign"}, {"oid": "f6acac4474902742fd52f7d3d9cc3cf3c074d16a", "committedDate": "2020-10-28 15:35:29 -0400", "message": "Address LGTM nit"}, {"oid": "b60b5a84ad487fe05e6369a11fedccb4f233a69d", "committedDate": "2020-10-29 15:28:06 -0400", "message": "Move Hire Personnel for a Unit to an action"}, {"oid": "d32837864805c67ac3894ce3a6b84ee8dae064a3", "committedDate": "2020-10-29 15:43:23 -0400", "message": "Don't use unit IDs for parts needing service"}, {"oid": "92b838a6428bae18030b98719a0c20d399377282", "committedDate": "2020-10-29 15:51:09 -0400", "message": "Move unnecessary unit logic from Campaign and into Unit"}, {"oid": "fd327a8f439a378f8f34afcb3067fe57153dcc2d", "committedDate": "2020-11-03 21:23:25 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_MHQPortraitSelector"}, {"oid": "0cbe836f9e807faf4cbef1d391b1ce3ad0e865d1", "committedDate": "2020-11-04 16:17:23 -0500", "message": "Add Quartermaster to manage machines and materiel"}, {"oid": "18cddebe515dbc58e76c49ef789cb3f4b31bc8a2", "committedDate": "2020-11-06 14:57:11 -0500", "message": "Address PR feedback and fix #1801"}, {"oid": "dd8b9c84414cb11c30ec6e2d395e2260235cd73a", "committedDate": "2020-11-06 14:58:38 -0500", "message": "Fix extraneous whitespace"}, {"oid": "31c96a9e64873aa2840946dbb1c12d347994780d", "committedDate": "2020-11-06 16:10:50 -0500", "message": "Swapping portrait generation to use system-based file path comparison"}, {"oid": "8bf24b6a7be023940aad58a0c3c3ded1ee2a9358", "committedDate": "2020-11-06 16:50:16 -0500", "message": "Fixing merge conflicts"}, {"oid": "206529fd93c7b6efd22949d747ea14ec2a1942ed", "committedDate": "2020-11-06 19:38:46 -0500", "message": "Merge pull request #2185 from sixlettervariables/use-units-not-ids-for-transports"}, {"oid": "f246ee2085262fe713a9f24b3eaf6e7adb142e41", "committedDate": "2020-11-07 10:40:39 -0500", "message": "Moving portrait generation code into a random portrait generator"}, {"oid": "139d94f86981a4c6b681ec14d16630b99198024a", "committedDate": "2020-11-07 12:32:07 -0500", "message": "AbstractIcon: Simplifying icon-related code"}, {"oid": "cbec2bdc4861f772bb509fc69f37a8c053522347", "committedDate": "2020-11-07 12:39:03 -0500", "message": "Removing duplicate constants in campaign"}, {"oid": "e9c4a88af33312b049543ac024e2c32784a7b209", "committedDate": "2020-11-07 12:52:54 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_AIPS"}, {"oid": "76f57ccbde3ae98e58e5264c5d06be29b03ce3af", "committedDate": "2020-11-07 15:16:08 -0500", "message": "Merge pull request #2209 from Windchild292/dev_Windchild_RPG"}, {"oid": "067bacc6c00b10192faa2b4e13d4c2127ba75292", "committedDate": "2020-11-07 22:39:06 -0500", "message": "Merge pull request #2211 from Windchild292/dev_Windchild_AIPS"}, {"oid": "a38a43b4cc7f7670aa7ffad2bf318bc15334d0a1", "committedDate": "2020-11-08 13:55:37 -0500", "message": "Merge remote-tracking branch 'upstream/master' into add-quartermaster-2"}, {"oid": "6b4dfeadd20c22e92cb2a0328030ed58c3df5cd1", "committedDate": "2020-11-14 19:29:15 -0500", "message": "Swapping Genealogy and FormerSpouse to no longer use id when active."}, {"oid": "aa59e47ee67a276b3a415ab3cb761291fa2d1593", "committedDate": "2020-11-15 16:10:53 -0500", "message": "Only return non-zero quantities of parts, fixing #2231"}, {"oid": "24c2199bd396e7e059f3a3123c060fce92c04726", "committedDate": "2020-11-30 21:41:10 -0500", "message": "merge from upstream"}, {"oid": "6b3e4afa0664f35d2fc49a8e881b2fd7f22ea981", "committedDate": "2020-12-04 07:37:02 -0500", "message": "Use tested spare part consolidation logic"}, {"oid": "749469b9d6c8f7a36748d76c53dae5cc39365894", "committedDate": "2020-12-04 10:33:33 -0500", "message": "Fixup whitespace"}, {"oid": "cb8a407413b0629636afe9dc153a93699cbcb2da", "committedDate": "2020-12-04 12:21:25 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_476"}, {"oid": "7c0dd98fed591d24803031e815a39480fae3da18", "committedDate": "2020-12-04 12:24:21 -0500", "message": "Fixing merge conflitcs"}, {"oid": "d770e67e26237234553967696e546ef4cd5e6c4a", "committedDate": "2020-12-04 16:20:00 -0500", "message": "Moving ranks to their own folder"}, {"oid": "198ea362215a2605015f13d5baf7a6f9a27e2323", "committedDate": "2020-12-04 17:57:54 -0500", "message": "Moving ranks system names to the Rank XML file"}, {"oid": "c88ca2c1c698dfe730b493048b630ef6d20ce973", "committedDate": "2020-12-13 02:45:36 -0500", "message": "Restore AtBContract references in the ContractMarket #2141"}, {"oid": "dce8434c1c674caf8ba284f7e99a0da72a679958", "committedDate": "2020-12-14 18:14:37 -0500", "message": "Merge pull request #2263 from Windchild292/dev_Windchild_2200"}, {"oid": "02b7023e03f921ec06430d3a3bfbf3fd4d06f12d", "committedDate": "2020-12-16 17:45:57 -0500", "message": "Add the ability to swap out instances of static classes"}, {"oid": "6fe11ed3dea3b240bc594dd3153526f8fa1efcd1", "committedDate": "2020-12-22 17:15:50 -0500", "message": "merge from upstream"}, {"oid": "1080fdc3cc0abf4b10a986fa95243f6a883a2446", "committedDate": "2020-12-22 17:22:20 -0500", "message": "Do not display unknown armor types in the Parts In Use report, fixes #2298"}, {"oid": "26577933fe91fcc839a403192479257fcf64f842", "committedDate": "2020-12-25 17:30:07 -0500", "message": "PlayerColours, Colour Camo Standardization, and standardizing camo selector"}, {"oid": "b7106b6df15109159676c4d5c76d6b57d98d749c", "committedDate": "2020-12-25 17:31:02 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_1727"}, {"oid": "256150fa6780932824d092bb5e1cfc5160a82798", "committedDate": "2020-12-26 23:02:07 -0500", "message": "Fixing colour camouflage during colour set"}, {"oid": "05bda11a452176725c2023ddfda641c5b9d77ff2", "committedDate": "2020-12-30 11:28:06 -0500", "message": "Merge pull request #2294 from sixlettervariables/add-contract-market-tests"}, {"oid": "d96560342ac372c6159e2eb36a930d730575079e", "committedDate": "2020-12-31 10:50:32 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_1727"}, {"oid": "87fef495531a68093af610ebd4d170ad9fe58ed7", "committedDate": "2020-12-31 13:13:30 -0500", "message": "Applying requisite changes in other files"}, {"oid": "1077aa3ce47d85a2b52d46fe24d0a9d6500338b3", "committedDate": "2021-01-07 22:38:01 -0500", "message": "Implementing PersonnelRole Enum"}, {"oid": "7ee43f4d3196080806f016767d68fcc646806b95", "committedDate": "2021-01-08 13:14:46 -0500", "message": "Fixing merge conflicts"}, {"oid": "461f2e03e5c7b7e233ccb188ab3acbea84217051", "committedDate": "2021-01-09 12:33:02 -0500", "message": "Fixing merge conflicts"}, {"oid": "7715f2d53d7b785432c6d12abe076dd9fe734b63", "committedDate": "2021-01-11 00:08:57 -0500", "message": "Continuing camouflage AbstractIcon implementation"}, {"oid": "5c767fe20f909aed7ad9ee04af783fada0f01183", "committedDate": "2021-01-13 14:44:22 -0500", "message": "Fixing colour set and moving EntityImage to use proper camo type"}, {"oid": "13a860aed5400a5bf2ccb7ff55f12b6266ed1c86", "committedDate": "2021-01-14 15:40:05 -0500", "message": "Moving to fully use isConventionalInfantry"}, {"oid": "b395926d66b44f814eeccbcdf238377754b3497f", "committedDate": "2021-01-16 12:03:30 -0500", "message": "Swapping to using streams for missions"}, {"oid": "3c08e5b43761cd85a411618df940a669f43b0f74", "committedDate": "2021-01-16 12:03:41 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_MissionStatus"}, {"oid": "56075ee22d31cf6645cfbc078f6d0059a7c35a2e", "committedDate": "2021-01-16 13:07:08 -0500", "message": "Swapping to stream implementation"}, {"oid": "c56982c6b4c7590fa58659f5739adb6fb98c38b3", "committedDate": "2021-01-16 13:20:27 -0500", "message": "Applying changes from personal review"}, {"oid": "bac1ae00109056ac5aaf4ddf35370fb62657e4ed", "committedDate": "2021-01-16 13:40:07 -0500", "message": "Moving to only use getMissions when necessary"}, {"oid": "6a6ab7d22aae49fceae02409ae8f3121e890ccc1", "committedDate": "2021-01-16 13:57:34 -0500", "message": "Moving to isActiveOn"}, {"oid": "e0a11cd0c98c4fd665190822f79c498645f15426", "committedDate": "2021-01-31 13:08:13 -0700", "message": "Renaming a bunch of personnel options"}, {"oid": "a16944f0ca0f8452a8500b311c0d4c1afd4f69ad", "committedDate": "2021-01-31 13:14:59 -0700", "message": "Finishing the option renames"}, {"oid": "3055e76295deb7d552bc3972b69cc6e0fb1f8760", "committedDate": "2021-02-01 10:17:56 -0700", "message": "Starting to implement Automatic Company Generation"}, {"oid": "909ceb8a84cdd6031bf90c300d47b4d2da527643", "committedDate": "2021-02-01 21:19:14 -0700", "message": "Continuing to work on an AtB Company Generator"}, {"oid": "50d74c591ba7b25978e91a326e3d0ce53513c6cd", "committedDate": "2021-02-07 16:50:13 -0700", "message": "Continuing to implement company generation and its options"}, {"oid": "426328755b88eceb8119a0c91696b2e655a0c00e", "committedDate": "2021-02-08 12:27:32 -0700", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_PersonnelRoles"}, {"oid": "9cbf543bf750926dffd2ad77d82e8da2dc416a54", "committedDate": "2021-02-08 12:57:48 -0700", "message": "Bugfixes and some code cleanup from personal review"}, {"oid": "f00627349f7dfb1bfb29305b3377fa3fea2776c5", "committedDate": "2021-02-11 10:55:45 -0700", "message": "Adding Unit::isConventionalInfantry to ensure the entity is null checked"}, {"oid": "d5767fac16735b748124c2759fa7e02388f3e3e0", "committedDate": "2021-02-11 12:52:56 -0700", "message": "Applying changes from personal review"}, {"oid": "d69c0121a94474264821a25df299ecf667dfefdf", "committedDate": "2021-02-12 22:37:21 -0500", "message": "merge from upstream"}, {"oid": "17e3819e3ef169b2b2bf9114df56a23fc8f57f8b", "committedDate": "2021-02-19 09:26:24 -0500", "message": "Add logging and error trapping on daily unit maintenance #2427"}, {"oid": "3a7dc0d62fbf19186d1bbebeefc14a1838733180", "committedDate": "2021-02-19 09:32:56 -0500", "message": "Add error trapping to daily part maintenance, related to #2427"}, {"oid": "efa0010ac4de3087fd997cad083dfcc7307f1fae", "committedDate": "2021-02-19 10:53:09 -0700", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_PersonnelOptionsTab"}, {"oid": "1e74b62a2b90eefb8fd7a24d4c24faf08d1c6b3b", "committedDate": "2021-02-19 12:27:59 -0700", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_AtBCompanyGeneration"}, {"oid": "8f0b7abad948bde3df857ec022c1a3668076b29c", "committedDate": "2021-02-26 13:31:57 -0700", "message": "2442: Fixing Ranks Issues: Removing ancient migration and code, Using proper setter, and using the Ranks as the spinner"}, {"oid": "d52c982d8da547329729b0caea1fffab274e1b0c", "committedDate": "2021-02-27 10:23:14 -0500", "message": "Use MM's new UnitNameTracker for name collisions"}, {"oid": "3c5f987fa51fbe18454c55214f4d5d5f2b980a90", "committedDate": "2021-03-01 09:12:20 -0700", "message": "Fixing merge conflicts"}, {"oid": "b9f8896698477ed928a80443d0345d6397c58bb2", "committedDate": "2021-03-03 10:07:04 -0700", "message": "Fixing merge conflicts"}, {"oid": "1a9d000431b1f187634f7e6ef15161dd07678998", "committedDate": "2021-03-05 12:19:51 -0700", "message": "Continuing to work on the company generator"}, {"oid": "7f59899475e511f98ed9f64a1c10efab11737c43", "committedDate": "2021-03-05 21:50:52 -0500", "message": "merge from upstream"}, {"oid": "1a6354d39d3f6108e9e0e6f9e455c5a126627347", "committedDate": "2021-03-06 10:44:21 -0500", "message": "Address review comments"}, {"oid": "18c7330a3cc319d1dc3e55892a46c5c80539db9a", "committedDate": "2021-03-06 09:56:12 -0700", "message": "Fixing merge conflicts"}, {"oid": "b19752176bb0619f7ccda9f75d551b050521a106", "committedDate": "2021-03-08 23:25:41 -0500", "message": "merge from upstream"}, {"oid": "0bc70593b2b327657e4ff7709e320451adfadbe6", "committedDate": "2021-03-09 09:01:53 -0700", "message": "Fixing merge conflicts"}, {"oid": "9eca5ea7a7d0fe44db02d1ce091f5bf294cb156d", "committedDate": "2021-03-09 09:07:57 -0700", "message": "Fixing merge conflicts"}, {"oid": "baefb52c3074832565148fffae6d1363449fa8ae", "committedDate": "2021-03-09 09:19:18 -0700", "message": "Fixing merge conflicts"}, {"oid": "9499ad003bfeb58930187abad3334129be912b4e", "committedDate": "2021-03-09 09:23:18 -0700", "message": "Fixing merge conflicts"}, {"oid": "d0e34e3b80c163ff4ed03474a3adcd39d061c9ee", "committedDate": "2021-03-09 09:39:24 -0700", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_ShoppingList"}, {"oid": "8ee805b229c9373e653376a749274023ef13139b", "committedDate": "2021-03-09 11:54:07 -0500", "message": "Merge pull request #2373 from Windchild292/dev_Windchild_isConventionalInfantry"}, {"oid": "559cb006d560fd2099639e701e37538aded7f3a1", "committedDate": "2021-03-09 12:19:33 -0500", "message": "Merge pull request #2337 from Windchild292/dev_Windchild_ShoppingList"}, {"oid": "2bf37308c59c435acc52e0cf512ce9f74d1adc7e", "committedDate": "2021-03-09 10:26:52 -0700", "message": "Fixing merge conflicts"}, {"oid": "62726bf22f84cafc8872cbdebd5a8edce980e60a", "committedDate": "2021-03-09 10:27:33 -0700", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_CamouflageIcon"}, {"oid": "5082524cc2a32c4a8360cb845951a5e2b94300df", "committedDate": "2021-03-09 11:46:51 -0700", "message": "Fixing merge conflicts"}, {"oid": "c640fe5cc744f25a6fb292dd50220c8ecfe1c986", "committedDate": "2021-03-09 12:27:38 -0700", "message": "Fixing merge conflicts"}, {"oid": "64b151aab1a311e538c895526ba3f807216917c1", "committedDate": "2021-03-11 19:48:54 -0700", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_MissionStatus"}, {"oid": "98253ba4fbbd681dca588b7cb766e8439c19d880", "committedDate": "2021-03-11 19:59:41 -0700", "message": "Applying bugfixes from review"}, {"oid": "8d7d2a8df4596249f133919b569b56249b0068aa", "committedDate": "2021-03-12 14:28:19 -0700", "message": "Improving default contract name and sort"}, {"oid": "c13dedfdb7ce73cfdfe1d464e83765140336736c", "committedDate": "2021-03-12 14:59:22 -0700", "message": "2458: Adding Insufficient Astech warnings for MRMS and adding some more Astech/Medic pool functions"}, {"oid": "d2b11fb805eea82905ab0d8f846ca96bd69124e3", "committedDate": "2021-03-13 09:01:10 -0700", "message": "Fixing merge conflicts"}, {"oid": "902ebb67bf5dbe2e94cc32810992a2d1aa6c321c", "committedDate": "2021-03-13 09:02:31 -0700", "message": "Fixing merge conflicts"}, {"oid": "ec5843cb0d12174c7d5f83419268e5184d2d60f6", "committedDate": "2021-03-13 09:08:04 -0700", "message": "Fixing merge conflicts"}, {"oid": "1e0c0d260af35ecf86a9b8b9519c8cceee2e7028", "committedDate": "2021-03-13 11:47:11 -0700", "message": "Moving the unit market changes into an individual branch that contains some parts of the contract market changes"}, {"oid": "a5382b0386cb0354a4b3c870fdd8fee5e2f5330a", "committedDate": "2021-03-13 22:22:50 -0500", "message": "additional code review changes"}, {"oid": "fe6e045bb8acb2700cc38bd6a25ec62011977264", "committedDate": "2021-03-14 01:21:48 -0500", "message": "merge from upstream"}, {"oid": "48663cfaebb3a6a04f5680e7f755c532bd159779", "committedDate": "2021-03-14 10:58:03 -0600", "message": "Fixing merge conflicts"}, {"oid": "b8ccd096938dcbd22c56b4a93c87c78d770df189", "committedDate": "2021-03-16 10:03:47 -0600", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_AbstractUnitMarket"}, {"oid": "00db4b9f4381f0d6bcaadbbaa197f0be1c80d30b", "committedDate": "2021-03-17 12:29:14 -0400", "message": "Merge pull request #2445 from sixlettervariables/issue-2597-protect-duplicate-name-hash"}, {"oid": "a79e2e08ae5167e26dc37999b749296e47e179b9", "committedDate": "2021-03-17 12:27:27 -0600", "message": "Finishing the Unit Market Dialog"}, {"oid": "9d4975c56dc9ea4c18da5c7b146cfa794453f668", "committedDate": "2021-03-17 12:53:48 -0600", "message": "Swapping to EmptyUnitMarket instead of null"}, {"oid": "795721747293b0a0a0b4a5e12334158e9da303da", "committedDate": "2021-03-17 14:00:33 -0600", "message": "Fixing merge conflicts"}, {"oid": "aac2ced366aa376eb9fa78ab230f38e43d0c8362", "committedDate": "2021-03-17 21:16:52 -0400", "message": "code review changes"}, {"oid": "67d86a55c23420a76995a1457504c22f1b9cc48a", "committedDate": "2021-03-18 10:00:41 -0600", "message": "338: Base Free Time Sort"}, {"oid": "b634beb8d18a3ebafa13e3332256da259e3ef1c1", "committedDate": "2021-03-18 14:35:10 -0600", "message": "Finishing up working on abstracting out the Unit Market"}, {"oid": "8627de7d060ea44d3e33d04c259f8ab05f5bba9f", "committedDate": "2021-03-21 20:29:53 -0400", "message": "merge from upstream"}, {"oid": "04087a9bc33d0e3547e9c2dc68db496eac62b82b", "committedDate": "2021-03-21 20:10:23 -0600", "message": "Fixing merge conflicts"}, {"oid": "093eaeb8fbe362bb2d525d661180c433576aab9b", "committedDate": "2021-03-24 00:26:51 -0400", "message": "merge from upstream"}, {"oid": "2a2559d3ab5da713e7b8864ab0de458849dce6b6", "committedDate": "2021-03-24 09:29:25 -0600", "message": "Swapping over to using a three tiered rank setup"}, {"oid": "1e4e1993ec9f2278c7f326d28bcae5a7bff9c4a0", "committedDate": "2021-03-24 12:05:23 -0600", "message": "Heavy simplification of rank profession code"}, {"oid": "a57000e9696c4bf593f3215fa36543b2d13ed5ea", "committedDate": "2021-03-24 12:30:48 -0600", "message": "2196: Swapping to a standardized display wrapper class for rank display"}, {"oid": "b903aa7de36203afa40ede49922eb9e422fdcf43", "committedDate": "2021-03-24 13:07:46 -0600", "message": "1483: Adding Rank System import/export"}, {"oid": "e5b1d3a3fc6d825d722e496ad49832555fa65754", "committedDate": "2021-03-25 14:08:49 -0400", "message": "units deployed to StratCon tracks are ineligible for repairs"}, {"oid": "e7042962dd815937b9d91c1335d85ccec3647bf7", "committedDate": "2021-03-30 13:26:17 -0400", "message": "Merge pull request #2371 from Windchild292/dev_Windchild_CamouflageIcon"}, {"oid": "091d87a31e8cf5d1061ccf76a256bf990a0a623b", "committedDate": "2021-03-30 11:27:53 -0600", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_2449"}, {"oid": "37144650aef43bd5f3a8a14257376f2d6fe133f8", "committedDate": "2021-03-30 16:21:13 -0400", "message": "merge from upstream"}, {"oid": "5854d37bf8fbd63f741b9601ef373a16253a9b32", "committedDate": "2021-04-04 09:12:14 -0600", "message": "Adding the ability to create a custom rank system"}, {"oid": "db96404f216df48ce5321de053ce56015837d2cd", "committedDate": "2021-04-04 09:43:32 -0600", "message": "Renaming the campaign rank system methods to properly handle rank system changes"}, {"oid": "ae6bdf14123e6ac4ba92f5884b58b533b6cad2d3", "committedDate": "2021-04-04 10:12:54 -0600", "message": "Moving personnel rank changes to their proper location within person"}, {"oid": "19f0f0ce5d069f8f6f4f481cda04cdee3e05402a", "committedDate": "2021-04-04 11:59:18 -0600", "message": "Working on rank import/export"}, {"oid": "a34e385bf50ab28870531fe663d288b7b98b2697", "committedDate": "2021-04-06 10:54:55 -0600", "message": "Fixing and improving validation issues"}, {"oid": "3f3d7b237f61dd118eeb39087eb7fe9de6be03a0", "committedDate": "2021-04-06 11:53:59 -0600", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_GenealogyIdReference"}, {"oid": "80202c7f73397f3bc36193b0f3e2fce444bc4070", "committedDate": "2021-04-06 16:04:51 -0600", "message": "Fixing merge conflicts"}, {"oid": "ab655fb9abe6d2b9be4e20eba7e4c74b4b8e5c22", "committedDate": "2021-04-06 16:20:53 -0600", "message": "Fixing merge conflicts"}, {"oid": "729ef155ccdbaca3a1f23f1e57309d3b973851da", "committedDate": "2021-04-06 16:38:48 -0600", "message": "Fixing merge conflicts"}, {"oid": "a4c29e55f023d3416dd5e3f18a9d2061ab841fa1", "committedDate": "2021-04-06 17:56:58 -0600", "message": "Fixing merge conflicts"}, {"oid": "47bf0ed7fa9b09a4d76b634d900cceac953e17ed", "committedDate": "2021-04-06 19:54:46 -0600", "message": "Fixing merge conflicts"}, {"oid": "c2d264c23786de4ea703861360c3bcb46e79c5ac", "committedDate": "2021-04-07 00:13:59 -0400", "message": "merge from upstream"}, {"oid": "a5d70a5c672e494c7ec8be19e05d642b0259c9c4", "committedDate": "2021-04-07 14:24:17 -0600", "message": "Implementing multiple new procreation options and moving it to work based on a supplied date"}, {"oid": "18e6e46b095f8bbb1c623c60fd3aa177b7fe8682", "committedDate": "2021-04-09 09:22:39 -0600", "message": "Fixing merge conflicts"}, {"oid": "ae01b6e6d0fa55b766f741fa6fb35f727fff344b", "committedDate": "2021-04-12 09:45:59 -0600", "message": "Creating ScenarioStatus Enum and updating how scenarios are gotten"}, {"oid": "133e5865e2ee8dd5900b26dfe5f9aa0459a1a04c", "committedDate": "2021-04-14 11:31:25 -0400", "message": "multiple bugs with ignoring scenarios; ground pirats on air maps"}, {"oid": "3d8916caadfbc4085e509724142f929fc9d7f1d5", "committedDate": "2021-04-16 17:31:08 -0400", "message": "add text resources; remove campaign scenarios after ignoring in stratcon UI"}, {"oid": "2e00ea9a5b972b07d7446e75a06d3d493ac69426", "committedDate": "2021-04-16 21:14:35 -0400", "message": "code review changes"}, {"oid": "becffdc94075004fa3890bb36799389a48105c33", "committedDate": "2021-04-16 23:10:50 -0400", "message": "code review changes; data fix; stop nagging once user hits 'no' once"}, {"oid": "d71320d4f7a9ae41189a6b4651979960cb9dcc0f", "committedDate": "2021-04-20 21:55:21 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_2449"}, {"oid": "39603f48e1d441dd892227bef76e398c95cd4852", "committedDate": "2021-04-20 21:59:13 -0400", "message": "Fixing merge conflicts"}, {"oid": "3f7306636c42a999caf904b8d513f267243def42", "committedDate": "2021-04-20 22:01:54 -0400", "message": "Fixing merge conflicts"}, {"oid": "1c0e5821f637a666ef7632b5d821db62d76f624d", "committedDate": "2021-04-20 22:20:35 -0400", "message": "Fixing merge conflicts"}, {"oid": "9b9545c3b2e6890b9bef97677c61bb175cd5cc89", "committedDate": "2021-04-21 00:39:22 -0400", "message": "allow extra time for maintenance"}, {"oid": "de34b46d2f53c172612ebe5aa1abffe16b249f06", "committedDate": "2021-04-23 10:23:26 -0400", "message": "Bugfixing"}, {"oid": "b82fd9901fd0447da0211522ffc97ccae5c708ac", "committedDate": "2021-04-23 11:36:57 -0400", "message": "Fixing merge conflicts"}, {"oid": "bb7b0c375b9a2fd6baeced3e5e94501eb2e636ed", "committedDate": "2021-04-23 13:03:53 -0400", "message": "Moving into selectors folders"}, {"oid": "1ba164a58381a4be88ec479fee5841c1b8cdcf99", "committedDate": "2021-04-23 13:15:11 -0400", "message": "Making initial faction changes for constructors and ordering"}, {"oid": "fc7a0539b85c7af6a166ed9d779e7b723307b883", "committedDate": "2021-04-23 15:57:04 -0400", "message": "Making RandomOriginOptions, which will allow its use in multiple locations"}, {"oid": "1741bea67582d0555d094cbdd0fa977eec707bcc", "committedDate": "2021-04-24 22:10:27 -0400", "message": "fix scenario date/force resets"}, {"oid": "cebc3d0c231e54580eb29e4756f549b702b9ace1", "committedDate": "2021-04-27 14:41:42 -0400", "message": "Merge pull request #2462 from Windchild292/dev_Windchild_2460"}, {"oid": "b0c3badc393ff67ccba2cbe34623ca496c576782", "committedDate": "2021-04-27 14:42:27 -0400", "message": "Merge pull request #2352 from Windchild292/dev_Windchild_PersonnelRoles"}, {"oid": "138d08410b585fae3ba4af354d18d2b15d5d36c8", "committedDate": "2021-04-27 14:48:43 -0400", "message": "Fixing merge conflicts"}, {"oid": "5f426e90c201a24d339c0322897809938b79db5a", "committedDate": "2021-04-27 15:08:01 -0400", "message": "Fixing merge conflicts"}, {"oid": "7b4772ec38db2aa8d657d0a22ed7868d0c4f6117", "committedDate": "2021-04-27 15:45:52 -0400", "message": "Fixing merge conflicts"}, {"oid": "ce0b3b652feb9205fb4ed8cc3ae599bb5da9a308", "committedDate": "2021-04-27 15:47:48 -0400", "message": "Fixing merge conflicts"}, {"oid": "f7d684241f42639eb35d60508c39dbb00b0d9dbc", "committedDate": "2021-04-28 10:56:49 -0400", "message": "Fixing merge conflicts"}, {"oid": "8dd83b6c46f8f2454ba4d4accfe8176c58e398d7", "committedDate": "2021-04-29 23:22:27 -0400", "message": "Fixing merge conflicts"}, {"oid": "87033ef81af06d5a8c2af9d93a9b9057e49f0fde", "committedDate": "2021-05-01 17:09:56 -0400", "message": "Fixing merge conflicts"}, {"oid": "815f8fa858fdbf707019709a5d51524b5e61472a", "committedDate": "2021-05-04 14:12:54 -0400", "message": "Dependent Flag Swapover"}, {"oid": "66f6a880e1b615fb97de9757be649fc18c10f049", "committedDate": "2021-05-04 19:52:08 -0400", "message": "Implementing auto-hiring pool on new day"}, {"oid": "bbcc984be566d1587a598efc974fb1dbb399868a", "committedDate": "2021-05-05 18:25:22 -0400", "message": "Fixing merge conflicts"}, {"oid": "741d61daa6ac3570f7a3c569ee6e6dc87a902441", "committedDate": "2021-05-08 20:32:38 -0400", "message": "Fixing merge conflicts"}, {"oid": "227d6642ef68511eb067588bdf263aa2ad88f421", "committedDate": "2021-05-09 10:13:42 -0400", "message": "Creating the backend implementation for random procreation modules"}, {"oid": "e0faed52760616365379933d91f9343f58c61cb4", "committedDate": "2021-05-09 14:30:58 -0400", "message": "Renaming the directory from random procreation to procreation"}, {"oid": "7943361f04c7c5cc1753852ddba3a77d8259ab57", "committedDate": "2021-05-11 09:52:44 -0400", "message": "2607: Starting to work on redoing the salvage calculations"}, {"oid": "0539aea6159ca7cfbbb77a035ffb6c51d590d29f", "committedDate": "2021-05-11 10:40:37 -0400", "message": "2607: Properly calculating and paying for payment overages"}, {"oid": "33d43f4fe9a41925e3cc417f5d782c19f097ad63", "committedDate": "2021-05-15 06:53:31 -0400", "message": "Merge pull request #2583 from Windchild292/dev_Windchild_DependentFlagSwapover"}, {"oid": "55da24b03b3ecbc71f7d6ab739e1820f1814fda1", "committedDate": "2021-05-17 13:46:12 -0400", "message": "Creating AtB Contract Type and AtB Morale Level enums"}, {"oid": "470df7bcd395e57ffe3f3e59660f0e468cdcfaf1", "committedDate": "2021-05-18 01:31:38 -0400", "message": "fix multiple issues generating fixed objective scenarios"}, {"oid": "ffcd06cfa996127e858ea60096b58286f97a8a8a", "committedDate": "2021-05-19 09:33:39 -0400", "message": "Implementing save code swapover"}, {"oid": "c03f4deaeb4d632a5e2e614ae5204da255eea805", "committedDate": "2021-05-22 22:01:49 -0400", "message": "Merge pull request #2608 from Windchild292/dev_Windchild_2607"}, {"oid": "f9cf763bd4ff9a8e017e54464ad20989c2e772d3", "committedDate": "2021-05-23 23:33:39 -0400", "message": "Fixing merge conflicts"}, {"oid": "b5b8facc5de91af84188412dc8d1ec3df00e3ae6", "committedDate": "2021-05-24 13:55:12 -0400", "message": "Fixing merge conflicts"}, {"oid": "1b33879affd0101e7870d5696137e354b636d342", "committedDate": "2021-05-24 13:57:36 -0400", "message": "Fixing merge conflicts"}, {"oid": "f4c2aadcbf8a9e3bc45db1e7227160e36f43d47a", "committedDate": "2021-05-24 14:00:22 -0400", "message": "Merge branch 'master' into dev_Windchild_CamouflageRework"}, {"oid": "fe024592b6ac70b9cf1a9cd546a54ebc8bb02363", "committedDate": "2021-05-24 17:16:21 -0400", "message": "2625: Properly Clear Tech Units on Person removal/retirement"}, {"oid": "530decc0b587e53087c8cacbe31aeba13dd82f41", "committedDate": "2021-05-29 11:32:44 -0400", "message": "Fixing merge conflicts"}, {"oid": "156500be4e08594aeaf3efa424938f295b2ed86e", "committedDate": "2021-05-29 16:04:26 -0400", "message": "Phase one of Campaign Preset rework"}, {"oid": "34d76d4e22674638bd3ce602a713238ff5c203b8", "committedDate": "2021-05-30 14:33:28 -0400", "message": "Phase Two: finishing internal work and starting on GUI implementation"}, {"oid": "12f96f2ab3335b805508c31bbbc08a9bcf5491d7", "committedDate": "2021-05-30 21:57:28 -0400", "message": "Fixing merge conflicts"}, {"oid": "b109f86e86e8aba9c5b4aa279919f2d6547979b9", "committedDate": "2021-05-31 10:38:11 -0400", "message": "Fixing merge conflicts"}, {"oid": "65a009b4cf6307795c815aacdb82feb8fba0a01d", "committedDate": "2021-05-31 17:00:21 -0400", "message": "Fixing merge conflicts"}, {"oid": "14d482cda0564e28b6c5ea95e20725e2200f51ff", "committedDate": "2021-05-31 17:57:20 -0400", "message": "Merge branch 'master' into maintenance_extra_time"}, {"oid": "00a30fe49ee531dda71cb88bacc2f56dbe0a5b9e", "committedDate": "2021-05-31 18:05:23 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_2654"}, {"oid": "fa54f8e9f392dc2f02cb5b1b5bc9e8c428a88e61", "committedDate": "2021-06-02 12:29:42 -0400", "message": "Creating a base ignorable nag dialog for MekHQ and implementing it in all current new day nags"}, {"oid": "2509a0841acae929e7340ae5fe4d01f7bf437d40", "committedDate": "2021-06-02 16:20:48 -0400", "message": "Fixing merge conflicts"}, {"oid": "6b416ee90791ecb016edf0ae5b5c0e16ebdd4760", "committedDate": "2021-06-09 16:05:55 -0400", "message": "Fixing merge conflicts"}, {"oid": "d36c47d7aaa8978e4d523b2031d299babd654e2a", "committedDate": "2021-06-09 16:08:35 -0400", "message": "Fixing merge conflicts"}, {"oid": "7fe956938b8b76f05f395b681f8bd5f4bd02d25a", "committedDate": "2021-06-09 21:27:13 -0400", "message": "Fixing merge conflicts"}, {"oid": "055b02a76318d18eed5ad27a93333893cf8b74db", "committedDate": "2021-06-09 22:30:38 -0400", "message": "Fixing merge conflicts"}, {"oid": "e8c2b13279e2b5d226f4de5b350e2d12ff468577", "committedDate": "2021-06-11 00:26:36 -0400", "message": "Fixing merge conflicts"}, {"oid": "d4b45a4c9543d0786feacc4344d364fee2997970", "committedDate": "2021-06-11 12:46:28 -0400", "message": "Fixing merge conflicts"}, {"oid": "2560bdda30482870c73884470b53cb579bcaa47a", "committedDate": "2021-06-14 13:25:17 -0400", "message": "Force icon implementation migration from outdated previous branch"}, {"oid": "6fd836ff4e8a233aa293e2a3fc08cd3316f64b66", "committedDate": "2021-06-14 14:23:04 -0400", "message": "Adding UnitIcon, GM Tools implementation, and baseline for export"}, {"oid": "eaf4453f2f1f40707d9594de5dd6aa83d594b776", "committedDate": "2021-06-14 18:04:32 -0400", "message": "Applying personal code review changes and starting unit icon code"}, {"oid": "e1a7f7166de5f36fa0c44b7151478c944e6a4b89", "committedDate": "2021-06-21 13:16:19 -0400", "message": "Apply overtime to the last chunk worked as well #2679"}, {"oid": "9c62597332ac0ba24004132e537ba0cf049741e3", "committedDate": "2021-07-01 12:35:33 -0400", "message": "Fixing merge conflicts"}, {"oid": "809c6366e1ce1dea3f4b2fa21841aab6639992a4", "committedDate": "2021-07-10 11:47:52 -0400", "message": "Finishing the portrait swapover"}, {"oid": "0ddba79849d418947ba1ce309a4c673ac78292d4", "committedDate": "2021-07-10 20:58:49 -0400", "message": "Bugfixing, phase 1"}, {"oid": "10a9609cabffc8f5e7068b6c0c33c0f65f796508", "committedDate": "2021-07-12 18:39:55 -0400", "message": "Fixing unit tests"}, {"oid": "06664ff8286a85fe165e5f92aaaf22326e692c90", "committedDate": "2021-07-15 10:22:09 -0400", "message": "Merge branch 'master' into dev_Windchild_476"}, {"oid": "e0e383e2453514ee7c9c7abc9214a2a1a869a068", "committedDate": "2021-07-15 10:34:25 -0400", "message": "Fixing merge conflicts"}, {"oid": "7211585d4a34159d5c80c9ea30fa44bc2746c1b4", "committedDate": "2021-07-17 20:03:19 -0400", "message": "Fixing a few potential divide by zero issues"}, {"oid": "a3eb7d3dfe3477e32117d175e717023f539795eb", "committedDate": "2021-07-17 20:11:58 -0400", "message": "Further cleanups from personal review"}, {"oid": "21a75e1c9ca5516bb7394f30fa2c0b4d9a68b9ad", "committedDate": "2021-07-17 20:27:51 -0400", "message": "Further cleanups, and adding an astech team size constant"}, {"oid": "35bffb052c1b608df03fb41f6548a3e9f847cca6", "committedDate": "2021-07-18 10:43:10 -0400", "message": "Fixing NPE warning and cleaning up the if statement"}, {"oid": "a7670828c4762e3852dbd248b348c2dd371b5018", "committedDate": "2021-07-18 12:12:40 -0400", "message": "Fixing possible confusion of local and field warnings"}, {"oid": "951b55f7a5fb6036e67897e709cd6a0dbbb45b39", "committedDate": "2021-07-18 12:33:08 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_Procreation"}, {"oid": "61cc2fd1669914bef276e018cb7562be422b1f7c", "committedDate": "2021-07-18 14:30:17 -0400", "message": "Removing Deprecated Usages: Logger swapover"}, {"oid": "542307adf490f10930d9470ff64879b4b7ee6b0a", "committedDate": "2021-07-20 10:11:31 -0400", "message": "Moving crew null check and fallback logic into Campaign::getShorthandedModForCrews"}, {"oid": "f6e661dba426e63388e9b57d224a7090006e3203", "committedDate": "2021-07-20 10:18:55 -0400", "message": "Merge pull request #2751 from Windchild292/dev_Windchild_AstechDivideByZero"}, {"oid": "f3bd90fefb0af89a7177be76f70aeed033a7b258", "committedDate": "2021-07-20 10:20:25 -0400", "message": "Fixing merge conflicts"}, {"oid": "424407a51980930adead83bbfa918bf2b0d8a441", "committedDate": "2021-07-20 21:09:32 -0400", "message": "Fixing merge conflicts"}, {"oid": "497f1345950b39b1eb1e2d1389b63a7fcd5eef14", "committedDate": "2021-07-20 21:26:53 -0400", "message": "Fixing merge conflicts"}, {"oid": "bc21146f53fc23bdfd1f5f4273f07b588b0904e2", "committedDate": "2021-07-24 10:15:39 -0400", "message": "Fixing merge conflicts"}, {"oid": "a5e9303ebeafcd74e0348b8b2f767c5f8e12c8cb", "committedDate": "2021-07-26 12:32:33 -0400", "message": "2558: Swapping removePerson to be object instead of id based"}, {"oid": "0a76a9693556237907de0f6e2a5a08f48dcfd3be", "committedDate": "2021-07-26 12:38:50 -0400", "message": "2558: Custom message for when dependants leave"}, {"oid": "1babc7de6f9de3b1f517061f1c249c3339f13e10", "committedDate": "2021-07-26 12:54:49 -0400", "message": "2558: Adding unique dependent add message"}, {"oid": "b214bdb7975aabd1cdc8d39cb9f1fdea3541b58d", "committedDate": "2021-07-26 15:13:02 -0400", "message": "Fixing merge conflicts"}, {"oid": "d86c1c8c70ae0bcc2a9d6dd09e7fe963745b5e37", "committedDate": "2021-07-26 22:20:42 -0400", "message": "Merge pull request #2478 from Windchild292/dev_Windchild_AbstractUnitMarket"}, {"oid": "d83ce12b4886460ba57e84afbf15b20e30fab693", "committedDate": "2021-07-28 15:48:34 -0400", "message": "Isolating RATs into the RAT Tab"}, {"oid": "3d303b442ab8d664c56fd8709d970f86c7eed83f", "committedDate": "2021-07-30 10:40:29 -0400", "message": "Loan code cleanup and refactoring"}, {"oid": "56910a666af8115ec4e364b98a16fc009c1a65b5", "committedDate": "2021-07-30 11:11:21 -0400", "message": "Fixing merge conflicts"}, {"oid": "ec7e4bc4aeed27a5b835b44d295642228bcc16c3", "committedDate": "2021-08-10 12:37:47 -0400", "message": "Transaction Type Enum"}, {"oid": "497976540984392426f984acd40477886555e06d", "committedDate": "2021-08-10 15:25:55 -0400", "message": "Fixing merge conflicts"}, {"oid": "1faa42c3d120f62fa60bebc946c56cae3ba293f8", "committedDate": "2021-08-10 15:47:16 -0400", "message": "Doing some personal review cleanup"}, {"oid": "be94a7ab35307e2b345d967cbd0163417ea9802d", "committedDate": "2021-08-12 21:28:51 -0400", "message": "bulletproofing for a couple of individual unit actions"}, {"oid": "01f8aa5c3d90cd2d8b553c5c8c73a336af524e8b", "committedDate": "2021-08-13 22:07:09 -0400", "message": "2798: Adding total XP earnings tracking"}, {"oid": "771c3107183e31fa9da9b2e417a6fc0d0b673a48", "committedDate": "2021-08-14 00:07:09 -0400", "message": "274: Moving Era definitions to a file"}, {"oid": "795d3aba4875a600dd0a6ec91a10cb7e90814c6c", "committedDate": "2021-08-18 12:48:20 -0400", "message": "Removing Person's Campaign save and switching to full pass-by-reference for Campaign"}, {"oid": "4e80bdad1f20ebfb53cfe559ade8975594f3d362", "committedDate": "2021-08-21 12:12:11 -0400", "message": "2754: Properly clearing Narc and iNarc Flags during scenario resolution"}, {"oid": "ed447da30212105694957e35687f1bfedd6b56b0", "committedDate": "2021-08-24 13:11:20 -0400", "message": "Merge pull request #2805 from Windchild292/dev_Windchild_274"}, {"oid": "7120d3b0aa69ebd282e855a4b2a47bda4697ba78", "committedDate": "2021-08-24 13:14:09 -0400", "message": "Merge pull request #2793 from Windchild292/dev_Windchild_TransactionType"}, {"oid": "9e7480b600f9290c00f5f082dd91201999d12f42", "committedDate": "2021-08-24 13:14:19 -0400", "message": "Merge pull request #2804 from Windchild292/dev_Windchild_2798"}, {"oid": "70aa4b94439c59d6e5de9d6191a3c0a02365e644", "committedDate": "2021-08-24 13:39:42 -0400", "message": "Fixing merge conflicts"}, {"oid": "0e72a8bc212f26b8d9b7bb789b0c1f84f1426c78", "committedDate": "2021-08-24 13:42:42 -0400", "message": "Fixing merge conflicts"}, {"oid": "3a01897bb20c8be27823164f09aca9af1aa3360d", "committedDate": "2021-08-24 13:53:59 -0400", "message": "Fixing merge conflicts"}, {"oid": "bacc8f3e733e0cd4cc0fa629ced5d3b5079abc76", "committedDate": "2021-08-24 17:23:41 -0400", "message": "Fixing merge conflicts"}, {"oid": "e273d7035001140a977ebe3299d17602ef52d498", "committedDate": "2021-08-28 17:37:23 -0400", "message": "Fixing merge conflicts"}, {"oid": "59fca0be576b219f25123793a2118255168d1c03", "committedDate": "2021-08-29 11:15:40 -0400", "message": "Modularized Marriage"}, {"oid": "6a48665a09b5cfd3b2309975077163fae687c39e", "committedDate": "2021-08-29 14:41:32 -0400", "message": "Adding creation dialog and bugfixing"}, {"oid": "0a89d7421946ba75d7d926af996b27e9e994a911", "committedDate": "2021-08-31 14:50:25 -0400", "message": "Fixing merge conflicts"}, {"oid": "0f4e17188d8360baf639cbc66dd29da85336be81", "committedDate": "2021-08-31 15:28:05 -0400", "message": "Applying changes from personal review"}, {"oid": "bd9dded105bfbfdf64e7b10e2059f2633326c113", "committedDate": "2021-08-31 15:39:04 -0400", "message": "Swapping to weighted double map"}, {"oid": "5eaf88579bd60bfee3c39a936a9d647a4eb1de4f", "committedDate": "2021-08-31 16:45:21 -0400", "message": "Reworking to use random origin options instead of the internally stored values"}, {"oid": "bbccfa2dcef0be4fbb07cd3af6cdbd15d7ced036", "committedDate": "2021-08-31 18:09:33 -0400", "message": "Missed two cases"}, {"oid": "7acc107b13f019250d4c17ee0b034a3aa263f56b", "committedDate": "2021-09-22 13:23:13 -0400", "message": "Removing MekHQ's version by swapping to a standardized suite version"}, {"oid": "f0a07bfbd15d93ff86dda49a32e0c489ca590a8c", "committedDate": "2021-09-22 17:45:34 -0400", "message": "Fixing merge conflicts"}, {"oid": "673baa71af916391d268ede436174881a85b7340", "committedDate": "2021-09-23 20:01:05 -0400", "message": "Adding the ability to automatically have the Operational Status indicator be determined on a new day"}, {"oid": "18f49cd8c6ba3721e84dce0b606a346b242cb49c", "committedDate": "2021-09-25 10:56:33 -0400", "message": "Moving training XP assignment to AtB new day processing"}, {"oid": "932423c6da7f04b29d61df88c014f5e432356eae", "committedDate": "2021-09-25 17:10:11 -0400", "message": "Standardizing and simplifying Campaign::getTargetForAcquisitioncalls"}, {"oid": "29c1cae15f03b025f7c6f4a4acdee0a86082eae8", "committedDate": "2021-09-25 17:12:00 -0400", "message": "2567: AtB Part Procurement uses proper campaign option"}, {"oid": "e1c6be34a128676429850de67af7a3c3e1d31c48", "committedDate": "2021-09-25 17:47:32 -0400", "message": "Fixing the active checks and removing the AtB casts"}, {"oid": "0527903721699cf7e73e7000ebc0db049c96529d", "committedDate": "2021-09-25 17:48:18 -0400", "message": "Removing testing logging"}, {"oid": "6dc414e21f3f3a8bf95c7059b83c0c34ced93e61", "committedDate": "2021-09-28 22:10:41 -0400", "message": "Merge pull request #2888 from Windchild292/dev_Windchild_2567"}, {"oid": "1065b3bc8de9084f48208d2ca865ce58ac8b3c41", "committedDate": "2021-09-28 22:29:59 -0400", "message": "Fixing merge conflicts"}, {"oid": "e55c3ca107c0d4a68d05b67ffa95825ee33af974", "committedDate": "2021-09-28 22:33:50 -0400", "message": "Fixing merge conflicts"}, {"oid": "6e5bfd3fe778c2db9847358b2bde358a61106707", "committedDate": "2021-09-28 22:38:51 -0400", "message": "Fixing merge conflicts"}, {"oid": "4fdc8e401f17fac7995037b1852f1ce2353c8e3f", "committedDate": "2021-09-28 22:48:35 -0400", "message": "Fixing merge conflicts"}, {"oid": "6f6fbddc710af1a588c433c779edd75f638a3c9d", "committedDate": "2021-10-01 10:01:00 -0400", "message": "Merge pull request #2880 from Windchild292/dev_Windchild_Version"}, {"oid": "901e499a75807e3ed64c36d0fcb8e1b024787c95", "committedDate": "2021-10-01 22:06:56 -0400", "message": "Fixing merge conflicts"}, {"oid": "b69522079e9a04b394864bbc4e43ff4c4e125cca", "committedDate": "2021-10-01 22:17:46 -0400", "message": "Fixing merge conflicts"}, {"oid": "84837c3610f8109aeb1985357178de229560de80", "committedDate": "2021-10-01 22:50:02 -0400", "message": "Fixing merge conflicts"}, {"oid": "4971437339838aa89b83785c6e9572074c95d245", "committedDate": "2021-10-02 23:21:37 -0400", "message": "Fixing merge conflicts"}, {"oid": "ed006b48eaf1c0580c2480f4f0000a3c1aed8361", "committedDate": "2021-10-10 00:10:05 -0400", "message": "Adding prisoner and clanner options for procreation"}, {"oid": "54e588d2cafddcab2f585c8ed5d6ee3c829d155f", "committedDate": "2021-10-10 01:00:00 -0400", "message": "Fixing merge conflicts"}, {"oid": "f211d8a677daa66c3a88f444de02a072ea5ab8a0", "committedDate": "2021-10-11 09:36:37 -0400", "message": "Fixing merge conflicts"}, {"oid": "3ee602c2e85defa1c3b05d08d609340d4b194883", "committedDate": "2021-10-11 09:37:52 -0400", "message": "Merge branch 'master' into dev_Windchild_2654"}, {"oid": "a30ac65fc45c76f1c1f6df0d70fa356aa41ef438", "committedDate": "2021-10-11 09:38:33 -0400", "message": "Merge branch 'master' into dev_Windchild_PersonnelRandomization"}, {"oid": "6f2f688a386d187426b7c92d4dd391c239d1ad70", "committedDate": "2021-10-11 09:43:54 -0400", "message": "Fixing merge conflicts"}, {"oid": "125e3093d92e248b4e50bc9131ff8fdeb35c6787", "committedDate": "2021-10-11 10:22:27 -0400", "message": "Fixing merge conflicts"}, {"oid": "f8e040a424e1e8d8f886b334ce6fe78c1c697e21", "committedDate": "2021-10-11 12:17:56 -0400", "message": "Standardizing canMarry and adding clanner/prisoner options"}, {"oid": "358b2e9bb76ee69f0aef232dc656af54a6b78e75", "committedDate": "2021-10-11 16:26:24 -0400", "message": "Creating a divorce module, with a daily percentage-based random divorce setup"}, {"oid": "8ecba07dd7693346338cbae98b207e87e1cfb844", "committedDate": "2021-10-14 20:08:46 -0400", "message": "Fixing merge conflicts"}, {"oid": "accf7255b1c83499aa1f79f5074b2bc44e3619f8", "committedDate": "2021-10-17 18:16:46 -0400", "message": "Fixing merge conflicts"}, {"oid": "4e4ae81eb8a7a923cdf8688c645023ce047c7d99", "committedDate": "2021-10-17 18:53:40 -0400", "message": "Fixing merge conflicts"}, {"oid": "08ec6ef40e59afa4cba88228bc29dba9745de098", "committedDate": "2021-10-18 15:52:01 -0400", "message": "Fixing merge conflicts"}, {"oid": "c67d7074f17378d88774a553e3fca273bc047705", "committedDate": "2021-10-18 15:52:40 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_PersonCampaign"}, {"oid": "1a7109d4439d3900ff897d0c9ba7091e88960ead", "committedDate": "2021-10-18 16:06:05 -0400", "message": "Fixing merge conflicts"}, {"oid": "2d589706bc9112203a6043adf8d7aed7d0f22301", "committedDate": "2021-10-18 16:07:21 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_ExpandedDeathStatus"}, {"oid": "84e2f57820e6fac4c9604e8fdf4c370849b21914", "committedDate": "2021-10-18 17:26:22 -0400", "message": "Fixing merge conflicts"}, {"oid": "033d776c732e66ad776357bee1afe597f5e77b20", "committedDate": "2021-10-30 15:59:59 -0400", "message": "Fixing merge conflicts"}, {"oid": "4e45f1a0a0bb1a3a900ecde01c8feab5a6e48329", "committedDate": "2021-11-01 17:31:14 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_AtBCompanyGeneration"}, {"oid": "258f3a3b0b352aa70b42b8c2034ebd6ab90d96ca", "committedDate": "2021-11-01 18:20:49 -0400", "message": "Fixing merge conflicts"}, {"oid": "7eea9a399d3d7400b1f2b94f6d772ad5416a0645", "committedDate": "2021-11-01 21:48:44 -0400", "message": "Fixing merge conflicts"}, {"oid": "3e4bca7cdb006005bd034f9621872250d0e96dbb", "committedDate": "2021-11-01 21:52:24 -0400", "message": "fixing merge conflicts"}, {"oid": "ab6c1c01bfb4498a16c3b9f69c18c4903900de83", "committedDate": "2021-11-01 22:00:44 -0400", "message": "Fixing merge conflicts"}, {"oid": "1b1b0f68f52f9d821ddc10f663a44fe6d72462cd", "committedDate": "2021-11-01 22:03:27 -0400", "message": "Fixing merge conflicts"}, {"oid": "f1ce41fa694124c762338f78fb45a139926db77c", "committedDate": "2021-11-01 22:20:22 -0400", "message": "Fixing merge conflicts"}, {"oid": "01163b1f4fae088ba39a2f1c1145d5653f71b9e8", "committedDate": "2021-11-01 22:22:46 -0400", "message": "Fixing merge conflicts"}, {"oid": "21600c478569436ab215402bbca4bbbeced841a8", "committedDate": "2021-11-03 20:59:54 -0400", "message": "Adding localization to all MekHQ resource maps"}, {"oid": "1a5ba2fa871c8629e951d371c2ee96cc29fa8f93", "committedDate": "2021-11-07 13:49:58 -0500", "message": "Fixing merge conflicts"}, {"oid": "a851f6c71e5a1f825a840c64be2bae6da2a77eaf", "committedDate": "2021-11-07 14:05:08 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_PersonnelRandomization"}, {"oid": "65eb27ddf74244265359db14e66c097eb2299df0", "committedDate": "2021-11-07 14:50:33 -0500", "message": "Fixing merge conflicts"}, {"oid": "1b57359b3037938ef8291d96de3449013c82b9a4", "committedDate": "2021-11-09 09:23:24 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_ForceIconRework"}, {"oid": "7e997be9838621bdc8bbecbcdbc908a7580060ed", "committedDate": "2021-11-12 21:17:13 -0500", "message": "Removing unused tech functionality"}, {"oid": "dbfb302ab8e895c2e37a41f10415f634d1039c4c", "committedDate": "2021-11-21 18:45:43 -0500", "message": "Expanding Finances newDay"}, {"oid": "b6ffe21c8b07b35f599a2f6bd11da05d7961af0d", "committedDate": "2021-11-23 10:10:34 -0500", "message": "Merge pull request #2028 from Windchild292/dev_Windchild_476"}, {"oid": "e51f331c5e7b430e3f560fee9ad58995fb944704", "committedDate": "2021-11-23 17:35:05 -0500", "message": "2962: AtB Campaigns Now Properly Load with Automatic or Tech Acquisition Skills"}, {"oid": "2f445541d15fd465279057131bf48ef28d9bd162", "committedDate": "2021-11-23 18:55:05 -0500", "message": "Fixing merge conflicts"}, {"oid": "c06560e49182859791bab98148ba76507f26612b", "committedDate": "2021-11-27 14:04:02 -0500", "message": "Merge pull request #2966 from Windchild292/dev_Windchild_2962"}, {"oid": "69f79e10f44976d90e36ca3acb5256b6dfc91548", "committedDate": "2021-11-27 18:49:28 -0500", "message": "Implementing the retirement and dependent stopgap options and option updates"}, {"oid": "135cb6d188296ed5db33602f9d65eacbedfb2fa3", "committedDate": "2021-11-27 22:07:45 -0500", "message": "Finishing dependent options and starting on retirement setup"}, {"oid": "a831b4695fd5ea8b1679db9068c85d9ac235f5e0", "committedDate": "2021-11-27 22:57:22 -0500", "message": "Starting to implement the new options"}, {"oid": "bfaed6eccd3257e67b05ad33dadd14cfd98ce560", "committedDate": "2021-12-02 18:05:59 -0500", "message": "Fixing merge conflicts"}, {"oid": "a31998dda25a2856241c10aba4f25a3e8975fc28", "committedDate": "2021-12-02 19:47:30 -0500", "message": "Fixing merge conflicts"}, {"oid": "8ae7fffc1b4afde219beaf122edf562b69a810d4", "committedDate": "2021-12-02 19:49:14 -0500", "message": "Fixing merge conflicts"}, {"oid": "c76c94e6cd4abe6e9f39bb57f5376dcfcf8c29ca", "committedDate": "2021-12-02 19:59:15 -0500", "message": "Fixing merge conflicts"}, {"oid": "8ad7114a3a34794b2d77e3d201f63d2c646a9361", "committedDate": "2021-12-04 14:45:10 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_RetirementDependentStopgaps"}, {"oid": "71c75c8296ecc0c857b75d51ff1c7984efa7e9aa", "committedDate": "2021-12-04 15:03:37 -0500", "message": "Finishing the internal code for the retirement and dependent stopgaps"}, {"oid": "4fb12af6ec7c26ac06d9a498016211a5e3889240", "committedDate": "2021-12-04 15:13:25 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_AssetTerms"}, {"oid": "ea8d42d1c280d499d207c0da43feb77a06b6dcba", "committedDate": "2021-12-04 16:10:22 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_MHQLocalization"}, {"oid": "97af694c5485ad1dbf5900228d3b5e6de405cb02", "committedDate": "2021-12-11 17:07:11 -0500", "message": "MekHQ Log4j 2 Implementation"}, {"oid": "122363fd9f8d850c11781b0ed50335433bcf418b", "committedDate": "2021-12-17 20:08:30 -0500", "message": "Fixing merge conflicts"}, {"oid": "b781d1a8406d5cfec346343463484ac519d1ee9a", "committedDate": "2021-12-20 13:20:34 -0500", "message": "Fixing merge conflicts"}, {"oid": "1bc3ac4e6576a7fa06103828a729d010f6a7b3ef", "committedDate": "2021-12-20 15:37:16 -0500", "message": "Actually print the stacktrace for individual exceptions"}, {"oid": "6e868f9400798d8cc8b61055b96de07531af1f34", "committedDate": "2021-12-20 16:21:24 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_RetirementDependentStopgaps"}, {"oid": "056f0d1e618651857b043280dbe226e80eb91d7a", "committedDate": "2021-12-20 16:27:18 -0500", "message": "Fixing merge conflicts"}, {"oid": "0e5e7675cc3b0606c97f5060a8fd53a69a90641e", "committedDate": "2021-12-20 16:31:40 -0500", "message": "Fixing merge conflicts"}, {"oid": "fb5e5a836a6100119706df72ee695325d77cf5af", "committedDate": "2021-12-20 16:36:02 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_PersonnelRandomization"}, {"oid": "30d7086d1389ed93b333b5eb614a4777498bd826", "committedDate": "2021-12-20 16:41:54 -0500", "message": "Fixing merge conflicts"}, {"oid": "c28b63e7005b99a3f80a9cb73b0255b8a2402db2", "committedDate": "2021-12-20 16:45:19 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_PersonCampaign"}, {"oid": "89a7c65022eabe2af8f5efaabaf9296aa79bde74", "committedDate": "2021-12-21 15:01:54 -0500", "message": "Fixing merge conflicts"}, {"oid": "23519608cf466cb86aef259568ba2aa8ddeb098a", "committedDate": "2021-12-21 16:00:33 -0500", "message": "Fixing merge conflicts"}, {"oid": "bbbe2057261145f9f51c2ac129b4cca3bcd2ccf6", "committedDate": "2021-12-21 16:04:48 -0500", "message": "Fixing merge conflicts"}, {"oid": "b65b9f1efdb52692da51596d934b6360533b2bf7", "committedDate": "2021-12-21 16:23:03 -0500", "message": "Fixing merge conflicts"}, {"oid": "a253bfba5d4bc811ccd0c6c17e659dff178fbbb0", "committedDate": "2021-12-21 16:30:49 -0500", "message": "Fixing merge conflicts"}, {"oid": "0caff4e79e691213a2621323b94dfadfa73c9060", "committedDate": "2021-12-22 08:16:56 -0500", "message": "Fixing merge conflicts"}, {"oid": "a44cee38dbe9808a000178e575eb90d60a401175", "committedDate": "2021-12-23 12:26:57 -0500", "message": "Merge pull request #3015 from MegaMek/dev_Windchild_3326"}, {"oid": "ea6a179e03d1519afc3236abe50978edc43fc3d8", "committedDate": "2021-12-23 12:32:38 -0500", "message": "Merge pull request #2812 from Windchild292/dev_Windchild_PersonCampaign"}, {"oid": "d88588cf01f272577d96e1ff2a27c7286def7db9", "committedDate": "2021-12-23 21:04:47 -0500", "message": "Fixing merge conflicts"}, {"oid": "94ca7dff3bd09ef2fbb82e5d3ce0a5dccab335a8", "committedDate": "2021-12-28 18:08:30 -0500", "message": "Fixing merge conflicts"}, {"oid": "5089ba272b3ca25ab52ca4fcc1bef3766377f2ec", "committedDate": "2022-01-08 13:22:56 -0500", "message": "Fixing merge conflicts"}, {"oid": "375a9524c6382f5214c980bf8ad8b07a22f75120", "committedDate": "2022-01-08 13:28:11 -0500", "message": "Fixing merge conflicts"}, {"oid": "0e0aa7780df25016999f813dc36110599ee1b380", "committedDate": "2022-01-08 13:40:54 -0500", "message": "Fixing merge conflicts, round 2"}, {"oid": "5cc8ac688c67e1e1817c0cbb4a78eaf7dd0a477b", "committedDate": "2022-01-08 14:03:23 -0500", "message": "Fixing merge conflicts"}, {"oid": "eb7c6c828694fb624746168dbb4c35b1289f6e11", "committedDate": "2022-01-08 17:22:10 -0500", "message": "Fixing merge conflicts"}, {"oid": "dcb18ce61944010cc634325d3f46ccaf907758be", "committedDate": "2022-01-08 18:01:56 -0500", "message": "Cleaning up a bit of person creation"}, {"oid": "4d86865e1498a1312a21b91323c33d18f33a8dc9", "committedDate": "2022-01-09 11:12:58 -0500", "message": "Adding missing nullable tag and fixing missing null handling for faction selector"}, {"oid": "6023dd377efcb7802f6c905de61231ec50fee675", "committedDate": "2022-01-09 11:48:57 -0500", "message": "Missed that a null faction is fine for planet generation"}, {"oid": "4bddfb6f0d3906ed96120594d84d4e476e42d971", "committedDate": "2022-01-19 17:09:56 -0500", "message": "Tearing out MekHQ/src/mekhq/MekHqXmlSerializable.java"}, {"oid": "cc823a078ddc1a8924d1e2c02e93375a6b27d327", "committedDate": "2022-01-19 19:19:33 -0500", "message": "Removing all serialVersionUID uses in MekHQ"}, {"oid": "c9ac45226f5852f8bb76af479c9d962105bbbed7", "committedDate": "2022-01-19 20:02:33 -0500", "message": "Mass spacing fixes"}, {"oid": "be1cfbd484c6adc1c8f66578c5bfe94b39047b3c", "committedDate": "2022-01-20 09:59:55 -0500", "message": "Applying changes from initial personal review"}, {"oid": "2c71e119c210a9c95690eae19a0cdab5beb69bd6", "committedDate": "2022-01-20 10:30:23 -0500", "message": "Updating everything using final PrintWriter so that they're up to date, so I have a nice way to track what's updated and what is not"}, {"oid": "bc2c2966614f17d153b03c3087b46c1a4b44b969", "committedDate": "2022-01-21 19:03:24 -0500", "message": "SuiteOptions: Naming standardization and finishing initial setup"}, {"oid": "f3b9f5b924748acfd1ad404aed3ae99e4382b885", "committedDate": "2022-01-24 12:24:25 -0500", "message": "Fixing merge conflicts"}, {"oid": "e8395d1d642870050d705d4fac2a0df255cea722", "committedDate": "2022-01-24 12:28:09 -0500", "message": "Fixing merge conflicts"}, {"oid": "d91ac31cb62f0842eb972ad045bdab45c9c3f814", "committedDate": "2022-01-25 17:42:20 -0500", "message": "PIND Migration"}, {"oid": "9fac7b8c6dfc3095299a8f2b2698099818ff5f0a", "committedDate": "2022-01-26 20:37:16 -0500", "message": "Fixing merge conflicts"}, {"oid": "68ef07dd4c65a1c3d546c2da6f01575f3f3c3ad6", "committedDate": "2022-01-26 20:47:30 -0500", "message": "Fixing merge conflicts"}, {"oid": "4d88d0c53f0069b883caece02ec49678aeeeef7e", "committedDate": "2022-02-01 14:20:52 -0500", "message": "Fixing merge conflicts"}, {"oid": "add1e0e345d4bfcfbff554d48b42166703dc9742", "committedDate": "2022-02-03 13:52:45 -0500", "message": "Fixing merge conflicts"}, {"oid": "01633b8cfb55eee9c3240bff79e0122fbc54386b", "committedDate": "2022-02-13 13:10:41 -0500", "message": "Fixing MHQ's Javadoc Build"}, {"oid": "adeb4ea20e6a8eeb365e6887e79ce6a4dd8b18dd", "committedDate": "2022-02-22 19:16:53 -0500", "message": "Initial code for creating standardized code utilities"}, {"oid": "483ec96cd157a857a1e7155be64dc5ef7c72346a", "committedDate": "2022-02-24 20:32:12 -0500", "message": "Migrating a bunch of MHQ utility code to MM"}, {"oid": "88ce57b5171b2d38c738446af4ab779e6d17ae7f", "committedDate": "2022-02-28 20:23:04 -0500", "message": "3146: Properly handling null force to null force reassignment messages"}, {"oid": "c94fc298803b71e6ac75eb935cabba921a8a6571", "committedDate": "2022-03-06 11:49:08 -0500", "message": "Fixing merge conflicts"}, {"oid": "d4b96fd69deddff97744565c43e2d56b8e31c53f", "committedDate": "2022-03-07 17:19:54 -0500", "message": "Fixing two accidentally kept negations for Random Dependents Removal"}, {"oid": "48f8d58a75de4c6a5c2868f65554dad4d3a14fd5", "committedDate": "2022-03-09 10:01:16 -0500", "message": "Merge pull request #3148 from Windchild292/dev_Windchild_3146"}, {"oid": "1c307bc93de3a536ba17dd566a9fd49bd0046c8e", "committedDate": "2022-03-21 18:22:40 -0400", "message": "Fixing a bunch of spacing readability issues"}, {"oid": "913c01672fe040a25b473e8142805d2ff4ebfa1b", "committedDate": "2022-03-22 18:24:32 -0400", "message": "Modernizing Lambdas to Method References"}, {"oid": "cc400b9fa7512b6b91ed8a8f434f365b442306a8", "committedDate": "2022-03-22 23:54:28 -0400", "message": "Modernize List::size to List::isEmpty and String::isEmpty to String::isBlank"}, {"oid": "4699f3e482938fb8c322f1daf1bc3b42d78c2a64", "committedDate": "2022-03-28 22:35:03 -0400", "message": "Fixing unused imports"}, {"oid": "494b38fcedcda31bef2e6f701152a47ce1b0e397", "committedDate": "2022-04-11 00:16:20 -0400", "message": "Issue #3196: Fixing Remove Unit NPE"}, {"oid": "4e863ffcf0393e88ebb25b76dd314d994b2cfad5", "committedDate": "2022-04-12 17:18:21 -0400", "message": "Death Module: Initial Commit For the New Setup"}, {"oid": "2e8d0c32fa5c09c862fb6c5625a58d206b70ba34", "committedDate": "2022-04-12 18:20:50 -0400", "message": "Cleaning up and modernizing the death code"}, {"oid": "be00026349d450b7f2fb262f11d161ca249c5ab5", "committedDate": "2022-04-17 21:14:46 -0400", "message": "Standardizing Personnel Flags into their own setup instead of multiple previous setups"}, {"oid": "114c9ef6cbeb045e3cc88716964526ee70372408", "committedDate": "2022-05-04 10:10:43 -0400", "message": "3260: Clear Makeshift Clubs Upon Return To MekHQ"}, {"oid": "e0f4dd9d34946716a517c0b42401b33740c51f30", "committedDate": "2022-05-06 19:58:04 -0400", "message": "Renaming the civilian role check to isCivilian, and adding missing logging for a civilian error"}, {"oid": "5b35da02f167e0d577e779b21dfd3cbd2110f92b", "committedDate": "2022-05-06 22:48:48 -0400", "message": "Merge pull request #3266 from Windchild292/dev_Windchild_RetirementDependentOrNoneLogging"}, {"oid": "c6db6046da0de4e7d40d7ac930a453d2805f6a92", "committedDate": "2022-05-10 18:34:57 -0400", "message": "Merge branch 'MegaMek:master' into dev_Windchild_AssetTerms"}, {"oid": "6b720cfa833458c385546a054b762d2745c37ce1", "committedDate": "2022-05-14 10:11:35 -0400", "message": "Fixing method name"}, {"oid": "72a352ee60bdec3467fa07665ed9753cc399b6f9", "committedDate": "2022-05-15 12:41:06 -0400", "message": "Swapping MekHQ to JUnit 5"}, {"oid": "0a2050177f55c5540d898835cfd48e4f976bb4cb", "committedDate": "2022-05-25 16:54:44 -0400", "message": "Modernizing finances XML read and write"}, {"oid": "8b34d18aa825a1416df7b1a8ecb2bb898cea1026", "committedDate": "2022-05-25 18:27:34 -0400", "message": "Renaming MekHqXmlXmlUtil to utilities/MHQXMLUtility"}, {"oid": "3c19a5aba0df7a2035e7a81e61a8b5543cb13a9c", "committedDate": "2022-05-25 18:36:42 -0400", "message": "Fixing merge conflicts"}, {"oid": "4a84ac8700a2d5bf7624dd25d4c77cff34478500", "committedDate": "2022-05-25 23:32:29 -0400", "message": "Merge branch 'master' into dev_Windchild_CurrentLocationXML"}, {"oid": "32aaaac33b8e53a355c373879ee4de9f91747c39", "committedDate": "2022-05-26 07:16:40 -0400", "message": "Merge branch 'master' into dev_Windchild_PersonFlags"}, {"oid": "9472637ad3cb3c27cba2c318c5ccdf022ca56d86", "committedDate": "2022-05-26 08:10:57 -0400", "message": "Fixing merge conflicts"}, {"oid": "f35709d1278c76d1ea7c10485071e0097b1aebf0", "committedDate": "2022-05-26 08:39:19 -0400", "message": "Switching to a single retirement report"}, {"oid": "b40d7b0e6bd9003de8df60cc732b5e195741d8aa", "committedDate": "2022-05-30 16:37:32 -0400", "message": "Merge pull request #3234 from Windchild292/dev_Windchild_PersonFlags"}, {"oid": "f7e43611ee653404079cc2fdced92c083c35362f", "committedDate": "2022-06-01 13:26:16 -0400", "message": "More swaps to using getActualValue"}, {"oid": "76223b1f01db0e020c9069b9c361d7af9f174e6a", "committedDate": "2022-06-01 17:49:36 -0400", "message": "Merge remote-tracking branch 'origin/master' into dev_Windchild_PartPriceApplications"}, {"oid": "e7755fbeddc7d00cc126c3281f4be93685eb83fa", "committedDate": "2022-06-08 20:05:45 -0400", "message": "Ignore End Date for Scenario Assignment to Active Contracts"}, {"oid": "c17408bc1409591bdb76664788c6ad4f55a5d813", "committedDate": "2022-06-18 17:51:05 -0400", "message": "Campaign::getPerson : Adding Nullable Annotation"}, {"oid": "f2abd2addef945880eefcf2a11ccfb5eec610ea3", "committedDate": "2022-06-18 17:59:08 -0400", "message": "Renaming clearGenealogy to clearGenealogyLinks (as that's what it does), and more test progress"}, {"oid": "39ac9b544233876ab9e4a6f914abaf549c76aded", "committedDate": "2022-06-20 22:59:32 -0400", "message": "Bunch of enum cleanups"}, {"oid": "a576a51fb82bbc625198e50a04894cd7749bed1c", "committedDate": "2022-06-21 16:25:02 -0400", "message": "Lots more tests, largely simple ones"}, {"oid": "0f60e6bba5ebdf538b335609e5bfd7817f614393", "committedDate": "2022-06-23 16:17:56 -0400", "message": "3372: Fixing Campaign Loan Report Issues"}, {"oid": "7441a156d93c5a7fb5dab7f9a38a5f87f6321f14", "committedDate": "2022-06-24 22:32:50 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_GenealogyTest"}, {"oid": "f5bb76bdee8f7d7aba18dd83f2d903036ea1f68b", "committedDate": "2022-06-27 13:25:57 -0400", "message": "Merge pull request #3378 from Windchild292/dev_Windchild_3372"}, {"oid": "0948c47088632642d946b7a5eec4eb595a21ac76", "committedDate": "2022-06-29 20:04:53 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_GenealogyTest"}, {"oid": "505318be000041c18ae226d4e1521dc527fc7133", "committedDate": "2022-07-14 17:41:42 -0400", "message": "Adding market enum testing"}, {"oid": "8d3060de0fe1375a8186d41be98a059652a81bed", "committedDate": "2022-07-31 00:15:10 -0400", "message": "add remove stratcon scenario option"}, {"oid": "9d2ebd8a76bc41afdf298da710ad80e1e4b80c0a", "committedDate": "2022-08-02 19:49:23 -0400", "message": "Checking this"}, {"oid": "803755f3d14a7ba3e66bb1e6364d6c4220bac841", "committedDate": "2022-08-03 20:51:52 -0400", "message": "Properly disabling the random tests"}, {"oid": "f79a61c91b06b467d1bbed4dfeaa36f97fd755e3", "committedDate": "2022-08-04 11:12:44 -0400", "message": "Using correct collector"}, {"oid": "4b3952367635a7620bddb96a9e81a7f1a97a2219", "committedDate": "2022-11-15 14:07:43 -0500", "message": "Removing duplicated name generation info from the campaign file"}, {"oid": "5213209bddb612458226cdfa7561a7220f8b3b67", "committedDate": "2022-11-15 15:54:47 -0500", "message": "Fixing deprecated XML utility uses and fixing indentation issues for parts"}, {"oid": "53e7b27c2173373019055e800950173ed7eb20df", "committedDate": "2022-11-15 19:05:53 -0500", "message": "Company Generator: Faction Options"}, {"oid": "230c025b083606834270681ce668a836c76dfc1b", "committedDate": "2022-11-22 16:25:51 -0500", "message": "3489: Adding Small Craft and DropShip Transport Support"}, {"oid": "b5349ccb7e3e9c0345d6685bb9a76a53afed8bdc", "committedDate": "2022-11-26 08:40:31 -0500", "message": "Merge pull request #3510 from MegaMek/dev_Windchild_3489"}, {"oid": "b3f06f70d94e83ed6fad6368cbe5df5d35c20296", "committedDate": "2022-11-26 11:38:42 -0500", "message": "Finishing adding the new option as a selection"}, {"oid": "1cb49fa503593c75f3bee4ebc6cf2574faec13de", "committedDate": "2022-11-26 11:49:33 -0500", "message": "Merge branch 'MegaMek:master' into dev_Windchild_CompanyGeneratorFactionGeneration"}, {"oid": "b47a12937f6b979925f82cb31bb6f2f33cf789e5", "committedDate": "2022-12-05 15:34:26 -0500", "message": "Scenarios are now Scenarios, not Missions"}, {"oid": "b57de2f09b47ffa8da9ab0bd7bba356d1e2e235c", "committedDate": "2022-12-08 23:00:17 -0500", "message": "Merge pull request #3501 from Windchild292/dev_Windchild_DeprecatedXML"}, {"oid": "ade20da3d68431198324cbad4bd7cfcc2fd1ef66", "committedDate": "2022-12-11 23:37:05 -0500", "message": "Merge pull request #3520 from Windchild292/dev_Windchild_ScenariosAreScenarios"}, {"oid": "a6d88033b71b9291e4774a5cbc3e8f577287a523", "committedDate": "2022-12-16 22:33:19 -0500", "message": "Tearing out EncodeControl"}, {"oid": "cec1df762e06d6e3e6c4c437c0d0a25892f44a7d", "committedDate": "2022-12-29 13:15:59 -0500", "message": "Fixing Option Naming Typos"}, {"oid": "e3e1ce62490858d93d695b7e7f8bf17dca068936", "committedDate": "2022-12-29 14:30:54 -0500", "message": "Standardize option naming"}, {"oid": "d385d0bc8fd91a75c631f546272abbff8e07311a", "committedDate": "2022-12-30 13:05:34 -0500", "message": "SkillLevel: Reducing SkillType::getExperienceLevelName calls"}, {"oid": "332b06c4b29e7f809e9cf0cab16a062f65544391", "committedDate": "2023-01-08 20:33:20 -0500", "message": "Yearly Retirement Nag Now Follows Campaign Options"}, {"oid": "62afc895d75aece8a3079267b20eb9e8c3de5cfc", "committedDate": "2023-01-14 16:34:36 -0500", "message": "3558: RATs are Used Outside of AtB"}, {"oid": "0e39c3c4517d5cd46e99546d8e3b3a1cea7cb30b", "committedDate": "2023-01-17 20:12:29 -0500", "message": "Merge branch 'master' into dev_Windchild_CampaignOptionsCleanup"}, {"oid": "da71474de7674e9b213472ce61b254a744c6ae5a", "committedDate": "2023-01-17 20:12:53 -0500", "message": "Merge branch 'MegaMek:master' into dev_Windchild_IsolatedSkillLevelEnumSwapovers"}, {"oid": "a328a1e42771f0c7052a7c9c1b2583134a8534f4", "committedDate": "2023-01-25 22:45:44 -0500", "message": "Campaign Ops Unit Rating: Properly Calculate Personnel Numbers"}, {"oid": "5ad55c0aa2dd0422f1e05d2704860f7674936984", "committedDate": "2023-01-25 23:11:45 -0500", "message": "Applying changes from testing and further rule reading"}, {"oid": "8fc36fbd275ffccf0ed91df60b637a5cc3135a86", "committedDate": "2023-01-29 18:24:48 -0500", "message": "Phenotype Enum: Migrating Uses to Simplification Methods"}, {"oid": "a462c5436ab5bec1a54c2f652f232fdff88f7a42", "committedDate": "2023-01-29 19:28:49 -0500", "message": "Tearing out unused code and swapping to using a map"}, {"oid": "542356e26d4b14d760fa69f33f627ed2b692908b", "committedDate": "2023-02-06 21:17:17 -0500", "message": "Merge pull request #3589 from Windchild292/dev_Windchild_PhenotypeSimplificationMethods"}, {"oid": "2757b555a5a0aa6fdf73322d58173bbee7d22ba5", "committedDate": "2023-02-06 21:25:38 -0500", "message": "Merge pull request #3590 from Windchild292/dev_Windchild_UnusedSPACleanup"}, {"oid": "6784f22a192b7c650bd5be0354bc6946bfec896f", "committedDate": "2023-02-06 21:41:30 -0500", "message": "Merge pull request #3557 from Windchild292/dev_Windchild_YearlyRetirementNag"}, {"oid": "724a8333d072d631c1072fd7ccf2707efe6e2b40", "committedDate": "2023-02-07 20:56:16 -0500", "message": "Fixing merge conflicts"}, {"oid": "e0f16b480db19ce9d36290caa03be8f6be77cace", "committedDate": "2023-02-07 21:43:07 -0500", "message": "Fixing merge conflicts"}, {"oid": "8996781abfef1f08293a06ef53e3af92812a9b5d", "committedDate": "2023-02-07 22:53:45 -0500", "message": "Standardize Mass Repair Mass Salvage naming to MRMS"}, {"oid": "1ccab8e5b040389be54c4730103354fbc0f06406", "committedDate": "2023-02-18 19:25:18 +0000", "message": "3318: Add manual personnel payments that generate Finance debit"}, {"oid": "86649c7c93250458658d765a7e2007134c385c74", "committedDate": "2023-02-25 20:07:13 -0500", "message": "Some related code cleanup"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU2NDA4NA==", "url": "https://github.com/MegaMek/mekhq/pull/2123#discussion_r500564084", "body": "```suggestion\r\n        return (int) Math.round(getHangar().getUnitsStream()\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return (int)Math.round(getHangar().getUnitsStream()\n          \n          \n            \n                    return (int) Math.round(getHangar().getUnitsStream()", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">return</span> (<span class=\"pl-k\">int</span>)<span class=\"pl-smi\">Math</span><span class=\"pl-k\">.</span>round(getHangar()<span class=\"pl-k\">.</span>getUnitsStream()</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">return</span> (<span class=\"pl-k\">int</span>)<span class=\"x x-first x-last\"> </span><span class=\"pl-smi\">Math</span><span class=\"pl-k\">.</span>round(getHangar()<span class=\"pl-k\">.</span>getUnitsStream()</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "Windchild292", "createdAt": "2020-10-06T20:05:54Z", "path": "MekHQ/src/mekhq/campaign/Campaign.java", "diffHunk": "@@ -7236,117 +7172,88 @@ public void setHealingTimeOptions(int newHeal, int newNaturalHeal) {\n     }\n \n     public int getTotalMechBays() {\n-        double bays = 0;\n-        for (Unit u : getUnits()) {\n-            bays += u.getMechCapacity();\n-        }\n-        return (int)Math.round(bays);\n+        return (int)Math.round(getHangar().getUnitsStream()\n+            .mapToDouble(Unit::getMechCapacity)\n+            .sum());\n     }\n \n     public int getTotalASFBays() {\n-        double bays = 0;\n-        for (Unit u : getUnits()) {\n-            bays += u.getASFCapacity();\n-        }\n-        return (int)Math.round(bays);\n+        return (int)Math.round(getHangar().getUnitsStream()\n+            .mapToDouble(Unit::getASFCapacity)\n+            .sum());\n     }\n \n     public int getTotalSmallCraftBays() {\n-        double bays = 0;\n-        for (Unit u : getUnits()) {\n-            bays += u.getSmallCraftCapacity();\n-        }\n-        return (int)Math.round(bays);\n+        return (int)Math.round(getHangar().getUnitsStream()\n+            .mapToDouble(Unit::getSmallCraftCapacity)\n+            .sum());\n     }\n \n     public int getTotalBattleArmorBays() {\n-        double bays = 0;\n-        for (Unit u : getUnits()) {\n-            bays += u.getBattleArmorCapacity();\n-        }\n-        return (int)Math.round(bays);\n+        return (int)Math.round(getHangar().getUnitsStream()\n+            .mapToDouble(Unit::getBattleArmorCapacity)\n+            .sum());\n     }\n \n     public int getTotalInfantryBays() {\n-        double bays = 0;\n-        for (Unit u : getUnits()) {\n-            bays += u.getInfantryCapacity();\n-        }\n-        return (int)Math.round(bays);\n+        return (int)Math.round(getHangar().getUnitsStream()\n+            .mapToDouble(Unit::getInfantryCapacity)\n+            .sum());\n     }\n \n     public int getTotalHeavyVehicleBays() {\n-        double bays = 0;\n-        for (Unit u : getUnits()) {\n-            bays += u.getHeavyVehicleCapacity();\n-        }\n-        return (int)Math.round(bays);\n+        return (int)Math.round(getHangar().getUnitsStream()", "originalCommit": "02cf732d561f245a8a8d39a2b8a819cb45ac94ca", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cb64714e6e2b7d03de487c72eb18c3c09948b6c6", "changed_code": [{"header": "diff --git a/MekHQ/src/mekhq/campaign/Campaign.java b/MekHQ/src/mekhq/campaign/Campaign.java\nindex c9db948ab..4dff77b1d 100644\n--- a/MekHQ/src/mekhq/campaign/Campaign.java\n+++ b/MekHQ/src/mekhq/campaign/Campaign.java\n", "chunk": "@@ -7172,49 +7172,49 @@ public class Campaign implements Serializable, ITechManager {\n     }\n \n     public int getTotalMechBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getMechCapacity)\n             .sum());\n     }\n \n     public int getTotalASFBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getASFCapacity)\n             .sum());\n     }\n \n     public int getTotalSmallCraftBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getSmallCraftCapacity)\n             .sum());\n     }\n \n     public int getTotalBattleArmorBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getBattleArmorCapacity)\n             .sum());\n     }\n \n     public int getTotalInfantryBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getInfantryCapacity)\n             .sum());\n     }\n \n     public int getTotalHeavyVehicleBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getHeavyVehicleCapacity)\n             .sum());\n     }\n \n     public int getTotalLightVehicleBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getLightVehicleCapacity)\n             .sum());\n     }\n \n     public int getTotalProtomechBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getProtomechCapacity)\n             .sum());\n     }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "3f55aabad31fb84ff1e5af9c8caac7bd8c8999a0", "changed_code": [{"header": "diff --git a/MekHQ/src/mekhq/campaign/Campaign.java b/MekHQ/src/mekhq/campaign/Campaign.java\nindex c9db948ab..0f69d5116 100644\n--- a/MekHQ/src/mekhq/campaign/Campaign.java\n+++ b/MekHQ/src/mekhq/campaign/Campaign.java\n", "chunk": "@@ -7172,49 +7161,49 @@ public class Campaign implements Serializable, ITechManager {\n     }\n \n     public int getTotalMechBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getMechCapacity)\n             .sum());\n     }\n \n     public int getTotalASFBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getASFCapacity)\n             .sum());\n     }\n \n     public int getTotalSmallCraftBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getSmallCraftCapacity)\n             .sum());\n     }\n \n     public int getTotalBattleArmorBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getBattleArmorCapacity)\n             .sum());\n     }\n \n     public int getTotalInfantryBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getInfantryCapacity)\n             .sum());\n     }\n \n     public int getTotalHeavyVehicleBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getHeavyVehicleCapacity)\n             .sum());\n     }\n \n     public int getTotalLightVehicleBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getLightVehicleCapacity)\n             .sum());\n     }\n \n     public int getTotalProtomechBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getProtomechCapacity)\n             .sum());\n     }\n", "next_change": {"commit": "a0c1cbf9746ed9486f08ce4aa2376828e846c786", "changed_code": [{"header": "diff --git a/MekHQ/src/mekhq/campaign/Campaign.java b/MekHQ/src/mekhq/campaign/Campaign.java\nindex 0f69d5116..e49c8ce15 100644\n--- a/MekHQ/src/mekhq/campaign/Campaign.java\n+++ b/MekHQ/src/mekhq/campaign/Campaign.java\n", "chunk": "@@ -7152,97 +7101,119 @@ public class Campaign implements Serializable, ITechManager {\n             }\n         }\n     }\n-    /**\n-     * Returns our list of potential transport ships\n-     * @return\n-     */\n-    public Set<UUID> getTransportShips() {\n-        return transportShips;\n-    }\n \n     public int getTotalMechBays() {\n-        return (int) Math.round(getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getMechCapacity)\n-            .sum());\n+        double bays = 0;\n+        for (Unit u : getUnits()) {\n+            bays += u.getMechCapacity();\n+        }\n+        return (int)Math.round(bays);\n     }\n \n     public int getTotalASFBays() {\n-        return (int) Math.round(getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getASFCapacity)\n-            .sum());\n+        double bays = 0;\n+        for (Unit u : getUnits()) {\n+            bays += u.getASFCapacity();\n+        }\n+        return (int)Math.round(bays);\n     }\n \n     public int getTotalSmallCraftBays() {\n-        return (int) Math.round(getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getSmallCraftCapacity)\n-            .sum());\n+        double bays = 0;\n+        for (Unit u : getUnits()) {\n+            bays += u.getSmallCraftCapacity();\n+        }\n+        return (int)Math.round(bays);\n     }\n \n     public int getTotalBattleArmorBays() {\n-        return (int) Math.round(getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getBattleArmorCapacity)\n-            .sum());\n+        double bays = 0;\n+        for (Unit u : getUnits()) {\n+            bays += u.getBattleArmorCapacity();\n+        }\n+        return (int)Math.round(bays);\n     }\n \n     public int getTotalInfantryBays() {\n-        return (int) Math.round(getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getInfantryCapacity)\n-            .sum());\n+        double bays = 0;\n+        for (Unit u : getUnits()) {\n+            bays += u.getInfantryCapacity();\n+        }\n+        return (int)Math.round(bays);\n     }\n \n     public int getTotalHeavyVehicleBays() {\n-        return (int) Math.round(getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getHeavyVehicleCapacity)\n-            .sum());\n+        double bays = 0;\n+        for (Unit u : getUnits()) {\n+            bays += u.getHeavyVehicleCapacity();\n+        }\n+        return (int)Math.round(bays);\n     }\n \n     public int getTotalLightVehicleBays() {\n-        return (int) Math.round(getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getLightVehicleCapacity)\n-            .sum());\n+        double bays = 0;\n+        for (Unit u : getUnits()) {\n+            bays += u.getLightVehicleCapacity();\n+        }\n+        return (int)Math.round(bays);\n     }\n \n     public int getTotalProtomechBays() {\n-        return (int) Math.round(getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getProtomechCapacity)\n-            .sum());\n+        double bays = 0;\n+        for (Unit u : getUnits()) {\n+            bays += u.getProtomechCapacity();\n+        }\n+        return (int)Math.round(bays);\n     }\n \n     public int getTotalDockingCollars() {\n-        return getHangar().getUnitsStream()\n-            .filter(u -> u.getEntity() instanceof Jumpship)\n-            .mapToInt(Unit::getDocks)\n-            .sum();\n+        double collars = 0;\n+        for (Unit u : getUnits()) {\n+            if (u.getEntity() instanceof Jumpship) {\n+                collars += u.getDocks();\n+            }\n+        }\n+        return (int)Math.round(collars);\n     }\n \n     public double getTotalInsulatedCargoCapacity() {\n-        return getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getInsulatedCargoCapacity)\n-            .sum();\n+        double capacity = 0;\n+        for (Unit u : getUnits()) {\n+            capacity += u.getInsulatedCargoCapacity();\n+        }\n+        return capacity;\n     }\n \n     public double getTotalRefrigeratedCargoCapacity() {\n-        return getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getRefrigeratedCargoCapacity)\n-            .sum();\n+        double capacity = 0;\n+        for (Unit u : getUnits()) {\n+            capacity += u.getRefrigeratedCargoCapacity();\n+        }\n+        return capacity;\n     }\n \n     public double getTotalLivestockCargoCapacity() {\n-        return getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getLivestockCargoCapacity)\n-            .sum();\n+        double capacity = 0;\n+        for (Unit u : getUnits()) {\n+            capacity += u.getLivestockCargoCapacity();\n+        }\n+        return capacity;\n     }\n \n     public double getTotalLiquidCargoCapacity() {\n-        return getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getLiquidCargoCapacity)\n-            .sum();\n+        double capacity = 0;\n+        for (Unit u : getUnits()) {\n+            capacity += u.getLiquidCargoCapacity();\n+        }\n+        return capacity;\n     }\n \n     public double getTotalCargoCapacity() {\n-        return getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getCargoCapacity)\n-            .sum();\n+        double capacity = 0;\n+        for (Unit u : getUnits()) {\n+            capacity += u.getCargoCapacity();\n+        }\n+        return capacity;\n     }\n \n     // Liquid not included\n", "next_change": {"commit": "04a16de448a0c7d576a6c3c64c9d23ae08384bae", "changed_code": [{"header": "diff --git a/MekHQ/src/mekhq/campaign/Campaign.java b/MekHQ/src/mekhq/campaign/Campaign.java\nindex e49c8ce15..993f59cfe 100644\n--- a/MekHQ/src/mekhq/campaign/Campaign.java\n+++ b/MekHQ/src/mekhq/campaign/Campaign.java\n", "chunk": "@@ -7101,900 +7157,440 @@ public class Campaign implements Serializable, ITechManager {\n             }\n         }\n     }\n-\n-    public int getTotalMechBays() {\n-        double bays = 0;\n-        for (Unit u : getUnits()) {\n-            bays += u.getMechCapacity();\n-        }\n-        return (int)Math.round(bays);\n+    /**\n+     * Returns our list of potential transport ships\n+     * @return\n+     */\n+    public Set<UUID> getTransportShips() {\n+        return transportShips;\n     }\n \n-    public int getTotalASFBays() {\n-        double bays = 0;\n-        for (Unit u : getUnits()) {\n-            bays += u.getASFCapacity();\n-        }\n-        return (int)Math.round(bays);\n-    }\n+    public String getCombatPersonnelDetails() {\n+        int[] countPersonByType = new int[Person.T_NUM];\n+        int countTotal = 0;\n+        int countInjured = 0;\n+        int countMIA = 0;\n+        int countKIA = 0;\n+        int countDead = 0;\n+        int countRetired = 0;\n+        Money salary = Money.zero();\n \n-    public int getTotalSmallCraftBays() {\n-        double bays = 0;\n-        for (Unit u : getUnits()) {\n-            bays += u.getSmallCraftCapacity();\n-        }\n-        return (int)Math.round(bays);\n-    }\n+        for (Person p : getPersonnel()) {\n+            if (!p.hasPrimaryCombatRole() || !p.getPrisonerStatus().isFree()) {\n+                continue;\n+            }\n \n-    public int getTotalBattleArmorBays() {\n-        double bays = 0;\n-        for (Unit u : getUnits()) {\n-            bays += u.getBattleArmorCapacity();\n+            // Add them to the total count\n+            if (p.getStatus().isActive()) {\n+                countPersonByType[p.getPrimaryRole()]++;\n+                countTotal++;\n+                if (getCampaignOptions().useAdvancedMedical() && p.getInjuries().size() > 0) {\n+                    countInjured++;\n+                } else if (p.getHits() > 0) {\n+                    countInjured++;\n+                }\n+                salary = salary.plus(p.getSalary());\n+            } else if (p.getStatus().isRetired()) {\n+                countRetired++;\n+            } else if (p.getStatus().isMIA()) {\n+                countMIA++;\n+            } else if (p.getStatus().isKIA()) {\n+                countKIA++;\n+                countDead++;\n+            } else if (p.getStatus().isDead()) {\n+                countDead++;\n+            }\n         }\n-        return (int)Math.round(bays);\n-    }\n \n-    public int getTotalInfantryBays() {\n-        double bays = 0;\n-        for (Unit u : getUnits()) {\n-            bays += u.getInfantryCapacity();\n-        }\n-        return (int)Math.round(bays);\n-    }\n+        StringBuilder sb = new StringBuilder(\"Combat Personnel\\n\\n\");\n \n-    public int getTotalHeavyVehicleBays() {\n-        double bays = 0;\n-        for (Unit u : getUnits()) {\n-            bays += u.getHeavyVehicleCapacity();\n-        }\n-        return (int)Math.round(bays);\n-    }\n+        sb.append(String.format(\"%-30s        %4s\\n\", \"Total Combat Personnel\", countTotal));\n \n-    public int getTotalLightVehicleBays() {\n-        double bays = 0;\n-        for (Unit u : getUnits()) {\n-            bays += u.getLightVehicleCapacity();\n+        for (int i = 0; i < Person.T_NUM; i++) {\n+            if (Person.isCombatRole(i)) {\n+                sb.append(String.format(\"    %-30s    %4s\\n\",\n+                        Person.getRoleDesc(i, getFaction().isClan()), countPersonByType[i]));\n+            }\n         }\n-        return (int)Math.round(bays);\n-    }\n \n-    public int getTotalProtomechBays() {\n-        double bays = 0;\n-        for (Unit u : getUnits()) {\n-            bays += u.getProtomechCapacity();\n-        }\n-        return (int)Math.round(bays);\n+        sb.append(\"\\n\")\n+                .append(String.format(\"%-30s        %4s\\n\", \"Injured Combat Personnel\", countInjured))\n+                .append(String.format(\"%-30s        %4s\\n\", \"MIA Combat Personnel\", countMIA))\n+                .append(String.format(\"%-30s        %4s\\n\", \"KIA Combat Personnel\", countKIA))\n+                .append(String.format(\"%-30s        %4s\\n\", \"Retired Combat Personnel\", countRetired))\n+                .append(String.format(\"%-30s        %4s\\n\", \"Dead Combat Personnel\", countDead))\n+                .append(\"\\nMonthly Salary For Combat Personnel: \").append(salary.toAmountAndSymbolString());\n+\n+        return sb.toString();\n     }\n \n-    public int getTotalDockingCollars() {\n-        double collars = 0;\n-        for (Unit u : getUnits()) {\n-            if (u.getEntity() instanceof Jumpship) {\n-                collars += u.getDocks();\n+    public String getSupportPersonnelDetails() {\n+        int[] countPersonByType = new int[Person.T_NUM];\n+        int countTotal = 0;\n+        int countInjured = 0;\n+        int countMIA = 0;\n+        int countKIA = 0;\n+        int countDead = 0;\n+        int countRetired = 0;\n+        Money salary = Money.zero();\n+        int prisoners = 0;\n+        int bondsmen = 0;\n+        int dependents = 0;\n+\n+        for (Person p : getPersonnel()) {\n+            // Add them to the total count\n+            boolean primarySupport = p.hasPrimarySupportRole(false);\n+\n+            if (primarySupport && p.getPrisonerStatus().isFree() && p.getStatus().isActive()) {\n+                countPersonByType[p.getPrimaryRole()]++;\n+                countTotal++;\n+                if (p.getInjuries().size() > 0 || p.getHits() > 0) {\n+                    countInjured++;\n+                }\n+                salary = salary.plus(p.getSalary());\n+            } else if (p.getPrisonerStatus().isPrisoner() && p.getStatus().isActive()) {\n+                prisoners++;\n+                if (p.getInjuries().size() > 0 || p.getHits() > 0) {\n+                    countInjured++;\n+                }\n+            } else if (p.getPrisonerStatus().isBondsman() && p.getStatus().isActive()) {\n+                bondsmen++;\n+                if (p.getInjuries().size() > 0 || p.getHits() > 0) {\n+                    countInjured++;\n+                }\n+            } else if (primarySupport && p.getStatus().isRetired()) {\n+                countRetired++;\n+            } else if (primarySupport && p.getStatus().isMIA()) {\n+                countMIA++;\n+            } else if (primarySupport && p.getStatus().isKIA()) {\n+                countKIA++;\n+                countDead++;\n+            } else if (primarySupport && p.getStatus().isDead()) {\n+                countDead++;\n             }\n-        }\n-        return (int)Math.round(collars);\n-    }\n \n-    public double getTotalInsulatedCargoCapacity() {\n-        double capacity = 0;\n-        for (Unit u : getUnits()) {\n-            capacity += u.getInsulatedCargoCapacity();\n+            if (p.isDependent() && p.getStatus().isActive() && p.getPrisonerStatus().isFree()) {\n+                dependents++;\n+            }\n         }\n-        return capacity;\n-    }\n \n-    public double getTotalRefrigeratedCargoCapacity() {\n-        double capacity = 0;\n-        for (Unit u : getUnits()) {\n-            capacity += u.getRefrigeratedCargoCapacity();\n-        }\n-        return capacity;\n-    }\n+        StringBuilder sb = new StringBuilder(\"Support Personnel\\n\\n\");\n \n-    public double getTotalLivestockCargoCapacity() {\n-        double capacity = 0;\n-        for (Unit u : getUnits()) {\n-            capacity += u.getLivestockCargoCapacity();\n-        }\n-        return capacity;\n-    }\n+        sb.append(String.format(\"%-30s        %4s\\n\", \"Total Support Personnel\", countTotal));\n \n-    public double getTotalLiquidCargoCapacity() {\n-        double capacity = 0;\n-        for (Unit u : getUnits()) {\n-            capacity += u.getLiquidCargoCapacity();\n+        for (int i = 0; i < Person.T_NUM; i++) {\n+            if (Person.isSupportRole(i)) {\n+                sb.append(String.format(\"    %-30s    %4s\\n\",\n+                        Person.getRoleDesc(i, getFaction().isClan()), countPersonByType[i]));\n+            }\n         }\n-        return capacity;\n-    }\n \n-    public double getTotalCargoCapacity() {\n-        double capacity = 0;\n-        for (Unit u : getUnits()) {\n-            capacity += u.getCargoCapacity();\n-        }\n-        return capacity;\n-    }\n-\n-    // Liquid not included\n-    public double getTotalCombinedCargoCapacity() {\n-        return getTotalCargoCapacity() + getTotalLivestockCargoCapacity()\n-                + getTotalInsulatedCargoCapacity() + getTotalRefrigeratedCargoCapacity();\n-    }\n-\n-    public int getNumberOfUnitsByType(long type) {\n-        return getNumberOfUnitsByType(type, false, false);\n-    }\n+        sb.append(\"\\n\")\n+                .append(String.format(\"%-30s        %4s\\n\", \"Injured Support Personnel\", countInjured))\n+                .append(String.format(\"%-30s        %4s\\n\", \"MIA Support Personnel\", countMIA))\n+                .append(String.format(\"%-30s        %4s\\n\", \"KIA Support Personnel\", countKIA))\n+                .append(String.format(\"%-30s        %4s\\n\", \"Retired Support Personnel\", countRetired))\n+                .append(String.format(\"%-30s        %4s\\n\", \"Dead Support Personnel\", countDead))\n+                .append(\"\\nMonthly Salary For Support Personnel: \").append(salary.toAmountAndSymbolString())\n+                .append(String.format(\"\\nYou have \" + dependents + \" %s\", (dependents == 1) ? \"dependent\" : \"dependents\"))\n+                .append(String.format(\"\\nYou have \" + prisoners + \" prisoner%s\", (prisoners == 1) ? \"\" : \"s\"))\n+                .append(String.format(\"\\nYou have \" + bondsmen + \" %s\", (bondsmen == 1) ? \"bondsman\" : \"bondsmen\"));\n \n-    public int getNumberOfUnitsByType(long type, boolean inTransit) {\n-        return getNumberOfUnitsByType(type, inTransit, false);\n+        return sb.toString();\n     }\n \n-    public int getNumberOfUnitsByType(long type, boolean inTransit, boolean lv) {\n-        int num = 0;\n-        for (Unit unit : getUnits()) {\n-            if (!inTransit && !unit.isPresent()) {\n-                continue;\n-            }\n-            if (unit.isMothballed()) {\n-                if (type == Unit.ETYPE_MOTHBALLED) {\n-                    num++;\n-                }\n-                continue;\n-            }\n-            Entity en = unit.getEntity();\n-            if (en instanceof GunEmplacement || en instanceof FighterSquadron || en instanceof Jumpship) {\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_MECH && en instanceof Mech) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_DROPSHIP && en instanceof Dropship) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_SMALL_CRAFT && en instanceof SmallCraft\n-                    && !(en instanceof Dropship)) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_CONV_FIGHTER && en instanceof ConvFighter) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_AERO && en instanceof Aero\n-                    && !(en instanceof SmallCraft || en instanceof ConvFighter)) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_INFANTRY && en instanceof Infantry && !(en instanceof BattleArmor)) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_BATTLEARMOR && en instanceof BattleArmor) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_TANK && en instanceof Tank) {\n-                if ((en.getWeight() <= 50 && lv) || (en.getWeight() > 50 && !lv)) {\n-                    num++;\n-                }\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_PROTOMECH && en instanceof Protomech) {\n-                num++;\n-                continue;\n-            }\n+    public void doMaintenance(Unit u) {\n+        if (!u.requiresMaintenance() || !campaignOptions.checkMaintenance()) {\n+            return;\n         }\n-\n-        return num;\n-    }\n-\n-    public double getCargoTonnage(boolean inTransit) {\n-        return getCargoTonnage(inTransit, false);\n-    }\n-\n-    @SuppressWarnings(\"unused\") // FIXME: This whole method needs re-worked once Dropship Assignments are in\n-    public double getCargoTonnage(boolean inTransit, boolean mothballed) {\n-        double cargoTonnage = 0;\n-        double mothballedTonnage = 0;\n-        int mechs = getNumberOfUnitsByType(Entity.ETYPE_MECH);\n-        int ds = getNumberOfUnitsByType(Entity.ETYPE_DROPSHIP);\n-        int sc = getNumberOfUnitsByType(Entity.ETYPE_SMALL_CRAFT);\n-        int cf = getNumberOfUnitsByType(Entity.ETYPE_CONV_FIGHTER);\n-        int asf = getNumberOfUnitsByType(Entity.ETYPE_AERO);\n-        int inf = getNumberOfUnitsByType(Entity.ETYPE_INFANTRY);\n-        int ba = getNumberOfUnitsByType(Entity.ETYPE_BATTLEARMOR);\n-        int lv = getNumberOfUnitsByType(Entity.ETYPE_TANK, true);\n-        int hv = getNumberOfUnitsByType(Entity.ETYPE_TANK, false);\n-        int protos = getNumberOfUnitsByType(Entity.ETYPE_PROTOMECH);\n-\n-        for (Part part : getSpareParts()) {\n-            if (!inTransit && !part.isPresent()) {\n-                continue;\n-            }\n-            cargoTonnage += (part.getQuantity() * part.getTonnage());\n+        // lets start by checking times\n+        Person tech = u.getTech();\n+        int minutesUsed = u.getMaintenanceTime();\n+        int astechsUsed = getAvailableAstechs(minutesUsed, false);\n+        boolean maintained = ((tech != null) && (tech.getMinutesLeft() >= minutesUsed)\n+                && !tech.isMothballing());\n+        boolean paidMaintenance = true;\n+        if (maintained) {\n+            // use the time\n+            tech.setMinutesLeft(tech.getMinutesLeft() - minutesUsed);\n+            astechPoolMinutes -= astechsUsed * minutesUsed;\n         }\n+        u.incrementDaysSinceMaintenance(maintained, astechsUsed);\n \n-        // place units in bays\n-        // FIXME: This has been temporarily disabled. It really needs dropship assignments done to fix it correctly.\n-        // Remaining units go into cargo\n-        for (Unit unit : getUnits()) {\n-            if (!inTransit && !unit.isPresent()) {\n-                continue;\n-            }\n-            Entity en = unit.getEntity();\n-            if (unit.isMothballed()) {\n-                mothballedTonnage += en.getWeight();\n-                continue;\n-            }\n-            if (en instanceof GunEmplacement || en instanceof FighterSquadron || en instanceof Jumpship) {\n-                continue;\n-            }\n-            // cargoTonnage += en.getWeight();\n-        }\n-        if (mothballed) {\n-            return mothballedTonnage;\n+        int ruggedMultiplier = 1;\n+        if (u.getEntity().hasQuirk(OptionsConstants.QUIRK_POS_RUGGED_1)) {\n+            ruggedMultiplier = 2;\n         }\n-        return cargoTonnage;\n-    }\n \n-    public String getCargoDetails() {\n-        StringBuffer sb = new StringBuffer(\"Cargo\\n\\n\");\n-        double ccc = this.getTotalCombinedCargoCapacity();\n-        double gcc = this.getTotalCargoCapacity();\n-        double icc = this.getTotalInsulatedCargoCapacity();\n-        double lcc = this.getTotalLiquidCargoCapacity();\n-        double scc = this.getTotalLivestockCargoCapacity();\n-        double rcc = this.getTotalRefrigeratedCargoCapacity();\n-        double tonnage = this.getCargoTonnage(false);\n-        double mothballedTonnage = this.getCargoTonnage(false, true);\n-        double mothballedUnits = Math.max(getNumberOfUnitsByType(Unit.ETYPE_MOTHBALLED), 0);\n-        double combined = (tonnage + mothballedTonnage);\n-        double transported = combined > ccc ? ccc : combined;\n-        double overage = combined - transported;\n-\n-        sb.append(String.format(\"%-35s      %6.3f\\n\", \"Total Capacity:\", ccc));\n-        sb.append(String.format(\"%-35s      %6.3f\\n\", \"General Capacity:\", gcc));\n-        sb.append(String.format(\"%-35s      %6.3f\\n\", \"Insulated Capacity:\", icc));\n-        sb.append(String.format(\"%-35s      %6.3f\\n\", \"Liquid Capacity:\", lcc));\n-        sb.append(String.format(\"%-35s      %6.3f\\n\", \"Livestock Capacity:\", scc));\n-        sb.append(String.format(\"%-35s      %6.3f\\n\", \"Refrigerated Capacity:\", rcc));\n-        sb.append(String.format(\"%-35s      %6.3f\\n\", \"Cargo Transported:\", tonnage));\n-        sb.append(String.format(\"%-35s      %4s (%1.0f)\\n\", \"Mothballed Units as Cargo (Tons):\", mothballedUnits, mothballedTonnage));\n-        sb.append(String.format(\"%-35s      %6.3f/%1.3f\\n\", \"Transported/Capacity:\", transported, ccc));\n-        sb.append(String.format(\"%-35s      %6.3f\\n\", \"Overage Not Transported:\", overage));\n+        if (u.getEntity().hasQuirk(OptionsConstants.QUIRK_POS_RUGGED_2)) {\n+            ruggedMultiplier = 3;\n+        }\n \n-        return new String(sb);\n-    }\n+        if (u.getDaysSinceMaintenance() >= (getCampaignOptions().getMaintenanceCycleDays() * ruggedMultiplier)) {\n+            // maybe use the money\n+            if (campaignOptions.payForMaintain()) {\n+                if (!(finances.debit(u.getMaintenanceCost(), Transaction.C_MAINTAIN, \"Maintenance for \"\n+                                + u.getName(), getLocalDate()))) {\n+                    addReport(\"<font color='red'><b>You cannot afford to pay maintenance costs for \"\n+                            + u.getHyperlinkedName() + \"!</b></font>\");\n+                    paidMaintenance = false;\n+                }\n+            }\n+            // it is time for a maintenance check\n+            int qualityOrig = u.getQuality();\n+            String techName = \"Nobody\";\n+            String techNameLinked = techName;\n+            if (null != tech) {\n+                techName = tech.getFullTitle();\n+                techNameLinked = tech.getHyperlinkedFullTitle();\n+            }\n+            // don't do actual damage until we clear the for loop to avoid\n+            // concurrent mod problems\n+            // put it into a hash - 4 points of damage will mean destruction\n+            Map<Part, Integer> partsToDamage = new HashMap<>();\n+            StringBuilder maintenanceReport = new StringBuilder(\"<emph>\" + techName + \" performing maintenance</emph><br><br>\");\n+            for (Part p : u.getParts()) {\n+                String partReport = \"<b>\" + p.getName() + \"</b> (Quality \" + p.getQualityName() + \")\";\n+                if (!p.needsMaintenance()) {\n+                    continue;\n+                }\n+                int oldQuality = p.getQuality();\n+                TargetRoll target = getTargetForMaintenance(p, tech);\n+                if (!paidMaintenance) {\n+                    // TODO : Make this modifier user inputtable\n+                    target.addModifier(1, \"did not pay for maintenance\");\n+                }\n \n-    public int getOccupiedBays(long type) {\n-        return getOccupiedBays(type, false);\n-    }\n+                partReport += \", TN \" + target.getValue() + \"[\" + target.getDesc() + \"]\";\n+                int roll = Compute.d6(2);\n+                int margin = roll - target.getValue();\n+                partReport += \" rolled a \" + roll + \", margin of \" + margin;\n \n-    public int getOccupiedBays(long type, boolean lv) {\n-        int num = 0;\n-        for (Unit unit : getUnits()) {\n-            if (unit.isMothballed()) {\n-                continue;\n-            }\n-            Entity en = unit.getEntity();\n-            if (en instanceof GunEmplacement || en instanceof Jumpship) {\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_MECH && en instanceof Mech) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_DROPSHIP && en instanceof Dropship) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_SMALL_CRAFT && en instanceof SmallCraft && !(en instanceof Dropship)) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_CONV_FIGHTER && en instanceof ConvFighter) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_AERO && en instanceof Aero\n-                    && !(en instanceof SmallCraft || en instanceof ConvFighter)) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_INFANTRY && en instanceof Infantry && !(en instanceof BattleArmor)) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_BATTLEARMOR && en instanceof BattleArmor) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_TANK && en instanceof Tank) {\n-                if ((en.getWeight() <= 50 && lv) || (en.getWeight() > 50 && !lv)) {\n-                    num++;\n+                switch (p.getQuality()) {\n+                    case Part.QUALITY_A: {\n+                        if (margin >= 4) {\n+                            p.improveQuality();\n+                        }\n+                        if (!campaignOptions.useUnofficialMaintenance()) {\n+                            if (margin < -6) {\n+                                partsToDamage.put(p, 4);\n+                            } else if (margin < -4) {\n+                                partsToDamage.put(p, 3);\n+                            } else if (margin == -4) {\n+                                partsToDamage.put(p, 2);\n+                            } else if (margin < -1) {\n+                                partsToDamage.put(p, 1);\n+                            }\n+                        } else if (margin < -6) {\n+                            partsToDamage.put(p, 1);\n+                        }\n+                        break;\n+                    }\n+                    case Part.QUALITY_B: {\n+                        if (margin >= 4) {\n+                            p.improveQuality();\n+                        } else if (margin < -5) {\n+                            p.decreaseQuality();\n+                        }\n+                        if (!campaignOptions.useUnofficialMaintenance()) {\n+                            if (margin < -6) {\n+                                partsToDamage.put(p, 2);\n+                            } else if (margin < -2) {\n+                                partsToDamage.put(p, 1);\n+                            }\n+                        }\n+                        break;\n+                    }\n+                    case Part.QUALITY_C: {\n+                        if (margin < -4) {\n+                            p.decreaseQuality();\n+                        } else if (margin >= 5) {\n+                            p.improveQuality();\n+                        }\n+                        if (!campaignOptions.useUnofficialMaintenance()) {\n+                            if (margin < -6) {\n+                                partsToDamage.put(p, 2);\n+                            } else if (margin < -3) {\n+                                partsToDamage.put(p, 1);\n+                            }\n+                        }\n+                        break;\n+                    }\n+                    case Part.QUALITY_D: {\n+                        if (margin < -3) {\n+                            p.decreaseQuality();\n+                            if ((margin < -4) && !campaignOptions.useUnofficialMaintenance()) {\n+                                partsToDamage.put(p, 1);\n+                            }\n+                        } else if (margin >= 5) {\n+                            p.improveQuality();\n+                        }\n+                        break;\n+                    }\n+                    case Part.QUALITY_E:\n+                        if (margin < -2) {\n+                            p.decreaseQuality();\n+                            if ((margin < -5) && !campaignOptions.useUnofficialMaintenance()) {\n+                                partsToDamage.put(p, 1);\n+                            }\n+                        } else if (margin >= 6) {\n+                            p.improveQuality();\n+                        }\n+                        break;\n+                    case Part.QUALITY_F:\n+                    default:\n+                        if (margin < -2) {\n+                            p.decreaseQuality();\n+                            if (margin < -6 && !campaignOptions.useUnofficialMaintenance()) {\n+                                partsToDamage.put(p, 1);\n+                            }\n+                        }\n+                        // TODO: award XP point if margin >= 6 (make this optional)\n+                        //if (margin >= 6) {\n+                        //\n+                        //}\n+                        break;\n                 }\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_PROTOMECH && en instanceof Protomech) {\n-                num++;\n-                continue;\n+                if (p.getQuality() > oldQuality) {\n+                    partReport += \": <font color='green'>new quality is \" + p.getQualityName() + \"</font>\";\n+                } else if (p.getQuality() < oldQuality) {\n+                    partReport += \": <font color='red'>new quality is \" + p.getQualityName() + \"</font>\";\n+                } else {\n+                    partReport += \": quality remains \" + p.getQualityName();\n+                }\n+                if (null != partsToDamage.get(p)) {\n+                    if (partsToDamage.get(p) > 3) {\n+                        partReport += \", <font color='red'><b>part destroyed</b></font>\";\n+                    } else {\n+                        partReport += \", <font color='red'><b>part damaged</b></font>\";\n+                    }\n+                }\n+                maintenanceReport.append(partReport).append(\"<br>\");\n             }\n-        }\n \n-        if (type == Entity.ETYPE_MECH) {\n-            if (getTotalMechBays() > num) {\n-                return num;\n+            int nDamage = 0;\n+            int nDestroy = 0;\n+            for (Map.Entry<Part, Integer> p : partsToDamage.entrySet()) {\n+                int damage = p.getValue();\n+                if (damage > 3) {\n+                    nDestroy++;\n+                    p.getKey().remove(false);\n+                } else {\n+                    p.getKey().doMaintenanceDamage(damage);\n+                    nDamage++;\n+                }\n             }\n-            return getTotalMechBays();\n-        }\n \n-        if (type == Entity.ETYPE_AERO) {\n-            if (getTotalASFBays() > num) {\n-                return num;\n-            }\n-            return getTotalASFBays();\n-        }\n+            u.setLastMaintenanceReport(maintenanceReport.toString());\n \n-        if (type == Entity.ETYPE_INFANTRY) {\n-            if (getTotalInfantryBays() > num) {\n-                return num;\n+            if (getCampaignOptions().logMaintenance()) {\n+                MekHQ.getLogger().info(getClass(), \"doMaintenance\", maintenanceReport.toString());\n             }\n-            return getTotalInfantryBays();\n-        }\n \n-        if (type == Entity.ETYPE_BATTLEARMOR) {\n-            if (getTotalBattleArmorBays() > num) {\n-                return num;\n+            int quality = u.getQuality();\n+            String qualityString;\n+            boolean reverse = getCampaignOptions().reverseQualityNames();\n+            if (quality > qualityOrig) {\n+                qualityString = \"<font color='green'>Overall quality improves from \"\n+                        + Part.getQualityName(qualityOrig, reverse) + \" to \" + Part.getQualityName(quality, reverse)\n+                        + \"</font>\";\n+            } else if (quality < qualityOrig) {\n+                qualityString = \"<font color='red'>Overall quality declines from \"\n+                        + Part.getQualityName(qualityOrig, reverse) + \" to \" + Part.getQualityName(quality, reverse)\n+                        + \"</font>\";\n+            } else {\n+                qualityString = \"Overall quality remains \" + Part.getQualityName(quality, reverse);\n             }\n-            return getTotalBattleArmorBays();\n-        }\n-\n-        if (type == Entity.ETYPE_TANK) {\n-            if (lv) {\n-                if (getTotalLightVehicleBays() > num) {\n-                    return num;\n-                }\n-                return getTotalLightVehicleBays();\n+            String damageString = \"\";\n+            if (nDamage > 0) {\n+                damageString += nDamage + \" parts were damaged. \";\n             }\n-            if (getTotalHeavyVehicleBays() > num) {\n-                return num;\n+            if (nDestroy > 0) {\n+                damageString += nDestroy + \" parts were destroyed.\";\n             }\n-            return getTotalHeavyVehicleBays();\n-        }\n-\n-        if (type == Entity.ETYPE_SMALL_CRAFT) {\n-            if (getTotalSmallCraftBays() > num) {\n-                return num;\n+            if (!damageString.isEmpty()) {\n+                damageString = \"<b><font color='red'>\" + damageString + \"</b></font> [<a href='REPAIR|\" + u.getId()\n+                        + \"'>Repair bay</a>]\";\n             }\n-            return getTotalSmallCraftBays();\n-        }\n-\n-        if (type == Entity.ETYPE_PROTOMECH) {\n-            if (getTotalProtomechBays() > num) {\n-                return num;\n+            String paidString = \"\";\n+            if (!paidMaintenance) {\n+                paidString = \"<font color='red'>Could not afford maintenance costs, so check is at a penalty.</font>\";\n             }\n-            return getTotalProtomechBays();\n-        }\n+            addReport(techNameLinked + \" performs maintenance on \" + u.getHyperlinkedName() + \". \" + paidString\n+                    + qualityString + \". \" + damageString + \" [<a href='MAINTENANCE|\" + u.getId()\n+                    + \"'>Get details</a>]\");\n \n-        if (type == Entity.ETYPE_DROPSHIP) {\n-            if (getTotalDockingCollars() > num) {\n-                return num;\n-            }\n-            return getTotalDockingCollars();\n+            u.resetDaysSinceMaintenance();\n         }\n-\n-        return -1; // default, this is an error condition\n     }\n \n-    public String getTransportDetails() {\n-        int noMech = Math.max(getNumberOfUnitsByType(Entity.ETYPE_MECH) - getOccupiedBays(Entity.ETYPE_MECH), 0);\n-        int noDS = Math.max(getNumberOfUnitsByType(Entity.ETYPE_DROPSHIP) - getOccupiedBays(Entity.ETYPE_DROPSHIP), 0);\n-        int noSC = Math.max(getNumberOfUnitsByType(Entity.ETYPE_SMALL_CRAFT) - getOccupiedBays(Entity.ETYPE_SMALL_CRAFT), 0);\n-        @SuppressWarnings(\"unused\") // FIXME: What type of bays do ConvFighters use?\n-        int noCF = Math\n-                .max(getNumberOfUnitsByType(Entity.ETYPE_CONV_FIGHTER) - getOccupiedBays(Entity.ETYPE_CONV_FIGHTER), 0);\n-        int noASF = Math.max(getNumberOfUnitsByType(Entity.ETYPE_AERO) - getOccupiedBays(Entity.ETYPE_AERO), 0);\n-        int nolv = Math.max(getNumberOfUnitsByType(Entity.ETYPE_TANK, false, true) - getOccupiedBays(Entity.ETYPE_TANK, true), 0);\n-        int nohv = Math.max(getNumberOfUnitsByType(Entity.ETYPE_TANK) - getOccupiedBays(Entity.ETYPE_TANK), 0);\n-        int noinf = Math.max(getNumberOfUnitsByType(Entity.ETYPE_INFANTRY) - getOccupiedBays(Entity.ETYPE_INFANTRY), 0);\n-        int noBA = Math.max(getNumberOfUnitsByType(Entity.ETYPE_BATTLEARMOR) - getOccupiedBays(Entity.ETYPE_BATTLEARMOR), 0);\n-        @SuppressWarnings(\"unused\") // FIXME: This should be used somewhere...\n-        int noProto = Math.max(getNumberOfUnitsByType(Entity.ETYPE_PROTOMECH) - getOccupiedBays(Entity.ETYPE_PROTOMECH),\n-                0);\n-        int freehv = Math.max(getTotalHeavyVehicleBays() - getOccupiedBays(Entity.ETYPE_TANK), 0);\n-        int freeinf = Math.max(getTotalInfantryBays() - getOccupiedBays(Entity.ETYPE_INFANTRY), 0);\n-        int freeba = Math.max(getTotalBattleArmorBays() - getOccupiedBays(Entity.ETYPE_BATTLEARMOR), 0);\n-        int freeSC = Math.max(getTotalSmallCraftBays() - getOccupiedBays(Entity.ETYPE_SMALL_CRAFT), 0);\n-        int mothballedAsCargo = Math.max(getNumberOfUnitsByType(Unit.ETYPE_MOTHBALLED), 0);\n-\n-        String asfAppend = \"\";\n-        int newNoASF = Math.max(noASF - freeSC, 0);\n-        int placedASF = Math.max(noASF - newNoASF, 0);\n-        if (noASF > 0 && freeSC > 0) {\n-            asfAppend = \" [\" + placedASF + \" ASF will be placed in Small Craft bays]\";\n-            freeSC -= placedASF;\n-        }\n-\n-        String lvAppend = \"\";\n-        int newNolv = Math.max(nolv - freehv, 0);\n-        int placedlv = Math.max(nolv - newNolv, 0);\n-        if (nolv > 0 && freehv > 0) {\n-            lvAppend = \" [\" + placedlv + \" Light Vehicles will be placed in Heavy Vehicle bays]\";\n-            freehv -= placedlv;\n-        }\n-\n-        if (noBA > 0 && freeinf > 0) {\n-\n-        }\n-\n-        if (noinf > 0 && freeba > 0) {\n-\n-        }\n-\n-        StringBuffer sb = new StringBuffer(\"Transports\\n\\n\");\n-\n-        // Lets do Mechs first.\n-        sb.append(String.format(\"%-35s      %4d (%4d)      %-35s     %4d\\n\", \"Mech Bays (Occupied):\",\n-                getTotalMechBays(), getOccupiedBays(Entity.ETYPE_MECH), \"Mechs Not Transported:\", noMech));\n-\n-        // Lets do ASF next.\n-        sb.append(String.format(\"%-35s      %4d (%4d)      %-35s     %4d%s\\n\", \"ASF Bays (Occupied):\",\n-                getTotalASFBays(), getOccupiedBays(Entity.ETYPE_AERO), \"ASF Not Transported:\", noASF, asfAppend));\n-\n-        // Lets do Light Vehicles next.\n-        sb.append(String.format(\"%-35s      %4d (%4d)      %-35s     %4d%s\\n\", \"Light Vehicle Bays (Occupied):\",\n-                getTotalLightVehicleBays(), getOccupiedBays(Entity.ETYPE_TANK, true), \"Light Vehicles Not Transported:\",\n-                nolv, lvAppend));\n-\n-        // Lets do Heavy Vehicles next.\n-        sb.append(String.format(\"%-35s      %4d (%4d)      %-35s     %4d\\n\", \"Heavy Vehicle Bays (Occupied):\",\n-                getTotalHeavyVehicleBays(), getOccupiedBays(Entity.ETYPE_TANK), \"Heavy Vehicles Not Transported:\",\n-                nohv));\n-\n-        if (noASF > 0 && freeSC > 0) {\n-            // Lets do ASF in Free Small Craft Bays next.\n-            sb.append(String.format(\"%-35s   %4d (%4d)      %-35s     %4d\\n\", \"   Light Vehicles in Heavy Vehicle Bays (Occupied):\",\n-                    getTotalHeavyVehicleBays(), getOccupiedBays(Entity.ETYPE_TANK) + placedlv,\n-                    \"Light Vehicles Not Transported:\", newNolv));\n-        }\n-\n-        if (nolv > 0 && freehv > 0) {\n-\n-        }\n-\n-        // Lets do Infantry next.\n-        sb.append(String.format(\"%-35s      %4d (%4d)      %-35s     %4d\\n\", \"Infantry Bays (Occupied):\",\n-                getTotalInfantryBays(), getOccupiedBays(Entity.ETYPE_INFANTRY), \"Infantry Not Transported:\", noinf));\n-\n-        if (noBA > 0 && freeinf > 0) {\n-\n-        }\n-\n-        // Lets do Battle Armor next.\n-        sb.append(String.format(\"%-35s      %4d (%4d)      %-35s     %4d\\n\", \"Battle Armor Bays (Occupied):\",\n-                getTotalBattleArmorBays(), getOccupiedBays(Entity.ETYPE_BATTLEARMOR), \"Battle Armor Not Transported:\",\n-                noBA));\n-\n-        if (noinf > 0 && freeba > 0) {\n-\n-        }\n-\n-        // Lets do Small Craft next.\n-        sb.append(String.format(\"%-35s      %4d (%4d)      %-35s     %4d\\n\", \"Small Craft Bays (Occupied):\",\n-                getTotalSmallCraftBays(), getOccupiedBays(Entity.ETYPE_SMALL_CRAFT), \"Small Craft Not Transported:\",\n-                noSC));\n-\n-        if (noASF > 0 && freeSC > 0) {\n-            // Lets do ASF in Free Small Craft Bays next.\n-            sb.append(String.format(\"%-35s   %4d (%4d)      %-35s     %4d\\n\", \"   ASF in Small Craft Bays (Occupied):\",\n-                    getTotalSmallCraftBays(), getOccupiedBays(Entity.ETYPE_SMALL_CRAFT) + placedASF,\n-                    \"ASF Not Transported:\", newNoASF));\n-        }\n-\n-        // Lets do Protomechs next.\n-        sb.append(String.format(\"%-35s      %4d (%4d)      %-35s     %4d\\n\", \"Protomech Bays (Occupied):\",\n-                getTotalProtomechBays(), getOccupiedBays(Entity.ETYPE_PROTOMECH), \"Protomechs Not Transported:\", noSC));\n-\n-        sb.append(\"\\n\\n\");\n-\n-        sb.append(String.format(\"%-35s      %4d (%4d)      %-35s     %4d\\n\", \"Docking Collars (Occupied):\",\n-                getTotalDockingCollars(), getOccupiedBays(Entity.ETYPE_DROPSHIP), \"Dropships Not Transported:\", noDS));\n-\n-        sb.append(\"\\n\\n\");\n-\n-        sb.append(String.format(\"%-35s      %4d\\n\", \"Mothballed Units (see Cargo report)\", mothballedAsCargo));\n-\n-        return new String(sb);\n-    }\n-\n-    public String getCombatPersonnelDetails() {\n-        int[] countPersonByType = new int[Person.T_NUM];\n-        int countTotal = 0;\n-        int countInjured = 0;\n-        int countMIA = 0;\n-        int countKIA = 0;\n-        int countRetired = 0;\n-        Money salary = Money.zero();\n-\n+    public void initTimeInService() {\n         for (Person p : getPersonnel()) {\n-            // Add them to the total count\n-            if (Person.isCombatRole(p.getPrimaryRole()) && !p.isPrisoner()\n-                    && !p.isBondsman() && p.isActive()) {\n-                countPersonByType[p.getPrimaryRole()]++;\n-                countTotal++;\n-                if (getCampaignOptions().useAdvancedMedical()\n-                        && p.getInjuries().size() > 0) {\n-                    countInjured++;\n-                } else if (p.getHits() > 0) {\n-                    countInjured++;\n+            if (!p.isDependent() && p.getPrisonerStatus().isFree()) {\n+                LocalDate join = null;\n+                for (LogEntry e : p.getPersonnelLog()) {\n+                    if (join == null) {\n+                        // If by some nightmare there is no Joined date just use the first entry.\n+                        join = e.getDate();\n+                    }\n+                    if (e.getDesc().startsWith(\"Joined \") || e.getDesc().startsWith(\"Freed \")) {\n+                        join = e.getDate();\n+                        break;\n+                    }\n                 }\n-                salary = salary.plus(p.getSalary());\n-            } else if (Person.isCombatRole(p.getPrimaryRole())\n-                    && p.getStatus() == Person.S_RETIRED) {\n-                countRetired++;\n-            } else if (Person.isCombatRole(p.getPrimaryRole())\n-                    && p.getStatus() == Person.S_MIA) {\n-                countMIA++;\n-            } else if (Person.isCombatRole(p.getPrimaryRole())\n-                    && p.getStatus() == Person.S_KIA) {\n-                countKIA++;\n-            }\n-        }\n \n-        StringBuffer sb = new StringBuffer(\"Combat Personnel\\n\\n\");\n-\n-        String buffer = String.format(\"%-30s        %4s\\n\", \"Total Combat Personnel\",\n-                countTotal);\n-        sb.append(buffer);\n-\n-        for (int i = 0; i < Person.T_NUM; i++) {\n-            if (Person.isCombatRole(i)) {\n-                buffer = String.format(\"    %-30s    %4s\\n\", Person.getRoleDesc(i, getFaction().isClan()),\n-                        countPersonByType[i]);\n-                sb.append(buffer);\n+                p.setRecruitment((join != null) ? join : getLocalDate().minusYears(1));\n             }\n         }\n-\n-        buffer = String.format(\"%-30s        %4s\\n\",\n-                \"Injured Combat Personnel\", countInjured);\n-        sb.append(\"\\n\" + buffer);\n-        buffer = String.format(\"%-30s        %4s\\n\", \"MIA Combat Personnel\",\n-                countMIA);\n-        sb.append(buffer);\n-        buffer = String.format(\"%-30s        %4s\\n\", \"KIA Combat Personnel\",\n-                countKIA);\n-        sb.append(buffer);\n-        buffer = String.format(\"%-30s        %4s\\n\",\n-                \"Retired Combat Personnel\", countRetired);\n-        sb.append(buffer);\n-\n-        sb.append(\"\\nMonthly Salary For Combat Personnel: \" + salary.toAmountAndSymbolString());\n-\n-        return new String(sb);\n     }\n \n-    public String getSupportPersonnelDetails() {\n-        int[] countPersonByType = new int[Person.T_NUM];\n-        int countTotal = 0;\n-        int countInjured = 0;\n-        int countMIA = 0;\n-        int countKIA = 0;\n-        int countRetired = 0;\n-        Money salary = Money.zero();\n-        int prisoners = 0;\n-        int bondsmen = 0;\n-\n+    public void initTimeInRank() {\n         for (Person p : getPersonnel()) {\n-            // Add them to the total count\n-            if (Person.isSupportRole(p.getPrimaryRole()) && !p.isPrisoner()\n-                    && !p.isBondsman() && p.isActive()) {\n-                countPersonByType[p.getPrimaryRole()]++;\n-                countTotal++;\n-                if (p.getInjuries().size() > 0 || p.getHits() > 0) {\n-                    countInjured++;\n-                }\n-                salary = salary.plus(p.getSalary());\n-            } else if (p.isPrisoner() && p.isActive()) {\n-                prisoners++;\n-                if (p.getInjuries().size() > 0 || p.getHits() > 0) {\n-                    countInjured++;\n-                }\n-            } else if (p.isBondsman() && p.isActive()) {\n-                bondsmen++;\n-                if (p.getInjuries().size() > 0 || p.getHits() > 0) {\n-                    countInjured++;\n-                }\n-            } else if (Person.isSupportRole(p.getPrimaryRole())\n-                    && p.getStatus() == Person.S_RETIRED) {\n-                countRetired++;\n-            } else if (Person.isSupportRole(p.getPrimaryRole())\n-                    && p.getStatus() == Person.S_MIA) {\n-                countMIA++;\n-            } else if (Person.isSupportRole(p.getPrimaryRole())\n-                    && p.getStatus() == Person.S_KIA) {\n-                countKIA++;\n-            }\n-        }\n+            if (!p.isDependent() && p.getPrisonerStatus().isFree()) {\n \n-        StringBuffer sb = new StringBuffer(\"Support Personnel\\n\\n\");\n+                LocalDate join = null;\n+                for (LogEntry e : p.getPersonnelLog()) {\n+                    if (join == null) {\n+                        // If by some nightmare there is no date from the below, just use the first entry.\n+                        join = e.getDate();\n+                    }\n \n-        String buffer = String.format(\"%-30s        %4s\\n\", \"Total Support Personnel\",\n-                countTotal);\n-        sb.append(buffer);\n+                    if (e.getDesc().startsWith(\"Joined \") || e.getDesc().startsWith(\"Freed \")\n+                            || e.getDesc().startsWith(\"Promoted \") || e.getDesc().startsWith(\"Demoted \")) {\n+                        join = e.getDate();\n+                    }\n+                }\n \n-        for (int i = 0; i < Person.T_NUM; i++) {\n-            if (Person.isSupportRole(i)) {\n-                buffer = String.format(\"    %-30s    %4s\\n\", Person.getRoleDesc(i, getFaction().isClan()),\n-                        countPersonByType[i]);\n-                sb.append(buffer);\n+                // For that one in a billion chance the log is empty. Clone today's date and subtract a year\n+                p.setLastRankChangeDate((join != null) ? join : getLocalDate().minusYears(1));\n             }\n         }\n-\n-        buffer = String.format(\"%-30s        %4s\\n\",\n-                \"Injured Support Personnel\", countInjured);\n-        sb.append(\"\\n\" + buffer);\n-        buffer = String.format(\"%-30s        %4s\\n\", \"MIA Support Personnel\",\n-                countMIA);\n-        sb.append(buffer);\n-        buffer = String.format(\"%-30s        %4s\\n\", \"KIA Support Personnel\",\n-                countKIA);\n-        sb.append(buffer);\n-        buffer = String.format(\"%-30s        %4s\\n\",\n-                \"Retired Support Personnel\", countRetired);\n-        sb.append(buffer);\n-\n-        sb.append(\"\\nMonthly Salary For Support Personnel: \" + salary.toAmountAndSymbolString());\n-\n-        sb.append(String.format(\"\\nYou have \" + prisoners + \" prisoner%s\",\n-                prisoners == 1 ? \"\" : \"s\"));\n-        sb.append(String.format(\"\\nYou have \" + bondsmen + \" %s\",\n-                bondsmen == 1 ? \"bondsman\" : \"bondsmen\"));\n-\n-        return new String(sb);\n     }\n \n-    public void doMaintenance(Unit u) {\n-        if (!u.requiresMaintenance()) {\n-            return;\n-        }\n-        // lets start by checking times\n-        Person tech = u.getTech();\n-        int minutesUsed = u.getMaintenanceTime();\n-        int astechsUsed = getAvailableAstechs(minutesUsed, false);\n-        boolean maintained = null != tech\n-                && tech.getMinutesLeft() >= minutesUsed && !tech.isMothballing();\n-        boolean paidMaintenance = true;\n-        if (maintained) {\n-            // use the time\n-            tech.setMinutesLeft(tech.getMinutesLeft() - minutesUsed);\n-            astechPoolMinutes -= astechsUsed * minutesUsed;\n-        }\n-        u.incrementDaysSinceMaintenance(maintained, astechsUsed);\n-        if (u.getDaysSinceMaintenance() >= getCampaignOptions().getMaintenanceCycleDays()) {\n-            // maybe use the money\n-            if (campaignOptions.payForMaintain()) {\n-                if (finances.debit(u.getMaintenanceCost(), Transaction.C_MAINTAIN, \"Maintenance for \" + u.getName(),\n-                        calendar.getTime())) {\n-                } else {\n-                    addReport(\"<font color='red'><b>You cannot afford to pay maintenance costs for \"\n-                            + u.getHyperlinkedName() + \"!</b></font>\");\n-                    paidMaintenance = false;\n-                }\n-            }\n-            if (getCampaignOptions().checkMaintenance()) {\n-                // its time for a maintenance check\n-                int qualityOrig = u.getQuality();\n-                String techName = \"Nobody\";\n-                String techNameLinked = techName;\n-                if (null != tech) {\n-                    techName = tech.getFullTitle();\n-                    techNameLinked = tech.getHyperlinkedFullTitle();\n-                }\n-                // dont do actual damage until we clear the for loop to avoid\n-                // concurrent mod problems\n-                // put it into a hash - 4 points of damage will mean destruction\n-                HashMap<Integer, Integer> partsToDamage = new HashMap<>();\n-                String maintenanceReport = \"<emph>\" + techName + \" performing maintenance</emph><br><br>\";\n-                for (Part p : u.getParts()) {\n-                    String partReport = \"<b>\" + p.getName() + \"</b> (Quality \" + p.getQualityName() + \")\";\n-                    if (!p.needsMaintenance()) {\n-                        continue;\n-                    }\n-                    int oldQuality = p.getQuality();\n-                    TargetRoll target = getTargetForMaintenance(p, tech);\n-                    if (!paidMaintenance) {\n-                        // I should probably make this modifier user inputtable\n-                        target.addModifier(1, \"did not pay maintenance\");\n-                    }\n-                    partReport += \", TN \" + target.getValue() + \"[\" + target.getDesc() + \"]\";\n-                    int roll = Compute.d6(2);\n-                    int margin = roll - target.getValue();\n-                    partReport += \" rolled a \" + roll + \", margin of \" + margin;\n-                    switch (p.getQuality()) {\n-                        case Part.QUALITY_F:\n-                            if (margin < -2) {\n-                                p.decreaseQuality();\n-                                if (margin < -6 && !campaignOptions.useUnofficialMaintenance()) {\n-                                    partsToDamage.put(p.getId(), 1);\n-                                }\n-                            }\n-                            if (margin >= 6) {\n-                                // TODO: award XP point (make this optional)\n-                            }\n-                            break;\n-                        case Part.QUALITY_E:\n-                            if (margin < -2) {\n-                                p.decreaseQuality();\n-                                if (margin < -5 && !campaignOptions.useUnofficialMaintenance()) {\n-                                    partsToDamage.put(p.getId(), 1);\n-                                }\n-                            }\n-                            if (margin >= 6) {\n-                                p.improveQuality();\n-                            }\n-                            break;\n-                        case Part.QUALITY_D:\n-                            if (margin < -3) {\n-                                p.decreaseQuality();\n-                                if (margin < -4 && !campaignOptions.useUnofficialMaintenance()) {\n-                                    partsToDamage.put(p.getId(), 1);\n-                                }\n-                            }\n-                            if (margin >= 5) {\n-                                p.improveQuality();\n-                            }\n-                            break;\n-                        case Part.QUALITY_C:\n-                            if (margin < -4) {\n-                                p.decreaseQuality();\n-                            }\n-                            if (!campaignOptions.useUnofficialMaintenance()) {\n-                                if (margin < -6) {\n-                                    partsToDamage.put(p.getId(), 2);\n-                                } else if (margin < -3) {\n-                                    partsToDamage.put(p.getId(), 1);\n-                                }\n-                            }\n-                            if (margin >= 5) {\n-                                p.improveQuality();\n-                            }\n-                            break;\n-                        case Part.QUALITY_B:\n-                            if (margin < -5) {\n-                                p.decreaseQuality();\n-                            }\n-                            if (!campaignOptions.useUnofficialMaintenance()) {\n-                                if (margin < -6) {\n-                                    partsToDamage.put(p.getId(), 2);\n-                                } else if (margin < -2) {\n-                                    partsToDamage.put(p.getId(), 1);\n-                                }\n-                            }\n-                            if (margin >= 4) {\n-                                p.improveQuality();\n-                            }\n-                            break;\n-                        case Part.QUALITY_A:\n-                            if (!campaignOptions.useUnofficialMaintenance()) {\n-                                if (margin < -6) {\n-                                    partsToDamage.put(p.getId(), 4);\n-                                } else if (margin < -4) {\n-                                    partsToDamage.put(p.getId(), 3);\n-                                } else if (margin == -4) {\n-                                    partsToDamage.put(p.getId(), 2);\n-                                } else if (margin < -1) {\n-                                    partsToDamage.put(p.getId(), 1);\n-                                }\n-                            } else if (margin < -6) {\n-                                partsToDamage.put(p.getId(), 1);\n-                            }\n-                            if (margin >= 4) {\n-                                p.improveQuality();\n-                            }\n-                            break;\n-                    }\n-                    if (p.getQuality() > oldQuality) {\n-                        partReport += \": <font color='green'>new quality is \" + p.getQualityName() + \"</font>\";\n-                    } else if (p.getQuality() < oldQuality) {\n-                        partReport += \": <font color='red'>new quality is \" + p.getQualityName() + \"</font>\";\n-                    } else {\n-                        partReport += \": quality remains \" + p.getQualityName();\n-                    }\n-                    if (null != partsToDamage.get(p.getId())) {\n-                        if (partsToDamage.get(p.getId()) > 3) {\n-                            partReport += \", <font color='red'><b>part destroyed</b></font>\";\n-                        } else {\n-                            partReport += \", <font color='red'><b>part damaged</b></font>\";\n-                        }\n-                    }\n-                    maintenanceReport += partReport + \"<br>\";\n-                }\n-                int nDamage = 0;\n-                int nDestroy = 0;\n-                for (int key : partsToDamage.keySet()) {\n-                    Part p = getPart(key);\n-                    if (null != p) {\n-                        int damage = partsToDamage.get(key);\n-                        if (damage > 3) {\n-                            nDestroy++;\n-                            p.remove(false);\n-                        } else {\n-                            p.doMaintenanceDamage(damage);\n-                            nDamage++;\n-                        }\n+    public void initRetirementDateTracking() {\n+        for (Person person : getPersonnel()) {\n+            if (person.getStatus().isRetired()) {\n+                LocalDate retired = null;\n+                LocalDate lastLoggedDate = null;\n+                for (LogEntry entry : person.getPersonnelLog()) {\n+                    lastLoggedDate = entry.getDate();\n+                    if (entry.getDesc().startsWith(\"Retired\")) {\n+                        retired = entry.getDate();\n                     }\n                 }\n-                u.setLastMaintenanceReport(maintenanceReport);\n-                int quality = u.getQuality();\n-                String qualityString;\n-                boolean reverse = getCampaignOptions().reverseQualityNames();\n-                if (quality > qualityOrig) {\n-                    qualityString = \"<font color='green'>Overall quality improves from \"\n-                            + Part.getQualityName(qualityOrig, reverse) + \" to \" + Part.getQualityName(quality, reverse)\n-                            + \"</font>\";\n-                } else if (quality < qualityOrig) {\n-                    qualityString = \"<font color='red'>Overall quality declines from \"\n-                            + Part.getQualityName(qualityOrig, reverse) + \" to \" + Part.getQualityName(quality, reverse)\n-                            + \"</font>\";\n-                } else {\n-                    qualityString = \"Overall quality remains \" + Part.getQualityName(quality, reverse);\n-                }\n-                String damageString = \"\";\n-                if (nDamage > 0) {\n-                    damageString += nDamage + \" parts were damaged. \";\n-                }\n-                if (nDestroy > 0) {\n-                    damageString += nDestroy + \" parts were destroyed.\";\n-                }\n-                if (!damageString.isEmpty()) {\n-                    damageString = \"<b><font color='red'>\" + damageString + \"</b></font> [<a href='REPAIR|\" + u.getId()\n-                            + \"'>Repair bay</a>]\";\n-                }\n-                String paidString = \"\";\n-                if (!paidMaintenance) {\n-                    paidString = \"<font color='red'>Could not afford maintenance costs, so check is at a penalty.</font>\";\n-                }\n-                addReport(techNameLinked + \" performs maintenance on \" + u.getHyperlinkedName() + \". \" + paidString\n-                        + qualityString + \". \" + damageString + \" [<a href='MAINTENANCE|\" + u.getId()\n-                        + \"'>Get details</a>]\");\n-            }\n-            u.resetDaysSinceMaintenance();\n-        }\n-    }\n \n-    public void initTimeInService() {\n-        for (Person p : getPersonnel()) {\n-            Date join = null;\n-            for (LogEntry e : p.getPersonnelLog()) {\n-                if (join == null){\n-                    // If by some nightmare there is no Joined date just use the first entry.\n-                    join = e.getDate();\n-                }\n-                if (e.getDesc().startsWith(\"Joined \") || e.getDesc().startsWith(\"Freed \")) {\n-                    join = e.getDate();\n-                    break;\n-                }\n-            }\n-            if (!p.isDependent() && !p.isPrisoner() && !p.isBondsman()) {\n-                GregorianCalendar cal = (GregorianCalendar) GregorianCalendar.getInstance();\n-                // For that one in a billion chance the log is empty. Clone todays date and subtract a year\n-                if (join == null) {\n-                    cal = (GregorianCalendar)calendar.clone();\n-                    cal.add(Calendar.YEAR, -1);\n-                    p.setRecruitment(cal);\n-                } else {\n-                    cal.setTime(join);\n-                    p.setRecruitment(cal);\n+                if (retired == null) {\n+                    retired = lastLoggedDate;\n                 }\n+\n+                // For that one in a billion chance the log is empty. Clone today's date and subtract a year\n+                person.setRetirement((retired != null) ? retired : getLocalDate().minusYears(1));\n             }\n         }\n     }\n \n     public void initAtB(boolean newCampaign) {\n-        getRetirementDefectionTracker().setLastRetirementRoll(getCalendar());\n+        getRetirementDefectionTracker().setLastRetirementRoll(getLocalDate());\n \n         if (!newCampaign) {\n             /*\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "3f55aabad31fb84ff1e5af9c8caac7bd8c8999a0", "message": "Merge commit", "committedDate": null}, {"oid": "a0c1cbf9746ed9486f08ce4aa2376828e846c786", "committedDate": "2019-02-26 21:45:56 -0500", "message": "merge"}, {"oid": "3002e321d67f944da3a051a049f0706c0e353aa0", "committedDate": "2019-03-04 20:50:34 -0500", "message": "merge from upstream"}, {"oid": "34f5dfffab4318e94903fece9dbf49dd1ee475c7", "committedDate": "2019-04-23 22:53:00 -0400", "message": "continues work on track gui and rules"}, {"oid": "b1c2e0f95fc8ad45080d9962da602d5fe815c34b", "committedDate": "2019-04-26 22:02:27 -0400", "message": "hook up stratcon rules manager to mekhq event bus"}, {"oid": "6f180f04dabdd9901dc392b093561514eb2e84cc", "committedDate": "2019-05-04 12:17:55 -0400", "message": "merge from upstream"}, {"oid": "119ff411ebb80f91b83b3fe139bb911a79048b3d", "committedDate": "2019-05-12 15:48:11 -0400", "message": "scenario setup work"}, {"oid": "2548381ed541547a775bb8c96fd53802087ec9aa", "committedDate": "2019-06-20 23:58:58 -0400", "message": "merge from upstream"}, {"oid": "ed6a5c015aa33d0bffdcd3297b9482ce600eb146", "committedDate": "2020-04-11 22:33:14 -0400", "message": "merge from upstream"}, {"oid": "ca46ea5005775f38ad56f98bfb8899a187571e49", "committedDate": "2020-06-03 11:30:19 -0400", "message": "merge from upstream"}, {"oid": "b2f014d250be5b4b75ed3f765f10ee1781ab96ae", "committedDate": "2020-06-23 22:21:32 -0400", "message": "merge from upstream"}, {"oid": "2bd7638ed4cc2ad5bc80e4b1bc78ff091c318a87", "committedDate": "2020-07-13 00:06:30 -0400", "message": "merge from upstream"}, {"oid": "d4f035c262d3d9ea7b7f5e935a5807bf5275aa91", "committedDate": "2020-08-08 23:08:38 -0400", "message": "merge from upstream"}, {"oid": "5830ebef6d2f671d0b152f328436ab36bcddacf4", "committedDate": "2020-08-24 20:32:16 -0400", "message": "merge from upstream"}, {"oid": "c8622590fef59265a5a8c4f68676a4a628d0fc0a", "committedDate": "2020-08-26 23:17:49 -0400", "message": "multiple bug fixes and hookup to actual campaign"}, {"oid": "935339ac1b799e58664d736142b2a1fa0d9e4263", "committedDate": "2020-09-09 00:06:07 -0400", "message": "merge from upstream"}, {"oid": "c7d9edb3737ba14da075190a1292ac94bbd7e0f2", "committedDate": "2020-09-20 14:36:56 -0600", "message": "Adding code for a log entry when swapping TOE force."}, {"oid": "2e590a1dbeb8a7b132cd5d312b93af37b9e0620a", "committedDate": "2020-09-29 10:15:54 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_476"}, {"oid": "04f10ee4b7f5bf57284109439ec1ab178b15857e", "committedDate": "2020-10-06 21:41:18 -0400", "message": "merge from upstream"}, {"oid": "04a16de448a0c7d576a6c3c64c9d23ae08384bae", "committedDate": "2020-10-07 14:33:13 -0400", "message": "Split out cargo and hangar statistics from Campaign"}, {"oid": "796379c3c13e8dadad4ac4cfd29f02a30e9c2bd1", "committedDate": "2020-10-07 14:33:13 -0400", "message": "Split out accounting from the Campaign"}, {"oid": "a254e204d91c3fd90698936f8d21aba26aaf0142", "committedDate": "2020-10-07 14:33:14 -0400", "message": "Move PersonnelReport methods"}, {"oid": "361dde24295aa66e89fea69823b01cf497cf4664", "committedDate": "2020-10-07 14:33:14 -0400", "message": "Move more financial reporting out of Campaign"}, {"oid": "c28db6f06dec2b03e487c15f514685d852bdca1e", "committedDate": "2020-10-07 14:33:14 -0400", "message": "Remove unused methods"}, {"oid": "039786019051fddf3af641c0cc0e35e7c85eb156", "committedDate": "2020-10-07 15:49:11 -0400", "message": "Make testing Accountant easier for a Campaign"}, {"oid": "a72b07d7b8ec62055140cd346314602fb020119e", "committedDate": "2020-10-07 16:11:53 -0400", "message": "Make it easier to mock stats classes"}, {"oid": "0400aac175c219dc2fb73ea0a8dfbbf429aaff6e", "committedDate": "2020-10-07 16:45:26 -0400", "message": "Add forEachSparePart to improve performance"}, {"oid": "63e028b04713a41ec415910ea4d0ed03a3678864", "committedDate": "2020-10-08 13:32:32 -0400", "message": "Merge remote-tracking branch 'upstream/master' into move-accounting-and-stats-out-of-campaign"}, {"oid": "13de948b34166d73f4f7a2e5a8982c9f693b12bc", "committedDate": "2020-10-10 15:15:00 -0400", "message": "Use Person directly instead of IDs in Unit"}, {"oid": "923a477ddb1060c2a48c13cca7c5900a40c0f82a", "committedDate": "2020-10-10 15:15:00 -0400", "message": "Use Person instead of an ID"}, {"oid": "58291b29acbe7cc24a4491f3d3ab911f0468a7dc", "committedDate": "2020-10-10 15:41:57 -0400", "message": "Fix logic to check for Already Being Worked On"}, {"oid": "998ab0faf85804f17cc7444ae1b46c2591b5db1f", "committedDate": "2020-10-15 23:34:03 -0400", "message": "merge from upstream"}, {"oid": "75e396b885c6008c6f6a7d72f1bbd7aad8099970", "committedDate": "2020-10-16 16:29:27 -0400", "message": "Moving to an enum for mission status"}, {"oid": "24de5e9720cf823838bf74e4cf4eb562bedbb437", "committedDate": "2020-10-16 18:28:46 -0400", "message": "Merging useUnitRating with the UnitRatingMethod enum"}, {"oid": "ca615b8e13e2158834a33079c6f89b02504c0bf7", "committedDate": "2020-10-17 01:17:28 -0400", "message": "Moving to using AbstractIcon for constants"}, {"oid": "4a54c7e9a18be4084eb1d3748a891b46400bf53d", "committedDate": "2020-10-17 13:11:47 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_IconConstants"}, {"oid": "9c1a47e2e6268b362edd3d6eb2e39018b5802179", "committedDate": "2020-10-20 14:49:01 -0400", "message": "Address PR feedback"}, {"oid": "b5d38e8af270f50fc091db05cf882ea8380fe3a7", "committedDate": "2020-10-20 14:49:08 -0400", "message": "Merge remote-tracking branch 'upstream/master' into units-hold-actual-persons"}, {"oid": "f34ac06c3db416f5e852246e928d3b1c6c132500", "committedDate": "2020-10-20 21:00:04 -0400", "message": "Merge branch 'master' into dev_Windchild_MissionStatus"}, {"oid": "fbc730260407b11dc98571c9b5e184e8f05e6a89", "committedDate": "2020-10-22 12:56:22 -0400", "message": "Standardizing to use the PortraitChooser instead of the older icon selector"}, {"oid": "0637c9d04376fbc5378a09826bdd58e1092b97f0", "committedDate": "2020-10-22 15:07:25 -0400", "message": "Use Units rather than their IDs"}, {"oid": "d25f391110cab3b64118d5963e321c379f8ab3ec", "committedDate": "2020-10-22 15:07:25 -0400", "message": "Do not use Unit IDs in Refits"}, {"oid": "5bf80c3e80c7fd9247fee197d749605de4a4e17b", "committedDate": "2020-10-22 15:07:49 -0400", "message": "Merge branch 'master' into dev_Windchild_IconConstants"}, {"oid": "2eec6da85e021ce0398fd3d715071b7b625855ba", "committedDate": "2020-10-22 23:15:38 -0400", "message": "merge from upstream"}, {"oid": "599b0a3158d94a3eea50fe8314c55177a344c2a9", "committedDate": "2020-10-24 14:22:32 -0400", "message": "Merge remote-tracking branch 'upstream/master' into use-units-not-ids"}, {"oid": "1d9b9a6ee2a71f128d65bb7754463be3ca9a71bc", "committedDate": "2020-10-24 14:26:31 -0400", "message": "Address LGTM issues"}, {"oid": "9f22e79abf71f3d8cf935d5d83d4790af02b32ce", "committedDate": "2020-10-24 14:48:29 -0400", "message": "Add tests for transport unit sets"}, {"oid": "851026ff48ec4e39238b2c56212bac2ea7993670", "committedDate": "2020-10-26 14:53:19 -0400", "message": "Use new Warehouse type in Campaign (etc)"}, {"oid": "37fc5840de9bf6c5bb19b38767e1394be220e1b9", "committedDate": "2020-10-26 16:02:30 -0400", "message": "Move some event logic to the Warehouse"}, {"oid": "3f795a2b3ba1840a198ca067a1d76aed4429f699", "committedDate": "2020-10-26 17:26:50 -0400", "message": "Move removing child parts to the Warehouse"}, {"oid": "d597a8aab6c1b948ebfdcc3f58d2213acb04b200", "committedDate": "2020-10-27 12:29:29 -0400", "message": "Starting to implement edge fixes"}, {"oid": "9978a0b21dd7d6fbd2d0077748027c6ed31753b0", "committedDate": "2020-10-27 12:29:35 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_Edge"}, {"oid": "b2aea6b5d940c4fa06a42cd1b04559815323ab63", "committedDate": "2020-10-27 13:04:35 -0400", "message": "Working on edge code"}, {"oid": "fbd0d470437e527c764daa294d1521ca7509a6af", "committedDate": "2020-10-27 14:04:21 -0400", "message": "Implementing changes as per review"}, {"oid": "c883a5f8c0085c74e8f448ecd3c0f9c04227b067", "committedDate": "2020-10-27 17:22:03 -0400", "message": "Move spare part helpers to Warehouse and add tests"}, {"oid": "dfca32fc2a15a2908cd4f1277261d416fcad1f00", "committedDate": "2020-10-27 21:14:06 -0400", "message": "merge from upstream"}, {"oid": "a7d7c78d0149d3de3828501499fdf61b5ae75be6", "committedDate": "2020-10-28 14:17:13 -0400", "message": "Merge pull request #2167 from sixlettervariables/add-parts-warehouse"}, {"oid": "d9aa78378bd639bd9bd8b36e16e9d407d5c2f1a6", "committedDate": "2020-10-28 14:28:37 -0400", "message": "Clean up part events in Campaign"}, {"oid": "f6acac4474902742fd52f7d3d9cc3cf3c074d16a", "committedDate": "2020-10-28 15:35:29 -0400", "message": "Address LGTM nit"}, {"oid": "b60b5a84ad487fe05e6369a11fedccb4f233a69d", "committedDate": "2020-10-29 15:28:06 -0400", "message": "Move Hire Personnel for a Unit to an action"}, {"oid": "d32837864805c67ac3894ce3a6b84ee8dae064a3", "committedDate": "2020-10-29 15:43:23 -0400", "message": "Don't use unit IDs for parts needing service"}, {"oid": "92b838a6428bae18030b98719a0c20d399377282", "committedDate": "2020-10-29 15:51:09 -0400", "message": "Move unnecessary unit logic from Campaign and into Unit"}, {"oid": "fd327a8f439a378f8f34afcb3067fe57153dcc2d", "committedDate": "2020-11-03 21:23:25 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_MHQPortraitSelector"}, {"oid": "0cbe836f9e807faf4cbef1d391b1ce3ad0e865d1", "committedDate": "2020-11-04 16:17:23 -0500", "message": "Add Quartermaster to manage machines and materiel"}, {"oid": "18cddebe515dbc58e76c49ef789cb3f4b31bc8a2", "committedDate": "2020-11-06 14:57:11 -0500", "message": "Address PR feedback and fix #1801"}, {"oid": "dd8b9c84414cb11c30ec6e2d395e2260235cd73a", "committedDate": "2020-11-06 14:58:38 -0500", "message": "Fix extraneous whitespace"}, {"oid": "31c96a9e64873aa2840946dbb1c12d347994780d", "committedDate": "2020-11-06 16:10:50 -0500", "message": "Swapping portrait generation to use system-based file path comparison"}, {"oid": "8bf24b6a7be023940aad58a0c3c3ded1ee2a9358", "committedDate": "2020-11-06 16:50:16 -0500", "message": "Fixing merge conflicts"}, {"oid": "206529fd93c7b6efd22949d747ea14ec2a1942ed", "committedDate": "2020-11-06 19:38:46 -0500", "message": "Merge pull request #2185 from sixlettervariables/use-units-not-ids-for-transports"}, {"oid": "f246ee2085262fe713a9f24b3eaf6e7adb142e41", "committedDate": "2020-11-07 10:40:39 -0500", "message": "Moving portrait generation code into a random portrait generator"}, {"oid": "139d94f86981a4c6b681ec14d16630b99198024a", "committedDate": "2020-11-07 12:32:07 -0500", "message": "AbstractIcon: Simplifying icon-related code"}, {"oid": "cbec2bdc4861f772bb509fc69f37a8c053522347", "committedDate": "2020-11-07 12:39:03 -0500", "message": "Removing duplicate constants in campaign"}, {"oid": "e9c4a88af33312b049543ac024e2c32784a7b209", "committedDate": "2020-11-07 12:52:54 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_AIPS"}, {"oid": "76f57ccbde3ae98e58e5264c5d06be29b03ce3af", "committedDate": "2020-11-07 15:16:08 -0500", "message": "Merge pull request #2209 from Windchild292/dev_Windchild_RPG"}, {"oid": "067bacc6c00b10192faa2b4e13d4c2127ba75292", "committedDate": "2020-11-07 22:39:06 -0500", "message": "Merge pull request #2211 from Windchild292/dev_Windchild_AIPS"}, {"oid": "a38a43b4cc7f7670aa7ffad2bf318bc15334d0a1", "committedDate": "2020-11-08 13:55:37 -0500", "message": "Merge remote-tracking branch 'upstream/master' into add-quartermaster-2"}, {"oid": "6b4dfeadd20c22e92cb2a0328030ed58c3df5cd1", "committedDate": "2020-11-14 19:29:15 -0500", "message": "Swapping Genealogy and FormerSpouse to no longer use id when active."}, {"oid": "aa59e47ee67a276b3a415ab3cb761291fa2d1593", "committedDate": "2020-11-15 16:10:53 -0500", "message": "Only return non-zero quantities of parts, fixing #2231"}, {"oid": "24c2199bd396e7e059f3a3123c060fce92c04726", "committedDate": "2020-11-30 21:41:10 -0500", "message": "merge from upstream"}, {"oid": "6b3e4afa0664f35d2fc49a8e881b2fd7f22ea981", "committedDate": "2020-12-04 07:37:02 -0500", "message": "Use tested spare part consolidation logic"}, {"oid": "749469b9d6c8f7a36748d76c53dae5cc39365894", "committedDate": "2020-12-04 10:33:33 -0500", "message": "Fixup whitespace"}, {"oid": "cb8a407413b0629636afe9dc153a93699cbcb2da", "committedDate": "2020-12-04 12:21:25 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_476"}, {"oid": "7c0dd98fed591d24803031e815a39480fae3da18", "committedDate": "2020-12-04 12:24:21 -0500", "message": "Fixing merge conflitcs"}, {"oid": "d770e67e26237234553967696e546ef4cd5e6c4a", "committedDate": "2020-12-04 16:20:00 -0500", "message": "Moving ranks to their own folder"}, {"oid": "198ea362215a2605015f13d5baf7a6f9a27e2323", "committedDate": "2020-12-04 17:57:54 -0500", "message": "Moving ranks system names to the Rank XML file"}, {"oid": "c88ca2c1c698dfe730b493048b630ef6d20ce973", "committedDate": "2020-12-13 02:45:36 -0500", "message": "Restore AtBContract references in the ContractMarket #2141"}, {"oid": "dce8434c1c674caf8ba284f7e99a0da72a679958", "committedDate": "2020-12-14 18:14:37 -0500", "message": "Merge pull request #2263 from Windchild292/dev_Windchild_2200"}, {"oid": "02b7023e03f921ec06430d3a3bfbf3fd4d06f12d", "committedDate": "2020-12-16 17:45:57 -0500", "message": "Add the ability to swap out instances of static classes"}, {"oid": "6fe11ed3dea3b240bc594dd3153526f8fa1efcd1", "committedDate": "2020-12-22 17:15:50 -0500", "message": "merge from upstream"}, {"oid": "1080fdc3cc0abf4b10a986fa95243f6a883a2446", "committedDate": "2020-12-22 17:22:20 -0500", "message": "Do not display unknown armor types in the Parts In Use report, fixes #2298"}, {"oid": "26577933fe91fcc839a403192479257fcf64f842", "committedDate": "2020-12-25 17:30:07 -0500", "message": "PlayerColours, Colour Camo Standardization, and standardizing camo selector"}, {"oid": "b7106b6df15109159676c4d5c76d6b57d98d749c", "committedDate": "2020-12-25 17:31:02 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_1727"}, {"oid": "256150fa6780932824d092bb5e1cfc5160a82798", "committedDate": "2020-12-26 23:02:07 -0500", "message": "Fixing colour camouflage during colour set"}, {"oid": "05bda11a452176725c2023ddfda641c5b9d77ff2", "committedDate": "2020-12-30 11:28:06 -0500", "message": "Merge pull request #2294 from sixlettervariables/add-contract-market-tests"}, {"oid": "d96560342ac372c6159e2eb36a930d730575079e", "committedDate": "2020-12-31 10:50:32 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_1727"}, {"oid": "87fef495531a68093af610ebd4d170ad9fe58ed7", "committedDate": "2020-12-31 13:13:30 -0500", "message": "Applying requisite changes in other files"}, {"oid": "1077aa3ce47d85a2b52d46fe24d0a9d6500338b3", "committedDate": "2021-01-07 22:38:01 -0500", "message": "Implementing PersonnelRole Enum"}, {"oid": "7ee43f4d3196080806f016767d68fcc646806b95", "committedDate": "2021-01-08 13:14:46 -0500", "message": "Fixing merge conflicts"}, {"oid": "461f2e03e5c7b7e233ccb188ab3acbea84217051", "committedDate": "2021-01-09 12:33:02 -0500", "message": "Fixing merge conflicts"}, {"oid": "7715f2d53d7b785432c6d12abe076dd9fe734b63", "committedDate": "2021-01-11 00:08:57 -0500", "message": "Continuing camouflage AbstractIcon implementation"}, {"oid": "5c767fe20f909aed7ad9ee04af783fada0f01183", "committedDate": "2021-01-13 14:44:22 -0500", "message": "Fixing colour set and moving EntityImage to use proper camo type"}, {"oid": "13a860aed5400a5bf2ccb7ff55f12b6266ed1c86", "committedDate": "2021-01-14 15:40:05 -0500", "message": "Moving to fully use isConventionalInfantry"}, {"oid": "b395926d66b44f814eeccbcdf238377754b3497f", "committedDate": "2021-01-16 12:03:30 -0500", "message": "Swapping to using streams for missions"}, {"oid": "3c08e5b43761cd85a411618df940a669f43b0f74", "committedDate": "2021-01-16 12:03:41 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_MissionStatus"}, {"oid": "56075ee22d31cf6645cfbc078f6d0059a7c35a2e", "committedDate": "2021-01-16 13:07:08 -0500", "message": "Swapping to stream implementation"}, {"oid": "c56982c6b4c7590fa58659f5739adb6fb98c38b3", "committedDate": "2021-01-16 13:20:27 -0500", "message": "Applying changes from personal review"}, {"oid": "bac1ae00109056ac5aaf4ddf35370fb62657e4ed", "committedDate": "2021-01-16 13:40:07 -0500", "message": "Moving to only use getMissions when necessary"}, {"oid": "6a6ab7d22aae49fceae02409ae8f3121e890ccc1", "committedDate": "2021-01-16 13:57:34 -0500", "message": "Moving to isActiveOn"}, {"oid": "e0a11cd0c98c4fd665190822f79c498645f15426", "committedDate": "2021-01-31 13:08:13 -0700", "message": "Renaming a bunch of personnel options"}, {"oid": "a16944f0ca0f8452a8500b311c0d4c1afd4f69ad", "committedDate": "2021-01-31 13:14:59 -0700", "message": "Finishing the option renames"}, {"oid": "3055e76295deb7d552bc3972b69cc6e0fb1f8760", "committedDate": "2021-02-01 10:17:56 -0700", "message": "Starting to implement Automatic Company Generation"}, {"oid": "909ceb8a84cdd6031bf90c300d47b4d2da527643", "committedDate": "2021-02-01 21:19:14 -0700", "message": "Continuing to work on an AtB Company Generator"}, {"oid": "50d74c591ba7b25978e91a326e3d0ce53513c6cd", "committedDate": "2021-02-07 16:50:13 -0700", "message": "Continuing to implement company generation and its options"}, {"oid": "426328755b88eceb8119a0c91696b2e655a0c00e", "committedDate": "2021-02-08 12:27:32 -0700", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_PersonnelRoles"}, {"oid": "9cbf543bf750926dffd2ad77d82e8da2dc416a54", "committedDate": "2021-02-08 12:57:48 -0700", "message": "Bugfixes and some code cleanup from personal review"}, {"oid": "f00627349f7dfb1bfb29305b3377fa3fea2776c5", "committedDate": "2021-02-11 10:55:45 -0700", "message": "Adding Unit::isConventionalInfantry to ensure the entity is null checked"}, {"oid": "d5767fac16735b748124c2759fa7e02388f3e3e0", "committedDate": "2021-02-11 12:52:56 -0700", "message": "Applying changes from personal review"}, {"oid": "d69c0121a94474264821a25df299ecf667dfefdf", "committedDate": "2021-02-12 22:37:21 -0500", "message": "merge from upstream"}, {"oid": "17e3819e3ef169b2b2bf9114df56a23fc8f57f8b", "committedDate": "2021-02-19 09:26:24 -0500", "message": "Add logging and error trapping on daily unit maintenance #2427"}, {"oid": "3a7dc0d62fbf19186d1bbebeefc14a1838733180", "committedDate": "2021-02-19 09:32:56 -0500", "message": "Add error trapping to daily part maintenance, related to #2427"}, {"oid": "efa0010ac4de3087fd997cad083dfcc7307f1fae", "committedDate": "2021-02-19 10:53:09 -0700", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_PersonnelOptionsTab"}, {"oid": "1e74b62a2b90eefb8fd7a24d4c24faf08d1c6b3b", "committedDate": "2021-02-19 12:27:59 -0700", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_AtBCompanyGeneration"}, {"oid": "8f0b7abad948bde3df857ec022c1a3668076b29c", "committedDate": "2021-02-26 13:31:57 -0700", "message": "2442: Fixing Ranks Issues: Removing ancient migration and code, Using proper setter, and using the Ranks as the spinner"}, {"oid": "d52c982d8da547329729b0caea1fffab274e1b0c", "committedDate": "2021-02-27 10:23:14 -0500", "message": "Use MM's new UnitNameTracker for name collisions"}, {"oid": "3c5f987fa51fbe18454c55214f4d5d5f2b980a90", "committedDate": "2021-03-01 09:12:20 -0700", "message": "Fixing merge conflicts"}, {"oid": "b9f8896698477ed928a80443d0345d6397c58bb2", "committedDate": "2021-03-03 10:07:04 -0700", "message": "Fixing merge conflicts"}, {"oid": "1a9d000431b1f187634f7e6ef15161dd07678998", "committedDate": "2021-03-05 12:19:51 -0700", "message": "Continuing to work on the company generator"}, {"oid": "7f59899475e511f98ed9f64a1c10efab11737c43", "committedDate": "2021-03-05 21:50:52 -0500", "message": "merge from upstream"}, {"oid": "1a6354d39d3f6108e9e0e6f9e455c5a126627347", "committedDate": "2021-03-06 10:44:21 -0500", "message": "Address review comments"}, {"oid": "18c7330a3cc319d1dc3e55892a46c5c80539db9a", "committedDate": "2021-03-06 09:56:12 -0700", "message": "Fixing merge conflicts"}, {"oid": "b19752176bb0619f7ccda9f75d551b050521a106", "committedDate": "2021-03-08 23:25:41 -0500", "message": "merge from upstream"}, {"oid": "0bc70593b2b327657e4ff7709e320451adfadbe6", "committedDate": "2021-03-09 09:01:53 -0700", "message": "Fixing merge conflicts"}, {"oid": "9eca5ea7a7d0fe44db02d1ce091f5bf294cb156d", "committedDate": "2021-03-09 09:07:57 -0700", "message": "Fixing merge conflicts"}, {"oid": "baefb52c3074832565148fffae6d1363449fa8ae", "committedDate": "2021-03-09 09:19:18 -0700", "message": "Fixing merge conflicts"}, {"oid": "9499ad003bfeb58930187abad3334129be912b4e", "committedDate": "2021-03-09 09:23:18 -0700", "message": "Fixing merge conflicts"}, {"oid": "d0e34e3b80c163ff4ed03474a3adcd39d061c9ee", "committedDate": "2021-03-09 09:39:24 -0700", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_ShoppingList"}, {"oid": "8ee805b229c9373e653376a749274023ef13139b", "committedDate": "2021-03-09 11:54:07 -0500", "message": "Merge pull request #2373 from Windchild292/dev_Windchild_isConventionalInfantry"}, {"oid": "559cb006d560fd2099639e701e37538aded7f3a1", "committedDate": "2021-03-09 12:19:33 -0500", "message": "Merge pull request #2337 from Windchild292/dev_Windchild_ShoppingList"}, {"oid": "2bf37308c59c435acc52e0cf512ce9f74d1adc7e", "committedDate": "2021-03-09 10:26:52 -0700", "message": "Fixing merge conflicts"}, {"oid": "62726bf22f84cafc8872cbdebd5a8edce980e60a", "committedDate": "2021-03-09 10:27:33 -0700", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_CamouflageIcon"}, {"oid": "5082524cc2a32c4a8360cb845951a5e2b94300df", "committedDate": "2021-03-09 11:46:51 -0700", "message": "Fixing merge conflicts"}, {"oid": "c640fe5cc744f25a6fb292dd50220c8ecfe1c986", "committedDate": "2021-03-09 12:27:38 -0700", "message": "Fixing merge conflicts"}, {"oid": "64b151aab1a311e538c895526ba3f807216917c1", "committedDate": "2021-03-11 19:48:54 -0700", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_MissionStatus"}, {"oid": "98253ba4fbbd681dca588b7cb766e8439c19d880", "committedDate": "2021-03-11 19:59:41 -0700", "message": "Applying bugfixes from review"}, {"oid": "8d7d2a8df4596249f133919b569b56249b0068aa", "committedDate": "2021-03-12 14:28:19 -0700", "message": "Improving default contract name and sort"}, {"oid": "c13dedfdb7ce73cfdfe1d464e83765140336736c", "committedDate": "2021-03-12 14:59:22 -0700", "message": "2458: Adding Insufficient Astech warnings for MRMS and adding some more Astech/Medic pool functions"}, {"oid": "d2b11fb805eea82905ab0d8f846ca96bd69124e3", "committedDate": "2021-03-13 09:01:10 -0700", "message": "Fixing merge conflicts"}, {"oid": "902ebb67bf5dbe2e94cc32810992a2d1aa6c321c", "committedDate": "2021-03-13 09:02:31 -0700", "message": "Fixing merge conflicts"}, {"oid": "ec5843cb0d12174c7d5f83419268e5184d2d60f6", "committedDate": "2021-03-13 09:08:04 -0700", "message": "Fixing merge conflicts"}, {"oid": "1e0c0d260af35ecf86a9b8b9519c8cceee2e7028", "committedDate": "2021-03-13 11:47:11 -0700", "message": "Moving the unit market changes into an individual branch that contains some parts of the contract market changes"}, {"oid": "a5382b0386cb0354a4b3c870fdd8fee5e2f5330a", "committedDate": "2021-03-13 22:22:50 -0500", "message": "additional code review changes"}, {"oid": "fe6e045bb8acb2700cc38bd6a25ec62011977264", "committedDate": "2021-03-14 01:21:48 -0500", "message": "merge from upstream"}, {"oid": "48663cfaebb3a6a04f5680e7f755c532bd159779", "committedDate": "2021-03-14 10:58:03 -0600", "message": "Fixing merge conflicts"}, {"oid": "b8ccd096938dcbd22c56b4a93c87c78d770df189", "committedDate": "2021-03-16 10:03:47 -0600", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_AbstractUnitMarket"}, {"oid": "00db4b9f4381f0d6bcaadbbaa197f0be1c80d30b", "committedDate": "2021-03-17 12:29:14 -0400", "message": "Merge pull request #2445 from sixlettervariables/issue-2597-protect-duplicate-name-hash"}, {"oid": "a79e2e08ae5167e26dc37999b749296e47e179b9", "committedDate": "2021-03-17 12:27:27 -0600", "message": "Finishing the Unit Market Dialog"}, {"oid": "9d4975c56dc9ea4c18da5c7b146cfa794453f668", "committedDate": "2021-03-17 12:53:48 -0600", "message": "Swapping to EmptyUnitMarket instead of null"}, {"oid": "795721747293b0a0a0b4a5e12334158e9da303da", "committedDate": "2021-03-17 14:00:33 -0600", "message": "Fixing merge conflicts"}, {"oid": "aac2ced366aa376eb9fa78ab230f38e43d0c8362", "committedDate": "2021-03-17 21:16:52 -0400", "message": "code review changes"}, {"oid": "67d86a55c23420a76995a1457504c22f1b9cc48a", "committedDate": "2021-03-18 10:00:41 -0600", "message": "338: Base Free Time Sort"}, {"oid": "b634beb8d18a3ebafa13e3332256da259e3ef1c1", "committedDate": "2021-03-18 14:35:10 -0600", "message": "Finishing up working on abstracting out the Unit Market"}, {"oid": "8627de7d060ea44d3e33d04c259f8ab05f5bba9f", "committedDate": "2021-03-21 20:29:53 -0400", "message": "merge from upstream"}, {"oid": "04087a9bc33d0e3547e9c2dc68db496eac62b82b", "committedDate": "2021-03-21 20:10:23 -0600", "message": "Fixing merge conflicts"}, {"oid": "093eaeb8fbe362bb2d525d661180c433576aab9b", "committedDate": "2021-03-24 00:26:51 -0400", "message": "merge from upstream"}, {"oid": "2a2559d3ab5da713e7b8864ab0de458849dce6b6", "committedDate": "2021-03-24 09:29:25 -0600", "message": "Swapping over to using a three tiered rank setup"}, {"oid": "1e4e1993ec9f2278c7f326d28bcae5a7bff9c4a0", "committedDate": "2021-03-24 12:05:23 -0600", "message": "Heavy simplification of rank profession code"}, {"oid": "a57000e9696c4bf593f3215fa36543b2d13ed5ea", "committedDate": "2021-03-24 12:30:48 -0600", "message": "2196: Swapping to a standardized display wrapper class for rank display"}, {"oid": "b903aa7de36203afa40ede49922eb9e422fdcf43", "committedDate": "2021-03-24 13:07:46 -0600", "message": "1483: Adding Rank System import/export"}, {"oid": "e5b1d3a3fc6d825d722e496ad49832555fa65754", "committedDate": "2021-03-25 14:08:49 -0400", "message": "units deployed to StratCon tracks are ineligible for repairs"}, {"oid": "e7042962dd815937b9d91c1335d85ccec3647bf7", "committedDate": "2021-03-30 13:26:17 -0400", "message": "Merge pull request #2371 from Windchild292/dev_Windchild_CamouflageIcon"}, {"oid": "091d87a31e8cf5d1061ccf76a256bf990a0a623b", "committedDate": "2021-03-30 11:27:53 -0600", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_2449"}, {"oid": "37144650aef43bd5f3a8a14257376f2d6fe133f8", "committedDate": "2021-03-30 16:21:13 -0400", "message": "merge from upstream"}, {"oid": "5854d37bf8fbd63f741b9601ef373a16253a9b32", "committedDate": "2021-04-04 09:12:14 -0600", "message": "Adding the ability to create a custom rank system"}, {"oid": "db96404f216df48ce5321de053ce56015837d2cd", "committedDate": "2021-04-04 09:43:32 -0600", "message": "Renaming the campaign rank system methods to properly handle rank system changes"}, {"oid": "ae6bdf14123e6ac4ba92f5884b58b533b6cad2d3", "committedDate": "2021-04-04 10:12:54 -0600", "message": "Moving personnel rank changes to their proper location within person"}, {"oid": "19f0f0ce5d069f8f6f4f481cda04cdee3e05402a", "committedDate": "2021-04-04 11:59:18 -0600", "message": "Working on rank import/export"}, {"oid": "a34e385bf50ab28870531fe663d288b7b98b2697", "committedDate": "2021-04-06 10:54:55 -0600", "message": "Fixing and improving validation issues"}, {"oid": "3f3d7b237f61dd118eeb39087eb7fe9de6be03a0", "committedDate": "2021-04-06 11:53:59 -0600", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_GenealogyIdReference"}, {"oid": "80202c7f73397f3bc36193b0f3e2fce444bc4070", "committedDate": "2021-04-06 16:04:51 -0600", "message": "Fixing merge conflicts"}, {"oid": "ab655fb9abe6d2b9be4e20eba7e4c74b4b8e5c22", "committedDate": "2021-04-06 16:20:53 -0600", "message": "Fixing merge conflicts"}, {"oid": "729ef155ccdbaca3a1f23f1e57309d3b973851da", "committedDate": "2021-04-06 16:38:48 -0600", "message": "Fixing merge conflicts"}, {"oid": "a4c29e55f023d3416dd5e3f18a9d2061ab841fa1", "committedDate": "2021-04-06 17:56:58 -0600", "message": "Fixing merge conflicts"}, {"oid": "47bf0ed7fa9b09a4d76b634d900cceac953e17ed", "committedDate": "2021-04-06 19:54:46 -0600", "message": "Fixing merge conflicts"}, {"oid": "c2d264c23786de4ea703861360c3bcb46e79c5ac", "committedDate": "2021-04-07 00:13:59 -0400", "message": "merge from upstream"}, {"oid": "a5d70a5c672e494c7ec8be19e05d642b0259c9c4", "committedDate": "2021-04-07 14:24:17 -0600", "message": "Implementing multiple new procreation options and moving it to work based on a supplied date"}, {"oid": "18e6e46b095f8bbb1c623c60fd3aa177b7fe8682", "committedDate": "2021-04-09 09:22:39 -0600", "message": "Fixing merge conflicts"}, {"oid": "ae01b6e6d0fa55b766f741fa6fb35f727fff344b", "committedDate": "2021-04-12 09:45:59 -0600", "message": "Creating ScenarioStatus Enum and updating how scenarios are gotten"}, {"oid": "133e5865e2ee8dd5900b26dfe5f9aa0459a1a04c", "committedDate": "2021-04-14 11:31:25 -0400", "message": "multiple bugs with ignoring scenarios; ground pirats on air maps"}, {"oid": "3d8916caadfbc4085e509724142f929fc9d7f1d5", "committedDate": "2021-04-16 17:31:08 -0400", "message": "add text resources; remove campaign scenarios after ignoring in stratcon UI"}, {"oid": "2e00ea9a5b972b07d7446e75a06d3d493ac69426", "committedDate": "2021-04-16 21:14:35 -0400", "message": "code review changes"}, {"oid": "becffdc94075004fa3890bb36799389a48105c33", "committedDate": "2021-04-16 23:10:50 -0400", "message": "code review changes; data fix; stop nagging once user hits 'no' once"}, {"oid": "d71320d4f7a9ae41189a6b4651979960cb9dcc0f", "committedDate": "2021-04-20 21:55:21 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_2449"}, {"oid": "39603f48e1d441dd892227bef76e398c95cd4852", "committedDate": "2021-04-20 21:59:13 -0400", "message": "Fixing merge conflicts"}, {"oid": "3f7306636c42a999caf904b8d513f267243def42", "committedDate": "2021-04-20 22:01:54 -0400", "message": "Fixing merge conflicts"}, {"oid": "1c0e5821f637a666ef7632b5d821db62d76f624d", "committedDate": "2021-04-20 22:20:35 -0400", "message": "Fixing merge conflicts"}, {"oid": "9b9545c3b2e6890b9bef97677c61bb175cd5cc89", "committedDate": "2021-04-21 00:39:22 -0400", "message": "allow extra time for maintenance"}, {"oid": "de34b46d2f53c172612ebe5aa1abffe16b249f06", "committedDate": "2021-04-23 10:23:26 -0400", "message": "Bugfixing"}, {"oid": "b82fd9901fd0447da0211522ffc97ccae5c708ac", "committedDate": "2021-04-23 11:36:57 -0400", "message": "Fixing merge conflicts"}, {"oid": "bb7b0c375b9a2fd6baeced3e5e94501eb2e636ed", "committedDate": "2021-04-23 13:03:53 -0400", "message": "Moving into selectors folders"}, {"oid": "1ba164a58381a4be88ec479fee5841c1b8cdcf99", "committedDate": "2021-04-23 13:15:11 -0400", "message": "Making initial faction changes for constructors and ordering"}, {"oid": "fc7a0539b85c7af6a166ed9d779e7b723307b883", "committedDate": "2021-04-23 15:57:04 -0400", "message": "Making RandomOriginOptions, which will allow its use in multiple locations"}, {"oid": "1741bea67582d0555d094cbdd0fa977eec707bcc", "committedDate": "2021-04-24 22:10:27 -0400", "message": "fix scenario date/force resets"}, {"oid": "cebc3d0c231e54580eb29e4756f549b702b9ace1", "committedDate": "2021-04-27 14:41:42 -0400", "message": "Merge pull request #2462 from Windchild292/dev_Windchild_2460"}, {"oid": "b0c3badc393ff67ccba2cbe34623ca496c576782", "committedDate": "2021-04-27 14:42:27 -0400", "message": "Merge pull request #2352 from Windchild292/dev_Windchild_PersonnelRoles"}, {"oid": "138d08410b585fae3ba4af354d18d2b15d5d36c8", "committedDate": "2021-04-27 14:48:43 -0400", "message": "Fixing merge conflicts"}, {"oid": "5f426e90c201a24d339c0322897809938b79db5a", "committedDate": "2021-04-27 15:08:01 -0400", "message": "Fixing merge conflicts"}, {"oid": "7b4772ec38db2aa8d657d0a22ed7868d0c4f6117", "committedDate": "2021-04-27 15:45:52 -0400", "message": "Fixing merge conflicts"}, {"oid": "ce0b3b652feb9205fb4ed8cc3ae599bb5da9a308", "committedDate": "2021-04-27 15:47:48 -0400", "message": "Fixing merge conflicts"}, {"oid": "f7d684241f42639eb35d60508c39dbb00b0d9dbc", "committedDate": "2021-04-28 10:56:49 -0400", "message": "Fixing merge conflicts"}, {"oid": "8dd83b6c46f8f2454ba4d4accfe8176c58e398d7", "committedDate": "2021-04-29 23:22:27 -0400", "message": "Fixing merge conflicts"}, {"oid": "87033ef81af06d5a8c2af9d93a9b9057e49f0fde", "committedDate": "2021-05-01 17:09:56 -0400", "message": "Fixing merge conflicts"}, {"oid": "815f8fa858fdbf707019709a5d51524b5e61472a", "committedDate": "2021-05-04 14:12:54 -0400", "message": "Dependent Flag Swapover"}, {"oid": "66f6a880e1b615fb97de9757be649fc18c10f049", "committedDate": "2021-05-04 19:52:08 -0400", "message": "Implementing auto-hiring pool on new day"}, {"oid": "bbcc984be566d1587a598efc974fb1dbb399868a", "committedDate": "2021-05-05 18:25:22 -0400", "message": "Fixing merge conflicts"}, {"oid": "741d61daa6ac3570f7a3c569ee6e6dc87a902441", "committedDate": "2021-05-08 20:32:38 -0400", "message": "Fixing merge conflicts"}, {"oid": "227d6642ef68511eb067588bdf263aa2ad88f421", "committedDate": "2021-05-09 10:13:42 -0400", "message": "Creating the backend implementation for random procreation modules"}, {"oid": "e0faed52760616365379933d91f9343f58c61cb4", "committedDate": "2021-05-09 14:30:58 -0400", "message": "Renaming the directory from random procreation to procreation"}, {"oid": "7943361f04c7c5cc1753852ddba3a77d8259ab57", "committedDate": "2021-05-11 09:52:44 -0400", "message": "2607: Starting to work on redoing the salvage calculations"}, {"oid": "0539aea6159ca7cfbbb77a035ffb6c51d590d29f", "committedDate": "2021-05-11 10:40:37 -0400", "message": "2607: Properly calculating and paying for payment overages"}, {"oid": "33d43f4fe9a41925e3cc417f5d782c19f097ad63", "committedDate": "2021-05-15 06:53:31 -0400", "message": "Merge pull request #2583 from Windchild292/dev_Windchild_DependentFlagSwapover"}, {"oid": "55da24b03b3ecbc71f7d6ab739e1820f1814fda1", "committedDate": "2021-05-17 13:46:12 -0400", "message": "Creating AtB Contract Type and AtB Morale Level enums"}, {"oid": "470df7bcd395e57ffe3f3e59660f0e468cdcfaf1", "committedDate": "2021-05-18 01:31:38 -0400", "message": "fix multiple issues generating fixed objective scenarios"}, {"oid": "ffcd06cfa996127e858ea60096b58286f97a8a8a", "committedDate": "2021-05-19 09:33:39 -0400", "message": "Implementing save code swapover"}, {"oid": "c03f4deaeb4d632a5e2e614ae5204da255eea805", "committedDate": "2021-05-22 22:01:49 -0400", "message": "Merge pull request #2608 from Windchild292/dev_Windchild_2607"}, {"oid": "f9cf763bd4ff9a8e017e54464ad20989c2e772d3", "committedDate": "2021-05-23 23:33:39 -0400", "message": "Fixing merge conflicts"}, {"oid": "b5b8facc5de91af84188412dc8d1ec3df00e3ae6", "committedDate": "2021-05-24 13:55:12 -0400", "message": "Fixing merge conflicts"}, {"oid": "1b33879affd0101e7870d5696137e354b636d342", "committedDate": "2021-05-24 13:57:36 -0400", "message": "Fixing merge conflicts"}, {"oid": "f4c2aadcbf8a9e3bc45db1e7227160e36f43d47a", "committedDate": "2021-05-24 14:00:22 -0400", "message": "Merge branch 'master' into dev_Windchild_CamouflageRework"}, {"oid": "fe024592b6ac70b9cf1a9cd546a54ebc8bb02363", "committedDate": "2021-05-24 17:16:21 -0400", "message": "2625: Properly Clear Tech Units on Person removal/retirement"}, {"oid": "530decc0b587e53087c8cacbe31aeba13dd82f41", "committedDate": "2021-05-29 11:32:44 -0400", "message": "Fixing merge conflicts"}, {"oid": "156500be4e08594aeaf3efa424938f295b2ed86e", "committedDate": "2021-05-29 16:04:26 -0400", "message": "Phase one of Campaign Preset rework"}, {"oid": "34d76d4e22674638bd3ce602a713238ff5c203b8", "committedDate": "2021-05-30 14:33:28 -0400", "message": "Phase Two: finishing internal work and starting on GUI implementation"}, {"oid": "12f96f2ab3335b805508c31bbbc08a9bcf5491d7", "committedDate": "2021-05-30 21:57:28 -0400", "message": "Fixing merge conflicts"}, {"oid": "b109f86e86e8aba9c5b4aa279919f2d6547979b9", "committedDate": "2021-05-31 10:38:11 -0400", "message": "Fixing merge conflicts"}, {"oid": "65a009b4cf6307795c815aacdb82feb8fba0a01d", "committedDate": "2021-05-31 17:00:21 -0400", "message": "Fixing merge conflicts"}, {"oid": "14d482cda0564e28b6c5ea95e20725e2200f51ff", "committedDate": "2021-05-31 17:57:20 -0400", "message": "Merge branch 'master' into maintenance_extra_time"}, {"oid": "00a30fe49ee531dda71cb88bacc2f56dbe0a5b9e", "committedDate": "2021-05-31 18:05:23 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_2654"}, {"oid": "fa54f8e9f392dc2f02cb5b1b5bc9e8c428a88e61", "committedDate": "2021-06-02 12:29:42 -0400", "message": "Creating a base ignorable nag dialog for MekHQ and implementing it in all current new day nags"}, {"oid": "2509a0841acae929e7340ae5fe4d01f7bf437d40", "committedDate": "2021-06-02 16:20:48 -0400", "message": "Fixing merge conflicts"}, {"oid": "6b416ee90791ecb016edf0ae5b5c0e16ebdd4760", "committedDate": "2021-06-09 16:05:55 -0400", "message": "Fixing merge conflicts"}, {"oid": "d36c47d7aaa8978e4d523b2031d299babd654e2a", "committedDate": "2021-06-09 16:08:35 -0400", "message": "Fixing merge conflicts"}, {"oid": "7fe956938b8b76f05f395b681f8bd5f4bd02d25a", "committedDate": "2021-06-09 21:27:13 -0400", "message": "Fixing merge conflicts"}, {"oid": "055b02a76318d18eed5ad27a93333893cf8b74db", "committedDate": "2021-06-09 22:30:38 -0400", "message": "Fixing merge conflicts"}, {"oid": "e8c2b13279e2b5d226f4de5b350e2d12ff468577", "committedDate": "2021-06-11 00:26:36 -0400", "message": "Fixing merge conflicts"}, {"oid": "d4b45a4c9543d0786feacc4344d364fee2997970", "committedDate": "2021-06-11 12:46:28 -0400", "message": "Fixing merge conflicts"}, {"oid": "2560bdda30482870c73884470b53cb579bcaa47a", "committedDate": "2021-06-14 13:25:17 -0400", "message": "Force icon implementation migration from outdated previous branch"}, {"oid": "6fd836ff4e8a233aa293e2a3fc08cd3316f64b66", "committedDate": "2021-06-14 14:23:04 -0400", "message": "Adding UnitIcon, GM Tools implementation, and baseline for export"}, {"oid": "eaf4453f2f1f40707d9594de5dd6aa83d594b776", "committedDate": "2021-06-14 18:04:32 -0400", "message": "Applying personal code review changes and starting unit icon code"}, {"oid": "e1a7f7166de5f36fa0c44b7151478c944e6a4b89", "committedDate": "2021-06-21 13:16:19 -0400", "message": "Apply overtime to the last chunk worked as well #2679"}, {"oid": "9c62597332ac0ba24004132e537ba0cf049741e3", "committedDate": "2021-07-01 12:35:33 -0400", "message": "Fixing merge conflicts"}, {"oid": "809c6366e1ce1dea3f4b2fa21841aab6639992a4", "committedDate": "2021-07-10 11:47:52 -0400", "message": "Finishing the portrait swapover"}, {"oid": "0ddba79849d418947ba1ce309a4c673ac78292d4", "committedDate": "2021-07-10 20:58:49 -0400", "message": "Bugfixing, phase 1"}, {"oid": "10a9609cabffc8f5e7068b6c0c33c0f65f796508", "committedDate": "2021-07-12 18:39:55 -0400", "message": "Fixing unit tests"}, {"oid": "06664ff8286a85fe165e5f92aaaf22326e692c90", "committedDate": "2021-07-15 10:22:09 -0400", "message": "Merge branch 'master' into dev_Windchild_476"}, {"oid": "e0e383e2453514ee7c9c7abc9214a2a1a869a068", "committedDate": "2021-07-15 10:34:25 -0400", "message": "Fixing merge conflicts"}, {"oid": "7211585d4a34159d5c80c9ea30fa44bc2746c1b4", "committedDate": "2021-07-17 20:03:19 -0400", "message": "Fixing a few potential divide by zero issues"}, {"oid": "a3eb7d3dfe3477e32117d175e717023f539795eb", "committedDate": "2021-07-17 20:11:58 -0400", "message": "Further cleanups from personal review"}, {"oid": "21a75e1c9ca5516bb7394f30fa2c0b4d9a68b9ad", "committedDate": "2021-07-17 20:27:51 -0400", "message": "Further cleanups, and adding an astech team size constant"}, {"oid": "35bffb052c1b608df03fb41f6548a3e9f847cca6", "committedDate": "2021-07-18 10:43:10 -0400", "message": "Fixing NPE warning and cleaning up the if statement"}, {"oid": "a7670828c4762e3852dbd248b348c2dd371b5018", "committedDate": "2021-07-18 12:12:40 -0400", "message": "Fixing possible confusion of local and field warnings"}, {"oid": "951b55f7a5fb6036e67897e709cd6a0dbbb45b39", "committedDate": "2021-07-18 12:33:08 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_Procreation"}, {"oid": "61cc2fd1669914bef276e018cb7562be422b1f7c", "committedDate": "2021-07-18 14:30:17 -0400", "message": "Removing Deprecated Usages: Logger swapover"}, {"oid": "542307adf490f10930d9470ff64879b4b7ee6b0a", "committedDate": "2021-07-20 10:11:31 -0400", "message": "Moving crew null check and fallback logic into Campaign::getShorthandedModForCrews"}, {"oid": "f6e661dba426e63388e9b57d224a7090006e3203", "committedDate": "2021-07-20 10:18:55 -0400", "message": "Merge pull request #2751 from Windchild292/dev_Windchild_AstechDivideByZero"}, {"oid": "f3bd90fefb0af89a7177be76f70aeed033a7b258", "committedDate": "2021-07-20 10:20:25 -0400", "message": "Fixing merge conflicts"}, {"oid": "424407a51980930adead83bbfa918bf2b0d8a441", "committedDate": "2021-07-20 21:09:32 -0400", "message": "Fixing merge conflicts"}, {"oid": "497f1345950b39b1eb1e2d1389b63a7fcd5eef14", "committedDate": "2021-07-20 21:26:53 -0400", "message": "Fixing merge conflicts"}, {"oid": "bc21146f53fc23bdfd1f5f4273f07b588b0904e2", "committedDate": "2021-07-24 10:15:39 -0400", "message": "Fixing merge conflicts"}, {"oid": "a5e9303ebeafcd74e0348b8b2f767c5f8e12c8cb", "committedDate": "2021-07-26 12:32:33 -0400", "message": "2558: Swapping removePerson to be object instead of id based"}, {"oid": "0a76a9693556237907de0f6e2a5a08f48dcfd3be", "committedDate": "2021-07-26 12:38:50 -0400", "message": "2558: Custom message for when dependants leave"}, {"oid": "1babc7de6f9de3b1f517061f1c249c3339f13e10", "committedDate": "2021-07-26 12:54:49 -0400", "message": "2558: Adding unique dependent add message"}, {"oid": "b214bdb7975aabd1cdc8d39cb9f1fdea3541b58d", "committedDate": "2021-07-26 15:13:02 -0400", "message": "Fixing merge conflicts"}, {"oid": "d86c1c8c70ae0bcc2a9d6dd09e7fe963745b5e37", "committedDate": "2021-07-26 22:20:42 -0400", "message": "Merge pull request #2478 from Windchild292/dev_Windchild_AbstractUnitMarket"}, {"oid": "d83ce12b4886460ba57e84afbf15b20e30fab693", "committedDate": "2021-07-28 15:48:34 -0400", "message": "Isolating RATs into the RAT Tab"}, {"oid": "3d303b442ab8d664c56fd8709d970f86c7eed83f", "committedDate": "2021-07-30 10:40:29 -0400", "message": "Loan code cleanup and refactoring"}, {"oid": "56910a666af8115ec4e364b98a16fc009c1a65b5", "committedDate": "2021-07-30 11:11:21 -0400", "message": "Fixing merge conflicts"}, {"oid": "ec7e4bc4aeed27a5b835b44d295642228bcc16c3", "committedDate": "2021-08-10 12:37:47 -0400", "message": "Transaction Type Enum"}, {"oid": "497976540984392426f984acd40477886555e06d", "committedDate": "2021-08-10 15:25:55 -0400", "message": "Fixing merge conflicts"}, {"oid": "1faa42c3d120f62fa60bebc946c56cae3ba293f8", "committedDate": "2021-08-10 15:47:16 -0400", "message": "Doing some personal review cleanup"}, {"oid": "be94a7ab35307e2b345d967cbd0163417ea9802d", "committedDate": "2021-08-12 21:28:51 -0400", "message": "bulletproofing for a couple of individual unit actions"}, {"oid": "01f8aa5c3d90cd2d8b553c5c8c73a336af524e8b", "committedDate": "2021-08-13 22:07:09 -0400", "message": "2798: Adding total XP earnings tracking"}, {"oid": "771c3107183e31fa9da9b2e417a6fc0d0b673a48", "committedDate": "2021-08-14 00:07:09 -0400", "message": "274: Moving Era definitions to a file"}, {"oid": "795d3aba4875a600dd0a6ec91a10cb7e90814c6c", "committedDate": "2021-08-18 12:48:20 -0400", "message": "Removing Person's Campaign save and switching to full pass-by-reference for Campaign"}, {"oid": "4e80bdad1f20ebfb53cfe559ade8975594f3d362", "committedDate": "2021-08-21 12:12:11 -0400", "message": "2754: Properly clearing Narc and iNarc Flags during scenario resolution"}, {"oid": "ed447da30212105694957e35687f1bfedd6b56b0", "committedDate": "2021-08-24 13:11:20 -0400", "message": "Merge pull request #2805 from Windchild292/dev_Windchild_274"}, {"oid": "7120d3b0aa69ebd282e855a4b2a47bda4697ba78", "committedDate": "2021-08-24 13:14:09 -0400", "message": "Merge pull request #2793 from Windchild292/dev_Windchild_TransactionType"}, {"oid": "9e7480b600f9290c00f5f082dd91201999d12f42", "committedDate": "2021-08-24 13:14:19 -0400", "message": "Merge pull request #2804 from Windchild292/dev_Windchild_2798"}, {"oid": "70aa4b94439c59d6e5de9d6191a3c0a02365e644", "committedDate": "2021-08-24 13:39:42 -0400", "message": "Fixing merge conflicts"}, {"oid": "0e72a8bc212f26b8d9b7bb789b0c1f84f1426c78", "committedDate": "2021-08-24 13:42:42 -0400", "message": "Fixing merge conflicts"}, {"oid": "3a01897bb20c8be27823164f09aca9af1aa3360d", "committedDate": "2021-08-24 13:53:59 -0400", "message": "Fixing merge conflicts"}, {"oid": "bacc8f3e733e0cd4cc0fa629ced5d3b5079abc76", "committedDate": "2021-08-24 17:23:41 -0400", "message": "Fixing merge conflicts"}, {"oid": "e273d7035001140a977ebe3299d17602ef52d498", "committedDate": "2021-08-28 17:37:23 -0400", "message": "Fixing merge conflicts"}, {"oid": "59fca0be576b219f25123793a2118255168d1c03", "committedDate": "2021-08-29 11:15:40 -0400", "message": "Modularized Marriage"}, {"oid": "6a48665a09b5cfd3b2309975077163fae687c39e", "committedDate": "2021-08-29 14:41:32 -0400", "message": "Adding creation dialog and bugfixing"}, {"oid": "0a89d7421946ba75d7d926af996b27e9e994a911", "committedDate": "2021-08-31 14:50:25 -0400", "message": "Fixing merge conflicts"}, {"oid": "0f4e17188d8360baf639cbc66dd29da85336be81", "committedDate": "2021-08-31 15:28:05 -0400", "message": "Applying changes from personal review"}, {"oid": "bd9dded105bfbfdf64e7b10e2059f2633326c113", "committedDate": "2021-08-31 15:39:04 -0400", "message": "Swapping to weighted double map"}, {"oid": "5eaf88579bd60bfee3c39a936a9d647a4eb1de4f", "committedDate": "2021-08-31 16:45:21 -0400", "message": "Reworking to use random origin options instead of the internally stored values"}, {"oid": "bbccfa2dcef0be4fbb07cd3af6cdbd15d7ced036", "committedDate": "2021-08-31 18:09:33 -0400", "message": "Missed two cases"}, {"oid": "7acc107b13f019250d4c17ee0b034a3aa263f56b", "committedDate": "2021-09-22 13:23:13 -0400", "message": "Removing MekHQ's version by swapping to a standardized suite version"}, {"oid": "f0a07bfbd15d93ff86dda49a32e0c489ca590a8c", "committedDate": "2021-09-22 17:45:34 -0400", "message": "Fixing merge conflicts"}, {"oid": "673baa71af916391d268ede436174881a85b7340", "committedDate": "2021-09-23 20:01:05 -0400", "message": "Adding the ability to automatically have the Operational Status indicator be determined on a new day"}, {"oid": "18f49cd8c6ba3721e84dce0b606a346b242cb49c", "committedDate": "2021-09-25 10:56:33 -0400", "message": "Moving training XP assignment to AtB new day processing"}, {"oid": "932423c6da7f04b29d61df88c014f5e432356eae", "committedDate": "2021-09-25 17:10:11 -0400", "message": "Standardizing and simplifying Campaign::getTargetForAcquisitioncalls"}, {"oid": "29c1cae15f03b025f7c6f4a4acdee0a86082eae8", "committedDate": "2021-09-25 17:12:00 -0400", "message": "2567: AtB Part Procurement uses proper campaign option"}, {"oid": "e1c6be34a128676429850de67af7a3c3e1d31c48", "committedDate": "2021-09-25 17:47:32 -0400", "message": "Fixing the active checks and removing the AtB casts"}, {"oid": "0527903721699cf7e73e7000ebc0db049c96529d", "committedDate": "2021-09-25 17:48:18 -0400", "message": "Removing testing logging"}, {"oid": "6dc414e21f3f3a8bf95c7059b83c0c34ced93e61", "committedDate": "2021-09-28 22:10:41 -0400", "message": "Merge pull request #2888 from Windchild292/dev_Windchild_2567"}, {"oid": "1065b3bc8de9084f48208d2ca865ce58ac8b3c41", "committedDate": "2021-09-28 22:29:59 -0400", "message": "Fixing merge conflicts"}, {"oid": "e55c3ca107c0d4a68d05b67ffa95825ee33af974", "committedDate": "2021-09-28 22:33:50 -0400", "message": "Fixing merge conflicts"}, {"oid": "6e5bfd3fe778c2db9847358b2bde358a61106707", "committedDate": "2021-09-28 22:38:51 -0400", "message": "Fixing merge conflicts"}, {"oid": "4fdc8e401f17fac7995037b1852f1ce2353c8e3f", "committedDate": "2021-09-28 22:48:35 -0400", "message": "Fixing merge conflicts"}, {"oid": "6f6fbddc710af1a588c433c779edd75f638a3c9d", "committedDate": "2021-10-01 10:01:00 -0400", "message": "Merge pull request #2880 from Windchild292/dev_Windchild_Version"}, {"oid": "901e499a75807e3ed64c36d0fcb8e1b024787c95", "committedDate": "2021-10-01 22:06:56 -0400", "message": "Fixing merge conflicts"}, {"oid": "b69522079e9a04b394864bbc4e43ff4c4e125cca", "committedDate": "2021-10-01 22:17:46 -0400", "message": "Fixing merge conflicts"}, {"oid": "84837c3610f8109aeb1985357178de229560de80", "committedDate": "2021-10-01 22:50:02 -0400", "message": "Fixing merge conflicts"}, {"oid": "4971437339838aa89b83785c6e9572074c95d245", "committedDate": "2021-10-02 23:21:37 -0400", "message": "Fixing merge conflicts"}, {"oid": "ed006b48eaf1c0580c2480f4f0000a3c1aed8361", "committedDate": "2021-10-10 00:10:05 -0400", "message": "Adding prisoner and clanner options for procreation"}, {"oid": "54e588d2cafddcab2f585c8ed5d6ee3c829d155f", "committedDate": "2021-10-10 01:00:00 -0400", "message": "Fixing merge conflicts"}, {"oid": "f211d8a677daa66c3a88f444de02a072ea5ab8a0", "committedDate": "2021-10-11 09:36:37 -0400", "message": "Fixing merge conflicts"}, {"oid": "3ee602c2e85defa1c3b05d08d609340d4b194883", "committedDate": "2021-10-11 09:37:52 -0400", "message": "Merge branch 'master' into dev_Windchild_2654"}, {"oid": "a30ac65fc45c76f1c1f6df0d70fa356aa41ef438", "committedDate": "2021-10-11 09:38:33 -0400", "message": "Merge branch 'master' into dev_Windchild_PersonnelRandomization"}, {"oid": "6f2f688a386d187426b7c92d4dd391c239d1ad70", "committedDate": "2021-10-11 09:43:54 -0400", "message": "Fixing merge conflicts"}, {"oid": "125e3093d92e248b4e50bc9131ff8fdeb35c6787", "committedDate": "2021-10-11 10:22:27 -0400", "message": "Fixing merge conflicts"}, {"oid": "f8e040a424e1e8d8f886b334ce6fe78c1c697e21", "committedDate": "2021-10-11 12:17:56 -0400", "message": "Standardizing canMarry and adding clanner/prisoner options"}, {"oid": "358b2e9bb76ee69f0aef232dc656af54a6b78e75", "committedDate": "2021-10-11 16:26:24 -0400", "message": "Creating a divorce module, with a daily percentage-based random divorce setup"}, {"oid": "8ecba07dd7693346338cbae98b207e87e1cfb844", "committedDate": "2021-10-14 20:08:46 -0400", "message": "Fixing merge conflicts"}, {"oid": "accf7255b1c83499aa1f79f5074b2bc44e3619f8", "committedDate": "2021-10-17 18:16:46 -0400", "message": "Fixing merge conflicts"}, {"oid": "4e4ae81eb8a7a923cdf8688c645023ce047c7d99", "committedDate": "2021-10-17 18:53:40 -0400", "message": "Fixing merge conflicts"}, {"oid": "08ec6ef40e59afa4cba88228bc29dba9745de098", "committedDate": "2021-10-18 15:52:01 -0400", "message": "Fixing merge conflicts"}, {"oid": "c67d7074f17378d88774a553e3fca273bc047705", "committedDate": "2021-10-18 15:52:40 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_PersonCampaign"}, {"oid": "1a7109d4439d3900ff897d0c9ba7091e88960ead", "committedDate": "2021-10-18 16:06:05 -0400", "message": "Fixing merge conflicts"}, {"oid": "2d589706bc9112203a6043adf8d7aed7d0f22301", "committedDate": "2021-10-18 16:07:21 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_ExpandedDeathStatus"}, {"oid": "84e2f57820e6fac4c9604e8fdf4c370849b21914", "committedDate": "2021-10-18 17:26:22 -0400", "message": "Fixing merge conflicts"}, {"oid": "033d776c732e66ad776357bee1afe597f5e77b20", "committedDate": "2021-10-30 15:59:59 -0400", "message": "Fixing merge conflicts"}, {"oid": "4e45f1a0a0bb1a3a900ecde01c8feab5a6e48329", "committedDate": "2021-11-01 17:31:14 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_AtBCompanyGeneration"}, {"oid": "258f3a3b0b352aa70b42b8c2034ebd6ab90d96ca", "committedDate": "2021-11-01 18:20:49 -0400", "message": "Fixing merge conflicts"}, {"oid": "7eea9a399d3d7400b1f2b94f6d772ad5416a0645", "committedDate": "2021-11-01 21:48:44 -0400", "message": "Fixing merge conflicts"}, {"oid": "3e4bca7cdb006005bd034f9621872250d0e96dbb", "committedDate": "2021-11-01 21:52:24 -0400", "message": "fixing merge conflicts"}, {"oid": "ab6c1c01bfb4498a16c3b9f69c18c4903900de83", "committedDate": "2021-11-01 22:00:44 -0400", "message": "Fixing merge conflicts"}, {"oid": "1b1b0f68f52f9d821ddc10f663a44fe6d72462cd", "committedDate": "2021-11-01 22:03:27 -0400", "message": "Fixing merge conflicts"}, {"oid": "f1ce41fa694124c762338f78fb45a139926db77c", "committedDate": "2021-11-01 22:20:22 -0400", "message": "Fixing merge conflicts"}, {"oid": "01163b1f4fae088ba39a2f1c1145d5653f71b9e8", "committedDate": "2021-11-01 22:22:46 -0400", "message": "Fixing merge conflicts"}, {"oid": "21600c478569436ab215402bbca4bbbeced841a8", "committedDate": "2021-11-03 20:59:54 -0400", "message": "Adding localization to all MekHQ resource maps"}, {"oid": "1a5ba2fa871c8629e951d371c2ee96cc29fa8f93", "committedDate": "2021-11-07 13:49:58 -0500", "message": "Fixing merge conflicts"}, {"oid": "a851f6c71e5a1f825a840c64be2bae6da2a77eaf", "committedDate": "2021-11-07 14:05:08 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_PersonnelRandomization"}, {"oid": "65eb27ddf74244265359db14e66c097eb2299df0", "committedDate": "2021-11-07 14:50:33 -0500", "message": "Fixing merge conflicts"}, {"oid": "1b57359b3037938ef8291d96de3449013c82b9a4", "committedDate": "2021-11-09 09:23:24 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_ForceIconRework"}, {"oid": "7e997be9838621bdc8bbecbcdbc908a7580060ed", "committedDate": "2021-11-12 21:17:13 -0500", "message": "Removing unused tech functionality"}, {"oid": "dbfb302ab8e895c2e37a41f10415f634d1039c4c", "committedDate": "2021-11-21 18:45:43 -0500", "message": "Expanding Finances newDay"}, {"oid": "b6ffe21c8b07b35f599a2f6bd11da05d7961af0d", "committedDate": "2021-11-23 10:10:34 -0500", "message": "Merge pull request #2028 from Windchild292/dev_Windchild_476"}, {"oid": "e51f331c5e7b430e3f560fee9ad58995fb944704", "committedDate": "2021-11-23 17:35:05 -0500", "message": "2962: AtB Campaigns Now Properly Load with Automatic or Tech Acquisition Skills"}, {"oid": "2f445541d15fd465279057131bf48ef28d9bd162", "committedDate": "2021-11-23 18:55:05 -0500", "message": "Fixing merge conflicts"}, {"oid": "c06560e49182859791bab98148ba76507f26612b", "committedDate": "2021-11-27 14:04:02 -0500", "message": "Merge pull request #2966 from Windchild292/dev_Windchild_2962"}, {"oid": "69f79e10f44976d90e36ca3acb5256b6dfc91548", "committedDate": "2021-11-27 18:49:28 -0500", "message": "Implementing the retirement and dependent stopgap options and option updates"}, {"oid": "135cb6d188296ed5db33602f9d65eacbedfb2fa3", "committedDate": "2021-11-27 22:07:45 -0500", "message": "Finishing dependent options and starting on retirement setup"}, {"oid": "a831b4695fd5ea8b1679db9068c85d9ac235f5e0", "committedDate": "2021-11-27 22:57:22 -0500", "message": "Starting to implement the new options"}, {"oid": "bfaed6eccd3257e67b05ad33dadd14cfd98ce560", "committedDate": "2021-12-02 18:05:59 -0500", "message": "Fixing merge conflicts"}, {"oid": "a31998dda25a2856241c10aba4f25a3e8975fc28", "committedDate": "2021-12-02 19:47:30 -0500", "message": "Fixing merge conflicts"}, {"oid": "8ae7fffc1b4afde219beaf122edf562b69a810d4", "committedDate": "2021-12-02 19:49:14 -0500", "message": "Fixing merge conflicts"}, {"oid": "c76c94e6cd4abe6e9f39bb57f5376dcfcf8c29ca", "committedDate": "2021-12-02 19:59:15 -0500", "message": "Fixing merge conflicts"}, {"oid": "8ad7114a3a34794b2d77e3d201f63d2c646a9361", "committedDate": "2021-12-04 14:45:10 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_RetirementDependentStopgaps"}, {"oid": "71c75c8296ecc0c857b75d51ff1c7984efa7e9aa", "committedDate": "2021-12-04 15:03:37 -0500", "message": "Finishing the internal code for the retirement and dependent stopgaps"}, {"oid": "4fb12af6ec7c26ac06d9a498016211a5e3889240", "committedDate": "2021-12-04 15:13:25 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_AssetTerms"}, {"oid": "ea8d42d1c280d499d207c0da43feb77a06b6dcba", "committedDate": "2021-12-04 16:10:22 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_MHQLocalization"}, {"oid": "97af694c5485ad1dbf5900228d3b5e6de405cb02", "committedDate": "2021-12-11 17:07:11 -0500", "message": "MekHQ Log4j 2 Implementation"}, {"oid": "122363fd9f8d850c11781b0ed50335433bcf418b", "committedDate": "2021-12-17 20:08:30 -0500", "message": "Fixing merge conflicts"}, {"oid": "b781d1a8406d5cfec346343463484ac519d1ee9a", "committedDate": "2021-12-20 13:20:34 -0500", "message": "Fixing merge conflicts"}, {"oid": "1bc3ac4e6576a7fa06103828a729d010f6a7b3ef", "committedDate": "2021-12-20 15:37:16 -0500", "message": "Actually print the stacktrace for individual exceptions"}, {"oid": "6e868f9400798d8cc8b61055b96de07531af1f34", "committedDate": "2021-12-20 16:21:24 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_RetirementDependentStopgaps"}, {"oid": "056f0d1e618651857b043280dbe226e80eb91d7a", "committedDate": "2021-12-20 16:27:18 -0500", "message": "Fixing merge conflicts"}, {"oid": "0e5e7675cc3b0606c97f5060a8fd53a69a90641e", "committedDate": "2021-12-20 16:31:40 -0500", "message": "Fixing merge conflicts"}, {"oid": "fb5e5a836a6100119706df72ee695325d77cf5af", "committedDate": "2021-12-20 16:36:02 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_PersonnelRandomization"}, {"oid": "30d7086d1389ed93b333b5eb614a4777498bd826", "committedDate": "2021-12-20 16:41:54 -0500", "message": "Fixing merge conflicts"}, {"oid": "c28b63e7005b99a3f80a9cb73b0255b8a2402db2", "committedDate": "2021-12-20 16:45:19 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_PersonCampaign"}, {"oid": "89a7c65022eabe2af8f5efaabaf9296aa79bde74", "committedDate": "2021-12-21 15:01:54 -0500", "message": "Fixing merge conflicts"}, {"oid": "23519608cf466cb86aef259568ba2aa8ddeb098a", "committedDate": "2021-12-21 16:00:33 -0500", "message": "Fixing merge conflicts"}, {"oid": "bbbe2057261145f9f51c2ac129b4cca3bcd2ccf6", "committedDate": "2021-12-21 16:04:48 -0500", "message": "Fixing merge conflicts"}, {"oid": "b65b9f1efdb52692da51596d934b6360533b2bf7", "committedDate": "2021-12-21 16:23:03 -0500", "message": "Fixing merge conflicts"}, {"oid": "a253bfba5d4bc811ccd0c6c17e659dff178fbbb0", "committedDate": "2021-12-21 16:30:49 -0500", "message": "Fixing merge conflicts"}, {"oid": "0caff4e79e691213a2621323b94dfadfa73c9060", "committedDate": "2021-12-22 08:16:56 -0500", "message": "Fixing merge conflicts"}, {"oid": "a44cee38dbe9808a000178e575eb90d60a401175", "committedDate": "2021-12-23 12:26:57 -0500", "message": "Merge pull request #3015 from MegaMek/dev_Windchild_3326"}, {"oid": "ea6a179e03d1519afc3236abe50978edc43fc3d8", "committedDate": "2021-12-23 12:32:38 -0500", "message": "Merge pull request #2812 from Windchild292/dev_Windchild_PersonCampaign"}, {"oid": "d88588cf01f272577d96e1ff2a27c7286def7db9", "committedDate": "2021-12-23 21:04:47 -0500", "message": "Fixing merge conflicts"}, {"oid": "94ca7dff3bd09ef2fbb82e5d3ce0a5dccab335a8", "committedDate": "2021-12-28 18:08:30 -0500", "message": "Fixing merge conflicts"}, {"oid": "5089ba272b3ca25ab52ca4fcc1bef3766377f2ec", "committedDate": "2022-01-08 13:22:56 -0500", "message": "Fixing merge conflicts"}, {"oid": "375a9524c6382f5214c980bf8ad8b07a22f75120", "committedDate": "2022-01-08 13:28:11 -0500", "message": "Fixing merge conflicts"}, {"oid": "0e0aa7780df25016999f813dc36110599ee1b380", "committedDate": "2022-01-08 13:40:54 -0500", "message": "Fixing merge conflicts, round 2"}, {"oid": "5cc8ac688c67e1e1817c0cbb4a78eaf7dd0a477b", "committedDate": "2022-01-08 14:03:23 -0500", "message": "Fixing merge conflicts"}, {"oid": "eb7c6c828694fb624746168dbb4c35b1289f6e11", "committedDate": "2022-01-08 17:22:10 -0500", "message": "Fixing merge conflicts"}, {"oid": "dcb18ce61944010cc634325d3f46ccaf907758be", "committedDate": "2022-01-08 18:01:56 -0500", "message": "Cleaning up a bit of person creation"}, {"oid": "4d86865e1498a1312a21b91323c33d18f33a8dc9", "committedDate": "2022-01-09 11:12:58 -0500", "message": "Adding missing nullable tag and fixing missing null handling for faction selector"}, {"oid": "6023dd377efcb7802f6c905de61231ec50fee675", "committedDate": "2022-01-09 11:48:57 -0500", "message": "Missed that a null faction is fine for planet generation"}, {"oid": "4bddfb6f0d3906ed96120594d84d4e476e42d971", "committedDate": "2022-01-19 17:09:56 -0500", "message": "Tearing out MekHQ/src/mekhq/MekHqXmlSerializable.java"}, {"oid": "cc823a078ddc1a8924d1e2c02e93375a6b27d327", "committedDate": "2022-01-19 19:19:33 -0500", "message": "Removing all serialVersionUID uses in MekHQ"}, {"oid": "c9ac45226f5852f8bb76af479c9d962105bbbed7", "committedDate": "2022-01-19 20:02:33 -0500", "message": "Mass spacing fixes"}, {"oid": "be1cfbd484c6adc1c8f66578c5bfe94b39047b3c", "committedDate": "2022-01-20 09:59:55 -0500", "message": "Applying changes from initial personal review"}, {"oid": "2c71e119c210a9c95690eae19a0cdab5beb69bd6", "committedDate": "2022-01-20 10:30:23 -0500", "message": "Updating everything using final PrintWriter so that they're up to date, so I have a nice way to track what's updated and what is not"}, {"oid": "bc2c2966614f17d153b03c3087b46c1a4b44b969", "committedDate": "2022-01-21 19:03:24 -0500", "message": "SuiteOptions: Naming standardization and finishing initial setup"}, {"oid": "f3b9f5b924748acfd1ad404aed3ae99e4382b885", "committedDate": "2022-01-24 12:24:25 -0500", "message": "Fixing merge conflicts"}, {"oid": "e8395d1d642870050d705d4fac2a0df255cea722", "committedDate": "2022-01-24 12:28:09 -0500", "message": "Fixing merge conflicts"}, {"oid": "d91ac31cb62f0842eb972ad045bdab45c9c3f814", "committedDate": "2022-01-25 17:42:20 -0500", "message": "PIND Migration"}, {"oid": "9fac7b8c6dfc3095299a8f2b2698099818ff5f0a", "committedDate": "2022-01-26 20:37:16 -0500", "message": "Fixing merge conflicts"}, {"oid": "68ef07dd4c65a1c3d546c2da6f01575f3f3c3ad6", "committedDate": "2022-01-26 20:47:30 -0500", "message": "Fixing merge conflicts"}, {"oid": "4d88d0c53f0069b883caece02ec49678aeeeef7e", "committedDate": "2022-02-01 14:20:52 -0500", "message": "Fixing merge conflicts"}, {"oid": "add1e0e345d4bfcfbff554d48b42166703dc9742", "committedDate": "2022-02-03 13:52:45 -0500", "message": "Fixing merge conflicts"}, {"oid": "01633b8cfb55eee9c3240bff79e0122fbc54386b", "committedDate": "2022-02-13 13:10:41 -0500", "message": "Fixing MHQ's Javadoc Build"}, {"oid": "adeb4ea20e6a8eeb365e6887e79ce6a4dd8b18dd", "committedDate": "2022-02-22 19:16:53 -0500", "message": "Initial code for creating standardized code utilities"}, {"oid": "483ec96cd157a857a1e7155be64dc5ef7c72346a", "committedDate": "2022-02-24 20:32:12 -0500", "message": "Migrating a bunch of MHQ utility code to MM"}, {"oid": "88ce57b5171b2d38c738446af4ab779e6d17ae7f", "committedDate": "2022-02-28 20:23:04 -0500", "message": "3146: Properly handling null force to null force reassignment messages"}, {"oid": "c94fc298803b71e6ac75eb935cabba921a8a6571", "committedDate": "2022-03-06 11:49:08 -0500", "message": "Fixing merge conflicts"}, {"oid": "d4b96fd69deddff97744565c43e2d56b8e31c53f", "committedDate": "2022-03-07 17:19:54 -0500", "message": "Fixing two accidentally kept negations for Random Dependents Removal"}, {"oid": "48f8d58a75de4c6a5c2868f65554dad4d3a14fd5", "committedDate": "2022-03-09 10:01:16 -0500", "message": "Merge pull request #3148 from Windchild292/dev_Windchild_3146"}, {"oid": "1c307bc93de3a536ba17dd566a9fd49bd0046c8e", "committedDate": "2022-03-21 18:22:40 -0400", "message": "Fixing a bunch of spacing readability issues"}, {"oid": "913c01672fe040a25b473e8142805d2ff4ebfa1b", "committedDate": "2022-03-22 18:24:32 -0400", "message": "Modernizing Lambdas to Method References"}, {"oid": "cc400b9fa7512b6b91ed8a8f434f365b442306a8", "committedDate": "2022-03-22 23:54:28 -0400", "message": "Modernize List::size to List::isEmpty and String::isEmpty to String::isBlank"}, {"oid": "4699f3e482938fb8c322f1daf1bc3b42d78c2a64", "committedDate": "2022-03-28 22:35:03 -0400", "message": "Fixing unused imports"}, {"oid": "494b38fcedcda31bef2e6f701152a47ce1b0e397", "committedDate": "2022-04-11 00:16:20 -0400", "message": "Issue #3196: Fixing Remove Unit NPE"}, {"oid": "4e863ffcf0393e88ebb25b76dd314d994b2cfad5", "committedDate": "2022-04-12 17:18:21 -0400", "message": "Death Module: Initial Commit For the New Setup"}, {"oid": "2e8d0c32fa5c09c862fb6c5625a58d206b70ba34", "committedDate": "2022-04-12 18:20:50 -0400", "message": "Cleaning up and modernizing the death code"}, {"oid": "be00026349d450b7f2fb262f11d161ca249c5ab5", "committedDate": "2022-04-17 21:14:46 -0400", "message": "Standardizing Personnel Flags into their own setup instead of multiple previous setups"}, {"oid": "114c9ef6cbeb045e3cc88716964526ee70372408", "committedDate": "2022-05-04 10:10:43 -0400", "message": "3260: Clear Makeshift Clubs Upon Return To MekHQ"}, {"oid": "e0f4dd9d34946716a517c0b42401b33740c51f30", "committedDate": "2022-05-06 19:58:04 -0400", "message": "Renaming the civilian role check to isCivilian, and adding missing logging for a civilian error"}, {"oid": "5b35da02f167e0d577e779b21dfd3cbd2110f92b", "committedDate": "2022-05-06 22:48:48 -0400", "message": "Merge pull request #3266 from Windchild292/dev_Windchild_RetirementDependentOrNoneLogging"}, {"oid": "c6db6046da0de4e7d40d7ac930a453d2805f6a92", "committedDate": "2022-05-10 18:34:57 -0400", "message": "Merge branch 'MegaMek:master' into dev_Windchild_AssetTerms"}, {"oid": "6b720cfa833458c385546a054b762d2745c37ce1", "committedDate": "2022-05-14 10:11:35 -0400", "message": "Fixing method name"}, {"oid": "72a352ee60bdec3467fa07665ed9753cc399b6f9", "committedDate": "2022-05-15 12:41:06 -0400", "message": "Swapping MekHQ to JUnit 5"}, {"oid": "0a2050177f55c5540d898835cfd48e4f976bb4cb", "committedDate": "2022-05-25 16:54:44 -0400", "message": "Modernizing finances XML read and write"}, {"oid": "8b34d18aa825a1416df7b1a8ecb2bb898cea1026", "committedDate": "2022-05-25 18:27:34 -0400", "message": "Renaming MekHqXmlXmlUtil to utilities/MHQXMLUtility"}, {"oid": "3c19a5aba0df7a2035e7a81e61a8b5543cb13a9c", "committedDate": "2022-05-25 18:36:42 -0400", "message": "Fixing merge conflicts"}, {"oid": "4a84ac8700a2d5bf7624dd25d4c77cff34478500", "committedDate": "2022-05-25 23:32:29 -0400", "message": "Merge branch 'master' into dev_Windchild_CurrentLocationXML"}, {"oid": "32aaaac33b8e53a355c373879ee4de9f91747c39", "committedDate": "2022-05-26 07:16:40 -0400", "message": "Merge branch 'master' into dev_Windchild_PersonFlags"}, {"oid": "9472637ad3cb3c27cba2c318c5ccdf022ca56d86", "committedDate": "2022-05-26 08:10:57 -0400", "message": "Fixing merge conflicts"}, {"oid": "f35709d1278c76d1ea7c10485071e0097b1aebf0", "committedDate": "2022-05-26 08:39:19 -0400", "message": "Switching to a single retirement report"}, {"oid": "b40d7b0e6bd9003de8df60cc732b5e195741d8aa", "committedDate": "2022-05-30 16:37:32 -0400", "message": "Merge pull request #3234 from Windchild292/dev_Windchild_PersonFlags"}, {"oid": "f7e43611ee653404079cc2fdced92c083c35362f", "committedDate": "2022-06-01 13:26:16 -0400", "message": "More swaps to using getActualValue"}, {"oid": "76223b1f01db0e020c9069b9c361d7af9f174e6a", "committedDate": "2022-06-01 17:49:36 -0400", "message": "Merge remote-tracking branch 'origin/master' into dev_Windchild_PartPriceApplications"}, {"oid": "e7755fbeddc7d00cc126c3281f4be93685eb83fa", "committedDate": "2022-06-08 20:05:45 -0400", "message": "Ignore End Date for Scenario Assignment to Active Contracts"}, {"oid": "c17408bc1409591bdb76664788c6ad4f55a5d813", "committedDate": "2022-06-18 17:51:05 -0400", "message": "Campaign::getPerson : Adding Nullable Annotation"}, {"oid": "f2abd2addef945880eefcf2a11ccfb5eec610ea3", "committedDate": "2022-06-18 17:59:08 -0400", "message": "Renaming clearGenealogy to clearGenealogyLinks (as that's what it does), and more test progress"}, {"oid": "39ac9b544233876ab9e4a6f914abaf549c76aded", "committedDate": "2022-06-20 22:59:32 -0400", "message": "Bunch of enum cleanups"}, {"oid": "a576a51fb82bbc625198e50a04894cd7749bed1c", "committedDate": "2022-06-21 16:25:02 -0400", "message": "Lots more tests, largely simple ones"}, {"oid": "0f60e6bba5ebdf538b335609e5bfd7817f614393", "committedDate": "2022-06-23 16:17:56 -0400", "message": "3372: Fixing Campaign Loan Report Issues"}, {"oid": "7441a156d93c5a7fb5dab7f9a38a5f87f6321f14", "committedDate": "2022-06-24 22:32:50 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_GenealogyTest"}, {"oid": "f5bb76bdee8f7d7aba18dd83f2d903036ea1f68b", "committedDate": "2022-06-27 13:25:57 -0400", "message": "Merge pull request #3378 from Windchild292/dev_Windchild_3372"}, {"oid": "0948c47088632642d946b7a5eec4eb595a21ac76", "committedDate": "2022-06-29 20:04:53 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_GenealogyTest"}, {"oid": "505318be000041c18ae226d4e1521dc527fc7133", "committedDate": "2022-07-14 17:41:42 -0400", "message": "Adding market enum testing"}, {"oid": "8d3060de0fe1375a8186d41be98a059652a81bed", "committedDate": "2022-07-31 00:15:10 -0400", "message": "add remove stratcon scenario option"}, {"oid": "9d2ebd8a76bc41afdf298da710ad80e1e4b80c0a", "committedDate": "2022-08-02 19:49:23 -0400", "message": "Checking this"}, {"oid": "803755f3d14a7ba3e66bb1e6364d6c4220bac841", "committedDate": "2022-08-03 20:51:52 -0400", "message": "Properly disabling the random tests"}, {"oid": "f79a61c91b06b467d1bbed4dfeaa36f97fd755e3", "committedDate": "2022-08-04 11:12:44 -0400", "message": "Using correct collector"}, {"oid": "4b3952367635a7620bddb96a9e81a7f1a97a2219", "committedDate": "2022-11-15 14:07:43 -0500", "message": "Removing duplicated name generation info from the campaign file"}, {"oid": "5213209bddb612458226cdfa7561a7220f8b3b67", "committedDate": "2022-11-15 15:54:47 -0500", "message": "Fixing deprecated XML utility uses and fixing indentation issues for parts"}, {"oid": "53e7b27c2173373019055e800950173ed7eb20df", "committedDate": "2022-11-15 19:05:53 -0500", "message": "Company Generator: Faction Options"}, {"oid": "230c025b083606834270681ce668a836c76dfc1b", "committedDate": "2022-11-22 16:25:51 -0500", "message": "3489: Adding Small Craft and DropShip Transport Support"}, {"oid": "b5349ccb7e3e9c0345d6685bb9a76a53afed8bdc", "committedDate": "2022-11-26 08:40:31 -0500", "message": "Merge pull request #3510 from MegaMek/dev_Windchild_3489"}, {"oid": "b3f06f70d94e83ed6fad6368cbe5df5d35c20296", "committedDate": "2022-11-26 11:38:42 -0500", "message": "Finishing adding the new option as a selection"}, {"oid": "1cb49fa503593c75f3bee4ebc6cf2574faec13de", "committedDate": "2022-11-26 11:49:33 -0500", "message": "Merge branch 'MegaMek:master' into dev_Windchild_CompanyGeneratorFactionGeneration"}, {"oid": "b47a12937f6b979925f82cb31bb6f2f33cf789e5", "committedDate": "2022-12-05 15:34:26 -0500", "message": "Scenarios are now Scenarios, not Missions"}, {"oid": "b57de2f09b47ffa8da9ab0bd7bba356d1e2e235c", "committedDate": "2022-12-08 23:00:17 -0500", "message": "Merge pull request #3501 from Windchild292/dev_Windchild_DeprecatedXML"}, {"oid": "ade20da3d68431198324cbad4bd7cfcc2fd1ef66", "committedDate": "2022-12-11 23:37:05 -0500", "message": "Merge pull request #3520 from Windchild292/dev_Windchild_ScenariosAreScenarios"}, {"oid": "a6d88033b71b9291e4774a5cbc3e8f577287a523", "committedDate": "2022-12-16 22:33:19 -0500", "message": "Tearing out EncodeControl"}, {"oid": "cec1df762e06d6e3e6c4c437c0d0a25892f44a7d", "committedDate": "2022-12-29 13:15:59 -0500", "message": "Fixing Option Naming Typos"}, {"oid": "e3e1ce62490858d93d695b7e7f8bf17dca068936", "committedDate": "2022-12-29 14:30:54 -0500", "message": "Standardize option naming"}, {"oid": "d385d0bc8fd91a75c631f546272abbff8e07311a", "committedDate": "2022-12-30 13:05:34 -0500", "message": "SkillLevel: Reducing SkillType::getExperienceLevelName calls"}, {"oid": "332b06c4b29e7f809e9cf0cab16a062f65544391", "committedDate": "2023-01-08 20:33:20 -0500", "message": "Yearly Retirement Nag Now Follows Campaign Options"}, {"oid": "62afc895d75aece8a3079267b20eb9e8c3de5cfc", "committedDate": "2023-01-14 16:34:36 -0500", "message": "3558: RATs are Used Outside of AtB"}, {"oid": "0e39c3c4517d5cd46e99546d8e3b3a1cea7cb30b", "committedDate": "2023-01-17 20:12:29 -0500", "message": "Merge branch 'master' into dev_Windchild_CampaignOptionsCleanup"}, {"oid": "da71474de7674e9b213472ce61b254a744c6ae5a", "committedDate": "2023-01-17 20:12:53 -0500", "message": "Merge branch 'MegaMek:master' into dev_Windchild_IsolatedSkillLevelEnumSwapovers"}, {"oid": "a328a1e42771f0c7052a7c9c1b2583134a8534f4", "committedDate": "2023-01-25 22:45:44 -0500", "message": "Campaign Ops Unit Rating: Properly Calculate Personnel Numbers"}, {"oid": "5ad55c0aa2dd0422f1e05d2704860f7674936984", "committedDate": "2023-01-25 23:11:45 -0500", "message": "Applying changes from testing and further rule reading"}, {"oid": "8fc36fbd275ffccf0ed91df60b637a5cc3135a86", "committedDate": "2023-01-29 18:24:48 -0500", "message": "Phenotype Enum: Migrating Uses to Simplification Methods"}, {"oid": "a462c5436ab5bec1a54c2f652f232fdff88f7a42", "committedDate": "2023-01-29 19:28:49 -0500", "message": "Tearing out unused code and swapping to using a map"}, {"oid": "542356e26d4b14d760fa69f33f627ed2b692908b", "committedDate": "2023-02-06 21:17:17 -0500", "message": "Merge pull request #3589 from Windchild292/dev_Windchild_PhenotypeSimplificationMethods"}, {"oid": "2757b555a5a0aa6fdf73322d58173bbee7d22ba5", "committedDate": "2023-02-06 21:25:38 -0500", "message": "Merge pull request #3590 from Windchild292/dev_Windchild_UnusedSPACleanup"}, {"oid": "6784f22a192b7c650bd5be0354bc6946bfec896f", "committedDate": "2023-02-06 21:41:30 -0500", "message": "Merge pull request #3557 from Windchild292/dev_Windchild_YearlyRetirementNag"}, {"oid": "724a8333d072d631c1072fd7ccf2707efe6e2b40", "committedDate": "2023-02-07 20:56:16 -0500", "message": "Fixing merge conflicts"}, {"oid": "e0f16b480db19ce9d36290caa03be8f6be77cace", "committedDate": "2023-02-07 21:43:07 -0500", "message": "Fixing merge conflicts"}, {"oid": "8996781abfef1f08293a06ef53e3af92812a9b5d", "committedDate": "2023-02-07 22:53:45 -0500", "message": "Standardize Mass Repair Mass Salvage naming to MRMS"}, {"oid": "1ccab8e5b040389be54c4730103354fbc0f06406", "committedDate": "2023-02-18 19:25:18 +0000", "message": "3318: Add manual personnel payments that generate Finance debit"}, {"oid": "86649c7c93250458658d765a7e2007134c385c74", "committedDate": "2023-02-25 20:07:13 -0500", "message": "Some related code cleanup"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU2NDEzNA==", "url": "https://github.com/MegaMek/mekhq/pull/2123#discussion_r500564134", "body": "```suggestion\r\n        return (int) Math.round(getHangar().getUnitsStream()\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return (int)Math.round(getHangar().getUnitsStream()\n          \n          \n            \n                    return (int) Math.round(getHangar().getUnitsStream()", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">return</span> (<span class=\"pl-k\">int</span>)<span class=\"pl-smi\">Math</span><span class=\"pl-k\">.</span>round(getHangar()<span class=\"pl-k\">.</span>getUnitsStream()</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">return</span> (<span class=\"pl-k\">int</span>)<span class=\"x x-first x-last\"> </span><span class=\"pl-smi\">Math</span><span class=\"pl-k\">.</span>round(getHangar()<span class=\"pl-k\">.</span>getUnitsStream()</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "Windchild292", "createdAt": "2020-10-06T20:06:00Z", "path": "MekHQ/src/mekhq/campaign/Campaign.java", "diffHunk": "@@ -7236,117 +7172,88 @@ public void setHealingTimeOptions(int newHeal, int newNaturalHeal) {\n     }\n \n     public int getTotalMechBays() {\n-        double bays = 0;\n-        for (Unit u : getUnits()) {\n-            bays += u.getMechCapacity();\n-        }\n-        return (int)Math.round(bays);\n+        return (int)Math.round(getHangar().getUnitsStream()\n+            .mapToDouble(Unit::getMechCapacity)\n+            .sum());\n     }\n \n     public int getTotalASFBays() {\n-        double bays = 0;\n-        for (Unit u : getUnits()) {\n-            bays += u.getASFCapacity();\n-        }\n-        return (int)Math.round(bays);\n+        return (int)Math.round(getHangar().getUnitsStream()\n+            .mapToDouble(Unit::getASFCapacity)\n+            .sum());\n     }\n \n     public int getTotalSmallCraftBays() {\n-        double bays = 0;\n-        for (Unit u : getUnits()) {\n-            bays += u.getSmallCraftCapacity();\n-        }\n-        return (int)Math.round(bays);\n+        return (int)Math.round(getHangar().getUnitsStream()\n+            .mapToDouble(Unit::getSmallCraftCapacity)\n+            .sum());\n     }\n \n     public int getTotalBattleArmorBays() {\n-        double bays = 0;\n-        for (Unit u : getUnits()) {\n-            bays += u.getBattleArmorCapacity();\n-        }\n-        return (int)Math.round(bays);\n+        return (int)Math.round(getHangar().getUnitsStream()\n+            .mapToDouble(Unit::getBattleArmorCapacity)\n+            .sum());\n     }\n \n     public int getTotalInfantryBays() {\n-        double bays = 0;\n-        for (Unit u : getUnits()) {\n-            bays += u.getInfantryCapacity();\n-        }\n-        return (int)Math.round(bays);\n+        return (int)Math.round(getHangar().getUnitsStream()", "originalCommit": "02cf732d561f245a8a8d39a2b8a819cb45ac94ca", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cb64714e6e2b7d03de487c72eb18c3c09948b6c6", "changed_code": [{"header": "diff --git a/MekHQ/src/mekhq/campaign/Campaign.java b/MekHQ/src/mekhq/campaign/Campaign.java\nindex c9db948ab..4dff77b1d 100644\n--- a/MekHQ/src/mekhq/campaign/Campaign.java\n+++ b/MekHQ/src/mekhq/campaign/Campaign.java\n", "chunk": "@@ -7172,49 +7172,49 @@ public class Campaign implements Serializable, ITechManager {\n     }\n \n     public int getTotalMechBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getMechCapacity)\n             .sum());\n     }\n \n     public int getTotalASFBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getASFCapacity)\n             .sum());\n     }\n \n     public int getTotalSmallCraftBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getSmallCraftCapacity)\n             .sum());\n     }\n \n     public int getTotalBattleArmorBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getBattleArmorCapacity)\n             .sum());\n     }\n \n     public int getTotalInfantryBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getInfantryCapacity)\n             .sum());\n     }\n \n     public int getTotalHeavyVehicleBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getHeavyVehicleCapacity)\n             .sum());\n     }\n \n     public int getTotalLightVehicleBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getLightVehicleCapacity)\n             .sum());\n     }\n \n     public int getTotalProtomechBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getProtomechCapacity)\n             .sum());\n     }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "3f55aabad31fb84ff1e5af9c8caac7bd8c8999a0", "changed_code": [{"header": "diff --git a/MekHQ/src/mekhq/campaign/Campaign.java b/MekHQ/src/mekhq/campaign/Campaign.java\nindex c9db948ab..0f69d5116 100644\n--- a/MekHQ/src/mekhq/campaign/Campaign.java\n+++ b/MekHQ/src/mekhq/campaign/Campaign.java\n", "chunk": "@@ -7172,49 +7161,49 @@ public class Campaign implements Serializable, ITechManager {\n     }\n \n     public int getTotalMechBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getMechCapacity)\n             .sum());\n     }\n \n     public int getTotalASFBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getASFCapacity)\n             .sum());\n     }\n \n     public int getTotalSmallCraftBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getSmallCraftCapacity)\n             .sum());\n     }\n \n     public int getTotalBattleArmorBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getBattleArmorCapacity)\n             .sum());\n     }\n \n     public int getTotalInfantryBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getInfantryCapacity)\n             .sum());\n     }\n \n     public int getTotalHeavyVehicleBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getHeavyVehicleCapacity)\n             .sum());\n     }\n \n     public int getTotalLightVehicleBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getLightVehicleCapacity)\n             .sum());\n     }\n \n     public int getTotalProtomechBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getProtomechCapacity)\n             .sum());\n     }\n", "next_change": {"commit": "a0c1cbf9746ed9486f08ce4aa2376828e846c786", "changed_code": [{"header": "diff --git a/MekHQ/src/mekhq/campaign/Campaign.java b/MekHQ/src/mekhq/campaign/Campaign.java\nindex 0f69d5116..e49c8ce15 100644\n--- a/MekHQ/src/mekhq/campaign/Campaign.java\n+++ b/MekHQ/src/mekhq/campaign/Campaign.java\n", "chunk": "@@ -7152,97 +7101,119 @@ public class Campaign implements Serializable, ITechManager {\n             }\n         }\n     }\n-    /**\n-     * Returns our list of potential transport ships\n-     * @return\n-     */\n-    public Set<UUID> getTransportShips() {\n-        return transportShips;\n-    }\n \n     public int getTotalMechBays() {\n-        return (int) Math.round(getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getMechCapacity)\n-            .sum());\n+        double bays = 0;\n+        for (Unit u : getUnits()) {\n+            bays += u.getMechCapacity();\n+        }\n+        return (int)Math.round(bays);\n     }\n \n     public int getTotalASFBays() {\n-        return (int) Math.round(getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getASFCapacity)\n-            .sum());\n+        double bays = 0;\n+        for (Unit u : getUnits()) {\n+            bays += u.getASFCapacity();\n+        }\n+        return (int)Math.round(bays);\n     }\n \n     public int getTotalSmallCraftBays() {\n-        return (int) Math.round(getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getSmallCraftCapacity)\n-            .sum());\n+        double bays = 0;\n+        for (Unit u : getUnits()) {\n+            bays += u.getSmallCraftCapacity();\n+        }\n+        return (int)Math.round(bays);\n     }\n \n     public int getTotalBattleArmorBays() {\n-        return (int) Math.round(getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getBattleArmorCapacity)\n-            .sum());\n+        double bays = 0;\n+        for (Unit u : getUnits()) {\n+            bays += u.getBattleArmorCapacity();\n+        }\n+        return (int)Math.round(bays);\n     }\n \n     public int getTotalInfantryBays() {\n-        return (int) Math.round(getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getInfantryCapacity)\n-            .sum());\n+        double bays = 0;\n+        for (Unit u : getUnits()) {\n+            bays += u.getInfantryCapacity();\n+        }\n+        return (int)Math.round(bays);\n     }\n \n     public int getTotalHeavyVehicleBays() {\n-        return (int) Math.round(getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getHeavyVehicleCapacity)\n-            .sum());\n+        double bays = 0;\n+        for (Unit u : getUnits()) {\n+            bays += u.getHeavyVehicleCapacity();\n+        }\n+        return (int)Math.round(bays);\n     }\n \n     public int getTotalLightVehicleBays() {\n-        return (int) Math.round(getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getLightVehicleCapacity)\n-            .sum());\n+        double bays = 0;\n+        for (Unit u : getUnits()) {\n+            bays += u.getLightVehicleCapacity();\n+        }\n+        return (int)Math.round(bays);\n     }\n \n     public int getTotalProtomechBays() {\n-        return (int) Math.round(getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getProtomechCapacity)\n-            .sum());\n+        double bays = 0;\n+        for (Unit u : getUnits()) {\n+            bays += u.getProtomechCapacity();\n+        }\n+        return (int)Math.round(bays);\n     }\n \n     public int getTotalDockingCollars() {\n-        return getHangar().getUnitsStream()\n-            .filter(u -> u.getEntity() instanceof Jumpship)\n-            .mapToInt(Unit::getDocks)\n-            .sum();\n+        double collars = 0;\n+        for (Unit u : getUnits()) {\n+            if (u.getEntity() instanceof Jumpship) {\n+                collars += u.getDocks();\n+            }\n+        }\n+        return (int)Math.round(collars);\n     }\n \n     public double getTotalInsulatedCargoCapacity() {\n-        return getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getInsulatedCargoCapacity)\n-            .sum();\n+        double capacity = 0;\n+        for (Unit u : getUnits()) {\n+            capacity += u.getInsulatedCargoCapacity();\n+        }\n+        return capacity;\n     }\n \n     public double getTotalRefrigeratedCargoCapacity() {\n-        return getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getRefrigeratedCargoCapacity)\n-            .sum();\n+        double capacity = 0;\n+        for (Unit u : getUnits()) {\n+            capacity += u.getRefrigeratedCargoCapacity();\n+        }\n+        return capacity;\n     }\n \n     public double getTotalLivestockCargoCapacity() {\n-        return getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getLivestockCargoCapacity)\n-            .sum();\n+        double capacity = 0;\n+        for (Unit u : getUnits()) {\n+            capacity += u.getLivestockCargoCapacity();\n+        }\n+        return capacity;\n     }\n \n     public double getTotalLiquidCargoCapacity() {\n-        return getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getLiquidCargoCapacity)\n-            .sum();\n+        double capacity = 0;\n+        for (Unit u : getUnits()) {\n+            capacity += u.getLiquidCargoCapacity();\n+        }\n+        return capacity;\n     }\n \n     public double getTotalCargoCapacity() {\n-        return getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getCargoCapacity)\n-            .sum();\n+        double capacity = 0;\n+        for (Unit u : getUnits()) {\n+            capacity += u.getCargoCapacity();\n+        }\n+        return capacity;\n     }\n \n     // Liquid not included\n", "next_change": {"commit": "04a16de448a0c7d576a6c3c64c9d23ae08384bae", "changed_code": [{"header": "diff --git a/MekHQ/src/mekhq/campaign/Campaign.java b/MekHQ/src/mekhq/campaign/Campaign.java\nindex e49c8ce15..993f59cfe 100644\n--- a/MekHQ/src/mekhq/campaign/Campaign.java\n+++ b/MekHQ/src/mekhq/campaign/Campaign.java\n", "chunk": "@@ -7101,900 +7157,440 @@ public class Campaign implements Serializable, ITechManager {\n             }\n         }\n     }\n-\n-    public int getTotalMechBays() {\n-        double bays = 0;\n-        for (Unit u : getUnits()) {\n-            bays += u.getMechCapacity();\n-        }\n-        return (int)Math.round(bays);\n+    /**\n+     * Returns our list of potential transport ships\n+     * @return\n+     */\n+    public Set<UUID> getTransportShips() {\n+        return transportShips;\n     }\n \n-    public int getTotalASFBays() {\n-        double bays = 0;\n-        for (Unit u : getUnits()) {\n-            bays += u.getASFCapacity();\n-        }\n-        return (int)Math.round(bays);\n-    }\n+    public String getCombatPersonnelDetails() {\n+        int[] countPersonByType = new int[Person.T_NUM];\n+        int countTotal = 0;\n+        int countInjured = 0;\n+        int countMIA = 0;\n+        int countKIA = 0;\n+        int countDead = 0;\n+        int countRetired = 0;\n+        Money salary = Money.zero();\n \n-    public int getTotalSmallCraftBays() {\n-        double bays = 0;\n-        for (Unit u : getUnits()) {\n-            bays += u.getSmallCraftCapacity();\n-        }\n-        return (int)Math.round(bays);\n-    }\n+        for (Person p : getPersonnel()) {\n+            if (!p.hasPrimaryCombatRole() || !p.getPrisonerStatus().isFree()) {\n+                continue;\n+            }\n \n-    public int getTotalBattleArmorBays() {\n-        double bays = 0;\n-        for (Unit u : getUnits()) {\n-            bays += u.getBattleArmorCapacity();\n+            // Add them to the total count\n+            if (p.getStatus().isActive()) {\n+                countPersonByType[p.getPrimaryRole()]++;\n+                countTotal++;\n+                if (getCampaignOptions().useAdvancedMedical() && p.getInjuries().size() > 0) {\n+                    countInjured++;\n+                } else if (p.getHits() > 0) {\n+                    countInjured++;\n+                }\n+                salary = salary.plus(p.getSalary());\n+            } else if (p.getStatus().isRetired()) {\n+                countRetired++;\n+            } else if (p.getStatus().isMIA()) {\n+                countMIA++;\n+            } else if (p.getStatus().isKIA()) {\n+                countKIA++;\n+                countDead++;\n+            } else if (p.getStatus().isDead()) {\n+                countDead++;\n+            }\n         }\n-        return (int)Math.round(bays);\n-    }\n \n-    public int getTotalInfantryBays() {\n-        double bays = 0;\n-        for (Unit u : getUnits()) {\n-            bays += u.getInfantryCapacity();\n-        }\n-        return (int)Math.round(bays);\n-    }\n+        StringBuilder sb = new StringBuilder(\"Combat Personnel\\n\\n\");\n \n-    public int getTotalHeavyVehicleBays() {\n-        double bays = 0;\n-        for (Unit u : getUnits()) {\n-            bays += u.getHeavyVehicleCapacity();\n-        }\n-        return (int)Math.round(bays);\n-    }\n+        sb.append(String.format(\"%-30s        %4s\\n\", \"Total Combat Personnel\", countTotal));\n \n-    public int getTotalLightVehicleBays() {\n-        double bays = 0;\n-        for (Unit u : getUnits()) {\n-            bays += u.getLightVehicleCapacity();\n+        for (int i = 0; i < Person.T_NUM; i++) {\n+            if (Person.isCombatRole(i)) {\n+                sb.append(String.format(\"    %-30s    %4s\\n\",\n+                        Person.getRoleDesc(i, getFaction().isClan()), countPersonByType[i]));\n+            }\n         }\n-        return (int)Math.round(bays);\n-    }\n \n-    public int getTotalProtomechBays() {\n-        double bays = 0;\n-        for (Unit u : getUnits()) {\n-            bays += u.getProtomechCapacity();\n-        }\n-        return (int)Math.round(bays);\n+        sb.append(\"\\n\")\n+                .append(String.format(\"%-30s        %4s\\n\", \"Injured Combat Personnel\", countInjured))\n+                .append(String.format(\"%-30s        %4s\\n\", \"MIA Combat Personnel\", countMIA))\n+                .append(String.format(\"%-30s        %4s\\n\", \"KIA Combat Personnel\", countKIA))\n+                .append(String.format(\"%-30s        %4s\\n\", \"Retired Combat Personnel\", countRetired))\n+                .append(String.format(\"%-30s        %4s\\n\", \"Dead Combat Personnel\", countDead))\n+                .append(\"\\nMonthly Salary For Combat Personnel: \").append(salary.toAmountAndSymbolString());\n+\n+        return sb.toString();\n     }\n \n-    public int getTotalDockingCollars() {\n-        double collars = 0;\n-        for (Unit u : getUnits()) {\n-            if (u.getEntity() instanceof Jumpship) {\n-                collars += u.getDocks();\n+    public String getSupportPersonnelDetails() {\n+        int[] countPersonByType = new int[Person.T_NUM];\n+        int countTotal = 0;\n+        int countInjured = 0;\n+        int countMIA = 0;\n+        int countKIA = 0;\n+        int countDead = 0;\n+        int countRetired = 0;\n+        Money salary = Money.zero();\n+        int prisoners = 0;\n+        int bondsmen = 0;\n+        int dependents = 0;\n+\n+        for (Person p : getPersonnel()) {\n+            // Add them to the total count\n+            boolean primarySupport = p.hasPrimarySupportRole(false);\n+\n+            if (primarySupport && p.getPrisonerStatus().isFree() && p.getStatus().isActive()) {\n+                countPersonByType[p.getPrimaryRole()]++;\n+                countTotal++;\n+                if (p.getInjuries().size() > 0 || p.getHits() > 0) {\n+                    countInjured++;\n+                }\n+                salary = salary.plus(p.getSalary());\n+            } else if (p.getPrisonerStatus().isPrisoner() && p.getStatus().isActive()) {\n+                prisoners++;\n+                if (p.getInjuries().size() > 0 || p.getHits() > 0) {\n+                    countInjured++;\n+                }\n+            } else if (p.getPrisonerStatus().isBondsman() && p.getStatus().isActive()) {\n+                bondsmen++;\n+                if (p.getInjuries().size() > 0 || p.getHits() > 0) {\n+                    countInjured++;\n+                }\n+            } else if (primarySupport && p.getStatus().isRetired()) {\n+                countRetired++;\n+            } else if (primarySupport && p.getStatus().isMIA()) {\n+                countMIA++;\n+            } else if (primarySupport && p.getStatus().isKIA()) {\n+                countKIA++;\n+                countDead++;\n+            } else if (primarySupport && p.getStatus().isDead()) {\n+                countDead++;\n             }\n-        }\n-        return (int)Math.round(collars);\n-    }\n \n-    public double getTotalInsulatedCargoCapacity() {\n-        double capacity = 0;\n-        for (Unit u : getUnits()) {\n-            capacity += u.getInsulatedCargoCapacity();\n+            if (p.isDependent() && p.getStatus().isActive() && p.getPrisonerStatus().isFree()) {\n+                dependents++;\n+            }\n         }\n-        return capacity;\n-    }\n \n-    public double getTotalRefrigeratedCargoCapacity() {\n-        double capacity = 0;\n-        for (Unit u : getUnits()) {\n-            capacity += u.getRefrigeratedCargoCapacity();\n-        }\n-        return capacity;\n-    }\n+        StringBuilder sb = new StringBuilder(\"Support Personnel\\n\\n\");\n \n-    public double getTotalLivestockCargoCapacity() {\n-        double capacity = 0;\n-        for (Unit u : getUnits()) {\n-            capacity += u.getLivestockCargoCapacity();\n-        }\n-        return capacity;\n-    }\n+        sb.append(String.format(\"%-30s        %4s\\n\", \"Total Support Personnel\", countTotal));\n \n-    public double getTotalLiquidCargoCapacity() {\n-        double capacity = 0;\n-        for (Unit u : getUnits()) {\n-            capacity += u.getLiquidCargoCapacity();\n+        for (int i = 0; i < Person.T_NUM; i++) {\n+            if (Person.isSupportRole(i)) {\n+                sb.append(String.format(\"    %-30s    %4s\\n\",\n+                        Person.getRoleDesc(i, getFaction().isClan()), countPersonByType[i]));\n+            }\n         }\n-        return capacity;\n-    }\n \n-    public double getTotalCargoCapacity() {\n-        double capacity = 0;\n-        for (Unit u : getUnits()) {\n-            capacity += u.getCargoCapacity();\n-        }\n-        return capacity;\n-    }\n-\n-    // Liquid not included\n-    public double getTotalCombinedCargoCapacity() {\n-        return getTotalCargoCapacity() + getTotalLivestockCargoCapacity()\n-                + getTotalInsulatedCargoCapacity() + getTotalRefrigeratedCargoCapacity();\n-    }\n-\n-    public int getNumberOfUnitsByType(long type) {\n-        return getNumberOfUnitsByType(type, false, false);\n-    }\n+        sb.append(\"\\n\")\n+                .append(String.format(\"%-30s        %4s\\n\", \"Injured Support Personnel\", countInjured))\n+                .append(String.format(\"%-30s        %4s\\n\", \"MIA Support Personnel\", countMIA))\n+                .append(String.format(\"%-30s        %4s\\n\", \"KIA Support Personnel\", countKIA))\n+                .append(String.format(\"%-30s        %4s\\n\", \"Retired Support Personnel\", countRetired))\n+                .append(String.format(\"%-30s        %4s\\n\", \"Dead Support Personnel\", countDead))\n+                .append(\"\\nMonthly Salary For Support Personnel: \").append(salary.toAmountAndSymbolString())\n+                .append(String.format(\"\\nYou have \" + dependents + \" %s\", (dependents == 1) ? \"dependent\" : \"dependents\"))\n+                .append(String.format(\"\\nYou have \" + prisoners + \" prisoner%s\", (prisoners == 1) ? \"\" : \"s\"))\n+                .append(String.format(\"\\nYou have \" + bondsmen + \" %s\", (bondsmen == 1) ? \"bondsman\" : \"bondsmen\"));\n \n-    public int getNumberOfUnitsByType(long type, boolean inTransit) {\n-        return getNumberOfUnitsByType(type, inTransit, false);\n+        return sb.toString();\n     }\n \n-    public int getNumberOfUnitsByType(long type, boolean inTransit, boolean lv) {\n-        int num = 0;\n-        for (Unit unit : getUnits()) {\n-            if (!inTransit && !unit.isPresent()) {\n-                continue;\n-            }\n-            if (unit.isMothballed()) {\n-                if (type == Unit.ETYPE_MOTHBALLED) {\n-                    num++;\n-                }\n-                continue;\n-            }\n-            Entity en = unit.getEntity();\n-            if (en instanceof GunEmplacement || en instanceof FighterSquadron || en instanceof Jumpship) {\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_MECH && en instanceof Mech) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_DROPSHIP && en instanceof Dropship) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_SMALL_CRAFT && en instanceof SmallCraft\n-                    && !(en instanceof Dropship)) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_CONV_FIGHTER && en instanceof ConvFighter) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_AERO && en instanceof Aero\n-                    && !(en instanceof SmallCraft || en instanceof ConvFighter)) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_INFANTRY && en instanceof Infantry && !(en instanceof BattleArmor)) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_BATTLEARMOR && en instanceof BattleArmor) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_TANK && en instanceof Tank) {\n-                if ((en.getWeight() <= 50 && lv) || (en.getWeight() > 50 && !lv)) {\n-                    num++;\n-                }\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_PROTOMECH && en instanceof Protomech) {\n-                num++;\n-                continue;\n-            }\n+    public void doMaintenance(Unit u) {\n+        if (!u.requiresMaintenance() || !campaignOptions.checkMaintenance()) {\n+            return;\n         }\n-\n-        return num;\n-    }\n-\n-    public double getCargoTonnage(boolean inTransit) {\n-        return getCargoTonnage(inTransit, false);\n-    }\n-\n-    @SuppressWarnings(\"unused\") // FIXME: This whole method needs re-worked once Dropship Assignments are in\n-    public double getCargoTonnage(boolean inTransit, boolean mothballed) {\n-        double cargoTonnage = 0;\n-        double mothballedTonnage = 0;\n-        int mechs = getNumberOfUnitsByType(Entity.ETYPE_MECH);\n-        int ds = getNumberOfUnitsByType(Entity.ETYPE_DROPSHIP);\n-        int sc = getNumberOfUnitsByType(Entity.ETYPE_SMALL_CRAFT);\n-        int cf = getNumberOfUnitsByType(Entity.ETYPE_CONV_FIGHTER);\n-        int asf = getNumberOfUnitsByType(Entity.ETYPE_AERO);\n-        int inf = getNumberOfUnitsByType(Entity.ETYPE_INFANTRY);\n-        int ba = getNumberOfUnitsByType(Entity.ETYPE_BATTLEARMOR);\n-        int lv = getNumberOfUnitsByType(Entity.ETYPE_TANK, true);\n-        int hv = getNumberOfUnitsByType(Entity.ETYPE_TANK, false);\n-        int protos = getNumberOfUnitsByType(Entity.ETYPE_PROTOMECH);\n-\n-        for (Part part : getSpareParts()) {\n-            if (!inTransit && !part.isPresent()) {\n-                continue;\n-            }\n-            cargoTonnage += (part.getQuantity() * part.getTonnage());\n+        // lets start by checking times\n+        Person tech = u.getTech();\n+        int minutesUsed = u.getMaintenanceTime();\n+        int astechsUsed = getAvailableAstechs(minutesUsed, false);\n+        boolean maintained = ((tech != null) && (tech.getMinutesLeft() >= minutesUsed)\n+                && !tech.isMothballing());\n+        boolean paidMaintenance = true;\n+        if (maintained) {\n+            // use the time\n+            tech.setMinutesLeft(tech.getMinutesLeft() - minutesUsed);\n+            astechPoolMinutes -= astechsUsed * minutesUsed;\n         }\n+        u.incrementDaysSinceMaintenance(maintained, astechsUsed);\n \n-        // place units in bays\n-        // FIXME: This has been temporarily disabled. It really needs dropship assignments done to fix it correctly.\n-        // Remaining units go into cargo\n-        for (Unit unit : getUnits()) {\n-            if (!inTransit && !unit.isPresent()) {\n-                continue;\n-            }\n-            Entity en = unit.getEntity();\n-            if (unit.isMothballed()) {\n-                mothballedTonnage += en.getWeight();\n-                continue;\n-            }\n-            if (en instanceof GunEmplacement || en instanceof FighterSquadron || en instanceof Jumpship) {\n-                continue;\n-            }\n-            // cargoTonnage += en.getWeight();\n-        }\n-        if (mothballed) {\n-            return mothballedTonnage;\n+        int ruggedMultiplier = 1;\n+        if (u.getEntity().hasQuirk(OptionsConstants.QUIRK_POS_RUGGED_1)) {\n+            ruggedMultiplier = 2;\n         }\n-        return cargoTonnage;\n-    }\n \n-    public String getCargoDetails() {\n-        StringBuffer sb = new StringBuffer(\"Cargo\\n\\n\");\n-        double ccc = this.getTotalCombinedCargoCapacity();\n-        double gcc = this.getTotalCargoCapacity();\n-        double icc = this.getTotalInsulatedCargoCapacity();\n-        double lcc = this.getTotalLiquidCargoCapacity();\n-        double scc = this.getTotalLivestockCargoCapacity();\n-        double rcc = this.getTotalRefrigeratedCargoCapacity();\n-        double tonnage = this.getCargoTonnage(false);\n-        double mothballedTonnage = this.getCargoTonnage(false, true);\n-        double mothballedUnits = Math.max(getNumberOfUnitsByType(Unit.ETYPE_MOTHBALLED), 0);\n-        double combined = (tonnage + mothballedTonnage);\n-        double transported = combined > ccc ? ccc : combined;\n-        double overage = combined - transported;\n-\n-        sb.append(String.format(\"%-35s      %6.3f\\n\", \"Total Capacity:\", ccc));\n-        sb.append(String.format(\"%-35s      %6.3f\\n\", \"General Capacity:\", gcc));\n-        sb.append(String.format(\"%-35s      %6.3f\\n\", \"Insulated Capacity:\", icc));\n-        sb.append(String.format(\"%-35s      %6.3f\\n\", \"Liquid Capacity:\", lcc));\n-        sb.append(String.format(\"%-35s      %6.3f\\n\", \"Livestock Capacity:\", scc));\n-        sb.append(String.format(\"%-35s      %6.3f\\n\", \"Refrigerated Capacity:\", rcc));\n-        sb.append(String.format(\"%-35s      %6.3f\\n\", \"Cargo Transported:\", tonnage));\n-        sb.append(String.format(\"%-35s      %4s (%1.0f)\\n\", \"Mothballed Units as Cargo (Tons):\", mothballedUnits, mothballedTonnage));\n-        sb.append(String.format(\"%-35s      %6.3f/%1.3f\\n\", \"Transported/Capacity:\", transported, ccc));\n-        sb.append(String.format(\"%-35s      %6.3f\\n\", \"Overage Not Transported:\", overage));\n+        if (u.getEntity().hasQuirk(OptionsConstants.QUIRK_POS_RUGGED_2)) {\n+            ruggedMultiplier = 3;\n+        }\n \n-        return new String(sb);\n-    }\n+        if (u.getDaysSinceMaintenance() >= (getCampaignOptions().getMaintenanceCycleDays() * ruggedMultiplier)) {\n+            // maybe use the money\n+            if (campaignOptions.payForMaintain()) {\n+                if (!(finances.debit(u.getMaintenanceCost(), Transaction.C_MAINTAIN, \"Maintenance for \"\n+                                + u.getName(), getLocalDate()))) {\n+                    addReport(\"<font color='red'><b>You cannot afford to pay maintenance costs for \"\n+                            + u.getHyperlinkedName() + \"!</b></font>\");\n+                    paidMaintenance = false;\n+                }\n+            }\n+            // it is time for a maintenance check\n+            int qualityOrig = u.getQuality();\n+            String techName = \"Nobody\";\n+            String techNameLinked = techName;\n+            if (null != tech) {\n+                techName = tech.getFullTitle();\n+                techNameLinked = tech.getHyperlinkedFullTitle();\n+            }\n+            // don't do actual damage until we clear the for loop to avoid\n+            // concurrent mod problems\n+            // put it into a hash - 4 points of damage will mean destruction\n+            Map<Part, Integer> partsToDamage = new HashMap<>();\n+            StringBuilder maintenanceReport = new StringBuilder(\"<emph>\" + techName + \" performing maintenance</emph><br><br>\");\n+            for (Part p : u.getParts()) {\n+                String partReport = \"<b>\" + p.getName() + \"</b> (Quality \" + p.getQualityName() + \")\";\n+                if (!p.needsMaintenance()) {\n+                    continue;\n+                }\n+                int oldQuality = p.getQuality();\n+                TargetRoll target = getTargetForMaintenance(p, tech);\n+                if (!paidMaintenance) {\n+                    // TODO : Make this modifier user inputtable\n+                    target.addModifier(1, \"did not pay for maintenance\");\n+                }\n \n-    public int getOccupiedBays(long type) {\n-        return getOccupiedBays(type, false);\n-    }\n+                partReport += \", TN \" + target.getValue() + \"[\" + target.getDesc() + \"]\";\n+                int roll = Compute.d6(2);\n+                int margin = roll - target.getValue();\n+                partReport += \" rolled a \" + roll + \", margin of \" + margin;\n \n-    public int getOccupiedBays(long type, boolean lv) {\n-        int num = 0;\n-        for (Unit unit : getUnits()) {\n-            if (unit.isMothballed()) {\n-                continue;\n-            }\n-            Entity en = unit.getEntity();\n-            if (en instanceof GunEmplacement || en instanceof Jumpship) {\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_MECH && en instanceof Mech) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_DROPSHIP && en instanceof Dropship) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_SMALL_CRAFT && en instanceof SmallCraft && !(en instanceof Dropship)) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_CONV_FIGHTER && en instanceof ConvFighter) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_AERO && en instanceof Aero\n-                    && !(en instanceof SmallCraft || en instanceof ConvFighter)) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_INFANTRY && en instanceof Infantry && !(en instanceof BattleArmor)) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_BATTLEARMOR && en instanceof BattleArmor) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_TANK && en instanceof Tank) {\n-                if ((en.getWeight() <= 50 && lv) || (en.getWeight() > 50 && !lv)) {\n-                    num++;\n+                switch (p.getQuality()) {\n+                    case Part.QUALITY_A: {\n+                        if (margin >= 4) {\n+                            p.improveQuality();\n+                        }\n+                        if (!campaignOptions.useUnofficialMaintenance()) {\n+                            if (margin < -6) {\n+                                partsToDamage.put(p, 4);\n+                            } else if (margin < -4) {\n+                                partsToDamage.put(p, 3);\n+                            } else if (margin == -4) {\n+                                partsToDamage.put(p, 2);\n+                            } else if (margin < -1) {\n+                                partsToDamage.put(p, 1);\n+                            }\n+                        } else if (margin < -6) {\n+                            partsToDamage.put(p, 1);\n+                        }\n+                        break;\n+                    }\n+                    case Part.QUALITY_B: {\n+                        if (margin >= 4) {\n+                            p.improveQuality();\n+                        } else if (margin < -5) {\n+                            p.decreaseQuality();\n+                        }\n+                        if (!campaignOptions.useUnofficialMaintenance()) {\n+                            if (margin < -6) {\n+                                partsToDamage.put(p, 2);\n+                            } else if (margin < -2) {\n+                                partsToDamage.put(p, 1);\n+                            }\n+                        }\n+                        break;\n+                    }\n+                    case Part.QUALITY_C: {\n+                        if (margin < -4) {\n+                            p.decreaseQuality();\n+                        } else if (margin >= 5) {\n+                            p.improveQuality();\n+                        }\n+                        if (!campaignOptions.useUnofficialMaintenance()) {\n+                            if (margin < -6) {\n+                                partsToDamage.put(p, 2);\n+                            } else if (margin < -3) {\n+                                partsToDamage.put(p, 1);\n+                            }\n+                        }\n+                        break;\n+                    }\n+                    case Part.QUALITY_D: {\n+                        if (margin < -3) {\n+                            p.decreaseQuality();\n+                            if ((margin < -4) && !campaignOptions.useUnofficialMaintenance()) {\n+                                partsToDamage.put(p, 1);\n+                            }\n+                        } else if (margin >= 5) {\n+                            p.improveQuality();\n+                        }\n+                        break;\n+                    }\n+                    case Part.QUALITY_E:\n+                        if (margin < -2) {\n+                            p.decreaseQuality();\n+                            if ((margin < -5) && !campaignOptions.useUnofficialMaintenance()) {\n+                                partsToDamage.put(p, 1);\n+                            }\n+                        } else if (margin >= 6) {\n+                            p.improveQuality();\n+                        }\n+                        break;\n+                    case Part.QUALITY_F:\n+                    default:\n+                        if (margin < -2) {\n+                            p.decreaseQuality();\n+                            if (margin < -6 && !campaignOptions.useUnofficialMaintenance()) {\n+                                partsToDamage.put(p, 1);\n+                            }\n+                        }\n+                        // TODO: award XP point if margin >= 6 (make this optional)\n+                        //if (margin >= 6) {\n+                        //\n+                        //}\n+                        break;\n                 }\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_PROTOMECH && en instanceof Protomech) {\n-                num++;\n-                continue;\n+                if (p.getQuality() > oldQuality) {\n+                    partReport += \": <font color='green'>new quality is \" + p.getQualityName() + \"</font>\";\n+                } else if (p.getQuality() < oldQuality) {\n+                    partReport += \": <font color='red'>new quality is \" + p.getQualityName() + \"</font>\";\n+                } else {\n+                    partReport += \": quality remains \" + p.getQualityName();\n+                }\n+                if (null != partsToDamage.get(p)) {\n+                    if (partsToDamage.get(p) > 3) {\n+                        partReport += \", <font color='red'><b>part destroyed</b></font>\";\n+                    } else {\n+                        partReport += \", <font color='red'><b>part damaged</b></font>\";\n+                    }\n+                }\n+                maintenanceReport.append(partReport).append(\"<br>\");\n             }\n-        }\n \n-        if (type == Entity.ETYPE_MECH) {\n-            if (getTotalMechBays() > num) {\n-                return num;\n+            int nDamage = 0;\n+            int nDestroy = 0;\n+            for (Map.Entry<Part, Integer> p : partsToDamage.entrySet()) {\n+                int damage = p.getValue();\n+                if (damage > 3) {\n+                    nDestroy++;\n+                    p.getKey().remove(false);\n+                } else {\n+                    p.getKey().doMaintenanceDamage(damage);\n+                    nDamage++;\n+                }\n             }\n-            return getTotalMechBays();\n-        }\n \n-        if (type == Entity.ETYPE_AERO) {\n-            if (getTotalASFBays() > num) {\n-                return num;\n-            }\n-            return getTotalASFBays();\n-        }\n+            u.setLastMaintenanceReport(maintenanceReport.toString());\n \n-        if (type == Entity.ETYPE_INFANTRY) {\n-            if (getTotalInfantryBays() > num) {\n-                return num;\n+            if (getCampaignOptions().logMaintenance()) {\n+                MekHQ.getLogger().info(getClass(), \"doMaintenance\", maintenanceReport.toString());\n             }\n-            return getTotalInfantryBays();\n-        }\n \n-        if (type == Entity.ETYPE_BATTLEARMOR) {\n-            if (getTotalBattleArmorBays() > num) {\n-                return num;\n+            int quality = u.getQuality();\n+            String qualityString;\n+            boolean reverse = getCampaignOptions().reverseQualityNames();\n+            if (quality > qualityOrig) {\n+                qualityString = \"<font color='green'>Overall quality improves from \"\n+                        + Part.getQualityName(qualityOrig, reverse) + \" to \" + Part.getQualityName(quality, reverse)\n+                        + \"</font>\";\n+            } else if (quality < qualityOrig) {\n+                qualityString = \"<font color='red'>Overall quality declines from \"\n+                        + Part.getQualityName(qualityOrig, reverse) + \" to \" + Part.getQualityName(quality, reverse)\n+                        + \"</font>\";\n+            } else {\n+                qualityString = \"Overall quality remains \" + Part.getQualityName(quality, reverse);\n             }\n-            return getTotalBattleArmorBays();\n-        }\n-\n-        if (type == Entity.ETYPE_TANK) {\n-            if (lv) {\n-                if (getTotalLightVehicleBays() > num) {\n-                    return num;\n-                }\n-                return getTotalLightVehicleBays();\n+            String damageString = \"\";\n+            if (nDamage > 0) {\n+                damageString += nDamage + \" parts were damaged. \";\n             }\n-            if (getTotalHeavyVehicleBays() > num) {\n-                return num;\n+            if (nDestroy > 0) {\n+                damageString += nDestroy + \" parts were destroyed.\";\n             }\n-            return getTotalHeavyVehicleBays();\n-        }\n-\n-        if (type == Entity.ETYPE_SMALL_CRAFT) {\n-            if (getTotalSmallCraftBays() > num) {\n-                return num;\n+            if (!damageString.isEmpty()) {\n+                damageString = \"<b><font color='red'>\" + damageString + \"</b></font> [<a href='REPAIR|\" + u.getId()\n+                        + \"'>Repair bay</a>]\";\n             }\n-            return getTotalSmallCraftBays();\n-        }\n-\n-        if (type == Entity.ETYPE_PROTOMECH) {\n-            if (getTotalProtomechBays() > num) {\n-                return num;\n+            String paidString = \"\";\n+            if (!paidMaintenance) {\n+                paidString = \"<font color='red'>Could not afford maintenance costs, so check is at a penalty.</font>\";\n             }\n-            return getTotalProtomechBays();\n-        }\n+            addReport(techNameLinked + \" performs maintenance on \" + u.getHyperlinkedName() + \". \" + paidString\n+                    + qualityString + \". \" + damageString + \" [<a href='MAINTENANCE|\" + u.getId()\n+                    + \"'>Get details</a>]\");\n \n-        if (type == Entity.ETYPE_DROPSHIP) {\n-            if (getTotalDockingCollars() > num) {\n-                return num;\n-            }\n-            return getTotalDockingCollars();\n+            u.resetDaysSinceMaintenance();\n         }\n-\n-        return -1; // default, this is an error condition\n     }\n \n-    public String getTransportDetails() {\n-        int noMech = Math.max(getNumberOfUnitsByType(Entity.ETYPE_MECH) - getOccupiedBays(Entity.ETYPE_MECH), 0);\n-        int noDS = Math.max(getNumberOfUnitsByType(Entity.ETYPE_DROPSHIP) - getOccupiedBays(Entity.ETYPE_DROPSHIP), 0);\n-        int noSC = Math.max(getNumberOfUnitsByType(Entity.ETYPE_SMALL_CRAFT) - getOccupiedBays(Entity.ETYPE_SMALL_CRAFT), 0);\n-        @SuppressWarnings(\"unused\") // FIXME: What type of bays do ConvFighters use?\n-        int noCF = Math\n-                .max(getNumberOfUnitsByType(Entity.ETYPE_CONV_FIGHTER) - getOccupiedBays(Entity.ETYPE_CONV_FIGHTER), 0);\n-        int noASF = Math.max(getNumberOfUnitsByType(Entity.ETYPE_AERO) - getOccupiedBays(Entity.ETYPE_AERO), 0);\n-        int nolv = Math.max(getNumberOfUnitsByType(Entity.ETYPE_TANK, false, true) - getOccupiedBays(Entity.ETYPE_TANK, true), 0);\n-        int nohv = Math.max(getNumberOfUnitsByType(Entity.ETYPE_TANK) - getOccupiedBays(Entity.ETYPE_TANK), 0);\n-        int noinf = Math.max(getNumberOfUnitsByType(Entity.ETYPE_INFANTRY) - getOccupiedBays(Entity.ETYPE_INFANTRY), 0);\n-        int noBA = Math.max(getNumberOfUnitsByType(Entity.ETYPE_BATTLEARMOR) - getOccupiedBays(Entity.ETYPE_BATTLEARMOR), 0);\n-        @SuppressWarnings(\"unused\") // FIXME: This should be used somewhere...\n-        int noProto = Math.max(getNumberOfUnitsByType(Entity.ETYPE_PROTOMECH) - getOccupiedBays(Entity.ETYPE_PROTOMECH),\n-                0);\n-        int freehv = Math.max(getTotalHeavyVehicleBays() - getOccupiedBays(Entity.ETYPE_TANK), 0);\n-        int freeinf = Math.max(getTotalInfantryBays() - getOccupiedBays(Entity.ETYPE_INFANTRY), 0);\n-        int freeba = Math.max(getTotalBattleArmorBays() - getOccupiedBays(Entity.ETYPE_BATTLEARMOR), 0);\n-        int freeSC = Math.max(getTotalSmallCraftBays() - getOccupiedBays(Entity.ETYPE_SMALL_CRAFT), 0);\n-        int mothballedAsCargo = Math.max(getNumberOfUnitsByType(Unit.ETYPE_MOTHBALLED), 0);\n-\n-        String asfAppend = \"\";\n-        int newNoASF = Math.max(noASF - freeSC, 0);\n-        int placedASF = Math.max(noASF - newNoASF, 0);\n-        if (noASF > 0 && freeSC > 0) {\n-            asfAppend = \" [\" + placedASF + \" ASF will be placed in Small Craft bays]\";\n-            freeSC -= placedASF;\n-        }\n-\n-        String lvAppend = \"\";\n-        int newNolv = Math.max(nolv - freehv, 0);\n-        int placedlv = Math.max(nolv - newNolv, 0);\n-        if (nolv > 0 && freehv > 0) {\n-            lvAppend = \" [\" + placedlv + \" Light Vehicles will be placed in Heavy Vehicle bays]\";\n-            freehv -= placedlv;\n-        }\n-\n-        if (noBA > 0 && freeinf > 0) {\n-\n-        }\n-\n-        if (noinf > 0 && freeba > 0) {\n-\n-        }\n-\n-        StringBuffer sb = new StringBuffer(\"Transports\\n\\n\");\n-\n-        // Lets do Mechs first.\n-        sb.append(String.format(\"%-35s      %4d (%4d)      %-35s     %4d\\n\", \"Mech Bays (Occupied):\",\n-                getTotalMechBays(), getOccupiedBays(Entity.ETYPE_MECH), \"Mechs Not Transported:\", noMech));\n-\n-        // Lets do ASF next.\n-        sb.append(String.format(\"%-35s      %4d (%4d)      %-35s     %4d%s\\n\", \"ASF Bays (Occupied):\",\n-                getTotalASFBays(), getOccupiedBays(Entity.ETYPE_AERO), \"ASF Not Transported:\", noASF, asfAppend));\n-\n-        // Lets do Light Vehicles next.\n-        sb.append(String.format(\"%-35s      %4d (%4d)      %-35s     %4d%s\\n\", \"Light Vehicle Bays (Occupied):\",\n-                getTotalLightVehicleBays(), getOccupiedBays(Entity.ETYPE_TANK, true), \"Light Vehicles Not Transported:\",\n-                nolv, lvAppend));\n-\n-        // Lets do Heavy Vehicles next.\n-        sb.append(String.format(\"%-35s      %4d (%4d)      %-35s     %4d\\n\", \"Heavy Vehicle Bays (Occupied):\",\n-                getTotalHeavyVehicleBays(), getOccupiedBays(Entity.ETYPE_TANK), \"Heavy Vehicles Not Transported:\",\n-                nohv));\n-\n-        if (noASF > 0 && freeSC > 0) {\n-            // Lets do ASF in Free Small Craft Bays next.\n-            sb.append(String.format(\"%-35s   %4d (%4d)      %-35s     %4d\\n\", \"   Light Vehicles in Heavy Vehicle Bays (Occupied):\",\n-                    getTotalHeavyVehicleBays(), getOccupiedBays(Entity.ETYPE_TANK) + placedlv,\n-                    \"Light Vehicles Not Transported:\", newNolv));\n-        }\n-\n-        if (nolv > 0 && freehv > 0) {\n-\n-        }\n-\n-        // Lets do Infantry next.\n-        sb.append(String.format(\"%-35s      %4d (%4d)      %-35s     %4d\\n\", \"Infantry Bays (Occupied):\",\n-                getTotalInfantryBays(), getOccupiedBays(Entity.ETYPE_INFANTRY), \"Infantry Not Transported:\", noinf));\n-\n-        if (noBA > 0 && freeinf > 0) {\n-\n-        }\n-\n-        // Lets do Battle Armor next.\n-        sb.append(String.format(\"%-35s      %4d (%4d)      %-35s     %4d\\n\", \"Battle Armor Bays (Occupied):\",\n-                getTotalBattleArmorBays(), getOccupiedBays(Entity.ETYPE_BATTLEARMOR), \"Battle Armor Not Transported:\",\n-                noBA));\n-\n-        if (noinf > 0 && freeba > 0) {\n-\n-        }\n-\n-        // Lets do Small Craft next.\n-        sb.append(String.format(\"%-35s      %4d (%4d)      %-35s     %4d\\n\", \"Small Craft Bays (Occupied):\",\n-                getTotalSmallCraftBays(), getOccupiedBays(Entity.ETYPE_SMALL_CRAFT), \"Small Craft Not Transported:\",\n-                noSC));\n-\n-        if (noASF > 0 && freeSC > 0) {\n-            // Lets do ASF in Free Small Craft Bays next.\n-            sb.append(String.format(\"%-35s   %4d (%4d)      %-35s     %4d\\n\", \"   ASF in Small Craft Bays (Occupied):\",\n-                    getTotalSmallCraftBays(), getOccupiedBays(Entity.ETYPE_SMALL_CRAFT) + placedASF,\n-                    \"ASF Not Transported:\", newNoASF));\n-        }\n-\n-        // Lets do Protomechs next.\n-        sb.append(String.format(\"%-35s      %4d (%4d)      %-35s     %4d\\n\", \"Protomech Bays (Occupied):\",\n-                getTotalProtomechBays(), getOccupiedBays(Entity.ETYPE_PROTOMECH), \"Protomechs Not Transported:\", noSC));\n-\n-        sb.append(\"\\n\\n\");\n-\n-        sb.append(String.format(\"%-35s      %4d (%4d)      %-35s     %4d\\n\", \"Docking Collars (Occupied):\",\n-                getTotalDockingCollars(), getOccupiedBays(Entity.ETYPE_DROPSHIP), \"Dropships Not Transported:\", noDS));\n-\n-        sb.append(\"\\n\\n\");\n-\n-        sb.append(String.format(\"%-35s      %4d\\n\", \"Mothballed Units (see Cargo report)\", mothballedAsCargo));\n-\n-        return new String(sb);\n-    }\n-\n-    public String getCombatPersonnelDetails() {\n-        int[] countPersonByType = new int[Person.T_NUM];\n-        int countTotal = 0;\n-        int countInjured = 0;\n-        int countMIA = 0;\n-        int countKIA = 0;\n-        int countRetired = 0;\n-        Money salary = Money.zero();\n-\n+    public void initTimeInService() {\n         for (Person p : getPersonnel()) {\n-            // Add them to the total count\n-            if (Person.isCombatRole(p.getPrimaryRole()) && !p.isPrisoner()\n-                    && !p.isBondsman() && p.isActive()) {\n-                countPersonByType[p.getPrimaryRole()]++;\n-                countTotal++;\n-                if (getCampaignOptions().useAdvancedMedical()\n-                        && p.getInjuries().size() > 0) {\n-                    countInjured++;\n-                } else if (p.getHits() > 0) {\n-                    countInjured++;\n+            if (!p.isDependent() && p.getPrisonerStatus().isFree()) {\n+                LocalDate join = null;\n+                for (LogEntry e : p.getPersonnelLog()) {\n+                    if (join == null) {\n+                        // If by some nightmare there is no Joined date just use the first entry.\n+                        join = e.getDate();\n+                    }\n+                    if (e.getDesc().startsWith(\"Joined \") || e.getDesc().startsWith(\"Freed \")) {\n+                        join = e.getDate();\n+                        break;\n+                    }\n                 }\n-                salary = salary.plus(p.getSalary());\n-            } else if (Person.isCombatRole(p.getPrimaryRole())\n-                    && p.getStatus() == Person.S_RETIRED) {\n-                countRetired++;\n-            } else if (Person.isCombatRole(p.getPrimaryRole())\n-                    && p.getStatus() == Person.S_MIA) {\n-                countMIA++;\n-            } else if (Person.isCombatRole(p.getPrimaryRole())\n-                    && p.getStatus() == Person.S_KIA) {\n-                countKIA++;\n-            }\n-        }\n \n-        StringBuffer sb = new StringBuffer(\"Combat Personnel\\n\\n\");\n-\n-        String buffer = String.format(\"%-30s        %4s\\n\", \"Total Combat Personnel\",\n-                countTotal);\n-        sb.append(buffer);\n-\n-        for (int i = 0; i < Person.T_NUM; i++) {\n-            if (Person.isCombatRole(i)) {\n-                buffer = String.format(\"    %-30s    %4s\\n\", Person.getRoleDesc(i, getFaction().isClan()),\n-                        countPersonByType[i]);\n-                sb.append(buffer);\n+                p.setRecruitment((join != null) ? join : getLocalDate().minusYears(1));\n             }\n         }\n-\n-        buffer = String.format(\"%-30s        %4s\\n\",\n-                \"Injured Combat Personnel\", countInjured);\n-        sb.append(\"\\n\" + buffer);\n-        buffer = String.format(\"%-30s        %4s\\n\", \"MIA Combat Personnel\",\n-                countMIA);\n-        sb.append(buffer);\n-        buffer = String.format(\"%-30s        %4s\\n\", \"KIA Combat Personnel\",\n-                countKIA);\n-        sb.append(buffer);\n-        buffer = String.format(\"%-30s        %4s\\n\",\n-                \"Retired Combat Personnel\", countRetired);\n-        sb.append(buffer);\n-\n-        sb.append(\"\\nMonthly Salary For Combat Personnel: \" + salary.toAmountAndSymbolString());\n-\n-        return new String(sb);\n     }\n \n-    public String getSupportPersonnelDetails() {\n-        int[] countPersonByType = new int[Person.T_NUM];\n-        int countTotal = 0;\n-        int countInjured = 0;\n-        int countMIA = 0;\n-        int countKIA = 0;\n-        int countRetired = 0;\n-        Money salary = Money.zero();\n-        int prisoners = 0;\n-        int bondsmen = 0;\n-\n+    public void initTimeInRank() {\n         for (Person p : getPersonnel()) {\n-            // Add them to the total count\n-            if (Person.isSupportRole(p.getPrimaryRole()) && !p.isPrisoner()\n-                    && !p.isBondsman() && p.isActive()) {\n-                countPersonByType[p.getPrimaryRole()]++;\n-                countTotal++;\n-                if (p.getInjuries().size() > 0 || p.getHits() > 0) {\n-                    countInjured++;\n-                }\n-                salary = salary.plus(p.getSalary());\n-            } else if (p.isPrisoner() && p.isActive()) {\n-                prisoners++;\n-                if (p.getInjuries().size() > 0 || p.getHits() > 0) {\n-                    countInjured++;\n-                }\n-            } else if (p.isBondsman() && p.isActive()) {\n-                bondsmen++;\n-                if (p.getInjuries().size() > 0 || p.getHits() > 0) {\n-                    countInjured++;\n-                }\n-            } else if (Person.isSupportRole(p.getPrimaryRole())\n-                    && p.getStatus() == Person.S_RETIRED) {\n-                countRetired++;\n-            } else if (Person.isSupportRole(p.getPrimaryRole())\n-                    && p.getStatus() == Person.S_MIA) {\n-                countMIA++;\n-            } else if (Person.isSupportRole(p.getPrimaryRole())\n-                    && p.getStatus() == Person.S_KIA) {\n-                countKIA++;\n-            }\n-        }\n+            if (!p.isDependent() && p.getPrisonerStatus().isFree()) {\n \n-        StringBuffer sb = new StringBuffer(\"Support Personnel\\n\\n\");\n+                LocalDate join = null;\n+                for (LogEntry e : p.getPersonnelLog()) {\n+                    if (join == null) {\n+                        // If by some nightmare there is no date from the below, just use the first entry.\n+                        join = e.getDate();\n+                    }\n \n-        String buffer = String.format(\"%-30s        %4s\\n\", \"Total Support Personnel\",\n-                countTotal);\n-        sb.append(buffer);\n+                    if (e.getDesc().startsWith(\"Joined \") || e.getDesc().startsWith(\"Freed \")\n+                            || e.getDesc().startsWith(\"Promoted \") || e.getDesc().startsWith(\"Demoted \")) {\n+                        join = e.getDate();\n+                    }\n+                }\n \n-        for (int i = 0; i < Person.T_NUM; i++) {\n-            if (Person.isSupportRole(i)) {\n-                buffer = String.format(\"    %-30s    %4s\\n\", Person.getRoleDesc(i, getFaction().isClan()),\n-                        countPersonByType[i]);\n-                sb.append(buffer);\n+                // For that one in a billion chance the log is empty. Clone today's date and subtract a year\n+                p.setLastRankChangeDate((join != null) ? join : getLocalDate().minusYears(1));\n             }\n         }\n-\n-        buffer = String.format(\"%-30s        %4s\\n\",\n-                \"Injured Support Personnel\", countInjured);\n-        sb.append(\"\\n\" + buffer);\n-        buffer = String.format(\"%-30s        %4s\\n\", \"MIA Support Personnel\",\n-                countMIA);\n-        sb.append(buffer);\n-        buffer = String.format(\"%-30s        %4s\\n\", \"KIA Support Personnel\",\n-                countKIA);\n-        sb.append(buffer);\n-        buffer = String.format(\"%-30s        %4s\\n\",\n-                \"Retired Support Personnel\", countRetired);\n-        sb.append(buffer);\n-\n-        sb.append(\"\\nMonthly Salary For Support Personnel: \" + salary.toAmountAndSymbolString());\n-\n-        sb.append(String.format(\"\\nYou have \" + prisoners + \" prisoner%s\",\n-                prisoners == 1 ? \"\" : \"s\"));\n-        sb.append(String.format(\"\\nYou have \" + bondsmen + \" %s\",\n-                bondsmen == 1 ? \"bondsman\" : \"bondsmen\"));\n-\n-        return new String(sb);\n     }\n \n-    public void doMaintenance(Unit u) {\n-        if (!u.requiresMaintenance()) {\n-            return;\n-        }\n-        // lets start by checking times\n-        Person tech = u.getTech();\n-        int minutesUsed = u.getMaintenanceTime();\n-        int astechsUsed = getAvailableAstechs(minutesUsed, false);\n-        boolean maintained = null != tech\n-                && tech.getMinutesLeft() >= minutesUsed && !tech.isMothballing();\n-        boolean paidMaintenance = true;\n-        if (maintained) {\n-            // use the time\n-            tech.setMinutesLeft(tech.getMinutesLeft() - minutesUsed);\n-            astechPoolMinutes -= astechsUsed * minutesUsed;\n-        }\n-        u.incrementDaysSinceMaintenance(maintained, astechsUsed);\n-        if (u.getDaysSinceMaintenance() >= getCampaignOptions().getMaintenanceCycleDays()) {\n-            // maybe use the money\n-            if (campaignOptions.payForMaintain()) {\n-                if (finances.debit(u.getMaintenanceCost(), Transaction.C_MAINTAIN, \"Maintenance for \" + u.getName(),\n-                        calendar.getTime())) {\n-                } else {\n-                    addReport(\"<font color='red'><b>You cannot afford to pay maintenance costs for \"\n-                            + u.getHyperlinkedName() + \"!</b></font>\");\n-                    paidMaintenance = false;\n-                }\n-            }\n-            if (getCampaignOptions().checkMaintenance()) {\n-                // its time for a maintenance check\n-                int qualityOrig = u.getQuality();\n-                String techName = \"Nobody\";\n-                String techNameLinked = techName;\n-                if (null != tech) {\n-                    techName = tech.getFullTitle();\n-                    techNameLinked = tech.getHyperlinkedFullTitle();\n-                }\n-                // dont do actual damage until we clear the for loop to avoid\n-                // concurrent mod problems\n-                // put it into a hash - 4 points of damage will mean destruction\n-                HashMap<Integer, Integer> partsToDamage = new HashMap<>();\n-                String maintenanceReport = \"<emph>\" + techName + \" performing maintenance</emph><br><br>\";\n-                for (Part p : u.getParts()) {\n-                    String partReport = \"<b>\" + p.getName() + \"</b> (Quality \" + p.getQualityName() + \")\";\n-                    if (!p.needsMaintenance()) {\n-                        continue;\n-                    }\n-                    int oldQuality = p.getQuality();\n-                    TargetRoll target = getTargetForMaintenance(p, tech);\n-                    if (!paidMaintenance) {\n-                        // I should probably make this modifier user inputtable\n-                        target.addModifier(1, \"did not pay maintenance\");\n-                    }\n-                    partReport += \", TN \" + target.getValue() + \"[\" + target.getDesc() + \"]\";\n-                    int roll = Compute.d6(2);\n-                    int margin = roll - target.getValue();\n-                    partReport += \" rolled a \" + roll + \", margin of \" + margin;\n-                    switch (p.getQuality()) {\n-                        case Part.QUALITY_F:\n-                            if (margin < -2) {\n-                                p.decreaseQuality();\n-                                if (margin < -6 && !campaignOptions.useUnofficialMaintenance()) {\n-                                    partsToDamage.put(p.getId(), 1);\n-                                }\n-                            }\n-                            if (margin >= 6) {\n-                                // TODO: award XP point (make this optional)\n-                            }\n-                            break;\n-                        case Part.QUALITY_E:\n-                            if (margin < -2) {\n-                                p.decreaseQuality();\n-                                if (margin < -5 && !campaignOptions.useUnofficialMaintenance()) {\n-                                    partsToDamage.put(p.getId(), 1);\n-                                }\n-                            }\n-                            if (margin >= 6) {\n-                                p.improveQuality();\n-                            }\n-                            break;\n-                        case Part.QUALITY_D:\n-                            if (margin < -3) {\n-                                p.decreaseQuality();\n-                                if (margin < -4 && !campaignOptions.useUnofficialMaintenance()) {\n-                                    partsToDamage.put(p.getId(), 1);\n-                                }\n-                            }\n-                            if (margin >= 5) {\n-                                p.improveQuality();\n-                            }\n-                            break;\n-                        case Part.QUALITY_C:\n-                            if (margin < -4) {\n-                                p.decreaseQuality();\n-                            }\n-                            if (!campaignOptions.useUnofficialMaintenance()) {\n-                                if (margin < -6) {\n-                                    partsToDamage.put(p.getId(), 2);\n-                                } else if (margin < -3) {\n-                                    partsToDamage.put(p.getId(), 1);\n-                                }\n-                            }\n-                            if (margin >= 5) {\n-                                p.improveQuality();\n-                            }\n-                            break;\n-                        case Part.QUALITY_B:\n-                            if (margin < -5) {\n-                                p.decreaseQuality();\n-                            }\n-                            if (!campaignOptions.useUnofficialMaintenance()) {\n-                                if (margin < -6) {\n-                                    partsToDamage.put(p.getId(), 2);\n-                                } else if (margin < -2) {\n-                                    partsToDamage.put(p.getId(), 1);\n-                                }\n-                            }\n-                            if (margin >= 4) {\n-                                p.improveQuality();\n-                            }\n-                            break;\n-                        case Part.QUALITY_A:\n-                            if (!campaignOptions.useUnofficialMaintenance()) {\n-                                if (margin < -6) {\n-                                    partsToDamage.put(p.getId(), 4);\n-                                } else if (margin < -4) {\n-                                    partsToDamage.put(p.getId(), 3);\n-                                } else if (margin == -4) {\n-                                    partsToDamage.put(p.getId(), 2);\n-                                } else if (margin < -1) {\n-                                    partsToDamage.put(p.getId(), 1);\n-                                }\n-                            } else if (margin < -6) {\n-                                partsToDamage.put(p.getId(), 1);\n-                            }\n-                            if (margin >= 4) {\n-                                p.improveQuality();\n-                            }\n-                            break;\n-                    }\n-                    if (p.getQuality() > oldQuality) {\n-                        partReport += \": <font color='green'>new quality is \" + p.getQualityName() + \"</font>\";\n-                    } else if (p.getQuality() < oldQuality) {\n-                        partReport += \": <font color='red'>new quality is \" + p.getQualityName() + \"</font>\";\n-                    } else {\n-                        partReport += \": quality remains \" + p.getQualityName();\n-                    }\n-                    if (null != partsToDamage.get(p.getId())) {\n-                        if (partsToDamage.get(p.getId()) > 3) {\n-                            partReport += \", <font color='red'><b>part destroyed</b></font>\";\n-                        } else {\n-                            partReport += \", <font color='red'><b>part damaged</b></font>\";\n-                        }\n-                    }\n-                    maintenanceReport += partReport + \"<br>\";\n-                }\n-                int nDamage = 0;\n-                int nDestroy = 0;\n-                for (int key : partsToDamage.keySet()) {\n-                    Part p = getPart(key);\n-                    if (null != p) {\n-                        int damage = partsToDamage.get(key);\n-                        if (damage > 3) {\n-                            nDestroy++;\n-                            p.remove(false);\n-                        } else {\n-                            p.doMaintenanceDamage(damage);\n-                            nDamage++;\n-                        }\n+    public void initRetirementDateTracking() {\n+        for (Person person : getPersonnel()) {\n+            if (person.getStatus().isRetired()) {\n+                LocalDate retired = null;\n+                LocalDate lastLoggedDate = null;\n+                for (LogEntry entry : person.getPersonnelLog()) {\n+                    lastLoggedDate = entry.getDate();\n+                    if (entry.getDesc().startsWith(\"Retired\")) {\n+                        retired = entry.getDate();\n                     }\n                 }\n-                u.setLastMaintenanceReport(maintenanceReport);\n-                int quality = u.getQuality();\n-                String qualityString;\n-                boolean reverse = getCampaignOptions().reverseQualityNames();\n-                if (quality > qualityOrig) {\n-                    qualityString = \"<font color='green'>Overall quality improves from \"\n-                            + Part.getQualityName(qualityOrig, reverse) + \" to \" + Part.getQualityName(quality, reverse)\n-                            + \"</font>\";\n-                } else if (quality < qualityOrig) {\n-                    qualityString = \"<font color='red'>Overall quality declines from \"\n-                            + Part.getQualityName(qualityOrig, reverse) + \" to \" + Part.getQualityName(quality, reverse)\n-                            + \"</font>\";\n-                } else {\n-                    qualityString = \"Overall quality remains \" + Part.getQualityName(quality, reverse);\n-                }\n-                String damageString = \"\";\n-                if (nDamage > 0) {\n-                    damageString += nDamage + \" parts were damaged. \";\n-                }\n-                if (nDestroy > 0) {\n-                    damageString += nDestroy + \" parts were destroyed.\";\n-                }\n-                if (!damageString.isEmpty()) {\n-                    damageString = \"<b><font color='red'>\" + damageString + \"</b></font> [<a href='REPAIR|\" + u.getId()\n-                            + \"'>Repair bay</a>]\";\n-                }\n-                String paidString = \"\";\n-                if (!paidMaintenance) {\n-                    paidString = \"<font color='red'>Could not afford maintenance costs, so check is at a penalty.</font>\";\n-                }\n-                addReport(techNameLinked + \" performs maintenance on \" + u.getHyperlinkedName() + \". \" + paidString\n-                        + qualityString + \". \" + damageString + \" [<a href='MAINTENANCE|\" + u.getId()\n-                        + \"'>Get details</a>]\");\n-            }\n-            u.resetDaysSinceMaintenance();\n-        }\n-    }\n \n-    public void initTimeInService() {\n-        for (Person p : getPersonnel()) {\n-            Date join = null;\n-            for (LogEntry e : p.getPersonnelLog()) {\n-                if (join == null){\n-                    // If by some nightmare there is no Joined date just use the first entry.\n-                    join = e.getDate();\n-                }\n-                if (e.getDesc().startsWith(\"Joined \") || e.getDesc().startsWith(\"Freed \")) {\n-                    join = e.getDate();\n-                    break;\n-                }\n-            }\n-            if (!p.isDependent() && !p.isPrisoner() && !p.isBondsman()) {\n-                GregorianCalendar cal = (GregorianCalendar) GregorianCalendar.getInstance();\n-                // For that one in a billion chance the log is empty. Clone todays date and subtract a year\n-                if (join == null) {\n-                    cal = (GregorianCalendar)calendar.clone();\n-                    cal.add(Calendar.YEAR, -1);\n-                    p.setRecruitment(cal);\n-                } else {\n-                    cal.setTime(join);\n-                    p.setRecruitment(cal);\n+                if (retired == null) {\n+                    retired = lastLoggedDate;\n                 }\n+\n+                // For that one in a billion chance the log is empty. Clone today's date and subtract a year\n+                person.setRetirement((retired != null) ? retired : getLocalDate().minusYears(1));\n             }\n         }\n     }\n \n     public void initAtB(boolean newCampaign) {\n-        getRetirementDefectionTracker().setLastRetirementRoll(getCalendar());\n+        getRetirementDefectionTracker().setLastRetirementRoll(getLocalDate());\n \n         if (!newCampaign) {\n             /*\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "3f55aabad31fb84ff1e5af9c8caac7bd8c8999a0", "message": "Merge commit", "committedDate": null}, {"oid": "a0c1cbf9746ed9486f08ce4aa2376828e846c786", "committedDate": "2019-02-26 21:45:56 -0500", "message": "merge"}, {"oid": "3002e321d67f944da3a051a049f0706c0e353aa0", "committedDate": "2019-03-04 20:50:34 -0500", "message": "merge from upstream"}, {"oid": "34f5dfffab4318e94903fece9dbf49dd1ee475c7", "committedDate": "2019-04-23 22:53:00 -0400", "message": "continues work on track gui and rules"}, {"oid": "b1c2e0f95fc8ad45080d9962da602d5fe815c34b", "committedDate": "2019-04-26 22:02:27 -0400", "message": "hook up stratcon rules manager to mekhq event bus"}, {"oid": "6f180f04dabdd9901dc392b093561514eb2e84cc", "committedDate": "2019-05-04 12:17:55 -0400", "message": "merge from upstream"}, {"oid": "119ff411ebb80f91b83b3fe139bb911a79048b3d", "committedDate": "2019-05-12 15:48:11 -0400", "message": "scenario setup work"}, {"oid": "2548381ed541547a775bb8c96fd53802087ec9aa", "committedDate": "2019-06-20 23:58:58 -0400", "message": "merge from upstream"}, {"oid": "ed6a5c015aa33d0bffdcd3297b9482ce600eb146", "committedDate": "2020-04-11 22:33:14 -0400", "message": "merge from upstream"}, {"oid": "ca46ea5005775f38ad56f98bfb8899a187571e49", "committedDate": "2020-06-03 11:30:19 -0400", "message": "merge from upstream"}, {"oid": "b2f014d250be5b4b75ed3f765f10ee1781ab96ae", "committedDate": "2020-06-23 22:21:32 -0400", "message": "merge from upstream"}, {"oid": "2bd7638ed4cc2ad5bc80e4b1bc78ff091c318a87", "committedDate": "2020-07-13 00:06:30 -0400", "message": "merge from upstream"}, {"oid": "d4f035c262d3d9ea7b7f5e935a5807bf5275aa91", "committedDate": "2020-08-08 23:08:38 -0400", "message": "merge from upstream"}, {"oid": "5830ebef6d2f671d0b152f328436ab36bcddacf4", "committedDate": "2020-08-24 20:32:16 -0400", "message": "merge from upstream"}, {"oid": "c8622590fef59265a5a8c4f68676a4a628d0fc0a", "committedDate": "2020-08-26 23:17:49 -0400", "message": "multiple bug fixes and hookup to actual campaign"}, {"oid": "935339ac1b799e58664d736142b2a1fa0d9e4263", "committedDate": "2020-09-09 00:06:07 -0400", "message": "merge from upstream"}, {"oid": "c7d9edb3737ba14da075190a1292ac94bbd7e0f2", "committedDate": "2020-09-20 14:36:56 -0600", "message": "Adding code for a log entry when swapping TOE force."}, {"oid": "2e590a1dbeb8a7b132cd5d312b93af37b9e0620a", "committedDate": "2020-09-29 10:15:54 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_476"}, {"oid": "04f10ee4b7f5bf57284109439ec1ab178b15857e", "committedDate": "2020-10-06 21:41:18 -0400", "message": "merge from upstream"}, {"oid": "04a16de448a0c7d576a6c3c64c9d23ae08384bae", "committedDate": "2020-10-07 14:33:13 -0400", "message": "Split out cargo and hangar statistics from Campaign"}, {"oid": "796379c3c13e8dadad4ac4cfd29f02a30e9c2bd1", "committedDate": "2020-10-07 14:33:13 -0400", "message": "Split out accounting from the Campaign"}, {"oid": "a254e204d91c3fd90698936f8d21aba26aaf0142", "committedDate": "2020-10-07 14:33:14 -0400", "message": "Move PersonnelReport methods"}, {"oid": "361dde24295aa66e89fea69823b01cf497cf4664", "committedDate": "2020-10-07 14:33:14 -0400", "message": "Move more financial reporting out of Campaign"}, {"oid": "c28db6f06dec2b03e487c15f514685d852bdca1e", "committedDate": "2020-10-07 14:33:14 -0400", "message": "Remove unused methods"}, {"oid": "039786019051fddf3af641c0cc0e35e7c85eb156", "committedDate": "2020-10-07 15:49:11 -0400", "message": "Make testing Accountant easier for a Campaign"}, {"oid": "a72b07d7b8ec62055140cd346314602fb020119e", "committedDate": "2020-10-07 16:11:53 -0400", "message": "Make it easier to mock stats classes"}, {"oid": "0400aac175c219dc2fb73ea0a8dfbbf429aaff6e", "committedDate": "2020-10-07 16:45:26 -0400", "message": "Add forEachSparePart to improve performance"}, {"oid": "63e028b04713a41ec415910ea4d0ed03a3678864", "committedDate": "2020-10-08 13:32:32 -0400", "message": "Merge remote-tracking branch 'upstream/master' into move-accounting-and-stats-out-of-campaign"}, {"oid": "13de948b34166d73f4f7a2e5a8982c9f693b12bc", "committedDate": "2020-10-10 15:15:00 -0400", "message": "Use Person directly instead of IDs in Unit"}, {"oid": "923a477ddb1060c2a48c13cca7c5900a40c0f82a", "committedDate": "2020-10-10 15:15:00 -0400", "message": "Use Person instead of an ID"}, {"oid": "58291b29acbe7cc24a4491f3d3ab911f0468a7dc", "committedDate": "2020-10-10 15:41:57 -0400", "message": "Fix logic to check for Already Being Worked On"}, {"oid": "998ab0faf85804f17cc7444ae1b46c2591b5db1f", "committedDate": "2020-10-15 23:34:03 -0400", "message": "merge from upstream"}, {"oid": "75e396b885c6008c6f6a7d72f1bbd7aad8099970", "committedDate": "2020-10-16 16:29:27 -0400", "message": "Moving to an enum for mission status"}, {"oid": "24de5e9720cf823838bf74e4cf4eb562bedbb437", "committedDate": "2020-10-16 18:28:46 -0400", "message": "Merging useUnitRating with the UnitRatingMethod enum"}, {"oid": "ca615b8e13e2158834a33079c6f89b02504c0bf7", "committedDate": "2020-10-17 01:17:28 -0400", "message": "Moving to using AbstractIcon for constants"}, {"oid": "4a54c7e9a18be4084eb1d3748a891b46400bf53d", "committedDate": "2020-10-17 13:11:47 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_IconConstants"}, {"oid": "9c1a47e2e6268b362edd3d6eb2e39018b5802179", "committedDate": "2020-10-20 14:49:01 -0400", "message": "Address PR feedback"}, {"oid": "b5d38e8af270f50fc091db05cf882ea8380fe3a7", "committedDate": "2020-10-20 14:49:08 -0400", "message": "Merge remote-tracking branch 'upstream/master' into units-hold-actual-persons"}, {"oid": "f34ac06c3db416f5e852246e928d3b1c6c132500", "committedDate": "2020-10-20 21:00:04 -0400", "message": "Merge branch 'master' into dev_Windchild_MissionStatus"}, {"oid": "fbc730260407b11dc98571c9b5e184e8f05e6a89", "committedDate": "2020-10-22 12:56:22 -0400", "message": "Standardizing to use the PortraitChooser instead of the older icon selector"}, {"oid": "0637c9d04376fbc5378a09826bdd58e1092b97f0", "committedDate": "2020-10-22 15:07:25 -0400", "message": "Use Units rather than their IDs"}, {"oid": "d25f391110cab3b64118d5963e321c379f8ab3ec", "committedDate": "2020-10-22 15:07:25 -0400", "message": "Do not use Unit IDs in Refits"}, {"oid": "5bf80c3e80c7fd9247fee197d749605de4a4e17b", "committedDate": "2020-10-22 15:07:49 -0400", "message": "Merge branch 'master' into dev_Windchild_IconConstants"}, {"oid": "2eec6da85e021ce0398fd3d715071b7b625855ba", "committedDate": "2020-10-22 23:15:38 -0400", "message": "merge from upstream"}, {"oid": "599b0a3158d94a3eea50fe8314c55177a344c2a9", "committedDate": "2020-10-24 14:22:32 -0400", "message": "Merge remote-tracking branch 'upstream/master' into use-units-not-ids"}, {"oid": "1d9b9a6ee2a71f128d65bb7754463be3ca9a71bc", "committedDate": "2020-10-24 14:26:31 -0400", "message": "Address LGTM issues"}, {"oid": "9f22e79abf71f3d8cf935d5d83d4790af02b32ce", "committedDate": "2020-10-24 14:48:29 -0400", "message": "Add tests for transport unit sets"}, {"oid": "851026ff48ec4e39238b2c56212bac2ea7993670", "committedDate": "2020-10-26 14:53:19 -0400", "message": "Use new Warehouse type in Campaign (etc)"}, {"oid": "37fc5840de9bf6c5bb19b38767e1394be220e1b9", "committedDate": "2020-10-26 16:02:30 -0400", "message": "Move some event logic to the Warehouse"}, {"oid": "3f795a2b3ba1840a198ca067a1d76aed4429f699", "committedDate": "2020-10-26 17:26:50 -0400", "message": "Move removing child parts to the Warehouse"}, {"oid": "d597a8aab6c1b948ebfdcc3f58d2213acb04b200", "committedDate": "2020-10-27 12:29:29 -0400", "message": "Starting to implement edge fixes"}, {"oid": "9978a0b21dd7d6fbd2d0077748027c6ed31753b0", "committedDate": "2020-10-27 12:29:35 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_Edge"}, {"oid": "b2aea6b5d940c4fa06a42cd1b04559815323ab63", "committedDate": "2020-10-27 13:04:35 -0400", "message": "Working on edge code"}, {"oid": "fbd0d470437e527c764daa294d1521ca7509a6af", "committedDate": "2020-10-27 14:04:21 -0400", "message": "Implementing changes as per review"}, {"oid": "c883a5f8c0085c74e8f448ecd3c0f9c04227b067", "committedDate": "2020-10-27 17:22:03 -0400", "message": "Move spare part helpers to Warehouse and add tests"}, {"oid": "dfca32fc2a15a2908cd4f1277261d416fcad1f00", "committedDate": "2020-10-27 21:14:06 -0400", "message": "merge from upstream"}, {"oid": "a7d7c78d0149d3de3828501499fdf61b5ae75be6", "committedDate": "2020-10-28 14:17:13 -0400", "message": "Merge pull request #2167 from sixlettervariables/add-parts-warehouse"}, {"oid": "d9aa78378bd639bd9bd8b36e16e9d407d5c2f1a6", "committedDate": "2020-10-28 14:28:37 -0400", "message": "Clean up part events in Campaign"}, {"oid": "f6acac4474902742fd52f7d3d9cc3cf3c074d16a", "committedDate": "2020-10-28 15:35:29 -0400", "message": "Address LGTM nit"}, {"oid": "b60b5a84ad487fe05e6369a11fedccb4f233a69d", "committedDate": "2020-10-29 15:28:06 -0400", "message": "Move Hire Personnel for a Unit to an action"}, {"oid": "d32837864805c67ac3894ce3a6b84ee8dae064a3", "committedDate": "2020-10-29 15:43:23 -0400", "message": "Don't use unit IDs for parts needing service"}, {"oid": "92b838a6428bae18030b98719a0c20d399377282", "committedDate": "2020-10-29 15:51:09 -0400", "message": "Move unnecessary unit logic from Campaign and into Unit"}, {"oid": "fd327a8f439a378f8f34afcb3067fe57153dcc2d", "committedDate": "2020-11-03 21:23:25 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_MHQPortraitSelector"}, {"oid": "0cbe836f9e807faf4cbef1d391b1ce3ad0e865d1", "committedDate": "2020-11-04 16:17:23 -0500", "message": "Add Quartermaster to manage machines and materiel"}, {"oid": "18cddebe515dbc58e76c49ef789cb3f4b31bc8a2", "committedDate": "2020-11-06 14:57:11 -0500", "message": "Address PR feedback and fix #1801"}, {"oid": "dd8b9c84414cb11c30ec6e2d395e2260235cd73a", "committedDate": "2020-11-06 14:58:38 -0500", "message": "Fix extraneous whitespace"}, {"oid": "31c96a9e64873aa2840946dbb1c12d347994780d", "committedDate": "2020-11-06 16:10:50 -0500", "message": "Swapping portrait generation to use system-based file path comparison"}, {"oid": "8bf24b6a7be023940aad58a0c3c3ded1ee2a9358", "committedDate": "2020-11-06 16:50:16 -0500", "message": "Fixing merge conflicts"}, {"oid": "206529fd93c7b6efd22949d747ea14ec2a1942ed", "committedDate": "2020-11-06 19:38:46 -0500", "message": "Merge pull request #2185 from sixlettervariables/use-units-not-ids-for-transports"}, {"oid": "f246ee2085262fe713a9f24b3eaf6e7adb142e41", "committedDate": "2020-11-07 10:40:39 -0500", "message": "Moving portrait generation code into a random portrait generator"}, {"oid": "139d94f86981a4c6b681ec14d16630b99198024a", "committedDate": "2020-11-07 12:32:07 -0500", "message": "AbstractIcon: Simplifying icon-related code"}, {"oid": "cbec2bdc4861f772bb509fc69f37a8c053522347", "committedDate": "2020-11-07 12:39:03 -0500", "message": "Removing duplicate constants in campaign"}, {"oid": "e9c4a88af33312b049543ac024e2c32784a7b209", "committedDate": "2020-11-07 12:52:54 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_AIPS"}, {"oid": "76f57ccbde3ae98e58e5264c5d06be29b03ce3af", "committedDate": "2020-11-07 15:16:08 -0500", "message": "Merge pull request #2209 from Windchild292/dev_Windchild_RPG"}, {"oid": "067bacc6c00b10192faa2b4e13d4c2127ba75292", "committedDate": "2020-11-07 22:39:06 -0500", "message": "Merge pull request #2211 from Windchild292/dev_Windchild_AIPS"}, {"oid": "a38a43b4cc7f7670aa7ffad2bf318bc15334d0a1", "committedDate": "2020-11-08 13:55:37 -0500", "message": "Merge remote-tracking branch 'upstream/master' into add-quartermaster-2"}, {"oid": "6b4dfeadd20c22e92cb2a0328030ed58c3df5cd1", "committedDate": "2020-11-14 19:29:15 -0500", "message": "Swapping Genealogy and FormerSpouse to no longer use id when active."}, {"oid": "aa59e47ee67a276b3a415ab3cb761291fa2d1593", "committedDate": "2020-11-15 16:10:53 -0500", "message": "Only return non-zero quantities of parts, fixing #2231"}, {"oid": "24c2199bd396e7e059f3a3123c060fce92c04726", "committedDate": "2020-11-30 21:41:10 -0500", "message": "merge from upstream"}, {"oid": "6b3e4afa0664f35d2fc49a8e881b2fd7f22ea981", "committedDate": "2020-12-04 07:37:02 -0500", "message": "Use tested spare part consolidation logic"}, {"oid": "749469b9d6c8f7a36748d76c53dae5cc39365894", "committedDate": "2020-12-04 10:33:33 -0500", "message": "Fixup whitespace"}, {"oid": "cb8a407413b0629636afe9dc153a93699cbcb2da", "committedDate": "2020-12-04 12:21:25 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_476"}, {"oid": "7c0dd98fed591d24803031e815a39480fae3da18", "committedDate": "2020-12-04 12:24:21 -0500", "message": "Fixing merge conflitcs"}, {"oid": "d770e67e26237234553967696e546ef4cd5e6c4a", "committedDate": "2020-12-04 16:20:00 -0500", "message": "Moving ranks to their own folder"}, {"oid": "198ea362215a2605015f13d5baf7a6f9a27e2323", "committedDate": "2020-12-04 17:57:54 -0500", "message": "Moving ranks system names to the Rank XML file"}, {"oid": "c88ca2c1c698dfe730b493048b630ef6d20ce973", "committedDate": "2020-12-13 02:45:36 -0500", "message": "Restore AtBContract references in the ContractMarket #2141"}, {"oid": "dce8434c1c674caf8ba284f7e99a0da72a679958", "committedDate": "2020-12-14 18:14:37 -0500", "message": "Merge pull request #2263 from Windchild292/dev_Windchild_2200"}, {"oid": "02b7023e03f921ec06430d3a3bfbf3fd4d06f12d", "committedDate": "2020-12-16 17:45:57 -0500", "message": "Add the ability to swap out instances of static classes"}, {"oid": "6fe11ed3dea3b240bc594dd3153526f8fa1efcd1", "committedDate": "2020-12-22 17:15:50 -0500", "message": "merge from upstream"}, {"oid": "1080fdc3cc0abf4b10a986fa95243f6a883a2446", "committedDate": "2020-12-22 17:22:20 -0500", "message": "Do not display unknown armor types in the Parts In Use report, fixes #2298"}, {"oid": "26577933fe91fcc839a403192479257fcf64f842", "committedDate": "2020-12-25 17:30:07 -0500", "message": "PlayerColours, Colour Camo Standardization, and standardizing camo selector"}, {"oid": "b7106b6df15109159676c4d5c76d6b57d98d749c", "committedDate": "2020-12-25 17:31:02 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_1727"}, {"oid": "256150fa6780932824d092bb5e1cfc5160a82798", "committedDate": "2020-12-26 23:02:07 -0500", "message": "Fixing colour camouflage during colour set"}, {"oid": "05bda11a452176725c2023ddfda641c5b9d77ff2", "committedDate": "2020-12-30 11:28:06 -0500", "message": "Merge pull request #2294 from sixlettervariables/add-contract-market-tests"}, {"oid": "d96560342ac372c6159e2eb36a930d730575079e", "committedDate": "2020-12-31 10:50:32 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_1727"}, {"oid": "87fef495531a68093af610ebd4d170ad9fe58ed7", "committedDate": "2020-12-31 13:13:30 -0500", "message": "Applying requisite changes in other files"}, {"oid": "1077aa3ce47d85a2b52d46fe24d0a9d6500338b3", "committedDate": "2021-01-07 22:38:01 -0500", "message": "Implementing PersonnelRole Enum"}, {"oid": "7ee43f4d3196080806f016767d68fcc646806b95", "committedDate": "2021-01-08 13:14:46 -0500", "message": "Fixing merge conflicts"}, {"oid": "461f2e03e5c7b7e233ccb188ab3acbea84217051", "committedDate": "2021-01-09 12:33:02 -0500", "message": "Fixing merge conflicts"}, {"oid": "7715f2d53d7b785432c6d12abe076dd9fe734b63", "committedDate": "2021-01-11 00:08:57 -0500", "message": "Continuing camouflage AbstractIcon implementation"}, {"oid": "5c767fe20f909aed7ad9ee04af783fada0f01183", "committedDate": "2021-01-13 14:44:22 -0500", "message": "Fixing colour set and moving EntityImage to use proper camo type"}, {"oid": "13a860aed5400a5bf2ccb7ff55f12b6266ed1c86", "committedDate": "2021-01-14 15:40:05 -0500", "message": "Moving to fully use isConventionalInfantry"}, {"oid": "b395926d66b44f814eeccbcdf238377754b3497f", "committedDate": "2021-01-16 12:03:30 -0500", "message": "Swapping to using streams for missions"}, {"oid": "3c08e5b43761cd85a411618df940a669f43b0f74", "committedDate": "2021-01-16 12:03:41 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_MissionStatus"}, {"oid": "56075ee22d31cf6645cfbc078f6d0059a7c35a2e", "committedDate": "2021-01-16 13:07:08 -0500", "message": "Swapping to stream implementation"}, {"oid": "c56982c6b4c7590fa58659f5739adb6fb98c38b3", "committedDate": "2021-01-16 13:20:27 -0500", "message": "Applying changes from personal review"}, {"oid": "bac1ae00109056ac5aaf4ddf35370fb62657e4ed", "committedDate": "2021-01-16 13:40:07 -0500", "message": "Moving to only use getMissions when necessary"}, {"oid": "6a6ab7d22aae49fceae02409ae8f3121e890ccc1", "committedDate": "2021-01-16 13:57:34 -0500", "message": "Moving to isActiveOn"}, {"oid": "e0a11cd0c98c4fd665190822f79c498645f15426", "committedDate": "2021-01-31 13:08:13 -0700", "message": "Renaming a bunch of personnel options"}, {"oid": "a16944f0ca0f8452a8500b311c0d4c1afd4f69ad", "committedDate": "2021-01-31 13:14:59 -0700", "message": "Finishing the option renames"}, {"oid": "3055e76295deb7d552bc3972b69cc6e0fb1f8760", "committedDate": "2021-02-01 10:17:56 -0700", "message": "Starting to implement Automatic Company Generation"}, {"oid": "909ceb8a84cdd6031bf90c300d47b4d2da527643", "committedDate": "2021-02-01 21:19:14 -0700", "message": "Continuing to work on an AtB Company Generator"}, {"oid": "50d74c591ba7b25978e91a326e3d0ce53513c6cd", "committedDate": "2021-02-07 16:50:13 -0700", "message": "Continuing to implement company generation and its options"}, {"oid": "426328755b88eceb8119a0c91696b2e655a0c00e", "committedDate": "2021-02-08 12:27:32 -0700", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_PersonnelRoles"}, {"oid": "9cbf543bf750926dffd2ad77d82e8da2dc416a54", "committedDate": "2021-02-08 12:57:48 -0700", "message": "Bugfixes and some code cleanup from personal review"}, {"oid": "f00627349f7dfb1bfb29305b3377fa3fea2776c5", "committedDate": "2021-02-11 10:55:45 -0700", "message": "Adding Unit::isConventionalInfantry to ensure the entity is null checked"}, {"oid": "d5767fac16735b748124c2759fa7e02388f3e3e0", "committedDate": "2021-02-11 12:52:56 -0700", "message": "Applying changes from personal review"}, {"oid": "d69c0121a94474264821a25df299ecf667dfefdf", "committedDate": "2021-02-12 22:37:21 -0500", "message": "merge from upstream"}, {"oid": "17e3819e3ef169b2b2bf9114df56a23fc8f57f8b", "committedDate": "2021-02-19 09:26:24 -0500", "message": "Add logging and error trapping on daily unit maintenance #2427"}, {"oid": "3a7dc0d62fbf19186d1bbebeefc14a1838733180", "committedDate": "2021-02-19 09:32:56 -0500", "message": "Add error trapping to daily part maintenance, related to #2427"}, {"oid": "efa0010ac4de3087fd997cad083dfcc7307f1fae", "committedDate": "2021-02-19 10:53:09 -0700", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_PersonnelOptionsTab"}, {"oid": "1e74b62a2b90eefb8fd7a24d4c24faf08d1c6b3b", "committedDate": "2021-02-19 12:27:59 -0700", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_AtBCompanyGeneration"}, {"oid": "8f0b7abad948bde3df857ec022c1a3668076b29c", "committedDate": "2021-02-26 13:31:57 -0700", "message": "2442: Fixing Ranks Issues: Removing ancient migration and code, Using proper setter, and using the Ranks as the spinner"}, {"oid": "d52c982d8da547329729b0caea1fffab274e1b0c", "committedDate": "2021-02-27 10:23:14 -0500", "message": "Use MM's new UnitNameTracker for name collisions"}, {"oid": "3c5f987fa51fbe18454c55214f4d5d5f2b980a90", "committedDate": "2021-03-01 09:12:20 -0700", "message": "Fixing merge conflicts"}, {"oid": "b9f8896698477ed928a80443d0345d6397c58bb2", "committedDate": "2021-03-03 10:07:04 -0700", "message": "Fixing merge conflicts"}, {"oid": "1a9d000431b1f187634f7e6ef15161dd07678998", "committedDate": "2021-03-05 12:19:51 -0700", "message": "Continuing to work on the company generator"}, {"oid": "7f59899475e511f98ed9f64a1c10efab11737c43", "committedDate": "2021-03-05 21:50:52 -0500", "message": "merge from upstream"}, {"oid": "1a6354d39d3f6108e9e0e6f9e455c5a126627347", "committedDate": "2021-03-06 10:44:21 -0500", "message": "Address review comments"}, {"oid": "18c7330a3cc319d1dc3e55892a46c5c80539db9a", "committedDate": "2021-03-06 09:56:12 -0700", "message": "Fixing merge conflicts"}, {"oid": "b19752176bb0619f7ccda9f75d551b050521a106", "committedDate": "2021-03-08 23:25:41 -0500", "message": "merge from upstream"}, {"oid": "0bc70593b2b327657e4ff7709e320451adfadbe6", "committedDate": "2021-03-09 09:01:53 -0700", "message": "Fixing merge conflicts"}, {"oid": "9eca5ea7a7d0fe44db02d1ce091f5bf294cb156d", "committedDate": "2021-03-09 09:07:57 -0700", "message": "Fixing merge conflicts"}, {"oid": "baefb52c3074832565148fffae6d1363449fa8ae", "committedDate": "2021-03-09 09:19:18 -0700", "message": "Fixing merge conflicts"}, {"oid": "9499ad003bfeb58930187abad3334129be912b4e", "committedDate": "2021-03-09 09:23:18 -0700", "message": "Fixing merge conflicts"}, {"oid": "d0e34e3b80c163ff4ed03474a3adcd39d061c9ee", "committedDate": "2021-03-09 09:39:24 -0700", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_ShoppingList"}, {"oid": "8ee805b229c9373e653376a749274023ef13139b", "committedDate": "2021-03-09 11:54:07 -0500", "message": "Merge pull request #2373 from Windchild292/dev_Windchild_isConventionalInfantry"}, {"oid": "559cb006d560fd2099639e701e37538aded7f3a1", "committedDate": "2021-03-09 12:19:33 -0500", "message": "Merge pull request #2337 from Windchild292/dev_Windchild_ShoppingList"}, {"oid": "2bf37308c59c435acc52e0cf512ce9f74d1adc7e", "committedDate": "2021-03-09 10:26:52 -0700", "message": "Fixing merge conflicts"}, {"oid": "62726bf22f84cafc8872cbdebd5a8edce980e60a", "committedDate": "2021-03-09 10:27:33 -0700", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_CamouflageIcon"}, {"oid": "5082524cc2a32c4a8360cb845951a5e2b94300df", "committedDate": "2021-03-09 11:46:51 -0700", "message": "Fixing merge conflicts"}, {"oid": "c640fe5cc744f25a6fb292dd50220c8ecfe1c986", "committedDate": "2021-03-09 12:27:38 -0700", "message": "Fixing merge conflicts"}, {"oid": "64b151aab1a311e538c895526ba3f807216917c1", "committedDate": "2021-03-11 19:48:54 -0700", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_MissionStatus"}, {"oid": "98253ba4fbbd681dca588b7cb766e8439c19d880", "committedDate": "2021-03-11 19:59:41 -0700", "message": "Applying bugfixes from review"}, {"oid": "8d7d2a8df4596249f133919b569b56249b0068aa", "committedDate": "2021-03-12 14:28:19 -0700", "message": "Improving default contract name and sort"}, {"oid": "c13dedfdb7ce73cfdfe1d464e83765140336736c", "committedDate": "2021-03-12 14:59:22 -0700", "message": "2458: Adding Insufficient Astech warnings for MRMS and adding some more Astech/Medic pool functions"}, {"oid": "d2b11fb805eea82905ab0d8f846ca96bd69124e3", "committedDate": "2021-03-13 09:01:10 -0700", "message": "Fixing merge conflicts"}, {"oid": "902ebb67bf5dbe2e94cc32810992a2d1aa6c321c", "committedDate": "2021-03-13 09:02:31 -0700", "message": "Fixing merge conflicts"}, {"oid": "ec5843cb0d12174c7d5f83419268e5184d2d60f6", "committedDate": "2021-03-13 09:08:04 -0700", "message": "Fixing merge conflicts"}, {"oid": "1e0c0d260af35ecf86a9b8b9519c8cceee2e7028", "committedDate": "2021-03-13 11:47:11 -0700", "message": "Moving the unit market changes into an individual branch that contains some parts of the contract market changes"}, {"oid": "a5382b0386cb0354a4b3c870fdd8fee5e2f5330a", "committedDate": "2021-03-13 22:22:50 -0500", "message": "additional code review changes"}, {"oid": "fe6e045bb8acb2700cc38bd6a25ec62011977264", "committedDate": "2021-03-14 01:21:48 -0500", "message": "merge from upstream"}, {"oid": "48663cfaebb3a6a04f5680e7f755c532bd159779", "committedDate": "2021-03-14 10:58:03 -0600", "message": "Fixing merge conflicts"}, {"oid": "b8ccd096938dcbd22c56b4a93c87c78d770df189", "committedDate": "2021-03-16 10:03:47 -0600", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_AbstractUnitMarket"}, {"oid": "00db4b9f4381f0d6bcaadbbaa197f0be1c80d30b", "committedDate": "2021-03-17 12:29:14 -0400", "message": "Merge pull request #2445 from sixlettervariables/issue-2597-protect-duplicate-name-hash"}, {"oid": "a79e2e08ae5167e26dc37999b749296e47e179b9", "committedDate": "2021-03-17 12:27:27 -0600", "message": "Finishing the Unit Market Dialog"}, {"oid": "9d4975c56dc9ea4c18da5c7b146cfa794453f668", "committedDate": "2021-03-17 12:53:48 -0600", "message": "Swapping to EmptyUnitMarket instead of null"}, {"oid": "795721747293b0a0a0b4a5e12334158e9da303da", "committedDate": "2021-03-17 14:00:33 -0600", "message": "Fixing merge conflicts"}, {"oid": "aac2ced366aa376eb9fa78ab230f38e43d0c8362", "committedDate": "2021-03-17 21:16:52 -0400", "message": "code review changes"}, {"oid": "67d86a55c23420a76995a1457504c22f1b9cc48a", "committedDate": "2021-03-18 10:00:41 -0600", "message": "338: Base Free Time Sort"}, {"oid": "b634beb8d18a3ebafa13e3332256da259e3ef1c1", "committedDate": "2021-03-18 14:35:10 -0600", "message": "Finishing up working on abstracting out the Unit Market"}, {"oid": "8627de7d060ea44d3e33d04c259f8ab05f5bba9f", "committedDate": "2021-03-21 20:29:53 -0400", "message": "merge from upstream"}, {"oid": "04087a9bc33d0e3547e9c2dc68db496eac62b82b", "committedDate": "2021-03-21 20:10:23 -0600", "message": "Fixing merge conflicts"}, {"oid": "093eaeb8fbe362bb2d525d661180c433576aab9b", "committedDate": "2021-03-24 00:26:51 -0400", "message": "merge from upstream"}, {"oid": "2a2559d3ab5da713e7b8864ab0de458849dce6b6", "committedDate": "2021-03-24 09:29:25 -0600", "message": "Swapping over to using a three tiered rank setup"}, {"oid": "1e4e1993ec9f2278c7f326d28bcae5a7bff9c4a0", "committedDate": "2021-03-24 12:05:23 -0600", "message": "Heavy simplification of rank profession code"}, {"oid": "a57000e9696c4bf593f3215fa36543b2d13ed5ea", "committedDate": "2021-03-24 12:30:48 -0600", "message": "2196: Swapping to a standardized display wrapper class for rank display"}, {"oid": "b903aa7de36203afa40ede49922eb9e422fdcf43", "committedDate": "2021-03-24 13:07:46 -0600", "message": "1483: Adding Rank System import/export"}, {"oid": "e5b1d3a3fc6d825d722e496ad49832555fa65754", "committedDate": "2021-03-25 14:08:49 -0400", "message": "units deployed to StratCon tracks are ineligible for repairs"}, {"oid": "e7042962dd815937b9d91c1335d85ccec3647bf7", "committedDate": "2021-03-30 13:26:17 -0400", "message": "Merge pull request #2371 from Windchild292/dev_Windchild_CamouflageIcon"}, {"oid": "091d87a31e8cf5d1061ccf76a256bf990a0a623b", "committedDate": "2021-03-30 11:27:53 -0600", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_2449"}, {"oid": "37144650aef43bd5f3a8a14257376f2d6fe133f8", "committedDate": "2021-03-30 16:21:13 -0400", "message": "merge from upstream"}, {"oid": "5854d37bf8fbd63f741b9601ef373a16253a9b32", "committedDate": "2021-04-04 09:12:14 -0600", "message": "Adding the ability to create a custom rank system"}, {"oid": "db96404f216df48ce5321de053ce56015837d2cd", "committedDate": "2021-04-04 09:43:32 -0600", "message": "Renaming the campaign rank system methods to properly handle rank system changes"}, {"oid": "ae6bdf14123e6ac4ba92f5884b58b533b6cad2d3", "committedDate": "2021-04-04 10:12:54 -0600", "message": "Moving personnel rank changes to their proper location within person"}, {"oid": "19f0f0ce5d069f8f6f4f481cda04cdee3e05402a", "committedDate": "2021-04-04 11:59:18 -0600", "message": "Working on rank import/export"}, {"oid": "a34e385bf50ab28870531fe663d288b7b98b2697", "committedDate": "2021-04-06 10:54:55 -0600", "message": "Fixing and improving validation issues"}, {"oid": "3f3d7b237f61dd118eeb39087eb7fe9de6be03a0", "committedDate": "2021-04-06 11:53:59 -0600", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_GenealogyIdReference"}, {"oid": "80202c7f73397f3bc36193b0f3e2fce444bc4070", "committedDate": "2021-04-06 16:04:51 -0600", "message": "Fixing merge conflicts"}, {"oid": "ab655fb9abe6d2b9be4e20eba7e4c74b4b8e5c22", "committedDate": "2021-04-06 16:20:53 -0600", "message": "Fixing merge conflicts"}, {"oid": "729ef155ccdbaca3a1f23f1e57309d3b973851da", "committedDate": "2021-04-06 16:38:48 -0600", "message": "Fixing merge conflicts"}, {"oid": "a4c29e55f023d3416dd5e3f18a9d2061ab841fa1", "committedDate": "2021-04-06 17:56:58 -0600", "message": "Fixing merge conflicts"}, {"oid": "47bf0ed7fa9b09a4d76b634d900cceac953e17ed", "committedDate": "2021-04-06 19:54:46 -0600", "message": "Fixing merge conflicts"}, {"oid": "c2d264c23786de4ea703861360c3bcb46e79c5ac", "committedDate": "2021-04-07 00:13:59 -0400", "message": "merge from upstream"}, {"oid": "a5d70a5c672e494c7ec8be19e05d642b0259c9c4", "committedDate": "2021-04-07 14:24:17 -0600", "message": "Implementing multiple new procreation options and moving it to work based on a supplied date"}, {"oid": "18e6e46b095f8bbb1c623c60fd3aa177b7fe8682", "committedDate": "2021-04-09 09:22:39 -0600", "message": "Fixing merge conflicts"}, {"oid": "ae01b6e6d0fa55b766f741fa6fb35f727fff344b", "committedDate": "2021-04-12 09:45:59 -0600", "message": "Creating ScenarioStatus Enum and updating how scenarios are gotten"}, {"oid": "133e5865e2ee8dd5900b26dfe5f9aa0459a1a04c", "committedDate": "2021-04-14 11:31:25 -0400", "message": "multiple bugs with ignoring scenarios; ground pirats on air maps"}, {"oid": "3d8916caadfbc4085e509724142f929fc9d7f1d5", "committedDate": "2021-04-16 17:31:08 -0400", "message": "add text resources; remove campaign scenarios after ignoring in stratcon UI"}, {"oid": "2e00ea9a5b972b07d7446e75a06d3d493ac69426", "committedDate": "2021-04-16 21:14:35 -0400", "message": "code review changes"}, {"oid": "becffdc94075004fa3890bb36799389a48105c33", "committedDate": "2021-04-16 23:10:50 -0400", "message": "code review changes; data fix; stop nagging once user hits 'no' once"}, {"oid": "d71320d4f7a9ae41189a6b4651979960cb9dcc0f", "committedDate": "2021-04-20 21:55:21 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_2449"}, {"oid": "39603f48e1d441dd892227bef76e398c95cd4852", "committedDate": "2021-04-20 21:59:13 -0400", "message": "Fixing merge conflicts"}, {"oid": "3f7306636c42a999caf904b8d513f267243def42", "committedDate": "2021-04-20 22:01:54 -0400", "message": "Fixing merge conflicts"}, {"oid": "1c0e5821f637a666ef7632b5d821db62d76f624d", "committedDate": "2021-04-20 22:20:35 -0400", "message": "Fixing merge conflicts"}, {"oid": "9b9545c3b2e6890b9bef97677c61bb175cd5cc89", "committedDate": "2021-04-21 00:39:22 -0400", "message": "allow extra time for maintenance"}, {"oid": "de34b46d2f53c172612ebe5aa1abffe16b249f06", "committedDate": "2021-04-23 10:23:26 -0400", "message": "Bugfixing"}, {"oid": "b82fd9901fd0447da0211522ffc97ccae5c708ac", "committedDate": "2021-04-23 11:36:57 -0400", "message": "Fixing merge conflicts"}, {"oid": "bb7b0c375b9a2fd6baeced3e5e94501eb2e636ed", "committedDate": "2021-04-23 13:03:53 -0400", "message": "Moving into selectors folders"}, {"oid": "1ba164a58381a4be88ec479fee5841c1b8cdcf99", "committedDate": "2021-04-23 13:15:11 -0400", "message": "Making initial faction changes for constructors and ordering"}, {"oid": "fc7a0539b85c7af6a166ed9d779e7b723307b883", "committedDate": "2021-04-23 15:57:04 -0400", "message": "Making RandomOriginOptions, which will allow its use in multiple locations"}, {"oid": "1741bea67582d0555d094cbdd0fa977eec707bcc", "committedDate": "2021-04-24 22:10:27 -0400", "message": "fix scenario date/force resets"}, {"oid": "cebc3d0c231e54580eb29e4756f549b702b9ace1", "committedDate": "2021-04-27 14:41:42 -0400", "message": "Merge pull request #2462 from Windchild292/dev_Windchild_2460"}, {"oid": "b0c3badc393ff67ccba2cbe34623ca496c576782", "committedDate": "2021-04-27 14:42:27 -0400", "message": "Merge pull request #2352 from Windchild292/dev_Windchild_PersonnelRoles"}, {"oid": "138d08410b585fae3ba4af354d18d2b15d5d36c8", "committedDate": "2021-04-27 14:48:43 -0400", "message": "Fixing merge conflicts"}, {"oid": "5f426e90c201a24d339c0322897809938b79db5a", "committedDate": "2021-04-27 15:08:01 -0400", "message": "Fixing merge conflicts"}, {"oid": "7b4772ec38db2aa8d657d0a22ed7868d0c4f6117", "committedDate": "2021-04-27 15:45:52 -0400", "message": "Fixing merge conflicts"}, {"oid": "ce0b3b652feb9205fb4ed8cc3ae599bb5da9a308", "committedDate": "2021-04-27 15:47:48 -0400", "message": "Fixing merge conflicts"}, {"oid": "f7d684241f42639eb35d60508c39dbb00b0d9dbc", "committedDate": "2021-04-28 10:56:49 -0400", "message": "Fixing merge conflicts"}, {"oid": "8dd83b6c46f8f2454ba4d4accfe8176c58e398d7", "committedDate": "2021-04-29 23:22:27 -0400", "message": "Fixing merge conflicts"}, {"oid": "87033ef81af06d5a8c2af9d93a9b9057e49f0fde", "committedDate": "2021-05-01 17:09:56 -0400", "message": "Fixing merge conflicts"}, {"oid": "815f8fa858fdbf707019709a5d51524b5e61472a", "committedDate": "2021-05-04 14:12:54 -0400", "message": "Dependent Flag Swapover"}, {"oid": "66f6a880e1b615fb97de9757be649fc18c10f049", "committedDate": "2021-05-04 19:52:08 -0400", "message": "Implementing auto-hiring pool on new day"}, {"oid": "bbcc984be566d1587a598efc974fb1dbb399868a", "committedDate": "2021-05-05 18:25:22 -0400", "message": "Fixing merge conflicts"}, {"oid": "741d61daa6ac3570f7a3c569ee6e6dc87a902441", "committedDate": "2021-05-08 20:32:38 -0400", "message": "Fixing merge conflicts"}, {"oid": "227d6642ef68511eb067588bdf263aa2ad88f421", "committedDate": "2021-05-09 10:13:42 -0400", "message": "Creating the backend implementation for random procreation modules"}, {"oid": "e0faed52760616365379933d91f9343f58c61cb4", "committedDate": "2021-05-09 14:30:58 -0400", "message": "Renaming the directory from random procreation to procreation"}, {"oid": "7943361f04c7c5cc1753852ddba3a77d8259ab57", "committedDate": "2021-05-11 09:52:44 -0400", "message": "2607: Starting to work on redoing the salvage calculations"}, {"oid": "0539aea6159ca7cfbbb77a035ffb6c51d590d29f", "committedDate": "2021-05-11 10:40:37 -0400", "message": "2607: Properly calculating and paying for payment overages"}, {"oid": "33d43f4fe9a41925e3cc417f5d782c19f097ad63", "committedDate": "2021-05-15 06:53:31 -0400", "message": "Merge pull request #2583 from Windchild292/dev_Windchild_DependentFlagSwapover"}, {"oid": "55da24b03b3ecbc71f7d6ab739e1820f1814fda1", "committedDate": "2021-05-17 13:46:12 -0400", "message": "Creating AtB Contract Type and AtB Morale Level enums"}, {"oid": "470df7bcd395e57ffe3f3e59660f0e468cdcfaf1", "committedDate": "2021-05-18 01:31:38 -0400", "message": "fix multiple issues generating fixed objective scenarios"}, {"oid": "ffcd06cfa996127e858ea60096b58286f97a8a8a", "committedDate": "2021-05-19 09:33:39 -0400", "message": "Implementing save code swapover"}, {"oid": "c03f4deaeb4d632a5e2e614ae5204da255eea805", "committedDate": "2021-05-22 22:01:49 -0400", "message": "Merge pull request #2608 from Windchild292/dev_Windchild_2607"}, {"oid": "f9cf763bd4ff9a8e017e54464ad20989c2e772d3", "committedDate": "2021-05-23 23:33:39 -0400", "message": "Fixing merge conflicts"}, {"oid": "b5b8facc5de91af84188412dc8d1ec3df00e3ae6", "committedDate": "2021-05-24 13:55:12 -0400", "message": "Fixing merge conflicts"}, {"oid": "1b33879affd0101e7870d5696137e354b636d342", "committedDate": "2021-05-24 13:57:36 -0400", "message": "Fixing merge conflicts"}, {"oid": "f4c2aadcbf8a9e3bc45db1e7227160e36f43d47a", "committedDate": "2021-05-24 14:00:22 -0400", "message": "Merge branch 'master' into dev_Windchild_CamouflageRework"}, {"oid": "fe024592b6ac70b9cf1a9cd546a54ebc8bb02363", "committedDate": "2021-05-24 17:16:21 -0400", "message": "2625: Properly Clear Tech Units on Person removal/retirement"}, {"oid": "530decc0b587e53087c8cacbe31aeba13dd82f41", "committedDate": "2021-05-29 11:32:44 -0400", "message": "Fixing merge conflicts"}, {"oid": "156500be4e08594aeaf3efa424938f295b2ed86e", "committedDate": "2021-05-29 16:04:26 -0400", "message": "Phase one of Campaign Preset rework"}, {"oid": "34d76d4e22674638bd3ce602a713238ff5c203b8", "committedDate": "2021-05-30 14:33:28 -0400", "message": "Phase Two: finishing internal work and starting on GUI implementation"}, {"oid": "12f96f2ab3335b805508c31bbbc08a9bcf5491d7", "committedDate": "2021-05-30 21:57:28 -0400", "message": "Fixing merge conflicts"}, {"oid": "b109f86e86e8aba9c5b4aa279919f2d6547979b9", "committedDate": "2021-05-31 10:38:11 -0400", "message": "Fixing merge conflicts"}, {"oid": "65a009b4cf6307795c815aacdb82feb8fba0a01d", "committedDate": "2021-05-31 17:00:21 -0400", "message": "Fixing merge conflicts"}, {"oid": "14d482cda0564e28b6c5ea95e20725e2200f51ff", "committedDate": "2021-05-31 17:57:20 -0400", "message": "Merge branch 'master' into maintenance_extra_time"}, {"oid": "00a30fe49ee531dda71cb88bacc2f56dbe0a5b9e", "committedDate": "2021-05-31 18:05:23 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_2654"}, {"oid": "fa54f8e9f392dc2f02cb5b1b5bc9e8c428a88e61", "committedDate": "2021-06-02 12:29:42 -0400", "message": "Creating a base ignorable nag dialog for MekHQ and implementing it in all current new day nags"}, {"oid": "2509a0841acae929e7340ae5fe4d01f7bf437d40", "committedDate": "2021-06-02 16:20:48 -0400", "message": "Fixing merge conflicts"}, {"oid": "6b416ee90791ecb016edf0ae5b5c0e16ebdd4760", "committedDate": "2021-06-09 16:05:55 -0400", "message": "Fixing merge conflicts"}, {"oid": "d36c47d7aaa8978e4d523b2031d299babd654e2a", "committedDate": "2021-06-09 16:08:35 -0400", "message": "Fixing merge conflicts"}, {"oid": "7fe956938b8b76f05f395b681f8bd5f4bd02d25a", "committedDate": "2021-06-09 21:27:13 -0400", "message": "Fixing merge conflicts"}, {"oid": "055b02a76318d18eed5ad27a93333893cf8b74db", "committedDate": "2021-06-09 22:30:38 -0400", "message": "Fixing merge conflicts"}, {"oid": "e8c2b13279e2b5d226f4de5b350e2d12ff468577", "committedDate": "2021-06-11 00:26:36 -0400", "message": "Fixing merge conflicts"}, {"oid": "d4b45a4c9543d0786feacc4344d364fee2997970", "committedDate": "2021-06-11 12:46:28 -0400", "message": "Fixing merge conflicts"}, {"oid": "2560bdda30482870c73884470b53cb579bcaa47a", "committedDate": "2021-06-14 13:25:17 -0400", "message": "Force icon implementation migration from outdated previous branch"}, {"oid": "6fd836ff4e8a233aa293e2a3fc08cd3316f64b66", "committedDate": "2021-06-14 14:23:04 -0400", "message": "Adding UnitIcon, GM Tools implementation, and baseline for export"}, {"oid": "eaf4453f2f1f40707d9594de5dd6aa83d594b776", "committedDate": "2021-06-14 18:04:32 -0400", "message": "Applying personal code review changes and starting unit icon code"}, {"oid": "e1a7f7166de5f36fa0c44b7151478c944e6a4b89", "committedDate": "2021-06-21 13:16:19 -0400", "message": "Apply overtime to the last chunk worked as well #2679"}, {"oid": "9c62597332ac0ba24004132e537ba0cf049741e3", "committedDate": "2021-07-01 12:35:33 -0400", "message": "Fixing merge conflicts"}, {"oid": "809c6366e1ce1dea3f4b2fa21841aab6639992a4", "committedDate": "2021-07-10 11:47:52 -0400", "message": "Finishing the portrait swapover"}, {"oid": "0ddba79849d418947ba1ce309a4c673ac78292d4", "committedDate": "2021-07-10 20:58:49 -0400", "message": "Bugfixing, phase 1"}, {"oid": "10a9609cabffc8f5e7068b6c0c33c0f65f796508", "committedDate": "2021-07-12 18:39:55 -0400", "message": "Fixing unit tests"}, {"oid": "06664ff8286a85fe165e5f92aaaf22326e692c90", "committedDate": "2021-07-15 10:22:09 -0400", "message": "Merge branch 'master' into dev_Windchild_476"}, {"oid": "e0e383e2453514ee7c9c7abc9214a2a1a869a068", "committedDate": "2021-07-15 10:34:25 -0400", "message": "Fixing merge conflicts"}, {"oid": "7211585d4a34159d5c80c9ea30fa44bc2746c1b4", "committedDate": "2021-07-17 20:03:19 -0400", "message": "Fixing a few potential divide by zero issues"}, {"oid": "a3eb7d3dfe3477e32117d175e717023f539795eb", "committedDate": "2021-07-17 20:11:58 -0400", "message": "Further cleanups from personal review"}, {"oid": "21a75e1c9ca5516bb7394f30fa2c0b4d9a68b9ad", "committedDate": "2021-07-17 20:27:51 -0400", "message": "Further cleanups, and adding an astech team size constant"}, {"oid": "35bffb052c1b608df03fb41f6548a3e9f847cca6", "committedDate": "2021-07-18 10:43:10 -0400", "message": "Fixing NPE warning and cleaning up the if statement"}, {"oid": "a7670828c4762e3852dbd248b348c2dd371b5018", "committedDate": "2021-07-18 12:12:40 -0400", "message": "Fixing possible confusion of local and field warnings"}, {"oid": "951b55f7a5fb6036e67897e709cd6a0dbbb45b39", "committedDate": "2021-07-18 12:33:08 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_Procreation"}, {"oid": "61cc2fd1669914bef276e018cb7562be422b1f7c", "committedDate": "2021-07-18 14:30:17 -0400", "message": "Removing Deprecated Usages: Logger swapover"}, {"oid": "542307adf490f10930d9470ff64879b4b7ee6b0a", "committedDate": "2021-07-20 10:11:31 -0400", "message": "Moving crew null check and fallback logic into Campaign::getShorthandedModForCrews"}, {"oid": "f6e661dba426e63388e9b57d224a7090006e3203", "committedDate": "2021-07-20 10:18:55 -0400", "message": "Merge pull request #2751 from Windchild292/dev_Windchild_AstechDivideByZero"}, {"oid": "f3bd90fefb0af89a7177be76f70aeed033a7b258", "committedDate": "2021-07-20 10:20:25 -0400", "message": "Fixing merge conflicts"}, {"oid": "424407a51980930adead83bbfa918bf2b0d8a441", "committedDate": "2021-07-20 21:09:32 -0400", "message": "Fixing merge conflicts"}, {"oid": "497f1345950b39b1eb1e2d1389b63a7fcd5eef14", "committedDate": "2021-07-20 21:26:53 -0400", "message": "Fixing merge conflicts"}, {"oid": "bc21146f53fc23bdfd1f5f4273f07b588b0904e2", "committedDate": "2021-07-24 10:15:39 -0400", "message": "Fixing merge conflicts"}, {"oid": "a5e9303ebeafcd74e0348b8b2f767c5f8e12c8cb", "committedDate": "2021-07-26 12:32:33 -0400", "message": "2558: Swapping removePerson to be object instead of id based"}, {"oid": "0a76a9693556237907de0f6e2a5a08f48dcfd3be", "committedDate": "2021-07-26 12:38:50 -0400", "message": "2558: Custom message for when dependants leave"}, {"oid": "1babc7de6f9de3b1f517061f1c249c3339f13e10", "committedDate": "2021-07-26 12:54:49 -0400", "message": "2558: Adding unique dependent add message"}, {"oid": "b214bdb7975aabd1cdc8d39cb9f1fdea3541b58d", "committedDate": "2021-07-26 15:13:02 -0400", "message": "Fixing merge conflicts"}, {"oid": "d86c1c8c70ae0bcc2a9d6dd09e7fe963745b5e37", "committedDate": "2021-07-26 22:20:42 -0400", "message": "Merge pull request #2478 from Windchild292/dev_Windchild_AbstractUnitMarket"}, {"oid": "d83ce12b4886460ba57e84afbf15b20e30fab693", "committedDate": "2021-07-28 15:48:34 -0400", "message": "Isolating RATs into the RAT Tab"}, {"oid": "3d303b442ab8d664c56fd8709d970f86c7eed83f", "committedDate": "2021-07-30 10:40:29 -0400", "message": "Loan code cleanup and refactoring"}, {"oid": "56910a666af8115ec4e364b98a16fc009c1a65b5", "committedDate": "2021-07-30 11:11:21 -0400", "message": "Fixing merge conflicts"}, {"oid": "ec7e4bc4aeed27a5b835b44d295642228bcc16c3", "committedDate": "2021-08-10 12:37:47 -0400", "message": "Transaction Type Enum"}, {"oid": "497976540984392426f984acd40477886555e06d", "committedDate": "2021-08-10 15:25:55 -0400", "message": "Fixing merge conflicts"}, {"oid": "1faa42c3d120f62fa60bebc946c56cae3ba293f8", "committedDate": "2021-08-10 15:47:16 -0400", "message": "Doing some personal review cleanup"}, {"oid": "be94a7ab35307e2b345d967cbd0163417ea9802d", "committedDate": "2021-08-12 21:28:51 -0400", "message": "bulletproofing for a couple of individual unit actions"}, {"oid": "01f8aa5c3d90cd2d8b553c5c8c73a336af524e8b", "committedDate": "2021-08-13 22:07:09 -0400", "message": "2798: Adding total XP earnings tracking"}, {"oid": "771c3107183e31fa9da9b2e417a6fc0d0b673a48", "committedDate": "2021-08-14 00:07:09 -0400", "message": "274: Moving Era definitions to a file"}, {"oid": "795d3aba4875a600dd0a6ec91a10cb7e90814c6c", "committedDate": "2021-08-18 12:48:20 -0400", "message": "Removing Person's Campaign save and switching to full pass-by-reference for Campaign"}, {"oid": "4e80bdad1f20ebfb53cfe559ade8975594f3d362", "committedDate": "2021-08-21 12:12:11 -0400", "message": "2754: Properly clearing Narc and iNarc Flags during scenario resolution"}, {"oid": "ed447da30212105694957e35687f1bfedd6b56b0", "committedDate": "2021-08-24 13:11:20 -0400", "message": "Merge pull request #2805 from Windchild292/dev_Windchild_274"}, {"oid": "7120d3b0aa69ebd282e855a4b2a47bda4697ba78", "committedDate": "2021-08-24 13:14:09 -0400", "message": "Merge pull request #2793 from Windchild292/dev_Windchild_TransactionType"}, {"oid": "9e7480b600f9290c00f5f082dd91201999d12f42", "committedDate": "2021-08-24 13:14:19 -0400", "message": "Merge pull request #2804 from Windchild292/dev_Windchild_2798"}, {"oid": "70aa4b94439c59d6e5de9d6191a3c0a02365e644", "committedDate": "2021-08-24 13:39:42 -0400", "message": "Fixing merge conflicts"}, {"oid": "0e72a8bc212f26b8d9b7bb789b0c1f84f1426c78", "committedDate": "2021-08-24 13:42:42 -0400", "message": "Fixing merge conflicts"}, {"oid": "3a01897bb20c8be27823164f09aca9af1aa3360d", "committedDate": "2021-08-24 13:53:59 -0400", "message": "Fixing merge conflicts"}, {"oid": "bacc8f3e733e0cd4cc0fa629ced5d3b5079abc76", "committedDate": "2021-08-24 17:23:41 -0400", "message": "Fixing merge conflicts"}, {"oid": "e273d7035001140a977ebe3299d17602ef52d498", "committedDate": "2021-08-28 17:37:23 -0400", "message": "Fixing merge conflicts"}, {"oid": "59fca0be576b219f25123793a2118255168d1c03", "committedDate": "2021-08-29 11:15:40 -0400", "message": "Modularized Marriage"}, {"oid": "6a48665a09b5cfd3b2309975077163fae687c39e", "committedDate": "2021-08-29 14:41:32 -0400", "message": "Adding creation dialog and bugfixing"}, {"oid": "0a89d7421946ba75d7d926af996b27e9e994a911", "committedDate": "2021-08-31 14:50:25 -0400", "message": "Fixing merge conflicts"}, {"oid": "0f4e17188d8360baf639cbc66dd29da85336be81", "committedDate": "2021-08-31 15:28:05 -0400", "message": "Applying changes from personal review"}, {"oid": "bd9dded105bfbfdf64e7b10e2059f2633326c113", "committedDate": "2021-08-31 15:39:04 -0400", "message": "Swapping to weighted double map"}, {"oid": "5eaf88579bd60bfee3c39a936a9d647a4eb1de4f", "committedDate": "2021-08-31 16:45:21 -0400", "message": "Reworking to use random origin options instead of the internally stored values"}, {"oid": "bbccfa2dcef0be4fbb07cd3af6cdbd15d7ced036", "committedDate": "2021-08-31 18:09:33 -0400", "message": "Missed two cases"}, {"oid": "7acc107b13f019250d4c17ee0b034a3aa263f56b", "committedDate": "2021-09-22 13:23:13 -0400", "message": "Removing MekHQ's version by swapping to a standardized suite version"}, {"oid": "f0a07bfbd15d93ff86dda49a32e0c489ca590a8c", "committedDate": "2021-09-22 17:45:34 -0400", "message": "Fixing merge conflicts"}, {"oid": "673baa71af916391d268ede436174881a85b7340", "committedDate": "2021-09-23 20:01:05 -0400", "message": "Adding the ability to automatically have the Operational Status indicator be determined on a new day"}, {"oid": "18f49cd8c6ba3721e84dce0b606a346b242cb49c", "committedDate": "2021-09-25 10:56:33 -0400", "message": "Moving training XP assignment to AtB new day processing"}, {"oid": "932423c6da7f04b29d61df88c014f5e432356eae", "committedDate": "2021-09-25 17:10:11 -0400", "message": "Standardizing and simplifying Campaign::getTargetForAcquisitioncalls"}, {"oid": "29c1cae15f03b025f7c6f4a4acdee0a86082eae8", "committedDate": "2021-09-25 17:12:00 -0400", "message": "2567: AtB Part Procurement uses proper campaign option"}, {"oid": "e1c6be34a128676429850de67af7a3c3e1d31c48", "committedDate": "2021-09-25 17:47:32 -0400", "message": "Fixing the active checks and removing the AtB casts"}, {"oid": "0527903721699cf7e73e7000ebc0db049c96529d", "committedDate": "2021-09-25 17:48:18 -0400", "message": "Removing testing logging"}, {"oid": "6dc414e21f3f3a8bf95c7059b83c0c34ced93e61", "committedDate": "2021-09-28 22:10:41 -0400", "message": "Merge pull request #2888 from Windchild292/dev_Windchild_2567"}, {"oid": "1065b3bc8de9084f48208d2ca865ce58ac8b3c41", "committedDate": "2021-09-28 22:29:59 -0400", "message": "Fixing merge conflicts"}, {"oid": "e55c3ca107c0d4a68d05b67ffa95825ee33af974", "committedDate": "2021-09-28 22:33:50 -0400", "message": "Fixing merge conflicts"}, {"oid": "6e5bfd3fe778c2db9847358b2bde358a61106707", "committedDate": "2021-09-28 22:38:51 -0400", "message": "Fixing merge conflicts"}, {"oid": "4fdc8e401f17fac7995037b1852f1ce2353c8e3f", "committedDate": "2021-09-28 22:48:35 -0400", "message": "Fixing merge conflicts"}, {"oid": "6f6fbddc710af1a588c433c779edd75f638a3c9d", "committedDate": "2021-10-01 10:01:00 -0400", "message": "Merge pull request #2880 from Windchild292/dev_Windchild_Version"}, {"oid": "901e499a75807e3ed64c36d0fcb8e1b024787c95", "committedDate": "2021-10-01 22:06:56 -0400", "message": "Fixing merge conflicts"}, {"oid": "b69522079e9a04b394864bbc4e43ff4c4e125cca", "committedDate": "2021-10-01 22:17:46 -0400", "message": "Fixing merge conflicts"}, {"oid": "84837c3610f8109aeb1985357178de229560de80", "committedDate": "2021-10-01 22:50:02 -0400", "message": "Fixing merge conflicts"}, {"oid": "4971437339838aa89b83785c6e9572074c95d245", "committedDate": "2021-10-02 23:21:37 -0400", "message": "Fixing merge conflicts"}, {"oid": "ed006b48eaf1c0580c2480f4f0000a3c1aed8361", "committedDate": "2021-10-10 00:10:05 -0400", "message": "Adding prisoner and clanner options for procreation"}, {"oid": "54e588d2cafddcab2f585c8ed5d6ee3c829d155f", "committedDate": "2021-10-10 01:00:00 -0400", "message": "Fixing merge conflicts"}, {"oid": "f211d8a677daa66c3a88f444de02a072ea5ab8a0", "committedDate": "2021-10-11 09:36:37 -0400", "message": "Fixing merge conflicts"}, {"oid": "3ee602c2e85defa1c3b05d08d609340d4b194883", "committedDate": "2021-10-11 09:37:52 -0400", "message": "Merge branch 'master' into dev_Windchild_2654"}, {"oid": "a30ac65fc45c76f1c1f6df0d70fa356aa41ef438", "committedDate": "2021-10-11 09:38:33 -0400", "message": "Merge branch 'master' into dev_Windchild_PersonnelRandomization"}, {"oid": "6f2f688a386d187426b7c92d4dd391c239d1ad70", "committedDate": "2021-10-11 09:43:54 -0400", "message": "Fixing merge conflicts"}, {"oid": "125e3093d92e248b4e50bc9131ff8fdeb35c6787", "committedDate": "2021-10-11 10:22:27 -0400", "message": "Fixing merge conflicts"}, {"oid": "f8e040a424e1e8d8f886b334ce6fe78c1c697e21", "committedDate": "2021-10-11 12:17:56 -0400", "message": "Standardizing canMarry and adding clanner/prisoner options"}, {"oid": "358b2e9bb76ee69f0aef232dc656af54a6b78e75", "committedDate": "2021-10-11 16:26:24 -0400", "message": "Creating a divorce module, with a daily percentage-based random divorce setup"}, {"oid": "8ecba07dd7693346338cbae98b207e87e1cfb844", "committedDate": "2021-10-14 20:08:46 -0400", "message": "Fixing merge conflicts"}, {"oid": "accf7255b1c83499aa1f79f5074b2bc44e3619f8", "committedDate": "2021-10-17 18:16:46 -0400", "message": "Fixing merge conflicts"}, {"oid": "4e4ae81eb8a7a923cdf8688c645023ce047c7d99", "committedDate": "2021-10-17 18:53:40 -0400", "message": "Fixing merge conflicts"}, {"oid": "08ec6ef40e59afa4cba88228bc29dba9745de098", "committedDate": "2021-10-18 15:52:01 -0400", "message": "Fixing merge conflicts"}, {"oid": "c67d7074f17378d88774a553e3fca273bc047705", "committedDate": "2021-10-18 15:52:40 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_PersonCampaign"}, {"oid": "1a7109d4439d3900ff897d0c9ba7091e88960ead", "committedDate": "2021-10-18 16:06:05 -0400", "message": "Fixing merge conflicts"}, {"oid": "2d589706bc9112203a6043adf8d7aed7d0f22301", "committedDate": "2021-10-18 16:07:21 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_ExpandedDeathStatus"}, {"oid": "84e2f57820e6fac4c9604e8fdf4c370849b21914", "committedDate": "2021-10-18 17:26:22 -0400", "message": "Fixing merge conflicts"}, {"oid": "033d776c732e66ad776357bee1afe597f5e77b20", "committedDate": "2021-10-30 15:59:59 -0400", "message": "Fixing merge conflicts"}, {"oid": "4e45f1a0a0bb1a3a900ecde01c8feab5a6e48329", "committedDate": "2021-11-01 17:31:14 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_AtBCompanyGeneration"}, {"oid": "258f3a3b0b352aa70b42b8c2034ebd6ab90d96ca", "committedDate": "2021-11-01 18:20:49 -0400", "message": "Fixing merge conflicts"}, {"oid": "7eea9a399d3d7400b1f2b94f6d772ad5416a0645", "committedDate": "2021-11-01 21:48:44 -0400", "message": "Fixing merge conflicts"}, {"oid": "3e4bca7cdb006005bd034f9621872250d0e96dbb", "committedDate": "2021-11-01 21:52:24 -0400", "message": "fixing merge conflicts"}, {"oid": "ab6c1c01bfb4498a16c3b9f69c18c4903900de83", "committedDate": "2021-11-01 22:00:44 -0400", "message": "Fixing merge conflicts"}, {"oid": "1b1b0f68f52f9d821ddc10f663a44fe6d72462cd", "committedDate": "2021-11-01 22:03:27 -0400", "message": "Fixing merge conflicts"}, {"oid": "f1ce41fa694124c762338f78fb45a139926db77c", "committedDate": "2021-11-01 22:20:22 -0400", "message": "Fixing merge conflicts"}, {"oid": "01163b1f4fae088ba39a2f1c1145d5653f71b9e8", "committedDate": "2021-11-01 22:22:46 -0400", "message": "Fixing merge conflicts"}, {"oid": "21600c478569436ab215402bbca4bbbeced841a8", "committedDate": "2021-11-03 20:59:54 -0400", "message": "Adding localization to all MekHQ resource maps"}, {"oid": "1a5ba2fa871c8629e951d371c2ee96cc29fa8f93", "committedDate": "2021-11-07 13:49:58 -0500", "message": "Fixing merge conflicts"}, {"oid": "a851f6c71e5a1f825a840c64be2bae6da2a77eaf", "committedDate": "2021-11-07 14:05:08 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_PersonnelRandomization"}, {"oid": "65eb27ddf74244265359db14e66c097eb2299df0", "committedDate": "2021-11-07 14:50:33 -0500", "message": "Fixing merge conflicts"}, {"oid": "1b57359b3037938ef8291d96de3449013c82b9a4", "committedDate": "2021-11-09 09:23:24 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_ForceIconRework"}, {"oid": "7e997be9838621bdc8bbecbcdbc908a7580060ed", "committedDate": "2021-11-12 21:17:13 -0500", "message": "Removing unused tech functionality"}, {"oid": "dbfb302ab8e895c2e37a41f10415f634d1039c4c", "committedDate": "2021-11-21 18:45:43 -0500", "message": "Expanding Finances newDay"}, {"oid": "b6ffe21c8b07b35f599a2f6bd11da05d7961af0d", "committedDate": "2021-11-23 10:10:34 -0500", "message": "Merge pull request #2028 from Windchild292/dev_Windchild_476"}, {"oid": "e51f331c5e7b430e3f560fee9ad58995fb944704", "committedDate": "2021-11-23 17:35:05 -0500", "message": "2962: AtB Campaigns Now Properly Load with Automatic or Tech Acquisition Skills"}, {"oid": "2f445541d15fd465279057131bf48ef28d9bd162", "committedDate": "2021-11-23 18:55:05 -0500", "message": "Fixing merge conflicts"}, {"oid": "c06560e49182859791bab98148ba76507f26612b", "committedDate": "2021-11-27 14:04:02 -0500", "message": "Merge pull request #2966 from Windchild292/dev_Windchild_2962"}, {"oid": "69f79e10f44976d90e36ca3acb5256b6dfc91548", "committedDate": "2021-11-27 18:49:28 -0500", "message": "Implementing the retirement and dependent stopgap options and option updates"}, {"oid": "135cb6d188296ed5db33602f9d65eacbedfb2fa3", "committedDate": "2021-11-27 22:07:45 -0500", "message": "Finishing dependent options and starting on retirement setup"}, {"oid": "a831b4695fd5ea8b1679db9068c85d9ac235f5e0", "committedDate": "2021-11-27 22:57:22 -0500", "message": "Starting to implement the new options"}, {"oid": "bfaed6eccd3257e67b05ad33dadd14cfd98ce560", "committedDate": "2021-12-02 18:05:59 -0500", "message": "Fixing merge conflicts"}, {"oid": "a31998dda25a2856241c10aba4f25a3e8975fc28", "committedDate": "2021-12-02 19:47:30 -0500", "message": "Fixing merge conflicts"}, {"oid": "8ae7fffc1b4afde219beaf122edf562b69a810d4", "committedDate": "2021-12-02 19:49:14 -0500", "message": "Fixing merge conflicts"}, {"oid": "c76c94e6cd4abe6e9f39bb57f5376dcfcf8c29ca", "committedDate": "2021-12-02 19:59:15 -0500", "message": "Fixing merge conflicts"}, {"oid": "8ad7114a3a34794b2d77e3d201f63d2c646a9361", "committedDate": "2021-12-04 14:45:10 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_RetirementDependentStopgaps"}, {"oid": "71c75c8296ecc0c857b75d51ff1c7984efa7e9aa", "committedDate": "2021-12-04 15:03:37 -0500", "message": "Finishing the internal code for the retirement and dependent stopgaps"}, {"oid": "4fb12af6ec7c26ac06d9a498016211a5e3889240", "committedDate": "2021-12-04 15:13:25 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_AssetTerms"}, {"oid": "ea8d42d1c280d499d207c0da43feb77a06b6dcba", "committedDate": "2021-12-04 16:10:22 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_MHQLocalization"}, {"oid": "97af694c5485ad1dbf5900228d3b5e6de405cb02", "committedDate": "2021-12-11 17:07:11 -0500", "message": "MekHQ Log4j 2 Implementation"}, {"oid": "122363fd9f8d850c11781b0ed50335433bcf418b", "committedDate": "2021-12-17 20:08:30 -0500", "message": "Fixing merge conflicts"}, {"oid": "b781d1a8406d5cfec346343463484ac519d1ee9a", "committedDate": "2021-12-20 13:20:34 -0500", "message": "Fixing merge conflicts"}, {"oid": "1bc3ac4e6576a7fa06103828a729d010f6a7b3ef", "committedDate": "2021-12-20 15:37:16 -0500", "message": "Actually print the stacktrace for individual exceptions"}, {"oid": "6e868f9400798d8cc8b61055b96de07531af1f34", "committedDate": "2021-12-20 16:21:24 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_RetirementDependentStopgaps"}, {"oid": "056f0d1e618651857b043280dbe226e80eb91d7a", "committedDate": "2021-12-20 16:27:18 -0500", "message": "Fixing merge conflicts"}, {"oid": "0e5e7675cc3b0606c97f5060a8fd53a69a90641e", "committedDate": "2021-12-20 16:31:40 -0500", "message": "Fixing merge conflicts"}, {"oid": "fb5e5a836a6100119706df72ee695325d77cf5af", "committedDate": "2021-12-20 16:36:02 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_PersonnelRandomization"}, {"oid": "30d7086d1389ed93b333b5eb614a4777498bd826", "committedDate": "2021-12-20 16:41:54 -0500", "message": "Fixing merge conflicts"}, {"oid": "c28b63e7005b99a3f80a9cb73b0255b8a2402db2", "committedDate": "2021-12-20 16:45:19 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_PersonCampaign"}, {"oid": "89a7c65022eabe2af8f5efaabaf9296aa79bde74", "committedDate": "2021-12-21 15:01:54 -0500", "message": "Fixing merge conflicts"}, {"oid": "23519608cf466cb86aef259568ba2aa8ddeb098a", "committedDate": "2021-12-21 16:00:33 -0500", "message": "Fixing merge conflicts"}, {"oid": "bbbe2057261145f9f51c2ac129b4cca3bcd2ccf6", "committedDate": "2021-12-21 16:04:48 -0500", "message": "Fixing merge conflicts"}, {"oid": "b65b9f1efdb52692da51596d934b6360533b2bf7", "committedDate": "2021-12-21 16:23:03 -0500", "message": "Fixing merge conflicts"}, {"oid": "a253bfba5d4bc811ccd0c6c17e659dff178fbbb0", "committedDate": "2021-12-21 16:30:49 -0500", "message": "Fixing merge conflicts"}, {"oid": "0caff4e79e691213a2621323b94dfadfa73c9060", "committedDate": "2021-12-22 08:16:56 -0500", "message": "Fixing merge conflicts"}, {"oid": "a44cee38dbe9808a000178e575eb90d60a401175", "committedDate": "2021-12-23 12:26:57 -0500", "message": "Merge pull request #3015 from MegaMek/dev_Windchild_3326"}, {"oid": "ea6a179e03d1519afc3236abe50978edc43fc3d8", "committedDate": "2021-12-23 12:32:38 -0500", "message": "Merge pull request #2812 from Windchild292/dev_Windchild_PersonCampaign"}, {"oid": "d88588cf01f272577d96e1ff2a27c7286def7db9", "committedDate": "2021-12-23 21:04:47 -0500", "message": "Fixing merge conflicts"}, {"oid": "94ca7dff3bd09ef2fbb82e5d3ce0a5dccab335a8", "committedDate": "2021-12-28 18:08:30 -0500", "message": "Fixing merge conflicts"}, {"oid": "5089ba272b3ca25ab52ca4fcc1bef3766377f2ec", "committedDate": "2022-01-08 13:22:56 -0500", "message": "Fixing merge conflicts"}, {"oid": "375a9524c6382f5214c980bf8ad8b07a22f75120", "committedDate": "2022-01-08 13:28:11 -0500", "message": "Fixing merge conflicts"}, {"oid": "0e0aa7780df25016999f813dc36110599ee1b380", "committedDate": "2022-01-08 13:40:54 -0500", "message": "Fixing merge conflicts, round 2"}, {"oid": "5cc8ac688c67e1e1817c0cbb4a78eaf7dd0a477b", "committedDate": "2022-01-08 14:03:23 -0500", "message": "Fixing merge conflicts"}, {"oid": "eb7c6c828694fb624746168dbb4c35b1289f6e11", "committedDate": "2022-01-08 17:22:10 -0500", "message": "Fixing merge conflicts"}, {"oid": "dcb18ce61944010cc634325d3f46ccaf907758be", "committedDate": "2022-01-08 18:01:56 -0500", "message": "Cleaning up a bit of person creation"}, {"oid": "4d86865e1498a1312a21b91323c33d18f33a8dc9", "committedDate": "2022-01-09 11:12:58 -0500", "message": "Adding missing nullable tag and fixing missing null handling for faction selector"}, {"oid": "6023dd377efcb7802f6c905de61231ec50fee675", "committedDate": "2022-01-09 11:48:57 -0500", "message": "Missed that a null faction is fine for planet generation"}, {"oid": "4bddfb6f0d3906ed96120594d84d4e476e42d971", "committedDate": "2022-01-19 17:09:56 -0500", "message": "Tearing out MekHQ/src/mekhq/MekHqXmlSerializable.java"}, {"oid": "cc823a078ddc1a8924d1e2c02e93375a6b27d327", "committedDate": "2022-01-19 19:19:33 -0500", "message": "Removing all serialVersionUID uses in MekHQ"}, {"oid": "c9ac45226f5852f8bb76af479c9d962105bbbed7", "committedDate": "2022-01-19 20:02:33 -0500", "message": "Mass spacing fixes"}, {"oid": "be1cfbd484c6adc1c8f66578c5bfe94b39047b3c", "committedDate": "2022-01-20 09:59:55 -0500", "message": "Applying changes from initial personal review"}, {"oid": "2c71e119c210a9c95690eae19a0cdab5beb69bd6", "committedDate": "2022-01-20 10:30:23 -0500", "message": "Updating everything using final PrintWriter so that they're up to date, so I have a nice way to track what's updated and what is not"}, {"oid": "bc2c2966614f17d153b03c3087b46c1a4b44b969", "committedDate": "2022-01-21 19:03:24 -0500", "message": "SuiteOptions: Naming standardization and finishing initial setup"}, {"oid": "f3b9f5b924748acfd1ad404aed3ae99e4382b885", "committedDate": "2022-01-24 12:24:25 -0500", "message": "Fixing merge conflicts"}, {"oid": "e8395d1d642870050d705d4fac2a0df255cea722", "committedDate": "2022-01-24 12:28:09 -0500", "message": "Fixing merge conflicts"}, {"oid": "d91ac31cb62f0842eb972ad045bdab45c9c3f814", "committedDate": "2022-01-25 17:42:20 -0500", "message": "PIND Migration"}, {"oid": "9fac7b8c6dfc3095299a8f2b2698099818ff5f0a", "committedDate": "2022-01-26 20:37:16 -0500", "message": "Fixing merge conflicts"}, {"oid": "68ef07dd4c65a1c3d546c2da6f01575f3f3c3ad6", "committedDate": "2022-01-26 20:47:30 -0500", "message": "Fixing merge conflicts"}, {"oid": "4d88d0c53f0069b883caece02ec49678aeeeef7e", "committedDate": "2022-02-01 14:20:52 -0500", "message": "Fixing merge conflicts"}, {"oid": "add1e0e345d4bfcfbff554d48b42166703dc9742", "committedDate": "2022-02-03 13:52:45 -0500", "message": "Fixing merge conflicts"}, {"oid": "01633b8cfb55eee9c3240bff79e0122fbc54386b", "committedDate": "2022-02-13 13:10:41 -0500", "message": "Fixing MHQ's Javadoc Build"}, {"oid": "adeb4ea20e6a8eeb365e6887e79ce6a4dd8b18dd", "committedDate": "2022-02-22 19:16:53 -0500", "message": "Initial code for creating standardized code utilities"}, {"oid": "483ec96cd157a857a1e7155be64dc5ef7c72346a", "committedDate": "2022-02-24 20:32:12 -0500", "message": "Migrating a bunch of MHQ utility code to MM"}, {"oid": "88ce57b5171b2d38c738446af4ab779e6d17ae7f", "committedDate": "2022-02-28 20:23:04 -0500", "message": "3146: Properly handling null force to null force reassignment messages"}, {"oid": "c94fc298803b71e6ac75eb935cabba921a8a6571", "committedDate": "2022-03-06 11:49:08 -0500", "message": "Fixing merge conflicts"}, {"oid": "d4b96fd69deddff97744565c43e2d56b8e31c53f", "committedDate": "2022-03-07 17:19:54 -0500", "message": "Fixing two accidentally kept negations for Random Dependents Removal"}, {"oid": "48f8d58a75de4c6a5c2868f65554dad4d3a14fd5", "committedDate": "2022-03-09 10:01:16 -0500", "message": "Merge pull request #3148 from Windchild292/dev_Windchild_3146"}, {"oid": "1c307bc93de3a536ba17dd566a9fd49bd0046c8e", "committedDate": "2022-03-21 18:22:40 -0400", "message": "Fixing a bunch of spacing readability issues"}, {"oid": "913c01672fe040a25b473e8142805d2ff4ebfa1b", "committedDate": "2022-03-22 18:24:32 -0400", "message": "Modernizing Lambdas to Method References"}, {"oid": "cc400b9fa7512b6b91ed8a8f434f365b442306a8", "committedDate": "2022-03-22 23:54:28 -0400", "message": "Modernize List::size to List::isEmpty and String::isEmpty to String::isBlank"}, {"oid": "4699f3e482938fb8c322f1daf1bc3b42d78c2a64", "committedDate": "2022-03-28 22:35:03 -0400", "message": "Fixing unused imports"}, {"oid": "494b38fcedcda31bef2e6f701152a47ce1b0e397", "committedDate": "2022-04-11 00:16:20 -0400", "message": "Issue #3196: Fixing Remove Unit NPE"}, {"oid": "4e863ffcf0393e88ebb25b76dd314d994b2cfad5", "committedDate": "2022-04-12 17:18:21 -0400", "message": "Death Module: Initial Commit For the New Setup"}, {"oid": "2e8d0c32fa5c09c862fb6c5625a58d206b70ba34", "committedDate": "2022-04-12 18:20:50 -0400", "message": "Cleaning up and modernizing the death code"}, {"oid": "be00026349d450b7f2fb262f11d161ca249c5ab5", "committedDate": "2022-04-17 21:14:46 -0400", "message": "Standardizing Personnel Flags into their own setup instead of multiple previous setups"}, {"oid": "114c9ef6cbeb045e3cc88716964526ee70372408", "committedDate": "2022-05-04 10:10:43 -0400", "message": "3260: Clear Makeshift Clubs Upon Return To MekHQ"}, {"oid": "e0f4dd9d34946716a517c0b42401b33740c51f30", "committedDate": "2022-05-06 19:58:04 -0400", "message": "Renaming the civilian role check to isCivilian, and adding missing logging for a civilian error"}, {"oid": "5b35da02f167e0d577e779b21dfd3cbd2110f92b", "committedDate": "2022-05-06 22:48:48 -0400", "message": "Merge pull request #3266 from Windchild292/dev_Windchild_RetirementDependentOrNoneLogging"}, {"oid": "c6db6046da0de4e7d40d7ac930a453d2805f6a92", "committedDate": "2022-05-10 18:34:57 -0400", "message": "Merge branch 'MegaMek:master' into dev_Windchild_AssetTerms"}, {"oid": "6b720cfa833458c385546a054b762d2745c37ce1", "committedDate": "2022-05-14 10:11:35 -0400", "message": "Fixing method name"}, {"oid": "72a352ee60bdec3467fa07665ed9753cc399b6f9", "committedDate": "2022-05-15 12:41:06 -0400", "message": "Swapping MekHQ to JUnit 5"}, {"oid": "0a2050177f55c5540d898835cfd48e4f976bb4cb", "committedDate": "2022-05-25 16:54:44 -0400", "message": "Modernizing finances XML read and write"}, {"oid": "8b34d18aa825a1416df7b1a8ecb2bb898cea1026", "committedDate": "2022-05-25 18:27:34 -0400", "message": "Renaming MekHqXmlXmlUtil to utilities/MHQXMLUtility"}, {"oid": "3c19a5aba0df7a2035e7a81e61a8b5543cb13a9c", "committedDate": "2022-05-25 18:36:42 -0400", "message": "Fixing merge conflicts"}, {"oid": "4a84ac8700a2d5bf7624dd25d4c77cff34478500", "committedDate": "2022-05-25 23:32:29 -0400", "message": "Merge branch 'master' into dev_Windchild_CurrentLocationXML"}, {"oid": "32aaaac33b8e53a355c373879ee4de9f91747c39", "committedDate": "2022-05-26 07:16:40 -0400", "message": "Merge branch 'master' into dev_Windchild_PersonFlags"}, {"oid": "9472637ad3cb3c27cba2c318c5ccdf022ca56d86", "committedDate": "2022-05-26 08:10:57 -0400", "message": "Fixing merge conflicts"}, {"oid": "f35709d1278c76d1ea7c10485071e0097b1aebf0", "committedDate": "2022-05-26 08:39:19 -0400", "message": "Switching to a single retirement report"}, {"oid": "b40d7b0e6bd9003de8df60cc732b5e195741d8aa", "committedDate": "2022-05-30 16:37:32 -0400", "message": "Merge pull request #3234 from Windchild292/dev_Windchild_PersonFlags"}, {"oid": "f7e43611ee653404079cc2fdced92c083c35362f", "committedDate": "2022-06-01 13:26:16 -0400", "message": "More swaps to using getActualValue"}, {"oid": "76223b1f01db0e020c9069b9c361d7af9f174e6a", "committedDate": "2022-06-01 17:49:36 -0400", "message": "Merge remote-tracking branch 'origin/master' into dev_Windchild_PartPriceApplications"}, {"oid": "e7755fbeddc7d00cc126c3281f4be93685eb83fa", "committedDate": "2022-06-08 20:05:45 -0400", "message": "Ignore End Date for Scenario Assignment to Active Contracts"}, {"oid": "c17408bc1409591bdb76664788c6ad4f55a5d813", "committedDate": "2022-06-18 17:51:05 -0400", "message": "Campaign::getPerson : Adding Nullable Annotation"}, {"oid": "f2abd2addef945880eefcf2a11ccfb5eec610ea3", "committedDate": "2022-06-18 17:59:08 -0400", "message": "Renaming clearGenealogy to clearGenealogyLinks (as that's what it does), and more test progress"}, {"oid": "39ac9b544233876ab9e4a6f914abaf549c76aded", "committedDate": "2022-06-20 22:59:32 -0400", "message": "Bunch of enum cleanups"}, {"oid": "a576a51fb82bbc625198e50a04894cd7749bed1c", "committedDate": "2022-06-21 16:25:02 -0400", "message": "Lots more tests, largely simple ones"}, {"oid": "0f60e6bba5ebdf538b335609e5bfd7817f614393", "committedDate": "2022-06-23 16:17:56 -0400", "message": "3372: Fixing Campaign Loan Report Issues"}, {"oid": "7441a156d93c5a7fb5dab7f9a38a5f87f6321f14", "committedDate": "2022-06-24 22:32:50 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_GenealogyTest"}, {"oid": "f5bb76bdee8f7d7aba18dd83f2d903036ea1f68b", "committedDate": "2022-06-27 13:25:57 -0400", "message": "Merge pull request #3378 from Windchild292/dev_Windchild_3372"}, {"oid": "0948c47088632642d946b7a5eec4eb595a21ac76", "committedDate": "2022-06-29 20:04:53 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_GenealogyTest"}, {"oid": "505318be000041c18ae226d4e1521dc527fc7133", "committedDate": "2022-07-14 17:41:42 -0400", "message": "Adding market enum testing"}, {"oid": "8d3060de0fe1375a8186d41be98a059652a81bed", "committedDate": "2022-07-31 00:15:10 -0400", "message": "add remove stratcon scenario option"}, {"oid": "9d2ebd8a76bc41afdf298da710ad80e1e4b80c0a", "committedDate": "2022-08-02 19:49:23 -0400", "message": "Checking this"}, {"oid": "803755f3d14a7ba3e66bb1e6364d6c4220bac841", "committedDate": "2022-08-03 20:51:52 -0400", "message": "Properly disabling the random tests"}, {"oid": "f79a61c91b06b467d1bbed4dfeaa36f97fd755e3", "committedDate": "2022-08-04 11:12:44 -0400", "message": "Using correct collector"}, {"oid": "4b3952367635a7620bddb96a9e81a7f1a97a2219", "committedDate": "2022-11-15 14:07:43 -0500", "message": "Removing duplicated name generation info from the campaign file"}, {"oid": "5213209bddb612458226cdfa7561a7220f8b3b67", "committedDate": "2022-11-15 15:54:47 -0500", "message": "Fixing deprecated XML utility uses and fixing indentation issues for parts"}, {"oid": "53e7b27c2173373019055e800950173ed7eb20df", "committedDate": "2022-11-15 19:05:53 -0500", "message": "Company Generator: Faction Options"}, {"oid": "230c025b083606834270681ce668a836c76dfc1b", "committedDate": "2022-11-22 16:25:51 -0500", "message": "3489: Adding Small Craft and DropShip Transport Support"}, {"oid": "b5349ccb7e3e9c0345d6685bb9a76a53afed8bdc", "committedDate": "2022-11-26 08:40:31 -0500", "message": "Merge pull request #3510 from MegaMek/dev_Windchild_3489"}, {"oid": "b3f06f70d94e83ed6fad6368cbe5df5d35c20296", "committedDate": "2022-11-26 11:38:42 -0500", "message": "Finishing adding the new option as a selection"}, {"oid": "1cb49fa503593c75f3bee4ebc6cf2574faec13de", "committedDate": "2022-11-26 11:49:33 -0500", "message": "Merge branch 'MegaMek:master' into dev_Windchild_CompanyGeneratorFactionGeneration"}, {"oid": "b47a12937f6b979925f82cb31bb6f2f33cf789e5", "committedDate": "2022-12-05 15:34:26 -0500", "message": "Scenarios are now Scenarios, not Missions"}, {"oid": "b57de2f09b47ffa8da9ab0bd7bba356d1e2e235c", "committedDate": "2022-12-08 23:00:17 -0500", "message": "Merge pull request #3501 from Windchild292/dev_Windchild_DeprecatedXML"}, {"oid": "ade20da3d68431198324cbad4bd7cfcc2fd1ef66", "committedDate": "2022-12-11 23:37:05 -0500", "message": "Merge pull request #3520 from Windchild292/dev_Windchild_ScenariosAreScenarios"}, {"oid": "a6d88033b71b9291e4774a5cbc3e8f577287a523", "committedDate": "2022-12-16 22:33:19 -0500", "message": "Tearing out EncodeControl"}, {"oid": "cec1df762e06d6e3e6c4c437c0d0a25892f44a7d", "committedDate": "2022-12-29 13:15:59 -0500", "message": "Fixing Option Naming Typos"}, {"oid": "e3e1ce62490858d93d695b7e7f8bf17dca068936", "committedDate": "2022-12-29 14:30:54 -0500", "message": "Standardize option naming"}, {"oid": "d385d0bc8fd91a75c631f546272abbff8e07311a", "committedDate": "2022-12-30 13:05:34 -0500", "message": "SkillLevel: Reducing SkillType::getExperienceLevelName calls"}, {"oid": "332b06c4b29e7f809e9cf0cab16a062f65544391", "committedDate": "2023-01-08 20:33:20 -0500", "message": "Yearly Retirement Nag Now Follows Campaign Options"}, {"oid": "62afc895d75aece8a3079267b20eb9e8c3de5cfc", "committedDate": "2023-01-14 16:34:36 -0500", "message": "3558: RATs are Used Outside of AtB"}, {"oid": "0e39c3c4517d5cd46e99546d8e3b3a1cea7cb30b", "committedDate": "2023-01-17 20:12:29 -0500", "message": "Merge branch 'master' into dev_Windchild_CampaignOptionsCleanup"}, {"oid": "da71474de7674e9b213472ce61b254a744c6ae5a", "committedDate": "2023-01-17 20:12:53 -0500", "message": "Merge branch 'MegaMek:master' into dev_Windchild_IsolatedSkillLevelEnumSwapovers"}, {"oid": "a328a1e42771f0c7052a7c9c1b2583134a8534f4", "committedDate": "2023-01-25 22:45:44 -0500", "message": "Campaign Ops Unit Rating: Properly Calculate Personnel Numbers"}, {"oid": "5ad55c0aa2dd0422f1e05d2704860f7674936984", "committedDate": "2023-01-25 23:11:45 -0500", "message": "Applying changes from testing and further rule reading"}, {"oid": "8fc36fbd275ffccf0ed91df60b637a5cc3135a86", "committedDate": "2023-01-29 18:24:48 -0500", "message": "Phenotype Enum: Migrating Uses to Simplification Methods"}, {"oid": "a462c5436ab5bec1a54c2f652f232fdff88f7a42", "committedDate": "2023-01-29 19:28:49 -0500", "message": "Tearing out unused code and swapping to using a map"}, {"oid": "542356e26d4b14d760fa69f33f627ed2b692908b", "committedDate": "2023-02-06 21:17:17 -0500", "message": "Merge pull request #3589 from Windchild292/dev_Windchild_PhenotypeSimplificationMethods"}, {"oid": "2757b555a5a0aa6fdf73322d58173bbee7d22ba5", "committedDate": "2023-02-06 21:25:38 -0500", "message": "Merge pull request #3590 from Windchild292/dev_Windchild_UnusedSPACleanup"}, {"oid": "6784f22a192b7c650bd5be0354bc6946bfec896f", "committedDate": "2023-02-06 21:41:30 -0500", "message": "Merge pull request #3557 from Windchild292/dev_Windchild_YearlyRetirementNag"}, {"oid": "724a8333d072d631c1072fd7ccf2707efe6e2b40", "committedDate": "2023-02-07 20:56:16 -0500", "message": "Fixing merge conflicts"}, {"oid": "e0f16b480db19ce9d36290caa03be8f6be77cace", "committedDate": "2023-02-07 21:43:07 -0500", "message": "Fixing merge conflicts"}, {"oid": "8996781abfef1f08293a06ef53e3af92812a9b5d", "committedDate": "2023-02-07 22:53:45 -0500", "message": "Standardize Mass Repair Mass Salvage naming to MRMS"}, {"oid": "1ccab8e5b040389be54c4730103354fbc0f06406", "committedDate": "2023-02-18 19:25:18 +0000", "message": "3318: Add manual personnel payments that generate Finance debit"}, {"oid": "86649c7c93250458658d765a7e2007134c385c74", "committedDate": "2023-02-25 20:07:13 -0500", "message": "Some related code cleanup"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU2NDMwOQ==", "url": "https://github.com/MegaMek/mekhq/pull/2123#discussion_r500564309", "body": "```suggestion\r\n        return (int) Math.round(getHangar().getUnitsStream()\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return (int)Math.round(getHangar().getUnitsStream()\n          \n          \n            \n                    return (int) Math.round(getHangar().getUnitsStream()", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">return</span> (<span class=\"pl-k\">int</span>)<span class=\"pl-smi\">Math</span><span class=\"pl-k\">.</span>round(getHangar()<span class=\"pl-k\">.</span>getUnitsStream()</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">return</span> (<span class=\"pl-k\">int</span>)<span class=\"x x-first x-last\"> </span><span class=\"pl-smi\">Math</span><span class=\"pl-k\">.</span>round(getHangar()<span class=\"pl-k\">.</span>getUnitsStream()</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "Windchild292", "createdAt": "2020-10-06T20:06:23Z", "path": "MekHQ/src/mekhq/campaign/Campaign.java", "diffHunk": "@@ -7236,117 +7172,88 @@ public void setHealingTimeOptions(int newHeal, int newNaturalHeal) {\n     }\n \n     public int getTotalMechBays() {\n-        double bays = 0;\n-        for (Unit u : getUnits()) {\n-            bays += u.getMechCapacity();\n-        }\n-        return (int)Math.round(bays);\n+        return (int)Math.round(getHangar().getUnitsStream()\n+            .mapToDouble(Unit::getMechCapacity)\n+            .sum());\n     }\n \n     public int getTotalASFBays() {\n-        double bays = 0;\n-        for (Unit u : getUnits()) {\n-            bays += u.getASFCapacity();\n-        }\n-        return (int)Math.round(bays);\n+        return (int)Math.round(getHangar().getUnitsStream()\n+            .mapToDouble(Unit::getASFCapacity)\n+            .sum());\n     }\n \n     public int getTotalSmallCraftBays() {\n-        double bays = 0;\n-        for (Unit u : getUnits()) {\n-            bays += u.getSmallCraftCapacity();\n-        }\n-        return (int)Math.round(bays);\n+        return (int)Math.round(getHangar().getUnitsStream()\n+            .mapToDouble(Unit::getSmallCraftCapacity)\n+            .sum());\n     }\n \n     public int getTotalBattleArmorBays() {\n-        double bays = 0;\n-        for (Unit u : getUnits()) {\n-            bays += u.getBattleArmorCapacity();\n-        }\n-        return (int)Math.round(bays);\n+        return (int)Math.round(getHangar().getUnitsStream()\n+            .mapToDouble(Unit::getBattleArmorCapacity)\n+            .sum());\n     }\n \n     public int getTotalInfantryBays() {\n-        double bays = 0;\n-        for (Unit u : getUnits()) {\n-            bays += u.getInfantryCapacity();\n-        }\n-        return (int)Math.round(bays);\n+        return (int)Math.round(getHangar().getUnitsStream()\n+            .mapToDouble(Unit::getInfantryCapacity)\n+            .sum());\n     }\n \n     public int getTotalHeavyVehicleBays() {\n-        double bays = 0;\n-        for (Unit u : getUnits()) {\n-            bays += u.getHeavyVehicleCapacity();\n-        }\n-        return (int)Math.round(bays);\n+        return (int)Math.round(getHangar().getUnitsStream()\n+            .mapToDouble(Unit::getHeavyVehicleCapacity)\n+            .sum());\n     }\n \n     public int getTotalLightVehicleBays() {\n-        double bays = 0;\n-        for (Unit u : getUnits()) {\n-            bays += u.getLightVehicleCapacity();\n-        }\n-        return (int)Math.round(bays);\n+        return (int)Math.round(getHangar().getUnitsStream()\n+            .mapToDouble(Unit::getLightVehicleCapacity)\n+            .sum());\n     }\n \n     public int getTotalProtomechBays() {\n-        double bays = 0;\n-        for (Unit u : getUnits()) {\n-            bays += u.getProtomechCapacity();\n-        }\n-        return (int)Math.round(bays);\n+        return (int)Math.round(getHangar().getUnitsStream()", "originalCommit": "02cf732d561f245a8a8d39a2b8a819cb45ac94ca", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cb64714e6e2b7d03de487c72eb18c3c09948b6c6", "changed_code": [{"header": "diff --git a/MekHQ/src/mekhq/campaign/Campaign.java b/MekHQ/src/mekhq/campaign/Campaign.java\nindex c9db948ab..4dff77b1d 100644\n--- a/MekHQ/src/mekhq/campaign/Campaign.java\n+++ b/MekHQ/src/mekhq/campaign/Campaign.java\n", "chunk": "@@ -7172,49 +7172,49 @@ public class Campaign implements Serializable, ITechManager {\n     }\n \n     public int getTotalMechBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getMechCapacity)\n             .sum());\n     }\n \n     public int getTotalASFBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getASFCapacity)\n             .sum());\n     }\n \n     public int getTotalSmallCraftBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getSmallCraftCapacity)\n             .sum());\n     }\n \n     public int getTotalBattleArmorBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getBattleArmorCapacity)\n             .sum());\n     }\n \n     public int getTotalInfantryBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getInfantryCapacity)\n             .sum());\n     }\n \n     public int getTotalHeavyVehicleBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getHeavyVehicleCapacity)\n             .sum());\n     }\n \n     public int getTotalLightVehicleBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getLightVehicleCapacity)\n             .sum());\n     }\n \n     public int getTotalProtomechBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getProtomechCapacity)\n             .sum());\n     }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "3f55aabad31fb84ff1e5af9c8caac7bd8c8999a0", "changed_code": [{"header": "diff --git a/MekHQ/src/mekhq/campaign/Campaign.java b/MekHQ/src/mekhq/campaign/Campaign.java\nindex c9db948ab..0f69d5116 100644\n--- a/MekHQ/src/mekhq/campaign/Campaign.java\n+++ b/MekHQ/src/mekhq/campaign/Campaign.java\n", "chunk": "@@ -7172,49 +7161,49 @@ public class Campaign implements Serializable, ITechManager {\n     }\n \n     public int getTotalMechBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getMechCapacity)\n             .sum());\n     }\n \n     public int getTotalASFBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getASFCapacity)\n             .sum());\n     }\n \n     public int getTotalSmallCraftBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getSmallCraftCapacity)\n             .sum());\n     }\n \n     public int getTotalBattleArmorBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getBattleArmorCapacity)\n             .sum());\n     }\n \n     public int getTotalInfantryBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getInfantryCapacity)\n             .sum());\n     }\n \n     public int getTotalHeavyVehicleBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getHeavyVehicleCapacity)\n             .sum());\n     }\n \n     public int getTotalLightVehicleBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getLightVehicleCapacity)\n             .sum());\n     }\n \n     public int getTotalProtomechBays() {\n-        return (int)Math.round(getHangar().getUnitsStream()\n+        return (int) Math.round(getHangar().getUnitsStream()\n             .mapToDouble(Unit::getProtomechCapacity)\n             .sum());\n     }\n", "next_change": {"commit": "a0c1cbf9746ed9486f08ce4aa2376828e846c786", "changed_code": [{"header": "diff --git a/MekHQ/src/mekhq/campaign/Campaign.java b/MekHQ/src/mekhq/campaign/Campaign.java\nindex 0f69d5116..e49c8ce15 100644\n--- a/MekHQ/src/mekhq/campaign/Campaign.java\n+++ b/MekHQ/src/mekhq/campaign/Campaign.java\n", "chunk": "@@ -7152,97 +7101,119 @@ public class Campaign implements Serializable, ITechManager {\n             }\n         }\n     }\n-    /**\n-     * Returns our list of potential transport ships\n-     * @return\n-     */\n-    public Set<UUID> getTransportShips() {\n-        return transportShips;\n-    }\n \n     public int getTotalMechBays() {\n-        return (int) Math.round(getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getMechCapacity)\n-            .sum());\n+        double bays = 0;\n+        for (Unit u : getUnits()) {\n+            bays += u.getMechCapacity();\n+        }\n+        return (int)Math.round(bays);\n     }\n \n     public int getTotalASFBays() {\n-        return (int) Math.round(getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getASFCapacity)\n-            .sum());\n+        double bays = 0;\n+        for (Unit u : getUnits()) {\n+            bays += u.getASFCapacity();\n+        }\n+        return (int)Math.round(bays);\n     }\n \n     public int getTotalSmallCraftBays() {\n-        return (int) Math.round(getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getSmallCraftCapacity)\n-            .sum());\n+        double bays = 0;\n+        for (Unit u : getUnits()) {\n+            bays += u.getSmallCraftCapacity();\n+        }\n+        return (int)Math.round(bays);\n     }\n \n     public int getTotalBattleArmorBays() {\n-        return (int) Math.round(getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getBattleArmorCapacity)\n-            .sum());\n+        double bays = 0;\n+        for (Unit u : getUnits()) {\n+            bays += u.getBattleArmorCapacity();\n+        }\n+        return (int)Math.round(bays);\n     }\n \n     public int getTotalInfantryBays() {\n-        return (int) Math.round(getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getInfantryCapacity)\n-            .sum());\n+        double bays = 0;\n+        for (Unit u : getUnits()) {\n+            bays += u.getInfantryCapacity();\n+        }\n+        return (int)Math.round(bays);\n     }\n \n     public int getTotalHeavyVehicleBays() {\n-        return (int) Math.round(getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getHeavyVehicleCapacity)\n-            .sum());\n+        double bays = 0;\n+        for (Unit u : getUnits()) {\n+            bays += u.getHeavyVehicleCapacity();\n+        }\n+        return (int)Math.round(bays);\n     }\n \n     public int getTotalLightVehicleBays() {\n-        return (int) Math.round(getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getLightVehicleCapacity)\n-            .sum());\n+        double bays = 0;\n+        for (Unit u : getUnits()) {\n+            bays += u.getLightVehicleCapacity();\n+        }\n+        return (int)Math.round(bays);\n     }\n \n     public int getTotalProtomechBays() {\n-        return (int) Math.round(getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getProtomechCapacity)\n-            .sum());\n+        double bays = 0;\n+        for (Unit u : getUnits()) {\n+            bays += u.getProtomechCapacity();\n+        }\n+        return (int)Math.round(bays);\n     }\n \n     public int getTotalDockingCollars() {\n-        return getHangar().getUnitsStream()\n-            .filter(u -> u.getEntity() instanceof Jumpship)\n-            .mapToInt(Unit::getDocks)\n-            .sum();\n+        double collars = 0;\n+        for (Unit u : getUnits()) {\n+            if (u.getEntity() instanceof Jumpship) {\n+                collars += u.getDocks();\n+            }\n+        }\n+        return (int)Math.round(collars);\n     }\n \n     public double getTotalInsulatedCargoCapacity() {\n-        return getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getInsulatedCargoCapacity)\n-            .sum();\n+        double capacity = 0;\n+        for (Unit u : getUnits()) {\n+            capacity += u.getInsulatedCargoCapacity();\n+        }\n+        return capacity;\n     }\n \n     public double getTotalRefrigeratedCargoCapacity() {\n-        return getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getRefrigeratedCargoCapacity)\n-            .sum();\n+        double capacity = 0;\n+        for (Unit u : getUnits()) {\n+            capacity += u.getRefrigeratedCargoCapacity();\n+        }\n+        return capacity;\n     }\n \n     public double getTotalLivestockCargoCapacity() {\n-        return getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getLivestockCargoCapacity)\n-            .sum();\n+        double capacity = 0;\n+        for (Unit u : getUnits()) {\n+            capacity += u.getLivestockCargoCapacity();\n+        }\n+        return capacity;\n     }\n \n     public double getTotalLiquidCargoCapacity() {\n-        return getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getLiquidCargoCapacity)\n-            .sum();\n+        double capacity = 0;\n+        for (Unit u : getUnits()) {\n+            capacity += u.getLiquidCargoCapacity();\n+        }\n+        return capacity;\n     }\n \n     public double getTotalCargoCapacity() {\n-        return getHangar().getUnitsStream()\n-            .mapToDouble(Unit::getCargoCapacity)\n-            .sum();\n+        double capacity = 0;\n+        for (Unit u : getUnits()) {\n+            capacity += u.getCargoCapacity();\n+        }\n+        return capacity;\n     }\n \n     // Liquid not included\n", "next_change": {"commit": "04a16de448a0c7d576a6c3c64c9d23ae08384bae", "changed_code": [{"header": "diff --git a/MekHQ/src/mekhq/campaign/Campaign.java b/MekHQ/src/mekhq/campaign/Campaign.java\nindex e49c8ce15..993f59cfe 100644\n--- a/MekHQ/src/mekhq/campaign/Campaign.java\n+++ b/MekHQ/src/mekhq/campaign/Campaign.java\n", "chunk": "@@ -7101,900 +7157,440 @@ public class Campaign implements Serializable, ITechManager {\n             }\n         }\n     }\n-\n-    public int getTotalMechBays() {\n-        double bays = 0;\n-        for (Unit u : getUnits()) {\n-            bays += u.getMechCapacity();\n-        }\n-        return (int)Math.round(bays);\n+    /**\n+     * Returns our list of potential transport ships\n+     * @return\n+     */\n+    public Set<UUID> getTransportShips() {\n+        return transportShips;\n     }\n \n-    public int getTotalASFBays() {\n-        double bays = 0;\n-        for (Unit u : getUnits()) {\n-            bays += u.getASFCapacity();\n-        }\n-        return (int)Math.round(bays);\n-    }\n+    public String getCombatPersonnelDetails() {\n+        int[] countPersonByType = new int[Person.T_NUM];\n+        int countTotal = 0;\n+        int countInjured = 0;\n+        int countMIA = 0;\n+        int countKIA = 0;\n+        int countDead = 0;\n+        int countRetired = 0;\n+        Money salary = Money.zero();\n \n-    public int getTotalSmallCraftBays() {\n-        double bays = 0;\n-        for (Unit u : getUnits()) {\n-            bays += u.getSmallCraftCapacity();\n-        }\n-        return (int)Math.round(bays);\n-    }\n+        for (Person p : getPersonnel()) {\n+            if (!p.hasPrimaryCombatRole() || !p.getPrisonerStatus().isFree()) {\n+                continue;\n+            }\n \n-    public int getTotalBattleArmorBays() {\n-        double bays = 0;\n-        for (Unit u : getUnits()) {\n-            bays += u.getBattleArmorCapacity();\n+            // Add them to the total count\n+            if (p.getStatus().isActive()) {\n+                countPersonByType[p.getPrimaryRole()]++;\n+                countTotal++;\n+                if (getCampaignOptions().useAdvancedMedical() && p.getInjuries().size() > 0) {\n+                    countInjured++;\n+                } else if (p.getHits() > 0) {\n+                    countInjured++;\n+                }\n+                salary = salary.plus(p.getSalary());\n+            } else if (p.getStatus().isRetired()) {\n+                countRetired++;\n+            } else if (p.getStatus().isMIA()) {\n+                countMIA++;\n+            } else if (p.getStatus().isKIA()) {\n+                countKIA++;\n+                countDead++;\n+            } else if (p.getStatus().isDead()) {\n+                countDead++;\n+            }\n         }\n-        return (int)Math.round(bays);\n-    }\n \n-    public int getTotalInfantryBays() {\n-        double bays = 0;\n-        for (Unit u : getUnits()) {\n-            bays += u.getInfantryCapacity();\n-        }\n-        return (int)Math.round(bays);\n-    }\n+        StringBuilder sb = new StringBuilder(\"Combat Personnel\\n\\n\");\n \n-    public int getTotalHeavyVehicleBays() {\n-        double bays = 0;\n-        for (Unit u : getUnits()) {\n-            bays += u.getHeavyVehicleCapacity();\n-        }\n-        return (int)Math.round(bays);\n-    }\n+        sb.append(String.format(\"%-30s        %4s\\n\", \"Total Combat Personnel\", countTotal));\n \n-    public int getTotalLightVehicleBays() {\n-        double bays = 0;\n-        for (Unit u : getUnits()) {\n-            bays += u.getLightVehicleCapacity();\n+        for (int i = 0; i < Person.T_NUM; i++) {\n+            if (Person.isCombatRole(i)) {\n+                sb.append(String.format(\"    %-30s    %4s\\n\",\n+                        Person.getRoleDesc(i, getFaction().isClan()), countPersonByType[i]));\n+            }\n         }\n-        return (int)Math.round(bays);\n-    }\n \n-    public int getTotalProtomechBays() {\n-        double bays = 0;\n-        for (Unit u : getUnits()) {\n-            bays += u.getProtomechCapacity();\n-        }\n-        return (int)Math.round(bays);\n+        sb.append(\"\\n\")\n+                .append(String.format(\"%-30s        %4s\\n\", \"Injured Combat Personnel\", countInjured))\n+                .append(String.format(\"%-30s        %4s\\n\", \"MIA Combat Personnel\", countMIA))\n+                .append(String.format(\"%-30s        %4s\\n\", \"KIA Combat Personnel\", countKIA))\n+                .append(String.format(\"%-30s        %4s\\n\", \"Retired Combat Personnel\", countRetired))\n+                .append(String.format(\"%-30s        %4s\\n\", \"Dead Combat Personnel\", countDead))\n+                .append(\"\\nMonthly Salary For Combat Personnel: \").append(salary.toAmountAndSymbolString());\n+\n+        return sb.toString();\n     }\n \n-    public int getTotalDockingCollars() {\n-        double collars = 0;\n-        for (Unit u : getUnits()) {\n-            if (u.getEntity() instanceof Jumpship) {\n-                collars += u.getDocks();\n+    public String getSupportPersonnelDetails() {\n+        int[] countPersonByType = new int[Person.T_NUM];\n+        int countTotal = 0;\n+        int countInjured = 0;\n+        int countMIA = 0;\n+        int countKIA = 0;\n+        int countDead = 0;\n+        int countRetired = 0;\n+        Money salary = Money.zero();\n+        int prisoners = 0;\n+        int bondsmen = 0;\n+        int dependents = 0;\n+\n+        for (Person p : getPersonnel()) {\n+            // Add them to the total count\n+            boolean primarySupport = p.hasPrimarySupportRole(false);\n+\n+            if (primarySupport && p.getPrisonerStatus().isFree() && p.getStatus().isActive()) {\n+                countPersonByType[p.getPrimaryRole()]++;\n+                countTotal++;\n+                if (p.getInjuries().size() > 0 || p.getHits() > 0) {\n+                    countInjured++;\n+                }\n+                salary = salary.plus(p.getSalary());\n+            } else if (p.getPrisonerStatus().isPrisoner() && p.getStatus().isActive()) {\n+                prisoners++;\n+                if (p.getInjuries().size() > 0 || p.getHits() > 0) {\n+                    countInjured++;\n+                }\n+            } else if (p.getPrisonerStatus().isBondsman() && p.getStatus().isActive()) {\n+                bondsmen++;\n+                if (p.getInjuries().size() > 0 || p.getHits() > 0) {\n+                    countInjured++;\n+                }\n+            } else if (primarySupport && p.getStatus().isRetired()) {\n+                countRetired++;\n+            } else if (primarySupport && p.getStatus().isMIA()) {\n+                countMIA++;\n+            } else if (primarySupport && p.getStatus().isKIA()) {\n+                countKIA++;\n+                countDead++;\n+            } else if (primarySupport && p.getStatus().isDead()) {\n+                countDead++;\n             }\n-        }\n-        return (int)Math.round(collars);\n-    }\n \n-    public double getTotalInsulatedCargoCapacity() {\n-        double capacity = 0;\n-        for (Unit u : getUnits()) {\n-            capacity += u.getInsulatedCargoCapacity();\n+            if (p.isDependent() && p.getStatus().isActive() && p.getPrisonerStatus().isFree()) {\n+                dependents++;\n+            }\n         }\n-        return capacity;\n-    }\n \n-    public double getTotalRefrigeratedCargoCapacity() {\n-        double capacity = 0;\n-        for (Unit u : getUnits()) {\n-            capacity += u.getRefrigeratedCargoCapacity();\n-        }\n-        return capacity;\n-    }\n+        StringBuilder sb = new StringBuilder(\"Support Personnel\\n\\n\");\n \n-    public double getTotalLivestockCargoCapacity() {\n-        double capacity = 0;\n-        for (Unit u : getUnits()) {\n-            capacity += u.getLivestockCargoCapacity();\n-        }\n-        return capacity;\n-    }\n+        sb.append(String.format(\"%-30s        %4s\\n\", \"Total Support Personnel\", countTotal));\n \n-    public double getTotalLiquidCargoCapacity() {\n-        double capacity = 0;\n-        for (Unit u : getUnits()) {\n-            capacity += u.getLiquidCargoCapacity();\n+        for (int i = 0; i < Person.T_NUM; i++) {\n+            if (Person.isSupportRole(i)) {\n+                sb.append(String.format(\"    %-30s    %4s\\n\",\n+                        Person.getRoleDesc(i, getFaction().isClan()), countPersonByType[i]));\n+            }\n         }\n-        return capacity;\n-    }\n \n-    public double getTotalCargoCapacity() {\n-        double capacity = 0;\n-        for (Unit u : getUnits()) {\n-            capacity += u.getCargoCapacity();\n-        }\n-        return capacity;\n-    }\n-\n-    // Liquid not included\n-    public double getTotalCombinedCargoCapacity() {\n-        return getTotalCargoCapacity() + getTotalLivestockCargoCapacity()\n-                + getTotalInsulatedCargoCapacity() + getTotalRefrigeratedCargoCapacity();\n-    }\n-\n-    public int getNumberOfUnitsByType(long type) {\n-        return getNumberOfUnitsByType(type, false, false);\n-    }\n+        sb.append(\"\\n\")\n+                .append(String.format(\"%-30s        %4s\\n\", \"Injured Support Personnel\", countInjured))\n+                .append(String.format(\"%-30s        %4s\\n\", \"MIA Support Personnel\", countMIA))\n+                .append(String.format(\"%-30s        %4s\\n\", \"KIA Support Personnel\", countKIA))\n+                .append(String.format(\"%-30s        %4s\\n\", \"Retired Support Personnel\", countRetired))\n+                .append(String.format(\"%-30s        %4s\\n\", \"Dead Support Personnel\", countDead))\n+                .append(\"\\nMonthly Salary For Support Personnel: \").append(salary.toAmountAndSymbolString())\n+                .append(String.format(\"\\nYou have \" + dependents + \" %s\", (dependents == 1) ? \"dependent\" : \"dependents\"))\n+                .append(String.format(\"\\nYou have \" + prisoners + \" prisoner%s\", (prisoners == 1) ? \"\" : \"s\"))\n+                .append(String.format(\"\\nYou have \" + bondsmen + \" %s\", (bondsmen == 1) ? \"bondsman\" : \"bondsmen\"));\n \n-    public int getNumberOfUnitsByType(long type, boolean inTransit) {\n-        return getNumberOfUnitsByType(type, inTransit, false);\n+        return sb.toString();\n     }\n \n-    public int getNumberOfUnitsByType(long type, boolean inTransit, boolean lv) {\n-        int num = 0;\n-        for (Unit unit : getUnits()) {\n-            if (!inTransit && !unit.isPresent()) {\n-                continue;\n-            }\n-            if (unit.isMothballed()) {\n-                if (type == Unit.ETYPE_MOTHBALLED) {\n-                    num++;\n-                }\n-                continue;\n-            }\n-            Entity en = unit.getEntity();\n-            if (en instanceof GunEmplacement || en instanceof FighterSquadron || en instanceof Jumpship) {\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_MECH && en instanceof Mech) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_DROPSHIP && en instanceof Dropship) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_SMALL_CRAFT && en instanceof SmallCraft\n-                    && !(en instanceof Dropship)) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_CONV_FIGHTER && en instanceof ConvFighter) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_AERO && en instanceof Aero\n-                    && !(en instanceof SmallCraft || en instanceof ConvFighter)) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_INFANTRY && en instanceof Infantry && !(en instanceof BattleArmor)) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_BATTLEARMOR && en instanceof BattleArmor) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_TANK && en instanceof Tank) {\n-                if ((en.getWeight() <= 50 && lv) || (en.getWeight() > 50 && !lv)) {\n-                    num++;\n-                }\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_PROTOMECH && en instanceof Protomech) {\n-                num++;\n-                continue;\n-            }\n+    public void doMaintenance(Unit u) {\n+        if (!u.requiresMaintenance() || !campaignOptions.checkMaintenance()) {\n+            return;\n         }\n-\n-        return num;\n-    }\n-\n-    public double getCargoTonnage(boolean inTransit) {\n-        return getCargoTonnage(inTransit, false);\n-    }\n-\n-    @SuppressWarnings(\"unused\") // FIXME: This whole method needs re-worked once Dropship Assignments are in\n-    public double getCargoTonnage(boolean inTransit, boolean mothballed) {\n-        double cargoTonnage = 0;\n-        double mothballedTonnage = 0;\n-        int mechs = getNumberOfUnitsByType(Entity.ETYPE_MECH);\n-        int ds = getNumberOfUnitsByType(Entity.ETYPE_DROPSHIP);\n-        int sc = getNumberOfUnitsByType(Entity.ETYPE_SMALL_CRAFT);\n-        int cf = getNumberOfUnitsByType(Entity.ETYPE_CONV_FIGHTER);\n-        int asf = getNumberOfUnitsByType(Entity.ETYPE_AERO);\n-        int inf = getNumberOfUnitsByType(Entity.ETYPE_INFANTRY);\n-        int ba = getNumberOfUnitsByType(Entity.ETYPE_BATTLEARMOR);\n-        int lv = getNumberOfUnitsByType(Entity.ETYPE_TANK, true);\n-        int hv = getNumberOfUnitsByType(Entity.ETYPE_TANK, false);\n-        int protos = getNumberOfUnitsByType(Entity.ETYPE_PROTOMECH);\n-\n-        for (Part part : getSpareParts()) {\n-            if (!inTransit && !part.isPresent()) {\n-                continue;\n-            }\n-            cargoTonnage += (part.getQuantity() * part.getTonnage());\n+        // lets start by checking times\n+        Person tech = u.getTech();\n+        int minutesUsed = u.getMaintenanceTime();\n+        int astechsUsed = getAvailableAstechs(minutesUsed, false);\n+        boolean maintained = ((tech != null) && (tech.getMinutesLeft() >= minutesUsed)\n+                && !tech.isMothballing());\n+        boolean paidMaintenance = true;\n+        if (maintained) {\n+            // use the time\n+            tech.setMinutesLeft(tech.getMinutesLeft() - minutesUsed);\n+            astechPoolMinutes -= astechsUsed * minutesUsed;\n         }\n+        u.incrementDaysSinceMaintenance(maintained, astechsUsed);\n \n-        // place units in bays\n-        // FIXME: This has been temporarily disabled. It really needs dropship assignments done to fix it correctly.\n-        // Remaining units go into cargo\n-        for (Unit unit : getUnits()) {\n-            if (!inTransit && !unit.isPresent()) {\n-                continue;\n-            }\n-            Entity en = unit.getEntity();\n-            if (unit.isMothballed()) {\n-                mothballedTonnage += en.getWeight();\n-                continue;\n-            }\n-            if (en instanceof GunEmplacement || en instanceof FighterSquadron || en instanceof Jumpship) {\n-                continue;\n-            }\n-            // cargoTonnage += en.getWeight();\n-        }\n-        if (mothballed) {\n-            return mothballedTonnage;\n+        int ruggedMultiplier = 1;\n+        if (u.getEntity().hasQuirk(OptionsConstants.QUIRK_POS_RUGGED_1)) {\n+            ruggedMultiplier = 2;\n         }\n-        return cargoTonnage;\n-    }\n \n-    public String getCargoDetails() {\n-        StringBuffer sb = new StringBuffer(\"Cargo\\n\\n\");\n-        double ccc = this.getTotalCombinedCargoCapacity();\n-        double gcc = this.getTotalCargoCapacity();\n-        double icc = this.getTotalInsulatedCargoCapacity();\n-        double lcc = this.getTotalLiquidCargoCapacity();\n-        double scc = this.getTotalLivestockCargoCapacity();\n-        double rcc = this.getTotalRefrigeratedCargoCapacity();\n-        double tonnage = this.getCargoTonnage(false);\n-        double mothballedTonnage = this.getCargoTonnage(false, true);\n-        double mothballedUnits = Math.max(getNumberOfUnitsByType(Unit.ETYPE_MOTHBALLED), 0);\n-        double combined = (tonnage + mothballedTonnage);\n-        double transported = combined > ccc ? ccc : combined;\n-        double overage = combined - transported;\n-\n-        sb.append(String.format(\"%-35s      %6.3f\\n\", \"Total Capacity:\", ccc));\n-        sb.append(String.format(\"%-35s      %6.3f\\n\", \"General Capacity:\", gcc));\n-        sb.append(String.format(\"%-35s      %6.3f\\n\", \"Insulated Capacity:\", icc));\n-        sb.append(String.format(\"%-35s      %6.3f\\n\", \"Liquid Capacity:\", lcc));\n-        sb.append(String.format(\"%-35s      %6.3f\\n\", \"Livestock Capacity:\", scc));\n-        sb.append(String.format(\"%-35s      %6.3f\\n\", \"Refrigerated Capacity:\", rcc));\n-        sb.append(String.format(\"%-35s      %6.3f\\n\", \"Cargo Transported:\", tonnage));\n-        sb.append(String.format(\"%-35s      %4s (%1.0f)\\n\", \"Mothballed Units as Cargo (Tons):\", mothballedUnits, mothballedTonnage));\n-        sb.append(String.format(\"%-35s      %6.3f/%1.3f\\n\", \"Transported/Capacity:\", transported, ccc));\n-        sb.append(String.format(\"%-35s      %6.3f\\n\", \"Overage Not Transported:\", overage));\n+        if (u.getEntity().hasQuirk(OptionsConstants.QUIRK_POS_RUGGED_2)) {\n+            ruggedMultiplier = 3;\n+        }\n \n-        return new String(sb);\n-    }\n+        if (u.getDaysSinceMaintenance() >= (getCampaignOptions().getMaintenanceCycleDays() * ruggedMultiplier)) {\n+            // maybe use the money\n+            if (campaignOptions.payForMaintain()) {\n+                if (!(finances.debit(u.getMaintenanceCost(), Transaction.C_MAINTAIN, \"Maintenance for \"\n+                                + u.getName(), getLocalDate()))) {\n+                    addReport(\"<font color='red'><b>You cannot afford to pay maintenance costs for \"\n+                            + u.getHyperlinkedName() + \"!</b></font>\");\n+                    paidMaintenance = false;\n+                }\n+            }\n+            // it is time for a maintenance check\n+            int qualityOrig = u.getQuality();\n+            String techName = \"Nobody\";\n+            String techNameLinked = techName;\n+            if (null != tech) {\n+                techName = tech.getFullTitle();\n+                techNameLinked = tech.getHyperlinkedFullTitle();\n+            }\n+            // don't do actual damage until we clear the for loop to avoid\n+            // concurrent mod problems\n+            // put it into a hash - 4 points of damage will mean destruction\n+            Map<Part, Integer> partsToDamage = new HashMap<>();\n+            StringBuilder maintenanceReport = new StringBuilder(\"<emph>\" + techName + \" performing maintenance</emph><br><br>\");\n+            for (Part p : u.getParts()) {\n+                String partReport = \"<b>\" + p.getName() + \"</b> (Quality \" + p.getQualityName() + \")\";\n+                if (!p.needsMaintenance()) {\n+                    continue;\n+                }\n+                int oldQuality = p.getQuality();\n+                TargetRoll target = getTargetForMaintenance(p, tech);\n+                if (!paidMaintenance) {\n+                    // TODO : Make this modifier user inputtable\n+                    target.addModifier(1, \"did not pay for maintenance\");\n+                }\n \n-    public int getOccupiedBays(long type) {\n-        return getOccupiedBays(type, false);\n-    }\n+                partReport += \", TN \" + target.getValue() + \"[\" + target.getDesc() + \"]\";\n+                int roll = Compute.d6(2);\n+                int margin = roll - target.getValue();\n+                partReport += \" rolled a \" + roll + \", margin of \" + margin;\n \n-    public int getOccupiedBays(long type, boolean lv) {\n-        int num = 0;\n-        for (Unit unit : getUnits()) {\n-            if (unit.isMothballed()) {\n-                continue;\n-            }\n-            Entity en = unit.getEntity();\n-            if (en instanceof GunEmplacement || en instanceof Jumpship) {\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_MECH && en instanceof Mech) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_DROPSHIP && en instanceof Dropship) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_SMALL_CRAFT && en instanceof SmallCraft && !(en instanceof Dropship)) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_CONV_FIGHTER && en instanceof ConvFighter) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_AERO && en instanceof Aero\n-                    && !(en instanceof SmallCraft || en instanceof ConvFighter)) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_INFANTRY && en instanceof Infantry && !(en instanceof BattleArmor)) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_BATTLEARMOR && en instanceof BattleArmor) {\n-                num++;\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_TANK && en instanceof Tank) {\n-                if ((en.getWeight() <= 50 && lv) || (en.getWeight() > 50 && !lv)) {\n-                    num++;\n+                switch (p.getQuality()) {\n+                    case Part.QUALITY_A: {\n+                        if (margin >= 4) {\n+                            p.improveQuality();\n+                        }\n+                        if (!campaignOptions.useUnofficialMaintenance()) {\n+                            if (margin < -6) {\n+                                partsToDamage.put(p, 4);\n+                            } else if (margin < -4) {\n+                                partsToDamage.put(p, 3);\n+                            } else if (margin == -4) {\n+                                partsToDamage.put(p, 2);\n+                            } else if (margin < -1) {\n+                                partsToDamage.put(p, 1);\n+                            }\n+                        } else if (margin < -6) {\n+                            partsToDamage.put(p, 1);\n+                        }\n+                        break;\n+                    }\n+                    case Part.QUALITY_B: {\n+                        if (margin >= 4) {\n+                            p.improveQuality();\n+                        } else if (margin < -5) {\n+                            p.decreaseQuality();\n+                        }\n+                        if (!campaignOptions.useUnofficialMaintenance()) {\n+                            if (margin < -6) {\n+                                partsToDamage.put(p, 2);\n+                            } else if (margin < -2) {\n+                                partsToDamage.put(p, 1);\n+                            }\n+                        }\n+                        break;\n+                    }\n+                    case Part.QUALITY_C: {\n+                        if (margin < -4) {\n+                            p.decreaseQuality();\n+                        } else if (margin >= 5) {\n+                            p.improveQuality();\n+                        }\n+                        if (!campaignOptions.useUnofficialMaintenance()) {\n+                            if (margin < -6) {\n+                                partsToDamage.put(p, 2);\n+                            } else if (margin < -3) {\n+                                partsToDamage.put(p, 1);\n+                            }\n+                        }\n+                        break;\n+                    }\n+                    case Part.QUALITY_D: {\n+                        if (margin < -3) {\n+                            p.decreaseQuality();\n+                            if ((margin < -4) && !campaignOptions.useUnofficialMaintenance()) {\n+                                partsToDamage.put(p, 1);\n+                            }\n+                        } else if (margin >= 5) {\n+                            p.improveQuality();\n+                        }\n+                        break;\n+                    }\n+                    case Part.QUALITY_E:\n+                        if (margin < -2) {\n+                            p.decreaseQuality();\n+                            if ((margin < -5) && !campaignOptions.useUnofficialMaintenance()) {\n+                                partsToDamage.put(p, 1);\n+                            }\n+                        } else if (margin >= 6) {\n+                            p.improveQuality();\n+                        }\n+                        break;\n+                    case Part.QUALITY_F:\n+                    default:\n+                        if (margin < -2) {\n+                            p.decreaseQuality();\n+                            if (margin < -6 && !campaignOptions.useUnofficialMaintenance()) {\n+                                partsToDamage.put(p, 1);\n+                            }\n+                        }\n+                        // TODO: award XP point if margin >= 6 (make this optional)\n+                        //if (margin >= 6) {\n+                        //\n+                        //}\n+                        break;\n                 }\n-                continue;\n-            }\n-            if (type == Entity.ETYPE_PROTOMECH && en instanceof Protomech) {\n-                num++;\n-                continue;\n+                if (p.getQuality() > oldQuality) {\n+                    partReport += \": <font color='green'>new quality is \" + p.getQualityName() + \"</font>\";\n+                } else if (p.getQuality() < oldQuality) {\n+                    partReport += \": <font color='red'>new quality is \" + p.getQualityName() + \"</font>\";\n+                } else {\n+                    partReport += \": quality remains \" + p.getQualityName();\n+                }\n+                if (null != partsToDamage.get(p)) {\n+                    if (partsToDamage.get(p) > 3) {\n+                        partReport += \", <font color='red'><b>part destroyed</b></font>\";\n+                    } else {\n+                        partReport += \", <font color='red'><b>part damaged</b></font>\";\n+                    }\n+                }\n+                maintenanceReport.append(partReport).append(\"<br>\");\n             }\n-        }\n \n-        if (type == Entity.ETYPE_MECH) {\n-            if (getTotalMechBays() > num) {\n-                return num;\n+            int nDamage = 0;\n+            int nDestroy = 0;\n+            for (Map.Entry<Part, Integer> p : partsToDamage.entrySet()) {\n+                int damage = p.getValue();\n+                if (damage > 3) {\n+                    nDestroy++;\n+                    p.getKey().remove(false);\n+                } else {\n+                    p.getKey().doMaintenanceDamage(damage);\n+                    nDamage++;\n+                }\n             }\n-            return getTotalMechBays();\n-        }\n \n-        if (type == Entity.ETYPE_AERO) {\n-            if (getTotalASFBays() > num) {\n-                return num;\n-            }\n-            return getTotalASFBays();\n-        }\n+            u.setLastMaintenanceReport(maintenanceReport.toString());\n \n-        if (type == Entity.ETYPE_INFANTRY) {\n-            if (getTotalInfantryBays() > num) {\n-                return num;\n+            if (getCampaignOptions().logMaintenance()) {\n+                MekHQ.getLogger().info(getClass(), \"doMaintenance\", maintenanceReport.toString());\n             }\n-            return getTotalInfantryBays();\n-        }\n \n-        if (type == Entity.ETYPE_BATTLEARMOR) {\n-            if (getTotalBattleArmorBays() > num) {\n-                return num;\n+            int quality = u.getQuality();\n+            String qualityString;\n+            boolean reverse = getCampaignOptions().reverseQualityNames();\n+            if (quality > qualityOrig) {\n+                qualityString = \"<font color='green'>Overall quality improves from \"\n+                        + Part.getQualityName(qualityOrig, reverse) + \" to \" + Part.getQualityName(quality, reverse)\n+                        + \"</font>\";\n+            } else if (quality < qualityOrig) {\n+                qualityString = \"<font color='red'>Overall quality declines from \"\n+                        + Part.getQualityName(qualityOrig, reverse) + \" to \" + Part.getQualityName(quality, reverse)\n+                        + \"</font>\";\n+            } else {\n+                qualityString = \"Overall quality remains \" + Part.getQualityName(quality, reverse);\n             }\n-            return getTotalBattleArmorBays();\n-        }\n-\n-        if (type == Entity.ETYPE_TANK) {\n-            if (lv) {\n-                if (getTotalLightVehicleBays() > num) {\n-                    return num;\n-                }\n-                return getTotalLightVehicleBays();\n+            String damageString = \"\";\n+            if (nDamage > 0) {\n+                damageString += nDamage + \" parts were damaged. \";\n             }\n-            if (getTotalHeavyVehicleBays() > num) {\n-                return num;\n+            if (nDestroy > 0) {\n+                damageString += nDestroy + \" parts were destroyed.\";\n             }\n-            return getTotalHeavyVehicleBays();\n-        }\n-\n-        if (type == Entity.ETYPE_SMALL_CRAFT) {\n-            if (getTotalSmallCraftBays() > num) {\n-                return num;\n+            if (!damageString.isEmpty()) {\n+                damageString = \"<b><font color='red'>\" + damageString + \"</b></font> [<a href='REPAIR|\" + u.getId()\n+                        + \"'>Repair bay</a>]\";\n             }\n-            return getTotalSmallCraftBays();\n-        }\n-\n-        if (type == Entity.ETYPE_PROTOMECH) {\n-            if (getTotalProtomechBays() > num) {\n-                return num;\n+            String paidString = \"\";\n+            if (!paidMaintenance) {\n+                paidString = \"<font color='red'>Could not afford maintenance costs, so check is at a penalty.</font>\";\n             }\n-            return getTotalProtomechBays();\n-        }\n+            addReport(techNameLinked + \" performs maintenance on \" + u.getHyperlinkedName() + \". \" + paidString\n+                    + qualityString + \". \" + damageString + \" [<a href='MAINTENANCE|\" + u.getId()\n+                    + \"'>Get details</a>]\");\n \n-        if (type == Entity.ETYPE_DROPSHIP) {\n-            if (getTotalDockingCollars() > num) {\n-                return num;\n-            }\n-            return getTotalDockingCollars();\n+            u.resetDaysSinceMaintenance();\n         }\n-\n-        return -1; // default, this is an error condition\n     }\n \n-    public String getTransportDetails() {\n-        int noMech = Math.max(getNumberOfUnitsByType(Entity.ETYPE_MECH) - getOccupiedBays(Entity.ETYPE_MECH), 0);\n-        int noDS = Math.max(getNumberOfUnitsByType(Entity.ETYPE_DROPSHIP) - getOccupiedBays(Entity.ETYPE_DROPSHIP), 0);\n-        int noSC = Math.max(getNumberOfUnitsByType(Entity.ETYPE_SMALL_CRAFT) - getOccupiedBays(Entity.ETYPE_SMALL_CRAFT), 0);\n-        @SuppressWarnings(\"unused\") // FIXME: What type of bays do ConvFighters use?\n-        int noCF = Math\n-                .max(getNumberOfUnitsByType(Entity.ETYPE_CONV_FIGHTER) - getOccupiedBays(Entity.ETYPE_CONV_FIGHTER), 0);\n-        int noASF = Math.max(getNumberOfUnitsByType(Entity.ETYPE_AERO) - getOccupiedBays(Entity.ETYPE_AERO), 0);\n-        int nolv = Math.max(getNumberOfUnitsByType(Entity.ETYPE_TANK, false, true) - getOccupiedBays(Entity.ETYPE_TANK, true), 0);\n-        int nohv = Math.max(getNumberOfUnitsByType(Entity.ETYPE_TANK) - getOccupiedBays(Entity.ETYPE_TANK), 0);\n-        int noinf = Math.max(getNumberOfUnitsByType(Entity.ETYPE_INFANTRY) - getOccupiedBays(Entity.ETYPE_INFANTRY), 0);\n-        int noBA = Math.max(getNumberOfUnitsByType(Entity.ETYPE_BATTLEARMOR) - getOccupiedBays(Entity.ETYPE_BATTLEARMOR), 0);\n-        @SuppressWarnings(\"unused\") // FIXME: This should be used somewhere...\n-        int noProto = Math.max(getNumberOfUnitsByType(Entity.ETYPE_PROTOMECH) - getOccupiedBays(Entity.ETYPE_PROTOMECH),\n-                0);\n-        int freehv = Math.max(getTotalHeavyVehicleBays() - getOccupiedBays(Entity.ETYPE_TANK), 0);\n-        int freeinf = Math.max(getTotalInfantryBays() - getOccupiedBays(Entity.ETYPE_INFANTRY), 0);\n-        int freeba = Math.max(getTotalBattleArmorBays() - getOccupiedBays(Entity.ETYPE_BATTLEARMOR), 0);\n-        int freeSC = Math.max(getTotalSmallCraftBays() - getOccupiedBays(Entity.ETYPE_SMALL_CRAFT), 0);\n-        int mothballedAsCargo = Math.max(getNumberOfUnitsByType(Unit.ETYPE_MOTHBALLED), 0);\n-\n-        String asfAppend = \"\";\n-        int newNoASF = Math.max(noASF - freeSC, 0);\n-        int placedASF = Math.max(noASF - newNoASF, 0);\n-        if (noASF > 0 && freeSC > 0) {\n-            asfAppend = \" [\" + placedASF + \" ASF will be placed in Small Craft bays]\";\n-            freeSC -= placedASF;\n-        }\n-\n-        String lvAppend = \"\";\n-        int newNolv = Math.max(nolv - freehv, 0);\n-        int placedlv = Math.max(nolv - newNolv, 0);\n-        if (nolv > 0 && freehv > 0) {\n-            lvAppend = \" [\" + placedlv + \" Light Vehicles will be placed in Heavy Vehicle bays]\";\n-            freehv -= placedlv;\n-        }\n-\n-        if (noBA > 0 && freeinf > 0) {\n-\n-        }\n-\n-        if (noinf > 0 && freeba > 0) {\n-\n-        }\n-\n-        StringBuffer sb = new StringBuffer(\"Transports\\n\\n\");\n-\n-        // Lets do Mechs first.\n-        sb.append(String.format(\"%-35s      %4d (%4d)      %-35s     %4d\\n\", \"Mech Bays (Occupied):\",\n-                getTotalMechBays(), getOccupiedBays(Entity.ETYPE_MECH), \"Mechs Not Transported:\", noMech));\n-\n-        // Lets do ASF next.\n-        sb.append(String.format(\"%-35s      %4d (%4d)      %-35s     %4d%s\\n\", \"ASF Bays (Occupied):\",\n-                getTotalASFBays(), getOccupiedBays(Entity.ETYPE_AERO), \"ASF Not Transported:\", noASF, asfAppend));\n-\n-        // Lets do Light Vehicles next.\n-        sb.append(String.format(\"%-35s      %4d (%4d)      %-35s     %4d%s\\n\", \"Light Vehicle Bays (Occupied):\",\n-                getTotalLightVehicleBays(), getOccupiedBays(Entity.ETYPE_TANK, true), \"Light Vehicles Not Transported:\",\n-                nolv, lvAppend));\n-\n-        // Lets do Heavy Vehicles next.\n-        sb.append(String.format(\"%-35s      %4d (%4d)      %-35s     %4d\\n\", \"Heavy Vehicle Bays (Occupied):\",\n-                getTotalHeavyVehicleBays(), getOccupiedBays(Entity.ETYPE_TANK), \"Heavy Vehicles Not Transported:\",\n-                nohv));\n-\n-        if (noASF > 0 && freeSC > 0) {\n-            // Lets do ASF in Free Small Craft Bays next.\n-            sb.append(String.format(\"%-35s   %4d (%4d)      %-35s     %4d\\n\", \"   Light Vehicles in Heavy Vehicle Bays (Occupied):\",\n-                    getTotalHeavyVehicleBays(), getOccupiedBays(Entity.ETYPE_TANK) + placedlv,\n-                    \"Light Vehicles Not Transported:\", newNolv));\n-        }\n-\n-        if (nolv > 0 && freehv > 0) {\n-\n-        }\n-\n-        // Lets do Infantry next.\n-        sb.append(String.format(\"%-35s      %4d (%4d)      %-35s     %4d\\n\", \"Infantry Bays (Occupied):\",\n-                getTotalInfantryBays(), getOccupiedBays(Entity.ETYPE_INFANTRY), \"Infantry Not Transported:\", noinf));\n-\n-        if (noBA > 0 && freeinf > 0) {\n-\n-        }\n-\n-        // Lets do Battle Armor next.\n-        sb.append(String.format(\"%-35s      %4d (%4d)      %-35s     %4d\\n\", \"Battle Armor Bays (Occupied):\",\n-                getTotalBattleArmorBays(), getOccupiedBays(Entity.ETYPE_BATTLEARMOR), \"Battle Armor Not Transported:\",\n-                noBA));\n-\n-        if (noinf > 0 && freeba > 0) {\n-\n-        }\n-\n-        // Lets do Small Craft next.\n-        sb.append(String.format(\"%-35s      %4d (%4d)      %-35s     %4d\\n\", \"Small Craft Bays (Occupied):\",\n-                getTotalSmallCraftBays(), getOccupiedBays(Entity.ETYPE_SMALL_CRAFT), \"Small Craft Not Transported:\",\n-                noSC));\n-\n-        if (noASF > 0 && freeSC > 0) {\n-            // Lets do ASF in Free Small Craft Bays next.\n-            sb.append(String.format(\"%-35s   %4d (%4d)      %-35s     %4d\\n\", \"   ASF in Small Craft Bays (Occupied):\",\n-                    getTotalSmallCraftBays(), getOccupiedBays(Entity.ETYPE_SMALL_CRAFT) + placedASF,\n-                    \"ASF Not Transported:\", newNoASF));\n-        }\n-\n-        // Lets do Protomechs next.\n-        sb.append(String.format(\"%-35s      %4d (%4d)      %-35s     %4d\\n\", \"Protomech Bays (Occupied):\",\n-                getTotalProtomechBays(), getOccupiedBays(Entity.ETYPE_PROTOMECH), \"Protomechs Not Transported:\", noSC));\n-\n-        sb.append(\"\\n\\n\");\n-\n-        sb.append(String.format(\"%-35s      %4d (%4d)      %-35s     %4d\\n\", \"Docking Collars (Occupied):\",\n-                getTotalDockingCollars(), getOccupiedBays(Entity.ETYPE_DROPSHIP), \"Dropships Not Transported:\", noDS));\n-\n-        sb.append(\"\\n\\n\");\n-\n-        sb.append(String.format(\"%-35s      %4d\\n\", \"Mothballed Units (see Cargo report)\", mothballedAsCargo));\n-\n-        return new String(sb);\n-    }\n-\n-    public String getCombatPersonnelDetails() {\n-        int[] countPersonByType = new int[Person.T_NUM];\n-        int countTotal = 0;\n-        int countInjured = 0;\n-        int countMIA = 0;\n-        int countKIA = 0;\n-        int countRetired = 0;\n-        Money salary = Money.zero();\n-\n+    public void initTimeInService() {\n         for (Person p : getPersonnel()) {\n-            // Add them to the total count\n-            if (Person.isCombatRole(p.getPrimaryRole()) && !p.isPrisoner()\n-                    && !p.isBondsman() && p.isActive()) {\n-                countPersonByType[p.getPrimaryRole()]++;\n-                countTotal++;\n-                if (getCampaignOptions().useAdvancedMedical()\n-                        && p.getInjuries().size() > 0) {\n-                    countInjured++;\n-                } else if (p.getHits() > 0) {\n-                    countInjured++;\n+            if (!p.isDependent() && p.getPrisonerStatus().isFree()) {\n+                LocalDate join = null;\n+                for (LogEntry e : p.getPersonnelLog()) {\n+                    if (join == null) {\n+                        // If by some nightmare there is no Joined date just use the first entry.\n+                        join = e.getDate();\n+                    }\n+                    if (e.getDesc().startsWith(\"Joined \") || e.getDesc().startsWith(\"Freed \")) {\n+                        join = e.getDate();\n+                        break;\n+                    }\n                 }\n-                salary = salary.plus(p.getSalary());\n-            } else if (Person.isCombatRole(p.getPrimaryRole())\n-                    && p.getStatus() == Person.S_RETIRED) {\n-                countRetired++;\n-            } else if (Person.isCombatRole(p.getPrimaryRole())\n-                    && p.getStatus() == Person.S_MIA) {\n-                countMIA++;\n-            } else if (Person.isCombatRole(p.getPrimaryRole())\n-                    && p.getStatus() == Person.S_KIA) {\n-                countKIA++;\n-            }\n-        }\n \n-        StringBuffer sb = new StringBuffer(\"Combat Personnel\\n\\n\");\n-\n-        String buffer = String.format(\"%-30s        %4s\\n\", \"Total Combat Personnel\",\n-                countTotal);\n-        sb.append(buffer);\n-\n-        for (int i = 0; i < Person.T_NUM; i++) {\n-            if (Person.isCombatRole(i)) {\n-                buffer = String.format(\"    %-30s    %4s\\n\", Person.getRoleDesc(i, getFaction().isClan()),\n-                        countPersonByType[i]);\n-                sb.append(buffer);\n+                p.setRecruitment((join != null) ? join : getLocalDate().minusYears(1));\n             }\n         }\n-\n-        buffer = String.format(\"%-30s        %4s\\n\",\n-                \"Injured Combat Personnel\", countInjured);\n-        sb.append(\"\\n\" + buffer);\n-        buffer = String.format(\"%-30s        %4s\\n\", \"MIA Combat Personnel\",\n-                countMIA);\n-        sb.append(buffer);\n-        buffer = String.format(\"%-30s        %4s\\n\", \"KIA Combat Personnel\",\n-                countKIA);\n-        sb.append(buffer);\n-        buffer = String.format(\"%-30s        %4s\\n\",\n-                \"Retired Combat Personnel\", countRetired);\n-        sb.append(buffer);\n-\n-        sb.append(\"\\nMonthly Salary For Combat Personnel: \" + salary.toAmountAndSymbolString());\n-\n-        return new String(sb);\n     }\n \n-    public String getSupportPersonnelDetails() {\n-        int[] countPersonByType = new int[Person.T_NUM];\n-        int countTotal = 0;\n-        int countInjured = 0;\n-        int countMIA = 0;\n-        int countKIA = 0;\n-        int countRetired = 0;\n-        Money salary = Money.zero();\n-        int prisoners = 0;\n-        int bondsmen = 0;\n-\n+    public void initTimeInRank() {\n         for (Person p : getPersonnel()) {\n-            // Add them to the total count\n-            if (Person.isSupportRole(p.getPrimaryRole()) && !p.isPrisoner()\n-                    && !p.isBondsman() && p.isActive()) {\n-                countPersonByType[p.getPrimaryRole()]++;\n-                countTotal++;\n-                if (p.getInjuries().size() > 0 || p.getHits() > 0) {\n-                    countInjured++;\n-                }\n-                salary = salary.plus(p.getSalary());\n-            } else if (p.isPrisoner() && p.isActive()) {\n-                prisoners++;\n-                if (p.getInjuries().size() > 0 || p.getHits() > 0) {\n-                    countInjured++;\n-                }\n-            } else if (p.isBondsman() && p.isActive()) {\n-                bondsmen++;\n-                if (p.getInjuries().size() > 0 || p.getHits() > 0) {\n-                    countInjured++;\n-                }\n-            } else if (Person.isSupportRole(p.getPrimaryRole())\n-                    && p.getStatus() == Person.S_RETIRED) {\n-                countRetired++;\n-            } else if (Person.isSupportRole(p.getPrimaryRole())\n-                    && p.getStatus() == Person.S_MIA) {\n-                countMIA++;\n-            } else if (Person.isSupportRole(p.getPrimaryRole())\n-                    && p.getStatus() == Person.S_KIA) {\n-                countKIA++;\n-            }\n-        }\n+            if (!p.isDependent() && p.getPrisonerStatus().isFree()) {\n \n-        StringBuffer sb = new StringBuffer(\"Support Personnel\\n\\n\");\n+                LocalDate join = null;\n+                for (LogEntry e : p.getPersonnelLog()) {\n+                    if (join == null) {\n+                        // If by some nightmare there is no date from the below, just use the first entry.\n+                        join = e.getDate();\n+                    }\n \n-        String buffer = String.format(\"%-30s        %4s\\n\", \"Total Support Personnel\",\n-                countTotal);\n-        sb.append(buffer);\n+                    if (e.getDesc().startsWith(\"Joined \") || e.getDesc().startsWith(\"Freed \")\n+                            || e.getDesc().startsWith(\"Promoted \") || e.getDesc().startsWith(\"Demoted \")) {\n+                        join = e.getDate();\n+                    }\n+                }\n \n-        for (int i = 0; i < Person.T_NUM; i++) {\n-            if (Person.isSupportRole(i)) {\n-                buffer = String.format(\"    %-30s    %4s\\n\", Person.getRoleDesc(i, getFaction().isClan()),\n-                        countPersonByType[i]);\n-                sb.append(buffer);\n+                // For that one in a billion chance the log is empty. Clone today's date and subtract a year\n+                p.setLastRankChangeDate((join != null) ? join : getLocalDate().minusYears(1));\n             }\n         }\n-\n-        buffer = String.format(\"%-30s        %4s\\n\",\n-                \"Injured Support Personnel\", countInjured);\n-        sb.append(\"\\n\" + buffer);\n-        buffer = String.format(\"%-30s        %4s\\n\", \"MIA Support Personnel\",\n-                countMIA);\n-        sb.append(buffer);\n-        buffer = String.format(\"%-30s        %4s\\n\", \"KIA Support Personnel\",\n-                countKIA);\n-        sb.append(buffer);\n-        buffer = String.format(\"%-30s        %4s\\n\",\n-                \"Retired Support Personnel\", countRetired);\n-        sb.append(buffer);\n-\n-        sb.append(\"\\nMonthly Salary For Support Personnel: \" + salary.toAmountAndSymbolString());\n-\n-        sb.append(String.format(\"\\nYou have \" + prisoners + \" prisoner%s\",\n-                prisoners == 1 ? \"\" : \"s\"));\n-        sb.append(String.format(\"\\nYou have \" + bondsmen + \" %s\",\n-                bondsmen == 1 ? \"bondsman\" : \"bondsmen\"));\n-\n-        return new String(sb);\n     }\n \n-    public void doMaintenance(Unit u) {\n-        if (!u.requiresMaintenance()) {\n-            return;\n-        }\n-        // lets start by checking times\n-        Person tech = u.getTech();\n-        int minutesUsed = u.getMaintenanceTime();\n-        int astechsUsed = getAvailableAstechs(minutesUsed, false);\n-        boolean maintained = null != tech\n-                && tech.getMinutesLeft() >= minutesUsed && !tech.isMothballing();\n-        boolean paidMaintenance = true;\n-        if (maintained) {\n-            // use the time\n-            tech.setMinutesLeft(tech.getMinutesLeft() - minutesUsed);\n-            astechPoolMinutes -= astechsUsed * minutesUsed;\n-        }\n-        u.incrementDaysSinceMaintenance(maintained, astechsUsed);\n-        if (u.getDaysSinceMaintenance() >= getCampaignOptions().getMaintenanceCycleDays()) {\n-            // maybe use the money\n-            if (campaignOptions.payForMaintain()) {\n-                if (finances.debit(u.getMaintenanceCost(), Transaction.C_MAINTAIN, \"Maintenance for \" + u.getName(),\n-                        calendar.getTime())) {\n-                } else {\n-                    addReport(\"<font color='red'><b>You cannot afford to pay maintenance costs for \"\n-                            + u.getHyperlinkedName() + \"!</b></font>\");\n-                    paidMaintenance = false;\n-                }\n-            }\n-            if (getCampaignOptions().checkMaintenance()) {\n-                // its time for a maintenance check\n-                int qualityOrig = u.getQuality();\n-                String techName = \"Nobody\";\n-                String techNameLinked = techName;\n-                if (null != tech) {\n-                    techName = tech.getFullTitle();\n-                    techNameLinked = tech.getHyperlinkedFullTitle();\n-                }\n-                // dont do actual damage until we clear the for loop to avoid\n-                // concurrent mod problems\n-                // put it into a hash - 4 points of damage will mean destruction\n-                HashMap<Integer, Integer> partsToDamage = new HashMap<>();\n-                String maintenanceReport = \"<emph>\" + techName + \" performing maintenance</emph><br><br>\";\n-                for (Part p : u.getParts()) {\n-                    String partReport = \"<b>\" + p.getName() + \"</b> (Quality \" + p.getQualityName() + \")\";\n-                    if (!p.needsMaintenance()) {\n-                        continue;\n-                    }\n-                    int oldQuality = p.getQuality();\n-                    TargetRoll target = getTargetForMaintenance(p, tech);\n-                    if (!paidMaintenance) {\n-                        // I should probably make this modifier user inputtable\n-                        target.addModifier(1, \"did not pay maintenance\");\n-                    }\n-                    partReport += \", TN \" + target.getValue() + \"[\" + target.getDesc() + \"]\";\n-                    int roll = Compute.d6(2);\n-                    int margin = roll - target.getValue();\n-                    partReport += \" rolled a \" + roll + \", margin of \" + margin;\n-                    switch (p.getQuality()) {\n-                        case Part.QUALITY_F:\n-                            if (margin < -2) {\n-                                p.decreaseQuality();\n-                                if (margin < -6 && !campaignOptions.useUnofficialMaintenance()) {\n-                                    partsToDamage.put(p.getId(), 1);\n-                                }\n-                            }\n-                            if (margin >= 6) {\n-                                // TODO: award XP point (make this optional)\n-                            }\n-                            break;\n-                        case Part.QUALITY_E:\n-                            if (margin < -2) {\n-                                p.decreaseQuality();\n-                                if (margin < -5 && !campaignOptions.useUnofficialMaintenance()) {\n-                                    partsToDamage.put(p.getId(), 1);\n-                                }\n-                            }\n-                            if (margin >= 6) {\n-                                p.improveQuality();\n-                            }\n-                            break;\n-                        case Part.QUALITY_D:\n-                            if (margin < -3) {\n-                                p.decreaseQuality();\n-                                if (margin < -4 && !campaignOptions.useUnofficialMaintenance()) {\n-                                    partsToDamage.put(p.getId(), 1);\n-                                }\n-                            }\n-                            if (margin >= 5) {\n-                                p.improveQuality();\n-                            }\n-                            break;\n-                        case Part.QUALITY_C:\n-                            if (margin < -4) {\n-                                p.decreaseQuality();\n-                            }\n-                            if (!campaignOptions.useUnofficialMaintenance()) {\n-                                if (margin < -6) {\n-                                    partsToDamage.put(p.getId(), 2);\n-                                } else if (margin < -3) {\n-                                    partsToDamage.put(p.getId(), 1);\n-                                }\n-                            }\n-                            if (margin >= 5) {\n-                                p.improveQuality();\n-                            }\n-                            break;\n-                        case Part.QUALITY_B:\n-                            if (margin < -5) {\n-                                p.decreaseQuality();\n-                            }\n-                            if (!campaignOptions.useUnofficialMaintenance()) {\n-                                if (margin < -6) {\n-                                    partsToDamage.put(p.getId(), 2);\n-                                } else if (margin < -2) {\n-                                    partsToDamage.put(p.getId(), 1);\n-                                }\n-                            }\n-                            if (margin >= 4) {\n-                                p.improveQuality();\n-                            }\n-                            break;\n-                        case Part.QUALITY_A:\n-                            if (!campaignOptions.useUnofficialMaintenance()) {\n-                                if (margin < -6) {\n-                                    partsToDamage.put(p.getId(), 4);\n-                                } else if (margin < -4) {\n-                                    partsToDamage.put(p.getId(), 3);\n-                                } else if (margin == -4) {\n-                                    partsToDamage.put(p.getId(), 2);\n-                                } else if (margin < -1) {\n-                                    partsToDamage.put(p.getId(), 1);\n-                                }\n-                            } else if (margin < -6) {\n-                                partsToDamage.put(p.getId(), 1);\n-                            }\n-                            if (margin >= 4) {\n-                                p.improveQuality();\n-                            }\n-                            break;\n-                    }\n-                    if (p.getQuality() > oldQuality) {\n-                        partReport += \": <font color='green'>new quality is \" + p.getQualityName() + \"</font>\";\n-                    } else if (p.getQuality() < oldQuality) {\n-                        partReport += \": <font color='red'>new quality is \" + p.getQualityName() + \"</font>\";\n-                    } else {\n-                        partReport += \": quality remains \" + p.getQualityName();\n-                    }\n-                    if (null != partsToDamage.get(p.getId())) {\n-                        if (partsToDamage.get(p.getId()) > 3) {\n-                            partReport += \", <font color='red'><b>part destroyed</b></font>\";\n-                        } else {\n-                            partReport += \", <font color='red'><b>part damaged</b></font>\";\n-                        }\n-                    }\n-                    maintenanceReport += partReport + \"<br>\";\n-                }\n-                int nDamage = 0;\n-                int nDestroy = 0;\n-                for (int key : partsToDamage.keySet()) {\n-                    Part p = getPart(key);\n-                    if (null != p) {\n-                        int damage = partsToDamage.get(key);\n-                        if (damage > 3) {\n-                            nDestroy++;\n-                            p.remove(false);\n-                        } else {\n-                            p.doMaintenanceDamage(damage);\n-                            nDamage++;\n-                        }\n+    public void initRetirementDateTracking() {\n+        for (Person person : getPersonnel()) {\n+            if (person.getStatus().isRetired()) {\n+                LocalDate retired = null;\n+                LocalDate lastLoggedDate = null;\n+                for (LogEntry entry : person.getPersonnelLog()) {\n+                    lastLoggedDate = entry.getDate();\n+                    if (entry.getDesc().startsWith(\"Retired\")) {\n+                        retired = entry.getDate();\n                     }\n                 }\n-                u.setLastMaintenanceReport(maintenanceReport);\n-                int quality = u.getQuality();\n-                String qualityString;\n-                boolean reverse = getCampaignOptions().reverseQualityNames();\n-                if (quality > qualityOrig) {\n-                    qualityString = \"<font color='green'>Overall quality improves from \"\n-                            + Part.getQualityName(qualityOrig, reverse) + \" to \" + Part.getQualityName(quality, reverse)\n-                            + \"</font>\";\n-                } else if (quality < qualityOrig) {\n-                    qualityString = \"<font color='red'>Overall quality declines from \"\n-                            + Part.getQualityName(qualityOrig, reverse) + \" to \" + Part.getQualityName(quality, reverse)\n-                            + \"</font>\";\n-                } else {\n-                    qualityString = \"Overall quality remains \" + Part.getQualityName(quality, reverse);\n-                }\n-                String damageString = \"\";\n-                if (nDamage > 0) {\n-                    damageString += nDamage + \" parts were damaged. \";\n-                }\n-                if (nDestroy > 0) {\n-                    damageString += nDestroy + \" parts were destroyed.\";\n-                }\n-                if (!damageString.isEmpty()) {\n-                    damageString = \"<b><font color='red'>\" + damageString + \"</b></font> [<a href='REPAIR|\" + u.getId()\n-                            + \"'>Repair bay</a>]\";\n-                }\n-                String paidString = \"\";\n-                if (!paidMaintenance) {\n-                    paidString = \"<font color='red'>Could not afford maintenance costs, so check is at a penalty.</font>\";\n-                }\n-                addReport(techNameLinked + \" performs maintenance on \" + u.getHyperlinkedName() + \". \" + paidString\n-                        + qualityString + \". \" + damageString + \" [<a href='MAINTENANCE|\" + u.getId()\n-                        + \"'>Get details</a>]\");\n-            }\n-            u.resetDaysSinceMaintenance();\n-        }\n-    }\n \n-    public void initTimeInService() {\n-        for (Person p : getPersonnel()) {\n-            Date join = null;\n-            for (LogEntry e : p.getPersonnelLog()) {\n-                if (join == null){\n-                    // If by some nightmare there is no Joined date just use the first entry.\n-                    join = e.getDate();\n-                }\n-                if (e.getDesc().startsWith(\"Joined \") || e.getDesc().startsWith(\"Freed \")) {\n-                    join = e.getDate();\n-                    break;\n-                }\n-            }\n-            if (!p.isDependent() && !p.isPrisoner() && !p.isBondsman()) {\n-                GregorianCalendar cal = (GregorianCalendar) GregorianCalendar.getInstance();\n-                // For that one in a billion chance the log is empty. Clone todays date and subtract a year\n-                if (join == null) {\n-                    cal = (GregorianCalendar)calendar.clone();\n-                    cal.add(Calendar.YEAR, -1);\n-                    p.setRecruitment(cal);\n-                } else {\n-                    cal.setTime(join);\n-                    p.setRecruitment(cal);\n+                if (retired == null) {\n+                    retired = lastLoggedDate;\n                 }\n+\n+                // For that one in a billion chance the log is empty. Clone today's date and subtract a year\n+                person.setRetirement((retired != null) ? retired : getLocalDate().minusYears(1));\n             }\n         }\n     }\n \n     public void initAtB(boolean newCampaign) {\n-        getRetirementDefectionTracker().setLastRetirementRoll(getCalendar());\n+        getRetirementDefectionTracker().setLastRetirementRoll(getLocalDate());\n \n         if (!newCampaign) {\n             /*\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "3f55aabad31fb84ff1e5af9c8caac7bd8c8999a0", "message": "Merge commit", "committedDate": null}, {"oid": "a0c1cbf9746ed9486f08ce4aa2376828e846c786", "committedDate": "2019-02-26 21:45:56 -0500", "message": "merge"}, {"oid": "3002e321d67f944da3a051a049f0706c0e353aa0", "committedDate": "2019-03-04 20:50:34 -0500", "message": "merge from upstream"}, {"oid": "34f5dfffab4318e94903fece9dbf49dd1ee475c7", "committedDate": "2019-04-23 22:53:00 -0400", "message": "continues work on track gui and rules"}, {"oid": "b1c2e0f95fc8ad45080d9962da602d5fe815c34b", "committedDate": "2019-04-26 22:02:27 -0400", "message": "hook up stratcon rules manager to mekhq event bus"}, {"oid": "6f180f04dabdd9901dc392b093561514eb2e84cc", "committedDate": "2019-05-04 12:17:55 -0400", "message": "merge from upstream"}, {"oid": "119ff411ebb80f91b83b3fe139bb911a79048b3d", "committedDate": "2019-05-12 15:48:11 -0400", "message": "scenario setup work"}, {"oid": "2548381ed541547a775bb8c96fd53802087ec9aa", "committedDate": "2019-06-20 23:58:58 -0400", "message": "merge from upstream"}, {"oid": "ed6a5c015aa33d0bffdcd3297b9482ce600eb146", "committedDate": "2020-04-11 22:33:14 -0400", "message": "merge from upstream"}, {"oid": "ca46ea5005775f38ad56f98bfb8899a187571e49", "committedDate": "2020-06-03 11:30:19 -0400", "message": "merge from upstream"}, {"oid": "b2f014d250be5b4b75ed3f765f10ee1781ab96ae", "committedDate": "2020-06-23 22:21:32 -0400", "message": "merge from upstream"}, {"oid": "2bd7638ed4cc2ad5bc80e4b1bc78ff091c318a87", "committedDate": "2020-07-13 00:06:30 -0400", "message": "merge from upstream"}, {"oid": "d4f035c262d3d9ea7b7f5e935a5807bf5275aa91", "committedDate": "2020-08-08 23:08:38 -0400", "message": "merge from upstream"}, {"oid": "5830ebef6d2f671d0b152f328436ab36bcddacf4", "committedDate": "2020-08-24 20:32:16 -0400", "message": "merge from upstream"}, {"oid": "c8622590fef59265a5a8c4f68676a4a628d0fc0a", "committedDate": "2020-08-26 23:17:49 -0400", "message": "multiple bug fixes and hookup to actual campaign"}, {"oid": "935339ac1b799e58664d736142b2a1fa0d9e4263", "committedDate": "2020-09-09 00:06:07 -0400", "message": "merge from upstream"}, {"oid": "c7d9edb3737ba14da075190a1292ac94bbd7e0f2", "committedDate": "2020-09-20 14:36:56 -0600", "message": "Adding code for a log entry when swapping TOE force."}, {"oid": "2e590a1dbeb8a7b132cd5d312b93af37b9e0620a", "committedDate": "2020-09-29 10:15:54 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_476"}, {"oid": "04f10ee4b7f5bf57284109439ec1ab178b15857e", "committedDate": "2020-10-06 21:41:18 -0400", "message": "merge from upstream"}, {"oid": "04a16de448a0c7d576a6c3c64c9d23ae08384bae", "committedDate": "2020-10-07 14:33:13 -0400", "message": "Split out cargo and hangar statistics from Campaign"}, {"oid": "796379c3c13e8dadad4ac4cfd29f02a30e9c2bd1", "committedDate": "2020-10-07 14:33:13 -0400", "message": "Split out accounting from the Campaign"}, {"oid": "a254e204d91c3fd90698936f8d21aba26aaf0142", "committedDate": "2020-10-07 14:33:14 -0400", "message": "Move PersonnelReport methods"}, {"oid": "361dde24295aa66e89fea69823b01cf497cf4664", "committedDate": "2020-10-07 14:33:14 -0400", "message": "Move more financial reporting out of Campaign"}, {"oid": "c28db6f06dec2b03e487c15f514685d852bdca1e", "committedDate": "2020-10-07 14:33:14 -0400", "message": "Remove unused methods"}, {"oid": "039786019051fddf3af641c0cc0e35e7c85eb156", "committedDate": "2020-10-07 15:49:11 -0400", "message": "Make testing Accountant easier for a Campaign"}, {"oid": "a72b07d7b8ec62055140cd346314602fb020119e", "committedDate": "2020-10-07 16:11:53 -0400", "message": "Make it easier to mock stats classes"}, {"oid": "0400aac175c219dc2fb73ea0a8dfbbf429aaff6e", "committedDate": "2020-10-07 16:45:26 -0400", "message": "Add forEachSparePart to improve performance"}, {"oid": "63e028b04713a41ec415910ea4d0ed03a3678864", "committedDate": "2020-10-08 13:32:32 -0400", "message": "Merge remote-tracking branch 'upstream/master' into move-accounting-and-stats-out-of-campaign"}, {"oid": "13de948b34166d73f4f7a2e5a8982c9f693b12bc", "committedDate": "2020-10-10 15:15:00 -0400", "message": "Use Person directly instead of IDs in Unit"}, {"oid": "923a477ddb1060c2a48c13cca7c5900a40c0f82a", "committedDate": "2020-10-10 15:15:00 -0400", "message": "Use Person instead of an ID"}, {"oid": "58291b29acbe7cc24a4491f3d3ab911f0468a7dc", "committedDate": "2020-10-10 15:41:57 -0400", "message": "Fix logic to check for Already Being Worked On"}, {"oid": "998ab0faf85804f17cc7444ae1b46c2591b5db1f", "committedDate": "2020-10-15 23:34:03 -0400", "message": "merge from upstream"}, {"oid": "75e396b885c6008c6f6a7d72f1bbd7aad8099970", "committedDate": "2020-10-16 16:29:27 -0400", "message": "Moving to an enum for mission status"}, {"oid": "24de5e9720cf823838bf74e4cf4eb562bedbb437", "committedDate": "2020-10-16 18:28:46 -0400", "message": "Merging useUnitRating with the UnitRatingMethod enum"}, {"oid": "ca615b8e13e2158834a33079c6f89b02504c0bf7", "committedDate": "2020-10-17 01:17:28 -0400", "message": "Moving to using AbstractIcon for constants"}, {"oid": "4a54c7e9a18be4084eb1d3748a891b46400bf53d", "committedDate": "2020-10-17 13:11:47 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_IconConstants"}, {"oid": "9c1a47e2e6268b362edd3d6eb2e39018b5802179", "committedDate": "2020-10-20 14:49:01 -0400", "message": "Address PR feedback"}, {"oid": "b5d38e8af270f50fc091db05cf882ea8380fe3a7", "committedDate": "2020-10-20 14:49:08 -0400", "message": "Merge remote-tracking branch 'upstream/master' into units-hold-actual-persons"}, {"oid": "f34ac06c3db416f5e852246e928d3b1c6c132500", "committedDate": "2020-10-20 21:00:04 -0400", "message": "Merge branch 'master' into dev_Windchild_MissionStatus"}, {"oid": "fbc730260407b11dc98571c9b5e184e8f05e6a89", "committedDate": "2020-10-22 12:56:22 -0400", "message": "Standardizing to use the PortraitChooser instead of the older icon selector"}, {"oid": "0637c9d04376fbc5378a09826bdd58e1092b97f0", "committedDate": "2020-10-22 15:07:25 -0400", "message": "Use Units rather than their IDs"}, {"oid": "d25f391110cab3b64118d5963e321c379f8ab3ec", "committedDate": "2020-10-22 15:07:25 -0400", "message": "Do not use Unit IDs in Refits"}, {"oid": "5bf80c3e80c7fd9247fee197d749605de4a4e17b", "committedDate": "2020-10-22 15:07:49 -0400", "message": "Merge branch 'master' into dev_Windchild_IconConstants"}, {"oid": "2eec6da85e021ce0398fd3d715071b7b625855ba", "committedDate": "2020-10-22 23:15:38 -0400", "message": "merge from upstream"}, {"oid": "599b0a3158d94a3eea50fe8314c55177a344c2a9", "committedDate": "2020-10-24 14:22:32 -0400", "message": "Merge remote-tracking branch 'upstream/master' into use-units-not-ids"}, {"oid": "1d9b9a6ee2a71f128d65bb7754463be3ca9a71bc", "committedDate": "2020-10-24 14:26:31 -0400", "message": "Address LGTM issues"}, {"oid": "9f22e79abf71f3d8cf935d5d83d4790af02b32ce", "committedDate": "2020-10-24 14:48:29 -0400", "message": "Add tests for transport unit sets"}, {"oid": "851026ff48ec4e39238b2c56212bac2ea7993670", "committedDate": "2020-10-26 14:53:19 -0400", "message": "Use new Warehouse type in Campaign (etc)"}, {"oid": "37fc5840de9bf6c5bb19b38767e1394be220e1b9", "committedDate": "2020-10-26 16:02:30 -0400", "message": "Move some event logic to the Warehouse"}, {"oid": "3f795a2b3ba1840a198ca067a1d76aed4429f699", "committedDate": "2020-10-26 17:26:50 -0400", "message": "Move removing child parts to the Warehouse"}, {"oid": "d597a8aab6c1b948ebfdcc3f58d2213acb04b200", "committedDate": "2020-10-27 12:29:29 -0400", "message": "Starting to implement edge fixes"}, {"oid": "9978a0b21dd7d6fbd2d0077748027c6ed31753b0", "committedDate": "2020-10-27 12:29:35 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_Edge"}, {"oid": "b2aea6b5d940c4fa06a42cd1b04559815323ab63", "committedDate": "2020-10-27 13:04:35 -0400", "message": "Working on edge code"}, {"oid": "fbd0d470437e527c764daa294d1521ca7509a6af", "committedDate": "2020-10-27 14:04:21 -0400", "message": "Implementing changes as per review"}, {"oid": "c883a5f8c0085c74e8f448ecd3c0f9c04227b067", "committedDate": "2020-10-27 17:22:03 -0400", "message": "Move spare part helpers to Warehouse and add tests"}, {"oid": "dfca32fc2a15a2908cd4f1277261d416fcad1f00", "committedDate": "2020-10-27 21:14:06 -0400", "message": "merge from upstream"}, {"oid": "a7d7c78d0149d3de3828501499fdf61b5ae75be6", "committedDate": "2020-10-28 14:17:13 -0400", "message": "Merge pull request #2167 from sixlettervariables/add-parts-warehouse"}, {"oid": "d9aa78378bd639bd9bd8b36e16e9d407d5c2f1a6", "committedDate": "2020-10-28 14:28:37 -0400", "message": "Clean up part events in Campaign"}, {"oid": "f6acac4474902742fd52f7d3d9cc3cf3c074d16a", "committedDate": "2020-10-28 15:35:29 -0400", "message": "Address LGTM nit"}, {"oid": "b60b5a84ad487fe05e6369a11fedccb4f233a69d", "committedDate": "2020-10-29 15:28:06 -0400", "message": "Move Hire Personnel for a Unit to an action"}, {"oid": "d32837864805c67ac3894ce3a6b84ee8dae064a3", "committedDate": "2020-10-29 15:43:23 -0400", "message": "Don't use unit IDs for parts needing service"}, {"oid": "92b838a6428bae18030b98719a0c20d399377282", "committedDate": "2020-10-29 15:51:09 -0400", "message": "Move unnecessary unit logic from Campaign and into Unit"}, {"oid": "fd327a8f439a378f8f34afcb3067fe57153dcc2d", "committedDate": "2020-11-03 21:23:25 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_MHQPortraitSelector"}, {"oid": "0cbe836f9e807faf4cbef1d391b1ce3ad0e865d1", "committedDate": "2020-11-04 16:17:23 -0500", "message": "Add Quartermaster to manage machines and materiel"}, {"oid": "18cddebe515dbc58e76c49ef789cb3f4b31bc8a2", "committedDate": "2020-11-06 14:57:11 -0500", "message": "Address PR feedback and fix #1801"}, {"oid": "dd8b9c84414cb11c30ec6e2d395e2260235cd73a", "committedDate": "2020-11-06 14:58:38 -0500", "message": "Fix extraneous whitespace"}, {"oid": "31c96a9e64873aa2840946dbb1c12d347994780d", "committedDate": "2020-11-06 16:10:50 -0500", "message": "Swapping portrait generation to use system-based file path comparison"}, {"oid": "8bf24b6a7be023940aad58a0c3c3ded1ee2a9358", "committedDate": "2020-11-06 16:50:16 -0500", "message": "Fixing merge conflicts"}, {"oid": "206529fd93c7b6efd22949d747ea14ec2a1942ed", "committedDate": "2020-11-06 19:38:46 -0500", "message": "Merge pull request #2185 from sixlettervariables/use-units-not-ids-for-transports"}, {"oid": "f246ee2085262fe713a9f24b3eaf6e7adb142e41", "committedDate": "2020-11-07 10:40:39 -0500", "message": "Moving portrait generation code into a random portrait generator"}, {"oid": "139d94f86981a4c6b681ec14d16630b99198024a", "committedDate": "2020-11-07 12:32:07 -0500", "message": "AbstractIcon: Simplifying icon-related code"}, {"oid": "cbec2bdc4861f772bb509fc69f37a8c053522347", "committedDate": "2020-11-07 12:39:03 -0500", "message": "Removing duplicate constants in campaign"}, {"oid": "e9c4a88af33312b049543ac024e2c32784a7b209", "committedDate": "2020-11-07 12:52:54 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_AIPS"}, {"oid": "76f57ccbde3ae98e58e5264c5d06be29b03ce3af", "committedDate": "2020-11-07 15:16:08 -0500", "message": "Merge pull request #2209 from Windchild292/dev_Windchild_RPG"}, {"oid": "067bacc6c00b10192faa2b4e13d4c2127ba75292", "committedDate": "2020-11-07 22:39:06 -0500", "message": "Merge pull request #2211 from Windchild292/dev_Windchild_AIPS"}, {"oid": "a38a43b4cc7f7670aa7ffad2bf318bc15334d0a1", "committedDate": "2020-11-08 13:55:37 -0500", "message": "Merge remote-tracking branch 'upstream/master' into add-quartermaster-2"}, {"oid": "6b4dfeadd20c22e92cb2a0328030ed58c3df5cd1", "committedDate": "2020-11-14 19:29:15 -0500", "message": "Swapping Genealogy and FormerSpouse to no longer use id when active."}, {"oid": "aa59e47ee67a276b3a415ab3cb761291fa2d1593", "committedDate": "2020-11-15 16:10:53 -0500", "message": "Only return non-zero quantities of parts, fixing #2231"}, {"oid": "24c2199bd396e7e059f3a3123c060fce92c04726", "committedDate": "2020-11-30 21:41:10 -0500", "message": "merge from upstream"}, {"oid": "6b3e4afa0664f35d2fc49a8e881b2fd7f22ea981", "committedDate": "2020-12-04 07:37:02 -0500", "message": "Use tested spare part consolidation logic"}, {"oid": "749469b9d6c8f7a36748d76c53dae5cc39365894", "committedDate": "2020-12-04 10:33:33 -0500", "message": "Fixup whitespace"}, {"oid": "cb8a407413b0629636afe9dc153a93699cbcb2da", "committedDate": "2020-12-04 12:21:25 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_476"}, {"oid": "7c0dd98fed591d24803031e815a39480fae3da18", "committedDate": "2020-12-04 12:24:21 -0500", "message": "Fixing merge conflitcs"}, {"oid": "d770e67e26237234553967696e546ef4cd5e6c4a", "committedDate": "2020-12-04 16:20:00 -0500", "message": "Moving ranks to their own folder"}, {"oid": "198ea362215a2605015f13d5baf7a6f9a27e2323", "committedDate": "2020-12-04 17:57:54 -0500", "message": "Moving ranks system names to the Rank XML file"}, {"oid": "c88ca2c1c698dfe730b493048b630ef6d20ce973", "committedDate": "2020-12-13 02:45:36 -0500", "message": "Restore AtBContract references in the ContractMarket #2141"}, {"oid": "dce8434c1c674caf8ba284f7e99a0da72a679958", "committedDate": "2020-12-14 18:14:37 -0500", "message": "Merge pull request #2263 from Windchild292/dev_Windchild_2200"}, {"oid": "02b7023e03f921ec06430d3a3bfbf3fd4d06f12d", "committedDate": "2020-12-16 17:45:57 -0500", "message": "Add the ability to swap out instances of static classes"}, {"oid": "6fe11ed3dea3b240bc594dd3153526f8fa1efcd1", "committedDate": "2020-12-22 17:15:50 -0500", "message": "merge from upstream"}, {"oid": "1080fdc3cc0abf4b10a986fa95243f6a883a2446", "committedDate": "2020-12-22 17:22:20 -0500", "message": "Do not display unknown armor types in the Parts In Use report, fixes #2298"}, {"oid": "26577933fe91fcc839a403192479257fcf64f842", "committedDate": "2020-12-25 17:30:07 -0500", "message": "PlayerColours, Colour Camo Standardization, and standardizing camo selector"}, {"oid": "b7106b6df15109159676c4d5c76d6b57d98d749c", "committedDate": "2020-12-25 17:31:02 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_1727"}, {"oid": "256150fa6780932824d092bb5e1cfc5160a82798", "committedDate": "2020-12-26 23:02:07 -0500", "message": "Fixing colour camouflage during colour set"}, {"oid": "05bda11a452176725c2023ddfda641c5b9d77ff2", "committedDate": "2020-12-30 11:28:06 -0500", "message": "Merge pull request #2294 from sixlettervariables/add-contract-market-tests"}, {"oid": "d96560342ac372c6159e2eb36a930d730575079e", "committedDate": "2020-12-31 10:50:32 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_1727"}, {"oid": "87fef495531a68093af610ebd4d170ad9fe58ed7", "committedDate": "2020-12-31 13:13:30 -0500", "message": "Applying requisite changes in other files"}, {"oid": "1077aa3ce47d85a2b52d46fe24d0a9d6500338b3", "committedDate": "2021-01-07 22:38:01 -0500", "message": "Implementing PersonnelRole Enum"}, {"oid": "7ee43f4d3196080806f016767d68fcc646806b95", "committedDate": "2021-01-08 13:14:46 -0500", "message": "Fixing merge conflicts"}, {"oid": "461f2e03e5c7b7e233ccb188ab3acbea84217051", "committedDate": "2021-01-09 12:33:02 -0500", "message": "Fixing merge conflicts"}, {"oid": "7715f2d53d7b785432c6d12abe076dd9fe734b63", "committedDate": "2021-01-11 00:08:57 -0500", "message": "Continuing camouflage AbstractIcon implementation"}, {"oid": "5c767fe20f909aed7ad9ee04af783fada0f01183", "committedDate": "2021-01-13 14:44:22 -0500", "message": "Fixing colour set and moving EntityImage to use proper camo type"}, {"oid": "13a860aed5400a5bf2ccb7ff55f12b6266ed1c86", "committedDate": "2021-01-14 15:40:05 -0500", "message": "Moving to fully use isConventionalInfantry"}, {"oid": "b395926d66b44f814eeccbcdf238377754b3497f", "committedDate": "2021-01-16 12:03:30 -0500", "message": "Swapping to using streams for missions"}, {"oid": "3c08e5b43761cd85a411618df940a669f43b0f74", "committedDate": "2021-01-16 12:03:41 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_MissionStatus"}, {"oid": "56075ee22d31cf6645cfbc078f6d0059a7c35a2e", "committedDate": "2021-01-16 13:07:08 -0500", "message": "Swapping to stream implementation"}, {"oid": "c56982c6b4c7590fa58659f5739adb6fb98c38b3", "committedDate": "2021-01-16 13:20:27 -0500", "message": "Applying changes from personal review"}, {"oid": "bac1ae00109056ac5aaf4ddf35370fb62657e4ed", "committedDate": "2021-01-16 13:40:07 -0500", "message": "Moving to only use getMissions when necessary"}, {"oid": "6a6ab7d22aae49fceae02409ae8f3121e890ccc1", "committedDate": "2021-01-16 13:57:34 -0500", "message": "Moving to isActiveOn"}, {"oid": "e0a11cd0c98c4fd665190822f79c498645f15426", "committedDate": "2021-01-31 13:08:13 -0700", "message": "Renaming a bunch of personnel options"}, {"oid": "a16944f0ca0f8452a8500b311c0d4c1afd4f69ad", "committedDate": "2021-01-31 13:14:59 -0700", "message": "Finishing the option renames"}, {"oid": "3055e76295deb7d552bc3972b69cc6e0fb1f8760", "committedDate": "2021-02-01 10:17:56 -0700", "message": "Starting to implement Automatic Company Generation"}, {"oid": "909ceb8a84cdd6031bf90c300d47b4d2da527643", "committedDate": "2021-02-01 21:19:14 -0700", "message": "Continuing to work on an AtB Company Generator"}, {"oid": "50d74c591ba7b25978e91a326e3d0ce53513c6cd", "committedDate": "2021-02-07 16:50:13 -0700", "message": "Continuing to implement company generation and its options"}, {"oid": "426328755b88eceb8119a0c91696b2e655a0c00e", "committedDate": "2021-02-08 12:27:32 -0700", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_PersonnelRoles"}, {"oid": "9cbf543bf750926dffd2ad77d82e8da2dc416a54", "committedDate": "2021-02-08 12:57:48 -0700", "message": "Bugfixes and some code cleanup from personal review"}, {"oid": "f00627349f7dfb1bfb29305b3377fa3fea2776c5", "committedDate": "2021-02-11 10:55:45 -0700", "message": "Adding Unit::isConventionalInfantry to ensure the entity is null checked"}, {"oid": "d5767fac16735b748124c2759fa7e02388f3e3e0", "committedDate": "2021-02-11 12:52:56 -0700", "message": "Applying changes from personal review"}, {"oid": "d69c0121a94474264821a25df299ecf667dfefdf", "committedDate": "2021-02-12 22:37:21 -0500", "message": "merge from upstream"}, {"oid": "17e3819e3ef169b2b2bf9114df56a23fc8f57f8b", "committedDate": "2021-02-19 09:26:24 -0500", "message": "Add logging and error trapping on daily unit maintenance #2427"}, {"oid": "3a7dc0d62fbf19186d1bbebeefc14a1838733180", "committedDate": "2021-02-19 09:32:56 -0500", "message": "Add error trapping to daily part maintenance, related to #2427"}, {"oid": "efa0010ac4de3087fd997cad083dfcc7307f1fae", "committedDate": "2021-02-19 10:53:09 -0700", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_PersonnelOptionsTab"}, {"oid": "1e74b62a2b90eefb8fd7a24d4c24faf08d1c6b3b", "committedDate": "2021-02-19 12:27:59 -0700", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_AtBCompanyGeneration"}, {"oid": "8f0b7abad948bde3df857ec022c1a3668076b29c", "committedDate": "2021-02-26 13:31:57 -0700", "message": "2442: Fixing Ranks Issues: Removing ancient migration and code, Using proper setter, and using the Ranks as the spinner"}, {"oid": "d52c982d8da547329729b0caea1fffab274e1b0c", "committedDate": "2021-02-27 10:23:14 -0500", "message": "Use MM's new UnitNameTracker for name collisions"}, {"oid": "3c5f987fa51fbe18454c55214f4d5d5f2b980a90", "committedDate": "2021-03-01 09:12:20 -0700", "message": "Fixing merge conflicts"}, {"oid": "b9f8896698477ed928a80443d0345d6397c58bb2", "committedDate": "2021-03-03 10:07:04 -0700", "message": "Fixing merge conflicts"}, {"oid": "1a9d000431b1f187634f7e6ef15161dd07678998", "committedDate": "2021-03-05 12:19:51 -0700", "message": "Continuing to work on the company generator"}, {"oid": "7f59899475e511f98ed9f64a1c10efab11737c43", "committedDate": "2021-03-05 21:50:52 -0500", "message": "merge from upstream"}, {"oid": "1a6354d39d3f6108e9e0e6f9e455c5a126627347", "committedDate": "2021-03-06 10:44:21 -0500", "message": "Address review comments"}, {"oid": "18c7330a3cc319d1dc3e55892a46c5c80539db9a", "committedDate": "2021-03-06 09:56:12 -0700", "message": "Fixing merge conflicts"}, {"oid": "b19752176bb0619f7ccda9f75d551b050521a106", "committedDate": "2021-03-08 23:25:41 -0500", "message": "merge from upstream"}, {"oid": "0bc70593b2b327657e4ff7709e320451adfadbe6", "committedDate": "2021-03-09 09:01:53 -0700", "message": "Fixing merge conflicts"}, {"oid": "9eca5ea7a7d0fe44db02d1ce091f5bf294cb156d", "committedDate": "2021-03-09 09:07:57 -0700", "message": "Fixing merge conflicts"}, {"oid": "baefb52c3074832565148fffae6d1363449fa8ae", "committedDate": "2021-03-09 09:19:18 -0700", "message": "Fixing merge conflicts"}, {"oid": "9499ad003bfeb58930187abad3334129be912b4e", "committedDate": "2021-03-09 09:23:18 -0700", "message": "Fixing merge conflicts"}, {"oid": "d0e34e3b80c163ff4ed03474a3adcd39d061c9ee", "committedDate": "2021-03-09 09:39:24 -0700", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_ShoppingList"}, {"oid": "8ee805b229c9373e653376a749274023ef13139b", "committedDate": "2021-03-09 11:54:07 -0500", "message": "Merge pull request #2373 from Windchild292/dev_Windchild_isConventionalInfantry"}, {"oid": "559cb006d560fd2099639e701e37538aded7f3a1", "committedDate": "2021-03-09 12:19:33 -0500", "message": "Merge pull request #2337 from Windchild292/dev_Windchild_ShoppingList"}, {"oid": "2bf37308c59c435acc52e0cf512ce9f74d1adc7e", "committedDate": "2021-03-09 10:26:52 -0700", "message": "Fixing merge conflicts"}, {"oid": "62726bf22f84cafc8872cbdebd5a8edce980e60a", "committedDate": "2021-03-09 10:27:33 -0700", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_CamouflageIcon"}, {"oid": "5082524cc2a32c4a8360cb845951a5e2b94300df", "committedDate": "2021-03-09 11:46:51 -0700", "message": "Fixing merge conflicts"}, {"oid": "c640fe5cc744f25a6fb292dd50220c8ecfe1c986", "committedDate": "2021-03-09 12:27:38 -0700", "message": "Fixing merge conflicts"}, {"oid": "64b151aab1a311e538c895526ba3f807216917c1", "committedDate": "2021-03-11 19:48:54 -0700", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_MissionStatus"}, {"oid": "98253ba4fbbd681dca588b7cb766e8439c19d880", "committedDate": "2021-03-11 19:59:41 -0700", "message": "Applying bugfixes from review"}, {"oid": "8d7d2a8df4596249f133919b569b56249b0068aa", "committedDate": "2021-03-12 14:28:19 -0700", "message": "Improving default contract name and sort"}, {"oid": "c13dedfdb7ce73cfdfe1d464e83765140336736c", "committedDate": "2021-03-12 14:59:22 -0700", "message": "2458: Adding Insufficient Astech warnings for MRMS and adding some more Astech/Medic pool functions"}, {"oid": "d2b11fb805eea82905ab0d8f846ca96bd69124e3", "committedDate": "2021-03-13 09:01:10 -0700", "message": "Fixing merge conflicts"}, {"oid": "902ebb67bf5dbe2e94cc32810992a2d1aa6c321c", "committedDate": "2021-03-13 09:02:31 -0700", "message": "Fixing merge conflicts"}, {"oid": "ec5843cb0d12174c7d5f83419268e5184d2d60f6", "committedDate": "2021-03-13 09:08:04 -0700", "message": "Fixing merge conflicts"}, {"oid": "1e0c0d260af35ecf86a9b8b9519c8cceee2e7028", "committedDate": "2021-03-13 11:47:11 -0700", "message": "Moving the unit market changes into an individual branch that contains some parts of the contract market changes"}, {"oid": "a5382b0386cb0354a4b3c870fdd8fee5e2f5330a", "committedDate": "2021-03-13 22:22:50 -0500", "message": "additional code review changes"}, {"oid": "fe6e045bb8acb2700cc38bd6a25ec62011977264", "committedDate": "2021-03-14 01:21:48 -0500", "message": "merge from upstream"}, {"oid": "48663cfaebb3a6a04f5680e7f755c532bd159779", "committedDate": "2021-03-14 10:58:03 -0600", "message": "Fixing merge conflicts"}, {"oid": "b8ccd096938dcbd22c56b4a93c87c78d770df189", "committedDate": "2021-03-16 10:03:47 -0600", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_AbstractUnitMarket"}, {"oid": "00db4b9f4381f0d6bcaadbbaa197f0be1c80d30b", "committedDate": "2021-03-17 12:29:14 -0400", "message": "Merge pull request #2445 from sixlettervariables/issue-2597-protect-duplicate-name-hash"}, {"oid": "a79e2e08ae5167e26dc37999b749296e47e179b9", "committedDate": "2021-03-17 12:27:27 -0600", "message": "Finishing the Unit Market Dialog"}, {"oid": "9d4975c56dc9ea4c18da5c7b146cfa794453f668", "committedDate": "2021-03-17 12:53:48 -0600", "message": "Swapping to EmptyUnitMarket instead of null"}, {"oid": "795721747293b0a0a0b4a5e12334158e9da303da", "committedDate": "2021-03-17 14:00:33 -0600", "message": "Fixing merge conflicts"}, {"oid": "aac2ced366aa376eb9fa78ab230f38e43d0c8362", "committedDate": "2021-03-17 21:16:52 -0400", "message": "code review changes"}, {"oid": "67d86a55c23420a76995a1457504c22f1b9cc48a", "committedDate": "2021-03-18 10:00:41 -0600", "message": "338: Base Free Time Sort"}, {"oid": "b634beb8d18a3ebafa13e3332256da259e3ef1c1", "committedDate": "2021-03-18 14:35:10 -0600", "message": "Finishing up working on abstracting out the Unit Market"}, {"oid": "8627de7d060ea44d3e33d04c259f8ab05f5bba9f", "committedDate": "2021-03-21 20:29:53 -0400", "message": "merge from upstream"}, {"oid": "04087a9bc33d0e3547e9c2dc68db496eac62b82b", "committedDate": "2021-03-21 20:10:23 -0600", "message": "Fixing merge conflicts"}, {"oid": "093eaeb8fbe362bb2d525d661180c433576aab9b", "committedDate": "2021-03-24 00:26:51 -0400", "message": "merge from upstream"}, {"oid": "2a2559d3ab5da713e7b8864ab0de458849dce6b6", "committedDate": "2021-03-24 09:29:25 -0600", "message": "Swapping over to using a three tiered rank setup"}, {"oid": "1e4e1993ec9f2278c7f326d28bcae5a7bff9c4a0", "committedDate": "2021-03-24 12:05:23 -0600", "message": "Heavy simplification of rank profession code"}, {"oid": "a57000e9696c4bf593f3215fa36543b2d13ed5ea", "committedDate": "2021-03-24 12:30:48 -0600", "message": "2196: Swapping to a standardized display wrapper class for rank display"}, {"oid": "b903aa7de36203afa40ede49922eb9e422fdcf43", "committedDate": "2021-03-24 13:07:46 -0600", "message": "1483: Adding Rank System import/export"}, {"oid": "e5b1d3a3fc6d825d722e496ad49832555fa65754", "committedDate": "2021-03-25 14:08:49 -0400", "message": "units deployed to StratCon tracks are ineligible for repairs"}, {"oid": "e7042962dd815937b9d91c1335d85ccec3647bf7", "committedDate": "2021-03-30 13:26:17 -0400", "message": "Merge pull request #2371 from Windchild292/dev_Windchild_CamouflageIcon"}, {"oid": "091d87a31e8cf5d1061ccf76a256bf990a0a623b", "committedDate": "2021-03-30 11:27:53 -0600", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_2449"}, {"oid": "37144650aef43bd5f3a8a14257376f2d6fe133f8", "committedDate": "2021-03-30 16:21:13 -0400", "message": "merge from upstream"}, {"oid": "5854d37bf8fbd63f741b9601ef373a16253a9b32", "committedDate": "2021-04-04 09:12:14 -0600", "message": "Adding the ability to create a custom rank system"}, {"oid": "db96404f216df48ce5321de053ce56015837d2cd", "committedDate": "2021-04-04 09:43:32 -0600", "message": "Renaming the campaign rank system methods to properly handle rank system changes"}, {"oid": "ae6bdf14123e6ac4ba92f5884b58b533b6cad2d3", "committedDate": "2021-04-04 10:12:54 -0600", "message": "Moving personnel rank changes to their proper location within person"}, {"oid": "19f0f0ce5d069f8f6f4f481cda04cdee3e05402a", "committedDate": "2021-04-04 11:59:18 -0600", "message": "Working on rank import/export"}, {"oid": "a34e385bf50ab28870531fe663d288b7b98b2697", "committedDate": "2021-04-06 10:54:55 -0600", "message": "Fixing and improving validation issues"}, {"oid": "3f3d7b237f61dd118eeb39087eb7fe9de6be03a0", "committedDate": "2021-04-06 11:53:59 -0600", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_GenealogyIdReference"}, {"oid": "80202c7f73397f3bc36193b0f3e2fce444bc4070", "committedDate": "2021-04-06 16:04:51 -0600", "message": "Fixing merge conflicts"}, {"oid": "ab655fb9abe6d2b9be4e20eba7e4c74b4b8e5c22", "committedDate": "2021-04-06 16:20:53 -0600", "message": "Fixing merge conflicts"}, {"oid": "729ef155ccdbaca3a1f23f1e57309d3b973851da", "committedDate": "2021-04-06 16:38:48 -0600", "message": "Fixing merge conflicts"}, {"oid": "a4c29e55f023d3416dd5e3f18a9d2061ab841fa1", "committedDate": "2021-04-06 17:56:58 -0600", "message": "Fixing merge conflicts"}, {"oid": "47bf0ed7fa9b09a4d76b634d900cceac953e17ed", "committedDate": "2021-04-06 19:54:46 -0600", "message": "Fixing merge conflicts"}, {"oid": "c2d264c23786de4ea703861360c3bcb46e79c5ac", "committedDate": "2021-04-07 00:13:59 -0400", "message": "merge from upstream"}, {"oid": "a5d70a5c672e494c7ec8be19e05d642b0259c9c4", "committedDate": "2021-04-07 14:24:17 -0600", "message": "Implementing multiple new procreation options and moving it to work based on a supplied date"}, {"oid": "18e6e46b095f8bbb1c623c60fd3aa177b7fe8682", "committedDate": "2021-04-09 09:22:39 -0600", "message": "Fixing merge conflicts"}, {"oid": "ae01b6e6d0fa55b766f741fa6fb35f727fff344b", "committedDate": "2021-04-12 09:45:59 -0600", "message": "Creating ScenarioStatus Enum and updating how scenarios are gotten"}, {"oid": "133e5865e2ee8dd5900b26dfe5f9aa0459a1a04c", "committedDate": "2021-04-14 11:31:25 -0400", "message": "multiple bugs with ignoring scenarios; ground pirats on air maps"}, {"oid": "3d8916caadfbc4085e509724142f929fc9d7f1d5", "committedDate": "2021-04-16 17:31:08 -0400", "message": "add text resources; remove campaign scenarios after ignoring in stratcon UI"}, {"oid": "2e00ea9a5b972b07d7446e75a06d3d493ac69426", "committedDate": "2021-04-16 21:14:35 -0400", "message": "code review changes"}, {"oid": "becffdc94075004fa3890bb36799389a48105c33", "committedDate": "2021-04-16 23:10:50 -0400", "message": "code review changes; data fix; stop nagging once user hits 'no' once"}, {"oid": "d71320d4f7a9ae41189a6b4651979960cb9dcc0f", "committedDate": "2021-04-20 21:55:21 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_2449"}, {"oid": "39603f48e1d441dd892227bef76e398c95cd4852", "committedDate": "2021-04-20 21:59:13 -0400", "message": "Fixing merge conflicts"}, {"oid": "3f7306636c42a999caf904b8d513f267243def42", "committedDate": "2021-04-20 22:01:54 -0400", "message": "Fixing merge conflicts"}, {"oid": "1c0e5821f637a666ef7632b5d821db62d76f624d", "committedDate": "2021-04-20 22:20:35 -0400", "message": "Fixing merge conflicts"}, {"oid": "9b9545c3b2e6890b9bef97677c61bb175cd5cc89", "committedDate": "2021-04-21 00:39:22 -0400", "message": "allow extra time for maintenance"}, {"oid": "de34b46d2f53c172612ebe5aa1abffe16b249f06", "committedDate": "2021-04-23 10:23:26 -0400", "message": "Bugfixing"}, {"oid": "b82fd9901fd0447da0211522ffc97ccae5c708ac", "committedDate": "2021-04-23 11:36:57 -0400", "message": "Fixing merge conflicts"}, {"oid": "bb7b0c375b9a2fd6baeced3e5e94501eb2e636ed", "committedDate": "2021-04-23 13:03:53 -0400", "message": "Moving into selectors folders"}, {"oid": "1ba164a58381a4be88ec479fee5841c1b8cdcf99", "committedDate": "2021-04-23 13:15:11 -0400", "message": "Making initial faction changes for constructors and ordering"}, {"oid": "fc7a0539b85c7af6a166ed9d779e7b723307b883", "committedDate": "2021-04-23 15:57:04 -0400", "message": "Making RandomOriginOptions, which will allow its use in multiple locations"}, {"oid": "1741bea67582d0555d094cbdd0fa977eec707bcc", "committedDate": "2021-04-24 22:10:27 -0400", "message": "fix scenario date/force resets"}, {"oid": "cebc3d0c231e54580eb29e4756f549b702b9ace1", "committedDate": "2021-04-27 14:41:42 -0400", "message": "Merge pull request #2462 from Windchild292/dev_Windchild_2460"}, {"oid": "b0c3badc393ff67ccba2cbe34623ca496c576782", "committedDate": "2021-04-27 14:42:27 -0400", "message": "Merge pull request #2352 from Windchild292/dev_Windchild_PersonnelRoles"}, {"oid": "138d08410b585fae3ba4af354d18d2b15d5d36c8", "committedDate": "2021-04-27 14:48:43 -0400", "message": "Fixing merge conflicts"}, {"oid": "5f426e90c201a24d339c0322897809938b79db5a", "committedDate": "2021-04-27 15:08:01 -0400", "message": "Fixing merge conflicts"}, {"oid": "7b4772ec38db2aa8d657d0a22ed7868d0c4f6117", "committedDate": "2021-04-27 15:45:52 -0400", "message": "Fixing merge conflicts"}, {"oid": "ce0b3b652feb9205fb4ed8cc3ae599bb5da9a308", "committedDate": "2021-04-27 15:47:48 -0400", "message": "Fixing merge conflicts"}, {"oid": "f7d684241f42639eb35d60508c39dbb00b0d9dbc", "committedDate": "2021-04-28 10:56:49 -0400", "message": "Fixing merge conflicts"}, {"oid": "8dd83b6c46f8f2454ba4d4accfe8176c58e398d7", "committedDate": "2021-04-29 23:22:27 -0400", "message": "Fixing merge conflicts"}, {"oid": "87033ef81af06d5a8c2af9d93a9b9057e49f0fde", "committedDate": "2021-05-01 17:09:56 -0400", "message": "Fixing merge conflicts"}, {"oid": "815f8fa858fdbf707019709a5d51524b5e61472a", "committedDate": "2021-05-04 14:12:54 -0400", "message": "Dependent Flag Swapover"}, {"oid": "66f6a880e1b615fb97de9757be649fc18c10f049", "committedDate": "2021-05-04 19:52:08 -0400", "message": "Implementing auto-hiring pool on new day"}, {"oid": "bbcc984be566d1587a598efc974fb1dbb399868a", "committedDate": "2021-05-05 18:25:22 -0400", "message": "Fixing merge conflicts"}, {"oid": "741d61daa6ac3570f7a3c569ee6e6dc87a902441", "committedDate": "2021-05-08 20:32:38 -0400", "message": "Fixing merge conflicts"}, {"oid": "227d6642ef68511eb067588bdf263aa2ad88f421", "committedDate": "2021-05-09 10:13:42 -0400", "message": "Creating the backend implementation for random procreation modules"}, {"oid": "e0faed52760616365379933d91f9343f58c61cb4", "committedDate": "2021-05-09 14:30:58 -0400", "message": "Renaming the directory from random procreation to procreation"}, {"oid": "7943361f04c7c5cc1753852ddba3a77d8259ab57", "committedDate": "2021-05-11 09:52:44 -0400", "message": "2607: Starting to work on redoing the salvage calculations"}, {"oid": "0539aea6159ca7cfbbb77a035ffb6c51d590d29f", "committedDate": "2021-05-11 10:40:37 -0400", "message": "2607: Properly calculating and paying for payment overages"}, {"oid": "33d43f4fe9a41925e3cc417f5d782c19f097ad63", "committedDate": "2021-05-15 06:53:31 -0400", "message": "Merge pull request #2583 from Windchild292/dev_Windchild_DependentFlagSwapover"}, {"oid": "55da24b03b3ecbc71f7d6ab739e1820f1814fda1", "committedDate": "2021-05-17 13:46:12 -0400", "message": "Creating AtB Contract Type and AtB Morale Level enums"}, {"oid": "470df7bcd395e57ffe3f3e59660f0e468cdcfaf1", "committedDate": "2021-05-18 01:31:38 -0400", "message": "fix multiple issues generating fixed objective scenarios"}, {"oid": "ffcd06cfa996127e858ea60096b58286f97a8a8a", "committedDate": "2021-05-19 09:33:39 -0400", "message": "Implementing save code swapover"}, {"oid": "c03f4deaeb4d632a5e2e614ae5204da255eea805", "committedDate": "2021-05-22 22:01:49 -0400", "message": "Merge pull request #2608 from Windchild292/dev_Windchild_2607"}, {"oid": "f9cf763bd4ff9a8e017e54464ad20989c2e772d3", "committedDate": "2021-05-23 23:33:39 -0400", "message": "Fixing merge conflicts"}, {"oid": "b5b8facc5de91af84188412dc8d1ec3df00e3ae6", "committedDate": "2021-05-24 13:55:12 -0400", "message": "Fixing merge conflicts"}, {"oid": "1b33879affd0101e7870d5696137e354b636d342", "committedDate": "2021-05-24 13:57:36 -0400", "message": "Fixing merge conflicts"}, {"oid": "f4c2aadcbf8a9e3bc45db1e7227160e36f43d47a", "committedDate": "2021-05-24 14:00:22 -0400", "message": "Merge branch 'master' into dev_Windchild_CamouflageRework"}, {"oid": "fe024592b6ac70b9cf1a9cd546a54ebc8bb02363", "committedDate": "2021-05-24 17:16:21 -0400", "message": "2625: Properly Clear Tech Units on Person removal/retirement"}, {"oid": "530decc0b587e53087c8cacbe31aeba13dd82f41", "committedDate": "2021-05-29 11:32:44 -0400", "message": "Fixing merge conflicts"}, {"oid": "156500be4e08594aeaf3efa424938f295b2ed86e", "committedDate": "2021-05-29 16:04:26 -0400", "message": "Phase one of Campaign Preset rework"}, {"oid": "34d76d4e22674638bd3ce602a713238ff5c203b8", "committedDate": "2021-05-30 14:33:28 -0400", "message": "Phase Two: finishing internal work and starting on GUI implementation"}, {"oid": "12f96f2ab3335b805508c31bbbc08a9bcf5491d7", "committedDate": "2021-05-30 21:57:28 -0400", "message": "Fixing merge conflicts"}, {"oid": "b109f86e86e8aba9c5b4aa279919f2d6547979b9", "committedDate": "2021-05-31 10:38:11 -0400", "message": "Fixing merge conflicts"}, {"oid": "65a009b4cf6307795c815aacdb82feb8fba0a01d", "committedDate": "2021-05-31 17:00:21 -0400", "message": "Fixing merge conflicts"}, {"oid": "14d482cda0564e28b6c5ea95e20725e2200f51ff", "committedDate": "2021-05-31 17:57:20 -0400", "message": "Merge branch 'master' into maintenance_extra_time"}, {"oid": "00a30fe49ee531dda71cb88bacc2f56dbe0a5b9e", "committedDate": "2021-05-31 18:05:23 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_2654"}, {"oid": "fa54f8e9f392dc2f02cb5b1b5bc9e8c428a88e61", "committedDate": "2021-06-02 12:29:42 -0400", "message": "Creating a base ignorable nag dialog for MekHQ and implementing it in all current new day nags"}, {"oid": "2509a0841acae929e7340ae5fe4d01f7bf437d40", "committedDate": "2021-06-02 16:20:48 -0400", "message": "Fixing merge conflicts"}, {"oid": "6b416ee90791ecb016edf0ae5b5c0e16ebdd4760", "committedDate": "2021-06-09 16:05:55 -0400", "message": "Fixing merge conflicts"}, {"oid": "d36c47d7aaa8978e4d523b2031d299babd654e2a", "committedDate": "2021-06-09 16:08:35 -0400", "message": "Fixing merge conflicts"}, {"oid": "7fe956938b8b76f05f395b681f8bd5f4bd02d25a", "committedDate": "2021-06-09 21:27:13 -0400", "message": "Fixing merge conflicts"}, {"oid": "055b02a76318d18eed5ad27a93333893cf8b74db", "committedDate": "2021-06-09 22:30:38 -0400", "message": "Fixing merge conflicts"}, {"oid": "e8c2b13279e2b5d226f4de5b350e2d12ff468577", "committedDate": "2021-06-11 00:26:36 -0400", "message": "Fixing merge conflicts"}, {"oid": "d4b45a4c9543d0786feacc4344d364fee2997970", "committedDate": "2021-06-11 12:46:28 -0400", "message": "Fixing merge conflicts"}, {"oid": "2560bdda30482870c73884470b53cb579bcaa47a", "committedDate": "2021-06-14 13:25:17 -0400", "message": "Force icon implementation migration from outdated previous branch"}, {"oid": "6fd836ff4e8a233aa293e2a3fc08cd3316f64b66", "committedDate": "2021-06-14 14:23:04 -0400", "message": "Adding UnitIcon, GM Tools implementation, and baseline for export"}, {"oid": "eaf4453f2f1f40707d9594de5dd6aa83d594b776", "committedDate": "2021-06-14 18:04:32 -0400", "message": "Applying personal code review changes and starting unit icon code"}, {"oid": "e1a7f7166de5f36fa0c44b7151478c944e6a4b89", "committedDate": "2021-06-21 13:16:19 -0400", "message": "Apply overtime to the last chunk worked as well #2679"}, {"oid": "9c62597332ac0ba24004132e537ba0cf049741e3", "committedDate": "2021-07-01 12:35:33 -0400", "message": "Fixing merge conflicts"}, {"oid": "809c6366e1ce1dea3f4b2fa21841aab6639992a4", "committedDate": "2021-07-10 11:47:52 -0400", "message": "Finishing the portrait swapover"}, {"oid": "0ddba79849d418947ba1ce309a4c673ac78292d4", "committedDate": "2021-07-10 20:58:49 -0400", "message": "Bugfixing, phase 1"}, {"oid": "10a9609cabffc8f5e7068b6c0c33c0f65f796508", "committedDate": "2021-07-12 18:39:55 -0400", "message": "Fixing unit tests"}, {"oid": "06664ff8286a85fe165e5f92aaaf22326e692c90", "committedDate": "2021-07-15 10:22:09 -0400", "message": "Merge branch 'master' into dev_Windchild_476"}, {"oid": "e0e383e2453514ee7c9c7abc9214a2a1a869a068", "committedDate": "2021-07-15 10:34:25 -0400", "message": "Fixing merge conflicts"}, {"oid": "7211585d4a34159d5c80c9ea30fa44bc2746c1b4", "committedDate": "2021-07-17 20:03:19 -0400", "message": "Fixing a few potential divide by zero issues"}, {"oid": "a3eb7d3dfe3477e32117d175e717023f539795eb", "committedDate": "2021-07-17 20:11:58 -0400", "message": "Further cleanups from personal review"}, {"oid": "21a75e1c9ca5516bb7394f30fa2c0b4d9a68b9ad", "committedDate": "2021-07-17 20:27:51 -0400", "message": "Further cleanups, and adding an astech team size constant"}, {"oid": "35bffb052c1b608df03fb41f6548a3e9f847cca6", "committedDate": "2021-07-18 10:43:10 -0400", "message": "Fixing NPE warning and cleaning up the if statement"}, {"oid": "a7670828c4762e3852dbd248b348c2dd371b5018", "committedDate": "2021-07-18 12:12:40 -0400", "message": "Fixing possible confusion of local and field warnings"}, {"oid": "951b55f7a5fb6036e67897e709cd6a0dbbb45b39", "committedDate": "2021-07-18 12:33:08 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_Procreation"}, {"oid": "61cc2fd1669914bef276e018cb7562be422b1f7c", "committedDate": "2021-07-18 14:30:17 -0400", "message": "Removing Deprecated Usages: Logger swapover"}, {"oid": "542307adf490f10930d9470ff64879b4b7ee6b0a", "committedDate": "2021-07-20 10:11:31 -0400", "message": "Moving crew null check and fallback logic into Campaign::getShorthandedModForCrews"}, {"oid": "f6e661dba426e63388e9b57d224a7090006e3203", "committedDate": "2021-07-20 10:18:55 -0400", "message": "Merge pull request #2751 from Windchild292/dev_Windchild_AstechDivideByZero"}, {"oid": "f3bd90fefb0af89a7177be76f70aeed033a7b258", "committedDate": "2021-07-20 10:20:25 -0400", "message": "Fixing merge conflicts"}, {"oid": "424407a51980930adead83bbfa918bf2b0d8a441", "committedDate": "2021-07-20 21:09:32 -0400", "message": "Fixing merge conflicts"}, {"oid": "497f1345950b39b1eb1e2d1389b63a7fcd5eef14", "committedDate": "2021-07-20 21:26:53 -0400", "message": "Fixing merge conflicts"}, {"oid": "bc21146f53fc23bdfd1f5f4273f07b588b0904e2", "committedDate": "2021-07-24 10:15:39 -0400", "message": "Fixing merge conflicts"}, {"oid": "a5e9303ebeafcd74e0348b8b2f767c5f8e12c8cb", "committedDate": "2021-07-26 12:32:33 -0400", "message": "2558: Swapping removePerson to be object instead of id based"}, {"oid": "0a76a9693556237907de0f6e2a5a08f48dcfd3be", "committedDate": "2021-07-26 12:38:50 -0400", "message": "2558: Custom message for when dependants leave"}, {"oid": "1babc7de6f9de3b1f517061f1c249c3339f13e10", "committedDate": "2021-07-26 12:54:49 -0400", "message": "2558: Adding unique dependent add message"}, {"oid": "b214bdb7975aabd1cdc8d39cb9f1fdea3541b58d", "committedDate": "2021-07-26 15:13:02 -0400", "message": "Fixing merge conflicts"}, {"oid": "d86c1c8c70ae0bcc2a9d6dd09e7fe963745b5e37", "committedDate": "2021-07-26 22:20:42 -0400", "message": "Merge pull request #2478 from Windchild292/dev_Windchild_AbstractUnitMarket"}, {"oid": "d83ce12b4886460ba57e84afbf15b20e30fab693", "committedDate": "2021-07-28 15:48:34 -0400", "message": "Isolating RATs into the RAT Tab"}, {"oid": "3d303b442ab8d664c56fd8709d970f86c7eed83f", "committedDate": "2021-07-30 10:40:29 -0400", "message": "Loan code cleanup and refactoring"}, {"oid": "56910a666af8115ec4e364b98a16fc009c1a65b5", "committedDate": "2021-07-30 11:11:21 -0400", "message": "Fixing merge conflicts"}, {"oid": "ec7e4bc4aeed27a5b835b44d295642228bcc16c3", "committedDate": "2021-08-10 12:37:47 -0400", "message": "Transaction Type Enum"}, {"oid": "497976540984392426f984acd40477886555e06d", "committedDate": "2021-08-10 15:25:55 -0400", "message": "Fixing merge conflicts"}, {"oid": "1faa42c3d120f62fa60bebc946c56cae3ba293f8", "committedDate": "2021-08-10 15:47:16 -0400", "message": "Doing some personal review cleanup"}, {"oid": "be94a7ab35307e2b345d967cbd0163417ea9802d", "committedDate": "2021-08-12 21:28:51 -0400", "message": "bulletproofing for a couple of individual unit actions"}, {"oid": "01f8aa5c3d90cd2d8b553c5c8c73a336af524e8b", "committedDate": "2021-08-13 22:07:09 -0400", "message": "2798: Adding total XP earnings tracking"}, {"oid": "771c3107183e31fa9da9b2e417a6fc0d0b673a48", "committedDate": "2021-08-14 00:07:09 -0400", "message": "274: Moving Era definitions to a file"}, {"oid": "795d3aba4875a600dd0a6ec91a10cb7e90814c6c", "committedDate": "2021-08-18 12:48:20 -0400", "message": "Removing Person's Campaign save and switching to full pass-by-reference for Campaign"}, {"oid": "4e80bdad1f20ebfb53cfe559ade8975594f3d362", "committedDate": "2021-08-21 12:12:11 -0400", "message": "2754: Properly clearing Narc and iNarc Flags during scenario resolution"}, {"oid": "ed447da30212105694957e35687f1bfedd6b56b0", "committedDate": "2021-08-24 13:11:20 -0400", "message": "Merge pull request #2805 from Windchild292/dev_Windchild_274"}, {"oid": "7120d3b0aa69ebd282e855a4b2a47bda4697ba78", "committedDate": "2021-08-24 13:14:09 -0400", "message": "Merge pull request #2793 from Windchild292/dev_Windchild_TransactionType"}, {"oid": "9e7480b600f9290c00f5f082dd91201999d12f42", "committedDate": "2021-08-24 13:14:19 -0400", "message": "Merge pull request #2804 from Windchild292/dev_Windchild_2798"}, {"oid": "70aa4b94439c59d6e5de9d6191a3c0a02365e644", "committedDate": "2021-08-24 13:39:42 -0400", "message": "Fixing merge conflicts"}, {"oid": "0e72a8bc212f26b8d9b7bb789b0c1f84f1426c78", "committedDate": "2021-08-24 13:42:42 -0400", "message": "Fixing merge conflicts"}, {"oid": "3a01897bb20c8be27823164f09aca9af1aa3360d", "committedDate": "2021-08-24 13:53:59 -0400", "message": "Fixing merge conflicts"}, {"oid": "bacc8f3e733e0cd4cc0fa629ced5d3b5079abc76", "committedDate": "2021-08-24 17:23:41 -0400", "message": "Fixing merge conflicts"}, {"oid": "e273d7035001140a977ebe3299d17602ef52d498", "committedDate": "2021-08-28 17:37:23 -0400", "message": "Fixing merge conflicts"}, {"oid": "59fca0be576b219f25123793a2118255168d1c03", "committedDate": "2021-08-29 11:15:40 -0400", "message": "Modularized Marriage"}, {"oid": "6a48665a09b5cfd3b2309975077163fae687c39e", "committedDate": "2021-08-29 14:41:32 -0400", "message": "Adding creation dialog and bugfixing"}, {"oid": "0a89d7421946ba75d7d926af996b27e9e994a911", "committedDate": "2021-08-31 14:50:25 -0400", "message": "Fixing merge conflicts"}, {"oid": "0f4e17188d8360baf639cbc66dd29da85336be81", "committedDate": "2021-08-31 15:28:05 -0400", "message": "Applying changes from personal review"}, {"oid": "bd9dded105bfbfdf64e7b10e2059f2633326c113", "committedDate": "2021-08-31 15:39:04 -0400", "message": "Swapping to weighted double map"}, {"oid": "5eaf88579bd60bfee3c39a936a9d647a4eb1de4f", "committedDate": "2021-08-31 16:45:21 -0400", "message": "Reworking to use random origin options instead of the internally stored values"}, {"oid": "bbccfa2dcef0be4fbb07cd3af6cdbd15d7ced036", "committedDate": "2021-08-31 18:09:33 -0400", "message": "Missed two cases"}, {"oid": "7acc107b13f019250d4c17ee0b034a3aa263f56b", "committedDate": "2021-09-22 13:23:13 -0400", "message": "Removing MekHQ's version by swapping to a standardized suite version"}, {"oid": "f0a07bfbd15d93ff86dda49a32e0c489ca590a8c", "committedDate": "2021-09-22 17:45:34 -0400", "message": "Fixing merge conflicts"}, {"oid": "673baa71af916391d268ede436174881a85b7340", "committedDate": "2021-09-23 20:01:05 -0400", "message": "Adding the ability to automatically have the Operational Status indicator be determined on a new day"}, {"oid": "18f49cd8c6ba3721e84dce0b606a346b242cb49c", "committedDate": "2021-09-25 10:56:33 -0400", "message": "Moving training XP assignment to AtB new day processing"}, {"oid": "932423c6da7f04b29d61df88c014f5e432356eae", "committedDate": "2021-09-25 17:10:11 -0400", "message": "Standardizing and simplifying Campaign::getTargetForAcquisitioncalls"}, {"oid": "29c1cae15f03b025f7c6f4a4acdee0a86082eae8", "committedDate": "2021-09-25 17:12:00 -0400", "message": "2567: AtB Part Procurement uses proper campaign option"}, {"oid": "e1c6be34a128676429850de67af7a3c3e1d31c48", "committedDate": "2021-09-25 17:47:32 -0400", "message": "Fixing the active checks and removing the AtB casts"}, {"oid": "0527903721699cf7e73e7000ebc0db049c96529d", "committedDate": "2021-09-25 17:48:18 -0400", "message": "Removing testing logging"}, {"oid": "6dc414e21f3f3a8bf95c7059b83c0c34ced93e61", "committedDate": "2021-09-28 22:10:41 -0400", "message": "Merge pull request #2888 from Windchild292/dev_Windchild_2567"}, {"oid": "1065b3bc8de9084f48208d2ca865ce58ac8b3c41", "committedDate": "2021-09-28 22:29:59 -0400", "message": "Fixing merge conflicts"}, {"oid": "e55c3ca107c0d4a68d05b67ffa95825ee33af974", "committedDate": "2021-09-28 22:33:50 -0400", "message": "Fixing merge conflicts"}, {"oid": "6e5bfd3fe778c2db9847358b2bde358a61106707", "committedDate": "2021-09-28 22:38:51 -0400", "message": "Fixing merge conflicts"}, {"oid": "4fdc8e401f17fac7995037b1852f1ce2353c8e3f", "committedDate": "2021-09-28 22:48:35 -0400", "message": "Fixing merge conflicts"}, {"oid": "6f6fbddc710af1a588c433c779edd75f638a3c9d", "committedDate": "2021-10-01 10:01:00 -0400", "message": "Merge pull request #2880 from Windchild292/dev_Windchild_Version"}, {"oid": "901e499a75807e3ed64c36d0fcb8e1b024787c95", "committedDate": "2021-10-01 22:06:56 -0400", "message": "Fixing merge conflicts"}, {"oid": "b69522079e9a04b394864bbc4e43ff4c4e125cca", "committedDate": "2021-10-01 22:17:46 -0400", "message": "Fixing merge conflicts"}, {"oid": "84837c3610f8109aeb1985357178de229560de80", "committedDate": "2021-10-01 22:50:02 -0400", "message": "Fixing merge conflicts"}, {"oid": "4971437339838aa89b83785c6e9572074c95d245", "committedDate": "2021-10-02 23:21:37 -0400", "message": "Fixing merge conflicts"}, {"oid": "ed006b48eaf1c0580c2480f4f0000a3c1aed8361", "committedDate": "2021-10-10 00:10:05 -0400", "message": "Adding prisoner and clanner options for procreation"}, {"oid": "54e588d2cafddcab2f585c8ed5d6ee3c829d155f", "committedDate": "2021-10-10 01:00:00 -0400", "message": "Fixing merge conflicts"}, {"oid": "f211d8a677daa66c3a88f444de02a072ea5ab8a0", "committedDate": "2021-10-11 09:36:37 -0400", "message": "Fixing merge conflicts"}, {"oid": "3ee602c2e85defa1c3b05d08d609340d4b194883", "committedDate": "2021-10-11 09:37:52 -0400", "message": "Merge branch 'master' into dev_Windchild_2654"}, {"oid": "a30ac65fc45c76f1c1f6df0d70fa356aa41ef438", "committedDate": "2021-10-11 09:38:33 -0400", "message": "Merge branch 'master' into dev_Windchild_PersonnelRandomization"}, {"oid": "6f2f688a386d187426b7c92d4dd391c239d1ad70", "committedDate": "2021-10-11 09:43:54 -0400", "message": "Fixing merge conflicts"}, {"oid": "125e3093d92e248b4e50bc9131ff8fdeb35c6787", "committedDate": "2021-10-11 10:22:27 -0400", "message": "Fixing merge conflicts"}, {"oid": "f8e040a424e1e8d8f886b334ce6fe78c1c697e21", "committedDate": "2021-10-11 12:17:56 -0400", "message": "Standardizing canMarry and adding clanner/prisoner options"}, {"oid": "358b2e9bb76ee69f0aef232dc656af54a6b78e75", "committedDate": "2021-10-11 16:26:24 -0400", "message": "Creating a divorce module, with a daily percentage-based random divorce setup"}, {"oid": "8ecba07dd7693346338cbae98b207e87e1cfb844", "committedDate": "2021-10-14 20:08:46 -0400", "message": "Fixing merge conflicts"}, {"oid": "accf7255b1c83499aa1f79f5074b2bc44e3619f8", "committedDate": "2021-10-17 18:16:46 -0400", "message": "Fixing merge conflicts"}, {"oid": "4e4ae81eb8a7a923cdf8688c645023ce047c7d99", "committedDate": "2021-10-17 18:53:40 -0400", "message": "Fixing merge conflicts"}, {"oid": "08ec6ef40e59afa4cba88228bc29dba9745de098", "committedDate": "2021-10-18 15:52:01 -0400", "message": "Fixing merge conflicts"}, {"oid": "c67d7074f17378d88774a553e3fca273bc047705", "committedDate": "2021-10-18 15:52:40 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_PersonCampaign"}, {"oid": "1a7109d4439d3900ff897d0c9ba7091e88960ead", "committedDate": "2021-10-18 16:06:05 -0400", "message": "Fixing merge conflicts"}, {"oid": "2d589706bc9112203a6043adf8d7aed7d0f22301", "committedDate": "2021-10-18 16:07:21 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_ExpandedDeathStatus"}, {"oid": "84e2f57820e6fac4c9604e8fdf4c370849b21914", "committedDate": "2021-10-18 17:26:22 -0400", "message": "Fixing merge conflicts"}, {"oid": "033d776c732e66ad776357bee1afe597f5e77b20", "committedDate": "2021-10-30 15:59:59 -0400", "message": "Fixing merge conflicts"}, {"oid": "4e45f1a0a0bb1a3a900ecde01c8feab5a6e48329", "committedDate": "2021-11-01 17:31:14 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_AtBCompanyGeneration"}, {"oid": "258f3a3b0b352aa70b42b8c2034ebd6ab90d96ca", "committedDate": "2021-11-01 18:20:49 -0400", "message": "Fixing merge conflicts"}, {"oid": "7eea9a399d3d7400b1f2b94f6d772ad5416a0645", "committedDate": "2021-11-01 21:48:44 -0400", "message": "Fixing merge conflicts"}, {"oid": "3e4bca7cdb006005bd034f9621872250d0e96dbb", "committedDate": "2021-11-01 21:52:24 -0400", "message": "fixing merge conflicts"}, {"oid": "ab6c1c01bfb4498a16c3b9f69c18c4903900de83", "committedDate": "2021-11-01 22:00:44 -0400", "message": "Fixing merge conflicts"}, {"oid": "1b1b0f68f52f9d821ddc10f663a44fe6d72462cd", "committedDate": "2021-11-01 22:03:27 -0400", "message": "Fixing merge conflicts"}, {"oid": "f1ce41fa694124c762338f78fb45a139926db77c", "committedDate": "2021-11-01 22:20:22 -0400", "message": "Fixing merge conflicts"}, {"oid": "01163b1f4fae088ba39a2f1c1145d5653f71b9e8", "committedDate": "2021-11-01 22:22:46 -0400", "message": "Fixing merge conflicts"}, {"oid": "21600c478569436ab215402bbca4bbbeced841a8", "committedDate": "2021-11-03 20:59:54 -0400", "message": "Adding localization to all MekHQ resource maps"}, {"oid": "1a5ba2fa871c8629e951d371c2ee96cc29fa8f93", "committedDate": "2021-11-07 13:49:58 -0500", "message": "Fixing merge conflicts"}, {"oid": "a851f6c71e5a1f825a840c64be2bae6da2a77eaf", "committedDate": "2021-11-07 14:05:08 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_PersonnelRandomization"}, {"oid": "65eb27ddf74244265359db14e66c097eb2299df0", "committedDate": "2021-11-07 14:50:33 -0500", "message": "Fixing merge conflicts"}, {"oid": "1b57359b3037938ef8291d96de3449013c82b9a4", "committedDate": "2021-11-09 09:23:24 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_ForceIconRework"}, {"oid": "7e997be9838621bdc8bbecbcdbc908a7580060ed", "committedDate": "2021-11-12 21:17:13 -0500", "message": "Removing unused tech functionality"}, {"oid": "dbfb302ab8e895c2e37a41f10415f634d1039c4c", "committedDate": "2021-11-21 18:45:43 -0500", "message": "Expanding Finances newDay"}, {"oid": "b6ffe21c8b07b35f599a2f6bd11da05d7961af0d", "committedDate": "2021-11-23 10:10:34 -0500", "message": "Merge pull request #2028 from Windchild292/dev_Windchild_476"}, {"oid": "e51f331c5e7b430e3f560fee9ad58995fb944704", "committedDate": "2021-11-23 17:35:05 -0500", "message": "2962: AtB Campaigns Now Properly Load with Automatic or Tech Acquisition Skills"}, {"oid": "2f445541d15fd465279057131bf48ef28d9bd162", "committedDate": "2021-11-23 18:55:05 -0500", "message": "Fixing merge conflicts"}, {"oid": "c06560e49182859791bab98148ba76507f26612b", "committedDate": "2021-11-27 14:04:02 -0500", "message": "Merge pull request #2966 from Windchild292/dev_Windchild_2962"}, {"oid": "69f79e10f44976d90e36ca3acb5256b6dfc91548", "committedDate": "2021-11-27 18:49:28 -0500", "message": "Implementing the retirement and dependent stopgap options and option updates"}, {"oid": "135cb6d188296ed5db33602f9d65eacbedfb2fa3", "committedDate": "2021-11-27 22:07:45 -0500", "message": "Finishing dependent options and starting on retirement setup"}, {"oid": "a831b4695fd5ea8b1679db9068c85d9ac235f5e0", "committedDate": "2021-11-27 22:57:22 -0500", "message": "Starting to implement the new options"}, {"oid": "bfaed6eccd3257e67b05ad33dadd14cfd98ce560", "committedDate": "2021-12-02 18:05:59 -0500", "message": "Fixing merge conflicts"}, {"oid": "a31998dda25a2856241c10aba4f25a3e8975fc28", "committedDate": "2021-12-02 19:47:30 -0500", "message": "Fixing merge conflicts"}, {"oid": "8ae7fffc1b4afde219beaf122edf562b69a810d4", "committedDate": "2021-12-02 19:49:14 -0500", "message": "Fixing merge conflicts"}, {"oid": "c76c94e6cd4abe6e9f39bb57f5376dcfcf8c29ca", "committedDate": "2021-12-02 19:59:15 -0500", "message": "Fixing merge conflicts"}, {"oid": "8ad7114a3a34794b2d77e3d201f63d2c646a9361", "committedDate": "2021-12-04 14:45:10 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_RetirementDependentStopgaps"}, {"oid": "71c75c8296ecc0c857b75d51ff1c7984efa7e9aa", "committedDate": "2021-12-04 15:03:37 -0500", "message": "Finishing the internal code for the retirement and dependent stopgaps"}, {"oid": "4fb12af6ec7c26ac06d9a498016211a5e3889240", "committedDate": "2021-12-04 15:13:25 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_AssetTerms"}, {"oid": "ea8d42d1c280d499d207c0da43feb77a06b6dcba", "committedDate": "2021-12-04 16:10:22 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_MHQLocalization"}, {"oid": "97af694c5485ad1dbf5900228d3b5e6de405cb02", "committedDate": "2021-12-11 17:07:11 -0500", "message": "MekHQ Log4j 2 Implementation"}, {"oid": "122363fd9f8d850c11781b0ed50335433bcf418b", "committedDate": "2021-12-17 20:08:30 -0500", "message": "Fixing merge conflicts"}, {"oid": "b781d1a8406d5cfec346343463484ac519d1ee9a", "committedDate": "2021-12-20 13:20:34 -0500", "message": "Fixing merge conflicts"}, {"oid": "1bc3ac4e6576a7fa06103828a729d010f6a7b3ef", "committedDate": "2021-12-20 15:37:16 -0500", "message": "Actually print the stacktrace for individual exceptions"}, {"oid": "6e868f9400798d8cc8b61055b96de07531af1f34", "committedDate": "2021-12-20 16:21:24 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_RetirementDependentStopgaps"}, {"oid": "056f0d1e618651857b043280dbe226e80eb91d7a", "committedDate": "2021-12-20 16:27:18 -0500", "message": "Fixing merge conflicts"}, {"oid": "0e5e7675cc3b0606c97f5060a8fd53a69a90641e", "committedDate": "2021-12-20 16:31:40 -0500", "message": "Fixing merge conflicts"}, {"oid": "fb5e5a836a6100119706df72ee695325d77cf5af", "committedDate": "2021-12-20 16:36:02 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_PersonnelRandomization"}, {"oid": "30d7086d1389ed93b333b5eb614a4777498bd826", "committedDate": "2021-12-20 16:41:54 -0500", "message": "Fixing merge conflicts"}, {"oid": "c28b63e7005b99a3f80a9cb73b0255b8a2402db2", "committedDate": "2021-12-20 16:45:19 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_PersonCampaign"}, {"oid": "89a7c65022eabe2af8f5efaabaf9296aa79bde74", "committedDate": "2021-12-21 15:01:54 -0500", "message": "Fixing merge conflicts"}, {"oid": "23519608cf466cb86aef259568ba2aa8ddeb098a", "committedDate": "2021-12-21 16:00:33 -0500", "message": "Fixing merge conflicts"}, {"oid": "bbbe2057261145f9f51c2ac129b4cca3bcd2ccf6", "committedDate": "2021-12-21 16:04:48 -0500", "message": "Fixing merge conflicts"}, {"oid": "b65b9f1efdb52692da51596d934b6360533b2bf7", "committedDate": "2021-12-21 16:23:03 -0500", "message": "Fixing merge conflicts"}, {"oid": "a253bfba5d4bc811ccd0c6c17e659dff178fbbb0", "committedDate": "2021-12-21 16:30:49 -0500", "message": "Fixing merge conflicts"}, {"oid": "0caff4e79e691213a2621323b94dfadfa73c9060", "committedDate": "2021-12-22 08:16:56 -0500", "message": "Fixing merge conflicts"}, {"oid": "a44cee38dbe9808a000178e575eb90d60a401175", "committedDate": "2021-12-23 12:26:57 -0500", "message": "Merge pull request #3015 from MegaMek/dev_Windchild_3326"}, {"oid": "ea6a179e03d1519afc3236abe50978edc43fc3d8", "committedDate": "2021-12-23 12:32:38 -0500", "message": "Merge pull request #2812 from Windchild292/dev_Windchild_PersonCampaign"}, {"oid": "d88588cf01f272577d96e1ff2a27c7286def7db9", "committedDate": "2021-12-23 21:04:47 -0500", "message": "Fixing merge conflicts"}, {"oid": "94ca7dff3bd09ef2fbb82e5d3ce0a5dccab335a8", "committedDate": "2021-12-28 18:08:30 -0500", "message": "Fixing merge conflicts"}, {"oid": "5089ba272b3ca25ab52ca4fcc1bef3766377f2ec", "committedDate": "2022-01-08 13:22:56 -0500", "message": "Fixing merge conflicts"}, {"oid": "375a9524c6382f5214c980bf8ad8b07a22f75120", "committedDate": "2022-01-08 13:28:11 -0500", "message": "Fixing merge conflicts"}, {"oid": "0e0aa7780df25016999f813dc36110599ee1b380", "committedDate": "2022-01-08 13:40:54 -0500", "message": "Fixing merge conflicts, round 2"}, {"oid": "5cc8ac688c67e1e1817c0cbb4a78eaf7dd0a477b", "committedDate": "2022-01-08 14:03:23 -0500", "message": "Fixing merge conflicts"}, {"oid": "eb7c6c828694fb624746168dbb4c35b1289f6e11", "committedDate": "2022-01-08 17:22:10 -0500", "message": "Fixing merge conflicts"}, {"oid": "dcb18ce61944010cc634325d3f46ccaf907758be", "committedDate": "2022-01-08 18:01:56 -0500", "message": "Cleaning up a bit of person creation"}, {"oid": "4d86865e1498a1312a21b91323c33d18f33a8dc9", "committedDate": "2022-01-09 11:12:58 -0500", "message": "Adding missing nullable tag and fixing missing null handling for faction selector"}, {"oid": "6023dd377efcb7802f6c905de61231ec50fee675", "committedDate": "2022-01-09 11:48:57 -0500", "message": "Missed that a null faction is fine for planet generation"}, {"oid": "4bddfb6f0d3906ed96120594d84d4e476e42d971", "committedDate": "2022-01-19 17:09:56 -0500", "message": "Tearing out MekHQ/src/mekhq/MekHqXmlSerializable.java"}, {"oid": "cc823a078ddc1a8924d1e2c02e93375a6b27d327", "committedDate": "2022-01-19 19:19:33 -0500", "message": "Removing all serialVersionUID uses in MekHQ"}, {"oid": "c9ac45226f5852f8bb76af479c9d962105bbbed7", "committedDate": "2022-01-19 20:02:33 -0500", "message": "Mass spacing fixes"}, {"oid": "be1cfbd484c6adc1c8f66578c5bfe94b39047b3c", "committedDate": "2022-01-20 09:59:55 -0500", "message": "Applying changes from initial personal review"}, {"oid": "2c71e119c210a9c95690eae19a0cdab5beb69bd6", "committedDate": "2022-01-20 10:30:23 -0500", "message": "Updating everything using final PrintWriter so that they're up to date, so I have a nice way to track what's updated and what is not"}, {"oid": "bc2c2966614f17d153b03c3087b46c1a4b44b969", "committedDate": "2022-01-21 19:03:24 -0500", "message": "SuiteOptions: Naming standardization and finishing initial setup"}, {"oid": "f3b9f5b924748acfd1ad404aed3ae99e4382b885", "committedDate": "2022-01-24 12:24:25 -0500", "message": "Fixing merge conflicts"}, {"oid": "e8395d1d642870050d705d4fac2a0df255cea722", "committedDate": "2022-01-24 12:28:09 -0500", "message": "Fixing merge conflicts"}, {"oid": "d91ac31cb62f0842eb972ad045bdab45c9c3f814", "committedDate": "2022-01-25 17:42:20 -0500", "message": "PIND Migration"}, {"oid": "9fac7b8c6dfc3095299a8f2b2698099818ff5f0a", "committedDate": "2022-01-26 20:37:16 -0500", "message": "Fixing merge conflicts"}, {"oid": "68ef07dd4c65a1c3d546c2da6f01575f3f3c3ad6", "committedDate": "2022-01-26 20:47:30 -0500", "message": "Fixing merge conflicts"}, {"oid": "4d88d0c53f0069b883caece02ec49678aeeeef7e", "committedDate": "2022-02-01 14:20:52 -0500", "message": "Fixing merge conflicts"}, {"oid": "add1e0e345d4bfcfbff554d48b42166703dc9742", "committedDate": "2022-02-03 13:52:45 -0500", "message": "Fixing merge conflicts"}, {"oid": "01633b8cfb55eee9c3240bff79e0122fbc54386b", "committedDate": "2022-02-13 13:10:41 -0500", "message": "Fixing MHQ's Javadoc Build"}, {"oid": "adeb4ea20e6a8eeb365e6887e79ce6a4dd8b18dd", "committedDate": "2022-02-22 19:16:53 -0500", "message": "Initial code for creating standardized code utilities"}, {"oid": "483ec96cd157a857a1e7155be64dc5ef7c72346a", "committedDate": "2022-02-24 20:32:12 -0500", "message": "Migrating a bunch of MHQ utility code to MM"}, {"oid": "88ce57b5171b2d38c738446af4ab779e6d17ae7f", "committedDate": "2022-02-28 20:23:04 -0500", "message": "3146: Properly handling null force to null force reassignment messages"}, {"oid": "c94fc298803b71e6ac75eb935cabba921a8a6571", "committedDate": "2022-03-06 11:49:08 -0500", "message": "Fixing merge conflicts"}, {"oid": "d4b96fd69deddff97744565c43e2d56b8e31c53f", "committedDate": "2022-03-07 17:19:54 -0500", "message": "Fixing two accidentally kept negations for Random Dependents Removal"}, {"oid": "48f8d58a75de4c6a5c2868f65554dad4d3a14fd5", "committedDate": "2022-03-09 10:01:16 -0500", "message": "Merge pull request #3148 from Windchild292/dev_Windchild_3146"}, {"oid": "1c307bc93de3a536ba17dd566a9fd49bd0046c8e", "committedDate": "2022-03-21 18:22:40 -0400", "message": "Fixing a bunch of spacing readability issues"}, {"oid": "913c01672fe040a25b473e8142805d2ff4ebfa1b", "committedDate": "2022-03-22 18:24:32 -0400", "message": "Modernizing Lambdas to Method References"}, {"oid": "cc400b9fa7512b6b91ed8a8f434f365b442306a8", "committedDate": "2022-03-22 23:54:28 -0400", "message": "Modernize List::size to List::isEmpty and String::isEmpty to String::isBlank"}, {"oid": "4699f3e482938fb8c322f1daf1bc3b42d78c2a64", "committedDate": "2022-03-28 22:35:03 -0400", "message": "Fixing unused imports"}, {"oid": "494b38fcedcda31bef2e6f701152a47ce1b0e397", "committedDate": "2022-04-11 00:16:20 -0400", "message": "Issue #3196: Fixing Remove Unit NPE"}, {"oid": "4e863ffcf0393e88ebb25b76dd314d994b2cfad5", "committedDate": "2022-04-12 17:18:21 -0400", "message": "Death Module: Initial Commit For the New Setup"}, {"oid": "2e8d0c32fa5c09c862fb6c5625a58d206b70ba34", "committedDate": "2022-04-12 18:20:50 -0400", "message": "Cleaning up and modernizing the death code"}, {"oid": "be00026349d450b7f2fb262f11d161ca249c5ab5", "committedDate": "2022-04-17 21:14:46 -0400", "message": "Standardizing Personnel Flags into their own setup instead of multiple previous setups"}, {"oid": "114c9ef6cbeb045e3cc88716964526ee70372408", "committedDate": "2022-05-04 10:10:43 -0400", "message": "3260: Clear Makeshift Clubs Upon Return To MekHQ"}, {"oid": "e0f4dd9d34946716a517c0b42401b33740c51f30", "committedDate": "2022-05-06 19:58:04 -0400", "message": "Renaming the civilian role check to isCivilian, and adding missing logging for a civilian error"}, {"oid": "5b35da02f167e0d577e779b21dfd3cbd2110f92b", "committedDate": "2022-05-06 22:48:48 -0400", "message": "Merge pull request #3266 from Windchild292/dev_Windchild_RetirementDependentOrNoneLogging"}, {"oid": "c6db6046da0de4e7d40d7ac930a453d2805f6a92", "committedDate": "2022-05-10 18:34:57 -0400", "message": "Merge branch 'MegaMek:master' into dev_Windchild_AssetTerms"}, {"oid": "6b720cfa833458c385546a054b762d2745c37ce1", "committedDate": "2022-05-14 10:11:35 -0400", "message": "Fixing method name"}, {"oid": "72a352ee60bdec3467fa07665ed9753cc399b6f9", "committedDate": "2022-05-15 12:41:06 -0400", "message": "Swapping MekHQ to JUnit 5"}, {"oid": "0a2050177f55c5540d898835cfd48e4f976bb4cb", "committedDate": "2022-05-25 16:54:44 -0400", "message": "Modernizing finances XML read and write"}, {"oid": "8b34d18aa825a1416df7b1a8ecb2bb898cea1026", "committedDate": "2022-05-25 18:27:34 -0400", "message": "Renaming MekHqXmlXmlUtil to utilities/MHQXMLUtility"}, {"oid": "3c19a5aba0df7a2035e7a81e61a8b5543cb13a9c", "committedDate": "2022-05-25 18:36:42 -0400", "message": "Fixing merge conflicts"}, {"oid": "4a84ac8700a2d5bf7624dd25d4c77cff34478500", "committedDate": "2022-05-25 23:32:29 -0400", "message": "Merge branch 'master' into dev_Windchild_CurrentLocationXML"}, {"oid": "32aaaac33b8e53a355c373879ee4de9f91747c39", "committedDate": "2022-05-26 07:16:40 -0400", "message": "Merge branch 'master' into dev_Windchild_PersonFlags"}, {"oid": "9472637ad3cb3c27cba2c318c5ccdf022ca56d86", "committedDate": "2022-05-26 08:10:57 -0400", "message": "Fixing merge conflicts"}, {"oid": "f35709d1278c76d1ea7c10485071e0097b1aebf0", "committedDate": "2022-05-26 08:39:19 -0400", "message": "Switching to a single retirement report"}, {"oid": "b40d7b0e6bd9003de8df60cc732b5e195741d8aa", "committedDate": "2022-05-30 16:37:32 -0400", "message": "Merge pull request #3234 from Windchild292/dev_Windchild_PersonFlags"}, {"oid": "f7e43611ee653404079cc2fdced92c083c35362f", "committedDate": "2022-06-01 13:26:16 -0400", "message": "More swaps to using getActualValue"}, {"oid": "76223b1f01db0e020c9069b9c361d7af9f174e6a", "committedDate": "2022-06-01 17:49:36 -0400", "message": "Merge remote-tracking branch 'origin/master' into dev_Windchild_PartPriceApplications"}, {"oid": "e7755fbeddc7d00cc126c3281f4be93685eb83fa", "committedDate": "2022-06-08 20:05:45 -0400", "message": "Ignore End Date for Scenario Assignment to Active Contracts"}, {"oid": "c17408bc1409591bdb76664788c6ad4f55a5d813", "committedDate": "2022-06-18 17:51:05 -0400", "message": "Campaign::getPerson : Adding Nullable Annotation"}, {"oid": "f2abd2addef945880eefcf2a11ccfb5eec610ea3", "committedDate": "2022-06-18 17:59:08 -0400", "message": "Renaming clearGenealogy to clearGenealogyLinks (as that's what it does), and more test progress"}, {"oid": "39ac9b544233876ab9e4a6f914abaf549c76aded", "committedDate": "2022-06-20 22:59:32 -0400", "message": "Bunch of enum cleanups"}, {"oid": "a576a51fb82bbc625198e50a04894cd7749bed1c", "committedDate": "2022-06-21 16:25:02 -0400", "message": "Lots more tests, largely simple ones"}, {"oid": "0f60e6bba5ebdf538b335609e5bfd7817f614393", "committedDate": "2022-06-23 16:17:56 -0400", "message": "3372: Fixing Campaign Loan Report Issues"}, {"oid": "7441a156d93c5a7fb5dab7f9a38a5f87f6321f14", "committedDate": "2022-06-24 22:32:50 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_GenealogyTest"}, {"oid": "f5bb76bdee8f7d7aba18dd83f2d903036ea1f68b", "committedDate": "2022-06-27 13:25:57 -0400", "message": "Merge pull request #3378 from Windchild292/dev_Windchild_3372"}, {"oid": "0948c47088632642d946b7a5eec4eb595a21ac76", "committedDate": "2022-06-29 20:04:53 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_GenealogyTest"}, {"oid": "505318be000041c18ae226d4e1521dc527fc7133", "committedDate": "2022-07-14 17:41:42 -0400", "message": "Adding market enum testing"}, {"oid": "8d3060de0fe1375a8186d41be98a059652a81bed", "committedDate": "2022-07-31 00:15:10 -0400", "message": "add remove stratcon scenario option"}, {"oid": "9d2ebd8a76bc41afdf298da710ad80e1e4b80c0a", "committedDate": "2022-08-02 19:49:23 -0400", "message": "Checking this"}, {"oid": "803755f3d14a7ba3e66bb1e6364d6c4220bac841", "committedDate": "2022-08-03 20:51:52 -0400", "message": "Properly disabling the random tests"}, {"oid": "f79a61c91b06b467d1bbed4dfeaa36f97fd755e3", "committedDate": "2022-08-04 11:12:44 -0400", "message": "Using correct collector"}, {"oid": "4b3952367635a7620bddb96a9e81a7f1a97a2219", "committedDate": "2022-11-15 14:07:43 -0500", "message": "Removing duplicated name generation info from the campaign file"}, {"oid": "5213209bddb612458226cdfa7561a7220f8b3b67", "committedDate": "2022-11-15 15:54:47 -0500", "message": "Fixing deprecated XML utility uses and fixing indentation issues for parts"}, {"oid": "53e7b27c2173373019055e800950173ed7eb20df", "committedDate": "2022-11-15 19:05:53 -0500", "message": "Company Generator: Faction Options"}, {"oid": "230c025b083606834270681ce668a836c76dfc1b", "committedDate": "2022-11-22 16:25:51 -0500", "message": "3489: Adding Small Craft and DropShip Transport Support"}, {"oid": "b5349ccb7e3e9c0345d6685bb9a76a53afed8bdc", "committedDate": "2022-11-26 08:40:31 -0500", "message": "Merge pull request #3510 from MegaMek/dev_Windchild_3489"}, {"oid": "b3f06f70d94e83ed6fad6368cbe5df5d35c20296", "committedDate": "2022-11-26 11:38:42 -0500", "message": "Finishing adding the new option as a selection"}, {"oid": "1cb49fa503593c75f3bee4ebc6cf2574faec13de", "committedDate": "2022-11-26 11:49:33 -0500", "message": "Merge branch 'MegaMek:master' into dev_Windchild_CompanyGeneratorFactionGeneration"}, {"oid": "b47a12937f6b979925f82cb31bb6f2f33cf789e5", "committedDate": "2022-12-05 15:34:26 -0500", "message": "Scenarios are now Scenarios, not Missions"}, {"oid": "b57de2f09b47ffa8da9ab0bd7bba356d1e2e235c", "committedDate": "2022-12-08 23:00:17 -0500", "message": "Merge pull request #3501 from Windchild292/dev_Windchild_DeprecatedXML"}, {"oid": "ade20da3d68431198324cbad4bd7cfcc2fd1ef66", "committedDate": "2022-12-11 23:37:05 -0500", "message": "Merge pull request #3520 from Windchild292/dev_Windchild_ScenariosAreScenarios"}, {"oid": "a6d88033b71b9291e4774a5cbc3e8f577287a523", "committedDate": "2022-12-16 22:33:19 -0500", "message": "Tearing out EncodeControl"}, {"oid": "cec1df762e06d6e3e6c4c437c0d0a25892f44a7d", "committedDate": "2022-12-29 13:15:59 -0500", "message": "Fixing Option Naming Typos"}, {"oid": "e3e1ce62490858d93d695b7e7f8bf17dca068936", "committedDate": "2022-12-29 14:30:54 -0500", "message": "Standardize option naming"}, {"oid": "d385d0bc8fd91a75c631f546272abbff8e07311a", "committedDate": "2022-12-30 13:05:34 -0500", "message": "SkillLevel: Reducing SkillType::getExperienceLevelName calls"}, {"oid": "332b06c4b29e7f809e9cf0cab16a062f65544391", "committedDate": "2023-01-08 20:33:20 -0500", "message": "Yearly Retirement Nag Now Follows Campaign Options"}, {"oid": "62afc895d75aece8a3079267b20eb9e8c3de5cfc", "committedDate": "2023-01-14 16:34:36 -0500", "message": "3558: RATs are Used Outside of AtB"}, {"oid": "0e39c3c4517d5cd46e99546d8e3b3a1cea7cb30b", "committedDate": "2023-01-17 20:12:29 -0500", "message": "Merge branch 'master' into dev_Windchild_CampaignOptionsCleanup"}, {"oid": "da71474de7674e9b213472ce61b254a744c6ae5a", "committedDate": "2023-01-17 20:12:53 -0500", "message": "Merge branch 'MegaMek:master' into dev_Windchild_IsolatedSkillLevelEnumSwapovers"}, {"oid": "a328a1e42771f0c7052a7c9c1b2583134a8534f4", "committedDate": "2023-01-25 22:45:44 -0500", "message": "Campaign Ops Unit Rating: Properly Calculate Personnel Numbers"}, {"oid": "5ad55c0aa2dd0422f1e05d2704860f7674936984", "committedDate": "2023-01-25 23:11:45 -0500", "message": "Applying changes from testing and further rule reading"}, {"oid": "8fc36fbd275ffccf0ed91df60b637a5cc3135a86", "committedDate": "2023-01-29 18:24:48 -0500", "message": "Phenotype Enum: Migrating Uses to Simplification Methods"}, {"oid": "a462c5436ab5bec1a54c2f652f232fdff88f7a42", "committedDate": "2023-01-29 19:28:49 -0500", "message": "Tearing out unused code and swapping to using a map"}, {"oid": "542356e26d4b14d760fa69f33f627ed2b692908b", "committedDate": "2023-02-06 21:17:17 -0500", "message": "Merge pull request #3589 from Windchild292/dev_Windchild_PhenotypeSimplificationMethods"}, {"oid": "2757b555a5a0aa6fdf73322d58173bbee7d22ba5", "committedDate": "2023-02-06 21:25:38 -0500", "message": "Merge pull request #3590 from Windchild292/dev_Windchild_UnusedSPACleanup"}, {"oid": "6784f22a192b7c650bd5be0354bc6946bfec896f", "committedDate": "2023-02-06 21:41:30 -0500", "message": "Merge pull request #3557 from Windchild292/dev_Windchild_YearlyRetirementNag"}, {"oid": "724a8333d072d631c1072fd7ccf2707efe6e2b40", "committedDate": "2023-02-07 20:56:16 -0500", "message": "Fixing merge conflicts"}, {"oid": "e0f16b480db19ce9d36290caa03be8f6be77cace", "committedDate": "2023-02-07 21:43:07 -0500", "message": "Fixing merge conflicts"}, {"oid": "8996781abfef1f08293a06ef53e3af92812a9b5d", "committedDate": "2023-02-07 22:53:45 -0500", "message": "Standardize Mass Repair Mass Salvage naming to MRMS"}, {"oid": "1ccab8e5b040389be54c4730103354fbc0f06406", "committedDate": "2023-02-18 19:25:18 +0000", "message": "3318: Add manual personnel payments that generate Finance debit"}, {"oid": "86649c7c93250458658d765a7e2007134c385c74", "committedDate": "2023-02-25 20:07:13 -0500", "message": "Some related code cleanup"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU2NTE4OA==", "url": "https://github.com/MegaMek/mekhq/pull/2123#discussion_r500565188", "body": "```suggestion\r\n                                if ((null != p.getUnitId()) && (null != getHangar().getUnit(p.getUnitId()))\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                            if (null != p.getUnitId() && null != getHangar().getUnit(p.getUnitId())\n          \n          \n            \n                                            if ((null != p.getUnitId()) && (null != getHangar().getUnit(p.getUnitId()))", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                                <span class=\"pl-k\">if</span> (<span class=\"pl-c1\">null</span> <span class=\"pl-k\">!=</span> p<span class=\"pl-k\">.</span>getUnitId() <span class=\"pl-k\">&amp;&amp;</span> <span class=\"pl-c1\">null</span> <span class=\"pl-k\">!=</span> getHangar()<span class=\"pl-k\">.</span>getUnit(p<span class=\"pl-k\">.</span>getUnitId())</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                                <span class=\"pl-k\">if</span> (<span class=\"x x-first x-last\">(</span><span class=\"pl-c1\">null</span> <span class=\"pl-k\">!=</span> p<span class=\"pl-k\">.</span>getUnitId()<span class=\"x x-first x-last\">)</span> <span class=\"pl-k\">&amp;&amp;</span> <span class=\"x x-first x-last\">(</span><span class=\"pl-c1\">null</span> <span class=\"pl-k\">!=</span> getHangar()<span class=\"pl-k\">.</span>getUnit(p<span class=\"pl-k\">.</span>getUnitId(<span class=\"x x-first x-last\">)</span>))</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "Windchild292", "createdAt": "2020-10-06T20:08:06Z", "path": "MekHQ/src/mekhq/campaign/Campaign.java", "diffHunk": "@@ -8194,8 +8101,8 @@ public void initAtB(boolean newCampaign) {\n                                     // TODO : Fix this so we aren't using a hack that just assumes IS2\n                                     p.setOriginalUnitTech(Person.TECH_IS2);\n                                 }\n-                                if (null != p.getUnitId() && null != units.get(p.getUnitId())\n-                                        && ms.getName().equals(units.get(p.getUnitId()).getEntity().getShortNameRaw())) {\n+                                if (null != p.getUnitId() && null != getHangar().getUnit(p.getUnitId())", "originalCommit": "02cf732d561f245a8a8d39a2b8a819cb45ac94ca", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "cb64714e6e2b7d03de487c72eb18c3c09948b6c6", "changed_code": [{"header": "diff --git a/MekHQ/src/mekhq/campaign/Campaign.java b/MekHQ/src/mekhq/campaign/Campaign.java\nindex c9db948ab..4dff77b1d 100644\n--- a/MekHQ/src/mekhq/campaign/Campaign.java\n+++ b/MekHQ/src/mekhq/campaign/Campaign.java\n", "chunk": "@@ -8101,7 +8101,7 @@ public class Campaign implements Serializable, ITechManager {\n                                     // TODO : Fix this so we aren't using a hack that just assumes IS2\n                                     p.setOriginalUnitTech(Person.TECH_IS2);\n                                 }\n-                                if (null != p.getUnitId() && null != getHangar().getUnit(p.getUnitId())\n+                                if ((null != p.getUnitId()) && (null != getHangar().getUnit(p.getUnitId()))\n                                         && ms.getName().equals(getHangar().getUnit(p.getUnitId()).getEntity().getShortNameRaw())) {\n                                     p.setOriginalUnitId(p.getUnitId());\n                                 }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "3f55aabad31fb84ff1e5af9c8caac7bd8c8999a0", "changed_code": [{"header": "diff --git a/MekHQ/src/mekhq/campaign/Campaign.java b/MekHQ/src/mekhq/campaign/Campaign.java\nindex c9db948ab..0f69d5116 100644\n--- a/MekHQ/src/mekhq/campaign/Campaign.java\n+++ b/MekHQ/src/mekhq/campaign/Campaign.java\n", "chunk": "@@ -8101,7 +8090,7 @@ public class Campaign implements Serializable, ITechManager {\n                                     // TODO : Fix this so we aren't using a hack that just assumes IS2\n                                     p.setOriginalUnitTech(Person.TECH_IS2);\n                                 }\n-                                if (null != p.getUnitId() && null != getHangar().getUnit(p.getUnitId())\n+                                if ((null != p.getUnitId()) && (null != getHangar().getUnit(p.getUnitId()))\n                                         && ms.getName().equals(getHangar().getUnit(p.getUnitId()).getEntity().getShortNameRaw())) {\n                                     p.setOriginalUnitId(p.getUnitId());\n                                 }\n", "next_change": {"commit": "a0c1cbf9746ed9486f08ce4aa2376828e846c786", "changed_code": [{"header": "diff --git a/MekHQ/src/mekhq/campaign/Campaign.java b/MekHQ/src/mekhq/campaign/Campaign.java\nindex 0f69d5116..e49c8ce15 100644\n--- a/MekHQ/src/mekhq/campaign/Campaign.java\n+++ b/MekHQ/src/mekhq/campaign/Campaign.java\n", "chunk": "@@ -8085,13 +8047,16 @@ public class Campaign implements Serializable, ITechManager {\n                                     || ms.getWeightClass() < megamek.common.EntityWeightClass.WEIGHT_ASSAULT)) {\n                                 p.setOriginalUnitWeight(ms.getWeightClass());\n                                 if (ms.isClan()) {\n-                                    p.setOriginalUnitTech(Person.TECH_CLAN);\n+                                    p.setOriginalUnitTech(2);\n                                 } else if (ms.getYear() > 3050) {\n-                                    // TODO : Fix this so we aren't using a hack that just assumes IS2\n-                                    p.setOriginalUnitTech(Person.TECH_IS2);\n+                                    /*\n+                                    * We're only guessing anyway, so we use this hack to avoid actually loading the\n+                                    * entity to check for IS2\n+                                    */\n+                                    p.setOriginalUnitTech(1);\n                                 }\n-                                if ((null != p.getUnitId()) && (null != getHangar().getUnit(p.getUnitId()))\n-                                        && ms.getName().equals(getHangar().getUnit(p.getUnitId()).getEntity().getShortNameRaw())) {\n+                                if (null != p.getUnitId() && null != units.get(p.getUnitId())\n+                                        && ms.getName().equals(units.get(p.getUnitId()).getEntity().getShortNameRaw())) {\n                                     p.setOriginalUnitId(p.getUnitId());\n                                 }\n                             }\n", "next_change": {"commit": "ed6a5c015aa33d0bffdcd3297b9482ce600eb146", "changed_code": [{"header": "diff --git a/MekHQ/src/mekhq/campaign/Campaign.java b/MekHQ/src/mekhq/campaign/Campaign.java\nindex e49c8ce15..5e8e38209 100644\n--- a/MekHQ/src/mekhq/campaign/Campaign.java\n+++ b/MekHQ/src/mekhq/campaign/Campaign.java\n", "chunk": "@@ -8047,13 +8323,10 @@ public class Campaign implements Serializable, ITechManager {\n                                     || ms.getWeightClass() < megamek.common.EntityWeightClass.WEIGHT_ASSAULT)) {\n                                 p.setOriginalUnitWeight(ms.getWeightClass());\n                                 if (ms.isClan()) {\n-                                    p.setOriginalUnitTech(2);\n+                                    p.setOriginalUnitTech(Person.TECH_CLAN);\n                                 } else if (ms.getYear() > 3050) {\n-                                    /*\n-                                    * We're only guessing anyway, so we use this hack to avoid actually loading the\n-                                    * entity to check for IS2\n-                                    */\n-                                    p.setOriginalUnitTech(1);\n+                                    // TODO : Fix this so we aren't using a hack that just assumes IS2\n+                                    p.setOriginalUnitTech(Person.TECH_IS2);\n                                 }\n                                 if (null != p.getUnitId() && null != units.get(p.getUnitId())\n                                         && ms.getName().equals(units.get(p.getUnitId()).getEntity().getShortNameRaw())) {\n", "next_change": {"commit": "04a16de448a0c7d576a6c3c64c9d23ae08384bae", "changed_code": [{"header": "diff --git a/MekHQ/src/mekhq/campaign/Campaign.java b/MekHQ/src/mekhq/campaign/Campaign.java\nindex 5e8e38209..993f59cfe 100644\n--- a/MekHQ/src/mekhq/campaign/Campaign.java\n+++ b/MekHQ/src/mekhq/campaign/Campaign.java\n", "chunk": "@@ -8328,8 +7648,8 @@ public class Campaign implements Serializable, ITechManager {\n                                     // TODO : Fix this so we aren't using a hack that just assumes IS2\n                                     p.setOriginalUnitTech(Person.TECH_IS2);\n                                 }\n-                                if (null != p.getUnitId() && null != units.get(p.getUnitId())\n-                                        && ms.getName().equals(units.get(p.getUnitId()).getEntity().getShortNameRaw())) {\n+                                if ((null != p.getUnitId()) && (null != getHangar().getUnit(p.getUnitId()))\n+                                        && ms.getName().equals(getHangar().getUnit(p.getUnitId()).getEntity().getShortNameRaw())) {\n                                     p.setOriginalUnitId(p.getUnitId());\n                                 }\n                             }\n", "next_change": {"commit": "0637c9d04376fbc5378a09826bdd58e1092b97f0", "changed_code": [{"header": "diff --git a/MekHQ/src/mekhq/campaign/Campaign.java b/MekHQ/src/mekhq/campaign/Campaign.java\nindex 993f59cfe..0b3ff2c82 100644\n--- a/MekHQ/src/mekhq/campaign/Campaign.java\n+++ b/MekHQ/src/mekhq/campaign/Campaign.java\n", "chunk": "@@ -7648,9 +7181,9 @@ public class Campaign implements Serializable, ITechManager {\n                                     // TODO : Fix this so we aren't using a hack that just assumes IS2\n                                     p.setOriginalUnitTech(Person.TECH_IS2);\n                                 }\n-                                if ((null != p.getUnitId()) && (null != getHangar().getUnit(p.getUnitId()))\n-                                        && ms.getName().equals(getHangar().getUnit(p.getUnitId()).getEntity().getShortNameRaw())) {\n-                                    p.setOriginalUnitId(p.getUnitId());\n+                                if ((null != p.getUnit())\n+                                        && ms.getName().equals(p.getUnit().getEntity().getShortNameRaw())) {\n+                                    p.setOriginalUnitId(p.getUnit().getId());\n                                 }\n                             }\n                         }\n", "next_change": {"commit": "5bf80c3e80c7fd9247fee197d749605de4a4e17b", "changed_code": [{"header": "diff --git a/MekHQ/src/mekhq/campaign/Campaign.java b/MekHQ/src/mekhq/campaign/Campaign.java\nindex 0b3ff2c82..9a670c658 100644\n--- a/MekHQ/src/mekhq/campaign/Campaign.java\n+++ b/MekHQ/src/mekhq/campaign/Campaign.java\n", "chunk": "@@ -7181,9 +7182,9 @@ public class Campaign implements Serializable, ITechManager {\n                                     // TODO : Fix this so we aren't using a hack that just assumes IS2\n                                     p.setOriginalUnitTech(Person.TECH_IS2);\n                                 }\n-                                if ((null != p.getUnit())\n-                                        && ms.getName().equals(p.getUnit().getEntity().getShortNameRaw())) {\n-                                    p.setOriginalUnitId(p.getUnit().getId());\n+                                if ((null != p.getUnitId()) && (null != getHangar().getUnit(p.getUnitId()))\n+                                        && ms.getName().equals(getHangar().getUnit(p.getUnitId()).getEntity().getShortNameRaw())) {\n+                                    p.setOriginalUnitId(p.getUnitId());\n                                 }\n                             }\n                         }\n", "next_change": {"commit": "599b0a3158d94a3eea50fe8314c55177a344c2a9", "changed_code": [{"header": "diff --git a/MekHQ/src/mekhq/campaign/Campaign.java b/MekHQ/src/mekhq/campaign/Campaign.java\nindex 9a670c658..314f30a8a 100644\n--- a/MekHQ/src/mekhq/campaign/Campaign.java\n+++ b/MekHQ/src/mekhq/campaign/Campaign.java\n", "chunk": "@@ -7182,9 +7178,9 @@ public class Campaign implements Serializable, ITechManager {\n                                     // TODO : Fix this so we aren't using a hack that just assumes IS2\n                                     p.setOriginalUnitTech(Person.TECH_IS2);\n                                 }\n-                                if ((null != p.getUnitId()) && (null != getHangar().getUnit(p.getUnitId()))\n-                                        && ms.getName().equals(getHangar().getUnit(p.getUnitId()).getEntity().getShortNameRaw())) {\n-                                    p.setOriginalUnitId(p.getUnitId());\n+                                if ((null != p.getUnit())\n+                                        && ms.getName().equals(p.getUnit().getEntity().getShortNameRaw())) {\n+                                    p.setOriginalUnitId(p.getUnit().getId());\n                                 }\n                             }\n                         }\n", "next_change": {"commit": "d597a8aab6c1b948ebfdcc3f58d2213acb04b200", "changed_code": [{"header": "diff --git a/MekHQ/src/mekhq/campaign/Campaign.java b/MekHQ/src/mekhq/campaign/Campaign.java\nindex 314f30a8a..7c830277b 100644\n--- a/MekHQ/src/mekhq/campaign/Campaign.java\n+++ b/MekHQ/src/mekhq/campaign/Campaign.java\n", "chunk": "@@ -7178,9 +7182,9 @@ public class Campaign implements Serializable, ITechManager {\n                                     // TODO : Fix this so we aren't using a hack that just assumes IS2\n                                     p.setOriginalUnitTech(Person.TECH_IS2);\n                                 }\n-                                if ((null != p.getUnit())\n-                                        && ms.getName().equals(p.getUnit().getEntity().getShortNameRaw())) {\n-                                    p.setOriginalUnitId(p.getUnit().getId());\n+                                if ((null != p.getUnitId()) && (null != getHangar().getUnit(p.getUnitId()))\n+                                        && ms.getName().equals(getHangar().getUnit(p.getUnitId()).getEntity().getShortNameRaw())) {\n+                                    p.setOriginalUnitId(p.getUnitId());\n                                 }\n                             }\n                         }\n", "next_change": {"commit": "9978a0b21dd7d6fbd2d0077748027c6ed31753b0", "changed_code": [{"header": "diff --git a/MekHQ/src/mekhq/campaign/Campaign.java b/MekHQ/src/mekhq/campaign/Campaign.java\nindex 7c830277b..b31772cc7 100644\n--- a/MekHQ/src/mekhq/campaign/Campaign.java\n+++ b/MekHQ/src/mekhq/campaign/Campaign.java\n", "chunk": "@@ -7182,9 +7180,9 @@ public class Campaign implements Serializable, ITechManager {\n                                     // TODO : Fix this so we aren't using a hack that just assumes IS2\n                                     p.setOriginalUnitTech(Person.TECH_IS2);\n                                 }\n-                                if ((null != p.getUnitId()) && (null != getHangar().getUnit(p.getUnitId()))\n-                                        && ms.getName().equals(getHangar().getUnit(p.getUnitId()).getEntity().getShortNameRaw())) {\n-                                    p.setOriginalUnitId(p.getUnitId());\n+                                if ((null != p.getUnit())\n+                                        && ms.getName().equals(p.getUnit().getEntity().getShortNameRaw())) {\n+                                    p.setOriginalUnitId(p.getUnit().getId());\n                                 }\n                             }\n                         }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "3f55aabad31fb84ff1e5af9c8caac7bd8c8999a0", "message": "Merge commit", "committedDate": null}, {"oid": "a0c1cbf9746ed9486f08ce4aa2376828e846c786", "committedDate": "2019-02-26 21:45:56 -0500", "message": "merge"}, {"oid": "3002e321d67f944da3a051a049f0706c0e353aa0", "committedDate": "2019-03-04 20:50:34 -0500", "message": "merge from upstream"}, {"oid": "34f5dfffab4318e94903fece9dbf49dd1ee475c7", "committedDate": "2019-04-23 22:53:00 -0400", "message": "continues work on track gui and rules"}, {"oid": "b1c2e0f95fc8ad45080d9962da602d5fe815c34b", "committedDate": "2019-04-26 22:02:27 -0400", "message": "hook up stratcon rules manager to mekhq event bus"}, {"oid": "6f180f04dabdd9901dc392b093561514eb2e84cc", "committedDate": "2019-05-04 12:17:55 -0400", "message": "merge from upstream"}, {"oid": "119ff411ebb80f91b83b3fe139bb911a79048b3d", "committedDate": "2019-05-12 15:48:11 -0400", "message": "scenario setup work"}, {"oid": "2548381ed541547a775bb8c96fd53802087ec9aa", "committedDate": "2019-06-20 23:58:58 -0400", "message": "merge from upstream"}, {"oid": "ed6a5c015aa33d0bffdcd3297b9482ce600eb146", "committedDate": "2020-04-11 22:33:14 -0400", "message": "merge from upstream"}, {"oid": "ca46ea5005775f38ad56f98bfb8899a187571e49", "committedDate": "2020-06-03 11:30:19 -0400", "message": "merge from upstream"}, {"oid": "b2f014d250be5b4b75ed3f765f10ee1781ab96ae", "committedDate": "2020-06-23 22:21:32 -0400", "message": "merge from upstream"}, {"oid": "2bd7638ed4cc2ad5bc80e4b1bc78ff091c318a87", "committedDate": "2020-07-13 00:06:30 -0400", "message": "merge from upstream"}, {"oid": "d4f035c262d3d9ea7b7f5e935a5807bf5275aa91", "committedDate": "2020-08-08 23:08:38 -0400", "message": "merge from upstream"}, {"oid": "5830ebef6d2f671d0b152f328436ab36bcddacf4", "committedDate": "2020-08-24 20:32:16 -0400", "message": "merge from upstream"}, {"oid": "c8622590fef59265a5a8c4f68676a4a628d0fc0a", "committedDate": "2020-08-26 23:17:49 -0400", "message": "multiple bug fixes and hookup to actual campaign"}, {"oid": "935339ac1b799e58664d736142b2a1fa0d9e4263", "committedDate": "2020-09-09 00:06:07 -0400", "message": "merge from upstream"}, {"oid": "c7d9edb3737ba14da075190a1292ac94bbd7e0f2", "committedDate": "2020-09-20 14:36:56 -0600", "message": "Adding code for a log entry when swapping TOE force."}, {"oid": "2e590a1dbeb8a7b132cd5d312b93af37b9e0620a", "committedDate": "2020-09-29 10:15:54 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_476"}, {"oid": "04f10ee4b7f5bf57284109439ec1ab178b15857e", "committedDate": "2020-10-06 21:41:18 -0400", "message": "merge from upstream"}, {"oid": "04a16de448a0c7d576a6c3c64c9d23ae08384bae", "committedDate": "2020-10-07 14:33:13 -0400", "message": "Split out cargo and hangar statistics from Campaign"}, {"oid": "796379c3c13e8dadad4ac4cfd29f02a30e9c2bd1", "committedDate": "2020-10-07 14:33:13 -0400", "message": "Split out accounting from the Campaign"}, {"oid": "a254e204d91c3fd90698936f8d21aba26aaf0142", "committedDate": "2020-10-07 14:33:14 -0400", "message": "Move PersonnelReport methods"}, {"oid": "361dde24295aa66e89fea69823b01cf497cf4664", "committedDate": "2020-10-07 14:33:14 -0400", "message": "Move more financial reporting out of Campaign"}, {"oid": "c28db6f06dec2b03e487c15f514685d852bdca1e", "committedDate": "2020-10-07 14:33:14 -0400", "message": "Remove unused methods"}, {"oid": "039786019051fddf3af641c0cc0e35e7c85eb156", "committedDate": "2020-10-07 15:49:11 -0400", "message": "Make testing Accountant easier for a Campaign"}, {"oid": "a72b07d7b8ec62055140cd346314602fb020119e", "committedDate": "2020-10-07 16:11:53 -0400", "message": "Make it easier to mock stats classes"}, {"oid": "0400aac175c219dc2fb73ea0a8dfbbf429aaff6e", "committedDate": "2020-10-07 16:45:26 -0400", "message": "Add forEachSparePart to improve performance"}, {"oid": "63e028b04713a41ec415910ea4d0ed03a3678864", "committedDate": "2020-10-08 13:32:32 -0400", "message": "Merge remote-tracking branch 'upstream/master' into move-accounting-and-stats-out-of-campaign"}, {"oid": "13de948b34166d73f4f7a2e5a8982c9f693b12bc", "committedDate": "2020-10-10 15:15:00 -0400", "message": "Use Person directly instead of IDs in Unit"}, {"oid": "923a477ddb1060c2a48c13cca7c5900a40c0f82a", "committedDate": "2020-10-10 15:15:00 -0400", "message": "Use Person instead of an ID"}, {"oid": "58291b29acbe7cc24a4491f3d3ab911f0468a7dc", "committedDate": "2020-10-10 15:41:57 -0400", "message": "Fix logic to check for Already Being Worked On"}, {"oid": "998ab0faf85804f17cc7444ae1b46c2591b5db1f", "committedDate": "2020-10-15 23:34:03 -0400", "message": "merge from upstream"}, {"oid": "75e396b885c6008c6f6a7d72f1bbd7aad8099970", "committedDate": "2020-10-16 16:29:27 -0400", "message": "Moving to an enum for mission status"}, {"oid": "24de5e9720cf823838bf74e4cf4eb562bedbb437", "committedDate": "2020-10-16 18:28:46 -0400", "message": "Merging useUnitRating with the UnitRatingMethod enum"}, {"oid": "ca615b8e13e2158834a33079c6f89b02504c0bf7", "committedDate": "2020-10-17 01:17:28 -0400", "message": "Moving to using AbstractIcon for constants"}, {"oid": "4a54c7e9a18be4084eb1d3748a891b46400bf53d", "committedDate": "2020-10-17 13:11:47 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_IconConstants"}, {"oid": "9c1a47e2e6268b362edd3d6eb2e39018b5802179", "committedDate": "2020-10-20 14:49:01 -0400", "message": "Address PR feedback"}, {"oid": "b5d38e8af270f50fc091db05cf882ea8380fe3a7", "committedDate": "2020-10-20 14:49:08 -0400", "message": "Merge remote-tracking branch 'upstream/master' into units-hold-actual-persons"}, {"oid": "f34ac06c3db416f5e852246e928d3b1c6c132500", "committedDate": "2020-10-20 21:00:04 -0400", "message": "Merge branch 'master' into dev_Windchild_MissionStatus"}, {"oid": "fbc730260407b11dc98571c9b5e184e8f05e6a89", "committedDate": "2020-10-22 12:56:22 -0400", "message": "Standardizing to use the PortraitChooser instead of the older icon selector"}, {"oid": "0637c9d04376fbc5378a09826bdd58e1092b97f0", "committedDate": "2020-10-22 15:07:25 -0400", "message": "Use Units rather than their IDs"}, {"oid": "d25f391110cab3b64118d5963e321c379f8ab3ec", "committedDate": "2020-10-22 15:07:25 -0400", "message": "Do not use Unit IDs in Refits"}, {"oid": "5bf80c3e80c7fd9247fee197d749605de4a4e17b", "committedDate": "2020-10-22 15:07:49 -0400", "message": "Merge branch 'master' into dev_Windchild_IconConstants"}, {"oid": "2eec6da85e021ce0398fd3d715071b7b625855ba", "committedDate": "2020-10-22 23:15:38 -0400", "message": "merge from upstream"}, {"oid": "599b0a3158d94a3eea50fe8314c55177a344c2a9", "committedDate": "2020-10-24 14:22:32 -0400", "message": "Merge remote-tracking branch 'upstream/master' into use-units-not-ids"}, {"oid": "1d9b9a6ee2a71f128d65bb7754463be3ca9a71bc", "committedDate": "2020-10-24 14:26:31 -0400", "message": "Address LGTM issues"}, {"oid": "9f22e79abf71f3d8cf935d5d83d4790af02b32ce", "committedDate": "2020-10-24 14:48:29 -0400", "message": "Add tests for transport unit sets"}, {"oid": "851026ff48ec4e39238b2c56212bac2ea7993670", "committedDate": "2020-10-26 14:53:19 -0400", "message": "Use new Warehouse type in Campaign (etc)"}, {"oid": "37fc5840de9bf6c5bb19b38767e1394be220e1b9", "committedDate": "2020-10-26 16:02:30 -0400", "message": "Move some event logic to the Warehouse"}, {"oid": "3f795a2b3ba1840a198ca067a1d76aed4429f699", "committedDate": "2020-10-26 17:26:50 -0400", "message": "Move removing child parts to the Warehouse"}, {"oid": "d597a8aab6c1b948ebfdcc3f58d2213acb04b200", "committedDate": "2020-10-27 12:29:29 -0400", "message": "Starting to implement edge fixes"}, {"oid": "9978a0b21dd7d6fbd2d0077748027c6ed31753b0", "committedDate": "2020-10-27 12:29:35 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_Edge"}, {"oid": "b2aea6b5d940c4fa06a42cd1b04559815323ab63", "committedDate": "2020-10-27 13:04:35 -0400", "message": "Working on edge code"}, {"oid": "fbd0d470437e527c764daa294d1521ca7509a6af", "committedDate": "2020-10-27 14:04:21 -0400", "message": "Implementing changes as per review"}, {"oid": "c883a5f8c0085c74e8f448ecd3c0f9c04227b067", "committedDate": "2020-10-27 17:22:03 -0400", "message": "Move spare part helpers to Warehouse and add tests"}, {"oid": "dfca32fc2a15a2908cd4f1277261d416fcad1f00", "committedDate": "2020-10-27 21:14:06 -0400", "message": "merge from upstream"}, {"oid": "a7d7c78d0149d3de3828501499fdf61b5ae75be6", "committedDate": "2020-10-28 14:17:13 -0400", "message": "Merge pull request #2167 from sixlettervariables/add-parts-warehouse"}, {"oid": "d9aa78378bd639bd9bd8b36e16e9d407d5c2f1a6", "committedDate": "2020-10-28 14:28:37 -0400", "message": "Clean up part events in Campaign"}, {"oid": "f6acac4474902742fd52f7d3d9cc3cf3c074d16a", "committedDate": "2020-10-28 15:35:29 -0400", "message": "Address LGTM nit"}, {"oid": "b60b5a84ad487fe05e6369a11fedccb4f233a69d", "committedDate": "2020-10-29 15:28:06 -0400", "message": "Move Hire Personnel for a Unit to an action"}, {"oid": "d32837864805c67ac3894ce3a6b84ee8dae064a3", "committedDate": "2020-10-29 15:43:23 -0400", "message": "Don't use unit IDs for parts needing service"}, {"oid": "92b838a6428bae18030b98719a0c20d399377282", "committedDate": "2020-10-29 15:51:09 -0400", "message": "Move unnecessary unit logic from Campaign and into Unit"}, {"oid": "fd327a8f439a378f8f34afcb3067fe57153dcc2d", "committedDate": "2020-11-03 21:23:25 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_MHQPortraitSelector"}, {"oid": "0cbe836f9e807faf4cbef1d391b1ce3ad0e865d1", "committedDate": "2020-11-04 16:17:23 -0500", "message": "Add Quartermaster to manage machines and materiel"}, {"oid": "18cddebe515dbc58e76c49ef789cb3f4b31bc8a2", "committedDate": "2020-11-06 14:57:11 -0500", "message": "Address PR feedback and fix #1801"}, {"oid": "dd8b9c84414cb11c30ec6e2d395e2260235cd73a", "committedDate": "2020-11-06 14:58:38 -0500", "message": "Fix extraneous whitespace"}, {"oid": "31c96a9e64873aa2840946dbb1c12d347994780d", "committedDate": "2020-11-06 16:10:50 -0500", "message": "Swapping portrait generation to use system-based file path comparison"}, {"oid": "8bf24b6a7be023940aad58a0c3c3ded1ee2a9358", "committedDate": "2020-11-06 16:50:16 -0500", "message": "Fixing merge conflicts"}, {"oid": "206529fd93c7b6efd22949d747ea14ec2a1942ed", "committedDate": "2020-11-06 19:38:46 -0500", "message": "Merge pull request #2185 from sixlettervariables/use-units-not-ids-for-transports"}, {"oid": "f246ee2085262fe713a9f24b3eaf6e7adb142e41", "committedDate": "2020-11-07 10:40:39 -0500", "message": "Moving portrait generation code into a random portrait generator"}, {"oid": "139d94f86981a4c6b681ec14d16630b99198024a", "committedDate": "2020-11-07 12:32:07 -0500", "message": "AbstractIcon: Simplifying icon-related code"}, {"oid": "cbec2bdc4861f772bb509fc69f37a8c053522347", "committedDate": "2020-11-07 12:39:03 -0500", "message": "Removing duplicate constants in campaign"}, {"oid": "e9c4a88af33312b049543ac024e2c32784a7b209", "committedDate": "2020-11-07 12:52:54 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_AIPS"}, {"oid": "76f57ccbde3ae98e58e5264c5d06be29b03ce3af", "committedDate": "2020-11-07 15:16:08 -0500", "message": "Merge pull request #2209 from Windchild292/dev_Windchild_RPG"}, {"oid": "067bacc6c00b10192faa2b4e13d4c2127ba75292", "committedDate": "2020-11-07 22:39:06 -0500", "message": "Merge pull request #2211 from Windchild292/dev_Windchild_AIPS"}, {"oid": "a38a43b4cc7f7670aa7ffad2bf318bc15334d0a1", "committedDate": "2020-11-08 13:55:37 -0500", "message": "Merge remote-tracking branch 'upstream/master' into add-quartermaster-2"}, {"oid": "6b4dfeadd20c22e92cb2a0328030ed58c3df5cd1", "committedDate": "2020-11-14 19:29:15 -0500", "message": "Swapping Genealogy and FormerSpouse to no longer use id when active."}, {"oid": "aa59e47ee67a276b3a415ab3cb761291fa2d1593", "committedDate": "2020-11-15 16:10:53 -0500", "message": "Only return non-zero quantities of parts, fixing #2231"}, {"oid": "24c2199bd396e7e059f3a3123c060fce92c04726", "committedDate": "2020-11-30 21:41:10 -0500", "message": "merge from upstream"}, {"oid": "6b3e4afa0664f35d2fc49a8e881b2fd7f22ea981", "committedDate": "2020-12-04 07:37:02 -0500", "message": "Use tested spare part consolidation logic"}, {"oid": "749469b9d6c8f7a36748d76c53dae5cc39365894", "committedDate": "2020-12-04 10:33:33 -0500", "message": "Fixup whitespace"}, {"oid": "cb8a407413b0629636afe9dc153a93699cbcb2da", "committedDate": "2020-12-04 12:21:25 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_476"}, {"oid": "7c0dd98fed591d24803031e815a39480fae3da18", "committedDate": "2020-12-04 12:24:21 -0500", "message": "Fixing merge conflitcs"}, {"oid": "d770e67e26237234553967696e546ef4cd5e6c4a", "committedDate": "2020-12-04 16:20:00 -0500", "message": "Moving ranks to their own folder"}, {"oid": "198ea362215a2605015f13d5baf7a6f9a27e2323", "committedDate": "2020-12-04 17:57:54 -0500", "message": "Moving ranks system names to the Rank XML file"}, {"oid": "c88ca2c1c698dfe730b493048b630ef6d20ce973", "committedDate": "2020-12-13 02:45:36 -0500", "message": "Restore AtBContract references in the ContractMarket #2141"}, {"oid": "dce8434c1c674caf8ba284f7e99a0da72a679958", "committedDate": "2020-12-14 18:14:37 -0500", "message": "Merge pull request #2263 from Windchild292/dev_Windchild_2200"}, {"oid": "02b7023e03f921ec06430d3a3bfbf3fd4d06f12d", "committedDate": "2020-12-16 17:45:57 -0500", "message": "Add the ability to swap out instances of static classes"}, {"oid": "6fe11ed3dea3b240bc594dd3153526f8fa1efcd1", "committedDate": "2020-12-22 17:15:50 -0500", "message": "merge from upstream"}, {"oid": "1080fdc3cc0abf4b10a986fa95243f6a883a2446", "committedDate": "2020-12-22 17:22:20 -0500", "message": "Do not display unknown armor types in the Parts In Use report, fixes #2298"}, {"oid": "26577933fe91fcc839a403192479257fcf64f842", "committedDate": "2020-12-25 17:30:07 -0500", "message": "PlayerColours, Colour Camo Standardization, and standardizing camo selector"}, {"oid": "b7106b6df15109159676c4d5c76d6b57d98d749c", "committedDate": "2020-12-25 17:31:02 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_1727"}, {"oid": "256150fa6780932824d092bb5e1cfc5160a82798", "committedDate": "2020-12-26 23:02:07 -0500", "message": "Fixing colour camouflage during colour set"}, {"oid": "05bda11a452176725c2023ddfda641c5b9d77ff2", "committedDate": "2020-12-30 11:28:06 -0500", "message": "Merge pull request #2294 from sixlettervariables/add-contract-market-tests"}, {"oid": "d96560342ac372c6159e2eb36a930d730575079e", "committedDate": "2020-12-31 10:50:32 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_1727"}, {"oid": "87fef495531a68093af610ebd4d170ad9fe58ed7", "committedDate": "2020-12-31 13:13:30 -0500", "message": "Applying requisite changes in other files"}, {"oid": "1077aa3ce47d85a2b52d46fe24d0a9d6500338b3", "committedDate": "2021-01-07 22:38:01 -0500", "message": "Implementing PersonnelRole Enum"}, {"oid": "7ee43f4d3196080806f016767d68fcc646806b95", "committedDate": "2021-01-08 13:14:46 -0500", "message": "Fixing merge conflicts"}, {"oid": "461f2e03e5c7b7e233ccb188ab3acbea84217051", "committedDate": "2021-01-09 12:33:02 -0500", "message": "Fixing merge conflicts"}, {"oid": "7715f2d53d7b785432c6d12abe076dd9fe734b63", "committedDate": "2021-01-11 00:08:57 -0500", "message": "Continuing camouflage AbstractIcon implementation"}, {"oid": "5c767fe20f909aed7ad9ee04af783fada0f01183", "committedDate": "2021-01-13 14:44:22 -0500", "message": "Fixing colour set and moving EntityImage to use proper camo type"}, {"oid": "13a860aed5400a5bf2ccb7ff55f12b6266ed1c86", "committedDate": "2021-01-14 15:40:05 -0500", "message": "Moving to fully use isConventionalInfantry"}, {"oid": "b395926d66b44f814eeccbcdf238377754b3497f", "committedDate": "2021-01-16 12:03:30 -0500", "message": "Swapping to using streams for missions"}, {"oid": "3c08e5b43761cd85a411618df940a669f43b0f74", "committedDate": "2021-01-16 12:03:41 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_MissionStatus"}, {"oid": "56075ee22d31cf6645cfbc078f6d0059a7c35a2e", "committedDate": "2021-01-16 13:07:08 -0500", "message": "Swapping to stream implementation"}, {"oid": "c56982c6b4c7590fa58659f5739adb6fb98c38b3", "committedDate": "2021-01-16 13:20:27 -0500", "message": "Applying changes from personal review"}, {"oid": "bac1ae00109056ac5aaf4ddf35370fb62657e4ed", "committedDate": "2021-01-16 13:40:07 -0500", "message": "Moving to only use getMissions when necessary"}, {"oid": "6a6ab7d22aae49fceae02409ae8f3121e890ccc1", "committedDate": "2021-01-16 13:57:34 -0500", "message": "Moving to isActiveOn"}, {"oid": "e0a11cd0c98c4fd665190822f79c498645f15426", "committedDate": "2021-01-31 13:08:13 -0700", "message": "Renaming a bunch of personnel options"}, {"oid": "a16944f0ca0f8452a8500b311c0d4c1afd4f69ad", "committedDate": "2021-01-31 13:14:59 -0700", "message": "Finishing the option renames"}, {"oid": "3055e76295deb7d552bc3972b69cc6e0fb1f8760", "committedDate": "2021-02-01 10:17:56 -0700", "message": "Starting to implement Automatic Company Generation"}, {"oid": "909ceb8a84cdd6031bf90c300d47b4d2da527643", "committedDate": "2021-02-01 21:19:14 -0700", "message": "Continuing to work on an AtB Company Generator"}, {"oid": "50d74c591ba7b25978e91a326e3d0ce53513c6cd", "committedDate": "2021-02-07 16:50:13 -0700", "message": "Continuing to implement company generation and its options"}, {"oid": "426328755b88eceb8119a0c91696b2e655a0c00e", "committedDate": "2021-02-08 12:27:32 -0700", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_PersonnelRoles"}, {"oid": "9cbf543bf750926dffd2ad77d82e8da2dc416a54", "committedDate": "2021-02-08 12:57:48 -0700", "message": "Bugfixes and some code cleanup from personal review"}, {"oid": "f00627349f7dfb1bfb29305b3377fa3fea2776c5", "committedDate": "2021-02-11 10:55:45 -0700", "message": "Adding Unit::isConventionalInfantry to ensure the entity is null checked"}, {"oid": "d5767fac16735b748124c2759fa7e02388f3e3e0", "committedDate": "2021-02-11 12:52:56 -0700", "message": "Applying changes from personal review"}, {"oid": "d69c0121a94474264821a25df299ecf667dfefdf", "committedDate": "2021-02-12 22:37:21 -0500", "message": "merge from upstream"}, {"oid": "17e3819e3ef169b2b2bf9114df56a23fc8f57f8b", "committedDate": "2021-02-19 09:26:24 -0500", "message": "Add logging and error trapping on daily unit maintenance #2427"}, {"oid": "3a7dc0d62fbf19186d1bbebeefc14a1838733180", "committedDate": "2021-02-19 09:32:56 -0500", "message": "Add error trapping to daily part maintenance, related to #2427"}, {"oid": "efa0010ac4de3087fd997cad083dfcc7307f1fae", "committedDate": "2021-02-19 10:53:09 -0700", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_PersonnelOptionsTab"}, {"oid": "1e74b62a2b90eefb8fd7a24d4c24faf08d1c6b3b", "committedDate": "2021-02-19 12:27:59 -0700", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_AtBCompanyGeneration"}, {"oid": "8f0b7abad948bde3df857ec022c1a3668076b29c", "committedDate": "2021-02-26 13:31:57 -0700", "message": "2442: Fixing Ranks Issues: Removing ancient migration and code, Using proper setter, and using the Ranks as the spinner"}, {"oid": "d52c982d8da547329729b0caea1fffab274e1b0c", "committedDate": "2021-02-27 10:23:14 -0500", "message": "Use MM's new UnitNameTracker for name collisions"}, {"oid": "3c5f987fa51fbe18454c55214f4d5d5f2b980a90", "committedDate": "2021-03-01 09:12:20 -0700", "message": "Fixing merge conflicts"}, {"oid": "b9f8896698477ed928a80443d0345d6397c58bb2", "committedDate": "2021-03-03 10:07:04 -0700", "message": "Fixing merge conflicts"}, {"oid": "1a9d000431b1f187634f7e6ef15161dd07678998", "committedDate": "2021-03-05 12:19:51 -0700", "message": "Continuing to work on the company generator"}, {"oid": "7f59899475e511f98ed9f64a1c10efab11737c43", "committedDate": "2021-03-05 21:50:52 -0500", "message": "merge from upstream"}, {"oid": "1a6354d39d3f6108e9e0e6f9e455c5a126627347", "committedDate": "2021-03-06 10:44:21 -0500", "message": "Address review comments"}, {"oid": "18c7330a3cc319d1dc3e55892a46c5c80539db9a", "committedDate": "2021-03-06 09:56:12 -0700", "message": "Fixing merge conflicts"}, {"oid": "b19752176bb0619f7ccda9f75d551b050521a106", "committedDate": "2021-03-08 23:25:41 -0500", "message": "merge from upstream"}, {"oid": "0bc70593b2b327657e4ff7709e320451adfadbe6", "committedDate": "2021-03-09 09:01:53 -0700", "message": "Fixing merge conflicts"}, {"oid": "9eca5ea7a7d0fe44db02d1ce091f5bf294cb156d", "committedDate": "2021-03-09 09:07:57 -0700", "message": "Fixing merge conflicts"}, {"oid": "baefb52c3074832565148fffae6d1363449fa8ae", "committedDate": "2021-03-09 09:19:18 -0700", "message": "Fixing merge conflicts"}, {"oid": "9499ad003bfeb58930187abad3334129be912b4e", "committedDate": "2021-03-09 09:23:18 -0700", "message": "Fixing merge conflicts"}, {"oid": "d0e34e3b80c163ff4ed03474a3adcd39d061c9ee", "committedDate": "2021-03-09 09:39:24 -0700", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_ShoppingList"}, {"oid": "8ee805b229c9373e653376a749274023ef13139b", "committedDate": "2021-03-09 11:54:07 -0500", "message": "Merge pull request #2373 from Windchild292/dev_Windchild_isConventionalInfantry"}, {"oid": "559cb006d560fd2099639e701e37538aded7f3a1", "committedDate": "2021-03-09 12:19:33 -0500", "message": "Merge pull request #2337 from Windchild292/dev_Windchild_ShoppingList"}, {"oid": "2bf37308c59c435acc52e0cf512ce9f74d1adc7e", "committedDate": "2021-03-09 10:26:52 -0700", "message": "Fixing merge conflicts"}, {"oid": "62726bf22f84cafc8872cbdebd5a8edce980e60a", "committedDate": "2021-03-09 10:27:33 -0700", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_CamouflageIcon"}, {"oid": "5082524cc2a32c4a8360cb845951a5e2b94300df", "committedDate": "2021-03-09 11:46:51 -0700", "message": "Fixing merge conflicts"}, {"oid": "c640fe5cc744f25a6fb292dd50220c8ecfe1c986", "committedDate": "2021-03-09 12:27:38 -0700", "message": "Fixing merge conflicts"}, {"oid": "64b151aab1a311e538c895526ba3f807216917c1", "committedDate": "2021-03-11 19:48:54 -0700", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_MissionStatus"}, {"oid": "98253ba4fbbd681dca588b7cb766e8439c19d880", "committedDate": "2021-03-11 19:59:41 -0700", "message": "Applying bugfixes from review"}, {"oid": "8d7d2a8df4596249f133919b569b56249b0068aa", "committedDate": "2021-03-12 14:28:19 -0700", "message": "Improving default contract name and sort"}, {"oid": "c13dedfdb7ce73cfdfe1d464e83765140336736c", "committedDate": "2021-03-12 14:59:22 -0700", "message": "2458: Adding Insufficient Astech warnings for MRMS and adding some more Astech/Medic pool functions"}, {"oid": "d2b11fb805eea82905ab0d8f846ca96bd69124e3", "committedDate": "2021-03-13 09:01:10 -0700", "message": "Fixing merge conflicts"}, {"oid": "902ebb67bf5dbe2e94cc32810992a2d1aa6c321c", "committedDate": "2021-03-13 09:02:31 -0700", "message": "Fixing merge conflicts"}, {"oid": "ec5843cb0d12174c7d5f83419268e5184d2d60f6", "committedDate": "2021-03-13 09:08:04 -0700", "message": "Fixing merge conflicts"}, {"oid": "1e0c0d260af35ecf86a9b8b9519c8cceee2e7028", "committedDate": "2021-03-13 11:47:11 -0700", "message": "Moving the unit market changes into an individual branch that contains some parts of the contract market changes"}, {"oid": "a5382b0386cb0354a4b3c870fdd8fee5e2f5330a", "committedDate": "2021-03-13 22:22:50 -0500", "message": "additional code review changes"}, {"oid": "fe6e045bb8acb2700cc38bd6a25ec62011977264", "committedDate": "2021-03-14 01:21:48 -0500", "message": "merge from upstream"}, {"oid": "48663cfaebb3a6a04f5680e7f755c532bd159779", "committedDate": "2021-03-14 10:58:03 -0600", "message": "Fixing merge conflicts"}, {"oid": "b8ccd096938dcbd22c56b4a93c87c78d770df189", "committedDate": "2021-03-16 10:03:47 -0600", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_AbstractUnitMarket"}, {"oid": "00db4b9f4381f0d6bcaadbbaa197f0be1c80d30b", "committedDate": "2021-03-17 12:29:14 -0400", "message": "Merge pull request #2445 from sixlettervariables/issue-2597-protect-duplicate-name-hash"}, {"oid": "a79e2e08ae5167e26dc37999b749296e47e179b9", "committedDate": "2021-03-17 12:27:27 -0600", "message": "Finishing the Unit Market Dialog"}, {"oid": "9d4975c56dc9ea4c18da5c7b146cfa794453f668", "committedDate": "2021-03-17 12:53:48 -0600", "message": "Swapping to EmptyUnitMarket instead of null"}, {"oid": "795721747293b0a0a0b4a5e12334158e9da303da", "committedDate": "2021-03-17 14:00:33 -0600", "message": "Fixing merge conflicts"}, {"oid": "aac2ced366aa376eb9fa78ab230f38e43d0c8362", "committedDate": "2021-03-17 21:16:52 -0400", "message": "code review changes"}, {"oid": "67d86a55c23420a76995a1457504c22f1b9cc48a", "committedDate": "2021-03-18 10:00:41 -0600", "message": "338: Base Free Time Sort"}, {"oid": "b634beb8d18a3ebafa13e3332256da259e3ef1c1", "committedDate": "2021-03-18 14:35:10 -0600", "message": "Finishing up working on abstracting out the Unit Market"}, {"oid": "8627de7d060ea44d3e33d04c259f8ab05f5bba9f", "committedDate": "2021-03-21 20:29:53 -0400", "message": "merge from upstream"}, {"oid": "04087a9bc33d0e3547e9c2dc68db496eac62b82b", "committedDate": "2021-03-21 20:10:23 -0600", "message": "Fixing merge conflicts"}, {"oid": "093eaeb8fbe362bb2d525d661180c433576aab9b", "committedDate": "2021-03-24 00:26:51 -0400", "message": "merge from upstream"}, {"oid": "2a2559d3ab5da713e7b8864ab0de458849dce6b6", "committedDate": "2021-03-24 09:29:25 -0600", "message": "Swapping over to using a three tiered rank setup"}, {"oid": "1e4e1993ec9f2278c7f326d28bcae5a7bff9c4a0", "committedDate": "2021-03-24 12:05:23 -0600", "message": "Heavy simplification of rank profession code"}, {"oid": "a57000e9696c4bf593f3215fa36543b2d13ed5ea", "committedDate": "2021-03-24 12:30:48 -0600", "message": "2196: Swapping to a standardized display wrapper class for rank display"}, {"oid": "b903aa7de36203afa40ede49922eb9e422fdcf43", "committedDate": "2021-03-24 13:07:46 -0600", "message": "1483: Adding Rank System import/export"}, {"oid": "e5b1d3a3fc6d825d722e496ad49832555fa65754", "committedDate": "2021-03-25 14:08:49 -0400", "message": "units deployed to StratCon tracks are ineligible for repairs"}, {"oid": "e7042962dd815937b9d91c1335d85ccec3647bf7", "committedDate": "2021-03-30 13:26:17 -0400", "message": "Merge pull request #2371 from Windchild292/dev_Windchild_CamouflageIcon"}, {"oid": "091d87a31e8cf5d1061ccf76a256bf990a0a623b", "committedDate": "2021-03-30 11:27:53 -0600", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_2449"}, {"oid": "37144650aef43bd5f3a8a14257376f2d6fe133f8", "committedDate": "2021-03-30 16:21:13 -0400", "message": "merge from upstream"}, {"oid": "5854d37bf8fbd63f741b9601ef373a16253a9b32", "committedDate": "2021-04-04 09:12:14 -0600", "message": "Adding the ability to create a custom rank system"}, {"oid": "db96404f216df48ce5321de053ce56015837d2cd", "committedDate": "2021-04-04 09:43:32 -0600", "message": "Renaming the campaign rank system methods to properly handle rank system changes"}, {"oid": "ae6bdf14123e6ac4ba92f5884b58b533b6cad2d3", "committedDate": "2021-04-04 10:12:54 -0600", "message": "Moving personnel rank changes to their proper location within person"}, {"oid": "19f0f0ce5d069f8f6f4f481cda04cdee3e05402a", "committedDate": "2021-04-04 11:59:18 -0600", "message": "Working on rank import/export"}, {"oid": "a34e385bf50ab28870531fe663d288b7b98b2697", "committedDate": "2021-04-06 10:54:55 -0600", "message": "Fixing and improving validation issues"}, {"oid": "3f3d7b237f61dd118eeb39087eb7fe9de6be03a0", "committedDate": "2021-04-06 11:53:59 -0600", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_GenealogyIdReference"}, {"oid": "80202c7f73397f3bc36193b0f3e2fce444bc4070", "committedDate": "2021-04-06 16:04:51 -0600", "message": "Fixing merge conflicts"}, {"oid": "ab655fb9abe6d2b9be4e20eba7e4c74b4b8e5c22", "committedDate": "2021-04-06 16:20:53 -0600", "message": "Fixing merge conflicts"}, {"oid": "729ef155ccdbaca3a1f23f1e57309d3b973851da", "committedDate": "2021-04-06 16:38:48 -0600", "message": "Fixing merge conflicts"}, {"oid": "a4c29e55f023d3416dd5e3f18a9d2061ab841fa1", "committedDate": "2021-04-06 17:56:58 -0600", "message": "Fixing merge conflicts"}, {"oid": "47bf0ed7fa9b09a4d76b634d900cceac953e17ed", "committedDate": "2021-04-06 19:54:46 -0600", "message": "Fixing merge conflicts"}, {"oid": "c2d264c23786de4ea703861360c3bcb46e79c5ac", "committedDate": "2021-04-07 00:13:59 -0400", "message": "merge from upstream"}, {"oid": "a5d70a5c672e494c7ec8be19e05d642b0259c9c4", "committedDate": "2021-04-07 14:24:17 -0600", "message": "Implementing multiple new procreation options and moving it to work based on a supplied date"}, {"oid": "18e6e46b095f8bbb1c623c60fd3aa177b7fe8682", "committedDate": "2021-04-09 09:22:39 -0600", "message": "Fixing merge conflicts"}, {"oid": "ae01b6e6d0fa55b766f741fa6fb35f727fff344b", "committedDate": "2021-04-12 09:45:59 -0600", "message": "Creating ScenarioStatus Enum and updating how scenarios are gotten"}, {"oid": "133e5865e2ee8dd5900b26dfe5f9aa0459a1a04c", "committedDate": "2021-04-14 11:31:25 -0400", "message": "multiple bugs with ignoring scenarios; ground pirats on air maps"}, {"oid": "3d8916caadfbc4085e509724142f929fc9d7f1d5", "committedDate": "2021-04-16 17:31:08 -0400", "message": "add text resources; remove campaign scenarios after ignoring in stratcon UI"}, {"oid": "2e00ea9a5b972b07d7446e75a06d3d493ac69426", "committedDate": "2021-04-16 21:14:35 -0400", "message": "code review changes"}, {"oid": "becffdc94075004fa3890bb36799389a48105c33", "committedDate": "2021-04-16 23:10:50 -0400", "message": "code review changes; data fix; stop nagging once user hits 'no' once"}, {"oid": "d71320d4f7a9ae41189a6b4651979960cb9dcc0f", "committedDate": "2021-04-20 21:55:21 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_2449"}, {"oid": "39603f48e1d441dd892227bef76e398c95cd4852", "committedDate": "2021-04-20 21:59:13 -0400", "message": "Fixing merge conflicts"}, {"oid": "3f7306636c42a999caf904b8d513f267243def42", "committedDate": "2021-04-20 22:01:54 -0400", "message": "Fixing merge conflicts"}, {"oid": "1c0e5821f637a666ef7632b5d821db62d76f624d", "committedDate": "2021-04-20 22:20:35 -0400", "message": "Fixing merge conflicts"}, {"oid": "9b9545c3b2e6890b9bef97677c61bb175cd5cc89", "committedDate": "2021-04-21 00:39:22 -0400", "message": "allow extra time for maintenance"}, {"oid": "de34b46d2f53c172612ebe5aa1abffe16b249f06", "committedDate": "2021-04-23 10:23:26 -0400", "message": "Bugfixing"}, {"oid": "b82fd9901fd0447da0211522ffc97ccae5c708ac", "committedDate": "2021-04-23 11:36:57 -0400", "message": "Fixing merge conflicts"}, {"oid": "bb7b0c375b9a2fd6baeced3e5e94501eb2e636ed", "committedDate": "2021-04-23 13:03:53 -0400", "message": "Moving into selectors folders"}, {"oid": "1ba164a58381a4be88ec479fee5841c1b8cdcf99", "committedDate": "2021-04-23 13:15:11 -0400", "message": "Making initial faction changes for constructors and ordering"}, {"oid": "fc7a0539b85c7af6a166ed9d779e7b723307b883", "committedDate": "2021-04-23 15:57:04 -0400", "message": "Making RandomOriginOptions, which will allow its use in multiple locations"}, {"oid": "1741bea67582d0555d094cbdd0fa977eec707bcc", "committedDate": "2021-04-24 22:10:27 -0400", "message": "fix scenario date/force resets"}, {"oid": "cebc3d0c231e54580eb29e4756f549b702b9ace1", "committedDate": "2021-04-27 14:41:42 -0400", "message": "Merge pull request #2462 from Windchild292/dev_Windchild_2460"}, {"oid": "b0c3badc393ff67ccba2cbe34623ca496c576782", "committedDate": "2021-04-27 14:42:27 -0400", "message": "Merge pull request #2352 from Windchild292/dev_Windchild_PersonnelRoles"}, {"oid": "138d08410b585fae3ba4af354d18d2b15d5d36c8", "committedDate": "2021-04-27 14:48:43 -0400", "message": "Fixing merge conflicts"}, {"oid": "5f426e90c201a24d339c0322897809938b79db5a", "committedDate": "2021-04-27 15:08:01 -0400", "message": "Fixing merge conflicts"}, {"oid": "7b4772ec38db2aa8d657d0a22ed7868d0c4f6117", "committedDate": "2021-04-27 15:45:52 -0400", "message": "Fixing merge conflicts"}, {"oid": "ce0b3b652feb9205fb4ed8cc3ae599bb5da9a308", "committedDate": "2021-04-27 15:47:48 -0400", "message": "Fixing merge conflicts"}, {"oid": "f7d684241f42639eb35d60508c39dbb00b0d9dbc", "committedDate": "2021-04-28 10:56:49 -0400", "message": "Fixing merge conflicts"}, {"oid": "8dd83b6c46f8f2454ba4d4accfe8176c58e398d7", "committedDate": "2021-04-29 23:22:27 -0400", "message": "Fixing merge conflicts"}, {"oid": "87033ef81af06d5a8c2af9d93a9b9057e49f0fde", "committedDate": "2021-05-01 17:09:56 -0400", "message": "Fixing merge conflicts"}, {"oid": "815f8fa858fdbf707019709a5d51524b5e61472a", "committedDate": "2021-05-04 14:12:54 -0400", "message": "Dependent Flag Swapover"}, {"oid": "66f6a880e1b615fb97de9757be649fc18c10f049", "committedDate": "2021-05-04 19:52:08 -0400", "message": "Implementing auto-hiring pool on new day"}, {"oid": "bbcc984be566d1587a598efc974fb1dbb399868a", "committedDate": "2021-05-05 18:25:22 -0400", "message": "Fixing merge conflicts"}, {"oid": "741d61daa6ac3570f7a3c569ee6e6dc87a902441", "committedDate": "2021-05-08 20:32:38 -0400", "message": "Fixing merge conflicts"}, {"oid": "227d6642ef68511eb067588bdf263aa2ad88f421", "committedDate": "2021-05-09 10:13:42 -0400", "message": "Creating the backend implementation for random procreation modules"}, {"oid": "e0faed52760616365379933d91f9343f58c61cb4", "committedDate": "2021-05-09 14:30:58 -0400", "message": "Renaming the directory from random procreation to procreation"}, {"oid": "7943361f04c7c5cc1753852ddba3a77d8259ab57", "committedDate": "2021-05-11 09:52:44 -0400", "message": "2607: Starting to work on redoing the salvage calculations"}, {"oid": "0539aea6159ca7cfbbb77a035ffb6c51d590d29f", "committedDate": "2021-05-11 10:40:37 -0400", "message": "2607: Properly calculating and paying for payment overages"}, {"oid": "33d43f4fe9a41925e3cc417f5d782c19f097ad63", "committedDate": "2021-05-15 06:53:31 -0400", "message": "Merge pull request #2583 from Windchild292/dev_Windchild_DependentFlagSwapover"}, {"oid": "55da24b03b3ecbc71f7d6ab739e1820f1814fda1", "committedDate": "2021-05-17 13:46:12 -0400", "message": "Creating AtB Contract Type and AtB Morale Level enums"}, {"oid": "470df7bcd395e57ffe3f3e59660f0e468cdcfaf1", "committedDate": "2021-05-18 01:31:38 -0400", "message": "fix multiple issues generating fixed objective scenarios"}, {"oid": "ffcd06cfa996127e858ea60096b58286f97a8a8a", "committedDate": "2021-05-19 09:33:39 -0400", "message": "Implementing save code swapover"}, {"oid": "c03f4deaeb4d632a5e2e614ae5204da255eea805", "committedDate": "2021-05-22 22:01:49 -0400", "message": "Merge pull request #2608 from Windchild292/dev_Windchild_2607"}, {"oid": "f9cf763bd4ff9a8e017e54464ad20989c2e772d3", "committedDate": "2021-05-23 23:33:39 -0400", "message": "Fixing merge conflicts"}, {"oid": "b5b8facc5de91af84188412dc8d1ec3df00e3ae6", "committedDate": "2021-05-24 13:55:12 -0400", "message": "Fixing merge conflicts"}, {"oid": "1b33879affd0101e7870d5696137e354b636d342", "committedDate": "2021-05-24 13:57:36 -0400", "message": "Fixing merge conflicts"}, {"oid": "f4c2aadcbf8a9e3bc45db1e7227160e36f43d47a", "committedDate": "2021-05-24 14:00:22 -0400", "message": "Merge branch 'master' into dev_Windchild_CamouflageRework"}, {"oid": "fe024592b6ac70b9cf1a9cd546a54ebc8bb02363", "committedDate": "2021-05-24 17:16:21 -0400", "message": "2625: Properly Clear Tech Units on Person removal/retirement"}, {"oid": "530decc0b587e53087c8cacbe31aeba13dd82f41", "committedDate": "2021-05-29 11:32:44 -0400", "message": "Fixing merge conflicts"}, {"oid": "156500be4e08594aeaf3efa424938f295b2ed86e", "committedDate": "2021-05-29 16:04:26 -0400", "message": "Phase one of Campaign Preset rework"}, {"oid": "34d76d4e22674638bd3ce602a713238ff5c203b8", "committedDate": "2021-05-30 14:33:28 -0400", "message": "Phase Two: finishing internal work and starting on GUI implementation"}, {"oid": "12f96f2ab3335b805508c31bbbc08a9bcf5491d7", "committedDate": "2021-05-30 21:57:28 -0400", "message": "Fixing merge conflicts"}, {"oid": "b109f86e86e8aba9c5b4aa279919f2d6547979b9", "committedDate": "2021-05-31 10:38:11 -0400", "message": "Fixing merge conflicts"}, {"oid": "65a009b4cf6307795c815aacdb82feb8fba0a01d", "committedDate": "2021-05-31 17:00:21 -0400", "message": "Fixing merge conflicts"}, {"oid": "14d482cda0564e28b6c5ea95e20725e2200f51ff", "committedDate": "2021-05-31 17:57:20 -0400", "message": "Merge branch 'master' into maintenance_extra_time"}, {"oid": "00a30fe49ee531dda71cb88bacc2f56dbe0a5b9e", "committedDate": "2021-05-31 18:05:23 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_2654"}, {"oid": "fa54f8e9f392dc2f02cb5b1b5bc9e8c428a88e61", "committedDate": "2021-06-02 12:29:42 -0400", "message": "Creating a base ignorable nag dialog for MekHQ and implementing it in all current new day nags"}, {"oid": "2509a0841acae929e7340ae5fe4d01f7bf437d40", "committedDate": "2021-06-02 16:20:48 -0400", "message": "Fixing merge conflicts"}, {"oid": "6b416ee90791ecb016edf0ae5b5c0e16ebdd4760", "committedDate": "2021-06-09 16:05:55 -0400", "message": "Fixing merge conflicts"}, {"oid": "d36c47d7aaa8978e4d523b2031d299babd654e2a", "committedDate": "2021-06-09 16:08:35 -0400", "message": "Fixing merge conflicts"}, {"oid": "7fe956938b8b76f05f395b681f8bd5f4bd02d25a", "committedDate": "2021-06-09 21:27:13 -0400", "message": "Fixing merge conflicts"}, {"oid": "055b02a76318d18eed5ad27a93333893cf8b74db", "committedDate": "2021-06-09 22:30:38 -0400", "message": "Fixing merge conflicts"}, {"oid": "e8c2b13279e2b5d226f4de5b350e2d12ff468577", "committedDate": "2021-06-11 00:26:36 -0400", "message": "Fixing merge conflicts"}, {"oid": "d4b45a4c9543d0786feacc4344d364fee2997970", "committedDate": "2021-06-11 12:46:28 -0400", "message": "Fixing merge conflicts"}, {"oid": "2560bdda30482870c73884470b53cb579bcaa47a", "committedDate": "2021-06-14 13:25:17 -0400", "message": "Force icon implementation migration from outdated previous branch"}, {"oid": "6fd836ff4e8a233aa293e2a3fc08cd3316f64b66", "committedDate": "2021-06-14 14:23:04 -0400", "message": "Adding UnitIcon, GM Tools implementation, and baseline for export"}, {"oid": "eaf4453f2f1f40707d9594de5dd6aa83d594b776", "committedDate": "2021-06-14 18:04:32 -0400", "message": "Applying personal code review changes and starting unit icon code"}, {"oid": "e1a7f7166de5f36fa0c44b7151478c944e6a4b89", "committedDate": "2021-06-21 13:16:19 -0400", "message": "Apply overtime to the last chunk worked as well #2679"}, {"oid": "9c62597332ac0ba24004132e537ba0cf049741e3", "committedDate": "2021-07-01 12:35:33 -0400", "message": "Fixing merge conflicts"}, {"oid": "809c6366e1ce1dea3f4b2fa21841aab6639992a4", "committedDate": "2021-07-10 11:47:52 -0400", "message": "Finishing the portrait swapover"}, {"oid": "0ddba79849d418947ba1ce309a4c673ac78292d4", "committedDate": "2021-07-10 20:58:49 -0400", "message": "Bugfixing, phase 1"}, {"oid": "10a9609cabffc8f5e7068b6c0c33c0f65f796508", "committedDate": "2021-07-12 18:39:55 -0400", "message": "Fixing unit tests"}, {"oid": "06664ff8286a85fe165e5f92aaaf22326e692c90", "committedDate": "2021-07-15 10:22:09 -0400", "message": "Merge branch 'master' into dev_Windchild_476"}, {"oid": "e0e383e2453514ee7c9c7abc9214a2a1a869a068", "committedDate": "2021-07-15 10:34:25 -0400", "message": "Fixing merge conflicts"}, {"oid": "7211585d4a34159d5c80c9ea30fa44bc2746c1b4", "committedDate": "2021-07-17 20:03:19 -0400", "message": "Fixing a few potential divide by zero issues"}, {"oid": "a3eb7d3dfe3477e32117d175e717023f539795eb", "committedDate": "2021-07-17 20:11:58 -0400", "message": "Further cleanups from personal review"}, {"oid": "21a75e1c9ca5516bb7394f30fa2c0b4d9a68b9ad", "committedDate": "2021-07-17 20:27:51 -0400", "message": "Further cleanups, and adding an astech team size constant"}, {"oid": "35bffb052c1b608df03fb41f6548a3e9f847cca6", "committedDate": "2021-07-18 10:43:10 -0400", "message": "Fixing NPE warning and cleaning up the if statement"}, {"oid": "a7670828c4762e3852dbd248b348c2dd371b5018", "committedDate": "2021-07-18 12:12:40 -0400", "message": "Fixing possible confusion of local and field warnings"}, {"oid": "951b55f7a5fb6036e67897e709cd6a0dbbb45b39", "committedDate": "2021-07-18 12:33:08 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_Procreation"}, {"oid": "61cc2fd1669914bef276e018cb7562be422b1f7c", "committedDate": "2021-07-18 14:30:17 -0400", "message": "Removing Deprecated Usages: Logger swapover"}, {"oid": "542307adf490f10930d9470ff64879b4b7ee6b0a", "committedDate": "2021-07-20 10:11:31 -0400", "message": "Moving crew null check and fallback logic into Campaign::getShorthandedModForCrews"}, {"oid": "f6e661dba426e63388e9b57d224a7090006e3203", "committedDate": "2021-07-20 10:18:55 -0400", "message": "Merge pull request #2751 from Windchild292/dev_Windchild_AstechDivideByZero"}, {"oid": "f3bd90fefb0af89a7177be76f70aeed033a7b258", "committedDate": "2021-07-20 10:20:25 -0400", "message": "Fixing merge conflicts"}, {"oid": "424407a51980930adead83bbfa918bf2b0d8a441", "committedDate": "2021-07-20 21:09:32 -0400", "message": "Fixing merge conflicts"}, {"oid": "497f1345950b39b1eb1e2d1389b63a7fcd5eef14", "committedDate": "2021-07-20 21:26:53 -0400", "message": "Fixing merge conflicts"}, {"oid": "bc21146f53fc23bdfd1f5f4273f07b588b0904e2", "committedDate": "2021-07-24 10:15:39 -0400", "message": "Fixing merge conflicts"}, {"oid": "a5e9303ebeafcd74e0348b8b2f767c5f8e12c8cb", "committedDate": "2021-07-26 12:32:33 -0400", "message": "2558: Swapping removePerson to be object instead of id based"}, {"oid": "0a76a9693556237907de0f6e2a5a08f48dcfd3be", "committedDate": "2021-07-26 12:38:50 -0400", "message": "2558: Custom message for when dependants leave"}, {"oid": "1babc7de6f9de3b1f517061f1c249c3339f13e10", "committedDate": "2021-07-26 12:54:49 -0400", "message": "2558: Adding unique dependent add message"}, {"oid": "b214bdb7975aabd1cdc8d39cb9f1fdea3541b58d", "committedDate": "2021-07-26 15:13:02 -0400", "message": "Fixing merge conflicts"}, {"oid": "d86c1c8c70ae0bcc2a9d6dd09e7fe963745b5e37", "committedDate": "2021-07-26 22:20:42 -0400", "message": "Merge pull request #2478 from Windchild292/dev_Windchild_AbstractUnitMarket"}, {"oid": "d83ce12b4886460ba57e84afbf15b20e30fab693", "committedDate": "2021-07-28 15:48:34 -0400", "message": "Isolating RATs into the RAT Tab"}, {"oid": "3d303b442ab8d664c56fd8709d970f86c7eed83f", "committedDate": "2021-07-30 10:40:29 -0400", "message": "Loan code cleanup and refactoring"}, {"oid": "56910a666af8115ec4e364b98a16fc009c1a65b5", "committedDate": "2021-07-30 11:11:21 -0400", "message": "Fixing merge conflicts"}, {"oid": "ec7e4bc4aeed27a5b835b44d295642228bcc16c3", "committedDate": "2021-08-10 12:37:47 -0400", "message": "Transaction Type Enum"}, {"oid": "497976540984392426f984acd40477886555e06d", "committedDate": "2021-08-10 15:25:55 -0400", "message": "Fixing merge conflicts"}, {"oid": "1faa42c3d120f62fa60bebc946c56cae3ba293f8", "committedDate": "2021-08-10 15:47:16 -0400", "message": "Doing some personal review cleanup"}, {"oid": "be94a7ab35307e2b345d967cbd0163417ea9802d", "committedDate": "2021-08-12 21:28:51 -0400", "message": "bulletproofing for a couple of individual unit actions"}, {"oid": "01f8aa5c3d90cd2d8b553c5c8c73a336af524e8b", "committedDate": "2021-08-13 22:07:09 -0400", "message": "2798: Adding total XP earnings tracking"}, {"oid": "771c3107183e31fa9da9b2e417a6fc0d0b673a48", "committedDate": "2021-08-14 00:07:09 -0400", "message": "274: Moving Era definitions to a file"}, {"oid": "795d3aba4875a600dd0a6ec91a10cb7e90814c6c", "committedDate": "2021-08-18 12:48:20 -0400", "message": "Removing Person's Campaign save and switching to full pass-by-reference for Campaign"}, {"oid": "4e80bdad1f20ebfb53cfe559ade8975594f3d362", "committedDate": "2021-08-21 12:12:11 -0400", "message": "2754: Properly clearing Narc and iNarc Flags during scenario resolution"}, {"oid": "ed447da30212105694957e35687f1bfedd6b56b0", "committedDate": "2021-08-24 13:11:20 -0400", "message": "Merge pull request #2805 from Windchild292/dev_Windchild_274"}, {"oid": "7120d3b0aa69ebd282e855a4b2a47bda4697ba78", "committedDate": "2021-08-24 13:14:09 -0400", "message": "Merge pull request #2793 from Windchild292/dev_Windchild_TransactionType"}, {"oid": "9e7480b600f9290c00f5f082dd91201999d12f42", "committedDate": "2021-08-24 13:14:19 -0400", "message": "Merge pull request #2804 from Windchild292/dev_Windchild_2798"}, {"oid": "70aa4b94439c59d6e5de9d6191a3c0a02365e644", "committedDate": "2021-08-24 13:39:42 -0400", "message": "Fixing merge conflicts"}, {"oid": "0e72a8bc212f26b8d9b7bb789b0c1f84f1426c78", "committedDate": "2021-08-24 13:42:42 -0400", "message": "Fixing merge conflicts"}, {"oid": "3a01897bb20c8be27823164f09aca9af1aa3360d", "committedDate": "2021-08-24 13:53:59 -0400", "message": "Fixing merge conflicts"}, {"oid": "bacc8f3e733e0cd4cc0fa629ced5d3b5079abc76", "committedDate": "2021-08-24 17:23:41 -0400", "message": "Fixing merge conflicts"}, {"oid": "e273d7035001140a977ebe3299d17602ef52d498", "committedDate": "2021-08-28 17:37:23 -0400", "message": "Fixing merge conflicts"}, {"oid": "59fca0be576b219f25123793a2118255168d1c03", "committedDate": "2021-08-29 11:15:40 -0400", "message": "Modularized Marriage"}, {"oid": "6a48665a09b5cfd3b2309975077163fae687c39e", "committedDate": "2021-08-29 14:41:32 -0400", "message": "Adding creation dialog and bugfixing"}, {"oid": "0a89d7421946ba75d7d926af996b27e9e994a911", "committedDate": "2021-08-31 14:50:25 -0400", "message": "Fixing merge conflicts"}, {"oid": "0f4e17188d8360baf639cbc66dd29da85336be81", "committedDate": "2021-08-31 15:28:05 -0400", "message": "Applying changes from personal review"}, {"oid": "bd9dded105bfbfdf64e7b10e2059f2633326c113", "committedDate": "2021-08-31 15:39:04 -0400", "message": "Swapping to weighted double map"}, {"oid": "5eaf88579bd60bfee3c39a936a9d647a4eb1de4f", "committedDate": "2021-08-31 16:45:21 -0400", "message": "Reworking to use random origin options instead of the internally stored values"}, {"oid": "bbccfa2dcef0be4fbb07cd3af6cdbd15d7ced036", "committedDate": "2021-08-31 18:09:33 -0400", "message": "Missed two cases"}, {"oid": "7acc107b13f019250d4c17ee0b034a3aa263f56b", "committedDate": "2021-09-22 13:23:13 -0400", "message": "Removing MekHQ's version by swapping to a standardized suite version"}, {"oid": "f0a07bfbd15d93ff86dda49a32e0c489ca590a8c", "committedDate": "2021-09-22 17:45:34 -0400", "message": "Fixing merge conflicts"}, {"oid": "673baa71af916391d268ede436174881a85b7340", "committedDate": "2021-09-23 20:01:05 -0400", "message": "Adding the ability to automatically have the Operational Status indicator be determined on a new day"}, {"oid": "18f49cd8c6ba3721e84dce0b606a346b242cb49c", "committedDate": "2021-09-25 10:56:33 -0400", "message": "Moving training XP assignment to AtB new day processing"}, {"oid": "932423c6da7f04b29d61df88c014f5e432356eae", "committedDate": "2021-09-25 17:10:11 -0400", "message": "Standardizing and simplifying Campaign::getTargetForAcquisitioncalls"}, {"oid": "29c1cae15f03b025f7c6f4a4acdee0a86082eae8", "committedDate": "2021-09-25 17:12:00 -0400", "message": "2567: AtB Part Procurement uses proper campaign option"}, {"oid": "e1c6be34a128676429850de67af7a3c3e1d31c48", "committedDate": "2021-09-25 17:47:32 -0400", "message": "Fixing the active checks and removing the AtB casts"}, {"oid": "0527903721699cf7e73e7000ebc0db049c96529d", "committedDate": "2021-09-25 17:48:18 -0400", "message": "Removing testing logging"}, {"oid": "6dc414e21f3f3a8bf95c7059b83c0c34ced93e61", "committedDate": "2021-09-28 22:10:41 -0400", "message": "Merge pull request #2888 from Windchild292/dev_Windchild_2567"}, {"oid": "1065b3bc8de9084f48208d2ca865ce58ac8b3c41", "committedDate": "2021-09-28 22:29:59 -0400", "message": "Fixing merge conflicts"}, {"oid": "e55c3ca107c0d4a68d05b67ffa95825ee33af974", "committedDate": "2021-09-28 22:33:50 -0400", "message": "Fixing merge conflicts"}, {"oid": "6e5bfd3fe778c2db9847358b2bde358a61106707", "committedDate": "2021-09-28 22:38:51 -0400", "message": "Fixing merge conflicts"}, {"oid": "4fdc8e401f17fac7995037b1852f1ce2353c8e3f", "committedDate": "2021-09-28 22:48:35 -0400", "message": "Fixing merge conflicts"}, {"oid": "6f6fbddc710af1a588c433c779edd75f638a3c9d", "committedDate": "2021-10-01 10:01:00 -0400", "message": "Merge pull request #2880 from Windchild292/dev_Windchild_Version"}, {"oid": "901e499a75807e3ed64c36d0fcb8e1b024787c95", "committedDate": "2021-10-01 22:06:56 -0400", "message": "Fixing merge conflicts"}, {"oid": "b69522079e9a04b394864bbc4e43ff4c4e125cca", "committedDate": "2021-10-01 22:17:46 -0400", "message": "Fixing merge conflicts"}, {"oid": "84837c3610f8109aeb1985357178de229560de80", "committedDate": "2021-10-01 22:50:02 -0400", "message": "Fixing merge conflicts"}, {"oid": "4971437339838aa89b83785c6e9572074c95d245", "committedDate": "2021-10-02 23:21:37 -0400", "message": "Fixing merge conflicts"}, {"oid": "ed006b48eaf1c0580c2480f4f0000a3c1aed8361", "committedDate": "2021-10-10 00:10:05 -0400", "message": "Adding prisoner and clanner options for procreation"}, {"oid": "54e588d2cafddcab2f585c8ed5d6ee3c829d155f", "committedDate": "2021-10-10 01:00:00 -0400", "message": "Fixing merge conflicts"}, {"oid": "f211d8a677daa66c3a88f444de02a072ea5ab8a0", "committedDate": "2021-10-11 09:36:37 -0400", "message": "Fixing merge conflicts"}, {"oid": "3ee602c2e85defa1c3b05d08d609340d4b194883", "committedDate": "2021-10-11 09:37:52 -0400", "message": "Merge branch 'master' into dev_Windchild_2654"}, {"oid": "a30ac65fc45c76f1c1f6df0d70fa356aa41ef438", "committedDate": "2021-10-11 09:38:33 -0400", "message": "Merge branch 'master' into dev_Windchild_PersonnelRandomization"}, {"oid": "6f2f688a386d187426b7c92d4dd391c239d1ad70", "committedDate": "2021-10-11 09:43:54 -0400", "message": "Fixing merge conflicts"}, {"oid": "125e3093d92e248b4e50bc9131ff8fdeb35c6787", "committedDate": "2021-10-11 10:22:27 -0400", "message": "Fixing merge conflicts"}, {"oid": "f8e040a424e1e8d8f886b334ce6fe78c1c697e21", "committedDate": "2021-10-11 12:17:56 -0400", "message": "Standardizing canMarry and adding clanner/prisoner options"}, {"oid": "358b2e9bb76ee69f0aef232dc656af54a6b78e75", "committedDate": "2021-10-11 16:26:24 -0400", "message": "Creating a divorce module, with a daily percentage-based random divorce setup"}, {"oid": "8ecba07dd7693346338cbae98b207e87e1cfb844", "committedDate": "2021-10-14 20:08:46 -0400", "message": "Fixing merge conflicts"}, {"oid": "accf7255b1c83499aa1f79f5074b2bc44e3619f8", "committedDate": "2021-10-17 18:16:46 -0400", "message": "Fixing merge conflicts"}, {"oid": "4e4ae81eb8a7a923cdf8688c645023ce047c7d99", "committedDate": "2021-10-17 18:53:40 -0400", "message": "Fixing merge conflicts"}, {"oid": "08ec6ef40e59afa4cba88228bc29dba9745de098", "committedDate": "2021-10-18 15:52:01 -0400", "message": "Fixing merge conflicts"}, {"oid": "c67d7074f17378d88774a553e3fca273bc047705", "committedDate": "2021-10-18 15:52:40 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_PersonCampaign"}, {"oid": "1a7109d4439d3900ff897d0c9ba7091e88960ead", "committedDate": "2021-10-18 16:06:05 -0400", "message": "Fixing merge conflicts"}, {"oid": "2d589706bc9112203a6043adf8d7aed7d0f22301", "committedDate": "2021-10-18 16:07:21 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_ExpandedDeathStatus"}, {"oid": "84e2f57820e6fac4c9604e8fdf4c370849b21914", "committedDate": "2021-10-18 17:26:22 -0400", "message": "Fixing merge conflicts"}, {"oid": "033d776c732e66ad776357bee1afe597f5e77b20", "committedDate": "2021-10-30 15:59:59 -0400", "message": "Fixing merge conflicts"}, {"oid": "4e45f1a0a0bb1a3a900ecde01c8feab5a6e48329", "committedDate": "2021-11-01 17:31:14 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_AtBCompanyGeneration"}, {"oid": "258f3a3b0b352aa70b42b8c2034ebd6ab90d96ca", "committedDate": "2021-11-01 18:20:49 -0400", "message": "Fixing merge conflicts"}, {"oid": "7eea9a399d3d7400b1f2b94f6d772ad5416a0645", "committedDate": "2021-11-01 21:48:44 -0400", "message": "Fixing merge conflicts"}, {"oid": "3e4bca7cdb006005bd034f9621872250d0e96dbb", "committedDate": "2021-11-01 21:52:24 -0400", "message": "fixing merge conflicts"}, {"oid": "ab6c1c01bfb4498a16c3b9f69c18c4903900de83", "committedDate": "2021-11-01 22:00:44 -0400", "message": "Fixing merge conflicts"}, {"oid": "1b1b0f68f52f9d821ddc10f663a44fe6d72462cd", "committedDate": "2021-11-01 22:03:27 -0400", "message": "Fixing merge conflicts"}, {"oid": "f1ce41fa694124c762338f78fb45a139926db77c", "committedDate": "2021-11-01 22:20:22 -0400", "message": "Fixing merge conflicts"}, {"oid": "01163b1f4fae088ba39a2f1c1145d5653f71b9e8", "committedDate": "2021-11-01 22:22:46 -0400", "message": "Fixing merge conflicts"}, {"oid": "21600c478569436ab215402bbca4bbbeced841a8", "committedDate": "2021-11-03 20:59:54 -0400", "message": "Adding localization to all MekHQ resource maps"}, {"oid": "1a5ba2fa871c8629e951d371c2ee96cc29fa8f93", "committedDate": "2021-11-07 13:49:58 -0500", "message": "Fixing merge conflicts"}, {"oid": "a851f6c71e5a1f825a840c64be2bae6da2a77eaf", "committedDate": "2021-11-07 14:05:08 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_PersonnelRandomization"}, {"oid": "65eb27ddf74244265359db14e66c097eb2299df0", "committedDate": "2021-11-07 14:50:33 -0500", "message": "Fixing merge conflicts"}, {"oid": "1b57359b3037938ef8291d96de3449013c82b9a4", "committedDate": "2021-11-09 09:23:24 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_ForceIconRework"}, {"oid": "7e997be9838621bdc8bbecbcdbc908a7580060ed", "committedDate": "2021-11-12 21:17:13 -0500", "message": "Removing unused tech functionality"}, {"oid": "dbfb302ab8e895c2e37a41f10415f634d1039c4c", "committedDate": "2021-11-21 18:45:43 -0500", "message": "Expanding Finances newDay"}, {"oid": "b6ffe21c8b07b35f599a2f6bd11da05d7961af0d", "committedDate": "2021-11-23 10:10:34 -0500", "message": "Merge pull request #2028 from Windchild292/dev_Windchild_476"}, {"oid": "e51f331c5e7b430e3f560fee9ad58995fb944704", "committedDate": "2021-11-23 17:35:05 -0500", "message": "2962: AtB Campaigns Now Properly Load with Automatic or Tech Acquisition Skills"}, {"oid": "2f445541d15fd465279057131bf48ef28d9bd162", "committedDate": "2021-11-23 18:55:05 -0500", "message": "Fixing merge conflicts"}, {"oid": "c06560e49182859791bab98148ba76507f26612b", "committedDate": "2021-11-27 14:04:02 -0500", "message": "Merge pull request #2966 from Windchild292/dev_Windchild_2962"}, {"oid": "69f79e10f44976d90e36ca3acb5256b6dfc91548", "committedDate": "2021-11-27 18:49:28 -0500", "message": "Implementing the retirement and dependent stopgap options and option updates"}, {"oid": "135cb6d188296ed5db33602f9d65eacbedfb2fa3", "committedDate": "2021-11-27 22:07:45 -0500", "message": "Finishing dependent options and starting on retirement setup"}, {"oid": "a831b4695fd5ea8b1679db9068c85d9ac235f5e0", "committedDate": "2021-11-27 22:57:22 -0500", "message": "Starting to implement the new options"}, {"oid": "bfaed6eccd3257e67b05ad33dadd14cfd98ce560", "committedDate": "2021-12-02 18:05:59 -0500", "message": "Fixing merge conflicts"}, {"oid": "a31998dda25a2856241c10aba4f25a3e8975fc28", "committedDate": "2021-12-02 19:47:30 -0500", "message": "Fixing merge conflicts"}, {"oid": "8ae7fffc1b4afde219beaf122edf562b69a810d4", "committedDate": "2021-12-02 19:49:14 -0500", "message": "Fixing merge conflicts"}, {"oid": "c76c94e6cd4abe6e9f39bb57f5376dcfcf8c29ca", "committedDate": "2021-12-02 19:59:15 -0500", "message": "Fixing merge conflicts"}, {"oid": "8ad7114a3a34794b2d77e3d201f63d2c646a9361", "committedDate": "2021-12-04 14:45:10 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_RetirementDependentStopgaps"}, {"oid": "71c75c8296ecc0c857b75d51ff1c7984efa7e9aa", "committedDate": "2021-12-04 15:03:37 -0500", "message": "Finishing the internal code for the retirement and dependent stopgaps"}, {"oid": "4fb12af6ec7c26ac06d9a498016211a5e3889240", "committedDate": "2021-12-04 15:13:25 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_AssetTerms"}, {"oid": "ea8d42d1c280d499d207c0da43feb77a06b6dcba", "committedDate": "2021-12-04 16:10:22 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_MHQLocalization"}, {"oid": "97af694c5485ad1dbf5900228d3b5e6de405cb02", "committedDate": "2021-12-11 17:07:11 -0500", "message": "MekHQ Log4j 2 Implementation"}, {"oid": "122363fd9f8d850c11781b0ed50335433bcf418b", "committedDate": "2021-12-17 20:08:30 -0500", "message": "Fixing merge conflicts"}, {"oid": "b781d1a8406d5cfec346343463484ac519d1ee9a", "committedDate": "2021-12-20 13:20:34 -0500", "message": "Fixing merge conflicts"}, {"oid": "1bc3ac4e6576a7fa06103828a729d010f6a7b3ef", "committedDate": "2021-12-20 15:37:16 -0500", "message": "Actually print the stacktrace for individual exceptions"}, {"oid": "6e868f9400798d8cc8b61055b96de07531af1f34", "committedDate": "2021-12-20 16:21:24 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_RetirementDependentStopgaps"}, {"oid": "056f0d1e618651857b043280dbe226e80eb91d7a", "committedDate": "2021-12-20 16:27:18 -0500", "message": "Fixing merge conflicts"}, {"oid": "0e5e7675cc3b0606c97f5060a8fd53a69a90641e", "committedDate": "2021-12-20 16:31:40 -0500", "message": "Fixing merge conflicts"}, {"oid": "fb5e5a836a6100119706df72ee695325d77cf5af", "committedDate": "2021-12-20 16:36:02 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_PersonnelRandomization"}, {"oid": "30d7086d1389ed93b333b5eb614a4777498bd826", "committedDate": "2021-12-20 16:41:54 -0500", "message": "Fixing merge conflicts"}, {"oid": "c28b63e7005b99a3f80a9cb73b0255b8a2402db2", "committedDate": "2021-12-20 16:45:19 -0500", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_PersonCampaign"}, {"oid": "89a7c65022eabe2af8f5efaabaf9296aa79bde74", "committedDate": "2021-12-21 15:01:54 -0500", "message": "Fixing merge conflicts"}, {"oid": "23519608cf466cb86aef259568ba2aa8ddeb098a", "committedDate": "2021-12-21 16:00:33 -0500", "message": "Fixing merge conflicts"}, {"oid": "bbbe2057261145f9f51c2ac129b4cca3bcd2ccf6", "committedDate": "2021-12-21 16:04:48 -0500", "message": "Fixing merge conflicts"}, {"oid": "b65b9f1efdb52692da51596d934b6360533b2bf7", "committedDate": "2021-12-21 16:23:03 -0500", "message": "Fixing merge conflicts"}, {"oid": "a253bfba5d4bc811ccd0c6c17e659dff178fbbb0", "committedDate": "2021-12-21 16:30:49 -0500", "message": "Fixing merge conflicts"}, {"oid": "0caff4e79e691213a2621323b94dfadfa73c9060", "committedDate": "2021-12-22 08:16:56 -0500", "message": "Fixing merge conflicts"}, {"oid": "a44cee38dbe9808a000178e575eb90d60a401175", "committedDate": "2021-12-23 12:26:57 -0500", "message": "Merge pull request #3015 from MegaMek/dev_Windchild_3326"}, {"oid": "ea6a179e03d1519afc3236abe50978edc43fc3d8", "committedDate": "2021-12-23 12:32:38 -0500", "message": "Merge pull request #2812 from Windchild292/dev_Windchild_PersonCampaign"}, {"oid": "d88588cf01f272577d96e1ff2a27c7286def7db9", "committedDate": "2021-12-23 21:04:47 -0500", "message": "Fixing merge conflicts"}, {"oid": "94ca7dff3bd09ef2fbb82e5d3ce0a5dccab335a8", "committedDate": "2021-12-28 18:08:30 -0500", "message": "Fixing merge conflicts"}, {"oid": "5089ba272b3ca25ab52ca4fcc1bef3766377f2ec", "committedDate": "2022-01-08 13:22:56 -0500", "message": "Fixing merge conflicts"}, {"oid": "375a9524c6382f5214c980bf8ad8b07a22f75120", "committedDate": "2022-01-08 13:28:11 -0500", "message": "Fixing merge conflicts"}, {"oid": "0e0aa7780df25016999f813dc36110599ee1b380", "committedDate": "2022-01-08 13:40:54 -0500", "message": "Fixing merge conflicts, round 2"}, {"oid": "5cc8ac688c67e1e1817c0cbb4a78eaf7dd0a477b", "committedDate": "2022-01-08 14:03:23 -0500", "message": "Fixing merge conflicts"}, {"oid": "eb7c6c828694fb624746168dbb4c35b1289f6e11", "committedDate": "2022-01-08 17:22:10 -0500", "message": "Fixing merge conflicts"}, {"oid": "dcb18ce61944010cc634325d3f46ccaf907758be", "committedDate": "2022-01-08 18:01:56 -0500", "message": "Cleaning up a bit of person creation"}, {"oid": "4d86865e1498a1312a21b91323c33d18f33a8dc9", "committedDate": "2022-01-09 11:12:58 -0500", "message": "Adding missing nullable tag and fixing missing null handling for faction selector"}, {"oid": "6023dd377efcb7802f6c905de61231ec50fee675", "committedDate": "2022-01-09 11:48:57 -0500", "message": "Missed that a null faction is fine for planet generation"}, {"oid": "4bddfb6f0d3906ed96120594d84d4e476e42d971", "committedDate": "2022-01-19 17:09:56 -0500", "message": "Tearing out MekHQ/src/mekhq/MekHqXmlSerializable.java"}, {"oid": "cc823a078ddc1a8924d1e2c02e93375a6b27d327", "committedDate": "2022-01-19 19:19:33 -0500", "message": "Removing all serialVersionUID uses in MekHQ"}, {"oid": "c9ac45226f5852f8bb76af479c9d962105bbbed7", "committedDate": "2022-01-19 20:02:33 -0500", "message": "Mass spacing fixes"}, {"oid": "be1cfbd484c6adc1c8f66578c5bfe94b39047b3c", "committedDate": "2022-01-20 09:59:55 -0500", "message": "Applying changes from initial personal review"}, {"oid": "2c71e119c210a9c95690eae19a0cdab5beb69bd6", "committedDate": "2022-01-20 10:30:23 -0500", "message": "Updating everything using final PrintWriter so that they're up to date, so I have a nice way to track what's updated and what is not"}, {"oid": "bc2c2966614f17d153b03c3087b46c1a4b44b969", "committedDate": "2022-01-21 19:03:24 -0500", "message": "SuiteOptions: Naming standardization and finishing initial setup"}, {"oid": "f3b9f5b924748acfd1ad404aed3ae99e4382b885", "committedDate": "2022-01-24 12:24:25 -0500", "message": "Fixing merge conflicts"}, {"oid": "e8395d1d642870050d705d4fac2a0df255cea722", "committedDate": "2022-01-24 12:28:09 -0500", "message": "Fixing merge conflicts"}, {"oid": "d91ac31cb62f0842eb972ad045bdab45c9c3f814", "committedDate": "2022-01-25 17:42:20 -0500", "message": "PIND Migration"}, {"oid": "9fac7b8c6dfc3095299a8f2b2698099818ff5f0a", "committedDate": "2022-01-26 20:37:16 -0500", "message": "Fixing merge conflicts"}, {"oid": "68ef07dd4c65a1c3d546c2da6f01575f3f3c3ad6", "committedDate": "2022-01-26 20:47:30 -0500", "message": "Fixing merge conflicts"}, {"oid": "4d88d0c53f0069b883caece02ec49678aeeeef7e", "committedDate": "2022-02-01 14:20:52 -0500", "message": "Fixing merge conflicts"}, {"oid": "add1e0e345d4bfcfbff554d48b42166703dc9742", "committedDate": "2022-02-03 13:52:45 -0500", "message": "Fixing merge conflicts"}, {"oid": "01633b8cfb55eee9c3240bff79e0122fbc54386b", "committedDate": "2022-02-13 13:10:41 -0500", "message": "Fixing MHQ's Javadoc Build"}, {"oid": "adeb4ea20e6a8eeb365e6887e79ce6a4dd8b18dd", "committedDate": "2022-02-22 19:16:53 -0500", "message": "Initial code for creating standardized code utilities"}, {"oid": "483ec96cd157a857a1e7155be64dc5ef7c72346a", "committedDate": "2022-02-24 20:32:12 -0500", "message": "Migrating a bunch of MHQ utility code to MM"}, {"oid": "88ce57b5171b2d38c738446af4ab779e6d17ae7f", "committedDate": "2022-02-28 20:23:04 -0500", "message": "3146: Properly handling null force to null force reassignment messages"}, {"oid": "c94fc298803b71e6ac75eb935cabba921a8a6571", "committedDate": "2022-03-06 11:49:08 -0500", "message": "Fixing merge conflicts"}, {"oid": "d4b96fd69deddff97744565c43e2d56b8e31c53f", "committedDate": "2022-03-07 17:19:54 -0500", "message": "Fixing two accidentally kept negations for Random Dependents Removal"}, {"oid": "48f8d58a75de4c6a5c2868f65554dad4d3a14fd5", "committedDate": "2022-03-09 10:01:16 -0500", "message": "Merge pull request #3148 from Windchild292/dev_Windchild_3146"}, {"oid": "1c307bc93de3a536ba17dd566a9fd49bd0046c8e", "committedDate": "2022-03-21 18:22:40 -0400", "message": "Fixing a bunch of spacing readability issues"}, {"oid": "913c01672fe040a25b473e8142805d2ff4ebfa1b", "committedDate": "2022-03-22 18:24:32 -0400", "message": "Modernizing Lambdas to Method References"}, {"oid": "cc400b9fa7512b6b91ed8a8f434f365b442306a8", "committedDate": "2022-03-22 23:54:28 -0400", "message": "Modernize List::size to List::isEmpty and String::isEmpty to String::isBlank"}, {"oid": "4699f3e482938fb8c322f1daf1bc3b42d78c2a64", "committedDate": "2022-03-28 22:35:03 -0400", "message": "Fixing unused imports"}, {"oid": "494b38fcedcda31bef2e6f701152a47ce1b0e397", "committedDate": "2022-04-11 00:16:20 -0400", "message": "Issue #3196: Fixing Remove Unit NPE"}, {"oid": "4e863ffcf0393e88ebb25b76dd314d994b2cfad5", "committedDate": "2022-04-12 17:18:21 -0400", "message": "Death Module: Initial Commit For the New Setup"}, {"oid": "2e8d0c32fa5c09c862fb6c5625a58d206b70ba34", "committedDate": "2022-04-12 18:20:50 -0400", "message": "Cleaning up and modernizing the death code"}, {"oid": "be00026349d450b7f2fb262f11d161ca249c5ab5", "committedDate": "2022-04-17 21:14:46 -0400", "message": "Standardizing Personnel Flags into their own setup instead of multiple previous setups"}, {"oid": "114c9ef6cbeb045e3cc88716964526ee70372408", "committedDate": "2022-05-04 10:10:43 -0400", "message": "3260: Clear Makeshift Clubs Upon Return To MekHQ"}, {"oid": "e0f4dd9d34946716a517c0b42401b33740c51f30", "committedDate": "2022-05-06 19:58:04 -0400", "message": "Renaming the civilian role check to isCivilian, and adding missing logging for a civilian error"}, {"oid": "5b35da02f167e0d577e779b21dfd3cbd2110f92b", "committedDate": "2022-05-06 22:48:48 -0400", "message": "Merge pull request #3266 from Windchild292/dev_Windchild_RetirementDependentOrNoneLogging"}, {"oid": "c6db6046da0de4e7d40d7ac930a453d2805f6a92", "committedDate": "2022-05-10 18:34:57 -0400", "message": "Merge branch 'MegaMek:master' into dev_Windchild_AssetTerms"}, {"oid": "6b720cfa833458c385546a054b762d2745c37ce1", "committedDate": "2022-05-14 10:11:35 -0400", "message": "Fixing method name"}, {"oid": "72a352ee60bdec3467fa07665ed9753cc399b6f9", "committedDate": "2022-05-15 12:41:06 -0400", "message": "Swapping MekHQ to JUnit 5"}, {"oid": "0a2050177f55c5540d898835cfd48e4f976bb4cb", "committedDate": "2022-05-25 16:54:44 -0400", "message": "Modernizing finances XML read and write"}, {"oid": "8b34d18aa825a1416df7b1a8ecb2bb898cea1026", "committedDate": "2022-05-25 18:27:34 -0400", "message": "Renaming MekHqXmlXmlUtil to utilities/MHQXMLUtility"}, {"oid": "3c19a5aba0df7a2035e7a81e61a8b5543cb13a9c", "committedDate": "2022-05-25 18:36:42 -0400", "message": "Fixing merge conflicts"}, {"oid": "4a84ac8700a2d5bf7624dd25d4c77cff34478500", "committedDate": "2022-05-25 23:32:29 -0400", "message": "Merge branch 'master' into dev_Windchild_CurrentLocationXML"}, {"oid": "32aaaac33b8e53a355c373879ee4de9f91747c39", "committedDate": "2022-05-26 07:16:40 -0400", "message": "Merge branch 'master' into dev_Windchild_PersonFlags"}, {"oid": "9472637ad3cb3c27cba2c318c5ccdf022ca56d86", "committedDate": "2022-05-26 08:10:57 -0400", "message": "Fixing merge conflicts"}, {"oid": "f35709d1278c76d1ea7c10485071e0097b1aebf0", "committedDate": "2022-05-26 08:39:19 -0400", "message": "Switching to a single retirement report"}, {"oid": "b40d7b0e6bd9003de8df60cc732b5e195741d8aa", "committedDate": "2022-05-30 16:37:32 -0400", "message": "Merge pull request #3234 from Windchild292/dev_Windchild_PersonFlags"}, {"oid": "f7e43611ee653404079cc2fdced92c083c35362f", "committedDate": "2022-06-01 13:26:16 -0400", "message": "More swaps to using getActualValue"}, {"oid": "76223b1f01db0e020c9069b9c361d7af9f174e6a", "committedDate": "2022-06-01 17:49:36 -0400", "message": "Merge remote-tracking branch 'origin/master' into dev_Windchild_PartPriceApplications"}, {"oid": "e7755fbeddc7d00cc126c3281f4be93685eb83fa", "committedDate": "2022-06-08 20:05:45 -0400", "message": "Ignore End Date for Scenario Assignment to Active Contracts"}, {"oid": "c17408bc1409591bdb76664788c6ad4f55a5d813", "committedDate": "2022-06-18 17:51:05 -0400", "message": "Campaign::getPerson : Adding Nullable Annotation"}, {"oid": "f2abd2addef945880eefcf2a11ccfb5eec610ea3", "committedDate": "2022-06-18 17:59:08 -0400", "message": "Renaming clearGenealogy to clearGenealogyLinks (as that's what it does), and more test progress"}, {"oid": "39ac9b544233876ab9e4a6f914abaf549c76aded", "committedDate": "2022-06-20 22:59:32 -0400", "message": "Bunch of enum cleanups"}, {"oid": "a576a51fb82bbc625198e50a04894cd7749bed1c", "committedDate": "2022-06-21 16:25:02 -0400", "message": "Lots more tests, largely simple ones"}, {"oid": "0f60e6bba5ebdf538b335609e5bfd7817f614393", "committedDate": "2022-06-23 16:17:56 -0400", "message": "3372: Fixing Campaign Loan Report Issues"}, {"oid": "7441a156d93c5a7fb5dab7f9a38a5f87f6321f14", "committedDate": "2022-06-24 22:32:50 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_GenealogyTest"}, {"oid": "f5bb76bdee8f7d7aba18dd83f2d903036ea1f68b", "committedDate": "2022-06-27 13:25:57 -0400", "message": "Merge pull request #3378 from Windchild292/dev_Windchild_3372"}, {"oid": "0948c47088632642d946b7a5eec4eb595a21ac76", "committedDate": "2022-06-29 20:04:53 -0400", "message": "Merge remote-tracking branch 'upstream/master' into dev_Windchild_GenealogyTest"}, {"oid": "505318be000041c18ae226d4e1521dc527fc7133", "committedDate": "2022-07-14 17:41:42 -0400", "message": "Adding market enum testing"}, {"oid": "8d3060de0fe1375a8186d41be98a059652a81bed", "committedDate": "2022-07-31 00:15:10 -0400", "message": "add remove stratcon scenario option"}, {"oid": "9d2ebd8a76bc41afdf298da710ad80e1e4b80c0a", "committedDate": "2022-08-02 19:49:23 -0400", "message": "Checking this"}, {"oid": "803755f3d14a7ba3e66bb1e6364d6c4220bac841", "committedDate": "2022-08-03 20:51:52 -0400", "message": "Properly disabling the random tests"}, {"oid": "f79a61c91b06b467d1bbed4dfeaa36f97fd755e3", "committedDate": "2022-08-04 11:12:44 -0400", "message": "Using correct collector"}, {"oid": "4b3952367635a7620bddb96a9e81a7f1a97a2219", "committedDate": "2022-11-15 14:07:43 -0500", "message": "Removing duplicated name generation info from the campaign file"}, {"oid": "5213209bddb612458226cdfa7561a7220f8b3b67", "committedDate": "2022-11-15 15:54:47 -0500", "message": "Fixing deprecated XML utility uses and fixing indentation issues for parts"}, {"oid": "53e7b27c2173373019055e800950173ed7eb20df", "committedDate": "2022-11-15 19:05:53 -0500", "message": "Company Generator: Faction Options"}, {"oid": "230c025b083606834270681ce668a836c76dfc1b", "committedDate": "2022-11-22 16:25:51 -0500", "message": "3489: Adding Small Craft and DropShip Transport Support"}, {"oid": "b5349ccb7e3e9c0345d6685bb9a76a53afed8bdc", "committedDate": "2022-11-26 08:40:31 -0500", "message": "Merge pull request #3510 from MegaMek/dev_Windchild_3489"}, {"oid": "b3f06f70d94e83ed6fad6368cbe5df5d35c20296", "committedDate": "2022-11-26 11:38:42 -0500", "message": "Finishing adding the new option as a selection"}, {"oid": "1cb49fa503593c75f3bee4ebc6cf2574faec13de", "committedDate": "2022-11-26 11:49:33 -0500", "message": "Merge branch 'MegaMek:master' into dev_Windchild_CompanyGeneratorFactionGeneration"}, {"oid": "b47a12937f6b979925f82cb31bb6f2f33cf789e5", "committedDate": "2022-12-05 15:34:26 -0500", "message": "Scenarios are now Scenarios, not Missions"}, {"oid": "b57de2f09b47ffa8da9ab0bd7bba356d1e2e235c", "committedDate": "2022-12-08 23:00:17 -0500", "message": "Merge pull request #3501 from Windchild292/dev_Windchild_DeprecatedXML"}, {"oid": "ade20da3d68431198324cbad4bd7cfcc2fd1ef66", "committedDate": "2022-12-11 23:37:05 -0500", "message": "Merge pull request #3520 from Windchild292/dev_Windchild_ScenariosAreScenarios"}, {"oid": "a6d88033b71b9291e4774a5cbc3e8f577287a523", "committedDate": "2022-12-16 22:33:19 -0500", "message": "Tearing out EncodeControl"}, {"oid": "cec1df762e06d6e3e6c4c437c0d0a25892f44a7d", "committedDate": "2022-12-29 13:15:59 -0500", "message": "Fixing Option Naming Typos"}, {"oid": "e3e1ce62490858d93d695b7e7f8bf17dca068936", "committedDate": "2022-12-29 14:30:54 -0500", "message": "Standardize option naming"}, {"oid": "d385d0bc8fd91a75c631f546272abbff8e07311a", "committedDate": "2022-12-30 13:05:34 -0500", "message": "SkillLevel: Reducing SkillType::getExperienceLevelName calls"}, {"oid": "332b06c4b29e7f809e9cf0cab16a062f65544391", "committedDate": "2023-01-08 20:33:20 -0500", "message": "Yearly Retirement Nag Now Follows Campaign Options"}, {"oid": "62afc895d75aece8a3079267b20eb9e8c3de5cfc", "committedDate": "2023-01-14 16:34:36 -0500", "message": "3558: RATs are Used Outside of AtB"}, {"oid": "0e39c3c4517d5cd46e99546d8e3b3a1cea7cb30b", "committedDate": "2023-01-17 20:12:29 -0500", "message": "Merge branch 'master' into dev_Windchild_CampaignOptionsCleanup"}, {"oid": "da71474de7674e9b213472ce61b254a744c6ae5a", "committedDate": "2023-01-17 20:12:53 -0500", "message": "Merge branch 'MegaMek:master' into dev_Windchild_IsolatedSkillLevelEnumSwapovers"}, {"oid": "a328a1e42771f0c7052a7c9c1b2583134a8534f4", "committedDate": "2023-01-25 22:45:44 -0500", "message": "Campaign Ops Unit Rating: Properly Calculate Personnel Numbers"}, {"oid": "5ad55c0aa2dd0422f1e05d2704860f7674936984", "committedDate": "2023-01-25 23:11:45 -0500", "message": "Applying changes from testing and further rule reading"}, {"oid": "8fc36fbd275ffccf0ed91df60b637a5cc3135a86", "committedDate": "2023-01-29 18:24:48 -0500", "message": "Phenotype Enum: Migrating Uses to Simplification Methods"}, {"oid": "a462c5436ab5bec1a54c2f652f232fdff88f7a42", "committedDate": "2023-01-29 19:28:49 -0500", "message": "Tearing out unused code and swapping to using a map"}, {"oid": "542356e26d4b14d760fa69f33f627ed2b692908b", "committedDate": "2023-02-06 21:17:17 -0500", "message": "Merge pull request #3589 from Windchild292/dev_Windchild_PhenotypeSimplificationMethods"}, {"oid": "2757b555a5a0aa6fdf73322d58173bbee7d22ba5", "committedDate": "2023-02-06 21:25:38 -0500", "message": "Merge pull request #3590 from Windchild292/dev_Windchild_UnusedSPACleanup"}, {"oid": "6784f22a192b7c650bd5be0354bc6946bfec896f", "committedDate": "2023-02-06 21:41:30 -0500", "message": "Merge pull request #3557 from Windchild292/dev_Windchild_YearlyRetirementNag"}, {"oid": "724a8333d072d631c1072fd7ccf2707efe6e2b40", "committedDate": "2023-02-07 20:56:16 -0500", "message": "Fixing merge conflicts"}, {"oid": "e0f16b480db19ce9d36290caa03be8f6be77cace", "committedDate": "2023-02-07 21:43:07 -0500", "message": "Fixing merge conflicts"}, {"oid": "8996781abfef1f08293a06ef53e3af92812a9b5d", "committedDate": "2023-02-07 22:53:45 -0500", "message": "Standardize Mass Repair Mass Salvage naming to MRMS"}, {"oid": "1ccab8e5b040389be54c4730103354fbc0f06406", "committedDate": "2023-02-18 19:25:18 +0000", "message": "3318: Add manual personnel payments that generate Finance debit"}, {"oid": "86649c7c93250458658d765a7e2007134c385c74", "committedDate": "2023-02-25 20:07:13 -0500", "message": "Some related code cleanup"}]}, {"oid": "cb64714e6e2b7d03de487c72eb18c3c09948b6c6", "url": "https://github.com/MegaMek/mekhq/commit/cb64714e6e2b7d03de487c72eb18c3c09948b6c6", "message": "Apply suggestions from code review\n\nCo-authored-by: Justin Bowen <39067288+Windchild292@users.noreply.github.com>", "committedDate": "2020-10-07T03:24:27Z", "type": "commit"}, {"oid": "6017ea3690ecd5a4a3fa881bc208359bfe7d2d61", "url": "https://github.com/MegaMek/mekhq/commit/6017ea3690ecd5a4a3fa881bc208359bfe7d2d61", "message": "Address PR feedback", "committedDate": "2020-10-07T18:17:15Z", "type": "commit"}]}