{"pr_number": 5605, "pr_title": "feat: Tracker importer validation", "pr_author": "netroms", "pr_createdAt": "2020-05-18T09:16:45Z", "pr_url": "https://github.com/dhis2/dhis2-core/pull/5605", "merge_commit": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "timeline": [{"oid": "21c84c0db3d33dd6263e06d6934bbdff2d29351f", "url": "https://github.com/dhis2/dhis2-core/commit/21c84c0db3d33dd6263e06d6934bbdff2d29351f", "message": "* Merge of all tracker import validation branches to new main branch\n\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>", "committedDate": "2020-05-18T09:12:33Z", "type": "commit"}, {"oid": "5e0d4b9de9da59f687c4f2cc67fbd10a85b6dc1d", "url": "https://github.com/dhis2/dhis2-core/commit/5e0d4b9de9da59f687c4f2cc67fbd10a85b6dc1d", "message": "Merge branch 'master' of github.com:dhis2/dhis2-core into DHIS2-8879", "committedDate": "2020-05-19T06:00:19Z", "type": "commit"}, {"oid": "b986f1dc55917586b477be5e3b6b8b657a50e0d9", "url": "https://github.com/dhis2/dhis2-core/commit/b986f1dc55917586b477be5e3b6b8b657a50e0d9", "message": "Merge branch 'master' of github.com:dhis2/dhis2-core into DHIS2-8879", "committedDate": "2020-05-21T04:55:42Z", "type": "commit"}, {"oid": "22a7eda7d313950a75783605244dcf56c3e35cc5", "url": "https://github.com/dhis2/dhis2-core/commit/22a7eda7d313950a75783605244dcf56c3e35cc5", "message": "* UncompleteEventAuth test\n\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>", "committedDate": "2020-05-21T06:38:30Z", "type": "commit"}, {"oid": "e50ab71d87ce2218b6dd55eed679fcfa2bec972e", "url": "https://github.com/dhis2/dhis2-core/commit/e50ab71d87ce2218b6dd55eed679fcfa2bec972e", "message": "* merge\n\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>", "committedDate": "2020-05-22T07:27:46Z", "type": "commit"}, {"oid": "2b68e1f95dff93021876602cd8e730721ca884b8", "url": "https://github.com/dhis2/dhis2-core/commit/2b68e1f95dff93021876602cd8e730721ca884b8", "message": "* disable the programrule and eventrule on bundle create\n\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>", "committedDate": "2020-05-22T10:01:24Z", "type": "commit"}, {"oid": "117c496f747dc21c9820e3564adecab2b56ec035", "url": "https://github.com/dhis2/dhis2-core/commit/117c496f747dc21c9820e3564adecab2b56ec035", "message": "* add more enrollment attribute tests\n\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>", "committedDate": "2020-05-23T15:55:37Z", "type": "commit"}, {"oid": "684a65237d259949c26df7e987fbd94382f2f9da", "url": "https://github.com/dhis2/dhis2-core/commit/684a65237d259949c26df7e987fbd94382f2f9da", "message": "* add more enrollment geo tests\n\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>", "committedDate": "2020-05-23T17:11:26Z", "type": "commit"}, {"oid": "ab6cd262851f8e7eedcf529900f5d799ff78af20", "url": "https://github.com/dhis2/dhis2-core/commit/ab6cd262851f8e7eedcf529900f5d799ff78af20", "message": "Merge branch 'master' of github.com:dhis2/dhis2-core into DHIS2-8879", "committedDate": "2020-05-25T06:34:37Z", "type": "commit"}, {"oid": "a5f6d361402efd03ab461bcffa6bcc50be96c520", "url": "https://github.com/dhis2/dhis2-core/commit/a5f6d361402efd03ab461bcffa6bcc50be96c520", "message": "* add tests for enrollment exist checks\n\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>", "committedDate": "2020-05-25T09:32:44Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg0OTQ2Mg==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r429849462", "body": "It's a very common scenario to have a mix of new and updates when sending to `/api/tracker` so this mode allows it to internally sort (if the trackedEntityInstance already exists) into updates and creates. We default to this on all our data endpoints.", "bodyText": "It's a very common scenario to have a mix of new and updates when sending to /api/tracker so this mode allows it to internally sort (if the trackedEntityInstance already exists) into updates and creates. We default to this on all our data endpoints.", "bodyHTML": "<p dir=\"auto\">It's a very common scenario to have a mix of new and updates when sending to <code>/api/tracker</code> so this mode allows it to internally sort (if the trackedEntityInstance already exists) into updates and creates. We default to this on all our data endpoints.</p>", "author": "mortenoh", "createdAt": "2020-05-25T10:01:12Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java", "diffHunk": "@@ -170,8 +170,12 @@ public TrackerImportParams getParamsFromMap( Map<String, List<String>> parameter\n             ValidationMode.FULL ) );\n         params.setImportMode( getEnumWithDefault( TrackerBundleMode.class, parameters, \"importMode\", TrackerBundleMode.COMMIT ) );\n         params.setIdentifiers( getTrackerIdentifiers( parameters ) );\n+\n+        // TODO: Why is default CREATE_AND_UPDATE here and CREATE on TrackerImportStrategy?", "originalCommit": "a5f6d361402efd03ab461bcffa6bcc50be96c520", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3e77f4b8e597ba000a126e053ebb3af75e7a664f", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\nindex 71c40309e1..15034db3f6 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\n", "chunk": "@@ -170,12 +171,8 @@ public class DefaultTrackerImportService\n             ValidationMode.FULL ) );\n         params.setImportMode( getEnumWithDefault( TrackerBundleMode.class, parameters, \"importMode\", TrackerBundleMode.COMMIT ) );\n         params.setIdentifiers( getTrackerIdentifiers( parameters ) );\n-\n-        // TODO: Why is default CREATE_AND_UPDATE here and CREATE on TrackerImportStrategy?\n         params.setImportStrategy( getEnumWithDefault( TrackerImportStrategy.class, parameters, \"importStrategy\",\n             TrackerImportStrategy.CREATE_AND_UPDATE ) );\n-\n-\n         params.setAtomicMode( getEnumWithDefault( AtomicMode.class, parameters, \"atomicMode\", AtomicMode.ALL ) );\n         params.setFlushMode( getEnumWithDefault( FlushMode.class, parameters, \"flushMode\", FlushMode.AUTO ) );\n \n", "next_change": {"commit": "6ccecbd0f6da424e90174d23f11e6a6498621100", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\nindex 15034db3f6..55ed3db135 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\n", "chunk": "@@ -169,7 +168,8 @@ public class DefaultTrackerImportService\n         params.setUser( getUser( params.getUser(), params.getUserId() ) );\n         params.setValidationMode( getEnumWithDefault( ValidationMode.class, parameters, \"validationMode\",\n             ValidationMode.FULL ) );\n-        params.setImportMode( getEnumWithDefault( TrackerBundleMode.class, parameters, \"importMode\", TrackerBundleMode.COMMIT ) );\n+        params.setImportMode(\n+            getEnumWithDefault( TrackerBundleMode.class, parameters, \"importMode\", TrackerBundleMode.COMMIT ) );\n         params.setIdentifiers( getTrackerIdentifiers( parameters ) );\n         params.setImportStrategy( getEnumWithDefault( TrackerImportStrategy.class, parameters, \"importStrategy\",\n             TrackerImportStrategy.CREATE_AND_UPDATE ) );\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\nindex 71c40309e1..91ee2ca9b1 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\n", "chunk": "@@ -168,14 +191,11 @@ public class DefaultTrackerImportService\n         params.setUser( getUser( params.getUser(), params.getUserId() ) );\n         params.setValidationMode( getEnumWithDefault( ValidationMode.class, parameters, \"validationMode\",\n             ValidationMode.FULL ) );\n-        params.setImportMode( getEnumWithDefault( TrackerBundleMode.class, parameters, \"importMode\", TrackerBundleMode.COMMIT ) );\n+        params.setImportMode(\n+            getEnumWithDefault( TrackerBundleMode.class, parameters, \"importMode\", TrackerBundleMode.COMMIT ) );\n         params.setIdentifiers( getTrackerIdentifiers( parameters ) );\n-\n-        // TODO: Why is default CREATE_AND_UPDATE here and CREATE on TrackerImportStrategy?\n         params.setImportStrategy( getEnumWithDefault( TrackerImportStrategy.class, parameters, \"importStrategy\",\n             TrackerImportStrategy.CREATE_AND_UPDATE ) );\n-\n-\n         params.setAtomicMode( getEnumWithDefault( AtomicMode.class, parameters, \"atomicMode\", AtomicMode.ALL ) );\n         params.setFlushMode( getEnumWithDefault( FlushMode.class, parameters, \"flushMode\", FlushMode.AUTO ) );\n \n", "next_change": {"commit": "20ae7d1ed19072116ee92e47a760e281039159ce", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\nindex 91ee2ca9b1..11421935c8 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\n", "chunk": "@@ -202,6 +236,42 @@ public class DefaultTrackerImportService\n         return params;\n     }\n \n+    @Override\n+    public TrackerImportReport buildImportReport( TrackerImportReport importReport, TrackerBundleReportMode reportMode )\n+    {\n+\n+        TrackerImportReport filteredTrackerImportReport = new TrackerImportReport();\n+        TrackerValidationReport trackerValidationReport = new TrackerValidationReport();\n+        filteredTrackerImportReport.setTrackerValidationReport( trackerValidationReport );\n+        filteredTrackerImportReport.setTimings( importReport.getTimings() );\n+        filteredTrackerImportReport.getTrackerValidationReport()\n+            .setErrorReports( importReport.getTrackerValidationReport().getErrorReports() );\n+        filteredTrackerImportReport.getTrackerValidationReport()\n+            .setWarningReports( importReport.getTrackerValidationReport().getWarningReports() );\n+        filteredTrackerImportReport.setBundleReport( importReport.getBundleReport() );\n+\n+        switch ( reportMode )\n+        {\n+        case BASIC:\n+            filteredTrackerImportReport.setTrackerValidationReport( null );\n+            filteredTrackerImportReport.setTimings( null );\n+            break;\n+        case ERRORS:\n+            filteredTrackerImportReport.getTrackerValidationReport().setPerformanceReport( null );\n+            filteredTrackerImportReport.getTrackerValidationReport().setWarningReports( null );\n+            filteredTrackerImportReport.setTimings( null );\n+            break;\n+        case WARNINGS:\n+            filteredTrackerImportReport.getTrackerValidationReport().setPerformanceReport( null );\n+            filteredTrackerImportReport.setTimings( null );\n+            break;\n+        case FULL:\n+            break;\n+        }\n+\n+        return filteredTrackerImportReport;\n+    }\n+\n     //-----------------------------------------------------------------------------------\n     // Utility Methods\n     //-----------------------------------------------------------------------------------\n", "next_change": {"commit": "1f0559c94f01b1497116fe5ba2e19f28f072a879", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\nindex 11421935c8..090ea6f15c 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\n", "chunk": "@@ -239,37 +243,7 @@ public class DefaultTrackerImportService\n     @Override\n     public TrackerImportReport buildImportReport( TrackerImportReport importReport, TrackerBundleReportMode reportMode )\n     {\n-\n-        TrackerImportReport filteredTrackerImportReport = new TrackerImportReport();\n-        TrackerValidationReport trackerValidationReport = new TrackerValidationReport();\n-        filteredTrackerImportReport.setTrackerValidationReport( trackerValidationReport );\n-        filteredTrackerImportReport.setTimings( importReport.getTimings() );\n-        filteredTrackerImportReport.getTrackerValidationReport()\n-            .setErrorReports( importReport.getTrackerValidationReport().getErrorReports() );\n-        filteredTrackerImportReport.getTrackerValidationReport()\n-            .setWarningReports( importReport.getTrackerValidationReport().getWarningReports() );\n-        filteredTrackerImportReport.setBundleReport( importReport.getBundleReport() );\n-\n-        switch ( reportMode )\n-        {\n-        case BASIC:\n-            filteredTrackerImportReport.setTrackerValidationReport( null );\n-            filteredTrackerImportReport.setTimings( null );\n-            break;\n-        case ERRORS:\n-            filteredTrackerImportReport.getTrackerValidationReport().setPerformanceReport( null );\n-            filteredTrackerImportReport.getTrackerValidationReport().setWarningReports( null );\n-            filteredTrackerImportReport.setTimings( null );\n-            break;\n-        case WARNINGS:\n-            filteredTrackerImportReport.getTrackerValidationReport().setPerformanceReport( null );\n-            filteredTrackerImportReport.setTimings( null );\n-            break;\n-        case FULL:\n-            break;\n-        }\n-\n-        return filteredTrackerImportReport;\n+        return importReport.copy( reportMode );\n     }\n \n     //-----------------------------------------------------------------------------------\n", "next_change": {"commit": "913d4ba468bf66783e901c4d43bd355d13cb16fa", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\nindex 090ea6f15c..3e1f1e0472 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\n", "chunk": "@@ -219,114 +227,15 @@ public class DefaultTrackerImportService\n         return validationReport;\n     }\n \n-    @Override\n-    public TrackerImportParams getParamsFromMap( Map<String, List<String>> parameters )\n-    {\n-        TrackerImportParams params = new TrackerImportParams();\n-        if ( params.getUser() == null )\n-        {\n-            params.setUser( trackerUserService.getUser( params.getUserId() ) );\n-        }\n-        params.setValidationMode( getEnumWithDefault( ValidationMode.class, parameters, \"validationMode\",\n-            ValidationMode.FULL ) );\n-        params.setImportMode(\n-            getEnumWithDefault( TrackerBundleMode.class, parameters, \"importMode\", TrackerBundleMode.COMMIT ) );\n-        params.setIdentifiers( getTrackerIdentifiers( parameters ) );\n-        params.setImportStrategy( getEnumWithDefault( TrackerImportStrategy.class, parameters, \"importStrategy\",\n-            TrackerImportStrategy.CREATE_AND_UPDATE ) );\n-        params.setAtomicMode( getEnumWithDefault( AtomicMode.class, parameters, \"atomicMode\", AtomicMode.ALL ) );\n-        params.setFlushMode( getEnumWithDefault( FlushMode.class, parameters, \"flushMode\", FlushMode.AUTO ) );\n-\n-        return params;\n-    }\n-\n     @Override\n     public TrackerImportReport buildImportReport( TrackerImportReport importReport, TrackerBundleReportMode reportMode )\n     {\n         return importReport.copy( reportMode );\n     }\n \n-    //-----------------------------------------------------------------------------------\n-    // Utility Methods\n-    //-----------------------------------------------------------------------------------\n-\n-    private TrackerIdentifierParams getTrackerIdentifiers( Map<String, List<String>> parameters )\n-    {\n-        TrackerIdScheme idScheme = getEnumWithDefault( TrackerIdScheme.class, parameters, \"idScheme\",\n-            TrackerIdScheme.UID );\n-        TrackerIdScheme orgUnitIdScheme = getEnumWithDefault( TrackerIdScheme.class, parameters, \"orgUnitIdScheme\",\n-            idScheme );\n-        TrackerIdScheme programIdScheme = getEnumWithDefault( TrackerIdScheme.class, parameters, \"programIdScheme\",\n-            idScheme );\n-        TrackerIdScheme programStageIdScheme = getEnumWithDefault( TrackerIdScheme.class, parameters,\n-            \"programStageIdScheme\", idScheme );\n-        TrackerIdScheme dataElementIdScheme = getEnumWithDefault( TrackerIdScheme.class, parameters,\n-            \"dataElementIdScheme\", idScheme );\n-\n-        return TrackerIdentifierParams.builder()\n-            .idScheme( TrackerIdentifier.builder().idScheme( idScheme )\n-                .value( getAttributeUidOrNull( parameters, \"idScheme\" ) ).build() )\n-            .orgUnitIdScheme( TrackerIdentifier.builder().idScheme( orgUnitIdScheme )\n-                .value( getAttributeUidOrNull( parameters, \"orgUnitIdScheme\" ) ).build() )\n-            .programIdScheme( TrackerIdentifier.builder().idScheme( programIdScheme )\n-                .value( getAttributeUidOrNull( parameters, \"programIdScheme\" ) ).build() )\n-            .programStageIdScheme( TrackerIdentifier.builder().idScheme( programStageIdScheme )\n-                .value( getAttributeUidOrNull( parameters, \"programStageIdScheme\" ) ).build() )\n-            .dataElementIdScheme( TrackerIdentifier.builder().idScheme( dataElementIdScheme )\n-                .value( getAttributeUidOrNull( parameters, \"dataElementIdScheme\" ) ).build() )\n-            .build();\n-    }\n-\n-    private <T extends Enum<T>> T getEnumWithDefault( Class<T> enumKlass, Map<String, List<String>> parameters,\n-        String key, T defaultValue )\n-    {\n-        if ( parameters == null || parameters.get( key ) == null || parameters.get( key ).isEmpty() )\n-        {\n-            return defaultValue;\n-        }\n-\n-        if ( TrackerIdScheme.class.equals( enumKlass ) && IdScheme.isAttribute( parameters.get( key ).get( 0 ) ) )\n-        {\n-            return Enums.getIfPresent( enumKlass, \"ATTRIBUTE\" ).orNull();\n-        }\n-\n-        String value = String.valueOf( parameters.get( key ).get( 0 ) );\n-\n-        return Enums.getIfPresent( enumKlass, value ).or( defaultValue );\n-    }\n-\n-    private String getAttributeUidOrNull( Map<String, List<String>> parameters, String key )\n-    {\n-        if ( parameters == null || parameters.get( key ) == null || parameters.get( key ).isEmpty() )\n-        {\n-            return null;\n-        }\n-\n-        if ( IdScheme.isAttribute( parameters.get( key ).get( 0 ) ) )\n-        {\n-            String uid = \"\";\n-\n-            // Get second half of string, separated by ':'\n-            String[] splitParam = parameters.get( key ).get( 0 ).split( \":\" );\n-\n-            if ( splitParam.length > 1 )\n-            {\n-                uid = splitParam[1];\n-            }\n-\n-            if ( CodeGenerator.isValidUid( uid ) )\n-            {\n-                return uid;\n-            }\n-        }\n-\n-        return null;\n-    }\n-    \n     @AllArgsConstructor\n     static class ImportNotifier\n     {\n-\n         private Notifier notifier;\n \n         private TrackerImportParams params;\n", "next_change": {"commit": "d3babd17c47704fd61fb23a664d8e88264bbcff0", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\ndeleted file mode 100644\nindex 3e1f1e0472..0000000000\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\n+++ /dev/null\n", "chunk": "@@ -1,280 +0,0 @@\n-package org.hisp.dhis.tracker;\n-\n-/*\n- * Copyright (c) 2004-2020, University of Oslo\n- * All rights reserved.\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions are met:\n- * Redistributions of source code must retain the above copyright notice, this\n- * list of conditions and the following disclaimer.\n- *\n- * Redistributions in binary form must reproduce the above copyright notice,\n- * this list of conditions and the following disclaimer in the documentation\n- * and/or other materials provided with the distribution.\n- * Neither the name of the HISP project nor the names of its contributors may\n- * be used to endorse or promote products derived from this software without\n- * specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n- * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n- * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n- * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n- * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n- * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n- * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- */\n-\n-import static org.hisp.dhis.tracker.report.TrackerTimingsStats.COMMIT_OPS;\n-import static org.hisp.dhis.tracker.report.TrackerTimingsStats.PREHEAT_OPS;\n-import static org.hisp.dhis.tracker.report.TrackerTimingsStats.PROGRAMRULE_OPS;\n-import static org.hisp.dhis.tracker.report.TrackerTimingsStats.TOTAL_OPS;\n-import static org.hisp.dhis.tracker.report.TrackerTimingsStats.VALIDATION_OPS;\n-\n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Optional;\n-import java.util.stream.Collectors;\n-import java.util.stream.Stream;\n-\n-import org.hisp.dhis.system.notification.Notifier;\n-import org.hisp.dhis.tracker.bundle.TrackerBundle;\n-import org.hisp.dhis.tracker.bundle.TrackerBundleService;\n-import org.hisp.dhis.tracker.job.TrackerSideEffectDataBundle;\n-import org.hisp.dhis.tracker.preprocess.TrackerPreprocessService;\n-import org.hisp.dhis.tracker.report.TrackerBundleReport;\n-import org.hisp.dhis.tracker.report.TrackerImportReport;\n-import org.hisp.dhis.tracker.report.TrackerStatus;\n-import org.hisp.dhis.tracker.report.TrackerTimingsStats;\n-import org.hisp.dhis.tracker.report.TrackerTypeReport;\n-import org.hisp.dhis.tracker.report.TrackerValidationReport;\n-import org.hisp.dhis.tracker.validation.TrackerValidationService;\n-import org.springframework.stereotype.Service;\n-\n-import com.google.common.collect.ImmutableMap;\n-\n-import lombok.AllArgsConstructor;\n-import lombok.NonNull;\n-import lombok.RequiredArgsConstructor;\n-import lombok.extern.slf4j.Slf4j;\n-\n-/**\n- * @author Morten Olav Hansen <mortenoh@gmail.com>\n- */\n-@Service\n-@Slf4j\n-@RequiredArgsConstructor\n-public class DefaultTrackerImportService\n-    implements TrackerImportService\n-{\n-    @NonNull private final TrackerBundleService trackerBundleService;\n-\n-    @NonNull private final TrackerValidationService trackerValidationService;\n-\n-    @NonNull private final TrackerPreprocessService trackerPreprocessService;\n-\n-    @NonNull private final TrackerUserService trackerUserService;\n-\n-    @NonNull private final Notifier notifier;\n-\n-    @Override\n-    public TrackerImportReport importTracker( TrackerImportParams params )\n-    {\n-        params.setUser( trackerUserService.getUser( params.getUserId() ) );\n-\n-        // Init the Notifier\n-        ImportNotifier notifier = new ImportNotifier( this.notifier, params );\n-\n-        // Keeps track of the elapsed time of each Import stage\n-        TrackerTimingsStats opsTimer = new TrackerTimingsStats();\n-\n-        notifier.startImport();\n-\n-        TrackerValidationReport validationReport = null;\n-\n-        TrackerBundleReport bundleReport;\n-\n-        try\n-        {\n-            //\n-            // pre-heat\n-            //\n-            TrackerBundle trackerBundle = opsTimer.exec( PREHEAT_OPS,\n-                () -> preheatBundle( params ) );\n-\n-            Map<TrackerType, Integer> bundleSize = calculatePayloadSize( trackerBundle );\n-\n-            //\n-            // preprocess\n-            //\n-            opsTimer.execVoid( PROGRAMRULE_OPS,\n-                () -> preProcessBundle( trackerBundle ) );\n-\n-            //\n-            // validate\n-            //\n-            validationReport = opsTimer.exec( VALIDATION_OPS,\n-                () -> validateBundle( trackerBundle ) );\n-\n-            notifier.notifyOps( VALIDATION_OPS, opsTimer );\n-\n-\n-            if ( validationReport.hasErrors() && params.getAtomicMode() == AtomicMode.ALL )\n-            {\n-                TrackerImportReport trackerImportReport = TrackerImportReport\n-                    .withValidationErrors( validationReport, opsTimer.stopTimer(),\n-                        bundleSize.values().stream().mapToInt( Integer::intValue ).sum() );\n-\n-                notifier.endImport( trackerImportReport );\n-\n-                return trackerImportReport;\n-            }\n-            else\n-            {\n-                if ( TrackerImportStrategy.DELETE == params.getImportStrategy() )\n-                {\n-                    bundleReport = opsTimer.exec( COMMIT_OPS, () -> deleteBundle( trackerBundle) );\n-                }\n-                else\n-                {\n-                    bundleReport = opsTimer.exec( COMMIT_OPS, () -> commitBundle( trackerBundle) );\n-                }\n-\n-                notifier.notifyOps( COMMIT_OPS, opsTimer );\n-\n-                TrackerImportReport trackerImportReport = TrackerImportReport.withImportCompleted( TrackerStatus.OK,\n-                    bundleReport, validationReport,\n-                    opsTimer.stopTimer(), bundleSize );\n-\n-                notifier.endImport( trackerImportReport );\n-\n-                return trackerImportReport;\n-            }\n-        }\n-        catch ( Exception e )\n-        {\n-            log.error( \"Exception thrown during import.\", e );\n-\n-            TrackerImportReport report = TrackerImportReport.withError( \"Exception:\" + e.getMessage(),\n-                validationReport, opsTimer.stopTimer() );\n-\n-            notifier.endImportWithError( report, e );\n-\n-            return report;\n-        }\n-    }\n-\n-    private Map<TrackerType, Integer> calculatePayloadSize( TrackerBundle bundle )\n-    {\n-        return ImmutableMap.<TrackerType, Integer> builder()\n-            .put( TrackerType.TRACKED_ENTITY, bundle.getTrackedEntities().size() )\n-            .put( TrackerType.ENROLLMENT, bundle.getEnrollments().size() )\n-            .put( TrackerType.EVENT, bundle.getEvents().size() )\n-            .put( TrackerType.RELATIONSHIP, bundle.getRelationships().size() ).build();\n-    }\n-\n-    protected TrackerBundle preheatBundle( TrackerImportParams params )\n-    {\n-        return  trackerBundleService.create( params );\n-    }\n-\n-    protected void preProcessBundle( TrackerBundle bundle )\n-    {\n-        TrackerBundle trackerBundle = trackerBundleService.runRuleEngine( bundle );\n-        trackerPreprocessService.preprocess( trackerBundle );\n-    }\n-\n-    protected TrackerBundleReport commitBundle( TrackerBundle trackerBundle )\n-    {\n-        TrackerBundleReport bundleReport = trackerBundleService.commit( trackerBundle );\n-\n-        List<TrackerSideEffectDataBundle> sideEffectDataBundles = Stream.of( TrackerType.ENROLLMENT, TrackerType.EVENT )\n-            .map( trackerType -> safelyGetSideEffectsDataBundles( bundleReport, trackerType ) )\n-            .flatMap( Collection::stream )\n-            .collect( Collectors.toList() );\n-\n-        trackerBundleService.handleTrackerSideEffects( sideEffectDataBundles );\n-\n-        return bundleReport;\n-    }\n-\n-    List<TrackerSideEffectDataBundle> safelyGetSideEffectsDataBundles( TrackerBundleReport bundleReport,\n-        TrackerType trackerType )\n-    {\n-        return Optional.ofNullable( bundleReport )\n-            .map( TrackerBundleReport::getTypeReportMap )\n-            .map( reportMap -> reportMap.get( trackerType ) )\n-            .map( TrackerTypeReport::getSideEffectDataBundles )\n-            .orElse( Collections.emptyList() );\n-    }\n-\n-    protected TrackerBundleReport deleteBundle( TrackerBundle trackerBundle )\n-    {\n-        return trackerBundleService.delete( trackerBundle );\n-    }\n-\n-    protected TrackerValidationReport validateBundle( TrackerBundle trackerBundle )\n-    {\n-        TrackerValidationReport validationReport = new TrackerValidationReport();\n-\n-        validationReport.add( trackerValidationService.validate( trackerBundle ) );\n-        \n-        return validationReport;\n-    }\n-\n-    @Override\n-    public TrackerImportReport buildImportReport( TrackerImportReport importReport, TrackerBundleReportMode reportMode )\n-    {\n-        return importReport.copy( reportMode );\n-    }\n-\n-    @AllArgsConstructor\n-    static class ImportNotifier\n-    {\n-        private Notifier notifier;\n-\n-        private TrackerImportParams params;\n-\n-        public void startImport()\n-        {\n-            notifier.notify( params.getJobConfiguration(), \"(\" + params.getUsername() + \") Import:Start\" );\n-        }\n-\n-        public void notifyOps( String validationOps, TrackerTimingsStats opsTimer )\n-        {\n-\n-            if ( params.hasJobConfiguration() )\n-            {\n-                notifier\n-                    .update( params.getJobConfiguration(),\n-                        \"(\" + params.getUsername() + \") Import:\" + validationOps + \" took \"\n-                            + opsTimer.get( validationOps ) );\n-            }\n-        }\n-\n-        public void endImport( TrackerImportReport importReport )\n-        {\n-            if ( params.hasJobConfiguration() )\n-            {\n-                notifier.update( params.getJobConfiguration(), \"(\" + params.getUsername() + \") Import:Done took \" +\n-                    importReport.getTimingsStats().get( TOTAL_OPS ), true );\n-\n-                notifier.addJobSummary( params.getJobConfiguration(), importReport, TrackerImportReport.class );\n-            }\n-        }\n-\n-        public void endImportWithError( TrackerImportReport importReport, Exception e) {\n-\n-            if ( params.hasJobConfiguration() )\n-            {\n-                notifier.update( params.getJobConfiguration(), \"(\" + params.getUsername() + \") Import:Failed with exception: \" + e.getMessage(), true );\n-                notifier.addJobSummary( params.getJobConfiguration(), importReport, TrackerImportReport.class );\n-            }\n-        }\n-    }\n-}\n", "next_change": {"commit": "43725fed360d23cefb272443d6b3cf36cb72ff74", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\nnew file mode 100644\nindex 0000000000..6ff6031dee\n--- /dev/null\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\n", "chunk": "@@ -0,0 +1,395 @@\n+/*\n+ * Copyright (c) 2004-2022, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package org.hisp.dhis.tracker;\n+\n+import static org.hisp.dhis.tracker.report.TimingsStats.COMMIT_OPS;\n+import static org.hisp.dhis.tracker.report.TimingsStats.PREHEAT_OPS;\n+import static org.hisp.dhis.tracker.report.TimingsStats.PREPROCESS_OPS;\n+import static org.hisp.dhis.tracker.report.TimingsStats.PROGRAMRULE_OPS;\n+import static org.hisp.dhis.tracker.report.TimingsStats.TOTAL_OPS;\n+import static org.hisp.dhis.tracker.report.TimingsStats.VALIDATE_PROGRAMRULE_OPS;\n+import static org.hisp.dhis.tracker.report.TimingsStats.VALIDATION_OPS;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import javax.annotation.Nonnull;\n+\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import org.hisp.dhis.system.notification.NotificationLevel;\n+import org.hisp.dhis.system.notification.Notifier;\n+import org.hisp.dhis.tracker.bundle.TrackerBundle;\n+import org.hisp.dhis.tracker.bundle.TrackerBundleService;\n+import org.hisp.dhis.tracker.job.TrackerSideEffectDataBundle;\n+import org.hisp.dhis.tracker.preprocess.TrackerPreprocessService;\n+import org.hisp.dhis.tracker.report.ImportReport;\n+import org.hisp.dhis.tracker.report.PersistenceReport;\n+import org.hisp.dhis.tracker.report.Status;\n+import org.hisp.dhis.tracker.report.TimingsStats;\n+import org.hisp.dhis.tracker.report.TrackerTypeReport;\n+import org.hisp.dhis.tracker.report.ValidationReport;\n+import org.hisp.dhis.tracker.validation.ValidationResult;\n+import org.hisp.dhis.tracker.validation.ValidationService;\n+import org.hisp.dhis.user.User;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+/**\n+ * @author Morten Olav Hansen <mortenoh@gmail.com>\n+ */\n+@Service\n+@Slf4j\n+@RequiredArgsConstructor\n+public class DefaultTrackerImportService\n+    implements TrackerImportService\n+{\n+    @Nonnull\n+    private final TrackerBundleService trackerBundleService;\n+\n+    @Nonnull\n+    private final ValidationService validationService;\n+\n+    @Nonnull\n+    private final TrackerPreprocessService trackerPreprocessService;\n+\n+    @Nonnull\n+    private final TrackerUserService trackerUserService;\n+\n+    @Nonnull\n+    private final Notifier notifier;\n+\n+    @Override\n+    @Transactional\n+    public ImportReport importTracker( TrackerImportParams params )\n+    {\n+        User user = trackerUserService.getUser( params.getUserId() );\n+        params.setUser( user );\n+\n+        TimingsStats opsTimer = new TimingsStats();\n+\n+        startImport( params );\n+\n+        try\n+        {\n+            TrackerBundle trackerBundle = preHeat( params, opsTimer );\n+\n+            Map<TrackerType, Integer> bundleSize = calculatePayloadSize( trackerBundle );\n+\n+            preProcess( opsTimer, trackerBundle );\n+\n+            ValidationReport validationReport = validate( params, opsTimer, trackerBundle );\n+\n+            if ( exitOnError( validationReport, params ) )\n+            {\n+                return buildReportAndNotify( params, validationReport, opsTimer, bundleSize );\n+            }\n+\n+            PersistenceReport persistenceReport = commit( params, opsTimer, trackerBundle );\n+\n+            postCommit( trackerBundle );\n+\n+            ImportReport importReport = ImportReport.withImportCompleted(\n+                Status.OK,\n+                persistenceReport, validationReport,\n+                opsTimer.stopTimer(), bundleSize );\n+\n+            endImport( params, importReport );\n+\n+            return importReport;\n+        }\n+        catch ( Exception e )\n+        {\n+            log.error( \"Exception thrown during import.\", e );\n+\n+            ImportReport report = ImportReport.withError( \"Exception:\" + e.getMessage(),\n+                ValidationReport.emptyReport(), opsTimer.stopTimer() );\n+\n+            endImportWithError( params, report, e );\n+\n+            return report;\n+        }\n+    }\n+\n+    private TrackerBundle preHeat( TrackerImportParams params, TimingsStats opsTimer )\n+    {\n+        TrackerBundle trackerBundle = opsTimer.exec( PREHEAT_OPS,\n+            () -> preheatBundle( params ) );\n+\n+        notifyOps( params, PREHEAT_OPS, opsTimer );\n+\n+        return trackerBundle;\n+    }\n+\n+    private void preProcess( TimingsStats opsTimer, TrackerBundle trackerBundle )\n+    {\n+        opsTimer.execVoid( PREPROCESS_OPS,\n+            () -> preProcessBundle( trackerBundle ) );\n+    }\n+\n+    private ValidationReport validate( TrackerImportParams params, TimingsStats opsTimer, TrackerBundle trackerBundle )\n+    {\n+        ValidationResult validationResult = opsTimer.exec( VALIDATION_OPS,\n+            () -> validateBundle( params, trackerBundle, opsTimer ) );\n+\n+        if ( !trackerBundle.isSkipRuleEngine() && !params.getImportStrategy().isDelete() )\n+        {\n+            ValidationResult ruleEnginevalidationResult = execRuleEngine( params, opsTimer, trackerBundle );\n+\n+            return ValidationReport.merge( validationResult, ruleEnginevalidationResult );\n+        }\n+\n+        return ValidationReport.fromResult( validationResult );\n+    }\n+\n+    private PersistenceReport commit( TrackerImportParams params, TimingsStats opsTimer,\n+        TrackerBundle trackerBundle )\n+    {\n+        PersistenceReport persistenceReport;\n+        if ( TrackerImportStrategy.DELETE == params.getImportStrategy() )\n+        {\n+            persistenceReport = opsTimer.exec( COMMIT_OPS, () -> deleteBundle( trackerBundle ) );\n+        }\n+        else\n+        {\n+            persistenceReport = opsTimer.exec( COMMIT_OPS, () -> commitBundle( trackerBundle ) );\n+        }\n+\n+        notifyOps( params, COMMIT_OPS, opsTimer );\n+        return persistenceReport;\n+    }\n+\n+    private void postCommit( TrackerBundle trackerBundle )\n+    {\n+        trackerBundleService.postCommit( trackerBundle );\n+    }\n+\n+    protected ValidationResult validateBundle( TrackerImportParams params, TrackerBundle bundle,\n+        TimingsStats opsTimer )\n+    {\n+        ValidationResult result = validationService.validate( bundle );\n+        bundle.setTrackedEntities( result.getTrackedEntities() );\n+        bundle.setEnrollments( result.getEnrollments() );\n+        bundle.setEvents( result.getEvents() );\n+        bundle.setRelationships( result.getRelationships() );\n+\n+        notifyOps( params, VALIDATION_OPS, opsTimer );\n+\n+        return result;\n+    }\n+\n+    private ValidationResult execRuleEngine( TrackerImportParams params, TimingsStats opsTimer,\n+        TrackerBundle bundle )\n+    {\n+        opsTimer.execVoid( PROGRAMRULE_OPS,\n+            () -> trackerBundleService.runRuleEngine( bundle ) );\n+\n+        notifyOps( params, PROGRAMRULE_OPS, opsTimer );\n+\n+        ValidationResult result = opsTimer.exec( VALIDATE_PROGRAMRULE_OPS,\n+            () -> validationService.validateRuleEngine( bundle ) );\n+        bundle.setTrackedEntities( result.getTrackedEntities() );\n+        bundle.setEnrollments( result.getEnrollments() );\n+        bundle.setEvents( result.getEvents() );\n+        bundle.setRelationships( result.getRelationships() );\n+\n+        notifyOps( params, VALIDATE_PROGRAMRULE_OPS, opsTimer );\n+\n+        return result;\n+    }\n+\n+    private ImportReport buildReportAndNotify( TrackerImportParams params,\n+        ValidationReport validationReport,\n+        TimingsStats opsTimer, Map<TrackerType, Integer> bundleSize )\n+    {\n+        ImportReport importReport = ImportReport.withValidationErrors( validationReport,\n+            opsTimer.stopTimer(),\n+            bundleSize.values().stream().mapToInt( Integer::intValue ).sum() );\n+\n+        endImport( params, importReport );\n+\n+        return importReport;\n+    }\n+\n+    private boolean exitOnError( ValidationReport validationReport, TrackerImportParams params )\n+    {\n+        return validationReport.hasErrors() && params.getAtomicMode() == AtomicMode.ALL;\n+    }\n+\n+    private Map<TrackerType, Integer> calculatePayloadSize( TrackerBundle bundle )\n+    {\n+        return Map.of(\n+            TrackerType.TRACKED_ENTITY, bundle.getTrackedEntities().size(),\n+            TrackerType.ENROLLMENT, bundle.getEnrollments().size(),\n+            TrackerType.EVENT, bundle.getEvents().size(),\n+            TrackerType.RELATIONSHIP, bundle.getRelationships().size() );\n+    }\n+\n+    protected TrackerBundle preheatBundle( TrackerImportParams params )\n+    {\n+        return trackerBundleService.create( params );\n+    }\n+\n+    protected void preProcessBundle( TrackerBundle bundle )\n+    {\n+        trackerPreprocessService.preprocess( bundle );\n+    }\n+\n+    protected PersistenceReport commitBundle( TrackerBundle trackerBundle )\n+    {\n+        PersistenceReport persistenceReport = trackerBundleService.commit( trackerBundle );\n+\n+        if ( !trackerBundle.isSkipSideEffects() )\n+        {\n+            List<TrackerSideEffectDataBundle> sideEffectDataBundles = Stream\n+                .of( TrackerType.ENROLLMENT, TrackerType.EVENT )\n+                .map( trackerType -> safelyGetSideEffectsDataBundles( persistenceReport, trackerType ) )\n+                .flatMap( Collection::stream )\n+                .collect( Collectors.toList() );\n+\n+            trackerBundleService.handleTrackerSideEffects( sideEffectDataBundles );\n+        }\n+\n+        return persistenceReport;\n+    }\n+\n+    private List<TrackerSideEffectDataBundle> safelyGetSideEffectsDataBundles( PersistenceReport persistenceReport,\n+        TrackerType trackerType )\n+    {\n+        return Optional.ofNullable( persistenceReport )\n+            .map( PersistenceReport::getTypeReportMap )\n+            .map( reportMap -> reportMap.get( trackerType ) )\n+            .map( TrackerTypeReport::getSideEffectDataBundles )\n+            .orElse( Collections.emptyList() );\n+    }\n+\n+    protected PersistenceReport deleteBundle( TrackerBundle trackerBundle )\n+    {\n+        return trackerBundleService.delete( trackerBundle );\n+    }\n+\n+    private void startImport( TrackerImportParams params )\n+    {\n+        if ( null != params.getJobConfiguration() )\n+        {\n+            notifier.notify( params.getJobConfiguration(),\n+                params.userStartInfo() + \" Import:Start\" );\n+        }\n+    }\n+\n+    private void notifyOps( TrackerImportParams params, String validationOps, TimingsStats opsTimer )\n+    {\n+        if ( null != params.getJobConfiguration() )\n+        {\n+            notifier\n+                .update( params.getJobConfiguration(), NotificationLevel.DEBUG,\n+                    params +\n+                        validationOps + \" completed in \"\n+                        + opsTimer.get( validationOps ) + \" Import:\"\n+                        + validationOps );\n+        }\n+    }\n+\n+    private void endImport( TrackerImportParams params, ImportReport importReport )\n+    {\n+        if ( null != params.getJobConfiguration() )\n+        {\n+            notifier.update( params.getJobConfiguration(),\n+                params +\n+                    \" finished in \" +\n+                    importReport.getTimingsStats().get( TOTAL_OPS ) + \" Import:Done\",\n+                true );\n+\n+            if ( params.getJobConfiguration().isInMemoryJob() )\n+            {\n+                notifier.addJobSummary( params.getJobConfiguration(), importReport, ImportReport.class );\n+            }\n+        }\n+    }\n+\n+    private void endImportWithError( TrackerImportParams params, ImportReport importReport, Exception e )\n+    {\n+        if ( null != params.getJobConfiguration() && params.getJobConfiguration().isInMemoryJob() )\n+        {\n+            notifier.update( params.getJobConfiguration(), NotificationLevel.ERROR,\n+                params +\n+                    \" failed with exception: \"\n+                    + e.getMessage() + \" Import:Error\",\n+                true );\n+\n+            if ( params.getJobConfiguration().isInMemoryJob() )\n+            {\n+                notifier.addJobSummary( params.getJobConfiguration(), importReport, ImportReport.class );\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Clone the TrackerImportReport and filters out validation data based on\n+     * the provided {@link PersistenceReport}.\n+     *\n+     * @return a copy of the current TrackerImportReport\n+     */\n+    @Override\n+    public ImportReport buildImportReport( ImportReport originalImportReport,\n+        TrackerBundleReportMode reportMode )\n+    {\n+        ImportReport.ImportReportBuilder importReportBuilder = ImportReport.builder()\n+            .status( originalImportReport.getStatus() )\n+            .stats( originalImportReport.getStats() )\n+            .persistenceReport( originalImportReport.getPersistenceReport() )\n+            .message( originalImportReport.getMessage() );\n+\n+        ValidationReport originalValidationReport = originalImportReport.getValidationReport();\n+        ValidationReport validationReport = ValidationReport.emptyReport();\n+        if ( originalValidationReport != null )\n+        {\n+            validationReport.addErrors( originalValidationReport.getErrors() );\n+        }\n+        if ( originalValidationReport != null && TrackerBundleReportMode.WARNINGS == reportMode )\n+        {\n+            validationReport.addWarnings( originalValidationReport.getWarnings() );\n+        }\n+        else if ( originalValidationReport != null && TrackerBundleReportMode.FULL == reportMode )\n+        {\n+            validationReport\n+                .addWarnings( originalValidationReport.getWarnings() );\n+            importReportBuilder.timingsStats( originalImportReport.getTimingsStats() );\n+        }\n+\n+        importReportBuilder.validationReport( validationReport );\n+\n+        return importReportBuilder.build();\n+    }\n+}\n", "next_change": null}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "message": "Merge commit", "committedDate": null}, {"oid": "399526882c2fbbf5600922b3c3b6030420cf4e96", "committedDate": "2020-07-13 12:23:07 +0200", "message": "feat: Run rule engine rules in new importer [DHIS2-7310]"}, {"oid": "2ed799f33ca26b918ed60473a3f097714f00492e", "committedDate": "2020-08-04 10:30:01 +0200", "message": "chore: Clean up code (#5877)"}, {"oid": "8374cb43e422eddc1f4c01bb715d8d285acc37be", "committedDate": "2020-08-10 11:38:43 +0200", "message": "Merge remote-tracking branch 'origin/master' into DHIS2-7310-merge"}, {"oid": "b010ab69f5dfb7b5ea0a5cfd438c1d7ebf3275de", "committedDate": "2020-08-24 14:13:32 +0200", "message": "fix: Implement atomic mode OBJECTS to commit only valid DTOs (#5958)"}, {"oid": "82a863c258aa34e592b309bb9d6081c4dc8f981b", "committedDate": "2020-08-27 14:46:58 +0200", "message": "feat: Add support for deletion of tracker objects [DHIS2-9085] (#5959)"}, {"oid": "cb2ee65c0210c0d4b2bd8851789da8d4adfaf04d", "committedDate": "2020-09-07 10:28:21 +0200", "message": "fix: [DHIS2-9287] Fix the stats in the import summary (#6062)"}, {"oid": "c2e0b3718cd8c7597ee5ec2e5193e7eafacf5827", "committedDate": "2020-09-08 09:47:19 +0200", "message": "fix: prevent Hibernate session errors with User object (#6063)"}, {"oid": "0d35843121f0ad3004fad015f1520c5b06a5c337", "committedDate": "2020-09-15 09:24:33 +0200", "message": "Merge 2.35 into master (#6149)"}, {"oid": "20ae7d1ed19072116ee92e47a760e281039159ce", "committedDate": "2020-09-15 11:32:35 +0200", "message": "fix: [DHIS2-9428] Use report mode parameter to filter report data (#6122)"}, {"oid": "8aaeab2ee4dd7a9ffa927147931dff8609ef787a", "committedDate": "2020-09-23 15:33:34 +0200", "message": "chore: Remove unused imports (#6219)"}, {"oid": "87ef26080354e452d282d374e4dc6de996844a1c", "committedDate": "2020-10-02 09:53:53 +0200", "message": "test: Add integration tests for tracker side effects (#5833)"}, {"oid": "0208c5478719a64f691e4255b6d839bc95200fb4", "committedDate": "2020-10-23 10:03:41 +0200", "message": "fix: [DHIS2-9817] [DHIS2-9825] serialization and deserialization of TrackerImportReport and excception handling (2.36) (#6473)"}, {"oid": "3934daf1873ee7d70faa0058706c2409575865e5", "committedDate": "2020-10-23 12:21:16 +0200", "message": "fix: [DHIS2-9428] Made ERRORS as default reportMode and stats returned correctly (2.36) (#6477)"}, {"oid": "695641b3509e973bf6cf9fd631d2641e55eeeff4", "committedDate": "2020-10-23 14:47:30 +0200", "message": "fix: [DHIS2-9286] handled exception messages filtered out in final report (2.36) (#6478)"}, {"oid": "0e72ebff22211397a74a8a6aa539bb2f19351370", "committedDate": "2020-10-29 15:26:27 +0100", "message": "fix: Fix lazy initialisation exceptions (#6520)"}, {"oid": "9d25538a10eb27d9dd38aca54900dd84a02b5897", "committedDate": "2020-11-09 12:23:56 +0100", "message": "fix: DHIS2-9855 fixing NPE (#6588)"}, {"oid": "6e28dbfdaea7ceacbe560fe82ddba1e94c6cd203", "committedDate": "2020-11-11 17:41:55 +0100", "message": "fix: Exception when importing TEI with relationship [DHIS2-9856] (#6552)"}, {"oid": "ba02f7daf7dbd5125f1b0215bcc9b25649d32a68", "committedDate": "2020-11-12 15:53:58 +0100", "message": "fix: Use same timers for report and logs (#6642)"}, {"oid": "1f0559c94f01b1497116fe5ba2e19f28f072a879", "committedDate": "2020-11-23 09:21:47 +0100", "message": "fix: invalid ignore count in Tracker Import stats (#6721)"}, {"oid": "89451b9b46d62bfc853b0ed26b6ec266771f3d58", "committedDate": "2020-11-23 10:57:11 +0100", "message": "fix: add report when validation failed a (#6738)"}, {"oid": "641aca580898b88dd99837fe8b5e0639027c6e0e", "committedDate": "2020-11-24 08:24:42 +0100", "message": "fix: Import report ignore values on stats objects (#6745)"}, {"oid": "3e799d196b8f73ad216ea100a07ddd5f7dfc53e0", "committedDate": "2020-11-30 16:37:14 +0100", "message": "fix: remove long running transaction during Tracker Import (#6782)"}, {"oid": "913d4ba468bf66783e901c4d43bd355d13cb16fa", "committedDate": "2020-12-02 16:44:17 +0100", "message": "refactor: Tracker Import params creation (#6814)"}, {"oid": "3ab88a5f4623a8c749246bedef34fcb926d185cb", "committedDate": "2020-12-08 10:40:14 +0100", "message": "fix: [DHIS2-7310] Move rule engine call and validations after bundle validation (#6843)"}, {"oid": "c4f1db1dab576bc73489a9e0a6d015acec2eab5b", "committedDate": "2020-12-15 15:09:02 +0100", "message": "feat: Tracker Import metadata cache (#6877)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "74425bc0f9d76839b6aafd0a8573f0d3d0464446", "committedDate": "2021-01-20 10:08:21 +0100", "message": "fix: Add skipSideEffects flag for new tracker importer"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "d3babd17c47704fd61fb23a664d8e88264bbcff0", "committedDate": "2021-02-15 16:32:19 +0100", "message": "fix: Dhis2 10432 (#7347)"}, {"oid": "f83b6227cef05563252d258a1050a8bd57c70018", "committedDate": "2021-12-07 16:41:41 +0100", "message": "chore: place default TrackerImportService next to interface (#9371)"}, {"oid": "242e8d7cc2a94f328778c2fbad9005509c5b3360", "committedDate": "2021-12-21 13:35:53 +0100", "message": "chore: simplify tracker import validation TECH-880 (#9510)"}, {"oid": "8bd63f9823397e39458bd1cdab383c33c3231019", "committedDate": "2021-12-22 09:32:29 +0100", "message": "chore: move factory methods into class it creates TECH-880 (#9518)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "1c6c72cc7c172b2a5708fb662e588b797d525a55", "committedDate": "2022-01-11 15:55:54 +0100", "message": "chore: bring TrackerValidationReport closer to ValidationErrorReporter TECH-880 (#9595)"}, {"oid": "7c0131dfcfbf72dad27dc5f0a3f6a776e286c79a", "committedDate": "2022-01-11 17:47:56 +0100", "message": "chore: make TrackerValidationReport add methods fluent and name Timing TECH-880 (#9601)"}, {"oid": "8ccf9a288a67e5ee5349024fd3d281372c64c956", "committedDate": "2022-02-22 13:25:35 +0800", "message": "feat: Merge User/UserCredentials into one DB table (#9754)"}, {"oid": "d99da048b6427aa16b080ab0a0e25eda4a2a0f96", "committedDate": "2022-05-09 13:53:18 +0200", "message": "feat: Refactor getCurrentUser() to return DHIS2 User object 2 (#10600)"}, {"oid": "2886ebea404331a2c3f78909bcb92cca1ecc7913", "committedDate": "2022-10-12 09:39:22 +0200", "message": "chore: only use @Nonnull and ban similar annotations (#12071)"}, {"oid": "8bd34731a22250d0a8166442ecad89d00c926ccf", "committedDate": "2022-12-12 17:11:18 +0100", "message": "chore: Cleanup tracker reporter (#12501)"}, {"oid": "e4b9a5c802805b26fe8255711d1f98e662f15c6d", "committedDate": "2022-12-14 10:01:20 +0100", "message": "chore: Rename and clean up report model objects [TECH-14298] (#12525)"}, {"oid": "17085ef1b029fa636afa4c26f2466fb3b95be1e2", "committedDate": "2022-12-15 09:50:15 +0100", "message": "chore: Decouple validation package from report package [DHIS2-14298] (#12558)"}, {"oid": "2d2c1a72fe29e5330e1b3f799f4ab915b5a5bbf0", "committedDate": "2022-12-16 08:41:19 +0000", "message": "chore: remove prefix from TrackerValidationService (#12589)"}, {"oid": "f7407b037eca371200b710628ba5c9e66fe2971a", "committedDate": "2022-12-19 08:23:40 +0100", "message": "chore: Only expose immutable result from validation package [DHIS2-14298] (#12581)"}, {"oid": "2b482819097a3d8498c8a5f72eeffc958da3b95c", "committedDate": "2022-12-20 10:14:42 +0100", "message": "chore: don't mutate bundle in validation (#12620)"}, {"oid": "43725fed360d23cefb272443d6b3cf36cb72ff74", "committedDate": "2023-01-23 11:12:38 +0100", "message": "refactor: Use java Map#of over Guava ImmutableMap#builder (#12804)"}]}, {"oid": "a59d4b4c1f3b0aa2ee51ac1bab3b372412ab878e", "url": "https://github.com/dhis2/dhis2-core/commit/a59d4b4c1f3b0aa2ee51ac1bab3b372412ab878e", "message": "* add tests for enrollment note\n\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>", "committedDate": "2020-05-25T10:55:21Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg1MTUxNw==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r429851517", "body": "Can probably be safely removed", "bodyText": "Can probably be safely removed", "bodyHTML": "<p dir=\"auto\">Can probably be safely removed</p>", "author": "mortenoh", "createdAt": "2020-05-25T10:05:18Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java", "diffHunk": "@@ -222,11 +222,12 @@ private TrackerTypeReport handleTrackedEntities( Session session, TrackerBundle\n                 trackedEntityInstance.getUid(), idx );\n             typeReport.addObjectReport( objectReport );\n \n-            if ( bundle.getImportStrategy().isCreate() )\n-            {\n-                trackedEntityInstance.setCreated( now );\n-                trackedEntityInstance.setCreatedAtClient( now );\n-            }\n+            //TODO: why? this is already done in preheater", "originalCommit": "a5f6d361402efd03ab461bcffa6bcc50be96c520", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3e77f4b8e597ba000a126e053ebb3af75e7a664f", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\nindex 0979d225cb..6027c971dd 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n", "chunk": "@@ -222,13 +223,6 @@ public class DefaultTrackerBundleService\n                 trackedEntityInstance.getUid(), idx );\n             typeReport.addObjectReport( objectReport );\n \n-            //TODO: why? this is already done in preheater\n-//            if ( bundle.getImportStrategy().isCreateOrCreateAndUpdate() )\n-//            {\n-//                trackedEntityInstance.setCreated( now );\n-//                trackedEntityInstance.setCreatedAtClient( now );\n-//            }\n-\n             trackedEntityInstance.setLastUpdated( now );\n             trackedEntityInstance.setLastUpdatedAtClient( now );\n             trackedEntityInstance.setLastUpdatedBy( bundle.getUser() );\n", "next_change": {"commit": "6ccecbd0f6da424e90174d23f11e6a6498621100", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\nindex 6027c971dd..13e7efd689 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n", "chunk": "@@ -216,33 +215,35 @@ public class DefaultTrackerBundleService\n         for ( int idx = 0; idx < trackedEntities.size(); idx++ )\n         {\n             TrackedEntity trackedEntity = trackedEntities.get( idx );\n-            org.hisp.dhis.trackedentity.TrackedEntityInstance trackedEntityInstance = trackedEntityTrackerConverterService\n-                .from( bundle.getPreheat(), trackedEntity );\n \n-            TrackerObjectReport objectReport = new TrackerObjectReport( TrackerType.TRACKED_ENTITY,\n-                trackedEntityInstance.getUid(), idx );\n+            TrackedEntityInstance tei = teConverter.from( bundle.getPreheat(), trackedEntity );\n+            tei.setLastUpdated( now );\n+            tei.setLastUpdatedAtClient( now );\n+            tei.setLastUpdatedBy( bundle.getUser() );\n+\n+            TrackerObjectReport objectReport = new TrackerObjectReport( TrackerType.TRACKED_ENTITY, tei.getUid(), idx );\n             typeReport.addObjectReport( objectReport );\n \n-            trackedEntityInstance.setLastUpdated( now );\n-            trackedEntityInstance.setLastUpdatedAtClient( now );\n-            trackedEntityInstance.setLastUpdatedBy( bundle.getUser() );\n+            session.persist( tei );\n \n-            session.persist( trackedEntityInstance );\n-            bundle.getPreheat().putTrackedEntities( bundle.getIdentifier(),\n-                Collections.singletonList( trackedEntityInstance ) );\n+            bundle.getPreheat().putTrackedEntities( bundle.getIdentifier(), Collections.singletonList( tei ) );\n \n-            handleTrackedEntityAttributeValues( session, bundle.getPreheat(), trackedEntity.getAttributes(),\n-                trackedEntityInstance );\n+            handleTrackedEntityAttributeValues( session, bundle.getPreheat(), trackedEntity.getAttributes(), tei );\n \n             if ( FlushMode.OBJECT == bundle.getFlushMode() )\n             {\n                 session.flush();\n             }\n+\n+            // TODO: check create/update/delete?\n+            typeReport.getStats().incCreated();\n         }\n \n         session.flush();\n+\n         trackedEntities\n-            .forEach( o -> bundleHooks.forEach( hook -> hook.postCreate( TrackedEntity.class, o, bundle ) ) );\n+            .forEach( o -> bundleHooks.forEach( hook ->\n+                hook.postCreate( TrackedEntity.class, o, bundle ) ) );\n \n         return typeReport;\n     }\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\nindex 0979d225cb..f93c73c7bb 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n", "chunk": "@@ -215,40 +216,35 @@ public class DefaultTrackerBundleService\n         for ( int idx = 0; idx < trackedEntities.size(); idx++ )\n         {\n             TrackedEntity trackedEntity = trackedEntities.get( idx );\n-            org.hisp.dhis.trackedentity.TrackedEntityInstance trackedEntityInstance = trackedEntityTrackerConverterService\n-                .from( bundle.getPreheat(), trackedEntity );\n \n-            TrackerObjectReport objectReport = new TrackerObjectReport( TrackerType.TRACKED_ENTITY,\n-                trackedEntityInstance.getUid(), idx );\n-            typeReport.addObjectReport( objectReport );\n+            TrackedEntityInstance tei = teConverter.from( bundle.getPreheat(), trackedEntity );\n+            tei.setLastUpdated( now );\n+            tei.setLastUpdatedAtClient( now );\n+            tei.setLastUpdatedBy( bundle.getUser() );\n \n-            //TODO: why? this is already done in preheater\n-//            if ( bundle.getImportStrategy().isCreateOrCreateAndUpdate() )\n-//            {\n-//                trackedEntityInstance.setCreated( now );\n-//                trackedEntityInstance.setCreatedAtClient( now );\n-//            }\n+            TrackerObjectReport objectReport = new TrackerObjectReport( TrackerType.TRACKED_ENTITY, tei.getUid(), idx );\n+            typeReport.addObjectReport( objectReport );\n \n-            trackedEntityInstance.setLastUpdated( now );\n-            trackedEntityInstance.setLastUpdatedAtClient( now );\n-            trackedEntityInstance.setLastUpdatedBy( bundle.getUser() );\n+            session.persist( tei );\n \n-            session.persist( trackedEntityInstance );\n-            bundle.getPreheat().putTrackedEntities( bundle.getIdentifier(),\n-                Collections.singletonList( trackedEntityInstance ) );\n+            bundle.getPreheat().putTrackedEntities( bundle.getIdentifier(), Collections.singletonList( tei ) );\n \n-            handleTrackedEntityAttributeValues( session, bundle.getPreheat(), trackedEntity.getAttributes(),\n-                trackedEntityInstance );\n+            handleTrackedEntityAttributeValues( session, bundle.getPreheat(), trackedEntity.getAttributes(), tei );\n \n             if ( FlushMode.OBJECT == bundle.getFlushMode() )\n             {\n                 session.flush();\n             }\n+\n+            // TODO: Implement support for update and delete and rollback/decrement create etc.\n+            typeReport.getStats().incCreated();\n         }\n \n         session.flush();\n+\n         trackedEntities\n-            .forEach( o -> bundleHooks.forEach( hook -> hook.postCreate( TrackedEntity.class, o, bundle ) ) );\n+            .forEach( o -> bundleHooks.forEach( hook ->\n+                hook.postCreate( TrackedEntity.class, o, bundle ) ) );\n \n         return typeReport;\n     }\n", "next_change": {"commit": "87ef26080354e452d282d374e4dc6de996844a1c", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\nindex f93c73c7bb..cfedda72e4 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n", "chunk": "@@ -235,22 +321,18 @@ public class DefaultTrackerBundleService\n             {\n                 session.flush();\n             }\n-\n-            // TODO: Implement support for update and delete and rollback/decrement create etc.\n-            typeReport.getStats().incCreated();\n         }\n \n         session.flush();\n-\n-        trackedEntities\n-            .forEach( o -> bundleHooks.forEach( hook ->\n-                hook.postCreate( TrackedEntity.class, o, bundle ) ) );\n+        trackedEntities.forEach( o -> bundleHooks.forEach( hook -> hook.postCreate( TrackedEntity.class, o, bundle ) ) );\n \n         return typeReport;\n     }\n \n     private TrackerTypeReport handleEnrollments( Session session, TrackerBundle bundle )\n     {\n+        List<TrackerSideEffectDataBundle> sideEffectDataBundles = new ArrayList<>();\n+\n         List<Enrollment> enrollments = bundle.getEnrollments();\n         TrackerTypeReport typeReport = new TrackerTypeReport( TrackerType.ENROLLMENT );\n \n", "next_change": {"commit": "1f0559c94f01b1497116fe5ba2e19f28f072a879", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\nindex cfedda72e4..502b7ce86f 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n", "chunk": "@@ -279,387 +242,4 @@ public class DefaultTrackerBundleService\n \n         return bundleReport;\n     }\n-\n-    private TrackerTypeReport handleTrackedEntities( Session session, TrackerBundle bundle )\n-    {\n-        List<TrackedEntity> trackedEntities = bundle.getTrackedEntities();\n-        TrackerTypeReport typeReport = new TrackerTypeReport( TrackerType.TRACKED_ENTITY );\n-\n-        trackedEntities.forEach( o -> bundleHooks.forEach( hook -> hook.preCreate( TrackedEntity.class, o, bundle ) ) );\n-        session.flush();\n-\n-        Date now = new Date();\n-\n-        for ( int idx = 0; idx < trackedEntities.size(); idx++ )\n-        {\n-            TrackedEntity trackedEntity = trackedEntities.get( idx );\n-\n-            TrackedEntityInstance tei = teConverter.from( bundle.getPreheat(), trackedEntity );\n-            tei.setLastUpdated( now );\n-            tei.setLastUpdatedAtClient( now );\n-            tei.setLastUpdatedBy( bundle.getUser() );\n-\n-            TrackerObjectReport objectReport = new TrackerObjectReport( TrackerType.TRACKED_ENTITY, tei.getUid(), idx );\n-            typeReport.addObjectReport( objectReport );\n-\n-            if ( tei.getId() == 0 )\n-            {\n-                typeReport.getStats().incCreated();\n-            }\n-            else\n-            {\n-                typeReport.getStats().incUpdated();\n-            }\n-\n-            session.persist( tei );\n-\n-            bundle.getPreheat().putTrackedEntities( bundle.getIdentifier(), Collections.singletonList( tei ) );\n-\n-            handleTrackedEntityAttributeValues( session, bundle.getPreheat(), trackedEntity.getAttributes(), tei );\n-\n-            if ( FlushMode.OBJECT == bundle.getFlushMode() )\n-            {\n-                session.flush();\n-            }\n-        }\n-\n-        session.flush();\n-        trackedEntities.forEach( o -> bundleHooks.forEach( hook -> hook.postCreate( TrackedEntity.class, o, bundle ) ) );\n-\n-        return typeReport;\n-    }\n-\n-    private TrackerTypeReport handleEnrollments( Session session, TrackerBundle bundle )\n-    {\n-        List<TrackerSideEffectDataBundle> sideEffectDataBundles = new ArrayList<>();\n-\n-        List<Enrollment> enrollments = bundle.getEnrollments();\n-        TrackerTypeReport typeReport = new TrackerTypeReport( TrackerType.ENROLLMENT );\n-\n-        enrollments.forEach( o -> bundleHooks.forEach( hook -> hook.preCreate( Enrollment.class, o, bundle ) ) );\n-        session.flush();\n-\n-        Date now = new Date();\n-\n-        for ( int idx = 0; idx < enrollments.size(); idx++ )\n-        {\n-            Enrollment enrollment = enrollments.get( idx );\n-\n-            ProgramInstance programInstance = enrollmentConverter.from( bundle.getPreheat(), enrollment );\n-\n-            if ( !programInstance.getComments().isEmpty() )\n-            {\n-                for ( TrackedEntityComment comment : programInstance.getComments() )\n-                {\n-                    this.trackedEntityCommentService.addTrackedEntityComment( comment );\n-                }\n-            }\n-\n-            programInstance.setLastUpdated( now );\n-            programInstance.setLastUpdatedAtClient( now );\n-            programInstance.setLastUpdatedBy( bundle.getUser() );\n-\n-            TrackerObjectReport objectReport = new TrackerObjectReport( TrackerType.ENROLLMENT,\n-                programInstance.getUid(), idx );\n-            typeReport.addObjectReport( objectReport );\n-\n-            if ( programInstance.getId() == 0 )\n-            {\n-                typeReport.getStats().incCreated();\n-            }\n-            else\n-            {\n-                typeReport.getStats().incUpdated();\n-            }\n-\n-            session.persist( programInstance );\n-\n-            bundle.getPreheat().putEnrollments( bundle.getIdentifier(), Collections.singletonList( programInstance ) );\n-\n-            handleTrackedEntityAttributeValues( session, bundle.getPreheat(), enrollment.getAttributes(),\n-                programInstance.getEntityInstance() );\n-\n-            if ( FlushMode.OBJECT == bundle.getFlushMode() )\n-            {\n-                session.flush();\n-            }\n-\n-            // TODO: Implement support for update and delete and rollback/decrement create etc.\n-\n-            if ( !bundle.isSkipSideEffects() )\n-            {\n-                TrackerSideEffectDataBundle sideEffectDataBundle = TrackerSideEffectDataBundle.builder()\n-                        .klass( ProgramInstance.class )\n-                        .enrollmentRuleEffects( sideEffectConverterService.toTrackerSideEffects( bundle.getEnrollmentRuleEffects() ) )\n-                        .eventRuleEffects( new HashMap<>() )\n-                        .object( programInstance.getUid() )\n-                        .importStrategy( bundle.getImportStrategy() )\n-                        .accessedBy( bundle.getUsername() )\n-                        .build();\n-\n-                sideEffectDataBundles.add( sideEffectDataBundle );\n-            }\n-        }\n-\n-        session.flush();\n-        enrollments.forEach( o -> bundleHooks.forEach( hook -> hook.postCreate( Enrollment.class, o, bundle ) ) );\n-\n-        typeReport.getSideEffectDataBundles().addAll( sideEffectDataBundles );\n-\n-        return typeReport;\n-    }\n-\n-    private TrackerTypeReport handleEvents( Session session, TrackerBundle bundle )\n-    {\n-        List<TrackerSideEffectDataBundle> sideEffectDataBundles = new ArrayList<>();\n-\n-        List<Event> events = bundle.getEvents();\n-        TrackerTypeReport typeReport = new TrackerTypeReport( TrackerType.EVENT );\n-\n-        events.forEach( o -> bundleHooks.forEach( hook -> hook.preCreate( Event.class, o, bundle ) ) );\n-        session.flush();\n-\n-        for ( int idx = 0; idx < events.size(); idx++ )\n-        {\n-            Event event = events.get( idx );\n-\n-            ProgramStageInstance programStageInstance = eventConverter.from( bundle.getPreheat(), event );\n-\n-            if ( !programStageInstance.getComments().isEmpty() )\n-            {\n-                for ( TrackedEntityComment comment : programStageInstance.getComments() )\n-                {\n-                    this.trackedEntityCommentService.addTrackedEntityComment( comment );\n-                }\n-            }\n-\n-            Date now = new Date();\n-            programStageInstance.setLastUpdated( now );\n-            programStageInstance.setLastUpdatedAtClient( now );\n-            programStageInstance.setLastUpdatedBy( bundle.getUser() );\n-\n-            TrackerObjectReport objectReport = new TrackerObjectReport( TrackerType.EVENT,\n-                programStageInstance.getUid(), idx );\n-            typeReport.addObjectReport( objectReport );\n-\n-            handleDataValues( session, bundle.getPreheat(), event.getDataValues(), programStageInstance );\n-\n-            if ( programStageInstance.getId() == 0 )\n-            {\n-                typeReport.getStats().incCreated();\n-            }\n-            else\n-            {\n-                typeReport.getStats().incUpdated();\n-            }\n-\n-            session.persist( programStageInstance );\n-\n-            bundle.getPreheat().putEvents( bundle.getIdentifier(), Collections.singletonList( programStageInstance ) );\n-\n-            if ( FlushMode.OBJECT == bundle.getFlushMode() )\n-            {\n-                session.flush();\n-            }\n-\n-            // TODO: Implement support for update and delete and rollback/decrement create etc.\n-\n-            if ( !bundle.isSkipSideEffects() )\n-            {\n-                TrackerSideEffectDataBundle sideEffectDataBundle = TrackerSideEffectDataBundle.builder()\n-                    .klass( ProgramStageInstance.class )\n-                    .enrollmentRuleEffects( new HashMap<>() )\n-                    .eventRuleEffects( sideEffectConverterService.toTrackerSideEffects( bundle.getEventRuleEffects() ) )\n-                    .object( programStageInstance.getUid() )\n-                    .importStrategy( bundle.getImportStrategy() )\n-                    .accessedBy( bundle.getUsername() )\n-                    .build();\n-\n-                sideEffectDataBundles.add( sideEffectDataBundle );\n-            }\n-        }\n-\n-        session.flush();\n-        events.forEach( o -> bundleHooks.forEach( hook -> hook.postCreate( Event.class, o, bundle ) ) );\n-\n-        typeReport.getSideEffectDataBundles().addAll( sideEffectDataBundles );\n-\n-        return typeReport;\n-    }\n-\n-    private TrackerTypeReport handleRelationships( Session session, TrackerBundle bundle )\n-    {\n-        List<Relationship> relationships = bundle.getRelationships();\n-        TrackerTypeReport typeReport = new TrackerTypeReport( TrackerType.RELATIONSHIP );\n-\n-        relationships.forEach( o -> bundleHooks.forEach( hook -> hook.preCreate( Relationship.class, o, bundle ) ) );\n-\n-        for ( int idx = 0; idx < relationships.size(); idx++ )\n-        {\n-            org.hisp.dhis.relationship.Relationship relationship = relationshipConverter\n-                .from( bundle.getPreheat(), relationships.get( idx ) );\n-            Date now = new Date();\n-            relationship.setLastUpdated( now );\n-            relationship.setLastUpdatedBy( bundle.getUser() );\n-\n-            TrackerObjectReport objectReport = new TrackerObjectReport( TrackerType.RELATIONSHIP, relationship.getUid(),\n-                idx );\n-            typeReport.addObjectReport( objectReport );\n-\n-            if ( relationship.getId() == 0 )\n-            {\n-                typeReport.getStats().incCreated();\n-            }\n-            else\n-            {\n-                typeReport.getStats().incUpdated();\n-            }\n-\n-            session.persist( relationship );\n-\n-            if ( FlushMode.OBJECT == bundle.getFlushMode() )\n-            {\n-                session.flush();\n-            }\n-\n-            typeReport.getStats().incCreated();\n-        }\n-\n-        session.flush();\n-\n-        relationships.forEach( o -> bundleHooks.forEach( hook -> hook.postCreate( Relationship.class, o, bundle ) ) );\n-\n-        return typeReport;\n-    }\n-\n-    // -----------------------------------------------------------------------------------\n-    // Utility Methods\n-    // -----------------------------------------------------------------------------------\n-\n-    private void handleTrackedEntityAttributeValues( Session session, TrackerPreheat preheat,\n-        List<Attribute> payloadAttributes, TrackedEntityInstance trackedEntityInstance )\n-    {\n-        Map<String, TrackedEntityAttributeValue> attributeValueDBMap = trackedEntityInstance\n-            .getTrackedEntityAttributeValues()\n-            .stream()\n-            .collect( Collectors.toMap(teav -> teav.getAttribute().getUid(), Function.identity() ) );\n-\n-        for ( Attribute at : payloadAttributes )\n-        {\n-            TrackedEntityAttribute attribute = preheat.get( TrackerIdScheme.UID, TrackedEntityAttribute.class,\n-                at.getAttribute() );\n-\n-            checkNotNull( attribute,\n-                \"Attribute should never be NULL here if validation is enforced before commit.\" );\n-\n-            TrackedEntityAttributeValue attributeValue = attributeValueDBMap.getOrDefault( at.getAttribute(),\n-                new TrackedEntityAttributeValue() );\n-\n-            attributeValue\n-                .setAttribute( attribute )\n-                .setEntityInstance( trackedEntityInstance )\n-                .setValue( at.getValue() )\n-                .setStoredBy( at.getStoredBy() );\n-\n-            // We cannot use attributeValue.getValue() because it uses encryption logic\n-            // So we need to use at.getValue()\n-            if ( StringUtils.isEmpty( at.getValue() ) )\n-            {\n-                if ( attribute.getValueType() == ValueType.FILE_RESOURCE )\n-                {\n-                    unassignFileResource( session, preheat, attributeValueDBMap.get( at.getAttribute() ).getValue() );\n-                }\n-                session.remove( attributeValue );\n-            }\n-            else\n-            {\n-                if ( attribute.getValueType() == ValueType.FILE_RESOURCE )\n-                {\n-                    assignFileResource( session, preheat, attributeValue.getValue() );\n-                }\n-                session.persist( attributeValue );\n-            }\n-\n-            if ( attributeValue.getAttribute().isGenerated() && attributeValue.getAttribute().getTextPattern() != null )\n-            {\n-                reservedValueService.useReservedValue( attributeValue.getAttribute().getTextPattern(),\n-                    attributeValue.getValue() );\n-            }\n-        }\n-    }\n-\n-    private void handleDataValues( Session session, TrackerPreheat preheat, Set<DataValue> payloadDataValues,\n-        ProgramStageInstance psi )\n-    {\n-        Map<String, EventDataValue> dataValueDBMap = psi\n-            .getEventDataValues()\n-            .stream()\n-            .collect( Collectors.toMap( dv -> dv.getDataElement(), Function.identity() ) );\n-\n-        for ( DataValue dv : payloadDataValues )\n-        {\n-            DataElement dateElement = preheat.get( TrackerIdScheme.UID, DataElement.class, dv.getDataElement() );\n-\n-            checkNotNull( dateElement,\n-                \"Data element should never be NULL here if validation is enforced before commit.\" );\n-\n-            EventDataValue eventDataValue = dataValueDBMap.getOrDefault( dv.getDataElement(), new EventDataValue() );\n-\n-            eventDataValue.setDataElement( dateElement.getUid() );\n-            eventDataValue.setValue( dv.getValue() );\n-            eventDataValue.setStoredBy( dv.getStoredBy() );\n-\n-            try\n-            {\n-                eventDataValue.setCreated( new SimpleDateFormat( \"yyyy-MM-dd\" ).parse( dv.getCreatedAt() ) );\n-                eventDataValue.setLastUpdated( new SimpleDateFormat( \"yyyy-MM-dd\" ).parse( dv.getUpdatedAt() ) );\n-            }\n-            catch ( ParseException e )\n-            {\n-                // Created and updated dates are already validated.\n-                // This catch should never be reached\n-                e.printStackTrace();\n-            }\n-\n-            if ( StringUtils.isEmpty( eventDataValue.getValue() ) )\n-            {\n-                if ( dateElement.isFileType() )\n-                {\n-                    unassignFileResource( session, preheat, dataValueDBMap.get( dv.getDataElement() ).getValue() );\n-                }\n-                psi.getEventDataValues().remove( eventDataValue );\n-            }\n-            else\n-            {\n-                if ( dateElement.isFileType() )\n-                {\n-                    assignFileResource( session, preheat, eventDataValue.getValue() );\n-                }\n-                psi.getEventDataValues().add( eventDataValue );\n-            }\n-        }\n-    }\n-\n-    private void assignFileResource( Session session, TrackerPreheat preheat, String fr )\n-    {\n-        assignFileResource( session, preheat, fr, true );\n-    }\n-\n-    private void unassignFileResource( Session session, TrackerPreheat preheat, String fr )\n-    {\n-        assignFileResource( session, preheat, fr, false );\n-    }\n-\n-    private void assignFileResource( Session session, TrackerPreheat preheat, String fr, boolean isAssign )\n-    {\n-        FileResource fileResource = preheat.get( TrackerIdScheme.UID, FileResource.class, fr );\n-\n-        if ( fileResource == null )\n-        {\n-            return;\n-        }\n-\n-        fileResource.setAssigned( isAssign );\n-        session.persist( fileResource );\n-    }\n }\n", "next_change": {"commit": "8c4a255176ac5e675c549db2065926fdbaf0290b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\nindex 502b7ce86f..915b7da07c 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n", "chunk": "@@ -235,10 +214,7 @@ public class DefaultTrackerBundleService\n \n         Stream.of( TrackerType.values() )\n             .forEach( t -> bundleReport.getTypeReportMap().put( t, DELETION_MAPPER.get( t )\n-            .apply( bundle, t ) ) );\n-\n-        dbmsManager.clearSession();\n-        cacheManager.clearCache();\n+                .apply( bundle, t ) ) );\n \n         return bundleReport;\n     }\n", "next_change": {"commit": "4c9e21a843bbdbd73b0aeaf99e2d0320ac0bb811", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\nindex 915b7da07c..8097ccd5b2 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n", "chunk": "@@ -212,7 +184,7 @@ public class DefaultTrackerBundleService\n             return bundleReport;\n         }\n \n-        Stream.of( TrackerType.values() )\n+        Stream.of( TrackerType.values() ).sorted( Collections.reverseOrder() )\n             .forEach( t -> bundleReport.getTypeReportMap().put( t, DELETION_MAPPER.get( t )\n                 .apply( bundle, t ) ) );\n \n", "next_change": {"commit": "e66352e7a1e54e17a7b1da3f71bfe6f924311705", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\nindex 8097ccd5b2..b240ddbcd2 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n", "chunk": "@@ -186,7 +171,7 @@ public class DefaultTrackerBundleService\n \n         Stream.of( TrackerType.values() ).sorted( Collections.reverseOrder() )\n             .forEach( t -> bundleReport.getTypeReportMap().put( t, DELETION_MAPPER.get( t )\n-                .apply( bundle, t ) ) );\n+                .apply( bundle ) ) );\n \n         return bundleReport;\n     }\n", "next_change": {"commit": "a7d5843c3d0da8b45bc96835e940185ed36788fc", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\nindex b240ddbcd2..b59218d004 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n", "chunk": "@@ -169,9 +157,12 @@ public class DefaultTrackerBundleService\n             return bundleReport;\n         }\n \n-        Stream.of( TrackerType.values() ).sorted( Collections.reverseOrder() )\n-            .forEach( t -> bundleReport.getTypeReportMap().put( t, DELETION_MAPPER.get( t )\n-                .apply( bundle ) ) );\n+        Map<TrackerType, TrackerTypeReport> report = bundleReport.getTypeReportMap();\n+        report.put( TrackerType.RELATIONSHIP, deletionService.deleteRelationShips( bundle ) );\n+        report.put( TrackerType.EVENT, deletionService.deleteEvents( bundle ) );\n+        report.put( TrackerType.ENROLLMENT, deletionService.deleteEnrollments( bundle ) );\n+        report.put( TrackerType.TRACKED_ENTITY,\n+            deletionService.deleteTrackedEntityInstances( bundle ) );\n \n         return bundleReport;\n     }\n", "next_change": {"commit": "e4b9a5c802805b26fe8255711d1f98e662f15c6d", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\nindex b59218d004..70a25b7718 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n", "chunk": "@@ -148,22 +146,19 @@ public class DefaultTrackerBundleService\n \n     @Override\n     @Transactional\n-    public TrackerBundleReport delete( TrackerBundle bundle )\n+    public PersistenceReport delete( TrackerBundle bundle )\n     {\n-        TrackerBundleReport bundleReport = new TrackerBundleReport();\n-\n         if ( TrackerBundleMode.VALIDATE == bundle.getImportMode() )\n         {\n-            return bundleReport;\n+            return PersistenceReport.emptyReport();\n         }\n \n-        Map<TrackerType, TrackerTypeReport> report = bundleReport.getTypeReportMap();\n-        report.put( TrackerType.RELATIONSHIP, deletionService.deleteRelationShips( bundle ) );\n-        report.put( TrackerType.EVENT, deletionService.deleteEvents( bundle ) );\n-        report.put( TrackerType.ENROLLMENT, deletionService.deleteEnrollments( bundle ) );\n-        report.put( TrackerType.TRACKED_ENTITY,\n-            deletionService.deleteTrackedEntityInstances( bundle ) );\n+        Map<TrackerType, TrackerTypeReport> reportMap = Map.of(\n+            TrackerType.RELATIONSHIP, deletionService.deleteRelationShips( bundle ),\n+            TrackerType.EVENT, deletionService.deleteEvents( bundle ),\n+            TrackerType.ENROLLMENT, deletionService.deleteEnrollments( bundle ),\n+            TrackerType.TRACKED_ENTITY, deletionService.deleteTrackedEntityInstances( bundle ) );\n \n-        return bundleReport;\n+        return new PersistenceReport( reportMap );\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "message": "Merge commit", "committedDate": null}, {"oid": "399526882c2fbbf5600922b3c3b6030420cf4e96", "committedDate": "2020-07-13 12:23:07 +0200", "message": "feat: Run rule engine rules in new importer [DHIS2-7310]"}, {"oid": "2ed799f33ca26b918ed60473a3f097714f00492e", "committedDate": "2020-08-04 10:30:01 +0200", "message": "chore: Clean up code (#5877)"}, {"oid": "3e3dc98d92f0c13fb56cf17894eab06a78842133", "committedDate": "2020-08-04 17:20:37 +0200", "message": "feat: Enrollment/Events note persistence"}, {"oid": "c22c6f59ea7f5b3eec062a2f4eb00f2c4dae2a2d", "committedDate": "2020-08-04 17:20:41 +0200", "message": "chore: javadoc"}, {"oid": "969f25ca303dccefd5c10ed39fd8ca92a0bc6583", "committedDate": "2020-08-04 17:20:41 +0200", "message": "chore: add missing license headers"}, {"oid": "8374cb43e422eddc1f4c01bb715d8d285acc37be", "committedDate": "2020-08-10 11:38:43 +0200", "message": "Merge remote-tracking branch 'origin/master' into DHIS2-7310-merge"}, {"oid": "8d077aaaa69bc32d819217e4c90324d34541c2b0", "committedDate": "2020-08-12 10:22:42 +0200", "message": "Last fixes"}, {"oid": "6e1e12a2fe3c14f79781d64ec3f890f680cf49a4", "committedDate": "2020-08-24 15:50:03 +0200", "message": "feat: Added support for data values in event import [DHIS2-9270]"}, {"oid": "3b12f81c2a6fa41132216efee156f96f1874e91b", "committedDate": "2020-08-25 10:12:44 +0200", "message": "Fix code review comments"}, {"oid": "d70c4998dcb8cf4b7f356f73c3ecb1a5d4f9c352", "committedDate": "2020-08-25 18:05:54 +0200", "message": "feat: Add skipSideEffects check (#5986)"}, {"oid": "82a863c258aa34e592b309bb9d6081c4dc8f981b", "committedDate": "2020-08-27 14:46:58 +0200", "message": "feat: Add support for deletion of tracker objects [DHIS2-9085] (#5959)"}, {"oid": "cb2ee65c0210c0d4b2bd8851789da8d4adfaf04d", "committedDate": "2020-09-07 10:28:21 +0200", "message": "fix: [DHIS2-9287] Fix the stats in the import summary (#6062)"}, {"oid": "c2e0b3718cd8c7597ee5ec2e5193e7eafacf5827", "committedDate": "2020-09-08 09:47:19 +0200", "message": "fix: prevent Hibernate session errors with User object (#6063)"}, {"oid": "8aaeab2ee4dd7a9ffa927147931dff8609ef787a", "committedDate": "2020-09-23 15:33:34 +0200", "message": "chore: Remove unused imports (#6219)"}, {"oid": "87ef26080354e452d282d374e4dc6de996844a1c", "committedDate": "2020-10-02 09:53:53 +0200", "message": "test: Add integration tests for tracker side effects (#5833)"}, {"oid": "23a1aca18690c1c6a18fc0ab8cf734b637896d1b", "committedDate": "2020-11-05 11:00:30 +0100", "message": "fix: [DHIS2-9886] [DHIS2-9890] deserialization of primitive and null check for datavalue dates (#6566)"}, {"oid": "55bfd204388f6a780682802d3a0d205d191486ce", "committedDate": "2020-11-16 16:21:33 +0100", "message": "fix: incorrect relationship count in import report (#6660)"}, {"oid": "cc2736d02fb6c94cc2dfccaea482dcb82902d4be", "committedDate": "2020-11-18 09:55:24 +0100", "message": "fix: [DHIS2-9976] Remove stacktrace for exception raised by rule enigine calls (#6703)"}, {"oid": "4b8923e6eb12d67e7c17ef2af20af6fd02f2fd0b", "committedDate": "2020-11-23 09:15:08 +0100", "message": "feat: flag to disable rule engine (#6737)"}, {"oid": "1f0559c94f01b1497116fe5ba2e19f28f072a879", "committedDate": "2020-11-23 09:21:47 +0100", "message": "fix: invalid ignore count in Tracker Import stats (#6721)"}, {"oid": "3e799d196b8f73ad216ea100a07ddd5f7dfc53e0", "committedDate": "2020-11-30 16:37:14 +0100", "message": "fix: remove long running transaction during Tracker Import (#6782)"}, {"oid": "3ab88a5f4623a8c749246bedef34fcb926d185cb", "committedDate": "2020-12-08 10:40:14 +0100", "message": "fix: [DHIS2-7310] Move rule engine call and validations after bundle validation (#6843)"}, {"oid": "7098e9412b922ed70f8136f30c7d790e27bb43be", "committedDate": "2020-12-10 10:43:44 +0100", "message": "chore: Remove unused imports (#6875)"}, {"oid": "8c4a255176ac5e675c549db2065926fdbaf0290b", "committedDate": "2020-12-14 08:31:48 +0100", "message": "fix: Remove clearSession/clearCache inside transaction causing audit fail (#6876)"}, {"oid": "c4f1db1dab576bc73489a9e0a6d015acec2eab5b", "committedDate": "2020-12-15 15:09:02 +0100", "message": "feat: Tracker Import metadata cache (#6877)"}, {"oid": "3e25b9b834757233501b068c1fd96b5b68cc22f7", "committedDate": "2020-12-22 12:59:13 +0100", "message": "feat: Convert sharing objects to JSONB structure [DHIS2-5814]"}, {"oid": "679b32e817e4751c5ad4f0301a943104bf8f1d79", "committedDate": "2021-01-04 11:56:17 +0100", "message": "feat: Program rule assign action implentation (#7004)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "4c9e21a843bbdbd73b0aeaf99e2d0320ac0bb811", "committedDate": "2021-03-02 15:17:00 +0100", "message": "fix: Correct error report when using DELETE ImportStrategy (#7491)"}, {"oid": "00ba07c1c8555a473f261d56bffffa2b75d3c146", "committedDate": "2021-03-08 12:59:21 +0100", "message": "refactor: Remove unused bundle hook and fix tests [TECH-553] (#7539)"}, {"oid": "a4643bd1fe923092627bdd884e05e5dacc7a5911", "committedDate": "2021-04-30 14:46:25 +0200", "message": "refactor: Refactor rule engine service in the new importer to group events and enrollments in one call (#7925)"}, {"oid": "6901c3e799d56703ac02b01aff470f0594b71500", "committedDate": "2021-05-11 09:13:42 +0200", "message": "refactor: Refactor rule engine service in the new importer to group events and enrollments in one call (#7945)"}, {"oid": "e66352e7a1e54e17a7b1da3f71bfe6f924311705", "committedDate": "2021-07-20 08:49:34 +0200", "message": "fix: Include deleted object in the report object map [DHIS2-11196] (#8419)"}, {"oid": "d4ef7d2434dab562b93e092b3a4b27e56c9df1e1", "committedDate": "2021-10-04 09:47:50 +0200", "message": "fix: NTI: last updated date on TEI is not updated when underlying data changes [ DHIS2-11824 ] 2.38 (#8891)"}, {"oid": "7a29e754f286e13159ae833d5174d625e2fb1ffe", "committedDate": "2021-10-19 14:18:46 +0200", "message": "perf: AttributeValueService is no more an AbstractPersister dependency [DHIS2-11988] (#9069)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "a7d5843c3d0da8b45bc96835e940185ed36788fc", "committedDate": "2022-02-02 07:56:53 +0100", "message": "chore: reduce indirection in DefaultTrackerBundleService (#9711)"}, {"oid": "e4b9a5c802805b26fe8255711d1f98e662f15c6d", "committedDate": "2022-12-14 10:01:20 +0100", "message": "chore: Rename and clean up report model objects [TECH-14298] (#12525)"}, {"oid": "55f98482354fe2ab5b68c7a334e2933e3d2e7159", "committedDate": "2023-01-03 13:37:04 +0100", "message": "refactor: Clean up step to call rule engine [DHIS2-14408] (#12665)"}, {"oid": "4254ae8a51fb72bd28abfb208164f149cef48114", "committedDate": "2023-01-20 14:15:51 +0100", "message": "refactor: Refactor execution of enrollment rule actions [DHIS2-14408] (#12779)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg1MTU4OA==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r429851588", "body": "Can probably be safely removed", "bodyText": "Can probably be safely removed", "bodyHTML": "<p dir=\"auto\">Can probably be safely removed</p>", "author": "mortenoh", "createdAt": "2020-05-25T10:05:27Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java", "diffHunk": "@@ -271,11 +272,12 @@ private TrackerTypeReport handleEnrollments( Session session, TrackerBundle bund\n                 programInstance.getUid(), idx );\n             typeReport.addObjectReport( objectReport );\n \n-            if ( bundle.getImportStrategy().isCreate() )\n-            {\n-                programInstance.setCreated( now );\n-                programInstance.setCreatedAtClient( now );\n-            }\n+            //TODO: why? this is already done in preheater", "originalCommit": "a5f6d361402efd03ab461bcffa6bcc50be96c520", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3e77f4b8e597ba000a126e053ebb3af75e7a664f", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\nindex 0979d225cb..6027c971dd 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n", "chunk": "@@ -272,13 +266,6 @@ public class DefaultTrackerBundleService\n                 programInstance.getUid(), idx );\n             typeReport.addObjectReport( objectReport );\n \n-            //TODO: why? this is already done in preheater\n-//            if ( bundle.getImportStrategy().isCreateOrCreateAndUpdate() )\n-//            {\n-//                programInstance.setCreated( now );\n-//                programInstance.setCreatedAtClient( now );\n-//            }\n-\n             programInstance.setLastUpdated( now );\n             programInstance.setLastUpdatedAtClient( now );\n             programInstance.setLastUpdatedBy( bundle.getUser() );\n", "next_change": {"commit": "6ccecbd0f6da424e90174d23f11e6a6498621100", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\nindex 6027c971dd..13e7efd689 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n", "chunk": "@@ -260,27 +261,29 @@ public class DefaultTrackerBundleService\n         for ( int idx = 0; idx < enrollments.size(); idx++ )\n         {\n             Enrollment enrollment = enrollments.get( idx );\n-            ProgramInstance programInstance = enrollmentTrackerConverterService.from( bundle.getPreheat(), enrollment );\n-\n-            TrackerObjectReport objectReport = new TrackerObjectReport( TrackerType.ENROLLMENT,\n-                programInstance.getUid(), idx );\n-            typeReport.addObjectReport( objectReport );\n \n+            ProgramInstance programInstance = enrollmentConverter.from( bundle.getPreheat(), enrollment );\n             programInstance.setLastUpdated( now );\n             programInstance.setLastUpdatedAtClient( now );\n             programInstance.setLastUpdatedBy( bundle.getUser() );\n \n+            TrackerObjectReport objectReport = new TrackerObjectReport( TrackerType.ENROLLMENT, programInstance.getUid(), idx );\n+            typeReport.addObjectReport( objectReport );\n+\n             session.persist( programInstance );\n+\n             bundle.getPreheat().putEnrollments( bundle.getIdentifier(), Collections.singletonList( programInstance ) );\n \n-            handleTrackedEntityAttributeValues( session, bundle.getPreheat(), enrollment.getAttributes(),\n-                programInstance.getEntityInstance() );\n+            handleTrackedEntityAttributeValues( session, bundle.getPreheat(), enrollment.getAttributes(), programInstance.getEntityInstance() );\n \n             if ( FlushMode.OBJECT == bundle.getFlushMode() )\n             {\n                 session.flush();\n             }\n \n+            // TODO: check create/update?\n+            typeReport.getStats().incCreated();\n+\n             TrackerSideEffectDataBundle sideEffectDataBundle = TrackerSideEffectDataBundle.builder()\n                 .klass( ProgramInstance.class )\n                 .enrollmentRuleEffects( bundle.getEnrollmentRuleEffects() )\n", "next_change": {"commit": "68c9d6c0ee6f2fd2462d63d9f3bef1a317f76ac6", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\nindex 13e7efd689..0fd8f01fb0 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n", "chunk": "@@ -267,21 +267,23 @@ public class DefaultTrackerBundleService\n             programInstance.setLastUpdatedAtClient( now );\n             programInstance.setLastUpdatedBy( bundle.getUser() );\n \n-            TrackerObjectReport objectReport = new TrackerObjectReport( TrackerType.ENROLLMENT, programInstance.getUid(), idx );\n+            TrackerObjectReport objectReport = new TrackerObjectReport( TrackerType.ENROLLMENT,\n+                programInstance.getUid(), idx );\n             typeReport.addObjectReport( objectReport );\n \n             session.persist( programInstance );\n \n             bundle.getPreheat().putEnrollments( bundle.getIdentifier(), Collections.singletonList( programInstance ) );\n \n-            handleTrackedEntityAttributeValues( session, bundle.getPreheat(), enrollment.getAttributes(), programInstance.getEntityInstance() );\n+            handleTrackedEntityAttributeValues( session, bundle.getPreheat(), enrollment.getAttributes(),\n+                programInstance.getEntityInstance() );\n \n             if ( FlushMode.OBJECT == bundle.getFlushMode() )\n             {\n                 session.flush();\n             }\n \n-            // TODO: check create/update?\n+            // TODO: Implement support for update and delete and rollback/decrement create etc.\n             typeReport.getStats().incCreated();\n \n             TrackerSideEffectDataBundle sideEffectDataBundle = TrackerSideEffectDataBundle.builder()\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\nindex 0979d225cb..f93c73c7bb 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n", "chunk": "@@ -266,24 +262,18 @@ public class DefaultTrackerBundleService\n         for ( int idx = 0; idx < enrollments.size(); idx++ )\n         {\n             Enrollment enrollment = enrollments.get( idx );\n-            ProgramInstance programInstance = enrollmentTrackerConverterService.from( bundle.getPreheat(), enrollment );\n-\n-            TrackerObjectReport objectReport = new TrackerObjectReport( TrackerType.ENROLLMENT,\n-                programInstance.getUid(), idx );\n-            typeReport.addObjectReport( objectReport );\n-\n-            //TODO: why? this is already done in preheater\n-//            if ( bundle.getImportStrategy().isCreateOrCreateAndUpdate() )\n-//            {\n-//                programInstance.setCreated( now );\n-//                programInstance.setCreatedAtClient( now );\n-//            }\n \n+            ProgramInstance programInstance = enrollmentConverter.from( bundle.getPreheat(), enrollment );\n             programInstance.setLastUpdated( now );\n             programInstance.setLastUpdatedAtClient( now );\n             programInstance.setLastUpdatedBy( bundle.getUser() );\n \n+            TrackerObjectReport objectReport = new TrackerObjectReport( TrackerType.ENROLLMENT,\n+                programInstance.getUid(), idx );\n+            typeReport.addObjectReport( objectReport );\n+\n             session.persist( programInstance );\n+\n             bundle.getPreheat().putEnrollments( bundle.getIdentifier(), Collections.singletonList( programInstance ) );\n \n             handleTrackedEntityAttributeValues( session, bundle.getPreheat(), enrollment.getAttributes(),\n", "next_change": {"commit": "cb2ee65c0210c0d4b2bd8851789da8d4adfaf04d", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\nindex f93c73c7bb..54fdb91cd1 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n", "chunk": "@@ -272,6 +351,15 @@ public class DefaultTrackerBundleService\n                 programInstance.getUid(), idx );\n             typeReport.addObjectReport( objectReport );\n \n+            if ( programInstance.getId() == 0 )\n+            {\n+                typeReport.getStats().incCreated();\n+            }\n+            else\n+            {\n+                typeReport.getStats().incUpdated();\n+            }\n+\n             session.persist( programInstance );\n \n             bundle.getPreheat().putEnrollments( bundle.getIdentifier(), Collections.singletonList( programInstance ) );\n", "next_change": {"commit": "1f0559c94f01b1497116fe5ba2e19f28f072a879", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\nindex 54fdb91cd1..502b7ce86f 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n", "chunk": "@@ -266,399 +242,4 @@ public class DefaultTrackerBundleService\n \n         return bundleReport;\n     }\n-\n-    private TrackerTypeReport handleTrackedEntities( Session session, TrackerBundle bundle )\n-    {\n-        List<TrackedEntity> trackedEntities = bundle.getTrackedEntities();\n-        TrackerTypeReport typeReport = new TrackerTypeReport( TrackerType.TRACKED_ENTITY );\n-\n-        trackedEntities.forEach( o -> bundleHooks.forEach( hook -> hook.preCreate( TrackedEntity.class, o, bundle ) ) );\n-        session.flush();\n-\n-        Date now = new Date();\n-\n-        for ( int idx = 0; idx < trackedEntities.size(); idx++ )\n-        {\n-            TrackedEntity trackedEntity = trackedEntities.get( idx );\n-\n-            TrackedEntityInstance tei = teConverter.from( bundle.getPreheat(), trackedEntity );\n-            tei.setLastUpdated( now );\n-            tei.setLastUpdatedAtClient( now );\n-            tei.setLastUpdatedBy( bundle.getUser() );\n-\n-            TrackerObjectReport objectReport = new TrackerObjectReport( TrackerType.TRACKED_ENTITY, tei.getUid(), idx );\n-            typeReport.addObjectReport( objectReport );\n-\n-            if ( tei.getId() == 0 )\n-            {\n-                typeReport.getStats().incCreated();\n-            }\n-            else\n-            {\n-                typeReport.getStats().incUpdated();\n-            }\n-\n-            session.persist( tei );\n-\n-            bundle.getPreheat().putTrackedEntities( bundle.getIdentifier(), Collections.singletonList( tei ) );\n-\n-            handleTrackedEntityAttributeValues( session, bundle.getPreheat(), trackedEntity.getAttributes(), tei );\n-\n-            if ( FlushMode.OBJECT == bundle.getFlushMode() )\n-            {\n-                session.flush();\n-            }\n-        }\n-\n-        session.flush();\n-\n-        trackedEntities\n-            .forEach( o -> bundleHooks.forEach( hook ->\n-                hook.postCreate( TrackedEntity.class, o, bundle ) ) );\n-\n-        return typeReport;\n-    }\n-\n-    private TrackerTypeReport handleEnrollments( Session session, TrackerBundle bundle )\n-    {\n-        List<Enrollment> enrollments = bundle.getEnrollments();\n-        TrackerTypeReport typeReport = new TrackerTypeReport( TrackerType.ENROLLMENT );\n-\n-        enrollments.forEach( o -> bundleHooks.forEach( hook -> hook.preCreate( Enrollment.class, o, bundle ) ) );\n-        session.flush();\n-\n-        Date now = new Date();\n-\n-        for ( int idx = 0; idx < enrollments.size(); idx++ )\n-        {\n-            Enrollment enrollment = enrollments.get( idx );\n-\n-            ProgramInstance programInstance = enrollmentConverter.from( bundle.getPreheat(), enrollment );\n-\n-            if ( !programInstance.getComments().isEmpty() )\n-            {\n-                for ( TrackedEntityComment comment : programInstance.getComments() )\n-                {\n-                    this.trackedEntityCommentService.addTrackedEntityComment( comment );\n-                }\n-            }\n-\n-            programInstance.setLastUpdated( now );\n-            programInstance.setLastUpdatedAtClient( now );\n-            programInstance.setLastUpdatedBy( bundle.getUser() );\n-\n-            TrackerObjectReport objectReport = new TrackerObjectReport( TrackerType.ENROLLMENT,\n-                programInstance.getUid(), idx );\n-            typeReport.addObjectReport( objectReport );\n-\n-            if ( programInstance.getId() == 0 )\n-            {\n-                typeReport.getStats().incCreated();\n-            }\n-            else\n-            {\n-                typeReport.getStats().incUpdated();\n-            }\n-\n-            session.persist( programInstance );\n-\n-            bundle.getPreheat().putEnrollments( bundle.getIdentifier(), Collections.singletonList( programInstance ) );\n-\n-            handleTrackedEntityAttributeValues( session, bundle.getPreheat(), enrollment.getAttributes(),\n-                programInstance.getEntityInstance() );\n-\n-            if ( FlushMode.OBJECT == bundle.getFlushMode() )\n-            {\n-                session.flush();\n-            }\n-\n-            if ( !bundle.isSkipSideEffects() )\n-            {\n-                TrackerSideEffectDataBundle sideEffectDataBundle = TrackerSideEffectDataBundle.builder()\n-                    .klass( ProgramInstance.class )\n-                    .enrollmentRuleEffects( bundle.getEnrollmentRuleEffects() )\n-                    .eventRuleEffects( bundle.getEventRuleEffects() )\n-                    .object( programInstance )\n-                    .importStrategy( bundle.getImportStrategy() )\n-                    .accessedBy( bundle.getUsername() )\n-                    .build();\n-\n-                sideEffectHandlers.forEach( handler -> handler.handleSideEffect( sideEffectDataBundle ) );\n-            }\n-        }\n-\n-        session.flush();\n-        enrollments.forEach( o -> bundleHooks.forEach( hook -> hook.postCreate( Enrollment.class, o, bundle ) ) );\n-\n-        return typeReport;\n-    }\n-\n-    private TrackerTypeReport handleEvents( Session session, TrackerBundle bundle )\n-    {\n-        List<Event> events = bundle.getEvents();\n-        TrackerTypeReport typeReport = new TrackerTypeReport( TrackerType.EVENT );\n-\n-        events.forEach( o -> bundleHooks.forEach( hook -> hook.preCreate( Event.class, o, bundle ) ) );\n-        session.flush();\n-\n-        for ( int idx = 0; idx < events.size(); idx++ )\n-        {\n-            Event event = events.get( idx );\n-\n-            ProgramStageInstance programStageInstance = eventConverter.from( bundle.getPreheat(), event );\n-\n-            if ( !programStageInstance.getComments().isEmpty() )\n-            {\n-                for ( TrackedEntityComment comment : programStageInstance.getComments() )\n-                {\n-                    this.trackedEntityCommentService.addTrackedEntityComment( comment );\n-                }\n-            }\n-\n-            Date now = new Date();\n-            programStageInstance.setLastUpdated( now );\n-            programStageInstance.setLastUpdatedAtClient( now );\n-            programStageInstance.setLastUpdatedBy( bundle.getUser() );\n-\n-            TrackerObjectReport objectReport = new TrackerObjectReport( TrackerType.EVENT,\n-                programStageInstance.getUid(), idx );\n-            typeReport.addObjectReport( objectReport );\n-\n-            handleDataValues( session, bundle.getPreheat(), event.getDataValues(), programStageInstance );\n-\n-            if ( programStageInstance.getId() == 0 )\n-            {\n-                typeReport.getStats().incCreated();\n-            }\n-            else\n-            {\n-                typeReport.getStats().incUpdated();\n-            }\n-\n-            session.persist( programStageInstance );\n-\n-            bundle.getPreheat().putEvents( bundle.getIdentifier(), Collections.singletonList( programStageInstance ) );\n-\n-            if ( FlushMode.OBJECT == bundle.getFlushMode() )\n-            {\n-                session.flush();\n-            }\n-\n-            if ( !bundle.isSkipSideEffects() )\n-            {\n-                TrackerSideEffectDataBundle sideEffectDataBundle = TrackerSideEffectDataBundle.builder()\n-                    .klass( ProgramStageInstance.class )\n-                    .enrollmentRuleEffects( bundle.getEnrollmentRuleEffects() )\n-                    .eventRuleEffects( bundle.getEventRuleEffects() )\n-                    .object( programStageInstance )\n-                    .importStrategy( bundle.getImportStrategy() )\n-                    .accessedBy( bundle.getUsername() )\n-                    .build();\n-\n-                sideEffectHandlers.forEach( handler -> handler.handleSideEffect( sideEffectDataBundle ) );\n-            }\n-        }\n-\n-        session.flush();\n-        events.forEach( o -> bundleHooks.forEach( hook -> hook.postCreate( Event.class, o, bundle ) ) );\n-\n-        return typeReport;\n-    }\n-\n-    private TrackerTypeReport handleRelationships( Session session, TrackerBundle bundle )\n-    {\n-        List<Relationship> relationships = bundle.getRelationships();\n-        TrackerTypeReport typeReport = new TrackerTypeReport( TrackerType.RELATIONSHIP );\n-\n-        relationships.forEach( o -> bundleHooks.forEach( hook -> hook.preCreate( Relationship.class, o, bundle ) ) );\n-\n-        for ( int idx = 0; idx < relationships.size(); idx++ )\n-        {\n-            org.hisp.dhis.relationship.Relationship relationship = relationshipConverter\n-                .from( bundle.getPreheat(), relationships.get( idx ) );\n-            Date now = new Date();\n-            relationship.setLastUpdated( now );\n-            relationship.setLastUpdatedBy( bundle.getUser() );\n-\n-            TrackerObjectReport objectReport = new TrackerObjectReport( TrackerType.RELATIONSHIP, relationship.getUid(),\n-                idx );\n-            typeReport.addObjectReport( objectReport );\n-\n-            if ( relationship.getId() == 0 )\n-            {\n-                typeReport.getStats().incCreated();\n-            }\n-            else\n-            {\n-                typeReport.getStats().incUpdated();\n-            }\n-\n-            session.persist( relationship );\n-\n-            if ( FlushMode.OBJECT == bundle.getFlushMode() )\n-            {\n-                session.flush();\n-            }\n-\n-            typeReport.getStats().incCreated();\n-        }\n-\n-        session.flush();\n-\n-        relationships.forEach( o -> bundleHooks.forEach( hook -> hook.postCreate( Relationship.class, o, bundle ) ) );\n-\n-        return typeReport;\n-    }\n-\n-    // -----------------------------------------------------------------------------------\n-    // Utility Methods\n-    // -----------------------------------------------------------------------------------\n-\n-    private void handleTrackedEntityAttributeValues( Session session, TrackerPreheat preheat,\n-        List<Attribute> payloadAttributes, TrackedEntityInstance trackedEntityInstance )\n-    {\n-        Map<String, TrackedEntityAttributeValue> attributeValueDBMap = trackedEntityInstance\n-            .getTrackedEntityAttributeValues()\n-            .stream()\n-            .collect( Collectors.toMap( teav -> teav.getAttribute().getUid(), Function.identity() ) );\n-\n-        for ( Attribute at : payloadAttributes )\n-        {\n-            TrackedEntityAttribute attribute = preheat.get( TrackerIdScheme.UID, TrackedEntityAttribute.class,\n-                at.getAttribute() );\n-\n-            checkNotNull( attribute,\n-                \"Attribute should never be NULL here if validation is enforced before commit.\" );\n-\n-            TrackedEntityAttributeValue attributeValue = attributeValueDBMap.getOrDefault( at.getAttribute(),\n-                new TrackedEntityAttributeValue() );\n-\n-            attributeValue\n-                .setAttribute( attribute )\n-                .setEntityInstance( trackedEntityInstance )\n-                .setValue( at.getValue() )\n-                .setStoredBy( at.getStoredBy() );\n-\n-            // We cannot use attributeValue.getValue() because it uses encryption logic\n-            // So we need to use at.getValue()\n-            if ( StringUtils.isEmpty( at.getValue() ) )\n-            {\n-                if ( attribute.getValueType() == ValueType.FILE_RESOURCE )\n-                {\n-                    unassignFileResource( session, preheat, attributeValueDBMap.get( at.getAttribute() ).getValue() );\n-                }\n-                session.remove( attributeValue );\n-            }\n-            else\n-            {\n-                if ( attribute.getValueType() == ValueType.FILE_RESOURCE )\n-                {\n-                    assignFileResource( session, preheat, attributeValue.getValue() );\n-                }\n-                session.persist( attributeValue );\n-            }\n-\n-            if ( attributeValue.getAttribute().isGenerated() && attributeValue.getAttribute().getTextPattern() != null )\n-            {\n-                reservedValueService.useReservedValue( attributeValue.getAttribute().getTextPattern(),\n-                    attributeValue.getValue() );\n-            }\n-        }\n-    }\n-\n-    private void handleDataValues( Session session, TrackerPreheat preheat, Set<DataValue> payloadDataValues,\n-        ProgramStageInstance psi )\n-    {\n-        Map<String, EventDataValue> dataValueDBMap = psi\n-            .getEventDataValues()\n-            .stream()\n-            .collect( Collectors.toMap( dv -> dv.getDataElement(), Function.identity() ) );\n-\n-        for ( DataValue dv : payloadDataValues )\n-        {\n-            DataElement dateElement = preheat.get( TrackerIdScheme.UID, DataElement.class, dv.getDataElement() );\n-\n-            checkNotNull( dateElement,\n-                \"Data element should never be NULL here if validation is enforced before commit.\" );\n-\n-            EventDataValue eventDataValue = dataValueDBMap.getOrDefault( dv.getDataElement(), new EventDataValue() );\n-\n-            eventDataValue.setDataElement( dateElement.getUid() );\n-            eventDataValue.setValue( dv.getValue() );\n-            eventDataValue.setStoredBy( dv.getStoredBy() );\n-\n-            try\n-            {\n-                eventDataValue.setCreated( new SimpleDateFormat( \"yyyy-MM-dd\" ).parse( dv.getCreatedAt() ) );\n-                eventDataValue.setLastUpdated( new SimpleDateFormat( \"yyyy-MM-dd\" ).parse( dv.getUpdatedAt() ) );\n-            }\n-            catch ( ParseException e )\n-            {\n-                // Created and updated dates are already validated.\n-                // This catch should never be reached\n-                e.printStackTrace();\n-            }\n-\n-            if ( StringUtils.isEmpty( eventDataValue.getValue() ) )\n-            {\n-                if ( dateElement.isFileType() )\n-                {\n-                    unassignFileResource( session, preheat, dataValueDBMap.get( dv.getDataElement() ).getValue() );\n-                }\n-                psi.getEventDataValues().remove( eventDataValue );\n-            }\n-            else\n-            {\n-                if ( dateElement.isFileType() )\n-                {\n-                    assignFileResource( session, preheat, eventDataValue.getValue() );\n-                }\n-                psi.getEventDataValues().add( eventDataValue );\n-            }\n-        }\n-    }\n-\n-    private void assignFileResource( Session session, TrackerPreheat preheat, String fr )\n-    {\n-        assignFileResource( session, preheat, fr, true );\n-    }\n-\n-    private void unassignFileResource( Session session, TrackerPreheat preheat, String fr )\n-    {\n-        assignFileResource( session, preheat, fr, false );\n-    }\n-\n-    private void assignFileResource( Session session, TrackerPreheat preheat, String fr, boolean isAssign )\n-    {\n-        FileResource fileResource = preheat.get( TrackerIdScheme.UID, FileResource.class, fr );\n-\n-        if ( fileResource == null )\n-        {\n-            return;\n-        }\n-\n-        fileResource.setAssigned( isAssign );\n-        session.persist( fileResource );\n-    }\n-\n-    private User getUser( User user, String userUid )\n-    {\n-        if ( user != null ) // \u0131f user already set, reload the user to make sure its loaded in the current\n-        // tx\n-        {\n-            return identifiableObjectManager.get( User.class, user.getUid() );\n-        }\n-\n-        if ( !StringUtils.isEmpty( userUid ) )\n-        {\n-            user = identifiableObjectManager.get( User.class, userUid );\n-        }\n-\n-        if ( user == null )\n-        {\n-            user = currentUserService.getCurrentUser();\n-        }\n-\n-        return user;\n-    }\n }\n", "next_change": {"commit": "8c4a255176ac5e675c549db2065926fdbaf0290b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\nindex 502b7ce86f..915b7da07c 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n", "chunk": "@@ -235,10 +214,7 @@ public class DefaultTrackerBundleService\n \n         Stream.of( TrackerType.values() )\n             .forEach( t -> bundleReport.getTypeReportMap().put( t, DELETION_MAPPER.get( t )\n-            .apply( bundle, t ) ) );\n-\n-        dbmsManager.clearSession();\n-        cacheManager.clearCache();\n+                .apply( bundle, t ) ) );\n \n         return bundleReport;\n     }\n", "next_change": {"commit": "4c9e21a843bbdbd73b0aeaf99e2d0320ac0bb811", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\nindex 915b7da07c..8097ccd5b2 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n", "chunk": "@@ -212,7 +184,7 @@ public class DefaultTrackerBundleService\n             return bundleReport;\n         }\n \n-        Stream.of( TrackerType.values() )\n+        Stream.of( TrackerType.values() ).sorted( Collections.reverseOrder() )\n             .forEach( t -> bundleReport.getTypeReportMap().put( t, DELETION_MAPPER.get( t )\n                 .apply( bundle, t ) ) );\n \n", "next_change": {"commit": "e66352e7a1e54e17a7b1da3f71bfe6f924311705", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\nindex 8097ccd5b2..b240ddbcd2 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n", "chunk": "@@ -186,7 +171,7 @@ public class DefaultTrackerBundleService\n \n         Stream.of( TrackerType.values() ).sorted( Collections.reverseOrder() )\n             .forEach( t -> bundleReport.getTypeReportMap().put( t, DELETION_MAPPER.get( t )\n-                .apply( bundle, t ) ) );\n+                .apply( bundle ) ) );\n \n         return bundleReport;\n     }\n", "next_change": {"commit": "a7d5843c3d0da8b45bc96835e940185ed36788fc", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\nindex b240ddbcd2..b59218d004 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n", "chunk": "@@ -169,9 +157,12 @@ public class DefaultTrackerBundleService\n             return bundleReport;\n         }\n \n-        Stream.of( TrackerType.values() ).sorted( Collections.reverseOrder() )\n-            .forEach( t -> bundleReport.getTypeReportMap().put( t, DELETION_MAPPER.get( t )\n-                .apply( bundle ) ) );\n+        Map<TrackerType, TrackerTypeReport> report = bundleReport.getTypeReportMap();\n+        report.put( TrackerType.RELATIONSHIP, deletionService.deleteRelationShips( bundle ) );\n+        report.put( TrackerType.EVENT, deletionService.deleteEvents( bundle ) );\n+        report.put( TrackerType.ENROLLMENT, deletionService.deleteEnrollments( bundle ) );\n+        report.put( TrackerType.TRACKED_ENTITY,\n+            deletionService.deleteTrackedEntityInstances( bundle ) );\n \n         return bundleReport;\n     }\n", "next_change": {"commit": "e4b9a5c802805b26fe8255711d1f98e662f15c6d", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\nindex b59218d004..70a25b7718 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n", "chunk": "@@ -148,22 +146,19 @@ public class DefaultTrackerBundleService\n \n     @Override\n     @Transactional\n-    public TrackerBundleReport delete( TrackerBundle bundle )\n+    public PersistenceReport delete( TrackerBundle bundle )\n     {\n-        TrackerBundleReport bundleReport = new TrackerBundleReport();\n-\n         if ( TrackerBundleMode.VALIDATE == bundle.getImportMode() )\n         {\n-            return bundleReport;\n+            return PersistenceReport.emptyReport();\n         }\n \n-        Map<TrackerType, TrackerTypeReport> report = bundleReport.getTypeReportMap();\n-        report.put( TrackerType.RELATIONSHIP, deletionService.deleteRelationShips( bundle ) );\n-        report.put( TrackerType.EVENT, deletionService.deleteEvents( bundle ) );\n-        report.put( TrackerType.ENROLLMENT, deletionService.deleteEnrollments( bundle ) );\n-        report.put( TrackerType.TRACKED_ENTITY,\n-            deletionService.deleteTrackedEntityInstances( bundle ) );\n+        Map<TrackerType, TrackerTypeReport> reportMap = Map.of(\n+            TrackerType.RELATIONSHIP, deletionService.deleteRelationShips( bundle ),\n+            TrackerType.EVENT, deletionService.deleteEvents( bundle ),\n+            TrackerType.ENROLLMENT, deletionService.deleteEnrollments( bundle ),\n+            TrackerType.TRACKED_ENTITY, deletionService.deleteTrackedEntityInstances( bundle ) );\n \n-        return bundleReport;\n+        return new PersistenceReport( reportMap );\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "message": "Merge commit", "committedDate": null}, {"oid": "399526882c2fbbf5600922b3c3b6030420cf4e96", "committedDate": "2020-07-13 12:23:07 +0200", "message": "feat: Run rule engine rules in new importer [DHIS2-7310]"}, {"oid": "2ed799f33ca26b918ed60473a3f097714f00492e", "committedDate": "2020-08-04 10:30:01 +0200", "message": "chore: Clean up code (#5877)"}, {"oid": "3e3dc98d92f0c13fb56cf17894eab06a78842133", "committedDate": "2020-08-04 17:20:37 +0200", "message": "feat: Enrollment/Events note persistence"}, {"oid": "c22c6f59ea7f5b3eec062a2f4eb00f2c4dae2a2d", "committedDate": "2020-08-04 17:20:41 +0200", "message": "chore: javadoc"}, {"oid": "969f25ca303dccefd5c10ed39fd8ca92a0bc6583", "committedDate": "2020-08-04 17:20:41 +0200", "message": "chore: add missing license headers"}, {"oid": "8374cb43e422eddc1f4c01bb715d8d285acc37be", "committedDate": "2020-08-10 11:38:43 +0200", "message": "Merge remote-tracking branch 'origin/master' into DHIS2-7310-merge"}, {"oid": "8d077aaaa69bc32d819217e4c90324d34541c2b0", "committedDate": "2020-08-12 10:22:42 +0200", "message": "Last fixes"}, {"oid": "6e1e12a2fe3c14f79781d64ec3f890f680cf49a4", "committedDate": "2020-08-24 15:50:03 +0200", "message": "feat: Added support for data values in event import [DHIS2-9270]"}, {"oid": "3b12f81c2a6fa41132216efee156f96f1874e91b", "committedDate": "2020-08-25 10:12:44 +0200", "message": "Fix code review comments"}, {"oid": "d70c4998dcb8cf4b7f356f73c3ecb1a5d4f9c352", "committedDate": "2020-08-25 18:05:54 +0200", "message": "feat: Add skipSideEffects check (#5986)"}, {"oid": "82a863c258aa34e592b309bb9d6081c4dc8f981b", "committedDate": "2020-08-27 14:46:58 +0200", "message": "feat: Add support for deletion of tracker objects [DHIS2-9085] (#5959)"}, {"oid": "cb2ee65c0210c0d4b2bd8851789da8d4adfaf04d", "committedDate": "2020-09-07 10:28:21 +0200", "message": "fix: [DHIS2-9287] Fix the stats in the import summary (#6062)"}, {"oid": "c2e0b3718cd8c7597ee5ec2e5193e7eafacf5827", "committedDate": "2020-09-08 09:47:19 +0200", "message": "fix: prevent Hibernate session errors with User object (#6063)"}, {"oid": "8aaeab2ee4dd7a9ffa927147931dff8609ef787a", "committedDate": "2020-09-23 15:33:34 +0200", "message": "chore: Remove unused imports (#6219)"}, {"oid": "87ef26080354e452d282d374e4dc6de996844a1c", "committedDate": "2020-10-02 09:53:53 +0200", "message": "test: Add integration tests for tracker side effects (#5833)"}, {"oid": "23a1aca18690c1c6a18fc0ab8cf734b637896d1b", "committedDate": "2020-11-05 11:00:30 +0100", "message": "fix: [DHIS2-9886] [DHIS2-9890] deserialization of primitive and null check for datavalue dates (#6566)"}, {"oid": "55bfd204388f6a780682802d3a0d205d191486ce", "committedDate": "2020-11-16 16:21:33 +0100", "message": "fix: incorrect relationship count in import report (#6660)"}, {"oid": "cc2736d02fb6c94cc2dfccaea482dcb82902d4be", "committedDate": "2020-11-18 09:55:24 +0100", "message": "fix: [DHIS2-9976] Remove stacktrace for exception raised by rule enigine calls (#6703)"}, {"oid": "4b8923e6eb12d67e7c17ef2af20af6fd02f2fd0b", "committedDate": "2020-11-23 09:15:08 +0100", "message": "feat: flag to disable rule engine (#6737)"}, {"oid": "1f0559c94f01b1497116fe5ba2e19f28f072a879", "committedDate": "2020-11-23 09:21:47 +0100", "message": "fix: invalid ignore count in Tracker Import stats (#6721)"}, {"oid": "3e799d196b8f73ad216ea100a07ddd5f7dfc53e0", "committedDate": "2020-11-30 16:37:14 +0100", "message": "fix: remove long running transaction during Tracker Import (#6782)"}, {"oid": "3ab88a5f4623a8c749246bedef34fcb926d185cb", "committedDate": "2020-12-08 10:40:14 +0100", "message": "fix: [DHIS2-7310] Move rule engine call and validations after bundle validation (#6843)"}, {"oid": "7098e9412b922ed70f8136f30c7d790e27bb43be", "committedDate": "2020-12-10 10:43:44 +0100", "message": "chore: Remove unused imports (#6875)"}, {"oid": "8c4a255176ac5e675c549db2065926fdbaf0290b", "committedDate": "2020-12-14 08:31:48 +0100", "message": "fix: Remove clearSession/clearCache inside transaction causing audit fail (#6876)"}, {"oid": "c4f1db1dab576bc73489a9e0a6d015acec2eab5b", "committedDate": "2020-12-15 15:09:02 +0100", "message": "feat: Tracker Import metadata cache (#6877)"}, {"oid": "3e25b9b834757233501b068c1fd96b5b68cc22f7", "committedDate": "2020-12-22 12:59:13 +0100", "message": "feat: Convert sharing objects to JSONB structure [DHIS2-5814]"}, {"oid": "679b32e817e4751c5ad4f0301a943104bf8f1d79", "committedDate": "2021-01-04 11:56:17 +0100", "message": "feat: Program rule assign action implentation (#7004)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "4c9e21a843bbdbd73b0aeaf99e2d0320ac0bb811", "committedDate": "2021-03-02 15:17:00 +0100", "message": "fix: Correct error report when using DELETE ImportStrategy (#7491)"}, {"oid": "00ba07c1c8555a473f261d56bffffa2b75d3c146", "committedDate": "2021-03-08 12:59:21 +0100", "message": "refactor: Remove unused bundle hook and fix tests [TECH-553] (#7539)"}, {"oid": "a4643bd1fe923092627bdd884e05e5dacc7a5911", "committedDate": "2021-04-30 14:46:25 +0200", "message": "refactor: Refactor rule engine service in the new importer to group events and enrollments in one call (#7925)"}, {"oid": "6901c3e799d56703ac02b01aff470f0594b71500", "committedDate": "2021-05-11 09:13:42 +0200", "message": "refactor: Refactor rule engine service in the new importer to group events and enrollments in one call (#7945)"}, {"oid": "e66352e7a1e54e17a7b1da3f71bfe6f924311705", "committedDate": "2021-07-20 08:49:34 +0200", "message": "fix: Include deleted object in the report object map [DHIS2-11196] (#8419)"}, {"oid": "d4ef7d2434dab562b93e092b3a4b27e56c9df1e1", "committedDate": "2021-10-04 09:47:50 +0200", "message": "fix: NTI: last updated date on TEI is not updated when underlying data changes [ DHIS2-11824 ] 2.38 (#8891)"}, {"oid": "7a29e754f286e13159ae833d5174d625e2fb1ffe", "committedDate": "2021-10-19 14:18:46 +0200", "message": "perf: AttributeValueService is no more an AbstractPersister dependency [DHIS2-11988] (#9069)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "a7d5843c3d0da8b45bc96835e940185ed36788fc", "committedDate": "2022-02-02 07:56:53 +0100", "message": "chore: reduce indirection in DefaultTrackerBundleService (#9711)"}, {"oid": "e4b9a5c802805b26fe8255711d1f98e662f15c6d", "committedDate": "2022-12-14 10:01:20 +0100", "message": "chore: Rename and clean up report model objects [TECH-14298] (#12525)"}, {"oid": "55f98482354fe2ab5b68c7a334e2933e3d2e7159", "committedDate": "2023-01-03 13:37:04 +0100", "message": "refactor: Clean up step to call rule engine [DHIS2-14408] (#12665)"}, {"oid": "4254ae8a51fb72bd28abfb208164f149cef48114", "committedDate": "2023-01-20 14:15:51 +0100", "message": "refactor: Refactor execution of enrollment rule actions [DHIS2-14408] (#12779)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg1MTYyOA==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r429851628", "body": "Can probably be safely removed", "bodyText": "Can probably be safely removed", "bodyHTML": "<p dir=\"auto\">Can probably be safely removed</p>", "author": "mortenoh", "createdAt": "2020-05-25T10:05:33Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java", "diffHunk": "@@ -329,11 +331,12 @@ private TrackerTypeReport handleEvents( Session session, TrackerBundle bundle )\n \n             Date now = new Date();\n \n-            if ( bundle.getImportStrategy().isCreate() )\n-            {\n-                programStageInstance.setCreated( now );\n-                programStageInstance.setCreatedAtClient( now );\n-            }\n+            //TODO: why? this is already done in preheater", "originalCommit": "a5f6d361402efd03ab461bcffa6bcc50be96c520", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3e77f4b8e597ba000a126e053ebb3af75e7a664f", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\nindex 0979d225cb..6027c971dd 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n", "chunk": "@@ -331,13 +318,6 @@ public class DefaultTrackerBundleService\n \n             Date now = new Date();\n \n-            //TODO: why? this is already done in preheater\n-//            if ( bundle.getImportStrategy().isCreateOrCreateAndUpdate() )\n-//            {\n-//                programStageInstance.setCreated( now );\n-//                programStageInstance.setCreatedAtClient( now );\n-//            }\n-\n             programStageInstance.setLastUpdated( now );\n             programStageInstance.setLastUpdatedAtClient( now );\n             programStageInstance.setLastUpdatedBy( bundle.getUser() );\n", "next_change": {"commit": "6ccecbd0f6da424e90174d23f11e6a6498621100", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\nindex 6027c971dd..13e7efd689 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n", "chunk": "@@ -310,28 +313,28 @@ public class DefaultTrackerBundleService\n         for ( int idx = 0; idx < events.size(); idx++ )\n         {\n             Event event = events.get( idx );\n-            ProgramStageInstance programStageInstance = eventTrackerConverterService.from( bundle.getPreheat(), event );\n-\n-            TrackerObjectReport objectReport = new TrackerObjectReport( TrackerType.EVENT,\n-                programStageInstance.getUid(), idx );\n-            typeReport.addObjectReport( objectReport );\n \n+            ProgramStageInstance programStageInstance = eventConverter.from( bundle.getPreheat(), event );\n             Date now = new Date();\n-\n             programStageInstance.setLastUpdated( now );\n             programStageInstance.setLastUpdatedAtClient( now );\n             programStageInstance.setLastUpdatedBy( bundle.getUser() );\n \n+            TrackerObjectReport objectReport = new TrackerObjectReport( TrackerType.EVENT, programStageInstance.getUid(), idx );\n+            typeReport.addObjectReport( objectReport );\n+\n             session.persist( programStageInstance );\n-            bundle.getPreheat().putEvents( bundle.getIdentifier(), Collections.singletonList( programStageInstance ) );\n \n-            typeReport.getStats().incCreated();\n+            bundle.getPreheat().putEvents( bundle.getIdentifier(), Collections.singletonList( programStageInstance ) );\n \n             if ( FlushMode.OBJECT == bundle.getFlushMode() )\n             {\n                 session.flush();\n             }\n \n+            // TODO: check create/update?\n+            typeReport.getStats().incCreated();\n+\n             TrackerSideEffectDataBundle sideEffectDataBundle = TrackerSideEffectDataBundle.builder()\n                 .klass( ProgramStageInstance.class )\n                 .enrollmentRuleEffects( bundle.getEnrollmentRuleEffects() )\n", "next_change": {"commit": "68c9d6c0ee6f2fd2462d63d9f3bef1a317f76ac6", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\nindex 13e7efd689..0fd8f01fb0 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n", "chunk": "@@ -332,7 +335,7 @@ public class DefaultTrackerBundleService\n                 session.flush();\n             }\n \n-            // TODO: check create/update?\n+            // TODO: Implement support for update and delete and rollback/decrement create etc.\n             typeReport.getStats().incCreated();\n \n             TrackerSideEffectDataBundle sideEffectDataBundle = TrackerSideEffectDataBundle.builder()\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\nindex 0979d225cb..f93c73c7bb 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n", "chunk": "@@ -323,35 +316,29 @@ public class DefaultTrackerBundleService\n         for ( int idx = 0; idx < events.size(); idx++ )\n         {\n             Event event = events.get( idx );\n-            ProgramStageInstance programStageInstance = eventTrackerConverterService.from( bundle.getPreheat(), event );\n-\n-            TrackerObjectReport objectReport = new TrackerObjectReport( TrackerType.EVENT,\n-                programStageInstance.getUid(), idx );\n-            typeReport.addObjectReport( objectReport );\n \n+            ProgramStageInstance programStageInstance = eventConverter.from( bundle.getPreheat(), event );\n             Date now = new Date();\n-\n-            //TODO: why? this is already done in preheater\n-//            if ( bundle.getImportStrategy().isCreateOrCreateAndUpdate() )\n-//            {\n-//                programStageInstance.setCreated( now );\n-//                programStageInstance.setCreatedAtClient( now );\n-//            }\n-\n             programStageInstance.setLastUpdated( now );\n             programStageInstance.setLastUpdatedAtClient( now );\n             programStageInstance.setLastUpdatedBy( bundle.getUser() );\n \n+            TrackerObjectReport objectReport = new TrackerObjectReport( TrackerType.EVENT,\n+                programStageInstance.getUid(), idx );\n+            typeReport.addObjectReport( objectReport );\n+\n             session.persist( programStageInstance );\n-            bundle.getPreheat().putEvents( bundle.getIdentifier(), Collections.singletonList( programStageInstance ) );\n \n-            typeReport.getStats().incCreated();\n+            bundle.getPreheat().putEvents( bundle.getIdentifier(), Collections.singletonList( programStageInstance ) );\n \n             if ( FlushMode.OBJECT == bundle.getFlushMode() )\n             {\n                 session.flush();\n             }\n \n+            // TODO: Implement support for update and delete and rollback/decrement create etc.\n+            typeReport.getStats().incCreated();\n+\n             TrackerSideEffectDataBundle sideEffectDataBundle = TrackerSideEffectDataBundle.builder()\n                 .klass( ProgramStageInstance.class )\n                 .enrollmentRuleEffects( bundle.getEnrollmentRuleEffects() )\n", "next_change": {"commit": "d70c4998dcb8cf4b7f356f73c3ecb1a5d4f9c352", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\nindex f93c73c7bb..201033411a 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n", "chunk": "@@ -339,20 +385,22 @@ public class DefaultTrackerBundleService\n             // TODO: Implement support for update and delete and rollback/decrement create etc.\n             typeReport.getStats().incCreated();\n \n-            TrackerSideEffectDataBundle sideEffectDataBundle = TrackerSideEffectDataBundle.builder()\n-                .klass( ProgramStageInstance.class )\n-                .enrollmentRuleEffects( bundle.getEnrollmentRuleEffects() )\n-                .eventRuleEffects( bundle.getEventRuleEffects() )\n-                .object( programStageInstance )\n-                .importStrategy( bundle.getImportStrategy() )\n-                .accessedBy( bundle.getUsername() )\n-                .build();\n-\n-            sideEffectHandlers.forEach( handler -> handler.handleSideEffect( sideEffectDataBundle ) );\n+            if ( !bundle.isSkipSideEffects() )\n+            {\n+                TrackerSideEffectDataBundle sideEffectDataBundle = TrackerSideEffectDataBundle.builder()\n+                    .klass( ProgramStageInstance.class )\n+                    .enrollmentRuleEffects( bundle.getEnrollmentRuleEffects() )\n+                    .eventRuleEffects( bundle.getEventRuleEffects() )\n+                    .object( programStageInstance )\n+                    .importStrategy( bundle.getImportStrategy() )\n+                    .accessedBy( bundle.getUsername() )\n+                    .build();\n+\n+                sideEffectHandlers.forEach( handler -> handler.handleSideEffect( sideEffectDataBundle ) );\n+            }\n         }\n \n         session.flush();\n-\n         events.forEach( o -> bundleHooks.forEach( hook -> hook.postCreate( Event.class, o, bundle ) ) );\n \n         return typeReport;\n", "next_change": {"commit": "87ef26080354e452d282d374e4dc6de996844a1c", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\nindex 201033411a..cfedda72e4 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n", "chunk": "@@ -383,26 +463,27 @@ public class DefaultTrackerBundleService\n             }\n \n             // TODO: Implement support for update and delete and rollback/decrement create etc.\n-            typeReport.getStats().incCreated();\n \n             if ( !bundle.isSkipSideEffects() )\n             {\n                 TrackerSideEffectDataBundle sideEffectDataBundle = TrackerSideEffectDataBundle.builder()\n                     .klass( ProgramStageInstance.class )\n-                    .enrollmentRuleEffects( bundle.getEnrollmentRuleEffects() )\n-                    .eventRuleEffects( bundle.getEventRuleEffects() )\n-                    .object( programStageInstance )\n+                    .enrollmentRuleEffects( new HashMap<>() )\n+                    .eventRuleEffects( sideEffectConverterService.toTrackerSideEffects( bundle.getEventRuleEffects() ) )\n+                    .object( programStageInstance.getUid() )\n                     .importStrategy( bundle.getImportStrategy() )\n                     .accessedBy( bundle.getUsername() )\n                     .build();\n \n-                sideEffectHandlers.forEach( handler -> handler.handleSideEffect( sideEffectDataBundle ) );\n+                sideEffectDataBundles.add( sideEffectDataBundle );\n             }\n         }\n \n         session.flush();\n         events.forEach( o -> bundleHooks.forEach( hook -> hook.postCreate( Event.class, o, bundle ) ) );\n \n+        typeReport.getSideEffectDataBundles().addAll( sideEffectDataBundles );\n+\n         return typeReport;\n     }\n \n", "next_change": {"commit": "1f0559c94f01b1497116fe5ba2e19f28f072a879", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\nindex cfedda72e4..502b7ce86f 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n", "chunk": "@@ -279,387 +242,4 @@ public class DefaultTrackerBundleService\n \n         return bundleReport;\n     }\n-\n-    private TrackerTypeReport handleTrackedEntities( Session session, TrackerBundle bundle )\n-    {\n-        List<TrackedEntity> trackedEntities = bundle.getTrackedEntities();\n-        TrackerTypeReport typeReport = new TrackerTypeReport( TrackerType.TRACKED_ENTITY );\n-\n-        trackedEntities.forEach( o -> bundleHooks.forEach( hook -> hook.preCreate( TrackedEntity.class, o, bundle ) ) );\n-        session.flush();\n-\n-        Date now = new Date();\n-\n-        for ( int idx = 0; idx < trackedEntities.size(); idx++ )\n-        {\n-            TrackedEntity trackedEntity = trackedEntities.get( idx );\n-\n-            TrackedEntityInstance tei = teConverter.from( bundle.getPreheat(), trackedEntity );\n-            tei.setLastUpdated( now );\n-            tei.setLastUpdatedAtClient( now );\n-            tei.setLastUpdatedBy( bundle.getUser() );\n-\n-            TrackerObjectReport objectReport = new TrackerObjectReport( TrackerType.TRACKED_ENTITY, tei.getUid(), idx );\n-            typeReport.addObjectReport( objectReport );\n-\n-            if ( tei.getId() == 0 )\n-            {\n-                typeReport.getStats().incCreated();\n-            }\n-            else\n-            {\n-                typeReport.getStats().incUpdated();\n-            }\n-\n-            session.persist( tei );\n-\n-            bundle.getPreheat().putTrackedEntities( bundle.getIdentifier(), Collections.singletonList( tei ) );\n-\n-            handleTrackedEntityAttributeValues( session, bundle.getPreheat(), trackedEntity.getAttributes(), tei );\n-\n-            if ( FlushMode.OBJECT == bundle.getFlushMode() )\n-            {\n-                session.flush();\n-            }\n-        }\n-\n-        session.flush();\n-        trackedEntities.forEach( o -> bundleHooks.forEach( hook -> hook.postCreate( TrackedEntity.class, o, bundle ) ) );\n-\n-        return typeReport;\n-    }\n-\n-    private TrackerTypeReport handleEnrollments( Session session, TrackerBundle bundle )\n-    {\n-        List<TrackerSideEffectDataBundle> sideEffectDataBundles = new ArrayList<>();\n-\n-        List<Enrollment> enrollments = bundle.getEnrollments();\n-        TrackerTypeReport typeReport = new TrackerTypeReport( TrackerType.ENROLLMENT );\n-\n-        enrollments.forEach( o -> bundleHooks.forEach( hook -> hook.preCreate( Enrollment.class, o, bundle ) ) );\n-        session.flush();\n-\n-        Date now = new Date();\n-\n-        for ( int idx = 0; idx < enrollments.size(); idx++ )\n-        {\n-            Enrollment enrollment = enrollments.get( idx );\n-\n-            ProgramInstance programInstance = enrollmentConverter.from( bundle.getPreheat(), enrollment );\n-\n-            if ( !programInstance.getComments().isEmpty() )\n-            {\n-                for ( TrackedEntityComment comment : programInstance.getComments() )\n-                {\n-                    this.trackedEntityCommentService.addTrackedEntityComment( comment );\n-                }\n-            }\n-\n-            programInstance.setLastUpdated( now );\n-            programInstance.setLastUpdatedAtClient( now );\n-            programInstance.setLastUpdatedBy( bundle.getUser() );\n-\n-            TrackerObjectReport objectReport = new TrackerObjectReport( TrackerType.ENROLLMENT,\n-                programInstance.getUid(), idx );\n-            typeReport.addObjectReport( objectReport );\n-\n-            if ( programInstance.getId() == 0 )\n-            {\n-                typeReport.getStats().incCreated();\n-            }\n-            else\n-            {\n-                typeReport.getStats().incUpdated();\n-            }\n-\n-            session.persist( programInstance );\n-\n-            bundle.getPreheat().putEnrollments( bundle.getIdentifier(), Collections.singletonList( programInstance ) );\n-\n-            handleTrackedEntityAttributeValues( session, bundle.getPreheat(), enrollment.getAttributes(),\n-                programInstance.getEntityInstance() );\n-\n-            if ( FlushMode.OBJECT == bundle.getFlushMode() )\n-            {\n-                session.flush();\n-            }\n-\n-            // TODO: Implement support for update and delete and rollback/decrement create etc.\n-\n-            if ( !bundle.isSkipSideEffects() )\n-            {\n-                TrackerSideEffectDataBundle sideEffectDataBundle = TrackerSideEffectDataBundle.builder()\n-                        .klass( ProgramInstance.class )\n-                        .enrollmentRuleEffects( sideEffectConverterService.toTrackerSideEffects( bundle.getEnrollmentRuleEffects() ) )\n-                        .eventRuleEffects( new HashMap<>() )\n-                        .object( programInstance.getUid() )\n-                        .importStrategy( bundle.getImportStrategy() )\n-                        .accessedBy( bundle.getUsername() )\n-                        .build();\n-\n-                sideEffectDataBundles.add( sideEffectDataBundle );\n-            }\n-        }\n-\n-        session.flush();\n-        enrollments.forEach( o -> bundleHooks.forEach( hook -> hook.postCreate( Enrollment.class, o, bundle ) ) );\n-\n-        typeReport.getSideEffectDataBundles().addAll( sideEffectDataBundles );\n-\n-        return typeReport;\n-    }\n-\n-    private TrackerTypeReport handleEvents( Session session, TrackerBundle bundle )\n-    {\n-        List<TrackerSideEffectDataBundle> sideEffectDataBundles = new ArrayList<>();\n-\n-        List<Event> events = bundle.getEvents();\n-        TrackerTypeReport typeReport = new TrackerTypeReport( TrackerType.EVENT );\n-\n-        events.forEach( o -> bundleHooks.forEach( hook -> hook.preCreate( Event.class, o, bundle ) ) );\n-        session.flush();\n-\n-        for ( int idx = 0; idx < events.size(); idx++ )\n-        {\n-            Event event = events.get( idx );\n-\n-            ProgramStageInstance programStageInstance = eventConverter.from( bundle.getPreheat(), event );\n-\n-            if ( !programStageInstance.getComments().isEmpty() )\n-            {\n-                for ( TrackedEntityComment comment : programStageInstance.getComments() )\n-                {\n-                    this.trackedEntityCommentService.addTrackedEntityComment( comment );\n-                }\n-            }\n-\n-            Date now = new Date();\n-            programStageInstance.setLastUpdated( now );\n-            programStageInstance.setLastUpdatedAtClient( now );\n-            programStageInstance.setLastUpdatedBy( bundle.getUser() );\n-\n-            TrackerObjectReport objectReport = new TrackerObjectReport( TrackerType.EVENT,\n-                programStageInstance.getUid(), idx );\n-            typeReport.addObjectReport( objectReport );\n-\n-            handleDataValues( session, bundle.getPreheat(), event.getDataValues(), programStageInstance );\n-\n-            if ( programStageInstance.getId() == 0 )\n-            {\n-                typeReport.getStats().incCreated();\n-            }\n-            else\n-            {\n-                typeReport.getStats().incUpdated();\n-            }\n-\n-            session.persist( programStageInstance );\n-\n-            bundle.getPreheat().putEvents( bundle.getIdentifier(), Collections.singletonList( programStageInstance ) );\n-\n-            if ( FlushMode.OBJECT == bundle.getFlushMode() )\n-            {\n-                session.flush();\n-            }\n-\n-            // TODO: Implement support for update and delete and rollback/decrement create etc.\n-\n-            if ( !bundle.isSkipSideEffects() )\n-            {\n-                TrackerSideEffectDataBundle sideEffectDataBundle = TrackerSideEffectDataBundle.builder()\n-                    .klass( ProgramStageInstance.class )\n-                    .enrollmentRuleEffects( new HashMap<>() )\n-                    .eventRuleEffects( sideEffectConverterService.toTrackerSideEffects( bundle.getEventRuleEffects() ) )\n-                    .object( programStageInstance.getUid() )\n-                    .importStrategy( bundle.getImportStrategy() )\n-                    .accessedBy( bundle.getUsername() )\n-                    .build();\n-\n-                sideEffectDataBundles.add( sideEffectDataBundle );\n-            }\n-        }\n-\n-        session.flush();\n-        events.forEach( o -> bundleHooks.forEach( hook -> hook.postCreate( Event.class, o, bundle ) ) );\n-\n-        typeReport.getSideEffectDataBundles().addAll( sideEffectDataBundles );\n-\n-        return typeReport;\n-    }\n-\n-    private TrackerTypeReport handleRelationships( Session session, TrackerBundle bundle )\n-    {\n-        List<Relationship> relationships = bundle.getRelationships();\n-        TrackerTypeReport typeReport = new TrackerTypeReport( TrackerType.RELATIONSHIP );\n-\n-        relationships.forEach( o -> bundleHooks.forEach( hook -> hook.preCreate( Relationship.class, o, bundle ) ) );\n-\n-        for ( int idx = 0; idx < relationships.size(); idx++ )\n-        {\n-            org.hisp.dhis.relationship.Relationship relationship = relationshipConverter\n-                .from( bundle.getPreheat(), relationships.get( idx ) );\n-            Date now = new Date();\n-            relationship.setLastUpdated( now );\n-            relationship.setLastUpdatedBy( bundle.getUser() );\n-\n-            TrackerObjectReport objectReport = new TrackerObjectReport( TrackerType.RELATIONSHIP, relationship.getUid(),\n-                idx );\n-            typeReport.addObjectReport( objectReport );\n-\n-            if ( relationship.getId() == 0 )\n-            {\n-                typeReport.getStats().incCreated();\n-            }\n-            else\n-            {\n-                typeReport.getStats().incUpdated();\n-            }\n-\n-            session.persist( relationship );\n-\n-            if ( FlushMode.OBJECT == bundle.getFlushMode() )\n-            {\n-                session.flush();\n-            }\n-\n-            typeReport.getStats().incCreated();\n-        }\n-\n-        session.flush();\n-\n-        relationships.forEach( o -> bundleHooks.forEach( hook -> hook.postCreate( Relationship.class, o, bundle ) ) );\n-\n-        return typeReport;\n-    }\n-\n-    // -----------------------------------------------------------------------------------\n-    // Utility Methods\n-    // -----------------------------------------------------------------------------------\n-\n-    private void handleTrackedEntityAttributeValues( Session session, TrackerPreheat preheat,\n-        List<Attribute> payloadAttributes, TrackedEntityInstance trackedEntityInstance )\n-    {\n-        Map<String, TrackedEntityAttributeValue> attributeValueDBMap = trackedEntityInstance\n-            .getTrackedEntityAttributeValues()\n-            .stream()\n-            .collect( Collectors.toMap(teav -> teav.getAttribute().getUid(), Function.identity() ) );\n-\n-        for ( Attribute at : payloadAttributes )\n-        {\n-            TrackedEntityAttribute attribute = preheat.get( TrackerIdScheme.UID, TrackedEntityAttribute.class,\n-                at.getAttribute() );\n-\n-            checkNotNull( attribute,\n-                \"Attribute should never be NULL here if validation is enforced before commit.\" );\n-\n-            TrackedEntityAttributeValue attributeValue = attributeValueDBMap.getOrDefault( at.getAttribute(),\n-                new TrackedEntityAttributeValue() );\n-\n-            attributeValue\n-                .setAttribute( attribute )\n-                .setEntityInstance( trackedEntityInstance )\n-                .setValue( at.getValue() )\n-                .setStoredBy( at.getStoredBy() );\n-\n-            // We cannot use attributeValue.getValue() because it uses encryption logic\n-            // So we need to use at.getValue()\n-            if ( StringUtils.isEmpty( at.getValue() ) )\n-            {\n-                if ( attribute.getValueType() == ValueType.FILE_RESOURCE )\n-                {\n-                    unassignFileResource( session, preheat, attributeValueDBMap.get( at.getAttribute() ).getValue() );\n-                }\n-                session.remove( attributeValue );\n-            }\n-            else\n-            {\n-                if ( attribute.getValueType() == ValueType.FILE_RESOURCE )\n-                {\n-                    assignFileResource( session, preheat, attributeValue.getValue() );\n-                }\n-                session.persist( attributeValue );\n-            }\n-\n-            if ( attributeValue.getAttribute().isGenerated() && attributeValue.getAttribute().getTextPattern() != null )\n-            {\n-                reservedValueService.useReservedValue( attributeValue.getAttribute().getTextPattern(),\n-                    attributeValue.getValue() );\n-            }\n-        }\n-    }\n-\n-    private void handleDataValues( Session session, TrackerPreheat preheat, Set<DataValue> payloadDataValues,\n-        ProgramStageInstance psi )\n-    {\n-        Map<String, EventDataValue> dataValueDBMap = psi\n-            .getEventDataValues()\n-            .stream()\n-            .collect( Collectors.toMap( dv -> dv.getDataElement(), Function.identity() ) );\n-\n-        for ( DataValue dv : payloadDataValues )\n-        {\n-            DataElement dateElement = preheat.get( TrackerIdScheme.UID, DataElement.class, dv.getDataElement() );\n-\n-            checkNotNull( dateElement,\n-                \"Data element should never be NULL here if validation is enforced before commit.\" );\n-\n-            EventDataValue eventDataValue = dataValueDBMap.getOrDefault( dv.getDataElement(), new EventDataValue() );\n-\n-            eventDataValue.setDataElement( dateElement.getUid() );\n-            eventDataValue.setValue( dv.getValue() );\n-            eventDataValue.setStoredBy( dv.getStoredBy() );\n-\n-            try\n-            {\n-                eventDataValue.setCreated( new SimpleDateFormat( \"yyyy-MM-dd\" ).parse( dv.getCreatedAt() ) );\n-                eventDataValue.setLastUpdated( new SimpleDateFormat( \"yyyy-MM-dd\" ).parse( dv.getUpdatedAt() ) );\n-            }\n-            catch ( ParseException e )\n-            {\n-                // Created and updated dates are already validated.\n-                // This catch should never be reached\n-                e.printStackTrace();\n-            }\n-\n-            if ( StringUtils.isEmpty( eventDataValue.getValue() ) )\n-            {\n-                if ( dateElement.isFileType() )\n-                {\n-                    unassignFileResource( session, preheat, dataValueDBMap.get( dv.getDataElement() ).getValue() );\n-                }\n-                psi.getEventDataValues().remove( eventDataValue );\n-            }\n-            else\n-            {\n-                if ( dateElement.isFileType() )\n-                {\n-                    assignFileResource( session, preheat, eventDataValue.getValue() );\n-                }\n-                psi.getEventDataValues().add( eventDataValue );\n-            }\n-        }\n-    }\n-\n-    private void assignFileResource( Session session, TrackerPreheat preheat, String fr )\n-    {\n-        assignFileResource( session, preheat, fr, true );\n-    }\n-\n-    private void unassignFileResource( Session session, TrackerPreheat preheat, String fr )\n-    {\n-        assignFileResource( session, preheat, fr, false );\n-    }\n-\n-    private void assignFileResource( Session session, TrackerPreheat preheat, String fr, boolean isAssign )\n-    {\n-        FileResource fileResource = preheat.get( TrackerIdScheme.UID, FileResource.class, fr );\n-\n-        if ( fileResource == null )\n-        {\n-            return;\n-        }\n-\n-        fileResource.setAssigned( isAssign );\n-        session.persist( fileResource );\n-    }\n }\n", "next_change": {"commit": "8c4a255176ac5e675c549db2065926fdbaf0290b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\nindex 502b7ce86f..915b7da07c 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n", "chunk": "@@ -235,10 +214,7 @@ public class DefaultTrackerBundleService\n \n         Stream.of( TrackerType.values() )\n             .forEach( t -> bundleReport.getTypeReportMap().put( t, DELETION_MAPPER.get( t )\n-            .apply( bundle, t ) ) );\n-\n-        dbmsManager.clearSession();\n-        cacheManager.clearCache();\n+                .apply( bundle, t ) ) );\n \n         return bundleReport;\n     }\n", "next_change": {"commit": "4c9e21a843bbdbd73b0aeaf99e2d0320ac0bb811", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\nindex 915b7da07c..8097ccd5b2 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n", "chunk": "@@ -212,7 +184,7 @@ public class DefaultTrackerBundleService\n             return bundleReport;\n         }\n \n-        Stream.of( TrackerType.values() )\n+        Stream.of( TrackerType.values() ).sorted( Collections.reverseOrder() )\n             .forEach( t -> bundleReport.getTypeReportMap().put( t, DELETION_MAPPER.get( t )\n                 .apply( bundle, t ) ) );\n \n", "next_change": {"commit": "e66352e7a1e54e17a7b1da3f71bfe6f924311705", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\nindex 8097ccd5b2..b240ddbcd2 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n", "chunk": "@@ -186,7 +171,7 @@ public class DefaultTrackerBundleService\n \n         Stream.of( TrackerType.values() ).sorted( Collections.reverseOrder() )\n             .forEach( t -> bundleReport.getTypeReportMap().put( t, DELETION_MAPPER.get( t )\n-                .apply( bundle, t ) ) );\n+                .apply( bundle ) ) );\n \n         return bundleReport;\n     }\n", "next_change": {"commit": "a7d5843c3d0da8b45bc96835e940185ed36788fc", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\nindex b240ddbcd2..b59218d004 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n", "chunk": "@@ -169,9 +157,12 @@ public class DefaultTrackerBundleService\n             return bundleReport;\n         }\n \n-        Stream.of( TrackerType.values() ).sorted( Collections.reverseOrder() )\n-            .forEach( t -> bundleReport.getTypeReportMap().put( t, DELETION_MAPPER.get( t )\n-                .apply( bundle ) ) );\n+        Map<TrackerType, TrackerTypeReport> report = bundleReport.getTypeReportMap();\n+        report.put( TrackerType.RELATIONSHIP, deletionService.deleteRelationShips( bundle ) );\n+        report.put( TrackerType.EVENT, deletionService.deleteEvents( bundle ) );\n+        report.put( TrackerType.ENROLLMENT, deletionService.deleteEnrollments( bundle ) );\n+        report.put( TrackerType.TRACKED_ENTITY,\n+            deletionService.deleteTrackedEntityInstances( bundle ) );\n \n         return bundleReport;\n     }\n", "next_change": {"commit": "e4b9a5c802805b26fe8255711d1f98e662f15c6d", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\nindex b59218d004..70a25b7718 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n", "chunk": "@@ -148,22 +146,19 @@ public class DefaultTrackerBundleService\n \n     @Override\n     @Transactional\n-    public TrackerBundleReport delete( TrackerBundle bundle )\n+    public PersistenceReport delete( TrackerBundle bundle )\n     {\n-        TrackerBundleReport bundleReport = new TrackerBundleReport();\n-\n         if ( TrackerBundleMode.VALIDATE == bundle.getImportMode() )\n         {\n-            return bundleReport;\n+            return PersistenceReport.emptyReport();\n         }\n \n-        Map<TrackerType, TrackerTypeReport> report = bundleReport.getTypeReportMap();\n-        report.put( TrackerType.RELATIONSHIP, deletionService.deleteRelationShips( bundle ) );\n-        report.put( TrackerType.EVENT, deletionService.deleteEvents( bundle ) );\n-        report.put( TrackerType.ENROLLMENT, deletionService.deleteEnrollments( bundle ) );\n-        report.put( TrackerType.TRACKED_ENTITY,\n-            deletionService.deleteTrackedEntityInstances( bundle ) );\n+        Map<TrackerType, TrackerTypeReport> reportMap = Map.of(\n+            TrackerType.RELATIONSHIP, deletionService.deleteRelationShips( bundle ),\n+            TrackerType.EVENT, deletionService.deleteEvents( bundle ),\n+            TrackerType.ENROLLMENT, deletionService.deleteEnrollments( bundle ),\n+            TrackerType.TRACKED_ENTITY, deletionService.deleteTrackedEntityInstances( bundle ) );\n \n-        return bundleReport;\n+        return new PersistenceReport( reportMap );\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "message": "Merge commit", "committedDate": null}, {"oid": "399526882c2fbbf5600922b3c3b6030420cf4e96", "committedDate": "2020-07-13 12:23:07 +0200", "message": "feat: Run rule engine rules in new importer [DHIS2-7310]"}, {"oid": "2ed799f33ca26b918ed60473a3f097714f00492e", "committedDate": "2020-08-04 10:30:01 +0200", "message": "chore: Clean up code (#5877)"}, {"oid": "3e3dc98d92f0c13fb56cf17894eab06a78842133", "committedDate": "2020-08-04 17:20:37 +0200", "message": "feat: Enrollment/Events note persistence"}, {"oid": "c22c6f59ea7f5b3eec062a2f4eb00f2c4dae2a2d", "committedDate": "2020-08-04 17:20:41 +0200", "message": "chore: javadoc"}, {"oid": "969f25ca303dccefd5c10ed39fd8ca92a0bc6583", "committedDate": "2020-08-04 17:20:41 +0200", "message": "chore: add missing license headers"}, {"oid": "8374cb43e422eddc1f4c01bb715d8d285acc37be", "committedDate": "2020-08-10 11:38:43 +0200", "message": "Merge remote-tracking branch 'origin/master' into DHIS2-7310-merge"}, {"oid": "8d077aaaa69bc32d819217e4c90324d34541c2b0", "committedDate": "2020-08-12 10:22:42 +0200", "message": "Last fixes"}, {"oid": "6e1e12a2fe3c14f79781d64ec3f890f680cf49a4", "committedDate": "2020-08-24 15:50:03 +0200", "message": "feat: Added support for data values in event import [DHIS2-9270]"}, {"oid": "3b12f81c2a6fa41132216efee156f96f1874e91b", "committedDate": "2020-08-25 10:12:44 +0200", "message": "Fix code review comments"}, {"oid": "d70c4998dcb8cf4b7f356f73c3ecb1a5d4f9c352", "committedDate": "2020-08-25 18:05:54 +0200", "message": "feat: Add skipSideEffects check (#5986)"}, {"oid": "82a863c258aa34e592b309bb9d6081c4dc8f981b", "committedDate": "2020-08-27 14:46:58 +0200", "message": "feat: Add support for deletion of tracker objects [DHIS2-9085] (#5959)"}, {"oid": "cb2ee65c0210c0d4b2bd8851789da8d4adfaf04d", "committedDate": "2020-09-07 10:28:21 +0200", "message": "fix: [DHIS2-9287] Fix the stats in the import summary (#6062)"}, {"oid": "c2e0b3718cd8c7597ee5ec2e5193e7eafacf5827", "committedDate": "2020-09-08 09:47:19 +0200", "message": "fix: prevent Hibernate session errors with User object (#6063)"}, {"oid": "8aaeab2ee4dd7a9ffa927147931dff8609ef787a", "committedDate": "2020-09-23 15:33:34 +0200", "message": "chore: Remove unused imports (#6219)"}, {"oid": "87ef26080354e452d282d374e4dc6de996844a1c", "committedDate": "2020-10-02 09:53:53 +0200", "message": "test: Add integration tests for tracker side effects (#5833)"}, {"oid": "23a1aca18690c1c6a18fc0ab8cf734b637896d1b", "committedDate": "2020-11-05 11:00:30 +0100", "message": "fix: [DHIS2-9886] [DHIS2-9890] deserialization of primitive and null check for datavalue dates (#6566)"}, {"oid": "55bfd204388f6a780682802d3a0d205d191486ce", "committedDate": "2020-11-16 16:21:33 +0100", "message": "fix: incorrect relationship count in import report (#6660)"}, {"oid": "cc2736d02fb6c94cc2dfccaea482dcb82902d4be", "committedDate": "2020-11-18 09:55:24 +0100", "message": "fix: [DHIS2-9976] Remove stacktrace for exception raised by rule enigine calls (#6703)"}, {"oid": "4b8923e6eb12d67e7c17ef2af20af6fd02f2fd0b", "committedDate": "2020-11-23 09:15:08 +0100", "message": "feat: flag to disable rule engine (#6737)"}, {"oid": "1f0559c94f01b1497116fe5ba2e19f28f072a879", "committedDate": "2020-11-23 09:21:47 +0100", "message": "fix: invalid ignore count in Tracker Import stats (#6721)"}, {"oid": "3e799d196b8f73ad216ea100a07ddd5f7dfc53e0", "committedDate": "2020-11-30 16:37:14 +0100", "message": "fix: remove long running transaction during Tracker Import (#6782)"}, {"oid": "3ab88a5f4623a8c749246bedef34fcb926d185cb", "committedDate": "2020-12-08 10:40:14 +0100", "message": "fix: [DHIS2-7310] Move rule engine call and validations after bundle validation (#6843)"}, {"oid": "7098e9412b922ed70f8136f30c7d790e27bb43be", "committedDate": "2020-12-10 10:43:44 +0100", "message": "chore: Remove unused imports (#6875)"}, {"oid": "8c4a255176ac5e675c549db2065926fdbaf0290b", "committedDate": "2020-12-14 08:31:48 +0100", "message": "fix: Remove clearSession/clearCache inside transaction causing audit fail (#6876)"}, {"oid": "c4f1db1dab576bc73489a9e0a6d015acec2eab5b", "committedDate": "2020-12-15 15:09:02 +0100", "message": "feat: Tracker Import metadata cache (#6877)"}, {"oid": "3e25b9b834757233501b068c1fd96b5b68cc22f7", "committedDate": "2020-12-22 12:59:13 +0100", "message": "feat: Convert sharing objects to JSONB structure [DHIS2-5814]"}, {"oid": "679b32e817e4751c5ad4f0301a943104bf8f1d79", "committedDate": "2021-01-04 11:56:17 +0100", "message": "feat: Program rule assign action implentation (#7004)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "4c9e21a843bbdbd73b0aeaf99e2d0320ac0bb811", "committedDate": "2021-03-02 15:17:00 +0100", "message": "fix: Correct error report when using DELETE ImportStrategy (#7491)"}, {"oid": "00ba07c1c8555a473f261d56bffffa2b75d3c146", "committedDate": "2021-03-08 12:59:21 +0100", "message": "refactor: Remove unused bundle hook and fix tests [TECH-553] (#7539)"}, {"oid": "a4643bd1fe923092627bdd884e05e5dacc7a5911", "committedDate": "2021-04-30 14:46:25 +0200", "message": "refactor: Refactor rule engine service in the new importer to group events and enrollments in one call (#7925)"}, {"oid": "6901c3e799d56703ac02b01aff470f0594b71500", "committedDate": "2021-05-11 09:13:42 +0200", "message": "refactor: Refactor rule engine service in the new importer to group events and enrollments in one call (#7945)"}, {"oid": "e66352e7a1e54e17a7b1da3f71bfe6f924311705", "committedDate": "2021-07-20 08:49:34 +0200", "message": "fix: Include deleted object in the report object map [DHIS2-11196] (#8419)"}, {"oid": "d4ef7d2434dab562b93e092b3a4b27e56c9df1e1", "committedDate": "2021-10-04 09:47:50 +0200", "message": "fix: NTI: last updated date on TEI is not updated when underlying data changes [ DHIS2-11824 ] 2.38 (#8891)"}, {"oid": "7a29e754f286e13159ae833d5174d625e2fb1ffe", "committedDate": "2021-10-19 14:18:46 +0200", "message": "perf: AttributeValueService is no more an AbstractPersister dependency [DHIS2-11988] (#9069)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "a7d5843c3d0da8b45bc96835e940185ed36788fc", "committedDate": "2022-02-02 07:56:53 +0100", "message": "chore: reduce indirection in DefaultTrackerBundleService (#9711)"}, {"oid": "e4b9a5c802805b26fe8255711d1f98e662f15c6d", "committedDate": "2022-12-14 10:01:20 +0100", "message": "chore: Rename and clean up report model objects [TECH-14298] (#12525)"}, {"oid": "55f98482354fe2ab5b68c7a334e2933e3d2e7159", "committedDate": "2023-01-03 13:37:04 +0100", "message": "refactor: Clean up step to call rule engine [DHIS2-14408] (#12665)"}, {"oid": "4254ae8a51fb72bd28abfb208164f149cef48114", "committedDate": "2023-01-20 14:15:51 +0100", "message": "refactor: Refactor execution of enrollment rule actions [DHIS2-14408] (#12779)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg1MTY5OA==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r429851698", "body": "Can probably be safely removed", "bodyText": "Can probably be safely removed", "bodyHTML": "<p dir=\"auto\">Can probably be safely removed</p>", "author": "mortenoh", "createdAt": "2020-05-25T10:05:43Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java", "diffHunk": "@@ -386,10 +389,11 @@ private TrackerTypeReport handleRelationships( Session session, TrackerBundle bu\n \n             Date now = new Date();\n \n-            if ( bundle.getImportStrategy().isCreate() )\n-            {\n-                toRelationship.setCreated( now );\n-            }\n+            //TODO: why? this is already done in preheater", "originalCommit": "a5f6d361402efd03ab461bcffa6bcc50be96c520", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3e77f4b8e597ba000a126e053ebb3af75e7a664f", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\nindex 0979d225cb..6027c971dd 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n", "chunk": "@@ -389,12 +369,6 @@ public class DefaultTrackerBundleService\n \n             Date now = new Date();\n \n-            //TODO: why? this is already done in preheater\n-//            if ( bundle.getImportStrategy().isCreateOrCreateAndUpdate() )\n-//            {\n-//                toRelationship.setCreated( now );\n-//            }\n-\n             toRelationship.setLastUpdated( now );\n             toRelationship.setLastUpdatedBy( bundle.getUser() );\n \n", "next_change": {"commit": "6ccecbd0f6da424e90174d23f11e6a6498621100", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\nindex 6027c971dd..13e7efd689 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n", "chunk": "@@ -359,28 +363,27 @@ public class DefaultTrackerBundleService\n \n         for ( int idx = 0; idx < relationships.size(); idx++ )\n         {\n-            Relationship relationship = relationships.get( idx );\n-            org.hisp.dhis.relationship.Relationship toRelationship = relationshipTrackerConverterService\n-                .from( bundle.getPreheat(), relationship );\n-\n-            TrackerObjectReport objectReport = new TrackerObjectReport( TrackerType.EVENT, toRelationship.getUid(),\n-                idx );\n-            typeReport.addObjectReport( objectReport );\n-\n+            org.hisp.dhis.relationship.Relationship relationship = relationshipConverter.from( bundle.getPreheat(), relationships.get( idx ) );\n             Date now = new Date();\n+            relationship.setLastUpdated( now );\n+            relationship.setLastUpdatedBy( bundle.getUser() );\n \n-            toRelationship.setLastUpdated( now );\n-            toRelationship.setLastUpdatedBy( bundle.getUser() );\n+            TrackerObjectReport objectReport = new TrackerObjectReport( TrackerType.EVENT, relationship.getUid(), idx );\n+            typeReport.addObjectReport( objectReport );\n \n-            session.persist( toRelationship );\n+            session.persist( relationship );\n             typeReport.getStats().incCreated();\n \n             if ( FlushMode.OBJECT == bundle.getFlushMode() )\n             {\n                 session.flush();\n             }\n+\n+            typeReport.getStats().incCreated();\n         }\n \n+        session.flush();\n+\n         relationships.forEach( o -> bundleHooks.forEach( hook -> hook.postCreate( Relationship.class, o, bundle ) ) );\n \n         return typeReport;\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\nindex 0979d225cb..f93c73c7bb 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n", "chunk": "@@ -379,34 +367,28 @@ public class DefaultTrackerBundleService\n \n         for ( int idx = 0; idx < relationships.size(); idx++ )\n         {\n-            Relationship relationship = relationships.get( idx );\n-            org.hisp.dhis.relationship.Relationship toRelationship = relationshipTrackerConverterService\n-                .from( bundle.getPreheat(), relationship );\n-\n-            TrackerObjectReport objectReport = new TrackerObjectReport( TrackerType.EVENT, toRelationship.getUid(),\n-                idx );\n-            typeReport.addObjectReport( objectReport );\n-\n+            org.hisp.dhis.relationship.Relationship relationship = relationshipConverter\n+                .from( bundle.getPreheat(), relationships.get( idx ) );\n             Date now = new Date();\n+            relationship.setLastUpdated( now );\n+            relationship.setLastUpdatedBy( bundle.getUser() );\n \n-            //TODO: why? this is already done in preheater\n-//            if ( bundle.getImportStrategy().isCreateOrCreateAndUpdate() )\n-//            {\n-//                toRelationship.setCreated( now );\n-//            }\n-\n-            toRelationship.setLastUpdated( now );\n-            toRelationship.setLastUpdatedBy( bundle.getUser() );\n+            TrackerObjectReport objectReport = new TrackerObjectReport( TrackerType.EVENT, relationship.getUid(), idx );\n+            typeReport.addObjectReport( objectReport );\n \n-            session.persist( toRelationship );\n+            session.persist( relationship );\n             typeReport.getStats().incCreated();\n \n             if ( FlushMode.OBJECT == bundle.getFlushMode() )\n             {\n                 session.flush();\n             }\n+\n+            typeReport.getStats().incCreated();\n         }\n \n+        session.flush();\n+\n         relationships.forEach( o -> bundleHooks.forEach( hook -> hook.postCreate( Relationship.class, o, bundle ) ) );\n \n         return typeReport;\n", "next_change": {"commit": "55bfd204388f6a780682802d3a0d205d191486ce", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\nindex f93c73c7bb..be90845727 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n", "chunk": "@@ -373,18 +502,25 @@ public class DefaultTrackerBundleService\n             relationship.setLastUpdated( now );\n             relationship.setLastUpdatedBy( bundle.getUser() );\n \n-            TrackerObjectReport objectReport = new TrackerObjectReport( TrackerType.EVENT, relationship.getUid(), idx );\n+            TrackerObjectReport objectReport = new TrackerObjectReport( TrackerType.RELATIONSHIP, relationship.getUid(),\n+                idx );\n             typeReport.addObjectReport( objectReport );\n \n+            if ( relationship.getId() == 0 )\n+            {\n+                typeReport.getStats().incCreated();\n+            }\n+            else\n+            {\n+                typeReport.getStats().incUpdated();\n+            }\n+\n             session.persist( relationship );\n-            typeReport.getStats().incCreated();\n \n             if ( FlushMode.OBJECT == bundle.getFlushMode() )\n             {\n                 session.flush();\n             }\n-\n-            typeReport.getStats().incCreated();\n         }\n \n         session.flush();\n", "next_change": {"commit": "1f0559c94f01b1497116fe5ba2e19f28f072a879", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\nindex be90845727..502b7ce86f 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n", "chunk": "@@ -279,390 +242,4 @@ public class DefaultTrackerBundleService\n \n         return bundleReport;\n     }\n-\n-    private TrackerTypeReport handleTrackedEntities( Session session, TrackerBundle bundle )\n-    {\n-        List<TrackedEntity> trackedEntities = bundle.getTrackedEntities();\n-        TrackerTypeReport typeReport = new TrackerTypeReport( TrackerType.TRACKED_ENTITY );\n-\n-        trackedEntities.forEach( o -> bundleHooks.forEach( hook -> hook.preCreate( TrackedEntity.class, o, bundle ) ) );\n-        session.flush();\n-\n-        Date now = new Date();\n-\n-        for ( int idx = 0; idx < trackedEntities.size(); idx++ )\n-        {\n-            TrackedEntity trackedEntity = trackedEntities.get( idx );\n-\n-            TrackedEntityInstance tei = teConverter.from( bundle.getPreheat(), trackedEntity );\n-            tei.setLastUpdated( now );\n-            tei.setLastUpdatedAtClient( now );\n-            tei.setLastUpdatedBy( bundle.getUser() );\n-\n-            TrackerObjectReport objectReport = new TrackerObjectReport( TrackerType.TRACKED_ENTITY, tei.getUid(), idx );\n-            typeReport.addObjectReport( objectReport );\n-\n-            if ( tei.getId() == 0 )\n-            {\n-                typeReport.getStats().incCreated();\n-            }\n-            else\n-            {\n-                typeReport.getStats().incUpdated();\n-            }\n-\n-            session.persist( tei );\n-\n-            bundle.getPreheat().putTrackedEntities( bundle.getIdentifier(), Collections.singletonList( tei ) );\n-\n-            handleTrackedEntityAttributeValues( session, bundle.getPreheat(), trackedEntity.getAttributes(), tei );\n-\n-            if ( FlushMode.OBJECT == bundle.getFlushMode() )\n-            {\n-                session.flush();\n-            }\n-        }\n-\n-        session.flush();\n-        trackedEntities.forEach( o -> bundleHooks.forEach( hook -> hook.postCreate( TrackedEntity.class, o, bundle ) ) );\n-\n-        return typeReport;\n-    }\n-\n-    private TrackerTypeReport handleEnrollments( Session session, TrackerBundle bundle )\n-    {\n-        List<TrackerSideEffectDataBundle> sideEffectDataBundles = new ArrayList<>();\n-\n-        List<Enrollment> enrollments = bundle.getEnrollments();\n-        TrackerTypeReport typeReport = new TrackerTypeReport( TrackerType.ENROLLMENT );\n-\n-        enrollments.forEach( o -> bundleHooks.forEach( hook -> hook.preCreate( Enrollment.class, o, bundle ) ) );\n-        session.flush();\n-\n-        Date now = new Date();\n-\n-        for ( int idx = 0; idx < enrollments.size(); idx++ )\n-        {\n-            Enrollment enrollment = enrollments.get( idx );\n-\n-            ProgramInstance programInstance = enrollmentConverter.from( bundle.getPreheat(), enrollment );\n-\n-            if ( !programInstance.getComments().isEmpty() )\n-            {\n-                for ( TrackedEntityComment comment : programInstance.getComments() )\n-                {\n-                    this.trackedEntityCommentService.addTrackedEntityComment( comment );\n-                }\n-            }\n-\n-            programInstance.setLastUpdated( now );\n-            programInstance.setLastUpdatedAtClient( now );\n-            programInstance.setLastUpdatedBy( bundle.getUser() );\n-\n-            TrackerObjectReport objectReport = new TrackerObjectReport( TrackerType.ENROLLMENT,\n-                programInstance.getUid(), idx );\n-            typeReport.addObjectReport( objectReport );\n-\n-            if ( programInstance.getId() == 0 )\n-            {\n-                typeReport.getStats().incCreated();\n-            }\n-            else\n-            {\n-                typeReport.getStats().incUpdated();\n-            }\n-\n-            session.persist( programInstance );\n-\n-            bundle.getPreheat().putEnrollments( bundle.getIdentifier(), Collections.singletonList( programInstance ) );\n-\n-            handleTrackedEntityAttributeValues( session, bundle.getPreheat(), enrollment.getAttributes(),\n-                programInstance.getEntityInstance() );\n-\n-            if ( FlushMode.OBJECT == bundle.getFlushMode() )\n-            {\n-                session.flush();\n-            }\n-\n-            // TODO: Implement support for update and delete and rollback/decrement create etc.\n-\n-            if ( !bundle.isSkipSideEffects() )\n-            {\n-                TrackerSideEffectDataBundle sideEffectDataBundle = TrackerSideEffectDataBundle.builder()\n-                        .klass( ProgramInstance.class )\n-                        .enrollmentRuleEffects( sideEffectConverterService.toTrackerSideEffects( bundle.getEnrollmentRuleEffects() ) )\n-                        .eventRuleEffects( new HashMap<>() )\n-                        .object( programInstance.getUid() )\n-                        .importStrategy( bundle.getImportStrategy() )\n-                        .accessedBy( bundle.getUsername() )\n-                        .build();\n-\n-                sideEffectDataBundles.add( sideEffectDataBundle );\n-            }\n-        }\n-\n-        session.flush();\n-        enrollments.forEach( o -> bundleHooks.forEach( hook -> hook.postCreate( Enrollment.class, o, bundle ) ) );\n-\n-        typeReport.getSideEffectDataBundles().addAll( sideEffectDataBundles );\n-\n-        return typeReport;\n-    }\n-\n-    private TrackerTypeReport handleEvents( Session session, TrackerBundle bundle )\n-    {\n-        List<TrackerSideEffectDataBundle> sideEffectDataBundles = new ArrayList<>();\n-\n-        List<Event> events = bundle.getEvents();\n-        TrackerTypeReport typeReport = new TrackerTypeReport( TrackerType.EVENT );\n-\n-        events.forEach( o -> bundleHooks.forEach( hook -> hook.preCreate( Event.class, o, bundle ) ) );\n-        session.flush();\n-\n-        for ( int idx = 0; idx < events.size(); idx++ )\n-        {\n-            Event event = events.get( idx );\n-\n-            ProgramStageInstance programStageInstance = eventConverter.from( bundle.getPreheat(), event );\n-\n-            if ( !programStageInstance.getComments().isEmpty() )\n-            {\n-                for ( TrackedEntityComment comment : programStageInstance.getComments() )\n-                {\n-                    this.trackedEntityCommentService.addTrackedEntityComment( comment );\n-                }\n-            }\n-\n-            Date now = new Date();\n-            programStageInstance.setLastUpdated( now );\n-            programStageInstance.setLastUpdatedAtClient( now );\n-            programStageInstance.setLastUpdatedBy( bundle.getUser() );\n-\n-            TrackerObjectReport objectReport = new TrackerObjectReport( TrackerType.EVENT,\n-                programStageInstance.getUid(), idx );\n-            typeReport.addObjectReport( objectReport );\n-\n-            handleDataValues( session, bundle.getPreheat(), event.getDataValues(), programStageInstance );\n-\n-            if ( programStageInstance.getId() == 0 )\n-            {\n-                typeReport.getStats().incCreated();\n-            }\n-            else\n-            {\n-                typeReport.getStats().incUpdated();\n-            }\n-\n-            session.persist( programStageInstance );\n-\n-            bundle.getPreheat().putEvents( bundle.getIdentifier(), Collections.singletonList( programStageInstance ) );\n-\n-            if ( FlushMode.OBJECT == bundle.getFlushMode() )\n-            {\n-                session.flush();\n-            }\n-\n-            // TODO: Implement support for update and delete and rollback/decrement create etc.\n-\n-            if ( !bundle.isSkipSideEffects() )\n-            {\n-                TrackerSideEffectDataBundle sideEffectDataBundle = TrackerSideEffectDataBundle.builder()\n-                    .klass( ProgramStageInstance.class )\n-                    .enrollmentRuleEffects( new HashMap<>() )\n-                    .eventRuleEffects( sideEffectConverterService.toTrackerSideEffects( bundle.getEventRuleEffects() ) )\n-                    .object( programStageInstance.getUid() )\n-                    .importStrategy( bundle.getImportStrategy() )\n-                    .accessedBy( bundle.getUsername() )\n-                    .build();\n-\n-                sideEffectDataBundles.add( sideEffectDataBundle );\n-            }\n-        }\n-\n-        session.flush();\n-        events.forEach( o -> bundleHooks.forEach( hook -> hook.postCreate( Event.class, o, bundle ) ) );\n-\n-        typeReport.getSideEffectDataBundles().addAll( sideEffectDataBundles );\n-\n-        return typeReport;\n-    }\n-\n-    private TrackerTypeReport handleRelationships( Session session, TrackerBundle bundle )\n-    {\n-        List<Relationship> relationships = bundle.getRelationships();\n-        TrackerTypeReport typeReport = new TrackerTypeReport( TrackerType.RELATIONSHIP );\n-\n-        relationships.forEach( o -> bundleHooks.forEach( hook -> hook.preCreate( Relationship.class, o, bundle ) ) );\n-\n-        for ( int idx = 0; idx < relationships.size(); idx++ )\n-        {\n-            org.hisp.dhis.relationship.Relationship relationship = relationshipConverter\n-                .from( bundle.getPreheat(), relationships.get( idx ) );\n-            Date now = new Date();\n-            relationship.setLastUpdated( now );\n-            relationship.setLastUpdatedBy( bundle.getUser() );\n-\n-            TrackerObjectReport objectReport = new TrackerObjectReport( TrackerType.RELATIONSHIP, relationship.getUid(),\n-                idx );\n-            typeReport.addObjectReport( objectReport );\n-\n-            if ( relationship.getId() == 0 )\n-            {\n-                typeReport.getStats().incCreated();\n-            }\n-            else\n-            {\n-                typeReport.getStats().incUpdated();\n-            }\n-\n-            session.persist( relationship );\n-\n-            if ( FlushMode.OBJECT == bundle.getFlushMode() )\n-            {\n-                session.flush();\n-            }\n-        }\n-\n-        session.flush();\n-\n-        relationships.forEach( o -> bundleHooks.forEach( hook -> hook.postCreate( Relationship.class, o, bundle ) ) );\n-\n-        return typeReport;\n-    }\n-\n-    // -----------------------------------------------------------------------------------\n-    // Utility Methods\n-    // -----------------------------------------------------------------------------------\n-\n-    private void handleTrackedEntityAttributeValues( Session session, TrackerPreheat preheat,\n-        List<Attribute> payloadAttributes, TrackedEntityInstance trackedEntityInstance )\n-    {\n-        Map<String, TrackedEntityAttributeValue> attributeValueDBMap = trackedEntityInstance\n-            .getTrackedEntityAttributeValues()\n-            .stream()\n-            .collect( Collectors.toMap(teav -> teav.getAttribute().getUid(), Function.identity() ) );\n-\n-        for ( Attribute at : payloadAttributes )\n-        {\n-            TrackedEntityAttribute attribute = preheat.get( TrackerIdScheme.UID, TrackedEntityAttribute.class,\n-                at.getAttribute() );\n-\n-            checkNotNull( attribute,\n-                \"Attribute should never be NULL here if validation is enforced before commit.\" );\n-\n-            TrackedEntityAttributeValue attributeValue = attributeValueDBMap.getOrDefault( at.getAttribute(),\n-                new TrackedEntityAttributeValue() );\n-\n-            attributeValue\n-                .setAttribute( attribute )\n-                .setEntityInstance( trackedEntityInstance )\n-                .setValue( at.getValue() )\n-                .setStoredBy( at.getStoredBy() );\n-\n-            // We cannot use attributeValue.getValue() because it uses encryption logic\n-            // So we need to use at.getValue()\n-            if ( StringUtils.isEmpty( at.getValue() ) )\n-            {\n-                if ( attribute.getValueType() == ValueType.FILE_RESOURCE )\n-                {\n-                    unassignFileResource( session, preheat, attributeValueDBMap.get( at.getAttribute() ).getValue() );\n-                }\n-                session.remove( attributeValue );\n-            }\n-            else\n-            {\n-                if ( attribute.getValueType() == ValueType.FILE_RESOURCE )\n-                {\n-                    assignFileResource( session, preheat, attributeValue.getValue() );\n-                }\n-                session.persist( attributeValue );\n-            }\n-\n-            if ( attributeValue.getAttribute().isGenerated() && attributeValue.getAttribute().getTextPattern() != null )\n-            {\n-                reservedValueService.useReservedValue( attributeValue.getAttribute().getTextPattern(),\n-                    attributeValue.getValue() );\n-            }\n-        }\n-    }\n-\n-    private void handleDataValues( Session session, TrackerPreheat preheat, Set<DataValue> payloadDataValues,\n-        ProgramStageInstance psi )\n-    {\n-        Map<String, EventDataValue> dataValueDBMap = psi\n-            .getEventDataValues()\n-            .stream()\n-            .collect( Collectors.toMap( dv -> dv.getDataElement(), Function.identity() ) );\n-\n-        for ( DataValue dv : payloadDataValues )\n-        {\n-            DataElement dateElement = preheat.get( TrackerIdScheme.UID, DataElement.class, dv.getDataElement() );\n-\n-            checkNotNull( dateElement,\n-                \"Data element should never be NULL here if validation is enforced before commit.\" );\n-\n-            EventDataValue eventDataValue = dataValueDBMap.getOrDefault( dv.getDataElement(), new EventDataValue() );\n-\n-            eventDataValue.setDataElement( dateElement.getUid() );\n-            eventDataValue.setValue( dv.getValue() );\n-            eventDataValue.setStoredBy( dv.getStoredBy() );\n-\n-            handleDataValueCreatedUpdatedDates( dv, eventDataValue );\n-\n-            if ( StringUtils.isEmpty( eventDataValue.getValue() ) )\n-            {\n-                if ( dateElement.isFileType() )\n-                {\n-                    unassignFileResource( session, preheat, dataValueDBMap.get( dv.getDataElement() ).getValue() );\n-                }\n-                psi.getEventDataValues().remove( eventDataValue );\n-            }\n-            else\n-            {\n-                if ( dateElement.isFileType() )\n-                {\n-                    assignFileResource( session, preheat, eventDataValue.getValue() );\n-                }\n-                psi.getEventDataValues().add( eventDataValue );\n-            }\n-        }\n-    }\n-\n-    private void handleDataValueCreatedUpdatedDates( DataValue dv, EventDataValue eventDataValue )\n-    {\n-        try\n-        {\n-            eventDataValue.setCreated( dv.getCreatedAt() == null ? new Date() : new SimpleDateFormat( \"yyyy-MM-dd\" ).parse( dv.getCreatedAt() ) );\n-            eventDataValue.setLastUpdated( dv.getUpdatedAt() == null ? new Date() : new SimpleDateFormat( \"yyyy-MM-dd\" ).parse( dv.getUpdatedAt() ) );\n-        }\n-        catch ( ParseException e )\n-        {\n-            // Created and updated dates are already validated.\n-            // This catch should never be reached\n-            e.printStackTrace();\n-        }\n-    }\n-\n-    private void assignFileResource( Session session, TrackerPreheat preheat, String fr )\n-    {\n-        assignFileResource( session, preheat, fr, true );\n-    }\n-\n-    private void unassignFileResource( Session session, TrackerPreheat preheat, String fr )\n-    {\n-        assignFileResource( session, preheat, fr, false );\n-    }\n-\n-    private void assignFileResource( Session session, TrackerPreheat preheat, String fr, boolean isAssign )\n-    {\n-        FileResource fileResource = preheat.get( TrackerIdScheme.UID, FileResource.class, fr );\n-\n-        if ( fileResource == null )\n-        {\n-            return;\n-        }\n-\n-        fileResource.setAssigned( isAssign );\n-        session.persist( fileResource );\n-    }\n }\n", "next_change": {"commit": "8c4a255176ac5e675c549db2065926fdbaf0290b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\nindex 502b7ce86f..915b7da07c 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n", "chunk": "@@ -235,10 +214,7 @@ public class DefaultTrackerBundleService\n \n         Stream.of( TrackerType.values() )\n             .forEach( t -> bundleReport.getTypeReportMap().put( t, DELETION_MAPPER.get( t )\n-            .apply( bundle, t ) ) );\n-\n-        dbmsManager.clearSession();\n-        cacheManager.clearCache();\n+                .apply( bundle, t ) ) );\n \n         return bundleReport;\n     }\n", "next_change": {"commit": "4c9e21a843bbdbd73b0aeaf99e2d0320ac0bb811", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\nindex 915b7da07c..8097ccd5b2 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n", "chunk": "@@ -212,7 +184,7 @@ public class DefaultTrackerBundleService\n             return bundleReport;\n         }\n \n-        Stream.of( TrackerType.values() )\n+        Stream.of( TrackerType.values() ).sorted( Collections.reverseOrder() )\n             .forEach( t -> bundleReport.getTypeReportMap().put( t, DELETION_MAPPER.get( t )\n                 .apply( bundle, t ) ) );\n \n", "next_change": {"commit": "e66352e7a1e54e17a7b1da3f71bfe6f924311705", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\nindex 8097ccd5b2..b240ddbcd2 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n", "chunk": "@@ -186,7 +171,7 @@ public class DefaultTrackerBundleService\n \n         Stream.of( TrackerType.values() ).sorted( Collections.reverseOrder() )\n             .forEach( t -> bundleReport.getTypeReportMap().put( t, DELETION_MAPPER.get( t )\n-                .apply( bundle, t ) ) );\n+                .apply( bundle ) ) );\n \n         return bundleReport;\n     }\n", "next_change": {"commit": "a7d5843c3d0da8b45bc96835e940185ed36788fc", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\nindex b240ddbcd2..b59218d004 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n", "chunk": "@@ -169,9 +157,12 @@ public class DefaultTrackerBundleService\n             return bundleReport;\n         }\n \n-        Stream.of( TrackerType.values() ).sorted( Collections.reverseOrder() )\n-            .forEach( t -> bundleReport.getTypeReportMap().put( t, DELETION_MAPPER.get( t )\n-                .apply( bundle ) ) );\n+        Map<TrackerType, TrackerTypeReport> report = bundleReport.getTypeReportMap();\n+        report.put( TrackerType.RELATIONSHIP, deletionService.deleteRelationShips( bundle ) );\n+        report.put( TrackerType.EVENT, deletionService.deleteEvents( bundle ) );\n+        report.put( TrackerType.ENROLLMENT, deletionService.deleteEnrollments( bundle ) );\n+        report.put( TrackerType.TRACKED_ENTITY,\n+            deletionService.deleteTrackedEntityInstances( bundle ) );\n \n         return bundleReport;\n     }\n", "next_change": {"commit": "e4b9a5c802805b26fe8255711d1f98e662f15c6d", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\nindex b59218d004..70a25b7718 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n", "chunk": "@@ -148,22 +146,19 @@ public class DefaultTrackerBundleService\n \n     @Override\n     @Transactional\n-    public TrackerBundleReport delete( TrackerBundle bundle )\n+    public PersistenceReport delete( TrackerBundle bundle )\n     {\n-        TrackerBundleReport bundleReport = new TrackerBundleReport();\n-\n         if ( TrackerBundleMode.VALIDATE == bundle.getImportMode() )\n         {\n-            return bundleReport;\n+            return PersistenceReport.emptyReport();\n         }\n \n-        Map<TrackerType, TrackerTypeReport> report = bundleReport.getTypeReportMap();\n-        report.put( TrackerType.RELATIONSHIP, deletionService.deleteRelationShips( bundle ) );\n-        report.put( TrackerType.EVENT, deletionService.deleteEvents( bundle ) );\n-        report.put( TrackerType.ENROLLMENT, deletionService.deleteEnrollments( bundle ) );\n-        report.put( TrackerType.TRACKED_ENTITY,\n-            deletionService.deleteTrackedEntityInstances( bundle ) );\n+        Map<TrackerType, TrackerTypeReport> reportMap = Map.of(\n+            TrackerType.RELATIONSHIP, deletionService.deleteRelationShips( bundle ),\n+            TrackerType.EVENT, deletionService.deleteEvents( bundle ),\n+            TrackerType.ENROLLMENT, deletionService.deleteEnrollments( bundle ),\n+            TrackerType.TRACKED_ENTITY, deletionService.deleteTrackedEntityInstances( bundle ) );\n \n-        return bundleReport;\n+        return new PersistenceReport( reportMap );\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "message": "Merge commit", "committedDate": null}, {"oid": "399526882c2fbbf5600922b3c3b6030420cf4e96", "committedDate": "2020-07-13 12:23:07 +0200", "message": "feat: Run rule engine rules in new importer [DHIS2-7310]"}, {"oid": "2ed799f33ca26b918ed60473a3f097714f00492e", "committedDate": "2020-08-04 10:30:01 +0200", "message": "chore: Clean up code (#5877)"}, {"oid": "3e3dc98d92f0c13fb56cf17894eab06a78842133", "committedDate": "2020-08-04 17:20:37 +0200", "message": "feat: Enrollment/Events note persistence"}, {"oid": "c22c6f59ea7f5b3eec062a2f4eb00f2c4dae2a2d", "committedDate": "2020-08-04 17:20:41 +0200", "message": "chore: javadoc"}, {"oid": "969f25ca303dccefd5c10ed39fd8ca92a0bc6583", "committedDate": "2020-08-04 17:20:41 +0200", "message": "chore: add missing license headers"}, {"oid": "8374cb43e422eddc1f4c01bb715d8d285acc37be", "committedDate": "2020-08-10 11:38:43 +0200", "message": "Merge remote-tracking branch 'origin/master' into DHIS2-7310-merge"}, {"oid": "8d077aaaa69bc32d819217e4c90324d34541c2b0", "committedDate": "2020-08-12 10:22:42 +0200", "message": "Last fixes"}, {"oid": "6e1e12a2fe3c14f79781d64ec3f890f680cf49a4", "committedDate": "2020-08-24 15:50:03 +0200", "message": "feat: Added support for data values in event import [DHIS2-9270]"}, {"oid": "3b12f81c2a6fa41132216efee156f96f1874e91b", "committedDate": "2020-08-25 10:12:44 +0200", "message": "Fix code review comments"}, {"oid": "d70c4998dcb8cf4b7f356f73c3ecb1a5d4f9c352", "committedDate": "2020-08-25 18:05:54 +0200", "message": "feat: Add skipSideEffects check (#5986)"}, {"oid": "82a863c258aa34e592b309bb9d6081c4dc8f981b", "committedDate": "2020-08-27 14:46:58 +0200", "message": "feat: Add support for deletion of tracker objects [DHIS2-9085] (#5959)"}, {"oid": "cb2ee65c0210c0d4b2bd8851789da8d4adfaf04d", "committedDate": "2020-09-07 10:28:21 +0200", "message": "fix: [DHIS2-9287] Fix the stats in the import summary (#6062)"}, {"oid": "c2e0b3718cd8c7597ee5ec2e5193e7eafacf5827", "committedDate": "2020-09-08 09:47:19 +0200", "message": "fix: prevent Hibernate session errors with User object (#6063)"}, {"oid": "8aaeab2ee4dd7a9ffa927147931dff8609ef787a", "committedDate": "2020-09-23 15:33:34 +0200", "message": "chore: Remove unused imports (#6219)"}, {"oid": "87ef26080354e452d282d374e4dc6de996844a1c", "committedDate": "2020-10-02 09:53:53 +0200", "message": "test: Add integration tests for tracker side effects (#5833)"}, {"oid": "23a1aca18690c1c6a18fc0ab8cf734b637896d1b", "committedDate": "2020-11-05 11:00:30 +0100", "message": "fix: [DHIS2-9886] [DHIS2-9890] deserialization of primitive and null check for datavalue dates (#6566)"}, {"oid": "55bfd204388f6a780682802d3a0d205d191486ce", "committedDate": "2020-11-16 16:21:33 +0100", "message": "fix: incorrect relationship count in import report (#6660)"}, {"oid": "cc2736d02fb6c94cc2dfccaea482dcb82902d4be", "committedDate": "2020-11-18 09:55:24 +0100", "message": "fix: [DHIS2-9976] Remove stacktrace for exception raised by rule enigine calls (#6703)"}, {"oid": "4b8923e6eb12d67e7c17ef2af20af6fd02f2fd0b", "committedDate": "2020-11-23 09:15:08 +0100", "message": "feat: flag to disable rule engine (#6737)"}, {"oid": "1f0559c94f01b1497116fe5ba2e19f28f072a879", "committedDate": "2020-11-23 09:21:47 +0100", "message": "fix: invalid ignore count in Tracker Import stats (#6721)"}, {"oid": "3e799d196b8f73ad216ea100a07ddd5f7dfc53e0", "committedDate": "2020-11-30 16:37:14 +0100", "message": "fix: remove long running transaction during Tracker Import (#6782)"}, {"oid": "3ab88a5f4623a8c749246bedef34fcb926d185cb", "committedDate": "2020-12-08 10:40:14 +0100", "message": "fix: [DHIS2-7310] Move rule engine call and validations after bundle validation (#6843)"}, {"oid": "7098e9412b922ed70f8136f30c7d790e27bb43be", "committedDate": "2020-12-10 10:43:44 +0100", "message": "chore: Remove unused imports (#6875)"}, {"oid": "8c4a255176ac5e675c549db2065926fdbaf0290b", "committedDate": "2020-12-14 08:31:48 +0100", "message": "fix: Remove clearSession/clearCache inside transaction causing audit fail (#6876)"}, {"oid": "c4f1db1dab576bc73489a9e0a6d015acec2eab5b", "committedDate": "2020-12-15 15:09:02 +0100", "message": "feat: Tracker Import metadata cache (#6877)"}, {"oid": "3e25b9b834757233501b068c1fd96b5b68cc22f7", "committedDate": "2020-12-22 12:59:13 +0100", "message": "feat: Convert sharing objects to JSONB structure [DHIS2-5814]"}, {"oid": "679b32e817e4751c5ad4f0301a943104bf8f1d79", "committedDate": "2021-01-04 11:56:17 +0100", "message": "feat: Program rule assign action implentation (#7004)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "4c9e21a843bbdbd73b0aeaf99e2d0320ac0bb811", "committedDate": "2021-03-02 15:17:00 +0100", "message": "fix: Correct error report when using DELETE ImportStrategy (#7491)"}, {"oid": "00ba07c1c8555a473f261d56bffffa2b75d3c146", "committedDate": "2021-03-08 12:59:21 +0100", "message": "refactor: Remove unused bundle hook and fix tests [TECH-553] (#7539)"}, {"oid": "a4643bd1fe923092627bdd884e05e5dacc7a5911", "committedDate": "2021-04-30 14:46:25 +0200", "message": "refactor: Refactor rule engine service in the new importer to group events and enrollments in one call (#7925)"}, {"oid": "6901c3e799d56703ac02b01aff470f0594b71500", "committedDate": "2021-05-11 09:13:42 +0200", "message": "refactor: Refactor rule engine service in the new importer to group events and enrollments in one call (#7945)"}, {"oid": "e66352e7a1e54e17a7b1da3f71bfe6f924311705", "committedDate": "2021-07-20 08:49:34 +0200", "message": "fix: Include deleted object in the report object map [DHIS2-11196] (#8419)"}, {"oid": "d4ef7d2434dab562b93e092b3a4b27e56c9df1e1", "committedDate": "2021-10-04 09:47:50 +0200", "message": "fix: NTI: last updated date on TEI is not updated when underlying data changes [ DHIS2-11824 ] 2.38 (#8891)"}, {"oid": "7a29e754f286e13159ae833d5174d625e2fb1ffe", "committedDate": "2021-10-19 14:18:46 +0200", "message": "perf: AttributeValueService is no more an AbstractPersister dependency [DHIS2-11988] (#9069)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "a7d5843c3d0da8b45bc96835e940185ed36788fc", "committedDate": "2022-02-02 07:56:53 +0100", "message": "chore: reduce indirection in DefaultTrackerBundleService (#9711)"}, {"oid": "e4b9a5c802805b26fe8255711d1f98e662f15c6d", "committedDate": "2022-12-14 10:01:20 +0100", "message": "chore: Rename and clean up report model objects [TECH-14298] (#12525)"}, {"oid": "55f98482354fe2ab5b68c7a334e2933e3d2e7159", "committedDate": "2023-01-03 13:37:04 +0100", "message": "refactor: Clean up step to call rule engine [DHIS2-14408] (#12665)"}, {"oid": "4254ae8a51fb72bd28abfb208164f149cef48114", "committedDate": "2023-01-20 14:15:51 +0100", "message": "refactor: Refactor execution of enrollment rule actions [DHIS2-14408] (#12779)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg1MjM4OA==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r429852388", "body": "We need to setup a call for this, what to do if we send in just a subset of attribute values, or a some attribute values er null, it needs to be clear what will happen. There should be a mode here to _replace_ all attribute values no in current payload also. The same applies to data values in events.", "bodyText": "We need to setup a call for this, what to do if we send in just a subset of attribute values, or a some attribute values er null, it needs to be clear what will happen. There should be a mode here to replace all attribute values no in current payload also. The same applies to data values in events.", "bodyHTML": "<p dir=\"auto\">We need to setup a call for this, what to do if we send in just a subset of attribute values, or a some attribute values er null, it needs to be clear what will happen. There should be a mode here to <em>replace</em> all attribute values no in current payload also. The same applies to data values in events.</p>", "author": "mortenoh", "createdAt": "2020-05-25T10:07:21Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java", "diffHunk": "@@ -445,6 +449,7 @@ private void handleTrackedEntityAttributeValues( Session session, TrackerPreheat\n \n             TrackedEntityAttribute attribute = preheat.get( TrackerIdScheme.UID, TrackedEntityAttribute.class,\n                 at.getAttribute() );\n+            // TODO: What to do here? Should attribute == NULL this be allowed?", "originalCommit": "a5f6d361402efd03ab461bcffa6bcc50be96c520", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI0OTk2Mg==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r448249962", "bodyText": "I guess the decision here is:\nShould null values result in deletion, or should we ignore them? I think they way people use the api now, deletion kinda makes sense. But we can have a separate parameter to support both.\nNote that any attributes the user dont have read or write access to should not result in a delete :)", "author": "stian-sandvold", "createdAt": "2020-07-01T09:51:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg1MjM4OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI5MDk3Mw==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r448290973", "bodyText": "This is a little complicated... we need to redo this from scratch. The workflow we have is per program, but then attribute values are linked with the TE ... so if a TE is enrolled in multiple programs - which is often the case - almost all the time we will be sending a subset of attribute values. so nulling those not available in the payload is disastrous. May be sending program can help, that way we narrow down to the mentioned program attributes ... an of course further sharing setting", "author": "abyot", "createdAt": "2020-07-01T11:11:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg1MjM4OA=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "6e1e12a2fe3c14f79781d64ec3f890f680cf49a4", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\nindex 0979d225cb..70bd84df11 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n", "chunk": "@@ -417,96 +439,41 @@ public class DefaultTrackerBundleService\n     // -----------------------------------------------------------------------------------\n \n     private void handleTrackedEntityAttributeValues( Session session, TrackerPreheat preheat,\n-        List<Attribute> attributes, TrackedEntityInstance trackedEntityInstance )\n+        List<Attribute> payloadAttributes, TrackedEntityInstance trackedEntityInstance )\n     {\n-        List<TrackedEntityAttributeValue> attributeValues = new ArrayList<>();\n-        List<String> attributeValuesForDeletion = new ArrayList<>();\n-\n-        List<String> assignedFileResources = new ArrayList<>();\n-        List<String> unassignedFileResources = new ArrayList<>();\n-\n-        Map<String, TrackedEntityAttributeValue> attributeValueMap = trackedEntityInstance\n+        Map<String, TrackedEntityAttributeValue> attributeValueDBMap = trackedEntityInstance\n             .getTrackedEntityAttributeValues()\n             .stream()\n             .collect( Collectors.toMap( teav -> teav.getAttribute().getUid(),\n                 trackedEntityAttributeValue -> trackedEntityAttributeValue ) );\n \n-        for ( Attribute at : attributes )\n+        for ( Attribute at : payloadAttributes )\n         {\n-            // TEAV.getValue has a lot of trickery behind it since its being used for\n-            // encryption, so we can't rely on that to\n-            // get empty/null values, instead we build a simple list here to compare with.\n-            if ( StringUtils.isEmpty( at.getValue() ) )\n-            {\n-                attributeValuesForDeletion.add( at.getAttribute() );\n-\n-                if ( attributeValueMap.containsKey( at.getAttribute() )\n-                    && attributeValueMap.get( at.getAttribute() ).getAttribute().getValueType().isFile() )\n-                {\n-                    unassignedFileResources.add( attributeValueMap.get( at.getAttribute() ).getValue() );\n-                }\n-            }\n-\n             TrackedEntityAttribute attribute = preheat.get( TrackerIdScheme.UID, TrackedEntityAttribute.class,\n                 at.getAttribute() );\n-            // TODO: What to do here? Should attribute == NULL this be allowed?\n-            TrackedEntityAttributeValue attributeValue = null;\n-\n-            if ( attributeValueMap.containsKey( at.getAttribute() ) )\n-            {\n-                TrackedEntityAttributeValue av = attributeValueMap.get( at.getAttribute() );\n-\n-                av.setAttribute( attribute ).setValue( at.getValue() ).setStoredBy( at.getStoredBy() );\n \n-                attributeValue = av;\n-                attributeValues.add( attributeValue );\n-            }\n+            checkNotNull( attribute,\n+                \"Attribute should never be NULL here if validation is enforced before commit.\" );\n \n-            // new attribute value\n-            if ( attributeValue == null )\n-            {\n-                attributeValue = new TrackedEntityAttributeValue();\n+            TrackedEntityAttributeValue attributeValue = attributeValueDBMap.getOrDefault( at.getAttribute(),\n+                new TrackedEntityAttributeValue() );\n \n-                attributeValue.setAttribute( attribute ).setValue( at.getValue() ).setStoredBy( at.getStoredBy() );\n+            attributeValue\n+                .setAttribute( attribute )\n+                .setEntityInstance( trackedEntityInstance )\n+                .setValue( at.getValue() )\n+                .setStoredBy( at.getStoredBy() );\n \n-                attributeValues.add( attributeValue );\n-            }\n-\n-            // TODO: What to do here? Should this be allowed? i.e ,  attributeValue.getAttribute() != null  this makes a NP\n-            if ( !attributeValuesForDeletion.contains( at.getAttribute() ) &&\n-                attributeValue.getAttribute() != null && attributeValue.getAttribute().getValueType().isFile() )\n-            {\n-                assignedFileResources.add( at.getValue() );\n-            }\n-\n-\n-//            if ( !attributeValuesForDeletion.contains( at.getAttribute() )\n-//                && attributeValue.getAttribute().getValueType().isFile() )\n-//            {\n-//                assignedFileResources.add( at.getValue() );\n-//            }\n-        }\n-\n-        for ( TrackedEntityAttributeValue attributeValue : attributeValues )\n-        {\n-            // since TEAV is the owning side here, we don't bother updating the TE.teav\n-            // collection\n-            // as it will be reloaded on session clear\n-            TrackedEntityAttribute attribute = attributeValue.getAttribute();\n-\n-//            // TODO: What to do here? Should this be allowed?\n-            if ( attribute == null )\n-            {\n-                continue;\n-            }\n-\n-            if ( attributeValuesForDeletion.contains( attribute.getUid() ) )\n+            // We cannot use attributeValue.getValue() because it uses encryption logic\n+            // So we need to use at.getValue()\n+            if ( StringUtils.isEmpty( at.getValue() ) )\n             {\n+                unassignFileResource( session, preheat, attributeValueDBMap.get( at.getAttribute() ).getValue() );\n                 session.remove( attributeValue );\n             }\n             else\n             {\n-                attributeValue.setEntityInstance( trackedEntityInstance );\n+                assignFileResource( session, preheat, attributeValue.getValue() );\n                 session.persist( attributeValue );\n             }\n \n", "next_change": {"commit": "3b12f81c2a6fa41132216efee156f96f1874e91b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\nindex 70bd84df11..0bc5edc3ea 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n", "chunk": "@@ -468,12 +470,18 @@ public class DefaultTrackerBundleService\n             // So we need to use at.getValue()\n             if ( StringUtils.isEmpty( at.getValue() ) )\n             {\n-                unassignFileResource( session, preheat, attributeValueDBMap.get( at.getAttribute() ).getValue() );\n+                if ( attribute.getValueType() == ValueType.FILE_RESOURCE )\n+                {\n+                    unassignFileResource( session, preheat, attributeValueDBMap.get( at.getAttribute() ).getValue() );\n+                }\n                 session.remove( attributeValue );\n             }\n             else\n             {\n-                assignFileResource( session, preheat, attributeValue.getValue() );\n+                if ( attribute.getValueType() == ValueType.FILE_RESOURCE )\n+                {\n+                    assignFileResource( session, preheat, attributeValue.getValue() );\n+                }\n                 session.persist( attributeValue );\n             }\n \n", "next_change": {"commit": "1f0559c94f01b1497116fe5ba2e19f28f072a879", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\nindex 0bc5edc3ea..502b7ce86f 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n", "chunk": "@@ -226,366 +217,29 @@ public class DefaultTrackerBundleService\n         return bundleReport;\n     }\n \n-    private TrackerTypeReport handleTrackedEntities( Session session, TrackerBundle bundle )\n-    {\n-        List<TrackedEntity> trackedEntities = bundle.getTrackedEntities();\n-        TrackerTypeReport typeReport = new TrackerTypeReport( TrackerType.TRACKED_ENTITY );\n-\n-        trackedEntities.forEach( o -> bundleHooks.forEach( hook -> hook.preCreate( TrackedEntity.class, o, bundle ) ) );\n-        session.flush();\n-\n-        Date now = new Date();\n-\n-        for ( int idx = 0; idx < trackedEntities.size(); idx++ )\n-        {\n-            TrackedEntity trackedEntity = trackedEntities.get( idx );\n-\n-            TrackedEntityInstance tei = teConverter.from( bundle.getPreheat(), trackedEntity );\n-            tei.setLastUpdated( now );\n-            tei.setLastUpdatedAtClient( now );\n-            tei.setLastUpdatedBy( bundle.getUser() );\n-\n-            TrackerObjectReport objectReport = new TrackerObjectReport( TrackerType.TRACKED_ENTITY, tei.getUid(), idx );\n-            typeReport.addObjectReport( objectReport );\n-\n-            session.persist( tei );\n-\n-            bundle.getPreheat().putTrackedEntities( bundle.getIdentifier(), Collections.singletonList( tei ) );\n-\n-            handleTrackedEntityAttributeValues( session, bundle.getPreheat(), trackedEntity.getAttributes(), tei );\n-\n-            if ( FlushMode.OBJECT == bundle.getFlushMode() )\n-            {\n-                session.flush();\n-            }\n-\n-            // TODO: Implement support for update and delete and rollback/decrement create etc.\n-            typeReport.getStats().incCreated();\n-        }\n-\n-        session.flush();\n-\n-        trackedEntities\n-            .forEach( o -> bundleHooks.forEach( hook ->\n-                hook.postCreate( TrackedEntity.class, o, bundle ) ) );\n-\n-        return typeReport;\n-    }\n-\n-    private TrackerTypeReport handleEnrollments( Session session, TrackerBundle bundle )\n-    {\n-        List<Enrollment> enrollments = bundle.getEnrollments();\n-        TrackerTypeReport typeReport = new TrackerTypeReport( TrackerType.ENROLLMENT );\n-\n-        enrollments.forEach( o -> bundleHooks.forEach( hook -> hook.preCreate( Enrollment.class, o, bundle ) ) );\n-        session.flush();\n-\n-        Date now = new Date();\n-\n-        for ( int idx = 0; idx < enrollments.size(); idx++ )\n-        {\n-            Enrollment enrollment = enrollments.get( idx );\n-\n-            ProgramInstance programInstance = enrollmentConverter.from( bundle.getPreheat(), enrollment );\n-\n-            if ( !programInstance.getComments().isEmpty() )\n-            {\n-                for ( TrackedEntityComment comment : programInstance.getComments() )\n-                {\n-                    this.trackedEntityCommentService.addTrackedEntityComment( comment );\n-                }\n-            }\n-\n-            programInstance.setLastUpdated( now );\n-            programInstance.setLastUpdatedAtClient( now );\n-            programInstance.setLastUpdatedBy( bundle.getUser() );\n-\n-            TrackerObjectReport objectReport = new TrackerObjectReport( TrackerType.ENROLLMENT,\n-                programInstance.getUid(), idx );\n-            typeReport.addObjectReport( objectReport );\n-\n-            session.persist( programInstance );\n-\n-            bundle.getPreheat().putEnrollments( bundle.getIdentifier(), Collections.singletonList( programInstance ) );\n-\n-            handleTrackedEntityAttributeValues( session, bundle.getPreheat(), enrollment.getAttributes(),\n-                programInstance.getEntityInstance() );\n-\n-            if ( FlushMode.OBJECT == bundle.getFlushMode() )\n-            {\n-                session.flush();\n-            }\n-\n-            // TODO: Implement support for update and delete and rollback/decrement create etc.\n-            typeReport.getStats().incCreated();\n-\n-            TrackerSideEffectDataBundle sideEffectDataBundle = TrackerSideEffectDataBundle.builder()\n-                .klass( ProgramInstance.class )\n-                .enrollmentRuleEffects( bundle.getEnrollmentRuleEffects() )\n-                .eventRuleEffects( bundle.getEventRuleEffects() )\n-                .object( programInstance )\n-                .importStrategy( bundle.getImportStrategy() )\n-                .accessedBy( bundle.getUsername() )\n-                .build();\n-\n-            sideEffectHandlers.forEach( handler -> handler.handleSideEffect( sideEffectDataBundle ) );\n-        }\n-\n-        session.flush();\n-        enrollments.forEach( o -> bundleHooks.forEach( hook -> hook.postCreate( Enrollment.class, o, bundle ) ) );\n-\n-        return typeReport;\n-    }\n-\n-    private TrackerTypeReport handleEvents( Session session, TrackerBundle bundle )\n-    {\n-        List<Event> events = bundle.getEvents();\n-        TrackerTypeReport typeReport = new TrackerTypeReport( TrackerType.EVENT );\n-\n-        events.forEach( o -> bundleHooks.forEach( hook -> hook.preCreate( Event.class, o, bundle ) ) );\n-        session.flush();\n-\n-        for ( int idx = 0; idx < events.size(); idx++ )\n-        {\n-            Event event = events.get( idx );\n-\n-            ProgramStageInstance programStageInstance = eventConverter.from( bundle.getPreheat(), event );\n-\n-            if ( !programStageInstance.getComments().isEmpty() )\n-            {\n-                for ( TrackedEntityComment comment : programStageInstance.getComments() )\n-                {\n-                    this.trackedEntityCommentService.addTrackedEntityComment( comment );\n-                }\n-            }\n-\n-            Date now = new Date();\n-            programStageInstance.setLastUpdated( now );\n-            programStageInstance.setLastUpdatedAtClient( now );\n-            programStageInstance.setLastUpdatedBy( bundle.getUser() );\n-\n-            TrackerObjectReport objectReport = new TrackerObjectReport( TrackerType.EVENT,\n-                programStageInstance.getUid(), idx );\n-            typeReport.addObjectReport( objectReport );\n-\n-            handleDataValues( session, bundle.getPreheat(), event.getDataValues(), programStageInstance );\n-\n-            session.persist( programStageInstance );\n-\n-            bundle.getPreheat().putEvents( bundle.getIdentifier(), Collections.singletonList( programStageInstance ) );\n-\n-            if ( FlushMode.OBJECT == bundle.getFlushMode() )\n-            {\n-                session.flush();\n-            }\n-\n-            // TODO: Implement support for update and delete and rollback/decrement create etc.\n-            typeReport.getStats().incCreated();\n-\n-            TrackerSideEffectDataBundle sideEffectDataBundle = TrackerSideEffectDataBundle.builder()\n-                .klass( ProgramStageInstance.class )\n-                .enrollmentRuleEffects( bundle.getEnrollmentRuleEffects() )\n-                .eventRuleEffects( bundle.getEventRuleEffects() )\n-                .object( programStageInstance )\n-                .importStrategy( bundle.getImportStrategy() )\n-                .accessedBy( bundle.getUsername() )\n-                .build();\n-\n-            sideEffectHandlers.forEach( handler -> handler.handleSideEffect( sideEffectDataBundle ) );\n-        }\n-\n-        session.flush();\n-\n-        events.forEach( o -> bundleHooks.forEach( hook -> hook.postCreate( Event.class, o, bundle ) ) );\n-\n-        return typeReport;\n-    }\n-\n-    private TrackerTypeReport handleRelationships( Session session, TrackerBundle bundle )\n-    {\n-        List<Relationship> relationships = bundle.getRelationships();\n-        TrackerTypeReport typeReport = new TrackerTypeReport( TrackerType.RELATIONSHIP );\n-\n-        relationships.forEach( o -> bundleHooks.forEach( hook -> hook.preCreate( Relationship.class, o, bundle ) ) );\n-\n-        for ( int idx = 0; idx < relationships.size(); idx++ )\n-        {\n-            org.hisp.dhis.relationship.Relationship relationship = relationshipConverter\n-                .from( bundle.getPreheat(), relationships.get( idx ) );\n-            Date now = new Date();\n-            relationship.setLastUpdated( now );\n-            relationship.setLastUpdatedBy( bundle.getUser() );\n-\n-            TrackerObjectReport objectReport = new TrackerObjectReport( TrackerType.EVENT, relationship.getUid(), idx );\n-            typeReport.addObjectReport( objectReport );\n-\n-            session.persist( relationship );\n-            typeReport.getStats().incCreated();\n-\n-            if ( FlushMode.OBJECT == bundle.getFlushMode() )\n-            {\n-                session.flush();\n-            }\n-\n-            typeReport.getStats().incCreated();\n-        }\n-\n-        session.flush();\n-\n-        relationships.forEach( o -> bundleHooks.forEach( hook -> hook.postCreate( Relationship.class, o, bundle ) ) );\n-\n-        return typeReport;\n-    }\n-\n-    // -----------------------------------------------------------------------------------\n-    // Utility Methods\n-    // -----------------------------------------------------------------------------------\n-\n-    private void handleTrackedEntityAttributeValues( Session session, TrackerPreheat preheat,\n-        List<Attribute> payloadAttributes, TrackedEntityInstance trackedEntityInstance )\n-    {\n-        Map<String, TrackedEntityAttributeValue> attributeValueDBMap = trackedEntityInstance\n-            .getTrackedEntityAttributeValues()\n-            .stream()\n-            .collect( Collectors.toMap( teav -> teav.getAttribute().getUid(), Function.identity() ) );\n-\n-        for ( Attribute at : payloadAttributes )\n-        {\n-            TrackedEntityAttribute attribute = preheat.get( TrackerIdScheme.UID, TrackedEntityAttribute.class,\n-                at.getAttribute() );\n-\n-            checkNotNull( attribute,\n-                \"Attribute should never be NULL here if validation is enforced before commit.\" );\n-\n-            TrackedEntityAttributeValue attributeValue = attributeValueDBMap.getOrDefault( at.getAttribute(),\n-                new TrackedEntityAttributeValue() );\n-\n-            attributeValue\n-                .setAttribute( attribute )\n-                .setEntityInstance( trackedEntityInstance )\n-                .setValue( at.getValue() )\n-                .setStoredBy( at.getStoredBy() );\n-\n-            // We cannot use attributeValue.getValue() because it uses encryption logic\n-            // So we need to use at.getValue()\n-            if ( StringUtils.isEmpty( at.getValue() ) )\n-            {\n-                if ( attribute.getValueType() == ValueType.FILE_RESOURCE )\n-                {\n-                    unassignFileResource( session, preheat, attributeValueDBMap.get( at.getAttribute() ).getValue() );\n-                }\n-                session.remove( attributeValue );\n-            }\n-            else\n-            {\n-                if ( attribute.getValueType() == ValueType.FILE_RESOURCE )\n-                {\n-                    assignFileResource( session, preheat, attributeValue.getValue() );\n-                }\n-                session.persist( attributeValue );\n-            }\n-\n-            if ( attributeValue.getAttribute().isGenerated() && attributeValue.getAttribute().getTextPattern() != null )\n-            {\n-                reservedValueService.useReservedValue( attributeValue.getAttribute().getTextPattern(),\n-                    attributeValue.getValue() );\n-            }\n-        }\n-    }\n-\n-    private void handleDataValues( Session session, TrackerPreheat preheat, Set<DataValue> payloadDataValues,\n-        ProgramStageInstance psi )\n-    {\n-        Map<String, EventDataValue> dataValueDBMap = psi\n-            .getEventDataValues()\n-            .stream()\n-            .collect( Collectors.toMap( dv -> dv.getDataElement(), Function.identity() ) );\n-\n-        for ( DataValue dv : payloadDataValues )\n-        {\n-            DataElement dateElement = preheat.get( TrackerIdScheme.UID, DataElement.class, dv.getDataElement() );\n-\n-            checkNotNull( dateElement,\n-                \"Data element should never be NULL here if validation is enforced before commit.\" );\n-\n-            EventDataValue eventDataValue = dataValueDBMap.getOrDefault( dv.getDataElement(), new EventDataValue() );\n-\n-            eventDataValue.setDataElement( dateElement.getUid() );\n-            eventDataValue.setValue( dv.getValue() );\n-            eventDataValue.setStoredBy( dv.getStoredBy() );\n-\n-            try\n-            {\n-                eventDataValue.setCreated( new SimpleDateFormat( \"yyyy-MM-dd\" ).parse( dv.getCreatedAt() ) );\n-                eventDataValue.setLastUpdated( new SimpleDateFormat( \"yyyy-MM-dd\" ).parse( dv.getUpdatedAt() ) );\n-            }\n-            catch ( ParseException e )\n-            {\n-                // Created and updated dates are already validated.\n-                // This catch should never be reached\n-                e.printStackTrace();\n-            }\n-\n-            if ( StringUtils.isEmpty( eventDataValue.getValue() ) )\n-            {\n-                if ( dateElement.isFileType() )\n-                {\n-                    unassignFileResource( session, preheat, dataValueDBMap.get( dv.getDataElement() ).getValue() );\n-                }\n-                psi.getEventDataValues().remove( eventDataValue );\n-            }\n-            else\n-            {\n-                if ( dateElement.isFileType() )\n-                {\n-                    assignFileResource( session, preheat, eventDataValue.getValue() );\n-                }\n-                psi.getEventDataValues().add( eventDataValue );\n-            }\n-        }\n-    }\n-\n-    private void assignFileResource( Session session, TrackerPreheat preheat, String fr )\n-    {\n-        assignFileResource( session, preheat, fr, true );\n-    }\n-\n-    private void unassignFileResource( Session session, TrackerPreheat preheat, String fr )\n+    @Override\n+    public void handleTrackerSideEffects( List<TrackerSideEffectDataBundle> bundles )\n     {\n-        assignFileResource( session, preheat, fr, false );\n+        sideEffectHandlers.forEach( handler -> handler.handleSideEffects( bundles ) );\n     }\n \n-    private void assignFileResource( Session session, TrackerPreheat preheat, String fr, boolean isAssign )\n+    @Transactional\n+    public TrackerBundleReport delete( TrackerBundle bundle )\n     {\n-        FileResource fileResource = preheat.get( TrackerIdScheme.UID, FileResource.class, fr );\n-\n-        if ( fileResource == null )\n-        {\n-            return;\n-        }\n-\n-        fileResource.setAssigned( isAssign );\n-        session.persist( fileResource );\n-    }\n+        TrackerBundleReport bundleReport = new TrackerBundleReport();\n \n-    private User getUser( User user, String userUid )\n-    {\n-        if ( user != null ) // \u0131f user already set, reload the user to make sure its loaded in the current\n-        // tx\n+        if ( TrackerBundleMode.VALIDATE == bundle.getImportMode() )\n         {\n-            return identifiableObjectManager.get( User.class, user.getUid() );\n+            return bundleReport;\n         }\n \n-        if ( !StringUtils.isEmpty( userUid ) )\n-        {\n-            user = identifiableObjectManager.get( User.class, userUid );\n-        }\n+        Stream.of( TrackerType.values() )\n+            .forEach( t -> bundleReport.getTypeReportMap().put( t, DELETION_MAPPER.get( t )\n+            .apply( bundle, t ) ) );\n \n-        if ( user == null )\n-        {\n-            user = currentUserService.getCurrentUser();\n-        }\n+        dbmsManager.clearSession();\n+        cacheManager.clearCache();\n \n-        return user;\n+        return bundleReport;\n     }\n }\n", "next_change": {"commit": "8c4a255176ac5e675c549db2065926fdbaf0290b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\nindex 502b7ce86f..915b7da07c 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n", "chunk": "@@ -235,10 +214,7 @@ public class DefaultTrackerBundleService\n \n         Stream.of( TrackerType.values() )\n             .forEach( t -> bundleReport.getTypeReportMap().put( t, DELETION_MAPPER.get( t )\n-            .apply( bundle, t ) ) );\n-\n-        dbmsManager.clearSession();\n-        cacheManager.clearCache();\n+                .apply( bundle, t ) ) );\n \n         return bundleReport;\n     }\n", "next_change": {"commit": "4c9e21a843bbdbd73b0aeaf99e2d0320ac0bb811", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\nindex 915b7da07c..8097ccd5b2 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n", "chunk": "@@ -212,7 +184,7 @@ public class DefaultTrackerBundleService\n             return bundleReport;\n         }\n \n-        Stream.of( TrackerType.values() )\n+        Stream.of( TrackerType.values() ).sorted( Collections.reverseOrder() )\n             .forEach( t -> bundleReport.getTypeReportMap().put( t, DELETION_MAPPER.get( t )\n                 .apply( bundle, t ) ) );\n \n", "next_change": {"commit": "e66352e7a1e54e17a7b1da3f71bfe6f924311705", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\nindex 8097ccd5b2..b240ddbcd2 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n", "chunk": "@@ -186,7 +171,7 @@ public class DefaultTrackerBundleService\n \n         Stream.of( TrackerType.values() ).sorted( Collections.reverseOrder() )\n             .forEach( t -> bundleReport.getTypeReportMap().put( t, DELETION_MAPPER.get( t )\n-                .apply( bundle, t ) ) );\n+                .apply( bundle ) ) );\n \n         return bundleReport;\n     }\n", "next_change": {"commit": "a7d5843c3d0da8b45bc96835e940185ed36788fc", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\nindex b240ddbcd2..b59218d004 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n", "chunk": "@@ -169,9 +157,12 @@ public class DefaultTrackerBundleService\n             return bundleReport;\n         }\n \n-        Stream.of( TrackerType.values() ).sorted( Collections.reverseOrder() )\n-            .forEach( t -> bundleReport.getTypeReportMap().put( t, DELETION_MAPPER.get( t )\n-                .apply( bundle ) ) );\n+        Map<TrackerType, TrackerTypeReport> report = bundleReport.getTypeReportMap();\n+        report.put( TrackerType.RELATIONSHIP, deletionService.deleteRelationShips( bundle ) );\n+        report.put( TrackerType.EVENT, deletionService.deleteEvents( bundle ) );\n+        report.put( TrackerType.ENROLLMENT, deletionService.deleteEnrollments( bundle ) );\n+        report.put( TrackerType.TRACKED_ENTITY,\n+            deletionService.deleteTrackedEntityInstances( bundle ) );\n \n         return bundleReport;\n     }\n", "next_change": {"commit": "e4b9a5c802805b26fe8255711d1f98e662f15c6d", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\nindex b59218d004..70a25b7718 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n", "chunk": "@@ -148,22 +146,19 @@ public class DefaultTrackerBundleService\n \n     @Override\n     @Transactional\n-    public TrackerBundleReport delete( TrackerBundle bundle )\n+    public PersistenceReport delete( TrackerBundle bundle )\n     {\n-        TrackerBundleReport bundleReport = new TrackerBundleReport();\n-\n         if ( TrackerBundleMode.VALIDATE == bundle.getImportMode() )\n         {\n-            return bundleReport;\n+            return PersistenceReport.emptyReport();\n         }\n \n-        Map<TrackerType, TrackerTypeReport> report = bundleReport.getTypeReportMap();\n-        report.put( TrackerType.RELATIONSHIP, deletionService.deleteRelationShips( bundle ) );\n-        report.put( TrackerType.EVENT, deletionService.deleteEvents( bundle ) );\n-        report.put( TrackerType.ENROLLMENT, deletionService.deleteEnrollments( bundle ) );\n-        report.put( TrackerType.TRACKED_ENTITY,\n-            deletionService.deleteTrackedEntityInstances( bundle ) );\n+        Map<TrackerType, TrackerTypeReport> reportMap = Map.of(\n+            TrackerType.RELATIONSHIP, deletionService.deleteRelationShips( bundle ),\n+            TrackerType.EVENT, deletionService.deleteEvents( bundle ),\n+            TrackerType.ENROLLMENT, deletionService.deleteEnrollments( bundle ),\n+            TrackerType.TRACKED_ENTITY, deletionService.deleteTrackedEntityInstances( bundle ) );\n \n-        return bundleReport;\n+        return new PersistenceReport( reportMap );\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "message": "Merge commit", "committedDate": null}, {"oid": "399526882c2fbbf5600922b3c3b6030420cf4e96", "committedDate": "2020-07-13 12:23:07 +0200", "message": "feat: Run rule engine rules in new importer [DHIS2-7310]"}, {"oid": "2ed799f33ca26b918ed60473a3f097714f00492e", "committedDate": "2020-08-04 10:30:01 +0200", "message": "chore: Clean up code (#5877)"}, {"oid": "3e3dc98d92f0c13fb56cf17894eab06a78842133", "committedDate": "2020-08-04 17:20:37 +0200", "message": "feat: Enrollment/Events note persistence"}, {"oid": "c22c6f59ea7f5b3eec062a2f4eb00f2c4dae2a2d", "committedDate": "2020-08-04 17:20:41 +0200", "message": "chore: javadoc"}, {"oid": "969f25ca303dccefd5c10ed39fd8ca92a0bc6583", "committedDate": "2020-08-04 17:20:41 +0200", "message": "chore: add missing license headers"}, {"oid": "8374cb43e422eddc1f4c01bb715d8d285acc37be", "committedDate": "2020-08-10 11:38:43 +0200", "message": "Merge remote-tracking branch 'origin/master' into DHIS2-7310-merge"}, {"oid": "8d077aaaa69bc32d819217e4c90324d34541c2b0", "committedDate": "2020-08-12 10:22:42 +0200", "message": "Last fixes"}, {"oid": "6e1e12a2fe3c14f79781d64ec3f890f680cf49a4", "committedDate": "2020-08-24 15:50:03 +0200", "message": "feat: Added support for data values in event import [DHIS2-9270]"}, {"oid": "3b12f81c2a6fa41132216efee156f96f1874e91b", "committedDate": "2020-08-25 10:12:44 +0200", "message": "Fix code review comments"}, {"oid": "d70c4998dcb8cf4b7f356f73c3ecb1a5d4f9c352", "committedDate": "2020-08-25 18:05:54 +0200", "message": "feat: Add skipSideEffects check (#5986)"}, {"oid": "82a863c258aa34e592b309bb9d6081c4dc8f981b", "committedDate": "2020-08-27 14:46:58 +0200", "message": "feat: Add support for deletion of tracker objects [DHIS2-9085] (#5959)"}, {"oid": "cb2ee65c0210c0d4b2bd8851789da8d4adfaf04d", "committedDate": "2020-09-07 10:28:21 +0200", "message": "fix: [DHIS2-9287] Fix the stats in the import summary (#6062)"}, {"oid": "c2e0b3718cd8c7597ee5ec2e5193e7eafacf5827", "committedDate": "2020-09-08 09:47:19 +0200", "message": "fix: prevent Hibernate session errors with User object (#6063)"}, {"oid": "8aaeab2ee4dd7a9ffa927147931dff8609ef787a", "committedDate": "2020-09-23 15:33:34 +0200", "message": "chore: Remove unused imports (#6219)"}, {"oid": "87ef26080354e452d282d374e4dc6de996844a1c", "committedDate": "2020-10-02 09:53:53 +0200", "message": "test: Add integration tests for tracker side effects (#5833)"}, {"oid": "23a1aca18690c1c6a18fc0ab8cf734b637896d1b", "committedDate": "2020-11-05 11:00:30 +0100", "message": "fix: [DHIS2-9886] [DHIS2-9890] deserialization of primitive and null check for datavalue dates (#6566)"}, {"oid": "55bfd204388f6a780682802d3a0d205d191486ce", "committedDate": "2020-11-16 16:21:33 +0100", "message": "fix: incorrect relationship count in import report (#6660)"}, {"oid": "cc2736d02fb6c94cc2dfccaea482dcb82902d4be", "committedDate": "2020-11-18 09:55:24 +0100", "message": "fix: [DHIS2-9976] Remove stacktrace for exception raised by rule enigine calls (#6703)"}, {"oid": "4b8923e6eb12d67e7c17ef2af20af6fd02f2fd0b", "committedDate": "2020-11-23 09:15:08 +0100", "message": "feat: flag to disable rule engine (#6737)"}, {"oid": "1f0559c94f01b1497116fe5ba2e19f28f072a879", "committedDate": "2020-11-23 09:21:47 +0100", "message": "fix: invalid ignore count in Tracker Import stats (#6721)"}, {"oid": "3e799d196b8f73ad216ea100a07ddd5f7dfc53e0", "committedDate": "2020-11-30 16:37:14 +0100", "message": "fix: remove long running transaction during Tracker Import (#6782)"}, {"oid": "3ab88a5f4623a8c749246bedef34fcb926d185cb", "committedDate": "2020-12-08 10:40:14 +0100", "message": "fix: [DHIS2-7310] Move rule engine call and validations after bundle validation (#6843)"}, {"oid": "7098e9412b922ed70f8136f30c7d790e27bb43be", "committedDate": "2020-12-10 10:43:44 +0100", "message": "chore: Remove unused imports (#6875)"}, {"oid": "8c4a255176ac5e675c549db2065926fdbaf0290b", "committedDate": "2020-12-14 08:31:48 +0100", "message": "fix: Remove clearSession/clearCache inside transaction causing audit fail (#6876)"}, {"oid": "c4f1db1dab576bc73489a9e0a6d015acec2eab5b", "committedDate": "2020-12-15 15:09:02 +0100", "message": "feat: Tracker Import metadata cache (#6877)"}, {"oid": "3e25b9b834757233501b068c1fd96b5b68cc22f7", "committedDate": "2020-12-22 12:59:13 +0100", "message": "feat: Convert sharing objects to JSONB structure [DHIS2-5814]"}, {"oid": "679b32e817e4751c5ad4f0301a943104bf8f1d79", "committedDate": "2021-01-04 11:56:17 +0100", "message": "feat: Program rule assign action implentation (#7004)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "4c9e21a843bbdbd73b0aeaf99e2d0320ac0bb811", "committedDate": "2021-03-02 15:17:00 +0100", "message": "fix: Correct error report when using DELETE ImportStrategy (#7491)"}, {"oid": "00ba07c1c8555a473f261d56bffffa2b75d3c146", "committedDate": "2021-03-08 12:59:21 +0100", "message": "refactor: Remove unused bundle hook and fix tests [TECH-553] (#7539)"}, {"oid": "a4643bd1fe923092627bdd884e05e5dacc7a5911", "committedDate": "2021-04-30 14:46:25 +0200", "message": "refactor: Refactor rule engine service in the new importer to group events and enrollments in one call (#7925)"}, {"oid": "6901c3e799d56703ac02b01aff470f0594b71500", "committedDate": "2021-05-11 09:13:42 +0200", "message": "refactor: Refactor rule engine service in the new importer to group events and enrollments in one call (#7945)"}, {"oid": "e66352e7a1e54e17a7b1da3f71bfe6f924311705", "committedDate": "2021-07-20 08:49:34 +0200", "message": "fix: Include deleted object in the report object map [DHIS2-11196] (#8419)"}, {"oid": "d4ef7d2434dab562b93e092b3a4b27e56c9df1e1", "committedDate": "2021-10-04 09:47:50 +0200", "message": "fix: NTI: last updated date on TEI is not updated when underlying data changes [ DHIS2-11824 ] 2.38 (#8891)"}, {"oid": "7a29e754f286e13159ae833d5174d625e2fb1ffe", "committedDate": "2021-10-19 14:18:46 +0200", "message": "perf: AttributeValueService is no more an AbstractPersister dependency [DHIS2-11988] (#9069)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "a7d5843c3d0da8b45bc96835e940185ed36788fc", "committedDate": "2022-02-02 07:56:53 +0100", "message": "chore: reduce indirection in DefaultTrackerBundleService (#9711)"}, {"oid": "e4b9a5c802805b26fe8255711d1f98e662f15c6d", "committedDate": "2022-12-14 10:01:20 +0100", "message": "chore: Rename and clean up report model objects [TECH-14298] (#12525)"}, {"oid": "55f98482354fe2ab5b68c7a334e2933e3d2e7159", "committedDate": "2023-01-03 13:37:04 +0100", "message": "refactor: Clean up step to call rule engine [DHIS2-14408] (#12665)"}, {"oid": "4254ae8a51fb72bd28abfb208164f149cef48114", "committedDate": "2023-01-20 14:15:51 +0100", "message": "refactor: Refactor execution of enrollment rule actions [DHIS2-14408] (#12779)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg1MjkxMQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r429852911", "body": "No, but this should be handled in the validation code?", "bodyText": "No, but this should be handled in the validation code?", "bodyHTML": "<p dir=\"auto\">No, but this should be handled in the validation code?</p>", "author": "mortenoh", "createdAt": "2020-05-25T10:08:31Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java", "diffHunk": "@@ -467,19 +472,35 @@ private void handleTrackedEntityAttributeValues( Session session, TrackerPreheat\n                 attributeValues.add( attributeValue );\n             }\n \n-            if ( !attributeValuesForDeletion.contains( at.getAttribute() )\n-                && attributeValue.getAttribute().getValueType().isFile() )\n+            // TODO: What to do here? Should this be allowed? i.e ,  attributeValue.getAttribute() != null  this makes a NP\n+            if ( !attributeValuesForDeletion.contains( at.getAttribute() ) &&\n+                attributeValue.getAttribute() != null && attributeValue.getAttribute().getValueType().isFile() )\n             {\n                 assignedFileResources.add( at.getValue() );\n             }\n+\n+\n+//            if ( !attributeValuesForDeletion.contains( at.getAttribute() )\n+//                && attributeValue.getAttribute().getValueType().isFile() )\n+//            {\n+//                assignedFileResources.add( at.getValue() );\n+//            }\n         }\n \n         for ( TrackedEntityAttributeValue attributeValue : attributeValues )\n         {\n             // since TEAV is the owning side here, we don't bother updating the TE.teav\n             // collection\n             // as it will be reloaded on session clear\n-            if ( attributeValuesForDeletion.contains( attributeValue.getAttribute().getUid() ) )\n+            TrackedEntityAttribute attribute = attributeValue.getAttribute();\n+\n+//            // TODO: What to do here? Should this be allowed?", "originalCommit": "a5f6d361402efd03ab461bcffa6bcc50be96c520", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzgxNjE5Nw==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r433816197", "bodyText": "Yes, it is now. If validation is done before commit and fails this state should not be possible. Added a NP (assert) to explicitly explain this state.", "author": "netroms", "createdAt": "2020-06-02T11:49:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg1MjkxMQ=="}], "type": "inlineReview", "revised_code": {"commit": "3e77f4b8e597ba000a126e053ebb3af75e7a664f", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\nindex 0979d225cb..6027c971dd 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n", "chunk": "@@ -494,11 +464,7 @@ public class DefaultTrackerBundleService\n             // as it will be reloaded on session clear\n             TrackedEntityAttribute attribute = attributeValue.getAttribute();\n \n-//            // TODO: What to do here? Should this be allowed?\n-            if ( attribute == null )\n-            {\n-                continue;\n-            }\n+            Objects.requireNonNull( attribute, \"Attribute should never be NULL here if validation is enforced before commit.\" );\n \n             if ( attributeValuesForDeletion.contains( attribute.getUid() ) )\n             {\n", "next_change": {"commit": "6ccecbd0f6da424e90174d23f11e6a6498621100", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\nindex 6027c971dd..13e7efd689 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n", "chunk": "@@ -464,7 +468,8 @@ public class DefaultTrackerBundleService\n             // as it will be reloaded on session clear\n             TrackedEntityAttribute attribute = attributeValue.getAttribute();\n \n-            Objects.requireNonNull( attribute, \"Attribute should never be NULL here if validation is enforced before commit.\" );\n+            Objects.requireNonNull( attribute,\n+                \"Attribute should never be NULL here if validation is enforced before commit.\" );\n \n             if ( attributeValuesForDeletion.contains( attribute.getUid() ) )\n             {\n", "next_change": {"commit": "3999d1c8e8d7c2bcd11c7c5d99fec179abd25e2b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\nindex 13e7efd689..f93c73c7bb 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n", "chunk": "@@ -468,7 +473,7 @@ public class DefaultTrackerBundleService\n             // as it will be reloaded on session clear\n             TrackedEntityAttribute attribute = attributeValue.getAttribute();\n \n-            Objects.requireNonNull( attribute,\n+            checkNotNull( attribute,\n                 \"Attribute should never be NULL here if validation is enforced before commit.\" );\n \n             if ( attributeValuesForDeletion.contains( attribute.getUid() ) )\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\nindex 0979d225cb..f93c73c7bb 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n", "chunk": "@@ -494,11 +473,8 @@ public class DefaultTrackerBundleService\n             // as it will be reloaded on session clear\n             TrackedEntityAttribute attribute = attributeValue.getAttribute();\n \n-//            // TODO: What to do here? Should this be allowed?\n-            if ( attribute == null )\n-            {\n-                continue;\n-            }\n+            checkNotNull( attribute,\n+                \"Attribute should never be NULL here if validation is enforced before commit.\" );\n \n             if ( attributeValuesForDeletion.contains( attribute.getUid() ) )\n             {\n", "next_change": {"commit": "6e1e12a2fe3c14f79781d64ec3f890f680cf49a4", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\nindex f93c73c7bb..70bd84df11 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n", "chunk": "@@ -399,90 +439,41 @@ public class DefaultTrackerBundleService\n     // -----------------------------------------------------------------------------------\n \n     private void handleTrackedEntityAttributeValues( Session session, TrackerPreheat preheat,\n-        List<Attribute> attributes, TrackedEntityInstance trackedEntityInstance )\n+        List<Attribute> payloadAttributes, TrackedEntityInstance trackedEntityInstance )\n     {\n-        List<TrackedEntityAttributeValue> attributeValues = new ArrayList<>();\n-        List<String> attributeValuesForDeletion = new ArrayList<>();\n-\n-        List<String> assignedFileResources = new ArrayList<>();\n-        List<String> unassignedFileResources = new ArrayList<>();\n-\n-        Map<String, TrackedEntityAttributeValue> attributeValueMap = trackedEntityInstance\n+        Map<String, TrackedEntityAttributeValue> attributeValueDBMap = trackedEntityInstance\n             .getTrackedEntityAttributeValues()\n             .stream()\n             .collect( Collectors.toMap( teav -> teav.getAttribute().getUid(),\n                 trackedEntityAttributeValue -> trackedEntityAttributeValue ) );\n \n-        for ( Attribute at : attributes )\n+        for ( Attribute at : payloadAttributes )\n         {\n-            // TEAV.getValue has a lot of trickery behind it since its being used for\n-            // encryption, so we can't rely on that to\n-            // get empty/null values, instead we build a simple list here to compare with.\n-            // TODO: Not sure how this will work, need to discuss, we have validations for empty value...\n-            if ( StringUtils.isEmpty( at.getValue() ) )\n-            {\n-                attributeValuesForDeletion.add( at.getAttribute() );\n-\n-                if ( attributeValueMap.containsKey( at.getAttribute() )\n-                    && attributeValueMap.get( at.getAttribute() ).getAttribute().getValueType().isFile() )\n-                {\n-                    unassignedFileResources.add( attributeValueMap.get( at.getAttribute() ).getValue() );\n-                }\n-            }\n-\n             TrackedEntityAttribute attribute = preheat.get( TrackerIdScheme.UID, TrackedEntityAttribute.class,\n                 at.getAttribute() );\n-            // TODO: What to do here? Should attribute == NULL this be allowed?\n-            TrackedEntityAttributeValue attributeValue = null;\n-\n-            if ( attributeValueMap.containsKey( at.getAttribute() ) )\n-            {\n-                TrackedEntityAttributeValue av = attributeValueMap.get( at.getAttribute() );\n-\n-                av.setAttribute( attribute ).setValue( at.getValue() ).setStoredBy( at.getStoredBy() );\n \n-                attributeValue = av;\n-                attributeValues.add( attributeValue );\n-            }\n-\n-            // new attribute value\n-            if ( attributeValue == null )\n-            {\n-                attributeValue = new TrackedEntityAttributeValue();\n-\n-                attributeValue.setAttribute( attribute ).setValue( at.getValue() ).setStoredBy( at.getStoredBy() );\n-\n-                attributeValues.add( attributeValue );\n-            }\n-\n-            checkNotNull( attributeValue.getAttribute(),\n+            checkNotNull( attribute,\n                 \"Attribute should never be NULL here if validation is enforced before commit.\" );\n \n-            // TODO: What to do here? Should this be allowed? i.e ,  attributeValue.getAttribute() != null  this makes a NP\n-            if ( !attributeValuesForDeletion.contains( at.getAttribute() ) &&\n-                attributeValue.getAttribute().getValueType().isFile() )\n-            {\n-                assignedFileResources.add( at.getValue() );\n-            }\n-        }\n-\n-        for ( TrackedEntityAttributeValue attributeValue : attributeValues )\n-        {\n-            // since TEAV is the owning side here, we don't bother updating the TE.teav\n-            // collection\n-            // as it will be reloaded on session clear\n-            TrackedEntityAttribute attribute = attributeValue.getAttribute();\n+            TrackedEntityAttributeValue attributeValue = attributeValueDBMap.getOrDefault( at.getAttribute(),\n+                new TrackedEntityAttributeValue() );\n \n-            checkNotNull( attribute,\n-                \"Attribute should never be NULL here if validation is enforced before commit.\" );\n+            attributeValue\n+                .setAttribute( attribute )\n+                .setEntityInstance( trackedEntityInstance )\n+                .setValue( at.getValue() )\n+                .setStoredBy( at.getStoredBy() );\n \n-            if ( attributeValuesForDeletion.contains( attribute.getUid() ) )\n+            // We cannot use attributeValue.getValue() because it uses encryption logic\n+            // So we need to use at.getValue()\n+            if ( StringUtils.isEmpty( at.getValue() ) )\n             {\n+                unassignFileResource( session, preheat, attributeValueDBMap.get( at.getAttribute() ).getValue() );\n                 session.remove( attributeValue );\n             }\n             else\n             {\n-                attributeValue.setEntityInstance( trackedEntityInstance );\n+                assignFileResource( session, preheat, attributeValue.getValue() );\n                 session.persist( attributeValue );\n             }\n \n", "next_change": {"commit": "3b12f81c2a6fa41132216efee156f96f1874e91b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\nindex 70bd84df11..0bc5edc3ea 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n", "chunk": "@@ -468,12 +470,18 @@ public class DefaultTrackerBundleService\n             // So we need to use at.getValue()\n             if ( StringUtils.isEmpty( at.getValue() ) )\n             {\n-                unassignFileResource( session, preheat, attributeValueDBMap.get( at.getAttribute() ).getValue() );\n+                if ( attribute.getValueType() == ValueType.FILE_RESOURCE )\n+                {\n+                    unassignFileResource( session, preheat, attributeValueDBMap.get( at.getAttribute() ).getValue() );\n+                }\n                 session.remove( attributeValue );\n             }\n             else\n             {\n-                assignFileResource( session, preheat, attributeValue.getValue() );\n+                if ( attribute.getValueType() == ValueType.FILE_RESOURCE )\n+                {\n+                    assignFileResource( session, preheat, attributeValue.getValue() );\n+                }\n                 session.persist( attributeValue );\n             }\n \n", "next_change": {"commit": "1f0559c94f01b1497116fe5ba2e19f28f072a879", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\nindex 0bc5edc3ea..502b7ce86f 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n", "chunk": "@@ -226,366 +217,29 @@ public class DefaultTrackerBundleService\n         return bundleReport;\n     }\n \n-    private TrackerTypeReport handleTrackedEntities( Session session, TrackerBundle bundle )\n-    {\n-        List<TrackedEntity> trackedEntities = bundle.getTrackedEntities();\n-        TrackerTypeReport typeReport = new TrackerTypeReport( TrackerType.TRACKED_ENTITY );\n-\n-        trackedEntities.forEach( o -> bundleHooks.forEach( hook -> hook.preCreate( TrackedEntity.class, o, bundle ) ) );\n-        session.flush();\n-\n-        Date now = new Date();\n-\n-        for ( int idx = 0; idx < trackedEntities.size(); idx++ )\n-        {\n-            TrackedEntity trackedEntity = trackedEntities.get( idx );\n-\n-            TrackedEntityInstance tei = teConverter.from( bundle.getPreheat(), trackedEntity );\n-            tei.setLastUpdated( now );\n-            tei.setLastUpdatedAtClient( now );\n-            tei.setLastUpdatedBy( bundle.getUser() );\n-\n-            TrackerObjectReport objectReport = new TrackerObjectReport( TrackerType.TRACKED_ENTITY, tei.getUid(), idx );\n-            typeReport.addObjectReport( objectReport );\n-\n-            session.persist( tei );\n-\n-            bundle.getPreheat().putTrackedEntities( bundle.getIdentifier(), Collections.singletonList( tei ) );\n-\n-            handleTrackedEntityAttributeValues( session, bundle.getPreheat(), trackedEntity.getAttributes(), tei );\n-\n-            if ( FlushMode.OBJECT == bundle.getFlushMode() )\n-            {\n-                session.flush();\n-            }\n-\n-            // TODO: Implement support for update and delete and rollback/decrement create etc.\n-            typeReport.getStats().incCreated();\n-        }\n-\n-        session.flush();\n-\n-        trackedEntities\n-            .forEach( o -> bundleHooks.forEach( hook ->\n-                hook.postCreate( TrackedEntity.class, o, bundle ) ) );\n-\n-        return typeReport;\n-    }\n-\n-    private TrackerTypeReport handleEnrollments( Session session, TrackerBundle bundle )\n-    {\n-        List<Enrollment> enrollments = bundle.getEnrollments();\n-        TrackerTypeReport typeReport = new TrackerTypeReport( TrackerType.ENROLLMENT );\n-\n-        enrollments.forEach( o -> bundleHooks.forEach( hook -> hook.preCreate( Enrollment.class, o, bundle ) ) );\n-        session.flush();\n-\n-        Date now = new Date();\n-\n-        for ( int idx = 0; idx < enrollments.size(); idx++ )\n-        {\n-            Enrollment enrollment = enrollments.get( idx );\n-\n-            ProgramInstance programInstance = enrollmentConverter.from( bundle.getPreheat(), enrollment );\n-\n-            if ( !programInstance.getComments().isEmpty() )\n-            {\n-                for ( TrackedEntityComment comment : programInstance.getComments() )\n-                {\n-                    this.trackedEntityCommentService.addTrackedEntityComment( comment );\n-                }\n-            }\n-\n-            programInstance.setLastUpdated( now );\n-            programInstance.setLastUpdatedAtClient( now );\n-            programInstance.setLastUpdatedBy( bundle.getUser() );\n-\n-            TrackerObjectReport objectReport = new TrackerObjectReport( TrackerType.ENROLLMENT,\n-                programInstance.getUid(), idx );\n-            typeReport.addObjectReport( objectReport );\n-\n-            session.persist( programInstance );\n-\n-            bundle.getPreheat().putEnrollments( bundle.getIdentifier(), Collections.singletonList( programInstance ) );\n-\n-            handleTrackedEntityAttributeValues( session, bundle.getPreheat(), enrollment.getAttributes(),\n-                programInstance.getEntityInstance() );\n-\n-            if ( FlushMode.OBJECT == bundle.getFlushMode() )\n-            {\n-                session.flush();\n-            }\n-\n-            // TODO: Implement support for update and delete and rollback/decrement create etc.\n-            typeReport.getStats().incCreated();\n-\n-            TrackerSideEffectDataBundle sideEffectDataBundle = TrackerSideEffectDataBundle.builder()\n-                .klass( ProgramInstance.class )\n-                .enrollmentRuleEffects( bundle.getEnrollmentRuleEffects() )\n-                .eventRuleEffects( bundle.getEventRuleEffects() )\n-                .object( programInstance )\n-                .importStrategy( bundle.getImportStrategy() )\n-                .accessedBy( bundle.getUsername() )\n-                .build();\n-\n-            sideEffectHandlers.forEach( handler -> handler.handleSideEffect( sideEffectDataBundle ) );\n-        }\n-\n-        session.flush();\n-        enrollments.forEach( o -> bundleHooks.forEach( hook -> hook.postCreate( Enrollment.class, o, bundle ) ) );\n-\n-        return typeReport;\n-    }\n-\n-    private TrackerTypeReport handleEvents( Session session, TrackerBundle bundle )\n-    {\n-        List<Event> events = bundle.getEvents();\n-        TrackerTypeReport typeReport = new TrackerTypeReport( TrackerType.EVENT );\n-\n-        events.forEach( o -> bundleHooks.forEach( hook -> hook.preCreate( Event.class, o, bundle ) ) );\n-        session.flush();\n-\n-        for ( int idx = 0; idx < events.size(); idx++ )\n-        {\n-            Event event = events.get( idx );\n-\n-            ProgramStageInstance programStageInstance = eventConverter.from( bundle.getPreheat(), event );\n-\n-            if ( !programStageInstance.getComments().isEmpty() )\n-            {\n-                for ( TrackedEntityComment comment : programStageInstance.getComments() )\n-                {\n-                    this.trackedEntityCommentService.addTrackedEntityComment( comment );\n-                }\n-            }\n-\n-            Date now = new Date();\n-            programStageInstance.setLastUpdated( now );\n-            programStageInstance.setLastUpdatedAtClient( now );\n-            programStageInstance.setLastUpdatedBy( bundle.getUser() );\n-\n-            TrackerObjectReport objectReport = new TrackerObjectReport( TrackerType.EVENT,\n-                programStageInstance.getUid(), idx );\n-            typeReport.addObjectReport( objectReport );\n-\n-            handleDataValues( session, bundle.getPreheat(), event.getDataValues(), programStageInstance );\n-\n-            session.persist( programStageInstance );\n-\n-            bundle.getPreheat().putEvents( bundle.getIdentifier(), Collections.singletonList( programStageInstance ) );\n-\n-            if ( FlushMode.OBJECT == bundle.getFlushMode() )\n-            {\n-                session.flush();\n-            }\n-\n-            // TODO: Implement support for update and delete and rollback/decrement create etc.\n-            typeReport.getStats().incCreated();\n-\n-            TrackerSideEffectDataBundle sideEffectDataBundle = TrackerSideEffectDataBundle.builder()\n-                .klass( ProgramStageInstance.class )\n-                .enrollmentRuleEffects( bundle.getEnrollmentRuleEffects() )\n-                .eventRuleEffects( bundle.getEventRuleEffects() )\n-                .object( programStageInstance )\n-                .importStrategy( bundle.getImportStrategy() )\n-                .accessedBy( bundle.getUsername() )\n-                .build();\n-\n-            sideEffectHandlers.forEach( handler -> handler.handleSideEffect( sideEffectDataBundle ) );\n-        }\n-\n-        session.flush();\n-\n-        events.forEach( o -> bundleHooks.forEach( hook -> hook.postCreate( Event.class, o, bundle ) ) );\n-\n-        return typeReport;\n-    }\n-\n-    private TrackerTypeReport handleRelationships( Session session, TrackerBundle bundle )\n-    {\n-        List<Relationship> relationships = bundle.getRelationships();\n-        TrackerTypeReport typeReport = new TrackerTypeReport( TrackerType.RELATIONSHIP );\n-\n-        relationships.forEach( o -> bundleHooks.forEach( hook -> hook.preCreate( Relationship.class, o, bundle ) ) );\n-\n-        for ( int idx = 0; idx < relationships.size(); idx++ )\n-        {\n-            org.hisp.dhis.relationship.Relationship relationship = relationshipConverter\n-                .from( bundle.getPreheat(), relationships.get( idx ) );\n-            Date now = new Date();\n-            relationship.setLastUpdated( now );\n-            relationship.setLastUpdatedBy( bundle.getUser() );\n-\n-            TrackerObjectReport objectReport = new TrackerObjectReport( TrackerType.EVENT, relationship.getUid(), idx );\n-            typeReport.addObjectReport( objectReport );\n-\n-            session.persist( relationship );\n-            typeReport.getStats().incCreated();\n-\n-            if ( FlushMode.OBJECT == bundle.getFlushMode() )\n-            {\n-                session.flush();\n-            }\n-\n-            typeReport.getStats().incCreated();\n-        }\n-\n-        session.flush();\n-\n-        relationships.forEach( o -> bundleHooks.forEach( hook -> hook.postCreate( Relationship.class, o, bundle ) ) );\n-\n-        return typeReport;\n-    }\n-\n-    // -----------------------------------------------------------------------------------\n-    // Utility Methods\n-    // -----------------------------------------------------------------------------------\n-\n-    private void handleTrackedEntityAttributeValues( Session session, TrackerPreheat preheat,\n-        List<Attribute> payloadAttributes, TrackedEntityInstance trackedEntityInstance )\n-    {\n-        Map<String, TrackedEntityAttributeValue> attributeValueDBMap = trackedEntityInstance\n-            .getTrackedEntityAttributeValues()\n-            .stream()\n-            .collect( Collectors.toMap( teav -> teav.getAttribute().getUid(), Function.identity() ) );\n-\n-        for ( Attribute at : payloadAttributes )\n-        {\n-            TrackedEntityAttribute attribute = preheat.get( TrackerIdScheme.UID, TrackedEntityAttribute.class,\n-                at.getAttribute() );\n-\n-            checkNotNull( attribute,\n-                \"Attribute should never be NULL here if validation is enforced before commit.\" );\n-\n-            TrackedEntityAttributeValue attributeValue = attributeValueDBMap.getOrDefault( at.getAttribute(),\n-                new TrackedEntityAttributeValue() );\n-\n-            attributeValue\n-                .setAttribute( attribute )\n-                .setEntityInstance( trackedEntityInstance )\n-                .setValue( at.getValue() )\n-                .setStoredBy( at.getStoredBy() );\n-\n-            // We cannot use attributeValue.getValue() because it uses encryption logic\n-            // So we need to use at.getValue()\n-            if ( StringUtils.isEmpty( at.getValue() ) )\n-            {\n-                if ( attribute.getValueType() == ValueType.FILE_RESOURCE )\n-                {\n-                    unassignFileResource( session, preheat, attributeValueDBMap.get( at.getAttribute() ).getValue() );\n-                }\n-                session.remove( attributeValue );\n-            }\n-            else\n-            {\n-                if ( attribute.getValueType() == ValueType.FILE_RESOURCE )\n-                {\n-                    assignFileResource( session, preheat, attributeValue.getValue() );\n-                }\n-                session.persist( attributeValue );\n-            }\n-\n-            if ( attributeValue.getAttribute().isGenerated() && attributeValue.getAttribute().getTextPattern() != null )\n-            {\n-                reservedValueService.useReservedValue( attributeValue.getAttribute().getTextPattern(),\n-                    attributeValue.getValue() );\n-            }\n-        }\n-    }\n-\n-    private void handleDataValues( Session session, TrackerPreheat preheat, Set<DataValue> payloadDataValues,\n-        ProgramStageInstance psi )\n-    {\n-        Map<String, EventDataValue> dataValueDBMap = psi\n-            .getEventDataValues()\n-            .stream()\n-            .collect( Collectors.toMap( dv -> dv.getDataElement(), Function.identity() ) );\n-\n-        for ( DataValue dv : payloadDataValues )\n-        {\n-            DataElement dateElement = preheat.get( TrackerIdScheme.UID, DataElement.class, dv.getDataElement() );\n-\n-            checkNotNull( dateElement,\n-                \"Data element should never be NULL here if validation is enforced before commit.\" );\n-\n-            EventDataValue eventDataValue = dataValueDBMap.getOrDefault( dv.getDataElement(), new EventDataValue() );\n-\n-            eventDataValue.setDataElement( dateElement.getUid() );\n-            eventDataValue.setValue( dv.getValue() );\n-            eventDataValue.setStoredBy( dv.getStoredBy() );\n-\n-            try\n-            {\n-                eventDataValue.setCreated( new SimpleDateFormat( \"yyyy-MM-dd\" ).parse( dv.getCreatedAt() ) );\n-                eventDataValue.setLastUpdated( new SimpleDateFormat( \"yyyy-MM-dd\" ).parse( dv.getUpdatedAt() ) );\n-            }\n-            catch ( ParseException e )\n-            {\n-                // Created and updated dates are already validated.\n-                // This catch should never be reached\n-                e.printStackTrace();\n-            }\n-\n-            if ( StringUtils.isEmpty( eventDataValue.getValue() ) )\n-            {\n-                if ( dateElement.isFileType() )\n-                {\n-                    unassignFileResource( session, preheat, dataValueDBMap.get( dv.getDataElement() ).getValue() );\n-                }\n-                psi.getEventDataValues().remove( eventDataValue );\n-            }\n-            else\n-            {\n-                if ( dateElement.isFileType() )\n-                {\n-                    assignFileResource( session, preheat, eventDataValue.getValue() );\n-                }\n-                psi.getEventDataValues().add( eventDataValue );\n-            }\n-        }\n-    }\n-\n-    private void assignFileResource( Session session, TrackerPreheat preheat, String fr )\n-    {\n-        assignFileResource( session, preheat, fr, true );\n-    }\n-\n-    private void unassignFileResource( Session session, TrackerPreheat preheat, String fr )\n+    @Override\n+    public void handleTrackerSideEffects( List<TrackerSideEffectDataBundle> bundles )\n     {\n-        assignFileResource( session, preheat, fr, false );\n+        sideEffectHandlers.forEach( handler -> handler.handleSideEffects( bundles ) );\n     }\n \n-    private void assignFileResource( Session session, TrackerPreheat preheat, String fr, boolean isAssign )\n+    @Transactional\n+    public TrackerBundleReport delete( TrackerBundle bundle )\n     {\n-        FileResource fileResource = preheat.get( TrackerIdScheme.UID, FileResource.class, fr );\n-\n-        if ( fileResource == null )\n-        {\n-            return;\n-        }\n-\n-        fileResource.setAssigned( isAssign );\n-        session.persist( fileResource );\n-    }\n+        TrackerBundleReport bundleReport = new TrackerBundleReport();\n \n-    private User getUser( User user, String userUid )\n-    {\n-        if ( user != null ) // \u0131f user already set, reload the user to make sure its loaded in the current\n-        // tx\n+        if ( TrackerBundleMode.VALIDATE == bundle.getImportMode() )\n         {\n-            return identifiableObjectManager.get( User.class, user.getUid() );\n+            return bundleReport;\n         }\n \n-        if ( !StringUtils.isEmpty( userUid ) )\n-        {\n-            user = identifiableObjectManager.get( User.class, userUid );\n-        }\n+        Stream.of( TrackerType.values() )\n+            .forEach( t -> bundleReport.getTypeReportMap().put( t, DELETION_MAPPER.get( t )\n+            .apply( bundle, t ) ) );\n \n-        if ( user == null )\n-        {\n-            user = currentUserService.getCurrentUser();\n-        }\n+        dbmsManager.clearSession();\n+        cacheManager.clearCache();\n \n-        return user;\n+        return bundleReport;\n     }\n }\n", "next_change": {"commit": "8c4a255176ac5e675c549db2065926fdbaf0290b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\nindex 502b7ce86f..915b7da07c 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n", "chunk": "@@ -235,10 +214,7 @@ public class DefaultTrackerBundleService\n \n         Stream.of( TrackerType.values() )\n             .forEach( t -> bundleReport.getTypeReportMap().put( t, DELETION_MAPPER.get( t )\n-            .apply( bundle, t ) ) );\n-\n-        dbmsManager.clearSession();\n-        cacheManager.clearCache();\n+                .apply( bundle, t ) ) );\n \n         return bundleReport;\n     }\n", "next_change": {"commit": "4c9e21a843bbdbd73b0aeaf99e2d0320ac0bb811", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\nindex 915b7da07c..8097ccd5b2 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n", "chunk": "@@ -212,7 +184,7 @@ public class DefaultTrackerBundleService\n             return bundleReport;\n         }\n \n-        Stream.of( TrackerType.values() )\n+        Stream.of( TrackerType.values() ).sorted( Collections.reverseOrder() )\n             .forEach( t -> bundleReport.getTypeReportMap().put( t, DELETION_MAPPER.get( t )\n                 .apply( bundle, t ) ) );\n \n", "next_change": {"commit": "e66352e7a1e54e17a7b1da3f71bfe6f924311705", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\nindex 8097ccd5b2..b240ddbcd2 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n", "chunk": "@@ -186,7 +171,7 @@ public class DefaultTrackerBundleService\n \n         Stream.of( TrackerType.values() ).sorted( Collections.reverseOrder() )\n             .forEach( t -> bundleReport.getTypeReportMap().put( t, DELETION_MAPPER.get( t )\n-                .apply( bundle, t ) ) );\n+                .apply( bundle ) ) );\n \n         return bundleReport;\n     }\n", "next_change": {"commit": "a7d5843c3d0da8b45bc96835e940185ed36788fc", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\nindex b240ddbcd2..b59218d004 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n", "chunk": "@@ -169,9 +157,12 @@ public class DefaultTrackerBundleService\n             return bundleReport;\n         }\n \n-        Stream.of( TrackerType.values() ).sorted( Collections.reverseOrder() )\n-            .forEach( t -> bundleReport.getTypeReportMap().put( t, DELETION_MAPPER.get( t )\n-                .apply( bundle ) ) );\n+        Map<TrackerType, TrackerTypeReport> report = bundleReport.getTypeReportMap();\n+        report.put( TrackerType.RELATIONSHIP, deletionService.deleteRelationShips( bundle ) );\n+        report.put( TrackerType.EVENT, deletionService.deleteEvents( bundle ) );\n+        report.put( TrackerType.ENROLLMENT, deletionService.deleteEnrollments( bundle ) );\n+        report.put( TrackerType.TRACKED_ENTITY,\n+            deletionService.deleteTrackedEntityInstances( bundle ) );\n \n         return bundleReport;\n     }\n", "next_change": {"commit": "e4b9a5c802805b26fe8255711d1f98e662f15c6d", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\nindex b59218d004..70a25b7718 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/bundle/DefaultTrackerBundleService.java\n", "chunk": "@@ -148,22 +146,19 @@ public class DefaultTrackerBundleService\n \n     @Override\n     @Transactional\n-    public TrackerBundleReport delete( TrackerBundle bundle )\n+    public PersistenceReport delete( TrackerBundle bundle )\n     {\n-        TrackerBundleReport bundleReport = new TrackerBundleReport();\n-\n         if ( TrackerBundleMode.VALIDATE == bundle.getImportMode() )\n         {\n-            return bundleReport;\n+            return PersistenceReport.emptyReport();\n         }\n \n-        Map<TrackerType, TrackerTypeReport> report = bundleReport.getTypeReportMap();\n-        report.put( TrackerType.RELATIONSHIP, deletionService.deleteRelationShips( bundle ) );\n-        report.put( TrackerType.EVENT, deletionService.deleteEvents( bundle ) );\n-        report.put( TrackerType.ENROLLMENT, deletionService.deleteEnrollments( bundle ) );\n-        report.put( TrackerType.TRACKED_ENTITY,\n-            deletionService.deleteTrackedEntityInstances( bundle ) );\n+        Map<TrackerType, TrackerTypeReport> reportMap = Map.of(\n+            TrackerType.RELATIONSHIP, deletionService.deleteRelationShips( bundle ),\n+            TrackerType.EVENT, deletionService.deleteEvents( bundle ),\n+            TrackerType.ENROLLMENT, deletionService.deleteEnrollments( bundle ),\n+            TrackerType.TRACKED_ENTITY, deletionService.deleteTrackedEntityInstances( bundle ) );\n \n-        return bundleReport;\n+        return new PersistenceReport( reportMap );\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "message": "Merge commit", "committedDate": null}, {"oid": "399526882c2fbbf5600922b3c3b6030420cf4e96", "committedDate": "2020-07-13 12:23:07 +0200", "message": "feat: Run rule engine rules in new importer [DHIS2-7310]"}, {"oid": "2ed799f33ca26b918ed60473a3f097714f00492e", "committedDate": "2020-08-04 10:30:01 +0200", "message": "chore: Clean up code (#5877)"}, {"oid": "3e3dc98d92f0c13fb56cf17894eab06a78842133", "committedDate": "2020-08-04 17:20:37 +0200", "message": "feat: Enrollment/Events note persistence"}, {"oid": "c22c6f59ea7f5b3eec062a2f4eb00f2c4dae2a2d", "committedDate": "2020-08-04 17:20:41 +0200", "message": "chore: javadoc"}, {"oid": "969f25ca303dccefd5c10ed39fd8ca92a0bc6583", "committedDate": "2020-08-04 17:20:41 +0200", "message": "chore: add missing license headers"}, {"oid": "8374cb43e422eddc1f4c01bb715d8d285acc37be", "committedDate": "2020-08-10 11:38:43 +0200", "message": "Merge remote-tracking branch 'origin/master' into DHIS2-7310-merge"}, {"oid": "8d077aaaa69bc32d819217e4c90324d34541c2b0", "committedDate": "2020-08-12 10:22:42 +0200", "message": "Last fixes"}, {"oid": "6e1e12a2fe3c14f79781d64ec3f890f680cf49a4", "committedDate": "2020-08-24 15:50:03 +0200", "message": "feat: Added support for data values in event import [DHIS2-9270]"}, {"oid": "3b12f81c2a6fa41132216efee156f96f1874e91b", "committedDate": "2020-08-25 10:12:44 +0200", "message": "Fix code review comments"}, {"oid": "d70c4998dcb8cf4b7f356f73c3ecb1a5d4f9c352", "committedDate": "2020-08-25 18:05:54 +0200", "message": "feat: Add skipSideEffects check (#5986)"}, {"oid": "82a863c258aa34e592b309bb9d6081c4dc8f981b", "committedDate": "2020-08-27 14:46:58 +0200", "message": "feat: Add support for deletion of tracker objects [DHIS2-9085] (#5959)"}, {"oid": "cb2ee65c0210c0d4b2bd8851789da8d4adfaf04d", "committedDate": "2020-09-07 10:28:21 +0200", "message": "fix: [DHIS2-9287] Fix the stats in the import summary (#6062)"}, {"oid": "c2e0b3718cd8c7597ee5ec2e5193e7eafacf5827", "committedDate": "2020-09-08 09:47:19 +0200", "message": "fix: prevent Hibernate session errors with User object (#6063)"}, {"oid": "8aaeab2ee4dd7a9ffa927147931dff8609ef787a", "committedDate": "2020-09-23 15:33:34 +0200", "message": "chore: Remove unused imports (#6219)"}, {"oid": "87ef26080354e452d282d374e4dc6de996844a1c", "committedDate": "2020-10-02 09:53:53 +0200", "message": "test: Add integration tests for tracker side effects (#5833)"}, {"oid": "23a1aca18690c1c6a18fc0ab8cf734b637896d1b", "committedDate": "2020-11-05 11:00:30 +0100", "message": "fix: [DHIS2-9886] [DHIS2-9890] deserialization of primitive and null check for datavalue dates (#6566)"}, {"oid": "55bfd204388f6a780682802d3a0d205d191486ce", "committedDate": "2020-11-16 16:21:33 +0100", "message": "fix: incorrect relationship count in import report (#6660)"}, {"oid": "cc2736d02fb6c94cc2dfccaea482dcb82902d4be", "committedDate": "2020-11-18 09:55:24 +0100", "message": "fix: [DHIS2-9976] Remove stacktrace for exception raised by rule enigine calls (#6703)"}, {"oid": "4b8923e6eb12d67e7c17ef2af20af6fd02f2fd0b", "committedDate": "2020-11-23 09:15:08 +0100", "message": "feat: flag to disable rule engine (#6737)"}, {"oid": "1f0559c94f01b1497116fe5ba2e19f28f072a879", "committedDate": "2020-11-23 09:21:47 +0100", "message": "fix: invalid ignore count in Tracker Import stats (#6721)"}, {"oid": "3e799d196b8f73ad216ea100a07ddd5f7dfc53e0", "committedDate": "2020-11-30 16:37:14 +0100", "message": "fix: remove long running transaction during Tracker Import (#6782)"}, {"oid": "3ab88a5f4623a8c749246bedef34fcb926d185cb", "committedDate": "2020-12-08 10:40:14 +0100", "message": "fix: [DHIS2-7310] Move rule engine call and validations after bundle validation (#6843)"}, {"oid": "7098e9412b922ed70f8136f30c7d790e27bb43be", "committedDate": "2020-12-10 10:43:44 +0100", "message": "chore: Remove unused imports (#6875)"}, {"oid": "8c4a255176ac5e675c549db2065926fdbaf0290b", "committedDate": "2020-12-14 08:31:48 +0100", "message": "fix: Remove clearSession/clearCache inside transaction causing audit fail (#6876)"}, {"oid": "c4f1db1dab576bc73489a9e0a6d015acec2eab5b", "committedDate": "2020-12-15 15:09:02 +0100", "message": "feat: Tracker Import metadata cache (#6877)"}, {"oid": "3e25b9b834757233501b068c1fd96b5b68cc22f7", "committedDate": "2020-12-22 12:59:13 +0100", "message": "feat: Convert sharing objects to JSONB structure [DHIS2-5814]"}, {"oid": "679b32e817e4751c5ad4f0301a943104bf8f1d79", "committedDate": "2021-01-04 11:56:17 +0100", "message": "feat: Program rule assign action implentation (#7004)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "4c9e21a843bbdbd73b0aeaf99e2d0320ac0bb811", "committedDate": "2021-03-02 15:17:00 +0100", "message": "fix: Correct error report when using DELETE ImportStrategy (#7491)"}, {"oid": "00ba07c1c8555a473f261d56bffffa2b75d3c146", "committedDate": "2021-03-08 12:59:21 +0100", "message": "refactor: Remove unused bundle hook and fix tests [TECH-553] (#7539)"}, {"oid": "a4643bd1fe923092627bdd884e05e5dacc7a5911", "committedDate": "2021-04-30 14:46:25 +0200", "message": "refactor: Refactor rule engine service in the new importer to group events and enrollments in one call (#7925)"}, {"oid": "6901c3e799d56703ac02b01aff470f0594b71500", "committedDate": "2021-05-11 09:13:42 +0200", "message": "refactor: Refactor rule engine service in the new importer to group events and enrollments in one call (#7945)"}, {"oid": "e66352e7a1e54e17a7b1da3f71bfe6f924311705", "committedDate": "2021-07-20 08:49:34 +0200", "message": "fix: Include deleted object in the report object map [DHIS2-11196] (#8419)"}, {"oid": "d4ef7d2434dab562b93e092b3a4b27e56c9df1e1", "committedDate": "2021-10-04 09:47:50 +0200", "message": "fix: NTI: last updated date on TEI is not updated when underlying data changes [ DHIS2-11824 ] 2.38 (#8891)"}, {"oid": "7a29e754f286e13159ae833d5174d625e2fb1ffe", "committedDate": "2021-10-19 14:18:46 +0200", "message": "perf: AttributeValueService is no more an AbstractPersister dependency [DHIS2-11988] (#9069)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "a7d5843c3d0da8b45bc96835e940185ed36788fc", "committedDate": "2022-02-02 07:56:53 +0100", "message": "chore: reduce indirection in DefaultTrackerBundleService (#9711)"}, {"oid": "e4b9a5c802805b26fe8255711d1f98e662f15c6d", "committedDate": "2022-12-14 10:01:20 +0100", "message": "chore: Rename and clean up report model objects [TECH-14298] (#12525)"}, {"oid": "55f98482354fe2ab5b68c7a334e2933e3d2e7159", "committedDate": "2023-01-03 13:37:04 +0100", "message": "refactor: Clean up step to call rule engine [DHIS2-14408] (#12665)"}, {"oid": "4254ae8a51fb72bd28abfb208164f149cef48114", "committedDate": "2023-01-20 14:15:51 +0100", "message": "refactor: Refactor execution of enrollment rule actions [DHIS2-14408] (#12779)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg1NDYzOA==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r429854638", "body": "Why?", "bodyText": "Why?", "bodyHTML": "<p dir=\"auto\">Why?</p>", "author": "mortenoh", "createdAt": "2020-05-25T10:12:36Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EventTrackerConverterService.java", "diffHunk": "@@ -110,8 +110,8 @@ public Event to( ProgramStageInstance programStageInstance )\n             event.setCompletedAt( DateUtils.getIso8601NoTz( psi.getCompletedDate() ) );\n             event.setCreatedAt( DateUtils.getIso8601NoTz( psi.getCreated() ) );\n             event.setUpdatedAt( DateUtils.getIso8601NoTz( psi.getLastUpdated() ) );\n-            event.setClientCreatedAt( DateUtils.getIso8601NoTz( psi.getCreatedAtClient() ) );\n-            event.setClientUpdatedAt( DateUtils.getIso8601NoTz( psi.getLastUpdatedAtClient() ) );\n+//            event.setClientCreatedAt( DateUtils.getIso8601NoTz( psi.getCreatedAtClient() ) );", "originalCommit": "a5f6d361402efd03ab461bcffa6bcc50be96c520", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzMzODI5Mg==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r433338292", "bodyText": "This was decided to remove according to @stian-sandvold, will double check.", "author": "netroms", "createdAt": "2020-06-01T16:11:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg1NDYzOA=="}], "type": "inlineReview", "revised_code": {"commit": "c5a94c3d798ab59a16b994801255c4ac2631887b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EventTrackerConverterService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EventTrackerConverterService.java\nindex d90facfb08..d29362791e 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EventTrackerConverterService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EventTrackerConverterService.java\n", "chunk": "@@ -110,8 +110,6 @@ public class EventTrackerConverterService\n             event.setCompletedAt( DateUtils.getIso8601NoTz( psi.getCompletedDate() ) );\n             event.setCreatedAt( DateUtils.getIso8601NoTz( psi.getCreated() ) );\n             event.setUpdatedAt( DateUtils.getIso8601NoTz( psi.getLastUpdated() ) );\n-//            event.setClientCreatedAt( DateUtils.getIso8601NoTz( psi.getCreatedAtClient() ) );\n-//            event.setClientUpdatedAt( DateUtils.getIso8601NoTz( psi.getLastUpdatedAtClient() ) );\n             event.setGeometry( psi.getGeometry() );\n             event.setDeleted( psi.isDeleted() );\n \n", "next_change": {"commit": "898c87ce14bf1faf20e8f8ebf3a5bc12f27437f0", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EventTrackerConverterService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EventTrackerConverterService.java\nindex d29362791e..fc12c3e155 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EventTrackerConverterService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EventTrackerConverterService.java\n", "chunk": "@@ -118,8 +116,6 @@ public class EventTrackerConverterService\n             if ( ou != null )\n             {\n                 event.setOrgUnit( ou.getUid() );\n-                // TODO do we need this? this is not even the translated name..\n-                // event.setOrgUnitName( ou.getName() );\n             }\n \n             Program program = psi.getProgramInstance().getProgram();\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EventTrackerConverterService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EventTrackerConverterService.java\nindex d90facfb08..fc12c3e155 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EventTrackerConverterService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EventTrackerConverterService.java\n", "chunk": "@@ -110,8 +108,6 @@ public class EventTrackerConverterService\n             event.setCompletedAt( DateUtils.getIso8601NoTz( psi.getCompletedDate() ) );\n             event.setCreatedAt( DateUtils.getIso8601NoTz( psi.getCreated() ) );\n             event.setUpdatedAt( DateUtils.getIso8601NoTz( psi.getLastUpdated() ) );\n-//            event.setClientCreatedAt( DateUtils.getIso8601NoTz( psi.getCreatedAtClient() ) );\n-//            event.setClientUpdatedAt( DateUtils.getIso8601NoTz( psi.getLastUpdatedAtClient() ) );\n             event.setGeometry( psi.getGeometry() );\n             event.setDeleted( psi.isDeleted() );\n \n", "next_change": {"commit": "a23e0ffd69867dff6f4dd17044d7bde9430b7416", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EventTrackerConverterService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EventTrackerConverterService.java\nindex fc12c3e155..08cee57196 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EventTrackerConverterService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EventTrackerConverterService.java\n", "chunk": "@@ -107,7 +112,9 @@ public class EventTrackerConverterService\n             event.setCompletedBy( psi.getCompletedBy() );\n             event.setCompletedAt( DateUtils.getIso8601NoTz( psi.getCompletedDate() ) );\n             event.setCreatedAt( DateUtils.getIso8601NoTz( psi.getCreated() ) );\n+            event.setCreatedAtClient( DateUtils.getIso8601NoTz( psi.getCreatedAtClient() ) );\n             event.setUpdatedAt( DateUtils.getIso8601NoTz( psi.getLastUpdated() ) );\n+            event.setUpdatedAtClient( DateUtils.getIso8601NoTz( psi.getLastUpdatedAtClient() ) );\n             event.setGeometry( psi.getGeometry() );\n             event.setDeleted( psi.isDeleted() );\n \n", "next_change": {"commit": "6e8f0d6c150b303d780b397f7646ff3383f16250", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EventTrackerConverterService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EventTrackerConverterService.java\nindex 08cee57196..e832917758 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EventTrackerConverterService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EventTrackerConverterService.java\n", "chunk": "@@ -106,15 +106,15 @@ public class EventTrackerConverterService\n             event.setFollowup( psi.getProgramInstance().getFollowup() );\n             event.setEnrollmentStatus( EnrollmentStatus.fromProgramStatus( psi.getProgramInstance().getStatus() ) );\n             event.setStatus( psi.getStatus() );\n-            event.setOccurredAt( DateUtils.getIso8601NoTz( psi.getExecutionDate() ) );\n-            event.setScheduledAt( DateUtils.getIso8601NoTz( psi.getDueDate() ) );\n+            event.setOccurredAt( DateUtils.instantFromDate( psi.getExecutionDate() ) );\n+            event.setScheduledAt( DateUtils.instantFromDate( psi.getDueDate() ) );\n             event.setStoredBy( psi.getStoredBy() );\n             event.setCompletedBy( psi.getCompletedBy() );\n-            event.setCompletedAt( DateUtils.getIso8601NoTz( psi.getCompletedDate() ) );\n-            event.setCreatedAt( DateUtils.getIso8601NoTz( psi.getCreated() ) );\n-            event.setCreatedAtClient( DateUtils.getIso8601NoTz( psi.getCreatedAtClient() ) );\n-            event.setUpdatedAt( DateUtils.getIso8601NoTz( psi.getLastUpdated() ) );\n-            event.setUpdatedAtClient( DateUtils.getIso8601NoTz( psi.getLastUpdatedAtClient() ) );\n+            event.setCompletedAt( DateUtils.instantFromDate( psi.getCompletedDate() ) );\n+            event.setCreatedAt( DateUtils.instantFromDate( psi.getCreated() ) );\n+            event.setCreatedAtClient( DateUtils.instantFromDate( psi.getCreatedAtClient() ) );\n+            event.setUpdatedAt( DateUtils.instantFromDate( psi.getLastUpdated() ) );\n+            event.setUpdatedAtClient( DateUtils.instantFromDate( psi.getLastUpdatedAtClient() ) );\n             event.setGeometry( psi.getGeometry() );\n             event.setDeleted( psi.isDeleted() );\n \n", "next_change": {"commit": "b1671abae3de25b9f7d137dad69aa44486062f57", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EventTrackerConverterService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EventTrackerConverterService.java\nindex e832917758..303ef6bad6 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EventTrackerConverterService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EventTrackerConverterService.java\n", "chunk": "@@ -122,15 +119,12 @@ public class EventTrackerConverterService\n \n             if ( ou != null )\n             {\n-                event.setOrgUnit( ou.getUid() );\n+                event.setOrgUnit( MetadataIdentifier.ofUid( ou.getUid() ) );\n                 event.setOrgUnitName( ou.getName() );\n             }\n \n-            Program program = psi.getProgramInstance().getProgram();\n-\n-            event.setProgram( program.getUid() );\n             event.setEnrollment( psi.getProgramInstance().getUid() );\n-            event.setProgramStage( psi.getProgramStage().getUid() );\n+            event.setProgramStage( MetadataIdentifier.ofUid( psi.getProgramStage().getUid() ) );\n             event.setAttributeOptionCombo( psi.getAttributeOptionCombo().getUid() );\n             event.setAttributeCategoryOptions( psi.getAttributeOptionCombo()\n                 .getCategoryOptions().stream().map( CategoryOption::getUid ).collect( Collectors.joining( \";\" ) ) );\n", "next_change": {"commit": "7f96b9e2e41e96d83226bcc182e3c88a2269ab18", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EventTrackerConverterService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EventTrackerConverterService.java\nindex 303ef6bad6..6213963270 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EventTrackerConverterService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EventTrackerConverterService.java\n", "chunk": "@@ -125,7 +125,7 @@ public class EventTrackerConverterService\n \n             event.setEnrollment( psi.getProgramInstance().getUid() );\n             event.setProgramStage( MetadataIdentifier.ofUid( psi.getProgramStage().getUid() ) );\n-            event.setAttributeOptionCombo( psi.getAttributeOptionCombo().getUid() );\n+            event.setAttributeOptionCombo( MetadataIdentifier.ofUid( psi.getAttributeOptionCombo().getUid() ) );\n             event.setAttributeCategoryOptions( psi.getAttributeOptionCombo()\n                 .getCategoryOptions().stream().map( CategoryOption::getUid ).collect( Collectors.joining( \";\" ) ) );\n \n", "next_change": {"commit": "382a593af44ef61dfedc169b98d266bc6411b09f", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EventTrackerConverterService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EventTrackerConverterService.java\nindex 6213963270..046a2ec0ed 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EventTrackerConverterService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EventTrackerConverterService.java\n", "chunk": "@@ -126,8 +126,10 @@ public class EventTrackerConverterService\n             event.setEnrollment( psi.getProgramInstance().getUid() );\n             event.setProgramStage( MetadataIdentifier.ofUid( psi.getProgramStage().getUid() ) );\n             event.setAttributeOptionCombo( MetadataIdentifier.ofUid( psi.getAttributeOptionCombo().getUid() ) );\n-            event.setAttributeCategoryOptions( psi.getAttributeOptionCombo()\n-                .getCategoryOptions().stream().map( CategoryOption::getUid ).collect( Collectors.joining( \";\" ) ) );\n+            event.setAttributeCategoryOptions( psi.getAttributeOptionCombo().getCategoryOptions().stream()\n+                .map( CategoryOption::getUid )\n+                .map( MetadataIdentifier::ofUid )\n+                .collect( Collectors.toSet() ) );\n \n             Set<EventDataValue> dataValues = psi.getEventDataValues();\n \n", "next_change": {"commit": "156961b42f4047971223b4ed9816798a38bf2663", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EventTrackerConverterService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EventTrackerConverterService.java\nindex 046a2ec0ed..b68c5cb03c 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EventTrackerConverterService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EventTrackerConverterService.java\n", "chunk": "@@ -119,13 +119,13 @@ public class EventTrackerConverterService\n \n             if ( ou != null )\n             {\n-                event.setOrgUnit( MetadataIdentifier.ofUid( ou.getUid() ) );\n+                event.setOrgUnit( MetadataIdentifier.ofUid( ou ) );\n                 event.setOrgUnitName( ou.getName() );\n             }\n \n             event.setEnrollment( psi.getProgramInstance().getUid() );\n-            event.setProgramStage( MetadataIdentifier.ofUid( psi.getProgramStage().getUid() ) );\n-            event.setAttributeOptionCombo( MetadataIdentifier.ofUid( psi.getAttributeOptionCombo().getUid() ) );\n+            event.setProgramStage( MetadataIdentifier.ofUid( psi.getProgramStage() ) );\n+            event.setAttributeOptionCombo( MetadataIdentifier.ofUid( psi.getAttributeOptionCombo() ) );\n             event.setAttributeCategoryOptions( psi.getAttributeOptionCombo().getCategoryOptions().stream()\n                 .map( CategoryOption::getUid )\n                 .map( MetadataIdentifier::ofUid )\n", "next_change": null}]}}]}}]}}]}}]}}, {"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EventTrackerConverterService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EventTrackerConverterService.java\nindex fc12c3e155..08cee57196 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EventTrackerConverterService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EventTrackerConverterService.java\n", "chunk": "@@ -116,6 +123,7 @@ public class EventTrackerConverterService\n             if ( ou != null )\n             {\n                 event.setOrgUnit( ou.getUid() );\n+                event.setOrgUnitName( ou.getName() );\n             }\n \n             Program program = psi.getProgramInstance().getProgram();\n", "next_change": {"commit": "fe04922e144ac69367a99840d5518edda2d67f38", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EventTrackerConverterService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EventTrackerConverterService.java\nindex 08cee57196..b15312f75f 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EventTrackerConverterService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EventTrackerConverterService.java\n", "chunk": "@@ -126,9 +117,6 @@ public class EventTrackerConverterService\n                 event.setOrgUnitName( ou.getName() );\n             }\n \n-            Program program = psi.getProgramInstance().getProgram();\n-\n-            event.setProgram( program.getUid() );\n             event.setEnrollment( psi.getProgramInstance().getUid() );\n             event.setProgramStage( psi.getProgramStage().getUid() );\n             event.setAttributeOptionCombo( psi.getAttributeOptionCombo().getUid() );\n", "next_change": {"commit": "877c44b62acb2a3a35577f2948791826eca1b9c4", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EventTrackerConverterService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EventTrackerConverterService.java\nindex b15312f75f..21c29158c7 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EventTrackerConverterService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EventTrackerConverterService.java\n", "chunk": "@@ -118,7 +124,7 @@ public class EventTrackerConverterService\n             }\n \n             event.setEnrollment( psi.getProgramInstance().getUid() );\n-            event.setProgramStage( psi.getProgramStage().getUid() );\n+            event.setProgramStage( MetadataIdentifier.ofUid( psi.getProgramStage().getUid() ) );\n             event.setAttributeOptionCombo( psi.getAttributeOptionCombo().getUid() );\n             event.setAttributeCategoryOptions( psi.getAttributeOptionCombo()\n                 .getCategoryOptions().stream().map( CategoryOption::getUid ).collect( Collectors.joining( \";\" ) ) );\n", "next_change": {"commit": "7f96b9e2e41e96d83226bcc182e3c88a2269ab18", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EventTrackerConverterService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EventTrackerConverterService.java\nindex 21c29158c7..6213963270 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EventTrackerConverterService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EventTrackerConverterService.java\n", "chunk": "@@ -119,13 +119,13 @@ public class EventTrackerConverterService\n \n             if ( ou != null )\n             {\n-                event.setOrgUnit( ou.getUid() );\n+                event.setOrgUnit( MetadataIdentifier.ofUid( ou.getUid() ) );\n                 event.setOrgUnitName( ou.getName() );\n             }\n \n             event.setEnrollment( psi.getProgramInstance().getUid() );\n             event.setProgramStage( MetadataIdentifier.ofUid( psi.getProgramStage().getUid() ) );\n-            event.setAttributeOptionCombo( psi.getAttributeOptionCombo().getUid() );\n+            event.setAttributeOptionCombo( MetadataIdentifier.ofUid( psi.getAttributeOptionCombo().getUid() ) );\n             event.setAttributeCategoryOptions( psi.getAttributeOptionCombo()\n                 .getCategoryOptions().stream().map( CategoryOption::getUid ).collect( Collectors.joining( \";\" ) ) );\n \n", "next_change": {"commit": "382a593af44ef61dfedc169b98d266bc6411b09f", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EventTrackerConverterService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EventTrackerConverterService.java\nindex 6213963270..046a2ec0ed 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EventTrackerConverterService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EventTrackerConverterService.java\n", "chunk": "@@ -126,8 +126,10 @@ public class EventTrackerConverterService\n             event.setEnrollment( psi.getProgramInstance().getUid() );\n             event.setProgramStage( MetadataIdentifier.ofUid( psi.getProgramStage().getUid() ) );\n             event.setAttributeOptionCombo( MetadataIdentifier.ofUid( psi.getAttributeOptionCombo().getUid() ) );\n-            event.setAttributeCategoryOptions( psi.getAttributeOptionCombo()\n-                .getCategoryOptions().stream().map( CategoryOption::getUid ).collect( Collectors.joining( \";\" ) ) );\n+            event.setAttributeCategoryOptions( psi.getAttributeOptionCombo().getCategoryOptions().stream()\n+                .map( CategoryOption::getUid )\n+                .map( MetadataIdentifier::ofUid )\n+                .collect( Collectors.toSet() ) );\n \n             Set<EventDataValue> dataValues = psi.getEventDataValues();\n \n", "next_change": {"commit": "156961b42f4047971223b4ed9816798a38bf2663", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EventTrackerConverterService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EventTrackerConverterService.java\nindex 046a2ec0ed..b68c5cb03c 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EventTrackerConverterService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EventTrackerConverterService.java\n", "chunk": "@@ -119,13 +119,13 @@ public class EventTrackerConverterService\n \n             if ( ou != null )\n             {\n-                event.setOrgUnit( MetadataIdentifier.ofUid( ou.getUid() ) );\n+                event.setOrgUnit( MetadataIdentifier.ofUid( ou ) );\n                 event.setOrgUnitName( ou.getName() );\n             }\n \n             event.setEnrollment( psi.getProgramInstance().getUid() );\n-            event.setProgramStage( MetadataIdentifier.ofUid( psi.getProgramStage().getUid() ) );\n-            event.setAttributeOptionCombo( MetadataIdentifier.ofUid( psi.getAttributeOptionCombo().getUid() ) );\n+            event.setProgramStage( MetadataIdentifier.ofUid( psi.getProgramStage() ) );\n+            event.setAttributeOptionCombo( MetadataIdentifier.ofUid( psi.getAttributeOptionCombo() ) );\n             event.setAttributeCategoryOptions( psi.getAttributeOptionCombo().getCategoryOptions().stream()\n                 .map( CategoryOption::getUid )\n                 .map( MetadataIdentifier::ofUid )\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "message": "Merge commit", "committedDate": null}, {"oid": "399526882c2fbbf5600922b3c3b6030420cf4e96", "committedDate": "2020-07-13 12:23:07 +0200", "message": "feat: Run rule engine rules in new importer [DHIS2-7310]"}, {"oid": "3e3dc98d92f0c13fb56cf17894eab06a78842133", "committedDate": "2020-08-04 17:20:37 +0200", "message": "feat: Enrollment/Events note persistence"}, {"oid": "8374cb43e422eddc1f4c01bb715d8d285acc37be", "committedDate": "2020-08-10 11:38:43 +0200", "message": "Merge remote-tracking branch 'origin/master' into DHIS2-7310-merge"}, {"oid": "c70f79c6febd4b98e98c6f0c572d1099207d86b3", "committedDate": "2020-08-12 16:29:26 +0200", "message": "Code review fixes"}, {"oid": "6e1e12a2fe3c14f79781d64ec3f890f680cf49a4", "committedDate": "2020-08-24 15:50:03 +0200", "message": "feat: Added support for data values in event import [DHIS2-9270]"}, {"oid": "82a863c258aa34e592b309bb9d6081c4dc8f981b", "committedDate": "2020-08-27 14:46:58 +0200", "message": "feat: Add support for deletion of tracker objects [DHIS2-9085] (#5959)"}, {"oid": "cb2ee65c0210c0d4b2bd8851789da8d4adfaf04d", "committedDate": "2020-09-07 10:28:21 +0200", "message": "fix: [DHIS2-9287] Fix the stats in the import summary (#6062)"}, {"oid": "0d35843121f0ad3004fad015f1520c5b06a5c337", "committedDate": "2020-09-15 09:24:33 +0200", "message": "Merge 2.35 into master (#6149)"}, {"oid": "5bfed867f86e2752539302f2c8cfdce88146d8dd", "committedDate": "2020-11-03 10:37:34 +0100", "message": "fix: NPE when getting a saved event [DHIS2-9877] (#6553)"}, {"oid": "baeafb2d70910473ec698d1f75fe7572271c7c5c", "committedDate": "2020-11-17 14:40:05 +0100", "message": "fix: DHIS2-9894 assignedUser is now mapped to PSI (#6701)"}, {"oid": "b8c6c7169fb0bde20a685bc1b23289ac3658fbca", "committedDate": "2020-11-19 10:01:02 +0100", "message": "fix: [DHIS2-9894] Fix event converter to get the correct enrollment based on the type of program (#6717)"}, {"oid": "e063801f23d5aa761a791364c8c82e2d784f8c84", "committedDate": "2020-11-23 09:23:20 +0100", "message": "fix: DHIS2-9894 user assignment is checked through ProgramStage definition (#6720)"}, {"oid": "3e799d196b8f73ad216ea100a07ddd5f7dfc53e0", "committedDate": "2020-11-30 16:37:14 +0100", "message": "fix: remove long running transaction during Tracker Import (#6782)"}, {"oid": "a9aa89a8d5134104503d1cbb43f96b06f3531569", "committedDate": "2020-12-02 11:10:05 +0100", "message": "fix: Manage event scheduleAt date [DHIS2-10009] (#6804)"}, {"oid": "699074cbe82db1a8e0a5e72edf2a981f3628b54b", "committedDate": "2020-12-07 10:47:48 +0100", "message": "fix: Tracker Identifiers resolution during Tracker import (#6824)"}, {"oid": "f1ee41f1845d51b9efa6c5f5c666371ee503297a", "committedDate": "2020-12-09 21:22:05 +0100", "message": "fix: tune mappers to reduce queries executed during import (#6845)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "20cccd6ead34b08992c0fbd323da268eb0f85ad4", "committedDate": "2021-01-13 11:33:03 +0100", "message": "fix: Fix data values conversion for event [DHIS2-10173] (#7081)"}, {"oid": "bdfe068f265b74f93f377a7bf7d357b8a9df5658", "committedDate": "2021-01-18 10:11:19 +0100", "message": "feat: Assigning data values action (#7108)"}, {"oid": "a23e0ffd69867dff6f4dd17044d7bde9430b7416", "committedDate": "2021-01-18 12:09:52 +0100", "message": "fix: adds missing event properties (DHIS2-10187) (#7110)"}, {"oid": "6e8f0d6c150b303d780b397f7646ff3383f16250", "committedDate": "2021-01-21 09:32:50 +0100", "message": "feat: new tracked dto's properties referring to a date, now use Instant instead of String [DHIS2-101239] (#7119)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "4a4beb6ff3b7ca77da4a4eea381b5a0d78a8a324", "committedDate": "2021-02-01 18:12:32 +0100", "message": "fix: [DHIS2-10208] client dates are not persisted correctly in tei,enrollment,events (2.36) (#7236)"}, {"oid": "4c9e21a843bbdbd73b0aeaf99e2d0320ac0bb811", "committedDate": "2021-03-02 15:17:00 +0100", "message": "fix: Correct error report when using DELETE ImportStrategy (#7491)"}, {"oid": "5a236b7964bc1e38c927c9a390e6672756e997ce", "committedDate": "2021-04-19 14:49:15 +0200", "message": "feature: Review fields in domain objects and create updatable fields validator [DHIS2-10875] (#7842)"}, {"oid": "db043f2d252ab92e85756413bce7515a315e3caa", "committedDate": "2021-04-20 10:33:49 +0200", "message": "feat: Remove tracked entity field from event [DHIS2-10875] (#7878)"}, {"oid": "c1826a5d13bd4a80a9ff1ed14646dbb8f32b4cfb", "committedDate": "2021-04-28 09:05:12 +0200", "message": "feat: Add createdBy and updatedBy to tracker objects in new tracker importer [hDHIS2-10885] (#7923)"}, {"oid": "a4643bd1fe923092627bdd884e05e5dacc7a5911", "committedDate": "2021-04-30 14:46:25 +0200", "message": "refactor: Refactor rule engine service in the new importer to group events and enrollments in one call (#7925)"}, {"oid": "fe04922e144ac69367a99840d5518edda2d67f38", "committedDate": "2021-06-03 08:17:10 +0200", "message": "fix: Make program field read-only in event payload [DHIS2-11225] (#8086)"}, {"oid": "aff1cb136bdfdf4af8213f8878967be42f5687e9", "committedDate": "2021-06-11 10:58:03 +0200", "message": "fix: Get correct program stage from preheated Program [DHIS2-11225] (#8175)"}, {"oid": "4a51e0d1137428eecdc09fccf2a8a5ae8391543d", "committedDate": "2021-09-21 10:15:39 +0200", "message": "fix: lastUpdatedBy/createdBy info not stored for data values [DHIS2-11765] (#8758)"}, {"oid": "7d60b5fd0dd961eb02f009e53a6219ef259f5697", "committedDate": "2021-10-14 11:02:10 +0200", "message": "perf: Remove call to user service in event converter [DHIS2-11983] (#9047)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "f927539ed2f8b3ee6bc82a103deffd319285707f", "committedDate": "2022-01-31 13:55:56 +0100", "message": "fix: use idScheme in event dataElement checks DHIS2-12282 (#9682)"}, {"oid": "c039b8f75c1d965414de926f04540dfaabdd104c", "committedDate": "2022-02-23 13:08:25 +0100", "message": "chore: Clean up service program rule module [TECH-938] (#9885)"}, {"oid": "d117ff9ce355694569f7c6477141cf35c6412609", "committedDate": "2022-03-04 11:13:40 +0100", "message": "fix: Return complete information for user fields in NTI [DHIS2-12717] (#9936)"}, {"oid": "0303652efe35da369ba1d2a437a4b5797a52c451", "committedDate": "2022-04-01 09:37:58 +0200", "message": "chore: tracker entities only support idScheme UID DHIS2-12563 (#10329)"}, {"oid": "82000d2a019227cc85cb3d43b301b8bf758f5c85", "committedDate": "2022-04-19 14:21:17 +0200", "message": "fix: Event.program is a MetadataIdentifier DHIS2-12563 (#10482)"}, {"oid": "877c44b62acb2a3a35577f2948791826eca1b9c4", "committedDate": "2022-04-20 12:47:43 +0200", "message": "fix: Event.programStage is a MetadataIdentifier DHIS2-12563 (#10509)"}, {"oid": "b1671abae3de25b9f7d137dad69aa44486062f57", "committedDate": "2022-04-22 16:26:32 +0200", "message": "fix: Event.orgUnit is a MetadataIdentifier (#10529)"}, {"oid": "c3ee623f83ffefe3521e74e071cfead3343a3dda", "committedDate": "2022-04-26 12:11:55 +0200", "message": "fix: TrackerPreheat defaults support idSchemes DHIS2-12563 (#10546)"}, {"oid": "7f96b9e2e41e96d83226bcc182e3c88a2269ab18", "committedDate": "2022-05-04 11:04:17 +0200", "message": "fix: Event.attributeOptionCombo is a MetadataIdentifier (#10663)"}, {"oid": "382a593af44ef61dfedc169b98d266bc6411b09f", "committedDate": "2022-05-06 13:37:24 +0200", "message": "chore: Event.attributeCategoryOptions is a MetadataIdentifier DHIS2-12563 (#10724)"}, {"oid": "156961b42f4047971223b4ed9816798a38bf2663", "committedDate": "2022-05-09 09:21:04 +0200", "message": "chore: simplify creation of MetadataIdentifier using IdentifiableObjects and null DHIS2-12563 (#10741)"}, {"oid": "af37dd7b6f0b64b46fb84be9e40d35f5f6593709", "committedDate": "2022-05-19 11:11:00 +0200", "message": "fix: DataValue.dataElement is a MetadataIdentifier DHIS2-12563 (#10752)"}, {"oid": "3260a2b695537c672efb11e521dab8195ca37598", "committedDate": "2022-05-19 14:37:14 +0200", "message": "chore: orgUnitName is unused in tracker domain (#10859)"}, {"oid": "df4eaf29ba29ee71a727a1c072fd4bcb03bb4bc9", "committedDate": "2022-05-19 15:13:36 +0200", "message": "chore: docs, improve APIs DHIS2-12563 (#10847)"}, {"oid": "23bc93bab95c05bccaf9bc414c955bba79a6f8c9", "committedDate": "2023-01-05 13:57:59 +0100", "message": "refactor: Replace manual constructors with @RequiredArgsConstructor (#12684)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg1ODI0MA==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r429858240", "body": "Possibly, but this is also set in the `TrackerController` so user should really never be `null` (unless running under tests)", "bodyText": "Possibly, but this is also set in the TrackerController so user should really never be null (unless running under tests)", "bodyHTML": "<p dir=\"auto\">Possibly, but this is also set in the <code>TrackerController</code> so user should really never be <code>null</code> (unless running under tests)</p>", "author": "mortenoh", "createdAt": "2020-05-25T10:20:56Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/DefaultTrackerPreheatService.java", "diffHunk": "@@ -141,9 +146,13 @@ public TrackerPreheat preheat( TrackerPreheatParams params )\n         Timer timer = new SystemTimer().start();\n \n         TrackerPreheat preheat = new TrackerPreheat();\n+        preheat.setIdentifiers( params.getIdentifiers() );\n         preheat.setUser( params.getUser() );\n         preheat.setDefaults( manager.getDefaults() );\n \n+        // TODO: Morten/Stian could this be done earlier, and rather not allow user to be set to NULL above, ?\n+        //  since this has big security implication it would be nicer to separate out this to\n+        //  a dedicated security controller/place...?", "originalCommit": "a5f6d361402efd03ab461bcffa6bcc50be96c520", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzMzOTc5Mw==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r433339793", "bodyText": "I would very much try to avoid using null as a valid value for users. I think it is better to have a clearly defined test user instead. Using null here makes it hard to reason if it is a null pointer bug or intentional. Since at many places a NULL value gives super user access this is even more dangerous.", "author": "netroms", "createdAt": "2020-06-01T16:14:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg1ODI0MA=="}], "type": "inlineReview", "revised_code": {"commit": "d2feae85e2920e2ecd5cce7d310e926ae797cd2c", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/DefaultTrackerPreheatService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/DefaultTrackerPreheatService.java\nindex f98abc0208..1fa89998a6 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/DefaultTrackerPreheatService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/DefaultTrackerPreheatService.java\n", "chunk": "@@ -150,13 +151,7 @@ public class DefaultTrackerPreheatService\n         preheat.setUser( params.getUser() );\n         preheat.setDefaults( manager.getDefaults() );\n \n-        // TODO: Morten/Stian could this be done earlier, and rather not allow user to be set to NULL above, ?\n-        //  since this has big security implication it would be nicer to separate out this to\n-        //  a dedicated security controller/place...?\n-        if ( preheat.getUser() == null )\n-        {\n-            preheat.setUser( currentUserService.getCurrentUser() );\n-        }\n+        Objects.requireNonNull( preheat.getUser(), \"Preheater is missing the user object.\" );\n \n         Map<Class<?>, Set<String>> identifierMap = TrackerIdentifierCollector.collect( params );\n \n", "next_change": {"commit": "68c9d6c0ee6f2fd2462d63d9f3bef1a317f76ac6", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/DefaultTrackerPreheatService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/DefaultTrackerPreheatService.java\nindex 1fa89998a6..c2cccb477f 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/DefaultTrackerPreheatService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/DefaultTrackerPreheatService.java\n", "chunk": "@@ -150,6 +147,7 @@ public class DefaultTrackerPreheatService\n         preheat.setIdentifiers( params.getIdentifiers() );\n         preheat.setUser( params.getUser() );\n         preheat.setDefaults( manager.getDefaults() );\n+        preheat.setUser( getImportingUser( preheat.getUser() ) );\n \n         Objects.requireNonNull( preheat.getUser(), \"Preheater is missing the user object.\" );\n \n", "next_change": {"commit": "5bd4c4a413adbc1e587b0e1194af3da352084268", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/DefaultTrackerPreheatService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/DefaultTrackerPreheatService.java\nindex c2cccb477f..bbc08c37fd 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/DefaultTrackerPreheatService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/DefaultTrackerPreheatService.java\n", "chunk": "@@ -147,7 +147,8 @@ public class DefaultTrackerPreheatService\n         preheat.setIdentifiers( params.getIdentifiers() );\n         preheat.setUser( params.getUser() );\n         preheat.setDefaults( manager.getDefaults() );\n-        preheat.setUser( getImportingUser( preheat.getUser() ) );\n+        User importingUser = getImportingUser( preheat.getUser() );\n+        preheat.setUser( importingUser );\n \n         Objects.requireNonNull( preheat.getUser(), \"Preheater is missing the user object.\" );\n \n", "next_change": {"commit": "3999d1c8e8d7c2bcd11c7c5d99fec179abd25e2b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/DefaultTrackerPreheatService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/DefaultTrackerPreheatService.java\nindex bbc08c37fd..5f46f63a30 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/DefaultTrackerPreheatService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/DefaultTrackerPreheatService.java\n", "chunk": "@@ -150,7 +151,7 @@ public class DefaultTrackerPreheatService\n         User importingUser = getImportingUser( preheat.getUser() );\n         preheat.setUser( importingUser );\n \n-        Objects.requireNonNull( preheat.getUser(), \"Preheater is missing the user object.\" );\n+        checkNotNull( preheat.getUser(), \"Preheater is missing the user object.\" );\n \n         Map<Class<?>, Set<String>> identifierMap = TrackerIdentifierCollector.collect( params );\n \n", "next_change": {"commit": "898c87ce14bf1faf20e8f8ebf3a5bc12f27437f0", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/DefaultTrackerPreheatService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/DefaultTrackerPreheatService.java\nindex 5f46f63a30..ece0d7702b 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/DefaultTrackerPreheatService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/DefaultTrackerPreheatService.java\n", "chunk": "@@ -157,7 +157,6 @@ public class DefaultTrackerPreheatService\n \n         for ( Class<?> klass : identifierMap.keySet() )\n         {\n-            // TODO: Assume UID for now, will be done according to IdSchemes\n             Set<String> identifiers = identifierMap.get( klass );\n \n             List<List<String>> splitList = Lists.partition( new ArrayList<>( identifiers ), SPLIT_LIST_PARTITION_SIZE );\n", "next_change": null}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/DefaultTrackerPreheatService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/DefaultTrackerPreheatService.java\nindex f98abc0208..ece0d7702b 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/DefaultTrackerPreheatService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/DefaultTrackerPreheatService.java\n", "chunk": "@@ -149,20 +148,15 @@ public class DefaultTrackerPreheatService\n         preheat.setIdentifiers( params.getIdentifiers() );\n         preheat.setUser( params.getUser() );\n         preheat.setDefaults( manager.getDefaults() );\n+        User importingUser = getImportingUser( preheat.getUser() );\n+        preheat.setUser( importingUser );\n \n-        // TODO: Morten/Stian could this be done earlier, and rather not allow user to be set to NULL above, ?\n-        //  since this has big security implication it would be nicer to separate out this to\n-        //  a dedicated security controller/place...?\n-        if ( preheat.getUser() == null )\n-        {\n-            preheat.setUser( currentUserService.getCurrentUser() );\n-        }\n+        checkNotNull( preheat.getUser(), \"Preheater is missing the user object.\" );\n \n         Map<Class<?>, Set<String>> identifierMap = TrackerIdentifierCollector.collect( params );\n \n         for ( Class<?> klass : identifierMap.keySet() )\n         {\n-            // TODO: Assume UID for now, will be done according to IdSchemes\n             Set<String> identifiers = identifierMap.get( klass );\n \n             List<List<String>> splitList = Lists.partition( new ArrayList<>( identifiers ), SPLIT_LIST_PARTITION_SIZE );\n", "next_change": {"commit": "f480b56f3e613f4e46ba4d892b51ca9ee622331d", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/DefaultTrackerPreheatService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/DefaultTrackerPreheatService.java\nindex ece0d7702b..3b6a35efbb 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/DefaultTrackerPreheatService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/DefaultTrackerPreheatService.java\n", "chunk": "@@ -151,171 +90,55 @@ public class DefaultTrackerPreheatService\n         User importingUser = getImportingUser( preheat.getUser() );\n         preheat.setUser( importingUser );\n \n-        checkNotNull( preheat.getUser(), \"Preheater is missing the user object.\" );\n+        checkNotNull( preheat.getUser(), \"TrackerPreheat is missing the user object.\" );\n \n-        Map<Class<?>, Set<String>> identifierMap = TrackerIdentifierCollector.collect( params );\n-\n-        for ( Class<?> klass : identifierMap.keySet() )\n+        for ( String supplier : preheatSuppliers )\n         {\n-            Set<String> identifiers = identifierMap.get( klass );\n-\n-            List<List<String>> splitList = Lists.partition( new ArrayList<>( identifiers ), SPLIT_LIST_PARTITION_SIZE );\n-\n-            if ( klass.isAssignableFrom( TrackedEntity.class ) )\n-            {\n-                for ( List<String> ids : splitList )\n-                {\n-                    List<TrackedEntityInstance> trackedEntityInstances =\n-                        trackedEntityInstanceStore.getByUid( ids, preheat.getUser() );\n-                    preheat.putTrackedEntities( TrackerIdScheme.UID, trackedEntityInstances );\n-                }\n-            }\n-            else if ( klass.isAssignableFrom( Enrollment.class ) )\n-            {\n-                for ( List<String> ids : splitList )\n-                {\n-                    List<ProgramInstance> programInstances = programInstanceStore.getByUid( ids, preheat.getUser() );\n-                    preheat.putEnrollments( TrackerIdScheme.UID, programInstances );\n-                }\n-            }\n-            else if ( klass.isAssignableFrom( Event.class ) )\n-            {\n-                for ( List<String> ids : splitList )\n-                {\n-                    List<ProgramStageInstance> programStageInstances = programStageInstanceStore\n-                        .getByUid( ids, preheat.getUser() );\n-                    preheat.putEvents( TrackerIdScheme.UID, programStageInstances );\n-                }\n-            }\n-            else if ( klass.isAssignableFrom( OrganisationUnit.class ) )\n-            {\n-                TrackerIdentifier identifier = params.getIdentifiers().getOrgUnitIdScheme();\n-                Schema schema = schemaService.getDynamicSchema( OrganisationUnit.class );\n-\n-                queryForIdentifiableObjects( preheat, schema, identifier, splitList );\n-            }\n-            else if ( klass.isAssignableFrom( Program.class ) )\n-            {\n-                Schema schema = schemaService.getDynamicSchema( Program.class );\n-                TrackerIdentifier identifier = params.getIdentifiers().getProgramIdScheme();\n-\n-                queryForIdentifiableObjects( preheat, schema, identifier, splitList );\n-            }\n-            else if ( klass.isAssignableFrom( ProgramStage.class ) )\n+            final String beanName = Introspector.decapitalize( supplier );\n+            try\n             {\n-                Schema schema = schemaService.getDynamicSchema( ProgramStage.class );\n-                TrackerIdentifier identifier = params.getIdentifiers().getProgramStageIdScheme();\n-\n-                queryForIdentifiableObjects( preheat, schema, identifier, splitList );\n-            }\n-            else if ( klass.isAssignableFrom( DataElement.class ) )\n-            {\n-                Schema schema = schemaService.getDynamicSchema( DataElement.class );\n-                TrackerIdentifier identifier = params.getIdentifiers().getDataElementIdScheme();\n-\n-                queryForIdentifiableObjects( preheat, schema, identifier, splitList );\n-            }\n-            else if ( klass.isAssignableFrom( CategoryOptionCombo.class ) )\n-            {\n-                Schema schema = schemaService.getDynamicSchema( CategoryOptionCombo.class );\n-                TrackerIdentifier identifier = params.getIdentifiers().getCategoryOptionComboIdScheme();\n-\n-                queryForIdentifiableObjects( preheat, schema, identifier, splitList );\n-            }\n-            else if ( klass.isAssignableFrom( CategoryOption.class ) )\n-            {\n-                Schema schema = schemaService.getDynamicSchema( CategoryOption.class );\n-                TrackerIdentifier identifier = params.getIdentifiers().getCategoryOption();\n-\n-                queryForIdentifiableObjects( preheat, schema, identifier, splitList );\n+                ctx.getBean( beanName, PreheatSupplier.class ).add( params, preheat );\n             }\n-            else if ( klass.isAssignableFrom( Relationship.class ) )\n+            catch ( BeansException beanException )\n             {\n-                for ( List<String> ids : splitList )\n-                {\n-                    List<org.hisp.dhis.relationship.Relationship> relationships = relationshipStore\n-                        .getByUid( ids, preheat.getUser() );\n-                    preheat.putRelationships( TrackerIdScheme.UID, relationships );\n-                }\n+                processException( \"Unable to find a preheat supplier with name \" + beanName\n+                    + \" in the Spring context. Skipping supplier.\", beanException, supplier );\n             }\n-            else\n+            catch ( Exception e )\n             {\n-                Schema schema = schemaService.getDynamicSchema( klass );\n-\n-                queryForIdentifiableObjects( preheat, schema, TrackerIdentifier.UID, splitList );\n+                processException( \"An error occurred while executing a preheat supplier with name \"\n+                    + supplier, e, supplier );\n             }\n         }\n \n-        // since TrackedEntityTypes are not really required by incoming payload, and they are small in size/count, we preload them all here\n-        preheat.put( TrackerIdentifier.UID, manager.getAll( TrackedEntityType.class ) );\n-\n-        // since RelationshipTypes are not really required by incoming payload, and they are small in size/count, we preload them all here\n-        preheat.put( TrackerIdentifier.UID, manager.getAll( RelationshipType.class ) );\n-\n-        periodStore.getAll().forEach( period -> preheat.getPeriodMap().put( period.getName(), period ) );\n-        periodStore.getAllPeriodTypes()\n-            .forEach( periodType -> preheat.getPeriodTypeMap().put( periodType.getName(), periodType ) );\n-\n-        List<ProgramInstance> programInstances = programInstanceStore.getByType( ProgramType.WITHOUT_REGISTRATION );\n-        programInstances.forEach( pi -> preheat.putEnrollment( TrackerIdScheme.UID, pi.getProgram().getUid(), pi ) );\n-\n-        preheatHooks.forEach( hook -> hook.preheat( params, preheat ) );\n-\n         log.info( \"(\" + preheat.getUsername() + \") Import:TrackerPreheat took \" + timer.toString() );\n \n         return preheat;\n     }\n \n-    @Override\n-    public void validate( TrackerPreheatParams params )\n-    {\n-        //TODO: Implement validation\n-    }\n-\n-    private Restriction generateRestrictionFromIdentifiers( TrackerIdScheme idScheme, List<String> ids )\n+    private void processException( String message, Exception e, String supplier )\n     {\n-        if ( TrackerIdScheme.CODE.equals( idScheme ) )\n+        if ( FAIL_FAST_ON_PREHEAT_ERROR )\n         {\n-            return Restrictions.in( \"code\", ids );\n+            throw new PreheatException( \"An error occurred during the preheat process. Preheater with name \"\n+                + Introspector.decapitalize( supplier ) + \"failed\", e );\n         }\n         else\n         {\n-            return Restrictions.in( \"id\", ids );\n+            log.error( message, e );\n         }\n     }\n \n-    @SuppressWarnings( \"unchecked\" )\n-    private void queryForIdentifiableObjects( TrackerPreheat preheat, Schema schema, TrackerIdentifier identifier,\n-        List<List<String>> splitList )\n+    @Override\n+    public void validate( TrackerPreheatParams params )\n     {\n-        TrackerIdScheme idScheme = identifier.getIdScheme();\n-        for ( List<String> ids : splitList )\n-        {\n-            List<? extends IdentifiableObject> objects;\n-\n-            if ( TrackerIdScheme.ATTRIBUTE.equals( idScheme ) )\n-            {\n-                Attribute attribute = new Attribute();\n-                attribute.setUid( identifier.getValue() );\n-                objects = manager.getAllByAttributeAndValues(\n-                    (Class<? extends IdentifiableObject>) schema.getKlass(), attribute, ids );\n-            }\n-            else\n-            {\n-                Query query = Query.from( schema );\n-                query.setUser( preheat.getUser() );\n-                query.add( generateRestrictionFromIdentifiers( idScheme, ids ) );\n-                query.setDefaults( Defaults.INCLUDE );\n-                objects = queryService.query( query );\n-            }\n-\n-            preheat.put( identifier, objects );\n-        }\n+        // TODO: Implement validation\n     }\n \n     private User getImportingUser( User user )\n     {\n-        // \u0131f user already set, reload the user to make sure its loaded in the current tx\n+        // \u0131f user already set, reload the user to make sure its loaded in the current\n+        // tx\n         if ( user != null )\n         {\n             return manager.get( User.class, user.getUid() );\n", "next_change": {"commit": "3e799d196b8f73ad216ea100a07ddd5f7dfc53e0", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/DefaultTrackerPreheatService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/DefaultTrackerPreheatService.java\nindex 3b6a35efbb..2602e3ef22 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/DefaultTrackerPreheatService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/DefaultTrackerPreheatService.java\n", "chunk": "@@ -130,23 +127,11 @@ public class DefaultTrackerPreheatService implements TrackerPreheatService, Appl\n     }\n \n     @Override\n-    public void validate( TrackerPreheatParams params )\n+    public void validate( TrackerImportParams params )\n     {\n         // TODO: Implement validation\n     }\n \n-    private User getImportingUser( User user )\n-    {\n-        // \u0131f user already set, reload the user to make sure its loaded in the current\n-        // tx\n-        if ( user != null )\n-        {\n-            return manager.get( User.class, user.getUid() );\n-        }\n-\n-        return currentUserService.getCurrentUser();\n-    }\n-\n     private ApplicationContext ctx;\n \n     @Override\n", "next_change": {"commit": "c25b817a180f24b3de6b26d5a089563aa336aa8c", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/DefaultTrackerPreheatService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/DefaultTrackerPreheatService.java\nindex 2602e3ef22..b3b9963e7f 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/DefaultTrackerPreheatService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/DefaultTrackerPreheatService.java\n", "chunk": "@@ -131,13 +126,4 @@ public class DefaultTrackerPreheatService implements TrackerPreheatService, Appl\n     {\n         // TODO: Implement validation\n     }\n-\n-    private ApplicationContext ctx;\n-\n-    @Override\n-    public void setApplicationContext( ApplicationContext applicationContext )\n-        throws BeansException\n-    {\n-        this.ctx = applicationContext;\n-    }\n }\n", "next_change": {"commit": "c0e9b28f4609a84d1287d93bc65f81321e00d78b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/DefaultTrackerPreheatService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/DefaultTrackerPreheatService.java\nindex b3b9963e7f..8ef35c9513 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/DefaultTrackerPreheatService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/DefaultTrackerPreheatService.java\n", "chunk": "@@ -120,10 +120,4 @@ public class DefaultTrackerPreheatService implements TrackerPreheatService, Appl\n             log.warn( message, e );\n         }\n     }\n-\n-    @Override\n-    public void validate( TrackerImportParams params )\n-    {\n-        // TODO: Implement validation\n-    }\n }\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "message": "Merge commit", "committedDate": null}, {"oid": "cb2ee65c0210c0d4b2bd8851789da8d4adfaf04d", "committedDate": "2020-09-07 10:28:21 +0200", "message": "fix: [DHIS2-9287] Fix the stats in the import summary (#6062)"}, {"oid": "0d35843121f0ad3004fad015f1520c5b06a5c337", "committedDate": "2020-09-15 09:24:33 +0200", "message": "Merge 2.35 into master (#6149)"}, {"oid": "e1260b5e8fceb13c2883754236a34cdd652e1c1c", "committedDate": "2020-10-20 14:00:34 +0200", "message": "refactor: Load in the preheat all the data needed for uniqueness attr\u2026 (#6397)"}, {"oid": "ae4d365663ffddc9a34d1cdc0f629fd7b6386e90", "committedDate": "2020-11-03 10:25:55 +0100", "message": "feat: improve note validation during tracker import [TECH-457]"}, {"oid": "882c1d8f4628950456d09174bfd39deee013588a", "committedDate": "2020-11-06 10:43:09 +0100", "message": "fix: DHIS2-9894 switching Event.assignedUser from User to String (#6574)"}, {"oid": "f480b56f3e613f4e46ba4d892b51ca9ee622331d", "committedDate": "2020-11-11 11:47:49 +0100", "message": "refactor: Tracker preheat code refactoring (#6560)"}, {"oid": "d095f2d4cf9aaac1e9aa973d4da6aa2f96104cc8", "committedDate": "2020-11-11 13:49:13 +0100", "message": "fix: allow validation to reference entities in the payload (#6617)"}, {"oid": "2eee26e5dc59237462ac19584da4189a03bb5fbd", "committedDate": "2020-11-11 15:17:32 +0100", "message": "chore: fixed conflict mistake (#6631)"}, {"oid": "3e799d196b8f73ad216ea100a07ddd5f7dfc53e0", "committedDate": "2020-11-30 16:37:14 +0100", "message": "fix: remove long running transaction during Tracker Import (#6782)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "15ca8426c10f470381f68bcb39b0be02c4fbfd09", "committedDate": "2021-02-10 10:35:28 +0100", "message": "fix: [DHIS2-10459] Fix reference structure in Preheat used in the validation stage (#7326)"}, {"oid": "40fda8e0c1025bfdc425c0f0da547443831c4c41", "committedDate": "2021-02-10 12:01:12 +0100", "message": "fix: [DHIS2-10430] New validation hook to check mandatory fields (#7305)"}, {"oid": "d3babd17c47704fd61fb23a664d8e88264bbcff0", "committedDate": "2021-02-15 16:32:19 +0100", "message": "fix: Dhis2 10432 (#7347)"}, {"oid": "71ba173f2a077fb4d42344e18712f7ba433eb5fb", "committedDate": "2021-02-25 09:42:49 +0100", "message": "fix: Remove useless supplier and validator (#7451)"}, {"oid": "c25b817a180f24b3de6b26d5a089563aa336aa8c", "committedDate": "2021-03-05 10:44:25 +0100", "message": "feat: Validation for values with option sets [DHIS2-10452] (#7512)"}, {"oid": "c0e9b28f4609a84d1287d93bc65f81321e00d78b", "committedDate": "2021-03-30 13:22:16 +0200", "message": "refactor: Removing uid field from tracker entities [TECH-579] (#7790)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "c039b8f75c1d965414de926f04540dfaabdd104c", "committedDate": "2022-02-23 13:08:25 +0100", "message": "chore: Clean up service program rule module [TECH-938] (#9885)"}, {"oid": "b625410a6aeed719ad4c6307e18cb9569fe8a4d0", "committedDate": "2022-04-04 11:36:08 +0200", "message": "chore: prepare addition of TrackerIdentifier DHIS2-12563 (#10347)"}, {"oid": "c3ee623f83ffefe3521e74e071cfead3343a3dda", "committedDate": "2022-04-26 12:11:55 +0200", "message": "fix: TrackerPreheat defaults support idSchemes DHIS2-12563 (#10546)"}, {"oid": "2886ebea404331a2c3f78909bcb92cca1ecc7913", "committedDate": "2022-10-12 09:39:22 +0200", "message": "chore: only use @Nonnull and ban similar annotations (#12071)"}, {"oid": "5671ef5eb9ddfea7e2560e2db5c8d92ecbd54bc5", "committedDate": "2022-12-13 15:53:59 +0100", "message": "chore: Remove reference tree from Preheat [TECH-14298] (#12523)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg1OTMyMw==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r429859323", "body": "All the category* stuff has only had stable identifiers for 3-4 releases, so generally we don't want to assume the UID for defaults can be trusted, and we would rather just remove them (if default), and let the system handle it", "bodyText": "All the category* stuff has only had stable identifiers for 3-4 releases, so generally we don't want to assume the UID for defaults can be trusted, and we would rather just remove them (if default), and let the system handle it", "bodyHTML": "<p dir=\"auto\">All the category* stuff has only had stable identifiers for 3-4 releases, so generally we don't want to assume the UID for defaults can be trusted, and we would rather just remove them (if default), and let the system handle it</p>", "author": "mortenoh", "createdAt": "2020-05-25T10:23:38Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/TrackerPreheat.java", "diffHunk": "@@ -306,7 +316,11 @@ public boolean isEmpty( TrackerIdScheme identifier, Class<? extends Identifiable\n     {\n         for ( T object : objects )\n         {\n-            if ( isDefault( object ) ) continue;\n+            boolean isDefault = isDefault( object );\n+//            if ( isDefault )\n+//                continue;\n+            //TODO: Investigate why we need to disable this, see Category combo tests, fails if ignore put idDefault", "originalCommit": "a5f6d361402efd03ab461bcffa6bcc50be96c520", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3b7b1ca2a01816b677631bc99928a71091860d75", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/TrackerPreheat.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/TrackerPreheat.java\nindex 3bf32075e2..d3421b698b 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/TrackerPreheat.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/TrackerPreheat.java\n", "chunk": "@@ -317,9 +330,13 @@ public class TrackerPreheat\n         for ( T object : objects )\n         {\n             boolean isDefault = isDefault( object );\n-//            if ( isDefault )\n-//                continue;\n-            //TODO: Investigate why we need to disable this, see Category combo tests, fails if ignore put idDefault\n+            if ( isDefault )\n+            {\n+                //TODO: Investigate why we need to disable this, see Category combo tests, fails if ignore put idDefault\n+                // This has to do with the fact of \"unstable UID\" on default metadata objects like CategoryComo etc.\n+                // We therefor need to handle default objects separately and refer to them with name \"default\"\n+                continue;\n+            }\n \n             put( identifier, object );\n         }\n", "next_change": {"commit": "898c87ce14bf1faf20e8f8ebf3a5bc12f27437f0", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/TrackerPreheat.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/TrackerPreheat.java\nindex d3421b698b..4face198fe 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/TrackerPreheat.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/TrackerPreheat.java\n", "chunk": "@@ -332,9 +332,6 @@ public class TrackerPreheat\n             boolean isDefault = isDefault( object );\n             if ( isDefault )\n             {\n-                //TODO: Investigate why we need to disable this, see Category combo tests, fails if ignore put idDefault\n-                // This has to do with the fact of \"unstable UID\" on default metadata objects like CategoryComo etc.\n-                // We therefor need to handle default objects separately and refer to them with name \"default\"\n                 continue;\n             }\n \n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/TrackerPreheat.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/TrackerPreheat.java\nindex 3bf32075e2..4face198fe 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/TrackerPreheat.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/TrackerPreheat.java\n", "chunk": "@@ -317,9 +330,10 @@ public class TrackerPreheat\n         for ( T object : objects )\n         {\n             boolean isDefault = isDefault( object );\n-//            if ( isDefault )\n-//                continue;\n-            //TODO: Investigate why we need to disable this, see Category combo tests, fails if ignore put idDefault\n+            if ( isDefault )\n+            {\n+                continue;\n+            }\n \n             put( identifier, object );\n         }\n", "next_change": {"commit": "1c1fdb5a8364805f984f96c316018d97653c7795", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/TrackerPreheat.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/TrackerPreheat.java\nindex 4face198fe..97c1745276 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/TrackerPreheat.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/TrackerPreheat.java\n", "chunk": "@@ -329,12 +362,6 @@ public class TrackerPreheat\n     {\n         for ( T object : objects )\n         {\n-            boolean isDefault = isDefault( object );\n-            if ( isDefault )\n-            {\n-                continue;\n-            }\n-\n             put( identifier, object );\n         }\n \n", "next_change": {"commit": "699074cbe82db1a8e0a5e72edf2a981f3628b54b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/TrackerPreheat.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/TrackerPreheat.java\nindex 97c1745276..165a89d465 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/TrackerPreheat.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/TrackerPreheat.java\n", "chunk": "@@ -368,79 +309,6 @@ public class TrackerPreheat\n         return this;\n     }\n \n-    public TrackerPreheat remove( TrackerIdScheme identifier, Class<? extends IdentifiableObject> klass, String key )\n-    {\n-        if ( containsKey( identifier, klass, key ) )\n-        {\n-            map.get( identifier ).get( klass ).remove( key );\n-        }\n-\n-        return this;\n-    }\n-\n-    @SuppressWarnings( \"unchecked\" )\n-    public TrackerPreheat remove( TrackerIdentifier identifier, IdentifiableObject object )\n-    {\n-        TrackerIdScheme idScheme = identifier.getIdScheme();\n-        Class<? extends IdentifiableObject> klass = (Class<? extends IdentifiableObject>) getRealClass(\n-            object.getClass() );\n-\n-        String key = identifier.getIdentifier( object );\n-\n-        if ( containsKey( idScheme, klass, key ) )\n-        {\n-            map.get( idScheme ).get( klass ).remove( key );\n-        }\n-\n-        return this;\n-    }\n-\n-    public TrackerPreheat remove( TrackerIdScheme identifier, Class<? extends IdentifiableObject> klass,\n-        Collection<String> keys )\n-    {\n-        for ( String key : keys )\n-        {\n-            remove( identifier, klass, key );\n-        }\n-\n-        return this;\n-    }\n-\n-    public Map<TrackerIdScheme, Map<Class<? extends IdentifiableObject>, Map<String, IdentifiableObject>>> getMap()\n-    {\n-        return map;\n-    }\n-\n-    public Map<Class<? extends IdentifiableObject>, IdentifiableObject> getDefaults()\n-    {\n-        return defaults;\n-    }\n-\n-    public void setDefaults( Map<Class<? extends IdentifiableObject>, IdentifiableObject> defaults )\n-    {\n-        this.defaults = defaults;\n-    }\n-\n-    public Map<String, Period> getPeriodMap()\n-    {\n-        return periodMap;\n-    }\n-\n-    public Map<String, PeriodType> getPeriodTypeMap()\n-    {\n-        return periodTypeMap;\n-    }\n-\n-    public Map<TrackerIdScheme, Map<String, TrackedEntityInstance>> getTrackedEntities()\n-    {\n-        return trackedEntities;\n-    }\n-\n-    public void setTrackedEntities( Map<TrackerIdScheme, Map<String, TrackedEntityInstance>> trackedEntities )\n-    {\n-        this.trackedEntities = trackedEntities;\n-    }\n-\n     public TrackedEntityInstance getTrackedEntity( TrackerIdScheme identifier, String trackedEntity )\n     {\n         if ( !trackedEntities.containsKey( identifier ) )\n", "next_change": {"commit": "0303652efe35da369ba1d2a437a4b5797a52c451", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/TrackerPreheat.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/TrackerPreheat.java\nindex 165a89d465..1f953aacf0 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/TrackerPreheat.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/TrackerPreheat.java\n", "chunk": "@@ -309,20 +462,14 @@ public class TrackerPreheat\n         return this;\n     }\n \n-    public TrackedEntityInstance getTrackedEntity( TrackerIdScheme identifier, String trackedEntity )\n+    public TrackedEntityInstance getTrackedEntity( String uid )\n     {\n-        if ( !trackedEntities.containsKey( identifier ) )\n-        {\n-            return null;\n-        }\n-\n-        return trackedEntities.get( identifier ).get( trackedEntity );\n+        return trackedEntities.get( uid );\n     }\n \n-    public void putTrackedEntities( TrackerIdScheme identifier, List<TrackedEntityInstance> trackedEntityInstances,\n-        List<String> allEntities )\n+    public void putTrackedEntities( List<TrackedEntityInstance> trackedEntityInstances, List<String> allEntities )\n     {\n-        putTrackedEntities( identifier, trackedEntityInstances );\n+        putTrackedEntities( trackedEntityInstances );\n \n         List<String> uidOnDB = trackedEntityInstances.stream()\n             .map( BaseIdentifiableObject::getUid )\n", "next_change": {"commit": "5671ef5eb9ddfea7e2560e2db5c8d92ecbd54bc5", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/TrackerPreheat.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/TrackerPreheat.java\nindex 1f953aacf0..7c7d6b45bc 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/TrackerPreheat.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/TrackerPreheat.java\n", "chunk": "@@ -439,47 +475,53 @@ public class TrackerPreheat\n \n             Map<String, IdentifiableObject> identifierMap = map.get( User.class );\n \n-            if ( !StringUtils.isEmpty( identifier.getIdentifier( userObject ) ) &&\n-                !identifierMap.containsKey( identifier.getIdentifier( userObject ) ) )\n+            if ( !StringUtils.isEmpty( idSchemeParam.getIdentifier( userObject ) ) &&\n+                !identifierMap.containsKey( idSchemeParam.getIdentifier( userObject ) ) )\n             {\n-                identifierMap.put( identifier.getIdentifier( userObject ), userObject );\n+                identifierMap.put( idSchemeParam.getIdentifier( userObject ), userObject );\n             }\n         }\n \n-        Optional.ofNullable( identifier.getIdentifier( object ) )\n+        Optional.ofNullable( idSchemeParam.getIdentifier( object ) )\n             .ifPresent( k -> map.get( klass ).put( k, object ) );\n \n         return this;\n     }\n \n-    public <T extends IdentifiableObject> TrackerPreheat put( TrackerIdentifier identifier, Collection<T> objects )\n+    public <T extends IdentifiableObject> TrackerPreheat put( TrackerIdSchemeParam idSchemeParam,\n+        Collection<T> objects )\n     {\n         for ( T object : objects )\n         {\n-            put( identifier, object );\n+            put( idSchemeParam, object );\n         }\n \n         return this;\n     }\n \n-    public TrackedEntityInstance getTrackedEntity( String uid )\n+    public TrackerPreheat put( DataElement dataElement )\n     {\n-        return trackedEntities.get( uid );\n+        return this.put( idSchemes.getDataElementIdScheme(), dataElement );\n+    }\n+\n+    public TrackerPreheat put( Program program )\n+    {\n+        return this.put( idSchemes.getProgramIdScheme(), program );\n     }\n \n-    public void putTrackedEntities( List<TrackedEntityInstance> trackedEntityInstances, List<String> allEntities )\n+    public TrackerPreheat put( ProgramStage programStage )\n     {\n-        putTrackedEntities( trackedEntityInstances );\n+        return this.put( idSchemes.getProgramStageIdScheme(), programStage );\n+    }\n \n-        List<String> uidOnDB = trackedEntityInstances.stream()\n-            .map( BaseIdentifiableObject::getUid )\n-            .collect( Collectors.toList() );\n+    public TrackerPreheat put( CategoryOptionCombo categoryOptionCombo )\n+    {\n+        return this.put( idSchemes.getCategoryOptionComboIdScheme(), categoryOptionCombo );\n+    }\n \n-        allEntities\n-            .stream()\n-            .filter( t -> !uidOnDB.contains( t ) )\n-            .map( t -> new ReferenceTrackerEntity( t, null ) )\n-            .forEach( u -> this.addReference( TrackerType.TRACKED_ENTITY, u ) );\n+    public TrackedEntityInstance getTrackedEntity( String uid )\n+    {\n+        return trackedEntities.get( uid );\n     }\n \n     public void putTrackedEntities( List<TrackedEntityInstance> trackedEntityInstances )\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "message": "Merge commit", "committedDate": null}, {"oid": "0a2a7f9418c217602f78eb701e251294d4919912", "committedDate": "2020-07-14 09:02:09 +0200", "message": "feat: ProgramInstance pre-heater"}, {"oid": "daa5a970e0c93301ca4cbc676731dcbb1e846fa9", "committedDate": "2020-07-14 14:23:22 +0200", "message": "chore: renamed method"}, {"oid": "ba9b9d076f0497f9f456794c391f28072c0c07fd", "committedDate": "2020-07-15 11:08:57 +0200", "message": "chore: fix Javadoc"}, {"oid": "2ed799f33ca26b918ed60473a3f097714f00492e", "committedDate": "2020-08-04 10:30:01 +0200", "message": "chore: Clean up code (#5877)"}, {"oid": "4c92c6dcc7bae69cef6889b95f7882ac8364ab80", "committedDate": "2020-08-04 15:04:46 +0200", "message": "Merge pull request #5848 from dhis2/DHIS2-8879-TECH402"}, {"oid": "0d35843121f0ad3004fad015f1520c5b06a5c337", "committedDate": "2020-09-15 09:24:33 +0200", "message": "Merge 2.35 into master (#6149)"}, {"oid": "e1260b5e8fceb13c2883754236a34cdd652e1c1c", "committedDate": "2020-10-20 14:00:34 +0200", "message": "refactor: Load in the preheat all the data needed for uniqueness attr\u2026 (#6397)"}, {"oid": "ae4d365663ffddc9a34d1cdc0f629fd7b6386e90", "committedDate": "2020-11-03 10:25:55 +0100", "message": "feat: improve note validation during tracker import [TECH-457]"}, {"oid": "d095f2d4cf9aaac1e9aa973d4da6aa2f96104cc8", "committedDate": "2020-11-11 13:49:13 +0100", "message": "fix: allow validation to reference entities in the payload (#6617)"}, {"oid": "abf9ed3867b69117bdd43d6feddf0ce194aa3f73", "committedDate": "2020-11-13 07:37:57 +0100", "message": "feat: Username and OrgUnit valueType preheat suppliers [TECH-452] (#6632)"}, {"oid": "1c1fdb5a8364805f984f96c316018d97653c7795", "committedDate": "2020-11-17 14:49:35 +0100", "message": "fix: Add into Preheat also default values for CategoryOption (#6702)"}, {"oid": "f1aea92d544cf8cd82eb788e4029bff612b99f95", "committedDate": "2020-11-18 09:44:58 +0100", "message": "fix: [DHIS2-9894] Assign enrollment to event when program is  without\u2026 (#6705)"}, {"oid": "3e799d196b8f73ad216ea100a07ddd5f7dfc53e0", "committedDate": "2020-11-30 16:37:14 +0100", "message": "fix: remove long running transaction during Tracker Import (#6782)"}, {"oid": "fd978e815ac1e18c2c0986dac825a5d17dcf02cc", "committedDate": "2020-12-04 09:51:00 +0100", "message": "fix: Check if there are more than one event in not repeatable Program Stages in the payload [DHIS2-10021] (#6817)"}, {"oid": "699074cbe82db1a8e0a5e72edf2a981f3628b54b", "committedDate": "2020-12-07 10:47:48 +0100", "message": "fix: Tracker Identifiers resolution during Tracker import (#6824)"}, {"oid": "2ab8efe33562a2a83071c34823b4e54462d8672d", "committedDate": "2020-12-08 13:35:03 +0100", "message": "fix: implement NAME Tracker Identifier scheme (#6848)"}, {"oid": "5e4669b4c89c809989ea600900735dd71baa86e2", "committedDate": "2020-12-23 14:00:18 +0700", "message": "feat: Upgrade Hibernate  (#6939)"}, {"oid": "cececb7511986f26a3af5bf3d2f4bccb3b2bbda9", "committedDate": "2021-01-04 09:03:14 +0100", "message": "refactor: simplify preheat fetching for reference objects (#7003)"}, {"oid": "16ae2da89c2d883763e33d9d0833f9b033d711c0", "committedDate": "2021-01-05 11:55:44 +0100", "message": "fix: Fix lazy exception for default category combo (#7014)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "055574bea49c3a40c5cfff3cb86694fc4bd12c45", "committedDate": "2021-01-12 15:26:26 +0100", "message": "perf: replace expensive \"Program has OrgUnit\" call with faster SQL (#6930)"}, {"oid": "6a07a582ef5237800f6a2c0969de02d79e7c3f95", "committedDate": "2021-01-19 14:49:22 +0100", "message": "fix: Upgrade lombok-maven-plugin to a version which actually exists (#7127)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "15ca8426c10f470381f68bcb39b0be02c4fbfd09", "committedDate": "2021-02-10 10:35:28 +0100", "message": "fix: [DHIS2-10459] Fix reference structure in Preheat used in the validation stage (#7326)"}, {"oid": "f731091fc392786dd6948e79de0614f4061d76e1", "committedDate": "2021-02-15 09:46:23 +0100", "message": "refactor: changed the way relationship are identified inside preheat [DHIS2-10390] (#7340)"}, {"oid": "39a200eaa53e6ba6a09ff028cecbd9d2f9b4fb0f", "committedDate": "2021-05-04 08:41:15 +0200", "message": "[TECH-450] - DB access in EnrollmentInExistingValidationHook (#7941)"}, {"oid": "7b96fb3ee32dc67e5686ce315d2a041825a74630", "committedDate": "2021-06-21 10:46:39 +0200", "message": "refactor: Refactor some validators and improved test coverage [TECH-589] (#8234)"}, {"oid": "314988e32cd6b86d7010c4a46e17fd3c3d1b9cc3", "committedDate": "2021-08-31 22:03:14 +0200", "message": "fix: ownership validation and preheating in new tracker importer [DHIS2-11223] (#8158)"}, {"oid": "ef578d6b93d10ebc9accce47f96c955a0ba14140", "committedDate": "2021-10-07 07:14:04 +0200", "message": "fix: Add tracked entity attribute value history(#8840)"}, {"oid": "7d60b5fd0dd961eb02f009e53a6219ef259f5697", "committedDate": "2021-10-14 11:02:10 +0200", "message": "perf: Remove call to user service in event converter [DHIS2-11983] (#9047)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "5ff1a79c886b646c6e0289c6d14621c4d888b07c", "committedDate": "2022-02-15 14:45:30 +0100", "message": "fix: attributeOptionCombo is not required in NTI DHIS2-12460 (#9747)"}, {"oid": "0de12c05dd392294cec72617f370d4911b66c8f5", "committedDate": "2022-02-18 10:17:06 +0100", "message": "fix: remove tracker id scheme AUTO DHIS2-12534 (#9808)"}, {"oid": "8ccf9a288a67e5ee5349024fd3d281372c64c956", "committedDate": "2022-02-22 13:25:35 +0800", "message": "feat: Merge User/UserCredentials into one DB table (#9754)"}, {"oid": "c039b8f75c1d965414de926f04540dfaabdd104c", "committedDate": "2022-02-23 13:08:25 +0100", "message": "chore: Clean up service program rule module [TECH-938] (#9885)"}, {"oid": "d117ff9ce355694569f7c6477141cf35c6412609", "committedDate": "2022-03-04 11:13:40 +0100", "message": "fix: Return complete information for user fields in NTI [DHIS2-12717] (#9936)"}, {"oid": "ef0cbd365e47f1f88befb80d9650cce75280bd35", "committedDate": "2022-03-08 15:12:00 +0100", "message": "chore: move DB access and mutation to preheat and preprocessor DHIS2-12623 (#9904)"}, {"oid": "9ff8dfdddfea059fd53181a37ba99a2c88c5b3cc", "committedDate": "2022-03-12 21:02:40 +0100", "message": "chore: this parameter is a set of category options (#10026)"}, {"oid": "e65e503e8f993ddb3a0953ec867f4686c1157a88", "committedDate": "2022-03-31 11:15:26 +0200", "message": "chore: prevent mutation of TrackerPreheat.map DHIS2-12563 (#10324)"}, {"oid": "0303652efe35da369ba1d2a437a4b5797a52c451", "committedDate": "2022-04-01 09:37:58 +0200", "message": "chore: tracker entities only support idScheme UID DHIS2-12563 (#10329)"}, {"oid": "b625410a6aeed719ad4c6307e18cb9569fe8a4d0", "committedDate": "2022-04-04 11:36:08 +0200", "message": "chore: prepare addition of TrackerIdentifier DHIS2-12563 (#10347)"}, {"oid": "5f63b52ac0a4f426145ae43affa58295f804812a", "committedDate": "2022-04-14 13:41:33 +0200", "message": "chore: split domain and view models DHIS2-12563 (#10379)"}, {"oid": "e3b903502802970e302b95dac131f40b8315a583", "committedDate": "2022-04-20 09:52:35 +0200", "message": "chore: TrackerPreheat knows the idSchemes (#10508)"}, {"oid": "877c44b62acb2a3a35577f2948791826eca1b9c4", "committedDate": "2022-04-20 12:47:43 +0200", "message": "fix: Event.programStage is a MetadataIdentifier DHIS2-12563 (#10509)"}, {"oid": "b1671abae3de25b9f7d137dad69aa44486062f57", "committedDate": "2022-04-22 16:26:32 +0200", "message": "fix: Event.orgUnit is a MetadataIdentifier (#10529)"}, {"oid": "c3ee623f83ffefe3521e74e071cfead3343a3dda", "committedDate": "2022-04-26 12:11:55 +0200", "message": "fix: TrackerPreheat defaults support idSchemes DHIS2-12563 (#10546)"}, {"oid": "9b2608b1ac695b4a62bca379a1807eae40520918", "committedDate": "2022-04-26 13:27:56 +0200", "message": "fix: Fix error when deleting relationships [DHIS2-13146] (#10595)"}, {"oid": "7f96b9e2e41e96d83226bcc182e3c88a2269ab18", "committedDate": "2022-05-04 11:04:17 +0200", "message": "fix: Event.attributeOptionCombo is a MetadataIdentifier (#10663)"}, {"oid": "382a593af44ef61dfedc169b98d266bc6411b09f", "committedDate": "2022-05-06 13:37:24 +0200", "message": "chore: Event.attributeCategoryOptions is a MetadataIdentifier DHIS2-12563 (#10724)"}, {"oid": "52fefdd8b43d479f29d4337b32b57f767d7996de", "committedDate": "2022-05-09 14:16:08 +0200", "message": "chore: TrackedEntity.trackedEntityType is a MetadataIdentifier DHIS2-12563 (#10744)"}, {"oid": "d76299848da281461da799f3fb3ca8ac3c63795a", "committedDate": "2022-05-09 13:06:14 +0000", "message": "feat: Make relationship soft deletable [DHIS2-11320] (#10708)"}, {"oid": "fb7a485c6dc99b360359cb262a00c7c9b703fcdc", "committedDate": "2022-05-16 11:12:11 +0200", "message": "refactor: RelationshipKey is the only responsible to create keys [DHIS2-11320] (#10780)"}, {"oid": "75c6c5d054b53569dda7e85f82afac6f6cd6b4a4", "committedDate": "2022-05-16 12:33:36 +0200", "message": "fix: Relationship.relationshipType is a MetadataIdentifier (#10746)"}, {"oid": "9ff8d0c831d8448a696a37138139a0ae5b975c86", "committedDate": "2022-05-17 13:32:06 +0200", "message": "fix: Attribute.attribute is a MetadataIdentifier DHIS2-12563 (#10782)"}, {"oid": "af37dd7b6f0b64b46fb84be9e40d35f5f6593709", "committedDate": "2022-05-19 11:11:00 +0200", "message": "fix: DataValue.dataElement is a MetadataIdentifier DHIS2-12563 (#10752)"}, {"oid": "2f607f53c7c920bab48832e9effb2de8696652a3", "committedDate": "2022-12-12 14:56:12 +0000", "message": "fix: invalidation of tracker tree DHIS2-14213 (#12495)"}, {"oid": "5671ef5eb9ddfea7e2560e2db5c8d92ecbd54bc5", "committedDate": "2022-12-13 15:53:59 +0100", "message": "chore: Remove reference tree from Preheat [TECH-14298] (#12523)"}, {"oid": "e7c0587f707e9529af60b6250191451fdd71d529", "committedDate": "2023-03-02 10:39:17 +0100", "message": "fix: Remove @Deprecation annotation to reduce IDE warnings (#13195)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg2OTk1Nw==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r429869957", "body": "We need to make sure we want this... `value == null` can also mean delete this value", "bodyText": "We need to make sure we want this... value == null can also mean delete this value", "bodyHTML": "<p dir=\"auto\">We need to make sure we want this... <code>value == null</code> can also mean delete this value</p>", "author": "mortenoh", "createdAt": "2020-05-25T10:50:27Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentAttributeValidationHook.java", "diffHunk": "@@ -0,0 +1,196 @@\n+package org.hisp.dhis.tracker.validation.hooks;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import com.google.common.collect.Maps;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.program.ProgramTrackedEntityAttribute;\n+import org.hisp.dhis.security.Authorities;\n+import org.hisp.dhis.trackedentity.TrackedEntityAttribute;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+import org.hisp.dhis.trackedentityattributevalue.TrackedEntityAttributeValue;\n+import org.hisp.dhis.tracker.TrackerImportStrategy;\n+import org.hisp.dhis.tracker.domain.Attribute;\n+import org.hisp.dhis.tracker.domain.Enrollment;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n+import org.hisp.dhis.tracker.validation.TrackerImportValidationContext;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n+import static org.hisp.dhis.tracker.validation.hooks.Constants.ATTRIBUTE_VALUE_MAP_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.Constants.TRACKED_ENTITY_INSTANCE_CANT_BE_NULL;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+@Component\n+public class EnrollmentAttributeValidationHook\n+    extends AbstractTrackerDtoValidationHook\n+{\n+    @Override\n+    public int getOrder()\n+    {\n+        return 105;\n+    }\n+\n+    public EnrollmentAttributeValidationHook()\n+    {\n+        super( Enrollment.class, TrackerImportStrategy.CREATE_AND_UPDATE );\n+    }\n+\n+    @Override\n+    public void validateEnrollment( ValidationErrorReporter reporter, Enrollment enrollment )\n+    {\n+        TrackerImportValidationContext context = reporter.getValidationContext();\n+\n+        Program program = context.getProgram( enrollment.getProgram() );\n+        TrackedEntityInstance tei = context.getTrackedEntityInstance( enrollment.getTrackedEntity() );\n+\n+        Map<String, String> attributeValueMap = Maps.newHashMap();\n+\n+        for ( Attribute attribute : enrollment.getAttributes() )\n+        {\n+            validateRequiredProperties( reporter, attribute );\n+\n+            if ( attribute.getAttribute() == null || attribute.getValue() == null )\n+            {\n+                continue;\n+            }\n+\n+            TrackedEntityAttribute teAttribute = context.getTrackedEntityAttribute( attribute.getAttribute() );\n+\n+            if ( teAttribute == null )\n+            {\n+                continue;\n+            }\n+\n+            attributeValueMap.put( attribute.getAttribute(), attribute.getValue() );\n+\n+            validateAttrValueType( reporter, attribute, teAttribute );\n+\n+            //NOTE: this is perf killing\n+            validateAttributeUniqueness( reporter,\n+                attribute.getValue(),\n+                teAttribute,\n+                tei,\n+                tei.getOrganisationUnit() );\n+        }\n+\n+        validateMandatoryAttributes( reporter, program, tei, attributeValueMap );\n+    }\n+\n+    protected void validateRequiredProperties( ValidationErrorReporter reporter, Attribute attribute )\n+    {\n+        if ( attribute.getAttribute() == null )\n+        {\n+            reporter.addError( newReport( TrackerErrorCode.E1075 )\n+                .addArg( attribute ) );\n+        }\n+\n+        if ( attribute.getValue() == null )", "originalCommit": "a5f6d361402efd03ab461bcffa6bcc50be96c520", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI1MDIzOQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r448250239", "bodyText": "I guess the decision here is:\nShould null values result in deletion, or should we ignore them? I think they way people use the api now, deletion kinda makes sense. But we can have a separate parameter to support both.\nNote that any attributes the user dont have read or write access to should not result in a delete :)", "author": "stian-sandvold", "createdAt": "2020-07-01T09:51:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg2OTk1Nw=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "3e3b32e56ff5554a0095396eddffceac65b6b8de", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentAttributeValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentAttributeValidationHook.java\nindex e9d47f8432..0fbfa66c95 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentAttributeValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentAttributeValidationHook.java\n", "chunk": "@@ -113,38 +107,25 @@ public class EnrollmentAttributeValidationHook\n \n     protected void validateRequiredProperties( ValidationErrorReporter reporter, Attribute attribute )\n     {\n-        if ( attribute.getAttribute() == null )\n-        {\n-            reporter.addError( newReport( TrackerErrorCode.E1075 )\n-                .addArg( attribute ) );\n-        }\n-\n-        if ( attribute.getValue() == null )\n-        {\n-            reporter.addError( newReport( TrackerErrorCode.E1076 )\n-                .addArg( attribute ) );\n-        }\n+        addErrorIfNull( attribute.getAttribute(), reporter, E1075, attribute );\n+        addErrorIfNull( attribute.getValue(), reporter, E1076, attribute );\n \n         if ( attribute.getAttribute() != null )\n         {\n             TrackedEntityAttribute teAttribute = reporter.getValidationContext()\n                 .getTrackedEntityAttribute( attribute.getAttribute() );\n-            if ( teAttribute == null )\n-            {\n-                reporter.addError( newReport( TrackerErrorCode.E1017 )\n-                    .addArg( attribute.getAttribute() ) );\n-            }\n+\n+            addErrorIfNull( teAttribute, reporter, E1017, attribute );\n         }\n     }\n \n     private void validateMandatoryAttributes( ValidationErrorReporter reporter,\n         Program program, TrackedEntityInstance trackedEntityInstance, Map<String, String> attributeValueMap )\n     {\n-        Objects.requireNonNull( program, Constants.PROGRAM_CANT_BE_NULL );\n-        Objects.requireNonNull( trackedEntityInstance, TRACKED_ENTITY_INSTANCE_CANT_BE_NULL );\n-        Objects.requireNonNull( attributeValueMap, ATTRIBUTE_VALUE_MAP_CANT_BE_NULL );\n+        checkNotNull( program, TrackerImporterAssertErrors.PROGRAM_CANT_BE_NULL );\n+        checkNotNull( trackedEntityInstance, TRACKED_ENTITY_INSTANCE_CANT_BE_NULL );\n+        checkNotNull( attributeValueMap, ATTRIBUTE_VALUE_MAP_CANT_BE_NULL );\n \n-        // TODO: This is my attempt to fix this after impl. Abyot's comments on the initial/original version.\n         // 1. Get all tei attributes, map attrValue attr. into set of attr.\n         Set<TrackedEntityAttribute> trackedEntityAttributes = trackedEntityInstance.getTrackedEntityAttributeValues()\n             .stream()\n", "next_change": {"commit": "d095f2d4cf9aaac1e9aa973d4da6aa2f96104cc8", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentAttributeValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentAttributeValidationHook.java\nindex 0fbfa66c95..443aa348e9 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentAttributeValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentAttributeValidationHook.java\n", "chunk": "@@ -120,17 +122,16 @@ public class EnrollmentAttributeValidationHook\n     }\n \n     private void validateMandatoryAttributes( ValidationErrorReporter reporter,\n-        Program program, TrackedEntityInstance trackedEntityInstance, Map<String, String> attributeValueMap )\n+        Program program, Enrollment enrollment, Map<String, String> attributeValueMap )\n     {\n         checkNotNull( program, TrackerImporterAssertErrors.PROGRAM_CANT_BE_NULL );\n-        checkNotNull( trackedEntityInstance, TRACKED_ENTITY_INSTANCE_CANT_BE_NULL );\n+        // checkNotNull( trackedEntityInstance, TRACKED_ENTITY_INSTANCE_CANT_BE_NULL );\n+        // -- TODO no need to check it again\n         checkNotNull( attributeValueMap, ATTRIBUTE_VALUE_MAP_CANT_BE_NULL );\n \n         // 1. Get all tei attributes, map attrValue attr. into set of attr.\n-        Set<TrackedEntityAttribute> trackedEntityAttributes = trackedEntityInstance.getTrackedEntityAttributeValues()\n-            .stream()\n-            .map( TrackedEntityAttributeValue::getAttribute )\n-            .collect( Collectors.toSet() );\n+        Set<TrackedEntityAttribute> trackedEntityAttributes = getTrackedEntityAttributesFromEnrollment(\n+            reporter.getValidationContext(), enrollment );\n \n         // 2. Map all program attr. that match tei attr. into map. of attr:is mandatory\n         Map<TrackedEntityAttribute, Boolean> mandatoryMap = program.getProgramAttributes().stream()\n", "next_change": {"commit": "7678ab6c0c8f661a5a2974f3ee8deb1045278558", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentAttributeValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentAttributeValidationHook.java\nindex 443aa348e9..54ebfb698b 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentAttributeValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentAttributeValidationHook.java\n", "chunk": "@@ -122,84 +129,85 @@ public class EnrollmentAttributeValidationHook\n     }\n \n     private void validateMandatoryAttributes( ValidationErrorReporter reporter,\n-        Program program, Enrollment enrollment, Map<String, String> attributeValueMap )\n+        Program program, Enrollment enrollment )\n     {\n         checkNotNull( program, TrackerImporterAssertErrors.PROGRAM_CANT_BE_NULL );\n-        // checkNotNull( trackedEntityInstance, TRACKED_ENTITY_INSTANCE_CANT_BE_NULL );\n-        // -- TODO no need to check it again\n-        checkNotNull( attributeValueMap, ATTRIBUTE_VALUE_MAP_CANT_BE_NULL );\n \n-        // 1. Get all tei attributes, map attrValue attr. into set of attr.\n-        Set<TrackedEntityAttribute> trackedEntityAttributes = getTrackedEntityAttributesFromEnrollment(\n-            reporter.getValidationContext(), enrollment );\n+        // Build a data structures of attributes eligible for mandatory validations:\n+        // 1 - attributes from enrollments whose value is not empty or null\n+        // 2 - attributes already existing in TEI (from preheat)\n \n-        // 2. Map all program attr. that match tei attr. into map. of attr:is mandatory\n-        Map<TrackedEntityAttribute, Boolean> mandatoryMap = program.getProgramAttributes().stream()\n-            .filter( v -> trackedEntityAttributes.contains( v.getAttribute() ) )\n+        // 1 - attributes from enrollment whose value is non-empty\n+        Map<String, String> enrollmentNonEmptyAttributeUids = Optional.of( enrollment )\n+            .map( Enrollment::getAttributes )\n+            .orElse( Collections.emptyList() )\n+            .stream()\n+            .filter( this::isNonEmpty)\n             .collect( Collectors.toMap(\n-                ProgramTrackedEntityAttribute::getAttribute,\n-                ProgramTrackedEntityAttribute::isMandatory ) );\n+                Attribute::getAttribute,\n+                Attribute::getValue ) );\n \n-        for ( Map.Entry<TrackedEntityAttribute, Boolean> entry : mandatoryMap.entrySet() )\n-        {\n-            TrackedEntityAttribute attribute = entry.getKey();\n-            Boolean attributeIsMandatory = entry.getValue();\n+        // 2 - attributes uids from existing TEI (if any) from preheat\n+        Set<String> teiAttributeUids = buildTeiAttributeUids( reporter, enrollment.getTrackedEntity() );\n \n-            // TODO: This is quite ugly and should be considered to be solved differently,\n-            // e.i. authorization should be handled in one common place.\n-            // NB: ! This authority MUST only be used in SYNC mode! This needs to be added\n-            // to the check\n-            boolean userIsAuthorizedToIgnoreRequiredValueValidation = !reporter.getValidationContext().getBundle()\n-                .getUser()\n-                .isAuthorized( Authorities.F_IGNORE_TRACKER_REQUIRED_VALUE_VALIDATION.getAuthority() );\n+        // merged uids of eligible attribute to validate\n+        Set<String> mergedAttributes = Streams\n+            .concat( enrollmentNonEmptyAttributeUids.keySet().stream(), teiAttributeUids.stream() )\n+            .collect( Collectors.toSet() );\n \n-            boolean hasMissingAttribute = attributeIsMandatory\n-                && !userIsAuthorizedToIgnoreRequiredValueValidation\n-                && !attributeValueMap.containsKey( attribute.getUid() );\n+        // Map having as key program attribute uid and mandatory flag as value\n+        Map<String, Boolean> programAttributesMap = program.getProgramAttributes().stream()\n+            .collect( Collectors.toMap(\n+                programTrackedEntityAttribute -> programTrackedEntityAttribute.getAttribute().getUid(),\n+                ProgramTrackedEntityAttribute::isMandatory ) );\n \n-            addErrorIf( () -> hasMissingAttribute, reporter, E1018, attribute );\n+        // Merged attributes must contain each mandatory program attribute.\n+        programAttributesMap.entrySet()\n+            .stream()\n+            .filter( Map.Entry::getValue ) // <--- filter on mandatory flag\n+            .map( Map.Entry::getKey )\n+            .forEach( mandatoryProgramAttributeUid -> addErrorIf(\n+                () -> !mergedAttributes.contains( mandatoryProgramAttributeUid ), reporter, E1018,\n+                mandatoryProgramAttributeUid ) );\n+\n+        // enrollment must not contain any attribute which is not defined in program\n+        enrollmentNonEmptyAttributeUids\n+            .forEach(\n+                ( attrUid, attrVal ) -> addErrorIf( () -> !programAttributesMap.containsKey( attrUid ), reporter, E1019,\n+                    attrUid + \"=\" + attrVal ) );\n+    }\n \n-            // Remove program attr. from enrollment attr. list\n-            attributeValueMap.remove( attribute.getUid() );\n-        }\n+    private Set<String> buildTeiAttributeUids( ValidationErrorReporter reporter, String trackedEntityInstanceUid )\n+    {\n+        return Optional.of( reporter )\n+            .map( ValidationErrorReporter::getValidationContext )\n+            .map( TrackerImportValidationContext::getBundle )\n+            .map( TrackerBundle::getPreheat )\n+            .map( trackerPreheat -> trackerPreheat.getTrackedEntity( TrackerIdScheme.UID, trackedEntityInstanceUid ) )\n+            .map( TrackedEntityInstance::getTrackedEntityAttributeValues )\n+            .orElse( Collections.emptySet() )\n+            .stream()\n+            .map( TrackedEntityAttributeValue::getAttribute )\n+            .map( BaseIdentifiableObject::getUid )\n+            .collect( Collectors.toSet() );\n+    }\n \n-        if ( !attributeValueMap.isEmpty() )\n-        {\n-            for ( Map.Entry<String, String> entry : attributeValueMap.entrySet() )\n-            {\n-                // Only Program attributes is allowed for enrollment\n-                addError( reporter, E1019, entry.getKey() + \"=\" + entry.getValue() );\n-            }\n-        }\n+    private boolean isNonEmpty(Attribute attribute )\n+    {\n+        return StringUtils.isNotBlank( attribute.getValue() ) && StringUtils.isNotBlank(attribute.getAttribute());\n     }\n \n-    private Set<TrackedEntityAttribute> getTrackedEntityAttributesFromEnrollment(\n-        TrackerImportValidationContext context,\n-        Enrollment enrollment )\n+    private String getOrgUnitUidFromTei( TrackerImportValidationContext context, String teiUid )\n     {\n-        final TrackedEntityInstance trackedEntityInstance = context\n-            .getTrackedEntityInstance( enrollment.getTrackedEntity() );\n-        if ( trackedEntityInstance != null )\n-        {\n-            return trackedEntityInstance.getTrackedEntityAttributeValues()\n-                .stream()\n-                .map( TrackedEntityAttributeValue::getAttribute )\n-                .collect( Collectors.toSet() );\n-        }\n-        else\n+\n+        final Optional<ReferenceTrackerEntity> reference = context.getReference( teiUid );\n+        if ( reference.isPresent() )\n         {\n-            final Optional<ReferenceTrackerEntity> reference = context.getReference( enrollment.getTrackedEntity() );\n-            if ( reference.isPresent() )\n+            final Optional<TrackedEntity> tei = context.getBundle()\n+                .getTrackedEntity( teiUid );\n+            if ( tei.isPresent() )\n             {\n-                final Optional<TrackedEntity> tei = context.getBundle()\n-                    .getTrackedEntity( enrollment.getTrackedEntity() );\n-                if ( tei.isPresent() )\n-                {\n-                    return tei.get().getAttributes()\n-                        .stream()\n-                        .map( a -> context.getTrackedEntityAttribute( a.getAttribute() ) )\n-                        .collect( Collectors.toSet() );\n-                }\n+                return tei.get().getOrgUnit();\n             }\n         }\n         return null;\n", "next_change": {"commit": "ef0cbd365e47f1f88befb80d9650cce75280bd35", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentAttributeValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentAttributeValidationHook.java\nindex 54ebfb698b..554ca56f05 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentAttributeValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentAttributeValidationHook.java\n", "chunk": "@@ -192,19 +198,13 @@ public class EnrollmentAttributeValidationHook extends AttributeValidationHook\n             .collect( Collectors.toSet() );\n     }\n \n-    private boolean isNonEmpty(Attribute attribute )\n-    {\n-        return StringUtils.isNotBlank( attribute.getValue() ) && StringUtils.isNotBlank(attribute.getAttribute());\n-    }\n-\n-    private String getOrgUnitUidFromTei( TrackerImportValidationContext context, String teiUid )\n+    private String getOrgUnitUidFromTei( TrackerBundle bundle, String teiUid )\n     {\n \n-        final Optional<ReferenceTrackerEntity> reference = context.getReference( teiUid );\n+        final Optional<ReferenceTrackerEntity> reference = bundle.getPreheat().getReference( teiUid );\n         if ( reference.isPresent() )\n         {\n-            final Optional<TrackedEntity> tei = context.getBundle()\n-                .getTrackedEntity( teiUid );\n+            final Optional<TrackedEntity> tei = bundle.getTrackedEntity( teiUid );\n             if ( tei.isPresent() )\n             {\n                 return tei.get().getOrgUnit();\n", "next_change": {"commit": "07ff89195ce66114c2b5a744039c2b2ce7a8f440", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentAttributeValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentAttributeValidationHook.java\nindex 554ca56f05..5e71d172a9 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentAttributeValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentAttributeValidationHook.java\n", "chunk": "@@ -170,41 +176,40 @@ public class EnrollmentAttributeValidationHook extends AttributeValidationHook\n             .stream()\n             .filter( Map.Entry::getValue ) // <--- filter on mandatory flag\n             .map( Map.Entry::getKey )\n-            .forEach( mandatoryProgramAttributeUid -> reporter.addErrorIf(\n-                () -> !mergedAttributes.contains( mandatoryProgramAttributeUid ),\n-                enrollment, E1018,\n-                mandatoryProgramAttributeUid, program.getUid(), enrollment.getEnrollment() ) );\n+            .forEach( mandatoryProgramAttribute -> reporter.addErrorIf(\n+                () -> !mergedAttributes.contains( mandatoryProgramAttribute ),\n+                enrollment, E1018, mandatoryProgramAttribute, program.getUid(), enrollment.getEnrollment() ) );\n \n         // enrollment must not contain any attribute which is not defined in\n         // program\n-        enrollmentNonEmptyAttributeUids\n+        enrollmentNonEmptyAttributes\n             .forEach(\n-                ( attrUid, attrVal ) -> reporter.addErrorIf( () -> !programAttributesMap.containsKey( attrUid ),\n-                    enrollment, E1019,\n-                    attrUid + \"=\" + attrVal ) );\n+                ( attrId, attrVal ) -> reporter.addErrorIf( () -> !programAttributesMap.containsKey( attrId ),\n+                    enrollment, E1019, attrId.getIdentifierOrAttributeValue() + \"=\" + attrVal ) );\n     }\n \n-    private Set<String> buildTeiAttributeUids( ValidationErrorReporter reporter, String trackedEntityInstanceUid )\n+    private Set<MetadataIdentifier> buildTeiAttributes( TrackerBundle bundle,\n+        String trackedEntityInstanceUid )\n     {\n-        return Optional.of( reporter )\n-            .map( ValidationErrorReporter::getBundle )\n+        TrackerIdSchemeParams idSchemes = bundle.getPreheat().getIdSchemes();\n+        return Optional.of( bundle )\n             .map( TrackerBundle::getPreheat )\n-            .map( trackerPreheat -> trackerPreheat.getTrackedEntity( TrackerIdScheme.UID, trackedEntityInstanceUid ) )\n+            .map( trackerPreheat -> trackerPreheat.getTrackedEntity( trackedEntityInstanceUid ) )\n             .map( TrackedEntityInstance::getTrackedEntityAttributeValues )\n             .orElse( Collections.emptySet() )\n             .stream()\n             .map( TrackedEntityAttributeValue::getAttribute )\n-            .map( BaseIdentifiableObject::getUid )\n+            .map( idSchemes::toMetadataIdentifier )\n             .collect( Collectors.toSet() );\n     }\n \n-    private String getOrgUnitUidFromTei( TrackerBundle bundle, String teiUid )\n+    private MetadataIdentifier getOrgUnitUidFromTei( TrackerBundle bundle, String teiUid )\n     {\n \n         final Optional<ReferenceTrackerEntity> reference = bundle.getPreheat().getReference( teiUid );\n         if ( reference.isPresent() )\n         {\n-            final Optional<TrackedEntity> tei = bundle.getTrackedEntity( teiUid );\n+            final Optional<TrackedEntity> tei = bundle.findTrackedEntityByUid( teiUid );\n             if ( tei.isPresent() )\n             {\n                 return tei.get().getOrgUnit();\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "message": "Merge commit", "committedDate": null}, {"oid": "3e3dc98d92f0c13fb56cf17894eab06a78842133", "committedDate": "2020-08-04 17:20:37 +0200", "message": "feat: Enrollment/Events note persistence"}, {"oid": "e1260b5e8fceb13c2883754236a34cdd652e1c1c", "committedDate": "2020-10-20 14:00:34 +0200", "message": "refactor: Load in the preheat all the data needed for uniqueness attr\u2026 (#6397)"}, {"oid": "3e3b32e56ff5554a0095396eddffceac65b6b8de", "committedDate": "2020-10-27 09:56:50 +0100", "message": "refactor: simplified calls to error reporting (#6437)"}, {"oid": "d095f2d4cf9aaac1e9aa973d4da6aa2f96104cc8", "committedDate": "2020-11-11 13:49:13 +0100", "message": "fix: allow validation to reference entities in the payload (#6617)"}, {"oid": "0bf55d776481f6511e5f9ebca5de1f2cf79777c0", "committedDate": "2020-11-19 13:55:46 +0100", "message": "refactor: New Tracker Error reporting refactor (#6706)"}, {"oid": "8c4a255176ac5e675c549db2065926fdbaf0290b", "committedDate": "2020-12-14 08:31:48 +0100", "message": "fix: Remove clearSession/clearCache inside transaction causing audit fail (#6876)"}, {"oid": "7678ab6c0c8f661a5a2974f3ee8deb1045278558", "committedDate": "2020-12-16 09:39:21 +0100", "message": "fix: enrollments attributes are validated against mandatory program attributes (DHIS2-10077) (#6854)"}, {"oid": "b45bc96224d9ab6c13fe83f5363d58c943c6e695", "committedDate": "2020-12-18 10:02:52 +0100", "message": "fix: DHIS2-10077 changed mandatory program attribute error message (#6938)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "20c87464d818f6f2d5d7334b2ef2af99d7a24e98", "committedDate": "2021-02-11 10:54:18 +0100", "message": "fix: NPE in ProgramOrgUnitSupplier in Preheat [DHIS2-10430]"}, {"oid": "c25b817a180f24b3de6b26d5a089563aa336aa8c", "committedDate": "2021-03-05 10:44:25 +0100", "message": "feat: Validation for values with option sets [DHIS2-10452] (#7512)"}, {"oid": "60fe241badad5b1463bc3991eff2927abae32644", "committedDate": "2021-04-21 13:49:15 +0200", "message": "fix: [DHIS2-10797] Fix remove null values for tracker attributes and data values 2.37 (#7880)"}, {"oid": "2ce39cbc3ddb3e5b0b3b2ef747af2cf79a67821d", "committedDate": "2021-05-12 09:20:07 +0200", "message": "fix: [DHIS2-10797] Fix remove null values for tracker attributes and data values 2.37 (#8004)"}, {"oid": "9062a6b97820374ba0cff1a63bf4a776c69d41c8", "committedDate": "2021-10-13 09:19:34 +0200", "message": "fix: Remove duplicate error messages for enrollment attributes [DHIS2-11949] (#9040)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "97fa18701761c6993e20f2e7a3816ea689129480", "committedDate": "2022-01-11 15:31:02 +0100", "message": "chore: hooks should add errors via reporter directly TECH-880 (#9523)"}, {"oid": "1d8350a9e9ac100aaaa831894ba3f857b46e2474", "committedDate": "2022-01-13 14:15:17 +0100", "message": "chore: adding errors and warnings is responsibility of the ValidationErrorReporter TECH-880 (#9616)"}, {"oid": "c039b8f75c1d965414de926f04540dfaabdd104c", "committedDate": "2022-02-23 13:08:25 +0100", "message": "chore: Clean up service program rule module [TECH-938] (#9885)"}, {"oid": "ef0cbd365e47f1f88befb80d9650cce75280bd35", "committedDate": "2022-03-08 15:12:00 +0100", "message": "chore: move DB access and mutation to preheat and preprocessor DHIS2-12623 (#9904)"}, {"oid": "0303652efe35da369ba1d2a437a4b5797a52c451", "committedDate": "2022-04-01 09:37:58 +0200", "message": "chore: tracker entities only support idScheme UID DHIS2-12563 (#10329)"}, {"oid": "66b1250699e5198a4cffb092df7c652f569b2b5a", "committedDate": "2022-05-02 12:28:01 +0200", "message": "chore: TrackedEntity.orgUnit is a MetadataIdentifier (#10608)"}, {"oid": "9ff8d0c831d8448a696a37138139a0ae5b975c86", "committedDate": "2022-05-17 13:32:06 +0200", "message": "fix: Attribute.attribute is a MetadataIdentifier DHIS2-12563 (#10782)"}, {"oid": "df4eaf29ba29ee71a727a1c072fd4bcb03bb4bc9", "committedDate": "2022-05-19 15:13:36 +0200", "message": "chore: docs, improve APIs DHIS2-12563 (#10847)"}, {"oid": "b567e74f7d703115fb7bc9802ed3b5f29d6917aa", "committedDate": "2022-05-23 09:13:55 +0200", "message": "fix: report ids or attribute value for MetadataIdentifiers DHIS2-12519 (#10873)"}, {"oid": "f7cfc83610c75486bbb0457dde057eaed777f3d2", "committedDate": "2022-05-27 15:15:25 +0200", "message": "chore: ValidationErrorReporter does not need the bunlde DHIS2-12519 (#10878)"}, {"oid": "9ee39f390105c4517d67abfb5dbb377f9fb82074", "committedDate": "2022-06-10 10:50:40 +0200", "message": "fix: Validate enrollment attributes values based on valueType in NTI [DHIS2-12669] (2.39) (#11050)"}, {"oid": "b0a861c0308005b865cafa2344c1231c0a4f2bc3", "committedDate": "2022-12-02 13:36:08 +0100", "message": "fix: turn removeOnError into skipOnError DHIS2-14213 (#12457)"}, {"oid": "7ac68b368a1dbd9362973b30f7160399abe801a0", "committedDate": "2022-12-06 09:04:47 +0100", "message": "chore: move ValidationErrorReporter close to its usage (#12486)"}, {"oid": "07ff89195ce66114c2b5a744039c2b2ce7a8f440", "committedDate": "2022-12-13 09:51:43 +0100", "message": "chore: Clean up TrackerBundle methods [TECH-14298] (#12515)"}, {"oid": "2db6b519d76e1d0b0390a9dc6f2f650824c543bb", "committedDate": "2022-12-13 13:10:13 +0100", "message": "chore: migrate enrollment validators (#12526)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg3MDk1Mw==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r429870953", "body": "I think this special authority is used for import mode SYNC, I'm not sure we want this as a general rule (but its something that needs to be discussed)", "bodyText": "I think this special authority is used for import mode SYNC, I'm not sure we want this as a general rule (but its something that needs to be discussed)", "bodyHTML": "<p dir=\"auto\">I think this special authority is used for import mode SYNC, I'm not sure we want this as a general rule (but its something that needs to be discussed)</p>", "author": "mortenoh", "createdAt": "2020-05-25T10:53:01Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentAttributeValidationHook.java", "diffHunk": "@@ -0,0 +1,196 @@\n+package org.hisp.dhis.tracker.validation.hooks;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import com.google.common.collect.Maps;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.program.ProgramTrackedEntityAttribute;\n+import org.hisp.dhis.security.Authorities;\n+import org.hisp.dhis.trackedentity.TrackedEntityAttribute;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+import org.hisp.dhis.trackedentityattributevalue.TrackedEntityAttributeValue;\n+import org.hisp.dhis.tracker.TrackerImportStrategy;\n+import org.hisp.dhis.tracker.domain.Attribute;\n+import org.hisp.dhis.tracker.domain.Enrollment;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n+import org.hisp.dhis.tracker.validation.TrackerImportValidationContext;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n+import static org.hisp.dhis.tracker.validation.hooks.Constants.ATTRIBUTE_VALUE_MAP_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.Constants.TRACKED_ENTITY_INSTANCE_CANT_BE_NULL;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+@Component\n+public class EnrollmentAttributeValidationHook\n+    extends AbstractTrackerDtoValidationHook\n+{\n+    @Override\n+    public int getOrder()\n+    {\n+        return 105;\n+    }\n+\n+    public EnrollmentAttributeValidationHook()\n+    {\n+        super( Enrollment.class, TrackerImportStrategy.CREATE_AND_UPDATE );\n+    }\n+\n+    @Override\n+    public void validateEnrollment( ValidationErrorReporter reporter, Enrollment enrollment )\n+    {\n+        TrackerImportValidationContext context = reporter.getValidationContext();\n+\n+        Program program = context.getProgram( enrollment.getProgram() );\n+        TrackedEntityInstance tei = context.getTrackedEntityInstance( enrollment.getTrackedEntity() );\n+\n+        Map<String, String> attributeValueMap = Maps.newHashMap();\n+\n+        for ( Attribute attribute : enrollment.getAttributes() )\n+        {\n+            validateRequiredProperties( reporter, attribute );\n+\n+            if ( attribute.getAttribute() == null || attribute.getValue() == null )\n+            {\n+                continue;\n+            }\n+\n+            TrackedEntityAttribute teAttribute = context.getTrackedEntityAttribute( attribute.getAttribute() );\n+\n+            if ( teAttribute == null )\n+            {\n+                continue;\n+            }\n+\n+            attributeValueMap.put( attribute.getAttribute(), attribute.getValue() );\n+\n+            validateAttrValueType( reporter, attribute, teAttribute );\n+\n+            //NOTE: this is perf killing\n+            validateAttributeUniqueness( reporter,\n+                attribute.getValue(),\n+                teAttribute,\n+                tei,\n+                tei.getOrganisationUnit() );\n+        }\n+\n+        validateMandatoryAttributes( reporter, program, tei, attributeValueMap );\n+    }\n+\n+    protected void validateRequiredProperties( ValidationErrorReporter reporter, Attribute attribute )\n+    {\n+        if ( attribute.getAttribute() == null )\n+        {\n+            reporter.addError( newReport( TrackerErrorCode.E1075 )\n+                .addArg( attribute ) );\n+        }\n+\n+        if ( attribute.getValue() == null )\n+        {\n+            reporter.addError( newReport( TrackerErrorCode.E1076 )\n+                .addArg( attribute ) );\n+        }\n+\n+        if ( attribute.getAttribute() != null )\n+        {\n+            TrackedEntityAttribute teAttribute = reporter.getValidationContext()\n+                .getTrackedEntityAttribute( attribute.getAttribute() );\n+            if ( teAttribute == null )\n+            {\n+                reporter.addError( newReport( TrackerErrorCode.E1017 )\n+                    .addArg( attribute.getAttribute() ) );\n+            }\n+        }\n+    }\n+\n+    private void validateMandatoryAttributes( ValidationErrorReporter reporter,\n+        Program program, TrackedEntityInstance trackedEntityInstance, Map<String, String> attributeValueMap )\n+    {\n+        Objects.requireNonNull( program, Constants.PROGRAM_CANT_BE_NULL );\n+        Objects.requireNonNull( trackedEntityInstance, TRACKED_ENTITY_INSTANCE_CANT_BE_NULL );\n+        Objects.requireNonNull( attributeValueMap, ATTRIBUTE_VALUE_MAP_CANT_BE_NULL );\n+\n+        // TODO: This is my attempt to fix this after impl. Abyot's comments on the initial/original version.\n+        // 1. Get all tei attributes, map attrValue attr. into set of attr.\n+        Set<TrackedEntityAttribute> trackedEntityAttributes = trackedEntityInstance.getTrackedEntityAttributeValues()\n+            .stream()\n+            .map( TrackedEntityAttributeValue::getAttribute )\n+            .collect( Collectors.toSet() );\n+\n+        // 2. Map all program attr. that match tei attr. into map. of attr:is mandatory\n+        Map<TrackedEntityAttribute, Boolean> mandatoryMap = program.getProgramAttributes().stream()\n+            .filter( v -> trackedEntityAttributes.contains( v.getAttribute() ) )\n+            .collect( Collectors.toMap(\n+                ProgramTrackedEntityAttribute::getAttribute,\n+                ProgramTrackedEntityAttribute::isMandatory ) );\n+\n+        for ( Map.Entry<TrackedEntityAttribute, Boolean> entry : mandatoryMap.entrySet() )\n+        {\n+            TrackedEntityAttribute attribute = entry.getKey();\n+            Boolean attributeIsMandatory = entry.getValue();\n+\n+            boolean userIsAuthorizedToIgnoreRequiredValueValidation = !reporter.getValidationContext().getBundle()\n+                .getUser()\n+\n+             .isAuthorized( Authorities.F_IGNORE_TRACKER_REQUIRED_VALUE_VALIDATION.getAuthority() );", "originalCommit": "a5f6d361402efd03ab461bcffa6bcc50be96c520", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI1MTY2Nw==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r448251667", "bodyText": "For now, we keep it. @ameenhere will be taking over a bit of the sync code, so this seems like something we can revisit in the future when we make sure the new importer supports sync, the same way the old one does.", "author": "stian-sandvold", "createdAt": "2020-07-01T09:53:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg3MDk1Mw=="}], "type": "inlineReview", "revised_code": {"commit": "746adc68e288421fae02872e611faec4d25ce807", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentAttributeValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentAttributeValidationHook.java\nindex e9d47f8432..78435dff33 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentAttributeValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentAttributeValidationHook.java\n", "chunk": "@@ -166,7 +166,7 @@ public class EnrollmentAttributeValidationHook\n             boolean userIsAuthorizedToIgnoreRequiredValueValidation = !reporter.getValidationContext().getBundle()\n                 .getUser()\n \n-             .isAuthorized( Authorities.F_IGNORE_TRACKER_REQUIRED_VALUE_VALIDATION.getAuthority() );\n+                .isAuthorized( Authorities.F_IGNORE_TRACKER_REQUIRED_VALUE_VALIDATION.getAuthority() );\n \n             boolean hasMissingAttribute = attributeIsMandatory\n                 && !userIsAuthorizedToIgnoreRequiredValueValidation\n", "next_change": {"commit": "e7e003a2211cdf3f412ce75f95ef0f6be1973434", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentAttributeValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentAttributeValidationHook.java\nindex 78435dff33..20eaac599d 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentAttributeValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentAttributeValidationHook.java\n", "chunk": "@@ -163,9 +156,10 @@ public class EnrollmentAttributeValidationHook\n             TrackedEntityAttribute attribute = entry.getKey();\n             Boolean attributeIsMandatory = entry.getValue();\n \n+            // TODO: This is quite ugly and should be considered to be solved differently,\n+            //  e.i. authorization should be handled in one common place.\n             boolean userIsAuthorizedToIgnoreRequiredValueValidation = !reporter.getValidationContext().getBundle()\n                 .getUser()\n-\n                 .isAuthorized( Authorities.F_IGNORE_TRACKER_REQUIRED_VALUE_VALIDATION.getAuthority() );\n \n             boolean hasMissingAttribute = attributeIsMandatory\n", "next_change": {"commit": "ec14261db1f790e1be25e5bb27b45226087a9dd5", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentAttributeValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentAttributeValidationHook.java\nindex 20eaac599d..60236ed768 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentAttributeValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentAttributeValidationHook.java\n", "chunk": "@@ -158,6 +158,7 @@ public class EnrollmentAttributeValidationHook\n \n             // TODO: This is quite ugly and should be considered to be solved differently,\n             //  e.i. authorization should be handled in one common place.\n+            // NB: ! This authority MUST only be used in SYNC mode! This needs to be added to the check\n             boolean userIsAuthorizedToIgnoreRequiredValueValidation = !reporter.getValidationContext().getBundle()\n                 .getUser()\n                 .isAuthorized( Authorities.F_IGNORE_TRACKER_REQUIRED_VALUE_VALIDATION.getAuthority() );\n", "next_change": null}]}}, {"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentAttributeValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentAttributeValidationHook.java\nindex 78435dff33..20eaac599d 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentAttributeValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentAttributeValidationHook.java\n", "chunk": "@@ -174,12 +168,10 @@ public class EnrollmentAttributeValidationHook\n \n             if ( hasMissingAttribute )\n             {\n-                // Missing mandatory attribute\n-                reporter.addError( newReport( TrackerErrorCode.E1018 )\n-                    .addArg( attribute ) );\n+                reporter.addError( newReport( TrackerErrorCode.E1018 ).addArg( attribute ) );\n             }\n \n-            // Remove program attr. from enrollment attr. list (\n+            // Remove program attr. from enrollment attr. list\n             attributeValueMap.remove( attribute.getUid() );\n         }\n \n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentAttributeValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentAttributeValidationHook.java\nindex e9d47f8432..d66d264c21 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentAttributeValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentAttributeValidationHook.java\n", "chunk": "@@ -163,10 +155,12 @@ public class EnrollmentAttributeValidationHook\n             TrackedEntityAttribute attribute = entry.getKey();\n             Boolean attributeIsMandatory = entry.getValue();\n \n+            // TODO: This is quite ugly and should be considered to be solved differently,\n+            //  e.i. authorization should be handled in one common place.\n+            // NB: ! This authority MUST only be used in SYNC mode! This needs to be added to the check\n             boolean userIsAuthorizedToIgnoreRequiredValueValidation = !reporter.getValidationContext().getBundle()\n                 .getUser()\n-\n-             .isAuthorized( Authorities.F_IGNORE_TRACKER_REQUIRED_VALUE_VALIDATION.getAuthority() );\n+                .isAuthorized( Authorities.F_IGNORE_TRACKER_REQUIRED_VALUE_VALIDATION.getAuthority() );\n \n             boolean hasMissingAttribute = attributeIsMandatory\n                 && !userIsAuthorizedToIgnoreRequiredValueValidation\n", "next_change": {"commit": "3e3b32e56ff5554a0095396eddffceac65b6b8de", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentAttributeValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentAttributeValidationHook.java\nindex d66d264c21..0fbfa66c95 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentAttributeValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentAttributeValidationHook.java\n", "chunk": "@@ -166,10 +155,7 @@ public class EnrollmentAttributeValidationHook\n                 && !userIsAuthorizedToIgnoreRequiredValueValidation\n                 && !attributeValueMap.containsKey( attribute.getUid() );\n \n-            if ( hasMissingAttribute )\n-            {\n-                reporter.addError( newReport( TrackerErrorCode.E1018 ).addArg( attribute ) );\n-            }\n+            addErrorIf( () -> hasMissingAttribute, reporter, E1018, attribute );\n \n             // Remove program attr. from enrollment attr. list\n             attributeValueMap.remove( attribute.getUid() );\n", "next_change": {"commit": "7678ab6c0c8f661a5a2974f3ee8deb1045278558", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentAttributeValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentAttributeValidationHook.java\nindex 0fbfa66c95..54ebfb698b 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentAttributeValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentAttributeValidationHook.java\n", "chunk": "@@ -120,54 +129,87 @@ public class EnrollmentAttributeValidationHook\n     }\n \n     private void validateMandatoryAttributes( ValidationErrorReporter reporter,\n-        Program program, TrackedEntityInstance trackedEntityInstance, Map<String, String> attributeValueMap )\n+        Program program, Enrollment enrollment )\n     {\n         checkNotNull( program, TrackerImporterAssertErrors.PROGRAM_CANT_BE_NULL );\n-        checkNotNull( trackedEntityInstance, TRACKED_ENTITY_INSTANCE_CANT_BE_NULL );\n-        checkNotNull( attributeValueMap, ATTRIBUTE_VALUE_MAP_CANT_BE_NULL );\n \n-        // 1. Get all tei attributes, map attrValue attr. into set of attr.\n-        Set<TrackedEntityAttribute> trackedEntityAttributes = trackedEntityInstance.getTrackedEntityAttributeValues()\n+        // Build a data structures of attributes eligible for mandatory validations:\n+        // 1 - attributes from enrollments whose value is not empty or null\n+        // 2 - attributes already existing in TEI (from preheat)\n+\n+        // 1 - attributes from enrollment whose value is non-empty\n+        Map<String, String> enrollmentNonEmptyAttributeUids = Optional.of( enrollment )\n+            .map( Enrollment::getAttributes )\n+            .orElse( Collections.emptyList() )\n             .stream()\n-            .map( TrackedEntityAttributeValue::getAttribute )\n+            .filter( this::isNonEmpty)\n+            .collect( Collectors.toMap(\n+                Attribute::getAttribute,\n+                Attribute::getValue ) );\n+\n+        // 2 - attributes uids from existing TEI (if any) from preheat\n+        Set<String> teiAttributeUids = buildTeiAttributeUids( reporter, enrollment.getTrackedEntity() );\n+\n+        // merged uids of eligible attribute to validate\n+        Set<String> mergedAttributes = Streams\n+            .concat( enrollmentNonEmptyAttributeUids.keySet().stream(), teiAttributeUids.stream() )\n             .collect( Collectors.toSet() );\n \n-        // 2. Map all program attr. that match tei attr. into map. of attr:is mandatory\n-        Map<TrackedEntityAttribute, Boolean> mandatoryMap = program.getProgramAttributes().stream()\n-            .filter( v -> trackedEntityAttributes.contains( v.getAttribute() ) )\n+        // Map having as key program attribute uid and mandatory flag as value\n+        Map<String, Boolean> programAttributesMap = program.getProgramAttributes().stream()\n             .collect( Collectors.toMap(\n-                ProgramTrackedEntityAttribute::getAttribute,\n+                programTrackedEntityAttribute -> programTrackedEntityAttribute.getAttribute().getUid(),\n                 ProgramTrackedEntityAttribute::isMandatory ) );\n \n-        for ( Map.Entry<TrackedEntityAttribute, Boolean> entry : mandatoryMap.entrySet() )\n-        {\n-            TrackedEntityAttribute attribute = entry.getKey();\n-            Boolean attributeIsMandatory = entry.getValue();\n-\n-            // TODO: This is quite ugly and should be considered to be solved differently,\n-            //  e.i. authorization should be handled in one common place.\n-            // NB: ! This authority MUST only be used in SYNC mode! This needs to be added to the check\n-            boolean userIsAuthorizedToIgnoreRequiredValueValidation = !reporter.getValidationContext().getBundle()\n-                .getUser()\n-                .isAuthorized( Authorities.F_IGNORE_TRACKER_REQUIRED_VALUE_VALIDATION.getAuthority() );\n+        // Merged attributes must contain each mandatory program attribute.\n+        programAttributesMap.entrySet()\n+            .stream()\n+            .filter( Map.Entry::getValue ) // <--- filter on mandatory flag\n+            .map( Map.Entry::getKey )\n+            .forEach( mandatoryProgramAttributeUid -> addErrorIf(\n+                () -> !mergedAttributes.contains( mandatoryProgramAttributeUid ), reporter, E1018,\n+                mandatoryProgramAttributeUid ) );\n+\n+        // enrollment must not contain any attribute which is not defined in program\n+        enrollmentNonEmptyAttributeUids\n+            .forEach(\n+                ( attrUid, attrVal ) -> addErrorIf( () -> !programAttributesMap.containsKey( attrUid ), reporter, E1019,\n+                    attrUid + \"=\" + attrVal ) );\n+    }\n \n-            boolean hasMissingAttribute = attributeIsMandatory\n-                && !userIsAuthorizedToIgnoreRequiredValueValidation\n-                && !attributeValueMap.containsKey( attribute.getUid() );\n+    private Set<String> buildTeiAttributeUids( ValidationErrorReporter reporter, String trackedEntityInstanceUid )\n+    {\n+        return Optional.of( reporter )\n+            .map( ValidationErrorReporter::getValidationContext )\n+            .map( TrackerImportValidationContext::getBundle )\n+            .map( TrackerBundle::getPreheat )\n+            .map( trackerPreheat -> trackerPreheat.getTrackedEntity( TrackerIdScheme.UID, trackedEntityInstanceUid ) )\n+            .map( TrackedEntityInstance::getTrackedEntityAttributeValues )\n+            .orElse( Collections.emptySet() )\n+            .stream()\n+            .map( TrackedEntityAttributeValue::getAttribute )\n+            .map( BaseIdentifiableObject::getUid )\n+            .collect( Collectors.toSet() );\n+    }\n \n-            addErrorIf( () -> hasMissingAttribute, reporter, E1018, attribute );\n+    private boolean isNonEmpty(Attribute attribute )\n+    {\n+        return StringUtils.isNotBlank( attribute.getValue() ) && StringUtils.isNotBlank(attribute.getAttribute());\n+    }\n \n-            // Remove program attr. from enrollment attr. list\n-            attributeValueMap.remove( attribute.getUid() );\n-        }\n+    private String getOrgUnitUidFromTei( TrackerImportValidationContext context, String teiUid )\n+    {\n \n-        if ( !attributeValueMap.isEmpty() )\n+        final Optional<ReferenceTrackerEntity> reference = context.getReference( teiUid );\n+        if ( reference.isPresent() )\n         {\n-            for ( Map.Entry<String, String> entry : attributeValueMap.entrySet() )\n+            final Optional<TrackedEntity> tei = context.getBundle()\n+                .getTrackedEntity( teiUid );\n+            if ( tei.isPresent() )\n             {\n-                //Only Program attributes is allowed for enrollment\n-                addError( reporter, E1019, entry.getKey() + \"=\" + entry.getValue() );\n+                return tei.get().getOrgUnit();\n             }\n         }\n+        return null;\n     }\n }\n\\ No newline at end of file\n", "next_change": {"commit": "2db6b519d76e1d0b0390a9dc6f2f650824c543bb", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentAttributeValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentAttributeValidationHook.java\ndeleted file mode 100644\nindex 54ebfb698b..0000000000\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentAttributeValidationHook.java\n+++ /dev/null\n", "chunk": "@@ -1,215 +0,0 @@\n-package org.hisp.dhis.tracker.validation.hooks;\n-\n-/*\n- * Copyright (c) 2004-2020, University of Oslo\n- * All rights reserved.\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions are met:\n- * Redistributions of source code must retain the above copyright notice, this\n- * list of conditions and the following disclaimer.\n- *\n- * Redistributions in binary form must reproduce the above copyright notice,\n- * this list of conditions and the following disclaimer in the documentation\n- * and/or other materials provided with the distribution.\n- * Neither the name of the HISP project nor the names of its contributors may\n- * be used to endorse or promote products derived from this software without\n- * specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n- * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n- * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n- * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n- * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n- * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n- * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- */\n-\n-import static com.google.api.client.util.Preconditions.checkNotNull;\n-import static org.hisp.dhis.tracker.report.TrackerErrorCode.E1017;\n-import static org.hisp.dhis.tracker.report.TrackerErrorCode.E1018;\n-import static org.hisp.dhis.tracker.report.TrackerErrorCode.E1019;\n-import static org.hisp.dhis.tracker.report.TrackerErrorCode.E1075;\n-import static org.hisp.dhis.tracker.report.TrackerErrorCode.E1076;\n-\n-import java.util.Collections;\n-import java.util.Map;\n-import java.util.Optional;\n-import java.util.Set;\n-import java.util.stream.Collectors;\n-\n-import org.apache.commons.lang3.StringUtils;\n-import org.hisp.dhis.common.BaseIdentifiableObject;\n-import org.hisp.dhis.organisationunit.OrganisationUnit;\n-import org.hisp.dhis.program.Program;\n-import org.hisp.dhis.program.ProgramTrackedEntityAttribute;\n-import org.hisp.dhis.trackedentity.TrackedEntityAttribute;\n-import org.hisp.dhis.trackedentity.TrackedEntityAttributeService;\n-import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n-import org.hisp.dhis.trackedentityattributevalue.TrackedEntityAttributeValue;\n-import org.hisp.dhis.tracker.TrackerIdScheme;\n-import org.hisp.dhis.tracker.bundle.TrackerBundle;\n-import org.hisp.dhis.tracker.domain.Attribute;\n-import org.hisp.dhis.tracker.domain.Enrollment;\n-import org.hisp.dhis.tracker.domain.TrackedEntity;\n-import org.hisp.dhis.tracker.preheat.ReferenceTrackerEntity;\n-import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n-import org.hisp.dhis.tracker.validation.TrackerImportValidationContext;\n-import org.springframework.stereotype.Component;\n-\n-import com.google.common.collect.Maps;\n-import com.google.common.collect.Streams;\n-\n-/**\n- * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n- */\n-@Component\n-public class EnrollmentAttributeValidationHook extends AttributeValidationHook\n-{\n-\n-    public EnrollmentAttributeValidationHook( TrackedEntityAttributeService teAttrService )\n-    {\n-        super( teAttrService );\n-    }\n-\n-    @Override\n-    public void validateEnrollment( ValidationErrorReporter reporter, Enrollment enrollment )\n-    {\n-        TrackerImportValidationContext context = reporter.getValidationContext();\n-\n-        TrackedEntityInstance tei = context.getTrackedEntityInstance( enrollment.getTrackedEntity() );\n-\n-        OrganisationUnit orgUnit = context\n-            .getOrganisationUnit( getOrgUnitUidFromTei( context, enrollment.getTrackedEntity() ) );\n-\n-        Map<String, String> attributeValueMap = Maps.newHashMap();\n-\n-        for ( Attribute attribute : enrollment.getAttributes() )\n-        {\n-            validateRequiredProperties( reporter, attribute );\n-\n-            if ( attribute.getAttribute() == null || attribute.getValue() == null ||\n-                context.getTrackedEntityAttribute( attribute.getAttribute() ) == null )\n-            {\n-                continue;\n-            }\n-\n-            attributeValueMap.put( attribute.getAttribute(), attribute.getValue() );\n-\n-            TrackedEntityAttribute teAttribute = context.getTrackedEntityAttribute( attribute.getAttribute() );\n-\n-            validateAttrValueType( reporter, attribute, teAttribute );\n-\n-            validateAttributeUniqueness( reporter,\n-                attribute.getValue(),\n-                teAttribute,\n-                tei,\n-                orgUnit );\n-        }\n-\n-        Program program = context.getProgram( enrollment.getProgram() );\n-        validateMandatoryAttributes( reporter, program, enrollment );\n-    }\n-\n-    protected void validateRequiredProperties( ValidationErrorReporter reporter, Attribute attribute )\n-    {\n-        addErrorIfNull( attribute.getAttribute(), reporter, E1075, attribute );\n-        addErrorIfNull( attribute.getValue(), reporter, E1076, attribute );\n-\n-        if ( attribute.getAttribute() != null )\n-        {\n-            TrackedEntityAttribute teAttribute = reporter.getValidationContext()\n-                .getTrackedEntityAttribute( attribute.getAttribute() );\n-\n-            addErrorIfNull( teAttribute, reporter, E1017, attribute );\n-        }\n-    }\n-\n-    private void validateMandatoryAttributes( ValidationErrorReporter reporter,\n-        Program program, Enrollment enrollment )\n-    {\n-        checkNotNull( program, TrackerImporterAssertErrors.PROGRAM_CANT_BE_NULL );\n-\n-        // Build a data structures of attributes eligible for mandatory validations:\n-        // 1 - attributes from enrollments whose value is not empty or null\n-        // 2 - attributes already existing in TEI (from preheat)\n-\n-        // 1 - attributes from enrollment whose value is non-empty\n-        Map<String, String> enrollmentNonEmptyAttributeUids = Optional.of( enrollment )\n-            .map( Enrollment::getAttributes )\n-            .orElse( Collections.emptyList() )\n-            .stream()\n-            .filter( this::isNonEmpty)\n-            .collect( Collectors.toMap(\n-                Attribute::getAttribute,\n-                Attribute::getValue ) );\n-\n-        // 2 - attributes uids from existing TEI (if any) from preheat\n-        Set<String> teiAttributeUids = buildTeiAttributeUids( reporter, enrollment.getTrackedEntity() );\n-\n-        // merged uids of eligible attribute to validate\n-        Set<String> mergedAttributes = Streams\n-            .concat( enrollmentNonEmptyAttributeUids.keySet().stream(), teiAttributeUids.stream() )\n-            .collect( Collectors.toSet() );\n-\n-        // Map having as key program attribute uid and mandatory flag as value\n-        Map<String, Boolean> programAttributesMap = program.getProgramAttributes().stream()\n-            .collect( Collectors.toMap(\n-                programTrackedEntityAttribute -> programTrackedEntityAttribute.getAttribute().getUid(),\n-                ProgramTrackedEntityAttribute::isMandatory ) );\n-\n-        // Merged attributes must contain each mandatory program attribute.\n-        programAttributesMap.entrySet()\n-            .stream()\n-            .filter( Map.Entry::getValue ) // <--- filter on mandatory flag\n-            .map( Map.Entry::getKey )\n-            .forEach( mandatoryProgramAttributeUid -> addErrorIf(\n-                () -> !mergedAttributes.contains( mandatoryProgramAttributeUid ), reporter, E1018,\n-                mandatoryProgramAttributeUid ) );\n-\n-        // enrollment must not contain any attribute which is not defined in program\n-        enrollmentNonEmptyAttributeUids\n-            .forEach(\n-                ( attrUid, attrVal ) -> addErrorIf( () -> !programAttributesMap.containsKey( attrUid ), reporter, E1019,\n-                    attrUid + \"=\" + attrVal ) );\n-    }\n-\n-    private Set<String> buildTeiAttributeUids( ValidationErrorReporter reporter, String trackedEntityInstanceUid )\n-    {\n-        return Optional.of( reporter )\n-            .map( ValidationErrorReporter::getValidationContext )\n-            .map( TrackerImportValidationContext::getBundle )\n-            .map( TrackerBundle::getPreheat )\n-            .map( trackerPreheat -> trackerPreheat.getTrackedEntity( TrackerIdScheme.UID, trackedEntityInstanceUid ) )\n-            .map( TrackedEntityInstance::getTrackedEntityAttributeValues )\n-            .orElse( Collections.emptySet() )\n-            .stream()\n-            .map( TrackedEntityAttributeValue::getAttribute )\n-            .map( BaseIdentifiableObject::getUid )\n-            .collect( Collectors.toSet() );\n-    }\n-\n-    private boolean isNonEmpty(Attribute attribute )\n-    {\n-        return StringUtils.isNotBlank( attribute.getValue() ) && StringUtils.isNotBlank(attribute.getAttribute());\n-    }\n-\n-    private String getOrgUnitUidFromTei( TrackerImportValidationContext context, String teiUid )\n-    {\n-\n-        final Optional<ReferenceTrackerEntity> reference = context.getReference( teiUid );\n-        if ( reference.isPresent() )\n-        {\n-            final Optional<TrackedEntity> tei = context.getBundle()\n-                .getTrackedEntity( teiUid );\n-            if ( tei.isPresent() )\n-            {\n-                return tei.get().getOrgUnit();\n-            }\n-        }\n-        return null;\n-    }\n-}\n\\ No newline at end of file\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "message": "Merge commit", "committedDate": null}, {"oid": "3e3dc98d92f0c13fb56cf17894eab06a78842133", "committedDate": "2020-08-04 17:20:37 +0200", "message": "feat: Enrollment/Events note persistence"}, {"oid": "e1260b5e8fceb13c2883754236a34cdd652e1c1c", "committedDate": "2020-10-20 14:00:34 +0200", "message": "refactor: Load in the preheat all the data needed for uniqueness attr\u2026 (#6397)"}, {"oid": "3e3b32e56ff5554a0095396eddffceac65b6b8de", "committedDate": "2020-10-27 09:56:50 +0100", "message": "refactor: simplified calls to error reporting (#6437)"}, {"oid": "d095f2d4cf9aaac1e9aa973d4da6aa2f96104cc8", "committedDate": "2020-11-11 13:49:13 +0100", "message": "fix: allow validation to reference entities in the payload (#6617)"}, {"oid": "0bf55d776481f6511e5f9ebca5de1f2cf79777c0", "committedDate": "2020-11-19 13:55:46 +0100", "message": "refactor: New Tracker Error reporting refactor (#6706)"}, {"oid": "8c4a255176ac5e675c549db2065926fdbaf0290b", "committedDate": "2020-12-14 08:31:48 +0100", "message": "fix: Remove clearSession/clearCache inside transaction causing audit fail (#6876)"}, {"oid": "7678ab6c0c8f661a5a2974f3ee8deb1045278558", "committedDate": "2020-12-16 09:39:21 +0100", "message": "fix: enrollments attributes are validated against mandatory program attributes (DHIS2-10077) (#6854)"}, {"oid": "b45bc96224d9ab6c13fe83f5363d58c943c6e695", "committedDate": "2020-12-18 10:02:52 +0100", "message": "fix: DHIS2-10077 changed mandatory program attribute error message (#6938)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "20c87464d818f6f2d5d7334b2ef2af99d7a24e98", "committedDate": "2021-02-11 10:54:18 +0100", "message": "fix: NPE in ProgramOrgUnitSupplier in Preheat [DHIS2-10430]"}, {"oid": "c25b817a180f24b3de6b26d5a089563aa336aa8c", "committedDate": "2021-03-05 10:44:25 +0100", "message": "feat: Validation for values with option sets [DHIS2-10452] (#7512)"}, {"oid": "60fe241badad5b1463bc3991eff2927abae32644", "committedDate": "2021-04-21 13:49:15 +0200", "message": "fix: [DHIS2-10797] Fix remove null values for tracker attributes and data values 2.37 (#7880)"}, {"oid": "2ce39cbc3ddb3e5b0b3b2ef747af2cf79a67821d", "committedDate": "2021-05-12 09:20:07 +0200", "message": "fix: [DHIS2-10797] Fix remove null values for tracker attributes and data values 2.37 (#8004)"}, {"oid": "9062a6b97820374ba0cff1a63bf4a776c69d41c8", "committedDate": "2021-10-13 09:19:34 +0200", "message": "fix: Remove duplicate error messages for enrollment attributes [DHIS2-11949] (#9040)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "97fa18701761c6993e20f2e7a3816ea689129480", "committedDate": "2022-01-11 15:31:02 +0100", "message": "chore: hooks should add errors via reporter directly TECH-880 (#9523)"}, {"oid": "1d8350a9e9ac100aaaa831894ba3f857b46e2474", "committedDate": "2022-01-13 14:15:17 +0100", "message": "chore: adding errors and warnings is responsibility of the ValidationErrorReporter TECH-880 (#9616)"}, {"oid": "c039b8f75c1d965414de926f04540dfaabdd104c", "committedDate": "2022-02-23 13:08:25 +0100", "message": "chore: Clean up service program rule module [TECH-938] (#9885)"}, {"oid": "ef0cbd365e47f1f88befb80d9650cce75280bd35", "committedDate": "2022-03-08 15:12:00 +0100", "message": "chore: move DB access and mutation to preheat and preprocessor DHIS2-12623 (#9904)"}, {"oid": "0303652efe35da369ba1d2a437a4b5797a52c451", "committedDate": "2022-04-01 09:37:58 +0200", "message": "chore: tracker entities only support idScheme UID DHIS2-12563 (#10329)"}, {"oid": "66b1250699e5198a4cffb092df7c652f569b2b5a", "committedDate": "2022-05-02 12:28:01 +0200", "message": "chore: TrackedEntity.orgUnit is a MetadataIdentifier (#10608)"}, {"oid": "9ff8d0c831d8448a696a37138139a0ae5b975c86", "committedDate": "2022-05-17 13:32:06 +0200", "message": "fix: Attribute.attribute is a MetadataIdentifier DHIS2-12563 (#10782)"}, {"oid": "df4eaf29ba29ee71a727a1c072fd4bcb03bb4bc9", "committedDate": "2022-05-19 15:13:36 +0200", "message": "chore: docs, improve APIs DHIS2-12563 (#10847)"}, {"oid": "b567e74f7d703115fb7bc9802ed3b5f29d6917aa", "committedDate": "2022-05-23 09:13:55 +0200", "message": "fix: report ids or attribute value for MetadataIdentifiers DHIS2-12519 (#10873)"}, {"oid": "f7cfc83610c75486bbb0457dde057eaed777f3d2", "committedDate": "2022-05-27 15:15:25 +0200", "message": "chore: ValidationErrorReporter does not need the bunlde DHIS2-12519 (#10878)"}, {"oid": "9ee39f390105c4517d67abfb5dbb377f9fb82074", "committedDate": "2022-06-10 10:50:40 +0200", "message": "fix: Validate enrollment attributes values based on valueType in NTI [DHIS2-12669] (2.39) (#11050)"}, {"oid": "b0a861c0308005b865cafa2344c1231c0a4f2bc3", "committedDate": "2022-12-02 13:36:08 +0100", "message": "fix: turn removeOnError into skipOnError DHIS2-14213 (#12457)"}, {"oid": "7ac68b368a1dbd9362973b30f7160399abe801a0", "committedDate": "2022-12-06 09:04:47 +0100", "message": "chore: move ValidationErrorReporter close to its usage (#12486)"}, {"oid": "07ff89195ce66114c2b5a744039c2b2ce7a8f440", "committedDate": "2022-12-13 09:51:43 +0100", "message": "chore: Clean up TrackerBundle methods [TECH-14298] (#12515)"}, {"oid": "2db6b519d76e1d0b0390a9dc6f2f650824c543bb", "committedDate": "2022-12-13 13:10:13 +0100", "message": "chore: migrate enrollment validators (#12526)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg3MTY5Nw==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r429871697", "body": "Unsure, make a note of it.. we can discuss", "bodyText": "Unsure, make a note of it.. we can discuss", "bodyHTML": "<p dir=\"auto\">Unsure, make a note of it.. we can discuss</p>", "author": "mortenoh", "createdAt": "2020-05-25T10:55:00Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentDateValidationHook.java", "diffHunk": "@@ -0,0 +1,119 @@\n+package org.hisp.dhis.tracker.validation.hooks;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.tracker.TrackerImportStrategy;\n+import org.hisp.dhis.tracker.domain.Enrollment;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n+import org.hisp.dhis.tracker.validation.TrackerImportValidationContext;\n+import org.hisp.dhis.util.DateUtils;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Date;\n+import java.util.Objects;\n+\n+import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n+import static org.hisp.dhis.tracker.validation.hooks.Constants.ENROLLMENT_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.Constants.PROGRAM_CANT_BE_NULL;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+@Component\n+public class EnrollmentDateValidationHook\n+    extends AbstractTrackerDtoValidationHook\n+{\n+    @Override\n+    public int getOrder()\n+    {\n+        return 107;\n+    }\n+\n+    public EnrollmentDateValidationHook()\n+    {\n+        super( Enrollment.class, TrackerImportStrategy.CREATE_AND_UPDATE );\n+    }\n+\n+    @Override\n+    public void validateEnrollment( ValidationErrorReporter reporter, Enrollment enrollment )\n+    {\n+        TrackerImportValidationContext context = reporter.getValidationContext();\n+\n+        validateMandatoryDates( reporter, enrollment );\n+\n+        Program program = context.getProgram( enrollment.getProgram() );\n+\n+        validateEnrollmentDatesNotInFuture( reporter, program, enrollment );\n+\n+        // TODO: getIncidentDate is only mandatory if getDisplayIncidentDate TRUE?", "originalCommit": "a5f6d361402efd03ab461bcffa6bcc50be96c520", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e7e003a2211cdf3f412ce75f95ef0f6be1973434", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentDateValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentDateValidationHook.java\nindex e26e86536e..a9ae0f05fe 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentDateValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentDateValidationHook.java\n", "chunk": "@@ -73,12 +67,10 @@ public class EnrollmentDateValidationHook\n \n         validateEnrollmentDatesNotInFuture( reporter, program, enrollment );\n \n-        // TODO: getIncidentDate is only mandatory if getDisplayIncidentDate TRUE?\n-        if ( Boolean.TRUE.equals( program.getDisplayIncidentDate() )\n-            && !isValidDateStringAndNotNull( enrollment.getOccurredAt() ) )\n+        if ( Boolean.TRUE.equals( program.getDisplayIncidentDate() ) &&\n+            !isValidDateStringAndNotNull( enrollment.getOccurredAt() ) )\n         {\n-            reporter.addError( newReport( TrackerErrorCode.E1023 )\n-                .addArg( enrollment.getOccurredAt() ) );\n+            reporter.addError( newReport( TrackerErrorCode.E1023 ).addArg( enrollment.getOccurredAt() ) );\n         }\n     }\n \n", "next_change": {"commit": "3999d1c8e8d7c2bcd11c7c5d99fec179abd25e2b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentDateValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentDateValidationHook.java\nindex a9ae0f05fe..bdb040838f 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentDateValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentDateValidationHook.java\n", "chunk": "@@ -76,7 +76,7 @@ public class EnrollmentDateValidationHook\n \n     private void validateMandatoryDates( ValidationErrorReporter reporter, Enrollment enrollment )\n     {\n-        Objects.requireNonNull( enrollment, ENROLLMENT_CANT_BE_NULL );\n+        checkNotNull( enrollment, ENROLLMENT_CANT_BE_NULL );\n \n         // NOTE: getEnrollmentDate is always mandatory?\n         if ( !isValidDateStringAndNotNull( enrollment.getEnrolledAt() ) )\n", "next_change": {"commit": "ec14261db1f790e1be25e5bb27b45226087a9dd5", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentDateValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentDateValidationHook.java\nindex bdb040838f..74936917cc 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentDateValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentDateValidationHook.java\n", "chunk": "@@ -78,7 +78,6 @@ public class EnrollmentDateValidationHook\n     {\n         checkNotNull( enrollment, ENROLLMENT_CANT_BE_NULL );\n \n-        // NOTE: getEnrollmentDate is always mandatory?\n         if ( !isValidDateStringAndNotNull( enrollment.getEnrolledAt() ) )\n         {\n             reporter.addError( newReport( TrackerErrorCode.E1025 )\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentDateValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentDateValidationHook.java\nindex e26e86536e..edb03c1600 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentDateValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentDateValidationHook.java\n", "chunk": "@@ -73,20 +70,17 @@ public class EnrollmentDateValidationHook\n \n         validateEnrollmentDatesNotInFuture( reporter, program, enrollment );\n \n-        // TODO: getIncidentDate is only mandatory if getDisplayIncidentDate TRUE?\n-        if ( Boolean.TRUE.equals( program.getDisplayIncidentDate() )\n-            && !isValidDateStringAndNotNull( enrollment.getOccurredAt() ) )\n+        if ( Boolean.TRUE.equals( program.getDisplayIncidentDate() ) &&\n+            !isValidDateStringAndNotNull( enrollment.getOccurredAt() ) )\n         {\n-            reporter.addError( newReport( TrackerErrorCode.E1023 )\n-                .addArg( enrollment.getOccurredAt() ) );\n+            reporter.addError( newReport( TrackerErrorCode.E1023 ).addArg( enrollment.getOccurredAt() ) );\n         }\n     }\n \n     private void validateMandatoryDates( ValidationErrorReporter reporter, Enrollment enrollment )\n     {\n-        Objects.requireNonNull( enrollment, ENROLLMENT_CANT_BE_NULL );\n+        checkNotNull( enrollment, ENROLLMENT_CANT_BE_NULL );\n \n-        // NOTE: getEnrollmentDate is always mandatory?\n         if ( !isValidDateStringAndNotNull( enrollment.getEnrolledAt() ) )\n         {\n             reporter.addError( newReport( TrackerErrorCode.E1025 )\n", "next_change": {"commit": "3e3b32e56ff5554a0095396eddffceac65b6b8de", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentDateValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentDateValidationHook.java\nindex edb03c1600..82ab8bb806 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentDateValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentDateValidationHook.java\n", "chunk": "@@ -83,8 +83,7 @@ public class EnrollmentDateValidationHook\n \n         if ( !isValidDateStringAndNotNull( enrollment.getEnrolledAt() ) )\n         {\n-            reporter.addError( newReport( TrackerErrorCode.E1025 )\n-                .addArg( enrollment.getEnrolledAt() ) );\n+            addError( reporter, E1025, enrollment.getEnrolledAt() );\n         }\n     }\n \n", "next_change": {"commit": "6e8f0d6c150b303d780b397f7646ff3383f16250", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentDateValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentDateValidationHook.java\nindex 82ab8bb806..9a71974c39 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentDateValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentDateValidationHook.java\n", "chunk": "@@ -81,7 +74,7 @@ public class EnrollmentDateValidationHook\n     {\n         checkNotNull( enrollment, ENROLLMENT_CANT_BE_NULL );\n \n-        if ( !isValidDateStringAndNotNull( enrollment.getEnrolledAt() ) )\n+        if ( Objects.isNull( enrollment.getEnrolledAt() ) )\n         {\n             addError( reporter, E1025, enrollment.getEnrolledAt() );\n         }\n", "next_change": {"commit": "97fa18701761c6993e20f2e7a3816ea689129480", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentDateValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentDateValidationHook.java\nindex 9a71974c39..cfd7f00320 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentDateValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentDateValidationHook.java\n", "chunk": "@@ -76,7 +76,7 @@ public class EnrollmentDateValidationHook\n \n         if ( Objects.isNull( enrollment.getEnrolledAt() ) )\n         {\n-            addError( reporter, E1025, enrollment.getEnrolledAt() );\n+            addError( reporter, enrollment, E1025, enrollment.getEnrolledAt() );\n         }\n     }\n \n", "next_change": {"commit": "1d8350a9e9ac100aaaa831894ba3f857b46e2474", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentDateValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentDateValidationHook.java\nindex cfd7f00320..24db2319e6 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentDateValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentDateValidationHook.java\n", "chunk": "@@ -76,7 +76,7 @@ public class EnrollmentDateValidationHook\n \n         if ( Objects.isNull( enrollment.getEnrolledAt() ) )\n         {\n-            addError( reporter, enrollment, E1025, enrollment.getEnrolledAt() );\n+            reporter.addError( enrollment, E1025, enrollment.getEnrolledAt() );\n         }\n     }\n \n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "message": "Merge commit", "committedDate": null}, {"oid": "3e3dc98d92f0c13fb56cf17894eab06a78842133", "committedDate": "2020-08-04 17:20:37 +0200", "message": "feat: Enrollment/Events note persistence"}, {"oid": "3e3b32e56ff5554a0095396eddffceac65b6b8de", "committedDate": "2020-10-27 09:56:50 +0100", "message": "refactor: simplified calls to error reporting (#6437)"}, {"oid": "0bf55d776481f6511e5f9ebca5de1f2cf79777c0", "committedDate": "2020-11-19 13:55:46 +0100", "message": "refactor: New Tracker Error reporting refactor (#6706)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "6e8f0d6c150b303d780b397f7646ff3383f16250", "committedDate": "2021-01-21 09:32:50 +0100", "message": "feat: new tracked dto's properties referring to a date, now use Instant instead of String [DHIS2-101239] (#7119)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "ebe6e65fe7a84fcd1753665542e5047d12bd33d5", "committedDate": "2021-10-13 11:06:22 +0200", "message": "fix: NTI: time should be ignored when validating enrollment date DHIS2-11973 (#9039)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "97fa18701761c6993e20f2e7a3816ea689129480", "committedDate": "2022-01-11 15:31:02 +0100", "message": "chore: hooks should add errors via reporter directly TECH-880 (#9523)"}, {"oid": "1d8350a9e9ac100aaaa831894ba3f857b46e2474", "committedDate": "2022-01-13 14:15:17 +0100", "message": "chore: adding errors and warnings is responsibility of the ValidationErrorReporter TECH-880 (#9616)"}, {"oid": "c039b8f75c1d965414de926f04540dfaabdd104c", "committedDate": "2022-02-23 13:08:25 +0100", "message": "chore: Clean up service program rule module [TECH-938] (#9885)"}, {"oid": "ef0cbd365e47f1f88befb80d9650cce75280bd35", "committedDate": "2022-03-08 15:12:00 +0100", "message": "chore: move DB access and mutation to preheat and preprocessor DHIS2-12623 (#9904)"}, {"oid": "f7cfc83610c75486bbb0457dde057eaed777f3d2", "committedDate": "2022-05-27 15:15:25 +0200", "message": "chore: ValidationErrorReporter does not need the bunlde DHIS2-12519 (#10878)"}, {"oid": "b0a861c0308005b865cafa2344c1231c0a4f2bc3", "committedDate": "2022-12-02 13:36:08 +0100", "message": "fix: turn removeOnError into skipOnError DHIS2-14213 (#12457)"}, {"oid": "7ac68b368a1dbd9362973b30f7160399abe801a0", "committedDate": "2022-12-06 09:04:47 +0100", "message": "chore: move ValidationErrorReporter close to its usage (#12486)"}, {"oid": "2db6b519d76e1d0b0390a9dc6f2f650824c543bb", "committedDate": "2022-12-13 13:10:13 +0100", "message": "chore: migrate enrollment validators (#12526)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg3MTg5Nw==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r429871897", "body": "Unsure, make a note of it.. and we can discuss", "bodyText": "Unsure, make a note of it.. and we can discuss", "bodyHTML": "<p dir=\"auto\">Unsure, make a note of it.. and we can discuss</p>", "author": "mortenoh", "createdAt": "2020-05-25T10:55:32Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentDateValidationHook.java", "diffHunk": "@@ -0,0 +1,119 @@\n+package org.hisp.dhis.tracker.validation.hooks;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.tracker.TrackerImportStrategy;\n+import org.hisp.dhis.tracker.domain.Enrollment;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n+import org.hisp.dhis.tracker.validation.TrackerImportValidationContext;\n+import org.hisp.dhis.util.DateUtils;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Date;\n+import java.util.Objects;\n+\n+import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n+import static org.hisp.dhis.tracker.validation.hooks.Constants.ENROLLMENT_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.Constants.PROGRAM_CANT_BE_NULL;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+@Component\n+public class EnrollmentDateValidationHook\n+    extends AbstractTrackerDtoValidationHook\n+{\n+    @Override\n+    public int getOrder()\n+    {\n+        return 107;\n+    }\n+\n+    public EnrollmentDateValidationHook()\n+    {\n+        super( Enrollment.class, TrackerImportStrategy.CREATE_AND_UPDATE );\n+    }\n+\n+    @Override\n+    public void validateEnrollment( ValidationErrorReporter reporter, Enrollment enrollment )\n+    {\n+        TrackerImportValidationContext context = reporter.getValidationContext();\n+\n+        validateMandatoryDates( reporter, enrollment );\n+\n+        Program program = context.getProgram( enrollment.getProgram() );\n+\n+        validateEnrollmentDatesNotInFuture( reporter, program, enrollment );\n+\n+        // TODO: getIncidentDate is only mandatory if getDisplayIncidentDate TRUE?\n+        if ( Boolean.TRUE.equals( program.getDisplayIncidentDate() )\n+            && !isValidDateStringAndNotNull( enrollment.getOccurredAt() ) )\n+        {\n+            reporter.addError( newReport( TrackerErrorCode.E1023 )\n+                .addArg( enrollment.getOccurredAt() ) );\n+        }\n+    }\n+\n+    private void validateMandatoryDates( ValidationErrorReporter reporter, Enrollment enrollment )\n+    {\n+        Objects.requireNonNull( enrollment, ENROLLMENT_CANT_BE_NULL );\n+\n+        // NOTE: getEnrollmentDate is always mandatory?", "originalCommit": "a5f6d361402efd03ab461bcffa6bcc50be96c520", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMwNDkxOQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r448304919", "bodyText": "Its not possible to enroll without a date from the tracker at least. Perhaps we just remove this question and update the docs that this is mandatory period.", "author": "Bekkalizer", "createdAt": "2020-07-01T11:41:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg3MTg5Nw=="}], "type": "inlineReview", "revised_code": {"commit": "e7e003a2211cdf3f412ce75f95ef0f6be1973434", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentDateValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentDateValidationHook.java\nindex e26e86536e..a9ae0f05fe 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentDateValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentDateValidationHook.java\n", "chunk": "@@ -73,12 +67,10 @@ public class EnrollmentDateValidationHook\n \n         validateEnrollmentDatesNotInFuture( reporter, program, enrollment );\n \n-        // TODO: getIncidentDate is only mandatory if getDisplayIncidentDate TRUE?\n-        if ( Boolean.TRUE.equals( program.getDisplayIncidentDate() )\n-            && !isValidDateStringAndNotNull( enrollment.getOccurredAt() ) )\n+        if ( Boolean.TRUE.equals( program.getDisplayIncidentDate() ) &&\n+            !isValidDateStringAndNotNull( enrollment.getOccurredAt() ) )\n         {\n-            reporter.addError( newReport( TrackerErrorCode.E1023 )\n-                .addArg( enrollment.getOccurredAt() ) );\n+            reporter.addError( newReport( TrackerErrorCode.E1023 ).addArg( enrollment.getOccurredAt() ) );\n         }\n     }\n \n", "next_change": {"commit": "3999d1c8e8d7c2bcd11c7c5d99fec179abd25e2b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentDateValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentDateValidationHook.java\nindex a9ae0f05fe..bdb040838f 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentDateValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentDateValidationHook.java\n", "chunk": "@@ -76,7 +76,7 @@ public class EnrollmentDateValidationHook\n \n     private void validateMandatoryDates( ValidationErrorReporter reporter, Enrollment enrollment )\n     {\n-        Objects.requireNonNull( enrollment, ENROLLMENT_CANT_BE_NULL );\n+        checkNotNull( enrollment, ENROLLMENT_CANT_BE_NULL );\n \n         // NOTE: getEnrollmentDate is always mandatory?\n         if ( !isValidDateStringAndNotNull( enrollment.getEnrolledAt() ) )\n", "next_change": {"commit": "ec14261db1f790e1be25e5bb27b45226087a9dd5", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentDateValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentDateValidationHook.java\nindex bdb040838f..74936917cc 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentDateValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentDateValidationHook.java\n", "chunk": "@@ -78,7 +78,6 @@ public class EnrollmentDateValidationHook\n     {\n         checkNotNull( enrollment, ENROLLMENT_CANT_BE_NULL );\n \n-        // NOTE: getEnrollmentDate is always mandatory?\n         if ( !isValidDateStringAndNotNull( enrollment.getEnrolledAt() ) )\n         {\n             reporter.addError( newReport( TrackerErrorCode.E1025 )\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentDateValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentDateValidationHook.java\nindex e26e86536e..edb03c1600 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentDateValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentDateValidationHook.java\n", "chunk": "@@ -73,20 +70,17 @@ public class EnrollmentDateValidationHook\n \n         validateEnrollmentDatesNotInFuture( reporter, program, enrollment );\n \n-        // TODO: getIncidentDate is only mandatory if getDisplayIncidentDate TRUE?\n-        if ( Boolean.TRUE.equals( program.getDisplayIncidentDate() )\n-            && !isValidDateStringAndNotNull( enrollment.getOccurredAt() ) )\n+        if ( Boolean.TRUE.equals( program.getDisplayIncidentDate() ) &&\n+            !isValidDateStringAndNotNull( enrollment.getOccurredAt() ) )\n         {\n-            reporter.addError( newReport( TrackerErrorCode.E1023 )\n-                .addArg( enrollment.getOccurredAt() ) );\n+            reporter.addError( newReport( TrackerErrorCode.E1023 ).addArg( enrollment.getOccurredAt() ) );\n         }\n     }\n \n     private void validateMandatoryDates( ValidationErrorReporter reporter, Enrollment enrollment )\n     {\n-        Objects.requireNonNull( enrollment, ENROLLMENT_CANT_BE_NULL );\n+        checkNotNull( enrollment, ENROLLMENT_CANT_BE_NULL );\n \n-        // NOTE: getEnrollmentDate is always mandatory?\n         if ( !isValidDateStringAndNotNull( enrollment.getEnrolledAt() ) )\n         {\n             reporter.addError( newReport( TrackerErrorCode.E1025 )\n", "next_change": {"commit": "3e3b32e56ff5554a0095396eddffceac65b6b8de", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentDateValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentDateValidationHook.java\nindex edb03c1600..82ab8bb806 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentDateValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentDateValidationHook.java\n", "chunk": "@@ -83,8 +83,7 @@ public class EnrollmentDateValidationHook\n \n         if ( !isValidDateStringAndNotNull( enrollment.getEnrolledAt() ) )\n         {\n-            reporter.addError( newReport( TrackerErrorCode.E1025 )\n-                .addArg( enrollment.getEnrolledAt() ) );\n+            addError( reporter, E1025, enrollment.getEnrolledAt() );\n         }\n     }\n \n", "next_change": {"commit": "6e8f0d6c150b303d780b397f7646ff3383f16250", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentDateValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentDateValidationHook.java\nindex 82ab8bb806..9a71974c39 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentDateValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentDateValidationHook.java\n", "chunk": "@@ -81,7 +74,7 @@ public class EnrollmentDateValidationHook\n     {\n         checkNotNull( enrollment, ENROLLMENT_CANT_BE_NULL );\n \n-        if ( !isValidDateStringAndNotNull( enrollment.getEnrolledAt() ) )\n+        if ( Objects.isNull( enrollment.getEnrolledAt() ) )\n         {\n             addError( reporter, E1025, enrollment.getEnrolledAt() );\n         }\n", "next_change": {"commit": "97fa18701761c6993e20f2e7a3816ea689129480", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentDateValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentDateValidationHook.java\nindex 9a71974c39..cfd7f00320 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentDateValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentDateValidationHook.java\n", "chunk": "@@ -76,7 +76,7 @@ public class EnrollmentDateValidationHook\n \n         if ( Objects.isNull( enrollment.getEnrolledAt() ) )\n         {\n-            addError( reporter, E1025, enrollment.getEnrolledAt() );\n+            addError( reporter, enrollment, E1025, enrollment.getEnrolledAt() );\n         }\n     }\n \n", "next_change": {"commit": "1d8350a9e9ac100aaaa831894ba3f857b46e2474", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentDateValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentDateValidationHook.java\nindex cfd7f00320..24db2319e6 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentDateValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentDateValidationHook.java\n", "chunk": "@@ -76,7 +76,7 @@ public class EnrollmentDateValidationHook\n \n         if ( Objects.isNull( enrollment.getEnrolledAt() ) )\n         {\n-            addError( reporter, enrollment, E1025, enrollment.getEnrolledAt() );\n+            reporter.addError( enrollment, E1025, enrollment.getEnrolledAt() );\n         }\n     }\n \n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "message": "Merge commit", "committedDate": null}, {"oid": "3e3dc98d92f0c13fb56cf17894eab06a78842133", "committedDate": "2020-08-04 17:20:37 +0200", "message": "feat: Enrollment/Events note persistence"}, {"oid": "3e3b32e56ff5554a0095396eddffceac65b6b8de", "committedDate": "2020-10-27 09:56:50 +0100", "message": "refactor: simplified calls to error reporting (#6437)"}, {"oid": "0bf55d776481f6511e5f9ebca5de1f2cf79777c0", "committedDate": "2020-11-19 13:55:46 +0100", "message": "refactor: New Tracker Error reporting refactor (#6706)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "6e8f0d6c150b303d780b397f7646ff3383f16250", "committedDate": "2021-01-21 09:32:50 +0100", "message": "feat: new tracked dto's properties referring to a date, now use Instant instead of String [DHIS2-101239] (#7119)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "ebe6e65fe7a84fcd1753665542e5047d12bd33d5", "committedDate": "2021-10-13 11:06:22 +0200", "message": "fix: NTI: time should be ignored when validating enrollment date DHIS2-11973 (#9039)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "97fa18701761c6993e20f2e7a3816ea689129480", "committedDate": "2022-01-11 15:31:02 +0100", "message": "chore: hooks should add errors via reporter directly TECH-880 (#9523)"}, {"oid": "1d8350a9e9ac100aaaa831894ba3f857b46e2474", "committedDate": "2022-01-13 14:15:17 +0100", "message": "chore: adding errors and warnings is responsibility of the ValidationErrorReporter TECH-880 (#9616)"}, {"oid": "c039b8f75c1d965414de926f04540dfaabdd104c", "committedDate": "2022-02-23 13:08:25 +0100", "message": "chore: Clean up service program rule module [TECH-938] (#9885)"}, {"oid": "ef0cbd365e47f1f88befb80d9650cce75280bd35", "committedDate": "2022-03-08 15:12:00 +0100", "message": "chore: move DB access and mutation to preheat and preprocessor DHIS2-12623 (#9904)"}, {"oid": "f7cfc83610c75486bbb0457dde057eaed777f3d2", "committedDate": "2022-05-27 15:15:25 +0200", "message": "chore: ValidationErrorReporter does not need the bunlde DHIS2-12519 (#10878)"}, {"oid": "b0a861c0308005b865cafa2344c1231c0a4f2bc3", "committedDate": "2022-12-02 13:36:08 +0100", "message": "fix: turn removeOnError into skipOnError DHIS2-14213 (#12457)"}, {"oid": "7ac68b368a1dbd9362973b30f7160399abe801a0", "committedDate": "2022-12-06 09:04:47 +0100", "message": "chore: move ValidationErrorReporter close to its usage (#12486)"}, {"oid": "2db6b519d76e1d0b0390a9dc6f2f650824c543bb", "committedDate": "2022-12-13 13:10:13 +0100", "message": "chore: migrate enrollment validators (#12526)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg4MjM4MA==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r429882380", "body": "How does this scale? could potentially be very slow if lots of notes per patient?", "bodyText": "How does this scale? could potentially be very slow if lots of notes per patient?", "bodyHTML": "<p dir=\"auto\">How does this scale? could potentially be very slow if lots of notes per patient?</p>", "author": "mortenoh", "createdAt": "2020-05-25T11:23:36Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentInExistingValidationHook.java", "diffHunk": "@@ -0,0 +1,260 @@\n+package org.hisp.dhis.tracker.validation.hooks;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.hisp.dhis.common.OrganisationUnitSelectionMode;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.program.ProgramInstance;\n+import org.hisp.dhis.program.ProgramInstanceQueryParams;\n+import org.hisp.dhis.program.ProgramInstanceService;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+import org.hisp.dhis.trackedentity.TrackerOwnershipManager;\n+import org.hisp.dhis.trackedentitycomment.TrackedEntityComment;\n+import org.hisp.dhis.tracker.TrackerImportStrategy;\n+import org.hisp.dhis.tracker.domain.Enrollment;\n+import org.hisp.dhis.tracker.domain.EnrollmentStatus;\n+import org.hisp.dhis.tracker.domain.Note;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n+import org.hisp.dhis.tracker.validation.TrackerImportValidationContext;\n+import org.hisp.dhis.tracker.validation.service.TrackerImportAccessManager;\n+import org.hisp.dhis.user.User;\n+import org.hisp.dhis.util.DateUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n+import static org.hisp.dhis.tracker.validation.hooks.Constants.PROGRAM_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.Constants.PROGRAM_INSTANCE_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.Constants.TRACKED_ENTITY_INSTANCE_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.Constants.USER_CANT_BE_NULL;\n+import static org.hisp.dhis.util.DateUtils.getIso8601;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+@Component\n+public class EnrollmentInExistingValidationHook\n+    extends AbstractTrackerDtoValidationHook\n+{\n+    @Autowired\n+    protected TrackerOwnershipManager trackerOwnershipManager;\n+\n+    @Autowired\n+    protected ProgramInstanceService programInstanceService;\n+\n+    @Autowired\n+    private TrackerImportAccessManager trackerImportAccessManager;\n+\n+    @Override\n+    public int getOrder()\n+    {\n+        return 104;\n+    }\n+\n+    public EnrollmentInExistingValidationHook()\n+    {\n+        super( Enrollment.class, TrackerImportStrategy.CREATE_AND_UPDATE );\n+    }\n+\n+    @Override\n+    public void validateEnrollment( ValidationErrorReporter reporter, Enrollment enrollment )\n+    {\n+        TrackerImportValidationContext validationContext = reporter.getValidationContext();\n+\n+        // TODO: check existing on update...\n+        if ( EnrollmentStatus.CANCELLED == enrollment.getStatus() )\n+        {\n+            return;\n+        }\n+\n+        Program program = validationContext.getProgram( enrollment.getProgram() );\n+\n+        if ( (EnrollmentStatus.COMPLETED == enrollment.getStatus()\n+            && Boolean.FALSE.equals( program.getOnlyEnrollOnce() )) )\n+        {\n+            return;\n+        }\n+\n+        validateTeiNotEnrolledAlready( reporter, enrollment, program );\n+    }\n+\n+    protected void validateTeiNotEnrolledAlready( ValidationErrorReporter reporter,\n+        Enrollment enrollment, Program program )\n+    {\n+        User actingUser = reporter.getValidationContext().getBundle().getUser();\n+\n+        Objects.requireNonNull( actingUser, USER_CANT_BE_NULL );\n+        Objects.requireNonNull( program, PROGRAM_CANT_BE_NULL );\n+        Objects.requireNonNull( enrollment.getTrackedEntity(), TRACKED_ENTITY_INSTANCE_CANT_BE_NULL );\n+\n+        TrackedEntityInstance tei = reporter.getValidationContext()\n+            .getTrackedEntityInstance( enrollment.getTrackedEntity() );\n+\n+        // TODO:  create a dedicated sql query....?\n+        Set<Enrollment> activeAndCompleted = getAllEnrollments( reporter, actingUser, program, tei )\n+            .stream()\n+            .filter( e -> EnrollmentStatus.ACTIVE == e.getStatus() || EnrollmentStatus.COMPLETED == e.getStatus() )\n+            .collect( Collectors.toSet() );\n+\n+        if ( EnrollmentStatus.ACTIVE == enrollment.getStatus() )\n+        {\n+            Set<Enrollment> activeOnly = activeAndCompleted.stream()\n+                .filter( e -> EnrollmentStatus.ACTIVE == e.getStatus() )\n+                .collect( Collectors.toSet() );\n+\n+            if ( !activeOnly.isEmpty() )\n+            {\n+                // TODO: How do we do this check on an import set, this only checks when the DB already contains it\n+                //Error: TrackedEntityInstance already has an active enrollment in another program...\n+                reporter.addError( newReport( TrackerErrorCode.E1015 )\n+                    .addArg( tei )\n+                    .addArg( program ) );\n+            }\n+        }\n+\n+        // Enrollment(\u00b64.b.ii) - The error of enrolling more than once is possible only if the imported enrollment\n+        // has a state other than CANCELLED... i.e. ACTIVE OR COMPLETED!\n+        if ( Boolean.TRUE.equals( program.getOnlyEnrollOnce() ) && !activeAndCompleted.isEmpty() )\n+        {\n+            reporter.addError( newReport( TrackerErrorCode.E1016 )\n+                .addArg( tei )\n+                .addArg( program ) );\n+        }\n+    }\n+\n+    public List<Enrollment> getAllEnrollments( ValidationErrorReporter reporter, User actingUser,\n+        Program program, TrackedEntityInstance trackedEntityInstance )\n+    {\n+        Objects.requireNonNull( actingUser, USER_CANT_BE_NULL );\n+        Objects.requireNonNull( program, PROGRAM_CANT_BE_NULL );\n+        Objects.requireNonNull( trackedEntityInstance, TRACKED_ENTITY_INSTANCE_CANT_BE_NULL );\n+\n+        ProgramInstanceQueryParams params = new ProgramInstanceQueryParams();\n+        params.setOrganisationUnitMode( OrganisationUnitSelectionMode.ALL );\n+        params.setSkipPaging( true );\n+        params.setProgram( program );\n+        params.setTrackedEntityInstance( trackedEntityInstance );\n+        List<ProgramInstance> programInstances = programInstanceService.getProgramInstances( params );\n+\n+        List<Enrollment> all = new ArrayList<>();\n+\n+        for ( ProgramInstance programInstance : programInstances )\n+        {\n+            // TODO: Move to ownership/security pre check hook if possible?\n+            if ( trackerOwnershipManager\n+                .hasAccess( actingUser, programInstance.getEntityInstance(), programInstance.getProgram() ) )\n+            {\n+                // Always create a fork of the reporter when used for checking/counting errors,\n+                // this is needed for thread safety in parallel mode.\n+                ValidationErrorReporter reporterFork = reporter.fork();\n+\n+                trackerImportAccessManager.checkReadEnrollmentAccess( reporterFork, actingUser, programInstance );\n+\n+                if ( reporterFork.hasErrors() )\n+                {\n+                    reporter.merge( reporterFork );\n+                }\n+                else\n+                {\n+                    all.add( getEnrollmentFromProgramInstance( programInstance ) );\n+                }\n+            }\n+        }\n+\n+        return all;\n+    }\n+\n+    public Enrollment getEnrollmentFromProgramInstance( ProgramInstance programInstance )\n+    {\n+        Objects.requireNonNull( programInstance, PROGRAM_INSTANCE_CANT_BE_NULL );\n+\n+        Enrollment enrollment = new Enrollment();\n+        enrollment.setEnrollment( programInstance.getUid() );\n+\n+        if ( programInstance.getEntityInstance() != null )\n+        {\n+            enrollment.setTrackedEntityType( programInstance.getEntityInstance().getTrackedEntityType().getUid() );\n+            enrollment.setTrackedEntity( programInstance.getEntityInstance().getUid() );\n+        }\n+\n+        if ( programInstance.getOrganisationUnit() != null )\n+        {\n+            enrollment.setOrgUnit( programInstance.getOrganisationUnit().getUid() );\n+//            enrollment.setOrgUnitName( programInstance.getOrganisationUnit().getName() );\n+        }\n+\n+        if ( programInstance.getGeometry() != null )\n+        {\n+            enrollment.setGeometry( programInstance.getGeometry() );\n+\n+//            if ( programInstance.getProgram().getFeatureType() == FeatureType.POINT )\n+//            {\n+//                com.vividsolutions.jts.geom.Coordinate co = programInstance.getGeometry().getCoordinate();\n+//                enrollment.setCoordinate( new Coordinate( co.x, co.y ) );\n+//            }\n+        }\n+\n+        enrollment.setCreatedAt( DateUtils.getIso8601NoTz( programInstance.getCreated() ) );\n+//        enrollment.setCreatedAtClient( DateUtils.getIso8601NoTz( programInstance.getCreatedAtClient() ) );\n+        enrollment.setUpdatedAt( DateUtils.getIso8601NoTz( programInstance.getLastUpdated() ) );\n+//        enrollment.setLastUpdatedAtClient( DateUtils.getIso8601NoTz( programInstance.getLastUpdatedAtClient() ) );\n+        enrollment.setProgram( programInstance.getProgram().getUid() );\n+        enrollment.setStatus( EnrollmentStatus.fromProgramStatus( programInstance.getStatus() ) );\n+        enrollment.setEnrolledAt( getIso8601( programInstance.getEnrollmentDate() ) );\n+        enrollment.setOccurredAt( getIso8601( programInstance.getIncidentDate() ) );\n+        enrollment.setFollowUp( programInstance.getFollowup() );\n+        enrollment.setCreatedAt( getIso8601( programInstance.getEndDate() ) );\n+        enrollment.setCompletedBy( programInstance.getCompletedBy() );\n+        enrollment.setStoredBy( programInstance.getStoredBy() );\n+        enrollment.setDeleted( programInstance.isDeleted() );\n+\n+        List<TrackedEntityComment> comments = programInstance.getComments();", "originalCommit": "a59d4b4c1f3b0aa2ee51ac1bab3b372412ab878e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI1NTI2Mg==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r448255262", "bodyText": "Do we actually need all this information for validating? It seems we are just counting the number of active enrollments in a program for a TEI?", "author": "stian-sandvold", "createdAt": "2020-07-01T10:00:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg4MjM4MA=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "8192aa1d2567bc36dbc259a2f61bf9b7609b7b53", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentInExistingValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentInExistingValidationHook.java\nindex 8a2873d7ae..b428dd8059 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentInExistingValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentInExistingValidationHook.java\n", "chunk": "@@ -199,62 +188,33 @@ public class EnrollmentInExistingValidationHook\n \n     public Enrollment getEnrollmentFromProgramInstance( ProgramInstance programInstance )\n     {\n-        Objects.requireNonNull( programInstance, PROGRAM_INSTANCE_CANT_BE_NULL );\n+        checkNotNull( programInstance, PROGRAM_INSTANCE_CANT_BE_NULL );\n \n         Enrollment enrollment = new Enrollment();\n         enrollment.setEnrollment( programInstance.getUid() );\n \n-        if ( programInstance.getEntityInstance() != null )\n-        {\n-            enrollment.setTrackedEntityType( programInstance.getEntityInstance().getTrackedEntityType().getUid() );\n-            enrollment.setTrackedEntity( programInstance.getEntityInstance().getUid() );\n-        }\n-\n-        if ( programInstance.getOrganisationUnit() != null )\n-        {\n-            enrollment.setOrgUnit( programInstance.getOrganisationUnit().getUid() );\n-//            enrollment.setOrgUnitName( programInstance.getOrganisationUnit().getName() );\n-        }\n-\n-        if ( programInstance.getGeometry() != null )\n-        {\n-            enrollment.setGeometry( programInstance.getGeometry() );\n-\n-//            if ( programInstance.getProgram().getFeatureType() == FeatureType.POINT )\n-//            {\n-//                com.vividsolutions.jts.geom.Coordinate co = programInstance.getGeometry().getCoordinate();\n-//                enrollment.setCoordinate( new Coordinate( co.x, co.y ) );\n-//            }\n-        }\n-\n-        enrollment.setCreatedAt( DateUtils.getIso8601NoTz( programInstance.getCreated() ) );\n-//        enrollment.setCreatedAtClient( DateUtils.getIso8601NoTz( programInstance.getCreatedAtClient() ) );\n-        enrollment.setUpdatedAt( DateUtils.getIso8601NoTz( programInstance.getLastUpdated() ) );\n-//        enrollment.setLastUpdatedAtClient( DateUtils.getIso8601NoTz( programInstance.getLastUpdatedAtClient() ) );\n-        enrollment.setProgram( programInstance.getProgram().getUid() );\n         enrollment.setStatus( EnrollmentStatus.fromProgramStatus( programInstance.getStatus() ) );\n-        enrollment.setEnrolledAt( getIso8601( programInstance.getEnrollmentDate() ) );\n-        enrollment.setOccurredAt( getIso8601( programInstance.getIncidentDate() ) );\n-        enrollment.setFollowUp( programInstance.getFollowup() );\n-        enrollment.setCreatedAt( getIso8601( programInstance.getEndDate() ) );\n-        enrollment.setCompletedBy( programInstance.getCompletedBy() );\n-        enrollment.setStoredBy( programInstance.getStoredBy() );\n-        enrollment.setDeleted( programInstance.isDeleted() );\n+        return enrollment;\n+    }\n \n-        List<TrackedEntityComment> comments = programInstance.getComments();\n+    /**\n+     * Get a {@link TrackedEntityInstance} from the pre-heat or from the reference\n+     * tree.\n+     *\n+     * @param reporter the {@link ValidationErrorReporter} object\n+     * @param uid the UID of a {@link TrackedEntityInstance} object\n+     * @return a TrackedEntityInstance\n+     */\n+    public TrackedEntityInstance getTrackedEntityInstance( ValidationErrorReporter reporter, String uid )\n+    {\n+        TrackedEntityInstance tei = reporter.getValidationContext().getTrackedEntityInstance( uid );\n \n-        for ( TrackedEntityComment comment : comments )\n+        if ( tei == null && reporter.getValidationContext().getReference( uid ).isPresent() )\n         {\n-            Note note = new Note();\n-\n-            note.setNote( comment.getUid() );\n-            note.setValue( comment.getCommentText() );\n-            note.setStoredBy( comment.getCreator() );\n-            note.setStoredAt( DateUtils.getIso8601NoTz( comment.getCreated() ) );\n+            tei = new TrackedEntityInstance();\n+            tei.setUid( uid );\n \n-            enrollment.getNotes().add( note );\n         }\n-\n-        return enrollment;\n+        return tei;\n     }\n }\n\\ No newline at end of file\n", "next_change": {"commit": "2db6b519d76e1d0b0390a9dc6f2f650824c543bb", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentInExistingValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentInExistingValidationHook.java\ndeleted file mode 100644\nindex b428dd8059..0000000000\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentInExistingValidationHook.java\n+++ /dev/null\n", "chunk": "@@ -1,220 +0,0 @@\n-package org.hisp.dhis.tracker.validation.hooks;\n-\n-/*\n- * Copyright (c) 2004-2020, University of Oslo\n- * All rights reserved.\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions are met:\n- * Redistributions of source code must retain the above copyright notice, this\n- * list of conditions and the following disclaimer.\n- *\n- * Redistributions in binary form must reproduce the above copyright notice,\n- * this list of conditions and the following disclaimer in the documentation\n- * and/or other materials provided with the distribution.\n- * Neither the name of the HISP project nor the names of its contributors may\n- * be used to endorse or promote products derived from this software without\n- * specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n- * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n- * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n- * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n- * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n- * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n- * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- */\n-\n-import static com.google.api.client.util.Preconditions.checkNotNull;\n-import static org.hisp.dhis.tracker.report.TrackerErrorCode.E1015;\n-import static org.hisp.dhis.tracker.report.TrackerErrorCode.E1016;\n-import static org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors.PROGRAM_CANT_BE_NULL;\n-import static org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors.PROGRAM_INSTANCE_CANT_BE_NULL;\n-import static org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors.TRACKED_ENTITY_INSTANCE_CANT_BE_NULL;\n-import static org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors.USER_CANT_BE_NULL;\n-import static org.hisp.dhis.util.DateUtils.getIso8601;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.Set;\n-import java.util.stream.Collectors;\n-\n-import org.hisp.dhis.common.OrganisationUnitSelectionMode;\n-import org.hisp.dhis.program.Program;\n-import org.hisp.dhis.program.ProgramInstance;\n-import org.hisp.dhis.program.ProgramInstanceQueryParams;\n-import org.hisp.dhis.program.ProgramInstanceService;\n-import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n-import org.hisp.dhis.trackedentity.TrackerOwnershipManager;\n-import org.hisp.dhis.trackedentitycomment.TrackedEntityComment;\n-import org.hisp.dhis.tracker.domain.Enrollment;\n-import org.hisp.dhis.tracker.domain.EnrollmentStatus;\n-import org.hisp.dhis.tracker.domain.Note;\n-import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n-import org.hisp.dhis.tracker.validation.TrackerImportValidationContext;\n-import org.hisp.dhis.tracker.validation.service.TrackerImportAccessManager;\n-import org.hisp.dhis.user.User;\n-import org.hisp.dhis.util.DateUtils;\n-import org.springframework.stereotype.Component;\n-\n-/**\n- * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n- */\n-@Component\n-public class EnrollmentInExistingValidationHook\n-    extends AbstractTrackerDtoValidationHook\n-{\n-    protected final TrackerOwnershipManager trackerOwnershipManager;\n-\n-    protected final ProgramInstanceService programInstanceService;\n-\n-    private final TrackerImportAccessManager trackerImportAccessManager;\n-\n-    public EnrollmentInExistingValidationHook( TrackerOwnershipManager trackerOwnershipManager,\n-        ProgramInstanceService programInstanceService,\n-        TrackerImportAccessManager trackerImportAccessManager )\n-    {\n-        checkNotNull( trackerOwnershipManager );\n-        checkNotNull( programInstanceService );\n-        checkNotNull( trackerImportAccessManager );\n-\n-        this.trackerOwnershipManager = trackerOwnershipManager;\n-        this.programInstanceService = programInstanceService;\n-        this.trackerImportAccessManager = trackerImportAccessManager;\n-    }\n-\n-    @Override\n-    public void validateEnrollment( ValidationErrorReporter reporter, Enrollment enrollment )\n-    {\n-        TrackerImportValidationContext validationContext = reporter.getValidationContext();\n-\n-        if ( EnrollmentStatus.CANCELLED == enrollment.getStatus() )\n-        {\n-            return;\n-        }\n-\n-        Program program = validationContext.getProgram( enrollment.getProgram() );\n-\n-        checkNotNull( program, PROGRAM_CANT_BE_NULL );\n-\n-        if ( (EnrollmentStatus.COMPLETED == enrollment.getStatus()\n-            && Boolean.FALSE.equals( program.getOnlyEnrollOnce() )) )\n-        {\n-            return;\n-        }\n-\n-        validateTeiNotEnrolledAlready( reporter, enrollment, program );\n-    }\n-\n-    protected void validateTeiNotEnrolledAlready( ValidationErrorReporter reporter,\n-        Enrollment enrollment, Program program )\n-    {\n-        User user = reporter.getValidationContext().getBundle().getUser();\n-\n-        checkNotNull( user, USER_CANT_BE_NULL );\n-        checkNotNull( program, PROGRAM_CANT_BE_NULL );\n-        checkNotNull( enrollment.getTrackedEntity(), TRACKED_ENTITY_INSTANCE_CANT_BE_NULL );\n-\n-        TrackedEntityInstance tei = getTrackedEntityInstance( reporter, enrollment.getTrackedEntity() );\n-\n-        // TODO: Create a dedicated sql query....?\n-        Set<Enrollment> activeAndCompleted = getAllEnrollments( reporter, program, tei.getUid() )\n-            .stream()\n-            .filter( e -> EnrollmentStatus.ACTIVE == e.getStatus() || EnrollmentStatus.COMPLETED == e.getStatus() )\n-            .collect( Collectors.toSet() );\n-\n-        if ( EnrollmentStatus.ACTIVE == enrollment.getStatus() )\n-        {\n-            Set<Enrollment> activeOnly = activeAndCompleted.stream()\n-                .filter( e -> EnrollmentStatus.ACTIVE == e.getStatus() )\n-                .collect( Collectors.toSet() );\n-\n-            if ( !activeOnly.isEmpty() && !activeOnly.contains( enrollment ) )\n-            {\n-                // TODO: How do we do this check on an import set, this only checks when the DB already contains it\n-                addError( reporter, E1015, tei, program );\n-            }\n-        }\n-\n-        if ( Boolean.TRUE.equals( program.getOnlyEnrollOnce() ) && !activeAndCompleted.isEmpty() )\n-        {\n-            addError( reporter, E1016, tei, program );\n-        }\n-    }\n-\n-    private List<Enrollment> getAllEnrollments( ValidationErrorReporter reporter, Program program,\n-        String trackedEntityInstanceUid )\n-    {\n-        User user = reporter.getValidationContext().getBundle().getUser();\n-\n-        checkNotNull( user, USER_CANT_BE_NULL );\n-        checkNotNull( program, PROGRAM_CANT_BE_NULL );\n-        //checkNotNull( trackedEntityInstance, TRACKED_ENTITY_INSTANCE_CANT_BE_NULL );\n-\n-        ProgramInstanceQueryParams params = new ProgramInstanceQueryParams();\n-        params.setOrganisationUnitMode( OrganisationUnitSelectionMode.ALL );\n-        params.setSkipPaging( true );\n-        params.setProgram( program );\n-        params.setTrackedEntityInstanceUid( trackedEntityInstanceUid );\n-        List<ProgramInstance> programInstances = programInstanceService.getProgramInstances( params );\n-\n-        List<Enrollment> all = new ArrayList<>();\n-\n-        for ( ProgramInstance programInstance : programInstances )\n-        {\n-            if ( trackerOwnershipManager\n-                .hasAccess( user, programInstance.getEntityInstance(), programInstance.getProgram() ) )\n-            {\n-\n-                ValidationErrorReporter localReporter = new ValidationErrorReporter( reporter.getValidationContext() );\n-                trackerImportAccessManager.checkReadEnrollmentAccess( localReporter, programInstance.getProgram(), programInstance.getOrganisationUnit(), programInstance.getEntityInstance().getUid());\n-\n-                if ( localReporter.hasErrors() )\n-                {\n-                    reporter.merge( localReporter );\n-                }\n-                else\n-                {\n-                    all.add( getEnrollmentFromProgramInstance( programInstance ) );\n-                }\n-            }\n-        }\n-\n-        return all;\n-    }\n-\n-    public Enrollment getEnrollmentFromProgramInstance( ProgramInstance programInstance )\n-    {\n-        checkNotNull( programInstance, PROGRAM_INSTANCE_CANT_BE_NULL );\n-\n-        Enrollment enrollment = new Enrollment();\n-        enrollment.setEnrollment( programInstance.getUid() );\n-\n-        enrollment.setStatus( EnrollmentStatus.fromProgramStatus( programInstance.getStatus() ) );\n-        return enrollment;\n-    }\n-\n-    /**\n-     * Get a {@link TrackedEntityInstance} from the pre-heat or from the reference\n-     * tree.\n-     *\n-     * @param reporter the {@link ValidationErrorReporter} object\n-     * @param uid the UID of a {@link TrackedEntityInstance} object\n-     * @return a TrackedEntityInstance\n-     */\n-    public TrackedEntityInstance getTrackedEntityInstance( ValidationErrorReporter reporter, String uid )\n-    {\n-        TrackedEntityInstance tei = reporter.getValidationContext().getTrackedEntityInstance( uid );\n-\n-        if ( tei == null && reporter.getValidationContext().getReference( uid ).isPresent() )\n-        {\n-            tei = new TrackedEntityInstance();\n-            tei.setUid( uid );\n-\n-        }\n-        return tei;\n-    }\n-}\n\\ No newline at end of file\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "message": "Merge commit", "committedDate": null}, {"oid": "3e3dc98d92f0c13fb56cf17894eab06a78842133", "committedDate": "2020-08-04 17:20:37 +0200", "message": "feat: Enrollment/Events note persistence"}, {"oid": "cb2ee65c0210c0d4b2bd8851789da8d4adfaf04d", "committedDate": "2020-09-07 10:28:21 +0200", "message": "fix: [DHIS2-9287] Fix the stats in the import summary (#6062)"}, {"oid": "3e3b32e56ff5554a0095396eddffceac65b6b8de", "committedDate": "2020-10-27 09:56:50 +0100", "message": "refactor: simplified calls to error reporting (#6437)"}, {"oid": "d095f2d4cf9aaac1e9aa973d4da6aa2f96104cc8", "committedDate": "2020-11-11 13:49:13 +0100", "message": "fix: allow validation to reference entities in the payload (#6617)"}, {"oid": "d34f05e1348f3dff54ced7059283a96a7b699ea4", "committedDate": "2020-11-16 18:21:11 +0100", "message": "feat: DHIS2-9835 user info in comments and notes for Events and Enrollments (#6587)"}, {"oid": "9f9b08a0ac165fb56a7b6ca8900aa54b2103a71d", "committedDate": "2020-11-18 10:13:55 +0100", "message": "feat: [DHIS2-9841] Use db for storing break the glass records. Temporary ownerships (2.36) (#6643)"}, {"oid": "0bf55d776481f6511e5f9ebca5de1f2cf79777c0", "committedDate": "2020-11-19 13:55:46 +0100", "message": "refactor: New Tracker Error reporting refactor (#6706)"}, {"oid": "8192aa1d2567bc36dbc259a2f61bf9b7609b7b53", "committedDate": "2020-12-07 08:36:43 +0100", "message": "fix: remove Lazy Init Exception on enrollment update (#6795)"}, {"oid": "7098e9412b922ed70f8136f30c7d790e27bb43be", "committedDate": "2020-12-10 10:43:44 +0100", "message": "chore: Remove unused imports (#6875)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "8c0d810d8bfc5333d6805554b99384507ba4f242", "committedDate": "2021-01-29 17:30:02 +0100", "message": "fix: [DHIS2-10208] enrollment not updated due to validation (2.36) (#7210)"}, {"oid": "39a200eaa53e6ba6a09ff028cecbd9d2f9b4fb0f", "committedDate": "2021-05-04 08:41:15 +0200", "message": "[TECH-450] - DB access in EnrollmentInExistingValidationHook (#7941)"}, {"oid": "d3b0477644437a33507157a3b97b0040d8a44496", "committedDate": "2021-10-06 13:42:51 +0200", "message": "fix: Fix active and enrollOnce logic in enrollment validation [DHIS2-11659] (#8958)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "97fa18701761c6993e20f2e7a3816ea689129480", "committedDate": "2022-01-11 15:31:02 +0100", "message": "chore: hooks should add errors via reporter directly TECH-880 (#9523)"}, {"oid": "1d8350a9e9ac100aaaa831894ba3f857b46e2474", "committedDate": "2022-01-13 14:15:17 +0100", "message": "chore: adding errors and warnings is responsibility of the ValidationErrorReporter TECH-880 (#9616)"}, {"oid": "c039b8f75c1d965414de926f04540dfaabdd104c", "committedDate": "2022-02-23 13:08:25 +0100", "message": "chore: Clean up service program rule module [TECH-938] (#9885)"}, {"oid": "ef0cbd365e47f1f88befb80d9650cce75280bd35", "committedDate": "2022-03-08 15:12:00 +0100", "message": "chore: move DB access and mutation to preheat and preprocessor DHIS2-12623 (#9904)"}, {"oid": "5f63b52ac0a4f426145ae43affa58295f804812a", "committedDate": "2022-04-14 13:41:33 +0200", "message": "chore: split domain and view models DHIS2-12563 (#10379)"}, {"oid": "f7cfc83610c75486bbb0457dde057eaed777f3d2", "committedDate": "2022-05-27 15:15:25 +0200", "message": "chore: ValidationErrorReporter does not need the bunlde DHIS2-12519 (#10878)"}, {"oid": "b0a861c0308005b865cafa2344c1231c0a4f2bc3", "committedDate": "2022-12-02 13:36:08 +0100", "message": "fix: turn removeOnError into skipOnError DHIS2-14213 (#12457)"}, {"oid": "7ac68b368a1dbd9362973b30f7160399abe801a0", "committedDate": "2022-12-06 09:04:47 +0100", "message": "chore: move ValidationErrorReporter close to its usage (#12486)"}, {"oid": "07ff89195ce66114c2b5a744039c2b2ce7a8f440", "committedDate": "2022-12-13 09:51:43 +0100", "message": "chore: Clean up TrackerBundle methods [TECH-14298] (#12515)"}, {"oid": "2db6b519d76e1d0b0390a9dc6f2f650824c543bb", "committedDate": "2022-12-13 13:10:13 +0100", "message": "chore: migrate enrollment validators (#12526)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg4NTg0Mg==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r429885842", "body": "Yes, sounds like a reasonable performance gain, please look into it", "bodyText": "Yes, sounds like a reasonable performance gain, please look into it", "bodyHTML": "<p dir=\"auto\">Yes, sounds like a reasonable performance gain, please look into it</p>", "author": "mortenoh", "createdAt": "2020-05-25T11:31:55Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventCountValidationHook.java", "diffHunk": "@@ -0,0 +1,120 @@\n+package org.hisp.dhis.tracker.validation.hooks;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.hisp.dhis.common.OrganisationUnitSelectionMode;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.program.ProgramInstanceQueryParams;\n+import org.hisp.dhis.program.ProgramInstanceService;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+import org.hisp.dhis.tracker.TrackerImportStrategy;\n+import org.hisp.dhis.tracker.domain.Event;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n+import org.hisp.dhis.tracker.validation.TrackerImportValidationContext;\n+import org.hisp.dhis.user.User;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+@Component\n+public class EventCountValidationHook\n+    extends AbstractTrackerDtoValidationHook\n+{\n+    @Autowired\n+    protected ProgramInstanceService programInstanceService;\n+\n+    @Override\n+    public int getOrder()\n+    {\n+        return 305;\n+    }\n+\n+    public EventCountValidationHook()\n+    {\n+        super( Event.class, TrackerImportStrategy.CREATE_AND_UPDATE );\n+    }\n+\n+    @Override\n+    public void validateEvent( ValidationErrorReporter reporter, Event event )\n+    {\n+        TrackerImportValidationContext validationContext = reporter.getValidationContext();\n+        User user = validationContext.getBundle().getUser();\n+\n+        Program program = validationContext.getProgram( event.getProgram() );\n+\n+        if ( program.isRegistration() )\n+        {\n+            TrackedEntityInstance tei = validationContext.getTrackedEntityInstance( event.getTrackedEntity() );\n+            ProgramInstanceQueryParams params = new ProgramInstanceQueryParams();\n+            params.setProgram( program );\n+            params.setTrackedEntityInstance( tei );\n+            params.setOrganisationUnitMode( OrganisationUnitSelectionMode.ALL );\n+            params.setUser( user );\n+\n+            int count = programInstanceService.countProgramInstances( params );\n+\n+            if ( count == 0 )\n+            {\n+                reporter.addError( newReport( TrackerErrorCode.E1037 )\n+                    .addArg( tei )\n+                    .addArg( program ) );\n+            }\n+            else if ( count > 1 )\n+            {\n+                reporter.addError( newReport( TrackerErrorCode.E1038 )\n+                    .addArg( tei )\n+                    .addArg( program ) );\n+            }\n+        }\n+        else\n+        {\n+            //TODO: I don't understand the purpose of this here. This could be moved to preheater?\n+            // possibly...(Stian-1.4.20)\n+            // For isRegistraion=false, there can only exist a single tei and program instance across the entire program.\n+            // Both these counts could potentially be preheated, and then just make sure we just have 1 program instance.?", "originalCommit": "a59d4b4c1f3b0aa2ee51ac1bab3b372412ab878e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg5ODE3OA==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446898178", "bodyText": "This class will be reworked by @luciano-fiandesio. We will move the SQL into preheater, and just verify the results here.", "author": "stian-sandvold", "createdAt": "2020-06-29T11:28:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg4NTg0Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg5ODc1OQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446898759", "bodyText": "This class is also a bit strangely named, we are checking ProgramInstances, not ProgramStageInstances. This will also be dealt with later :) We can commit this as-is for now, since we planned the refactoring work already.", "author": "stian-sandvold", "createdAt": "2020-06-29T11:29:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg4NTg0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "0c469e1350e645b019954827553da9f855b7dcb4", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventCountValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventCountValidationHook.java\nindex 2e461967fa..33f4c40b21 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventCountValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventCountValidationHook.java\n", "chunk": "@@ -103,15 +98,13 @@ public class EventCountValidationHook\n             // possibly...(Stian-1.4.20)\n             // For isRegistraion=false, there can only exist a single tei and program instance across the entire program.\n             // Both these counts could potentially be preheated, and then just make sure we just have 1 program instance.?\n-            ProgramInstanceQueryParams params = new ProgramInstanceQueryParams();\n-            params.setProgram( program );\n-            params.setOrganisationUnitMode( OrganisationUnitSelectionMode.ALL );\n-            params.setUser( user );\n+            params.setTrackedEntityInstance( null );\n \n             int count = programInstanceService.countProgramInstances( params );\n \n             if ( count > 1 )\n             {\n+                //TODO: Can't get this to work/happen, the preheater? inserts a program instance.\n                 reporter.addError( newReport( TrackerErrorCode.E1040 )\n                     .addArg( program ) );\n             }\n", "next_change": {"commit": "898c87ce14bf1faf20e8f8ebf3a5bc12f27437f0", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventCountValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventCountValidationHook.java\nindex 33f4c40b21..b38a15076d 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventCountValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventCountValidationHook.java\n", "chunk": "@@ -94,19 +97,14 @@ public class EventCountValidationHook\n         }\n         else\n         {\n-            //TODO: I don't understand the purpose of this here. This could be moved to preheater?\n-            // possibly...(Stian-1.4.20)\n-            // For isRegistraion=false, there can only exist a single tei and program instance across the entire program.\n-            // Both these counts could potentially be preheated, and then just make sure we just have 1 program instance.?\n             params.setTrackedEntityInstance( null );\n \n             int count = programInstanceService.countProgramInstances( params );\n \n             if ( count > 1 )\n             {\n-                //TODO: Can't get this to work/happen, the preheater? inserts a program instance.\n-                reporter.addError( newReport( TrackerErrorCode.E1040 )\n-                    .addArg( program ) );\n+                //TODO: Can't provoke this error on the new importer, the preheater? inserts a program instance.\n+                reporter.addError( newReport( TrackerErrorCode.E1040 ).addArg( program ) );\n             }\n         }\n     }\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventCountValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventCountValidationHook.java\nindex 2e461967fa..b38a15076d 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventCountValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventCountValidationHook.java\n", "chunk": "@@ -99,21 +97,14 @@ public class EventCountValidationHook\n         }\n         else\n         {\n-            //TODO: I don't understand the purpose of this here. This could be moved to preheater?\n-            // possibly...(Stian-1.4.20)\n-            // For isRegistraion=false, there can only exist a single tei and program instance across the entire program.\n-            // Both these counts could potentially be preheated, and then just make sure we just have 1 program instance.?\n-            ProgramInstanceQueryParams params = new ProgramInstanceQueryParams();\n-            params.setProgram( program );\n-            params.setOrganisationUnitMode( OrganisationUnitSelectionMode.ALL );\n-            params.setUser( user );\n+            params.setTrackedEntityInstance( null );\n \n             int count = programInstanceService.countProgramInstances( params );\n \n             if ( count > 1 )\n             {\n-                reporter.addError( newReport( TrackerErrorCode.E1040 )\n-                    .addArg( program ) );\n+                //TODO: Can't provoke this error on the new importer, the preheater? inserts a program instance.\n+                reporter.addError( newReport( TrackerErrorCode.E1040 ).addArg( program ) );\n             }\n         }\n     }\n", "next_change": {"commit": "0a2a7f9418c217602f78eb701e251294d4919912", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventCountValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventCountValidationHook.java\nindex b38a15076d..c485406006 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventCountValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventCountValidationHook.java\n", "chunk": "@@ -108,4 +114,9 @@ public class EventCountValidationHook\n             }\n         }\n     }\n+\n+    private boolean hasProgramInstance( Event event, TrackerImportValidationContext ctx )\n+    {\n+        return ctx.getProgramInstance( event.getUid() ) != null;\n+    }\n }\n", "next_change": {"commit": "d4aa7e0d126657c341427c44cb7d9b2800b044ea", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventCountValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventCountValidationHook.java\nindex c485406006..787870f9e6 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventCountValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventCountValidationHook.java\n", "chunk": "@@ -117,6 +118,6 @@ public class EventCountValidationHook\n \n     private boolean hasProgramInstance( Event event, TrackerImportValidationContext ctx )\n     {\n-        return ctx.getProgramInstance( event.getUid() ) != null;\n+        return ctx.getProgramInstance( event.getEnrollment() ) != null;\n     }\n }\n", "next_change": {"commit": "615f9676329046c954fa4cbe07234273980b001a", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventCountValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventCountValidationHook.java\ndeleted file mode 100644\nindex 787870f9e6..0000000000\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventCountValidationHook.java\n+++ /dev/null\n", "chunk": "@@ -1,123 +0,0 @@\n-package org.hisp.dhis.tracker.validation.hooks;\n-\n-/*\n- * Copyright (c) 2004-2020, University of Oslo\n- * All rights reserved.\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions are met:\n- * Redistributions of source code must retain the above copyright notice, this\n- * list of conditions and the following disclaimer.\n- *\n- * Redistributions in binary form must reproduce the above copyright notice,\n- * this list of conditions and the following disclaimer in the documentation\n- * and/or other materials provided with the distribution.\n- * Neither the name of the HISP project nor the names of its contributors may\n- * be used to endorse or promote products derived from this software without\n- * specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n- * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n- * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n- * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n- * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n- * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n- * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- */\n-\n-import org.hisp.dhis.common.OrganisationUnitSelectionMode;\n-import org.hisp.dhis.program.Program;\n-import org.hisp.dhis.program.ProgramInstanceQueryParams;\n-import org.hisp.dhis.program.ProgramInstanceService;\n-import org.hisp.dhis.trackedentity.TrackedEntityAttributeService;\n-import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n-import org.hisp.dhis.trackedentitycomment.TrackedEntityCommentService;\n-import org.hisp.dhis.tracker.TrackerImportStrategy;\n-import org.hisp.dhis.tracker.domain.Event;\n-import org.hisp.dhis.tracker.report.TrackerErrorCode;\n-import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n-import org.hisp.dhis.tracker.validation.TrackerImportValidationContext;\n-import org.hisp.dhis.user.User;\n-import org.springframework.stereotype.Component;\n-\n-import java.util.ArrayList;\n-\n-import static com.google.common.base.Preconditions.checkNotNull;\n-import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n-\n-/**\n- * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n- */\n-@Component\n-public class EventCountValidationHook\n-    extends AbstractTrackerDtoValidationHook\n-{\n-    protected final ProgramInstanceService programInstanceService;\n-\n-    public EventCountValidationHook( TrackedEntityAttributeService teAttrService,\n-        TrackedEntityCommentService commentService, ProgramInstanceService programInstanceService )\n-    {\n-        super( Event.class, TrackerImportStrategy.CREATE_AND_UPDATE, teAttrService, commentService );\n-        checkNotNull( programInstanceService );\n-        this.programInstanceService = programInstanceService;\n-    }\n-\n-    @Override\n-    public void validateEvent( ValidationErrorReporter reporter, Event event )\n-    {\n-        TrackerImportValidationContext validationContext = reporter.getValidationContext();\n-\n-        Program program = validationContext.getProgram( event.getProgram() );\n-\n-        if ( program.isRegistration() )\n-        {\n-            if ( !hasProgramInstance( event, validationContext ) )\n-            {\n-                TrackedEntityInstance tei = validationContext.getTrackedEntityInstance( event.getTrackedEntity() );\n-                final int count = validationContext.getEventToProgramInstancesMap()\n-                    .getOrDefault( event.getUid(), new ArrayList<>() ).size();\n-\n-                if ( count == 0 )\n-                {\n-                    reporter.addError( newReport( TrackerErrorCode.E1037 )\n-                        .addArg( tei )\n-                        .addArg( program ) );\n-                }\n-                else if ( count > 1 )\n-                {\n-                    reporter.addError( newReport( TrackerErrorCode.E1038 )\n-                        .addArg( tei )\n-                        .addArg( program ) );\n-                }\n-            }\n-        }\n-        else\n-        {\n-            User user = validationContext.getBundle().getUser();\n-\n-            ProgramInstanceQueryParams params = new ProgramInstanceQueryParams();\n-            params.setProgram( program );\n-            params.setOrganisationUnitMode( OrganisationUnitSelectionMode.ALL );\n-            params.setUser( user );\n-\n-            params.setTrackedEntityInstance( null );\n-\n-            int count = programInstanceService.countProgramInstances( params );\n-\n-            if ( count > 1 )\n-            {\n-                // TODO: Can't provoke this error on the new importer, the preheater? inserts a\n-                // program instance.\n-                reporter.addError( newReport( TrackerErrorCode.E1040 ).addArg( program ) );\n-            }\n-        }\n-    }\n-\n-    private boolean hasProgramInstance( Event event, TrackerImportValidationContext ctx )\n-    {\n-        return ctx.getProgramInstance( event.getEnrollment() ) != null;\n-    }\n-}\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "message": "Merge commit", "committedDate": null}, {"oid": "0a2a7f9418c217602f78eb701e251294d4919912", "committedDate": "2020-07-14 09:02:09 +0200", "message": "feat: ProgramInstance pre-heater"}, {"oid": "e62bcedaeb5c5b8c3a550e76961acb68ca002cb6", "committedDate": "2020-07-14 12:23:46 +0200", "message": "chore: formatting"}, {"oid": "d4aa7e0d126657c341427c44cb7d9b2800b044ea", "committedDate": "2020-07-14 12:32:33 +0200", "message": "fix: use enrollment uid to fetch an enrollment"}, {"oid": "615f9676329046c954fa4cbe07234273980b001a", "committedDate": "2020-07-14 20:13:08 +0800", "message": "* refactored EventCountValidationHook.java into PreCheckDataRelationsValidationHook.java"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg5MDU5NQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r429890595", "body": "Yeah, could be a candidate for TrackerAccessManger?", "bodyText": "Yeah, could be a candidate for TrackerAccessManger?", "bodyHTML": "<p dir=\"auto\">Yeah, could be a candidate for TrackerAccessManger?</p>", "author": "mortenoh", "createdAt": "2020-05-25T11:43:39Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java", "diffHunk": "@@ -0,0 +1,214 @@\n+package org.hisp.dhis.tracker.validation.hooks;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.hisp.dhis.event.EventStatus;\n+import org.hisp.dhis.period.Period;\n+import org.hisp.dhis.period.PeriodType;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.tracker.TrackerImportStrategy;\n+import org.hisp.dhis.tracker.domain.Event;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n+import org.hisp.dhis.tracker.validation.TrackerImportValidationContext;\n+import org.hisp.dhis.user.User;\n+import org.hisp.dhis.util.DateUtils;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Date;\n+import java.util.Objects;\n+\n+import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+@Component\n+public class EventDateValidationHook\n+    extends AbstractTrackerDtoValidationHook\n+{\n+    @Override\n+    public int getOrder()\n+    {\n+        return 302;\n+    }\n+\n+    public EventDateValidationHook()\n+    {\n+        super( Event.class, TrackerImportStrategy.CREATE_AND_UPDATE );\n+    }\n+\n+    @Override\n+    public void validateEvent( ValidationErrorReporter reporter, Event event )\n+    {\n+        TrackerImportValidationContext context = reporter.getValidationContext();\n+\n+        if ( EventStatus.ACTIVE == event.getStatus() && event.getOccurredAt() == null )\n+        {\n+            reporter.addError( newReport( TrackerErrorCode.E1031 )\n+                .addArg( event ) );\n+            return;\n+        }\n+\n+        ProgramStageInstance programStageInstance = context.getProgramStageInstance( event.getEvent() );\n+        Program program = context.getProgram( event.getProgram() );\n+\n+        validateDateFormat( reporter, event );\n+        validateExpiryDays( reporter, event, program, programStageInstance, context.getBundle().getUser() );\n+        validatePeriodType( reporter, event, program, programStageInstance );\n+    }\n+\n+    private void validateExpiryDays( ValidationErrorReporter reporter, Event event, Program program,\n+        ProgramStageInstance programStageInstance, User actingUser )\n+    {\n+        Objects.requireNonNull( actingUser, Constants.USER_CANT_BE_NULL );\n+        Objects.requireNonNull( event, Constants.EVENT_CANT_BE_NULL );\n+        Objects.requireNonNull( program, Constants.PROGRAM_CANT_BE_NULL );\n+\n+        // TODO: Check is completeEventsExpiryDays actually in use, can't find any code usage other than in import validation.\n+        if ( (program.getCompleteEventsExpiryDays() > 0 && EventStatus.COMPLETED == event.getStatus())\n+            || (programStageInstance != null && EventStatus.COMPLETED == programStageInstance.getStatus()) )\n+        {\n+            //TODO: Should we make an error here? Feels like this is out of place, should be moved to the auth layer.", "originalCommit": "a59d4b4c1f3b0aa2ee51ac1bab3b372412ab878e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY5NTAwMA==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r449695000", "bodyText": "Reopening this, as we have to check and allow exceptions for F_EDIT_EXPIRED somewhere.", "author": "Bekkalizer", "createdAt": "2020-07-03T20:08:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg5MDU5NQ=="}], "type": "inlineReview", "revised_code": {"commit": "e7e003a2211cdf3f412ce75f95ef0f6be1973434", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\nindex 3eaa888f4b..c642599414 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n", "chunk": "@@ -92,7 +87,6 @@ public class EventDateValidationHook\n         Objects.requireNonNull( event, Constants.EVENT_CANT_BE_NULL );\n         Objects.requireNonNull( program, Constants.PROGRAM_CANT_BE_NULL );\n \n-        // TODO: Check is completeEventsExpiryDays actually in use, can't find any code usage other than in import validation.\n         if ( (program.getCompleteEventsExpiryDays() > 0 && EventStatus.COMPLETED == event.getStatus())\n             || (programStageInstance != null && EventStatus.COMPLETED == programStageInstance.getStatus()) )\n         {\n", "next_change": {"commit": "c5a94c3d798ab59a16b994801255c4ac2631887b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\nindex c642599414..fef74c6604 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n", "chunk": "@@ -83,9 +82,9 @@ public class EventDateValidationHook\n     private void validateExpiryDays( ValidationErrorReporter reporter, Event event, Program program,\n         ProgramStageInstance programStageInstance, User actingUser )\n     {\n-        Objects.requireNonNull( actingUser, Constants.USER_CANT_BE_NULL );\n-        Objects.requireNonNull( event, Constants.EVENT_CANT_BE_NULL );\n-        Objects.requireNonNull( program, Constants.PROGRAM_CANT_BE_NULL );\n+        Objects.requireNonNull( actingUser, TrackerImporterAssertErrors.USER_CANT_BE_NULL );\n+        Objects.requireNonNull( event, TrackerImporterAssertErrors.EVENT_CANT_BE_NULL );\n+        Objects.requireNonNull( program, TrackerImporterAssertErrors.PROGRAM_CANT_BE_NULL );\n \n         if ( (program.getCompleteEventsExpiryDays() > 0 && EventStatus.COMPLETED == event.getStatus())\n             || (programStageInstance != null && EventStatus.COMPLETED == programStageInstance.getStatus()) )\n", "next_change": {"commit": "3999d1c8e8d7c2bcd11c7c5d99fec179abd25e2b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\nindex fef74c6604..2ddc4277b2 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n", "chunk": "@@ -82,9 +82,9 @@ public class EventDateValidationHook\n     private void validateExpiryDays( ValidationErrorReporter reporter, Event event, Program program,\n         ProgramStageInstance programStageInstance, User actingUser )\n     {\n-        Objects.requireNonNull( actingUser, TrackerImporterAssertErrors.USER_CANT_BE_NULL );\n-        Objects.requireNonNull( event, TrackerImporterAssertErrors.EVENT_CANT_BE_NULL );\n-        Objects.requireNonNull( program, TrackerImporterAssertErrors.PROGRAM_CANT_BE_NULL );\n+        checkNotNull( actingUser, TrackerImporterAssertErrors.USER_CANT_BE_NULL );\n+        checkNotNull( event, TrackerImporterAssertErrors.EVENT_CANT_BE_NULL );\n+        checkNotNull( program, TrackerImporterAssertErrors.PROGRAM_CANT_BE_NULL );\n \n         if ( (program.getCompleteEventsExpiryDays() > 0 && EventStatus.COMPLETED == event.getStatus())\n             || (programStageInstance != null && EventStatus.COMPLETED == programStageInstance.getStatus()) )\n", "next_change": {"commit": "0c469e1350e645b019954827553da9f855b7dcb4", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\nindex 2ddc4277b2..7193a1437f 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n", "chunk": "@@ -64,39 +65,42 @@ public class EventDateValidationHook\n     {\n         TrackerImportValidationContext context = reporter.getValidationContext();\n \n-        if ( EventStatus.ACTIVE == event.getStatus() && event.getOccurredAt() == null )\n+        if ( event.getOccurredAt() == null )\n         {\n             reporter.addError( newReport( TrackerErrorCode.E1031 )\n                 .addArg( event ) );\n             return;\n         }\n \n-        ProgramStageInstance programStageInstance = context.getProgramStageInstance( event.getEvent() );\n         Program program = context.getProgram( event.getProgram() );\n \n         validateDateFormat( reporter, event );\n-        validateExpiryDays( reporter, event, program, programStageInstance, context.getBundle().getUser() );\n-        validatePeriodType( reporter, event, program, programStageInstance );\n+        validateExpiryDays( reporter, event, program );\n+        validatePeriodType( reporter, event, program );\n     }\n \n-    private void validateExpiryDays( ValidationErrorReporter reporter, Event event, Program program,\n-        ProgramStageInstance programStageInstance, User actingUser )\n+    private void validateExpiryDays( ValidationErrorReporter reporter, Event event, Program program )\n     {\n+        TrackerImportValidationContext context = reporter.getValidationContext();\n+        User actingUser = context.getBundle().getUser();\n+        TrackerImportStrategy eventStrategy = context.getStrategy( event );\n+\n         checkNotNull( actingUser, TrackerImporterAssertErrors.USER_CANT_BE_NULL );\n         checkNotNull( event, TrackerImporterAssertErrors.EVENT_CANT_BE_NULL );\n         checkNotNull( program, TrackerImporterAssertErrors.PROGRAM_CANT_BE_NULL );\n \n-        if ( (program.getCompleteEventsExpiryDays() > 0 && EventStatus.COMPLETED == event.getStatus())\n-            || (programStageInstance != null && EventStatus.COMPLETED == programStageInstance.getStatus()) )\n+        if ( (program.getCompleteEventsExpiryDays() > 0 && EventStatus.COMPLETED == event.getStatus()) )\n         {\n             //TODO: Should we make an error here? Feels like this is out of place, should be moved to the auth layer.\n-//            if ( actingUser.isAuthorized( Authorities.F_EDIT_EXPIRED.getAuthority() ) )\n-//            {\n-//                return;\n-//            }\n+            if ( actingUser.isAuthorized( Authorities.F_EDIT_EXPIRED.getAuthority() ) )\n+            {\n+                return;\n+            }\n \n             Date completedDate = null;\n \n+            // TODO: This feels like inefficient and very hard to read way of checking update/create logic.\n+            ProgramStageInstance programStageInstance = context.getProgramStageInstance( event.getEvent() );\n             if ( programStageInstance != null )\n             {\n                 completedDate = programStageInstance.getCompletedDate();\n", "next_change": {"commit": "898c87ce14bf1faf20e8f8ebf3a5bc12f27437f0", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\nindex 7193a1437f..90f9e376a4 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n", "chunk": "@@ -99,14 +99,7 @@ public class EventDateValidationHook\n \n             Date completedDate = null;\n \n-            // TODO: This feels like inefficient and very hard to read way of checking update/create logic.\n-            ProgramStageInstance programStageInstance = context.getProgramStageInstance( event.getEvent() );\n-            if ( programStageInstance != null )\n-            {\n-                completedDate = programStageInstance.getCompletedDate();\n-            }\n-\n-            else if ( event.getCompletedAt() != null )\n+            if ( event.getCompletedAt() != null )\n             {\n                 completedDate = DateUtils.parseDate( event.getCompletedAt() );\n             }\n", "next_change": null}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\nindex 3eaa888f4b..90f9e376a4 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n", "chunk": "@@ -70,46 +67,39 @@ public class EventDateValidationHook\n     {\n         TrackerImportValidationContext context = reporter.getValidationContext();\n \n-        if ( EventStatus.ACTIVE == event.getStatus() && event.getOccurredAt() == null )\n+        if ( event.getOccurredAt() == null )\n         {\n             reporter.addError( newReport( TrackerErrorCode.E1031 )\n                 .addArg( event ) );\n             return;\n         }\n \n-        ProgramStageInstance programStageInstance = context.getProgramStageInstance( event.getEvent() );\n         Program program = context.getProgram( event.getProgram() );\n \n         validateDateFormat( reporter, event );\n-        validateExpiryDays( reporter, event, program, programStageInstance, context.getBundle().getUser() );\n-        validatePeriodType( reporter, event, program, programStageInstance );\n+        validateExpiryDays( reporter, event, program );\n+        validatePeriodType( reporter, event, program );\n     }\n \n-    private void validateExpiryDays( ValidationErrorReporter reporter, Event event, Program program,\n-        ProgramStageInstance programStageInstance, User actingUser )\n+    private void validateExpiryDays( ValidationErrorReporter reporter, Event event, Program program )\n     {\n-        Objects.requireNonNull( actingUser, Constants.USER_CANT_BE_NULL );\n-        Objects.requireNonNull( event, Constants.EVENT_CANT_BE_NULL );\n-        Objects.requireNonNull( program, Constants.PROGRAM_CANT_BE_NULL );\n-\n-        // TODO: Check is completeEventsExpiryDays actually in use, can't find any code usage other than in import validation.\n-        if ( (program.getCompleteEventsExpiryDays() > 0 && EventStatus.COMPLETED == event.getStatus())\n-            || (programStageInstance != null && EventStatus.COMPLETED == programStageInstance.getStatus()) )\n-        {\n-            //TODO: Should we make an error here? Feels like this is out of place, should be moved to the auth layer.\n-//            if ( actingUser.isAuthorized( Authorities.F_EDIT_EXPIRED.getAuthority() ) )\n-//            {\n-//                return;\n-//            }\n+        TrackerImportValidationContext context = reporter.getValidationContext();\n+        User actingUser = context.getBundle().getUser();\n \n-            Date completedDate = null;\n+        checkNotNull( actingUser, TrackerImporterAssertErrors.USER_CANT_BE_NULL );\n+        checkNotNull( event, TrackerImporterAssertErrors.EVENT_CANT_BE_NULL );\n+        checkNotNull( program, TrackerImporterAssertErrors.PROGRAM_CANT_BE_NULL );\n \n-            if ( programStageInstance != null )\n+        if ( (program.getCompleteEventsExpiryDays() > 0 && EventStatus.COMPLETED == event.getStatus()) )\n+        {\n+            if ( actingUser.isAuthorized( Authorities.F_EDIT_EXPIRED.getAuthority() ) )\n             {\n-                completedDate = programStageInstance.getCompletedDate();\n+                return;\n             }\n \n-            else if ( event.getCompletedAt() != null )\n+            Date completedDate = null;\n+\n+            if ( event.getCompletedAt() != null )\n             {\n                 completedDate = DateUtils.parseDate( event.getCompletedAt() );\n             }\n", "next_change": {"commit": "3e3b32e56ff5554a0095396eddffceac65b6b8de", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\nindex 90f9e376a4..4fa4affc84 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n", "chunk": "@@ -104,17 +108,12 @@ public class EventDateValidationHook\n                 completedDate = DateUtils.parseDate( event.getCompletedAt() );\n             }\n \n-            if ( completedDate == null )\n-            {\n-                reporter.addError( newReport( TrackerErrorCode.E1042 )\n-                    .addArg( event ) );\n-            }\n+            addErrorIfNull( completedDate, reporter, E1042, event );\n \n             if ( completedDate != null && (new Date())\n                 .after( DateUtils.getDateAfterAddition( completedDate, program.getCompleteEventsExpiryDays() ) ) )\n             {\n-                reporter.addError( newReport( TrackerErrorCode.E1043 )\n-                    .addArg( event ) );\n+                addError( reporter, E1043, event );\n             }\n         }\n     }\n", "next_change": {"commit": "6e8f0d6c150b303d780b397f7646ff3383f16250", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\nindex 4fa4affc84..2d9ac4e1ec 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n", "chunk": "@@ -101,19 +99,16 @@ public class EventDateValidationHook\n                 return;\n             }\n \n-            Date completedDate = null;\n-\n-            if ( event.getCompletedAt() != null )\n+            if ( event.getCompletedAt() == null )\n             {\n-                completedDate = DateUtils.parseDate( event.getCompletedAt() );\n+                addErrorIfNull( event.getCompletedAt(), reporter, E1042, event );\n             }\n-\n-            addErrorIfNull( completedDate, reporter, E1042, event );\n-\n-            if ( completedDate != null && (new Date())\n-                .after( DateUtils.getDateAfterAddition( completedDate, program.getCompleteEventsExpiryDays() ) ) )\n+            else\n             {\n-                addError( reporter, E1043, event );\n+                if ( now().isAfter( event.getCompletedAt().plus( ofDays( program.getCompleteEventsExpiryDays() ) ) ) )\n+                {\n+                    addError( reporter, E1043, event );\n+                }\n             }\n         }\n     }\n", "next_change": {"commit": "97fa18701761c6993e20f2e7a3816ea689129480", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\nindex 2d9ac4e1ec..eb9f6f4a49 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n", "chunk": "@@ -92,22 +91,22 @@ public class EventDateValidationHook\n         checkNotNull( event, TrackerImporterAssertErrors.EVENT_CANT_BE_NULL );\n         checkNotNull( program, TrackerImporterAssertErrors.PROGRAM_CANT_BE_NULL );\n \n-        if ( (program.getCompleteEventsExpiryDays() > 0 && EventStatus.COMPLETED == event.getStatus()) )\n+        if ( actingUser.isAuthorized( Authorities.F_EDIT_EXPIRED.getAuthority() ) )\n         {\n-            if ( actingUser.isAuthorized( Authorities.F_EDIT_EXPIRED.getAuthority() ) )\n-            {\n-                return;\n-            }\n+            return;\n+        }\n \n+        if ( (program.getCompleteEventsExpiryDays() > 0 && EventStatus.COMPLETED == event.getStatus()) )\n+        {\n             if ( event.getCompletedAt() == null )\n             {\n-                addErrorIfNull( event.getCompletedAt(), reporter, E1042, event );\n+                addErrorIfNull( event.getCompletedAt(), reporter, event, E1042, event );\n             }\n             else\n             {\n                 if ( now().isAfter( event.getCompletedAt().plus( ofDays( program.getCompleteEventsExpiryDays() ) ) ) )\n                 {\n-                    addError( reporter, E1043, event );\n+                    addError( reporter, event, E1043, event );\n                 }\n             }\n         }\n", "next_change": {"commit": "1d8350a9e9ac100aaaa831894ba3f857b46e2474", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\nindex eb9f6f4a49..98230255c9 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n", "chunk": "@@ -100,13 +100,13 @@ public class EventDateValidationHook\n         {\n             if ( event.getCompletedAt() == null )\n             {\n-                addErrorIfNull( event.getCompletedAt(), reporter, event, E1042, event );\n+                reporter.addErrorIfNull( event.getCompletedAt(), event, E1042, event );\n             }\n             else\n             {\n                 if ( now().isAfter( event.getCompletedAt().plus( ofDays( program.getCompleteEventsExpiryDays() ) ) ) )\n                 {\n-                    addError( reporter, event, E1043, event );\n+                    reporter.addError( event, E1043, event );\n                 }\n             }\n         }\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "message": "Merge commit", "committedDate": null}, {"oid": "3e3dc98d92f0c13fb56cf17894eab06a78842133", "committedDate": "2020-08-04 17:20:37 +0200", "message": "feat: Enrollment/Events note persistence"}, {"oid": "3e3b32e56ff5554a0095396eddffceac65b6b8de", "committedDate": "2020-10-27 09:56:50 +0100", "message": "refactor: simplified calls to error reporting (#6437)"}, {"oid": "0bf55d776481f6511e5f9ebca5de1f2cf79777c0", "committedDate": "2020-11-19 13:55:46 +0100", "message": "refactor: New Tracker Error reporting refactor (#6706)"}, {"oid": "a9aa89a8d5134104503d1cbb43f96b06f3531569", "committedDate": "2020-12-02 11:10:05 +0100", "message": "fix: Manage event scheduleAt date [DHIS2-10009] (#6804)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "6e8f0d6c150b303d780b397f7646ff3383f16250", "committedDate": "2021-01-21 09:32:50 +0100", "message": "feat: new tracked dto's properties referring to a date, now use Instant instead of String [DHIS2-101239] (#7119)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "c0e9b28f4609a84d1287d93bc65f81321e00d78b", "committedDate": "2021-03-30 13:22:16 +0200", "message": "refactor: Removing uid field from tracker entities [TECH-579] (#7790)"}, {"oid": "fe04922e144ac69367a99840d5518edda2d67f38", "committedDate": "2021-06-03 08:17:10 +0200", "message": "fix: Make program field read-only in event payload [DHIS2-11225] (#8086)"}, {"oid": "aff1cb136bdfdf4af8213f8878967be42f5687e9", "committedDate": "2021-06-11 10:58:03 +0200", "message": "fix: Get correct program stage from preheated Program [DHIS2-11225] (#8175)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "97fa18701761c6993e20f2e7a3816ea689129480", "committedDate": "2022-01-11 15:31:02 +0100", "message": "chore: hooks should add errors via reporter directly TECH-880 (#9523)"}, {"oid": "1d8350a9e9ac100aaaa831894ba3f857b46e2474", "committedDate": "2022-01-13 14:15:17 +0100", "message": "chore: adding errors and warnings is responsibility of the ValidationErrorReporter TECH-880 (#9616)"}, {"oid": "c039b8f75c1d965414de926f04540dfaabdd104c", "committedDate": "2022-02-23 13:08:25 +0100", "message": "chore: Clean up service program rule module [TECH-938] (#9885)"}, {"oid": "ef0cbd365e47f1f88befb80d9650cce75280bd35", "committedDate": "2022-03-08 15:12:00 +0100", "message": "chore: move DB access and mutation to preheat and preprocessor DHIS2-12623 (#9904)"}, {"oid": "f7cfc83610c75486bbb0457dde057eaed777f3d2", "committedDate": "2022-05-27 15:15:25 +0200", "message": "chore: ValidationErrorReporter does not need the bunlde DHIS2-12519 (#10878)"}, {"oid": "b0a861c0308005b865cafa2344c1231c0a4f2bc3", "committedDate": "2022-12-02 13:36:08 +0100", "message": "fix: turn removeOnError into skipOnError DHIS2-14213 (#12457)"}, {"oid": "7ac68b368a1dbd9362973b30f7160399abe801a0", "committedDate": "2022-12-06 09:04:47 +0100", "message": "chore: move ValidationErrorReporter close to its usage (#12486)"}, {"oid": "33c7cfe3d47d3ad157e0cc1991ece017e9244bb5", "committedDate": "2022-12-13 13:59:20 +0000", "message": "chore: migrate event validators (#12527)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg5MDkwMA==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r429890900", "body": "@abyot do you know?", "bodyText": "@abyot do you know?", "bodyHTML": "<p dir=\"auto\"><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/abyot/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/abyot\">@abyot</a> do you know?</p>", "author": "mortenoh", "createdAt": "2020-05-25T11:44:29Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java", "diffHunk": "@@ -0,0 +1,214 @@\n+package org.hisp.dhis.tracker.validation.hooks;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.hisp.dhis.event.EventStatus;\n+import org.hisp.dhis.period.Period;\n+import org.hisp.dhis.period.PeriodType;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.tracker.TrackerImportStrategy;\n+import org.hisp.dhis.tracker.domain.Event;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n+import org.hisp.dhis.tracker.validation.TrackerImportValidationContext;\n+import org.hisp.dhis.user.User;\n+import org.hisp.dhis.util.DateUtils;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Date;\n+import java.util.Objects;\n+\n+import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+@Component\n+public class EventDateValidationHook\n+    extends AbstractTrackerDtoValidationHook\n+{\n+    @Override\n+    public int getOrder()\n+    {\n+        return 302;\n+    }\n+\n+    public EventDateValidationHook()\n+    {\n+        super( Event.class, TrackerImportStrategy.CREATE_AND_UPDATE );\n+    }\n+\n+    @Override\n+    public void validateEvent( ValidationErrorReporter reporter, Event event )\n+    {\n+        TrackerImportValidationContext context = reporter.getValidationContext();\n+\n+        if ( EventStatus.ACTIVE == event.getStatus() && event.getOccurredAt() == null )\n+        {\n+            reporter.addError( newReport( TrackerErrorCode.E1031 )\n+                .addArg( event ) );\n+            return;\n+        }\n+\n+        ProgramStageInstance programStageInstance = context.getProgramStageInstance( event.getEvent() );\n+        Program program = context.getProgram( event.getProgram() );\n+\n+        validateDateFormat( reporter, event );\n+        validateExpiryDays( reporter, event, program, programStageInstance, context.getBundle().getUser() );\n+        validatePeriodType( reporter, event, program, programStageInstance );\n+    }\n+\n+    private void validateExpiryDays( ValidationErrorReporter reporter, Event event, Program program,\n+        ProgramStageInstance programStageInstance, User actingUser )\n+    {\n+        Objects.requireNonNull( actingUser, Constants.USER_CANT_BE_NULL );\n+        Objects.requireNonNull( event, Constants.EVENT_CANT_BE_NULL );\n+        Objects.requireNonNull( program, Constants.PROGRAM_CANT_BE_NULL );\n+\n+        // TODO: Check is completeEventsExpiryDays actually in use, can't find any code usage other than in import validation.\n+        if ( (program.getCompleteEventsExpiryDays() > 0 && EventStatus.COMPLETED == event.getStatus())\n+            || (programStageInstance != null && EventStatus.COMPLETED == programStageInstance.getStatus()) )\n+        {\n+            //TODO: Should we make an error here? Feels like this is out of place, should be moved to the auth layer.\n+//            if ( actingUser.isAuthorized( Authorities.F_EDIT_EXPIRED.getAuthority() ) )\n+//            {\n+//                return;\n+//            }\n+\n+            Date completedDate = null;\n+\n+            if ( programStageInstance != null )\n+            {\n+                completedDate = programStageInstance.getCompletedDate();\n+            }\n+\n+            else if ( event.getCompletedAt() != null )\n+            {\n+                completedDate = DateUtils.parseDate( event.getCompletedAt() );\n+            }\n+\n+            if ( completedDate == null )\n+            {\n+                reporter.addError( newReport( TrackerErrorCode.E1042 )\n+                    .addArg( event ) );\n+            }\n+\n+            //TODO: This is troublesome, according to the error text this actually an auth check...\n+            // This should probably we moved and merged with the auth check on isAuthorized F_EDIT_EXPIRED above\n+//            if ( completedDate != null && (new Date()).after(\n+//                DateUtils.getDateAfterAddition( completedDate, program.getCompleteEventsExpiryDays() ) ) )\n+//            {\n+//                errorReporter.addError( newReport( TrackerErrorCode.E1043 )\n+//                    .addArg( event ) );\n+//            }\n+        }\n+    }\n+\n+    private void validatePeriodType( ValidationErrorReporter reporter, Event event,\n+        Program program, ProgramStageInstance programStageInstance )\n+    {\n+        Objects.requireNonNull( event, Constants.EVENT_CANT_BE_NULL );\n+        Objects.requireNonNull( program, Constants.PROGRAM_CANT_BE_NULL );\n+\n+        //TODO: Cant find any reference outside validation code... is this still in use?", "originalCommit": "a59d4b4c1f3b0aa2ee51ac1bab3b372412ab878e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c5a94c3d798ab59a16b994801255c4ac2631887b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\nindex 3eaa888f4b..fef74c6604 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n", "chunk": "@@ -122,20 +115,20 @@ public class EventDateValidationHook\n \n             //TODO: This is troublesome, according to the error text this actually an auth check...\n             // This should probably we moved and merged with the auth check on isAuthorized F_EDIT_EXPIRED above\n-//            if ( completedDate != null && (new Date()).after(\n-//                DateUtils.getDateAfterAddition( completedDate, program.getCompleteEventsExpiryDays() ) ) )\n-//            {\n-//                errorReporter.addError( newReport( TrackerErrorCode.E1043 )\n-//                    .addArg( event ) );\n-//            }\n+            if ( completedDate != null && (new Date())\n+                .after( DateUtils.getDateAfterAddition( completedDate, program.getCompleteEventsExpiryDays() ) ) )\n+            {\n+                reporter.addError( newReport( TrackerErrorCode.E1043 )\n+                    .addArg( event ) );\n+            }\n         }\n     }\n \n     private void validatePeriodType( ValidationErrorReporter reporter, Event event,\n         Program program, ProgramStageInstance programStageInstance )\n     {\n-        Objects.requireNonNull( event, Constants.EVENT_CANT_BE_NULL );\n-        Objects.requireNonNull( program, Constants.PROGRAM_CANT_BE_NULL );\n+        Objects.requireNonNull( event, TrackerImporterAssertErrors.EVENT_CANT_BE_NULL );\n+        Objects.requireNonNull( program, TrackerImporterAssertErrors.PROGRAM_CANT_BE_NULL );\n \n         //TODO: Cant find any reference outside validation code... is this still in use?\n         PeriodType periodType = program.getExpiryPeriodType();\n", "next_change": {"commit": "3999d1c8e8d7c2bcd11c7c5d99fec179abd25e2b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\nindex fef74c6604..2ddc4277b2 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n", "chunk": "@@ -127,8 +127,8 @@ public class EventDateValidationHook\n     private void validatePeriodType( ValidationErrorReporter reporter, Event event,\n         Program program, ProgramStageInstance programStageInstance )\n     {\n-        Objects.requireNonNull( event, TrackerImporterAssertErrors.EVENT_CANT_BE_NULL );\n-        Objects.requireNonNull( program, TrackerImporterAssertErrors.PROGRAM_CANT_BE_NULL );\n+        checkNotNull( event, TrackerImporterAssertErrors.EVENT_CANT_BE_NULL );\n+        checkNotNull( program, TrackerImporterAssertErrors.PROGRAM_CANT_BE_NULL );\n \n         //TODO: Cant find any reference outside validation code... is this still in use?\n         PeriodType periodType = program.getExpiryPeriodType();\n", "next_change": {"commit": "ec14261db1f790e1be25e5bb27b45226087a9dd5", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\nindex 2ddc4277b2..37e01606cc 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n", "chunk": "@@ -130,7 +130,6 @@ public class EventDateValidationHook\n         checkNotNull( event, TrackerImporterAssertErrors.EVENT_CANT_BE_NULL );\n         checkNotNull( program, TrackerImporterAssertErrors.PROGRAM_CANT_BE_NULL );\n \n-        //TODO: Cant find any reference outside validation code... is this still in use?\n         PeriodType periodType = program.getExpiryPeriodType();\n \n         if ( periodType == null || program.getExpiryDays() == 0 )\n", "next_change": {"commit": "0c469e1350e645b019954827553da9f855b7dcb4", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\nindex 37e01606cc..7193a1437f 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n", "chunk": "@@ -124,8 +128,7 @@ public class EventDateValidationHook\n         }\n     }\n \n-    private void validatePeriodType( ValidationErrorReporter reporter, Event event,\n-        Program program, ProgramStageInstance programStageInstance )\n+    private void validatePeriodType( ValidationErrorReporter reporter, Event event, Program program )\n     {\n         checkNotNull( event, TrackerImporterAssertErrors.EVENT_CANT_BE_NULL );\n         checkNotNull( program, TrackerImporterAssertErrors.PROGRAM_CANT_BE_NULL );\n", "next_change": null}, {"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\nindex 37e01606cc..7193a1437f 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n", "chunk": "@@ -138,39 +141,19 @@ public class EventDateValidationHook\n             return;\n         }\n \n-        if ( programStageInstance != null )\n+        String referenceDate = event.getOccurredAt() != null ? event.getOccurredAt() : event.getScheduledAt();\n+        if ( referenceDate == null )\n         {\n-            if ( programStageInstance.getExecutionDate() == null )\n-            {\n-                reporter.addError( newReport( TrackerErrorCode.E1044 )\n-                    .addArg( event ) );\n-            }\n-\n-            Period period = periodType.createPeriod( programStageInstance.getExecutionDate() );\n-\n-            if ( (new Date()).after(\n-                DateUtils.getDateAfterAddition( period.getEndDate(), program.getExpiryDays() ) ) )\n-            {\n-                reporter.addError( newReport( TrackerErrorCode.E1045 )\n-                    .addArg( program ) );\n-            }\n+            reporter.addError( newReport( TrackerErrorCode.E1046 )\n+                .addArg( event ) );\n         }\n-        else\n-        {\n-            String referenceDate = event.getOccurredAt() != null ? event.getOccurredAt() : event.getScheduledAt();\n-            if ( referenceDate == null )\n-            {\n-                reporter.addError( newReport( TrackerErrorCode.E1046 )\n-                    .addArg( event ) );\n-            }\n \n-            Period period = periodType.createPeriod( new Date() );\n+        Period period = periodType.createPeriod( new Date() );\n \n-            if ( DateUtils.parseDate( referenceDate ).before( period.getStartDate() ) )\n-            {\n-                reporter.addError( newReport( TrackerErrorCode.E1047 )\n-                    .addArg( event ) );\n-            }\n+        if ( DateUtils.parseDate( referenceDate ).before( period.getStartDate() ) )\n+        {\n+            reporter.addError( newReport( TrackerErrorCode.E1047 )\n+                .addArg( event ) );\n         }\n     }\n \n", "next_change": null}]}}]}}]}}]}, "revised_code_in_main": {"commit": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\nindex 3eaa888f4b..90f9e376a4 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n", "chunk": "@@ -120,24 +110,20 @@ public class EventDateValidationHook\n                     .addArg( event ) );\n             }\n \n-            //TODO: This is troublesome, according to the error text this actually an auth check...\n-            // This should probably we moved and merged with the auth check on isAuthorized F_EDIT_EXPIRED above\n-//            if ( completedDate != null && (new Date()).after(\n-//                DateUtils.getDateAfterAddition( completedDate, program.getCompleteEventsExpiryDays() ) ) )\n-//            {\n-//                errorReporter.addError( newReport( TrackerErrorCode.E1043 )\n-//                    .addArg( event ) );\n-//            }\n+            if ( completedDate != null && (new Date())\n+                .after( DateUtils.getDateAfterAddition( completedDate, program.getCompleteEventsExpiryDays() ) ) )\n+            {\n+                reporter.addError( newReport( TrackerErrorCode.E1043 )\n+                    .addArg( event ) );\n+            }\n         }\n     }\n \n-    private void validatePeriodType( ValidationErrorReporter reporter, Event event,\n-        Program program, ProgramStageInstance programStageInstance )\n+    private void validatePeriodType( ValidationErrorReporter reporter, Event event, Program program )\n     {\n-        Objects.requireNonNull( event, Constants.EVENT_CANT_BE_NULL );\n-        Objects.requireNonNull( program, Constants.PROGRAM_CANT_BE_NULL );\n+        checkNotNull( event, TrackerImporterAssertErrors.EVENT_CANT_BE_NULL );\n+        checkNotNull( program, TrackerImporterAssertErrors.PROGRAM_CANT_BE_NULL );\n \n-        //TODO: Cant find any reference outside validation code... is this still in use?\n         PeriodType periodType = program.getExpiryPeriodType();\n \n         if ( periodType == null || program.getExpiryDays() == 0 )\n", "next_change": {"commit": "6e8f0d6c150b303d780b397f7646ff3383f16250", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\nindex 90f9e376a4..2d9ac4e1ec 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n", "chunk": "@@ -132,36 +126,29 @@ public class EventDateValidationHook\n             return;\n         }\n \n-        String referenceDate = event.getOccurredAt() != null ? event.getOccurredAt() : event.getScheduledAt();\n-        if ( referenceDate == null )\n-        {\n-            reporter.addError( newReport( TrackerErrorCode.E1046 )\n-                .addArg( event ) );\n-        }\n+        Instant referenceDate = Optional.of( event )\n+            .map( Event::getOccurredAt )\n+            .orElseGet( event::getScheduledAt );\n+\n+        addErrorIfNull( referenceDate, reporter, E1046, event );\n \n         Period period = periodType.createPeriod( new Date() );\n \n-        if ( DateUtils.parseDate( referenceDate ).before( period.getStartDate() ) )\n+        if ( referenceDate.isBefore( period.getStartDate().toInstant() ) )\n         {\n-            reporter.addError( newReport( TrackerErrorCode.E1047 )\n-                .addArg( event ) );\n+            addError( reporter, E1047, event );\n         }\n     }\n \n-    private void validateDateFormat( ValidationErrorReporter reporter, Event event )\n+    private boolean occuredAtDateIsMandatory( Event event, Program program )\n     {\n-        checkNotNull( event, TrackerImporterAssertErrors.EVENT_CANT_BE_NULL );\n-\n-        if ( event.getScheduledAt() != null && isNotValidDateString( event.getScheduledAt() ) )\n+        if ( program.isWithoutRegistration() )\n         {\n-            reporter.addError( newReport( TrackerErrorCode.E1051 )\n-                .addArg( event.getScheduledAt() ) );\n+            return true;\n         }\n \n-        if ( event.getOccurredAt() != null && isNotValidDateString( event.getOccurredAt() ) )\n-        {\n-            reporter.addError( newReport( TrackerErrorCode.E1052 )\n-                .addArg( event.getOccurredAt() ) );\n-        }\n+        EventStatus eventStatus = event.getStatus();\n+\n+        return eventStatus == EventStatus.ACTIVE || eventStatus == EventStatus.COMPLETED;\n     }\n-}\n\\ No newline at end of file\n+}\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "message": "Merge commit", "committedDate": null}, {"oid": "3e3dc98d92f0c13fb56cf17894eab06a78842133", "committedDate": "2020-08-04 17:20:37 +0200", "message": "feat: Enrollment/Events note persistence"}, {"oid": "3e3b32e56ff5554a0095396eddffceac65b6b8de", "committedDate": "2020-10-27 09:56:50 +0100", "message": "refactor: simplified calls to error reporting (#6437)"}, {"oid": "0bf55d776481f6511e5f9ebca5de1f2cf79777c0", "committedDate": "2020-11-19 13:55:46 +0100", "message": "refactor: New Tracker Error reporting refactor (#6706)"}, {"oid": "a9aa89a8d5134104503d1cbb43f96b06f3531569", "committedDate": "2020-12-02 11:10:05 +0100", "message": "fix: Manage event scheduleAt date [DHIS2-10009] (#6804)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "6e8f0d6c150b303d780b397f7646ff3383f16250", "committedDate": "2021-01-21 09:32:50 +0100", "message": "feat: new tracked dto's properties referring to a date, now use Instant instead of String [DHIS2-101239] (#7119)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "c0e9b28f4609a84d1287d93bc65f81321e00d78b", "committedDate": "2021-03-30 13:22:16 +0200", "message": "refactor: Removing uid field from tracker entities [TECH-579] (#7790)"}, {"oid": "fe04922e144ac69367a99840d5518edda2d67f38", "committedDate": "2021-06-03 08:17:10 +0200", "message": "fix: Make program field read-only in event payload [DHIS2-11225] (#8086)"}, {"oid": "aff1cb136bdfdf4af8213f8878967be42f5687e9", "committedDate": "2021-06-11 10:58:03 +0200", "message": "fix: Get correct program stage from preheated Program [DHIS2-11225] (#8175)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "97fa18701761c6993e20f2e7a3816ea689129480", "committedDate": "2022-01-11 15:31:02 +0100", "message": "chore: hooks should add errors via reporter directly TECH-880 (#9523)"}, {"oid": "1d8350a9e9ac100aaaa831894ba3f857b46e2474", "committedDate": "2022-01-13 14:15:17 +0100", "message": "chore: adding errors and warnings is responsibility of the ValidationErrorReporter TECH-880 (#9616)"}, {"oid": "c039b8f75c1d965414de926f04540dfaabdd104c", "committedDate": "2022-02-23 13:08:25 +0100", "message": "chore: Clean up service program rule module [TECH-938] (#9885)"}, {"oid": "ef0cbd365e47f1f88befb80d9650cce75280bd35", "committedDate": "2022-03-08 15:12:00 +0100", "message": "chore: move DB access and mutation to preheat and preprocessor DHIS2-12623 (#9904)"}, {"oid": "f7cfc83610c75486bbb0457dde057eaed777f3d2", "committedDate": "2022-05-27 15:15:25 +0200", "message": "chore: ValidationErrorReporter does not need the bunlde DHIS2-12519 (#10878)"}, {"oid": "b0a861c0308005b865cafa2344c1231c0a4f2bc3", "committedDate": "2022-12-02 13:36:08 +0100", "message": "fix: turn removeOnError into skipOnError DHIS2-14213 (#12457)"}, {"oid": "7ac68b368a1dbd9362973b30f7160399abe801a0", "committedDate": "2022-12-06 09:04:47 +0100", "message": "chore: move ValidationErrorReporter close to its usage (#12486)"}, {"oid": "33c7cfe3d47d3ad157e0cc1991ece017e9244bb5", "committedDate": "2022-12-13 13:59:20 +0000", "message": "chore: migrate event validators (#12527)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg5NjQ2OA==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r429896468", "body": "I know this is needed to make this work, but can we optimize this somehow? seems it can be quite heavy", "bodyText": "I know this is needed to make this work, but can we optimize this somehow? seems it can be quite heavy", "bodyHTML": "<p dir=\"auto\">I know this is needed to make this work, but can we optimize this somehow? seems it can be quite heavy</p>", "author": "mortenoh", "createdAt": "2020-05-25T11:58:13Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckDataRelationsValidationHook.java", "diffHunk": "@@ -0,0 +1,245 @@\n+package org.hisp.dhis.tracker.validation.hooks;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.hisp.dhis.category.CategoryCombo;\n+import org.hisp.dhis.category.CategoryOption;\n+import org.hisp.dhis.category.CategoryOptionCombo;\n+import org.hisp.dhis.category.CategoryService;\n+import org.hisp.dhis.commons.util.TextUtils;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.program.ProgramInstance;\n+import org.hisp.dhis.program.ProgramStage;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+import org.hisp.dhis.tracker.TrackerIdentifier;\n+import org.hisp.dhis.tracker.TrackerImportStrategy;\n+import org.hisp.dhis.tracker.domain.Enrollment;\n+import org.hisp.dhis.tracker.domain.Event;\n+import org.hisp.dhis.tracker.domain.TrackedEntity;\n+import org.hisp.dhis.tracker.preheat.TrackerPreheat;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n+import org.hisp.dhis.tracker.validation.TrackerImportValidationContext;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.HashSet;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+@Component\n+public class PreCheckDataRelationsValidationHook\n+    extends AbstractTrackerDtoValidationHook\n+{\n+\n+    @Autowired\n+    private CategoryService categoryService;\n+\n+    @Override\n+    public int getOrder()\n+    {\n+        return 4;\n+    }\n+\n+    @Override\n+    public void validateTrackedEntity( ValidationErrorReporter reporter,\n+        TrackedEntity trackedEntity )\n+    {\n+        // NOTHING TO DO HERE\n+    }\n+\n+    @Override\n+    public void validateEnrollment( ValidationErrorReporter reporter, Enrollment enrollment )\n+    {\n+        TrackerImportValidationContext context = reporter.getValidationContext();\n+\n+        Program program = context.getProgram( enrollment.getProgram() );\n+\n+        if ( !program.isRegistration() )\n+        {\n+            reporter.addError( newReport( TrackerErrorCode.E1014 )\n+                .addArg( program ) );\n+        }\n+\n+        TrackedEntityInstance tei = context.getTrackedEntityInstance( enrollment.getTrackedEntity() );\n+\n+        if ( tei == null )\n+        {\n+            reporter.addError( newReport( TrackerErrorCode.E1068 )\n+                .addArg( enrollment.getTrackedEntity() ) );\n+        }\n+\n+        if ( tei != null && program.getTrackedEntityType() != null\n+            && !program.getTrackedEntityType().equals( tei.getTrackedEntityType() ) )\n+        {\n+            reporter.addError( newReport( TrackerErrorCode.E1022 )\n+                .addArg( tei )\n+                .addArg( program ) );\n+        }\n+\n+        //TODO: This dont make sense\n+//        ProgramInstance programInstance = context.getProgramInstance(  enrollment.getEnrollment() );\n+//        if ( !bundle.getImportStrategy().isCreateOrCreateAndUpdate() && programInstance == null )\n+//        {\n+//            reporter.addError( newReport( TrackerErrorCode.E1015 )\n+//                .addArg( enrollment )\n+//                .addArg( enrollment.getEnrollment() ) );\n+//        }\n+    }\n+\n+    @Override\n+    public void validateEvent( ValidationErrorReporter reporter, Event event )\n+    {\n+        TrackerImportValidationContext context = reporter.getValidationContext();\n+        TrackerImportStrategy strategy = context.getStrategy( event );\n+\n+        Program program = context.getProgram( event.getProgram() );\n+\n+        if ( program.isRegistration() )\n+        {\n+            if ( context.getTrackedEntityInstance( event.getTrackedEntity() ) == null )\n+            {\n+                reporter.addError( newReport( TrackerErrorCode.E1036 )\n+                    .addArg( event ) );\n+            }\n+\n+            if ( strategy.isCreate() )\n+            {\n+                ProgramInstance programInstance = context.getProgramInstance( event.getEnrollment() );\n+                ProgramStage programStage = context.getProgramStage( event.getProgramStage() );\n+\n+                if ( programStage != null && programInstance != null\n+                    && !programStage.getRepeatable()\n+                    && programInstance.hasProgramStageInstance( programStage ) )\n+                {\n+                    reporter.addError( newReport( TrackerErrorCode.E1039 ) );\n+                }\n+            }\n+        }\n+\n+        validateEventCategoryCombo( reporter, event, program );\n+    }\n+\n+    protected void validateEventCategoryCombo( ValidationErrorReporter reporter,\n+        Event event, Program program )\n+    {\n+        TrackerImportValidationContext context = reporter.getValidationContext();\n+\n+        // if event has \"attribute option combo\" set only, fetch the aoc directly\n+        boolean aocEmpty = StringUtils.isEmpty( event.getAttributeOptionCombo() );\n+        boolean acoEmpty = StringUtils.isEmpty( event.getAttributeCategoryOptions() );\n+\n+        CategoryOptionCombo categoryOptionCombo = (CategoryOptionCombo) reporter.getValidationContext().getBundle()\n+            .getPreheat().getDefaults().get( CategoryOptionCombo.class );\n+\n+        if ( !aocEmpty && acoEmpty )\n+        {\n+            categoryOptionCombo = context.getCategoryOptionCombo( event.getAttributeOptionCombo() );\n+        }\n+        else if ( !aocEmpty && !acoEmpty && program.getCategoryCombo() != null )\n+        {\n+            String attributeCategoryOptions = event.getAttributeCategoryOptions();\n+            CategoryCombo categoryCombo = program.getCategoryCombo();\n+            String cacheKey = attributeCategoryOptions + categoryCombo.getUid();\n+\n+            Optional<String> cachedEventAOCProgramCC = reporter.getValidationContext()\n+                .getCachedEventAOCProgramCC( cacheKey );\n+\n+            if ( cachedEventAOCProgramCC.isPresent() )\n+            {\n+                categoryOptionCombo = context.getCategoryOptionCombo( cachedEventAOCProgramCC.get() );\n+            }\n+            else\n+            {\n+                Set<String> categoryOptions = TextUtils\n+                    .splitToArray( attributeCategoryOptions, TextUtils.SEMICOLON );\n+\n+                categoryOptionCombo = resolveCategoryOptionCombo( reporter,\n+                    categoryCombo, categoryOptions );\n+\n+                reporter.getValidationContext().putCachedEventAOCProgramCC( cacheKey,\n+                    categoryOptionCombo != null ? categoryOptionCombo.getUid() : null );\n+            }\n+        }\n+\n+        if ( categoryOptionCombo == null )\n+        {\n+            reporter.addError( newReport( TrackerErrorCode.E1115 )\n+                .addArg( event.getAttributeOptionCombo() ) );\n+        }\n+        else\n+        {\n+            reporter.getValidationContext()\n+                .cacheEventCategoryOptionCombo( event.getEvent(), categoryOptionCombo.getUid() );\n+        }\n+    }\n+\n+    private CategoryOptionCombo resolveCategoryOptionCombo( ValidationErrorReporter reporter,\n+        CategoryCombo programCategoryCombo, Set<String> attributeCategoryOptions )\n+    {\n+        Set<CategoryOption> categoryOptions = new HashSet<>();\n+\n+        for ( String uid : attributeCategoryOptions )\n+        {\n+            CategoryOption categoryOption = reporter.getValidationContext().getCategoryOption( uid );\n+            if ( categoryOption == null )\n+            {\n+                reporter.addError( newReport( TrackerErrorCode.E1116 )\n+                    .addArg( uid ) );\n+                return null;\n+            }\n+\n+            categoryOptions.add( categoryOption );\n+        }\n+\n+        CategoryOptionCombo attrOptCombo = categoryService", "originalCommit": "a59d4b4c1f3b0aa2ee51ac1bab3b372412ab878e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "3e3b32e56ff5554a0095396eddffceac65b6b8de", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckDataRelationsValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckDataRelationsValidationHook.java\nindex 0b6f1dfe7f..34c07c9a04 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckDataRelationsValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckDataRelationsValidationHook.java\n", "chunk": "@@ -216,8 +313,7 @@ public class PreCheckDataRelationsValidationHook\n             CategoryOption categoryOption = reporter.getValidationContext().getCategoryOption( uid );\n             if ( categoryOption == null )\n             {\n-                reporter.addError( newReport( TrackerErrorCode.E1116 )\n-                    .addArg( uid ) );\n+                addError( reporter, E1116, uid );\n                 return null;\n             }\n \n", "next_change": {"commit": "97fa18701761c6993e20f2e7a3816ea689129480", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckDataRelationsValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckDataRelationsValidationHook.java\nindex 34c07c9a04..84caed8373 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckDataRelationsValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckDataRelationsValidationHook.java\n", "chunk": "@@ -313,7 +294,7 @@ public class PreCheckDataRelationsValidationHook\n             CategoryOption categoryOption = reporter.getValidationContext().getCategoryOption( uid );\n             if ( categoryOption == null )\n             {\n-                addError( reporter, E1116, uid );\n+                addError( reporter, event, E1116, uid );\n                 return null;\n             }\n \n", "next_change": {"commit": "1d8350a9e9ac100aaaa831894ba3f857b46e2474", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckDataRelationsValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckDataRelationsValidationHook.java\nindex 84caed8373..c61da7a1ba 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckDataRelationsValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckDataRelationsValidationHook.java\n", "chunk": "@@ -294,7 +294,7 @@ public class PreCheckDataRelationsValidationHook\n             CategoryOption categoryOption = reporter.getValidationContext().getCategoryOption( uid );\n             if ( categoryOption == null )\n             {\n-                addError( reporter, event, E1116, uid );\n+                reporter.addError( event, E1116, uid );\n                 return null;\n             }\n \n", "next_change": {"commit": "5ff1a79c886b646c6e0289c6d14621c4d888b07c", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckDataRelationsValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckDataRelationsValidationHook.java\nindex c61da7a1ba..475c2b4ba4 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckDataRelationsValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckDataRelationsValidationHook.java\n", "chunk": "@@ -146,177 +166,354 @@ public class PreCheckDataRelationsValidationHook\n                 }\n             }\n         }\n+    }\n \n-        if ( !programHasOrgUnit( program, organisationUnit, context.getProgramWithOrgUnitsMap() ) )\n+    private void validateProgramHasOrgUnit( ValidationErrorReporter reporter, Event event,\n+        TrackerImportValidationContext context, OrganisationUnit organisationUnit, Program program )\n+    {\n+        if ( programDoesNotHaveOrgUnit( program, organisationUnit, context.getProgramWithOrgUnitsMap() ) )\n         {\n             reporter.addError( event, E1029, organisationUnit, program );\n         }\n+    }\n+\n+    private void validateEventCategoryOptionCombo( ValidationErrorReporter reporter,\n+        Event event, Program program )\n+    {\n+        boolean isValid = validateAttributeOptionComboExists( reporter, event );\n+        isValid = validateCategoryOptionsExist( reporter, event ) && isValid;\n+        isValid = validateDefaultProgramCategoryCombo( reporter, event, program ) && isValid;\n+        if ( !isValid )\n+        {\n+            // no need to do the next validations concerning relationships\n+            // between the AOC id, COs and the program CC\n+            // since not all AOC, COs exist or the AOC, COs violate programs\n+            // default CC rules\n+            return;\n+        }\n+\n+        isValid = validateAttributeOptionComboIsInProgramCategoryCombo( reporter, event, program );\n+        isValid = validateAttributeCategoryOptionsAreInProgramCategoryCombo( reporter, event ) && isValid;\n+        if ( !isValid )\n+        {\n+            // no need to resolve the AOC id using COs and program CC in case\n+            // event.AOC is empty\n+            // as we would not find it anyway\n+            // no need to cache the AOC id as the payload is invalid\n+            return;\n+        }\n \n-        validateEventCategoryCombo( reporter, event, program );\n+        CategoryOptionCombo aoc = resolveAttributeOptionCombo( reporter, event, program );\n+\n+        // We should have an AOC by this point. Exit if we do not. The logic of\n+        // AOC, COs, CC is complex and there is potential for\n+        // missing one of the many cases. Better wrongly invalidate an event\n+        // than persisting an invalid event as we\n+        // previously did.\n+        if ( !validateAttributeOptionComboFound( reporter, event, program, aoc ) )\n+            return;\n+        if ( !validateAttributeOptionComboMatchesCategoryOptions( reporter, event, program, aoc ) )\n+            return;\n+\n+        // TODO resolving and \"caching\" the AOC id should move into the preheat\n+        // as validations should not access the DB\n+        // We \"cache\" the AOC id for the duration of the import (as the cache is\n+        // tied to the context) so the subsequent\n+        // EventCategoryOptValidationHook can use the AOC id for validation.\n+        // That is necessary if the AOC id is not\n+        // provided in the payload and the program cc is non default.\n+        reporter.getValidationContext()\n+            .cacheEventCategoryOptionCombo( event.getUid(), aoc );\n     }\n \n-    @Override\n-    public void validateRelationship( ValidationErrorReporter reporter, Relationship relationship )\n+    private boolean validateAttributeOptionComboExists( ValidationErrorReporter reporter, Event event )\n     {\n-        validateRelationshipReference( reporter, relationship, relationship.getFrom() );\n-        validateRelationshipReference( reporter, relationship, relationship.getTo() );\n+        if ( hasNoAttributeOptionComboSet( event ) )\n+        {\n+            return true;\n+        }\n+\n+        CategoryOptionCombo categoryOptionCombo = reporter.getValidationContext().getBundle().getPreheat()\n+            .getCategoryOptionCombo( event.getAttributeOptionCombo() );\n+        if ( categoryOptionCombo == null )\n+        {\n+            reporter.addError( event, E1115, event.getAttributeOptionCombo() );\n+            return false;\n+        }\n+        return true;\n     }\n \n-    private void validateRelationshipReference( ValidationErrorReporter reporter, Relationship relationship,\n-        RelationshipItem item )\n+    private boolean hasNoAttributeOptionComboSet( Event event )\n     {\n-        Optional<String> uid = getUidFromRelationshipItem( item );\n-        TrackerType trackerType = relationshipItemValueType( item );\n+        return StringUtils.isBlank( event.getAttributeOptionCombo() );\n+    }\n \n-        TrackerImportValidationContext ctx = reporter.getValidationContext();\n+    private boolean validateCategoryOptionsExist( ValidationErrorReporter reporter, Event event )\n+    {\n+        if ( hasNoAttributeCategoryOptionsSet( event ) )\n+        {\n+            return true;\n+        }\n \n-        if ( TRACKED_ENTITY.equals( trackerType ) )\n+        boolean allCOsExist = true;\n+        Set<String> categoryOptions = parseCategoryOptions( event );\n+        TrackerPreheat preheat = reporter.getValidationContext().getBundle().getPreheat();\n+        for ( String id : categoryOptions )\n         {\n-            if ( uid.isPresent() && !ValidationUtils.trackedEntityInstanceExist( ctx, uid.get() ) )\n+            if ( preheat.getCategoryOption( id ) == null )\n             {\n-                reporter.addError( relationship, E4012, trackerType.getName(), uid.get() );\n+                reporter.addError( event, E1116, id );\n+                allCOsExist = false;\n             }\n         }\n-        else if ( ENROLLMENT.equals( trackerType ) )\n+        return allCOsExist;\n+    }\n+\n+    private boolean hasNoAttributeCategoryOptionsSet( Event event )\n+    {\n+        return StringUtils.isBlank( event.getAttributeCategoryOptions() );\n+    }\n+\n+    private Set<String> parseCategoryOptions( Event event )\n+    {\n+\n+        String cos = StringUtils.strip( event.getAttributeCategoryOptions() );\n+        if ( StringUtils.isBlank( cos ) )\n         {\n-            if ( uid.isPresent() && !ValidationUtils.enrollmentExist( ctx, uid.get() ) )\n-            {\n-                reporter.addError( relationship, E4012, trackerType.getName(), uid.get() );\n-            }\n+            return Collections.emptySet();\n+        }\n+\n+        return TextUtils\n+            .splitToArray( cos, TextUtils.SEMICOLON );\n+    }\n+\n+    /**\n+     * Validates that the event program has the default category combo if no AOC\n+     * or COs are given or if a default AOC is given.\n+     *\n+     * @param reporter validation error reporter\n+     * @param event event to validate\n+     * @param program event program from the preheat\n+     * @return return true if event program is default with valid aoc and co\n+     *         combinations\n+     */\n+    private boolean validateDefaultProgramCategoryCombo( ValidationErrorReporter reporter, Event event,\n+        Program program )\n+    {\n+        if ( hasNoAttributeOptionComboSet( event ) &&\n+            hasNoAttributeCategoryOptionsSet( event ) &&\n+            !program.getCategoryCombo().isDefault() )\n+        {\n+            reporter.addError( event, TrackerErrorCode.E1055 );\n+            return false;\n         }\n-        else if ( EVENT.equals( trackerType ) )\n+        CategoryOptionCombo aoc = reporter.getValidationContext().getBundle().getPreheat()\n+            .getCategoryOptionCombo( event.getAttributeOptionCombo() );\n+        if ( hasAttributeOptionComboSet( event ) &&\n+            aoc != null && aoc.getCategoryCombo().isDefault() &&\n+            !program.getCategoryCombo().isDefault() )\n         {\n-            if ( uid.isPresent() && !ValidationUtils.eventExist( ctx, uid.get() ) )\n-            {\n-                reporter.addError( relationship, E4012, trackerType.getName(), uid.get() );\n-            }\n+            reporter.addError( event, TrackerErrorCode.E1055 );\n+            return false;\n         }\n+\n+        return true;\n     }\n \n-    // TODO: This method needs some love and care, the logic here is very hard\n-    // to read.\n-    protected void validateEventCategoryCombo( ValidationErrorReporter reporter,\n-        Event event, Program program )\n+    private boolean hasAttributeOptionComboSet( Event event )\n     {\n-        TrackerImportValidationContext context = reporter.getValidationContext();\n-        TrackerPreheat preheat = reporter.getValidationContext().getBundle().getPreheat();\n+        return !hasNoAttributeOptionComboSet( event );\n+    }\n+\n+    private boolean validateAttributeOptionComboIsInProgramCategoryCombo( ValidationErrorReporter reporter, Event event,\n+        Program program )\n+    {\n+        if ( hasNoAttributeOptionComboSet( event ) )\n+        {\n+            return true;\n+        }\n \n-        // if event has \"attribute option combo\" set only, fetch the aoc\n-        // directly\n-        boolean optionComboIsEmpty = StringUtils.isEmpty( event.getAttributeOptionCombo() );\n-        boolean categoryOptionsIsEmpty = StringUtils.isEmpty( event.getAttributeCategoryOptions() );\n+        CategoryOptionCombo aoc = reporter.getValidationContext().getBundle().getPreheat()\n+            .getCategoryOptionCombo( event.getAttributeOptionCombo() );\n+        if ( !program.getCategoryCombo().equals( aoc.getCategoryCombo() ) )\n+        {\n+            reporter.addError( event, TrackerErrorCode.E1054,\n+                event.getAttributeOptionCombo(), program.getCategoryCombo() );\n+            return false;\n+        }\n \n-        CategoryOptionCombo categoryOptionCombo = null;\n+        return true;\n+    }\n \n-        if ( !optionComboIsEmpty && categoryOptionsIsEmpty )\n+    /**\n+     * Validates that given AOC and COs match. This ensures that a payload\n+     * contains all COs of an AOC and that every CO is in the AOC.\n+     *\n+     * When called after\n+     * {@link #validateAttributeOptionComboIsInProgramCategoryCombo} we also\n+     * know that the COs are in the event programs category combo.\n+     *\n+     * @param reporter validation error reporter\n+     * @param event event to validate\n+     * @return return true if cos are in event program cc, false otherwise\n+     */\n+    private boolean validateAttributeCategoryOptionsAreInProgramCategoryCombo( ValidationErrorReporter reporter,\n+        Event event )\n+    {\n+        if ( hasNoAttributeOptionComboSet( event ) || hasNoAttributeCategoryOptionsSet( event ) )\n         {\n-            categoryOptionCombo = context.getCategoryOptionCombo( event.getAttributeOptionCombo() );\n+            return true;\n         }\n-        else if ( !optionComboIsEmpty && program.getCategoryCombo() != null )\n+\n+        TrackerPreheat preheat = reporter.getValidationContext().getBundle().getPreheat();\n+        CategoryOptionCombo aoc = preheat.getCategoryOptionCombo( event.getAttributeOptionCombo() );\n+        if ( isNotAOCForCOs( preheat, event, aoc ) )\n         {\n-            categoryOptionCombo = resolveCategoryOptions( reporter, event, program, context );\n+            reporter.addError( event, TrackerErrorCode.E1053,\n+                event.getAttributeCategoryOptions(), event.getAttributeOptionCombo() );\n+            return false;\n         }\n \n-        categoryOptionCombo = getDefault( event, preheat, optionComboIsEmpty, categoryOptionCombo );\n+        return true;\n+    }\n \n-        if ( categoryOptionCombo == null )\n+    private CategoryOptionCombo resolveAttributeOptionCombo( ValidationErrorReporter reporter, Event event,\n+        Program program )\n+    {\n+\n+        TrackerPreheat preheat = reporter.getValidationContext().getBundle().getPreheat();\n+        CategoryOptionCombo aoc;\n+        if ( hasNoAttributeOptionComboSet( event ) && program.getCategoryCombo().isDefault() )\n         {\n-            reporter.addError( event, E1115, event.getAttributeOptionCombo() );\n+            aoc = preheat.getDefault( CategoryOptionCombo.class );\n+        }\n+        else if ( hasNoAttributeOptionComboSet( event ) && hasAttributeCategoryOptionsSet( event ) )\n+        {\n+            aoc = fetchAttributeOptionCombo( reporter, event, program );\n+            if ( aoc != null )\n+            {\n+                // TODO validation hooks should not need to mutate the payload.\n+                // This\n+                // should be moved to a pre-processor.\n+                event.setAttributeOptionCombo(\n+                    reporter.getValidationContext().getIdentifiers().getCategoryOptionComboIdScheme()\n+                        .getIdentifier( aoc ) );\n+                // TODO validation hooks should not need to populate the\n+                // preheat. Move this to the preheat.\n+                // We need the AOC in the preheat so we can allow users not to\n+                // send it. We need to set it on the\n+                // ProgramStageInstance before persisting.\n+                TrackerIdentifier identifier = preheat.getIdentifiers().getCategoryOptionComboIdScheme();\n+                preheat.put( identifier, aoc );\n+            }\n         }\n         else\n         {\n-            reporter.getValidationContext()\n-                .cacheEventCategoryOptionCombo( event.getUid(), categoryOptionCombo );\n+            // Note: there is a potential case when there are multiple AOCs in\n+            // the default CC\n+            // this should not happen, but it's technically possible. In this\n+            // case with event.AOC provided,\n+            // stick to the given AOC in the payload instead of\n+            // preheat.getDefault( CategoryOptionCombo.class )\n+            aoc = preheat.getCategoryOptionCombo( event.getAttributeOptionCombo() );\n         }\n+        return aoc;\n     }\n \n-    private CategoryOptionCombo resolveCategoryOptions( ValidationErrorReporter reporter, Event event, Program program,\n-        TrackerImportValidationContext context )\n+    private boolean hasAttributeCategoryOptionsSet( Event event )\n+    {\n+        return !hasNoAttributeCategoryOptionsSet( event );\n+    }\n+\n+    private CategoryOptionCombo fetchAttributeOptionCombo( ValidationErrorReporter reporter, Event event,\n+        Program program )\n     {\n-        CategoryOptionCombo categoryOptionCombo;\n-        String attributeCategoryOptions = event.getAttributeCategoryOptions();\n         CategoryCombo categoryCombo = program.getCategoryCombo();\n-        String cacheKey = attributeCategoryOptions + categoryCombo.getUid();\n+        String cacheKey = event.getAttributeCategoryOptions() + categoryCombo.getUid();\n \n-        Optional<String> cachedEventAOCProgramCC = reporter.getValidationContext()\n+        Optional<String> cachedAOCId = reporter.getValidationContext()\n             .getCachedEventAOCProgramCC( cacheKey );\n \n-        if ( cachedEventAOCProgramCC.isPresent() )\n+        TrackerPreheat preheat = reporter.getValidationContext().getBundle().getPreheat();\n+        if ( cachedAOCId.isPresent() )\n         {\n-            categoryOptionCombo = context.getCategoryOptionCombo( cachedEventAOCProgramCC.get() );\n+            return preheat.getCategoryOptionCombo( cachedAOCId.get() );\n         }\n-        else\n-        {\n-            Set<String> categoryOptions = TextUtils\n-                .splitToArray( attributeCategoryOptions, TextUtils.SEMICOLON );\n \n-            categoryOptionCombo = resolveCategoryOptionCombo( reporter, event,\n-                categoryCombo, categoryOptions );\n+        CategoryOptionCombo aoc = categoryService\n+            .getCategoryOptionCombo( categoryCombo, getCategoryOptions( preheat, event ) );\n+        reporter.getValidationContext().putCachedEventAOCProgramCC( cacheKey,\n+            aoc != null ? aoc.getUid() : null );\n+        return aoc;\n+    }\n+\n+    private Set<CategoryOption> getCategoryOptions( TrackerPreheat preheat, Event event )\n+    {\n \n-            reporter.getValidationContext().putCachedEventAOCProgramCC( cacheKey,\n-                categoryOptionCombo != null ? categoryOptionCombo.getUid() : null );\n+        Set<CategoryOption> categoryOptions = new HashSet<>();\n+        Set<String> categoryOptionIds = parseCategoryOptions( event );\n+        for ( String id : categoryOptionIds )\n+        {\n+            categoryOptions.add( preheat.getCategoryOption( id ) );\n         }\n-        return categoryOptionCombo;\n+        return categoryOptions;\n     }\n \n-    private CategoryOptionCombo getDefault( Event event, TrackerPreheat preheat, boolean aocIsEmpty,\n-        CategoryOptionCombo categoryOptionCombo )\n+    private boolean validateAttributeOptionComboFound( ValidationErrorReporter reporter, Event event, Program program,\n+        CategoryOptionCombo aoc )\n     {\n-        if ( categoryOptionCombo == null )\n+        if ( aoc != null )\n         {\n-            CategoryOptionCombo defaultCategoryCombo = preheat\n-                .getDefault( CategoryOptionCombo.class );\n-\n-            if ( defaultCategoryCombo != null && !aocIsEmpty )\n-            {\n-                String uid = defaultCategoryCombo.getUid();\n-                if ( uid.equals( event.getAttributeOptionCombo() ) )\n-                {\n-                    categoryOptionCombo = defaultCategoryCombo;\n-                }\n-            }\n-            else if ( defaultCategoryCombo != null )\n-            {\n-                categoryOptionCombo = defaultCategoryCombo;\n-            }\n+            return true;\n         }\n \n-        return categoryOptionCombo;\n+        addAOCAndCOCombinationError( event, reporter, program );\n+        return false;\n     }\n \n-    private CategoryOptionCombo resolveCategoryOptionCombo( ValidationErrorReporter reporter, Event event,\n-        CategoryCombo programCategoryCombo, Set<String> attributeCategoryOptions )\n+    private boolean validateAttributeOptionComboMatchesCategoryOptions( ValidationErrorReporter reporter, Event event,\n+        Program program,\n+        CategoryOptionCombo aoc )\n     {\n-        Set<CategoryOption> categoryOptions = new HashSet<>();\n-\n-        for ( String uid : attributeCategoryOptions )\n+        if ( hasNoAttributeCategoryOptionsSet( event ) )\n         {\n-            CategoryOption categoryOption = reporter.getValidationContext().getCategoryOption( uid );\n-            if ( categoryOption == null )\n-            {\n-                reporter.addError( event, E1116, uid );\n-                return null;\n-            }\n+            return true;\n+        }\n \n-            categoryOptions.add( categoryOption );\n+        if ( isNotAOCForCOs( reporter.getValidationContext().getBundle().getPreheat(), event, aoc ) )\n+        {\n+            addAOCAndCOCombinationError( event, reporter, program );\n+            return false;\n         }\n \n-        CategoryOptionCombo attrOptCombo = categoryService\n-            .getCategoryOptionCombo( programCategoryCombo, categoryOptions );\n+        return true;\n+    }\n \n-        if ( attrOptCombo == null )\n+    private void addAOCAndCOCombinationError( Event event, ValidationErrorReporter reporter, Program program )\n+    {\n+        // we used the program CC in finding the AOC id, if the AOC id was not\n+        // provided in the payload\n+        if ( hasNoAttributeOptionComboSet( event ) )\n         {\n-            reporter.addError( event, TrackerErrorCode.E1117, programCategoryCombo,\n-                categoryOptions );\n+            reporter.addError( event, TrackerErrorCode.E1117, program.getCategoryCombo(),\n+                event.getAttributeCategoryOptions() );\n         }\n         else\n         {\n-            TrackerPreheat preheat = reporter.getValidationContext().getBundle().getPreheat();\n-            TrackerIdentifier identifier = preheat.getIdentifiers().getCategoryOptionComboIdScheme();\n-            preheat.put( identifier, attrOptCombo );\n+            reporter.addError( event, TrackerErrorCode.E1117, event.getAttributeOptionCombo(),\n+                event.getAttributeCategoryOptions() );\n         }\n+    }\n \n-        return attrOptCombo;\n+    private boolean isNotAOCForCOs( TrackerPreheat preheat, Event event, CategoryOptionCombo aoc )\n+    {\n+        return !isAOCForCOs( aoc, getCategoryOptions( preheat, event ) );\n+    }\n+\n+    private boolean isAOCForCOs( CategoryOptionCombo aoc, Set<CategoryOption> categoryOptions )\n+    {\n+        return aoc.getCategoryOptions().containsAll( categoryOptions )\n+            && aoc.getCategoryOptions().size() == categoryOptions.size();\n     }\n \n     private String getEnrollmentProgramUidFromEvent( TrackerImportValidationContext context,\n", "next_change": {"commit": "ef0cbd365e47f1f88befb80d9650cce75280bd35", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckDataRelationsValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckDataRelationsValidationHook.java\nindex 475c2b4ba4..3b98d1cc9d 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckDataRelationsValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckDataRelationsValidationHook.java\n", "chunk": "@@ -516,21 +408,21 @@ public class PreCheckDataRelationsValidationHook\n             && aoc.getCategoryOptions().size() == categoryOptions.size();\n     }\n \n-    private String getEnrollmentProgramUidFromEvent( TrackerImportValidationContext context,\n+    private String getEnrollmentProgramUidFromEvent( TrackerBundle bundle,\n         Event event )\n     {\n-        ProgramInstance programInstance = context.getProgramInstance( event.getEnrollment() );\n+        ProgramInstance programInstance = bundle.getProgramInstance( event.getEnrollment() );\n         if ( programInstance != null )\n         {\n             return programInstance.getProgram().getUid();\n         }\n         else\n         {\n-            final Optional<ReferenceTrackerEntity> reference = context.getReference( event.getEnrollment() );\n+            final Optional<ReferenceTrackerEntity> reference = bundle.getPreheat()\n+                .getReference( event.getEnrollment() );\n             if ( reference.isPresent() )\n             {\n-                final Optional<Enrollment> enrollment = context.getBundle()\n-                    .getEnrollment( event.getEnrollment() );\n+                final Optional<Enrollment> enrollment = bundle.getEnrollment( event.getEnrollment() );\n                 if ( enrollment.isPresent() )\n                 {\n                     return enrollment.get().getProgram();\n", "next_change": {"commit": "5f63b52ac0a4f426145ae43affa58295f804812a", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckDataRelationsValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckDataRelationsValidationHook.java\nindex 3b98d1cc9d..bfc42a5f03 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckDataRelationsValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckDataRelationsValidationHook.java\n", "chunk": "@@ -425,7 +424,7 @@ public class PreCheckDataRelationsValidationHook\n                 final Optional<Enrollment> enrollment = bundle.getEnrollment( event.getEnrollment() );\n                 if ( enrollment.isPresent() )\n                 {\n-                    return enrollment.get().getProgram();\n+                    return bundle.getPreheat().getProgram( enrollment.get().getProgram() );\n                 }\n             }\n         }\n", "next_change": {"commit": "52fefdd8b43d479f29d4337b32b57f767d7996de", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckDataRelationsValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckDataRelationsValidationHook.java\nindex bfc42a5f03..f6849a7745 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckDataRelationsValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckDataRelationsValidationHook.java\n", "chunk": "@@ -431,29 +414,43 @@ public class PreCheckDataRelationsValidationHook\n         return null;\n     }\n \n-    private String getTrackedEntityTypeUidFromEnrollment( TrackerBundle bundle,\n+    private void validateTrackedEntityTypeMatchesPrograms( ValidationErrorReporter reporter, Program program,\n         Enrollment enrollment )\n+    {\n+\n+        if ( program.getTrackedEntityType() == null )\n+        {\n+            return;\n+        }\n+\n+        if ( !trackedEntityTypesMatch( reporter.getBundle(), program, enrollment ) )\n+        {\n+            reporter.addError( enrollment, E1022, enrollment.getTrackedEntity(), program );\n+        }\n+    }\n+\n+    private boolean trackedEntityTypesMatch( TrackerBundle bundle, Program program, Enrollment enrollment )\n     {\n         final TrackedEntityInstance trackedEntityInstance = bundle\n             .getTrackedEntityInstance( enrollment.getTrackedEntity() );\n         if ( trackedEntityInstance != null )\n         {\n-            return trackedEntityInstance.getTrackedEntityType().getUid();\n+            return program.getTrackedEntityType().getUid()\n+                .equals( trackedEntityInstance.getTrackedEntityType().getUid() );\n         }\n-        else\n+\n+        final Optional<ReferenceTrackerEntity> reference = bundle.getPreheat()\n+            .getReference( enrollment.getTrackedEntity() );\n+        if ( reference.isPresent() )\n         {\n-            final Optional<ReferenceTrackerEntity> reference = bundle.getPreheat()\n-                .getReference( enrollment.getTrackedEntity() );\n-            if ( reference.isPresent() )\n+            final Optional<TrackedEntity> tei = bundle.getTrackedEntity( enrollment.getTrackedEntity() );\n+            if ( tei.isPresent() )\n             {\n-                final Optional<TrackedEntity> tei = bundle.getTrackedEntity( enrollment.getTrackedEntity() );\n-                if ( tei.isPresent() )\n-                {\n-                    return tei.get().getTrackedEntityType();\n-                }\n+                return tei.get().getTrackedEntityType().isEqualTo( program.getTrackedEntityType() );\n             }\n         }\n-        return null;\n+\n+        return false;\n     }\n \n     @Override\n", "next_change": {"commit": "f7cfc83610c75486bbb0457dde057eaed777f3d2", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckDataRelationsValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckDataRelationsValidationHook.java\nindex f6849a7745..9de905aae3 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckDataRelationsValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckDataRelationsValidationHook.java\n", "chunk": "@@ -454,13 +455,15 @@ public class PreCheckDataRelationsValidationHook\n     }\n \n     @Override\n-    public void validateRelationship( ValidationErrorReporter reporter, Relationship relationship )\n+    public void validateRelationship( ValidationErrorReporter reporter, TrackerBundle bundle,\n+        Relationship relationship )\n     {\n-        validateRelationshipReference( reporter, relationship, relationship.getFrom() );\n-        validateRelationshipReference( reporter, relationship, relationship.getTo() );\n+        validateRelationshipReference( reporter, bundle, relationship, relationship.getFrom() );\n+        validateRelationshipReference( reporter, bundle, relationship, relationship.getTo() );\n     }\n \n-    private void validateRelationshipReference( ValidationErrorReporter reporter, Relationship relationship,\n+    private void validateRelationshipReference( ValidationErrorReporter reporter, TrackerBundle bundle,\n+        Relationship relationship,\n         RelationshipItem item )\n     {\n         Optional<String> uid = getUidFromRelationshipItem( item );\n", "next_change": {"commit": "fcf49b42b82222d7df3eb05a7b6425e2a3720a5e", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckDataRelationsValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventPreCheckDataRelationsValidator.java\nsimilarity index 71%\nrename from dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckDataRelationsValidationHook.java\nrename to dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventPreCheckDataRelationsValidator.java\nindex 9de905aae3..03c982e94c 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckDataRelationsValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventPreCheckDataRelationsValidator.java\n", "chunk": "@@ -393,106 +354,25 @@ public class PreCheckDataRelationsValidationHook\n \n     private Program getEnrollmentProgramFromEvent( TrackerBundle bundle, Event event )\n     {\n-        ProgramInstance programInstance = bundle.getProgramInstance( event.getEnrollment() );\n+        ProgramInstance programInstance = bundle.getPreheat().getEnrollment( event.getEnrollment() );\n         if ( programInstance != null )\n         {\n             return programInstance.getProgram();\n         }\n         else\n         {\n-            final Optional<ReferenceTrackerEntity> reference = bundle.getPreheat()\n-                .getReference( event.getEnrollment() );\n-            if ( reference.isPresent() )\n+            final Optional<Enrollment> enrollment = bundle.findEnrollmentByUid( event.getEnrollment() );\n+            if ( enrollment.isPresent() )\n             {\n-                final Optional<Enrollment> enrollment = bundle.getEnrollment( event.getEnrollment() );\n-                if ( enrollment.isPresent() )\n-                {\n-                    return bundle.getPreheat().getProgram( enrollment.get().getProgram() );\n-                }\n+                return bundle.getPreheat().getProgram( enrollment.get().getProgram() );\n             }\n         }\n         return null;\n     }\n \n-    private void validateTrackedEntityTypeMatchesPrograms( ValidationErrorReporter reporter, TrackerBundle bundle,\n-        Program program,\n-        Enrollment enrollment )\n-    {\n-\n-        if ( program.getTrackedEntityType() == null )\n-        {\n-            return;\n-        }\n-\n-        if ( !trackedEntityTypesMatch( bundle, program, enrollment ) )\n-        {\n-            reporter.addError( enrollment, E1022, enrollment.getTrackedEntity(), program );\n-        }\n-    }\n-\n-    private boolean trackedEntityTypesMatch( TrackerBundle bundle, Program program, Enrollment enrollment )\n-    {\n-        final TrackedEntityInstance trackedEntityInstance = bundle\n-            .getTrackedEntityInstance( enrollment.getTrackedEntity() );\n-        if ( trackedEntityInstance != null )\n-        {\n-            return program.getTrackedEntityType().getUid()\n-                .equals( trackedEntityInstance.getTrackedEntityType().getUid() );\n-        }\n-\n-        final Optional<ReferenceTrackerEntity> reference = bundle.getPreheat()\n-            .getReference( enrollment.getTrackedEntity() );\n-        if ( reference.isPresent() )\n-        {\n-            final Optional<TrackedEntity> tei = bundle.getTrackedEntity( enrollment.getTrackedEntity() );\n-            if ( tei.isPresent() )\n-            {\n-                return tei.get().getTrackedEntityType().isEqualTo( program.getTrackedEntityType() );\n-            }\n-        }\n-\n-        return false;\n-    }\n-\n-    @Override\n-    public void validateRelationship( ValidationErrorReporter reporter, TrackerBundle bundle,\n-        Relationship relationship )\n-    {\n-        validateRelationshipReference( reporter, bundle, relationship, relationship.getFrom() );\n-        validateRelationshipReference( reporter, bundle, relationship, relationship.getTo() );\n-    }\n-\n-    private void validateRelationshipReference( ValidationErrorReporter reporter, TrackerBundle bundle,\n-        Relationship relationship,\n-        RelationshipItem item )\n-    {\n-        Optional<String> uid = getUidFromRelationshipItem( item );\n-        TrackerType trackerType = relationshipItemValueType( item );\n-\n-        if ( TRACKED_ENTITY.equals( trackerType ) )\n-        {\n-            if ( uid.isPresent() && !ValidationUtils.trackedEntityInstanceExist( bundle, uid.get() ) )\n-            {\n-                reporter.addError( relationship, E4012, trackerType.getName(), uid.get() );\n-            }\n-        }\n-        else if ( ENROLLMENT.equals( trackerType ) )\n-        {\n-            if ( uid.isPresent() && !ValidationUtils.enrollmentExist( bundle, uid.get() ) )\n-            {\n-                reporter.addError( relationship, E4012, trackerType.getName(), uid.get() );\n-            }\n-        }\n-        else if ( EVENT.equals( trackerType ) && uid.isPresent() && !ValidationUtils.eventExist( bundle, uid.get() ) )\n-        {\n-            reporter.addError( relationship, E4012, trackerType.getName(), uid.get() );\n-        }\n-    }\n-\n     @Override\n-    public boolean removeOnError()\n+    public boolean skipOnError()\n     {\n         return true;\n     }\n-\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "message": "Merge commit", "committedDate": null}, {"oid": "615f9676329046c954fa4cbe07234273980b001a", "committedDate": "2020-07-14 20:13:08 +0800", "message": "* refactored EventCountValidationHook.java into PreCheckDataRelationsValidationHook.java"}, {"oid": "c07b9f0658356e7b60659651ee989460e50e1be8", "committedDate": "2020-07-14 15:02:03 +0200", "message": "fix: removed todo, fixed one test, ignored another"}, {"oid": "88b69c7c9d78d6eaf767a96c9b44f18f933fa510", "committedDate": "2020-07-14 15:35:22 +0200", "message": "chore: removed unused import"}, {"oid": "3e3dc98d92f0c13fb56cf17894eab06a78842133", "committedDate": "2020-08-04 17:20:37 +0200", "message": "feat: Enrollment/Events note persistence"}, {"oid": "3e3b32e56ff5554a0095396eddffceac65b6b8de", "committedDate": "2020-10-27 09:56:50 +0100", "message": "refactor: simplified calls to error reporting (#6437)"}, {"oid": "d095f2d4cf9aaac1e9aa973d4da6aa2f96104cc8", "committedDate": "2020-11-11 13:49:13 +0100", "message": "fix: allow validation to reference entities in the payload (#6617)"}, {"oid": "6e28dbfdaea7ceacbe560fe82ddba1e94c6cd203", "committedDate": "2020-11-11 17:41:55 +0100", "message": "fix: Exception when importing TEI with relationship [DHIS2-9856] (#6552)"}, {"oid": "75f1f8f36af280c508c43373c95dd1dcdeff9d99", "committedDate": "2020-11-17 14:39:38 +0100", "message": "fix: [DHIS2-9961] Add reference linked objects validation for relationships (#6697)"}, {"oid": "0bf55d776481f6511e5f9ebca5de1f2cf79777c0", "committedDate": "2020-11-19 13:55:46 +0100", "message": "refactor: New Tracker Error reporting refactor (#6706)"}, {"oid": "3e799d196b8f73ad216ea100a07ddd5f7dfc53e0", "committedDate": "2020-11-30 16:37:14 +0100", "message": "fix: remove long running transaction during Tracker Import (#6782)"}, {"oid": "fd978e815ac1e18c2c0986dac825a5d17dcf02cc", "committedDate": "2020-12-04 09:51:00 +0100", "message": "fix: Check if there are more than one event in not repeatable Program Stages in the payload [DHIS2-10021] (#6817)"}, {"oid": "16ae2da89c2d883763e33d9d0833f9b033d711c0", "committedDate": "2021-01-05 11:55:44 +0100", "message": "fix: Fix lazy exception for default category combo (#7014)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "71ba173f2a077fb4d42344e18712f7ba433eb5fb", "committedDate": "2021-02-25 09:42:49 +0100", "message": "fix: Remove useless supplier and validator (#7451)"}, {"oid": "33f99931474be434371691a439a56becb9f23025", "committedDate": "2021-04-07 10:36:15 +0200", "message": "refactor: Clean up metadata and relations validation hooks [TECH-579] (#7807)"}, {"oid": "5a236b7964bc1e38c927c9a390e6672756e997ce", "committedDate": "2021-04-19 14:49:15 +0200", "message": "feature: Review fields in domain objects and create updatable fields validator [DHIS2-10875] (#7842)"}, {"oid": "db043f2d252ab92e85756413bce7515a315e3caa", "committedDate": "2021-04-20 10:33:49 +0200", "message": "feat: Remove tracked entity field from event [DHIS2-10875] (#7878)"}, {"oid": "fe04922e144ac69367a99840d5518edda2d67f38", "committedDate": "2021-06-03 08:17:10 +0200", "message": "fix: Make program field read-only in event payload [DHIS2-11225] (#8086)"}, {"oid": "83030519745a21c0fa955974f69f4f46498267cd", "committedDate": "2021-06-09 09:44:41 +0200", "message": "fix: Make program mandatory for program events and program stage for tracker events [DHIS2-11225] (#8120)"}, {"oid": "7b96fb3ee32dc67e5686ce315d2a041825a74630", "committedDate": "2021-06-21 10:46:39 +0200", "message": "refactor: Refactor some validators and improved test coverage [TECH-589] (#8234)"}, {"oid": "8bd63f9823397e39458bd1cdab383c33c3231019", "committedDate": "2021-12-22 09:32:29 +0100", "message": "chore: move factory methods into class it creates TECH-880 (#9518)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "97fa18701761c6993e20f2e7a3816ea689129480", "committedDate": "2022-01-11 15:31:02 +0100", "message": "chore: hooks should add errors via reporter directly TECH-880 (#9523)"}, {"oid": "1d8350a9e9ac100aaaa831894ba3f857b46e2474", "committedDate": "2022-01-13 14:15:17 +0100", "message": "chore: adding errors and warnings is responsibility of the ValidationErrorReporter TECH-880 (#9616)"}, {"oid": "5ff1a79c886b646c6e0289c6d14621c4d888b07c", "committedDate": "2022-02-15 14:45:30 +0100", "message": "fix: attributeOptionCombo is not required in NTI DHIS2-12460 (#9747)"}, {"oid": "869fa986d53abcf6fc503e46e3b25e1b876e6c3d", "committedDate": "2022-03-01 13:31:17 +0100", "message": "feat: Add single data value endpoint with JSON body [DHIS2-12689] (#9886)"}, {"oid": "ef0cbd365e47f1f88befb80d9650cce75280bd35", "committedDate": "2022-03-08 15:12:00 +0100", "message": "chore: move DB access and mutation to preheat and preprocessor DHIS2-12623 (#9904)"}, {"oid": "5f63b52ac0a4f426145ae43affa58295f804812a", "committedDate": "2022-04-14 13:41:33 +0200", "message": "chore: split domain and view models DHIS2-12563 (#10379)"}, {"oid": "7f96b9e2e41e96d83226bcc182e3c88a2269ab18", "committedDate": "2022-05-04 11:04:17 +0200", "message": "fix: Event.attributeOptionCombo is a MetadataIdentifier (#10663)"}, {"oid": "382a593af44ef61dfedc169b98d266bc6411b09f", "committedDate": "2022-05-06 13:37:24 +0200", "message": "chore: Event.attributeCategoryOptions is a MetadataIdentifier DHIS2-12563 (#10724)"}, {"oid": "52fefdd8b43d479f29d4337b32b57f767d7996de", "committedDate": "2022-05-09 14:16:08 +0200", "message": "chore: TrackedEntity.trackedEntityType is a MetadataIdentifier DHIS2-12563 (#10744)"}, {"oid": "b567e74f7d703115fb7bc9802ed3b5f29d6917aa", "committedDate": "2022-05-23 09:13:55 +0200", "message": "fix: report ids or attribute value for MetadataIdentifiers DHIS2-12519 (#10873)"}, {"oid": "f7cfc83610c75486bbb0457dde057eaed777f3d2", "committedDate": "2022-05-27 15:15:25 +0200", "message": "chore: ValidationErrorReporter does not need the bunlde DHIS2-12519 (#10878)"}, {"oid": "b0a861c0308005b865cafa2344c1231c0a4f2bc3", "committedDate": "2022-12-02 13:36:08 +0100", "message": "fix: turn removeOnError into skipOnError DHIS2-14213 (#12457)"}, {"oid": "7ac68b368a1dbd9362973b30f7160399abe801a0", "committedDate": "2022-12-06 09:04:47 +0100", "message": "chore: move ValidationErrorReporter close to its usage (#12486)"}, {"oid": "07ff89195ce66114c2b5a744039c2b2ce7a8f440", "committedDate": "2022-12-13 09:51:43 +0100", "message": "chore: Clean up TrackerBundle methods [TECH-14298] (#12515)"}, {"oid": "5671ef5eb9ddfea7e2560e2db5c8d92ecbd54bc5", "committedDate": "2022-12-13 15:53:59 +0100", "message": "chore: Remove reference tree from Preheat [TECH-14298] (#12523)"}, {"oid": "fcf49b42b82222d7df3eb05a7b6425e2a3720a5e", "committedDate": "2022-12-14 11:06:36 +0100", "message": "chore: migrate pre check hooks to validator DHIS2-14298 (#12543)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg5NzkzMQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r429897931", "body": "No, this is an error, it would break the model completely ", "bodyText": "No, this is an error, it would break the model completely", "bodyHTML": "<p dir=\"auto\">No, this is an error, it would break the model completely</p>", "author": "mortenoh", "createdAt": "2020-05-25T12:01:51Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java", "diffHunk": "@@ -0,0 +1,203 @@\n+package org.hisp.dhis.tracker.validation.hooks;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.hisp.dhis.organisationunit.OrganisationUnit;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.program.ProgramInstance;\n+import org.hisp.dhis.program.ProgramStage;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.trackedentity.TrackedEntityType;\n+import org.hisp.dhis.tracker.TrackerIdentifier;\n+import org.hisp.dhis.tracker.TrackerImportStrategy;\n+import org.hisp.dhis.tracker.bundle.TrackerBundle;\n+import org.hisp.dhis.tracker.domain.Enrollment;\n+import org.hisp.dhis.tracker.domain.Event;\n+import org.hisp.dhis.tracker.domain.TrackedEntity;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n+import org.hisp.dhis.tracker.validation.TrackerImportValidationContext;\n+import org.springframework.stereotype.Component;\n+\n+import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+@Component\n+public class PreCheckMetaValidationHook\n+    extends AbstractTrackerDtoValidationHook\n+{\n+    @Override\n+    public int getOrder()\n+    {\n+        return 2;\n+    }\n+\n+    @Override\n+    public void validateTrackedEntity( ValidationErrorReporter reporter, TrackedEntity tei )\n+    {\n+        TrackerImportValidationContext context = reporter.getValidationContext();\n+\n+        OrganisationUnit organisationUnit = context.getOrganisationUnit( tei.getOrgUnit() );\n+\n+        if ( organisationUnit == null )\n+        {\n+            reporter.addError( newReport( TrackerErrorCode.E1011 )\n+                .addArg( reporter ) );\n+        }\n+\n+        TrackedEntityType entityType = context.getTrackedEntityType( tei.getTrackedEntityType() );\n+        if ( entityType == null )\n+        {\n+            reporter.addError( newReport( TrackerErrorCode.E1005 )\n+                .addArg( tei.getTrackedEntityType() ) );\n+        }\n+    }\n+\n+    @Override\n+    public void validateEnrollment( ValidationErrorReporter reporter, Enrollment enrollment )\n+    {\n+        TrackerImportValidationContext context = reporter.getValidationContext();\n+        TrackerImportStrategy strategy = context.getStrategy( enrollment );\n+\n+        OrganisationUnit organisationUnit = context.getOrganisationUnit( enrollment.getOrgUnit() );\n+        if ( organisationUnit == null )\n+        {\n+            reporter.addError( newReport( TrackerErrorCode.E1070 )\n+                .addArg( enrollment.getOrgUnit() ) );\n+        }\n+\n+        Program program = context.getProgram( enrollment.getProgram() );\n+        if ( program == null )\n+        {\n+            reporter.addError( newReport( TrackerErrorCode.E1069 )\n+                .addArg( enrollment.getProgram() ) );\n+        }\n+\n+        if ( (program != null && organisationUnit != null) && !program.hasOrganisationUnit( organisationUnit ) )\n+        {\n+            reporter.addError( newReport( TrackerErrorCode.E1041 )\n+                .addArg( organisationUnit )\n+                .addArg( program )\n+                .addArg( program.getOrganisationUnits() ) );\n+        }\n+\n+        //TODO: Change program is not allowed?", "originalCommit": "a59d4b4c1f3b0aa2ee51ac1bab3b372412ab878e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzgzMTc3OA==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r433831778", "bodyText": "Ok \ud83d\udc4d", "author": "netroms", "createdAt": "2020-06-02T12:19:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTg5NzkzMQ=="}], "type": "inlineReview", "revised_code": {"commit": "e7e003a2211cdf3f412ce75f95ef0f6be1973434", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\nindex 009bb88ccf..d98f8e394b 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\n", "chunk": "@@ -109,7 +103,6 @@ public class PreCheckMetaValidationHook\n                 .addArg( program.getOrganisationUnits() ) );\n         }\n \n-        //TODO: Change program is not allowed?\n         if ( strategy.isUpdate() )\n         {\n             ProgramInstance pi = context.getProgramInstance( enrollment.getEnrollment() );\n", "next_change": null}]}, "revised_code_in_main": {"commit": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\nindex 009bb88ccf..0beb1faac3 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\n", "chunk": "@@ -109,7 +111,6 @@ public class PreCheckMetaValidationHook\n                 .addArg( program.getOrganisationUnits() ) );\n         }\n \n-        //TODO: Change program is not allowed?\n         if ( strategy.isUpdate() )\n         {\n             ProgramInstance pi = context.getProgramInstance( enrollment.getEnrollment() );\n", "next_change": {"commit": "3e3b32e56ff5554a0095396eddffceac65b6b8de", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\nindex 0beb1faac3..99937ab5a8 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\n", "chunk": "@@ -90,25 +100,14 @@ public class PreCheckMetaValidationHook\n         TrackerImportStrategy strategy = context.getStrategy( enrollment );\n \n         OrganisationUnit organisationUnit = context.getOrganisationUnit( enrollment.getOrgUnit() );\n-        if ( organisationUnit == null )\n-        {\n-            reporter.addError( newReport( TrackerErrorCode.E1070 )\n-                .addArg( enrollment.getOrgUnit() ) );\n-        }\n+        addErrorIfNull( organisationUnit, reporter, E1070, enrollment.getOrgUnit() );\n \n         Program program = context.getProgram( enrollment.getProgram() );\n-        if ( program == null )\n-        {\n-            reporter.addError( newReport( TrackerErrorCode.E1069 )\n-                .addArg( enrollment.getProgram() ) );\n-        }\n+        addErrorIfNull( program,  reporter, E1069, enrollment.getProgram() );\n \n         if ( (program != null && organisationUnit != null) && !program.hasOrganisationUnit( organisationUnit ) )\n         {\n-            reporter.addError( newReport( TrackerErrorCode.E1041 )\n-                .addArg( organisationUnit )\n-                .addArg( program )\n-                .addArg( program.getOrganisationUnits() ) );\n+            addError( reporter, E1041, organisationUnit, program, program.getOrganisationUnits() );\n         }\n \n         if ( strategy.isUpdate() )\n", "next_change": {"commit": "f1ee41f1845d51b9efa6c5f5c666371ee503297a", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\nindex 99937ab5a8..973f446628 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\n", "chunk": "@@ -114,7 +111,7 @@ public class PreCheckMetaValidationHook\n         {\n             ProgramInstance pi = context.getProgramInstance( enrollment.getEnrollment() );\n             Program existingProgram = pi.getProgram();\n-            if ( !existingProgram.equals( program ) )\n+            if ( program != null && !existingProgram.getUid().equals( program.getUid() ) )\n             {\n                 addError( reporter, E1094, pi, existingProgram );\n             }\n", "next_change": {"commit": "33f99931474be434371691a439a56becb9f23025", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\nindex 973f446628..7d67228fdf 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\n", "chunk": "@@ -94,49 +74,30 @@ public class PreCheckMetaValidationHook\n     public void validateEnrollment( ValidationErrorReporter reporter, Enrollment enrollment )\n     {\n         TrackerImportValidationContext context = reporter.getValidationContext();\n-        TrackerImportStrategy strategy = context.getStrategy( enrollment );\n \n         OrganisationUnit organisationUnit = context.getOrganisationUnit( enrollment.getOrgUnit() );\n         addErrorIfNull( organisationUnit, reporter, E1070, enrollment.getOrgUnit() );\n \n         Program program = context.getProgram( enrollment.getProgram() );\n-        addErrorIfNull( program,  reporter, E1069, enrollment.getProgram() );\n-\n-        if ( (program != null && organisationUnit != null) && !program.hasOrganisationUnit( organisationUnit ) )\n-        {\n-            addError( reporter, E1041, organisationUnit, program, program.getOrganisationUnits() );\n-        }\n+        addErrorIfNull( program, reporter, E1069, enrollment.getProgram() );\n \n-        if ( strategy.isUpdate() )\n-        {\n-            ProgramInstance pi = context.getProgramInstance( enrollment.getEnrollment() );\n-            Program existingProgram = pi.getProgram();\n-            if ( program != null && !existingProgram.getUid().equals( program.getUid() ) )\n-            {\n-                addError( reporter, E1094, pi, existingProgram );\n-            }\n-        }\n+        addErrorIf( () -> !trackedEntityInstanceExist( context, enrollment.getTrackedEntity() ),\n+            reporter, E1068, enrollment.getTrackedEntity() );\n     }\n \n     @Override\n     public void validateEvent( ValidationErrorReporter reporter, Event event )\n     {\n         TrackerImportValidationContext context = reporter.getValidationContext();\n-        TrackerImportStrategy strategy = context.getStrategy( event );\n-        TrackerBundle bundle = context.getBundle();\n \n         OrganisationUnit organisationUnit = context.getOrganisationUnit( event.getOrgUnit() );\n         addErrorIfNull( organisationUnit, reporter, E1011, event.getOrgUnit() );\n \n         Program program = context.getProgram( event.getProgram() );\n+        addErrorIfNull( program, reporter, E1010, event.getProgram() );\n+\n         ProgramStage programStage = context.getProgramStage( event.getProgramStage() );\n-        if ( program != null )\n-        {\n-            addErrorIf( () -> program.isRegistration() && StringUtils.isEmpty( event.getEnrollment() ), reporter, E1033,\n-                event.getEvent() );\n-        }\n-        validateEventProgramAndProgramStage( reporter, event, context, strategy, bundle, program, programStage );\n-        validateDataElementForDataValues( reporter, event, context );\n+        addErrorIfNull( programStage, reporter, E1013, event.getProgramStage() );\n     }\n \n     @Override\n", "next_change": {"commit": "fe04922e144ac69367a99840d5518edda2d67f38", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\nindex 7d67228fdf..ebe2ced3f8 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\n", "chunk": "@@ -93,9 +93,6 @@ public class PreCheckMetaValidationHook\n         OrganisationUnit organisationUnit = context.getOrganisationUnit( event.getOrgUnit() );\n         addErrorIfNull( organisationUnit, reporter, E1011, event.getOrgUnit() );\n \n-        Program program = context.getProgram( event.getProgram() );\n-        addErrorIfNull( program, reporter, E1010, event.getProgram() );\n-\n         ProgramStage programStage = context.getProgramStage( event.getProgramStage() );\n         addErrorIfNull( programStage, reporter, E1013, event.getProgramStage() );\n     }\n", "next_change": {"commit": "83030519745a21c0fa955974f69f4f46498267cd", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\nindex ebe2ced3f8..7d67228fdf 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\n", "chunk": "@@ -93,6 +93,9 @@ public class PreCheckMetaValidationHook\n         OrganisationUnit organisationUnit = context.getOrganisationUnit( event.getOrgUnit() );\n         addErrorIfNull( organisationUnit, reporter, E1011, event.getOrgUnit() );\n \n+        Program program = context.getProgram( event.getProgram() );\n+        addErrorIfNull( program, reporter, E1010, event.getProgram() );\n+\n         ProgramStage programStage = context.getProgramStage( event.getProgramStage() );\n         addErrorIfNull( programStage, reporter, E1013, event.getProgramStage() );\n     }\n", "next_change": {"commit": "97fa18701761c6993e20f2e7a3816ea689129480", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\nindex 7d67228fdf..56208e1125 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\n", "chunk": "@@ -91,13 +97,13 @@ public class PreCheckMetaValidationHook\n         TrackerImportValidationContext context = reporter.getValidationContext();\n \n         OrganisationUnit organisationUnit = context.getOrganisationUnit( event.getOrgUnit() );\n-        addErrorIfNull( organisationUnit, reporter, E1011, event.getOrgUnit() );\n+        addErrorIfNull( organisationUnit, reporter, event, E1011, event.getOrgUnit() );\n \n         Program program = context.getProgram( event.getProgram() );\n-        addErrorIfNull( program, reporter, E1010, event.getProgram() );\n+        addErrorIfNull( program, reporter, event, E1010, event.getProgram() );\n \n         ProgramStage programStage = context.getProgramStage( event.getProgramStage() );\n-        addErrorIfNull( programStage, reporter, E1013, event.getProgramStage() );\n+        addErrorIfNull( programStage, reporter, event, E1013, event.getProgramStage() );\n     }\n \n     @Override\n", "next_change": {"commit": "1d8350a9e9ac100aaaa831894ba3f857b46e2474", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\nindex 56208e1125..8062876289 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\n", "chunk": "@@ -97,13 +97,13 @@ public class PreCheckMetaValidationHook\n         TrackerImportValidationContext context = reporter.getValidationContext();\n \n         OrganisationUnit organisationUnit = context.getOrganisationUnit( event.getOrgUnit() );\n-        addErrorIfNull( organisationUnit, reporter, event, E1011, event.getOrgUnit() );\n+        reporter.addErrorIfNull( organisationUnit, event, E1011, event.getOrgUnit() );\n \n         Program program = context.getProgram( event.getProgram() );\n-        addErrorIfNull( program, reporter, event, E1010, event.getProgram() );\n+        reporter.addErrorIfNull( program, event, E1010, event.getProgram() );\n \n         ProgramStage programStage = context.getProgramStage( event.getProgramStage() );\n-        addErrorIfNull( programStage, reporter, event, E1013, event.getProgramStage() );\n+        reporter.addErrorIfNull( programStage, event, E1013, event.getProgramStage() );\n     }\n \n     @Override\n", "next_change": {"commit": "ef0cbd365e47f1f88befb80d9650cce75280bd35", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\nindex 8062876289..ee5768842d 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\n", "chunk": "@@ -79,39 +78,36 @@ public class PreCheckMetaValidationHook\n     @Override\n     public void validateEnrollment( ValidationErrorReporter reporter, Enrollment enrollment )\n     {\n-        TrackerImportValidationContext context = reporter.getValidationContext();\n-\n-        OrganisationUnit organisationUnit = context.getOrganisationUnit( enrollment.getOrgUnit() );\n+        OrganisationUnit organisationUnit = reporter.getBundle().getPreheat()\n+            .getOrganisationUnit( enrollment.getOrgUnit() );\n         reporter.addErrorIfNull( organisationUnit, enrollment, E1070, enrollment.getOrgUnit() );\n \n-        Program program = context.getProgram( enrollment.getProgram() );\n+        Program program = reporter.getBundle().getPreheat().getProgram( enrollment.getProgram() );\n         reporter.addErrorIfNull( program, enrollment, E1069, enrollment.getProgram() );\n \n-        reporter.addErrorIf( () -> !trackedEntityInstanceExist( context, enrollment.getTrackedEntity() ), enrollment,\n+        reporter.addErrorIf( () -> !trackedEntityInstanceExist( reporter.getBundle(), enrollment.getTrackedEntity() ),\n+            enrollment,\n             E1068, enrollment.getTrackedEntity() );\n     }\n \n     @Override\n     public void validateEvent( ValidationErrorReporter reporter, Event event )\n     {\n-        TrackerImportValidationContext context = reporter.getValidationContext();\n-\n-        OrganisationUnit organisationUnit = context.getOrganisationUnit( event.getOrgUnit() );\n+        OrganisationUnit organisationUnit = reporter.getBundle().getPreheat().getOrganisationUnit( event.getOrgUnit() );\n         reporter.addErrorIfNull( organisationUnit, event, E1011, event.getOrgUnit() );\n \n-        Program program = context.getProgram( event.getProgram() );\n+        Program program = reporter.getBundle().getPreheat().getProgram( event.getProgram() );\n         reporter.addErrorIfNull( program, event, E1010, event.getProgram() );\n \n-        ProgramStage programStage = context.getProgramStage( event.getProgramStage() );\n+        ProgramStage programStage = reporter.getBundle().getPreheat().getProgramStage( event.getProgramStage() );\n         reporter.addErrorIfNull( programStage, event, E1013, event.getProgramStage() );\n     }\n \n     @Override\n     public void validateRelationship( ValidationErrorReporter reporter, Relationship relationship )\n     {\n-        TrackerImportValidationContext context = reporter.getValidationContext();\n-\n-        RelationshipType relationshipType = context.getRelationShipType( relationship.getRelationshipType() );\n+        TrackerPreheat preheat = reporter.getBundle().getPreheat();\n+        RelationshipType relationshipType = preheat.get( RelationshipType.class, relationship.getRelationshipType() );\n \n         reporter.addErrorIfNull( relationshipType, relationship, E4006, relationship.getRelationshipType() );\n     }\n", "next_change": {"commit": "df4eaf29ba29ee71a727a1c072fd4bcb03bb4bc9", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\nindex ee5768842d..e01dc213cd 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\n", "chunk": "@@ -107,7 +108,7 @@ public class PreCheckMetaValidationHook\n     public void validateRelationship( ValidationErrorReporter reporter, Relationship relationship )\n     {\n         TrackerPreheat preheat = reporter.getBundle().getPreheat();\n-        RelationshipType relationshipType = preheat.get( RelationshipType.class, relationship.getRelationshipType() );\n+        RelationshipType relationshipType = preheat.getRelationshipType( relationship.getRelationshipType() );\n \n         reporter.addErrorIfNull( relationshipType, relationship, E4006, relationship.getRelationshipType() );\n     }\n", "next_change": {"commit": "f7cfc83610c75486bbb0457dde057eaed777f3d2", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\nindex e01dc213cd..e6eda46092 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\n", "chunk": "@@ -76,38 +76,37 @@ public class PreCheckMetaValidationHook\n     }\n \n     @Override\n-    public void validateEnrollment( ValidationErrorReporter reporter, Enrollment enrollment )\n+    public void validateEnrollment( ValidationErrorReporter reporter, TrackerBundle bundle, Enrollment enrollment )\n     {\n-        OrganisationUnit organisationUnit = reporter.getBundle().getPreheat()\n-            .getOrganisationUnit( enrollment.getOrgUnit() );\n+        OrganisationUnit organisationUnit = bundle.getPreheat().getOrganisationUnit( enrollment.getOrgUnit() );\n         reporter.addErrorIfNull( organisationUnit, enrollment, E1070, enrollment.getOrgUnit() );\n \n-        Program program = reporter.getBundle().getPreheat().getProgram( enrollment.getProgram() );\n-        reporter.addErrorIfNull( program, enrollment, E1069, enrollment.getProgram().getIdentifierOrAttributeValue() );\n+        Program program = bundle.getPreheat().getProgram( enrollment.getProgram() );\n+        reporter.addErrorIfNull( program, enrollment, E1069, enrollment.getProgram() );\n \n-        reporter.addErrorIf( () -> !trackedEntityInstanceExist( reporter.getBundle(), enrollment.getTrackedEntity() ),\n+        reporter.addErrorIf( () -> !trackedEntityInstanceExist( bundle, enrollment.getTrackedEntity() ),\n             enrollment,\n             E1068, enrollment.getTrackedEntity() );\n     }\n \n     @Override\n-    public void validateEvent( ValidationErrorReporter reporter, Event event )\n+    public void validateEvent( ValidationErrorReporter reporter, TrackerBundle bundle, Event event )\n     {\n-        OrganisationUnit organisationUnit = reporter.getBundle().getPreheat().getOrganisationUnit( event.getOrgUnit() );\n+        OrganisationUnit organisationUnit = bundle.getPreheat().getOrganisationUnit( event.getOrgUnit() );\n         reporter.addErrorIfNull( organisationUnit, event, E1011, event.getOrgUnit() );\n \n-        Program program = reporter.getBundle().getPreheat().getProgram( event.getProgram() );\n-        reporter.addErrorIfNull( program, event, E1010,\n-            event.getProgram().getIdentifierOrAttributeValue() );\n+        Program program = bundle.getPreheat().getProgram( event.getProgram() );\n+        reporter.addErrorIfNull( program, event, E1010, event.getProgram() );\n \n-        ProgramStage programStage = reporter.getBundle().getPreheat().getProgramStage( event.getProgramStage() );\n+        ProgramStage programStage = bundle.getPreheat().getProgramStage( event.getProgramStage() );\n         reporter.addErrorIfNull( programStage, event, E1013, event.getProgramStage() );\n     }\n \n     @Override\n-    public void validateRelationship( ValidationErrorReporter reporter, Relationship relationship )\n+    public void validateRelationship( ValidationErrorReporter reporter, TrackerBundle bundle,\n+        Relationship relationship )\n     {\n-        TrackerPreheat preheat = reporter.getBundle().getPreheat();\n+        TrackerPreheat preheat = bundle.getPreheat();\n         RelationshipType relationshipType = preheat.getRelationshipType( relationship.getRelationshipType() );\n \n         reporter.addErrorIfNull( relationshipType, relationship, E4006, relationship.getRelationshipType() );\n", "next_change": {"commit": "b0a861c0308005b865cafa2344c1231c0a4f2bc3", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\nindex e6eda46092..3eed397428 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\n", "chunk": "@@ -113,7 +114,7 @@ public class PreCheckMetaValidationHook\n     }\n \n     @Override\n-    public boolean removeOnError()\n+    public boolean skipOnError()\n     {\n         return true;\n     }\n", "next_change": {"commit": "e64a40be0dc9744a6a9bb33f4239f1f57cd2e02d", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\ndeleted file mode 100644\nindex 3eed397428..0000000000\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\n+++ /dev/null\n", "chunk": "@@ -1,122 +0,0 @@\n-/*\n- * Copyright (c) 2004-2022, University of Oslo\n- * All rights reserved.\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions are met:\n- * Redistributions of source code must retain the above copyright notice, this\n- * list of conditions and the following disclaimer.\n- *\n- * Redistributions in binary form must reproduce the above copyright notice,\n- * this list of conditions and the following disclaimer in the documentation\n- * and/or other materials provided with the distribution.\n- * Neither the name of the HISP project nor the names of its contributors may\n- * be used to endorse or promote products derived from this software without\n- * specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n- * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n- * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n- * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n- * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n- * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n- * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- */\n-package org.hisp.dhis.tracker.validation.hooks;\n-\n-import static org.hisp.dhis.tracker.report.TrackerErrorCode.E1005;\n-import static org.hisp.dhis.tracker.report.TrackerErrorCode.E1010;\n-import static org.hisp.dhis.tracker.report.TrackerErrorCode.E1011;\n-import static org.hisp.dhis.tracker.report.TrackerErrorCode.E1013;\n-import static org.hisp.dhis.tracker.report.TrackerErrorCode.E1068;\n-import static org.hisp.dhis.tracker.report.TrackerErrorCode.E1069;\n-import static org.hisp.dhis.tracker.report.TrackerErrorCode.E1070;\n-import static org.hisp.dhis.tracker.report.TrackerErrorCode.E4006;\n-import static org.hisp.dhis.tracker.validation.hooks.ValidationUtils.trackedEntityInstanceExist;\n-\n-import org.hisp.dhis.organisationunit.OrganisationUnit;\n-import org.hisp.dhis.program.Program;\n-import org.hisp.dhis.program.ProgramStage;\n-import org.hisp.dhis.relationship.RelationshipType;\n-import org.hisp.dhis.trackedentity.TrackedEntityType;\n-import org.hisp.dhis.tracker.bundle.TrackerBundle;\n-import org.hisp.dhis.tracker.domain.Enrollment;\n-import org.hisp.dhis.tracker.domain.Event;\n-import org.hisp.dhis.tracker.domain.Relationship;\n-import org.hisp.dhis.tracker.domain.TrackedEntity;\n-import org.hisp.dhis.tracker.preheat.TrackerPreheat;\n-import org.hisp.dhis.tracker.report.TrackerErrorCode;\n-import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n-import org.hisp.dhis.tracker.validation.TrackerValidationHook;\n-import org.springframework.stereotype.Component;\n-\n-/**\n- * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n- */\n-@Component\n-public class PreCheckMetaValidationHook\n-    implements TrackerValidationHook\n-{\n-    @Override\n-    public void validateTrackedEntity( ValidationErrorReporter reporter, TrackerBundle bundle, TrackedEntity tei )\n-    {\n-        OrganisationUnit organisationUnit = bundle.getPreheat().getOrganisationUnit( tei.getOrgUnit() );\n-        if ( organisationUnit == null )\n-        {\n-            reporter.addError( tei, TrackerErrorCode.E1049, tei.getOrgUnit() );\n-        }\n-\n-        TrackedEntityType entityType = bundle.getPreheat().getTrackedEntityType( tei.getTrackedEntityType() );\n-        if ( entityType == null )\n-        {\n-            reporter.addError( tei, E1005, tei.getTrackedEntityType() );\n-        }\n-    }\n-\n-    @Override\n-    public void validateEnrollment( ValidationErrorReporter reporter, TrackerBundle bundle, Enrollment enrollment )\n-    {\n-        OrganisationUnit organisationUnit = bundle.getPreheat().getOrganisationUnit( enrollment.getOrgUnit() );\n-        reporter.addErrorIfNull( organisationUnit, enrollment, E1070, enrollment.getOrgUnit() );\n-\n-        Program program = bundle.getPreheat().getProgram( enrollment.getProgram() );\n-        reporter.addErrorIfNull( program, enrollment, E1069, enrollment.getProgram() );\n-\n-        reporter.addErrorIf( () -> !trackedEntityInstanceExist( bundle, enrollment.getTrackedEntity() ),\n-            enrollment,\n-            E1068, enrollment.getTrackedEntity() );\n-    }\n-\n-    @Override\n-    public void validateEvent( ValidationErrorReporter reporter, TrackerBundle bundle, Event event )\n-    {\n-        OrganisationUnit organisationUnit = bundle.getPreheat().getOrganisationUnit( event.getOrgUnit() );\n-        reporter.addErrorIfNull( organisationUnit, event, E1011, event.getOrgUnit() );\n-\n-        Program program = bundle.getPreheat().getProgram( event.getProgram() );\n-        reporter.addErrorIfNull( program, event, E1010, event.getProgram() );\n-\n-        ProgramStage programStage = bundle.getPreheat().getProgramStage( event.getProgramStage() );\n-        reporter.addErrorIfNull( programStage, event, E1013, event.getProgramStage() );\n-    }\n-\n-    @Override\n-    public void validateRelationship( ValidationErrorReporter reporter, TrackerBundle bundle,\n-        Relationship relationship )\n-    {\n-        TrackerPreheat preheat = bundle.getPreheat();\n-        RelationshipType relationshipType = preheat.getRelationshipType( relationship.getRelationshipType() );\n-\n-        reporter.addErrorIfNull( relationshipType, relationship, E4006, relationship.getRelationshipType() );\n-    }\n-\n-    @Override\n-    public boolean skipOnError()\n-    {\n-        return true;\n-    }\n-\n-}\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}, {"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\nindex 0beb1faac3..99937ab5a8 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\n", "chunk": "@@ -117,9 +116,7 @@ public class PreCheckMetaValidationHook\n             Program existingProgram = pi.getProgram();\n             if ( !existingProgram.equals( program ) )\n             {\n-                reporter.addError( newReport( TrackerErrorCode.E1094 )\n-                    .addArg( pi )\n-                    .addArg( existingProgram ) );\n+                addError( reporter, E1094, pi, existingProgram );\n             }\n         }\n     }\n", "next_change": {"commit": "f1ee41f1845d51b9efa6c5f5c666371ee503297a", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\nindex 99937ab5a8..973f446628 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\n", "chunk": "@@ -114,7 +111,7 @@ public class PreCheckMetaValidationHook\n         {\n             ProgramInstance pi = context.getProgramInstance( enrollment.getEnrollment() );\n             Program existingProgram = pi.getProgram();\n-            if ( !existingProgram.equals( program ) )\n+            if ( program != null && !existingProgram.getUid().equals( program.getUid() ) )\n             {\n                 addError( reporter, E1094, pi, existingProgram );\n             }\n", "next_change": {"commit": "33f99931474be434371691a439a56becb9f23025", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\nindex 973f446628..7d67228fdf 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\n", "chunk": "@@ -94,49 +74,30 @@ public class PreCheckMetaValidationHook\n     public void validateEnrollment( ValidationErrorReporter reporter, Enrollment enrollment )\n     {\n         TrackerImportValidationContext context = reporter.getValidationContext();\n-        TrackerImportStrategy strategy = context.getStrategy( enrollment );\n \n         OrganisationUnit organisationUnit = context.getOrganisationUnit( enrollment.getOrgUnit() );\n         addErrorIfNull( organisationUnit, reporter, E1070, enrollment.getOrgUnit() );\n \n         Program program = context.getProgram( enrollment.getProgram() );\n-        addErrorIfNull( program,  reporter, E1069, enrollment.getProgram() );\n-\n-        if ( (program != null && organisationUnit != null) && !program.hasOrganisationUnit( organisationUnit ) )\n-        {\n-            addError( reporter, E1041, organisationUnit, program, program.getOrganisationUnits() );\n-        }\n+        addErrorIfNull( program, reporter, E1069, enrollment.getProgram() );\n \n-        if ( strategy.isUpdate() )\n-        {\n-            ProgramInstance pi = context.getProgramInstance( enrollment.getEnrollment() );\n-            Program existingProgram = pi.getProgram();\n-            if ( program != null && !existingProgram.getUid().equals( program.getUid() ) )\n-            {\n-                addError( reporter, E1094, pi, existingProgram );\n-            }\n-        }\n+        addErrorIf( () -> !trackedEntityInstanceExist( context, enrollment.getTrackedEntity() ),\n+            reporter, E1068, enrollment.getTrackedEntity() );\n     }\n \n     @Override\n     public void validateEvent( ValidationErrorReporter reporter, Event event )\n     {\n         TrackerImportValidationContext context = reporter.getValidationContext();\n-        TrackerImportStrategy strategy = context.getStrategy( event );\n-        TrackerBundle bundle = context.getBundle();\n \n         OrganisationUnit organisationUnit = context.getOrganisationUnit( event.getOrgUnit() );\n         addErrorIfNull( organisationUnit, reporter, E1011, event.getOrgUnit() );\n \n         Program program = context.getProgram( event.getProgram() );\n+        addErrorIfNull( program, reporter, E1010, event.getProgram() );\n+\n         ProgramStage programStage = context.getProgramStage( event.getProgramStage() );\n-        if ( program != null )\n-        {\n-            addErrorIf( () -> program.isRegistration() && StringUtils.isEmpty( event.getEnrollment() ), reporter, E1033,\n-                event.getEvent() );\n-        }\n-        validateEventProgramAndProgramStage( reporter, event, context, strategy, bundle, program, programStage );\n-        validateDataElementForDataValues( reporter, event, context );\n+        addErrorIfNull( programStage, reporter, E1013, event.getProgramStage() );\n     }\n \n     @Override\n", "next_change": {"commit": "fe04922e144ac69367a99840d5518edda2d67f38", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\nindex 7d67228fdf..ebe2ced3f8 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\n", "chunk": "@@ -93,9 +93,6 @@ public class PreCheckMetaValidationHook\n         OrganisationUnit organisationUnit = context.getOrganisationUnit( event.getOrgUnit() );\n         addErrorIfNull( organisationUnit, reporter, E1011, event.getOrgUnit() );\n \n-        Program program = context.getProgram( event.getProgram() );\n-        addErrorIfNull( program, reporter, E1010, event.getProgram() );\n-\n         ProgramStage programStage = context.getProgramStage( event.getProgramStage() );\n         addErrorIfNull( programStage, reporter, E1013, event.getProgramStage() );\n     }\n", "next_change": {"commit": "83030519745a21c0fa955974f69f4f46498267cd", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\nindex ebe2ced3f8..7d67228fdf 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\n", "chunk": "@@ -93,6 +93,9 @@ public class PreCheckMetaValidationHook\n         OrganisationUnit organisationUnit = context.getOrganisationUnit( event.getOrgUnit() );\n         addErrorIfNull( organisationUnit, reporter, E1011, event.getOrgUnit() );\n \n+        Program program = context.getProgram( event.getProgram() );\n+        addErrorIfNull( program, reporter, E1010, event.getProgram() );\n+\n         ProgramStage programStage = context.getProgramStage( event.getProgramStage() );\n         addErrorIfNull( programStage, reporter, E1013, event.getProgramStage() );\n     }\n", "next_change": {"commit": "97fa18701761c6993e20f2e7a3816ea689129480", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\nindex 7d67228fdf..56208e1125 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\n", "chunk": "@@ -91,13 +97,13 @@ public class PreCheckMetaValidationHook\n         TrackerImportValidationContext context = reporter.getValidationContext();\n \n         OrganisationUnit organisationUnit = context.getOrganisationUnit( event.getOrgUnit() );\n-        addErrorIfNull( organisationUnit, reporter, E1011, event.getOrgUnit() );\n+        addErrorIfNull( organisationUnit, reporter, event, E1011, event.getOrgUnit() );\n \n         Program program = context.getProgram( event.getProgram() );\n-        addErrorIfNull( program, reporter, E1010, event.getProgram() );\n+        addErrorIfNull( program, reporter, event, E1010, event.getProgram() );\n \n         ProgramStage programStage = context.getProgramStage( event.getProgramStage() );\n-        addErrorIfNull( programStage, reporter, E1013, event.getProgramStage() );\n+        addErrorIfNull( programStage, reporter, event, E1013, event.getProgramStage() );\n     }\n \n     @Override\n", "next_change": {"commit": "1d8350a9e9ac100aaaa831894ba3f857b46e2474", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\nindex 56208e1125..8062876289 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\n", "chunk": "@@ -97,13 +97,13 @@ public class PreCheckMetaValidationHook\n         TrackerImportValidationContext context = reporter.getValidationContext();\n \n         OrganisationUnit organisationUnit = context.getOrganisationUnit( event.getOrgUnit() );\n-        addErrorIfNull( organisationUnit, reporter, event, E1011, event.getOrgUnit() );\n+        reporter.addErrorIfNull( organisationUnit, event, E1011, event.getOrgUnit() );\n \n         Program program = context.getProgram( event.getProgram() );\n-        addErrorIfNull( program, reporter, event, E1010, event.getProgram() );\n+        reporter.addErrorIfNull( program, event, E1010, event.getProgram() );\n \n         ProgramStage programStage = context.getProgramStage( event.getProgramStage() );\n-        addErrorIfNull( programStage, reporter, event, E1013, event.getProgramStage() );\n+        reporter.addErrorIfNull( programStage, event, E1013, event.getProgramStage() );\n     }\n \n     @Override\n", "next_change": {"commit": "ef0cbd365e47f1f88befb80d9650cce75280bd35", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\nindex 8062876289..ee5768842d 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\n", "chunk": "@@ -79,39 +78,36 @@ public class PreCheckMetaValidationHook\n     @Override\n     public void validateEnrollment( ValidationErrorReporter reporter, Enrollment enrollment )\n     {\n-        TrackerImportValidationContext context = reporter.getValidationContext();\n-\n-        OrganisationUnit organisationUnit = context.getOrganisationUnit( enrollment.getOrgUnit() );\n+        OrganisationUnit organisationUnit = reporter.getBundle().getPreheat()\n+            .getOrganisationUnit( enrollment.getOrgUnit() );\n         reporter.addErrorIfNull( organisationUnit, enrollment, E1070, enrollment.getOrgUnit() );\n \n-        Program program = context.getProgram( enrollment.getProgram() );\n+        Program program = reporter.getBundle().getPreheat().getProgram( enrollment.getProgram() );\n         reporter.addErrorIfNull( program, enrollment, E1069, enrollment.getProgram() );\n \n-        reporter.addErrorIf( () -> !trackedEntityInstanceExist( context, enrollment.getTrackedEntity() ), enrollment,\n+        reporter.addErrorIf( () -> !trackedEntityInstanceExist( reporter.getBundle(), enrollment.getTrackedEntity() ),\n+            enrollment,\n             E1068, enrollment.getTrackedEntity() );\n     }\n \n     @Override\n     public void validateEvent( ValidationErrorReporter reporter, Event event )\n     {\n-        TrackerImportValidationContext context = reporter.getValidationContext();\n-\n-        OrganisationUnit organisationUnit = context.getOrganisationUnit( event.getOrgUnit() );\n+        OrganisationUnit organisationUnit = reporter.getBundle().getPreheat().getOrganisationUnit( event.getOrgUnit() );\n         reporter.addErrorIfNull( organisationUnit, event, E1011, event.getOrgUnit() );\n \n-        Program program = context.getProgram( event.getProgram() );\n+        Program program = reporter.getBundle().getPreheat().getProgram( event.getProgram() );\n         reporter.addErrorIfNull( program, event, E1010, event.getProgram() );\n \n-        ProgramStage programStage = context.getProgramStage( event.getProgramStage() );\n+        ProgramStage programStage = reporter.getBundle().getPreheat().getProgramStage( event.getProgramStage() );\n         reporter.addErrorIfNull( programStage, event, E1013, event.getProgramStage() );\n     }\n \n     @Override\n     public void validateRelationship( ValidationErrorReporter reporter, Relationship relationship )\n     {\n-        TrackerImportValidationContext context = reporter.getValidationContext();\n-\n-        RelationshipType relationshipType = context.getRelationShipType( relationship.getRelationshipType() );\n+        TrackerPreheat preheat = reporter.getBundle().getPreheat();\n+        RelationshipType relationshipType = preheat.get( RelationshipType.class, relationship.getRelationshipType() );\n \n         reporter.addErrorIfNull( relationshipType, relationship, E4006, relationship.getRelationshipType() );\n     }\n", "next_change": {"commit": "df4eaf29ba29ee71a727a1c072fd4bcb03bb4bc9", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\nindex ee5768842d..e01dc213cd 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\n", "chunk": "@@ -107,7 +108,7 @@ public class PreCheckMetaValidationHook\n     public void validateRelationship( ValidationErrorReporter reporter, Relationship relationship )\n     {\n         TrackerPreheat preheat = reporter.getBundle().getPreheat();\n-        RelationshipType relationshipType = preheat.get( RelationshipType.class, relationship.getRelationshipType() );\n+        RelationshipType relationshipType = preheat.getRelationshipType( relationship.getRelationshipType() );\n \n         reporter.addErrorIfNull( relationshipType, relationship, E4006, relationship.getRelationshipType() );\n     }\n", "next_change": {"commit": "f7cfc83610c75486bbb0457dde057eaed777f3d2", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\nindex e01dc213cd..e6eda46092 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\n", "chunk": "@@ -76,38 +76,37 @@ public class PreCheckMetaValidationHook\n     }\n \n     @Override\n-    public void validateEnrollment( ValidationErrorReporter reporter, Enrollment enrollment )\n+    public void validateEnrollment( ValidationErrorReporter reporter, TrackerBundle bundle, Enrollment enrollment )\n     {\n-        OrganisationUnit organisationUnit = reporter.getBundle().getPreheat()\n-            .getOrganisationUnit( enrollment.getOrgUnit() );\n+        OrganisationUnit organisationUnit = bundle.getPreheat().getOrganisationUnit( enrollment.getOrgUnit() );\n         reporter.addErrorIfNull( organisationUnit, enrollment, E1070, enrollment.getOrgUnit() );\n \n-        Program program = reporter.getBundle().getPreheat().getProgram( enrollment.getProgram() );\n-        reporter.addErrorIfNull( program, enrollment, E1069, enrollment.getProgram().getIdentifierOrAttributeValue() );\n+        Program program = bundle.getPreheat().getProgram( enrollment.getProgram() );\n+        reporter.addErrorIfNull( program, enrollment, E1069, enrollment.getProgram() );\n \n-        reporter.addErrorIf( () -> !trackedEntityInstanceExist( reporter.getBundle(), enrollment.getTrackedEntity() ),\n+        reporter.addErrorIf( () -> !trackedEntityInstanceExist( bundle, enrollment.getTrackedEntity() ),\n             enrollment,\n             E1068, enrollment.getTrackedEntity() );\n     }\n \n     @Override\n-    public void validateEvent( ValidationErrorReporter reporter, Event event )\n+    public void validateEvent( ValidationErrorReporter reporter, TrackerBundle bundle, Event event )\n     {\n-        OrganisationUnit organisationUnit = reporter.getBundle().getPreheat().getOrganisationUnit( event.getOrgUnit() );\n+        OrganisationUnit organisationUnit = bundle.getPreheat().getOrganisationUnit( event.getOrgUnit() );\n         reporter.addErrorIfNull( organisationUnit, event, E1011, event.getOrgUnit() );\n \n-        Program program = reporter.getBundle().getPreheat().getProgram( event.getProgram() );\n-        reporter.addErrorIfNull( program, event, E1010,\n-            event.getProgram().getIdentifierOrAttributeValue() );\n+        Program program = bundle.getPreheat().getProgram( event.getProgram() );\n+        reporter.addErrorIfNull( program, event, E1010, event.getProgram() );\n \n-        ProgramStage programStage = reporter.getBundle().getPreheat().getProgramStage( event.getProgramStage() );\n+        ProgramStage programStage = bundle.getPreheat().getProgramStage( event.getProgramStage() );\n         reporter.addErrorIfNull( programStage, event, E1013, event.getProgramStage() );\n     }\n \n     @Override\n-    public void validateRelationship( ValidationErrorReporter reporter, Relationship relationship )\n+    public void validateRelationship( ValidationErrorReporter reporter, TrackerBundle bundle,\n+        Relationship relationship )\n     {\n-        TrackerPreheat preheat = reporter.getBundle().getPreheat();\n+        TrackerPreheat preheat = bundle.getPreheat();\n         RelationshipType relationshipType = preheat.getRelationshipType( relationship.getRelationshipType() );\n \n         reporter.addErrorIfNull( relationshipType, relationship, E4006, relationship.getRelationshipType() );\n", "next_change": {"commit": "b0a861c0308005b865cafa2344c1231c0a4f2bc3", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\nindex e6eda46092..3eed397428 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\n", "chunk": "@@ -113,7 +114,7 @@ public class PreCheckMetaValidationHook\n     }\n \n     @Override\n-    public boolean removeOnError()\n+    public boolean skipOnError()\n     {\n         return true;\n     }\n", "next_change": {"commit": "e64a40be0dc9744a6a9bb33f4239f1f57cd2e02d", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\ndeleted file mode 100644\nindex 3eed397428..0000000000\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\n+++ /dev/null\n", "chunk": "@@ -1,122 +0,0 @@\n-/*\n- * Copyright (c) 2004-2022, University of Oslo\n- * All rights reserved.\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions are met:\n- * Redistributions of source code must retain the above copyright notice, this\n- * list of conditions and the following disclaimer.\n- *\n- * Redistributions in binary form must reproduce the above copyright notice,\n- * this list of conditions and the following disclaimer in the documentation\n- * and/or other materials provided with the distribution.\n- * Neither the name of the HISP project nor the names of its contributors may\n- * be used to endorse or promote products derived from this software without\n- * specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n- * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n- * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n- * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n- * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n- * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n- * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- */\n-package org.hisp.dhis.tracker.validation.hooks;\n-\n-import static org.hisp.dhis.tracker.report.TrackerErrorCode.E1005;\n-import static org.hisp.dhis.tracker.report.TrackerErrorCode.E1010;\n-import static org.hisp.dhis.tracker.report.TrackerErrorCode.E1011;\n-import static org.hisp.dhis.tracker.report.TrackerErrorCode.E1013;\n-import static org.hisp.dhis.tracker.report.TrackerErrorCode.E1068;\n-import static org.hisp.dhis.tracker.report.TrackerErrorCode.E1069;\n-import static org.hisp.dhis.tracker.report.TrackerErrorCode.E1070;\n-import static org.hisp.dhis.tracker.report.TrackerErrorCode.E4006;\n-import static org.hisp.dhis.tracker.validation.hooks.ValidationUtils.trackedEntityInstanceExist;\n-\n-import org.hisp.dhis.organisationunit.OrganisationUnit;\n-import org.hisp.dhis.program.Program;\n-import org.hisp.dhis.program.ProgramStage;\n-import org.hisp.dhis.relationship.RelationshipType;\n-import org.hisp.dhis.trackedentity.TrackedEntityType;\n-import org.hisp.dhis.tracker.bundle.TrackerBundle;\n-import org.hisp.dhis.tracker.domain.Enrollment;\n-import org.hisp.dhis.tracker.domain.Event;\n-import org.hisp.dhis.tracker.domain.Relationship;\n-import org.hisp.dhis.tracker.domain.TrackedEntity;\n-import org.hisp.dhis.tracker.preheat.TrackerPreheat;\n-import org.hisp.dhis.tracker.report.TrackerErrorCode;\n-import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n-import org.hisp.dhis.tracker.validation.TrackerValidationHook;\n-import org.springframework.stereotype.Component;\n-\n-/**\n- * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n- */\n-@Component\n-public class PreCheckMetaValidationHook\n-    implements TrackerValidationHook\n-{\n-    @Override\n-    public void validateTrackedEntity( ValidationErrorReporter reporter, TrackerBundle bundle, TrackedEntity tei )\n-    {\n-        OrganisationUnit organisationUnit = bundle.getPreheat().getOrganisationUnit( tei.getOrgUnit() );\n-        if ( organisationUnit == null )\n-        {\n-            reporter.addError( tei, TrackerErrorCode.E1049, tei.getOrgUnit() );\n-        }\n-\n-        TrackedEntityType entityType = bundle.getPreheat().getTrackedEntityType( tei.getTrackedEntityType() );\n-        if ( entityType == null )\n-        {\n-            reporter.addError( tei, E1005, tei.getTrackedEntityType() );\n-        }\n-    }\n-\n-    @Override\n-    public void validateEnrollment( ValidationErrorReporter reporter, TrackerBundle bundle, Enrollment enrollment )\n-    {\n-        OrganisationUnit organisationUnit = bundle.getPreheat().getOrganisationUnit( enrollment.getOrgUnit() );\n-        reporter.addErrorIfNull( organisationUnit, enrollment, E1070, enrollment.getOrgUnit() );\n-\n-        Program program = bundle.getPreheat().getProgram( enrollment.getProgram() );\n-        reporter.addErrorIfNull( program, enrollment, E1069, enrollment.getProgram() );\n-\n-        reporter.addErrorIf( () -> !trackedEntityInstanceExist( bundle, enrollment.getTrackedEntity() ),\n-            enrollment,\n-            E1068, enrollment.getTrackedEntity() );\n-    }\n-\n-    @Override\n-    public void validateEvent( ValidationErrorReporter reporter, TrackerBundle bundle, Event event )\n-    {\n-        OrganisationUnit organisationUnit = bundle.getPreheat().getOrganisationUnit( event.getOrgUnit() );\n-        reporter.addErrorIfNull( organisationUnit, event, E1011, event.getOrgUnit() );\n-\n-        Program program = bundle.getPreheat().getProgram( event.getProgram() );\n-        reporter.addErrorIfNull( program, event, E1010, event.getProgram() );\n-\n-        ProgramStage programStage = bundle.getPreheat().getProgramStage( event.getProgramStage() );\n-        reporter.addErrorIfNull( programStage, event, E1013, event.getProgramStage() );\n-    }\n-\n-    @Override\n-    public void validateRelationship( ValidationErrorReporter reporter, TrackerBundle bundle,\n-        Relationship relationship )\n-    {\n-        TrackerPreheat preheat = bundle.getPreheat();\n-        RelationshipType relationshipType = preheat.getRelationshipType( relationship.getRelationshipType() );\n-\n-        reporter.addErrorIfNull( relationshipType, relationship, E4006, relationship.getRelationshipType() );\n-    }\n-\n-    @Override\n-    public boolean skipOnError()\n-    {\n-        return true;\n-    }\n-\n-}\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "message": "Merge commit", "committedDate": null}, {"oid": "3e3dc98d92f0c13fb56cf17894eab06a78842133", "committedDate": "2020-08-04 17:20:37 +0200", "message": "feat: Enrollment/Events note persistence"}, {"oid": "6e1e12a2fe3c14f79781d64ec3f890f680cf49a4", "committedDate": "2020-08-24 15:50:03 +0200", "message": "feat: Added support for data values in event import [DHIS2-9270]"}, {"oid": "8aaeab2ee4dd7a9ffa927147931dff8609ef787a", "committedDate": "2020-09-23 15:33:34 +0200", "message": "chore: Remove unused imports (#6219)"}, {"oid": "3e3b32e56ff5554a0095396eddffceac65b6b8de", "committedDate": "2020-10-27 09:56:50 +0100", "message": "refactor: simplified calls to error reporting (#6437)"}, {"oid": "6e28dbfdaea7ceacbe560fe82ddba1e94c6cd203", "committedDate": "2020-11-11 17:41:55 +0100", "message": "fix: Exception when importing TEI with relationship [DHIS2-9856] (#6552)"}, {"oid": "0bf55d776481f6511e5f9ebca5de1f2cf79777c0", "committedDate": "2020-11-19 13:55:46 +0100", "message": "refactor: New Tracker Error reporting refactor (#6706)"}, {"oid": "71b9cc9066ade25caca07d78d8e5f6e946c7133f", "committedDate": "2020-11-24 12:12:26 +0100", "message": "feat: fail validation on missing enrollment in event (#6749)"}, {"oid": "241b35d67813cc821ffc07590b6e3c855a3047bd", "committedDate": "2020-11-24 13:59:15 +0100", "message": "fix: do not fail on missing event's enrollment if program is not reg (#6751)"}, {"oid": "b765b27ac675347397a7873ffd2a1243dc20a244", "committedDate": "2020-12-02 16:26:36 +0100", "message": "fix: Tracker Import validation message simplification (#6815)"}, {"oid": "a84324f8f0693fcdd0ee78c846ca7fbe9b5557d8", "committedDate": "2020-12-04 09:53:51 +0100", "message": "fix: Only return one error if programStage is null [DHIS2-9946] (#6802)"}, {"oid": "699074cbe82db1a8e0a5e72edf2a981f3628b54b", "committedDate": "2020-12-07 10:47:48 +0100", "message": "fix: Tracker Identifiers resolution during Tracker import (#6824)"}, {"oid": "f1ee41f1845d51b9efa6c5f5c666371ee503297a", "committedDate": "2020-12-09 21:22:05 +0100", "message": "fix: tune mappers to reduce queries executed during import (#6845)"}, {"oid": "c4f1db1dab576bc73489a9e0a6d015acec2eab5b", "committedDate": "2020-12-15 15:09:02 +0100", "message": "feat: Tracker Import metadata cache (#6877)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "055574bea49c3a40c5cfff3cb86694fc4bd12c45", "committedDate": "2021-01-12 15:26:26 +0100", "message": "perf: replace expensive \"Program has OrgUnit\" call with faster SQL (#6930)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "653f644dd3b686d05809402882371b57b0d6a2f2", "committedDate": "2021-02-08 09:03:42 +0100", "message": "fix: [DHIS2-10430] Remove NPE from a validation hook (#7289)"}, {"oid": "d3babd17c47704fd61fb23a664d8e88264bbcff0", "committedDate": "2021-02-15 16:32:19 +0100", "message": "fix: Dhis2 10432 (#7347)"}, {"oid": "2a976508b620e29a6ea98c81ae4e317e0d399132", "committedDate": "2021-03-19 13:40:13 +0100", "message": "fix: Create event program preprocessor to fix event import with wrong program [TECH-579] (#7696)"}, {"oid": "33f99931474be434371691a439a56becb9f23025", "committedDate": "2021-04-07 10:36:15 +0200", "message": "refactor: Clean up metadata and relations validation hooks [TECH-579] (#7807)"}, {"oid": "fe04922e144ac69367a99840d5518edda2d67f38", "committedDate": "2021-06-03 08:17:10 +0200", "message": "fix: Make program field read-only in event payload [DHIS2-11225] (#8086)"}, {"oid": "83030519745a21c0fa955974f69f4f46498267cd", "committedDate": "2021-06-09 09:44:41 +0200", "message": "fix: Make program mandatory for program events and program stage for tracker events [DHIS2-11225] (#8120)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "97fa18701761c6993e20f2e7a3816ea689129480", "committedDate": "2022-01-11 15:31:02 +0100", "message": "chore: hooks should add errors via reporter directly TECH-880 (#9523)"}, {"oid": "1d8350a9e9ac100aaaa831894ba3f857b46e2474", "committedDate": "2022-01-13 14:15:17 +0100", "message": "chore: adding errors and warnings is responsibility of the ValidationErrorReporter TECH-880 (#9616)"}, {"oid": "ef0cbd365e47f1f88befb80d9650cce75280bd35", "committedDate": "2022-03-08 15:12:00 +0100", "message": "chore: move DB access and mutation to preheat and preprocessor DHIS2-12623 (#9904)"}, {"oid": "5f63b52ac0a4f426145ae43affa58295f804812a", "committedDate": "2022-04-14 13:41:33 +0200", "message": "chore: split domain and view models DHIS2-12563 (#10379)"}, {"oid": "82000d2a019227cc85cb3d43b301b8bf758f5c85", "committedDate": "2022-04-19 14:21:17 +0200", "message": "fix: Event.program is a MetadataIdentifier DHIS2-12563 (#10482)"}, {"oid": "df4eaf29ba29ee71a727a1c072fd4bcb03bb4bc9", "committedDate": "2022-05-19 15:13:36 +0200", "message": "chore: docs, improve APIs DHIS2-12563 (#10847)"}, {"oid": "b567e74f7d703115fb7bc9802ed3b5f29d6917aa", "committedDate": "2022-05-23 09:13:55 +0200", "message": "fix: report ids or attribute value for MetadataIdentifiers DHIS2-12519 (#10873)"}, {"oid": "f7cfc83610c75486bbb0457dde057eaed777f3d2", "committedDate": "2022-05-27 15:15:25 +0200", "message": "chore: ValidationErrorReporter does not need the bunlde DHIS2-12519 (#10878)"}, {"oid": "b0a861c0308005b865cafa2344c1231c0a4f2bc3", "committedDate": "2022-12-02 13:36:08 +0100", "message": "fix: turn removeOnError into skipOnError DHIS2-14213 (#12457)"}, {"oid": "7ac68b368a1dbd9362973b30f7160399abe801a0", "committedDate": "2022-12-06 09:04:47 +0100", "message": "chore: move ValidationErrorReporter close to its usage (#12486)"}, {"oid": "e64a40be0dc9744a6a9bb33f4239f1f57cd2e02d", "committedDate": "2022-12-14 12:18:54 +0100", "message": "chore: migrate PreCheckMeta/PreCheckMandatoryFields hook to validator (#12550)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkwMDg0Nw==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r429900847", "body": "`TrackedEntityAttribute.valueType` has `not-null=true` so I don't think we need to double verify anything here", "bodyText": "TrackedEntityAttribute.valueType has not-null=true so I don't think we need to double verify anything here", "bodyHTML": "<p dir=\"auto\"><code>TrackedEntityAttribute.valueType</code> has <code>not-null=true</code> so I don't think we need to double verify anything here</p>", "author": "mortenoh", "createdAt": "2020-05-25T12:08:50Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java", "diffHunk": "@@ -0,0 +1,277 @@\n+package org.hisp.dhis.tracker.validation.hooks;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.hisp.dhis.external.conf.DhisConfigurationProvider;\n+import org.hisp.dhis.fileresource.FileResource;\n+import org.hisp.dhis.fileresource.FileResourceService;\n+import org.hisp.dhis.organisationunit.OrganisationUnit;\n+import org.hisp.dhis.reservedvalue.ReservedValueService;\n+import org.hisp.dhis.textpattern.TextPatternValidationUtils;\n+import org.hisp.dhis.trackedentity.TrackedEntityAttribute;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+import org.hisp.dhis.trackedentityattributevalue.TrackedEntityAttributeValue;\n+import org.hisp.dhis.trackedentityattributevalue.TrackedEntityAttributeValueService;\n+import org.hisp.dhis.tracker.TrackerIdScheme;\n+import org.hisp.dhis.tracker.TrackerImportStrategy;\n+import org.hisp.dhis.tracker.bundle.TrackerBundle;\n+import org.hisp.dhis.tracker.domain.Attribute;\n+import org.hisp.dhis.tracker.domain.TrackedEntity;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n+import org.hisp.dhis.tracker.validation.TrackerImportValidationContext;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+import static org.hisp.dhis.system.util.ValidationUtils.dataValueIsValid;\n+import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n+import static org.hisp.dhis.tracker.validation.hooks.Constants.ATTRIBUTE_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.Constants.TRACKED_ENTITY_ATTRIBUTE_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.Constants.TRACKED_ENTITY_ATTRIBUTE_VALUE_CANT_BE_NULL;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+@Component\n+public class TrackedEntityAttributeValidationHook\n+    extends AbstractTrackerDtoValidationHook\n+{\n+    private static final int MAX_ATTR_VALUE_LENGTH = 1200;\n+\n+    public TrackedEntityAttributeValidationHook()\n+    {\n+        super( TrackedEntity.class, TrackerImportStrategy.CREATE_AND_UPDATE );\n+    }\n+\n+    @Autowired\n+    protected FileResourceService fileResourceService;\n+\n+    @Autowired\n+    protected TrackedEntityAttributeValueService trackedEntityAttributeValueService;\n+\n+    @Autowired\n+    protected ReservedValueService reservedValueService;\n+\n+    @Autowired\n+    private DhisConfigurationProvider dhisConfigurationProvider;\n+\n+    @Override\n+    public int getOrder()\n+    {\n+        return 53;\n+    }\n+\n+    @Override\n+    public void validateTrackedEntity( ValidationErrorReporter reporter, TrackedEntity trackedEntity )\n+    {\n+        TrackerImportValidationContext context = reporter.getValidationContext();\n+\n+        TrackedEntityInstance tei = context.getTrackedEntityInstance( trackedEntity.getTrackedEntity() );\n+        OrganisationUnit organisationUnit = context.getOrganisationUnit( trackedEntity.getOrgUnit() );\n+\n+        validateAttributes( reporter, trackedEntity, tei, organisationUnit );\n+    }\n+\n+    protected void validateAttributes( ValidationErrorReporter reporter,\n+        TrackedEntity trackedEntity, TrackedEntityInstance tei, OrganisationUnit orgUnit )\n+    {\n+        Objects.requireNonNull( trackedEntity, Constants.TRACKED_ENTITY_CANT_BE_NULL );\n+\n+        Map<String, TrackedEntityAttributeValue> valueMap = new HashMap<>();\n+        if ( tei != null )\n+        {\n+            valueMap = tei.getTrackedEntityAttributeValues()\n+                .stream()\n+                .collect( Collectors.toMap( v -> v.getAttribute().getUid(), v -> v ) );\n+        }\n+\n+        for ( Attribute attribute : trackedEntity.getAttributes() )\n+        {\n+            TrackedEntityAttribute tea = reporter.getValidationContext()\n+                .getTrackedEntityAttribute( attribute.getAttribute() );\n+\n+            if ( tea == null )\n+            {\n+                reporter.addError( newReport( TrackerErrorCode.E1006 )\n+                    .addArg( attribute.getAttribute() ) );\n+                continue;\n+            }\n+\n+//            if ( StringUtils.isEmpty( attribute.getValue() ) )\n+            if ( attribute.getValue() == null )\n+            {\n+                //continue; ??? Just continue on empty and null?\n+                // TODO: Is this really correct? This check was not here originally\n+                //  Enrollment attr check fails on null so why not here too?\n+                reporter.addError( newReport( TrackerErrorCode.E1076 )\n+                    .addArg( attribute ) );\n+                continue;\n+            }\n+\n+            // TODO: Should we really validate existing data? this sounds like a mix of con\n+//            TrackedEntityAttributeValue trackedEntityAttributeValue = valueMap.get( tea.getUid() );\n+//            if ( trackedEntityAttributeValue == null )\n+//            {\n+            TrackedEntityAttributeValue trackedEntityAttributeValue = new TrackedEntityAttributeValue();\n+            trackedEntityAttributeValue.setEntityInstance( tei );\n+            trackedEntityAttributeValue.setValue( attribute.getValue() );\n+            trackedEntityAttributeValue.setAttribute( tea );\n+//            }\n+\n+            validateAttributeValue( reporter, trackedEntityAttributeValue );\n+            validateTextPattern( reporter, attribute, tea, valueMap.get( tea.getUid() ) );\n+            validateAttrValueType( reporter, attribute, tea );\n+\n+            // TODO: This is one \"THE\" potential performance killer...\n+            validateAttributeUniqueness( reporter, attribute.getValue(), tea, tei, orgUnit );\n+\n+            validateFileNotAlreadyAssigned( reporter, attribute, valueMap );\n+        }\n+    }\n+\n+    public void validateAttributeValue( ValidationErrorReporter reporter, TrackedEntityAttributeValue teav )\n+    {\n+        Objects.requireNonNull( teav, TRACKED_ENTITY_ATTRIBUTE_VALUE_CANT_BE_NULL );\n+        Objects.requireNonNull( teav.getValue(), TRACKED_ENTITY_ATTRIBUTE_VALUE_CANT_BE_NULL );\n+\n+        // TODO: Should this be tested here, cant provoke? Is this not validation in metadata? Probably not according to Stian.", "originalCommit": "a59d4b4c1f3b0aa2ee51ac1bab3b372412ab878e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a36d297c77b1689defcbd1fb3a3d3057545deffe", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\nindex b446e1813b..0694dfa8b2 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n", "chunk": "@@ -165,13 +165,6 @@ public class TrackedEntityAttributeValidationHook\n         Objects.requireNonNull( teav, TRACKED_ENTITY_ATTRIBUTE_VALUE_CANT_BE_NULL );\n         Objects.requireNonNull( teav.getValue(), TRACKED_ENTITY_ATTRIBUTE_VALUE_CANT_BE_NULL );\n \n-        // TODO: Should this be tested here, cant provoke? Is this not validation in metadata? Probably not according to Stian.\n-//        if ( teav.getAttribute().getValueType() == null )\n-//        {\n-//            reporter.addError( newReport( TrackerErrorCode.E1078 )\n-//                .addArg( teav.getAttribute().getValueType() ) );\n-//        }\n-\n         if ( teav.getValue().length() > MAX_ATTR_VALUE_LENGTH )\n         {\n             reporter.addError( newReport( TrackerErrorCode.E1077 )\n", "next_change": {"commit": "f5ca59f3146a74d32ee856088e163893fd73a6ec", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\nindex 0694dfa8b2..74db064142 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n", "chunk": "@@ -165,6 +159,7 @@ public class TrackedEntityAttributeValidationHook\n         Objects.requireNonNull( teav, TRACKED_ENTITY_ATTRIBUTE_VALUE_CANT_BE_NULL );\n         Objects.requireNonNull( teav.getValue(), TRACKED_ENTITY_ATTRIBUTE_VALUE_CANT_BE_NULL );\n \n+        // Validate value (string) don't exceed the max length\n         if ( teav.getValue().length() > MAX_ATTR_VALUE_LENGTH )\n         {\n             reporter.addError( newReport( TrackerErrorCode.E1077 )\n", "next_change": {"commit": "3999d1c8e8d7c2bcd11c7c5d99fec179abd25e2b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\nindex 74db064142..5bb0c9d090 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n", "chunk": "@@ -156,8 +157,8 @@ public class TrackedEntityAttributeValidationHook\n \n     public void validateAttributeValue( ValidationErrorReporter reporter, TrackedEntityAttributeValue teav )\n     {\n-        Objects.requireNonNull( teav, TRACKED_ENTITY_ATTRIBUTE_VALUE_CANT_BE_NULL );\n-        Objects.requireNonNull( teav.getValue(), TRACKED_ENTITY_ATTRIBUTE_VALUE_CANT_BE_NULL );\n+        checkNotNull( teav, TRACKED_ENTITY_ATTRIBUTE_VALUE_CANT_BE_NULL );\n+        checkNotNull( teav.getValue(), TRACKED_ENTITY_ATTRIBUTE_VALUE_CANT_BE_NULL );\n \n         // Validate value (string) don't exceed the max length\n         if ( teav.getValue().length() > MAX_ATTR_VALUE_LENGTH )\n", "next_change": null}]}}, {"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\nindex 0694dfa8b2..74db064142 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n", "chunk": "@@ -172,14 +167,16 @@ public class TrackedEntityAttributeValidationHook\n                 .addArg( MAX_ATTR_VALUE_LENGTH ) );\n         }\n \n-        boolean encryptionStatusOk = dhisConfigurationProvider.getEncryptionStatus().isOk();\n+        // Validate if that encryption is configured properly if someone sets value to (confidential)\n         boolean isConfidential = teav.getAttribute().isConfidentialBool();\n+        boolean encryptionStatusOk = dhisConfigurationProvider.getEncryptionStatus().isOk();\n         if ( isConfidential && !encryptionStatusOk )\n         {\n             reporter.addError( newReport( TrackerErrorCode.E1112 )\n                 .addArg( teav ) );\n         }\n \n+        // Uses ValidationUtils to check that the data value corresponds to the data value type set on the attribute\n         String result = dataValueIsValid( teav.getValue(), teav.getAttribute().getValueType() );\n         if ( result != null )\n         {\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\nindex b446e1813b..63e7fe5394 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n", "chunk": "@@ -162,16 +160,10 @@ public class TrackedEntityAttributeValidationHook\n \n     public void validateAttributeValue( ValidationErrorReporter reporter, TrackedEntityAttributeValue teav )\n     {\n-        Objects.requireNonNull( teav, TRACKED_ENTITY_ATTRIBUTE_VALUE_CANT_BE_NULL );\n-        Objects.requireNonNull( teav.getValue(), TRACKED_ENTITY_ATTRIBUTE_VALUE_CANT_BE_NULL );\n-\n-        // TODO: Should this be tested here, cant provoke? Is this not validation in metadata? Probably not according to Stian.\n-//        if ( teav.getAttribute().getValueType() == null )\n-//        {\n-//            reporter.addError( newReport( TrackerErrorCode.E1078 )\n-//                .addArg( teav.getAttribute().getValueType() ) );\n-//        }\n+        checkNotNull( teav, TRACKED_ENTITY_ATTRIBUTE_VALUE_CANT_BE_NULL );\n+        checkNotNull( teav.getValue(), TRACKED_ENTITY_ATTRIBUTE_VALUE_CANT_BE_NULL );\n \n+        // Validate value (string) don't exceed the max length\n         if ( teav.getValue().length() > MAX_ATTR_VALUE_LENGTH )\n         {\n             reporter.addError( newReport( TrackerErrorCode.E1077 )\n", "next_change": {"commit": "e1260b5e8fceb13c2883754236a34cdd652e1c1c", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\nindex 63e7fe5394..0d3feb2ad8 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n", "chunk": "@@ -137,55 +127,44 @@ public class TrackedEntityAttributeValidationHook\n                 continue;\n             }\n \n-            // TODO: Should we really validate existing data? this sounds like a mix of con\n-//            TrackedEntityAttributeValue trackedEntityAttributeValue = valueMap.get( tea.getUid() );\n-//            if ( trackedEntityAttributeValue == null )\n-//            {\n-            TrackedEntityAttributeValue trackedEntityAttributeValue = new TrackedEntityAttributeValue();\n-            trackedEntityAttributeValue.setEntityInstance( tei );\n-            trackedEntityAttributeValue.setValue( attribute.getValue() );\n-            trackedEntityAttributeValue.setAttribute( tea );\n-//            }\n-\n-            validateAttributeValue( reporter, trackedEntityAttributeValue );\n+            validateAttributeValue( reporter, tea, attribute.getValue() );\n             validateTextPattern( reporter, attribute, tea, valueMap.get( tea.getUid() ) );\n             validateAttrValueType( reporter, attribute, tea );\n \n-            // TODO: This is one \"THE\" potential performance killer...\n             validateAttributeUniqueness( reporter, attribute.getValue(), tea, tei, orgUnit );\n \n             validateFileNotAlreadyAssigned( reporter, attribute, valueMap );\n         }\n     }\n \n-    public void validateAttributeValue( ValidationErrorReporter reporter, TrackedEntityAttributeValue teav )\n+    public void validateAttributeValue( ValidationErrorReporter reporter, TrackedEntityAttribute tea, String value )\n     {\n-        checkNotNull( teav, TRACKED_ENTITY_ATTRIBUTE_VALUE_CANT_BE_NULL );\n-        checkNotNull( teav.getValue(), TRACKED_ENTITY_ATTRIBUTE_VALUE_CANT_BE_NULL );\n+        checkNotNull( tea, TRACKED_ENTITY_ATTRIBUTE_VALUE_CANT_BE_NULL );\n+        checkNotNull( value, TRACKED_ENTITY_ATTRIBUTE_VALUE_CANT_BE_NULL );\n \n         // Validate value (string) don't exceed the max length\n-        if ( teav.getValue().length() > MAX_ATTR_VALUE_LENGTH )\n+        if ( value.length() > MAX_ATTR_VALUE_LENGTH )\n         {\n             reporter.addError( newReport( TrackerErrorCode.E1077 )\n-                .addArg( teav )\n+                .addArg( value )\n                 .addArg( MAX_ATTR_VALUE_LENGTH ) );\n         }\n \n         // Validate if that encryption is configured properly if someone sets value to (confidential)\n-        boolean isConfidential = teav.getAttribute().isConfidentialBool();\n+        boolean isConfidential = tea.isConfidentialBool();\n         boolean encryptionStatusOk = dhisConfigurationProvider.getEncryptionStatus().isOk();\n         if ( isConfidential && !encryptionStatusOk )\n         {\n             reporter.addError( newReport( TrackerErrorCode.E1112 )\n-                .addArg( teav ) );\n+                .addArg( value ) );\n         }\n \n         // Uses ValidationUtils to check that the data value corresponds to the data value type set on the attribute\n-        String result = dataValueIsValid( teav.getValue(), teav.getAttribute().getValueType() );\n+        String result = dataValueIsValid( value, tea.getValueType() );\n         if ( result != null )\n         {\n             reporter.addError( newReport( TrackerErrorCode.E1085 )\n-                .addArg( teav.getAttribute() )\n+                .addArg( tea )\n                 .addArg( result ) );\n         }\n     }\n", "next_change": {"commit": "3e3b32e56ff5554a0095396eddffceac65b6b8de", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\nindex 0d3feb2ad8..14928df92b 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n", "chunk": "@@ -143,30 +152,16 @@ public class TrackedEntityAttributeValidationHook\n         checkNotNull( value, TRACKED_ENTITY_ATTRIBUTE_VALUE_CANT_BE_NULL );\n \n         // Validate value (string) don't exceed the max length\n-        if ( value.length() > MAX_ATTR_VALUE_LENGTH )\n-        {\n-            reporter.addError( newReport( TrackerErrorCode.E1077 )\n-                .addArg( value )\n-                .addArg( MAX_ATTR_VALUE_LENGTH ) );\n-        }\n-\n+        addErrorIf( () -> value.length() > MAX_ATTR_VALUE_LENGTH, reporter, E1077, value, MAX_ATTR_VALUE_LENGTH );\n+        \n         // Validate if that encryption is configured properly if someone sets value to (confidential)\n         boolean isConfidential = tea.isConfidentialBool();\n         boolean encryptionStatusOk = dhisConfigurationProvider.getEncryptionStatus().isOk();\n-        if ( isConfidential && !encryptionStatusOk )\n-        {\n-            reporter.addError( newReport( TrackerErrorCode.E1112 )\n-                .addArg( value ) );\n-        }\n+        addErrorIf( () -> isConfidential && !encryptionStatusOk, reporter, E1112, value );\n \n         // Uses ValidationUtils to check that the data value corresponds to the data value type set on the attribute\n-        String result = dataValueIsValid( value, tea.getValueType() );\n-        if ( result != null )\n-        {\n-            reporter.addError( newReport( TrackerErrorCode.E1085 )\n-                .addArg( tea )\n-                .addArg( result ) );\n-        }\n+        final String result = dataValueIsValid( value, tea.getValueType() );\n+        addErrorIf( () -> result != null, reporter, E1085, tea, result );\n     }\n \n     protected void validateTextPattern( ValidationErrorReporter reporter,\n", "next_change": {"commit": "ea76fa86409613c9766d4508d65c88ac55c413c3", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\nindex 14928df92b..8ab3083130 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n", "chunk": "@@ -153,13 +180,15 @@ public class TrackedEntityAttributeValidationHook\n \n         // Validate value (string) don't exceed the max length\n         addErrorIf( () -> value.length() > MAX_ATTR_VALUE_LENGTH, reporter, E1077, value, MAX_ATTR_VALUE_LENGTH );\n-        \n-        // Validate if that encryption is configured properly if someone sets value to (confidential)\n+\n+        // Validate if that encryption is configured properly if someone sets\n+        // value to (confidential)\n         boolean isConfidential = tea.isConfidentialBool();\n         boolean encryptionStatusOk = dhisConfigurationProvider.getEncryptionStatus().isOk();\n         addErrorIf( () -> isConfidential && !encryptionStatusOk, reporter, E1112, value );\n \n-        // Uses ValidationUtils to check that the data value corresponds to the data value type set on the attribute\n+        // Uses ValidationUtils to check that the data value corresponds to the\n+        // data value type set on the attribute\n         final String result = dataValueIsValid( value, tea.getValueType() );\n         addErrorIf( () -> result != null, reporter, E1085, tea, result );\n     }\n", "next_change": {"commit": "1e75d833b15ed65163451abb7d4dfb99831484de", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\nindex 8ab3083130..660d30327d 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n", "chunk": "@@ -193,48 +185,6 @@ public class TrackedEntityAttributeValidationHook extends AttributeValidationHoo\n         addErrorIf( () -> result != null, reporter, E1085, tea, result );\n     }\n \n-    protected void validateTextPattern( ValidationErrorReporter reporter,\n-        Attribute attribute, TrackedEntityAttribute tea, TrackedEntityAttributeValue existingValue )\n-    {\n-        TrackerBundle bundle = reporter.getValidationContext().getBundle();\n-        checkNotNull( attribute, ATTRIBUTE_CANT_BE_NULL );\n-        checkNotNull( tea, TRACKED_ENTITY_ATTRIBUTE_CANT_BE_NULL );\n-\n-        if ( !tea.isGenerated() )\n-        {\n-            return;\n-        }\n-\n-        // TODO: Should we check the text pattern even if its not generated?\n-        // TextPatternValidationUtils.validateTextPatternValue(\n-        // attribute.getTextPattern(), value )\n-\n-        // TODO: Can't provoke this error since metadata importer won't allow\n-        // null, empty or invalid patterns.\n-        if ( tea.getTextPattern() == null && !bundle.isSkipTextPatternValidation() )\n-        {\n-            reporter.addError( newReport( TrackerErrorCode.E1111 )\n-                .addArg( attribute ) );\n-        }\n-\n-        if ( tea.getTextPattern() != null && !bundle.isSkipTextPatternValidation() )\n-        {\n-            String oldValue = existingValue != null ? existingValue.getValue() : null;\n-\n-            // We basically ignore the pattern validation if the value is\n-            // reserved or already\n-            // assigned i.e. input eq. already persisted value.\n-            boolean isReservedOrAlreadyAssigned = Objects.equals( attribute.getValue(), oldValue ) ||\n-                reservedValueService.isReserved( tea.getTextPattern(), attribute.getValue() );\n-\n-            boolean isValidPattern = TextPatternValidationUtils\n-                .validateTextPatternValue( tea.getTextPattern(), attribute.getValue() );\n-\n-            addErrorIf( () -> !isReservedOrAlreadyAssigned && !isValidPattern, reporter, E1008, attribute.getValue(),\n-                tea.getTextPattern() );\n-        }\n-    }\n-\n     protected void validateFileNotAlreadyAssigned( ValidationErrorReporter reporter,\n         Attribute attr, Map<String, TrackedEntityAttributeValue> valueMap )\n     {\n", "next_change": {"commit": "97fa18701761c6993e20f2e7a3816ea689129480", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\nindex 660d30327d..2655fad5cb 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n", "chunk": "@@ -149,43 +152,48 @@ public class TrackedEntityAttributeValidationHook extends AttributeValidationHoo\n                         .findFirst() );\n \n                 if ( optionalTea.isPresent() )\n-                    addError( reporter, E1076, TrackedEntityAttribute.class.getSimpleName(), attribute );\n+                    addError( reporter, trackedEntity, E1076, TrackedEntityAttribute.class.getSimpleName(),\n+                        attribute.getAttribute() );\n \n                 continue;\n             }\n \n-            validateAttributeValue( reporter, tea, attribute.getValue() );\n-            validateAttrValueType( reporter, attribute, tea );\n-            validateOptionSet( reporter, tea, attribute.getValue() );\n+            validateAttributeValue( reporter, trackedEntity, tea, attribute.getValue() );\n+            validateAttrValueType( reporter, trackedEntity, attribute, tea );\n+            validateOptionSet( reporter, trackedEntity, tea,\n+                attribute.getValue() );\n \n-            validateAttributeUniqueness( reporter, attribute.getValue(), tea, tei, orgUnit );\n+            validateAttributeUniqueness( reporter, trackedEntity, attribute.getValue(), tea, tei, orgUnit );\n \n-            validateFileNotAlreadyAssigned( reporter, attribute, valueMap );\n+            validateFileNotAlreadyAssigned( reporter, trackedEntity, attribute, valueMap );\n         }\n     }\n \n-    public void validateAttributeValue( ValidationErrorReporter reporter, TrackedEntityAttribute tea, String value )\n+    public void validateAttributeValue( ValidationErrorReporter reporter, TrackedEntity te, TrackedEntityAttribute tea,\n+        String value )\n     {\n         checkNotNull( tea, TRACKED_ENTITY_ATTRIBUTE_VALUE_CANT_BE_NULL );\n         checkNotNull( value, TRACKED_ENTITY_ATTRIBUTE_VALUE_CANT_BE_NULL );\n \n         // Validate value (string) don't exceed the max length\n-        addErrorIf( () -> value.length() > Constant.MAX_ATTR_VALUE_LENGTH, reporter, E1077, value,\n+        addErrorIf( () -> value.length() > Constant.MAX_ATTR_VALUE_LENGTH, reporter, te,\n+            E1077, value,\n             Constant.MAX_ATTR_VALUE_LENGTH );\n \n         // Validate if that encryption is configured properly if someone sets\n         // value to (confidential)\n         boolean isConfidential = tea.isConfidentialBool();\n         boolean encryptionStatusOk = dhisConfigurationProvider.getEncryptionStatus().isOk();\n-        addErrorIf( () -> isConfidential && !encryptionStatusOk, reporter, E1112, value );\n+        addErrorIf( () -> isConfidential && !encryptionStatusOk, reporter, te, E1112,\n+            value );\n \n         // Uses ValidationUtils to check that the data value corresponds to the\n         // data value type set on the attribute\n         final String result = dataValueIsValid( value, tea.getValueType() );\n-        addErrorIf( () -> result != null, reporter, E1085, tea, result );\n+        addErrorIf( () -> result != null, reporter, te, E1085, tea, result );\n     }\n \n-    protected void validateFileNotAlreadyAssigned( ValidationErrorReporter reporter,\n+    protected void validateFileNotAlreadyAssigned( ValidationErrorReporter reporter, TrackedEntity te,\n         Attribute attr, Map<String, TrackedEntityAttributeValue> valueMap )\n     {\n         checkNotNull( attr, ATTRIBUTE_CANT_BE_NULL );\n", "next_change": {"commit": "1d8350a9e9ac100aaaa831894ba3f857b46e2474", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\nindex 2655fad5cb..73afe472f0 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n", "chunk": "@@ -184,13 +184,13 @@ public class TrackedEntityAttributeValidationHook extends AttributeValidationHoo\n         // value to (confidential)\n         boolean isConfidential = tea.isConfidentialBool();\n         boolean encryptionStatusOk = dhisConfigurationProvider.getEncryptionStatus().isOk();\n-        addErrorIf( () -> isConfidential && !encryptionStatusOk, reporter, te, E1112,\n+        reporter.addErrorIf( () -> isConfidential && !encryptionStatusOk, te, E1112,\n             value );\n \n         // Uses ValidationUtils to check that the data value corresponds to the\n         // data value type set on the attribute\n         final String result = dataValueIsValid( value, tea.getValueType() );\n-        addErrorIf( () -> result != null, reporter, te, E1085, tea, result );\n+        reporter.addErrorIf( () -> result != null, te, E1085, tea, result );\n     }\n \n     protected void validateFileNotAlreadyAssigned( ValidationErrorReporter reporter, TrackedEntity te,\n", "next_change": {"commit": "9ff8d0c831d8448a696a37138139a0ae5b975c86", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\nindex 73afe472f0..d4f0db9eee 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n", "chunk": "@@ -194,7 +196,7 @@ public class TrackedEntityAttributeValidationHook extends AttributeValidationHoo\n     }\n \n     protected void validateFileNotAlreadyAssigned( ValidationErrorReporter reporter, TrackedEntity te,\n-        Attribute attr, Map<String, TrackedEntityAttributeValue> valueMap )\n+        Attribute attr, Map<MetadataIdentifier, TrackedEntityAttributeValue> valueMap )\n     {\n         checkNotNull( attr, ATTRIBUTE_CANT_BE_NULL );\n \n", "next_change": {"commit": "f7cfc83610c75486bbb0457dde057eaed777f3d2", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\nindex d4f0db9eee..6b594a9ab7 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n", "chunk": "@@ -195,7 +197,8 @@ public class TrackedEntityAttributeValidationHook extends AttributeValidationHoo\n         reporter.addErrorIf( () -> result != null, te, E1085, tea, result );\n     }\n \n-    protected void validateFileNotAlreadyAssigned( ValidationErrorReporter reporter, TrackedEntity te,\n+    protected void validateFileNotAlreadyAssigned( ValidationErrorReporter reporter, TrackerBundle bundle,\n+        TrackedEntity te,\n         Attribute attr, Map<MetadataIdentifier, TrackedEntityAttributeValue> valueMap )\n     {\n         checkNotNull( attr, ATTRIBUTE_CANT_BE_NULL );\n", "next_change": {"commit": "9ee39f390105c4517d67abfb5dbb377f9fb82074", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\nindex 6b594a9ab7..0fdb897d7e 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n", "chunk": "@@ -173,30 +163,6 @@ public class TrackedEntityAttributeValidationHook extends AttributeValidationHoo\n         }\n     }\n \n-    public void validateAttributeValue( ValidationErrorReporter reporter, TrackedEntity te, TrackedEntityAttribute tea,\n-        String value )\n-    {\n-        checkNotNull( tea, TRACKED_ENTITY_ATTRIBUTE_VALUE_CANT_BE_NULL );\n-        checkNotNull( value, TRACKED_ENTITY_ATTRIBUTE_VALUE_CANT_BE_NULL );\n-\n-        // Validate value (string) don't exceed the max length\n-        reporter.addErrorIf( () -> value.length() > Constant.MAX_ATTR_VALUE_LENGTH, te,\n-            E1077, value,\n-            Constant.MAX_ATTR_VALUE_LENGTH );\n-\n-        // Validate if that encryption is configured properly if someone sets\n-        // value to (confidential)\n-        boolean isConfidential = tea.isConfidentialBool();\n-        boolean encryptionStatusOk = dhisConfigurationProvider.getEncryptionStatus().isOk();\n-        reporter.addErrorIf( () -> isConfidential && !encryptionStatusOk, te, E1112,\n-            value );\n-\n-        // Uses ValidationUtils to check that the data value corresponds to the\n-        // data value type set on the attribute\n-        final String result = dataValueIsValid( value, tea.getValueType() );\n-        reporter.addErrorIf( () -> result != null, te, E1085, tea, result );\n-    }\n-\n     protected void validateFileNotAlreadyAssigned( ValidationErrorReporter reporter, TrackerBundle bundle,\n         TrackedEntity te,\n         Attribute attr, Map<MetadataIdentifier, TrackedEntityAttributeValue> valueMap )\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "message": "Merge commit", "committedDate": null}, {"oid": "2ed799f33ca26b918ed60473a3f097714f00492e", "committedDate": "2020-08-04 10:30:01 +0200", "message": "chore: Clean up code (#5877)"}, {"oid": "3e3dc98d92f0c13fb56cf17894eab06a78842133", "committedDate": "2020-08-04 17:20:37 +0200", "message": "feat: Enrollment/Events note persistence"}, {"oid": "e1260b5e8fceb13c2883754236a34cdd652e1c1c", "committedDate": "2020-10-20 14:00:34 +0200", "message": "refactor: Load in the preheat all the data needed for uniqueness attr\u2026 (#6397)"}, {"oid": "3e3b32e56ff5554a0095396eddffceac65b6b8de", "committedDate": "2020-10-27 09:56:50 +0100", "message": "refactor: simplified calls to error reporting (#6437)"}, {"oid": "0bf55d776481f6511e5f9ebca5de1f2cf79777c0", "committedDate": "2020-11-19 13:55:46 +0100", "message": "refactor: New Tracker Error reporting refactor (#6706)"}, {"oid": "d3aa60aac248b75b5728d245a876b0a0905748fb", "committedDate": "2020-12-02 16:34:37 +0100", "message": "fix: logic added to tracker importer to validate TEIs mandatory attributes (#6768) DHIS2-10001"}, {"oid": "7f2791b80c8bbb75a6e2a47212bf15b5e3ebeeca", "committedDate": "2020-12-04 09:17:45 +0100", "message": "fix: fix for trackedEntityTypeAttributes ( DHIS2-10001)  (#6819)"}, {"oid": "699074cbe82db1a8e0a5e72edf2a981f3628b54b", "committedDate": "2020-12-07 10:47:48 +0100", "message": "fix: Tracker Identifiers resolution during Tracker import (#6824)"}, {"oid": "16ae2da89c2d883763e33d9d0833f9b033d711c0", "committedDate": "2021-01-05 11:55:44 +0100", "message": "fix: Fix lazy exception for default category combo (#7014)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "c25b817a180f24b3de6b26d5a089563aa336aa8c", "committedDate": "2021-03-05 10:44:25 +0100", "message": "feat: Validation for values with option sets [DHIS2-10452] (#7512)"}, {"oid": "60fe241badad5b1463bc3991eff2927abae32644", "committedDate": "2021-04-21 13:49:15 +0200", "message": "fix: [DHIS2-10797] Fix remove null values for tracker attributes and data values 2.37 (#7880)"}, {"oid": "1e75d833b15ed65163451abb7d4dfb99831484de", "committedDate": "2021-04-26 09:14:51 +0200", "message": "[TECH-454] DB access in TrackedEntityAttributeValidationHook 2.37 (#7905)"}, {"oid": "40d6e6a31520cace4ff69d2bdde2bdd5f91df0f6", "committedDate": "2021-05-10 11:34:45 +0200", "message": "fix: [DHIS2-10797] Fix remove null values for tracker attributes and data values (#7994)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "97fa18701761c6993e20f2e7a3816ea689129480", "committedDate": "2022-01-11 15:31:02 +0100", "message": "chore: hooks should add errors via reporter directly TECH-880 (#9523)"}, {"oid": "1d8350a9e9ac100aaaa831894ba3f857b46e2474", "committedDate": "2022-01-13 14:15:17 +0100", "message": "chore: adding errors and warnings is responsibility of the ValidationErrorReporter TECH-880 (#9616)"}, {"oid": "c039b8f75c1d965414de926f04540dfaabdd104c", "committedDate": "2022-02-23 13:08:25 +0100", "message": "chore: Clean up service program rule module [TECH-938] (#9885)"}, {"oid": "ef0cbd365e47f1f88befb80d9650cce75280bd35", "committedDate": "2022-03-08 15:12:00 +0100", "message": "chore: move DB access and mutation to preheat and preprocessor DHIS2-12623 (#9904)"}, {"oid": "1a6c87df8b289f113b0f6bc476d07113cc2e945e", "committedDate": "2022-03-11 09:29:14 +0100", "message": "fix: Skip fileResource.issAssigned check for CREATE (#9979)"}, {"oid": "9ff8d0c831d8448a696a37138139a0ae5b975c86", "committedDate": "2022-05-17 13:32:06 +0200", "message": "fix: Attribute.attribute is a MetadataIdentifier DHIS2-12563 (#10782)"}, {"oid": "b567e74f7d703115fb7bc9802ed3b5f29d6917aa", "committedDate": "2022-05-23 09:13:55 +0200", "message": "fix: report ids or attribute value for MetadataIdentifiers DHIS2-12519 (#10873)"}, {"oid": "f7cfc83610c75486bbb0457dde057eaed777f3d2", "committedDate": "2022-05-27 15:15:25 +0200", "message": "chore: ValidationErrorReporter does not need the bunlde DHIS2-12519 (#10878)"}, {"oid": "e1740a5804e29683f4310e9fd284b637c8acb6b1", "committedDate": "2022-06-02 14:24:41 +0000", "message": "test: add context to failed TrackedEntityProgramAttributeEncryptionTest (#10971)"}, {"oid": "9ee39f390105c4517d67abfb5dbb377f9fb82074", "committedDate": "2022-06-10 10:50:40 +0200", "message": "fix: Validate enrollment attributes values based on valueType in NTI [DHIS2-12669] (2.39) (#11050)"}, {"oid": "1cabae879cd65d1f6925c6ea5a6fe23e128bcf86", "committedDate": "2022-06-14 12:07:33 +0200", "message": "feat: Persist fileResource owner from file side (#11008)"}, {"oid": "b0a861c0308005b865cafa2344c1231c0a4f2bc3", "committedDate": "2022-12-02 13:36:08 +0100", "message": "fix: turn removeOnError into skipOnError DHIS2-14213 (#12457)"}, {"oid": "7ac68b368a1dbd9362973b30f7160399abe801a0", "committedDate": "2022-12-06 09:04:47 +0100", "message": "chore: move ValidationErrorReporter close to its usage (#12486)"}, {"oid": "07ff89195ce66114c2b5a744039c2b2ce7a8f440", "committedDate": "2022-12-13 09:51:43 +0100", "message": "chore: Clean up TrackerBundle methods [TECH-14298] (#12515)"}, {"oid": "2675c1943874115831bcbe53d78b44557ceadd96", "committedDate": "2022-12-13 10:48:31 +0000", "message": "chore: add smaller Validator interface (#12524)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkwMjEyMw==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r429902123", "body": "@Bekkalizer ", "bodyText": "@Bekkalizer", "bodyHTML": "<p dir=\"auto\"><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/Bekkalizer/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/Bekkalizer\">@Bekkalizer</a></p>", "author": "mortenoh", "createdAt": "2020-05-25T12:12:07Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/service/DefaultTrackerImportAccessManager.java", "diffHunk": "@@ -0,0 +1,308 @@\n+package org.hisp.dhis.tracker.validation.service;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.hisp.dhis.category.CategoryOption;\n+import org.hisp.dhis.category.CategoryOptionCombo;\n+import org.hisp.dhis.organisationunit.OrganisationUnit;\n+import org.hisp.dhis.organisationunit.OrganisationUnitService;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.program.ProgramInstance;\n+import org.hisp.dhis.program.ProgramStage;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.security.acl.AclService;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+import org.hisp.dhis.trackedentity.TrackedEntityType;\n+import org.hisp.dhis.trackedentity.TrackerOwnershipManager;\n+import org.hisp.dhis.tracker.bundle.TrackerBundle;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n+import org.hisp.dhis.tracker.validation.hooks.Constants;\n+import org.hisp.dhis.user.User;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Objects;\n+\n+import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n+import static org.hisp.dhis.tracker.validation.hooks.Constants.ORGANISATION_UNIT_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.Constants.PROGRAM_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.Constants.PROGRAM_INSTANCE_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.Constants.PROGRAM_STAGE_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.Constants.PROGRAM_STAGE_INSTANCE_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.Constants.TRACKED_ENTITY_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.Constants.TRACKED_ENTITY_TYPE_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.Constants.USER_CANT_BE_NULL;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+@Component\n+public class DefaultTrackerImportAccessManager\n+    implements TrackerImportAccessManager\n+{\n+    private final AclService aclService;\n+\n+    private final TrackerOwnershipManager ownershipAccessManager;\n+\n+    private final OrganisationUnitService organisationUnitService;\n+\n+    public DefaultTrackerImportAccessManager( AclService aclService, TrackerOwnershipManager ownershipAccessManager,\n+        OrganisationUnitService organisationUnitService )\n+    {\n+        Objects.requireNonNull( aclService );\n+        Objects.requireNonNull( ownershipAccessManager );\n+        Objects.requireNonNull( organisationUnitService );\n+\n+        this.aclService = aclService;\n+        this.ownershipAccessManager = ownershipAccessManager;\n+        this.organisationUnitService = organisationUnitService;\n+    }\n+\n+    public void checkOrgUnitInSearchScope( ValidationErrorReporter reporter, \n+        OrganisationUnit orgUnit )\n+    {\n+        TrackerBundle bundle = reporter.getValidationContext().getBundle();\n+        User user = bundle.getUser();\n+\n+        Objects.requireNonNull( user, USER_CANT_BE_NULL );\n+        Objects.requireNonNull( orgUnit, ORGANISATION_UNIT_CANT_BE_NULL );\n+\n+        if ( !organisationUnitService.isInUserSearchHierarchyCached( user, orgUnit ) )\n+        {\n+            reporter.addError( newReport( TrackerErrorCode.E1093 )\n+                .addArg( user )\n+                .addArg( orgUnit ) );\n+        }\n+    }\n+\n+    public void checkOrgUnitInCaptureScope( ValidationErrorReporter reporter, \n+        OrganisationUnit orgUnit )\n+    {\n+        TrackerBundle bundle = reporter.getValidationContext().getBundle();\n+        User user = bundle.getUser();\n+\n+        Objects.requireNonNull( user, USER_CANT_BE_NULL );\n+        Objects.requireNonNull( orgUnit, ORGANISATION_UNIT_CANT_BE_NULL );\n+\n+        if ( !organisationUnitService.isInUserHierarchyCached( user, orgUnit ) )\n+        {\n+            reporter.addError( newReport( TrackerErrorCode.E1000 )\n+                .addArg( user )\n+                .addArg( orgUnit ) );\n+        }\n+    }\n+\n+    public void checkTeiTypeWriteAccess( ValidationErrorReporter reporter, User user,\n+        TrackedEntityType trackedEntityType )\n+    {\n+        Objects.requireNonNull( user, USER_CANT_BE_NULL );\n+        Objects.requireNonNull( trackedEntityType, TRACKED_ENTITY_TYPE_CANT_BE_NULL );\n+\n+        if ( !aclService.canDataWrite( user, trackedEntityType ) )\n+        {\n+            reporter.addError( newReport( TrackerErrorCode.E1001 )\n+                .addArg( user )\n+                .addArg( trackedEntityType ) );\n+        }\n+    }\n+\n+    @Override\n+    public void checkReadEnrollmentAccess( ValidationErrorReporter reporter, User user,\n+        ProgramInstance programInstance )\n+    {\n+        Objects.requireNonNull( user, USER_CANT_BE_NULL );\n+        Objects.requireNonNull( programInstance, PROGRAM_INSTANCE_CANT_BE_NULL );\n+        Objects.requireNonNull( programInstance.getProgram(), PROGRAM_CANT_BE_NULL );\n+\n+        checkProgramReadAccess( reporter, user, programInstance.getProgram() );\n+\n+        if ( programInstance.getProgram().isRegistration() )\n+        {\n+            checkTeiTypeAndTeiProgramAccess( reporter, user, programInstance.getEntityInstance(),\n+                programInstance.getProgram() );\n+        }\n+        else\n+        {\n+            OrganisationUnit ou = programInstance.getOrganisationUnit();\n+            if ( ou != null && !organisationUnitService.isInUserSearchHierarchyCached( user, ou ) )\n+            {\n+                reporter.addError( newReport( TrackerErrorCode.E1101 )\n+                    .addArg( user )\n+                    .addArg( ou ) );\n+            }\n+        }\n+    }\n+\n+    protected void checkTeiTypeAndTeiProgramAccess( ValidationErrorReporter reporter, User user,\n+        TrackedEntityInstance trackedEntityInstance,\n+        Program program )\n+    {\n+        Objects.requireNonNull( user, USER_CANT_BE_NULL );\n+        Objects.requireNonNull( program, PROGRAM_CANT_BE_NULL );\n+        Objects.requireNonNull( program.getTrackedEntityType(), TRACKED_ENTITY_TYPE_CANT_BE_NULL );\n+        Objects.requireNonNull( trackedEntityInstance, TRACKED_ENTITY_CANT_BE_NULL );\n+\n+        if ( !aclService.canDataRead( user, program.getTrackedEntityType() ) )\n+        {\n+            reporter.addError( newReport( TrackerErrorCode.E1104 )\n+                .addArg( user )\n+                .addArg( program )\n+                .addArg( program.getTrackedEntityType() ) );\n+        }\n+\n+        if ( !ownershipAccessManager.hasAccess( user, trackedEntityInstance, program ) )\n+        {\n+            reporter.addError( newReport( TrackerErrorCode.E1102 )\n+                .addArg( user )\n+                .addArg( trackedEntityInstance )\n+                .addArg( program ) );\n+        }\n+    }\n+\n+    @Override\n+    public void checkWriteEnrollmentAccess( ValidationErrorReporter reporter, User user, Program program,\n+        ProgramInstance programInstance )\n+    {\n+        Objects.requireNonNull( user, USER_CANT_BE_NULL );\n+        Objects.requireNonNull( programInstance, PROGRAM_INSTANCE_CANT_BE_NULL );\n+        Objects.requireNonNull( program, PROGRAM_CANT_BE_NULL );\n+\n+        checkProgramWriteAccess( reporter, user, program );\n+\n+        if ( program.isRegistration() )\n+        {\n+            Objects.requireNonNull( program.getTrackedEntityType(), TRACKED_ENTITY_TYPE_CANT_BE_NULL );\n+            checkTeiTypeAndTeiProgramAccess( reporter, user, programInstance.getEntityInstance(), program );\n+        }\n+    }\n+\n+    @Override\n+    public void checkEventWriteAccess( ValidationErrorReporter reporter, User user,\n+        ProgramStageInstance programStageInstance )\n+    {\n+        Objects.requireNonNull( user, USER_CANT_BE_NULL );\n+        Objects.requireNonNull( programStageInstance, PROGRAM_STAGE_INSTANCE_CANT_BE_NULL );\n+        Objects.requireNonNull( programStageInstance.getProgramStage(), PROGRAM_STAGE_CANT_BE_NULL );\n+        Objects.requireNonNull( programStageInstance.getProgramStage().getProgram(), PROGRAM_CANT_BE_NULL );\n+        Objects.requireNonNull( programStageInstance.getOrganisationUnit(), ORGANISATION_UNIT_CANT_BE_NULL );\n+\n+        OrganisationUnit ou = programStageInstance.getOrganisationUnit();\n+\n+        // TODO: Get better explanation for isCreatableInSearchScope() what is this", "originalCommit": "a59d4b4c1f3b0aa2ee51ac1bab3b372412ab878e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d2feae85e2920e2ecd5cce7d310e926ae797cd2c", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/service/DefaultTrackerImportAccessManager.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/service/DefaultTrackerImportAccessManager.java\nindex cdde11555b..fde8422aec 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/service/DefaultTrackerImportAccessManager.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/service/DefaultTrackerImportAccessManager.java\n", "chunk": "@@ -203,25 +204,26 @@ public class DefaultTrackerImportAccessManager\n     }\n \n     @Override\n-    public void checkEventWriteAccess( ValidationErrorReporter reporter, User user,\n-        ProgramStageInstance programStageInstance )\n+    public void checkEventWriteAccess( ValidationErrorReporter reporter, ProgramStageInstance programStageInstance )\n     {\n+        TrackerBundle bundle = reporter.getValidationContext().getBundle();\n+        User user = bundle.getUser();\n+\n         Objects.requireNonNull( user, USER_CANT_BE_NULL );\n         Objects.requireNonNull( programStageInstance, PROGRAM_STAGE_INSTANCE_CANT_BE_NULL );\n         Objects.requireNonNull( programStageInstance.getProgramStage(), PROGRAM_STAGE_CANT_BE_NULL );\n         Objects.requireNonNull( programStageInstance.getProgramStage().getProgram(), PROGRAM_CANT_BE_NULL );\n         Objects.requireNonNull( programStageInstance.getOrganisationUnit(), ORGANISATION_UNIT_CANT_BE_NULL );\n \n-        OrganisationUnit ou = programStageInstance.getOrganisationUnit();\n+        OrganisationUnit orgUnit = programStageInstance.getOrganisationUnit();\n \n-        // TODO: Get better explanation for isCreatableInSearchScope() what is this\n         if ( programStageInstance.isCreatableInSearchScope() ?\n-            !organisationUnitService.isInUserSearchHierarchyCached( user, ou )\n-            : !organisationUnitService.isInUserHierarchyCached( user, ou ) )\n+            !organisationUnitService.isInUserSearchHierarchyCached( user, orgUnit )\n+            : !organisationUnitService.isInUserHierarchyCached( user, orgUnit ) )\n         {\n             reporter.addError( newReport( TrackerErrorCode.E1000 )\n                 .addArg( user )\n-                .addArg( ou ) );\n+                .addArg( orgUnit ) );\n         }\n \n         if ( programStageInstance.getProgramStage().getProgram().isWithoutRegistration() )\n", "next_change": {"commit": "3999d1c8e8d7c2bcd11c7c5d99fec179abd25e2b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/service/DefaultTrackerImportAccessManager.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/service/DefaultTrackerImportAccessManager.java\nindex fde8422aec..46294e1d4f 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/service/DefaultTrackerImportAccessManager.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/service/DefaultTrackerImportAccessManager.java\n", "chunk": "@@ -232,7 +231,7 @@ public class DefaultTrackerImportAccessManager\n         }\n         else\n         {\n-            Objects.requireNonNull( programStageInstance.getProgramInstance(), PROGRAM_INSTANCE_CANT_BE_NULL );\n+            checkNotNull( programStageInstance.getProgramInstance(), PROGRAM_INSTANCE_CANT_BE_NULL );\n \n             checkProgramStageWriteAccess( reporter, user, programStageInstance.getProgramStage() );\n             checkProgramReadAccess( reporter, user, programStageInstance.getProgramStage().getProgram() );\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/service/DefaultTrackerImportAccessManager.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/service/DefaultTrackerImportAccessManager.java\nindex cdde11555b..91f653a851 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/service/DefaultTrackerImportAccessManager.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/service/DefaultTrackerImportAccessManager.java\n", "chunk": "@@ -186,42 +185,46 @@ public class DefaultTrackerImportAccessManager\n     }\n \n     @Override\n-    public void checkWriteEnrollmentAccess( ValidationErrorReporter reporter, User user, Program program,\n+    public void checkWriteEnrollmentAccess( ValidationErrorReporter reporter, Program program,\n         ProgramInstance programInstance )\n     {\n-        Objects.requireNonNull( user, USER_CANT_BE_NULL );\n-        Objects.requireNonNull( programInstance, PROGRAM_INSTANCE_CANT_BE_NULL );\n-        Objects.requireNonNull( program, PROGRAM_CANT_BE_NULL );\n+        TrackerBundle bundle = reporter.getValidationContext().getBundle();\n+        User user = bundle.getUser();\n+\n+        checkNotNull( user, USER_CANT_BE_NULL );\n+        checkNotNull( programInstance, PROGRAM_INSTANCE_CANT_BE_NULL );\n+        checkNotNull( program, PROGRAM_CANT_BE_NULL );\n \n         checkProgramWriteAccess( reporter, user, program );\n \n         if ( program.isRegistration() )\n         {\n-            Objects.requireNonNull( program.getTrackedEntityType(), TRACKED_ENTITY_TYPE_CANT_BE_NULL );\n+            checkNotNull( program.getTrackedEntityType(), TRACKED_ENTITY_TYPE_CANT_BE_NULL );\n             checkTeiTypeAndTeiProgramAccess( reporter, user, programInstance.getEntityInstance(), program );\n         }\n     }\n \n     @Override\n-    public void checkEventWriteAccess( ValidationErrorReporter reporter, User user,\n-        ProgramStageInstance programStageInstance )\n+    public void checkEventWriteAccess( ValidationErrorReporter reporter, ProgramStageInstance programStageInstance )\n     {\n-        Objects.requireNonNull( user, USER_CANT_BE_NULL );\n-        Objects.requireNonNull( programStageInstance, PROGRAM_STAGE_INSTANCE_CANT_BE_NULL );\n-        Objects.requireNonNull( programStageInstance.getProgramStage(), PROGRAM_STAGE_CANT_BE_NULL );\n-        Objects.requireNonNull( programStageInstance.getProgramStage().getProgram(), PROGRAM_CANT_BE_NULL );\n-        Objects.requireNonNull( programStageInstance.getOrganisationUnit(), ORGANISATION_UNIT_CANT_BE_NULL );\n+        TrackerBundle bundle = reporter.getValidationContext().getBundle();\n+        User user = bundle.getUser();\n \n-        OrganisationUnit ou = programStageInstance.getOrganisationUnit();\n+        checkNotNull( user, USER_CANT_BE_NULL );\n+        checkNotNull( programStageInstance, PROGRAM_STAGE_INSTANCE_CANT_BE_NULL );\n+        checkNotNull( programStageInstance.getProgramStage(), PROGRAM_STAGE_CANT_BE_NULL );\n+        checkNotNull( programStageInstance.getProgramStage().getProgram(), PROGRAM_CANT_BE_NULL );\n+        checkNotNull( programStageInstance.getOrganisationUnit(), ORGANISATION_UNIT_CANT_BE_NULL );\n+\n+        OrganisationUnit orgUnit = programStageInstance.getOrganisationUnit();\n \n-        // TODO: Get better explanation for isCreatableInSearchScope() what is this\n         if ( programStageInstance.isCreatableInSearchScope() ?\n-            !organisationUnitService.isInUserSearchHierarchyCached( user, ou )\n-            : !organisationUnitService.isInUserHierarchyCached( user, ou ) )\n+            !organisationUnitService.isInUserSearchHierarchyCached( user, orgUnit )\n+            : !organisationUnitService.isInUserHierarchyCached( user, orgUnit ) )\n         {\n             reporter.addError( newReport( TrackerErrorCode.E1000 )\n                 .addArg( user )\n-                .addArg( ou ) );\n+                .addArg( orgUnit ) );\n         }\n \n         if ( programStageInstance.getProgramStage().getProgram().isWithoutRegistration() )\n", "next_change": {"commit": "d095f2d4cf9aaac1e9aa973d4da6aa2f96104cc8", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/service/DefaultTrackerImportAccessManager.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/service/DefaultTrackerImportAccessManager.java\nindex 91f653a851..df51080e3a 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/service/DefaultTrackerImportAccessManager.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/service/DefaultTrackerImportAccessManager.java\n", "chunk": "@@ -227,25 +221,24 @@ public class DefaultTrackerImportAccessManager\n                 .addArg( orgUnit ) );\n         }\n \n-        if ( programStageInstance.getProgramStage().getProgram().isWithoutRegistration() )\n+        if ( programStage.getProgram().isWithoutRegistration() )\n         {\n-            checkProgramWriteAccess( reporter, user, programStageInstance.getProgramStage().getProgram() );\n+            checkProgramWriteAccess( reporter, user, programStage.getProgram() );\n         }\n         else\n         {\n-            checkNotNull( programStageInstance.getProgramInstance(), PROGRAM_INSTANCE_CANT_BE_NULL );\n-\n-            checkProgramStageWriteAccess( reporter, user, programStageInstance.getProgramStage() );\n-            checkProgramReadAccess( reporter, user, programStageInstance.getProgramStage().getProgram() );\n+            checkProgramStageWriteAccess( reporter, user, programStage );\n+            checkProgramReadAccess( reporter, user, programStage.getProgram() );\n \n             checkTeiTypeAndTeiProgramAccess( reporter, user,\n-                programStageInstance.getProgramInstance().getEntityInstance(),\n-                programStageInstance.getProgramStage().getProgram() );\n+                trackedEntity,\n+                orgUnit,\n+                programStage.getProgram() );\n         }\n \n-        if ( programStageInstance.getAttributeOptionCombo() != null )\n+        if ( categoryOptionCombo != null )\n         {\n-            checkWriteCategoryOptionComboAccess( reporter, programStageInstance.getAttributeOptionCombo() );\n+            checkWriteCategoryOptionComboAccess( reporter, categoryOptionCombo );\n         }\n     }\n \n", "next_change": {"commit": "2e2099d6db366b906110376b9a5ad1cead4b33ec", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/service/DefaultTrackerImportAccessManager.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/service/DefaultTrackerImportAccessManager.java\ndeleted file mode 100644\nindex df51080e3a..0000000000\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/service/DefaultTrackerImportAccessManager.java\n+++ /dev/null\n", "chunk": "@@ -1,307 +0,0 @@\n-package org.hisp.dhis.tracker.validation.service;\n-\n-/*\n- * Copyright (c) 2004-2020, University of Oslo\n- * All rights reserved.\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions are met:\n- * Redistributions of source code must retain the above copyright notice, this\n- * list of conditions and the following disclaimer.\n- *\n- * Redistributions in binary form must reproduce the above copyright notice,\n- * this list of conditions and the following disclaimer in the documentation\n- * and/or other materials provided with the distribution.\n- * Neither the name of the HISP project nor the names of its contributors may\n- * be used to endorse or promote products derived from this software without\n- * specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n- * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n- * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n- * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n- * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n- * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n- * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- */\n-\n-import static com.google.api.client.util.Preconditions.checkNotNull;\n-import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n-import static org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors.ORGANISATION_UNIT_CANT_BE_NULL;\n-import static org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors.PROGRAM_CANT_BE_NULL;\n-import static org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors.PROGRAM_STAGE_CANT_BE_NULL;\n-import static org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors.TRACKED_ENTITY_CANT_BE_NULL;\n-import static org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors.TRACKED_ENTITY_TYPE_CANT_BE_NULL;\n-import static org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors.USER_CANT_BE_NULL;\n-\n-import org.hisp.dhis.category.CategoryOption;\n-import org.hisp.dhis.category.CategoryOptionCombo;\n-import org.hisp.dhis.organisationunit.OrganisationUnit;\n-import org.hisp.dhis.organisationunit.OrganisationUnitService;\n-import org.hisp.dhis.program.Program;\n-import org.hisp.dhis.program.ProgramStage;\n-import org.hisp.dhis.security.acl.AclService;\n-import org.hisp.dhis.trackedentity.TrackedEntityType;\n-import org.hisp.dhis.trackedentity.TrackerOwnershipManager;\n-import org.hisp.dhis.tracker.bundle.TrackerBundle;\n-import org.hisp.dhis.tracker.report.TrackerErrorCode;\n-import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n-import org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors;\n-import org.hisp.dhis.user.User;\n-import org.springframework.stereotype.Component;\n-\n-/**\n- * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n- */\n-@Component\n-public class DefaultTrackerImportAccessManager\n-    implements TrackerImportAccessManager\n-{\n-    private final AclService aclService;\n-\n-    private final TrackerOwnershipManager ownershipAccessManager;\n-\n-    private final OrganisationUnitService organisationUnitService;\n-\n-    public DefaultTrackerImportAccessManager( AclService aclService, TrackerOwnershipManager ownershipAccessManager,\n-        OrganisationUnitService organisationUnitService )\n-    {\n-        checkNotNull( aclService );\n-        checkNotNull( ownershipAccessManager );\n-        checkNotNull( organisationUnitService );\n-\n-        this.aclService = aclService;\n-        this.ownershipAccessManager = ownershipAccessManager;\n-        this.organisationUnitService = organisationUnitService;\n-    }\n-\n-    public void checkOrgUnitInSearchScope( ValidationErrorReporter reporter, OrganisationUnit orgUnit )\n-    {\n-        TrackerBundle bundle = reporter.getValidationContext().getBundle();\n-        User user = bundle.getUser();\n-\n-        checkNotNull( user, USER_CANT_BE_NULL );\n-        checkNotNull( orgUnit, ORGANISATION_UNIT_CANT_BE_NULL );\n-\n-        if ( !organisationUnitService.isInUserSearchHierarchyCached( user, orgUnit ) )\n-        {\n-            //TODO: This state I can't reach, can't enroll in programs without registration...\n-            // maybe remove in the new importer?\n-            reporter.addError( newReport( TrackerErrorCode.E1093 )\n-                .addArg( user )\n-                .addArg( orgUnit ) );\n-        }\n-    }\n-\n-    public void checkOrgUnitInCaptureScope( ValidationErrorReporter reporter, OrganisationUnit orgUnit )\n-    {\n-        TrackerBundle bundle = reporter.getValidationContext().getBundle();\n-        User user = bundle.getUser();\n-\n-        checkNotNull( user, USER_CANT_BE_NULL );\n-        checkNotNull( orgUnit, ORGANISATION_UNIT_CANT_BE_NULL );\n-\n-        if ( !organisationUnitService.isInUserHierarchyCached( user, orgUnit ) )\n-        {\n-            reporter.addError( newReport( TrackerErrorCode.E1000 )\n-                .addArg( user )\n-                .addArg( orgUnit ) );\n-        }\n-    }\n-\n-    public void checkTeiTypeWriteAccess( ValidationErrorReporter reporter, TrackedEntityType trackedEntityType )\n-    {\n-        TrackerBundle bundle = reporter.getValidationContext().getBundle();\n-        User user = bundle.getUser();\n-\n-        checkNotNull( user, USER_CANT_BE_NULL );\n-        checkNotNull( trackedEntityType, TRACKED_ENTITY_TYPE_CANT_BE_NULL );\n-\n-        if ( !aclService.canDataWrite( user, trackedEntityType ) )\n-        {\n-            reporter.addError( newReport( TrackerErrorCode.E1001 )\n-                .addArg( user )\n-                .addArg( trackedEntityType ) );\n-        }\n-    }\n-\n-    @Override\n-    public void checkReadEnrollmentAccess( ValidationErrorReporter reporter, Program program,\n-        OrganisationUnit organisationUnit, String trackedEntity )\n-    {\n-        TrackerBundle bundle = reporter.getValidationContext().getBundle();\n-        User user = bundle.getUser();\n-\n-        checkNotNull( user, USER_CANT_BE_NULL );\n-        checkNotNull( program, PROGRAM_CANT_BE_NULL );\n-\n-        checkProgramReadAccess( reporter, user, program );\n-\n-        if ( program.isRegistration() )\n-        {\n-            checkTeiTypeAndTeiProgramAccess( reporter, user, trackedEntity, organisationUnit, program );\n-        }\n-        else\n-        {\n-            //TODO: This state I can't reach, can't enroll in programs without registration...\n-            // maybe remove in the new importer?\n-            checkOrgUnitInSearchScope( reporter, organisationUnit );\n-        }\n-    }\n-\n-    protected void checkTeiTypeAndTeiProgramAccess( ValidationErrorReporter reporter, User user,\n-        String trackedEntityInstance,\n-        OrganisationUnit organisationUnit,\n-        Program program )\n-    {\n-        checkNotNull( user, USER_CANT_BE_NULL );\n-        checkNotNull( program, PROGRAM_CANT_BE_NULL );\n-        checkNotNull( program.getTrackedEntityType(), TRACKED_ENTITY_TYPE_CANT_BE_NULL );\n-        checkNotNull( trackedEntityInstance, TRACKED_ENTITY_CANT_BE_NULL );\n-\n-        if ( !aclService.canDataRead( user, program.getTrackedEntityType() ) )\n-        {\n-            reporter.addError( newReport( TrackerErrorCode.E1104 )\n-                .addArg( user )\n-                .addArg( program )\n-                .addArg( program.getTrackedEntityType() ) );\n-        }\n-\n-        if ( !ownershipAccessManager.hasAccess( user, trackedEntityInstance, organisationUnit,\n-            program ) )\n-        {\n-            reporter.addError( newReport( TrackerErrorCode.E1102 )\n-                .addArg( user )\n-                .addArg( trackedEntityInstance )\n-                .addArg( program ) );\n-        }\n-    }\n-\n-    @Override\n-    public void checkWriteEnrollmentAccess(ValidationErrorReporter reporter, Program program,\n-        String trackedEntity, OrganisationUnit organisationUnit)\n-    {\n-        TrackerBundle bundle = reporter.getValidationContext().getBundle();\n-        User user = bundle.getUser();\n-\n-        checkNotNull( user, USER_CANT_BE_NULL );\n-        checkNotNull( program, PROGRAM_CANT_BE_NULL );\n-\n-        checkProgramWriteAccess( reporter, user, program );\n-\n-        if ( program.isRegistration() )\n-        {\n-            checkNotNull( program.getTrackedEntityType(), TRACKED_ENTITY_TYPE_CANT_BE_NULL );\n-            checkTeiTypeAndTeiProgramAccess( reporter, user, trackedEntity, organisationUnit, program );\n-        }\n-    }\n-\n-    @Override\n-    public void checkEventWriteAccess( ValidationErrorReporter reporter, ProgramStage programStage,\n-        OrganisationUnit orgUnit,\n-        CategoryOptionCombo categoryOptionCombo,\n-        String trackedEntity, boolean isCreatableInSearchScope )\n-    {\n-        TrackerBundle bundle = reporter.getValidationContext().getBundle();\n-        User user = bundle.getUser();\n-\n-        checkNotNull( user, USER_CANT_BE_NULL );\n-        checkNotNull( programStage, PROGRAM_STAGE_CANT_BE_NULL );\n-        checkNotNull( programStage.getProgram(), PROGRAM_CANT_BE_NULL );\n-        checkNotNull( orgUnit, ORGANISATION_UNIT_CANT_BE_NULL );\n-\n-        if ( isCreatableInSearchScope ? !organisationUnitService.isInUserSearchHierarchyCached( user, orgUnit )\n-            : !organisationUnitService.isInUserHierarchyCached( user, orgUnit ) )\n-        {\n-            reporter.addError( newReport( TrackerErrorCode.E1000 )\n-                .addArg( user )\n-                .addArg( orgUnit ) );\n-        }\n-\n-        if ( programStage.getProgram().isWithoutRegistration() )\n-        {\n-            checkProgramWriteAccess( reporter, user, programStage.getProgram() );\n-        }\n-        else\n-        {\n-            checkProgramStageWriteAccess( reporter, user, programStage );\n-            checkProgramReadAccess( reporter, user, programStage.getProgram() );\n-\n-            checkTeiTypeAndTeiProgramAccess( reporter, user,\n-                trackedEntity,\n-                orgUnit,\n-                programStage.getProgram() );\n-        }\n-\n-        if ( categoryOptionCombo != null )\n-        {\n-            checkWriteCategoryOptionComboAccess( reporter, categoryOptionCombo );\n-        }\n-    }\n-\n-    protected void checkProgramReadAccess( ValidationErrorReporter reporter, User user,\n-        Program program )\n-    {\n-        checkNotNull( user, USER_CANT_BE_NULL );\n-        checkNotNull( program, PROGRAM_CANT_BE_NULL );\n-\n-        if ( !aclService.canDataRead( user, program ) )\n-        {\n-            reporter.addError( newReport( TrackerErrorCode.E1096 )\n-                .addArg( user )\n-                .addArg( program ) );\n-        }\n-    }\n-\n-    protected void checkProgramStageWriteAccess( ValidationErrorReporter reporter, User user,\n-        ProgramStage programStage )\n-    {\n-        checkNotNull( user, USER_CANT_BE_NULL );\n-        checkNotNull( programStage, PROGRAM_STAGE_CANT_BE_NULL );\n-\n-        if ( !aclService.canDataWrite( user, programStage ) )\n-        {\n-            reporter.addError( newReport( TrackerErrorCode.E1095 )\n-                .addArg( user )\n-                .addArg( programStage ) );\n-        }\n-    }\n-\n-    protected void checkProgramWriteAccess( ValidationErrorReporter reporter, User user,\n-        Program program )\n-    {\n-        checkNotNull( user, USER_CANT_BE_NULL );\n-        checkNotNull( program, PROGRAM_CANT_BE_NULL );\n-\n-        if ( !aclService.canDataWrite( user, program ) )\n-        {\n-            reporter.addError( newReport( TrackerErrorCode.E1091 )\n-                .addArg( user )\n-                .addArg( program ) );\n-        }\n-    }\n-\n-    @Override\n-    public void checkWriteCategoryOptionComboAccess( ValidationErrorReporter reporter,\n-        CategoryOptionCombo categoryOptionCombo )\n-    {\n-        TrackerBundle bundle = reporter.getValidationContext().getBundle();\n-        User user = bundle.getUser();\n-\n-        checkNotNull( user, USER_CANT_BE_NULL );\n-        checkNotNull( categoryOptionCombo, TrackerImporterAssertErrors.CATEGORY_OPTION_COMBO_CANT_BE_NULL );\n-\n-        for ( CategoryOption categoryOption : categoryOptionCombo.getCategoryOptions() )\n-        {\n-            if ( !aclService.canDataWrite( user, categoryOption ) )\n-            {\n-                reporter.addError( newReport( TrackerErrorCode.E1099 )\n-                    .addArg( user )\n-                    .addArg( categoryOption ) );\n-            }\n-        }\n-    }\n-}\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "message": "Merge commit", "committedDate": null}, {"oid": "d095f2d4cf9aaac1e9aa973d4da6aa2f96104cc8", "committedDate": "2020-11-11 13:49:13 +0100", "message": "fix: allow validation to reference entities in the payload (#6617)"}, {"oid": "3e799d196b8f73ad216ea100a07ddd5f7dfc53e0", "committedDate": "2020-11-30 16:37:14 +0100", "message": "fix: remove long running transaction during Tracker Import (#6782)"}, {"oid": "f1ee41f1845d51b9efa6c5f5c666371ee503297a", "committedDate": "2020-12-09 21:22:05 +0100", "message": "fix: tune mappers to reduce queries executed during import (#6845)"}, {"oid": "e96350d39473b2ed5d851f6a4f12567fb3412b60", "committedDate": "2021-01-04 09:05:09 +0100", "message": "fix: get Program from preheat using Program from ProgramStage (#6982)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "7d032be663a1d9444d4bc1dbf3bc20ff0f861ec1", "committedDate": "2021-05-26 16:49:59 +0200", "message": "refactor: Clean up integration tests in the new importer [TECH-589] (#8076)"}, {"oid": "fe04922e144ac69367a99840d5518edda2d67f38", "committedDate": "2021-06-03 08:17:10 +0200", "message": "fix: Make program field read-only in event payload [DHIS2-11225] (#8086)"}, {"oid": "314988e32cd6b86d7010c4a46e17fd3c3d1b9cc3", "committedDate": "2021-08-31 22:03:14 +0200", "message": "fix: ownership validation and preheating in new tracker importer [DHIS2-11223] (#8158)"}, {"oid": "e72a194b035dc4f76df0c9cdaf7701a299b1558a", "committedDate": "2021-10-05 13:25:05 +0200", "message": "fix: Allow TEI updates in search scope [DHIS2-11910] (2.38) (#8921)"}, {"oid": "8bd63f9823397e39458bd1cdab383c33c3231019", "committedDate": "2021-12-22 09:32:29 +0100", "message": "chore: move factory methods into class it creates TECH-880 (#9518)"}, {"oid": "2e2099d6db366b906110376b9a5ad1cead4b33ec", "committedDate": "2021-12-22 15:36:47 +0100", "message": "chore: inline ImportAccessManager TECH-880 (#9524)"}]}, {"oid": "606c9bcaff72da6066f29c6a4add5ecfa0005b8e", "url": "https://github.com/dhis2/dhis2-core/commit/606c9bcaff72da6066f29c6a4add5ecfa0005b8e", "message": "* add tests for cat. combo\n\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>", "committedDate": "2020-05-25T12:56:49Z", "type": "commit"}, {"oid": "89412058d0c985e12f6a918553fc821aee448577", "url": "https://github.com/dhis2/dhis2-core/commit/89412058d0c985e12f6a918553fc821aee448577", "message": "* add tests for cat. combo with invalid start and/or end dates\n\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>", "committedDate": "2020-05-26T06:45:00Z", "type": "commit"}, {"oid": "2983ed58cdedc8eda673cc48da8c217f43b1c927", "url": "https://github.com/dhis2/dhis2-core/commit/2983ed58cdedc8eda673cc48da8c217f43b1c927", "message": "Merge branch 'master' of github.com:dhis2/dhis2-core into DHIS2-8879", "committedDate": "2020-05-27T11:06:49Z", "type": "commit"}, {"oid": "7cca3c481cc1a8298b2892d63285519b0d004505", "url": "https://github.com/dhis2/dhis2-core/commit/7cca3c481cc1a8298b2892d63285519b0d004505", "message": "* add tests for cat. tei enrollment existence\n\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>", "committedDate": "2020-05-27T12:47:20Z", "type": "commit"}, {"oid": "c689c5196d0dfc3e5aa01bcc5ad92690b5bec643", "url": "https://github.com/dhis2/dhis2-core/commit/c689c5196d0dfc3e5aa01bcc5ad92690b5bec643", "message": "* refactor not yet working deleted checks\n\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>", "committedDate": "2020-05-28T07:25:00Z", "type": "commit"}, {"oid": "0d63699ec0505559cb064cb9898690f280820120", "url": "https://github.com/dhis2/dhis2-core/commit/0d63699ec0505559cb064cb9898690f280820120", "message": "* add wrong date format string on events\n\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>", "committedDate": "2020-05-28T08:08:45Z", "type": "commit"}, {"oid": "2b9f7802c04f8bf2ebb2d3c6e4945111d44c6c85", "url": "https://github.com/dhis2/dhis2-core/commit/2b9f7802c04f8bf2ebb2d3c6e4945111d44c6c85", "message": "* more event cat. combo tests\n\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>", "committedDate": "2020-05-28T10:13:16Z", "type": "commit"}, {"oid": "98b3f66959949b5cdddb4ba10ec900de4de4e435", "url": "https://github.com/dhis2/dhis2-core/commit/98b3f66959949b5cdddb4ba10ec900de4de4e435", "message": "* merge master\n\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>", "committedDate": "2020-05-30T12:06:24Z", "type": "commit"}, {"oid": "746adc68e288421fae02872e611faec4d25ce807", "url": "https://github.com/dhis2/dhis2-core/commit/746adc68e288421fae02872e611faec4d25ce807", "message": "* more tests\n\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>", "committedDate": "2020-06-01T13:01:15Z", "type": "commit"}, {"oid": "ec4703268d379e2dde4ed22a1cc192e9e4b6c62c", "url": "https://github.com/dhis2/dhis2-core/commit/ec4703268d379e2dde4ed22a1cc192e9e4b6c62c", "message": "* more tests for invalid uuid\n\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>", "committedDate": "2020-06-01T15:56:28Z", "type": "commit"}, {"oid": "3e77f4b8e597ba000a126e053ebb3af75e7a664f", "url": "https://github.com/dhis2/dhis2-core/commit/3e77f4b8e597ba000a126e053ebb3af75e7a664f", "message": "* Code review fixes\n\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>", "committedDate": "2020-06-02T12:01:47Z", "type": "commit"}, {"oid": "a36d297c77b1689defcbd1fb3a3d3057545deffe", "url": "https://github.com/dhis2/dhis2-core/commit/a36d297c77b1689defcbd1fb3a3d3057545deffe", "message": "* Code review fixes\n\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>", "committedDate": "2020-06-02T12:34:55Z", "type": "commit"}, {"oid": "7ada2f10737c6ca69ecd459ae33c7f81da78876d", "url": "https://github.com/dhis2/dhis2-core/commit/7ada2f10737c6ca69ecd459ae33c7f81da78876d", "message": "Merge branch 'master' of github.com:dhis2/dhis2-core into DHIS2-8879", "committedDate": "2020-06-07T13:57:18Z", "type": "commit"}, {"oid": "630fd95223e7f44ec6b0a387218e0fce8abf3e20", "url": "https://github.com/dhis2/dhis2-core/commit/630fd95223e7f44ec6b0a387218e0fce8abf3e20", "message": "* Remove unnecessary use of integration test super class\n* Fix some broken tests\n\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>", "committedDate": "2020-06-07T15:14:18Z", "type": "commit"}, {"oid": "7ad7d29d225df3d013efa64c526f4cd4a17eb82e", "url": "https://github.com/dhis2/dhis2-core/commit/7ad7d29d225df3d013efa64c526f4cd4a17eb82e", "message": "* Moved validation hook order configuration into a separate config file\n\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>", "committedDate": "2020-06-07T16:34:42Z", "type": "commit"}, {"oid": "f08573476a30f321fcae15d305755925dd18ff14", "url": "https://github.com/dhis2/dhis2-core/commit/f08573476a30f321fcae15d305755925dd18ff14", "message": "* Rename new class\n\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>", "committedDate": "2020-06-07T16:37:06Z", "type": "commit"}, {"oid": "fcd1be9fe5724a0ee5a6f02206cf7719166e5508", "url": "https://github.com/dhis2/dhis2-core/commit/fcd1be9fe5724a0ee5a6f02206cf7719166e5508", "message": "Merge branch 'master' of github.com:dhis2/dhis2-core into DHIS2-8879", "committedDate": "2020-06-08T05:58:09Z", "type": "commit"}, {"oid": "b0d0fc69208bc9161ce1c8fdcc91b92957c2c4b9", "url": "https://github.com/dhis2/dhis2-core/commit/b0d0fc69208bc9161ce1c8fdcc91b92957c2c4b9", "message": "Merge branch 'master' of github.com:dhis2/dhis2-core into DHIS2-8879", "committedDate": "2020-06-09T09:41:04Z", "type": "commit"}, {"oid": "40f89ff55e5df34ea050ac72668ff0a73787dc86", "url": "https://github.com/dhis2/dhis2-core/commit/40f89ff55e5df34ea050ac72668ff0a73787dc86", "message": "* Adjust for testing performance\n\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>", "committedDate": "2020-06-11T08:39:03Z", "type": "commit"}, {"oid": "674cf17f6073d2438cba1e61439a6f0c8bc7afa5", "url": "https://github.com/dhis2/dhis2-core/commit/674cf17f6073d2438cba1e61439a6f0c8bc7afa5", "message": "* Adjust for testing performance\n\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>", "committedDate": "2020-06-11T10:59:51Z", "type": "commit"}, {"oid": "b66213acf4ca2bbe9c7cb7e8c74791d37dc334b5", "url": "https://github.com/dhis2/dhis2-core/commit/b66213acf4ca2bbe9c7cb7e8c74791d37dc334b5", "message": "* Adjust for testing performance\n\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>", "committedDate": "2020-06-12T05:13:49Z", "type": "commit"}, {"oid": "afdba080fe2b6e6c32180fe175c0e48d67d611e2", "url": "https://github.com/dhis2/dhis2-core/commit/afdba080fe2b6e6c32180fe175c0e48d67d611e2", "message": "* Master merge\n\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>", "committedDate": "2020-06-12T05:16:17Z", "type": "commit"}, {"oid": "6ccecbd0f6da424e90174d23f11e6a6498621100", "url": "https://github.com/dhis2/dhis2-core/commit/6ccecbd0f6da424e90174d23f11e6a6498621100", "message": "* Minor clean up & refactor of commit code\n\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>", "committedDate": "2020-06-13T07:25:51Z", "type": "commit"}, {"oid": "1be1b94dc7d58b48904fad7162f6bfe6db25a93b", "url": "https://github.com/dhis2/dhis2-core/commit/1be1b94dc7d58b48904fad7162f6bfe6db25a93b", "message": "* Tracker import performance testing/measure\n\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>", "committedDate": "2020-06-15T08:40:39Z", "type": "commit"}, {"oid": "4b7320ae91b2a1bae6327ba05fe8af93034deb66", "url": "https://github.com/dhis2/dhis2-core/commit/4b7320ae91b2a1bae6327ba05fe8af93034deb66", "message": "Merge branch 'master' of github.com:dhis2/dhis2-core into DHIS2-8879", "committedDate": "2020-06-17T09:55:36Z", "type": "commit"}, {"oid": "f5e7725a4401d586f0a0fe5f59e1d0f12bea829e", "url": "https://github.com/dhis2/dhis2-core/commit/f5e7725a4401d586f0a0fe5f59e1d0f12bea829e", "message": "Merge branch 'master' of github.com:dhis2/dhis2-core into DHIS2-8879", "committedDate": "2020-06-23T09:26:58Z", "type": "commit"}, {"oid": "c60fc745e12b8137c2948e2d26aceb8619d59717", "url": "https://github.com/dhis2/dhis2-core/commit/c60fc745e12b8137c2948e2d26aceb8619d59717", "message": "Merge branch 'master' of github.com:dhis2/dhis2-core into DHIS2-8879", "committedDate": "2020-06-24T07:53:16Z", "type": "commit"}, {"oid": "9cb1e1c80ec5cfee6c87cd12f3b92a3badfa9bd4", "url": "https://github.com/dhis2/dhis2-core/commit/9cb1e1c80ec5cfee6c87cd12f3b92a3badfa9bd4", "message": "* Fix logic bug in tracker import controller\n* Preserve nano sec precision on timer\n\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>", "committedDate": "2020-06-25T10:53:16Z", "type": "commit"}, {"oid": "e7e003a2211cdf3f412ce75f95ef0f6be1973434", "url": "https://github.com/dhis2/dhis2-core/commit/e7e003a2211cdf3f412ce75f95ef0f6be1973434", "message": "* Minor cleanup\n\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>", "committedDate": "2020-06-25T12:25:19Z", "type": "commit"}, {"oid": "c8f1d91dc8c64e9f31110bddf98e14be69bacbf9", "url": "https://github.com/dhis2/dhis2-core/commit/c8f1d91dc8c64e9f31110bddf98e14be69bacbf9", "message": "Merge branch 'master' of github.com:dhis2/dhis2-core into DHIS2-8879", "committedDate": "2020-06-25T14:23:33Z", "type": "commit"}, {"oid": "28422ee34ab2b3e4d8dc49e80b2de1cf44622371", "url": "https://github.com/dhis2/dhis2-core/commit/28422ee34ab2b3e4d8dc49e80b2de1cf44622371", "message": "* Fix test, add new case.\n\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>", "committedDate": "2020-06-26T02:41:03Z", "type": "commit"}, {"oid": "ad5654dcf03fa2ccb82adad686d9e13dde5a93b0", "url": "https://github.com/dhis2/dhis2-core/commit/ad5654dcf03fa2ccb82adad686d9e13dde5a93b0", "message": "* Fix SonarCloud : RSPEC-2229 : Bug\nExplained well in this: https://stackoverflow.com/questions/54567006/calling-transactional-method-from-non-transactional-method-in-spring-4-3\n\nhttps://rules.sonarsource.com/java/RSPEC-2229\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>", "committedDate": "2020-06-26T07:11:35Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU3Njk5Mw==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r445576993", "body": "Commented line", "bodyText": "Commented line", "bodyHTML": "<p dir=\"auto\">Commented line</p>", "author": "luciano-fiandesio", "createdAt": "2020-06-25T13:55:13Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java", "diffHunk": "@@ -101,41 +102,52 @@ public TrackerImportReport importTracker( TrackerImportParams params )\n             notifier.notify( params.getJobConfiguration(), message );\n         }\n \n-        TrackerImportReport importReport = new TrackerImportReport();\n+        Timer preheatTimer = new SystemTimer().start();\n \n         TrackerBundleParams bundleParams = params.toTrackerBundleParams();\n         List<TrackerBundle> trackerBundles = trackerBundleService.create( bundleParams );\n \n+        importReport.getTimings().setPreheat( preheatTimer.toString() );\n+\n         Timer validationTimer = new SystemTimer().start();\n \n         TrackerValidationReport validationReport = new TrackerValidationReport();\n-        trackerBundles.forEach( tb -> validationReport.add( trackerValidationService.validate( tb ) ) );\n \n-        message = \"(\" + params.getUsername() + \") Import:Validation took \" + validationTimer.toString();\n+        trackerBundles.forEach( tb ->\n+            validationReport.add( trackerValidationService.validate( tb ) ) );\n+\n+        String validationTimeFormatted = validationTimer.toString();\n+        message = \"(\" + params.getUsername() + \") Import:Validation took \" + validationTimeFormatted;\n         log.info( message );\n \n+        importReport.getTimings().setValidation( validationTimeFormatted );\n+\n+        importReport.setTrackerValidationReport( validationReport );\n+\n         if ( params.hasJobConfiguration() )\n         {\n             notifier.update( params.getJobConfiguration(), message );\n         }\n \n-        if ( !(!validationReport.isEmpty() && AtomicMode.ALL == params.getAtomicMode()) )\n+//        if ( !(!validationReport.isEmpty() && AtomicMode.ALL == params.getAtomicMode()) )", "originalCommit": "e7e003a2211cdf3f412ce75f95ef0f6be1973434", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c5a94c3d798ab59a16b994801255c4ac2631887b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\nindex 06ab14aa6f..f3e443befe 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\n", "chunk": "@@ -86,94 +86,100 @@ public class DefaultTrackerImportService\n     }\n \n     @Override\n-    @Transactional\n     public TrackerImportReport importTracker( TrackerImportParams params )\n     {\n+        Timer requestTimer = new SystemTimer().start();\n+\n         params.setUser( getUser( params.getUser(), params.getUserId() ) );\n \n         TrackerImportReport importReport = new TrackerImportReport();\n \n-        Timer totalTimer = new SystemTimer().start();\n-        String message = \"(\" + params.getUsername() + \") Import:Start\";\n-        log.info( message );\n-\n         if ( params.hasJobConfiguration() )\n         {\n-            notifier.notify( params.getJobConfiguration(), message );\n+            notifier.notify( params.getJobConfiguration(), \"(\" + params.getUsername() + \") Import:Start\" );\n         }\n \n-        Timer preheatTimer = new SystemTimer().start();\n-\n-        TrackerBundleParams bundleParams = params.toTrackerBundleParams();\n-        List<TrackerBundle> trackerBundles = trackerBundleService.create( bundleParams );\n-\n-        importReport.getTimings().setPreheat( preheatTimer.toString() );\n-\n-        Timer validationTimer = new SystemTimer().start();\n+        List<TrackerBundle> trackerBundles = preheatBundle( params, importReport );\n \n-        TrackerValidationReport validationReport = new TrackerValidationReport();\n-\n-        trackerBundles.forEach( tb ->\n-            validationReport.add( trackerValidationService.validate( tb ) ) );\n+        TrackerValidationReport validationReport = validateBundle( params, importReport, trackerBundles );\n \n-        String validationTimeFormatted = validationTimer.toString();\n-        message = \"(\" + params.getUsername() + \") Import:Validation took \" + validationTimeFormatted;\n-        log.info( message );\n+        if ( validationReport.hasErrors() )\n+        {\n+            importReport.setStatus( TrackerStatus.ERROR );\n+        }\n+        else\n+        {\n+            commitBundle( params, importReport, trackerBundles );\n+        }\n \n-        importReport.getTimings().setValidation( validationTimeFormatted );\n+        importReport.getTimings().setTotalImport( requestTimer.toString() );\n \n-        importReport.setTrackerValidationReport( validationReport );\n+        TrackerBundleReportModeUtils.filter( importReport, params.getReportMode() );\n \n         if ( params.hasJobConfiguration() )\n         {\n-            notifier.update( params.getJobConfiguration(), message );\n+            notifier\n+                .update( params.getJobConfiguration(), \"(\" + params.getUsername() + \") Import:Done took \" + requestTimer, true );\n+\n+            notifier.addJobSummary( params.getJobConfiguration(), importReport, TrackerImportReport.class );\n         }\n \n-//        if ( !(!validationReport.isEmpty() && AtomicMode.ALL == params.getAtomicMode()) )\n-        if ( !validationReport.hasErrors() )\n-        {\n-            Timer commitTimer = new SystemTimer().start();\n+        return importReport;\n+    }\n+\n+    protected List<TrackerBundle> preheatBundle( TrackerImportParams params, TrackerImportReport importReport )\n+    {\n+        Timer preheatTimer = new SystemTimer().start();\n \n-            trackerBundles.forEach( tb ->\n-                importReport.getBundleReports().add( trackerBundleService.commit( tb ) ) );\n+        TrackerBundleParams bundleParams = params.toTrackerBundleParams();\n+        List<TrackerBundle> trackerBundles = trackerBundleService.create( bundleParams );\n \n-            if ( !importReport.isEmpty() )\n-            {\n-                importReport.setStatus( TrackerStatus.WARNING );\n-            }\n+        importReport.getTimings().setPreheat( preheatTimer.toString() );\n+        return trackerBundles;\n+    }\n \n-            String commitTimeFormatted = commitTimer.toString();\n-            message = \"(\" + params.getUsername() + \") Import:Commit took \" + commitTimeFormatted;\n-            log.info( message );\n+    protected void commitBundle( TrackerImportParams params, TrackerImportReport importReport,\n+        List<TrackerBundle> trackerBundles )\n+    {\n+        Timer commitTimer = new SystemTimer().start();\n \n-            importReport.getTimings().setCommit( commitTimeFormatted );\n+        trackerBundles.forEach( tb ->\n+            importReport.getBundleReports().add( trackerBundleService.commit( tb ) ) );\n \n-            if ( params.hasJobConfiguration() )\n-            {\n-                notifier.update( params.getJobConfiguration(), message );\n-            }\n+        if ( !importReport.isEmpty() )\n+        {\n+            importReport.setStatus( TrackerStatus.WARNING );\n         }\n-        else\n+\n+        importReport.getTimings().setCommit( commitTimer.toString() );\n+\n+        if ( params.hasJobConfiguration() )\n         {\n-            importReport.setStatus( TrackerStatus.ERROR );\n+            notifier.update( params.getJobConfiguration(),\n+                \"(\" + params.getUsername() + \") \" + \"Import:Commit took \" + commitTimer );\n         }\n+    }\n+\n+    protected TrackerValidationReport validateBundle( TrackerImportParams params, TrackerImportReport importReport,\n+        List<TrackerBundle> trackerBundles )\n+    {\n+        Timer validationTimer = new SystemTimer().start();\n \n-        String totalTimeFormatted = totalTimer.toString();\n-        message = \"(\" + params.getUsername() + \") Import:Done took \" + totalTimeFormatted;\n-        log.info( message );\n+        TrackerValidationReport validationReport = new TrackerValidationReport();\n \n-        importReport.getTimings().setTotalImport( totalTimeFormatted );\n+        // Do all the validation\n+        trackerBundles.forEach( tb ->\n+            validationReport.add( trackerValidationService.validate( tb ) ) );\n \n-//        params.getReportMode() -->\n-        TrackerBundleReportModeUtils.filter( importReport, TrackerBundleReportMode.FULL );\n+        importReport.getTimings().setValidation( validationTimer.toString() );\n+        importReport.setTrackerValidationReport( validationReport );\n \n         if ( params.hasJobConfiguration() )\n         {\n-            notifier.update( params.getJobConfiguration(), message, true );\n-            notifier.addJobSummary( params.getJobConfiguration(), importReport, TrackerImportReport.class );\n+            notifier\n+                .update( params.getJobConfiguration(), \"(\" + params.getUsername() + \") Import:Validation took \" + validationTimer );\n         }\n-\n-        return importReport;\n+        return validationReport;\n     }\n \n     @Override\n", "next_change": {"commit": "d2feae85e2920e2ecd5cce7d310e926ae797cd2c", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\nindex f3e443befe..91ee2ca9b1 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\n", "chunk": "@@ -177,7 +177,8 @@ public class DefaultTrackerImportService\n         if ( params.hasJobConfiguration() )\n         {\n             notifier\n-                .update( params.getJobConfiguration(), \"(\" + params.getUsername() + \") Import:Validation took \" + validationTimer );\n+                .update( params.getJobConfiguration(),\n+                    \"(\" + params.getUsername() + \") Import:Validation took \" + validationTimer );\n         }\n         return validationReport;\n     }\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\nindex 06ab14aa6f..91ee2ca9b1 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\n", "chunk": "@@ -86,94 +85,102 @@ public class DefaultTrackerImportService\n     }\n \n     @Override\n-    @Transactional\n     public TrackerImportReport importTracker( TrackerImportParams params )\n     {\n+        Timer requestTimer = new SystemTimer().start();\n+\n         params.setUser( getUser( params.getUser(), params.getUserId() ) );\n \n         TrackerImportReport importReport = new TrackerImportReport();\n \n-        Timer totalTimer = new SystemTimer().start();\n-        String message = \"(\" + params.getUsername() + \") Import:Start\";\n-        log.info( message );\n-\n         if ( params.hasJobConfiguration() )\n         {\n-            notifier.notify( params.getJobConfiguration(), message );\n+            notifier.notify( params.getJobConfiguration(), \"(\" + params.getUsername() + \") Import:Start\" );\n         }\n \n-        Timer preheatTimer = new SystemTimer().start();\n-\n-        TrackerBundleParams bundleParams = params.toTrackerBundleParams();\n-        List<TrackerBundle> trackerBundles = trackerBundleService.create( bundleParams );\n-\n-        importReport.getTimings().setPreheat( preheatTimer.toString() );\n-\n-        Timer validationTimer = new SystemTimer().start();\n+        List<TrackerBundle> trackerBundles = preheatBundle( params, importReport );\n \n-        TrackerValidationReport validationReport = new TrackerValidationReport();\n-\n-        trackerBundles.forEach( tb ->\n-            validationReport.add( trackerValidationService.validate( tb ) ) );\n+        TrackerValidationReport validationReport = validateBundle( params, importReport, trackerBundles );\n \n-        String validationTimeFormatted = validationTimer.toString();\n-        message = \"(\" + params.getUsername() + \") Import:Validation took \" + validationTimeFormatted;\n-        log.info( message );\n+        if ( validationReport.hasErrors() )\n+        {\n+            importReport.setStatus( TrackerStatus.ERROR );\n+        }\n+        else\n+        {\n+            commitBundle( params, importReport, trackerBundles );\n+        }\n \n-        importReport.getTimings().setValidation( validationTimeFormatted );\n+        importReport.getTimings().setTotalImport( requestTimer.toString() );\n \n-        importReport.setTrackerValidationReport( validationReport );\n+        TrackerBundleReportModeUtils.filter( importReport, params.getReportMode() );\n \n         if ( params.hasJobConfiguration() )\n         {\n-            notifier.update( params.getJobConfiguration(), message );\n+            notifier\n+                .update( params.getJobConfiguration(),\n+                    \"(\" + params.getUsername() + \") Import:Done took \" + requestTimer, true );\n+\n+            notifier.addJobSummary( params.getJobConfiguration(), importReport, TrackerImportReport.class );\n         }\n \n-//        if ( !(!validationReport.isEmpty() && AtomicMode.ALL == params.getAtomicMode()) )\n-        if ( !validationReport.hasErrors() )\n-        {\n-            Timer commitTimer = new SystemTimer().start();\n+        return importReport;\n+    }\n+\n+    protected List<TrackerBundle> preheatBundle( TrackerImportParams params, TrackerImportReport importReport )\n+    {\n+        Timer preheatTimer = new SystemTimer().start();\n \n-            trackerBundles.forEach( tb ->\n-                importReport.getBundleReports().add( trackerBundleService.commit( tb ) ) );\n+        TrackerBundleParams bundleParams = params.toTrackerBundleParams();\n+        List<TrackerBundle> trackerBundles = trackerBundleService.create( bundleParams );\n \n-            if ( !importReport.isEmpty() )\n-            {\n-                importReport.setStatus( TrackerStatus.WARNING );\n-            }\n+        importReport.getTimings().setPreheat( preheatTimer.toString() );\n+        return trackerBundles;\n+    }\n \n-            String commitTimeFormatted = commitTimer.toString();\n-            message = \"(\" + params.getUsername() + \") Import:Commit took \" + commitTimeFormatted;\n-            log.info( message );\n+    protected void commitBundle( TrackerImportParams params, TrackerImportReport importReport,\n+        List<TrackerBundle> trackerBundles )\n+    {\n+        Timer commitTimer = new SystemTimer().start();\n \n-            importReport.getTimings().setCommit( commitTimeFormatted );\n+        trackerBundles.forEach( tb ->\n+            importReport.getBundleReports().add( trackerBundleService.commit( tb ) ) );\n \n-            if ( params.hasJobConfiguration() )\n-            {\n-                notifier.update( params.getJobConfiguration(), message );\n-            }\n+        if ( !importReport.isEmpty() )\n+        {\n+            importReport.setStatus( TrackerStatus.WARNING );\n         }\n-        else\n+\n+        importReport.getTimings().setCommit( commitTimer.toString() );\n+\n+        if ( params.hasJobConfiguration() )\n         {\n-            importReport.setStatus( TrackerStatus.ERROR );\n+            notifier.update( params.getJobConfiguration(),\n+                \"(\" + params.getUsername() + \") \" + \"Import:Commit took \" + commitTimer );\n         }\n+    }\n+\n+    protected TrackerValidationReport validateBundle( TrackerImportParams params, TrackerImportReport importReport,\n+        List<TrackerBundle> trackerBundles )\n+    {\n+        Timer validationTimer = new SystemTimer().start();\n \n-        String totalTimeFormatted = totalTimer.toString();\n-        message = \"(\" + params.getUsername() + \") Import:Done took \" + totalTimeFormatted;\n-        log.info( message );\n+        TrackerValidationReport validationReport = new TrackerValidationReport();\n \n-        importReport.getTimings().setTotalImport( totalTimeFormatted );\n+        // Do all the validation\n+        trackerBundles.forEach( tb ->\n+            validationReport.add( trackerValidationService.validate( tb ) ) );\n \n-//        params.getReportMode() -->\n-        TrackerBundleReportModeUtils.filter( importReport, TrackerBundleReportMode.FULL );\n+        importReport.getTimings().setValidation( validationTimer.toString() );\n+        importReport.setTrackerValidationReport( validationReport );\n \n         if ( params.hasJobConfiguration() )\n         {\n-            notifier.update( params.getJobConfiguration(), message, true );\n-            notifier.addJobSummary( params.getJobConfiguration(), importReport, TrackerImportReport.class );\n+            notifier\n+                .update( params.getJobConfiguration(),\n+                    \"(\" + params.getUsername() + \") Import:Validation took \" + validationTimer );\n         }\n-\n-        return importReport;\n+        return validationReport;\n     }\n \n     @Override\n", "next_change": {"commit": "c2e0b3718cd8c7597ee5ec2e5193e7eafacf5827", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\nindex 91ee2ca9b1..e7047afffa 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\n", "chunk": "@@ -187,8 +218,10 @@ public class DefaultTrackerImportService\n     public TrackerImportParams getParamsFromMap( Map<String, List<String>> parameters )\n     {\n         TrackerImportParams params = new TrackerImportParams();\n-\n-        params.setUser( getUser( params.getUser(), params.getUserId() ) );\n+        if ( params.getUser() == null )\n+        {\n+            params.setUser( trackerUserService.getUser( params.getUserId() ) );\n+        }\n         params.setValidationMode( getEnumWithDefault( ValidationMode.class, parameters, \"validationMode\",\n             ValidationMode.FULL ) );\n         params.setImportMode(\n", "next_change": {"commit": "3e799d196b8f73ad216ea100a07ddd5f7dfc53e0", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\nindex e7047afffa..9568a3a230 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\n", "chunk": "@@ -218,10 +235,7 @@ public class DefaultTrackerImportService\n     public TrackerImportParams getParamsFromMap( Map<String, List<String>> parameters )\n     {\n         TrackerImportParams params = new TrackerImportParams();\n-        if ( params.getUser() == null )\n-        {\n-            params.setUser( trackerUserService.getUser( params.getUserId() ) );\n-        }\n+\n         params.setValidationMode( getEnumWithDefault( ValidationMode.class, parameters, \"validationMode\",\n             ValidationMode.FULL ) );\n         params.setImportMode(\n", "next_change": {"commit": "913d4ba468bf66783e901c4d43bd355d13cb16fa", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\nindex 9568a3a230..3e1f1e0472 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\n", "chunk": "@@ -231,111 +227,15 @@ public class DefaultTrackerImportService\n         return validationReport;\n     }\n \n-    @Override\n-    public TrackerImportParams getParamsFromMap( Map<String, List<String>> parameters )\n-    {\n-        TrackerImportParams params = new TrackerImportParams();\n-\n-        params.setValidationMode( getEnumWithDefault( ValidationMode.class, parameters, \"validationMode\",\n-            ValidationMode.FULL ) );\n-        params.setImportMode(\n-            getEnumWithDefault( TrackerBundleMode.class, parameters, \"importMode\", TrackerBundleMode.COMMIT ) );\n-        params.setIdentifiers( getTrackerIdentifiers( parameters ) );\n-        params.setImportStrategy( getEnumWithDefault( TrackerImportStrategy.class, parameters, \"importStrategy\",\n-            TrackerImportStrategy.CREATE_AND_UPDATE ) );\n-        params.setAtomicMode( getEnumWithDefault( AtomicMode.class, parameters, \"atomicMode\", AtomicMode.ALL ) );\n-        params.setFlushMode( getEnumWithDefault( FlushMode.class, parameters, \"flushMode\", FlushMode.AUTO ) );\n-\n-        return params;\n-    }\n-\n     @Override\n     public TrackerImportReport buildImportReport( TrackerImportReport importReport, TrackerBundleReportMode reportMode )\n     {\n         return importReport.copy( reportMode );\n     }\n \n-    //-----------------------------------------------------------------------------------\n-    // Utility Methods\n-    //-----------------------------------------------------------------------------------\n-\n-    private TrackerIdentifierParams getTrackerIdentifiers( Map<String, List<String>> parameters )\n-    {\n-        TrackerIdScheme idScheme = getEnumWithDefault( TrackerIdScheme.class, parameters, \"idScheme\",\n-            TrackerIdScheme.UID );\n-        TrackerIdScheme orgUnitIdScheme = getEnumWithDefault( TrackerIdScheme.class, parameters, \"orgUnitIdScheme\",\n-            idScheme );\n-        TrackerIdScheme programIdScheme = getEnumWithDefault( TrackerIdScheme.class, parameters, \"programIdScheme\",\n-            idScheme );\n-        TrackerIdScheme programStageIdScheme = getEnumWithDefault( TrackerIdScheme.class, parameters,\n-            \"programStageIdScheme\", idScheme );\n-        TrackerIdScheme dataElementIdScheme = getEnumWithDefault( TrackerIdScheme.class, parameters,\n-            \"dataElementIdScheme\", idScheme );\n-\n-        return TrackerIdentifierParams.builder()\n-            .idScheme( TrackerIdentifier.builder().idScheme( idScheme )\n-                .value( getAttributeUidOrNull( parameters, \"idScheme\" ) ).build() )\n-            .orgUnitIdScheme( TrackerIdentifier.builder().idScheme( orgUnitIdScheme )\n-                .value( getAttributeUidOrNull( parameters, \"orgUnitIdScheme\" ) ).build() )\n-            .programIdScheme( TrackerIdentifier.builder().idScheme( programIdScheme )\n-                .value( getAttributeUidOrNull( parameters, \"programIdScheme\" ) ).build() )\n-            .programStageIdScheme( TrackerIdentifier.builder().idScheme( programStageIdScheme )\n-                .value( getAttributeUidOrNull( parameters, \"programStageIdScheme\" ) ).build() )\n-            .dataElementIdScheme( TrackerIdentifier.builder().idScheme( dataElementIdScheme )\n-                .value( getAttributeUidOrNull( parameters, \"dataElementIdScheme\" ) ).build() )\n-            .build();\n-    }\n-\n-    private <T extends Enum<T>> T getEnumWithDefault( Class<T> enumKlass, Map<String, List<String>> parameters,\n-        String key, T defaultValue )\n-    {\n-        if ( parameters == null || parameters.get( key ) == null || parameters.get( key ).isEmpty() )\n-        {\n-            return defaultValue;\n-        }\n-\n-        if ( TrackerIdScheme.class.equals( enumKlass ) && IdScheme.isAttribute( parameters.get( key ).get( 0 ) ) )\n-        {\n-            return Enums.getIfPresent( enumKlass, \"ATTRIBUTE\" ).orNull();\n-        }\n-\n-        String value = String.valueOf( parameters.get( key ).get( 0 ) );\n-\n-        return Enums.getIfPresent( enumKlass, value ).or( defaultValue );\n-    }\n-\n-    private String getAttributeUidOrNull( Map<String, List<String>> parameters, String key )\n-    {\n-        if ( parameters == null || parameters.get( key ) == null || parameters.get( key ).isEmpty() )\n-        {\n-            return null;\n-        }\n-\n-        if ( IdScheme.isAttribute( parameters.get( key ).get( 0 ) ) )\n-        {\n-            String uid = \"\";\n-\n-            // Get second half of string, separated by ':'\n-            String[] splitParam = parameters.get( key ).get( 0 ).split( \":\" );\n-\n-            if ( splitParam.length > 1 )\n-            {\n-                uid = splitParam[1];\n-            }\n-\n-            if ( CodeGenerator.isValidUid( uid ) )\n-            {\n-                return uid;\n-            }\n-        }\n-\n-        return null;\n-    }\n-    \n     @AllArgsConstructor\n     static class ImportNotifier\n     {\n-\n         private Notifier notifier;\n \n         private TrackerImportParams params;\n", "next_change": {"commit": "d3babd17c47704fd61fb23a664d8e88264bbcff0", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\ndeleted file mode 100644\nindex 3e1f1e0472..0000000000\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\n+++ /dev/null\n", "chunk": "@@ -1,280 +0,0 @@\n-package org.hisp.dhis.tracker;\n-\n-/*\n- * Copyright (c) 2004-2020, University of Oslo\n- * All rights reserved.\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions are met:\n- * Redistributions of source code must retain the above copyright notice, this\n- * list of conditions and the following disclaimer.\n- *\n- * Redistributions in binary form must reproduce the above copyright notice,\n- * this list of conditions and the following disclaimer in the documentation\n- * and/or other materials provided with the distribution.\n- * Neither the name of the HISP project nor the names of its contributors may\n- * be used to endorse or promote products derived from this software without\n- * specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n- * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n- * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n- * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n- * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n- * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n- * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- */\n-\n-import static org.hisp.dhis.tracker.report.TrackerTimingsStats.COMMIT_OPS;\n-import static org.hisp.dhis.tracker.report.TrackerTimingsStats.PREHEAT_OPS;\n-import static org.hisp.dhis.tracker.report.TrackerTimingsStats.PROGRAMRULE_OPS;\n-import static org.hisp.dhis.tracker.report.TrackerTimingsStats.TOTAL_OPS;\n-import static org.hisp.dhis.tracker.report.TrackerTimingsStats.VALIDATION_OPS;\n-\n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Optional;\n-import java.util.stream.Collectors;\n-import java.util.stream.Stream;\n-\n-import org.hisp.dhis.system.notification.Notifier;\n-import org.hisp.dhis.tracker.bundle.TrackerBundle;\n-import org.hisp.dhis.tracker.bundle.TrackerBundleService;\n-import org.hisp.dhis.tracker.job.TrackerSideEffectDataBundle;\n-import org.hisp.dhis.tracker.preprocess.TrackerPreprocessService;\n-import org.hisp.dhis.tracker.report.TrackerBundleReport;\n-import org.hisp.dhis.tracker.report.TrackerImportReport;\n-import org.hisp.dhis.tracker.report.TrackerStatus;\n-import org.hisp.dhis.tracker.report.TrackerTimingsStats;\n-import org.hisp.dhis.tracker.report.TrackerTypeReport;\n-import org.hisp.dhis.tracker.report.TrackerValidationReport;\n-import org.hisp.dhis.tracker.validation.TrackerValidationService;\n-import org.springframework.stereotype.Service;\n-\n-import com.google.common.collect.ImmutableMap;\n-\n-import lombok.AllArgsConstructor;\n-import lombok.NonNull;\n-import lombok.RequiredArgsConstructor;\n-import lombok.extern.slf4j.Slf4j;\n-\n-/**\n- * @author Morten Olav Hansen <mortenoh@gmail.com>\n- */\n-@Service\n-@Slf4j\n-@RequiredArgsConstructor\n-public class DefaultTrackerImportService\n-    implements TrackerImportService\n-{\n-    @NonNull private final TrackerBundleService trackerBundleService;\n-\n-    @NonNull private final TrackerValidationService trackerValidationService;\n-\n-    @NonNull private final TrackerPreprocessService trackerPreprocessService;\n-\n-    @NonNull private final TrackerUserService trackerUserService;\n-\n-    @NonNull private final Notifier notifier;\n-\n-    @Override\n-    public TrackerImportReport importTracker( TrackerImportParams params )\n-    {\n-        params.setUser( trackerUserService.getUser( params.getUserId() ) );\n-\n-        // Init the Notifier\n-        ImportNotifier notifier = new ImportNotifier( this.notifier, params );\n-\n-        // Keeps track of the elapsed time of each Import stage\n-        TrackerTimingsStats opsTimer = new TrackerTimingsStats();\n-\n-        notifier.startImport();\n-\n-        TrackerValidationReport validationReport = null;\n-\n-        TrackerBundleReport bundleReport;\n-\n-        try\n-        {\n-            //\n-            // pre-heat\n-            //\n-            TrackerBundle trackerBundle = opsTimer.exec( PREHEAT_OPS,\n-                () -> preheatBundle( params ) );\n-\n-            Map<TrackerType, Integer> bundleSize = calculatePayloadSize( trackerBundle );\n-\n-            //\n-            // preprocess\n-            //\n-            opsTimer.execVoid( PROGRAMRULE_OPS,\n-                () -> preProcessBundle( trackerBundle ) );\n-\n-            //\n-            // validate\n-            //\n-            validationReport = opsTimer.exec( VALIDATION_OPS,\n-                () -> validateBundle( trackerBundle ) );\n-\n-            notifier.notifyOps( VALIDATION_OPS, opsTimer );\n-\n-\n-            if ( validationReport.hasErrors() && params.getAtomicMode() == AtomicMode.ALL )\n-            {\n-                TrackerImportReport trackerImportReport = TrackerImportReport\n-                    .withValidationErrors( validationReport, opsTimer.stopTimer(),\n-                        bundleSize.values().stream().mapToInt( Integer::intValue ).sum() );\n-\n-                notifier.endImport( trackerImportReport );\n-\n-                return trackerImportReport;\n-            }\n-            else\n-            {\n-                if ( TrackerImportStrategy.DELETE == params.getImportStrategy() )\n-                {\n-                    bundleReport = opsTimer.exec( COMMIT_OPS, () -> deleteBundle( trackerBundle) );\n-                }\n-                else\n-                {\n-                    bundleReport = opsTimer.exec( COMMIT_OPS, () -> commitBundle( trackerBundle) );\n-                }\n-\n-                notifier.notifyOps( COMMIT_OPS, opsTimer );\n-\n-                TrackerImportReport trackerImportReport = TrackerImportReport.withImportCompleted( TrackerStatus.OK,\n-                    bundleReport, validationReport,\n-                    opsTimer.stopTimer(), bundleSize );\n-\n-                notifier.endImport( trackerImportReport );\n-\n-                return trackerImportReport;\n-            }\n-        }\n-        catch ( Exception e )\n-        {\n-            log.error( \"Exception thrown during import.\", e );\n-\n-            TrackerImportReport report = TrackerImportReport.withError( \"Exception:\" + e.getMessage(),\n-                validationReport, opsTimer.stopTimer() );\n-\n-            notifier.endImportWithError( report, e );\n-\n-            return report;\n-        }\n-    }\n-\n-    private Map<TrackerType, Integer> calculatePayloadSize( TrackerBundle bundle )\n-    {\n-        return ImmutableMap.<TrackerType, Integer> builder()\n-            .put( TrackerType.TRACKED_ENTITY, bundle.getTrackedEntities().size() )\n-            .put( TrackerType.ENROLLMENT, bundle.getEnrollments().size() )\n-            .put( TrackerType.EVENT, bundle.getEvents().size() )\n-            .put( TrackerType.RELATIONSHIP, bundle.getRelationships().size() ).build();\n-    }\n-\n-    protected TrackerBundle preheatBundle( TrackerImportParams params )\n-    {\n-        return  trackerBundleService.create( params );\n-    }\n-\n-    protected void preProcessBundle( TrackerBundle bundle )\n-    {\n-        TrackerBundle trackerBundle = trackerBundleService.runRuleEngine( bundle );\n-        trackerPreprocessService.preprocess( trackerBundle );\n-    }\n-\n-    protected TrackerBundleReport commitBundle( TrackerBundle trackerBundle )\n-    {\n-        TrackerBundleReport bundleReport = trackerBundleService.commit( trackerBundle );\n-\n-        List<TrackerSideEffectDataBundle> sideEffectDataBundles = Stream.of( TrackerType.ENROLLMENT, TrackerType.EVENT )\n-            .map( trackerType -> safelyGetSideEffectsDataBundles( bundleReport, trackerType ) )\n-            .flatMap( Collection::stream )\n-            .collect( Collectors.toList() );\n-\n-        trackerBundleService.handleTrackerSideEffects( sideEffectDataBundles );\n-\n-        return bundleReport;\n-    }\n-\n-    List<TrackerSideEffectDataBundle> safelyGetSideEffectsDataBundles( TrackerBundleReport bundleReport,\n-        TrackerType trackerType )\n-    {\n-        return Optional.ofNullable( bundleReport )\n-            .map( TrackerBundleReport::getTypeReportMap )\n-            .map( reportMap -> reportMap.get( trackerType ) )\n-            .map( TrackerTypeReport::getSideEffectDataBundles )\n-            .orElse( Collections.emptyList() );\n-    }\n-\n-    protected TrackerBundleReport deleteBundle( TrackerBundle trackerBundle )\n-    {\n-        return trackerBundleService.delete( trackerBundle );\n-    }\n-\n-    protected TrackerValidationReport validateBundle( TrackerBundle trackerBundle )\n-    {\n-        TrackerValidationReport validationReport = new TrackerValidationReport();\n-\n-        validationReport.add( trackerValidationService.validate( trackerBundle ) );\n-        \n-        return validationReport;\n-    }\n-\n-    @Override\n-    public TrackerImportReport buildImportReport( TrackerImportReport importReport, TrackerBundleReportMode reportMode )\n-    {\n-        return importReport.copy( reportMode );\n-    }\n-\n-    @AllArgsConstructor\n-    static class ImportNotifier\n-    {\n-        private Notifier notifier;\n-\n-        private TrackerImportParams params;\n-\n-        public void startImport()\n-        {\n-            notifier.notify( params.getJobConfiguration(), \"(\" + params.getUsername() + \") Import:Start\" );\n-        }\n-\n-        public void notifyOps( String validationOps, TrackerTimingsStats opsTimer )\n-        {\n-\n-            if ( params.hasJobConfiguration() )\n-            {\n-                notifier\n-                    .update( params.getJobConfiguration(),\n-                        \"(\" + params.getUsername() + \") Import:\" + validationOps + \" took \"\n-                            + opsTimer.get( validationOps ) );\n-            }\n-        }\n-\n-        public void endImport( TrackerImportReport importReport )\n-        {\n-            if ( params.hasJobConfiguration() )\n-            {\n-                notifier.update( params.getJobConfiguration(), \"(\" + params.getUsername() + \") Import:Done took \" +\n-                    importReport.getTimingsStats().get( TOTAL_OPS ), true );\n-\n-                notifier.addJobSummary( params.getJobConfiguration(), importReport, TrackerImportReport.class );\n-            }\n-        }\n-\n-        public void endImportWithError( TrackerImportReport importReport, Exception e) {\n-\n-            if ( params.hasJobConfiguration() )\n-            {\n-                notifier.update( params.getJobConfiguration(), \"(\" + params.getUsername() + \") Import:Failed with exception: \" + e.getMessage(), true );\n-                notifier.addJobSummary( params.getJobConfiguration(), importReport, TrackerImportReport.class );\n-            }\n-        }\n-    }\n-}\n", "next_change": {"commit": "43725fed360d23cefb272443d6b3cf36cb72ff74", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\nnew file mode 100644\nindex 0000000000..6ff6031dee\n--- /dev/null\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\n", "chunk": "@@ -0,0 +1,395 @@\n+/*\n+ * Copyright (c) 2004-2022, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package org.hisp.dhis.tracker;\n+\n+import static org.hisp.dhis.tracker.report.TimingsStats.COMMIT_OPS;\n+import static org.hisp.dhis.tracker.report.TimingsStats.PREHEAT_OPS;\n+import static org.hisp.dhis.tracker.report.TimingsStats.PREPROCESS_OPS;\n+import static org.hisp.dhis.tracker.report.TimingsStats.PROGRAMRULE_OPS;\n+import static org.hisp.dhis.tracker.report.TimingsStats.TOTAL_OPS;\n+import static org.hisp.dhis.tracker.report.TimingsStats.VALIDATE_PROGRAMRULE_OPS;\n+import static org.hisp.dhis.tracker.report.TimingsStats.VALIDATION_OPS;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import javax.annotation.Nonnull;\n+\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import org.hisp.dhis.system.notification.NotificationLevel;\n+import org.hisp.dhis.system.notification.Notifier;\n+import org.hisp.dhis.tracker.bundle.TrackerBundle;\n+import org.hisp.dhis.tracker.bundle.TrackerBundleService;\n+import org.hisp.dhis.tracker.job.TrackerSideEffectDataBundle;\n+import org.hisp.dhis.tracker.preprocess.TrackerPreprocessService;\n+import org.hisp.dhis.tracker.report.ImportReport;\n+import org.hisp.dhis.tracker.report.PersistenceReport;\n+import org.hisp.dhis.tracker.report.Status;\n+import org.hisp.dhis.tracker.report.TimingsStats;\n+import org.hisp.dhis.tracker.report.TrackerTypeReport;\n+import org.hisp.dhis.tracker.report.ValidationReport;\n+import org.hisp.dhis.tracker.validation.ValidationResult;\n+import org.hisp.dhis.tracker.validation.ValidationService;\n+import org.hisp.dhis.user.User;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+/**\n+ * @author Morten Olav Hansen <mortenoh@gmail.com>\n+ */\n+@Service\n+@Slf4j\n+@RequiredArgsConstructor\n+public class DefaultTrackerImportService\n+    implements TrackerImportService\n+{\n+    @Nonnull\n+    private final TrackerBundleService trackerBundleService;\n+\n+    @Nonnull\n+    private final ValidationService validationService;\n+\n+    @Nonnull\n+    private final TrackerPreprocessService trackerPreprocessService;\n+\n+    @Nonnull\n+    private final TrackerUserService trackerUserService;\n+\n+    @Nonnull\n+    private final Notifier notifier;\n+\n+    @Override\n+    @Transactional\n+    public ImportReport importTracker( TrackerImportParams params )\n+    {\n+        User user = trackerUserService.getUser( params.getUserId() );\n+        params.setUser( user );\n+\n+        TimingsStats opsTimer = new TimingsStats();\n+\n+        startImport( params );\n+\n+        try\n+        {\n+            TrackerBundle trackerBundle = preHeat( params, opsTimer );\n+\n+            Map<TrackerType, Integer> bundleSize = calculatePayloadSize( trackerBundle );\n+\n+            preProcess( opsTimer, trackerBundle );\n+\n+            ValidationReport validationReport = validate( params, opsTimer, trackerBundle );\n+\n+            if ( exitOnError( validationReport, params ) )\n+            {\n+                return buildReportAndNotify( params, validationReport, opsTimer, bundleSize );\n+            }\n+\n+            PersistenceReport persistenceReport = commit( params, opsTimer, trackerBundle );\n+\n+            postCommit( trackerBundle );\n+\n+            ImportReport importReport = ImportReport.withImportCompleted(\n+                Status.OK,\n+                persistenceReport, validationReport,\n+                opsTimer.stopTimer(), bundleSize );\n+\n+            endImport( params, importReport );\n+\n+            return importReport;\n+        }\n+        catch ( Exception e )\n+        {\n+            log.error( \"Exception thrown during import.\", e );\n+\n+            ImportReport report = ImportReport.withError( \"Exception:\" + e.getMessage(),\n+                ValidationReport.emptyReport(), opsTimer.stopTimer() );\n+\n+            endImportWithError( params, report, e );\n+\n+            return report;\n+        }\n+    }\n+\n+    private TrackerBundle preHeat( TrackerImportParams params, TimingsStats opsTimer )\n+    {\n+        TrackerBundle trackerBundle = opsTimer.exec( PREHEAT_OPS,\n+            () -> preheatBundle( params ) );\n+\n+        notifyOps( params, PREHEAT_OPS, opsTimer );\n+\n+        return trackerBundle;\n+    }\n+\n+    private void preProcess( TimingsStats opsTimer, TrackerBundle trackerBundle )\n+    {\n+        opsTimer.execVoid( PREPROCESS_OPS,\n+            () -> preProcessBundle( trackerBundle ) );\n+    }\n+\n+    private ValidationReport validate( TrackerImportParams params, TimingsStats opsTimer, TrackerBundle trackerBundle )\n+    {\n+        ValidationResult validationResult = opsTimer.exec( VALIDATION_OPS,\n+            () -> validateBundle( params, trackerBundle, opsTimer ) );\n+\n+        if ( !trackerBundle.isSkipRuleEngine() && !params.getImportStrategy().isDelete() )\n+        {\n+            ValidationResult ruleEnginevalidationResult = execRuleEngine( params, opsTimer, trackerBundle );\n+\n+            return ValidationReport.merge( validationResult, ruleEnginevalidationResult );\n+        }\n+\n+        return ValidationReport.fromResult( validationResult );\n+    }\n+\n+    private PersistenceReport commit( TrackerImportParams params, TimingsStats opsTimer,\n+        TrackerBundle trackerBundle )\n+    {\n+        PersistenceReport persistenceReport;\n+        if ( TrackerImportStrategy.DELETE == params.getImportStrategy() )\n+        {\n+            persistenceReport = opsTimer.exec( COMMIT_OPS, () -> deleteBundle( trackerBundle ) );\n+        }\n+        else\n+        {\n+            persistenceReport = opsTimer.exec( COMMIT_OPS, () -> commitBundle( trackerBundle ) );\n+        }\n+\n+        notifyOps( params, COMMIT_OPS, opsTimer );\n+        return persistenceReport;\n+    }\n+\n+    private void postCommit( TrackerBundle trackerBundle )\n+    {\n+        trackerBundleService.postCommit( trackerBundle );\n+    }\n+\n+    protected ValidationResult validateBundle( TrackerImportParams params, TrackerBundle bundle,\n+        TimingsStats opsTimer )\n+    {\n+        ValidationResult result = validationService.validate( bundle );\n+        bundle.setTrackedEntities( result.getTrackedEntities() );\n+        bundle.setEnrollments( result.getEnrollments() );\n+        bundle.setEvents( result.getEvents() );\n+        bundle.setRelationships( result.getRelationships() );\n+\n+        notifyOps( params, VALIDATION_OPS, opsTimer );\n+\n+        return result;\n+    }\n+\n+    private ValidationResult execRuleEngine( TrackerImportParams params, TimingsStats opsTimer,\n+        TrackerBundle bundle )\n+    {\n+        opsTimer.execVoid( PROGRAMRULE_OPS,\n+            () -> trackerBundleService.runRuleEngine( bundle ) );\n+\n+        notifyOps( params, PROGRAMRULE_OPS, opsTimer );\n+\n+        ValidationResult result = opsTimer.exec( VALIDATE_PROGRAMRULE_OPS,\n+            () -> validationService.validateRuleEngine( bundle ) );\n+        bundle.setTrackedEntities( result.getTrackedEntities() );\n+        bundle.setEnrollments( result.getEnrollments() );\n+        bundle.setEvents( result.getEvents() );\n+        bundle.setRelationships( result.getRelationships() );\n+\n+        notifyOps( params, VALIDATE_PROGRAMRULE_OPS, opsTimer );\n+\n+        return result;\n+    }\n+\n+    private ImportReport buildReportAndNotify( TrackerImportParams params,\n+        ValidationReport validationReport,\n+        TimingsStats opsTimer, Map<TrackerType, Integer> bundleSize )\n+    {\n+        ImportReport importReport = ImportReport.withValidationErrors( validationReport,\n+            opsTimer.stopTimer(),\n+            bundleSize.values().stream().mapToInt( Integer::intValue ).sum() );\n+\n+        endImport( params, importReport );\n+\n+        return importReport;\n+    }\n+\n+    private boolean exitOnError( ValidationReport validationReport, TrackerImportParams params )\n+    {\n+        return validationReport.hasErrors() && params.getAtomicMode() == AtomicMode.ALL;\n+    }\n+\n+    private Map<TrackerType, Integer> calculatePayloadSize( TrackerBundle bundle )\n+    {\n+        return Map.of(\n+            TrackerType.TRACKED_ENTITY, bundle.getTrackedEntities().size(),\n+            TrackerType.ENROLLMENT, bundle.getEnrollments().size(),\n+            TrackerType.EVENT, bundle.getEvents().size(),\n+            TrackerType.RELATIONSHIP, bundle.getRelationships().size() );\n+    }\n+\n+    protected TrackerBundle preheatBundle( TrackerImportParams params )\n+    {\n+        return trackerBundleService.create( params );\n+    }\n+\n+    protected void preProcessBundle( TrackerBundle bundle )\n+    {\n+        trackerPreprocessService.preprocess( bundle );\n+    }\n+\n+    protected PersistenceReport commitBundle( TrackerBundle trackerBundle )\n+    {\n+        PersistenceReport persistenceReport = trackerBundleService.commit( trackerBundle );\n+\n+        if ( !trackerBundle.isSkipSideEffects() )\n+        {\n+            List<TrackerSideEffectDataBundle> sideEffectDataBundles = Stream\n+                .of( TrackerType.ENROLLMENT, TrackerType.EVENT )\n+                .map( trackerType -> safelyGetSideEffectsDataBundles( persistenceReport, trackerType ) )\n+                .flatMap( Collection::stream )\n+                .collect( Collectors.toList() );\n+\n+            trackerBundleService.handleTrackerSideEffects( sideEffectDataBundles );\n+        }\n+\n+        return persistenceReport;\n+    }\n+\n+    private List<TrackerSideEffectDataBundle> safelyGetSideEffectsDataBundles( PersistenceReport persistenceReport,\n+        TrackerType trackerType )\n+    {\n+        return Optional.ofNullable( persistenceReport )\n+            .map( PersistenceReport::getTypeReportMap )\n+            .map( reportMap -> reportMap.get( trackerType ) )\n+            .map( TrackerTypeReport::getSideEffectDataBundles )\n+            .orElse( Collections.emptyList() );\n+    }\n+\n+    protected PersistenceReport deleteBundle( TrackerBundle trackerBundle )\n+    {\n+        return trackerBundleService.delete( trackerBundle );\n+    }\n+\n+    private void startImport( TrackerImportParams params )\n+    {\n+        if ( null != params.getJobConfiguration() )\n+        {\n+            notifier.notify( params.getJobConfiguration(),\n+                params.userStartInfo() + \" Import:Start\" );\n+        }\n+    }\n+\n+    private void notifyOps( TrackerImportParams params, String validationOps, TimingsStats opsTimer )\n+    {\n+        if ( null != params.getJobConfiguration() )\n+        {\n+            notifier\n+                .update( params.getJobConfiguration(), NotificationLevel.DEBUG,\n+                    params +\n+                        validationOps + \" completed in \"\n+                        + opsTimer.get( validationOps ) + \" Import:\"\n+                        + validationOps );\n+        }\n+    }\n+\n+    private void endImport( TrackerImportParams params, ImportReport importReport )\n+    {\n+        if ( null != params.getJobConfiguration() )\n+        {\n+            notifier.update( params.getJobConfiguration(),\n+                params +\n+                    \" finished in \" +\n+                    importReport.getTimingsStats().get( TOTAL_OPS ) + \" Import:Done\",\n+                true );\n+\n+            if ( params.getJobConfiguration().isInMemoryJob() )\n+            {\n+                notifier.addJobSummary( params.getJobConfiguration(), importReport, ImportReport.class );\n+            }\n+        }\n+    }\n+\n+    private void endImportWithError( TrackerImportParams params, ImportReport importReport, Exception e )\n+    {\n+        if ( null != params.getJobConfiguration() && params.getJobConfiguration().isInMemoryJob() )\n+        {\n+            notifier.update( params.getJobConfiguration(), NotificationLevel.ERROR,\n+                params +\n+                    \" failed with exception: \"\n+                    + e.getMessage() + \" Import:Error\",\n+                true );\n+\n+            if ( params.getJobConfiguration().isInMemoryJob() )\n+            {\n+                notifier.addJobSummary( params.getJobConfiguration(), importReport, ImportReport.class );\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Clone the TrackerImportReport and filters out validation data based on\n+     * the provided {@link PersistenceReport}.\n+     *\n+     * @return a copy of the current TrackerImportReport\n+     */\n+    @Override\n+    public ImportReport buildImportReport( ImportReport originalImportReport,\n+        TrackerBundleReportMode reportMode )\n+    {\n+        ImportReport.ImportReportBuilder importReportBuilder = ImportReport.builder()\n+            .status( originalImportReport.getStatus() )\n+            .stats( originalImportReport.getStats() )\n+            .persistenceReport( originalImportReport.getPersistenceReport() )\n+            .message( originalImportReport.getMessage() );\n+\n+        ValidationReport originalValidationReport = originalImportReport.getValidationReport();\n+        ValidationReport validationReport = ValidationReport.emptyReport();\n+        if ( originalValidationReport != null )\n+        {\n+            validationReport.addErrors( originalValidationReport.getErrors() );\n+        }\n+        if ( originalValidationReport != null && TrackerBundleReportMode.WARNINGS == reportMode )\n+        {\n+            validationReport.addWarnings( originalValidationReport.getWarnings() );\n+        }\n+        else if ( originalValidationReport != null && TrackerBundleReportMode.FULL == reportMode )\n+        {\n+            validationReport\n+                .addWarnings( originalValidationReport.getWarnings() );\n+            importReportBuilder.timingsStats( originalImportReport.getTimingsStats() );\n+        }\n+\n+        importReportBuilder.validationReport( validationReport );\n+\n+        return importReportBuilder.build();\n+    }\n+}\n", "next_change": null}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "message": "Merge commit", "committedDate": null}, {"oid": "399526882c2fbbf5600922b3c3b6030420cf4e96", "committedDate": "2020-07-13 12:23:07 +0200", "message": "feat: Run rule engine rules in new importer [DHIS2-7310]"}, {"oid": "2ed799f33ca26b918ed60473a3f097714f00492e", "committedDate": "2020-08-04 10:30:01 +0200", "message": "chore: Clean up code (#5877)"}, {"oid": "8374cb43e422eddc1f4c01bb715d8d285acc37be", "committedDate": "2020-08-10 11:38:43 +0200", "message": "Merge remote-tracking branch 'origin/master' into DHIS2-7310-merge"}, {"oid": "b010ab69f5dfb7b5ea0a5cfd438c1d7ebf3275de", "committedDate": "2020-08-24 14:13:32 +0200", "message": "fix: Implement atomic mode OBJECTS to commit only valid DTOs (#5958)"}, {"oid": "82a863c258aa34e592b309bb9d6081c4dc8f981b", "committedDate": "2020-08-27 14:46:58 +0200", "message": "feat: Add support for deletion of tracker objects [DHIS2-9085] (#5959)"}, {"oid": "cb2ee65c0210c0d4b2bd8851789da8d4adfaf04d", "committedDate": "2020-09-07 10:28:21 +0200", "message": "fix: [DHIS2-9287] Fix the stats in the import summary (#6062)"}, {"oid": "c2e0b3718cd8c7597ee5ec2e5193e7eafacf5827", "committedDate": "2020-09-08 09:47:19 +0200", "message": "fix: prevent Hibernate session errors with User object (#6063)"}, {"oid": "0d35843121f0ad3004fad015f1520c5b06a5c337", "committedDate": "2020-09-15 09:24:33 +0200", "message": "Merge 2.35 into master (#6149)"}, {"oid": "20ae7d1ed19072116ee92e47a760e281039159ce", "committedDate": "2020-09-15 11:32:35 +0200", "message": "fix: [DHIS2-9428] Use report mode parameter to filter report data (#6122)"}, {"oid": "8aaeab2ee4dd7a9ffa927147931dff8609ef787a", "committedDate": "2020-09-23 15:33:34 +0200", "message": "chore: Remove unused imports (#6219)"}, {"oid": "87ef26080354e452d282d374e4dc6de996844a1c", "committedDate": "2020-10-02 09:53:53 +0200", "message": "test: Add integration tests for tracker side effects (#5833)"}, {"oid": "0208c5478719a64f691e4255b6d839bc95200fb4", "committedDate": "2020-10-23 10:03:41 +0200", "message": "fix: [DHIS2-9817] [DHIS2-9825] serialization and deserialization of TrackerImportReport and excception handling (2.36) (#6473)"}, {"oid": "3934daf1873ee7d70faa0058706c2409575865e5", "committedDate": "2020-10-23 12:21:16 +0200", "message": "fix: [DHIS2-9428] Made ERRORS as default reportMode and stats returned correctly (2.36) (#6477)"}, {"oid": "695641b3509e973bf6cf9fd631d2641e55eeeff4", "committedDate": "2020-10-23 14:47:30 +0200", "message": "fix: [DHIS2-9286] handled exception messages filtered out in final report (2.36) (#6478)"}, {"oid": "0e72ebff22211397a74a8a6aa539bb2f19351370", "committedDate": "2020-10-29 15:26:27 +0100", "message": "fix: Fix lazy initialisation exceptions (#6520)"}, {"oid": "9d25538a10eb27d9dd38aca54900dd84a02b5897", "committedDate": "2020-11-09 12:23:56 +0100", "message": "fix: DHIS2-9855 fixing NPE (#6588)"}, {"oid": "6e28dbfdaea7ceacbe560fe82ddba1e94c6cd203", "committedDate": "2020-11-11 17:41:55 +0100", "message": "fix: Exception when importing TEI with relationship [DHIS2-9856] (#6552)"}, {"oid": "ba02f7daf7dbd5125f1b0215bcc9b25649d32a68", "committedDate": "2020-11-12 15:53:58 +0100", "message": "fix: Use same timers for report and logs (#6642)"}, {"oid": "1f0559c94f01b1497116fe5ba2e19f28f072a879", "committedDate": "2020-11-23 09:21:47 +0100", "message": "fix: invalid ignore count in Tracker Import stats (#6721)"}, {"oid": "89451b9b46d62bfc853b0ed26b6ec266771f3d58", "committedDate": "2020-11-23 10:57:11 +0100", "message": "fix: add report when validation failed a (#6738)"}, {"oid": "641aca580898b88dd99837fe8b5e0639027c6e0e", "committedDate": "2020-11-24 08:24:42 +0100", "message": "fix: Import report ignore values on stats objects (#6745)"}, {"oid": "3e799d196b8f73ad216ea100a07ddd5f7dfc53e0", "committedDate": "2020-11-30 16:37:14 +0100", "message": "fix: remove long running transaction during Tracker Import (#6782)"}, {"oid": "913d4ba468bf66783e901c4d43bd355d13cb16fa", "committedDate": "2020-12-02 16:44:17 +0100", "message": "refactor: Tracker Import params creation (#6814)"}, {"oid": "3ab88a5f4623a8c749246bedef34fcb926d185cb", "committedDate": "2020-12-08 10:40:14 +0100", "message": "fix: [DHIS2-7310] Move rule engine call and validations after bundle validation (#6843)"}, {"oid": "c4f1db1dab576bc73489a9e0a6d015acec2eab5b", "committedDate": "2020-12-15 15:09:02 +0100", "message": "feat: Tracker Import metadata cache (#6877)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "74425bc0f9d76839b6aafd0a8573f0d3d0464446", "committedDate": "2021-01-20 10:08:21 +0100", "message": "fix: Add skipSideEffects flag for new tracker importer"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "d3babd17c47704fd61fb23a664d8e88264bbcff0", "committedDate": "2021-02-15 16:32:19 +0100", "message": "fix: Dhis2 10432 (#7347)"}, {"oid": "f83b6227cef05563252d258a1050a8bd57c70018", "committedDate": "2021-12-07 16:41:41 +0100", "message": "chore: place default TrackerImportService next to interface (#9371)"}, {"oid": "242e8d7cc2a94f328778c2fbad9005509c5b3360", "committedDate": "2021-12-21 13:35:53 +0100", "message": "chore: simplify tracker import validation TECH-880 (#9510)"}, {"oid": "8bd63f9823397e39458bd1cdab383c33c3231019", "committedDate": "2021-12-22 09:32:29 +0100", "message": "chore: move factory methods into class it creates TECH-880 (#9518)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "1c6c72cc7c172b2a5708fb662e588b797d525a55", "committedDate": "2022-01-11 15:55:54 +0100", "message": "chore: bring TrackerValidationReport closer to ValidationErrorReporter TECH-880 (#9595)"}, {"oid": "7c0131dfcfbf72dad27dc5f0a3f6a776e286c79a", "committedDate": "2022-01-11 17:47:56 +0100", "message": "chore: make TrackerValidationReport add methods fluent and name Timing TECH-880 (#9601)"}, {"oid": "8ccf9a288a67e5ee5349024fd3d281372c64c956", "committedDate": "2022-02-22 13:25:35 +0800", "message": "feat: Merge User/UserCredentials into one DB table (#9754)"}, {"oid": "d99da048b6427aa16b080ab0a0e25eda4a2a0f96", "committedDate": "2022-05-09 13:53:18 +0200", "message": "feat: Refactor getCurrentUser() to return DHIS2 User object 2 (#10600)"}, {"oid": "2886ebea404331a2c3f78909bcb92cca1ecc7913", "committedDate": "2022-10-12 09:39:22 +0200", "message": "chore: only use @Nonnull and ban similar annotations (#12071)"}, {"oid": "8bd34731a22250d0a8166442ecad89d00c926ccf", "committedDate": "2022-12-12 17:11:18 +0100", "message": "chore: Cleanup tracker reporter (#12501)"}, {"oid": "e4b9a5c802805b26fe8255711d1f98e662f15c6d", "committedDate": "2022-12-14 10:01:20 +0100", "message": "chore: Rename and clean up report model objects [TECH-14298] (#12525)"}, {"oid": "17085ef1b029fa636afa4c26f2466fb3b95be1e2", "committedDate": "2022-12-15 09:50:15 +0100", "message": "chore: Decouple validation package from report package [DHIS2-14298] (#12558)"}, {"oid": "2d2c1a72fe29e5330e1b3f799f4ab915b5a5bbf0", "committedDate": "2022-12-16 08:41:19 +0000", "message": "chore: remove prefix from TrackerValidationService (#12589)"}, {"oid": "f7407b037eca371200b710628ba5c9e66fe2971a", "committedDate": "2022-12-19 08:23:40 +0100", "message": "chore: Only expose immutable result from validation package [DHIS2-14298] (#12581)"}, {"oid": "2b482819097a3d8498c8a5f72eeffc958da3b95c", "committedDate": "2022-12-20 10:14:42 +0100", "message": "chore: don't mutate bundle in validation (#12620)"}, {"oid": "43725fed360d23cefb272443d6b3cf36cb72ff74", "committedDate": "2023-01-23 11:12:38 +0100", "message": "refactor: Use java Map#of over Guava ImmutableMap#builder (#12804)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU3Nzg3OA==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r445577878", "body": "Commented line", "bodyText": "Commented line", "bodyHTML": "<p dir=\"auto\">Commented line</p>", "author": "luciano-fiandesio", "createdAt": "2020-06-25T13:56:20Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java", "diffHunk": "@@ -146,10 +158,14 @@ public TrackerImportReport importTracker( TrackerImportParams params )\n             importReport.setStatus( TrackerStatus.ERROR );\n         }\n \n-        message = \"(\" + params.getUsername() + \") Import:Done took \" + timer.toString();\n+        String totalTimeFormatted = totalTimer.toString();\n+        message = \"(\" + params.getUsername() + \") Import:Done took \" + totalTimeFormatted;\n         log.info( message );\n \n-        TrackerBundleReportModeUtils.filter( importReport, params.getReportMode() );\n+        importReport.getTimings().setTotalImport( totalTimeFormatted );\n+\n+//        params.getReportMode() -->", "originalCommit": "e7e003a2211cdf3f412ce75f95ef0f6be1973434", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c5a94c3d798ab59a16b994801255c4ac2631887b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\nindex 06ab14aa6f..f3e443befe 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\n", "chunk": "@@ -86,94 +86,100 @@ public class DefaultTrackerImportService\n     }\n \n     @Override\n-    @Transactional\n     public TrackerImportReport importTracker( TrackerImportParams params )\n     {\n+        Timer requestTimer = new SystemTimer().start();\n+\n         params.setUser( getUser( params.getUser(), params.getUserId() ) );\n \n         TrackerImportReport importReport = new TrackerImportReport();\n \n-        Timer totalTimer = new SystemTimer().start();\n-        String message = \"(\" + params.getUsername() + \") Import:Start\";\n-        log.info( message );\n-\n         if ( params.hasJobConfiguration() )\n         {\n-            notifier.notify( params.getJobConfiguration(), message );\n+            notifier.notify( params.getJobConfiguration(), \"(\" + params.getUsername() + \") Import:Start\" );\n         }\n \n-        Timer preheatTimer = new SystemTimer().start();\n-\n-        TrackerBundleParams bundleParams = params.toTrackerBundleParams();\n-        List<TrackerBundle> trackerBundles = trackerBundleService.create( bundleParams );\n-\n-        importReport.getTimings().setPreheat( preheatTimer.toString() );\n-\n-        Timer validationTimer = new SystemTimer().start();\n+        List<TrackerBundle> trackerBundles = preheatBundle( params, importReport );\n \n-        TrackerValidationReport validationReport = new TrackerValidationReport();\n-\n-        trackerBundles.forEach( tb ->\n-            validationReport.add( trackerValidationService.validate( tb ) ) );\n+        TrackerValidationReport validationReport = validateBundle( params, importReport, trackerBundles );\n \n-        String validationTimeFormatted = validationTimer.toString();\n-        message = \"(\" + params.getUsername() + \") Import:Validation took \" + validationTimeFormatted;\n-        log.info( message );\n+        if ( validationReport.hasErrors() )\n+        {\n+            importReport.setStatus( TrackerStatus.ERROR );\n+        }\n+        else\n+        {\n+            commitBundle( params, importReport, trackerBundles );\n+        }\n \n-        importReport.getTimings().setValidation( validationTimeFormatted );\n+        importReport.getTimings().setTotalImport( requestTimer.toString() );\n \n-        importReport.setTrackerValidationReport( validationReport );\n+        TrackerBundleReportModeUtils.filter( importReport, params.getReportMode() );\n \n         if ( params.hasJobConfiguration() )\n         {\n-            notifier.update( params.getJobConfiguration(), message );\n+            notifier\n+                .update( params.getJobConfiguration(), \"(\" + params.getUsername() + \") Import:Done took \" + requestTimer, true );\n+\n+            notifier.addJobSummary( params.getJobConfiguration(), importReport, TrackerImportReport.class );\n         }\n \n-//        if ( !(!validationReport.isEmpty() && AtomicMode.ALL == params.getAtomicMode()) )\n-        if ( !validationReport.hasErrors() )\n-        {\n-            Timer commitTimer = new SystemTimer().start();\n+        return importReport;\n+    }\n+\n+    protected List<TrackerBundle> preheatBundle( TrackerImportParams params, TrackerImportReport importReport )\n+    {\n+        Timer preheatTimer = new SystemTimer().start();\n \n-            trackerBundles.forEach( tb ->\n-                importReport.getBundleReports().add( trackerBundleService.commit( tb ) ) );\n+        TrackerBundleParams bundleParams = params.toTrackerBundleParams();\n+        List<TrackerBundle> trackerBundles = trackerBundleService.create( bundleParams );\n \n-            if ( !importReport.isEmpty() )\n-            {\n-                importReport.setStatus( TrackerStatus.WARNING );\n-            }\n+        importReport.getTimings().setPreheat( preheatTimer.toString() );\n+        return trackerBundles;\n+    }\n \n-            String commitTimeFormatted = commitTimer.toString();\n-            message = \"(\" + params.getUsername() + \") Import:Commit took \" + commitTimeFormatted;\n-            log.info( message );\n+    protected void commitBundle( TrackerImportParams params, TrackerImportReport importReport,\n+        List<TrackerBundle> trackerBundles )\n+    {\n+        Timer commitTimer = new SystemTimer().start();\n \n-            importReport.getTimings().setCommit( commitTimeFormatted );\n+        trackerBundles.forEach( tb ->\n+            importReport.getBundleReports().add( trackerBundleService.commit( tb ) ) );\n \n-            if ( params.hasJobConfiguration() )\n-            {\n-                notifier.update( params.getJobConfiguration(), message );\n-            }\n+        if ( !importReport.isEmpty() )\n+        {\n+            importReport.setStatus( TrackerStatus.WARNING );\n         }\n-        else\n+\n+        importReport.getTimings().setCommit( commitTimer.toString() );\n+\n+        if ( params.hasJobConfiguration() )\n         {\n-            importReport.setStatus( TrackerStatus.ERROR );\n+            notifier.update( params.getJobConfiguration(),\n+                \"(\" + params.getUsername() + \") \" + \"Import:Commit took \" + commitTimer );\n         }\n+    }\n+\n+    protected TrackerValidationReport validateBundle( TrackerImportParams params, TrackerImportReport importReport,\n+        List<TrackerBundle> trackerBundles )\n+    {\n+        Timer validationTimer = new SystemTimer().start();\n \n-        String totalTimeFormatted = totalTimer.toString();\n-        message = \"(\" + params.getUsername() + \") Import:Done took \" + totalTimeFormatted;\n-        log.info( message );\n+        TrackerValidationReport validationReport = new TrackerValidationReport();\n \n-        importReport.getTimings().setTotalImport( totalTimeFormatted );\n+        // Do all the validation\n+        trackerBundles.forEach( tb ->\n+            validationReport.add( trackerValidationService.validate( tb ) ) );\n \n-//        params.getReportMode() -->\n-        TrackerBundleReportModeUtils.filter( importReport, TrackerBundleReportMode.FULL );\n+        importReport.getTimings().setValidation( validationTimer.toString() );\n+        importReport.setTrackerValidationReport( validationReport );\n \n         if ( params.hasJobConfiguration() )\n         {\n-            notifier.update( params.getJobConfiguration(), message, true );\n-            notifier.addJobSummary( params.getJobConfiguration(), importReport, TrackerImportReport.class );\n+            notifier\n+                .update( params.getJobConfiguration(), \"(\" + params.getUsername() + \") Import:Validation took \" + validationTimer );\n         }\n-\n-        return importReport;\n+        return validationReport;\n     }\n \n     @Override\n", "next_change": {"commit": "d2feae85e2920e2ecd5cce7d310e926ae797cd2c", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\nindex f3e443befe..91ee2ca9b1 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\n", "chunk": "@@ -177,7 +177,8 @@ public class DefaultTrackerImportService\n         if ( params.hasJobConfiguration() )\n         {\n             notifier\n-                .update( params.getJobConfiguration(), \"(\" + params.getUsername() + \") Import:Validation took \" + validationTimer );\n+                .update( params.getJobConfiguration(),\n+                    \"(\" + params.getUsername() + \") Import:Validation took \" + validationTimer );\n         }\n         return validationReport;\n     }\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\nindex 06ab14aa6f..91ee2ca9b1 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\n", "chunk": "@@ -86,94 +85,102 @@ public class DefaultTrackerImportService\n     }\n \n     @Override\n-    @Transactional\n     public TrackerImportReport importTracker( TrackerImportParams params )\n     {\n+        Timer requestTimer = new SystemTimer().start();\n+\n         params.setUser( getUser( params.getUser(), params.getUserId() ) );\n \n         TrackerImportReport importReport = new TrackerImportReport();\n \n-        Timer totalTimer = new SystemTimer().start();\n-        String message = \"(\" + params.getUsername() + \") Import:Start\";\n-        log.info( message );\n-\n         if ( params.hasJobConfiguration() )\n         {\n-            notifier.notify( params.getJobConfiguration(), message );\n+            notifier.notify( params.getJobConfiguration(), \"(\" + params.getUsername() + \") Import:Start\" );\n         }\n \n-        Timer preheatTimer = new SystemTimer().start();\n-\n-        TrackerBundleParams bundleParams = params.toTrackerBundleParams();\n-        List<TrackerBundle> trackerBundles = trackerBundleService.create( bundleParams );\n-\n-        importReport.getTimings().setPreheat( preheatTimer.toString() );\n-\n-        Timer validationTimer = new SystemTimer().start();\n+        List<TrackerBundle> trackerBundles = preheatBundle( params, importReport );\n \n-        TrackerValidationReport validationReport = new TrackerValidationReport();\n-\n-        trackerBundles.forEach( tb ->\n-            validationReport.add( trackerValidationService.validate( tb ) ) );\n+        TrackerValidationReport validationReport = validateBundle( params, importReport, trackerBundles );\n \n-        String validationTimeFormatted = validationTimer.toString();\n-        message = \"(\" + params.getUsername() + \") Import:Validation took \" + validationTimeFormatted;\n-        log.info( message );\n+        if ( validationReport.hasErrors() )\n+        {\n+            importReport.setStatus( TrackerStatus.ERROR );\n+        }\n+        else\n+        {\n+            commitBundle( params, importReport, trackerBundles );\n+        }\n \n-        importReport.getTimings().setValidation( validationTimeFormatted );\n+        importReport.getTimings().setTotalImport( requestTimer.toString() );\n \n-        importReport.setTrackerValidationReport( validationReport );\n+        TrackerBundleReportModeUtils.filter( importReport, params.getReportMode() );\n \n         if ( params.hasJobConfiguration() )\n         {\n-            notifier.update( params.getJobConfiguration(), message );\n+            notifier\n+                .update( params.getJobConfiguration(),\n+                    \"(\" + params.getUsername() + \") Import:Done took \" + requestTimer, true );\n+\n+            notifier.addJobSummary( params.getJobConfiguration(), importReport, TrackerImportReport.class );\n         }\n \n-//        if ( !(!validationReport.isEmpty() && AtomicMode.ALL == params.getAtomicMode()) )\n-        if ( !validationReport.hasErrors() )\n-        {\n-            Timer commitTimer = new SystemTimer().start();\n+        return importReport;\n+    }\n+\n+    protected List<TrackerBundle> preheatBundle( TrackerImportParams params, TrackerImportReport importReport )\n+    {\n+        Timer preheatTimer = new SystemTimer().start();\n \n-            trackerBundles.forEach( tb ->\n-                importReport.getBundleReports().add( trackerBundleService.commit( tb ) ) );\n+        TrackerBundleParams bundleParams = params.toTrackerBundleParams();\n+        List<TrackerBundle> trackerBundles = trackerBundleService.create( bundleParams );\n \n-            if ( !importReport.isEmpty() )\n-            {\n-                importReport.setStatus( TrackerStatus.WARNING );\n-            }\n+        importReport.getTimings().setPreheat( preheatTimer.toString() );\n+        return trackerBundles;\n+    }\n \n-            String commitTimeFormatted = commitTimer.toString();\n-            message = \"(\" + params.getUsername() + \") Import:Commit took \" + commitTimeFormatted;\n-            log.info( message );\n+    protected void commitBundle( TrackerImportParams params, TrackerImportReport importReport,\n+        List<TrackerBundle> trackerBundles )\n+    {\n+        Timer commitTimer = new SystemTimer().start();\n \n-            importReport.getTimings().setCommit( commitTimeFormatted );\n+        trackerBundles.forEach( tb ->\n+            importReport.getBundleReports().add( trackerBundleService.commit( tb ) ) );\n \n-            if ( params.hasJobConfiguration() )\n-            {\n-                notifier.update( params.getJobConfiguration(), message );\n-            }\n+        if ( !importReport.isEmpty() )\n+        {\n+            importReport.setStatus( TrackerStatus.WARNING );\n         }\n-        else\n+\n+        importReport.getTimings().setCommit( commitTimer.toString() );\n+\n+        if ( params.hasJobConfiguration() )\n         {\n-            importReport.setStatus( TrackerStatus.ERROR );\n+            notifier.update( params.getJobConfiguration(),\n+                \"(\" + params.getUsername() + \") \" + \"Import:Commit took \" + commitTimer );\n         }\n+    }\n+\n+    protected TrackerValidationReport validateBundle( TrackerImportParams params, TrackerImportReport importReport,\n+        List<TrackerBundle> trackerBundles )\n+    {\n+        Timer validationTimer = new SystemTimer().start();\n \n-        String totalTimeFormatted = totalTimer.toString();\n-        message = \"(\" + params.getUsername() + \") Import:Done took \" + totalTimeFormatted;\n-        log.info( message );\n+        TrackerValidationReport validationReport = new TrackerValidationReport();\n \n-        importReport.getTimings().setTotalImport( totalTimeFormatted );\n+        // Do all the validation\n+        trackerBundles.forEach( tb ->\n+            validationReport.add( trackerValidationService.validate( tb ) ) );\n \n-//        params.getReportMode() -->\n-        TrackerBundleReportModeUtils.filter( importReport, TrackerBundleReportMode.FULL );\n+        importReport.getTimings().setValidation( validationTimer.toString() );\n+        importReport.setTrackerValidationReport( validationReport );\n \n         if ( params.hasJobConfiguration() )\n         {\n-            notifier.update( params.getJobConfiguration(), message, true );\n-            notifier.addJobSummary( params.getJobConfiguration(), importReport, TrackerImportReport.class );\n+            notifier\n+                .update( params.getJobConfiguration(),\n+                    \"(\" + params.getUsername() + \") Import:Validation took \" + validationTimer );\n         }\n-\n-        return importReport;\n+        return validationReport;\n     }\n \n     @Override\n", "next_change": {"commit": "c2e0b3718cd8c7597ee5ec2e5193e7eafacf5827", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\nindex 91ee2ca9b1..e7047afffa 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\n", "chunk": "@@ -187,8 +218,10 @@ public class DefaultTrackerImportService\n     public TrackerImportParams getParamsFromMap( Map<String, List<String>> parameters )\n     {\n         TrackerImportParams params = new TrackerImportParams();\n-\n-        params.setUser( getUser( params.getUser(), params.getUserId() ) );\n+        if ( params.getUser() == null )\n+        {\n+            params.setUser( trackerUserService.getUser( params.getUserId() ) );\n+        }\n         params.setValidationMode( getEnumWithDefault( ValidationMode.class, parameters, \"validationMode\",\n             ValidationMode.FULL ) );\n         params.setImportMode(\n", "next_change": {"commit": "3e799d196b8f73ad216ea100a07ddd5f7dfc53e0", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\nindex e7047afffa..9568a3a230 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\n", "chunk": "@@ -218,10 +235,7 @@ public class DefaultTrackerImportService\n     public TrackerImportParams getParamsFromMap( Map<String, List<String>> parameters )\n     {\n         TrackerImportParams params = new TrackerImportParams();\n-        if ( params.getUser() == null )\n-        {\n-            params.setUser( trackerUserService.getUser( params.getUserId() ) );\n-        }\n+\n         params.setValidationMode( getEnumWithDefault( ValidationMode.class, parameters, \"validationMode\",\n             ValidationMode.FULL ) );\n         params.setImportMode(\n", "next_change": {"commit": "913d4ba468bf66783e901c4d43bd355d13cb16fa", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\nindex 9568a3a230..3e1f1e0472 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\n", "chunk": "@@ -231,111 +227,15 @@ public class DefaultTrackerImportService\n         return validationReport;\n     }\n \n-    @Override\n-    public TrackerImportParams getParamsFromMap( Map<String, List<String>> parameters )\n-    {\n-        TrackerImportParams params = new TrackerImportParams();\n-\n-        params.setValidationMode( getEnumWithDefault( ValidationMode.class, parameters, \"validationMode\",\n-            ValidationMode.FULL ) );\n-        params.setImportMode(\n-            getEnumWithDefault( TrackerBundleMode.class, parameters, \"importMode\", TrackerBundleMode.COMMIT ) );\n-        params.setIdentifiers( getTrackerIdentifiers( parameters ) );\n-        params.setImportStrategy( getEnumWithDefault( TrackerImportStrategy.class, parameters, \"importStrategy\",\n-            TrackerImportStrategy.CREATE_AND_UPDATE ) );\n-        params.setAtomicMode( getEnumWithDefault( AtomicMode.class, parameters, \"atomicMode\", AtomicMode.ALL ) );\n-        params.setFlushMode( getEnumWithDefault( FlushMode.class, parameters, \"flushMode\", FlushMode.AUTO ) );\n-\n-        return params;\n-    }\n-\n     @Override\n     public TrackerImportReport buildImportReport( TrackerImportReport importReport, TrackerBundleReportMode reportMode )\n     {\n         return importReport.copy( reportMode );\n     }\n \n-    //-----------------------------------------------------------------------------------\n-    // Utility Methods\n-    //-----------------------------------------------------------------------------------\n-\n-    private TrackerIdentifierParams getTrackerIdentifiers( Map<String, List<String>> parameters )\n-    {\n-        TrackerIdScheme idScheme = getEnumWithDefault( TrackerIdScheme.class, parameters, \"idScheme\",\n-            TrackerIdScheme.UID );\n-        TrackerIdScheme orgUnitIdScheme = getEnumWithDefault( TrackerIdScheme.class, parameters, \"orgUnitIdScheme\",\n-            idScheme );\n-        TrackerIdScheme programIdScheme = getEnumWithDefault( TrackerIdScheme.class, parameters, \"programIdScheme\",\n-            idScheme );\n-        TrackerIdScheme programStageIdScheme = getEnumWithDefault( TrackerIdScheme.class, parameters,\n-            \"programStageIdScheme\", idScheme );\n-        TrackerIdScheme dataElementIdScheme = getEnumWithDefault( TrackerIdScheme.class, parameters,\n-            \"dataElementIdScheme\", idScheme );\n-\n-        return TrackerIdentifierParams.builder()\n-            .idScheme( TrackerIdentifier.builder().idScheme( idScheme )\n-                .value( getAttributeUidOrNull( parameters, \"idScheme\" ) ).build() )\n-            .orgUnitIdScheme( TrackerIdentifier.builder().idScheme( orgUnitIdScheme )\n-                .value( getAttributeUidOrNull( parameters, \"orgUnitIdScheme\" ) ).build() )\n-            .programIdScheme( TrackerIdentifier.builder().idScheme( programIdScheme )\n-                .value( getAttributeUidOrNull( parameters, \"programIdScheme\" ) ).build() )\n-            .programStageIdScheme( TrackerIdentifier.builder().idScheme( programStageIdScheme )\n-                .value( getAttributeUidOrNull( parameters, \"programStageIdScheme\" ) ).build() )\n-            .dataElementIdScheme( TrackerIdentifier.builder().idScheme( dataElementIdScheme )\n-                .value( getAttributeUidOrNull( parameters, \"dataElementIdScheme\" ) ).build() )\n-            .build();\n-    }\n-\n-    private <T extends Enum<T>> T getEnumWithDefault( Class<T> enumKlass, Map<String, List<String>> parameters,\n-        String key, T defaultValue )\n-    {\n-        if ( parameters == null || parameters.get( key ) == null || parameters.get( key ).isEmpty() )\n-        {\n-            return defaultValue;\n-        }\n-\n-        if ( TrackerIdScheme.class.equals( enumKlass ) && IdScheme.isAttribute( parameters.get( key ).get( 0 ) ) )\n-        {\n-            return Enums.getIfPresent( enumKlass, \"ATTRIBUTE\" ).orNull();\n-        }\n-\n-        String value = String.valueOf( parameters.get( key ).get( 0 ) );\n-\n-        return Enums.getIfPresent( enumKlass, value ).or( defaultValue );\n-    }\n-\n-    private String getAttributeUidOrNull( Map<String, List<String>> parameters, String key )\n-    {\n-        if ( parameters == null || parameters.get( key ) == null || parameters.get( key ).isEmpty() )\n-        {\n-            return null;\n-        }\n-\n-        if ( IdScheme.isAttribute( parameters.get( key ).get( 0 ) ) )\n-        {\n-            String uid = \"\";\n-\n-            // Get second half of string, separated by ':'\n-            String[] splitParam = parameters.get( key ).get( 0 ).split( \":\" );\n-\n-            if ( splitParam.length > 1 )\n-            {\n-                uid = splitParam[1];\n-            }\n-\n-            if ( CodeGenerator.isValidUid( uid ) )\n-            {\n-                return uid;\n-            }\n-        }\n-\n-        return null;\n-    }\n-    \n     @AllArgsConstructor\n     static class ImportNotifier\n     {\n-\n         private Notifier notifier;\n \n         private TrackerImportParams params;\n", "next_change": {"commit": "d3babd17c47704fd61fb23a664d8e88264bbcff0", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\ndeleted file mode 100644\nindex 3e1f1e0472..0000000000\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\n+++ /dev/null\n", "chunk": "@@ -1,280 +0,0 @@\n-package org.hisp.dhis.tracker;\n-\n-/*\n- * Copyright (c) 2004-2020, University of Oslo\n- * All rights reserved.\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions are met:\n- * Redistributions of source code must retain the above copyright notice, this\n- * list of conditions and the following disclaimer.\n- *\n- * Redistributions in binary form must reproduce the above copyright notice,\n- * this list of conditions and the following disclaimer in the documentation\n- * and/or other materials provided with the distribution.\n- * Neither the name of the HISP project nor the names of its contributors may\n- * be used to endorse or promote products derived from this software without\n- * specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n- * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n- * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n- * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n- * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n- * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n- * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- */\n-\n-import static org.hisp.dhis.tracker.report.TrackerTimingsStats.COMMIT_OPS;\n-import static org.hisp.dhis.tracker.report.TrackerTimingsStats.PREHEAT_OPS;\n-import static org.hisp.dhis.tracker.report.TrackerTimingsStats.PROGRAMRULE_OPS;\n-import static org.hisp.dhis.tracker.report.TrackerTimingsStats.TOTAL_OPS;\n-import static org.hisp.dhis.tracker.report.TrackerTimingsStats.VALIDATION_OPS;\n-\n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Optional;\n-import java.util.stream.Collectors;\n-import java.util.stream.Stream;\n-\n-import org.hisp.dhis.system.notification.Notifier;\n-import org.hisp.dhis.tracker.bundle.TrackerBundle;\n-import org.hisp.dhis.tracker.bundle.TrackerBundleService;\n-import org.hisp.dhis.tracker.job.TrackerSideEffectDataBundle;\n-import org.hisp.dhis.tracker.preprocess.TrackerPreprocessService;\n-import org.hisp.dhis.tracker.report.TrackerBundleReport;\n-import org.hisp.dhis.tracker.report.TrackerImportReport;\n-import org.hisp.dhis.tracker.report.TrackerStatus;\n-import org.hisp.dhis.tracker.report.TrackerTimingsStats;\n-import org.hisp.dhis.tracker.report.TrackerTypeReport;\n-import org.hisp.dhis.tracker.report.TrackerValidationReport;\n-import org.hisp.dhis.tracker.validation.TrackerValidationService;\n-import org.springframework.stereotype.Service;\n-\n-import com.google.common.collect.ImmutableMap;\n-\n-import lombok.AllArgsConstructor;\n-import lombok.NonNull;\n-import lombok.RequiredArgsConstructor;\n-import lombok.extern.slf4j.Slf4j;\n-\n-/**\n- * @author Morten Olav Hansen <mortenoh@gmail.com>\n- */\n-@Service\n-@Slf4j\n-@RequiredArgsConstructor\n-public class DefaultTrackerImportService\n-    implements TrackerImportService\n-{\n-    @NonNull private final TrackerBundleService trackerBundleService;\n-\n-    @NonNull private final TrackerValidationService trackerValidationService;\n-\n-    @NonNull private final TrackerPreprocessService trackerPreprocessService;\n-\n-    @NonNull private final TrackerUserService trackerUserService;\n-\n-    @NonNull private final Notifier notifier;\n-\n-    @Override\n-    public TrackerImportReport importTracker( TrackerImportParams params )\n-    {\n-        params.setUser( trackerUserService.getUser( params.getUserId() ) );\n-\n-        // Init the Notifier\n-        ImportNotifier notifier = new ImportNotifier( this.notifier, params );\n-\n-        // Keeps track of the elapsed time of each Import stage\n-        TrackerTimingsStats opsTimer = new TrackerTimingsStats();\n-\n-        notifier.startImport();\n-\n-        TrackerValidationReport validationReport = null;\n-\n-        TrackerBundleReport bundleReport;\n-\n-        try\n-        {\n-            //\n-            // pre-heat\n-            //\n-            TrackerBundle trackerBundle = opsTimer.exec( PREHEAT_OPS,\n-                () -> preheatBundle( params ) );\n-\n-            Map<TrackerType, Integer> bundleSize = calculatePayloadSize( trackerBundle );\n-\n-            //\n-            // preprocess\n-            //\n-            opsTimer.execVoid( PROGRAMRULE_OPS,\n-                () -> preProcessBundle( trackerBundle ) );\n-\n-            //\n-            // validate\n-            //\n-            validationReport = opsTimer.exec( VALIDATION_OPS,\n-                () -> validateBundle( trackerBundle ) );\n-\n-            notifier.notifyOps( VALIDATION_OPS, opsTimer );\n-\n-\n-            if ( validationReport.hasErrors() && params.getAtomicMode() == AtomicMode.ALL )\n-            {\n-                TrackerImportReport trackerImportReport = TrackerImportReport\n-                    .withValidationErrors( validationReport, opsTimer.stopTimer(),\n-                        bundleSize.values().stream().mapToInt( Integer::intValue ).sum() );\n-\n-                notifier.endImport( trackerImportReport );\n-\n-                return trackerImportReport;\n-            }\n-            else\n-            {\n-                if ( TrackerImportStrategy.DELETE == params.getImportStrategy() )\n-                {\n-                    bundleReport = opsTimer.exec( COMMIT_OPS, () -> deleteBundle( trackerBundle) );\n-                }\n-                else\n-                {\n-                    bundleReport = opsTimer.exec( COMMIT_OPS, () -> commitBundle( trackerBundle) );\n-                }\n-\n-                notifier.notifyOps( COMMIT_OPS, opsTimer );\n-\n-                TrackerImportReport trackerImportReport = TrackerImportReport.withImportCompleted( TrackerStatus.OK,\n-                    bundleReport, validationReport,\n-                    opsTimer.stopTimer(), bundleSize );\n-\n-                notifier.endImport( trackerImportReport );\n-\n-                return trackerImportReport;\n-            }\n-        }\n-        catch ( Exception e )\n-        {\n-            log.error( \"Exception thrown during import.\", e );\n-\n-            TrackerImportReport report = TrackerImportReport.withError( \"Exception:\" + e.getMessage(),\n-                validationReport, opsTimer.stopTimer() );\n-\n-            notifier.endImportWithError( report, e );\n-\n-            return report;\n-        }\n-    }\n-\n-    private Map<TrackerType, Integer> calculatePayloadSize( TrackerBundle bundle )\n-    {\n-        return ImmutableMap.<TrackerType, Integer> builder()\n-            .put( TrackerType.TRACKED_ENTITY, bundle.getTrackedEntities().size() )\n-            .put( TrackerType.ENROLLMENT, bundle.getEnrollments().size() )\n-            .put( TrackerType.EVENT, bundle.getEvents().size() )\n-            .put( TrackerType.RELATIONSHIP, bundle.getRelationships().size() ).build();\n-    }\n-\n-    protected TrackerBundle preheatBundle( TrackerImportParams params )\n-    {\n-        return  trackerBundleService.create( params );\n-    }\n-\n-    protected void preProcessBundle( TrackerBundle bundle )\n-    {\n-        TrackerBundle trackerBundle = trackerBundleService.runRuleEngine( bundle );\n-        trackerPreprocessService.preprocess( trackerBundle );\n-    }\n-\n-    protected TrackerBundleReport commitBundle( TrackerBundle trackerBundle )\n-    {\n-        TrackerBundleReport bundleReport = trackerBundleService.commit( trackerBundle );\n-\n-        List<TrackerSideEffectDataBundle> sideEffectDataBundles = Stream.of( TrackerType.ENROLLMENT, TrackerType.EVENT )\n-            .map( trackerType -> safelyGetSideEffectsDataBundles( bundleReport, trackerType ) )\n-            .flatMap( Collection::stream )\n-            .collect( Collectors.toList() );\n-\n-        trackerBundleService.handleTrackerSideEffects( sideEffectDataBundles );\n-\n-        return bundleReport;\n-    }\n-\n-    List<TrackerSideEffectDataBundle> safelyGetSideEffectsDataBundles( TrackerBundleReport bundleReport,\n-        TrackerType trackerType )\n-    {\n-        return Optional.ofNullable( bundleReport )\n-            .map( TrackerBundleReport::getTypeReportMap )\n-            .map( reportMap -> reportMap.get( trackerType ) )\n-            .map( TrackerTypeReport::getSideEffectDataBundles )\n-            .orElse( Collections.emptyList() );\n-    }\n-\n-    protected TrackerBundleReport deleteBundle( TrackerBundle trackerBundle )\n-    {\n-        return trackerBundleService.delete( trackerBundle );\n-    }\n-\n-    protected TrackerValidationReport validateBundle( TrackerBundle trackerBundle )\n-    {\n-        TrackerValidationReport validationReport = new TrackerValidationReport();\n-\n-        validationReport.add( trackerValidationService.validate( trackerBundle ) );\n-        \n-        return validationReport;\n-    }\n-\n-    @Override\n-    public TrackerImportReport buildImportReport( TrackerImportReport importReport, TrackerBundleReportMode reportMode )\n-    {\n-        return importReport.copy( reportMode );\n-    }\n-\n-    @AllArgsConstructor\n-    static class ImportNotifier\n-    {\n-        private Notifier notifier;\n-\n-        private TrackerImportParams params;\n-\n-        public void startImport()\n-        {\n-            notifier.notify( params.getJobConfiguration(), \"(\" + params.getUsername() + \") Import:Start\" );\n-        }\n-\n-        public void notifyOps( String validationOps, TrackerTimingsStats opsTimer )\n-        {\n-\n-            if ( params.hasJobConfiguration() )\n-            {\n-                notifier\n-                    .update( params.getJobConfiguration(),\n-                        \"(\" + params.getUsername() + \") Import:\" + validationOps + \" took \"\n-                            + opsTimer.get( validationOps ) );\n-            }\n-        }\n-\n-        public void endImport( TrackerImportReport importReport )\n-        {\n-            if ( params.hasJobConfiguration() )\n-            {\n-                notifier.update( params.getJobConfiguration(), \"(\" + params.getUsername() + \") Import:Done took \" +\n-                    importReport.getTimingsStats().get( TOTAL_OPS ), true );\n-\n-                notifier.addJobSummary( params.getJobConfiguration(), importReport, TrackerImportReport.class );\n-            }\n-        }\n-\n-        public void endImportWithError( TrackerImportReport importReport, Exception e) {\n-\n-            if ( params.hasJobConfiguration() )\n-            {\n-                notifier.update( params.getJobConfiguration(), \"(\" + params.getUsername() + \") Import:Failed with exception: \" + e.getMessage(), true );\n-                notifier.addJobSummary( params.getJobConfiguration(), importReport, TrackerImportReport.class );\n-            }\n-        }\n-    }\n-}\n", "next_change": {"commit": "43725fed360d23cefb272443d6b3cf36cb72ff74", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\nnew file mode 100644\nindex 0000000000..6ff6031dee\n--- /dev/null\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\n", "chunk": "@@ -0,0 +1,395 @@\n+/*\n+ * Copyright (c) 2004-2022, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package org.hisp.dhis.tracker;\n+\n+import static org.hisp.dhis.tracker.report.TimingsStats.COMMIT_OPS;\n+import static org.hisp.dhis.tracker.report.TimingsStats.PREHEAT_OPS;\n+import static org.hisp.dhis.tracker.report.TimingsStats.PREPROCESS_OPS;\n+import static org.hisp.dhis.tracker.report.TimingsStats.PROGRAMRULE_OPS;\n+import static org.hisp.dhis.tracker.report.TimingsStats.TOTAL_OPS;\n+import static org.hisp.dhis.tracker.report.TimingsStats.VALIDATE_PROGRAMRULE_OPS;\n+import static org.hisp.dhis.tracker.report.TimingsStats.VALIDATION_OPS;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import javax.annotation.Nonnull;\n+\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import org.hisp.dhis.system.notification.NotificationLevel;\n+import org.hisp.dhis.system.notification.Notifier;\n+import org.hisp.dhis.tracker.bundle.TrackerBundle;\n+import org.hisp.dhis.tracker.bundle.TrackerBundleService;\n+import org.hisp.dhis.tracker.job.TrackerSideEffectDataBundle;\n+import org.hisp.dhis.tracker.preprocess.TrackerPreprocessService;\n+import org.hisp.dhis.tracker.report.ImportReport;\n+import org.hisp.dhis.tracker.report.PersistenceReport;\n+import org.hisp.dhis.tracker.report.Status;\n+import org.hisp.dhis.tracker.report.TimingsStats;\n+import org.hisp.dhis.tracker.report.TrackerTypeReport;\n+import org.hisp.dhis.tracker.report.ValidationReport;\n+import org.hisp.dhis.tracker.validation.ValidationResult;\n+import org.hisp.dhis.tracker.validation.ValidationService;\n+import org.hisp.dhis.user.User;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+/**\n+ * @author Morten Olav Hansen <mortenoh@gmail.com>\n+ */\n+@Service\n+@Slf4j\n+@RequiredArgsConstructor\n+public class DefaultTrackerImportService\n+    implements TrackerImportService\n+{\n+    @Nonnull\n+    private final TrackerBundleService trackerBundleService;\n+\n+    @Nonnull\n+    private final ValidationService validationService;\n+\n+    @Nonnull\n+    private final TrackerPreprocessService trackerPreprocessService;\n+\n+    @Nonnull\n+    private final TrackerUserService trackerUserService;\n+\n+    @Nonnull\n+    private final Notifier notifier;\n+\n+    @Override\n+    @Transactional\n+    public ImportReport importTracker( TrackerImportParams params )\n+    {\n+        User user = trackerUserService.getUser( params.getUserId() );\n+        params.setUser( user );\n+\n+        TimingsStats opsTimer = new TimingsStats();\n+\n+        startImport( params );\n+\n+        try\n+        {\n+            TrackerBundle trackerBundle = preHeat( params, opsTimer );\n+\n+            Map<TrackerType, Integer> bundleSize = calculatePayloadSize( trackerBundle );\n+\n+            preProcess( opsTimer, trackerBundle );\n+\n+            ValidationReport validationReport = validate( params, opsTimer, trackerBundle );\n+\n+            if ( exitOnError( validationReport, params ) )\n+            {\n+                return buildReportAndNotify( params, validationReport, opsTimer, bundleSize );\n+            }\n+\n+            PersistenceReport persistenceReport = commit( params, opsTimer, trackerBundle );\n+\n+            postCommit( trackerBundle );\n+\n+            ImportReport importReport = ImportReport.withImportCompleted(\n+                Status.OK,\n+                persistenceReport, validationReport,\n+                opsTimer.stopTimer(), bundleSize );\n+\n+            endImport( params, importReport );\n+\n+            return importReport;\n+        }\n+        catch ( Exception e )\n+        {\n+            log.error( \"Exception thrown during import.\", e );\n+\n+            ImportReport report = ImportReport.withError( \"Exception:\" + e.getMessage(),\n+                ValidationReport.emptyReport(), opsTimer.stopTimer() );\n+\n+            endImportWithError( params, report, e );\n+\n+            return report;\n+        }\n+    }\n+\n+    private TrackerBundle preHeat( TrackerImportParams params, TimingsStats opsTimer )\n+    {\n+        TrackerBundle trackerBundle = opsTimer.exec( PREHEAT_OPS,\n+            () -> preheatBundle( params ) );\n+\n+        notifyOps( params, PREHEAT_OPS, opsTimer );\n+\n+        return trackerBundle;\n+    }\n+\n+    private void preProcess( TimingsStats opsTimer, TrackerBundle trackerBundle )\n+    {\n+        opsTimer.execVoid( PREPROCESS_OPS,\n+            () -> preProcessBundle( trackerBundle ) );\n+    }\n+\n+    private ValidationReport validate( TrackerImportParams params, TimingsStats opsTimer, TrackerBundle trackerBundle )\n+    {\n+        ValidationResult validationResult = opsTimer.exec( VALIDATION_OPS,\n+            () -> validateBundle( params, trackerBundle, opsTimer ) );\n+\n+        if ( !trackerBundle.isSkipRuleEngine() && !params.getImportStrategy().isDelete() )\n+        {\n+            ValidationResult ruleEnginevalidationResult = execRuleEngine( params, opsTimer, trackerBundle );\n+\n+            return ValidationReport.merge( validationResult, ruleEnginevalidationResult );\n+        }\n+\n+        return ValidationReport.fromResult( validationResult );\n+    }\n+\n+    private PersistenceReport commit( TrackerImportParams params, TimingsStats opsTimer,\n+        TrackerBundle trackerBundle )\n+    {\n+        PersistenceReport persistenceReport;\n+        if ( TrackerImportStrategy.DELETE == params.getImportStrategy() )\n+        {\n+            persistenceReport = opsTimer.exec( COMMIT_OPS, () -> deleteBundle( trackerBundle ) );\n+        }\n+        else\n+        {\n+            persistenceReport = opsTimer.exec( COMMIT_OPS, () -> commitBundle( trackerBundle ) );\n+        }\n+\n+        notifyOps( params, COMMIT_OPS, opsTimer );\n+        return persistenceReport;\n+    }\n+\n+    private void postCommit( TrackerBundle trackerBundle )\n+    {\n+        trackerBundleService.postCommit( trackerBundle );\n+    }\n+\n+    protected ValidationResult validateBundle( TrackerImportParams params, TrackerBundle bundle,\n+        TimingsStats opsTimer )\n+    {\n+        ValidationResult result = validationService.validate( bundle );\n+        bundle.setTrackedEntities( result.getTrackedEntities() );\n+        bundle.setEnrollments( result.getEnrollments() );\n+        bundle.setEvents( result.getEvents() );\n+        bundle.setRelationships( result.getRelationships() );\n+\n+        notifyOps( params, VALIDATION_OPS, opsTimer );\n+\n+        return result;\n+    }\n+\n+    private ValidationResult execRuleEngine( TrackerImportParams params, TimingsStats opsTimer,\n+        TrackerBundle bundle )\n+    {\n+        opsTimer.execVoid( PROGRAMRULE_OPS,\n+            () -> trackerBundleService.runRuleEngine( bundle ) );\n+\n+        notifyOps( params, PROGRAMRULE_OPS, opsTimer );\n+\n+        ValidationResult result = opsTimer.exec( VALIDATE_PROGRAMRULE_OPS,\n+            () -> validationService.validateRuleEngine( bundle ) );\n+        bundle.setTrackedEntities( result.getTrackedEntities() );\n+        bundle.setEnrollments( result.getEnrollments() );\n+        bundle.setEvents( result.getEvents() );\n+        bundle.setRelationships( result.getRelationships() );\n+\n+        notifyOps( params, VALIDATE_PROGRAMRULE_OPS, opsTimer );\n+\n+        return result;\n+    }\n+\n+    private ImportReport buildReportAndNotify( TrackerImportParams params,\n+        ValidationReport validationReport,\n+        TimingsStats opsTimer, Map<TrackerType, Integer> bundleSize )\n+    {\n+        ImportReport importReport = ImportReport.withValidationErrors( validationReport,\n+            opsTimer.stopTimer(),\n+            bundleSize.values().stream().mapToInt( Integer::intValue ).sum() );\n+\n+        endImport( params, importReport );\n+\n+        return importReport;\n+    }\n+\n+    private boolean exitOnError( ValidationReport validationReport, TrackerImportParams params )\n+    {\n+        return validationReport.hasErrors() && params.getAtomicMode() == AtomicMode.ALL;\n+    }\n+\n+    private Map<TrackerType, Integer> calculatePayloadSize( TrackerBundle bundle )\n+    {\n+        return Map.of(\n+            TrackerType.TRACKED_ENTITY, bundle.getTrackedEntities().size(),\n+            TrackerType.ENROLLMENT, bundle.getEnrollments().size(),\n+            TrackerType.EVENT, bundle.getEvents().size(),\n+            TrackerType.RELATIONSHIP, bundle.getRelationships().size() );\n+    }\n+\n+    protected TrackerBundle preheatBundle( TrackerImportParams params )\n+    {\n+        return trackerBundleService.create( params );\n+    }\n+\n+    protected void preProcessBundle( TrackerBundle bundle )\n+    {\n+        trackerPreprocessService.preprocess( bundle );\n+    }\n+\n+    protected PersistenceReport commitBundle( TrackerBundle trackerBundle )\n+    {\n+        PersistenceReport persistenceReport = trackerBundleService.commit( trackerBundle );\n+\n+        if ( !trackerBundle.isSkipSideEffects() )\n+        {\n+            List<TrackerSideEffectDataBundle> sideEffectDataBundles = Stream\n+                .of( TrackerType.ENROLLMENT, TrackerType.EVENT )\n+                .map( trackerType -> safelyGetSideEffectsDataBundles( persistenceReport, trackerType ) )\n+                .flatMap( Collection::stream )\n+                .collect( Collectors.toList() );\n+\n+            trackerBundleService.handleTrackerSideEffects( sideEffectDataBundles );\n+        }\n+\n+        return persistenceReport;\n+    }\n+\n+    private List<TrackerSideEffectDataBundle> safelyGetSideEffectsDataBundles( PersistenceReport persistenceReport,\n+        TrackerType trackerType )\n+    {\n+        return Optional.ofNullable( persistenceReport )\n+            .map( PersistenceReport::getTypeReportMap )\n+            .map( reportMap -> reportMap.get( trackerType ) )\n+            .map( TrackerTypeReport::getSideEffectDataBundles )\n+            .orElse( Collections.emptyList() );\n+    }\n+\n+    protected PersistenceReport deleteBundle( TrackerBundle trackerBundle )\n+    {\n+        return trackerBundleService.delete( trackerBundle );\n+    }\n+\n+    private void startImport( TrackerImportParams params )\n+    {\n+        if ( null != params.getJobConfiguration() )\n+        {\n+            notifier.notify( params.getJobConfiguration(),\n+                params.userStartInfo() + \" Import:Start\" );\n+        }\n+    }\n+\n+    private void notifyOps( TrackerImportParams params, String validationOps, TimingsStats opsTimer )\n+    {\n+        if ( null != params.getJobConfiguration() )\n+        {\n+            notifier\n+                .update( params.getJobConfiguration(), NotificationLevel.DEBUG,\n+                    params +\n+                        validationOps + \" completed in \"\n+                        + opsTimer.get( validationOps ) + \" Import:\"\n+                        + validationOps );\n+        }\n+    }\n+\n+    private void endImport( TrackerImportParams params, ImportReport importReport )\n+    {\n+        if ( null != params.getJobConfiguration() )\n+        {\n+            notifier.update( params.getJobConfiguration(),\n+                params +\n+                    \" finished in \" +\n+                    importReport.getTimingsStats().get( TOTAL_OPS ) + \" Import:Done\",\n+                true );\n+\n+            if ( params.getJobConfiguration().isInMemoryJob() )\n+            {\n+                notifier.addJobSummary( params.getJobConfiguration(), importReport, ImportReport.class );\n+            }\n+        }\n+    }\n+\n+    private void endImportWithError( TrackerImportParams params, ImportReport importReport, Exception e )\n+    {\n+        if ( null != params.getJobConfiguration() && params.getJobConfiguration().isInMemoryJob() )\n+        {\n+            notifier.update( params.getJobConfiguration(), NotificationLevel.ERROR,\n+                params +\n+                    \" failed with exception: \"\n+                    + e.getMessage() + \" Import:Error\",\n+                true );\n+\n+            if ( params.getJobConfiguration().isInMemoryJob() )\n+            {\n+                notifier.addJobSummary( params.getJobConfiguration(), importReport, ImportReport.class );\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Clone the TrackerImportReport and filters out validation data based on\n+     * the provided {@link PersistenceReport}.\n+     *\n+     * @return a copy of the current TrackerImportReport\n+     */\n+    @Override\n+    public ImportReport buildImportReport( ImportReport originalImportReport,\n+        TrackerBundleReportMode reportMode )\n+    {\n+        ImportReport.ImportReportBuilder importReportBuilder = ImportReport.builder()\n+            .status( originalImportReport.getStatus() )\n+            .stats( originalImportReport.getStats() )\n+            .persistenceReport( originalImportReport.getPersistenceReport() )\n+            .message( originalImportReport.getMessage() );\n+\n+        ValidationReport originalValidationReport = originalImportReport.getValidationReport();\n+        ValidationReport validationReport = ValidationReport.emptyReport();\n+        if ( originalValidationReport != null )\n+        {\n+            validationReport.addErrors( originalValidationReport.getErrors() );\n+        }\n+        if ( originalValidationReport != null && TrackerBundleReportMode.WARNINGS == reportMode )\n+        {\n+            validationReport.addWarnings( originalValidationReport.getWarnings() );\n+        }\n+        else if ( originalValidationReport != null && TrackerBundleReportMode.FULL == reportMode )\n+        {\n+            validationReport\n+                .addWarnings( originalValidationReport.getWarnings() );\n+            importReportBuilder.timingsStats( originalImportReport.getTimingsStats() );\n+        }\n+\n+        importReportBuilder.validationReport( validationReport );\n+\n+        return importReportBuilder.build();\n+    }\n+}\n", "next_change": null}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "message": "Merge commit", "committedDate": null}, {"oid": "399526882c2fbbf5600922b3c3b6030420cf4e96", "committedDate": "2020-07-13 12:23:07 +0200", "message": "feat: Run rule engine rules in new importer [DHIS2-7310]"}, {"oid": "2ed799f33ca26b918ed60473a3f097714f00492e", "committedDate": "2020-08-04 10:30:01 +0200", "message": "chore: Clean up code (#5877)"}, {"oid": "8374cb43e422eddc1f4c01bb715d8d285acc37be", "committedDate": "2020-08-10 11:38:43 +0200", "message": "Merge remote-tracking branch 'origin/master' into DHIS2-7310-merge"}, {"oid": "b010ab69f5dfb7b5ea0a5cfd438c1d7ebf3275de", "committedDate": "2020-08-24 14:13:32 +0200", "message": "fix: Implement atomic mode OBJECTS to commit only valid DTOs (#5958)"}, {"oid": "82a863c258aa34e592b309bb9d6081c4dc8f981b", "committedDate": "2020-08-27 14:46:58 +0200", "message": "feat: Add support for deletion of tracker objects [DHIS2-9085] (#5959)"}, {"oid": "cb2ee65c0210c0d4b2bd8851789da8d4adfaf04d", "committedDate": "2020-09-07 10:28:21 +0200", "message": "fix: [DHIS2-9287] Fix the stats in the import summary (#6062)"}, {"oid": "c2e0b3718cd8c7597ee5ec2e5193e7eafacf5827", "committedDate": "2020-09-08 09:47:19 +0200", "message": "fix: prevent Hibernate session errors with User object (#6063)"}, {"oid": "0d35843121f0ad3004fad015f1520c5b06a5c337", "committedDate": "2020-09-15 09:24:33 +0200", "message": "Merge 2.35 into master (#6149)"}, {"oid": "20ae7d1ed19072116ee92e47a760e281039159ce", "committedDate": "2020-09-15 11:32:35 +0200", "message": "fix: [DHIS2-9428] Use report mode parameter to filter report data (#6122)"}, {"oid": "8aaeab2ee4dd7a9ffa927147931dff8609ef787a", "committedDate": "2020-09-23 15:33:34 +0200", "message": "chore: Remove unused imports (#6219)"}, {"oid": "87ef26080354e452d282d374e4dc6de996844a1c", "committedDate": "2020-10-02 09:53:53 +0200", "message": "test: Add integration tests for tracker side effects (#5833)"}, {"oid": "0208c5478719a64f691e4255b6d839bc95200fb4", "committedDate": "2020-10-23 10:03:41 +0200", "message": "fix: [DHIS2-9817] [DHIS2-9825] serialization and deserialization of TrackerImportReport and excception handling (2.36) (#6473)"}, {"oid": "3934daf1873ee7d70faa0058706c2409575865e5", "committedDate": "2020-10-23 12:21:16 +0200", "message": "fix: [DHIS2-9428] Made ERRORS as default reportMode and stats returned correctly (2.36) (#6477)"}, {"oid": "695641b3509e973bf6cf9fd631d2641e55eeeff4", "committedDate": "2020-10-23 14:47:30 +0200", "message": "fix: [DHIS2-9286] handled exception messages filtered out in final report (2.36) (#6478)"}, {"oid": "0e72ebff22211397a74a8a6aa539bb2f19351370", "committedDate": "2020-10-29 15:26:27 +0100", "message": "fix: Fix lazy initialisation exceptions (#6520)"}, {"oid": "9d25538a10eb27d9dd38aca54900dd84a02b5897", "committedDate": "2020-11-09 12:23:56 +0100", "message": "fix: DHIS2-9855 fixing NPE (#6588)"}, {"oid": "6e28dbfdaea7ceacbe560fe82ddba1e94c6cd203", "committedDate": "2020-11-11 17:41:55 +0100", "message": "fix: Exception when importing TEI with relationship [DHIS2-9856] (#6552)"}, {"oid": "ba02f7daf7dbd5125f1b0215bcc9b25649d32a68", "committedDate": "2020-11-12 15:53:58 +0100", "message": "fix: Use same timers for report and logs (#6642)"}, {"oid": "1f0559c94f01b1497116fe5ba2e19f28f072a879", "committedDate": "2020-11-23 09:21:47 +0100", "message": "fix: invalid ignore count in Tracker Import stats (#6721)"}, {"oid": "89451b9b46d62bfc853b0ed26b6ec266771f3d58", "committedDate": "2020-11-23 10:57:11 +0100", "message": "fix: add report when validation failed a (#6738)"}, {"oid": "641aca580898b88dd99837fe8b5e0639027c6e0e", "committedDate": "2020-11-24 08:24:42 +0100", "message": "fix: Import report ignore values on stats objects (#6745)"}, {"oid": "3e799d196b8f73ad216ea100a07ddd5f7dfc53e0", "committedDate": "2020-11-30 16:37:14 +0100", "message": "fix: remove long running transaction during Tracker Import (#6782)"}, {"oid": "913d4ba468bf66783e901c4d43bd355d13cb16fa", "committedDate": "2020-12-02 16:44:17 +0100", "message": "refactor: Tracker Import params creation (#6814)"}, {"oid": "3ab88a5f4623a8c749246bedef34fcb926d185cb", "committedDate": "2020-12-08 10:40:14 +0100", "message": "fix: [DHIS2-7310] Move rule engine call and validations after bundle validation (#6843)"}, {"oid": "c4f1db1dab576bc73489a9e0a6d015acec2eab5b", "committedDate": "2020-12-15 15:09:02 +0100", "message": "feat: Tracker Import metadata cache (#6877)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "74425bc0f9d76839b6aafd0a8573f0d3d0464446", "committedDate": "2021-01-20 10:08:21 +0100", "message": "fix: Add skipSideEffects flag for new tracker importer"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "d3babd17c47704fd61fb23a664d8e88264bbcff0", "committedDate": "2021-02-15 16:32:19 +0100", "message": "fix: Dhis2 10432 (#7347)"}, {"oid": "f83b6227cef05563252d258a1050a8bd57c70018", "committedDate": "2021-12-07 16:41:41 +0100", "message": "chore: place default TrackerImportService next to interface (#9371)"}, {"oid": "242e8d7cc2a94f328778c2fbad9005509c5b3360", "committedDate": "2021-12-21 13:35:53 +0100", "message": "chore: simplify tracker import validation TECH-880 (#9510)"}, {"oid": "8bd63f9823397e39458bd1cdab383c33c3231019", "committedDate": "2021-12-22 09:32:29 +0100", "message": "chore: move factory methods into class it creates TECH-880 (#9518)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "1c6c72cc7c172b2a5708fb662e588b797d525a55", "committedDate": "2022-01-11 15:55:54 +0100", "message": "chore: bring TrackerValidationReport closer to ValidationErrorReporter TECH-880 (#9595)"}, {"oid": "7c0131dfcfbf72dad27dc5f0a3f6a776e286c79a", "committedDate": "2022-01-11 17:47:56 +0100", "message": "chore: make TrackerValidationReport add methods fluent and name Timing TECH-880 (#9601)"}, {"oid": "8ccf9a288a67e5ee5349024fd3d281372c64c956", "committedDate": "2022-02-22 13:25:35 +0800", "message": "feat: Merge User/UserCredentials into one DB table (#9754)"}, {"oid": "d99da048b6427aa16b080ab0a0e25eda4a2a0f96", "committedDate": "2022-05-09 13:53:18 +0200", "message": "feat: Refactor getCurrentUser() to return DHIS2 User object 2 (#10600)"}, {"oid": "2886ebea404331a2c3f78909bcb92cca1ecc7913", "committedDate": "2022-10-12 09:39:22 +0200", "message": "chore: only use @Nonnull and ban similar annotations (#12071)"}, {"oid": "8bd34731a22250d0a8166442ecad89d00c926ccf", "committedDate": "2022-12-12 17:11:18 +0100", "message": "chore: Cleanup tracker reporter (#12501)"}, {"oid": "e4b9a5c802805b26fe8255711d1f98e662f15c6d", "committedDate": "2022-12-14 10:01:20 +0100", "message": "chore: Rename and clean up report model objects [TECH-14298] (#12525)"}, {"oid": "17085ef1b029fa636afa4c26f2466fb3b95be1e2", "committedDate": "2022-12-15 09:50:15 +0100", "message": "chore: Decouple validation package from report package [DHIS2-14298] (#12558)"}, {"oid": "2d2c1a72fe29e5330e1b3f799f4ab915b5a5bbf0", "committedDate": "2022-12-16 08:41:19 +0000", "message": "chore: remove prefix from TrackerValidationService (#12589)"}, {"oid": "f7407b037eca371200b710628ba5c9e66fe2971a", "committedDate": "2022-12-19 08:23:40 +0100", "message": "chore: Only expose immutable result from validation package [DHIS2-14298] (#12581)"}, {"oid": "2b482819097a3d8498c8a5f72eeffc958da3b95c", "committedDate": "2022-12-20 10:14:42 +0100", "message": "chore: don't mutate bundle in validation (#12620)"}, {"oid": "43725fed360d23cefb272443d6b3cf36cb72ff74", "committedDate": "2023-01-23 11:12:38 +0100", "message": "refactor: Use java Map#of over Guava ImmutableMap#builder (#12804)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU3ODI1MA==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r445578250", "body": "Is this logic ok to be removed (I mean, AtomicMode?)", "bodyText": "Is this logic ok to be removed (I mean, AtomicMode?)", "bodyHTML": "<p dir=\"auto\">Is this logic ok to be removed (I mean, AtomicMode?)</p>", "author": "luciano-fiandesio", "createdAt": "2020-06-25T13:56:49Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java", "diffHunk": "@@ -101,41 +102,52 @@ public TrackerImportReport importTracker( TrackerImportParams params )\n             notifier.notify( params.getJobConfiguration(), message );\n         }\n \n-        TrackerImportReport importReport = new TrackerImportReport();\n+        Timer preheatTimer = new SystemTimer().start();\n \n         TrackerBundleParams bundleParams = params.toTrackerBundleParams();\n         List<TrackerBundle> trackerBundles = trackerBundleService.create( bundleParams );\n \n+        importReport.getTimings().setPreheat( preheatTimer.toString() );\n+\n         Timer validationTimer = new SystemTimer().start();\n \n         TrackerValidationReport validationReport = new TrackerValidationReport();\n-        trackerBundles.forEach( tb -> validationReport.add( trackerValidationService.validate( tb ) ) );\n \n-        message = \"(\" + params.getUsername() + \") Import:Validation took \" + validationTimer.toString();\n+        trackerBundles.forEach( tb ->\n+            validationReport.add( trackerValidationService.validate( tb ) ) );\n+\n+        String validationTimeFormatted = validationTimer.toString();\n+        message = \"(\" + params.getUsername() + \") Import:Validation took \" + validationTimeFormatted;\n         log.info( message );\n \n+        importReport.getTimings().setValidation( validationTimeFormatted );\n+\n+        importReport.setTrackerValidationReport( validationReport );\n+\n         if ( params.hasJobConfiguration() )\n         {\n             notifier.update( params.getJobConfiguration(), message );\n         }\n \n-        if ( !(!validationReport.isEmpty() && AtomicMode.ALL == params.getAtomicMode()) )", "originalCommit": "e7e003a2211cdf3f412ce75f95ef0f6be1973434", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYyNzA0Mw==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446627043", "bodyText": "There are no feature implemented for this yet. I would argue we remove it and keep the code clean until we implement this feature.", "author": "netroms", "createdAt": "2020-06-28T09:36:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU3ODI1MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYyNzIxNQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446627215", "bodyText": "I have added this question to the next meeting.", "author": "netroms", "createdAt": "2020-06-28T09:38:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU3ODI1MA=="}], "type": "inlineReview", "revised_code": {"commit": "c5a94c3d798ab59a16b994801255c4ac2631887b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\nindex 06ab14aa6f..f3e443befe 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\n", "chunk": "@@ -86,94 +86,100 @@ public class DefaultTrackerImportService\n     }\n \n     @Override\n-    @Transactional\n     public TrackerImportReport importTracker( TrackerImportParams params )\n     {\n+        Timer requestTimer = new SystemTimer().start();\n+\n         params.setUser( getUser( params.getUser(), params.getUserId() ) );\n \n         TrackerImportReport importReport = new TrackerImportReport();\n \n-        Timer totalTimer = new SystemTimer().start();\n-        String message = \"(\" + params.getUsername() + \") Import:Start\";\n-        log.info( message );\n-\n         if ( params.hasJobConfiguration() )\n         {\n-            notifier.notify( params.getJobConfiguration(), message );\n+            notifier.notify( params.getJobConfiguration(), \"(\" + params.getUsername() + \") Import:Start\" );\n         }\n \n-        Timer preheatTimer = new SystemTimer().start();\n-\n-        TrackerBundleParams bundleParams = params.toTrackerBundleParams();\n-        List<TrackerBundle> trackerBundles = trackerBundleService.create( bundleParams );\n-\n-        importReport.getTimings().setPreheat( preheatTimer.toString() );\n-\n-        Timer validationTimer = new SystemTimer().start();\n+        List<TrackerBundle> trackerBundles = preheatBundle( params, importReport );\n \n-        TrackerValidationReport validationReport = new TrackerValidationReport();\n-\n-        trackerBundles.forEach( tb ->\n-            validationReport.add( trackerValidationService.validate( tb ) ) );\n+        TrackerValidationReport validationReport = validateBundle( params, importReport, trackerBundles );\n \n-        String validationTimeFormatted = validationTimer.toString();\n-        message = \"(\" + params.getUsername() + \") Import:Validation took \" + validationTimeFormatted;\n-        log.info( message );\n+        if ( validationReport.hasErrors() )\n+        {\n+            importReport.setStatus( TrackerStatus.ERROR );\n+        }\n+        else\n+        {\n+            commitBundle( params, importReport, trackerBundles );\n+        }\n \n-        importReport.getTimings().setValidation( validationTimeFormatted );\n+        importReport.getTimings().setTotalImport( requestTimer.toString() );\n \n-        importReport.setTrackerValidationReport( validationReport );\n+        TrackerBundleReportModeUtils.filter( importReport, params.getReportMode() );\n \n         if ( params.hasJobConfiguration() )\n         {\n-            notifier.update( params.getJobConfiguration(), message );\n+            notifier\n+                .update( params.getJobConfiguration(), \"(\" + params.getUsername() + \") Import:Done took \" + requestTimer, true );\n+\n+            notifier.addJobSummary( params.getJobConfiguration(), importReport, TrackerImportReport.class );\n         }\n \n-//        if ( !(!validationReport.isEmpty() && AtomicMode.ALL == params.getAtomicMode()) )\n-        if ( !validationReport.hasErrors() )\n-        {\n-            Timer commitTimer = new SystemTimer().start();\n+        return importReport;\n+    }\n+\n+    protected List<TrackerBundle> preheatBundle( TrackerImportParams params, TrackerImportReport importReport )\n+    {\n+        Timer preheatTimer = new SystemTimer().start();\n \n-            trackerBundles.forEach( tb ->\n-                importReport.getBundleReports().add( trackerBundleService.commit( tb ) ) );\n+        TrackerBundleParams bundleParams = params.toTrackerBundleParams();\n+        List<TrackerBundle> trackerBundles = trackerBundleService.create( bundleParams );\n \n-            if ( !importReport.isEmpty() )\n-            {\n-                importReport.setStatus( TrackerStatus.WARNING );\n-            }\n+        importReport.getTimings().setPreheat( preheatTimer.toString() );\n+        return trackerBundles;\n+    }\n \n-            String commitTimeFormatted = commitTimer.toString();\n-            message = \"(\" + params.getUsername() + \") Import:Commit took \" + commitTimeFormatted;\n-            log.info( message );\n+    protected void commitBundle( TrackerImportParams params, TrackerImportReport importReport,\n+        List<TrackerBundle> trackerBundles )\n+    {\n+        Timer commitTimer = new SystemTimer().start();\n \n-            importReport.getTimings().setCommit( commitTimeFormatted );\n+        trackerBundles.forEach( tb ->\n+            importReport.getBundleReports().add( trackerBundleService.commit( tb ) ) );\n \n-            if ( params.hasJobConfiguration() )\n-            {\n-                notifier.update( params.getJobConfiguration(), message );\n-            }\n+        if ( !importReport.isEmpty() )\n+        {\n+            importReport.setStatus( TrackerStatus.WARNING );\n         }\n-        else\n+\n+        importReport.getTimings().setCommit( commitTimer.toString() );\n+\n+        if ( params.hasJobConfiguration() )\n         {\n-            importReport.setStatus( TrackerStatus.ERROR );\n+            notifier.update( params.getJobConfiguration(),\n+                \"(\" + params.getUsername() + \") \" + \"Import:Commit took \" + commitTimer );\n         }\n+    }\n+\n+    protected TrackerValidationReport validateBundle( TrackerImportParams params, TrackerImportReport importReport,\n+        List<TrackerBundle> trackerBundles )\n+    {\n+        Timer validationTimer = new SystemTimer().start();\n \n-        String totalTimeFormatted = totalTimer.toString();\n-        message = \"(\" + params.getUsername() + \") Import:Done took \" + totalTimeFormatted;\n-        log.info( message );\n+        TrackerValidationReport validationReport = new TrackerValidationReport();\n \n-        importReport.getTimings().setTotalImport( totalTimeFormatted );\n+        // Do all the validation\n+        trackerBundles.forEach( tb ->\n+            validationReport.add( trackerValidationService.validate( tb ) ) );\n \n-//        params.getReportMode() -->\n-        TrackerBundleReportModeUtils.filter( importReport, TrackerBundleReportMode.FULL );\n+        importReport.getTimings().setValidation( validationTimer.toString() );\n+        importReport.setTrackerValidationReport( validationReport );\n \n         if ( params.hasJobConfiguration() )\n         {\n-            notifier.update( params.getJobConfiguration(), message, true );\n-            notifier.addJobSummary( params.getJobConfiguration(), importReport, TrackerImportReport.class );\n+            notifier\n+                .update( params.getJobConfiguration(), \"(\" + params.getUsername() + \") Import:Validation took \" + validationTimer );\n         }\n-\n-        return importReport;\n+        return validationReport;\n     }\n \n     @Override\n", "next_change": {"commit": "d2feae85e2920e2ecd5cce7d310e926ae797cd2c", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\nindex f3e443befe..91ee2ca9b1 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\n", "chunk": "@@ -177,7 +177,8 @@ public class DefaultTrackerImportService\n         if ( params.hasJobConfiguration() )\n         {\n             notifier\n-                .update( params.getJobConfiguration(), \"(\" + params.getUsername() + \") Import:Validation took \" + validationTimer );\n+                .update( params.getJobConfiguration(),\n+                    \"(\" + params.getUsername() + \") Import:Validation took \" + validationTimer );\n         }\n         return validationReport;\n     }\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\nindex 06ab14aa6f..91ee2ca9b1 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\n", "chunk": "@@ -86,94 +85,102 @@ public class DefaultTrackerImportService\n     }\n \n     @Override\n-    @Transactional\n     public TrackerImportReport importTracker( TrackerImportParams params )\n     {\n+        Timer requestTimer = new SystemTimer().start();\n+\n         params.setUser( getUser( params.getUser(), params.getUserId() ) );\n \n         TrackerImportReport importReport = new TrackerImportReport();\n \n-        Timer totalTimer = new SystemTimer().start();\n-        String message = \"(\" + params.getUsername() + \") Import:Start\";\n-        log.info( message );\n-\n         if ( params.hasJobConfiguration() )\n         {\n-            notifier.notify( params.getJobConfiguration(), message );\n+            notifier.notify( params.getJobConfiguration(), \"(\" + params.getUsername() + \") Import:Start\" );\n         }\n \n-        Timer preheatTimer = new SystemTimer().start();\n-\n-        TrackerBundleParams bundleParams = params.toTrackerBundleParams();\n-        List<TrackerBundle> trackerBundles = trackerBundleService.create( bundleParams );\n-\n-        importReport.getTimings().setPreheat( preheatTimer.toString() );\n-\n-        Timer validationTimer = new SystemTimer().start();\n+        List<TrackerBundle> trackerBundles = preheatBundle( params, importReport );\n \n-        TrackerValidationReport validationReport = new TrackerValidationReport();\n-\n-        trackerBundles.forEach( tb ->\n-            validationReport.add( trackerValidationService.validate( tb ) ) );\n+        TrackerValidationReport validationReport = validateBundle( params, importReport, trackerBundles );\n \n-        String validationTimeFormatted = validationTimer.toString();\n-        message = \"(\" + params.getUsername() + \") Import:Validation took \" + validationTimeFormatted;\n-        log.info( message );\n+        if ( validationReport.hasErrors() )\n+        {\n+            importReport.setStatus( TrackerStatus.ERROR );\n+        }\n+        else\n+        {\n+            commitBundle( params, importReport, trackerBundles );\n+        }\n \n-        importReport.getTimings().setValidation( validationTimeFormatted );\n+        importReport.getTimings().setTotalImport( requestTimer.toString() );\n \n-        importReport.setTrackerValidationReport( validationReport );\n+        TrackerBundleReportModeUtils.filter( importReport, params.getReportMode() );\n \n         if ( params.hasJobConfiguration() )\n         {\n-            notifier.update( params.getJobConfiguration(), message );\n+            notifier\n+                .update( params.getJobConfiguration(),\n+                    \"(\" + params.getUsername() + \") Import:Done took \" + requestTimer, true );\n+\n+            notifier.addJobSummary( params.getJobConfiguration(), importReport, TrackerImportReport.class );\n         }\n \n-//        if ( !(!validationReport.isEmpty() && AtomicMode.ALL == params.getAtomicMode()) )\n-        if ( !validationReport.hasErrors() )\n-        {\n-            Timer commitTimer = new SystemTimer().start();\n+        return importReport;\n+    }\n+\n+    protected List<TrackerBundle> preheatBundle( TrackerImportParams params, TrackerImportReport importReport )\n+    {\n+        Timer preheatTimer = new SystemTimer().start();\n \n-            trackerBundles.forEach( tb ->\n-                importReport.getBundleReports().add( trackerBundleService.commit( tb ) ) );\n+        TrackerBundleParams bundleParams = params.toTrackerBundleParams();\n+        List<TrackerBundle> trackerBundles = trackerBundleService.create( bundleParams );\n \n-            if ( !importReport.isEmpty() )\n-            {\n-                importReport.setStatus( TrackerStatus.WARNING );\n-            }\n+        importReport.getTimings().setPreheat( preheatTimer.toString() );\n+        return trackerBundles;\n+    }\n \n-            String commitTimeFormatted = commitTimer.toString();\n-            message = \"(\" + params.getUsername() + \") Import:Commit took \" + commitTimeFormatted;\n-            log.info( message );\n+    protected void commitBundle( TrackerImportParams params, TrackerImportReport importReport,\n+        List<TrackerBundle> trackerBundles )\n+    {\n+        Timer commitTimer = new SystemTimer().start();\n \n-            importReport.getTimings().setCommit( commitTimeFormatted );\n+        trackerBundles.forEach( tb ->\n+            importReport.getBundleReports().add( trackerBundleService.commit( tb ) ) );\n \n-            if ( params.hasJobConfiguration() )\n-            {\n-                notifier.update( params.getJobConfiguration(), message );\n-            }\n+        if ( !importReport.isEmpty() )\n+        {\n+            importReport.setStatus( TrackerStatus.WARNING );\n         }\n-        else\n+\n+        importReport.getTimings().setCommit( commitTimer.toString() );\n+\n+        if ( params.hasJobConfiguration() )\n         {\n-            importReport.setStatus( TrackerStatus.ERROR );\n+            notifier.update( params.getJobConfiguration(),\n+                \"(\" + params.getUsername() + \") \" + \"Import:Commit took \" + commitTimer );\n         }\n+    }\n+\n+    protected TrackerValidationReport validateBundle( TrackerImportParams params, TrackerImportReport importReport,\n+        List<TrackerBundle> trackerBundles )\n+    {\n+        Timer validationTimer = new SystemTimer().start();\n \n-        String totalTimeFormatted = totalTimer.toString();\n-        message = \"(\" + params.getUsername() + \") Import:Done took \" + totalTimeFormatted;\n-        log.info( message );\n+        TrackerValidationReport validationReport = new TrackerValidationReport();\n \n-        importReport.getTimings().setTotalImport( totalTimeFormatted );\n+        // Do all the validation\n+        trackerBundles.forEach( tb ->\n+            validationReport.add( trackerValidationService.validate( tb ) ) );\n \n-//        params.getReportMode() -->\n-        TrackerBundleReportModeUtils.filter( importReport, TrackerBundleReportMode.FULL );\n+        importReport.getTimings().setValidation( validationTimer.toString() );\n+        importReport.setTrackerValidationReport( validationReport );\n \n         if ( params.hasJobConfiguration() )\n         {\n-            notifier.update( params.getJobConfiguration(), message, true );\n-            notifier.addJobSummary( params.getJobConfiguration(), importReport, TrackerImportReport.class );\n+            notifier\n+                .update( params.getJobConfiguration(),\n+                    \"(\" + params.getUsername() + \") Import:Validation took \" + validationTimer );\n         }\n-\n-        return importReport;\n+        return validationReport;\n     }\n \n     @Override\n", "next_change": {"commit": "c2e0b3718cd8c7597ee5ec2e5193e7eafacf5827", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\nindex 91ee2ca9b1..e7047afffa 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\n", "chunk": "@@ -187,8 +218,10 @@ public class DefaultTrackerImportService\n     public TrackerImportParams getParamsFromMap( Map<String, List<String>> parameters )\n     {\n         TrackerImportParams params = new TrackerImportParams();\n-\n-        params.setUser( getUser( params.getUser(), params.getUserId() ) );\n+        if ( params.getUser() == null )\n+        {\n+            params.setUser( trackerUserService.getUser( params.getUserId() ) );\n+        }\n         params.setValidationMode( getEnumWithDefault( ValidationMode.class, parameters, \"validationMode\",\n             ValidationMode.FULL ) );\n         params.setImportMode(\n", "next_change": {"commit": "3e799d196b8f73ad216ea100a07ddd5f7dfc53e0", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\nindex e7047afffa..9568a3a230 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\n", "chunk": "@@ -218,10 +235,7 @@ public class DefaultTrackerImportService\n     public TrackerImportParams getParamsFromMap( Map<String, List<String>> parameters )\n     {\n         TrackerImportParams params = new TrackerImportParams();\n-        if ( params.getUser() == null )\n-        {\n-            params.setUser( trackerUserService.getUser( params.getUserId() ) );\n-        }\n+\n         params.setValidationMode( getEnumWithDefault( ValidationMode.class, parameters, \"validationMode\",\n             ValidationMode.FULL ) );\n         params.setImportMode(\n", "next_change": {"commit": "913d4ba468bf66783e901c4d43bd355d13cb16fa", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\nindex 9568a3a230..3e1f1e0472 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\n", "chunk": "@@ -231,111 +227,15 @@ public class DefaultTrackerImportService\n         return validationReport;\n     }\n \n-    @Override\n-    public TrackerImportParams getParamsFromMap( Map<String, List<String>> parameters )\n-    {\n-        TrackerImportParams params = new TrackerImportParams();\n-\n-        params.setValidationMode( getEnumWithDefault( ValidationMode.class, parameters, \"validationMode\",\n-            ValidationMode.FULL ) );\n-        params.setImportMode(\n-            getEnumWithDefault( TrackerBundleMode.class, parameters, \"importMode\", TrackerBundleMode.COMMIT ) );\n-        params.setIdentifiers( getTrackerIdentifiers( parameters ) );\n-        params.setImportStrategy( getEnumWithDefault( TrackerImportStrategy.class, parameters, \"importStrategy\",\n-            TrackerImportStrategy.CREATE_AND_UPDATE ) );\n-        params.setAtomicMode( getEnumWithDefault( AtomicMode.class, parameters, \"atomicMode\", AtomicMode.ALL ) );\n-        params.setFlushMode( getEnumWithDefault( FlushMode.class, parameters, \"flushMode\", FlushMode.AUTO ) );\n-\n-        return params;\n-    }\n-\n     @Override\n     public TrackerImportReport buildImportReport( TrackerImportReport importReport, TrackerBundleReportMode reportMode )\n     {\n         return importReport.copy( reportMode );\n     }\n \n-    //-----------------------------------------------------------------------------------\n-    // Utility Methods\n-    //-----------------------------------------------------------------------------------\n-\n-    private TrackerIdentifierParams getTrackerIdentifiers( Map<String, List<String>> parameters )\n-    {\n-        TrackerIdScheme idScheme = getEnumWithDefault( TrackerIdScheme.class, parameters, \"idScheme\",\n-            TrackerIdScheme.UID );\n-        TrackerIdScheme orgUnitIdScheme = getEnumWithDefault( TrackerIdScheme.class, parameters, \"orgUnitIdScheme\",\n-            idScheme );\n-        TrackerIdScheme programIdScheme = getEnumWithDefault( TrackerIdScheme.class, parameters, \"programIdScheme\",\n-            idScheme );\n-        TrackerIdScheme programStageIdScheme = getEnumWithDefault( TrackerIdScheme.class, parameters,\n-            \"programStageIdScheme\", idScheme );\n-        TrackerIdScheme dataElementIdScheme = getEnumWithDefault( TrackerIdScheme.class, parameters,\n-            \"dataElementIdScheme\", idScheme );\n-\n-        return TrackerIdentifierParams.builder()\n-            .idScheme( TrackerIdentifier.builder().idScheme( idScheme )\n-                .value( getAttributeUidOrNull( parameters, \"idScheme\" ) ).build() )\n-            .orgUnitIdScheme( TrackerIdentifier.builder().idScheme( orgUnitIdScheme )\n-                .value( getAttributeUidOrNull( parameters, \"orgUnitIdScheme\" ) ).build() )\n-            .programIdScheme( TrackerIdentifier.builder().idScheme( programIdScheme )\n-                .value( getAttributeUidOrNull( parameters, \"programIdScheme\" ) ).build() )\n-            .programStageIdScheme( TrackerIdentifier.builder().idScheme( programStageIdScheme )\n-                .value( getAttributeUidOrNull( parameters, \"programStageIdScheme\" ) ).build() )\n-            .dataElementIdScheme( TrackerIdentifier.builder().idScheme( dataElementIdScheme )\n-                .value( getAttributeUidOrNull( parameters, \"dataElementIdScheme\" ) ).build() )\n-            .build();\n-    }\n-\n-    private <T extends Enum<T>> T getEnumWithDefault( Class<T> enumKlass, Map<String, List<String>> parameters,\n-        String key, T defaultValue )\n-    {\n-        if ( parameters == null || parameters.get( key ) == null || parameters.get( key ).isEmpty() )\n-        {\n-            return defaultValue;\n-        }\n-\n-        if ( TrackerIdScheme.class.equals( enumKlass ) && IdScheme.isAttribute( parameters.get( key ).get( 0 ) ) )\n-        {\n-            return Enums.getIfPresent( enumKlass, \"ATTRIBUTE\" ).orNull();\n-        }\n-\n-        String value = String.valueOf( parameters.get( key ).get( 0 ) );\n-\n-        return Enums.getIfPresent( enumKlass, value ).or( defaultValue );\n-    }\n-\n-    private String getAttributeUidOrNull( Map<String, List<String>> parameters, String key )\n-    {\n-        if ( parameters == null || parameters.get( key ) == null || parameters.get( key ).isEmpty() )\n-        {\n-            return null;\n-        }\n-\n-        if ( IdScheme.isAttribute( parameters.get( key ).get( 0 ) ) )\n-        {\n-            String uid = \"\";\n-\n-            // Get second half of string, separated by ':'\n-            String[] splitParam = parameters.get( key ).get( 0 ).split( \":\" );\n-\n-            if ( splitParam.length > 1 )\n-            {\n-                uid = splitParam[1];\n-            }\n-\n-            if ( CodeGenerator.isValidUid( uid ) )\n-            {\n-                return uid;\n-            }\n-        }\n-\n-        return null;\n-    }\n-    \n     @AllArgsConstructor\n     static class ImportNotifier\n     {\n-\n         private Notifier notifier;\n \n         private TrackerImportParams params;\n", "next_change": {"commit": "d3babd17c47704fd61fb23a664d8e88264bbcff0", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\ndeleted file mode 100644\nindex 3e1f1e0472..0000000000\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\n+++ /dev/null\n", "chunk": "@@ -1,280 +0,0 @@\n-package org.hisp.dhis.tracker;\n-\n-/*\n- * Copyright (c) 2004-2020, University of Oslo\n- * All rights reserved.\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions are met:\n- * Redistributions of source code must retain the above copyright notice, this\n- * list of conditions and the following disclaimer.\n- *\n- * Redistributions in binary form must reproduce the above copyright notice,\n- * this list of conditions and the following disclaimer in the documentation\n- * and/or other materials provided with the distribution.\n- * Neither the name of the HISP project nor the names of its contributors may\n- * be used to endorse or promote products derived from this software without\n- * specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n- * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n- * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n- * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n- * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n- * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n- * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- */\n-\n-import static org.hisp.dhis.tracker.report.TrackerTimingsStats.COMMIT_OPS;\n-import static org.hisp.dhis.tracker.report.TrackerTimingsStats.PREHEAT_OPS;\n-import static org.hisp.dhis.tracker.report.TrackerTimingsStats.PROGRAMRULE_OPS;\n-import static org.hisp.dhis.tracker.report.TrackerTimingsStats.TOTAL_OPS;\n-import static org.hisp.dhis.tracker.report.TrackerTimingsStats.VALIDATION_OPS;\n-\n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Optional;\n-import java.util.stream.Collectors;\n-import java.util.stream.Stream;\n-\n-import org.hisp.dhis.system.notification.Notifier;\n-import org.hisp.dhis.tracker.bundle.TrackerBundle;\n-import org.hisp.dhis.tracker.bundle.TrackerBundleService;\n-import org.hisp.dhis.tracker.job.TrackerSideEffectDataBundle;\n-import org.hisp.dhis.tracker.preprocess.TrackerPreprocessService;\n-import org.hisp.dhis.tracker.report.TrackerBundleReport;\n-import org.hisp.dhis.tracker.report.TrackerImportReport;\n-import org.hisp.dhis.tracker.report.TrackerStatus;\n-import org.hisp.dhis.tracker.report.TrackerTimingsStats;\n-import org.hisp.dhis.tracker.report.TrackerTypeReport;\n-import org.hisp.dhis.tracker.report.TrackerValidationReport;\n-import org.hisp.dhis.tracker.validation.TrackerValidationService;\n-import org.springframework.stereotype.Service;\n-\n-import com.google.common.collect.ImmutableMap;\n-\n-import lombok.AllArgsConstructor;\n-import lombok.NonNull;\n-import lombok.RequiredArgsConstructor;\n-import lombok.extern.slf4j.Slf4j;\n-\n-/**\n- * @author Morten Olav Hansen <mortenoh@gmail.com>\n- */\n-@Service\n-@Slf4j\n-@RequiredArgsConstructor\n-public class DefaultTrackerImportService\n-    implements TrackerImportService\n-{\n-    @NonNull private final TrackerBundleService trackerBundleService;\n-\n-    @NonNull private final TrackerValidationService trackerValidationService;\n-\n-    @NonNull private final TrackerPreprocessService trackerPreprocessService;\n-\n-    @NonNull private final TrackerUserService trackerUserService;\n-\n-    @NonNull private final Notifier notifier;\n-\n-    @Override\n-    public TrackerImportReport importTracker( TrackerImportParams params )\n-    {\n-        params.setUser( trackerUserService.getUser( params.getUserId() ) );\n-\n-        // Init the Notifier\n-        ImportNotifier notifier = new ImportNotifier( this.notifier, params );\n-\n-        // Keeps track of the elapsed time of each Import stage\n-        TrackerTimingsStats opsTimer = new TrackerTimingsStats();\n-\n-        notifier.startImport();\n-\n-        TrackerValidationReport validationReport = null;\n-\n-        TrackerBundleReport bundleReport;\n-\n-        try\n-        {\n-            //\n-            // pre-heat\n-            //\n-            TrackerBundle trackerBundle = opsTimer.exec( PREHEAT_OPS,\n-                () -> preheatBundle( params ) );\n-\n-            Map<TrackerType, Integer> bundleSize = calculatePayloadSize( trackerBundle );\n-\n-            //\n-            // preprocess\n-            //\n-            opsTimer.execVoid( PROGRAMRULE_OPS,\n-                () -> preProcessBundle( trackerBundle ) );\n-\n-            //\n-            // validate\n-            //\n-            validationReport = opsTimer.exec( VALIDATION_OPS,\n-                () -> validateBundle( trackerBundle ) );\n-\n-            notifier.notifyOps( VALIDATION_OPS, opsTimer );\n-\n-\n-            if ( validationReport.hasErrors() && params.getAtomicMode() == AtomicMode.ALL )\n-            {\n-                TrackerImportReport trackerImportReport = TrackerImportReport\n-                    .withValidationErrors( validationReport, opsTimer.stopTimer(),\n-                        bundleSize.values().stream().mapToInt( Integer::intValue ).sum() );\n-\n-                notifier.endImport( trackerImportReport );\n-\n-                return trackerImportReport;\n-            }\n-            else\n-            {\n-                if ( TrackerImportStrategy.DELETE == params.getImportStrategy() )\n-                {\n-                    bundleReport = opsTimer.exec( COMMIT_OPS, () -> deleteBundle( trackerBundle) );\n-                }\n-                else\n-                {\n-                    bundleReport = opsTimer.exec( COMMIT_OPS, () -> commitBundle( trackerBundle) );\n-                }\n-\n-                notifier.notifyOps( COMMIT_OPS, opsTimer );\n-\n-                TrackerImportReport trackerImportReport = TrackerImportReport.withImportCompleted( TrackerStatus.OK,\n-                    bundleReport, validationReport,\n-                    opsTimer.stopTimer(), bundleSize );\n-\n-                notifier.endImport( trackerImportReport );\n-\n-                return trackerImportReport;\n-            }\n-        }\n-        catch ( Exception e )\n-        {\n-            log.error( \"Exception thrown during import.\", e );\n-\n-            TrackerImportReport report = TrackerImportReport.withError( \"Exception:\" + e.getMessage(),\n-                validationReport, opsTimer.stopTimer() );\n-\n-            notifier.endImportWithError( report, e );\n-\n-            return report;\n-        }\n-    }\n-\n-    private Map<TrackerType, Integer> calculatePayloadSize( TrackerBundle bundle )\n-    {\n-        return ImmutableMap.<TrackerType, Integer> builder()\n-            .put( TrackerType.TRACKED_ENTITY, bundle.getTrackedEntities().size() )\n-            .put( TrackerType.ENROLLMENT, bundle.getEnrollments().size() )\n-            .put( TrackerType.EVENT, bundle.getEvents().size() )\n-            .put( TrackerType.RELATIONSHIP, bundle.getRelationships().size() ).build();\n-    }\n-\n-    protected TrackerBundle preheatBundle( TrackerImportParams params )\n-    {\n-        return  trackerBundleService.create( params );\n-    }\n-\n-    protected void preProcessBundle( TrackerBundle bundle )\n-    {\n-        TrackerBundle trackerBundle = trackerBundleService.runRuleEngine( bundle );\n-        trackerPreprocessService.preprocess( trackerBundle );\n-    }\n-\n-    protected TrackerBundleReport commitBundle( TrackerBundle trackerBundle )\n-    {\n-        TrackerBundleReport bundleReport = trackerBundleService.commit( trackerBundle );\n-\n-        List<TrackerSideEffectDataBundle> sideEffectDataBundles = Stream.of( TrackerType.ENROLLMENT, TrackerType.EVENT )\n-            .map( trackerType -> safelyGetSideEffectsDataBundles( bundleReport, trackerType ) )\n-            .flatMap( Collection::stream )\n-            .collect( Collectors.toList() );\n-\n-        trackerBundleService.handleTrackerSideEffects( sideEffectDataBundles );\n-\n-        return bundleReport;\n-    }\n-\n-    List<TrackerSideEffectDataBundle> safelyGetSideEffectsDataBundles( TrackerBundleReport bundleReport,\n-        TrackerType trackerType )\n-    {\n-        return Optional.ofNullable( bundleReport )\n-            .map( TrackerBundleReport::getTypeReportMap )\n-            .map( reportMap -> reportMap.get( trackerType ) )\n-            .map( TrackerTypeReport::getSideEffectDataBundles )\n-            .orElse( Collections.emptyList() );\n-    }\n-\n-    protected TrackerBundleReport deleteBundle( TrackerBundle trackerBundle )\n-    {\n-        return trackerBundleService.delete( trackerBundle );\n-    }\n-\n-    protected TrackerValidationReport validateBundle( TrackerBundle trackerBundle )\n-    {\n-        TrackerValidationReport validationReport = new TrackerValidationReport();\n-\n-        validationReport.add( trackerValidationService.validate( trackerBundle ) );\n-        \n-        return validationReport;\n-    }\n-\n-    @Override\n-    public TrackerImportReport buildImportReport( TrackerImportReport importReport, TrackerBundleReportMode reportMode )\n-    {\n-        return importReport.copy( reportMode );\n-    }\n-\n-    @AllArgsConstructor\n-    static class ImportNotifier\n-    {\n-        private Notifier notifier;\n-\n-        private TrackerImportParams params;\n-\n-        public void startImport()\n-        {\n-            notifier.notify( params.getJobConfiguration(), \"(\" + params.getUsername() + \") Import:Start\" );\n-        }\n-\n-        public void notifyOps( String validationOps, TrackerTimingsStats opsTimer )\n-        {\n-\n-            if ( params.hasJobConfiguration() )\n-            {\n-                notifier\n-                    .update( params.getJobConfiguration(),\n-                        \"(\" + params.getUsername() + \") Import:\" + validationOps + \" took \"\n-                            + opsTimer.get( validationOps ) );\n-            }\n-        }\n-\n-        public void endImport( TrackerImportReport importReport )\n-        {\n-            if ( params.hasJobConfiguration() )\n-            {\n-                notifier.update( params.getJobConfiguration(), \"(\" + params.getUsername() + \") Import:Done took \" +\n-                    importReport.getTimingsStats().get( TOTAL_OPS ), true );\n-\n-                notifier.addJobSummary( params.getJobConfiguration(), importReport, TrackerImportReport.class );\n-            }\n-        }\n-\n-        public void endImportWithError( TrackerImportReport importReport, Exception e) {\n-\n-            if ( params.hasJobConfiguration() )\n-            {\n-                notifier.update( params.getJobConfiguration(), \"(\" + params.getUsername() + \") Import:Failed with exception: \" + e.getMessage(), true );\n-                notifier.addJobSummary( params.getJobConfiguration(), importReport, TrackerImportReport.class );\n-            }\n-        }\n-    }\n-}\n", "next_change": {"commit": "43725fed360d23cefb272443d6b3cf36cb72ff74", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\nnew file mode 100644\nindex 0000000000..6ff6031dee\n--- /dev/null\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\n", "chunk": "@@ -0,0 +1,395 @@\n+/*\n+ * Copyright (c) 2004-2022, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package org.hisp.dhis.tracker;\n+\n+import static org.hisp.dhis.tracker.report.TimingsStats.COMMIT_OPS;\n+import static org.hisp.dhis.tracker.report.TimingsStats.PREHEAT_OPS;\n+import static org.hisp.dhis.tracker.report.TimingsStats.PREPROCESS_OPS;\n+import static org.hisp.dhis.tracker.report.TimingsStats.PROGRAMRULE_OPS;\n+import static org.hisp.dhis.tracker.report.TimingsStats.TOTAL_OPS;\n+import static org.hisp.dhis.tracker.report.TimingsStats.VALIDATE_PROGRAMRULE_OPS;\n+import static org.hisp.dhis.tracker.report.TimingsStats.VALIDATION_OPS;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import javax.annotation.Nonnull;\n+\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import org.hisp.dhis.system.notification.NotificationLevel;\n+import org.hisp.dhis.system.notification.Notifier;\n+import org.hisp.dhis.tracker.bundle.TrackerBundle;\n+import org.hisp.dhis.tracker.bundle.TrackerBundleService;\n+import org.hisp.dhis.tracker.job.TrackerSideEffectDataBundle;\n+import org.hisp.dhis.tracker.preprocess.TrackerPreprocessService;\n+import org.hisp.dhis.tracker.report.ImportReport;\n+import org.hisp.dhis.tracker.report.PersistenceReport;\n+import org.hisp.dhis.tracker.report.Status;\n+import org.hisp.dhis.tracker.report.TimingsStats;\n+import org.hisp.dhis.tracker.report.TrackerTypeReport;\n+import org.hisp.dhis.tracker.report.ValidationReport;\n+import org.hisp.dhis.tracker.validation.ValidationResult;\n+import org.hisp.dhis.tracker.validation.ValidationService;\n+import org.hisp.dhis.user.User;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+/**\n+ * @author Morten Olav Hansen <mortenoh@gmail.com>\n+ */\n+@Service\n+@Slf4j\n+@RequiredArgsConstructor\n+public class DefaultTrackerImportService\n+    implements TrackerImportService\n+{\n+    @Nonnull\n+    private final TrackerBundleService trackerBundleService;\n+\n+    @Nonnull\n+    private final ValidationService validationService;\n+\n+    @Nonnull\n+    private final TrackerPreprocessService trackerPreprocessService;\n+\n+    @Nonnull\n+    private final TrackerUserService trackerUserService;\n+\n+    @Nonnull\n+    private final Notifier notifier;\n+\n+    @Override\n+    @Transactional\n+    public ImportReport importTracker( TrackerImportParams params )\n+    {\n+        User user = trackerUserService.getUser( params.getUserId() );\n+        params.setUser( user );\n+\n+        TimingsStats opsTimer = new TimingsStats();\n+\n+        startImport( params );\n+\n+        try\n+        {\n+            TrackerBundle trackerBundle = preHeat( params, opsTimer );\n+\n+            Map<TrackerType, Integer> bundleSize = calculatePayloadSize( trackerBundle );\n+\n+            preProcess( opsTimer, trackerBundle );\n+\n+            ValidationReport validationReport = validate( params, opsTimer, trackerBundle );\n+\n+            if ( exitOnError( validationReport, params ) )\n+            {\n+                return buildReportAndNotify( params, validationReport, opsTimer, bundleSize );\n+            }\n+\n+            PersistenceReport persistenceReport = commit( params, opsTimer, trackerBundle );\n+\n+            postCommit( trackerBundle );\n+\n+            ImportReport importReport = ImportReport.withImportCompleted(\n+                Status.OK,\n+                persistenceReport, validationReport,\n+                opsTimer.stopTimer(), bundleSize );\n+\n+            endImport( params, importReport );\n+\n+            return importReport;\n+        }\n+        catch ( Exception e )\n+        {\n+            log.error( \"Exception thrown during import.\", e );\n+\n+            ImportReport report = ImportReport.withError( \"Exception:\" + e.getMessage(),\n+                ValidationReport.emptyReport(), opsTimer.stopTimer() );\n+\n+            endImportWithError( params, report, e );\n+\n+            return report;\n+        }\n+    }\n+\n+    private TrackerBundle preHeat( TrackerImportParams params, TimingsStats opsTimer )\n+    {\n+        TrackerBundle trackerBundle = opsTimer.exec( PREHEAT_OPS,\n+            () -> preheatBundle( params ) );\n+\n+        notifyOps( params, PREHEAT_OPS, opsTimer );\n+\n+        return trackerBundle;\n+    }\n+\n+    private void preProcess( TimingsStats opsTimer, TrackerBundle trackerBundle )\n+    {\n+        opsTimer.execVoid( PREPROCESS_OPS,\n+            () -> preProcessBundle( trackerBundle ) );\n+    }\n+\n+    private ValidationReport validate( TrackerImportParams params, TimingsStats opsTimer, TrackerBundle trackerBundle )\n+    {\n+        ValidationResult validationResult = opsTimer.exec( VALIDATION_OPS,\n+            () -> validateBundle( params, trackerBundle, opsTimer ) );\n+\n+        if ( !trackerBundle.isSkipRuleEngine() && !params.getImportStrategy().isDelete() )\n+        {\n+            ValidationResult ruleEnginevalidationResult = execRuleEngine( params, opsTimer, trackerBundle );\n+\n+            return ValidationReport.merge( validationResult, ruleEnginevalidationResult );\n+        }\n+\n+        return ValidationReport.fromResult( validationResult );\n+    }\n+\n+    private PersistenceReport commit( TrackerImportParams params, TimingsStats opsTimer,\n+        TrackerBundle trackerBundle )\n+    {\n+        PersistenceReport persistenceReport;\n+        if ( TrackerImportStrategy.DELETE == params.getImportStrategy() )\n+        {\n+            persistenceReport = opsTimer.exec( COMMIT_OPS, () -> deleteBundle( trackerBundle ) );\n+        }\n+        else\n+        {\n+            persistenceReport = opsTimer.exec( COMMIT_OPS, () -> commitBundle( trackerBundle ) );\n+        }\n+\n+        notifyOps( params, COMMIT_OPS, opsTimer );\n+        return persistenceReport;\n+    }\n+\n+    private void postCommit( TrackerBundle trackerBundle )\n+    {\n+        trackerBundleService.postCommit( trackerBundle );\n+    }\n+\n+    protected ValidationResult validateBundle( TrackerImportParams params, TrackerBundle bundle,\n+        TimingsStats opsTimer )\n+    {\n+        ValidationResult result = validationService.validate( bundle );\n+        bundle.setTrackedEntities( result.getTrackedEntities() );\n+        bundle.setEnrollments( result.getEnrollments() );\n+        bundle.setEvents( result.getEvents() );\n+        bundle.setRelationships( result.getRelationships() );\n+\n+        notifyOps( params, VALIDATION_OPS, opsTimer );\n+\n+        return result;\n+    }\n+\n+    private ValidationResult execRuleEngine( TrackerImportParams params, TimingsStats opsTimer,\n+        TrackerBundle bundle )\n+    {\n+        opsTimer.execVoid( PROGRAMRULE_OPS,\n+            () -> trackerBundleService.runRuleEngine( bundle ) );\n+\n+        notifyOps( params, PROGRAMRULE_OPS, opsTimer );\n+\n+        ValidationResult result = opsTimer.exec( VALIDATE_PROGRAMRULE_OPS,\n+            () -> validationService.validateRuleEngine( bundle ) );\n+        bundle.setTrackedEntities( result.getTrackedEntities() );\n+        bundle.setEnrollments( result.getEnrollments() );\n+        bundle.setEvents( result.getEvents() );\n+        bundle.setRelationships( result.getRelationships() );\n+\n+        notifyOps( params, VALIDATE_PROGRAMRULE_OPS, opsTimer );\n+\n+        return result;\n+    }\n+\n+    private ImportReport buildReportAndNotify( TrackerImportParams params,\n+        ValidationReport validationReport,\n+        TimingsStats opsTimer, Map<TrackerType, Integer> bundleSize )\n+    {\n+        ImportReport importReport = ImportReport.withValidationErrors( validationReport,\n+            opsTimer.stopTimer(),\n+            bundleSize.values().stream().mapToInt( Integer::intValue ).sum() );\n+\n+        endImport( params, importReport );\n+\n+        return importReport;\n+    }\n+\n+    private boolean exitOnError( ValidationReport validationReport, TrackerImportParams params )\n+    {\n+        return validationReport.hasErrors() && params.getAtomicMode() == AtomicMode.ALL;\n+    }\n+\n+    private Map<TrackerType, Integer> calculatePayloadSize( TrackerBundle bundle )\n+    {\n+        return Map.of(\n+            TrackerType.TRACKED_ENTITY, bundle.getTrackedEntities().size(),\n+            TrackerType.ENROLLMENT, bundle.getEnrollments().size(),\n+            TrackerType.EVENT, bundle.getEvents().size(),\n+            TrackerType.RELATIONSHIP, bundle.getRelationships().size() );\n+    }\n+\n+    protected TrackerBundle preheatBundle( TrackerImportParams params )\n+    {\n+        return trackerBundleService.create( params );\n+    }\n+\n+    protected void preProcessBundle( TrackerBundle bundle )\n+    {\n+        trackerPreprocessService.preprocess( bundle );\n+    }\n+\n+    protected PersistenceReport commitBundle( TrackerBundle trackerBundle )\n+    {\n+        PersistenceReport persistenceReport = trackerBundleService.commit( trackerBundle );\n+\n+        if ( !trackerBundle.isSkipSideEffects() )\n+        {\n+            List<TrackerSideEffectDataBundle> sideEffectDataBundles = Stream\n+                .of( TrackerType.ENROLLMENT, TrackerType.EVENT )\n+                .map( trackerType -> safelyGetSideEffectsDataBundles( persistenceReport, trackerType ) )\n+                .flatMap( Collection::stream )\n+                .collect( Collectors.toList() );\n+\n+            trackerBundleService.handleTrackerSideEffects( sideEffectDataBundles );\n+        }\n+\n+        return persistenceReport;\n+    }\n+\n+    private List<TrackerSideEffectDataBundle> safelyGetSideEffectsDataBundles( PersistenceReport persistenceReport,\n+        TrackerType trackerType )\n+    {\n+        return Optional.ofNullable( persistenceReport )\n+            .map( PersistenceReport::getTypeReportMap )\n+            .map( reportMap -> reportMap.get( trackerType ) )\n+            .map( TrackerTypeReport::getSideEffectDataBundles )\n+            .orElse( Collections.emptyList() );\n+    }\n+\n+    protected PersistenceReport deleteBundle( TrackerBundle trackerBundle )\n+    {\n+        return trackerBundleService.delete( trackerBundle );\n+    }\n+\n+    private void startImport( TrackerImportParams params )\n+    {\n+        if ( null != params.getJobConfiguration() )\n+        {\n+            notifier.notify( params.getJobConfiguration(),\n+                params.userStartInfo() + \" Import:Start\" );\n+        }\n+    }\n+\n+    private void notifyOps( TrackerImportParams params, String validationOps, TimingsStats opsTimer )\n+    {\n+        if ( null != params.getJobConfiguration() )\n+        {\n+            notifier\n+                .update( params.getJobConfiguration(), NotificationLevel.DEBUG,\n+                    params +\n+                        validationOps + \" completed in \"\n+                        + opsTimer.get( validationOps ) + \" Import:\"\n+                        + validationOps );\n+        }\n+    }\n+\n+    private void endImport( TrackerImportParams params, ImportReport importReport )\n+    {\n+        if ( null != params.getJobConfiguration() )\n+        {\n+            notifier.update( params.getJobConfiguration(),\n+                params +\n+                    \" finished in \" +\n+                    importReport.getTimingsStats().get( TOTAL_OPS ) + \" Import:Done\",\n+                true );\n+\n+            if ( params.getJobConfiguration().isInMemoryJob() )\n+            {\n+                notifier.addJobSummary( params.getJobConfiguration(), importReport, ImportReport.class );\n+            }\n+        }\n+    }\n+\n+    private void endImportWithError( TrackerImportParams params, ImportReport importReport, Exception e )\n+    {\n+        if ( null != params.getJobConfiguration() && params.getJobConfiguration().isInMemoryJob() )\n+        {\n+            notifier.update( params.getJobConfiguration(), NotificationLevel.ERROR,\n+                params +\n+                    \" failed with exception: \"\n+                    + e.getMessage() + \" Import:Error\",\n+                true );\n+\n+            if ( params.getJobConfiguration().isInMemoryJob() )\n+            {\n+                notifier.addJobSummary( params.getJobConfiguration(), importReport, ImportReport.class );\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Clone the TrackerImportReport and filters out validation data based on\n+     * the provided {@link PersistenceReport}.\n+     *\n+     * @return a copy of the current TrackerImportReport\n+     */\n+    @Override\n+    public ImportReport buildImportReport( ImportReport originalImportReport,\n+        TrackerBundleReportMode reportMode )\n+    {\n+        ImportReport.ImportReportBuilder importReportBuilder = ImportReport.builder()\n+            .status( originalImportReport.getStatus() )\n+            .stats( originalImportReport.getStats() )\n+            .persistenceReport( originalImportReport.getPersistenceReport() )\n+            .message( originalImportReport.getMessage() );\n+\n+        ValidationReport originalValidationReport = originalImportReport.getValidationReport();\n+        ValidationReport validationReport = ValidationReport.emptyReport();\n+        if ( originalValidationReport != null )\n+        {\n+            validationReport.addErrors( originalValidationReport.getErrors() );\n+        }\n+        if ( originalValidationReport != null && TrackerBundleReportMode.WARNINGS == reportMode )\n+        {\n+            validationReport.addWarnings( originalValidationReport.getWarnings() );\n+        }\n+        else if ( originalValidationReport != null && TrackerBundleReportMode.FULL == reportMode )\n+        {\n+            validationReport\n+                .addWarnings( originalValidationReport.getWarnings() );\n+            importReportBuilder.timingsStats( originalImportReport.getTimingsStats() );\n+        }\n+\n+        importReportBuilder.validationReport( validationReport );\n+\n+        return importReportBuilder.build();\n+    }\n+}\n", "next_change": null}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "message": "Merge commit", "committedDate": null}, {"oid": "399526882c2fbbf5600922b3c3b6030420cf4e96", "committedDate": "2020-07-13 12:23:07 +0200", "message": "feat: Run rule engine rules in new importer [DHIS2-7310]"}, {"oid": "2ed799f33ca26b918ed60473a3f097714f00492e", "committedDate": "2020-08-04 10:30:01 +0200", "message": "chore: Clean up code (#5877)"}, {"oid": "8374cb43e422eddc1f4c01bb715d8d285acc37be", "committedDate": "2020-08-10 11:38:43 +0200", "message": "Merge remote-tracking branch 'origin/master' into DHIS2-7310-merge"}, {"oid": "b010ab69f5dfb7b5ea0a5cfd438c1d7ebf3275de", "committedDate": "2020-08-24 14:13:32 +0200", "message": "fix: Implement atomic mode OBJECTS to commit only valid DTOs (#5958)"}, {"oid": "82a863c258aa34e592b309bb9d6081c4dc8f981b", "committedDate": "2020-08-27 14:46:58 +0200", "message": "feat: Add support for deletion of tracker objects [DHIS2-9085] (#5959)"}, {"oid": "cb2ee65c0210c0d4b2bd8851789da8d4adfaf04d", "committedDate": "2020-09-07 10:28:21 +0200", "message": "fix: [DHIS2-9287] Fix the stats in the import summary (#6062)"}, {"oid": "c2e0b3718cd8c7597ee5ec2e5193e7eafacf5827", "committedDate": "2020-09-08 09:47:19 +0200", "message": "fix: prevent Hibernate session errors with User object (#6063)"}, {"oid": "0d35843121f0ad3004fad015f1520c5b06a5c337", "committedDate": "2020-09-15 09:24:33 +0200", "message": "Merge 2.35 into master (#6149)"}, {"oid": "20ae7d1ed19072116ee92e47a760e281039159ce", "committedDate": "2020-09-15 11:32:35 +0200", "message": "fix: [DHIS2-9428] Use report mode parameter to filter report data (#6122)"}, {"oid": "8aaeab2ee4dd7a9ffa927147931dff8609ef787a", "committedDate": "2020-09-23 15:33:34 +0200", "message": "chore: Remove unused imports (#6219)"}, {"oid": "87ef26080354e452d282d374e4dc6de996844a1c", "committedDate": "2020-10-02 09:53:53 +0200", "message": "test: Add integration tests for tracker side effects (#5833)"}, {"oid": "0208c5478719a64f691e4255b6d839bc95200fb4", "committedDate": "2020-10-23 10:03:41 +0200", "message": "fix: [DHIS2-9817] [DHIS2-9825] serialization and deserialization of TrackerImportReport and excception handling (2.36) (#6473)"}, {"oid": "3934daf1873ee7d70faa0058706c2409575865e5", "committedDate": "2020-10-23 12:21:16 +0200", "message": "fix: [DHIS2-9428] Made ERRORS as default reportMode and stats returned correctly (2.36) (#6477)"}, {"oid": "695641b3509e973bf6cf9fd631d2641e55eeeff4", "committedDate": "2020-10-23 14:47:30 +0200", "message": "fix: [DHIS2-9286] handled exception messages filtered out in final report (2.36) (#6478)"}, {"oid": "0e72ebff22211397a74a8a6aa539bb2f19351370", "committedDate": "2020-10-29 15:26:27 +0100", "message": "fix: Fix lazy initialisation exceptions (#6520)"}, {"oid": "9d25538a10eb27d9dd38aca54900dd84a02b5897", "committedDate": "2020-11-09 12:23:56 +0100", "message": "fix: DHIS2-9855 fixing NPE (#6588)"}, {"oid": "6e28dbfdaea7ceacbe560fe82ddba1e94c6cd203", "committedDate": "2020-11-11 17:41:55 +0100", "message": "fix: Exception when importing TEI with relationship [DHIS2-9856] (#6552)"}, {"oid": "ba02f7daf7dbd5125f1b0215bcc9b25649d32a68", "committedDate": "2020-11-12 15:53:58 +0100", "message": "fix: Use same timers for report and logs (#6642)"}, {"oid": "1f0559c94f01b1497116fe5ba2e19f28f072a879", "committedDate": "2020-11-23 09:21:47 +0100", "message": "fix: invalid ignore count in Tracker Import stats (#6721)"}, {"oid": "89451b9b46d62bfc853b0ed26b6ec266771f3d58", "committedDate": "2020-11-23 10:57:11 +0100", "message": "fix: add report when validation failed a (#6738)"}, {"oid": "641aca580898b88dd99837fe8b5e0639027c6e0e", "committedDate": "2020-11-24 08:24:42 +0100", "message": "fix: Import report ignore values on stats objects (#6745)"}, {"oid": "3e799d196b8f73ad216ea100a07ddd5f7dfc53e0", "committedDate": "2020-11-30 16:37:14 +0100", "message": "fix: remove long running transaction during Tracker Import (#6782)"}, {"oid": "913d4ba468bf66783e901c4d43bd355d13cb16fa", "committedDate": "2020-12-02 16:44:17 +0100", "message": "refactor: Tracker Import params creation (#6814)"}, {"oid": "3ab88a5f4623a8c749246bedef34fcb926d185cb", "committedDate": "2020-12-08 10:40:14 +0100", "message": "fix: [DHIS2-7310] Move rule engine call and validations after bundle validation (#6843)"}, {"oid": "c4f1db1dab576bc73489a9e0a6d015acec2eab5b", "committedDate": "2020-12-15 15:09:02 +0100", "message": "feat: Tracker Import metadata cache (#6877)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "74425bc0f9d76839b6aafd0a8573f0d3d0464446", "committedDate": "2021-01-20 10:08:21 +0100", "message": "fix: Add skipSideEffects flag for new tracker importer"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "d3babd17c47704fd61fb23a664d8e88264bbcff0", "committedDate": "2021-02-15 16:32:19 +0100", "message": "fix: Dhis2 10432 (#7347)"}, {"oid": "f83b6227cef05563252d258a1050a8bd57c70018", "committedDate": "2021-12-07 16:41:41 +0100", "message": "chore: place default TrackerImportService next to interface (#9371)"}, {"oid": "242e8d7cc2a94f328778c2fbad9005509c5b3360", "committedDate": "2021-12-21 13:35:53 +0100", "message": "chore: simplify tracker import validation TECH-880 (#9510)"}, {"oid": "8bd63f9823397e39458bd1cdab383c33c3231019", "committedDate": "2021-12-22 09:32:29 +0100", "message": "chore: move factory methods into class it creates TECH-880 (#9518)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "1c6c72cc7c172b2a5708fb662e588b797d525a55", "committedDate": "2022-01-11 15:55:54 +0100", "message": "chore: bring TrackerValidationReport closer to ValidationErrorReporter TECH-880 (#9595)"}, {"oid": "7c0131dfcfbf72dad27dc5f0a3f6a776e286c79a", "committedDate": "2022-01-11 17:47:56 +0100", "message": "chore: make TrackerValidationReport add methods fluent and name Timing TECH-880 (#9601)"}, {"oid": "8ccf9a288a67e5ee5349024fd3d281372c64c956", "committedDate": "2022-02-22 13:25:35 +0800", "message": "feat: Merge User/UserCredentials into one DB table (#9754)"}, {"oid": "d99da048b6427aa16b080ab0a0e25eda4a2a0f96", "committedDate": "2022-05-09 13:53:18 +0200", "message": "feat: Refactor getCurrentUser() to return DHIS2 User object 2 (#10600)"}, {"oid": "2886ebea404331a2c3f78909bcb92cca1ecc7913", "committedDate": "2022-10-12 09:39:22 +0200", "message": "chore: only use @Nonnull and ban similar annotations (#12071)"}, {"oid": "8bd34731a22250d0a8166442ecad89d00c926ccf", "committedDate": "2022-12-12 17:11:18 +0100", "message": "chore: Cleanup tracker reporter (#12501)"}, {"oid": "e4b9a5c802805b26fe8255711d1f98e662f15c6d", "committedDate": "2022-12-14 10:01:20 +0100", "message": "chore: Rename and clean up report model objects [TECH-14298] (#12525)"}, {"oid": "17085ef1b029fa636afa4c26f2466fb3b95be1e2", "committedDate": "2022-12-15 09:50:15 +0100", "message": "chore: Decouple validation package from report package [DHIS2-14298] (#12558)"}, {"oid": "2d2c1a72fe29e5330e1b3f799f4ab915b5a5bbf0", "committedDate": "2022-12-16 08:41:19 +0000", "message": "chore: remove prefix from TrackerValidationService (#12589)"}, {"oid": "f7407b037eca371200b710628ba5c9e66fe2971a", "committedDate": "2022-12-19 08:23:40 +0100", "message": "chore: Only expose immutable result from validation package [DHIS2-14298] (#12581)"}, {"oid": "2b482819097a3d8498c8a5f72eeffc958da3b95c", "committedDate": "2022-12-20 10:14:42 +0100", "message": "chore: don't mutate bundle in validation (#12620)"}, {"oid": "43725fed360d23cefb272443d6b3cf36cb72ff74", "committedDate": "2023-01-23 11:12:38 +0100", "message": "refactor: Use java Map#of over Guava ImmutableMap#builder (#12804)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU3OTk3NA==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r445579974", "body": "Can this method be refactored, so that it's easier to follow what's happening?\r\n\r\n```\r\nparams.setUser( getUser( params.getUser(), params.getUserId() ) );\r\n\r\nTrackerImportReport importReport = new TrackerImportReport();\r\n\r\nTimer totalTimer = initImportTimer( params );\r\n\r\nList<TrackerBundle> trackerBundles = createBundle( params, \r\n\r\nvalidateBundle( trackerBundles, importReport, params);\r\n\r\nif ( !importReport.getTrackerValidationReport().hasErrors() ) \r\n{\r\n...\r\n```", "bodyText": "Can this method be refactored, so that it's easier to follow what's happening?\nparams.setUser( getUser( params.getUser(), params.getUserId() ) );\n\nTrackerImportReport importReport = new TrackerImportReport();\n\nTimer totalTimer = initImportTimer( params );\n\nList<TrackerBundle> trackerBundles = createBundle( params, \n\nvalidateBundle( trackerBundles, importReport, params);\n\nif ( !importReport.getTrackerValidationReport().hasErrors() ) \n{\n...", "bodyHTML": "<p dir=\"auto\">Can this method be refactored, so that it's easier to follow what's happening?</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"params.setUser( getUser( params.getUser(), params.getUserId() ) );\n\nTrackerImportReport importReport = new TrackerImportReport();\n\nTimer totalTimer = initImportTimer( params );\n\nList&lt;TrackerBundle&gt; trackerBundles = createBundle( params, \n\nvalidateBundle( trackerBundles, importReport, params);\n\nif ( !importReport.getTrackerValidationReport().hasErrors() ) \n{\n...\"><pre><code>params.setUser( getUser( params.getUser(), params.getUserId() ) );\n\nTrackerImportReport importReport = new TrackerImportReport();\n\nTimer totalTimer = initImportTimer( params );\n\nList&lt;TrackerBundle&gt; trackerBundles = createBundle( params, \n\nvalidateBundle( trackerBundles, importReport, params);\n\nif ( !importReport.getTrackerValidationReport().hasErrors() ) \n{\n...\n</code></pre></div>", "author": "luciano-fiandesio", "createdAt": "2020-06-25T13:59:06Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java", "diffHunk": "@@ -92,7 +91,9 @@ public TrackerImportReport importTracker( TrackerImportParams params )\n     {\n         params.setUser( getUser( params.getUser(), params.getUserId() ) );", "originalCommit": "e7e003a2211cdf3f412ce75f95ef0f6be1973434", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYyNjk3Mg==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446626972", "bodyText": "Yes, very good point. I split it up into preheat, validate, commit now.", "author": "netroms", "createdAt": "2020-06-28T09:35:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU3OTk3NA=="}], "type": "inlineReview", "revised_code": {"commit": "c5a94c3d798ab59a16b994801255c4ac2631887b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\nindex 06ab14aa6f..f3e443befe 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\n", "chunk": "@@ -86,94 +86,100 @@ public class DefaultTrackerImportService\n     }\n \n     @Override\n-    @Transactional\n     public TrackerImportReport importTracker( TrackerImportParams params )\n     {\n+        Timer requestTimer = new SystemTimer().start();\n+\n         params.setUser( getUser( params.getUser(), params.getUserId() ) );\n \n         TrackerImportReport importReport = new TrackerImportReport();\n \n-        Timer totalTimer = new SystemTimer().start();\n-        String message = \"(\" + params.getUsername() + \") Import:Start\";\n-        log.info( message );\n-\n         if ( params.hasJobConfiguration() )\n         {\n-            notifier.notify( params.getJobConfiguration(), message );\n+            notifier.notify( params.getJobConfiguration(), \"(\" + params.getUsername() + \") Import:Start\" );\n         }\n \n-        Timer preheatTimer = new SystemTimer().start();\n-\n-        TrackerBundleParams bundleParams = params.toTrackerBundleParams();\n-        List<TrackerBundle> trackerBundles = trackerBundleService.create( bundleParams );\n-\n-        importReport.getTimings().setPreheat( preheatTimer.toString() );\n-\n-        Timer validationTimer = new SystemTimer().start();\n+        List<TrackerBundle> trackerBundles = preheatBundle( params, importReport );\n \n-        TrackerValidationReport validationReport = new TrackerValidationReport();\n-\n-        trackerBundles.forEach( tb ->\n-            validationReport.add( trackerValidationService.validate( tb ) ) );\n+        TrackerValidationReport validationReport = validateBundle( params, importReport, trackerBundles );\n \n-        String validationTimeFormatted = validationTimer.toString();\n-        message = \"(\" + params.getUsername() + \") Import:Validation took \" + validationTimeFormatted;\n-        log.info( message );\n+        if ( validationReport.hasErrors() )\n+        {\n+            importReport.setStatus( TrackerStatus.ERROR );\n+        }\n+        else\n+        {\n+            commitBundle( params, importReport, trackerBundles );\n+        }\n \n-        importReport.getTimings().setValidation( validationTimeFormatted );\n+        importReport.getTimings().setTotalImport( requestTimer.toString() );\n \n-        importReport.setTrackerValidationReport( validationReport );\n+        TrackerBundleReportModeUtils.filter( importReport, params.getReportMode() );\n \n         if ( params.hasJobConfiguration() )\n         {\n-            notifier.update( params.getJobConfiguration(), message );\n+            notifier\n+                .update( params.getJobConfiguration(), \"(\" + params.getUsername() + \") Import:Done took \" + requestTimer, true );\n+\n+            notifier.addJobSummary( params.getJobConfiguration(), importReport, TrackerImportReport.class );\n         }\n \n-//        if ( !(!validationReport.isEmpty() && AtomicMode.ALL == params.getAtomicMode()) )\n-        if ( !validationReport.hasErrors() )\n-        {\n-            Timer commitTimer = new SystemTimer().start();\n+        return importReport;\n+    }\n+\n+    protected List<TrackerBundle> preheatBundle( TrackerImportParams params, TrackerImportReport importReport )\n+    {\n+        Timer preheatTimer = new SystemTimer().start();\n \n-            trackerBundles.forEach( tb ->\n-                importReport.getBundleReports().add( trackerBundleService.commit( tb ) ) );\n+        TrackerBundleParams bundleParams = params.toTrackerBundleParams();\n+        List<TrackerBundle> trackerBundles = trackerBundleService.create( bundleParams );\n \n-            if ( !importReport.isEmpty() )\n-            {\n-                importReport.setStatus( TrackerStatus.WARNING );\n-            }\n+        importReport.getTimings().setPreheat( preheatTimer.toString() );\n+        return trackerBundles;\n+    }\n \n-            String commitTimeFormatted = commitTimer.toString();\n-            message = \"(\" + params.getUsername() + \") Import:Commit took \" + commitTimeFormatted;\n-            log.info( message );\n+    protected void commitBundle( TrackerImportParams params, TrackerImportReport importReport,\n+        List<TrackerBundle> trackerBundles )\n+    {\n+        Timer commitTimer = new SystemTimer().start();\n \n-            importReport.getTimings().setCommit( commitTimeFormatted );\n+        trackerBundles.forEach( tb ->\n+            importReport.getBundleReports().add( trackerBundleService.commit( tb ) ) );\n \n-            if ( params.hasJobConfiguration() )\n-            {\n-                notifier.update( params.getJobConfiguration(), message );\n-            }\n+        if ( !importReport.isEmpty() )\n+        {\n+            importReport.setStatus( TrackerStatus.WARNING );\n         }\n-        else\n+\n+        importReport.getTimings().setCommit( commitTimer.toString() );\n+\n+        if ( params.hasJobConfiguration() )\n         {\n-            importReport.setStatus( TrackerStatus.ERROR );\n+            notifier.update( params.getJobConfiguration(),\n+                \"(\" + params.getUsername() + \") \" + \"Import:Commit took \" + commitTimer );\n         }\n+    }\n+\n+    protected TrackerValidationReport validateBundle( TrackerImportParams params, TrackerImportReport importReport,\n+        List<TrackerBundle> trackerBundles )\n+    {\n+        Timer validationTimer = new SystemTimer().start();\n \n-        String totalTimeFormatted = totalTimer.toString();\n-        message = \"(\" + params.getUsername() + \") Import:Done took \" + totalTimeFormatted;\n-        log.info( message );\n+        TrackerValidationReport validationReport = new TrackerValidationReport();\n \n-        importReport.getTimings().setTotalImport( totalTimeFormatted );\n+        // Do all the validation\n+        trackerBundles.forEach( tb ->\n+            validationReport.add( trackerValidationService.validate( tb ) ) );\n \n-//        params.getReportMode() -->\n-        TrackerBundleReportModeUtils.filter( importReport, TrackerBundleReportMode.FULL );\n+        importReport.getTimings().setValidation( validationTimer.toString() );\n+        importReport.setTrackerValidationReport( validationReport );\n \n         if ( params.hasJobConfiguration() )\n         {\n-            notifier.update( params.getJobConfiguration(), message, true );\n-            notifier.addJobSummary( params.getJobConfiguration(), importReport, TrackerImportReport.class );\n+            notifier\n+                .update( params.getJobConfiguration(), \"(\" + params.getUsername() + \") Import:Validation took \" + validationTimer );\n         }\n-\n-        return importReport;\n+        return validationReport;\n     }\n \n     @Override\n", "next_change": {"commit": "d2feae85e2920e2ecd5cce7d310e926ae797cd2c", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\nindex f3e443befe..91ee2ca9b1 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\n", "chunk": "@@ -177,7 +177,8 @@ public class DefaultTrackerImportService\n         if ( params.hasJobConfiguration() )\n         {\n             notifier\n-                .update( params.getJobConfiguration(), \"(\" + params.getUsername() + \") Import:Validation took \" + validationTimer );\n+                .update( params.getJobConfiguration(),\n+                    \"(\" + params.getUsername() + \") Import:Validation took \" + validationTimer );\n         }\n         return validationReport;\n     }\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\nindex 06ab14aa6f..91ee2ca9b1 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\n", "chunk": "@@ -86,94 +85,102 @@ public class DefaultTrackerImportService\n     }\n \n     @Override\n-    @Transactional\n     public TrackerImportReport importTracker( TrackerImportParams params )\n     {\n+        Timer requestTimer = new SystemTimer().start();\n+\n         params.setUser( getUser( params.getUser(), params.getUserId() ) );\n \n         TrackerImportReport importReport = new TrackerImportReport();\n \n-        Timer totalTimer = new SystemTimer().start();\n-        String message = \"(\" + params.getUsername() + \") Import:Start\";\n-        log.info( message );\n-\n         if ( params.hasJobConfiguration() )\n         {\n-            notifier.notify( params.getJobConfiguration(), message );\n+            notifier.notify( params.getJobConfiguration(), \"(\" + params.getUsername() + \") Import:Start\" );\n         }\n \n-        Timer preheatTimer = new SystemTimer().start();\n-\n-        TrackerBundleParams bundleParams = params.toTrackerBundleParams();\n-        List<TrackerBundle> trackerBundles = trackerBundleService.create( bundleParams );\n-\n-        importReport.getTimings().setPreheat( preheatTimer.toString() );\n-\n-        Timer validationTimer = new SystemTimer().start();\n+        List<TrackerBundle> trackerBundles = preheatBundle( params, importReport );\n \n-        TrackerValidationReport validationReport = new TrackerValidationReport();\n-\n-        trackerBundles.forEach( tb ->\n-            validationReport.add( trackerValidationService.validate( tb ) ) );\n+        TrackerValidationReport validationReport = validateBundle( params, importReport, trackerBundles );\n \n-        String validationTimeFormatted = validationTimer.toString();\n-        message = \"(\" + params.getUsername() + \") Import:Validation took \" + validationTimeFormatted;\n-        log.info( message );\n+        if ( validationReport.hasErrors() )\n+        {\n+            importReport.setStatus( TrackerStatus.ERROR );\n+        }\n+        else\n+        {\n+            commitBundle( params, importReport, trackerBundles );\n+        }\n \n-        importReport.getTimings().setValidation( validationTimeFormatted );\n+        importReport.getTimings().setTotalImport( requestTimer.toString() );\n \n-        importReport.setTrackerValidationReport( validationReport );\n+        TrackerBundleReportModeUtils.filter( importReport, params.getReportMode() );\n \n         if ( params.hasJobConfiguration() )\n         {\n-            notifier.update( params.getJobConfiguration(), message );\n+            notifier\n+                .update( params.getJobConfiguration(),\n+                    \"(\" + params.getUsername() + \") Import:Done took \" + requestTimer, true );\n+\n+            notifier.addJobSummary( params.getJobConfiguration(), importReport, TrackerImportReport.class );\n         }\n \n-//        if ( !(!validationReport.isEmpty() && AtomicMode.ALL == params.getAtomicMode()) )\n-        if ( !validationReport.hasErrors() )\n-        {\n-            Timer commitTimer = new SystemTimer().start();\n+        return importReport;\n+    }\n+\n+    protected List<TrackerBundle> preheatBundle( TrackerImportParams params, TrackerImportReport importReport )\n+    {\n+        Timer preheatTimer = new SystemTimer().start();\n \n-            trackerBundles.forEach( tb ->\n-                importReport.getBundleReports().add( trackerBundleService.commit( tb ) ) );\n+        TrackerBundleParams bundleParams = params.toTrackerBundleParams();\n+        List<TrackerBundle> trackerBundles = trackerBundleService.create( bundleParams );\n \n-            if ( !importReport.isEmpty() )\n-            {\n-                importReport.setStatus( TrackerStatus.WARNING );\n-            }\n+        importReport.getTimings().setPreheat( preheatTimer.toString() );\n+        return trackerBundles;\n+    }\n \n-            String commitTimeFormatted = commitTimer.toString();\n-            message = \"(\" + params.getUsername() + \") Import:Commit took \" + commitTimeFormatted;\n-            log.info( message );\n+    protected void commitBundle( TrackerImportParams params, TrackerImportReport importReport,\n+        List<TrackerBundle> trackerBundles )\n+    {\n+        Timer commitTimer = new SystemTimer().start();\n \n-            importReport.getTimings().setCommit( commitTimeFormatted );\n+        trackerBundles.forEach( tb ->\n+            importReport.getBundleReports().add( trackerBundleService.commit( tb ) ) );\n \n-            if ( params.hasJobConfiguration() )\n-            {\n-                notifier.update( params.getJobConfiguration(), message );\n-            }\n+        if ( !importReport.isEmpty() )\n+        {\n+            importReport.setStatus( TrackerStatus.WARNING );\n         }\n-        else\n+\n+        importReport.getTimings().setCommit( commitTimer.toString() );\n+\n+        if ( params.hasJobConfiguration() )\n         {\n-            importReport.setStatus( TrackerStatus.ERROR );\n+            notifier.update( params.getJobConfiguration(),\n+                \"(\" + params.getUsername() + \") \" + \"Import:Commit took \" + commitTimer );\n         }\n+    }\n+\n+    protected TrackerValidationReport validateBundle( TrackerImportParams params, TrackerImportReport importReport,\n+        List<TrackerBundle> trackerBundles )\n+    {\n+        Timer validationTimer = new SystemTimer().start();\n \n-        String totalTimeFormatted = totalTimer.toString();\n-        message = \"(\" + params.getUsername() + \") Import:Done took \" + totalTimeFormatted;\n-        log.info( message );\n+        TrackerValidationReport validationReport = new TrackerValidationReport();\n \n-        importReport.getTimings().setTotalImport( totalTimeFormatted );\n+        // Do all the validation\n+        trackerBundles.forEach( tb ->\n+            validationReport.add( trackerValidationService.validate( tb ) ) );\n \n-//        params.getReportMode() -->\n-        TrackerBundleReportModeUtils.filter( importReport, TrackerBundleReportMode.FULL );\n+        importReport.getTimings().setValidation( validationTimer.toString() );\n+        importReport.setTrackerValidationReport( validationReport );\n \n         if ( params.hasJobConfiguration() )\n         {\n-            notifier.update( params.getJobConfiguration(), message, true );\n-            notifier.addJobSummary( params.getJobConfiguration(), importReport, TrackerImportReport.class );\n+            notifier\n+                .update( params.getJobConfiguration(),\n+                    \"(\" + params.getUsername() + \") Import:Validation took \" + validationTimer );\n         }\n-\n-        return importReport;\n+        return validationReport;\n     }\n \n     @Override\n", "next_change": {"commit": "c2e0b3718cd8c7597ee5ec2e5193e7eafacf5827", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\nindex 91ee2ca9b1..e7047afffa 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\n", "chunk": "@@ -187,8 +218,10 @@ public class DefaultTrackerImportService\n     public TrackerImportParams getParamsFromMap( Map<String, List<String>> parameters )\n     {\n         TrackerImportParams params = new TrackerImportParams();\n-\n-        params.setUser( getUser( params.getUser(), params.getUserId() ) );\n+        if ( params.getUser() == null )\n+        {\n+            params.setUser( trackerUserService.getUser( params.getUserId() ) );\n+        }\n         params.setValidationMode( getEnumWithDefault( ValidationMode.class, parameters, \"validationMode\",\n             ValidationMode.FULL ) );\n         params.setImportMode(\n", "next_change": {"commit": "3e799d196b8f73ad216ea100a07ddd5f7dfc53e0", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\nindex e7047afffa..9568a3a230 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\n", "chunk": "@@ -218,10 +235,7 @@ public class DefaultTrackerImportService\n     public TrackerImportParams getParamsFromMap( Map<String, List<String>> parameters )\n     {\n         TrackerImportParams params = new TrackerImportParams();\n-        if ( params.getUser() == null )\n-        {\n-            params.setUser( trackerUserService.getUser( params.getUserId() ) );\n-        }\n+\n         params.setValidationMode( getEnumWithDefault( ValidationMode.class, parameters, \"validationMode\",\n             ValidationMode.FULL ) );\n         params.setImportMode(\n", "next_change": {"commit": "913d4ba468bf66783e901c4d43bd355d13cb16fa", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\nindex 9568a3a230..3e1f1e0472 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\n", "chunk": "@@ -231,111 +227,15 @@ public class DefaultTrackerImportService\n         return validationReport;\n     }\n \n-    @Override\n-    public TrackerImportParams getParamsFromMap( Map<String, List<String>> parameters )\n-    {\n-        TrackerImportParams params = new TrackerImportParams();\n-\n-        params.setValidationMode( getEnumWithDefault( ValidationMode.class, parameters, \"validationMode\",\n-            ValidationMode.FULL ) );\n-        params.setImportMode(\n-            getEnumWithDefault( TrackerBundleMode.class, parameters, \"importMode\", TrackerBundleMode.COMMIT ) );\n-        params.setIdentifiers( getTrackerIdentifiers( parameters ) );\n-        params.setImportStrategy( getEnumWithDefault( TrackerImportStrategy.class, parameters, \"importStrategy\",\n-            TrackerImportStrategy.CREATE_AND_UPDATE ) );\n-        params.setAtomicMode( getEnumWithDefault( AtomicMode.class, parameters, \"atomicMode\", AtomicMode.ALL ) );\n-        params.setFlushMode( getEnumWithDefault( FlushMode.class, parameters, \"flushMode\", FlushMode.AUTO ) );\n-\n-        return params;\n-    }\n-\n     @Override\n     public TrackerImportReport buildImportReport( TrackerImportReport importReport, TrackerBundleReportMode reportMode )\n     {\n         return importReport.copy( reportMode );\n     }\n \n-    //-----------------------------------------------------------------------------------\n-    // Utility Methods\n-    //-----------------------------------------------------------------------------------\n-\n-    private TrackerIdentifierParams getTrackerIdentifiers( Map<String, List<String>> parameters )\n-    {\n-        TrackerIdScheme idScheme = getEnumWithDefault( TrackerIdScheme.class, parameters, \"idScheme\",\n-            TrackerIdScheme.UID );\n-        TrackerIdScheme orgUnitIdScheme = getEnumWithDefault( TrackerIdScheme.class, parameters, \"orgUnitIdScheme\",\n-            idScheme );\n-        TrackerIdScheme programIdScheme = getEnumWithDefault( TrackerIdScheme.class, parameters, \"programIdScheme\",\n-            idScheme );\n-        TrackerIdScheme programStageIdScheme = getEnumWithDefault( TrackerIdScheme.class, parameters,\n-            \"programStageIdScheme\", idScheme );\n-        TrackerIdScheme dataElementIdScheme = getEnumWithDefault( TrackerIdScheme.class, parameters,\n-            \"dataElementIdScheme\", idScheme );\n-\n-        return TrackerIdentifierParams.builder()\n-            .idScheme( TrackerIdentifier.builder().idScheme( idScheme )\n-                .value( getAttributeUidOrNull( parameters, \"idScheme\" ) ).build() )\n-            .orgUnitIdScheme( TrackerIdentifier.builder().idScheme( orgUnitIdScheme )\n-                .value( getAttributeUidOrNull( parameters, \"orgUnitIdScheme\" ) ).build() )\n-            .programIdScheme( TrackerIdentifier.builder().idScheme( programIdScheme )\n-                .value( getAttributeUidOrNull( parameters, \"programIdScheme\" ) ).build() )\n-            .programStageIdScheme( TrackerIdentifier.builder().idScheme( programStageIdScheme )\n-                .value( getAttributeUidOrNull( parameters, \"programStageIdScheme\" ) ).build() )\n-            .dataElementIdScheme( TrackerIdentifier.builder().idScheme( dataElementIdScheme )\n-                .value( getAttributeUidOrNull( parameters, \"dataElementIdScheme\" ) ).build() )\n-            .build();\n-    }\n-\n-    private <T extends Enum<T>> T getEnumWithDefault( Class<T> enumKlass, Map<String, List<String>> parameters,\n-        String key, T defaultValue )\n-    {\n-        if ( parameters == null || parameters.get( key ) == null || parameters.get( key ).isEmpty() )\n-        {\n-            return defaultValue;\n-        }\n-\n-        if ( TrackerIdScheme.class.equals( enumKlass ) && IdScheme.isAttribute( parameters.get( key ).get( 0 ) ) )\n-        {\n-            return Enums.getIfPresent( enumKlass, \"ATTRIBUTE\" ).orNull();\n-        }\n-\n-        String value = String.valueOf( parameters.get( key ).get( 0 ) );\n-\n-        return Enums.getIfPresent( enumKlass, value ).or( defaultValue );\n-    }\n-\n-    private String getAttributeUidOrNull( Map<String, List<String>> parameters, String key )\n-    {\n-        if ( parameters == null || parameters.get( key ) == null || parameters.get( key ).isEmpty() )\n-        {\n-            return null;\n-        }\n-\n-        if ( IdScheme.isAttribute( parameters.get( key ).get( 0 ) ) )\n-        {\n-            String uid = \"\";\n-\n-            // Get second half of string, separated by ':'\n-            String[] splitParam = parameters.get( key ).get( 0 ).split( \":\" );\n-\n-            if ( splitParam.length > 1 )\n-            {\n-                uid = splitParam[1];\n-            }\n-\n-            if ( CodeGenerator.isValidUid( uid ) )\n-            {\n-                return uid;\n-            }\n-        }\n-\n-        return null;\n-    }\n-    \n     @AllArgsConstructor\n     static class ImportNotifier\n     {\n-\n         private Notifier notifier;\n \n         private TrackerImportParams params;\n", "next_change": {"commit": "d3babd17c47704fd61fb23a664d8e88264bbcff0", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\ndeleted file mode 100644\nindex 3e1f1e0472..0000000000\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\n+++ /dev/null\n", "chunk": "@@ -1,280 +0,0 @@\n-package org.hisp.dhis.tracker;\n-\n-/*\n- * Copyright (c) 2004-2020, University of Oslo\n- * All rights reserved.\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions are met:\n- * Redistributions of source code must retain the above copyright notice, this\n- * list of conditions and the following disclaimer.\n- *\n- * Redistributions in binary form must reproduce the above copyright notice,\n- * this list of conditions and the following disclaimer in the documentation\n- * and/or other materials provided with the distribution.\n- * Neither the name of the HISP project nor the names of its contributors may\n- * be used to endorse or promote products derived from this software without\n- * specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n- * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n- * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n- * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n- * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n- * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n- * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- */\n-\n-import static org.hisp.dhis.tracker.report.TrackerTimingsStats.COMMIT_OPS;\n-import static org.hisp.dhis.tracker.report.TrackerTimingsStats.PREHEAT_OPS;\n-import static org.hisp.dhis.tracker.report.TrackerTimingsStats.PROGRAMRULE_OPS;\n-import static org.hisp.dhis.tracker.report.TrackerTimingsStats.TOTAL_OPS;\n-import static org.hisp.dhis.tracker.report.TrackerTimingsStats.VALIDATION_OPS;\n-\n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Optional;\n-import java.util.stream.Collectors;\n-import java.util.stream.Stream;\n-\n-import org.hisp.dhis.system.notification.Notifier;\n-import org.hisp.dhis.tracker.bundle.TrackerBundle;\n-import org.hisp.dhis.tracker.bundle.TrackerBundleService;\n-import org.hisp.dhis.tracker.job.TrackerSideEffectDataBundle;\n-import org.hisp.dhis.tracker.preprocess.TrackerPreprocessService;\n-import org.hisp.dhis.tracker.report.TrackerBundleReport;\n-import org.hisp.dhis.tracker.report.TrackerImportReport;\n-import org.hisp.dhis.tracker.report.TrackerStatus;\n-import org.hisp.dhis.tracker.report.TrackerTimingsStats;\n-import org.hisp.dhis.tracker.report.TrackerTypeReport;\n-import org.hisp.dhis.tracker.report.TrackerValidationReport;\n-import org.hisp.dhis.tracker.validation.TrackerValidationService;\n-import org.springframework.stereotype.Service;\n-\n-import com.google.common.collect.ImmutableMap;\n-\n-import lombok.AllArgsConstructor;\n-import lombok.NonNull;\n-import lombok.RequiredArgsConstructor;\n-import lombok.extern.slf4j.Slf4j;\n-\n-/**\n- * @author Morten Olav Hansen <mortenoh@gmail.com>\n- */\n-@Service\n-@Slf4j\n-@RequiredArgsConstructor\n-public class DefaultTrackerImportService\n-    implements TrackerImportService\n-{\n-    @NonNull private final TrackerBundleService trackerBundleService;\n-\n-    @NonNull private final TrackerValidationService trackerValidationService;\n-\n-    @NonNull private final TrackerPreprocessService trackerPreprocessService;\n-\n-    @NonNull private final TrackerUserService trackerUserService;\n-\n-    @NonNull private final Notifier notifier;\n-\n-    @Override\n-    public TrackerImportReport importTracker( TrackerImportParams params )\n-    {\n-        params.setUser( trackerUserService.getUser( params.getUserId() ) );\n-\n-        // Init the Notifier\n-        ImportNotifier notifier = new ImportNotifier( this.notifier, params );\n-\n-        // Keeps track of the elapsed time of each Import stage\n-        TrackerTimingsStats opsTimer = new TrackerTimingsStats();\n-\n-        notifier.startImport();\n-\n-        TrackerValidationReport validationReport = null;\n-\n-        TrackerBundleReport bundleReport;\n-\n-        try\n-        {\n-            //\n-            // pre-heat\n-            //\n-            TrackerBundle trackerBundle = opsTimer.exec( PREHEAT_OPS,\n-                () -> preheatBundle( params ) );\n-\n-            Map<TrackerType, Integer> bundleSize = calculatePayloadSize( trackerBundle );\n-\n-            //\n-            // preprocess\n-            //\n-            opsTimer.execVoid( PROGRAMRULE_OPS,\n-                () -> preProcessBundle( trackerBundle ) );\n-\n-            //\n-            // validate\n-            //\n-            validationReport = opsTimer.exec( VALIDATION_OPS,\n-                () -> validateBundle( trackerBundle ) );\n-\n-            notifier.notifyOps( VALIDATION_OPS, opsTimer );\n-\n-\n-            if ( validationReport.hasErrors() && params.getAtomicMode() == AtomicMode.ALL )\n-            {\n-                TrackerImportReport trackerImportReport = TrackerImportReport\n-                    .withValidationErrors( validationReport, opsTimer.stopTimer(),\n-                        bundleSize.values().stream().mapToInt( Integer::intValue ).sum() );\n-\n-                notifier.endImport( trackerImportReport );\n-\n-                return trackerImportReport;\n-            }\n-            else\n-            {\n-                if ( TrackerImportStrategy.DELETE == params.getImportStrategy() )\n-                {\n-                    bundleReport = opsTimer.exec( COMMIT_OPS, () -> deleteBundle( trackerBundle) );\n-                }\n-                else\n-                {\n-                    bundleReport = opsTimer.exec( COMMIT_OPS, () -> commitBundle( trackerBundle) );\n-                }\n-\n-                notifier.notifyOps( COMMIT_OPS, opsTimer );\n-\n-                TrackerImportReport trackerImportReport = TrackerImportReport.withImportCompleted( TrackerStatus.OK,\n-                    bundleReport, validationReport,\n-                    opsTimer.stopTimer(), bundleSize );\n-\n-                notifier.endImport( trackerImportReport );\n-\n-                return trackerImportReport;\n-            }\n-        }\n-        catch ( Exception e )\n-        {\n-            log.error( \"Exception thrown during import.\", e );\n-\n-            TrackerImportReport report = TrackerImportReport.withError( \"Exception:\" + e.getMessage(),\n-                validationReport, opsTimer.stopTimer() );\n-\n-            notifier.endImportWithError( report, e );\n-\n-            return report;\n-        }\n-    }\n-\n-    private Map<TrackerType, Integer> calculatePayloadSize( TrackerBundle bundle )\n-    {\n-        return ImmutableMap.<TrackerType, Integer> builder()\n-            .put( TrackerType.TRACKED_ENTITY, bundle.getTrackedEntities().size() )\n-            .put( TrackerType.ENROLLMENT, bundle.getEnrollments().size() )\n-            .put( TrackerType.EVENT, bundle.getEvents().size() )\n-            .put( TrackerType.RELATIONSHIP, bundle.getRelationships().size() ).build();\n-    }\n-\n-    protected TrackerBundle preheatBundle( TrackerImportParams params )\n-    {\n-        return  trackerBundleService.create( params );\n-    }\n-\n-    protected void preProcessBundle( TrackerBundle bundle )\n-    {\n-        TrackerBundle trackerBundle = trackerBundleService.runRuleEngine( bundle );\n-        trackerPreprocessService.preprocess( trackerBundle );\n-    }\n-\n-    protected TrackerBundleReport commitBundle( TrackerBundle trackerBundle )\n-    {\n-        TrackerBundleReport bundleReport = trackerBundleService.commit( trackerBundle );\n-\n-        List<TrackerSideEffectDataBundle> sideEffectDataBundles = Stream.of( TrackerType.ENROLLMENT, TrackerType.EVENT )\n-            .map( trackerType -> safelyGetSideEffectsDataBundles( bundleReport, trackerType ) )\n-            .flatMap( Collection::stream )\n-            .collect( Collectors.toList() );\n-\n-        trackerBundleService.handleTrackerSideEffects( sideEffectDataBundles );\n-\n-        return bundleReport;\n-    }\n-\n-    List<TrackerSideEffectDataBundle> safelyGetSideEffectsDataBundles( TrackerBundleReport bundleReport,\n-        TrackerType trackerType )\n-    {\n-        return Optional.ofNullable( bundleReport )\n-            .map( TrackerBundleReport::getTypeReportMap )\n-            .map( reportMap -> reportMap.get( trackerType ) )\n-            .map( TrackerTypeReport::getSideEffectDataBundles )\n-            .orElse( Collections.emptyList() );\n-    }\n-\n-    protected TrackerBundleReport deleteBundle( TrackerBundle trackerBundle )\n-    {\n-        return trackerBundleService.delete( trackerBundle );\n-    }\n-\n-    protected TrackerValidationReport validateBundle( TrackerBundle trackerBundle )\n-    {\n-        TrackerValidationReport validationReport = new TrackerValidationReport();\n-\n-        validationReport.add( trackerValidationService.validate( trackerBundle ) );\n-        \n-        return validationReport;\n-    }\n-\n-    @Override\n-    public TrackerImportReport buildImportReport( TrackerImportReport importReport, TrackerBundleReportMode reportMode )\n-    {\n-        return importReport.copy( reportMode );\n-    }\n-\n-    @AllArgsConstructor\n-    static class ImportNotifier\n-    {\n-        private Notifier notifier;\n-\n-        private TrackerImportParams params;\n-\n-        public void startImport()\n-        {\n-            notifier.notify( params.getJobConfiguration(), \"(\" + params.getUsername() + \") Import:Start\" );\n-        }\n-\n-        public void notifyOps( String validationOps, TrackerTimingsStats opsTimer )\n-        {\n-\n-            if ( params.hasJobConfiguration() )\n-            {\n-                notifier\n-                    .update( params.getJobConfiguration(),\n-                        \"(\" + params.getUsername() + \") Import:\" + validationOps + \" took \"\n-                            + opsTimer.get( validationOps ) );\n-            }\n-        }\n-\n-        public void endImport( TrackerImportReport importReport )\n-        {\n-            if ( params.hasJobConfiguration() )\n-            {\n-                notifier.update( params.getJobConfiguration(), \"(\" + params.getUsername() + \") Import:Done took \" +\n-                    importReport.getTimingsStats().get( TOTAL_OPS ), true );\n-\n-                notifier.addJobSummary( params.getJobConfiguration(), importReport, TrackerImportReport.class );\n-            }\n-        }\n-\n-        public void endImportWithError( TrackerImportReport importReport, Exception e) {\n-\n-            if ( params.hasJobConfiguration() )\n-            {\n-                notifier.update( params.getJobConfiguration(), \"(\" + params.getUsername() + \") Import:Failed with exception: \" + e.getMessage(), true );\n-                notifier.addJobSummary( params.getJobConfiguration(), importReport, TrackerImportReport.class );\n-            }\n-        }\n-    }\n-}\n", "next_change": {"commit": "43725fed360d23cefb272443d6b3cf36cb72ff74", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\nnew file mode 100644\nindex 0000000000..6ff6031dee\n--- /dev/null\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\n", "chunk": "@@ -0,0 +1,395 @@\n+/*\n+ * Copyright (c) 2004-2022, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package org.hisp.dhis.tracker;\n+\n+import static org.hisp.dhis.tracker.report.TimingsStats.COMMIT_OPS;\n+import static org.hisp.dhis.tracker.report.TimingsStats.PREHEAT_OPS;\n+import static org.hisp.dhis.tracker.report.TimingsStats.PREPROCESS_OPS;\n+import static org.hisp.dhis.tracker.report.TimingsStats.PROGRAMRULE_OPS;\n+import static org.hisp.dhis.tracker.report.TimingsStats.TOTAL_OPS;\n+import static org.hisp.dhis.tracker.report.TimingsStats.VALIDATE_PROGRAMRULE_OPS;\n+import static org.hisp.dhis.tracker.report.TimingsStats.VALIDATION_OPS;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import javax.annotation.Nonnull;\n+\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import org.hisp.dhis.system.notification.NotificationLevel;\n+import org.hisp.dhis.system.notification.Notifier;\n+import org.hisp.dhis.tracker.bundle.TrackerBundle;\n+import org.hisp.dhis.tracker.bundle.TrackerBundleService;\n+import org.hisp.dhis.tracker.job.TrackerSideEffectDataBundle;\n+import org.hisp.dhis.tracker.preprocess.TrackerPreprocessService;\n+import org.hisp.dhis.tracker.report.ImportReport;\n+import org.hisp.dhis.tracker.report.PersistenceReport;\n+import org.hisp.dhis.tracker.report.Status;\n+import org.hisp.dhis.tracker.report.TimingsStats;\n+import org.hisp.dhis.tracker.report.TrackerTypeReport;\n+import org.hisp.dhis.tracker.report.ValidationReport;\n+import org.hisp.dhis.tracker.validation.ValidationResult;\n+import org.hisp.dhis.tracker.validation.ValidationService;\n+import org.hisp.dhis.user.User;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+/**\n+ * @author Morten Olav Hansen <mortenoh@gmail.com>\n+ */\n+@Service\n+@Slf4j\n+@RequiredArgsConstructor\n+public class DefaultTrackerImportService\n+    implements TrackerImportService\n+{\n+    @Nonnull\n+    private final TrackerBundleService trackerBundleService;\n+\n+    @Nonnull\n+    private final ValidationService validationService;\n+\n+    @Nonnull\n+    private final TrackerPreprocessService trackerPreprocessService;\n+\n+    @Nonnull\n+    private final TrackerUserService trackerUserService;\n+\n+    @Nonnull\n+    private final Notifier notifier;\n+\n+    @Override\n+    @Transactional\n+    public ImportReport importTracker( TrackerImportParams params )\n+    {\n+        User user = trackerUserService.getUser( params.getUserId() );\n+        params.setUser( user );\n+\n+        TimingsStats opsTimer = new TimingsStats();\n+\n+        startImport( params );\n+\n+        try\n+        {\n+            TrackerBundle trackerBundle = preHeat( params, opsTimer );\n+\n+            Map<TrackerType, Integer> bundleSize = calculatePayloadSize( trackerBundle );\n+\n+            preProcess( opsTimer, trackerBundle );\n+\n+            ValidationReport validationReport = validate( params, opsTimer, trackerBundle );\n+\n+            if ( exitOnError( validationReport, params ) )\n+            {\n+                return buildReportAndNotify( params, validationReport, opsTimer, bundleSize );\n+            }\n+\n+            PersistenceReport persistenceReport = commit( params, opsTimer, trackerBundle );\n+\n+            postCommit( trackerBundle );\n+\n+            ImportReport importReport = ImportReport.withImportCompleted(\n+                Status.OK,\n+                persistenceReport, validationReport,\n+                opsTimer.stopTimer(), bundleSize );\n+\n+            endImport( params, importReport );\n+\n+            return importReport;\n+        }\n+        catch ( Exception e )\n+        {\n+            log.error( \"Exception thrown during import.\", e );\n+\n+            ImportReport report = ImportReport.withError( \"Exception:\" + e.getMessage(),\n+                ValidationReport.emptyReport(), opsTimer.stopTimer() );\n+\n+            endImportWithError( params, report, e );\n+\n+            return report;\n+        }\n+    }\n+\n+    private TrackerBundle preHeat( TrackerImportParams params, TimingsStats opsTimer )\n+    {\n+        TrackerBundle trackerBundle = opsTimer.exec( PREHEAT_OPS,\n+            () -> preheatBundle( params ) );\n+\n+        notifyOps( params, PREHEAT_OPS, opsTimer );\n+\n+        return trackerBundle;\n+    }\n+\n+    private void preProcess( TimingsStats opsTimer, TrackerBundle trackerBundle )\n+    {\n+        opsTimer.execVoid( PREPROCESS_OPS,\n+            () -> preProcessBundle( trackerBundle ) );\n+    }\n+\n+    private ValidationReport validate( TrackerImportParams params, TimingsStats opsTimer, TrackerBundle trackerBundle )\n+    {\n+        ValidationResult validationResult = opsTimer.exec( VALIDATION_OPS,\n+            () -> validateBundle( params, trackerBundle, opsTimer ) );\n+\n+        if ( !trackerBundle.isSkipRuleEngine() && !params.getImportStrategy().isDelete() )\n+        {\n+            ValidationResult ruleEnginevalidationResult = execRuleEngine( params, opsTimer, trackerBundle );\n+\n+            return ValidationReport.merge( validationResult, ruleEnginevalidationResult );\n+        }\n+\n+        return ValidationReport.fromResult( validationResult );\n+    }\n+\n+    private PersistenceReport commit( TrackerImportParams params, TimingsStats opsTimer,\n+        TrackerBundle trackerBundle )\n+    {\n+        PersistenceReport persistenceReport;\n+        if ( TrackerImportStrategy.DELETE == params.getImportStrategy() )\n+        {\n+            persistenceReport = opsTimer.exec( COMMIT_OPS, () -> deleteBundle( trackerBundle ) );\n+        }\n+        else\n+        {\n+            persistenceReport = opsTimer.exec( COMMIT_OPS, () -> commitBundle( trackerBundle ) );\n+        }\n+\n+        notifyOps( params, COMMIT_OPS, opsTimer );\n+        return persistenceReport;\n+    }\n+\n+    private void postCommit( TrackerBundle trackerBundle )\n+    {\n+        trackerBundleService.postCommit( trackerBundle );\n+    }\n+\n+    protected ValidationResult validateBundle( TrackerImportParams params, TrackerBundle bundle,\n+        TimingsStats opsTimer )\n+    {\n+        ValidationResult result = validationService.validate( bundle );\n+        bundle.setTrackedEntities( result.getTrackedEntities() );\n+        bundle.setEnrollments( result.getEnrollments() );\n+        bundle.setEvents( result.getEvents() );\n+        bundle.setRelationships( result.getRelationships() );\n+\n+        notifyOps( params, VALIDATION_OPS, opsTimer );\n+\n+        return result;\n+    }\n+\n+    private ValidationResult execRuleEngine( TrackerImportParams params, TimingsStats opsTimer,\n+        TrackerBundle bundle )\n+    {\n+        opsTimer.execVoid( PROGRAMRULE_OPS,\n+            () -> trackerBundleService.runRuleEngine( bundle ) );\n+\n+        notifyOps( params, PROGRAMRULE_OPS, opsTimer );\n+\n+        ValidationResult result = opsTimer.exec( VALIDATE_PROGRAMRULE_OPS,\n+            () -> validationService.validateRuleEngine( bundle ) );\n+        bundle.setTrackedEntities( result.getTrackedEntities() );\n+        bundle.setEnrollments( result.getEnrollments() );\n+        bundle.setEvents( result.getEvents() );\n+        bundle.setRelationships( result.getRelationships() );\n+\n+        notifyOps( params, VALIDATE_PROGRAMRULE_OPS, opsTimer );\n+\n+        return result;\n+    }\n+\n+    private ImportReport buildReportAndNotify( TrackerImportParams params,\n+        ValidationReport validationReport,\n+        TimingsStats opsTimer, Map<TrackerType, Integer> bundleSize )\n+    {\n+        ImportReport importReport = ImportReport.withValidationErrors( validationReport,\n+            opsTimer.stopTimer(),\n+            bundleSize.values().stream().mapToInt( Integer::intValue ).sum() );\n+\n+        endImport( params, importReport );\n+\n+        return importReport;\n+    }\n+\n+    private boolean exitOnError( ValidationReport validationReport, TrackerImportParams params )\n+    {\n+        return validationReport.hasErrors() && params.getAtomicMode() == AtomicMode.ALL;\n+    }\n+\n+    private Map<TrackerType, Integer> calculatePayloadSize( TrackerBundle bundle )\n+    {\n+        return Map.of(\n+            TrackerType.TRACKED_ENTITY, bundle.getTrackedEntities().size(),\n+            TrackerType.ENROLLMENT, bundle.getEnrollments().size(),\n+            TrackerType.EVENT, bundle.getEvents().size(),\n+            TrackerType.RELATIONSHIP, bundle.getRelationships().size() );\n+    }\n+\n+    protected TrackerBundle preheatBundle( TrackerImportParams params )\n+    {\n+        return trackerBundleService.create( params );\n+    }\n+\n+    protected void preProcessBundle( TrackerBundle bundle )\n+    {\n+        trackerPreprocessService.preprocess( bundle );\n+    }\n+\n+    protected PersistenceReport commitBundle( TrackerBundle trackerBundle )\n+    {\n+        PersistenceReport persistenceReport = trackerBundleService.commit( trackerBundle );\n+\n+        if ( !trackerBundle.isSkipSideEffects() )\n+        {\n+            List<TrackerSideEffectDataBundle> sideEffectDataBundles = Stream\n+                .of( TrackerType.ENROLLMENT, TrackerType.EVENT )\n+                .map( trackerType -> safelyGetSideEffectsDataBundles( persistenceReport, trackerType ) )\n+                .flatMap( Collection::stream )\n+                .collect( Collectors.toList() );\n+\n+            trackerBundleService.handleTrackerSideEffects( sideEffectDataBundles );\n+        }\n+\n+        return persistenceReport;\n+    }\n+\n+    private List<TrackerSideEffectDataBundle> safelyGetSideEffectsDataBundles( PersistenceReport persistenceReport,\n+        TrackerType trackerType )\n+    {\n+        return Optional.ofNullable( persistenceReport )\n+            .map( PersistenceReport::getTypeReportMap )\n+            .map( reportMap -> reportMap.get( trackerType ) )\n+            .map( TrackerTypeReport::getSideEffectDataBundles )\n+            .orElse( Collections.emptyList() );\n+    }\n+\n+    protected PersistenceReport deleteBundle( TrackerBundle trackerBundle )\n+    {\n+        return trackerBundleService.delete( trackerBundle );\n+    }\n+\n+    private void startImport( TrackerImportParams params )\n+    {\n+        if ( null != params.getJobConfiguration() )\n+        {\n+            notifier.notify( params.getJobConfiguration(),\n+                params.userStartInfo() + \" Import:Start\" );\n+        }\n+    }\n+\n+    private void notifyOps( TrackerImportParams params, String validationOps, TimingsStats opsTimer )\n+    {\n+        if ( null != params.getJobConfiguration() )\n+        {\n+            notifier\n+                .update( params.getJobConfiguration(), NotificationLevel.DEBUG,\n+                    params +\n+                        validationOps + \" completed in \"\n+                        + opsTimer.get( validationOps ) + \" Import:\"\n+                        + validationOps );\n+        }\n+    }\n+\n+    private void endImport( TrackerImportParams params, ImportReport importReport )\n+    {\n+        if ( null != params.getJobConfiguration() )\n+        {\n+            notifier.update( params.getJobConfiguration(),\n+                params +\n+                    \" finished in \" +\n+                    importReport.getTimingsStats().get( TOTAL_OPS ) + \" Import:Done\",\n+                true );\n+\n+            if ( params.getJobConfiguration().isInMemoryJob() )\n+            {\n+                notifier.addJobSummary( params.getJobConfiguration(), importReport, ImportReport.class );\n+            }\n+        }\n+    }\n+\n+    private void endImportWithError( TrackerImportParams params, ImportReport importReport, Exception e )\n+    {\n+        if ( null != params.getJobConfiguration() && params.getJobConfiguration().isInMemoryJob() )\n+        {\n+            notifier.update( params.getJobConfiguration(), NotificationLevel.ERROR,\n+                params +\n+                    \" failed with exception: \"\n+                    + e.getMessage() + \" Import:Error\",\n+                true );\n+\n+            if ( params.getJobConfiguration().isInMemoryJob() )\n+            {\n+                notifier.addJobSummary( params.getJobConfiguration(), importReport, ImportReport.class );\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Clone the TrackerImportReport and filters out validation data based on\n+     * the provided {@link PersistenceReport}.\n+     *\n+     * @return a copy of the current TrackerImportReport\n+     */\n+    @Override\n+    public ImportReport buildImportReport( ImportReport originalImportReport,\n+        TrackerBundleReportMode reportMode )\n+    {\n+        ImportReport.ImportReportBuilder importReportBuilder = ImportReport.builder()\n+            .status( originalImportReport.getStatus() )\n+            .stats( originalImportReport.getStats() )\n+            .persistenceReport( originalImportReport.getPersistenceReport() )\n+            .message( originalImportReport.getMessage() );\n+\n+        ValidationReport originalValidationReport = originalImportReport.getValidationReport();\n+        ValidationReport validationReport = ValidationReport.emptyReport();\n+        if ( originalValidationReport != null )\n+        {\n+            validationReport.addErrors( originalValidationReport.getErrors() );\n+        }\n+        if ( originalValidationReport != null && TrackerBundleReportMode.WARNINGS == reportMode )\n+        {\n+            validationReport.addWarnings( originalValidationReport.getWarnings() );\n+        }\n+        else if ( originalValidationReport != null && TrackerBundleReportMode.FULL == reportMode )\n+        {\n+            validationReport\n+                .addWarnings( originalValidationReport.getWarnings() );\n+            importReportBuilder.timingsStats( originalImportReport.getTimingsStats() );\n+        }\n+\n+        importReportBuilder.validationReport( validationReport );\n+\n+        return importReportBuilder.build();\n+    }\n+}\n", "next_change": null}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "message": "Merge commit", "committedDate": null}, {"oid": "399526882c2fbbf5600922b3c3b6030420cf4e96", "committedDate": "2020-07-13 12:23:07 +0200", "message": "feat: Run rule engine rules in new importer [DHIS2-7310]"}, {"oid": "2ed799f33ca26b918ed60473a3f097714f00492e", "committedDate": "2020-08-04 10:30:01 +0200", "message": "chore: Clean up code (#5877)"}, {"oid": "8374cb43e422eddc1f4c01bb715d8d285acc37be", "committedDate": "2020-08-10 11:38:43 +0200", "message": "Merge remote-tracking branch 'origin/master' into DHIS2-7310-merge"}, {"oid": "b010ab69f5dfb7b5ea0a5cfd438c1d7ebf3275de", "committedDate": "2020-08-24 14:13:32 +0200", "message": "fix: Implement atomic mode OBJECTS to commit only valid DTOs (#5958)"}, {"oid": "82a863c258aa34e592b309bb9d6081c4dc8f981b", "committedDate": "2020-08-27 14:46:58 +0200", "message": "feat: Add support for deletion of tracker objects [DHIS2-9085] (#5959)"}, {"oid": "cb2ee65c0210c0d4b2bd8851789da8d4adfaf04d", "committedDate": "2020-09-07 10:28:21 +0200", "message": "fix: [DHIS2-9287] Fix the stats in the import summary (#6062)"}, {"oid": "c2e0b3718cd8c7597ee5ec2e5193e7eafacf5827", "committedDate": "2020-09-08 09:47:19 +0200", "message": "fix: prevent Hibernate session errors with User object (#6063)"}, {"oid": "0d35843121f0ad3004fad015f1520c5b06a5c337", "committedDate": "2020-09-15 09:24:33 +0200", "message": "Merge 2.35 into master (#6149)"}, {"oid": "20ae7d1ed19072116ee92e47a760e281039159ce", "committedDate": "2020-09-15 11:32:35 +0200", "message": "fix: [DHIS2-9428] Use report mode parameter to filter report data (#6122)"}, {"oid": "8aaeab2ee4dd7a9ffa927147931dff8609ef787a", "committedDate": "2020-09-23 15:33:34 +0200", "message": "chore: Remove unused imports (#6219)"}, {"oid": "87ef26080354e452d282d374e4dc6de996844a1c", "committedDate": "2020-10-02 09:53:53 +0200", "message": "test: Add integration tests for tracker side effects (#5833)"}, {"oid": "0208c5478719a64f691e4255b6d839bc95200fb4", "committedDate": "2020-10-23 10:03:41 +0200", "message": "fix: [DHIS2-9817] [DHIS2-9825] serialization and deserialization of TrackerImportReport and excception handling (2.36) (#6473)"}, {"oid": "3934daf1873ee7d70faa0058706c2409575865e5", "committedDate": "2020-10-23 12:21:16 +0200", "message": "fix: [DHIS2-9428] Made ERRORS as default reportMode and stats returned correctly (2.36) (#6477)"}, {"oid": "695641b3509e973bf6cf9fd631d2641e55eeeff4", "committedDate": "2020-10-23 14:47:30 +0200", "message": "fix: [DHIS2-9286] handled exception messages filtered out in final report (2.36) (#6478)"}, {"oid": "0e72ebff22211397a74a8a6aa539bb2f19351370", "committedDate": "2020-10-29 15:26:27 +0100", "message": "fix: Fix lazy initialisation exceptions (#6520)"}, {"oid": "9d25538a10eb27d9dd38aca54900dd84a02b5897", "committedDate": "2020-11-09 12:23:56 +0100", "message": "fix: DHIS2-9855 fixing NPE (#6588)"}, {"oid": "6e28dbfdaea7ceacbe560fe82ddba1e94c6cd203", "committedDate": "2020-11-11 17:41:55 +0100", "message": "fix: Exception when importing TEI with relationship [DHIS2-9856] (#6552)"}, {"oid": "ba02f7daf7dbd5125f1b0215bcc9b25649d32a68", "committedDate": "2020-11-12 15:53:58 +0100", "message": "fix: Use same timers for report and logs (#6642)"}, {"oid": "1f0559c94f01b1497116fe5ba2e19f28f072a879", "committedDate": "2020-11-23 09:21:47 +0100", "message": "fix: invalid ignore count in Tracker Import stats (#6721)"}, {"oid": "89451b9b46d62bfc853b0ed26b6ec266771f3d58", "committedDate": "2020-11-23 10:57:11 +0100", "message": "fix: add report when validation failed a (#6738)"}, {"oid": "641aca580898b88dd99837fe8b5e0639027c6e0e", "committedDate": "2020-11-24 08:24:42 +0100", "message": "fix: Import report ignore values on stats objects (#6745)"}, {"oid": "3e799d196b8f73ad216ea100a07ddd5f7dfc53e0", "committedDate": "2020-11-30 16:37:14 +0100", "message": "fix: remove long running transaction during Tracker Import (#6782)"}, {"oid": "913d4ba468bf66783e901c4d43bd355d13cb16fa", "committedDate": "2020-12-02 16:44:17 +0100", "message": "refactor: Tracker Import params creation (#6814)"}, {"oid": "3ab88a5f4623a8c749246bedef34fcb926d185cb", "committedDate": "2020-12-08 10:40:14 +0100", "message": "fix: [DHIS2-7310] Move rule engine call and validations after bundle validation (#6843)"}, {"oid": "c4f1db1dab576bc73489a9e0a6d015acec2eab5b", "committedDate": "2020-12-15 15:09:02 +0100", "message": "feat: Tracker Import metadata cache (#6877)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "74425bc0f9d76839b6aafd0a8573f0d3d0464446", "committedDate": "2021-01-20 10:08:21 +0100", "message": "fix: Add skipSideEffects flag for new tracker importer"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "d3babd17c47704fd61fb23a664d8e88264bbcff0", "committedDate": "2021-02-15 16:32:19 +0100", "message": "fix: Dhis2 10432 (#7347)"}, {"oid": "f83b6227cef05563252d258a1050a8bd57c70018", "committedDate": "2021-12-07 16:41:41 +0100", "message": "chore: place default TrackerImportService next to interface (#9371)"}, {"oid": "242e8d7cc2a94f328778c2fbad9005509c5b3360", "committedDate": "2021-12-21 13:35:53 +0100", "message": "chore: simplify tracker import validation TECH-880 (#9510)"}, {"oid": "8bd63f9823397e39458bd1cdab383c33c3231019", "committedDate": "2021-12-22 09:32:29 +0100", "message": "chore: move factory methods into class it creates TECH-880 (#9518)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "1c6c72cc7c172b2a5708fb662e588b797d525a55", "committedDate": "2022-01-11 15:55:54 +0100", "message": "chore: bring TrackerValidationReport closer to ValidationErrorReporter TECH-880 (#9595)"}, {"oid": "7c0131dfcfbf72dad27dc5f0a3f6a776e286c79a", "committedDate": "2022-01-11 17:47:56 +0100", "message": "chore: make TrackerValidationReport add methods fluent and name Timing TECH-880 (#9601)"}, {"oid": "8ccf9a288a67e5ee5349024fd3d281372c64c956", "committedDate": "2022-02-22 13:25:35 +0800", "message": "feat: Merge User/UserCredentials into one DB table (#9754)"}, {"oid": "d99da048b6427aa16b080ab0a0e25eda4a2a0f96", "committedDate": "2022-05-09 13:53:18 +0200", "message": "feat: Refactor getCurrentUser() to return DHIS2 User object 2 (#10600)"}, {"oid": "2886ebea404331a2c3f78909bcb92cca1ecc7913", "committedDate": "2022-10-12 09:39:22 +0200", "message": "chore: only use @Nonnull and ban similar annotations (#12071)"}, {"oid": "8bd34731a22250d0a8166442ecad89d00c926ccf", "committedDate": "2022-12-12 17:11:18 +0100", "message": "chore: Cleanup tracker reporter (#12501)"}, {"oid": "e4b9a5c802805b26fe8255711d1f98e662f15c6d", "committedDate": "2022-12-14 10:01:20 +0100", "message": "chore: Rename and clean up report model objects [TECH-14298] (#12525)"}, {"oid": "17085ef1b029fa636afa4c26f2466fb3b95be1e2", "committedDate": "2022-12-15 09:50:15 +0100", "message": "chore: Decouple validation package from report package [DHIS2-14298] (#12558)"}, {"oid": "2d2c1a72fe29e5330e1b3f799f4ab915b5a5bbf0", "committedDate": "2022-12-16 08:41:19 +0000", "message": "chore: remove prefix from TrackerValidationService (#12589)"}, {"oid": "f7407b037eca371200b710628ba5c9e66fe2971a", "committedDate": "2022-12-19 08:23:40 +0100", "message": "chore: Only expose immutable result from validation package [DHIS2-14298] (#12581)"}, {"oid": "2b482819097a3d8498c8a5f72eeffc958da3b95c", "committedDate": "2022-12-20 10:14:42 +0100", "message": "chore: don't mutate bundle in validation (#12620)"}, {"oid": "43725fed360d23cefb272443d6b3cf36cb72ff74", "committedDate": "2023-01-23 11:12:38 +0100", "message": "refactor: Use java Map#of over Guava ImmutableMap#builder (#12804)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU4OTk3NA==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r445589974", "body": "Can we use Lombok, since it is now supported in DHIS2", "bodyText": "Can we use Lombok, since it is now supported in DHIS2", "bodyHTML": "<p dir=\"auto\">Can we use Lombok, since it is now supported in DHIS2</p>", "author": "luciano-fiandesio", "createdAt": "2020-06-25T14:13:17Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/TrackerErrorMessage.java", "diffHunk": "@@ -29,20 +29,28 @@\n  */\n \n import java.text.MessageFormat;\n+import java.util.ArrayList;\n+import java.util.List;\n \n /**\n  * @author Morten Olav Hansen <mortenoh@gmail.com>\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n  */\n public class TrackerErrorMessage", "originalCommit": "e7e003a2211cdf3f412ce75f95ef0f6be1973434", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c5a94c3d798ab59a16b994801255c4ac2631887b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/TrackerErrorMessage.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/TrackerErrorMessage.java\nindex 9662923ce1..fd31ae4c04 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/TrackerErrorMessage.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/TrackerErrorMessage.java\n", "chunk": "@@ -40,12 +40,16 @@ public class TrackerErrorMessage\n {\n     private final TrackerErrorCode errorCode;\n \n-    private final List<String> args;\n+    private final List<String> args =  new ArrayList<>();\n \n     public TrackerErrorMessage( TrackerErrorCode errorCode )\n     {\n         this.errorCode = errorCode;\n-        this.args = new ArrayList<>();\n+    }\n+\n+    public TrackerErrorMessage of( TrackerErrorCode errorCode )\n+    {\n+        return new TrackerErrorMessage( errorCode );\n     }\n \n     public void addArgument( String arg )\n", "next_change": null}]}, "revised_code_in_main": {"commit": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/TrackerErrorMessage.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/TrackerErrorMessage.java\nindex 9662923ce1..7f02b28119 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/TrackerErrorMessage.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/TrackerErrorMessage.java\n", "chunk": "@@ -40,12 +40,16 @@ public class TrackerErrorMessage\n {\n     private final TrackerErrorCode errorCode;\n \n-    private final List<String> args;\n+    private final List<String> args = new ArrayList<>();\n \n     public TrackerErrorMessage( TrackerErrorCode errorCode )\n     {\n         this.errorCode = errorCode;\n-        this.args = new ArrayList<>();\n+    }\n+\n+    public TrackerErrorMessage of( TrackerErrorCode errorCode )\n+    {\n+        return new TrackerErrorMessage( errorCode );\n     }\n \n     public void addArgument( String arg )\n", "next_change": {"commit": "cb2ee65c0210c0d4b2bd8851789da8d4adfaf04d", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/TrackerErrorMessage.java b/dhis-2/dhis-api/src/main/java/org/hisp/dhis/schema/AbstractPropertyTransformer.java\nsimilarity index 66%\nrename from dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/TrackerErrorMessage.java\nrename to dhis-2/dhis-api/src/main/java/org/hisp/dhis/schema/AbstractPropertyTransformer.java\nindex 7f02b28119..1123f8b290 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/TrackerErrorMessage.java\n+++ b/dhis-2/dhis-api/src/main/java/org/hisp/dhis/schema/AbstractPropertyTransformer.java\n", "chunk": "@@ -28,42 +28,22 @@ package org.hisp.dhis.tracker.report;\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n-import java.text.MessageFormat;\n-import java.util.ArrayList;\n-import java.util.List;\n-\n /**\n  * @author Morten Olav Hansen <mortenoh@gmail.com>\n- * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n  */\n-public class TrackerErrorMessage\n+public abstract class AbstractPropertyTransformer<T>\n+    implements PropertyTransformer\n {\n-    private final TrackerErrorCode errorCode;\n-\n-    private final List<String> args = new ArrayList<>();\n-\n-    public TrackerErrorMessage( TrackerErrorCode errorCode )\n-    {\n-        this.errorCode = errorCode;\n-    }\n-\n-    public TrackerErrorMessage of( TrackerErrorCode errorCode )\n-    {\n-        return new TrackerErrorMessage( errorCode );\n-    }\n-\n-    public void addArgument( String arg )\n-    {\n-        args.add( arg );\n-    }\n+    private final Class<?> klass;\n \n-    public TrackerErrorCode getErrorCode()\n+    public AbstractPropertyTransformer( Class<?> klass )\n     {\n-        return errorCode;\n+        this.klass = klass;\n     }\n \n-    public String getMessage()\n+    @Override\n+    public Class<?> getKlass()\n     {\n-        return MessageFormat.format( errorCode.getMessage(), args.toArray( new Object[0] ) );\n+        return klass;\n     }\n }\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "message": "Merge commit", "committedDate": null}, {"oid": "cb2ee65c0210c0d4b2bd8851789da8d4adfaf04d", "committedDate": "2020-09-07 10:28:21 +0200", "message": "fix: [DHIS2-9287] Fix the stats in the import summary (#6062)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU5NTA3MA==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r445595070", "body": "The method `importTracker` is marked as `@Transactional`: do we need to open a r/w TX that early, considering that we are calling `commit` on the `trackerBundleService`, which is also transactional. This is just a  consideration, perhaps is not a problem.", "bodyText": "The method importTracker is marked as @Transactional: do we need to open a r/w TX that early, considering that we are calling commit on the trackerBundleService, which is also transactional. This is just a  consideration, perhaps is not a problem.", "bodyHTML": "<p dir=\"auto\">The method <code>importTracker</code> is marked as <code>@Transactional</code>: do we need to open a r/w TX that early, considering that we are calling <code>commit</code> on the <code>trackerBundleService</code>, which is also transactional. This is just a  consideration, perhaps is not a problem.</p>", "author": "luciano-fiandesio", "createdAt": "2020-06-25T14:20:13Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java", "diffHunk": "@@ -92,7 +91,9 @@ public TrackerImportReport importTracker( TrackerImportParams params )\n     {\n         params.setUser( getUser( params.getUser(), params.getUserId() ) );", "originalCommit": "e7e003a2211cdf3f412ce75f95ef0f6be1973434", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYyMzgzMA==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446623830", "bodyText": "Probably not, I will remove it if everyone think that is ok.", "author": "netroms", "createdAt": "2020-06-28T09:06:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU5NTA3MA=="}], "type": "inlineReview", "revised_code": {"commit": "c5a94c3d798ab59a16b994801255c4ac2631887b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\nindex 06ab14aa6f..f3e443befe 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\n", "chunk": "@@ -86,94 +86,100 @@ public class DefaultTrackerImportService\n     }\n \n     @Override\n-    @Transactional\n     public TrackerImportReport importTracker( TrackerImportParams params )\n     {\n+        Timer requestTimer = new SystemTimer().start();\n+\n         params.setUser( getUser( params.getUser(), params.getUserId() ) );\n \n         TrackerImportReport importReport = new TrackerImportReport();\n \n-        Timer totalTimer = new SystemTimer().start();\n-        String message = \"(\" + params.getUsername() + \") Import:Start\";\n-        log.info( message );\n-\n         if ( params.hasJobConfiguration() )\n         {\n-            notifier.notify( params.getJobConfiguration(), message );\n+            notifier.notify( params.getJobConfiguration(), \"(\" + params.getUsername() + \") Import:Start\" );\n         }\n \n-        Timer preheatTimer = new SystemTimer().start();\n-\n-        TrackerBundleParams bundleParams = params.toTrackerBundleParams();\n-        List<TrackerBundle> trackerBundles = trackerBundleService.create( bundleParams );\n-\n-        importReport.getTimings().setPreheat( preheatTimer.toString() );\n-\n-        Timer validationTimer = new SystemTimer().start();\n+        List<TrackerBundle> trackerBundles = preheatBundle( params, importReport );\n \n-        TrackerValidationReport validationReport = new TrackerValidationReport();\n-\n-        trackerBundles.forEach( tb ->\n-            validationReport.add( trackerValidationService.validate( tb ) ) );\n+        TrackerValidationReport validationReport = validateBundle( params, importReport, trackerBundles );\n \n-        String validationTimeFormatted = validationTimer.toString();\n-        message = \"(\" + params.getUsername() + \") Import:Validation took \" + validationTimeFormatted;\n-        log.info( message );\n+        if ( validationReport.hasErrors() )\n+        {\n+            importReport.setStatus( TrackerStatus.ERROR );\n+        }\n+        else\n+        {\n+            commitBundle( params, importReport, trackerBundles );\n+        }\n \n-        importReport.getTimings().setValidation( validationTimeFormatted );\n+        importReport.getTimings().setTotalImport( requestTimer.toString() );\n \n-        importReport.setTrackerValidationReport( validationReport );\n+        TrackerBundleReportModeUtils.filter( importReport, params.getReportMode() );\n \n         if ( params.hasJobConfiguration() )\n         {\n-            notifier.update( params.getJobConfiguration(), message );\n+            notifier\n+                .update( params.getJobConfiguration(), \"(\" + params.getUsername() + \") Import:Done took \" + requestTimer, true );\n+\n+            notifier.addJobSummary( params.getJobConfiguration(), importReport, TrackerImportReport.class );\n         }\n \n-//        if ( !(!validationReport.isEmpty() && AtomicMode.ALL == params.getAtomicMode()) )\n-        if ( !validationReport.hasErrors() )\n-        {\n-            Timer commitTimer = new SystemTimer().start();\n+        return importReport;\n+    }\n+\n+    protected List<TrackerBundle> preheatBundle( TrackerImportParams params, TrackerImportReport importReport )\n+    {\n+        Timer preheatTimer = new SystemTimer().start();\n \n-            trackerBundles.forEach( tb ->\n-                importReport.getBundleReports().add( trackerBundleService.commit( tb ) ) );\n+        TrackerBundleParams bundleParams = params.toTrackerBundleParams();\n+        List<TrackerBundle> trackerBundles = trackerBundleService.create( bundleParams );\n \n-            if ( !importReport.isEmpty() )\n-            {\n-                importReport.setStatus( TrackerStatus.WARNING );\n-            }\n+        importReport.getTimings().setPreheat( preheatTimer.toString() );\n+        return trackerBundles;\n+    }\n \n-            String commitTimeFormatted = commitTimer.toString();\n-            message = \"(\" + params.getUsername() + \") Import:Commit took \" + commitTimeFormatted;\n-            log.info( message );\n+    protected void commitBundle( TrackerImportParams params, TrackerImportReport importReport,\n+        List<TrackerBundle> trackerBundles )\n+    {\n+        Timer commitTimer = new SystemTimer().start();\n \n-            importReport.getTimings().setCommit( commitTimeFormatted );\n+        trackerBundles.forEach( tb ->\n+            importReport.getBundleReports().add( trackerBundleService.commit( tb ) ) );\n \n-            if ( params.hasJobConfiguration() )\n-            {\n-                notifier.update( params.getJobConfiguration(), message );\n-            }\n+        if ( !importReport.isEmpty() )\n+        {\n+            importReport.setStatus( TrackerStatus.WARNING );\n         }\n-        else\n+\n+        importReport.getTimings().setCommit( commitTimer.toString() );\n+\n+        if ( params.hasJobConfiguration() )\n         {\n-            importReport.setStatus( TrackerStatus.ERROR );\n+            notifier.update( params.getJobConfiguration(),\n+                \"(\" + params.getUsername() + \") \" + \"Import:Commit took \" + commitTimer );\n         }\n+    }\n+\n+    protected TrackerValidationReport validateBundle( TrackerImportParams params, TrackerImportReport importReport,\n+        List<TrackerBundle> trackerBundles )\n+    {\n+        Timer validationTimer = new SystemTimer().start();\n \n-        String totalTimeFormatted = totalTimer.toString();\n-        message = \"(\" + params.getUsername() + \") Import:Done took \" + totalTimeFormatted;\n-        log.info( message );\n+        TrackerValidationReport validationReport = new TrackerValidationReport();\n \n-        importReport.getTimings().setTotalImport( totalTimeFormatted );\n+        // Do all the validation\n+        trackerBundles.forEach( tb ->\n+            validationReport.add( trackerValidationService.validate( tb ) ) );\n \n-//        params.getReportMode() -->\n-        TrackerBundleReportModeUtils.filter( importReport, TrackerBundleReportMode.FULL );\n+        importReport.getTimings().setValidation( validationTimer.toString() );\n+        importReport.setTrackerValidationReport( validationReport );\n \n         if ( params.hasJobConfiguration() )\n         {\n-            notifier.update( params.getJobConfiguration(), message, true );\n-            notifier.addJobSummary( params.getJobConfiguration(), importReport, TrackerImportReport.class );\n+            notifier\n+                .update( params.getJobConfiguration(), \"(\" + params.getUsername() + \") Import:Validation took \" + validationTimer );\n         }\n-\n-        return importReport;\n+        return validationReport;\n     }\n \n     @Override\n", "next_change": {"commit": "d2feae85e2920e2ecd5cce7d310e926ae797cd2c", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\nindex f3e443befe..91ee2ca9b1 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\n", "chunk": "@@ -177,7 +177,8 @@ public class DefaultTrackerImportService\n         if ( params.hasJobConfiguration() )\n         {\n             notifier\n-                .update( params.getJobConfiguration(), \"(\" + params.getUsername() + \") Import:Validation took \" + validationTimer );\n+                .update( params.getJobConfiguration(),\n+                    \"(\" + params.getUsername() + \") Import:Validation took \" + validationTimer );\n         }\n         return validationReport;\n     }\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\nindex 06ab14aa6f..91ee2ca9b1 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\n", "chunk": "@@ -86,94 +85,102 @@ public class DefaultTrackerImportService\n     }\n \n     @Override\n-    @Transactional\n     public TrackerImportReport importTracker( TrackerImportParams params )\n     {\n+        Timer requestTimer = new SystemTimer().start();\n+\n         params.setUser( getUser( params.getUser(), params.getUserId() ) );\n \n         TrackerImportReport importReport = new TrackerImportReport();\n \n-        Timer totalTimer = new SystemTimer().start();\n-        String message = \"(\" + params.getUsername() + \") Import:Start\";\n-        log.info( message );\n-\n         if ( params.hasJobConfiguration() )\n         {\n-            notifier.notify( params.getJobConfiguration(), message );\n+            notifier.notify( params.getJobConfiguration(), \"(\" + params.getUsername() + \") Import:Start\" );\n         }\n \n-        Timer preheatTimer = new SystemTimer().start();\n-\n-        TrackerBundleParams bundleParams = params.toTrackerBundleParams();\n-        List<TrackerBundle> trackerBundles = trackerBundleService.create( bundleParams );\n-\n-        importReport.getTimings().setPreheat( preheatTimer.toString() );\n-\n-        Timer validationTimer = new SystemTimer().start();\n+        List<TrackerBundle> trackerBundles = preheatBundle( params, importReport );\n \n-        TrackerValidationReport validationReport = new TrackerValidationReport();\n-\n-        trackerBundles.forEach( tb ->\n-            validationReport.add( trackerValidationService.validate( tb ) ) );\n+        TrackerValidationReport validationReport = validateBundle( params, importReport, trackerBundles );\n \n-        String validationTimeFormatted = validationTimer.toString();\n-        message = \"(\" + params.getUsername() + \") Import:Validation took \" + validationTimeFormatted;\n-        log.info( message );\n+        if ( validationReport.hasErrors() )\n+        {\n+            importReport.setStatus( TrackerStatus.ERROR );\n+        }\n+        else\n+        {\n+            commitBundle( params, importReport, trackerBundles );\n+        }\n \n-        importReport.getTimings().setValidation( validationTimeFormatted );\n+        importReport.getTimings().setTotalImport( requestTimer.toString() );\n \n-        importReport.setTrackerValidationReport( validationReport );\n+        TrackerBundleReportModeUtils.filter( importReport, params.getReportMode() );\n \n         if ( params.hasJobConfiguration() )\n         {\n-            notifier.update( params.getJobConfiguration(), message );\n+            notifier\n+                .update( params.getJobConfiguration(),\n+                    \"(\" + params.getUsername() + \") Import:Done took \" + requestTimer, true );\n+\n+            notifier.addJobSummary( params.getJobConfiguration(), importReport, TrackerImportReport.class );\n         }\n \n-//        if ( !(!validationReport.isEmpty() && AtomicMode.ALL == params.getAtomicMode()) )\n-        if ( !validationReport.hasErrors() )\n-        {\n-            Timer commitTimer = new SystemTimer().start();\n+        return importReport;\n+    }\n+\n+    protected List<TrackerBundle> preheatBundle( TrackerImportParams params, TrackerImportReport importReport )\n+    {\n+        Timer preheatTimer = new SystemTimer().start();\n \n-            trackerBundles.forEach( tb ->\n-                importReport.getBundleReports().add( trackerBundleService.commit( tb ) ) );\n+        TrackerBundleParams bundleParams = params.toTrackerBundleParams();\n+        List<TrackerBundle> trackerBundles = trackerBundleService.create( bundleParams );\n \n-            if ( !importReport.isEmpty() )\n-            {\n-                importReport.setStatus( TrackerStatus.WARNING );\n-            }\n+        importReport.getTimings().setPreheat( preheatTimer.toString() );\n+        return trackerBundles;\n+    }\n \n-            String commitTimeFormatted = commitTimer.toString();\n-            message = \"(\" + params.getUsername() + \") Import:Commit took \" + commitTimeFormatted;\n-            log.info( message );\n+    protected void commitBundle( TrackerImportParams params, TrackerImportReport importReport,\n+        List<TrackerBundle> trackerBundles )\n+    {\n+        Timer commitTimer = new SystemTimer().start();\n \n-            importReport.getTimings().setCommit( commitTimeFormatted );\n+        trackerBundles.forEach( tb ->\n+            importReport.getBundleReports().add( trackerBundleService.commit( tb ) ) );\n \n-            if ( params.hasJobConfiguration() )\n-            {\n-                notifier.update( params.getJobConfiguration(), message );\n-            }\n+        if ( !importReport.isEmpty() )\n+        {\n+            importReport.setStatus( TrackerStatus.WARNING );\n         }\n-        else\n+\n+        importReport.getTimings().setCommit( commitTimer.toString() );\n+\n+        if ( params.hasJobConfiguration() )\n         {\n-            importReport.setStatus( TrackerStatus.ERROR );\n+            notifier.update( params.getJobConfiguration(),\n+                \"(\" + params.getUsername() + \") \" + \"Import:Commit took \" + commitTimer );\n         }\n+    }\n+\n+    protected TrackerValidationReport validateBundle( TrackerImportParams params, TrackerImportReport importReport,\n+        List<TrackerBundle> trackerBundles )\n+    {\n+        Timer validationTimer = new SystemTimer().start();\n \n-        String totalTimeFormatted = totalTimer.toString();\n-        message = \"(\" + params.getUsername() + \") Import:Done took \" + totalTimeFormatted;\n-        log.info( message );\n+        TrackerValidationReport validationReport = new TrackerValidationReport();\n \n-        importReport.getTimings().setTotalImport( totalTimeFormatted );\n+        // Do all the validation\n+        trackerBundles.forEach( tb ->\n+            validationReport.add( trackerValidationService.validate( tb ) ) );\n \n-//        params.getReportMode() -->\n-        TrackerBundleReportModeUtils.filter( importReport, TrackerBundleReportMode.FULL );\n+        importReport.getTimings().setValidation( validationTimer.toString() );\n+        importReport.setTrackerValidationReport( validationReport );\n \n         if ( params.hasJobConfiguration() )\n         {\n-            notifier.update( params.getJobConfiguration(), message, true );\n-            notifier.addJobSummary( params.getJobConfiguration(), importReport, TrackerImportReport.class );\n+            notifier\n+                .update( params.getJobConfiguration(),\n+                    \"(\" + params.getUsername() + \") Import:Validation took \" + validationTimer );\n         }\n-\n-        return importReport;\n+        return validationReport;\n     }\n \n     @Override\n", "next_change": {"commit": "c2e0b3718cd8c7597ee5ec2e5193e7eafacf5827", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\nindex 91ee2ca9b1..e7047afffa 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\n", "chunk": "@@ -187,8 +218,10 @@ public class DefaultTrackerImportService\n     public TrackerImportParams getParamsFromMap( Map<String, List<String>> parameters )\n     {\n         TrackerImportParams params = new TrackerImportParams();\n-\n-        params.setUser( getUser( params.getUser(), params.getUserId() ) );\n+        if ( params.getUser() == null )\n+        {\n+            params.setUser( trackerUserService.getUser( params.getUserId() ) );\n+        }\n         params.setValidationMode( getEnumWithDefault( ValidationMode.class, parameters, \"validationMode\",\n             ValidationMode.FULL ) );\n         params.setImportMode(\n", "next_change": {"commit": "3e799d196b8f73ad216ea100a07ddd5f7dfc53e0", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\nindex e7047afffa..9568a3a230 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\n", "chunk": "@@ -218,10 +235,7 @@ public class DefaultTrackerImportService\n     public TrackerImportParams getParamsFromMap( Map<String, List<String>> parameters )\n     {\n         TrackerImportParams params = new TrackerImportParams();\n-        if ( params.getUser() == null )\n-        {\n-            params.setUser( trackerUserService.getUser( params.getUserId() ) );\n-        }\n+\n         params.setValidationMode( getEnumWithDefault( ValidationMode.class, parameters, \"validationMode\",\n             ValidationMode.FULL ) );\n         params.setImportMode(\n", "next_change": {"commit": "913d4ba468bf66783e901c4d43bd355d13cb16fa", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\nindex 9568a3a230..3e1f1e0472 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\n", "chunk": "@@ -231,111 +227,15 @@ public class DefaultTrackerImportService\n         return validationReport;\n     }\n \n-    @Override\n-    public TrackerImportParams getParamsFromMap( Map<String, List<String>> parameters )\n-    {\n-        TrackerImportParams params = new TrackerImportParams();\n-\n-        params.setValidationMode( getEnumWithDefault( ValidationMode.class, parameters, \"validationMode\",\n-            ValidationMode.FULL ) );\n-        params.setImportMode(\n-            getEnumWithDefault( TrackerBundleMode.class, parameters, \"importMode\", TrackerBundleMode.COMMIT ) );\n-        params.setIdentifiers( getTrackerIdentifiers( parameters ) );\n-        params.setImportStrategy( getEnumWithDefault( TrackerImportStrategy.class, parameters, \"importStrategy\",\n-            TrackerImportStrategy.CREATE_AND_UPDATE ) );\n-        params.setAtomicMode( getEnumWithDefault( AtomicMode.class, parameters, \"atomicMode\", AtomicMode.ALL ) );\n-        params.setFlushMode( getEnumWithDefault( FlushMode.class, parameters, \"flushMode\", FlushMode.AUTO ) );\n-\n-        return params;\n-    }\n-\n     @Override\n     public TrackerImportReport buildImportReport( TrackerImportReport importReport, TrackerBundleReportMode reportMode )\n     {\n         return importReport.copy( reportMode );\n     }\n \n-    //-----------------------------------------------------------------------------------\n-    // Utility Methods\n-    //-----------------------------------------------------------------------------------\n-\n-    private TrackerIdentifierParams getTrackerIdentifiers( Map<String, List<String>> parameters )\n-    {\n-        TrackerIdScheme idScheme = getEnumWithDefault( TrackerIdScheme.class, parameters, \"idScheme\",\n-            TrackerIdScheme.UID );\n-        TrackerIdScheme orgUnitIdScheme = getEnumWithDefault( TrackerIdScheme.class, parameters, \"orgUnitIdScheme\",\n-            idScheme );\n-        TrackerIdScheme programIdScheme = getEnumWithDefault( TrackerIdScheme.class, parameters, \"programIdScheme\",\n-            idScheme );\n-        TrackerIdScheme programStageIdScheme = getEnumWithDefault( TrackerIdScheme.class, parameters,\n-            \"programStageIdScheme\", idScheme );\n-        TrackerIdScheme dataElementIdScheme = getEnumWithDefault( TrackerIdScheme.class, parameters,\n-            \"dataElementIdScheme\", idScheme );\n-\n-        return TrackerIdentifierParams.builder()\n-            .idScheme( TrackerIdentifier.builder().idScheme( idScheme )\n-                .value( getAttributeUidOrNull( parameters, \"idScheme\" ) ).build() )\n-            .orgUnitIdScheme( TrackerIdentifier.builder().idScheme( orgUnitIdScheme )\n-                .value( getAttributeUidOrNull( parameters, \"orgUnitIdScheme\" ) ).build() )\n-            .programIdScheme( TrackerIdentifier.builder().idScheme( programIdScheme )\n-                .value( getAttributeUidOrNull( parameters, \"programIdScheme\" ) ).build() )\n-            .programStageIdScheme( TrackerIdentifier.builder().idScheme( programStageIdScheme )\n-                .value( getAttributeUidOrNull( parameters, \"programStageIdScheme\" ) ).build() )\n-            .dataElementIdScheme( TrackerIdentifier.builder().idScheme( dataElementIdScheme )\n-                .value( getAttributeUidOrNull( parameters, \"dataElementIdScheme\" ) ).build() )\n-            .build();\n-    }\n-\n-    private <T extends Enum<T>> T getEnumWithDefault( Class<T> enumKlass, Map<String, List<String>> parameters,\n-        String key, T defaultValue )\n-    {\n-        if ( parameters == null || parameters.get( key ) == null || parameters.get( key ).isEmpty() )\n-        {\n-            return defaultValue;\n-        }\n-\n-        if ( TrackerIdScheme.class.equals( enumKlass ) && IdScheme.isAttribute( parameters.get( key ).get( 0 ) ) )\n-        {\n-            return Enums.getIfPresent( enumKlass, \"ATTRIBUTE\" ).orNull();\n-        }\n-\n-        String value = String.valueOf( parameters.get( key ).get( 0 ) );\n-\n-        return Enums.getIfPresent( enumKlass, value ).or( defaultValue );\n-    }\n-\n-    private String getAttributeUidOrNull( Map<String, List<String>> parameters, String key )\n-    {\n-        if ( parameters == null || parameters.get( key ) == null || parameters.get( key ).isEmpty() )\n-        {\n-            return null;\n-        }\n-\n-        if ( IdScheme.isAttribute( parameters.get( key ).get( 0 ) ) )\n-        {\n-            String uid = \"\";\n-\n-            // Get second half of string, separated by ':'\n-            String[] splitParam = parameters.get( key ).get( 0 ).split( \":\" );\n-\n-            if ( splitParam.length > 1 )\n-            {\n-                uid = splitParam[1];\n-            }\n-\n-            if ( CodeGenerator.isValidUid( uid ) )\n-            {\n-                return uid;\n-            }\n-        }\n-\n-        return null;\n-    }\n-    \n     @AllArgsConstructor\n     static class ImportNotifier\n     {\n-\n         private Notifier notifier;\n \n         private TrackerImportParams params;\n", "next_change": {"commit": "d3babd17c47704fd61fb23a664d8e88264bbcff0", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\ndeleted file mode 100644\nindex 3e1f1e0472..0000000000\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\n+++ /dev/null\n", "chunk": "@@ -1,280 +0,0 @@\n-package org.hisp.dhis.tracker;\n-\n-/*\n- * Copyright (c) 2004-2020, University of Oslo\n- * All rights reserved.\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions are met:\n- * Redistributions of source code must retain the above copyright notice, this\n- * list of conditions and the following disclaimer.\n- *\n- * Redistributions in binary form must reproduce the above copyright notice,\n- * this list of conditions and the following disclaimer in the documentation\n- * and/or other materials provided with the distribution.\n- * Neither the name of the HISP project nor the names of its contributors may\n- * be used to endorse or promote products derived from this software without\n- * specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n- * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n- * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n- * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n- * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n- * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n- * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- */\n-\n-import static org.hisp.dhis.tracker.report.TrackerTimingsStats.COMMIT_OPS;\n-import static org.hisp.dhis.tracker.report.TrackerTimingsStats.PREHEAT_OPS;\n-import static org.hisp.dhis.tracker.report.TrackerTimingsStats.PROGRAMRULE_OPS;\n-import static org.hisp.dhis.tracker.report.TrackerTimingsStats.TOTAL_OPS;\n-import static org.hisp.dhis.tracker.report.TrackerTimingsStats.VALIDATION_OPS;\n-\n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Optional;\n-import java.util.stream.Collectors;\n-import java.util.stream.Stream;\n-\n-import org.hisp.dhis.system.notification.Notifier;\n-import org.hisp.dhis.tracker.bundle.TrackerBundle;\n-import org.hisp.dhis.tracker.bundle.TrackerBundleService;\n-import org.hisp.dhis.tracker.job.TrackerSideEffectDataBundle;\n-import org.hisp.dhis.tracker.preprocess.TrackerPreprocessService;\n-import org.hisp.dhis.tracker.report.TrackerBundleReport;\n-import org.hisp.dhis.tracker.report.TrackerImportReport;\n-import org.hisp.dhis.tracker.report.TrackerStatus;\n-import org.hisp.dhis.tracker.report.TrackerTimingsStats;\n-import org.hisp.dhis.tracker.report.TrackerTypeReport;\n-import org.hisp.dhis.tracker.report.TrackerValidationReport;\n-import org.hisp.dhis.tracker.validation.TrackerValidationService;\n-import org.springframework.stereotype.Service;\n-\n-import com.google.common.collect.ImmutableMap;\n-\n-import lombok.AllArgsConstructor;\n-import lombok.NonNull;\n-import lombok.RequiredArgsConstructor;\n-import lombok.extern.slf4j.Slf4j;\n-\n-/**\n- * @author Morten Olav Hansen <mortenoh@gmail.com>\n- */\n-@Service\n-@Slf4j\n-@RequiredArgsConstructor\n-public class DefaultTrackerImportService\n-    implements TrackerImportService\n-{\n-    @NonNull private final TrackerBundleService trackerBundleService;\n-\n-    @NonNull private final TrackerValidationService trackerValidationService;\n-\n-    @NonNull private final TrackerPreprocessService trackerPreprocessService;\n-\n-    @NonNull private final TrackerUserService trackerUserService;\n-\n-    @NonNull private final Notifier notifier;\n-\n-    @Override\n-    public TrackerImportReport importTracker( TrackerImportParams params )\n-    {\n-        params.setUser( trackerUserService.getUser( params.getUserId() ) );\n-\n-        // Init the Notifier\n-        ImportNotifier notifier = new ImportNotifier( this.notifier, params );\n-\n-        // Keeps track of the elapsed time of each Import stage\n-        TrackerTimingsStats opsTimer = new TrackerTimingsStats();\n-\n-        notifier.startImport();\n-\n-        TrackerValidationReport validationReport = null;\n-\n-        TrackerBundleReport bundleReport;\n-\n-        try\n-        {\n-            //\n-            // pre-heat\n-            //\n-            TrackerBundle trackerBundle = opsTimer.exec( PREHEAT_OPS,\n-                () -> preheatBundle( params ) );\n-\n-            Map<TrackerType, Integer> bundleSize = calculatePayloadSize( trackerBundle );\n-\n-            //\n-            // preprocess\n-            //\n-            opsTimer.execVoid( PROGRAMRULE_OPS,\n-                () -> preProcessBundle( trackerBundle ) );\n-\n-            //\n-            // validate\n-            //\n-            validationReport = opsTimer.exec( VALIDATION_OPS,\n-                () -> validateBundle( trackerBundle ) );\n-\n-            notifier.notifyOps( VALIDATION_OPS, opsTimer );\n-\n-\n-            if ( validationReport.hasErrors() && params.getAtomicMode() == AtomicMode.ALL )\n-            {\n-                TrackerImportReport trackerImportReport = TrackerImportReport\n-                    .withValidationErrors( validationReport, opsTimer.stopTimer(),\n-                        bundleSize.values().stream().mapToInt( Integer::intValue ).sum() );\n-\n-                notifier.endImport( trackerImportReport );\n-\n-                return trackerImportReport;\n-            }\n-            else\n-            {\n-                if ( TrackerImportStrategy.DELETE == params.getImportStrategy() )\n-                {\n-                    bundleReport = opsTimer.exec( COMMIT_OPS, () -> deleteBundle( trackerBundle) );\n-                }\n-                else\n-                {\n-                    bundleReport = opsTimer.exec( COMMIT_OPS, () -> commitBundle( trackerBundle) );\n-                }\n-\n-                notifier.notifyOps( COMMIT_OPS, opsTimer );\n-\n-                TrackerImportReport trackerImportReport = TrackerImportReport.withImportCompleted( TrackerStatus.OK,\n-                    bundleReport, validationReport,\n-                    opsTimer.stopTimer(), bundleSize );\n-\n-                notifier.endImport( trackerImportReport );\n-\n-                return trackerImportReport;\n-            }\n-        }\n-        catch ( Exception e )\n-        {\n-            log.error( \"Exception thrown during import.\", e );\n-\n-            TrackerImportReport report = TrackerImportReport.withError( \"Exception:\" + e.getMessage(),\n-                validationReport, opsTimer.stopTimer() );\n-\n-            notifier.endImportWithError( report, e );\n-\n-            return report;\n-        }\n-    }\n-\n-    private Map<TrackerType, Integer> calculatePayloadSize( TrackerBundle bundle )\n-    {\n-        return ImmutableMap.<TrackerType, Integer> builder()\n-            .put( TrackerType.TRACKED_ENTITY, bundle.getTrackedEntities().size() )\n-            .put( TrackerType.ENROLLMENT, bundle.getEnrollments().size() )\n-            .put( TrackerType.EVENT, bundle.getEvents().size() )\n-            .put( TrackerType.RELATIONSHIP, bundle.getRelationships().size() ).build();\n-    }\n-\n-    protected TrackerBundle preheatBundle( TrackerImportParams params )\n-    {\n-        return  trackerBundleService.create( params );\n-    }\n-\n-    protected void preProcessBundle( TrackerBundle bundle )\n-    {\n-        TrackerBundle trackerBundle = trackerBundleService.runRuleEngine( bundle );\n-        trackerPreprocessService.preprocess( trackerBundle );\n-    }\n-\n-    protected TrackerBundleReport commitBundle( TrackerBundle trackerBundle )\n-    {\n-        TrackerBundleReport bundleReport = trackerBundleService.commit( trackerBundle );\n-\n-        List<TrackerSideEffectDataBundle> sideEffectDataBundles = Stream.of( TrackerType.ENROLLMENT, TrackerType.EVENT )\n-            .map( trackerType -> safelyGetSideEffectsDataBundles( bundleReport, trackerType ) )\n-            .flatMap( Collection::stream )\n-            .collect( Collectors.toList() );\n-\n-        trackerBundleService.handleTrackerSideEffects( sideEffectDataBundles );\n-\n-        return bundleReport;\n-    }\n-\n-    List<TrackerSideEffectDataBundle> safelyGetSideEffectsDataBundles( TrackerBundleReport bundleReport,\n-        TrackerType trackerType )\n-    {\n-        return Optional.ofNullable( bundleReport )\n-            .map( TrackerBundleReport::getTypeReportMap )\n-            .map( reportMap -> reportMap.get( trackerType ) )\n-            .map( TrackerTypeReport::getSideEffectDataBundles )\n-            .orElse( Collections.emptyList() );\n-    }\n-\n-    protected TrackerBundleReport deleteBundle( TrackerBundle trackerBundle )\n-    {\n-        return trackerBundleService.delete( trackerBundle );\n-    }\n-\n-    protected TrackerValidationReport validateBundle( TrackerBundle trackerBundle )\n-    {\n-        TrackerValidationReport validationReport = new TrackerValidationReport();\n-\n-        validationReport.add( trackerValidationService.validate( trackerBundle ) );\n-        \n-        return validationReport;\n-    }\n-\n-    @Override\n-    public TrackerImportReport buildImportReport( TrackerImportReport importReport, TrackerBundleReportMode reportMode )\n-    {\n-        return importReport.copy( reportMode );\n-    }\n-\n-    @AllArgsConstructor\n-    static class ImportNotifier\n-    {\n-        private Notifier notifier;\n-\n-        private TrackerImportParams params;\n-\n-        public void startImport()\n-        {\n-            notifier.notify( params.getJobConfiguration(), \"(\" + params.getUsername() + \") Import:Start\" );\n-        }\n-\n-        public void notifyOps( String validationOps, TrackerTimingsStats opsTimer )\n-        {\n-\n-            if ( params.hasJobConfiguration() )\n-            {\n-                notifier\n-                    .update( params.getJobConfiguration(),\n-                        \"(\" + params.getUsername() + \") Import:\" + validationOps + \" took \"\n-                            + opsTimer.get( validationOps ) );\n-            }\n-        }\n-\n-        public void endImport( TrackerImportReport importReport )\n-        {\n-            if ( params.hasJobConfiguration() )\n-            {\n-                notifier.update( params.getJobConfiguration(), \"(\" + params.getUsername() + \") Import:Done took \" +\n-                    importReport.getTimingsStats().get( TOTAL_OPS ), true );\n-\n-                notifier.addJobSummary( params.getJobConfiguration(), importReport, TrackerImportReport.class );\n-            }\n-        }\n-\n-        public void endImportWithError( TrackerImportReport importReport, Exception e) {\n-\n-            if ( params.hasJobConfiguration() )\n-            {\n-                notifier.update( params.getJobConfiguration(), \"(\" + params.getUsername() + \") Import:Failed with exception: \" + e.getMessage(), true );\n-                notifier.addJobSummary( params.getJobConfiguration(), importReport, TrackerImportReport.class );\n-            }\n-        }\n-    }\n-}\n", "next_change": {"commit": "43725fed360d23cefb272443d6b3cf36cb72ff74", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\nnew file mode 100644\nindex 0000000000..6ff6031dee\n--- /dev/null\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/DefaultTrackerImportService.java\n", "chunk": "@@ -0,0 +1,395 @@\n+/*\n+ * Copyright (c) 2004-2022, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package org.hisp.dhis.tracker;\n+\n+import static org.hisp.dhis.tracker.report.TimingsStats.COMMIT_OPS;\n+import static org.hisp.dhis.tracker.report.TimingsStats.PREHEAT_OPS;\n+import static org.hisp.dhis.tracker.report.TimingsStats.PREPROCESS_OPS;\n+import static org.hisp.dhis.tracker.report.TimingsStats.PROGRAMRULE_OPS;\n+import static org.hisp.dhis.tracker.report.TimingsStats.TOTAL_OPS;\n+import static org.hisp.dhis.tracker.report.TimingsStats.VALIDATE_PROGRAMRULE_OPS;\n+import static org.hisp.dhis.tracker.report.TimingsStats.VALIDATION_OPS;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import javax.annotation.Nonnull;\n+\n+import lombok.RequiredArgsConstructor;\n+import lombok.extern.slf4j.Slf4j;\n+\n+import org.hisp.dhis.system.notification.NotificationLevel;\n+import org.hisp.dhis.system.notification.Notifier;\n+import org.hisp.dhis.tracker.bundle.TrackerBundle;\n+import org.hisp.dhis.tracker.bundle.TrackerBundleService;\n+import org.hisp.dhis.tracker.job.TrackerSideEffectDataBundle;\n+import org.hisp.dhis.tracker.preprocess.TrackerPreprocessService;\n+import org.hisp.dhis.tracker.report.ImportReport;\n+import org.hisp.dhis.tracker.report.PersistenceReport;\n+import org.hisp.dhis.tracker.report.Status;\n+import org.hisp.dhis.tracker.report.TimingsStats;\n+import org.hisp.dhis.tracker.report.TrackerTypeReport;\n+import org.hisp.dhis.tracker.report.ValidationReport;\n+import org.hisp.dhis.tracker.validation.ValidationResult;\n+import org.hisp.dhis.tracker.validation.ValidationService;\n+import org.hisp.dhis.user.User;\n+import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+/**\n+ * @author Morten Olav Hansen <mortenoh@gmail.com>\n+ */\n+@Service\n+@Slf4j\n+@RequiredArgsConstructor\n+public class DefaultTrackerImportService\n+    implements TrackerImportService\n+{\n+    @Nonnull\n+    private final TrackerBundleService trackerBundleService;\n+\n+    @Nonnull\n+    private final ValidationService validationService;\n+\n+    @Nonnull\n+    private final TrackerPreprocessService trackerPreprocessService;\n+\n+    @Nonnull\n+    private final TrackerUserService trackerUserService;\n+\n+    @Nonnull\n+    private final Notifier notifier;\n+\n+    @Override\n+    @Transactional\n+    public ImportReport importTracker( TrackerImportParams params )\n+    {\n+        User user = trackerUserService.getUser( params.getUserId() );\n+        params.setUser( user );\n+\n+        TimingsStats opsTimer = new TimingsStats();\n+\n+        startImport( params );\n+\n+        try\n+        {\n+            TrackerBundle trackerBundle = preHeat( params, opsTimer );\n+\n+            Map<TrackerType, Integer> bundleSize = calculatePayloadSize( trackerBundle );\n+\n+            preProcess( opsTimer, trackerBundle );\n+\n+            ValidationReport validationReport = validate( params, opsTimer, trackerBundle );\n+\n+            if ( exitOnError( validationReport, params ) )\n+            {\n+                return buildReportAndNotify( params, validationReport, opsTimer, bundleSize );\n+            }\n+\n+            PersistenceReport persistenceReport = commit( params, opsTimer, trackerBundle );\n+\n+            postCommit( trackerBundle );\n+\n+            ImportReport importReport = ImportReport.withImportCompleted(\n+                Status.OK,\n+                persistenceReport, validationReport,\n+                opsTimer.stopTimer(), bundleSize );\n+\n+            endImport( params, importReport );\n+\n+            return importReport;\n+        }\n+        catch ( Exception e )\n+        {\n+            log.error( \"Exception thrown during import.\", e );\n+\n+            ImportReport report = ImportReport.withError( \"Exception:\" + e.getMessage(),\n+                ValidationReport.emptyReport(), opsTimer.stopTimer() );\n+\n+            endImportWithError( params, report, e );\n+\n+            return report;\n+        }\n+    }\n+\n+    private TrackerBundle preHeat( TrackerImportParams params, TimingsStats opsTimer )\n+    {\n+        TrackerBundle trackerBundle = opsTimer.exec( PREHEAT_OPS,\n+            () -> preheatBundle( params ) );\n+\n+        notifyOps( params, PREHEAT_OPS, opsTimer );\n+\n+        return trackerBundle;\n+    }\n+\n+    private void preProcess( TimingsStats opsTimer, TrackerBundle trackerBundle )\n+    {\n+        opsTimer.execVoid( PREPROCESS_OPS,\n+            () -> preProcessBundle( trackerBundle ) );\n+    }\n+\n+    private ValidationReport validate( TrackerImportParams params, TimingsStats opsTimer, TrackerBundle trackerBundle )\n+    {\n+        ValidationResult validationResult = opsTimer.exec( VALIDATION_OPS,\n+            () -> validateBundle( params, trackerBundle, opsTimer ) );\n+\n+        if ( !trackerBundle.isSkipRuleEngine() && !params.getImportStrategy().isDelete() )\n+        {\n+            ValidationResult ruleEnginevalidationResult = execRuleEngine( params, opsTimer, trackerBundle );\n+\n+            return ValidationReport.merge( validationResult, ruleEnginevalidationResult );\n+        }\n+\n+        return ValidationReport.fromResult( validationResult );\n+    }\n+\n+    private PersistenceReport commit( TrackerImportParams params, TimingsStats opsTimer,\n+        TrackerBundle trackerBundle )\n+    {\n+        PersistenceReport persistenceReport;\n+        if ( TrackerImportStrategy.DELETE == params.getImportStrategy() )\n+        {\n+            persistenceReport = opsTimer.exec( COMMIT_OPS, () -> deleteBundle( trackerBundle ) );\n+        }\n+        else\n+        {\n+            persistenceReport = opsTimer.exec( COMMIT_OPS, () -> commitBundle( trackerBundle ) );\n+        }\n+\n+        notifyOps( params, COMMIT_OPS, opsTimer );\n+        return persistenceReport;\n+    }\n+\n+    private void postCommit( TrackerBundle trackerBundle )\n+    {\n+        trackerBundleService.postCommit( trackerBundle );\n+    }\n+\n+    protected ValidationResult validateBundle( TrackerImportParams params, TrackerBundle bundle,\n+        TimingsStats opsTimer )\n+    {\n+        ValidationResult result = validationService.validate( bundle );\n+        bundle.setTrackedEntities( result.getTrackedEntities() );\n+        bundle.setEnrollments( result.getEnrollments() );\n+        bundle.setEvents( result.getEvents() );\n+        bundle.setRelationships( result.getRelationships() );\n+\n+        notifyOps( params, VALIDATION_OPS, opsTimer );\n+\n+        return result;\n+    }\n+\n+    private ValidationResult execRuleEngine( TrackerImportParams params, TimingsStats opsTimer,\n+        TrackerBundle bundle )\n+    {\n+        opsTimer.execVoid( PROGRAMRULE_OPS,\n+            () -> trackerBundleService.runRuleEngine( bundle ) );\n+\n+        notifyOps( params, PROGRAMRULE_OPS, opsTimer );\n+\n+        ValidationResult result = opsTimer.exec( VALIDATE_PROGRAMRULE_OPS,\n+            () -> validationService.validateRuleEngine( bundle ) );\n+        bundle.setTrackedEntities( result.getTrackedEntities() );\n+        bundle.setEnrollments( result.getEnrollments() );\n+        bundle.setEvents( result.getEvents() );\n+        bundle.setRelationships( result.getRelationships() );\n+\n+        notifyOps( params, VALIDATE_PROGRAMRULE_OPS, opsTimer );\n+\n+        return result;\n+    }\n+\n+    private ImportReport buildReportAndNotify( TrackerImportParams params,\n+        ValidationReport validationReport,\n+        TimingsStats opsTimer, Map<TrackerType, Integer> bundleSize )\n+    {\n+        ImportReport importReport = ImportReport.withValidationErrors( validationReport,\n+            opsTimer.stopTimer(),\n+            bundleSize.values().stream().mapToInt( Integer::intValue ).sum() );\n+\n+        endImport( params, importReport );\n+\n+        return importReport;\n+    }\n+\n+    private boolean exitOnError( ValidationReport validationReport, TrackerImportParams params )\n+    {\n+        return validationReport.hasErrors() && params.getAtomicMode() == AtomicMode.ALL;\n+    }\n+\n+    private Map<TrackerType, Integer> calculatePayloadSize( TrackerBundle bundle )\n+    {\n+        return Map.of(\n+            TrackerType.TRACKED_ENTITY, bundle.getTrackedEntities().size(),\n+            TrackerType.ENROLLMENT, bundle.getEnrollments().size(),\n+            TrackerType.EVENT, bundle.getEvents().size(),\n+            TrackerType.RELATIONSHIP, bundle.getRelationships().size() );\n+    }\n+\n+    protected TrackerBundle preheatBundle( TrackerImportParams params )\n+    {\n+        return trackerBundleService.create( params );\n+    }\n+\n+    protected void preProcessBundle( TrackerBundle bundle )\n+    {\n+        trackerPreprocessService.preprocess( bundle );\n+    }\n+\n+    protected PersistenceReport commitBundle( TrackerBundle trackerBundle )\n+    {\n+        PersistenceReport persistenceReport = trackerBundleService.commit( trackerBundle );\n+\n+        if ( !trackerBundle.isSkipSideEffects() )\n+        {\n+            List<TrackerSideEffectDataBundle> sideEffectDataBundles = Stream\n+                .of( TrackerType.ENROLLMENT, TrackerType.EVENT )\n+                .map( trackerType -> safelyGetSideEffectsDataBundles( persistenceReport, trackerType ) )\n+                .flatMap( Collection::stream )\n+                .collect( Collectors.toList() );\n+\n+            trackerBundleService.handleTrackerSideEffects( sideEffectDataBundles );\n+        }\n+\n+        return persistenceReport;\n+    }\n+\n+    private List<TrackerSideEffectDataBundle> safelyGetSideEffectsDataBundles( PersistenceReport persistenceReport,\n+        TrackerType trackerType )\n+    {\n+        return Optional.ofNullable( persistenceReport )\n+            .map( PersistenceReport::getTypeReportMap )\n+            .map( reportMap -> reportMap.get( trackerType ) )\n+            .map( TrackerTypeReport::getSideEffectDataBundles )\n+            .orElse( Collections.emptyList() );\n+    }\n+\n+    protected PersistenceReport deleteBundle( TrackerBundle trackerBundle )\n+    {\n+        return trackerBundleService.delete( trackerBundle );\n+    }\n+\n+    private void startImport( TrackerImportParams params )\n+    {\n+        if ( null != params.getJobConfiguration() )\n+        {\n+            notifier.notify( params.getJobConfiguration(),\n+                params.userStartInfo() + \" Import:Start\" );\n+        }\n+    }\n+\n+    private void notifyOps( TrackerImportParams params, String validationOps, TimingsStats opsTimer )\n+    {\n+        if ( null != params.getJobConfiguration() )\n+        {\n+            notifier\n+                .update( params.getJobConfiguration(), NotificationLevel.DEBUG,\n+                    params +\n+                        validationOps + \" completed in \"\n+                        + opsTimer.get( validationOps ) + \" Import:\"\n+                        + validationOps );\n+        }\n+    }\n+\n+    private void endImport( TrackerImportParams params, ImportReport importReport )\n+    {\n+        if ( null != params.getJobConfiguration() )\n+        {\n+            notifier.update( params.getJobConfiguration(),\n+                params +\n+                    \" finished in \" +\n+                    importReport.getTimingsStats().get( TOTAL_OPS ) + \" Import:Done\",\n+                true );\n+\n+            if ( params.getJobConfiguration().isInMemoryJob() )\n+            {\n+                notifier.addJobSummary( params.getJobConfiguration(), importReport, ImportReport.class );\n+            }\n+        }\n+    }\n+\n+    private void endImportWithError( TrackerImportParams params, ImportReport importReport, Exception e )\n+    {\n+        if ( null != params.getJobConfiguration() && params.getJobConfiguration().isInMemoryJob() )\n+        {\n+            notifier.update( params.getJobConfiguration(), NotificationLevel.ERROR,\n+                params +\n+                    \" failed with exception: \"\n+                    + e.getMessage() + \" Import:Error\",\n+                true );\n+\n+            if ( params.getJobConfiguration().isInMemoryJob() )\n+            {\n+                notifier.addJobSummary( params.getJobConfiguration(), importReport, ImportReport.class );\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Clone the TrackerImportReport and filters out validation data based on\n+     * the provided {@link PersistenceReport}.\n+     *\n+     * @return a copy of the current TrackerImportReport\n+     */\n+    @Override\n+    public ImportReport buildImportReport( ImportReport originalImportReport,\n+        TrackerBundleReportMode reportMode )\n+    {\n+        ImportReport.ImportReportBuilder importReportBuilder = ImportReport.builder()\n+            .status( originalImportReport.getStatus() )\n+            .stats( originalImportReport.getStats() )\n+            .persistenceReport( originalImportReport.getPersistenceReport() )\n+            .message( originalImportReport.getMessage() );\n+\n+        ValidationReport originalValidationReport = originalImportReport.getValidationReport();\n+        ValidationReport validationReport = ValidationReport.emptyReport();\n+        if ( originalValidationReport != null )\n+        {\n+            validationReport.addErrors( originalValidationReport.getErrors() );\n+        }\n+        if ( originalValidationReport != null && TrackerBundleReportMode.WARNINGS == reportMode )\n+        {\n+            validationReport.addWarnings( originalValidationReport.getWarnings() );\n+        }\n+        else if ( originalValidationReport != null && TrackerBundleReportMode.FULL == reportMode )\n+        {\n+            validationReport\n+                .addWarnings( originalValidationReport.getWarnings() );\n+            importReportBuilder.timingsStats( originalImportReport.getTimingsStats() );\n+        }\n+\n+        importReportBuilder.validationReport( validationReport );\n+\n+        return importReportBuilder.build();\n+    }\n+}\n", "next_change": null}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "message": "Merge commit", "committedDate": null}, {"oid": "399526882c2fbbf5600922b3c3b6030420cf4e96", "committedDate": "2020-07-13 12:23:07 +0200", "message": "feat: Run rule engine rules in new importer [DHIS2-7310]"}, {"oid": "2ed799f33ca26b918ed60473a3f097714f00492e", "committedDate": "2020-08-04 10:30:01 +0200", "message": "chore: Clean up code (#5877)"}, {"oid": "8374cb43e422eddc1f4c01bb715d8d285acc37be", "committedDate": "2020-08-10 11:38:43 +0200", "message": "Merge remote-tracking branch 'origin/master' into DHIS2-7310-merge"}, {"oid": "b010ab69f5dfb7b5ea0a5cfd438c1d7ebf3275de", "committedDate": "2020-08-24 14:13:32 +0200", "message": "fix: Implement atomic mode OBJECTS to commit only valid DTOs (#5958)"}, {"oid": "82a863c258aa34e592b309bb9d6081c4dc8f981b", "committedDate": "2020-08-27 14:46:58 +0200", "message": "feat: Add support for deletion of tracker objects [DHIS2-9085] (#5959)"}, {"oid": "cb2ee65c0210c0d4b2bd8851789da8d4adfaf04d", "committedDate": "2020-09-07 10:28:21 +0200", "message": "fix: [DHIS2-9287] Fix the stats in the import summary (#6062)"}, {"oid": "c2e0b3718cd8c7597ee5ec2e5193e7eafacf5827", "committedDate": "2020-09-08 09:47:19 +0200", "message": "fix: prevent Hibernate session errors with User object (#6063)"}, {"oid": "0d35843121f0ad3004fad015f1520c5b06a5c337", "committedDate": "2020-09-15 09:24:33 +0200", "message": "Merge 2.35 into master (#6149)"}, {"oid": "20ae7d1ed19072116ee92e47a760e281039159ce", "committedDate": "2020-09-15 11:32:35 +0200", "message": "fix: [DHIS2-9428] Use report mode parameter to filter report data (#6122)"}, {"oid": "8aaeab2ee4dd7a9ffa927147931dff8609ef787a", "committedDate": "2020-09-23 15:33:34 +0200", "message": "chore: Remove unused imports (#6219)"}, {"oid": "87ef26080354e452d282d374e4dc6de996844a1c", "committedDate": "2020-10-02 09:53:53 +0200", "message": "test: Add integration tests for tracker side effects (#5833)"}, {"oid": "0208c5478719a64f691e4255b6d839bc95200fb4", "committedDate": "2020-10-23 10:03:41 +0200", "message": "fix: [DHIS2-9817] [DHIS2-9825] serialization and deserialization of TrackerImportReport and excception handling (2.36) (#6473)"}, {"oid": "3934daf1873ee7d70faa0058706c2409575865e5", "committedDate": "2020-10-23 12:21:16 +0200", "message": "fix: [DHIS2-9428] Made ERRORS as default reportMode and stats returned correctly (2.36) (#6477)"}, {"oid": "695641b3509e973bf6cf9fd631d2641e55eeeff4", "committedDate": "2020-10-23 14:47:30 +0200", "message": "fix: [DHIS2-9286] handled exception messages filtered out in final report (2.36) (#6478)"}, {"oid": "0e72ebff22211397a74a8a6aa539bb2f19351370", "committedDate": "2020-10-29 15:26:27 +0100", "message": "fix: Fix lazy initialisation exceptions (#6520)"}, {"oid": "9d25538a10eb27d9dd38aca54900dd84a02b5897", "committedDate": "2020-11-09 12:23:56 +0100", "message": "fix: DHIS2-9855 fixing NPE (#6588)"}, {"oid": "6e28dbfdaea7ceacbe560fe82ddba1e94c6cd203", "committedDate": "2020-11-11 17:41:55 +0100", "message": "fix: Exception when importing TEI with relationship [DHIS2-9856] (#6552)"}, {"oid": "ba02f7daf7dbd5125f1b0215bcc9b25649d32a68", "committedDate": "2020-11-12 15:53:58 +0100", "message": "fix: Use same timers for report and logs (#6642)"}, {"oid": "1f0559c94f01b1497116fe5ba2e19f28f072a879", "committedDate": "2020-11-23 09:21:47 +0100", "message": "fix: invalid ignore count in Tracker Import stats (#6721)"}, {"oid": "89451b9b46d62bfc853b0ed26b6ec266771f3d58", "committedDate": "2020-11-23 10:57:11 +0100", "message": "fix: add report when validation failed a (#6738)"}, {"oid": "641aca580898b88dd99837fe8b5e0639027c6e0e", "committedDate": "2020-11-24 08:24:42 +0100", "message": "fix: Import report ignore values on stats objects (#6745)"}, {"oid": "3e799d196b8f73ad216ea100a07ddd5f7dfc53e0", "committedDate": "2020-11-30 16:37:14 +0100", "message": "fix: remove long running transaction during Tracker Import (#6782)"}, {"oid": "913d4ba468bf66783e901c4d43bd355d13cb16fa", "committedDate": "2020-12-02 16:44:17 +0100", "message": "refactor: Tracker Import params creation (#6814)"}, {"oid": "3ab88a5f4623a8c749246bedef34fcb926d185cb", "committedDate": "2020-12-08 10:40:14 +0100", "message": "fix: [DHIS2-7310] Move rule engine call and validations after bundle validation (#6843)"}, {"oid": "c4f1db1dab576bc73489a9e0a6d015acec2eab5b", "committedDate": "2020-12-15 15:09:02 +0100", "message": "feat: Tracker Import metadata cache (#6877)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "74425bc0f9d76839b6aafd0a8573f0d3d0464446", "committedDate": "2021-01-20 10:08:21 +0100", "message": "fix: Add skipSideEffects flag for new tracker importer"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "d3babd17c47704fd61fb23a664d8e88264bbcff0", "committedDate": "2021-02-15 16:32:19 +0100", "message": "fix: Dhis2 10432 (#7347)"}, {"oid": "f83b6227cef05563252d258a1050a8bd57c70018", "committedDate": "2021-12-07 16:41:41 +0100", "message": "chore: place default TrackerImportService next to interface (#9371)"}, {"oid": "242e8d7cc2a94f328778c2fbad9005509c5b3360", "committedDate": "2021-12-21 13:35:53 +0100", "message": "chore: simplify tracker import validation TECH-880 (#9510)"}, {"oid": "8bd63f9823397e39458bd1cdab383c33c3231019", "committedDate": "2021-12-22 09:32:29 +0100", "message": "chore: move factory methods into class it creates TECH-880 (#9518)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "1c6c72cc7c172b2a5708fb662e588b797d525a55", "committedDate": "2022-01-11 15:55:54 +0100", "message": "chore: bring TrackerValidationReport closer to ValidationErrorReporter TECH-880 (#9595)"}, {"oid": "7c0131dfcfbf72dad27dc5f0a3f6a776e286c79a", "committedDate": "2022-01-11 17:47:56 +0100", "message": "chore: make TrackerValidationReport add methods fluent and name Timing TECH-880 (#9601)"}, {"oid": "8ccf9a288a67e5ee5349024fd3d281372c64c956", "committedDate": "2022-02-22 13:25:35 +0800", "message": "feat: Merge User/UserCredentials into one DB table (#9754)"}, {"oid": "d99da048b6427aa16b080ab0a0e25eda4a2a0f96", "committedDate": "2022-05-09 13:53:18 +0200", "message": "feat: Refactor getCurrentUser() to return DHIS2 User object 2 (#10600)"}, {"oid": "2886ebea404331a2c3f78909bcb92cca1ecc7913", "committedDate": "2022-10-12 09:39:22 +0200", "message": "chore: only use @Nonnull and ban similar annotations (#12071)"}, {"oid": "8bd34731a22250d0a8166442ecad89d00c926ccf", "committedDate": "2022-12-12 17:11:18 +0100", "message": "chore: Cleanup tracker reporter (#12501)"}, {"oid": "e4b9a5c802805b26fe8255711d1f98e662f15c6d", "committedDate": "2022-12-14 10:01:20 +0100", "message": "chore: Rename and clean up report model objects [TECH-14298] (#12525)"}, {"oid": "17085ef1b029fa636afa4c26f2466fb3b95be1e2", "committedDate": "2022-12-15 09:50:15 +0100", "message": "chore: Decouple validation package from report package [DHIS2-14298] (#12558)"}, {"oid": "2d2c1a72fe29e5330e1b3f799f4ab915b5a5bbf0", "committedDate": "2022-12-16 08:41:19 +0000", "message": "chore: remove prefix from TrackerValidationService (#12589)"}, {"oid": "f7407b037eca371200b710628ba5c9e66fe2971a", "committedDate": "2022-12-19 08:23:40 +0100", "message": "chore: Only expose immutable result from validation package [DHIS2-14298] (#12581)"}, {"oid": "2b482819097a3d8498c8a5f72eeffc958da3b95c", "committedDate": "2022-12-20 10:14:42 +0100", "message": "chore: don't mutate bundle in validation (#12620)"}, {"oid": "43725fed360d23cefb272443d6b3cf36cb72ff74", "committedDate": "2023-01-23 11:12:38 +0100", "message": "refactor: Use java Map#of over Guava ImmutableMap#builder (#12804)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU5ODU4Nw==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r445598587", "body": "would it be possible to add a Javadoc to this class and to the public methods, it's not very clear what is the purpose of this class", "bodyText": "would it be possible to add a Javadoc to this class and to the public methods, it's not very clear what is the purpose of this class", "bodyHTML": "<p dir=\"auto\">would it be possible to add a Javadoc to this class and to the public methods, it's not very clear what is the purpose of this class</p>", "author": "luciano-fiandesio", "createdAt": "2020-06-25T14:24:48Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java", "diffHunk": "@@ -48,6 +51,7 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n+import java.util.stream.Stream;", "originalCommit": "e7e003a2211cdf3f412ce75f95ef0f6be1973434", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d2feae85e2920e2ecd5cce7d310e926ae797cd2c", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java\nindex 0c2148d935..045119dab8 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java\n", "chunk": "@@ -54,7 +54,12 @@ import java.util.Set;\n import java.util.stream.Stream;\n \n /**\n+ * This class \"collects\" identifiers from all input objects.\n+ * This resulting map of all identifiers will then be used to \"preheat/cache\"\n+ * all the objects needed into memory to speed up the validation process.\n+ *\n  * @author Morten Olav Hansen <mortenoh@gmail.com>\n+ * @see org.hisp.dhis.tracker.preheat.DefaultTrackerPreheatService\n  */\n public class TrackerIdentifierCollector\n {\n", "next_change": null}]}, "revised_code_in_main": {"commit": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java\nindex 0c2148d935..fa921b7cf1 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java\n", "chunk": "@@ -54,7 +54,12 @@ import java.util.Set;\n import java.util.stream.Stream;\n \n /**\n+ * This class \"collects\" identifiers from all input objects.\n+ * This resulting map of all identifiers will then be used to \"preheat/cache\"\n+ * all the objects needed into memory to speed up the validation process.\n+ *\n  * @author Morten Olav Hansen <mortenoh@gmail.com>\n+ * @see org.hisp.dhis.tracker.preheat.DefaultTrackerPreheatService\n  */\n public class TrackerIdentifierCollector\n {\n", "next_change": {"commit": "3e799d196b8f73ad216ea100a07ddd5f7dfc53e0", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java\nindex fa921b7cf1..d181aaba47 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java\n", "chunk": "@@ -63,19 +64,7 @@ import java.util.stream.Stream;\n  */\n public class TrackerIdentifierCollector\n {\n-    public static Map<Class<?>, Set<String>> collect( TrackerBundleParams params )\n-    {\n-        Map<Class<?>, Set<String>> map = new HashMap<>();\n-\n-        collectTrackedEntities( map, params.getIdentifiers(), params.getTrackedEntities() );\n-        collectEnrollments( map, params.getIdentifiers(), params.getEnrollments() );\n-        collectEvents( map, params.getIdentifiers(), params.getEvents() );\n-        collectRelationships( map, params.getIdentifiers(), params.getRelationships() );\n-\n-        return map;\n-    }\n-\n-    public static Map<Class<?>, Set<String>> collect( TrackerPreheatParams params )\n+    public static Map<Class<?>, Set<String>> collect( TrackerImportParams params )\n     {\n         Map<Class<?>, Set<String>> map = new HashMap<>();\n \n", "next_change": {"commit": "cececb7511986f26a3af5bf3d2f4bccb3b2bbda9", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java\nindex d181aaba47..734adff1a5 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java\n", "chunk": "@@ -64,6 +67,8 @@ import com.google.common.base.MoreObjects;\n  */\n public class TrackerIdentifierCollector\n {\n+    public final static String ID_WILDCARD = \"*\";\n+\n     public static Map<Class<?>, Set<String>> collect( TrackerImportParams params )\n     {\n         Map<Class<?>, Set<String>> map = new HashMap<>();\n", "next_change": {"commit": "16ae2da89c2d883763e33d9d0833f9b033d711c0", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java\nindex 734adff1a5..eeeb3a73ee 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java\n", "chunk": "@@ -69,7 +70,8 @@ public class TrackerIdentifierCollector\n {\n     public final static String ID_WILDCARD = \"*\";\n \n-    public static Map<Class<?>, Set<String>> collect( TrackerImportParams params )\n+    public static Map<Class<?>, Set<String>> collect( TrackerImportParams params,\n+        Map<Class<? extends IdentifiableObject>, IdentifiableObject> defaults )\n     {\n         Map<Class<?>, Set<String>> map = new HashMap<>();\n \n", "next_change": {"commit": "5e19605ff1a5eacc26337747a57ba2cec60446ec", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java\nindex eeeb3a73ee..ac185b4ef2 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java\n", "chunk": "@@ -66,11 +68,15 @@ import com.google.common.collect.ImmutableSet;\n  * @author Morten Olav Hansen <mortenoh@gmail.com>\n  * @see org.hisp.dhis.tracker.preheat.DefaultTrackerPreheatService\n  */\n+@Component\n+@RequiredArgsConstructor\n public class TrackerIdentifierCollector\n {\n     public final static String ID_WILDCARD = \"*\";\n \n-    public static Map<Class<?>, Set<String>> collect( TrackerImportParams params,\n+    private final ProgramRuleService programRuleService;\n+\n+    public Map<Class<?>, Set<String>> collect( TrackerImportParams params,\n         Map<Class<? extends IdentifiableObject>, IdentifiableObject> defaults )\n     {\n         Map<Class<?>, Set<String>> map = new HashMap<>();\n", "next_change": {"commit": "ea76fa86409613c9766d4508d65c88ac55c413c3", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java\nindex ac185b4ef2..cebcc13a9f 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java\n", "chunk": "@@ -85,7 +83,8 @@ public class TrackerIdentifierCollector\n         collectEnrollments( map, params.getIdentifiers(), params.getEnrollments() );\n         collectEvents( map, params.getIdentifiers(), params.getEvents() );\n         collectRelationships( map, params.getRelationships() );\n-        // Using \"*\" signals that all the entities of the given type have to be preloaded in the Preheat\n+        // Using \"*\" signals that all the entities of the given type have to be\n+        // preloaded in the Preheat\n         map.put( TrackedEntityType.class, ImmutableSet.of( ID_WILDCARD ) );\n         map.put( RelationshipType.class, ImmutableSet.of( ID_WILDCARD ) );\n         collectDefaults( map, params.getIdentifiers(), defaults );\n", "next_change": {"commit": "3a27829539ea20a43992e97f33a1e0e2e3131ef0", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java\nindex cebcc13a9f..47fe6e78f4 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java\n", "chunk": "@@ -77,166 +87,149 @@ public class TrackerIdentifierCollector\n     public Map<Class<?>, Set<String>> collect( TrackerImportParams params,\n         Map<Class<? extends IdentifiableObject>, IdentifiableObject> defaults )\n     {\n-        Map<Class<?>, Set<String>> map = new HashMap<>();\n+        final Map<Class<?>, Set<String>> identifiers = new HashMap<>();\n \n-        collectTrackedEntities( map, params.getIdentifiers(), params.getTrackedEntities() );\n-        collectEnrollments( map, params.getIdentifiers(), params.getEnrollments() );\n-        collectEvents( map, params.getIdentifiers(), params.getEvents() );\n-        collectRelationships( map, params.getRelationships() );\n+        collectTrackedEntities( identifiers, params.getTrackedEntities() );\n+        collectEnrollments( identifiers, params.getEnrollments() );\n+        collectEvents( identifiers, params.getEvents() );\n+        collectRelationships( identifiers, params.getRelationships() );\n         // Using \"*\" signals that all the entities of the given type have to be\n         // preloaded in the Preheat\n-        map.put( TrackedEntityType.class, ImmutableSet.of( ID_WILDCARD ) );\n-        map.put( RelationshipType.class, ImmutableSet.of( ID_WILDCARD ) );\n-        collectDefaults( map, params.getIdentifiers(), defaults );\n+        identifiers.put( TrackedEntityType.class, ImmutableSet.of( ID_WILDCARD ) );\n+        identifiers.put( RelationshipType.class, ImmutableSet.of( ID_WILDCARD ) );\n+        collectDefaults( identifiers, defaults );\n \n-        collectProgramRulesFields( map, params.getIdentifiers() );\n-        return map;\n+        collectProgramRulesFields( identifiers );\n+        return identifiers;\n     }\n \n-    private void collectProgramRulesFields( Map<Class<?>, Set<String>> map,\n-        TrackerIdentifierParams params )\n+    private void collectProgramRulesFields( Map<Class<?>, Set<String>> map )\n     {\n-        Set<String> programs = map.get( Program.class );\n-        if ( programs != null )\n-        {\n-            List<ProgramRule> programRules = programRuleService.getProgramRuleByProgram( programs );\n-            Set<String> dataElements = programRules.stream()\n-                .flatMap( pr -> pr.getProgramRuleActions().stream() )\n-                .filter( a -> Objects.nonNull( a.getDataElement() ) )\n-                .map( a -> a.getDataElement().getUid() )\n-                .collect( Collectors.toSet() );\n-\n-            dataElements\n-                .forEach(\n-                    de -> addIdentifier( map, DataElement.class, params.getDataElementIdScheme().getIdScheme(), de ) );\n-\n-            Set<String> attributes = programRules.stream()\n-                .flatMap( pr -> pr.getProgramRuleActions().stream() )\n-                .filter( a -> Objects.nonNull( a.getAttribute() ) )\n-                .map( a -> a.getAttribute().getUid() )\n-                .collect( Collectors.toSet() );\n-\n-            attributes.forEach(\n-                attribute -> addIdentifier( map, TrackedEntityAttribute.class, TrackerIdScheme.UID, attribute ) );\n-        }\n+        List<ProgramRule> programRules = programRuleService.getProgramRulesLinkedToTeaOrDe();\n+        Set<String> dataElements = programRules.stream()\n+            .flatMap( pr -> pr.getProgramRuleActions().stream() )\n+            .filter( a -> Objects.nonNull( a.getDataElement() ) )\n+            .map( a -> a.getDataElement().getUid() )\n+            .collect( Collectors.toSet() );\n+\n+        dataElements.forEach( de -> addIdentifier( map, DataElement.class, de ) );\n+\n+        Set<String> attributes = programRules.stream()\n+            .flatMap( pr -> pr.getProgramRuleActions().stream() )\n+            .filter( a -> Objects.nonNull( a.getAttribute() ) )\n+            .map( a -> a.getAttribute().getUid() )\n+            .collect( Collectors.toSet() );\n+\n+        attributes.forEach( attribute -> addIdentifier( map, TrackedEntityAttribute.class, attribute ) );\n     }\n \n     private void collectDefaults( Map<Class<?>, Set<String>> map,\n-        TrackerIdentifierParams params,\n         Map<Class<? extends IdentifiableObject>, IdentifiableObject> defaults )\n     {\n-        defaults.forEach( ( defaultClass, defaultMetadata ) -> addIdentifier( map, defaultClass,\n-            params.getIdScheme().getIdScheme(), defaultMetadata.getUid() ) );\n+        defaults.forEach(\n+            ( defaultClass, defaultMetadata ) -> addIdentifier( map, defaultClass, defaultMetadata.getUid() ) );\n     }\n \n-    private void collectTrackedEntities(\n-        Map<Class<?>, Set<String>> map, TrackerIdentifierParams params, List<TrackedEntity> trackedEntities )\n+    private void collectTrackedEntities( Map<Class<?>, Set<String>> identifiers, List<TrackedEntity> trackedEntities )\n     {\n         trackedEntities.forEach( trackedEntity -> {\n-            addIdentifier( map, TrackedEntity.class, params.getIdScheme().getIdScheme(),\n-                trackedEntity.getTrackedEntity() );\n-            addIdentifier( map, OrganisationUnit.class, params.getOrgUnitIdScheme().getIdScheme(),\n-                trackedEntity.getOrgUnit() );\n+            addIdentifier( identifiers, TrackedEntity.class, trackedEntity.getTrackedEntity() );\n+            addIdentifier( identifiers, OrganisationUnit.class, trackedEntity.getOrgUnit() );\n \n-            collectEnrollments( map, params, trackedEntity.getEnrollments() );\n+            collectEnrollments( identifiers, trackedEntity.getEnrollments() );\n \n-            trackedEntity.getAttributes().forEach( attribute -> addIdentifier( map, TrackedEntityAttribute.class,\n-                TrackerIdScheme.UID, attribute.getAttribute() ) );\n+            trackedEntity.getAttributes()\n+                .forEach( attribute -> addIdentifier( identifiers, TrackedEntityAttribute.class,\n+                    attribute.getAttribute() ) );\n         } );\n     }\n \n-    private void collectEnrollments(\n-        Map<Class<?>, Set<String>> map, TrackerIdentifierParams params, List<Enrollment> enrollments )\n+    private void collectEnrollments( Map<Class<?>, Set<String>> identifiers, List<Enrollment> enrollments )\n     {\n         enrollments.forEach( enrollment -> {\n-            addIdentifier( map, TrackedEntity.class, TrackerIdScheme.UID, enrollment.getTrackedEntity() );\n-            addIdentifier( map, Enrollment.class, TrackerIdScheme.UID, enrollment.getEnrollment() );\n-            addIdentifier( map, Program.class, params.getProgramIdScheme().getIdScheme(), enrollment.getProgram() );\n-            addIdentifier( map, OrganisationUnit.class, params.getOrgUnitIdScheme().getIdScheme(),\n-                enrollment.getOrgUnit() );\n-\n-            collectNotes( map, enrollment.getNotes() );\n-            collectEvents( map, params, enrollment.getEvents() );\n-            enrollment.getAttributes().forEach( attribute -> addIdentifier( map, TrackedEntityAttribute.class,\n-                TrackerIdScheme.UID, attribute.getAttribute() ) );\n+            addIdentifier( identifiers, TrackedEntity.class, enrollment.getTrackedEntity() );\n+            addIdentifier( identifiers, Enrollment.class, enrollment.getEnrollment() );\n+            addIdentifier( identifiers, Program.class, enrollment.getProgram() );\n+            addIdentifier( identifiers, OrganisationUnit.class, enrollment.getOrgUnit() );\n+\n+            collectNotes( identifiers, enrollment.getNotes() );\n+            collectEvents( identifiers, enrollment.getEvents() );\n+            enrollment.getAttributes().forEach( attribute -> addIdentifier( identifiers, TrackedEntityAttribute.class,\n+                attribute.getAttribute() ) );\n         } );\n     }\n \n-    private void collectNotes( Map<Class<?>, Set<String>> map, List<Note> notes )\n+    private void collectNotes( Map<Class<?>, Set<String>> identifiers, List<Note> notes )\n     {\n         notes.forEach(\n             note -> {\n                 if ( !StringUtils.isEmpty( note.getNote() ) && !StringUtils.isEmpty( note.getValue() ) )\n                 {\n-                    addIdentifier( map, TrackedEntityComment.class, TrackerIdScheme.UID, note.getNote() );\n+                    addIdentifier( identifiers, TrackedEntityComment.class, note.getNote() );\n                 }\n             } );\n     }\n \n-    private void collectEvents(\n-        Map<Class<?>, Set<String>> map, TrackerIdentifierParams params, List<Event> events )\n+    private void collectEvents( Map<Class<?>, Set<String>> identifiers, List<Event> events )\n     {\n         events.forEach( event -> {\n-            addIdentifier( map, TrackedEntity.class, TrackerIdScheme.UID, event.getTrackedEntity() );\n-            addIdentifier( map, Enrollment.class, TrackerIdScheme.UID, event.getEnrollment() );\n-            addIdentifier( map, Event.class, TrackerIdScheme.UID, event.getEvent() );\n-            addIdentifier( map, Program.class, params.getProgramIdScheme().getIdScheme(), event.getProgram() );\n-            addIdentifier( map, ProgramStage.class, params.getProgramStageIdScheme().getIdScheme(),\n-                event.getProgramStage() );\n-            addIdentifier( map, OrganisationUnit.class, params.getOrgUnitIdScheme().getIdScheme(), event.getOrgUnit() );\n+            addIdentifier( identifiers, Enrollment.class, event.getEnrollment() );\n+            addIdentifier( identifiers, Event.class, event.getEvent() );\n+            addIdentifier( identifiers, Program.class, event.getProgram() );\n+            addIdentifier( identifiers, ProgramStage.class, event.getProgramStage() );\n+            addIdentifier( identifiers, OrganisationUnit.class, event.getOrgUnit() );\n \n             Stream\n                 .of( MoreObjects.firstNonNull( event.getAttributeCategoryOptions(), \"\" ).split( TextUtils.SEMICOLON ) )\n                 .forEach(\n-                    s -> addIdentifier( map, CategoryOption.class, params.getCategoryOptionIdScheme().getIdScheme(),\n-                        s ) );\n+                    s -> addIdentifier( identifiers, CategoryOption.class, s ) );\n \n-            addIdentifier( map, CategoryOptionCombo.class, params.getCategoryOptionComboIdScheme().getIdScheme(),\n-                event.getAttributeOptionCombo() );\n+            addIdentifier( identifiers, CategoryOptionCombo.class, event.getAttributeOptionCombo() );\n \n             event.getDataValues()\n-                .forEach( dv -> addIdentifier( map, DataElement.class, params.getDataElementIdScheme().getIdScheme(),\n-                    dv.getDataElement() ) );\n+                .forEach( dv -> addIdentifier( identifiers, DataElement.class, dv.getDataElement() ) );\n \n-            collectNotes( map, event.getNotes() );\n+            collectNotes( identifiers, event.getNotes() );\n \n         } );\n     }\n \n-    private void collectRelationships(\n-        Map<Class<?>, Set<String>> map, List<Relationship> relationships )\n+    private void collectRelationships( Map<Class<?>, Set<String>> identifiers, List<Relationship> relationships )\n     {\n-        relationships.parallelStream().forEach( relationship -> {\n-            addIdentifier( map, Relationship.class, TrackerIdScheme.UID, relationship.getRelationship() );\n+        relationships.forEach( relationship -> {\n+\n+            RelationshipKey relationshipKey = RelationshipPreheatKeySupport.getRelationshipKey( relationship );\n+\n+            addIdentifier( identifiers, Relationship.class, relationshipKey.asString() );\n+            addIdentifier( identifiers, Relationship.class, relationship.getRelationship() );\n+\n             if ( relationship.getFrom() != null )\n             {\n-                addIdentifier( map, TrackedEntity.class, TrackerIdScheme.UID,\n-                    relationship.getFrom().getTrackedEntity() );\n-                addIdentifier( map, Enrollment.class, TrackerIdScheme.UID, relationship.getFrom().getEnrollment() );\n-                addIdentifier( map, Event.class, TrackerIdScheme.UID, relationship.getFrom().getEvent() );\n+                addIdentifier( identifiers, TrackedEntity.class, relationship.getFrom().getTrackedEntity() );\n+                addIdentifier( identifiers, Enrollment.class, relationship.getFrom().getEnrollment() );\n+                addIdentifier( identifiers, Event.class, relationship.getFrom().getEvent() );\n             }\n             if ( relationship.getTo() != null )\n             {\n-                addIdentifier( map, TrackedEntity.class, TrackerIdScheme.UID, relationship.getTo().getTrackedEntity() );\n-                addIdentifier( map, Enrollment.class, TrackerIdScheme.UID, relationship.getTo().getEnrollment() );\n-                addIdentifier( map, Event.class, TrackerIdScheme.UID, relationship.getTo().getEvent() );\n+                addIdentifier( identifiers, TrackedEntity.class, relationship.getTo().getTrackedEntity() );\n+                addIdentifier( identifiers, Enrollment.class, relationship.getTo().getEnrollment() );\n+                addIdentifier( identifiers, Event.class, relationship.getTo().getEvent() );\n             }\n         } );\n     }\n \n-    private <T> void addIdentifier( Map<Class<?>, Set<String>> map,\n-        Class<T> klass, TrackerIdScheme identifier, String str )\n+    private <T> void addIdentifier( Map<Class<?>, Set<String>> identifiers, Class<T> klass, String identifier )\n     {\n-        if ( StringUtils.isEmpty( str ) || map == null || klass == null || identifier == null )\n+        if ( StringUtils.isEmpty( identifier ) || identifiers == null || klass == null )\n         {\n             return;\n         }\n \n-        if ( !map.containsKey( klass ) )\n+        if ( !identifiers.containsKey( klass ) )\n         {\n-            map.put( klass, new HashSet<>() );\n+            identifiers.put( klass, new HashSet<>() );\n         }\n \n-        map.get( klass ).add( str );\n+        identifiers.get( klass ).add( identifier );\n     }\n }\n", "next_change": {"commit": "e1781813dcec0c675de8b3a0606e47dce3509290", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java\nindex 47fe6e78f4..e79aa44589 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java\n", "chunk": "@@ -225,11 +232,8 @@ public class TrackerIdentifierCollector\n             return;\n         }\n \n-        if ( !identifiers.containsKey( klass ) )\n-        {\n-            identifiers.put( klass, new HashSet<>() );\n-        }\n-\n-        identifiers.get( klass ).add( identifier );\n+        identifiers\n+            .computeIfAbsent( klass, k -> new HashSet<>() )\n+            .add( identifier );\n     }\n }\n", "next_change": {"commit": "75c6c5d054b53569dda7e85f82afac6f6cd6b4a4", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java\nindex e79aa44589..5bacc5630d 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java\n", "chunk": "@@ -236,4 +217,4 @@ public class TrackerIdentifierCollector\n             .computeIfAbsent( klass, k -> new HashSet<>() )\n             .add( identifier );\n     }\n-}\n+}\n\\ No newline at end of file\n", "next_change": null}]}}]}}]}}]}}]}}]}}, {"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java\nindex d181aaba47..734adff1a5 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java\n", "chunk": "@@ -71,7 +76,10 @@ public class TrackerIdentifierCollector\n         collectTrackedEntities( map, params.getIdentifiers(), params.getTrackedEntities() );\n         collectEnrollments( map, params.getIdentifiers(), params.getEnrollments() );\n         collectEvents( map, params.getIdentifiers(), params.getEvents() );\n-        collectRelationships( map, params.getIdentifiers(), params.getRelationships() );\n+        collectRelationships( map, params.getRelationships() );\n+        // Using \"*\" signals that all the entities of the given type have to be preloaded in the Preheat\n+        map.put( TrackedEntityType.class, ImmutableSet.of( ID_WILDCARD ) );\n+        map.put( RelationshipType.class, ImmutableSet.of( ID_WILDCARD ) );\n \n         return map;\n     }\n", "next_change": {"commit": "16ae2da89c2d883763e33d9d0833f9b033d711c0", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java\nindex 734adff1a5..eeeb3a73ee 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java\n", "chunk": "@@ -80,10 +82,19 @@ public class TrackerIdentifierCollector\n         // Using \"*\" signals that all the entities of the given type have to be preloaded in the Preheat\n         map.put( TrackedEntityType.class, ImmutableSet.of( ID_WILDCARD ) );\n         map.put( RelationshipType.class, ImmutableSet.of( ID_WILDCARD ) );\n+        collectDefaults( map, params.getIdentifiers(), defaults );\n \n         return map;\n     }\n \n+    private static void collectDefaults( Map<Class<?>, Set<String>> map,\n+        TrackerIdentifierParams params,\n+        Map<Class<? extends IdentifiableObject>, IdentifiableObject> defaults )\n+    {\n+        defaults.forEach( ( defaultClass, defaultMetadata ) ->\n+            addIdentifier( map, defaultClass, params.getIdScheme().getIdScheme(), defaultMetadata.getUid() ) );\n+    }\n+\n     private static void collectTrackedEntities(\n         Map<Class<?>, Set<String>> map, TrackerIdentifierParams params, List<TrackedEntity> trackedEntities )\n     {\n", "next_change": {"commit": "5e19605ff1a5eacc26337747a57ba2cec60446ec", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java\nindex eeeb3a73ee..ac185b4ef2 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java\n", "chunk": "@@ -95,7 +130,7 @@ public class TrackerIdentifierCollector\n             addIdentifier( map, defaultClass, params.getIdScheme().getIdScheme(), defaultMetadata.getUid() ) );\n     }\n \n-    private static void collectTrackedEntities(\n+    private void collectTrackedEntities(\n         Map<Class<?>, Set<String>> map, TrackerIdentifierParams params, List<TrackedEntity> trackedEntities )\n     {\n         trackedEntities.forEach( trackedEntity -> {\n", "next_change": {"commit": "ea76fa86409613c9766d4508d65c88ac55c413c3", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java\nindex ac185b4ef2..cebcc13a9f 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java\n", "chunk": "@@ -126,8 +125,8 @@ public class TrackerIdentifierCollector\n         TrackerIdentifierParams params,\n         Map<Class<? extends IdentifiableObject>, IdentifiableObject> defaults )\n     {\n-        defaults.forEach( ( defaultClass, defaultMetadata ) ->\n-            addIdentifier( map, defaultClass, params.getIdScheme().getIdScheme(), defaultMetadata.getUid() ) );\n+        defaults.forEach( ( defaultClass, defaultMetadata ) -> addIdentifier( map, defaultClass,\n+            params.getIdScheme().getIdScheme(), defaultMetadata.getUid() ) );\n     }\n \n     private void collectTrackedEntities(\n", "next_change": {"commit": "3a27829539ea20a43992e97f33a1e0e2e3131ef0", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java\nindex cebcc13a9f..47fe6e78f4 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java\n", "chunk": "@@ -77,166 +87,149 @@ public class TrackerIdentifierCollector\n     public Map<Class<?>, Set<String>> collect( TrackerImportParams params,\n         Map<Class<? extends IdentifiableObject>, IdentifiableObject> defaults )\n     {\n-        Map<Class<?>, Set<String>> map = new HashMap<>();\n+        final Map<Class<?>, Set<String>> identifiers = new HashMap<>();\n \n-        collectTrackedEntities( map, params.getIdentifiers(), params.getTrackedEntities() );\n-        collectEnrollments( map, params.getIdentifiers(), params.getEnrollments() );\n-        collectEvents( map, params.getIdentifiers(), params.getEvents() );\n-        collectRelationships( map, params.getRelationships() );\n+        collectTrackedEntities( identifiers, params.getTrackedEntities() );\n+        collectEnrollments( identifiers, params.getEnrollments() );\n+        collectEvents( identifiers, params.getEvents() );\n+        collectRelationships( identifiers, params.getRelationships() );\n         // Using \"*\" signals that all the entities of the given type have to be\n         // preloaded in the Preheat\n-        map.put( TrackedEntityType.class, ImmutableSet.of( ID_WILDCARD ) );\n-        map.put( RelationshipType.class, ImmutableSet.of( ID_WILDCARD ) );\n-        collectDefaults( map, params.getIdentifiers(), defaults );\n+        identifiers.put( TrackedEntityType.class, ImmutableSet.of( ID_WILDCARD ) );\n+        identifiers.put( RelationshipType.class, ImmutableSet.of( ID_WILDCARD ) );\n+        collectDefaults( identifiers, defaults );\n \n-        collectProgramRulesFields( map, params.getIdentifiers() );\n-        return map;\n+        collectProgramRulesFields( identifiers );\n+        return identifiers;\n     }\n \n-    private void collectProgramRulesFields( Map<Class<?>, Set<String>> map,\n-        TrackerIdentifierParams params )\n+    private void collectProgramRulesFields( Map<Class<?>, Set<String>> map )\n     {\n-        Set<String> programs = map.get( Program.class );\n-        if ( programs != null )\n-        {\n-            List<ProgramRule> programRules = programRuleService.getProgramRuleByProgram( programs );\n-            Set<String> dataElements = programRules.stream()\n-                .flatMap( pr -> pr.getProgramRuleActions().stream() )\n-                .filter( a -> Objects.nonNull( a.getDataElement() ) )\n-                .map( a -> a.getDataElement().getUid() )\n-                .collect( Collectors.toSet() );\n-\n-            dataElements\n-                .forEach(\n-                    de -> addIdentifier( map, DataElement.class, params.getDataElementIdScheme().getIdScheme(), de ) );\n-\n-            Set<String> attributes = programRules.stream()\n-                .flatMap( pr -> pr.getProgramRuleActions().stream() )\n-                .filter( a -> Objects.nonNull( a.getAttribute() ) )\n-                .map( a -> a.getAttribute().getUid() )\n-                .collect( Collectors.toSet() );\n-\n-            attributes.forEach(\n-                attribute -> addIdentifier( map, TrackedEntityAttribute.class, TrackerIdScheme.UID, attribute ) );\n-        }\n+        List<ProgramRule> programRules = programRuleService.getProgramRulesLinkedToTeaOrDe();\n+        Set<String> dataElements = programRules.stream()\n+            .flatMap( pr -> pr.getProgramRuleActions().stream() )\n+            .filter( a -> Objects.nonNull( a.getDataElement() ) )\n+            .map( a -> a.getDataElement().getUid() )\n+            .collect( Collectors.toSet() );\n+\n+        dataElements.forEach( de -> addIdentifier( map, DataElement.class, de ) );\n+\n+        Set<String> attributes = programRules.stream()\n+            .flatMap( pr -> pr.getProgramRuleActions().stream() )\n+            .filter( a -> Objects.nonNull( a.getAttribute() ) )\n+            .map( a -> a.getAttribute().getUid() )\n+            .collect( Collectors.toSet() );\n+\n+        attributes.forEach( attribute -> addIdentifier( map, TrackedEntityAttribute.class, attribute ) );\n     }\n \n     private void collectDefaults( Map<Class<?>, Set<String>> map,\n-        TrackerIdentifierParams params,\n         Map<Class<? extends IdentifiableObject>, IdentifiableObject> defaults )\n     {\n-        defaults.forEach( ( defaultClass, defaultMetadata ) -> addIdentifier( map, defaultClass,\n-            params.getIdScheme().getIdScheme(), defaultMetadata.getUid() ) );\n+        defaults.forEach(\n+            ( defaultClass, defaultMetadata ) -> addIdentifier( map, defaultClass, defaultMetadata.getUid() ) );\n     }\n \n-    private void collectTrackedEntities(\n-        Map<Class<?>, Set<String>> map, TrackerIdentifierParams params, List<TrackedEntity> trackedEntities )\n+    private void collectTrackedEntities( Map<Class<?>, Set<String>> identifiers, List<TrackedEntity> trackedEntities )\n     {\n         trackedEntities.forEach( trackedEntity -> {\n-            addIdentifier( map, TrackedEntity.class, params.getIdScheme().getIdScheme(),\n-                trackedEntity.getTrackedEntity() );\n-            addIdentifier( map, OrganisationUnit.class, params.getOrgUnitIdScheme().getIdScheme(),\n-                trackedEntity.getOrgUnit() );\n+            addIdentifier( identifiers, TrackedEntity.class, trackedEntity.getTrackedEntity() );\n+            addIdentifier( identifiers, OrganisationUnit.class, trackedEntity.getOrgUnit() );\n \n-            collectEnrollments( map, params, trackedEntity.getEnrollments() );\n+            collectEnrollments( identifiers, trackedEntity.getEnrollments() );\n \n-            trackedEntity.getAttributes().forEach( attribute -> addIdentifier( map, TrackedEntityAttribute.class,\n-                TrackerIdScheme.UID, attribute.getAttribute() ) );\n+            trackedEntity.getAttributes()\n+                .forEach( attribute -> addIdentifier( identifiers, TrackedEntityAttribute.class,\n+                    attribute.getAttribute() ) );\n         } );\n     }\n \n-    private void collectEnrollments(\n-        Map<Class<?>, Set<String>> map, TrackerIdentifierParams params, List<Enrollment> enrollments )\n+    private void collectEnrollments( Map<Class<?>, Set<String>> identifiers, List<Enrollment> enrollments )\n     {\n         enrollments.forEach( enrollment -> {\n-            addIdentifier( map, TrackedEntity.class, TrackerIdScheme.UID, enrollment.getTrackedEntity() );\n-            addIdentifier( map, Enrollment.class, TrackerIdScheme.UID, enrollment.getEnrollment() );\n-            addIdentifier( map, Program.class, params.getProgramIdScheme().getIdScheme(), enrollment.getProgram() );\n-            addIdentifier( map, OrganisationUnit.class, params.getOrgUnitIdScheme().getIdScheme(),\n-                enrollment.getOrgUnit() );\n-\n-            collectNotes( map, enrollment.getNotes() );\n-            collectEvents( map, params, enrollment.getEvents() );\n-            enrollment.getAttributes().forEach( attribute -> addIdentifier( map, TrackedEntityAttribute.class,\n-                TrackerIdScheme.UID, attribute.getAttribute() ) );\n+            addIdentifier( identifiers, TrackedEntity.class, enrollment.getTrackedEntity() );\n+            addIdentifier( identifiers, Enrollment.class, enrollment.getEnrollment() );\n+            addIdentifier( identifiers, Program.class, enrollment.getProgram() );\n+            addIdentifier( identifiers, OrganisationUnit.class, enrollment.getOrgUnit() );\n+\n+            collectNotes( identifiers, enrollment.getNotes() );\n+            collectEvents( identifiers, enrollment.getEvents() );\n+            enrollment.getAttributes().forEach( attribute -> addIdentifier( identifiers, TrackedEntityAttribute.class,\n+                attribute.getAttribute() ) );\n         } );\n     }\n \n-    private void collectNotes( Map<Class<?>, Set<String>> map, List<Note> notes )\n+    private void collectNotes( Map<Class<?>, Set<String>> identifiers, List<Note> notes )\n     {\n         notes.forEach(\n             note -> {\n                 if ( !StringUtils.isEmpty( note.getNote() ) && !StringUtils.isEmpty( note.getValue() ) )\n                 {\n-                    addIdentifier( map, TrackedEntityComment.class, TrackerIdScheme.UID, note.getNote() );\n+                    addIdentifier( identifiers, TrackedEntityComment.class, note.getNote() );\n                 }\n             } );\n     }\n \n-    private void collectEvents(\n-        Map<Class<?>, Set<String>> map, TrackerIdentifierParams params, List<Event> events )\n+    private void collectEvents( Map<Class<?>, Set<String>> identifiers, List<Event> events )\n     {\n         events.forEach( event -> {\n-            addIdentifier( map, TrackedEntity.class, TrackerIdScheme.UID, event.getTrackedEntity() );\n-            addIdentifier( map, Enrollment.class, TrackerIdScheme.UID, event.getEnrollment() );\n-            addIdentifier( map, Event.class, TrackerIdScheme.UID, event.getEvent() );\n-            addIdentifier( map, Program.class, params.getProgramIdScheme().getIdScheme(), event.getProgram() );\n-            addIdentifier( map, ProgramStage.class, params.getProgramStageIdScheme().getIdScheme(),\n-                event.getProgramStage() );\n-            addIdentifier( map, OrganisationUnit.class, params.getOrgUnitIdScheme().getIdScheme(), event.getOrgUnit() );\n+            addIdentifier( identifiers, Enrollment.class, event.getEnrollment() );\n+            addIdentifier( identifiers, Event.class, event.getEvent() );\n+            addIdentifier( identifiers, Program.class, event.getProgram() );\n+            addIdentifier( identifiers, ProgramStage.class, event.getProgramStage() );\n+            addIdentifier( identifiers, OrganisationUnit.class, event.getOrgUnit() );\n \n             Stream\n                 .of( MoreObjects.firstNonNull( event.getAttributeCategoryOptions(), \"\" ).split( TextUtils.SEMICOLON ) )\n                 .forEach(\n-                    s -> addIdentifier( map, CategoryOption.class, params.getCategoryOptionIdScheme().getIdScheme(),\n-                        s ) );\n+                    s -> addIdentifier( identifiers, CategoryOption.class, s ) );\n \n-            addIdentifier( map, CategoryOptionCombo.class, params.getCategoryOptionComboIdScheme().getIdScheme(),\n-                event.getAttributeOptionCombo() );\n+            addIdentifier( identifiers, CategoryOptionCombo.class, event.getAttributeOptionCombo() );\n \n             event.getDataValues()\n-                .forEach( dv -> addIdentifier( map, DataElement.class, params.getDataElementIdScheme().getIdScheme(),\n-                    dv.getDataElement() ) );\n+                .forEach( dv -> addIdentifier( identifiers, DataElement.class, dv.getDataElement() ) );\n \n-            collectNotes( map, event.getNotes() );\n+            collectNotes( identifiers, event.getNotes() );\n \n         } );\n     }\n \n-    private void collectRelationships(\n-        Map<Class<?>, Set<String>> map, List<Relationship> relationships )\n+    private void collectRelationships( Map<Class<?>, Set<String>> identifiers, List<Relationship> relationships )\n     {\n-        relationships.parallelStream().forEach( relationship -> {\n-            addIdentifier( map, Relationship.class, TrackerIdScheme.UID, relationship.getRelationship() );\n+        relationships.forEach( relationship -> {\n+\n+            RelationshipKey relationshipKey = RelationshipPreheatKeySupport.getRelationshipKey( relationship );\n+\n+            addIdentifier( identifiers, Relationship.class, relationshipKey.asString() );\n+            addIdentifier( identifiers, Relationship.class, relationship.getRelationship() );\n+\n             if ( relationship.getFrom() != null )\n             {\n-                addIdentifier( map, TrackedEntity.class, TrackerIdScheme.UID,\n-                    relationship.getFrom().getTrackedEntity() );\n-                addIdentifier( map, Enrollment.class, TrackerIdScheme.UID, relationship.getFrom().getEnrollment() );\n-                addIdentifier( map, Event.class, TrackerIdScheme.UID, relationship.getFrom().getEvent() );\n+                addIdentifier( identifiers, TrackedEntity.class, relationship.getFrom().getTrackedEntity() );\n+                addIdentifier( identifiers, Enrollment.class, relationship.getFrom().getEnrollment() );\n+                addIdentifier( identifiers, Event.class, relationship.getFrom().getEvent() );\n             }\n             if ( relationship.getTo() != null )\n             {\n-                addIdentifier( map, TrackedEntity.class, TrackerIdScheme.UID, relationship.getTo().getTrackedEntity() );\n-                addIdentifier( map, Enrollment.class, TrackerIdScheme.UID, relationship.getTo().getEnrollment() );\n-                addIdentifier( map, Event.class, TrackerIdScheme.UID, relationship.getTo().getEvent() );\n+                addIdentifier( identifiers, TrackedEntity.class, relationship.getTo().getTrackedEntity() );\n+                addIdentifier( identifiers, Enrollment.class, relationship.getTo().getEnrollment() );\n+                addIdentifier( identifiers, Event.class, relationship.getTo().getEvent() );\n             }\n         } );\n     }\n \n-    private <T> void addIdentifier( Map<Class<?>, Set<String>> map,\n-        Class<T> klass, TrackerIdScheme identifier, String str )\n+    private <T> void addIdentifier( Map<Class<?>, Set<String>> identifiers, Class<T> klass, String identifier )\n     {\n-        if ( StringUtils.isEmpty( str ) || map == null || klass == null || identifier == null )\n+        if ( StringUtils.isEmpty( identifier ) || identifiers == null || klass == null )\n         {\n             return;\n         }\n \n-        if ( !map.containsKey( klass ) )\n+        if ( !identifiers.containsKey( klass ) )\n         {\n-            map.put( klass, new HashSet<>() );\n+            identifiers.put( klass, new HashSet<>() );\n         }\n \n-        map.get( klass ).add( str );\n+        identifiers.get( klass ).add( identifier );\n     }\n }\n", "next_change": {"commit": "e1781813dcec0c675de8b3a0606e47dce3509290", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java\nindex 47fe6e78f4..e79aa44589 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java\n", "chunk": "@@ -225,11 +232,8 @@ public class TrackerIdentifierCollector\n             return;\n         }\n \n-        if ( !identifiers.containsKey( klass ) )\n-        {\n-            identifiers.put( klass, new HashSet<>() );\n-        }\n-\n-        identifiers.get( klass ).add( identifier );\n+        identifiers\n+            .computeIfAbsent( klass, k -> new HashSet<>() )\n+            .add( identifier );\n     }\n }\n", "next_change": {"commit": "75c6c5d054b53569dda7e85f82afac6f6cd6b4a4", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java\nindex e79aa44589..5bacc5630d 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java\n", "chunk": "@@ -236,4 +217,4 @@ public class TrackerIdentifierCollector\n             .computeIfAbsent( klass, k -> new HashSet<>() )\n             .add( identifier );\n     }\n-}\n+}\n\\ No newline at end of file\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "message": "Merge commit", "committedDate": null}, {"oid": "8ff0e881fed1a553755f00b7f256b5e21854f512", "committedDate": "2020-08-25 17:10:09 +0200", "message": "feat: Convert security XML config to Java annotation config (#5953)"}, {"oid": "ae4d365663ffddc9a34d1cdc0f629fd7b6386e90", "committedDate": "2020-11-03 10:25:55 +0100", "message": "feat: improve note validation during tracker import [TECH-457]"}, {"oid": "3e799d196b8f73ad216ea100a07ddd5f7dfc53e0", "committedDate": "2020-11-30 16:37:14 +0100", "message": "fix: remove long running transaction during Tracker Import (#6782)"}, {"oid": "699074cbe82db1a8e0a5e72edf2a981f3628b54b", "committedDate": "2020-12-07 10:47:48 +0100", "message": "fix: Tracker Identifiers resolution during Tracker import (#6824)"}, {"oid": "2ab8efe33562a2a83071c34823b4e54462d8672d", "committedDate": "2020-12-08 13:35:03 +0100", "message": "fix: implement NAME Tracker Identifier scheme (#6848)"}, {"oid": "cececb7511986f26a3af5bf3d2f4bccb3b2bbda9", "committedDate": "2021-01-04 09:03:14 +0100", "message": "refactor: simplify preheat fetching for reference objects (#7003)"}, {"oid": "16ae2da89c2d883763e33d9d0833f9b033d711c0", "committedDate": "2021-01-05 11:55:44 +0100", "message": "fix: Fix lazy exception for default category combo (#7014)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "5e19605ff1a5eacc26337747a57ba2cec60446ec", "committedDate": "2021-01-14 13:43:29 +0100", "message": "fix: fix program rule assign value implementer [DHIS2-10098] (#7050)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "f731091fc392786dd6948e79de0614f4061d76e1", "committedDate": "2021-02-15 09:46:23 +0100", "message": "refactor: changed the way relationship are identified inside preheat [DHIS2-10390] (#7340)"}, {"oid": "db043f2d252ab92e85756413bce7515a315e3caa", "committedDate": "2021-04-20 10:33:49 +0200", "message": "feat: Remove tracked entity field from event [DHIS2-10875] (#7878)"}, {"oid": "fe04922e144ac69367a99840d5518edda2d67f38", "committedDate": "2021-06-03 08:17:10 +0200", "message": "fix: Make program field read-only in event payload [DHIS2-11225] (#8086)"}, {"oid": "83030519745a21c0fa955974f69f4f46498267cd", "committedDate": "2021-06-09 09:44:41 +0200", "message": "fix: Make program mandatory for program events and program stage for tracker events [DHIS2-11225] (#8120)"}, {"oid": "dbf2214125957003315d011c6b2b4a3f80d20d42", "committedDate": "2021-09-20 15:03:39 +0200", "message": "fix: Load in preheat all attributes and dataElements linked to program rules [DHIS2-11762] (#8761)"}, {"oid": "fd62b41838ca6dd1c3716a92158e8e42af5af23f", "committedDate": "2021-11-22 15:59:59 +0100", "message": "fix: test failing on jenkins due to race conditions (#9277)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "3a27829539ea20a43992e97f33a1e0e2e3131ef0", "committedDate": "2022-02-04 10:48:42 +0100", "message": "chore: TrackerIdScheme parameter is unused (#9718)"}, {"oid": "e1781813dcec0c675de8b3a0606e47dce3509290", "committedDate": "2022-03-11 05:46:00 +0100", "message": "fix: return full relationship items DHIS2-12625 (#9996)"}, {"oid": "5f63b52ac0a4f426145ae43affa58295f804812a", "committedDate": "2022-04-14 13:41:33 +0200", "message": "chore: split domain and view models DHIS2-12563 (#10379)"}, {"oid": "c3ee623f83ffefe3521e74e071cfead3343a3dda", "committedDate": "2022-04-26 12:11:55 +0200", "message": "fix: TrackerPreheat defaults support idSchemes DHIS2-12563 (#10546)"}, {"oid": "9b2608b1ac695b4a62bca379a1807eae40520918", "committedDate": "2022-04-26 13:27:56 +0200", "message": "fix: Fix error when deleting relationships [DHIS2-13146] (#10595)"}, {"oid": "382a593af44ef61dfedc169b98d266bc6411b09f", "committedDate": "2022-05-06 13:37:24 +0200", "message": "chore: Event.attributeCategoryOptions is a MetadataIdentifier DHIS2-12563 (#10724)"}, {"oid": "fb7a485c6dc99b360359cb262a00c7c9b703fcdc", "committedDate": "2022-05-16 11:12:11 +0200", "message": "refactor: RelationshipKey is the only responsible to create keys [DHIS2-11320] (#10780)"}, {"oid": "75c6c5d054b53569dda7e85f82afac6f6cd6b4a4", "committedDate": "2022-05-16 12:33:36 +0200", "message": "fix: Relationship.relationshipType is a MetadataIdentifier (#10746)"}, {"oid": "9ff8d0c831d8448a696a37138139a0ae5b975c86", "committedDate": "2022-05-17 13:32:06 +0200", "message": "fix: Attribute.attribute is a MetadataIdentifier DHIS2-12563 (#10782)"}, {"oid": "aa056ca0ba854e856b4b2b9d2a13512457430921", "committedDate": "2022-05-18 09:52:24 +0200", "message": "fix: rule engine attribute identifiers are UIDs DHIS2-12563 (#10839)"}, {"oid": "af37dd7b6f0b64b46fb84be9e40d35f5f6593709", "committedDate": "2022-05-19 11:11:00 +0200", "message": "fix: DataValue.dataElement is a MetadataIdentifier DHIS2-12563 (#10752)"}, {"oid": "b78a5043bdff59195ab013aba6d3b7dbb955687e", "committedDate": "2022-05-27 15:00:07 +0200", "message": "fix: collect TrackedEntity/RelationshipType from payload (#10906)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYwMDQ4Nw==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r445600487", "body": "Possible optimization: since, as far as I can see, this class is not using Hibernate, we could collect the IDs of the various entities in parallel.", "bodyText": "Possible optimization: since, as far as I can see, this class is not using Hibernate, we could collect the IDs of the various entities in parallel.", "bodyHTML": "<p dir=\"auto\">Possible optimization: since, as far as I can see, this class is not using Hibernate, we could collect the IDs of the various entities in parallel.</p>", "author": "luciano-fiandesio", "createdAt": "2020-06-25T14:27:26Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java", "diffHunk": "@@ -82,11 +86,13 @@ private static void collectTrackedEntities(\n         Map<Class<?>, Set<String>> map, TrackerIdentifierParams params, List<TrackedEntity> trackedEntities )\n     {\n         trackedEntities.forEach( trackedEntity -> {\n-            addIdentifier( map, TrackedEntity.class, params.getIdScheme().getIdScheme(), trackedEntity.getTrackedEntity() );\n-            addIdentifier( map, OrganisationUnit.class, params.getOrgUnitIdScheme().getIdScheme(), trackedEntity.getOrgUnit() );\n+            addIdentifier( map, TrackedEntity.class, params.getIdScheme().getIdScheme(),\n+                trackedEntity.getTrackedEntity() );\n+            addIdentifier( map, OrganisationUnit.class, params.getOrgUnitIdScheme().getIdScheme(),\n+                trackedEntity.getOrgUnit() );\n \n             collectEnrollments( map, params, trackedEntity.getEnrollments() );\n-            collectAttributes( map, params, trackedEntity.getAttributes() );\n+            collectTrackedEntityAttribute( map, params, trackedEntity.getAttributes() );", "originalCommit": "e7e003a2211cdf3f412ce75f95ef0f6be1973434", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYyNDEyMQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446624121", "bodyText": "Added todo in the code.", "author": "netroms", "createdAt": "2020-06-28T09:09:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYwMDQ4Nw=="}], "type": "inlineReview", "revised_code": {"commit": "c5a94c3d798ab59a16b994801255c4ac2631887b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java\nindex 0c2148d935..09c4633000 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java\n", "chunk": "@@ -92,6 +92,8 @@ public class TrackerIdentifierCollector\n                 trackedEntity.getOrgUnit() );\n \n             collectEnrollments( map, params, trackedEntity.getEnrollments() );\n+            // TODO: @Luciano Possible optimization: since, as far as I can see, this class is not using Hibernate,\n+            //  we could collect the IDs of the various entities in parallel.\n             collectTrackedEntityAttribute( map, params, trackedEntity.getAttributes() );\n         } );\n     }\n", "next_change": {"commit": "898c87ce14bf1faf20e8f8ebf3a5bc12f27437f0", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java\nindex 09c4633000..fa921b7cf1 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java\n", "chunk": "@@ -92,8 +97,7 @@ public class TrackerIdentifierCollector\n                 trackedEntity.getOrgUnit() );\n \n             collectEnrollments( map, params, trackedEntity.getEnrollments() );\n-            // TODO: @Luciano Possible optimization: since, as far as I can see, this class is not using Hibernate,\n-            //  we could collect the IDs of the various entities in parallel.\n+\n             collectTrackedEntityAttribute( map, params, trackedEntity.getAttributes() );\n         } );\n     }\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java\nindex 0c2148d935..fa921b7cf1 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java\n", "chunk": "@@ -92,6 +97,7 @@ public class TrackerIdentifierCollector\n                 trackedEntity.getOrgUnit() );\n \n             collectEnrollments( map, params, trackedEntity.getEnrollments() );\n+\n             collectTrackedEntityAttribute( map, params, trackedEntity.getAttributes() );\n         } );\n     }\n", "next_change": {"commit": "ae4d365663ffddc9a34d1cdc0f629fd7b6386e90", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java\nindex fa921b7cf1..aea0edae42 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java\n", "chunk": "@@ -98,7 +100,7 @@ public class TrackerIdentifierCollector\n \n             collectEnrollments( map, params, trackedEntity.getEnrollments() );\n \n-            collectTrackedEntityAttribute( map, params, trackedEntity.getAttributes() );\n+            collectTrackedEntityAttribute( map, trackedEntity.getAttributes() );\n         } );\n     }\n \n", "next_change": {"commit": "5e19605ff1a5eacc26337747a57ba2cec60446ec", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java\nindex aea0edae42..ac185b4ef2 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java\n", "chunk": "@@ -100,11 +141,12 @@ public class TrackerIdentifierCollector\n \n             collectEnrollments( map, params, trackedEntity.getEnrollments() );\n \n-            collectTrackedEntityAttribute( map, trackedEntity.getAttributes() );\n+            trackedEntity.getAttributes().forEach( attribute ->\n+                addIdentifier( map, TrackedEntityAttribute.class, TrackerIdScheme.UID, attribute.getAttribute() ) );\n         } );\n     }\n \n-    private static void collectEnrollments(\n+    private void collectEnrollments(\n         Map<Class<?>, Set<String>> map, TrackerIdentifierParams params, List<Enrollment> enrollments )\n     {\n         enrollments.forEach( enrollment -> {\n", "next_change": {"commit": "ea76fa86409613c9766d4508d65c88ac55c413c3", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java\nindex ac185b4ef2..cebcc13a9f 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java\n", "chunk": "@@ -141,8 +140,8 @@ public class TrackerIdentifierCollector\n \n             collectEnrollments( map, params, trackedEntity.getEnrollments() );\n \n-            trackedEntity.getAttributes().forEach( attribute ->\n-                addIdentifier( map, TrackedEntityAttribute.class, TrackerIdScheme.UID, attribute.getAttribute() ) );\n+            trackedEntity.getAttributes().forEach( attribute -> addIdentifier( map, TrackedEntityAttribute.class,\n+                TrackerIdScheme.UID, attribute.getAttribute() ) );\n         } );\n     }\n \n", "next_change": {"commit": "3a27829539ea20a43992e97f33a1e0e2e3131ef0", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java\nindex cebcc13a9f..47fe6e78f4 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java\n", "chunk": "@@ -77,166 +87,149 @@ public class TrackerIdentifierCollector\n     public Map<Class<?>, Set<String>> collect( TrackerImportParams params,\n         Map<Class<? extends IdentifiableObject>, IdentifiableObject> defaults )\n     {\n-        Map<Class<?>, Set<String>> map = new HashMap<>();\n+        final Map<Class<?>, Set<String>> identifiers = new HashMap<>();\n \n-        collectTrackedEntities( map, params.getIdentifiers(), params.getTrackedEntities() );\n-        collectEnrollments( map, params.getIdentifiers(), params.getEnrollments() );\n-        collectEvents( map, params.getIdentifiers(), params.getEvents() );\n-        collectRelationships( map, params.getRelationships() );\n+        collectTrackedEntities( identifiers, params.getTrackedEntities() );\n+        collectEnrollments( identifiers, params.getEnrollments() );\n+        collectEvents( identifiers, params.getEvents() );\n+        collectRelationships( identifiers, params.getRelationships() );\n         // Using \"*\" signals that all the entities of the given type have to be\n         // preloaded in the Preheat\n-        map.put( TrackedEntityType.class, ImmutableSet.of( ID_WILDCARD ) );\n-        map.put( RelationshipType.class, ImmutableSet.of( ID_WILDCARD ) );\n-        collectDefaults( map, params.getIdentifiers(), defaults );\n+        identifiers.put( TrackedEntityType.class, ImmutableSet.of( ID_WILDCARD ) );\n+        identifiers.put( RelationshipType.class, ImmutableSet.of( ID_WILDCARD ) );\n+        collectDefaults( identifiers, defaults );\n \n-        collectProgramRulesFields( map, params.getIdentifiers() );\n-        return map;\n+        collectProgramRulesFields( identifiers );\n+        return identifiers;\n     }\n \n-    private void collectProgramRulesFields( Map<Class<?>, Set<String>> map,\n-        TrackerIdentifierParams params )\n+    private void collectProgramRulesFields( Map<Class<?>, Set<String>> map )\n     {\n-        Set<String> programs = map.get( Program.class );\n-        if ( programs != null )\n-        {\n-            List<ProgramRule> programRules = programRuleService.getProgramRuleByProgram( programs );\n-            Set<String> dataElements = programRules.stream()\n-                .flatMap( pr -> pr.getProgramRuleActions().stream() )\n-                .filter( a -> Objects.nonNull( a.getDataElement() ) )\n-                .map( a -> a.getDataElement().getUid() )\n-                .collect( Collectors.toSet() );\n-\n-            dataElements\n-                .forEach(\n-                    de -> addIdentifier( map, DataElement.class, params.getDataElementIdScheme().getIdScheme(), de ) );\n-\n-            Set<String> attributes = programRules.stream()\n-                .flatMap( pr -> pr.getProgramRuleActions().stream() )\n-                .filter( a -> Objects.nonNull( a.getAttribute() ) )\n-                .map( a -> a.getAttribute().getUid() )\n-                .collect( Collectors.toSet() );\n-\n-            attributes.forEach(\n-                attribute -> addIdentifier( map, TrackedEntityAttribute.class, TrackerIdScheme.UID, attribute ) );\n-        }\n+        List<ProgramRule> programRules = programRuleService.getProgramRulesLinkedToTeaOrDe();\n+        Set<String> dataElements = programRules.stream()\n+            .flatMap( pr -> pr.getProgramRuleActions().stream() )\n+            .filter( a -> Objects.nonNull( a.getDataElement() ) )\n+            .map( a -> a.getDataElement().getUid() )\n+            .collect( Collectors.toSet() );\n+\n+        dataElements.forEach( de -> addIdentifier( map, DataElement.class, de ) );\n+\n+        Set<String> attributes = programRules.stream()\n+            .flatMap( pr -> pr.getProgramRuleActions().stream() )\n+            .filter( a -> Objects.nonNull( a.getAttribute() ) )\n+            .map( a -> a.getAttribute().getUid() )\n+            .collect( Collectors.toSet() );\n+\n+        attributes.forEach( attribute -> addIdentifier( map, TrackedEntityAttribute.class, attribute ) );\n     }\n \n     private void collectDefaults( Map<Class<?>, Set<String>> map,\n-        TrackerIdentifierParams params,\n         Map<Class<? extends IdentifiableObject>, IdentifiableObject> defaults )\n     {\n-        defaults.forEach( ( defaultClass, defaultMetadata ) -> addIdentifier( map, defaultClass,\n-            params.getIdScheme().getIdScheme(), defaultMetadata.getUid() ) );\n+        defaults.forEach(\n+            ( defaultClass, defaultMetadata ) -> addIdentifier( map, defaultClass, defaultMetadata.getUid() ) );\n     }\n \n-    private void collectTrackedEntities(\n-        Map<Class<?>, Set<String>> map, TrackerIdentifierParams params, List<TrackedEntity> trackedEntities )\n+    private void collectTrackedEntities( Map<Class<?>, Set<String>> identifiers, List<TrackedEntity> trackedEntities )\n     {\n         trackedEntities.forEach( trackedEntity -> {\n-            addIdentifier( map, TrackedEntity.class, params.getIdScheme().getIdScheme(),\n-                trackedEntity.getTrackedEntity() );\n-            addIdentifier( map, OrganisationUnit.class, params.getOrgUnitIdScheme().getIdScheme(),\n-                trackedEntity.getOrgUnit() );\n+            addIdentifier( identifiers, TrackedEntity.class, trackedEntity.getTrackedEntity() );\n+            addIdentifier( identifiers, OrganisationUnit.class, trackedEntity.getOrgUnit() );\n \n-            collectEnrollments( map, params, trackedEntity.getEnrollments() );\n+            collectEnrollments( identifiers, trackedEntity.getEnrollments() );\n \n-            trackedEntity.getAttributes().forEach( attribute -> addIdentifier( map, TrackedEntityAttribute.class,\n-                TrackerIdScheme.UID, attribute.getAttribute() ) );\n+            trackedEntity.getAttributes()\n+                .forEach( attribute -> addIdentifier( identifiers, TrackedEntityAttribute.class,\n+                    attribute.getAttribute() ) );\n         } );\n     }\n \n-    private void collectEnrollments(\n-        Map<Class<?>, Set<String>> map, TrackerIdentifierParams params, List<Enrollment> enrollments )\n+    private void collectEnrollments( Map<Class<?>, Set<String>> identifiers, List<Enrollment> enrollments )\n     {\n         enrollments.forEach( enrollment -> {\n-            addIdentifier( map, TrackedEntity.class, TrackerIdScheme.UID, enrollment.getTrackedEntity() );\n-            addIdentifier( map, Enrollment.class, TrackerIdScheme.UID, enrollment.getEnrollment() );\n-            addIdentifier( map, Program.class, params.getProgramIdScheme().getIdScheme(), enrollment.getProgram() );\n-            addIdentifier( map, OrganisationUnit.class, params.getOrgUnitIdScheme().getIdScheme(),\n-                enrollment.getOrgUnit() );\n-\n-            collectNotes( map, enrollment.getNotes() );\n-            collectEvents( map, params, enrollment.getEvents() );\n-            enrollment.getAttributes().forEach( attribute -> addIdentifier( map, TrackedEntityAttribute.class,\n-                TrackerIdScheme.UID, attribute.getAttribute() ) );\n+            addIdentifier( identifiers, TrackedEntity.class, enrollment.getTrackedEntity() );\n+            addIdentifier( identifiers, Enrollment.class, enrollment.getEnrollment() );\n+            addIdentifier( identifiers, Program.class, enrollment.getProgram() );\n+            addIdentifier( identifiers, OrganisationUnit.class, enrollment.getOrgUnit() );\n+\n+            collectNotes( identifiers, enrollment.getNotes() );\n+            collectEvents( identifiers, enrollment.getEvents() );\n+            enrollment.getAttributes().forEach( attribute -> addIdentifier( identifiers, TrackedEntityAttribute.class,\n+                attribute.getAttribute() ) );\n         } );\n     }\n \n-    private void collectNotes( Map<Class<?>, Set<String>> map, List<Note> notes )\n+    private void collectNotes( Map<Class<?>, Set<String>> identifiers, List<Note> notes )\n     {\n         notes.forEach(\n             note -> {\n                 if ( !StringUtils.isEmpty( note.getNote() ) && !StringUtils.isEmpty( note.getValue() ) )\n                 {\n-                    addIdentifier( map, TrackedEntityComment.class, TrackerIdScheme.UID, note.getNote() );\n+                    addIdentifier( identifiers, TrackedEntityComment.class, note.getNote() );\n                 }\n             } );\n     }\n \n-    private void collectEvents(\n-        Map<Class<?>, Set<String>> map, TrackerIdentifierParams params, List<Event> events )\n+    private void collectEvents( Map<Class<?>, Set<String>> identifiers, List<Event> events )\n     {\n         events.forEach( event -> {\n-            addIdentifier( map, TrackedEntity.class, TrackerIdScheme.UID, event.getTrackedEntity() );\n-            addIdentifier( map, Enrollment.class, TrackerIdScheme.UID, event.getEnrollment() );\n-            addIdentifier( map, Event.class, TrackerIdScheme.UID, event.getEvent() );\n-            addIdentifier( map, Program.class, params.getProgramIdScheme().getIdScheme(), event.getProgram() );\n-            addIdentifier( map, ProgramStage.class, params.getProgramStageIdScheme().getIdScheme(),\n-                event.getProgramStage() );\n-            addIdentifier( map, OrganisationUnit.class, params.getOrgUnitIdScheme().getIdScheme(), event.getOrgUnit() );\n+            addIdentifier( identifiers, Enrollment.class, event.getEnrollment() );\n+            addIdentifier( identifiers, Event.class, event.getEvent() );\n+            addIdentifier( identifiers, Program.class, event.getProgram() );\n+            addIdentifier( identifiers, ProgramStage.class, event.getProgramStage() );\n+            addIdentifier( identifiers, OrganisationUnit.class, event.getOrgUnit() );\n \n             Stream\n                 .of( MoreObjects.firstNonNull( event.getAttributeCategoryOptions(), \"\" ).split( TextUtils.SEMICOLON ) )\n                 .forEach(\n-                    s -> addIdentifier( map, CategoryOption.class, params.getCategoryOptionIdScheme().getIdScheme(),\n-                        s ) );\n+                    s -> addIdentifier( identifiers, CategoryOption.class, s ) );\n \n-            addIdentifier( map, CategoryOptionCombo.class, params.getCategoryOptionComboIdScheme().getIdScheme(),\n-                event.getAttributeOptionCombo() );\n+            addIdentifier( identifiers, CategoryOptionCombo.class, event.getAttributeOptionCombo() );\n \n             event.getDataValues()\n-                .forEach( dv -> addIdentifier( map, DataElement.class, params.getDataElementIdScheme().getIdScheme(),\n-                    dv.getDataElement() ) );\n+                .forEach( dv -> addIdentifier( identifiers, DataElement.class, dv.getDataElement() ) );\n \n-            collectNotes( map, event.getNotes() );\n+            collectNotes( identifiers, event.getNotes() );\n \n         } );\n     }\n \n-    private void collectRelationships(\n-        Map<Class<?>, Set<String>> map, List<Relationship> relationships )\n+    private void collectRelationships( Map<Class<?>, Set<String>> identifiers, List<Relationship> relationships )\n     {\n-        relationships.parallelStream().forEach( relationship -> {\n-            addIdentifier( map, Relationship.class, TrackerIdScheme.UID, relationship.getRelationship() );\n+        relationships.forEach( relationship -> {\n+\n+            RelationshipKey relationshipKey = RelationshipPreheatKeySupport.getRelationshipKey( relationship );\n+\n+            addIdentifier( identifiers, Relationship.class, relationshipKey.asString() );\n+            addIdentifier( identifiers, Relationship.class, relationship.getRelationship() );\n+\n             if ( relationship.getFrom() != null )\n             {\n-                addIdentifier( map, TrackedEntity.class, TrackerIdScheme.UID,\n-                    relationship.getFrom().getTrackedEntity() );\n-                addIdentifier( map, Enrollment.class, TrackerIdScheme.UID, relationship.getFrom().getEnrollment() );\n-                addIdentifier( map, Event.class, TrackerIdScheme.UID, relationship.getFrom().getEvent() );\n+                addIdentifier( identifiers, TrackedEntity.class, relationship.getFrom().getTrackedEntity() );\n+                addIdentifier( identifiers, Enrollment.class, relationship.getFrom().getEnrollment() );\n+                addIdentifier( identifiers, Event.class, relationship.getFrom().getEvent() );\n             }\n             if ( relationship.getTo() != null )\n             {\n-                addIdentifier( map, TrackedEntity.class, TrackerIdScheme.UID, relationship.getTo().getTrackedEntity() );\n-                addIdentifier( map, Enrollment.class, TrackerIdScheme.UID, relationship.getTo().getEnrollment() );\n-                addIdentifier( map, Event.class, TrackerIdScheme.UID, relationship.getTo().getEvent() );\n+                addIdentifier( identifiers, TrackedEntity.class, relationship.getTo().getTrackedEntity() );\n+                addIdentifier( identifiers, Enrollment.class, relationship.getTo().getEnrollment() );\n+                addIdentifier( identifiers, Event.class, relationship.getTo().getEvent() );\n             }\n         } );\n     }\n \n-    private <T> void addIdentifier( Map<Class<?>, Set<String>> map,\n-        Class<T> klass, TrackerIdScheme identifier, String str )\n+    private <T> void addIdentifier( Map<Class<?>, Set<String>> identifiers, Class<T> klass, String identifier )\n     {\n-        if ( StringUtils.isEmpty( str ) || map == null || klass == null || identifier == null )\n+        if ( StringUtils.isEmpty( identifier ) || identifiers == null || klass == null )\n         {\n             return;\n         }\n \n-        if ( !map.containsKey( klass ) )\n+        if ( !identifiers.containsKey( klass ) )\n         {\n-            map.put( klass, new HashSet<>() );\n+            identifiers.put( klass, new HashSet<>() );\n         }\n \n-        map.get( klass ).add( str );\n+        identifiers.get( klass ).add( identifier );\n     }\n }\n", "next_change": {"commit": "e1781813dcec0c675de8b3a0606e47dce3509290", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java\nindex 47fe6e78f4..e79aa44589 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java\n", "chunk": "@@ -225,11 +232,8 @@ public class TrackerIdentifierCollector\n             return;\n         }\n \n-        if ( !identifiers.containsKey( klass ) )\n-        {\n-            identifiers.put( klass, new HashSet<>() );\n-        }\n-\n-        identifiers.get( klass ).add( identifier );\n+        identifiers\n+            .computeIfAbsent( klass, k -> new HashSet<>() )\n+            .add( identifier );\n     }\n }\n", "next_change": {"commit": "75c6c5d054b53569dda7e85f82afac6f6cd6b4a4", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java\nindex e79aa44589..5bacc5630d 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifierCollector.java\n", "chunk": "@@ -236,4 +217,4 @@ public class TrackerIdentifierCollector\n             .computeIfAbsent( klass, k -> new HashSet<>() )\n             .add( identifier );\n     }\n-}\n+}\n\\ No newline at end of file\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "message": "Merge commit", "committedDate": null}, {"oid": "8ff0e881fed1a553755f00b7f256b5e21854f512", "committedDate": "2020-08-25 17:10:09 +0200", "message": "feat: Convert security XML config to Java annotation config (#5953)"}, {"oid": "ae4d365663ffddc9a34d1cdc0f629fd7b6386e90", "committedDate": "2020-11-03 10:25:55 +0100", "message": "feat: improve note validation during tracker import [TECH-457]"}, {"oid": "3e799d196b8f73ad216ea100a07ddd5f7dfc53e0", "committedDate": "2020-11-30 16:37:14 +0100", "message": "fix: remove long running transaction during Tracker Import (#6782)"}, {"oid": "699074cbe82db1a8e0a5e72edf2a981f3628b54b", "committedDate": "2020-12-07 10:47:48 +0100", "message": "fix: Tracker Identifiers resolution during Tracker import (#6824)"}, {"oid": "2ab8efe33562a2a83071c34823b4e54462d8672d", "committedDate": "2020-12-08 13:35:03 +0100", "message": "fix: implement NAME Tracker Identifier scheme (#6848)"}, {"oid": "cececb7511986f26a3af5bf3d2f4bccb3b2bbda9", "committedDate": "2021-01-04 09:03:14 +0100", "message": "refactor: simplify preheat fetching for reference objects (#7003)"}, {"oid": "16ae2da89c2d883763e33d9d0833f9b033d711c0", "committedDate": "2021-01-05 11:55:44 +0100", "message": "fix: Fix lazy exception for default category combo (#7014)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "5e19605ff1a5eacc26337747a57ba2cec60446ec", "committedDate": "2021-01-14 13:43:29 +0100", "message": "fix: fix program rule assign value implementer [DHIS2-10098] (#7050)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "f731091fc392786dd6948e79de0614f4061d76e1", "committedDate": "2021-02-15 09:46:23 +0100", "message": "refactor: changed the way relationship are identified inside preheat [DHIS2-10390] (#7340)"}, {"oid": "db043f2d252ab92e85756413bce7515a315e3caa", "committedDate": "2021-04-20 10:33:49 +0200", "message": "feat: Remove tracked entity field from event [DHIS2-10875] (#7878)"}, {"oid": "fe04922e144ac69367a99840d5518edda2d67f38", "committedDate": "2021-06-03 08:17:10 +0200", "message": "fix: Make program field read-only in event payload [DHIS2-11225] (#8086)"}, {"oid": "83030519745a21c0fa955974f69f4f46498267cd", "committedDate": "2021-06-09 09:44:41 +0200", "message": "fix: Make program mandatory for program events and program stage for tracker events [DHIS2-11225] (#8120)"}, {"oid": "dbf2214125957003315d011c6b2b4a3f80d20d42", "committedDate": "2021-09-20 15:03:39 +0200", "message": "fix: Load in preheat all attributes and dataElements linked to program rules [DHIS2-11762] (#8761)"}, {"oid": "fd62b41838ca6dd1c3716a92158e8e42af5af23f", "committedDate": "2021-11-22 15:59:59 +0100", "message": "fix: test failing on jenkins due to race conditions (#9277)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "3a27829539ea20a43992e97f33a1e0e2e3131ef0", "committedDate": "2022-02-04 10:48:42 +0100", "message": "chore: TrackerIdScheme parameter is unused (#9718)"}, {"oid": "e1781813dcec0c675de8b3a0606e47dce3509290", "committedDate": "2022-03-11 05:46:00 +0100", "message": "fix: return full relationship items DHIS2-12625 (#9996)"}, {"oid": "5f63b52ac0a4f426145ae43affa58295f804812a", "committedDate": "2022-04-14 13:41:33 +0200", "message": "chore: split domain and view models DHIS2-12563 (#10379)"}, {"oid": "c3ee623f83ffefe3521e74e071cfead3343a3dda", "committedDate": "2022-04-26 12:11:55 +0200", "message": "fix: TrackerPreheat defaults support idSchemes DHIS2-12563 (#10546)"}, {"oid": "9b2608b1ac695b4a62bca379a1807eae40520918", "committedDate": "2022-04-26 13:27:56 +0200", "message": "fix: Fix error when deleting relationships [DHIS2-13146] (#10595)"}, {"oid": "382a593af44ef61dfedc169b98d266bc6411b09f", "committedDate": "2022-05-06 13:37:24 +0200", "message": "chore: Event.attributeCategoryOptions is a MetadataIdentifier DHIS2-12563 (#10724)"}, {"oid": "fb7a485c6dc99b360359cb262a00c7c9b703fcdc", "committedDate": "2022-05-16 11:12:11 +0200", "message": "refactor: RelationshipKey is the only responsible to create keys [DHIS2-11320] (#10780)"}, {"oid": "75c6c5d054b53569dda7e85f82afac6f6cd6b4a4", "committedDate": "2022-05-16 12:33:36 +0200", "message": "fix: Relationship.relationshipType is a MetadataIdentifier (#10746)"}, {"oid": "9ff8d0c831d8448a696a37138139a0ae5b975c86", "committedDate": "2022-05-17 13:32:06 +0200", "message": "fix: Attribute.attribute is a MetadataIdentifier DHIS2-12563 (#10782)"}, {"oid": "aa056ca0ba854e856b4b2b9d2a13512457430921", "committedDate": "2022-05-18 09:52:24 +0200", "message": "fix: rule engine attribute identifiers are UIDs DHIS2-12563 (#10839)"}, {"oid": "af37dd7b6f0b64b46fb84be9e40d35f5f6593709", "committedDate": "2022-05-19 11:11:00 +0200", "message": "fix: DataValue.dataElement is a MetadataIdentifier DHIS2-12563 (#10752)"}, {"oid": "b78a5043bdff59195ab013aba6d3b7dbb955687e", "committedDate": "2022-05-27 15:00:07 +0200", "message": "fix: collect TrackedEntity/RelationshipType from payload (#10906)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYwMTE1Ng==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r445601156", "body": "Commented line", "bodyText": "Commented line", "bodyHTML": "<p dir=\"auto\">Commented line</p>", "author": "luciano-fiandesio", "createdAt": "2020-06-25T14:28:18Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EventTrackerConverterService.java", "diffHunk": "@@ -225,8 +227,8 @@ public ProgramStageInstance from( TrackerPreheat preheat, Event event )\n                 preheat.get( TrackerIdScheme.UID, CategoryOptionCombo.class, e.getAttributeOptionCombo() ) );\n             programStageInstance.setGeometry( e.getGeometry() );\n             programStageInstance.setStatus( e.getStatus() );\n-            programStageInstance.setCreatedAtClient( DateUtils.parseDate( e.getClientCreatedAt() ) );\n-            programStageInstance.setLastUpdatedAtClient( DateUtils.parseDate( e.getClientUpdatedAt() ) );\n+//            programStageInstance.setCreatedAtClient( DateUtils.parseDate( e.getClientCreatedAt() ) );\n+//            programStageInstance.setLastUpdatedAtClient( DateUtils.parseDate( e.getClientUpdatedAt() ) );", "originalCommit": "e7e003a2211cdf3f412ce75f95ef0f6be1973434", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c5a94c3d798ab59a16b994801255c4ac2631887b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EventTrackerConverterService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EventTrackerConverterService.java\nindex 32383638c6..d29362791e 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EventTrackerConverterService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EventTrackerConverterService.java\n", "chunk": "@@ -227,8 +225,6 @@ public class EventTrackerConverterService\n                 preheat.get( TrackerIdScheme.UID, CategoryOptionCombo.class, e.getAttributeOptionCombo() ) );\n             programStageInstance.setGeometry( e.getGeometry() );\n             programStageInstance.setStatus( e.getStatus() );\n-//            programStageInstance.setCreatedAtClient( DateUtils.parseDate( e.getClientCreatedAt() ) );\n-//            programStageInstance.setLastUpdatedAtClient( DateUtils.parseDate( e.getClientUpdatedAt() ) );\n \n             if ( programStageInstance.isCompleted() )\n             {\n", "next_change": null}]}, "revised_code_in_main": {"commit": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EventTrackerConverterService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EventTrackerConverterService.java\nindex 32383638c6..fc12c3e155 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EventTrackerConverterService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EventTrackerConverterService.java\n", "chunk": "@@ -227,8 +218,6 @@ public class EventTrackerConverterService\n                 preheat.get( TrackerIdScheme.UID, CategoryOptionCombo.class, e.getAttributeOptionCombo() ) );\n             programStageInstance.setGeometry( e.getGeometry() );\n             programStageInstance.setStatus( e.getStatus() );\n-//            programStageInstance.setCreatedAtClient( DateUtils.parseDate( e.getClientCreatedAt() ) );\n-//            programStageInstance.setLastUpdatedAtClient( DateUtils.parseDate( e.getClientUpdatedAt() ) );\n \n             if ( programStageInstance.isCompleted() )\n             {\n", "next_change": {"commit": "cb2ee65c0210c0d4b2bd8851789da8d4adfaf04d", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EventTrackerConverterService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EventTrackerConverterService.java\nindex fc12c3e155..79717ff9ec 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EventTrackerConverterService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EventTrackerConverterService.java\n", "chunk": "@@ -149,107 +144,81 @@ public class EventTrackerConverterService\n     }\n \n     @Override\n-    public ProgramStageInstance from( Event event )\n+    public ProgramStageInstance from( TrackerPreheat preheat, Event event )\n     {\n-        List<ProgramStageInstance> programStageInstances = from( Collections.singletonList( event ) );\n-\n-        if ( programStageInstances.isEmpty() )\n-        {\n-            return null;\n-        }\n-\n-        return programStageInstances.get( 0 );\n+        ProgramStageInstance programStageInstance = preheat.getEvent( TrackerIdScheme.UID, event.getEvent() );\n+        return from( preheat, event, programStageInstance );\n     }\n \n     @Override\n-    public ProgramStageInstance from( TrackerPreheat preheat, Event event )\n+    public List<ProgramStageInstance> from( TrackerPreheat preheat, List<Event> events )\n     {\n-        List<ProgramStageInstance> programStageInstances = from( preheat, Collections.singletonList( event ) );\n-\n-        if ( programStageInstances.isEmpty() )\n-        {\n-            return null;\n-        }\n-\n-        return programStageInstances.get( 0 );\n+        return events\n+            .stream()\n+            .map( e -> from( preheat, e ) )\n+            .collect( Collectors.toList() );\n     }\n \n     @Override\n-    public List<ProgramStageInstance> from( List<Event> events )\n+    public ProgramStageInstance fromForRuleEngine( TrackerPreheat preheat, Event event )\n     {\n-        return from( preheat( events ), events );\n+        return from( preheat, event, null );\n     }\n \n-    private List<ProgramStageInstance> from( TrackerPreheat preheat, List<Event> events )\n+    private ProgramStageInstance from( TrackerPreheat preheat, Event event, ProgramStageInstance programStageInstance )\n     {\n-        List<ProgramStageInstance> programStageInstances = new ArrayList<>();\n+        ProgramStage programStage = preheat.get( TrackerIdScheme.UID, ProgramStage.class, event.getProgramStage() );\n+        OrganisationUnit organisationUnit = preheat\n+            .get( TrackerIdScheme.UID, OrganisationUnit.class, event.getOrgUnit() );\n \n-        events.forEach( e -> {\n-            ProgramStageInstance programStageInstance = preheat.getEvent( TrackerIdScheme.UID, e.getEvent() );\n-            ProgramStage programStage = preheat.get( TrackerIdScheme.UID, ProgramStage.class, e.getProgramStage() );\n-            OrganisationUnit organisationUnit = preheat\n-                .get( TrackerIdScheme.UID, OrganisationUnit.class, e.getOrgUnit() );\n+        if ( programStageInstance == null )\n+        {\n+            Date now = new Date();\n \n-            if ( programStageInstance == null )\n-            {\n-                Date now = new Date();\n+            programStageInstance = new ProgramStageInstance();\n+            programStageInstance.setUid( !StringUtils.isEmpty( event.getEvent() ) ? event.getEvent() : event.getUid() );\n+            programStageInstance.setCreated( now );\n+            programStageInstance.setCreatedAtClient( now );\n+            programStageInstance.setLastUpdated( now );\n+            programStageInstance.setLastUpdatedAtClient( now );\n \n-                programStageInstance = new ProgramStageInstance();\n-                programStageInstance.setUid( !StringUtils.isEmpty( e.getEvent() ) ? e.getEvent() : e.getUid() );\n-                programStageInstance.setCreated( now );\n-                programStageInstance.setCreatedAtClient( now );\n-                programStageInstance.setLastUpdated( now );\n-                programStageInstance.setLastUpdatedAtClient( now );\n+            programStageInstance.setProgramInstance(\n+                getProgramInstance( preheat, TrackerIdScheme.UID, event.getEnrollment(), programStage.getProgram() ) );\n+        }\n \n-                programStageInstance.setProgramInstance(\n-                    getProgramInstance( preheat, TrackerIdScheme.UID, e.getEnrollment(), programStage.getProgram() ) );\n-            }\n+        if ( !CodeGenerator.isValidUid( programStageInstance.getUid() ) )\n+        {\n+            programStageInstance.setUid( CodeGenerator.generateUid() );\n+        }\n \n-            if ( !CodeGenerator.isValidUid( programStageInstance.getUid() ) )\n-            {\n-                programStageInstance.setUid( CodeGenerator.generateUid() );\n-            }\n+        programStageInstance.setProgramStage( programStage );\n+        programStageInstance.setOrganisationUnit( organisationUnit );\n+        programStageInstance.setExecutionDate( DateUtils.parseDate( event.getOccurredAt() ) );\n+        programStageInstance.setDueDate( DateUtils.parseDate( event.getScheduledAt() ) );\n+        programStageInstance.setAttributeOptionCombo(\n+            preheat.get( TrackerIdScheme.UID, CategoryOptionCombo.class, event.getAttributeOptionCombo() ) );\n+        programStageInstance.setGeometry( event.getGeometry() );\n+        programStageInstance.setStatus( event.getStatus() );\n \n-            programStageInstance.setProgramStage( programStage );\n-            programStageInstance.setOrganisationUnit( organisationUnit );\n-            programStageInstance.setExecutionDate( DateUtils.parseDate( e.getOccurredAt() ) );\n-            programStageInstance.setDueDate( DateUtils.parseDate( e.getScheduledAt() ) );\n-            programStageInstance.setAttributeOptionCombo(\n-                preheat.get( TrackerIdScheme.UID, CategoryOptionCombo.class, e.getAttributeOptionCombo() ) );\n-            programStageInstance.setGeometry( e.getGeometry() );\n-            programStageInstance.setStatus( e.getStatus() );\n+        if ( programStageInstance.isCompleted() )\n+        {\n+            Date completedDate = DateUtils.parseDate( event.getCompletedAt() );\n \n-            if ( programStageInstance.isCompleted() )\n+            if ( completedDate == null )\n             {\n-                Date completedDate = DateUtils.parseDate( e.getCompletedAt() );\n-\n-                if ( completedDate == null )\n-                {\n-                    completedDate = new Date();\n-                }\n-\n-                programStageInstance.setCompletedDate( completedDate );\n-                programStageInstance.setCompletedBy( e.getCompletedBy() );\n+                completedDate = new Date();\n             }\n \n-            // data values\n-            Set<EventDataValue> eventDataValues = new HashSet<>();\n-\n-            e.getDataValues().forEach( dv -> {\n-                EventDataValue dataValue = new EventDataValue( dv.getDataElement(), dv.getValue() );\n-                dataValue.setAutoFields();\n-                dataValue.setProvidedElsewhere( dv.isProvidedElsewhere() );\n-                dataValue.setStoredBy( dv.getStoredBy() );\n-\n-                eventDataValues.add( dataValue );\n-            } );\n-\n-            programStageInstance.setEventDataValues( eventDataValues );\n+            programStageInstance.setCompletedDate( completedDate );\n+            programStageInstance.setCompletedBy( event.getCompletedBy() );\n+        }\n \n-            programStageInstances.add( programStageInstance );\n-        } );\n+        if ( isNotEmpty( event.getNotes() ) )\n+        {\n+            programStageInstance.getComments().addAll( notesConverterService.from( preheat, event.getNotes() ) );\n+        }\n \n-        return programStageInstances;\n+        return programStageInstance;\n     }\n \n     private ProgramInstance getProgramInstance( TrackerPreheat preheat, TrackerIdScheme identifier, String enrollment,\n", "next_change": {"commit": "baeafb2d70910473ec698d1f75fe7572271c7c5c", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EventTrackerConverterService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EventTrackerConverterService.java\nindex 79717ff9ec..63e76e43ec 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EventTrackerConverterService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EventTrackerConverterService.java\n", "chunk": "@@ -218,6 +229,9 @@ public class EventTrackerConverterService\n             programStageInstance.getComments().addAll( notesConverterService.from( preheat, event.getNotes() ) );\n         }\n \n+        User assignedUser = preheat.get( TrackerIdScheme.UID, User.class, event.getAssignedUser() );\n+        programStageInstance.setAssignedUser( assignedUser );\n+\n         return programStageInstance;\n     }\n \n", "next_change": {"commit": "b8c6c7169fb0bde20a685bc1b23289ac3658fbca", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EventTrackerConverterService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EventTrackerConverterService.java\nindex 63e76e43ec..eec0e3a0bb 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EventTrackerConverterService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EventTrackerConverterService.java\n", "chunk": "@@ -238,14 +238,14 @@ public class EventTrackerConverterService\n     private ProgramInstance getProgramInstance( TrackerPreheat preheat, TrackerIdScheme identifier, String enrollment,\n         Program program )\n     {\n-        if ( !StringUtils.isEmpty( enrollment ) )\n+        if ( ProgramType.WITH_REGISTRATION == program.getProgramType() )\n         {\n             return preheat.getEnrollment( identifier, enrollment );\n         }\n \n         if ( ProgramType.WITHOUT_REGISTRATION == program.getProgramType() )\n         {\n-            return preheat.getEnrollment( identifier, program.getUid() );\n+            return preheat.getProgramInstancesWithoutRegistration( program.getUid() );\n         }\n \n         // no valid enrollment given and program not single event, just return null\n", "next_change": {"commit": "ea76fa86409613c9766d4508d65c88ac55c413c3", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EventTrackerConverterService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EventTrackerConverterService.java\nindex eec0e3a0bb..211be52b34 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EventTrackerConverterService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EventTrackerConverterService.java\n", "chunk": "@@ -248,7 +300,8 @@ public class EventTrackerConverterService\n             return preheat.getProgramInstancesWithoutRegistration( program.getUid() );\n         }\n \n-        // no valid enrollment given and program not single event, just return null\n+        // no valid enrollment given and program not single event, just return\n+        // null\n         return null;\n     }\n }\n", "next_change": {"commit": "d117ff9ce355694569f7c6477141cf35c6412609", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EventTrackerConverterService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EventTrackerConverterService.java\nindex 211be52b34..423d907edd 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EventTrackerConverterService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EventTrackerConverterService.java\n", "chunk": "@@ -304,4 +313,14 @@ public class EventTrackerConverterService\n         // null\n         return null;\n     }\n+\n+    private User convertUserInfo( UserInfoSnapshot userInfoSnapshot )\n+    {\n+        return User.builder()\n+            .uid( userInfoSnapshot.getUid() )\n+            .username( userInfoSnapshot.getUsername() )\n+            .firstName( userInfoSnapshot.getFirstName() )\n+            .surname( userInfoSnapshot.getSurname() )\n+            .build();\n+    }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "message": "Merge commit", "committedDate": null}, {"oid": "399526882c2fbbf5600922b3c3b6030420cf4e96", "committedDate": "2020-07-13 12:23:07 +0200", "message": "feat: Run rule engine rules in new importer [DHIS2-7310]"}, {"oid": "3e3dc98d92f0c13fb56cf17894eab06a78842133", "committedDate": "2020-08-04 17:20:37 +0200", "message": "feat: Enrollment/Events note persistence"}, {"oid": "8374cb43e422eddc1f4c01bb715d8d285acc37be", "committedDate": "2020-08-10 11:38:43 +0200", "message": "Merge remote-tracking branch 'origin/master' into DHIS2-7310-merge"}, {"oid": "c70f79c6febd4b98e98c6f0c572d1099207d86b3", "committedDate": "2020-08-12 16:29:26 +0200", "message": "Code review fixes"}, {"oid": "6e1e12a2fe3c14f79781d64ec3f890f680cf49a4", "committedDate": "2020-08-24 15:50:03 +0200", "message": "feat: Added support for data values in event import [DHIS2-9270]"}, {"oid": "82a863c258aa34e592b309bb9d6081c4dc8f981b", "committedDate": "2020-08-27 14:46:58 +0200", "message": "feat: Add support for deletion of tracker objects [DHIS2-9085] (#5959)"}, {"oid": "cb2ee65c0210c0d4b2bd8851789da8d4adfaf04d", "committedDate": "2020-09-07 10:28:21 +0200", "message": "fix: [DHIS2-9287] Fix the stats in the import summary (#6062)"}, {"oid": "0d35843121f0ad3004fad015f1520c5b06a5c337", "committedDate": "2020-09-15 09:24:33 +0200", "message": "Merge 2.35 into master (#6149)"}, {"oid": "5bfed867f86e2752539302f2c8cfdce88146d8dd", "committedDate": "2020-11-03 10:37:34 +0100", "message": "fix: NPE when getting a saved event [DHIS2-9877] (#6553)"}, {"oid": "baeafb2d70910473ec698d1f75fe7572271c7c5c", "committedDate": "2020-11-17 14:40:05 +0100", "message": "fix: DHIS2-9894 assignedUser is now mapped to PSI (#6701)"}, {"oid": "b8c6c7169fb0bde20a685bc1b23289ac3658fbca", "committedDate": "2020-11-19 10:01:02 +0100", "message": "fix: [DHIS2-9894] Fix event converter to get the correct enrollment based on the type of program (#6717)"}, {"oid": "e063801f23d5aa761a791364c8c82e2d784f8c84", "committedDate": "2020-11-23 09:23:20 +0100", "message": "fix: DHIS2-9894 user assignment is checked through ProgramStage definition (#6720)"}, {"oid": "3e799d196b8f73ad216ea100a07ddd5f7dfc53e0", "committedDate": "2020-11-30 16:37:14 +0100", "message": "fix: remove long running transaction during Tracker Import (#6782)"}, {"oid": "a9aa89a8d5134104503d1cbb43f96b06f3531569", "committedDate": "2020-12-02 11:10:05 +0100", "message": "fix: Manage event scheduleAt date [DHIS2-10009] (#6804)"}, {"oid": "699074cbe82db1a8e0a5e72edf2a981f3628b54b", "committedDate": "2020-12-07 10:47:48 +0100", "message": "fix: Tracker Identifiers resolution during Tracker import (#6824)"}, {"oid": "f1ee41f1845d51b9efa6c5f5c666371ee503297a", "committedDate": "2020-12-09 21:22:05 +0100", "message": "fix: tune mappers to reduce queries executed during import (#6845)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "20cccd6ead34b08992c0fbd323da268eb0f85ad4", "committedDate": "2021-01-13 11:33:03 +0100", "message": "fix: Fix data values conversion for event [DHIS2-10173] (#7081)"}, {"oid": "bdfe068f265b74f93f377a7bf7d357b8a9df5658", "committedDate": "2021-01-18 10:11:19 +0100", "message": "feat: Assigning data values action (#7108)"}, {"oid": "a23e0ffd69867dff6f4dd17044d7bde9430b7416", "committedDate": "2021-01-18 12:09:52 +0100", "message": "fix: adds missing event properties (DHIS2-10187) (#7110)"}, {"oid": "6e8f0d6c150b303d780b397f7646ff3383f16250", "committedDate": "2021-01-21 09:32:50 +0100", "message": "feat: new tracked dto's properties referring to a date, now use Instant instead of String [DHIS2-101239] (#7119)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "4a4beb6ff3b7ca77da4a4eea381b5a0d78a8a324", "committedDate": "2021-02-01 18:12:32 +0100", "message": "fix: [DHIS2-10208] client dates are not persisted correctly in tei,enrollment,events (2.36) (#7236)"}, {"oid": "4c9e21a843bbdbd73b0aeaf99e2d0320ac0bb811", "committedDate": "2021-03-02 15:17:00 +0100", "message": "fix: Correct error report when using DELETE ImportStrategy (#7491)"}, {"oid": "5a236b7964bc1e38c927c9a390e6672756e997ce", "committedDate": "2021-04-19 14:49:15 +0200", "message": "feature: Review fields in domain objects and create updatable fields validator [DHIS2-10875] (#7842)"}, {"oid": "db043f2d252ab92e85756413bce7515a315e3caa", "committedDate": "2021-04-20 10:33:49 +0200", "message": "feat: Remove tracked entity field from event [DHIS2-10875] (#7878)"}, {"oid": "c1826a5d13bd4a80a9ff1ed14646dbb8f32b4cfb", "committedDate": "2021-04-28 09:05:12 +0200", "message": "feat: Add createdBy and updatedBy to tracker objects in new tracker importer [hDHIS2-10885] (#7923)"}, {"oid": "a4643bd1fe923092627bdd884e05e5dacc7a5911", "committedDate": "2021-04-30 14:46:25 +0200", "message": "refactor: Refactor rule engine service in the new importer to group events and enrollments in one call (#7925)"}, {"oid": "fe04922e144ac69367a99840d5518edda2d67f38", "committedDate": "2021-06-03 08:17:10 +0200", "message": "fix: Make program field read-only in event payload [DHIS2-11225] (#8086)"}, {"oid": "aff1cb136bdfdf4af8213f8878967be42f5687e9", "committedDate": "2021-06-11 10:58:03 +0200", "message": "fix: Get correct program stage from preheated Program [DHIS2-11225] (#8175)"}, {"oid": "4a51e0d1137428eecdc09fccf2a8a5ae8391543d", "committedDate": "2021-09-21 10:15:39 +0200", "message": "fix: lastUpdatedBy/createdBy info not stored for data values [DHIS2-11765] (#8758)"}, {"oid": "7d60b5fd0dd961eb02f009e53a6219ef259f5697", "committedDate": "2021-10-14 11:02:10 +0200", "message": "perf: Remove call to user service in event converter [DHIS2-11983] (#9047)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "f927539ed2f8b3ee6bc82a103deffd319285707f", "committedDate": "2022-01-31 13:55:56 +0100", "message": "fix: use idScheme in event dataElement checks DHIS2-12282 (#9682)"}, {"oid": "c039b8f75c1d965414de926f04540dfaabdd104c", "committedDate": "2022-02-23 13:08:25 +0100", "message": "chore: Clean up service program rule module [TECH-938] (#9885)"}, {"oid": "d117ff9ce355694569f7c6477141cf35c6412609", "committedDate": "2022-03-04 11:13:40 +0100", "message": "fix: Return complete information for user fields in NTI [DHIS2-12717] (#9936)"}, {"oid": "0303652efe35da369ba1d2a437a4b5797a52c451", "committedDate": "2022-04-01 09:37:58 +0200", "message": "chore: tracker entities only support idScheme UID DHIS2-12563 (#10329)"}, {"oid": "82000d2a019227cc85cb3d43b301b8bf758f5c85", "committedDate": "2022-04-19 14:21:17 +0200", "message": "fix: Event.program is a MetadataIdentifier DHIS2-12563 (#10482)"}, {"oid": "877c44b62acb2a3a35577f2948791826eca1b9c4", "committedDate": "2022-04-20 12:47:43 +0200", "message": "fix: Event.programStage is a MetadataIdentifier DHIS2-12563 (#10509)"}, {"oid": "b1671abae3de25b9f7d137dad69aa44486062f57", "committedDate": "2022-04-22 16:26:32 +0200", "message": "fix: Event.orgUnit is a MetadataIdentifier (#10529)"}, {"oid": "c3ee623f83ffefe3521e74e071cfead3343a3dda", "committedDate": "2022-04-26 12:11:55 +0200", "message": "fix: TrackerPreheat defaults support idSchemes DHIS2-12563 (#10546)"}, {"oid": "7f96b9e2e41e96d83226bcc182e3c88a2269ab18", "committedDate": "2022-05-04 11:04:17 +0200", "message": "fix: Event.attributeOptionCombo is a MetadataIdentifier (#10663)"}, {"oid": "382a593af44ef61dfedc169b98d266bc6411b09f", "committedDate": "2022-05-06 13:37:24 +0200", "message": "chore: Event.attributeCategoryOptions is a MetadataIdentifier DHIS2-12563 (#10724)"}, {"oid": "156961b42f4047971223b4ed9816798a38bf2663", "committedDate": "2022-05-09 09:21:04 +0200", "message": "chore: simplify creation of MetadataIdentifier using IdentifiableObjects and null DHIS2-12563 (#10741)"}, {"oid": "af37dd7b6f0b64b46fb84be9e40d35f5f6593709", "committedDate": "2022-05-19 11:11:00 +0200", "message": "fix: DataValue.dataElement is a MetadataIdentifier DHIS2-12563 (#10752)"}, {"oid": "3260a2b695537c672efb11e521dab8195ca37598", "committedDate": "2022-05-19 14:37:14 +0200", "message": "chore: orgUnitName is unused in tracker domain (#10859)"}, {"oid": "df4eaf29ba29ee71a727a1c072fd4bcb03bb4bc9", "committedDate": "2022-05-19 15:13:36 +0200", "message": "chore: docs, improve APIs DHIS2-12563 (#10847)"}, {"oid": "23bc93bab95c05bccaf9bc414c955bba79a6f8c9", "committedDate": "2023-01-05 13:57:59 +0100", "message": "refactor: Replace manual constructors with @RequiredArgsConstructor (#12684)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYwMjAyOA==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r445602028", "body": "Question: why does a \"converter\" service needs to be transactional?", "bodyText": "Question: why does a \"converter\" service needs to be transactional?", "bodyHTML": "<p dir=\"auto\">Question: why does a \"converter\" service needs to be transactional?</p>", "author": "luciano-fiandesio", "createdAt": "2020-06-25T14:29:30Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java", "diffHunk": "@@ -128,9 +128,11 @@ public ProgramInstance from( TrackerPreheat preheat, Enrollment enrollment )\n \n         enrollments.forEach( enrollment -> {\n             ProgramInstance programInstance = preheat.getEnrollment( TrackerIdScheme.UID, enrollment.getEnrollment() );\n-            OrganisationUnit organisationUnit = preheat.get( TrackerIdScheme.UID, OrganisationUnit.class, enrollment.getOrgUnit() );\n+            OrganisationUnit organisationUnit = preheat", "originalCommit": "e7e003a2211cdf3f412ce75f95ef0f6be1973434", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYyNDM4NA==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446624384", "bodyText": "I'm not sure, discuss with @mortenoh", "author": "netroms", "createdAt": "2020-06-28T09:11:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYwMjAyOA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYzNjk0NQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446636945", "bodyText": "Added to next meeting", "author": "netroms", "createdAt": "2020-06-28T11:12:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYwMjAyOA=="}], "type": "inlineReview", "revised_code": {"commit": "c5a94c3d798ab59a16b994801255c4ac2631887b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java\nindex fd1397ff1a..6332435163 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java\n", "chunk": "@@ -127,6 +127,7 @@ public class EnrollmentTrackerConverterService\n         List<ProgramInstance> programInstances = new ArrayList<>();\n \n         enrollments.forEach( enrollment -> {\n+\n             ProgramInstance programInstance = preheat.getEnrollment( TrackerIdScheme.UID, enrollment.getEnrollment() );\n             OrganisationUnit organisationUnit = preheat\n                 .get( TrackerIdScheme.UID, OrganisationUnit.class, enrollment.getOrgUnit() );\n", "next_change": {"commit": "68c9d6c0ee6f2fd2462d63d9f3bef1a317f76ac6", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java\nindex 6332435163..5f46e6b05f 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java\n", "chunk": "@@ -115,23 +117,26 @@ public class EnrollmentTrackerConverterService\n     }\n \n     @Override\n+    @Transactional( readOnly = true )\n     public List<ProgramInstance> from( List<Enrollment> enrollments )\n     {\n         return from( preheat( enrollments ), enrollments );\n     }\n \n-    @Override\n-    @Transactional( readOnly = true )\n-    public List<ProgramInstance> from( TrackerPreheat preheat, List<Enrollment> enrollments )\n+\n+    private List<ProgramInstance> from( TrackerPreheat preheat, List<Enrollment> enrollments )\n     {\n         List<ProgramInstance> programInstances = new ArrayList<>();\n \n         enrollments.forEach( enrollment -> {\n \n             ProgramInstance programInstance = preheat.getEnrollment( TrackerIdScheme.UID, enrollment.getEnrollment() );\n+\n             OrganisationUnit organisationUnit = preheat\n                 .get( TrackerIdScheme.UID, OrganisationUnit.class, enrollment.getOrgUnit() );\n+\n             Program program = preheat.get( TrackerIdScheme.UID, Program.class, enrollment.getProgram() );\n+\n             TrackedEntityInstance trackedEntityInstance = preheat\n                 .getTrackedEntity( TrackerIdScheme.UID, enrollment.getTrackedEntity() );\n \n", "next_change": {"commit": "5bd4c4a413adbc1e587b0e1194af3da352084268", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java\nindex 5f46e6b05f..6db8a1513d 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java\n", "chunk": "@@ -123,23 +131,28 @@ public class EnrollmentTrackerConverterService\n         return from( preheat( enrollments ), enrollments );\n     }\n \n-\n     private List<ProgramInstance> from( TrackerPreheat preheat, List<Enrollment> enrollments )\n     {\n         List<ProgramInstance> programInstances = new ArrayList<>();\n \n         enrollments.forEach( enrollment -> {\n \n-            ProgramInstance programInstance = preheat.getEnrollment( TrackerIdScheme.UID, enrollment.getEnrollment() );\n-\n             OrganisationUnit organisationUnit = preheat\n                 .get( TrackerIdScheme.UID, OrganisationUnit.class, enrollment.getOrgUnit() );\n \n+            Objects.requireNonNull( organisationUnit, TrackerImporterAssertErrors.ORGANISATION_UNIT_CANT_BE_NULL );\n+\n             Program program = preheat.get( TrackerIdScheme.UID, Program.class, enrollment.getProgram() );\n \n+            Objects.requireNonNull( program, TrackerImporterAssertErrors.PROGRAM_CANT_BE_NULL );\n+\n             TrackedEntityInstance trackedEntityInstance = preheat\n                 .getTrackedEntity( TrackerIdScheme.UID, enrollment.getTrackedEntity() );\n \n+            Objects.requireNonNull( trackedEntityInstance, TrackerImporterAssertErrors.TRACKED_ENTITY_CANT_BE_NULL );\n+\n+            ProgramInstance programInstance = preheat.getEnrollment( TrackerIdScheme.UID, enrollment.getEnrollment() );\n+\n             if ( programInstance == null )\n             {\n                 Date now = new Date();\n", "next_change": {"commit": "3999d1c8e8d7c2bcd11c7c5d99fec179abd25e2b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java\nindex 6db8a1513d..fc271a60d9 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java\n", "chunk": "@@ -140,16 +141,16 @@ public class EnrollmentTrackerConverterService\n             OrganisationUnit organisationUnit = preheat\n                 .get( TrackerIdScheme.UID, OrganisationUnit.class, enrollment.getOrgUnit() );\n \n-            Objects.requireNonNull( organisationUnit, TrackerImporterAssertErrors.ORGANISATION_UNIT_CANT_BE_NULL );\n+            checkNotNull( organisationUnit, TrackerImporterAssertErrors.ORGANISATION_UNIT_CANT_BE_NULL );\n \n             Program program = preheat.get( TrackerIdScheme.UID, Program.class, enrollment.getProgram() );\n \n-            Objects.requireNonNull( program, TrackerImporterAssertErrors.PROGRAM_CANT_BE_NULL );\n+            checkNotNull( program, TrackerImporterAssertErrors.PROGRAM_CANT_BE_NULL );\n \n             TrackedEntityInstance trackedEntityInstance = preheat\n                 .getTrackedEntity( TrackerIdScheme.UID, enrollment.getTrackedEntity() );\n \n-            Objects.requireNonNull( trackedEntityInstance, TrackerImporterAssertErrors.TRACKED_ENTITY_CANT_BE_NULL );\n+            checkNotNull( trackedEntityInstance, TrackerImporterAssertErrors.TRACKED_ENTITY_CANT_BE_NULL );\n \n             ProgramInstance programInstance = preheat.getEnrollment( TrackerIdScheme.UID, enrollment.getEnrollment() );\n \n", "next_change": null}]}}]}}]}}]}, "revised_code_in_main": {"commit": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java\nindex fd1397ff1a..83a2f9e24f 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java\n", "chunk": "@@ -120,20 +121,28 @@ public class EnrollmentTrackerConverterService\n         return from( preheat( enrollments ), enrollments );\n     }\n \n-    @Override\n-    @Transactional( readOnly = true )\n-    public List<ProgramInstance> from( TrackerPreheat preheat, List<Enrollment> enrollments )\n+    private List<ProgramInstance> from( TrackerPreheat preheat, List<Enrollment> enrollments )\n     {\n         List<ProgramInstance> programInstances = new ArrayList<>();\n \n         enrollments.forEach( enrollment -> {\n-            ProgramInstance programInstance = preheat.getEnrollment( TrackerIdScheme.UID, enrollment.getEnrollment() );\n+\n             OrganisationUnit organisationUnit = preheat\n                 .get( TrackerIdScheme.UID, OrganisationUnit.class, enrollment.getOrgUnit() );\n+\n+            checkNotNull( organisationUnit, TrackerImporterAssertErrors.ORGANISATION_UNIT_CANT_BE_NULL );\n+\n             Program program = preheat.get( TrackerIdScheme.UID, Program.class, enrollment.getProgram() );\n+\n+            checkNotNull( program, TrackerImporterAssertErrors.PROGRAM_CANT_BE_NULL );\n+\n             TrackedEntityInstance trackedEntityInstance = preheat\n                 .getTrackedEntity( TrackerIdScheme.UID, enrollment.getTrackedEntity() );\n \n+            checkNotNull( trackedEntityInstance, TrackerImporterAssertErrors.TRACKED_ENTITY_CANT_BE_NULL );\n+\n+            ProgramInstance programInstance = preheat.getEnrollment( TrackerIdScheme.UID, enrollment.getEnrollment() );\n+\n             if ( programInstance == null )\n             {\n                 Date now = new Date();\n", "next_change": {"commit": "81227d538954409f62f12f23cd8db87dc95228a1", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java\nindex 83a2f9e24f..de2e07da23 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java\n", "chunk": "@@ -139,7 +126,8 @@ public class EnrollmentTrackerConverterService\n             TrackedEntityInstance trackedEntityInstance = preheat\n                 .getTrackedEntity( TrackerIdScheme.UID, enrollment.getTrackedEntity() );\n \n-            checkNotNull( trackedEntityInstance, TrackerImporterAssertErrors.TRACKED_ENTITY_CANT_BE_NULL );\n+            // checkNotNull( trackedEntityInstance,\n+            // TrackerImporterAssertErrors.TRACKED_ENTITY_CANT_BE_NULL );\n \n             ProgramInstance programInstance = preheat.getEnrollment( TrackerIdScheme.UID, enrollment.getEnrollment() );\n \n", "next_change": {"commit": "c70f79c6febd4b98e98c6f0c572d1099207d86b3", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java\nindex de2e07da23..bf8e5ad19c 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java\n", "chunk": "@@ -126,9 +125,6 @@ public class EnrollmentTrackerConverterService\n             TrackedEntityInstance trackedEntityInstance = preheat\n                 .getTrackedEntity( TrackerIdScheme.UID, enrollment.getTrackedEntity() );\n \n-            // checkNotNull( trackedEntityInstance,\n-            // TrackerImporterAssertErrors.TRACKED_ENTITY_CANT_BE_NULL );\n-\n             ProgramInstance programInstance = preheat.getEnrollment( TrackerIdScheme.UID, enrollment.getEnrollment() );\n \n             if ( programInstance == null )\n", "next_change": {"commit": "cb2ee65c0210c0d4b2bd8851789da8d4adfaf04d", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java\nindex bf8e5ad19c..e61589dabd 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java\n", "chunk": "@@ -97,47 +95,49 @@ public class EnrollmentTrackerConverterService\n     @Override\n     public ProgramInstance from( TrackerPreheat preheat, Enrollment enrollment )\n     {\n-        List<ProgramInstance> programInstances = from( preheat, Collections.singletonList( enrollment ) );\n-\n-        if ( programInstances.isEmpty() )\n-        {\n-            return null;\n-        }\n-\n-        return programInstances.get( 0 );\n+        ProgramInstance programInstance = preheat.getEnrollment( TrackerIdScheme.UID, enrollment.getEnrollment() );\n+        return from( preheat, enrollment, programInstance );\n     }\n+\n     @Override\n     public List<ProgramInstance> from( TrackerPreheat preheat, List<Enrollment> enrollments )\n     {\n-        List<ProgramInstance> programInstances = new ArrayList<>();\n+        return enrollments\n+            .stream()\n+            .map( enrollment -> from( preheat, enrollment ) )\n+            .collect( Collectors.toList() );\n+    }\n \n-        enrollments.forEach( enrollment -> {\n+    @Override\n+    public ProgramInstance fromForRuleEngine( TrackerPreheat preheat, Enrollment enrollment )\n+    {\n+        return from( preheat, enrollment, null );\n+    }\n \n-            OrganisationUnit organisationUnit = preheat\n-                .get( TrackerIdScheme.UID, OrganisationUnit.class, enrollment.getOrgUnit() );\n+    private ProgramInstance from( TrackerPreheat preheat, Enrollment enrollment, ProgramInstance programInstance )\n+    {\n+        OrganisationUnit organisationUnit = preheat\n+            .get( TrackerIdScheme.UID, OrganisationUnit.class, enrollment.getOrgUnit() );\n \n-            checkNotNull( organisationUnit, TrackerImporterAssertErrors.ORGANISATION_UNIT_CANT_BE_NULL );\n+        checkNotNull( organisationUnit, TrackerImporterAssertErrors.ORGANISATION_UNIT_CANT_BE_NULL );\n \n-            Program program = preheat.get( TrackerIdScheme.UID, Program.class, enrollment.getProgram() );\n+        Program program = preheat.get( TrackerIdScheme.UID, Program.class, enrollment.getProgram() );\n \n-            checkNotNull( program, TrackerImporterAssertErrors.PROGRAM_CANT_BE_NULL );\n+        checkNotNull( program, TrackerImporterAssertErrors.PROGRAM_CANT_BE_NULL );\n \n-            TrackedEntityInstance trackedEntityInstance = preheat\n-                .getTrackedEntity( TrackerIdScheme.UID, enrollment.getTrackedEntity() );\n+        TrackedEntityInstance trackedEntityInstance = preheat\n+            .getTrackedEntity( TrackerIdScheme.UID, enrollment.getTrackedEntity() );\n \n-            ProgramInstance programInstance = preheat.getEnrollment( TrackerIdScheme.UID, enrollment.getEnrollment() );\n+        if ( programInstance == null )\n+        {\n+            Date now = new Date();\n \n-            if ( programInstance == null )\n-            {\n-                Date now = new Date();\n-\n-                programInstance = new ProgramInstance();\n-                programInstance.setUid( enrollment.getEnrollment() );\n-                programInstance.setCreated( now );\n-                programInstance.setCreatedAtClient( now );\n-                programInstance.setLastUpdated( now );\n-                programInstance.setLastUpdatedAtClient( now );\n-            }\n+            programInstance = new ProgramInstance();\n+            programInstance.setUid( enrollment.getEnrollment() );\n+            programInstance.setCreated( now );\n+            programInstance.setCreatedAtClient( now );\n+            programInstance.setLastUpdated( now );\n+            programInstance.setLastUpdatedAtClient( now );\n \n             if ( !CodeGenerator.isValidUid( programInstance.getUid() ) )\n             {\n", "next_change": {"commit": "3e799d196b8f73ad216ea100a07ddd5f7dfc53e0", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java\nindex e61589dabd..7b9fcb9bf0 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java\n", "chunk": "@@ -139,11 +138,6 @@ public class EnrollmentTrackerConverterService\n             programInstance.setLastUpdated( now );\n             programInstance.setLastUpdatedAtClient( now );\n \n-            if ( !CodeGenerator.isValidUid( programInstance.getUid() ) )\n-            {\n-                programInstance.setUid( CodeGenerator.generateUid() );\n-            }\n-\n             programInstance.setEnrollmentDate( DateUtils.parseDate( enrollment.getEnrolledAt() ) );\n             programInstance.setIncidentDate( DateUtils.parseDate( enrollment.getOccurredAt() ) );\n             programInstance.setOrganisationUnit( organisationUnit );\n", "next_change": {"commit": "3ab88a5f4623a8c749246bedef34fcb926d185cb", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java\nindex 7b9fcb9bf0..575579aa02 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java\n", "chunk": "@@ -138,8 +138,11 @@ public class EnrollmentTrackerConverterService\n             programInstance.setLastUpdated( now );\n             programInstance.setLastUpdatedAtClient( now );\n \n-            programInstance.setEnrollmentDate( DateUtils.parseDate( enrollment.getEnrolledAt() ) );\n-            programInstance.setIncidentDate( DateUtils.parseDate( enrollment.getOccurredAt() ) );\n+            Date enrollmentDate = DateUtils.parseDate( enrollment.getEnrolledAt() );\n+            Date incidentDate = DateUtils.parseDate( enrollment.getOccurredAt() );\n+\n+            programInstance.setEnrollmentDate( enrollmentDate );\n+            programInstance.setIncidentDate( incidentDate != null ? incidentDate : enrollmentDate );\n             programInstance.setOrganisationUnit( organisationUnit );\n             programInstance.setProgram( program );\n             programInstance.setEntityInstance( trackedEntityInstance );\n", "next_change": {"commit": "6e8f0d6c150b303d780b397f7646ff3383f16250", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java\nindex 575579aa02..b9e6ad2eb8 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java\n", "chunk": "@@ -138,8 +137,8 @@ public class EnrollmentTrackerConverterService\n             programInstance.setLastUpdated( now );\n             programInstance.setLastUpdatedAtClient( now );\n \n-            Date enrollmentDate = DateUtils.parseDate( enrollment.getEnrolledAt() );\n-            Date incidentDate = DateUtils.parseDate( enrollment.getOccurredAt() );\n+            Date enrollmentDate = DateUtils.fromInstant( enrollment.getEnrolledAt() );\n+            Date incidentDate = DateUtils.fromInstant( enrollment.getOccurredAt() );\n \n             programInstance.setEnrollmentDate( enrollmentDate );\n             programInstance.setIncidentDate( incidentDate != null ? incidentDate : enrollmentDate );\n", "next_change": {"commit": "4a4beb6ff3b7ca77da4a4eea381b5a0d78a8a324", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java\nindex b9e6ad2eb8..2f682abc62 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java\n", "chunk": "@@ -126,34 +126,45 @@ public class EnrollmentTrackerConverterService\n         TrackedEntityInstance trackedEntityInstance = preheat\n             .getTrackedEntity( TrackerIdScheme.UID, enrollment.getTrackedEntity() );\n \n+        Date now = new Date();\n+\n         if ( isNewEntity( programInstance ) )\n         {\n-            Date now = new Date();\n-\n             programInstance = new ProgramInstance();\n-            programInstance.setUid( enrollment.getEnrollment() );\n+            programInstance.setUid(\n+                !StringUtils.isEmpty( enrollment.getEnrollment() ) ? enrollment.getEnrollment() : enrollment.getUid() );\n             programInstance.setCreated( now );\n-            programInstance.setCreatedAtClient( now );\n-            programInstance.setLastUpdated( now );\n-            programInstance.setLastUpdatedAtClient( now );\n-\n-            Date enrollmentDate = DateUtils.fromInstant( enrollment.getEnrolledAt() );\n-            Date incidentDate = DateUtils.fromInstant( enrollment.getOccurredAt() );\n-\n-            programInstance.setEnrollmentDate( enrollmentDate );\n-            programInstance.setIncidentDate( incidentDate != null ? incidentDate : enrollmentDate );\n-            programInstance.setOrganisationUnit( organisationUnit );\n-            programInstance.setProgram( program );\n-            programInstance.setEntityInstance( trackedEntityInstance );\n-            programInstance.setFollowup( enrollment.isFollowUp() );\n-            programInstance.setGeometry( enrollment.getGeometry() );\n-\n-            if ( enrollment.getStatus() == null )\n-            {\n-                enrollment.setStatus( EnrollmentStatus.ACTIVE );\n-            }\n-\n-            programInstance.setStatus( enrollment.getStatus().getProgramStatus() );\n+            programInstance.setStoredBy( enrollment.getStoredBy() );\n+        }\n+\n+        programInstance.setLastUpdated( now );\n+        programInstance.setCreatedAtClient( DateUtils.fromInstant( enrollment.getCreatedAtClient() ) );\n+        programInstance.setLastUpdatedAtClient( DateUtils.fromInstant( enrollment.getUpdatedAtClient() ) );\n+\n+        Date enrollmentDate = DateUtils.fromInstant( enrollment.getEnrolledAt() );\n+        Date incidentDate = DateUtils.fromInstant( enrollment.getOccurredAt() );\n+\n+        programInstance.setEnrollmentDate( enrollmentDate );\n+        programInstance.setIncidentDate( incidentDate != null ? incidentDate : enrollmentDate );\n+        programInstance.setOrganisationUnit( organisationUnit );\n+        programInstance.setProgram( program );\n+        programInstance.setEntityInstance( trackedEntityInstance );\n+        programInstance.setFollowup( enrollment.isFollowUp() );\n+        programInstance.setGeometry( enrollment.getGeometry() );\n+\n+        if ( enrollment.getStatus() == null )\n+        {\n+            enrollment.setStatus( EnrollmentStatus.ACTIVE );\n+        }\n+\n+        programInstance.setStatus( enrollment.getStatus().getProgramStatus() );\n+\n+        if ( programInstance.isCompleted() )\n+        {\n+            programInstance\n+                .setEndDate( enrollment.getCompletedAt() != null ? DateUtils.fromInstant( enrollment.getCompletedAt() )\n+                    : new Date() );\n+            programInstance.setCompletedBy( enrollment.getCompletedBy() );\n         }\n \n         if ( isNotEmpty( enrollment.getNotes() ) )\n", "next_change": {"commit": "5a236b7964bc1e38c927c9a390e6672756e997ce", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java\nindex 2f682abc62..37e19febe9 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java\n", "chunk": "@@ -157,14 +161,29 @@ public class EnrollmentTrackerConverterService\n             enrollment.setStatus( EnrollmentStatus.ACTIVE );\n         }\n \n+        programInstance.setEndDate( DateUtils.fromInstant( enrollment.getCompletedAt() ) );\n+        programInstance.setCompletedBy( enrollment.getCompletedBy() );\n+\n+        ProgramStatus previousStatus = programInstance.getStatus();\n         programInstance.setStatus( enrollment.getStatus().getProgramStatus() );\n \n-        if ( programInstance.isCompleted() )\n+        if ( !Objects.equal( previousStatus, programInstance.getStatus() ) )\n         {\n-            programInstance\n-                .setEndDate( enrollment.getCompletedAt() != null ? DateUtils.fromInstant( enrollment.getCompletedAt() )\n-                    : new Date() );\n-            programInstance.setCompletedBy( enrollment.getCompletedBy() );\n+            if ( programInstance.isCompleted() )\n+            {\n+                programInstance\n+                    .setEndDate(\n+                        enrollment.getCompletedAt() != null ? DateUtils.fromInstant( enrollment.getCompletedAt() )\n+                            : new Date() );\n+                programInstance.setCompletedBy(\n+                    enrollment.getCompletedBy() != null ? enrollment.getCompletedBy() : preheat.getUsername() );\n+            }\n+            else if ( programInstance.getStatus().equals( ProgramStatus.CANCELLED ) )\n+            {\n+                programInstance.setEndDate(\n+                    enrollment.getCompletedAt() != null ? DateUtils.fromInstant( enrollment.getCompletedAt() )\n+                        : new Date() );\n+            }\n         }\n \n         if ( isNotEmpty( enrollment.getNotes() ) )\n", "next_change": {"commit": "d117ff9ce355694569f7c6477141cf35c6412609", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java\nindex 37e19febe9..d33445ce3d 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java\n", "chunk": "@@ -171,18 +171,12 @@ public class EnrollmentTrackerConverterService\n         {\n             if ( programInstance.isCompleted() )\n             {\n-                programInstance\n-                    .setEndDate(\n-                        enrollment.getCompletedAt() != null ? DateUtils.fromInstant( enrollment.getCompletedAt() )\n-                            : new Date() );\n-                programInstance.setCompletedBy(\n-                    enrollment.getCompletedBy() != null ? enrollment.getCompletedBy() : preheat.getUsername() );\n+                programInstance.setEndDate( new Date() );\n+                programInstance.setCompletedBy( preheat.getUsername() );\n             }\n             else if ( programInstance.getStatus().equals( ProgramStatus.CANCELLED ) )\n             {\n-                programInstance.setEndDate(\n-                    enrollment.getCompletedAt() != null ? DateUtils.fromInstant( enrollment.getCompletedAt() )\n-                        : new Date() );\n+                programInstance.setEndDate( new Date() );\n             }\n         }\n \n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "message": "Merge commit", "committedDate": null}, {"oid": "399526882c2fbbf5600922b3c3b6030420cf4e96", "committedDate": "2020-07-13 12:23:07 +0200", "message": "feat: Run rule engine rules in new importer [DHIS2-7310]"}, {"oid": "3e3dc98d92f0c13fb56cf17894eab06a78842133", "committedDate": "2020-08-04 17:20:37 +0200", "message": "feat: Enrollment/Events note persistence"}, {"oid": "8374cb43e422eddc1f4c01bb715d8d285acc37be", "committedDate": "2020-08-10 11:38:43 +0200", "message": "Merge remote-tracking branch 'origin/master' into DHIS2-7310-merge"}, {"oid": "81227d538954409f62f12f23cd8db87dc95228a1", "committedDate": "2020-08-10 13:38:00 +0200", "message": "Do not validate payload in the converters"}, {"oid": "adcecc1a241d031228aa3169f3de930083a28acb", "committedDate": "2020-08-10 14:21:20 +0200", "message": "Fix transactional in enrollment converter"}, {"oid": "c70f79c6febd4b98e98c6f0c572d1099207d86b3", "committedDate": "2020-08-12 16:29:26 +0200", "message": "Code review fixes"}, {"oid": "cb2ee65c0210c0d4b2bd8851789da8d4adfaf04d", "committedDate": "2020-09-07 10:28:21 +0200", "message": "fix: [DHIS2-9287] Fix the stats in the import summary (#6062)"}, {"oid": "ae4d365663ffddc9a34d1cdc0f629fd7b6386e90", "committedDate": "2020-11-03 10:25:55 +0100", "message": "feat: improve note validation during tracker import [TECH-457]"}, {"oid": "3e799d196b8f73ad216ea100a07ddd5f7dfc53e0", "committedDate": "2020-11-30 16:37:14 +0100", "message": "fix: remove long running transaction during Tracker Import (#6782)"}, {"oid": "699074cbe82db1a8e0a5e72edf2a981f3628b54b", "committedDate": "2020-12-07 10:47:48 +0100", "message": "fix: Tracker Identifiers resolution during Tracker import (#6824)"}, {"oid": "3ab88a5f4623a8c749246bedef34fcb926d185cb", "committedDate": "2020-12-08 10:40:14 +0100", "message": "fix: [DHIS2-7310] Move rule engine call and validations after bundle validation (#6843)"}, {"oid": "7098e9412b922ed70f8136f30c7d790e27bb43be", "committedDate": "2020-12-10 10:43:44 +0100", "message": "chore: Remove unused imports (#6875)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "20cccd6ead34b08992c0fbd323da268eb0f85ad4", "committedDate": "2021-01-13 11:33:03 +0100", "message": "fix: Fix data values conversion for event [DHIS2-10173] (#7081)"}, {"oid": "6e8f0d6c150b303d780b397f7646ff3383f16250", "committedDate": "2021-01-21 09:32:50 +0100", "message": "feat: new tracked dto's properties referring to a date, now use Instant instead of String [DHIS2-101239] (#7119)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "4a4beb6ff3b7ca77da4a4eea381b5a0d78a8a324", "committedDate": "2021-02-01 18:12:32 +0100", "message": "fix: [DHIS2-10208] client dates are not persisted correctly in tei,enrollment,events (2.36) (#7236)"}, {"oid": "5a236b7964bc1e38c927c9a390e6672756e997ce", "committedDate": "2021-04-19 14:49:15 +0200", "message": "feature: Review fields in domain objects and create updatable fields validator [DHIS2-10875] (#7842)"}, {"oid": "c1826a5d13bd4a80a9ff1ed14646dbb8f32b4cfb", "committedDate": "2021-04-28 09:05:12 +0200", "message": "feat: Add createdBy and updatedBy to tracker objects in new tracker importer [hDHIS2-10885] (#7923)"}, {"oid": "a4643bd1fe923092627bdd884e05e5dacc7a5911", "committedDate": "2021-04-30 14:46:25 +0200", "message": "refactor: Refactor rule engine service in the new importer to group events and enrollments in one call (#7925)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "c039b8f75c1d965414de926f04540dfaabdd104c", "committedDate": "2022-02-23 13:08:25 +0100", "message": "chore: Clean up service program rule module [TECH-938] (#9885)"}, {"oid": "d117ff9ce355694569f7c6477141cf35c6412609", "committedDate": "2022-03-04 11:13:40 +0100", "message": "fix: Return complete information for user fields in NTI [DHIS2-12717] (#9936)"}, {"oid": "0303652efe35da369ba1d2a437a4b5797a52c451", "committedDate": "2022-04-01 09:37:58 +0200", "message": "chore: tracker entities only support idScheme UID DHIS2-12563 (#10329)"}, {"oid": "24fcc26c114646261ceec22e2ab6c15ce62244f5", "committedDate": "2022-04-29 09:36:38 +0200", "message": "fix: Enrollment.orgUnit is a MetadataIdentifier (#10587)"}, {"oid": "0b13bfde3383fa87f777453a04c201838ebe69d8", "committedDate": "2022-12-19 09:10:18 +0100", "message": "chore: single validator DHIS2-14298 (#12597)"}, {"oid": "23bc93bab95c05bccaf9bc414c955bba79a6f8c9", "committedDate": "2023-01-05 13:57:59 +0100", "message": "refactor: Replace manual constructors with @RequiredArgsConstructor (#12684)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA2MzA2Mw==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446063063", "body": "This is a question rather than a comment: why does the actual validation take place in a separate class? Wouldn't be better to have these ValidationHooks to encapsulate the required validation logic?", "bodyText": "This is a question rather than a comment: why does the actual validation take place in a separate class? Wouldn't be better to have these ValidationHooks to encapsulate the required validation logic?", "bodyHTML": "<p dir=\"auto\">This is a question rather than a comment: why does the actual validation take place in a separate class? Wouldn't be better to have these ValidationHooks to encapsulate the required validation logic?</p>", "author": "luciano-fiandesio", "createdAt": "2020-06-26T09:07:20Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentNoteValidationHook.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package org.hisp.dhis.tracker.validation.hooks;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.hisp.dhis.tracker.TrackerImportStrategy;\n+import org.hisp.dhis.tracker.domain.Enrollment;\n+import org.hisp.dhis.tracker.domain.Note;\n+import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n+import org.hisp.dhis.tracker.validation.TrackerImportValidationContext;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.List;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+@Component\n+public class EnrollmentNoteValidationHook extends AbstractTrackerDtoValidationHook\n+{\n+    public EnrollmentNoteValidationHook()\n+    {\n+        super( Enrollment.class, TrackerImportStrategy.CREATE_AND_UPDATE );\n+    }\n+\n+    @Override\n+    public void validateEnrollment( ValidationErrorReporter reporter, Enrollment enrollment )\n+    {\n+        TrackerImportValidationContext validationContext = reporter.getValidationContext();\n+        TrackerImportStrategy strategy = validationContext.getStrategy( enrollment );\n+\n+        List<Note> notes = enrollment.getNotes();\n+\n+        validateNotes( reporter, strategy, notes );", "originalCommit": "ad5654dcf03fa2ccb82adad686d9e13dde5a93b0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYyNDUxOQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446624519", "bodyText": "This is code de-duplication , since we do the exact validation on notes for notes on enrollments and notes on events.", "author": "netroms", "createdAt": "2020-06-28T09:12:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA2MzA2Mw=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "3e3dc98d92f0c13fb56cf17894eab06a78842133", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentNoteValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentNoteValidationHook.java\nindex 92f224a98a..d385d61404 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentNoteValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentNoteValidationHook.java\n", "chunk": "@@ -28,34 +28,31 @@ package org.hisp.dhis.tracker.validation.hooks;\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n+import org.hisp.dhis.trackedentity.TrackedEntityAttributeService;\n+import org.hisp.dhis.trackedentitycomment.TrackedEntityCommentService;\n import org.hisp.dhis.tracker.TrackerImportStrategy;\n import org.hisp.dhis.tracker.domain.Enrollment;\n-import org.hisp.dhis.tracker.domain.Note;\n import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n-import org.hisp.dhis.tracker.validation.TrackerImportValidationContext;\n import org.springframework.stereotype.Component;\n \n-import java.util.List;\n-\n /**\n  * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n  */\n @Component\n public class EnrollmentNoteValidationHook extends AbstractTrackerDtoValidationHook\n {\n-    public EnrollmentNoteValidationHook()\n+    private final TrackedEntityCommentService commentService;\n+\n+    public EnrollmentNoteValidationHook( TrackedEntityAttributeService teAttrService,\n+        TrackedEntityCommentService commentService )\n     {\n-        super( Enrollment.class, TrackerImportStrategy.CREATE_AND_UPDATE );\n+        super( Enrollment.class, TrackerImportStrategy.CREATE_AND_UPDATE, teAttrService );\n+        this.commentService = commentService;\n     }\n \n     @Override\n     public void validateEnrollment( ValidationErrorReporter reporter, Enrollment enrollment )\n     {\n-        TrackerImportValidationContext validationContext = reporter.getValidationContext();\n-        TrackerImportStrategy strategy = validationContext.getStrategy( enrollment );\n-\n-        List<Note> notes = enrollment.getNotes();\n-\n-        validateNotes( reporter, strategy, notes );\n+        enrollment.setNotes( NoteValidationUtils.getPersistableNotes( this.commentService, enrollment.getNotes() ) );\n     }\n }\n", "next_change": {"commit": "ae4d365663ffddc9a34d1cdc0f629fd7b6386e90", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentNoteValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentNoteValidationHook.java\nindex d385d61404..bb3afcec2c 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentNoteValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentNoteValidationHook.java\n", "chunk": "@@ -41,18 +40,14 @@ import org.springframework.stereotype.Component;\n @Component\n public class EnrollmentNoteValidationHook extends AbstractTrackerDtoValidationHook\n {\n-    private final TrackedEntityCommentService commentService;\n-\n-    public EnrollmentNoteValidationHook( TrackedEntityAttributeService teAttrService,\n-        TrackedEntityCommentService commentService )\n+    public EnrollmentNoteValidationHook( TrackedEntityAttributeService teAttrService )\n     {\n         super( Enrollment.class, TrackerImportStrategy.CREATE_AND_UPDATE, teAttrService );\n-        this.commentService = commentService;\n     }\n \n     @Override\n     public void validateEnrollment( ValidationErrorReporter reporter, Enrollment enrollment )\n     {\n-        enrollment.setNotes( NoteValidationUtils.getPersistableNotes( this.commentService, enrollment.getNotes() ) );\n+        enrollment.setNotes( NoteValidationUtils.validate( reporter, enrollment.getNotes() ) );\n     }\n }\n", "next_change": {"commit": "0bf55d776481f6511e5f9ebca5de1f2cf79777c0", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentNoteValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentNoteValidationHook.java\nindex bb3afcec2c..7570adc8b1 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentNoteValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentNoteValidationHook.java\n", "chunk": "@@ -40,14 +38,9 @@ import org.springframework.stereotype.Component;\n @Component\n public class EnrollmentNoteValidationHook extends AbstractTrackerDtoValidationHook\n {\n-    public EnrollmentNoteValidationHook( TrackedEntityAttributeService teAttrService )\n-    {\n-        super( Enrollment.class, TrackerImportStrategy.CREATE_AND_UPDATE, teAttrService );\n-    }\n-\n     @Override\n     public void validateEnrollment( ValidationErrorReporter reporter, Enrollment enrollment )\n     {\n-        enrollment.setNotes( NoteValidationUtils.validate( reporter, enrollment.getNotes() ) );\n+        enrollment.setNotes( ValidationUtils.validateNotes( reporter, enrollment.getNotes() ) );\n     }\n }\n", "next_change": {"commit": "97fa18701761c6993e20f2e7a3816ea689129480", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentNoteValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentNoteValidationHook.java\nindex 7570adc8b1..17ad991b6b 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentNoteValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentNoteValidationHook.java\n", "chunk": "@@ -41,6 +40,7 @@ public class EnrollmentNoteValidationHook extends AbstractTrackerDtoValidationHo\n     @Override\n     public void validateEnrollment( ValidationErrorReporter reporter, Enrollment enrollment )\n     {\n-        enrollment.setNotes( ValidationUtils.validateNotes( reporter, enrollment.getNotes() ) );\n+        enrollment.setNotes( ValidationUtils.validateNotes( reporter, enrollment,\n+            enrollment.getNotes() ) );\n     }\n }\n", "next_change": {"commit": "f7cfc83610c75486bbb0457dde057eaed777f3d2", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentNoteValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentNoteValidationHook.java\nindex 17ad991b6b..1b14060bf7 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentNoteValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentNoteValidationHook.java\n", "chunk": "@@ -38,9 +39,9 @@ import org.springframework.stereotype.Component;\n public class EnrollmentNoteValidationHook extends AbstractTrackerDtoValidationHook\n {\n     @Override\n-    public void validateEnrollment( ValidationErrorReporter reporter, Enrollment enrollment )\n+    public void validateEnrollment( ValidationErrorReporter reporter, TrackerBundle bundle, Enrollment enrollment )\n     {\n-        enrollment.setNotes( ValidationUtils.validateNotes( reporter, enrollment,\n+        enrollment.setNotes( ValidationUtils.validateNotes( reporter, bundle.getPreheat(), enrollment,\n             enrollment.getNotes() ) );\n     }\n }\n", "next_change": {"commit": "2db6b519d76e1d0b0390a9dc6f2f650824c543bb", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentNoteValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentNoteValidator.java\nsimilarity index 87%\nrename from dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentNoteValidationHook.java\nrename to dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentNoteValidator.java\nindex 1b14060bf7..d09078a64a 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentNoteValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentNoteValidator.java\n", "chunk": "@@ -29,17 +29,18 @@ package org.hisp.dhis.tracker.validation.hooks;\n \n import org.hisp.dhis.tracker.bundle.TrackerBundle;\n import org.hisp.dhis.tracker.domain.Enrollment;\n-import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n+import org.hisp.dhis.tracker.validation.ValidationErrorReporter;\n+import org.hisp.dhis.tracker.validation.Validator;\n import org.springframework.stereotype.Component;\n \n /**\n  * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n  */\n @Component\n-public class EnrollmentNoteValidationHook extends AbstractTrackerDtoValidationHook\n+public class EnrollmentNoteValidator implements Validator<Enrollment>\n {\n     @Override\n-    public void validateEnrollment( ValidationErrorReporter reporter, TrackerBundle bundle, Enrollment enrollment )\n+    public void validate( ValidationErrorReporter reporter, TrackerBundle bundle, Enrollment enrollment )\n     {\n         enrollment.setNotes( ValidationUtils.validateNotes( reporter, bundle.getPreheat(), enrollment,\n             enrollment.getNotes() ) );\n", "next_change": null}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "message": "Merge commit", "committedDate": null}, {"oid": "3e3dc98d92f0c13fb56cf17894eab06a78842133", "committedDate": "2020-08-04 17:20:37 +0200", "message": "feat: Enrollment/Events note persistence"}, {"oid": "ae4d365663ffddc9a34d1cdc0f629fd7b6386e90", "committedDate": "2020-11-03 10:25:55 +0100", "message": "feat: improve note validation during tracker import [TECH-457]"}, {"oid": "0bf55d776481f6511e5f9ebca5de1f2cf79777c0", "committedDate": "2020-11-19 13:55:46 +0100", "message": "refactor: New Tracker Error reporting refactor (#6706)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "97fa18701761c6993e20f2e7a3816ea689129480", "committedDate": "2022-01-11 15:31:02 +0100", "message": "chore: hooks should add errors via reporter directly TECH-880 (#9523)"}, {"oid": "f7cfc83610c75486bbb0457dde057eaed777f3d2", "committedDate": "2022-05-27 15:15:25 +0200", "message": "chore: ValidationErrorReporter does not need the bunlde DHIS2-12519 (#10878)"}, {"oid": "b0a861c0308005b865cafa2344c1231c0a4f2bc3", "committedDate": "2022-12-02 13:36:08 +0100", "message": "fix: turn removeOnError into skipOnError DHIS2-14213 (#12457)"}, {"oid": "7ac68b368a1dbd9362973b30f7160399abe801a0", "committedDate": "2022-12-06 09:04:47 +0100", "message": "chore: move ValidationErrorReporter close to its usage (#12486)"}, {"oid": "2db6b519d76e1d0b0390a9dc6f2f650824c543bb", "committedDate": "2022-12-13 13:10:13 +0100", "message": "chore: migrate enrollment validators (#12526)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA2NDg0Ng==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446064846", "body": "Please use the DHIS2 standard injection (based on Constructor), like so:\r\n\r\n```\r\nprotected final FileResourceService fileResourceService;\r\n\r\n    protected final TrackedEntityAttributeValueService trackedEntityAttributeValueService;\r\n\r\n    protected final ReservedValueService reservedValueService;\r\n\r\n    private final DhisConfigurationProvider dhisConfigurationProvider;\r\n\r\n    public TrackedEntityAttributeValidationHook( FileResourceService fileResourceService,\r\n        TrackedEntityAttributeValueService trackedEntityAttributeValueService,\r\n        ReservedValueService reservedValueService, DhisConfigurationProvider dhisConfigurationProvider )\r\n    {\r\n        super( TrackedEntity.class, TrackerImportStrategy.CREATE_AND_UPDATE );\r\n\r\n        checkNotNull( fileResourceService );\r\n        checkNotNull( trackedEntityAttributeValueService );\r\n        checkNotNull( reservedValueService );\r\n        checkNotNull( dhisConfigurationProvider );\r\n        this.fileResourceService = fileResourceService;\r\n        this.trackedEntityAttributeValueService = trackedEntityAttributeValueService;\r\n        this.reservedValueService = reservedValueService;\r\n        this.dhisConfigurationProvider = dhisConfigurationProvider;\r\n    }\r\n```", "bodyText": "Please use the DHIS2 standard injection (based on Constructor), like so:\nprotected final FileResourceService fileResourceService;\n\n    protected final TrackedEntityAttributeValueService trackedEntityAttributeValueService;\n\n    protected final ReservedValueService reservedValueService;\n\n    private final DhisConfigurationProvider dhisConfigurationProvider;\n\n    public TrackedEntityAttributeValidationHook( FileResourceService fileResourceService,\n        TrackedEntityAttributeValueService trackedEntityAttributeValueService,\n        ReservedValueService reservedValueService, DhisConfigurationProvider dhisConfigurationProvider )\n    {\n        super( TrackedEntity.class, TrackerImportStrategy.CREATE_AND_UPDATE );\n\n        checkNotNull( fileResourceService );\n        checkNotNull( trackedEntityAttributeValueService );\n        checkNotNull( reservedValueService );\n        checkNotNull( dhisConfigurationProvider );\n        this.fileResourceService = fileResourceService;\n        this.trackedEntityAttributeValueService = trackedEntityAttributeValueService;\n        this.reservedValueService = reservedValueService;\n        this.dhisConfigurationProvider = dhisConfigurationProvider;\n    }", "bodyHTML": "<p dir=\"auto\">Please use the DHIS2 standard injection (based on Constructor), like so:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"protected final FileResourceService fileResourceService;\n\n    protected final TrackedEntityAttributeValueService trackedEntityAttributeValueService;\n\n    protected final ReservedValueService reservedValueService;\n\n    private final DhisConfigurationProvider dhisConfigurationProvider;\n\n    public TrackedEntityAttributeValidationHook( FileResourceService fileResourceService,\n        TrackedEntityAttributeValueService trackedEntityAttributeValueService,\n        ReservedValueService reservedValueService, DhisConfigurationProvider dhisConfigurationProvider )\n    {\n        super( TrackedEntity.class, TrackerImportStrategy.CREATE_AND_UPDATE );\n\n        checkNotNull( fileResourceService );\n        checkNotNull( trackedEntityAttributeValueService );\n        checkNotNull( reservedValueService );\n        checkNotNull( dhisConfigurationProvider );\n        this.fileResourceService = fileResourceService;\n        this.trackedEntityAttributeValueService = trackedEntityAttributeValueService;\n        this.reservedValueService = reservedValueService;\n        this.dhisConfigurationProvider = dhisConfigurationProvider;\n    }\"><pre><code>protected final FileResourceService fileResourceService;\n\n    protected final TrackedEntityAttributeValueService trackedEntityAttributeValueService;\n\n    protected final ReservedValueService reservedValueService;\n\n    private final DhisConfigurationProvider dhisConfigurationProvider;\n\n    public TrackedEntityAttributeValidationHook( FileResourceService fileResourceService,\n        TrackedEntityAttributeValueService trackedEntityAttributeValueService,\n        ReservedValueService reservedValueService, DhisConfigurationProvider dhisConfigurationProvider )\n    {\n        super( TrackedEntity.class, TrackerImportStrategy.CREATE_AND_UPDATE );\n\n        checkNotNull( fileResourceService );\n        checkNotNull( trackedEntityAttributeValueService );\n        checkNotNull( reservedValueService );\n        checkNotNull( dhisConfigurationProvider );\n        this.fileResourceService = fileResourceService;\n        this.trackedEntityAttributeValueService = trackedEntityAttributeValueService;\n        this.reservedValueService = reservedValueService;\n        this.dhisConfigurationProvider = dhisConfigurationProvider;\n    }\n</code></pre></div>", "author": "luciano-fiandesio", "createdAt": "2020-06-26T09:10:55Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java", "diffHunk": "@@ -0,0 +1,264 @@\n+package org.hisp.dhis.tracker.validation.hooks;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.hisp.dhis.external.conf.DhisConfigurationProvider;\n+import org.hisp.dhis.fileresource.FileResource;\n+import org.hisp.dhis.fileresource.FileResourceService;\n+import org.hisp.dhis.organisationunit.OrganisationUnit;\n+import org.hisp.dhis.reservedvalue.ReservedValueService;\n+import org.hisp.dhis.textpattern.TextPatternValidationUtils;\n+import org.hisp.dhis.trackedentity.TrackedEntityAttribute;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+import org.hisp.dhis.trackedentityattributevalue.TrackedEntityAttributeValue;\n+import org.hisp.dhis.trackedentityattributevalue.TrackedEntityAttributeValueService;\n+import org.hisp.dhis.tracker.TrackerIdScheme;\n+import org.hisp.dhis.tracker.TrackerImportStrategy;\n+import org.hisp.dhis.tracker.bundle.TrackerBundle;\n+import org.hisp.dhis.tracker.domain.Attribute;\n+import org.hisp.dhis.tracker.domain.TrackedEntity;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n+import org.hisp.dhis.tracker.validation.TrackerImportValidationContext;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+import static org.hisp.dhis.system.util.ValidationUtils.dataValueIsValid;\n+import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n+import static org.hisp.dhis.tracker.validation.hooks.Constants.ATTRIBUTE_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.Constants.TRACKED_ENTITY_ATTRIBUTE_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.Constants.TRACKED_ENTITY_ATTRIBUTE_VALUE_CANT_BE_NULL;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+@Component\n+public class TrackedEntityAttributeValidationHook\n+    extends AbstractTrackerDtoValidationHook\n+{\n+    private static final int MAX_ATTR_VALUE_LENGTH = 1200;\n+\n+    public TrackedEntityAttributeValidationHook()\n+    {\n+        super( TrackedEntity.class, TrackerImportStrategy.CREATE_AND_UPDATE );\n+    }\n+\n+    @Autowired", "originalCommit": "ad5654dcf03fa2ccb82adad686d9e13dde5a93b0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYyNDk3NQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446624975", "bodyText": "The way the hook classes are created this is complicated, not sure if it is possible. Please tell if you know how.\nThe hooks are created via an autowired line here:\n@Autowired( required = false )\npublic void setValidationHooks( List validationHooks )", "author": "netroms", "createdAt": "2020-06-28T09:17:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA2NDg0Ng=="}], "type": "inlineReview", "revised_code": {"commit": "c5a94c3d798ab59a16b994801255c4ac2631887b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\nindex 40e7a5c6bc..2e1bb3d534 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n", "chunk": "@@ -75,13 +75,13 @@ public class TrackedEntityAttributeValidationHook\n     }\n \n     @Autowired\n-    protected FileResourceService fileResourceService;\n+    private FileResourceService fileResourceService;\n \n     @Autowired\n-    protected TrackedEntityAttributeValueService trackedEntityAttributeValueService;\n+    private TrackedEntityAttributeValueService trackedEntityAttributeValueService;\n \n     @Autowired\n-    protected ReservedValueService reservedValueService;\n+    private ReservedValueService reservedValueService;\n \n     @Autowired\n     private DhisConfigurationProvider dhisConfigurationProvider;\n", "next_change": null}]}, "revised_code_in_main": {"commit": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\nindex 40e7a5c6bc..63e7fe5394 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n", "chunk": "@@ -69,19 +72,20 @@ public class TrackedEntityAttributeValidationHook\n {\n     private static final int MAX_ATTR_VALUE_LENGTH = 1200;\n \n-    public TrackedEntityAttributeValidationHook()\n+    public TrackedEntityAttributeValidationHook( TrackedEntityAttributeService teAttrService,\n+        TrackedEntityCommentService commentService )\n     {\n-        super( TrackedEntity.class, TrackerImportStrategy.CREATE_AND_UPDATE );\n+        super( TrackedEntity.class, TrackerImportStrategy.CREATE_AND_UPDATE, teAttrService, commentService );\n     }\n \n     @Autowired\n-    protected FileResourceService fileResourceService;\n+    private FileResourceService fileResourceService;\n \n     @Autowired\n-    protected TrackedEntityAttributeValueService trackedEntityAttributeValueService;\n+    private TrackedEntityAttributeValueService trackedEntityAttributeValueService;\n \n     @Autowired\n-    protected ReservedValueService reservedValueService;\n+    private ReservedValueService reservedValueService;\n \n     @Autowired\n     private DhisConfigurationProvider dhisConfigurationProvider;\n", "next_change": {"commit": "2ed799f33ca26b918ed60473a3f097714f00492e", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\nindex 63e7fe5394..3ba35aa726 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n", "chunk": "@@ -78,12 +76,6 @@ public class TrackedEntityAttributeValidationHook\n         super( TrackedEntity.class, TrackerImportStrategy.CREATE_AND_UPDATE, teAttrService, commentService );\n     }\n \n-    @Autowired\n-    private FileResourceService fileResourceService;\n-\n-    @Autowired\n-    private TrackedEntityAttributeValueService trackedEntityAttributeValueService;\n-\n     @Autowired\n     private ReservedValueService reservedValueService;\n \n", "next_change": {"commit": "3e3dc98d92f0c13fb56cf17894eab06a78842133", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\nindex 3ba35aa726..5525654577 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n", "chunk": "@@ -70,10 +69,9 @@ public class TrackedEntityAttributeValidationHook\n {\n     private static final int MAX_ATTR_VALUE_LENGTH = 1200;\n \n-    public TrackedEntityAttributeValidationHook( TrackedEntityAttributeService teAttrService,\n-        TrackedEntityCommentService commentService )\n+    public TrackedEntityAttributeValidationHook( TrackedEntityAttributeService teAttrService )\n     {\n-        super( TrackedEntity.class, TrackerImportStrategy.CREATE_AND_UPDATE, teAttrService, commentService );\n+        super( TrackedEntity.class, TrackerImportStrategy.CREATE_AND_UPDATE, teAttrService  );\n     }\n \n     @Autowired\n", "next_change": {"commit": "3e3b32e56ff5554a0095396eddffceac65b6b8de", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\nindex 5525654577..14928df92b 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n", "chunk": "@@ -69,17 +76,20 @@ public class TrackedEntityAttributeValidationHook\n {\n     private static final int MAX_ATTR_VALUE_LENGTH = 1200;\n \n-    public TrackedEntityAttributeValidationHook( TrackedEntityAttributeService teAttrService )\n+    private final ReservedValueService reservedValueService;\n+    \n+    private final DhisConfigurationProvider dhisConfigurationProvider;\n+    \n+    public TrackedEntityAttributeValidationHook( TrackedEntityAttributeService teAttrService,\n+        ReservedValueService reservedValueService, DhisConfigurationProvider dhisConfigurationProvider )\n     {\n-        super( TrackedEntity.class, TrackerImportStrategy.CREATE_AND_UPDATE, teAttrService  );\n+        super( TrackedEntity.class, TrackerImportStrategy.CREATE_AND_UPDATE, teAttrService );\n+        checkNotNull( reservedValueService );\n+        checkNotNull( dhisConfigurationProvider );\n+        this.reservedValueService = reservedValueService;\n+        this.dhisConfigurationProvider = dhisConfigurationProvider;\n     }\n \n-    @Autowired\n-    private ReservedValueService reservedValueService;\n-\n-    @Autowired\n-    private DhisConfigurationProvider dhisConfigurationProvider;\n-\n     @Override\n     public void validateTrackedEntity( ValidationErrorReporter reporter, TrackedEntity trackedEntity )\n     {\n", "next_change": {"commit": "c25b817a180f24b3de6b26d5a089563aa336aa8c", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\nindex 14928df92b..5eb32699e9 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n", "chunk": "@@ -98,9 +98,34 @@ public class TrackedEntityAttributeValidationHook\n         TrackedEntityInstance tei = context.getTrackedEntityInstance( trackedEntity.getTrackedEntity() );\n         OrganisationUnit organisationUnit = context.getOrganisationUnit( trackedEntity.getOrgUnit() );\n \n+        validateMandatoryAttributes( reporter, trackedEntity );\n         validateAttributes( reporter, trackedEntity, tei, organisationUnit );\n     }\n \n+    private void validateMandatoryAttributes( ValidationErrorReporter reporter, TrackedEntity trackedEntity )\n+    {\n+        TrackedEntityType trackedEntityType = reporter.getValidationContext()\n+            .getTrackedEntityType( trackedEntity.getTrackedEntityType() );\n+\n+        if ( trackedEntityType != null )\n+        {\n+            Set<String> trackedEntityAttributes = trackedEntity.getAttributes()\n+                .stream()\n+                .map( Attribute::getAttribute )\n+                .collect( Collectors.toSet() );\n+\n+            trackedEntityType.getTrackedEntityTypeAttributes()\n+                .stream()\n+                .filter( trackedEntityTypeAttribute -> Boolean.TRUE.equals( trackedEntityTypeAttribute.isMandatory() ) )\n+                .map( TrackedEntityTypeAttribute::getTrackedEntityAttribute )\n+                .map( BaseIdentifiableObject::getUid )\n+                .filter( mandatoryAttributeUid -> !trackedEntityAttributes.contains( mandatoryAttributeUid ) )\n+                .forEach(\n+                    attribute -> addError( reporter, E1090, attribute, trackedEntityType.getUid(),\n+                        trackedEntity.getTrackedEntity() ) );\n+        }\n+    }\n+\n     protected void validateAttributes( ValidationErrorReporter reporter,\n         TrackedEntity trackedEntity, TrackedEntityInstance tei, OrganisationUnit orgUnit )\n     {\n", "next_change": {"commit": "60fe241badad5b1463bc3991eff2927abae32644", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\nindex 5eb32699e9..257862df91 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n", "chunk": "@@ -127,9 +125,11 @@ public class TrackedEntityAttributeValidationHook extends AttributeValidationHoo\n     }\n \n     protected void validateAttributes( ValidationErrorReporter reporter,\n-        TrackedEntity trackedEntity, TrackedEntityInstance tei, OrganisationUnit orgUnit )\n+        TrackedEntity trackedEntity, TrackedEntityInstance tei, OrganisationUnit orgUnit,\n+        TrackedEntityType trackedEntityType )\n     {\n         checkNotNull( trackedEntity, TrackerImporterAssertErrors.TRACKED_ENTITY_CANT_BE_NULL );\n+        checkNotNull( trackedEntityType, TrackerImporterAssertErrors.TRACKED_ENTITY_TYPE_CANT_BE_NULL );\n \n         Map<String, TrackedEntityAttributeValue> valueMap = new HashMap<>();\n         if ( tei != null )\n", "next_change": {"commit": "9ff8d0c831d8448a696a37138139a0ae5b975c86", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\nindex 257862df91..d4f0db9eee 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n", "chunk": "@@ -131,22 +124,23 @@ public class TrackedEntityAttributeValidationHook extends AttributeValidationHoo\n         checkNotNull( trackedEntity, TrackerImporterAssertErrors.TRACKED_ENTITY_CANT_BE_NULL );\n         checkNotNull( trackedEntityType, TrackerImporterAssertErrors.TRACKED_ENTITY_TYPE_CANT_BE_NULL );\n \n-        Map<String, TrackedEntityAttributeValue> valueMap = new HashMap<>();\n+        Map<MetadataIdentifier, TrackedEntityAttributeValue> valueMap = new HashMap<>();\n         if ( tei != null )\n         {\n+            TrackerIdSchemeParams idSchemes = reporter.getBundle().getPreheat().getIdSchemes();\n             valueMap = tei.getTrackedEntityAttributeValues()\n                 .stream()\n-                .collect( Collectors.toMap( v -> v.getAttribute().getUid(), v -> v ) );\n+                .collect( Collectors.toMap( v -> idSchemes.toMetadataIdentifier( v.getAttribute() ), v -> v ) );\n         }\n \n         for ( Attribute attribute : trackedEntity.getAttributes() )\n         {\n-            TrackedEntityAttribute tea = reporter.getValidationContext()\n+            TrackedEntityAttribute tea = reporter.getBundle().getPreheat()\n                 .getTrackedEntityAttribute( attribute.getAttribute() );\n \n             if ( tea == null )\n             {\n-                addError( reporter, E1006, attribute.getAttribute() );\n+                reporter.addError( trackedEntity, E1006, attribute.getAttribute().getIdentifierOrAttributeValue() );\n                 continue;\n             }\n \n", "next_change": {"commit": "b567e74f7d703115fb7bc9802ed3b5f29d6917aa", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\nindex d4f0db9eee..a939731cd7 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n", "chunk": "@@ -140,7 +140,7 @@ public class TrackedEntityAttributeValidationHook extends AttributeValidationHoo\n \n             if ( tea == null )\n             {\n-                reporter.addError( trackedEntity, E1006, attribute.getAttribute().getIdentifierOrAttributeValue() );\n+                reporter.addError( trackedEntity, E1006, attribute.getAttribute() );\n                 continue;\n             }\n \n", "next_change": {"commit": "f7cfc83610c75486bbb0457dde057eaed777f3d2", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\nindex a939731cd7..6b594a9ab7 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n", "chunk": "@@ -135,8 +139,7 @@ public class TrackedEntityAttributeValidationHook extends AttributeValidationHoo\n \n         for ( Attribute attribute : trackedEntity.getAttributes() )\n         {\n-            TrackedEntityAttribute tea = reporter.getBundle().getPreheat()\n-                .getTrackedEntityAttribute( attribute.getAttribute() );\n+            TrackedEntityAttribute tea = preheat.getTrackedEntityAttribute( attribute.getAttribute() );\n \n             if ( tea == null )\n             {\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "message": "Merge commit", "committedDate": null}, {"oid": "2ed799f33ca26b918ed60473a3f097714f00492e", "committedDate": "2020-08-04 10:30:01 +0200", "message": "chore: Clean up code (#5877)"}, {"oid": "3e3dc98d92f0c13fb56cf17894eab06a78842133", "committedDate": "2020-08-04 17:20:37 +0200", "message": "feat: Enrollment/Events note persistence"}, {"oid": "e1260b5e8fceb13c2883754236a34cdd652e1c1c", "committedDate": "2020-10-20 14:00:34 +0200", "message": "refactor: Load in the preheat all the data needed for uniqueness attr\u2026 (#6397)"}, {"oid": "3e3b32e56ff5554a0095396eddffceac65b6b8de", "committedDate": "2020-10-27 09:56:50 +0100", "message": "refactor: simplified calls to error reporting (#6437)"}, {"oid": "0bf55d776481f6511e5f9ebca5de1f2cf79777c0", "committedDate": "2020-11-19 13:55:46 +0100", "message": "refactor: New Tracker Error reporting refactor (#6706)"}, {"oid": "d3aa60aac248b75b5728d245a876b0a0905748fb", "committedDate": "2020-12-02 16:34:37 +0100", "message": "fix: logic added to tracker importer to validate TEIs mandatory attributes (#6768) DHIS2-10001"}, {"oid": "7f2791b80c8bbb75a6e2a47212bf15b5e3ebeeca", "committedDate": "2020-12-04 09:17:45 +0100", "message": "fix: fix for trackedEntityTypeAttributes ( DHIS2-10001)  (#6819)"}, {"oid": "699074cbe82db1a8e0a5e72edf2a981f3628b54b", "committedDate": "2020-12-07 10:47:48 +0100", "message": "fix: Tracker Identifiers resolution during Tracker import (#6824)"}, {"oid": "16ae2da89c2d883763e33d9d0833f9b033d711c0", "committedDate": "2021-01-05 11:55:44 +0100", "message": "fix: Fix lazy exception for default category combo (#7014)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "c25b817a180f24b3de6b26d5a089563aa336aa8c", "committedDate": "2021-03-05 10:44:25 +0100", "message": "feat: Validation for values with option sets [DHIS2-10452] (#7512)"}, {"oid": "60fe241badad5b1463bc3991eff2927abae32644", "committedDate": "2021-04-21 13:49:15 +0200", "message": "fix: [DHIS2-10797] Fix remove null values for tracker attributes and data values 2.37 (#7880)"}, {"oid": "1e75d833b15ed65163451abb7d4dfb99831484de", "committedDate": "2021-04-26 09:14:51 +0200", "message": "[TECH-454] DB access in TrackedEntityAttributeValidationHook 2.37 (#7905)"}, {"oid": "40d6e6a31520cace4ff69d2bdde2bdd5f91df0f6", "committedDate": "2021-05-10 11:34:45 +0200", "message": "fix: [DHIS2-10797] Fix remove null values for tracker attributes and data values (#7994)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "97fa18701761c6993e20f2e7a3816ea689129480", "committedDate": "2022-01-11 15:31:02 +0100", "message": "chore: hooks should add errors via reporter directly TECH-880 (#9523)"}, {"oid": "1d8350a9e9ac100aaaa831894ba3f857b46e2474", "committedDate": "2022-01-13 14:15:17 +0100", "message": "chore: adding errors and warnings is responsibility of the ValidationErrorReporter TECH-880 (#9616)"}, {"oid": "c039b8f75c1d965414de926f04540dfaabdd104c", "committedDate": "2022-02-23 13:08:25 +0100", "message": "chore: Clean up service program rule module [TECH-938] (#9885)"}, {"oid": "ef0cbd365e47f1f88befb80d9650cce75280bd35", "committedDate": "2022-03-08 15:12:00 +0100", "message": "chore: move DB access and mutation to preheat and preprocessor DHIS2-12623 (#9904)"}, {"oid": "1a6c87df8b289f113b0f6bc476d07113cc2e945e", "committedDate": "2022-03-11 09:29:14 +0100", "message": "fix: Skip fileResource.issAssigned check for CREATE (#9979)"}, {"oid": "9ff8d0c831d8448a696a37138139a0ae5b975c86", "committedDate": "2022-05-17 13:32:06 +0200", "message": "fix: Attribute.attribute is a MetadataIdentifier DHIS2-12563 (#10782)"}, {"oid": "b567e74f7d703115fb7bc9802ed3b5f29d6917aa", "committedDate": "2022-05-23 09:13:55 +0200", "message": "fix: report ids or attribute value for MetadataIdentifiers DHIS2-12519 (#10873)"}, {"oid": "f7cfc83610c75486bbb0457dde057eaed777f3d2", "committedDate": "2022-05-27 15:15:25 +0200", "message": "chore: ValidationErrorReporter does not need the bunlde DHIS2-12519 (#10878)"}, {"oid": "e1740a5804e29683f4310e9fd284b637c8acb6b1", "committedDate": "2022-06-02 14:24:41 +0000", "message": "test: add context to failed TrackedEntityProgramAttributeEncryptionTest (#10971)"}, {"oid": "9ee39f390105c4517d67abfb5dbb377f9fb82074", "committedDate": "2022-06-10 10:50:40 +0200", "message": "fix: Validate enrollment attributes values based on valueType in NTI [DHIS2-12669] (2.39) (#11050)"}, {"oid": "1cabae879cd65d1f6925c6ea5a6fe23e128bcf86", "committedDate": "2022-06-14 12:07:33 +0200", "message": "feat: Persist fileResource owner from file side (#11008)"}, {"oid": "b0a861c0308005b865cafa2344c1231c0a4f2bc3", "committedDate": "2022-12-02 13:36:08 +0100", "message": "fix: turn removeOnError into skipOnError DHIS2-14213 (#12457)"}, {"oid": "7ac68b368a1dbd9362973b30f7160399abe801a0", "committedDate": "2022-12-06 09:04:47 +0100", "message": "chore: move ValidationErrorReporter close to its usage (#12486)"}, {"oid": "07ff89195ce66114c2b5a744039c2b2ce7a8f440", "committedDate": "2022-12-13 09:51:43 +0100", "message": "chore: Clean up TrackerBundle methods [TECH-14298] (#12515)"}, {"oid": "2675c1943874115831bcbe53d78b44557ceadd96", "committedDate": "2022-12-13 10:48:31 +0000", "message": "chore: add smaller Validator interface (#12524)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA2NTQyNg==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446065426", "body": "Use `private`: it seems that this dependency is only used locally (same for the other dependencies)", "bodyText": "Use private: it seems that this dependency is only used locally (same for the other dependencies)", "bodyHTML": "<p dir=\"auto\">Use <code>private</code>: it seems that this dependency is only used locally (same for the other dependencies)</p>", "author": "luciano-fiandesio", "createdAt": "2020-06-26T09:12:02Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java", "diffHunk": "@@ -0,0 +1,264 @@\n+package org.hisp.dhis.tracker.validation.hooks;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.hisp.dhis.external.conf.DhisConfigurationProvider;\n+import org.hisp.dhis.fileresource.FileResource;\n+import org.hisp.dhis.fileresource.FileResourceService;\n+import org.hisp.dhis.organisationunit.OrganisationUnit;\n+import org.hisp.dhis.reservedvalue.ReservedValueService;\n+import org.hisp.dhis.textpattern.TextPatternValidationUtils;\n+import org.hisp.dhis.trackedentity.TrackedEntityAttribute;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+import org.hisp.dhis.trackedentityattributevalue.TrackedEntityAttributeValue;\n+import org.hisp.dhis.trackedentityattributevalue.TrackedEntityAttributeValueService;\n+import org.hisp.dhis.tracker.TrackerIdScheme;\n+import org.hisp.dhis.tracker.TrackerImportStrategy;\n+import org.hisp.dhis.tracker.bundle.TrackerBundle;\n+import org.hisp.dhis.tracker.domain.Attribute;\n+import org.hisp.dhis.tracker.domain.TrackedEntity;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n+import org.hisp.dhis.tracker.validation.TrackerImportValidationContext;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+import static org.hisp.dhis.system.util.ValidationUtils.dataValueIsValid;\n+import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n+import static org.hisp.dhis.tracker.validation.hooks.Constants.ATTRIBUTE_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.Constants.TRACKED_ENTITY_ATTRIBUTE_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.Constants.TRACKED_ENTITY_ATTRIBUTE_VALUE_CANT_BE_NULL;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+@Component\n+public class TrackedEntityAttributeValidationHook\n+    extends AbstractTrackerDtoValidationHook\n+{\n+    private static final int MAX_ATTR_VALUE_LENGTH = 1200;\n+\n+    public TrackedEntityAttributeValidationHook()\n+    {\n+        super( TrackedEntity.class, TrackerImportStrategy.CREATE_AND_UPDATE );\n+    }\n+\n+    @Autowired\n+    protected FileResourceService fileResourceService;\n+\n+    @Autowired\n+    protected TrackedEntityAttributeValueService trackedEntityAttributeValueService;", "originalCommit": "ad5654dcf03fa2ccb82adad686d9e13dde5a93b0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c5a94c3d798ab59a16b994801255c4ac2631887b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\nindex 40e7a5c6bc..2e1bb3d534 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n", "chunk": "@@ -75,13 +75,13 @@ public class TrackedEntityAttributeValidationHook\n     }\n \n     @Autowired\n-    protected FileResourceService fileResourceService;\n+    private FileResourceService fileResourceService;\n \n     @Autowired\n-    protected TrackedEntityAttributeValueService trackedEntityAttributeValueService;\n+    private TrackedEntityAttributeValueService trackedEntityAttributeValueService;\n \n     @Autowired\n-    protected ReservedValueService reservedValueService;\n+    private ReservedValueService reservedValueService;\n \n     @Autowired\n     private DhisConfigurationProvider dhisConfigurationProvider;\n", "next_change": null}]}, "revised_code_in_main": {"commit": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\nindex 40e7a5c6bc..63e7fe5394 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n", "chunk": "@@ -69,19 +72,20 @@ public class TrackedEntityAttributeValidationHook\n {\n     private static final int MAX_ATTR_VALUE_LENGTH = 1200;\n \n-    public TrackedEntityAttributeValidationHook()\n+    public TrackedEntityAttributeValidationHook( TrackedEntityAttributeService teAttrService,\n+        TrackedEntityCommentService commentService )\n     {\n-        super( TrackedEntity.class, TrackerImportStrategy.CREATE_AND_UPDATE );\n+        super( TrackedEntity.class, TrackerImportStrategy.CREATE_AND_UPDATE, teAttrService, commentService );\n     }\n \n     @Autowired\n-    protected FileResourceService fileResourceService;\n+    private FileResourceService fileResourceService;\n \n     @Autowired\n-    protected TrackedEntityAttributeValueService trackedEntityAttributeValueService;\n+    private TrackedEntityAttributeValueService trackedEntityAttributeValueService;\n \n     @Autowired\n-    protected ReservedValueService reservedValueService;\n+    private ReservedValueService reservedValueService;\n \n     @Autowired\n     private DhisConfigurationProvider dhisConfigurationProvider;\n", "next_change": {"commit": "2ed799f33ca26b918ed60473a3f097714f00492e", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\nindex 63e7fe5394..3ba35aa726 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n", "chunk": "@@ -78,12 +76,6 @@ public class TrackedEntityAttributeValidationHook\n         super( TrackedEntity.class, TrackerImportStrategy.CREATE_AND_UPDATE, teAttrService, commentService );\n     }\n \n-    @Autowired\n-    private FileResourceService fileResourceService;\n-\n-    @Autowired\n-    private TrackedEntityAttributeValueService trackedEntityAttributeValueService;\n-\n     @Autowired\n     private ReservedValueService reservedValueService;\n \n", "next_change": {"commit": "3e3dc98d92f0c13fb56cf17894eab06a78842133", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\nindex 3ba35aa726..5525654577 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n", "chunk": "@@ -70,10 +69,9 @@ public class TrackedEntityAttributeValidationHook\n {\n     private static final int MAX_ATTR_VALUE_LENGTH = 1200;\n \n-    public TrackedEntityAttributeValidationHook( TrackedEntityAttributeService teAttrService,\n-        TrackedEntityCommentService commentService )\n+    public TrackedEntityAttributeValidationHook( TrackedEntityAttributeService teAttrService )\n     {\n-        super( TrackedEntity.class, TrackerImportStrategy.CREATE_AND_UPDATE, teAttrService, commentService );\n+        super( TrackedEntity.class, TrackerImportStrategy.CREATE_AND_UPDATE, teAttrService  );\n     }\n \n     @Autowired\n", "next_change": {"commit": "3e3b32e56ff5554a0095396eddffceac65b6b8de", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\nindex 5525654577..14928df92b 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n", "chunk": "@@ -69,17 +76,20 @@ public class TrackedEntityAttributeValidationHook\n {\n     private static final int MAX_ATTR_VALUE_LENGTH = 1200;\n \n-    public TrackedEntityAttributeValidationHook( TrackedEntityAttributeService teAttrService )\n+    private final ReservedValueService reservedValueService;\n+    \n+    private final DhisConfigurationProvider dhisConfigurationProvider;\n+    \n+    public TrackedEntityAttributeValidationHook( TrackedEntityAttributeService teAttrService,\n+        ReservedValueService reservedValueService, DhisConfigurationProvider dhisConfigurationProvider )\n     {\n-        super( TrackedEntity.class, TrackerImportStrategy.CREATE_AND_UPDATE, teAttrService  );\n+        super( TrackedEntity.class, TrackerImportStrategy.CREATE_AND_UPDATE, teAttrService );\n+        checkNotNull( reservedValueService );\n+        checkNotNull( dhisConfigurationProvider );\n+        this.reservedValueService = reservedValueService;\n+        this.dhisConfigurationProvider = dhisConfigurationProvider;\n     }\n \n-    @Autowired\n-    private ReservedValueService reservedValueService;\n-\n-    @Autowired\n-    private DhisConfigurationProvider dhisConfigurationProvider;\n-\n     @Override\n     public void validateTrackedEntity( ValidationErrorReporter reporter, TrackedEntity trackedEntity )\n     {\n", "next_change": {"commit": "c25b817a180f24b3de6b26d5a089563aa336aa8c", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\nindex 14928df92b..5eb32699e9 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n", "chunk": "@@ -98,9 +98,34 @@ public class TrackedEntityAttributeValidationHook\n         TrackedEntityInstance tei = context.getTrackedEntityInstance( trackedEntity.getTrackedEntity() );\n         OrganisationUnit organisationUnit = context.getOrganisationUnit( trackedEntity.getOrgUnit() );\n \n+        validateMandatoryAttributes( reporter, trackedEntity );\n         validateAttributes( reporter, trackedEntity, tei, organisationUnit );\n     }\n \n+    private void validateMandatoryAttributes( ValidationErrorReporter reporter, TrackedEntity trackedEntity )\n+    {\n+        TrackedEntityType trackedEntityType = reporter.getValidationContext()\n+            .getTrackedEntityType( trackedEntity.getTrackedEntityType() );\n+\n+        if ( trackedEntityType != null )\n+        {\n+            Set<String> trackedEntityAttributes = trackedEntity.getAttributes()\n+                .stream()\n+                .map( Attribute::getAttribute )\n+                .collect( Collectors.toSet() );\n+\n+            trackedEntityType.getTrackedEntityTypeAttributes()\n+                .stream()\n+                .filter( trackedEntityTypeAttribute -> Boolean.TRUE.equals( trackedEntityTypeAttribute.isMandatory() ) )\n+                .map( TrackedEntityTypeAttribute::getTrackedEntityAttribute )\n+                .map( BaseIdentifiableObject::getUid )\n+                .filter( mandatoryAttributeUid -> !trackedEntityAttributes.contains( mandatoryAttributeUid ) )\n+                .forEach(\n+                    attribute -> addError( reporter, E1090, attribute, trackedEntityType.getUid(),\n+                        trackedEntity.getTrackedEntity() ) );\n+        }\n+    }\n+\n     protected void validateAttributes( ValidationErrorReporter reporter,\n         TrackedEntity trackedEntity, TrackedEntityInstance tei, OrganisationUnit orgUnit )\n     {\n", "next_change": {"commit": "60fe241badad5b1463bc3991eff2927abae32644", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\nindex 5eb32699e9..257862df91 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n", "chunk": "@@ -127,9 +125,11 @@ public class TrackedEntityAttributeValidationHook extends AttributeValidationHoo\n     }\n \n     protected void validateAttributes( ValidationErrorReporter reporter,\n-        TrackedEntity trackedEntity, TrackedEntityInstance tei, OrganisationUnit orgUnit )\n+        TrackedEntity trackedEntity, TrackedEntityInstance tei, OrganisationUnit orgUnit,\n+        TrackedEntityType trackedEntityType )\n     {\n         checkNotNull( trackedEntity, TrackerImporterAssertErrors.TRACKED_ENTITY_CANT_BE_NULL );\n+        checkNotNull( trackedEntityType, TrackerImporterAssertErrors.TRACKED_ENTITY_TYPE_CANT_BE_NULL );\n \n         Map<String, TrackedEntityAttributeValue> valueMap = new HashMap<>();\n         if ( tei != null )\n", "next_change": {"commit": "9ff8d0c831d8448a696a37138139a0ae5b975c86", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\nindex 257862df91..d4f0db9eee 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n", "chunk": "@@ -131,22 +124,23 @@ public class TrackedEntityAttributeValidationHook extends AttributeValidationHoo\n         checkNotNull( trackedEntity, TrackerImporterAssertErrors.TRACKED_ENTITY_CANT_BE_NULL );\n         checkNotNull( trackedEntityType, TrackerImporterAssertErrors.TRACKED_ENTITY_TYPE_CANT_BE_NULL );\n \n-        Map<String, TrackedEntityAttributeValue> valueMap = new HashMap<>();\n+        Map<MetadataIdentifier, TrackedEntityAttributeValue> valueMap = new HashMap<>();\n         if ( tei != null )\n         {\n+            TrackerIdSchemeParams idSchemes = reporter.getBundle().getPreheat().getIdSchemes();\n             valueMap = tei.getTrackedEntityAttributeValues()\n                 .stream()\n-                .collect( Collectors.toMap( v -> v.getAttribute().getUid(), v -> v ) );\n+                .collect( Collectors.toMap( v -> idSchemes.toMetadataIdentifier( v.getAttribute() ), v -> v ) );\n         }\n \n         for ( Attribute attribute : trackedEntity.getAttributes() )\n         {\n-            TrackedEntityAttribute tea = reporter.getValidationContext()\n+            TrackedEntityAttribute tea = reporter.getBundle().getPreheat()\n                 .getTrackedEntityAttribute( attribute.getAttribute() );\n \n             if ( tea == null )\n             {\n-                addError( reporter, E1006, attribute.getAttribute() );\n+                reporter.addError( trackedEntity, E1006, attribute.getAttribute().getIdentifierOrAttributeValue() );\n                 continue;\n             }\n \n", "next_change": {"commit": "b567e74f7d703115fb7bc9802ed3b5f29d6917aa", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\nindex d4f0db9eee..a939731cd7 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n", "chunk": "@@ -140,7 +140,7 @@ public class TrackedEntityAttributeValidationHook extends AttributeValidationHoo\n \n             if ( tea == null )\n             {\n-                reporter.addError( trackedEntity, E1006, attribute.getAttribute().getIdentifierOrAttributeValue() );\n+                reporter.addError( trackedEntity, E1006, attribute.getAttribute() );\n                 continue;\n             }\n \n", "next_change": {"commit": "f7cfc83610c75486bbb0457dde057eaed777f3d2", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\nindex a939731cd7..6b594a9ab7 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n", "chunk": "@@ -135,8 +139,7 @@ public class TrackedEntityAttributeValidationHook extends AttributeValidationHoo\n \n         for ( Attribute attribute : trackedEntity.getAttributes() )\n         {\n-            TrackedEntityAttribute tea = reporter.getBundle().getPreheat()\n-                .getTrackedEntityAttribute( attribute.getAttribute() );\n+            TrackedEntityAttribute tea = preheat.getTrackedEntityAttribute( attribute.getAttribute() );\n \n             if ( tea == null )\n             {\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "message": "Merge commit", "committedDate": null}, {"oid": "2ed799f33ca26b918ed60473a3f097714f00492e", "committedDate": "2020-08-04 10:30:01 +0200", "message": "chore: Clean up code (#5877)"}, {"oid": "3e3dc98d92f0c13fb56cf17894eab06a78842133", "committedDate": "2020-08-04 17:20:37 +0200", "message": "feat: Enrollment/Events note persistence"}, {"oid": "e1260b5e8fceb13c2883754236a34cdd652e1c1c", "committedDate": "2020-10-20 14:00:34 +0200", "message": "refactor: Load in the preheat all the data needed for uniqueness attr\u2026 (#6397)"}, {"oid": "3e3b32e56ff5554a0095396eddffceac65b6b8de", "committedDate": "2020-10-27 09:56:50 +0100", "message": "refactor: simplified calls to error reporting (#6437)"}, {"oid": "0bf55d776481f6511e5f9ebca5de1f2cf79777c0", "committedDate": "2020-11-19 13:55:46 +0100", "message": "refactor: New Tracker Error reporting refactor (#6706)"}, {"oid": "d3aa60aac248b75b5728d245a876b0a0905748fb", "committedDate": "2020-12-02 16:34:37 +0100", "message": "fix: logic added to tracker importer to validate TEIs mandatory attributes (#6768) DHIS2-10001"}, {"oid": "7f2791b80c8bbb75a6e2a47212bf15b5e3ebeeca", "committedDate": "2020-12-04 09:17:45 +0100", "message": "fix: fix for trackedEntityTypeAttributes ( DHIS2-10001)  (#6819)"}, {"oid": "699074cbe82db1a8e0a5e72edf2a981f3628b54b", "committedDate": "2020-12-07 10:47:48 +0100", "message": "fix: Tracker Identifiers resolution during Tracker import (#6824)"}, {"oid": "16ae2da89c2d883763e33d9d0833f9b033d711c0", "committedDate": "2021-01-05 11:55:44 +0100", "message": "fix: Fix lazy exception for default category combo (#7014)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "c25b817a180f24b3de6b26d5a089563aa336aa8c", "committedDate": "2021-03-05 10:44:25 +0100", "message": "feat: Validation for values with option sets [DHIS2-10452] (#7512)"}, {"oid": "60fe241badad5b1463bc3991eff2927abae32644", "committedDate": "2021-04-21 13:49:15 +0200", "message": "fix: [DHIS2-10797] Fix remove null values for tracker attributes and data values 2.37 (#7880)"}, {"oid": "1e75d833b15ed65163451abb7d4dfb99831484de", "committedDate": "2021-04-26 09:14:51 +0200", "message": "[TECH-454] DB access in TrackedEntityAttributeValidationHook 2.37 (#7905)"}, {"oid": "40d6e6a31520cace4ff69d2bdde2bdd5f91df0f6", "committedDate": "2021-05-10 11:34:45 +0200", "message": "fix: [DHIS2-10797] Fix remove null values for tracker attributes and data values (#7994)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "97fa18701761c6993e20f2e7a3816ea689129480", "committedDate": "2022-01-11 15:31:02 +0100", "message": "chore: hooks should add errors via reporter directly TECH-880 (#9523)"}, {"oid": "1d8350a9e9ac100aaaa831894ba3f857b46e2474", "committedDate": "2022-01-13 14:15:17 +0100", "message": "chore: adding errors and warnings is responsibility of the ValidationErrorReporter TECH-880 (#9616)"}, {"oid": "c039b8f75c1d965414de926f04540dfaabdd104c", "committedDate": "2022-02-23 13:08:25 +0100", "message": "chore: Clean up service program rule module [TECH-938] (#9885)"}, {"oid": "ef0cbd365e47f1f88befb80d9650cce75280bd35", "committedDate": "2022-03-08 15:12:00 +0100", "message": "chore: move DB access and mutation to preheat and preprocessor DHIS2-12623 (#9904)"}, {"oid": "1a6c87df8b289f113b0f6bc476d07113cc2e945e", "committedDate": "2022-03-11 09:29:14 +0100", "message": "fix: Skip fileResource.issAssigned check for CREATE (#9979)"}, {"oid": "9ff8d0c831d8448a696a37138139a0ae5b975c86", "committedDate": "2022-05-17 13:32:06 +0200", "message": "fix: Attribute.attribute is a MetadataIdentifier DHIS2-12563 (#10782)"}, {"oid": "b567e74f7d703115fb7bc9802ed3b5f29d6917aa", "committedDate": "2022-05-23 09:13:55 +0200", "message": "fix: report ids or attribute value for MetadataIdentifiers DHIS2-12519 (#10873)"}, {"oid": "f7cfc83610c75486bbb0457dde057eaed777f3d2", "committedDate": "2022-05-27 15:15:25 +0200", "message": "chore: ValidationErrorReporter does not need the bunlde DHIS2-12519 (#10878)"}, {"oid": "e1740a5804e29683f4310e9fd284b637c8acb6b1", "committedDate": "2022-06-02 14:24:41 +0000", "message": "test: add context to failed TrackedEntityProgramAttributeEncryptionTest (#10971)"}, {"oid": "9ee39f390105c4517d67abfb5dbb377f9fb82074", "committedDate": "2022-06-10 10:50:40 +0200", "message": "fix: Validate enrollment attributes values based on valueType in NTI [DHIS2-12669] (2.39) (#11050)"}, {"oid": "1cabae879cd65d1f6925c6ea5a6fe23e128bcf86", "committedDate": "2022-06-14 12:07:33 +0200", "message": "feat: Persist fileResource owner from file side (#11008)"}, {"oid": "b0a861c0308005b865cafa2344c1231c0a4f2bc3", "committedDate": "2022-12-02 13:36:08 +0100", "message": "fix: turn removeOnError into skipOnError DHIS2-14213 (#12457)"}, {"oid": "7ac68b368a1dbd9362973b30f7160399abe801a0", "committedDate": "2022-12-06 09:04:47 +0100", "message": "chore: move ValidationErrorReporter close to its usage (#12486)"}, {"oid": "07ff89195ce66114c2b5a744039c2b2ce7a8f440", "committedDate": "2022-12-13 09:51:43 +0100", "message": "chore: Clean up TrackerBundle methods [TECH-14298] (#12515)"}, {"oid": "2675c1943874115831bcbe53d78b44557ceadd96", "committedDate": "2022-12-13 10:48:31 +0000", "message": "chore: add smaller Validator interface (#12524)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA2NjYwMA==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446066600", "body": "Looks like this class requires some additional analysis, since there are many TODOs and commented out code.", "bodyText": "Looks like this class requires some additional analysis, since there are many TODOs and commented out code.", "bodyHTML": "<p dir=\"auto\">Looks like this class requires some additional analysis, since there are many TODOs and commented out code.</p>", "author": "luciano-fiandesio", "createdAt": "2020-06-26T09:14:15Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java", "diffHunk": "@@ -0,0 +1,264 @@\n+package org.hisp.dhis.tracker.validation.hooks;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.hisp.dhis.external.conf.DhisConfigurationProvider;\n+import org.hisp.dhis.fileresource.FileResource;\n+import org.hisp.dhis.fileresource.FileResourceService;\n+import org.hisp.dhis.organisationunit.OrganisationUnit;\n+import org.hisp.dhis.reservedvalue.ReservedValueService;\n+import org.hisp.dhis.textpattern.TextPatternValidationUtils;\n+import org.hisp.dhis.trackedentity.TrackedEntityAttribute;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+import org.hisp.dhis.trackedentityattributevalue.TrackedEntityAttributeValue;\n+import org.hisp.dhis.trackedentityattributevalue.TrackedEntityAttributeValueService;\n+import org.hisp.dhis.tracker.TrackerIdScheme;\n+import org.hisp.dhis.tracker.TrackerImportStrategy;\n+import org.hisp.dhis.tracker.bundle.TrackerBundle;\n+import org.hisp.dhis.tracker.domain.Attribute;\n+import org.hisp.dhis.tracker.domain.TrackedEntity;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n+import org.hisp.dhis.tracker.validation.TrackerImportValidationContext;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+import static org.hisp.dhis.system.util.ValidationUtils.dataValueIsValid;\n+import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n+import static org.hisp.dhis.tracker.validation.hooks.Constants.ATTRIBUTE_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.Constants.TRACKED_ENTITY_ATTRIBUTE_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.Constants.TRACKED_ENTITY_ATTRIBUTE_VALUE_CANT_BE_NULL;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+@Component\n+public class TrackedEntityAttributeValidationHook\n+    extends AbstractTrackerDtoValidationHook\n+{\n+    private static final int MAX_ATTR_VALUE_LENGTH = 1200;\n+\n+    public TrackedEntityAttributeValidationHook()\n+    {\n+        super( TrackedEntity.class, TrackerImportStrategy.CREATE_AND_UPDATE );\n+    }\n+\n+    @Autowired\n+    protected FileResourceService fileResourceService;\n+\n+    @Autowired\n+    protected TrackedEntityAttributeValueService trackedEntityAttributeValueService;\n+\n+    @Autowired\n+    protected ReservedValueService reservedValueService;\n+\n+    @Autowired\n+    private DhisConfigurationProvider dhisConfigurationProvider;\n+\n+    @Override\n+    public void validateTrackedEntity( ValidationErrorReporter reporter, TrackedEntity trackedEntity )\n+    {\n+        TrackerImportValidationContext context = reporter.getValidationContext();\n+\n+        TrackedEntityInstance tei = context.getTrackedEntityInstance( trackedEntity.getTrackedEntity() );\n+        OrganisationUnit organisationUnit = context.getOrganisationUnit( trackedEntity.getOrgUnit() );\n+\n+        validateAttributes( reporter, trackedEntity, tei, organisationUnit );\n+    }\n+\n+    protected void validateAttributes( ValidationErrorReporter reporter,\n+        TrackedEntity trackedEntity, TrackedEntityInstance tei, OrganisationUnit orgUnit )\n+    {\n+        Objects.requireNonNull( trackedEntity, Constants.TRACKED_ENTITY_CANT_BE_NULL );\n+\n+        Map<String, TrackedEntityAttributeValue> valueMap = new HashMap<>();\n+        if ( tei != null )\n+        {\n+            valueMap = tei.getTrackedEntityAttributeValues()\n+                .stream()\n+                .collect( Collectors.toMap( v -> v.getAttribute().getUid(), v -> v ) );\n+        }\n+\n+        for ( Attribute attribute : trackedEntity.getAttributes() )\n+        {\n+            TrackedEntityAttribute tea = reporter.getValidationContext()\n+                .getTrackedEntityAttribute( attribute.getAttribute() );\n+\n+            if ( tea == null )\n+            {\n+                reporter.addError( newReport( TrackerErrorCode.E1006 )\n+                    .addArg( attribute.getAttribute() ) );\n+                continue;\n+            }\n+\n+//            if ( StringUtils.isEmpty( attribute.getValue() ) )\n+            if ( attribute.getValue() == null )\n+            {\n+                //continue; ??? Just continue on empty and null?\n+                // TODO: Is this really correct? This check was not here originally\n+                //  Enrollment attr check fails on null so why not here too?\n+                reporter.addError( newReport( TrackerErrorCode.E1076 )\n+                    .addArg( attribute ) );\n+                continue;\n+            }\n+\n+            // TODO: Should we really validate existing data? this sounds like a mix of con\n+//            TrackedEntityAttributeValue trackedEntityAttributeValue = valueMap.get( tea.getUid() );\n+//            if ( trackedEntityAttributeValue == null )\n+//            {\n+            TrackedEntityAttributeValue trackedEntityAttributeValue = new TrackedEntityAttributeValue();\n+            trackedEntityAttributeValue.setEntityInstance( tei );\n+            trackedEntityAttributeValue.setValue( attribute.getValue() );\n+            trackedEntityAttributeValue.setAttribute( tea );\n+//            }\n+\n+            validateAttributeValue( reporter, trackedEntityAttributeValue );\n+            validateTextPattern( reporter, attribute, tea, valueMap.get( tea.getUid() ) );\n+            validateAttrValueType( reporter, attribute, tea );\n+\n+            // TODO: This is one \"THE\" potential performance killer...\n+            validateAttributeUniqueness( reporter, attribute.getValue(), tea, tei, orgUnit );\n+\n+            validateFileNotAlreadyAssigned( reporter, attribute, valueMap );\n+        }\n+    }\n+\n+    public void validateAttributeValue( ValidationErrorReporter reporter, TrackedEntityAttributeValue teav )\n+    {\n+        Objects.requireNonNull( teav, TRACKED_ENTITY_ATTRIBUTE_VALUE_CANT_BE_NULL );\n+        Objects.requireNonNull( teav.getValue(), TRACKED_ENTITY_ATTRIBUTE_VALUE_CANT_BE_NULL );\n+\n+        if ( teav.getValue().length() > MAX_ATTR_VALUE_LENGTH )\n+        {\n+            reporter.addError( newReport( TrackerErrorCode.E1077 )\n+                .addArg( teav )\n+                .addArg( MAX_ATTR_VALUE_LENGTH ) );\n+        }\n+\n+        boolean encryptionStatusOk = dhisConfigurationProvider.getEncryptionStatus().isOk();\n+        boolean isConfidential = teav.getAttribute().isConfidentialBool();\n+        if ( isConfidential && !encryptionStatusOk )\n+        {\n+            reporter.addError( newReport( TrackerErrorCode.E1112 )\n+                .addArg( teav ) );\n+        }\n+\n+        String result = dataValueIsValid( teav.getValue(), teav.getAttribute().getValueType() );\n+        if ( result != null )\n+        {\n+            reporter.addError( newReport( TrackerErrorCode.E1085 )\n+                .addArg( teav.getAttribute() )\n+                .addArg( result ) );\n+        }\n+    }\n+\n+    protected void validateTextPattern( ValidationErrorReporter reporter,\n+        Attribute attribute, TrackedEntityAttribute tea, TrackedEntityAttributeValue existingValue )\n+    {\n+        TrackerBundle bundle = reporter.getValidationContext().getBundle();\n+        Objects.requireNonNull( attribute, ATTRIBUTE_CANT_BE_NULL );\n+        Objects.requireNonNull( tea, TRACKED_ENTITY_ATTRIBUTE_CANT_BE_NULL );\n+\n+        if ( !tea.isGenerated() )\n+        {\n+            return;\n+        }\n+\n+        // TODO: Should we check the text pattern even if its not generated?\n+        // TextPatternValidationUtils.validateTextPatternValue( attribute.getTextPattern(), value )\n+\n+        //TODO: Can't provoke this error since metadata importer won't allow null, empty or invalid patterns.\n+        if ( tea.getTextPattern() == null && !bundle.isSkipTextPatternValidation() )\n+        {\n+            reporter.addError( newReport( TrackerErrorCode.E1111 )\n+                .addArg( attribute ) );\n+        }\n+\n+        if ( tea.getTextPattern() != null && !bundle.isSkipTextPatternValidation() )\n+        {\n+            String oldValue = existingValue != null ? existingValue.getValue() : null;\n+\n+            // We basically ignore the pattern validation if the value is reserved or already\n+            // assigned i.e. input eq. already persisted value.\n+            boolean isReservedOrAlreadyAssigned = Objects.equals( attribute.getValue(), oldValue ) ||\n+                reservedValueService.isReserved( tea.getTextPattern(), attribute.getValue() );\n+\n+            boolean isValidPattern = TextPatternValidationUtils\n+                .validateTextPatternValue( tea.getTextPattern(), attribute.getValue() );\n+\n+            if ( !isReservedOrAlreadyAssigned && !isValidPattern )\n+            {\n+                reporter.addError( newReport( TrackerErrorCode.E1008 )\n+                    .addArg( attribute.getValue() )\n+                    .addArg( tea.getTextPattern() ) );\n+            }\n+        }\n+    }\n+\n+    protected void validateFileNotAlreadyAssigned( ValidationErrorReporter reporter,\n+        Attribute attr, Map<String, TrackedEntityAttributeValue> valueMap )\n+    {\n+        Objects.requireNonNull( attr, ATTRIBUTE_CANT_BE_NULL );\n+\n+        boolean attrIsFile = attr.getValueType() != null && attr.getValueType().isFile();\n+        if ( !attrIsFile )\n+        {\n+            return;\n+        }\n+\n+        TrackedEntityAttributeValue trackedEntityAttributeValue = valueMap.get( attr.getAttribute() );\n+\n+        // Todo: how can this be possible? is this acceptable?\n+        if ( trackedEntityAttributeValue != null &&\n+            !trackedEntityAttributeValue.getAttribute().getValueType().isFile() )\n+        {\n+            return;\n+        }\n+\n+        FileResource fileResource = reporter.getValidationContext().getBundle().getPreheat()\n+            .get( TrackerIdScheme.UID, FileResource.class, attr.getValue() );\n+\n+        if ( fileResource == null )\n+        {\n+            reporter.addError( newReport( TrackerErrorCode.E1084 )\n+                .addArg( attr.getValue() ) );\n+        }\n+\n+        if ( fileResource != null && fileResource.isAssigned() )\n+        {\n+            reporter.addError( newReport( TrackerErrorCode.E1009 )\n+                .addArg( attr.getValue() ) );\n+        }\n+    }\n+}", "originalCommit": "ad5654dcf03fa2ccb82adad686d9e13dde5a93b0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYyNTM3MA==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446625370", "bodyText": "Yes, this is still under todo work for next meeting.", "author": "netroms", "createdAt": "2020-06-28T09:20:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA2NjYwMA=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "3e3b32e56ff5554a0095396eddffceac65b6b8de", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\nindex 40e7a5c6bc..14928df92b 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n", "chunk": "@@ -248,17 +225,8 @@ public class TrackedEntityAttributeValidationHook\n \n         FileResource fileResource = reporter.getValidationContext().getBundle().getPreheat()\n             .get( TrackerIdScheme.UID, FileResource.class, attr.getValue() );\n-\n-        if ( fileResource == null )\n-        {\n-            reporter.addError( newReport( TrackerErrorCode.E1084 )\n-                .addArg( attr.getValue() ) );\n-        }\n-\n-        if ( fileResource != null && fileResource.isAssigned() )\n-        {\n-            reporter.addError( newReport( TrackerErrorCode.E1009 )\n-                .addArg( attr.getValue() ) );\n-        }\n+        \n+        addErrorIfNull( fileResource, reporter, E1084, attr.getValue() );\n+        addErrorIf( () -> fileResource != null && fileResource.isAssigned(), reporter, E1009, attr.getValue() );\n     }\n }\n", "next_change": {"commit": "699074cbe82db1a8e0a5e72edf2a981f3628b54b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\nindex 14928df92b..ad678566ce 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n", "chunk": "@@ -224,7 +251,7 @@ public class TrackedEntityAttributeValidationHook\n         }\n \n         FileResource fileResource = reporter.getValidationContext().getBundle().getPreheat()\n-            .get( TrackerIdScheme.UID, FileResource.class, attr.getValue() );\n+            .get( FileResource.class, attr.getValue() );\n         \n         addErrorIfNull( fileResource, reporter, E1084, attr.getValue() );\n         addErrorIf( () -> fileResource != null && fileResource.isAssigned(), reporter, E1009, attr.getValue() );\n", "next_change": {"commit": "16ae2da89c2d883763e33d9d0833f9b033d711c0", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\nindex ad678566ce..3920e3b0d3 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n", "chunk": "@@ -250,8 +250,7 @@ public class TrackedEntityAttributeValidationHook extends AttributeValidationHoo\n             return;\n         }\n \n-        FileResource fileResource = reporter.getValidationContext().getBundle().getPreheat()\n-            .get( FileResource.class, attr.getValue() );\n+        FileResource fileResource = reporter.getValidationContext().getFileResource( attr.getValue() );\n         \n         addErrorIfNull( fileResource, reporter, E1084, attr.getValue() );\n         addErrorIf( () -> fileResource != null && fileResource.isAssigned(), reporter, E1009, attr.getValue() );\n", "next_change": {"commit": "ea76fa86409613c9766d4508d65c88ac55c413c3", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\nindex 3920e3b0d3..8ab3083130 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n", "chunk": "@@ -251,7 +256,7 @@ public class TrackedEntityAttributeValidationHook extends AttributeValidationHoo\n         }\n \n         FileResource fileResource = reporter.getValidationContext().getFileResource( attr.getValue() );\n-        \n+\n         addErrorIfNull( fileResource, reporter, E1084, attr.getValue() );\n         addErrorIf( () -> fileResource != null && fileResource.isAssigned(), reporter, E1009, attr.getValue() );\n     }\n", "next_change": {"commit": "97fa18701761c6993e20f2e7a3816ea689129480", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\nindex 8ab3083130..2655fad5cb 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n", "chunk": "@@ -257,7 +215,7 @@ public class TrackedEntityAttributeValidationHook extends AttributeValidationHoo\n \n         FileResource fileResource = reporter.getValidationContext().getFileResource( attr.getValue() );\n \n-        addErrorIfNull( fileResource, reporter, E1084, attr.getValue() );\n-        addErrorIf( () -> fileResource != null && fileResource.isAssigned(), reporter, E1009, attr.getValue() );\n+        addErrorIfNull( fileResource, reporter, te, E1084, attr.getValue() );\n+        addErrorIf( () -> fileResource != null && fileResource.isAssigned(), reporter, te, E1009, attr.getValue() );\n     }\n }\n", "next_change": {"commit": "1d8350a9e9ac100aaaa831894ba3f857b46e2474", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\nindex 2655fad5cb..73afe472f0 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n", "chunk": "@@ -215,7 +215,7 @@ public class TrackedEntityAttributeValidationHook extends AttributeValidationHoo\n \n         FileResource fileResource = reporter.getValidationContext().getFileResource( attr.getValue() );\n \n-        addErrorIfNull( fileResource, reporter, te, E1084, attr.getValue() );\n-        addErrorIf( () -> fileResource != null && fileResource.isAssigned(), reporter, te, E1009, attr.getValue() );\n+        reporter.addErrorIfNull( fileResource, te, E1084, attr.getValue() );\n+        reporter.addErrorIf( () -> fileResource != null && fileResource.isAssigned(), te, E1009, attr.getValue() );\n     }\n }\n", "next_change": {"commit": "ef0cbd365e47f1f88befb80d9650cce75280bd35", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\nindex 73afe472f0..b5fd6bb72f 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n", "chunk": "@@ -213,7 +212,8 @@ public class TrackedEntityAttributeValidationHook extends AttributeValidationHoo\n             return;\n         }\n \n-        FileResource fileResource = reporter.getValidationContext().getFileResource( attr.getValue() );\n+        TrackerPreheat preheat = reporter.getBundle().getPreheat();\n+        FileResource fileResource = preheat.get( FileResource.class, attr.getValue() );\n \n         reporter.addErrorIfNull( fileResource, te, E1084, attr.getValue() );\n         reporter.addErrorIf( () -> fileResource != null && fileResource.isAssigned(), te, E1009, attr.getValue() );\n", "next_change": {"commit": "1a6c87df8b289f113b0f6bc476d07113cc2e945e", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\nindex b5fd6bb72f..73d6916b77 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n", "chunk": "@@ -216,6 +216,10 @@ public class TrackedEntityAttributeValidationHook extends AttributeValidationHoo\n         FileResource fileResource = preheat.get( FileResource.class, attr.getValue() );\n \n         reporter.addErrorIfNull( fileResource, te, E1084, attr.getValue() );\n-        reporter.addErrorIf( () -> fileResource != null && fileResource.isAssigned(), te, E1009, attr.getValue() );\n+\n+        if ( reporter.getBundle().getStrategy( te ).isCreate() )\n+        {\n+            reporter.addErrorIf( () -> fileResource != null && fileResource.isAssigned(), te, E1009, attr.getValue() );\n+        }\n     }\n }\n", "next_change": {"commit": "f7cfc83610c75486bbb0457dde057eaed777f3d2", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\nindex 73d6916b77..6b594a9ab7 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n", "chunk": "@@ -212,12 +218,11 @@ public class TrackedEntityAttributeValidationHook extends AttributeValidationHoo\n             return;\n         }\n \n-        TrackerPreheat preheat = reporter.getBundle().getPreheat();\n-        FileResource fileResource = preheat.get( FileResource.class, attr.getValue() );\n+        FileResource fileResource = bundle.getPreheat().get( FileResource.class, attr.getValue() );\n \n         reporter.addErrorIfNull( fileResource, te, E1084, attr.getValue() );\n \n-        if ( reporter.getBundle().getStrategy( te ).isCreate() )\n+        if ( bundle.getStrategy( te ).isCreate() )\n         {\n             reporter.addErrorIf( () -> fileResource != null && fileResource.isAssigned(), te, E1009, attr.getValue() );\n         }\n", "next_change": {"commit": "1cabae879cd65d1f6925c6ea5a6fe23e128bcf86", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\nindex 6b594a9ab7..3bdee1b30a 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n", "chunk": "@@ -226,5 +192,13 @@ public class TrackedEntityAttributeValidationHook extends AttributeValidationHoo\n         {\n             reporter.addErrorIf( () -> fileResource != null && fileResource.isAssigned(), te, E1009, attr.getValue() );\n         }\n+\n+        if ( bundle.getStrategy( te ).isUpdate() )\n+        {\n+            reporter.addErrorIf(\n+                () -> fileResource != null && fileResource.getFileResourceOwner() != null\n+                    && !fileResource.getFileResourceOwner().equals( te.getUid() ),\n+                te, E1009, attr.getValue() );\n+        }\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "message": "Merge commit", "committedDate": null}, {"oid": "2ed799f33ca26b918ed60473a3f097714f00492e", "committedDate": "2020-08-04 10:30:01 +0200", "message": "chore: Clean up code (#5877)"}, {"oid": "3e3dc98d92f0c13fb56cf17894eab06a78842133", "committedDate": "2020-08-04 17:20:37 +0200", "message": "feat: Enrollment/Events note persistence"}, {"oid": "e1260b5e8fceb13c2883754236a34cdd652e1c1c", "committedDate": "2020-10-20 14:00:34 +0200", "message": "refactor: Load in the preheat all the data needed for uniqueness attr\u2026 (#6397)"}, {"oid": "3e3b32e56ff5554a0095396eddffceac65b6b8de", "committedDate": "2020-10-27 09:56:50 +0100", "message": "refactor: simplified calls to error reporting (#6437)"}, {"oid": "0bf55d776481f6511e5f9ebca5de1f2cf79777c0", "committedDate": "2020-11-19 13:55:46 +0100", "message": "refactor: New Tracker Error reporting refactor (#6706)"}, {"oid": "d3aa60aac248b75b5728d245a876b0a0905748fb", "committedDate": "2020-12-02 16:34:37 +0100", "message": "fix: logic added to tracker importer to validate TEIs mandatory attributes (#6768) DHIS2-10001"}, {"oid": "7f2791b80c8bbb75a6e2a47212bf15b5e3ebeeca", "committedDate": "2020-12-04 09:17:45 +0100", "message": "fix: fix for trackedEntityTypeAttributes ( DHIS2-10001)  (#6819)"}, {"oid": "699074cbe82db1a8e0a5e72edf2a981f3628b54b", "committedDate": "2020-12-07 10:47:48 +0100", "message": "fix: Tracker Identifiers resolution during Tracker import (#6824)"}, {"oid": "16ae2da89c2d883763e33d9d0833f9b033d711c0", "committedDate": "2021-01-05 11:55:44 +0100", "message": "fix: Fix lazy exception for default category combo (#7014)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "c25b817a180f24b3de6b26d5a089563aa336aa8c", "committedDate": "2021-03-05 10:44:25 +0100", "message": "feat: Validation for values with option sets [DHIS2-10452] (#7512)"}, {"oid": "60fe241badad5b1463bc3991eff2927abae32644", "committedDate": "2021-04-21 13:49:15 +0200", "message": "fix: [DHIS2-10797] Fix remove null values for tracker attributes and data values 2.37 (#7880)"}, {"oid": "1e75d833b15ed65163451abb7d4dfb99831484de", "committedDate": "2021-04-26 09:14:51 +0200", "message": "[TECH-454] DB access in TrackedEntityAttributeValidationHook 2.37 (#7905)"}, {"oid": "40d6e6a31520cace4ff69d2bdde2bdd5f91df0f6", "committedDate": "2021-05-10 11:34:45 +0200", "message": "fix: [DHIS2-10797] Fix remove null values for tracker attributes and data values (#7994)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "97fa18701761c6993e20f2e7a3816ea689129480", "committedDate": "2022-01-11 15:31:02 +0100", "message": "chore: hooks should add errors via reporter directly TECH-880 (#9523)"}, {"oid": "1d8350a9e9ac100aaaa831894ba3f857b46e2474", "committedDate": "2022-01-13 14:15:17 +0100", "message": "chore: adding errors and warnings is responsibility of the ValidationErrorReporter TECH-880 (#9616)"}, {"oid": "c039b8f75c1d965414de926f04540dfaabdd104c", "committedDate": "2022-02-23 13:08:25 +0100", "message": "chore: Clean up service program rule module [TECH-938] (#9885)"}, {"oid": "ef0cbd365e47f1f88befb80d9650cce75280bd35", "committedDate": "2022-03-08 15:12:00 +0100", "message": "chore: move DB access and mutation to preheat and preprocessor DHIS2-12623 (#9904)"}, {"oid": "1a6c87df8b289f113b0f6bc476d07113cc2e945e", "committedDate": "2022-03-11 09:29:14 +0100", "message": "fix: Skip fileResource.issAssigned check for CREATE (#9979)"}, {"oid": "9ff8d0c831d8448a696a37138139a0ae5b975c86", "committedDate": "2022-05-17 13:32:06 +0200", "message": "fix: Attribute.attribute is a MetadataIdentifier DHIS2-12563 (#10782)"}, {"oid": "b567e74f7d703115fb7bc9802ed3b5f29d6917aa", "committedDate": "2022-05-23 09:13:55 +0200", "message": "fix: report ids or attribute value for MetadataIdentifiers DHIS2-12519 (#10873)"}, {"oid": "f7cfc83610c75486bbb0457dde057eaed777f3d2", "committedDate": "2022-05-27 15:15:25 +0200", "message": "chore: ValidationErrorReporter does not need the bunlde DHIS2-12519 (#10878)"}, {"oid": "e1740a5804e29683f4310e9fd284b637c8acb6b1", "committedDate": "2022-06-02 14:24:41 +0000", "message": "test: add context to failed TrackedEntityProgramAttributeEncryptionTest (#10971)"}, {"oid": "9ee39f390105c4517d67abfb5dbb377f9fb82074", "committedDate": "2022-06-10 10:50:40 +0200", "message": "fix: Validate enrollment attributes values based on valueType in NTI [DHIS2-12669] (2.39) (#11050)"}, {"oid": "1cabae879cd65d1f6925c6ea5a6fe23e128bcf86", "committedDate": "2022-06-14 12:07:33 +0200", "message": "feat: Persist fileResource owner from file side (#11008)"}, {"oid": "b0a861c0308005b865cafa2344c1231c0a4f2bc3", "committedDate": "2022-12-02 13:36:08 +0100", "message": "fix: turn removeOnError into skipOnError DHIS2-14213 (#12457)"}, {"oid": "7ac68b368a1dbd9362973b30f7160399abe801a0", "committedDate": "2022-12-06 09:04:47 +0100", "message": "chore: move ValidationErrorReporter close to its usage (#12486)"}, {"oid": "07ff89195ce66114c2b5a744039c2b2ce7a8f440", "committedDate": "2022-12-13 09:51:43 +0100", "message": "chore: Clean up TrackerBundle methods [TECH-14298] (#12515)"}, {"oid": "2675c1943874115831bcbe53d78b44557ceadd96", "committedDate": "2022-12-13 10:48:31 +0000", "message": "chore: add smaller Validator interface (#12524)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA2NjgxNQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446066815", "body": "Would be useful to have a Javadoc here that explains the basic validation steps: what are we validating for", "bodyText": "Would be useful to have a Javadoc here that explains the basic validation steps: what are we validating for", "bodyHTML": "<p dir=\"auto\">Would be useful to have a Javadoc here that explains the basic validation steps: what are we validating for</p>", "author": "luciano-fiandesio", "createdAt": "2020-06-26T09:14:48Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java", "diffHunk": "@@ -0,0 +1,264 @@\n+package org.hisp.dhis.tracker.validation.hooks;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.hisp.dhis.external.conf.DhisConfigurationProvider;\n+import org.hisp.dhis.fileresource.FileResource;\n+import org.hisp.dhis.fileresource.FileResourceService;\n+import org.hisp.dhis.organisationunit.OrganisationUnit;\n+import org.hisp.dhis.reservedvalue.ReservedValueService;\n+import org.hisp.dhis.textpattern.TextPatternValidationUtils;\n+import org.hisp.dhis.trackedentity.TrackedEntityAttribute;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+import org.hisp.dhis.trackedentityattributevalue.TrackedEntityAttributeValue;\n+import org.hisp.dhis.trackedentityattributevalue.TrackedEntityAttributeValueService;\n+import org.hisp.dhis.tracker.TrackerIdScheme;\n+import org.hisp.dhis.tracker.TrackerImportStrategy;\n+import org.hisp.dhis.tracker.bundle.TrackerBundle;\n+import org.hisp.dhis.tracker.domain.Attribute;\n+import org.hisp.dhis.tracker.domain.TrackedEntity;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n+import org.hisp.dhis.tracker.validation.TrackerImportValidationContext;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+import static org.hisp.dhis.system.util.ValidationUtils.dataValueIsValid;\n+import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n+import static org.hisp.dhis.tracker.validation.hooks.Constants.ATTRIBUTE_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.Constants.TRACKED_ENTITY_ATTRIBUTE_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.Constants.TRACKED_ENTITY_ATTRIBUTE_VALUE_CANT_BE_NULL;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+@Component\n+public class TrackedEntityAttributeValidationHook\n+    extends AbstractTrackerDtoValidationHook\n+{\n+    private static final int MAX_ATTR_VALUE_LENGTH = 1200;\n+\n+    public TrackedEntityAttributeValidationHook()\n+    {\n+        super( TrackedEntity.class, TrackerImportStrategy.CREATE_AND_UPDATE );\n+    }\n+\n+    @Autowired\n+    protected FileResourceService fileResourceService;\n+\n+    @Autowired\n+    protected TrackedEntityAttributeValueService trackedEntityAttributeValueService;\n+\n+    @Autowired\n+    protected ReservedValueService reservedValueService;\n+\n+    @Autowired\n+    private DhisConfigurationProvider dhisConfigurationProvider;\n+\n+    @Override\n+    public void validateTrackedEntity( ValidationErrorReporter reporter, TrackedEntity trackedEntity )\n+    {\n+        TrackerImportValidationContext context = reporter.getValidationContext();\n+\n+        TrackedEntityInstance tei = context.getTrackedEntityInstance( trackedEntity.getTrackedEntity() );\n+        OrganisationUnit organisationUnit = context.getOrganisationUnit( trackedEntity.getOrgUnit() );\n+\n+        validateAttributes( reporter, trackedEntity, tei, organisationUnit );\n+    }\n+\n+    protected void validateAttributes( ValidationErrorReporter reporter,\n+        TrackedEntity trackedEntity, TrackedEntityInstance tei, OrganisationUnit orgUnit )\n+    {\n+        Objects.requireNonNull( trackedEntity, Constants.TRACKED_ENTITY_CANT_BE_NULL );\n+\n+        Map<String, TrackedEntityAttributeValue> valueMap = new HashMap<>();\n+        if ( tei != null )\n+        {\n+            valueMap = tei.getTrackedEntityAttributeValues()\n+                .stream()\n+                .collect( Collectors.toMap( v -> v.getAttribute().getUid(), v -> v ) );\n+        }\n+\n+        for ( Attribute attribute : trackedEntity.getAttributes() )\n+        {\n+            TrackedEntityAttribute tea = reporter.getValidationContext()\n+                .getTrackedEntityAttribute( attribute.getAttribute() );\n+\n+            if ( tea == null )\n+            {\n+                reporter.addError( newReport( TrackerErrorCode.E1006 )\n+                    .addArg( attribute.getAttribute() ) );\n+                continue;\n+            }\n+\n+//            if ( StringUtils.isEmpty( attribute.getValue() ) )\n+            if ( attribute.getValue() == null )\n+            {\n+                //continue; ??? Just continue on empty and null?\n+                // TODO: Is this really correct? This check was not here originally\n+                //  Enrollment attr check fails on null so why not here too?\n+                reporter.addError( newReport( TrackerErrorCode.E1076 )\n+                    .addArg( attribute ) );\n+                continue;\n+            }\n+\n+            // TODO: Should we really validate existing data? this sounds like a mix of con\n+//            TrackedEntityAttributeValue trackedEntityAttributeValue = valueMap.get( tea.getUid() );\n+//            if ( trackedEntityAttributeValue == null )\n+//            {\n+            TrackedEntityAttributeValue trackedEntityAttributeValue = new TrackedEntityAttributeValue();\n+            trackedEntityAttributeValue.setEntityInstance( tei );\n+            trackedEntityAttributeValue.setValue( attribute.getValue() );\n+            trackedEntityAttributeValue.setAttribute( tea );\n+//            }\n+\n+            validateAttributeValue( reporter, trackedEntityAttributeValue );\n+            validateTextPattern( reporter, attribute, tea, valueMap.get( tea.getUid() ) );\n+            validateAttrValueType( reporter, attribute, tea );\n+\n+            // TODO: This is one \"THE\" potential performance killer...\n+            validateAttributeUniqueness( reporter, attribute.getValue(), tea, tei, orgUnit );\n+\n+            validateFileNotAlreadyAssigned( reporter, attribute, valueMap );\n+        }\n+    }\n+\n+    public void validateAttributeValue( ValidationErrorReporter reporter, TrackedEntityAttributeValue teav )", "originalCommit": "ad5654dcf03fa2ccb82adad686d9e13dde5a93b0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f5ca59f3146a74d32ee856088e163893fd73a6ec", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\nindex 40e7a5c6bc..74db064142 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n", "chunk": "@@ -159,6 +159,7 @@ public class TrackedEntityAttributeValidationHook\n         Objects.requireNonNull( teav, TRACKED_ENTITY_ATTRIBUTE_VALUE_CANT_BE_NULL );\n         Objects.requireNonNull( teav.getValue(), TRACKED_ENTITY_ATTRIBUTE_VALUE_CANT_BE_NULL );\n \n+        // Validate value (string) don't exceed the max length\n         if ( teav.getValue().length() > MAX_ATTR_VALUE_LENGTH )\n         {\n             reporter.addError( newReport( TrackerErrorCode.E1077 )\n", "next_change": {"commit": "3999d1c8e8d7c2bcd11c7c5d99fec179abd25e2b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\nindex 74db064142..5bb0c9d090 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n", "chunk": "@@ -156,8 +157,8 @@ public class TrackedEntityAttributeValidationHook\n \n     public void validateAttributeValue( ValidationErrorReporter reporter, TrackedEntityAttributeValue teav )\n     {\n-        Objects.requireNonNull( teav, TRACKED_ENTITY_ATTRIBUTE_VALUE_CANT_BE_NULL );\n-        Objects.requireNonNull( teav.getValue(), TRACKED_ENTITY_ATTRIBUTE_VALUE_CANT_BE_NULL );\n+        checkNotNull( teav, TRACKED_ENTITY_ATTRIBUTE_VALUE_CANT_BE_NULL );\n+        checkNotNull( teav.getValue(), TRACKED_ENTITY_ATTRIBUTE_VALUE_CANT_BE_NULL );\n \n         // Validate value (string) don't exceed the max length\n         if ( teav.getValue().length() > MAX_ATTR_VALUE_LENGTH )\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\nindex 40e7a5c6bc..63e7fe5394 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n", "chunk": "@@ -156,9 +160,10 @@ public class TrackedEntityAttributeValidationHook\n \n     public void validateAttributeValue( ValidationErrorReporter reporter, TrackedEntityAttributeValue teav )\n     {\n-        Objects.requireNonNull( teav, TRACKED_ENTITY_ATTRIBUTE_VALUE_CANT_BE_NULL );\n-        Objects.requireNonNull( teav.getValue(), TRACKED_ENTITY_ATTRIBUTE_VALUE_CANT_BE_NULL );\n+        checkNotNull( teav, TRACKED_ENTITY_ATTRIBUTE_VALUE_CANT_BE_NULL );\n+        checkNotNull( teav.getValue(), TRACKED_ENTITY_ATTRIBUTE_VALUE_CANT_BE_NULL );\n \n+        // Validate value (string) don't exceed the max length\n         if ( teav.getValue().length() > MAX_ATTR_VALUE_LENGTH )\n         {\n             reporter.addError( newReport( TrackerErrorCode.E1077 )\n", "next_change": {"commit": "e1260b5e8fceb13c2883754236a34cdd652e1c1c", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\nindex 63e7fe5394..0d3feb2ad8 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n", "chunk": "@@ -137,55 +127,44 @@ public class TrackedEntityAttributeValidationHook\n                 continue;\n             }\n \n-            // TODO: Should we really validate existing data? this sounds like a mix of con\n-//            TrackedEntityAttributeValue trackedEntityAttributeValue = valueMap.get( tea.getUid() );\n-//            if ( trackedEntityAttributeValue == null )\n-//            {\n-            TrackedEntityAttributeValue trackedEntityAttributeValue = new TrackedEntityAttributeValue();\n-            trackedEntityAttributeValue.setEntityInstance( tei );\n-            trackedEntityAttributeValue.setValue( attribute.getValue() );\n-            trackedEntityAttributeValue.setAttribute( tea );\n-//            }\n-\n-            validateAttributeValue( reporter, trackedEntityAttributeValue );\n+            validateAttributeValue( reporter, tea, attribute.getValue() );\n             validateTextPattern( reporter, attribute, tea, valueMap.get( tea.getUid() ) );\n             validateAttrValueType( reporter, attribute, tea );\n \n-            // TODO: This is one \"THE\" potential performance killer...\n             validateAttributeUniqueness( reporter, attribute.getValue(), tea, tei, orgUnit );\n \n             validateFileNotAlreadyAssigned( reporter, attribute, valueMap );\n         }\n     }\n \n-    public void validateAttributeValue( ValidationErrorReporter reporter, TrackedEntityAttributeValue teav )\n+    public void validateAttributeValue( ValidationErrorReporter reporter, TrackedEntityAttribute tea, String value )\n     {\n-        checkNotNull( teav, TRACKED_ENTITY_ATTRIBUTE_VALUE_CANT_BE_NULL );\n-        checkNotNull( teav.getValue(), TRACKED_ENTITY_ATTRIBUTE_VALUE_CANT_BE_NULL );\n+        checkNotNull( tea, TRACKED_ENTITY_ATTRIBUTE_VALUE_CANT_BE_NULL );\n+        checkNotNull( value, TRACKED_ENTITY_ATTRIBUTE_VALUE_CANT_BE_NULL );\n \n         // Validate value (string) don't exceed the max length\n-        if ( teav.getValue().length() > MAX_ATTR_VALUE_LENGTH )\n+        if ( value.length() > MAX_ATTR_VALUE_LENGTH )\n         {\n             reporter.addError( newReport( TrackerErrorCode.E1077 )\n-                .addArg( teav )\n+                .addArg( value )\n                 .addArg( MAX_ATTR_VALUE_LENGTH ) );\n         }\n \n         // Validate if that encryption is configured properly if someone sets value to (confidential)\n-        boolean isConfidential = teav.getAttribute().isConfidentialBool();\n+        boolean isConfidential = tea.isConfidentialBool();\n         boolean encryptionStatusOk = dhisConfigurationProvider.getEncryptionStatus().isOk();\n         if ( isConfidential && !encryptionStatusOk )\n         {\n             reporter.addError( newReport( TrackerErrorCode.E1112 )\n-                .addArg( teav ) );\n+                .addArg( value ) );\n         }\n \n         // Uses ValidationUtils to check that the data value corresponds to the data value type set on the attribute\n-        String result = dataValueIsValid( teav.getValue(), teav.getAttribute().getValueType() );\n+        String result = dataValueIsValid( value, tea.getValueType() );\n         if ( result != null )\n         {\n             reporter.addError( newReport( TrackerErrorCode.E1085 )\n-                .addArg( teav.getAttribute() )\n+                .addArg( tea )\n                 .addArg( result ) );\n         }\n     }\n", "next_change": {"commit": "3e3b32e56ff5554a0095396eddffceac65b6b8de", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\nindex 0d3feb2ad8..14928df92b 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n", "chunk": "@@ -143,30 +152,16 @@ public class TrackedEntityAttributeValidationHook\n         checkNotNull( value, TRACKED_ENTITY_ATTRIBUTE_VALUE_CANT_BE_NULL );\n \n         // Validate value (string) don't exceed the max length\n-        if ( value.length() > MAX_ATTR_VALUE_LENGTH )\n-        {\n-            reporter.addError( newReport( TrackerErrorCode.E1077 )\n-                .addArg( value )\n-                .addArg( MAX_ATTR_VALUE_LENGTH ) );\n-        }\n-\n+        addErrorIf( () -> value.length() > MAX_ATTR_VALUE_LENGTH, reporter, E1077, value, MAX_ATTR_VALUE_LENGTH );\n+        \n         // Validate if that encryption is configured properly if someone sets value to (confidential)\n         boolean isConfidential = tea.isConfidentialBool();\n         boolean encryptionStatusOk = dhisConfigurationProvider.getEncryptionStatus().isOk();\n-        if ( isConfidential && !encryptionStatusOk )\n-        {\n-            reporter.addError( newReport( TrackerErrorCode.E1112 )\n-                .addArg( value ) );\n-        }\n+        addErrorIf( () -> isConfidential && !encryptionStatusOk, reporter, E1112, value );\n \n         // Uses ValidationUtils to check that the data value corresponds to the data value type set on the attribute\n-        String result = dataValueIsValid( value, tea.getValueType() );\n-        if ( result != null )\n-        {\n-            reporter.addError( newReport( TrackerErrorCode.E1085 )\n-                .addArg( tea )\n-                .addArg( result ) );\n-        }\n+        final String result = dataValueIsValid( value, tea.getValueType() );\n+        addErrorIf( () -> result != null, reporter, E1085, tea, result );\n     }\n \n     protected void validateTextPattern( ValidationErrorReporter reporter,\n", "next_change": {"commit": "ea76fa86409613c9766d4508d65c88ac55c413c3", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\nindex 14928df92b..8ab3083130 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n", "chunk": "@@ -153,13 +180,15 @@ public class TrackedEntityAttributeValidationHook\n \n         // Validate value (string) don't exceed the max length\n         addErrorIf( () -> value.length() > MAX_ATTR_VALUE_LENGTH, reporter, E1077, value, MAX_ATTR_VALUE_LENGTH );\n-        \n-        // Validate if that encryption is configured properly if someone sets value to (confidential)\n+\n+        // Validate if that encryption is configured properly if someone sets\n+        // value to (confidential)\n         boolean isConfidential = tea.isConfidentialBool();\n         boolean encryptionStatusOk = dhisConfigurationProvider.getEncryptionStatus().isOk();\n         addErrorIf( () -> isConfidential && !encryptionStatusOk, reporter, E1112, value );\n \n-        // Uses ValidationUtils to check that the data value corresponds to the data value type set on the attribute\n+        // Uses ValidationUtils to check that the data value corresponds to the\n+        // data value type set on the attribute\n         final String result = dataValueIsValid( value, tea.getValueType() );\n         addErrorIf( () -> result != null, reporter, E1085, tea, result );\n     }\n", "next_change": {"commit": "1e75d833b15ed65163451abb7d4dfb99831484de", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\nindex 8ab3083130..660d30327d 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n", "chunk": "@@ -193,48 +185,6 @@ public class TrackedEntityAttributeValidationHook extends AttributeValidationHoo\n         addErrorIf( () -> result != null, reporter, E1085, tea, result );\n     }\n \n-    protected void validateTextPattern( ValidationErrorReporter reporter,\n-        Attribute attribute, TrackedEntityAttribute tea, TrackedEntityAttributeValue existingValue )\n-    {\n-        TrackerBundle bundle = reporter.getValidationContext().getBundle();\n-        checkNotNull( attribute, ATTRIBUTE_CANT_BE_NULL );\n-        checkNotNull( tea, TRACKED_ENTITY_ATTRIBUTE_CANT_BE_NULL );\n-\n-        if ( !tea.isGenerated() )\n-        {\n-            return;\n-        }\n-\n-        // TODO: Should we check the text pattern even if its not generated?\n-        // TextPatternValidationUtils.validateTextPatternValue(\n-        // attribute.getTextPattern(), value )\n-\n-        // TODO: Can't provoke this error since metadata importer won't allow\n-        // null, empty or invalid patterns.\n-        if ( tea.getTextPattern() == null && !bundle.isSkipTextPatternValidation() )\n-        {\n-            reporter.addError( newReport( TrackerErrorCode.E1111 )\n-                .addArg( attribute ) );\n-        }\n-\n-        if ( tea.getTextPattern() != null && !bundle.isSkipTextPatternValidation() )\n-        {\n-            String oldValue = existingValue != null ? existingValue.getValue() : null;\n-\n-            // We basically ignore the pattern validation if the value is\n-            // reserved or already\n-            // assigned i.e. input eq. already persisted value.\n-            boolean isReservedOrAlreadyAssigned = Objects.equals( attribute.getValue(), oldValue ) ||\n-                reservedValueService.isReserved( tea.getTextPattern(), attribute.getValue() );\n-\n-            boolean isValidPattern = TextPatternValidationUtils\n-                .validateTextPatternValue( tea.getTextPattern(), attribute.getValue() );\n-\n-            addErrorIf( () -> !isReservedOrAlreadyAssigned && !isValidPattern, reporter, E1008, attribute.getValue(),\n-                tea.getTextPattern() );\n-        }\n-    }\n-\n     protected void validateFileNotAlreadyAssigned( ValidationErrorReporter reporter,\n         Attribute attr, Map<String, TrackedEntityAttributeValue> valueMap )\n     {\n", "next_change": {"commit": "97fa18701761c6993e20f2e7a3816ea689129480", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\nindex 660d30327d..2655fad5cb 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n", "chunk": "@@ -149,43 +152,48 @@ public class TrackedEntityAttributeValidationHook extends AttributeValidationHoo\n                         .findFirst() );\n \n                 if ( optionalTea.isPresent() )\n-                    addError( reporter, E1076, TrackedEntityAttribute.class.getSimpleName(), attribute );\n+                    addError( reporter, trackedEntity, E1076, TrackedEntityAttribute.class.getSimpleName(),\n+                        attribute.getAttribute() );\n \n                 continue;\n             }\n \n-            validateAttributeValue( reporter, tea, attribute.getValue() );\n-            validateAttrValueType( reporter, attribute, tea );\n-            validateOptionSet( reporter, tea, attribute.getValue() );\n+            validateAttributeValue( reporter, trackedEntity, tea, attribute.getValue() );\n+            validateAttrValueType( reporter, trackedEntity, attribute, tea );\n+            validateOptionSet( reporter, trackedEntity, tea,\n+                attribute.getValue() );\n \n-            validateAttributeUniqueness( reporter, attribute.getValue(), tea, tei, orgUnit );\n+            validateAttributeUniqueness( reporter, trackedEntity, attribute.getValue(), tea, tei, orgUnit );\n \n-            validateFileNotAlreadyAssigned( reporter, attribute, valueMap );\n+            validateFileNotAlreadyAssigned( reporter, trackedEntity, attribute, valueMap );\n         }\n     }\n \n-    public void validateAttributeValue( ValidationErrorReporter reporter, TrackedEntityAttribute tea, String value )\n+    public void validateAttributeValue( ValidationErrorReporter reporter, TrackedEntity te, TrackedEntityAttribute tea,\n+        String value )\n     {\n         checkNotNull( tea, TRACKED_ENTITY_ATTRIBUTE_VALUE_CANT_BE_NULL );\n         checkNotNull( value, TRACKED_ENTITY_ATTRIBUTE_VALUE_CANT_BE_NULL );\n \n         // Validate value (string) don't exceed the max length\n-        addErrorIf( () -> value.length() > Constant.MAX_ATTR_VALUE_LENGTH, reporter, E1077, value,\n+        addErrorIf( () -> value.length() > Constant.MAX_ATTR_VALUE_LENGTH, reporter, te,\n+            E1077, value,\n             Constant.MAX_ATTR_VALUE_LENGTH );\n \n         // Validate if that encryption is configured properly if someone sets\n         // value to (confidential)\n         boolean isConfidential = tea.isConfidentialBool();\n         boolean encryptionStatusOk = dhisConfigurationProvider.getEncryptionStatus().isOk();\n-        addErrorIf( () -> isConfidential && !encryptionStatusOk, reporter, E1112, value );\n+        addErrorIf( () -> isConfidential && !encryptionStatusOk, reporter, te, E1112,\n+            value );\n \n         // Uses ValidationUtils to check that the data value corresponds to the\n         // data value type set on the attribute\n         final String result = dataValueIsValid( value, tea.getValueType() );\n-        addErrorIf( () -> result != null, reporter, E1085, tea, result );\n+        addErrorIf( () -> result != null, reporter, te, E1085, tea, result );\n     }\n \n-    protected void validateFileNotAlreadyAssigned( ValidationErrorReporter reporter,\n+    protected void validateFileNotAlreadyAssigned( ValidationErrorReporter reporter, TrackedEntity te,\n         Attribute attr, Map<String, TrackedEntityAttributeValue> valueMap )\n     {\n         checkNotNull( attr, ATTRIBUTE_CANT_BE_NULL );\n", "next_change": {"commit": "1d8350a9e9ac100aaaa831894ba3f857b46e2474", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\nindex 2655fad5cb..73afe472f0 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n", "chunk": "@@ -184,13 +184,13 @@ public class TrackedEntityAttributeValidationHook extends AttributeValidationHoo\n         // value to (confidential)\n         boolean isConfidential = tea.isConfidentialBool();\n         boolean encryptionStatusOk = dhisConfigurationProvider.getEncryptionStatus().isOk();\n-        addErrorIf( () -> isConfidential && !encryptionStatusOk, reporter, te, E1112,\n+        reporter.addErrorIf( () -> isConfidential && !encryptionStatusOk, te, E1112,\n             value );\n \n         // Uses ValidationUtils to check that the data value corresponds to the\n         // data value type set on the attribute\n         final String result = dataValueIsValid( value, tea.getValueType() );\n-        addErrorIf( () -> result != null, reporter, te, E1085, tea, result );\n+        reporter.addErrorIf( () -> result != null, te, E1085, tea, result );\n     }\n \n     protected void validateFileNotAlreadyAssigned( ValidationErrorReporter reporter, TrackedEntity te,\n", "next_change": {"commit": "9ff8d0c831d8448a696a37138139a0ae5b975c86", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\nindex 73afe472f0..d4f0db9eee 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n", "chunk": "@@ -194,7 +196,7 @@ public class TrackedEntityAttributeValidationHook extends AttributeValidationHoo\n     }\n \n     protected void validateFileNotAlreadyAssigned( ValidationErrorReporter reporter, TrackedEntity te,\n-        Attribute attr, Map<String, TrackedEntityAttributeValue> valueMap )\n+        Attribute attr, Map<MetadataIdentifier, TrackedEntityAttributeValue> valueMap )\n     {\n         checkNotNull( attr, ATTRIBUTE_CANT_BE_NULL );\n \n", "next_change": {"commit": "f7cfc83610c75486bbb0457dde057eaed777f3d2", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\nindex d4f0db9eee..6b594a9ab7 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n", "chunk": "@@ -195,7 +197,8 @@ public class TrackedEntityAttributeValidationHook extends AttributeValidationHoo\n         reporter.addErrorIf( () -> result != null, te, E1085, tea, result );\n     }\n \n-    protected void validateFileNotAlreadyAssigned( ValidationErrorReporter reporter, TrackedEntity te,\n+    protected void validateFileNotAlreadyAssigned( ValidationErrorReporter reporter, TrackerBundle bundle,\n+        TrackedEntity te,\n         Attribute attr, Map<MetadataIdentifier, TrackedEntityAttributeValue> valueMap )\n     {\n         checkNotNull( attr, ATTRIBUTE_CANT_BE_NULL );\n", "next_change": {"commit": "9ee39f390105c4517d67abfb5dbb377f9fb82074", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\nindex 6b594a9ab7..0fdb897d7e 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityAttributeValidationHook.java\n", "chunk": "@@ -173,30 +163,6 @@ public class TrackedEntityAttributeValidationHook extends AttributeValidationHoo\n         }\n     }\n \n-    public void validateAttributeValue( ValidationErrorReporter reporter, TrackedEntity te, TrackedEntityAttribute tea,\n-        String value )\n-    {\n-        checkNotNull( tea, TRACKED_ENTITY_ATTRIBUTE_VALUE_CANT_BE_NULL );\n-        checkNotNull( value, TRACKED_ENTITY_ATTRIBUTE_VALUE_CANT_BE_NULL );\n-\n-        // Validate value (string) don't exceed the max length\n-        reporter.addErrorIf( () -> value.length() > Constant.MAX_ATTR_VALUE_LENGTH, te,\n-            E1077, value,\n-            Constant.MAX_ATTR_VALUE_LENGTH );\n-\n-        // Validate if that encryption is configured properly if someone sets\n-        // value to (confidential)\n-        boolean isConfidential = tea.isConfidentialBool();\n-        boolean encryptionStatusOk = dhisConfigurationProvider.getEncryptionStatus().isOk();\n-        reporter.addErrorIf( () -> isConfidential && !encryptionStatusOk, te, E1112,\n-            value );\n-\n-        // Uses ValidationUtils to check that the data value corresponds to the\n-        // data value type set on the attribute\n-        final String result = dataValueIsValid( value, tea.getValueType() );\n-        reporter.addErrorIf( () -> result != null, te, E1085, tea, result );\n-    }\n-\n     protected void validateFileNotAlreadyAssigned( ValidationErrorReporter reporter, TrackerBundle bundle,\n         TrackedEntity te,\n         Attribute attr, Map<MetadataIdentifier, TrackedEntityAttributeValue> valueMap )\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "message": "Merge commit", "committedDate": null}, {"oid": "2ed799f33ca26b918ed60473a3f097714f00492e", "committedDate": "2020-08-04 10:30:01 +0200", "message": "chore: Clean up code (#5877)"}, {"oid": "3e3dc98d92f0c13fb56cf17894eab06a78842133", "committedDate": "2020-08-04 17:20:37 +0200", "message": "feat: Enrollment/Events note persistence"}, {"oid": "e1260b5e8fceb13c2883754236a34cdd652e1c1c", "committedDate": "2020-10-20 14:00:34 +0200", "message": "refactor: Load in the preheat all the data needed for uniqueness attr\u2026 (#6397)"}, {"oid": "3e3b32e56ff5554a0095396eddffceac65b6b8de", "committedDate": "2020-10-27 09:56:50 +0100", "message": "refactor: simplified calls to error reporting (#6437)"}, {"oid": "0bf55d776481f6511e5f9ebca5de1f2cf79777c0", "committedDate": "2020-11-19 13:55:46 +0100", "message": "refactor: New Tracker Error reporting refactor (#6706)"}, {"oid": "d3aa60aac248b75b5728d245a876b0a0905748fb", "committedDate": "2020-12-02 16:34:37 +0100", "message": "fix: logic added to tracker importer to validate TEIs mandatory attributes (#6768) DHIS2-10001"}, {"oid": "7f2791b80c8bbb75a6e2a47212bf15b5e3ebeeca", "committedDate": "2020-12-04 09:17:45 +0100", "message": "fix: fix for trackedEntityTypeAttributes ( DHIS2-10001)  (#6819)"}, {"oid": "699074cbe82db1a8e0a5e72edf2a981f3628b54b", "committedDate": "2020-12-07 10:47:48 +0100", "message": "fix: Tracker Identifiers resolution during Tracker import (#6824)"}, {"oid": "16ae2da89c2d883763e33d9d0833f9b033d711c0", "committedDate": "2021-01-05 11:55:44 +0100", "message": "fix: Fix lazy exception for default category combo (#7014)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "c25b817a180f24b3de6b26d5a089563aa336aa8c", "committedDate": "2021-03-05 10:44:25 +0100", "message": "feat: Validation for values with option sets [DHIS2-10452] (#7512)"}, {"oid": "60fe241badad5b1463bc3991eff2927abae32644", "committedDate": "2021-04-21 13:49:15 +0200", "message": "fix: [DHIS2-10797] Fix remove null values for tracker attributes and data values 2.37 (#7880)"}, {"oid": "1e75d833b15ed65163451abb7d4dfb99831484de", "committedDate": "2021-04-26 09:14:51 +0200", "message": "[TECH-454] DB access in TrackedEntityAttributeValidationHook 2.37 (#7905)"}, {"oid": "40d6e6a31520cace4ff69d2bdde2bdd5f91df0f6", "committedDate": "2021-05-10 11:34:45 +0200", "message": "fix: [DHIS2-10797] Fix remove null values for tracker attributes and data values (#7994)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "97fa18701761c6993e20f2e7a3816ea689129480", "committedDate": "2022-01-11 15:31:02 +0100", "message": "chore: hooks should add errors via reporter directly TECH-880 (#9523)"}, {"oid": "1d8350a9e9ac100aaaa831894ba3f857b46e2474", "committedDate": "2022-01-13 14:15:17 +0100", "message": "chore: adding errors and warnings is responsibility of the ValidationErrorReporter TECH-880 (#9616)"}, {"oid": "c039b8f75c1d965414de926f04540dfaabdd104c", "committedDate": "2022-02-23 13:08:25 +0100", "message": "chore: Clean up service program rule module [TECH-938] (#9885)"}, {"oid": "ef0cbd365e47f1f88befb80d9650cce75280bd35", "committedDate": "2022-03-08 15:12:00 +0100", "message": "chore: move DB access and mutation to preheat and preprocessor DHIS2-12623 (#9904)"}, {"oid": "1a6c87df8b289f113b0f6bc476d07113cc2e945e", "committedDate": "2022-03-11 09:29:14 +0100", "message": "fix: Skip fileResource.issAssigned check for CREATE (#9979)"}, {"oid": "9ff8d0c831d8448a696a37138139a0ae5b975c86", "committedDate": "2022-05-17 13:32:06 +0200", "message": "fix: Attribute.attribute is a MetadataIdentifier DHIS2-12563 (#10782)"}, {"oid": "b567e74f7d703115fb7bc9802ed3b5f29d6917aa", "committedDate": "2022-05-23 09:13:55 +0200", "message": "fix: report ids or attribute value for MetadataIdentifiers DHIS2-12519 (#10873)"}, {"oid": "f7cfc83610c75486bbb0457dde057eaed777f3d2", "committedDate": "2022-05-27 15:15:25 +0200", "message": "chore: ValidationErrorReporter does not need the bunlde DHIS2-12519 (#10878)"}, {"oid": "e1740a5804e29683f4310e9fd284b637c8acb6b1", "committedDate": "2022-06-02 14:24:41 +0000", "message": "test: add context to failed TrackedEntityProgramAttributeEncryptionTest (#10971)"}, {"oid": "9ee39f390105c4517d67abfb5dbb377f9fb82074", "committedDate": "2022-06-10 10:50:40 +0200", "message": "fix: Validate enrollment attributes values based on valueType in NTI [DHIS2-12669] (2.39) (#11050)"}, {"oid": "1cabae879cd65d1f6925c6ea5a6fe23e128bcf86", "committedDate": "2022-06-14 12:07:33 +0200", "message": "feat: Persist fileResource owner from file side (#11008)"}, {"oid": "b0a861c0308005b865cafa2344c1231c0a4f2bc3", "committedDate": "2022-12-02 13:36:08 +0100", "message": "fix: turn removeOnError into skipOnError DHIS2-14213 (#12457)"}, {"oid": "7ac68b368a1dbd9362973b30f7160399abe801a0", "committedDate": "2022-12-06 09:04:47 +0100", "message": "chore: move ValidationErrorReporter close to its usage (#12486)"}, {"oid": "07ff89195ce66114c2b5a744039c2b2ce7a8f440", "committedDate": "2022-12-13 09:51:43 +0100", "message": "chore: Clean up TrackerBundle methods [TECH-14298] (#12515)"}, {"oid": "2675c1943874115831bcbe53d78b44557ceadd96", "committedDate": "2022-12-13 10:48:31 +0000", "message": "chore: add smaller Validator interface (#12524)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA2NzUzMg==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446067532", "body": "The default is to use `com.google.api.client.util.Preconditions.checkNotNull.checkNotNull`", "bodyText": "The default is to use com.google.api.client.util.Preconditions.checkNotNull.checkNotNull", "bodyHTML": "<p dir=\"auto\">The default is to use <code>com.google.api.client.util.Preconditions.checkNotNull.checkNotNull</code></p>", "author": "luciano-fiandesio", "createdAt": "2020-06-26T09:16:17Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/service/DefaultTrackerImportAccessManager.java", "diffHunk": "@@ -0,0 +1,304 @@\n+package org.hisp.dhis.tracker.validation.service;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.hisp.dhis.category.CategoryOption;\n+import org.hisp.dhis.category.CategoryOptionCombo;\n+import org.hisp.dhis.organisationunit.OrganisationUnit;\n+import org.hisp.dhis.organisationunit.OrganisationUnitService;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.program.ProgramInstance;\n+import org.hisp.dhis.program.ProgramStage;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.security.acl.AclService;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+import org.hisp.dhis.trackedentity.TrackedEntityType;\n+import org.hisp.dhis.trackedentity.TrackerOwnershipManager;\n+import org.hisp.dhis.tracker.bundle.TrackerBundle;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n+import org.hisp.dhis.tracker.validation.hooks.Constants;\n+import org.hisp.dhis.user.User;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Objects;\n+\n+import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n+import static org.hisp.dhis.tracker.validation.hooks.Constants.ORGANISATION_UNIT_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.Constants.PROGRAM_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.Constants.PROGRAM_INSTANCE_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.Constants.PROGRAM_STAGE_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.Constants.PROGRAM_STAGE_INSTANCE_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.Constants.TRACKED_ENTITY_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.Constants.TRACKED_ENTITY_TYPE_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.Constants.USER_CANT_BE_NULL;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+@Component\n+public class DefaultTrackerImportAccessManager\n+    implements TrackerImportAccessManager\n+{\n+    private final AclService aclService;\n+\n+    private final TrackerOwnershipManager ownershipAccessManager;\n+\n+    private final OrganisationUnitService organisationUnitService;\n+\n+    public DefaultTrackerImportAccessManager( AclService aclService, TrackerOwnershipManager ownershipAccessManager,\n+        OrganisationUnitService organisationUnitService )\n+    {\n+        Objects.requireNonNull( aclService );", "originalCommit": "ad5654dcf03fa2ccb82adad686d9e13dde5a93b0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYyNjc4Mw==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446626783", "bodyText": "This is build into the JDK now and is the exact similar functionality. I would strongly argue that using JDK features should have precedence over 3rd party libs when they do the same.", "author": "netroms", "createdAt": "2020-06-28T09:34:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA2NzUzMg=="}], "type": "inlineReview", "revised_code": {"commit": "3999d1c8e8d7c2bcd11c7c5d99fec179abd25e2b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/service/DefaultTrackerImportAccessManager.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/service/DefaultTrackerImportAccessManager.java\nindex 83c8fef61b..46294e1d4f 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/service/DefaultTrackerImportAccessManager.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/service/DefaultTrackerImportAccessManager.java\n", "chunk": "@@ -75,23 +74,22 @@ public class DefaultTrackerImportAccessManager\n     public DefaultTrackerImportAccessManager( AclService aclService, TrackerOwnershipManager ownershipAccessManager,\n         OrganisationUnitService organisationUnitService )\n     {\n-        Objects.requireNonNull( aclService );\n-        Objects.requireNonNull( ownershipAccessManager );\n-        Objects.requireNonNull( organisationUnitService );\n+        checkNotNull( aclService );\n+        checkNotNull( ownershipAccessManager );\n+        checkNotNull( organisationUnitService );\n \n         this.aclService = aclService;\n         this.ownershipAccessManager = ownershipAccessManager;\n         this.organisationUnitService = organisationUnitService;\n     }\n \n-    public void checkOrgUnitInSearchScope( ValidationErrorReporter reporter,\n-        OrganisationUnit orgUnit )\n+    public void checkOrgUnitInSearchScope( ValidationErrorReporter reporter, OrganisationUnit orgUnit )\n     {\n         TrackerBundle bundle = reporter.getValidationContext().getBundle();\n         User user = bundle.getUser();\n \n-        Objects.requireNonNull( user, USER_CANT_BE_NULL );\n-        Objects.requireNonNull( orgUnit, ORGANISATION_UNIT_CANT_BE_NULL );\n+        checkNotNull( user, USER_CANT_BE_NULL );\n+        checkNotNull( orgUnit, ORGANISATION_UNIT_CANT_BE_NULL );\n \n         if ( !organisationUnitService.isInUserSearchHierarchyCached( user, orgUnit ) )\n         {\n", "next_change": {"commit": "898c87ce14bf1faf20e8f8ebf3a5bc12f27437f0", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/service/DefaultTrackerImportAccessManager.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/service/DefaultTrackerImportAccessManager.java\nindex 46294e1d4f..91f653a851 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/service/DefaultTrackerImportAccessManager.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/service/DefaultTrackerImportAccessManager.java\n", "chunk": "@@ -94,6 +94,7 @@ public class DefaultTrackerImportAccessManager\n         if ( !organisationUnitService.isInUserSearchHierarchyCached( user, orgUnit ) )\n         {\n             //TODO: This state I can't reach, can't enroll in programs without registration...\n+            // maybe remove in the new importer?\n             reporter.addError( newReport( TrackerErrorCode.E1093 )\n                 .addArg( user )\n                 .addArg( orgUnit ) );\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/service/DefaultTrackerImportAccessManager.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/service/DefaultTrackerImportAccessManager.java\nindex 83c8fef61b..91f653a851 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/service/DefaultTrackerImportAccessManager.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/service/DefaultTrackerImportAccessManager.java\n", "chunk": "@@ -75,41 +74,40 @@ public class DefaultTrackerImportAccessManager\n     public DefaultTrackerImportAccessManager( AclService aclService, TrackerOwnershipManager ownershipAccessManager,\n         OrganisationUnitService organisationUnitService )\n     {\n-        Objects.requireNonNull( aclService );\n-        Objects.requireNonNull( ownershipAccessManager );\n-        Objects.requireNonNull( organisationUnitService );\n+        checkNotNull( aclService );\n+        checkNotNull( ownershipAccessManager );\n+        checkNotNull( organisationUnitService );\n \n         this.aclService = aclService;\n         this.ownershipAccessManager = ownershipAccessManager;\n         this.organisationUnitService = organisationUnitService;\n     }\n \n-    public void checkOrgUnitInSearchScope( ValidationErrorReporter reporter,\n-        OrganisationUnit orgUnit )\n+    public void checkOrgUnitInSearchScope( ValidationErrorReporter reporter, OrganisationUnit orgUnit )\n     {\n         TrackerBundle bundle = reporter.getValidationContext().getBundle();\n         User user = bundle.getUser();\n \n-        Objects.requireNonNull( user, USER_CANT_BE_NULL );\n-        Objects.requireNonNull( orgUnit, ORGANISATION_UNIT_CANT_BE_NULL );\n+        checkNotNull( user, USER_CANT_BE_NULL );\n+        checkNotNull( orgUnit, ORGANISATION_UNIT_CANT_BE_NULL );\n \n         if ( !organisationUnitService.isInUserSearchHierarchyCached( user, orgUnit ) )\n         {\n             //TODO: This state I can't reach, can't enroll in programs without registration...\n+            // maybe remove in the new importer?\n             reporter.addError( newReport( TrackerErrorCode.E1093 )\n                 .addArg( user )\n                 .addArg( orgUnit ) );\n         }\n     }\n \n-    public void checkOrgUnitInCaptureScope( ValidationErrorReporter reporter,\n-        OrganisationUnit orgUnit )\n+    public void checkOrgUnitInCaptureScope( ValidationErrorReporter reporter, OrganisationUnit orgUnit )\n     {\n         TrackerBundle bundle = reporter.getValidationContext().getBundle();\n         User user = bundle.getUser();\n \n-        Objects.requireNonNull( user, USER_CANT_BE_NULL );\n-        Objects.requireNonNull( orgUnit, ORGANISATION_UNIT_CANT_BE_NULL );\n+        checkNotNull( user, USER_CANT_BE_NULL );\n+        checkNotNull( orgUnit, ORGANISATION_UNIT_CANT_BE_NULL );\n \n         if ( !organisationUnitService.isInUserHierarchyCached( user, orgUnit ) )\n         {\n", "next_change": {"commit": "e72a194b035dc4f76df0c9cdaf7701a299b1558a", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/service/DefaultTrackerImportAccessManager.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/service/DefaultTrackerImportAccessManager.java\nindex 91f653a851..133911e055 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/service/DefaultTrackerImportAccessManager.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/service/DefaultTrackerImportAccessManager.java\n", "chunk": "@@ -109,11 +96,11 @@ public class DefaultTrackerImportAccessManager\n         checkNotNull( user, USER_CANT_BE_NULL );\n         checkNotNull( orgUnit, ORGANISATION_UNIT_CANT_BE_NULL );\n \n-        if ( !organisationUnitService.isInUserHierarchyCached( user, orgUnit ) )\n+        if ( !organisationUnitService.isInUserSearchHierarchyCached( user, orgUnit ) )\n         {\n-            reporter.addError( newReport( TrackerErrorCode.E1000 )\n-                .addArg( user )\n-                .addArg( orgUnit ) );\n+            reporter.addError( newReport( TrackerErrorCode.E1003 )\n+                .addArg( orgUnit )\n+                .addArg( user ) );\n         }\n     }\n \n", "next_change": {"commit": "2e2099d6db366b906110376b9a5ad1cead4b33ec", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/service/DefaultTrackerImportAccessManager.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/service/DefaultTrackerImportAccessManager.java\ndeleted file mode 100644\nindex 133911e055..0000000000\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/service/DefaultTrackerImportAccessManager.java\n+++ /dev/null\n", "chunk": "@@ -1,280 +0,0 @@\n-/*\n- * Copyright (c) 2004-2021, University of Oslo\n- * All rights reserved.\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions are met:\n- * Redistributions of source code must retain the above copyright notice, this\n- * list of conditions and the following disclaimer.\n- *\n- * Redistributions in binary form must reproduce the above copyright notice,\n- * this list of conditions and the following disclaimer in the documentation\n- * and/or other materials provided with the distribution.\n- * Neither the name of the HISP project nor the names of its contributors may\n- * be used to endorse or promote products derived from this software without\n- * specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n- * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n- * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n- * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n- * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n- * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n- * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- */\n-package org.hisp.dhis.tracker.validation.service;\n-\n-import static com.google.api.client.util.Preconditions.checkNotNull;\n-import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n-import static org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors.ORGANISATION_UNIT_CANT_BE_NULL;\n-import static org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors.PROGRAM_CANT_BE_NULL;\n-import static org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors.PROGRAM_STAGE_CANT_BE_NULL;\n-import static org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors.TRACKED_ENTITY_CANT_BE_NULL;\n-import static org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors.TRACKED_ENTITY_TYPE_CANT_BE_NULL;\n-import static org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors.USER_CANT_BE_NULL;\n-\n-import lombok.NonNull;\n-import lombok.RequiredArgsConstructor;\n-\n-import org.hisp.dhis.category.CategoryOption;\n-import org.hisp.dhis.category.CategoryOptionCombo;\n-import org.hisp.dhis.organisationunit.OrganisationUnit;\n-import org.hisp.dhis.organisationunit.OrganisationUnitService;\n-import org.hisp.dhis.program.Program;\n-import org.hisp.dhis.program.ProgramStage;\n-import org.hisp.dhis.security.acl.AclService;\n-import org.hisp.dhis.trackedentity.TrackedEntityType;\n-import org.hisp.dhis.trackedentity.TrackerOwnershipManager;\n-import org.hisp.dhis.tracker.bundle.TrackerBundle;\n-import org.hisp.dhis.tracker.report.TrackerErrorCode;\n-import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n-import org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors;\n-import org.hisp.dhis.user.User;\n-import org.springframework.stereotype.Component;\n-\n-/**\n- * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n- */\n-@Component\n-@RequiredArgsConstructor\n-public class DefaultTrackerImportAccessManager\n-    implements TrackerImportAccessManager\n-{\n-    @NonNull\n-    private final AclService aclService;\n-\n-    @NonNull\n-    private final TrackerOwnershipManager ownershipAccessManager;\n-\n-    @NonNull\n-    private final OrganisationUnitService organisationUnitService;\n-\n-    public void checkOrgUnitInCaptureScope( ValidationErrorReporter reporter, OrganisationUnit orgUnit )\n-    {\n-        TrackerBundle bundle = reporter.getValidationContext().getBundle();\n-        User user = bundle.getUser();\n-\n-        checkNotNull( user, USER_CANT_BE_NULL );\n-        checkNotNull( orgUnit, ORGANISATION_UNIT_CANT_BE_NULL );\n-\n-        if ( !organisationUnitService.isInUserHierarchyCached( user, orgUnit ) )\n-        {\n-            reporter.addError( newReport( TrackerErrorCode.E1000 )\n-                .addArg( user )\n-                .addArg( orgUnit ) );\n-        }\n-    }\n-\n-    public void checkOrgUnitInSearchScope( ValidationErrorReporter reporter, OrganisationUnit orgUnit )\n-    {\n-        TrackerBundle bundle = reporter.getValidationContext().getBundle();\n-        User user = bundle.getUser();\n-\n-        checkNotNull( user, USER_CANT_BE_NULL );\n-        checkNotNull( orgUnit, ORGANISATION_UNIT_CANT_BE_NULL );\n-\n-        if ( !organisationUnitService.isInUserSearchHierarchyCached( user, orgUnit ) )\n-        {\n-            reporter.addError( newReport( TrackerErrorCode.E1003 )\n-                .addArg( orgUnit )\n-                .addArg( user ) );\n-        }\n-    }\n-\n-    public void checkTeiTypeWriteAccess( ValidationErrorReporter reporter, TrackedEntityType trackedEntityType )\n-    {\n-        TrackerBundle bundle = reporter.getValidationContext().getBundle();\n-        User user = bundle.getUser();\n-\n-        checkNotNull( user, USER_CANT_BE_NULL );\n-        checkNotNull( trackedEntityType, TRACKED_ENTITY_TYPE_CANT_BE_NULL );\n-\n-        if ( !aclService.canDataWrite( user, trackedEntityType ) )\n-        {\n-            reporter.addError( newReport( TrackerErrorCode.E1001 )\n-                .addArg( user )\n-                .addArg( trackedEntityType ) );\n-        }\n-    }\n-\n-    protected void checkTeiTypeAndTeiProgramAccess( ValidationErrorReporter reporter, User user,\n-        String trackedEntityInstance,\n-        OrganisationUnit organisationUnit,\n-        OrganisationUnit ownerOrganisationUnit,\n-        Program program )\n-    {\n-        checkNotNull( user, USER_CANT_BE_NULL );\n-        checkNotNull( program, PROGRAM_CANT_BE_NULL );\n-        checkNotNull( program.getTrackedEntityType(), TRACKED_ENTITY_TYPE_CANT_BE_NULL );\n-        checkNotNull( trackedEntityInstance, TRACKED_ENTITY_CANT_BE_NULL );\n-\n-        if ( !aclService.canDataRead( user, program.getTrackedEntityType() ) )\n-        {\n-            reporter.addError( newReport( TrackerErrorCode.E1104 )\n-                .addArg( user )\n-                .addArg( program )\n-                .addArg( program.getTrackedEntityType() ) );\n-        }\n-\n-        if ( ownerOrganisationUnit != null\n-            && !ownershipAccessManager.hasAccess( user, trackedEntityInstance, ownerOrganisationUnit,\n-                program ) )\n-        {\n-            reporter.addError( newReport( TrackerErrorCode.E1102 )\n-                .addArg( user )\n-                .addArg( trackedEntityInstance )\n-                .addArg( program ) );\n-        }\n-    }\n-\n-    @Override\n-    public void checkWriteEnrollmentAccess( ValidationErrorReporter reporter, Program program,\n-        String trackedEntity, OrganisationUnit enrollmentOrgUnit, OrganisationUnit ownerOrgUnit )\n-    {\n-        TrackerBundle bundle = reporter.getValidationContext().getBundle();\n-        User user = bundle.getUser();\n-\n-        checkNotNull( user, USER_CANT_BE_NULL );\n-        checkNotNull( program, PROGRAM_CANT_BE_NULL );\n-\n-        checkProgramWriteAccess( reporter, user, program );\n-\n-        if ( program.isRegistration() )\n-        {\n-            checkNotNull( program.getTrackedEntityType(), TRACKED_ENTITY_TYPE_CANT_BE_NULL );\n-            checkTeiTypeAndTeiProgramAccess( reporter, user, trackedEntity, enrollmentOrgUnit, ownerOrgUnit, program );\n-        }\n-    }\n-\n-    @Override\n-    public void checkEventWriteAccess( ValidationErrorReporter reporter, ProgramStage programStage,\n-        OrganisationUnit eventOrgUnit, OrganisationUnit ownerOrgUnit,\n-        CategoryOptionCombo categoryOptionCombo,\n-        String trackedEntity, boolean isCreatableInSearchScope )\n-    {\n-        TrackerBundle bundle = reporter.getValidationContext().getBundle();\n-        User user = bundle.getUser();\n-\n-        checkNotNull( user, USER_CANT_BE_NULL );\n-        checkNotNull( programStage, PROGRAM_STAGE_CANT_BE_NULL );\n-        checkNotNull( programStage.getProgram(), PROGRAM_CANT_BE_NULL );\n-        checkNotNull( eventOrgUnit, ORGANISATION_UNIT_CANT_BE_NULL );\n-\n-        if ( isCreatableInSearchScope ? !organisationUnitService.isInUserSearchHierarchyCached( user, eventOrgUnit )\n-            : !organisationUnitService.isInUserHierarchyCached( user, eventOrgUnit ) )\n-        {\n-            reporter.addError( newReport( TrackerErrorCode.E1000 )\n-                .addArg( user )\n-                .addArg( eventOrgUnit ) );\n-        }\n-\n-        if ( programStage.getProgram().isWithoutRegistration() )\n-        {\n-            checkProgramWriteAccess( reporter, user, programStage.getProgram() );\n-        }\n-        else\n-        {\n-            checkProgramStageWriteAccess( reporter, user, programStage );\n-            final Program program = programStage.getProgram();\n-\n-            checkProgramReadAccess( reporter, user, program );\n-\n-            checkTeiTypeAndTeiProgramAccess( reporter, user,\n-                trackedEntity,\n-                eventOrgUnit,\n-                ownerOrgUnit,\n-                programStage.getProgram() );\n-        }\n-\n-        if ( categoryOptionCombo != null )\n-        {\n-            checkWriteCategoryOptionComboAccess( reporter, categoryOptionCombo );\n-        }\n-    }\n-\n-    protected void checkProgramReadAccess( ValidationErrorReporter reporter, User user,\n-        Program program )\n-    {\n-        checkNotNull( user, USER_CANT_BE_NULL );\n-        checkNotNull( program, PROGRAM_CANT_BE_NULL );\n-\n-        if ( !aclService.canDataRead( user, program ) )\n-        {\n-            reporter.addError( newReport( TrackerErrorCode.E1096 )\n-                .addArg( user )\n-                .addArg( program ) );\n-        }\n-    }\n-\n-    protected void checkProgramStageWriteAccess( ValidationErrorReporter reporter, User user,\n-        ProgramStage programStage )\n-    {\n-        checkNotNull( user, USER_CANT_BE_NULL );\n-        checkNotNull( programStage, PROGRAM_STAGE_CANT_BE_NULL );\n-\n-        if ( !aclService.canDataWrite( user, programStage ) )\n-        {\n-            reporter.addError( newReport( TrackerErrorCode.E1095 )\n-                .addArg( user )\n-                .addArg( programStage ) );\n-        }\n-    }\n-\n-    protected void checkProgramWriteAccess( ValidationErrorReporter reporter, User user,\n-        Program program )\n-    {\n-        checkNotNull( user, USER_CANT_BE_NULL );\n-        checkNotNull( program, PROGRAM_CANT_BE_NULL );\n-\n-        if ( !aclService.canDataWrite( user, program ) )\n-        {\n-            reporter.addError( newReport( TrackerErrorCode.E1091 )\n-                .addArg( user )\n-                .addArg( program ) );\n-        }\n-    }\n-\n-    @Override\n-    public void checkWriteCategoryOptionComboAccess( ValidationErrorReporter reporter,\n-        CategoryOptionCombo categoryOptionCombo )\n-    {\n-        TrackerBundle bundle = reporter.getValidationContext().getBundle();\n-        User user = bundle.getUser();\n-\n-        checkNotNull( user, USER_CANT_BE_NULL );\n-        checkNotNull( categoryOptionCombo, TrackerImporterAssertErrors.CATEGORY_OPTION_COMBO_CANT_BE_NULL );\n-\n-        for ( CategoryOption categoryOption : categoryOptionCombo.getCategoryOptions() )\n-        {\n-            if ( !aclService.canDataWrite( user, categoryOption ) )\n-            {\n-                reporter.addError( newReport( TrackerErrorCode.E1099 )\n-                    .addArg( user )\n-                    .addArg( categoryOption ) );\n-            }\n-        }\n-    }\n-}\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "message": "Merge commit", "committedDate": null}, {"oid": "d095f2d4cf9aaac1e9aa973d4da6aa2f96104cc8", "committedDate": "2020-11-11 13:49:13 +0100", "message": "fix: allow validation to reference entities in the payload (#6617)"}, {"oid": "3e799d196b8f73ad216ea100a07ddd5f7dfc53e0", "committedDate": "2020-11-30 16:37:14 +0100", "message": "fix: remove long running transaction during Tracker Import (#6782)"}, {"oid": "f1ee41f1845d51b9efa6c5f5c666371ee503297a", "committedDate": "2020-12-09 21:22:05 +0100", "message": "fix: tune mappers to reduce queries executed during import (#6845)"}, {"oid": "e96350d39473b2ed5d851f6a4f12567fb3412b60", "committedDate": "2021-01-04 09:05:09 +0100", "message": "fix: get Program from preheat using Program from ProgramStage (#6982)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "7d032be663a1d9444d4bc1dbf3bc20ff0f861ec1", "committedDate": "2021-05-26 16:49:59 +0200", "message": "refactor: Clean up integration tests in the new importer [TECH-589] (#8076)"}, {"oid": "fe04922e144ac69367a99840d5518edda2d67f38", "committedDate": "2021-06-03 08:17:10 +0200", "message": "fix: Make program field read-only in event payload [DHIS2-11225] (#8086)"}, {"oid": "314988e32cd6b86d7010c4a46e17fd3c3d1b9cc3", "committedDate": "2021-08-31 22:03:14 +0200", "message": "fix: ownership validation and preheating in new tracker importer [DHIS2-11223] (#8158)"}, {"oid": "e72a194b035dc4f76df0c9cdaf7701a299b1558a", "committedDate": "2021-10-05 13:25:05 +0200", "message": "fix: Allow TEI updates in search scope [DHIS2-11910] (2.38) (#8921)"}, {"oid": "8bd63f9823397e39458bd1cdab383c33c3231019", "committedDate": "2021-12-22 09:32:29 +0100", "message": "chore: move factory methods into class it creates TECH-880 (#9518)"}, {"oid": "2e2099d6db366b906110376b9a5ad1cead4b33ec", "committedDate": "2021-12-22 15:36:47 +0100", "message": "chore: inline ImportAccessManager TECH-880 (#9524)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA3MDI3Ng==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446070276", "body": "Commented out code", "bodyText": "Commented out code", "bodyHTML": "<p dir=\"auto\">Commented out code</p>", "author": "luciano-fiandesio", "createdAt": "2020-06-26T09:21:26Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/bundle/TrackedEntityProgramAttributeFileResourceTest.java", "diffHunk": "@@ -111,14 +113,15 @@ protected void setUpTest() throws IOException\n         objectBundleService.commit( bundle );\n     }\n \n-    @Override\n-    public boolean emptyDatabaseAfterTest()\n-    {\n-        return true;\n-    }\n+//    @Override", "originalCommit": "ad5654dcf03fa2ccb82adad686d9e13dde5a93b0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c5a94c3d798ab59a16b994801255c4ac2631887b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/bundle/TrackedEntityProgramAttributeFileResourceTest.java b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/bundle/TrackedEntityProgramAttributeFileResourceTest.java\nindex 4ff7da3e43..da99144797 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/bundle/TrackedEntityProgramAttributeFileResourceTest.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/bundle/TrackedEntityProgramAttributeFileResourceTest.java\n", "chunk": "@@ -113,12 +113,6 @@ public class TrackedEntityProgramAttributeFileResourceTest\n         objectBundleService.commit( bundle );\n     }\n \n-//    @Override\n-//    public boolean emptyDatabaseAfterTest()\n-//    {\n-//        return true;\n-//    }\n-\n     @Test\n     public void testTrackedEntityProgramAttributeFileResourceValue()\n         throws IOException\n", "next_change": null}]}, "revised_code_in_main": {"commit": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/bundle/TrackedEntityProgramAttributeFileResourceTest.java b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/bundle/TrackedEntityProgramAttributeFileResourceTest.java\nindex 4ff7da3e43..3b00026936 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/bundle/TrackedEntityProgramAttributeFileResourceTest.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/bundle/TrackedEntityProgramAttributeFileResourceTest.java\n", "chunk": "@@ -113,12 +115,6 @@ public class TrackedEntityProgramAttributeFileResourceTest\n         objectBundleService.commit( bundle );\n     }\n \n-//    @Override\n-//    public boolean emptyDatabaseAfterTest()\n-//    {\n-//        return true;\n-//    }\n-\n     @Test\n     public void testTrackedEntityProgramAttributeFileResourceValue()\n         throws IOException\n", "next_change": {"commit": "3e799d196b8f73ad216ea100a07ddd5f7dfc53e0", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/bundle/TrackedEntityProgramAttributeFileResourceTest.java b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/bundle/TrackedEntityProgramAttributeFileResourceTest.java\nindex 3b00026936..1cbe6b053e 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/bundle/TrackedEntityProgramAttributeFileResourceTest.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/bundle/TrackedEntityProgramAttributeFileResourceTest.java\n", "chunk": "@@ -91,28 +67,10 @@ public class TrackedEntityProgramAttributeFileResourceTest\n     private FileResourceService fileResourceService;\n \n     @Override\n-    protected void setUpTest()\n+    protected void initTest()\n         throws IOException\n     {\n-        preCreateInjectAdminUserWithoutPersistence();\n-\n-        renderService = _renderService;\n-        userService = _userService;\n-\n-        Map<Class<? extends IdentifiableObject>, List<IdentifiableObject>> metadata = renderService.fromMetadata(\n-            new ClassPathResource( \"tracker/te_program_with_tea_fileresource_metadata.json\" ).getInputStream(),\n-            RenderFormat.JSON );\n-\n-        ObjectBundleParams params = new ObjectBundleParams();\n-        params.setObjectBundleMode( ObjectBundleMode.COMMIT );\n-        params.setImportStrategy( ImportStrategy.CREATE );\n-        params.setObjects( metadata );\n-\n-        ObjectBundle bundle = objectBundleService.create( params );\n-        ObjectBundleValidationReport validationReport = objectBundleValidationService.validate( bundle );\n-        assertTrue( validationReport.getErrorReports().isEmpty() );\n-\n-        objectBundleService.commit( bundle );\n+        setUpMetadata( \"tracker/te_program_with_tea_fileresource_metadata.json\" );\n     }\n \n     @Test\n", "next_change": {"commit": "22d5da9d9a812b02eb5acd643112a6b050b5d63c", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/bundle/TrackedEntityProgramAttributeFileResourceTest.java b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/bundle/TrackedEntityProgramAttributeFileResourceTest.java\nindex 1cbe6b053e..b782c0552a 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/bundle/TrackedEntityProgramAttributeFileResourceTest.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/bundle/TrackedEntityProgramAttributeFileResourceTest.java\n", "chunk": "@@ -74,33 +73,24 @@ public class TrackedEntityProgramAttributeFileResourceTest\n     }\n \n     @Test\n-    public void testTrackedEntityProgramAttributeFileResourceValue()\n+    void testTrackedEntityProgramAttributeFileResourceValue()\n         throws IOException\n     {\n-        FileResource fileResource = new FileResource( \"test.pdf\", \"application/pdf\",\n-            0, \"d41d8cd98f00b204e9800998ecf8427e\", FileResourceDomain.DOCUMENT );\n+        FileResource fileResource = new FileResource( \"test.pdf\", \"application/pdf\", 0,\n+            \"d41d8cd98f00b204e9800998ecf8427e\", FileResourceDomain.DOCUMENT );\n         fileResource.setUid( \"Jzf6hHNP7jx\" );\n         File file = File.createTempFile( \"file-resource\", \"test\" );\n-\n         fileResourceService.saveFileResource( fileResource, file );\n         assertFalse( fileResource.isAssigned() );\n-\n         TrackerImportParams trackerImportParams = fromJson( \"tracker/te_program_with_tea_fileresource_data.json\" );\n         TrackerBundle trackerBundle = trackerBundleService.create( trackerImportParams );\n-\n         trackerBundleService.commit( trackerBundle );\n-\n         List<TrackedEntityInstance> trackedEntityInstances = manager.getAll( TrackedEntityInstance.class );\n         assertEquals( 1, trackedEntityInstances.size() );\n-\n         TrackedEntityInstance trackedEntityInstance = trackedEntityInstances.get( 0 );\n-\n         List<TrackedEntityAttributeValue> attributeValues = trackedEntityAttributeValueService\n-            .getTrackedEntityAttributeValues(\n-                trackedEntityInstance );\n-\n+            .getTrackedEntityAttributeValues( trackedEntityInstance );\n         assertEquals( 5, attributeValues.size() );\n-\n         fileResource = fileResourceService.getFileResource( fileResource.getUid() );\n         assertTrue( fileResource.isAssigned() );\n     }\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "message": "Merge commit", "committedDate": null}, {"oid": "cb2ee65c0210c0d4b2bd8851789da8d4adfaf04d", "committedDate": "2020-09-07 10:28:21 +0200", "message": "fix: [DHIS2-9287] Fix the stats in the import summary (#6062)"}, {"oid": "3e799d196b8f73ad216ea100a07ddd5f7dfc53e0", "committedDate": "2020-11-30 16:37:14 +0100", "message": "fix: remove long running transaction during Tracker Import (#6782)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "22d5da9d9a812b02eb5acd643112a6b050b5d63c", "committedDate": "2021-12-16 13:19:38 +0100", "message": "chore: migrate tests to JUnit 5 (#9467)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "c57836ed4b5781d49f9f71739f8363cbba22115d", "committedDate": "2022-05-19 15:17:52 +0200", "message": "fix: Fix tracker integration tests to use tracker import service [TECH-890] (#10846)"}, {"oid": "6b39184ce68d45d2d75a08c3d6b45fe012395457", "committedDate": "2022-06-03 08:16:09 +0200", "message": "test: use assertNoImportErrors for better context (#10989)"}, {"oid": "6e83eba877030575456f919de1bce55fcae8e517", "committedDate": "2022-06-24 10:01:46 +0200", "message": "test: move all integration tests into own module TECH-1209 (#11148)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE1OTM0OA==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446159348", "body": "Perhaps it would be better to rename this class to \"TrackerImporterErrors\" or something in this direction", "bodyText": "Perhaps it would be better to rename this class to \"TrackerImporterErrors\" or something in this direction", "bodyHTML": "<p dir=\"auto\">Perhaps it would be better to rename this class to \"TrackerImporterErrors\" or something in this direction</p>", "author": "luciano-fiandesio", "createdAt": "2020-06-26T12:41:38Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/Constants.java", "diffHunk": "@@ -0,0 +1,79 @@\n+package org.hisp.dhis.tracker.validation.hooks;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+public class Constants", "originalCommit": "ad5654dcf03fa2ccb82adad686d9e13dde5a93b0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c5a94c3d798ab59a16b994801255c4ac2631887b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/Constants.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackerImporterAssertErrors.java\nsimilarity index 91%\nrename from dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/Constants.java\nrename to dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackerImporterAssertErrors.java\nindex 509863ca6d..02c1d2f0a5 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/Constants.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackerImporterAssertErrors.java\n", "chunk": "@@ -28,9 +28,9 @@ package org.hisp.dhis.tracker.validation.hooks;\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n-public class Constants\n+public class TrackerImporterAssertErrors\n {\n-    private Constants()\n+    private TrackerImporterAssertErrors()\n     {\n         throw new IllegalArgumentException( \"Don't make an instance of me!\" );\n     }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/Constants.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackerImporterAssertErrors.java\nsimilarity index 91%\nrename from dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/Constants.java\nrename to dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackerImporterAssertErrors.java\nindex 509863ca6d..fc01122fce 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/Constants.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackerImporterAssertErrors.java\n", "chunk": "@@ -28,9 +28,9 @@ package org.hisp.dhis.tracker.validation.hooks;\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n-public class Constants\n+public class TrackerImporterAssertErrors\n {\n-    private Constants()\n+    private TrackerImporterAssertErrors()\n     {\n         throw new IllegalArgumentException( \"Don't make an instance of me!\" );\n     }\n", "next_change": null}]}, "commits_in_main": [{"oid": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE2MDY0Mg==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446160642", "body": "Javadoc missing", "bodyText": "Javadoc missing", "bodyHTML": "<p dir=\"auto\">Javadoc missing</p>", "author": "luciano-fiandesio", "createdAt": "2020-06-26T12:44:21Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/service/TrackerImportAccessManager.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package org.hisp.dhis.tracker.validation.service;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.hisp.dhis.category.CategoryOptionCombo;\n+import org.hisp.dhis.organisationunit.OrganisationUnit;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.program.ProgramInstance;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.trackedentity.TrackedEntityType;\n+import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n+import org.hisp.dhis.user.User;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+public interface TrackerImportAccessManager", "originalCommit": "ad5654dcf03fa2ccb82adad686d9e13dde5a93b0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d2feae85e2920e2ecd5cce7d310e926ae797cd2c", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/service/TrackerImportAccessManager.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/service/TrackerImportAccessManager.java\nindex 065332416f..003117195a 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/service/TrackerImportAccessManager.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/service/TrackerImportAccessManager.java\n", "chunk": "@@ -42,23 +43,96 @@ import org.hisp.dhis.user.User;\n  */\n public interface TrackerImportAccessManager\n {\n-    void checkOrgUnitInSearchScope( ValidationErrorReporter reporter,\n-        OrganisationUnit orgUnit );\n+    /**\n+     * Same as {@link OrganisationUnitService#isInUserSearchHierarchyCached(User, OrganisationUnit)}\n+     * Checks the importing user has access to \"search hierarchy\" of the input OrganisationUnit.\n+     *\n+     * @param reporter error reporter instance\n+     * @param orgUnit  input orgUnit to validate against\n+     */\n+    void checkOrgUnitInSearchScope( ValidationErrorReporter reporter, OrganisationUnit orgUnit );\n \n-    void checkOrgUnitInCaptureScope( ValidationErrorReporter reporter,\n-        OrganisationUnit orgUnit );\n+    /**\n+     * Same as {@link OrganisationUnitService#isInUserHierarchyCached(User, OrganisationUnit)}\n+     * Checks the importing user has access to \"capture hierarchy\" of the input OrganisationUnit.\n+     *\n+     * @param reporter error reporter instance\n+     * @param orgUnit  input orgUnit to validate against\n+     */\n+    void checkOrgUnitInCaptureScope( ValidationErrorReporter reporter, OrganisationUnit orgUnit );\n \n-    void checkTeiTypeWriteAccess( ValidationErrorReporter reporter, User user,\n-        TrackedEntityType trackedEntityType );\n+    /**\n+     * Checks the importing user has write access to the TrackedEntityType.\n+     *\n+     * @param reporter          error reporter instance\n+     * @param trackedEntityType teiType to check importing user has write access to\n+     */\n+    void checkTeiTypeWriteAccess( ValidationErrorReporter reporter, TrackedEntityType trackedEntityType );\n \n-    void checkReadEnrollmentAccess( ValidationErrorReporter reporter, User user, ProgramInstance programInstance );\n+    /**\n+     * Checks the importing user has read access enrollment.\n+     * <p>\n+     * If enrollment is a registration:\n+     * <p>\n+     * 1. Check has read access to program and if it is a registration program\n+     * <p>\n+     * 2. Check that user has read access to program tei type.\n+     * <p>\n+     * 3. Check has access to the tei - program combination.\n+     * <p>\n+     * If enrollment is a non registration:\n+     * <p>\n+     * 1. Check user is in \"search scope\" of the program's org. unit.\n+     *\n+     * @param reporter        error reporter instance\n+     * @param programInstance enrollment to check user has read access\n+     */\n+    void checkReadEnrollmentAccess( ValidationErrorReporter reporter, ProgramInstance programInstance );\n \n-    void checkWriteEnrollmentAccess( ValidationErrorReporter reporter, User user, Program program,\n+    /**\n+     * Check importing user has write access to enrollment.\n+     * 1. Check user has write access to program\n+     * <p>\n+     * 2 If program is registration, check :\n+     * a. Check that user has read access to program tei type.\n+     * b. Check has access to the tei - program combination.\n+     *\n+     * @param reporter        error reporter instance\n+     * @param program         program to check user has write access\n+     * @param programInstance enrollment to check user has write access\n+     */\n+    void checkWriteEnrollmentAccess( ValidationErrorReporter reporter, Program program,\n         ProgramInstance programInstance );\n \n-    void checkEventWriteAccess( ValidationErrorReporter reporter, User user,\n-        ProgramStageInstance programStageInstance );\n+    /**\n+     * Check importing user has write access to event.\n+     * <p>\n+     * Check user has access to either \"search scope or capture scope\" according to isCreatableInSearchScope()\n+     * <p>\n+     * Check program stage is registration.\n+     * If it is a registration check:\n+     * 1. Program stage write access\n+     * 2. Program read access\n+     * 3. Pprogram tei type. read access\n+     * 4. Tei - Program combination access\n+     * <p>\n+     * If NOT a registration check:\n+     * 1. Program write access\n+     * <p>\n+     * If event has a Attribute Option Combo:\n+     * 1. Check user has write access to the combo.\n+     *\n+     * @param reporter             error reporter instance\n+     * @param programStageInstance event to check user has write access to\n+     */\n+    void checkEventWriteAccess( ValidationErrorReporter reporter, ProgramStageInstance programStageInstance );\n \n-    void checkWriteCategoryOptionComboAccess( ValidationErrorReporter reporter, User user,\n+    /**\n+     * Loops trough all CategoryOptionCombo options and check that the importing user has write access to all of them.\n+     *\n+     * @param reporter            error reporter instance\n+     * @param categoryOptionCombo CategoryOptionCombo to check user has write access\n+     */\n+    void checkWriteCategoryOptionComboAccess( ValidationErrorReporter reporter,\n         CategoryOptionCombo categoryOptionCombo );\n }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/service/TrackerImportAccessManager.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/service/TrackerImportAccessManager.java\nindex 065332416f..003117195a 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/service/TrackerImportAccessManager.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/service/TrackerImportAccessManager.java\n", "chunk": "@@ -42,23 +43,96 @@ import org.hisp.dhis.user.User;\n  */\n public interface TrackerImportAccessManager\n {\n-    void checkOrgUnitInSearchScope( ValidationErrorReporter reporter,\n-        OrganisationUnit orgUnit );\n+    /**\n+     * Same as {@link OrganisationUnitService#isInUserSearchHierarchyCached(User, OrganisationUnit)}\n+     * Checks the importing user has access to \"search hierarchy\" of the input OrganisationUnit.\n+     *\n+     * @param reporter error reporter instance\n+     * @param orgUnit  input orgUnit to validate against\n+     */\n+    void checkOrgUnitInSearchScope( ValidationErrorReporter reporter, OrganisationUnit orgUnit );\n \n-    void checkOrgUnitInCaptureScope( ValidationErrorReporter reporter,\n-        OrganisationUnit orgUnit );\n+    /**\n+     * Same as {@link OrganisationUnitService#isInUserHierarchyCached(User, OrganisationUnit)}\n+     * Checks the importing user has access to \"capture hierarchy\" of the input OrganisationUnit.\n+     *\n+     * @param reporter error reporter instance\n+     * @param orgUnit  input orgUnit to validate against\n+     */\n+    void checkOrgUnitInCaptureScope( ValidationErrorReporter reporter, OrganisationUnit orgUnit );\n \n-    void checkTeiTypeWriteAccess( ValidationErrorReporter reporter, User user,\n-        TrackedEntityType trackedEntityType );\n+    /**\n+     * Checks the importing user has write access to the TrackedEntityType.\n+     *\n+     * @param reporter          error reporter instance\n+     * @param trackedEntityType teiType to check importing user has write access to\n+     */\n+    void checkTeiTypeWriteAccess( ValidationErrorReporter reporter, TrackedEntityType trackedEntityType );\n \n-    void checkReadEnrollmentAccess( ValidationErrorReporter reporter, User user, ProgramInstance programInstance );\n+    /**\n+     * Checks the importing user has read access enrollment.\n+     * <p>\n+     * If enrollment is a registration:\n+     * <p>\n+     * 1. Check has read access to program and if it is a registration program\n+     * <p>\n+     * 2. Check that user has read access to program tei type.\n+     * <p>\n+     * 3. Check has access to the tei - program combination.\n+     * <p>\n+     * If enrollment is a non registration:\n+     * <p>\n+     * 1. Check user is in \"search scope\" of the program's org. unit.\n+     *\n+     * @param reporter        error reporter instance\n+     * @param programInstance enrollment to check user has read access\n+     */\n+    void checkReadEnrollmentAccess( ValidationErrorReporter reporter, ProgramInstance programInstance );\n \n-    void checkWriteEnrollmentAccess( ValidationErrorReporter reporter, User user, Program program,\n+    /**\n+     * Check importing user has write access to enrollment.\n+     * 1. Check user has write access to program\n+     * <p>\n+     * 2 If program is registration, check :\n+     * a. Check that user has read access to program tei type.\n+     * b. Check has access to the tei - program combination.\n+     *\n+     * @param reporter        error reporter instance\n+     * @param program         program to check user has write access\n+     * @param programInstance enrollment to check user has write access\n+     */\n+    void checkWriteEnrollmentAccess( ValidationErrorReporter reporter, Program program,\n         ProgramInstance programInstance );\n \n-    void checkEventWriteAccess( ValidationErrorReporter reporter, User user,\n-        ProgramStageInstance programStageInstance );\n+    /**\n+     * Check importing user has write access to event.\n+     * <p>\n+     * Check user has access to either \"search scope or capture scope\" according to isCreatableInSearchScope()\n+     * <p>\n+     * Check program stage is registration.\n+     * If it is a registration check:\n+     * 1. Program stage write access\n+     * 2. Program read access\n+     * 3. Pprogram tei type. read access\n+     * 4. Tei - Program combination access\n+     * <p>\n+     * If NOT a registration check:\n+     * 1. Program write access\n+     * <p>\n+     * If event has a Attribute Option Combo:\n+     * 1. Check user has write access to the combo.\n+     *\n+     * @param reporter             error reporter instance\n+     * @param programStageInstance event to check user has write access to\n+     */\n+    void checkEventWriteAccess( ValidationErrorReporter reporter, ProgramStageInstance programStageInstance );\n \n-    void checkWriteCategoryOptionComboAccess( ValidationErrorReporter reporter, User user,\n+    /**\n+     * Loops trough all CategoryOptionCombo options and check that the importing user has write access to all of them.\n+     *\n+     * @param reporter            error reporter instance\n+     * @param categoryOptionCombo CategoryOptionCombo to check user has write access\n+     */\n+    void checkWriteCategoryOptionComboAccess( ValidationErrorReporter reporter,\n         CategoryOptionCombo categoryOptionCombo );\n }\n", "next_change": {"commit": "ea76fa86409613c9766d4508d65c88ac55c413c3", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/service/TrackerImportAccessManager.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/service/TrackerImportAccessManager.java\nindex 003117195a..865221fe09 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/service/TrackerImportAccessManager.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/service/TrackerImportAccessManager.java\n", "chunk": "@@ -84,54 +87,66 @@ public interface TrackerImportAccessManager\n      * <p>\n      * 1. Check user is in \"search scope\" of the program's org. unit.\n      *\n-     * @param reporter        error reporter instance\n-     * @param programInstance enrollment to check user has read access\n+     * @param reporter error reporter instance\n+     * @param program program to check user has read access\n+     * @param organisationUnit organisationUnit to check user has read access\n+     * @param trackedEntity trackedEntity to check user has read access\n      */\n-    void checkReadEnrollmentAccess( ValidationErrorReporter reporter, ProgramInstance programInstance );\n+    void checkReadEnrollmentAccess( ValidationErrorReporter reporter, Program program,\n+        OrganisationUnit organisationUnit, String trackedEntity );\n \n     /**\n-     * Check importing user has write access to enrollment.\n-     * 1. Check user has write access to program\n+     * Check importing user has write access to enrollment. 1. Check user has\n+     * write access to program\n      * <p>\n-     * 2 If program is registration, check :\n-     * a. Check that user has read access to program tei type.\n-     * b. Check has access to the tei - program combination.\n+     * 2 If program is registration, check : a. Check that user has read access\n+     * to program tei type. b. Check has access to the tei - program\n+     * combination.\n      *\n-     * @param reporter        error reporter instance\n-     * @param program         program to check user has write access\n-     * @param programInstance enrollment to check user has write access\n+     * @param reporter error reporter instance\n+     * @param program program to check user has write access\n+     * @param trackedEntity trackedEntity to check user has write access\n+     * @param organisationUnit organisationUnit to check user has write access\n      */\n     void checkWriteEnrollmentAccess( ValidationErrorReporter reporter, Program program,\n-        ProgramInstance programInstance );\n+        String trackedEntity, OrganisationUnit organisationUnit );\n \n     /**\n      * Check importing user has write access to event.\n      * <p>\n-     * Check user has access to either \"search scope or capture scope\" according to isCreatableInSearchScope()\n+     * Check user has access to either \"search scope or capture scope\" according\n+     * to isCreatableInSearchScope()\n      * <p>\n-     * Check program stage is registration.\n-     * If it is a registration check:\n-     * 1. Program stage write access\n-     * 2. Program read access\n-     * 3. Pprogram tei type. read access\n-     * 4. Tei - Program combination access\n+     * Check program stage is registration. If it is a registration check: 1.\n+     * Program stage write access 2. Program read access 3. Pprogram tei type.\n+     * read access 4. Tei - Program combination access\n      * <p>\n-     * If NOT a registration check:\n-     * 1. Program write access\n+     * If NOT a registration check: 1. Program write access\n      * <p>\n-     * If event has a Attribute Option Combo:\n-     * 1. Check user has write access to the combo.\n+     * If event has a Attribute Option Combo: 1. Check user has write access to\n+     * the combo.\n      *\n-     * @param reporter             error reporter instance\n-     * @param programStageInstance event to check user has write access to\n+     * @param reporter error reporter instance\n+     * @param programStage programStage to check user has write access to\n+     * @param orgUnit orgUnit to check user has write access to\n+     * @param categoryOptionCombo categoryOptionCombo to check user has write\n+     *        access to\n+     * @param trackedEntity trackedEntity to check user has write access to\n+     * @param isCreatableInSearchScope flag to decide between search scope or\n+     *        capture scope\n      */\n-    void checkEventWriteAccess( ValidationErrorReporter reporter, ProgramStageInstance programStageInstance );\n+    void checkEventWriteAccess( ValidationErrorReporter reporter, ProgramStage programStage,\n+        OrganisationUnit orgUnit,\n+        CategoryOptionCombo categoryOptionCombo,\n+        String trackedEntity, boolean isCreatableInSearchScope );\n \n     /**\n-     * Loops trough all CategoryOptionCombo options and check that the importing user has write access to all of them.\n+     * Loops trough all CategoryOptionCombo options and check that the importing\n+     * user has write access to all of them.\n      *\n-     * @param reporter            error reporter instance\n-     * @param categoryOptionCombo CategoryOptionCombo to check user has write access\n+     * @param reporter error reporter instance\n+     * @param categoryOptionCombo CategoryOptionCombo to check user has write\n+     *        access\n      */\n     void checkWriteCategoryOptionComboAccess( ValidationErrorReporter reporter,\n         CategoryOptionCombo categoryOptionCombo );\n", "next_change": {"commit": "2e2099d6db366b906110376b9a5ad1cead4b33ec", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/service/TrackerImportAccessManager.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/service/TrackerImportAccessManager.java\ndeleted file mode 100644\nindex 865221fe09..0000000000\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/service/TrackerImportAccessManager.java\n+++ /dev/null\n", "chunk": "@@ -1,153 +0,0 @@\n-/*\n- * Copyright (c) 2004-2021, University of Oslo\n- * All rights reserved.\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions are met:\n- * Redistributions of source code must retain the above copyright notice, this\n- * list of conditions and the following disclaimer.\n- *\n- * Redistributions in binary form must reproduce the above copyright notice,\n- * this list of conditions and the following disclaimer in the documentation\n- * and/or other materials provided with the distribution.\n- * Neither the name of the HISP project nor the names of its contributors may\n- * be used to endorse or promote products derived from this software without\n- * specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n- * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n- * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n- * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n- * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n- * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n- * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- */\n-package org.hisp.dhis.tracker.validation.service;\n-\n-import org.hisp.dhis.category.CategoryOptionCombo;\n-import org.hisp.dhis.organisationunit.OrganisationUnit;\n-import org.hisp.dhis.organisationunit.OrganisationUnitService;\n-import org.hisp.dhis.program.Program;\n-import org.hisp.dhis.program.ProgramStage;\n-import org.hisp.dhis.trackedentity.TrackedEntityType;\n-import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n-import org.hisp.dhis.user.User;\n-\n-/**\n- * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n- */\n-public interface TrackerImportAccessManager\n-{\n-    /**\n-     * Same as\n-     * {@link OrganisationUnitService#isInUserSearchHierarchyCached(User, OrganisationUnit)}\n-     * Checks the importing user has access to \"search hierarchy\" of the input\n-     * OrganisationUnit.\n-     *\n-     * @param reporter error reporter instance\n-     * @param orgUnit input orgUnit to validate against\n-     */\n-    void checkOrgUnitInSearchScope( ValidationErrorReporter reporter, OrganisationUnit orgUnit );\n-\n-    /**\n-     * Same as\n-     * {@link OrganisationUnitService#isInUserHierarchyCached(User, OrganisationUnit)}\n-     * Checks the importing user has access to \"capture hierarchy\" of the input\n-     * OrganisationUnit.\n-     *\n-     * @param reporter error reporter instance\n-     * @param orgUnit input orgUnit to validate against\n-     */\n-    void checkOrgUnitInCaptureScope( ValidationErrorReporter reporter, OrganisationUnit orgUnit );\n-\n-    /**\n-     * Checks the importing user has write access to the TrackedEntityType.\n-     *\n-     * @param reporter error reporter instance\n-     * @param trackedEntityType teiType to check importing user has write access\n-     *        to\n-     */\n-    void checkTeiTypeWriteAccess( ValidationErrorReporter reporter, TrackedEntityType trackedEntityType );\n-\n-    /**\n-     * Checks the importing user has read access enrollment.\n-     * <p>\n-     * If enrollment is a registration:\n-     * <p>\n-     * 1. Check has read access to program and if it is a registration program\n-     * <p>\n-     * 2. Check that user has read access to program tei type.\n-     * <p>\n-     * 3. Check has access to the tei - program combination.\n-     * <p>\n-     * If enrollment is a non registration:\n-     * <p>\n-     * 1. Check user is in \"search scope\" of the program's org. unit.\n-     *\n-     * @param reporter error reporter instance\n-     * @param program program to check user has read access\n-     * @param organisationUnit organisationUnit to check user has read access\n-     * @param trackedEntity trackedEntity to check user has read access\n-     */\n-    void checkReadEnrollmentAccess( ValidationErrorReporter reporter, Program program,\n-        OrganisationUnit organisationUnit, String trackedEntity );\n-\n-    /**\n-     * Check importing user has write access to enrollment. 1. Check user has\n-     * write access to program\n-     * <p>\n-     * 2 If program is registration, check : a. Check that user has read access\n-     * to program tei type. b. Check has access to the tei - program\n-     * combination.\n-     *\n-     * @param reporter error reporter instance\n-     * @param program program to check user has write access\n-     * @param trackedEntity trackedEntity to check user has write access\n-     * @param organisationUnit organisationUnit to check user has write access\n-     */\n-    void checkWriteEnrollmentAccess( ValidationErrorReporter reporter, Program program,\n-        String trackedEntity, OrganisationUnit organisationUnit );\n-\n-    /**\n-     * Check importing user has write access to event.\n-     * <p>\n-     * Check user has access to either \"search scope or capture scope\" according\n-     * to isCreatableInSearchScope()\n-     * <p>\n-     * Check program stage is registration. If it is a registration check: 1.\n-     * Program stage write access 2. Program read access 3. Pprogram tei type.\n-     * read access 4. Tei - Program combination access\n-     * <p>\n-     * If NOT a registration check: 1. Program write access\n-     * <p>\n-     * If event has a Attribute Option Combo: 1. Check user has write access to\n-     * the combo.\n-     *\n-     * @param reporter error reporter instance\n-     * @param programStage programStage to check user has write access to\n-     * @param orgUnit orgUnit to check user has write access to\n-     * @param categoryOptionCombo categoryOptionCombo to check user has write\n-     *        access to\n-     * @param trackedEntity trackedEntity to check user has write access to\n-     * @param isCreatableInSearchScope flag to decide between search scope or\n-     *        capture scope\n-     */\n-    void checkEventWriteAccess( ValidationErrorReporter reporter, ProgramStage programStage,\n-        OrganisationUnit orgUnit,\n-        CategoryOptionCombo categoryOptionCombo,\n-        String trackedEntity, boolean isCreatableInSearchScope );\n-\n-    /**\n-     * Loops trough all CategoryOptionCombo options and check that the importing\n-     * user has write access to all of them.\n-     *\n-     * @param reporter error reporter instance\n-     * @param categoryOptionCombo CategoryOptionCombo to check user has write\n-     *        access\n-     */\n-    void checkWriteCategoryOptionComboAccess( ValidationErrorReporter reporter,\n-        CategoryOptionCombo categoryOptionCombo );\n-}\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "message": "Merge commit", "committedDate": null}, {"oid": "d095f2d4cf9aaac1e9aa973d4da6aa2f96104cc8", "committedDate": "2020-11-11 13:49:13 +0100", "message": "fix: allow validation to reference entities in the payload (#6617)"}, {"oid": "276f2354d945b8f34a5f2fd64681b28476c049e6", "committedDate": "2020-11-25 08:51:52 +0100", "message": "chore: Remove unused imports and fix code style issues (#6746)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "7d032be663a1d9444d4bc1dbf3bc20ff0f861ec1", "committedDate": "2021-05-26 16:49:59 +0200", "message": "refactor: Clean up integration tests in the new importer [TECH-589] (#8076)"}, {"oid": "314988e32cd6b86d7010c4a46e17fd3c3d1b9cc3", "committedDate": "2021-08-31 22:03:14 +0200", "message": "fix: ownership validation and preheating in new tracker importer [DHIS2-11223] (#8158)"}, {"oid": "e72a194b035dc4f76df0c9cdaf7701a299b1558a", "committedDate": "2021-10-05 13:25:05 +0200", "message": "fix: Allow TEI updates in search scope [DHIS2-11910] (2.38) (#8921)"}, {"oid": "2e2099d6db366b906110376b9a5ad1cead4b33ec", "committedDate": "2021-12-22 15:36:47 +0100", "message": "chore: inline ImportAccessManager TECH-880 (#9524)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE4NTg5OA==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446185898", "body": "Please add some Javadoc explaining what are this class responsibilities.", "bodyText": "Please add some Javadoc explaining what are this class responsibilities.", "bodyHTML": "<p dir=\"auto\">Please add some Javadoc explaining what are this class responsibilities.</p>", "author": "luciano-fiandesio", "createdAt": "2020-06-26T13:32:06Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/ValidateAndCommit.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package org.hisp.dhis.tracker.validation;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\n+ */\n+\n+import lombok.Builder;\n+import lombok.Data;\n+import lombok.extern.slf4j.Slf4j;\n+import org.hisp.dhis.tracker.TrackerImportStrategy;\n+import org.hisp.dhis.tracker.bundle.TrackerBundle;\n+import org.hisp.dhis.tracker.bundle.TrackerBundleParams;\n+import org.hisp.dhis.tracker.bundle.TrackerBundleService;\n+import org.hisp.dhis.tracker.report.TrackerBundleReport;\n+import org.hisp.dhis.tracker.report.TrackerValidationReport;\n+\n+@Data\n+@Builder\n+@Slf4j\n+public class ValidateAndCommit", "originalCommit": "ad5654dcf03fa2ccb82adad686d9e13dde5a93b0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "d2feae85e2920e2ecd5cce7d310e926ae797cd2c", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/ValidateAndCommit.java b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/ValidateAndCommitTestUnit.java\nsimilarity index 88%\nrename from dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/ValidateAndCommit.java\nrename to dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/ValidateAndCommitTestUnit.java\nindex 4a44119517..7b6ca4f9fb 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/ValidateAndCommit.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/ValidateAndCommitTestUnit.java\n", "chunk": "@@ -39,10 +39,13 @@ import org.hisp.dhis.tracker.bundle.TrackerBundleService;\n import org.hisp.dhis.tracker.report.TrackerBundleReport;\n import org.hisp.dhis.tracker.report.TrackerValidationReport;\n \n+/**\n+ * Convenience class for calling creating bundle and calling validation and commit in one \"unit of work\"\n+ */\n @Data\n @Builder\n @Slf4j\n-public class ValidateAndCommit\n+public class ValidateAndCommitTestUnit\n {\n     private TrackerValidationService trackerValidationService;\n \n", "next_change": null}]}, "revised_code_in_main": {"commit": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/ValidateAndCommit.java b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/ValidateAndCommitTestUnit.java\nsimilarity index 87%\nrename from dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/ValidateAndCommit.java\nrename to dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/ValidateAndCommitTestUnit.java\nindex 4a44119517..e91cb956ac 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/ValidateAndCommit.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/ValidateAndCommitTestUnit.java\n", "chunk": "@@ -39,10 +39,15 @@ import org.hisp.dhis.tracker.bundle.TrackerBundleService;\n import org.hisp.dhis.tracker.report.TrackerBundleReport;\n import org.hisp.dhis.tracker.report.TrackerValidationReport;\n \n+/**\n+ * Convenience class for creating a tracker bundle and calling validation and commit.\n+ *\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n @Data\n @Builder\n @Slf4j\n-public class ValidateAndCommit\n+public class ValidateAndCommitTestUnit\n {\n     private TrackerValidationService trackerValidationService;\n \n", "next_change": null}]}, "commits_in_main": [{"oid": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "message": "Merge commit", "committedDate": null}]}, {"oid": "c882c19214b4717357e0cb2784acf3e0e66ebeaa", "url": "https://github.com/dhis2/dhis2-core/commit/c882c19214b4717357e0cb2784acf3e0e66ebeaa", "message": "* Temp commit for perf testing\n\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>", "committedDate": "2020-06-28T04:52:42Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYxMzEyMQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446613121", "body": "This is a very small thing.. but we generally prefer using \"metadata\" now, and not \"metaData\", just for consitency", "bodyText": "This is a very small thing.. but we generally prefer using \"metadata\" now, and not \"metaData\", just for consitency", "bodyHTML": "<p dir=\"auto\">This is a very small thing.. but we generally prefer using \"metadata\" now, and not \"metaData\", just for consitency</p>", "author": "mortenoh", "createdAt": "2020-06-28T07:28:42Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/TeTaValidationTest.java", "diffHunk": "@@ -0,0 +1,574 @@\n+package org.hisp.dhis.tracker.validation;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\n+ */\n+\n+import org.hisp.dhis.H2DhisConfigurationProvider;\n+import org.hisp.dhis.common.IdentifiableObject;\n+import org.hisp.dhis.common.IdentifiableObjectManager;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundle;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundleMode;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundleParams;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundleService;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundleValidationService;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.feedback.ObjectBundleValidationReport;\n+import org.hisp.dhis.encryption.EncryptionStatus;\n+import org.hisp.dhis.external.conf.DhisConfigurationProvider;\n+import org.hisp.dhis.feedback.ErrorReport;\n+import org.hisp.dhis.fileresource.FileResource;\n+import org.hisp.dhis.fileresource.FileResourceDomain;\n+import org.hisp.dhis.fileresource.FileResourceService;\n+import org.hisp.dhis.importexport.ImportStrategy;\n+import org.hisp.dhis.render.RenderFormat;\n+import org.hisp.dhis.render.RenderService;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+import org.hisp.dhis.trackedentityattributevalue.TrackedEntityAttributeValue;\n+import org.hisp.dhis.trackedentityattributevalue.TrackedEntityAttributeValueService;\n+import org.hisp.dhis.tracker.bundle.TrackerBundle;\n+import org.hisp.dhis.tracker.bundle.TrackerBundleParams;\n+import org.hisp.dhis.tracker.bundle.TrackerBundleService;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.TrackerValidationReport;\n+import org.hisp.dhis.user.User;\n+import org.hisp.dhis.user.UserService;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.io.ClassPathResource;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasItem;\n+import static org.hamcrest.Matchers.hasProperty;\n+import static org.hamcrest.core.Every.everyItem;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+public class TeTaValidationTest\n+    extends AbstractImportValidationTest\n+{\n+    @Autowired\n+    private DhisConfigurationProvider dhisConfigurationProvider;\n+\n+    @Autowired\n+    private ObjectBundleService objectBundleService;\n+\n+    @Autowired\n+    private ObjectBundleValidationService objectBundleValidationService;\n+\n+    @Autowired\n+    private RenderService _renderService;\n+\n+    @Autowired\n+    private UserService _userService;\n+\n+    @Autowired\n+    private TrackerBundleService trackerBundleService;\n+\n+    @Autowired\n+    private TrackedEntityAttributeValueService trackedEntityAttributeValueService;\n+\n+    @Autowired\n+    private IdentifiableObjectManager manager;\n+\n+    @Autowired\n+    private FileResourceService fileResourceService;\n+\n+    public void setupMetaData( String metaDataFile )", "originalCommit": "ad5654dcf03fa2ccb82adad686d9e13dde5a93b0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYyNTg3Mw==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446625873", "bodyText": "Replaced all MetaData with metadata", "author": "netroms", "createdAt": "2020-06-28T09:25:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYxMzEyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "c5a94c3d798ab59a16b994801255c4ac2631887b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/TeTaValidationTest.java b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/TeTaValidationTest.java\nindex 827b328d15..7f44a19f59 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/TeTaValidationTest.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/TeTaValidationTest.java\n", "chunk": "@@ -108,7 +108,7 @@ public class TeTaValidationTest\n     @Autowired\n     private FileResourceService fileResourceService;\n \n-    public void setupMetaData( String metaDataFile )\n+    public void setupMetadata( String metaDataFile )\n         throws IOException\n     {\n         renderService = _renderService;\n", "next_change": {"commit": "5bd4c4a413adbc1e587b0e1194af3da352084268", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/TeTaValidationTest.java b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/TeTaValidationTest.java\nindex 7f44a19f59..0550c886fd 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/TeTaValidationTest.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/TeTaValidationTest.java\n", "chunk": "@@ -108,7 +108,7 @@ public class TeTaValidationTest\n     @Autowired\n     private FileResourceService fileResourceService;\n \n-    public void setupMetadata( String metaDataFile )\n+    private void setupMetadata( String metaDataFile )\n         throws IOException\n     {\n         renderService = _renderService;\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/TeTaValidationTest.java b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/TeTaValidationTest.java\nindex 827b328d15..0550c886fd 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/TeTaValidationTest.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/TeTaValidationTest.java\n", "chunk": "@@ -108,7 +108,7 @@ public class TeTaValidationTest\n     @Autowired\n     private FileResourceService fileResourceService;\n \n-    public void setupMetaData( String metaDataFile )\n+    private void setupMetadata( String metaDataFile )\n         throws IOException\n     {\n         renderService = _renderService;\n", "next_change": {"commit": "3e799d196b8f73ad216ea100a07ddd5f7dfc53e0", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/TeTaValidationTest.java b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/TeTaValidationTest.java\nindex 0550c886fd..6f5859e8dc 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/TeTaValidationTest.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/TeTaValidationTest.java\n", "chunk": "@@ -108,35 +78,11 @@ public class TeTaValidationTest\n     @Autowired\n     private FileResourceService fileResourceService;\n \n-    private void setupMetadata( String metaDataFile )\n-        throws IOException\n-    {\n-        renderService = _renderService;\n-        userService = _userService;\n-\n-        Map<Class<? extends IdentifiableObject>, List<IdentifiableObject>> metadata = renderService.fromMetadata(\n-            new ClassPathResource( metaDataFile ).getInputStream(),\n-            RenderFormat.JSON );\n-\n-        ObjectBundleParams params = new ObjectBundleParams();\n-        params.setObjectBundleMode( ObjectBundleMode.COMMIT );\n-        params.setImportStrategy( ImportStrategy.CREATE );\n-        params.setObjects( metadata );\n-\n-        ObjectBundle bundle = objectBundleService.create( params );\n-        ObjectBundleValidationReport validationReport = objectBundleValidationService.validate( bundle );\n-        List<ErrorReport> errorReports = validationReport.getErrorReports();\n-        assertTrue( errorReports.isEmpty() );\n-\n-        objectBundleService.commit( bundle );\n-    }\n-\n     @Test\n     public void testTrackedEntityProgramAttributeFileResourceValue()\n         throws IOException\n     {\n-        String metaDataFile = \"tracker/validations/te-program_with_tea_fileresource_metadata.json\";\n-        setupMetadata( metaDataFile );\n+        setUpMetadata( \"tracker/validations/te-program_with_tea_fileresource_metadata.json\" );\n \n         FileResource fileResource = new FileResource( \"test.pdf\", \"application/pdf\",\n             0, \"d41d8cd98f00b204e9800998ecf8427e\", FileResourceDomain.DOCUMENT );\n", "next_change": {"commit": "22d5da9d9a812b02eb5acd643112a6b050b5d63c", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/TeTaValidationTest.java b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/TeTaValidationTest.java\nindex 6f5859e8dc..ba7be84585 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/TeTaValidationTest.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/TeTaValidationTest.java\n", "chunk": "@@ -79,310 +80,173 @@ public class TeTaValidationTest\n     private FileResourceService fileResourceService;\n \n     @Test\n-    public void testTrackedEntityProgramAttributeFileResourceValue()\n+    void testTrackedEntityProgramAttributeFileResourceValue()\n         throws IOException\n     {\n         setUpMetadata( \"tracker/validations/te-program_with_tea_fileresource_metadata.json\" );\n-\n-        FileResource fileResource = new FileResource( \"test.pdf\", \"application/pdf\",\n-            0, \"d41d8cd98f00b204e9800998ecf8427e\", FileResourceDomain.DOCUMENT );\n+        FileResource fileResource = new FileResource( \"test.pdf\", \"application/pdf\", 0,\n+            \"d41d8cd98f00b204e9800998ecf8427e\", FileResourceDomain.DOCUMENT );\n         fileResource.setUid( \"Jzf6hHNP7jx\" );\n         File file = File.createTempFile( \"file-resource\", \"test\" );\n-\n         fileResourceService.saveFileResource( fileResource, file );\n         assertFalse( fileResource.isAssigned() );\n-\n-        validateAndCommit( \"tracker/validations/te-program_with_tea_fileresource_data.json\" );\n-\n+        TrackerImportParams trackerImportParams = createBundleFromJson(\n+            \"tracker/validations/te-program_with_tea_fileresource_data.json\" );\n+        trackerImportService.importTracker( trackerImportParams );\n         List<TrackedEntityInstance> trackedEntityInstances = manager.getAll( TrackedEntityInstance.class );\n         assertEquals( 1, trackedEntityInstances.size() );\n-\n         TrackedEntityInstance trackedEntityInstance = trackedEntityInstances.get( 0 );\n-\n         List<TrackedEntityAttributeValue> attributeValues = trackedEntityAttributeValueService\n-            .getTrackedEntityAttributeValues(\n-                trackedEntityInstance );\n-\n+            .getTrackedEntityAttributeValues( trackedEntityInstance );\n         assertEquals( 1, attributeValues.size() );\n-\n         fileResource = fileResourceService.getFileResource( fileResource.getUid() );\n         assertTrue( fileResource.isAssigned() );\n     }\n \n     @Test\n-    public void testFileAlreadyAssign()\n+    void testFileAlreadyAssign()\n         throws IOException\n     {\n         setUpMetadata( \"tracker/validations/te-program_with_tea_fileresource_metadata.json\" );\n-\n-        FileResource fileResource = new FileResource( \"test.pdf\", \"application/pdf\",\n-            0, \"d41d8cd98f00b204e9800998ecf8427e\", FileResourceDomain.DOCUMENT );\n+        FileResource fileResource = new FileResource( \"test.pdf\", \"application/pdf\", 0,\n+            \"d41d8cd98f00b204e9800998ecf8427e\", FileResourceDomain.DOCUMENT );\n         fileResource.setUid( \"Jzf6hHNP7jx\" );\n         File file = File.createTempFile( \"file-resource\", \"test\" );\n-\n         fileResourceService.saveFileResource( fileResource, file );\n         assertFalse( fileResource.isAssigned() );\n-\n-        validateAndCommit( \"tracker/validations/te-program_with_tea_fileresource_data.json\" );\n-\n+        TrackerImportParams trackerImportParams = createBundleFromJson(\n+            \"tracker/validations/te-program_with_tea_fileresource_data.json\" );\n+        trackerImportService.importTracker( trackerImportParams );\n         List<TrackedEntityInstance> trackedEntityInstances = manager.getAll( TrackedEntityInstance.class );\n         assertEquals( 1, trackedEntityInstances.size() );\n         TrackedEntityInstance trackedEntityInstance = trackedEntityInstances.get( 0 );\n-\n         List<TrackedEntityAttributeValue> attributeValues = trackedEntityAttributeValueService\n-            .getTrackedEntityAttributeValues(\n-                trackedEntityInstance );\n-\n+            .getTrackedEntityAttributeValues( trackedEntityInstance );\n         assertEquals( 1, attributeValues.size() );\n-\n         fileResource = fileResourceService.getFileResource( fileResource.getUid() );\n         assertTrue( fileResource.isAssigned() );\n-\n-        TrackerValidationReport report = validate( \"tracker/validations/te-program_with_tea_fileresource_data.json\" );\n-\n-        assertEquals( 1, report.getErrorReports().size() );\n-\n-        assertThat( report.getErrorReports(),\n+        trackerImportParams = createBundleFromJson( \"tracker/validations/te-program_with_tea_fileresource_data2.json\" );\n+        TrackerImportReport trackerImportReport = trackerImportService.importTracker( trackerImportParams );\n+        assertEquals( 1, trackerImportReport.getValidationReport().getErrorReports().size() );\n+        assertThat( trackerImportReport.getValidationReport().getErrorReports(),\n             everyItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1009 ) ) ) );\n     }\n \n     @Test\n-    public void testNoFileRef()\n+    void testNoFileRef()\n         throws IOException\n     {\n         setUpMetadata( \"tracker/validations/te-program_with_tea_fileresource_metadata.json\" );\n-\n-        TrackerImportParams trackerImportParams = fromJson(\n-            \"tracker/validations/te-program_with_tea_fileresource_data.json\", userService.getUser( ADMIN_USER_UID ) );\n-\n-        TrackerBundle trackerBundle = trackerBundleService.create( trackerImportParams );\n-\n-        TrackerValidationReport report = trackerValidationService.validate( trackerBundle );\n-        assertEquals( 1, report.getErrorReports().size() );\n-        assertThat( report.getErrorReports(),\n+        TrackerImportParams trackerImportParams = createBundleFromJson(\n+            \"tracker/validations/te-program_with_tea_fileresource_data.json\" );\n+        TrackerImportReport trackerImportReport = trackerImportService.importTracker( trackerImportParams );\n+        assertEquals( 1, trackerImportReport.getValidationReport().getErrorReports().size() );\n+        assertThat( trackerImportReport.getValidationReport().getErrorReports(),\n             everyItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1084 ) ) ) );\n-\n-        trackerBundleService.commit( trackerBundle );\n-\n         List<TrackedEntityInstance> trackedEntityInstances = manager.getAll( TrackedEntityInstance.class );\n-        assertEquals( 1, trackedEntityInstances.size() );\n-\n-        TrackedEntityInstance trackedEntityInstance = trackedEntityInstances.get( 0 );\n-\n-        List<TrackedEntityAttributeValue> attributeValues = trackedEntityAttributeValueService\n-            .getTrackedEntityAttributeValues(\n-                trackedEntityInstance );\n-\n-        assertEquals( 1, attributeValues.size() );\n-    }\n-\n-    @Test\n-    public void testGeneratedValuePatternDoNotMatch()\n-        throws IOException\n-    {\n-        setUpMetadata( \"tracker/validations/te-program_with_tea_fileresource_metadata.json\" );\n-\n-        TrackerImportParams trackerImportParams = fromJson(\n-            \"tracker/validations/te-program_with_tea_generated_data.json\", userService.getUser( ADMIN_USER_UID ) );\n-\n-        TrackerBundle trackerBundle = trackerBundleService.create( trackerImportParams );\n-\n-        TrackerValidationReport report = trackerValidationService.validate( trackerBundle );\n-        assertEquals( 1, report.getErrorReports().size() );\n-        printReport( report );\n-        assertThat( report.getErrorReports(),\n-            everyItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1008 ) ) ) );\n-\n-        trackerBundleService.commit( trackerBundle );\n-\n-        List<TrackedEntityInstance> trackedEntityInstances = manager.getAll( TrackedEntityInstance.class );\n-        assertEquals( 1, trackedEntityInstances.size() );\n-\n-        TrackedEntityInstance trackedEntityInstance = trackedEntityInstances.get( 0 );\n-\n-        List<TrackedEntityAttributeValue> attributeValues = trackedEntityAttributeValueService\n-            .getTrackedEntityAttributeValues(\n-                trackedEntityInstance );\n-\n-        assertEquals( 1, attributeValues.size() );\n+        assertEquals( 0, trackedEntityInstances.size() );\n     }\n \n     @Test\n-    public void testTeaMaxTextValueLength()\n+    void testTeaMaxTextValueLength()\n         throws IOException\n     {\n         setUpMetadata( \"tracker/validations/te-program_with_tea_fileresource_metadata.json\" );\n-\n-        TrackerValidationReport report = validate( \"tracker/validations/te-program_with_tea_too_long_text_value.json\" );\n-\n-        assertEquals( 1, report.getErrorReports().size() );\n-\n-        printReport( report );\n-\n-        assertThat( report.getErrorReports(),\n+        TrackerImportParams trackerImportParams = createBundleFromJson(\n+            \"tracker/validations/te-program_with_tea_too_long_text_value.json\" );\n+        TrackerImportReport trackerImportReport = trackerImportService.importTracker( trackerImportParams );\n+        assertEquals( 1, trackerImportReport.getValidationReport().getErrorReports().size() );\n+        assertThat( trackerImportReport.getValidationReport().getErrorReports(),\n             everyItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1077 ) ) ) );\n     }\n \n     @Test\n-    public void testEncryptedAttrFail()\n+    void testEncryptedAttrFail()\n         throws IOException\n     {\n         setUpMetadata( \"tracker/validations/te-program_with_tea_encryption_metadata.json\" );\n-\n-        TrackerImportParams trackerImportParams = fromJson(\n-            \"tracker/validations/te-program_with_tea_encryption_data.json\", userService.getUser( ADMIN_USER_UID ) );\n-\n-        TrackerBundle trackerBundle = trackerBundleService.create( trackerImportParams );\n-\n+        TrackerImportParams trackerImportParams = createBundleFromJson(\n+            \"tracker/validations/te-program_with_tea_encryption_data.json\" );\n         H2DhisConfigurationProvider dhisConfigurationProvider = (H2DhisConfigurationProvider) this.dhisConfigurationProvider;\n         dhisConfigurationProvider.setEncryptionStatus( EncryptionStatus.MISSING_ENCRYPTION_PASSWORD );\n-\n-        TrackerValidationReport report = trackerValidationService.validate( trackerBundle );\n-\n-        assertEquals( 1, report.getErrorReports().size() );\n-        printReport( report );\n-\n-        assertThat( report.getErrorReports(),\n+        TrackerImportReport trackerImportReport = trackerImportService.importTracker( trackerImportParams );\n+        assertEquals( 1, trackerImportReport.getValidationReport().getErrorReports().size() );\n+        assertThat( trackerImportReport.getValidationReport().getErrorReports(),\n             everyItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1112 ) ) ) );\n     }\n \n     @Test\n-    public void testUniqueFailInOrgUnit()\n+    void testUniqueFailInOrgUnit()\n         throws IOException\n     {\n         setUpMetadata( \"tracker/validations/te-program_with_tea_encryption_metadata.json\" );\n-\n-        TrackerImportParams trackerImportParams = fromJson(\n-            \"tracker/validations/te-program_with_tea_unique_data_in_country.json\",\n-            userService.getUser( ADMIN_USER_UID ) );\n-\n-        trackerBundleService.commit( trackerBundleService.create( trackerImportParams ) );\n-\n-        TrackerValidationReport report = validate(\n-            \"tracker/validations/te-program_with_tea_unique_data_in_country.json\",\n-            TrackerImportStrategy.CREATE_AND_UPDATE );\n-\n-        assertEquals( 0, report.getErrorReports().size() );\n-        printReport( report );\n-\n-        report = validate( \"tracker/validations/te-program_with_tea_unique_data_in_region.json\" );\n-        assertEquals( 0, report.getErrorReports().size() );\n-        printReport( report );\n+        TrackerImportParams trackerImportParams = createBundleFromJson(\n+            \"tracker/validations/te-program_with_tea_unique_data_in_country.json\" );\n+        trackerImportService.importTracker( trackerImportParams );\n+        trackerImportParams = createBundleFromJson(\n+            \"tracker/validations/te-program_with_tea_unique_data_in_country.json\" );\n+        trackerImportParams.setImportStrategy( TrackerImportStrategy.CREATE_AND_UPDATE );\n+        TrackerImportReport trackerImportReport = trackerImportService.importTracker( trackerImportParams );\n+        assertEquals( 0, trackerImportReport.getValidationReport().getErrorReports().size() );\n+        trackerImportParams = createBundleFromJson(\n+            \"tracker/validations/te-program_with_tea_unique_data_in_region.json\" );\n+        trackerImportReport = trackerImportService.importTracker( trackerImportParams );\n+        assertEquals( 0, trackerImportReport.getValidationReport().getErrorReports().size() );\n     }\n \n     @Test\n-    public void testUniqueFail()\n+    void testUniqueFail()\n         throws IOException\n     {\n         setUpMetadata( \"tracker/validations/te-program_with_tea_encryption_metadata.json\" );\n-\n-        TrackerImportParams trackerImportParams = fromJson(\n-            \"tracker/validations/te-program_with_tea_unique_data.json\",\n-            userService.getUser( ADMIN_USER_UID ) );\n-        TrackerBundle trackerBundle = trackerBundleService.create( trackerImportParams );\n-\n-        trackerBundleService.commit( trackerBundle );\n-\n-        TrackerValidationReport report = validate( \"tracker/validations/te-program_with_tea_unique_data.json\" );\n-\n-        assertEquals( 1, report.getErrorReports().size() );\n-\n-        printReport( report );\n-\n-        assertThat( report.getErrorReports(),\n+        TrackerImportParams trackerImportParams = createBundleFromJson(\n+            \"tracker/validations/te-program_with_tea_unique_data.json\" );\n+        TrackerImportReport trackerImportReport = trackerImportService.importTracker( trackerImportParams );\n+        trackerImportParams = createBundleFromJson( \"tracker/validations/te-program_with_tea_unique_data2.json\" );\n+        trackerImportReport = trackerImportService.importTracker( trackerImportParams );\n+        assertEquals( 1, trackerImportReport.getValidationReport().getErrorReports().size() );\n+        assertThat( trackerImportReport.getValidationReport().getErrorReports(),\n             everyItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1064 ) ) ) );\n     }\n \n     @Test\n-    public void testTeaInvalidFormat()\n+    void testTeaInvalidFormat()\n         throws IOException\n     {\n         setUpMetadata( \"tracker/validations/te-program_with_tea_fileresource_metadata.json\" );\n-\n-        TrackerValidationReport report = validate(\n+        TrackerImportParams trackerImportParams = createBundleFromJson(\n             \"tracker/validations/te-program_with_tea_invalid_format_value.json\" );\n-\n-        assertEquals( 1, report.getErrorReports().size() );\n-\n-        printReport( report );\n-\n-        assertThat( report.getErrorReports(),\n+        TrackerImportReport trackerImportReport = trackerImportService.importTracker( trackerImportParams );\n+        assertEquals( 1, trackerImportReport.getValidationReport().getErrorReports().size() );\n+        assertThat( trackerImportReport.getValidationReport().getErrorReports(),\n             everyItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1085 ) ) ) );\n     }\n \n     @Test\n-    public void testTeaInvalidImage()\n+    void testTeaInvalidImage()\n         throws IOException\n     {\n         setUpMetadata( \"tracker/validations/te-program_with_tea_fileresource_metadata.json\" );\n-\n-        TrackerValidationReport report = validate(\n+        TrackerImportParams trackerImportParams = createBundleFromJson(\n             \"tracker/validations/te-program_with_tea_invalid_image_value.json\" );\n-\n-        assertEquals( 2, report.getErrorReports().size() );\n-        printReport( report );\n-\n-        assertThat( report.getErrorReports(),\n+        TrackerImportReport trackerImportReport = trackerImportService.importTracker( trackerImportParams );\n+        assertEquals( 2, trackerImportReport.getValidationReport().getErrorReports().size() );\n+        assertThat( trackerImportReport.getValidationReport().getErrorReports(),\n             hasItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1085 ) ) ) );\n-\n-        assertThat( report.getErrorReports(),\n+        assertThat( trackerImportReport.getValidationReport().getErrorReports(),\n             hasItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1007 ) ) ) );\n     }\n \n     @Test\n-    public void testTeaIsNull()\n+    void testTeaIsNull()\n         throws IOException\n     {\n-        setUpMetadata( \"tracker/validations/te-program_with_tea_fileresource_metadata.json\" );\n-\n-        TrackerValidationReport report = validate(\n+        setUpMetadata( \"tracker/validations/te-program-with-tea-mandatory-image.json\" );\n+        TrackerImportParams trackerImportParams = createBundleFromJson(\n             \"tracker/validations/te-program_with_tea_invalid_value_isnull.json\" );\n-\n-        assertEquals( 1, report.getErrorReports().size() );\n-\n-        printReport( report );\n-\n-        assertThat( report.getErrorReports(),\n+        TrackerImportReport trackerImportReport = trackerImportService.importTracker( trackerImportParams );\n+        assertEquals( 1, trackerImportReport.getValidationReport().getErrorReports().size() );\n+        assertThat( trackerImportReport.getValidationReport().getErrorReports(),\n             hasItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1076 ) ) ) );\n     }\n-\n-    private TrackerValidationReport validate( String path )\n-        throws IOException\n-    {\n-        TrackerImportParams trackerImportParams = fromJson(\n-            path,\n-            userService.getUser( ADMIN_USER_UID ) );\n-\n-        TrackerBundle trackerBundle = trackerBundleService.create( trackerImportParams );\n-\n-        return trackerValidationService.validate( trackerBundle );\n-    }\n-\n-    private TrackerValidationReport validate( String path, TrackerImportStrategy importStrategy )\n-        throws IOException\n-    {\n-        TrackerImportParams trackerImportParams = fromJson(\n-            path,\n-            userService.getUser( ADMIN_USER_UID ) );\n-        trackerImportParams.setImportStrategy( importStrategy );\n-\n-        TrackerBundle trackerBundle = trackerBundleService.create( trackerImportParams );\n-\n-        return trackerValidationService.validate( trackerBundle );\n-    }\n-\n-    private void validateAndCommit( String path )\n-        throws IOException\n-    {\n-        TrackerImportParams trackerImportParams = fromJson(\n-            path,\n-            userService.getUser( ADMIN_USER_UID ) );\n-\n-        TrackerBundle trackerBundle = trackerBundleService.create( trackerImportParams );\n-        TrackerValidationReport report = trackerValidationService.validate( trackerBundle );\n-\n-        assertEquals( 0, report.getErrorReports().size() );\n-\n-        trackerBundleService.commit( trackerBundleService.create( trackerImportParams ) );\n-    }\n-}\n\\ No newline at end of file\n+}\n", "next_change": {"commit": "7c0131dfcfbf72dad27dc5f0a3f6a776e286c79a", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/TeTaValidationTest.java b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/TeTaValidationTest.java\nindex ba7be84585..d54ce81840 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/TeTaValidationTest.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/TeTaValidationTest.java\n", "chunk": "@@ -245,8 +245,8 @@ class TeTaValidationTest extends AbstractImportValidationTest\n         TrackerImportParams trackerImportParams = createBundleFromJson(\n             \"tracker/validations/te-program_with_tea_invalid_value_isnull.json\" );\n         TrackerImportReport trackerImportReport = trackerImportService.importTracker( trackerImportParams );\n-        assertEquals( 1, trackerImportReport.getValidationReport().getErrorReports().size() );\n-        assertThat( trackerImportReport.getValidationReport().getErrorReports(),\n+        assertEquals( 1, trackerImportReport.getValidationReport().getErrors().size() );\n+        assertThat( trackerImportReport.getValidationReport().getErrors(),\n             hasItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1076 ) ) ) );\n     }\n }\n", "next_change": {"commit": "2f44bf54a94fca80ec8bef3a160d403665973bed", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/TeTaValidationTest.java b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/TeTaValidationTest.java\nindex d54ce81840..97c138bcf2 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/TeTaValidationTest.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/TeTaValidationTest.java\n", "chunk": "@@ -241,8 +188,7 @@ class TeTaValidationTest extends AbstractImportValidationTest\n     void testTeaIsNull()\n         throws IOException\n     {\n-        setUpMetadata( \"tracker/validations/te-program-with-tea-mandatory-image.json\" );\n-        TrackerImportParams trackerImportParams = createBundleFromJson(\n+        TrackerImportParams trackerImportParams = fromJson(\n             \"tracker/validations/te-program_with_tea_invalid_value_isnull.json\" );\n         TrackerImportReport trackerImportReport = trackerImportService.importTracker( trackerImportParams );\n         assertEquals( 1, trackerImportReport.getValidationReport().getErrors().size() );\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "message": "Merge commit", "committedDate": null}, {"oid": "cb2ee65c0210c0d4b2bd8851789da8d4adfaf04d", "committedDate": "2020-09-07 10:28:21 +0200", "message": "fix: [DHIS2-9287] Fix the stats in the import summary (#6062)"}, {"oid": "e1260b5e8fceb13c2883754236a34cdd652e1c1c", "committedDate": "2020-10-20 14:00:34 +0200", "message": "refactor: Load in the preheat all the data needed for uniqueness attr\u2026 (#6397)"}, {"oid": "3e799d196b8f73ad216ea100a07ddd5f7dfc53e0", "committedDate": "2020-11-30 16:37:14 +0100", "message": "fix: remove long running transaction during Tracker Import (#6782)"}, {"oid": "3ab88a5f4623a8c749246bedef34fcb926d185cb", "committedDate": "2020-12-08 10:40:14 +0100", "message": "fix: [DHIS2-7310] Move rule engine call and validations after bundle validation (#6843)"}, {"oid": "5e4669b4c89c809989ea600900735dd71baa86e2", "committedDate": "2020-12-23 14:00:18 +0700", "message": "feat: Upgrade Hibernate  (#6939)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "c0e9b28f4609a84d1287d93bc65f81321e00d78b", "committedDate": "2021-03-30 13:22:16 +0200", "message": "refactor: Removing uid field from tracker entities [TECH-579] (#7790)"}, {"oid": "60fe241badad5b1463bc3991eff2927abae32644", "committedDate": "2021-04-21 13:49:15 +0200", "message": "fix: [DHIS2-10797] Fix remove null values for tracker attributes and data values 2.37 (#7880)"}, {"oid": "1e75d833b15ed65163451abb7d4dfb99831484de", "committedDate": "2021-04-26 09:14:51 +0200", "message": "[TECH-454] DB access in TrackedEntityAttributeValidationHook 2.37 (#7905)"}, {"oid": "20dfefe359779d7e1c1921ba920465227e72f071", "committedDate": "2021-05-25 12:55:24 +0200", "message": "fix: Remove validations from objects deletion service in new tracker importer [DHIS2-10789] (#8053)"}, {"oid": "22d5da9d9a812b02eb5acd643112a6b050b5d63c", "committedDate": "2021-12-16 13:19:38 +0100", "message": "chore: migrate tests to JUnit 5 (#9467)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "7c0131dfcfbf72dad27dc5f0a3f6a776e286c79a", "committedDate": "2022-01-11 17:47:56 +0100", "message": "chore: make TrackerValidationReport add methods fluent and name Timing TECH-880 (#9601)"}, {"oid": "d99da048b6427aa16b080ab0a0e25eda4a2a0f96", "committedDate": "2022-05-09 13:53:18 +0200", "message": "feat: Refactor getCurrentUser() to return DHIS2 User object 2 (#10600)"}, {"oid": "2f44bf54a94fca80ec8bef3a160d403665973bed", "committedDate": "2022-05-23 06:02:37 +0200", "message": "chore: Clean up user management in tracker tests [TECH-890] (#10862)"}, {"oid": "6e83eba877030575456f919de1bce55fcae8e517", "committedDate": "2022-06-24 10:01:46 +0200", "message": "test: move all integration tests into own module TECH-1209 (#11148)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYxMzQwMw==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446613403", "body": "newline", "bodyText": "newline", "bodyHTML": "<p dir=\"auto\">newline</p>", "author": "mortenoh", "createdAt": "2020-06-28T07:31:49Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckValidateAndGenerateUidHook.java", "diffHunk": "@@ -0,0 +1,113 @@\n+package org.hisp.dhis.tracker.validation.hooks;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.hisp.dhis.common.CodeGenerator;\n+import org.hisp.dhis.tracker.domain.Enrollment;\n+import org.hisp.dhis.tracker.domain.Event;\n+import org.hisp.dhis.tracker.domain.TrackedEntity;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n+import org.springframework.stereotype.Component;\n+\n+import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+@Component\n+public class PreCheckValidateAndGenerateUidHook\n+    extends AbstractTrackerDtoValidationHook\n+{\n+    @Override\n+    public void validateTrackedEntity( ValidationErrorReporter reporter, TrackedEntity trackedEntity )\n+    {\n+        String uid = trackedEntity.getTrackedEntity();", "originalCommit": "ad5654dcf03fa2ccb82adad686d9e13dde5a93b0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c5a94c3d798ab59a16b994801255c4ac2631887b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckValidateAndGenerateUidHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckValidateAndGenerateUidHook.java\nindex 3c7b5972db..9cb2c18204 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckValidateAndGenerateUidHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckValidateAndGenerateUidHook.java\n", "chunk": "@@ -49,6 +49,7 @@ public class PreCheckValidateAndGenerateUidHook\n     public void validateTrackedEntity( ValidationErrorReporter reporter, TrackedEntity trackedEntity )\n     {\n         String uid = trackedEntity.getTrackedEntity();\n+\n         if ( uid != null && !CodeGenerator.isValidUid( uid ) )\n         {\n             reporter.addError( newReport( TrackerErrorCode.E1048 )\n", "next_change": null}]}, "revised_code_in_main": {"commit": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckValidateAndGenerateUidHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckValidateAndGenerateUidHook.java\nindex 3c7b5972db..cd21d8e6ac 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckValidateAndGenerateUidHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckValidateAndGenerateUidHook.java\n", "chunk": "@@ -45,10 +47,17 @@ import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n public class PreCheckValidateAndGenerateUidHook\n     extends AbstractTrackerDtoValidationHook\n {\n+    public PreCheckValidateAndGenerateUidHook( TrackedEntityAttributeService teAttrService,\n+        TrackedEntityCommentService commentService )\n+    {\n+        super( teAttrService, commentService );\n+    }\n+\n     @Override\n     public void validateTrackedEntity( ValidationErrorReporter reporter, TrackedEntity trackedEntity )\n     {\n         String uid = trackedEntity.getTrackedEntity();\n+\n         if ( uid != null && !CodeGenerator.isValidUid( uid ) )\n         {\n             reporter.addError( newReport( TrackerErrorCode.E1048 )\n", "next_change": {"commit": "3e3dc98d92f0c13fb56cf17894eab06a78842133", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckValidateAndGenerateUidHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckValidateAndGenerateUidHook.java\nindex cd21d8e6ac..079b2ae327 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckValidateAndGenerateUidHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckValidateAndGenerateUidHook.java\n", "chunk": "@@ -58,14 +60,11 @@ public class PreCheckValidateAndGenerateUidHook\n     {\n         String uid = trackedEntity.getTrackedEntity();\n \n-        if ( uid != null && !CodeGenerator.isValidUid( uid ) )\n+        if ( isUidInvalid( uid, reporter, trackedEntity, trackedEntity.getTrackedEntity() ) )\n         {\n-            reporter.addError( newReport( TrackerErrorCode.E1048 )\n-                .addArg( trackedEntity )\n-                .addArg( trackedEntity.getTrackedEntityType() ) );\n             return;\n         }\n-\n+        \n         if ( uid == null )\n         {\n             trackedEntity.setUid( CodeGenerator.generateUid() );\n", "next_change": {"commit": "8374cb43e422eddc1f4c01bb715d8d285acc37be", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckValidateAndGenerateUidHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckValidateAndGenerateUidHook.java\nindex 079b2ae327..b419c50aea 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckValidateAndGenerateUidHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckValidateAndGenerateUidHook.java\n", "chunk": "@@ -64,7 +64,7 @@ public class PreCheckValidateAndGenerateUidHook\n         {\n             return;\n         }\n-        \n+\n         if ( uid == null )\n         {\n             trackedEntity.setUid( CodeGenerator.generateUid() );\n", "next_change": {"commit": "c0e9b28f4609a84d1287d93bc65f81321e00d78b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckValidateAndGenerateUidHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckUidValidationHook.java\nsimilarity index 53%\nrename from dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckValidateAndGenerateUidHook.java\nrename to dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckUidValidationHook.java\nindex b419c50aea..cbe8c5b932 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckValidateAndGenerateUidHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckUidValidationHook.java\n", "chunk": "@@ -27,72 +25,35 @@ package org.hisp.dhis.tracker.validation.hooks;\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+package org.hisp.dhis.tracker.validation.hooks;\n+\n+import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n+\n+import java.util.List;\n \n import org.hisp.dhis.common.CodeGenerator;\n-import org.hisp.dhis.trackedentity.TrackedEntityAttributeService;\n-import org.hisp.dhis.tracker.domain.Enrollment;\n-import org.hisp.dhis.tracker.domain.Event;\n-import org.hisp.dhis.tracker.domain.Note;\n-import org.hisp.dhis.tracker.domain.TrackedEntity;\n+import org.hisp.dhis.tracker.domain.*;\n import org.hisp.dhis.tracker.report.TrackerErrorCode;\n import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n import org.springframework.stereotype.Component;\n \n-import java.util.List;\n-\n-import static org.apache.commons.collections4.CollectionUtils.isNotEmpty;\n-import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n-\n /**\n  * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n  */\n @Component\n-public class PreCheckValidateAndGenerateUidHook\n+public class PreCheckUidValidationHook\n     extends AbstractTrackerDtoValidationHook\n {\n-    public PreCheckValidateAndGenerateUidHook( TrackedEntityAttributeService teAttrService )\n-    {\n-        super( teAttrService );\n-    }\n-\n     @Override\n     public void validateTrackedEntity( ValidationErrorReporter reporter, TrackedEntity trackedEntity )\n     {\n-        String uid = trackedEntity.getTrackedEntity();\n-\n-        if ( isUidInvalid( uid, reporter, trackedEntity, trackedEntity.getTrackedEntity() ) )\n-        {\n-            return;\n-        }\n-\n-        if ( uid == null )\n-        {\n-            trackedEntity.setUid( CodeGenerator.generateUid() );\n-        }\n-        else\n-        {\n-            trackedEntity.setUid( uid );\n-        }\n+        checkUidFormat( trackedEntity.getTrackedEntity(), reporter, trackedEntity, trackedEntity.getTrackedEntity() );\n     }\n \n     @Override\n     public void validateEnrollment( ValidationErrorReporter reporter, Enrollment enrollment )\n     {\n-        final String uid = enrollment.getEnrollment();\n-\n-        if ( isUidInvalid( uid, reporter, enrollment, enrollment.getEnrollment() ) )\n-        {\n-            return;\n-        }\n-\n-        if ( uid == null )\n-        {\n-            enrollment.setUid( CodeGenerator.generateUid() );\n-        }\n-        else\n-        {\n-            enrollment.setUid( uid );\n-        }\n+        checkUidFormat( enrollment.getEnrollment(), reporter, enrollment, enrollment.getEnrollment() );\n \n         validateNotesUid( enrollment.getNotes(), reporter );\n     }\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "message": "Merge commit", "committedDate": null}, {"oid": "3e3dc98d92f0c13fb56cf17894eab06a78842133", "committedDate": "2020-08-04 17:20:37 +0200", "message": "feat: Enrollment/Events note persistence"}, {"oid": "8374cb43e422eddc1f4c01bb715d8d285acc37be", "committedDate": "2020-08-10 11:38:43 +0200", "message": "Merge remote-tracking branch 'origin/master' into DHIS2-7310-merge"}, {"oid": "ae4d365663ffddc9a34d1cdc0f629fd7b6386e90", "committedDate": "2020-11-03 10:25:55 +0100", "message": "feat: improve note validation during tracker import [TECH-457]"}, {"oid": "6e28dbfdaea7ceacbe560fe82ddba1e94c6cd203", "committedDate": "2020-11-11 17:41:55 +0100", "message": "fix: Exception when importing TEI with relationship [DHIS2-9856] (#6552)"}, {"oid": "0bf55d776481f6511e5f9ebca5de1f2cf79777c0", "committedDate": "2020-11-19 13:55:46 +0100", "message": "refactor: New Tracker Error reporting refactor (#6706)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "c0e9b28f4609a84d1287d93bc65f81321e00d78b", "committedDate": "2021-03-30 13:22:16 +0200", "message": "refactor: Removing uid field from tracker entities [TECH-579] (#7790)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYxMzU0MA==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446613540", "body": "newline", "bodyText": "newline", "bodyHTML": "<p dir=\"auto\">newline</p>", "author": "mortenoh", "createdAt": "2020-06-28T07:33:21Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckValidateAndGenerateUidHook.java", "diffHunk": "@@ -0,0 +1,113 @@\n+package org.hisp.dhis.tracker.validation.hooks;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.hisp.dhis.common.CodeGenerator;\n+import org.hisp.dhis.tracker.domain.Enrollment;\n+import org.hisp.dhis.tracker.domain.Event;\n+import org.hisp.dhis.tracker.domain.TrackedEntity;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n+import org.springframework.stereotype.Component;\n+\n+import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+@Component\n+public class PreCheckValidateAndGenerateUidHook\n+    extends AbstractTrackerDtoValidationHook\n+{\n+    @Override\n+    public void validateTrackedEntity( ValidationErrorReporter reporter, TrackedEntity trackedEntity )\n+    {\n+        String uid = trackedEntity.getTrackedEntity();\n+        if ( uid != null && !CodeGenerator.isValidUid( uid ) )\n+        {\n+            reporter.addError( newReport( TrackerErrorCode.E1048 )\n+                .addArg( trackedEntity )\n+                .addArg( trackedEntity.getTrackedEntityType() ) );\n+            return;\n+        }\n+\n+        if ( uid == null )\n+        {\n+            trackedEntity.setUid( CodeGenerator.generateUid() );\n+        }\n+        else\n+        {\n+            trackedEntity.setUid( uid );\n+        }\n+    }\n+\n+    @Override\n+    public void validateEnrollment( ValidationErrorReporter reporter, Enrollment enrollment )\n+    {\n+        String uid = enrollment.getEnrollment();", "originalCommit": "ad5654dcf03fa2ccb82adad686d9e13dde5a93b0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c5a94c3d798ab59a16b994801255c4ac2631887b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckValidateAndGenerateUidHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckValidateAndGenerateUidHook.java\nindex 3c7b5972db..9cb2c18204 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckValidateAndGenerateUidHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckValidateAndGenerateUidHook.java\n", "chunk": "@@ -71,6 +72,7 @@ public class PreCheckValidateAndGenerateUidHook\n     public void validateEnrollment( ValidationErrorReporter reporter, Enrollment enrollment )\n     {\n         String uid = enrollment.getEnrollment();\n+\n         if ( uid != null && !CodeGenerator.isValidUid( uid ) )\n         {\n             reporter.addError( newReport( TrackerErrorCode.E1048 )\n", "next_change": null}]}, "revised_code_in_main": {"commit": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckValidateAndGenerateUidHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckValidateAndGenerateUidHook.java\nindex 3c7b5972db..cd21d8e6ac 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckValidateAndGenerateUidHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckValidateAndGenerateUidHook.java\n", "chunk": "@@ -71,6 +80,7 @@ public class PreCheckValidateAndGenerateUidHook\n     public void validateEnrollment( ValidationErrorReporter reporter, Enrollment enrollment )\n     {\n         String uid = enrollment.getEnrollment();\n+\n         if ( uid != null && !CodeGenerator.isValidUid( uid ) )\n         {\n             reporter.addError( newReport( TrackerErrorCode.E1048 )\n", "next_change": {"commit": "3e3dc98d92f0c13fb56cf17894eab06a78842133", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckValidateAndGenerateUidHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckValidateAndGenerateUidHook.java\nindex cd21d8e6ac..079b2ae327 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckValidateAndGenerateUidHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckValidateAndGenerateUidHook.java\n", "chunk": "@@ -79,16 +78,13 @@ public class PreCheckValidateAndGenerateUidHook\n     @Override\n     public void validateEnrollment( ValidationErrorReporter reporter, Enrollment enrollment )\n     {\n-        String uid = enrollment.getEnrollment();\n+        final String uid = enrollment.getEnrollment();\n \n-        if ( uid != null && !CodeGenerator.isValidUid( uid ) )\n+        if ( isUidInvalid( uid, reporter, enrollment, enrollment.getEnrollment() ) )\n         {\n-            reporter.addError( newReport( TrackerErrorCode.E1048 )\n-                .addArg( enrollment )\n-                .addArg( enrollment.getEnrollment() ) );\n             return;\n         }\n-\n+        \n         if ( uid == null )\n         {\n             enrollment.setUid( CodeGenerator.generateUid() );\n", "next_change": {"commit": "8374cb43e422eddc1f4c01bb715d8d285acc37be", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckValidateAndGenerateUidHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckValidateAndGenerateUidHook.java\nindex 079b2ae327..b419c50aea 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckValidateAndGenerateUidHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckValidateAndGenerateUidHook.java\n", "chunk": "@@ -84,7 +84,7 @@ public class PreCheckValidateAndGenerateUidHook\n         {\n             return;\n         }\n-        \n+\n         if ( uid == null )\n         {\n             enrollment.setUid( CodeGenerator.generateUid() );\n", "next_change": {"commit": "c0e9b28f4609a84d1287d93bc65f81321e00d78b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckValidateAndGenerateUidHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckUidValidationHook.java\nsimilarity index 53%\nrename from dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckValidateAndGenerateUidHook.java\nrename to dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckUidValidationHook.java\nindex b419c50aea..cbe8c5b932 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckValidateAndGenerateUidHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckUidValidationHook.java\n", "chunk": "@@ -27,72 +25,35 @@ package org.hisp.dhis.tracker.validation.hooks;\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+package org.hisp.dhis.tracker.validation.hooks;\n+\n+import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n+\n+import java.util.List;\n \n import org.hisp.dhis.common.CodeGenerator;\n-import org.hisp.dhis.trackedentity.TrackedEntityAttributeService;\n-import org.hisp.dhis.tracker.domain.Enrollment;\n-import org.hisp.dhis.tracker.domain.Event;\n-import org.hisp.dhis.tracker.domain.Note;\n-import org.hisp.dhis.tracker.domain.TrackedEntity;\n+import org.hisp.dhis.tracker.domain.*;\n import org.hisp.dhis.tracker.report.TrackerErrorCode;\n import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n import org.springframework.stereotype.Component;\n \n-import java.util.List;\n-\n-import static org.apache.commons.collections4.CollectionUtils.isNotEmpty;\n-import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n-\n /**\n  * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n  */\n @Component\n-public class PreCheckValidateAndGenerateUidHook\n+public class PreCheckUidValidationHook\n     extends AbstractTrackerDtoValidationHook\n {\n-    public PreCheckValidateAndGenerateUidHook( TrackedEntityAttributeService teAttrService )\n-    {\n-        super( teAttrService );\n-    }\n-\n     @Override\n     public void validateTrackedEntity( ValidationErrorReporter reporter, TrackedEntity trackedEntity )\n     {\n-        String uid = trackedEntity.getTrackedEntity();\n-\n-        if ( isUidInvalid( uid, reporter, trackedEntity, trackedEntity.getTrackedEntity() ) )\n-        {\n-            return;\n-        }\n-\n-        if ( uid == null )\n-        {\n-            trackedEntity.setUid( CodeGenerator.generateUid() );\n-        }\n-        else\n-        {\n-            trackedEntity.setUid( uid );\n-        }\n+        checkUidFormat( trackedEntity.getTrackedEntity(), reporter, trackedEntity, trackedEntity.getTrackedEntity() );\n     }\n \n     @Override\n     public void validateEnrollment( ValidationErrorReporter reporter, Enrollment enrollment )\n     {\n-        final String uid = enrollment.getEnrollment();\n-\n-        if ( isUidInvalid( uid, reporter, enrollment, enrollment.getEnrollment() ) )\n-        {\n-            return;\n-        }\n-\n-        if ( uid == null )\n-        {\n-            enrollment.setUid( CodeGenerator.generateUid() );\n-        }\n-        else\n-        {\n-            enrollment.setUid( uid );\n-        }\n+        checkUidFormat( enrollment.getEnrollment(), reporter, enrollment, enrollment.getEnrollment() );\n \n         validateNotesUid( enrollment.getNotes(), reporter );\n     }\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "message": "Merge commit", "committedDate": null}, {"oid": "3e3dc98d92f0c13fb56cf17894eab06a78842133", "committedDate": "2020-08-04 17:20:37 +0200", "message": "feat: Enrollment/Events note persistence"}, {"oid": "8374cb43e422eddc1f4c01bb715d8d285acc37be", "committedDate": "2020-08-10 11:38:43 +0200", "message": "Merge remote-tracking branch 'origin/master' into DHIS2-7310-merge"}, {"oid": "ae4d365663ffddc9a34d1cdc0f629fd7b6386e90", "committedDate": "2020-11-03 10:25:55 +0100", "message": "feat: improve note validation during tracker import [TECH-457]"}, {"oid": "6e28dbfdaea7ceacbe560fe82ddba1e94c6cd203", "committedDate": "2020-11-11 17:41:55 +0100", "message": "fix: Exception when importing TEI with relationship [DHIS2-9856] (#6552)"}, {"oid": "0bf55d776481f6511e5f9ebca5de1f2cf79777c0", "committedDate": "2020-11-19 13:55:46 +0100", "message": "refactor: New Tracker Error reporting refactor (#6706)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "c0e9b28f4609a84d1287d93bc65f81321e00d78b", "committedDate": "2021-03-30 13:22:16 +0200", "message": "refactor: Removing uid field from tracker entities [TECH-579] (#7790)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYxMzU2Mg==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446613562", "body": "newline", "bodyText": "newline", "bodyHTML": "<p dir=\"auto\">newline</p>", "author": "mortenoh", "createdAt": "2020-06-28T07:33:35Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckValidateAndGenerateUidHook.java", "diffHunk": "@@ -0,0 +1,113 @@\n+package org.hisp.dhis.tracker.validation.hooks;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.hisp.dhis.common.CodeGenerator;\n+import org.hisp.dhis.tracker.domain.Enrollment;\n+import org.hisp.dhis.tracker.domain.Event;\n+import org.hisp.dhis.tracker.domain.TrackedEntity;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n+import org.springframework.stereotype.Component;\n+\n+import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+@Component\n+public class PreCheckValidateAndGenerateUidHook\n+    extends AbstractTrackerDtoValidationHook\n+{\n+    @Override\n+    public void validateTrackedEntity( ValidationErrorReporter reporter, TrackedEntity trackedEntity )\n+    {\n+        String uid = trackedEntity.getTrackedEntity();\n+        if ( uid != null && !CodeGenerator.isValidUid( uid ) )\n+        {\n+            reporter.addError( newReport( TrackerErrorCode.E1048 )\n+                .addArg( trackedEntity )\n+                .addArg( trackedEntity.getTrackedEntityType() ) );\n+            return;\n+        }\n+\n+        if ( uid == null )\n+        {\n+            trackedEntity.setUid( CodeGenerator.generateUid() );\n+        }\n+        else\n+        {\n+            trackedEntity.setUid( uid );\n+        }\n+    }\n+\n+    @Override\n+    public void validateEnrollment( ValidationErrorReporter reporter, Enrollment enrollment )\n+    {\n+        String uid = enrollment.getEnrollment();\n+        if ( uid != null && !CodeGenerator.isValidUid( uid ) )\n+        {\n+            reporter.addError( newReport( TrackerErrorCode.E1048 )\n+                .addArg( enrollment )\n+                .addArg( enrollment.getEnrollment() ) );\n+            return;\n+        }\n+\n+        if ( uid == null )\n+        {\n+            enrollment.setUid( CodeGenerator.generateUid() );\n+        }\n+        else\n+        {\n+            enrollment.setUid( uid );\n+        }\n+    }\n+\n+    @Override\n+    public void validateEvent( ValidationErrorReporter reporter, Event event )\n+    {\n+        String uid = event.getEvent();", "originalCommit": "ad5654dcf03fa2ccb82adad686d9e13dde5a93b0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c5a94c3d798ab59a16b994801255c4ac2631887b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckValidateAndGenerateUidHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckValidateAndGenerateUidHook.java\nindex 3c7b5972db..9cb2c18204 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckValidateAndGenerateUidHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckValidateAndGenerateUidHook.java\n", "chunk": "@@ -93,6 +95,7 @@ public class PreCheckValidateAndGenerateUidHook\n     public void validateEvent( ValidationErrorReporter reporter, Event event )\n     {\n         String uid = event.getEvent();\n+\n         if ( uid != null && !CodeGenerator.isValidUid( uid ) )\n         {\n             reporter.addError( newReport( TrackerErrorCode.E1048 )\n", "next_change": null}]}, "revised_code_in_main": {"commit": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckValidateAndGenerateUidHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckValidateAndGenerateUidHook.java\nindex 3c7b5972db..cd21d8e6ac 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckValidateAndGenerateUidHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckValidateAndGenerateUidHook.java\n", "chunk": "@@ -93,6 +103,7 @@ public class PreCheckValidateAndGenerateUidHook\n     public void validateEvent( ValidationErrorReporter reporter, Event event )\n     {\n         String uid = event.getEvent();\n+\n         if ( uid != null && !CodeGenerator.isValidUid( uid ) )\n         {\n             reporter.addError( newReport( TrackerErrorCode.E1048 )\n", "next_change": {"commit": "3e3dc98d92f0c13fb56cf17894eab06a78842133", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckValidateAndGenerateUidHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckValidateAndGenerateUidHook.java\nindex cd21d8e6ac..079b2ae327 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckValidateAndGenerateUidHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckValidateAndGenerateUidHook.java\n", "chunk": "@@ -97,21 +93,20 @@ public class PreCheckValidateAndGenerateUidHook\n         {\n             enrollment.setUid( uid );\n         }\n+\n+        validateNotesUid( enrollment.getNotes(), reporter );\n     }\n \n     @Override\n     public void validateEvent( ValidationErrorReporter reporter, Event event )\n     {\n-        String uid = event.getEvent();\n+        final String uid = event.getEvent();\n \n-        if ( uid != null && !CodeGenerator.isValidUid( uid ) )\n+        if ( isUidInvalid( uid, reporter, event, event.getEvent() ) )\n         {\n-            reporter.addError( newReport( TrackerErrorCode.E1048 )\n-                .addArg( event )\n-                .addArg( event.getEvent() ) );\n             return;\n         }\n-\n+        \n         if ( uid == null )\n         {\n             event.setUid( CodeGenerator.generateUid() );\n", "next_change": {"commit": "8374cb43e422eddc1f4c01bb715d8d285acc37be", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckValidateAndGenerateUidHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckValidateAndGenerateUidHook.java\nindex 079b2ae327..b419c50aea 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckValidateAndGenerateUidHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckValidateAndGenerateUidHook.java\n", "chunk": "@@ -106,7 +106,7 @@ public class PreCheckValidateAndGenerateUidHook\n         {\n             return;\n         }\n-        \n+\n         if ( uid == null )\n         {\n             event.setUid( CodeGenerator.generateUid() );\n", "next_change": {"commit": "c0e9b28f4609a84d1287d93bc65f81321e00d78b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckValidateAndGenerateUidHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckUidValidationHook.java\nsimilarity index 53%\nrename from dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckValidateAndGenerateUidHook.java\nrename to dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckUidValidationHook.java\nindex b419c50aea..cbe8c5b932 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckValidateAndGenerateUidHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckUidValidationHook.java\n", "chunk": "@@ -100,63 +61,47 @@ public class PreCheckValidateAndGenerateUidHook\n     @Override\n     public void validateEvent( ValidationErrorReporter reporter, Event event )\n     {\n-        final String uid = event.getEvent();\n-\n-        if ( isUidInvalid( uid, reporter, event, event.getEvent() ) )\n-        {\n-            return;\n-        }\n-\n-        if ( uid == null )\n-        {\n-            event.setUid( CodeGenerator.generateUid() );\n-        }\n-        else\n-        {\n-            event.setUid( uid );\n-        }\n+        checkUidFormat( event.getEvent(), reporter, event, event.getEvent() );\n \n-        // Generate UID for notes\n         validateNotesUid( event.getNotes(), reporter );\n     }\n \n+    @Override\n+    public void validateRelationship( ValidationErrorReporter reporter, Relationship relationship )\n+    {\n+        checkUidFormat( relationship.getRelationship(), reporter, relationship, relationship.getRelationship() );\n+    }\n+\n     private void validateNotesUid( List<Note> notes, ValidationErrorReporter reporter )\n     {\n-        if ( isNotEmpty( notes ) )\n+        for ( Note note : notes )\n         {\n-            for ( Note note : notes )\n-            {\n-                if ( isUidInvalid( note.getNote(), reporter, note, note.getNote() ) )\n-                {\n-                    return;\n-                }\n-                if ( note.getNote() == null )\n-                {\n-                    note.setNote( CodeGenerator.generateUid() );\n-                    note.setNewNote( true );\n-                }\n-            }\n+            checkUidFormat( note.getNote(), reporter, note, note.getNote() );\n         }\n-\n     }\n \n     /**\n-     * Check if the given UID has a valid format. A null UID is considered valid.\n-     * \n-     * @param uid a UID. The UID string can be null.\n-     * @param reporter a {@see ValidationErrorReporter} to which the error is added\n+     * Check if the given UID has a valid format.\n+     *\n+     * @param uid a UID\n+     * @param reporter a {@see ValidationErrorReporter} to which the error is\n+     *        added\n      * @param args list of arguments for the Error report\n-     * @return true, if the UID is invalid\n      */\n-    private boolean isUidInvalid( String uid, ValidationErrorReporter reporter, Object... args )\n+    private void checkUidFormat( String uid, ValidationErrorReporter reporter, Object... args )\n     {\n-        if ( uid != null && !CodeGenerator.isValidUid( uid ) )\n+        if ( !CodeGenerator.isValidUid( uid ) )\n         {\n             reporter.addError( newReport( TrackerErrorCode.E1048 )\n                 .addArg( args[0] )\n                 .addArg( args[1] ) );\n-            return true;\n         }\n-        return false;\n     }\n+\n+    @Override\n+    public boolean removeOnError()\n+    {\n+        return true;\n+    }\n+\n }\n", "next_change": null}]}}, {"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckValidateAndGenerateUidHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckValidateAndGenerateUidHook.java\nindex 079b2ae327..b419c50aea 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckValidateAndGenerateUidHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckValidateAndGenerateUidHook.java\n", "chunk": "@@ -115,7 +115,7 @@ public class PreCheckValidateAndGenerateUidHook\n         {\n             event.setUid( uid );\n         }\n-        \n+\n         // Generate UID for notes\n         validateNotesUid( event.getNotes(), reporter );\n     }\n", "next_change": {"commit": "6e28dbfdaea7ceacbe560fe82ddba1e94c6cd203", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckValidateAndGenerateUidHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckValidateAndGenerateUidHook.java\nindex b419c50aea..3f00c462f8 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckValidateAndGenerateUidHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckValidateAndGenerateUidHook.java\n", "chunk": "@@ -120,7 +121,27 @@ public class PreCheckValidateAndGenerateUidHook\n         validateNotesUid( event.getNotes(), reporter );\n     }\n \n-    private void validateNotesUid( List<Note> notes, ValidationErrorReporter reporter )\n+    @Override\n+    public void validateRelationship( ValidationErrorReporter reporter, Relationship relationship )\n+    {\n+        final String uid = relationship.getRelationship();\n+\n+        if ( isUidInvalid( uid, reporter, relationship, relationship.getRelationship() ) )\n+        {\n+            return;\n+        }\n+\n+        if ( uid == null )\n+        {\n+            relationship.setRelationship( CodeGenerator.generateUid() );\n+        }\n+        else\n+        {\n+            relationship.setRelationship( uid );\n+        }\n+    }\n+\n+    private void validateNotesUid(List<Note> notes, ValidationErrorReporter reporter )\n     {\n         if ( isNotEmpty( notes ) )\n         {\n", "next_change": {"commit": "ea76fa86409613c9766d4508d65c88ac55c413c3", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckValidateAndGenerateUidHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckValidateAndGenerateUidHook.java\nindex 3f00c462f8..2ef5a5cd56 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckValidateAndGenerateUidHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckValidateAndGenerateUidHook.java\n", "chunk": "@@ -141,7 +134,7 @@ public class PreCheckValidateAndGenerateUidHook\n         }\n     }\n \n-    private void validateNotesUid(List<Note> notes, ValidationErrorReporter reporter )\n+    private void validateNotesUid( List<Note> notes, ValidationErrorReporter reporter )\n     {\n         if ( isNotEmpty( notes ) )\n         {\n", "next_change": {"commit": "c0e9b28f4609a84d1287d93bc65f81321e00d78b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckValidateAndGenerateUidHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckUidValidationHook.java\nsimilarity index 54%\nrename from dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckValidateAndGenerateUidHook.java\nrename to dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckUidValidationHook.java\nindex 2ef5a5cd56..cbe8c5b932 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckValidateAndGenerateUidHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckUidValidationHook.java\n", "chunk": "@@ -94,85 +61,41 @@ public class PreCheckValidateAndGenerateUidHook\n     @Override\n     public void validateEvent( ValidationErrorReporter reporter, Event event )\n     {\n-        final String uid = event.getEvent();\n+        checkUidFormat( event.getEvent(), reporter, event, event.getEvent() );\n \n-        if ( isUidInvalid( uid, reporter, event, event.getEvent() ) )\n-        {\n-            return;\n-        }\n-\n-        if ( uid == null )\n-        {\n-            event.setUid( CodeGenerator.generateUid() );\n-        }\n-        else\n-        {\n-            event.setUid( uid );\n-        }\n-\n-        // Generate UID for notes\n         validateNotesUid( event.getNotes(), reporter );\n     }\n \n     @Override\n     public void validateRelationship( ValidationErrorReporter reporter, Relationship relationship )\n     {\n-        final String uid = relationship.getRelationship();\n-\n-        if ( isUidInvalid( uid, reporter, relationship, relationship.getRelationship() ) )\n-        {\n-            return;\n-        }\n-\n-        if ( uid == null )\n-        {\n-            relationship.setRelationship( CodeGenerator.generateUid() );\n-        }\n-        else\n-        {\n-            relationship.setRelationship( uid );\n-        }\n+        checkUidFormat( relationship.getRelationship(), reporter, relationship, relationship.getRelationship() );\n     }\n \n     private void validateNotesUid( List<Note> notes, ValidationErrorReporter reporter )\n     {\n-        if ( isNotEmpty( notes ) )\n+        for ( Note note : notes )\n         {\n-            for ( Note note : notes )\n-            {\n-                if ( isUidInvalid( note.getNote(), reporter, note, note.getNote() ) )\n-                {\n-                    return;\n-                }\n-                if ( note.getNote() == null )\n-                {\n-                    note.setNote( CodeGenerator.generateUid() );\n-                }\n-            }\n+            checkUidFormat( note.getNote(), reporter, note, note.getNote() );\n         }\n-\n     }\n \n     /**\n-     * Check if the given UID has a valid format. A null UID is considered\n-     * valid.\n+     * Check if the given UID has a valid format.\n      *\n-     * @param uid a UID. The UID string can be null.\n+     * @param uid a UID\n      * @param reporter a {@see ValidationErrorReporter} to which the error is\n      *        added\n      * @param args list of arguments for the Error report\n-     * @return true, if the UID is invalid\n      */\n-    private boolean isUidInvalid( String uid, ValidationErrorReporter reporter, Object... args )\n+    private void checkUidFormat( String uid, ValidationErrorReporter reporter, Object... args )\n     {\n-        if ( uid != null && !CodeGenerator.isValidUid( uid ) )\n+        if ( !CodeGenerator.isValidUid( uid ) )\n         {\n             reporter.addError( newReport( TrackerErrorCode.E1048 )\n                 .addArg( args[0] )\n                 .addArg( args[1] ) );\n-            return true;\n         }\n-        return false;\n     }\n \n     @Override\n", "next_change": null}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "message": "Merge commit", "committedDate": null}, {"oid": "3e3dc98d92f0c13fb56cf17894eab06a78842133", "committedDate": "2020-08-04 17:20:37 +0200", "message": "feat: Enrollment/Events note persistence"}, {"oid": "8374cb43e422eddc1f4c01bb715d8d285acc37be", "committedDate": "2020-08-10 11:38:43 +0200", "message": "Merge remote-tracking branch 'origin/master' into DHIS2-7310-merge"}, {"oid": "ae4d365663ffddc9a34d1cdc0f629fd7b6386e90", "committedDate": "2020-11-03 10:25:55 +0100", "message": "feat: improve note validation during tracker import [TECH-457]"}, {"oid": "6e28dbfdaea7ceacbe560fe82ddba1e94c6cd203", "committedDate": "2020-11-11 17:41:55 +0100", "message": "fix: Exception when importing TEI with relationship [DHIS2-9856] (#6552)"}, {"oid": "0bf55d776481f6511e5f9ebca5de1f2cf79777c0", "committedDate": "2020-11-19 13:55:46 +0100", "message": "refactor: New Tracker Error reporting refactor (#6706)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "c0e9b28f4609a84d1287d93bc65f81321e00d78b", "committedDate": "2021-03-30 13:22:16 +0200", "message": "refactor: Removing uid field from tracker entities [TECH-579] (#7790)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYxNTE3Ng==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446615176", "body": "Is there a mixup here? the error code used (E1048) both says uuid and uid... i assume this should all be renamed to uid?", "bodyText": "Is there a mixup here? the error code used (E1048) both says uuid and uid... i assume this should all be renamed to uid?", "bodyHTML": "<p dir=\"auto\">Is there a mixup here? the error code used (E1048) both says uuid and uid... i assume this should all be renamed to uid?</p>", "author": "mortenoh", "createdAt": "2020-06-28T07:50:33Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EventImportValidationTest.java", "diffHunk": "@@ -0,0 +1,750 @@\n+package org.hisp.dhis.tracker.validation;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.hisp.dhis.common.IdentifiableObject;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundle;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundleMode;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundleParams;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.feedback.ObjectBundleCommitReport;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.feedback.ObjectBundleValidationReport;\n+import org.hisp.dhis.feedback.ErrorReport;\n+import org.hisp.dhis.importexport.ImportStrategy;\n+import org.hisp.dhis.program.ProgramStageInstanceService;\n+import org.hisp.dhis.program.ProgramStageService;\n+import org.hisp.dhis.render.RenderFormat;\n+import org.hisp.dhis.render.RenderService;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstanceService;\n+import org.hisp.dhis.tracker.TrackerImportStrategy;\n+import org.hisp.dhis.tracker.bundle.TrackerBundle;\n+import org.hisp.dhis.tracker.bundle.TrackerBundleParams;\n+import org.hisp.dhis.tracker.report.TrackerBundleReport;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.TrackerStatus;\n+import org.hisp.dhis.tracker.report.TrackerValidationReport;\n+import org.hisp.dhis.user.User;\n+import org.hisp.dhis.user.UserService;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.io.ClassPathResource;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasItem;\n+import static org.hamcrest.Matchers.hasProperty;\n+import static org.hamcrest.core.Every.everyItem;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+@Slf4j\n+public class EventImportValidationTest\n+    extends AbstractImportValidationTest\n+{\n+    @Autowired\n+    protected TrackedEntityInstanceService trackedEntityInstanceService;\n+\n+    @Autowired\n+    private RenderService _renderService;\n+\n+    @Autowired\n+    private UserService _userService;\n+\n+    @Autowired\n+    private ProgramStageService programStageService;\n+\n+    @Autowired\n+    private ProgramStageInstanceService programStageServiceInstance;\n+\n+    protected void setUpTest()\n+        throws IOException\n+    {\n+        renderService = _renderService;\n+        userService = _userService;\n+\n+        Map<Class<? extends IdentifiableObject>, List<IdentifiableObject>> metadata = renderService.fromMetadata(\n+            new ClassPathResource( \"tracker/tracker_basic_metadata.json\" ).getInputStream(), RenderFormat.JSON );\n+\n+        ObjectBundleParams params = new ObjectBundleParams();\n+        params.setObjectBundleMode( ObjectBundleMode.COMMIT );\n+        params.setImportStrategy( ImportStrategy.CREATE );\n+        params.setObjects( metadata );\n+\n+        ObjectBundle bundle = objectBundleService.create( params );\n+        ObjectBundleValidationReport validationReport = objectBundleValidationService.validate( bundle );\n+        List<ErrorReport> errorReports = validationReport.getErrorReports();\n+        assertTrue( errorReports.isEmpty() );\n+\n+        ObjectBundleCommitReport commit = objectBundleService.commit( bundle );\n+        List<ErrorReport> objectReport = commit.getErrorReports();\n+        assertTrue( objectReport.isEmpty() );\n+\n+        TrackerBundleParams trackerBundleParams = createBundleFromJson(\n+            \"tracker/validations/enrollments_te_te-data.json\" );\n+\n+        User user = userService.getUser( ADMIN_USER_UID );\n+        trackerBundleParams.setUser( user );\n+\n+        TrackerBundle trackerBundle = trackerBundleService.create( trackerBundleParams ).get( 0 );\n+        assertEquals( 4, trackerBundle.getTrackedEntities().size() );\n+\n+        TrackerValidationReport report = trackerValidationService.validate( trackerBundle );\n+        assertEquals( 0, report.getErrorReports().size() );\n+\n+        TrackerBundleReport bundleReport = trackerBundleService.commit( trackerBundle );\n+        assertEquals( TrackerStatus.OK, bundleReport.getStatus() );\n+\n+        ////////////////////////////////////////\n+\n+        trackerBundleParams = renderService\n+            .fromJson(\n+                new ClassPathResource( \"tracker/validations/enrollments_te_enrollments-data.json\" ).getInputStream(),\n+                TrackerBundleParams.class );\n+\n+        trackerBundleParams.setUser( user );\n+\n+        trackerBundle = trackerBundleService.create( trackerBundleParams ).get( 0 );\n+        assertEquals( 4, trackerBundle.getEnrollments().size() );\n+\n+        report = trackerValidationService.validate( trackerBundle );\n+        assertEquals( 0, report.getErrorReports().size() );\n+\n+        bundleReport = trackerBundleService.commit( trackerBundle );\n+        assertEquals( TrackerStatus.OK, bundleReport.getStatus() );\n+    }\n+\n+    @Test\n+    public void testEventValidationOkAll()\n+        throws IOException\n+    {\n+        TrackerBundleParams trackerBundleParams = createBundleFromJson( \"tracker/validations/events-data.json\" );\n+\n+        ValidateAndCommit createAndUpdate = doValidateAndCommit( trackerBundleParams, TrackerImportStrategy.CREATE );\n+        assertEquals( 1, createAndUpdate.getTrackerBundle().getEvents().size() );\n+        TrackerValidationReport report = createAndUpdate.getValidationReport();\n+        printReport( report );\n+        assertEquals( TrackerStatus.OK, createAndUpdate.getCommitReport().getStatus() );\n+\n+        assertEquals( 0, report.getErrorReports().size() );\n+\n+    }\n+\n+    @Test\n+    public void testEventInvalidUidFormat()\n+        throws IOException\n+    {\n+        TrackerBundleParams trackerBundleParams = createBundleFromJson(\n+            \"tracker/validations/events-invalid-uuid-format.json\" );", "originalCommit": "ad5654dcf03fa2ccb82adad686d9e13dde5a93b0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYyNjIwMg==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446626202", "bodyText": "This is mix up, good catch.", "author": "netroms", "createdAt": "2020-06-28T09:28:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYxNTE3Ng=="}], "type": "inlineReview", "revised_code": {"commit": "c5a94c3d798ab59a16b994801255c4ac2631887b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EventImportValidationTest.java b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EventImportValidationTest.java\nindex 25b5abe2d0..ea8f8c92c6 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EventImportValidationTest.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EventImportValidationTest.java\n", "chunk": "@@ -167,7 +165,7 @@ public class EventImportValidationTest\n         throws IOException\n     {\n         TrackerBundleParams trackerBundleParams = createBundleFromJson(\n-            \"tracker/validations/events-invalid-uuid-format.json\" );\n+            \"tracker/validations/events-invalid-uid-format.json\" );\n \n         ValidateAndCommit createAndUpdate = doValidateAndCommit( trackerBundleParams, TrackerImportStrategy.CREATE );\n         TrackerValidationReport report = createAndUpdate.getValidationReport();\n", "next_change": {"commit": "d2feae85e2920e2ecd5cce7d310e926ae797cd2c", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EventImportValidationTest.java b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EventImportValidationTest.java\nindex ea8f8c92c6..b9c6518fc7 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EventImportValidationTest.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EventImportValidationTest.java\n", "chunk": "@@ -167,7 +168,8 @@ public class EventImportValidationTest\n         TrackerBundleParams trackerBundleParams = createBundleFromJson(\n             \"tracker/validations/events-invalid-uid-format.json\" );\n \n-        ValidateAndCommit createAndUpdate = doValidateAndCommit( trackerBundleParams, TrackerImportStrategy.CREATE );\n+        ValidateAndCommitTestUnit createAndUpdate = doValidateAndCommit( trackerBundleParams,\n+            TrackerImportStrategy.CREATE );\n         TrackerValidationReport report = createAndUpdate.getValidationReport();\n         printReport( report );\n \n", "next_change": {"commit": "12bd589850367af9ce124e78ea519bd7842cb3c5", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EventImportValidationTest.java b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EventImportValidationTest.java\nindex b9c6518fc7..7e673034c7 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EventImportValidationTest.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EventImportValidationTest.java\n", "chunk": "@@ -168,7 +168,7 @@ public class EventImportValidationTest\n         TrackerBundleParams trackerBundleParams = createBundleFromJson(\n             \"tracker/validations/events-invalid-uid-format.json\" );\n \n-        ValidateAndCommitTestUnit createAndUpdate = doValidateAndCommit( trackerBundleParams,\n+        ValidateAndCommitTestUnit createAndUpdate = validateAndCommit( trackerBundleParams,\n             TrackerImportStrategy.CREATE );\n         TrackerValidationReport report = createAndUpdate.getValidationReport();\n         printReport( report );\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EventImportValidationTest.java b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EventImportValidationTest.java\nindex 25b5abe2d0..d8aed23ab5 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EventImportValidationTest.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EventImportValidationTest.java\n", "chunk": "@@ -167,9 +172,10 @@ public class EventImportValidationTest\n         throws IOException\n     {\n         TrackerBundleParams trackerBundleParams = createBundleFromJson(\n-            \"tracker/validations/events-invalid-uuid-format.json\" );\n+            \"tracker/validations/events-invalid-uid-format.json\" );\n \n-        ValidateAndCommit createAndUpdate = doValidateAndCommit( trackerBundleParams, TrackerImportStrategy.CREATE );\n+        ValidateAndCommitTestUnit createAndUpdate = validateAndCommit( trackerBundleParams,\n+            TrackerImportStrategy.CREATE );\n         TrackerValidationReport report = createAndUpdate.getValidationReport();\n         printReport( report );\n \n", "next_change": {"commit": "3e799d196b8f73ad216ea100a07ddd5f7dfc53e0", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EventImportValidationTest.java b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EventImportValidationTest.java\nindex d8aed23ab5..e351506fd9 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EventImportValidationTest.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EventImportValidationTest.java\n", "chunk": "@@ -171,7 +173,7 @@ public class EventImportValidationTest\n     public void testEventInvalidUidFormat()\n         throws IOException\n     {\n-        TrackerBundleParams trackerBundleParams = createBundleFromJson(\n+        TrackerImportParams trackerBundleParams = createBundleFromJson(\n             \"tracker/validations/events-invalid-uid-format.json\" );\n \n         ValidateAndCommitTestUnit createAndUpdate = validateAndCommit( trackerBundleParams,\n", "next_change": {"commit": "c71a97bf6c13f342a7c972c7061dab2b61d9d587", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EventImportValidationTest.java b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EventImportValidationTest.java\nindex e351506fd9..2a2f1227a1 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EventImportValidationTest.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EventImportValidationTest.java\n", "chunk": "@@ -153,38 +161,49 @@ public class EventImportValidationTest\n     }\n \n     @Test\n-    public void testEventValidationOkAll()\n+    public void failValidationWhenTrackedEntityAttributeHasWrongOptionValue()\n         throws IOException\n     {\n-        TrackerImportParams trackerBundleParams = createBundleFromJson( \"tracker/validations/events-data.json\" );\n+        TrackerImportParams params = createBundleFromJson(\n+            \"tracker/validations/events-with_invalid_option_value.json\" );\n \n-        ValidateAndCommitTestUnit createAndUpdate = validateAndCommit( trackerBundleParams,\n-            TrackerImportStrategy.CREATE );\n-        assertEquals( 1, createAndUpdate.getTrackerBundle().getEvents().size() );\n+        ValidateAndCommitTestUnit createAndUpdate = validateAndCommit( params, TrackerImportStrategy.CREATE );\n         TrackerValidationReport report = createAndUpdate.getValidationReport();\n         printReport( report );\n-        assertEquals( TrackerStatus.OK, createAndUpdate.getCommitReport().getStatus() );\n+        assertEquals( 1, report.getErrorReports().size() );\n \n-        assertEquals( 0, report.getErrorReports().size() );\n+        assertThat( report.getErrorReports(),\n+            everyItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1125 ) ) ) );\n+    }\n \n+    @Test\n+    public void successWhenTrackedEntityAttributeHasValidOptionValue()\n+        throws IOException\n+    {\n+        TrackerImportParams params = createBundleFromJson(\n+            \"tracker/validations/events-with_valid_option_value.json\" );\n+\n+        ValidateAndCommitTestUnit createAndUpdate = validateAndCommit( params, TrackerImportStrategy.CREATE );\n+        TrackerValidationReport report = createAndUpdate.getValidationReport();\n+        printReport( report );\n+        assertEquals( 0, report.getErrorReports().size() );\n     }\n \n     @Test\n-    public void testEventInvalidUidFormat()\n+    public void testEventValidationOkAll()\n         throws IOException\n     {\n-        TrackerImportParams trackerBundleParams = createBundleFromJson(\n-            \"tracker/validations/events-invalid-uid-format.json\" );\n+        TrackerImportParams trackerBundleParams = createBundleFromJson( \"tracker/validations/events-data.json\" );\n \n         ValidateAndCommitTestUnit createAndUpdate = validateAndCommit( trackerBundleParams,\n             TrackerImportStrategy.CREATE );\n+        assertEquals( 1, createAndUpdate.getTrackerBundle().getEvents().size() );\n         TrackerValidationReport report = createAndUpdate.getValidationReport();\n         printReport( report );\n+        assertEquals( TrackerStatus.OK, createAndUpdate.getCommitReport().getStatus() );\n \n-        assertEquals( 1, report.getErrorReports().size() );\n+        assertEquals( 0, report.getErrorReports().size() );\n \n-        assertThat( report.getErrorReports(),\n-            hasItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1048 ) ) ) );\n     }\n \n     @Test\n", "next_change": {"commit": "db043f2d252ab92e85756413bce7515a315e3caa", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EventImportValidationTest.java b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EventImportValidationTest.java\nindex 2a2f1227a1..39c9eab48a 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EventImportValidationTest.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EventImportValidationTest.java\n", "chunk": "@@ -194,13 +194,12 @@ public class EventImportValidationTest\n         throws IOException\n     {\n         TrackerImportParams trackerBundleParams = createBundleFromJson( \"tracker/validations/events-data.json\" );\n+        trackerBundleParams.setImportStrategy( TrackerImportStrategy.CREATE );\n \n-        ValidateAndCommitTestUnit createAndUpdate = validateAndCommit( trackerBundleParams,\n-            TrackerImportStrategy.CREATE );\n-        assertEquals( 1, createAndUpdate.getTrackerBundle().getEvents().size() );\n-        TrackerValidationReport report = createAndUpdate.getValidationReport();\n+        TrackerImportReport trackerImportReport = trackerImportService.importTracker( trackerBundleParams );\n+        TrackerValidationReport report = trackerImportReport.getValidationReport();\n         printReport( report );\n-        assertEquals( TrackerStatus.OK, createAndUpdate.getCommitReport().getStatus() );\n+        assertEquals( TrackerStatus.OK, trackerImportReport.getStatus() );\n \n         assertEquals( 0, report.getErrorReports().size() );\n \n", "next_change": {"commit": "7d032be663a1d9444d4bc1dbf3bc20ff0f861ec1", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EventImportValidationTest.java b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EventImportValidationTest.java\nindex 39c9eab48a..2bff8c24ed 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EventImportValidationTest.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EventImportValidationTest.java\n", "chunk": "@@ -197,11 +188,9 @@ public class EventImportValidationTest\n         trackerBundleParams.setImportStrategy( TrackerImportStrategy.CREATE );\n \n         TrackerImportReport trackerImportReport = trackerImportService.importTracker( trackerBundleParams );\n-        TrackerValidationReport report = trackerImportReport.getValidationReport();\n-        printReport( report );\n-        assertEquals( TrackerStatus.OK, trackerImportReport.getStatus() );\n \n-        assertEquals( 0, report.getErrorReports().size() );\n+        assertEquals( TrackerStatus.OK, trackerImportReport.getStatus() );\n+        assertEquals( 0, trackerImportReport.getValidationReport().getErrorReports().size() );\n \n     }\n \n", "next_change": {"commit": "38a5a7eb2ef709441107868af50d5647faaa73ca", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EventImportValidationTest.java b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EventImportValidationTest.java\nindex 2bff8c24ed..74d0923d94 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EventImportValidationTest.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EventImportValidationTest.java\n", "chunk": "@@ -191,7 +190,27 @@ public class EventImportValidationTest\n \n         assertEquals( TrackerStatus.OK, trackerImportReport.getStatus() );\n         assertEquals( 0, trackerImportReport.getValidationReport().getErrorReports().size() );\n+    }\n+\n+    @Test\n+    public void testTrackerAndProgramEventUpdateSuccess()\n+        throws IOException\n+    {\n+        TrackerImportParams trackerBundleParams = createBundleFromJson(\n+            \"tracker/validations/program_and_tracker_events.json\" );\n+        trackerBundleParams.setImportStrategy( TrackerImportStrategy.CREATE );\n+\n+        TrackerImportReport trackerImportReport = trackerImportService.importTracker( trackerBundleParams );\n+\n+        assertEquals( TrackerStatus.OK, trackerImportReport.getStatus() );\n+        assertEquals( 0, trackerImportReport.getValidationReport().getErrorReports().size() );\n+\n+        trackerBundleParams.setImportStrategy( UPDATE );\n+\n+        trackerImportReport = trackerImportService.importTracker( trackerBundleParams );\n \n+        assertEquals( TrackerStatus.OK, trackerImportReport.getStatus() );\n+        assertEquals( 0, trackerImportReport.getValidationReport().getErrorReports().size() );\n     }\n \n     @Test\n", "next_change": {"commit": "22d5da9d9a812b02eb5acd643112a6b050b5d63c", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EventImportValidationTest.java b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EventImportValidationTest.java\nindex 74d0923d94..865baafdae 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EventImportValidationTest.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EventImportValidationTest.java\n", "chunk": "@@ -110,290 +111,224 @@ public class EventImportValidationTest\n     {\n         renderService = _renderService;\n         userService = _userService;\n-\n         Map<Class<? extends IdentifiableObject>, List<IdentifiableObject>> metadata = renderService.fromMetadata(\n             new ClassPathResource( \"tracker/tracker_basic_metadata.json\" ).getInputStream(), RenderFormat.JSON );\n-\n         ObjectBundleParams params = new ObjectBundleParams();\n         params.setObjectBundleMode( ObjectBundleMode.COMMIT );\n         params.setImportStrategy( ImportStrategy.CREATE );\n         params.setObjects( metadata );\n-\n         ObjectBundle bundle = objectBundleService.create( params );\n         ObjectBundleValidationReport validationReport = objectBundleValidationService.validate( bundle );\n         assertFalse( validationReport.hasErrorReports() );\n-\n         ObjectBundleCommitReport commit = objectBundleService.commit( bundle );\n         assertFalse( commit.hasErrorReports() );\n-\n         TrackerImportParams trackerImportParams = createBundleFromJson(\n             \"tracker/validations/enrollments_te_te-data.json\" );\n-\n         User user = userService.getUser( ADMIN_USER_UID );\n         trackerImportParams.setUser( user );\n-\n         TrackerImportReport trackerImportReport = trackerImportService.importTracker( trackerImportParams );\n-\n         assertEquals( 0, trackerImportReport.getValidationReport().getErrorReports().size() );\n         assertEquals( TrackerStatus.OK, trackerImportReport.getStatus() );\n-\n-        trackerImportParams = renderService\n-            .fromJson(\n-                new ClassPathResource( \"tracker/validations/enrollments_te_enrollments-data.json\" ).getInputStream(),\n-                TrackerImportParams.class );\n-\n+        trackerImportParams = renderService.fromJson(\n+            new ClassPathResource( \"tracker/validations/enrollments_te_enrollments-data.json\" ).getInputStream(),\n+            TrackerImportParams.class );\n         trackerImportParams.setUser( user );\n-\n         trackerImportReport = trackerImportService.importTracker( trackerImportParams );\n-\n         assertEquals( 0, trackerImportReport.getValidationReport().getErrorReports().size() );\n         assertEquals( TrackerStatus.OK, trackerImportReport.getStatus() );\n     }\n \n     @Test\n-    public void failValidationWhenTrackedEntityAttributeHasWrongOptionValue()\n+    void failValidationWhenTrackedEntityAttributeHasWrongOptionValue()\n         throws IOException\n     {\n         TrackerImportParams params = createBundleFromJson(\n             \"tracker/validations/events-with_invalid_option_value.json\" );\n         params.setImportStrategy( TrackerImportStrategy.CREATE );\n-\n         TrackerImportReport trackerImportReport = trackerImportService.importTracker( params );\n-\n         assertEquals( 1, trackerImportReport.getValidationReport().getErrorReports().size() );\n-\n         assertThat( trackerImportReport.getValidationReport().getErrorReports(),\n             everyItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1125 ) ) ) );\n     }\n \n     @Test\n-    public void successWhenTrackedEntityAttributeHasValidOptionValue()\n+    void successWhenTrackedEntityAttributeHasValidOptionValue()\n         throws IOException\n     {\n-        TrackerImportParams params = createBundleFromJson(\n-            \"tracker/validations/events-with_valid_option_value.json\" );\n+        TrackerImportParams params = createBundleFromJson( \"tracker/validations/events-with_valid_option_value.json\" );\n         params.setImportStrategy( TrackerImportStrategy.CREATE );\n-\n         TrackerImportReport trackerImportReport = trackerImportService.importTracker( params );\n-\n         assertEquals( 0, trackerImportReport.getValidationReport().getErrorReports().size() );\n     }\n \n     @Test\n-    public void testEventValidationOkAll()\n+    void testEventValidationOkAll()\n         throws IOException\n     {\n         TrackerImportParams trackerBundleParams = createBundleFromJson( \"tracker/validations/events-data.json\" );\n         trackerBundleParams.setImportStrategy( TrackerImportStrategy.CREATE );\n-\n         TrackerImportReport trackerImportReport = trackerImportService.importTracker( trackerBundleParams );\n-\n         assertEquals( TrackerStatus.OK, trackerImportReport.getStatus() );\n         assertEquals( 0, trackerImportReport.getValidationReport().getErrorReports().size() );\n     }\n \n     @Test\n-    public void testTrackerAndProgramEventUpdateSuccess()\n+    void testTrackerAndProgramEventUpdateSuccess()\n         throws IOException\n     {\n         TrackerImportParams trackerBundleParams = createBundleFromJson(\n             \"tracker/validations/program_and_tracker_events.json\" );\n         trackerBundleParams.setImportStrategy( TrackerImportStrategy.CREATE );\n-\n         TrackerImportReport trackerImportReport = trackerImportService.importTracker( trackerBundleParams );\n-\n         assertEquals( TrackerStatus.OK, trackerImportReport.getStatus() );\n         assertEquals( 0, trackerImportReport.getValidationReport().getErrorReports().size() );\n-\n         trackerBundleParams.setImportStrategy( UPDATE );\n-\n         trackerImportReport = trackerImportService.importTracker( trackerBundleParams );\n-\n         assertEquals( TrackerStatus.OK, trackerImportReport.getStatus() );\n         assertEquals( 0, trackerImportReport.getValidationReport().getErrorReports().size() );\n     }\n \n     @Test\n-    public void testCantWriteAccessCatCombo()\n+    void testCantWriteAccessCatCombo()\n         throws IOException\n     {\n         TrackerImportParams trackerImportParams = createBundleFromJson(\n             \"tracker/validations/events-cat-write-access.json\" );\n-\n         User user = userService.getUser( USER_6 );\n         trackerImportParams.setUser( user );\n         trackerImportParams.setImportStrategy( TrackerImportStrategy.CREATE );\n-\n         TrackerImportReport trackerImportReport = trackerImportService.importTracker( trackerImportParams );\n-\n         assertEquals( 4, trackerImportReport.getValidationReport().getErrorReports().size() );\n-\n         assertThat( trackerImportReport.getValidationReport().getErrorReports(),\n             hasItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1099 ) ) ) );\n-\n         assertThat( trackerImportReport.getValidationReport().getErrorReports(),\n             hasItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1104 ) ) ) );\n-\n         assertThat( trackerImportReport.getValidationReport().getErrorReports(),\n             hasItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1096 ) ) ) );\n-\n         assertThat( trackerImportReport.getValidationReport().getErrorReports(),\n             hasItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1095 ) ) ) );\n     }\n \n     @Test\n-    public void testNoWriteAccessToOrg()\n+    void testNoWriteAccessToOrg()\n         throws IOException\n     {\n         TrackerImportParams trackerBundleParams = createBundleFromJson( \"tracker/validations/events-data.json\" );\n-\n         User user = userService.getUser( USER_2 );\n         trackerBundleParams.setUser( user );\n         trackerBundleParams.setImportStrategy( TrackerImportStrategy.CREATE );\n-\n         TrackerImportReport trackerImportReport = trackerImportService.importTracker( trackerBundleParams );\n-\n         assertEquals( 1, trackerImportReport.getValidationReport().getErrorReports().size() );\n-\n         assertThat( trackerImportReport.getValidationReport().getErrorReports(),\n             hasItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1000 ) ) ) );\n     }\n \n     @Test\n-    public void testNonRepeatableProgramStage()\n+    void testNonRepeatableProgramStage()\n         throws IOException\n     {\n         TrackerImportParams trackerImportParams = fromJson(\n             \"tracker/validations/events_non-repeatable-programstage_part1.json\",\n             userService.getUser( ADMIN_USER_UID ) );\n         trackerImportParams.setImportStrategy( TrackerImportStrategy.CREATE );\n-\n         TrackerImportReport trackerImportReport = trackerImportService.importTracker( trackerImportParams );\n-\n         assertEquals( 0, trackerImportReport.getValidationReport().getErrorReports().size() );\n-\n-        trackerImportParams = fromJson(\n-            \"tracker/validations/events_non-repeatable-programstage_part2.json\",\n+        trackerImportParams = fromJson( \"tracker/validations/events_non-repeatable-programstage_part2.json\",\n             userService.getUser( ADMIN_USER_UID ) );\n-\n         trackerImportParams.setImportStrategy( TrackerImportStrategy.CREATE );\n-\n         trackerImportReport = trackerImportService.importTracker( trackerImportParams );\n-\n         assertEquals( 1, trackerImportReport.getValidationReport().getErrorReports().size() );\n-\n         assertThat( trackerImportReport.getValidationReport().getErrorReports(),\n             hasItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1039 ) ) ) );\n     }\n \n-    @Test( expected = IOException.class )\n-    public void testWrongScheduledDateString()\n-        throws IOException\n+    @Test\n+    void testWrongScheduledDateString()\n     {\n-        createBundleFromJson( \"tracker/validations/events_error-no-wrong-date.json\" );\n+        assertThrows( IOException.class,\n+            () -> createBundleFromJson( \"tracker/validations/events_error-no-wrong-date.json\" ) );\n     }\n \n     @Test\n-    public void testNonDefaultCategoryCombo()\n+    void testNonDefaultCategoryCombo()\n         throws IOException\n     {\n         TrackerImportParams trackerBundleParams = createBundleFromJson(\n             \"tracker/validations/events_non-default-combo.json\" );\n         trackerBundleParams.setImportStrategy( TrackerImportStrategy.CREATE );\n-\n         TrackerImportReport trackerImportReport = trackerImportService.importTracker( trackerBundleParams );\n-\n         assertEquals( 1, trackerImportReport.getValidationReport().getErrorReports().size() );\n-\n         assertThat( trackerImportReport.getValidationReport().getErrorReports(),\n             hasItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1055 ) ) ) );\n     }\n \n     @Test\n-    public void testNoCategoryOptionCombo()\n+    void testNoCategoryOptionCombo()\n         throws IOException\n     {\n         TrackerImportParams trackerBundleParams = createBundleFromJson(\n             \"tracker/validations/events_cant-find-cat-opt-combo.json\" );\n         trackerBundleParams.setImportStrategy( TrackerImportStrategy.CREATE );\n-\n         TrackerImportReport trackerImportReport = trackerImportService.importTracker( trackerBundleParams );\n-\n         assertEquals( 1, trackerImportReport.getValidationReport().getErrorReports().size() );\n-\n         assertThat( trackerImportReport.getValidationReport().getErrorReports(),\n             hasItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1115 ) ) ) );\n     }\n \n     @Test\n-    public void testNoCategoryOption()\n+    void testNoCategoryOption()\n         throws IOException\n     {\n         TrackerImportParams trackerBundleParams = createBundleFromJson(\n             \"tracker/validations/events_cant-find-cat-option.json\" );\n         trackerBundleParams.setImportStrategy( TrackerImportStrategy.CREATE );\n-\n         TrackerImportReport trackerImportReport = trackerImportService.importTracker( trackerBundleParams );\n         assertEquals( 1, trackerImportReport.getValidationReport().getErrorReports().size() );\n-\n         assertThat( trackerImportReport.getValidationReport().getErrorReports(),\n             hasItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1116 ) ) ) );\n     }\n \n     @Test\n-    public void testNoCategoryOptionComboSet()\n+    void testNoCategoryOptionComboSet()\n         throws IOException\n     {\n         TrackerImportParams trackerBundleParams = createBundleFromJson(\n             \"tracker/validations/events_cant-find-cat-option-combo-set.json\" );\n         trackerBundleParams.setImportStrategy( TrackerImportStrategy.CREATE );\n-\n         TrackerImportReport trackerImportReport = trackerImportService.importTracker( trackerBundleParams );\n-\n         assertEquals( 2, trackerImportReport.getValidationReport().getErrorReports().size() );\n-\n         assertThat( trackerImportReport.getValidationReport().getErrorReports(),\n             hasItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1117 ) ) ) );\n     }\n \n     @Test\n-    public void testWrongDatesInCatCombo()\n+    void testWrongDatesInCatCombo()\n         throws IOException\n     {\n         TrackerImportParams trackerBundleParams = createBundleFromJson(\n             \"tracker/validations/events_combo-date-wrong.json\" );\n         trackerBundleParams.setImportStrategy( TrackerImportStrategy.CREATE );\n-\n         TrackerImportReport trackerImportReport = trackerImportService.importTracker( trackerBundleParams );\n-\n         assertEquals( 2, trackerImportReport.getValidationReport().getErrorReports().size() );\n-\n         assertThat( trackerImportReport.getValidationReport().getErrorReports(),\n             hasItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1056 ) ) ) );\n-\n         assertThat( trackerImportReport.getValidationReport().getErrorReports(),\n             hasItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1057 ) ) ) );\n     }\n \n     @Test\n-    public void testValidateAndAddNotesToEvent()\n+    void testValidateAndAddNotesToEvent()\n         throws IOException\n     {\n         Date now = new Date();\n-\n         // When\n-\n         TrackerImportReport trackerImportReport = createEvent( \"tracker/validations/events-with-notes-data.json\" );\n-\n         // Then\n-\n         // Fetch the UID of the newly created event\n         final ProgramStageInstance programStageInstance = getEventFromReport( trackerImportReport );\n-\n         assertThat( programStageInstance.getComments(), hasSize( 3 ) );\n         // Validate note content\n         Stream.of( \"first note\", \"second note\", \"third note\" ).forEach( t -> {\n-\n             TrackedEntityComment comment = getByComment( programStageInstance.getComments(), t );\n             assertTrue( CodeGenerator.isValidUid( comment.getUid() ) );\n             assertTrue( comment.getCreated().getTime() > now.getTime() );\n", "next_change": {"commit": "d117ff9ce355694569f7c6477141cf35c6412609", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EventImportValidationTest.java b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EventImportValidationTest.java\nindex 865baafdae..05224a97ca 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EventImportValidationTest.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EventImportValidationTest.java\n", "chunk": "@@ -333,7 +351,7 @@ class EventImportValidationTest extends AbstractImportValidationTest\n             assertTrue( CodeGenerator.isValidUid( comment.getUid() ) );\n             assertTrue( comment.getCreated().getTime() > now.getTime() );\n             assertTrue( comment.getLastUpdated().getTime() > now.getTime() );\n-            assertNotNull( comment.getCreator() );\n+            assertNull( comment.getCreator() );\n             assertEquals( ADMIN_USER_UID, comment.getLastUpdatedBy().getUid() );\n         } );\n     }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "message": "Merge commit", "committedDate": null}, {"oid": "0a2a7f9418c217602f78eb701e251294d4919912", "committedDate": "2020-07-14 09:02:09 +0200", "message": "feat: ProgramInstance pre-heater"}, {"oid": "c07b9f0658356e7b60659651ee989460e50e1be8", "committedDate": "2020-07-14 15:02:03 +0200", "message": "fix: removed todo, fixed one test, ignored another"}, {"oid": "88b69c7c9d78d6eaf767a96c9b44f18f933fa510", "committedDate": "2020-07-14 15:35:22 +0200", "message": "chore: removed unused import"}, {"oid": "2ed799f33ca26b918ed60473a3f097714f00492e", "committedDate": "2020-08-04 10:30:01 +0200", "message": "chore: Clean up code (#5877)"}, {"oid": "4c92c6dcc7bae69cef6889b95f7882ac8364ab80", "committedDate": "2020-08-04 15:04:46 +0200", "message": "Merge pull request #5848 from dhis2/DHIS2-8879-TECH402"}, {"oid": "3e3dc98d92f0c13fb56cf17894eab06a78842133", "committedDate": "2020-08-04 17:20:37 +0200", "message": "feat: Enrollment/Events note persistence"}, {"oid": "c22c6f59ea7f5b3eec062a2f4eb00f2c4dae2a2d", "committedDate": "2020-08-04 17:20:41 +0200", "message": "chore: javadoc"}, {"oid": "6e1e12a2fe3c14f79781d64ec3f890f680cf49a4", "committedDate": "2020-08-24 15:50:03 +0200", "message": "feat: Added support for data values in event import [DHIS2-9270]"}, {"oid": "cb2ee65c0210c0d4b2bd8851789da8d4adfaf04d", "committedDate": "2020-09-07 10:28:21 +0200", "message": "fix: [DHIS2-9287] Fix the stats in the import summary (#6062)"}, {"oid": "2670177207885cb54b4b51516d55749ab8836588", "committedDate": "2020-11-13 14:02:16 +0100", "message": "fix: correct validation rule for Event's TEI value (#6655)"}, {"oid": "71b9cc9066ade25caca07d78d8e5f6e946c7133f", "committedDate": "2020-11-24 12:12:26 +0100", "message": "feat: fail validation on missing enrollment in event (#6749)"}, {"oid": "3e799d196b8f73ad216ea100a07ddd5f7dfc53e0", "committedDate": "2020-11-30 16:37:14 +0100", "message": "fix: remove long running transaction during Tracker Import (#6782)"}, {"oid": "a9aa89a8d5134104503d1cbb43f96b06f3531569", "committedDate": "2020-12-02 11:10:05 +0100", "message": "fix: Manage event scheduleAt date [DHIS2-10009] (#6804)"}, {"oid": "c9397132d35e1394cef55720639f8649005a96ad", "committedDate": "2020-12-03 17:07:36 +0100", "message": "fix: prevent changes to a deleted event (#6820)"}, {"oid": "a84324f8f0693fcdd0ee78c846ca7fbe9b5557d8", "committedDate": "2020-12-04 09:53:51 +0100", "message": "fix: Only return one error if programStage is null [DHIS2-9946] (#6802)"}, {"oid": "3ab88a5f4623a8c749246bedef34fcb926d185cb", "committedDate": "2020-12-08 10:40:14 +0100", "message": "fix: [DHIS2-7310] Move rule engine call and validations after bundle validation (#6843)"}, {"oid": "46a4fb9730a952d5cbc36bce0718757e6edd2809", "committedDate": "2020-12-15 15:50:22 +0100", "message": "fix: DHIS2-10084 prevent changes to deleted tracked entities (#6882)"}, {"oid": "3e25b9b834757233501b068c1fd96b5b68cc22f7", "committedDate": "2020-12-22 12:59:13 +0100", "message": "feat: Convert sharing objects to JSONB structure [DHIS2-5814]"}, {"oid": "5e4669b4c89c809989ea600900735dd71baa86e2", "committedDate": "2020-12-23 14:00:18 +0700", "message": "feat: Upgrade Hibernate  (#6939)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "055574bea49c3a40c5cfff3cb86694fc4bd12c45", "committedDate": "2021-01-12 15:26:26 +0100", "message": "perf: replace expensive \"Program has OrgUnit\" call with faster SQL (#6930)"}, {"oid": "6e8f0d6c150b303d780b397f7646ff3383f16250", "committedDate": "2021-01-21 09:32:50 +0100", "message": "feat: new tracked dto's properties referring to a date, now use Instant instead of String [DHIS2-101239] (#7119)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "e8fc1401f2bc43df10a954a4e387c96125ce64aa", "committedDate": "2021-02-05 13:56:50 +0100", "message": "fix: Ignore incoming notes with existing UID [DHIS2-10302] (#7270)"}, {"oid": "40fda8e0c1025bfdc425c0f0da547443831c4c41", "committedDate": "2021-02-10 12:01:12 +0100", "message": "fix: [DHIS2-10430] New validation hook to check mandatory fields (#7305)"}, {"oid": "c25b817a180f24b3de6b26d5a089563aa336aa8c", "committedDate": "2021-03-05 10:44:25 +0100", "message": "feat: Validation for values with option sets [DHIS2-10452] (#7512)"}, {"oid": "33f99931474be434371691a439a56becb9f23025", "committedDate": "2021-04-07 10:36:15 +0200", "message": "refactor: Clean up metadata and relations validation hooks [TECH-579] (#7807)"}, {"oid": "c71a97bf6c13f342a7c972c7061dab2b61d9d587", "committedDate": "2021-04-08 08:14:46 +0200", "message": "refactor: Clean up redundant integration tests for validation hooks [TECH-579] (#7811)"}, {"oid": "db043f2d252ab92e85756413bce7515a315e3caa", "committedDate": "2021-04-20 10:33:49 +0200", "message": "feat: Remove tracked entity field from event [DHIS2-10875] (#7878)"}, {"oid": "20dfefe359779d7e1c1921ba920465227e72f071", "committedDate": "2021-05-25 12:55:24 +0200", "message": "fix: Remove validations from objects deletion service in new tracker importer [DHIS2-10789] (#8053)"}, {"oid": "7d032be663a1d9444d4bc1dbf3bc20ff0f861ec1", "committedDate": "2021-05-26 16:49:59 +0200", "message": "refactor: Clean up integration tests in the new importer [TECH-589] (#8076)"}, {"oid": "fe04922e144ac69367a99840d5518edda2d67f38", "committedDate": "2021-06-03 08:17:10 +0200", "message": "fix: Make program field read-only in event payload [DHIS2-11225] (#8086)"}, {"oid": "7b96fb3ee32dc67e5686ce315d2a041825a74630", "committedDate": "2021-06-21 10:46:39 +0200", "message": "refactor: Refactor some validators and improved test coverage [TECH-589] (#8234)"}, {"oid": "0011c1ecd695c78405824a569c706b484a5fd552", "committedDate": "2021-07-05 12:38:04 +0700", "message": "chore: error reports as ADT (avoid collections) (#8353)"}, {"oid": "66ada0b7ff1df459a7935a232eb67be54ef81d2e", "committedDate": "2021-09-21 10:13:27 +0200", "message": "test: adds test for notes (DHIS2-11764)  (#8760)"}, {"oid": "38a5a7eb2ef709441107868af50d5647faaa73ca", "committedDate": "2021-10-07 13:26:51 +0200", "message": "fix: Check if enrollment is null in updatable validator (#8867)"}, {"oid": "661e0366d360cb3107efdf2e3716f040ced004f9", "committedDate": "2021-12-14 13:50:06 +0100", "message": "chore: migrate to JUnit assertThrows (#9461)"}, {"oid": "22d5da9d9a812b02eb5acd643112a6b050b5d63c", "committedDate": "2021-12-16 13:19:38 +0100", "message": "chore: migrate tests to JUnit 5 (#9467)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "7c0131dfcfbf72dad27dc5f0a3f6a776e286c79a", "committedDate": "2022-01-11 17:47:56 +0100", "message": "chore: make TrackerValidationReport add methods fluent and name Timing TECH-880 (#9601)"}, {"oid": "5ff1a79c886b646c6e0289c6d14621c4d888b07c", "committedDate": "2022-02-15 14:45:30 +0100", "message": "fix: attributeOptionCombo is not required in NTI DHIS2-12460 (#9747)"}, {"oid": "8ccf9a288a67e5ee5349024fd3d281372c64c956", "committedDate": "2022-02-22 13:25:35 +0800", "message": "feat: Merge User/UserCredentials into one DB table (#9754)"}, {"oid": "d117ff9ce355694569f7c6477141cf35c6412609", "committedDate": "2022-03-04 11:13:40 +0100", "message": "fix: Return complete information for user fields in NTI [DHIS2-12717] (#9936)"}, {"oid": "ef0cbd365e47f1f88befb80d9650cce75280bd35", "committedDate": "2022-03-08 15:12:00 +0100", "message": "chore: move DB access and mutation to preheat and preprocessor DHIS2-12623 (#9904)"}, {"oid": "7b4551dd459386ffc228f4e38471237442a693c4", "committedDate": "2022-03-15 09:07:29 +0100", "message": "fix: Missing errorReports when using DELETE strategy and validation fails (event, tei) [ DHIS2-12685 ] (#10040)"}, {"oid": "2f44bf54a94fca80ec8bef3a160d403665973bed", "committedDate": "2022-05-23 06:02:37 +0200", "message": "chore: Clean up user management in tracker tests [TECH-890] (#10862)"}, {"oid": "5a68c39389bb9088aa2ce47790abc7014a093f64", "committedDate": "2022-05-27 09:59:23 +0200", "message": "performance: Try to speed up tracker tests [TECH-890] (#10869)"}, {"oid": "6b39184ce68d45d2d75a08c3d6b45fe012395457", "committedDate": "2022-06-03 08:16:09 +0200", "message": "test: use assertNoImportErrors for better context (#10989)"}, {"oid": "6e83eba877030575456f919de1bce55fcae8e517", "committedDate": "2022-06-24 10:01:46 +0200", "message": "test: move all integration tests into own module TECH-1209 (#11148)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYxNTYxOQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446615619", "body": "Maybe instead of just the ///// a few places, if could be /***** assert output ****/ or something if you want to separate the test run from the verification...", "bodyText": "Maybe instead of just the ///// a few places, if could be /***** assert output ****/ or something if you want to separate the test run from the verification...", "bodyHTML": "<p dir=\"auto\">Maybe instead of just the ///// a few places, if could be /***** assert output ****/ or something if you want to separate the test run from the verification...</p>", "author": "mortenoh", "createdAt": "2020-06-28T07:55:13Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentImportValidationTest.java", "diffHunk": "@@ -0,0 +1,682 @@\n+package org.hisp.dhis.tracker.validation;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.hisp.dhis.common.IdentifiableObject;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundle;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundleMode;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundleParams;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundleService;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundleValidationService;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.feedback.ObjectBundleCommitReport;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.feedback.ObjectBundleValidationReport;\n+import org.hisp.dhis.feedback.ErrorReport;\n+import org.hisp.dhis.importexport.ImportStrategy;\n+import org.hisp.dhis.render.RenderFormat;\n+import org.hisp.dhis.render.RenderService;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstanceService;\n+import org.hisp.dhis.tracker.TrackerImportStrategy;\n+import org.hisp.dhis.tracker.bundle.TrackerBundle;\n+import org.hisp.dhis.tracker.bundle.TrackerBundleParams;\n+import org.hisp.dhis.tracker.bundle.TrackerBundleService;\n+import org.hisp.dhis.tracker.report.TrackerBundleReport;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.TrackerStatus;\n+import org.hisp.dhis.tracker.report.TrackerValidationReport;\n+import org.hisp.dhis.user.User;\n+import org.hisp.dhis.user.UserService;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.io.ClassPathResource;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasItem;\n+import static org.hamcrest.Matchers.hasProperty;\n+import static org.hamcrest.core.Every.everyItem;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+@Slf4j\n+public class EnrollmentImportValidationTest\n+    extends AbstractImportValidationTest\n+\n+{\n+    @Autowired\n+    protected TrackedEntityInstanceService trackedEntityInstanceService;\n+\n+    @Autowired\n+    private TrackerBundleService trackerBundleService;\n+\n+    @Autowired\n+    private ObjectBundleService objectBundleService;\n+\n+    @Autowired\n+    private ObjectBundleValidationService objectBundleValidationService;\n+\n+    @Autowired\n+    private DefaultTrackerValidationService trackerValidationService;\n+\n+    @Autowired\n+    private RenderService _renderService;\n+\n+    @Autowired\n+    private UserService _userService;\n+\n+    @Override\n+    protected void setUpTest()\n+        throws IOException\n+    {\n+        renderService = _renderService;\n+        userService = _userService;\n+\n+        Map<Class<? extends IdentifiableObject>, List<IdentifiableObject>> metadata = renderService.fromMetadata(\n+            new ClassPathResource( \"tracker/tracker_basic_metadata.json\" ).getInputStream(), RenderFormat.JSON );\n+\n+        ObjectBundleParams params = new ObjectBundleParams();\n+        params.setObjectBundleMode( ObjectBundleMode.COMMIT );\n+        params.setImportStrategy( ImportStrategy.CREATE );\n+        params.setObjects( metadata );\n+\n+        ObjectBundle bundle = objectBundleService.create( params );\n+        ObjectBundleValidationReport validationReport = objectBundleValidationService.validate( bundle );\n+        List<ErrorReport> errorReports = validationReport.getErrorReports();\n+        assertTrue( errorReports.isEmpty() );\n+\n+        ObjectBundleCommitReport commit = objectBundleService.commit( bundle );\n+        List<ErrorReport> objectReport = commit.getErrorReports();\n+        assertTrue( objectReport.isEmpty() );\n+\n+        /////", "originalCommit": "ad5654dcf03fa2ccb82adad686d9e13dde5a93b0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYyNjM2Ng==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446626366", "bodyText": "This is just some left over scribbling. Will remove", "author": "netroms", "createdAt": "2020-06-28T09:30:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYxNTYxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "c5a94c3d798ab59a16b994801255c4ac2631887b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentImportValidationTest.java b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentImportValidationTest.java\nindex 8a6aae1b85..a3be455f83 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentImportValidationTest.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentImportValidationTest.java\n", "chunk": "@@ -121,8 +121,6 @@ public class EnrollmentImportValidationTest\n         List<ErrorReport> objectReport = commit.getErrorReports();\n         assertTrue( objectReport.isEmpty() );\n \n-        /////\n-\n         TrackerBundleParams trackerBundleParams = createBundleFromJson(\n             \"tracker/validations/enrollments_te_te-data.json\" );\n \n", "next_change": null}]}, "revised_code_in_main": {"commit": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentImportValidationTest.java b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentImportValidationTest.java\nindex 8a6aae1b85..82c9b1ecd8 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentImportValidationTest.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentImportValidationTest.java\n", "chunk": "@@ -121,8 +122,6 @@ public class EnrollmentImportValidationTest\n         List<ErrorReport> objectReport = commit.getErrorReports();\n         assertTrue( objectReport.isEmpty() );\n \n-        /////\n-\n         TrackerBundleParams trackerBundleParams = createBundleFromJson(\n             \"tracker/validations/enrollments_te_te-data.json\" );\n \n", "next_change": {"commit": "cb2ee65c0210c0d4b2bd8851789da8d4adfaf04d", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentImportValidationTest.java b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentImportValidationTest.java\nindex 82c9b1ecd8..2802eb0ee4 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentImportValidationTest.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentImportValidationTest.java\n", "chunk": "@@ -125,7 +122,7 @@ public class EnrollmentImportValidationTest\n         TrackerBundleParams trackerBundleParams = createBundleFromJson(\n             \"tracker/validations/enrollments_te_te-data.json\" );\n \n-        TrackerBundle trackerBundle = trackerBundleService.create( trackerBundleParams ).get( 0 );\n+        TrackerBundle trackerBundle = trackerBundleService.create( trackerBundleParams );\n         assertEquals( 4, trackerBundle.getTrackedEntities().size() );\n \n         TrackerValidationReport report = trackerValidationService.validate( trackerBundle );\n", "next_change": {"commit": "2670177207885cb54b4b51516d55749ab8836588", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentImportValidationTest.java b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentImportValidationTest.java\nindex 2802eb0ee4..9bb705e4f4 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentImportValidationTest.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentImportValidationTest.java\n", "chunk": "@@ -123,7 +123,7 @@ public class EnrollmentImportValidationTest\n             \"tracker/validations/enrollments_te_te-data.json\" );\n \n         TrackerBundle trackerBundle = trackerBundleService.create( trackerBundleParams );\n-        assertEquals( 4, trackerBundle.getTrackedEntities().size() );\n+        assertEquals( 5, trackerBundle.getTrackedEntities().size() );\n \n         TrackerValidationReport report = trackerValidationService.validate( trackerBundle );\n         assertEquals( 0, report.getErrorReports().size() );\n", "next_change": {"commit": "3e799d196b8f73ad216ea100a07ddd5f7dfc53e0", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentImportValidationTest.java b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentImportValidationTest.java\nindex 9bb705e4f4..0440c39767 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentImportValidationTest.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentImportValidationTest.java\n", "chunk": "@@ -80,46 +64,17 @@ public class EnrollmentImportValidationTest\n     @Autowired\n     private TrackerBundleService trackerBundleService;\n \n-    @Autowired\n-    private ObjectBundleService objectBundleService;\n-\n-    @Autowired\n-    private ObjectBundleValidationService objectBundleValidationService;\n-\n     @Autowired\n     private DefaultTrackerValidationService trackerValidationService;\n \n-    @Autowired\n-    private RenderService _renderService;\n-\n-    @Autowired\n-    private UserService _userService;\n-\n     @Override\n-    protected void setUpTest()\n+    protected void initTest()\n         throws IOException\n     {\n-        renderService = _renderService;\n-        userService = _userService;\n \n-        Map<Class<? extends IdentifiableObject>, List<IdentifiableObject>> metadata = renderService.fromMetadata(\n-            new ClassPathResource( \"tracker/tracker_basic_metadata.json\" ).getInputStream(), RenderFormat.JSON );\n+        setUpMetadata( \"tracker/tracker_basic_metadata.json\" );\n \n-        ObjectBundleParams params = new ObjectBundleParams();\n-        params.setObjectBundleMode( ObjectBundleMode.COMMIT );\n-        params.setImportStrategy( ImportStrategy.CREATE );\n-        params.setObjects( metadata );\n-\n-        ObjectBundle bundle = objectBundleService.create( params );\n-        ObjectBundleValidationReport validationReport = objectBundleValidationService.validate( bundle );\n-        List<ErrorReport> errorReports = validationReport.getErrorReports();\n-        assertTrue( errorReports.isEmpty() );\n-\n-        ObjectBundleCommitReport commit = objectBundleService.commit( bundle );\n-        List<ErrorReport> objectReport = commit.getErrorReports();\n-        assertTrue( objectReport.isEmpty() );\n-\n-        TrackerBundleParams trackerBundleParams = createBundleFromJson(\n+        TrackerImportParams trackerBundleParams = createBundleFromJson(\n             \"tracker/validations/enrollments_te_te-data.json\" );\n \n         TrackerBundle trackerBundle = trackerBundleService.create( trackerBundleParams );\n", "next_change": {"commit": "cec6d680166157cab52adeae7583410083940255", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentImportValidationTest.java b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentImportValidationTest.java\nindex 0440c39767..0a464146f3 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentImportValidationTest.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentImportValidationTest.java\n", "chunk": "@@ -77,14 +77,10 @@ public class EnrollmentImportValidationTest\n         TrackerImportParams trackerBundleParams = createBundleFromJson(\n             \"tracker/validations/enrollments_te_te-data.json\" );\n \n-        TrackerBundle trackerBundle = trackerBundleService.create( trackerBundleParams );\n-        assertEquals( 5, trackerBundle.getTrackedEntities().size() );\n-\n-        TrackerValidationReport report = trackerValidationService.validate( trackerBundle );\n-        assertEquals( 0, report.getErrorReports().size() );\n+        TrackerImportReport trackerImportReport = trackerImportService.importTracker( trackerBundleParams );\n+        assertEquals( TrackerStatus.OK, trackerImportReport.getStatus() );\n \n-        TrackerBundleReport bundleReport = trackerBundleService.commit( trackerBundle );\n-        assertEquals( TrackerStatus.OK, bundleReport.getStatus() );\n+        manager.flush();\n     }\n \n     @Test\n", "next_change": {"commit": "22d5da9d9a812b02eb5acd643112a6b050b5d63c", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentImportValidationTest.java b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentImportValidationTest.java\nindex 0a464146f3..24cd3c9920 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentImportValidationTest.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentImportValidationTest.java\n", "chunk": "@@ -40,192 +41,147 @@ import org.hisp.dhis.program.ProgramInstanceService;\n import org.hisp.dhis.tracker.TrackerImportParams;\n import org.hisp.dhis.tracker.TrackerImportService;\n import org.hisp.dhis.tracker.TrackerImportStrategy;\n-import org.hisp.dhis.tracker.bundle.TrackerBundle;\n-import org.hisp.dhis.tracker.bundle.TrackerBundleService;\n-import org.hisp.dhis.tracker.report.*;\n+import org.hisp.dhis.tracker.TrackerType;\n+import org.hisp.dhis.tracker.preheat.TrackerPreheat;\n+import org.hisp.dhis.tracker.preheat.TrackerPreheatService;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.TrackerImportReport;\n+import org.hisp.dhis.tracker.report.TrackerStatus;\n+import org.hisp.dhis.tracker.report.TrackerValidationReport;\n import org.hisp.dhis.user.User;\n-import org.junit.Ignore;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.core.io.ClassPathResource;\n \n /**\n  * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n  */\n-public class EnrollmentImportValidationTest\n-    extends AbstractImportValidationTest\n+class EnrollmentImportValidationTest extends AbstractImportValidationTest\n {\n-    @Autowired\n-    protected ProgramInstanceService programInstanceService;\n \n     @Autowired\n-    private TrackerBundleService trackerBundleService;\n+    protected ProgramInstanceService programInstanceService;\n \n     @Autowired\n     private TrackerImportService trackerImportService;\n \n     @Autowired\n-    private DefaultTrackerValidationService trackerValidationService;\n+    private TrackerPreheatService trackerPreheatService;\n \n     @Override\n     protected void initTest()\n         throws IOException\n     {\n-\n         setUpMetadata( \"tracker/tracker_basic_metadata.json\" );\n-\n         TrackerImportParams trackerBundleParams = createBundleFromJson(\n             \"tracker/validations/enrollments_te_te-data.json\" );\n-\n         TrackerImportReport trackerImportReport = trackerImportService.importTracker( trackerBundleParams );\n         assertEquals( TrackerStatus.OK, trackerImportReport.getStatus() );\n-\n         manager.flush();\n     }\n \n     @Test\n-    public void testEnrollmentValidationOkAll()\n+    void testEnrollmentValidationOkAll()\n         throws IOException\n     {\n-        TrackerImportParams params = createBundleFromJson(\n-            \"tracker/validations/enrollments_te_enrollments-data.json\" );\n-\n+        TrackerImportParams params = createBundleFromJson( \"tracker/validations/enrollments_te_enrollments-data.json\" );\n         params.setImportStrategy( TrackerImportStrategy.CREATE );\n         TrackerImportReport trackerImportReport = trackerImportService.importTracker( params );\n-\n         assertEquals( 0, trackerImportReport.getValidationReport().getErrorReports().size() );\n         assertEquals( TrackerStatus.OK, trackerImportReport.getStatus() );\n     }\n \n-    @Test( expected = IOException.class )\n-    public void testDisplayIncidentDateTrueButDateValueIsInvalid()\n-        throws IOException\n-    {\n-        createBundleFromJson( \"tracker/validations/enrollments_error-displayIncident.json\" );\n-    }\n-\n     @Test\n-    public void testNoWriteAccessToOrg()\n+    void testPreheatOwnershipForSubsequentEnrollment()\n         throws IOException\n     {\n-        TrackerImportParams params = createBundleFromJson(\n-            \"tracker/validations/enrollments_te_enrollments-data.json\" );\n-\n-        User user = userService.getUser( USER_2 );\n-        params.setUser( user );\n-\n+        TrackerImportParams params = createBundleFromJson( \"tracker/validations/enrollments_te_enrollments-data.json\" );\n         params.setImportStrategy( TrackerImportStrategy.CREATE );\n         TrackerImportReport trackerImportReport = trackerImportService.importTracker( params );\n-\n-        assertEquals( 4, trackerImportReport.getValidationReport().getErrorReports().size() );\n-\n-        assertThat( trackerImportReport.getValidationReport().getErrorReports(),\n-            hasItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1000 ) ) ) );\n+        assertEquals( 0, trackerImportReport.getValidationReport().getErrorReports().size() );\n+        assertEquals( TrackerStatus.OK, trackerImportReport.getStatus() );\n+        TrackerImportParams secondParams = createBundleFromJson(\n+            \"tracker/validations/enrollments_te_enrollments-data.json\" );\n+        TrackerPreheat preheat = trackerPreheatService.preheat( secondParams );\n+        secondParams.getEnrollments().forEach( e -> {\n+            assertEquals( e.getOrgUnit(), preheat.getProgramOwner().get( e.getTrackedEntity() ).get( e.getProgram() )\n+                .getOrganisationUnit().getUid() );\n+        } );\n     }\n \n     @Test\n-    public void testNonRegProgram()\n-        throws IOException\n+    void testDisplayIncidentDateTrueButDateValueIsInvalid()\n     {\n-        TrackerImportParams params = createBundleFromJson(\n-            \"tracker/validations/enrollments_error-nonreg-program.json\" );\n-\n-        ValidateAndCommitTestUnit createAndUpdate = validateAndCommit( params, TrackerImportStrategy.CREATE );\n-\n-        TrackerValidationReport report = createAndUpdate.getValidationReport();\n-        printReport( report );\n-        assertEquals( 1, report.getErrorReports().size() );\n-\n-        assertThat( report.getErrorReports(),\n-            everyItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1014 ) ) ) );\n+        assertThrows( IOException.class,\n+            () -> createBundleFromJson( \"tracker/validations/enrollments_error-displayIncident.json\" ) );\n     }\n \n     @Test\n-    public void testTrackedEntityTypeMismatch()\n+    void testNoWriteAccessToOrg()\n         throws IOException\n     {\n-        TrackerImportParams params = createBundleFromJson(\n-            \"tracker/validations/enrollments_error-program-tet-mismatch-te.json\" );\n-\n-        ValidateAndCommitTestUnit createAndUpdate = validateAndCommit( params, TrackerImportStrategy.CREATE );\n-\n-        TrackerValidationReport report = createAndUpdate.getValidationReport();\n-        printReport( report );\n-        assertEquals( 1, report.getErrorReports().size() );\n-\n-        assertThat( report.getErrorReports(),\n-            everyItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1022 ) ) ) );\n+        TrackerImportParams params = createBundleFromJson( \"tracker/validations/enrollments_te_enrollments-data.json\" );\n+        User user = userService.getUser( USER_2 );\n+        params.setUser( user );\n+        params.setImportStrategy( TrackerImportStrategy.CREATE );\n+        TrackerImportReport trackerImportReport = trackerImportService.importTracker( params );\n+        assertEquals( 4, trackerImportReport.getValidationReport().getErrorReports().size() );\n+        assertThat( trackerImportReport.getValidationReport().getErrorReports(),\n+            hasItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1000 ) ) ) );\n     }\n \n     @Test\n-    public void testOnlyProgramAttributesAllowedOnEnrollments()\n+    void testOnlyProgramAttributesAllowedOnEnrollments()\n         throws IOException\n     {\n         TrackerImportParams params = createBundleFromJson(\n             \"tracker/validations/enrollments_error_non_program_attr.json\" );\n-\n-        ValidateAndCommitTestUnit createAndUpdate = validateAndCommit( params, TrackerImportStrategy.CREATE );\n-\n-        TrackerValidationReport validationReport = createAndUpdate.getValidationReport();\n-        printReport( validationReport );\n-\n-        assertEquals( 3, validationReport.getErrorReports().size() );\n-\n-        assertThat( validationReport.getErrorReports(),\n+        params.setImportStrategy( TrackerImportStrategy.CREATE );\n+        TrackerImportReport trackerImportReport = trackerImportService.importTracker( params );\n+        assertEquals( 3, trackerImportReport.getValidationReport().getErrorReports().size() );\n+        assertThat( trackerImportReport.getValidationReport().getErrorReports(),\n             everyItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1019 ) ) ) );\n     }\n \n     @Test\n-    public void testAttributesOk()\n+    void testAttributesOk()\n         throws IOException\n     {\n         TrackerImportParams params = createBundleFromJson( \"tracker/validations/enrollments_te_attr-data.json\" );\n-\n-        ValidateAndCommitTestUnit createAndUpdate = validateAndCommit( params, TrackerImportStrategy.CREATE );\n-        assertEquals( 1, createAndUpdate.getTrackerBundle().getEnrollments().size() );\n-\n-        TrackerValidationReport validationReport = createAndUpdate.getValidationReport();\n-        printReport( validationReport );\n-\n-        assertEquals( 0, validationReport.getErrorReports().size() );\n-\n-        assertThat( validationReport.getErrorReports(),\n+        params.setImportStrategy( TrackerImportStrategy.CREATE );\n+        TrackerImportReport trackerImportReport = trackerImportService.importTracker( params );\n+        assertEquals( 1, trackerImportReport.getBundleReport().getTypeReportMap().get( TrackerType.ENROLLMENT )\n+            .getObjectReportMap().values().size() );\n+        assertEquals( 0, trackerImportReport.getValidationReport().getErrorReports().size() );\n+        assertThat( trackerImportReport.getValidationReport().getErrorReports(),\n             everyItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1019 ) ) ) );\n     }\n \n     @Test\n-    public void testDeleteCascadeProgramInstances()\n+    void testDeleteCascadeProgramInstances()\n         throws IOException\n     {\n-        ValidateAndCommitTestUnit createAndUpdate = validateAndCommit(\n-            \"tracker/validations/enrollments_te_attr-data.json\",\n-            TrackerImportStrategy.CREATE );\n-        TrackerValidationReport report = createAndUpdate.getValidationReport();\n-        printReport( report );\n-        assertEquals( 0, report.getErrorReports().size() );\n-        assertEquals( TrackerStatus.OK, createAndUpdate.getCommitReport().getStatus() );\n-\n+        TrackerImportParams params = renderService.fromJson(\n+            new ClassPathResource( \"tracker/validations/enrollments_te_attr-data.json\" ).getInputStream(),\n+            TrackerImportParams.class );\n+        params.setImportStrategy( TrackerImportStrategy.CREATE );\n+        TrackerImportReport trackerImportReport = trackerImportService.importTracker( params );\n+        assertEquals( 0, trackerImportReport.getValidationReport().getErrorReports().size() );\n+        assertEquals( TrackerStatus.OK, trackerImportReport.getStatus() );\n+        manager.flush();\n         importProgramStageInstances();\n-\n-        TrackerImportParams params = renderService\n-            .fromJson( new ClassPathResource( \"tracker/validations/enrollments_te_attr-data.json\" ).getInputStream(),\n-                TrackerImportParams.class );\n-\n+        manager.flush();\n+        params = renderService.fromJson(\n+            new ClassPathResource( \"tracker/validations/enrollments_te_attr-data.json\" ).getInputStream(),\n+            TrackerImportParams.class );\n         User user2 = userService.getUser( USER_4 );\n         params.setUser( user2 );\n         params.setImportStrategy( TrackerImportStrategy.DELETE );\n-\n-        TrackerBundle trackerBundle = trackerBundleService.create( params );\n-        assertEquals( 1, trackerBundle.getEnrollments().size() );\n-\n-        report = trackerValidationService.validate( trackerBundle );\n-        printReport( report );\n-        assertEquals( 2, report.getErrorReports().size() );\n-\n-        assertThat( report.getErrorReports(),\n+        TrackerImportReport trackerImportDeleteReport = trackerImportService.importTracker( params );\n+        assertEquals( 2, trackerImportDeleteReport.getValidationReport().getErrorReports().size() );\n+        assertThat( trackerImportDeleteReport.getValidationReport().getErrorReports(),\n             hasItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1103 ) ) ) );\n-\n-        assertThat( report.getErrorReports(),\n+        assertThat( trackerImportDeleteReport.getValidationReport().getErrorReports(),\n             hasItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1091 ) ) ) );\n     }\n \n", "next_change": {"commit": "7c0131dfcfbf72dad27dc5f0a3f6a776e286c79a", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentImportValidationTest.java b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentImportValidationTest.java\nindex 24cd3c9920..57a1560d0b 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentImportValidationTest.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentImportValidationTest.java\n", "chunk": "@@ -178,10 +178,10 @@ class EnrollmentImportValidationTest extends AbstractImportValidationTest\n         params.setUser( user2 );\n         params.setImportStrategy( TrackerImportStrategy.DELETE );\n         TrackerImportReport trackerImportDeleteReport = trackerImportService.importTracker( params );\n-        assertEquals( 2, trackerImportDeleteReport.getValidationReport().getErrorReports().size() );\n-        assertThat( trackerImportDeleteReport.getValidationReport().getErrorReports(),\n+        assertEquals( 2, trackerImportDeleteReport.getValidationReport().getErrors().size() );\n+        assertThat( trackerImportDeleteReport.getValidationReport().getErrors(),\n             hasItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1103 ) ) ) );\n-        assertThat( trackerImportDeleteReport.getValidationReport().getErrorReports(),\n+        assertThat( trackerImportDeleteReport.getValidationReport().getErrors(),\n             hasItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1091 ) ) ) );\n     }\n \n", "next_change": {"commit": "ef0cbd365e47f1f88befb80d9650cce75280bd35", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentImportValidationTest.java b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentImportValidationTest.java\nindex 57a1560d0b..c4a517e8d8 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentImportValidationTest.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentImportValidationTest.java\n", "chunk": "@@ -188,7 +188,7 @@ class EnrollmentImportValidationTest extends AbstractImportValidationTest\n     protected void importProgramStageInstances()\n         throws IOException\n     {\n-        TrackerImportParams params = createBundleFromJson( \"tracker/validations/events-data.json\" );\n+        TrackerImportParams params = createBundleFromJson( \"tracker/validations/events-with-registration.json\" );\n         params.setImportStrategy( TrackerImportStrategy.CREATE );\n         TrackerImportReport trackerImportReport = trackerImportService.importTracker( params );\n         assertEquals( 0, trackerImportReport.getValidationReport().getErrors().size() );\n", "next_change": {"commit": "2f44bf54a94fca80ec8bef3a160d403665973bed", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentImportValidationTest.java b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentImportValidationTest.java\nindex c4a517e8d8..33605e9848 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentImportValidationTest.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentImportValidationTest.java\n", "chunk": "@@ -188,7 +188,7 @@ class EnrollmentImportValidationTest extends AbstractImportValidationTest\n     protected void importProgramStageInstances()\n         throws IOException\n     {\n-        TrackerImportParams params = createBundleFromJson( \"tracker/validations/events-with-registration.json\" );\n+        TrackerImportParams params = fromJson( \"tracker/validations/events-with-registration.json\" );\n         params.setImportStrategy( TrackerImportStrategy.CREATE );\n         TrackerImportReport trackerImportReport = trackerImportService.importTracker( params );\n         assertEquals( 0, trackerImportReport.getValidationReport().getErrors().size() );\n", "next_change": {"commit": "6b39184ce68d45d2d75a08c3d6b45fe012395457", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentImportValidationTest.java b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentImportValidationTest.java\nindex 33605e9848..4eb329932f 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentImportValidationTest.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentImportValidationTest.java\n", "chunk": "@@ -191,8 +183,7 @@ class EnrollmentImportValidationTest extends TrackerTest\n         TrackerImportParams params = fromJson( \"tracker/validations/events-with-registration.json\" );\n         params.setImportStrategy( TrackerImportStrategy.CREATE );\n         TrackerImportReport trackerImportReport = trackerImportService.importTracker( params );\n-        assertEquals( 0, trackerImportReport.getValidationReport().getErrors().size() );\n-        assertEquals( TrackerStatus.OK, trackerImportReport.getStatus() );\n+        assertNoImportErrors( trackerImportReport );\n     }\n \n     @Test\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "message": "Merge commit", "committedDate": null}, {"oid": "2ed799f33ca26b918ed60473a3f097714f00492e", "committedDate": "2020-08-04 10:30:01 +0200", "message": "chore: Clean up code (#5877)"}, {"oid": "3e3dc98d92f0c13fb56cf17894eab06a78842133", "committedDate": "2020-08-04 17:20:37 +0200", "message": "feat: Enrollment/Events note persistence"}, {"oid": "cb2ee65c0210c0d4b2bd8851789da8d4adfaf04d", "committedDate": "2020-09-07 10:28:21 +0200", "message": "fix: [DHIS2-9287] Fix the stats in the import summary (#6062)"}, {"oid": "ae4d365663ffddc9a34d1cdc0f629fd7b6386e90", "committedDate": "2020-11-03 10:25:55 +0100", "message": "feat: improve note validation during tracker import [TECH-457]"}, {"oid": "d095f2d4cf9aaac1e9aa973d4da6aa2f96104cc8", "committedDate": "2020-11-11 13:49:13 +0100", "message": "fix: allow validation to reference entities in the payload (#6617)"}, {"oid": "2670177207885cb54b4b51516d55749ab8836588", "committedDate": "2020-11-13 14:02:16 +0100", "message": "fix: correct validation rule for Event's TEI value (#6655)"}, {"oid": "0bf55d776481f6511e5f9ebca5de1f2cf79777c0", "committedDate": "2020-11-19 13:55:46 +0100", "message": "refactor: New Tracker Error reporting refactor (#6706)"}, {"oid": "338a47b053533e7c4021c3be94852d5b29e79a19", "committedDate": "2020-11-23 16:57:54 +0100", "message": "fix: A relationship pointing to an invalid object should not be persisted (#6741)"}, {"oid": "3e799d196b8f73ad216ea100a07ddd5f7dfc53e0", "committedDate": "2020-11-30 16:37:14 +0100", "message": "fix: remove long running transaction during Tracker Import (#6782)"}, {"oid": "3ab88a5f4623a8c749246bedef34fcb926d185cb", "committedDate": "2020-12-08 10:40:14 +0100", "message": "fix: [DHIS2-7310] Move rule engine call and validations after bundle validation (#6843)"}, {"oid": "6e020e7c286db62dbc57c1b58a94f5841dc09551", "committedDate": "2020-12-21 10:08:58 +0100", "message": "Dhis2 10084 enrollments soft deleted (#6937)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "6e8f0d6c150b303d780b397f7646ff3383f16250", "committedDate": "2021-01-21 09:32:50 +0100", "message": "feat: new tracked dto's properties referring to a date, now use Instant instead of String [DHIS2-101239] (#7119)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "e8fc1401f2bc43df10a954a4e387c96125ce64aa", "committedDate": "2021-02-05 13:56:50 +0100", "message": "fix: Ignore incoming notes with existing UID [DHIS2-10302] (#7270)"}, {"oid": "00ba07c1c8555a473f261d56bffffa2b75d3c146", "committedDate": "2021-03-08 12:59:21 +0100", "message": "refactor: Remove unused bundle hook and fix tests [TECH-553] (#7539)"}, {"oid": "c71a97bf6c13f342a7c972c7061dab2b61d9d587", "committedDate": "2021-04-08 08:14:46 +0200", "message": "refactor: Clean up redundant integration tests for validation hooks [TECH-579] (#7811)"}, {"oid": "cec6d680166157cab52adeae7583410083940255", "committedDate": "2021-04-09 10:48:33 +0200", "message": "refactor: Clean up integration tests for validation hooks (#7830)"}, {"oid": "db043f2d252ab92e85756413bce7515a315e3caa", "committedDate": "2021-04-20 10:33:49 +0200", "message": "feat: Remove tracked entity field from event [DHIS2-10875] (#7878)"}, {"oid": "39a200eaa53e6ba6a09ff028cecbd9d2f9b4fb0f", "committedDate": "2021-05-04 08:41:15 +0200", "message": "[TECH-450] - DB access in EnrollmentInExistingValidationHook (#7941)"}, {"oid": "20dfefe359779d7e1c1921ba920465227e72f071", "committedDate": "2021-05-25 12:55:24 +0200", "message": "fix: Remove validations from objects deletion service in new tracker importer [DHIS2-10789] (#8053)"}, {"oid": "7d032be663a1d9444d4bc1dbf3bc20ff0f861ec1", "committedDate": "2021-05-26 16:49:59 +0200", "message": "refactor: Clean up integration tests in the new importer [TECH-589] (#8076)"}, {"oid": "7b96fb3ee32dc67e5686ce315d2a041825a74630", "committedDate": "2021-06-21 10:46:39 +0200", "message": "refactor: Refactor some validators and improved test coverage [TECH-589] (#8234)"}, {"oid": "314988e32cd6b86d7010c4a46e17fd3c3d1b9cc3", "committedDate": "2021-08-31 22:03:14 +0200", "message": "fix: ownership validation and preheating in new tracker importer [DHIS2-11223] (#8158)"}, {"oid": "d3b0477644437a33507157a3b97b0040d8a44496", "committedDate": "2021-10-06 13:42:51 +0200", "message": "fix: Fix active and enrollOnce logic in enrollment validation [DHIS2-11659] (#8958)"}, {"oid": "661e0366d360cb3107efdf2e3716f040ced004f9", "committedDate": "2021-12-14 13:50:06 +0100", "message": "chore: migrate to JUnit assertThrows (#9461)"}, {"oid": "22d5da9d9a812b02eb5acd643112a6b050b5d63c", "committedDate": "2021-12-16 13:19:38 +0100", "message": "chore: migrate tests to JUnit 5 (#9467)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "7c0131dfcfbf72dad27dc5f0a3f6a776e286c79a", "committedDate": "2022-01-11 17:47:56 +0100", "message": "chore: make TrackerValidationReport add methods fluent and name Timing TECH-880 (#9601)"}, {"oid": "cb4688e590e026e3321bdbfb93c65c699563ce20", "committedDate": "2022-02-16 13:59:40 +0100", "message": "fix: Missing errorReports when using DELETE strategy and validation fails [ DHIS2-11300 ] (#9792)"}, {"oid": "ef0cbd365e47f1f88befb80d9650cce75280bd35", "committedDate": "2022-03-08 15:12:00 +0100", "message": "chore: move DB access and mutation to preheat and preprocessor DHIS2-12623 (#9904)"}, {"oid": "5f63b52ac0a4f426145ae43affa58295f804812a", "committedDate": "2022-04-14 13:41:33 +0200", "message": "chore: split domain and view models DHIS2-12563 (#10379)"}, {"oid": "24fcc26c114646261ceec22e2ab6c15ce62244f5", "committedDate": "2022-04-29 09:36:38 +0200", "message": "fix: Enrollment.orgUnit is a MetadataIdentifier (#10587)"}, {"oid": "d99da048b6427aa16b080ab0a0e25eda4a2a0f96", "committedDate": "2022-05-09 13:53:18 +0200", "message": "feat: Refactor getCurrentUser() to return DHIS2 User object 2 (#10600)"}, {"oid": "2f44bf54a94fca80ec8bef3a160d403665973bed", "committedDate": "2022-05-23 06:02:37 +0200", "message": "chore: Clean up user management in tracker tests [TECH-890] (#10862)"}, {"oid": "5a68c39389bb9088aa2ce47790abc7014a093f64", "committedDate": "2022-05-27 09:59:23 +0200", "message": "performance: Try to speed up tracker tests [TECH-890] (#10869)"}, {"oid": "6b39184ce68d45d2d75a08c3d6b45fe012395457", "committedDate": "2022-06-03 08:16:09 +0200", "message": "test: use assertNoImportErrors for better context (#10989)"}, {"oid": "6e83eba877030575456f919de1bce55fcae8e517", "committedDate": "2022-06-24 10:01:46 +0200", "message": "test: move all integration tests into own module TECH-1209 (#11148)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYxNzYyMQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446617621", "body": "Is this handled somewhere? or its missing the error report?", "bodyText": "Is this handled somewhere? or its missing the error report?", "bodyHTML": "<p dir=\"auto\">Is this handled somewhere? or its missing the error report?</p>", "author": "mortenoh", "createdAt": "2020-06-28T08:14:30Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventCategoryOptValidationHook.java", "diffHunk": "@@ -0,0 +1,126 @@\n+package org.hisp.dhis.tracker.validation.hooks;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.lang3.ObjectUtils;\n+import org.hisp.dhis.category.CategoryOption;\n+import org.hisp.dhis.category.CategoryOptionCombo;\n+import org.hisp.dhis.i18n.I18nFormat;\n+import org.hisp.dhis.i18n.I18nManager;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.tracker.TrackerImportStrategy;\n+import org.hisp.dhis.tracker.domain.Event;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n+import org.hisp.dhis.tracker.validation.TrackerImportValidationContext;\n+import org.hisp.dhis.util.DateUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Date;\n+import java.util.Objects;\n+\n+import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+@Component\n+@Slf4j\n+public class EventCategoryOptValidationHook\n+    extends AbstractTrackerDtoValidationHook\n+{\n+    @Autowired\n+    protected I18nManager i18nManager;\n+\n+    public EventCategoryOptValidationHook()\n+    {\n+        super( Event.class, TrackerImportStrategy.CREATE_AND_UPDATE );\n+    }\n+\n+    @Override\n+    public void validateEvent( ValidationErrorReporter reporter, Event event )\n+    {\n+        TrackerImportValidationContext context = reporter.getValidationContext();\n+\n+        Program program = context.getProgram( event.getProgram() );\n+        Objects.requireNonNull( program, Constants.PROGRAM_CANT_BE_NULL );\n+        Objects.requireNonNull( context.getBundle().getUser(), Constants.USER_CANT_BE_NULL );\n+        Objects.requireNonNull( program, Constants.PROGRAM_CANT_BE_NULL );\n+        Objects.requireNonNull( event, Constants.EVENT_CANT_BE_NULL );\n+\n+        CategoryOptionCombo categoryOptionCombo = context\n+            .getCategoryOptionCombo(\n+                reporter.getValidationContext().getCachedEventCategoryOptionCombo( event.getUid() ) );\n+\n+        Objects.requireNonNull( categoryOptionCombo, Constants.CATEGORY_OPTION_COMBO_CANT_BE_NULL );\n+\n+        if ( categoryOptionCombo.isDefault()\n+            && program.getCategoryCombo() != null\n+            && !program.getCategoryCombo().isDefault() )\n+        {\n+            reporter.addError( newReport( TrackerErrorCode.E1055 ) );\n+            return;\n+        }\n+\n+        Date eventDate;\n+        try\n+        {\n+            eventDate = DateUtils.parseDate( ObjectUtils\n+                .firstNonNull( event.getOccurredAt(), event.getScheduledAt(), DateUtils.getIso8601( new Date() ) ) );\n+        }\n+        catch ( IllegalArgumentException e )\n+        {\n+            log.debug( \"Failed to parse dates, an error should already be reported.\" );", "originalCommit": "ad5654dcf03fa2ccb82adad686d9e13dde5a93b0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYyNjU2Mw==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446626563", "bodyText": "Yes, this will get into the error report at an earlier stage. So this is just to not fall out of the validation if something is broken.", "author": "netroms", "createdAt": "2020-06-28T09:32:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjYxNzYyMQ=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "6e8f0d6c150b303d780b397f7646ff3383f16250", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventCategoryOptValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventCategoryOptValidationHook.java\nindex 5fd7852fc2..5098dbaaad 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventCategoryOptValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventCategoryOptValidationHook.java\n", "chunk": "@@ -93,8 +94,8 @@ public class EventCategoryOptValidationHook\n         Date eventDate;\n         try\n         {\n-            eventDate = DateUtils.parseDate( ObjectUtils\n-                .firstNonNull( event.getOccurredAt(), event.getScheduledAt(), DateUtils.getIso8601( new Date() ) ) );\n+            eventDate = DateUtils.fromInstant( ObjectUtils\n+                .firstNonNull( event.getOccurredAt(), event.getScheduledAt(), Instant.now() ) );\n         }\n         catch ( IllegalArgumentException e )\n         {\n", "next_change": null}]}, "commits_in_main": [{"oid": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "message": "Merge commit", "committedDate": null}, {"oid": "3e3dc98d92f0c13fb56cf17894eab06a78842133", "committedDate": "2020-08-04 17:20:37 +0200", "message": "feat: Enrollment/Events note persistence"}, {"oid": "3e3b32e56ff5554a0095396eddffceac65b6b8de", "committedDate": "2020-10-27 09:56:50 +0100", "message": "refactor: simplified calls to error reporting (#6437)"}, {"oid": "0bf55d776481f6511e5f9ebca5de1f2cf79777c0", "committedDate": "2020-11-19 13:55:46 +0100", "message": "refactor: New Tracker Error reporting refactor (#6706)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "6e8f0d6c150b303d780b397f7646ff3383f16250", "committedDate": "2021-01-21 09:32:50 +0100", "message": "feat: new tracked dto's properties referring to a date, now use Instant instead of String [DHIS2-101239] (#7119)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "fe04922e144ac69367a99840d5518edda2d67f38", "committedDate": "2021-06-03 08:17:10 +0200", "message": "fix: Make program field read-only in event payload [DHIS2-11225] (#8086)"}, {"oid": "aff1cb136bdfdf4af8213f8878967be42f5687e9", "committedDate": "2021-06-11 10:58:03 +0200", "message": "fix: Get correct program stage from preheated Program [DHIS2-11225] (#8175)"}, {"oid": "5f0613c57316bb855e4b9ee931932f23edf54142", "committedDate": "2021-11-16 10:54:05 -0500", "message": "feat: Program.openDaysAfterCoEndDate DHIS2-11234 (#9219)"}, {"oid": "8bd63f9823397e39458bd1cdab383c33c3231019", "committedDate": "2021-12-22 09:32:29 +0100", "message": "chore: move factory methods into class it creates TECH-880 (#9518)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "97fa18701761c6993e20f2e7a3816ea689129480", "committedDate": "2022-01-11 15:31:02 +0100", "message": "chore: hooks should add errors via reporter directly TECH-880 (#9523)"}, {"oid": "1d8350a9e9ac100aaaa831894ba3f857b46e2474", "committedDate": "2022-01-13 14:15:17 +0100", "message": "chore: adding errors and warnings is responsibility of the ValidationErrorReporter TECH-880 (#9616)"}, {"oid": "5ff1a79c886b646c6e0289c6d14621c4d888b07c", "committedDate": "2022-02-15 14:45:30 +0100", "message": "fix: attributeOptionCombo is not required in NTI DHIS2-12460 (#9747)"}, {"oid": "c039b8f75c1d965414de926f04540dfaabdd104c", "committedDate": "2022-02-23 13:08:25 +0100", "message": "chore: Clean up service program rule module [TECH-938] (#9885)"}, {"oid": "ef0cbd365e47f1f88befb80d9650cce75280bd35", "committedDate": "2022-03-08 15:12:00 +0100", "message": "chore: move DB access and mutation to preheat and preprocessor DHIS2-12623 (#9904)"}, {"oid": "f7cfc83610c75486bbb0457dde057eaed777f3d2", "committedDate": "2022-05-27 15:15:25 +0200", "message": "chore: ValidationErrorReporter does not need the bunlde DHIS2-12519 (#10878)"}, {"oid": "b0a861c0308005b865cafa2344c1231c0a4f2bc3", "committedDate": "2022-12-02 13:36:08 +0100", "message": "fix: turn removeOnError into skipOnError DHIS2-14213 (#12457)"}, {"oid": "7ac68b368a1dbd9362973b30f7160399abe801a0", "committedDate": "2022-12-06 09:04:47 +0100", "message": "chore: move ValidationErrorReporter close to its usage (#12486)"}, {"oid": "33c7cfe3d47d3ad157e0cc1991ece017e9244bb5", "committedDate": "2022-12-13 13:59:20 +0000", "message": "chore: migrate event validators (#12527)"}]}, {"oid": "c5a94c3d798ab59a16b994801255c4ac2631887b", "url": "https://github.com/dhis2/dhis2-core/commit/c5a94c3d798ab59a16b994801255c4ac2631887b", "message": "* Fix PR comments\n\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>", "committedDate": "2020-06-28T09:56:58Z", "type": "commit"}, {"oid": "4eecdedb144686a3a82d802b7279dfc9bc52e09c", "url": "https://github.com/dhis2/dhis2-core/commit/4eecdedb144686a3a82d802b7279dfc9bc52e09c", "message": "Merge branch 'master' of github.com:dhis2/dhis2-core into DHIS2-8879", "committedDate": "2020-06-28T09:57:07Z", "type": "commit"}, {"oid": "d2feae85e2920e2ecd5cce7d310e926ae797cd2c", "url": "https://github.com/dhis2/dhis2-core/commit/d2feae85e2920e2ecd5cce7d310e926ae797cd2c", "message": "* Fix PR comments\n\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>", "committedDate": "2020-06-28T15:04:29Z", "type": "commit"}, {"oid": "12bd589850367af9ce124e78ea519bd7842cb3c5", "url": "https://github.com/dhis2/dhis2-core/commit/12bd589850367af9ce124e78ea519bd7842cb3c5", "message": "* Fix PR comments\n\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>", "committedDate": "2020-06-28T15:08:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg1OTg1NQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446859855", "body": "A couple of things I noticed on this class:\r\n\r\n- `uniqueTrackedEntityAttributes` mutators are never accessed, and variable is never used internally\r\n\r\n- `mandatoryProgramAttributes` mutators are never accessed,  and variable is never used internally\r\n- `identifiers` is never used\r\n\r\n- why do we need an empty constructor?", "bodyText": "A couple of things I noticed on this class:\n\n\nuniqueTrackedEntityAttributes mutators are never accessed, and variable is never used internally\n\n\nmandatoryProgramAttributes mutators are never accessed,  and variable is never used internally\n\n\nidentifiers is never used\n\n\nwhy do we need an empty constructor?", "bodyHTML": "<p dir=\"auto\">A couple of things I noticed on this class:</p>\n<ul dir=\"auto\">\n<li>\n<p dir=\"auto\"><code>uniqueTrackedEntityAttributes</code> mutators are never accessed, and variable is never used internally</p>\n</li>\n<li>\n<p dir=\"auto\"><code>mandatoryProgramAttributes</code> mutators are never accessed,  and variable is never used internally</p>\n</li>\n<li>\n<p dir=\"auto\"><code>identifiers</code> is never used</p>\n</li>\n<li>\n<p dir=\"auto\">why do we need an empty constructor?</p>\n</li>\n</ul>", "author": "luciano-fiandesio", "createdAt": "2020-06-29T08:33:05Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/TrackerPreheat.java", "diffHunk": "@@ -127,6 +130,11 @@\n      */\n     private Map<TrackerIdScheme, Map<String, Relationship>> relationships = new EnumMap<>( TrackerIdScheme.class );\n \n+    /**\n+     * Identifier map\n+     */\n+    private TrackerIdentifierParams identifiers = new TrackerIdentifierParams();\n+\n     public TrackerPreheat()", "originalCommit": "12bd589850367af9ce124e78ea519bd7842cb3c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg4MTgxNw==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446881817", "bodyText": "This is a good catch, this is not implemented yet.\nWe need to discuss this next meeting.\nAdded to the list.", "author": "netroms", "createdAt": "2020-06-29T09:48:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg1OTg1NQ=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "0a2a7f9418c217602f78eb701e251294d4919912", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/TrackerPreheat.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/TrackerPreheat.java\nindex 2634fc82fb..c51e933865 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/TrackerPreheat.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/TrackerPreheat.java\n", "chunk": "@@ -130,6 +130,11 @@ public class TrackerPreheat\n      */\n     private Map<TrackerIdScheme, Map<String, Relationship>> relationships = new EnumMap<>( TrackerIdScheme.class );\n \n+    /**\n+     *\n+     */\n+    private Map<String, List<ProgramInstance>> programInstancesByProgramAndTei = new HashMap<>();\n+    \n     /**\n      * Identifier map\n      */\n", "next_change": {"commit": "daa5a970e0c93301ca4cbc676731dcbb1e846fa9", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/TrackerPreheat.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/TrackerPreheat.java\nindex c51e933865..d5dc82e534 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/TrackerPreheat.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/TrackerPreheat.java\n", "chunk": "@@ -131,10 +131,12 @@ public class TrackerPreheat\n     private Map<TrackerIdScheme, Map<String, Relationship>> relationships = new EnumMap<>( TrackerIdScheme.class );\n \n     /**\n-     *\n+     * A Map of event uid and preheated {@see ProgramInstance}. The key is a List,\n+     * because the system may return multiple ProgramInstance, which will be\n+     * detected by validation\n      */\n-    private Map<String, List<ProgramInstance>> programInstancesByProgramAndTei = new HashMap<>();\n-    \n+    private Map<String, List<ProgramInstance>> programInstances = new HashMap<>();\n+\n     /**\n      * Identifier map\n      */\n", "next_change": {"commit": "2ed799f33ca26b918ed60473a3f097714f00492e", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/TrackerPreheat.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/TrackerPreheat.java\nindex d5dc82e534..be8d533663 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/TrackerPreheat.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/TrackerPreheat.java\n", "chunk": "@@ -130,13 +128,6 @@ public class TrackerPreheat\n      */\n     private Map<TrackerIdScheme, Map<String, Relationship>> relationships = new EnumMap<>( TrackerIdScheme.class );\n \n-    /**\n-     * A Map of event uid and preheated {@see ProgramInstance}. The key is a List,\n-     * because the system may return multiple ProgramInstance, which will be\n-     * detected by validation\n-     */\n-    private Map<String, List<ProgramInstance>> programInstances = new HashMap<>();\n-\n     /**\n      * Identifier map\n      */\n", "next_change": {"commit": "4c92c6dcc7bae69cef6889b95f7882ac8364ab80", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/TrackerPreheat.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/TrackerPreheat.java\nindex be8d533663..127e4bd598 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/TrackerPreheat.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/TrackerPreheat.java\n", "chunk": "@@ -128,6 +128,13 @@ public class TrackerPreheat\n      */\n     private Map<TrackerIdScheme, Map<String, Relationship>> relationships = new EnumMap<>( TrackerIdScheme.class );\n \n+    /**\n+     * A Map of event uid and preheated {@see ProgramInstance}. The value is a List,\n+     * because the system may return multiple ProgramInstance, which will be\n+     * detected by validation\n+     */\n+    private Map<String, List<ProgramInstance>> programInstances = new HashMap<>();\n+\n     /**\n      * Identifier map\n      */\n", "next_change": {"commit": "0d35843121f0ad3004fad015f1520c5b06a5c337", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/TrackerPreheat.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/TrackerPreheat.java\nindex 127e4bd598..050557995b 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/TrackerPreheat.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/TrackerPreheat.java\n", "chunk": "@@ -135,6 +135,13 @@ public class TrackerPreheat\n      */\n     private Map<String, List<ProgramInstance>> programInstances = new HashMap<>();\n \n+    /**\n+     * A map of user uid and preheated {@see User}. The value is a User object.\n+     * These users are primarily used to represent the \"assignedUser\" of events, used in validation and persisting\n+     * events.\n+     */\n+    private Map<String, User> users = new HashMap<>();\n+\n     /**\n      * Identifier map\n      */\n", "next_change": {"commit": "e1260b5e8fceb13c2883754236a34cdd652e1c1c", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/TrackerPreheat.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/TrackerPreheat.java\nindex 050557995b..e86afd9978 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/TrackerPreheat.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/TrackerPreheat.java\n", "chunk": "@@ -142,6 +143,13 @@ public class TrackerPreheat\n      */\n     private Map<String, User> users = new HashMap<>();\n \n+    /**\n+     * A list of all unique attribute values that are both present in the payload\n+     * and in the database. This is going to be used to validate the uniqueness of\n+     * attribute values in the Validation phase.\n+     */\n+    private List<UniqueAttributeValue> uniqueAttributeValues = Lists.newArrayList();\n+\n     /**\n      * Identifier map\n      */\n", "next_change": {"commit": "3e799d196b8f73ad216ea100a07ddd5f7dfc53e0", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/TrackerPreheat.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/TrackerPreheat.java\nindex e86afd9978..526876c7a4 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/TrackerPreheat.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/TrackerPreheat.java\n", "chunk": "@@ -67,113 +79,152 @@ public class TrackerPreheat\n     /**\n      * User to use for import job (important for threaded imports).\n      */\n+    @Getter\n+    @Setter\n     private User user;\n \n     /**\n      * Internal map of all objects mapped by identifier => class type => uid.\n      */\n+    @Getter\n     private Map<TrackerIdScheme, Map<Class<? extends IdentifiableObject>, Map<String, IdentifiableObject>>> map = new HashMap<>();\n \n+    /**\n+     * Internal tree of all payload references which are not present in the\n+     * database. This map is required to allow the validation stage to reference\n+     * root objects (TEI, PS, PSI) which are present in the payload but not stored\n+     * in the pre-heat object (since they do not exist in the db yet).\n+     */\n+    private TreeNode<String> referenceTree = new ArrayMultiTreeNode<>( \"ROOT\" );\n+\n     /**\n      * Internal map of all default object (like category option combo, etc).\n      */\n+    @Getter\n+    @Setter\n     private Map<Class<? extends IdentifiableObject>, IdentifiableObject> defaults = new HashMap<>();\n \n     /**\n      * All periods available.\n      */\n+    @Getter\n     private Map<String, Period> periodMap = new HashMap<>();\n \n     /**\n      * All periodTypes available.\n      */\n+    @Getter\n     private Map<String, PeriodType> periodTypeMap = new HashMap<>();\n \n-    /**\n-     * Set of UIDs of all unique tracked entity attributes.\n-     */\n-    private Set<String> uniqueTrackedEntityAttributes = new HashSet<>();\n-\n-    /**\n-     * Maps program => attribute for mandatory PTEA.\n-     */\n-    private Map<String, String> mandatoryProgramAttributes = new HashMap<>();\n-\n     /**\n      * Internal map of all preheated tracked entities, mainly used for confirming existence for updates, and used\n      * for object merging.\n      */\n+    @Getter\n+    @Setter\n     private Map<TrackerIdScheme, Map<String, TrackedEntityInstance>> trackedEntities = new HashMap<>();\n \n     /**\n      * Internal map of all preheated tracked entity attributes, mainly used for confirming existence for updates, and used\n      * for object merging.\n      */\n+    @Getter\n+    @Setter\n     private Map<TrackerIdScheme, Map<String, TrackedEntityAttributeValue>> trackedEntityAttributes = new HashMap<>();\n \n     /**\n      * Internal map of all preheated enrollments, mainly used for confirming existence for updates, and used\n      * for object merging.\n      */\n+    @Getter\n+    @Setter\n     private Map<TrackerIdScheme, Map<String, ProgramInstance>> enrollments = new HashMap<>();\n \n     /**\n      * Internal map of all preheated events, mainly used for confirming existence for updates, and used\n      * for object merging.\n      */\n+    @Getter\n+    @Setter\n     private Map<TrackerIdScheme, Map<String, ProgramStageInstance>> events = new HashMap<>();\n \n     /**\n      * Internal map of all preheated relationships, mainly used for confirming existence for updates, and used\n      * for object merging.\n      */\n+    @Getter\n+    @Setter\n     private Map<TrackerIdScheme, Map<String, Relationship>> relationships = new EnumMap<>( TrackerIdScheme.class );\n \n+    /**\n+     * Internal map of all preheated notes (events and enrollments)\n+     */\n+    private Map<TrackerIdScheme, Map<String, TrackedEntityComment>> notes = new EnumMap<>( TrackerIdScheme.class );\n+\n     /**\n      * A Map of event uid and preheated {@see ProgramInstance}. The value is a List,\n      * because the system may return multiple ProgramInstance, which will be\n      * detected by validation\n      */\n+    @Getter\n+    @Setter\n     private Map<String, List<ProgramInstance>> programInstances = new HashMap<>();\n \n     /**\n-     * A map of user uid and preheated {@see User}. The value is a User object.\n-     * These users are primarily used to represent the \"assignedUser\" of events, used in validation and persisting\n-     * events.\n+     * A Map of program uid and without registration {@see ProgramInstance}.\n      */\n-    private Map<String, User> users = new HashMap<>();\n+    private Map<String, ProgramInstance> programInstancesWithoutRegistration = new HashMap<>();\n+\n+    /**\n+     * A list of valid usernames that are present in the payload. A username not\n+     * available in this cache means, payload's username is invalid.\n+     * These users are primarily used to represent the ValueType.USERNAME of\n+     * tracked entity attributes, used in validation and persisting TEIs.\n+     */\n+    @Getter\n+    @Setter\n+    private List<String> usernames = Lists.newArrayList();\n \n     /**\n      * A list of all unique attribute values that are both present in the payload\n      * and in the database. This is going to be used to validate the uniqueness of\n      * attribute values in the Validation phase.\n      */\n+    @Getter\n+    @Setter\n     private List<UniqueAttributeValue> uniqueAttributeValues = Lists.newArrayList();\n \n+    /**\n+     * A list of all Program Instance UID having at least one Event that is not\n+     * deleted.\n+     */\n+    @Getter\n+    @Setter\n+    private List<String> programInstanceWithOneOrMoreNonDeletedEvent = Lists.newArrayList();\n+\n+    /**\n+     * A list of Program Stage UID having 1 or more Events\n+     */\n+    @Getter\n+    @Setter\n+    private List<String> programStageWithEvents = Lists.newArrayList();\n+    \n     /**\n      * Identifier map\n      */\n+    @Getter\n+    @Setter\n     private TrackerIdentifierParams identifiers = new TrackerIdentifierParams();\n \n     public TrackerPreheat()\n     {\n     }\n \n-    public User getUser()\n-    {\n-        return user;\n-    }\n-\n     public String getUsername()\n     {\n         return User.username( user );\n     }\n \n-    public void setUser( User user )\n-    {\n-        this.user = user;\n-    }\n-\n     public <T extends IdentifiableObject> T get( TrackerIdentifier identifier,\n         Class<? extends IdentifiableObject> klass, IdentifiableObject object )\n     {\n", "next_change": {"commit": "699074cbe82db1a8e0a5e72edf2a981f3628b54b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/TrackerPreheat.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/TrackerPreheat.java\nindex 526876c7a4..165a89d465 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/TrackerPreheat.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/TrackerPreheat.java\n", "chunk": "@@ -225,157 +227,65 @@ public class TrackerPreheat\n         return User.username( user );\n     }\n \n-    public <T extends IdentifiableObject> T get( TrackerIdentifier identifier,\n-        Class<? extends IdentifiableObject> klass, IdentifiableObject object )\n-    {\n-        return get( identifier.getIdScheme(), klass, identifier.getIdentifier( object ) );\n-    }\n-\n+    /**\n+     * Fetch a metadata object from the pre-heat, based on the type of the object\n+     * and the cached identifier.\n+     *\n+     * @param klass The metadata class to fetch\n+     * @param key The key used during the pre-heat creation\n+     * @return A metadata object or null\n+     */\n     @SuppressWarnings( \"unchecked\" )\n-    public <T extends IdentifiableObject> T get( TrackerIdScheme identifier, Class<? extends IdentifiableObject> klass,\n+    public <T extends IdentifiableObject> T get( Class<? extends IdentifiableObject> klass,\n         String key )\n     {\n-        if ( !containsKey( identifier, klass, key ) )\n-        {\n-            return null;\n-        }\n-\n-        return (T) map.get( identifier ).get( klass ).get( key );\n-    }\n-\n-    public <T extends IdentifiableObject> List<T> getAll( TrackerIdentifier identifier, List<T> keys )\n-    {\n-        List<T> objects = new ArrayList<>();\n-\n-        for ( T key : keys )\n-        {\n-            T identifiableObject = get( identifier, key );\n-\n-            if ( identifiableObject != null )\n-            {\n-                objects.add( identifiableObject );\n-            }\n-        }\n-\n-        return objects;\n+        return (T) map.getOrDefault( klass, new HashMap<>() ).get( key );\n     }\n \n+    /**\n+     * Fetch all the metadata objects from the pre-heat, by object type\n+     * \n+     * @param klass The metadata class to fetch\n+     *\n+     * @return a List of pre-heated object or empty list\n+     */\n     @SuppressWarnings( \"unchecked\" )\n-    public <T extends IdentifiableObject> List<T> getAll( TrackerIdScheme identifier, Class<T> klass )\n+    public <T extends IdentifiableObject> List<T> getAll( Class<T> klass )\n     {\n-        if ( !map.containsKey( identifier ) || !map.get( identifier ).containsKey( klass ) )\n-        {\n-            return new ArrayList<>();\n-        }\n-\n-        return new ArrayList<>( (Collection<? extends T>) map.get( identifier ).get( klass ).values() );\n-    }\n-\n-    @SuppressWarnings( \"unchecked\" )\n-    public <T extends IdentifiableObject> T get( TrackerIdentifier identifier, T object )\n-    {\n-        if ( object == null )\n-        {\n-            return null;\n-        }\n-\n-        Class<? extends IdentifiableObject> klass = (Class<? extends IdentifiableObject>) getRealClass(\n-            object.getClass() );\n-\n-        return get( identifier.getIdScheme(), klass, identifier.getIdentifier( object ) );\n-    }\n-\n-    public boolean containsKey( TrackerIdScheme identifier, Class<? extends IdentifiableObject> klass, String key )\n-    {\n-        return !(isEmpty() || isEmpty( identifier ) || isEmpty( identifier, klass )) &&\n-            map.get( identifier ).get( klass ).containsKey( key );\n-    }\n+        return new ArrayList<>( (Collection<? extends T>) map.getOrDefault( klass, new HashMap<>() ).values() );\n+    }    \n \n     public boolean isEmpty()\n     {\n         return map.isEmpty();\n     }\n \n-    public boolean isEmpty( TrackerIdScheme identifier )\n-    {\n-        return !map.containsKey( identifier ) || map.get( identifier ).isEmpty();\n-    }\n-\n-    public boolean isEmpty( TrackerIdScheme identifier, Class<? extends IdentifiableObject> klass )\n-    {\n-        return isEmpty( identifier ) || !map.get( identifier ).containsKey( klass ) ||\n-            map.get( identifier ).get( klass ).isEmpty();\n-    }\n-\n     @SuppressWarnings( \"unchecked\" )\n     public <T extends IdentifiableObject> TrackerPreheat put( TrackerIdentifier identifier, T object )\n     {\n-        TrackerIdScheme idScheme = identifier.getIdScheme();\n         if ( object == null )\n+        {\n             return this;\n+        }\n \n         Class<? extends IdentifiableObject> klass = (Class<? extends IdentifiableObject>) getRealClass(\n             object.getClass() );\n \n-        if ( !map.containsKey( idScheme ) )\n-            map.put( idScheme, new HashMap<>() );\n-        if ( !map.get( idScheme ).containsKey( klass ) )\n-            map.get( idScheme ).put( klass, new HashMap<>() );\n-\n-        if ( User.class.isAssignableFrom( klass ) )\n-        {\n-            if ( !map.get( idScheme ).containsKey( UserCredentials.class ) )\n-            {\n-                map.get( idScheme ).put( UserCredentials.class, new HashMap<>() );\n-            }\n-\n-            User user = (User) object;\n-\n-            Map<String, IdentifiableObject> identifierMap = map.get( idScheme ).get( UserCredentials.class );\n-\n-            if ( !StringUtils.isEmpty( identifier.getIdentifier( user ) ) &&\n-                !identifierMap.containsKey( identifier.getIdentifier( user ) ) )\n-            {\n-                identifierMap.put( identifier.getIdentifier( user ), user.getUserCredentials() );\n-            }\n-        }\n-\n-        Map<String, IdentifiableObject> identifierMap = map.get( idScheme ).get( klass );\n-        String key = identifier.getIdentifier( object );\n-\n-        if ( !StringUtils.isEmpty( key ) && !identifierMap.containsKey( key ) )\n+        if ( !map.containsKey( klass ) )\n         {\n-            identifierMap.put( key, object );\n+            map.put( klass, new HashMap<>() );\n         }\n \n-        return this;\n-    }\n-\n-    @SuppressWarnings( \"unchecked\" )\n-    public <T extends IdentifiableObject> TrackerPreheat replace( TrackerIdentifier identifier, T object )\n-    {\n-        TrackerIdScheme idScheme = identifier.getIdScheme();\n-        if ( object == null )\n-            return this;\n-\n-        Class<? extends IdentifiableObject> klass = (Class<? extends IdentifiableObject>) getRealClass(\n-            object.getClass() );\n-\n-        if ( !map.containsKey( idScheme ) )\n-            map.put( idScheme, new HashMap<>() );\n-        if ( !map.get( idScheme ).containsKey( klass ) )\n-            map.get( idScheme ).put( klass, new HashMap<>() );\n-\n         if ( User.class.isAssignableFrom( klass ) )\n         {\n-            if ( !map.get( idScheme ).containsKey( UserCredentials.class ) )\n+            if ( !map.containsKey( UserCredentials.class ) )\n             {\n-                map.get( idScheme ).put( UserCredentials.class, new HashMap<>() );\n+                map.put( UserCredentials.class, new HashMap<>() );\n             }\n \n             User user = (User) object;\n \n-            Map<String, IdentifiableObject> identifierMap = map.get( idScheme ).get( UserCredentials.class );\n+            Map<String, IdentifiableObject> identifierMap = map.get( UserCredentials.class );\n \n             if ( !StringUtils.isEmpty( identifier.getIdentifier( user ) ) &&\n                 !identifierMap.containsKey( identifier.getIdentifier( user ) ) )\n", "next_change": {"commit": "cececb7511986f26a3af5bf3d2f4bccb3b2bbda9", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/TrackerPreheat.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/TrackerPreheat.java\nindex 165a89d465..c45546f977 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/TrackerPreheat.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/TrackerPreheat.java\n", "chunk": "@@ -294,7 +290,7 @@ public class TrackerPreheat\n             }\n         }\n \n-        resolveKey( identifier, object ).ifPresent( k -> map.get( klass ).put( k, object ) );\n+        PreheatUtils.resolveKey( identifier, object ).ifPresent( k -> map.get( klass ).put( k, object ) );\n \n         return this;\n     }\n", "next_change": {"commit": "0de12c05dd392294cec72617f370d4911b66c8f5", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/TrackerPreheat.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/TrackerPreheat.java\nindex c45546f977..b2eee4e552 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/TrackerPreheat.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/TrackerPreheat.java\n", "chunk": "@@ -290,7 +349,8 @@ public class TrackerPreheat\n             }\n         }\n \n-        PreheatUtils.resolveKey( identifier, object ).ifPresent( k -> map.get( klass ).put( k, object ) );\n+        Optional.ofNullable( identifier.getIdentifier( object ) )\n+            .ifPresent( k -> map.get( klass ).put( k, object ) );\n \n         return this;\n     }\n", "next_change": {"commit": "b625410a6aeed719ad4c6307e18cb9569fe8a4d0", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/TrackerPreheat.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/TrackerPreheat.java\nindex b2eee4e552..cc1e789a11 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/TrackerPreheat.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/TrackerPreheat.java\n", "chunk": "@@ -326,59 +431,46 @@ public class TrackerPreheat\n \n         Class<? extends IdentifiableObject> klass = HibernateProxyUtils.getRealClass( object );\n \n-        if ( !map.containsKey( klass ) )\n-        {\n-            map.put( klass, new HashMap<>() );\n-        }\n+        map.computeIfAbsent( klass, k -> new HashMap<>() );\n \n         if ( User.class.isAssignableFrom( klass ) )\n         {\n-            if ( !map.containsKey( UserCredentials.class ) )\n-            {\n-                map.put( UserCredentials.class, new HashMap<>() );\n-            }\n-\n-            User user = (User) object;\n+            User userObject = (User) object;\n \n-            Map<String, IdentifiableObject> identifierMap = map.get( UserCredentials.class );\n+            Map<String, IdentifiableObject> identifierMap = map.get( User.class );\n \n-            if ( !StringUtils.isEmpty( identifier.getIdentifier( user ) ) &&\n-                !identifierMap.containsKey( identifier.getIdentifier( user ) ) )\n+            if ( !StringUtils.isEmpty( idSchemeParam.getIdentifier( userObject ) ) &&\n+                !identifierMap.containsKey( idSchemeParam.getIdentifier( userObject ) ) )\n             {\n-                identifierMap.put( identifier.getIdentifier( user ), user.getUserCredentials() );\n+                identifierMap.put( idSchemeParam.getIdentifier( userObject ), userObject );\n             }\n         }\n \n-        Optional.ofNullable( identifier.getIdentifier( object ) )\n+        Optional.ofNullable( idSchemeParam.getIdentifier( object ) )\n             .ifPresent( k -> map.get( klass ).put( k, object ) );\n \n         return this;\n     }\n \n-    public <T extends IdentifiableObject> TrackerPreheat put( TrackerIdentifier identifier, Collection<T> objects )\n+    public <T extends IdentifiableObject> TrackerPreheat put( TrackerIdSchemeParam idSchemeParam,\n+        Collection<T> objects )\n     {\n         for ( T object : objects )\n         {\n-            put( identifier, object );\n+            put( idSchemeParam, object );\n         }\n \n         return this;\n     }\n \n-    public TrackedEntityInstance getTrackedEntity( TrackerIdScheme identifier, String trackedEntity )\n+    public TrackedEntityInstance getTrackedEntity( String uid )\n     {\n-        if ( !trackedEntities.containsKey( identifier ) )\n-        {\n-            return null;\n-        }\n-\n-        return trackedEntities.get( identifier ).get( trackedEntity );\n+        return trackedEntities.get( uid );\n     }\n \n-    public void putTrackedEntities( TrackerIdScheme identifier, List<TrackedEntityInstance> trackedEntityInstances,\n-        List<String> allEntities )\n+    public void putTrackedEntities( List<TrackedEntityInstance> trackedEntityInstances, List<String> allEntities )\n     {\n-        putTrackedEntities( identifier, trackedEntityInstances );\n+        putTrackedEntities( trackedEntityInstances );\n \n         List<String> uidOnDB = trackedEntityInstances.stream()\n             .map( BaseIdentifiableObject::getUid )\n", "next_change": {"commit": "5671ef5eb9ddfea7e2560e2db5c8d92ecbd54bc5", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/TrackerPreheat.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/TrackerPreheat.java\nindex cc1e789a11..7c7d6b45bc 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/TrackerPreheat.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/TrackerPreheat.java\n", "chunk": "@@ -463,24 +499,29 @@ public class TrackerPreheat\n         return this;\n     }\n \n-    public TrackedEntityInstance getTrackedEntity( String uid )\n+    public TrackerPreheat put( DataElement dataElement )\n     {\n-        return trackedEntities.get( uid );\n+        return this.put( idSchemes.getDataElementIdScheme(), dataElement );\n+    }\n+\n+    public TrackerPreheat put( Program program )\n+    {\n+        return this.put( idSchemes.getProgramIdScheme(), program );\n     }\n \n-    public void putTrackedEntities( List<TrackedEntityInstance> trackedEntityInstances, List<String> allEntities )\n+    public TrackerPreheat put( ProgramStage programStage )\n     {\n-        putTrackedEntities( trackedEntityInstances );\n+        return this.put( idSchemes.getProgramStageIdScheme(), programStage );\n+    }\n \n-        List<String> uidOnDB = trackedEntityInstances.stream()\n-            .map( BaseIdentifiableObject::getUid )\n-            .collect( Collectors.toList() );\n+    public TrackerPreheat put( CategoryOptionCombo categoryOptionCombo )\n+    {\n+        return this.put( idSchemes.getCategoryOptionComboIdScheme(), categoryOptionCombo );\n+    }\n \n-        allEntities\n-            .stream()\n-            .filter( t -> !uidOnDB.contains( t ) )\n-            .map( t -> new ReferenceTrackerEntity( t, null ) )\n-            .forEach( u -> this.addReference( TrackerType.TRACKED_ENTITY, u ) );\n+    public TrackedEntityInstance getTrackedEntity( String uid )\n+    {\n+        return trackedEntities.get( uid );\n     }\n \n     public void putTrackedEntities( List<TrackedEntityInstance> trackedEntityInstances )\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "message": "Merge commit", "committedDate": null}, {"oid": "0a2a7f9418c217602f78eb701e251294d4919912", "committedDate": "2020-07-14 09:02:09 +0200", "message": "feat: ProgramInstance pre-heater"}, {"oid": "daa5a970e0c93301ca4cbc676731dcbb1e846fa9", "committedDate": "2020-07-14 14:23:22 +0200", "message": "chore: renamed method"}, {"oid": "ba9b9d076f0497f9f456794c391f28072c0c07fd", "committedDate": "2020-07-15 11:08:57 +0200", "message": "chore: fix Javadoc"}, {"oid": "2ed799f33ca26b918ed60473a3f097714f00492e", "committedDate": "2020-08-04 10:30:01 +0200", "message": "chore: Clean up code (#5877)"}, {"oid": "4c92c6dcc7bae69cef6889b95f7882ac8364ab80", "committedDate": "2020-08-04 15:04:46 +0200", "message": "Merge pull request #5848 from dhis2/DHIS2-8879-TECH402"}, {"oid": "0d35843121f0ad3004fad015f1520c5b06a5c337", "committedDate": "2020-09-15 09:24:33 +0200", "message": "Merge 2.35 into master (#6149)"}, {"oid": "e1260b5e8fceb13c2883754236a34cdd652e1c1c", "committedDate": "2020-10-20 14:00:34 +0200", "message": "refactor: Load in the preheat all the data needed for uniqueness attr\u2026 (#6397)"}, {"oid": "ae4d365663ffddc9a34d1cdc0f629fd7b6386e90", "committedDate": "2020-11-03 10:25:55 +0100", "message": "feat: improve note validation during tracker import [TECH-457]"}, {"oid": "d095f2d4cf9aaac1e9aa973d4da6aa2f96104cc8", "committedDate": "2020-11-11 13:49:13 +0100", "message": "fix: allow validation to reference entities in the payload (#6617)"}, {"oid": "abf9ed3867b69117bdd43d6feddf0ce194aa3f73", "committedDate": "2020-11-13 07:37:57 +0100", "message": "feat: Username and OrgUnit valueType preheat suppliers [TECH-452] (#6632)"}, {"oid": "1c1fdb5a8364805f984f96c316018d97653c7795", "committedDate": "2020-11-17 14:49:35 +0100", "message": "fix: Add into Preheat also default values for CategoryOption (#6702)"}, {"oid": "f1aea92d544cf8cd82eb788e4029bff612b99f95", "committedDate": "2020-11-18 09:44:58 +0100", "message": "fix: [DHIS2-9894] Assign enrollment to event when program is  without\u2026 (#6705)"}, {"oid": "3e799d196b8f73ad216ea100a07ddd5f7dfc53e0", "committedDate": "2020-11-30 16:37:14 +0100", "message": "fix: remove long running transaction during Tracker Import (#6782)"}, {"oid": "fd978e815ac1e18c2c0986dac825a5d17dcf02cc", "committedDate": "2020-12-04 09:51:00 +0100", "message": "fix: Check if there are more than one event in not repeatable Program Stages in the payload [DHIS2-10021] (#6817)"}, {"oid": "699074cbe82db1a8e0a5e72edf2a981f3628b54b", "committedDate": "2020-12-07 10:47:48 +0100", "message": "fix: Tracker Identifiers resolution during Tracker import (#6824)"}, {"oid": "2ab8efe33562a2a83071c34823b4e54462d8672d", "committedDate": "2020-12-08 13:35:03 +0100", "message": "fix: implement NAME Tracker Identifier scheme (#6848)"}, {"oid": "5e4669b4c89c809989ea600900735dd71baa86e2", "committedDate": "2020-12-23 14:00:18 +0700", "message": "feat: Upgrade Hibernate  (#6939)"}, {"oid": "cececb7511986f26a3af5bf3d2f4bccb3b2bbda9", "committedDate": "2021-01-04 09:03:14 +0100", "message": "refactor: simplify preheat fetching for reference objects (#7003)"}, {"oid": "16ae2da89c2d883763e33d9d0833f9b033d711c0", "committedDate": "2021-01-05 11:55:44 +0100", "message": "fix: Fix lazy exception for default category combo (#7014)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "055574bea49c3a40c5cfff3cb86694fc4bd12c45", "committedDate": "2021-01-12 15:26:26 +0100", "message": "perf: replace expensive \"Program has OrgUnit\" call with faster SQL (#6930)"}, {"oid": "6a07a582ef5237800f6a2c0969de02d79e7c3f95", "committedDate": "2021-01-19 14:49:22 +0100", "message": "fix: Upgrade lombok-maven-plugin to a version which actually exists (#7127)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "15ca8426c10f470381f68bcb39b0be02c4fbfd09", "committedDate": "2021-02-10 10:35:28 +0100", "message": "fix: [DHIS2-10459] Fix reference structure in Preheat used in the validation stage (#7326)"}, {"oid": "f731091fc392786dd6948e79de0614f4061d76e1", "committedDate": "2021-02-15 09:46:23 +0100", "message": "refactor: changed the way relationship are identified inside preheat [DHIS2-10390] (#7340)"}, {"oid": "39a200eaa53e6ba6a09ff028cecbd9d2f9b4fb0f", "committedDate": "2021-05-04 08:41:15 +0200", "message": "[TECH-450] - DB access in EnrollmentInExistingValidationHook (#7941)"}, {"oid": "7b96fb3ee32dc67e5686ce315d2a041825a74630", "committedDate": "2021-06-21 10:46:39 +0200", "message": "refactor: Refactor some validators and improved test coverage [TECH-589] (#8234)"}, {"oid": "314988e32cd6b86d7010c4a46e17fd3c3d1b9cc3", "committedDate": "2021-08-31 22:03:14 +0200", "message": "fix: ownership validation and preheating in new tracker importer [DHIS2-11223] (#8158)"}, {"oid": "ef578d6b93d10ebc9accce47f96c955a0ba14140", "committedDate": "2021-10-07 07:14:04 +0200", "message": "fix: Add tracked entity attribute value history(#8840)"}, {"oid": "7d60b5fd0dd961eb02f009e53a6219ef259f5697", "committedDate": "2021-10-14 11:02:10 +0200", "message": "perf: Remove call to user service in event converter [DHIS2-11983] (#9047)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "5ff1a79c886b646c6e0289c6d14621c4d888b07c", "committedDate": "2022-02-15 14:45:30 +0100", "message": "fix: attributeOptionCombo is not required in NTI DHIS2-12460 (#9747)"}, {"oid": "0de12c05dd392294cec72617f370d4911b66c8f5", "committedDate": "2022-02-18 10:17:06 +0100", "message": "fix: remove tracker id scheme AUTO DHIS2-12534 (#9808)"}, {"oid": "8ccf9a288a67e5ee5349024fd3d281372c64c956", "committedDate": "2022-02-22 13:25:35 +0800", "message": "feat: Merge User/UserCredentials into one DB table (#9754)"}, {"oid": "c039b8f75c1d965414de926f04540dfaabdd104c", "committedDate": "2022-02-23 13:08:25 +0100", "message": "chore: Clean up service program rule module [TECH-938] (#9885)"}, {"oid": "d117ff9ce355694569f7c6477141cf35c6412609", "committedDate": "2022-03-04 11:13:40 +0100", "message": "fix: Return complete information for user fields in NTI [DHIS2-12717] (#9936)"}, {"oid": "ef0cbd365e47f1f88befb80d9650cce75280bd35", "committedDate": "2022-03-08 15:12:00 +0100", "message": "chore: move DB access and mutation to preheat and preprocessor DHIS2-12623 (#9904)"}, {"oid": "9ff8dfdddfea059fd53181a37ba99a2c88c5b3cc", "committedDate": "2022-03-12 21:02:40 +0100", "message": "chore: this parameter is a set of category options (#10026)"}, {"oid": "e65e503e8f993ddb3a0953ec867f4686c1157a88", "committedDate": "2022-03-31 11:15:26 +0200", "message": "chore: prevent mutation of TrackerPreheat.map DHIS2-12563 (#10324)"}, {"oid": "0303652efe35da369ba1d2a437a4b5797a52c451", "committedDate": "2022-04-01 09:37:58 +0200", "message": "chore: tracker entities only support idScheme UID DHIS2-12563 (#10329)"}, {"oid": "b625410a6aeed719ad4c6307e18cb9569fe8a4d0", "committedDate": "2022-04-04 11:36:08 +0200", "message": "chore: prepare addition of TrackerIdentifier DHIS2-12563 (#10347)"}, {"oid": "5f63b52ac0a4f426145ae43affa58295f804812a", "committedDate": "2022-04-14 13:41:33 +0200", "message": "chore: split domain and view models DHIS2-12563 (#10379)"}, {"oid": "e3b903502802970e302b95dac131f40b8315a583", "committedDate": "2022-04-20 09:52:35 +0200", "message": "chore: TrackerPreheat knows the idSchemes (#10508)"}, {"oid": "877c44b62acb2a3a35577f2948791826eca1b9c4", "committedDate": "2022-04-20 12:47:43 +0200", "message": "fix: Event.programStage is a MetadataIdentifier DHIS2-12563 (#10509)"}, {"oid": "b1671abae3de25b9f7d137dad69aa44486062f57", "committedDate": "2022-04-22 16:26:32 +0200", "message": "fix: Event.orgUnit is a MetadataIdentifier (#10529)"}, {"oid": "c3ee623f83ffefe3521e74e071cfead3343a3dda", "committedDate": "2022-04-26 12:11:55 +0200", "message": "fix: TrackerPreheat defaults support idSchemes DHIS2-12563 (#10546)"}, {"oid": "9b2608b1ac695b4a62bca379a1807eae40520918", "committedDate": "2022-04-26 13:27:56 +0200", "message": "fix: Fix error when deleting relationships [DHIS2-13146] (#10595)"}, {"oid": "7f96b9e2e41e96d83226bcc182e3c88a2269ab18", "committedDate": "2022-05-04 11:04:17 +0200", "message": "fix: Event.attributeOptionCombo is a MetadataIdentifier (#10663)"}, {"oid": "382a593af44ef61dfedc169b98d266bc6411b09f", "committedDate": "2022-05-06 13:37:24 +0200", "message": "chore: Event.attributeCategoryOptions is a MetadataIdentifier DHIS2-12563 (#10724)"}, {"oid": "52fefdd8b43d479f29d4337b32b57f767d7996de", "committedDate": "2022-05-09 14:16:08 +0200", "message": "chore: TrackedEntity.trackedEntityType is a MetadataIdentifier DHIS2-12563 (#10744)"}, {"oid": "d76299848da281461da799f3fb3ca8ac3c63795a", "committedDate": "2022-05-09 13:06:14 +0000", "message": "feat: Make relationship soft deletable [DHIS2-11320] (#10708)"}, {"oid": "fb7a485c6dc99b360359cb262a00c7c9b703fcdc", "committedDate": "2022-05-16 11:12:11 +0200", "message": "refactor: RelationshipKey is the only responsible to create keys [DHIS2-11320] (#10780)"}, {"oid": "75c6c5d054b53569dda7e85f82afac6f6cd6b4a4", "committedDate": "2022-05-16 12:33:36 +0200", "message": "fix: Relationship.relationshipType is a MetadataIdentifier (#10746)"}, {"oid": "9ff8d0c831d8448a696a37138139a0ae5b975c86", "committedDate": "2022-05-17 13:32:06 +0200", "message": "fix: Attribute.attribute is a MetadataIdentifier DHIS2-12563 (#10782)"}, {"oid": "af37dd7b6f0b64b46fb84be9e40d35f5f6593709", "committedDate": "2022-05-19 11:11:00 +0200", "message": "fix: DataValue.dataElement is a MetadataIdentifier DHIS2-12563 (#10752)"}, {"oid": "2f607f53c7c920bab48832e9effb2de8696652a3", "committedDate": "2022-12-12 14:56:12 +0000", "message": "fix: invalidation of tracker tree DHIS2-14213 (#12495)"}, {"oid": "5671ef5eb9ddfea7e2560e2db5c8d92ecbd54bc5", "committedDate": "2022-12-13 15:53:59 +0100", "message": "chore: Remove reference tree from Preheat [TECH-14298] (#12523)"}, {"oid": "e7c0587f707e9529af60b6250191451fdd71d529", "committedDate": "2023-03-02 10:39:17 +0100", "message": "fix: Remove @Deprecation annotation to reduce IDE warnings (#13195)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg3MzU3Nw==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446873577", "body": "This method call may return `null`. Is that ok that we set a `null` value in `programInstance`? ", "bodyText": "This method call may return null. Is that ok that we set a null value in programInstance?", "bodyHTML": "<p dir=\"auto\">This method call may return <code>null</code>. Is that ok that we set a <code>null</code> value in <code>programInstance</code>?</p>", "author": "luciano-fiandesio", "createdAt": "2020-06-29T08:56:37Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java", "diffHunk": "@@ -127,10 +127,13 @@ public ProgramInstance from( TrackerPreheat preheat, Enrollment enrollment )\n         List<ProgramInstance> programInstances = new ArrayList<>();\n \n         enrollments.forEach( enrollment -> {\n+\n             ProgramInstance programInstance = preheat.getEnrollment( TrackerIdScheme.UID, enrollment.getEnrollment() );\n-            OrganisationUnit organisationUnit = preheat.get( TrackerIdScheme.UID, OrganisationUnit.class, enrollment.getOrgUnit() );\n+            OrganisationUnit organisationUnit = preheat\n+                .get( TrackerIdScheme.UID, OrganisationUnit.class, enrollment.getOrgUnit() );\n             Program program = preheat.get( TrackerIdScheme.UID, Program.class, enrollment.getProgram() );\n-            TrackedEntityInstance trackedEntityInstance = preheat.getTrackedEntity( TrackerIdScheme.UID, enrollment.getTrackedEntity() );\n+            TrackedEntityInstance trackedEntityInstance = preheat", "originalCommit": "12bd589850367af9ce124e78ea519bd7842cb3c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk5OTg5Ng==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446999896", "bodyText": "I think this is a very good question.\nThe validation is supposed to make sure it don't happen.\nI would argue that this is not ok and we should call an assert/np error here to make it very clear we don't allow persistence with out this critical references.", "author": "netroms", "createdAt": "2020-06-29T14:08:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg3MzU3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAwMDMyOQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r447000329", "bodyText": "I have added Objects.nonNull checks. Let's discuss this in next meeting.", "author": "netroms", "createdAt": "2020-06-29T14:09:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg3MzU3Nw=="}], "type": "inlineReview", "revised_code": {"commit": "68c9d6c0ee6f2fd2462d63d9f3bef1a317f76ac6", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java\nindex 6332435163..5f46e6b05f 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java\n", "chunk": "@@ -115,23 +117,26 @@ public class EnrollmentTrackerConverterService\n     }\n \n     @Override\n+    @Transactional( readOnly = true )\n     public List<ProgramInstance> from( List<Enrollment> enrollments )\n     {\n         return from( preheat( enrollments ), enrollments );\n     }\n \n-    @Override\n-    @Transactional( readOnly = true )\n-    public List<ProgramInstance> from( TrackerPreheat preheat, List<Enrollment> enrollments )\n+\n+    private List<ProgramInstance> from( TrackerPreheat preheat, List<Enrollment> enrollments )\n     {\n         List<ProgramInstance> programInstances = new ArrayList<>();\n \n         enrollments.forEach( enrollment -> {\n \n             ProgramInstance programInstance = preheat.getEnrollment( TrackerIdScheme.UID, enrollment.getEnrollment() );\n+\n             OrganisationUnit organisationUnit = preheat\n                 .get( TrackerIdScheme.UID, OrganisationUnit.class, enrollment.getOrgUnit() );\n+\n             Program program = preheat.get( TrackerIdScheme.UID, Program.class, enrollment.getProgram() );\n+\n             TrackedEntityInstance trackedEntityInstance = preheat\n                 .getTrackedEntity( TrackerIdScheme.UID, enrollment.getTrackedEntity() );\n \n", "next_change": {"commit": "5bd4c4a413adbc1e587b0e1194af3da352084268", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java\nindex 5f46e6b05f..6db8a1513d 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java\n", "chunk": "@@ -123,23 +131,28 @@ public class EnrollmentTrackerConverterService\n         return from( preheat( enrollments ), enrollments );\n     }\n \n-\n     private List<ProgramInstance> from( TrackerPreheat preheat, List<Enrollment> enrollments )\n     {\n         List<ProgramInstance> programInstances = new ArrayList<>();\n \n         enrollments.forEach( enrollment -> {\n \n-            ProgramInstance programInstance = preheat.getEnrollment( TrackerIdScheme.UID, enrollment.getEnrollment() );\n-\n             OrganisationUnit organisationUnit = preheat\n                 .get( TrackerIdScheme.UID, OrganisationUnit.class, enrollment.getOrgUnit() );\n \n+            Objects.requireNonNull( organisationUnit, TrackerImporterAssertErrors.ORGANISATION_UNIT_CANT_BE_NULL );\n+\n             Program program = preheat.get( TrackerIdScheme.UID, Program.class, enrollment.getProgram() );\n \n+            Objects.requireNonNull( program, TrackerImporterAssertErrors.PROGRAM_CANT_BE_NULL );\n+\n             TrackedEntityInstance trackedEntityInstance = preheat\n                 .getTrackedEntity( TrackerIdScheme.UID, enrollment.getTrackedEntity() );\n \n+            Objects.requireNonNull( trackedEntityInstance, TrackerImporterAssertErrors.TRACKED_ENTITY_CANT_BE_NULL );\n+\n+            ProgramInstance programInstance = preheat.getEnrollment( TrackerIdScheme.UID, enrollment.getEnrollment() );\n+\n             if ( programInstance == null )\n             {\n                 Date now = new Date();\n", "next_change": {"commit": "3999d1c8e8d7c2bcd11c7c5d99fec179abd25e2b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java\nindex 6db8a1513d..fc271a60d9 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java\n", "chunk": "@@ -140,16 +141,16 @@ public class EnrollmentTrackerConverterService\n             OrganisationUnit organisationUnit = preheat\n                 .get( TrackerIdScheme.UID, OrganisationUnit.class, enrollment.getOrgUnit() );\n \n-            Objects.requireNonNull( organisationUnit, TrackerImporterAssertErrors.ORGANISATION_UNIT_CANT_BE_NULL );\n+            checkNotNull( organisationUnit, TrackerImporterAssertErrors.ORGANISATION_UNIT_CANT_BE_NULL );\n \n             Program program = preheat.get( TrackerIdScheme.UID, Program.class, enrollment.getProgram() );\n \n-            Objects.requireNonNull( program, TrackerImporterAssertErrors.PROGRAM_CANT_BE_NULL );\n+            checkNotNull( program, TrackerImporterAssertErrors.PROGRAM_CANT_BE_NULL );\n \n             TrackedEntityInstance trackedEntityInstance = preheat\n                 .getTrackedEntity( TrackerIdScheme.UID, enrollment.getTrackedEntity() );\n \n-            Objects.requireNonNull( trackedEntityInstance, TrackerImporterAssertErrors.TRACKED_ENTITY_CANT_BE_NULL );\n+            checkNotNull( trackedEntityInstance, TrackerImporterAssertErrors.TRACKED_ENTITY_CANT_BE_NULL );\n \n             ProgramInstance programInstance = preheat.getEnrollment( TrackerIdScheme.UID, enrollment.getEnrollment() );\n \n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java\nindex 6332435163..83a2f9e24f 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java\n", "chunk": "@@ -120,21 +121,28 @@ public class EnrollmentTrackerConverterService\n         return from( preheat( enrollments ), enrollments );\n     }\n \n-    @Override\n-    @Transactional( readOnly = true )\n-    public List<ProgramInstance> from( TrackerPreheat preheat, List<Enrollment> enrollments )\n+    private List<ProgramInstance> from( TrackerPreheat preheat, List<Enrollment> enrollments )\n     {\n         List<ProgramInstance> programInstances = new ArrayList<>();\n \n         enrollments.forEach( enrollment -> {\n \n-            ProgramInstance programInstance = preheat.getEnrollment( TrackerIdScheme.UID, enrollment.getEnrollment() );\n             OrganisationUnit organisationUnit = preheat\n                 .get( TrackerIdScheme.UID, OrganisationUnit.class, enrollment.getOrgUnit() );\n+\n+            checkNotNull( organisationUnit, TrackerImporterAssertErrors.ORGANISATION_UNIT_CANT_BE_NULL );\n+\n             Program program = preheat.get( TrackerIdScheme.UID, Program.class, enrollment.getProgram() );\n+\n+            checkNotNull( program, TrackerImporterAssertErrors.PROGRAM_CANT_BE_NULL );\n+\n             TrackedEntityInstance trackedEntityInstance = preheat\n                 .getTrackedEntity( TrackerIdScheme.UID, enrollment.getTrackedEntity() );\n \n+            checkNotNull( trackedEntityInstance, TrackerImporterAssertErrors.TRACKED_ENTITY_CANT_BE_NULL );\n+\n+            ProgramInstance programInstance = preheat.getEnrollment( TrackerIdScheme.UID, enrollment.getEnrollment() );\n+\n             if ( programInstance == null )\n             {\n                 Date now = new Date();\n", "next_change": {"commit": "81227d538954409f62f12f23cd8db87dc95228a1", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java\nindex 83a2f9e24f..de2e07da23 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java\n", "chunk": "@@ -139,7 +126,8 @@ public class EnrollmentTrackerConverterService\n             TrackedEntityInstance trackedEntityInstance = preheat\n                 .getTrackedEntity( TrackerIdScheme.UID, enrollment.getTrackedEntity() );\n \n-            checkNotNull( trackedEntityInstance, TrackerImporterAssertErrors.TRACKED_ENTITY_CANT_BE_NULL );\n+            // checkNotNull( trackedEntityInstance,\n+            // TrackerImporterAssertErrors.TRACKED_ENTITY_CANT_BE_NULL );\n \n             ProgramInstance programInstance = preheat.getEnrollment( TrackerIdScheme.UID, enrollment.getEnrollment() );\n \n", "next_change": {"commit": "c70f79c6febd4b98e98c6f0c572d1099207d86b3", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java\nindex de2e07da23..bf8e5ad19c 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java\n", "chunk": "@@ -126,9 +125,6 @@ public class EnrollmentTrackerConverterService\n             TrackedEntityInstance trackedEntityInstance = preheat\n                 .getTrackedEntity( TrackerIdScheme.UID, enrollment.getTrackedEntity() );\n \n-            // checkNotNull( trackedEntityInstance,\n-            // TrackerImporterAssertErrors.TRACKED_ENTITY_CANT_BE_NULL );\n-\n             ProgramInstance programInstance = preheat.getEnrollment( TrackerIdScheme.UID, enrollment.getEnrollment() );\n \n             if ( programInstance == null )\n", "next_change": {"commit": "cb2ee65c0210c0d4b2bd8851789da8d4adfaf04d", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java\nindex bf8e5ad19c..e61589dabd 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java\n", "chunk": "@@ -97,47 +95,49 @@ public class EnrollmentTrackerConverterService\n     @Override\n     public ProgramInstance from( TrackerPreheat preheat, Enrollment enrollment )\n     {\n-        List<ProgramInstance> programInstances = from( preheat, Collections.singletonList( enrollment ) );\n-\n-        if ( programInstances.isEmpty() )\n-        {\n-            return null;\n-        }\n-\n-        return programInstances.get( 0 );\n+        ProgramInstance programInstance = preheat.getEnrollment( TrackerIdScheme.UID, enrollment.getEnrollment() );\n+        return from( preheat, enrollment, programInstance );\n     }\n+\n     @Override\n     public List<ProgramInstance> from( TrackerPreheat preheat, List<Enrollment> enrollments )\n     {\n-        List<ProgramInstance> programInstances = new ArrayList<>();\n+        return enrollments\n+            .stream()\n+            .map( enrollment -> from( preheat, enrollment ) )\n+            .collect( Collectors.toList() );\n+    }\n \n-        enrollments.forEach( enrollment -> {\n+    @Override\n+    public ProgramInstance fromForRuleEngine( TrackerPreheat preheat, Enrollment enrollment )\n+    {\n+        return from( preheat, enrollment, null );\n+    }\n \n-            OrganisationUnit organisationUnit = preheat\n-                .get( TrackerIdScheme.UID, OrganisationUnit.class, enrollment.getOrgUnit() );\n+    private ProgramInstance from( TrackerPreheat preheat, Enrollment enrollment, ProgramInstance programInstance )\n+    {\n+        OrganisationUnit organisationUnit = preheat\n+            .get( TrackerIdScheme.UID, OrganisationUnit.class, enrollment.getOrgUnit() );\n \n-            checkNotNull( organisationUnit, TrackerImporterAssertErrors.ORGANISATION_UNIT_CANT_BE_NULL );\n+        checkNotNull( organisationUnit, TrackerImporterAssertErrors.ORGANISATION_UNIT_CANT_BE_NULL );\n \n-            Program program = preheat.get( TrackerIdScheme.UID, Program.class, enrollment.getProgram() );\n+        Program program = preheat.get( TrackerIdScheme.UID, Program.class, enrollment.getProgram() );\n \n-            checkNotNull( program, TrackerImporterAssertErrors.PROGRAM_CANT_BE_NULL );\n+        checkNotNull( program, TrackerImporterAssertErrors.PROGRAM_CANT_BE_NULL );\n \n-            TrackedEntityInstance trackedEntityInstance = preheat\n-                .getTrackedEntity( TrackerIdScheme.UID, enrollment.getTrackedEntity() );\n+        TrackedEntityInstance trackedEntityInstance = preheat\n+            .getTrackedEntity( TrackerIdScheme.UID, enrollment.getTrackedEntity() );\n \n-            ProgramInstance programInstance = preheat.getEnrollment( TrackerIdScheme.UID, enrollment.getEnrollment() );\n+        if ( programInstance == null )\n+        {\n+            Date now = new Date();\n \n-            if ( programInstance == null )\n-            {\n-                Date now = new Date();\n-\n-                programInstance = new ProgramInstance();\n-                programInstance.setUid( enrollment.getEnrollment() );\n-                programInstance.setCreated( now );\n-                programInstance.setCreatedAtClient( now );\n-                programInstance.setLastUpdated( now );\n-                programInstance.setLastUpdatedAtClient( now );\n-            }\n+            programInstance = new ProgramInstance();\n+            programInstance.setUid( enrollment.getEnrollment() );\n+            programInstance.setCreated( now );\n+            programInstance.setCreatedAtClient( now );\n+            programInstance.setLastUpdated( now );\n+            programInstance.setLastUpdatedAtClient( now );\n \n             if ( !CodeGenerator.isValidUid( programInstance.getUid() ) )\n             {\n", "next_change": {"commit": "3e799d196b8f73ad216ea100a07ddd5f7dfc53e0", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java\nindex e61589dabd..7b9fcb9bf0 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java\n", "chunk": "@@ -139,11 +138,6 @@ public class EnrollmentTrackerConverterService\n             programInstance.setLastUpdated( now );\n             programInstance.setLastUpdatedAtClient( now );\n \n-            if ( !CodeGenerator.isValidUid( programInstance.getUid() ) )\n-            {\n-                programInstance.setUid( CodeGenerator.generateUid() );\n-            }\n-\n             programInstance.setEnrollmentDate( DateUtils.parseDate( enrollment.getEnrolledAt() ) );\n             programInstance.setIncidentDate( DateUtils.parseDate( enrollment.getOccurredAt() ) );\n             programInstance.setOrganisationUnit( organisationUnit );\n", "next_change": {"commit": "3ab88a5f4623a8c749246bedef34fcb926d185cb", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java\nindex 7b9fcb9bf0..575579aa02 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java\n", "chunk": "@@ -138,8 +138,11 @@ public class EnrollmentTrackerConverterService\n             programInstance.setLastUpdated( now );\n             programInstance.setLastUpdatedAtClient( now );\n \n-            programInstance.setEnrollmentDate( DateUtils.parseDate( enrollment.getEnrolledAt() ) );\n-            programInstance.setIncidentDate( DateUtils.parseDate( enrollment.getOccurredAt() ) );\n+            Date enrollmentDate = DateUtils.parseDate( enrollment.getEnrolledAt() );\n+            Date incidentDate = DateUtils.parseDate( enrollment.getOccurredAt() );\n+\n+            programInstance.setEnrollmentDate( enrollmentDate );\n+            programInstance.setIncidentDate( incidentDate != null ? incidentDate : enrollmentDate );\n             programInstance.setOrganisationUnit( organisationUnit );\n             programInstance.setProgram( program );\n             programInstance.setEntityInstance( trackedEntityInstance );\n", "next_change": {"commit": "6e8f0d6c150b303d780b397f7646ff3383f16250", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java\nindex 575579aa02..b9e6ad2eb8 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java\n", "chunk": "@@ -138,8 +137,8 @@ public class EnrollmentTrackerConverterService\n             programInstance.setLastUpdated( now );\n             programInstance.setLastUpdatedAtClient( now );\n \n-            Date enrollmentDate = DateUtils.parseDate( enrollment.getEnrolledAt() );\n-            Date incidentDate = DateUtils.parseDate( enrollment.getOccurredAt() );\n+            Date enrollmentDate = DateUtils.fromInstant( enrollment.getEnrolledAt() );\n+            Date incidentDate = DateUtils.fromInstant( enrollment.getOccurredAt() );\n \n             programInstance.setEnrollmentDate( enrollmentDate );\n             programInstance.setIncidentDate( incidentDate != null ? incidentDate : enrollmentDate );\n", "next_change": {"commit": "4a4beb6ff3b7ca77da4a4eea381b5a0d78a8a324", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java\nindex b9e6ad2eb8..2f682abc62 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java\n", "chunk": "@@ -126,34 +126,45 @@ public class EnrollmentTrackerConverterService\n         TrackedEntityInstance trackedEntityInstance = preheat\n             .getTrackedEntity( TrackerIdScheme.UID, enrollment.getTrackedEntity() );\n \n+        Date now = new Date();\n+\n         if ( isNewEntity( programInstance ) )\n         {\n-            Date now = new Date();\n-\n             programInstance = new ProgramInstance();\n-            programInstance.setUid( enrollment.getEnrollment() );\n+            programInstance.setUid(\n+                !StringUtils.isEmpty( enrollment.getEnrollment() ) ? enrollment.getEnrollment() : enrollment.getUid() );\n             programInstance.setCreated( now );\n-            programInstance.setCreatedAtClient( now );\n-            programInstance.setLastUpdated( now );\n-            programInstance.setLastUpdatedAtClient( now );\n-\n-            Date enrollmentDate = DateUtils.fromInstant( enrollment.getEnrolledAt() );\n-            Date incidentDate = DateUtils.fromInstant( enrollment.getOccurredAt() );\n-\n-            programInstance.setEnrollmentDate( enrollmentDate );\n-            programInstance.setIncidentDate( incidentDate != null ? incidentDate : enrollmentDate );\n-            programInstance.setOrganisationUnit( organisationUnit );\n-            programInstance.setProgram( program );\n-            programInstance.setEntityInstance( trackedEntityInstance );\n-            programInstance.setFollowup( enrollment.isFollowUp() );\n-            programInstance.setGeometry( enrollment.getGeometry() );\n-\n-            if ( enrollment.getStatus() == null )\n-            {\n-                enrollment.setStatus( EnrollmentStatus.ACTIVE );\n-            }\n-\n-            programInstance.setStatus( enrollment.getStatus().getProgramStatus() );\n+            programInstance.setStoredBy( enrollment.getStoredBy() );\n+        }\n+\n+        programInstance.setLastUpdated( now );\n+        programInstance.setCreatedAtClient( DateUtils.fromInstant( enrollment.getCreatedAtClient() ) );\n+        programInstance.setLastUpdatedAtClient( DateUtils.fromInstant( enrollment.getUpdatedAtClient() ) );\n+\n+        Date enrollmentDate = DateUtils.fromInstant( enrollment.getEnrolledAt() );\n+        Date incidentDate = DateUtils.fromInstant( enrollment.getOccurredAt() );\n+\n+        programInstance.setEnrollmentDate( enrollmentDate );\n+        programInstance.setIncidentDate( incidentDate != null ? incidentDate : enrollmentDate );\n+        programInstance.setOrganisationUnit( organisationUnit );\n+        programInstance.setProgram( program );\n+        programInstance.setEntityInstance( trackedEntityInstance );\n+        programInstance.setFollowup( enrollment.isFollowUp() );\n+        programInstance.setGeometry( enrollment.getGeometry() );\n+\n+        if ( enrollment.getStatus() == null )\n+        {\n+            enrollment.setStatus( EnrollmentStatus.ACTIVE );\n+        }\n+\n+        programInstance.setStatus( enrollment.getStatus().getProgramStatus() );\n+\n+        if ( programInstance.isCompleted() )\n+        {\n+            programInstance\n+                .setEndDate( enrollment.getCompletedAt() != null ? DateUtils.fromInstant( enrollment.getCompletedAt() )\n+                    : new Date() );\n+            programInstance.setCompletedBy( enrollment.getCompletedBy() );\n         }\n \n         if ( isNotEmpty( enrollment.getNotes() ) )\n", "next_change": {"commit": "5a236b7964bc1e38c927c9a390e6672756e997ce", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java\nindex 2f682abc62..37e19febe9 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java\n", "chunk": "@@ -157,14 +161,29 @@ public class EnrollmentTrackerConverterService\n             enrollment.setStatus( EnrollmentStatus.ACTIVE );\n         }\n \n+        programInstance.setEndDate( DateUtils.fromInstant( enrollment.getCompletedAt() ) );\n+        programInstance.setCompletedBy( enrollment.getCompletedBy() );\n+\n+        ProgramStatus previousStatus = programInstance.getStatus();\n         programInstance.setStatus( enrollment.getStatus().getProgramStatus() );\n \n-        if ( programInstance.isCompleted() )\n+        if ( !Objects.equal( previousStatus, programInstance.getStatus() ) )\n         {\n-            programInstance\n-                .setEndDate( enrollment.getCompletedAt() != null ? DateUtils.fromInstant( enrollment.getCompletedAt() )\n-                    : new Date() );\n-            programInstance.setCompletedBy( enrollment.getCompletedBy() );\n+            if ( programInstance.isCompleted() )\n+            {\n+                programInstance\n+                    .setEndDate(\n+                        enrollment.getCompletedAt() != null ? DateUtils.fromInstant( enrollment.getCompletedAt() )\n+                            : new Date() );\n+                programInstance.setCompletedBy(\n+                    enrollment.getCompletedBy() != null ? enrollment.getCompletedBy() : preheat.getUsername() );\n+            }\n+            else if ( programInstance.getStatus().equals( ProgramStatus.CANCELLED ) )\n+            {\n+                programInstance.setEndDate(\n+                    enrollment.getCompletedAt() != null ? DateUtils.fromInstant( enrollment.getCompletedAt() )\n+                        : new Date() );\n+            }\n         }\n \n         if ( isNotEmpty( enrollment.getNotes() ) )\n", "next_change": {"commit": "d117ff9ce355694569f7c6477141cf35c6412609", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java\nindex 37e19febe9..d33445ce3d 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/EnrollmentTrackerConverterService.java\n", "chunk": "@@ -171,18 +171,12 @@ public class EnrollmentTrackerConverterService\n         {\n             if ( programInstance.isCompleted() )\n             {\n-                programInstance\n-                    .setEndDate(\n-                        enrollment.getCompletedAt() != null ? DateUtils.fromInstant( enrollment.getCompletedAt() )\n-                            : new Date() );\n-                programInstance.setCompletedBy(\n-                    enrollment.getCompletedBy() != null ? enrollment.getCompletedBy() : preheat.getUsername() );\n+                programInstance.setEndDate( new Date() );\n+                programInstance.setCompletedBy( preheat.getUsername() );\n             }\n             else if ( programInstance.getStatus().equals( ProgramStatus.CANCELLED ) )\n             {\n-                programInstance.setEndDate(\n-                    enrollment.getCompletedAt() != null ? DateUtils.fromInstant( enrollment.getCompletedAt() )\n-                        : new Date() );\n+                programInstance.setEndDate( new Date() );\n             }\n         }\n \n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "message": "Merge commit", "committedDate": null}, {"oid": "399526882c2fbbf5600922b3c3b6030420cf4e96", "committedDate": "2020-07-13 12:23:07 +0200", "message": "feat: Run rule engine rules in new importer [DHIS2-7310]"}, {"oid": "3e3dc98d92f0c13fb56cf17894eab06a78842133", "committedDate": "2020-08-04 17:20:37 +0200", "message": "feat: Enrollment/Events note persistence"}, {"oid": "8374cb43e422eddc1f4c01bb715d8d285acc37be", "committedDate": "2020-08-10 11:38:43 +0200", "message": "Merge remote-tracking branch 'origin/master' into DHIS2-7310-merge"}, {"oid": "81227d538954409f62f12f23cd8db87dc95228a1", "committedDate": "2020-08-10 13:38:00 +0200", "message": "Do not validate payload in the converters"}, {"oid": "adcecc1a241d031228aa3169f3de930083a28acb", "committedDate": "2020-08-10 14:21:20 +0200", "message": "Fix transactional in enrollment converter"}, {"oid": "c70f79c6febd4b98e98c6f0c572d1099207d86b3", "committedDate": "2020-08-12 16:29:26 +0200", "message": "Code review fixes"}, {"oid": "cb2ee65c0210c0d4b2bd8851789da8d4adfaf04d", "committedDate": "2020-09-07 10:28:21 +0200", "message": "fix: [DHIS2-9287] Fix the stats in the import summary (#6062)"}, {"oid": "ae4d365663ffddc9a34d1cdc0f629fd7b6386e90", "committedDate": "2020-11-03 10:25:55 +0100", "message": "feat: improve note validation during tracker import [TECH-457]"}, {"oid": "3e799d196b8f73ad216ea100a07ddd5f7dfc53e0", "committedDate": "2020-11-30 16:37:14 +0100", "message": "fix: remove long running transaction during Tracker Import (#6782)"}, {"oid": "699074cbe82db1a8e0a5e72edf2a981f3628b54b", "committedDate": "2020-12-07 10:47:48 +0100", "message": "fix: Tracker Identifiers resolution during Tracker import (#6824)"}, {"oid": "3ab88a5f4623a8c749246bedef34fcb926d185cb", "committedDate": "2020-12-08 10:40:14 +0100", "message": "fix: [DHIS2-7310] Move rule engine call and validations after bundle validation (#6843)"}, {"oid": "7098e9412b922ed70f8136f30c7d790e27bb43be", "committedDate": "2020-12-10 10:43:44 +0100", "message": "chore: Remove unused imports (#6875)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "20cccd6ead34b08992c0fbd323da268eb0f85ad4", "committedDate": "2021-01-13 11:33:03 +0100", "message": "fix: Fix data values conversion for event [DHIS2-10173] (#7081)"}, {"oid": "6e8f0d6c150b303d780b397f7646ff3383f16250", "committedDate": "2021-01-21 09:32:50 +0100", "message": "feat: new tracked dto's properties referring to a date, now use Instant instead of String [DHIS2-101239] (#7119)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "4a4beb6ff3b7ca77da4a4eea381b5a0d78a8a324", "committedDate": "2021-02-01 18:12:32 +0100", "message": "fix: [DHIS2-10208] client dates are not persisted correctly in tei,enrollment,events (2.36) (#7236)"}, {"oid": "5a236b7964bc1e38c927c9a390e6672756e997ce", "committedDate": "2021-04-19 14:49:15 +0200", "message": "feature: Review fields in domain objects and create updatable fields validator [DHIS2-10875] (#7842)"}, {"oid": "c1826a5d13bd4a80a9ff1ed14646dbb8f32b4cfb", "committedDate": "2021-04-28 09:05:12 +0200", "message": "feat: Add createdBy and updatedBy to tracker objects in new tracker importer [hDHIS2-10885] (#7923)"}, {"oid": "a4643bd1fe923092627bdd884e05e5dacc7a5911", "committedDate": "2021-04-30 14:46:25 +0200", "message": "refactor: Refactor rule engine service in the new importer to group events and enrollments in one call (#7925)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "c039b8f75c1d965414de926f04540dfaabdd104c", "committedDate": "2022-02-23 13:08:25 +0100", "message": "chore: Clean up service program rule module [TECH-938] (#9885)"}, {"oid": "d117ff9ce355694569f7c6477141cf35c6412609", "committedDate": "2022-03-04 11:13:40 +0100", "message": "fix: Return complete information for user fields in NTI [DHIS2-12717] (#9936)"}, {"oid": "0303652efe35da369ba1d2a437a4b5797a52c451", "committedDate": "2022-04-01 09:37:58 +0200", "message": "chore: tracker entities only support idScheme UID DHIS2-12563 (#10329)"}, {"oid": "24fcc26c114646261ceec22e2ab6c15ce62244f5", "committedDate": "2022-04-29 09:36:38 +0200", "message": "fix: Enrollment.orgUnit is a MetadataIdentifier (#10587)"}, {"oid": "0b13bfde3383fa87f777453a04c201838ebe69d8", "committedDate": "2022-12-19 09:10:18 +0100", "message": "chore: single validator DHIS2-14298 (#12597)"}, {"oid": "23bc93bab95c05bccaf9bc414c955bba79a6f8c9", "committedDate": "2023-01-05 13:57:59 +0100", "message": "refactor: Replace manual constructors with @RequiredArgsConstructor (#12684)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgzMjM2NQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446832365", "body": "TYPO: Enrollment should be called enrollment, not event", "bodyText": "TYPO: Enrollment should be called enrollment, not event", "bodyHTML": "<p dir=\"auto\">TYPO: Enrollment should be called enrollment, not event</p>", "author": "enricocolasante", "createdAt": "2020-06-29T07:43:54Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java", "diffHunk": "@@ -0,0 +1,180 @@\n+package org.hisp.dhis.tracker.validation.hooks;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\n+ */\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.hisp.dhis.program.ProgramInstance;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+import org.hisp.dhis.tracker.TrackerImportStrategy;\n+import org.hisp.dhis.tracker.bundle.TrackerBundle;\n+import org.hisp.dhis.tracker.domain.Enrollment;\n+import org.hisp.dhis.tracker.domain.Event;\n+import org.hisp.dhis.tracker.domain.TrackedEntity;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n+import org.hisp.dhis.tracker.validation.TrackerImportValidationContext;\n+import org.springframework.stereotype.Component;\n+\n+import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+@Slf4j\n+@Component\n+public class PreCheckExistenceValidationHook\n+    extends AbstractTrackerDtoValidationHook\n+{\n+    @Override\n+    public void validateTrackedEntity( ValidationErrorReporter reporter,\n+        TrackedEntity trackedEntity )\n+    {\n+        TrackerImportValidationContext context = reporter.getValidationContext();\n+        TrackerBundle bundle = context.getBundle();\n+        TrackerImportStrategy importStrategy = bundle.getImportStrategy();\n+\n+        TrackedEntityInstance existingTe = context\n+            .getTrackedEntityInstance( trackedEntity.getTrackedEntity() );\n+\n+        if ( importStrategy.isCreateAndUpdate() )\n+        {\n+            if ( existingTe == null )\n+            {\n+                context.setStrategy( trackedEntity, TrackerImportStrategy.CREATE );\n+            }\n+            else\n+            {\n+                context.setStrategy( trackedEntity, TrackerImportStrategy.UPDATE );\n+            }\n+        }\n+        else if ( existingTe != null && importStrategy.isCreate() )\n+        {\n+            reporter.addError( newReport( TrackerErrorCode.E1002 )\n+                .addArg( trackedEntity.getTrackedEntity() ) );\n+        }\n+        else if ( existingTe != null && existingTe.isDeleted() && importStrategy.isDelete() )\n+        {\n+            reporter.addError( newReport( TrackerErrorCode.E1114 )\n+                .addArg( trackedEntity.getTrackedEntity() ) );\n+        }\n+        else if ( existingTe == null && importStrategy.isUpdateOrDelete() )\n+        {\n+            reporter.addError( newReport( TrackerErrorCode.E1063 )\n+                .addArg( trackedEntity.getTrackedEntity() ) );\n+        }\n+        else\n+        {\n+            context.setStrategy( trackedEntity, importStrategy );\n+        }\n+    }\n+\n+    @Override\n+    public void validateEnrollment( ValidationErrorReporter reporter, Enrollment event )", "originalCommit": "12bd589850367af9ce124e78ea519bd7842cb3c5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5bd4c4a413adbc1e587b0e1194af3da352084268", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java\nindex e3315e6373..bce10282b8 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java\n", "chunk": "@@ -97,43 +97,43 @@ public class PreCheckExistenceValidationHook\n     }\n \n     @Override\n-    public void validateEnrollment( ValidationErrorReporter reporter, Enrollment event )\n+    public void validateEnrollment( ValidationErrorReporter reporter, Enrollment enrollment )\n     {\n         TrackerImportValidationContext context = reporter.getValidationContext();\n         TrackerBundle bundle = context.getBundle();\n         TrackerImportStrategy importStrategy = bundle.getImportStrategy();\n \n-        ProgramInstance existingPi = context.getProgramInstance( event.getEnrollment() );\n+        ProgramInstance existingPi = context.getProgramInstance( enrollment.getEnrollment() );\n \n         if ( importStrategy.isCreateAndUpdate() )\n         {\n             if ( existingPi == null )\n             {\n-                context.setStrategy( event, TrackerImportStrategy.CREATE );\n+                context.setStrategy( enrollment, TrackerImportStrategy.CREATE );\n             }\n             else\n             {\n-                context.setStrategy( event, TrackerImportStrategy.UPDATE );\n+                context.setStrategy( enrollment, TrackerImportStrategy.UPDATE );\n             }\n         }\n         else if ( existingPi != null && importStrategy.isCreate() )\n         {\n             reporter.addError( newReport( TrackerErrorCode.E1080 )\n-                .addArg( event.getEnrollment() ) );\n+                .addArg( enrollment.getEnrollment() ) );\n         }\n         else if ( existingPi != null && existingPi.isDeleted() && importStrategy.isDelete() )\n         {\n             reporter.addError( newReport( TrackerErrorCode.E1113 )\n-                .addArg( event.getEnrollment() ) );\n+                .addArg( enrollment.getEnrollment() ) );\n         }\n         else if ( existingPi == null && importStrategy.isUpdateOrDelete() )\n         {\n             reporter.addError( newReport( TrackerErrorCode.E1081 )\n-                .addArg( event.getEnrollment() ) );\n+                .addArg( enrollment.getEnrollment() ) );\n         }\n         else\n         {\n-            context.setStrategy( event, importStrategy );\n+            context.setStrategy( enrollment, importStrategy );\n         }\n     }\n \n", "next_change": null}]}, "revised_code_in_main": {"commit": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java\nindex e3315e6373..bd9cec3cbd 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java\n", "chunk": "@@ -97,43 +106,43 @@ public class PreCheckExistenceValidationHook\n     }\n \n     @Override\n-    public void validateEnrollment( ValidationErrorReporter reporter, Enrollment event )\n+    public void validateEnrollment( ValidationErrorReporter reporter, Enrollment enrollment )\n     {\n         TrackerImportValidationContext context = reporter.getValidationContext();\n         TrackerBundle bundle = context.getBundle();\n         TrackerImportStrategy importStrategy = bundle.getImportStrategy();\n \n-        ProgramInstance existingPi = context.getProgramInstance( event.getEnrollment() );\n+        ProgramInstance existingPi = context.getProgramInstance( enrollment.getEnrollment() );\n \n         if ( importStrategy.isCreateAndUpdate() )\n         {\n             if ( existingPi == null )\n             {\n-                context.setStrategy( event, TrackerImportStrategy.CREATE );\n+                context.setStrategy( enrollment, TrackerImportStrategy.CREATE );\n             }\n             else\n             {\n-                context.setStrategy( event, TrackerImportStrategy.UPDATE );\n+                context.setStrategy( enrollment, TrackerImportStrategy.UPDATE );\n             }\n         }\n         else if ( existingPi != null && importStrategy.isCreate() )\n         {\n             reporter.addError( newReport( TrackerErrorCode.E1080 )\n-                .addArg( event.getEnrollment() ) );\n+                .addArg( enrollment.getEnrollment() ) );\n         }\n         else if ( existingPi != null && existingPi.isDeleted() && importStrategy.isDelete() )\n         {\n             reporter.addError( newReport( TrackerErrorCode.E1113 )\n-                .addArg( event.getEnrollment() ) );\n+                .addArg( enrollment.getEnrollment() ) );\n         }\n         else if ( existingPi == null && importStrategy.isUpdateOrDelete() )\n         {\n             reporter.addError( newReport( TrackerErrorCode.E1081 )\n-                .addArg( event.getEnrollment() ) );\n+                .addArg( enrollment.getEnrollment() ) );\n         }\n         else\n         {\n-            context.setStrategy( event, importStrategy );\n+            context.setStrategy( enrollment, importStrategy );\n         }\n     }\n \n", "next_change": {"commit": "3e3b32e56ff5554a0095396eddffceac65b6b8de", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java\nindex bd9cec3cbd..2341916308 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java\n", "chunk": "@@ -127,18 +124,15 @@ public class PreCheckExistenceValidationHook\n         }\n         else if ( existingPi != null && importStrategy.isCreate() )\n         {\n-            reporter.addError( newReport( TrackerErrorCode.E1080 )\n-                .addArg( enrollment.getEnrollment() ) );\n+            addError( reporter, E1080, enrollment.getEnrollment() );\n         }\n         else if ( existingPi != null && existingPi.isDeleted() && importStrategy.isDelete() )\n         {\n-            reporter.addError( newReport( TrackerErrorCode.E1113 )\n-                .addArg( enrollment.getEnrollment() ) );\n+            addError( reporter, E1113, enrollment.getEnrollment() );\n         }\n         else if ( existingPi == null && importStrategy.isUpdateOrDelete() )\n         {\n-            reporter.addError( newReport( TrackerErrorCode.E1081 )\n-                .addArg( enrollment.getEnrollment() ) );\n+            addError( reporter, E1081, enrollment.getEnrollment() );\n         }\n         else\n         {\n", "next_change": {"commit": "6e020e7c286db62dbc57c1b58a94f5841dc09551", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java\nindex 2341916308..0d5b989896 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java\n", "chunk": "@@ -126,10 +132,6 @@ public class PreCheckExistenceValidationHook\n         {\n             addError( reporter, E1080, enrollment.getEnrollment() );\n         }\n-        else if ( existingPi != null && existingPi.isDeleted() && importStrategy.isDelete() )\n-        {\n-            addError( reporter, E1113, enrollment.getEnrollment() );\n-        }\n         else if ( existingPi == null && importStrategy.isUpdateOrDelete() )\n         {\n             addError( reporter, E1081, enrollment.getEnrollment() );\n", "next_change": {"commit": "20dfefe359779d7e1c1921ba920465227e72f071", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java\nindex 0d5b989896..c583323260 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java\n", "chunk": "@@ -117,18 +89,7 @@ public class PreCheckExistenceValidationHook\n             return;\n         }\n \n-        if ( importStrategy.isCreateAndUpdate() )\n-        {\n-            if ( existingPi == null )\n-            {\n-                context.setStrategy( enrollment, TrackerImportStrategy.CREATE );\n-            }\n-            else\n-            {\n-                context.setStrategy( enrollment, TrackerImportStrategy.UPDATE );\n-            }\n-        }\n-        else if ( existingPi != null && importStrategy.isCreate() )\n+        if ( existingPi != null && importStrategy.isCreate() )\n         {\n             addError( reporter, E1080, enrollment.getEnrollment() );\n         }\n", "next_change": {"commit": "97fa18701761c6993e20f2e7a3816ea689129480", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java\nindex c583323260..9db3e6bb40 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java\n", "chunk": "@@ -85,17 +94,17 @@ public class PreCheckExistenceValidationHook\n         // If the tracked entity is soft-deleted no operation is allowed\n         if ( existingPi != null && existingPi.isDeleted() )\n         {\n-            addError( reporter, E1113, enrollment.getEnrollment() );\n+            addError( reporter, enrollment, E1113, enrollment.getEnrollment() );\n             return;\n         }\n \n         if ( existingPi != null && importStrategy.isCreate() )\n         {\n-            addError( reporter, E1080, enrollment.getEnrollment() );\n+            addError( reporter, enrollment, E1080, enrollment.getEnrollment() );\n         }\n         else if ( existingPi == null && importStrategy.isUpdateOrDelete() )\n         {\n-            addError( reporter, E1081, enrollment.getEnrollment() );\n+            addError( reporter, enrollment, E1081, enrollment.getEnrollment() );\n         }\n     }\n \n", "next_change": {"commit": "1d8350a9e9ac100aaaa831894ba3f857b46e2474", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java\nindex 9db3e6bb40..8c578db370 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java\n", "chunk": "@@ -94,17 +94,17 @@ public class PreCheckExistenceValidationHook\n         // If the tracked entity is soft-deleted no operation is allowed\n         if ( existingPi != null && existingPi.isDeleted() )\n         {\n-            addError( reporter, enrollment, E1113, enrollment.getEnrollment() );\n+            reporter.addError( enrollment, E1113, enrollment.getEnrollment() );\n             return;\n         }\n \n         if ( existingPi != null && importStrategy.isCreate() )\n         {\n-            addError( reporter, enrollment, E1080, enrollment.getEnrollment() );\n+            reporter.addError( enrollment, E1080, enrollment.getEnrollment() );\n         }\n         else if ( existingPi == null && importStrategy.isUpdateOrDelete() )\n         {\n-            addError( reporter, enrollment, E1081, enrollment.getEnrollment() );\n+            reporter.addError( enrollment, E1081, enrollment.getEnrollment() );\n         }\n     }\n \n", "next_change": {"commit": "ef0cbd365e47f1f88befb80d9650cce75280bd35", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java\nindex 8c578db370..0ea7715ce9 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java\n", "chunk": "@@ -111,10 +110,9 @@ public class PreCheckExistenceValidationHook\n     @Override\n     public void validateEvent( ValidationErrorReporter reporter, Event event )\n     {\n-        TrackerImportValidationContext context = reporter.getValidationContext();\n-        TrackerImportStrategy importStrategy = context.getStrategy( event );\n+        TrackerImportStrategy importStrategy = reporter.getBundle().getStrategy( event );\n \n-        ProgramStageInstance existingPsi = context.getProgramStageInstance( event.getEvent() );\n+        ProgramStageInstance existingPsi = reporter.getBundle().getProgramStageInstance( event.getEvent() );\n \n         // If the event is soft-deleted no operation is allowed\n         if ( existingPsi != null && existingPsi.isDeleted() )\n", "next_change": {"commit": "f7cfc83610c75486bbb0457dde057eaed777f3d2", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java\nindex 0ea7715ce9..8bc4c46659 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java\n", "chunk": "@@ -108,11 +109,11 @@ public class PreCheckExistenceValidationHook\n     }\n \n     @Override\n-    public void validateEvent( ValidationErrorReporter reporter, Event event )\n+    public void validateEvent( ValidationErrorReporter reporter, TrackerBundle bundle, Event event )\n     {\n-        TrackerImportStrategy importStrategy = reporter.getBundle().getStrategy( event );\n+        TrackerImportStrategy importStrategy = bundle.getStrategy( event );\n \n-        ProgramStageInstance existingPsi = reporter.getBundle().getProgramStageInstance( event.getEvent() );\n+        ProgramStageInstance existingPsi = bundle.getProgramStageInstance( event.getEvent() );\n \n         // If the event is soft-deleted no operation is allowed\n         if ( existingPsi != null && existingPsi.isDeleted() )\n", "next_change": {"commit": "07ff89195ce66114c2b5a744039c2b2ce7a8f440", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java\nindex 8bc4c46659..767eda62d3 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java\n", "chunk": "@@ -113,7 +114,7 @@ public class PreCheckExistenceValidationHook\n     {\n         TrackerImportStrategy importStrategy = bundle.getStrategy( event );\n \n-        ProgramStageInstance existingPsi = bundle.getProgramStageInstance( event.getEvent() );\n+        ProgramStageInstance existingPsi = bundle.getPreheat().getEvent( event.getEvent() );\n \n         // If the event is soft-deleted no operation is allowed\n         if ( existingPsi != null && existingPsi.isDeleted() )\n", "next_change": {"commit": "10cdef4bf3594ae654a3fe71d6abd00dad4e3996", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/RelationshipPreCheckExistenceValidator.java\nsimilarity index 55%\nrename from dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java\nrename to dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/RelationshipPreCheckExistenceValidator.java\nindex 767eda62d3..dc3ffc84b2 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/RelationshipPreCheckExistenceValidator.java\n", "chunk": "@@ -27,114 +27,26 @@\n  */\n package org.hisp.dhis.tracker.validation.hooks;\n \n-import static org.hisp.dhis.tracker.report.TrackerErrorCode.E1002;\n-import static org.hisp.dhis.tracker.report.TrackerErrorCode.E1030;\n-import static org.hisp.dhis.tracker.report.TrackerErrorCode.E1032;\n-import static org.hisp.dhis.tracker.report.TrackerErrorCode.E1063;\n-import static org.hisp.dhis.tracker.report.TrackerErrorCode.E1080;\n-import static org.hisp.dhis.tracker.report.TrackerErrorCode.E1081;\n-import static org.hisp.dhis.tracker.report.TrackerErrorCode.E1082;\n-import static org.hisp.dhis.tracker.report.TrackerErrorCode.E1113;\n-import static org.hisp.dhis.tracker.report.TrackerErrorCode.E1114;\n import static org.hisp.dhis.tracker.report.TrackerErrorCode.E4015;\n import static org.hisp.dhis.tracker.report.TrackerErrorCode.E4016;\n import static org.hisp.dhis.tracker.report.TrackerErrorCode.E4017;\n \n-import org.hisp.dhis.program.ProgramInstance;\n-import org.hisp.dhis.program.ProgramStageInstance;\n-import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n import org.hisp.dhis.tracker.TrackerImportStrategy;\n import org.hisp.dhis.tracker.bundle.TrackerBundle;\n-import org.hisp.dhis.tracker.domain.Enrollment;\n-import org.hisp.dhis.tracker.domain.Event;\n import org.hisp.dhis.tracker.domain.Relationship;\n-import org.hisp.dhis.tracker.domain.TrackedEntity;\n-import org.hisp.dhis.tracker.validation.TrackerValidationHook;\n import org.hisp.dhis.tracker.validation.ValidationErrorReporter;\n+import org.hisp.dhis.tracker.validation.Validator;\n import org.springframework.stereotype.Component;\n \n /**\n  * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n  */\n @Component\n-public class PreCheckExistenceValidationHook\n-    implements TrackerValidationHook\n+public class RelationshipPreCheckExistenceValidator\n+    implements Validator<Relationship>\n {\n     @Override\n-    public void validateTrackedEntity( ValidationErrorReporter reporter, TrackerBundle bundle,\n-        TrackedEntity trackedEntity )\n-    {\n-        TrackerImportStrategy importStrategy = bundle.getStrategy( trackedEntity );\n-\n-        TrackedEntityInstance existingTe = bundle.getPreheat().getTrackedEntity( trackedEntity.getTrackedEntity() );\n-\n-        // If the tracked entity is soft-deleted no operation is allowed\n-        if ( existingTe != null && existingTe.isDeleted() )\n-        {\n-            reporter.addError( trackedEntity, E1114, trackedEntity.getTrackedEntity() );\n-            return;\n-        }\n-\n-        if ( existingTe != null && importStrategy.isCreate() )\n-        {\n-            reporter.addError( trackedEntity, E1002, trackedEntity.getTrackedEntity() );\n-        }\n-        else if ( existingTe == null && importStrategy.isUpdateOrDelete() )\n-        {\n-            reporter.addError( trackedEntity, E1063, trackedEntity.getTrackedEntity() );\n-        }\n-    }\n-\n-    @Override\n-    public void validateEnrollment( ValidationErrorReporter reporter, TrackerBundle bundle, Enrollment enrollment )\n-    {\n-        TrackerImportStrategy importStrategy = bundle.getStrategy( enrollment );\n-\n-        ProgramInstance existingPi = bundle.getPreheat().getEnrollment( enrollment.getEnrollment() );\n-\n-        // If the tracked entity is soft-deleted no operation is allowed\n-        if ( existingPi != null && existingPi.isDeleted() )\n-        {\n-            reporter.addError( enrollment, E1113, enrollment.getEnrollment() );\n-            return;\n-        }\n-\n-        if ( existingPi != null && importStrategy.isCreate() )\n-        {\n-            reporter.addError( enrollment, E1080, enrollment.getEnrollment() );\n-        }\n-        else if ( existingPi == null && importStrategy.isUpdateOrDelete() )\n-        {\n-            reporter.addError( enrollment, E1081, enrollment.getEnrollment() );\n-        }\n-    }\n-\n-    @Override\n-    public void validateEvent( ValidationErrorReporter reporter, TrackerBundle bundle, Event event )\n-    {\n-        TrackerImportStrategy importStrategy = bundle.getStrategy( event );\n-\n-        ProgramStageInstance existingPsi = bundle.getPreheat().getEvent( event.getEvent() );\n-\n-        // If the event is soft-deleted no operation is allowed\n-        if ( existingPsi != null && existingPsi.isDeleted() )\n-        {\n-            reporter.addError( event, E1082, event.getEvent() );\n-            return;\n-        }\n-\n-        if ( existingPsi != null && importStrategy.isCreate() )\n-        {\n-            reporter.addError( event, E1030, event.getEvent() );\n-        }\n-        else if ( existingPsi == null && importStrategy.isUpdateOrDelete() )\n-        {\n-            reporter.addError( event, E1032, event.getEvent() );\n-        }\n-    }\n-\n-    @Override\n-    public void validateRelationship( ValidationErrorReporter reporter, TrackerBundle bundle,\n+    public void validate( ValidationErrorReporter reporter, TrackerBundle bundle,\n         Relationship relationship )\n     {\n \n", "next_change": null}]}}]}}]}}]}}]}}]}}, {"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java\nindex 0d5b989896..c583323260 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java\n", "chunk": "@@ -136,18 +97,13 @@ public class PreCheckExistenceValidationHook\n         {\n             addError( reporter, E1081, enrollment.getEnrollment() );\n         }\n-        else\n-        {\n-            context.setStrategy( enrollment, importStrategy );\n-        }\n     }\n \n     @Override\n     public void validateEvent( ValidationErrorReporter reporter, Event event )\n     {\n         TrackerImportValidationContext context = reporter.getValidationContext();\n-        TrackerBundle bundle = context.getBundle();\n-        TrackerImportStrategy importStrategy = bundle.getImportStrategy();\n+        TrackerImportStrategy importStrategy = context.getStrategy( event );\n \n         ProgramStageInstance existingPsi = context.getProgramStageInstance( event.getEvent() );\n \n", "next_change": {"commit": "97fa18701761c6993e20f2e7a3816ea689129480", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java\nindex c583323260..9db3e6bb40 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java\n", "chunk": "@@ -110,17 +119,17 @@ public class PreCheckExistenceValidationHook\n         // If the event is soft-deleted no operation is allowed\n         if ( existingPsi != null && existingPsi.isDeleted() )\n         {\n-            addError( reporter, E1082, event.getEvent() );\n+            addError( reporter, event, E1082, event.getEvent() );\n             return;\n         }\n \n         if ( existingPsi != null && importStrategy.isCreate() )\n         {\n-            addError( reporter, E1030, event.getEvent() );\n+            addError( reporter, event, E1030, event.getEvent() );\n         }\n         else if ( existingPsi == null && importStrategy.isUpdateOrDelete() )\n         {\n-            addError( reporter, E1032, event.getEvent() );\n+            addError( reporter, event, E1032, event.getEvent() );\n         }\n     }\n \n", "next_change": {"commit": "1d8350a9e9ac100aaaa831894ba3f857b46e2474", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java\nindex 9db3e6bb40..8c578db370 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java\n", "chunk": "@@ -119,17 +119,17 @@ public class PreCheckExistenceValidationHook\n         // If the event is soft-deleted no operation is allowed\n         if ( existingPsi != null && existingPsi.isDeleted() )\n         {\n-            addError( reporter, event, E1082, event.getEvent() );\n+            reporter.addError( event, E1082, event.getEvent() );\n             return;\n         }\n \n         if ( existingPsi != null && importStrategy.isCreate() )\n         {\n-            addError( reporter, event, E1030, event.getEvent() );\n+            reporter.addError( event, E1030, event.getEvent() );\n         }\n         else if ( existingPsi == null && importStrategy.isUpdateOrDelete() )\n         {\n-            addError( reporter, event, E1032, event.getEvent() );\n+            reporter.addError( event, E1032, event.getEvent() );\n         }\n     }\n \n", "next_change": {"commit": "ef0cbd365e47f1f88befb80d9650cce75280bd35", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java\nindex 8c578db370..0ea7715ce9 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java\n", "chunk": "@@ -136,9 +134,10 @@ public class PreCheckExistenceValidationHook\n     @Override\n     public void validateRelationship( ValidationErrorReporter reporter, Relationship relationship )\n     {\n-        TrackerImportValidationContext context = reporter.getValidationContext();\n-\n-        org.hisp.dhis.relationship.Relationship existingRelationship = context.getRelationship( relationship );\n+        TrackerBundle bundle = reporter.getBundle();\n+        TrackerPreheat preheat = bundle.getPreheat();\n+        org.hisp.dhis.relationship.Relationship existingRelationship = preheat.getRelationship( bundle.getIdentifier(),\n+            relationship );\n \n         if ( existingRelationship != null )\n         {\n", "next_change": {"commit": "0303652efe35da369ba1d2a437a4b5797a52c451", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java\nindex 0ea7715ce9..cc1e358723 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java\n", "chunk": "@@ -136,7 +136,7 @@ public class PreCheckExistenceValidationHook\n     {\n         TrackerBundle bundle = reporter.getBundle();\n         TrackerPreheat preheat = bundle.getPreheat();\n-        org.hisp.dhis.relationship.Relationship existingRelationship = preheat.getRelationship( bundle.getIdentifier(),\n+        org.hisp.dhis.relationship.Relationship existingRelationship = preheat.getRelationship(\n             relationship );\n \n         if ( existingRelationship != null )\n", "next_change": {"commit": "9b2608b1ac695b4a62bca379a1807eae40520918", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java\nindex cc1e358723..66db42ed11 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java\n", "chunk": "@@ -138,11 +139,22 @@ public class PreCheckExistenceValidationHook\n         TrackerPreheat preheat = bundle.getPreheat();\n         org.hisp.dhis.relationship.Relationship existingRelationship = preheat.getRelationship(\n             relationship );\n+        TrackerImportStrategy importStrategy = bundle.getStrategy( relationship );\n \n-        if ( existingRelationship != null )\n+        if ( existingRelationship != null && importStrategy.isUpdate() )\n         {\n             reporter.addWarning( relationship, E4015,\n                 relationship.getRelationship() );\n+            return;\n+        }\n+\n+        if ( existingRelationship != null && importStrategy.isCreate() )\n+        {\n+            reporter.addError( relationship, E4015, relationship.getUid() );\n+        }\n+        else if ( existingRelationship == null && importStrategy.isUpdateOrDelete() )\n+        {\n+            reporter.addError( relationship, E4016, relationship.getUid() );\n         }\n     }\n \n", "next_change": {"commit": "d76299848da281461da799f3fb3ca8ac3c63795a", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java\nindex 66db42ed11..64c3c08584 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java\n", "chunk": "@@ -135,27 +134,52 @@ public class PreCheckExistenceValidationHook\n     @Override\n     public void validateRelationship( ValidationErrorReporter reporter, Relationship relationship )\n     {\n-        TrackerBundle bundle = reporter.getBundle();\n-        TrackerPreheat preheat = bundle.getPreheat();\n-        org.hisp.dhis.relationship.Relationship existingRelationship = preheat.getRelationship(\n-            relationship );\n-        TrackerImportStrategy importStrategy = bundle.getStrategy( relationship );\n \n-        if ( existingRelationship != null && importStrategy.isUpdate() )\n-        {\n-            reporter.addWarning( relationship, E4015,\n-                relationship.getRelationship() );\n-            return;\n-        }\n+        org.hisp.dhis.relationship.Relationship existingRelationship = reporter.getBundle()\n+            .getRelationship( relationship.getRelationship() );\n+        TrackerImportStrategy importStrategy = reporter.getBundle().getStrategy( relationship );\n \n-        if ( existingRelationship != null && importStrategy.isCreate() )\n-        {\n-            reporter.addError( relationship, E4015, relationship.getUid() );\n-        }\n-        else if ( existingRelationship == null && importStrategy.isUpdateOrDelete() )\n-        {\n-            reporter.addError( relationship, E4016, relationship.getUid() );\n-        }\n+        validateRelationshipNotDeleted( reporter, existingRelationship, relationship );\n+        validateRelationshipNotUpdated( reporter, existingRelationship, relationship, importStrategy );\n+        validateNewRelationshipNotExistAlready( reporter, existingRelationship, relationship, importStrategy );\n+        validateUpdatedOrDeletedRelationshipExists( reporter, existingRelationship, relationship, importStrategy );\n+    }\n+\n+    private void validateRelationshipNotDeleted( ValidationErrorReporter reporter,\n+        org.hisp.dhis.relationship.Relationship existingRelationship,\n+        Relationship relationship )\n+    {\n+        reporter.addErrorIf( () -> existingRelationship != null && existingRelationship.isDeleted(), relationship,\n+            E4017, relationship.getRelationship() );\n+    }\n+\n+    private void validateRelationshipNotUpdated( ValidationErrorReporter reporter,\n+        org.hisp.dhis.relationship.Relationship existingRelationship,\n+        Relationship relationship,\n+        TrackerImportStrategy importStrategy )\n+    {\n+        reporter.addWarningIf(\n+            () -> existingRelationship != null && !existingRelationship.isDeleted() && importStrategy.isUpdate(),\n+            relationship, E4015, relationship.getRelationship() );\n+    }\n+\n+    private void validateNewRelationshipNotExistAlready( ValidationErrorReporter reporter,\n+        org.hisp.dhis.relationship.Relationship existingRelationship,\n+        Relationship relationship,\n+        TrackerImportStrategy importStrategy )\n+    {\n+        reporter.addErrorIf(\n+            () -> existingRelationship != null && !existingRelationship.isDeleted() && importStrategy.isCreate(),\n+            relationship, E4015, relationship.getRelationship() );\n+    }\n+\n+    private void validateUpdatedOrDeletedRelationshipExists( ValidationErrorReporter reporter,\n+        org.hisp.dhis.relationship.Relationship existingRelationship,\n+        Relationship relationship,\n+        TrackerImportStrategy importStrategy )\n+    {\n+        reporter.addErrorIf( () -> existingRelationship == null && importStrategy.isUpdateOrDelete(), relationship,\n+            E4016, relationship.getRelationship() );\n     }\n \n     @Override\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "message": "Merge commit", "committedDate": null}, {"oid": "2ed799f33ca26b918ed60473a3f097714f00492e", "committedDate": "2020-08-04 10:30:01 +0200", "message": "chore: Clean up code (#5877)"}, {"oid": "3e3dc98d92f0c13fb56cf17894eab06a78842133", "committedDate": "2020-08-04 17:20:37 +0200", "message": "feat: Enrollment/Events note persistence"}, {"oid": "3e3b32e56ff5554a0095396eddffceac65b6b8de", "committedDate": "2020-10-27 09:56:50 +0100", "message": "refactor: simplified calls to error reporting (#6437)"}, {"oid": "6e28dbfdaea7ceacbe560fe82ddba1e94c6cd203", "committedDate": "2020-11-11 17:41:55 +0100", "message": "fix: Exception when importing TEI with relationship [DHIS2-9856] (#6552)"}, {"oid": "0bf55d776481f6511e5f9ebca5de1f2cf79777c0", "committedDate": "2020-11-19 13:55:46 +0100", "message": "refactor: New Tracker Error reporting refactor (#6706)"}, {"oid": "c9397132d35e1394cef55720639f8649005a96ad", "committedDate": "2020-12-03 17:07:36 +0100", "message": "fix: prevent changes to a deleted event (#6820)"}, {"oid": "46a4fb9730a952d5cbc36bce0718757e6edd2809", "committedDate": "2020-12-15 15:50:22 +0100", "message": "fix: DHIS2-10084 prevent changes to deleted tracked entities (#6882)"}, {"oid": "6e020e7c286db62dbc57c1b58a94f5841dc09551", "committedDate": "2020-12-21 10:08:58 +0100", "message": "Dhis2 10084 enrollments soft deleted (#6937)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "c71a97bf6c13f342a7c972c7061dab2b61d9d587", "committedDate": "2021-04-08 08:14:46 +0200", "message": "refactor: Clean up redundant integration tests for validation hooks [TECH-579] (#7811)"}, {"oid": "20dfefe359779d7e1c1921ba920465227e72f071", "committedDate": "2021-05-25 12:55:24 +0200", "message": "fix: Remove validations from objects deletion service in new tracker importer [DHIS2-10789] (#8053)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "97fa18701761c6993e20f2e7a3816ea689129480", "committedDate": "2022-01-11 15:31:02 +0100", "message": "chore: hooks should add errors via reporter directly TECH-880 (#9523)"}, {"oid": "1d8350a9e9ac100aaaa831894ba3f857b46e2474", "committedDate": "2022-01-13 14:15:17 +0100", "message": "chore: adding errors and warnings is responsibility of the ValidationErrorReporter TECH-880 (#9616)"}, {"oid": "ef0cbd365e47f1f88befb80d9650cce75280bd35", "committedDate": "2022-03-08 15:12:00 +0100", "message": "chore: move DB access and mutation to preheat and preprocessor DHIS2-12623 (#9904)"}, {"oid": "0303652efe35da369ba1d2a437a4b5797a52c451", "committedDate": "2022-04-01 09:37:58 +0200", "message": "chore: tracker entities only support idScheme UID DHIS2-12563 (#10329)"}, {"oid": "9b2608b1ac695b4a62bca379a1807eae40520918", "committedDate": "2022-04-26 13:27:56 +0200", "message": "fix: Fix error when deleting relationships [DHIS2-13146] (#10595)"}, {"oid": "d76299848da281461da799f3fb3ca8ac3c63795a", "committedDate": "2022-05-09 13:06:14 +0000", "message": "feat: Make relationship soft deletable [DHIS2-11320] (#10708)"}, {"oid": "f7cfc83610c75486bbb0457dde057eaed777f3d2", "committedDate": "2022-05-27 15:15:25 +0200", "message": "chore: ValidationErrorReporter does not need the bunlde DHIS2-12519 (#10878)"}, {"oid": "b0a861c0308005b865cafa2344c1231c0a4f2bc3", "committedDate": "2022-12-02 13:36:08 +0100", "message": "fix: turn removeOnError into skipOnError DHIS2-14213 (#12457)"}, {"oid": "7ac68b368a1dbd9362973b30f7160399abe801a0", "committedDate": "2022-12-06 09:04:47 +0100", "message": "chore: move ValidationErrorReporter close to its usage (#12486)"}, {"oid": "2f607f53c7c920bab48832e9effb2de8696652a3", "committedDate": "2022-12-12 14:56:12 +0000", "message": "fix: invalidation of tracker tree DHIS2-14213 (#12495)"}, {"oid": "07ff89195ce66114c2b5a744039c2b2ce7a8f440", "committedDate": "2022-12-13 09:51:43 +0100", "message": "chore: Clean up TrackerBundle methods [TECH-14298] (#12515)"}, {"oid": "10cdef4bf3594ae654a3fe71d6abd00dad4e3996", "committedDate": "2022-12-14 14:52:09 +0100", "message": "chore: remove TrackerValidationHook DHIS-214298 (#12557)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgzNTI3Mw==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446835273", "body": "It seems that the code is repeated for each \"entity\" TEI, Enrollment and event.\r\nMaybe it would be possible to make the errors a little bit more generic, or passing the name of the entity and extract the whole logic to a private method", "bodyText": "It seems that the code is repeated for each \"entity\" TEI, Enrollment and event.\nMaybe it would be possible to make the errors a little bit more generic, or passing the name of the entity and extract the whole logic to a private method", "bodyHTML": "<p dir=\"auto\">It seems that the code is repeated for each \"entity\" TEI, Enrollment and event.<br>\nMaybe it would be possible to make the errors a little bit more generic, or passing the name of the entity and extract the whole logic to a private method</p>", "author": "enricocolasante", "createdAt": "2020-06-29T07:49:29Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java", "diffHunk": "@@ -0,0 +1,180 @@\n+package org.hisp.dhis.tracker.validation.hooks;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\n+ */\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.hisp.dhis.program.ProgramInstance;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+import org.hisp.dhis.tracker.TrackerImportStrategy;\n+import org.hisp.dhis.tracker.bundle.TrackerBundle;\n+import org.hisp.dhis.tracker.domain.Enrollment;\n+import org.hisp.dhis.tracker.domain.Event;\n+import org.hisp.dhis.tracker.domain.TrackedEntity;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n+import org.hisp.dhis.tracker.validation.TrackerImportValidationContext;\n+import org.springframework.stereotype.Component;\n+\n+import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+@Slf4j\n+@Component\n+public class PreCheckExistenceValidationHook", "originalCommit": "12bd589850367af9ce124e78ea519bd7842cb3c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk5OTY0OQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446999649", "bodyText": "Not quite sure what you mean here. We need to check every entity if it is an update or create, since that will decide different validations to that entity later.", "author": "netroms", "createdAt": "2020-06-29T14:08:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgzNTI3Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI2NDkyOA==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r448264928", "bodyText": "@netroms - for all the three entities we are doing the same thing and consolidating them to a generic method will be nice.", "author": "abyot", "createdAt": "2020-07-01T10:18:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgzNTI3Mw=="}], "type": "inlineReview", "revised_code": {"commit": "898c87ce14bf1faf20e8f8ebf3a5bc12f27437f0", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java\nindex e3315e6373..bd9cec3cbd 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java\n", "chunk": "@@ -53,6 +55,13 @@ import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n public class PreCheckExistenceValidationHook\n     extends AbstractTrackerDtoValidationHook\n {\n+\n+    public PreCheckExistenceValidationHook( TrackedEntityAttributeService teAttrService,\n+        TrackedEntityCommentService commentService )\n+    {\n+        super( teAttrService, commentService );\n+    }\n+\n     @Override\n     public void validateTrackedEntity( ValidationErrorReporter reporter,\n         TrackedEntity trackedEntity )\n", "next_change": null}]}, "revised_code_in_main": {"commit": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java\nindex e3315e6373..bd9cec3cbd 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java\n", "chunk": "@@ -53,6 +55,13 @@ import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n public class PreCheckExistenceValidationHook\n     extends AbstractTrackerDtoValidationHook\n {\n+\n+    public PreCheckExistenceValidationHook( TrackedEntityAttributeService teAttrService,\n+        TrackedEntityCommentService commentService )\n+    {\n+        super( teAttrService, commentService );\n+    }\n+\n     @Override\n     public void validateTrackedEntity( ValidationErrorReporter reporter,\n         TrackedEntity trackedEntity )\n", "next_change": {"commit": "3e3dc98d92f0c13fb56cf17894eab06a78842133", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java\nindex bd9cec3cbd..6818d2c383 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java\n", "chunk": "@@ -50,16 +48,14 @@ import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n /**\n  * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n  */\n-@Slf4j\n @Component\n public class PreCheckExistenceValidationHook\n     extends AbstractTrackerDtoValidationHook\n {\n \n-    public PreCheckExistenceValidationHook( TrackedEntityAttributeService teAttrService,\n-        TrackedEntityCommentService commentService )\n+    public PreCheckExistenceValidationHook( TrackedEntityAttributeService teAttrService )\n     {\n-        super( teAttrService, commentService );\n+        super( teAttrService );\n     }\n \n     @Override\n", "next_change": {"commit": "3e3b32e56ff5554a0095396eddffceac65b6b8de", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java\nindex 6818d2c383..2341916308 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java\n", "chunk": "@@ -52,15 +58,13 @@ import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n public class PreCheckExistenceValidationHook\n     extends AbstractTrackerDtoValidationHook\n {\n-\n     public PreCheckExistenceValidationHook( TrackedEntityAttributeService teAttrService )\n     {\n         super( teAttrService );\n     }\n \n     @Override\n-    public void validateTrackedEntity( ValidationErrorReporter reporter,\n-        TrackedEntity trackedEntity )\n+    public void validateTrackedEntity( ValidationErrorReporter reporter, TrackedEntity trackedEntity )\n     {\n         TrackerImportValidationContext context = reporter.getValidationContext();\n         TrackerBundle bundle = context.getBundle();\n", "next_change": {"commit": "0bf55d776481f6511e5f9ebca5de1f2cf79777c0", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java\nindex 2341916308..049b884359 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java\n", "chunk": "@@ -58,11 +59,6 @@ import static org.hisp.dhis.tracker.report.TrackerErrorCode.E1114;\n public class PreCheckExistenceValidationHook\n     extends AbstractTrackerDtoValidationHook\n {\n-    public PreCheckExistenceValidationHook( TrackedEntityAttributeService teAttrService )\n-    {\n-        super( teAttrService );\n-    }\n-\n     @Override\n     public void validateTrackedEntity( ValidationErrorReporter reporter, TrackedEntity trackedEntity )\n     {\n", "next_change": {"commit": "20dfefe359779d7e1c1921ba920465227e72f071", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java\nindex 049b884359..c583323260 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java\n", "chunk": "@@ -63,121 +52,95 @@ public class PreCheckExistenceValidationHook\n     public void validateTrackedEntity( ValidationErrorReporter reporter, TrackedEntity trackedEntity )\n     {\n         TrackerImportValidationContext context = reporter.getValidationContext();\n-        TrackerBundle bundle = context.getBundle();\n-        TrackerImportStrategy importStrategy = bundle.getImportStrategy();\n+        TrackerImportStrategy importStrategy = context.getStrategy( trackedEntity );\n \n         TrackedEntityInstance existingTe = context\n             .getTrackedEntityInstance( trackedEntity.getTrackedEntity() );\n \n-        if ( importStrategy.isCreateAndUpdate() )\n+        // If the tracked entity is soft-deleted no operation is allowed\n+        if ( existingTe != null && existingTe.isDeleted() )\n         {\n-            if ( existingTe == null )\n-            {\n-                context.setStrategy( trackedEntity, TrackerImportStrategy.CREATE );\n-            }\n-            else\n-            {\n-                context.setStrategy( trackedEntity, TrackerImportStrategy.UPDATE );\n-            }\n+            addError( reporter, E1114, trackedEntity.getTrackedEntity() );\n+            return;\n         }\n-        else if ( existingTe != null && importStrategy.isCreate() )\n+\n+        if ( existingTe != null && importStrategy.isCreate() )\n         {\n             addError( reporter, E1002, trackedEntity.getTrackedEntity() );\n         }\n-        else if ( existingTe != null && existingTe.isDeleted() && importStrategy.isDelete() )\n-        {\n-            addError( reporter, E1114, trackedEntity.getTrackedEntity() );\n-        }\n         else if ( existingTe == null && importStrategy.isUpdateOrDelete() )\n         {\n             addError( reporter, E1063, trackedEntity.getTrackedEntity() );\n         }\n-        else\n-        {\n-            context.setStrategy( trackedEntity, importStrategy );\n-        }\n     }\n \n     @Override\n     public void validateEnrollment( ValidationErrorReporter reporter, Enrollment enrollment )\n     {\n         TrackerImportValidationContext context = reporter.getValidationContext();\n-        TrackerBundle bundle = context.getBundle();\n-        TrackerImportStrategy importStrategy = bundle.getImportStrategy();\n+        TrackerImportStrategy importStrategy = context.getStrategy( enrollment );\n \n         ProgramInstance existingPi = context.getProgramInstance( enrollment.getEnrollment() );\n \n-        if ( importStrategy.isCreateAndUpdate() )\n+        // If the tracked entity is soft-deleted no operation is allowed\n+        if ( existingPi != null && existingPi.isDeleted() )\n         {\n-            if ( existingPi == null )\n-            {\n-                context.setStrategy( enrollment, TrackerImportStrategy.CREATE );\n-            }\n-            else\n-            {\n-                context.setStrategy( enrollment, TrackerImportStrategy.UPDATE );\n-            }\n+            addError( reporter, E1113, enrollment.getEnrollment() );\n+            return;\n         }\n-        else if ( existingPi != null && importStrategy.isCreate() )\n+\n+        if ( existingPi != null && importStrategy.isCreate() )\n         {\n             addError( reporter, E1080, enrollment.getEnrollment() );\n         }\n-        else if ( existingPi != null && existingPi.isDeleted() && importStrategy.isDelete() )\n-        {\n-            addError( reporter, E1113, enrollment.getEnrollment() );\n-        }\n         else if ( existingPi == null && importStrategy.isUpdateOrDelete() )\n         {\n             addError( reporter, E1081, enrollment.getEnrollment() );\n         }\n-        else\n-        {\n-            context.setStrategy( enrollment, importStrategy );\n-        }\n     }\n \n     @Override\n     public void validateEvent( ValidationErrorReporter reporter, Event event )\n     {\n         TrackerImportValidationContext context = reporter.getValidationContext();\n-        TrackerBundle bundle = context.getBundle();\n-        TrackerImportStrategy importStrategy = bundle.getImportStrategy();\n+        TrackerImportStrategy importStrategy = context.getStrategy( event );\n \n         ProgramStageInstance existingPsi = context.getProgramStageInstance( event.getEvent() );\n \n-        if ( importStrategy.isCreateAndUpdate() )\n+        // If the event is soft-deleted no operation is allowed\n+        if ( existingPsi != null && existingPsi.isDeleted() )\n         {\n-            if ( existingPsi == null )\n-            {\n-                context.setStrategy( event, TrackerImportStrategy.CREATE );\n-            }\n-            else\n-            {\n-                context.setStrategy( event, TrackerImportStrategy.UPDATE );\n-            }\n+            addError( reporter, E1082, event.getEvent() );\n+            return;\n         }\n-        else if ( existingPsi != null && importStrategy.isCreate() )\n+\n+        if ( existingPsi != null && importStrategy.isCreate() )\n         {\n             addError( reporter, E1030, event.getEvent() );\n         }\n-        else if ( existingPsi != null && existingPsi.isDeleted() && importStrategy.isDelete() )\n-        {\n-            addError( reporter, E1082, event.getEvent() );\n-        }\n         else if ( existingPsi == null && importStrategy.isUpdateOrDelete() )\n         {\n             addError( reporter, E1032, event.getEvent() );\n         }\n-        else\n+    }\n+\n+    @Override\n+    public void validateRelationship( ValidationErrorReporter reporter, Relationship relationship )\n+    {\n+        TrackerImportValidationContext context = reporter.getValidationContext();\n+\n+        org.hisp.dhis.relationship.Relationship existingRelationship = context.getRelationship( relationship );\n+\n+        if ( existingRelationship != null )\n         {\n-            context.setStrategy( event, importStrategy );\n+            addWarning( reporter, E4015, relationship.getRelationship() );\n         }\n     }\n \n     @Override\n-    public void validateRelationship( ValidationErrorReporter reporter, Relationship relationship )\n+    public boolean needsToRun( TrackerImportStrategy strategy )\n     {\n-       //TODO need to add existence check for relationship\n+        return true;\n     }\n \n     @Override\n", "next_change": {"commit": "b0a861c0308005b865cafa2344c1231c0a4f2bc3", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java\nindex c583323260..fa98b2c034 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java\n", "chunk": "@@ -144,7 +192,7 @@ public class PreCheckExistenceValidationHook\n     }\n \n     @Override\n-    public boolean removeOnError()\n+    public boolean skipOnError()\n     {\n         return true;\n     }\n", "next_change": null}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "message": "Merge commit", "committedDate": null}, {"oid": "2ed799f33ca26b918ed60473a3f097714f00492e", "committedDate": "2020-08-04 10:30:01 +0200", "message": "chore: Clean up code (#5877)"}, {"oid": "3e3dc98d92f0c13fb56cf17894eab06a78842133", "committedDate": "2020-08-04 17:20:37 +0200", "message": "feat: Enrollment/Events note persistence"}, {"oid": "3e3b32e56ff5554a0095396eddffceac65b6b8de", "committedDate": "2020-10-27 09:56:50 +0100", "message": "refactor: simplified calls to error reporting (#6437)"}, {"oid": "6e28dbfdaea7ceacbe560fe82ddba1e94c6cd203", "committedDate": "2020-11-11 17:41:55 +0100", "message": "fix: Exception when importing TEI with relationship [DHIS2-9856] (#6552)"}, {"oid": "0bf55d776481f6511e5f9ebca5de1f2cf79777c0", "committedDate": "2020-11-19 13:55:46 +0100", "message": "refactor: New Tracker Error reporting refactor (#6706)"}, {"oid": "c9397132d35e1394cef55720639f8649005a96ad", "committedDate": "2020-12-03 17:07:36 +0100", "message": "fix: prevent changes to a deleted event (#6820)"}, {"oid": "46a4fb9730a952d5cbc36bce0718757e6edd2809", "committedDate": "2020-12-15 15:50:22 +0100", "message": "fix: DHIS2-10084 prevent changes to deleted tracked entities (#6882)"}, {"oid": "6e020e7c286db62dbc57c1b58a94f5841dc09551", "committedDate": "2020-12-21 10:08:58 +0100", "message": "Dhis2 10084 enrollments soft deleted (#6937)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "c71a97bf6c13f342a7c972c7061dab2b61d9d587", "committedDate": "2021-04-08 08:14:46 +0200", "message": "refactor: Clean up redundant integration tests for validation hooks [TECH-579] (#7811)"}, {"oid": "20dfefe359779d7e1c1921ba920465227e72f071", "committedDate": "2021-05-25 12:55:24 +0200", "message": "fix: Remove validations from objects deletion service in new tracker importer [DHIS2-10789] (#8053)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "97fa18701761c6993e20f2e7a3816ea689129480", "committedDate": "2022-01-11 15:31:02 +0100", "message": "chore: hooks should add errors via reporter directly TECH-880 (#9523)"}, {"oid": "1d8350a9e9ac100aaaa831894ba3f857b46e2474", "committedDate": "2022-01-13 14:15:17 +0100", "message": "chore: adding errors and warnings is responsibility of the ValidationErrorReporter TECH-880 (#9616)"}, {"oid": "ef0cbd365e47f1f88befb80d9650cce75280bd35", "committedDate": "2022-03-08 15:12:00 +0100", "message": "chore: move DB access and mutation to preheat and preprocessor DHIS2-12623 (#9904)"}, {"oid": "0303652efe35da369ba1d2a437a4b5797a52c451", "committedDate": "2022-04-01 09:37:58 +0200", "message": "chore: tracker entities only support idScheme UID DHIS2-12563 (#10329)"}, {"oid": "9b2608b1ac695b4a62bca379a1807eae40520918", "committedDate": "2022-04-26 13:27:56 +0200", "message": "fix: Fix error when deleting relationships [DHIS2-13146] (#10595)"}, {"oid": "d76299848da281461da799f3fb3ca8ac3c63795a", "committedDate": "2022-05-09 13:06:14 +0000", "message": "feat: Make relationship soft deletable [DHIS2-11320] (#10708)"}, {"oid": "f7cfc83610c75486bbb0457dde057eaed777f3d2", "committedDate": "2022-05-27 15:15:25 +0200", "message": "chore: ValidationErrorReporter does not need the bunlde DHIS2-12519 (#10878)"}, {"oid": "b0a861c0308005b865cafa2344c1231c0a4f2bc3", "committedDate": "2022-12-02 13:36:08 +0100", "message": "fix: turn removeOnError into skipOnError DHIS2-14213 (#12457)"}, {"oid": "7ac68b368a1dbd9362973b30f7160399abe801a0", "committedDate": "2022-12-06 09:04:47 +0100", "message": "chore: move ValidationErrorReporter close to its usage (#12486)"}, {"oid": "2f607f53c7c920bab48832e9effb2de8696652a3", "committedDate": "2022-12-12 14:56:12 +0000", "message": "fix: invalidation of tracker tree DHIS2-14213 (#12495)"}, {"oid": "07ff89195ce66114c2b5a744039c2b2ce7a8f440", "committedDate": "2022-12-13 09:51:43 +0100", "message": "chore: Clean up TrackerBundle methods [TECH-14298] (#12515)"}, {"oid": "10cdef4bf3594ae654a3fe71d6abd00dad4e3996", "committedDate": "2022-12-14 14:52:09 +0100", "message": "chore: remove TrackerValidationHook DHIS-214298 (#12557)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgzNzQxOQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446837419", "body": "Same as before, repeated code", "bodyText": "Same as before, repeated code", "bodyHTML": "<p dir=\"auto\">Same as before, repeated code</p>", "author": "enricocolasante", "createdAt": "2020-06-29T07:53:18Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckSecurityValidationHook.java", "diffHunk": "@@ -0,0 +1,130 @@\n+package org.hisp.dhis.tracker.validation.hooks;\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.hisp.dhis.organisationunit.OrganisationUnit;\n+import org.hisp.dhis.program.ProgramInstance;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+import org.hisp.dhis.tracker.TrackerImportStrategy;\n+import org.hisp.dhis.tracker.domain.Enrollment;\n+import org.hisp.dhis.tracker.domain.Event;\n+import org.hisp.dhis.tracker.domain.TrackedEntity;\n+import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n+import org.hisp.dhis.tracker.validation.TrackerImportValidationContext;\n+import org.hisp.dhis.tracker.validation.service.TrackerImportAccessManager;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Objects;\n+\n+import static org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors.ENROLLMENT_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors.EVENT_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors.ORGANISATION_UNIT_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors.TRACKED_ENTITY_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors.USER_CANT_BE_NULL;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+@Component\n+public class PreCheckSecurityValidationHook", "originalCommit": "12bd589850367af9ce124e78ea519bd7842cb3c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk5OTU4Nw==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446999587", "bodyText": "Not sure what you mean is duplicated. Intellij and SonarCube usually informs of duplicated code, I get no warnings here.", "author": "netroms", "createdAt": "2020-06-29T14:08:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjgzNzQxOQ=="}], "type": "inlineReview", "revised_code": {"commit": "898c87ce14bf1faf20e8f8ebf3a5bc12f27437f0", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckSecurityValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckSecurityValidationHook.java\nindex 468d91d830..ccac06c1d8 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckSecurityValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckSecurityValidationHook.java\n", "chunk": "@@ -56,8 +55,18 @@ import static org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors\n public class PreCheckSecurityValidationHook\n     extends AbstractTrackerDtoValidationHook\n {\n-    @Autowired\n-    private TrackerImportAccessManager accessManager;\n+    private final TrackerImportAccessManager accessManager;\n+\n+    public PreCheckSecurityValidationHook( TrackedEntityAttributeService teAttrService,\n+        TrackedEntityCommentService commentService,\n+        TrackerImportAccessManager accessManager )\n+    {\n+        super( teAttrService, commentService );\n+\n+        checkNotNull( accessManager );\n+\n+        this.accessManager = accessManager;\n+    }\n \n     @Override\n     public void validateTrackedEntity( ValidationErrorReporter reporter,\n", "next_change": null}]}, "revised_code_in_main": {"commit": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckSecurityValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckSecurityValidationHook.java\nindex 468d91d830..ccac06c1d8 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckSecurityValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckSecurityValidationHook.java\n", "chunk": "@@ -56,8 +55,18 @@ import static org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors\n public class PreCheckSecurityValidationHook\n     extends AbstractTrackerDtoValidationHook\n {\n-    @Autowired\n-    private TrackerImportAccessManager accessManager;\n+    private final TrackerImportAccessManager accessManager;\n+\n+    public PreCheckSecurityValidationHook( TrackedEntityAttributeService teAttrService,\n+        TrackedEntityCommentService commentService,\n+        TrackerImportAccessManager accessManager )\n+    {\n+        super( teAttrService, commentService );\n+\n+        checkNotNull( accessManager );\n+\n+        this.accessManager = accessManager;\n+    }\n \n     @Override\n     public void validateTrackedEntity( ValidationErrorReporter reporter,\n", "next_change": {"commit": "0bf55d776481f6511e5f9ebca5de1f2cf79777c0", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckSecurityValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckSecurityValidationHook.java\nindex ccac06c1d8..6df07f66c0 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckSecurityValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckSecurityValidationHook.java\n", "chunk": "@@ -57,12 +56,8 @@ public class PreCheckSecurityValidationHook\n {\n     private final TrackerImportAccessManager accessManager;\n \n-    public PreCheckSecurityValidationHook( TrackedEntityAttributeService teAttrService,\n-        TrackedEntityCommentService commentService,\n-        TrackerImportAccessManager accessManager )\n+    public PreCheckSecurityValidationHook( TrackerImportAccessManager accessManager )\n     {\n-        super( teAttrService, commentService );\n-\n         checkNotNull( accessManager );\n \n         this.accessManager = accessManager;\n", "next_change": {"commit": "e72a194b035dc4f76df0c9cdaf7701a299b1558a", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckSecurityValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckSecurityValidationHook.java\ndeleted file mode 100644\nindex 6df07f66c0..0000000000\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckSecurityValidationHook.java\n+++ /dev/null\n", "chunk": "@@ -1,139 +0,0 @@\n-package org.hisp.dhis.tracker.validation.hooks;\n-/*\n- * Copyright (c) 2004-2020, University of Oslo\n- * All rights reserved.\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions are met:\n- * Redistributions of source code must retain the above copyright notice, this\n- * list of conditions and the following disclaimer.\n- *\n- * Redistributions in binary form must reproduce the above copyright notice,\n- * this list of conditions and the following disclaimer in the documentation\n- * and/or other materials provided with the distribution.\n- * Neither the name of the HISP project nor the names of its contributors may\n- * be used to endorse or promote products derived from this software without\n- * specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n- * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n- * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n- * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n- * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n- * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n- * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- */\n-\n-import static com.google.api.client.util.Preconditions.checkNotNull;\n-import static org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors.ENROLLMENT_CANT_BE_NULL;\n-import static org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors.EVENT_CANT_BE_NULL;\n-import static org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors.ORGANISATION_UNIT_CANT_BE_NULL;\n-import static org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors.TRACKED_ENTITY_CANT_BE_NULL;\n-import static org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors.USER_CANT_BE_NULL;\n-\n-import org.hisp.dhis.program.ProgramInstance;\n-import org.hisp.dhis.program.ProgramStageInstance;\n-import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n-import org.hisp.dhis.tracker.TrackerImportStrategy;\n-import org.hisp.dhis.tracker.domain.Enrollment;\n-import org.hisp.dhis.tracker.domain.Event;\n-import org.hisp.dhis.tracker.domain.Relationship;\n-import org.hisp.dhis.tracker.domain.TrackedEntity;\n-import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n-import org.hisp.dhis.tracker.validation.TrackerImportValidationContext;\n-import org.hisp.dhis.tracker.validation.service.TrackerImportAccessManager;\n-import org.springframework.stereotype.Component;\n-\n-/**\n- * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n- */\n-@Component\n-public class PreCheckSecurityValidationHook\n-    extends AbstractTrackerDtoValidationHook\n-{\n-    private final TrackerImportAccessManager accessManager;\n-\n-    public PreCheckSecurityValidationHook( TrackerImportAccessManager accessManager )\n-    {\n-        checkNotNull( accessManager );\n-\n-        this.accessManager = accessManager;\n-    }\n-\n-    @Override\n-    public void validateTrackedEntity( ValidationErrorReporter reporter,\n-        TrackedEntity trackedEntity )\n-    {\n-        TrackerImportValidationContext context = reporter.getValidationContext();\n-        TrackerImportStrategy strategy = context.getStrategy( trackedEntity );\n-\n-        checkNotNull( context.getBundle().getUser(), USER_CANT_BE_NULL );\n-        checkNotNull( trackedEntity, TRACKED_ENTITY_CANT_BE_NULL );\n-        checkNotNull( trackedEntity.getOrgUnit(), ORGANISATION_UNIT_CANT_BE_NULL );\n-\n-        if ( strategy.isUpdateOrDelete() )\n-        {\n-            TrackedEntityInstance trackedEntityInstance = context\n-                .getTrackedEntityInstance( trackedEntity.getTrackedEntity() );\n-            accessManager.checkOrgUnitInCaptureScope( reporter, trackedEntityInstance.getOrganisationUnit() );\n-        }\n-\n-        accessManager.checkOrgUnitInCaptureScope( reporter, context.getOrganisationUnit( trackedEntity.getOrgUnit() ) );\n-    }\n-\n-    @Override\n-    public void validateEnrollment( ValidationErrorReporter reporter, Enrollment enrollment )\n-    {\n-        TrackerImportValidationContext validationContext = reporter.getValidationContext();\n-        TrackerImportStrategy strategy = validationContext.getStrategy( enrollment );\n-\n-        checkNotNull( validationContext.getBundle().getUser(), USER_CANT_BE_NULL );\n-        checkNotNull( enrollment, ENROLLMENT_CANT_BE_NULL );\n-        checkNotNull( enrollment.getOrgUnit(), ORGANISATION_UNIT_CANT_BE_NULL );\n-\n-        if ( strategy.isUpdateOrDelete() )\n-        {\n-            ProgramInstance pi = validationContext.getProgramInstance( enrollment.getEnrollment() );\n-            accessManager.checkOrgUnitInCaptureScope( reporter, pi.getOrganisationUnit() );\n-        }\n-\n-        accessManager\n-            .checkOrgUnitInCaptureScope( reporter, validationContext.getOrganisationUnit( enrollment.getOrgUnit() ) );\n-    }\n-\n-    @Override\n-    public void validateEvent( ValidationErrorReporter reporter, Event event )\n-    {\n-        TrackerImportValidationContext validationContext = reporter.getValidationContext();\n-        TrackerImportStrategy strategy = validationContext.getStrategy( event );\n-\n-        checkNotNull( validationContext.getBundle().getUser(), USER_CANT_BE_NULL );\n-        checkNotNull( event, EVENT_CANT_BE_NULL );\n-        checkNotNull( event.getOrgUnit(), ORGANISATION_UNIT_CANT_BE_NULL );\n-\n-        if ( strategy.isUpdateOrDelete() )\n-        {\n-            ProgramStageInstance psi = validationContext.getProgramStageInstance( event.getEvent() );\n-            accessManager.checkOrgUnitInCaptureScope( reporter, psi.getOrganisationUnit() );\n-        }\n-\n-        accessManager\n-            .checkOrgUnitInCaptureScope( reporter, validationContext.getOrganisationUnit( event.getOrgUnit() ) );\n-    }\n-\n-    @Override\n-    public void validateRelationship( ValidationErrorReporter reporter, Relationship relationship )\n-    {\n-        // NOTHING TO DO HERE\n-    }\n-\n-    @Override\n-    public boolean removeOnError()\n-    {\n-        return true;\n-    }\n-\n-}\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "message": "Merge commit", "committedDate": null}, {"oid": "3e3dc98d92f0c13fb56cf17894eab06a78842133", "committedDate": "2020-08-04 17:20:37 +0200", "message": "feat: Enrollment/Events note persistence"}, {"oid": "6e28dbfdaea7ceacbe560fe82ddba1e94c6cd203", "committedDate": "2020-11-11 17:41:55 +0100", "message": "fix: Exception when importing TEI with relationship [DHIS2-9856] (#6552)"}, {"oid": "0bf55d776481f6511e5f9ebca5de1f2cf79777c0", "committedDate": "2020-11-19 13:55:46 +0100", "message": "refactor: New Tracker Error reporting refactor (#6706)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "33f99931474be434371691a439a56becb9f23025", "committedDate": "2021-04-07 10:36:15 +0200", "message": "refactor: Clean up metadata and relations validation hooks [TECH-579] (#7807)"}, {"oid": "e72a194b035dc4f76df0c9cdaf7701a299b1558a", "committedDate": "2021-10-05 13:25:05 +0200", "message": "fix: Allow TEI updates in search scope [DHIS2-11910] (2.38) (#8921)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg0MjE4OA==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446842188", "body": "You can remove this if.\r\nPrint report will do nothing if there are not error reports.\r\nIn general, if you need to do something with the elements on the list, you don't need to check the size", "bodyText": "You can remove this if.\nPrint report will do nothing if there are not error reports.\nIn general, if you need to do something with the elements on the list, you don't need to check the size", "bodyHTML": "<p dir=\"auto\">You can remove this if.<br>\nPrint report will do nothing if there are not error reports.<br>\nIn general, if you need to do something with the elements on the list, you don't need to check the size</p>", "author": "enricocolasante", "createdAt": "2020-06-29T08:01:43Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/DefaultTrackerValidationService.java", "diffHunk": "@@ -28,53 +28,114 @@\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n-import java.util.ArrayList;\n-import java.util.List;\n-\n+import lombok.extern.slf4j.Slf4j;\n+import org.hisp.dhis.commons.timer.Timer;\n import org.hisp.dhis.tracker.ValidationMode;\n import org.hisp.dhis.tracker.bundle.TrackerBundle;\n+import org.hisp.dhis.tracker.report.TrackerErrorReport;\n+import org.hisp.dhis.tracker.report.TrackerValidationHookTimerReport;\n import org.hisp.dhis.tracker.report.TrackerValidationReport;\n+import org.hisp.dhis.user.User;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n \n-import lombok.extern.slf4j.Slf4j;\n+import java.util.ArrayList;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import static org.hisp.dhis.tracker.validation.TrackerImportValidationConfig.VALIDATION_ORDER;\n+import static org.hisp.dhis.tracker.validation.TrackerImportValidationConfig.VALIDATION_ORDER_MAP;\n \n /**\n  * @author Morten Olav Hansen <mortenoh@gmail.com>\n  */\n @Slf4j\n @Service\n-public class DefaultTrackerValidationService implements TrackerValidationService\n+public class DefaultTrackerValidationService\n+    implements TrackerValidationService\n {\n     private List<TrackerValidationHook> validationHooks = new ArrayList<>();\n \n     @Autowired( required = false )\n     public void setValidationHooks( List<TrackerValidationHook> validationHooks )\n     {\n         this.validationHooks = validationHooks;\n+\n+        if ( !VALIDATION_ORDER\n+            .containsAll(\n+                validationHooks.stream().map( TrackerValidationHook::getClass ).collect( Collectors.toList() ) ) )\n+        {\n+            String orderList = VALIDATION_ORDER.stream().map( Class::getName )\n+                .collect( Collectors.joining( \",\" ) );\n+\n+            String internList = validationHooks.stream().map( i -> i.getClass().getName() )\n+                .collect( Collectors.joining( \",\" ) );\n+\n+            throw new RuntimeException(\n+                String.format(\n+                    \"ValidationConfig.class is missing a validation hook in the validation order list, \" +\n+                        \"please add it to the list. Order list: %s, service list: %s\",\n+                    orderList, internList ) );\n+        }\n+\n+        this.validationHooks.sort( Comparator.comparingInt( o -> VALIDATION_ORDER_MAP.get( o.getClass() ) ) );\n     }\n \n     @Override\n     public TrackerValidationReport validate( TrackerBundle bundle )\n     {\n         TrackerValidationReport validationReport = new TrackerValidationReport();\n \n-        if ( (bundle.getUser() == null || bundle.getUser().isSuper()) && ValidationMode.SKIP == bundle.getValidationMode() )\n+        User user = bundle.getUser();\n+\n+        if ( (user == null || user.isSuper()) && ValidationMode.SKIP == bundle.getValidationMode() )\n         {\n-            log.warn( \"Skipping validation for metadata import by user '\" + bundle.getUsername() + \"'. Not recommended.\" );\n+            log.warn( \"Skipping validation for metadata import by user '\" +\n+                bundle.getUsername() + \"'. Not recommended.\" );\n             return validationReport;\n         }\n \n-        for ( TrackerValidationHook hook : validationHooks )\n-        {\n-            validationReport.add( hook.validate( bundle ) );\n+        TrackerImportValidationContext context = new TrackerImportValidationContext( bundle );\n \n-            if ( !validationReport.isEmpty() && ValidationMode.FAIL_FAST == bundle.getValidationMode() )\n+        try\n+        {\n+            for ( TrackerValidationHook hook : validationHooks )\n             {\n-                break;\n+                if ( hook.isEnabled() )\n+                {\n+                    Timer hookTimer = Timer.startTimer();\n+\n+                    List<TrackerErrorReport> errors = hook.validate( context );\n+                    if ( !errors.isEmpty() )\n+                    {\n+                        validationReport.add( errors );\n+                    }\n+\n+                    validationReport.add( TrackerValidationHookTimerReport.builder()\n+                        .name( hook.getClass().getName() )\n+                        .totalTime( hookTimer.toString() ).build() );\n+                }\n             }\n         }\n+        catch ( ValidationFailFastException e )\n+        {\n+            validationReport.add( e.getErrors() );\n+        }\n+\n+        if ( validationReport.getErrorReports().size() > 0 )", "originalCommit": "12bd589850367af9ce124e78ea519bd7842cb3c5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "68c9d6c0ee6f2fd2462d63d9f3bef1a317f76ac6", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/DefaultTrackerValidationService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/DefaultTrackerValidationService.java\nindex e764243b2f..34b84bb6cf 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/DefaultTrackerValidationService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/DefaultTrackerValidationService.java\n", "chunk": "@@ -123,10 +106,7 @@ public class DefaultTrackerValidationService\n             validationReport.add( e.getErrors() );\n         }\n \n-        if ( validationReport.getErrorReports().size() > 0 )\n-        {\n-            printReport( validationReport );\n-        }\n+        printReport( validationReport );\n \n         return validationReport;\n     }\n", "next_change": {"commit": "0c469e1350e645b019954827553da9f855b7dcb4", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/DefaultTrackerValidationService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/DefaultTrackerValidationService.java\nindex 34b84bb6cf..b0c45f7998 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/DefaultTrackerValidationService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/DefaultTrackerValidationService.java\n", "chunk": "@@ -106,16 +101,6 @@ public class DefaultTrackerValidationService\n             validationReport.add( e.getErrors() );\n         }\n \n-        printReport( validationReport );\n-\n         return validationReport;\n     }\n-\n-    protected void printReport( TrackerValidationReport report )\n-    {\n-        for ( TrackerErrorReport errorReport : report.getErrorReports() )\n-        {\n-            log.error( errorReport.toString() );\n-        }\n-    }\n }\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/DefaultTrackerValidationService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/DefaultTrackerValidationService.java\nindex e764243b2f..caabd4bb2a 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/DefaultTrackerValidationService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/DefaultTrackerValidationService.java\n", "chunk": "@@ -123,19 +102,6 @@ public class DefaultTrackerValidationService\n             validationReport.add( e.getErrors() );\n         }\n \n-        if ( validationReport.getErrorReports().size() > 0 )\n-        {\n-            printReport( validationReport );\n-        }\n-\n         return validationReport;\n     }\n-\n-    protected void printReport( TrackerValidationReport report )\n-    {\n-        for ( TrackerErrorReport errorReport : report.getErrorReports() )\n-        {\n-            log.error( errorReport.toString() );\n-        }\n-    }\n }\n", "next_change": {"commit": "3ab88a5f4623a8c749246bedef34fcb926d185cb", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/DefaultTrackerValidationService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/DefaultTrackerValidationService.java\nindex caabd4bb2a..266b7ce187 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/DefaultTrackerValidationService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/DefaultTrackerValidationService.java\n", "chunk": "@@ -102,6 +112,24 @@ public class DefaultTrackerValidationService\n             validationReport.add( e.getErrors() );\n         }\n \n+        removeInvalidObjects( bundle, context.getRootReporter() );\n+\n         return validationReport;\n     }\n+\n+    private void removeInvalidObjects( TrackerBundle bundle, ValidationErrorReporter reporter )\n+    {\n+        bundle.setEvents( bundle.getEvents().stream().filter(\n+            e -> !reporter.isInvalid( TrackerType.EVENT, e.getEvent() ) )\n+            .collect( Collectors.toList() ) );\n+        bundle.setEnrollments( bundle.getEnrollments().stream().filter(\n+            e -> !reporter.isInvalid( TrackerType.ENROLLMENT, e.getEnrollment() ) )\n+            .collect( Collectors.toList() ) );\n+        bundle.setTrackedEntities( bundle.getTrackedEntities().stream().filter(\n+            e -> !reporter.isInvalid( TrackerType.TRACKED_ENTITY, e.getTrackedEntity() ) )\n+            .collect( Collectors.toList() ) );\n+        bundle.setRelationships( bundle.getRelationships().stream().filter(\n+            e -> !reporter.isInvalid( TrackerType.RELATIONSHIP, e.getRelationship() ) )\n+            .collect( Collectors.toList() ) );\n+    }\n }\n", "next_change": {"commit": "fe04922e144ac69367a99840d5518edda2d67f38", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/DefaultTrackerValidationService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/DefaultTrackerValidationService.java\nindex 266b7ce187..b04d18376c 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/DefaultTrackerValidationService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/DefaultTrackerValidationService.java\n", "chunk": "@@ -120,16 +125,16 @@ public class DefaultTrackerValidationService\n     private void removeInvalidObjects( TrackerBundle bundle, ValidationErrorReporter reporter )\n     {\n         bundle.setEvents( bundle.getEvents().stream().filter(\n-            e -> !reporter.isInvalid( TrackerType.EVENT, e.getEvent() ) )\n+            e -> !reporter.isInvalid( e ) )\n             .collect( Collectors.toList() ) );\n         bundle.setEnrollments( bundle.getEnrollments().stream().filter(\n-            e -> !reporter.isInvalid( TrackerType.ENROLLMENT, e.getEnrollment() ) )\n+            e -> !reporter.isInvalid( e ) )\n             .collect( Collectors.toList() ) );\n         bundle.setTrackedEntities( bundle.getTrackedEntities().stream().filter(\n-            e -> !reporter.isInvalid( TrackerType.TRACKED_ENTITY, e.getTrackedEntity() ) )\n+            e -> !reporter.isInvalid( e ) )\n             .collect( Collectors.toList() ) );\n         bundle.setRelationships( bundle.getRelationships().stream().filter(\n-            e -> !reporter.isInvalid( TrackerType.RELATIONSHIP, e.getRelationship() ) )\n+            e -> !reporter.isInvalid( e ) )\n             .collect( Collectors.toList() ) );\n     }\n }\n", "next_change": {"commit": "b0a861c0308005b865cafa2344c1231c0a4f2bc3", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/DefaultTrackerValidationService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/DefaultTrackerValidationService.java\nindex b04d18376c..6fb29d6548 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/DefaultTrackerValidationService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/DefaultTrackerValidationService.java\n", "chunk": "@@ -137,4 +248,9 @@ public class DefaultTrackerValidationService\n             e -> !reporter.isInvalid( e ) )\n             .collect( Collectors.toList() ) );\n     }\n+\n+    private boolean didNotPassValidation( ValidationErrorReporter reporter, String uid )\n+    {\n+        return reporter.getReportList().stream().anyMatch( r -> r.getUid().equals( uid ) );\n+    }\n }\n", "next_change": {"commit": "142122b2e693a619ad851c42b7e188ae7f6bec11", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/DefaultTrackerValidationService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/DefaultTrackerValidationService.java\nindex 6fb29d6548..5614c54a1e 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/DefaultTrackerValidationService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/DefaultTrackerValidationService.java\n", "chunk": "@@ -251,6 +251,6 @@ public class DefaultTrackerValidationService\n \n     private boolean didNotPassValidation( ValidationErrorReporter reporter, String uid )\n     {\n-        return reporter.getReportList().stream().anyMatch( r -> r.getUid().equals( uid ) );\n+        return reporter.getErrors().stream().anyMatch( r -> r.getUid().equals( uid ) );\n     }\n }\n", "next_change": {"commit": "2f607f53c7c920bab48832e9effb2de8696652a3", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/DefaultTrackerValidationService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/DefaultTrackerValidationService.java\nindex 5614c54a1e..f1842243aa 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/DefaultTrackerValidationService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/DefaultTrackerValidationService.java\n", "chunk": "@@ -233,22 +241,6 @@ public class DefaultTrackerValidationService\n         }\n     }\n \n-    private void removeInvalidObjects( TrackerBundle bundle, ValidationErrorReporter reporter )\n-    {\n-        bundle.setEvents( bundle.getEvents().stream().filter(\n-            e -> !reporter.isInvalid( e ) )\n-            .collect( Collectors.toList() ) );\n-        bundle.setEnrollments( bundle.getEnrollments().stream().filter(\n-            e -> !reporter.isInvalid( e ) )\n-            .collect( Collectors.toList() ) );\n-        bundle.setTrackedEntities( bundle.getTrackedEntities().stream().filter(\n-            e -> !reporter.isInvalid( e ) )\n-            .collect( Collectors.toList() ) );\n-        bundle.setRelationships( bundle.getRelationships().stream().filter(\n-            e -> !reporter.isInvalid( e ) )\n-            .collect( Collectors.toList() ) );\n-    }\n-\n     private boolean didNotPassValidation( ValidationErrorReporter reporter, String uid )\n     {\n         return reporter.getErrors().stream().anyMatch( r -> r.getUid().equals( uid ) );\n", "next_change": {"commit": "5524fbc7cacce0c49d1c38d09396dcb72f97a03a", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/DefaultTrackerValidationService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/DefaultTrackerValidationService.java\nindex f1842243aa..d96bf3ab5c 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/DefaultTrackerValidationService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/DefaultTrackerValidationService.java\n", "chunk": "@@ -117,131 +112,131 @@ public class DefaultTrackerValidationService\n         bundle.setEvents( persistables.getEvents() );\n         bundle.setRelationships( persistables.getRelationships() );\n \n-        validationReport.addErrors( persistables.getErrors() );\n+        reporter.getErrors().addAll( persistables.getErrors() );\n \n-        return validationReport;\n+        return new ValidationResult().addErrors( reporter.getErrors() ).addWarnings( reporter.getWarnings() );\n     }\n \n-    private void validateTrackedEntities( TrackerBundle bundle, List<TrackerValidationHook> hooks,\n-        TrackerValidationReport validationReport, ValidationErrorReporter reporter )\n+    private void validateTrackedEntities( TrackerBundle bundle, List<Validator<TrackedEntity>> validators,\n+        Reporter reporter )\n     {\n         for ( TrackedEntity tei : bundle.getTrackedEntities() )\n         {\n-            for ( TrackerValidationHook hook : hooks )\n+            for ( Validator<TrackedEntity> validator : validators )\n             {\n-                if ( hook.needsToRun( bundle.getStrategy( tei ) ) )\n+                if ( validator.needsToRun( bundle.getStrategy( tei ) ) )\n                 {\n                     Timer hookTimer = Timer.startTimer();\n \n-                    hook.validateTrackedEntity( reporter, bundle, tei );\n+                    validator.validate( reporter, bundle, tei );\n \n-                    validationReport.addTiming( new Timing(\n-                        hook.getClass().getName(),\n+                    reporter.addTiming( new Timing(\n+                        validator.getClass().getName(),\n                         hookTimer.toString() ) );\n \n-                    if ( hook.skipOnError() && didNotPassValidation( reporter, tei.getUid() ) )\n+                    if ( validator.skipOnError() && didNotPassValidation( reporter, tei.getUid() ) )\n                     {\n-                        break; // skip subsequent validation hooks for this invalid entity\n+                        break; // skip subsequent validation for this invalid entity\n                     }\n                 }\n             }\n         }\n     }\n \n-    private void validateEnrollments( TrackerBundle bundle, List<TrackerValidationHook> hooks,\n-        TrackerValidationReport validationReport, ValidationErrorReporter reporter )\n+    private void validateEnrollments( TrackerBundle bundle, List<Validator<Enrollment>> validators,\n+        Reporter reporter )\n     {\n         for ( Enrollment enrollment : bundle.getEnrollments() )\n         {\n-            for ( TrackerValidationHook hook : hooks )\n+            for ( Validator<Enrollment> validator : validators )\n             {\n-                if ( hook.needsToRun( bundle.getStrategy( enrollment ) ) )\n+                if ( validator.needsToRun( bundle.getStrategy( enrollment ) ) )\n                 {\n                     Timer hookTimer = Timer.startTimer();\n \n-                    hook.validateEnrollment( reporter, bundle, enrollment );\n+                    validator.validate( reporter, bundle, enrollment );\n \n-                    validationReport.addTiming( new Timing(\n-                        hook.getClass().getName(),\n+                    reporter.addTiming( new Timing(\n+                        validator.getClass().getName(),\n                         hookTimer.toString() ) );\n \n-                    if ( hook.skipOnError() && didNotPassValidation( reporter, enrollment.getUid() ) )\n+                    if ( validator.skipOnError() && didNotPassValidation( reporter, enrollment.getUid() ) )\n                     {\n-                        break; // skip subsequent validation hooks for this invalid entity\n+                        break; // skip subsequent validation for this invalid entity\n                     }\n                 }\n             }\n         }\n     }\n \n-    private void validateEvents( TrackerBundle bundle, List<TrackerValidationHook> hooks,\n-        TrackerValidationReport validationReport, ValidationErrorReporter reporter )\n+    private void validateEvents( TrackerBundle bundle, List<Validator<Event>> validators,\n+        Reporter reporter )\n     {\n         for ( Event event : bundle.getEvents() )\n         {\n-            for ( TrackerValidationHook hook : hooks )\n+            for ( Validator<Event> validator : validators )\n             {\n-                if ( hook.needsToRun( bundle.getStrategy( event ) ) )\n+                if ( validator.needsToRun( bundle.getStrategy( event ) ) )\n                 {\n                     Timer hookTimer = Timer.startTimer();\n \n-                    hook.validateEvent( reporter, bundle, event );\n+                    validator.validate( reporter, bundle, event );\n \n-                    validationReport.addTiming( new Timing(\n-                        hook.getClass().getName(),\n+                    reporter.addTiming( new Timing(\n+                        validator.getClass().getName(),\n                         hookTimer.toString() ) );\n \n-                    if ( hook.skipOnError() && didNotPassValidation( reporter, event.getUid() ) )\n+                    if ( validator.skipOnError() && didNotPassValidation( reporter, event.getUid() ) )\n                     {\n-                        break; // skip subsequent validation hooks for this invalid entity\n+                        break; // skip subsequent validation for this invalid entity\n                     }\n                 }\n             }\n         }\n     }\n \n-    private void validateRelationships( TrackerBundle bundle, List<TrackerValidationHook> hooks,\n-        TrackerValidationReport validationReport, ValidationErrorReporter reporter )\n+    private void validateRelationships( TrackerBundle bundle, List<Validator<Relationship>> validators,\n+        Reporter reporter )\n     {\n         for ( Relationship relationship : bundle.getRelationships() )\n         {\n-            for ( TrackerValidationHook hook : hooks )\n+            for ( Validator<Relationship> validator : validators )\n             {\n-                if ( hook.needsToRun( bundle.getStrategy( relationship ) ) )\n+                if ( validator.needsToRun( bundle.getStrategy( relationship ) ) )\n                 {\n                     Timer hookTimer = Timer.startTimer();\n \n-                    hook.validateRelationship( reporter, bundle, relationship );\n+                    validator.validate( reporter, bundle, relationship );\n \n-                    validationReport.addTiming( new Timing(\n-                        hook.getClass().getName(),\n+                    reporter.addTiming( new Timing(\n+                        validator.getClass().getName(),\n                         hookTimer.toString() ) );\n \n-                    if ( hook.skipOnError() && didNotPassValidation( reporter, relationship.getUid() ) )\n+                    if ( validator.skipOnError() && didNotPassValidation( reporter, relationship.getUid() ) )\n                     {\n-                        break; // skip subsequent validation hooks for this invalid entity\n+                        break; // skip subsequent validation for this invalid entity\n                     }\n                 }\n             }\n         }\n     }\n \n-    private static void validateBundle( TrackerBundle bundle, List<TrackerValidationHook> hooks,\n-        TrackerValidationReport validationReport, ValidationErrorReporter reporter )\n+    private static void validateBundle( TrackerBundle bundle, List<Validator<TrackerBundle>> validators,\n+        Reporter reporter )\n     {\n-        for ( TrackerValidationHook hook : hooks )\n+        for ( Validator<TrackerBundle> hook : validators )\n         {\n             Timer hookTimer = Timer.startTimer();\n \n-            hook.validate( reporter, bundle );\n+            hook.validate( reporter, bundle, bundle );\n \n-            validationReport.addTiming( new Timing(\n+            reporter.addTiming( new Timing(\n                 hook.getClass().getName(),\n                 hookTimer.toString() ) );\n         }\n     }\n \n-    private boolean didNotPassValidation( ValidationErrorReporter reporter, String uid )\n+    private boolean didNotPassValidation( Reporter reporter, String uid )\n     {\n         return reporter.getErrors().stream().anyMatch( r -> r.getUid().equals( uid ) );\n     }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "message": "Merge commit", "committedDate": null}, {"oid": "399526882c2fbbf5600922b3c3b6030420cf4e96", "committedDate": "2020-07-13 12:23:07 +0200", "message": "feat: Run rule engine rules in new importer [DHIS2-7310]"}, {"oid": "8aaeab2ee4dd7a9ffa927147931dff8609ef787a", "committedDate": "2020-09-23 15:33:34 +0200", "message": "chore: Remove unused imports (#6219)"}, {"oid": "0bf55d776481f6511e5f9ebca5de1f2cf79777c0", "committedDate": "2020-11-19 13:55:46 +0100", "message": "refactor: New Tracker Error reporting refactor (#6706)"}, {"oid": "3ab88a5f4623a8c749246bedef34fcb926d185cb", "committedDate": "2020-12-08 10:40:14 +0100", "message": "fix: [DHIS2-7310] Move rule engine call and validations after bundle validation (#6843)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "c25b817a180f24b3de6b26d5a089563aa336aa8c", "committedDate": "2021-03-05 10:44:25 +0100", "message": "feat: Validation for values with option sets [DHIS2-10452] (#7512)"}, {"oid": "fe04922e144ac69367a99840d5518edda2d67f38", "committedDate": "2021-06-03 08:17:10 +0200", "message": "fix: Make program field read-only in event payload [DHIS2-11225] (#8086)"}, {"oid": "242e8d7cc2a94f328778c2fbad9005509c5b3360", "committedDate": "2021-12-21 13:35:53 +0100", "message": "chore: simplify tracker import validation TECH-880 (#9510)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "97fa18701761c6993e20f2e7a3816ea689129480", "committedDate": "2022-01-11 15:31:02 +0100", "message": "chore: hooks should add errors via reporter directly TECH-880 (#9523)"}, {"oid": "1c6c72cc7c172b2a5708fb662e588b797d525a55", "committedDate": "2022-01-11 15:55:54 +0100", "message": "chore: bring TrackerValidationReport closer to ValidationErrorReporter TECH-880 (#9595)"}, {"oid": "7c0131dfcfbf72dad27dc5f0a3f6a776e286c79a", "committedDate": "2022-01-11 17:47:56 +0100", "message": "chore: make TrackerValidationReport add methods fluent and name Timing TECH-880 (#9601)"}, {"oid": "1d8350a9e9ac100aaaa831894ba3f857b46e2474", "committedDate": "2022-01-13 14:15:17 +0100", "message": "chore: adding errors and warnings is responsibility of the ValidationErrorReporter TECH-880 (#9616)"}, {"oid": "ef0cbd365e47f1f88befb80d9650cce75280bd35", "committedDate": "2022-03-08 15:12:00 +0100", "message": "chore: move DB access and mutation to preheat and preprocessor DHIS2-12623 (#9904)"}, {"oid": "f7cfc83610c75486bbb0457dde057eaed777f3d2", "committedDate": "2022-05-27 15:15:25 +0200", "message": "chore: ValidationErrorReporter does not need the bunlde DHIS2-12519 (#10878)"}, {"oid": "b0a861c0308005b865cafa2344c1231c0a4f2bc3", "committedDate": "2022-12-02 13:36:08 +0100", "message": "fix: turn removeOnError into skipOnError DHIS2-14213 (#12457)"}, {"oid": "142122b2e693a619ad851c42b7e188ae7f6bec11", "committedDate": "2022-12-05 15:08:42 +0100", "message": "refactor: clean ValidationErrorReporter DHIS2-14213 (#12473)"}, {"oid": "7ac68b368a1dbd9362973b30f7160399abe801a0", "committedDate": "2022-12-06 09:04:47 +0100", "message": "chore: move ValidationErrorReporter close to its usage (#12486)"}, {"oid": "2f607f53c7c920bab48832e9effb2de8696652a3", "committedDate": "2022-12-12 14:56:12 +0000", "message": "fix: invalidation of tracker tree DHIS2-14213 (#12495)"}, {"oid": "8bd34731a22250d0a8166442ecad89d00c926ccf", "committedDate": "2022-12-12 17:11:18 +0100", "message": "chore: Cleanup tracker reporter (#12501)"}, {"oid": "2675c1943874115831bcbe53d78b44557ceadd96", "committedDate": "2022-12-13 10:48:31 +0000", "message": "chore: add smaller Validator interface (#12524)"}, {"oid": "2db6b519d76e1d0b0390a9dc6f2f650824c543bb", "committedDate": "2022-12-13 13:10:13 +0100", "message": "chore: migrate enrollment validators (#12526)"}, {"oid": "33c7cfe3d47d3ad157e0cc1991ece017e9244bb5", "committedDate": "2022-12-13 13:59:20 +0000", "message": "chore: migrate event validators (#12527)"}, {"oid": "4fa45fc9727a8e61d9072d732fae235efec4b0b9", "committedDate": "2022-12-13 16:14:40 +0100", "message": "chore: split PreCheckSecurityOwnershipValidationHook per type DHIS2-14298 (#12529)"}, {"oid": "e4b9a5c802805b26fe8255711d1f98e662f15c6d", "committedDate": "2022-12-14 10:01:20 +0100", "message": "chore: Rename and clean up report model objects [TECH-14298] (#12525)"}, {"oid": "10cdef4bf3594ae654a3fe71d6abd00dad4e3996", "committedDate": "2022-12-14 14:52:09 +0100", "message": "chore: remove TrackerValidationHook DHIS-214298 (#12557)"}, {"oid": "17085ef1b029fa636afa4c26f2466fb3b95be1e2", "committedDate": "2022-12-15 09:50:15 +0100", "message": "chore: Decouple validation package from report package [DHIS2-14298] (#12558)"}, {"oid": "eeb7c03533bc68813461a4d2ac3cc265c417d79e", "committedDate": "2022-12-15 15:08:15 +0000", "message": "chore: Make validation package completely independent from report package [DHIS2-14298] (#12571)"}, {"oid": "5524fbc7cacce0c49d1c38d09396dcb72f97a03a", "committedDate": "2022-12-16 08:56:03 +0100", "message": "chore: remove prefix from ValidationErrorReporter (#12587)"}, {"oid": "62021e2bcf3815aae9c74a17313d3ac758b73f23", "committedDate": "2022-12-16 08:22:15 +0000", "message": "chore: remove prefix from ValidationFailFastException (#12588)"}, {"oid": "2d2c1a72fe29e5330e1b3f799f4ab915b5a5bbf0", "committedDate": "2022-12-16 08:41:19 +0000", "message": "chore: remove prefix from TrackerValidationService (#12589)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg0NTI2Mw==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446845263", "body": "Maybe extracting this logic to a private method with a meaningful name will help understanding what is happening here.\r\n\r\nVERY IMPORTANT: We must have a test for this that will fail if such an exception is thrown.\r\nThis validation is showing an error in the code, so such codebase should never be deployed", "bodyText": "Maybe extracting this logic to a private method with a meaningful name will help understanding what is happening here.\nVERY IMPORTANT: We must have a test for this that will fail if such an exception is thrown.\nThis validation is showing an error in the code, so such codebase should never be deployed", "bodyHTML": "<p dir=\"auto\">Maybe extracting this logic to a private method with a meaningful name will help understanding what is happening here.</p>\n<p dir=\"auto\">VERY IMPORTANT: We must have a test for this that will fail if such an exception is thrown.<br>\nThis validation is showing an error in the code, so such codebase should never be deployed</p>", "author": "enricocolasante", "createdAt": "2020-06-29T08:07:35Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/DefaultTrackerValidationService.java", "diffHunk": "@@ -28,53 +28,114 @@\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n-import java.util.ArrayList;\n-import java.util.List;\n-\n+import lombok.extern.slf4j.Slf4j;\n+import org.hisp.dhis.commons.timer.Timer;\n import org.hisp.dhis.tracker.ValidationMode;\n import org.hisp.dhis.tracker.bundle.TrackerBundle;\n+import org.hisp.dhis.tracker.report.TrackerErrorReport;\n+import org.hisp.dhis.tracker.report.TrackerValidationHookTimerReport;\n import org.hisp.dhis.tracker.report.TrackerValidationReport;\n+import org.hisp.dhis.user.User;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n \n-import lombok.extern.slf4j.Slf4j;\n+import java.util.ArrayList;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import static org.hisp.dhis.tracker.validation.TrackerImportValidationConfig.VALIDATION_ORDER;\n+import static org.hisp.dhis.tracker.validation.TrackerImportValidationConfig.VALIDATION_ORDER_MAP;\n \n /**\n  * @author Morten Olav Hansen <mortenoh@gmail.com>\n  */\n @Slf4j\n @Service\n-public class DefaultTrackerValidationService implements TrackerValidationService\n+public class DefaultTrackerValidationService\n+    implements TrackerValidationService\n {\n     private List<TrackerValidationHook> validationHooks = new ArrayList<>();\n \n     @Autowired( required = false )\n     public void setValidationHooks( List<TrackerValidationHook> validationHooks )\n     {\n         this.validationHooks = validationHooks;\n+\n+        if ( !VALIDATION_ORDER", "originalCommit": "12bd589850367af9ce124e78ea519bd7842cb3c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk5OTM3OQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446999379", "bodyText": "Agree this should be in a test!", "author": "netroms", "createdAt": "2020-06-29T14:07:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg0NTI2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "68c9d6c0ee6f2fd2462d63d9f3bef1a317f76ac6", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/DefaultTrackerValidationService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/DefaultTrackerValidationService.java\nindex e764243b2f..34b84bb6cf 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/DefaultTrackerValidationService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/DefaultTrackerValidationService.java\n", "chunk": "@@ -62,24 +62,7 @@ public class DefaultTrackerValidationService\n     {\n         this.validationHooks = validationHooks;\n \n-        if ( !VALIDATION_ORDER\n-            .containsAll(\n-                validationHooks.stream().map( TrackerValidationHook::getClass ).collect( Collectors.toList() ) ) )\n-        {\n-            String orderList = VALIDATION_ORDER.stream().map( Class::getName )\n-                .collect( Collectors.joining( \",\" ) );\n-\n-            String internList = validationHooks.stream().map( i -> i.getClass().getName() )\n-                .collect( Collectors.joining( \",\" ) );\n-\n-            throw new RuntimeException(\n-                String.format(\n-                    \"ValidationConfig.class is missing a validation hook in the validation order list, \" +\n-                        \"please add it to the list. Order list: %s, service list: %s\",\n-                    orderList, internList ) );\n-        }\n-\n-        this.validationHooks.sort( Comparator.comparingInt( o -> VALIDATION_ORDER_MAP.get( o.getClass() ) ) );\n+        TrackerImportValidationConfig.validateAndSortHooks(validationHooks);\n     }\n \n     @Override\n", "next_change": {"commit": "3999d1c8e8d7c2bcd11c7c5d99fec179abd25e2b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/DefaultTrackerValidationService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/DefaultTrackerValidationService.java\nindex 34b84bb6cf..865851a80a 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/DefaultTrackerValidationService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/DefaultTrackerValidationService.java\n", "chunk": "@@ -62,7 +57,7 @@ public class DefaultTrackerValidationService\n     {\n         this.validationHooks = validationHooks;\n \n-        TrackerImportValidationConfig.validateAndSortHooks(validationHooks);\n+        TrackerImportValidationConfig.validateAndSortHooks( validationHooks );\n     }\n \n     @Override\n", "next_change": {"commit": "971eecb46d414a2bf18f530223bef7a041abf919", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/DefaultTrackerValidationService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/DefaultTrackerValidationService.java\nindex 865851a80a..7d0d7450d5 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/DefaultTrackerValidationService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/DefaultTrackerValidationService.java\n", "chunk": "@@ -57,7 +57,7 @@ public class DefaultTrackerValidationService\n     {\n         this.validationHooks = validationHooks;\n \n-        TrackerImportValidationConfig.validateAndSortHooks( validationHooks );\n+        TrackerImportValidationConfig.sortHooks( validationHooks );\n     }\n \n     @Override\n", "next_change": {"commit": "898c87ce14bf1faf20e8f8ebf3a5bc12f27437f0", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/DefaultTrackerValidationService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/DefaultTrackerValidationService.java\nindex 7d0d7450d5..caabd4bb2a 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/DefaultTrackerValidationService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/DefaultTrackerValidationService.java\n", "chunk": "@@ -57,6 +57,7 @@ public class DefaultTrackerValidationService\n     {\n         this.validationHooks = validationHooks;\n \n+        // This sorts the hooks according to the VALIDATION_ORDER list in TrackerImportValidationConfig\n         TrackerImportValidationConfig.sortHooks( validationHooks );\n     }\n \n", "next_change": null}]}}]}}]}}]}, "revised_code_in_main": {"commit": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/DefaultTrackerValidationService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/DefaultTrackerValidationService.java\nindex e764243b2f..caabd4bb2a 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/DefaultTrackerValidationService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/DefaultTrackerValidationService.java\n", "chunk": "@@ -62,24 +57,8 @@ public class DefaultTrackerValidationService\n     {\n         this.validationHooks = validationHooks;\n \n-        if ( !VALIDATION_ORDER\n-            .containsAll(\n-                validationHooks.stream().map( TrackerValidationHook::getClass ).collect( Collectors.toList() ) ) )\n-        {\n-            String orderList = VALIDATION_ORDER.stream().map( Class::getName )\n-                .collect( Collectors.joining( \",\" ) );\n-\n-            String internList = validationHooks.stream().map( i -> i.getClass().getName() )\n-                .collect( Collectors.joining( \",\" ) );\n-\n-            throw new RuntimeException(\n-                String.format(\n-                    \"ValidationConfig.class is missing a validation hook in the validation order list, \" +\n-                        \"please add it to the list. Order list: %s, service list: %s\",\n-                    orderList, internList ) );\n-        }\n-\n-        this.validationHooks.sort( Comparator.comparingInt( o -> VALIDATION_ORDER_MAP.get( o.getClass() ) ) );\n+        // This sorts the hooks according to the VALIDATION_ORDER list in TrackerImportValidationConfig\n+        TrackerImportValidationConfig.sortHooks( validationHooks );\n     }\n \n     @Override\n", "next_change": {"commit": "3ab88a5f4623a8c749246bedef34fcb926d185cb", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/DefaultTrackerValidationService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/DefaultTrackerValidationService.java\nindex caabd4bb2a..266b7ce187 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/DefaultTrackerValidationService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/DefaultTrackerValidationService.java\n", "chunk": "@@ -52,17 +54,28 @@ public class DefaultTrackerValidationService\n {\n     private List<TrackerValidationHook> validationHooks = new ArrayList<>();\n \n+    private List<TrackerValidationHook> ruleEngineValidationHooks = new ArrayList<>();\n+\n     @Autowired( required = false )\n     public void setValidationHooks( List<TrackerValidationHook> validationHooks )\n     {\n-        this.validationHooks = validationHooks;\n-\n-        // This sorts the hooks according to the VALIDATION_ORDER list in TrackerImportValidationConfig\n-        TrackerImportValidationConfig.sortHooks( validationHooks );\n+        this.validationHooks = TrackerImportValidationConfig.sortValidationHooks( validationHooks );\n+        this.ruleEngineValidationHooks = TrackerImportValidationConfig.getRuleEngineValidationHooks( validationHooks );\n     }\n \n     @Override\n     public TrackerValidationReport validate( TrackerBundle bundle )\n+    {\n+        return validate( bundle, validationHooks );\n+    }\n+\n+    @Override\n+    public TrackerValidationReport validateRuleEngine( TrackerBundle bundle )\n+    {\n+        return validate( bundle, ruleEngineValidationHooks );\n+    }\n+\n+    private TrackerValidationReport validate( TrackerBundle bundle, List<TrackerValidationHook> hooks )\n     {\n         TrackerValidationReport validationReport = new TrackerValidationReport();\n \n", "next_change": {"commit": "2675c1943874115831bcbe53d78b44557ceadd96", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/DefaultTrackerValidationService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/DefaultTrackerValidationService.java\nindex 266b7ce187..34acd5a739 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/DefaultTrackerValidationService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/DefaultTrackerValidationService.java\n", "chunk": "@@ -27,55 +25,64 @@ package org.hisp.dhis.tracker.validation;\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n+package org.hisp.dhis.tracker.validation;\n+\n+import static org.hisp.dhis.tracker.validation.PersistablesFilter.filter;\n+\n+import java.util.List;\n \n+import lombok.RequiredArgsConstructor;\n import lombok.extern.slf4j.Slf4j;\n+\n import org.hisp.dhis.commons.timer.Timer;\n-import org.hisp.dhis.tracker.TrackerType;\n import org.hisp.dhis.tracker.ValidationMode;\n import org.hisp.dhis.tracker.bundle.TrackerBundle;\n-import org.hisp.dhis.tracker.report.TrackerValidationHookTimerReport;\n+import org.hisp.dhis.tracker.domain.Enrollment;\n+import org.hisp.dhis.tracker.domain.Event;\n+import org.hisp.dhis.tracker.domain.Relationship;\n+import org.hisp.dhis.tracker.domain.TrackedEntity;\n+import org.hisp.dhis.tracker.report.Timing;\n import org.hisp.dhis.tracker.report.TrackerValidationReport;\n-import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n import org.hisp.dhis.user.User;\n-import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n import org.springframework.stereotype.Service;\n \n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.stream.Collectors;\n-\n /**\n  * @author Morten Olav Hansen <mortenoh@gmail.com>\n  */\n @Slf4j\n @Service\n+@RequiredArgsConstructor\n public class DefaultTrackerValidationService\n     implements TrackerValidationService\n {\n-    private List<TrackerValidationHook> validationHooks = new ArrayList<>();\n \n-    private List<TrackerValidationHook> ruleEngineValidationHooks = new ArrayList<>();\n+    @Qualifier( \"validationHooks\" )\n+    private final List<TrackerValidationHook> validationHooks;\n \n-    @Autowired( required = false )\n-    public void setValidationHooks( List<TrackerValidationHook> validationHooks )\n-    {\n-        this.validationHooks = TrackerImportValidationConfig.sortValidationHooks( validationHooks );\n-        this.ruleEngineValidationHooks = TrackerImportValidationConfig.getRuleEngineValidationHooks( validationHooks );\n-    }\n+    @Qualifier( \"ruleEngineValidationHooks\" )\n+    private final List<TrackerValidationHook> ruleEngineValidationHooks;\n+\n+    @Qualifier( \"org.hisp.dhis.tracker.validation.DefaultValidators\" )\n+    private final Validators validators;\n+\n+    @Qualifier( \"org.hisp.dhis.tracker.validation.RuleEngineValidators\" )\n+    private final Validators ruleEngineValidators;\n \n     @Override\n     public TrackerValidationReport validate( TrackerBundle bundle )\n     {\n-        return validate( bundle, validationHooks );\n+        return validate( bundle, validationHooks, validators );\n     }\n \n     @Override\n     public TrackerValidationReport validateRuleEngine( TrackerBundle bundle )\n     {\n-        return validate( bundle, ruleEngineValidationHooks );\n+        return validate( bundle, ruleEngineValidationHooks, ruleEngineValidators );\n     }\n \n-    private TrackerValidationReport validate( TrackerBundle bundle, List<TrackerValidationHook> hooks )\n+    private TrackerValidationReport validate( TrackerBundle bundle, List<TrackerValidationHook> hooks,\n+        Validators validators )\n     {\n         TrackerValidationReport validationReport = new TrackerValidationReport();\n \n", "next_change": {"commit": "33c7cfe3d47d3ad157e0cc1991ece017e9244bb5", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/DefaultTrackerValidationService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/DefaultTrackerValidationService.java\nindex 34acd5a739..d7979c3ba8 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/DefaultTrackerValidationService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/DefaultTrackerValidationService.java\n", "chunk": "@@ -78,7 +76,7 @@ public class DefaultTrackerValidationService\n     @Override\n     public TrackerValidationReport validateRuleEngine( TrackerBundle bundle )\n     {\n-        return validate( bundle, ruleEngineValidationHooks, ruleEngineValidators );\n+        return validate( bundle, Collections.emptyList(), ruleEngineValidators );\n     }\n \n     private TrackerValidationReport validate( TrackerBundle bundle, List<TrackerValidationHook> hooks,\n", "next_change": {"commit": "e4b9a5c802805b26fe8255711d1f98e662f15c6d", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/DefaultTrackerValidationService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/DefaultTrackerValidationService.java\nindex d7979c3ba8..4de2b20dca 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/DefaultTrackerValidationService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/DefaultTrackerValidationService.java\n", "chunk": "@@ -68,21 +68,21 @@ public class DefaultTrackerValidationService\n     private final Validators ruleEngineValidators;\n \n     @Override\n-    public TrackerValidationReport validate( TrackerBundle bundle )\n+    public ValidationReport validate( TrackerBundle bundle )\n     {\n         return validate( bundle, validationHooks, validators );\n     }\n \n     @Override\n-    public TrackerValidationReport validateRuleEngine( TrackerBundle bundle )\n+    public ValidationReport validateRuleEngine( TrackerBundle bundle )\n     {\n         return validate( bundle, Collections.emptyList(), ruleEngineValidators );\n     }\n \n-    private TrackerValidationReport validate( TrackerBundle bundle, List<TrackerValidationHook> hooks,\n+    private ValidationReport validate( TrackerBundle bundle, List<TrackerValidationHook> hooks,\n         Validators validators )\n     {\n-        TrackerValidationReport validationReport = new TrackerValidationReport();\n+        ValidationReport validationReport = new ValidationReport();\n \n         User user = bundle.getUser();\n \n", "next_change": {"commit": "10cdef4bf3594ae654a3fe71d6abd00dad4e3996", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/DefaultTrackerValidationService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/DefaultTrackerValidationService.java\nindex 4de2b20dca..9adf71e51f 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/DefaultTrackerValidationService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/DefaultTrackerValidationService.java\n", "chunk": "@@ -70,17 +66,16 @@ public class DefaultTrackerValidationService\n     @Override\n     public ValidationReport validate( TrackerBundle bundle )\n     {\n-        return validate( bundle, validationHooks, validators );\n+        return validate( bundle, validators );\n     }\n \n     @Override\n     public ValidationReport validateRuleEngine( TrackerBundle bundle )\n     {\n-        return validate( bundle, Collections.emptyList(), ruleEngineValidators );\n+        return validate( bundle, ruleEngineValidators );\n     }\n \n-    private ValidationReport validate( TrackerBundle bundle, List<TrackerValidationHook> hooks,\n-        Validators validators )\n+    private ValidationReport validate( TrackerBundle bundle, Validators validators )\n     {\n         ValidationReport validationReport = new ValidationReport();\n \n", "next_change": {"commit": "17085ef1b029fa636afa4c26f2466fb3b95be1e2", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/DefaultTrackerValidationService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/DefaultTrackerValidationService.java\nindex 9adf71e51f..9ae51cf4b5 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/DefaultTrackerValidationService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/DefaultTrackerValidationService.java\n", "chunk": "@@ -64,20 +63,20 @@ public class DefaultTrackerValidationService\n     private final Validators ruleEngineValidators;\n \n     @Override\n-    public ValidationReport validate( TrackerBundle bundle )\n+    public ValidationResult validate( TrackerBundle bundle )\n     {\n         return validate( bundle, validators );\n     }\n \n     @Override\n-    public ValidationReport validateRuleEngine( TrackerBundle bundle )\n+    public ValidationResult validateRuleEngine( TrackerBundle bundle )\n     {\n         return validate( bundle, ruleEngineValidators );\n     }\n \n-    private ValidationReport validate( TrackerBundle bundle, Validators validators )\n+    private ValidationResult validate( TrackerBundle bundle, Validators validators )\n     {\n-        ValidationReport validationReport = new ValidationReport();\n+        ValidationResult validationResult = new ValidationResult();\n \n         User user = bundle.getUser();\n \n", "next_change": null}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "message": "Merge commit", "committedDate": null}, {"oid": "399526882c2fbbf5600922b3c3b6030420cf4e96", "committedDate": "2020-07-13 12:23:07 +0200", "message": "feat: Run rule engine rules in new importer [DHIS2-7310]"}, {"oid": "8aaeab2ee4dd7a9ffa927147931dff8609ef787a", "committedDate": "2020-09-23 15:33:34 +0200", "message": "chore: Remove unused imports (#6219)"}, {"oid": "0bf55d776481f6511e5f9ebca5de1f2cf79777c0", "committedDate": "2020-11-19 13:55:46 +0100", "message": "refactor: New Tracker Error reporting refactor (#6706)"}, {"oid": "3ab88a5f4623a8c749246bedef34fcb926d185cb", "committedDate": "2020-12-08 10:40:14 +0100", "message": "fix: [DHIS2-7310] Move rule engine call and validations after bundle validation (#6843)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "c25b817a180f24b3de6b26d5a089563aa336aa8c", "committedDate": "2021-03-05 10:44:25 +0100", "message": "feat: Validation for values with option sets [DHIS2-10452] (#7512)"}, {"oid": "fe04922e144ac69367a99840d5518edda2d67f38", "committedDate": "2021-06-03 08:17:10 +0200", "message": "fix: Make program field read-only in event payload [DHIS2-11225] (#8086)"}, {"oid": "242e8d7cc2a94f328778c2fbad9005509c5b3360", "committedDate": "2021-12-21 13:35:53 +0100", "message": "chore: simplify tracker import validation TECH-880 (#9510)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "97fa18701761c6993e20f2e7a3816ea689129480", "committedDate": "2022-01-11 15:31:02 +0100", "message": "chore: hooks should add errors via reporter directly TECH-880 (#9523)"}, {"oid": "1c6c72cc7c172b2a5708fb662e588b797d525a55", "committedDate": "2022-01-11 15:55:54 +0100", "message": "chore: bring TrackerValidationReport closer to ValidationErrorReporter TECH-880 (#9595)"}, {"oid": "7c0131dfcfbf72dad27dc5f0a3f6a776e286c79a", "committedDate": "2022-01-11 17:47:56 +0100", "message": "chore: make TrackerValidationReport add methods fluent and name Timing TECH-880 (#9601)"}, {"oid": "1d8350a9e9ac100aaaa831894ba3f857b46e2474", "committedDate": "2022-01-13 14:15:17 +0100", "message": "chore: adding errors and warnings is responsibility of the ValidationErrorReporter TECH-880 (#9616)"}, {"oid": "ef0cbd365e47f1f88befb80d9650cce75280bd35", "committedDate": "2022-03-08 15:12:00 +0100", "message": "chore: move DB access and mutation to preheat and preprocessor DHIS2-12623 (#9904)"}, {"oid": "f7cfc83610c75486bbb0457dde057eaed777f3d2", "committedDate": "2022-05-27 15:15:25 +0200", "message": "chore: ValidationErrorReporter does not need the bunlde DHIS2-12519 (#10878)"}, {"oid": "b0a861c0308005b865cafa2344c1231c0a4f2bc3", "committedDate": "2022-12-02 13:36:08 +0100", "message": "fix: turn removeOnError into skipOnError DHIS2-14213 (#12457)"}, {"oid": "142122b2e693a619ad851c42b7e188ae7f6bec11", "committedDate": "2022-12-05 15:08:42 +0100", "message": "refactor: clean ValidationErrorReporter DHIS2-14213 (#12473)"}, {"oid": "7ac68b368a1dbd9362973b30f7160399abe801a0", "committedDate": "2022-12-06 09:04:47 +0100", "message": "chore: move ValidationErrorReporter close to its usage (#12486)"}, {"oid": "2f607f53c7c920bab48832e9effb2de8696652a3", "committedDate": "2022-12-12 14:56:12 +0000", "message": "fix: invalidation of tracker tree DHIS2-14213 (#12495)"}, {"oid": "8bd34731a22250d0a8166442ecad89d00c926ccf", "committedDate": "2022-12-12 17:11:18 +0100", "message": "chore: Cleanup tracker reporter (#12501)"}, {"oid": "2675c1943874115831bcbe53d78b44557ceadd96", "committedDate": "2022-12-13 10:48:31 +0000", "message": "chore: add smaller Validator interface (#12524)"}, {"oid": "2db6b519d76e1d0b0390a9dc6f2f650824c543bb", "committedDate": "2022-12-13 13:10:13 +0100", "message": "chore: migrate enrollment validators (#12526)"}, {"oid": "33c7cfe3d47d3ad157e0cc1991ece017e9244bb5", "committedDate": "2022-12-13 13:59:20 +0000", "message": "chore: migrate event validators (#12527)"}, {"oid": "4fa45fc9727a8e61d9072d732fae235efec4b0b9", "committedDate": "2022-12-13 16:14:40 +0100", "message": "chore: split PreCheckSecurityOwnershipValidationHook per type DHIS2-14298 (#12529)"}, {"oid": "e4b9a5c802805b26fe8255711d1f98e662f15c6d", "committedDate": "2022-12-14 10:01:20 +0100", "message": "chore: Rename and clean up report model objects [TECH-14298] (#12525)"}, {"oid": "10cdef4bf3594ae654a3fe71d6abd00dad4e3996", "committedDate": "2022-12-14 14:52:09 +0100", "message": "chore: remove TrackerValidationHook DHIS-214298 (#12557)"}, {"oid": "17085ef1b029fa636afa4c26f2466fb3b95be1e2", "committedDate": "2022-12-15 09:50:15 +0100", "message": "chore: Decouple validation package from report package [DHIS2-14298] (#12558)"}, {"oid": "eeb7c03533bc68813461a4d2ac3cc265c417d79e", "committedDate": "2022-12-15 15:08:15 +0000", "message": "chore: Make validation package completely independent from report package [DHIS2-14298] (#12571)"}, {"oid": "5524fbc7cacce0c49d1c38d09396dcb72f97a03a", "committedDate": "2022-12-16 08:56:03 +0100", "message": "chore: remove prefix from ValidationErrorReporter (#12587)"}, {"oid": "62021e2bcf3815aae9c74a17313d3ac758b73f23", "committedDate": "2022-12-16 08:22:15 +0000", "message": "chore: remove prefix from ValidationFailFastException (#12588)"}, {"oid": "2d2c1a72fe29e5330e1b3f799f4ab915b5a5bbf0", "committedDate": "2022-12-16 08:41:19 +0000", "message": "chore: remove prefix from TrackerValidationService (#12589)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg0NzAxMw==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446847013", "body": "I am not sure if I understand the meaning of this private method", "bodyText": "I am not sure if I understand the meaning of this private method", "bodyHTML": "<p dir=\"auto\">I am not sure if I understand the meaning of this private method</p>", "author": "enricocolasante", "createdAt": "2020-06-29T08:10:46Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/TrackedEntityTrackerConverterService.java", "diffHunk": "@@ -75,6 +76,11 @@ public TrackedEntity to( org.hisp.dhis.trackedentity.TrackedEntityInstance track\n     @Override\n     @Transactional( readOnly = true )\n     public List<TrackedEntity> to( List<org.hisp.dhis.trackedentity.TrackedEntityInstance> trackedEntityInstances )\n+    {\n+        return _to( trackedEntityInstances );\n+    }\n+\n+    private List<TrackedEntity> _to( List<org.hisp.dhis.trackedentity.TrackedEntityInstance> trackedEntityInstances )", "originalCommit": "12bd589850367af9ce124e78ea519bd7842cb3c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg4NDMzNg==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446884336", "bodyText": "This is was done due to en error from SonarCube:\n\nFix SonarCloud : RSPEC-2229 : Bug Explained well in this: https://stackoverflow.com/questions/54567006/calling-transactional-method-from-non-transactional-method-in-spring-4-3  https://rules.sonarsource.com/java/RSPEC-2229 Signed-off-by: Morten Svanaes msvanaes@dhis2.org\n\nBasically you cant call a method in the same class with @transaction from another public non transaction method.\nThe \"entry\" method to the class must be the one @transaction, so this is to work around the polymorphism issue here.", "author": "netroms", "createdAt": "2020-06-29T10:12:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg0NzAxMw=="}], "type": "inlineReview", "revised_code": {"commit": "c9dbe7965959518882dbad8401946ed9a65ab742", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/TrackedEntityTrackerConverterService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/TrackedEntityTrackerConverterService.java\nindex ecc8d60cb3..620a50a2e6 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/TrackedEntityTrackerConverterService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/TrackedEntityTrackerConverterService.java\n", "chunk": "@@ -74,7 +72,6 @@ public class TrackedEntityTrackerConverterService\n     }\n \n     @Override\n-    @Transactional( readOnly = true )\n     public List<TrackedEntity> to( List<org.hisp.dhis.trackedentity.TrackedEntityInstance> trackedEntityInstances )\n     {\n         return _to( trackedEntityInstances );\n", "next_change": {"commit": "898c87ce14bf1faf20e8f8ebf3a5bc12f27437f0", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/TrackedEntityTrackerConverterService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/TrackedEntityTrackerConverterService.java\nindex 620a50a2e6..9f015ec472 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/TrackedEntityTrackerConverterService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/TrackedEntityTrackerConverterService.java\n", "chunk": "@@ -73,11 +73,6 @@ public class TrackedEntityTrackerConverterService\n \n     @Override\n     public List<TrackedEntity> to( List<org.hisp.dhis.trackedentity.TrackedEntityInstance> trackedEntityInstances )\n-    {\n-        return _to( trackedEntityInstances );\n-    }\n-\n-    private List<TrackedEntity> _to( List<org.hisp.dhis.trackedentity.TrackedEntityInstance> trackedEntityInstances )\n     {\n         return trackedEntityInstances.stream().map( tei -> {\n             TrackedEntity trackedEntity = new TrackedEntity();\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/TrackedEntityTrackerConverterService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/TrackedEntityTrackerConverterService.java\nindex ecc8d60cb3..9f015ec472 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/TrackedEntityTrackerConverterService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/TrackedEntityTrackerConverterService.java\n", "chunk": "@@ -74,13 +72,7 @@ public class TrackedEntityTrackerConverterService\n     }\n \n     @Override\n-    @Transactional( readOnly = true )\n     public List<TrackedEntity> to( List<org.hisp.dhis.trackedentity.TrackedEntityInstance> trackedEntityInstances )\n-    {\n-        return _to( trackedEntityInstances );\n-    }\n-\n-    private List<TrackedEntity> _to( List<org.hisp.dhis.trackedentity.TrackedEntityInstance> trackedEntityInstances )\n     {\n         return trackedEntityInstances.stream().map( tei -> {\n             TrackedEntity trackedEntity = new TrackedEntity();\n", "next_change": {"commit": "399526882c2fbbf5600922b3c3b6030420cf4e96", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/TrackedEntityTrackerConverterService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/TrackedEntityTrackerConverterService.java\nindex 9f015ec472..a659f8f43f 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/TrackedEntityTrackerConverterService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/TrackedEntityTrackerConverterService.java\n", "chunk": "@@ -72,6 +72,7 @@ public class TrackedEntityTrackerConverterService\n     }\n \n     @Override\n+    @Transactional( readOnly = true )\n     public List<TrackedEntity> to( List<org.hisp.dhis.trackedentity.TrackedEntityInstance> trackedEntityInstances )\n     {\n         return trackedEntityInstances.stream().map( tei -> {\n", "next_change": {"commit": "c70f79c6febd4b98e98c6f0c572d1099207d86b3", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/TrackedEntityTrackerConverterService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/TrackedEntityTrackerConverterService.java\nindex a659f8f43f..06c4c658a9 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/TrackedEntityTrackerConverterService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/TrackedEntityTrackerConverterService.java\n", "chunk": "@@ -72,7 +67,6 @@ public class TrackedEntityTrackerConverterService\n     }\n \n     @Override\n-    @Transactional( readOnly = true )\n     public List<TrackedEntity> to( List<org.hisp.dhis.trackedentity.TrackedEntityInstance> trackedEntityInstances )\n     {\n         return trackedEntityInstances.stream().map( tei -> {\n", "next_change": {"commit": "cb2ee65c0210c0d4b2bd8851789da8d4adfaf04d", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/TrackedEntityTrackerConverterService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/TrackedEntityTrackerConverterService.java\nindex 06c4c658a9..0417a6c32f 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/TrackedEntityTrackerConverterService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/TrackedEntityTrackerConverterService.java\n", "chunk": "@@ -67,7 +64,7 @@ public class TrackedEntityTrackerConverterService\n     }\n \n     @Override\n-    public List<TrackedEntity> to( List<org.hisp.dhis.trackedentity.TrackedEntityInstance> trackedEntityInstances )\n+    public List<TrackedEntity> to( List<TrackedEntityInstance> trackedEntityInstances )\n     {\n         return trackedEntityInstances.stream().map( tei -> {\n             TrackedEntity trackedEntity = new TrackedEntity();\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "message": "Merge commit", "committedDate": null}, {"oid": "399526882c2fbbf5600922b3c3b6030420cf4e96", "committedDate": "2020-07-13 12:23:07 +0200", "message": "feat: Run rule engine rules in new importer [DHIS2-7310]"}, {"oid": "800749896c5e2437d4c5c394663dca9a9454d9e2", "committedDate": "2020-08-11 10:29:37 +0200", "message": "Fix sonar issues"}, {"oid": "c70f79c6febd4b98e98c6f0c572d1099207d86b3", "committedDate": "2020-08-12 16:29:26 +0200", "message": "Code review fixes"}, {"oid": "cb2ee65c0210c0d4b2bd8851789da8d4adfaf04d", "committedDate": "2020-09-07 10:28:21 +0200", "message": "fix: [DHIS2-9287] Fix the stats in the import summary (#6062)"}, {"oid": "3e799d196b8f73ad216ea100a07ddd5f7dfc53e0", "committedDate": "2020-11-30 16:37:14 +0100", "message": "fix: remove long running transaction during Tracker Import (#6782)"}, {"oid": "699074cbe82db1a8e0a5e72edf2a981f3628b54b", "committedDate": "2020-12-07 10:47:48 +0100", "message": "fix: Tracker Identifiers resolution during Tracker import (#6824)"}, {"oid": "7098e9412b922ed70f8136f30c7d790e27bb43be", "committedDate": "2020-12-10 10:43:44 +0100", "message": "chore: Remove unused imports (#6875)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "4a4beb6ff3b7ca77da4a4eea381b5a0d78a8a324", "committedDate": "2021-02-01 18:12:32 +0100", "message": "fix: [DHIS2-10208] client dates are not persisted correctly in tei,enrollment,events (2.36) (#7236)"}, {"oid": "5a236b7964bc1e38c927c9a390e6672756e997ce", "committedDate": "2021-04-19 14:49:15 +0200", "message": "feature: Review fields in domain objects and create updatable fields validator [DHIS2-10875] (#7842)"}, {"oid": "c1826a5d13bd4a80a9ff1ed14646dbb8f32b4cfb", "committedDate": "2021-04-28 09:05:12 +0200", "message": "feat: Add createdBy and updatedBy to tracker objects in new tracker importer [hDHIS2-10885] (#7923)"}, {"oid": "a4643bd1fe923092627bdd884e05e5dacc7a5911", "committedDate": "2021-04-30 14:46:25 +0200", "message": "refactor: Refactor rule engine service in the new importer to group events and enrollments in one call (#7925)"}, {"oid": "822d07bb467e9b52c9c876beda78da98a4bbf89f", "committedDate": "2021-08-17 17:26:09 +0200", "message": "fix: expose new flag in old tracker endpoints and remove custom endpoint (#8462)"}, {"oid": "ef578d6b93d10ebc9accce47f96c955a0ba14140", "committedDate": "2021-10-07 07:14:04 +0200", "message": "fix: Add tracked entity attribute value history(#8840)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "0303652efe35da369ba1d2a437a4b5797a52c451", "committedDate": "2022-04-01 09:37:58 +0200", "message": "chore: tracker entities only support idScheme UID DHIS2-12563 (#10329)"}, {"oid": "df4eaf29ba29ee71a727a1c072fd4bcb03bb4bc9", "committedDate": "2022-05-19 15:13:36 +0200", "message": "chore: docs, improve APIs DHIS2-12563 (#10847)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg0NzEwMg==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446847102", "body": "Some as above", "bodyText": "Some as above", "bodyHTML": "<p dir=\"auto\">Some as above</p>", "author": "enricocolasante", "createdAt": "2020-06-29T08:10:57Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/TrackedEntityTrackerConverterService.java", "diffHunk": "@@ -120,14 +132,22 @@ public TrackedEntity to( org.hisp.dhis.trackedentity.TrackedEntityInstance track\n     @Transactional( readOnly = true )\n     public List<org.hisp.dhis.trackedentity.TrackedEntityInstance> from( TrackerPreheat preheat,\n         List<TrackedEntity> trackedEntityInstances )\n+    {\n+        return _from( preheat, trackedEntityInstances );\n+    }\n+\n+    private List<org.hisp.dhis.trackedentity.TrackedEntityInstance> _from( TrackerPreheat preheat,", "originalCommit": "12bd589850367af9ce124e78ea519bd7842cb3c5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "68c9d6c0ee6f2fd2462d63d9f3bef1a317f76ac6", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/TrackedEntityTrackerConverterService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/TrackedEntityTrackerConverterService.java\nindex ecc8d60cb3..35498c2e65 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/TrackedEntityTrackerConverterService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/TrackedEntityTrackerConverterService.java\n", "chunk": "@@ -128,15 +128,7 @@ public class TrackedEntityTrackerConverterService\n         return from( preheat( trackedEntityInstances ), trackedEntityInstances );\n     }\n \n-    @Override\n-    @Transactional( readOnly = true )\n-    public List<org.hisp.dhis.trackedentity.TrackedEntityInstance> from( TrackerPreheat preheat,\n-        List<TrackedEntity> trackedEntityInstances )\n-    {\n-        return _from( preheat, trackedEntityInstances );\n-    }\n-\n-    private List<org.hisp.dhis.trackedentity.TrackedEntityInstance> _from( TrackerPreheat preheat,\n+    private List<org.hisp.dhis.trackedentity.TrackedEntityInstance> from( TrackerPreheat preheat,\n         List<TrackedEntity> trackedEntityInstances )\n     {\n         List<org.hisp.dhis.trackedentity.TrackedEntityInstance> trackedEntities = new ArrayList<>();\n", "next_change": null}]}, "revised_code_in_main": {"commit": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/TrackedEntityTrackerConverterService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/TrackedEntityTrackerConverterService.java\nindex ecc8d60cb3..9f015ec472 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/TrackedEntityTrackerConverterService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/TrackedEntityTrackerConverterService.java\n", "chunk": "@@ -122,21 +112,12 @@ public class TrackedEntityTrackerConverterService\n     }\n \n     @Override\n-    @Transactional( readOnly = true )\n     public List<org.hisp.dhis.trackedentity.TrackedEntityInstance> from( List<TrackedEntity> trackedEntityInstances )\n     {\n         return from( preheat( trackedEntityInstances ), trackedEntityInstances );\n     }\n \n-    @Override\n-    @Transactional( readOnly = true )\n-    public List<org.hisp.dhis.trackedentity.TrackedEntityInstance> from( TrackerPreheat preheat,\n-        List<TrackedEntity> trackedEntityInstances )\n-    {\n-        return _from( preheat, trackedEntityInstances );\n-    }\n-\n-    private List<org.hisp.dhis.trackedentity.TrackedEntityInstance> _from( TrackerPreheat preheat,\n+    private List<org.hisp.dhis.trackedentity.TrackedEntityInstance> from( TrackerPreheat preheat,\n         List<TrackedEntity> trackedEntityInstances )\n     {\n         List<org.hisp.dhis.trackedentity.TrackedEntityInstance> trackedEntities = new ArrayList<>();\n", "next_change": {"commit": "399526882c2fbbf5600922b3c3b6030420cf4e96", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/TrackedEntityTrackerConverterService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/TrackedEntityTrackerConverterService.java\nindex 9f015ec472..a659f8f43f 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/TrackedEntityTrackerConverterService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/TrackedEntityTrackerConverterService.java\n", "chunk": "@@ -112,12 +100,8 @@ public class TrackedEntityTrackerConverterService\n     }\n \n     @Override\n-    public List<org.hisp.dhis.trackedentity.TrackedEntityInstance> from( List<TrackedEntity> trackedEntityInstances )\n-    {\n-        return from( preheat( trackedEntityInstances ), trackedEntityInstances );\n-    }\n-\n-    private List<org.hisp.dhis.trackedentity.TrackedEntityInstance> from( TrackerPreheat preheat,\n+    @Transactional( readOnly = true )\n+    public List<org.hisp.dhis.trackedentity.TrackedEntityInstance> from( TrackerPreheat preheat,\n         List<TrackedEntity> trackedEntityInstances )\n     {\n         List<org.hisp.dhis.trackedentity.TrackedEntityInstance> trackedEntities = new ArrayList<>();\n", "next_change": {"commit": "c70f79c6febd4b98e98c6f0c572d1099207d86b3", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/TrackedEntityTrackerConverterService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/TrackedEntityTrackerConverterService.java\nindex a659f8f43f..06c4c658a9 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/TrackedEntityTrackerConverterService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/TrackedEntityTrackerConverterService.java\n", "chunk": "@@ -100,7 +93,6 @@ public class TrackedEntityTrackerConverterService\n     }\n \n     @Override\n-    @Transactional( readOnly = true )\n     public List<org.hisp.dhis.trackedentity.TrackedEntityInstance> from( TrackerPreheat preheat,\n         List<TrackedEntity> trackedEntityInstances )\n     {\n", "next_change": {"commit": "cb2ee65c0210c0d4b2bd8851789da8d4adfaf04d", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/TrackedEntityTrackerConverterService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/TrackedEntityTrackerConverterService.java\nindex 06c4c658a9..0417a6c32f 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/TrackedEntityTrackerConverterService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/TrackedEntityTrackerConverterService.java\n", "chunk": "@@ -78,61 +75,61 @@ public class TrackedEntityTrackerConverterService\n     }\n \n     @Override\n-    public org.hisp.dhis.trackedentity.TrackedEntityInstance from( TrackerPreheat preheat,\n-        TrackedEntity trackedEntityInstance )\n+    public TrackedEntityInstance from( TrackerPreheat preheat,\n+        TrackedEntity trackedEntity )\n     {\n-        List<org.hisp.dhis.trackedentity.TrackedEntityInstance> trackedEntityInstances = from( preheat,\n-            Collections.singletonList( trackedEntityInstance ) );\n-\n-        if ( trackedEntityInstances.isEmpty() )\n-        {\n-            return null;\n-        }\n-\n-        return trackedEntityInstances.get( 0 );\n+        TrackedEntityInstance tei = preheat.getTrackedEntity( TrackerIdScheme.UID,\n+            trackedEntity.getTrackedEntity() );\n+        return from( preheat, trackedEntity, tei );\n     }\n \n     @Override\n-    public List<org.hisp.dhis.trackedentity.TrackedEntityInstance> from( TrackerPreheat preheat,\n+    public List<TrackedEntityInstance> from( TrackerPreheat preheat,\n         List<TrackedEntity> trackedEntityInstances )\n     {\n-        List<org.hisp.dhis.trackedentity.TrackedEntityInstance> trackedEntities = new ArrayList<>();\n-\n-        trackedEntityInstances.forEach( te -> {\n-            org.hisp.dhis.trackedentity.TrackedEntityInstance trackedEntity = preheat.getTrackedEntity(\n-                TrackerIdScheme.UID, te.getTrackedEntity() );\n-            OrganisationUnit organisationUnit = preheat\n-                .get( TrackerIdScheme.UID, OrganisationUnit.class, te.getOrgUnit() );\n-            TrackedEntityType trackedEntityType = preheat\n-                .get( TrackerIdScheme.UID, TrackedEntityType.class, te.getTrackedEntityType() );\n-\n-            if ( trackedEntity == null )\n-            {\n-                Date now = new Date();\n-\n-                trackedEntity = new org.hisp.dhis.trackedentity.TrackedEntityInstance();\n-                trackedEntity.setUid( te.getTrackedEntity() );\n-                trackedEntity.setCreated( now );\n-                trackedEntity.setCreatedAtClient( now );\n-                trackedEntity.setLastUpdated( now );\n-                trackedEntity.setLastUpdatedAtClient( now );\n-                trackedEntity.setStoredBy( te.getStoredBy() );\n-            }\n-\n-            if ( !CodeGenerator.isValidUid( trackedEntity.getUid() ) )\n-            {\n-                trackedEntity.setUid( CodeGenerator.generateUid() );\n-            }\n-\n-            trackedEntity.setOrganisationUnit( organisationUnit );\n-            trackedEntity.setTrackedEntityType( trackedEntityType );\n-            trackedEntity.setInactive( te.isInactive() );\n-            trackedEntity.setDeleted( te.isDeleted() );\n-            trackedEntity.setGeometry( te.getGeometry() );\n-\n-            trackedEntities.add( trackedEntity );\n-        } );\n-\n-        return trackedEntities;\n+        return trackedEntityInstances\n+            .stream()\n+            .map( te -> from( preheat, te ) )\n+            .collect( Collectors.toList() );\n+    }\n+\n+    @Override\n+    public TrackedEntityInstance fromForRuleEngine( TrackerPreheat preheat, TrackedEntity object )\n+    {\n+        return null;\n+    }\n+\n+    private TrackedEntityInstance from( TrackerPreheat preheat, TrackedEntity te, TrackedEntityInstance tei )\n+    {\n+        OrganisationUnit organisationUnit = preheat.get( TrackerIdScheme.UID, OrganisationUnit.class,\n+            te.getOrgUnit() );\n+        TrackedEntityType trackedEntityType = preheat.get( TrackerIdScheme.UID, TrackedEntityType.class,\n+            te.getTrackedEntityType() );\n+\n+        if ( tei == null )\n+        {\n+            Date now = new Date();\n+\n+            tei = new TrackedEntityInstance();\n+            tei.setUid( te.getTrackedEntity() );\n+            tei.setCreated( now );\n+            tei.setCreatedAtClient( now );\n+            tei.setLastUpdated( now );\n+            tei.setLastUpdatedAtClient( now );\n+            tei.setStoredBy( te.getStoredBy() );\n+        }\n+\n+        if ( !CodeGenerator.isValidUid( tei.getUid() ) )\n+        {\n+            tei.setUid( CodeGenerator.generateUid() );\n+        }\n+\n+        tei.setOrganisationUnit( organisationUnit );\n+        tei.setTrackedEntityType( trackedEntityType );\n+        tei.setInactive( te.isInactive() );\n+        tei.setDeleted( te.isDeleted() );\n+        tei.setGeometry( te.getGeometry() );\n+\n+        return tei;\n     }\n }\n\\ No newline at end of file\n", "next_change": {"commit": "5a236b7964bc1e38c927c9a390e6672756e997ce", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/TrackedEntityTrackerConverterService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/TrackedEntityTrackerConverterService.java\nindex 0417a6c32f..d4686c9b7c 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/TrackedEntityTrackerConverterService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/TrackedEntityTrackerConverterService.java\n", "chunk": "@@ -101,33 +100,28 @@ public class TrackedEntityTrackerConverterService\n \n     private TrackedEntityInstance from( TrackerPreheat preheat, TrackedEntity te, TrackedEntityInstance tei )\n     {\n-        OrganisationUnit organisationUnit = preheat.get( TrackerIdScheme.UID, OrganisationUnit.class,\n+        OrganisationUnit organisationUnit = preheat.get( OrganisationUnit.class,\n             te.getOrgUnit() );\n-        TrackedEntityType trackedEntityType = preheat.get( TrackerIdScheme.UID, TrackedEntityType.class,\n+        TrackedEntityType trackedEntityType = preheat.get( TrackedEntityType.class,\n             te.getTrackedEntityType() );\n \n-        if ( tei == null )\n-        {\n-            Date now = new Date();\n+        Date now = new Date();\n \n+        if ( isNewEntity( tei ) )\n+        {\n             tei = new TrackedEntityInstance();\n             tei.setUid( te.getTrackedEntity() );\n             tei.setCreated( now );\n-            tei.setCreatedAtClient( now );\n-            tei.setLastUpdated( now );\n-            tei.setLastUpdatedAtClient( now );\n-            tei.setStoredBy( te.getStoredBy() );\n-        }\n-\n-        if ( !CodeGenerator.isValidUid( tei.getUid() ) )\n-        {\n-            tei.setUid( CodeGenerator.generateUid() );\n         }\n \n+        tei.setStoredBy( te.getStoredBy() );\n+        tei.setLastUpdated( now );\n+        tei.setDeleted( false );\n+        tei.setCreatedAtClient( DateUtils.fromInstant( te.getCreatedAtClient() ) );\n+        tei.setLastUpdatedAtClient( DateUtils.fromInstant( te.getUpdatedAtClient() ) );\n         tei.setOrganisationUnit( organisationUnit );\n         tei.setTrackedEntityType( trackedEntityType );\n         tei.setInactive( te.isInactive() );\n-        tei.setDeleted( te.isDeleted() );\n         tei.setGeometry( te.getGeometry() );\n \n         return tei;\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "message": "Merge commit", "committedDate": null}, {"oid": "399526882c2fbbf5600922b3c3b6030420cf4e96", "committedDate": "2020-07-13 12:23:07 +0200", "message": "feat: Run rule engine rules in new importer [DHIS2-7310]"}, {"oid": "800749896c5e2437d4c5c394663dca9a9454d9e2", "committedDate": "2020-08-11 10:29:37 +0200", "message": "Fix sonar issues"}, {"oid": "c70f79c6febd4b98e98c6f0c572d1099207d86b3", "committedDate": "2020-08-12 16:29:26 +0200", "message": "Code review fixes"}, {"oid": "cb2ee65c0210c0d4b2bd8851789da8d4adfaf04d", "committedDate": "2020-09-07 10:28:21 +0200", "message": "fix: [DHIS2-9287] Fix the stats in the import summary (#6062)"}, {"oid": "3e799d196b8f73ad216ea100a07ddd5f7dfc53e0", "committedDate": "2020-11-30 16:37:14 +0100", "message": "fix: remove long running transaction during Tracker Import (#6782)"}, {"oid": "699074cbe82db1a8e0a5e72edf2a981f3628b54b", "committedDate": "2020-12-07 10:47:48 +0100", "message": "fix: Tracker Identifiers resolution during Tracker import (#6824)"}, {"oid": "7098e9412b922ed70f8136f30c7d790e27bb43be", "committedDate": "2020-12-10 10:43:44 +0100", "message": "chore: Remove unused imports (#6875)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "4a4beb6ff3b7ca77da4a4eea381b5a0d78a8a324", "committedDate": "2021-02-01 18:12:32 +0100", "message": "fix: [DHIS2-10208] client dates are not persisted correctly in tei,enrollment,events (2.36) (#7236)"}, {"oid": "5a236b7964bc1e38c927c9a390e6672756e997ce", "committedDate": "2021-04-19 14:49:15 +0200", "message": "feature: Review fields in domain objects and create updatable fields validator [DHIS2-10875] (#7842)"}, {"oid": "c1826a5d13bd4a80a9ff1ed14646dbb8f32b4cfb", "committedDate": "2021-04-28 09:05:12 +0200", "message": "feat: Add createdBy and updatedBy to tracker objects in new tracker importer [hDHIS2-10885] (#7923)"}, {"oid": "a4643bd1fe923092627bdd884e05e5dacc7a5911", "committedDate": "2021-04-30 14:46:25 +0200", "message": "refactor: Refactor rule engine service in the new importer to group events and enrollments in one call (#7925)"}, {"oid": "822d07bb467e9b52c9c876beda78da98a4bbf89f", "committedDate": "2021-08-17 17:26:09 +0200", "message": "fix: expose new flag in old tracker endpoints and remove custom endpoint (#8462)"}, {"oid": "ef578d6b93d10ebc9accce47f96c955a0ba14140", "committedDate": "2021-10-07 07:14:04 +0200", "message": "fix: Add tracked entity attribute value history(#8840)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "0303652efe35da369ba1d2a437a4b5797a52c451", "committedDate": "2022-04-01 09:37:58 +0200", "message": "chore: tracker entities only support idScheme UID DHIS2-12563 (#10329)"}, {"oid": "df4eaf29ba29ee71a727a1c072fd4bcb03bb4bc9", "committedDate": "2022-05-19 15:13:36 +0200", "message": "chore: docs, improve APIs DHIS2-12563 (#10847)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg2MjcxMA==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446862710", "body": "The name of the method could be getNameAndId", "bodyText": "The name of the method could be getNameAndId", "bodyHTML": "<p dir=\"auto\">The name of the method could be getNameAndId</p>", "author": "enricocolasante", "createdAt": "2020-06-29T08:38:14Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifier.java", "diffHunk": "@@ -80,4 +80,9 @@\n         throw new RuntimeException( \"Unhandled identifier type.\" );\n     }\n \n+    public <T extends IdentifiableObject> String getIdAndName( T object )", "originalCommit": "12bd589850367af9ce124e78ea519bd7842cb3c5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "0de12c05dd392294cec72617f370d4911b66c8f5", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifier.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifier.java\nindex 105999c294..6999ae05af 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifier.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/TrackerIdentifier.java\n", "chunk": "@@ -73,8 +78,6 @@ public class TrackerIdentifier\n                 .map( AttributeValue::getValue )\n                 .findFirst()\n                 .orElse( null );\n-        case AUTO:\n-            return ObjectUtils.firstNonNull( object.getUid(), object.getCode() );\n         }\n \n         throw new RuntimeException( \"Unhandled identifier type.\" );\n", "next_change": null}]}, "commits_in_main": [{"oid": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "message": "Merge commit", "committedDate": null}, {"oid": "699074cbe82db1a8e0a5e72edf2a981f3628b54b", "committedDate": "2020-12-07 10:47:48 +0100", "message": "fix: Tracker Identifiers resolution during Tracker import (#6824)"}, {"oid": "2ab8efe33562a2a83071c34823b4e54462d8672d", "committedDate": "2020-12-08 13:35:03 +0100", "message": "fix: implement NAME Tracker Identifier scheme (#6848)"}, {"oid": "757b281ac024a43da56dc3f6b6bc477fe7f0ca82", "committedDate": "2020-12-21 10:09:12 +0100", "message": "feat: DHIS2-9084 new tracker import sync endpoint (#6932)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "0de12c05dd392294cec72617f370d4911b66c8f5", "committedDate": "2022-02-18 10:17:06 +0100", "message": "fix: remove tracker id scheme AUTO DHIS2-12534 (#9808)"}, {"oid": "b625410a6aeed719ad4c6307e18cb9569fe8a4d0", "committedDate": "2022-04-04 11:36:08 +0200", "message": "chore: prepare addition of TrackerIdentifier DHIS2-12563 (#10347)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg2NjQyMQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446866421", "body": "Remove commented code", "bodyText": "Remove commented code", "bodyHTML": "<p dir=\"auto\">Remove commented code</p>", "author": "enricocolasante", "createdAt": "2020-06-29T08:44:23Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/bundle/TrackedEntityProgramAttributeEncryptionTest.java", "diffHunk": "@@ -109,17 +111,19 @@ protected void setUpTest() throws IOException\n         objectBundleService.commit( bundle );\n     }\n \n-    @Override\n-    public boolean emptyDatabaseAfterTest()\n-    {\n-        return true;\n-    }\n+//    @Override", "originalCommit": "12bd589850367af9ce124e78ea519bd7842cb3c5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "68c9d6c0ee6f2fd2462d63d9f3bef1a317f76ac6", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/bundle/TrackedEntityProgramAttributeEncryptionTest.java b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/bundle/TrackedEntityProgramAttributeEncryptionTest.java\nindex 573568d7ba..5ecd5d387a 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/bundle/TrackedEntityProgramAttributeEncryptionTest.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/bundle/TrackedEntityProgramAttributeEncryptionTest.java\n", "chunk": "@@ -111,12 +111,6 @@ public class TrackedEntityProgramAttributeEncryptionTest\n         objectBundleService.commit( bundle );\n     }\n \n-//    @Override\n-//    public boolean emptyDatabaseAfterTest()\n-//    {\n-//        return true;\n-//    }\n-\n     @Test\n     public void testTrackedEntityProgramAttributeEncryptedValue()\n         throws IOException\n", "next_change": null}]}, "revised_code_in_main": {"commit": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/bundle/TrackedEntityProgramAttributeEncryptionTest.java b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/bundle/TrackedEntityProgramAttributeEncryptionTest.java\nindex 573568d7ba..98b6cc3989 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/bundle/TrackedEntityProgramAttributeEncryptionTest.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/bundle/TrackedEntityProgramAttributeEncryptionTest.java\n", "chunk": "@@ -111,12 +113,6 @@ public class TrackedEntityProgramAttributeEncryptionTest\n         objectBundleService.commit( bundle );\n     }\n \n-//    @Override\n-//    public boolean emptyDatabaseAfterTest()\n-//    {\n-//        return true;\n-//    }\n-\n     @Test\n     public void testTrackedEntityProgramAttributeEncryptedValue()\n         throws IOException\n", "next_change": {"commit": "cb2ee65c0210c0d4b2bd8851789da8d4adfaf04d", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/bundle/TrackedEntityProgramAttributeEncryptionTest.java b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/bundle/TrackedEntityProgramAttributeEncryptionTest.java\nindex 98b6cc3989..f91836a38f 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/bundle/TrackedEntityProgramAttributeEncryptionTest.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/bundle/TrackedEntityProgramAttributeEncryptionTest.java\n", "chunk": "@@ -117,19 +117,17 @@ public class TrackedEntityProgramAttributeEncryptionTest\n     public void testTrackedEntityProgramAttributeEncryptedValue()\n         throws IOException\n     {\n-        TrackerBundle trackerBundle = renderService\n+        TrackerBundleParams trackerBundleParams = renderService\n             .fromJson( new ClassPathResource( \"tracker/te_program_with_tea_encryption_data.json\" ).getInputStream(),\n-                TrackerBundleParams.class ).toTrackerBundle();\n+                TrackerBundleParams.class );\n \n-        List<TrackerBundle> trackerBundles = trackerBundleService.create( TrackerBundleParams.builder()\n-            .trackedEntities( trackerBundle.getTrackedEntities() )\n-            .enrollments( trackerBundle.getEnrollments() )\n-            .events( trackerBundle.getEvents() )\n+        TrackerBundle trackerBundle = trackerBundleService.create( TrackerBundleParams.builder()\n+            .trackedEntities( trackerBundleParams.getTrackedEntities() )\n+            .enrollments( trackerBundleParams.getEnrollments() )\n+            .events( trackerBundleParams.getEvents() )\n             .build() );\n \n-        assertEquals( 1, trackerBundles.size() );\n-\n-        trackerBundleService.commit( trackerBundles.get( 0 ) );\n+        trackerBundleService.commit( trackerBundle );\n \n         List<TrackedEntityInstance> trackedEntityInstances = manager.getAll( TrackedEntityInstance.class );\n         assertEquals( 1, trackedEntityInstances.size() );\n", "next_change": {"commit": "3e799d196b8f73ad216ea100a07ddd5f7dfc53e0", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/bundle/TrackedEntityProgramAttributeEncryptionTest.java b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/bundle/TrackedEntityProgramAttributeEncryptionTest.java\nindex f91836a38f..1ba9ceaa5a 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/bundle/TrackedEntityProgramAttributeEncryptionTest.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/bundle/TrackedEntityProgramAttributeEncryptionTest.java\n", "chunk": "@@ -89,43 +64,19 @@ public class TrackedEntityProgramAttributeEncryptionTest\n     private JdbcTemplate jdbcTemplate;\n \n     @Override\n-    protected void setUpTest()\n+    protected void initTest()\n         throws IOException\n     {\n-        preCreateInjectAdminUserWithoutPersistence();\n-\n-        renderService = _renderService;\n-        userService = _userService;\n-\n-        Map<Class<? extends IdentifiableObject>, List<IdentifiableObject>> metadata = renderService.fromMetadata(\n-            new ClassPathResource( \"tracker/te_program_with_tea_encryption_metadata.json\" ).getInputStream(),\n-            RenderFormat.JSON );\n-\n-        ObjectBundleParams params = new ObjectBundleParams();\n-        params.setObjectBundleMode( ObjectBundleMode.COMMIT );\n-        params.setImportStrategy( ImportStrategy.CREATE );\n-        params.setObjects( metadata );\n-\n-        ObjectBundle bundle = objectBundleService.create( params );\n-        ObjectBundleValidationReport validationReport = objectBundleValidationService.validate( bundle );\n-        assertTrue( validationReport.getErrorReports().isEmpty() );\n-\n-        objectBundleService.commit( bundle );\n+        setUpMetadata( \"tracker/te_program_with_tea_encryption_metadata.json\" );\n     }\n \n     @Test\n     public void testTrackedEntityProgramAttributeEncryptedValue()\n         throws IOException\n     {\n-        TrackerBundleParams trackerBundleParams = renderService\n-            .fromJson( new ClassPathResource( \"tracker/te_program_with_tea_encryption_data.json\" ).getInputStream(),\n-                TrackerBundleParams.class );\n-\n-        TrackerBundle trackerBundle = trackerBundleService.create( TrackerBundleParams.builder()\n-            .trackedEntities( trackerBundleParams.getTrackedEntities() )\n-            .enrollments( trackerBundleParams.getEnrollments() )\n-            .events( trackerBundleParams.getEvents() )\n-            .build() );\n+        TrackerImportParams trackerImportParams = fromJson( \"tracker/te_program_with_tea_encryption_data.json\" );\n+\n+        TrackerBundle trackerBundle = trackerBundleService.create( trackerImportParams );\n \n         trackerBundleService.commit( trackerBundle );\n \n", "next_change": {"commit": "22d5da9d9a812b02eb5acd643112a6b050b5d63c", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/bundle/TrackedEntityProgramAttributeEncryptionTest.java b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/bundle/TrackedEntityProgramAttributeEncryptionTest.java\nindex 1ba9ceaa5a..feea67907c 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/bundle/TrackedEntityProgramAttributeEncryptionTest.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/bundle/TrackedEntityProgramAttributeEncryptionTest.java\n", "chunk": "@@ -71,27 +70,20 @@ public class TrackedEntityProgramAttributeEncryptionTest\n     }\n \n     @Test\n-    public void testTrackedEntityProgramAttributeEncryptedValue()\n+    void testTrackedEntityProgramAttributeEncryptedValue()\n         throws IOException\n     {\n         TrackerImportParams trackerImportParams = fromJson( \"tracker/te_program_with_tea_encryption_data.json\" );\n-\n         TrackerBundle trackerBundle = trackerBundleService.create( trackerImportParams );\n-\n         trackerBundleService.commit( trackerBundle );\n-\n         List<TrackedEntityInstance> trackedEntityInstances = manager.getAll( TrackedEntityInstance.class );\n         assertEquals( 1, trackedEntityInstances.size() );\n-\n         TrackedEntityInstance trackedEntityInstance = trackedEntityInstances.get( 0 );\n-\n         List<TrackedEntityAttributeValue> attributeValues = trackedEntityAttributeValueService\n-            .getTrackedEntityAttributeValues(\n-                trackedEntityInstance );\n-\n+            .getTrackedEntityAttributeValues( trackedEntityInstance );\n         assertEquals( 5, attributeValues.size() );\n-\n-        // not really a great test, but we are using a random seed for salt, so it changes on every run... we might want to\n+        // not really a great test, but we are using a random seed for salt, so\n+        // it changes on every run... we might want to\n         // add another EncryptionConfig test profile\n         RowCallbackHandler handler = resultSet -> assertNotNull( resultSet.getString( \"encryptedvalue\" ) );\n         jdbcTemplate.query( \"select * from trackedentityattributevalue where encryptedvalue is not null \", handler );\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "message": "Merge commit", "committedDate": null}, {"oid": "cb2ee65c0210c0d4b2bd8851789da8d4adfaf04d", "committedDate": "2020-09-07 10:28:21 +0200", "message": "fix: [DHIS2-9287] Fix the stats in the import summary (#6062)"}, {"oid": "3e799d196b8f73ad216ea100a07ddd5f7dfc53e0", "committedDate": "2020-11-30 16:37:14 +0100", "message": "fix: remove long running transaction during Tracker Import (#6782)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "22d5da9d9a812b02eb5acd643112a6b050b5d63c", "committedDate": "2021-12-16 13:19:38 +0100", "message": "chore: migrate tests to JUnit 5 (#9467)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "c57836ed4b5781d49f9f71739f8363cbba22115d", "committedDate": "2022-05-19 15:17:52 +0200", "message": "fix: Fix tracker integration tests to use tracker import service [TECH-890] (#10846)"}, {"oid": "e1740a5804e29683f4310e9fd284b637c8acb6b1", "committedDate": "2022-06-02 14:24:41 +0000", "message": "test: add context to failed TrackedEntityProgramAttributeEncryptionTest (#10971)"}, {"oid": "6b39184ce68d45d2d75a08c3d6b45fe012395457", "committedDate": "2022-06-03 08:16:09 +0200", "message": "test: use assertNoImportErrors for better context (#10989)"}, {"oid": "6e83eba877030575456f919de1bce55fcae8e517", "committedDate": "2022-06-24 10:01:46 +0200", "message": "test: move all integration tests into own module TECH-1209 (#11148)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg2ODMzNQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446868335", "body": "Same as other classes, try to avoid duplicated code.\r\nHere the organisation unit part could be extracted to a shared method", "bodyText": "Same as other classes, try to avoid duplicated code.\nHere the organisation unit part could be extracted to a shared method", "bodyHTML": "<p dir=\"auto\">Same as other classes, try to avoid duplicated code.<br>\nHere the organisation unit part could be extracted to a shared method</p>", "author": "enricocolasante", "createdAt": "2020-06-29T08:47:45Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java", "diffHunk": "@@ -0,0 +1,196 @@\n+package org.hisp.dhis.tracker.validation.hooks;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.hisp.dhis.organisationunit.OrganisationUnit;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.program.ProgramInstance;\n+import org.hisp.dhis.program.ProgramStage;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.trackedentity.TrackedEntityType;\n+import org.hisp.dhis.tracker.TrackerIdentifier;\n+import org.hisp.dhis.tracker.TrackerImportStrategy;\n+import org.hisp.dhis.tracker.bundle.TrackerBundle;\n+import org.hisp.dhis.tracker.domain.Enrollment;\n+import org.hisp.dhis.tracker.domain.Event;\n+import org.hisp.dhis.tracker.domain.TrackedEntity;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n+import org.hisp.dhis.tracker.validation.TrackerImportValidationContext;\n+import org.springframework.stereotype.Component;\n+\n+import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+@Component\n+public class PreCheckMetaValidationHook", "originalCommit": "12bd589850367af9ce124e78ea519bd7842cb3c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk5ODMzOA==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446998338", "bodyText": "Don't see what you mean here, all orgUnit==null checks returns different error codes.", "author": "netroms", "createdAt": "2020-06-29T14:06:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg2ODMzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMwMTQ2MQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r448301461", "bodyText": "@netroms  - what is the difference between this validation hook and PrecheckExistenceValidationHook? We also have PreCheckSecurityValidationHook. Any possibility to merge these three?\nMy worry is we could be checking an entity with a failed validation hook multiple times. The first time we have a failed validation, we should reject. Now with our checks in multiple places, not sure if we are keeping track of the validation statuses.", "author": "abyot", "createdAt": "2020-07-01T11:33:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg2ODMzNQ=="}], "type": "inlineReview", "revised_code": {"commit": "898c87ce14bf1faf20e8f8ebf3a5bc12f27437f0", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\nindex d98f8e394b..0beb1faac3 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\n", "chunk": "@@ -54,16 +56,22 @@ import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n public class PreCheckMetaValidationHook\n     extends AbstractTrackerDtoValidationHook\n {\n+\n+    public PreCheckMetaValidationHook( TrackedEntityAttributeService teAttrService,\n+        TrackedEntityCommentService commentService )\n+    {\n+        super( teAttrService, commentService );\n+    }\n+\n     @Override\n     public void validateTrackedEntity( ValidationErrorReporter reporter, TrackedEntity tei )\n     {\n         TrackerImportValidationContext context = reporter.getValidationContext();\n \n         OrganisationUnit organisationUnit = context.getOrganisationUnit( tei.getOrgUnit() );\n-\n         if ( organisationUnit == null )\n         {\n-            reporter.addError( newReport( TrackerErrorCode.E1011 )\n+            reporter.addError( newReport( TrackerErrorCode.E1049 )\n                 .addArg( reporter ) );\n         }\n \n", "next_change": null}]}, "revised_code_in_main": {"commit": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\nindex d98f8e394b..0beb1faac3 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\n", "chunk": "@@ -54,16 +56,22 @@ import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n public class PreCheckMetaValidationHook\n     extends AbstractTrackerDtoValidationHook\n {\n+\n+    public PreCheckMetaValidationHook( TrackedEntityAttributeService teAttrService,\n+        TrackedEntityCommentService commentService )\n+    {\n+        super( teAttrService, commentService );\n+    }\n+\n     @Override\n     public void validateTrackedEntity( ValidationErrorReporter reporter, TrackedEntity tei )\n     {\n         TrackerImportValidationContext context = reporter.getValidationContext();\n \n         OrganisationUnit organisationUnit = context.getOrganisationUnit( tei.getOrgUnit() );\n-\n         if ( organisationUnit == null )\n         {\n-            reporter.addError( newReport( TrackerErrorCode.E1011 )\n+            reporter.addError( newReport( TrackerErrorCode.E1049 )\n                 .addArg( reporter ) );\n         }\n \n", "next_change": {"commit": "3e3b32e56ff5554a0095396eddffceac65b6b8de", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\nindex 0beb1faac3..99937ab5a8 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\n", "chunk": "@@ -71,15 +83,13 @@ public class PreCheckMetaValidationHook\n         OrganisationUnit organisationUnit = context.getOrganisationUnit( tei.getOrgUnit() );\n         if ( organisationUnit == null )\n         {\n-            reporter.addError( newReport( TrackerErrorCode.E1049 )\n-                .addArg( reporter ) );\n+            addError( reporter, TrackerErrorCode.E1049, tei.getOrgUnit() );\n         }\n \n         TrackedEntityType entityType = context.getTrackedEntityType( tei.getTrackedEntityType() );\n         if ( entityType == null )\n         {\n-            reporter.addError( newReport( TrackerErrorCode.E1005 )\n-                .addArg( tei.getTrackedEntityType() ) );\n+            addError( reporter, E1005, tei.getTrackedEntityType());\n         }\n     }\n \n", "next_change": {"commit": "6e28dbfdaea7ceacbe560fe82ddba1e94c6cd203", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\nindex 99937ab5a8..32c0810ca2 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\n", "chunk": "@@ -89,7 +93,7 @@ public class PreCheckMetaValidationHook\n         TrackedEntityType entityType = context.getTrackedEntityType( tei.getTrackedEntityType() );\n         if ( entityType == null )\n         {\n-            addError( reporter, E1005, tei.getTrackedEntityType());\n+            addError( reporter, E1005, tei.getTrackedEntityType() );\n         }\n     }\n \n", "next_change": {"commit": "33f99931474be434371691a439a56becb9f23025", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\nindex 32c0810ca2..7d67228fdf 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\n", "chunk": "@@ -101,45 +74,30 @@ public class PreCheckMetaValidationHook\n     public void validateEnrollment( ValidationErrorReporter reporter, Enrollment enrollment )\n     {\n         TrackerImportValidationContext context = reporter.getValidationContext();\n-        TrackerImportStrategy strategy = context.getStrategy( enrollment );\n \n         OrganisationUnit organisationUnit = context.getOrganisationUnit( enrollment.getOrgUnit() );\n         addErrorIfNull( organisationUnit, reporter, E1070, enrollment.getOrgUnit() );\n \n         Program program = context.getProgram( enrollment.getProgram() );\n-        addErrorIfNull( program,  reporter, E1069, enrollment.getProgram() );\n-\n-        if ( (program != null && organisationUnit != null) && !program.hasOrganisationUnit( organisationUnit ) )\n-        {\n-            addError( reporter, E1041, organisationUnit, program, program.getOrganisationUnits() );\n-        }\n+        addErrorIfNull( program, reporter, E1069, enrollment.getProgram() );\n \n-        if ( strategy.isUpdate() )\n-        {\n-            ProgramInstance pi = context.getProgramInstance( enrollment.getEnrollment() );\n-            Program existingProgram = pi.getProgram();\n-            if ( !existingProgram.equals( program ) )\n-            {\n-                addError( reporter, E1094, pi, existingProgram );\n-            }\n-        }\n+        addErrorIf( () -> !trackedEntityInstanceExist( context, enrollment.getTrackedEntity() ),\n+            reporter, E1068, enrollment.getTrackedEntity() );\n     }\n \n     @Override\n     public void validateEvent( ValidationErrorReporter reporter, Event event )\n     {\n         TrackerImportValidationContext context = reporter.getValidationContext();\n-        TrackerImportStrategy strategy = context.getStrategy( event );\n-        TrackerBundle bundle = context.getBundle();\n \n         OrganisationUnit organisationUnit = context.getOrganisationUnit( event.getOrgUnit() );\n         addErrorIfNull( organisationUnit, reporter, E1011, event.getOrgUnit() );\n \n         Program program = context.getProgram( event.getProgram() );\n-        ProgramStage programStage = context.getProgramStage( event.getProgramStage() );\n+        addErrorIfNull( program, reporter, E1010, event.getProgram() );\n \n-        validateEventProgramAndProgramStage( reporter, event, context, strategy, bundle, program, programStage );\n-        validateDataElementForDataValues( reporter, event, context );\n+        ProgramStage programStage = context.getProgramStage( event.getProgramStage() );\n+        addErrorIfNull( programStage, reporter, E1013, event.getProgramStage() );\n     }\n \n     @Override\n", "next_change": {"commit": "fe04922e144ac69367a99840d5518edda2d67f38", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\nindex 7d67228fdf..ebe2ced3f8 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\n", "chunk": "@@ -93,9 +93,6 @@ public class PreCheckMetaValidationHook\n         OrganisationUnit organisationUnit = context.getOrganisationUnit( event.getOrgUnit() );\n         addErrorIfNull( organisationUnit, reporter, E1011, event.getOrgUnit() );\n \n-        Program program = context.getProgram( event.getProgram() );\n-        addErrorIfNull( program, reporter, E1010, event.getProgram() );\n-\n         ProgramStage programStage = context.getProgramStage( event.getProgramStage() );\n         addErrorIfNull( programStage, reporter, E1013, event.getProgramStage() );\n     }\n", "next_change": {"commit": "83030519745a21c0fa955974f69f4f46498267cd", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\nindex ebe2ced3f8..7d67228fdf 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\n", "chunk": "@@ -93,6 +93,9 @@ public class PreCheckMetaValidationHook\n         OrganisationUnit organisationUnit = context.getOrganisationUnit( event.getOrgUnit() );\n         addErrorIfNull( organisationUnit, reporter, E1011, event.getOrgUnit() );\n \n+        Program program = context.getProgram( event.getProgram() );\n+        addErrorIfNull( program, reporter, E1010, event.getProgram() );\n+\n         ProgramStage programStage = context.getProgramStage( event.getProgramStage() );\n         addErrorIfNull( programStage, reporter, E1013, event.getProgramStage() );\n     }\n", "next_change": {"commit": "97fa18701761c6993e20f2e7a3816ea689129480", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\nindex 7d67228fdf..56208e1125 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\n", "chunk": "@@ -91,13 +97,13 @@ public class PreCheckMetaValidationHook\n         TrackerImportValidationContext context = reporter.getValidationContext();\n \n         OrganisationUnit organisationUnit = context.getOrganisationUnit( event.getOrgUnit() );\n-        addErrorIfNull( organisationUnit, reporter, E1011, event.getOrgUnit() );\n+        addErrorIfNull( organisationUnit, reporter, event, E1011, event.getOrgUnit() );\n \n         Program program = context.getProgram( event.getProgram() );\n-        addErrorIfNull( program, reporter, E1010, event.getProgram() );\n+        addErrorIfNull( program, reporter, event, E1010, event.getProgram() );\n \n         ProgramStage programStage = context.getProgramStage( event.getProgramStage() );\n-        addErrorIfNull( programStage, reporter, E1013, event.getProgramStage() );\n+        addErrorIfNull( programStage, reporter, event, E1013, event.getProgramStage() );\n     }\n \n     @Override\n", "next_change": {"commit": "1d8350a9e9ac100aaaa831894ba3f857b46e2474", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\nindex 56208e1125..8062876289 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\n", "chunk": "@@ -97,13 +97,13 @@ public class PreCheckMetaValidationHook\n         TrackerImportValidationContext context = reporter.getValidationContext();\n \n         OrganisationUnit organisationUnit = context.getOrganisationUnit( event.getOrgUnit() );\n-        addErrorIfNull( organisationUnit, reporter, event, E1011, event.getOrgUnit() );\n+        reporter.addErrorIfNull( organisationUnit, event, E1011, event.getOrgUnit() );\n \n         Program program = context.getProgram( event.getProgram() );\n-        addErrorIfNull( program, reporter, event, E1010, event.getProgram() );\n+        reporter.addErrorIfNull( program, event, E1010, event.getProgram() );\n \n         ProgramStage programStage = context.getProgramStage( event.getProgramStage() );\n-        addErrorIfNull( programStage, reporter, event, E1013, event.getProgramStage() );\n+        reporter.addErrorIfNull( programStage, event, E1013, event.getProgramStage() );\n     }\n \n     @Override\n", "next_change": {"commit": "ef0cbd365e47f1f88befb80d9650cce75280bd35", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\nindex 8062876289..ee5768842d 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\n", "chunk": "@@ -79,39 +78,36 @@ public class PreCheckMetaValidationHook\n     @Override\n     public void validateEnrollment( ValidationErrorReporter reporter, Enrollment enrollment )\n     {\n-        TrackerImportValidationContext context = reporter.getValidationContext();\n-\n-        OrganisationUnit organisationUnit = context.getOrganisationUnit( enrollment.getOrgUnit() );\n+        OrganisationUnit organisationUnit = reporter.getBundle().getPreheat()\n+            .getOrganisationUnit( enrollment.getOrgUnit() );\n         reporter.addErrorIfNull( organisationUnit, enrollment, E1070, enrollment.getOrgUnit() );\n \n-        Program program = context.getProgram( enrollment.getProgram() );\n+        Program program = reporter.getBundle().getPreheat().getProgram( enrollment.getProgram() );\n         reporter.addErrorIfNull( program, enrollment, E1069, enrollment.getProgram() );\n \n-        reporter.addErrorIf( () -> !trackedEntityInstanceExist( context, enrollment.getTrackedEntity() ), enrollment,\n+        reporter.addErrorIf( () -> !trackedEntityInstanceExist( reporter.getBundle(), enrollment.getTrackedEntity() ),\n+            enrollment,\n             E1068, enrollment.getTrackedEntity() );\n     }\n \n     @Override\n     public void validateEvent( ValidationErrorReporter reporter, Event event )\n     {\n-        TrackerImportValidationContext context = reporter.getValidationContext();\n-\n-        OrganisationUnit organisationUnit = context.getOrganisationUnit( event.getOrgUnit() );\n+        OrganisationUnit organisationUnit = reporter.getBundle().getPreheat().getOrganisationUnit( event.getOrgUnit() );\n         reporter.addErrorIfNull( organisationUnit, event, E1011, event.getOrgUnit() );\n \n-        Program program = context.getProgram( event.getProgram() );\n+        Program program = reporter.getBundle().getPreheat().getProgram( event.getProgram() );\n         reporter.addErrorIfNull( program, event, E1010, event.getProgram() );\n \n-        ProgramStage programStage = context.getProgramStage( event.getProgramStage() );\n+        ProgramStage programStage = reporter.getBundle().getPreheat().getProgramStage( event.getProgramStage() );\n         reporter.addErrorIfNull( programStage, event, E1013, event.getProgramStage() );\n     }\n \n     @Override\n     public void validateRelationship( ValidationErrorReporter reporter, Relationship relationship )\n     {\n-        TrackerImportValidationContext context = reporter.getValidationContext();\n-\n-        RelationshipType relationshipType = context.getRelationShipType( relationship.getRelationshipType() );\n+        TrackerPreheat preheat = reporter.getBundle().getPreheat();\n+        RelationshipType relationshipType = preheat.get( RelationshipType.class, relationship.getRelationshipType() );\n \n         reporter.addErrorIfNull( relationshipType, relationship, E4006, relationship.getRelationshipType() );\n     }\n", "next_change": {"commit": "df4eaf29ba29ee71a727a1c072fd4bcb03bb4bc9", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\nindex ee5768842d..e01dc213cd 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\n", "chunk": "@@ -107,7 +108,7 @@ public class PreCheckMetaValidationHook\n     public void validateRelationship( ValidationErrorReporter reporter, Relationship relationship )\n     {\n         TrackerPreheat preheat = reporter.getBundle().getPreheat();\n-        RelationshipType relationshipType = preheat.get( RelationshipType.class, relationship.getRelationshipType() );\n+        RelationshipType relationshipType = preheat.getRelationshipType( relationship.getRelationshipType() );\n \n         reporter.addErrorIfNull( relationshipType, relationship, E4006, relationship.getRelationshipType() );\n     }\n", "next_change": {"commit": "f7cfc83610c75486bbb0457dde057eaed777f3d2", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\nindex e01dc213cd..e6eda46092 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\n", "chunk": "@@ -76,38 +76,37 @@ public class PreCheckMetaValidationHook\n     }\n \n     @Override\n-    public void validateEnrollment( ValidationErrorReporter reporter, Enrollment enrollment )\n+    public void validateEnrollment( ValidationErrorReporter reporter, TrackerBundle bundle, Enrollment enrollment )\n     {\n-        OrganisationUnit organisationUnit = reporter.getBundle().getPreheat()\n-            .getOrganisationUnit( enrollment.getOrgUnit() );\n+        OrganisationUnit organisationUnit = bundle.getPreheat().getOrganisationUnit( enrollment.getOrgUnit() );\n         reporter.addErrorIfNull( organisationUnit, enrollment, E1070, enrollment.getOrgUnit() );\n \n-        Program program = reporter.getBundle().getPreheat().getProgram( enrollment.getProgram() );\n-        reporter.addErrorIfNull( program, enrollment, E1069, enrollment.getProgram().getIdentifierOrAttributeValue() );\n+        Program program = bundle.getPreheat().getProgram( enrollment.getProgram() );\n+        reporter.addErrorIfNull( program, enrollment, E1069, enrollment.getProgram() );\n \n-        reporter.addErrorIf( () -> !trackedEntityInstanceExist( reporter.getBundle(), enrollment.getTrackedEntity() ),\n+        reporter.addErrorIf( () -> !trackedEntityInstanceExist( bundle, enrollment.getTrackedEntity() ),\n             enrollment,\n             E1068, enrollment.getTrackedEntity() );\n     }\n \n     @Override\n-    public void validateEvent( ValidationErrorReporter reporter, Event event )\n+    public void validateEvent( ValidationErrorReporter reporter, TrackerBundle bundle, Event event )\n     {\n-        OrganisationUnit organisationUnit = reporter.getBundle().getPreheat().getOrganisationUnit( event.getOrgUnit() );\n+        OrganisationUnit organisationUnit = bundle.getPreheat().getOrganisationUnit( event.getOrgUnit() );\n         reporter.addErrorIfNull( organisationUnit, event, E1011, event.getOrgUnit() );\n \n-        Program program = reporter.getBundle().getPreheat().getProgram( event.getProgram() );\n-        reporter.addErrorIfNull( program, event, E1010,\n-            event.getProgram().getIdentifierOrAttributeValue() );\n+        Program program = bundle.getPreheat().getProgram( event.getProgram() );\n+        reporter.addErrorIfNull( program, event, E1010, event.getProgram() );\n \n-        ProgramStage programStage = reporter.getBundle().getPreheat().getProgramStage( event.getProgramStage() );\n+        ProgramStage programStage = bundle.getPreheat().getProgramStage( event.getProgramStage() );\n         reporter.addErrorIfNull( programStage, event, E1013, event.getProgramStage() );\n     }\n \n     @Override\n-    public void validateRelationship( ValidationErrorReporter reporter, Relationship relationship )\n+    public void validateRelationship( ValidationErrorReporter reporter, TrackerBundle bundle,\n+        Relationship relationship )\n     {\n-        TrackerPreheat preheat = reporter.getBundle().getPreheat();\n+        TrackerPreheat preheat = bundle.getPreheat();\n         RelationshipType relationshipType = preheat.getRelationshipType( relationship.getRelationshipType() );\n \n         reporter.addErrorIfNull( relationshipType, relationship, E4006, relationship.getRelationshipType() );\n", "next_change": {"commit": "b0a861c0308005b865cafa2344c1231c0a4f2bc3", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\nindex e6eda46092..3eed397428 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\n", "chunk": "@@ -113,7 +114,7 @@ public class PreCheckMetaValidationHook\n     }\n \n     @Override\n-    public boolean removeOnError()\n+    public boolean skipOnError()\n     {\n         return true;\n     }\n", "next_change": {"commit": "e64a40be0dc9744a6a9bb33f4239f1f57cd2e02d", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\ndeleted file mode 100644\nindex 3eed397428..0000000000\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckMetaValidationHook.java\n+++ /dev/null\n", "chunk": "@@ -1,122 +0,0 @@\n-/*\n- * Copyright (c) 2004-2022, University of Oslo\n- * All rights reserved.\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions are met:\n- * Redistributions of source code must retain the above copyright notice, this\n- * list of conditions and the following disclaimer.\n- *\n- * Redistributions in binary form must reproduce the above copyright notice,\n- * this list of conditions and the following disclaimer in the documentation\n- * and/or other materials provided with the distribution.\n- * Neither the name of the HISP project nor the names of its contributors may\n- * be used to endorse or promote products derived from this software without\n- * specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n- * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n- * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n- * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n- * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n- * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n- * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- */\n-package org.hisp.dhis.tracker.validation.hooks;\n-\n-import static org.hisp.dhis.tracker.report.TrackerErrorCode.E1005;\n-import static org.hisp.dhis.tracker.report.TrackerErrorCode.E1010;\n-import static org.hisp.dhis.tracker.report.TrackerErrorCode.E1011;\n-import static org.hisp.dhis.tracker.report.TrackerErrorCode.E1013;\n-import static org.hisp.dhis.tracker.report.TrackerErrorCode.E1068;\n-import static org.hisp.dhis.tracker.report.TrackerErrorCode.E1069;\n-import static org.hisp.dhis.tracker.report.TrackerErrorCode.E1070;\n-import static org.hisp.dhis.tracker.report.TrackerErrorCode.E4006;\n-import static org.hisp.dhis.tracker.validation.hooks.ValidationUtils.trackedEntityInstanceExist;\n-\n-import org.hisp.dhis.organisationunit.OrganisationUnit;\n-import org.hisp.dhis.program.Program;\n-import org.hisp.dhis.program.ProgramStage;\n-import org.hisp.dhis.relationship.RelationshipType;\n-import org.hisp.dhis.trackedentity.TrackedEntityType;\n-import org.hisp.dhis.tracker.bundle.TrackerBundle;\n-import org.hisp.dhis.tracker.domain.Enrollment;\n-import org.hisp.dhis.tracker.domain.Event;\n-import org.hisp.dhis.tracker.domain.Relationship;\n-import org.hisp.dhis.tracker.domain.TrackedEntity;\n-import org.hisp.dhis.tracker.preheat.TrackerPreheat;\n-import org.hisp.dhis.tracker.report.TrackerErrorCode;\n-import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n-import org.hisp.dhis.tracker.validation.TrackerValidationHook;\n-import org.springframework.stereotype.Component;\n-\n-/**\n- * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n- */\n-@Component\n-public class PreCheckMetaValidationHook\n-    implements TrackerValidationHook\n-{\n-    @Override\n-    public void validateTrackedEntity( ValidationErrorReporter reporter, TrackerBundle bundle, TrackedEntity tei )\n-    {\n-        OrganisationUnit organisationUnit = bundle.getPreheat().getOrganisationUnit( tei.getOrgUnit() );\n-        if ( organisationUnit == null )\n-        {\n-            reporter.addError( tei, TrackerErrorCode.E1049, tei.getOrgUnit() );\n-        }\n-\n-        TrackedEntityType entityType = bundle.getPreheat().getTrackedEntityType( tei.getTrackedEntityType() );\n-        if ( entityType == null )\n-        {\n-            reporter.addError( tei, E1005, tei.getTrackedEntityType() );\n-        }\n-    }\n-\n-    @Override\n-    public void validateEnrollment( ValidationErrorReporter reporter, TrackerBundle bundle, Enrollment enrollment )\n-    {\n-        OrganisationUnit organisationUnit = bundle.getPreheat().getOrganisationUnit( enrollment.getOrgUnit() );\n-        reporter.addErrorIfNull( organisationUnit, enrollment, E1070, enrollment.getOrgUnit() );\n-\n-        Program program = bundle.getPreheat().getProgram( enrollment.getProgram() );\n-        reporter.addErrorIfNull( program, enrollment, E1069, enrollment.getProgram() );\n-\n-        reporter.addErrorIf( () -> !trackedEntityInstanceExist( bundle, enrollment.getTrackedEntity() ),\n-            enrollment,\n-            E1068, enrollment.getTrackedEntity() );\n-    }\n-\n-    @Override\n-    public void validateEvent( ValidationErrorReporter reporter, TrackerBundle bundle, Event event )\n-    {\n-        OrganisationUnit organisationUnit = bundle.getPreheat().getOrganisationUnit( event.getOrgUnit() );\n-        reporter.addErrorIfNull( organisationUnit, event, E1011, event.getOrgUnit() );\n-\n-        Program program = bundle.getPreheat().getProgram( event.getProgram() );\n-        reporter.addErrorIfNull( program, event, E1010, event.getProgram() );\n-\n-        ProgramStage programStage = bundle.getPreheat().getProgramStage( event.getProgramStage() );\n-        reporter.addErrorIfNull( programStage, event, E1013, event.getProgramStage() );\n-    }\n-\n-    @Override\n-    public void validateRelationship( ValidationErrorReporter reporter, TrackerBundle bundle,\n-        Relationship relationship )\n-    {\n-        TrackerPreheat preheat = bundle.getPreheat();\n-        RelationshipType relationshipType = preheat.getRelationshipType( relationship.getRelationshipType() );\n-\n-        reporter.addErrorIfNull( relationshipType, relationship, E4006, relationship.getRelationshipType() );\n-    }\n-\n-    @Override\n-    public boolean skipOnError()\n-    {\n-        return true;\n-    }\n-\n-}\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "message": "Merge commit", "committedDate": null}, {"oid": "3e3dc98d92f0c13fb56cf17894eab06a78842133", "committedDate": "2020-08-04 17:20:37 +0200", "message": "feat: Enrollment/Events note persistence"}, {"oid": "6e1e12a2fe3c14f79781d64ec3f890f680cf49a4", "committedDate": "2020-08-24 15:50:03 +0200", "message": "feat: Added support for data values in event import [DHIS2-9270]"}, {"oid": "8aaeab2ee4dd7a9ffa927147931dff8609ef787a", "committedDate": "2020-09-23 15:33:34 +0200", "message": "chore: Remove unused imports (#6219)"}, {"oid": "3e3b32e56ff5554a0095396eddffceac65b6b8de", "committedDate": "2020-10-27 09:56:50 +0100", "message": "refactor: simplified calls to error reporting (#6437)"}, {"oid": "6e28dbfdaea7ceacbe560fe82ddba1e94c6cd203", "committedDate": "2020-11-11 17:41:55 +0100", "message": "fix: Exception when importing TEI with relationship [DHIS2-9856] (#6552)"}, {"oid": "0bf55d776481f6511e5f9ebca5de1f2cf79777c0", "committedDate": "2020-11-19 13:55:46 +0100", "message": "refactor: New Tracker Error reporting refactor (#6706)"}, {"oid": "71b9cc9066ade25caca07d78d8e5f6e946c7133f", "committedDate": "2020-11-24 12:12:26 +0100", "message": "feat: fail validation on missing enrollment in event (#6749)"}, {"oid": "241b35d67813cc821ffc07590b6e3c855a3047bd", "committedDate": "2020-11-24 13:59:15 +0100", "message": "fix: do not fail on missing event's enrollment if program is not reg (#6751)"}, {"oid": "b765b27ac675347397a7873ffd2a1243dc20a244", "committedDate": "2020-12-02 16:26:36 +0100", "message": "fix: Tracker Import validation message simplification (#6815)"}, {"oid": "a84324f8f0693fcdd0ee78c846ca7fbe9b5557d8", "committedDate": "2020-12-04 09:53:51 +0100", "message": "fix: Only return one error if programStage is null [DHIS2-9946] (#6802)"}, {"oid": "699074cbe82db1a8e0a5e72edf2a981f3628b54b", "committedDate": "2020-12-07 10:47:48 +0100", "message": "fix: Tracker Identifiers resolution during Tracker import (#6824)"}, {"oid": "f1ee41f1845d51b9efa6c5f5c666371ee503297a", "committedDate": "2020-12-09 21:22:05 +0100", "message": "fix: tune mappers to reduce queries executed during import (#6845)"}, {"oid": "c4f1db1dab576bc73489a9e0a6d015acec2eab5b", "committedDate": "2020-12-15 15:09:02 +0100", "message": "feat: Tracker Import metadata cache (#6877)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "055574bea49c3a40c5cfff3cb86694fc4bd12c45", "committedDate": "2021-01-12 15:26:26 +0100", "message": "perf: replace expensive \"Program has OrgUnit\" call with faster SQL (#6930)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "653f644dd3b686d05809402882371b57b0d6a2f2", "committedDate": "2021-02-08 09:03:42 +0100", "message": "fix: [DHIS2-10430] Remove NPE from a validation hook (#7289)"}, {"oid": "d3babd17c47704fd61fb23a664d8e88264bbcff0", "committedDate": "2021-02-15 16:32:19 +0100", "message": "fix: Dhis2 10432 (#7347)"}, {"oid": "2a976508b620e29a6ea98c81ae4e317e0d399132", "committedDate": "2021-03-19 13:40:13 +0100", "message": "fix: Create event program preprocessor to fix event import with wrong program [TECH-579] (#7696)"}, {"oid": "33f99931474be434371691a439a56becb9f23025", "committedDate": "2021-04-07 10:36:15 +0200", "message": "refactor: Clean up metadata and relations validation hooks [TECH-579] (#7807)"}, {"oid": "fe04922e144ac69367a99840d5518edda2d67f38", "committedDate": "2021-06-03 08:17:10 +0200", "message": "fix: Make program field read-only in event payload [DHIS2-11225] (#8086)"}, {"oid": "83030519745a21c0fa955974f69f4f46498267cd", "committedDate": "2021-06-09 09:44:41 +0200", "message": "fix: Make program mandatory for program events and program stage for tracker events [DHIS2-11225] (#8120)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "97fa18701761c6993e20f2e7a3816ea689129480", "committedDate": "2022-01-11 15:31:02 +0100", "message": "chore: hooks should add errors via reporter directly TECH-880 (#9523)"}, {"oid": "1d8350a9e9ac100aaaa831894ba3f857b46e2474", "committedDate": "2022-01-13 14:15:17 +0100", "message": "chore: adding errors and warnings is responsibility of the ValidationErrorReporter TECH-880 (#9616)"}, {"oid": "ef0cbd365e47f1f88befb80d9650cce75280bd35", "committedDate": "2022-03-08 15:12:00 +0100", "message": "chore: move DB access and mutation to preheat and preprocessor DHIS2-12623 (#9904)"}, {"oid": "5f63b52ac0a4f426145ae43affa58295f804812a", "committedDate": "2022-04-14 13:41:33 +0200", "message": "chore: split domain and view models DHIS2-12563 (#10379)"}, {"oid": "82000d2a019227cc85cb3d43b301b8bf758f5c85", "committedDate": "2022-04-19 14:21:17 +0200", "message": "fix: Event.program is a MetadataIdentifier DHIS2-12563 (#10482)"}, {"oid": "df4eaf29ba29ee71a727a1c072fd4bcb03bb4bc9", "committedDate": "2022-05-19 15:13:36 +0200", "message": "chore: docs, improve APIs DHIS2-12563 (#10847)"}, {"oid": "b567e74f7d703115fb7bc9802ed3b5f29d6917aa", "committedDate": "2022-05-23 09:13:55 +0200", "message": "fix: report ids or attribute value for MetadataIdentifiers DHIS2-12519 (#10873)"}, {"oid": "f7cfc83610c75486bbb0457dde057eaed777f3d2", "committedDate": "2022-05-27 15:15:25 +0200", "message": "chore: ValidationErrorReporter does not need the bunlde DHIS2-12519 (#10878)"}, {"oid": "b0a861c0308005b865cafa2344c1231c0a4f2bc3", "committedDate": "2022-12-02 13:36:08 +0100", "message": "fix: turn removeOnError into skipOnError DHIS2-14213 (#12457)"}, {"oid": "7ac68b368a1dbd9362973b30f7160399abe801a0", "committedDate": "2022-12-06 09:04:47 +0100", "message": "chore: move ValidationErrorReporter close to its usage (#12486)"}, {"oid": "e64a40be0dc9744a6a9bb33f4239f1f57cd2e02d", "committedDate": "2022-12-14 12:18:54 +0100", "message": "chore: migrate PreCheckMeta/PreCheckMandatoryFields hook to validator (#12550)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg3MTU1Nw==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446871557", "body": "Not sure how to solve it, anyway it make sense to put it as last in the method", "bodyText": "Not sure how to solve it, anyway it make sense to put it as last in the method", "bodyHTML": "<p dir=\"auto\">Not sure how to solve it, anyway it make sense to put it as last in the method</p>", "author": "enricocolasante", "createdAt": "2020-06-29T08:53:19Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/AbstractTrackerDtoValidationHook.java", "diffHunk": "@@ -0,0 +1,323 @@\n+package org.hisp.dhis.tracker.validation.hooks;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import com.vividsolutions.jts.geom.Geometry;\n+import org.apache.commons.lang3.StringUtils;\n+import org.hisp.dhis.common.CodeGenerator;\n+import org.hisp.dhis.common.ValueType;\n+import org.hisp.dhis.organisationunit.FeatureType;\n+import org.hisp.dhis.organisationunit.OrganisationUnit;\n+import org.hisp.dhis.trackedentity.TrackedEntityAttribute;\n+import org.hisp.dhis.trackedentity.TrackedEntityAttributeService;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+import org.hisp.dhis.trackedentitycomment.TrackedEntityCommentService;\n+import org.hisp.dhis.tracker.TrackerImportStrategy;\n+import org.hisp.dhis.tracker.bundle.TrackerBundle;\n+import org.hisp.dhis.tracker.domain.Attribute;\n+import org.hisp.dhis.tracker.domain.Enrollment;\n+import org.hisp.dhis.tracker.domain.Event;\n+import org.hisp.dhis.tracker.domain.Note;\n+import org.hisp.dhis.tracker.domain.TrackedEntity;\n+import org.hisp.dhis.tracker.domain.TrackerDto;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.TrackerErrorReport;\n+import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n+import org.hisp.dhis.tracker.validation.TrackerImportValidationContext;\n+import org.hisp.dhis.tracker.validation.TrackerValidationHook;\n+import org.hisp.dhis.util.DateUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.Ordered;\n+\n+import java.util.Date;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n+import static org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors.ATTRIBUTE_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors.DATE_STRING_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors.GEOMETRY_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors.TRACKED_ENTITY_ATTRIBUTE_CANT_BE_NULL;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+public abstract class AbstractTrackerDtoValidationHook\n+    implements TrackerValidationHook\n+{\n+    private int order = Ordered.LOWEST_PRECEDENCE;\n+\n+    @Override\n+    public int getOrder()\n+    {\n+        return order;\n+    }\n+\n+    public void setOrder( int order )\n+    {\n+        this.order = order;\n+    }\n+\n+    public static final String IMPLEMENTING_CLASS_FAIL_TO_OVERRIDE_THIS_METHOD = \"Implementing class fail to override this method!\";\n+\n+    @Autowired\n+    protected TrackedEntityAttributeService teAttrService;\n+\n+    @Autowired\n+    private TrackedEntityCommentService commentService;\n+\n+    private final TrackerImportStrategy strategy;\n+\n+    private final boolean removeOnError;\n+\n+    private final Class<?> dtoTypeClass;\n+\n+    public AbstractTrackerDtoValidationHook()\n+    {\n+        this.removeOnError = true;\n+        this.dtoTypeClass = null;\n+        this.strategy = null;\n+    }\n+\n+    public <T extends TrackerDto> AbstractTrackerDtoValidationHook( Class<T> dtoClass, TrackerImportStrategy strategy )\n+    {\n+        this.removeOnError = false;\n+        this.dtoTypeClass = dtoClass;\n+        this.strategy = strategy;\n+    }\n+\n+    public void validateEvent( ValidationErrorReporter reporter, Event event )\n+    {\n+        throw new IllegalStateException( IMPLEMENTING_CLASS_FAIL_TO_OVERRIDE_THIS_METHOD );\n+    }\n+\n+    public void validateEnrollment( ValidationErrorReporter reporter, Enrollment enrollment )\n+    {\n+        throw new IllegalStateException( IMPLEMENTING_CLASS_FAIL_TO_OVERRIDE_THIS_METHOD );\n+    }\n+\n+    public void validateTrackedEntity( ValidationErrorReporter reporter, TrackedEntity tei )\n+    {\n+        throw new IllegalStateException( IMPLEMENTING_CLASS_FAIL_TO_OVERRIDE_THIS_METHOD );\n+    }\n+\n+    @Override\n+    public List<TrackerErrorReport> validate( TrackerImportValidationContext context )\n+    {\n+        TrackerBundle bundle = context.getBundle();\n+\n+        ValidationErrorReporter reporter = new ValidationErrorReporter( context, this.getClass() );\n+\n+        if ( this.strategy != null )\n+        {\n+            TrackerImportStrategy importStrategy = bundle.getImportStrategy();\n+\n+            if ( importStrategy.isDelete() && !this.strategy.isDelete() )\n+            {\n+                return reporter.getReportList();\n+            }\n+        }\n+\n+        if ( dtoTypeClass == null || dtoTypeClass.equals( TrackedEntity.class ) )\n+        {\n+            validateTrackerDTOs( reporter, ( o, r ) -> validateTrackedEntity( r, o ),\n+                bundle.getTrackedEntities() );\n+        }\n+\n+        if ( dtoTypeClass == null || dtoTypeClass.equals( Enrollment.class ) )\n+        {\n+            validateTrackerDTOs( reporter, ( o, r ) -> validateEnrollment( r, o ), bundle.getEnrollments() );\n+        }\n+\n+        if ( dtoTypeClass == null || dtoTypeClass.equals( Event.class ) )\n+        {\n+            validateTrackerDTOs( reporter, ( o, r ) -> validateEvent( r, o ), bundle.getEvents() );\n+        }\n+\n+        return reporter.getReportList();\n+    }\n+\n+    public <T extends TrackerDto> void validateTrackerDTOs( ValidationErrorReporter reporter,\n+        ValidationFunction<T> function, List<T> dtoInstances )\n+    {\n+        Iterator<T> iterator = dtoInstances.iterator();\n+\n+        while ( iterator.hasNext() )\n+        {\n+            T dto = iterator.next();\n+\n+            // Fork the report in order to be thread-safe so we can support multi-threaded validation in future.\n+            // Iterator needs to be changed to split variant also...\n+            ValidationErrorReporter reportFork = reporter.fork( dto );\n+\n+            function.validateTrackerDto( dto, reportFork );\n+\n+            if ( this.removeOnError && reportFork.hasErrors() )\n+            {\n+                iterator.remove();\n+            }\n+\n+            reporter.merge( reportFork );\n+        }\n+    }\n+\n+    protected void validateAttrValueType( ValidationErrorReporter errorReporter, Attribute attr,\n+        TrackedEntityAttribute teAttr )\n+    {\n+        Objects.requireNonNull( attr, ATTRIBUTE_CANT_BE_NULL );\n+        Objects.requireNonNull( teAttr, TRACKED_ENTITY_ATTRIBUTE_CANT_BE_NULL );\n+\n+        String error;\n+\n+        // We need to do try/catch here since validateValueType() since validateValueType can cast IllegalArgumentException e.g.\n+        // on at org.joda.time.format.DateTimeFormatter.parseDateTime(DateTimeFormatter.java:945)\n+        try\n+        {\n+            error = teAttrService.validateValueType( teAttr, attr.getValue() );\n+        }\n+        catch ( Exception e )\n+        {\n+            error = e.getMessage();\n+        }\n+\n+        if ( error != null )\n+        {\n+            ValueType valueType = teAttr.getValueType();\n+            errorReporter.addError( newReport( TrackerErrorCode.E1007 )\n+                .addArg( valueType.toString() )\n+                .addArg( error ) );\n+        }\n+    }\n+\n+    protected void validateAttributeUniqueness( ValidationErrorReporter errorReporter,\n+        String value,\n+        TrackedEntityAttribute trackedEntityAttribute,\n+        TrackedEntityInstance trackedEntityInstanceUid,\n+        OrganisationUnit organisationUnit )\n+    {\n+        Objects.requireNonNull( trackedEntityAttribute, TRACKED_ENTITY_ATTRIBUTE_CANT_BE_NULL );\n+\n+        if ( Boolean.FALSE.equals( trackedEntityAttribute.isUnique() ) )\n+            return;\n+\n+        String error = teAttrService.validateAttributeUniquenessWithinScope(\n+            trackedEntityAttribute,\n+            value,\n+            trackedEntityInstanceUid,\n+            organisationUnit );\n+\n+        if ( error != null )\n+        {\n+            errorReporter.addError( newReport( TrackerErrorCode.E1064 )\n+                .addArg( error ) );\n+        }\n+    }\n+\n+    protected void validateGeometry( ValidationErrorReporter errorReporter, Geometry geometry, FeatureType featureType )\n+    {\n+        Objects.requireNonNull( geometry, GEOMETRY_CANT_BE_NULL );\n+\n+        if ( featureType == null )\n+        {\n+            errorReporter.addError( newReport( TrackerErrorCode.E1074 ) );\n+            return;\n+        }\n+\n+        FeatureType typeFromName = FeatureType.getTypeFromName( geometry.getGeometryType() );\n+\n+        if ( FeatureType.NONE == featureType || featureType != typeFromName )\n+        {\n+            errorReporter.addError( newReport( TrackerErrorCode.E1012 )\n+                .addArg( featureType.name() ) );\n+        }\n+    }\n+\n+    protected void validateNotes( ValidationErrorReporter reporter, TrackerImportStrategy strategy, List<Note> notes )\n+    {\n+        for ( Note note : notes )\n+        {\n+            boolean validUid = CodeGenerator.isValidUid( note.getNote() );\n+            if ( !validUid )\n+            {\n+                reporter.addError( newReport( TrackerErrorCode.E1118 )\n+                    .addArg( note.toString() ) );\n+            }\n+\n+            if ( strategy.isCreate() )\n+            {\n+                //TODO: This looks like a potential performance killer, existence check on every note...", "originalCommit": "12bd589850367af9ce124e78ea519bd7842cb3c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI1ODc5OA==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r448258798", "bodyText": "If we are checking DB for existance, that implies the data already exists, so we can probably fetch these in the preheater.\nI think it's ok to leave it as is for this PR, but we should move this to preheater after.", "author": "stian-sandvold", "createdAt": "2020-07-01T10:07:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg3MTU1Nw=="}], "type": "inlineReview", "revised_code": {"commit": "a6afb3aa2bbf5634d26be17ddf74f1ddd4630493", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/AbstractTrackerDtoValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/AbstractTrackerDtoValidationHook.java\nindex 79393c3fc5..25176cdbb6 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/AbstractTrackerDtoValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/AbstractTrackerDtoValidationHook.java\n", "chunk": "@@ -263,24 +304,9 @@ public abstract class AbstractTrackerDtoValidationHook\n     {\n         for ( Note note : notes )\n         {\n-            boolean validUid = CodeGenerator.isValidUid( note.getNote() );\n-            if ( !validUid )\n-            {\n-                reporter.addError( newReport( TrackerErrorCode.E1118 )\n-                    .addArg( note.toString() ) );\n-            }\n+            validateUid( reporter, note );\n \n-            if ( strategy.isCreate() )\n-            {\n-                //TODO: This looks like a potential performance killer, existence check on every note...\n-                //TODO: Note persistence not impl. yet.\n-                boolean alreadyExists = commentService.trackedEntityCommentExists( note.getNote() );\n-                if ( alreadyExists )\n-                {\n-                    reporter.addError( newReport( TrackerErrorCode.E1120 )\n-                        .addArg( note.toString() ) );\n-                }\n-            }\n+            validateUniqueness( reporter, strategy, note );\n \n             boolean emptyValue = StringUtils.isEmpty( note.getValue() );\n             if ( emptyValue )\n", "next_change": null}]}, "revised_code_in_main": {"commit": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/AbstractTrackerDtoValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/AbstractTrackerDtoValidationHook.java\nindex 79393c3fc5..50e7d4ec43 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/AbstractTrackerDtoValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/AbstractTrackerDtoValidationHook.java\n", "chunk": "@@ -263,24 +326,9 @@ public abstract class AbstractTrackerDtoValidationHook\n     {\n         for ( Note note : notes )\n         {\n-            boolean validUid = CodeGenerator.isValidUid( note.getNote() );\n-            if ( !validUid )\n-            {\n-                reporter.addError( newReport( TrackerErrorCode.E1118 )\n-                    .addArg( note.toString() ) );\n-            }\n+            validateUid( reporter, note );\n \n-            if ( strategy.isCreate() )\n-            {\n-                //TODO: This looks like a potential performance killer, existence check on every note...\n-                //TODO: Note persistence not impl. yet.\n-                boolean alreadyExists = commentService.trackedEntityCommentExists( note.getNote() );\n-                if ( alreadyExists )\n-                {\n-                    reporter.addError( newReport( TrackerErrorCode.E1120 )\n-                        .addArg( note.toString() ) );\n-                }\n-            }\n+            validateUniqueness( reporter, strategy, note );\n \n             boolean emptyValue = StringUtils.isEmpty( note.getValue() );\n             if ( emptyValue )\n", "next_change": {"commit": "3e3dc98d92f0c13fb56cf17894eab06a78842133", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/AbstractTrackerDtoValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/AbstractTrackerDtoValidationHook.java\nindex 50e7d4ec43..3eea728f05 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/AbstractTrackerDtoValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/AbstractTrackerDtoValidationHook.java\n", "chunk": "@@ -322,71 +308,6 @@ public abstract class AbstractTrackerDtoValidationHook\n         }\n     }\n \n-    protected void validateNotes( ValidationErrorReporter reporter, TrackerImportStrategy strategy, List<Note> notes )\n-    {\n-        for ( Note note : notes )\n-        {\n-            validateUid( reporter, note );\n-\n-            validateUniqueness( reporter, strategy, note );\n-\n-            boolean emptyValue = StringUtils.isEmpty( note.getValue() );\n-            if ( emptyValue )\n-            {\n-                reporter.addError( newReport( TrackerErrorCode.E1119 )\n-                    .addArg( note.toString() ) );\n-            }\n-\n-            validateStoredDate( reporter, note );\n-        }\n-    }\n-\n-    private void validateStoredDate( ValidationErrorReporter reporter, Note note )\n-    {\n-        Date stored = null;\n-        Exception error = null;\n-        try\n-        {\n-            stored = DateUtils.parseDate( note.getStoredAt() );\n-        }\n-        catch ( Exception e )\n-        {\n-            error = e;\n-        }\n-        if ( stored == null )\n-        {\n-            reporter.addError( newReport( TrackerErrorCode.E1121 )\n-                .addArg( note.toString() )\n-                .addArg( error != null ? error.getMessage() : \"\" )\n-            );\n-        }\n-    }\n-\n-    private void validateUniqueness( ValidationErrorReporter reporter, TrackerImportStrategy strategy, Note note )\n-    {\n-        if ( strategy.isCreate() )\n-        {\n-            //TODO: This looks like a potential performance killer, existence check on every note...\n-            //TODO: Note persistence not impl. yet.\n-            boolean alreadyExists = commentService.trackedEntityCommentExists( note.getNote() );\n-            if ( alreadyExists )\n-            {\n-                reporter.addError( newReport( TrackerErrorCode.E1120 )\n-                    .addArg( note.toString() ) );\n-            }\n-        }\n-    }\n-\n-    private void validateUid( ValidationErrorReporter reporter, Note note )\n-    {\n-        boolean validUid = CodeGenerator.isValidUid( note.getNote() );\n-        if ( !validUid )\n-        {\n-            reporter.addError( newReport( TrackerErrorCode.E1118 )\n-                .addArg( note.toString() ) );\n-        }\n-    }\n-\n     public boolean isNotValidDateString( String dateString )\n     {\n         checkNotNull( dateString, DATE_STRING_CANT_BE_NULL );\n", "next_change": {"commit": "3e3b32e56ff5554a0095396eddffceac65b6b8de", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/AbstractTrackerDtoValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/AbstractTrackerDtoValidationHook.java\nindex 3eea728f05..8d55415672 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/AbstractTrackerDtoValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/AbstractTrackerDtoValidationHook.java\n", "chunk": "@@ -303,8 +334,7 @@ public abstract class AbstractTrackerDtoValidationHook\n \n         if ( FeatureType.NONE == featureType || featureType != typeFromName )\n         {\n-            errorReporter.addError( newReport( TrackerErrorCode.E1012 )\n-                .addArg( featureType.name() ) );\n+            addError( errorReporter, E1012, featureType.name() );\n         }\n     }\n \n", "next_change": {"commit": "0bf55d776481f6511e5f9ebca5de1f2cf79777c0", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/AbstractTrackerDtoValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/AbstractTrackerDtoValidationHook.java\nindex 8d55415672..bfbf1b820c 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/AbstractTrackerDtoValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/AbstractTrackerDtoValidationHook.java\n", "chunk": "@@ -175,166 +179,94 @@ public abstract class AbstractTrackerDtoValidationHook\n     {\n         TrackerBundle bundle = context.getBundle();\n \n-        ValidationErrorReporter reporter = new ValidationErrorReporter( context, this.getClass() );\n+        ValidationErrorReporter rootReporter = ValidationErrorReporter.emptyReporter();\n \n         // If this hook impl. has no strategy set, i.e. (strategy == null)\n         // it implies it is for all strategies; create/update/delete\n         if ( this.strategy != null )\n         {\n             TrackerImportStrategy importStrategy = bundle.getImportStrategy();\n-            // If there is a strategy set and it is not delete and the importing strategy is delete,\n+            // If there is a strategy set and it is not delete and the importing strategy is\n+            // delete,\n             // just return as there is nothing to validate.\n             if ( importStrategy.isDelete() && !this.strategy.isDelete() )\n             {\n-                return reporter;\n+                return rootReporter;\n             }\n         }\n \n-        // @formatter:off\n-        // Setup all the mapping between validation methods and entity lists and dto classes.\n-        Map<Class<? extends TrackerDto>,\n-            Pair<ValidationFunction<TrackerDto>,\n-                List<? extends TrackerDto>>> allValidations = ImmutableMap.of(\n-            TrackedEntity.class, Pair.of( ( o, r ) ->\n-                validateTrackedEntity( r, (TrackedEntity) o ), bundle.getTrackedEntities() ),\n-            Enrollment.class, Pair.of( ( o, r ) ->\n-                validateEnrollment( r, (Enrollment) o ), bundle.getEnrollments() ),\n-            Event.class, Pair.of( ( o, r ) ->\n-                validateEvent( r, (Event) o ), bundle.getEvents() ),\n-            Relationship.class, Pair.of( ( o, r ) -> \n-                validateRelationship( r, (Relationship) o ), bundle.getRelationships() ) );\n-        // @formatter:on\n-\n-        // If no dtoTypeClass is set, we will validate all types of entities in bundle\n-        // i.e. that impl. hook is meant for all types.\n-        if ( dtoTypeClass == null )\n-        {\n-            allValidations.forEach( ( dtoClass, validationMethod ) ->\n-            reporter.addDtosWithErrors( validateTrackerDTOs( reporter, validationMethod ) ) );\n-        }\n-        else\n-        {\n-            // If not dtoTypeClass == null, this hook class is run for one specific dto class only\n-            reporter.addDtosWithErrors( validateTrackerDTOs( reporter, allValidations.get( dtoTypeClass ) ) );\n-        }\n+        /*\n+         * Validate the bundle, by passing each Tracker entities collection to the\n+         * validation hooks. If a validation hook reports errors and has\n+         * 'removeOnError=true' the Tracker entity under validation will be removed from\n+         * the bundle.\n+         */\n \n-        return reporter;\n+        validateTrackedEntities( bundle, rootReporter, context );\n+        validateEnrollments( bundle, rootReporter, context );\n+        validateEvents( bundle, rootReporter, context );\n+        validateRelationships( bundle, rootReporter, context );\n+\n+        return rootReporter;\n     }\n \n-    private List<TrackerDto> validateTrackerDTOs( ValidationErrorReporter reporter,\n-        Pair<ValidationFunction<TrackerDto>, List<? extends TrackerDto>> pair )\n+    private void validateTrackedEntities( TrackerBundle bundle, ValidationErrorReporter rootReporter,\n+        TrackerImportValidationContext context )\n     {\n-        List<TrackerDto> dtoWithErrors = Lists.newArrayList();\n-\n-        Iterator<? extends TrackerDto> iterator = pair.getRight().iterator();\n-\n-        while ( iterator.hasNext() )\n+        Iterator<TrackedEntity> iter = bundle.getTrackedEntities().iterator();\n+        while ( iter.hasNext() )\n         {\n-            TrackerDto dto = iterator.next();\n-\n-            // Fork the report in order to be thread-safe so we can support multi-threaded validation in future.\n-            // Iterator needs to be changed to split variant also...\n-            ValidationErrorReporter reportFork = reporter.fork( dto );\n-\n-            pair.getLeft().validateTrackerDto( dto, reportFork );\n-\n-            // Remove entity that failed validation from the list, i.e. it\n-            // will not be validated on next hook since it has already failed and can't be used for next \"level\" of hooks.\n-            // This feature is used in the prehooks.\n-            if ( this.removeOnError && reportFork.hasErrors() )\n+            TrackedEntity tei = iter.next();\n+            rootReporter.merge( validateTrackedEntity( rootReporter.getInvalidDTOs(), context, tei ) );\n+            if ( removeOnError() && rootReporter.isInvalid( TrackerType.TRACKED_ENTITY, tei.getTrackedEntity() ) )\n             {\n-                dtoWithErrors.add( dto );\n-                iterator.remove();\n+                iter.remove();\n             }\n-\n-            reporter.merge( reportFork );\n         }\n-        return dtoWithErrors;\n     }\n \n-    protected void validateAttrValueType( ValidationErrorReporter errorReporter, Attribute attr,\n-        TrackedEntityAttribute teAttr )\n+    private void validateEnrollments( TrackerBundle bundle, ValidationErrorReporter rootReporter,\n+        TrackerImportValidationContext context )\n     {\n-        checkNotNull( attr, ATTRIBUTE_CANT_BE_NULL );\n-        checkNotNull( attr, ATTRIBUTE_CANT_BE_NULL );\n-        checkNotNull( teAttr, TRACKED_ENTITY_ATTRIBUTE_CANT_BE_NULL );\n-\n-        String error;\n-\n-        // We need to do try/catch here since validateValueType() since validateValueType can cast IllegalArgumentException e.g.\n-        // on at org.joda.time.format.DateTimeFormatter.parseDateTime(DateTimeFormatter.java:945)\n-        try\n-        {\n-            error = teAttrService.validateValueType( teAttr, attr.getValue() );\n-        }\n-        catch ( Exception e )\n+        Iterator<Enrollment> iterPs = bundle.getEnrollments().iterator();\n+        while ( iterPs.hasNext() )\n         {\n-            error = e.getMessage();\n-        }\n-\n-        if ( error != null )\n-        {\n-            ValueType valueType = teAttr.getValueType();\n-            errorReporter.addError( newReport( TrackerErrorCode.E1007 )\n-                .addArg( valueType.toString() )\n-                .addArg( error ) );\n+            Enrollment ps = iterPs.next();\n+            rootReporter.merge( validateEnrollment( rootReporter.getInvalidDTOs(), context, ps ) );\n+            if ( removeOnError() && rootReporter.isInvalid( TrackerType.ENROLLMENT, ps.getEnrollment() ) )\n+            {\n+                iterPs.remove();\n+            }\n         }\n     }\n \n-    protected void validateAttributeUniqueness( ValidationErrorReporter errorReporter,\n-        String value,\n-        TrackedEntityAttribute trackedEntityAttribute,\n-        TrackedEntityInstance trackedEntityInstance,\n-        OrganisationUnit organisationUnit )\n+    private void validateEvents( TrackerBundle bundle, ValidationErrorReporter rootReporter,\n+        TrackerImportValidationContext context )\n     {\n-        checkNotNull( trackedEntityAttribute, TRACKED_ENTITY_ATTRIBUTE_CANT_BE_NULL );\n-\n-        if ( Boolean.FALSE.equals( trackedEntityAttribute.isUnique() ) )\n-            return;\n-\n-        List<UniqueAttributeValue> uniqueAttributeValues = errorReporter\n-            .getValidationContext().getBundle().getPreheat().getUniqueAttributeValues();\n-\n-        for ( UniqueAttributeValue uniqueAttributeValue : uniqueAttributeValues )\n+        Iterator<Event> iterPsi = bundle.getEvents().iterator();\n+        while ( iterPsi.hasNext() )\n         {\n-            boolean isTeaUniqueInOrgUnitScope = !trackedEntityAttribute.getOrgunitScope()\n-                || Objects.equals( organisationUnit.getUid(), uniqueAttributeValue.getOrgUnitId() );\n-\n-            boolean isTheSameTea = Objects.equals( uniqueAttributeValue.getAttributeUid(),\n-                trackedEntityAttribute.getUid() );\n-            boolean hasTheSameValue = Objects.equals( uniqueAttributeValue.getValue(), value );\n-            boolean isNotSameTei = trackedEntityInstance == null\n-                || !Objects.equals( trackedEntityInstance.getUid(),\n-                    uniqueAttributeValue.getTeiUid() );\n-\n-            if ( isTeaUniqueInOrgUnitScope\n-                && isTheSameTea\n-                && hasTheSameValue\n-                && isNotSameTei )\n+            Event psi = iterPsi.next();\n+            rootReporter.merge( validateEvent( rootReporter.getInvalidDTOs(), context, psi ) );\n+            if ( removeOnError() && rootReporter.isInvalid( TrackerType.EVENT, psi.getEvent() ) )\n             {\n-                errorReporter.addError( newReport( TrackerErrorCode.E1064 )\n-                    .addArg( value )\n-                    .addArg( trackedEntityAttribute.getUid() ) );\n-                return;\n+                iterPsi.remove();\n             }\n         }\n     }\n \n-    protected void validateGeometry( ValidationErrorReporter errorReporter, Geometry geometry, FeatureType featureType )\n+    private void validateRelationships( TrackerBundle bundle, ValidationErrorReporter rootReporter,\n+        TrackerImportValidationContext context )\n     {\n-        checkNotNull( geometry, GEOMETRY_CANT_BE_NULL );\n-\n-        if ( featureType == null )\n+        Iterator<Relationship> iterRel = bundle.getRelationships().iterator();\n+        while ( iterRel.hasNext() )\n         {\n-            errorReporter.addError( newReport( TrackerErrorCode.E1074 ) );\n-            return;\n-        }\n-\n-        FeatureType typeFromName = FeatureType.getTypeFromName( geometry.getGeometryType() );\n-\n-        if ( FeatureType.NONE == featureType || featureType != typeFromName )\n-        {\n-            addError( errorReporter, E1012, featureType.name() );\n+            Relationship rel = iterRel.next();\n+            rootReporter.merge( validateRelationship( rootReporter.getInvalidDTOs(), context, rel ) );\n+            if ( removeOnError() && rootReporter.isInvalid( TrackerType.RELATIONSHIP, rel.getRelationship() ) )\n+            {\n+                iterRel.remove();\n+            }\n         }\n     }\n \n", "next_change": {"commit": "338a47b053533e7c4021c3be94852d5b29e79a19", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/AbstractTrackerDtoValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/AbstractTrackerDtoValidationHook.java\nindex bfbf1b820c..f2440c1808 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/AbstractTrackerDtoValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/AbstractTrackerDtoValidationHook.java\n", "chunk": "@@ -202,68 +200,72 @@ public abstract class AbstractTrackerDtoValidationHook\n          * the bundle.\n          */\n \n-        validateTrackedEntities( bundle, rootReporter, context );\n-        validateEnrollments( bundle, rootReporter, context );\n-        validateEvents( bundle, rootReporter, context );\n-        validateRelationships( bundle, rootReporter, context );\n+        validateTrackedEntities( bundle, context );\n+        validateEnrollments( bundle, context );\n+        validateEvents( bundle, context );\n+        validateRelationships( bundle, context );\n \n         return rootReporter;\n     }\n \n-    private void validateTrackedEntities( TrackerBundle bundle, ValidationErrorReporter rootReporter,\n+    private void validateTrackedEntities( TrackerBundle bundle,\n         TrackerImportValidationContext context )\n     {\n         Iterator<TrackedEntity> iter = bundle.getTrackedEntities().iterator();\n         while ( iter.hasNext() )\n         {\n             TrackedEntity tei = iter.next();\n-            rootReporter.merge( validateTrackedEntity( rootReporter.getInvalidDTOs(), context, tei ) );\n-            if ( removeOnError() && rootReporter.isInvalid( TrackerType.TRACKED_ENTITY, tei.getTrackedEntity() ) )\n+            final ValidationErrorReporter reporter = validateTrackedEntity( context, tei );\n+            context.getRootReporter().merge( reporter );\n+            if ( removeOnError() && didNotPassValidation( reporter, tei.getTrackedEntity() ) )\n             {\n                 iter.remove();\n             }\n         }\n     }\n-\n-    private void validateEnrollments( TrackerBundle bundle, ValidationErrorReporter rootReporter,\n+    \n+    private void validateEnrollments( TrackerBundle bundle,\n         TrackerImportValidationContext context )\n     {\n         Iterator<Enrollment> iterPs = bundle.getEnrollments().iterator();\n         while ( iterPs.hasNext() )\n         {\n             Enrollment ps = iterPs.next();\n-            rootReporter.merge( validateEnrollment( rootReporter.getInvalidDTOs(), context, ps ) );\n-            if ( removeOnError() && rootReporter.isInvalid( TrackerType.ENROLLMENT, ps.getEnrollment() ) )\n+            final ValidationErrorReporter reporter = validateEnrollment(context, ps);\n+            context.getRootReporter().merge( reporter );\n+            if ( removeOnError() && didNotPassValidation( reporter, ps.getEnrollment() ) )\n             {\n                 iterPs.remove();\n             }\n         }\n     }\n \n-    private void validateEvents( TrackerBundle bundle, ValidationErrorReporter rootReporter,\n+    private void validateEvents( TrackerBundle bundle,\n         TrackerImportValidationContext context )\n     {\n         Iterator<Event> iterPsi = bundle.getEvents().iterator();\n         while ( iterPsi.hasNext() )\n         {\n             Event psi = iterPsi.next();\n-            rootReporter.merge( validateEvent( rootReporter.getInvalidDTOs(), context, psi ) );\n-            if ( removeOnError() && rootReporter.isInvalid( TrackerType.EVENT, psi.getEvent() ) )\n+            final ValidationErrorReporter reporter = validateEvent( context, psi );\n+            context.getRootReporter().merge( reporter );\n+            if ( removeOnError() && didNotPassValidation( reporter, psi.getEvent() ) )\n             {\n                 iterPsi.remove();\n             }\n         }\n     }\n \n-    private void validateRelationships( TrackerBundle bundle, ValidationErrorReporter rootReporter,\n+    private void validateRelationships( TrackerBundle bundle,\n         TrackerImportValidationContext context )\n     {\n         Iterator<Relationship> iterRel = bundle.getRelationships().iterator();\n         while ( iterRel.hasNext() )\n         {\n             Relationship rel = iterRel.next();\n-            rootReporter.merge( validateRelationship( rootReporter.getInvalidDTOs(), context, rel ) );\n-            if ( removeOnError() && rootReporter.isInvalid( TrackerType.RELATIONSHIP, rel.getRelationship() ) )\n+            final ValidationErrorReporter reporter = validateRelationship( context, rel );\n+            context.getRootReporter().merge( reporter );\n+            if ( removeOnError() && didNotPassValidation( reporter, rel.getRelationship() ) )\n             {\n                 iterRel.remove();\n             }\n", "next_change": {"commit": "20dfefe359779d7e1c1921ba920465227e72f071", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/AbstractTrackerDtoValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/AbstractTrackerDtoValidationHook.java\nindex f2440c1808..a774e92e65 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/AbstractTrackerDtoValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/AbstractTrackerDtoValidationHook.java\n", "chunk": "@@ -177,99 +155,47 @@ public abstract class AbstractTrackerDtoValidationHook\n     {\n         TrackerBundle bundle = context.getBundle();\n \n-        ValidationErrorReporter rootReporter = context.getRootReporter();\n-\n-        // If this hook impl. has no strategy set, i.e. (strategy == null)\n-        // it implies it is for all strategies; create/update/delete\n-        if ( this.strategy != null )\n-        {\n-            TrackerImportStrategy importStrategy = bundle.getImportStrategy();\n-            // If there is a strategy set and it is not delete and the importing strategy is\n-            // delete,\n-            // just return as there is nothing to validate.\n-            if ( importStrategy.isDelete() && !this.strategy.isDelete() )\n-            {\n-                return rootReporter;\n-            }\n-        }\n-\n         /*\n-         * Validate the bundle, by passing each Tracker entities collection to the\n-         * validation hooks. If a validation hook reports errors and has\n-         * 'removeOnError=true' the Tracker entity under validation will be removed from\n-         * the bundle.\n+         * Validate the bundle, by passing each Tracker entities collection to\n+         * the validation hooks. If a validation hook reports errors and has\n+         * 'removeOnError=true' the Tracker entity under validation will be\n+         * removed from the bundle.\n          */\n \n-        validateTrackedEntities( bundle, context );\n-        validateEnrollments( bundle, context );\n-        validateEvents( bundle, context );\n-        validateRelationships( bundle, context );\n+        validateTrackerDtos( context, bundle.getTrackedEntities(), TrackerType.TRACKED_ENTITY );\n+        validateTrackerDtos( context, bundle.getEnrollments(), TrackerType.ENROLLMENT );\n+        validateTrackerDtos( context, bundle.getEvents(), TrackerType.EVENT );\n+        validateTrackerDtos( context, bundle.getRelationships(), TrackerType.RELATIONSHIP );\n \n-        return rootReporter;\n+        return context.getRootReporter();\n     }\n \n-    private void validateTrackedEntities( TrackerBundle bundle,\n-        TrackerImportValidationContext context )\n+    private void validateTrackerDtos( TrackerImportValidationContext context, List<? extends TrackerDto> dtos,\n+        TrackerType trackerType )\n     {\n-        Iterator<TrackedEntity> iter = bundle.getTrackedEntities().iterator();\n+        Iterator<? extends TrackerDto> iter = dtos.iterator();\n         while ( iter.hasNext() )\n         {\n-            TrackedEntity tei = iter.next();\n-            final ValidationErrorReporter reporter = validateTrackedEntity( context, tei );\n-            context.getRootReporter().merge( reporter );\n-            if ( removeOnError() && didNotPassValidation( reporter, tei.getTrackedEntity() ) )\n-            {\n-                iter.remove();\n-            }\n-        }\n-    }\n-    \n-    private void validateEnrollments( TrackerBundle bundle,\n-        TrackerImportValidationContext context )\n-    {\n-        Iterator<Enrollment> iterPs = bundle.getEnrollments().iterator();\n-        while ( iterPs.hasNext() )\n-        {\n-            Enrollment ps = iterPs.next();\n-            final ValidationErrorReporter reporter = validateEnrollment(context, ps);\n-            context.getRootReporter().merge( reporter );\n-            if ( removeOnError() && didNotPassValidation( reporter, ps.getEnrollment() ) )\n-            {\n-                iterPs.remove();\n-            }\n-        }\n-    }\n-\n-    private void validateEvents( TrackerBundle bundle,\n-        TrackerImportValidationContext context )\n-    {\n-        Iterator<Event> iterPsi = bundle.getEvents().iterator();\n-        while ( iterPsi.hasNext() )\n-        {\n-            Event psi = iterPsi.next();\n-            final ValidationErrorReporter reporter = validateEvent( context, psi );\n-            context.getRootReporter().merge( reporter );\n-            if ( removeOnError() && didNotPassValidation( reporter, psi.getEvent() ) )\n+            TrackerDto dto = iter.next();\n+            if ( needsToRun( context.getStrategy( dto, trackerType ) ) )\n             {\n-                iterPsi.remove();\n+                final ValidationErrorReporter reporter = validateTrackerDto( context, dto, trackerType );\n+                context.getRootReporter().merge( reporter );\n+                if ( removeOnError() && didNotPassValidation( reporter, dto.getUid() ) )\n+                {\n+                    iter.remove();\n+                }\n             }\n         }\n     }\n \n-    private void validateRelationships( TrackerBundle bundle,\n-        TrackerImportValidationContext context )\n+    private ValidationErrorReporter validateTrackerDto(\n+        TrackerImportValidationContext context, TrackerDto dto, TrackerType trackerType )\n     {\n-        Iterator<Relationship> iterRel = bundle.getRelationships().iterator();\n-        while ( iterRel.hasNext() )\n-        {\n-            Relationship rel = iterRel.next();\n-            final ValidationErrorReporter reporter = validateRelationship( context, rel );\n-            context.getRootReporter().merge( reporter );\n-            if ( removeOnError() && didNotPassValidation( reporter, rel.getRelationship() ) )\n-            {\n-                iterRel.remove();\n-            }\n-        }\n+        ValidationErrorReporter reporter = new ValidationErrorReporter( context, dto, trackerType );\n+        reporter.getInvalidDTOs().putAll( context.getRootReporter().getInvalidDTOs() );\n+        validationMap.get( trackerType ).accept( reporter, dto );\n+        return reporter;\n     }\n \n     public boolean isNotValidDateString( String dateString )\n", "next_change": {"commit": "fe04922e144ac69367a99840d5518edda2d67f38", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/AbstractTrackerDtoValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/AbstractTrackerDtoValidationHook.java\nindex a774e92e65..5ed86efb19 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/AbstractTrackerDtoValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/AbstractTrackerDtoValidationHook.java\n", "chunk": "@@ -190,11 +189,11 @@ public abstract class AbstractTrackerDtoValidationHook\n     }\n \n     private ValidationErrorReporter validateTrackerDto(\n-        TrackerImportValidationContext context, TrackerDto dto, TrackerType trackerType )\n+        TrackerImportValidationContext context, TrackerDto dto )\n     {\n-        ValidationErrorReporter reporter = new ValidationErrorReporter( context, dto, trackerType );\n+        ValidationErrorReporter reporter = new ValidationErrorReporter( context, dto, dto.getTrackerType() );\n         reporter.getInvalidDTOs().putAll( context.getRootReporter().getInvalidDTOs() );\n-        validationMap.get( trackerType ).accept( reporter, dto );\n+        validationMap.get( dto.getTrackerType() ).accept( reporter, dto );\n         return reporter;\n     }\n \n", "next_change": {"commit": "8bd63f9823397e39458bd1cdab383c33c3231019", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/AbstractTrackerDtoValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/AbstractTrackerDtoValidationHook.java\nindex 5ed86efb19..60d034e8c4 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/AbstractTrackerDtoValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/AbstractTrackerDtoValidationHook.java\n", "chunk": "@@ -197,13 +187,6 @@ public abstract class AbstractTrackerDtoValidationHook\n         return reporter;\n     }\n \n-    public boolean isNotValidDateString( String dateString )\n-    {\n-        checkNotNull( dateString, DATE_STRING_CANT_BE_NULL );\n-\n-        return !DateUtils.dateIsValid( dateString );\n-    }\n-\n     protected void addError( ValidationErrorReporter report, TrackerErrorCode errorCode, Object... args )\n     {\n         report.addError( newReport( errorCode ).addArgs( args ) );\n", "next_change": {"commit": "97fa18701761c6993e20f2e7a3816ea689129480", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/AbstractTrackerDtoValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/AbstractTrackerDtoValidationHook.java\nindex 60d034e8c4..18a097dadd 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/AbstractTrackerDtoValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/AbstractTrackerDtoValidationHook.java\n", "chunk": "@@ -178,40 +175,46 @@ public abstract class AbstractTrackerDtoValidationHook\n         }\n     }\n \n-    private ValidationErrorReporter validateTrackerDto(\n-        TrackerImportValidationContext context, TrackerDto dto )\n-    {\n-        ValidationErrorReporter reporter = new ValidationErrorReporter( context, dto, dto.getTrackerType() );\n-        reporter.getInvalidDTOs().putAll( context.getRootReporter().getInvalidDTOs() );\n-        validationMap.get( dto.getTrackerType() ).accept( reporter, dto );\n-        return reporter;\n-    }\n-\n-    protected void addError( ValidationErrorReporter report, TrackerErrorCode errorCode, Object... args )\n+    protected void addError( ValidationErrorReporter report, TrackerDto dto, TrackerErrorCode code,\n+        Object... args )\n     {\n-        report.addError( newReport( errorCode ).addArgs( args ) );\n+        TrackerErrorReport error = TrackerErrorReport.builder()\n+            .uid( dto.getUid() )\n+            .trackerType( dto.getTrackerType() )\n+            .errorCode( code )\n+            .addArgs( args )\n+            .build( report.getValidationContext().getBundle() );\n+        report.addError( error );\n     }\n \n-    protected void addWarning( ValidationErrorReporter report, TrackerErrorCode errorCode, Object... args )\n+    protected void addWarning( ValidationErrorReporter report, TrackerDto dto, TrackerErrorCode code,\n+        Object... args )\n     {\n-        report.addWarning( newWarningReport( errorCode ).addArgs( args ) );\n+        TrackerWarningReport warn = TrackerWarningReport.builder()\n+            .uid( dto.getUid() )\n+            .trackerType( dto.getTrackerType() )\n+            .warningCode( code )\n+            .addArgs( args )\n+            .build( report.getValidationContext().getBundle() );\n+        report.addWarning( warn );\n     }\n \n-    protected void addErrorIf( Supplier<Boolean> expression, ValidationErrorReporter report, TrackerErrorCode errorCode,\n-        Object... args )\n+    protected void addErrorIf( Supplier<Boolean> expression, ValidationErrorReporter report, TrackerDto dto,\n+        TrackerErrorCode code, Object... args )\n     {\n         if ( expression.get() )\n         {\n-            addError( report, errorCode, args );\n+            addError( report, dto, code, args );\n         }\n     }\n \n-    protected void addErrorIfNull( Object object, ValidationErrorReporter report, TrackerErrorCode errorCode,\n+    protected void addErrorIfNull( Object object, ValidationErrorReporter report, TrackerDto dto,\n+        TrackerErrorCode code,\n         Object... args )\n     {\n         if ( object == null )\n         {\n-            addError( report, errorCode, args );\n+            addError( report, dto, code, args );\n         }\n     }\n \n", "next_change": {"commit": "1d8350a9e9ac100aaaa831894ba3f857b46e2474", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/AbstractTrackerDtoValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/AbstractTrackerDtoValidationHook.java\nindex 18a097dadd..42e94cd581 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/AbstractTrackerDtoValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/AbstractTrackerDtoValidationHook.java\n", "chunk": "@@ -175,49 +173,6 @@ public abstract class AbstractTrackerDtoValidationHook\n         }\n     }\n \n-    protected void addError( ValidationErrorReporter report, TrackerDto dto, TrackerErrorCode code,\n-        Object... args )\n-    {\n-        TrackerErrorReport error = TrackerErrorReport.builder()\n-            .uid( dto.getUid() )\n-            .trackerType( dto.getTrackerType() )\n-            .errorCode( code )\n-            .addArgs( args )\n-            .build( report.getValidationContext().getBundle() );\n-        report.addError( error );\n-    }\n-\n-    protected void addWarning( ValidationErrorReporter report, TrackerDto dto, TrackerErrorCode code,\n-        Object... args )\n-    {\n-        TrackerWarningReport warn = TrackerWarningReport.builder()\n-            .uid( dto.getUid() )\n-            .trackerType( dto.getTrackerType() )\n-            .warningCode( code )\n-            .addArgs( args )\n-            .build( report.getValidationContext().getBundle() );\n-        report.addWarning( warn );\n-    }\n-\n-    protected void addErrorIf( Supplier<Boolean> expression, ValidationErrorReporter report, TrackerDto dto,\n-        TrackerErrorCode code, Object... args )\n-    {\n-        if ( expression.get() )\n-        {\n-            addError( report, dto, code, args );\n-        }\n-    }\n-\n-    protected void addErrorIfNull( Object object, ValidationErrorReporter report, TrackerDto dto,\n-        TrackerErrorCode code,\n-        Object... args )\n-    {\n-        if ( object == null )\n-        {\n-            addError( report, dto, code, args );\n-        }\n-    }\n-\n     public boolean needsToRun( TrackerImportStrategy strategy )\n     {\n         return strategy != TrackerImportStrategy.DELETE;\n", "next_change": {"commit": "b0a861c0308005b865cafa2344c1231c0a4f2bc3", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/AbstractTrackerDtoValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/AbstractTrackerDtoValidationHook.java\ndeleted file mode 100644\nindex 42e94cd581..0000000000\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/AbstractTrackerDtoValidationHook.java\n+++ /dev/null\n", "chunk": "@@ -1,195 +0,0 @@\n-/*\n- * Copyright (c) 2004-2022, University of Oslo\n- * All rights reserved.\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions are met:\n- * Redistributions of source code must retain the above copyright notice, this\n- * list of conditions and the following disclaimer.\n- *\n- * Redistributions in binary form must reproduce the above copyright notice,\n- * this list of conditions and the following disclaimer in the documentation\n- * and/or other materials provided with the distribution.\n- * Neither the name of the HISP project nor the names of its contributors may\n- * be used to endorse or promote products derived from this software without\n- * specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n- * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n- * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n- * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n- * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n- * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n- * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- */\n-package org.hisp.dhis.tracker.validation.hooks;\n-\n-import static org.hisp.dhis.tracker.report.TrackerErrorCode.E1125;\n-\n-import java.util.Iterator;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Objects;\n-import java.util.Optional;\n-import java.util.function.BiConsumer;\n-import java.util.stream.Collectors;\n-\n-import org.hisp.dhis.common.ValueTypedDimensionalItemObject;\n-import org.hisp.dhis.option.Option;\n-import org.hisp.dhis.tracker.TrackerImportStrategy;\n-import org.hisp.dhis.tracker.TrackerType;\n-import org.hisp.dhis.tracker.bundle.TrackerBundle;\n-import org.hisp.dhis.tracker.domain.Enrollment;\n-import org.hisp.dhis.tracker.domain.Event;\n-import org.hisp.dhis.tracker.domain.Relationship;\n-import org.hisp.dhis.tracker.domain.TrackedEntity;\n-import org.hisp.dhis.tracker.domain.TrackerDto;\n-import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n-import org.hisp.dhis.tracker.validation.TrackerImportValidationContext;\n-import org.hisp.dhis.tracker.validation.TrackerValidationHook;\n-\n-import com.google.common.collect.ImmutableMap;\n-\n-/**\n- * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n- */\n-public abstract class AbstractTrackerDtoValidationHook\n-    implements TrackerValidationHook\n-{\n-    private final Map<TrackerType, BiConsumer<ValidationErrorReporter, TrackerDto>> validationMap = ImmutableMap\n-        .<TrackerType, BiConsumer<ValidationErrorReporter, TrackerDto>> builder()\n-        .put( TrackerType.TRACKED_ENTITY, (( report, dto ) -> validateTrackedEntity( report, (TrackedEntity) dto )) )\n-        .put( TrackerType.ENROLLMENT, (( report, dto ) -> validateEnrollment( report, (Enrollment) dto )) )\n-        .put( TrackerType.EVENT, (( report, dto ) -> validateEvent( report, (Event) dto )) )\n-        .put( TrackerType.RELATIONSHIP, (( report, dto ) -> validateRelationship( report, (Relationship) dto )) )\n-        .build();\n-\n-    /**\n-     * This constructor is used by the PreCheck* hooks\n-     */\n-    public AbstractTrackerDtoValidationHook()\n-    {\n-    }\n-\n-    /**\n-     * Template method Must be implemented if dtoTypeClass == Event or\n-     * dtoTypeClass == null\n-     *\n-     * @param reporter ValidationErrorReporter instance\n-     * @param event entity to validate\n-     */\n-    public void validateEvent( ValidationErrorReporter reporter, Event event )\n-    {\n-    }\n-\n-    /**\n-     * Template method Must be implemented if dtoTypeClass == Enrollment or\n-     * dtoTypeClass == null\n-     *\n-     * @param reporter ValidationErrorReporter instance\n-     * @param enrollment entity to validate\n-     */\n-    public void validateEnrollment( ValidationErrorReporter reporter, Enrollment enrollment )\n-    {\n-    }\n-\n-    /**\n-     * Template method Must be implemented if dtoTypeClass == Relationship or\n-     * dtoTypeClass == null\n-     *\n-     * @param reporter ValidationErrorReporter instance\n-     * @param relationship entity to validate\n-     */\n-    public void validateRelationship( ValidationErrorReporter reporter, Relationship relationship )\n-    {\n-    }\n-\n-    /**\n-     * Template method Must be implemented if dtoTypeClass == TrackedEntity or\n-     * dtoTypeClass == null\n-     *\n-     * @param reporter ValidationErrorReporter instance\n-     * @param tei entity to validate\n-     */\n-    public void validateTrackedEntity( ValidationErrorReporter reporter, TrackedEntity tei )\n-    {\n-    }\n-\n-    protected <T extends ValueTypedDimensionalItemObject> void validateOptionSet( ValidationErrorReporter reporter,\n-        TrackerDto dto,\n-        T optionalObject, String value )\n-    {\n-        Optional.ofNullable( optionalObject.getOptionSet() )\n-            .ifPresent( optionSet -> reporter.addErrorIf(\n-                () -> optionSet.getOptions().stream().filter( Objects::nonNull )\n-                    .noneMatch( o -> o.getCode().equalsIgnoreCase( value ) ),\n-                dto, E1125, value,\n-                optionalObject.getUid(), optionalObject.getClass().getSimpleName(),\n-                optionalObject.getOptionSet().getOptions().stream().filter( Objects::nonNull ).map( Option::getCode )\n-                    .collect( Collectors.joining( \",\" ) ) ) );\n-    }\n-\n-    /**\n-     * Delegating validate method, this delegates validation to the different\n-     * implementing hooks.\n-     *\n-     * @param context validation context\n-     */\n-    @Override\n-    public void validate( ValidationErrorReporter reporter, TrackerImportValidationContext context )\n-    {\n-        TrackerBundle bundle = context.getBundle();\n-        /*\n-         * Validate the bundle, by passing each Tracker entities collection to\n-         * the validation hooks. If a validation hook reports errors and has\n-         * 'removeOnError=true' the Tracker entity under validation will be\n-         * removed from the bundle.\n-         */\n-\n-        validateTrackerDtos( reporter, context, bundle.getTrackedEntities() );\n-        validateTrackerDtos( reporter, context, bundle.getEnrollments() );\n-        validateTrackerDtos( reporter, context, bundle.getEvents() );\n-        validateTrackerDtos( reporter, context, bundle.getRelationships() );\n-    }\n-\n-    private void validateTrackerDtos( ValidationErrorReporter reporter, TrackerImportValidationContext context,\n-        List<? extends TrackerDto> dtos )\n-    {\n-        Iterator<? extends TrackerDto> iter = dtos.iterator();\n-        while ( iter.hasNext() )\n-        {\n-            TrackerDto dto = iter.next();\n-            if ( needsToRun( context.getStrategy( dto ) ) )\n-            {\n-                validationMap.get( dto.getTrackerType() ).accept( reporter, dto );\n-                if ( removeOnError() && didNotPassValidation( reporter, dto.getUid() ) )\n-                {\n-                    iter.remove();\n-                }\n-            }\n-        }\n-    }\n-\n-    public boolean needsToRun( TrackerImportStrategy strategy )\n-    {\n-        return strategy != TrackerImportStrategy.DELETE;\n-    }\n-\n-    /**\n-     * Signal the implementing Validator hook that, upon validation error, the\n-     * Tracker entity under validation must be removed from the payload.\n-     *\n-     */\n-    public boolean removeOnError()\n-    {\n-        return false;\n-    }\n-\n-    private boolean didNotPassValidation( ValidationErrorReporter reporter, String uid )\n-    {\n-        return reporter.getReportList().stream().anyMatch( r -> r.getUid().equals( uid ) );\n-    }\n-}\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "message": "Merge commit", "committedDate": null}, {"oid": "3e3dc98d92f0c13fb56cf17894eab06a78842133", "committedDate": "2020-08-04 17:20:37 +0200", "message": "feat: Enrollment/Events note persistence"}, {"oid": "1ceec15f31457e6ac040081480a9c909a9790c3c", "committedDate": "2020-08-13 15:26:03 +0200", "message": "Fix conflicts with new validation strategy"}, {"oid": "75a02d90ed737ca75d65881e38f2ed1c5f047d45", "committedDate": "2020-08-18 13:38:25 +0200", "message": "[DHIS2-7310] Add support for warnings in error reports"}, {"oid": "b010ab69f5dfb7b5ea0a5cfd438c1d7ebf3275de", "committedDate": "2020-08-24 14:13:32 +0200", "message": "fix: Implement atomic mode OBJECTS to commit only valid DTOs (#5958)"}, {"oid": "cb2ee65c0210c0d4b2bd8851789da8d4adfaf04d", "committedDate": "2020-09-07 10:28:21 +0200", "message": "fix: [DHIS2-9287] Fix the stats in the import summary (#6062)"}, {"oid": "e1260b5e8fceb13c2883754236a34cdd652e1c1c", "committedDate": "2020-10-20 14:00:34 +0200", "message": "refactor: Load in the preheat all the data needed for uniqueness attr\u2026 (#6397)"}, {"oid": "3e3b32e56ff5554a0095396eddffceac65b6b8de", "committedDate": "2020-10-27 09:56:50 +0100", "message": "refactor: simplified calls to error reporting (#6437)"}, {"oid": "d095f2d4cf9aaac1e9aa973d4da6aa2f96104cc8", "committedDate": "2020-11-11 13:49:13 +0100", "message": "fix: allow validation to reference entities in the payload (#6617)"}, {"oid": "abf9ed3867b69117bdd43d6feddf0ce194aa3f73", "committedDate": "2020-11-13 07:37:57 +0100", "message": "feat: Username and OrgUnit valueType preheat suppliers [TECH-452] (#6632)"}, {"oid": "0bf55d776481f6511e5f9ebca5de1f2cf79777c0", "committedDate": "2020-11-19 13:55:46 +0100", "message": "refactor: New Tracker Error reporting refactor (#6706)"}, {"oid": "e063801f23d5aa761a791364c8c82e2d784f8c84", "committedDate": "2020-11-23 09:23:20 +0100", "message": "fix: DHIS2-9894 user assignment is checked through ProgramStage definition (#6720)"}, {"oid": "338a47b053533e7c4021c3be94852d5b29e79a19", "committedDate": "2020-11-23 16:57:54 +0100", "message": "fix: A relationship pointing to an invalid object should not be persisted (#6741)"}, {"oid": "8d19700c67e3da9746531d1dee8bb0b8450c739e", "committedDate": "2020-11-24 11:15:55 +0100", "message": "fix: add validation for tei type on relationship constraint (#6736)"}, {"oid": "3e799d196b8f73ad216ea100a07ddd5f7dfc53e0", "committedDate": "2020-11-30 16:37:14 +0100", "message": "fix: remove long running transaction during Tracker Import (#6782)"}, {"oid": "5e4669b4c89c809989ea600900735dd71baa86e2", "committedDate": "2020-12-23 14:00:18 +0700", "message": "feat: Upgrade Hibernate  (#6939)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "6e8f0d6c150b303d780b397f7646ff3383f16250", "committedDate": "2021-01-21 09:32:50 +0100", "message": "feat: new tracked dto's properties referring to a date, now use Instant instead of String [DHIS2-101239] (#7119)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "c25b817a180f24b3de6b26d5a089563aa336aa8c", "committedDate": "2021-03-05 10:44:25 +0100", "message": "feat: Validation for values with option sets [DHIS2-10452] (#7512)"}, {"oid": "474c3438c06893572d9ee7d2fed71dfac38ca82e", "committedDate": "2021-03-11 13:51:04 +0100", "message": "fix: [DHIS2-10452] option set validation fix_3 : adds option set mapper and e2e tests (#7583)"}, {"oid": "20dfefe359779d7e1c1921ba920465227e72f071", "committedDate": "2021-05-25 12:55:24 +0200", "message": "fix: Remove validations from objects deletion service in new tracker importer [DHIS2-10789] (#8053)"}, {"oid": "7d032be663a1d9444d4bc1dbf3bc20ff0f861ec1", "committedDate": "2021-05-26 16:49:59 +0200", "message": "refactor: Clean up integration tests in the new importer [TECH-589] (#8076)"}, {"oid": "fe04922e144ac69367a99840d5518edda2d67f38", "committedDate": "2021-06-03 08:17:10 +0200", "message": "fix: Make program field read-only in event payload [DHIS2-11225] (#8086)"}, {"oid": "242e8d7cc2a94f328778c2fbad9005509c5b3360", "committedDate": "2021-12-21 13:35:53 +0100", "message": "chore: simplify tracker import validation TECH-880 (#9510)"}, {"oid": "8bd63f9823397e39458bd1cdab383c33c3231019", "committedDate": "2021-12-22 09:32:29 +0100", "message": "chore: move factory methods into class it creates TECH-880 (#9518)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "97fa18701761c6993e20f2e7a3816ea689129480", "committedDate": "2022-01-11 15:31:02 +0100", "message": "chore: hooks should add errors via reporter directly TECH-880 (#9523)"}, {"oid": "1d8350a9e9ac100aaaa831894ba3f857b46e2474", "committedDate": "2022-01-13 14:15:17 +0100", "message": "chore: adding errors and warnings is responsibility of the ValidationErrorReporter TECH-880 (#9616)"}, {"oid": "ef0cbd365e47f1f88befb80d9650cce75280bd35", "committedDate": "2022-03-08 15:12:00 +0100", "message": "chore: move DB access and mutation to preheat and preprocessor DHIS2-12623 (#9904)"}, {"oid": "40eb1423da3f890de73b6748e440c82e817bc028", "committedDate": "2022-04-25 09:21:54 +0200", "message": "fix: OrgUnit valueType validation (#10481)"}, {"oid": "f7cfc83610c75486bbb0457dde057eaed777f3d2", "committedDate": "2022-05-27 15:15:25 +0200", "message": "chore: ValidationErrorReporter does not need the bunlde DHIS2-12519 (#10878)"}, {"oid": "b0a861c0308005b865cafa2344c1231c0a4f2bc3", "committedDate": "2022-12-02 13:36:08 +0100", "message": "fix: turn removeOnError into skipOnError DHIS2-14213 (#12457)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg3NDQ4Mg==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446874482", "body": "Yes, TrackerDto should have something like a getId method so we could remove the instanceof here", "bodyText": "Yes, TrackerDto should have something like a getId method so we could remove the instanceof here", "bodyHTML": "<p dir=\"auto\">Yes, TrackerDto should have something like a getId method so we could remove the instanceof here</p>", "author": "enricocolasante", "createdAt": "2020-06-29T08:57:55Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/ValidationErrorReporter.java", "diffHunk": "@@ -0,0 +1,149 @@\n+package org.hisp.dhis.tracker.report;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import lombok.Data;\n+import org.hisp.dhis.tracker.ValidationMode;\n+import org.hisp.dhis.tracker.domain.Enrollment;\n+import org.hisp.dhis.tracker.domain.Event;\n+import org.hisp.dhis.tracker.domain.TrackedEntity;\n+import org.hisp.dhis.tracker.domain.TrackerDto;\n+import org.hisp.dhis.tracker.validation.TrackerImportValidationContext;\n+import org.hisp.dhis.tracker.validation.ValidationFailFastException;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+@Data\n+public class ValidationErrorReporter\n+{\n+    private final List<TrackerErrorReport> reportList;\n+\n+    private final boolean isFailFast;\n+\n+    private final TrackerImportValidationContext validationContext;\n+\n+    private final Class<?> mainKlass;\n+\n+    private final AtomicInteger listIndex = new AtomicInteger( 0 );\n+\n+    private String mainId;\n+\n+    public ValidationErrorReporter( TrackerImportValidationContext context, Class<?> mainKlass )\n+    {\n+        this.validationContext = context;\n+        this.reportList = new ArrayList<>();\n+        this.isFailFast = validationContext.getBundle().getValidationMode() == ValidationMode.FAIL_FAST;\n+        this.mainKlass = mainKlass;\n+    }\n+\n+    private ValidationErrorReporter( TrackerImportValidationContext context, Class<?> mainKlass, boolean isFailFast,\n+        int listIndex )\n+    {\n+        this.validationContext = context;\n+        this.reportList = new ArrayList<>();\n+        this.isFailFast = isFailFast;\n+        this.mainKlass = mainKlass;\n+        this.listIndex.set( listIndex );\n+    }\n+\n+    public boolean hasErrors()\n+    {\n+        return !this.reportList.isEmpty();\n+    }\n+\n+    public static TrackerErrorReport.TrackerErrorReportBuilder newReport( TrackerErrorCode errorCode )\n+    {\n+        return TrackerErrorReport.builder().errorCode( errorCode );\n+    }\n+\n+    public void addError( TrackerErrorReport.TrackerErrorReportBuilder builder )\n+    {\n+        builder.mainKlass( this.mainKlass );\n+        builder.listIndex( this.listIndex.get() );\n+\n+        if ( this.mainId != null )\n+        {\n+            builder.mainId( this.mainId );\n+        }\n+\n+        getReportList().add( builder.build( this.validationContext.getBundle() ) );\n+\n+        if ( isFailFast() )\n+        {\n+            throw new ValidationFailFastException( getReportList() );\n+        }\n+    }\n+\n+    public <T extends TrackerDto> ValidationErrorReporter fork()\n+    {\n+        return fork( null );\n+    }\n+\n+    public <T extends TrackerDto> ValidationErrorReporter fork( T dto )\n+    {\n+        ValidationErrorReporter fork = new ValidationErrorReporter( this.validationContext, this.mainKlass,\n+            isFailFast(),\n+            listIndex.incrementAndGet() );\n+\n+        if ( dto == null )\n+        {\n+            fork.mainId = this.mainId;\n+            return fork;\n+        }\n+\n+        // TODO: Use interface method to build name?", "originalCommit": "12bd589850367af9ce124e78ea519bd7842cb3c5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "cb2ee65c0210c0d4b2bd8851789da8d4adfaf04d", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/ValidationErrorReporter.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/ValidationErrorReporter.java\nindex 043bd23559..104e52af81 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/ValidationErrorReporter.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/ValidationErrorReporter.java\n", "chunk": "@@ -126,24 +150,38 @@ public class ValidationErrorReporter\n         if ( dto instanceof TrackedEntity )\n         {\n             TrackedEntity trackedEntity = (TrackedEntity) dto;\n-            fork.mainId = (trackedEntity.getClass().getSimpleName() + \" (\" + trackedEntity.getTrackedEntity() + \")\");\n+            fork.mainId = trackedEntity.getTrackedEntity();\n+            fork.dtoType = TrackerType.TRACKED_ENTITY;\n         }\n         else if ( dto instanceof Enrollment )\n         {\n             Enrollment enrollment = (Enrollment) dto;\n-            fork.mainId = (enrollment.getClass().getSimpleName() + \" (\" + enrollment.getEnrollment() + \")\");\n+            fork.mainId = enrollment.getEnrollment();\n+            fork.dtoType = TrackerType.ENROLLMENT;\n         }\n         else if ( dto instanceof Event )\n         {\n             Event event = (Event) dto;\n-            fork.mainId = (event.getClass().getSimpleName() + \" (\" + event.getEvent() + \")\");\n+            fork.mainId = event.getEvent();\n+            fork.dtoType = TrackerType.EVENT;\n+        }\n+        else if ( dto instanceof Relationship )\n+        {\n+            Relationship relationship = (Relationship) dto;\n+            fork.mainId = relationship.getRelationship();\n+            fork.dtoType = TrackerType.RELATIONSHIP;\n         }\n-\n         return fork;\n     }\n \n     public void merge( ValidationErrorReporter reporter )\n     {\n         this.reportList.addAll( reporter.getReportList() );\n+        this.warningsReportList.addAll( reporter.getWarningsReportList() );\n+    }\n+\n+    public void addDtosWithErrors( List<TrackerDto> notValidDTOs )\n+    {\n+        this.invalidDTOs.addAll( notValidDTOs );\n     }\n }\n\\ No newline at end of file\n", "next_change": {"commit": "0bf55d776481f6511e5f9ebca5de1f2cf79777c0", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/ValidationErrorReporter.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/ValidationErrorReporter.java\nindex 104e52af81..7e691bc564 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/ValidationErrorReporter.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/ValidationErrorReporter.java\n", "chunk": "@@ -129,59 +175,23 @@ public class ValidationErrorReporter\n         getWarningsReportList().add( builder.build( this.validationContext.getBundle() ) );\n     }\n \n-    public ValidationErrorReporter fork()\n-    {\n-        return fork( null );\n-    }\n-\n-    public <T extends TrackerDto> ValidationErrorReporter fork( T dto )\n+    public void merge( ValidationErrorReporter reporter )\n     {\n-        ValidationErrorReporter fork = new ValidationErrorReporter( this.validationContext, this.mainKlass,\n-            isFailFast(),\n-            listIndex.incrementAndGet() );\n-\n-        if ( dto == null )\n+        // add the root invalid object to the map, if invalid\n+        if ( reporter.getReportList().size() > 0 )\n         {\n-            fork.mainId = this.mainId;\n-            return fork;\n-        }\n+            this.invalidDTOs.computeIfAbsent( reporter.dtoType, k -> new ArrayList<>() ).add( reporter.mainId );\n \n-        // TODO: Use interface method to build name?\n-        if ( dto instanceof TrackedEntity )\n-        {\n-            TrackedEntity trackedEntity = (TrackedEntity) dto;\n-            fork.mainId = trackedEntity.getTrackedEntity();\n-            fork.dtoType = TrackerType.TRACKED_ENTITY;\n+            this.reportList.addAll( reporter.getReportList() );\n         }\n-        else if ( dto instanceof Enrollment )\n-        {\n-            Enrollment enrollment = (Enrollment) dto;\n-            fork.mainId = enrollment.getEnrollment();\n-            fork.dtoType = TrackerType.ENROLLMENT;\n-        }\n-        else if ( dto instanceof Event )\n-        {\n-            Event event = (Event) dto;\n-            fork.mainId = event.getEvent();\n-            fork.dtoType = TrackerType.EVENT;\n-        }\n-        else if ( dto instanceof Relationship )\n-        {\n-            Relationship relationship = (Relationship) dto;\n-            fork.mainId = relationship.getRelationship();\n-            fork.dtoType = TrackerType.RELATIONSHIP;\n-        }\n-        return fork;\n-    }\n-\n-    public void merge( ValidationErrorReporter reporter )\n-    {\n-        this.reportList.addAll( reporter.getReportList() );\n         this.warningsReportList.addAll( reporter.getWarningsReportList() );\n     }\n \n-    public void addDtosWithErrors( List<TrackerDto> notValidDTOs )\n+    /**\n+     * Checks if the provided uid and Tracker Type is part of the invalid entities\n+     */\n+    public boolean isInvalid( TrackerType trackerType, String uid )\n     {\n-        this.invalidDTOs.addAll( notValidDTOs );\n+        return this.invalidDTOs.getOrDefault( trackerType, new ArrayList<>() ).contains( uid );\n     }\n }\n\\ No newline at end of file\n", "next_change": {"commit": "e96350d39473b2ed5d851f6a4f12567fb3412b60", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/ValidationErrorReporter.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/ValidationErrorReporter.java\nindex 7e691bc564..69b11a4605 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/ValidationErrorReporter.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/ValidationErrorReporter.java\n", "chunk": "@@ -194,4 +196,9 @@ public class ValidationErrorReporter\n     {\n         return this.invalidDTOs.getOrDefault( trackerType, new ArrayList<>() ).contains( uid );\n     }\n+    \n+    public TrackerPreheat getPreheat()\n+    {\n+        return this.getValidationContext().getBundle().getPreheat();\n+    }\n }\n\\ No newline at end of file\n", "next_change": {"commit": "ea76fa86409613c9766d4508d65c88ac55c413c3", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/ValidationErrorReporter.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/ValidationErrorReporter.java\nindex 69b11a4605..81fabb49f8 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/ValidationErrorReporter.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/ValidationErrorReporter.java\n", "chunk": "@@ -190,13 +190,14 @@ public class ValidationErrorReporter\n     }\n \n     /**\n-     * Checks if the provided uid and Tracker Type is part of the invalid entities\n+     * Checks if the provided uid and Tracker Type is part of the invalid\n+     * entities\n      */\n     public boolean isInvalid( TrackerType trackerType, String uid )\n     {\n         return this.invalidDTOs.getOrDefault( trackerType, new ArrayList<>() ).contains( uid );\n     }\n-    \n+\n     public TrackerPreheat getPreheat()\n     {\n         return this.getValidationContext().getBundle().getPreheat();\n", "next_change": {"commit": "fe04922e144ac69367a99840d5518edda2d67f38", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/ValidationErrorReporter.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/ValidationErrorReporter.java\nindex 81fabb49f8..4f794f1b9e 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/ValidationErrorReporter.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/ValidationErrorReporter.java\n", "chunk": "@@ -198,6 +207,11 @@ public class ValidationErrorReporter\n         return this.invalidDTOs.getOrDefault( trackerType, new ArrayList<>() ).contains( uid );\n     }\n \n+    public boolean isInvalid( TrackerDto dto )\n+    {\n+        return this.isInvalid( dto.getTrackerType(), dto.getUid() );\n+    }\n+\n     public TrackerPreheat getPreheat()\n     {\n         return this.getValidationContext().getBundle().getPreheat();\n", "next_change": {"commit": "97fa18701761c6993e20f2e7a3816ea689129480", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/ValidationErrorReporter.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/ValidationErrorReporter.java\nindex 4f794f1b9e..0f861ec10b 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/ValidationErrorReporter.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/ValidationErrorReporter.java\n", "chunk": "@@ -211,9 +138,4 @@ public class ValidationErrorReporter\n     {\n         return this.isInvalid( dto.getTrackerType(), dto.getUid() );\n     }\n-\n-    public TrackerPreheat getPreheat()\n-    {\n-        return this.getValidationContext().getBundle().getPreheat();\n-    }\n }\n\\ No newline at end of file\n", "next_change": {"commit": "1d8350a9e9ac100aaaa831894ba3f857b46e2474", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/ValidationErrorReporter.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/ValidationErrorReporter.java\nindex 0f861ec10b..c3cd815026 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/ValidationErrorReporter.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/ValidationErrorReporter.java\n", "chunk": "@@ -138,4 +150,35 @@ public class ValidationErrorReporter\n     {\n         return this.isInvalid( dto.getTrackerType(), dto.getUid() );\n     }\n+\n+    public void addWarning( TrackerDto dto, TrackerErrorCode code,\n+        Object... args )\n+    {\n+        TrackerWarningReport warn = TrackerWarningReport.builder()\n+            .uid( dto.getUid() )\n+            .trackerType( dto.getTrackerType() )\n+            .warningCode( code )\n+            .addArgs( args )\n+            .build( getValidationContext().getBundle() );\n+        addWarning( warn );\n+    }\n+\n+    public void addErrorIf( BooleanSupplier expression, TrackerDto dto,\n+        TrackerErrorCode code, Object... args )\n+    {\n+        if ( expression.getAsBoolean() )\n+        {\n+            addError( dto, code, args );\n+        }\n+    }\n+\n+    public void addErrorIfNull( Object object, TrackerDto dto,\n+        TrackerErrorCode code,\n+        Object... args )\n+    {\n+        if ( object == null )\n+        {\n+            addError( dto, code, args );\n+        }\n+    }\n }\n\\ No newline at end of file\n", "next_change": {"commit": "142122b2e693a619ad851c42b7e188ae7f6bec11", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/ValidationErrorReporter.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/ValidationErrorReporter.java\nindex c3cd815026..1bb5468e68 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/ValidationErrorReporter.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/ValidationErrorReporter.java\n", "chunk": "@@ -48,137 +50,143 @@ import org.hisp.dhis.tracker.validation.ValidationFailFastException;\n  *\n  * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n  */\n-@Data\n-// TODO: should this be \"ValidationReporter\" since it does not only report\n-// errors ?\n+@Value\n public class ValidationErrorReporter\n {\n-    private final List<TrackerErrorReport> reportList;\n+    List<TrackerErrorReport> errors;\n \n-    private final List<TrackerWarningReport> warningsReportList;\n+    List<TrackerWarningReport> warnings;\n \n-    private final boolean isFailFast;\n+    boolean isFailFast;\n \n-    private final TrackerImportValidationContext validationContext;\n+    TrackerIdSchemeParams idSchemes;\n \n+    @Getter( AccessLevel.NONE )\n     /*\n-     * A map that keep tracks of all the invalid Tracker objects encountered\n-     * during the validation process\n+     * Keeps track of all the invalid Tracker objects (i.e. objects with at\n+     * least one TrackerErrorReport in the ValidationErrorReporter) encountered\n+     * during the validation process.\n      */\n-    private Map<TrackerType, List<String>> invalidDTOs;\n+    EnumMap<TrackerType, Set<String>> invalidDTOs;\n \n-    public static ValidationErrorReporter emptyReporter()\n-    {\n-        return new ValidationErrorReporter();\n-    }\n-\n-    private ValidationErrorReporter()\n+    /**\n+     * Create a {@link ValidationErrorReporter} reporting all errors and\n+     * warnings with identifiers in given idSchemes.\n+     * {@link #addError(TrackerErrorReport)} will only throw a\n+     * {@link ValidationFailFastException} if {@code failFast} true is given.\n+     *\n+     * @param idSchemes idSchemes in which to report errors and warnings\n+     * @param failFast reporter throws exception on first error added when true\n+     */\n+    public ValidationErrorReporter( TrackerIdSchemeParams idSchemes, boolean failFast )\n     {\n-        this.warningsReportList = new ArrayList<>();\n-        this.reportList = new ArrayList<>();\n-        this.isFailFast = false;\n-        this.validationContext = null;\n-        this.invalidDTOs = new HashMap<>();\n+        this.errors = new ArrayList<>();\n+        this.warnings = new ArrayList<>();\n+        this.invalidDTOs = new EnumMap<>( TrackerType.class );\n+        this.idSchemes = idSchemes;\n+        this.isFailFast = failFast;\n     }\n \n-    public ValidationErrorReporter( TrackerImportValidationContext context )\n+    /**\n+     * Create a {@link ValidationErrorReporter} reporting all errors and\n+     * warnings ({@link #isFailFast} = false) with identifiers in given\n+     * idSchemes. {@link #addError(TrackerErrorReport)} will not throw a\n+     * {@link ValidationFailFastException}.\n+     *\n+     * @param idSchemes idSchemes in which to report errors and warnings\n+     */\n+    public ValidationErrorReporter( TrackerIdSchemeParams idSchemes )\n     {\n-        this.validationContext = context;\n-        this.reportList = new ArrayList<>();\n-        this.warningsReportList = new ArrayList<>();\n-        this.isFailFast = validationContext.getBundle().getValidationMode() == ValidationMode.FAIL_FAST;\n-        this.invalidDTOs = new HashMap<>();\n+        this( idSchemes, false );\n     }\n \n     public boolean hasErrors()\n     {\n-        return !this.reportList.isEmpty();\n+        return !this.errors.isEmpty();\n     }\n \n     public boolean hasErrorReport( Predicate<TrackerErrorReport> test )\n     {\n-        return reportList.stream().anyMatch( test );\n+        return errors.stream().anyMatch( test );\n     }\n \n-    public boolean hasWarningReport( Predicate<TrackerWarningReport> test )\n+    public void addErrorIf( BooleanSupplier expression, TrackerDto dto, TrackerErrorCode code, Object... args )\n     {\n-        return warningsReportList.stream().anyMatch( test );\n+        if ( expression.getAsBoolean() )\n+        {\n+            addError( dto, code, args );\n+        }\n     }\n \n-    public boolean hasWarnings()\n+    public void addErrorIfNull( Object object, TrackerDto dto, TrackerErrorCode code, Object... args )\n     {\n-        return !this.warningsReportList.isEmpty();\n+        if ( object == null )\n+        {\n+            addError( dto, code, args );\n+        }\n     }\n \n     public void addError( TrackerDto dto, TrackerErrorCode code, Object... args )\n     {\n-        TrackerErrorReport error = TrackerErrorReport.builder()\n-            .uid( dto.getUid() )\n-            .trackerType( dto.getTrackerType() )\n-            .errorCode( code )\n-            .addArgs( args )\n-            .build( getValidationContext().getBundle() );\n-        addError( error );\n+        addError( new TrackerErrorReport( MessageFormatter.format( idSchemes, code.getMessage(), args ),\n+            code, dto.getTrackerType(), dto.getUid() ) );\n     }\n \n     public void addError( TrackerErrorReport error )\n     {\n-        getReportList().add( error );\n-        this.invalidDTOs.computeIfAbsent( error.getTrackerType(), k -> new ArrayList<>() ).add( error.getUid() );\n+        getErrors().add( error );\n+        this.invalidDTOs.computeIfAbsent( error.getTrackerType(), k -> new HashSet<>() ).add( error.getUid() );\n \n         if ( isFailFast() )\n         {\n-            throw new ValidationFailFastException( getReportList() );\n+            throw new ValidationFailFastException( getErrors() );\n         }\n     }\n \n-    public void addWarning( TrackerWarningReport warning )\n+    public boolean hasWarnings()\n     {\n-        getWarningsReportList().add( warning );\n+        return !this.warnings.isEmpty();\n     }\n \n-    /**\n-     * Checks if the provided uid and Tracker Type is part of the invalid\n-     * entities\n-     */\n-    public boolean isInvalid( TrackerType trackerType, String uid )\n+    public boolean hasWarningReport( Predicate<TrackerWarningReport> test )\n     {\n-        return this.invalidDTOs.getOrDefault( trackerType, new ArrayList<>() ).contains( uid );\n+        return warnings.stream().anyMatch( test );\n     }\n \n-    public boolean isInvalid( TrackerDto dto )\n+    public void addWarningIf( BooleanSupplier expression, TrackerDto dto, TrackerErrorCode code, Object... args )\n     {\n-        return this.isInvalid( dto.getTrackerType(), dto.getUid() );\n+        if ( expression.getAsBoolean() )\n+        {\n+            addWarning( dto, code, args );\n+        }\n     }\n \n-    public void addWarning( TrackerDto dto, TrackerErrorCode code,\n-        Object... args )\n+    public void addWarning( TrackerDto dto, TrackerErrorCode code, Object... args )\n     {\n-        TrackerWarningReport warn = TrackerWarningReport.builder()\n-            .uid( dto.getUid() )\n-            .trackerType( dto.getTrackerType() )\n-            .warningCode( code )\n-            .addArgs( args )\n-            .build( getValidationContext().getBundle() );\n-        addWarning( warn );\n+        addWarning( new TrackerWarningReport( MessageFormatter.format( idSchemes, code.getMessage(), args ),\n+            code, dto.getTrackerType(), dto.getUid() ) );\n     }\n \n-    public void addErrorIf( BooleanSupplier expression, TrackerDto dto,\n-        TrackerErrorCode code, Object... args )\n+    public void addWarning( TrackerWarningReport warning )\n     {\n-        if ( expression.getAsBoolean() )\n-        {\n-            addError( dto, code, args );\n-        }\n+        getWarnings().add( warning );\n     }\n \n-    public void addErrorIfNull( Object object, TrackerDto dto,\n-        TrackerErrorCode code,\n-        Object... args )\n+    /**\n+     * Checks if a TrackerDto is invalid (i.e. has at least one\n+     * TrackerErrorReport in the ValidationErrorReporter).\n+     */\n+    public boolean isInvalid( TrackerDto dto )\n     {\n-        if ( object == null )\n-        {\n-            addError( dto, code, args );\n-        }\n+        return this.isInvalid( dto.getTrackerType(), dto.getUid() );\n+    }\n+\n+    /**\n+     * Checks if a TrackerDto with given type and uid is invalid (i.e. has at\n+     * least one TrackerErrorReport in the ValidationErrorReporter).\n+     */\n+    public boolean isInvalid( TrackerType trackerType, String uid )\n+    {\n+        return this.invalidDTOs.getOrDefault( trackerType, new HashSet<>() ).contains( uid );\n     }\n }\n\\ No newline at end of file\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "message": "Merge commit", "committedDate": null}, {"oid": "75a02d90ed737ca75d65881e38f2ed1c5f047d45", "committedDate": "2020-08-18 13:38:25 +0200", "message": "[DHIS2-7310] Add support for warnings in error reports"}, {"oid": "b95c088121ef6601a5f4f50abc19db2345043414", "committedDate": "2020-08-19 11:30:46 +0200", "message": "[DHIS2-7310] Add support for warnings in error reports"}, {"oid": "b010ab69f5dfb7b5ea0a5cfd438c1d7ebf3275de", "committedDate": "2020-08-24 14:13:32 +0200", "message": "fix: Implement atomic mode OBJECTS to commit only valid DTOs (#5958)"}, {"oid": "cb2ee65c0210c0d4b2bd8851789da8d4adfaf04d", "committedDate": "2020-09-07 10:28:21 +0200", "message": "fix: [DHIS2-9287] Fix the stats in the import summary (#6062)"}, {"oid": "290df2170f22c2117a25447062617d6617a5d786", "committedDate": "2020-11-17 09:41:43 +0100", "message": "fix: add reference validation for relationships (#6688)"}, {"oid": "0bf55d776481f6511e5f9ebca5de1f2cf79777c0", "committedDate": "2020-11-19 13:55:46 +0100", "message": "refactor: New Tracker Error reporting refactor (#6706)"}, {"oid": "e063801f23d5aa761a791364c8c82e2d784f8c84", "committedDate": "2020-11-23 09:23:20 +0100", "message": "fix: DHIS2-9894 user assignment is checked through ProgramStage definition (#6720)"}, {"oid": "e96350d39473b2ed5d851f6a4f12567fb3412b60", "committedDate": "2021-01-04 09:05:09 +0100", "message": "fix: get Program from preheat using Program from ProgramStage (#6982)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "e8fc1401f2bc43df10a954a4e387c96125ce64aa", "committedDate": "2021-02-05 13:56:50 +0100", "message": "fix: Ignore incoming notes with existing UID [DHIS2-10302] (#7270)"}, {"oid": "20dfefe359779d7e1c1921ba920465227e72f071", "committedDate": "2021-05-25 12:55:24 +0200", "message": "fix: Remove validations from objects deletion service in new tracker importer [DHIS2-10789] (#8053)"}, {"oid": "fe04922e144ac69367a99840d5518edda2d67f38", "committedDate": "2021-06-03 08:17:10 +0200", "message": "fix: Make program field read-only in event payload [DHIS2-11225] (#8086)"}, {"oid": "8bd63f9823397e39458bd1cdab383c33c3231019", "committedDate": "2021-12-22 09:32:29 +0100", "message": "chore: move factory methods into class it creates TECH-880 (#9518)"}, {"oid": "ddf2fe13c11b42d232275b189ef49fa60abf2def", "committedDate": "2021-12-24 13:24:37 +0100", "message": "chore: assert on error/warning codes, type, uid in tracker error reports TECH-880 (#9531)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "97fa18701761c6993e20f2e7a3816ea689129480", "committedDate": "2022-01-11 15:31:02 +0100", "message": "chore: hooks should add errors via reporter directly TECH-880 (#9523)"}, {"oid": "1d8350a9e9ac100aaaa831894ba3f857b46e2474", "committedDate": "2022-01-13 14:15:17 +0100", "message": "chore: adding errors and warnings is responsibility of the ValidationErrorReporter TECH-880 (#9616)"}, {"oid": "ef0cbd365e47f1f88befb80d9650cce75280bd35", "committedDate": "2022-03-08 15:12:00 +0100", "message": "chore: move DB access and mutation to preheat and preprocessor DHIS2-12623 (#9904)"}, {"oid": "d76299848da281461da799f3fb3ca8ac3c63795a", "committedDate": "2022-05-09 13:06:14 +0000", "message": "feat: Make relationship soft deletable [DHIS2-11320] (#10708)"}, {"oid": "b567e74f7d703115fb7bc9802ed3b5f29d6917aa", "committedDate": "2022-05-23 09:13:55 +0200", "message": "fix: report ids or attribute value for MetadataIdentifiers DHIS2-12519 (#10873)"}, {"oid": "fd5ad57b687538f35f14f6b564a5d6afcd18b2c5", "committedDate": "2022-05-24 11:38:43 +0200", "message": "chore: ValidationErrorReporter only needs idSchemes DHIS2-12519 (#10876)"}, {"oid": "f7cfc83610c75486bbb0457dde057eaed777f3d2", "committedDate": "2022-05-27 15:15:25 +0200", "message": "chore: ValidationErrorReporter does not need the bunlde DHIS2-12519 (#10878)"}, {"oid": "37b8dc5ed6acbe3f28f3a80f3d3e709190b3964d", "committedDate": "2022-05-30 10:22:43 +0200", "message": "chore: simplify TrackerErrorReport/WarningReport DHIS2-12519 (#10887)"}, {"oid": "142122b2e693a619ad851c42b7e188ae7f6bec11", "committedDate": "2022-12-05 15:08:42 +0100", "message": "refactor: clean ValidationErrorReporter DHIS2-14213 (#12473)"}, {"oid": "7ac68b368a1dbd9362973b30f7160399abe801a0", "committedDate": "2022-12-06 09:04:47 +0100", "message": "chore: move ValidationErrorReporter close to its usage (#12486)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg4MTgzNA==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446881834", "body": "Not using this method outside this class so this can potentially be `private`.", "bodyText": "Not using this method outside this class so this can potentially be private.", "bodyHTML": "<p dir=\"auto\">Not using this method outside this class so this can potentially be <code>private</code>.</p>", "author": "zubaira", "createdAt": "2020-06-29T09:48:52Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/TeTaValidationTest.java", "diffHunk": "@@ -0,0 +1,574 @@\n+package org.hisp.dhis.tracker.validation;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\n+ */\n+\n+import org.hisp.dhis.H2DhisConfigurationProvider;\n+import org.hisp.dhis.common.IdentifiableObject;\n+import org.hisp.dhis.common.IdentifiableObjectManager;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundle;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundleMode;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundleParams;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundleService;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundleValidationService;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.feedback.ObjectBundleValidationReport;\n+import org.hisp.dhis.encryption.EncryptionStatus;\n+import org.hisp.dhis.external.conf.DhisConfigurationProvider;\n+import org.hisp.dhis.feedback.ErrorReport;\n+import org.hisp.dhis.fileresource.FileResource;\n+import org.hisp.dhis.fileresource.FileResourceDomain;\n+import org.hisp.dhis.fileresource.FileResourceService;\n+import org.hisp.dhis.importexport.ImportStrategy;\n+import org.hisp.dhis.render.RenderFormat;\n+import org.hisp.dhis.render.RenderService;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+import org.hisp.dhis.trackedentityattributevalue.TrackedEntityAttributeValue;\n+import org.hisp.dhis.trackedentityattributevalue.TrackedEntityAttributeValueService;\n+import org.hisp.dhis.tracker.bundle.TrackerBundle;\n+import org.hisp.dhis.tracker.bundle.TrackerBundleParams;\n+import org.hisp.dhis.tracker.bundle.TrackerBundleService;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.TrackerValidationReport;\n+import org.hisp.dhis.user.User;\n+import org.hisp.dhis.user.UserService;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.io.ClassPathResource;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasItem;\n+import static org.hamcrest.Matchers.hasProperty;\n+import static org.hamcrest.core.Every.everyItem;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+public class TeTaValidationTest\n+    extends AbstractImportValidationTest\n+{\n+    @Autowired\n+    private DhisConfigurationProvider dhisConfigurationProvider;\n+\n+    @Autowired\n+    private ObjectBundleService objectBundleService;\n+\n+    @Autowired\n+    private ObjectBundleValidationService objectBundleValidationService;\n+\n+    @Autowired\n+    private RenderService _renderService;\n+\n+    @Autowired\n+    private UserService _userService;\n+\n+    @Autowired\n+    private TrackerBundleService trackerBundleService;\n+\n+    @Autowired\n+    private TrackedEntityAttributeValueService trackedEntityAttributeValueService;\n+\n+    @Autowired\n+    private IdentifiableObjectManager manager;\n+\n+    @Autowired\n+    private FileResourceService fileResourceService;\n+\n+    public void setupMetadata( String metaDataFile )", "originalCommit": "12bd589850367af9ce124e78ea519bd7842cb3c5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5bd4c4a413adbc1e587b0e1194af3da352084268", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/TeTaValidationTest.java b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/TeTaValidationTest.java\nindex 7f44a19f59..0550c886fd 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/TeTaValidationTest.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/TeTaValidationTest.java\n", "chunk": "@@ -108,7 +108,7 @@ public class TeTaValidationTest\n     @Autowired\n     private FileResourceService fileResourceService;\n \n-    public void setupMetadata( String metaDataFile )\n+    private void setupMetadata( String metaDataFile )\n         throws IOException\n     {\n         renderService = _renderService;\n", "next_change": null}]}, "revised_code_in_main": {"commit": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/TeTaValidationTest.java b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/TeTaValidationTest.java\nindex 7f44a19f59..0550c886fd 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/TeTaValidationTest.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/TeTaValidationTest.java\n", "chunk": "@@ -108,7 +108,7 @@ public class TeTaValidationTest\n     @Autowired\n     private FileResourceService fileResourceService;\n \n-    public void setupMetadata( String metaDataFile )\n+    private void setupMetadata( String metaDataFile )\n         throws IOException\n     {\n         renderService = _renderService;\n", "next_change": {"commit": "3e799d196b8f73ad216ea100a07ddd5f7dfc53e0", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/TeTaValidationTest.java b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/TeTaValidationTest.java\nindex 0550c886fd..6f5859e8dc 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/TeTaValidationTest.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/TeTaValidationTest.java\n", "chunk": "@@ -108,35 +78,11 @@ public class TeTaValidationTest\n     @Autowired\n     private FileResourceService fileResourceService;\n \n-    private void setupMetadata( String metaDataFile )\n-        throws IOException\n-    {\n-        renderService = _renderService;\n-        userService = _userService;\n-\n-        Map<Class<? extends IdentifiableObject>, List<IdentifiableObject>> metadata = renderService.fromMetadata(\n-            new ClassPathResource( metaDataFile ).getInputStream(),\n-            RenderFormat.JSON );\n-\n-        ObjectBundleParams params = new ObjectBundleParams();\n-        params.setObjectBundleMode( ObjectBundleMode.COMMIT );\n-        params.setImportStrategy( ImportStrategy.CREATE );\n-        params.setObjects( metadata );\n-\n-        ObjectBundle bundle = objectBundleService.create( params );\n-        ObjectBundleValidationReport validationReport = objectBundleValidationService.validate( bundle );\n-        List<ErrorReport> errorReports = validationReport.getErrorReports();\n-        assertTrue( errorReports.isEmpty() );\n-\n-        objectBundleService.commit( bundle );\n-    }\n-\n     @Test\n     public void testTrackedEntityProgramAttributeFileResourceValue()\n         throws IOException\n     {\n-        String metaDataFile = \"tracker/validations/te-program_with_tea_fileresource_metadata.json\";\n-        setupMetadata( metaDataFile );\n+        setUpMetadata( \"tracker/validations/te-program_with_tea_fileresource_metadata.json\" );\n \n         FileResource fileResource = new FileResource( \"test.pdf\", \"application/pdf\",\n             0, \"d41d8cd98f00b204e9800998ecf8427e\", FileResourceDomain.DOCUMENT );\n", "next_change": {"commit": "22d5da9d9a812b02eb5acd643112a6b050b5d63c", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/TeTaValidationTest.java b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/TeTaValidationTest.java\nindex 6f5859e8dc..ba7be84585 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/TeTaValidationTest.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/TeTaValidationTest.java\n", "chunk": "@@ -79,310 +80,173 @@ public class TeTaValidationTest\n     private FileResourceService fileResourceService;\n \n     @Test\n-    public void testTrackedEntityProgramAttributeFileResourceValue()\n+    void testTrackedEntityProgramAttributeFileResourceValue()\n         throws IOException\n     {\n         setUpMetadata( \"tracker/validations/te-program_with_tea_fileresource_metadata.json\" );\n-\n-        FileResource fileResource = new FileResource( \"test.pdf\", \"application/pdf\",\n-            0, \"d41d8cd98f00b204e9800998ecf8427e\", FileResourceDomain.DOCUMENT );\n+        FileResource fileResource = new FileResource( \"test.pdf\", \"application/pdf\", 0,\n+            \"d41d8cd98f00b204e9800998ecf8427e\", FileResourceDomain.DOCUMENT );\n         fileResource.setUid( \"Jzf6hHNP7jx\" );\n         File file = File.createTempFile( \"file-resource\", \"test\" );\n-\n         fileResourceService.saveFileResource( fileResource, file );\n         assertFalse( fileResource.isAssigned() );\n-\n-        validateAndCommit( \"tracker/validations/te-program_with_tea_fileresource_data.json\" );\n-\n+        TrackerImportParams trackerImportParams = createBundleFromJson(\n+            \"tracker/validations/te-program_with_tea_fileresource_data.json\" );\n+        trackerImportService.importTracker( trackerImportParams );\n         List<TrackedEntityInstance> trackedEntityInstances = manager.getAll( TrackedEntityInstance.class );\n         assertEquals( 1, trackedEntityInstances.size() );\n-\n         TrackedEntityInstance trackedEntityInstance = trackedEntityInstances.get( 0 );\n-\n         List<TrackedEntityAttributeValue> attributeValues = trackedEntityAttributeValueService\n-            .getTrackedEntityAttributeValues(\n-                trackedEntityInstance );\n-\n+            .getTrackedEntityAttributeValues( trackedEntityInstance );\n         assertEquals( 1, attributeValues.size() );\n-\n         fileResource = fileResourceService.getFileResource( fileResource.getUid() );\n         assertTrue( fileResource.isAssigned() );\n     }\n \n     @Test\n-    public void testFileAlreadyAssign()\n+    void testFileAlreadyAssign()\n         throws IOException\n     {\n         setUpMetadata( \"tracker/validations/te-program_with_tea_fileresource_metadata.json\" );\n-\n-        FileResource fileResource = new FileResource( \"test.pdf\", \"application/pdf\",\n-            0, \"d41d8cd98f00b204e9800998ecf8427e\", FileResourceDomain.DOCUMENT );\n+        FileResource fileResource = new FileResource( \"test.pdf\", \"application/pdf\", 0,\n+            \"d41d8cd98f00b204e9800998ecf8427e\", FileResourceDomain.DOCUMENT );\n         fileResource.setUid( \"Jzf6hHNP7jx\" );\n         File file = File.createTempFile( \"file-resource\", \"test\" );\n-\n         fileResourceService.saveFileResource( fileResource, file );\n         assertFalse( fileResource.isAssigned() );\n-\n-        validateAndCommit( \"tracker/validations/te-program_with_tea_fileresource_data.json\" );\n-\n+        TrackerImportParams trackerImportParams = createBundleFromJson(\n+            \"tracker/validations/te-program_with_tea_fileresource_data.json\" );\n+        trackerImportService.importTracker( trackerImportParams );\n         List<TrackedEntityInstance> trackedEntityInstances = manager.getAll( TrackedEntityInstance.class );\n         assertEquals( 1, trackedEntityInstances.size() );\n         TrackedEntityInstance trackedEntityInstance = trackedEntityInstances.get( 0 );\n-\n         List<TrackedEntityAttributeValue> attributeValues = trackedEntityAttributeValueService\n-            .getTrackedEntityAttributeValues(\n-                trackedEntityInstance );\n-\n+            .getTrackedEntityAttributeValues( trackedEntityInstance );\n         assertEquals( 1, attributeValues.size() );\n-\n         fileResource = fileResourceService.getFileResource( fileResource.getUid() );\n         assertTrue( fileResource.isAssigned() );\n-\n-        TrackerValidationReport report = validate( \"tracker/validations/te-program_with_tea_fileresource_data.json\" );\n-\n-        assertEquals( 1, report.getErrorReports().size() );\n-\n-        assertThat( report.getErrorReports(),\n+        trackerImportParams = createBundleFromJson( \"tracker/validations/te-program_with_tea_fileresource_data2.json\" );\n+        TrackerImportReport trackerImportReport = trackerImportService.importTracker( trackerImportParams );\n+        assertEquals( 1, trackerImportReport.getValidationReport().getErrorReports().size() );\n+        assertThat( trackerImportReport.getValidationReport().getErrorReports(),\n             everyItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1009 ) ) ) );\n     }\n \n     @Test\n-    public void testNoFileRef()\n+    void testNoFileRef()\n         throws IOException\n     {\n         setUpMetadata( \"tracker/validations/te-program_with_tea_fileresource_metadata.json\" );\n-\n-        TrackerImportParams trackerImportParams = fromJson(\n-            \"tracker/validations/te-program_with_tea_fileresource_data.json\", userService.getUser( ADMIN_USER_UID ) );\n-\n-        TrackerBundle trackerBundle = trackerBundleService.create( trackerImportParams );\n-\n-        TrackerValidationReport report = trackerValidationService.validate( trackerBundle );\n-        assertEquals( 1, report.getErrorReports().size() );\n-        assertThat( report.getErrorReports(),\n+        TrackerImportParams trackerImportParams = createBundleFromJson(\n+            \"tracker/validations/te-program_with_tea_fileresource_data.json\" );\n+        TrackerImportReport trackerImportReport = trackerImportService.importTracker( trackerImportParams );\n+        assertEquals( 1, trackerImportReport.getValidationReport().getErrorReports().size() );\n+        assertThat( trackerImportReport.getValidationReport().getErrorReports(),\n             everyItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1084 ) ) ) );\n-\n-        trackerBundleService.commit( trackerBundle );\n-\n         List<TrackedEntityInstance> trackedEntityInstances = manager.getAll( TrackedEntityInstance.class );\n-        assertEquals( 1, trackedEntityInstances.size() );\n-\n-        TrackedEntityInstance trackedEntityInstance = trackedEntityInstances.get( 0 );\n-\n-        List<TrackedEntityAttributeValue> attributeValues = trackedEntityAttributeValueService\n-            .getTrackedEntityAttributeValues(\n-                trackedEntityInstance );\n-\n-        assertEquals( 1, attributeValues.size() );\n-    }\n-\n-    @Test\n-    public void testGeneratedValuePatternDoNotMatch()\n-        throws IOException\n-    {\n-        setUpMetadata( \"tracker/validations/te-program_with_tea_fileresource_metadata.json\" );\n-\n-        TrackerImportParams trackerImportParams = fromJson(\n-            \"tracker/validations/te-program_with_tea_generated_data.json\", userService.getUser( ADMIN_USER_UID ) );\n-\n-        TrackerBundle trackerBundle = trackerBundleService.create( trackerImportParams );\n-\n-        TrackerValidationReport report = trackerValidationService.validate( trackerBundle );\n-        assertEquals( 1, report.getErrorReports().size() );\n-        printReport( report );\n-        assertThat( report.getErrorReports(),\n-            everyItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1008 ) ) ) );\n-\n-        trackerBundleService.commit( trackerBundle );\n-\n-        List<TrackedEntityInstance> trackedEntityInstances = manager.getAll( TrackedEntityInstance.class );\n-        assertEquals( 1, trackedEntityInstances.size() );\n-\n-        TrackedEntityInstance trackedEntityInstance = trackedEntityInstances.get( 0 );\n-\n-        List<TrackedEntityAttributeValue> attributeValues = trackedEntityAttributeValueService\n-            .getTrackedEntityAttributeValues(\n-                trackedEntityInstance );\n-\n-        assertEquals( 1, attributeValues.size() );\n+        assertEquals( 0, trackedEntityInstances.size() );\n     }\n \n     @Test\n-    public void testTeaMaxTextValueLength()\n+    void testTeaMaxTextValueLength()\n         throws IOException\n     {\n         setUpMetadata( \"tracker/validations/te-program_with_tea_fileresource_metadata.json\" );\n-\n-        TrackerValidationReport report = validate( \"tracker/validations/te-program_with_tea_too_long_text_value.json\" );\n-\n-        assertEquals( 1, report.getErrorReports().size() );\n-\n-        printReport( report );\n-\n-        assertThat( report.getErrorReports(),\n+        TrackerImportParams trackerImportParams = createBundleFromJson(\n+            \"tracker/validations/te-program_with_tea_too_long_text_value.json\" );\n+        TrackerImportReport trackerImportReport = trackerImportService.importTracker( trackerImportParams );\n+        assertEquals( 1, trackerImportReport.getValidationReport().getErrorReports().size() );\n+        assertThat( trackerImportReport.getValidationReport().getErrorReports(),\n             everyItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1077 ) ) ) );\n     }\n \n     @Test\n-    public void testEncryptedAttrFail()\n+    void testEncryptedAttrFail()\n         throws IOException\n     {\n         setUpMetadata( \"tracker/validations/te-program_with_tea_encryption_metadata.json\" );\n-\n-        TrackerImportParams trackerImportParams = fromJson(\n-            \"tracker/validations/te-program_with_tea_encryption_data.json\", userService.getUser( ADMIN_USER_UID ) );\n-\n-        TrackerBundle trackerBundle = trackerBundleService.create( trackerImportParams );\n-\n+        TrackerImportParams trackerImportParams = createBundleFromJson(\n+            \"tracker/validations/te-program_with_tea_encryption_data.json\" );\n         H2DhisConfigurationProvider dhisConfigurationProvider = (H2DhisConfigurationProvider) this.dhisConfigurationProvider;\n         dhisConfigurationProvider.setEncryptionStatus( EncryptionStatus.MISSING_ENCRYPTION_PASSWORD );\n-\n-        TrackerValidationReport report = trackerValidationService.validate( trackerBundle );\n-\n-        assertEquals( 1, report.getErrorReports().size() );\n-        printReport( report );\n-\n-        assertThat( report.getErrorReports(),\n+        TrackerImportReport trackerImportReport = trackerImportService.importTracker( trackerImportParams );\n+        assertEquals( 1, trackerImportReport.getValidationReport().getErrorReports().size() );\n+        assertThat( trackerImportReport.getValidationReport().getErrorReports(),\n             everyItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1112 ) ) ) );\n     }\n \n     @Test\n-    public void testUniqueFailInOrgUnit()\n+    void testUniqueFailInOrgUnit()\n         throws IOException\n     {\n         setUpMetadata( \"tracker/validations/te-program_with_tea_encryption_metadata.json\" );\n-\n-        TrackerImportParams trackerImportParams = fromJson(\n-            \"tracker/validations/te-program_with_tea_unique_data_in_country.json\",\n-            userService.getUser( ADMIN_USER_UID ) );\n-\n-        trackerBundleService.commit( trackerBundleService.create( trackerImportParams ) );\n-\n-        TrackerValidationReport report = validate(\n-            \"tracker/validations/te-program_with_tea_unique_data_in_country.json\",\n-            TrackerImportStrategy.CREATE_AND_UPDATE );\n-\n-        assertEquals( 0, report.getErrorReports().size() );\n-        printReport( report );\n-\n-        report = validate( \"tracker/validations/te-program_with_tea_unique_data_in_region.json\" );\n-        assertEquals( 0, report.getErrorReports().size() );\n-        printReport( report );\n+        TrackerImportParams trackerImportParams = createBundleFromJson(\n+            \"tracker/validations/te-program_with_tea_unique_data_in_country.json\" );\n+        trackerImportService.importTracker( trackerImportParams );\n+        trackerImportParams = createBundleFromJson(\n+            \"tracker/validations/te-program_with_tea_unique_data_in_country.json\" );\n+        trackerImportParams.setImportStrategy( TrackerImportStrategy.CREATE_AND_UPDATE );\n+        TrackerImportReport trackerImportReport = trackerImportService.importTracker( trackerImportParams );\n+        assertEquals( 0, trackerImportReport.getValidationReport().getErrorReports().size() );\n+        trackerImportParams = createBundleFromJson(\n+            \"tracker/validations/te-program_with_tea_unique_data_in_region.json\" );\n+        trackerImportReport = trackerImportService.importTracker( trackerImportParams );\n+        assertEquals( 0, trackerImportReport.getValidationReport().getErrorReports().size() );\n     }\n \n     @Test\n-    public void testUniqueFail()\n+    void testUniqueFail()\n         throws IOException\n     {\n         setUpMetadata( \"tracker/validations/te-program_with_tea_encryption_metadata.json\" );\n-\n-        TrackerImportParams trackerImportParams = fromJson(\n-            \"tracker/validations/te-program_with_tea_unique_data.json\",\n-            userService.getUser( ADMIN_USER_UID ) );\n-        TrackerBundle trackerBundle = trackerBundleService.create( trackerImportParams );\n-\n-        trackerBundleService.commit( trackerBundle );\n-\n-        TrackerValidationReport report = validate( \"tracker/validations/te-program_with_tea_unique_data.json\" );\n-\n-        assertEquals( 1, report.getErrorReports().size() );\n-\n-        printReport( report );\n-\n-        assertThat( report.getErrorReports(),\n+        TrackerImportParams trackerImportParams = createBundleFromJson(\n+            \"tracker/validations/te-program_with_tea_unique_data.json\" );\n+        TrackerImportReport trackerImportReport = trackerImportService.importTracker( trackerImportParams );\n+        trackerImportParams = createBundleFromJson( \"tracker/validations/te-program_with_tea_unique_data2.json\" );\n+        trackerImportReport = trackerImportService.importTracker( trackerImportParams );\n+        assertEquals( 1, trackerImportReport.getValidationReport().getErrorReports().size() );\n+        assertThat( trackerImportReport.getValidationReport().getErrorReports(),\n             everyItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1064 ) ) ) );\n     }\n \n     @Test\n-    public void testTeaInvalidFormat()\n+    void testTeaInvalidFormat()\n         throws IOException\n     {\n         setUpMetadata( \"tracker/validations/te-program_with_tea_fileresource_metadata.json\" );\n-\n-        TrackerValidationReport report = validate(\n+        TrackerImportParams trackerImportParams = createBundleFromJson(\n             \"tracker/validations/te-program_with_tea_invalid_format_value.json\" );\n-\n-        assertEquals( 1, report.getErrorReports().size() );\n-\n-        printReport( report );\n-\n-        assertThat( report.getErrorReports(),\n+        TrackerImportReport trackerImportReport = trackerImportService.importTracker( trackerImportParams );\n+        assertEquals( 1, trackerImportReport.getValidationReport().getErrorReports().size() );\n+        assertThat( trackerImportReport.getValidationReport().getErrorReports(),\n             everyItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1085 ) ) ) );\n     }\n \n     @Test\n-    public void testTeaInvalidImage()\n+    void testTeaInvalidImage()\n         throws IOException\n     {\n         setUpMetadata( \"tracker/validations/te-program_with_tea_fileresource_metadata.json\" );\n-\n-        TrackerValidationReport report = validate(\n+        TrackerImportParams trackerImportParams = createBundleFromJson(\n             \"tracker/validations/te-program_with_tea_invalid_image_value.json\" );\n-\n-        assertEquals( 2, report.getErrorReports().size() );\n-        printReport( report );\n-\n-        assertThat( report.getErrorReports(),\n+        TrackerImportReport trackerImportReport = trackerImportService.importTracker( trackerImportParams );\n+        assertEquals( 2, trackerImportReport.getValidationReport().getErrorReports().size() );\n+        assertThat( trackerImportReport.getValidationReport().getErrorReports(),\n             hasItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1085 ) ) ) );\n-\n-        assertThat( report.getErrorReports(),\n+        assertThat( trackerImportReport.getValidationReport().getErrorReports(),\n             hasItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1007 ) ) ) );\n     }\n \n     @Test\n-    public void testTeaIsNull()\n+    void testTeaIsNull()\n         throws IOException\n     {\n-        setUpMetadata( \"tracker/validations/te-program_with_tea_fileresource_metadata.json\" );\n-\n-        TrackerValidationReport report = validate(\n+        setUpMetadata( \"tracker/validations/te-program-with-tea-mandatory-image.json\" );\n+        TrackerImportParams trackerImportParams = createBundleFromJson(\n             \"tracker/validations/te-program_with_tea_invalid_value_isnull.json\" );\n-\n-        assertEquals( 1, report.getErrorReports().size() );\n-\n-        printReport( report );\n-\n-        assertThat( report.getErrorReports(),\n+        TrackerImportReport trackerImportReport = trackerImportService.importTracker( trackerImportParams );\n+        assertEquals( 1, trackerImportReport.getValidationReport().getErrorReports().size() );\n+        assertThat( trackerImportReport.getValidationReport().getErrorReports(),\n             hasItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1076 ) ) ) );\n     }\n-\n-    private TrackerValidationReport validate( String path )\n-        throws IOException\n-    {\n-        TrackerImportParams trackerImportParams = fromJson(\n-            path,\n-            userService.getUser( ADMIN_USER_UID ) );\n-\n-        TrackerBundle trackerBundle = trackerBundleService.create( trackerImportParams );\n-\n-        return trackerValidationService.validate( trackerBundle );\n-    }\n-\n-    private TrackerValidationReport validate( String path, TrackerImportStrategy importStrategy )\n-        throws IOException\n-    {\n-        TrackerImportParams trackerImportParams = fromJson(\n-            path,\n-            userService.getUser( ADMIN_USER_UID ) );\n-        trackerImportParams.setImportStrategy( importStrategy );\n-\n-        TrackerBundle trackerBundle = trackerBundleService.create( trackerImportParams );\n-\n-        return trackerValidationService.validate( trackerBundle );\n-    }\n-\n-    private void validateAndCommit( String path )\n-        throws IOException\n-    {\n-        TrackerImportParams trackerImportParams = fromJson(\n-            path,\n-            userService.getUser( ADMIN_USER_UID ) );\n-\n-        TrackerBundle trackerBundle = trackerBundleService.create( trackerImportParams );\n-        TrackerValidationReport report = trackerValidationService.validate( trackerBundle );\n-\n-        assertEquals( 0, report.getErrorReports().size() );\n-\n-        trackerBundleService.commit( trackerBundleService.create( trackerImportParams ) );\n-    }\n-}\n\\ No newline at end of file\n+}\n", "next_change": {"commit": "7c0131dfcfbf72dad27dc5f0a3f6a776e286c79a", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/TeTaValidationTest.java b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/TeTaValidationTest.java\nindex ba7be84585..d54ce81840 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/TeTaValidationTest.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/TeTaValidationTest.java\n", "chunk": "@@ -245,8 +245,8 @@ class TeTaValidationTest extends AbstractImportValidationTest\n         TrackerImportParams trackerImportParams = createBundleFromJson(\n             \"tracker/validations/te-program_with_tea_invalid_value_isnull.json\" );\n         TrackerImportReport trackerImportReport = trackerImportService.importTracker( trackerImportParams );\n-        assertEquals( 1, trackerImportReport.getValidationReport().getErrorReports().size() );\n-        assertThat( trackerImportReport.getValidationReport().getErrorReports(),\n+        assertEquals( 1, trackerImportReport.getValidationReport().getErrors().size() );\n+        assertThat( trackerImportReport.getValidationReport().getErrors(),\n             hasItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1076 ) ) ) );\n     }\n }\n", "next_change": {"commit": "2f44bf54a94fca80ec8bef3a160d403665973bed", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/TeTaValidationTest.java b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/TeTaValidationTest.java\nindex d54ce81840..97c138bcf2 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/TeTaValidationTest.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/TeTaValidationTest.java\n", "chunk": "@@ -241,8 +188,7 @@ class TeTaValidationTest extends AbstractImportValidationTest\n     void testTeaIsNull()\n         throws IOException\n     {\n-        setUpMetadata( \"tracker/validations/te-program-with-tea-mandatory-image.json\" );\n-        TrackerImportParams trackerImportParams = createBundleFromJson(\n+        TrackerImportParams trackerImportParams = fromJson(\n             \"tracker/validations/te-program_with_tea_invalid_value_isnull.json\" );\n         TrackerImportReport trackerImportReport = trackerImportService.importTracker( trackerImportParams );\n         assertEquals( 1, trackerImportReport.getValidationReport().getErrors().size() );\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "message": "Merge commit", "committedDate": null}, {"oid": "cb2ee65c0210c0d4b2bd8851789da8d4adfaf04d", "committedDate": "2020-09-07 10:28:21 +0200", "message": "fix: [DHIS2-9287] Fix the stats in the import summary (#6062)"}, {"oid": "e1260b5e8fceb13c2883754236a34cdd652e1c1c", "committedDate": "2020-10-20 14:00:34 +0200", "message": "refactor: Load in the preheat all the data needed for uniqueness attr\u2026 (#6397)"}, {"oid": "3e799d196b8f73ad216ea100a07ddd5f7dfc53e0", "committedDate": "2020-11-30 16:37:14 +0100", "message": "fix: remove long running transaction during Tracker Import (#6782)"}, {"oid": "3ab88a5f4623a8c749246bedef34fcb926d185cb", "committedDate": "2020-12-08 10:40:14 +0100", "message": "fix: [DHIS2-7310] Move rule engine call and validations after bundle validation (#6843)"}, {"oid": "5e4669b4c89c809989ea600900735dd71baa86e2", "committedDate": "2020-12-23 14:00:18 +0700", "message": "feat: Upgrade Hibernate  (#6939)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "c0e9b28f4609a84d1287d93bc65f81321e00d78b", "committedDate": "2021-03-30 13:22:16 +0200", "message": "refactor: Removing uid field from tracker entities [TECH-579] (#7790)"}, {"oid": "60fe241badad5b1463bc3991eff2927abae32644", "committedDate": "2021-04-21 13:49:15 +0200", "message": "fix: [DHIS2-10797] Fix remove null values for tracker attributes and data values 2.37 (#7880)"}, {"oid": "1e75d833b15ed65163451abb7d4dfb99831484de", "committedDate": "2021-04-26 09:14:51 +0200", "message": "[TECH-454] DB access in TrackedEntityAttributeValidationHook 2.37 (#7905)"}, {"oid": "20dfefe359779d7e1c1921ba920465227e72f071", "committedDate": "2021-05-25 12:55:24 +0200", "message": "fix: Remove validations from objects deletion service in new tracker importer [DHIS2-10789] (#8053)"}, {"oid": "22d5da9d9a812b02eb5acd643112a6b050b5d63c", "committedDate": "2021-12-16 13:19:38 +0100", "message": "chore: migrate tests to JUnit 5 (#9467)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "7c0131dfcfbf72dad27dc5f0a3f6a776e286c79a", "committedDate": "2022-01-11 17:47:56 +0100", "message": "chore: make TrackerValidationReport add methods fluent and name Timing TECH-880 (#9601)"}, {"oid": "d99da048b6427aa16b080ab0a0e25eda4a2a0f96", "committedDate": "2022-05-09 13:53:18 +0200", "message": "feat: Refactor getCurrentUser() to return DHIS2 User object 2 (#10600)"}, {"oid": "2f44bf54a94fca80ec8bef3a160d403665973bed", "committedDate": "2022-05-23 06:02:37 +0200", "message": "chore: Clean up user management in tracker tests [TECH-890] (#10862)"}, {"oid": "6e83eba877030575456f919de1bce55fcae8e517", "committedDate": "2022-06-24 10:01:46 +0200", "message": "test: move all integration tests into own module TECH-1209 (#11148)"}]}, {"oid": "68c9d6c0ee6f2fd2462d63d9f3bef1a317f76ac6", "url": "https://github.com/dhis2/dhis2-core/commit/68c9d6c0ee6f2fd2462d63d9f3bef1a317f76ac6", "message": "* Fix PR comments\n\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>", "committedDate": "2020-06-29T09:54:26Z", "type": "commit"}, {"oid": "5bd4c4a413adbc1e587b0e1194af3da352084268", "url": "https://github.com/dhis2/dhis2-core/commit/5bd4c4a413adbc1e587b0e1194af3da352084268", "message": "* Fix PR comments\n\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>", "committedDate": "2020-06-29T10:43:21Z", "type": "commit"}, {"oid": "676b8ac99ef7302321ae87ed2f2f5ab6fef01c1e", "url": "https://github.com/dhis2/dhis2-core/commit/676b8ac99ef7302321ae87ed2f2f5ab6fef01c1e", "message": "* Fix PR comments\n\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>", "committedDate": "2020-06-29T10:52:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg3Mzk0MA==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446873940", "body": "This description seems incomplete.", "bodyText": "This description seems incomplete.", "bodyHTML": "<p dir=\"auto\">This description seems incomplete.</p>", "author": "stian-sandvold", "createdAt": "2020-06-29T08:57:11Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/ValidationFunction.java", "diffHunk": "@@ -0,0 +1,15 @@\n+package org.hisp.dhis.tracker.validation.hooks;\n+\n+import org.hisp.dhis.tracker.domain.TrackerDto;\n+import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n+\n+/**\n+ * Helper class to", "originalCommit": "12bd589850367af9ce124e78ea519bd7842cb3c5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3999d1c8e8d7c2bcd11c7c5d99fec179abd25e2b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/ValidationFunction.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/ValidationFunction.java\nindex df0d75b4ef..686e263d29 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/ValidationFunction.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/ValidationFunction.java\n", "chunk": "@@ -4,8 +4,6 @@ import org.hisp.dhis.tracker.domain.TrackerDto;\n import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n \n /**\n- * Helper class to\n- *\n  * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n  */\n @FunctionalInterface\n", "next_change": {"commit": "5a88b9789ef69ff8e77ed519a08a51be23a852b0", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/ValidationFunction.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/ValidationFunction.java\nindex 686e263d29..c487f36afc 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/ValidationFunction.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/ValidationFunction.java\n", "chunk": "@@ -1,13 +1,12 @@\n package org.hisp.dhis.tracker.validation.hooks;\n \n-import org.hisp.dhis.tracker.domain.TrackerDto;\n import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n \n /**\n  * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n  */\n @FunctionalInterface\n-public interface ValidationFunction<T extends TrackerDto>\n+public interface ValidationFunction<TrackerDto>\n {\n-    void validateTrackerDto( T obj, ValidationErrorReporter reportFork );\n+    void validateTrackerDto( TrackerDto obj, ValidationErrorReporter reportFork );\n }\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/ValidationFunction.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/ValidationFunction.java\nindex df0d75b4ef..c487f36afc 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/ValidationFunction.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/ValidationFunction.java\n", "chunk": "@@ -1,15 +1,12 @@\n package org.hisp.dhis.tracker.validation.hooks;\n \n-import org.hisp.dhis.tracker.domain.TrackerDto;\n import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n \n /**\n- * Helper class to\n- *\n  * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n  */\n @FunctionalInterface\n-public interface ValidationFunction<T extends TrackerDto>\n+public interface ValidationFunction<TrackerDto>\n {\n-    void validateTrackerDto( T obj, ValidationErrorReporter reportFork );\n+    void validateTrackerDto( TrackerDto obj, ValidationErrorReporter reportFork );\n }\n", "next_change": {"commit": "0bf55d776481f6511e5f9ebca5de1f2cf79777c0", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/ValidationFunction.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/ValidationFunction.java\ndeleted file mode 100644\nindex c487f36afc..0000000000\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/ValidationFunction.java\n+++ /dev/null\n", "chunk": "@@ -1,12 +0,0 @@\n-package org.hisp.dhis.tracker.validation.hooks;\n-\n-import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n-\n-/**\n- * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n- */\n-@FunctionalInterface\n-public interface ValidationFunction<TrackerDto>\n-{\n-    void validateTrackerDto( TrackerDto obj, ValidationErrorReporter reportFork );\n-}\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "message": "Merge commit", "committedDate": null}, {"oid": "0bf55d776481f6511e5f9ebca5de1f2cf79777c0", "committedDate": "2020-11-19 13:55:46 +0100", "message": "refactor: New Tracker Error reporting refactor (#6706)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg3NDcwOA==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446874708", "body": "I assume this will be removed before merging?", "bodyText": "I assume this will be removed before merging?", "bodyHTML": "<p dir=\"auto\">I assume this will be removed before merging?</p>", "author": "stian-sandvold", "createdAt": "2020-06-29T08:58:20Z", "path": "dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/tracker/TrackerController.java", "diffHunk": "@@ -90,13 +99,24 @@ public TrackerController(\n         this.notifier = notifier;\n     }\n \n+    @PostMapping( value = \"/empty\", consumes = MediaType.APPLICATION_JSON_VALUE )", "originalCommit": "12bd589850367af9ce124e78ea519bd7842cb3c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk5NzY5Ng==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446997696", "bodyText": "This is used for perf. testing. Will be removed", "author": "netroms", "createdAt": "2020-06-29T14:05:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg3NDcwOA=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "abaeefdbc659247ff8a9d6cb7302c9bd2bfe593d", "changed_code": [{"header": "diff --git a/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/tracker/TrackerController.java b/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/tracker/TrackerController.java\nindex f8d0116c30..70e2e23c73 100644\n--- a/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/tracker/TrackerController.java\n+++ b/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/tracker/TrackerController.java\n", "chunk": "@@ -99,16 +96,8 @@ public class TrackerController\n         this.notifier = notifier;\n     }\n \n-    @PostMapping( value = \"/empty\", consumes = MediaType.APPLICATION_JSON_VALUE )\n-    @ResponseStatus( HttpStatus.OK )\n-    public String emptyCall( HttpServletRequest request, HttpServletResponse response,\n-        User currentUser )\n-        throws IOException\n-    {\n-        return \"empty\";\n-    }\n-\n     @PostMapping( value = \"\", consumes = MediaType.APPLICATION_JSON_VALUE )\n+    @PreAuthorize( \"hasRole('ALL') or hasRole('F_TRACKER_IMPORTER_EXPERIMENTAL')\" )\n     public void postJsonTracker( HttpServletRequest request, HttpServletResponse response, User currentUser )\n         throws IOException\n     {\n", "next_change": {"commit": "0d35843121f0ad3004fad015f1520c5b06a5c337", "changed_code": [{"header": "diff --git a/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/tracker/TrackerController.java b/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/tracker/TrackerController.java\nindex 70e2e23c73..6d4365be90 100644\n--- a/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/tracker/TrackerController.java\n+++ b/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/tracker/TrackerController.java\n", "chunk": "@@ -98,33 +96,13 @@ public class TrackerController\n \n     @PostMapping( value = \"\", consumes = MediaType.APPLICATION_JSON_VALUE )\n     @PreAuthorize( \"hasRole('ALL') or hasRole('F_TRACKER_IMPORTER_EXPERIMENTAL')\" )\n-    public void postJsonTracker( HttpServletRequest request, HttpServletResponse response, User currentUser )\n-        throws IOException\n+    public void postJsonTracker()\n     {\n-        TrackerImportParams params = trackerImportService.getParamsFromMap( contextService.getParameterValuesMap() );\n-\n-        TrackerBundleParams trackerBundleParams = renderService\n-            .fromJson( request.getInputStream(), TrackerBundleParams.class );\n-        TrackerBundle trackerBundle = trackerBundleParams.toTrackerBundle();\n-        params.setTrackedEntities( trackerBundle.getTrackedEntities() );\n-        params.setEnrollments( trackerBundle.getEnrollments() );\n-        params.setEvents( trackerBundle.getEvents() );\n-        params.setRelationships( trackerBundle.getRelationships() );\n-        params.setUser( currentUser );\n-\n-        String jobId = trackerMessageManager.addJob( params );\n-\n-        String location = ContextUtils.getRootPath( request ) + \"/tracker/jobs/\" + jobId;\n-        response.setHeader( \"Location\", location );\n-        response.setContentType( MediaType.APPLICATION_JSON_VALUE );\n-\n-        renderService.toJson( response.getOutputStream(), new WebMessage()\n-            .setMessage( \"Tracker job added\" )\n-            .setResponse(\n-                TrackerJobWebMessageResponse.builder()\n-                    .id( jobId ).location( location )\n-                    .build()\n-            ) );\n+        /**\n+         * Returns NOT_IMPLEMENTED for 2.35, as the importer itself is not in a complete state, and should not be\n+         * used.\n+         */\n+        throw new HttpClientErrorException( HttpStatus.NOT_IMPLEMENTED );\n     }\n \n     @GetMapping( value = \"/jobs/{uid}\", produces = MediaType.APPLICATION_JSON_VALUE )\n", "next_change": {"commit": "d9d1554c3b9f582b0ca91d5142572730845902c2", "changed_code": [{"header": "diff --git a/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/tracker/TrackerController.java b/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/tracker/TrackerController.java\nindex 6d4365be90..2e90068e83 100644\n--- a/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/tracker/TrackerController.java\n+++ b/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/tracker/TrackerController.java\n", "chunk": "@@ -96,13 +93,32 @@ public class TrackerController\n \n     @PostMapping( value = \"\", consumes = MediaType.APPLICATION_JSON_VALUE )\n     @PreAuthorize( \"hasRole('ALL') or hasRole('F_TRACKER_IMPORTER_EXPERIMENTAL')\" )\n-    public void postJsonTracker()\n+    public void postJsonTracker( HttpServletRequest request, HttpServletResponse response, User currentUser )\n+        throws IOException\n     {\n-        /**\n-         * Returns NOT_IMPLEMENTED for 2.35, as the importer itself is not in a complete state, and should not be\n-         * used.\n-         */\n-        throw new HttpClientErrorException( HttpStatus.NOT_IMPLEMENTED );\n+        TrackerImportParams params = trackerImportService.getParamsFromMap( contextService.getParameterValuesMap() );\n+\n+        TrackerBundleParams trackerBundleParams = renderService\n+            .fromJson( request.getInputStream(), TrackerBundleParams.class );\n+        TrackerBundle trackerBundle = trackerBundleParams.toTrackerBundle();\n+        params.setTrackedEntities( trackerBundle.getTrackedEntities() );\n+        params.setEnrollments( trackerBundle.getEnrollments() );\n+        params.setEvents( trackerBundle.getEvents() );\n+        params.setRelationships( trackerBundle.getRelationships() );\n+        params.setUser( currentUser );\n+\n+        String jobId = trackerMessageManager.addJob( params );\n+\n+        String location = ContextUtils.getRootPath( request ) + \"/tracker/jobs/\" + jobId;\n+        response.setHeader( \"Location\", location );\n+        response.setContentType( MediaType.APPLICATION_JSON_VALUE );\n+\n+        renderService.toJson( response.getOutputStream(), new WebMessage()\n+            .setMessage( \"Tracker job added\" )\n+            .setResponse(\n+                TrackerJobWebMessageResponse.builder()\n+                    .id( jobId ).location( location )\n+                    .build() ) );\n     }\n \n     @GetMapping( value = \"/jobs/{uid}\", produces = MediaType.APPLICATION_JSON_VALUE )\n", "next_change": {"commit": "757b281ac024a43da56dc3f6b6bc477fe7f0ca82", "changed_code": [{"header": "diff --git a/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/tracker/TrackerController.java b/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/tracker/TrackerController.java\nindex 2e90068e83..0ebe88c291 100644\n--- a/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/tracker/TrackerController.java\n+++ b/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/tracker/TrackerController.java\n", "chunk": "@@ -77,50 +86,77 @@ public class TrackerController\n \n     private final Notifier notifier;\n \n-    public TrackerController(\n-        TrackerImportService trackerImportService,\n-        RenderService renderService,\n-        ContextService contextService,\n-        TrackerMessageManager trackerMessageManager,\n-        Notifier notifier )\n-    {\n-        this.trackerImportService = trackerImportService;\n-        this.renderService = renderService;\n-        this.contextService = contextService;\n-        this.trackerMessageManager = trackerMessageManager;\n-        this.notifier = notifier;\n-    }\n-\n     @PostMapping( value = \"\", consumes = MediaType.APPLICATION_JSON_VALUE )\n-    @PreAuthorize( \"hasRole('ALL') or hasRole('F_TRACKER_IMPORTER_EXPERIMENTAL')\" )\n-    public void postJsonTracker( HttpServletRequest request, HttpServletResponse response, User currentUser )\n+    // @PreAuthorize( \"hasRole('ALL') or hasRole('F_TRACKER_IMPORTER_EXPERIMENTAL')\" )\n+    public void asyncPostJsonTracker( HttpServletRequest request, HttpServletResponse response, User currentUser )\n         throws IOException\n     {\n-        TrackerImportParams params = trackerImportService.getParamsFromMap( contextService.getParameterValuesMap() );\n-\n-        TrackerBundleParams trackerBundleParams = renderService\n-            .fromJson( request.getInputStream(), TrackerBundleParams.class );\n-        TrackerBundle trackerBundle = trackerBundleParams.toTrackerBundle();\n-        params.setTrackedEntities( trackerBundle.getTrackedEntities() );\n-        params.setEnrollments( trackerBundle.getEnrollments() );\n-        params.setEvents( trackerBundle.getEvents() );\n-        params.setRelationships( trackerBundle.getRelationships() );\n-        params.setUser( currentUser );\n \n-        String jobId = trackerMessageManager.addJob( params );\n+        String jobId = trackerMessageManager.addJob(\n+            buildTrackerImportParams( request, currentUser ) );\n \n         String location = ContextUtils.getRootPath( request ) + \"/tracker/jobs/\" + jobId;\n         response.setHeader( \"Location\", location );\n         response.setContentType( MediaType.APPLICATION_JSON_VALUE );\n \n         renderService.toJson( response.getOutputStream(), new WebMessage()\n-            .setMessage( \"Tracker job added\" )\n+            .setMessage( TRACKER_JOB_ADDED )\n             .setResponse(\n                 TrackerJobWebMessageResponse.builder()\n                     .id( jobId ).location( location )\n                     .build() ) );\n     }\n \n+    @PostMapping( value = \"\", consumes = MediaType.APPLICATION_JSON_VALUE, params = { \"async=false\" } )\n+    // @PreAuthorize( \"hasRole('ALL') or hasRole('F_TRACKER_IMPORTER_EXPERIMENTAL')\" )\n+    public TrackerImportReport syncPostJsonTracker(\n+        @RequestParam( defaultValue = \"full\", required = false ) String reportMode,\n+        HttpServletRequest request, User currentUser )\n+    {\n+\n+        TrackerBundleReportMode trackerBundleReportMode = getTrackerBundleReportMode( reportMode );\n+\n+        TrackerImportReport trackerImportReport = trackerImportService.importTracker(\n+            buildTrackerImportParams( request, currentUser ) );\n+\n+        return trackerImportService.buildImportReport( trackerImportReport, trackerBundleReportMode );\n+\n+    }\n+\n+    private TrackerBundleReportMode getTrackerBundleReportMode( String reportMode )\n+    {\n+\n+        TrackerBundleReportMode trackerBundleReportMode;\n+        try\n+        {\n+            trackerBundleReportMode = TrackerBundleReportMode.valueOf( reportMode.toUpperCase() );\n+        }\n+        catch ( IllegalArgumentException e )\n+        {\n+            throw new HttpClientErrorException( HttpStatus.BAD_REQUEST,\n+                \"Value \" + reportMode + \" is not a valid report mode\" );\n+        }\n+        return trackerBundleReportMode;\n+    }\n+\n+    @SneakyThrows\n+    private TrackerImportParams buildTrackerImportParams( HttpServletRequest request, User currentUser )\n+    {\n+        TrackerImportParams.TrackerImportParamsBuilder paramsBuilder = TrackerImportParamsBuilder.builder( contextService.getParameterValuesMap() );\n+\n+        TrackerBundleParams trackerBundleParams = renderService.fromJson(\n+                request.getInputStream(),\n+                TrackerBundleParams.class );\n+\n+        return paramsBuilder\n+                .userId( currentUser.getUid() )\n+                .trackedEntities( trackerBundleParams.getTrackedEntities() )\n+                .enrollments( trackerBundleParams.getEnrollments() )\n+                .events( trackerBundleParams.getEvents() )\n+                .relationships( trackerBundleParams.getRelationships() )\n+                .build();\n+    }\n+\n     @GetMapping( value = \"/jobs/{uid}\", produces = MediaType.APPLICATION_JSON_VALUE )\n     public List<Notification> getJob( @PathVariable String uid, HttpServletResponse response )\n         throws HttpStatusCodeException\n", "next_change": {"commit": "adf7ed76f3dd8d7aa2369e710fc5256a5ae4967f", "changed_code": [{"header": "diff --git a/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/tracker/TrackerController.java b/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/tracker/TrackerImportController.java\nsimilarity index 92%\nrename from dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/tracker/TrackerController.java\nrename to dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/tracker/TrackerImportController.java\nindex 0ebe88c291..ce721c8422 100644\n--- a/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/tracker/TrackerController.java\n+++ b/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/tracker/TrackerImportController.java\n", "chunk": "@@ -157,7 +156,7 @@ public class TrackerController\n                 .build();\n     }\n \n-    @GetMapping( value = \"/jobs/{uid}\", produces = MediaType.APPLICATION_JSON_VALUE )\n+    @GetMapping( value = \"/jobs/{uid}\", produces = APPLICATION_JSON_VALUE )\n     public List<Notification> getJob( @PathVariable String uid, HttpServletResponse response )\n         throws HttpStatusCodeException\n     {\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "message": "Merge commit", "committedDate": null}, {"oid": "abaeefdbc659247ff8a9d6cb7302c9bd2bfe593d", "committedDate": "2020-07-13 13:53:32 +0200", "message": "chore: Revert 8879 testing features (#5842)"}, {"oid": "2ed799f33ca26b918ed60473a3f097714f00492e", "committedDate": "2020-08-04 10:30:01 +0200", "message": "chore: Clean up code (#5877)"}, {"oid": "0d35843121f0ad3004fad015f1520c5b06a5c337", "committedDate": "2020-09-15 09:24:33 +0200", "message": "Merge 2.35 into master (#6149)"}, {"oid": "20ae7d1ed19072116ee92e47a760e281039159ce", "committedDate": "2020-09-15 11:32:35 +0200", "message": "fix: [DHIS2-9428] Use report mode parameter to filter report data (#6122)"}, {"oid": "8aaeab2ee4dd7a9ffa927147931dff8609ef787a", "committedDate": "2020-09-23 15:33:34 +0200", "message": "chore: Remove unused imports (#6219)"}, {"oid": "d9d1554c3b9f582b0ca91d5142572730845902c2", "committedDate": "2020-10-19 11:13:36 +0200", "message": "fix: enable new tracker import endpoint (#6425)"}, {"oid": "3934daf1873ee7d70faa0058706c2409575865e5", "committedDate": "2020-10-23 12:21:16 +0200", "message": "fix: [DHIS2-9428] Made ERRORS as default reportMode and stats returned correctly (2.36) (#6477)"}, {"oid": "d095f2d4cf9aaac1e9aa973d4da6aa2f96104cc8", "committedDate": "2020-11-11 13:49:13 +0100", "message": "fix: allow validation to reference entities in the payload (#6617)"}, {"oid": "276f2354d945b8f34a5f2fd64681b28476c049e6", "committedDate": "2020-11-25 08:51:52 +0100", "message": "chore: Remove unused imports and fix code style issues (#6746)"}, {"oid": "3e799d196b8f73ad216ea100a07ddd5f7dfc53e0", "committedDate": "2020-11-30 16:37:14 +0100", "message": "fix: remove long running transaction during Tracker Import (#6782)"}, {"oid": "913d4ba468bf66783e901c4d43bd355d13cb16fa", "committedDate": "2020-12-02 16:44:17 +0100", "message": "refactor: Tracker Import params creation (#6814)"}, {"oid": "757b281ac024a43da56dc3f6b6bc477fe7f0ca82", "committedDate": "2020-12-21 10:09:12 +0100", "message": "feat: DHIS2-9084 new tracker import sync endpoint (#6932)"}, {"oid": "adf7ed76f3dd8d7aa2369e710fc5256a5ae4967f", "committedDate": "2021-01-05 12:57:24 +0100", "message": "Dhis2 10093  - New Tracker Importer GET endpoints (#6987)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg3NDk0MA==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446874940", "body": "Remember to add these back in before merging.", "bodyText": "Remember to add these back in before merging.", "bodyHTML": "<p dir=\"auto\">Remember to add these back in before merging.</p>", "author": "stian-sandvold", "createdAt": "2020-06-29T08:58:42Z", "path": "dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/tracker/TrackerController.java", "diffHunk": "@@ -90,13 +99,24 @@ public TrackerController(\n         this.notifier = notifier;\n     }\n \n+    @PostMapping( value = \"/empty\", consumes = MediaType.APPLICATION_JSON_VALUE )\n+    @ResponseStatus( HttpStatus.OK )\n+    public String emptyCall( HttpServletRequest request, HttpServletResponse response,\n+        User currentUser )\n+        throws IOException\n+    {\n+        return \"empty\";\n+    }\n+\n     @PostMapping( value = \"\", consumes = MediaType.APPLICATION_JSON_VALUE )\n-    @PreAuthorize( \"hasRole('ALL') or hasRole('F_TRACKER_IMPORTER_EXPERIMENTAL')\" )", "originalCommit": "12bd589850367af9ce124e78ea519bd7842cb3c5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "abaeefdbc659247ff8a9d6cb7302c9bd2bfe593d", "changed_code": [{"header": "diff --git a/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/tracker/TrackerController.java b/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/tracker/TrackerController.java\nindex f8d0116c30..70e2e23c73 100644\n--- a/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/tracker/TrackerController.java\n+++ b/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/tracker/TrackerController.java\n", "chunk": "@@ -99,16 +96,8 @@ public class TrackerController\n         this.notifier = notifier;\n     }\n \n-    @PostMapping( value = \"/empty\", consumes = MediaType.APPLICATION_JSON_VALUE )\n-    @ResponseStatus( HttpStatus.OK )\n-    public String emptyCall( HttpServletRequest request, HttpServletResponse response,\n-        User currentUser )\n-        throws IOException\n-    {\n-        return \"empty\";\n-    }\n-\n     @PostMapping( value = \"\", consumes = MediaType.APPLICATION_JSON_VALUE )\n+    @PreAuthorize( \"hasRole('ALL') or hasRole('F_TRACKER_IMPORTER_EXPERIMENTAL')\" )\n     public void postJsonTracker( HttpServletRequest request, HttpServletResponse response, User currentUser )\n         throws IOException\n     {\n", "next_change": {"commit": "0d35843121f0ad3004fad015f1520c5b06a5c337", "changed_code": [{"header": "diff --git a/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/tracker/TrackerController.java b/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/tracker/TrackerController.java\nindex 70e2e23c73..6d4365be90 100644\n--- a/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/tracker/TrackerController.java\n+++ b/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/tracker/TrackerController.java\n", "chunk": "@@ -98,33 +96,13 @@ public class TrackerController\n \n     @PostMapping( value = \"\", consumes = MediaType.APPLICATION_JSON_VALUE )\n     @PreAuthorize( \"hasRole('ALL') or hasRole('F_TRACKER_IMPORTER_EXPERIMENTAL')\" )\n-    public void postJsonTracker( HttpServletRequest request, HttpServletResponse response, User currentUser )\n-        throws IOException\n+    public void postJsonTracker()\n     {\n-        TrackerImportParams params = trackerImportService.getParamsFromMap( contextService.getParameterValuesMap() );\n-\n-        TrackerBundleParams trackerBundleParams = renderService\n-            .fromJson( request.getInputStream(), TrackerBundleParams.class );\n-        TrackerBundle trackerBundle = trackerBundleParams.toTrackerBundle();\n-        params.setTrackedEntities( trackerBundle.getTrackedEntities() );\n-        params.setEnrollments( trackerBundle.getEnrollments() );\n-        params.setEvents( trackerBundle.getEvents() );\n-        params.setRelationships( trackerBundle.getRelationships() );\n-        params.setUser( currentUser );\n-\n-        String jobId = trackerMessageManager.addJob( params );\n-\n-        String location = ContextUtils.getRootPath( request ) + \"/tracker/jobs/\" + jobId;\n-        response.setHeader( \"Location\", location );\n-        response.setContentType( MediaType.APPLICATION_JSON_VALUE );\n-\n-        renderService.toJson( response.getOutputStream(), new WebMessage()\n-            .setMessage( \"Tracker job added\" )\n-            .setResponse(\n-                TrackerJobWebMessageResponse.builder()\n-                    .id( jobId ).location( location )\n-                    .build()\n-            ) );\n+        /**\n+         * Returns NOT_IMPLEMENTED for 2.35, as the importer itself is not in a complete state, and should not be\n+         * used.\n+         */\n+        throw new HttpClientErrorException( HttpStatus.NOT_IMPLEMENTED );\n     }\n \n     @GetMapping( value = \"/jobs/{uid}\", produces = MediaType.APPLICATION_JSON_VALUE )\n", "next_change": {"commit": "d9d1554c3b9f582b0ca91d5142572730845902c2", "changed_code": [{"header": "diff --git a/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/tracker/TrackerController.java b/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/tracker/TrackerController.java\nindex 6d4365be90..2e90068e83 100644\n--- a/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/tracker/TrackerController.java\n+++ b/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/tracker/TrackerController.java\n", "chunk": "@@ -96,13 +93,32 @@ public class TrackerController\n \n     @PostMapping( value = \"\", consumes = MediaType.APPLICATION_JSON_VALUE )\n     @PreAuthorize( \"hasRole('ALL') or hasRole('F_TRACKER_IMPORTER_EXPERIMENTAL')\" )\n-    public void postJsonTracker()\n+    public void postJsonTracker( HttpServletRequest request, HttpServletResponse response, User currentUser )\n+        throws IOException\n     {\n-        /**\n-         * Returns NOT_IMPLEMENTED for 2.35, as the importer itself is not in a complete state, and should not be\n-         * used.\n-         */\n-        throw new HttpClientErrorException( HttpStatus.NOT_IMPLEMENTED );\n+        TrackerImportParams params = trackerImportService.getParamsFromMap( contextService.getParameterValuesMap() );\n+\n+        TrackerBundleParams trackerBundleParams = renderService\n+            .fromJson( request.getInputStream(), TrackerBundleParams.class );\n+        TrackerBundle trackerBundle = trackerBundleParams.toTrackerBundle();\n+        params.setTrackedEntities( trackerBundle.getTrackedEntities() );\n+        params.setEnrollments( trackerBundle.getEnrollments() );\n+        params.setEvents( trackerBundle.getEvents() );\n+        params.setRelationships( trackerBundle.getRelationships() );\n+        params.setUser( currentUser );\n+\n+        String jobId = trackerMessageManager.addJob( params );\n+\n+        String location = ContextUtils.getRootPath( request ) + \"/tracker/jobs/\" + jobId;\n+        response.setHeader( \"Location\", location );\n+        response.setContentType( MediaType.APPLICATION_JSON_VALUE );\n+\n+        renderService.toJson( response.getOutputStream(), new WebMessage()\n+            .setMessage( \"Tracker job added\" )\n+            .setResponse(\n+                TrackerJobWebMessageResponse.builder()\n+                    .id( jobId ).location( location )\n+                    .build() ) );\n     }\n \n     @GetMapping( value = \"/jobs/{uid}\", produces = MediaType.APPLICATION_JSON_VALUE )\n", "next_change": {"commit": "757b281ac024a43da56dc3f6b6bc477fe7f0ca82", "changed_code": [{"header": "diff --git a/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/tracker/TrackerController.java b/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/tracker/TrackerController.java\nindex 2e90068e83..0ebe88c291 100644\n--- a/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/tracker/TrackerController.java\n+++ b/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/tracker/TrackerController.java\n", "chunk": "@@ -77,50 +86,77 @@ public class TrackerController\n \n     private final Notifier notifier;\n \n-    public TrackerController(\n-        TrackerImportService trackerImportService,\n-        RenderService renderService,\n-        ContextService contextService,\n-        TrackerMessageManager trackerMessageManager,\n-        Notifier notifier )\n-    {\n-        this.trackerImportService = trackerImportService;\n-        this.renderService = renderService;\n-        this.contextService = contextService;\n-        this.trackerMessageManager = trackerMessageManager;\n-        this.notifier = notifier;\n-    }\n-\n     @PostMapping( value = \"\", consumes = MediaType.APPLICATION_JSON_VALUE )\n-    @PreAuthorize( \"hasRole('ALL') or hasRole('F_TRACKER_IMPORTER_EXPERIMENTAL')\" )\n-    public void postJsonTracker( HttpServletRequest request, HttpServletResponse response, User currentUser )\n+    // @PreAuthorize( \"hasRole('ALL') or hasRole('F_TRACKER_IMPORTER_EXPERIMENTAL')\" )\n+    public void asyncPostJsonTracker( HttpServletRequest request, HttpServletResponse response, User currentUser )\n         throws IOException\n     {\n-        TrackerImportParams params = trackerImportService.getParamsFromMap( contextService.getParameterValuesMap() );\n-\n-        TrackerBundleParams trackerBundleParams = renderService\n-            .fromJson( request.getInputStream(), TrackerBundleParams.class );\n-        TrackerBundle trackerBundle = trackerBundleParams.toTrackerBundle();\n-        params.setTrackedEntities( trackerBundle.getTrackedEntities() );\n-        params.setEnrollments( trackerBundle.getEnrollments() );\n-        params.setEvents( trackerBundle.getEvents() );\n-        params.setRelationships( trackerBundle.getRelationships() );\n-        params.setUser( currentUser );\n \n-        String jobId = trackerMessageManager.addJob( params );\n+        String jobId = trackerMessageManager.addJob(\n+            buildTrackerImportParams( request, currentUser ) );\n \n         String location = ContextUtils.getRootPath( request ) + \"/tracker/jobs/\" + jobId;\n         response.setHeader( \"Location\", location );\n         response.setContentType( MediaType.APPLICATION_JSON_VALUE );\n \n         renderService.toJson( response.getOutputStream(), new WebMessage()\n-            .setMessage( \"Tracker job added\" )\n+            .setMessage( TRACKER_JOB_ADDED )\n             .setResponse(\n                 TrackerJobWebMessageResponse.builder()\n                     .id( jobId ).location( location )\n                     .build() ) );\n     }\n \n+    @PostMapping( value = \"\", consumes = MediaType.APPLICATION_JSON_VALUE, params = { \"async=false\" } )\n+    // @PreAuthorize( \"hasRole('ALL') or hasRole('F_TRACKER_IMPORTER_EXPERIMENTAL')\" )\n+    public TrackerImportReport syncPostJsonTracker(\n+        @RequestParam( defaultValue = \"full\", required = false ) String reportMode,\n+        HttpServletRequest request, User currentUser )\n+    {\n+\n+        TrackerBundleReportMode trackerBundleReportMode = getTrackerBundleReportMode( reportMode );\n+\n+        TrackerImportReport trackerImportReport = trackerImportService.importTracker(\n+            buildTrackerImportParams( request, currentUser ) );\n+\n+        return trackerImportService.buildImportReport( trackerImportReport, trackerBundleReportMode );\n+\n+    }\n+\n+    private TrackerBundleReportMode getTrackerBundleReportMode( String reportMode )\n+    {\n+\n+        TrackerBundleReportMode trackerBundleReportMode;\n+        try\n+        {\n+            trackerBundleReportMode = TrackerBundleReportMode.valueOf( reportMode.toUpperCase() );\n+        }\n+        catch ( IllegalArgumentException e )\n+        {\n+            throw new HttpClientErrorException( HttpStatus.BAD_REQUEST,\n+                \"Value \" + reportMode + \" is not a valid report mode\" );\n+        }\n+        return trackerBundleReportMode;\n+    }\n+\n+    @SneakyThrows\n+    private TrackerImportParams buildTrackerImportParams( HttpServletRequest request, User currentUser )\n+    {\n+        TrackerImportParams.TrackerImportParamsBuilder paramsBuilder = TrackerImportParamsBuilder.builder( contextService.getParameterValuesMap() );\n+\n+        TrackerBundleParams trackerBundleParams = renderService.fromJson(\n+                request.getInputStream(),\n+                TrackerBundleParams.class );\n+\n+        return paramsBuilder\n+                .userId( currentUser.getUid() )\n+                .trackedEntities( trackerBundleParams.getTrackedEntities() )\n+                .enrollments( trackerBundleParams.getEnrollments() )\n+                .events( trackerBundleParams.getEvents() )\n+                .relationships( trackerBundleParams.getRelationships() )\n+                .build();\n+    }\n+\n     @GetMapping( value = \"/jobs/{uid}\", produces = MediaType.APPLICATION_JSON_VALUE )\n     public List<Notification> getJob( @PathVariable String uid, HttpServletResponse response )\n         throws HttpStatusCodeException\n", "next_change": {"commit": "adf7ed76f3dd8d7aa2369e710fc5256a5ae4967f", "changed_code": [{"header": "diff --git a/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/tracker/TrackerController.java b/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/tracker/TrackerImportController.java\nsimilarity index 92%\nrename from dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/tracker/TrackerController.java\nrename to dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/tracker/TrackerImportController.java\nindex 0ebe88c291..ce721c8422 100644\n--- a/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/tracker/TrackerController.java\n+++ b/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/tracker/TrackerImportController.java\n", "chunk": "@@ -157,7 +156,7 @@ public class TrackerController\n                 .build();\n     }\n \n-    @GetMapping( value = \"/jobs/{uid}\", produces = MediaType.APPLICATION_JSON_VALUE )\n+    @GetMapping( value = \"/jobs/{uid}\", produces = APPLICATION_JSON_VALUE )\n     public List<Notification> getJob( @PathVariable String uid, HttpServletResponse response )\n         throws HttpStatusCodeException\n     {\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "message": "Merge commit", "committedDate": null}, {"oid": "abaeefdbc659247ff8a9d6cb7302c9bd2bfe593d", "committedDate": "2020-07-13 13:53:32 +0200", "message": "chore: Revert 8879 testing features (#5842)"}, {"oid": "2ed799f33ca26b918ed60473a3f097714f00492e", "committedDate": "2020-08-04 10:30:01 +0200", "message": "chore: Clean up code (#5877)"}, {"oid": "0d35843121f0ad3004fad015f1520c5b06a5c337", "committedDate": "2020-09-15 09:24:33 +0200", "message": "Merge 2.35 into master (#6149)"}, {"oid": "20ae7d1ed19072116ee92e47a760e281039159ce", "committedDate": "2020-09-15 11:32:35 +0200", "message": "fix: [DHIS2-9428] Use report mode parameter to filter report data (#6122)"}, {"oid": "8aaeab2ee4dd7a9ffa927147931dff8609ef787a", "committedDate": "2020-09-23 15:33:34 +0200", "message": "chore: Remove unused imports (#6219)"}, {"oid": "d9d1554c3b9f582b0ca91d5142572730845902c2", "committedDate": "2020-10-19 11:13:36 +0200", "message": "fix: enable new tracker import endpoint (#6425)"}, {"oid": "3934daf1873ee7d70faa0058706c2409575865e5", "committedDate": "2020-10-23 12:21:16 +0200", "message": "fix: [DHIS2-9428] Made ERRORS as default reportMode and stats returned correctly (2.36) (#6477)"}, {"oid": "d095f2d4cf9aaac1e9aa973d4da6aa2f96104cc8", "committedDate": "2020-11-11 13:49:13 +0100", "message": "fix: allow validation to reference entities in the payload (#6617)"}, {"oid": "276f2354d945b8f34a5f2fd64681b28476c049e6", "committedDate": "2020-11-25 08:51:52 +0100", "message": "chore: Remove unused imports and fix code style issues (#6746)"}, {"oid": "3e799d196b8f73ad216ea100a07ddd5f7dfc53e0", "committedDate": "2020-11-30 16:37:14 +0100", "message": "fix: remove long running transaction during Tracker Import (#6782)"}, {"oid": "913d4ba468bf66783e901c4d43bd355d13cb16fa", "committedDate": "2020-12-02 16:44:17 +0100", "message": "refactor: Tracker Import params creation (#6814)"}, {"oid": "757b281ac024a43da56dc3f6b6bc477fe7f0ca82", "committedDate": "2020-12-21 10:09:12 +0100", "message": "feat: DHIS2-9084 new tracker import sync endpoint (#6932)"}, {"oid": "adf7ed76f3dd8d7aa2369e710fc5256a5ae4967f", "committedDate": "2021-01-05 12:57:24 +0100", "message": "Dhis2 10093  - New Tracker Importer GET endpoints (#6987)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg3NTkzMA==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446875930", "body": "Remove this before merge?\r\n\r\nSince we want a sync option, maybe we could take some of this code and reuse in a new PR for adding sync import.", "bodyText": "Remove this before merge?\nSince we want a sync option, maybe we could take some of this code and reuse in a new PR for adding sync import.", "bodyHTML": "<p dir=\"auto\">Remove this before merge?</p>\n<p dir=\"auto\">Since we want a sync option, maybe we could take some of this code and reuse in a new PR for adding sync import.</p>", "author": "stian-sandvold", "createdAt": "2020-06-29T09:00:11Z", "path": "dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/tracker/TrackerController.java", "diffHunk": "@@ -118,8 +138,46 @@ public void postJsonTracker( HttpServletRequest request, HttpServletResponse res\n             ) );\n     }\n \n+    @PostMapping( value = \"/sync\", consumes = MediaType.APPLICATION_JSON_VALUE )\n+    public TrackerImportReport postJsonTrackerSync( HttpServletRequest request, HttpServletResponse response,", "originalCommit": "12bd589850367af9ce124e78ea519bd7842cb3c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk5NzQxMg==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446997412", "bodyText": "Yes, this was very convenient for doing the perf testing. Will remove before merge.", "author": "netroms", "createdAt": "2020-06-29T14:05:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg3NTkzMA=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "abaeefdbc659247ff8a9d6cb7302c9bd2bfe593d", "changed_code": [{"header": "diff --git a/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/tracker/TrackerController.java b/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/tracker/TrackerController.java\nindex f8d0116c30..70e2e23c73 100644\n--- a/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/tracker/TrackerController.java\n+++ b/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/tracker/TrackerController.java\n", "chunk": "@@ -138,43 +127,6 @@ public class TrackerController\n             ) );\n     }\n \n-    @PostMapping( value = \"/sync\", consumes = MediaType.APPLICATION_JSON_VALUE )\n-    public TrackerImportReport postJsonTrackerSync( HttpServletRequest request, HttpServletResponse response,\n-        User currentUser )\n-        throws IOException\n-    {\n-        Timer totalTimer = new SystemTimer().start();\n-\n-        Timer prepareReqTimer = new SystemTimer().start();\n-\n-        TrackerImportParams params = trackerImportService.getParamsFromMap( contextService.getParameterValuesMap() );\n-        TrackerBundleParams trackerBundleParams = renderService\n-            .fromJson( request.getInputStream(), TrackerBundleParams.class );\n-\n-        TrackerBundle trackerBundle = trackerBundleParams.toTrackerBundle();\n-        params.setTrackedEntities( trackerBundle.getTrackedEntities() );\n-        params.setEnrollments( trackerBundle.getEnrollments() );\n-        params.setEvents( trackerBundle.getEvents() );\n-        params.setRelationships( trackerBundle.getRelationships() );\n-        params.setUser( currentUser );\n-\n-        String prepareReqTotalFormatted = prepareReqTimer.toString();\n-\n-        TrackerImportReport trackerImportReport = trackerImportService.importTracker( params );\n-\n-        response.setContentType( MediaType.APPLICATION_JSON_VALUE );\n-\n-        if ( trackerImportReport != null )\n-        {\n-            trackerImportReport.getTimings().setTotalRequest( totalTimer.toString() );\n-            trackerImportReport.getTimings().setPrepareRequest( prepareReqTotalFormatted );\n-\n-            return trackerImportReport;\n-        }\n-\n-        throw new HttpClientErrorException( HttpStatus.INTERNAL_SERVER_ERROR );\n-    }\n-\n     @GetMapping( value = \"/jobs/{uid}\", produces = MediaType.APPLICATION_JSON_VALUE )\n     public List<Notification> getJob( @PathVariable String uid, HttpServletResponse response )\n         throws HttpStatusCodeException\n", "next_change": {"commit": "0d35843121f0ad3004fad015f1520c5b06a5c337", "changed_code": [{"header": "diff --git a/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/tracker/TrackerController.java b/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/tracker/TrackerController.java\nindex 70e2e23c73..6d4365be90 100644\n--- a/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/tracker/TrackerController.java\n+++ b/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/tracker/TrackerController.java\n", "chunk": "@@ -98,33 +96,13 @@ public class TrackerController\n \n     @PostMapping( value = \"\", consumes = MediaType.APPLICATION_JSON_VALUE )\n     @PreAuthorize( \"hasRole('ALL') or hasRole('F_TRACKER_IMPORTER_EXPERIMENTAL')\" )\n-    public void postJsonTracker( HttpServletRequest request, HttpServletResponse response, User currentUser )\n-        throws IOException\n+    public void postJsonTracker()\n     {\n-        TrackerImportParams params = trackerImportService.getParamsFromMap( contextService.getParameterValuesMap() );\n-\n-        TrackerBundleParams trackerBundleParams = renderService\n-            .fromJson( request.getInputStream(), TrackerBundleParams.class );\n-        TrackerBundle trackerBundle = trackerBundleParams.toTrackerBundle();\n-        params.setTrackedEntities( trackerBundle.getTrackedEntities() );\n-        params.setEnrollments( trackerBundle.getEnrollments() );\n-        params.setEvents( trackerBundle.getEvents() );\n-        params.setRelationships( trackerBundle.getRelationships() );\n-        params.setUser( currentUser );\n-\n-        String jobId = trackerMessageManager.addJob( params );\n-\n-        String location = ContextUtils.getRootPath( request ) + \"/tracker/jobs/\" + jobId;\n-        response.setHeader( \"Location\", location );\n-        response.setContentType( MediaType.APPLICATION_JSON_VALUE );\n-\n-        renderService.toJson( response.getOutputStream(), new WebMessage()\n-            .setMessage( \"Tracker job added\" )\n-            .setResponse(\n-                TrackerJobWebMessageResponse.builder()\n-                    .id( jobId ).location( location )\n-                    .build()\n-            ) );\n+        /**\n+         * Returns NOT_IMPLEMENTED for 2.35, as the importer itself is not in a complete state, and should not be\n+         * used.\n+         */\n+        throw new HttpClientErrorException( HttpStatus.NOT_IMPLEMENTED );\n     }\n \n     @GetMapping( value = \"/jobs/{uid}\", produces = MediaType.APPLICATION_JSON_VALUE )\n", "next_change": {"commit": "d9d1554c3b9f582b0ca91d5142572730845902c2", "changed_code": [{"header": "diff --git a/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/tracker/TrackerController.java b/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/tracker/TrackerController.java\nindex 6d4365be90..2e90068e83 100644\n--- a/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/tracker/TrackerController.java\n+++ b/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/tracker/TrackerController.java\n", "chunk": "@@ -96,13 +93,32 @@ public class TrackerController\n \n     @PostMapping( value = \"\", consumes = MediaType.APPLICATION_JSON_VALUE )\n     @PreAuthorize( \"hasRole('ALL') or hasRole('F_TRACKER_IMPORTER_EXPERIMENTAL')\" )\n-    public void postJsonTracker()\n+    public void postJsonTracker( HttpServletRequest request, HttpServletResponse response, User currentUser )\n+        throws IOException\n     {\n-        /**\n-         * Returns NOT_IMPLEMENTED for 2.35, as the importer itself is not in a complete state, and should not be\n-         * used.\n-         */\n-        throw new HttpClientErrorException( HttpStatus.NOT_IMPLEMENTED );\n+        TrackerImportParams params = trackerImportService.getParamsFromMap( contextService.getParameterValuesMap() );\n+\n+        TrackerBundleParams trackerBundleParams = renderService\n+            .fromJson( request.getInputStream(), TrackerBundleParams.class );\n+        TrackerBundle trackerBundle = trackerBundleParams.toTrackerBundle();\n+        params.setTrackedEntities( trackerBundle.getTrackedEntities() );\n+        params.setEnrollments( trackerBundle.getEnrollments() );\n+        params.setEvents( trackerBundle.getEvents() );\n+        params.setRelationships( trackerBundle.getRelationships() );\n+        params.setUser( currentUser );\n+\n+        String jobId = trackerMessageManager.addJob( params );\n+\n+        String location = ContextUtils.getRootPath( request ) + \"/tracker/jobs/\" + jobId;\n+        response.setHeader( \"Location\", location );\n+        response.setContentType( MediaType.APPLICATION_JSON_VALUE );\n+\n+        renderService.toJson( response.getOutputStream(), new WebMessage()\n+            .setMessage( \"Tracker job added\" )\n+            .setResponse(\n+                TrackerJobWebMessageResponse.builder()\n+                    .id( jobId ).location( location )\n+                    .build() ) );\n     }\n \n     @GetMapping( value = \"/jobs/{uid}\", produces = MediaType.APPLICATION_JSON_VALUE )\n", "next_change": {"commit": "757b281ac024a43da56dc3f6b6bc477fe7f0ca82", "changed_code": [{"header": "diff --git a/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/tracker/TrackerController.java b/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/tracker/TrackerController.java\nindex 2e90068e83..0ebe88c291 100644\n--- a/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/tracker/TrackerController.java\n+++ b/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/tracker/TrackerController.java\n", "chunk": "@@ -77,50 +86,77 @@ public class TrackerController\n \n     private final Notifier notifier;\n \n-    public TrackerController(\n-        TrackerImportService trackerImportService,\n-        RenderService renderService,\n-        ContextService contextService,\n-        TrackerMessageManager trackerMessageManager,\n-        Notifier notifier )\n-    {\n-        this.trackerImportService = trackerImportService;\n-        this.renderService = renderService;\n-        this.contextService = contextService;\n-        this.trackerMessageManager = trackerMessageManager;\n-        this.notifier = notifier;\n-    }\n-\n     @PostMapping( value = \"\", consumes = MediaType.APPLICATION_JSON_VALUE )\n-    @PreAuthorize( \"hasRole('ALL') or hasRole('F_TRACKER_IMPORTER_EXPERIMENTAL')\" )\n-    public void postJsonTracker( HttpServletRequest request, HttpServletResponse response, User currentUser )\n+    // @PreAuthorize( \"hasRole('ALL') or hasRole('F_TRACKER_IMPORTER_EXPERIMENTAL')\" )\n+    public void asyncPostJsonTracker( HttpServletRequest request, HttpServletResponse response, User currentUser )\n         throws IOException\n     {\n-        TrackerImportParams params = trackerImportService.getParamsFromMap( contextService.getParameterValuesMap() );\n-\n-        TrackerBundleParams trackerBundleParams = renderService\n-            .fromJson( request.getInputStream(), TrackerBundleParams.class );\n-        TrackerBundle trackerBundle = trackerBundleParams.toTrackerBundle();\n-        params.setTrackedEntities( trackerBundle.getTrackedEntities() );\n-        params.setEnrollments( trackerBundle.getEnrollments() );\n-        params.setEvents( trackerBundle.getEvents() );\n-        params.setRelationships( trackerBundle.getRelationships() );\n-        params.setUser( currentUser );\n \n-        String jobId = trackerMessageManager.addJob( params );\n+        String jobId = trackerMessageManager.addJob(\n+            buildTrackerImportParams( request, currentUser ) );\n \n         String location = ContextUtils.getRootPath( request ) + \"/tracker/jobs/\" + jobId;\n         response.setHeader( \"Location\", location );\n         response.setContentType( MediaType.APPLICATION_JSON_VALUE );\n \n         renderService.toJson( response.getOutputStream(), new WebMessage()\n-            .setMessage( \"Tracker job added\" )\n+            .setMessage( TRACKER_JOB_ADDED )\n             .setResponse(\n                 TrackerJobWebMessageResponse.builder()\n                     .id( jobId ).location( location )\n                     .build() ) );\n     }\n \n+    @PostMapping( value = \"\", consumes = MediaType.APPLICATION_JSON_VALUE, params = { \"async=false\" } )\n+    // @PreAuthorize( \"hasRole('ALL') or hasRole('F_TRACKER_IMPORTER_EXPERIMENTAL')\" )\n+    public TrackerImportReport syncPostJsonTracker(\n+        @RequestParam( defaultValue = \"full\", required = false ) String reportMode,\n+        HttpServletRequest request, User currentUser )\n+    {\n+\n+        TrackerBundleReportMode trackerBundleReportMode = getTrackerBundleReportMode( reportMode );\n+\n+        TrackerImportReport trackerImportReport = trackerImportService.importTracker(\n+            buildTrackerImportParams( request, currentUser ) );\n+\n+        return trackerImportService.buildImportReport( trackerImportReport, trackerBundleReportMode );\n+\n+    }\n+\n+    private TrackerBundleReportMode getTrackerBundleReportMode( String reportMode )\n+    {\n+\n+        TrackerBundleReportMode trackerBundleReportMode;\n+        try\n+        {\n+            trackerBundleReportMode = TrackerBundleReportMode.valueOf( reportMode.toUpperCase() );\n+        }\n+        catch ( IllegalArgumentException e )\n+        {\n+            throw new HttpClientErrorException( HttpStatus.BAD_REQUEST,\n+                \"Value \" + reportMode + \" is not a valid report mode\" );\n+        }\n+        return trackerBundleReportMode;\n+    }\n+\n+    @SneakyThrows\n+    private TrackerImportParams buildTrackerImportParams( HttpServletRequest request, User currentUser )\n+    {\n+        TrackerImportParams.TrackerImportParamsBuilder paramsBuilder = TrackerImportParamsBuilder.builder( contextService.getParameterValuesMap() );\n+\n+        TrackerBundleParams trackerBundleParams = renderService.fromJson(\n+                request.getInputStream(),\n+                TrackerBundleParams.class );\n+\n+        return paramsBuilder\n+                .userId( currentUser.getUid() )\n+                .trackedEntities( trackerBundleParams.getTrackedEntities() )\n+                .enrollments( trackerBundleParams.getEnrollments() )\n+                .events( trackerBundleParams.getEvents() )\n+                .relationships( trackerBundleParams.getRelationships() )\n+                .build();\n+    }\n+\n     @GetMapping( value = \"/jobs/{uid}\", produces = MediaType.APPLICATION_JSON_VALUE )\n     public List<Notification> getJob( @PathVariable String uid, HttpServletResponse response )\n         throws HttpStatusCodeException\n", "next_change": {"commit": "adf7ed76f3dd8d7aa2369e710fc5256a5ae4967f", "changed_code": [{"header": "diff --git a/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/tracker/TrackerController.java b/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/tracker/TrackerImportController.java\nsimilarity index 92%\nrename from dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/tracker/TrackerController.java\nrename to dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/tracker/TrackerImportController.java\nindex 0ebe88c291..ce721c8422 100644\n--- a/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/tracker/TrackerController.java\n+++ b/dhis-2/dhis-web/dhis-web-api/src/main/java/org/hisp/dhis/webapi/controller/tracker/TrackerImportController.java\n", "chunk": "@@ -157,7 +156,7 @@ public class TrackerController\n                 .build();\n     }\n \n-    @GetMapping( value = \"/jobs/{uid}\", produces = MediaType.APPLICATION_JSON_VALUE )\n+    @GetMapping( value = \"/jobs/{uid}\", produces = APPLICATION_JSON_VALUE )\n     public List<Notification> getJob( @PathVariable String uid, HttpServletResponse response )\n         throws HttpStatusCodeException\n     {\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "message": "Merge commit", "committedDate": null}, {"oid": "abaeefdbc659247ff8a9d6cb7302c9bd2bfe593d", "committedDate": "2020-07-13 13:53:32 +0200", "message": "chore: Revert 8879 testing features (#5842)"}, {"oid": "2ed799f33ca26b918ed60473a3f097714f00492e", "committedDate": "2020-08-04 10:30:01 +0200", "message": "chore: Clean up code (#5877)"}, {"oid": "0d35843121f0ad3004fad015f1520c5b06a5c337", "committedDate": "2020-09-15 09:24:33 +0200", "message": "Merge 2.35 into master (#6149)"}, {"oid": "20ae7d1ed19072116ee92e47a760e281039159ce", "committedDate": "2020-09-15 11:32:35 +0200", "message": "fix: [DHIS2-9428] Use report mode parameter to filter report data (#6122)"}, {"oid": "8aaeab2ee4dd7a9ffa927147931dff8609ef787a", "committedDate": "2020-09-23 15:33:34 +0200", "message": "chore: Remove unused imports (#6219)"}, {"oid": "d9d1554c3b9f582b0ca91d5142572730845902c2", "committedDate": "2020-10-19 11:13:36 +0200", "message": "fix: enable new tracker import endpoint (#6425)"}, {"oid": "3934daf1873ee7d70faa0058706c2409575865e5", "committedDate": "2020-10-23 12:21:16 +0200", "message": "fix: [DHIS2-9428] Made ERRORS as default reportMode and stats returned correctly (2.36) (#6477)"}, {"oid": "d095f2d4cf9aaac1e9aa973d4da6aa2f96104cc8", "committedDate": "2020-11-11 13:49:13 +0100", "message": "fix: allow validation to reference entities in the payload (#6617)"}, {"oid": "276f2354d945b8f34a5f2fd64681b28476c049e6", "committedDate": "2020-11-25 08:51:52 +0100", "message": "chore: Remove unused imports and fix code style issues (#6746)"}, {"oid": "3e799d196b8f73ad216ea100a07ddd5f7dfc53e0", "committedDate": "2020-11-30 16:37:14 +0100", "message": "fix: remove long running transaction during Tracker Import (#6782)"}, {"oid": "913d4ba468bf66783e901c4d43bd355d13cb16fa", "committedDate": "2020-12-02 16:44:17 +0100", "message": "refactor: Tracker Import params creation (#6814)"}, {"oid": "757b281ac024a43da56dc3f6b6bc477fe7f0ca82", "committedDate": "2020-12-21 10:09:12 +0100", "message": "feat: DHIS2-9084 new tracker import sync endpoint (#6932)"}, {"oid": "adf7ed76f3dd8d7aa2369e710fc5256a5ae4967f", "committedDate": "2021-01-05 12:57:24 +0100", "message": "Dhis2 10093  - New Tracker Importer GET endpoints (#6987)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg4MDczMg==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446880732", "body": "These can be uncommented if we revert the payload changes", "bodyText": "These can be uncommented if we revert the payload changes", "bodyHTML": "<p dir=\"auto\">These can be uncommented if we revert the payload changes</p>", "author": "stian-sandvold", "createdAt": "2020-06-29T09:46:15Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java", "diffHunk": "@@ -0,0 +1,206 @@\n+package org.hisp.dhis.tracker.validation.hooks;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.hisp.dhis.event.EventStatus;\n+import org.hisp.dhis.period.Period;\n+import org.hisp.dhis.period.PeriodType;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.tracker.TrackerImportStrategy;\n+import org.hisp.dhis.tracker.domain.Event;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n+import org.hisp.dhis.tracker.validation.TrackerImportValidationContext;\n+import org.hisp.dhis.user.User;\n+import org.hisp.dhis.util.DateUtils;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Date;\n+import java.util.Objects;\n+\n+import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+@Component\n+public class EventDateValidationHook\n+    extends AbstractTrackerDtoValidationHook\n+{\n+    public EventDateValidationHook()\n+    {\n+        super( Event.class, TrackerImportStrategy.CREATE_AND_UPDATE );\n+    }\n+\n+    @Override\n+    public void validateEvent( ValidationErrorReporter reporter, Event event )\n+    {\n+        TrackerImportValidationContext context = reporter.getValidationContext();\n+\n+        if ( EventStatus.ACTIVE == event.getStatus() && event.getOccurredAt() == null )\n+        {\n+            reporter.addError( newReport( TrackerErrorCode.E1031 )\n+                .addArg( event ) );\n+            return;\n+        }\n+\n+        ProgramStageInstance programStageInstance = context.getProgramStageInstance( event.getEvent() );\n+        Program program = context.getProgram( event.getProgram() );\n+\n+        validateDateFormat( reporter, event );\n+        validateExpiryDays( reporter, event, program, programStageInstance, context.getBundle().getUser() );\n+        validatePeriodType( reporter, event, program, programStageInstance );\n+    }\n+\n+    private void validateExpiryDays( ValidationErrorReporter reporter, Event event, Program program,\n+        ProgramStageInstance programStageInstance, User actingUser )\n+    {\n+        Objects.requireNonNull( actingUser, TrackerImporterAssertErrors.USER_CANT_BE_NULL );\n+        Objects.requireNonNull( event, TrackerImporterAssertErrors.EVENT_CANT_BE_NULL );\n+        Objects.requireNonNull( program, TrackerImporterAssertErrors.PROGRAM_CANT_BE_NULL );\n+\n+        if ( (program.getCompleteEventsExpiryDays() > 0 && EventStatus.COMPLETED == event.getStatus())\n+            || (programStageInstance != null && EventStatus.COMPLETED == programStageInstance.getStatus()) )\n+        {\n+            //TODO: Should we make an error here? Feels like this is out of place, should be moved to the auth layer.\n+//            if ( actingUser.isAuthorized( Authorities.F_EDIT_EXPIRED.getAuthority() ) )\n+//            {\n+//                return;\n+//            }\n+\n+            Date completedDate = null;\n+\n+            if ( programStageInstance != null )\n+            {\n+                completedDate = programStageInstance.getCompletedDate();\n+            }\n+\n+            else if ( event.getCompletedAt() != null )\n+            {\n+                completedDate = DateUtils.parseDate( event.getCompletedAt() );\n+            }\n+\n+            if ( completedDate == null )\n+            {\n+                reporter.addError( newReport( TrackerErrorCode.E1042 )\n+                    .addArg( event ) );\n+            }\n+\n+            //TODO: This is troublesome, according to the error text this actually an auth check...\n+            // This should probably we moved and merged with the auth check on isAuthorized F_EDIT_EXPIRED above\n+            if ( completedDate != null && (new Date())\n+                .after( DateUtils.getDateAfterAddition( completedDate, program.getCompleteEventsExpiryDays() ) ) )\n+            {\n+                reporter.addError( newReport( TrackerErrorCode.E1043 )\n+                    .addArg( event ) );\n+            }\n+        }\n+    }\n+\n+    private void validatePeriodType( ValidationErrorReporter reporter, Event event,\n+        Program program, ProgramStageInstance programStageInstance )\n+    {\n+        Objects.requireNonNull( event, TrackerImporterAssertErrors.EVENT_CANT_BE_NULL );\n+        Objects.requireNonNull( program, TrackerImporterAssertErrors.PROGRAM_CANT_BE_NULL );\n+\n+        //TODO: Cant find any reference outside validation code... is this still in use?\n+        PeriodType periodType = program.getExpiryPeriodType();\n+\n+        if ( periodType == null || program.getExpiryDays() == 0 )\n+        {\n+            // Nothing more to check here, return out\n+            return;\n+        }\n+\n+        if ( programStageInstance != null )\n+        {\n+            if ( programStageInstance.getExecutionDate() == null )\n+            {\n+                reporter.addError( newReport( TrackerErrorCode.E1044 )\n+                    .addArg( event ) );\n+            }\n+\n+            Period period = periodType.createPeriod( programStageInstance.getExecutionDate() );\n+\n+            if ( (new Date()).after(\n+                DateUtils.getDateAfterAddition( period.getEndDate(), program.getExpiryDays() ) ) )\n+            {\n+                reporter.addError( newReport( TrackerErrorCode.E1045 )\n+                    .addArg( program ) );\n+            }\n+        }\n+        else\n+        {\n+            String referenceDate = event.getOccurredAt() != null ? event.getOccurredAt() : event.getScheduledAt();\n+            if ( referenceDate == null )\n+            {\n+                reporter.addError( newReport( TrackerErrorCode.E1046 )\n+                    .addArg( event ) );\n+            }\n+\n+            Period period = periodType.createPeriod( new Date() );\n+\n+            if ( DateUtils.parseDate( referenceDate ).before( period.getStartDate() ) )\n+            {\n+                reporter.addError( newReport( TrackerErrorCode.E1047 )\n+                    .addArg( event ) );\n+            }\n+        }\n+    }\n+\n+    private void validateDateFormat( ValidationErrorReporter reporter, Event event )\n+    {\n+        Objects.requireNonNull( event, TrackerImporterAssertErrors.EVENT_CANT_BE_NULL );\n+\n+        if ( event.getScheduledAt() != null && isNotValidDateString( event.getScheduledAt() ) )\n+        {\n+            reporter.addError( newReport( TrackerErrorCode.E1051 )\n+                .addArg( event.getScheduledAt() ) );\n+        }\n+\n+        if ( event.getOccurredAt() != null && isNotValidDateString( event.getOccurredAt() ) )\n+        {\n+            reporter.addError( newReport( TrackerErrorCode.E1052 )\n+                .addArg( event.getOccurredAt() ) );\n+        }\n+\n+//        if ( event.getCreatedAtClient() != null && isNotValidDateString( event.getCreatedAtClient() ) )", "originalCommit": "12bd589850367af9ce124e78ea519bd7842cb3c5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0c469e1350e645b019954827553da9f855b7dcb4", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\nindex fef74c6604..7193a1437f 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n", "chunk": "@@ -190,17 +172,5 @@ public class EventDateValidationHook\n             reporter.addError( newReport( TrackerErrorCode.E1052 )\n                 .addArg( event.getOccurredAt() ) );\n         }\n-\n-//        if ( event.getCreatedAtClient() != null && isNotValidDateString( event.getCreatedAtClient() ) )\n-//        {\n-//            reporter.addError( newReport( TrackerErrorCode.E1053 )\n-//                .addArg( event.getCreatedAtClient() ) );\n-//        }\n-//\n-//        if ( event.getLastUpdatedAtClient() != null && isNotValidDateString( event.getLastUpdatedAtClient() ) )\n-//        {\n-//            reporter.addError( newReport( TrackerErrorCode.E1054 )\n-//                .addArg( event.getLastUpdatedAtClient() ) );\n-//        }\n     }\n }\n\\ No newline at end of file\n", "next_change": null}]}, "revised_code_in_main": {"commit": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\nindex fef74c6604..90f9e376a4 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n", "chunk": "@@ -190,17 +163,5 @@ public class EventDateValidationHook\n             reporter.addError( newReport( TrackerErrorCode.E1052 )\n                 .addArg( event.getOccurredAt() ) );\n         }\n-\n-//        if ( event.getCreatedAtClient() != null && isNotValidDateString( event.getCreatedAtClient() ) )\n-//        {\n-//            reporter.addError( newReport( TrackerErrorCode.E1053 )\n-//                .addArg( event.getCreatedAtClient() ) );\n-//        }\n-//\n-//        if ( event.getLastUpdatedAtClient() != null && isNotValidDateString( event.getLastUpdatedAtClient() ) )\n-//        {\n-//            reporter.addError( newReport( TrackerErrorCode.E1054 )\n-//                .addArg( event.getLastUpdatedAtClient() ) );\n-//        }\n     }\n }\n\\ No newline at end of file\n", "next_change": {"commit": "3e3b32e56ff5554a0095396eddffceac65b6b8de", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\nindex 90f9e376a4..4fa4affc84 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n", "chunk": "@@ -154,14 +149,12 @@ public class EventDateValidationHook\n \n         if ( event.getScheduledAt() != null && isNotValidDateString( event.getScheduledAt() ) )\n         {\n-            reporter.addError( newReport( TrackerErrorCode.E1051 )\n-                .addArg( event.getScheduledAt() ) );\n+            addError( reporter, E1051, event.getScheduledAt() );\n         }\n \n         if ( event.getOccurredAt() != null && isNotValidDateString( event.getOccurredAt() ) )\n         {\n-            reporter.addError( newReport( TrackerErrorCode.E1052 )\n-                .addArg( event.getOccurredAt() ) );\n+            addError( reporter, E1052, event.getScheduledAt() );\n         }\n     }\n }\n\\ No newline at end of file\n", "next_change": {"commit": "a9aa89a8d5134104503d1cbb43f96b06f3531569", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\nindex 4fa4affc84..f9a2f058d8 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n", "chunk": "@@ -157,4 +155,16 @@ public class EventDateValidationHook\n             addError( reporter, E1052, event.getScheduledAt() );\n         }\n     }\n+\n+    private boolean occuredAtDateIsMandatory( Event event, Program program )\n+    {\n+        if ( program.isWithoutRegistration() )\n+        {\n+            return true;\n+        }\n+\n+        EventStatus eventStatus = event.getStatus();\n+\n+        return eventStatus == EventStatus.ACTIVE || eventStatus == EventStatus.COMPLETED;\n+    }\n }\n\\ No newline at end of file\n", "next_change": {"commit": "6e8f0d6c150b303d780b397f7646ff3383f16250", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\nindex f9a2f058d8..2d9ac4e1ec 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n", "chunk": "@@ -167,4 +151,4 @@ public class EventDateValidationHook\n \n         return eventStatus == EventStatus.ACTIVE || eventStatus == EventStatus.COMPLETED;\n     }\n-}\n\\ No newline at end of file\n+}\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "message": "Merge commit", "committedDate": null}, {"oid": "3e3dc98d92f0c13fb56cf17894eab06a78842133", "committedDate": "2020-08-04 17:20:37 +0200", "message": "feat: Enrollment/Events note persistence"}, {"oid": "3e3b32e56ff5554a0095396eddffceac65b6b8de", "committedDate": "2020-10-27 09:56:50 +0100", "message": "refactor: simplified calls to error reporting (#6437)"}, {"oid": "0bf55d776481f6511e5f9ebca5de1f2cf79777c0", "committedDate": "2020-11-19 13:55:46 +0100", "message": "refactor: New Tracker Error reporting refactor (#6706)"}, {"oid": "a9aa89a8d5134104503d1cbb43f96b06f3531569", "committedDate": "2020-12-02 11:10:05 +0100", "message": "fix: Manage event scheduleAt date [DHIS2-10009] (#6804)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "6e8f0d6c150b303d780b397f7646ff3383f16250", "committedDate": "2021-01-21 09:32:50 +0100", "message": "feat: new tracked dto's properties referring to a date, now use Instant instead of String [DHIS2-101239] (#7119)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "c0e9b28f4609a84d1287d93bc65f81321e00d78b", "committedDate": "2021-03-30 13:22:16 +0200", "message": "refactor: Removing uid field from tracker entities [TECH-579] (#7790)"}, {"oid": "fe04922e144ac69367a99840d5518edda2d67f38", "committedDate": "2021-06-03 08:17:10 +0200", "message": "fix: Make program field read-only in event payload [DHIS2-11225] (#8086)"}, {"oid": "aff1cb136bdfdf4af8213f8878967be42f5687e9", "committedDate": "2021-06-11 10:58:03 +0200", "message": "fix: Get correct program stage from preheated Program [DHIS2-11225] (#8175)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "97fa18701761c6993e20f2e7a3816ea689129480", "committedDate": "2022-01-11 15:31:02 +0100", "message": "chore: hooks should add errors via reporter directly TECH-880 (#9523)"}, {"oid": "1d8350a9e9ac100aaaa831894ba3f857b46e2474", "committedDate": "2022-01-13 14:15:17 +0100", "message": "chore: adding errors and warnings is responsibility of the ValidationErrorReporter TECH-880 (#9616)"}, {"oid": "c039b8f75c1d965414de926f04540dfaabdd104c", "committedDate": "2022-02-23 13:08:25 +0100", "message": "chore: Clean up service program rule module [TECH-938] (#9885)"}, {"oid": "ef0cbd365e47f1f88befb80d9650cce75280bd35", "committedDate": "2022-03-08 15:12:00 +0100", "message": "chore: move DB access and mutation to preheat and preprocessor DHIS2-12623 (#9904)"}, {"oid": "f7cfc83610c75486bbb0457dde057eaed777f3d2", "committedDate": "2022-05-27 15:15:25 +0200", "message": "chore: ValidationErrorReporter does not need the bunlde DHIS2-12519 (#10878)"}, {"oid": "b0a861c0308005b865cafa2344c1231c0a4f2bc3", "committedDate": "2022-12-02 13:36:08 +0100", "message": "fix: turn removeOnError into skipOnError DHIS2-14213 (#12457)"}, {"oid": "7ac68b368a1dbd9362973b30f7160399abe801a0", "committedDate": "2022-12-06 09:04:47 +0100", "message": "chore: move ValidationErrorReporter close to its usage (#12486)"}, {"oid": "33c7cfe3d47d3ad157e0cc1991ece017e9244bb5", "committedDate": "2022-12-13 13:59:20 +0000", "message": "chore: migrate event validators (#12527)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg5MzE3MA==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446893170", "body": "I agree. leave it as it is for now, then we need to figure out the usecase for this and see if we can solve it differently.", "bodyText": "I agree. leave it as it is for now, then we need to figure out the usecase for this and see if we can solve it differently.", "bodyHTML": "<p dir=\"auto\">I agree. leave it as it is for now, then we need to figure out the usecase for this and see if we can solve it differently.</p>", "author": "stian-sandvold", "createdAt": "2020-06-29T11:19:20Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentAttributeValidationHook.java", "diffHunk": "@@ -0,0 +1,188 @@\n+package org.hisp.dhis.tracker.validation.hooks;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import com.google.common.collect.Maps;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.program.ProgramTrackedEntityAttribute;\n+import org.hisp.dhis.security.Authorities;\n+import org.hisp.dhis.trackedentity.TrackedEntityAttribute;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+import org.hisp.dhis.trackedentityattributevalue.TrackedEntityAttributeValue;\n+import org.hisp.dhis.tracker.TrackerImportStrategy;\n+import org.hisp.dhis.tracker.domain.Attribute;\n+import org.hisp.dhis.tracker.domain.Enrollment;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n+import org.hisp.dhis.tracker.validation.TrackerImportValidationContext;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n+import static org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors.ATTRIBUTE_VALUE_MAP_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors.TRACKED_ENTITY_INSTANCE_CANT_BE_NULL;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+@Component\n+public class EnrollmentAttributeValidationHook\n+    extends AbstractTrackerDtoValidationHook\n+{\n+    public EnrollmentAttributeValidationHook()\n+    {\n+        super( Enrollment.class, TrackerImportStrategy.CREATE_AND_UPDATE );\n+    }\n+\n+    @Override\n+    public void validateEnrollment( ValidationErrorReporter reporter, Enrollment enrollment )\n+    {\n+        TrackerImportValidationContext context = reporter.getValidationContext();\n+\n+        Program program = context.getProgram( enrollment.getProgram() );\n+        TrackedEntityInstance tei = context.getTrackedEntityInstance( enrollment.getTrackedEntity() );\n+\n+        Map<String, String> attributeValueMap = Maps.newHashMap();\n+\n+        for ( Attribute attribute : enrollment.getAttributes() )\n+        {\n+            validateRequiredProperties( reporter, attribute );\n+\n+            if ( attribute.getAttribute() == null || attribute.getValue() == null )\n+            {\n+                continue;\n+            }\n+\n+            TrackedEntityAttribute teAttribute = context.getTrackedEntityAttribute( attribute.getAttribute() );\n+\n+            if ( teAttribute == null )\n+            {\n+                continue;\n+            }\n+\n+            attributeValueMap.put( attribute.getAttribute(), attribute.getValue() );\n+\n+            validateAttrValueType( reporter, attribute, teAttribute );\n+\n+            //NOTE: this is perf killing\n+            validateAttributeUniqueness( reporter,\n+                attribute.getValue(),\n+                teAttribute,\n+                tei,\n+                tei.getOrganisationUnit() );\n+        }\n+\n+        validateMandatoryAttributes( reporter, program, tei, attributeValueMap );\n+    }\n+\n+    protected void validateRequiredProperties( ValidationErrorReporter reporter, Attribute attribute )\n+    {\n+        if ( attribute.getAttribute() == null )\n+        {\n+            reporter.addError( newReport( TrackerErrorCode.E1075 )\n+                .addArg( attribute ) );\n+        }\n+\n+        if ( attribute.getValue() == null )\n+        {\n+            reporter.addError( newReport( TrackerErrorCode.E1076 )\n+                .addArg( attribute ) );\n+        }\n+\n+        if ( attribute.getAttribute() != null )\n+        {\n+            TrackedEntityAttribute teAttribute = reporter.getValidationContext()\n+                .getTrackedEntityAttribute( attribute.getAttribute() );\n+            if ( teAttribute == null )\n+            {\n+                reporter.addError( newReport( TrackerErrorCode.E1017 )\n+                    .addArg( attribute.getAttribute() ) );\n+            }\n+        }\n+    }\n+\n+    private void validateMandatoryAttributes( ValidationErrorReporter reporter,\n+        Program program, TrackedEntityInstance trackedEntityInstance, Map<String, String> attributeValueMap )\n+    {\n+        Objects.requireNonNull( program, TrackerImporterAssertErrors.PROGRAM_CANT_BE_NULL );\n+        Objects.requireNonNull( trackedEntityInstance, TRACKED_ENTITY_INSTANCE_CANT_BE_NULL );\n+        Objects.requireNonNull( attributeValueMap, ATTRIBUTE_VALUE_MAP_CANT_BE_NULL );\n+\n+        // 1. Get all tei attributes, map attrValue attr. into set of attr.\n+        Set<TrackedEntityAttribute> trackedEntityAttributes = trackedEntityInstance.getTrackedEntityAttributeValues()\n+            .stream()\n+            .map( TrackedEntityAttributeValue::getAttribute )\n+            .collect( Collectors.toSet() );\n+\n+        // 2. Map all program attr. that match tei attr. into map. of attr:is mandatory\n+        Map<TrackedEntityAttribute, Boolean> mandatoryMap = program.getProgramAttributes().stream()\n+            .filter( v -> trackedEntityAttributes.contains( v.getAttribute() ) )\n+            .collect( Collectors.toMap(\n+                ProgramTrackedEntityAttribute::getAttribute,\n+                ProgramTrackedEntityAttribute::isMandatory ) );\n+\n+        for ( Map.Entry<TrackedEntityAttribute, Boolean> entry : mandatoryMap.entrySet() )\n+        {\n+            TrackedEntityAttribute attribute = entry.getKey();\n+            Boolean attributeIsMandatory = entry.getValue();\n+\n+            // TODO: This is quite ugly and should be considered to be solved differently,", "originalCommit": "12bd589850367af9ce124e78ea519bd7842cb3c5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "ec14261db1f790e1be25e5bb27b45226087a9dd5", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentAttributeValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentAttributeValidationHook.java\nindex 18a802df80..60236ed768 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentAttributeValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentAttributeValidationHook.java\n", "chunk": "@@ -158,6 +158,7 @@ public class EnrollmentAttributeValidationHook\n \n             // TODO: This is quite ugly and should be considered to be solved differently,\n             //  e.i. authorization should be handled in one common place.\n+            // NB: ! This authority MUST only be used in SYNC mode! This needs to be added to the check\n             boolean userIsAuthorizedToIgnoreRequiredValueValidation = !reporter.getValidationContext().getBundle()\n                 .getUser()\n                 .isAuthorized( Authorities.F_IGNORE_TRACKER_REQUIRED_VALUE_VALIDATION.getAuthority() );\n", "next_change": null}]}, "revised_code_in_main": {"commit": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentAttributeValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentAttributeValidationHook.java\nindex 18a802df80..d66d264c21 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentAttributeValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentAttributeValidationHook.java\n", "chunk": "@@ -158,6 +157,7 @@ public class EnrollmentAttributeValidationHook\n \n             // TODO: This is quite ugly and should be considered to be solved differently,\n             //  e.i. authorization should be handled in one common place.\n+            // NB: ! This authority MUST only be used in SYNC mode! This needs to be added to the check\n             boolean userIsAuthorizedToIgnoreRequiredValueValidation = !reporter.getValidationContext().getBundle()\n                 .getUser()\n                 .isAuthorized( Authorities.F_IGNORE_TRACKER_REQUIRED_VALUE_VALIDATION.getAuthority() );\n", "next_change": {"commit": "3e3b32e56ff5554a0095396eddffceac65b6b8de", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentAttributeValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentAttributeValidationHook.java\nindex d66d264c21..0fbfa66c95 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentAttributeValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentAttributeValidationHook.java\n", "chunk": "@@ -166,10 +155,7 @@ public class EnrollmentAttributeValidationHook\n                 && !userIsAuthorizedToIgnoreRequiredValueValidation\n                 && !attributeValueMap.containsKey( attribute.getUid() );\n \n-            if ( hasMissingAttribute )\n-            {\n-                reporter.addError( newReport( TrackerErrorCode.E1018 ).addArg( attribute ) );\n-            }\n+            addErrorIf( () -> hasMissingAttribute, reporter, E1018, attribute );\n \n             // Remove program attr. from enrollment attr. list\n             attributeValueMap.remove( attribute.getUid() );\n", "next_change": {"commit": "7678ab6c0c8f661a5a2974f3ee8deb1045278558", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentAttributeValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentAttributeValidationHook.java\nindex 0fbfa66c95..54ebfb698b 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentAttributeValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentAttributeValidationHook.java\n", "chunk": "@@ -120,54 +129,87 @@ public class EnrollmentAttributeValidationHook\n     }\n \n     private void validateMandatoryAttributes( ValidationErrorReporter reporter,\n-        Program program, TrackedEntityInstance trackedEntityInstance, Map<String, String> attributeValueMap )\n+        Program program, Enrollment enrollment )\n     {\n         checkNotNull( program, TrackerImporterAssertErrors.PROGRAM_CANT_BE_NULL );\n-        checkNotNull( trackedEntityInstance, TRACKED_ENTITY_INSTANCE_CANT_BE_NULL );\n-        checkNotNull( attributeValueMap, ATTRIBUTE_VALUE_MAP_CANT_BE_NULL );\n \n-        // 1. Get all tei attributes, map attrValue attr. into set of attr.\n-        Set<TrackedEntityAttribute> trackedEntityAttributes = trackedEntityInstance.getTrackedEntityAttributeValues()\n+        // Build a data structures of attributes eligible for mandatory validations:\n+        // 1 - attributes from enrollments whose value is not empty or null\n+        // 2 - attributes already existing in TEI (from preheat)\n+\n+        // 1 - attributes from enrollment whose value is non-empty\n+        Map<String, String> enrollmentNonEmptyAttributeUids = Optional.of( enrollment )\n+            .map( Enrollment::getAttributes )\n+            .orElse( Collections.emptyList() )\n             .stream()\n-            .map( TrackedEntityAttributeValue::getAttribute )\n+            .filter( this::isNonEmpty)\n+            .collect( Collectors.toMap(\n+                Attribute::getAttribute,\n+                Attribute::getValue ) );\n+\n+        // 2 - attributes uids from existing TEI (if any) from preheat\n+        Set<String> teiAttributeUids = buildTeiAttributeUids( reporter, enrollment.getTrackedEntity() );\n+\n+        // merged uids of eligible attribute to validate\n+        Set<String> mergedAttributes = Streams\n+            .concat( enrollmentNonEmptyAttributeUids.keySet().stream(), teiAttributeUids.stream() )\n             .collect( Collectors.toSet() );\n \n-        // 2. Map all program attr. that match tei attr. into map. of attr:is mandatory\n-        Map<TrackedEntityAttribute, Boolean> mandatoryMap = program.getProgramAttributes().stream()\n-            .filter( v -> trackedEntityAttributes.contains( v.getAttribute() ) )\n+        // Map having as key program attribute uid and mandatory flag as value\n+        Map<String, Boolean> programAttributesMap = program.getProgramAttributes().stream()\n             .collect( Collectors.toMap(\n-                ProgramTrackedEntityAttribute::getAttribute,\n+                programTrackedEntityAttribute -> programTrackedEntityAttribute.getAttribute().getUid(),\n                 ProgramTrackedEntityAttribute::isMandatory ) );\n \n-        for ( Map.Entry<TrackedEntityAttribute, Boolean> entry : mandatoryMap.entrySet() )\n-        {\n-            TrackedEntityAttribute attribute = entry.getKey();\n-            Boolean attributeIsMandatory = entry.getValue();\n-\n-            // TODO: This is quite ugly and should be considered to be solved differently,\n-            //  e.i. authorization should be handled in one common place.\n-            // NB: ! This authority MUST only be used in SYNC mode! This needs to be added to the check\n-            boolean userIsAuthorizedToIgnoreRequiredValueValidation = !reporter.getValidationContext().getBundle()\n-                .getUser()\n-                .isAuthorized( Authorities.F_IGNORE_TRACKER_REQUIRED_VALUE_VALIDATION.getAuthority() );\n+        // Merged attributes must contain each mandatory program attribute.\n+        programAttributesMap.entrySet()\n+            .stream()\n+            .filter( Map.Entry::getValue ) // <--- filter on mandatory flag\n+            .map( Map.Entry::getKey )\n+            .forEach( mandatoryProgramAttributeUid -> addErrorIf(\n+                () -> !mergedAttributes.contains( mandatoryProgramAttributeUid ), reporter, E1018,\n+                mandatoryProgramAttributeUid ) );\n+\n+        // enrollment must not contain any attribute which is not defined in program\n+        enrollmentNonEmptyAttributeUids\n+            .forEach(\n+                ( attrUid, attrVal ) -> addErrorIf( () -> !programAttributesMap.containsKey( attrUid ), reporter, E1019,\n+                    attrUid + \"=\" + attrVal ) );\n+    }\n \n-            boolean hasMissingAttribute = attributeIsMandatory\n-                && !userIsAuthorizedToIgnoreRequiredValueValidation\n-                && !attributeValueMap.containsKey( attribute.getUid() );\n+    private Set<String> buildTeiAttributeUids( ValidationErrorReporter reporter, String trackedEntityInstanceUid )\n+    {\n+        return Optional.of( reporter )\n+            .map( ValidationErrorReporter::getValidationContext )\n+            .map( TrackerImportValidationContext::getBundle )\n+            .map( TrackerBundle::getPreheat )\n+            .map( trackerPreheat -> trackerPreheat.getTrackedEntity( TrackerIdScheme.UID, trackedEntityInstanceUid ) )\n+            .map( TrackedEntityInstance::getTrackedEntityAttributeValues )\n+            .orElse( Collections.emptySet() )\n+            .stream()\n+            .map( TrackedEntityAttributeValue::getAttribute )\n+            .map( BaseIdentifiableObject::getUid )\n+            .collect( Collectors.toSet() );\n+    }\n \n-            addErrorIf( () -> hasMissingAttribute, reporter, E1018, attribute );\n+    private boolean isNonEmpty(Attribute attribute )\n+    {\n+        return StringUtils.isNotBlank( attribute.getValue() ) && StringUtils.isNotBlank(attribute.getAttribute());\n+    }\n \n-            // Remove program attr. from enrollment attr. list\n-            attributeValueMap.remove( attribute.getUid() );\n-        }\n+    private String getOrgUnitUidFromTei( TrackerImportValidationContext context, String teiUid )\n+    {\n \n-        if ( !attributeValueMap.isEmpty() )\n+        final Optional<ReferenceTrackerEntity> reference = context.getReference( teiUid );\n+        if ( reference.isPresent() )\n         {\n-            for ( Map.Entry<String, String> entry : attributeValueMap.entrySet() )\n+            final Optional<TrackedEntity> tei = context.getBundle()\n+                .getTrackedEntity( teiUid );\n+            if ( tei.isPresent() )\n             {\n-                //Only Program attributes is allowed for enrollment\n-                addError( reporter, E1019, entry.getKey() + \"=\" + entry.getValue() );\n+                return tei.get().getOrgUnit();\n             }\n         }\n+        return null;\n     }\n }\n\\ No newline at end of file\n", "next_change": {"commit": "2db6b519d76e1d0b0390a9dc6f2f650824c543bb", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentAttributeValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentAttributeValidationHook.java\ndeleted file mode 100644\nindex 54ebfb698b..0000000000\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentAttributeValidationHook.java\n+++ /dev/null\n", "chunk": "@@ -1,215 +0,0 @@\n-package org.hisp.dhis.tracker.validation.hooks;\n-\n-/*\n- * Copyright (c) 2004-2020, University of Oslo\n- * All rights reserved.\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions are met:\n- * Redistributions of source code must retain the above copyright notice, this\n- * list of conditions and the following disclaimer.\n- *\n- * Redistributions in binary form must reproduce the above copyright notice,\n- * this list of conditions and the following disclaimer in the documentation\n- * and/or other materials provided with the distribution.\n- * Neither the name of the HISP project nor the names of its contributors may\n- * be used to endorse or promote products derived from this software without\n- * specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n- * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n- * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n- * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n- * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n- * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n- * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- */\n-\n-import static com.google.api.client.util.Preconditions.checkNotNull;\n-import static org.hisp.dhis.tracker.report.TrackerErrorCode.E1017;\n-import static org.hisp.dhis.tracker.report.TrackerErrorCode.E1018;\n-import static org.hisp.dhis.tracker.report.TrackerErrorCode.E1019;\n-import static org.hisp.dhis.tracker.report.TrackerErrorCode.E1075;\n-import static org.hisp.dhis.tracker.report.TrackerErrorCode.E1076;\n-\n-import java.util.Collections;\n-import java.util.Map;\n-import java.util.Optional;\n-import java.util.Set;\n-import java.util.stream.Collectors;\n-\n-import org.apache.commons.lang3.StringUtils;\n-import org.hisp.dhis.common.BaseIdentifiableObject;\n-import org.hisp.dhis.organisationunit.OrganisationUnit;\n-import org.hisp.dhis.program.Program;\n-import org.hisp.dhis.program.ProgramTrackedEntityAttribute;\n-import org.hisp.dhis.trackedentity.TrackedEntityAttribute;\n-import org.hisp.dhis.trackedentity.TrackedEntityAttributeService;\n-import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n-import org.hisp.dhis.trackedentityattributevalue.TrackedEntityAttributeValue;\n-import org.hisp.dhis.tracker.TrackerIdScheme;\n-import org.hisp.dhis.tracker.bundle.TrackerBundle;\n-import org.hisp.dhis.tracker.domain.Attribute;\n-import org.hisp.dhis.tracker.domain.Enrollment;\n-import org.hisp.dhis.tracker.domain.TrackedEntity;\n-import org.hisp.dhis.tracker.preheat.ReferenceTrackerEntity;\n-import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n-import org.hisp.dhis.tracker.validation.TrackerImportValidationContext;\n-import org.springframework.stereotype.Component;\n-\n-import com.google.common.collect.Maps;\n-import com.google.common.collect.Streams;\n-\n-/**\n- * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n- */\n-@Component\n-public class EnrollmentAttributeValidationHook extends AttributeValidationHook\n-{\n-\n-    public EnrollmentAttributeValidationHook( TrackedEntityAttributeService teAttrService )\n-    {\n-        super( teAttrService );\n-    }\n-\n-    @Override\n-    public void validateEnrollment( ValidationErrorReporter reporter, Enrollment enrollment )\n-    {\n-        TrackerImportValidationContext context = reporter.getValidationContext();\n-\n-        TrackedEntityInstance tei = context.getTrackedEntityInstance( enrollment.getTrackedEntity() );\n-\n-        OrganisationUnit orgUnit = context\n-            .getOrganisationUnit( getOrgUnitUidFromTei( context, enrollment.getTrackedEntity() ) );\n-\n-        Map<String, String> attributeValueMap = Maps.newHashMap();\n-\n-        for ( Attribute attribute : enrollment.getAttributes() )\n-        {\n-            validateRequiredProperties( reporter, attribute );\n-\n-            if ( attribute.getAttribute() == null || attribute.getValue() == null ||\n-                context.getTrackedEntityAttribute( attribute.getAttribute() ) == null )\n-            {\n-                continue;\n-            }\n-\n-            attributeValueMap.put( attribute.getAttribute(), attribute.getValue() );\n-\n-            TrackedEntityAttribute teAttribute = context.getTrackedEntityAttribute( attribute.getAttribute() );\n-\n-            validateAttrValueType( reporter, attribute, teAttribute );\n-\n-            validateAttributeUniqueness( reporter,\n-                attribute.getValue(),\n-                teAttribute,\n-                tei,\n-                orgUnit );\n-        }\n-\n-        Program program = context.getProgram( enrollment.getProgram() );\n-        validateMandatoryAttributes( reporter, program, enrollment );\n-    }\n-\n-    protected void validateRequiredProperties( ValidationErrorReporter reporter, Attribute attribute )\n-    {\n-        addErrorIfNull( attribute.getAttribute(), reporter, E1075, attribute );\n-        addErrorIfNull( attribute.getValue(), reporter, E1076, attribute );\n-\n-        if ( attribute.getAttribute() != null )\n-        {\n-            TrackedEntityAttribute teAttribute = reporter.getValidationContext()\n-                .getTrackedEntityAttribute( attribute.getAttribute() );\n-\n-            addErrorIfNull( teAttribute, reporter, E1017, attribute );\n-        }\n-    }\n-\n-    private void validateMandatoryAttributes( ValidationErrorReporter reporter,\n-        Program program, Enrollment enrollment )\n-    {\n-        checkNotNull( program, TrackerImporterAssertErrors.PROGRAM_CANT_BE_NULL );\n-\n-        // Build a data structures of attributes eligible for mandatory validations:\n-        // 1 - attributes from enrollments whose value is not empty or null\n-        // 2 - attributes already existing in TEI (from preheat)\n-\n-        // 1 - attributes from enrollment whose value is non-empty\n-        Map<String, String> enrollmentNonEmptyAttributeUids = Optional.of( enrollment )\n-            .map( Enrollment::getAttributes )\n-            .orElse( Collections.emptyList() )\n-            .stream()\n-            .filter( this::isNonEmpty)\n-            .collect( Collectors.toMap(\n-                Attribute::getAttribute,\n-                Attribute::getValue ) );\n-\n-        // 2 - attributes uids from existing TEI (if any) from preheat\n-        Set<String> teiAttributeUids = buildTeiAttributeUids( reporter, enrollment.getTrackedEntity() );\n-\n-        // merged uids of eligible attribute to validate\n-        Set<String> mergedAttributes = Streams\n-            .concat( enrollmentNonEmptyAttributeUids.keySet().stream(), teiAttributeUids.stream() )\n-            .collect( Collectors.toSet() );\n-\n-        // Map having as key program attribute uid and mandatory flag as value\n-        Map<String, Boolean> programAttributesMap = program.getProgramAttributes().stream()\n-            .collect( Collectors.toMap(\n-                programTrackedEntityAttribute -> programTrackedEntityAttribute.getAttribute().getUid(),\n-                ProgramTrackedEntityAttribute::isMandatory ) );\n-\n-        // Merged attributes must contain each mandatory program attribute.\n-        programAttributesMap.entrySet()\n-            .stream()\n-            .filter( Map.Entry::getValue ) // <--- filter on mandatory flag\n-            .map( Map.Entry::getKey )\n-            .forEach( mandatoryProgramAttributeUid -> addErrorIf(\n-                () -> !mergedAttributes.contains( mandatoryProgramAttributeUid ), reporter, E1018,\n-                mandatoryProgramAttributeUid ) );\n-\n-        // enrollment must not contain any attribute which is not defined in program\n-        enrollmentNonEmptyAttributeUids\n-            .forEach(\n-                ( attrUid, attrVal ) -> addErrorIf( () -> !programAttributesMap.containsKey( attrUid ), reporter, E1019,\n-                    attrUid + \"=\" + attrVal ) );\n-    }\n-\n-    private Set<String> buildTeiAttributeUids( ValidationErrorReporter reporter, String trackedEntityInstanceUid )\n-    {\n-        return Optional.of( reporter )\n-            .map( ValidationErrorReporter::getValidationContext )\n-            .map( TrackerImportValidationContext::getBundle )\n-            .map( TrackerBundle::getPreheat )\n-            .map( trackerPreheat -> trackerPreheat.getTrackedEntity( TrackerIdScheme.UID, trackedEntityInstanceUid ) )\n-            .map( TrackedEntityInstance::getTrackedEntityAttributeValues )\n-            .orElse( Collections.emptySet() )\n-            .stream()\n-            .map( TrackedEntityAttributeValue::getAttribute )\n-            .map( BaseIdentifiableObject::getUid )\n-            .collect( Collectors.toSet() );\n-    }\n-\n-    private boolean isNonEmpty(Attribute attribute )\n-    {\n-        return StringUtils.isNotBlank( attribute.getValue() ) && StringUtils.isNotBlank(attribute.getAttribute());\n-    }\n-\n-    private String getOrgUnitUidFromTei( TrackerImportValidationContext context, String teiUid )\n-    {\n-\n-        final Optional<ReferenceTrackerEntity> reference = context.getReference( teiUid );\n-        if ( reference.isPresent() )\n-        {\n-            final Optional<TrackedEntity> tei = context.getBundle()\n-                .getTrackedEntity( teiUid );\n-            if ( tei.isPresent() )\n-            {\n-                return tei.get().getOrgUnit();\n-            }\n-        }\n-        return null;\n-    }\n-}\n\\ No newline at end of file\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "message": "Merge commit", "committedDate": null}, {"oid": "3e3dc98d92f0c13fb56cf17894eab06a78842133", "committedDate": "2020-08-04 17:20:37 +0200", "message": "feat: Enrollment/Events note persistence"}, {"oid": "e1260b5e8fceb13c2883754236a34cdd652e1c1c", "committedDate": "2020-10-20 14:00:34 +0200", "message": "refactor: Load in the preheat all the data needed for uniqueness attr\u2026 (#6397)"}, {"oid": "3e3b32e56ff5554a0095396eddffceac65b6b8de", "committedDate": "2020-10-27 09:56:50 +0100", "message": "refactor: simplified calls to error reporting (#6437)"}, {"oid": "d095f2d4cf9aaac1e9aa973d4da6aa2f96104cc8", "committedDate": "2020-11-11 13:49:13 +0100", "message": "fix: allow validation to reference entities in the payload (#6617)"}, {"oid": "0bf55d776481f6511e5f9ebca5de1f2cf79777c0", "committedDate": "2020-11-19 13:55:46 +0100", "message": "refactor: New Tracker Error reporting refactor (#6706)"}, {"oid": "8c4a255176ac5e675c549db2065926fdbaf0290b", "committedDate": "2020-12-14 08:31:48 +0100", "message": "fix: Remove clearSession/clearCache inside transaction causing audit fail (#6876)"}, {"oid": "7678ab6c0c8f661a5a2974f3ee8deb1045278558", "committedDate": "2020-12-16 09:39:21 +0100", "message": "fix: enrollments attributes are validated against mandatory program attributes (DHIS2-10077) (#6854)"}, {"oid": "b45bc96224d9ab6c13fe83f5363d58c943c6e695", "committedDate": "2020-12-18 10:02:52 +0100", "message": "fix: DHIS2-10077 changed mandatory program attribute error message (#6938)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "20c87464d818f6f2d5d7334b2ef2af99d7a24e98", "committedDate": "2021-02-11 10:54:18 +0100", "message": "fix: NPE in ProgramOrgUnitSupplier in Preheat [DHIS2-10430]"}, {"oid": "c25b817a180f24b3de6b26d5a089563aa336aa8c", "committedDate": "2021-03-05 10:44:25 +0100", "message": "feat: Validation for values with option sets [DHIS2-10452] (#7512)"}, {"oid": "60fe241badad5b1463bc3991eff2927abae32644", "committedDate": "2021-04-21 13:49:15 +0200", "message": "fix: [DHIS2-10797] Fix remove null values for tracker attributes and data values 2.37 (#7880)"}, {"oid": "2ce39cbc3ddb3e5b0b3b2ef747af2cf79a67821d", "committedDate": "2021-05-12 09:20:07 +0200", "message": "fix: [DHIS2-10797] Fix remove null values for tracker attributes and data values 2.37 (#8004)"}, {"oid": "9062a6b97820374ba0cff1a63bf4a776c69d41c8", "committedDate": "2021-10-13 09:19:34 +0200", "message": "fix: Remove duplicate error messages for enrollment attributes [DHIS2-11949] (#9040)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "97fa18701761c6993e20f2e7a3816ea689129480", "committedDate": "2022-01-11 15:31:02 +0100", "message": "chore: hooks should add errors via reporter directly TECH-880 (#9523)"}, {"oid": "1d8350a9e9ac100aaaa831894ba3f857b46e2474", "committedDate": "2022-01-13 14:15:17 +0100", "message": "chore: adding errors and warnings is responsibility of the ValidationErrorReporter TECH-880 (#9616)"}, {"oid": "c039b8f75c1d965414de926f04540dfaabdd104c", "committedDate": "2022-02-23 13:08:25 +0100", "message": "chore: Clean up service program rule module [TECH-938] (#9885)"}, {"oid": "ef0cbd365e47f1f88befb80d9650cce75280bd35", "committedDate": "2022-03-08 15:12:00 +0100", "message": "chore: move DB access and mutation to preheat and preprocessor DHIS2-12623 (#9904)"}, {"oid": "0303652efe35da369ba1d2a437a4b5797a52c451", "committedDate": "2022-04-01 09:37:58 +0200", "message": "chore: tracker entities only support idScheme UID DHIS2-12563 (#10329)"}, {"oid": "66b1250699e5198a4cffb092df7c652f569b2b5a", "committedDate": "2022-05-02 12:28:01 +0200", "message": "chore: TrackedEntity.orgUnit is a MetadataIdentifier (#10608)"}, {"oid": "9ff8d0c831d8448a696a37138139a0ae5b975c86", "committedDate": "2022-05-17 13:32:06 +0200", "message": "fix: Attribute.attribute is a MetadataIdentifier DHIS2-12563 (#10782)"}, {"oid": "df4eaf29ba29ee71a727a1c072fd4bcb03bb4bc9", "committedDate": "2022-05-19 15:13:36 +0200", "message": "chore: docs, improve APIs DHIS2-12563 (#10847)"}, {"oid": "b567e74f7d703115fb7bc9802ed3b5f29d6917aa", "committedDate": "2022-05-23 09:13:55 +0200", "message": "fix: report ids or attribute value for MetadataIdentifiers DHIS2-12519 (#10873)"}, {"oid": "f7cfc83610c75486bbb0457dde057eaed777f3d2", "committedDate": "2022-05-27 15:15:25 +0200", "message": "chore: ValidationErrorReporter does not need the bunlde DHIS2-12519 (#10878)"}, {"oid": "9ee39f390105c4517d67abfb5dbb377f9fb82074", "committedDate": "2022-06-10 10:50:40 +0200", "message": "fix: Validate enrollment attributes values based on valueType in NTI [DHIS2-12669] (2.39) (#11050)"}, {"oid": "b0a861c0308005b865cafa2344c1231c0a4f2bc3", "committedDate": "2022-12-02 13:36:08 +0100", "message": "fix: turn removeOnError into skipOnError DHIS2-14213 (#12457)"}, {"oid": "7ac68b368a1dbd9362973b30f7160399abe801a0", "committedDate": "2022-12-06 09:04:47 +0100", "message": "chore: move ValidationErrorReporter close to its usage (#12486)"}, {"oid": "07ff89195ce66114c2b5a744039c2b2ce7a8f440", "committedDate": "2022-12-13 09:51:43 +0100", "message": "chore: Clean up TrackerBundle methods [TECH-14298] (#12515)"}, {"oid": "2db6b519d76e1d0b0390a9dc6f2f650824c543bb", "committedDate": "2022-12-13 13:10:13 +0100", "message": "chore: migrate enrollment validators (#12526)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg5NjExMA==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446896110", "body": "Remember to remove/uncomment this code before merge.", "bodyText": "Remember to remove/uncomment this code before merge.", "bodyHTML": "<p dir=\"auto\">Remember to remove/uncomment this code before merge.</p>", "author": "stian-sandvold", "createdAt": "2020-06-29T11:24:48Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/TrackedEntityImportValidationTest.java", "diffHunk": "@@ -0,0 +1,562 @@\n+package org.hisp.dhis.tracker.validation;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.hisp.dhis.common.IdentifiableObject;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundle;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundleMode;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundleParams;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundleService;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundleValidationService;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.feedback.ObjectBundleCommitReport;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.feedback.ObjectBundleValidationReport;\n+import org.hisp.dhis.feedback.ErrorReport;\n+import org.hisp.dhis.importexport.ImportStrategy;\n+import org.hisp.dhis.render.RenderFormat;\n+import org.hisp.dhis.render.RenderService;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstanceService;\n+import org.hisp.dhis.tracker.TrackerImportStrategy;\n+import org.hisp.dhis.tracker.bundle.TrackerBundle;\n+import org.hisp.dhis.tracker.bundle.TrackerBundleParams;\n+import org.hisp.dhis.tracker.bundle.TrackerBundleService;\n+import org.hisp.dhis.tracker.report.TrackerBundleReport;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.TrackerStatus;\n+import org.hisp.dhis.tracker.report.TrackerValidationReport;\n+import org.hisp.dhis.user.User;\n+import org.hisp.dhis.user.UserService;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.io.ClassPathResource;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasItem;\n+import static org.hamcrest.Matchers.hasProperty;\n+import static org.hamcrest.core.Every.everyItem;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+@Slf4j\n+public class TrackedEntityImportValidationTest\n+    extends AbstractImportValidationTest\n+{\n+    @Autowired\n+    protected TrackedEntityInstanceService trackedEntityInstanceService;\n+\n+    @Autowired\n+    private TrackerBundleService trackerBundleService;\n+\n+    @Autowired\n+    private ObjectBundleService objectBundleService;\n+\n+    @Autowired\n+    private ObjectBundleValidationService objectBundleValidationService;\n+\n+    @Autowired\n+    private DefaultTrackerValidationService trackerValidationService;\n+\n+    @Autowired\n+    private RenderService _renderService;\n+\n+    @Autowired\n+    private UserService _userService;\n+\n+    @Override\n+    protected void setUpTest()\n+        throws IOException\n+    {\n+        renderService = _renderService;\n+        userService = _userService;\n+\n+        Map<Class<? extends IdentifiableObject>, List<IdentifiableObject>> metadata = renderService.fromMetadata(\n+            new ClassPathResource( \"tracker/tracker_basic_metadata.json\" ).getInputStream(), RenderFormat.JSON );\n+\n+        ObjectBundleParams params = new ObjectBundleParams();\n+        params.setObjectBundleMode( ObjectBundleMode.COMMIT );\n+        params.setImportStrategy( ImportStrategy.CREATE );\n+        params.setObjects( metadata );\n+\n+        ObjectBundle bundle = objectBundleService.create( params );\n+        ObjectBundleValidationReport validationReport = objectBundleValidationService.validate( bundle );\n+        List<ErrorReport> errorReports = validationReport.getErrorReports();\n+        assertTrue( errorReports.isEmpty() );\n+\n+        ObjectBundleCommitReport commit = objectBundleService.commit( bundle );\n+        List<ErrorReport> errorReports1 = commit.getErrorReports();\n+        assertTrue( errorReports1.isEmpty() );\n+\n+    }\n+\n+    @Test\n+    public void testTeValidationOkGenerateId()\n+        throws IOException\n+    {\n+        TrackerBundleParams params = createBundleFromJson(\n+            \"tracker/validations/te-data_ok_no_uuids.json\" );\n+\n+        ValidateAndCommitTestUnit createAndUpdate = validateAndCommit( params, TrackerImportStrategy.CREATE );\n+        TrackerValidationReport report = createAndUpdate.getValidationReport();\n+        printReport( report );\n+        assertEquals( 0, report.getErrorReports().size() );\n+        assertEquals( TrackerStatus.OK, createAndUpdate.getCommitReport().getStatus() );\n+    }\n+\n+    @Test\n+    public void testValidateInvalidUid()\n+        throws IOException\n+    {\n+        TrackerBundleParams params = createBundleFromJson(\n+            \"tracker/validations/te-data_invalid_uids.json\" );\n+\n+        ValidateAndCommitTestUnit createAndUpdate = validateAndCommit( params, TrackerImportStrategy.CREATE );\n+        TrackerValidationReport report = createAndUpdate.getValidationReport();\n+        printReport( report );\n+        assertEquals( 1, report.getErrorReports().size() );\n+\n+        assertThat( report.getErrorReports(),\n+            everyItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1048 ) ) ) );\n+    }\n+\n+    @Test\n+    public void testTeValidationOkAll()\n+        throws IOException\n+    {\n+        TrackerBundleParams params = createBundleFromJson( \"tracker/validations/te-data_ok.json\" );\n+\n+        ValidateAndCommitTestUnit createAndUpdate = validateAndCommit( params, TrackerImportStrategy.CREATE );\n+        TrackerValidationReport report = createAndUpdate.getValidationReport();\n+        printReport( report );\n+        assertEquals( 0, report.getErrorReports().size() );\n+        assertEquals( TrackerStatus.OK, createAndUpdate.getCommitReport().getStatus() );\n+    }\n+\n+    @Test\n+    public void testNoWriteAccessFailFast()\n+        throws IOException\n+    {\n+        TrackerBundleParams params = createBundleFromJson( \"tracker/validations/te-data_ok.json\" );\n+\n+        User user = userService.getUser( USER_2 );\n+        params.setUser( user );\n+\n+        ValidateAndCommitTestUnit createAndUpdate = validateAndCommit( params, TrackerImportStrategy.CREATE );\n+        TrackerValidationReport report = createAndUpdate.getValidationReport();\n+        printReport( report );\n+        assertEquals( 13, report.getErrorReports().size() );\n+\n+        assertThat( report.getErrorReports(),\n+            everyItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1000 ) ) ) );\n+\n+        printReport( report );\n+    }\n+\n+    @Test\n+    public void testNoWriteAccessToOrg()\n+        throws IOException\n+    {\n+        TrackerBundleParams params = createBundleFromJson( \"tracker/validations/te-data_ok.json\" );\n+\n+        User user = userService.getUser( USER_2 );\n+        params.setUser( user );\n+\n+        ValidateAndCommitTestUnit createAndUpdate = validateAndCommit( params, TrackerImportStrategy.CREATE );\n+        TrackerValidationReport report = createAndUpdate.getValidationReport();\n+        printReport( report );\n+        assertEquals( 13, report.getErrorReports().size() );\n+\n+        assertThat( report.getErrorReports(),\n+            everyItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1000 ) ) ) );\n+\n+        printReport( report );\n+    }\n+\n+    @Test\n+    public void testNoWriteAccessInAcl()\n+        throws IOException\n+    {\n+        TrackerBundleParams params = createBundleFromJson( \"tracker/validations/te-data_ok.json\" );\n+\n+        User user = userService.getUser( USER_1 );\n+        params.setUser( user );\n+\n+        ValidateAndCommitTestUnit createAndUpdate = validateAndCommit( params, TrackerImportStrategy.CREATE );\n+        TrackerValidationReport report = createAndUpdate.getValidationReport();\n+        printReport( report );\n+        assertEquals( 13, report.getErrorReports().size() );\n+\n+        assertThat( report.getErrorReports(),\n+            everyItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1001 ) ) ) );\n+\n+        printReport( report );\n+    }\n+\n+    @Test\n+    public void testWriteAccessInAclViaUserGroup()\n+        throws IOException\n+    {\n+        TrackerBundleParams params = createBundleFromJson( \"tracker/validations/te-data_ok.json\" );\n+\n+        User user = userService.getUser( USER_3 );\n+        params.setUser( user );\n+\n+        ValidateAndCommitTestUnit createAndUpdate = validateAndCommit( params, TrackerImportStrategy.CREATE );\n+        TrackerValidationReport report = createAndUpdate.getValidationReport();\n+        printReport( report );\n+        assertEquals( 0, report.getErrorReports().size() );\n+        assertEquals( TrackerStatus.OK, createAndUpdate.getCommitReport().getStatus() );\n+    }\n+\n+    @Test\n+    public void testNonExistingTeType()\n+        throws IOException\n+    {\n+        TrackerBundleParams params = createBundleFromJson(\n+            \"tracker/validations/te-data_error_teType-non-existing.json\" );\n+\n+        ValidateAndCommitTestUnit createAndUpdate = validateAndCommit( params, TrackerImportStrategy.CREATE );\n+        TrackerValidationReport report = createAndUpdate.getValidationReport();\n+        printReport( report );\n+        assertEquals( 1, report.getErrorReports().size() );\n+\n+        assertThat( report.getErrorReports(),\n+            hasItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1005 ) ) ) );\n+\n+        printReport( report );\n+    }\n+\n+    @Test\n+    public void testNoOrgUnit()\n+        throws IOException\n+    {\n+        TrackerBundleParams params = createBundleFromJson(\n+            \"tracker/validations/te-data_error_orgunit-null.json\" );\n+\n+        ValidateAndCommitTestUnit createAndUpdate = validateAndCommit( params, TrackerImportStrategy.CREATE );\n+        TrackerValidationReport report = createAndUpdate.getValidationReport();\n+        printReport( report );\n+        assertEquals( 1, report.getErrorReports().size() );\n+\n+        assertThat( report.getErrorReports(),\n+            hasItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1011 ) ) ) );\n+\n+        printReport( report );\n+    }\n+\n+    @Test\n+    public void testNonExistingOrgUnit()\n+        throws IOException\n+    {\n+        TrackerBundleParams params = createBundleFromJson(\n+            \"tracker/validations/te-data_error_orgunit-non-existing.json\" );\n+\n+        ValidateAndCommitTestUnit createAndUpdate = validateAndCommit( params, TrackerImportStrategy.CREATE );\n+        TrackerValidationReport report = createAndUpdate.getValidationReport();\n+        printReport( report );\n+        assertEquals( 1, report.getErrorReports().size() );\n+\n+        assertThat( report.getErrorReports(),\n+            hasItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1011 ) ) ) );\n+    }\n+\n+//    @Test", "originalCommit": "12bd589850367af9ce124e78ea519bd7842cb3c5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3999d1c8e8d7c2bcd11c7c5d99fec179abd25e2b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/TrackedEntityImportValidationTest.java b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/TrackedEntityImportValidationTest.java\nindex 4f1e541968..831f29e384 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/TrackedEntityImportValidationTest.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/TrackedEntityImportValidationTest.java\n", "chunk": "@@ -294,48 +294,6 @@ public class TrackedEntityImportValidationTest\n             hasItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1011 ) ) ) );\n     }\n \n-//    @Test\n-//    public void testGeoFeatureTypeMismatch()\n-//        throws IOException\n-//    {\n-//        TrackerBundleParams trackerBundleParams = createBundleFromJson(\n-//            \"tracker/validations/te-data_error_geo-ftype-mismatch.json\" );\n-//\n-//        User user = userService.getUser( ADMIN_USER );\n-//        trackerBundleParams.setUser( user );\n-//\n-//        TrackerBundle trackerBundle = trackerBundleService.create( trackerBundleParams ).get( 0 );\n-//        assertEquals( 1, trackerBundle.getTrackedEntities().size() );\n-//\n-//        TrackerValidationReport report = trackerValidationService.validate( trackerBundle );\n-//        assertEquals( 1, report.getErrorReports().size() );\n-//        assertThat( report.getErrorReports(),\n-//            hasItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1012 ) ) ) );\n-//\n-//        printErrors( report );\n-//    }\n-\n-//    @Test\n-//    public void testGeoFeatureTypeNone()\n-//        throws IOException\n-//    {\n-//        TrackerBundleParams trackerBundleParams = createBundleFromJson(\n-//            \"tracker/validations/te-data_error_geo-ftype-none.json\" );\n-//\n-//        User user = userService.getUser( ADMIN_USER );\n-//        trackerBundleParams.setUser( user );\n-//\n-//        TrackerBundle trackerBundle = trackerBundleService.create( trackerBundleParams ).get( 0 );\n-//        assertEquals( 1, trackerBundle.getTrackedEntities().size() );\n-//\n-//        TrackerValidationReport report = trackerValidationService.validate( trackerBundle );\n-//        assertEquals( 1, report.getErrorReports().size() );\n-//        assertThat( report.getErrorReports(),\n-//            everyItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1012 ) ) ) );\n-//\n-//        printErrors( report );\n-//    }\n-\n     @Test\n     public void testGeoOk()\n         throws IOException\n", "next_change": {"commit": "0c469e1350e645b019954827553da9f855b7dcb4", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/TrackedEntityImportValidationTest.java b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/TrackedEntityImportValidationTest.java\nindex 831f29e384..a84ac0dee6 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/TrackedEntityImportValidationTest.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/TrackedEntityImportValidationTest.java\n", "chunk": "@@ -291,7 +291,7 @@ public class TrackedEntityImportValidationTest\n         assertEquals( 1, report.getErrorReports().size() );\n \n         assertThat( report.getErrorReports(),\n-            hasItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1011 ) ) ) );\n+            hasItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1049 ) ) ) );\n     }\n \n     @Test\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/TrackedEntityImportValidationTest.java b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/TrackedEntityImportValidationTest.java\nindex 4f1e541968..a84ac0dee6 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/TrackedEntityImportValidationTest.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/TrackedEntityImportValidationTest.java\n", "chunk": "@@ -291,51 +291,9 @@ public class TrackedEntityImportValidationTest\n         assertEquals( 1, report.getErrorReports().size() );\n \n         assertThat( report.getErrorReports(),\n-            hasItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1011 ) ) ) );\n+            hasItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1049 ) ) ) );\n     }\n \n-//    @Test\n-//    public void testGeoFeatureTypeMismatch()\n-//        throws IOException\n-//    {\n-//        TrackerBundleParams trackerBundleParams = createBundleFromJson(\n-//            \"tracker/validations/te-data_error_geo-ftype-mismatch.json\" );\n-//\n-//        User user = userService.getUser( ADMIN_USER );\n-//        trackerBundleParams.setUser( user );\n-//\n-//        TrackerBundle trackerBundle = trackerBundleService.create( trackerBundleParams ).get( 0 );\n-//        assertEquals( 1, trackerBundle.getTrackedEntities().size() );\n-//\n-//        TrackerValidationReport report = trackerValidationService.validate( trackerBundle );\n-//        assertEquals( 1, report.getErrorReports().size() );\n-//        assertThat( report.getErrorReports(),\n-//            hasItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1012 ) ) ) );\n-//\n-//        printErrors( report );\n-//    }\n-\n-//    @Test\n-//    public void testGeoFeatureTypeNone()\n-//        throws IOException\n-//    {\n-//        TrackerBundleParams trackerBundleParams = createBundleFromJson(\n-//            \"tracker/validations/te-data_error_geo-ftype-none.json\" );\n-//\n-//        User user = userService.getUser( ADMIN_USER );\n-//        trackerBundleParams.setUser( user );\n-//\n-//        TrackerBundle trackerBundle = trackerBundleService.create( trackerBundleParams ).get( 0 );\n-//        assertEquals( 1, trackerBundle.getTrackedEntities().size() );\n-//\n-//        TrackerValidationReport report = trackerValidationService.validate( trackerBundle );\n-//        assertEquals( 1, report.getErrorReports().size() );\n-//        assertThat( report.getErrorReports(),\n-//            everyItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1012 ) ) ) );\n-//\n-//        printErrors( report );\n-//    }\n-\n     @Test\n     public void testGeoOk()\n         throws IOException\n", "next_change": {"commit": "3e799d196b8f73ad216ea100a07ddd5f7dfc53e0", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/TrackedEntityImportValidationTest.java b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/TrackedEntityImportValidationTest.java\nindex a84ac0dee6..2954ca0104 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/TrackedEntityImportValidationTest.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/TrackedEntityImportValidationTest.java\n", "chunk": "@@ -298,7 +282,7 @@ public class TrackedEntityImportValidationTest\n     public void testGeoOk()\n         throws IOException\n     {\n-        TrackerBundleParams params = createBundleFromJson(\n+        TrackerImportParams params = createBundleFromJson(\n             \"tracker/validations/te-data_error_geo-ok.json\" );\n \n         ValidateAndCommitTestUnit createAndUpdate = validateAndCommit( params, TrackerImportStrategy.CREATE );\n", "next_change": {"commit": "20dfefe359779d7e1c1921ba920465227e72f071", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/TrackedEntityImportValidationTest.java b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/TrackedEntityImportValidationTest.java\nindex 2954ca0104..6533e70f96 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/TrackedEntityImportValidationTest.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/TrackedEntityImportValidationTest.java\n", "chunk": "@@ -284,43 +238,11 @@ public class TrackedEntityImportValidationTest\n     {\n         TrackerImportParams params = createBundleFromJson(\n             \"tracker/validations/te-data_error_geo-ok.json\" );\n+        params.setImportStrategy( TrackerImportStrategy.CREATE );\n \n-        ValidateAndCommitTestUnit createAndUpdate = validateAndCommit( params, TrackerImportStrategy.CREATE );\n-        TrackerValidationReport report = createAndUpdate.getValidationReport();\n-\n-        printReport( report );\n-        assertEquals( 0, report.getErrorReports().size() );\n-    }\n-\n-    @Test\n-    public void testTeCreateAlreadyExists()\n-        throws IOException\n-    {\n-        TrackerImportParams trackerBundleParams = createBundleFromJson( \"tracker/validations/te-data_ok.json\" );\n-\n-        User user = userService.getUser( ADMIN_USER_UID );\n-        trackerBundleParams.setUserId( user.getUid() );\n-\n-        TrackerBundle trackerBundle = trackerBundleService.create( trackerBundleParams );\n-        assertEquals( 13, trackerBundle.getTrackedEntities().size() );\n+        TrackerImportReport trackerImportReport = trackerImportService.importTracker( params );\n \n-        // Validate first time, should contain no errors.\n-        TrackerValidationReport report = trackerValidationService.validate( trackerBundle );\n-        assertEquals( 0, report.getErrorReports().size() );\n-\n-        // Commit the validated bundle...\n-        trackerBundleService.commit( trackerBundle );\n-\n-        // Re-validate, should now contain 13 errors...\n-        report = trackerValidationService.validate( trackerBundle );\n-        assertEquals( 13, report.getErrorReports().size() );\n-        assertThat( report.getErrorReports(),\n-            everyItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1002 ) ) ) );\n-\n-        // Tracker should now have 13 teis removed from the collection, since they all failed.\n-        assertEquals( 0, trackerBundle.getTrackedEntities().size() );\n-\n-        printReport( report );\n+        assertEquals( 0, trackerImportReport.getValidationReport().getErrorReports().size() );\n     }\n \n     @Test\n", "next_change": {"commit": "22d5da9d9a812b02eb5acd643112a6b050b5d63c", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/TrackedEntityImportValidationTest.java b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/TrackedEntityImportValidationTest.java\nindex 6533e70f96..087151b2cd 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/TrackedEntityImportValidationTest.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/TrackedEntityImportValidationTest.java\n", "chunk": "@@ -96,201 +98,206 @@ public class TrackedEntityImportValidationTest\n         User systemUser = createUser( \"systemUser\", \"ALL\" );\n         userService.addUser( systemUser );\n         injectSecurityContext( systemUser );\n-\n         Map<Class<? extends IdentifiableObject>, List<IdentifiableObject>> metadata = renderService.fromMetadata(\n             new ClassPathResource( \"tracker/tracker_basic_metadata.json\" ).getInputStream(), RenderFormat.JSON );\n-\n         ObjectBundleParams params = new ObjectBundleParams();\n         params.setObjectBundleMode( ObjectBundleMode.COMMIT );\n         params.setImportStrategy( ImportStrategy.CREATE );\n         params.setObjects( metadata );\n-\n         ObjectBundle bundle = objectBundleService.create( params );\n         ObjectBundleValidationReport validationReport = objectBundleValidationService.validate( bundle );\n-        List<ErrorReport> errorReports = validationReport.getErrorReports();\n-        assertTrue( errorReports.isEmpty() );\n-\n+        assertFalse( validationReport.hasErrorReports() );\n         ObjectBundleCommitReport commit = objectBundleService.commit( bundle );\n-        List<ErrorReport> errorReports1 = commit.getErrorReports();\n-        assertTrue( errorReports1.isEmpty() );\n-\n+        assertFalse( commit.hasErrorReports() );\n         manager.flush();\n     }\n \n     @Test\n-    public void failValidationWhenTrackedEntityAttributeHasWrongOptionValue()\n+    void failValidationWhenTrackedEntityAttributeHasWrongOptionValue()\n         throws IOException\n     {\n-        TrackerImportParams params = createBundleFromJson(\n-            \"tracker/validations/te-with_invalid_option_value.json\" );\n+        TrackerImportParams params = createBundleFromJson( \"tracker/validations/te-with_invalid_option_value.json\" );\n         params.setImportStrategy( TrackerImportStrategy.CREATE );\n-\n         TrackerImportReport trackerImportReport = trackerImportService.importTracker( params );\n-\n         assertEquals( 1, trackerImportReport.getValidationReport().getErrorReports().size() );\n-\n         assertThat( trackerImportReport.getValidationReport().getErrorReports(),\n             everyItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1125 ) ) ) );\n     }\n \n     @Test\n-    public void successValidationWhenTrackedEntityAttributeHasValidOptionValue()\n+    void successValidationWhenTrackedEntityAttributeHasValidOptionValue()\n         throws IOException\n     {\n-        TrackerImportParams params = createBundleFromJson(\n-            \"tracker/validations/te-with_valid_option_value.json\" );\n+        TrackerImportParams params = createBundleFromJson( \"tracker/validations/te-with_valid_option_value.json\" );\n         params.setImportStrategy( TrackerImportStrategy.CREATE );\n-\n         TrackerImportReport trackerImportReport = trackerImportService.importTracker( params );\n-\n         assertEquals( 0, trackerImportReport.getValidationReport().getErrorReports().size() );\n     }\n \n     @Test\n-    public void testTeValidationOkAll()\n+    void failValidationWhenTrackedEntityAttributesHaveSameUniqueValues()\n         throws IOException\n     {\n-        TrackerImportParams params = createBundleFromJson( \"tracker/validations/te-data_ok.json\" );\n+        TrackerImportParams params = createBundleFromJson( \"tracker/validations/te-with_unique_attributes.json\" );\n         params.setImportStrategy( TrackerImportStrategy.CREATE );\n-\n         TrackerImportReport trackerImportReport = trackerImportService.importTracker( params );\n+        assertEquals( 2, trackerImportReport.getValidationReport().getErrorReports().size() );\n+        assertThat( trackerImportReport.getValidationReport().getErrorReports(),\n+            everyItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1064 ) ) ) );\n+    }\n \n+    @Test\n+    void testTeValidationOkAll()\n+        throws IOException\n+    {\n+        TrackerImportParams params = createBundleFromJson( \"tracker/validations/te-data_with_different_ou.json\" );\n+        params.setImportStrategy( TrackerImportStrategy.CREATE );\n+        TrackerImportReport trackerImportReport = trackerImportService.importTracker( params );\n         assertEquals( 0, trackerImportReport.getValidationReport().getErrorReports().size() );\n         assertEquals( TrackerStatus.OK, trackerImportReport.getStatus() );\n     }\n \n     @Test\n-    public void testNoWriteAccessFailFast()\n+    void testNoCreateTeiAccessOutsideCaptureScopeOu()\n         throws IOException\n     {\n-        TrackerImportParams params = createBundleFromJson( \"tracker/validations/te-data_ok.json\" );\n-\n-        User user = userService.getUser( USER_2 );\n+        TrackerImportParams params = createBundleFromJson( \"tracker/validations/te-data_with_different_ou.json\" );\n+        User user = userService.getUser( USER_7 );\n         params.setUser( user );\n         params.setImportStrategy( TrackerImportStrategy.CREATE );\n-\n+        params.setAtomicMode( AtomicMode.OBJECT );\n         TrackerImportReport trackerImportReport = trackerImportService.importTracker( params );\n-\n-        assertEquals( 13, trackerImportReport.getValidationReport().getErrorReports().size() );\n-\n+        assertEquals( 1, trackerImportReport.getValidationReport().getErrorReports().size() );\n+        assertEquals( 2, trackerImportReport.getStats().getCreated() );\n+        assertEquals( 1, trackerImportReport.getStats().getIgnored() );\n         assertThat( trackerImportReport.getValidationReport().getErrorReports(),\n-            everyItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1000 ) ) ) );\n+            IsCollectionContaining.hasItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1000 ) ) ) );\n     }\n \n     @Test\n-    public void testNoWriteAccessToOrg()\n+    void testUpdateAccessInSearchScopeOu()\n         throws IOException\n     {\n-        TrackerImportParams params = createBundleFromJson( \"tracker/validations/te-data_ok.json\" );\n-\n-        User user = userService.getUser( USER_2 );\n-        params.setUser( user );\n+        TrackerImportParams params = createBundleFromJson( \"tracker/validations/te-data_with_different_ou.json\" );\n         params.setImportStrategy( TrackerImportStrategy.CREATE );\n-\n         TrackerImportReport trackerImportReport = trackerImportService.importTracker( params );\n+        assertEquals( TrackerStatus.OK, trackerImportReport.getStatus() );\n+        assertEquals( 0, trackerImportReport.getValidationReport().getErrorReports().size() );\n+        assertEquals( 3, trackerImportReport.getStats().getCreated() );\n+        // For some reason teiSearchOrgunits is not created properly from\n+        // metadata\n+        // Redoing the update here for the time being.\n+        User user = userService.getUser( USER_8 );\n+        user.setTeiSearchOrganisationUnits( new HashSet<>( user.getDataViewOrganisationUnits() ) );\n+        userService.updateUser( user );\n+        dbmsManager.clearSession();\n+        params = createBundleFromJson( \"tracker/validations/te-data_with_different_ou.json\" );\n+        user = userService.getUser( USER_8 );\n+        params.setUser( user );\n+        params.setImportStrategy( TrackerImportStrategy.CREATE_AND_UPDATE );\n+        params.setAtomicMode( AtomicMode.OBJECT );\n+        trackerImportReport = trackerImportService.importTracker( params );\n+        assertEquals( TrackerStatus.OK, trackerImportReport.getStatus() );\n+        assertEquals( 0, trackerImportReport.getValidationReport().getErrorReports().size() );\n+        assertEquals( 3, trackerImportReport.getStats().getUpdated() );\n+    }\n \n-        assertEquals( 13, trackerImportReport.getValidationReport().getErrorReports().size() );\n-\n+    @Test\n+    void testNoUpdateAccessOutsideSearchScopeOu()\n+        throws IOException\n+    {\n+        TrackerImportParams params = createBundleFromJson( \"tracker/validations/te-data_with_different_ou.json\" );\n+        params.setImportStrategy( TrackerImportStrategy.CREATE );\n+        TrackerImportReport trackerImportReport = trackerImportService.importTracker( params );\n+        assertEquals( TrackerStatus.OK, trackerImportReport.getStatus() );\n+        assertEquals( 0, trackerImportReport.getValidationReport().getErrorReports().size() );\n+        assertEquals( 3, trackerImportReport.getStats().getCreated() );\n+        dbmsManager.clearSession();\n+        params = createBundleFromJson( \"tracker/validations/te-data_with_different_ou.json\" );\n+        User user = userService.getUser( USER_7 );\n+        params.setUser( user );\n+        params.setImportStrategy( TrackerImportStrategy.CREATE_AND_UPDATE );\n+        params.setAtomicMode( AtomicMode.OBJECT );\n+        trackerImportReport = trackerImportService.importTracker( params );\n+        assertEquals( 1, trackerImportReport.getValidationReport().getErrorReports().size() );\n+        assertEquals( 2, trackerImportReport.getStats().getUpdated() );\n+        assertEquals( 1, trackerImportReport.getStats().getIgnored() );\n         assertThat( trackerImportReport.getValidationReport().getErrorReports(),\n-            everyItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1000 ) ) ) );\n+            IsCollectionContaining.hasItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1003 ) ) ) );\n     }\n \n     @Test\n-    public void testNoWriteAccessInAcl()\n+    void testNoWriteAccessInAcl()\n         throws IOException\n     {\n         TrackerImportParams params = createBundleFromJson( \"tracker/validations/te-data_ok.json\" );\n-\n         User user = userService.getUser( USER_1 );\n         params.setUser( user );\n         params.setImportStrategy( TrackerImportStrategy.CREATE );\n-\n         TrackerImportReport trackerImportReport = trackerImportService.importTracker( params );\n-\n         assertEquals( 13, trackerImportReport.getValidationReport().getErrorReports().size() );\n-\n         assertThat( trackerImportReport.getValidationReport().getErrorReports(),\n             everyItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1001 ) ) ) );\n     }\n \n     @Test\n-    public void testWriteAccessInAclViaUserGroup()\n+    void testWriteAccessInAclViaUserGroup()\n         throws IOException\n     {\n         TrackerImportParams params = createBundleFromJson( \"tracker/validations/te-data_ok.json\" );\n-\n         User user = userService.getUser( USER_3 );\n         params.setUserId( user.getUid() );\n         params.setUser( user );\n         user.getUserCredentials().setPassword( \"user4password\" );\n         injectSecurityContext( user );\n         params.setImportStrategy( TrackerImportStrategy.CREATE );\n-\n         TrackerImportReport trackerImportReport = trackerImportService.importTracker( params );\n-\n         assertEquals( 0, trackerImportReport.getValidationReport().getErrorReports().size() );\n         assertEquals( TrackerStatus.OK, trackerImportReport.getStatus() );\n     }\n \n     @Test\n-    public void testGeoOk()\n+    void testGeoOk()\n         throws IOException\n     {\n-        TrackerImportParams params = createBundleFromJson(\n-            \"tracker/validations/te-data_error_geo-ok.json\" );\n+        TrackerImportParams params = createBundleFromJson( \"tracker/validations/te-data_error_geo-ok.json\" );\n         params.setImportStrategy( TrackerImportStrategy.CREATE );\n-\n         TrackerImportReport trackerImportReport = trackerImportService.importTracker( params );\n-\n         assertEquals( 0, trackerImportReport.getValidationReport().getErrorReports().size() );\n     }\n \n     @Test\n-    public void testTeAttrNonExistentAttr()\n+    void testTeAttrNonExistentAttr()\n         throws IOException\n     {\n-        TrackerImportParams params = createBundleFromJson(\n-            \"tracker/validations/te-data_error_attr-non-existing.json\" );\n+        TrackerImportParams params = createBundleFromJson( \"tracker/validations/te-data_error_attr-non-existing.json\" );\n         params.setImportStrategy( TrackerImportStrategy.CREATE );\n-\n         TrackerImportReport trackerImportReport = trackerImportService.importTracker( params );\n-\n         assertEquals( 2, trackerImportReport.getValidationReport().getErrorReports().size() );\n-\n         assertThat( trackerImportReport.getValidationReport().getErrorReports(),\n             everyItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1006 ) ) ) );\n     }\n \n     @Test\n-    public void testDeleteCascadeProgramInstances()\n+    void testDeleteCascadeProgramInstances()\n         throws IOException\n     {\n-        TrackerImportParams params = createBundleFromJson(\n-            \"tracker/validations/enrollments_te_te-data.json\" );\n+        TrackerImportParams params = createBundleFromJson( \"tracker/validations/enrollments_te_te-data.json\" );\n         params.setImportStrategy( TrackerImportStrategy.CREATE );\n-\n         TrackerImportReport trackerImportReport = trackerImportService.importTracker( params );\n-\n         assertEquals( 0, trackerImportReport.getValidationReport().getErrorReports().size() );\n         assertEquals( TrackerStatus.OK, trackerImportReport.getStatus() );\n-\n         importProgramInstances();\n-\n         manager.flush();\n         manager.clear();\n-\n-        params = renderService\n-            .fromJson( new ClassPathResource( \"tracker/validations/enrollments_te_te-data.json\" ).getInputStream(),\n-                TrackerImportParams.class );\n-\n+        params = renderService.fromJson(\n+            new ClassPathResource( \"tracker/validations/enrollments_te_te-data.json\" ).getInputStream(),\n+            TrackerImportParams.class );\n         User user2 = userService.getUser( USER_4 );\n         params.setUser( user2 );\n         params.setImportStrategy( TrackerImportStrategy.DELETE );\n-\n         trackerImportReport = trackerImportService.importTracker( params );\n-\n         assertEquals( 2, trackerImportReport.getValidationReport().getErrorReports().size() );\n-\n         assertThat( trackerImportReport.getValidationReport().getErrorReports(),\n             everyItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1100 ) ) ) );\n     }\n", "next_change": {"commit": "7c0131dfcfbf72dad27dc5f0a3f6a776e286c79a", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/TrackedEntityImportValidationTest.java b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/TrackedEntityImportValidationTest.java\nindex 087151b2cd..1df310baf6 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/TrackedEntityImportValidationTest.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/TrackedEntityImportValidationTest.java\n", "chunk": "@@ -297,8 +297,8 @@ class TrackedEntityImportValidationTest extends AbstractImportValidationTest\n         params.setUser( user2 );\n         params.setImportStrategy( TrackerImportStrategy.DELETE );\n         trackerImportReport = trackerImportService.importTracker( params );\n-        assertEquals( 2, trackerImportReport.getValidationReport().getErrorReports().size() );\n-        assertThat( trackerImportReport.getValidationReport().getErrorReports(),\n+        assertEquals( 2, trackerImportReport.getValidationReport().getErrors().size() );\n+        assertThat( trackerImportReport.getValidationReport().getErrors(),\n             everyItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1100 ) ) ) );\n     }\n \n", "next_change": {"commit": "7b4551dd459386ffc228f4e38471237442a693c4", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/TrackedEntityImportValidationTest.java b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/TrackedEntityImportValidationTest.java\nindex 1df310baf6..580a07d5a2 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/TrackedEntityImportValidationTest.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/TrackedEntityImportValidationTest.java\n", "chunk": "@@ -302,6 +302,29 @@ class TrackedEntityImportValidationTest extends AbstractImportValidationTest\n             everyItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1100 ) ) ) );\n     }\n \n+    @Test\n+    void testTeDeleteOk()\n+        throws IOException\n+    {\n+        TrackerImportParams params = createBundleFromJson( \"tracker/validations/te-data.json\" );\n+        params.setImportStrategy( TrackerImportStrategy.CREATE );\n+        TrackerImportReport trackerImportReport = trackerImportService.importTracker( params );\n+        assertEquals( 0, trackerImportReport.getValidationReport().getErrors().size() );\n+        assertEquals( TrackerStatus.OK, trackerImportReport.getStatus() );\n+\n+        manager.flush();\n+        manager.clear();\n+\n+        TrackerImportParams paramsDelete = createBundleFromJson(\n+            \"tracker/validations/te-data-delete.json\" );\n+        paramsDelete.setImportStrategy( TrackerImportStrategy.DELETE );\n+\n+        TrackerImportReport trackerImportReportDelete = trackerImportService.importTracker( paramsDelete );\n+        assertEquals( 0, trackerImportReportDelete.getValidationReport().getErrors().size() );\n+        assertEquals( TrackerStatus.OK, trackerImportReportDelete.getStatus() );\n+        assertEquals( 1, trackerImportReportDelete.getStats().getDeleted() );\n+    }\n+\n     protected void importProgramInstances()\n         throws IOException\n     {\n", "next_change": {"commit": "2f44bf54a94fca80ec8bef3a160d403665973bed", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/TrackedEntityImportValidationTest.java b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/TrackedEntityImportValidationTest.java\nindex 580a07d5a2..5de9ee89ff 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/TrackedEntityImportValidationTest.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/TrackedEntityImportValidationTest.java\n", "chunk": "@@ -328,8 +277,7 @@ class TrackedEntityImportValidationTest extends AbstractImportValidationTest\n     protected void importProgramInstances()\n         throws IOException\n     {\n-        TrackerImportParams params = createBundleFromJson( \"tracker/validations/enrollments_te_enrollments-data.json\" );\n-        params.setImportStrategy( TrackerImportStrategy.CREATE );\n+        TrackerImportParams params = fromJson( \"tracker/validations/enrollments_te_enrollments-data.json\" );\n         TrackerImportReport trackerImportReport = trackerImportService.importTracker( params );\n         assertEquals( 0, trackerImportReport.getValidationReport().getErrors().size() );\n         assertEquals( TrackerStatus.OK, trackerImportReport.getStatus() );\n", "next_change": {"commit": "6b39184ce68d45d2d75a08c3d6b45fe012395457", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/TrackedEntityImportValidationTest.java b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/TrackedEntityImportValidationTest.java\nindex 5de9ee89ff..66d3cb010f 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/TrackedEntityImportValidationTest.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/TrackedEntityImportValidationTest.java\n", "chunk": "@@ -279,7 +270,6 @@ class TrackedEntityImportValidationTest extends TrackerTest\n     {\n         TrackerImportParams params = fromJson( \"tracker/validations/enrollments_te_enrollments-data.json\" );\n         TrackerImportReport trackerImportReport = trackerImportService.importTracker( params );\n-        assertEquals( 0, trackerImportReport.getValidationReport().getErrors().size() );\n-        assertEquals( TrackerStatus.OK, trackerImportReport.getStatus() );\n+        assertNoImportErrors( trackerImportReport );\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "message": "Merge commit", "committedDate": null}, {"oid": "2ed799f33ca26b918ed60473a3f097714f00492e", "committedDate": "2020-08-04 10:30:01 +0200", "message": "chore: Clean up code (#5877)"}, {"oid": "cb2ee65c0210c0d4b2bd8851789da8d4adfaf04d", "committedDate": "2020-09-07 10:28:21 +0200", "message": "fix: [DHIS2-9287] Fix the stats in the import summary (#6062)"}, {"oid": "2670177207885cb54b4b51516d55749ab8836588", "committedDate": "2020-11-13 14:02:16 +0100", "message": "fix: correct validation rule for Event's TEI value (#6655)"}, {"oid": "3e799d196b8f73ad216ea100a07ddd5f7dfc53e0", "committedDate": "2020-11-30 16:37:14 +0100", "message": "fix: remove long running transaction during Tracker Import (#6782)"}, {"oid": "8c4a255176ac5e675c549db2065926fdbaf0290b", "committedDate": "2020-12-14 08:31:48 +0100", "message": "fix: Remove clearSession/clearCache inside transaction causing audit fail (#6876)"}, {"oid": "46a4fb9730a952d5cbc36bce0718757e6edd2809", "committedDate": "2020-12-15 15:50:22 +0100", "message": "fix: DHIS2-10084 prevent changes to deleted tracked entities (#6882)"}, {"oid": "3e25b9b834757233501b068c1fd96b5b68cc22f7", "committedDate": "2020-12-22 12:59:13 +0100", "message": "feat: Convert sharing objects to JSONB structure [DHIS2-5814]"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "40fda8e0c1025bfdc425c0f0da547443831c4c41", "committedDate": "2021-02-10 12:01:12 +0100", "message": "fix: [DHIS2-10430] New validation hook to check mandatory fields (#7305)"}, {"oid": "c25b817a180f24b3de6b26d5a089563aa336aa8c", "committedDate": "2021-03-05 10:44:25 +0100", "message": "feat: Validation for values with option sets [DHIS2-10452] (#7512)"}, {"oid": "00ba07c1c8555a473f261d56bffffa2b75d3c146", "committedDate": "2021-03-08 12:59:21 +0100", "message": "refactor: Remove unused bundle hook and fix tests [TECH-553] (#7539)"}, {"oid": "c71a97bf6c13f342a7c972c7061dab2b61d9d587", "committedDate": "2021-04-08 08:14:46 +0200", "message": "refactor: Clean up redundant integration tests for validation hooks [TECH-579] (#7811)"}, {"oid": "cec6d680166157cab52adeae7583410083940255", "committedDate": "2021-04-09 10:48:33 +0200", "message": "refactor: Clean up integration tests for validation hooks (#7830)"}, {"oid": "20dfefe359779d7e1c1921ba920465227e72f071", "committedDate": "2021-05-25 12:55:24 +0200", "message": "fix: Remove validations from objects deletion service in new tracker importer [DHIS2-10789] (#8053)"}, {"oid": "0011c1ecd695c78405824a569c706b484a5fd552", "committedDate": "2021-07-05 12:38:04 +0700", "message": "chore: error reports as ADT (avoid collections) (#8353)"}, {"oid": "e72a194b035dc4f76df0c9cdaf7701a299b1558a", "committedDate": "2021-10-05 13:25:05 +0200", "message": "fix: Allow TEI updates in search scope [DHIS2-11910] (2.38) (#8921)"}, {"oid": "90653d12dbe3af183769c72228087b5454e7d775", "committedDate": "2021-10-12 15:54:46 +0200", "message": "fix: Fix attribute uniqueness validation for enrollments [DHIS2-11950] (#9020)"}, {"oid": "22d5da9d9a812b02eb5acd643112a6b050b5d63c", "committedDate": "2021-12-16 13:19:38 +0100", "message": "chore: migrate tests to JUnit 5 (#9467)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "7c0131dfcfbf72dad27dc5f0a3f6a776e286c79a", "committedDate": "2022-01-11 17:47:56 +0100", "message": "chore: make TrackerValidationReport add methods fluent and name Timing TECH-880 (#9601)"}, {"oid": "8ccf9a288a67e5ee5349024fd3d281372c64c956", "committedDate": "2022-02-22 13:25:35 +0800", "message": "feat: Merge User/UserCredentials into one DB table (#9754)"}, {"oid": "7b4551dd459386ffc228f4e38471237442a693c4", "committedDate": "2022-03-15 09:07:29 +0100", "message": "fix: Missing errorReports when using DELETE strategy and validation fails (event, tei) [ DHIS2-12685 ] (#10040)"}, {"oid": "d99da048b6427aa16b080ab0a0e25eda4a2a0f96", "committedDate": "2022-05-09 13:53:18 +0200", "message": "feat: Refactor getCurrentUser() to return DHIS2 User object 2 (#10600)"}, {"oid": "2f44bf54a94fca80ec8bef3a160d403665973bed", "committedDate": "2022-05-23 06:02:37 +0200", "message": "chore: Clean up user management in tracker tests [TECH-890] (#10862)"}, {"oid": "6b39184ce68d45d2d75a08c3d6b45fe012395457", "committedDate": "2022-06-03 08:16:09 +0200", "message": "test: use assertNoImportErrors for better context (#10989)"}, {"oid": "6e83eba877030575456f919de1bce55fcae8e517", "committedDate": "2022-06-24 10:01:46 +0200", "message": "test: move all integration tests into own module TECH-1209 (#11148)"}]}, {"oid": "f5ca59f3146a74d32ee856088e163893fd73a6ec", "url": "https://github.com/dhis2/dhis2-core/commit/f5ca59f3146a74d32ee856088e163893fd73a6ec", "message": "* Fix PR comments\n\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>", "committedDate": "2020-06-29T11:25:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg5Njg5OA==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446896898", "body": "Technically DataElement can also be files, but I don't remember if we support this for Tracker specifically yet. @Bekkalizer ?", "bodyText": "Technically DataElement can also be files, but I don't remember if we support this for Tracker specifically yet. @Bekkalizer ?", "bodyHTML": "<p dir=\"auto\">Technically DataElement can also be files, but I don't remember if we support this for Tracker specifically yet. <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/Bekkalizer/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/Bekkalizer\">@Bekkalizer</a> ?</p>", "author": "stian-sandvold", "createdAt": "2020-06-29T11:26:20Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/preheat/hooks/FileResourceTrackerPreheatHook.java", "diffHunk": "@@ -72,14 +72,17 @@ public void preheat( TrackerPreheatParams params, TrackerPreheat preheat )\n \n         List<String> fileResourceIds = new ArrayList<>();\n \n-        params.getTrackedEntities().forEach( te -> collectResourceIds( fileResourceAttributes, fileResourceIds, te.getAttributes() ) );\n-        params.getEnrollments().forEach( en -> collectResourceIds( fileResourceAttributes, fileResourceIds, en.getAttributes() ) );\n+        params.getTrackedEntities()\n+            .forEach( te -> collectResourceIds( fileResourceAttributes, fileResourceIds, te.getAttributes() ) );\n+        params.getEnrollments()", "originalCommit": "12bd589850367af9ce124e78ea519bd7842cb3c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxNTIxMQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r449915211", "bodyText": "DataElements can be file resources too!", "author": "Bekkalizer", "createdAt": "2020-07-05T20:23:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg5Njg5OA=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": null, "commits_in_main": [{"oid": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "message": "Merge commit", "committedDate": null}, {"oid": "f480b56f3e613f4e46ba4d892b51ca9ee622331d", "committedDate": "2020-11-11 11:47:49 +0100", "message": "refactor: Tracker preheat code refactoring (#6560)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkwMDE5Mw==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446900193", "body": "@netroms can you note down this as well for the next meeting. Delete + TODO error usage comments.", "bodyText": "@netroms can you note down this as well for the next meeting. Delete + TODO error usage comments.", "bodyHTML": "<p dir=\"auto\"><a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/netroms/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/netroms\">@netroms</a> can you note down this as well for the next meeting. Delete + TODO error usage comments.</p>", "author": "stian-sandvold", "createdAt": "2020-06-29T11:32:28Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/TrackerErrorCode.java", "diffHunk": "@@ -0,0 +1,153 @@\n+package org.hisp.dhis.tracker.report;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+/**\n+ * @author Morten Olav Hansen <mortenoh@gmail.com>\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+public enum TrackerErrorCode\n+{\n+    NONE( \"No error message given.\" ),\n+\n+    E1016( \"TrackedEntityInstance: `{0}`, already has an active enrollment in Program: `{1}`, and this \" +\n+        \"program only allows enrolling one time.\" ),\n+    E1038( \"TrackedEntityInstance: `{0}`, has multiple active enrollments in Program `{1}`.\" ),\n+    E1037( \"TrackedEntityInstance: `{0}`, is not enrolled in Program `{1}`.\" ),\n+    E1002( \"TrackedEntityInstance: `{0}`, already exists.\" ),\n+    E1064( \"Error validating attribute, not unique; Error `{0}`\" ),\n+    E1074( \"FeatureType is missing.\" ),\n+    E1031( \"Event OccurredAt date is missing.\" ),\n+    E1036( \"Event: `{0}`, TrackedEntityInstance does not point to a existing object.\" ),\n+    E1042( \"Event: `{0}`, needs to have completed date.\" ),\n+    E1056( \"Event date: `{0}`, is before start date: `{1}`, for AttributeOption: `{2}`.\" ),\n+    E1057( \"Event date: `{0}`, is after end date: `{1}`, for AttributeOption; `{2}`.\" ),\n+    E1051( \"Invalid event due date: `{0}`.\" ),\n+    E1052( \"Invalid event date: `{0}`.\" ),\n+    E1019( \"Only Program attributes is allowed for enrollment; Non valid attribute: `{0}`.\" ),\n+    E1008( \"Value: `{0}`, does not match the attribute pattern: `{1}`.\" ),\n+    E1007( \"Error validating attribute value type: `{0}`; Error: `{1}`.\" ),\n+    E1018( \"Missing mandatory attribute: `{0}`.\" ),\n+    E1075( \"Attribute: `{0}`, is missing uid.\" ),\n+    E1076( \"Attribute: `{0}`, value is null.\" ),\n+    E1077( \"Attribute: `{0}`, text value exceed the maximum allowed length: `{0}`.\" ),\n+    E1085( \"Attribute: `{0}`, value does not match value type: `{1}`.\" ),\n+    E1083( \"User: `{0}`, is not authorized to modify completed events.\" ),\n+    E1009( \"File resource: `{0}`, has already been assigned to a different object.\" ),\n+    E1084( \"File resource: `{0}`, reference could not be found.\" ),\n+    E1015( \"TrackedEntityInstance: `{0}`, already has an active Enrollment in Program `{1}`.\" ),\n+    E1022( \"TrackedEntityInstance: `{0}`, must have same TrackedEntityType as Program `{1}`.\" ),\n+    E1063( \"TrackedEntityInstance: `{0}`, does not exist.\" ),\n+    E1005( \"Could not find TrackedEntityType: `{0}`.\" ),\n+    E1006( \"Attribute: `{0}`, does not exist.\" ),\n+    E1011( \"Could not find OrganisationUnit with this uid: `{0}`.\" ),\n+    E1012( \"Geometry does not conform to FeatureType: `{0}`.\" ),\n+    E1014( \"Provided Program: `{0}`, is a Program without registration. \" +\n+        \"An Enrollment cannot be created into Program without registration.\" ),\n+    E1020( \"Enrollment date: `{0}`, can`t be future date.\" ),\n+    E1021( \"Incident date: `{0}`, can`t be future date.\" ),\n+    E1023( \"DisplayIncidentDate is true but IncidentDate is null or invalid formatted: `{0}`.\" ),\n+    E1025( \"Invalid Enrollment date: `{0}`.\" ),\n+    E1041( \"Enrollment OrganisationUnit: `{0}`, and Program: `{1}`, OrganisationUnit: `{2}`, don't match.\" ),\n+    E1068( \"Could not find TrackedEntityInstance: `{0}`, linked to Enrollment.\" ),\n+    E1069( \"Could not find Program: `{0}`, linked to Enrollment.\" ),\n+    E1070( \"Could not find OrganisationUnit: `{0}`, linked to Enrollment.\" ),\n+    E1080( \"Enrollment: `{0}`, already exists.\" ),\n+    E1081( \"Enrollment: `{0}`, do not exist.\" ),\n+    E1030( \"Event: `{0}`, already exists.\" ),\n+    E1032( \"Event: `{0}`, do not exist.\" ),\n+    E1035( \"Event: `{0}`, ProgramStage value is NULL.\" ),\n+    E1086( \"Event: `{0}`, has a program: `{1}`, that is a registration but its ProgramStage is not valid or missing.\" ),\n+    E1088( \"Event: `{0}`, program: `{1}`, and ProgramStage: `{2}`, could not be found.\" ),\n+    E1089( \"Event: `{0}`, ProgramStage Program and Event Program don't match.\" ),\n+    E1000( \"User: `{0}`, has no write access to OrganisationUnit: `{1}`.\" ),\n+    E1001( \"User: `{0}`, has no data write access to TrackedEntityType: `{1}`.\" ),\n+    E1091( \"User: `{0}`, has no data write access to Program: `{1}`.\" ),\n+    E1095( \"User: `{0}`, has no data write access to ProgramStage: `{1}`.\" ),\n+    E1096( \"User: `{0}`, has no data read access to Program: `{1}`.\" ),\n+    E1100( \"User: `{0}`, is lacking 'F_TEI_CASCADE_DELETE' authority to delete TrackedEntityInstance: `{1}`.\" ),\n+    E1102( \"User: `{0}`, does not have access to the tracked entity: `{1}`, Program: `{2}`, combination.\" ),\n+    E1103( \"User: `{0}`, is lacking 'F_ENROLLMENT_CASCADE_DELETE' authority to delete Enrollment : `{1}`.\" ),\n+    E1104( \"User: `{0}`, has no data read access to program: `{1}`, TrackedEntityType: `{2}`.\" ),\n+    E1112( \"Attribute value: `{0}`, is set to confidential but system is not properly configured to encrypt data.\" ),\n+    E1118( \"Note does not have a valid uuid: `{0}`.\" ),\n+    E1119( \"Note does not have a value: `{0}`.\" ),\n+    E1121( \"Note stored at date is invalid: `{0}`; Error: `{1}`.\" ),\n+    E1055( \"Default AttributeOptionCombo is not allowed since program has non-default CategoryCombo.\" ),\n+    E1115( \"Could not find CategoryOptionCombo: `{0}`.\" ),\n+    E1116( \"Could not find CategoryOption: `{0}`.\" ),\n+    E1117( \"CategoryOptionCombo does not exist for given category combo and category options: `{0}`.\" ),\n+    E1099( \"User: `{0}`, has no write access to CategoryOption: `{1}`.\" ),\n+    E1039( \"ProgramStage: `{0}`, is not repeatable and an event already exists.\" ),\n+    E1048( \"Object: `{0}`, uid: `{1}`, has an invalid uid format.\" ),\n+\n+    // TODO: Delete not working yet", "originalCommit": "12bd589850367af9ce124e78ea519bd7842cb3c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk5ODE5NA==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446998194", "bodyText": "Done", "author": "netroms", "createdAt": "2020-06-29T14:06:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkwMDE5Mw=="}], "type": "inlineReview", "revised_code": {"commit": "a6afb3aa2bbf5634d26be17ddf74f1ddd4630493", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/TrackerErrorCode.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/TrackerErrorCode.java\nindex 221dcb656f..adfdb21ed1 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/TrackerErrorCode.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/TrackerErrorCode.java\n", "chunk": "@@ -106,7 +106,7 @@ public enum TrackerErrorCode\n     E1099( \"User: `{0}`, has no write access to CategoryOption: `{1}`.\" ),\n     E1039( \"ProgramStage: `{0}`, is not repeatable and an event already exists.\" ),\n     E1048( \"Object: `{0}`, uid: `{1}`, has an invalid uid format.\" ),\n-\n+    E1049( \"Could not find OrganisationUnit: `{0}`, linked to Tracked Entity.\" ),\n     // TODO: Delete not working yet\n     E1082( \"Event: `{0}`, is already deleted.\" ),\n     E1113( \"Enrollment: `{0}`, is already deleted.\" ),\n", "next_change": null}]}, "revised_code_in_main": {"commit": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/TrackerErrorCode.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/TrackerErrorCode.java\nindex 221dcb656f..adfdb21ed1 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/TrackerErrorCode.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/TrackerErrorCode.java\n", "chunk": "@@ -106,7 +106,7 @@ public enum TrackerErrorCode\n     E1099( \"User: `{0}`, has no write access to CategoryOption: `{1}`.\" ),\n     E1039( \"ProgramStage: `{0}`, is not repeatable and an event already exists.\" ),\n     E1048( \"Object: `{0}`, uid: `{1}`, has an invalid uid format.\" ),\n-\n+    E1049( \"Could not find OrganisationUnit: `{0}`, linked to Tracked Entity.\" ),\n     // TODO: Delete not working yet\n     E1082( \"Event: `{0}`, is already deleted.\" ),\n     E1113( \"Enrollment: `{0}`, is already deleted.\" ),\n", "next_change": {"commit": "3e3dc98d92f0c13fb56cf17894eab06a78842133", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/TrackerErrorCode.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/TrackerErrorCode.java\nindex adfdb21ed1..05911722ec 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/TrackerErrorCode.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/TrackerErrorCode.java\n", "chunk": "@@ -111,8 +108,6 @@ public enum TrackerErrorCode\n     E1082( \"Event: `{0}`, is already deleted.\" ),\n     E1113( \"Enrollment: `{0}`, is already deleted.\" ),\n     E1114( \"TrackedEntity: `{0}`, is already deleted.\" ),\n-    // TODO: Note persistence not impl. yet\n-    E1120( \"Note already exist with same uuid: `{0}`.\" ),\n \n     //TODO: See TODO on error usage\n     E1017( \"Attribute: `{0}`, does not exist.\" ),\n", "next_change": {"commit": "0d35843121f0ad3004fad015f1520c5b06a5c337", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/TrackerErrorCode.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/TrackerErrorCode.java\nindex 05911722ec..5f30815fbb 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/TrackerErrorCode.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/TrackerErrorCode.java\n", "chunk": "@@ -108,6 +109,7 @@ public enum TrackerErrorCode\n     E1082( \"Event: `{0}`, is already deleted.\" ),\n     E1113( \"Enrollment: `{0}`, is already deleted.\" ),\n     E1114( \"TrackedEntity: `{0}`, is already deleted.\" ),\n+    E1118( \"Assigned user `{0}` is not a valid uid.\"),\n \n     //TODO: See TODO on error usage\n     E1017( \"Attribute: `{0}`, does not exist.\" ),\n", "next_change": {"commit": "ae4d365663ffddc9a34d1cdc0f629fd7b6386e90", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/TrackerErrorCode.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/TrackerErrorCode.java\nindex 5f30815fbb..4710ac6e56 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/TrackerErrorCode.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/TrackerErrorCode.java\n", "chunk": "@@ -110,6 +110,7 @@ public enum TrackerErrorCode\n     E1113( \"Enrollment: `{0}`, is already deleted.\" ),\n     E1114( \"TrackedEntity: `{0}`, is already deleted.\" ),\n     E1118( \"Assigned user `{0}` is not a valid uid.\"),\n+    E1119( \"A Tracker Note with uid `{0}` already exists.\"),\n \n     //TODO: See TODO on error usage\n     E1017( \"Attribute: `{0}`, does not exist.\" ),\n", "next_change": {"commit": "e063801f23d5aa761a791364c8c82e2d784f8c84", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/TrackerErrorCode.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/TrackerErrorCode.java\nindex 4710ac6e56..5c4f73450e 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/TrackerErrorCode.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/TrackerErrorCode.java\n", "chunk": "@@ -111,6 +111,7 @@ public enum TrackerErrorCode\n     E1114( \"TrackedEntity: `{0}`, is already deleted.\" ),\n     E1118( \"Assigned user `{0}` is not a valid uid.\"),\n     E1119( \"A Tracker Note with uid `{0}` already exists.\"),\n+    E1120( \"ProgramStage `{0}` does not allow user assignment\"),\n \n     //TODO: See TODO on error usage\n     E1017( \"Attribute: `{0}`, does not exist.\" ),\n", "next_change": {"commit": "46a4fb9730a952d5cbc36bce0718757e6edd2809", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/TrackerErrorCode.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/TrackerErrorCode.java\nindex 5c4f73450e..d3dfa254af 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/TrackerErrorCode.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/TrackerErrorCode.java\n", "chunk": "@@ -106,9 +110,9 @@ public enum TrackerErrorCode\n     E1048( \"Object: `{0}`, uid: `{1}`, has an invalid uid format.\" ),\n     E1049( \"Could not find OrganisationUnit: `{0}`, linked to Tracked Entity.\" ),\n     // TODO: Delete not working yet\n-    E1082( \"Event: `{0}`, is already deleted.\" ),\n+    E1082( \"Event: `{0}`, is already deleted and can't be modified.\" ),\n     E1113( \"Enrollment: `{0}`, is already deleted.\" ),\n-    E1114( \"TrackedEntity: `{0}`, is already deleted.\" ),\n+    E1114( \"TrackedEntity: `{0}`, is already deleted and can't be modified.\" ),\n     E1118( \"Assigned user `{0}` is not a valid uid.\"),\n     E1119( \"A Tracker Note with uid `{0}` already exists.\"),\n     E1120( \"ProgramStage `{0}` does not allow user assignment\"),\n", "next_change": {"commit": "6e020e7c286db62dbc57c1b58a94f5841dc09551", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/TrackerErrorCode.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/TrackerErrorCode.java\nindex d3dfa254af..03fd731de6 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/TrackerErrorCode.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/TrackerErrorCode.java\n", "chunk": "@@ -111,7 +111,7 @@ public enum TrackerErrorCode\n     E1049( \"Could not find OrganisationUnit: `{0}`, linked to Tracked Entity.\" ),\n     // TODO: Delete not working yet\n     E1082( \"Event: `{0}`, is already deleted and can't be modified.\" ),\n-    E1113( \"Enrollment: `{0}`, is already deleted.\" ),\n+    E1113( \"Enrollment: `{0}`, is already deleted and can't be modified.\" ),\n     E1114( \"TrackedEntity: `{0}`, is already deleted and can't be modified.\" ),\n     E1118( \"Assigned user `{0}` is not a valid uid.\"),\n     E1119( \"A Tracker Note with uid `{0}` already exists.\"),\n", "next_change": {"commit": "ea76fa86409613c9766d4508d65c88ac55c413c3", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/TrackerErrorCode.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/TrackerErrorCode.java\nindex 03fd731de6..e0c4e6a894 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/TrackerErrorCode.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/TrackerErrorCode.java\n", "chunk": "@@ -113,21 +111,21 @@ public enum TrackerErrorCode\n     E1082( \"Event: `{0}`, is already deleted and can't be modified.\" ),\n     E1113( \"Enrollment: `{0}`, is already deleted and can't be modified.\" ),\n     E1114( \"TrackedEntity: `{0}`, is already deleted and can't be modified.\" ),\n-    E1118( \"Assigned user `{0}` is not a valid uid.\"),\n-    E1119( \"A Tracker Note with uid `{0}` already exists.\"),\n-    E1120( \"ProgramStage `{0}` does not allow user assignment\"),\n+    E1118( \"Assigned user `{0}` is not a valid uid.\" ),\n+    E1119( \"A Tracker Note with uid `{0}` already exists.\" ),\n+    E1120( \"ProgramStage `{0}` does not allow user assignment\" ),\n \n-    //TODO: See TODO on error usage\n+    // TODO: See TODO on error usage\n     E1017( \"Attribute: `{0}`, does not exist.\" ),\n-    //TODO: See TODO on error usage\n+    // TODO: See TODO on error usage\n     E1093( \"User: `{0}`, has no search access to OrganisationUnit: `{1}`.\" ),\n-    //TODO: See TODO on error usage\n+    // TODO: See TODO on error usage\n     E1094( \"Not allowed to update Enrollment: `{0}`, existing Program `{1}`.\" ),\n-    //TODO: See TODO on error usage\n+    // TODO: See TODO on error usage\n     E1110( \"Not allowed to update Event: `{0}`, existing Program `{1}`.\" ),\n-    //TODO: See TODO on error usage\n+    // TODO: See TODO on error usage\n     E1111( \"We have a generated attribute: `{0}`, but no pattern.\" ),\n-    //TODO: See TODO on error usage\n+    // TODO: See TODO on error usage\n     E1040( \"Multiple active enrollments exists for Program: `{0}`.\" ),\n     // TODO See TODO on error usage\n     E1045( \"Program: `{0}`, expiry date has passed. It is not possible to make changes to this event.\" ),\n", "next_change": {"commit": "c71a97bf6c13f342a7c972c7061dab2b61d9d587", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/TrackerErrorCode.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/TrackerErrorCode.java\nindex e0c4e6a894..f330bc9df1 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/TrackerErrorCode.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/TrackerErrorCode.java\n", "chunk": "@@ -125,8 +129,6 @@ public enum TrackerErrorCode\n     E1110( \"Not allowed to update Event: `{0}`, existing Program `{1}`.\" ),\n     // TODO: See TODO on error usage\n     E1111( \"We have a generated attribute: `{0}`, but no pattern.\" ),\n-    // TODO: See TODO on error usage\n-    E1040( \"Multiple active enrollments exists for Program: `{0}`.\" ),\n     // TODO See TODO on error usage\n     E1045( \"Program: `{0}`, expiry date has passed. It is not possible to make changes to this event.\" ),\n     // TODO See TODO on error usage\n", "next_change": {"commit": "1e75d833b15ed65163451abb7d4dfb99831484de", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/TrackerErrorCode.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/TrackerErrorCode.java\nindex f330bc9df1..697982d5c6 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/TrackerErrorCode.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/TrackerErrorCode.java\n", "chunk": "@@ -127,8 +128,6 @@ public enum TrackerErrorCode\n     E1094( \"Not allowed to update Enrollment: `{0}`, existing Program `{1}`.\" ),\n     // TODO: See TODO on error usage\n     E1110( \"Not allowed to update Event: `{0}`, existing Program `{1}`.\" ),\n-    // TODO: See TODO on error usage\n-    E1111( \"We have a generated attribute: `{0}`, but no pattern.\" ),\n     // TODO See TODO on error usage\n     E1045( \"Program: `{0}`, expiry date has passed. It is not possible to make changes to this event.\" ),\n     // TODO See TODO on error usage\n", "next_change": {"commit": "9fb0cb71477e0a9c1c126e3dfaf075c27d9d4452", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/TrackerErrorCode.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/TrackerErrorCode.java\nindex 697982d5c6..cb1cf677cd 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/TrackerErrorCode.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/TrackerErrorCode.java\n", "chunk": "@@ -119,26 +119,15 @@ public enum TrackerErrorCode\n     E1126( \"Not allowed to update Tracked Entity property: {0}.\" ),\n     E1127( \"Not allowed to update Enrollment property: {0}.\" ),\n     E1128( \"Not allowed to update Event property: {0}.\" ),\n-\n-    // TODO: See TODO on error usage\n     E1017( \"Attribute: `{0}`, does not exist.\" ),\n-    // TODO: See TODO on error usage\n     E1093( \"User: `{0}`, has no search access to OrganisationUnit: `{1}`.\" ),\n-    // TODO: See TODO on error usage\n     E1094( \"Not allowed to update Enrollment: `{0}`, existing Program `{1}`.\" ),\n-    // TODO: See TODO on error usage\n     E1110( \"Not allowed to update Event: `{0}`, existing Program `{1}`.\" ),\n-    // TODO See TODO on error usage\n     E1045( \"Program: `{0}`, expiry date has passed. It is not possible to make changes to this event.\" ),\n-    // TODO See TODO on error usage\n     E1043( \"Event: `{0}`, completeness date has expired. Not possible to make changes to this event.\" ),\n-    // TODO See TODO on error usage\n     E1044( \"Event: `{0}`, needs to have event date.\" ),\n-    // TODO See TODO on error usage\n     E1046( \"Event: `{0}`, needs to have at least one (event or schedule) date.\" ),\n-    // TODO See TODO on error usage\n     E1047( \"Event: `{0}`, date belongs to an expired period. It is not possible to create such event.\" ),\n-\n     E1300( \"Generated by program rule (`{0}`) - `{1}`\" ),\n     E1301( \"Generated by program rule (`{0}`) - Mandatory DataElement `{1}` is not present\" ),\n     E1302( \"DataElement `{0}` is not valid: `{1}`\" ),\n", "next_change": {"commit": "ab908149c6085d63709e91e20c864d6b9cda4849", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/TrackerErrorCode.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/TrackerErrorCode.java\nindex cb1cf677cd..438de989eb 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/TrackerErrorCode.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/TrackerErrorCode.java\n", "chunk": "@@ -135,12 +133,14 @@ public enum TrackerErrorCode\n     E1304( \"DataElement `{0}` is not a valid data element\" ),\n     E1305( \"DataElement `{0}` is not part of `{1}` program stage\" ),\n     E1306( \"Generated by program rule (`{0}`) - Mandatory Attribute `{1}` is not present\" ),\n-    E1307(\n-        \"Generated by program rule (`{0}`) - Unable to assign value to data element `{1}`. The provided value must be empty or match the calculated value `{2}`\" ),\n+    E1307( \"Generated by program rule (`{0}`) - Unable to assign value to data element `{1}`. \" +\n+        \"The provided value must be empty or match the calculated value `{2}`\" ),\n     E1308( \"Generated by program rule (`{0}`) - DataElement `{1}` is being replaced in event `{2}`\" ),\n-    E1309(\n-        \"Generated by program rule (`{0}`) - Unable to assign value to attribute `{1}`. The provided value must be empty or match the calculated value `{2}`\" ),\n+    E1309( \"Generated by program rule (`{0}`) - Unable to assign value to attribute `{1}`. \" +\n+        \"The provided value must be empty or match the calculated value `{2}`\" ),\n     E1310( \"Generated by program rule (`{0}`) - Attribute `{1}` is being replaced in tei `{2}`\" ),\n+\n+    /* Relationship */\n     E4000( \"Relationship: `{0}` cannot link to itself\" ),\n     E4001( \"Relationship Item `{0}` for Relationship `{1}` is invalid: an Item can link only one Tracker entity.\" ),\n     E4003( \"There are duplicated relationships.\" ),\n", "next_change": {"commit": "efc4611bf24992a81f5db136bfbb2940d16f95f4", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/TrackerErrorCode.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/TrackerErrorCode.java\nindex 438de989eb..ebea0b7179 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/TrackerErrorCode.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/TrackerErrorCode.java\n", "chunk": "@@ -139,6 +141,8 @@ public enum TrackerErrorCode\n     E1309( \"Generated by program rule (`{0}`) - Unable to assign value to attribute `{1}`. \" +\n         \"The provided value must be empty or match the calculated value `{2}`\" ),\n     E1310( \"Generated by program rule (`{0}`) - Attribute `{1}` is being replaced in tei `{2}`\" ),\n+    E1311( \"Referral events need to have at least one complete relationship.\" ),\n+    E1312( \"Referral events need to have both sides of a relationship.\" ),\n \n     /* Relationship */\n     E4000( \"Relationship: `{0}` cannot link to itself\" ),\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "message": "Merge commit", "committedDate": null}, {"oid": "399526882c2fbbf5600922b3c3b6030420cf4e96", "committedDate": "2020-07-13 12:23:07 +0200", "message": "feat: Run rule engine rules in new importer [DHIS2-7310]"}, {"oid": "3e3dc98d92f0c13fb56cf17894eab06a78842133", "committedDate": "2020-08-04 17:20:37 +0200", "message": "feat: Enrollment/Events note persistence"}, {"oid": "8374cb43e422eddc1f4c01bb715d8d285acc37be", "committedDate": "2020-08-10 11:38:43 +0200", "message": "Merge remote-tracking branch 'origin/master' into DHIS2-7310-merge"}, {"oid": "317b6761c7ea7baf8927120c1827947b2ee37b4b", "committedDate": "2020-08-13 12:13:14 +0200", "message": "Relationships validation"}, {"oid": "1ceec15f31457e6ac040081480a9c909a9790c3c", "committedDate": "2020-08-13 15:26:03 +0200", "message": "Fix conflicts with new validation strategy"}, {"oid": "834ed16430ad7a69345b9d012ce6f2594d86313d", "committedDate": "2020-08-14 09:23:33 +0200", "message": "Merge remote-tracking branch 'origin/master' into DHIS2-8323"}, {"oid": "6e1e12a2fe3c14f79781d64ec3f890f680cf49a4", "committedDate": "2020-08-24 15:50:03 +0200", "message": "feat: Added support for data values in event import [DHIS2-9270]"}, {"oid": "82a863c258aa34e592b309bb9d6081c4dc8f981b", "committedDate": "2020-08-27 14:46:58 +0200", "message": "feat: Add support for deletion of tracker objects [DHIS2-9085] (#5959)"}, {"oid": "0d35843121f0ad3004fad015f1520c5b06a5c337", "committedDate": "2020-09-15 09:24:33 +0200", "message": "Merge 2.35 into master (#6149)"}, {"oid": "e1260b5e8fceb13c2883754236a34cdd652e1c1c", "committedDate": "2020-10-20 14:00:34 +0200", "message": "refactor: Load in the preheat all the data needed for uniqueness attr\u2026 (#6397)"}, {"oid": "ae4d365663ffddc9a34d1cdc0f629fd7b6386e90", "committedDate": "2020-11-03 10:25:55 +0100", "message": "feat: improve note validation during tracker import [TECH-457]"}, {"oid": "5b23e0aa1ec7db8362a778bb210bd873b8c0a269", "committedDate": "2020-11-09 13:49:43 +0100", "message": "feat: [DHIS2-9840] Implement validator for event data values (#6565)"}, {"oid": "6e28dbfdaea7ceacbe560fe82ddba1e94c6cd203", "committedDate": "2020-11-11 17:41:55 +0100", "message": "fix: Exception when importing TEI with relationship [DHIS2-9856] (#6552)"}, {"oid": "00ff3810ec28d01799ec224ecdb21f08784faafb", "committedDate": "2020-11-12 15:46:55 +0100", "message": "fix: remove validation for event date fields (#6644)"}, {"oid": "77ddd2e97bab29df8fa6b5656ddfeeba06cdf4d5", "committedDate": "2020-11-16 15:21:16 +0100", "message": "fix: invalid detection of duplicated relationships during Tracker import (#6683)"}, {"oid": "290df2170f22c2117a25447062617d6617a5d786", "committedDate": "2020-11-17 09:41:43 +0100", "message": "fix: add reference validation for relationships (#6688)"}, {"oid": "75f1f8f36af280c508c43373c95dd1dcdeff9d99", "committedDate": "2020-11-17 14:39:38 +0100", "message": "fix: [DHIS2-9961] Add reference linked objects validation for relationships (#6697)"}, {"oid": "a66a0469bbf6c089dd54dd1085774f60b6140418", "committedDate": "2020-11-23 09:17:47 +0100", "message": "fix: DHIS2-9943 changed description to errors E1023 and E1025 (#6735)"}, {"oid": "e063801f23d5aa761a791364c8c82e2d784f8c84", "committedDate": "2020-11-23 09:23:20 +0100", "message": "fix: DHIS2-9894 user assignment is checked through ProgramStage definition (#6720)"}, {"oid": "7cb15ae72036a24649916912b4c8998c0526240f", "committedDate": "2020-11-24 09:51:26 +0100", "message": "fix: Fix validations when no entities aare linked in a relationship [DHIS2-9995] (#6740)"}, {"oid": "8d19700c67e3da9746531d1dee8bb0b8450c739e", "committedDate": "2020-11-24 11:15:55 +0100", "message": "fix: add validation for tei type on relationship constraint (#6736)"}, {"oid": "71b9cc9066ade25caca07d78d8e5f6e946c7133f", "committedDate": "2020-11-24 12:12:26 +0100", "message": "feat: fail validation on missing enrollment in event (#6749)"}, {"oid": "a9aa89a8d5134104503d1cbb43f96b06f3531569", "committedDate": "2020-12-02 11:10:05 +0100", "message": "fix: Manage event scheduleAt date [DHIS2-10009] (#6804)"}, {"oid": "b765b27ac675347397a7873ffd2a1243dc20a244", "committedDate": "2020-12-02 16:26:36 +0100", "message": "fix: Tracker Import validation message simplification (#6815)"}, {"oid": "d3aa60aac248b75b5728d245a876b0a0905748fb", "committedDate": "2020-12-02 16:34:37 +0100", "message": "fix: logic added to tracker importer to validate TEIs mandatory attributes (#6768) DHIS2-10001"}, {"oid": "c9397132d35e1394cef55720639f8649005a96ad", "committedDate": "2020-12-03 17:07:36 +0100", "message": "fix: prevent changes to a deleted event (#6820)"}, {"oid": "46a4fb9730a952d5cbc36bce0718757e6edd2809", "committedDate": "2020-12-15 15:50:22 +0100", "message": "fix: DHIS2-10084 prevent changes to deleted tracked entities (#6882)"}, {"oid": "b45bc96224d9ab6c13fe83f5363d58c943c6e695", "committedDate": "2020-12-18 10:02:52 +0100", "message": "fix: DHIS2-10077 changed mandatory program attribute error message (#6938)"}, {"oid": "6e020e7c286db62dbc57c1b58a94f5841dc09551", "committedDate": "2020-12-21 10:08:58 +0100", "message": "Dhis2 10084 enrollments soft deleted (#6937)"}, {"oid": "679b32e817e4751c5ad4f0301a943104bf8f1d79", "committedDate": "2021-01-04 11:56:17 +0100", "message": "feat: Program rule assign action implentation (#7004)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "055574bea49c3a40c5cfff3cb86694fc4bd12c45", "committedDate": "2021-01-12 15:26:26 +0100", "message": "perf: replace expensive \"Program has OrgUnit\" call with faster SQL (#6930)"}, {"oid": "4f487b5b670d3c3e7a4db61237a9978ca2a772ed", "committedDate": "2021-01-19 11:20:33 +0100", "message": "fix: [DHIS2-10293] Fix program rules linked to tracked entity attributes (#7112)"}, {"oid": "6e8f0d6c150b303d780b397f7646ff3383f16250", "committedDate": "2021-01-21 09:32:50 +0100", "message": "feat: new tracked dto's properties referring to a date, now use Instant instead of String [DHIS2-101239] (#7119)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "40fda8e0c1025bfdc425c0f0da547443831c4c41", "committedDate": "2021-02-10 12:01:12 +0100", "message": "fix: [DHIS2-10430] New validation hook to check mandatory fields (#7305)"}, {"oid": "aab452ae46bf17ed974650a1cbc99b4e97e92bba", "committedDate": "2021-02-16 17:39:41 +0100", "message": "fix: Improve error messages from rule engine [DHIS2-10495] (#7361)"}, {"oid": "c25b817a180f24b3de6b26d5a089563aa336aa8c", "committedDate": "2021-03-05 10:44:25 +0100", "message": "feat: Validation for values with option sets [DHIS2-10452] (#7512)"}, {"oid": "33f99931474be434371691a439a56becb9f23025", "committedDate": "2021-04-07 10:36:15 +0200", "message": "refactor: Clean up metadata and relations validation hooks [TECH-579] (#7807)"}, {"oid": "c71a97bf6c13f342a7c972c7061dab2b61d9d587", "committedDate": "2021-04-08 08:14:46 +0200", "message": "refactor: Clean up redundant integration tests for validation hooks [TECH-579] (#7811)"}, {"oid": "5a236b7964bc1e38c927c9a390e6672756e997ce", "committedDate": "2021-04-19 14:49:15 +0200", "message": "feature: Review fields in domain objects and create updatable fields validator [DHIS2-10875] (#7842)"}, {"oid": "db043f2d252ab92e85756413bce7515a315e3caa", "committedDate": "2021-04-20 10:33:49 +0200", "message": "feat: Remove tracked entity field from event [DHIS2-10875] (#7878)"}, {"oid": "60fe241badad5b1463bc3991eff2927abae32644", "committedDate": "2021-04-21 13:49:15 +0200", "message": "fix: [DHIS2-10797] Fix remove null values for tracker attributes and data values 2.37 (#7880)"}, {"oid": "1e75d833b15ed65163451abb7d4dfb99831484de", "committedDate": "2021-04-26 09:14:51 +0200", "message": "[TECH-454] DB access in TrackedEntityAttributeValidationHook 2.37 (#7905)"}, {"oid": "9fb0cb71477e0a9c1c126e3dfaf075c27d9d4452", "committedDate": "2021-05-20 20:36:23 +0200", "message": "fix: typo in error description (#7948) [DHIS2-10797]"}, {"oid": "7d032be663a1d9444d4bc1dbf3bc20ff0f861ec1", "committedDate": "2021-05-26 16:49:59 +0200", "message": "refactor: Clean up integration tests in the new importer [TECH-589] (#8076)"}, {"oid": "fe04922e144ac69367a99840d5518edda2d67f38", "committedDate": "2021-06-03 08:17:10 +0200", "message": "fix: Make program field read-only in event payload [DHIS2-11225] (#8086)"}, {"oid": "83030519745a21c0fa955974f69f4f46498267cd", "committedDate": "2021-06-09 09:44:41 +0200", "message": "fix: Make program mandatory for program events and program stage for tracker events [DHIS2-11225] (#8120)"}, {"oid": "ab908149c6085d63709e91e20c864d6b9cda4849", "committedDate": "2021-06-13 00:01:57 +0200", "message": "refactor: Move VisualizationService to core [DHIS2-11281] (#8198)"}, {"oid": "e72a194b035dc4f76df0c9cdaf7701a299b1558a", "committedDate": "2021-10-05 13:25:05 +0200", "message": "fix: Allow TEI updates in search scope [DHIS2-11910] (2.38) (#8921)"}, {"oid": "d3b0477644437a33507157a3b97b0040d8a44496", "committedDate": "2021-10-06 13:42:51 +0200", "message": "fix: Fix active and enrollOnce logic in enrollment validation [DHIS2-11659] (#8958)"}, {"oid": "9062a6b97820374ba0cff1a63bf4a776c69d41c8", "committedDate": "2021-10-13 09:19:34 +0200", "message": "fix: Remove duplicate error messages for enrollment attributes [DHIS2-11949] (#9040)"}, {"oid": "5f0613c57316bb855e4b9ee931932f23edf54142", "committedDate": "2021-11-16 10:54:05 -0500", "message": "feat: Program.openDaysAfterCoEndDate DHIS2-11234 (#9219)"}, {"oid": "c3f7872c4d2a98cb4040b9d4fc096e9c83f97617", "committedDate": "2021-12-01 09:32:22 +0100", "message": "fix: validate program stage reference to program DHIS2-12123 (#9359)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "5ff1a79c886b646c6e0289c6d14621c4d888b07c", "committedDate": "2022-02-15 14:45:30 +0100", "message": "fix: attributeOptionCombo is not required in NTI DHIS2-12460 (#9747)"}, {"oid": "d117ff9ce355694569f7c6477141cf35c6412609", "committedDate": "2022-03-04 11:13:40 +0100", "message": "fix: Return complete information for user fields in NTI [DHIS2-12717] (#9936)"}, {"oid": "ef0cbd365e47f1f88befb80d9650cce75280bd35", "committedDate": "2022-03-08 15:12:00 +0100", "message": "chore: move DB access and mutation to preheat and preprocessor DHIS2-12623 (#9904)"}, {"oid": "9b2608b1ac695b4a62bca379a1807eae40520918", "committedDate": "2022-04-26 13:27:56 +0200", "message": "fix: Fix error when deleting relationships [DHIS2-13146] (#10595)"}, {"oid": "d76299848da281461da799f3fb3ca8ac3c63795a", "committedDate": "2022-05-09 13:06:14 +0000", "message": "feat: Make relationship soft deletable [DHIS2-11320] (#10708)"}, {"oid": "e1740a5804e29683f4310e9fd284b637c8acb6b1", "committedDate": "2022-06-02 14:24:41 +0000", "message": "test: add context to failed TrackedEntityProgramAttributeEncryptionTest (#10971)"}, {"oid": "efc4611bf24992a81f5db136bfbb2940d16f95f4", "committedDate": "2022-08-02 12:18:47 +0200", "message": "feat: Add referral parameter to program stage [DHIS2-13301] (#10986)"}, {"oid": "2f607f53c7c920bab48832e9effb2de8696652a3", "committedDate": "2022-12-12 14:56:12 +0000", "message": "fix: invalidation of tracker tree DHIS2-14213 (#12495)"}, {"oid": "eeb7c03533bc68813461a4d2ac3cc265c417d79e", "committedDate": "2022-12-15 15:08:15 +0000", "message": "chore: Make validation package completely independent from report package [DHIS2-14298] (#12571)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkwMDY3Ng==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446900676", "body": "Is there a reason we are overriding with an empty method?", "bodyText": "Is there a reason we are overriding with an empty method?", "bodyHTML": "<p dir=\"auto\">Is there a reason we are overriding with an empty method?</p>", "author": "stian-sandvold", "createdAt": "2020-06-29T11:33:26Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityGeoValidationHook.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package org.hisp.dhis.tracker.validation.hooks;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.hisp.dhis.tracker.TrackerImportStrategy;\n+import org.hisp.dhis.tracker.domain.TrackedEntity;\n+import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+@Component\n+public class TrackedEntityGeoValidationHook\n+    extends AbstractTrackerDtoValidationHook\n+{\n+    public TrackedEntityGeoValidationHook()\n+    {\n+        super( TrackedEntity.class, TrackerImportStrategy.CREATE_AND_UPDATE );\n+    }\n+\n+    @Override\n+    public void validateTrackedEntity( ValidationErrorReporter reporter, TrackedEntity trackedEntity )\n+    {\n+", "originalCommit": "12bd589850367af9ce124e78ea519bd7842cb3c5", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3999d1c8e8d7c2bcd11c7c5d99fec179abd25e2b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityGeoValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityGeoValidationHook.java\ndeleted file mode 100644\nindex 0deac6cd05..0000000000\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityGeoValidationHook.java\n+++ /dev/null\n", "chunk": "@@ -1,53 +0,0 @@\n-package org.hisp.dhis.tracker.validation.hooks;\n-\n-/*\n- * Copyright (c) 2004-2020, University of Oslo\n- * All rights reserved.\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions are met:\n- * Redistributions of source code must retain the above copyright notice, this\n- * list of conditions and the following disclaimer.\n- *\n- * Redistributions in binary form must reproduce the above copyright notice,\n- * this list of conditions and the following disclaimer in the documentation\n- * and/or other materials provided with the distribution.\n- * Neither the name of the HISP project nor the names of its contributors may\n- * be used to endorse or promote products derived from this software without\n- * specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n- * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n- * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n- * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n- * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n- * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n- * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- */\n-\n-import org.hisp.dhis.tracker.TrackerImportStrategy;\n-import org.hisp.dhis.tracker.domain.TrackedEntity;\n-import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n-import org.springframework.stereotype.Component;\n-\n-/**\n- * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n- */\n-@Component\n-public class TrackedEntityGeoValidationHook\n-    extends AbstractTrackerDtoValidationHook\n-{\n-    public TrackedEntityGeoValidationHook()\n-    {\n-        super( TrackedEntity.class, TrackerImportStrategy.CREATE_AND_UPDATE );\n-    }\n-\n-    @Override\n-    public void validateTrackedEntity( ValidationErrorReporter reporter, TrackedEntity trackedEntity )\n-    {\n-\n-    }\n-}\n", "next_change": null}]}, "revised_code_in_main": {"commit": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityGeoValidationHook.java b/dhis-2/dhis-support/dhis-support-expression-parser/src/main/java/org/hisp/dhis/parser/expression/function/PeriodOffset.java\nsimilarity index 71%\nrename from dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityGeoValidationHook.java\nrename to dhis-2/dhis-support/dhis-support-expression-parser/src/main/java/org/hisp/dhis/parser/expression/function/PeriodOffset.java\nindex 0deac6cd05..dfa6b4aa3c 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/TrackedEntityGeoValidationHook.java\n+++ b/dhis-2/dhis-support/dhis-support-expression-parser/src/main/java/org/hisp/dhis/parser/expression/function/PeriodOffset.java\n", "chunk": "@@ -28,26 +28,23 @@ package org.hisp.dhis.tracker.validation.hooks;\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n-import org.hisp.dhis.tracker.TrackerImportStrategy;\n-import org.hisp.dhis.tracker.domain.TrackedEntity;\n-import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n-import org.springframework.stereotype.Component;\n+import static org.hisp.dhis.parser.expression.antlr.ExpressionParser.ExprContext;\n+\n+import org.hisp.dhis.parser.expression.CommonExpressionVisitor;\n \n /**\n- * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ * Function least\n+ *\n+ * @author Enrico Colasante\n  */\n-@Component\n-public class TrackedEntityGeoValidationHook\n-    extends AbstractTrackerDtoValidationHook\n+public class PeriodOffset\n+    extends FunctionGreatestOrLeast\n {\n-    public TrackedEntityGeoValidationHook()\n-    {\n-        super( TrackedEntity.class, TrackerImportStrategy.CREATE_AND_UPDATE );\n-    }\n-\n     @Override\n-    public void validateTrackedEntity( ValidationErrorReporter reporter, TrackedEntity trackedEntity )\n+    public Object evaluate( ExprContext ctx, CommonExpressionVisitor visitor )\n     {\n+        int offset = ctx.period != null ? Integer.valueOf( ctx.period.getText() ) : 0;\n \n+        return visitor.visitWithOffset( ctx.expr( 0 ), offset );\n     }\n }\n", "next_change": null}]}, "commits_in_main": [{"oid": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "message": "Merge commit", "committedDate": null}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkwMDk1Mw==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446900953", "body": "UID should be the same as trackedEntity", "bodyText": "UID should be the same as trackedEntity", "bodyHTML": "<p dir=\"auto\">UID should be the same as trackedEntity</p>", "author": "stian-sandvold", "createdAt": "2020-06-29T11:34:01Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/domain/TrackedEntity.java", "diffHunk": "@@ -45,8 +45,10 @@\n @Builder\n @NoArgsConstructor\n @AllArgsConstructor\n-public class TrackedEntity\n+public class TrackedEntity implements TrackerDto\n {\n+    private String uid;", "originalCommit": "12bd589850367af9ce124e78ea519bd7842cb3c5", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk5MjgxMA==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r446992810", "bodyText": "This uid is used as a temp holder for the new uid when separating between create/update", "author": "netroms", "createdAt": "2020-06-29T13:58:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkwMDk1Mw=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "c0e9b28f4609a84d1287d93bc65f81321e00d78b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/domain/TrackedEntity.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/domain/TrackedEntity.java\nindex c2022fd19c..bbe40cdbe1 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/domain/TrackedEntity.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/domain/TrackedEntity.java\n", "chunk": "@@ -47,8 +49,6 @@ import java.util.List;\n @AllArgsConstructor\n public class TrackedEntity implements TrackerDto\n {\n-    private String uid;\n-\n     @JsonProperty\n     private String trackedEntity;\n \n", "next_change": {"commit": "5a236b7964bc1e38c927c9a390e6672756e997ce", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/domain/TrackedEntity.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/domain/TrackedEntity.java\nindex bbe40cdbe1..c6c1b19daf 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/domain/TrackedEntity.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/domain/TrackedEntity.java\n", "chunk": "@@ -47,7 +44,8 @@ import com.fasterxml.jackson.annotation.JsonProperty;\n @Builder\n @NoArgsConstructor\n @AllArgsConstructor\n-public class TrackedEntity implements TrackerDto\n+public class TrackedEntity\n+    implements TrackerDto\n {\n     @JsonProperty\n     private String trackedEntity;\n", "next_change": {"commit": "52fefdd8b43d479f29d4337b32b57f767d7996de", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/domain/TrackedEntity.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/domain/TrackedEntity.java\nindex c6c1b19daf..03cb03f32f 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/domain/TrackedEntity.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/domain/TrackedEntity.java\n", "chunk": "@@ -51,7 +55,7 @@ public class TrackedEntity\n     private String trackedEntity;\n \n     @JsonProperty\n-    private String trackedEntityType;\n+    private MetadataIdentifier trackedEntityType;\n \n     @JsonProperty\n     private Instant createdAt;\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "message": "Merge commit", "committedDate": null}, {"oid": "5e4669b4c89c809989ea600900735dd71baa86e2", "committedDate": "2020-12-23 14:00:18 +0700", "message": "feat: Upgrade Hibernate  (#6939)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "cca7e4af92719e65511afbba0ac0f69b808b7f07", "committedDate": "2021-01-14 13:42:18 +0100", "message": "Dhis2 10186 10093 missing properties (#7067)"}, {"oid": "6e8f0d6c150b303d780b397f7646ff3383f16250", "committedDate": "2021-01-21 09:32:50 +0100", "message": "feat: new tracked dto's properties referring to a date, now use Instant instead of String [DHIS2-101239] (#7119)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "c0e9b28f4609a84d1287d93bc65f81321e00d78b", "committedDate": "2021-03-30 13:22:16 +0200", "message": "refactor: Removing uid field from tracker entities [TECH-579] (#7790)"}, {"oid": "5a236b7964bc1e38c927c9a390e6672756e997ce", "committedDate": "2021-04-19 14:49:15 +0200", "message": "feature: Review fields in domain objects and create updatable fields validator [DHIS2-10875] (#7842)"}, {"oid": "c1826a5d13bd4a80a9ff1ed14646dbb8f32b4cfb", "committedDate": "2021-04-28 09:05:12 +0200", "message": "feat: Add createdBy and updatedBy to tracker objects in new tracker importer [hDHIS2-10885] (#7923)"}, {"oid": "7d032be663a1d9444d4bc1dbf3bc20ff0f861ec1", "committedDate": "2021-05-26 16:49:59 +0200", "message": "refactor: Clean up integration tests in the new importer [TECH-589] (#8076)"}, {"oid": "822d07bb467e9b52c9c876beda78da98a4bbf89f", "committedDate": "2021-08-17 17:26:09 +0200", "message": "fix: expose new flag in old tracker endpoints and remove custom endpoint (#8462)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "d117ff9ce355694569f7c6477141cf35c6412609", "committedDate": "2022-03-04 11:13:40 +0100", "message": "fix: Return complete information for user fields in NTI [DHIS2-12717] (#9936)"}, {"oid": "2e87b829d0cb99cb439eddb6ac1b6dcdf2a00710", "committedDate": "2022-05-02 09:38:20 +0200", "message": "chore: ProgramOwner is only exposed on export (#10589)"}, {"oid": "66b1250699e5198a4cffb092df7c652f569b2b5a", "committedDate": "2022-05-02 12:28:01 +0200", "message": "chore: TrackedEntity.orgUnit is a MetadataIdentifier (#10608)"}, {"oid": "52fefdd8b43d479f29d4337b32b57f767d7996de", "committedDate": "2022-05-09 14:16:08 +0200", "message": "chore: TrackedEntity.trackedEntityType is a MetadataIdentifier DHIS2-12563 (#10744)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAwNTk1OQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r447005959", "body": "A brief java doc would be helpful here.", "bodyText": "A brief java doc would be helpful here.", "bodyHTML": "<p dir=\"auto\">A brief java doc would be helpful here.</p>", "author": "zubaira", "createdAt": "2020-06-29T14:17:04Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/TrackerValidationHookTimerReport.java", "diffHunk": "@@ -26,24 +26,24 @@\n  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\n  */\n \n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import lombok.Builder;\n+import lombok.Data;\n+\n /**\n- * @author Morten Olav Hansen <mortenoh@gmail.com>\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n  */\n-public enum TrackerErrorCode\n+@Data\n+@Builder\n+public class TrackerValidationHookTimerReport", "originalCommit": "676b8ac99ef7302321ae87ed2f2f5ab6fef01c1e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "9794e609238425fa205be611d59b1202dfb4ce17", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/TrackerValidationHookTimerReport.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/TrackerValidationHookTimerReport.java\nindex f8c4bd8535..1e130e327d 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/TrackerValidationHookTimerReport.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/TrackerValidationHookTimerReport.java\n", "chunk": "@@ -34,6 +34,8 @@ import lombok.Builder;\n import lombok.Data;\n \n /**\n+ * This class is used for timing (performance) reports of the individual validation hook.\n+ *\n  * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n  */\n @Data\n", "next_change": null}]}, "revised_code_in_main": {"commit": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/TrackerValidationHookTimerReport.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/TrackerValidationHookTimerReport.java\nindex f8c4bd8535..1e130e327d 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/TrackerValidationHookTimerReport.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/TrackerValidationHookTimerReport.java\n", "chunk": "@@ -34,6 +34,8 @@ import lombok.Builder;\n import lombok.Data;\n \n /**\n+ * This class is used for timing (performance) reports of the individual validation hook.\n+ *\n  * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n  */\n @Data\n", "next_change": {"commit": "ea76fa86409613c9766d4508d65c88ac55c413c3", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/TrackerValidationHookTimerReport.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/TrackerValidationHookTimerReport.java\nindex 1e130e327d..68ffff2bec 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/TrackerValidationHookTimerReport.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/TrackerValidationHookTimerReport.java\n", "chunk": "@@ -26,15 +24,17 @@ package org.hisp.dhis.tracker.report;\n  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\n  */\n+package org.hisp.dhis.tracker.report;\n \n-import com.fasterxml.jackson.annotation.JsonProperty;\n import lombok.Builder;\n import lombok.Data;\n \n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n /**\n- * This class is used for timing (performance) reports of the individual validation hook.\n+ * This class is used for timing (performance) reports of the individual\n+ * validation hook.\n  *\n  * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n  */\n", "next_change": {"commit": "7c0131dfcfbf72dad27dc5f0a3f6a776e286c79a", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/TrackerValidationHookTimerReport.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/Timing.java\nsimilarity index 84%\nrename from dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/TrackerValidationHookTimerReport.java\nrename to dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/Timing.java\nindex 68ffff2bec..a5c1c18630 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/TrackerValidationHookTimerReport.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/report/Timing.java\n", "chunk": "@@ -38,13 +40,16 @@ import com.fasterxml.jackson.annotation.JsonProperty;\n  *\n  * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n  */\n-@Data\n-@Builder\n-public class TrackerValidationHookTimerReport\n+@RequiredArgsConstructor\n+@ToString\n+@EqualsAndHashCode\n+public class Timing\n {\n+    @NonNull\n     @JsonProperty\n-    public String totalTime;\n+    public final String totalTime;\n \n+    @NonNull\n     @JsonProperty\n-    public String name;\n+    public final String name;\n }\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "message": "Merge commit", "committedDate": null}, {"oid": "cb2ee65c0210c0d4b2bd8851789da8d4adfaf04d", "committedDate": "2020-09-07 10:28:21 +0200", "message": "fix: [DHIS2-9287] Fix the stats in the import summary (#6062)"}, {"oid": "20e4096f0ff5f18a8e7fddd62dcdb2bcb46a96ba", "committedDate": "2020-11-03 10:51:12 +0100", "message": "refactor: address code duplication in Tracker Error reporter (#6454)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "7c0131dfcfbf72dad27dc5f0a3f6a776e286c79a", "committedDate": "2022-01-11 17:47:56 +0100", "message": "chore: make TrackerValidationReport add methods fluent and name Timing TECH-880 (#9601)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAwOTE1NQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r447009155", "body": "This method shows duplication of code with `TrackedEntityImportValidatioTest.java`.", "bodyText": "This method shows duplication of code with TrackedEntityImportValidatioTest.java.", "bodyHTML": "<p dir=\"auto\">This method shows duplication of code with <code>TrackedEntityImportValidatioTest.java</code>.</p>", "author": "zubaira", "createdAt": "2020-06-29T14:21:27Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentImportValidationTest.java", "diffHunk": "@@ -0,0 +1,680 @@\n+package org.hisp.dhis.tracker.validation;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.hisp.dhis.common.IdentifiableObject;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundle;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundleMode;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundleParams;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundleService;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundleValidationService;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.feedback.ObjectBundleCommitReport;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.feedback.ObjectBundleValidationReport;\n+import org.hisp.dhis.feedback.ErrorReport;\n+import org.hisp.dhis.importexport.ImportStrategy;\n+import org.hisp.dhis.render.RenderFormat;\n+import org.hisp.dhis.render.RenderService;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstanceService;\n+import org.hisp.dhis.tracker.TrackerImportStrategy;\n+import org.hisp.dhis.tracker.bundle.TrackerBundle;\n+import org.hisp.dhis.tracker.bundle.TrackerBundleParams;\n+import org.hisp.dhis.tracker.bundle.TrackerBundleService;\n+import org.hisp.dhis.tracker.report.TrackerBundleReport;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.TrackerStatus;\n+import org.hisp.dhis.tracker.report.TrackerValidationReport;\n+import org.hisp.dhis.user.User;\n+import org.hisp.dhis.user.UserService;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.io.ClassPathResource;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasItem;\n+import static org.hamcrest.Matchers.hasProperty;\n+import static org.hamcrest.core.Every.everyItem;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+@Slf4j\n+public class EnrollmentImportValidationTest\n+    extends AbstractImportValidationTest\n+\n+{\n+    @Autowired\n+    protected TrackedEntityInstanceService trackedEntityInstanceService;\n+\n+    @Autowired\n+    private TrackerBundleService trackerBundleService;\n+\n+    @Autowired\n+    private ObjectBundleService objectBundleService;\n+\n+    @Autowired\n+    private ObjectBundleValidationService objectBundleValidationService;\n+\n+    @Autowired\n+    private DefaultTrackerValidationService trackerValidationService;\n+\n+    @Autowired\n+    private RenderService _renderService;\n+\n+    @Autowired\n+    private UserService _userService;\n+\n+    @Override\n+    protected void setUpTest()\n+        throws IOException\n+    {\n+        renderService = _renderService;\n+        userService = _userService;\n+\n+        Map<Class<? extends IdentifiableObject>, List<IdentifiableObject>> metadata = renderService.fromMetadata(\n+            new ClassPathResource( \"tracker/tracker_basic_metadata.json\" ).getInputStream(), RenderFormat.JSON );\n+\n+        ObjectBundleParams params = new ObjectBundleParams();\n+        params.setObjectBundleMode( ObjectBundleMode.COMMIT );\n+        params.setImportStrategy( ImportStrategy.CREATE );\n+        params.setObjects( metadata );\n+\n+        ObjectBundle bundle = objectBundleService.create( params );\n+        ObjectBundleValidationReport validationReport = objectBundleValidationService.validate( bundle );\n+        List<ErrorReport> errorReports = validationReport.getErrorReports();\n+        assertTrue( errorReports.isEmpty() );\n+\n+        ObjectBundleCommitReport commit = objectBundleService.commit( bundle );\n+        List<ErrorReport> objectReport = commit.getErrorReports();\n+        assertTrue( objectReport.isEmpty() );\n+\n+        TrackerBundleParams trackerBundleParams = createBundleFromJson(\n+            \"tracker/validations/enrollments_te_te-data.json\" );\n+\n+        TrackerBundle trackerBundle = trackerBundleService.create( trackerBundleParams ).get( 0 );\n+        assertEquals( 4, trackerBundle.getTrackedEntities().size() );\n+\n+        TrackerValidationReport report = trackerValidationService.validate( trackerBundle );\n+        assertEquals( 0, report.getErrorReports().size() );\n+\n+        TrackerBundleReport bundleReport = trackerBundleService.commit( trackerBundle );\n+        assertEquals( TrackerStatus.OK, bundleReport.getStatus() );\n+    }\n+\n+    @Test\n+    public void testEnrollmentValidationOkAll()", "originalCommit": "676b8ac99ef7302321ae87ed2f2f5ab6fef01c1e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "3e799d196b8f73ad216ea100a07ddd5f7dfc53e0", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentImportValidationTest.java b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentImportValidationTest.java\nindex 33eebd3fec..0440c39767 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentImportValidationTest.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentImportValidationTest.java\n", "chunk": "@@ -138,7 +91,7 @@ public class EnrollmentImportValidationTest\n     public void testEnrollmentValidationOkAll()\n         throws IOException\n     {\n-        TrackerBundleParams params = createBundleFromJson(\n+        TrackerImportParams params = createBundleFromJson(\n             \"tracker/validations/enrollments_te_enrollments-data.json\" );\n \n         ValidateAndCommitTestUnit createAndUpdate = validateAndCommit( params, TrackerImportStrategy.CREATE );\n", "next_change": {"commit": "cec6d680166157cab52adeae7583410083940255", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentImportValidationTest.java b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentImportValidationTest.java\nindex 0440c39767..0a464146f3 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentImportValidationTest.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentImportValidationTest.java\n", "chunk": "@@ -94,124 +90,18 @@ public class EnrollmentImportValidationTest\n         TrackerImportParams params = createBundleFromJson(\n             \"tracker/validations/enrollments_te_enrollments-data.json\" );\n \n-        ValidateAndCommitTestUnit createAndUpdate = validateAndCommit( params, TrackerImportStrategy.CREATE );\n-\n-        TrackerValidationReport report = createAndUpdate.getValidationReport();\n-        printReport( report );\n-        assertEquals( 0, report.getErrorReports().size() );\n-\n-        assertEquals( TrackerStatus.OK, createAndUpdate.getCommitReport().getStatus() );\n-    }\n-\n-    @Test\n-    public void tesValidationInvalidUid()\n-        throws IOException\n-    {\n-        TrackerImportParams params = createBundleFromJson(\n-            \"tracker/validations/enrollments_te_invalid-uid.json\" );\n-\n-        ValidateAndCommitTestUnit createAndUpdate = validateAndCommit( params, TrackerImportStrategy.CREATE );\n-\n-        TrackerValidationReport report = createAndUpdate.getValidationReport();\n-        printReport( report );\n-        assertEquals( 1, report.getErrorReports().size() );\n-\n-        assertThat( report.getErrorReports(),\n-            hasItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1048 ) ) ) );\n-    }\n-\n-    @Test\n-    public void testDatesMissing()\n-        throws IOException\n-    {\n-        TrackerImportParams params = createBundleFromJson(\n-            \"tracker/validations/enrollments_error-dates-missing.json\" );\n-\n-        ValidateAndCommitTestUnit createAndUpdate = validateAndCommit( params, TrackerImportStrategy.CREATE );\n-\n-        TrackerValidationReport report = createAndUpdate.getValidationReport();\n-        printReport( report );\n-        assertEquals( 2, report.getErrorReports().size() );\n-\n-        assertThat( report.getErrorReports(),\n-            hasItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1025 ) ) ) );\n-\n-        assertThat( report.getErrorReports(),\n-            hasItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1023 ) ) ) );\n-    }\n-\n-    @Test\n-    public void testDatesInFuture()\n-        throws IOException\n-    {\n-        TrackerImportParams params = createBundleFromJson(\n-            \"tracker/validations/enrollments_error-dates-future.json\" );\n-\n-        ValidateAndCommitTestUnit createAndUpdate = validateAndCommit( params, TrackerImportStrategy.CREATE );\n-\n-        TrackerValidationReport report = createAndUpdate.getValidationReport();\n-        printReport( report );\n-        assertEquals( 2, report.getErrorReports().size() );\n-\n-        assertThat( report.getErrorReports(),\n-            hasItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1020 ) ) ) );\n-\n-        assertThat( report.getErrorReports(),\n-            hasItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1021 ) ) ) );\n-    }\n-\n-    @Test\n-    public void testDisplayIncidentDateTrueButDateValueNotPresentOrInvalid()\n-        throws IOException\n-    {\n-        TrackerImportParams params = createBundleFromJson(\n-            \"tracker/validations/enrollments_error-displayIncident.json\" );\n-\n-        ValidateAndCommitTestUnit createAndUpdate = validateAndCommit( params, TrackerImportStrategy.CREATE );\n-\n-        TrackerValidationReport report = createAndUpdate.getValidationReport();\n-        printReport( report );\n-        assertEquals( 2, report.getErrorReports().size() );\n+        params.setImportStrategy( TrackerImportStrategy.CREATE );\n+        TrackerImportReport trackerImportReport = trackerImportService.importTracker( params );\n \n-        assertThat( report.getErrorReports(),\n-            everyItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1023 ) ) ) );\n+        assertEquals( 0, trackerImportReport.getValidationReport().getErrorReports().size() );\n+        assertEquals( TrackerStatus.OK, trackerImportReport.getStatus() );\n     }\n \n-    @Test\n-    public void testMissingProgram()\n+    @Test( expected = IOException.class )\n+    public void testDisplayIncidentDateTrueButDateValueIsInvalid()\n         throws IOException\n     {\n-        TrackerImportParams params = createBundleFromJson(\n-            \"tracker/validations/enrollments_error-program-missing.json\" );\n-\n-        User user = userService.getUser( ADMIN_USER_UID );\n-        params.setUserId( user.getUid() );\n-\n-        ValidateAndCommitTestUnit createAndUpdate = validateAndCommit( params, TrackerImportStrategy.CREATE );\n-\n-        TrackerValidationReport report = createAndUpdate.getValidationReport();\n-        printReport( report );\n-        assertEquals( 1, report.getErrorReports().size() );\n-\n-        assertThat( report.getErrorReports(),\n-            hasItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1069 ) ) ) );\n-    }\n-\n-    @Test\n-    public void testMissingOrgUnit()\n-        throws IOException\n-    {\n-        TrackerImportParams params = createBundleFromJson(\n-            \"tracker/validations/enrollments_error-orgunit-missing.json\" );\n-\n-        ValidateAndCommitTestUnit createAndUpdate = validateAndCommit( params, TrackerImportStrategy.CREATE );\n-\n-        TrackerValidationReport report = createAndUpdate.getValidationReport();\n-        printReport( report );\n-        assertEquals( 1, report.getErrorReports().size() );\n-\n-        assertThat( report.getErrorReports(),\n-            hasItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1070 ) ) ) );\n+        createBundleFromJson( \"tracker/validations/enrollments_error-displayIncident.json\" );\n     }\n \n     @Test\n", "next_change": {"commit": "661e0366d360cb3107efdf2e3716f040ced004f9", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentImportValidationTest.java b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentImportValidationTest.java\nindex 0a464146f3..bc16e84c96 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentImportValidationTest.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentImportValidationTest.java\n", "chunk": "@@ -97,64 +95,55 @@ public class EnrollmentImportValidationTest\n         assertEquals( TrackerStatus.OK, trackerImportReport.getStatus() );\n     }\n \n-    @Test( expected = IOException.class )\n-    public void testDisplayIncidentDateTrueButDateValueIsInvalid()\n-        throws IOException\n-    {\n-        createBundleFromJson( \"tracker/validations/enrollments_error-displayIncident.json\" );\n-    }\n-\n     @Test\n-    public void testNoWriteAccessToOrg()\n+    public void testPreheatOwnershipForSubsequentEnrollment()\n         throws IOException\n     {\n         TrackerImportParams params = createBundleFromJson(\n             \"tracker/validations/enrollments_te_enrollments-data.json\" );\n \n-        User user = userService.getUser( USER_2 );\n-        params.setUser( user );\n-\n         params.setImportStrategy( TrackerImportStrategy.CREATE );\n         TrackerImportReport trackerImportReport = trackerImportService.importTracker( params );\n \n-        assertEquals( 4, trackerImportReport.getValidationReport().getErrorReports().size() );\n+        assertEquals( 0, trackerImportReport.getValidationReport().getErrorReports().size() );\n+        assertEquals( TrackerStatus.OK, trackerImportReport.getStatus() );\n \n-        assertThat( trackerImportReport.getValidationReport().getErrorReports(),\n-            hasItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1000 ) ) ) );\n+        TrackerImportParams secondParams = createBundleFromJson(\n+            \"tracker/validations/enrollments_te_enrollments-data.json\" );\n+\n+        TrackerPreheat preheat = trackerPreheatService.preheat( secondParams );\n+\n+        secondParams.getEnrollments().forEach( e -> {\n+            assertEquals( e.getOrgUnit(),\n+                preheat.getProgramOwner().get( e.getTrackedEntity() ).get( e.getProgram() ).getOrganisationUnit()\n+                    .getUid() );\n+        } );\n     }\n \n     @Test\n-    public void testNonRegProgram()\n-        throws IOException\n+    public void testDisplayIncidentDateTrueButDateValueIsInvalid()\n     {\n-        TrackerImportParams params = createBundleFromJson(\n-            \"tracker/validations/enrollments_error-nonreg-program.json\" );\n-\n-        ValidateAndCommitTestUnit createAndUpdate = validateAndCommit( params, TrackerImportStrategy.CREATE );\n-\n-        TrackerValidationReport report = createAndUpdate.getValidationReport();\n-        printReport( report );\n-        assertEquals( 1, report.getErrorReports().size() );\n-\n-        assertThat( report.getErrorReports(),\n-            everyItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1014 ) ) ) );\n+        assertThrows( IOException.class,\n+            () -> createBundleFromJson( \"tracker/validations/enrollments_error-displayIncident.json\" ) );\n     }\n \n     @Test\n-    public void testTrackedEntityTypeMismatch()\n+    public void testNoWriteAccessToOrg()\n         throws IOException\n     {\n         TrackerImportParams params = createBundleFromJson(\n-            \"tracker/validations/enrollments_error-program-tet-mismatch-te.json\" );\n+            \"tracker/validations/enrollments_te_enrollments-data.json\" );\n \n-        ValidateAndCommitTestUnit createAndUpdate = validateAndCommit( params, TrackerImportStrategy.CREATE );\n+        User user = userService.getUser( USER_2 );\n+        params.setUser( user );\n \n-        TrackerValidationReport report = createAndUpdate.getValidationReport();\n-        printReport( report );\n-        assertEquals( 1, report.getErrorReports().size() );\n+        params.setImportStrategy( TrackerImportStrategy.CREATE );\n+        TrackerImportReport trackerImportReport = trackerImportService.importTracker( params );\n+\n+        assertEquals( 4, trackerImportReport.getValidationReport().getErrorReports().size() );\n \n-        assertThat( report.getErrorReports(),\n-            everyItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1022 ) ) ) );\n+        assertThat( trackerImportReport.getValidationReport().getErrorReports(),\n+            hasItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1000 ) ) ) );\n     }\n \n     @Test\n", "next_change": {"commit": "22d5da9d9a812b02eb5acd643112a6b050b5d63c", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentImportValidationTest.java b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentImportValidationTest.java\nindex bc16e84c96..24cd3c9920 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentImportValidationTest.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentImportValidationTest.java\n", "chunk": "@@ -69,150 +72,115 @@ public class EnrollmentImportValidationTest\n     protected void initTest()\n         throws IOException\n     {\n-\n         setUpMetadata( \"tracker/tracker_basic_metadata.json\" );\n-\n         TrackerImportParams trackerBundleParams = createBundleFromJson(\n             \"tracker/validations/enrollments_te_te-data.json\" );\n-\n         TrackerImportReport trackerImportReport = trackerImportService.importTracker( trackerBundleParams );\n         assertEquals( TrackerStatus.OK, trackerImportReport.getStatus() );\n-\n         manager.flush();\n     }\n \n     @Test\n-    public void testEnrollmentValidationOkAll()\n+    void testEnrollmentValidationOkAll()\n         throws IOException\n     {\n-        TrackerImportParams params = createBundleFromJson(\n-            \"tracker/validations/enrollments_te_enrollments-data.json\" );\n-\n+        TrackerImportParams params = createBundleFromJson( \"tracker/validations/enrollments_te_enrollments-data.json\" );\n         params.setImportStrategy( TrackerImportStrategy.CREATE );\n         TrackerImportReport trackerImportReport = trackerImportService.importTracker( params );\n-\n         assertEquals( 0, trackerImportReport.getValidationReport().getErrorReports().size() );\n         assertEquals( TrackerStatus.OK, trackerImportReport.getStatus() );\n     }\n \n     @Test\n-    public void testPreheatOwnershipForSubsequentEnrollment()\n+    void testPreheatOwnershipForSubsequentEnrollment()\n         throws IOException\n     {\n-        TrackerImportParams params = createBundleFromJson(\n-            \"tracker/validations/enrollments_te_enrollments-data.json\" );\n-\n+        TrackerImportParams params = createBundleFromJson( \"tracker/validations/enrollments_te_enrollments-data.json\" );\n         params.setImportStrategy( TrackerImportStrategy.CREATE );\n         TrackerImportReport trackerImportReport = trackerImportService.importTracker( params );\n-\n         assertEquals( 0, trackerImportReport.getValidationReport().getErrorReports().size() );\n         assertEquals( TrackerStatus.OK, trackerImportReport.getStatus() );\n-\n         TrackerImportParams secondParams = createBundleFromJson(\n             \"tracker/validations/enrollments_te_enrollments-data.json\" );\n-\n         TrackerPreheat preheat = trackerPreheatService.preheat( secondParams );\n-\n         secondParams.getEnrollments().forEach( e -> {\n-            assertEquals( e.getOrgUnit(),\n-                preheat.getProgramOwner().get( e.getTrackedEntity() ).get( e.getProgram() ).getOrganisationUnit()\n-                    .getUid() );\n+            assertEquals( e.getOrgUnit(), preheat.getProgramOwner().get( e.getTrackedEntity() ).get( e.getProgram() )\n+                .getOrganisationUnit().getUid() );\n         } );\n     }\n \n     @Test\n-    public void testDisplayIncidentDateTrueButDateValueIsInvalid()\n+    void testDisplayIncidentDateTrueButDateValueIsInvalid()\n     {\n         assertThrows( IOException.class,\n             () -> createBundleFromJson( \"tracker/validations/enrollments_error-displayIncident.json\" ) );\n     }\n \n     @Test\n-    public void testNoWriteAccessToOrg()\n+    void testNoWriteAccessToOrg()\n         throws IOException\n     {\n-        TrackerImportParams params = createBundleFromJson(\n-            \"tracker/validations/enrollments_te_enrollments-data.json\" );\n-\n+        TrackerImportParams params = createBundleFromJson( \"tracker/validations/enrollments_te_enrollments-data.json\" );\n         User user = userService.getUser( USER_2 );\n         params.setUser( user );\n-\n         params.setImportStrategy( TrackerImportStrategy.CREATE );\n         TrackerImportReport trackerImportReport = trackerImportService.importTracker( params );\n-\n         assertEquals( 4, trackerImportReport.getValidationReport().getErrorReports().size() );\n-\n         assertThat( trackerImportReport.getValidationReport().getErrorReports(),\n             hasItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1000 ) ) ) );\n     }\n \n     @Test\n-    public void testOnlyProgramAttributesAllowedOnEnrollments()\n+    void testOnlyProgramAttributesAllowedOnEnrollments()\n         throws IOException\n     {\n         TrackerImportParams params = createBundleFromJson(\n             \"tracker/validations/enrollments_error_non_program_attr.json\" );\n         params.setImportStrategy( TrackerImportStrategy.CREATE );\n-\n         TrackerImportReport trackerImportReport = trackerImportService.importTracker( params );\n-\n         assertEquals( 3, trackerImportReport.getValidationReport().getErrorReports().size() );\n-\n         assertThat( trackerImportReport.getValidationReport().getErrorReports(),\n             everyItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1019 ) ) ) );\n     }\n \n     @Test\n-    public void testAttributesOk()\n+    void testAttributesOk()\n         throws IOException\n     {\n         TrackerImportParams params = createBundleFromJson( \"tracker/validations/enrollments_te_attr-data.json\" );\n         params.setImportStrategy( TrackerImportStrategy.CREATE );\n-\n         TrackerImportReport trackerImportReport = trackerImportService.importTracker( params );\n-\n         assertEquals( 1, trackerImportReport.getBundleReport().getTypeReportMap().get( TrackerType.ENROLLMENT )\n             .getObjectReportMap().values().size() );\n-\n         assertEquals( 0, trackerImportReport.getValidationReport().getErrorReports().size() );\n-\n         assertThat( trackerImportReport.getValidationReport().getErrorReports(),\n             everyItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1019 ) ) ) );\n     }\n \n     @Test\n-    public void testDeleteCascadeProgramInstances()\n+    void testDeleteCascadeProgramInstances()\n         throws IOException\n     {\n-        TrackerImportParams params = renderService\n-            .fromJson( new ClassPathResource( \"tracker/validations/enrollments_te_attr-data.json\" ).getInputStream(),\n-                TrackerImportParams.class );\n+        TrackerImportParams params = renderService.fromJson(\n+            new ClassPathResource( \"tracker/validations/enrollments_te_attr-data.json\" ).getInputStream(),\n+            TrackerImportParams.class );\n         params.setImportStrategy( TrackerImportStrategy.CREATE );\n         TrackerImportReport trackerImportReport = trackerImportService.importTracker( params );\n-\n         assertEquals( 0, trackerImportReport.getValidationReport().getErrorReports().size() );\n         assertEquals( TrackerStatus.OK, trackerImportReport.getStatus() );\n-\n         manager.flush();\n-\n         importProgramStageInstances();\n-\n         manager.flush();\n-\n-        params = renderService\n-            .fromJson( new ClassPathResource( \"tracker/validations/enrollments_te_attr-data.json\" ).getInputStream(),\n-                TrackerImportParams.class );\n-\n+        params = renderService.fromJson(\n+            new ClassPathResource( \"tracker/validations/enrollments_te_attr-data.json\" ).getInputStream(),\n+            TrackerImportParams.class );\n         User user2 = userService.getUser( USER_4 );\n         params.setUser( user2 );\n         params.setImportStrategy( TrackerImportStrategy.DELETE );\n-\n         TrackerImportReport trackerImportDeleteReport = trackerImportService.importTracker( params );\n         assertEquals( 2, trackerImportDeleteReport.getValidationReport().getErrorReports().size() );\n-\n         assertThat( trackerImportDeleteReport.getValidationReport().getErrorReports(),\n             hasItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1103 ) ) ) );\n-\n         assertThat( trackerImportDeleteReport.getValidationReport().getErrorReports(),\n             hasItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1091 ) ) ) );\n     }\n", "next_change": {"commit": "7c0131dfcfbf72dad27dc5f0a3f6a776e286c79a", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentImportValidationTest.java b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentImportValidationTest.java\nindex 24cd3c9920..57a1560d0b 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentImportValidationTest.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentImportValidationTest.java\n", "chunk": "@@ -178,10 +178,10 @@ class EnrollmentImportValidationTest extends AbstractImportValidationTest\n         params.setUser( user2 );\n         params.setImportStrategy( TrackerImportStrategy.DELETE );\n         TrackerImportReport trackerImportDeleteReport = trackerImportService.importTracker( params );\n-        assertEquals( 2, trackerImportDeleteReport.getValidationReport().getErrorReports().size() );\n-        assertThat( trackerImportDeleteReport.getValidationReport().getErrorReports(),\n+        assertEquals( 2, trackerImportDeleteReport.getValidationReport().getErrors().size() );\n+        assertThat( trackerImportDeleteReport.getValidationReport().getErrors(),\n             hasItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1103 ) ) ) );\n-        assertThat( trackerImportDeleteReport.getValidationReport().getErrorReports(),\n+        assertThat( trackerImportDeleteReport.getValidationReport().getErrors(),\n             hasItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1091 ) ) ) );\n     }\n \n", "next_change": {"commit": "ef0cbd365e47f1f88befb80d9650cce75280bd35", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentImportValidationTest.java b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentImportValidationTest.java\nindex 57a1560d0b..c4a517e8d8 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentImportValidationTest.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentImportValidationTest.java\n", "chunk": "@@ -188,7 +188,7 @@ class EnrollmentImportValidationTest extends AbstractImportValidationTest\n     protected void importProgramStageInstances()\n         throws IOException\n     {\n-        TrackerImportParams params = createBundleFromJson( \"tracker/validations/events-data.json\" );\n+        TrackerImportParams params = createBundleFromJson( \"tracker/validations/events-with-registration.json\" );\n         params.setImportStrategy( TrackerImportStrategy.CREATE );\n         TrackerImportReport trackerImportReport = trackerImportService.importTracker( params );\n         assertEquals( 0, trackerImportReport.getValidationReport().getErrors().size() );\n", "next_change": {"commit": "2f44bf54a94fca80ec8bef3a160d403665973bed", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentImportValidationTest.java b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentImportValidationTest.java\nindex c4a517e8d8..33605e9848 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentImportValidationTest.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentImportValidationTest.java\n", "chunk": "@@ -188,7 +188,7 @@ class EnrollmentImportValidationTest extends AbstractImportValidationTest\n     protected void importProgramStageInstances()\n         throws IOException\n     {\n-        TrackerImportParams params = createBundleFromJson( \"tracker/validations/events-with-registration.json\" );\n+        TrackerImportParams params = fromJson( \"tracker/validations/events-with-registration.json\" );\n         params.setImportStrategy( TrackerImportStrategy.CREATE );\n         TrackerImportReport trackerImportReport = trackerImportService.importTracker( params );\n         assertEquals( 0, trackerImportReport.getValidationReport().getErrors().size() );\n", "next_change": {"commit": "6b39184ce68d45d2d75a08c3d6b45fe012395457", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentImportValidationTest.java b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentImportValidationTest.java\nindex 33605e9848..4eb329932f 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentImportValidationTest.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentImportValidationTest.java\n", "chunk": "@@ -191,8 +183,7 @@ class EnrollmentImportValidationTest extends TrackerTest\n         TrackerImportParams params = fromJson( \"tracker/validations/events-with-registration.json\" );\n         params.setImportStrategy( TrackerImportStrategy.CREATE );\n         TrackerImportReport trackerImportReport = trackerImportService.importTracker( params );\n-        assertEquals( 0, trackerImportReport.getValidationReport().getErrors().size() );\n-        assertEquals( TrackerStatus.OK, trackerImportReport.getStatus() );\n+        assertNoImportErrors( trackerImportReport );\n     }\n \n     @Test\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "message": "Merge commit", "committedDate": null}, {"oid": "2ed799f33ca26b918ed60473a3f097714f00492e", "committedDate": "2020-08-04 10:30:01 +0200", "message": "chore: Clean up code (#5877)"}, {"oid": "3e3dc98d92f0c13fb56cf17894eab06a78842133", "committedDate": "2020-08-04 17:20:37 +0200", "message": "feat: Enrollment/Events note persistence"}, {"oid": "cb2ee65c0210c0d4b2bd8851789da8d4adfaf04d", "committedDate": "2020-09-07 10:28:21 +0200", "message": "fix: [DHIS2-9287] Fix the stats in the import summary (#6062)"}, {"oid": "ae4d365663ffddc9a34d1cdc0f629fd7b6386e90", "committedDate": "2020-11-03 10:25:55 +0100", "message": "feat: improve note validation during tracker import [TECH-457]"}, {"oid": "d095f2d4cf9aaac1e9aa973d4da6aa2f96104cc8", "committedDate": "2020-11-11 13:49:13 +0100", "message": "fix: allow validation to reference entities in the payload (#6617)"}, {"oid": "2670177207885cb54b4b51516d55749ab8836588", "committedDate": "2020-11-13 14:02:16 +0100", "message": "fix: correct validation rule for Event's TEI value (#6655)"}, {"oid": "0bf55d776481f6511e5f9ebca5de1f2cf79777c0", "committedDate": "2020-11-19 13:55:46 +0100", "message": "refactor: New Tracker Error reporting refactor (#6706)"}, {"oid": "338a47b053533e7c4021c3be94852d5b29e79a19", "committedDate": "2020-11-23 16:57:54 +0100", "message": "fix: A relationship pointing to an invalid object should not be persisted (#6741)"}, {"oid": "3e799d196b8f73ad216ea100a07ddd5f7dfc53e0", "committedDate": "2020-11-30 16:37:14 +0100", "message": "fix: remove long running transaction during Tracker Import (#6782)"}, {"oid": "3ab88a5f4623a8c749246bedef34fcb926d185cb", "committedDate": "2020-12-08 10:40:14 +0100", "message": "fix: [DHIS2-7310] Move rule engine call and validations after bundle validation (#6843)"}, {"oid": "6e020e7c286db62dbc57c1b58a94f5841dc09551", "committedDate": "2020-12-21 10:08:58 +0100", "message": "Dhis2 10084 enrollments soft deleted (#6937)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "6e8f0d6c150b303d780b397f7646ff3383f16250", "committedDate": "2021-01-21 09:32:50 +0100", "message": "feat: new tracked dto's properties referring to a date, now use Instant instead of String [DHIS2-101239] (#7119)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "e8fc1401f2bc43df10a954a4e387c96125ce64aa", "committedDate": "2021-02-05 13:56:50 +0100", "message": "fix: Ignore incoming notes with existing UID [DHIS2-10302] (#7270)"}, {"oid": "00ba07c1c8555a473f261d56bffffa2b75d3c146", "committedDate": "2021-03-08 12:59:21 +0100", "message": "refactor: Remove unused bundle hook and fix tests [TECH-553] (#7539)"}, {"oid": "c71a97bf6c13f342a7c972c7061dab2b61d9d587", "committedDate": "2021-04-08 08:14:46 +0200", "message": "refactor: Clean up redundant integration tests for validation hooks [TECH-579] (#7811)"}, {"oid": "cec6d680166157cab52adeae7583410083940255", "committedDate": "2021-04-09 10:48:33 +0200", "message": "refactor: Clean up integration tests for validation hooks (#7830)"}, {"oid": "db043f2d252ab92e85756413bce7515a315e3caa", "committedDate": "2021-04-20 10:33:49 +0200", "message": "feat: Remove tracked entity field from event [DHIS2-10875] (#7878)"}, {"oid": "39a200eaa53e6ba6a09ff028cecbd9d2f9b4fb0f", "committedDate": "2021-05-04 08:41:15 +0200", "message": "[TECH-450] - DB access in EnrollmentInExistingValidationHook (#7941)"}, {"oid": "20dfefe359779d7e1c1921ba920465227e72f071", "committedDate": "2021-05-25 12:55:24 +0200", "message": "fix: Remove validations from objects deletion service in new tracker importer [DHIS2-10789] (#8053)"}, {"oid": "7d032be663a1d9444d4bc1dbf3bc20ff0f861ec1", "committedDate": "2021-05-26 16:49:59 +0200", "message": "refactor: Clean up integration tests in the new importer [TECH-589] (#8076)"}, {"oid": "7b96fb3ee32dc67e5686ce315d2a041825a74630", "committedDate": "2021-06-21 10:46:39 +0200", "message": "refactor: Refactor some validators and improved test coverage [TECH-589] (#8234)"}, {"oid": "314988e32cd6b86d7010c4a46e17fd3c3d1b9cc3", "committedDate": "2021-08-31 22:03:14 +0200", "message": "fix: ownership validation and preheating in new tracker importer [DHIS2-11223] (#8158)"}, {"oid": "d3b0477644437a33507157a3b97b0040d8a44496", "committedDate": "2021-10-06 13:42:51 +0200", "message": "fix: Fix active and enrollOnce logic in enrollment validation [DHIS2-11659] (#8958)"}, {"oid": "661e0366d360cb3107efdf2e3716f040ced004f9", "committedDate": "2021-12-14 13:50:06 +0100", "message": "chore: migrate to JUnit assertThrows (#9461)"}, {"oid": "22d5da9d9a812b02eb5acd643112a6b050b5d63c", "committedDate": "2021-12-16 13:19:38 +0100", "message": "chore: migrate tests to JUnit 5 (#9467)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "7c0131dfcfbf72dad27dc5f0a3f6a776e286c79a", "committedDate": "2022-01-11 17:47:56 +0100", "message": "chore: make TrackerValidationReport add methods fluent and name Timing TECH-880 (#9601)"}, {"oid": "cb4688e590e026e3321bdbfb93c65c699563ce20", "committedDate": "2022-02-16 13:59:40 +0100", "message": "fix: Missing errorReports when using DELETE strategy and validation fails [ DHIS2-11300 ] (#9792)"}, {"oid": "ef0cbd365e47f1f88befb80d9650cce75280bd35", "committedDate": "2022-03-08 15:12:00 +0100", "message": "chore: move DB access and mutation to preheat and preprocessor DHIS2-12623 (#9904)"}, {"oid": "5f63b52ac0a4f426145ae43affa58295f804812a", "committedDate": "2022-04-14 13:41:33 +0200", "message": "chore: split domain and view models DHIS2-12563 (#10379)"}, {"oid": "24fcc26c114646261ceec22e2ab6c15ce62244f5", "committedDate": "2022-04-29 09:36:38 +0200", "message": "fix: Enrollment.orgUnit is a MetadataIdentifier (#10587)"}, {"oid": "d99da048b6427aa16b080ab0a0e25eda4a2a0f96", "committedDate": "2022-05-09 13:53:18 +0200", "message": "feat: Refactor getCurrentUser() to return DHIS2 User object 2 (#10600)"}, {"oid": "2f44bf54a94fca80ec8bef3a160d403665973bed", "committedDate": "2022-05-23 06:02:37 +0200", "message": "chore: Clean up user management in tracker tests [TECH-890] (#10862)"}, {"oid": "5a68c39389bb9088aa2ce47790abc7014a093f64", "committedDate": "2022-05-27 09:59:23 +0200", "message": "performance: Try to speed up tracker tests [TECH-890] (#10869)"}, {"oid": "6b39184ce68d45d2d75a08c3d6b45fe012395457", "committedDate": "2022-06-03 08:16:09 +0200", "message": "test: use assertNoImportErrors for better context (#10989)"}, {"oid": "6e83eba877030575456f919de1bce55fcae8e517", "committedDate": "2022-06-24 10:01:46 +0200", "message": "test: move all integration tests into own module TECH-1209 (#11148)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAxMzEwOA==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r447013108", "body": "code duplication", "bodyText": "code duplication", "bodyHTML": "<p dir=\"auto\">code duplication</p>", "author": "zubaira", "createdAt": "2020-06-29T14:26:49Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentAttrValidationTests.java", "diffHunk": "@@ -0,0 +1,259 @@\n+package org.hisp.dhis.tracker.validation;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\n+ */\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.hisp.dhis.common.IdentifiableObject;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundle;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundleMode;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundleParams;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundleService;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundleValidationService;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.feedback.ObjectBundleCommitReport;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.feedback.ObjectBundleValidationReport;\n+import org.hisp.dhis.feedback.ErrorReport;\n+import org.hisp.dhis.importexport.ImportStrategy;\n+import org.hisp.dhis.render.RenderFormat;\n+import org.hisp.dhis.render.RenderService;\n+import org.hisp.dhis.trackedentity.TrackedEntityAttributeService;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstanceService;\n+import org.hisp.dhis.tracker.TrackerImportStrategy;\n+import org.hisp.dhis.tracker.bundle.TrackerBundle;\n+import org.hisp.dhis.tracker.bundle.TrackerBundleParams;\n+import org.hisp.dhis.tracker.bundle.TrackerBundleService;\n+import org.hisp.dhis.tracker.report.TrackerBundleReport;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.TrackerStatus;\n+import org.hisp.dhis.tracker.report.TrackerValidationReport;\n+import org.hisp.dhis.user.UserService;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.io.ClassPathResource;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasProperty;\n+import static org.hamcrest.core.Every.everyItem;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+@Slf4j\n+public class EnrollmentAttrValidationTests\n+    extends AbstractImportValidationTest\n+{\n+\n+    @Autowired\n+    protected TrackedEntityInstanceService trackedEntityInstanceService;\n+\n+    @Autowired\n+    private TrackerBundleService trackerBundleService;\n+\n+    @Autowired\n+    private ObjectBundleService objectBundleService;\n+\n+    @Autowired\n+    private ObjectBundleValidationService objectBundleValidationService;\n+\n+    @Autowired\n+    private DefaultTrackerValidationService trackerValidationService;\n+\n+    @Autowired\n+    private RenderService _renderService;\n+\n+    @Autowired\n+    private UserService _userService;\n+\n+    @Autowired\n+    private TrackedEntityAttributeService trackedEntityAttributeService;\n+\n+    @Override\n+    protected void setUpTest()\n+        throws IOException\n+    {\n+        renderService = _renderService;\n+        userService = _userService;\n+\n+        Map<Class<? extends IdentifiableObject>, List<IdentifiableObject>> metadata = renderService.fromMetadata(\n+            new ClassPathResource( \"tracker/tracker_basic_metadata_mandatory_attr.json\" ).getInputStream(),\n+            RenderFormat.JSON );\n+\n+        ObjectBundleParams params = new ObjectBundleParams();\n+        params.setObjectBundleMode( ObjectBundleMode.COMMIT );\n+        params.setImportStrategy( ImportStrategy.CREATE );\n+        params.setObjects( metadata );\n+\n+        ObjectBundle bundle = objectBundleService.create( params );\n+        ObjectBundleValidationReport validationReport = objectBundleValidationService.validate( bundle );\n+        List<ErrorReport> errorReports = validationReport.getErrorReports();\n+        assertTrue( errorReports.isEmpty() );\n+\n+        ObjectBundleCommitReport commit = objectBundleService.commit( bundle );\n+        List<ErrorReport> objectReport = commit.getErrorReports();\n+        assertTrue( objectReport.isEmpty() );\n+\n+        TrackerBundleParams trackerBundleParams = createBundleFromJson(\n+            \"tracker/validations/enrollments_te_te-data_2.json\" );\n+\n+        TrackerBundle trackerBundle = trackerBundleService.create( trackerBundleParams ).get( 0 );\n+        assertEquals( 1, trackerBundle.getTrackedEntities().size() );\n+\n+        TrackerValidationReport report = trackerValidationService.validate( trackerBundle );\n+        assertEquals( 0, report.getErrorReports().size() );\n+\n+        TrackerBundleReport bundleReport = trackerBundleService.commit( trackerBundle );\n+        assertEquals( TrackerStatus.OK, bundleReport.getStatus() );\n+    }\n+\n+    @Test\n+    public void testAttributesOk()\n+        throws IOException\n+    {\n+        TrackerBundleParams params = createBundleFromJson( \"tracker/validations/enrollments_te_attr-data.json\" );", "originalCommit": "676b8ac99ef7302321ae87ed2f2f5ab6fef01c1e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "e969ffd48a52467420ef0b6e724d2324d41d328a", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentAttrValidationTests.java b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentAttrValidationTests.java\nindex bd6db19585..cc1b245adb 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentAttrValidationTests.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentAttrValidationTests.java\n", "chunk": "@@ -139,25 +139,7 @@ public class EnrollmentAttrValidationTests\n     }\n \n     @Test\n-    public void testAttributesOk()\n-        throws IOException\n-    {\n-        TrackerBundleParams params = createBundleFromJson( \"tracker/validations/enrollments_te_attr-data.json\" );\n-\n-        ValidateAndCommitTestUnit createAndUpdate = validateAndCommit( params, TrackerImportStrategy.CREATE );\n-        assertEquals( 1, createAndUpdate.getTrackerBundle().getEnrollments().size() );\n-\n-        TrackerValidationReport validationReport = createAndUpdate.getValidationReport();\n-        printReport( validationReport );\n-\n-        assertEquals( 0, validationReport.getErrorReports().size() );\n-\n-        assertThat( validationReport.getErrorReports(),\n-            everyItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1019 ) ) ) );\n-    }\n-\n-    @Test\n-    public void testAttributesMissingUiid()\n+    public void testAttributesMissingUid()\n         throws IOException\n     {\n         TrackerBundleParams params = createBundleFromJson(\n", "next_change": null}]}, "revised_code_in_main": {"commit": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentAttrValidationTests.java b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentAttrValidationTests.java\nindex bd6db19585..b048050c3f 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentAttrValidationTests.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentAttrValidationTests.java\n", "chunk": "@@ -139,10 +141,11 @@ public class EnrollmentAttrValidationTests\n     }\n \n     @Test\n-    public void testAttributesOk()\n+    public void testAttributesMissingUid()\n         throws IOException\n     {\n-        TrackerBundleParams params = createBundleFromJson( \"tracker/validations/enrollments_te_attr-data.json\" );\n+        TrackerBundleParams params = createBundleFromJson(\n+            \"tracker/validations/enrollments_te_attr-missing-uuid.json\" );\n \n         ValidateAndCommitTestUnit createAndUpdate = validateAndCommit( params, TrackerImportStrategy.CREATE );\n         assertEquals( 1, createAndUpdate.getTrackerBundle().getEnrollments().size() );\n", "next_change": {"commit": "3e799d196b8f73ad216ea100a07ddd5f7dfc53e0", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentAttrValidationTests.java b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentAttrValidationTests.java\nindex b048050c3f..157f24900c 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentAttrValidationTests.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentAttrValidationTests.java\n", "chunk": "@@ -144,8 +92,7 @@ public class EnrollmentAttrValidationTests\n     public void testAttributesMissingUid()\n         throws IOException\n     {\n-        TrackerBundleParams params = createBundleFromJson(\n-            \"tracker/validations/enrollments_te_attr-missing-uuid.json\" );\n+        TrackerImportParams params = createBundleFromJson( \"tracker/validations/enrollments_te_attr-missing-uuid.json\" );\n \n         ValidateAndCommitTestUnit createAndUpdate = validateAndCommit( params, TrackerImportStrategy.CREATE );\n         assertEquals( 1, createAndUpdate.getTrackerBundle().getEnrollments().size() );\n", "next_change": {"commit": "3ab88a5f4623a8c749246bedef34fcb926d185cb", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentAttrValidationTests.java b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentAttrValidationTests.java\nindex 157f24900c..d4a146d3f1 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentAttrValidationTests.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentAttrValidationTests.java\n", "chunk": "@@ -95,7 +95,6 @@ public class EnrollmentAttrValidationTests\n         TrackerImportParams params = createBundleFromJson( \"tracker/validations/enrollments_te_attr-missing-uuid.json\" );\n \n         ValidateAndCommitTestUnit createAndUpdate = validateAndCommit( params, TrackerImportStrategy.CREATE );\n-        assertEquals( 1, createAndUpdate.getTrackerBundle().getEnrollments().size() );\n \n         TrackerValidationReport validationReport = createAndUpdate.getValidationReport();\n         printReport( validationReport );\n", "next_change": {"commit": "ea76fa86409613c9766d4508d65c88ac55c413c3", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentAttrValidationTests.java b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentAttrValidationTests.java\nindex d4a146d3f1..b5e52af6d3 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentAttrValidationTests.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EnrollmentAttrValidationTests.java\n", "chunk": "@@ -92,7 +90,8 @@ public class EnrollmentAttrValidationTests\n     public void testAttributesMissingUid()\n         throws IOException\n     {\n-        TrackerImportParams params = createBundleFromJson( \"tracker/validations/enrollments_te_attr-missing-uuid.json\" );\n+        TrackerImportParams params = createBundleFromJson(\n+            \"tracker/validations/enrollments_te_attr-missing-uuid.json\" );\n \n         ValidateAndCommitTestUnit createAndUpdate = validateAndCommit( params, TrackerImportStrategy.CREATE );\n \n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "message": "Merge commit", "committedDate": null}, {"oid": "2ed799f33ca26b918ed60473a3f097714f00492e", "committedDate": "2020-08-04 10:30:01 +0200", "message": "chore: Clean up code (#5877)"}, {"oid": "cb2ee65c0210c0d4b2bd8851789da8d4adfaf04d", "committedDate": "2020-09-07 10:28:21 +0200", "message": "fix: [DHIS2-9287] Fix the stats in the import summary (#6062)"}, {"oid": "d095f2d4cf9aaac1e9aa973d4da6aa2f96104cc8", "committedDate": "2020-11-11 13:49:13 +0100", "message": "fix: allow validation to reference entities in the payload (#6617)"}, {"oid": "3e799d196b8f73ad216ea100a07ddd5f7dfc53e0", "committedDate": "2020-11-30 16:37:14 +0100", "message": "fix: remove long running transaction during Tracker Import (#6782)"}, {"oid": "3ab88a5f4623a8c749246bedef34fcb926d185cb", "committedDate": "2020-12-08 10:40:14 +0100", "message": "fix: [DHIS2-7310] Move rule engine call and validations after bundle validation (#6843)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "c25b817a180f24b3de6b26d5a089563aa336aa8c", "committedDate": "2021-03-05 10:44:25 +0100", "message": "feat: Validation for values with option sets [DHIS2-10452] (#7512)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAxNjY2OQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r447016669", "body": "this code can be removed.", "bodyText": "this code can be removed.", "bodyHTML": "<p dir=\"auto\">this code can be removed.</p>", "author": "zubaira", "createdAt": "2020-06-29T14:31:29Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentInExistingValidationHook.java", "diffHunk": "@@ -0,0 +1,252 @@\n+package org.hisp.dhis.tracker.validation.hooks;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.hisp.dhis.common.OrganisationUnitSelectionMode;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.program.ProgramInstance;\n+import org.hisp.dhis.program.ProgramInstanceQueryParams;\n+import org.hisp.dhis.program.ProgramInstanceService;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+import org.hisp.dhis.trackedentity.TrackerOwnershipManager;\n+import org.hisp.dhis.trackedentitycomment.TrackedEntityComment;\n+import org.hisp.dhis.tracker.TrackerImportStrategy;\n+import org.hisp.dhis.tracker.domain.Enrollment;\n+import org.hisp.dhis.tracker.domain.EnrollmentStatus;\n+import org.hisp.dhis.tracker.domain.Note;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n+import org.hisp.dhis.tracker.validation.TrackerImportValidationContext;\n+import org.hisp.dhis.tracker.validation.service.TrackerImportAccessManager;\n+import org.hisp.dhis.user.User;\n+import org.hisp.dhis.util.DateUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n+import static org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors.PROGRAM_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors.PROGRAM_INSTANCE_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors.TRACKED_ENTITY_INSTANCE_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors.USER_CANT_BE_NULL;\n+import static org.hisp.dhis.util.DateUtils.getIso8601;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+@Component\n+public class EnrollmentInExistingValidationHook\n+    extends AbstractTrackerDtoValidationHook\n+{\n+    @Autowired\n+    protected TrackerOwnershipManager trackerOwnershipManager;\n+\n+    @Autowired\n+    protected ProgramInstanceService programInstanceService;\n+\n+    @Autowired\n+    private TrackerImportAccessManager trackerImportAccessManager;\n+\n+    public EnrollmentInExistingValidationHook()\n+    {\n+        super( Enrollment.class, TrackerImportStrategy.CREATE_AND_UPDATE );\n+    }\n+\n+    @Override\n+    public void validateEnrollment( ValidationErrorReporter reporter, Enrollment enrollment )\n+    {\n+        TrackerImportValidationContext validationContext = reporter.getValidationContext();\n+\n+        if ( EnrollmentStatus.CANCELLED == enrollment.getStatus() )\n+        {\n+            return;\n+        }\n+\n+        Program program = validationContext.getProgram( enrollment.getProgram() );\n+\n+        if ( (EnrollmentStatus.COMPLETED == enrollment.getStatus()\n+            && Boolean.FALSE.equals( program.getOnlyEnrollOnce() )) )\n+        {\n+            return;\n+        }\n+\n+        validateTeiNotEnrolledAlready( reporter, enrollment, program );\n+    }\n+\n+    protected void validateTeiNotEnrolledAlready( ValidationErrorReporter reporter,\n+        Enrollment enrollment, Program program )\n+    {\n+        User user = reporter.getValidationContext().getBundle().getUser();\n+\n+        Objects.requireNonNull( user, USER_CANT_BE_NULL );\n+        Objects.requireNonNull( program, PROGRAM_CANT_BE_NULL );\n+        Objects.requireNonNull( enrollment.getTrackedEntity(), TRACKED_ENTITY_INSTANCE_CANT_BE_NULL );\n+\n+        TrackedEntityInstance tei = reporter.getValidationContext()\n+            .getTrackedEntityInstance( enrollment.getTrackedEntity() );\n+\n+        // TODO: Create a dedicated sql query....?\n+        Set<Enrollment> activeAndCompleted = getAllEnrollments( reporter, program, tei )\n+            .stream()\n+            .filter( e -> EnrollmentStatus.ACTIVE == e.getStatus() || EnrollmentStatus.COMPLETED == e.getStatus() )\n+            .collect( Collectors.toSet() );\n+\n+        if ( EnrollmentStatus.ACTIVE == enrollment.getStatus() )\n+        {\n+            Set<Enrollment> activeOnly = activeAndCompleted.stream()\n+                .filter( e -> EnrollmentStatus.ACTIVE == e.getStatus() )\n+                .collect( Collectors.toSet() );\n+\n+            if ( !activeOnly.isEmpty() )\n+            {\n+                // TODO: How do we do this check on an import set, this only checks when the DB already contains it\n+                reporter.addError( newReport( TrackerErrorCode.E1015 )\n+                    .addArg( tei )\n+                    .addArg( program ) );\n+            }\n+        }\n+\n+        if ( Boolean.TRUE.equals( program.getOnlyEnrollOnce() ) && !activeAndCompleted.isEmpty() )\n+        {\n+            reporter.addError( newReport( TrackerErrorCode.E1016 )\n+                .addArg( tei )\n+                .addArg( program ) );\n+        }\n+    }\n+\n+    public List<Enrollment> getAllEnrollments( ValidationErrorReporter reporter, Program program,\n+        TrackedEntityInstance trackedEntityInstance )\n+    {\n+        User user = reporter.getValidationContext().getBundle().getUser();\n+\n+        Objects.requireNonNull( user, USER_CANT_BE_NULL );\n+        Objects.requireNonNull( program, PROGRAM_CANT_BE_NULL );\n+        Objects.requireNonNull( trackedEntityInstance, TRACKED_ENTITY_INSTANCE_CANT_BE_NULL );\n+\n+        ProgramInstanceQueryParams params = new ProgramInstanceQueryParams();\n+        params.setOrganisationUnitMode( OrganisationUnitSelectionMode.ALL );\n+        params.setSkipPaging( true );\n+        params.setProgram( program );\n+        params.setTrackedEntityInstance( trackedEntityInstance );\n+        List<ProgramInstance> programInstances = programInstanceService.getProgramInstances( params );\n+\n+        List<Enrollment> all = new ArrayList<>();\n+\n+        for ( ProgramInstance programInstance : programInstances )\n+        {\n+            // TODO: Move to ownership/security pre check hook if possible?\n+            if ( trackerOwnershipManager\n+                .hasAccess( user, programInstance.getEntityInstance(), programInstance.getProgram() ) )\n+            {\n+                // Always create a fork of the reporter when used for checking/counting errors,\n+                // this is needed for thread safety in parallel mode.\n+                ValidationErrorReporter reporterFork = reporter.fork();\n+\n+                trackerImportAccessManager.checkReadEnrollmentAccess( reporterFork, programInstance );\n+\n+                if ( reporterFork.hasErrors() )\n+                {\n+                    reporter.merge( reporterFork );\n+                }\n+                else\n+                {\n+                    all.add( getEnrollmentFromProgramInstance( programInstance ) );\n+                }\n+            }\n+        }\n+\n+        return all;\n+    }\n+\n+    public Enrollment getEnrollmentFromProgramInstance( ProgramInstance programInstance )\n+    {\n+        Objects.requireNonNull( programInstance, PROGRAM_INSTANCE_CANT_BE_NULL );\n+\n+        Enrollment enrollment = new Enrollment();\n+        enrollment.setEnrollment( programInstance.getUid() );\n+\n+        if ( programInstance.getEntityInstance() != null )\n+        {\n+            enrollment.setTrackedEntityType( programInstance.getEntityInstance().getTrackedEntityType().getUid() );\n+            enrollment.setTrackedEntity( programInstance.getEntityInstance().getUid() );\n+        }\n+\n+        if ( programInstance.getOrganisationUnit() != null )\n+        {\n+            enrollment.setOrgUnit( programInstance.getOrganisationUnit().getUid() );\n+//            enrollment.setOrgUnitName( programInstance.getOrganisationUnit().getName() );\n+        }\n+\n+        if ( programInstance.getGeometry() != null )\n+        {\n+            enrollment.setGeometry( programInstance.getGeometry() );\n+\n+//            if ( programInstance.getProgram().getFeatureType() == FeatureType.POINT )", "originalCommit": "676b8ac99ef7302321ae87ed2f2f5ab6fef01c1e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3f9b65636059a5bba5b3e2d603fe5b83bc2e122b", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentInExistingValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentInExistingValidationHook.java\nindex 927d6d32c8..4b1b01140e 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentInExistingValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentInExistingValidationHook.java\n", "chunk": "@@ -205,18 +205,11 @@ public class EnrollmentInExistingValidationHook\n         if ( programInstance.getOrganisationUnit() != null )\n         {\n             enrollment.setOrgUnit( programInstance.getOrganisationUnit().getUid() );\n-//            enrollment.setOrgUnitName( programInstance.getOrganisationUnit().getName() );\n         }\n \n         if ( programInstance.getGeometry() != null )\n         {\n             enrollment.setGeometry( programInstance.getGeometry() );\n-\n-//            if ( programInstance.getProgram().getFeatureType() == FeatureType.POINT )\n-//            {\n-//                com.vividsolutions.jts.geom.Coordinate co = programInstance.getGeometry().getCoordinate();\n-//                enrollment.setCoordinate( new Coordinate( co.x, co.y ) );\n-//            }\n         }\n \n         enrollment.setCreatedAt( DateUtils.getIso8601NoTz( programInstance.getCreated() ) );\n", "next_change": {"commit": "971eecb46d414a2bf18f530223bef7a041abf919", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentInExistingValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentInExistingValidationHook.java\nindex 4b1b01140e..49a6e72543 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentInExistingValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentInExistingValidationHook.java\n", "chunk": "@@ -213,9 +215,7 @@ public class EnrollmentInExistingValidationHook\n         }\n \n         enrollment.setCreatedAt( DateUtils.getIso8601NoTz( programInstance.getCreated() ) );\n-//        enrollment.setCreatedAtClient( DateUtils.getIso8601NoTz( programInstance.getCreatedAtClient() ) );\n         enrollment.setUpdatedAt( DateUtils.getIso8601NoTz( programInstance.getLastUpdated() ) );\n-//        enrollment.setLastUpdatedAtClient( DateUtils.getIso8601NoTz( programInstance.getLastUpdatedAtClient() ) );\n         enrollment.setProgram( programInstance.getProgram().getUid() );\n         enrollment.setStatus( EnrollmentStatus.fromProgramStatus( programInstance.getStatus() ) );\n         enrollment.setEnrolledAt( getIso8601( programInstance.getEnrollmentDate() ) );\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentInExistingValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentInExistingValidationHook.java\nindex 927d6d32c8..b1b04ec1d3 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentInExistingValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentInExistingValidationHook.java\n", "chunk": "@@ -205,24 +210,15 @@ public class EnrollmentInExistingValidationHook\n         if ( programInstance.getOrganisationUnit() != null )\n         {\n             enrollment.setOrgUnit( programInstance.getOrganisationUnit().getUid() );\n-//            enrollment.setOrgUnitName( programInstance.getOrganisationUnit().getName() );\n         }\n \n         if ( programInstance.getGeometry() != null )\n         {\n             enrollment.setGeometry( programInstance.getGeometry() );\n-\n-//            if ( programInstance.getProgram().getFeatureType() == FeatureType.POINT )\n-//            {\n-//                com.vividsolutions.jts.geom.Coordinate co = programInstance.getGeometry().getCoordinate();\n-//                enrollment.setCoordinate( new Coordinate( co.x, co.y ) );\n-//            }\n         }\n \n         enrollment.setCreatedAt( DateUtils.getIso8601NoTz( programInstance.getCreated() ) );\n-//        enrollment.setCreatedAtClient( DateUtils.getIso8601NoTz( programInstance.getCreatedAtClient() ) );\n         enrollment.setUpdatedAt( DateUtils.getIso8601NoTz( programInstance.getLastUpdated() ) );\n-//        enrollment.setLastUpdatedAtClient( DateUtils.getIso8601NoTz( programInstance.getLastUpdatedAtClient() ) );\n         enrollment.setProgram( programInstance.getProgram().getUid() );\n         enrollment.setStatus( EnrollmentStatus.fromProgramStatus( programInstance.getStatus() ) );\n         enrollment.setEnrolledAt( getIso8601( programInstance.getEnrollmentDate() ) );\n", "next_change": {"commit": "8192aa1d2567bc36dbc259a2f61bf9b7609b7b53", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentInExistingValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentInExistingValidationHook.java\nindex b1b04ec1d3..b428dd8059 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentInExistingValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentInExistingValidationHook.java\n", "chunk": "@@ -201,48 +193,28 @@ public class EnrollmentInExistingValidationHook\n         Enrollment enrollment = new Enrollment();\n         enrollment.setEnrollment( programInstance.getUid() );\n \n-        if ( programInstance.getEntityInstance() != null )\n-        {\n-            enrollment.setTrackedEntityType( programInstance.getEntityInstance().getTrackedEntityType().getUid() );\n-            enrollment.setTrackedEntity( programInstance.getEntityInstance().getUid() );\n-        }\n-\n-        if ( programInstance.getOrganisationUnit() != null )\n-        {\n-            enrollment.setOrgUnit( programInstance.getOrganisationUnit().getUid() );\n-        }\n-\n-        if ( programInstance.getGeometry() != null )\n-        {\n-            enrollment.setGeometry( programInstance.getGeometry() );\n-        }\n-\n-        enrollment.setCreatedAt( DateUtils.getIso8601NoTz( programInstance.getCreated() ) );\n-        enrollment.setUpdatedAt( DateUtils.getIso8601NoTz( programInstance.getLastUpdated() ) );\n-        enrollment.setProgram( programInstance.getProgram().getUid() );\n         enrollment.setStatus( EnrollmentStatus.fromProgramStatus( programInstance.getStatus() ) );\n-        enrollment.setEnrolledAt( getIso8601( programInstance.getEnrollmentDate() ) );\n-        enrollment.setOccurredAt( getIso8601( programInstance.getIncidentDate() ) );\n-        enrollment.setFollowUp( programInstance.getFollowup() );\n-        enrollment.setCreatedAt( getIso8601( programInstance.getEndDate() ) );\n-        enrollment.setCompletedBy( programInstance.getCompletedBy() );\n-        enrollment.setStoredBy( programInstance.getStoredBy() );\n-        enrollment.setDeleted( programInstance.isDeleted() );\n+        return enrollment;\n+    }\n \n-        List<TrackedEntityComment> comments = programInstance.getComments();\n+    /**\n+     * Get a {@link TrackedEntityInstance} from the pre-heat or from the reference\n+     * tree.\n+     *\n+     * @param reporter the {@link ValidationErrorReporter} object\n+     * @param uid the UID of a {@link TrackedEntityInstance} object\n+     * @return a TrackedEntityInstance\n+     */\n+    public TrackedEntityInstance getTrackedEntityInstance( ValidationErrorReporter reporter, String uid )\n+    {\n+        TrackedEntityInstance tei = reporter.getValidationContext().getTrackedEntityInstance( uid );\n \n-        for ( TrackedEntityComment comment : comments )\n+        if ( tei == null && reporter.getValidationContext().getReference( uid ).isPresent() )\n         {\n-            Note note = new Note();\n-\n-            note.setNote( comment.getUid() );\n-            note.setValue( comment.getCommentText() );\n-            note.setStoredBy( comment.getCreator() );\n-            note.setStoredAt( DateUtils.getIso8601NoTz( comment.getCreated() ) );\n+            tei = new TrackedEntityInstance();\n+            tei.setUid( uid );\n \n-            enrollment.getNotes().add( note );\n         }\n-\n-        return enrollment;\n+        return tei;\n     }\n }\n\\ No newline at end of file\n", "next_change": {"commit": "2db6b519d76e1d0b0390a9dc6f2f650824c543bb", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentInExistingValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentInExistingValidationHook.java\ndeleted file mode 100644\nindex b428dd8059..0000000000\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentInExistingValidationHook.java\n+++ /dev/null\n", "chunk": "@@ -1,220 +0,0 @@\n-package org.hisp.dhis.tracker.validation.hooks;\n-\n-/*\n- * Copyright (c) 2004-2020, University of Oslo\n- * All rights reserved.\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions are met:\n- * Redistributions of source code must retain the above copyright notice, this\n- * list of conditions and the following disclaimer.\n- *\n- * Redistributions in binary form must reproduce the above copyright notice,\n- * this list of conditions and the following disclaimer in the documentation\n- * and/or other materials provided with the distribution.\n- * Neither the name of the HISP project nor the names of its contributors may\n- * be used to endorse or promote products derived from this software without\n- * specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n- * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n- * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n- * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n- * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n- * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n- * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- */\n-\n-import static com.google.api.client.util.Preconditions.checkNotNull;\n-import static org.hisp.dhis.tracker.report.TrackerErrorCode.E1015;\n-import static org.hisp.dhis.tracker.report.TrackerErrorCode.E1016;\n-import static org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors.PROGRAM_CANT_BE_NULL;\n-import static org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors.PROGRAM_INSTANCE_CANT_BE_NULL;\n-import static org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors.TRACKED_ENTITY_INSTANCE_CANT_BE_NULL;\n-import static org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors.USER_CANT_BE_NULL;\n-import static org.hisp.dhis.util.DateUtils.getIso8601;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.Set;\n-import java.util.stream.Collectors;\n-\n-import org.hisp.dhis.common.OrganisationUnitSelectionMode;\n-import org.hisp.dhis.program.Program;\n-import org.hisp.dhis.program.ProgramInstance;\n-import org.hisp.dhis.program.ProgramInstanceQueryParams;\n-import org.hisp.dhis.program.ProgramInstanceService;\n-import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n-import org.hisp.dhis.trackedentity.TrackerOwnershipManager;\n-import org.hisp.dhis.trackedentitycomment.TrackedEntityComment;\n-import org.hisp.dhis.tracker.domain.Enrollment;\n-import org.hisp.dhis.tracker.domain.EnrollmentStatus;\n-import org.hisp.dhis.tracker.domain.Note;\n-import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n-import org.hisp.dhis.tracker.validation.TrackerImportValidationContext;\n-import org.hisp.dhis.tracker.validation.service.TrackerImportAccessManager;\n-import org.hisp.dhis.user.User;\n-import org.hisp.dhis.util.DateUtils;\n-import org.springframework.stereotype.Component;\n-\n-/**\n- * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n- */\n-@Component\n-public class EnrollmentInExistingValidationHook\n-    extends AbstractTrackerDtoValidationHook\n-{\n-    protected final TrackerOwnershipManager trackerOwnershipManager;\n-\n-    protected final ProgramInstanceService programInstanceService;\n-\n-    private final TrackerImportAccessManager trackerImportAccessManager;\n-\n-    public EnrollmentInExistingValidationHook( TrackerOwnershipManager trackerOwnershipManager,\n-        ProgramInstanceService programInstanceService,\n-        TrackerImportAccessManager trackerImportAccessManager )\n-    {\n-        checkNotNull( trackerOwnershipManager );\n-        checkNotNull( programInstanceService );\n-        checkNotNull( trackerImportAccessManager );\n-\n-        this.trackerOwnershipManager = trackerOwnershipManager;\n-        this.programInstanceService = programInstanceService;\n-        this.trackerImportAccessManager = trackerImportAccessManager;\n-    }\n-\n-    @Override\n-    public void validateEnrollment( ValidationErrorReporter reporter, Enrollment enrollment )\n-    {\n-        TrackerImportValidationContext validationContext = reporter.getValidationContext();\n-\n-        if ( EnrollmentStatus.CANCELLED == enrollment.getStatus() )\n-        {\n-            return;\n-        }\n-\n-        Program program = validationContext.getProgram( enrollment.getProgram() );\n-\n-        checkNotNull( program, PROGRAM_CANT_BE_NULL );\n-\n-        if ( (EnrollmentStatus.COMPLETED == enrollment.getStatus()\n-            && Boolean.FALSE.equals( program.getOnlyEnrollOnce() )) )\n-        {\n-            return;\n-        }\n-\n-        validateTeiNotEnrolledAlready( reporter, enrollment, program );\n-    }\n-\n-    protected void validateTeiNotEnrolledAlready( ValidationErrorReporter reporter,\n-        Enrollment enrollment, Program program )\n-    {\n-        User user = reporter.getValidationContext().getBundle().getUser();\n-\n-        checkNotNull( user, USER_CANT_BE_NULL );\n-        checkNotNull( program, PROGRAM_CANT_BE_NULL );\n-        checkNotNull( enrollment.getTrackedEntity(), TRACKED_ENTITY_INSTANCE_CANT_BE_NULL );\n-\n-        TrackedEntityInstance tei = getTrackedEntityInstance( reporter, enrollment.getTrackedEntity() );\n-\n-        // TODO: Create a dedicated sql query....?\n-        Set<Enrollment> activeAndCompleted = getAllEnrollments( reporter, program, tei.getUid() )\n-            .stream()\n-            .filter( e -> EnrollmentStatus.ACTIVE == e.getStatus() || EnrollmentStatus.COMPLETED == e.getStatus() )\n-            .collect( Collectors.toSet() );\n-\n-        if ( EnrollmentStatus.ACTIVE == enrollment.getStatus() )\n-        {\n-            Set<Enrollment> activeOnly = activeAndCompleted.stream()\n-                .filter( e -> EnrollmentStatus.ACTIVE == e.getStatus() )\n-                .collect( Collectors.toSet() );\n-\n-            if ( !activeOnly.isEmpty() && !activeOnly.contains( enrollment ) )\n-            {\n-                // TODO: How do we do this check on an import set, this only checks when the DB already contains it\n-                addError( reporter, E1015, tei, program );\n-            }\n-        }\n-\n-        if ( Boolean.TRUE.equals( program.getOnlyEnrollOnce() ) && !activeAndCompleted.isEmpty() )\n-        {\n-            addError( reporter, E1016, tei, program );\n-        }\n-    }\n-\n-    private List<Enrollment> getAllEnrollments( ValidationErrorReporter reporter, Program program,\n-        String trackedEntityInstanceUid )\n-    {\n-        User user = reporter.getValidationContext().getBundle().getUser();\n-\n-        checkNotNull( user, USER_CANT_BE_NULL );\n-        checkNotNull( program, PROGRAM_CANT_BE_NULL );\n-        //checkNotNull( trackedEntityInstance, TRACKED_ENTITY_INSTANCE_CANT_BE_NULL );\n-\n-        ProgramInstanceQueryParams params = new ProgramInstanceQueryParams();\n-        params.setOrganisationUnitMode( OrganisationUnitSelectionMode.ALL );\n-        params.setSkipPaging( true );\n-        params.setProgram( program );\n-        params.setTrackedEntityInstanceUid( trackedEntityInstanceUid );\n-        List<ProgramInstance> programInstances = programInstanceService.getProgramInstances( params );\n-\n-        List<Enrollment> all = new ArrayList<>();\n-\n-        for ( ProgramInstance programInstance : programInstances )\n-        {\n-            if ( trackerOwnershipManager\n-                .hasAccess( user, programInstance.getEntityInstance(), programInstance.getProgram() ) )\n-            {\n-\n-                ValidationErrorReporter localReporter = new ValidationErrorReporter( reporter.getValidationContext() );\n-                trackerImportAccessManager.checkReadEnrollmentAccess( localReporter, programInstance.getProgram(), programInstance.getOrganisationUnit(), programInstance.getEntityInstance().getUid());\n-\n-                if ( localReporter.hasErrors() )\n-                {\n-                    reporter.merge( localReporter );\n-                }\n-                else\n-                {\n-                    all.add( getEnrollmentFromProgramInstance( programInstance ) );\n-                }\n-            }\n-        }\n-\n-        return all;\n-    }\n-\n-    public Enrollment getEnrollmentFromProgramInstance( ProgramInstance programInstance )\n-    {\n-        checkNotNull( programInstance, PROGRAM_INSTANCE_CANT_BE_NULL );\n-\n-        Enrollment enrollment = new Enrollment();\n-        enrollment.setEnrollment( programInstance.getUid() );\n-\n-        enrollment.setStatus( EnrollmentStatus.fromProgramStatus( programInstance.getStatus() ) );\n-        return enrollment;\n-    }\n-\n-    /**\n-     * Get a {@link TrackedEntityInstance} from the pre-heat or from the reference\n-     * tree.\n-     *\n-     * @param reporter the {@link ValidationErrorReporter} object\n-     * @param uid the UID of a {@link TrackedEntityInstance} object\n-     * @return a TrackedEntityInstance\n-     */\n-    public TrackedEntityInstance getTrackedEntityInstance( ValidationErrorReporter reporter, String uid )\n-    {\n-        TrackedEntityInstance tei = reporter.getValidationContext().getTrackedEntityInstance( uid );\n-\n-        if ( tei == null && reporter.getValidationContext().getReference( uid ).isPresent() )\n-        {\n-            tei = new TrackedEntityInstance();\n-            tei.setUid( uid );\n-\n-        }\n-        return tei;\n-    }\n-}\n\\ No newline at end of file\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "message": "Merge commit", "committedDate": null}, {"oid": "3e3dc98d92f0c13fb56cf17894eab06a78842133", "committedDate": "2020-08-04 17:20:37 +0200", "message": "feat: Enrollment/Events note persistence"}, {"oid": "cb2ee65c0210c0d4b2bd8851789da8d4adfaf04d", "committedDate": "2020-09-07 10:28:21 +0200", "message": "fix: [DHIS2-9287] Fix the stats in the import summary (#6062)"}, {"oid": "3e3b32e56ff5554a0095396eddffceac65b6b8de", "committedDate": "2020-10-27 09:56:50 +0100", "message": "refactor: simplified calls to error reporting (#6437)"}, {"oid": "d095f2d4cf9aaac1e9aa973d4da6aa2f96104cc8", "committedDate": "2020-11-11 13:49:13 +0100", "message": "fix: allow validation to reference entities in the payload (#6617)"}, {"oid": "d34f05e1348f3dff54ced7059283a96a7b699ea4", "committedDate": "2020-11-16 18:21:11 +0100", "message": "feat: DHIS2-9835 user info in comments and notes for Events and Enrollments (#6587)"}, {"oid": "9f9b08a0ac165fb56a7b6ca8900aa54b2103a71d", "committedDate": "2020-11-18 10:13:55 +0100", "message": "feat: [DHIS2-9841] Use db for storing break the glass records. Temporary ownerships (2.36) (#6643)"}, {"oid": "0bf55d776481f6511e5f9ebca5de1f2cf79777c0", "committedDate": "2020-11-19 13:55:46 +0100", "message": "refactor: New Tracker Error reporting refactor (#6706)"}, {"oid": "8192aa1d2567bc36dbc259a2f61bf9b7609b7b53", "committedDate": "2020-12-07 08:36:43 +0100", "message": "fix: remove Lazy Init Exception on enrollment update (#6795)"}, {"oid": "7098e9412b922ed70f8136f30c7d790e27bb43be", "committedDate": "2020-12-10 10:43:44 +0100", "message": "chore: Remove unused imports (#6875)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "8c0d810d8bfc5333d6805554b99384507ba4f242", "committedDate": "2021-01-29 17:30:02 +0100", "message": "fix: [DHIS2-10208] enrollment not updated due to validation (2.36) (#7210)"}, {"oid": "39a200eaa53e6ba6a09ff028cecbd9d2f9b4fb0f", "committedDate": "2021-05-04 08:41:15 +0200", "message": "[TECH-450] - DB access in EnrollmentInExistingValidationHook (#7941)"}, {"oid": "d3b0477644437a33507157a3b97b0040d8a44496", "committedDate": "2021-10-06 13:42:51 +0200", "message": "fix: Fix active and enrollOnce logic in enrollment validation [DHIS2-11659] (#8958)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "97fa18701761c6993e20f2e7a3816ea689129480", "committedDate": "2022-01-11 15:31:02 +0100", "message": "chore: hooks should add errors via reporter directly TECH-880 (#9523)"}, {"oid": "1d8350a9e9ac100aaaa831894ba3f857b46e2474", "committedDate": "2022-01-13 14:15:17 +0100", "message": "chore: adding errors and warnings is responsibility of the ValidationErrorReporter TECH-880 (#9616)"}, {"oid": "c039b8f75c1d965414de926f04540dfaabdd104c", "committedDate": "2022-02-23 13:08:25 +0100", "message": "chore: Clean up service program rule module [TECH-938] (#9885)"}, {"oid": "ef0cbd365e47f1f88befb80d9650cce75280bd35", "committedDate": "2022-03-08 15:12:00 +0100", "message": "chore: move DB access and mutation to preheat and preprocessor DHIS2-12623 (#9904)"}, {"oid": "5f63b52ac0a4f426145ae43affa58295f804812a", "committedDate": "2022-04-14 13:41:33 +0200", "message": "chore: split domain and view models DHIS2-12563 (#10379)"}, {"oid": "f7cfc83610c75486bbb0457dde057eaed777f3d2", "committedDate": "2022-05-27 15:15:25 +0200", "message": "chore: ValidationErrorReporter does not need the bunlde DHIS2-12519 (#10878)"}, {"oid": "b0a861c0308005b865cafa2344c1231c0a4f2bc3", "committedDate": "2022-12-02 13:36:08 +0100", "message": "fix: turn removeOnError into skipOnError DHIS2-14213 (#12457)"}, {"oid": "7ac68b368a1dbd9362973b30f7160399abe801a0", "committedDate": "2022-12-06 09:04:47 +0100", "message": "chore: move ValidationErrorReporter close to its usage (#12486)"}, {"oid": "07ff89195ce66114c2b5a744039c2b2ce7a8f440", "committedDate": "2022-12-13 09:51:43 +0100", "message": "chore: Clean up TrackerBundle methods [TECH-14298] (#12515)"}, {"oid": "2db6b519d76e1d0b0390a9dc6f2f650824c543bb", "committedDate": "2022-12-13 13:10:13 +0100", "message": "chore: migrate enrollment validators (#12526)"}]}, {"oid": "3999d1c8e8d7c2bcd11c7c5d99fec179abd25e2b", "url": "https://github.com/dhis2/dhis2-core/commit/3999d1c8e8d7c2bcd11c7c5d99fec179abd25e2b", "message": "* Fix PR comments\n\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>", "committedDate": "2020-06-29T14:33:35Z", "type": "commit"}, {"oid": "e969ffd48a52467420ef0b6e724d2324d41d328a", "url": "https://github.com/dhis2/dhis2-core/commit/e969ffd48a52467420ef0b6e724d2324d41d328a", "message": "* Fix PR comments\n\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>", "committedDate": "2020-06-29T14:36:19Z", "type": "commit"}, {"oid": "9794e609238425fa205be611d59b1202dfb4ce17", "url": "https://github.com/dhis2/dhis2-core/commit/9794e609238425fa205be611d59b1202dfb4ce17", "message": "* Fix PR comments\n\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>", "committedDate": "2020-06-29T14:38:02Z", "type": "commit"}, {"oid": "3f9b65636059a5bba5b3e2d603fe5b83bc2e122b", "url": "https://github.com/dhis2/dhis2-core/commit/3f9b65636059a5bba5b3e2d603fe5b83bc2e122b", "message": "* Fix PR comments\n\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>", "committedDate": "2020-06-29T14:38:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAzMzU4OQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r447033589", "body": "I think this can be optimized by using `Map<Class, ValidationFunction<T extends TrackerDto>`.", "bodyText": "I think this can be optimized by using Map<Class, ValidationFunction<T extends TrackerDto>.", "bodyHTML": "<p dir=\"auto\">I think this can be optimized by using <code>Map&lt;Class, ValidationFunction&lt;T extends TrackerDto&gt;</code>.</p>", "author": "zubaira", "createdAt": "2020-06-29T14:54:02Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/AbstractTrackerDtoValidationHook.java", "diffHunk": "@@ -0,0 +1,323 @@\n+package org.hisp.dhis.tracker.validation.hooks;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import com.vividsolutions.jts.geom.Geometry;\n+import org.apache.commons.lang3.StringUtils;\n+import org.hisp.dhis.common.CodeGenerator;\n+import org.hisp.dhis.common.ValueType;\n+import org.hisp.dhis.organisationunit.FeatureType;\n+import org.hisp.dhis.organisationunit.OrganisationUnit;\n+import org.hisp.dhis.trackedentity.TrackedEntityAttribute;\n+import org.hisp.dhis.trackedentity.TrackedEntityAttributeService;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+import org.hisp.dhis.trackedentitycomment.TrackedEntityCommentService;\n+import org.hisp.dhis.tracker.TrackerImportStrategy;\n+import org.hisp.dhis.tracker.bundle.TrackerBundle;\n+import org.hisp.dhis.tracker.domain.Attribute;\n+import org.hisp.dhis.tracker.domain.Enrollment;\n+import org.hisp.dhis.tracker.domain.Event;\n+import org.hisp.dhis.tracker.domain.Note;\n+import org.hisp.dhis.tracker.domain.TrackedEntity;\n+import org.hisp.dhis.tracker.domain.TrackerDto;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.TrackerErrorReport;\n+import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n+import org.hisp.dhis.tracker.validation.TrackerImportValidationContext;\n+import org.hisp.dhis.tracker.validation.TrackerValidationHook;\n+import org.hisp.dhis.util.DateUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.Ordered;\n+\n+import java.util.Date;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Objects;\n+\n+import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n+import static org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors.ATTRIBUTE_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors.DATE_STRING_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors.GEOMETRY_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors.TRACKED_ENTITY_ATTRIBUTE_CANT_BE_NULL;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+public abstract class AbstractTrackerDtoValidationHook\n+    implements TrackerValidationHook\n+{\n+    private int order = Ordered.LOWEST_PRECEDENCE;\n+\n+    @Override\n+    public int getOrder()\n+    {\n+        return order;\n+    }\n+\n+    public void setOrder( int order )\n+    {\n+        this.order = order;\n+    }\n+\n+    public static final String IMPLEMENTING_CLASS_FAIL_TO_OVERRIDE_THIS_METHOD = \"Implementing class fail to override this method!\";\n+\n+    @Autowired\n+    protected TrackedEntityAttributeService teAttrService;\n+\n+    @Autowired\n+    private TrackedEntityCommentService commentService;\n+\n+    private final TrackerImportStrategy strategy;\n+\n+    private final boolean removeOnError;\n+\n+    private final Class<?> dtoTypeClass;\n+\n+    public AbstractTrackerDtoValidationHook()\n+    {\n+        this.removeOnError = true;\n+        this.dtoTypeClass = null;\n+        this.strategy = null;\n+    }\n+\n+    public <T extends TrackerDto> AbstractTrackerDtoValidationHook( Class<T> dtoClass, TrackerImportStrategy strategy )\n+    {\n+        this.removeOnError = false;\n+        this.dtoTypeClass = dtoClass;\n+        this.strategy = strategy;\n+    }\n+\n+    public void validateEvent( ValidationErrorReporter reporter, Event event )\n+    {\n+        throw new IllegalStateException( IMPLEMENTING_CLASS_FAIL_TO_OVERRIDE_THIS_METHOD );\n+    }\n+\n+    public void validateEnrollment( ValidationErrorReporter reporter, Enrollment enrollment )\n+    {\n+        throw new IllegalStateException( IMPLEMENTING_CLASS_FAIL_TO_OVERRIDE_THIS_METHOD );\n+    }\n+\n+    public void validateTrackedEntity( ValidationErrorReporter reporter, TrackedEntity tei )\n+    {\n+        throw new IllegalStateException( IMPLEMENTING_CLASS_FAIL_TO_OVERRIDE_THIS_METHOD );\n+    }\n+\n+    @Override\n+    public List<TrackerErrorReport> validate( TrackerImportValidationContext context )\n+    {\n+        TrackerBundle bundle = context.getBundle();\n+\n+        ValidationErrorReporter reporter = new ValidationErrorReporter( context, this.getClass() );\n+\n+        if ( this.strategy != null )\n+        {\n+            TrackerImportStrategy importStrategy = bundle.getImportStrategy();\n+\n+            if ( importStrategy.isDelete() && !this.strategy.isDelete() )\n+            {\n+                return reporter.getReportList();\n+            }\n+        }\n+\n+        if ( dtoTypeClass == null || dtoTypeClass.equals( TrackedEntity.class ) )", "originalCommit": "676b8ac99ef7302321ae87ed2f2f5ab6fef01c1e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA1NTYwNg==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r447055606", "bodyText": "Hi, I don't like this method and am very happy to get some tips on how to improve it. I am not quite sure what you mean with the map optimization you mention here. Can you please explain at bit more?", "author": "netroms", "createdAt": "2020-06-29T15:24:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAzMzU4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA5OTIwOQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r447099209", "bodyText": "I have improved a little on it now. I am not sure it was the same as you had in mind :)", "author": "netroms", "createdAt": "2020-06-29T16:28:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAzMzU4OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAxOTk3MA==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r449019970", "bodyText": "yes, that's way better now :)", "author": "zubaira", "createdAt": "2020-07-02T13:55:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAzMzU4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "5a88b9789ef69ff8e77ed519a08a51be23a852b0", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/AbstractTrackerDtoValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/AbstractTrackerDtoValidationHook.java\nindex 79393c3fc5..e6fb34dbe7 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/AbstractTrackerDtoValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/AbstractTrackerDtoValidationHook.java\n", "chunk": "@@ -135,50 +161,64 @@ public abstract class AbstractTrackerDtoValidationHook\n \n         ValidationErrorReporter reporter = new ValidationErrorReporter( context, this.getClass() );\n \n+        // If this hook impl. has no strategy set, i.e. (strategy == null)\n+        // it implies it is for all strategies; create/update/delete\n         if ( this.strategy != null )\n         {\n             TrackerImportStrategy importStrategy = bundle.getImportStrategy();\n-\n+            // If there is a strategy set and it is not delete and the importing strategy is delete,\n+            // just return as there is nothing to validate.\n             if ( importStrategy.isDelete() && !this.strategy.isDelete() )\n             {\n                 return reporter.getReportList();\n             }\n         }\n \n-        if ( dtoTypeClass == null || dtoTypeClass.equals( TrackedEntity.class ) )\n-        {\n-            validateTrackerDTOs( reporter, ( o, r ) -> validateTrackedEntity( r, o ),\n-                bundle.getTrackedEntities() );\n-        }\n-\n-        if ( dtoTypeClass == null || dtoTypeClass.equals( Enrollment.class ) )\n+        // Setup all the mapping between validation methods and entity lists and dto classes.\n+        Map<Class<? extends TrackerDto>,\n+            Pair<ValidationFunction<TrackerDto>,\n+                List<? extends TrackerDto>>> allValidations = ImmutableMap.of(\n+            TrackedEntity.class, Pair.of( ( o, r ) ->\n+                validateTrackedEntity( r, (TrackedEntity) o ), bundle.getTrackedEntities() ),\n+            Enrollment.class, Pair.of( ( o, r ) ->\n+                validateEnrollment( r, (Enrollment) o ), bundle.getEnrollments() ),\n+            Event.class, Pair.of( ( o, r ) ->\n+                validateEvent( r, (Event) o ), bundle.getEvents() ) );\n+\n+        // If no dtoTypeClass is set, we will validate all types of entities in bundle\n+        // i.e. that impl. hook is meant for all types.\n+        if ( dtoTypeClass == null )\n         {\n-            validateTrackerDTOs( reporter, ( o, r ) -> validateEnrollment( r, o ), bundle.getEnrollments() );\n+            allValidations.forEach( ( dtoClass, validationMethod ) ->\n+                validateTrackerDTOs( reporter, validationMethod ) );\n         }\n-\n-        if ( dtoTypeClass == null || dtoTypeClass.equals( Event.class ) )\n+        else\n         {\n-            validateTrackerDTOs( reporter, ( o, r ) -> validateEvent( r, o ), bundle.getEvents() );\n+            // If not dtoTypeClass == null, this hook class is run for one specific dto class only\n+            validateTrackerDTOs( reporter, allValidations.get( dtoTypeClass ) );\n         }\n \n         return reporter.getReportList();\n     }\n \n-    public <T extends TrackerDto> void validateTrackerDTOs( ValidationErrorReporter reporter,\n-        ValidationFunction<T> function, List<T> dtoInstances )\n+    private <T extends TrackerDto> void validateTrackerDTOs( ValidationErrorReporter reporter,\n+        Pair<ValidationFunction<TrackerDto>, List<? extends TrackerDto>> pair )\n     {\n-        Iterator<T> iterator = dtoInstances.iterator();\n+        Iterator<? extends TrackerDto> iterator = pair.getRight().iterator();\n \n         while ( iterator.hasNext() )\n         {\n-            T dto = iterator.next();\n+            TrackerDto dto = iterator.next();\n \n             // Fork the report in order to be thread-safe so we can support multi-threaded validation in future.\n             // Iterator needs to be changed to split variant also...\n             ValidationErrorReporter reportFork = reporter.fork( dto );\n \n-            function.validateTrackerDto( dto, reportFork );\n+            pair.getLeft().validateTrackerDto( dto, reportFork );\n \n+            // Remove entity that failed validation from the list, i.e. it\n+            // will not be validated on next hook since it has already failed and can't be used for next \"level\" of hooks.\n+            // This feature is used in the prehooks.\n             if ( this.removeOnError && reportFork.hasErrors() )\n             {\n                 iterator.remove();\n", "next_change": null}]}, "revised_code_in_main": {"commit": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/AbstractTrackerDtoValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/AbstractTrackerDtoValidationHook.java\nindex 79393c3fc5..50e7d4ec43 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/AbstractTrackerDtoValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/AbstractTrackerDtoValidationHook.java\n", "chunk": "@@ -135,50 +183,64 @@ public abstract class AbstractTrackerDtoValidationHook\n \n         ValidationErrorReporter reporter = new ValidationErrorReporter( context, this.getClass() );\n \n+        // If this hook impl. has no strategy set, i.e. (strategy == null)\n+        // it implies it is for all strategies; create/update/delete\n         if ( this.strategy != null )\n         {\n             TrackerImportStrategy importStrategy = bundle.getImportStrategy();\n-\n+            // If there is a strategy set and it is not delete and the importing strategy is delete,\n+            // just return as there is nothing to validate.\n             if ( importStrategy.isDelete() && !this.strategy.isDelete() )\n             {\n                 return reporter.getReportList();\n             }\n         }\n \n-        if ( dtoTypeClass == null || dtoTypeClass.equals( TrackedEntity.class ) )\n+        // Setup all the mapping between validation methods and entity lists and dto classes.\n+        Map<Class<? extends TrackerDto>,\n+            Pair<ValidationFunction<TrackerDto>,\n+                List<? extends TrackerDto>>> allValidations = ImmutableMap.of(\n+            TrackedEntity.class, Pair.of( ( o, r ) ->\n+                validateTrackedEntity( r, (TrackedEntity) o ), bundle.getTrackedEntities() ),\n+            Enrollment.class, Pair.of( ( o, r ) ->\n+                validateEnrollment( r, (Enrollment) o ), bundle.getEnrollments() ),\n+            Event.class, Pair.of( ( o, r ) ->\n+                validateEvent( r, (Event) o ), bundle.getEvents() ) );\n+\n+        // If no dtoTypeClass is set, we will validate all types of entities in bundle\n+        // i.e. that impl. hook is meant for all types.\n+        if ( dtoTypeClass == null )\n         {\n-            validateTrackerDTOs( reporter, ( o, r ) -> validateTrackedEntity( r, o ),\n-                bundle.getTrackedEntities() );\n+            allValidations.forEach( ( dtoClass, validationMethod ) ->\n+                validateTrackerDTOs( reporter, validationMethod ) );\n         }\n-\n-        if ( dtoTypeClass == null || dtoTypeClass.equals( Enrollment.class ) )\n-        {\n-            validateTrackerDTOs( reporter, ( o, r ) -> validateEnrollment( r, o ), bundle.getEnrollments() );\n-        }\n-\n-        if ( dtoTypeClass == null || dtoTypeClass.equals( Event.class ) )\n+        else\n         {\n-            validateTrackerDTOs( reporter, ( o, r ) -> validateEvent( r, o ), bundle.getEvents() );\n+            // If not dtoTypeClass == null, this hook class is run for one specific dto class only\n+            validateTrackerDTOs( reporter, allValidations.get( dtoTypeClass ) );\n         }\n \n         return reporter.getReportList();\n     }\n \n-    public <T extends TrackerDto> void validateTrackerDTOs( ValidationErrorReporter reporter,\n-        ValidationFunction<T> function, List<T> dtoInstances )\n+    private void validateTrackerDTOs( ValidationErrorReporter reporter,\n+        Pair<ValidationFunction<TrackerDto>, List<? extends TrackerDto>> pair )\n     {\n-        Iterator<T> iterator = dtoInstances.iterator();\n+        Iterator<? extends TrackerDto> iterator = pair.getRight().iterator();\n \n         while ( iterator.hasNext() )\n         {\n-            T dto = iterator.next();\n+            TrackerDto dto = iterator.next();\n \n             // Fork the report in order to be thread-safe so we can support multi-threaded validation in future.\n             // Iterator needs to be changed to split variant also...\n             ValidationErrorReporter reportFork = reporter.fork( dto );\n \n-            function.validateTrackerDto( dto, reportFork );\n+            pair.getLeft().validateTrackerDto( dto, reportFork );\n \n+            // Remove entity that failed validation from the list, i.e. it\n+            // will not be validated on next hook since it has already failed and can't be used for next \"level\" of hooks.\n+            // This feature is used in the prehooks.\n             if ( this.removeOnError && reportFork.hasErrors() )\n             {\n                 iterator.remove();\n", "next_change": {"commit": "b010ab69f5dfb7b5ea0a5cfd438c1d7ebf3275de", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/AbstractTrackerDtoValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/AbstractTrackerDtoValidationHook.java\nindex 50e7d4ec43..bb78ab074d 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/AbstractTrackerDtoValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/AbstractTrackerDtoValidationHook.java\n", "chunk": "@@ -243,11 +243,13 @@ public abstract class AbstractTrackerDtoValidationHook\n             // This feature is used in the prehooks.\n             if ( this.removeOnError && reportFork.hasErrors() )\n             {\n+                dtoWithErrors.add( dto );\n                 iterator.remove();\n             }\n \n             reporter.merge( reportFork );\n         }\n+        return dtoWithErrors;\n     }\n \n     protected void validateAttrValueType( ValidationErrorReporter errorReporter, Attribute attr,\n", "next_change": {"commit": "0bf55d776481f6511e5f9ebca5de1f2cf79777c0", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/AbstractTrackerDtoValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/AbstractTrackerDtoValidationHook.java\nindex bb78ab074d..bfbf1b820c 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/AbstractTrackerDtoValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/AbstractTrackerDtoValidationHook.java\n", "chunk": "@@ -175,152 +179,94 @@ public abstract class AbstractTrackerDtoValidationHook\n     {\n         TrackerBundle bundle = context.getBundle();\n \n-        ValidationErrorReporter reporter = new ValidationErrorReporter( context, this.getClass() );\n+        ValidationErrorReporter rootReporter = ValidationErrorReporter.emptyReporter();\n \n         // If this hook impl. has no strategy set, i.e. (strategy == null)\n         // it implies it is for all strategies; create/update/delete\n         if ( this.strategy != null )\n         {\n             TrackerImportStrategy importStrategy = bundle.getImportStrategy();\n-            // If there is a strategy set and it is not delete and the importing strategy is delete,\n+            // If there is a strategy set and it is not delete and the importing strategy is\n+            // delete,\n             // just return as there is nothing to validate.\n             if ( importStrategy.isDelete() && !this.strategy.isDelete() )\n             {\n-                return reporter;\n+                return rootReporter;\n             }\n         }\n \n-        // @formatter:off\n-        // Setup all the mapping between validation methods and entity lists and dto classes.\n-        Map<Class<? extends TrackerDto>,\n-            Pair<ValidationFunction<TrackerDto>,\n-                List<? extends TrackerDto>>> allValidations = ImmutableMap.of(\n-            TrackedEntity.class, Pair.of( ( o, r ) ->\n-                validateTrackedEntity( r, (TrackedEntity) o ), bundle.getTrackedEntities() ),\n-            Enrollment.class, Pair.of( ( o, r ) ->\n-                validateEnrollment( r, (Enrollment) o ), bundle.getEnrollments() ),\n-            Event.class, Pair.of( ( o, r ) ->\n-                validateEvent( r, (Event) o ), bundle.getEvents() ),\n-            Relationship.class, Pair.of( ( o, r ) -> \n-                validateRelationship( r, (Relationship) o ), bundle.getRelationships() ) );\n-        // @formatter:on\n-\n-        // If no dtoTypeClass is set, we will validate all types of entities in bundle\n-        // i.e. that impl. hook is meant for all types.\n-        if ( dtoTypeClass == null )\n-        {\n-            allValidations.forEach( ( dtoClass, validationMethod ) ->\n-            reporter.addDtosWithErrors( validateTrackerDTOs( reporter, validationMethod ) ) );\n-        }\n-        else\n-        {\n-            // If not dtoTypeClass == null, this hook class is run for one specific dto class only\n-            reporter.addDtosWithErrors( validateTrackerDTOs( reporter, allValidations.get( dtoTypeClass ) ) );\n-        }\n+        /*\n+         * Validate the bundle, by passing each Tracker entities collection to the\n+         * validation hooks. If a validation hook reports errors and has\n+         * 'removeOnError=true' the Tracker entity under validation will be removed from\n+         * the bundle.\n+         */\n \n-        return reporter;\n+        validateTrackedEntities( bundle, rootReporter, context );\n+        validateEnrollments( bundle, rootReporter, context );\n+        validateEvents( bundle, rootReporter, context );\n+        validateRelationships( bundle, rootReporter, context );\n+\n+        return rootReporter;\n     }\n \n-    private List<TrackerDto> validateTrackerDTOs( ValidationErrorReporter reporter,\n-        Pair<ValidationFunction<TrackerDto>, List<? extends TrackerDto>> pair )\n+    private void validateTrackedEntities( TrackerBundle bundle, ValidationErrorReporter rootReporter,\n+        TrackerImportValidationContext context )\n     {\n-        List<TrackerDto> dtoWithErrors = Lists.newArrayList();\n-\n-        Iterator<? extends TrackerDto> iterator = pair.getRight().iterator();\n-\n-        while ( iterator.hasNext() )\n+        Iterator<TrackedEntity> iter = bundle.getTrackedEntities().iterator();\n+        while ( iter.hasNext() )\n         {\n-            TrackerDto dto = iterator.next();\n-\n-            // Fork the report in order to be thread-safe so we can support multi-threaded validation in future.\n-            // Iterator needs to be changed to split variant also...\n-            ValidationErrorReporter reportFork = reporter.fork( dto );\n-\n-            pair.getLeft().validateTrackerDto( dto, reportFork );\n-\n-            // Remove entity that failed validation from the list, i.e. it\n-            // will not be validated on next hook since it has already failed and can't be used for next \"level\" of hooks.\n-            // This feature is used in the prehooks.\n-            if ( this.removeOnError && reportFork.hasErrors() )\n+            TrackedEntity tei = iter.next();\n+            rootReporter.merge( validateTrackedEntity( rootReporter.getInvalidDTOs(), context, tei ) );\n+            if ( removeOnError() && rootReporter.isInvalid( TrackerType.TRACKED_ENTITY, tei.getTrackedEntity() ) )\n             {\n-                dtoWithErrors.add( dto );\n-                iterator.remove();\n+                iter.remove();\n             }\n-\n-            reporter.merge( reportFork );\n         }\n-        return dtoWithErrors;\n     }\n \n-    protected void validateAttrValueType( ValidationErrorReporter errorReporter, Attribute attr,\n-        TrackedEntityAttribute teAttr )\n+    private void validateEnrollments( TrackerBundle bundle, ValidationErrorReporter rootReporter,\n+        TrackerImportValidationContext context )\n     {\n-        checkNotNull( attr, ATTRIBUTE_CANT_BE_NULL );\n-        checkNotNull( attr, ATTRIBUTE_CANT_BE_NULL );\n-        checkNotNull( teAttr, TRACKED_ENTITY_ATTRIBUTE_CANT_BE_NULL );\n-\n-        String error;\n-\n-        // We need to do try/catch here since validateValueType() since validateValueType can cast IllegalArgumentException e.g.\n-        // on at org.joda.time.format.DateTimeFormatter.parseDateTime(DateTimeFormatter.java:945)\n-        try\n+        Iterator<Enrollment> iterPs = bundle.getEnrollments().iterator();\n+        while ( iterPs.hasNext() )\n         {\n-            error = teAttrService.validateValueType( teAttr, attr.getValue() );\n-        }\n-        catch ( Exception e )\n-        {\n-            error = e.getMessage();\n-        }\n-\n-        if ( error != null )\n-        {\n-            ValueType valueType = teAttr.getValueType();\n-            errorReporter.addError( newReport( TrackerErrorCode.E1007 )\n-                .addArg( valueType.toString() )\n-                .addArg( error ) );\n+            Enrollment ps = iterPs.next();\n+            rootReporter.merge( validateEnrollment( rootReporter.getInvalidDTOs(), context, ps ) );\n+            if ( removeOnError() && rootReporter.isInvalid( TrackerType.ENROLLMENT, ps.getEnrollment() ) )\n+            {\n+                iterPs.remove();\n+            }\n         }\n     }\n \n-    protected void validateAttributeUniqueness( ValidationErrorReporter errorReporter,\n-        String value,\n-        TrackedEntityAttribute trackedEntityAttribute,\n-        TrackedEntityInstance trackedEntityInstanceUid,\n-        OrganisationUnit organisationUnit )\n+    private void validateEvents( TrackerBundle bundle, ValidationErrorReporter rootReporter,\n+        TrackerImportValidationContext context )\n     {\n-        checkNotNull( trackedEntityAttribute, TRACKED_ENTITY_ATTRIBUTE_CANT_BE_NULL );\n-\n-        if ( Boolean.FALSE.equals( trackedEntityAttribute.isUnique() ) )\n-            return;\n-\n-        String error = teAttrService.validateAttributeUniquenessWithinScope(\n-            trackedEntityAttribute,\n-            value,\n-            trackedEntityInstanceUid,\n-            organisationUnit );\n-\n-        if ( error != null )\n+        Iterator<Event> iterPsi = bundle.getEvents().iterator();\n+        while ( iterPsi.hasNext() )\n         {\n-            errorReporter.addError( newReport( TrackerErrorCode.E1064 )\n-                .addArg( error ) );\n+            Event psi = iterPsi.next();\n+            rootReporter.merge( validateEvent( rootReporter.getInvalidDTOs(), context, psi ) );\n+            if ( removeOnError() && rootReporter.isInvalid( TrackerType.EVENT, psi.getEvent() ) )\n+            {\n+                iterPsi.remove();\n+            }\n         }\n     }\n \n-    protected void validateGeometry( ValidationErrorReporter errorReporter, Geometry geometry, FeatureType featureType )\n+    private void validateRelationships( TrackerBundle bundle, ValidationErrorReporter rootReporter,\n+        TrackerImportValidationContext context )\n     {\n-        checkNotNull( geometry, GEOMETRY_CANT_BE_NULL );\n-\n-        if ( featureType == null )\n-        {\n-            errorReporter.addError( newReport( TrackerErrorCode.E1074 ) );\n-            return;\n-        }\n-\n-        FeatureType typeFromName = FeatureType.getTypeFromName( geometry.getGeometryType() );\n-\n-        if ( FeatureType.NONE == featureType || featureType != typeFromName )\n+        Iterator<Relationship> iterRel = bundle.getRelationships().iterator();\n+        while ( iterRel.hasNext() )\n         {\n-            errorReporter.addError( newReport( TrackerErrorCode.E1012 )\n-                .addArg( featureType.name() ) );\n+            Relationship rel = iterRel.next();\n+            rootReporter.merge( validateRelationship( rootReporter.getInvalidDTOs(), context, rel ) );\n+            if ( removeOnError() && rootReporter.isInvalid( TrackerType.RELATIONSHIP, rel.getRelationship() ) )\n+            {\n+                iterRel.remove();\n+            }\n         }\n     }\n \n", "next_change": {"commit": "338a47b053533e7c4021c3be94852d5b29e79a19", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/AbstractTrackerDtoValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/AbstractTrackerDtoValidationHook.java\nindex bfbf1b820c..f2440c1808 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/AbstractTrackerDtoValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/AbstractTrackerDtoValidationHook.java\n", "chunk": "@@ -202,68 +200,72 @@ public abstract class AbstractTrackerDtoValidationHook\n          * the bundle.\n          */\n \n-        validateTrackedEntities( bundle, rootReporter, context );\n-        validateEnrollments( bundle, rootReporter, context );\n-        validateEvents( bundle, rootReporter, context );\n-        validateRelationships( bundle, rootReporter, context );\n+        validateTrackedEntities( bundle, context );\n+        validateEnrollments( bundle, context );\n+        validateEvents( bundle, context );\n+        validateRelationships( bundle, context );\n \n         return rootReporter;\n     }\n \n-    private void validateTrackedEntities( TrackerBundle bundle, ValidationErrorReporter rootReporter,\n+    private void validateTrackedEntities( TrackerBundle bundle,\n         TrackerImportValidationContext context )\n     {\n         Iterator<TrackedEntity> iter = bundle.getTrackedEntities().iterator();\n         while ( iter.hasNext() )\n         {\n             TrackedEntity tei = iter.next();\n-            rootReporter.merge( validateTrackedEntity( rootReporter.getInvalidDTOs(), context, tei ) );\n-            if ( removeOnError() && rootReporter.isInvalid( TrackerType.TRACKED_ENTITY, tei.getTrackedEntity() ) )\n+            final ValidationErrorReporter reporter = validateTrackedEntity( context, tei );\n+            context.getRootReporter().merge( reporter );\n+            if ( removeOnError() && didNotPassValidation( reporter, tei.getTrackedEntity() ) )\n             {\n                 iter.remove();\n             }\n         }\n     }\n-\n-    private void validateEnrollments( TrackerBundle bundle, ValidationErrorReporter rootReporter,\n+    \n+    private void validateEnrollments( TrackerBundle bundle,\n         TrackerImportValidationContext context )\n     {\n         Iterator<Enrollment> iterPs = bundle.getEnrollments().iterator();\n         while ( iterPs.hasNext() )\n         {\n             Enrollment ps = iterPs.next();\n-            rootReporter.merge( validateEnrollment( rootReporter.getInvalidDTOs(), context, ps ) );\n-            if ( removeOnError() && rootReporter.isInvalid( TrackerType.ENROLLMENT, ps.getEnrollment() ) )\n+            final ValidationErrorReporter reporter = validateEnrollment(context, ps);\n+            context.getRootReporter().merge( reporter );\n+            if ( removeOnError() && didNotPassValidation( reporter, ps.getEnrollment() ) )\n             {\n                 iterPs.remove();\n             }\n         }\n     }\n \n-    private void validateEvents( TrackerBundle bundle, ValidationErrorReporter rootReporter,\n+    private void validateEvents( TrackerBundle bundle,\n         TrackerImportValidationContext context )\n     {\n         Iterator<Event> iterPsi = bundle.getEvents().iterator();\n         while ( iterPsi.hasNext() )\n         {\n             Event psi = iterPsi.next();\n-            rootReporter.merge( validateEvent( rootReporter.getInvalidDTOs(), context, psi ) );\n-            if ( removeOnError() && rootReporter.isInvalid( TrackerType.EVENT, psi.getEvent() ) )\n+            final ValidationErrorReporter reporter = validateEvent( context, psi );\n+            context.getRootReporter().merge( reporter );\n+            if ( removeOnError() && didNotPassValidation( reporter, psi.getEvent() ) )\n             {\n                 iterPsi.remove();\n             }\n         }\n     }\n \n-    private void validateRelationships( TrackerBundle bundle, ValidationErrorReporter rootReporter,\n+    private void validateRelationships( TrackerBundle bundle,\n         TrackerImportValidationContext context )\n     {\n         Iterator<Relationship> iterRel = bundle.getRelationships().iterator();\n         while ( iterRel.hasNext() )\n         {\n             Relationship rel = iterRel.next();\n-            rootReporter.merge( validateRelationship( rootReporter.getInvalidDTOs(), context, rel ) );\n-            if ( removeOnError() && rootReporter.isInvalid( TrackerType.RELATIONSHIP, rel.getRelationship() ) )\n+            final ValidationErrorReporter reporter = validateRelationship( context, rel );\n+            context.getRootReporter().merge( reporter );\n+            if ( removeOnError() && didNotPassValidation( reporter, rel.getRelationship() ) )\n             {\n                 iterRel.remove();\n             }\n", "next_change": {"commit": "20dfefe359779d7e1c1921ba920465227e72f071", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/AbstractTrackerDtoValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/AbstractTrackerDtoValidationHook.java\nindex f2440c1808..a774e92e65 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/AbstractTrackerDtoValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/AbstractTrackerDtoValidationHook.java\n", "chunk": "@@ -177,99 +155,47 @@ public abstract class AbstractTrackerDtoValidationHook\n     {\n         TrackerBundle bundle = context.getBundle();\n \n-        ValidationErrorReporter rootReporter = context.getRootReporter();\n-\n-        // If this hook impl. has no strategy set, i.e. (strategy == null)\n-        // it implies it is for all strategies; create/update/delete\n-        if ( this.strategy != null )\n-        {\n-            TrackerImportStrategy importStrategy = bundle.getImportStrategy();\n-            // If there is a strategy set and it is not delete and the importing strategy is\n-            // delete,\n-            // just return as there is nothing to validate.\n-            if ( importStrategy.isDelete() && !this.strategy.isDelete() )\n-            {\n-                return rootReporter;\n-            }\n-        }\n-\n         /*\n-         * Validate the bundle, by passing each Tracker entities collection to the\n-         * validation hooks. If a validation hook reports errors and has\n-         * 'removeOnError=true' the Tracker entity under validation will be removed from\n-         * the bundle.\n+         * Validate the bundle, by passing each Tracker entities collection to\n+         * the validation hooks. If a validation hook reports errors and has\n+         * 'removeOnError=true' the Tracker entity under validation will be\n+         * removed from the bundle.\n          */\n \n-        validateTrackedEntities( bundle, context );\n-        validateEnrollments( bundle, context );\n-        validateEvents( bundle, context );\n-        validateRelationships( bundle, context );\n+        validateTrackerDtos( context, bundle.getTrackedEntities(), TrackerType.TRACKED_ENTITY );\n+        validateTrackerDtos( context, bundle.getEnrollments(), TrackerType.ENROLLMENT );\n+        validateTrackerDtos( context, bundle.getEvents(), TrackerType.EVENT );\n+        validateTrackerDtos( context, bundle.getRelationships(), TrackerType.RELATIONSHIP );\n \n-        return rootReporter;\n+        return context.getRootReporter();\n     }\n \n-    private void validateTrackedEntities( TrackerBundle bundle,\n-        TrackerImportValidationContext context )\n+    private void validateTrackerDtos( TrackerImportValidationContext context, List<? extends TrackerDto> dtos,\n+        TrackerType trackerType )\n     {\n-        Iterator<TrackedEntity> iter = bundle.getTrackedEntities().iterator();\n+        Iterator<? extends TrackerDto> iter = dtos.iterator();\n         while ( iter.hasNext() )\n         {\n-            TrackedEntity tei = iter.next();\n-            final ValidationErrorReporter reporter = validateTrackedEntity( context, tei );\n-            context.getRootReporter().merge( reporter );\n-            if ( removeOnError() && didNotPassValidation( reporter, tei.getTrackedEntity() ) )\n-            {\n-                iter.remove();\n-            }\n-        }\n-    }\n-    \n-    private void validateEnrollments( TrackerBundle bundle,\n-        TrackerImportValidationContext context )\n-    {\n-        Iterator<Enrollment> iterPs = bundle.getEnrollments().iterator();\n-        while ( iterPs.hasNext() )\n-        {\n-            Enrollment ps = iterPs.next();\n-            final ValidationErrorReporter reporter = validateEnrollment(context, ps);\n-            context.getRootReporter().merge( reporter );\n-            if ( removeOnError() && didNotPassValidation( reporter, ps.getEnrollment() ) )\n-            {\n-                iterPs.remove();\n-            }\n-        }\n-    }\n-\n-    private void validateEvents( TrackerBundle bundle,\n-        TrackerImportValidationContext context )\n-    {\n-        Iterator<Event> iterPsi = bundle.getEvents().iterator();\n-        while ( iterPsi.hasNext() )\n-        {\n-            Event psi = iterPsi.next();\n-            final ValidationErrorReporter reporter = validateEvent( context, psi );\n-            context.getRootReporter().merge( reporter );\n-            if ( removeOnError() && didNotPassValidation( reporter, psi.getEvent() ) )\n+            TrackerDto dto = iter.next();\n+            if ( needsToRun( context.getStrategy( dto, trackerType ) ) )\n             {\n-                iterPsi.remove();\n+                final ValidationErrorReporter reporter = validateTrackerDto( context, dto, trackerType );\n+                context.getRootReporter().merge( reporter );\n+                if ( removeOnError() && didNotPassValidation( reporter, dto.getUid() ) )\n+                {\n+                    iter.remove();\n+                }\n             }\n         }\n     }\n \n-    private void validateRelationships( TrackerBundle bundle,\n-        TrackerImportValidationContext context )\n+    private ValidationErrorReporter validateTrackerDto(\n+        TrackerImportValidationContext context, TrackerDto dto, TrackerType trackerType )\n     {\n-        Iterator<Relationship> iterRel = bundle.getRelationships().iterator();\n-        while ( iterRel.hasNext() )\n-        {\n-            Relationship rel = iterRel.next();\n-            final ValidationErrorReporter reporter = validateRelationship( context, rel );\n-            context.getRootReporter().merge( reporter );\n-            if ( removeOnError() && didNotPassValidation( reporter, rel.getRelationship() ) )\n-            {\n-                iterRel.remove();\n-            }\n-        }\n+        ValidationErrorReporter reporter = new ValidationErrorReporter( context, dto, trackerType );\n+        reporter.getInvalidDTOs().putAll( context.getRootReporter().getInvalidDTOs() );\n+        validationMap.get( trackerType ).accept( reporter, dto );\n+        return reporter;\n     }\n \n     public boolean isNotValidDateString( String dateString )\n", "next_change": {"commit": "fe04922e144ac69367a99840d5518edda2d67f38", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/AbstractTrackerDtoValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/AbstractTrackerDtoValidationHook.java\nindex a774e92e65..5ed86efb19 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/AbstractTrackerDtoValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/AbstractTrackerDtoValidationHook.java\n", "chunk": "@@ -190,11 +189,11 @@ public abstract class AbstractTrackerDtoValidationHook\n     }\n \n     private ValidationErrorReporter validateTrackerDto(\n-        TrackerImportValidationContext context, TrackerDto dto, TrackerType trackerType )\n+        TrackerImportValidationContext context, TrackerDto dto )\n     {\n-        ValidationErrorReporter reporter = new ValidationErrorReporter( context, dto, trackerType );\n+        ValidationErrorReporter reporter = new ValidationErrorReporter( context, dto, dto.getTrackerType() );\n         reporter.getInvalidDTOs().putAll( context.getRootReporter().getInvalidDTOs() );\n-        validationMap.get( trackerType ).accept( reporter, dto );\n+        validationMap.get( dto.getTrackerType() ).accept( reporter, dto );\n         return reporter;\n     }\n \n", "next_change": {"commit": "8bd63f9823397e39458bd1cdab383c33c3231019", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/AbstractTrackerDtoValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/AbstractTrackerDtoValidationHook.java\nindex 5ed86efb19..60d034e8c4 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/AbstractTrackerDtoValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/AbstractTrackerDtoValidationHook.java\n", "chunk": "@@ -197,13 +187,6 @@ public abstract class AbstractTrackerDtoValidationHook\n         return reporter;\n     }\n \n-    public boolean isNotValidDateString( String dateString )\n-    {\n-        checkNotNull( dateString, DATE_STRING_CANT_BE_NULL );\n-\n-        return !DateUtils.dateIsValid( dateString );\n-    }\n-\n     protected void addError( ValidationErrorReporter report, TrackerErrorCode errorCode, Object... args )\n     {\n         report.addError( newReport( errorCode ).addArgs( args ) );\n", "next_change": {"commit": "97fa18701761c6993e20f2e7a3816ea689129480", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/AbstractTrackerDtoValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/AbstractTrackerDtoValidationHook.java\nindex 60d034e8c4..18a097dadd 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/AbstractTrackerDtoValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/AbstractTrackerDtoValidationHook.java\n", "chunk": "@@ -178,40 +175,46 @@ public abstract class AbstractTrackerDtoValidationHook\n         }\n     }\n \n-    private ValidationErrorReporter validateTrackerDto(\n-        TrackerImportValidationContext context, TrackerDto dto )\n-    {\n-        ValidationErrorReporter reporter = new ValidationErrorReporter( context, dto, dto.getTrackerType() );\n-        reporter.getInvalidDTOs().putAll( context.getRootReporter().getInvalidDTOs() );\n-        validationMap.get( dto.getTrackerType() ).accept( reporter, dto );\n-        return reporter;\n-    }\n-\n-    protected void addError( ValidationErrorReporter report, TrackerErrorCode errorCode, Object... args )\n+    protected void addError( ValidationErrorReporter report, TrackerDto dto, TrackerErrorCode code,\n+        Object... args )\n     {\n-        report.addError( newReport( errorCode ).addArgs( args ) );\n+        TrackerErrorReport error = TrackerErrorReport.builder()\n+            .uid( dto.getUid() )\n+            .trackerType( dto.getTrackerType() )\n+            .errorCode( code )\n+            .addArgs( args )\n+            .build( report.getValidationContext().getBundle() );\n+        report.addError( error );\n     }\n \n-    protected void addWarning( ValidationErrorReporter report, TrackerErrorCode errorCode, Object... args )\n+    protected void addWarning( ValidationErrorReporter report, TrackerDto dto, TrackerErrorCode code,\n+        Object... args )\n     {\n-        report.addWarning( newWarningReport( errorCode ).addArgs( args ) );\n+        TrackerWarningReport warn = TrackerWarningReport.builder()\n+            .uid( dto.getUid() )\n+            .trackerType( dto.getTrackerType() )\n+            .warningCode( code )\n+            .addArgs( args )\n+            .build( report.getValidationContext().getBundle() );\n+        report.addWarning( warn );\n     }\n \n-    protected void addErrorIf( Supplier<Boolean> expression, ValidationErrorReporter report, TrackerErrorCode errorCode,\n-        Object... args )\n+    protected void addErrorIf( Supplier<Boolean> expression, ValidationErrorReporter report, TrackerDto dto,\n+        TrackerErrorCode code, Object... args )\n     {\n         if ( expression.get() )\n         {\n-            addError( report, errorCode, args );\n+            addError( report, dto, code, args );\n         }\n     }\n \n-    protected void addErrorIfNull( Object object, ValidationErrorReporter report, TrackerErrorCode errorCode,\n+    protected void addErrorIfNull( Object object, ValidationErrorReporter report, TrackerDto dto,\n+        TrackerErrorCode code,\n         Object... args )\n     {\n         if ( object == null )\n         {\n-            addError( report, errorCode, args );\n+            addError( report, dto, code, args );\n         }\n     }\n \n", "next_change": {"commit": "1d8350a9e9ac100aaaa831894ba3f857b46e2474", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/AbstractTrackerDtoValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/AbstractTrackerDtoValidationHook.java\nindex 18a097dadd..42e94cd581 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/AbstractTrackerDtoValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/AbstractTrackerDtoValidationHook.java\n", "chunk": "@@ -175,49 +173,6 @@ public abstract class AbstractTrackerDtoValidationHook\n         }\n     }\n \n-    protected void addError( ValidationErrorReporter report, TrackerDto dto, TrackerErrorCode code,\n-        Object... args )\n-    {\n-        TrackerErrorReport error = TrackerErrorReport.builder()\n-            .uid( dto.getUid() )\n-            .trackerType( dto.getTrackerType() )\n-            .errorCode( code )\n-            .addArgs( args )\n-            .build( report.getValidationContext().getBundle() );\n-        report.addError( error );\n-    }\n-\n-    protected void addWarning( ValidationErrorReporter report, TrackerDto dto, TrackerErrorCode code,\n-        Object... args )\n-    {\n-        TrackerWarningReport warn = TrackerWarningReport.builder()\n-            .uid( dto.getUid() )\n-            .trackerType( dto.getTrackerType() )\n-            .warningCode( code )\n-            .addArgs( args )\n-            .build( report.getValidationContext().getBundle() );\n-        report.addWarning( warn );\n-    }\n-\n-    protected void addErrorIf( Supplier<Boolean> expression, ValidationErrorReporter report, TrackerDto dto,\n-        TrackerErrorCode code, Object... args )\n-    {\n-        if ( expression.get() )\n-        {\n-            addError( report, dto, code, args );\n-        }\n-    }\n-\n-    protected void addErrorIfNull( Object object, ValidationErrorReporter report, TrackerDto dto,\n-        TrackerErrorCode code,\n-        Object... args )\n-    {\n-        if ( object == null )\n-        {\n-            addError( report, dto, code, args );\n-        }\n-    }\n-\n     public boolean needsToRun( TrackerImportStrategy strategy )\n     {\n         return strategy != TrackerImportStrategy.DELETE;\n", "next_change": {"commit": "b0a861c0308005b865cafa2344c1231c0a4f2bc3", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/AbstractTrackerDtoValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/AbstractTrackerDtoValidationHook.java\ndeleted file mode 100644\nindex 42e94cd581..0000000000\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/AbstractTrackerDtoValidationHook.java\n+++ /dev/null\n", "chunk": "@@ -1,195 +0,0 @@\n-/*\n- * Copyright (c) 2004-2022, University of Oslo\n- * All rights reserved.\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions are met:\n- * Redistributions of source code must retain the above copyright notice, this\n- * list of conditions and the following disclaimer.\n- *\n- * Redistributions in binary form must reproduce the above copyright notice,\n- * this list of conditions and the following disclaimer in the documentation\n- * and/or other materials provided with the distribution.\n- * Neither the name of the HISP project nor the names of its contributors may\n- * be used to endorse or promote products derived from this software without\n- * specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n- * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n- * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n- * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n- * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n- * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n- * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- */\n-package org.hisp.dhis.tracker.validation.hooks;\n-\n-import static org.hisp.dhis.tracker.report.TrackerErrorCode.E1125;\n-\n-import java.util.Iterator;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Objects;\n-import java.util.Optional;\n-import java.util.function.BiConsumer;\n-import java.util.stream.Collectors;\n-\n-import org.hisp.dhis.common.ValueTypedDimensionalItemObject;\n-import org.hisp.dhis.option.Option;\n-import org.hisp.dhis.tracker.TrackerImportStrategy;\n-import org.hisp.dhis.tracker.TrackerType;\n-import org.hisp.dhis.tracker.bundle.TrackerBundle;\n-import org.hisp.dhis.tracker.domain.Enrollment;\n-import org.hisp.dhis.tracker.domain.Event;\n-import org.hisp.dhis.tracker.domain.Relationship;\n-import org.hisp.dhis.tracker.domain.TrackedEntity;\n-import org.hisp.dhis.tracker.domain.TrackerDto;\n-import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n-import org.hisp.dhis.tracker.validation.TrackerImportValidationContext;\n-import org.hisp.dhis.tracker.validation.TrackerValidationHook;\n-\n-import com.google.common.collect.ImmutableMap;\n-\n-/**\n- * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n- */\n-public abstract class AbstractTrackerDtoValidationHook\n-    implements TrackerValidationHook\n-{\n-    private final Map<TrackerType, BiConsumer<ValidationErrorReporter, TrackerDto>> validationMap = ImmutableMap\n-        .<TrackerType, BiConsumer<ValidationErrorReporter, TrackerDto>> builder()\n-        .put( TrackerType.TRACKED_ENTITY, (( report, dto ) -> validateTrackedEntity( report, (TrackedEntity) dto )) )\n-        .put( TrackerType.ENROLLMENT, (( report, dto ) -> validateEnrollment( report, (Enrollment) dto )) )\n-        .put( TrackerType.EVENT, (( report, dto ) -> validateEvent( report, (Event) dto )) )\n-        .put( TrackerType.RELATIONSHIP, (( report, dto ) -> validateRelationship( report, (Relationship) dto )) )\n-        .build();\n-\n-    /**\n-     * This constructor is used by the PreCheck* hooks\n-     */\n-    public AbstractTrackerDtoValidationHook()\n-    {\n-    }\n-\n-    /**\n-     * Template method Must be implemented if dtoTypeClass == Event or\n-     * dtoTypeClass == null\n-     *\n-     * @param reporter ValidationErrorReporter instance\n-     * @param event entity to validate\n-     */\n-    public void validateEvent( ValidationErrorReporter reporter, Event event )\n-    {\n-    }\n-\n-    /**\n-     * Template method Must be implemented if dtoTypeClass == Enrollment or\n-     * dtoTypeClass == null\n-     *\n-     * @param reporter ValidationErrorReporter instance\n-     * @param enrollment entity to validate\n-     */\n-    public void validateEnrollment( ValidationErrorReporter reporter, Enrollment enrollment )\n-    {\n-    }\n-\n-    /**\n-     * Template method Must be implemented if dtoTypeClass == Relationship or\n-     * dtoTypeClass == null\n-     *\n-     * @param reporter ValidationErrorReporter instance\n-     * @param relationship entity to validate\n-     */\n-    public void validateRelationship( ValidationErrorReporter reporter, Relationship relationship )\n-    {\n-    }\n-\n-    /**\n-     * Template method Must be implemented if dtoTypeClass == TrackedEntity or\n-     * dtoTypeClass == null\n-     *\n-     * @param reporter ValidationErrorReporter instance\n-     * @param tei entity to validate\n-     */\n-    public void validateTrackedEntity( ValidationErrorReporter reporter, TrackedEntity tei )\n-    {\n-    }\n-\n-    protected <T extends ValueTypedDimensionalItemObject> void validateOptionSet( ValidationErrorReporter reporter,\n-        TrackerDto dto,\n-        T optionalObject, String value )\n-    {\n-        Optional.ofNullable( optionalObject.getOptionSet() )\n-            .ifPresent( optionSet -> reporter.addErrorIf(\n-                () -> optionSet.getOptions().stream().filter( Objects::nonNull )\n-                    .noneMatch( o -> o.getCode().equalsIgnoreCase( value ) ),\n-                dto, E1125, value,\n-                optionalObject.getUid(), optionalObject.getClass().getSimpleName(),\n-                optionalObject.getOptionSet().getOptions().stream().filter( Objects::nonNull ).map( Option::getCode )\n-                    .collect( Collectors.joining( \",\" ) ) ) );\n-    }\n-\n-    /**\n-     * Delegating validate method, this delegates validation to the different\n-     * implementing hooks.\n-     *\n-     * @param context validation context\n-     */\n-    @Override\n-    public void validate( ValidationErrorReporter reporter, TrackerImportValidationContext context )\n-    {\n-        TrackerBundle bundle = context.getBundle();\n-        /*\n-         * Validate the bundle, by passing each Tracker entities collection to\n-         * the validation hooks. If a validation hook reports errors and has\n-         * 'removeOnError=true' the Tracker entity under validation will be\n-         * removed from the bundle.\n-         */\n-\n-        validateTrackerDtos( reporter, context, bundle.getTrackedEntities() );\n-        validateTrackerDtos( reporter, context, bundle.getEnrollments() );\n-        validateTrackerDtos( reporter, context, bundle.getEvents() );\n-        validateTrackerDtos( reporter, context, bundle.getRelationships() );\n-    }\n-\n-    private void validateTrackerDtos( ValidationErrorReporter reporter, TrackerImportValidationContext context,\n-        List<? extends TrackerDto> dtos )\n-    {\n-        Iterator<? extends TrackerDto> iter = dtos.iterator();\n-        while ( iter.hasNext() )\n-        {\n-            TrackerDto dto = iter.next();\n-            if ( needsToRun( context.getStrategy( dto ) ) )\n-            {\n-                validationMap.get( dto.getTrackerType() ).accept( reporter, dto );\n-                if ( removeOnError() && didNotPassValidation( reporter, dto.getUid() ) )\n-                {\n-                    iter.remove();\n-                }\n-            }\n-        }\n-    }\n-\n-    public boolean needsToRun( TrackerImportStrategy strategy )\n-    {\n-        return strategy != TrackerImportStrategy.DELETE;\n-    }\n-\n-    /**\n-     * Signal the implementing Validator hook that, upon validation error, the\n-     * Tracker entity under validation must be removed from the payload.\n-     *\n-     */\n-    public boolean removeOnError()\n-    {\n-        return false;\n-    }\n-\n-    private boolean didNotPassValidation( ValidationErrorReporter reporter, String uid )\n-    {\n-        return reporter.getReportList().stream().anyMatch( r -> r.getUid().equals( uid ) );\n-    }\n-}\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "message": "Merge commit", "committedDate": null}, {"oid": "3e3dc98d92f0c13fb56cf17894eab06a78842133", "committedDate": "2020-08-04 17:20:37 +0200", "message": "feat: Enrollment/Events note persistence"}, {"oid": "1ceec15f31457e6ac040081480a9c909a9790c3c", "committedDate": "2020-08-13 15:26:03 +0200", "message": "Fix conflicts with new validation strategy"}, {"oid": "75a02d90ed737ca75d65881e38f2ed1c5f047d45", "committedDate": "2020-08-18 13:38:25 +0200", "message": "[DHIS2-7310] Add support for warnings in error reports"}, {"oid": "b010ab69f5dfb7b5ea0a5cfd438c1d7ebf3275de", "committedDate": "2020-08-24 14:13:32 +0200", "message": "fix: Implement atomic mode OBJECTS to commit only valid DTOs (#5958)"}, {"oid": "cb2ee65c0210c0d4b2bd8851789da8d4adfaf04d", "committedDate": "2020-09-07 10:28:21 +0200", "message": "fix: [DHIS2-9287] Fix the stats in the import summary (#6062)"}, {"oid": "e1260b5e8fceb13c2883754236a34cdd652e1c1c", "committedDate": "2020-10-20 14:00:34 +0200", "message": "refactor: Load in the preheat all the data needed for uniqueness attr\u2026 (#6397)"}, {"oid": "3e3b32e56ff5554a0095396eddffceac65b6b8de", "committedDate": "2020-10-27 09:56:50 +0100", "message": "refactor: simplified calls to error reporting (#6437)"}, {"oid": "d095f2d4cf9aaac1e9aa973d4da6aa2f96104cc8", "committedDate": "2020-11-11 13:49:13 +0100", "message": "fix: allow validation to reference entities in the payload (#6617)"}, {"oid": "abf9ed3867b69117bdd43d6feddf0ce194aa3f73", "committedDate": "2020-11-13 07:37:57 +0100", "message": "feat: Username and OrgUnit valueType preheat suppliers [TECH-452] (#6632)"}, {"oid": "0bf55d776481f6511e5f9ebca5de1f2cf79777c0", "committedDate": "2020-11-19 13:55:46 +0100", "message": "refactor: New Tracker Error reporting refactor (#6706)"}, {"oid": "e063801f23d5aa761a791364c8c82e2d784f8c84", "committedDate": "2020-11-23 09:23:20 +0100", "message": "fix: DHIS2-9894 user assignment is checked through ProgramStage definition (#6720)"}, {"oid": "338a47b053533e7c4021c3be94852d5b29e79a19", "committedDate": "2020-11-23 16:57:54 +0100", "message": "fix: A relationship pointing to an invalid object should not be persisted (#6741)"}, {"oid": "8d19700c67e3da9746531d1dee8bb0b8450c739e", "committedDate": "2020-11-24 11:15:55 +0100", "message": "fix: add validation for tei type on relationship constraint (#6736)"}, {"oid": "3e799d196b8f73ad216ea100a07ddd5f7dfc53e0", "committedDate": "2020-11-30 16:37:14 +0100", "message": "fix: remove long running transaction during Tracker Import (#6782)"}, {"oid": "5e4669b4c89c809989ea600900735dd71baa86e2", "committedDate": "2020-12-23 14:00:18 +0700", "message": "feat: Upgrade Hibernate  (#6939)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "6e8f0d6c150b303d780b397f7646ff3383f16250", "committedDate": "2021-01-21 09:32:50 +0100", "message": "feat: new tracked dto's properties referring to a date, now use Instant instead of String [DHIS2-101239] (#7119)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "c25b817a180f24b3de6b26d5a089563aa336aa8c", "committedDate": "2021-03-05 10:44:25 +0100", "message": "feat: Validation for values with option sets [DHIS2-10452] (#7512)"}, {"oid": "474c3438c06893572d9ee7d2fed71dfac38ca82e", "committedDate": "2021-03-11 13:51:04 +0100", "message": "fix: [DHIS2-10452] option set validation fix_3 : adds option set mapper and e2e tests (#7583)"}, {"oid": "20dfefe359779d7e1c1921ba920465227e72f071", "committedDate": "2021-05-25 12:55:24 +0200", "message": "fix: Remove validations from objects deletion service in new tracker importer [DHIS2-10789] (#8053)"}, {"oid": "7d032be663a1d9444d4bc1dbf3bc20ff0f861ec1", "committedDate": "2021-05-26 16:49:59 +0200", "message": "refactor: Clean up integration tests in the new importer [TECH-589] (#8076)"}, {"oid": "fe04922e144ac69367a99840d5518edda2d67f38", "committedDate": "2021-06-03 08:17:10 +0200", "message": "fix: Make program field read-only in event payload [DHIS2-11225] (#8086)"}, {"oid": "242e8d7cc2a94f328778c2fbad9005509c5b3360", "committedDate": "2021-12-21 13:35:53 +0100", "message": "chore: simplify tracker import validation TECH-880 (#9510)"}, {"oid": "8bd63f9823397e39458bd1cdab383c33c3231019", "committedDate": "2021-12-22 09:32:29 +0100", "message": "chore: move factory methods into class it creates TECH-880 (#9518)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "97fa18701761c6993e20f2e7a3816ea689129480", "committedDate": "2022-01-11 15:31:02 +0100", "message": "chore: hooks should add errors via reporter directly TECH-880 (#9523)"}, {"oid": "1d8350a9e9ac100aaaa831894ba3f857b46e2474", "committedDate": "2022-01-13 14:15:17 +0100", "message": "chore: adding errors and warnings is responsibility of the ValidationErrorReporter TECH-880 (#9616)"}, {"oid": "ef0cbd365e47f1f88befb80d9650cce75280bd35", "committedDate": "2022-03-08 15:12:00 +0100", "message": "chore: move DB access and mutation to preheat and preprocessor DHIS2-12623 (#9904)"}, {"oid": "40eb1423da3f890de73b6748e440c82e817bc028", "committedDate": "2022-04-25 09:21:54 +0200", "message": "fix: OrgUnit valueType validation (#10481)"}, {"oid": "f7cfc83610c75486bbb0457dde057eaed777f3d2", "committedDate": "2022-05-27 15:15:25 +0200", "message": "chore: ValidationErrorReporter does not need the bunlde DHIS2-12519 (#10878)"}, {"oid": "b0a861c0308005b865cafa2344c1231c0a4f2bc3", "committedDate": "2022-12-02 13:36:08 +0100", "message": "fix: turn removeOnError into skipOnError DHIS2-14213 (#12457)"}]}, {"oid": "5a88b9789ef69ff8e77ed519a08a51be23a852b0", "url": "https://github.com/dhis2/dhis2-core/commit/5a88b9789ef69ff8e77ed519a08a51be23a852b0", "message": "* Fix PR comments\n\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>", "committedDate": "2020-06-29T16:51:29Z", "type": "commit"}, {"oid": "31226e1b78f88b637ba9fafd107bda982a178ec9", "url": "https://github.com/dhis2/dhis2-core/commit/31226e1b78f88b637ba9fafd107bda982a178ec9", "message": "Merge branch 'master' of github.com:dhis2/dhis2-core into DHIS2-8879", "committedDate": "2020-07-01T07:25:09Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI1ODEzNA==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r448258134", "body": "Can we have a more readable name here - we are not as such validating the TE, rather the importStarategy of the TE... so can we say `validateTEImportStrategy` instead of `validateTrackedEntity` ?\r\n\r\none more thing on the readability ... will it make the flow better if we organize the code into two blocks?\r\n\r\n`if ( existingTe == null) //allow only create, other strategies throw error`\r\n`else // create strategy should through error, others are accepted`", "bodyText": "Can we have a more readable name here - we are not as such validating the TE, rather the importStarategy of the TE... so can we say validateTEImportStrategy instead of validateTrackedEntity ?\none more thing on the readability ... will it make the flow better if we organize the code into two blocks?\nif ( existingTe == null) //allow only create, other strategies throw error\nelse // create strategy should through error, others are accepted", "bodyHTML": "<p dir=\"auto\">Can we have a more readable name here - we are not as such validating the TE, rather the importStarategy of the TE... so can we say <code>validateTEImportStrategy</code> instead of <code>validateTrackedEntity</code> ?</p>\n<p dir=\"auto\">one more thing on the readability ... will it make the flow better if we organize the code into two blocks?</p>\n<p dir=\"auto\"><code>if ( existingTe == null) //allow only create, other strategies throw error</code><br>\n<code>else // create strategy should through error, others are accepted</code></p>", "author": "abyot", "createdAt": "2020-07-01T10:05:49Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java", "diffHunk": "@@ -0,0 +1,180 @@\n+package org.hisp.dhis.tracker.validation.hooks;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\n+ */\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.hisp.dhis.program.ProgramInstance;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+import org.hisp.dhis.tracker.TrackerImportStrategy;\n+import org.hisp.dhis.tracker.bundle.TrackerBundle;\n+import org.hisp.dhis.tracker.domain.Enrollment;\n+import org.hisp.dhis.tracker.domain.Event;\n+import org.hisp.dhis.tracker.domain.TrackedEntity;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n+import org.hisp.dhis.tracker.validation.TrackerImportValidationContext;\n+import org.springframework.stereotype.Component;\n+\n+import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+@Slf4j\n+@Component\n+public class PreCheckExistenceValidationHook\n+    extends AbstractTrackerDtoValidationHook\n+{\n+    @Override\n+    public void validateTrackedEntity( ValidationErrorReporter reporter,", "originalCommit": "5a88b9789ef69ff8e77ed519a08a51be23a852b0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "898c87ce14bf1faf20e8f8ebf3a5bc12f27437f0", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java\nindex bce10282b8..bd9cec3cbd 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java\n", "chunk": "@@ -53,6 +55,13 @@ import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n public class PreCheckExistenceValidationHook\n     extends AbstractTrackerDtoValidationHook\n {\n+\n+    public PreCheckExistenceValidationHook( TrackedEntityAttributeService teAttrService,\n+        TrackedEntityCommentService commentService )\n+    {\n+        super( teAttrService, commentService );\n+    }\n+\n     @Override\n     public void validateTrackedEntity( ValidationErrorReporter reporter,\n         TrackedEntity trackedEntity )\n", "next_change": null}]}, "revised_code_in_main": {"commit": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java\nindex bce10282b8..bd9cec3cbd 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java\n", "chunk": "@@ -53,6 +55,13 @@ import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n public class PreCheckExistenceValidationHook\n     extends AbstractTrackerDtoValidationHook\n {\n+\n+    public PreCheckExistenceValidationHook( TrackedEntityAttributeService teAttrService,\n+        TrackedEntityCommentService commentService )\n+    {\n+        super( teAttrService, commentService );\n+    }\n+\n     @Override\n     public void validateTrackedEntity( ValidationErrorReporter reporter,\n         TrackedEntity trackedEntity )\n", "next_change": {"commit": "3e3dc98d92f0c13fb56cf17894eab06a78842133", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java\nindex bd9cec3cbd..6818d2c383 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java\n", "chunk": "@@ -50,16 +48,14 @@ import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n /**\n  * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n  */\n-@Slf4j\n @Component\n public class PreCheckExistenceValidationHook\n     extends AbstractTrackerDtoValidationHook\n {\n \n-    public PreCheckExistenceValidationHook( TrackedEntityAttributeService teAttrService,\n-        TrackedEntityCommentService commentService )\n+    public PreCheckExistenceValidationHook( TrackedEntityAttributeService teAttrService )\n     {\n-        super( teAttrService, commentService );\n+        super( teAttrService );\n     }\n \n     @Override\n", "next_change": {"commit": "3e3b32e56ff5554a0095396eddffceac65b6b8de", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java\nindex 6818d2c383..2341916308 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java\n", "chunk": "@@ -52,15 +58,13 @@ import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n public class PreCheckExistenceValidationHook\n     extends AbstractTrackerDtoValidationHook\n {\n-\n     public PreCheckExistenceValidationHook( TrackedEntityAttributeService teAttrService )\n     {\n         super( teAttrService );\n     }\n \n     @Override\n-    public void validateTrackedEntity( ValidationErrorReporter reporter,\n-        TrackedEntity trackedEntity )\n+    public void validateTrackedEntity( ValidationErrorReporter reporter, TrackedEntity trackedEntity )\n     {\n         TrackerImportValidationContext context = reporter.getValidationContext();\n         TrackerBundle bundle = context.getBundle();\n", "next_change": {"commit": "0bf55d776481f6511e5f9ebca5de1f2cf79777c0", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java\nindex 2341916308..049b884359 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java\n", "chunk": "@@ -58,11 +59,6 @@ import static org.hisp.dhis.tracker.report.TrackerErrorCode.E1114;\n public class PreCheckExistenceValidationHook\n     extends AbstractTrackerDtoValidationHook\n {\n-    public PreCheckExistenceValidationHook( TrackedEntityAttributeService teAttrService )\n-    {\n-        super( teAttrService );\n-    }\n-\n     @Override\n     public void validateTrackedEntity( ValidationErrorReporter reporter, TrackedEntity trackedEntity )\n     {\n", "next_change": {"commit": "20dfefe359779d7e1c1921ba920465227e72f071", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java\nindex 049b884359..c583323260 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java\n", "chunk": "@@ -63,121 +52,95 @@ public class PreCheckExistenceValidationHook\n     public void validateTrackedEntity( ValidationErrorReporter reporter, TrackedEntity trackedEntity )\n     {\n         TrackerImportValidationContext context = reporter.getValidationContext();\n-        TrackerBundle bundle = context.getBundle();\n-        TrackerImportStrategy importStrategy = bundle.getImportStrategy();\n+        TrackerImportStrategy importStrategy = context.getStrategy( trackedEntity );\n \n         TrackedEntityInstance existingTe = context\n             .getTrackedEntityInstance( trackedEntity.getTrackedEntity() );\n \n-        if ( importStrategy.isCreateAndUpdate() )\n+        // If the tracked entity is soft-deleted no operation is allowed\n+        if ( existingTe != null && existingTe.isDeleted() )\n         {\n-            if ( existingTe == null )\n-            {\n-                context.setStrategy( trackedEntity, TrackerImportStrategy.CREATE );\n-            }\n-            else\n-            {\n-                context.setStrategy( trackedEntity, TrackerImportStrategy.UPDATE );\n-            }\n+            addError( reporter, E1114, trackedEntity.getTrackedEntity() );\n+            return;\n         }\n-        else if ( existingTe != null && importStrategy.isCreate() )\n+\n+        if ( existingTe != null && importStrategy.isCreate() )\n         {\n             addError( reporter, E1002, trackedEntity.getTrackedEntity() );\n         }\n-        else if ( existingTe != null && existingTe.isDeleted() && importStrategy.isDelete() )\n-        {\n-            addError( reporter, E1114, trackedEntity.getTrackedEntity() );\n-        }\n         else if ( existingTe == null && importStrategy.isUpdateOrDelete() )\n         {\n             addError( reporter, E1063, trackedEntity.getTrackedEntity() );\n         }\n-        else\n-        {\n-            context.setStrategy( trackedEntity, importStrategy );\n-        }\n     }\n \n     @Override\n     public void validateEnrollment( ValidationErrorReporter reporter, Enrollment enrollment )\n     {\n         TrackerImportValidationContext context = reporter.getValidationContext();\n-        TrackerBundle bundle = context.getBundle();\n-        TrackerImportStrategy importStrategy = bundle.getImportStrategy();\n+        TrackerImportStrategy importStrategy = context.getStrategy( enrollment );\n \n         ProgramInstance existingPi = context.getProgramInstance( enrollment.getEnrollment() );\n \n-        if ( importStrategy.isCreateAndUpdate() )\n+        // If the tracked entity is soft-deleted no operation is allowed\n+        if ( existingPi != null && existingPi.isDeleted() )\n         {\n-            if ( existingPi == null )\n-            {\n-                context.setStrategy( enrollment, TrackerImportStrategy.CREATE );\n-            }\n-            else\n-            {\n-                context.setStrategy( enrollment, TrackerImportStrategy.UPDATE );\n-            }\n+            addError( reporter, E1113, enrollment.getEnrollment() );\n+            return;\n         }\n-        else if ( existingPi != null && importStrategy.isCreate() )\n+\n+        if ( existingPi != null && importStrategy.isCreate() )\n         {\n             addError( reporter, E1080, enrollment.getEnrollment() );\n         }\n-        else if ( existingPi != null && existingPi.isDeleted() && importStrategy.isDelete() )\n-        {\n-            addError( reporter, E1113, enrollment.getEnrollment() );\n-        }\n         else if ( existingPi == null && importStrategy.isUpdateOrDelete() )\n         {\n             addError( reporter, E1081, enrollment.getEnrollment() );\n         }\n-        else\n-        {\n-            context.setStrategy( enrollment, importStrategy );\n-        }\n     }\n \n     @Override\n     public void validateEvent( ValidationErrorReporter reporter, Event event )\n     {\n         TrackerImportValidationContext context = reporter.getValidationContext();\n-        TrackerBundle bundle = context.getBundle();\n-        TrackerImportStrategy importStrategy = bundle.getImportStrategy();\n+        TrackerImportStrategy importStrategy = context.getStrategy( event );\n \n         ProgramStageInstance existingPsi = context.getProgramStageInstance( event.getEvent() );\n \n-        if ( importStrategy.isCreateAndUpdate() )\n+        // If the event is soft-deleted no operation is allowed\n+        if ( existingPsi != null && existingPsi.isDeleted() )\n         {\n-            if ( existingPsi == null )\n-            {\n-                context.setStrategy( event, TrackerImportStrategy.CREATE );\n-            }\n-            else\n-            {\n-                context.setStrategy( event, TrackerImportStrategy.UPDATE );\n-            }\n+            addError( reporter, E1082, event.getEvent() );\n+            return;\n         }\n-        else if ( existingPsi != null && importStrategy.isCreate() )\n+\n+        if ( existingPsi != null && importStrategy.isCreate() )\n         {\n             addError( reporter, E1030, event.getEvent() );\n         }\n-        else if ( existingPsi != null && existingPsi.isDeleted() && importStrategy.isDelete() )\n-        {\n-            addError( reporter, E1082, event.getEvent() );\n-        }\n         else if ( existingPsi == null && importStrategy.isUpdateOrDelete() )\n         {\n             addError( reporter, E1032, event.getEvent() );\n         }\n-        else\n+    }\n+\n+    @Override\n+    public void validateRelationship( ValidationErrorReporter reporter, Relationship relationship )\n+    {\n+        TrackerImportValidationContext context = reporter.getValidationContext();\n+\n+        org.hisp.dhis.relationship.Relationship existingRelationship = context.getRelationship( relationship );\n+\n+        if ( existingRelationship != null )\n         {\n-            context.setStrategy( event, importStrategy );\n+            addWarning( reporter, E4015, relationship.getRelationship() );\n         }\n     }\n \n     @Override\n-    public void validateRelationship( ValidationErrorReporter reporter, Relationship relationship )\n+    public boolean needsToRun( TrackerImportStrategy strategy )\n     {\n-       //TODO need to add existence check for relationship\n+        return true;\n     }\n \n     @Override\n", "next_change": {"commit": "b0a861c0308005b865cafa2344c1231c0a4f2bc3", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java\nindex c583323260..fa98b2c034 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckExistenceValidationHook.java\n", "chunk": "@@ -144,7 +192,7 @@ public class PreCheckExistenceValidationHook\n     }\n \n     @Override\n-    public boolean removeOnError()\n+    public boolean skipOnError()\n     {\n         return true;\n     }\n", "next_change": null}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "message": "Merge commit", "committedDate": null}, {"oid": "2ed799f33ca26b918ed60473a3f097714f00492e", "committedDate": "2020-08-04 10:30:01 +0200", "message": "chore: Clean up code (#5877)"}, {"oid": "3e3dc98d92f0c13fb56cf17894eab06a78842133", "committedDate": "2020-08-04 17:20:37 +0200", "message": "feat: Enrollment/Events note persistence"}, {"oid": "3e3b32e56ff5554a0095396eddffceac65b6b8de", "committedDate": "2020-10-27 09:56:50 +0100", "message": "refactor: simplified calls to error reporting (#6437)"}, {"oid": "6e28dbfdaea7ceacbe560fe82ddba1e94c6cd203", "committedDate": "2020-11-11 17:41:55 +0100", "message": "fix: Exception when importing TEI with relationship [DHIS2-9856] (#6552)"}, {"oid": "0bf55d776481f6511e5f9ebca5de1f2cf79777c0", "committedDate": "2020-11-19 13:55:46 +0100", "message": "refactor: New Tracker Error reporting refactor (#6706)"}, {"oid": "c9397132d35e1394cef55720639f8649005a96ad", "committedDate": "2020-12-03 17:07:36 +0100", "message": "fix: prevent changes to a deleted event (#6820)"}, {"oid": "46a4fb9730a952d5cbc36bce0718757e6edd2809", "committedDate": "2020-12-15 15:50:22 +0100", "message": "fix: DHIS2-10084 prevent changes to deleted tracked entities (#6882)"}, {"oid": "6e020e7c286db62dbc57c1b58a94f5841dc09551", "committedDate": "2020-12-21 10:08:58 +0100", "message": "Dhis2 10084 enrollments soft deleted (#6937)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "c71a97bf6c13f342a7c972c7061dab2b61d9d587", "committedDate": "2021-04-08 08:14:46 +0200", "message": "refactor: Clean up redundant integration tests for validation hooks [TECH-579] (#7811)"}, {"oid": "20dfefe359779d7e1c1921ba920465227e72f071", "committedDate": "2021-05-25 12:55:24 +0200", "message": "fix: Remove validations from objects deletion service in new tracker importer [DHIS2-10789] (#8053)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "97fa18701761c6993e20f2e7a3816ea689129480", "committedDate": "2022-01-11 15:31:02 +0100", "message": "chore: hooks should add errors via reporter directly TECH-880 (#9523)"}, {"oid": "1d8350a9e9ac100aaaa831894ba3f857b46e2474", "committedDate": "2022-01-13 14:15:17 +0100", "message": "chore: adding errors and warnings is responsibility of the ValidationErrorReporter TECH-880 (#9616)"}, {"oid": "ef0cbd365e47f1f88befb80d9650cce75280bd35", "committedDate": "2022-03-08 15:12:00 +0100", "message": "chore: move DB access and mutation to preheat and preprocessor DHIS2-12623 (#9904)"}, {"oid": "0303652efe35da369ba1d2a437a4b5797a52c451", "committedDate": "2022-04-01 09:37:58 +0200", "message": "chore: tracker entities only support idScheme UID DHIS2-12563 (#10329)"}, {"oid": "9b2608b1ac695b4a62bca379a1807eae40520918", "committedDate": "2022-04-26 13:27:56 +0200", "message": "fix: Fix error when deleting relationships [DHIS2-13146] (#10595)"}, {"oid": "d76299848da281461da799f3fb3ca8ac3c63795a", "committedDate": "2022-05-09 13:06:14 +0000", "message": "feat: Make relationship soft deletable [DHIS2-11320] (#10708)"}, {"oid": "f7cfc83610c75486bbb0457dde057eaed777f3d2", "committedDate": "2022-05-27 15:15:25 +0200", "message": "chore: ValidationErrorReporter does not need the bunlde DHIS2-12519 (#10878)"}, {"oid": "b0a861c0308005b865cafa2344c1231c0a4f2bc3", "committedDate": "2022-12-02 13:36:08 +0100", "message": "fix: turn removeOnError into skipOnError DHIS2-14213 (#12457)"}, {"oid": "7ac68b368a1dbd9362973b30f7160399abe801a0", "committedDate": "2022-12-06 09:04:47 +0100", "message": "chore: move ValidationErrorReporter close to its usage (#12486)"}, {"oid": "2f607f53c7c920bab48832e9effb2de8696652a3", "committedDate": "2022-12-12 14:56:12 +0000", "message": "fix: invalidation of tracker tree DHIS2-14213 (#12495)"}, {"oid": "07ff89195ce66114c2b5a744039c2b2ce7a8f440", "committedDate": "2022-12-13 09:51:43 +0100", "message": "chore: Clean up TrackerBundle methods [TECH-14298] (#12515)"}, {"oid": "10cdef4bf3594ae654a3fe71d6abd00dad4e3996", "committedDate": "2022-12-14 14:52:09 +0100", "message": "chore: remove TrackerValidationHook DHIS-214298 (#12557)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI4NjAzMA==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r448286030", "body": "Do we need this method?", "bodyText": "Do we need this method?", "bodyHTML": "<p dir=\"auto\">Do we need this method?</p>", "author": "abyot", "createdAt": "2020-07-01T11:01:41Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/RelationshipTrackerConverterService.java", "diffHunk": "@@ -74,7 +78,13 @@ public Relationship to( org.hisp.dhis.relationship.Relationship relationship )\n     }\n \n     @Override\n+    @Transactional( readOnly = true )\n     public List<Relationship> to( List<org.hisp.dhis.relationship.Relationship> relationships )\n+    {\n+        return _to( relationships );\n+    }\n+\n+    private List<Relationship> _to( List<org.hisp.dhis.relationship.Relationship> relationships )", "originalCommit": "5a88b9789ef69ff8e77ed519a08a51be23a852b0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "c9dbe7965959518882dbad8401946ed9a65ab742", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/RelationshipTrackerConverterService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/RelationshipTrackerConverterService.java\nindex 924fb30b89..25c82a11bd 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/RelationshipTrackerConverterService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/RelationshipTrackerConverterService.java\n", "chunk": "@@ -78,7 +76,6 @@ public class RelationshipTrackerConverterService\n     }\n \n     @Override\n-    @Transactional( readOnly = true )\n     public List<Relationship> to( List<org.hisp.dhis.relationship.Relationship> relationships )\n     {\n         return _to( relationships );\n", "next_change": {"commit": "898c87ce14bf1faf20e8f8ebf3a5bc12f27437f0", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/RelationshipTrackerConverterService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/RelationshipTrackerConverterService.java\nindex 25c82a11bd..79845f9aa1 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/RelationshipTrackerConverterService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/RelationshipTrackerConverterService.java\n", "chunk": "@@ -77,11 +77,6 @@ public class RelationshipTrackerConverterService\n \n     @Override\n     public List<Relationship> to( List<org.hisp.dhis.relationship.Relationship> relationships )\n-    {\n-        return _to( relationships );\n-    }\n-\n-    private List<Relationship> _to( List<org.hisp.dhis.relationship.Relationship> relationships )\n     {\n         return relationships.stream().map( fromRelationship -> {\n \n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/RelationshipTrackerConverterService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/RelationshipTrackerConverterService.java\nindex 924fb30b89..79845f9aa1 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/RelationshipTrackerConverterService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/RelationshipTrackerConverterService.java\n", "chunk": "@@ -78,13 +76,7 @@ public class RelationshipTrackerConverterService\n     }\n \n     @Override\n-    @Transactional( readOnly = true )\n     public List<Relationship> to( List<org.hisp.dhis.relationship.Relationship> relationships )\n-    {\n-        return _to( relationships );\n-    }\n-\n-    private List<Relationship> _to( List<org.hisp.dhis.relationship.Relationship> relationships )\n     {\n         return relationships.stream().map( fromRelationship -> {\n \n", "next_change": {"commit": "399526882c2fbbf5600922b3c3b6030420cf4e96", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/RelationshipTrackerConverterService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/RelationshipTrackerConverterService.java\nindex 79845f9aa1..92fd6ec8e9 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/RelationshipTrackerConverterService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/RelationshipTrackerConverterService.java\n", "chunk": "@@ -76,6 +76,7 @@ public class RelationshipTrackerConverterService\n     }\n \n     @Override\n+    @Transactional( readOnly = true )\n     public List<Relationship> to( List<org.hisp.dhis.relationship.Relationship> relationships )\n     {\n         return relationships.stream().map( fromRelationship -> {\n", "next_change": {"commit": "c70f79c6febd4b98e98c6f0c572d1099207d86b3", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/RelationshipTrackerConverterService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/RelationshipTrackerConverterService.java\nindex 92fd6ec8e9..992f7cafc2 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/RelationshipTrackerConverterService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/RelationshipTrackerConverterService.java\n", "chunk": "@@ -76,7 +71,6 @@ public class RelationshipTrackerConverterService\n     }\n \n     @Override\n-    @Transactional( readOnly = true )\n     public List<Relationship> to( List<org.hisp.dhis.relationship.Relationship> relationships )\n     {\n         return relationships.stream().map( fromRelationship -> {\n", "next_change": {"commit": "6e8f0d6c150b303d780b397f7646ff3383f16250", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/RelationshipTrackerConverterService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/RelationshipTrackerConverterService.java\nindex 992f7cafc2..5dcb0318d7 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/RelationshipTrackerConverterService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/RelationshipTrackerConverterService.java\n", "chunk": "@@ -78,10 +74,10 @@ public class RelationshipTrackerConverterService\n             Relationship toRelationship = new Relationship();\n             toRelationship.setRelationship( fromRelationship.getUid() );\n             toRelationship.setBidirectional( fromRelationship.getRelationshipType().isBidirectional() );\n-            toRelationship.setCreatedAt( fromRelationship.getCreated().toString() );\n+            toRelationship.setCreatedAt( DateUtils.instantFromDate( fromRelationship.getCreated() ) );\n             toRelationship.setFrom( convertRelationshipType( fromRelationship.getFrom() ) );\n             toRelationship.setTo( convertRelationshipType( fromRelationship.getTo() ) );\n-            toRelationship.setUpdatedAt( fromRelationship.getLastUpdated().toString() );\n+            toRelationship.setUpdatedAt( DateUtils.instantFromDate( fromRelationship.getLastUpdated() ) );\n             toRelationship.setRelationshipType( fromRelationship.getRelationshipType().getUid() );\n \n             return toRelationship;\n", "next_change": {"commit": "75c6c5d054b53569dda7e85f82afac6f6cd6b4a4", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/RelationshipTrackerConverterService.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/RelationshipTrackerConverterService.java\nindex 5dcb0318d7..8e2170b48e 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/RelationshipTrackerConverterService.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/converter/RelationshipTrackerConverterService.java\n", "chunk": "@@ -78,7 +79,8 @@ public class RelationshipTrackerConverterService\n             toRelationship.setFrom( convertRelationshipType( fromRelationship.getFrom() ) );\n             toRelationship.setTo( convertRelationshipType( fromRelationship.getTo() ) );\n             toRelationship.setUpdatedAt( DateUtils.instantFromDate( fromRelationship.getLastUpdated() ) );\n-            toRelationship.setRelationshipType( fromRelationship.getRelationshipType().getUid() );\n+            toRelationship\n+                .setRelationshipType( MetadataIdentifier.ofUid( fromRelationship.getRelationshipType().getUid() ) );\n \n             return toRelationship;\n         } ).collect( Collectors.toList() );\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "message": "Merge commit", "committedDate": null}, {"oid": "399526882c2fbbf5600922b3c3b6030420cf4e96", "committedDate": "2020-07-13 12:23:07 +0200", "message": "feat: Run rule engine rules in new importer [DHIS2-7310]"}, {"oid": "800749896c5e2437d4c5c394663dca9a9454d9e2", "committedDate": "2020-08-11 10:29:37 +0200", "message": "Fix sonar issues"}, {"oid": "c70f79c6febd4b98e98c6f0c572d1099207d86b3", "committedDate": "2020-08-12 16:29:26 +0200", "message": "Code review fixes"}, {"oid": "cb2ee65c0210c0d4b2bd8851789da8d4adfaf04d", "committedDate": "2020-09-07 10:28:21 +0200", "message": "fix: [DHIS2-9287] Fix the stats in the import summary (#6062)"}, {"oid": "79e8ba20f8d60c6c7b9cf9a7ab5fcabbae13501d", "committedDate": "2020-11-16 13:42:24 +0100", "message": "fix: added missing reference from RelationshipItem to Relationship, causing NPE later (#6684)"}, {"oid": "0a7423521db9a9b66f19b6ac815ce46ee9c62751", "committedDate": "2020-11-19 14:18:43 +0100", "message": "fix: set both sides of relationship correctly (#6700)"}, {"oid": "3e799d196b8f73ad216ea100a07ddd5f7dfc53e0", "committedDate": "2020-11-30 16:37:14 +0100", "message": "fix: remove long running transaction during Tracker Import (#6782)"}, {"oid": "699074cbe82db1a8e0a5e72edf2a981f3628b54b", "committedDate": "2020-12-07 10:47:48 +0100", "message": "fix: Tracker Identifiers resolution during Tracker import (#6824)"}, {"oid": "7098e9412b922ed70f8136f30c7d790e27bb43be", "committedDate": "2020-12-10 10:43:44 +0100", "message": "chore: Remove unused imports (#6875)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "6e8f0d6c150b303d780b397f7646ff3383f16250", "committedDate": "2021-01-21 09:32:50 +0100", "message": "feat: new tracked dto's properties referring to a date, now use Instant instead of String [DHIS2-101239] (#7119)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "f731091fc392786dd6948e79de0614f4061d76e1", "committedDate": "2021-02-15 09:46:23 +0100", "message": "refactor: changed the way relationship are identified inside preheat [DHIS2-10390] (#7340)"}, {"oid": "a4643bd1fe923092627bdd884e05e5dacc7a5911", "committedDate": "2021-04-30 14:46:25 +0200", "message": "refactor: Refactor rule engine service in the new importer to group events and enrollments in one call (#7925)"}, {"oid": "e030c4329e7c76f0e820fa466ff7c430d564c063", "committedDate": "2021-10-08 10:26:58 +0200", "message": "Add aggregated key columns to relationship table for quick lookup (#8959)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "e1781813dcec0c675de8b3a0606e47dce3509290", "committedDate": "2022-03-11 05:46:00 +0100", "message": "fix: return full relationship items DHIS2-12625 (#9996)"}, {"oid": "0303652efe35da369ba1d2a437a4b5797a52c451", "committedDate": "2022-04-01 09:37:58 +0200", "message": "chore: tracker entities only support idScheme UID DHIS2-12563 (#10329)"}, {"oid": "cfec5fa171a222e3442202cdf973d2523def260c", "committedDate": "2022-05-05 10:22:53 +0200", "message": "chore: simplify RelationshipItem in domain DHIS2-12563 (#10676)"}, {"oid": "d76299848da281461da799f3fb3ca8ac3c63795a", "committedDate": "2022-05-09 13:06:14 +0000", "message": "feat: Make relationship soft deletable [DHIS2-11320] (#10708)"}, {"oid": "fb7a485c6dc99b360359cb262a00c7c9b703fcdc", "committedDate": "2022-05-16 11:12:11 +0200", "message": "refactor: RelationshipKey is the only responsible to create keys [DHIS2-11320] (#10780)"}, {"oid": "75c6c5d054b53569dda7e85f82afac6f6cd6b4a4", "committedDate": "2022-05-16 12:33:36 +0200", "message": "fix: Relationship.relationshipType is a MetadataIdentifier (#10746)"}, {"oid": "df4eaf29ba29ee71a727a1c072fd4bcb03bb4bc9", "committedDate": "2022-05-19 15:13:36 +0200", "message": "chore: docs, improve APIs DHIS2-12563 (#10847)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMxMjk4MA==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r448312980", "body": "Emm... I am not really sure whether we need to validate notes. Under normal circumstances (importStrategy) we always append to event notes. \r\n\r\nHowever, if we have SYNC ... we might consider checking notes ... but again here also we could overwrite existing notes with incoming notes. What exactly we do during SYNC - we do a merge or full update/overwrite ?", "bodyText": "Emm... I am not really sure whether we need to validate notes. Under normal circumstances (importStrategy) we always append to event notes.\nHowever, if we have SYNC ... we might consider checking notes ... but again here also we could overwrite existing notes with incoming notes. What exactly we do during SYNC - we do a merge or full update/overwrite ?", "bodyHTML": "<p dir=\"auto\">Emm... I am not really sure whether we need to validate notes. Under normal circumstances (importStrategy) we always append to event notes.</p>\n<p dir=\"auto\">However, if we have SYNC ... we might consider checking notes ... but again here also we could overwrite existing notes with incoming notes. What exactly we do during SYNC - we do a merge or full update/overwrite ?</p>", "author": "abyot", "createdAt": "2020-07-01T11:58:05Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventNoteValidationHook.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package org.hisp.dhis.tracker.validation.hooks;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.hisp.dhis.tracker.TrackerImportStrategy;\n+import org.hisp.dhis.tracker.domain.Event;\n+import org.hisp.dhis.tracker.domain.Note;\n+import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n+import org.hisp.dhis.tracker.validation.TrackerImportValidationContext;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.List;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+@Component\n+public class EventNoteValidationHook extends AbstractTrackerDtoValidationHook", "originalCommit": "5a88b9789ef69ff8e77ed519a08a51be23a852b0", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "898c87ce14bf1faf20e8f8ebf3a5bc12f27437f0", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventNoteValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventNoteValidationHook.java\nindex d5defa6432..25af4e1aac 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventNoteValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventNoteValidationHook.java\n", "chunk": "@@ -43,9 +45,10 @@ import java.util.List;\n @Component\n public class EventNoteValidationHook extends AbstractTrackerDtoValidationHook\n {\n-    public EventNoteValidationHook()\n+    public EventNoteValidationHook( TrackedEntityAttributeService teAttrService,\n+        TrackedEntityCommentService commentService )\n     {\n-        super( Event.class, TrackerImportStrategy.CREATE_AND_UPDATE );\n+        super( Event.class, TrackerImportStrategy.CREATE_AND_UPDATE, teAttrService, commentService );\n     }\n \n     @Override\n", "next_change": null}]}, "revised_code_in_main": {"commit": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventNoteValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventNoteValidationHook.java\nindex d5defa6432..25af4e1aac 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventNoteValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventNoteValidationHook.java\n", "chunk": "@@ -43,9 +45,10 @@ import java.util.List;\n @Component\n public class EventNoteValidationHook extends AbstractTrackerDtoValidationHook\n {\n-    public EventNoteValidationHook()\n+    public EventNoteValidationHook( TrackedEntityAttributeService teAttrService,\n+        TrackedEntityCommentService commentService )\n     {\n-        super( Event.class, TrackerImportStrategy.CREATE_AND_UPDATE );\n+        super( Event.class, TrackerImportStrategy.CREATE_AND_UPDATE, teAttrService, commentService );\n     }\n \n     @Override\n", "next_change": {"commit": "3e3dc98d92f0c13fb56cf17894eab06a78842133", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventNoteValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventNoteValidationHook.java\nindex 25af4e1aac..74198449b1 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventNoteValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventNoteValidationHook.java\n", "chunk": "@@ -45,20 +47,18 @@ import java.util.List;\n @Component\n public class EventNoteValidationHook extends AbstractTrackerDtoValidationHook\n {\n+    private final TrackedEntityCommentService commentService;\n+\n     public EventNoteValidationHook( TrackedEntityAttributeService teAttrService,\n         TrackedEntityCommentService commentService )\n     {\n-        super( Event.class, TrackerImportStrategy.CREATE_AND_UPDATE, teAttrService, commentService );\n+        super( Event.class, TrackerImportStrategy.CREATE_AND_UPDATE, teAttrService );\n+        this.commentService = commentService;\n     }\n \n     @Override\n     public void validateEvent( ValidationErrorReporter reporter, Event event )\n     {\n-        TrackerImportValidationContext validationContext = reporter.getValidationContext();\n-        TrackerImportStrategy strategy = validationContext.getStrategy( event );\n-\n-        List<Note> notes = event.getNotes();\n-\n-        validateNotes( reporter, strategy, notes );\n+        event.setNotes( NoteValidationUtils.getPersistableNotes( commentService, event.getNotes() ) );\n     }\n }\n", "next_change": {"commit": "ae4d365663ffddc9a34d1cdc0f629fd7b6386e90", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventNoteValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventNoteValidationHook.java\nindex 74198449b1..aaa3828350 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventNoteValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventNoteValidationHook.java\n", "chunk": "@@ -28,37 +28,26 @@ package org.hisp.dhis.tracker.validation.hooks;\n  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n  */\n \n-import com.google.common.collect.Streams;\n-import org.apache.commons.lang3.StringUtils;\n import org.hisp.dhis.trackedentity.TrackedEntityAttributeService;\n-import org.hisp.dhis.trackedentitycomment.TrackedEntityCommentService;\n import org.hisp.dhis.tracker.TrackerImportStrategy;\n import org.hisp.dhis.tracker.domain.Event;\n-import org.hisp.dhis.tracker.domain.Note;\n import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n import org.springframework.stereotype.Component;\n \n-import java.util.List;\n-import java.util.stream.Collectors;\n-\n /**\n  * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n  */\n @Component\n public class EventNoteValidationHook extends AbstractTrackerDtoValidationHook\n {\n-    private final TrackedEntityCommentService commentService;\n-\n-    public EventNoteValidationHook( TrackedEntityAttributeService teAttrService,\n-        TrackedEntityCommentService commentService )\n+    public EventNoteValidationHook( TrackedEntityAttributeService teAttrService )\n     {\n         super( Event.class, TrackerImportStrategy.CREATE_AND_UPDATE, teAttrService );\n-        this.commentService = commentService;\n     }\n \n     @Override\n     public void validateEvent( ValidationErrorReporter reporter, Event event )\n     {\n-        event.setNotes( NoteValidationUtils.getPersistableNotes( commentService, event.getNotes() ) );\n+        event.setNotes( NoteValidationUtils.validate( reporter, event.getNotes() ) );\n     }\n }\n", "next_change": {"commit": "0bf55d776481f6511e5f9ebca5de1f2cf79777c0", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventNoteValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventNoteValidationHook.java\nindex aaa3828350..c68fb306f3 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventNoteValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventNoteValidationHook.java\n", "chunk": "@@ -40,14 +38,9 @@ import org.springframework.stereotype.Component;\n @Component\n public class EventNoteValidationHook extends AbstractTrackerDtoValidationHook\n {\n-    public EventNoteValidationHook( TrackedEntityAttributeService teAttrService )\n-    {\n-        super( Event.class, TrackerImportStrategy.CREATE_AND_UPDATE, teAttrService );\n-    }\n-\n     @Override\n     public void validateEvent( ValidationErrorReporter reporter, Event event )\n     {\n-        event.setNotes( NoteValidationUtils.validate( reporter, event.getNotes() ) );\n+        event.setNotes( ValidationUtils.validateNotes( reporter, event.getNotes() ) );\n     }\n }\n", "next_change": {"commit": "97fa18701761c6993e20f2e7a3816ea689129480", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventNoteValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventNoteValidationHook.java\nindex c68fb306f3..32bd49e545 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventNoteValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventNoteValidationHook.java\n", "chunk": "@@ -41,6 +40,7 @@ public class EventNoteValidationHook extends AbstractTrackerDtoValidationHook\n     @Override\n     public void validateEvent( ValidationErrorReporter reporter, Event event )\n     {\n-        event.setNotes( ValidationUtils.validateNotes( reporter, event.getNotes() ) );\n+        event\n+            .setNotes( ValidationUtils.validateNotes( reporter, event, event.getNotes() ) );\n     }\n }\n", "next_change": {"commit": "f7cfc83610c75486bbb0457dde057eaed777f3d2", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventNoteValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventNoteValidationHook.java\nindex 32bd49e545..3e581cff48 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventNoteValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventNoteValidationHook.java\n", "chunk": "@@ -38,9 +39,9 @@ import org.springframework.stereotype.Component;\n public class EventNoteValidationHook extends AbstractTrackerDtoValidationHook\n {\n     @Override\n-    public void validateEvent( ValidationErrorReporter reporter, Event event )\n+    public void validateEvent( ValidationErrorReporter reporter, TrackerBundle bundle, Event event )\n     {\n         event\n-            .setNotes( ValidationUtils.validateNotes( reporter, event, event.getNotes() ) );\n+            .setNotes( ValidationUtils.validateNotes( reporter, bundle.getPreheat(), event, event.getNotes() ) );\n     }\n }\n", "next_change": {"commit": "33c7cfe3d47d3ad157e0cc1991ece017e9244bb5", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventNoteValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventNoteValidator.java\nsimilarity index 87%\nrename from dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventNoteValidationHook.java\nrename to dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventNoteValidator.java\nindex 3e581cff48..19f2fd1d72 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventNoteValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventNoteValidator.java\n", "chunk": "@@ -29,17 +29,18 @@ package org.hisp.dhis.tracker.validation.hooks;\n \n import org.hisp.dhis.tracker.bundle.TrackerBundle;\n import org.hisp.dhis.tracker.domain.Event;\n-import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n+import org.hisp.dhis.tracker.validation.ValidationErrorReporter;\n+import org.hisp.dhis.tracker.validation.Validator;\n import org.springframework.stereotype.Component;\n \n /**\n  * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n  */\n @Component\n-public class EventNoteValidationHook extends AbstractTrackerDtoValidationHook\n+public class EventNoteValidator implements Validator<Event>\n {\n     @Override\n-    public void validateEvent( ValidationErrorReporter reporter, TrackerBundle bundle, Event event )\n+    public void validate( ValidationErrorReporter reporter, TrackerBundle bundle, Event event )\n     {\n         event\n             .setNotes( ValidationUtils.validateNotes( reporter, bundle.getPreheat(), event, event.getNotes() ) );\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "message": "Merge commit", "committedDate": null}, {"oid": "3e3dc98d92f0c13fb56cf17894eab06a78842133", "committedDate": "2020-08-04 17:20:37 +0200", "message": "feat: Enrollment/Events note persistence"}, {"oid": "cf9dcc41431a880631ba0b4c0667ae7bed5a5550", "committedDate": "2020-08-04 17:20:41 +0200", "message": "chore: sonar warning fixes"}, {"oid": "3e3b32e56ff5554a0095396eddffceac65b6b8de", "committedDate": "2020-10-27 09:56:50 +0100", "message": "refactor: simplified calls to error reporting (#6437)"}, {"oid": "ae4d365663ffddc9a34d1cdc0f629fd7b6386e90", "committedDate": "2020-11-03 10:25:55 +0100", "message": "feat: improve note validation during tracker import [TECH-457]"}, {"oid": "0bf55d776481f6511e5f9ebca5de1f2cf79777c0", "committedDate": "2020-11-19 13:55:46 +0100", "message": "refactor: New Tracker Error reporting refactor (#6706)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "97fa18701761c6993e20f2e7a3816ea689129480", "committedDate": "2022-01-11 15:31:02 +0100", "message": "chore: hooks should add errors via reporter directly TECH-880 (#9523)"}, {"oid": "f7cfc83610c75486bbb0457dde057eaed777f3d2", "committedDate": "2022-05-27 15:15:25 +0200", "message": "chore: ValidationErrorReporter does not need the bunlde DHIS2-12519 (#10878)"}, {"oid": "b0a861c0308005b865cafa2344c1231c0a4f2bc3", "committedDate": "2022-12-02 13:36:08 +0100", "message": "fix: turn removeOnError into skipOnError DHIS2-14213 (#12457)"}, {"oid": "7ac68b368a1dbd9362973b30f7160399abe801a0", "committedDate": "2022-12-06 09:04:47 +0100", "message": "chore: move ValidationErrorReporter close to its usage (#12486)"}, {"oid": "33c7cfe3d47d3ad157e0cc1991ece017e9244bb5", "committedDate": "2022-12-13 13:59:20 +0000", "message": "chore: migrate event validators (#12527)"}]}, {"oid": "01afca4f0fcdcaab5cac82598d4b671f8ba3ee58", "url": "https://github.com/dhis2/dhis2-core/commit/01afca4f0fcdcaab5cac82598d4b671f8ba3ee58", "message": "Merge branch 'master' of github.com:dhis2/dhis2-core into DHIS2-8879", "committedDate": "2020-07-02T12:43:04Z", "type": "commit"}, {"oid": "ec14261db1f790e1be25e5bb27b45226087a9dd5", "url": "https://github.com/dhis2/dhis2-core/commit/ec14261db1f790e1be25e5bb27b45226087a9dd5", "message": "* PR comment fixes\n\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>", "committedDate": "2020-07-02T12:53:13Z", "type": "commit"}, {"oid": "58917c0ff1988692a4906ea00a0e0670d4d251d7", "url": "https://github.com/dhis2/dhis2-core/commit/58917c0ff1988692a4906ea00a0e0670d4d251d7", "message": "* Merge master\n\nSigned-off-by: Morten Svanaes <msvanaes@dhis2.org>", "committedDate": "2020-07-03T12:06:52Z", "type": "commit"}, {"oid": "a6afb3aa2bbf5634d26be17ddf74f1ddd4630493", "url": "https://github.com/dhis2/dhis2-core/commit/a6afb3aa2bbf5634d26be17ddf74f1ddd4630493", "message": "* Sonar code comment adjustments", "committedDate": "2020-07-05T09:03:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY5MTU4MQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r449691581", "body": "Opinion: Would we either put the statement directly in the IF statement, alternatively rename b1 and b2 to what they actually mean?", "bodyText": "Opinion: Would we either put the statement directly in the IF statement, alternatively rename b1 and b2 to what they actually mean?", "bodyHTML": "<p dir=\"auto\">Opinion: Would we either put the statement directly in the IF statement, alternatively rename b1 and b2 to what they actually mean?</p>", "author": "Bekkalizer", "createdAt": "2020-07-03T19:47:02Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckOwnershipValidationHook.java", "diffHunk": "@@ -0,0 +1,235 @@\n+package org.hisp.dhis.tracker.validation.hooks;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.hisp.dhis.category.CategoryOptionCombo;\n+import org.hisp.dhis.event.EventStatus;\n+import org.hisp.dhis.organisationunit.OrganisationUnit;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.program.ProgramInstance;\n+import org.hisp.dhis.program.ProgramStage;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.security.Authorities;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+import org.hisp.dhis.trackedentity.TrackedEntityType;\n+import org.hisp.dhis.tracker.TrackerImportStrategy;\n+import org.hisp.dhis.tracker.bundle.TrackerBundle;\n+import org.hisp.dhis.tracker.domain.Enrollment;\n+import org.hisp.dhis.tracker.domain.Event;\n+import org.hisp.dhis.tracker.domain.TrackedEntity;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n+import org.hisp.dhis.tracker.validation.TrackerImportValidationContext;\n+import org.hisp.dhis.tracker.validation.service.TrackerImportAccessManager;\n+import org.hisp.dhis.user.User;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import static com.google.api.client.util.Preconditions.checkNotNull;\n+import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n+import static org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors.ENROLLMENT_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors.EVENT_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors.ORGANISATION_UNIT_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors.PROGRAM_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors.PROGRAM_INSTANCE_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors.TRACKED_ENTITY_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors.TRACKED_ENTITY_INSTANCE_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors.USER_CANT_BE_NULL;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+@Component\n+public class PreCheckOwnershipValidationHook\n+    extends AbstractTrackerDtoValidationHook\n+{\n+    @Autowired\n+    private TrackerImportAccessManager trackerImportAccessManager;\n+\n+    @Override\n+    public void validateTrackedEntity( ValidationErrorReporter reporter, TrackedEntity trackedEntity )\n+    {\n+        TrackerImportValidationContext context = reporter.getValidationContext();\n+        TrackerImportStrategy strategy = context.getStrategy( trackedEntity );\n+        TrackerBundle bundle = context.getBundle();\n+        User user = bundle.getUser();\n+\n+        checkNotNull( user, USER_CANT_BE_NULL );\n+        checkNotNull( bundle.getUser(), USER_CANT_BE_NULL );\n+        checkNotNull( trackedEntity, TRACKED_ENTITY_CANT_BE_NULL );\n+\n+        if ( strategy.isDelete() )\n+        {\n+            TrackedEntityInstance tei = context.getTrackedEntityInstance( trackedEntity.getTrackedEntity() );\n+            checkNotNull( tei, TrackerImporterAssertErrors.TRACKED_ENTITY_INSTANCE_CANT_BE_NULL );\n+\n+            if ( tei.getProgramInstances().stream().anyMatch( pi -> !pi.isDeleted() )\n+                && !user.isAuthorized( Authorities.F_TEI_CASCADE_DELETE.getAuthority() ) )\n+            {\n+                reporter.addError( newReport( TrackerErrorCode.E1100 )\n+                    .addArg( bundle.getUser() )\n+                    .addArg( tei ) );\n+            }\n+        }\n+\n+        // Check acting user is allowed to change/write existing tei type\n+        if ( strategy.isUpdateOrDelete() )\n+        {\n+            TrackedEntityInstance tei = context.getTrackedEntityInstance( trackedEntity.getTrackedEntity() );\n+            TrackedEntityType trackedEntityType = tei.getTrackedEntityType();\n+            trackerImportAccessManager.checkTeiTypeWriteAccess( reporter, trackedEntityType );\n+        }\n+\n+        TrackedEntityType trackedEntityType = context\n+            .getTrackedEntityType( trackedEntity.getTrackedEntityType() );\n+        trackerImportAccessManager.checkTeiTypeWriteAccess( reporter, trackedEntityType );\n+    }\n+\n+    @Override\n+    public void validateEnrollment( ValidationErrorReporter reporter, Enrollment enrollment )\n+    {\n+        TrackerImportValidationContext context = reporter.getValidationContext();\n+        TrackerImportStrategy strategy = context.getStrategy( enrollment );\n+        TrackerBundle bundle = context.getBundle();\n+        User user = bundle.getUser();\n+\n+        checkNotNull( user, USER_CANT_BE_NULL );\n+        checkNotNull( enrollment, ENROLLMENT_CANT_BE_NULL );\n+        checkNotNull( enrollment.getOrgUnit(), ORGANISATION_UNIT_CANT_BE_NULL );\n+\n+        Program program = context.getProgram( enrollment.getProgram() );\n+        OrganisationUnit organisationUnit = context.getOrganisationUnit( enrollment.getOrgUnit() );\n+        TrackedEntityInstance tei = context.getTrackedEntityInstance( enrollment.getTrackedEntity() );\n+\n+        checkNotNull( tei, TRACKED_ENTITY_INSTANCE_CANT_BE_NULL );\n+        checkNotNull( organisationUnit, ORGANISATION_UNIT_CANT_BE_NULL );\n+        checkNotNull( program, PROGRAM_CANT_BE_NULL );\n+\n+        if ( strategy.isDelete() )\n+        {\n+            ProgramInstance pi = context.getProgramInstance( enrollment.getEnrollment() );\n+            checkNotNull( pi, PROGRAM_INSTANCE_CANT_BE_NULL );\n+\n+            boolean b1 = pi.getProgramStageInstances().stream().anyMatch( psi -> !psi.isDeleted() );", "originalCommit": "58917c0ff1988692a4906ea00a0e0670d4d251d7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0c469e1350e645b019954827553da9f855b7dcb4", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckOwnershipValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckOwnershipValidationHook.java\nindex b860985187..ee1ddc7c2b 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckOwnershipValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckOwnershipValidationHook.java\n", "chunk": "@@ -134,12 +134,12 @@ public class PreCheckOwnershipValidationHook\n         if ( strategy.isDelete() )\n         {\n             ProgramInstance pi = context.getProgramInstance( enrollment.getEnrollment() );\n+\n             checkNotNull( pi, PROGRAM_INSTANCE_CANT_BE_NULL );\n \n-            boolean b1 = pi.getProgramStageInstances().stream().anyMatch( psi -> !psi.isDeleted() );\n-            boolean b2 = !user.isAuthorized( Authorities.F_ENROLLMENT_CASCADE_DELETE.getAuthority() );\n-            if ( b1\n-                && b2 )\n+            boolean hasNonDeletedEvents = pi.getProgramStageInstances().stream().anyMatch( psi -> !psi.isDeleted() );\n+            boolean hasNotCascadeDeleteAuthority = !user.isAuthorized( Authorities.F_ENROLLMENT_CASCADE_DELETE.getAuthority() );\n+            if ( hasNonDeletedEvents && hasNotCascadeDeleteAuthority )\n             {\n                 reporter.addError( newReport( TrackerErrorCode.E1103 )\n                     .addArg( user )\n", "next_change": {"commit": "c9dbe7965959518882dbad8401946ed9a65ab742", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckOwnershipValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckOwnershipValidationHook.java\nindex ee1ddc7c2b..2b282f979b 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckOwnershipValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckOwnershipValidationHook.java\n", "chunk": "@@ -138,7 +138,8 @@ public class PreCheckOwnershipValidationHook\n             checkNotNull( pi, PROGRAM_INSTANCE_CANT_BE_NULL );\n \n             boolean hasNonDeletedEvents = pi.getProgramStageInstances().stream().anyMatch( psi -> !psi.isDeleted() );\n-            boolean hasNotCascadeDeleteAuthority = !user.isAuthorized( Authorities.F_ENROLLMENT_CASCADE_DELETE.getAuthority() );\n+            boolean hasNotCascadeDeleteAuthority = !user\n+                .isAuthorized( Authorities.F_ENROLLMENT_CASCADE_DELETE.getAuthority() );\n             if ( hasNonDeletedEvents && hasNotCascadeDeleteAuthority )\n             {\n                 reporter.addError( newReport( TrackerErrorCode.E1103 )\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckOwnershipValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckOwnershipValidationHook.java\nindex b860985187..2317b54d34 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckOwnershipValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckOwnershipValidationHook.java\n", "chunk": "@@ -134,12 +145,13 @@ public class PreCheckOwnershipValidationHook\n         if ( strategy.isDelete() )\n         {\n             ProgramInstance pi = context.getProgramInstance( enrollment.getEnrollment() );\n+\n             checkNotNull( pi, PROGRAM_INSTANCE_CANT_BE_NULL );\n \n-            boolean b1 = pi.getProgramStageInstances().stream().anyMatch( psi -> !psi.isDeleted() );\n-            boolean b2 = !user.isAuthorized( Authorities.F_ENROLLMENT_CASCADE_DELETE.getAuthority() );\n-            if ( b1\n-                && b2 )\n+            boolean hasNonDeletedEvents = pi.getProgramStageInstances().stream().anyMatch( psi -> !psi.isDeleted() );\n+            boolean hasNotCascadeDeleteAuthority = !user\n+                .isAuthorized( Authorities.F_ENROLLMENT_CASCADE_DELETE.getAuthority() );\n+            if ( hasNonDeletedEvents && hasNotCascadeDeleteAuthority )\n             {\n                 reporter.addError( newReport( TrackerErrorCode.E1103 )\n                     .addArg( user )\n", "next_change": {"commit": "3e3b32e56ff5554a0095396eddffceac65b6b8de", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckOwnershipValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckOwnershipValidationHook.java\nindex 2317b54d34..fc667701db 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckOwnershipValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckOwnershipValidationHook.java\n", "chunk": "@@ -151,12 +148,8 @@ public class PreCheckOwnershipValidationHook\n             boolean hasNonDeletedEvents = pi.getProgramStageInstances().stream().anyMatch( psi -> !psi.isDeleted() );\n             boolean hasNotCascadeDeleteAuthority = !user\n                 .isAuthorized( Authorities.F_ENROLLMENT_CASCADE_DELETE.getAuthority() );\n-            if ( hasNonDeletedEvents && hasNotCascadeDeleteAuthority )\n-            {\n-                reporter.addError( newReport( TrackerErrorCode.E1103 )\n-                    .addArg( user )\n-                    .addArg( pi ) );\n-            }\n+            \n+            addErrorIf( () -> hasNonDeletedEvents && hasNotCascadeDeleteAuthority, reporter, E1103, user, pi );\n         }\n \n         // Check acting user is allowed to change/write existing pi and program\n", "next_change": {"commit": "d095f2d4cf9aaac1e9aa973d4da6aa2f96104cc8", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckOwnershipValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckOwnershipValidationHook.java\nindex fc667701db..35173b988c 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckOwnershipValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckOwnershipValidationHook.java\n", "chunk": "@@ -148,7 +155,7 @@ public class PreCheckOwnershipValidationHook\n             boolean hasNonDeletedEvents = pi.getProgramStageInstances().stream().anyMatch( psi -> !psi.isDeleted() );\n             boolean hasNotCascadeDeleteAuthority = !user\n                 .isAuthorized( Authorities.F_ENROLLMENT_CASCADE_DELETE.getAuthority() );\n-            \n+\n             addErrorIf( () -> hasNonDeletedEvents && hasNotCascadeDeleteAuthority, reporter, E1103, user, pi );\n         }\n \n", "next_change": {"commit": "3e799d196b8f73ad216ea100a07ddd5f7dfc53e0", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckOwnershipValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckOwnershipValidationHook.java\nindex 35173b988c..c0ddf66c89 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckOwnershipValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckOwnershipValidationHook.java\n", "chunk": "@@ -152,7 +149,7 @@ public class PreCheckOwnershipValidationHook\n \n             checkNotNull( pi, PROGRAM_INSTANCE_CANT_BE_NULL );\n \n-            boolean hasNonDeletedEvents = pi.getProgramStageInstances().stream().anyMatch( psi -> !psi.isDeleted() );\n+            boolean hasNonDeletedEvents = context.programInstanceHasEvents( pi.getUid() );\n             boolean hasNotCascadeDeleteAuthority = !user\n                 .isAuthorized( Authorities.F_ENROLLMENT_CASCADE_DELETE.getAuthority() );\n \n", "next_change": {"commit": "7b96fb3ee32dc67e5686ce315d2a041825a74630", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckOwnershipValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckOwnershipValidationHook.java\nindex c0ddf66c89..96d2673091 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckOwnershipValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckOwnershipValidationHook.java\n", "chunk": "@@ -156,39 +125,8 @@ public class PreCheckOwnershipValidationHook\n             addErrorIf( () -> hasNonDeletedEvents && hasNotCascadeDeleteAuthority, reporter, E1103, user, pi );\n         }\n \n-        // Check acting user is allowed to change/write existing pi and program\n-        if ( strategy.isUpdateOrDelete() )\n-        {\n-            ProgramInstance programInstance = context.getProgramInstance( enrollment.getEnrollment() );\n-            trackerImportAccessManager\n-                .checkWriteEnrollmentAccess( reporter, programInstance.getProgram(), tei.getUid(), organisationUnit );\n-        }\n-\n-        if ( tei != null )\n-        {\n-            trackerImportAccessManager.checkWriteEnrollmentAccess( reporter, program,\n-                tei.getUid(), tei.getOrganisationUnit() );// This orgUnit could not be in the Preheat because is part of\n-                                                          // an already persisted Entity\n-        }\n-        else\n-        {\n-            final Optional<ReferenceTrackerEntity> trackedEntity = context\n-                .getReference( enrollment.getTrackedEntity() );\n-\n-            if ( trackedEntity.isPresent() )\n-            {\n-                // We need to retrieve the orgUnit from the Preheat getting the uid from the TEI\n-                // in the payload\n-                trackerImportAccessManager.checkWriteEnrollmentAccess( reporter, program,\n-                    trackedEntity.get().getUid(),\n-                    context.getOrganisationUnit( getOrgUnitUidFromTei( context,\n-                        trackedEntity.get().getUid() ) ) );\n-            }\n-            else\n-            {\n-                // TODO this should be caught by earlier validator\n-            }\n-        }\n+        trackerImportAccessManager.checkWriteEnrollmentAccess( reporter, program,\n+            enrollment.getTrackedEntity(), getOrgUnitFromTei( context, enrollment.getTrackedEntity() ) );\n     }\n \n     @Override\n", "next_change": {"commit": "8bdc3aa8cec1e4b0b82e04b34b24cf941aae127a", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckOwnershipValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckOwnershipValidationHook.java\nindex 96d2673091..e5f78b605a 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckOwnershipValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckOwnershipValidationHook.java\n", "chunk": "@@ -110,19 +109,14 @@ public class PreCheckOwnershipValidationHook\n         User user = bundle.getUser();\n         Program program = context.getProgram( enrollment.getProgram() );\n \n-        checkNotNull( user, USER_CANT_BE_NULL );\n-\n         if ( strategy.isDelete() )\n         {\n-            ProgramInstance pi = context.getProgramInstance( enrollment.getEnrollment() );\n-\n-            checkNotNull( pi, PROGRAM_INSTANCE_CANT_BE_NULL );\n-\n-            boolean hasNonDeletedEvents = context.programInstanceHasEvents( pi.getUid() );\n+            boolean hasNonDeletedEvents = context.programInstanceHasEvents( enrollment.getEnrollment() );\n             boolean hasNotCascadeDeleteAuthority = !user\n                 .isAuthorized( Authorities.F_ENROLLMENT_CASCADE_DELETE.getAuthority() );\n \n-            addErrorIf( () -> hasNonDeletedEvents && hasNotCascadeDeleteAuthority, reporter, E1103, user, pi );\n+            addErrorIf( () -> hasNonDeletedEvents && hasNotCascadeDeleteAuthority, reporter, E1103, user,\n+                enrollment.getEnrollment() );\n         }\n \n         trackerImportAccessManager.checkWriteEnrollmentAccess( reporter, program,\n", "next_change": {"commit": "314988e32cd6b86d7010c4a46e17fd3c3d1b9cc3", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckOwnershipValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckOwnershipValidationHook.java\nindex e5f78b605a..47a7267800 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckOwnershipValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckOwnershipValidationHook.java\n", "chunk": "@@ -120,7 +122,7 @@ public class PreCheckOwnershipValidationHook\n         }\n \n         trackerImportAccessManager.checkWriteEnrollmentAccess( reporter, program,\n-            enrollment.getTrackedEntity(), getOrgUnitFromTei( context, enrollment.getTrackedEntity() ) );\n+            enrollment.getTrackedEntity(), getOrgUnitFromTei( context, enrollment.getTrackedEntity() ), ownerOrgUnit );\n     }\n \n     @Override\n", "next_change": null}]}}]}}]}}]}}, {"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckOwnershipValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckOwnershipValidationHook.java\nindex fc667701db..35173b988c 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckOwnershipValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckOwnershipValidationHook.java\n", "chunk": "@@ -157,11 +164,18 @@ public class PreCheckOwnershipValidationHook\n         {\n             ProgramInstance programInstance = context.getProgramInstance( enrollment.getEnrollment() );\n             trackerImportAccessManager\n-                .checkWriteEnrollmentAccess( reporter, programInstance.getProgram(), programInstance );\n+                .checkWriteEnrollmentAccess( reporter, programInstance.getProgram(), tei.getUid(), organisationUnit );\n         }\n \n-        trackerImportAccessManager.checkWriteEnrollmentAccess( reporter, program,\n-            new ProgramInstance( program, tei, organisationUnit ) );\n+        if (tei != null) {\n+            trackerImportAccessManager.checkWriteEnrollmentAccess( reporter, program,\n+                    tei.getUid(), tei.getOrganisationUnit() );// This orgUnit could not be in the Preheat because is part of an already persisted Entity\n+        } else {\n+            trackerImportAccessManager.checkWriteEnrollmentAccess( reporter, program,\n+                    context.getReference( enrollment.getTrackedEntity() ).get().getUid(),\n+                    context.getOrganisationUnit(getOrgUnitUidFromTei(context, context.getReference( enrollment.getTrackedEntity() ).get().getUid()) ));\n+            // We need to retrieve the orgUnit from the Preheat getting the uid from the TEI in the payload\n+        }\n     }\n \n     @Override\n", "next_change": {"commit": "0bf55d776481f6511e5f9ebca5de1f2cf79777c0", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckOwnershipValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckOwnershipValidationHook.java\nindex 35173b988c..ad26c68267 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckOwnershipValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckOwnershipValidationHook.java\n", "chunk": "@@ -167,14 +164,30 @@ public class PreCheckOwnershipValidationHook\n                 .checkWriteEnrollmentAccess( reporter, programInstance.getProgram(), tei.getUid(), organisationUnit );\n         }\n \n-        if (tei != null) {\n-            trackerImportAccessManager.checkWriteEnrollmentAccess( reporter, program,\n-                    tei.getUid(), tei.getOrganisationUnit() );// This orgUnit could not be in the Preheat because is part of an already persisted Entity\n-        } else {\n+        if ( tei != null )\n+        {\n             trackerImportAccessManager.checkWriteEnrollmentAccess( reporter, program,\n-                    context.getReference( enrollment.getTrackedEntity() ).get().getUid(),\n-                    context.getOrganisationUnit(getOrgUnitUidFromTei(context, context.getReference( enrollment.getTrackedEntity() ).get().getUid()) ));\n-            // We need to retrieve the orgUnit from the Preheat getting the uid from the TEI in the payload\n+                tei.getUid(), tei.getOrganisationUnit() );// This orgUnit could not be in the Preheat because is part of\n+                                                          // an already persisted Entity\n+        }\n+        else\n+        {\n+            final Optional<ReferenceTrackerEntity> trackedEntity = context\n+                .getReference( enrollment.getTrackedEntity() );\n+\n+            if ( trackedEntity.isPresent() )\n+            {\n+                // We need to retrieve the orgUnit from the Preheat getting the uid from the TEI\n+                // in the payload\n+                trackerImportAccessManager.checkWriteEnrollmentAccess( reporter, program,\n+                    trackedEntity.get().getUid(),\n+                    context.getOrganisationUnit( getOrgUnitUidFromTei( context,\n+                        trackedEntity.get().getUid() ) ) );\n+            }\n+            else\n+            {\n+                // TODO this should be caught by earlier validator\n+            }\n         }\n     }\n \n", "next_change": {"commit": "7b96fb3ee32dc67e5686ce315d2a041825a74630", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckOwnershipValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckOwnershipValidationHook.java\nindex ad26c68267..96d2673091 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckOwnershipValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckOwnershipValidationHook.java\n", "chunk": "@@ -149,46 +118,15 @@ public class PreCheckOwnershipValidationHook\n \n             checkNotNull( pi, PROGRAM_INSTANCE_CANT_BE_NULL );\n \n-            boolean hasNonDeletedEvents = pi.getProgramStageInstances().stream().anyMatch( psi -> !psi.isDeleted() );\n+            boolean hasNonDeletedEvents = context.programInstanceHasEvents( pi.getUid() );\n             boolean hasNotCascadeDeleteAuthority = !user\n                 .isAuthorized( Authorities.F_ENROLLMENT_CASCADE_DELETE.getAuthority() );\n \n             addErrorIf( () -> hasNonDeletedEvents && hasNotCascadeDeleteAuthority, reporter, E1103, user, pi );\n         }\n \n-        // Check acting user is allowed to change/write existing pi and program\n-        if ( strategy.isUpdateOrDelete() )\n-        {\n-            ProgramInstance programInstance = context.getProgramInstance( enrollment.getEnrollment() );\n-            trackerImportAccessManager\n-                .checkWriteEnrollmentAccess( reporter, programInstance.getProgram(), tei.getUid(), organisationUnit );\n-        }\n-\n-        if ( tei != null )\n-        {\n-            trackerImportAccessManager.checkWriteEnrollmentAccess( reporter, program,\n-                tei.getUid(), tei.getOrganisationUnit() );// This orgUnit could not be in the Preheat because is part of\n-                                                          // an already persisted Entity\n-        }\n-        else\n-        {\n-            final Optional<ReferenceTrackerEntity> trackedEntity = context\n-                .getReference( enrollment.getTrackedEntity() );\n-\n-            if ( trackedEntity.isPresent() )\n-            {\n-                // We need to retrieve the orgUnit from the Preheat getting the uid from the TEI\n-                // in the payload\n-                trackerImportAccessManager.checkWriteEnrollmentAccess( reporter, program,\n-                    trackedEntity.get().getUid(),\n-                    context.getOrganisationUnit( getOrgUnitUidFromTei( context,\n-                        trackedEntity.get().getUid() ) ) );\n-            }\n-            else\n-            {\n-                // TODO this should be caught by earlier validator\n-            }\n-        }\n+        trackerImportAccessManager.checkWriteEnrollmentAccess( reporter, program,\n+            enrollment.getTrackedEntity(), getOrgUnitFromTei( context, enrollment.getTrackedEntity() ) );\n     }\n \n     @Override\n", "next_change": {"commit": "8bdc3aa8cec1e4b0b82e04b34b24cf941aae127a", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckOwnershipValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckOwnershipValidationHook.java\nindex 96d2673091..e5f78b605a 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckOwnershipValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckOwnershipValidationHook.java\n", "chunk": "@@ -110,19 +109,14 @@ public class PreCheckOwnershipValidationHook\n         User user = bundle.getUser();\n         Program program = context.getProgram( enrollment.getProgram() );\n \n-        checkNotNull( user, USER_CANT_BE_NULL );\n-\n         if ( strategy.isDelete() )\n         {\n-            ProgramInstance pi = context.getProgramInstance( enrollment.getEnrollment() );\n-\n-            checkNotNull( pi, PROGRAM_INSTANCE_CANT_BE_NULL );\n-\n-            boolean hasNonDeletedEvents = context.programInstanceHasEvents( pi.getUid() );\n+            boolean hasNonDeletedEvents = context.programInstanceHasEvents( enrollment.getEnrollment() );\n             boolean hasNotCascadeDeleteAuthority = !user\n                 .isAuthorized( Authorities.F_ENROLLMENT_CASCADE_DELETE.getAuthority() );\n \n-            addErrorIf( () -> hasNonDeletedEvents && hasNotCascadeDeleteAuthority, reporter, E1103, user, pi );\n+            addErrorIf( () -> hasNonDeletedEvents && hasNotCascadeDeleteAuthority, reporter, E1103, user,\n+                enrollment.getEnrollment() );\n         }\n \n         trackerImportAccessManager.checkWriteEnrollmentAccess( reporter, program,\n", "next_change": {"commit": "314988e32cd6b86d7010c4a46e17fd3c3d1b9cc3", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckOwnershipValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckOwnershipValidationHook.java\nindex e5f78b605a..47a7267800 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckOwnershipValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckOwnershipValidationHook.java\n", "chunk": "@@ -120,7 +122,7 @@ public class PreCheckOwnershipValidationHook\n         }\n \n         trackerImportAccessManager.checkWriteEnrollmentAccess( reporter, program,\n-            enrollment.getTrackedEntity(), getOrgUnitFromTei( context, enrollment.getTrackedEntity() ) );\n+            enrollment.getTrackedEntity(), getOrgUnitFromTei( context, enrollment.getTrackedEntity() ), ownerOrgUnit );\n     }\n \n     @Override\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "message": "Merge commit", "committedDate": null}, {"oid": "3e3dc98d92f0c13fb56cf17894eab06a78842133", "committedDate": "2020-08-04 17:20:37 +0200", "message": "feat: Enrollment/Events note persistence"}, {"oid": "3e3b32e56ff5554a0095396eddffceac65b6b8de", "committedDate": "2020-10-27 09:56:50 +0100", "message": "refactor: simplified calls to error reporting (#6437)"}, {"oid": "d095f2d4cf9aaac1e9aa973d4da6aa2f96104cc8", "committedDate": "2020-11-11 13:49:13 +0100", "message": "fix: allow validation to reference entities in the payload (#6617)"}, {"oid": "6e28dbfdaea7ceacbe560fe82ddba1e94c6cd203", "committedDate": "2020-11-11 17:41:55 +0100", "message": "fix: Exception when importing TEI with relationship [DHIS2-9856] (#6552)"}, {"oid": "0bf55d776481f6511e5f9ebca5de1f2cf79777c0", "committedDate": "2020-11-19 13:55:46 +0100", "message": "refactor: New Tracker Error reporting refactor (#6706)"}, {"oid": "3e799d196b8f73ad216ea100a07ddd5f7dfc53e0", "committedDate": "2020-11-30 16:37:14 +0100", "message": "fix: remove long running transaction during Tracker Import (#6782)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "15ca8426c10f470381f68bcb39b0be02c4fbfd09", "committedDate": "2021-02-10 10:35:28 +0100", "message": "fix: [DHIS2-10459] Fix reference structure in Preheat used in the validation stage (#7326)"}, {"oid": "20dfefe359779d7e1c1921ba920465227e72f071", "committedDate": "2021-05-25 12:55:24 +0200", "message": "fix: Remove validations from objects deletion service in new tracker importer [DHIS2-10789] (#8053)"}, {"oid": "fe04922e144ac69367a99840d5518edda2d67f38", "committedDate": "2021-06-03 08:17:10 +0200", "message": "fix: Make program field read-only in event payload [DHIS2-11225] (#8086)"}, {"oid": "aff1cb136bdfdf4af8213f8878967be42f5687e9", "committedDate": "2021-06-11 10:58:03 +0200", "message": "fix: Get correct program stage from preheated Program [DHIS2-11225] (#8175)"}, {"oid": "7b96fb3ee32dc67e5686ce315d2a041825a74630", "committedDate": "2021-06-21 10:46:39 +0200", "message": "refactor: Refactor some validators and improved test coverage [TECH-589] (#8234)"}, {"oid": "8bdc3aa8cec1e4b0b82e04b34b24cf941aae127a", "committedDate": "2021-06-22 15:18:05 +0200", "message": "fix: Add unit test for check ownership validator [TECH-589] (#8261)"}, {"oid": "314988e32cd6b86d7010c4a46e17fd3c3d1b9cc3", "committedDate": "2021-08-31 22:03:14 +0200", "message": "fix: ownership validation and preheating in new tracker importer [DHIS2-11223] (#8158)"}, {"oid": "e72a194b035dc4f76df0c9cdaf7701a299b1558a", "committedDate": "2021-10-05 13:25:05 +0200", "message": "fix: Allow TEI updates in search scope [DHIS2-11910] (2.38) (#8921)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY5MTkzMQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r449691931", "body": "Are we assuming that the programStage param is null when the program does not have registration?", "bodyText": "Are we assuming that the programStage param is null when the program does not have registration?", "bodyHTML": "<p dir=\"auto\">Are we assuming that the programStage param is null when the program does not have registration?</p>", "author": "Bekkalizer", "createdAt": "2020-07-03T19:49:22Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckOwnershipValidationHook.java", "diffHunk": "@@ -0,0 +1,235 @@\n+package org.hisp.dhis.tracker.validation.hooks;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.hisp.dhis.category.CategoryOptionCombo;\n+import org.hisp.dhis.event.EventStatus;\n+import org.hisp.dhis.organisationunit.OrganisationUnit;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.program.ProgramInstance;\n+import org.hisp.dhis.program.ProgramStage;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.security.Authorities;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+import org.hisp.dhis.trackedentity.TrackedEntityType;\n+import org.hisp.dhis.tracker.TrackerImportStrategy;\n+import org.hisp.dhis.tracker.bundle.TrackerBundle;\n+import org.hisp.dhis.tracker.domain.Enrollment;\n+import org.hisp.dhis.tracker.domain.Event;\n+import org.hisp.dhis.tracker.domain.TrackedEntity;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n+import org.hisp.dhis.tracker.validation.TrackerImportValidationContext;\n+import org.hisp.dhis.tracker.validation.service.TrackerImportAccessManager;\n+import org.hisp.dhis.user.User;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import static com.google.api.client.util.Preconditions.checkNotNull;\n+import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n+import static org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors.ENROLLMENT_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors.EVENT_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors.ORGANISATION_UNIT_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors.PROGRAM_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors.PROGRAM_INSTANCE_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors.TRACKED_ENTITY_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors.TRACKED_ENTITY_INSTANCE_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors.USER_CANT_BE_NULL;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+@Component\n+public class PreCheckOwnershipValidationHook\n+    extends AbstractTrackerDtoValidationHook\n+{\n+    @Autowired\n+    private TrackerImportAccessManager trackerImportAccessManager;\n+\n+    @Override\n+    public void validateTrackedEntity( ValidationErrorReporter reporter, TrackedEntity trackedEntity )\n+    {\n+        TrackerImportValidationContext context = reporter.getValidationContext();\n+        TrackerImportStrategy strategy = context.getStrategy( trackedEntity );\n+        TrackerBundle bundle = context.getBundle();\n+        User user = bundle.getUser();\n+\n+        checkNotNull( user, USER_CANT_BE_NULL );\n+        checkNotNull( bundle.getUser(), USER_CANT_BE_NULL );\n+        checkNotNull( trackedEntity, TRACKED_ENTITY_CANT_BE_NULL );\n+\n+        if ( strategy.isDelete() )\n+        {\n+            TrackedEntityInstance tei = context.getTrackedEntityInstance( trackedEntity.getTrackedEntity() );\n+            checkNotNull( tei, TrackerImporterAssertErrors.TRACKED_ENTITY_INSTANCE_CANT_BE_NULL );\n+\n+            if ( tei.getProgramInstances().stream().anyMatch( pi -> !pi.isDeleted() )\n+                && !user.isAuthorized( Authorities.F_TEI_CASCADE_DELETE.getAuthority() ) )\n+            {\n+                reporter.addError( newReport( TrackerErrorCode.E1100 )\n+                    .addArg( bundle.getUser() )\n+                    .addArg( tei ) );\n+            }\n+        }\n+\n+        // Check acting user is allowed to change/write existing tei type\n+        if ( strategy.isUpdateOrDelete() )\n+        {\n+            TrackedEntityInstance tei = context.getTrackedEntityInstance( trackedEntity.getTrackedEntity() );\n+            TrackedEntityType trackedEntityType = tei.getTrackedEntityType();\n+            trackerImportAccessManager.checkTeiTypeWriteAccess( reporter, trackedEntityType );\n+        }\n+\n+        TrackedEntityType trackedEntityType = context\n+            .getTrackedEntityType( trackedEntity.getTrackedEntityType() );\n+        trackerImportAccessManager.checkTeiTypeWriteAccess( reporter, trackedEntityType );\n+    }\n+\n+    @Override\n+    public void validateEnrollment( ValidationErrorReporter reporter, Enrollment enrollment )\n+    {\n+        TrackerImportValidationContext context = reporter.getValidationContext();\n+        TrackerImportStrategy strategy = context.getStrategy( enrollment );\n+        TrackerBundle bundle = context.getBundle();\n+        User user = bundle.getUser();\n+\n+        checkNotNull( user, USER_CANT_BE_NULL );\n+        checkNotNull( enrollment, ENROLLMENT_CANT_BE_NULL );\n+        checkNotNull( enrollment.getOrgUnit(), ORGANISATION_UNIT_CANT_BE_NULL );\n+\n+        Program program = context.getProgram( enrollment.getProgram() );\n+        OrganisationUnit organisationUnit = context.getOrganisationUnit( enrollment.getOrgUnit() );\n+        TrackedEntityInstance tei = context.getTrackedEntityInstance( enrollment.getTrackedEntity() );\n+\n+        checkNotNull( tei, TRACKED_ENTITY_INSTANCE_CANT_BE_NULL );\n+        checkNotNull( organisationUnit, ORGANISATION_UNIT_CANT_BE_NULL );\n+        checkNotNull( program, PROGRAM_CANT_BE_NULL );\n+\n+        if ( strategy.isDelete() )\n+        {\n+            ProgramInstance pi = context.getProgramInstance( enrollment.getEnrollment() );\n+            checkNotNull( pi, PROGRAM_INSTANCE_CANT_BE_NULL );\n+\n+            boolean b1 = pi.getProgramStageInstances().stream().anyMatch( psi -> !psi.isDeleted() );\n+            boolean b2 = !user.isAuthorized( Authorities.F_ENROLLMENT_CASCADE_DELETE.getAuthority() );\n+            if ( b1\n+                && b2 )\n+            {\n+                reporter.addError( newReport( TrackerErrorCode.E1103 )\n+                    .addArg( user )\n+                    .addArg( pi ) );\n+            }\n+        }\n+\n+        // Check acting user is allowed to change/write existing pi and program\n+        if ( strategy.isUpdateOrDelete() )\n+        {\n+            ProgramInstance programInstance = context.getProgramInstance( enrollment.getEnrollment() );\n+            trackerImportAccessManager\n+                .checkWriteEnrollmentAccess( reporter, programInstance.getProgram(), programInstance );\n+        }\n+\n+        trackerImportAccessManager.checkWriteEnrollmentAccess( reporter, program,\n+            new ProgramInstance( program, tei, organisationUnit ) );\n+    }\n+\n+    @Override\n+    public void validateEvent( ValidationErrorReporter reporter, Event event )\n+    {\n+        TrackerImportValidationContext context = reporter.getValidationContext();\n+        TrackerImportStrategy strategy = context.getStrategy( event );\n+        TrackerBundle bundle = context.getBundle();\n+        User user = bundle.getUser();\n+\n+        checkNotNull( user, USER_CANT_BE_NULL );\n+        checkNotNull( event, EVENT_CANT_BE_NULL );\n+\n+        OrganisationUnit organisationUnit = context.getOrganisationUnit( event.getOrgUnit() );\n+        Program program = context.getProgram( event.getProgram() );\n+        ProgramStage programStage = context.getProgramStage( event.getProgramStage() );\n+        ProgramInstance programInstance = context.getProgramInstance( event.getEnrollment() );\n+\n+        // Check acting user is allowed to change existing/write event\n+        if ( strategy.isUpdateOrDelete() )\n+        {\n+            validateUpdateAndDeleteEvent( reporter, event, context.getProgramStageInstance( event.getEvent() ) );\n+        }\n+\n+        CategoryOptionCombo categoryOptionCombo = context\n+            .getCategoryOptionCombo( event.getAttributeOptionCombo() );\n+\n+        validateCreateEvent( reporter, user,\n+            categoryOptionCombo,\n+            programStage,\n+            programInstance,\n+            organisationUnit,\n+            program );\n+    }\n+\n+    protected void validateCreateEvent( ValidationErrorReporter reporter, User actingUser,\n+        CategoryOptionCombo categoryOptionCombo, ProgramStage programStage, ProgramInstance programInstance,\n+        OrganisationUnit organisationUnit, Program program )\n+    {\n+        checkNotNull( organisationUnit, ORGANISATION_UNIT_CANT_BE_NULL );\n+        checkNotNull( actingUser, USER_CANT_BE_NULL );\n+        checkNotNull( program, PROGRAM_CANT_BE_NULL );\n+\n+        boolean noProgramStageAndProgramIsWithoutReg = programStage == null && program.isWithoutRegistration();\n+\n+        programStage = noProgramStageAndProgramIsWithoutReg ? program.getProgramStageByStage( 1 ) : programStage;", "originalCommit": "58917c0ff1988692a4906ea00a0e0670d4d251d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAzNTU0Ng==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r450035546", "bodyText": "This is copied from the existing old code, I'm not sure why this is written like this, to me it looks like when programStage == null && program.isWithoutRegistration() then it will pick program.getProgramStageByStage( 1 ) in all other cases it til pick the incoming/parameter programStage.", "author": "netroms", "createdAt": "2020-07-06T07:34:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY5MTkzMQ=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "d095f2d4cf9aaac1e9aa973d4da6aa2f96104cc8", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckOwnershipValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckOwnershipValidationHook.java\nindex b860985187..35173b988c 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckOwnershipValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckOwnershipValidationHook.java\n", "chunk": "@@ -175,26 +194,46 @@ public class PreCheckOwnershipValidationHook\n         ProgramStage programStage = context.getProgramStage( event.getProgramStage() );\n         ProgramInstance programInstance = context.getProgramInstance( event.getEnrollment() );\n \n+        String teiUid = null;\n+\n+        if ( programInstance == null )\n+        {\n+            Optional<ReferenceTrackerEntity> reference = context.getReference( event.getEnrollment() );\n+            if ( reference.isPresent() )\n+            {\n+                teiUid = reference.get().getParentUid();\n+            }\n+        }\n+        else\n+        {\n+            if ( programInstance.getEntityInstance() != null ) // TODO luciano: we should add a early check where validation fails if a pi has no TEI and program is with registration\n+            {\n+                teiUid = programInstance.getEntityInstance().getUid();\n+            }\n+        }\n+        CategoryOptionCombo categoryOptionCombo = context.getCategoryOptionCombo( event.getAttributeOptionCombo() );\n+\n         // Check acting user is allowed to change existing/write event\n         if ( strategy.isUpdateOrDelete() )\n         {\n-            validateUpdateAndDeleteEvent( reporter, event, context.getProgramStageInstance( event.getEvent() ) );\n+            validateUpdateAndDeleteEvent( reporter, event, context.getProgramStageInstance( event.getEvent() ),\n+                categoryOptionCombo,\n+                programStage,\n+                teiUid,\n+                organisationUnit );\n         }\n \n-        CategoryOptionCombo categoryOptionCombo = context\n-            .getCategoryOptionCombo( event.getAttributeOptionCombo() );\n-\n         validateCreateEvent( reporter, user,\n             categoryOptionCombo,\n             programStage,\n-            programInstance,\n+            teiUid,\n             organisationUnit,\n-            program );\n+            program, event.isCreatableInSearchScope());\n     }\n \n-    protected void validateCreateEvent( ValidationErrorReporter reporter, User actingUser,\n-        CategoryOptionCombo categoryOptionCombo, ProgramStage programStage, ProgramInstance programInstance,\n-        OrganisationUnit organisationUnit, Program program )\n+    protected void validateCreateEvent(ValidationErrorReporter reporter, User actingUser,\n+                                       CategoryOptionCombo categoryOptionCombo, ProgramStage programStage, String teiUid,\n+                                       OrganisationUnit organisationUnit, Program program, boolean isCreatableInSearchScope)\n     {\n         checkNotNull( organisationUnit, ORGANISATION_UNIT_CANT_BE_NULL );\n         checkNotNull( actingUser, USER_CANT_BE_NULL );\n", "next_change": {"commit": "6e28dbfdaea7ceacbe560fe82ddba1e94c6cd203", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckOwnershipValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckOwnershipValidationHook.java\nindex 35173b988c..223b6ee310 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckOwnershipValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckOwnershipValidationHook.java\n", "chunk": "@@ -231,9 +232,15 @@ public class PreCheckOwnershipValidationHook\n             program, event.isCreatableInSearchScope());\n     }\n \n+    @Override\n+    public void validateRelationship( ValidationErrorReporter reporter, Relationship relationship )\n+    {\n+        // NOTHING TO DO HERE\n+    }\n+    \n     protected void validateCreateEvent(ValidationErrorReporter reporter, User actingUser,\n-                                       CategoryOptionCombo categoryOptionCombo, ProgramStage programStage, String teiUid,\n-                                       OrganisationUnit organisationUnit, Program program, boolean isCreatableInSearchScope)\n+           CategoryOptionCombo categoryOptionCombo, ProgramStage programStage, String teiUid,\n+           OrganisationUnit organisationUnit, Program program, boolean isCreatableInSearchScope)\n     {\n         checkNotNull( organisationUnit, ORGANISATION_UNIT_CANT_BE_NULL );\n         checkNotNull( actingUser, USER_CANT_BE_NULL );\n", "next_change": {"commit": "0bf55d776481f6511e5f9ebca5de1f2cf79777c0", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckOwnershipValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckOwnershipValidationHook.java\nindex 223b6ee310..ad26c68267 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckOwnershipValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckOwnershipValidationHook.java\n", "chunk": "@@ -237,10 +251,10 @@ public class PreCheckOwnershipValidationHook\n     {\n         // NOTHING TO DO HERE\n     }\n-    \n-    protected void validateCreateEvent(ValidationErrorReporter reporter, User actingUser,\n-           CategoryOptionCombo categoryOptionCombo, ProgramStage programStage, String teiUid,\n-           OrganisationUnit organisationUnit, Program program, boolean isCreatableInSearchScope)\n+\n+    protected void validateCreateEvent( ValidationErrorReporter reporter, User actingUser,\n+        CategoryOptionCombo categoryOptionCombo, ProgramStage programStage, String teiUid,\n+        OrganisationUnit organisationUnit, Program program, boolean isCreatableInSearchScope )\n     {\n         checkNotNull( organisationUnit, ORGANISATION_UNIT_CANT_BE_NULL );\n         checkNotNull( actingUser, USER_CANT_BE_NULL );\n", "next_change": {"commit": "314988e32cd6b86d7010c4a46e17fd3c3d1b9cc3", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckOwnershipValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckOwnershipValidationHook.java\nindex ad26c68267..47a7267800 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckOwnershipValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckOwnershipValidationHook.java\n", "chunk": "@@ -254,7 +172,8 @@ public class PreCheckOwnershipValidationHook\n \n     protected void validateCreateEvent( ValidationErrorReporter reporter, User actingUser,\n         CategoryOptionCombo categoryOptionCombo, ProgramStage programStage, String teiUid,\n-        OrganisationUnit organisationUnit, Program program, boolean isCreatableInSearchScope )\n+        OrganisationUnit organisationUnit, OrganisationUnit ownerOrgUnit, Program program,\n+        boolean isCreatableInSearchScope )\n     {\n         checkNotNull( organisationUnit, ORGANISATION_UNIT_CANT_BE_NULL );\n         checkNotNull( actingUser, USER_CANT_BE_NULL );\n", "next_change": null}]}}]}}]}}, {"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckOwnershipValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckOwnershipValidationHook.java\nindex b860985187..35173b988c 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckOwnershipValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckOwnershipValidationHook.java\n", "chunk": "@@ -204,15 +243,14 @@ public class PreCheckOwnershipValidationHook\n \n         programStage = noProgramStageAndProgramIsWithoutReg ? program.getProgramStageByStage( 1 ) : programStage;\n \n-        ProgramStageInstance newProgramStageInstance = new ProgramStageInstance( programInstance, programStage )\n-            .setOrganisationUnit( organisationUnit );\n-        newProgramStageInstance.setAttributeOptionCombo( categoryOptionCombo );\n-\n-        trackerImportAccessManager.checkEventWriteAccess( reporter, newProgramStageInstance );\n+        trackerImportAccessManager.checkEventWriteAccess( reporter, programStage, organisationUnit, categoryOptionCombo,\n+            teiUid,isCreatableInSearchScope ); // TODO: calculate correct isCreatableInSearchScope value\n     }\n \n     protected void validateUpdateAndDeleteEvent( ValidationErrorReporter reporter, Event event,\n-        ProgramStageInstance programStageInstance )\n+        ProgramStageInstance programStageInstance,\n+        CategoryOptionCombo categoryOptionCombo, ProgramStage programStage,\n+        String teiUid, OrganisationUnit organisationUnit )\n     {\n         TrackerImportStrategy strategy = reporter.getValidationContext().getStrategy( event );\n         User user = reporter.getValidationContext().getBundle().getUser();\n", "next_change": {"commit": "aff1cb136bdfdf4af8213f8878967be42f5687e9", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckOwnershipValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckOwnershipValidationHook.java\nindex 35173b988c..2cd4c87a6e 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckOwnershipValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckOwnershipValidationHook.java\n", "chunk": "@@ -244,13 +292,14 @@ public class PreCheckOwnershipValidationHook\n         programStage = noProgramStageAndProgramIsWithoutReg ? program.getProgramStageByStage( 1 ) : programStage;\n \n         trackerImportAccessManager.checkEventWriteAccess( reporter, programStage, organisationUnit, categoryOptionCombo,\n-            teiUid,isCreatableInSearchScope ); // TODO: calculate correct isCreatableInSearchScope value\n+            teiUid, isCreatableInSearchScope ); // TODO: calculate correct\n+                                                // isCreatableInSearchScope\n+                                                // value\n     }\n \n     protected void validateUpdateAndDeleteEvent( ValidationErrorReporter reporter, Event event,\n         ProgramStageInstance programStageInstance,\n-        CategoryOptionCombo categoryOptionCombo, ProgramStage programStage,\n-        String teiUid, OrganisationUnit organisationUnit )\n+        String teiUid )\n     {\n         TrackerImportStrategy strategy = reporter.getValidationContext().getStrategy( event );\n         User user = reporter.getValidationContext().getBundle().getUser();\n", "next_change": {"commit": "314988e32cd6b86d7010c4a46e17fd3c3d1b9cc3", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckOwnershipValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckOwnershipValidationHook.java\nindex 2cd4c87a6e..47a7267800 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckOwnershipValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckOwnershipValidationHook.java\n", "chunk": "@@ -299,7 +192,7 @@ public class PreCheckOwnershipValidationHook\n \n     protected void validateUpdateAndDeleteEvent( ValidationErrorReporter reporter, Event event,\n         ProgramStageInstance programStageInstance,\n-        String teiUid )\n+        String teiUid, OrganisationUnit ownerOrgUnit )\n     {\n         TrackerImportStrategy strategy = reporter.getValidationContext().getStrategy( event );\n         User user = reporter.getValidationContext().getBundle().getUser();\n", "next_change": null}]}}, {"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckOwnershipValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckOwnershipValidationHook.java\nindex 35173b988c..2cd4c87a6e 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckOwnershipValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckOwnershipValidationHook.java\n", "chunk": "@@ -259,8 +308,9 @@ public class PreCheckOwnershipValidationHook\n         checkNotNull( programStageInstance, PROGRAM_INSTANCE_CANT_BE_NULL );\n         checkNotNull( event, EVENT_CANT_BE_NULL );\n \n-        trackerImportAccessManager.checkEventWriteAccess( reporter, programStage, organisationUnit, categoryOptionCombo,\n-            teiUid, programStageInstance.isCreatableInSearchScope() );\n+        trackerImportAccessManager.checkEventWriteAccess( reporter, programStageInstance.getProgramStage(),\n+            programStageInstance.getOrganisationUnit(), programStageInstance.getAttributeOptionCombo(), teiUid,\n+            programStageInstance.isCreatableInSearchScope() );\n \n         if ( strategy.isUpdate()\n             && EventStatus.COMPLETED == programStageInstance.getStatus()\n", "next_change": {"commit": "314988e32cd6b86d7010c4a46e17fd3c3d1b9cc3", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckOwnershipValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckOwnershipValidationHook.java\nindex 2cd4c87a6e..47a7267800 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckOwnershipValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/PreCheckOwnershipValidationHook.java\n", "chunk": "@@ -309,8 +202,9 @@ public class PreCheckOwnershipValidationHook\n         checkNotNull( event, EVENT_CANT_BE_NULL );\n \n         trackerImportAccessManager.checkEventWriteAccess( reporter, programStageInstance.getProgramStage(),\n-            programStageInstance.getOrganisationUnit(), programStageInstance.getAttributeOptionCombo(), teiUid,\n-            programStageInstance.isCreatableInSearchScope() );\n+            programStageInstance.getOrganisationUnit(), ownerOrgUnit,\n+            programStageInstance.getAttributeOptionCombo(),\n+            teiUid, programStageInstance.isCreatableInSearchScope() );\n \n         if ( strategy.isUpdate()\n             && EventStatus.COMPLETED == programStageInstance.getStatus()\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "message": "Merge commit", "committedDate": null}, {"oid": "3e3dc98d92f0c13fb56cf17894eab06a78842133", "committedDate": "2020-08-04 17:20:37 +0200", "message": "feat: Enrollment/Events note persistence"}, {"oid": "3e3b32e56ff5554a0095396eddffceac65b6b8de", "committedDate": "2020-10-27 09:56:50 +0100", "message": "refactor: simplified calls to error reporting (#6437)"}, {"oid": "d095f2d4cf9aaac1e9aa973d4da6aa2f96104cc8", "committedDate": "2020-11-11 13:49:13 +0100", "message": "fix: allow validation to reference entities in the payload (#6617)"}, {"oid": "6e28dbfdaea7ceacbe560fe82ddba1e94c6cd203", "committedDate": "2020-11-11 17:41:55 +0100", "message": "fix: Exception when importing TEI with relationship [DHIS2-9856] (#6552)"}, {"oid": "0bf55d776481f6511e5f9ebca5de1f2cf79777c0", "committedDate": "2020-11-19 13:55:46 +0100", "message": "refactor: New Tracker Error reporting refactor (#6706)"}, {"oid": "3e799d196b8f73ad216ea100a07ddd5f7dfc53e0", "committedDate": "2020-11-30 16:37:14 +0100", "message": "fix: remove long running transaction during Tracker Import (#6782)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "15ca8426c10f470381f68bcb39b0be02c4fbfd09", "committedDate": "2021-02-10 10:35:28 +0100", "message": "fix: [DHIS2-10459] Fix reference structure in Preheat used in the validation stage (#7326)"}, {"oid": "20dfefe359779d7e1c1921ba920465227e72f071", "committedDate": "2021-05-25 12:55:24 +0200", "message": "fix: Remove validations from objects deletion service in new tracker importer [DHIS2-10789] (#8053)"}, {"oid": "fe04922e144ac69367a99840d5518edda2d67f38", "committedDate": "2021-06-03 08:17:10 +0200", "message": "fix: Make program field read-only in event payload [DHIS2-11225] (#8086)"}, {"oid": "aff1cb136bdfdf4af8213f8878967be42f5687e9", "committedDate": "2021-06-11 10:58:03 +0200", "message": "fix: Get correct program stage from preheated Program [DHIS2-11225] (#8175)"}, {"oid": "7b96fb3ee32dc67e5686ce315d2a041825a74630", "committedDate": "2021-06-21 10:46:39 +0200", "message": "refactor: Refactor some validators and improved test coverage [TECH-589] (#8234)"}, {"oid": "8bdc3aa8cec1e4b0b82e04b34b24cf941aae127a", "committedDate": "2021-06-22 15:18:05 +0200", "message": "fix: Add unit test for check ownership validator [TECH-589] (#8261)"}, {"oid": "314988e32cd6b86d7010c4a46e17fd3c3d1b9cc3", "committedDate": "2021-08-31 22:03:14 +0200", "message": "fix: ownership validation and preheating in new tracker importer [DHIS2-11223] (#8158)"}, {"oid": "e72a194b035dc4f76df0c9cdaf7701a299b1558a", "committedDate": "2021-10-05 13:25:05 +0200", "message": "fix: Allow TEI updates in search scope [DHIS2-11910] (2.38) (#8921)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY5MzEwMg==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r449693102", "body": "Is this a TODO, or would you remove it :)", "bodyText": "Is this a TODO, or would you remove it :)", "bodyHTML": "<p dir=\"auto\">Is this a TODO, or would you remove it :)</p>", "author": "Bekkalizer", "createdAt": "2020-07-03T19:56:21Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/preheat/TrackerPreheatServiceTest.java", "diffHunk": "@@ -161,17 +169,22 @@ public void testCollectIdentifiersEvents() throws IOException\n         assertTrue( dataElements.contains( \"gfEoDU4GtXK\" ) );\n         assertTrue( dataElements.contains( \"qw67QlOlzdp\" ) );\n \n-        assertTrue( collectedMap.containsKey( Program.class ) );\n-        assertTrue( collectedMap.containsKey( ProgramStage.class ) );\n-        assertTrue( collectedMap.containsKey( OrganisationUnit.class ) );\n+        Set<String> categoryCombos = collectedMap.get( CategoryOptionCombo.class );\n+        assertTrue( categoryCombos.contains( \"HllvX50cXC0\" ) );\n+\n+        Set<String> categoryOptions = collectedMap.get( CategoryOption.class );\n+        assertTrue( categoryOptions.contains( \"xYerKDKCefk\" ) );\n+//        assertTrue( categoryOptions.contains( \"XXX\" ) );", "originalCommit": "58917c0ff1988692a4906ea00a0e0670d4d251d7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0c469e1350e645b019954827553da9f855b7dcb4", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/preheat/TrackerPreheatServiceTest.java b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/preheat/TrackerPreheatServiceTest.java\nindex f0675206be..a2443756b4 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/preheat/TrackerPreheatServiceTest.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/preheat/TrackerPreheatServiceTest.java\n", "chunk": "@@ -174,7 +174,6 @@ public class TrackerPreheatServiceTest\n \n         Set<String> categoryOptions = collectedMap.get( CategoryOption.class );\n         assertTrue( categoryOptions.contains( \"xYerKDKCefk\" ) );\n-//        assertTrue( categoryOptions.contains( \"XXX\" ) );\n     }\n \n     @Test\n", "next_change": null}]}, "revised_code_in_main": {"commit": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/preheat/TrackerPreheatServiceTest.java b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/preheat/TrackerPreheatServiceTest.java\nindex f0675206be..66e12ea9c3 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/preheat/TrackerPreheatServiceTest.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/preheat/TrackerPreheatServiceTest.java\n", "chunk": "@@ -174,7 +174,6 @@ public class TrackerPreheatServiceTest\n \n         Set<String> categoryOptions = collectedMap.get( CategoryOption.class );\n         assertTrue( categoryOptions.contains( \"xYerKDKCefk\" ) );\n-//        assertTrue( categoryOptions.contains( \"XXX\" ) );\n     }\n \n     @Test\n", "next_change": {"commit": "3e799d196b8f73ad216ea100a07ddd5f7dfc53e0", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/preheat/TrackerPreheatServiceTest.java b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/preheat/TrackerPreheatServiceTest.java\nindex 66e12ea9c3..d57b05fc7e 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/preheat/TrackerPreheatServiceTest.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/preheat/TrackerPreheatServiceTest.java\n", "chunk": "@@ -179,7 +127,7 @@ public class TrackerPreheatServiceTest\n     @Test\n     public void testCollectIdentifiersAttributeValues()\n     {\n-        TrackerBundleParams params = TrackerBundleParams.builder()\n+        TrackerImportParams params = TrackerImportParams.builder()\n             .identifiers( TrackerIdentifierParams.builder()\n                 .idScheme(\n                     TrackerIdentifier.builder().idScheme( TrackerIdScheme.ATTRIBUTE ).value( \"ATTR1234567\" ).build() )\n", "next_change": {"commit": "22d5da9d9a812b02eb5acd643112a6b050b5d63c", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/preheat/TrackerPreheatServiceTest.java b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/preheat/TrackerPreheatServiceTest.java\nindex d57b05fc7e..12f9f176e8 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/preheat/TrackerPreheatServiceTest.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/preheat/TrackerPreheatServiceTest.java\n", "chunk": "@@ -116,16 +117,14 @@ public class TrackerPreheatServiceTest extends TrackerTest\n         assertTrue( dataElements.contains( \"JXF90RhgNiI\" ) );\n         assertTrue( dataElements.contains( \"gfEoDU4GtXK\" ) );\n         assertTrue( dataElements.contains( \"qw67QlOlzdp\" ) );\n-\n         Set<String> categoryCombos = collectedMap.get( CategoryOptionCombo.class );\n         assertTrue( categoryCombos.contains( \"HllvX50cXC0\" ) );\n-\n         Set<String> categoryOptions = collectedMap.get( CategoryOption.class );\n         assertTrue( categoryOptions.contains( \"xYerKDKCefk\" ) );\n     }\n \n     @Test\n-    public void testCollectIdentifiersAttributeValues()\n+    void testCollectIdentifiersAttributeValues()\n     {\n         TrackerImportParams params = TrackerImportParams.builder()\n             .identifiers( TrackerIdentifierParams.builder()\n", "next_change": {"commit": "b625410a6aeed719ad4c6307e18cb9569fe8a4d0", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/preheat/TrackerPreheatServiceTest.java b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/preheat/TrackerPreheatServiceTest.java\nindex 12f9f176e8..80f860a468 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/preheat/TrackerPreheatServiceTest.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/preheat/TrackerPreheatServiceTest.java\n", "chunk": "@@ -127,9 +127,10 @@ class TrackerPreheatServiceTest extends TrackerTest\n     void testCollectIdentifiersAttributeValues()\n     {\n         TrackerImportParams params = TrackerImportParams.builder()\n-            .identifiers( TrackerIdentifierParams.builder()\n+            .idSchemes( TrackerIdSchemeParams.builder()\n                 .idScheme(\n-                    TrackerIdentifier.builder().idScheme( TrackerIdScheme.ATTRIBUTE ).value( \"ATTR1234567\" ).build() )\n+                    TrackerIdSchemeParam.builder().idScheme( TrackerIdScheme.ATTRIBUTE ).value( \"ATTR1234567\" )\n+                        .build() )\n                 .build() )\n             .trackedEntities( Lists.newArrayList(\n                 TrackedEntity.builder().trackedEntity( \"TEI12345678\" ).orgUnit( \"OU123456789\" ).build() ) )\n", "next_change": {"commit": "5f63b52ac0a4f426145ae43affa58295f804812a", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/preheat/TrackerPreheatServiceTest.java b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/preheat/TrackerPreheatServiceTest.java\nindex 80f860a468..4f0d256332 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/preheat/TrackerPreheatServiceTest.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/preheat/TrackerPreheatServiceTest.java\n", "chunk": "@@ -129,7 +129,7 @@ class TrackerPreheatServiceTest extends TrackerTest\n         TrackerImportParams params = TrackerImportParams.builder()\n             .idSchemes( TrackerIdSchemeParams.builder()\n                 .idScheme(\n-                    TrackerIdSchemeParam.builder().idScheme( TrackerIdScheme.ATTRIBUTE ).value( \"ATTR1234567\" )\n+                    TrackerIdSchemeParam.builder().idScheme( TrackerIdScheme.ATTRIBUTE ).attributeUid( \"ATTR1234567\" )\n                         .build() )\n                 .build() )\n             .trackedEntities( Lists.newArrayList(\n", "next_change": {"commit": "c3ee623f83ffefe3521e74e071cfead3343a3dda", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/preheat/TrackerPreheatServiceTest.java b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/preheat/TrackerPreheatServiceTest.java\nindex 4f0d256332..09aa757f72 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/preheat/TrackerPreheatServiceTest.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/preheat/TrackerPreheatServiceTest.java\n", "chunk": "@@ -138,7 +137,7 @@ class TrackerPreheatServiceTest extends TrackerTest\n         assertFalse( params.getTrackedEntities().isEmpty() );\n         assertTrue( params.getEnrollments().isEmpty() );\n         assertTrue( params.getEvents().isEmpty() );\n-        Map<Class<?>, Set<String>> collectedMap = identifierCollector.collect( params, Maps.newHashMap() );\n+        Map<Class<?>, Set<String>> collectedMap = identifierCollector.collect( params );\n         assertTrue( collectedMap.containsKey( TrackedEntity.class ) );\n         Set<String> trackedEntities = collectedMap.get( TrackedEntity.class );\n         assertTrue( collectedMap.containsKey( OrganisationUnit.class ) );\n", "next_change": null}]}}]}}]}}, {"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/preheat/TrackerPreheatServiceTest.java b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/preheat/TrackerPreheatServiceTest.java\nindex d57b05fc7e..12f9f176e8 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/preheat/TrackerPreheatServiceTest.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/preheat/TrackerPreheatServiceTest.java\n", "chunk": "@@ -133,24 +132,16 @@ public class TrackerPreheatServiceTest extends TrackerTest\n                     TrackerIdentifier.builder().idScheme( TrackerIdScheme.ATTRIBUTE ).value( \"ATTR1234567\" ).build() )\n                 .build() )\n             .trackedEntities( Lists.newArrayList(\n-                TrackedEntity.builder()\n-                    .trackedEntity( \"TEI12345678\" )\n-                    .orgUnit( \"OU123456789\" )\n-                    .build() ) )\n+                TrackedEntity.builder().trackedEntity( \"TEI12345678\" ).orgUnit( \"OU123456789\" ).build() ) )\n             .build();\n-\n         assertFalse( params.getTrackedEntities().isEmpty() );\n         assertTrue( params.getEnrollments().isEmpty() );\n         assertTrue( params.getEvents().isEmpty() );\n-\n-        Map<Class<?>, Set<String>> collectedMap = TrackerIdentifierCollector.collect( params );\n-\n+        Map<Class<?>, Set<String>> collectedMap = identifierCollector.collect( params, Maps.newHashMap() );\n         assertTrue( collectedMap.containsKey( TrackedEntity.class ) );\n         Set<String> trackedEntities = collectedMap.get( TrackedEntity.class );\n-\n         assertTrue( collectedMap.containsKey( OrganisationUnit.class ) );\n         Set<String> organisationUnits = collectedMap.get( OrganisationUnit.class );\n-\n         assertTrue( organisationUnits.contains( \"OU123456789\" ) );\n         assertEquals( 1, organisationUnits.size() );\n         assertTrue( trackedEntities.contains( \"TEI12345678\" ) );\n", "next_change": {"commit": "c3ee623f83ffefe3521e74e071cfead3343a3dda", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/preheat/TrackerPreheatServiceTest.java b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/preheat/TrackerPreheatServiceTest.java\nindex 12f9f176e8..09aa757f72 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/preheat/TrackerPreheatServiceTest.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/preheat/TrackerPreheatServiceTest.java\n", "chunk": "@@ -137,7 +137,7 @@ class TrackerPreheatServiceTest extends TrackerTest\n         assertFalse( params.getTrackedEntities().isEmpty() );\n         assertTrue( params.getEnrollments().isEmpty() );\n         assertTrue( params.getEvents().isEmpty() );\n-        Map<Class<?>, Set<String>> collectedMap = identifierCollector.collect( params, Maps.newHashMap() );\n+        Map<Class<?>, Set<String>> collectedMap = identifierCollector.collect( params );\n         assertTrue( collectedMap.containsKey( TrackedEntity.class ) );\n         Set<String> trackedEntities = collectedMap.get( TrackedEntity.class );\n         assertTrue( collectedMap.containsKey( OrganisationUnit.class ) );\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "message": "Merge commit", "committedDate": null}, {"oid": "cb2ee65c0210c0d4b2bd8851789da8d4adfaf04d", "committedDate": "2020-09-07 10:28:21 +0200", "message": "fix: [DHIS2-9287] Fix the stats in the import summary (#6062)"}, {"oid": "8aaeab2ee4dd7a9ffa927147931dff8609ef787a", "committedDate": "2020-09-23 15:33:34 +0200", "message": "chore: Remove unused imports (#6219)"}, {"oid": "ae4d365663ffddc9a34d1cdc0f629fd7b6386e90", "committedDate": "2020-11-03 10:25:55 +0100", "message": "feat: improve note validation during tracker import [TECH-457]"}, {"oid": "3e799d196b8f73ad216ea100a07ddd5f7dfc53e0", "committedDate": "2020-11-30 16:37:14 +0100", "message": "fix: remove long running transaction during Tracker Import (#6782)"}, {"oid": "699074cbe82db1a8e0a5e72edf2a981f3628b54b", "committedDate": "2020-12-07 10:47:48 +0100", "message": "fix: Tracker Identifiers resolution during Tracker import (#6824)"}, {"oid": "cececb7511986f26a3af5bf3d2f4bccb3b2bbda9", "committedDate": "2021-01-04 09:03:14 +0100", "message": "refactor: simplify preheat fetching for reference objects (#7003)"}, {"oid": "16ae2da89c2d883763e33d9d0833f9b033d711c0", "committedDate": "2021-01-05 11:55:44 +0100", "message": "fix: Fix lazy exception for default category combo (#7014)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "5e19605ff1a5eacc26337747a57ba2cec60446ec", "committedDate": "2021-01-14 13:43:29 +0100", "message": "fix: fix program rule assign value implementer [DHIS2-10098] (#7050)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "c0e9b28f4609a84d1287d93bc65f81321e00d78b", "committedDate": "2021-03-30 13:22:16 +0200", "message": "refactor: Removing uid field from tracker entities [TECH-579] (#7790)"}, {"oid": "fe04922e144ac69367a99840d5518edda2d67f38", "committedDate": "2021-06-03 08:17:10 +0200", "message": "fix: Make program field read-only in event payload [DHIS2-11225] (#8086)"}, {"oid": "22d5da9d9a812b02eb5acd643112a6b050b5d63c", "committedDate": "2021-12-16 13:19:38 +0100", "message": "chore: migrate tests to JUnit 5 (#9467)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "c039b8f75c1d965414de926f04540dfaabdd104c", "committedDate": "2022-02-23 13:08:25 +0100", "message": "chore: Clean up service program rule module [TECH-938] (#9885)"}, {"oid": "e65e503e8f993ddb3a0953ec867f4686c1157a88", "committedDate": "2022-03-31 11:15:26 +0200", "message": "chore: prevent mutation of TrackerPreheat.map DHIS2-12563 (#10324)"}, {"oid": "b625410a6aeed719ad4c6307e18cb9569fe8a4d0", "committedDate": "2022-04-04 11:36:08 +0200", "message": "chore: prepare addition of TrackerIdentifier DHIS2-12563 (#10347)"}, {"oid": "5f63b52ac0a4f426145ae43affa58295f804812a", "committedDate": "2022-04-14 13:41:33 +0200", "message": "chore: split domain and view models DHIS2-12563 (#10379)"}, {"oid": "c3ee623f83ffefe3521e74e071cfead3343a3dda", "committedDate": "2022-04-26 12:11:55 +0200", "message": "fix: TrackerPreheat defaults support idSchemes DHIS2-12563 (#10546)"}, {"oid": "66b1250699e5198a4cffb092df7c652f569b2b5a", "committedDate": "2022-05-02 12:28:01 +0200", "message": "chore: TrackedEntity.orgUnit is a MetadataIdentifier (#10608)"}, {"oid": "b78a5043bdff59195ab013aba6d3b7dbb955687e", "committedDate": "2022-05-27 15:00:07 +0200", "message": "fix: collect TrackedEntity/RelationshipType from payload (#10906)"}, {"oid": "6e83eba877030575456f919de1bce55fcae8e517", "committedDate": "2022-06-24 10:01:46 +0200", "message": "test: move all integration tests into own module TECH-1209 (#11148)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY5MzY1MA==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r449693650", "body": "occurredAt will always be present, even before the event is activated, and also after the event is completed. Would simply check the occurredAt not being null here.", "bodyText": "occurredAt will always be present, even before the event is activated, and also after the event is completed. Would simply check the occurredAt not being null here.", "bodyHTML": "<p dir=\"auto\">occurredAt will always be present, even before the event is activated, and also after the event is completed. Would simply check the occurredAt not being null here.</p>", "author": "Bekkalizer", "createdAt": "2020-07-03T19:59:49Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java", "diffHunk": "@@ -0,0 +1,205 @@\n+package org.hisp.dhis.tracker.validation.hooks;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.hisp.dhis.event.EventStatus;\n+import org.hisp.dhis.period.Period;\n+import org.hisp.dhis.period.PeriodType;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.tracker.TrackerImportStrategy;\n+import org.hisp.dhis.tracker.domain.Event;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n+import org.hisp.dhis.tracker.validation.TrackerImportValidationContext;\n+import org.hisp.dhis.user.User;\n+import org.hisp.dhis.util.DateUtils;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Date;\n+\n+import static com.google.api.client.util.Preconditions.checkNotNull;\n+import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+@Component\n+public class EventDateValidationHook\n+    extends AbstractTrackerDtoValidationHook\n+{\n+    public EventDateValidationHook()\n+    {\n+        super( Event.class, TrackerImportStrategy.CREATE_AND_UPDATE );\n+    }\n+\n+    @Override\n+    public void validateEvent( ValidationErrorReporter reporter, Event event )\n+    {\n+        TrackerImportValidationContext context = reporter.getValidationContext();\n+\n+        if ( EventStatus.ACTIVE == event.getStatus() && event.getOccurredAt() == null )", "originalCommit": "58917c0ff1988692a4906ea00a0e0670d4d251d7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0c469e1350e645b019954827553da9f855b7dcb4", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\nindex 37e01606cc..7193a1437f 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n", "chunk": "@@ -64,39 +65,42 @@ public class EventDateValidationHook\n     {\n         TrackerImportValidationContext context = reporter.getValidationContext();\n \n-        if ( EventStatus.ACTIVE == event.getStatus() && event.getOccurredAt() == null )\n+        if ( event.getOccurredAt() == null )\n         {\n             reporter.addError( newReport( TrackerErrorCode.E1031 )\n                 .addArg( event ) );\n             return;\n         }\n \n-        ProgramStageInstance programStageInstance = context.getProgramStageInstance( event.getEvent() );\n         Program program = context.getProgram( event.getProgram() );\n \n         validateDateFormat( reporter, event );\n-        validateExpiryDays( reporter, event, program, programStageInstance, context.getBundle().getUser() );\n-        validatePeriodType( reporter, event, program, programStageInstance );\n+        validateExpiryDays( reporter, event, program );\n+        validatePeriodType( reporter, event, program );\n     }\n \n-    private void validateExpiryDays( ValidationErrorReporter reporter, Event event, Program program,\n-        ProgramStageInstance programStageInstance, User actingUser )\n+    private void validateExpiryDays( ValidationErrorReporter reporter, Event event, Program program )\n     {\n+        TrackerImportValidationContext context = reporter.getValidationContext();\n+        User actingUser = context.getBundle().getUser();\n+        TrackerImportStrategy eventStrategy = context.getStrategy( event );\n+\n         checkNotNull( actingUser, TrackerImporterAssertErrors.USER_CANT_BE_NULL );\n         checkNotNull( event, TrackerImporterAssertErrors.EVENT_CANT_BE_NULL );\n         checkNotNull( program, TrackerImporterAssertErrors.PROGRAM_CANT_BE_NULL );\n \n-        if ( (program.getCompleteEventsExpiryDays() > 0 && EventStatus.COMPLETED == event.getStatus())\n-            || (programStageInstance != null && EventStatus.COMPLETED == programStageInstance.getStatus()) )\n+        if ( (program.getCompleteEventsExpiryDays() > 0 && EventStatus.COMPLETED == event.getStatus()) )\n         {\n             //TODO: Should we make an error here? Feels like this is out of place, should be moved to the auth layer.\n-//            if ( actingUser.isAuthorized( Authorities.F_EDIT_EXPIRED.getAuthority() ) )\n-//            {\n-//                return;\n-//            }\n+            if ( actingUser.isAuthorized( Authorities.F_EDIT_EXPIRED.getAuthority() ) )\n+            {\n+                return;\n+            }\n \n             Date completedDate = null;\n \n+            // TODO: This feels like inefficient and very hard to read way of checking update/create logic.\n+            ProgramStageInstance programStageInstance = context.getProgramStageInstance( event.getEvent() );\n             if ( programStageInstance != null )\n             {\n                 completedDate = programStageInstance.getCompletedDate();\n", "next_change": {"commit": "898c87ce14bf1faf20e8f8ebf3a5bc12f27437f0", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\nindex 7193a1437f..90f9e376a4 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n", "chunk": "@@ -99,14 +99,7 @@ public class EventDateValidationHook\n \n             Date completedDate = null;\n \n-            // TODO: This feels like inefficient and very hard to read way of checking update/create logic.\n-            ProgramStageInstance programStageInstance = context.getProgramStageInstance( event.getEvent() );\n-            if ( programStageInstance != null )\n-            {\n-                completedDate = programStageInstance.getCompletedDate();\n-            }\n-\n-            else if ( event.getCompletedAt() != null )\n+            if ( event.getCompletedAt() != null )\n             {\n                 completedDate = DateUtils.parseDate( event.getCompletedAt() );\n             }\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\nindex 37e01606cc..90f9e376a4 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n", "chunk": "@@ -54,9 +56,10 @@ import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n public class EventDateValidationHook\n     extends AbstractTrackerDtoValidationHook\n {\n-    public EventDateValidationHook()\n+    public EventDateValidationHook( TrackedEntityAttributeService teAttrService,\n+        TrackedEntityCommentService commentService )\n     {\n-        super( Event.class, TrackerImportStrategy.CREATE_AND_UPDATE );\n+        super( Event.class, TrackerImportStrategy.CREATE_AND_UPDATE, teAttrService, commentService );\n     }\n \n     @Override\n", "next_change": {"commit": "3e3dc98d92f0c13fb56cf17894eab06a78842133", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\nindex 90f9e376a4..8057baf755 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n", "chunk": "@@ -56,10 +55,9 @@ import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n public class EventDateValidationHook\n     extends AbstractTrackerDtoValidationHook\n {\n-    public EventDateValidationHook( TrackedEntityAttributeService teAttrService,\n-        TrackedEntityCommentService commentService )\n+    public EventDateValidationHook( TrackedEntityAttributeService teAttrService )\n     {\n-        super( Event.class, TrackerImportStrategy.CREATE_AND_UPDATE, teAttrService, commentService );\n+        super( Event.class, TrackerImportStrategy.CREATE_AND_UPDATE, teAttrService );\n     }\n \n     @Override\n", "next_change": {"commit": "0bf55d776481f6511e5f9ebca5de1f2cf79777c0", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\nindex 8057baf755..c044e7f08a 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n", "chunk": "@@ -55,11 +59,6 @@ import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n public class EventDateValidationHook\n     extends AbstractTrackerDtoValidationHook\n {\n-    public EventDateValidationHook( TrackedEntityAttributeService teAttrService )\n-    {\n-        super( Event.class, TrackerImportStrategy.CREATE_AND_UPDATE, teAttrService );\n-    }\n-\n     @Override\n     public void validateEvent( ValidationErrorReporter reporter, Event event )\n     {\n", "next_change": {"commit": "a9aa89a8d5134104503d1cbb43f96b06f3531569", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\nindex c044e7f08a..f9a2f058d8 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n", "chunk": "@@ -64,14 +64,19 @@ public class EventDateValidationHook\n     {\n         TrackerImportValidationContext context = reporter.getValidationContext();\n \n-        if ( event.getOccurredAt() == null )\n+        Program program = context.getProgram( event.getProgram() );\n+\n+        if ( event.getOccurredAt() == null && occuredAtDateIsMandatory( event, program ) )\n         {\n-            reporter.addError( newReport( TrackerErrorCode.E1031 )\n-                .addArg( event ) );\n+            addError( reporter, E1031, event );\n             return;\n         }\n \n-        Program program = context.getProgram( event.getProgram() );\n+        if ( event.getScheduledAt() == null && EventStatus.SCHEDULE == event.getStatus() )\n+        {\n+            addError( reporter, E1050, event );\n+            return;\n+        }\n \n         validateDateFormat( reporter, event );\n         validateExpiryDays( reporter, event, program );\n", "next_change": {"commit": "6e8f0d6c150b303d780b397f7646ff3383f16250", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\nindex f9a2f058d8..2d9ac4e1ec 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n", "chunk": "@@ -78,7 +79,6 @@ public class EventDateValidationHook\n             return;\n         }\n \n-        validateDateFormat( reporter, event );\n         validateExpiryDays( reporter, event, program );\n         validatePeriodType( reporter, event, program );\n     }\n", "next_change": {"commit": "97fa18701761c6993e20f2e7a3816ea689129480", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\nindex 2d9ac4e1ec..eb9f6f4a49 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n", "chunk": "@@ -69,13 +68,13 @@ public class EventDateValidationHook\n \n         if ( event.getOccurredAt() == null && occuredAtDateIsMandatory( event, program ) )\n         {\n-            addError( reporter, E1031, event );\n+            addError( reporter, event, E1031, event );\n             return;\n         }\n \n         if ( event.getScheduledAt() == null && EventStatus.SCHEDULE == event.getStatus() )\n         {\n-            addError( reporter, E1050, event );\n+            addError( reporter, event, E1050, event );\n             return;\n         }\n \n", "next_change": {"commit": "1d8350a9e9ac100aaaa831894ba3f857b46e2474", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\nindex eb9f6f4a49..98230255c9 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n", "chunk": "@@ -68,13 +68,13 @@ public class EventDateValidationHook\n \n         if ( event.getOccurredAt() == null && occuredAtDateIsMandatory( event, program ) )\n         {\n-            addError( reporter, event, E1031, event );\n+            reporter.addError( event, E1031, event );\n             return;\n         }\n \n         if ( event.getScheduledAt() == null && EventStatus.SCHEDULE == event.getStatus() )\n         {\n-            addError( reporter, event, E1050, event );\n+            reporter.addError( event, E1050, event );\n             return;\n         }\n \n", "next_change": {"commit": "f7cfc83610c75486bbb0457dde057eaed777f3d2", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\nindex 98230255c9..8e7bf417d1 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n", "chunk": "@@ -78,14 +79,14 @@ public class EventDateValidationHook\n             return;\n         }\n \n-        validateExpiryDays( reporter, event, program );\n+        validateExpiryDays( reporter, bundle, event, program );\n         validatePeriodType( reporter, event, program );\n     }\n \n-    private void validateExpiryDays( ValidationErrorReporter reporter, Event event, Program program )\n+    private void validateExpiryDays( ValidationErrorReporter reporter, TrackerBundle bundle, Event event,\n+        Program program )\n     {\n-        TrackerImportValidationContext context = reporter.getValidationContext();\n-        User actingUser = context.getBundle().getUser();\n+        User actingUser = bundle.getUser();\n \n         checkNotNull( actingUser, TrackerImporterAssertErrors.USER_CANT_BE_NULL );\n         checkNotNull( event, TrackerImporterAssertErrors.EVENT_CANT_BE_NULL );\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}, {"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\nindex 37e01606cc..90f9e376a4 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n", "chunk": "@@ -64,45 +67,39 @@ public class EventDateValidationHook\n     {\n         TrackerImportValidationContext context = reporter.getValidationContext();\n \n-        if ( EventStatus.ACTIVE == event.getStatus() && event.getOccurredAt() == null )\n+        if ( event.getOccurredAt() == null )\n         {\n             reporter.addError( newReport( TrackerErrorCode.E1031 )\n                 .addArg( event ) );\n             return;\n         }\n \n-        ProgramStageInstance programStageInstance = context.getProgramStageInstance( event.getEvent() );\n         Program program = context.getProgram( event.getProgram() );\n \n         validateDateFormat( reporter, event );\n-        validateExpiryDays( reporter, event, program, programStageInstance, context.getBundle().getUser() );\n-        validatePeriodType( reporter, event, program, programStageInstance );\n+        validateExpiryDays( reporter, event, program );\n+        validatePeriodType( reporter, event, program );\n     }\n \n-    private void validateExpiryDays( ValidationErrorReporter reporter, Event event, Program program,\n-        ProgramStageInstance programStageInstance, User actingUser )\n+    private void validateExpiryDays( ValidationErrorReporter reporter, Event event, Program program )\n     {\n+        TrackerImportValidationContext context = reporter.getValidationContext();\n+        User actingUser = context.getBundle().getUser();\n+\n         checkNotNull( actingUser, TrackerImporterAssertErrors.USER_CANT_BE_NULL );\n         checkNotNull( event, TrackerImporterAssertErrors.EVENT_CANT_BE_NULL );\n         checkNotNull( program, TrackerImporterAssertErrors.PROGRAM_CANT_BE_NULL );\n \n-        if ( (program.getCompleteEventsExpiryDays() > 0 && EventStatus.COMPLETED == event.getStatus())\n-            || (programStageInstance != null && EventStatus.COMPLETED == programStageInstance.getStatus()) )\n+        if ( (program.getCompleteEventsExpiryDays() > 0 && EventStatus.COMPLETED == event.getStatus()) )\n         {\n-            //TODO: Should we make an error here? Feels like this is out of place, should be moved to the auth layer.\n-//            if ( actingUser.isAuthorized( Authorities.F_EDIT_EXPIRED.getAuthority() ) )\n-//            {\n-//                return;\n-//            }\n-\n-            Date completedDate = null;\n-\n-            if ( programStageInstance != null )\n+            if ( actingUser.isAuthorized( Authorities.F_EDIT_EXPIRED.getAuthority() ) )\n             {\n-                completedDate = programStageInstance.getCompletedDate();\n+                return;\n             }\n \n-            else if ( event.getCompletedAt() != null )\n+            Date completedDate = null;\n+\n+            if ( event.getCompletedAt() != null )\n             {\n                 completedDate = DateUtils.parseDate( event.getCompletedAt() );\n             }\n", "next_change": {"commit": "3e3b32e56ff5554a0095396eddffceac65b6b8de", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\nindex 90f9e376a4..4fa4affc84 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n", "chunk": "@@ -104,17 +108,12 @@ public class EventDateValidationHook\n                 completedDate = DateUtils.parseDate( event.getCompletedAt() );\n             }\n \n-            if ( completedDate == null )\n-            {\n-                reporter.addError( newReport( TrackerErrorCode.E1042 )\n-                    .addArg( event ) );\n-            }\n+            addErrorIfNull( completedDate, reporter, E1042, event );\n \n             if ( completedDate != null && (new Date())\n                 .after( DateUtils.getDateAfterAddition( completedDate, program.getCompleteEventsExpiryDays() ) ) )\n             {\n-                reporter.addError( newReport( TrackerErrorCode.E1043 )\n-                    .addArg( event ) );\n+                addError( reporter, E1043, event );\n             }\n         }\n     }\n", "next_change": {"commit": "6e8f0d6c150b303d780b397f7646ff3383f16250", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\nindex 4fa4affc84..2d9ac4e1ec 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n", "chunk": "@@ -101,19 +99,16 @@ public class EventDateValidationHook\n                 return;\n             }\n \n-            Date completedDate = null;\n-\n-            if ( event.getCompletedAt() != null )\n+            if ( event.getCompletedAt() == null )\n             {\n-                completedDate = DateUtils.parseDate( event.getCompletedAt() );\n+                addErrorIfNull( event.getCompletedAt(), reporter, E1042, event );\n             }\n-\n-            addErrorIfNull( completedDate, reporter, E1042, event );\n-\n-            if ( completedDate != null && (new Date())\n-                .after( DateUtils.getDateAfterAddition( completedDate, program.getCompleteEventsExpiryDays() ) ) )\n+            else\n             {\n-                addError( reporter, E1043, event );\n+                if ( now().isAfter( event.getCompletedAt().plus( ofDays( program.getCompleteEventsExpiryDays() ) ) ) )\n+                {\n+                    addError( reporter, E1043, event );\n+                }\n             }\n         }\n     }\n", "next_change": {"commit": "97fa18701761c6993e20f2e7a3816ea689129480", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\nindex 2d9ac4e1ec..eb9f6f4a49 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n", "chunk": "@@ -92,22 +91,22 @@ public class EventDateValidationHook\n         checkNotNull( event, TrackerImporterAssertErrors.EVENT_CANT_BE_NULL );\n         checkNotNull( program, TrackerImporterAssertErrors.PROGRAM_CANT_BE_NULL );\n \n-        if ( (program.getCompleteEventsExpiryDays() > 0 && EventStatus.COMPLETED == event.getStatus()) )\n+        if ( actingUser.isAuthorized( Authorities.F_EDIT_EXPIRED.getAuthority() ) )\n         {\n-            if ( actingUser.isAuthorized( Authorities.F_EDIT_EXPIRED.getAuthority() ) )\n-            {\n-                return;\n-            }\n+            return;\n+        }\n \n+        if ( (program.getCompleteEventsExpiryDays() > 0 && EventStatus.COMPLETED == event.getStatus()) )\n+        {\n             if ( event.getCompletedAt() == null )\n             {\n-                addErrorIfNull( event.getCompletedAt(), reporter, E1042, event );\n+                addErrorIfNull( event.getCompletedAt(), reporter, event, E1042, event );\n             }\n             else\n             {\n                 if ( now().isAfter( event.getCompletedAt().plus( ofDays( program.getCompleteEventsExpiryDays() ) ) ) )\n                 {\n-                    addError( reporter, E1043, event );\n+                    addError( reporter, event, E1043, event );\n                 }\n             }\n         }\n", "next_change": {"commit": "1d8350a9e9ac100aaaa831894ba3f857b46e2474", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\nindex eb9f6f4a49..98230255c9 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n", "chunk": "@@ -100,13 +100,13 @@ public class EventDateValidationHook\n         {\n             if ( event.getCompletedAt() == null )\n             {\n-                addErrorIfNull( event.getCompletedAt(), reporter, event, E1042, event );\n+                reporter.addErrorIfNull( event.getCompletedAt(), event, E1042, event );\n             }\n             else\n             {\n                 if ( now().isAfter( event.getCompletedAt().plus( ofDays( program.getCompleteEventsExpiryDays() ) ) ) )\n                 {\n-                    addError( reporter, event, E1043, event );\n+                    reporter.addError( event, E1043, event );\n                 }\n             }\n         }\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "message": "Merge commit", "committedDate": null}, {"oid": "3e3dc98d92f0c13fb56cf17894eab06a78842133", "committedDate": "2020-08-04 17:20:37 +0200", "message": "feat: Enrollment/Events note persistence"}, {"oid": "3e3b32e56ff5554a0095396eddffceac65b6b8de", "committedDate": "2020-10-27 09:56:50 +0100", "message": "refactor: simplified calls to error reporting (#6437)"}, {"oid": "0bf55d776481f6511e5f9ebca5de1f2cf79777c0", "committedDate": "2020-11-19 13:55:46 +0100", "message": "refactor: New Tracker Error reporting refactor (#6706)"}, {"oid": "a9aa89a8d5134104503d1cbb43f96b06f3531569", "committedDate": "2020-12-02 11:10:05 +0100", "message": "fix: Manage event scheduleAt date [DHIS2-10009] (#6804)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "6e8f0d6c150b303d780b397f7646ff3383f16250", "committedDate": "2021-01-21 09:32:50 +0100", "message": "feat: new tracked dto's properties referring to a date, now use Instant instead of String [DHIS2-101239] (#7119)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "c0e9b28f4609a84d1287d93bc65f81321e00d78b", "committedDate": "2021-03-30 13:22:16 +0200", "message": "refactor: Removing uid field from tracker entities [TECH-579] (#7790)"}, {"oid": "fe04922e144ac69367a99840d5518edda2d67f38", "committedDate": "2021-06-03 08:17:10 +0200", "message": "fix: Make program field read-only in event payload [DHIS2-11225] (#8086)"}, {"oid": "aff1cb136bdfdf4af8213f8878967be42f5687e9", "committedDate": "2021-06-11 10:58:03 +0200", "message": "fix: Get correct program stage from preheated Program [DHIS2-11225] (#8175)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "97fa18701761c6993e20f2e7a3816ea689129480", "committedDate": "2022-01-11 15:31:02 +0100", "message": "chore: hooks should add errors via reporter directly TECH-880 (#9523)"}, {"oid": "1d8350a9e9ac100aaaa831894ba3f857b46e2474", "committedDate": "2022-01-13 14:15:17 +0100", "message": "chore: adding errors and warnings is responsibility of the ValidationErrorReporter TECH-880 (#9616)"}, {"oid": "c039b8f75c1d965414de926f04540dfaabdd104c", "committedDate": "2022-02-23 13:08:25 +0100", "message": "chore: Clean up service program rule module [TECH-938] (#9885)"}, {"oid": "ef0cbd365e47f1f88befb80d9650cce75280bd35", "committedDate": "2022-03-08 15:12:00 +0100", "message": "chore: move DB access and mutation to preheat and preprocessor DHIS2-12623 (#9904)"}, {"oid": "f7cfc83610c75486bbb0457dde057eaed777f3d2", "committedDate": "2022-05-27 15:15:25 +0200", "message": "chore: ValidationErrorReporter does not need the bunlde DHIS2-12519 (#10878)"}, {"oid": "b0a861c0308005b865cafa2344c1231c0a4f2bc3", "committedDate": "2022-12-02 13:36:08 +0100", "message": "fix: turn removeOnError into skipOnError DHIS2-14213 (#12457)"}, {"oid": "7ac68b368a1dbd9362973b30f7160399abe801a0", "committedDate": "2022-12-06 09:04:47 +0100", "message": "chore: move ValidationErrorReporter close to its usage (#12486)"}, {"oid": "33c7cfe3d47d3ad157e0cc1991ece017e9244bb5", "committedDate": "2022-12-13 13:59:20 +0000", "message": "chore: migrate event validators (#12527)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY5NDgxNw==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r449694817", "body": "Whats the difference between Event and ProgramStageInstance here? In the database those two things would be the same. Would different callers populate different params?", "bodyText": "Whats the difference between Event and ProgramStageInstance here? In the database those two things would be the same. Would different callers populate different params?", "bodyHTML": "<p dir=\"auto\">Whats the difference between Event and ProgramStageInstance here? In the database those two things would be the same. Would different callers populate different params?</p>", "author": "Bekkalizer", "createdAt": "2020-07-03T20:07:37Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java", "diffHunk": "@@ -0,0 +1,205 @@\n+package org.hisp.dhis.tracker.validation.hooks;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.hisp.dhis.event.EventStatus;\n+import org.hisp.dhis.period.Period;\n+import org.hisp.dhis.period.PeriodType;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.tracker.TrackerImportStrategy;\n+import org.hisp.dhis.tracker.domain.Event;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n+import org.hisp.dhis.tracker.validation.TrackerImportValidationContext;\n+import org.hisp.dhis.user.User;\n+import org.hisp.dhis.util.DateUtils;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Date;\n+\n+import static com.google.api.client.util.Preconditions.checkNotNull;\n+import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+@Component\n+public class EventDateValidationHook\n+    extends AbstractTrackerDtoValidationHook\n+{\n+    public EventDateValidationHook()\n+    {\n+        super( Event.class, TrackerImportStrategy.CREATE_AND_UPDATE );\n+    }\n+\n+    @Override\n+    public void validateEvent( ValidationErrorReporter reporter, Event event )\n+    {\n+        TrackerImportValidationContext context = reporter.getValidationContext();\n+\n+        if ( EventStatus.ACTIVE == event.getStatus() && event.getOccurredAt() == null )\n+        {\n+            reporter.addError( newReport( TrackerErrorCode.E1031 )\n+                .addArg( event ) );\n+            return;\n+        }\n+\n+        ProgramStageInstance programStageInstance = context.getProgramStageInstance( event.getEvent() );\n+        Program program = context.getProgram( event.getProgram() );\n+\n+        validateDateFormat( reporter, event );\n+        validateExpiryDays( reporter, event, program, programStageInstance, context.getBundle().getUser() );\n+        validatePeriodType( reporter, event, program, programStageInstance );\n+    }\n+\n+    private void validateExpiryDays( ValidationErrorReporter reporter, Event event, Program program,", "originalCommit": "58917c0ff1988692a4906ea00a0e0670d4d251d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDA5ODU4Ng==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r450098586", "bodyText": "Good question, this comes from the conversion from the old to new. This looks strange, I think I can improve this.", "author": "netroms", "createdAt": "2020-07-06T09:29:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY5NDgxNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDEwMzUzMg==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r450103532", "bodyText": "It's a lot of strange behaviour in this class. E.g. it is checking/validating the already persisted object several places.", "author": "netroms", "createdAt": "2020-07-06T09:38:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY5NDgxNw=="}], "type": "inlineReview", "revised_code": {"commit": "0c469e1350e645b019954827553da9f855b7dcb4", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\nindex 37e01606cc..7193a1437f 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n", "chunk": "@@ -64,39 +65,42 @@ public class EventDateValidationHook\n     {\n         TrackerImportValidationContext context = reporter.getValidationContext();\n \n-        if ( EventStatus.ACTIVE == event.getStatus() && event.getOccurredAt() == null )\n+        if ( event.getOccurredAt() == null )\n         {\n             reporter.addError( newReport( TrackerErrorCode.E1031 )\n                 .addArg( event ) );\n             return;\n         }\n \n-        ProgramStageInstance programStageInstance = context.getProgramStageInstance( event.getEvent() );\n         Program program = context.getProgram( event.getProgram() );\n \n         validateDateFormat( reporter, event );\n-        validateExpiryDays( reporter, event, program, programStageInstance, context.getBundle().getUser() );\n-        validatePeriodType( reporter, event, program, programStageInstance );\n+        validateExpiryDays( reporter, event, program );\n+        validatePeriodType( reporter, event, program );\n     }\n \n-    private void validateExpiryDays( ValidationErrorReporter reporter, Event event, Program program,\n-        ProgramStageInstance programStageInstance, User actingUser )\n+    private void validateExpiryDays( ValidationErrorReporter reporter, Event event, Program program )\n     {\n+        TrackerImportValidationContext context = reporter.getValidationContext();\n+        User actingUser = context.getBundle().getUser();\n+        TrackerImportStrategy eventStrategy = context.getStrategy( event );\n+\n         checkNotNull( actingUser, TrackerImporterAssertErrors.USER_CANT_BE_NULL );\n         checkNotNull( event, TrackerImporterAssertErrors.EVENT_CANT_BE_NULL );\n         checkNotNull( program, TrackerImporterAssertErrors.PROGRAM_CANT_BE_NULL );\n \n-        if ( (program.getCompleteEventsExpiryDays() > 0 && EventStatus.COMPLETED == event.getStatus())\n-            || (programStageInstance != null && EventStatus.COMPLETED == programStageInstance.getStatus()) )\n+        if ( (program.getCompleteEventsExpiryDays() > 0 && EventStatus.COMPLETED == event.getStatus()) )\n         {\n             //TODO: Should we make an error here? Feels like this is out of place, should be moved to the auth layer.\n-//            if ( actingUser.isAuthorized( Authorities.F_EDIT_EXPIRED.getAuthority() ) )\n-//            {\n-//                return;\n-//            }\n+            if ( actingUser.isAuthorized( Authorities.F_EDIT_EXPIRED.getAuthority() ) )\n+            {\n+                return;\n+            }\n \n             Date completedDate = null;\n \n+            // TODO: This feels like inefficient and very hard to read way of checking update/create logic.\n+            ProgramStageInstance programStageInstance = context.getProgramStageInstance( event.getEvent() );\n             if ( programStageInstance != null )\n             {\n                 completedDate = programStageInstance.getCompletedDate();\n", "next_change": {"commit": "898c87ce14bf1faf20e8f8ebf3a5bc12f27437f0", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\nindex 7193a1437f..90f9e376a4 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n", "chunk": "@@ -99,14 +99,7 @@ public class EventDateValidationHook\n \n             Date completedDate = null;\n \n-            // TODO: This feels like inefficient and very hard to read way of checking update/create logic.\n-            ProgramStageInstance programStageInstance = context.getProgramStageInstance( event.getEvent() );\n-            if ( programStageInstance != null )\n-            {\n-                completedDate = programStageInstance.getCompletedDate();\n-            }\n-\n-            else if ( event.getCompletedAt() != null )\n+            if ( event.getCompletedAt() != null )\n             {\n                 completedDate = DateUtils.parseDate( event.getCompletedAt() );\n             }\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\nindex 37e01606cc..90f9e376a4 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n", "chunk": "@@ -64,45 +67,39 @@ public class EventDateValidationHook\n     {\n         TrackerImportValidationContext context = reporter.getValidationContext();\n \n-        if ( EventStatus.ACTIVE == event.getStatus() && event.getOccurredAt() == null )\n+        if ( event.getOccurredAt() == null )\n         {\n             reporter.addError( newReport( TrackerErrorCode.E1031 )\n                 .addArg( event ) );\n             return;\n         }\n \n-        ProgramStageInstance programStageInstance = context.getProgramStageInstance( event.getEvent() );\n         Program program = context.getProgram( event.getProgram() );\n \n         validateDateFormat( reporter, event );\n-        validateExpiryDays( reporter, event, program, programStageInstance, context.getBundle().getUser() );\n-        validatePeriodType( reporter, event, program, programStageInstance );\n+        validateExpiryDays( reporter, event, program );\n+        validatePeriodType( reporter, event, program );\n     }\n \n-    private void validateExpiryDays( ValidationErrorReporter reporter, Event event, Program program,\n-        ProgramStageInstance programStageInstance, User actingUser )\n+    private void validateExpiryDays( ValidationErrorReporter reporter, Event event, Program program )\n     {\n+        TrackerImportValidationContext context = reporter.getValidationContext();\n+        User actingUser = context.getBundle().getUser();\n+\n         checkNotNull( actingUser, TrackerImporterAssertErrors.USER_CANT_BE_NULL );\n         checkNotNull( event, TrackerImporterAssertErrors.EVENT_CANT_BE_NULL );\n         checkNotNull( program, TrackerImporterAssertErrors.PROGRAM_CANT_BE_NULL );\n \n-        if ( (program.getCompleteEventsExpiryDays() > 0 && EventStatus.COMPLETED == event.getStatus())\n-            || (programStageInstance != null && EventStatus.COMPLETED == programStageInstance.getStatus()) )\n+        if ( (program.getCompleteEventsExpiryDays() > 0 && EventStatus.COMPLETED == event.getStatus()) )\n         {\n-            //TODO: Should we make an error here? Feels like this is out of place, should be moved to the auth layer.\n-//            if ( actingUser.isAuthorized( Authorities.F_EDIT_EXPIRED.getAuthority() ) )\n-//            {\n-//                return;\n-//            }\n-\n-            Date completedDate = null;\n-\n-            if ( programStageInstance != null )\n+            if ( actingUser.isAuthorized( Authorities.F_EDIT_EXPIRED.getAuthority() ) )\n             {\n-                completedDate = programStageInstance.getCompletedDate();\n+                return;\n             }\n \n-            else if ( event.getCompletedAt() != null )\n+            Date completedDate = null;\n+\n+            if ( event.getCompletedAt() != null )\n             {\n                 completedDate = DateUtils.parseDate( event.getCompletedAt() );\n             }\n", "next_change": {"commit": "3e3b32e56ff5554a0095396eddffceac65b6b8de", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\nindex 90f9e376a4..4fa4affc84 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n", "chunk": "@@ -104,17 +108,12 @@ public class EventDateValidationHook\n                 completedDate = DateUtils.parseDate( event.getCompletedAt() );\n             }\n \n-            if ( completedDate == null )\n-            {\n-                reporter.addError( newReport( TrackerErrorCode.E1042 )\n-                    .addArg( event ) );\n-            }\n+            addErrorIfNull( completedDate, reporter, E1042, event );\n \n             if ( completedDate != null && (new Date())\n                 .after( DateUtils.getDateAfterAddition( completedDate, program.getCompleteEventsExpiryDays() ) ) )\n             {\n-                reporter.addError( newReport( TrackerErrorCode.E1043 )\n-                    .addArg( event ) );\n+                addError( reporter, E1043, event );\n             }\n         }\n     }\n", "next_change": {"commit": "6e8f0d6c150b303d780b397f7646ff3383f16250", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\nindex 4fa4affc84..2d9ac4e1ec 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n", "chunk": "@@ -101,19 +99,16 @@ public class EventDateValidationHook\n                 return;\n             }\n \n-            Date completedDate = null;\n-\n-            if ( event.getCompletedAt() != null )\n+            if ( event.getCompletedAt() == null )\n             {\n-                completedDate = DateUtils.parseDate( event.getCompletedAt() );\n+                addErrorIfNull( event.getCompletedAt(), reporter, E1042, event );\n             }\n-\n-            addErrorIfNull( completedDate, reporter, E1042, event );\n-\n-            if ( completedDate != null && (new Date())\n-                .after( DateUtils.getDateAfterAddition( completedDate, program.getCompleteEventsExpiryDays() ) ) )\n+            else\n             {\n-                addError( reporter, E1043, event );\n+                if ( now().isAfter( event.getCompletedAt().plus( ofDays( program.getCompleteEventsExpiryDays() ) ) ) )\n+                {\n+                    addError( reporter, E1043, event );\n+                }\n             }\n         }\n     }\n", "next_change": {"commit": "97fa18701761c6993e20f2e7a3816ea689129480", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\nindex 2d9ac4e1ec..eb9f6f4a49 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n", "chunk": "@@ -92,22 +91,22 @@ public class EventDateValidationHook\n         checkNotNull( event, TrackerImporterAssertErrors.EVENT_CANT_BE_NULL );\n         checkNotNull( program, TrackerImporterAssertErrors.PROGRAM_CANT_BE_NULL );\n \n-        if ( (program.getCompleteEventsExpiryDays() > 0 && EventStatus.COMPLETED == event.getStatus()) )\n+        if ( actingUser.isAuthorized( Authorities.F_EDIT_EXPIRED.getAuthority() ) )\n         {\n-            if ( actingUser.isAuthorized( Authorities.F_EDIT_EXPIRED.getAuthority() ) )\n-            {\n-                return;\n-            }\n+            return;\n+        }\n \n+        if ( (program.getCompleteEventsExpiryDays() > 0 && EventStatus.COMPLETED == event.getStatus()) )\n+        {\n             if ( event.getCompletedAt() == null )\n             {\n-                addErrorIfNull( event.getCompletedAt(), reporter, E1042, event );\n+                addErrorIfNull( event.getCompletedAt(), reporter, event, E1042, event );\n             }\n             else\n             {\n                 if ( now().isAfter( event.getCompletedAt().plus( ofDays( program.getCompleteEventsExpiryDays() ) ) ) )\n                 {\n-                    addError( reporter, E1043, event );\n+                    addError( reporter, event, E1043, event );\n                 }\n             }\n         }\n", "next_change": {"commit": "1d8350a9e9ac100aaaa831894ba3f857b46e2474", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\nindex eb9f6f4a49..98230255c9 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n", "chunk": "@@ -100,13 +100,13 @@ public class EventDateValidationHook\n         {\n             if ( event.getCompletedAt() == null )\n             {\n-                addErrorIfNull( event.getCompletedAt(), reporter, event, E1042, event );\n+                reporter.addErrorIfNull( event.getCompletedAt(), event, E1042, event );\n             }\n             else\n             {\n                 if ( now().isAfter( event.getCompletedAt().plus( ofDays( program.getCompleteEventsExpiryDays() ) ) ) )\n                 {\n-                    addError( reporter, event, E1043, event );\n+                    reporter.addError( event, E1043, event );\n                 }\n             }\n         }\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "message": "Merge commit", "committedDate": null}, {"oid": "3e3dc98d92f0c13fb56cf17894eab06a78842133", "committedDate": "2020-08-04 17:20:37 +0200", "message": "feat: Enrollment/Events note persistence"}, {"oid": "3e3b32e56ff5554a0095396eddffceac65b6b8de", "committedDate": "2020-10-27 09:56:50 +0100", "message": "refactor: simplified calls to error reporting (#6437)"}, {"oid": "0bf55d776481f6511e5f9ebca5de1f2cf79777c0", "committedDate": "2020-11-19 13:55:46 +0100", "message": "refactor: New Tracker Error reporting refactor (#6706)"}, {"oid": "a9aa89a8d5134104503d1cbb43f96b06f3531569", "committedDate": "2020-12-02 11:10:05 +0100", "message": "fix: Manage event scheduleAt date [DHIS2-10009] (#6804)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "6e8f0d6c150b303d780b397f7646ff3383f16250", "committedDate": "2021-01-21 09:32:50 +0100", "message": "feat: new tracked dto's properties referring to a date, now use Instant instead of String [DHIS2-101239] (#7119)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "c0e9b28f4609a84d1287d93bc65f81321e00d78b", "committedDate": "2021-03-30 13:22:16 +0200", "message": "refactor: Removing uid field from tracker entities [TECH-579] (#7790)"}, {"oid": "fe04922e144ac69367a99840d5518edda2d67f38", "committedDate": "2021-06-03 08:17:10 +0200", "message": "fix: Make program field read-only in event payload [DHIS2-11225] (#8086)"}, {"oid": "aff1cb136bdfdf4af8213f8878967be42f5687e9", "committedDate": "2021-06-11 10:58:03 +0200", "message": "fix: Get correct program stage from preheated Program [DHIS2-11225] (#8175)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "97fa18701761c6993e20f2e7a3816ea689129480", "committedDate": "2022-01-11 15:31:02 +0100", "message": "chore: hooks should add errors via reporter directly TECH-880 (#9523)"}, {"oid": "1d8350a9e9ac100aaaa831894ba3f857b46e2474", "committedDate": "2022-01-13 14:15:17 +0100", "message": "chore: adding errors and warnings is responsibility of the ValidationErrorReporter TECH-880 (#9616)"}, {"oid": "c039b8f75c1d965414de926f04540dfaabdd104c", "committedDate": "2022-02-23 13:08:25 +0100", "message": "chore: Clean up service program rule module [TECH-938] (#9885)"}, {"oid": "ef0cbd365e47f1f88befb80d9650cce75280bd35", "committedDate": "2022-03-08 15:12:00 +0100", "message": "chore: move DB access and mutation to preheat and preprocessor DHIS2-12623 (#9904)"}, {"oid": "f7cfc83610c75486bbb0457dde057eaed777f3d2", "committedDate": "2022-05-27 15:15:25 +0200", "message": "chore: ValidationErrorReporter does not need the bunlde DHIS2-12519 (#10878)"}, {"oid": "b0a861c0308005b865cafa2344c1231c0a4f2bc3", "committedDate": "2022-12-02 13:36:08 +0100", "message": "fix: turn removeOnError into skipOnError DHIS2-14213 (#12457)"}, {"oid": "7ac68b368a1dbd9362973b30f7160399abe801a0", "committedDate": "2022-12-06 09:04:47 +0100", "message": "chore: move ValidationErrorReporter close to its usage (#12486)"}, {"oid": "33c7cfe3d47d3ad157e0cc1991ece017e9244bb5", "committedDate": "2022-12-13 13:59:20 +0000", "message": "chore: migrate event validators (#12527)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY5NTI4NQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r449695285", "body": "If program.getCompleteEventsExpiryDays is not present, we should not check for the expired condition at all. The second part of the if here seems to allow the execution into the if even when no program.getCompleteEventsExpiryDays is set?", "bodyText": "If program.getCompleteEventsExpiryDays is not present, we should not check for the expired condition at all. The second part of the if here seems to allow the execution into the if even when no program.getCompleteEventsExpiryDays is set?", "bodyHTML": "<p dir=\"auto\">If program.getCompleteEventsExpiryDays is not present, we should not check for the expired condition at all. The second part of the if here seems to allow the execution into the if even when no program.getCompleteEventsExpiryDays is set?</p>", "author": "Bekkalizer", "createdAt": "2020-07-03T20:10:43Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java", "diffHunk": "@@ -0,0 +1,205 @@\n+package org.hisp.dhis.tracker.validation.hooks;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.hisp.dhis.event.EventStatus;\n+import org.hisp.dhis.period.Period;\n+import org.hisp.dhis.period.PeriodType;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.tracker.TrackerImportStrategy;\n+import org.hisp.dhis.tracker.domain.Event;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n+import org.hisp.dhis.tracker.validation.TrackerImportValidationContext;\n+import org.hisp.dhis.user.User;\n+import org.hisp.dhis.util.DateUtils;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Date;\n+\n+import static com.google.api.client.util.Preconditions.checkNotNull;\n+import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+@Component\n+public class EventDateValidationHook\n+    extends AbstractTrackerDtoValidationHook\n+{\n+    public EventDateValidationHook()\n+    {\n+        super( Event.class, TrackerImportStrategy.CREATE_AND_UPDATE );\n+    }\n+\n+    @Override\n+    public void validateEvent( ValidationErrorReporter reporter, Event event )\n+    {\n+        TrackerImportValidationContext context = reporter.getValidationContext();\n+\n+        if ( EventStatus.ACTIVE == event.getStatus() && event.getOccurredAt() == null )\n+        {\n+            reporter.addError( newReport( TrackerErrorCode.E1031 )\n+                .addArg( event ) );\n+            return;\n+        }\n+\n+        ProgramStageInstance programStageInstance = context.getProgramStageInstance( event.getEvent() );\n+        Program program = context.getProgram( event.getProgram() );\n+\n+        validateDateFormat( reporter, event );\n+        validateExpiryDays( reporter, event, program, programStageInstance, context.getBundle().getUser() );\n+        validatePeriodType( reporter, event, program, programStageInstance );\n+    }\n+\n+    private void validateExpiryDays( ValidationErrorReporter reporter, Event event, Program program,\n+        ProgramStageInstance programStageInstance, User actingUser )\n+    {\n+        checkNotNull( actingUser, TrackerImporterAssertErrors.USER_CANT_BE_NULL );\n+        checkNotNull( event, TrackerImporterAssertErrors.EVENT_CANT_BE_NULL );\n+        checkNotNull( program, TrackerImporterAssertErrors.PROGRAM_CANT_BE_NULL );\n+\n+        if ( (program.getCompleteEventsExpiryDays() > 0 && EventStatus.COMPLETED == event.getStatus())\n+            || (programStageInstance != null && EventStatus.COMPLETED == programStageInstance.getStatus()) )", "originalCommit": "58917c0ff1988692a4906ea00a0e0670d4d251d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDEwNTIwNw==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r450105207", "bodyText": "What do you mean not present? getCompleteEventsExpiryDays is an int, it can never be null. I'm not sure what you mean here, I think we need to discuss this in a meeting. Adding to meeting document.", "author": "netroms", "createdAt": "2020-07-06T09:41:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY5NTI4NQ=="}], "type": "inlineReview", "revised_code": {"commit": "0c469e1350e645b019954827553da9f855b7dcb4", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\nindex 37e01606cc..7193a1437f 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n", "chunk": "@@ -64,39 +65,42 @@ public class EventDateValidationHook\n     {\n         TrackerImportValidationContext context = reporter.getValidationContext();\n \n-        if ( EventStatus.ACTIVE == event.getStatus() && event.getOccurredAt() == null )\n+        if ( event.getOccurredAt() == null )\n         {\n             reporter.addError( newReport( TrackerErrorCode.E1031 )\n                 .addArg( event ) );\n             return;\n         }\n \n-        ProgramStageInstance programStageInstance = context.getProgramStageInstance( event.getEvent() );\n         Program program = context.getProgram( event.getProgram() );\n \n         validateDateFormat( reporter, event );\n-        validateExpiryDays( reporter, event, program, programStageInstance, context.getBundle().getUser() );\n-        validatePeriodType( reporter, event, program, programStageInstance );\n+        validateExpiryDays( reporter, event, program );\n+        validatePeriodType( reporter, event, program );\n     }\n \n-    private void validateExpiryDays( ValidationErrorReporter reporter, Event event, Program program,\n-        ProgramStageInstance programStageInstance, User actingUser )\n+    private void validateExpiryDays( ValidationErrorReporter reporter, Event event, Program program )\n     {\n+        TrackerImportValidationContext context = reporter.getValidationContext();\n+        User actingUser = context.getBundle().getUser();\n+        TrackerImportStrategy eventStrategy = context.getStrategy( event );\n+\n         checkNotNull( actingUser, TrackerImporterAssertErrors.USER_CANT_BE_NULL );\n         checkNotNull( event, TrackerImporterAssertErrors.EVENT_CANT_BE_NULL );\n         checkNotNull( program, TrackerImporterAssertErrors.PROGRAM_CANT_BE_NULL );\n \n-        if ( (program.getCompleteEventsExpiryDays() > 0 && EventStatus.COMPLETED == event.getStatus())\n-            || (programStageInstance != null && EventStatus.COMPLETED == programStageInstance.getStatus()) )\n+        if ( (program.getCompleteEventsExpiryDays() > 0 && EventStatus.COMPLETED == event.getStatus()) )\n         {\n             //TODO: Should we make an error here? Feels like this is out of place, should be moved to the auth layer.\n-//            if ( actingUser.isAuthorized( Authorities.F_EDIT_EXPIRED.getAuthority() ) )\n-//            {\n-//                return;\n-//            }\n+            if ( actingUser.isAuthorized( Authorities.F_EDIT_EXPIRED.getAuthority() ) )\n+            {\n+                return;\n+            }\n \n             Date completedDate = null;\n \n+            // TODO: This feels like inefficient and very hard to read way of checking update/create logic.\n+            ProgramStageInstance programStageInstance = context.getProgramStageInstance( event.getEvent() );\n             if ( programStageInstance != null )\n             {\n                 completedDate = programStageInstance.getCompletedDate();\n", "next_change": {"commit": "898c87ce14bf1faf20e8f8ebf3a5bc12f27437f0", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\nindex 7193a1437f..90f9e376a4 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n", "chunk": "@@ -99,14 +99,7 @@ public class EventDateValidationHook\n \n             Date completedDate = null;\n \n-            // TODO: This feels like inefficient and very hard to read way of checking update/create logic.\n-            ProgramStageInstance programStageInstance = context.getProgramStageInstance( event.getEvent() );\n-            if ( programStageInstance != null )\n-            {\n-                completedDate = programStageInstance.getCompletedDate();\n-            }\n-\n-            else if ( event.getCompletedAt() != null )\n+            if ( event.getCompletedAt() != null )\n             {\n                 completedDate = DateUtils.parseDate( event.getCompletedAt() );\n             }\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\nindex 37e01606cc..90f9e376a4 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n", "chunk": "@@ -64,45 +67,39 @@ public class EventDateValidationHook\n     {\n         TrackerImportValidationContext context = reporter.getValidationContext();\n \n-        if ( EventStatus.ACTIVE == event.getStatus() && event.getOccurredAt() == null )\n+        if ( event.getOccurredAt() == null )\n         {\n             reporter.addError( newReport( TrackerErrorCode.E1031 )\n                 .addArg( event ) );\n             return;\n         }\n \n-        ProgramStageInstance programStageInstance = context.getProgramStageInstance( event.getEvent() );\n         Program program = context.getProgram( event.getProgram() );\n \n         validateDateFormat( reporter, event );\n-        validateExpiryDays( reporter, event, program, programStageInstance, context.getBundle().getUser() );\n-        validatePeriodType( reporter, event, program, programStageInstance );\n+        validateExpiryDays( reporter, event, program );\n+        validatePeriodType( reporter, event, program );\n     }\n \n-    private void validateExpiryDays( ValidationErrorReporter reporter, Event event, Program program,\n-        ProgramStageInstance programStageInstance, User actingUser )\n+    private void validateExpiryDays( ValidationErrorReporter reporter, Event event, Program program )\n     {\n+        TrackerImportValidationContext context = reporter.getValidationContext();\n+        User actingUser = context.getBundle().getUser();\n+\n         checkNotNull( actingUser, TrackerImporterAssertErrors.USER_CANT_BE_NULL );\n         checkNotNull( event, TrackerImporterAssertErrors.EVENT_CANT_BE_NULL );\n         checkNotNull( program, TrackerImporterAssertErrors.PROGRAM_CANT_BE_NULL );\n \n-        if ( (program.getCompleteEventsExpiryDays() > 0 && EventStatus.COMPLETED == event.getStatus())\n-            || (programStageInstance != null && EventStatus.COMPLETED == programStageInstance.getStatus()) )\n+        if ( (program.getCompleteEventsExpiryDays() > 0 && EventStatus.COMPLETED == event.getStatus()) )\n         {\n-            //TODO: Should we make an error here? Feels like this is out of place, should be moved to the auth layer.\n-//            if ( actingUser.isAuthorized( Authorities.F_EDIT_EXPIRED.getAuthority() ) )\n-//            {\n-//                return;\n-//            }\n-\n-            Date completedDate = null;\n-\n-            if ( programStageInstance != null )\n+            if ( actingUser.isAuthorized( Authorities.F_EDIT_EXPIRED.getAuthority() ) )\n             {\n-                completedDate = programStageInstance.getCompletedDate();\n+                return;\n             }\n \n-            else if ( event.getCompletedAt() != null )\n+            Date completedDate = null;\n+\n+            if ( event.getCompletedAt() != null )\n             {\n                 completedDate = DateUtils.parseDate( event.getCompletedAt() );\n             }\n", "next_change": {"commit": "3e3b32e56ff5554a0095396eddffceac65b6b8de", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\nindex 90f9e376a4..4fa4affc84 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n", "chunk": "@@ -104,17 +108,12 @@ public class EventDateValidationHook\n                 completedDate = DateUtils.parseDate( event.getCompletedAt() );\n             }\n \n-            if ( completedDate == null )\n-            {\n-                reporter.addError( newReport( TrackerErrorCode.E1042 )\n-                    .addArg( event ) );\n-            }\n+            addErrorIfNull( completedDate, reporter, E1042, event );\n \n             if ( completedDate != null && (new Date())\n                 .after( DateUtils.getDateAfterAddition( completedDate, program.getCompleteEventsExpiryDays() ) ) )\n             {\n-                reporter.addError( newReport( TrackerErrorCode.E1043 )\n-                    .addArg( event ) );\n+                addError( reporter, E1043, event );\n             }\n         }\n     }\n", "next_change": {"commit": "6e8f0d6c150b303d780b397f7646ff3383f16250", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\nindex 4fa4affc84..2d9ac4e1ec 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n", "chunk": "@@ -101,19 +99,16 @@ public class EventDateValidationHook\n                 return;\n             }\n \n-            Date completedDate = null;\n-\n-            if ( event.getCompletedAt() != null )\n+            if ( event.getCompletedAt() == null )\n             {\n-                completedDate = DateUtils.parseDate( event.getCompletedAt() );\n+                addErrorIfNull( event.getCompletedAt(), reporter, E1042, event );\n             }\n-\n-            addErrorIfNull( completedDate, reporter, E1042, event );\n-\n-            if ( completedDate != null && (new Date())\n-                .after( DateUtils.getDateAfterAddition( completedDate, program.getCompleteEventsExpiryDays() ) ) )\n+            else\n             {\n-                addError( reporter, E1043, event );\n+                if ( now().isAfter( event.getCompletedAt().plus( ofDays( program.getCompleteEventsExpiryDays() ) ) ) )\n+                {\n+                    addError( reporter, E1043, event );\n+                }\n             }\n         }\n     }\n", "next_change": {"commit": "97fa18701761c6993e20f2e7a3816ea689129480", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\nindex 2d9ac4e1ec..eb9f6f4a49 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n", "chunk": "@@ -92,22 +91,22 @@ public class EventDateValidationHook\n         checkNotNull( event, TrackerImporterAssertErrors.EVENT_CANT_BE_NULL );\n         checkNotNull( program, TrackerImporterAssertErrors.PROGRAM_CANT_BE_NULL );\n \n-        if ( (program.getCompleteEventsExpiryDays() > 0 && EventStatus.COMPLETED == event.getStatus()) )\n+        if ( actingUser.isAuthorized( Authorities.F_EDIT_EXPIRED.getAuthority() ) )\n         {\n-            if ( actingUser.isAuthorized( Authorities.F_EDIT_EXPIRED.getAuthority() ) )\n-            {\n-                return;\n-            }\n+            return;\n+        }\n \n+        if ( (program.getCompleteEventsExpiryDays() > 0 && EventStatus.COMPLETED == event.getStatus()) )\n+        {\n             if ( event.getCompletedAt() == null )\n             {\n-                addErrorIfNull( event.getCompletedAt(), reporter, E1042, event );\n+                addErrorIfNull( event.getCompletedAt(), reporter, event, E1042, event );\n             }\n             else\n             {\n                 if ( now().isAfter( event.getCompletedAt().plus( ofDays( program.getCompleteEventsExpiryDays() ) ) ) )\n                 {\n-                    addError( reporter, E1043, event );\n+                    addError( reporter, event, E1043, event );\n                 }\n             }\n         }\n", "next_change": {"commit": "1d8350a9e9ac100aaaa831894ba3f857b46e2474", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\nindex eb9f6f4a49..98230255c9 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n", "chunk": "@@ -100,13 +100,13 @@ public class EventDateValidationHook\n         {\n             if ( event.getCompletedAt() == null )\n             {\n-                addErrorIfNull( event.getCompletedAt(), reporter, event, E1042, event );\n+                reporter.addErrorIfNull( event.getCompletedAt(), event, E1042, event );\n             }\n             else\n             {\n                 if ( now().isAfter( event.getCompletedAt().plus( ofDays( program.getCompleteEventsExpiryDays() ) ) ) )\n                 {\n-                    addError( reporter, event, E1043, event );\n+                    reporter.addError( event, E1043, event );\n                 }\n             }\n         }\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "message": "Merge commit", "committedDate": null}, {"oid": "3e3dc98d92f0c13fb56cf17894eab06a78842133", "committedDate": "2020-08-04 17:20:37 +0200", "message": "feat: Enrollment/Events note persistence"}, {"oid": "3e3b32e56ff5554a0095396eddffceac65b6b8de", "committedDate": "2020-10-27 09:56:50 +0100", "message": "refactor: simplified calls to error reporting (#6437)"}, {"oid": "0bf55d776481f6511e5f9ebca5de1f2cf79777c0", "committedDate": "2020-11-19 13:55:46 +0100", "message": "refactor: New Tracker Error reporting refactor (#6706)"}, {"oid": "a9aa89a8d5134104503d1cbb43f96b06f3531569", "committedDate": "2020-12-02 11:10:05 +0100", "message": "fix: Manage event scheduleAt date [DHIS2-10009] (#6804)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "6e8f0d6c150b303d780b397f7646ff3383f16250", "committedDate": "2021-01-21 09:32:50 +0100", "message": "feat: new tracked dto's properties referring to a date, now use Instant instead of String [DHIS2-101239] (#7119)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "c0e9b28f4609a84d1287d93bc65f81321e00d78b", "committedDate": "2021-03-30 13:22:16 +0200", "message": "refactor: Removing uid field from tracker entities [TECH-579] (#7790)"}, {"oid": "fe04922e144ac69367a99840d5518edda2d67f38", "committedDate": "2021-06-03 08:17:10 +0200", "message": "fix: Make program field read-only in event payload [DHIS2-11225] (#8086)"}, {"oid": "aff1cb136bdfdf4af8213f8878967be42f5687e9", "committedDate": "2021-06-11 10:58:03 +0200", "message": "fix: Get correct program stage from preheated Program [DHIS2-11225] (#8175)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "97fa18701761c6993e20f2e7a3816ea689129480", "committedDate": "2022-01-11 15:31:02 +0100", "message": "chore: hooks should add errors via reporter directly TECH-880 (#9523)"}, {"oid": "1d8350a9e9ac100aaaa831894ba3f857b46e2474", "committedDate": "2022-01-13 14:15:17 +0100", "message": "chore: adding errors and warnings is responsibility of the ValidationErrorReporter TECH-880 (#9616)"}, {"oid": "c039b8f75c1d965414de926f04540dfaabdd104c", "committedDate": "2022-02-23 13:08:25 +0100", "message": "chore: Clean up service program rule module [TECH-938] (#9885)"}, {"oid": "ef0cbd365e47f1f88befb80d9650cce75280bd35", "committedDate": "2022-03-08 15:12:00 +0100", "message": "chore: move DB access and mutation to preheat and preprocessor DHIS2-12623 (#9904)"}, {"oid": "f7cfc83610c75486bbb0457dde057eaed777f3d2", "committedDate": "2022-05-27 15:15:25 +0200", "message": "chore: ValidationErrorReporter does not need the bunlde DHIS2-12519 (#10878)"}, {"oid": "b0a861c0308005b865cafa2344c1231c0a4f2bc3", "committedDate": "2022-12-02 13:36:08 +0100", "message": "fix: turn removeOnError into skipOnError DHIS2-14213 (#12457)"}, {"oid": "7ac68b368a1dbd9362973b30f7160399abe801a0", "committedDate": "2022-12-06 09:04:47 +0100", "message": "chore: move ValidationErrorReporter close to its usage (#12486)"}, {"oid": "33c7cfe3d47d3ad157e0cc1991ece017e9244bb5", "committedDate": "2022-12-13 13:59:20 +0000", "message": "chore: migrate event validators (#12527)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY5NTU4MQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r449695581", "body": "Are we sure about the assumption here? I would think that when a periodtype is set, 0 would mean that the we need to enter all the events within the period. So - just check periodtype, not the ExpiryDays.", "bodyText": "Are we sure about the assumption here? I would think that when a periodtype is set, 0 would mean that the we need to enter all the events within the period. So - just check periodtype, not the ExpiryDays.", "bodyHTML": "<p dir=\"auto\">Are we sure about the assumption here? I would think that when a periodtype is set, 0 would mean that the we need to enter all the events within the period. So - just check periodtype, not the ExpiryDays.</p>", "author": "Bekkalizer", "createdAt": "2020-07-03T20:12:34Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java", "diffHunk": "@@ -0,0 +1,205 @@\n+package org.hisp.dhis.tracker.validation.hooks;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.hisp.dhis.event.EventStatus;\n+import org.hisp.dhis.period.Period;\n+import org.hisp.dhis.period.PeriodType;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.tracker.TrackerImportStrategy;\n+import org.hisp.dhis.tracker.domain.Event;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n+import org.hisp.dhis.tracker.validation.TrackerImportValidationContext;\n+import org.hisp.dhis.user.User;\n+import org.hisp.dhis.util.DateUtils;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Date;\n+\n+import static com.google.api.client.util.Preconditions.checkNotNull;\n+import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+@Component\n+public class EventDateValidationHook\n+    extends AbstractTrackerDtoValidationHook\n+{\n+    public EventDateValidationHook()\n+    {\n+        super( Event.class, TrackerImportStrategy.CREATE_AND_UPDATE );\n+    }\n+\n+    @Override\n+    public void validateEvent( ValidationErrorReporter reporter, Event event )\n+    {\n+        TrackerImportValidationContext context = reporter.getValidationContext();\n+\n+        if ( EventStatus.ACTIVE == event.getStatus() && event.getOccurredAt() == null )\n+        {\n+            reporter.addError( newReport( TrackerErrorCode.E1031 )\n+                .addArg( event ) );\n+            return;\n+        }\n+\n+        ProgramStageInstance programStageInstance = context.getProgramStageInstance( event.getEvent() );\n+        Program program = context.getProgram( event.getProgram() );\n+\n+        validateDateFormat( reporter, event );\n+        validateExpiryDays( reporter, event, program, programStageInstance, context.getBundle().getUser() );\n+        validatePeriodType( reporter, event, program, programStageInstance );\n+    }\n+\n+    private void validateExpiryDays( ValidationErrorReporter reporter, Event event, Program program,\n+        ProgramStageInstance programStageInstance, User actingUser )\n+    {\n+        checkNotNull( actingUser, TrackerImporterAssertErrors.USER_CANT_BE_NULL );\n+        checkNotNull( event, TrackerImporterAssertErrors.EVENT_CANT_BE_NULL );\n+        checkNotNull( program, TrackerImporterAssertErrors.PROGRAM_CANT_BE_NULL );\n+\n+        if ( (program.getCompleteEventsExpiryDays() > 0 && EventStatus.COMPLETED == event.getStatus())\n+            || (programStageInstance != null && EventStatus.COMPLETED == programStageInstance.getStatus()) )\n+        {\n+            //TODO: Should we make an error here? Feels like this is out of place, should be moved to the auth layer.\n+//            if ( actingUser.isAuthorized( Authorities.F_EDIT_EXPIRED.getAuthority() ) )\n+//            {\n+//                return;\n+//            }\n+\n+            Date completedDate = null;\n+\n+            if ( programStageInstance != null )\n+            {\n+                completedDate = programStageInstance.getCompletedDate();\n+            }\n+\n+            else if ( event.getCompletedAt() != null )\n+            {\n+                completedDate = DateUtils.parseDate( event.getCompletedAt() );\n+            }\n+\n+            if ( completedDate == null )\n+            {\n+                reporter.addError( newReport( TrackerErrorCode.E1042 )\n+                    .addArg( event ) );\n+            }\n+\n+            //TODO: This is troublesome, according to the error text this actually an auth check...\n+            // This should probably we moved and merged with the auth check on isAuthorized F_EDIT_EXPIRED above\n+            if ( completedDate != null && (new Date())\n+                .after( DateUtils.getDateAfterAddition( completedDate, program.getCompleteEventsExpiryDays() ) ) )\n+            {\n+                reporter.addError( newReport( TrackerErrorCode.E1043 )\n+                    .addArg( event ) );\n+            }\n+        }\n+    }\n+\n+    private void validatePeriodType( ValidationErrorReporter reporter, Event event,\n+        Program program, ProgramStageInstance programStageInstance )\n+    {\n+        checkNotNull( event, TrackerImporterAssertErrors.EVENT_CANT_BE_NULL );\n+        checkNotNull( program, TrackerImporterAssertErrors.PROGRAM_CANT_BE_NULL );\n+\n+        PeriodType periodType = program.getExpiryPeriodType();\n+\n+        if ( periodType == null || program.getExpiryDays() == 0 )", "originalCommit": "58917c0ff1988692a4906ea00a0e0670d4d251d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDEwNjMzOQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r450106339", "bodyText": "Added for discussion to meeting document.", "author": "netroms", "createdAt": "2020-07-06T09:43:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY5NTU4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "0c469e1350e645b019954827553da9f855b7dcb4", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\nindex 37e01606cc..7193a1437f 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n", "chunk": "@@ -124,8 +128,7 @@ public class EventDateValidationHook\n         }\n     }\n \n-    private void validatePeriodType( ValidationErrorReporter reporter, Event event,\n-        Program program, ProgramStageInstance programStageInstance )\n+    private void validatePeriodType( ValidationErrorReporter reporter, Event event, Program program )\n     {\n         checkNotNull( event, TrackerImporterAssertErrors.EVENT_CANT_BE_NULL );\n         checkNotNull( program, TrackerImporterAssertErrors.PROGRAM_CANT_BE_NULL );\n", "next_change": null}]}, "revised_code_in_main": {"commit": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\nindex 37e01606cc..90f9e376a4 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n", "chunk": "@@ -124,8 +119,7 @@ public class EventDateValidationHook\n         }\n     }\n \n-    private void validatePeriodType( ValidationErrorReporter reporter, Event event,\n-        Program program, ProgramStageInstance programStageInstance )\n+    private void validatePeriodType( ValidationErrorReporter reporter, Event event, Program program )\n     {\n         checkNotNull( event, TrackerImporterAssertErrors.EVENT_CANT_BE_NULL );\n         checkNotNull( program, TrackerImporterAssertErrors.PROGRAM_CANT_BE_NULL );\n", "next_change": {"commit": "33c7cfe3d47d3ad157e0cc1991ece017e9244bb5", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\ndeleted file mode 100644\nindex 90f9e376a4..0000000000\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventDateValidationHook.java\n+++ /dev/null\n", "chunk": "@@ -1,167 +0,0 @@\n-package org.hisp.dhis.tracker.validation.hooks;\n-\n-/*\n- * Copyright (c) 2004-2020, University of Oslo\n- * All rights reserved.\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions are met:\n- * Redistributions of source code must retain the above copyright notice, this\n- * list of conditions and the following disclaimer.\n- *\n- * Redistributions in binary form must reproduce the above copyright notice,\n- * this list of conditions and the following disclaimer in the documentation\n- * and/or other materials provided with the distribution.\n- * Neither the name of the HISP project nor the names of its contributors may\n- * be used to endorse or promote products derived from this software without\n- * specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n- * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n- * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n- * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n- * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n- * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n- * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- */\n-\n-import org.hisp.dhis.event.EventStatus;\n-import org.hisp.dhis.period.Period;\n-import org.hisp.dhis.period.PeriodType;\n-import org.hisp.dhis.program.Program;\n-import org.hisp.dhis.security.Authorities;\n-import org.hisp.dhis.trackedentity.TrackedEntityAttributeService;\n-import org.hisp.dhis.trackedentitycomment.TrackedEntityCommentService;\n-import org.hisp.dhis.tracker.TrackerImportStrategy;\n-import org.hisp.dhis.tracker.domain.Event;\n-import org.hisp.dhis.tracker.report.TrackerErrorCode;\n-import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n-import org.hisp.dhis.tracker.validation.TrackerImportValidationContext;\n-import org.hisp.dhis.user.User;\n-import org.hisp.dhis.util.DateUtils;\n-import org.springframework.stereotype.Component;\n-\n-import java.util.Date;\n-\n-import static com.google.api.client.util.Preconditions.checkNotNull;\n-import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n-\n-/**\n- * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n- */\n-@Component\n-public class EventDateValidationHook\n-    extends AbstractTrackerDtoValidationHook\n-{\n-    public EventDateValidationHook( TrackedEntityAttributeService teAttrService,\n-        TrackedEntityCommentService commentService )\n-    {\n-        super( Event.class, TrackerImportStrategy.CREATE_AND_UPDATE, teAttrService, commentService );\n-    }\n-\n-    @Override\n-    public void validateEvent( ValidationErrorReporter reporter, Event event )\n-    {\n-        TrackerImportValidationContext context = reporter.getValidationContext();\n-\n-        if ( event.getOccurredAt() == null )\n-        {\n-            reporter.addError( newReport( TrackerErrorCode.E1031 )\n-                .addArg( event ) );\n-            return;\n-        }\n-\n-        Program program = context.getProgram( event.getProgram() );\n-\n-        validateDateFormat( reporter, event );\n-        validateExpiryDays( reporter, event, program );\n-        validatePeriodType( reporter, event, program );\n-    }\n-\n-    private void validateExpiryDays( ValidationErrorReporter reporter, Event event, Program program )\n-    {\n-        TrackerImportValidationContext context = reporter.getValidationContext();\n-        User actingUser = context.getBundle().getUser();\n-\n-        checkNotNull( actingUser, TrackerImporterAssertErrors.USER_CANT_BE_NULL );\n-        checkNotNull( event, TrackerImporterAssertErrors.EVENT_CANT_BE_NULL );\n-        checkNotNull( program, TrackerImporterAssertErrors.PROGRAM_CANT_BE_NULL );\n-\n-        if ( (program.getCompleteEventsExpiryDays() > 0 && EventStatus.COMPLETED == event.getStatus()) )\n-        {\n-            if ( actingUser.isAuthorized( Authorities.F_EDIT_EXPIRED.getAuthority() ) )\n-            {\n-                return;\n-            }\n-\n-            Date completedDate = null;\n-\n-            if ( event.getCompletedAt() != null )\n-            {\n-                completedDate = DateUtils.parseDate( event.getCompletedAt() );\n-            }\n-\n-            if ( completedDate == null )\n-            {\n-                reporter.addError( newReport( TrackerErrorCode.E1042 )\n-                    .addArg( event ) );\n-            }\n-\n-            if ( completedDate != null && (new Date())\n-                .after( DateUtils.getDateAfterAddition( completedDate, program.getCompleteEventsExpiryDays() ) ) )\n-            {\n-                reporter.addError( newReport( TrackerErrorCode.E1043 )\n-                    .addArg( event ) );\n-            }\n-        }\n-    }\n-\n-    private void validatePeriodType( ValidationErrorReporter reporter, Event event, Program program )\n-    {\n-        checkNotNull( event, TrackerImporterAssertErrors.EVENT_CANT_BE_NULL );\n-        checkNotNull( program, TrackerImporterAssertErrors.PROGRAM_CANT_BE_NULL );\n-\n-        PeriodType periodType = program.getExpiryPeriodType();\n-\n-        if ( periodType == null || program.getExpiryDays() == 0 )\n-        {\n-            // Nothing more to check here, return out\n-            return;\n-        }\n-\n-        String referenceDate = event.getOccurredAt() != null ? event.getOccurredAt() : event.getScheduledAt();\n-        if ( referenceDate == null )\n-        {\n-            reporter.addError( newReport( TrackerErrorCode.E1046 )\n-                .addArg( event ) );\n-        }\n-\n-        Period period = periodType.createPeriod( new Date() );\n-\n-        if ( DateUtils.parseDate( referenceDate ).before( period.getStartDate() ) )\n-        {\n-            reporter.addError( newReport( TrackerErrorCode.E1047 )\n-                .addArg( event ) );\n-        }\n-    }\n-\n-    private void validateDateFormat( ValidationErrorReporter reporter, Event event )\n-    {\n-        checkNotNull( event, TrackerImporterAssertErrors.EVENT_CANT_BE_NULL );\n-\n-        if ( event.getScheduledAt() != null && isNotValidDateString( event.getScheduledAt() ) )\n-        {\n-            reporter.addError( newReport( TrackerErrorCode.E1051 )\n-                .addArg( event.getScheduledAt() ) );\n-        }\n-\n-        if ( event.getOccurredAt() != null && isNotValidDateString( event.getOccurredAt() ) )\n-        {\n-            reporter.addError( newReport( TrackerErrorCode.E1052 )\n-                .addArg( event.getOccurredAt() ) );\n-        }\n-    }\n-}\n\\ No newline at end of file\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "message": "Merge commit", "committedDate": null}, {"oid": "3e3dc98d92f0c13fb56cf17894eab06a78842133", "committedDate": "2020-08-04 17:20:37 +0200", "message": "feat: Enrollment/Events note persistence"}, {"oid": "3e3b32e56ff5554a0095396eddffceac65b6b8de", "committedDate": "2020-10-27 09:56:50 +0100", "message": "refactor: simplified calls to error reporting (#6437)"}, {"oid": "0bf55d776481f6511e5f9ebca5de1f2cf79777c0", "committedDate": "2020-11-19 13:55:46 +0100", "message": "refactor: New Tracker Error reporting refactor (#6706)"}, {"oid": "a9aa89a8d5134104503d1cbb43f96b06f3531569", "committedDate": "2020-12-02 11:10:05 +0100", "message": "fix: Manage event scheduleAt date [DHIS2-10009] (#6804)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "6e8f0d6c150b303d780b397f7646ff3383f16250", "committedDate": "2021-01-21 09:32:50 +0100", "message": "feat: new tracked dto's properties referring to a date, now use Instant instead of String [DHIS2-101239] (#7119)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "c0e9b28f4609a84d1287d93bc65f81321e00d78b", "committedDate": "2021-03-30 13:22:16 +0200", "message": "refactor: Removing uid field from tracker entities [TECH-579] (#7790)"}, {"oid": "fe04922e144ac69367a99840d5518edda2d67f38", "committedDate": "2021-06-03 08:17:10 +0200", "message": "fix: Make program field read-only in event payload [DHIS2-11225] (#8086)"}, {"oid": "aff1cb136bdfdf4af8213f8878967be42f5687e9", "committedDate": "2021-06-11 10:58:03 +0200", "message": "fix: Get correct program stage from preheated Program [DHIS2-11225] (#8175)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "97fa18701761c6993e20f2e7a3816ea689129480", "committedDate": "2022-01-11 15:31:02 +0100", "message": "chore: hooks should add errors via reporter directly TECH-880 (#9523)"}, {"oid": "1d8350a9e9ac100aaaa831894ba3f857b46e2474", "committedDate": "2022-01-13 14:15:17 +0100", "message": "chore: adding errors and warnings is responsibility of the ValidationErrorReporter TECH-880 (#9616)"}, {"oid": "c039b8f75c1d965414de926f04540dfaabdd104c", "committedDate": "2022-02-23 13:08:25 +0100", "message": "chore: Clean up service program rule module [TECH-938] (#9885)"}, {"oid": "ef0cbd365e47f1f88befb80d9650cce75280bd35", "committedDate": "2022-03-08 15:12:00 +0100", "message": "chore: move DB access and mutation to preheat and preprocessor DHIS2-12623 (#9904)"}, {"oid": "f7cfc83610c75486bbb0457dde057eaed777f3d2", "committedDate": "2022-05-27 15:15:25 +0200", "message": "chore: ValidationErrorReporter does not need the bunlde DHIS2-12519 (#10878)"}, {"oid": "b0a861c0308005b865cafa2344c1231c0a4f2bc3", "committedDate": "2022-12-02 13:36:08 +0100", "message": "fix: turn removeOnError into skipOnError DHIS2-14213 (#12457)"}, {"oid": "7ac68b368a1dbd9362973b30f7160399abe801a0", "committedDate": "2022-12-06 09:04:47 +0100", "message": "chore: move ValidationErrorReporter close to its usage (#12486)"}, {"oid": "33c7cfe3d47d3ad157e0cc1991ece017e9244bb5", "committedDate": "2022-12-13 13:59:20 +0000", "message": "chore: migrate event validators (#12527)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY5Nzc2Mg==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r449697762", "body": "If we add this to the check we are changing the endpoint behavior. The endppoint did not require SYNC mode to ignore required value validation. Not saying its not sensible, but I think we should not have this additional check before we also sync this behavior with the frontend. If you agree, lets keep this as is, and add a feature jira issue where we document the new behavior and client updates.", "bodyText": "If we add this to the check we are changing the endpoint behavior. The endppoint did not require SYNC mode to ignore required value validation. Not saying its not sensible, but I think we should not have this additional check before we also sync this behavior with the frontend. If you agree, lets keep this as is, and add a feature jira issue where we document the new behavior and client updates.", "bodyHTML": "<p dir=\"auto\">If we add this to the check we are changing the endpoint behavior. The endppoint did not require SYNC mode to ignore required value validation. Not saying its not sensible, but I think we should not have this additional check before we also sync this behavior with the frontend. If you agree, lets keep this as is, and add a feature jira issue where we document the new behavior and client updates.</p>", "author": "Bekkalizer", "createdAt": "2020-07-03T20:26:22Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentAttributeValidationHook.java", "diffHunk": "@@ -0,0 +1,189 @@\n+package org.hisp.dhis.tracker.validation.hooks;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import com.google.common.collect.Maps;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.program.ProgramTrackedEntityAttribute;\n+import org.hisp.dhis.security.Authorities;\n+import org.hisp.dhis.trackedentity.TrackedEntityAttribute;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+import org.hisp.dhis.trackedentityattributevalue.TrackedEntityAttributeValue;\n+import org.hisp.dhis.tracker.TrackerImportStrategy;\n+import org.hisp.dhis.tracker.domain.Attribute;\n+import org.hisp.dhis.tracker.domain.Enrollment;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n+import org.hisp.dhis.tracker.validation.TrackerImportValidationContext;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static com.google.api.client.util.Preconditions.checkNotNull;\n+import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n+import static org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors.ATTRIBUTE_VALUE_MAP_CANT_BE_NULL;\n+import static org.hisp.dhis.tracker.validation.hooks.TrackerImporterAssertErrors.TRACKED_ENTITY_INSTANCE_CANT_BE_NULL;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+@Component\n+public class EnrollmentAttributeValidationHook\n+    extends AbstractTrackerDtoValidationHook\n+{\n+    public EnrollmentAttributeValidationHook()\n+    {\n+        super( Enrollment.class, TrackerImportStrategy.CREATE_AND_UPDATE );\n+    }\n+\n+    @Override\n+    public void validateEnrollment( ValidationErrorReporter reporter, Enrollment enrollment )\n+    {\n+        TrackerImportValidationContext context = reporter.getValidationContext();\n+\n+        Program program = context.getProgram( enrollment.getProgram() );\n+        TrackedEntityInstance tei = context.getTrackedEntityInstance( enrollment.getTrackedEntity() );\n+\n+        Map<String, String> attributeValueMap = Maps.newHashMap();\n+\n+        for ( Attribute attribute : enrollment.getAttributes() )\n+        {\n+            validateRequiredProperties( reporter, attribute );\n+\n+            if ( attribute.getAttribute() == null || attribute.getValue() == null )\n+            {\n+                continue;\n+            }\n+\n+            TrackedEntityAttribute teAttribute = context.getTrackedEntityAttribute( attribute.getAttribute() );\n+\n+            if ( teAttribute == null )\n+            {\n+                continue;\n+            }\n+\n+            attributeValueMap.put( attribute.getAttribute(), attribute.getValue() );\n+\n+            validateAttrValueType( reporter, attribute, teAttribute );\n+\n+            //NOTE: this is perf killing\n+            validateAttributeUniqueness( reporter,\n+                attribute.getValue(),\n+                teAttribute,\n+                tei,\n+                tei.getOrganisationUnit() );\n+        }\n+\n+        validateMandatoryAttributes( reporter, program, tei, attributeValueMap );\n+    }\n+\n+    protected void validateRequiredProperties( ValidationErrorReporter reporter, Attribute attribute )\n+    {\n+        if ( attribute.getAttribute() == null )\n+        {\n+            reporter.addError( newReport( TrackerErrorCode.E1075 )\n+                .addArg( attribute ) );\n+        }\n+\n+        if ( attribute.getValue() == null )\n+        {\n+            reporter.addError( newReport( TrackerErrorCode.E1076 )\n+                .addArg( attribute ) );\n+        }\n+\n+        if ( attribute.getAttribute() != null )\n+        {\n+            TrackedEntityAttribute teAttribute = reporter.getValidationContext()\n+                .getTrackedEntityAttribute( attribute.getAttribute() );\n+            if ( teAttribute == null )\n+            {\n+                reporter.addError( newReport( TrackerErrorCode.E1017 )\n+                    .addArg( attribute.getAttribute() ) );\n+            }\n+        }\n+    }\n+\n+    private void validateMandatoryAttributes( ValidationErrorReporter reporter,\n+        Program program, TrackedEntityInstance trackedEntityInstance, Map<String, String> attributeValueMap )\n+    {\n+        checkNotNull( program, TrackerImporterAssertErrors.PROGRAM_CANT_BE_NULL );\n+        checkNotNull( trackedEntityInstance, TRACKED_ENTITY_INSTANCE_CANT_BE_NULL );\n+        checkNotNull( attributeValueMap, ATTRIBUTE_VALUE_MAP_CANT_BE_NULL );\n+\n+        // 1. Get all tei attributes, map attrValue attr. into set of attr.\n+        Set<TrackedEntityAttribute> trackedEntityAttributes = trackedEntityInstance.getTrackedEntityAttributeValues()\n+            .stream()\n+            .map( TrackedEntityAttributeValue::getAttribute )\n+            .collect( Collectors.toSet() );\n+\n+        // 2. Map all program attr. that match tei attr. into map. of attr:is mandatory\n+        Map<TrackedEntityAttribute, Boolean> mandatoryMap = program.getProgramAttributes().stream()\n+            .filter( v -> trackedEntityAttributes.contains( v.getAttribute() ) )\n+            .collect( Collectors.toMap(\n+                ProgramTrackedEntityAttribute::getAttribute,\n+                ProgramTrackedEntityAttribute::isMandatory ) );\n+\n+        for ( Map.Entry<TrackedEntityAttribute, Boolean> entry : mandatoryMap.entrySet() )\n+        {\n+            TrackedEntityAttribute attribute = entry.getKey();\n+            Boolean attributeIsMandatory = entry.getValue();\n+\n+            // TODO: This is quite ugly and should be considered to be solved differently,\n+            //  e.i. authorization should be handled in one common place.\n+            // NB: ! This authority MUST only be used in SYNC mode! This needs to be added to the check", "originalCommit": "58917c0ff1988692a4906ea00a0e0670d4d251d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDEwNjg0MQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r450106841", "bodyText": "Added to meeting document for further discussing next meeting.", "author": "netroms", "createdAt": "2020-07-06T09:44:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTY5Nzc2Mg=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "d095f2d4cf9aaac1e9aa973d4da6aa2f96104cc8", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentAttributeValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentAttributeValidationHook.java\nindex 60236ed768..443aa348e9 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentAttributeValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentAttributeValidationHook.java\n", "chunk": "@@ -157,8 +146,9 @@ public class EnrollmentAttributeValidationHook\n             Boolean attributeIsMandatory = entry.getValue();\n \n             // TODO: This is quite ugly and should be considered to be solved differently,\n-            //  e.i. authorization should be handled in one common place.\n-            // NB: ! This authority MUST only be used in SYNC mode! This needs to be added to the check\n+            // e.i. authorization should be handled in one common place.\n+            // NB: ! This authority MUST only be used in SYNC mode! This needs to be added\n+            // to the check\n             boolean userIsAuthorizedToIgnoreRequiredValueValidation = !reporter.getValidationContext().getBundle()\n                 .getUser()\n                 .isAuthorized( Authorities.F_IGNORE_TRACKER_REQUIRED_VALUE_VALIDATION.getAuthority() );\n", "next_change": {"commit": "7678ab6c0c8f661a5a2974f3ee8deb1045278558", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentAttributeValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentAttributeValidationHook.java\nindex 443aa348e9..54ebfb698b 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentAttributeValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentAttributeValidationHook.java\n", "chunk": "@@ -122,84 +129,85 @@ public class EnrollmentAttributeValidationHook\n     }\n \n     private void validateMandatoryAttributes( ValidationErrorReporter reporter,\n-        Program program, Enrollment enrollment, Map<String, String> attributeValueMap )\n+        Program program, Enrollment enrollment )\n     {\n         checkNotNull( program, TrackerImporterAssertErrors.PROGRAM_CANT_BE_NULL );\n-        // checkNotNull( trackedEntityInstance, TRACKED_ENTITY_INSTANCE_CANT_BE_NULL );\n-        // -- TODO no need to check it again\n-        checkNotNull( attributeValueMap, ATTRIBUTE_VALUE_MAP_CANT_BE_NULL );\n \n-        // 1. Get all tei attributes, map attrValue attr. into set of attr.\n-        Set<TrackedEntityAttribute> trackedEntityAttributes = getTrackedEntityAttributesFromEnrollment(\n-            reporter.getValidationContext(), enrollment );\n+        // Build a data structures of attributes eligible for mandatory validations:\n+        // 1 - attributes from enrollments whose value is not empty or null\n+        // 2 - attributes already existing in TEI (from preheat)\n \n-        // 2. Map all program attr. that match tei attr. into map. of attr:is mandatory\n-        Map<TrackedEntityAttribute, Boolean> mandatoryMap = program.getProgramAttributes().stream()\n-            .filter( v -> trackedEntityAttributes.contains( v.getAttribute() ) )\n+        // 1 - attributes from enrollment whose value is non-empty\n+        Map<String, String> enrollmentNonEmptyAttributeUids = Optional.of( enrollment )\n+            .map( Enrollment::getAttributes )\n+            .orElse( Collections.emptyList() )\n+            .stream()\n+            .filter( this::isNonEmpty)\n             .collect( Collectors.toMap(\n-                ProgramTrackedEntityAttribute::getAttribute,\n-                ProgramTrackedEntityAttribute::isMandatory ) );\n+                Attribute::getAttribute,\n+                Attribute::getValue ) );\n \n-        for ( Map.Entry<TrackedEntityAttribute, Boolean> entry : mandatoryMap.entrySet() )\n-        {\n-            TrackedEntityAttribute attribute = entry.getKey();\n-            Boolean attributeIsMandatory = entry.getValue();\n+        // 2 - attributes uids from existing TEI (if any) from preheat\n+        Set<String> teiAttributeUids = buildTeiAttributeUids( reporter, enrollment.getTrackedEntity() );\n \n-            // TODO: This is quite ugly and should be considered to be solved differently,\n-            // e.i. authorization should be handled in one common place.\n-            // NB: ! This authority MUST only be used in SYNC mode! This needs to be added\n-            // to the check\n-            boolean userIsAuthorizedToIgnoreRequiredValueValidation = !reporter.getValidationContext().getBundle()\n-                .getUser()\n-                .isAuthorized( Authorities.F_IGNORE_TRACKER_REQUIRED_VALUE_VALIDATION.getAuthority() );\n+        // merged uids of eligible attribute to validate\n+        Set<String> mergedAttributes = Streams\n+            .concat( enrollmentNonEmptyAttributeUids.keySet().stream(), teiAttributeUids.stream() )\n+            .collect( Collectors.toSet() );\n \n-            boolean hasMissingAttribute = attributeIsMandatory\n-                && !userIsAuthorizedToIgnoreRequiredValueValidation\n-                && !attributeValueMap.containsKey( attribute.getUid() );\n+        // Map having as key program attribute uid and mandatory flag as value\n+        Map<String, Boolean> programAttributesMap = program.getProgramAttributes().stream()\n+            .collect( Collectors.toMap(\n+                programTrackedEntityAttribute -> programTrackedEntityAttribute.getAttribute().getUid(),\n+                ProgramTrackedEntityAttribute::isMandatory ) );\n \n-            addErrorIf( () -> hasMissingAttribute, reporter, E1018, attribute );\n+        // Merged attributes must contain each mandatory program attribute.\n+        programAttributesMap.entrySet()\n+            .stream()\n+            .filter( Map.Entry::getValue ) // <--- filter on mandatory flag\n+            .map( Map.Entry::getKey )\n+            .forEach( mandatoryProgramAttributeUid -> addErrorIf(\n+                () -> !mergedAttributes.contains( mandatoryProgramAttributeUid ), reporter, E1018,\n+                mandatoryProgramAttributeUid ) );\n+\n+        // enrollment must not contain any attribute which is not defined in program\n+        enrollmentNonEmptyAttributeUids\n+            .forEach(\n+                ( attrUid, attrVal ) -> addErrorIf( () -> !programAttributesMap.containsKey( attrUid ), reporter, E1019,\n+                    attrUid + \"=\" + attrVal ) );\n+    }\n \n-            // Remove program attr. from enrollment attr. list\n-            attributeValueMap.remove( attribute.getUid() );\n-        }\n+    private Set<String> buildTeiAttributeUids( ValidationErrorReporter reporter, String trackedEntityInstanceUid )\n+    {\n+        return Optional.of( reporter )\n+            .map( ValidationErrorReporter::getValidationContext )\n+            .map( TrackerImportValidationContext::getBundle )\n+            .map( TrackerBundle::getPreheat )\n+            .map( trackerPreheat -> trackerPreheat.getTrackedEntity( TrackerIdScheme.UID, trackedEntityInstanceUid ) )\n+            .map( TrackedEntityInstance::getTrackedEntityAttributeValues )\n+            .orElse( Collections.emptySet() )\n+            .stream()\n+            .map( TrackedEntityAttributeValue::getAttribute )\n+            .map( BaseIdentifiableObject::getUid )\n+            .collect( Collectors.toSet() );\n+    }\n \n-        if ( !attributeValueMap.isEmpty() )\n-        {\n-            for ( Map.Entry<String, String> entry : attributeValueMap.entrySet() )\n-            {\n-                // Only Program attributes is allowed for enrollment\n-                addError( reporter, E1019, entry.getKey() + \"=\" + entry.getValue() );\n-            }\n-        }\n+    private boolean isNonEmpty(Attribute attribute )\n+    {\n+        return StringUtils.isNotBlank( attribute.getValue() ) && StringUtils.isNotBlank(attribute.getAttribute());\n     }\n \n-    private Set<TrackedEntityAttribute> getTrackedEntityAttributesFromEnrollment(\n-        TrackerImportValidationContext context,\n-        Enrollment enrollment )\n+    private String getOrgUnitUidFromTei( TrackerImportValidationContext context, String teiUid )\n     {\n-        final TrackedEntityInstance trackedEntityInstance = context\n-            .getTrackedEntityInstance( enrollment.getTrackedEntity() );\n-        if ( trackedEntityInstance != null )\n-        {\n-            return trackedEntityInstance.getTrackedEntityAttributeValues()\n-                .stream()\n-                .map( TrackedEntityAttributeValue::getAttribute )\n-                .collect( Collectors.toSet() );\n-        }\n-        else\n+\n+        final Optional<ReferenceTrackerEntity> reference = context.getReference( teiUid );\n+        if ( reference.isPresent() )\n         {\n-            final Optional<ReferenceTrackerEntity> reference = context.getReference( enrollment.getTrackedEntity() );\n-            if ( reference.isPresent() )\n+            final Optional<TrackedEntity> tei = context.getBundle()\n+                .getTrackedEntity( teiUid );\n+            if ( tei.isPresent() )\n             {\n-                final Optional<TrackedEntity> tei = context.getBundle()\n-                    .getTrackedEntity( enrollment.getTrackedEntity() );\n-                if ( tei.isPresent() )\n-                {\n-                    return tei.get().getAttributes()\n-                        .stream()\n-                        .map( a -> context.getTrackedEntityAttribute( a.getAttribute() ) )\n-                        .collect( Collectors.toSet() );\n-                }\n+                return tei.get().getOrgUnit();\n             }\n         }\n         return null;\n", "next_change": {"commit": "ef0cbd365e47f1f88befb80d9650cce75280bd35", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentAttributeValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentAttributeValidationHook.java\nindex 54ebfb698b..554ca56f05 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentAttributeValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentAttributeValidationHook.java\n", "chunk": "@@ -192,19 +198,13 @@ public class EnrollmentAttributeValidationHook extends AttributeValidationHook\n             .collect( Collectors.toSet() );\n     }\n \n-    private boolean isNonEmpty(Attribute attribute )\n-    {\n-        return StringUtils.isNotBlank( attribute.getValue() ) && StringUtils.isNotBlank(attribute.getAttribute());\n-    }\n-\n-    private String getOrgUnitUidFromTei( TrackerImportValidationContext context, String teiUid )\n+    private String getOrgUnitUidFromTei( TrackerBundle bundle, String teiUid )\n     {\n \n-        final Optional<ReferenceTrackerEntity> reference = context.getReference( teiUid );\n+        final Optional<ReferenceTrackerEntity> reference = bundle.getPreheat().getReference( teiUid );\n         if ( reference.isPresent() )\n         {\n-            final Optional<TrackedEntity> tei = context.getBundle()\n-                .getTrackedEntity( teiUid );\n+            final Optional<TrackedEntity> tei = bundle.getTrackedEntity( teiUid );\n             if ( tei.isPresent() )\n             {\n                 return tei.get().getOrgUnit();\n", "next_change": {"commit": "07ff89195ce66114c2b5a744039c2b2ce7a8f440", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentAttributeValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentAttributeValidationHook.java\nindex 554ca56f05..5e71d172a9 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentAttributeValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EnrollmentAttributeValidationHook.java\n", "chunk": "@@ -170,41 +176,40 @@ public class EnrollmentAttributeValidationHook extends AttributeValidationHook\n             .stream()\n             .filter( Map.Entry::getValue ) // <--- filter on mandatory flag\n             .map( Map.Entry::getKey )\n-            .forEach( mandatoryProgramAttributeUid -> reporter.addErrorIf(\n-                () -> !mergedAttributes.contains( mandatoryProgramAttributeUid ),\n-                enrollment, E1018,\n-                mandatoryProgramAttributeUid, program.getUid(), enrollment.getEnrollment() ) );\n+            .forEach( mandatoryProgramAttribute -> reporter.addErrorIf(\n+                () -> !mergedAttributes.contains( mandatoryProgramAttribute ),\n+                enrollment, E1018, mandatoryProgramAttribute, program.getUid(), enrollment.getEnrollment() ) );\n \n         // enrollment must not contain any attribute which is not defined in\n         // program\n-        enrollmentNonEmptyAttributeUids\n+        enrollmentNonEmptyAttributes\n             .forEach(\n-                ( attrUid, attrVal ) -> reporter.addErrorIf( () -> !programAttributesMap.containsKey( attrUid ),\n-                    enrollment, E1019,\n-                    attrUid + \"=\" + attrVal ) );\n+                ( attrId, attrVal ) -> reporter.addErrorIf( () -> !programAttributesMap.containsKey( attrId ),\n+                    enrollment, E1019, attrId.getIdentifierOrAttributeValue() + \"=\" + attrVal ) );\n     }\n \n-    private Set<String> buildTeiAttributeUids( ValidationErrorReporter reporter, String trackedEntityInstanceUid )\n+    private Set<MetadataIdentifier> buildTeiAttributes( TrackerBundle bundle,\n+        String trackedEntityInstanceUid )\n     {\n-        return Optional.of( reporter )\n-            .map( ValidationErrorReporter::getBundle )\n+        TrackerIdSchemeParams idSchemes = bundle.getPreheat().getIdSchemes();\n+        return Optional.of( bundle )\n             .map( TrackerBundle::getPreheat )\n-            .map( trackerPreheat -> trackerPreheat.getTrackedEntity( TrackerIdScheme.UID, trackedEntityInstanceUid ) )\n+            .map( trackerPreheat -> trackerPreheat.getTrackedEntity( trackedEntityInstanceUid ) )\n             .map( TrackedEntityInstance::getTrackedEntityAttributeValues )\n             .orElse( Collections.emptySet() )\n             .stream()\n             .map( TrackedEntityAttributeValue::getAttribute )\n-            .map( BaseIdentifiableObject::getUid )\n+            .map( idSchemes::toMetadataIdentifier )\n             .collect( Collectors.toSet() );\n     }\n \n-    private String getOrgUnitUidFromTei( TrackerBundle bundle, String teiUid )\n+    private MetadataIdentifier getOrgUnitUidFromTei( TrackerBundle bundle, String teiUid )\n     {\n \n         final Optional<ReferenceTrackerEntity> reference = bundle.getPreheat().getReference( teiUid );\n         if ( reference.isPresent() )\n         {\n-            final Optional<TrackedEntity> tei = bundle.getTrackedEntity( teiUid );\n+            final Optional<TrackedEntity> tei = bundle.findTrackedEntityByUid( teiUid );\n             if ( tei.isPresent() )\n             {\n                 return tei.get().getOrgUnit();\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "message": "Merge commit", "committedDate": null}, {"oid": "3e3dc98d92f0c13fb56cf17894eab06a78842133", "committedDate": "2020-08-04 17:20:37 +0200", "message": "feat: Enrollment/Events note persistence"}, {"oid": "e1260b5e8fceb13c2883754236a34cdd652e1c1c", "committedDate": "2020-10-20 14:00:34 +0200", "message": "refactor: Load in the preheat all the data needed for uniqueness attr\u2026 (#6397)"}, {"oid": "3e3b32e56ff5554a0095396eddffceac65b6b8de", "committedDate": "2020-10-27 09:56:50 +0100", "message": "refactor: simplified calls to error reporting (#6437)"}, {"oid": "d095f2d4cf9aaac1e9aa973d4da6aa2f96104cc8", "committedDate": "2020-11-11 13:49:13 +0100", "message": "fix: allow validation to reference entities in the payload (#6617)"}, {"oid": "0bf55d776481f6511e5f9ebca5de1f2cf79777c0", "committedDate": "2020-11-19 13:55:46 +0100", "message": "refactor: New Tracker Error reporting refactor (#6706)"}, {"oid": "8c4a255176ac5e675c549db2065926fdbaf0290b", "committedDate": "2020-12-14 08:31:48 +0100", "message": "fix: Remove clearSession/clearCache inside transaction causing audit fail (#6876)"}, {"oid": "7678ab6c0c8f661a5a2974f3ee8deb1045278558", "committedDate": "2020-12-16 09:39:21 +0100", "message": "fix: enrollments attributes are validated against mandatory program attributes (DHIS2-10077) (#6854)"}, {"oid": "b45bc96224d9ab6c13fe83f5363d58c943c6e695", "committedDate": "2020-12-18 10:02:52 +0100", "message": "fix: DHIS2-10077 changed mandatory program attribute error message (#6938)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "20c87464d818f6f2d5d7334b2ef2af99d7a24e98", "committedDate": "2021-02-11 10:54:18 +0100", "message": "fix: NPE in ProgramOrgUnitSupplier in Preheat [DHIS2-10430]"}, {"oid": "c25b817a180f24b3de6b26d5a089563aa336aa8c", "committedDate": "2021-03-05 10:44:25 +0100", "message": "feat: Validation for values with option sets [DHIS2-10452] (#7512)"}, {"oid": "60fe241badad5b1463bc3991eff2927abae32644", "committedDate": "2021-04-21 13:49:15 +0200", "message": "fix: [DHIS2-10797] Fix remove null values for tracker attributes and data values 2.37 (#7880)"}, {"oid": "2ce39cbc3ddb3e5b0b3b2ef747af2cf79a67821d", "committedDate": "2021-05-12 09:20:07 +0200", "message": "fix: [DHIS2-10797] Fix remove null values for tracker attributes and data values 2.37 (#8004)"}, {"oid": "9062a6b97820374ba0cff1a63bf4a776c69d41c8", "committedDate": "2021-10-13 09:19:34 +0200", "message": "fix: Remove duplicate error messages for enrollment attributes [DHIS2-11949] (#9040)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "97fa18701761c6993e20f2e7a3816ea689129480", "committedDate": "2022-01-11 15:31:02 +0100", "message": "chore: hooks should add errors via reporter directly TECH-880 (#9523)"}, {"oid": "1d8350a9e9ac100aaaa831894ba3f857b46e2474", "committedDate": "2022-01-13 14:15:17 +0100", "message": "chore: adding errors and warnings is responsibility of the ValidationErrorReporter TECH-880 (#9616)"}, {"oid": "c039b8f75c1d965414de926f04540dfaabdd104c", "committedDate": "2022-02-23 13:08:25 +0100", "message": "chore: Clean up service program rule module [TECH-938] (#9885)"}, {"oid": "ef0cbd365e47f1f88befb80d9650cce75280bd35", "committedDate": "2022-03-08 15:12:00 +0100", "message": "chore: move DB access and mutation to preheat and preprocessor DHIS2-12623 (#9904)"}, {"oid": "0303652efe35da369ba1d2a437a4b5797a52c451", "committedDate": "2022-04-01 09:37:58 +0200", "message": "chore: tracker entities only support idScheme UID DHIS2-12563 (#10329)"}, {"oid": "66b1250699e5198a4cffb092df7c652f569b2b5a", "committedDate": "2022-05-02 12:28:01 +0200", "message": "chore: TrackedEntity.orgUnit is a MetadataIdentifier (#10608)"}, {"oid": "9ff8d0c831d8448a696a37138139a0ae5b975c86", "committedDate": "2022-05-17 13:32:06 +0200", "message": "fix: Attribute.attribute is a MetadataIdentifier DHIS2-12563 (#10782)"}, {"oid": "df4eaf29ba29ee71a727a1c072fd4bcb03bb4bc9", "committedDate": "2022-05-19 15:13:36 +0200", "message": "chore: docs, improve APIs DHIS2-12563 (#10847)"}, {"oid": "b567e74f7d703115fb7bc9802ed3b5f29d6917aa", "committedDate": "2022-05-23 09:13:55 +0200", "message": "fix: report ids or attribute value for MetadataIdentifiers DHIS2-12519 (#10873)"}, {"oid": "f7cfc83610c75486bbb0457dde057eaed777f3d2", "committedDate": "2022-05-27 15:15:25 +0200", "message": "chore: ValidationErrorReporter does not need the bunlde DHIS2-12519 (#10878)"}, {"oid": "9ee39f390105c4517d67abfb5dbb377f9fb82074", "committedDate": "2022-06-10 10:50:40 +0200", "message": "fix: Validate enrollment attributes values based on valueType in NTI [DHIS2-12669] (2.39) (#11050)"}, {"oid": "b0a861c0308005b865cafa2344c1231c0a4f2bc3", "committedDate": "2022-12-02 13:36:08 +0100", "message": "fix: turn removeOnError into skipOnError DHIS2-14213 (#12457)"}, {"oid": "7ac68b368a1dbd9362973b30f7160399abe801a0", "committedDate": "2022-12-06 09:04:47 +0100", "message": "chore: move ValidationErrorReporter close to its usage (#12486)"}, {"oid": "07ff89195ce66114c2b5a744039c2b2ce7a8f440", "committedDate": "2022-12-13 09:51:43 +0100", "message": "chore: Clean up TrackerBundle methods [TECH-14298] (#12515)"}, {"oid": "2db6b519d76e1d0b0390a9dc6f2f650824c543bb", "committedDate": "2022-12-13 13:10:13 +0100", "message": "chore: migrate enrollment validators (#12526)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxNTc3Ng==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r449915776", "body": "A few of these sets can be done outside the if statements, instead of doing it both in if and else.", "bodyText": "A few of these sets can be done outside the if statements, instead of doing it both in if and else.", "bodyHTML": "<p dir=\"auto\">A few of these sets can be done outside the if statements, instead of doing it both in if and else.</p>", "author": "Bekkalizer", "createdAt": "2020-07-05T20:31:22Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventCountValidationHook.java", "diffHunk": "@@ -0,0 +1,115 @@\n+package org.hisp.dhis.tracker.validation.hooks;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.hisp.dhis.common.OrganisationUnitSelectionMode;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.program.ProgramInstanceQueryParams;\n+import org.hisp.dhis.program.ProgramInstanceService;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+import org.hisp.dhis.tracker.TrackerImportStrategy;\n+import org.hisp.dhis.tracker.domain.Event;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n+import org.hisp.dhis.tracker.validation.TrackerImportValidationContext;\n+import org.hisp.dhis.user.User;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+@Component\n+public class EventCountValidationHook\n+    extends AbstractTrackerDtoValidationHook\n+{\n+    @Autowired\n+    protected ProgramInstanceService programInstanceService;\n+\n+    public EventCountValidationHook()\n+    {\n+        super( Event.class, TrackerImportStrategy.CREATE_AND_UPDATE );\n+    }\n+\n+    @Override\n+    public void validateEvent( ValidationErrorReporter reporter, Event event )\n+    {\n+        TrackerImportValidationContext validationContext = reporter.getValidationContext();\n+        User user = validationContext.getBundle().getUser();\n+\n+        Program program = validationContext.getProgram( event.getProgram() );\n+\n+        if ( program.isRegistration() )\n+        {\n+            TrackedEntityInstance tei = validationContext.getTrackedEntityInstance( event.getTrackedEntity() );\n+            ProgramInstanceQueryParams params = new ProgramInstanceQueryParams();\n+            params.setProgram( program );\n+            params.setTrackedEntityInstance( tei );\n+            params.setOrganisationUnitMode( OrganisationUnitSelectionMode.ALL );\n+            params.setUser( user );", "originalCommit": "58917c0ff1988692a4906ea00a0e0670d4d251d7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "0c469e1350e645b019954827553da9f855b7dcb4", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventCountValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventCountValidationHook.java\nindex d5640a80ba..33f4c40b21 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventCountValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventCountValidationHook.java\n", "chunk": "@@ -67,14 +67,15 @@ public class EventCountValidationHook\n \n         Program program = validationContext.getProgram( event.getProgram() );\n \n+        ProgramInstanceQueryParams params = new ProgramInstanceQueryParams();\n+        params.setProgram( program );\n+        params.setOrganisationUnitMode( OrganisationUnitSelectionMode.ALL );\n+        params.setUser( user );\n+\n         if ( program.isRegistration() )\n         {\n             TrackedEntityInstance tei = validationContext.getTrackedEntityInstance( event.getTrackedEntity() );\n-            ProgramInstanceQueryParams params = new ProgramInstanceQueryParams();\n-            params.setProgram( program );\n             params.setTrackedEntityInstance( tei );\n-            params.setOrganisationUnitMode( OrganisationUnitSelectionMode.ALL );\n-            params.setUser( user );\n \n             int count = programInstanceService.countProgramInstances( params );\n \n", "next_change": null}]}, "revised_code_in_main": {"commit": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventCountValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventCountValidationHook.java\nindex d5640a80ba..b38a15076d 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventCountValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventCountValidationHook.java\n", "chunk": "@@ -67,14 +70,15 @@ public class EventCountValidationHook\n \n         Program program = validationContext.getProgram( event.getProgram() );\n \n+        ProgramInstanceQueryParams params = new ProgramInstanceQueryParams();\n+        params.setProgram( program );\n+        params.setOrganisationUnitMode( OrganisationUnitSelectionMode.ALL );\n+        params.setUser( user );\n+\n         if ( program.isRegistration() )\n         {\n             TrackedEntityInstance tei = validationContext.getTrackedEntityInstance( event.getTrackedEntity() );\n-            ProgramInstanceQueryParams params = new ProgramInstanceQueryParams();\n-            params.setProgram( program );\n             params.setTrackedEntityInstance( tei );\n-            params.setOrganisationUnitMode( OrganisationUnitSelectionMode.ALL );\n-            params.setUser( user );\n \n             int count = programInstanceService.countProgramInstances( params );\n \n", "next_change": {"commit": "0a2a7f9418c217602f78eb701e251294d4919912", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventCountValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventCountValidationHook.java\nindex b38a15076d..c485406006 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventCountValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventCountValidationHook.java\n", "chunk": "@@ -53,50 +55,54 @@ import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n public class EventCountValidationHook\n     extends AbstractTrackerDtoValidationHook\n {\n-    @Autowired\n-    protected ProgramInstanceService programInstanceService;\n+    protected final ProgramInstanceService programInstanceService;\n \n     public EventCountValidationHook( TrackedEntityAttributeService teAttrService,\n-        TrackedEntityCommentService commentService )\n+        TrackedEntityCommentService commentService, ProgramInstanceService programInstanceService )\n     {\n         super( Event.class, TrackerImportStrategy.CREATE_AND_UPDATE, teAttrService, commentService );\n+        checkNotNull( programInstanceService );\n+        this.programInstanceService = programInstanceService;\n     }\n \n     @Override\n     public void validateEvent( ValidationErrorReporter reporter, Event event )\n     {\n         TrackerImportValidationContext validationContext = reporter.getValidationContext();\n-        User user = validationContext.getBundle().getUser();\n \n         Program program = validationContext.getProgram( event.getProgram() );\n \n-        ProgramInstanceQueryParams params = new ProgramInstanceQueryParams();\n-        params.setProgram( program );\n-        params.setOrganisationUnitMode( OrganisationUnitSelectionMode.ALL );\n-        params.setUser( user );\n-\n         if ( program.isRegistration() )\n         {\n-            TrackedEntityInstance tei = validationContext.getTrackedEntityInstance( event.getTrackedEntity() );\n-            params.setTrackedEntityInstance( tei );\n-\n-            int count = programInstanceService.countProgramInstances( params );\n-\n-            if ( count == 0 )\n-            {\n-                reporter.addError( newReport( TrackerErrorCode.E1037 )\n-                    .addArg( tei )\n-                    .addArg( program ) );\n-            }\n-            else if ( count > 1 )\n+            if ( !hasProgramInstance( event, validationContext ) )\n             {\n-                reporter.addError( newReport( TrackerErrorCode.E1038 )\n-                    .addArg( tei )\n-                    .addArg( program ) );\n+                TrackedEntityInstance tei = validationContext.getTrackedEntityInstance( event.getTrackedEntity() );\n+                final int count = validationContext.getEventToProgramInstancesMap()\n+                        .getOrDefault( event.getUid(), new ArrayList<>() ).size();\n+\n+                if ( count == 0 )\n+                {\n+                    reporter.addError( newReport( TrackerErrorCode.E1037 )\n+                            .addArg( tei )\n+                            .addArg( program ) );\n+                }\n+                else if ( count > 1 )\n+                {\n+                    reporter.addError( newReport( TrackerErrorCode.E1038 )\n+                            .addArg( tei )\n+                            .addArg( program ) );\n+                }\n             }\n         }\n         else\n         {\n+            User user = validationContext.getBundle().getUser();\n+\n+            ProgramInstanceQueryParams params = new ProgramInstanceQueryParams();\n+            params.setProgram( program );\n+            params.setOrganisationUnitMode( OrganisationUnitSelectionMode.ALL );\n+            params.setUser( user );\n+\n             params.setTrackedEntityInstance( null );\n \n             int count = programInstanceService.countProgramInstances( params );\n", "next_change": {"commit": "e62bcedaeb5c5b8c3a550e76961acb68ca002cb6", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventCountValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventCountValidationHook.java\nindex c485406006..0e8fb213ea 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventCountValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventCountValidationHook.java\n", "chunk": "@@ -109,7 +109,8 @@ public class EventCountValidationHook\n \n             if ( count > 1 )\n             {\n-                //TODO: Can't provoke this error on the new importer, the preheater? inserts a program instance.\n+                // TODO: Can't provoke this error on the new importer, the preheater? inserts a\n+                // program instance.\n                 reporter.addError( newReport( TrackerErrorCode.E1040 ).addArg( program ) );\n             }\n         }\n", "next_change": {"commit": "d4aa7e0d126657c341427c44cb7d9b2800b044ea", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventCountValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventCountValidationHook.java\nindex 0e8fb213ea..787870f9e6 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventCountValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventCountValidationHook.java\n", "chunk": "@@ -118,6 +118,6 @@ public class EventCountValidationHook\n \n     private boolean hasProgramInstance( Event event, TrackerImportValidationContext ctx )\n     {\n-        return ctx.getProgramInstance( event.getUid() ) != null;\n+        return ctx.getProgramInstance( event.getEnrollment() ) != null;\n     }\n }\n", "next_change": {"commit": "615f9676329046c954fa4cbe07234273980b001a", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventCountValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventCountValidationHook.java\ndeleted file mode 100644\nindex 787870f9e6..0000000000\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventCountValidationHook.java\n+++ /dev/null\n", "chunk": "@@ -1,123 +0,0 @@\n-package org.hisp.dhis.tracker.validation.hooks;\n-\n-/*\n- * Copyright (c) 2004-2020, University of Oslo\n- * All rights reserved.\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions are met:\n- * Redistributions of source code must retain the above copyright notice, this\n- * list of conditions and the following disclaimer.\n- *\n- * Redistributions in binary form must reproduce the above copyright notice,\n- * this list of conditions and the following disclaimer in the documentation\n- * and/or other materials provided with the distribution.\n- * Neither the name of the HISP project nor the names of its contributors may\n- * be used to endorse or promote products derived from this software without\n- * specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n- * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n- * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n- * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n- * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n- * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n- * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- */\n-\n-import org.hisp.dhis.common.OrganisationUnitSelectionMode;\n-import org.hisp.dhis.program.Program;\n-import org.hisp.dhis.program.ProgramInstanceQueryParams;\n-import org.hisp.dhis.program.ProgramInstanceService;\n-import org.hisp.dhis.trackedentity.TrackedEntityAttributeService;\n-import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n-import org.hisp.dhis.trackedentitycomment.TrackedEntityCommentService;\n-import org.hisp.dhis.tracker.TrackerImportStrategy;\n-import org.hisp.dhis.tracker.domain.Event;\n-import org.hisp.dhis.tracker.report.TrackerErrorCode;\n-import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n-import org.hisp.dhis.tracker.validation.TrackerImportValidationContext;\n-import org.hisp.dhis.user.User;\n-import org.springframework.stereotype.Component;\n-\n-import java.util.ArrayList;\n-\n-import static com.google.common.base.Preconditions.checkNotNull;\n-import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n-\n-/**\n- * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n- */\n-@Component\n-public class EventCountValidationHook\n-    extends AbstractTrackerDtoValidationHook\n-{\n-    protected final ProgramInstanceService programInstanceService;\n-\n-    public EventCountValidationHook( TrackedEntityAttributeService teAttrService,\n-        TrackedEntityCommentService commentService, ProgramInstanceService programInstanceService )\n-    {\n-        super( Event.class, TrackerImportStrategy.CREATE_AND_UPDATE, teAttrService, commentService );\n-        checkNotNull( programInstanceService );\n-        this.programInstanceService = programInstanceService;\n-    }\n-\n-    @Override\n-    public void validateEvent( ValidationErrorReporter reporter, Event event )\n-    {\n-        TrackerImportValidationContext validationContext = reporter.getValidationContext();\n-\n-        Program program = validationContext.getProgram( event.getProgram() );\n-\n-        if ( program.isRegistration() )\n-        {\n-            if ( !hasProgramInstance( event, validationContext ) )\n-            {\n-                TrackedEntityInstance tei = validationContext.getTrackedEntityInstance( event.getTrackedEntity() );\n-                final int count = validationContext.getEventToProgramInstancesMap()\n-                    .getOrDefault( event.getUid(), new ArrayList<>() ).size();\n-\n-                if ( count == 0 )\n-                {\n-                    reporter.addError( newReport( TrackerErrorCode.E1037 )\n-                        .addArg( tei )\n-                        .addArg( program ) );\n-                }\n-                else if ( count > 1 )\n-                {\n-                    reporter.addError( newReport( TrackerErrorCode.E1038 )\n-                        .addArg( tei )\n-                        .addArg( program ) );\n-                }\n-            }\n-        }\n-        else\n-        {\n-            User user = validationContext.getBundle().getUser();\n-\n-            ProgramInstanceQueryParams params = new ProgramInstanceQueryParams();\n-            params.setProgram( program );\n-            params.setOrganisationUnitMode( OrganisationUnitSelectionMode.ALL );\n-            params.setUser( user );\n-\n-            params.setTrackedEntityInstance( null );\n-\n-            int count = programInstanceService.countProgramInstances( params );\n-\n-            if ( count > 1 )\n-            {\n-                // TODO: Can't provoke this error on the new importer, the preheater? inserts a\n-                // program instance.\n-                reporter.addError( newReport( TrackerErrorCode.E1040 ).addArg( program ) );\n-            }\n-        }\n-    }\n-\n-    private boolean hasProgramInstance( Event event, TrackerImportValidationContext ctx )\n-    {\n-        return ctx.getProgramInstance( event.getEnrollment() ) != null;\n-    }\n-}\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "message": "Merge commit", "committedDate": null}, {"oid": "0a2a7f9418c217602f78eb701e251294d4919912", "committedDate": "2020-07-14 09:02:09 +0200", "message": "feat: ProgramInstance pre-heater"}, {"oid": "e62bcedaeb5c5b8c3a550e76961acb68ca002cb6", "committedDate": "2020-07-14 12:23:46 +0200", "message": "chore: formatting"}, {"oid": "d4aa7e0d126657c341427c44cb7d9b2800b044ea", "committedDate": "2020-07-14 12:32:33 +0200", "message": "fix: use enrollment uid to fetch an enrollment"}, {"oid": "615f9676329046c954fa4cbe07234273980b001a", "committedDate": "2020-07-14 20:13:08 +0800", "message": "* refactored EventCountValidationHook.java into PreCheckDataRelationsValidationHook.java"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxNTkwMQ==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r449915901", "body": "Whats the purpose of setting the params in this validation hook?", "bodyText": "Whats the purpose of setting the params in this validation hook?", "bodyHTML": "<p dir=\"auto\">Whats the purpose of setting the params in this validation hook?</p>", "author": "Bekkalizer", "createdAt": "2020-07-05T20:32:51Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventCountValidationHook.java", "diffHunk": "@@ -0,0 +1,115 @@\n+package org.hisp.dhis.tracker.validation.hooks;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+import org.hisp.dhis.common.OrganisationUnitSelectionMode;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.program.ProgramInstanceQueryParams;\n+import org.hisp.dhis.program.ProgramInstanceService;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n+import org.hisp.dhis.tracker.TrackerImportStrategy;\n+import org.hisp.dhis.tracker.domain.Event;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n+import org.hisp.dhis.tracker.validation.TrackerImportValidationContext;\n+import org.hisp.dhis.user.User;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+@Component\n+public class EventCountValidationHook\n+    extends AbstractTrackerDtoValidationHook\n+{\n+    @Autowired\n+    protected ProgramInstanceService programInstanceService;\n+\n+    public EventCountValidationHook()\n+    {\n+        super( Event.class, TrackerImportStrategy.CREATE_AND_UPDATE );\n+    }\n+\n+    @Override\n+    public void validateEvent( ValidationErrorReporter reporter, Event event )\n+    {\n+        TrackerImportValidationContext validationContext = reporter.getValidationContext();\n+        User user = validationContext.getBundle().getUser();\n+\n+        Program program = validationContext.getProgram( event.getProgram() );\n+\n+        if ( program.isRegistration() )\n+        {\n+            TrackedEntityInstance tei = validationContext.getTrackedEntityInstance( event.getTrackedEntity() );\n+            ProgramInstanceQueryParams params = new ProgramInstanceQueryParams();\n+            params.setProgram( program );\n+            params.setTrackedEntityInstance( tei );\n+            params.setOrganisationUnitMode( OrganisationUnitSelectionMode.ALL );", "originalCommit": "58917c0ff1988692a4906ea00a0e0670d4d251d7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDExMDIyOA==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r450110228", "bodyText": "Not sure what you mean. Where do you suggest to set them?", "author": "netroms", "createdAt": "2020-07-06T09:50:18Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxNTkwMQ=="}], "type": "inlineReview", "revised_code": {"commit": "0c469e1350e645b019954827553da9f855b7dcb4", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventCountValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventCountValidationHook.java\nindex d5640a80ba..33f4c40b21 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventCountValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventCountValidationHook.java\n", "chunk": "@@ -67,14 +67,15 @@ public class EventCountValidationHook\n \n         Program program = validationContext.getProgram( event.getProgram() );\n \n+        ProgramInstanceQueryParams params = new ProgramInstanceQueryParams();\n+        params.setProgram( program );\n+        params.setOrganisationUnitMode( OrganisationUnitSelectionMode.ALL );\n+        params.setUser( user );\n+\n         if ( program.isRegistration() )\n         {\n             TrackedEntityInstance tei = validationContext.getTrackedEntityInstance( event.getTrackedEntity() );\n-            ProgramInstanceQueryParams params = new ProgramInstanceQueryParams();\n-            params.setProgram( program );\n             params.setTrackedEntityInstance( tei );\n-            params.setOrganisationUnitMode( OrganisationUnitSelectionMode.ALL );\n-            params.setUser( user );\n \n             int count = programInstanceService.countProgramInstances( params );\n \n", "next_change": null}]}, "revised_code_in_main": {"commit": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventCountValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventCountValidationHook.java\nindex d5640a80ba..b38a15076d 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventCountValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventCountValidationHook.java\n", "chunk": "@@ -67,14 +70,15 @@ public class EventCountValidationHook\n \n         Program program = validationContext.getProgram( event.getProgram() );\n \n+        ProgramInstanceQueryParams params = new ProgramInstanceQueryParams();\n+        params.setProgram( program );\n+        params.setOrganisationUnitMode( OrganisationUnitSelectionMode.ALL );\n+        params.setUser( user );\n+\n         if ( program.isRegistration() )\n         {\n             TrackedEntityInstance tei = validationContext.getTrackedEntityInstance( event.getTrackedEntity() );\n-            ProgramInstanceQueryParams params = new ProgramInstanceQueryParams();\n-            params.setProgram( program );\n             params.setTrackedEntityInstance( tei );\n-            params.setOrganisationUnitMode( OrganisationUnitSelectionMode.ALL );\n-            params.setUser( user );\n \n             int count = programInstanceService.countProgramInstances( params );\n \n", "next_change": {"commit": "0a2a7f9418c217602f78eb701e251294d4919912", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventCountValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventCountValidationHook.java\nindex b38a15076d..c485406006 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventCountValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventCountValidationHook.java\n", "chunk": "@@ -53,50 +55,54 @@ import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n public class EventCountValidationHook\n     extends AbstractTrackerDtoValidationHook\n {\n-    @Autowired\n-    protected ProgramInstanceService programInstanceService;\n+    protected final ProgramInstanceService programInstanceService;\n \n     public EventCountValidationHook( TrackedEntityAttributeService teAttrService,\n-        TrackedEntityCommentService commentService )\n+        TrackedEntityCommentService commentService, ProgramInstanceService programInstanceService )\n     {\n         super( Event.class, TrackerImportStrategy.CREATE_AND_UPDATE, teAttrService, commentService );\n+        checkNotNull( programInstanceService );\n+        this.programInstanceService = programInstanceService;\n     }\n \n     @Override\n     public void validateEvent( ValidationErrorReporter reporter, Event event )\n     {\n         TrackerImportValidationContext validationContext = reporter.getValidationContext();\n-        User user = validationContext.getBundle().getUser();\n \n         Program program = validationContext.getProgram( event.getProgram() );\n \n-        ProgramInstanceQueryParams params = new ProgramInstanceQueryParams();\n-        params.setProgram( program );\n-        params.setOrganisationUnitMode( OrganisationUnitSelectionMode.ALL );\n-        params.setUser( user );\n-\n         if ( program.isRegistration() )\n         {\n-            TrackedEntityInstance tei = validationContext.getTrackedEntityInstance( event.getTrackedEntity() );\n-            params.setTrackedEntityInstance( tei );\n-\n-            int count = programInstanceService.countProgramInstances( params );\n-\n-            if ( count == 0 )\n-            {\n-                reporter.addError( newReport( TrackerErrorCode.E1037 )\n-                    .addArg( tei )\n-                    .addArg( program ) );\n-            }\n-            else if ( count > 1 )\n+            if ( !hasProgramInstance( event, validationContext ) )\n             {\n-                reporter.addError( newReport( TrackerErrorCode.E1038 )\n-                    .addArg( tei )\n-                    .addArg( program ) );\n+                TrackedEntityInstance tei = validationContext.getTrackedEntityInstance( event.getTrackedEntity() );\n+                final int count = validationContext.getEventToProgramInstancesMap()\n+                        .getOrDefault( event.getUid(), new ArrayList<>() ).size();\n+\n+                if ( count == 0 )\n+                {\n+                    reporter.addError( newReport( TrackerErrorCode.E1037 )\n+                            .addArg( tei )\n+                            .addArg( program ) );\n+                }\n+                else if ( count > 1 )\n+                {\n+                    reporter.addError( newReport( TrackerErrorCode.E1038 )\n+                            .addArg( tei )\n+                            .addArg( program ) );\n+                }\n             }\n         }\n         else\n         {\n+            User user = validationContext.getBundle().getUser();\n+\n+            ProgramInstanceQueryParams params = new ProgramInstanceQueryParams();\n+            params.setProgram( program );\n+            params.setOrganisationUnitMode( OrganisationUnitSelectionMode.ALL );\n+            params.setUser( user );\n+\n             params.setTrackedEntityInstance( null );\n \n             int count = programInstanceService.countProgramInstances( params );\n", "next_change": {"commit": "e62bcedaeb5c5b8c3a550e76961acb68ca002cb6", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventCountValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventCountValidationHook.java\nindex c485406006..0e8fb213ea 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventCountValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventCountValidationHook.java\n", "chunk": "@@ -109,7 +109,8 @@ public class EventCountValidationHook\n \n             if ( count > 1 )\n             {\n-                //TODO: Can't provoke this error on the new importer, the preheater? inserts a program instance.\n+                // TODO: Can't provoke this error on the new importer, the preheater? inserts a\n+                // program instance.\n                 reporter.addError( newReport( TrackerErrorCode.E1040 ).addArg( program ) );\n             }\n         }\n", "next_change": {"commit": "d4aa7e0d126657c341427c44cb7d9b2800b044ea", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventCountValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventCountValidationHook.java\nindex 0e8fb213ea..787870f9e6 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventCountValidationHook.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventCountValidationHook.java\n", "chunk": "@@ -118,6 +118,6 @@ public class EventCountValidationHook\n \n     private boolean hasProgramInstance( Event event, TrackerImportValidationContext ctx )\n     {\n-        return ctx.getProgramInstance( event.getUid() ) != null;\n+        return ctx.getProgramInstance( event.getEnrollment() ) != null;\n     }\n }\n", "next_change": {"commit": "615f9676329046c954fa4cbe07234273980b001a", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventCountValidationHook.java b/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventCountValidationHook.java\ndeleted file mode 100644\nindex 787870f9e6..0000000000\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/main/java/org/hisp/dhis/tracker/validation/hooks/EventCountValidationHook.java\n+++ /dev/null\n", "chunk": "@@ -1,123 +0,0 @@\n-package org.hisp.dhis.tracker.validation.hooks;\n-\n-/*\n- * Copyright (c) 2004-2020, University of Oslo\n- * All rights reserved.\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions are met:\n- * Redistributions of source code must retain the above copyright notice, this\n- * list of conditions and the following disclaimer.\n- *\n- * Redistributions in binary form must reproduce the above copyright notice,\n- * this list of conditions and the following disclaimer in the documentation\n- * and/or other materials provided with the distribution.\n- * Neither the name of the HISP project nor the names of its contributors may\n- * be used to endorse or promote products derived from this software without\n- * specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n- * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n- * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n- * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n- * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n- * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n- * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n- * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n- * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n- * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- */\n-\n-import org.hisp.dhis.common.OrganisationUnitSelectionMode;\n-import org.hisp.dhis.program.Program;\n-import org.hisp.dhis.program.ProgramInstanceQueryParams;\n-import org.hisp.dhis.program.ProgramInstanceService;\n-import org.hisp.dhis.trackedentity.TrackedEntityAttributeService;\n-import org.hisp.dhis.trackedentity.TrackedEntityInstance;\n-import org.hisp.dhis.trackedentitycomment.TrackedEntityCommentService;\n-import org.hisp.dhis.tracker.TrackerImportStrategy;\n-import org.hisp.dhis.tracker.domain.Event;\n-import org.hisp.dhis.tracker.report.TrackerErrorCode;\n-import org.hisp.dhis.tracker.report.ValidationErrorReporter;\n-import org.hisp.dhis.tracker.validation.TrackerImportValidationContext;\n-import org.hisp.dhis.user.User;\n-import org.springframework.stereotype.Component;\n-\n-import java.util.ArrayList;\n-\n-import static com.google.common.base.Preconditions.checkNotNull;\n-import static org.hisp.dhis.tracker.report.ValidationErrorReporter.newReport;\n-\n-/**\n- * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n- */\n-@Component\n-public class EventCountValidationHook\n-    extends AbstractTrackerDtoValidationHook\n-{\n-    protected final ProgramInstanceService programInstanceService;\n-\n-    public EventCountValidationHook( TrackedEntityAttributeService teAttrService,\n-        TrackedEntityCommentService commentService, ProgramInstanceService programInstanceService )\n-    {\n-        super( Event.class, TrackerImportStrategy.CREATE_AND_UPDATE, teAttrService, commentService );\n-        checkNotNull( programInstanceService );\n-        this.programInstanceService = programInstanceService;\n-    }\n-\n-    @Override\n-    public void validateEvent( ValidationErrorReporter reporter, Event event )\n-    {\n-        TrackerImportValidationContext validationContext = reporter.getValidationContext();\n-\n-        Program program = validationContext.getProgram( event.getProgram() );\n-\n-        if ( program.isRegistration() )\n-        {\n-            if ( !hasProgramInstance( event, validationContext ) )\n-            {\n-                TrackedEntityInstance tei = validationContext.getTrackedEntityInstance( event.getTrackedEntity() );\n-                final int count = validationContext.getEventToProgramInstancesMap()\n-                    .getOrDefault( event.getUid(), new ArrayList<>() ).size();\n-\n-                if ( count == 0 )\n-                {\n-                    reporter.addError( newReport( TrackerErrorCode.E1037 )\n-                        .addArg( tei )\n-                        .addArg( program ) );\n-                }\n-                else if ( count > 1 )\n-                {\n-                    reporter.addError( newReport( TrackerErrorCode.E1038 )\n-                        .addArg( tei )\n-                        .addArg( program ) );\n-                }\n-            }\n-        }\n-        else\n-        {\n-            User user = validationContext.getBundle().getUser();\n-\n-            ProgramInstanceQueryParams params = new ProgramInstanceQueryParams();\n-            params.setProgram( program );\n-            params.setOrganisationUnitMode( OrganisationUnitSelectionMode.ALL );\n-            params.setUser( user );\n-\n-            params.setTrackedEntityInstance( null );\n-\n-            int count = programInstanceService.countProgramInstances( params );\n-\n-            if ( count > 1 )\n-            {\n-                // TODO: Can't provoke this error on the new importer, the preheater? inserts a\n-                // program instance.\n-                reporter.addError( newReport( TrackerErrorCode.E1040 ).addArg( program ) );\n-            }\n-        }\n-    }\n-\n-    private boolean hasProgramInstance( Event event, TrackerImportValidationContext ctx )\n-    {\n-        return ctx.getProgramInstance( event.getEnrollment() ) != null;\n-    }\n-}\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "message": "Merge commit", "committedDate": null}, {"oid": "0a2a7f9418c217602f78eb701e251294d4919912", "committedDate": "2020-07-14 09:02:09 +0200", "message": "feat: ProgramInstance pre-heater"}, {"oid": "e62bcedaeb5c5b8c3a550e76961acb68ca002cb6", "committedDate": "2020-07-14 12:23:46 +0200", "message": "chore: formatting"}, {"oid": "d4aa7e0d126657c341427c44cb7d9b2800b044ea", "committedDate": "2020-07-14 12:32:33 +0200", "message": "fix: use enrollment uid to fetch an enrollment"}, {"oid": "615f9676329046c954fa4cbe07234273980b001a", "committedDate": "2020-07-14 20:13:08 +0800", "message": "* refactored EventCountValidationHook.java into PreCheckDataRelationsValidationHook.java"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTkxNzk4Nw==", "url": "https://github.com/dhis2/dhis2-core/pull/5605#discussion_r449917987", "body": "It would be good to also add a test that ensures we cannot access an event from an org unit outside the search and capture scopes. Assuming this test testNoWriteAccessToProgramStage checks only wether the user has write access to the program stage in question.", "bodyText": "It would be good to also add a test that ensures we cannot access an event from an org unit outside the search and capture scopes. Assuming this test testNoWriteAccessToProgramStage checks only wether the user has write access to the program stage in question.", "bodyHTML": "<p dir=\"auto\">It would be good to also add a test that ensures we cannot access an event from an org unit outside the search and capture scopes. Assuming this test testNoWriteAccessToProgramStage checks only wether the user has write access to the program stage in question.</p>", "author": "Bekkalizer", "createdAt": "2020-07-05T20:57:11Z", "path": "dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EventSecurityImportValidationTest.java", "diffHunk": "@@ -0,0 +1,391 @@\n+package org.hisp.dhis.tracker.validation;\n+\n+/*\n+ * Copyright (c) 2004-2020, University of Oslo\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ * Redistributions of source code must retain the above copyright notice, this\n+ * list of conditions and the following disclaimer.\n+ *\n+ * Redistributions in binary form must reproduce the above copyright notice,\n+ * this list of conditions and the following disclaimer in the documentation\n+ * and/or other materials provided with the distribution.\n+ * Neither the name of the HISP project nor the names of its contributors may\n+ * be used to endorse or promote products derived from this software without\n+ * specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n+ * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n+ * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n+ * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n+ * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n+ * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n+ * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n+ * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n+ * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\n+ */\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.hisp.dhis.common.IdentifiableObject;\n+import org.hisp.dhis.common.IdentifiableObjectManager;\n+import org.hisp.dhis.common.ValueType;\n+import org.hisp.dhis.dataelement.DataElement;\n+import org.hisp.dhis.dxf2.events.enrollment.EnrollmentService;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundle;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundleMode;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundleParams;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundleService;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.ObjectBundleValidationService;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.feedback.ObjectBundleCommitReport;\n+import org.hisp.dhis.dxf2.metadata.objectbundle.feedback.ObjectBundleValidationReport;\n+import org.hisp.dhis.event.EventStatus;\n+import org.hisp.dhis.feedback.ErrorReport;\n+import org.hisp.dhis.importexport.ImportStrategy;\n+import org.hisp.dhis.organisationunit.OrganisationUnit;\n+import org.hisp.dhis.organisationunit.OrganisationUnitService;\n+import org.hisp.dhis.program.Program;\n+import org.hisp.dhis.program.ProgramInstance;\n+import org.hisp.dhis.program.ProgramInstanceService;\n+import org.hisp.dhis.program.ProgramStage;\n+import org.hisp.dhis.program.ProgramStageDataElement;\n+import org.hisp.dhis.program.ProgramStageDataElementService;\n+import org.hisp.dhis.program.ProgramStageInstance;\n+import org.hisp.dhis.program.ProgramStageInstanceService;\n+import org.hisp.dhis.program.ProgramStageService;\n+import org.hisp.dhis.program.ProgramType;\n+import org.hisp.dhis.render.RenderFormat;\n+import org.hisp.dhis.render.RenderService;\n+import org.hisp.dhis.security.acl.AccessStringHelper;\n+import org.hisp.dhis.trackedentity.TrackedEntityInstanceService;\n+import org.hisp.dhis.trackedentity.TrackedEntityType;\n+import org.hisp.dhis.trackedentity.TrackedEntityTypeService;\n+import org.hisp.dhis.tracker.TrackerImportStrategy;\n+import org.hisp.dhis.tracker.bundle.TrackerBundle;\n+import org.hisp.dhis.tracker.bundle.TrackerBundleParams;\n+import org.hisp.dhis.tracker.bundle.TrackerBundleService;\n+import org.hisp.dhis.tracker.report.TrackerBundleReport;\n+import org.hisp.dhis.tracker.report.TrackerErrorCode;\n+import org.hisp.dhis.tracker.report.TrackerStatus;\n+import org.hisp.dhis.tracker.report.TrackerValidationReport;\n+import org.hisp.dhis.user.User;\n+import org.hisp.dhis.user.UserService;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.io.ClassPathResource;\n+\n+import java.io.IOException;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.hasItem;\n+import static org.hamcrest.Matchers.hasProperty;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * @author Morten Svan\u00e6s <msvanaes@dhis2.org>\n+ */\n+@Slf4j\n+public class EventSecurityImportValidationTest\n+    extends AbstractImportValidationTest\n+{\n+    @Autowired\n+    protected TrackedEntityInstanceService trackedEntityInstanceService;\n+\n+    @Autowired\n+    private TrackerBundleService trackerBundleService;\n+\n+    @Autowired\n+    private ObjectBundleService objectBundleService;\n+\n+    @Autowired\n+    private ObjectBundleValidationService objectBundleValidationService;\n+\n+    @Autowired\n+    private DefaultTrackerValidationService trackerValidationService;\n+\n+    @Autowired\n+    private RenderService _renderService;\n+\n+    @Autowired\n+    private UserService _userService;\n+\n+    @Autowired\n+    private ProgramStageService programStageService;\n+\n+    @Autowired\n+    private ProgramStageInstanceService programStageServiceInstance;\n+\n+    @Autowired\n+    private IdentifiableObjectManager manager;\n+\n+    @Autowired\n+    private ProgramStageDataElementService programStageDataElementService;\n+\n+    @Autowired\n+    private TrackedEntityTypeService trackedEntityTypeService;\n+\n+    @Autowired\n+    private EnrollmentService enrollmentService;\n+\n+    @Autowired\n+    private ProgramInstanceService programInstanceService;\n+\n+    @Autowired\n+    private OrganisationUnitService organisationUnitService;\n+\n+    private org.hisp.dhis.trackedentity.TrackedEntityInstance maleA;\n+\n+    private org.hisp.dhis.trackedentity.TrackedEntityInstance maleB;\n+\n+    private org.hisp.dhis.trackedentity.TrackedEntityInstance femaleA;\n+\n+    private org.hisp.dhis.trackedentity.TrackedEntityInstance femaleB;\n+\n+    private OrganisationUnit organisationUnitA;\n+\n+    private OrganisationUnit organisationUnitB;\n+\n+    private Program programA;\n+\n+    private DataElement dataElementA;\n+\n+    private DataElement dataElementB;\n+\n+    private ProgramStage programStageA;\n+\n+    private ProgramStage programStageB;\n+\n+    private TrackedEntityType trackedEntityType;\n+\n+    @Override\n+    protected void setUpTest()\n+        throws IOException\n+    {\n+        renderService = _renderService;\n+        userService = _userService;\n+\n+        Map<Class<? extends IdentifiableObject>, List<IdentifiableObject>> metadata = renderService.fromMetadata(\n+            new ClassPathResource( \"tracker/tracker_basic_metadata.json\" ).getInputStream(), RenderFormat.JSON );\n+\n+        ObjectBundleParams params = new ObjectBundleParams();\n+        params.setObjectBundleMode( ObjectBundleMode.COMMIT );\n+        params.setImportStrategy( ImportStrategy.CREATE );\n+        params.setObjects( metadata );\n+\n+        ObjectBundle bundle = objectBundleService.create( params );\n+        ObjectBundleValidationReport validationReport = objectBundleValidationService.validate( bundle );\n+        List<ErrorReport> errorReports = validationReport.getErrorReports();\n+        assertTrue( errorReports.isEmpty() );\n+\n+        ObjectBundleCommitReport commit = objectBundleService.commit( bundle );\n+        List<ErrorReport> objectReport = commit.getErrorReports();\n+        assertTrue( objectReport.isEmpty() );\n+\n+        TrackerBundleParams trackerBundleParams = createBundleFromJson(\n+            \"tracker/validations/enrollments_te_te-data.json\" );\n+\n+        User user = userService.getUser( \"M5zQapPyTZI\" );\n+        trackerBundleParams.setUser( user );\n+\n+        TrackerBundle trackerBundle = trackerBundleService.create( trackerBundleParams ).get( 0 );\n+        assertEquals( 4, trackerBundle.getTrackedEntities().size() );\n+\n+        TrackerValidationReport report = trackerValidationService.validate( trackerBundle );\n+        assertEquals( 0, report.getErrorReports().size() );\n+\n+        TrackerBundleReport bundleReport = trackerBundleService.commit( trackerBundle );\n+        assertEquals( TrackerStatus.OK, bundleReport.getStatus() );\n+\n+        trackerBundleParams = renderService\n+            .fromJson(\n+                new ClassPathResource( \"tracker/validations/enrollments_te_enrollments-data.json\" ).getInputStream(),\n+                TrackerBundleParams.class );\n+\n+        trackerBundleParams.setUser( user );\n+\n+        trackerBundle = trackerBundleService.create( trackerBundleParams ).get( 0 );\n+        assertEquals( 4, trackerBundle.getEnrollments().size() );\n+\n+        report = trackerValidationService.validate( trackerBundle );\n+        assertEquals( 0, report.getErrorReports().size() );\n+\n+        bundleReport = trackerBundleService.commit( trackerBundle );\n+        assertEquals( TrackerStatus.OK, bundleReport.getStatus() );\n+    }\n+\n+    private void setupMetadata()\n+    {\n+        organisationUnitA = createOrganisationUnit( 'A' );\n+        organisationUnitB = createOrganisationUnit( 'B' );\n+        manager.save( organisationUnitA );\n+        manager.save( organisationUnitB );\n+\n+        dataElementA = createDataElement( 'A' );\n+        dataElementB = createDataElement( 'B' );\n+        dataElementA.setValueType( ValueType.INTEGER );\n+        dataElementB.setValueType( ValueType.INTEGER );\n+\n+        manager.save( dataElementA );\n+        manager.save( dataElementB );\n+\n+        programStageA = createProgramStage( 'A', 0 );\n+        programStageB = createProgramStage( 'B', 0 );\n+        programStageB.setRepeatable( true );\n+\n+        manager.save( programStageA );\n+        manager.save( programStageB );\n+\n+        programA = createProgram( 'A', new HashSet<>(), organisationUnitA );\n+        programA.setProgramType( ProgramType.WITH_REGISTRATION );\n+\n+        trackedEntityType = createTrackedEntityType( 'A' );\n+        trackedEntityTypeService.addTrackedEntityType( trackedEntityType );\n+\n+        TrackedEntityType trackedEntityTypeFromProgram = createTrackedEntityType( 'C' );\n+        trackedEntityTypeService.addTrackedEntityType( trackedEntityTypeFromProgram );\n+\n+        manager.save( programA );\n+\n+        ProgramStageDataElement programStageDataElement = new ProgramStageDataElement();\n+        programStageDataElement.setDataElement( dataElementA );\n+        programStageDataElement.setProgramStage( programStageA );\n+        programStageDataElementService.addProgramStageDataElement( programStageDataElement );\n+\n+        programStageA.getProgramStageDataElements().add( programStageDataElement );\n+        programStageA.setProgram( programA );\n+\n+        programStageDataElement = new ProgramStageDataElement();\n+        programStageDataElement.setDataElement( dataElementB );\n+        programStageDataElement.setProgramStage( programStageB );\n+        programStageDataElementService.addProgramStageDataElement( programStageDataElement );\n+\n+        programStageB.getProgramStageDataElements().add( programStageDataElement );\n+        programStageB.setProgram( programA );\n+        programStageB.setMinDaysFromStart( 2 );\n+\n+        programA.getProgramStages().add( programStageA );\n+        programA.getProgramStages().add( programStageB );\n+\n+        programA.setTrackedEntityType( trackedEntityType );\n+        trackedEntityType.setPublicAccess( AccessStringHelper.DATA_READ_WRITE );\n+\n+        manager.update( programStageA );\n+        manager.update( programStageB );\n+        manager.update( programA );\n+\n+        maleA = createTrackedEntityInstance( 'A', organisationUnitA );\n+        maleB = createTrackedEntityInstance( organisationUnitB );\n+        femaleA = createTrackedEntityInstance( organisationUnitA );\n+        femaleB = createTrackedEntityInstance( organisationUnitB );\n+\n+        maleA.setTrackedEntityType( trackedEntityType );\n+        maleB.setTrackedEntityType( trackedEntityType );\n+        femaleA.setTrackedEntityType( trackedEntityType );\n+        femaleB.setTrackedEntityType( trackedEntityType );\n+\n+        manager.save( maleA );\n+        manager.save( maleB );\n+        manager.save( femaleA );\n+        manager.save( femaleB );\n+\n+        int testYear = Calendar.getInstance().get( Calendar.YEAR ) - 1;\n+        Date dateMar20 = getDate( testYear, 3, 20 );\n+        Date dateApr10 = getDate( testYear, 4, 10 );\n+\n+        ProgramInstance programInstance = programInstanceService\n+            .enrollTrackedEntityInstance( maleA, programA, dateMar20, dateApr10, organisationUnitA );\n+        programInstanceService.addProgramInstance( programInstance );\n+\n+        manager.update( programA );\n+\n+        User user = userService.getUser( USER_5 );\n+\n+        OrganisationUnit qfUVllTs6cS = organisationUnitService.getOrganisationUnit( \"QfUVllTs6cS\" );\n+        user.addOrganisationUnit( qfUVllTs6cS );\n+        user.addOrganisationUnit( organisationUnitA );\n+\n+        manager.update( user );\n+    }\n+\n+    @Test\n+    public void testNoWriteAccessToProgramStage()", "originalCommit": "58917c0ff1988692a4906ea00a0e0670d4d251d7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "3e799d196b8f73ad216ea100a07ddd5f7dfc53e0", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EventSecurityImportValidationTest.java b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EventSecurityImportValidationTest.java\nindex 4fbac89166..a886cb577e 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EventSecurityImportValidationTest.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EventSecurityImportValidationTest.java\n", "chunk": "@@ -323,13 +268,13 @@ public class EventSecurityImportValidationTest\n     {\n         setupMetadata();\n \n-        TrackerBundleParams trackerBundleParams = createBundleFromJson(\n+        TrackerImportParams trackerBundleParams = createBundleFromJson(\n             \"tracker/validations/events_error-no-programStage-access.json\" );\n \n         User user = userService.getUser( USER_3 );\n         trackerBundleParams.setUser( user );\n \n-        TrackerBundle trackerBundle = trackerBundleService.create( trackerBundleParams ).get( 0 );\n+        TrackerBundle trackerBundle = trackerBundleService.create( trackerBundleParams );\n         assertEquals( 1, trackerBundle.getEvents().size() );\n \n         TrackerValidationReport report = trackerValidationService.validate( trackerBundle );\n", "next_change": {"commit": "20dfefe359779d7e1c1921ba920465227e72f071", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EventSecurityImportValidationTest.java b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EventSecurityImportValidationTest.java\nindex a886cb577e..7d43f3f0a1 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EventSecurityImportValidationTest.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EventSecurityImportValidationTest.java\n", "chunk": "@@ -274,18 +276,14 @@ public class EventSecurityImportValidationTest\n         User user = userService.getUser( USER_3 );\n         trackerBundleParams.setUser( user );\n \n-        TrackerBundle trackerBundle = trackerBundleService.create( trackerBundleParams );\n-        assertEquals( 1, trackerBundle.getEvents().size() );\n-\n-        TrackerValidationReport report = trackerValidationService.validate( trackerBundle );\n-        printReport( report );\n+        TrackerImportReport trackerImportReport = trackerImportService.importTracker( trackerBundleParams );\n \n-        assertEquals( 2, report.getErrorReports().size() );\n+        assertEquals( 2, trackerImportReport.getValidationReport().getErrorReports().size() );\n \n-        assertThat( report.getErrorReports(),\n+        assertThat( trackerImportReport.getValidationReport().getErrorReports(),\n             hasItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1095 ) ) ) );\n \n-        assertThat( report.getErrorReports(),\n+        assertThat( trackerImportReport.getValidationReport().getErrorReports(),\n             hasItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1096 ) ) ) );\n     }\n \n", "next_change": {"commit": "7d032be663a1d9444d4bc1dbf3bc20ff0f861ec1", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EventSecurityImportValidationTest.java b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EventSecurityImportValidationTest.java\nindex 7d43f3f0a1..79622928b7 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EventSecurityImportValidationTest.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EventSecurityImportValidationTest.java\n", "chunk": "@@ -288,20 +291,18 @@ public class EventSecurityImportValidationTest\n     }\n \n     @Test\n-    @Ignore( \"This is broken by feat: Period offset for Indicator formula (#5772) Luciano Fiandesio* 06.07.2020, 15:24 2c5a6f7bbbb00d0e4ff8028fde972fd6f4413f8c \" )\n     public void testNoUncompleteEventAuth()\n         throws IOException\n     {\n         setupMetadata();\n \n-        ValidateAndCommitTestUnit createAndUpdate = validateAndCommit(\n-            \"tracker/validations/events_error-no-uncomplete.json\", TrackerImportStrategy.CREATE );\n-        TrackerValidationReport report = createAndUpdate.getValidationReport();\n+        TrackerImportParams params = createBundleFromJson( \"tracker/validations/events_error-no-uncomplete.json\" );\n+        params.setImportStrategy( TrackerImportStrategy.CREATE );\n \n-        printReport( report );\n+        TrackerImportReport trackerImportReport = trackerImportService.importTracker( params );\n \n-        assertEquals( 0, report.getErrorReports().size() );\n-        assertEquals( TrackerStatus.OK, createAndUpdate.getCommitReport().getStatus() );\n+        assertEquals( 0, trackerImportReport.getValidationReport().getErrorReports().size() );\n+        assertEquals( TrackerStatus.OK, trackerImportReport.getStatus() );\n \n         // Change just inserted Event to status COMPLETED...\n         ProgramStageInstance zwwuwNp6gVd = programStageServiceInstance.getProgramStageInstance( \"ZwwuwNp6gVd\" );\n", "next_change": {"commit": "22d5da9d9a812b02eb5acd643112a6b050b5d63c", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EventSecurityImportValidationTest.java b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EventSecurityImportValidationTest.java\nindex 79622928b7..5a347401b7 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EventSecurityImportValidationTest.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EventSecurityImportValidationTest.java\n", "chunk": "@@ -165,171 +160,127 @@ public class EventSecurityImportValidationTest\n         manager.save( organisationUnitB );\n         organisationUnitA.setPublicAccess( AccessStringHelper.FULL );\n         manager.update( organisationUnitA );\n-\n         dataElementA = createDataElement( 'A' );\n         dataElementB = createDataElement( 'B' );\n         dataElementA.setValueType( ValueType.INTEGER );\n         dataElementB.setValueType( ValueType.INTEGER );\n-\n         manager.save( dataElementA );\n         manager.save( dataElementB );\n-\n         programStageA = createProgramStage( 'A', 0 );\n         programStageB = createProgramStage( 'B', 0 );\n         programStageB.setRepeatable( true );\n-\n         manager.save( programStageA );\n         manager.save( programStageB );\n-\n         programA = createProgram( 'A', new HashSet<>(), organisationUnitA );\n         programA.setProgramType( ProgramType.WITH_REGISTRATION );\n-\n         trackedEntityType = createTrackedEntityType( 'A' );\n         trackedEntityTypeService.addTrackedEntityType( trackedEntityType );\n-\n         TrackedEntityType trackedEntityTypeFromProgram = createTrackedEntityType( 'C' );\n         trackedEntityTypeService.addTrackedEntityType( trackedEntityTypeFromProgram );\n-\n         manager.save( programA );\n-\n         ProgramStageDataElement programStageDataElement = new ProgramStageDataElement();\n         programStageDataElement.setDataElement( dataElementA );\n         programStageDataElement.setProgramStage( programStageA );\n         programStageDataElementService.addProgramStageDataElement( programStageDataElement );\n-\n         programStageA.getProgramStageDataElements().add( programStageDataElement );\n         programStageA.setProgram( programA );\n-\n         programStageDataElement = new ProgramStageDataElement();\n         programStageDataElement.setDataElement( dataElementB );\n         programStageDataElement.setProgramStage( programStageB );\n         programStageDataElementService.addProgramStageDataElement( programStageDataElement );\n-\n         programStageB.getProgramStageDataElements().add( programStageDataElement );\n         programStageB.setProgram( programA );\n         programStageB.setMinDaysFromStart( 2 );\n-\n         programA.getProgramStages().add( programStageA );\n         programA.getProgramStages().add( programStageB );\n-\n         programA.setTrackedEntityType( trackedEntityType );\n         trackedEntityType.setPublicAccess( AccessStringHelper.DATA_READ_WRITE );\n-\n         manager.update( programStageA );\n         manager.update( programStageB );\n         manager.update( programA );\n-\n         maleA = createTrackedEntityInstance( 'A', organisationUnitA );\n         maleB = createTrackedEntityInstance( organisationUnitB );\n         femaleA = createTrackedEntityInstance( organisationUnitA );\n         femaleB = createTrackedEntityInstance( organisationUnitB );\n-\n         maleA.setTrackedEntityType( trackedEntityType );\n         maleB.setTrackedEntityType( trackedEntityType );\n         femaleA.setTrackedEntityType( trackedEntityType );\n         femaleB.setTrackedEntityType( trackedEntityType );\n-\n         manager.save( maleA );\n         manager.save( maleB );\n         manager.save( femaleA );\n         manager.save( femaleB );\n-\n         int testYear = Calendar.getInstance().get( Calendar.YEAR ) - 1;\n         Date dateMar20 = getDate( testYear, 3, 20 );\n         Date dateApr10 = getDate( testYear, 4, 10 );\n-\n-        ProgramInstance programInstance = programInstanceService\n-            .enrollTrackedEntityInstance( maleA, programA, dateMar20, dateApr10, organisationUnitA, \"MNWZ6hnuhSX\" );\n+        ProgramInstance programInstance = programInstanceService.enrollTrackedEntityInstance( maleA, programA,\n+            dateMar20, dateApr10, organisationUnitA, \"MNWZ6hnuhSX\" );\n         programInstanceService.addProgramInstance( programInstance );\n-\n         trackedEntityProgramOwnerService.updateTrackedEntityProgramOwner( maleA.getUid(), programA.getUid(),\n             organisationUnitA.getUid() );\n-\n         manager.update( programA );\n-\n         User user = userService.getUser( USER_5 );\n-\n         OrganisationUnit qfUVllTs6cS = organisationUnitService.getOrganisationUnit( \"QfUVllTs6cS\" );\n         user.addOrganisationUnit( qfUVllTs6cS );\n         user.addOrganisationUnit( organisationUnitA );\n-\n         User adminUser = userService.getUser( ADMIN_USER_UID );\n         adminUser.addOrganisationUnit( organisationUnitA );\n-\n         Program p = programService.getProgram( \"prabcdefghA\" );\n         p.addOrganisationUnit( qfUVllTs6cS );\n-\n         programService.updateProgram( p );\n-\n         manager.update( user );\n         manager.update( adminUser );\n     }\n \n     @Test\n-    public void testNoWriteAccessToProgramStage()\n+    void testNoWriteAccessToProgramStage()\n         throws IOException\n     {\n         setupMetadata();\n-\n         TrackerImportParams trackerBundleParams = createBundleFromJson(\n             \"tracker/validations/events_error-no-programStage-access.json\" );\n-\n         User user = userService.getUser( USER_3 );\n         trackerBundleParams.setUser( user );\n         user.addOrganisationUnit( organisationUnitA );\n         manager.update( user );\n-\n         TrackerImportReport trackerImportReport = trackerImportService.importTracker( trackerBundleParams );\n-\n         assertEquals( 2, trackerImportReport.getValidationReport().getErrorReports().size() );\n-\n         assertThat( trackerImportReport.getValidationReport().getErrorReports(),\n             hasItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1095 ) ) ) );\n-\n         assertThat( trackerImportReport.getValidationReport().getErrorReports(),\n             hasItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1096 ) ) ) );\n     }\n \n     @Test\n-    public void testNoUncompleteEventAuth()\n+    void testNoUncompleteEventAuth()\n         throws IOException\n     {\n         setupMetadata();\n-\n         TrackerImportParams params = createBundleFromJson( \"tracker/validations/events_error-no-uncomplete.json\" );\n         params.setImportStrategy( TrackerImportStrategy.CREATE );\n-\n         TrackerImportReport trackerImportReport = trackerImportService.importTracker( params );\n-\n         assertEquals( 0, trackerImportReport.getValidationReport().getErrorReports().size() );\n         assertEquals( TrackerStatus.OK, trackerImportReport.getStatus() );\n-\n         // Change just inserted Event to status COMPLETED...\n         ProgramStageInstance zwwuwNp6gVd = programStageServiceInstance.getProgramStageInstance( \"ZwwuwNp6gVd\" );\n         zwwuwNp6gVd.setStatus( EventStatus.COMPLETED );\n         manager.update( zwwuwNp6gVd );\n-\n         TrackerImportParams trackerBundleParams = createBundleFromJson(\n             \"tracker/validations/events_error-no-uncomplete.json\" );\n-\n         programA.setPublicAccess( AccessStringHelper.FULL );\n         manager.update( programA );\n-\n         programStageA.setPublicAccess( AccessStringHelper.FULL );\n         manager.update( programStageA );\n-\n         maleA.setPublicAccess( AccessStringHelper.FULL );\n         manager.update( maleA );\n-\n         User user = userService.getUser( USER_4 );\n         user.addOrganisationUnit( organisationUnitA );\n         manager.update( user );\n-\n+        manager.flush();\n+        manager.clear();\n         trackerBundleParams.setUserId( user.getUid() );\n         trackerBundleParams.setImportStrategy( TrackerImportStrategy.UPDATE );\n-\n         trackerImportReport = trackerImportService.importTracker( trackerBundleParams );\n-\n         assertEquals( 1, trackerImportReport.getValidationReport().getErrorReports().size() );\n         assertThat( trackerImportReport.getValidationReport().getErrorReports(),\n             hasItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1083 ) ) ) );\n", "next_change": {"commit": "7c0131dfcfbf72dad27dc5f0a3f6a776e286c79a", "changed_code": [{"header": "diff --git a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EventSecurityImportValidationTest.java b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EventSecurityImportValidationTest.java\nindex 5a347401b7..8b71587a73 100644\n--- a/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EventSecurityImportValidationTest.java\n+++ b/dhis-2/dhis-services/dhis-service-tracker/src/test/java/org/hisp/dhis/tracker/validation/EventSecurityImportValidationTest.java\n", "chunk": "@@ -281,8 +281,8 @@ class EventSecurityImportValidationTest extends AbstractImportValidationTest\n         trackerBundleParams.setUserId( user.getUid() );\n         trackerBundleParams.setImportStrategy( TrackerImportStrategy.UPDATE );\n         trackerImportReport = trackerImportService.importTracker( trackerBundleParams );\n-        assertEquals( 1, trackerImportReport.getValidationReport().getErrorReports().size() );\n-        assertThat( trackerImportReport.getValidationReport().getErrorReports(),\n+        assertEquals( 1, trackerImportReport.getValidationReport().getErrors().size() );\n+        assertThat( trackerImportReport.getValidationReport().getErrors(),\n             hasItem( hasProperty( \"errorCode\", equalTo( TrackerErrorCode.E1083 ) ) ) );\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "5ffa773fc19b0b0f23f521ea62a8db49b49e1189", "message": "Merge commit", "committedDate": null}, {"oid": "2ed799f33ca26b918ed60473a3f097714f00492e", "committedDate": "2020-08-04 10:30:01 +0200", "message": "chore: Clean up code (#5877)"}, {"oid": "cb2ee65c0210c0d4b2bd8851789da8d4adfaf04d", "committedDate": "2020-09-07 10:28:21 +0200", "message": "fix: [DHIS2-9287] Fix the stats in the import summary (#6062)"}, {"oid": "2670177207885cb54b4b51516d55749ab8836588", "committedDate": "2020-11-13 14:02:16 +0100", "message": "fix: correct validation rule for Event's TEI value (#6655)"}, {"oid": "3e799d196b8f73ad216ea100a07ddd5f7dfc53e0", "committedDate": "2020-11-30 16:37:14 +0100", "message": "fix: remove long running transaction during Tracker Import (#6782)"}, {"oid": "8ced4a4fc7c2eb2dbbc7f7dc73f64aff30082d6a", "committedDate": "2021-01-11 22:17:46 +0700", "message": "chore: update copyright to 2004-2021 (#7082)"}, {"oid": "055574bea49c3a40c5cfff3cb86694fc4bd12c45", "committedDate": "2021-01-12 15:26:26 +0100", "message": "perf: replace expensive \"Program has OrgUnit\" call with faster SQL (#6930)"}, {"oid": "ea76fa86409613c9766d4508d65c88ac55c413c3", "committedDate": "2021-01-22 12:07:16 +0100", "message": "chore: Format the whole codebase with spotless plugin (#7164)"}, {"oid": "00ba07c1c8555a473f261d56bffffa2b75d3c146", "committedDate": "2021-03-08 12:59:21 +0100", "message": "refactor: Remove unused bundle hook and fix tests [TECH-553] (#7539)"}, {"oid": "20dfefe359779d7e1c1921ba920465227e72f071", "committedDate": "2021-05-25 12:55:24 +0200", "message": "fix: Remove validations from objects deletion service in new tracker importer [DHIS2-10789] (#8053)"}, {"oid": "7d032be663a1d9444d4bc1dbf3bc20ff0f861ec1", "committedDate": "2021-05-26 16:49:59 +0200", "message": "refactor: Clean up integration tests in the new importer [TECH-589] (#8076)"}, {"oid": "aff1cb136bdfdf4af8213f8878967be42f5687e9", "committedDate": "2021-06-11 10:58:03 +0200", "message": "fix: Get correct program stage from preheated Program [DHIS2-11225] (#8175)"}, {"oid": "22d5da9d9a812b02eb5acd643112a6b050b5d63c", "committedDate": "2021-12-16 13:19:38 +0100", "message": "chore: migrate tests to JUnit 5 (#9467)"}, {"oid": "63161ceba0ab1bc2dfb77e5452ffc879f9036949", "committedDate": "2022-01-10 16:07:17 +0700", "message": "chore: update license to 2004-2022 (#9587)"}, {"oid": "7c0131dfcfbf72dad27dc5f0a3f6a776e286c79a", "committedDate": "2022-01-11 17:47:56 +0100", "message": "chore: make TrackerValidationReport add methods fluent and name Timing TECH-880 (#9601)"}, {"oid": "2f44bf54a94fca80ec8bef3a160d403665973bed", "committedDate": "2022-05-23 06:02:37 +0200", "message": "chore: Clean up user management in tracker tests [TECH-890] (#10862)"}, {"oid": "6b39184ce68d45d2d75a08c3d6b45fe012395457", "committedDate": "2022-06-03 08:16:09 +0200", "message": "test: use assertNoImportErrors for better context (#10989)"}, {"oid": "6e83eba877030575456f919de1bce55fcae8e517", "committedDate": "2022-06-24 10:01:46 +0200", "message": "test: move all integration tests into own module TECH-1209 (#11148)"}]}, {"oid": "0c469e1350e645b019954827553da9f855b7dcb4", "url": "https://github.com/dhis2/dhis2-core/commit/0c469e1350e645b019954827553da9f855b7dcb4", "message": "* PR comments adjustments", "committedDate": "2020-07-06T14:44:28Z", "type": "commit"}, {"oid": "971eecb46d414a2bf18f530223bef7a041abf919", "url": "https://github.com/dhis2/dhis2-core/commit/971eecb46d414a2bf18f530223bef7a041abf919", "message": "* PR comments adjustments", "committedDate": "2020-07-07T07:28:32Z", "type": "commit"}, {"oid": "323c5b586a83132f0ad8fd3039a6e21c85d51caf", "url": "https://github.com/dhis2/dhis2-core/commit/323c5b586a83132f0ad8fd3039a6e21c85d51caf", "message": "* Disable test that works locally but fail on Travis", "committedDate": "2020-07-07T08:16:17Z", "type": "commit"}, {"oid": "3b7b1ca2a01816b677631bc99928a71091860d75", "url": "https://github.com/dhis2/dhis2-core/commit/3b7b1ca2a01816b677631bc99928a71091860d75", "message": "* Fix default category option behaviour", "committedDate": "2020-07-07T10:47:37Z", "type": "commit"}, {"oid": "c9dbe7965959518882dbad8401946ed9a65ab742", "url": "https://github.com/dhis2/dhis2-core/commit/c9dbe7965959518882dbad8401946ed9a65ab742", "message": "* Fix more comments from PR", "committedDate": "2020-07-07T11:08:10Z", "type": "commit"}, {"oid": "fb6290fc467ede9d1e84928bae02aedeaaad6550", "url": "https://github.com/dhis2/dhis2-core/commit/fb6290fc467ede9d1e84928bae02aedeaaad6550", "message": "* Fix broken test", "committedDate": "2020-07-07T11:29:05Z", "type": "commit"}, {"oid": "26ccbc16a70acb1756192089cfbb9f0e7e548478", "url": "https://github.com/dhis2/dhis2-core/commit/26ccbc16a70acb1756192089cfbb9f0e7e548478", "message": "* Add suppress warnings to ignore false positive on Sonar", "committedDate": "2020-07-07T14:33:33Z", "type": "commit"}, {"oid": "0a0dfd78bf3cc7bdb4a1dfffe466ebc8707ce619", "url": "https://github.com/dhis2/dhis2-core/commit/0a0dfd78bf3cc7bdb4a1dfffe466ebc8707ce619", "message": "Merge branch 'master' of github.com:dhis2/dhis2-core into DHIS2-8879", "committedDate": "2020-07-07T14:37:40Z", "type": "commit"}, {"oid": "bced6ffbdfe5501113754dedc6b20db674d04a4d", "url": "https://github.com/dhis2/dhis2-core/commit/bced6ffbdfe5501113754dedc6b20db674d04a4d", "message": "* Add set user to failing test", "committedDate": "2020-07-07T14:46:16Z", "type": "commit"}, {"oid": "1f743e7bc3db7848d57244dc5c3f2e1a8c3c4f5f", "url": "https://github.com/dhis2/dhis2-core/commit/1f743e7bc3db7848d57244dc5c3f2e1a8c3c4f5f", "message": "* Fix complaining Sonar", "committedDate": "2020-07-07T15:33:52Z", "type": "commit"}, {"oid": "692f75069aadcba0807b5c2c4bade15fa731c0db", "url": "https://github.com/dhis2/dhis2-core/commit/692f75069aadcba0807b5c2c4bade15fa731c0db", "message": "* Fix complaining Sonar", "committedDate": "2020-07-08T02:25:10Z", "type": "commit"}, {"oid": "898c87ce14bf1faf20e8f8ebf3a5bc12f27437f0", "url": "https://github.com/dhis2/dhis2-core/commit/898c87ce14bf1faf20e8f8ebf3a5bc12f27437f0", "message": "* Small adjustments to PR comments", "committedDate": "2020-07-09T06:17:04Z", "type": "commit"}, {"oid": "f068ebf76171126118f6f9d3a804e60957e8821a", "url": "https://github.com/dhis2/dhis2-core/commit/f068ebf76171126118f6f9d3a804e60957e8821a", "message": "* Small adjustments to PR comments", "committedDate": "2020-07-09T07:40:30Z", "type": "commit"}]}