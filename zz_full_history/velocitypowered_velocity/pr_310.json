{"pr_number": 310, "pr_title": "[Future] 1.16 Update", "pr_author": "Xernium", "pr_createdAt": "2020-05-22T22:23:34Z", "pr_url": "https://github.com/PaperMC/Velocity/pull/310", "merge_commit": "0dd6fe1ef2783fe1f9322af06c6fd218aa67cdb1", "timeline": [{"oid": "d37b6a361cb05f69db2608c29c4608dc6881edc7", "url": "https://github.com/PaperMC/Velocity/commit/d37b6a361cb05f69db2608c29c4608dc6881edc7", "message": "Snapshot 20w21a", "committedDate": "2020-05-22T22:18:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ3OTMyMg==", "url": "https://github.com/PaperMC/Velocity/pull/310#discussion_r429479322", "body": "Add `@Nullable`", "bodyText": "Add @Nullable", "bodyHTML": "<p dir=\"auto\">Add <code>@Nullable</code></p>", "author": "mikroskeem", "createdAt": "2020-05-22T22:31:17Z", "path": "proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java", "diffHunk": "@@ -10,20 +10,25 @@\n import net.kyori.text.serializer.gson.GsonComponentSerializer;\n import org.checkerframework.checker.nullness.qual.Nullable;\n \n+import java.util.UUID;\n+\n public class Chat implements MinecraftPacket {\n \n   public static final byte CHAT_TYPE = (byte) 0;\n   public static final int MAX_SERVERBOUND_MESSAGE_LENGTH = 256;\n+  public static final UUID EMPTY_SENDER = new UUID(0, 0);\n \n   private @Nullable String message;\n   private byte type;\n+  private UUID sender;", "originalCommit": "d37b6a361cb05f69db2608c29c4608dc6881edc7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fca73bae675d396cb584fc48e2c0548cc6595e58", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java\nindex b80e0f85..61619d0e 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java\n", "chunk": "@@ -20,7 +20,7 @@ public class Chat implements MinecraftPacket {\n \n   private @Nullable String message;\n   private byte type;\n-  private UUID sender;\n+  private @Nullable UUID sender;\n \n   public Chat() {\n   }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "0dd6fe1ef2783fe1f9322af06c6fd218aa67cdb1", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java\nindex b80e0f85..7905d7ca 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java\n", "chunk": "@@ -20,7 +20,7 @@ public class Chat implements MinecraftPacket {\n \n   private @Nullable String message;\n   private byte type;\n-  private UUID sender;\n+  private @Nullable UUID sender;\n \n   public Chat() {\n   }\n", "next_change": {"commit": "5c314c9068814aca404b68cf8442af7201bdcf43", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java\nindex 7905d7ca..2321b518 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java\n", "chunk": "@@ -10,25 +10,20 @@ import net.kyori.text.Component;\n import net.kyori.text.serializer.gson.GsonComponentSerializer;\n import org.checkerframework.checker.nullness.qual.Nullable;\n \n-import java.util.UUID;\n-\n public class Chat implements MinecraftPacket {\n \n   public static final byte CHAT_TYPE = (byte) 0;\n   public static final int MAX_SERVERBOUND_MESSAGE_LENGTH = 256;\n-  public static final UUID EMPTY_SENDER = new UUID(0, 0);\n \n   private @Nullable String message;\n   private byte type;\n-  private @Nullable UUID sender;\n \n   public Chat() {\n   }\n \n-  public Chat(String message, byte type, UUID sender) {\n+  public Chat(String message, byte type) {\n     this.message = message;\n     this.type = type;\n-    this.sender = sender;\n   }\n \n   public String getMessage() {\n", "next_change": {"commit": "cd9bb61f208e3b27da9fbdcb4bf6cafc9135be65", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java\nindex 2321b518..7905d7ca 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java\n", "chunk": "@@ -10,20 +10,25 @@ import net.kyori.text.Component;\n import net.kyori.text.serializer.gson.GsonComponentSerializer;\n import org.checkerframework.checker.nullness.qual.Nullable;\n \n+import java.util.UUID;\n+\n public class Chat implements MinecraftPacket {\n \n   public static final byte CHAT_TYPE = (byte) 0;\n   public static final int MAX_SERVERBOUND_MESSAGE_LENGTH = 256;\n+  public static final UUID EMPTY_SENDER = new UUID(0, 0);\n \n   private @Nullable String message;\n   private byte type;\n+  private @Nullable UUID sender;\n \n   public Chat() {\n   }\n \n-  public Chat(String message, byte type) {\n+  public Chat(String message, byte type, UUID sender) {\n     this.message = message;\n     this.type = type;\n+    this.sender = sender;\n   }\n \n   public String getMessage() {\n", "next_change": {"commit": "d97ed956a7be1411b192939abcab8412932230b8", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/chat/LegacyChat.java\nsimilarity index 62%\nrename from proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java\nrename to proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/chat/LegacyChat.java\nindex 7905d7ca..d16d4c5e 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/chat/LegacyChat.java\n", "chunk": "@@ -22,15 +40,21 @@ public class Chat implements MinecraftPacket {\n   private byte type;\n   private @Nullable UUID sender;\n \n-  public Chat() {\n+  public LegacyChat() {\n   }\n \n-  public Chat(String message, byte type, UUID sender) {\n+  /**\n+   * Creates a Chat packet.\n+   */\n+  public LegacyChat(String message, byte type, UUID sender) {\n     this.message = message;\n     this.type = type;\n     this.sender = sender;\n   }\n \n+  /**\n+   * Retrieves the Chat message.\n+   */\n   public String getMessage() {\n     if (message == null) {\n       throw new IllegalStateException(\"Message is not specified\");\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "0dd6fe1ef2783fe1f9322af06c6fd218aa67cdb1", "message": "Merge commit", "committedDate": null}, {"oid": "5c314c9068814aca404b68cf8442af7201bdcf43", "committedDate": "2019-07-01 08:56:22 +0200", "message": "Add 1.7 Protocol Support"}, {"oid": "cd9bb61f208e3b27da9fbdcb4bf6cafc9135be65", "committedDate": "2020-06-20 23:11:19 -0400", "message": "Merge branch 'future/1.16' of https://github.com/Xernium/Velocity into Xernium-future/1.16"}, {"oid": "ada35ff28698c9cccea50236eda6ec4c291ca13a", "committedDate": "2020-06-20 23:24:32 -0400", "message": "Merge branch 'Xernium-future/1.16' into future/1.16-velocity-1.1.0"}, {"oid": "2e7a598916c49917979feca7db7dece0c6abd84e", "committedDate": "2020-06-28 21:23:01 -0400", "message": "Initial commit of adventure-adapted Velocity API."}, {"oid": "c2edd82b16660ab75210fb5caabf09d56bd73b28", "committedDate": "2020-06-28 23:13:57 -0400", "message": "Use more idiomatic adventure text serializer"}, {"oid": "26f3cb43c7c8b81d0b10c79dde6c308b34b280fb", "committedDate": "2020-08-16 14:02:04 -0400", "message": "Clean up some Adventure support code, implement another sendMessage overload"}, {"oid": "60e917b4a104d02f9175013e3ce1a42c5daa4ae9", "committedDate": "2020-10-13 22:36:51 -0700", "message": "Player has an identity"}, {"oid": "a6e708c98ee9b872cfc7866c74babe1ea908442d", "committedDate": "2020-10-20 14:26:08 -0400", "message": "Fix Adventure sendActionBar implementation and add proper action bar sending for 1.16.2"}, {"oid": "8995b64dc6a102b03966dfa5baab0e0f06c79bb6", "committedDate": "2020-10-22 03:02:09 -0400", "message": "Do not use the GAME_INFO chat type."}, {"oid": "c747120b20be1853ee02e7b2b67871249a88aa6d", "committedDate": "2021-03-31 16:04:06 -0400", "message": "Relicense the Velocity proxy under the terms of GPLv3 (#448)"}, {"oid": "977300cc66af91cdf88bff38f487a8e3207e33d7", "committedDate": "2021-05-23 14:13:51 -0400", "message": "Remove text 3.x API and associated deprecated APIs"}, {"oid": "d97ed956a7be1411b192939abcab8412932230b8", "committedDate": "2022-06-07 21:00:24 -0400", "message": "Update/1.19 (#726)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ3OTM4MQ==", "url": "https://github.com/PaperMC/Velocity/pull/310#discussion_r429479381", "body": "Use `EMPTY_SENDER` constant here", "bodyText": "Use EMPTY_SENDER constant here", "bodyHTML": "<p dir=\"auto\">Use <code>EMPTY_SENDER</code> constant here</p>", "author": "mikroskeem", "createdAt": "2020-05-22T22:31:39Z", "path": "proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java", "diffHunk": "@@ -69,6 +86,9 @@ public void encode(ByteBuf buf, ProtocolUtils.Direction direction, ProtocolVersi\n     ProtocolUtils.writeString(buf, message);\n     if (direction == ProtocolUtils.Direction.CLIENTBOUND) {\n       buf.writeByte(type);\n+      if(version.compareTo(ProtocolVersion.MINECRAFT_1_16) >= 0) {\n+        ProtocolUtils.writeUuid(buf, sender == null ? new UUID(0,0) : sender);", "originalCommit": "d37b6a361cb05f69db2608c29c4608dc6881edc7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTUzMjE1OQ==", "url": "https://github.com/VelocityPowered/Velocity/pull/310#discussion_r429532159", "bodyText": "Silly me, I made it for that purpose", "author": "Xernium", "createdAt": "2020-05-23T09:51:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ3OTM4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "fca73bae675d396cb584fc48e2c0548cc6595e58", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java\nindex b80e0f85..61619d0e 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java\n", "chunk": "@@ -87,7 +87,7 @@ public class Chat implements MinecraftPacket {\n     if (direction == ProtocolUtils.Direction.CLIENTBOUND) {\n       buf.writeByte(type);\n       if(version.compareTo(ProtocolVersion.MINECRAFT_1_16) >= 0) {\n-        ProtocolUtils.writeUuid(buf, sender == null ? new UUID(0,0) : sender);\n+        ProtocolUtils.writeUuid(buf, sender == null ? EMPTY_SENDER : sender);\n       }\n     }\n   }\n", "next_change": {"commit": "38487c5bba0d2376312f663c47bbea906c32779e", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java\nindex 61619d0e..7905d7ca 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java\n", "chunk": "@@ -86,7 +86,7 @@ public class Chat implements MinecraftPacket {\n     ProtocolUtils.writeString(buf, message);\n     if (direction == ProtocolUtils.Direction.CLIENTBOUND) {\n       buf.writeByte(type);\n-      if(version.compareTo(ProtocolVersion.MINECRAFT_1_16) >= 0) {\n+      if (version.compareTo(ProtocolVersion.MINECRAFT_1_16) >= 0) {\n         ProtocolUtils.writeUuid(buf, sender == null ? EMPTY_SENDER : sender);\n       }\n     }\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "0dd6fe1ef2783fe1f9322af06c6fd218aa67cdb1", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java\nindex b80e0f85..7905d7ca 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java\n", "chunk": "@@ -86,8 +86,8 @@ public class Chat implements MinecraftPacket {\n     ProtocolUtils.writeString(buf, message);\n     if (direction == ProtocolUtils.Direction.CLIENTBOUND) {\n       buf.writeByte(type);\n-      if(version.compareTo(ProtocolVersion.MINECRAFT_1_16) >= 0) {\n-        ProtocolUtils.writeUuid(buf, sender == null ? new UUID(0,0) : sender);\n+      if (version.compareTo(ProtocolVersion.MINECRAFT_1_16) >= 0) {\n+        ProtocolUtils.writeUuid(buf, sender == null ? EMPTY_SENDER : sender);\n       }\n     }\n   }\n", "next_change": {"commit": "5c314c9068814aca404b68cf8442af7201bdcf43", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java\nindex 7905d7ca..2321b518 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java\n", "chunk": "@@ -84,11 +67,8 @@ public class Chat implements MinecraftPacket {\n       throw new IllegalStateException(\"Message is not specified\");\n     }\n     ProtocolUtils.writeString(buf, message);\n-    if (direction == ProtocolUtils.Direction.CLIENTBOUND) {\n+    if (direction == ProtocolUtils.Direction.CLIENTBOUND && version.compareTo(ProtocolVersion.MINECRAFT_1_8) >= 0) {\n       buf.writeByte(type);\n-      if (version.compareTo(ProtocolVersion.MINECRAFT_1_16) >= 0) {\n-        ProtocolUtils.writeUuid(buf, sender == null ? EMPTY_SENDER : sender);\n-      }\n     }\n   }\n \n", "next_change": {"commit": "cd9bb61f208e3b27da9fbdcb4bf6cafc9135be65", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java\nindex 2321b518..7905d7ca 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java\n", "chunk": "@@ -67,8 +84,11 @@ public class Chat implements MinecraftPacket {\n       throw new IllegalStateException(\"Message is not specified\");\n     }\n     ProtocolUtils.writeString(buf, message);\n-    if (direction == ProtocolUtils.Direction.CLIENTBOUND && version.compareTo(ProtocolVersion.MINECRAFT_1_8) >= 0) {\n+    if (direction == ProtocolUtils.Direction.CLIENTBOUND) {\n       buf.writeByte(type);\n+      if (version.compareTo(ProtocolVersion.MINECRAFT_1_16) >= 0) {\n+        ProtocolUtils.writeUuid(buf, sender == null ? EMPTY_SENDER : sender);\n+      }\n     }\n   }\n \n", "next_change": {"commit": "ada35ff28698c9cccea50236eda6ec4c291ca13a", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java\nindex 7905d7ca..028f1cca 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java\n", "chunk": "@@ -84,7 +84,7 @@ public class Chat implements MinecraftPacket {\n       throw new IllegalStateException(\"Message is not specified\");\n     }\n     ProtocolUtils.writeString(buf, message);\n-    if (direction == ProtocolUtils.Direction.CLIENTBOUND) {\n+    if (direction == ProtocolUtils.Direction.CLIENTBOUND && version.compareTo(ProtocolVersion.MINECRAFT_1_8) >= 0) {\n       buf.writeByte(type);\n       if (version.compareTo(ProtocolVersion.MINECRAFT_1_16) >= 0) {\n         ProtocolUtils.writeUuid(buf, sender == null ? EMPTY_SENDER : sender);\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "0dd6fe1ef2783fe1f9322af06c6fd218aa67cdb1", "message": "Merge commit", "committedDate": null}, {"oid": "5c314c9068814aca404b68cf8442af7201bdcf43", "committedDate": "2019-07-01 08:56:22 +0200", "message": "Add 1.7 Protocol Support"}, {"oid": "cd9bb61f208e3b27da9fbdcb4bf6cafc9135be65", "committedDate": "2020-06-20 23:11:19 -0400", "message": "Merge branch 'future/1.16' of https://github.com/Xernium/Velocity into Xernium-future/1.16"}, {"oid": "ada35ff28698c9cccea50236eda6ec4c291ca13a", "committedDate": "2020-06-20 23:24:32 -0400", "message": "Merge branch 'Xernium-future/1.16' into future/1.16-velocity-1.1.0"}, {"oid": "2e7a598916c49917979feca7db7dece0c6abd84e", "committedDate": "2020-06-28 21:23:01 -0400", "message": "Initial commit of adventure-adapted Velocity API."}, {"oid": "c2edd82b16660ab75210fb5caabf09d56bd73b28", "committedDate": "2020-06-28 23:13:57 -0400", "message": "Use more idiomatic adventure text serializer"}, {"oid": "26f3cb43c7c8b81d0b10c79dde6c308b34b280fb", "committedDate": "2020-08-16 14:02:04 -0400", "message": "Clean up some Adventure support code, implement another sendMessage overload"}, {"oid": "60e917b4a104d02f9175013e3ce1a42c5daa4ae9", "committedDate": "2020-10-13 22:36:51 -0700", "message": "Player has an identity"}, {"oid": "a6e708c98ee9b872cfc7866c74babe1ea908442d", "committedDate": "2020-10-20 14:26:08 -0400", "message": "Fix Adventure sendActionBar implementation and add proper action bar sending for 1.16.2"}, {"oid": "8995b64dc6a102b03966dfa5baab0e0f06c79bb6", "committedDate": "2020-10-22 03:02:09 -0400", "message": "Do not use the GAME_INFO chat type."}, {"oid": "c747120b20be1853ee02e7b2b67871249a88aa6d", "committedDate": "2021-03-31 16:04:06 -0400", "message": "Relicense the Velocity proxy under the terms of GPLv3 (#448)"}, {"oid": "977300cc66af91cdf88bff38f487a8e3207e33d7", "committedDate": "2021-05-23 14:13:51 -0400", "message": "Remove text 3.x API and associated deprecated APIs"}, {"oid": "d97ed956a7be1411b192939abcab8412932230b8", "committedDate": "2022-06-07 21:00:24 -0400", "message": "Update/1.19 (#726)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ3OTQwNA==", "url": "https://github.com/PaperMC/Velocity/pull/310#discussion_r429479404", "body": "`if (`", "bodyText": "if (", "bodyHTML": "<p dir=\"auto\"><code>if (</code></p>", "author": "mikroskeem", "createdAt": "2020-05-22T22:31:45Z", "path": "proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java", "diffHunk": "@@ -69,6 +86,9 @@ public void encode(ByteBuf buf, ProtocolUtils.Direction direction, ProtocolVersi\n     ProtocolUtils.writeString(buf, message);\n     if (direction == ProtocolUtils.Direction.CLIENTBOUND) {\n       buf.writeByte(type);\n+      if(version.compareTo(ProtocolVersion.MINECRAFT_1_16) >= 0) {", "originalCommit": "d37b6a361cb05f69db2608c29c4608dc6881edc7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTUzMjMyOQ==", "url": "https://github.com/VelocityPowered/Velocity/pull/310#discussion_r429532329", "bodyText": "I swear to god IntelliJ", "author": "Xernium", "createdAt": "2020-05-23T09:53:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ3OTQwNA=="}], "type": "inlineReview", "revised_code": {"commit": "fca73bae675d396cb584fc48e2c0548cc6595e58", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java\nindex b80e0f85..61619d0e 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java\n", "chunk": "@@ -87,7 +87,7 @@ public class Chat implements MinecraftPacket {\n     if (direction == ProtocolUtils.Direction.CLIENTBOUND) {\n       buf.writeByte(type);\n       if(version.compareTo(ProtocolVersion.MINECRAFT_1_16) >= 0) {\n-        ProtocolUtils.writeUuid(buf, sender == null ? new UUID(0,0) : sender);\n+        ProtocolUtils.writeUuid(buf, sender == null ? EMPTY_SENDER : sender);\n       }\n     }\n   }\n", "next_change": {"commit": "38487c5bba0d2376312f663c47bbea906c32779e", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java\nindex 61619d0e..7905d7ca 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java\n", "chunk": "@@ -86,7 +86,7 @@ public class Chat implements MinecraftPacket {\n     ProtocolUtils.writeString(buf, message);\n     if (direction == ProtocolUtils.Direction.CLIENTBOUND) {\n       buf.writeByte(type);\n-      if(version.compareTo(ProtocolVersion.MINECRAFT_1_16) >= 0) {\n+      if (version.compareTo(ProtocolVersion.MINECRAFT_1_16) >= 0) {\n         ProtocolUtils.writeUuid(buf, sender == null ? EMPTY_SENDER : sender);\n       }\n     }\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "0dd6fe1ef2783fe1f9322af06c6fd218aa67cdb1", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java\nindex b80e0f85..7905d7ca 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java\n", "chunk": "@@ -86,8 +86,8 @@ public class Chat implements MinecraftPacket {\n     ProtocolUtils.writeString(buf, message);\n     if (direction == ProtocolUtils.Direction.CLIENTBOUND) {\n       buf.writeByte(type);\n-      if(version.compareTo(ProtocolVersion.MINECRAFT_1_16) >= 0) {\n-        ProtocolUtils.writeUuid(buf, sender == null ? new UUID(0,0) : sender);\n+      if (version.compareTo(ProtocolVersion.MINECRAFT_1_16) >= 0) {\n+        ProtocolUtils.writeUuid(buf, sender == null ? EMPTY_SENDER : sender);\n       }\n     }\n   }\n", "next_change": {"commit": "5c314c9068814aca404b68cf8442af7201bdcf43", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java\nindex 7905d7ca..2321b518 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java\n", "chunk": "@@ -84,11 +67,8 @@ public class Chat implements MinecraftPacket {\n       throw new IllegalStateException(\"Message is not specified\");\n     }\n     ProtocolUtils.writeString(buf, message);\n-    if (direction == ProtocolUtils.Direction.CLIENTBOUND) {\n+    if (direction == ProtocolUtils.Direction.CLIENTBOUND && version.compareTo(ProtocolVersion.MINECRAFT_1_8) >= 0) {\n       buf.writeByte(type);\n-      if (version.compareTo(ProtocolVersion.MINECRAFT_1_16) >= 0) {\n-        ProtocolUtils.writeUuid(buf, sender == null ? EMPTY_SENDER : sender);\n-      }\n     }\n   }\n \n", "next_change": {"commit": "cd9bb61f208e3b27da9fbdcb4bf6cafc9135be65", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java\nindex 2321b518..7905d7ca 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java\n", "chunk": "@@ -67,8 +84,11 @@ public class Chat implements MinecraftPacket {\n       throw new IllegalStateException(\"Message is not specified\");\n     }\n     ProtocolUtils.writeString(buf, message);\n-    if (direction == ProtocolUtils.Direction.CLIENTBOUND && version.compareTo(ProtocolVersion.MINECRAFT_1_8) >= 0) {\n+    if (direction == ProtocolUtils.Direction.CLIENTBOUND) {\n       buf.writeByte(type);\n+      if (version.compareTo(ProtocolVersion.MINECRAFT_1_16) >= 0) {\n+        ProtocolUtils.writeUuid(buf, sender == null ? EMPTY_SENDER : sender);\n+      }\n     }\n   }\n \n", "next_change": {"commit": "ada35ff28698c9cccea50236eda6ec4c291ca13a", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java\nindex 7905d7ca..028f1cca 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java\n", "chunk": "@@ -84,7 +84,7 @@ public class Chat implements MinecraftPacket {\n       throw new IllegalStateException(\"Message is not specified\");\n     }\n     ProtocolUtils.writeString(buf, message);\n-    if (direction == ProtocolUtils.Direction.CLIENTBOUND) {\n+    if (direction == ProtocolUtils.Direction.CLIENTBOUND && version.compareTo(ProtocolVersion.MINECRAFT_1_8) >= 0) {\n       buf.writeByte(type);\n       if (version.compareTo(ProtocolVersion.MINECRAFT_1_16) >= 0) {\n         ProtocolUtils.writeUuid(buf, sender == null ? EMPTY_SENDER : sender);\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "0dd6fe1ef2783fe1f9322af06c6fd218aa67cdb1", "message": "Merge commit", "committedDate": null}, {"oid": "5c314c9068814aca404b68cf8442af7201bdcf43", "committedDate": "2019-07-01 08:56:22 +0200", "message": "Add 1.7 Protocol Support"}, {"oid": "cd9bb61f208e3b27da9fbdcb4bf6cafc9135be65", "committedDate": "2020-06-20 23:11:19 -0400", "message": "Merge branch 'future/1.16' of https://github.com/Xernium/Velocity into Xernium-future/1.16"}, {"oid": "ada35ff28698c9cccea50236eda6ec4c291ca13a", "committedDate": "2020-06-20 23:24:32 -0400", "message": "Merge branch 'Xernium-future/1.16' into future/1.16-velocity-1.1.0"}, {"oid": "2e7a598916c49917979feca7db7dece0c6abd84e", "committedDate": "2020-06-28 21:23:01 -0400", "message": "Initial commit of adventure-adapted Velocity API."}, {"oid": "c2edd82b16660ab75210fb5caabf09d56bd73b28", "committedDate": "2020-06-28 23:13:57 -0400", "message": "Use more idiomatic adventure text serializer"}, {"oid": "26f3cb43c7c8b81d0b10c79dde6c308b34b280fb", "committedDate": "2020-08-16 14:02:04 -0400", "message": "Clean up some Adventure support code, implement another sendMessage overload"}, {"oid": "60e917b4a104d02f9175013e3ce1a42c5daa4ae9", "committedDate": "2020-10-13 22:36:51 -0700", "message": "Player has an identity"}, {"oid": "a6e708c98ee9b872cfc7866c74babe1ea908442d", "committedDate": "2020-10-20 14:26:08 -0400", "message": "Fix Adventure sendActionBar implementation and add proper action bar sending for 1.16.2"}, {"oid": "8995b64dc6a102b03966dfa5baab0e0f06c79bb6", "committedDate": "2020-10-22 03:02:09 -0400", "message": "Do not use the GAME_INFO chat type."}, {"oid": "c747120b20be1853ee02e7b2b67871249a88aa6d", "committedDate": "2021-03-31 16:04:06 -0400", "message": "Relicense the Velocity proxy under the terms of GPLv3 (#448)"}, {"oid": "977300cc66af91cdf88bff38f487a8e3207e33d7", "committedDate": "2021-05-23 14:13:51 -0400", "message": "Remove text 3.x API and associated deprecated APIs"}, {"oid": "d97ed956a7be1411b192939abcab8412932230b8", "committedDate": "2022-06-07 21:00:24 -0400", "message": "Update/1.19 (#726)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ3OTQ5MQ==", "url": "https://github.com/PaperMC/Velocity/pull/310#discussion_r429479491", "body": "`// 1.16+`", "bodyText": "// 1.16+", "bodyHTML": "<p dir=\"auto\"><code>// 1.16+</code></p>", "author": "mikroskeem", "createdAt": "2020-05-22T22:32:15Z", "path": "proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java", "diffHunk": "@@ -19,6 +20,11 @@\n   private int viewDistance; //1.14+\n   private boolean reducedDebugInfo;\n   private boolean showRespawnScreen;\n+  private boolean shouldKeepPlayerData;\n+  private boolean isDebug;\n+  private boolean isFlat;\n+  private String dimensionRegistryName;\n+  private CompoundTag dimensionRegistry;", "originalCommit": "d37b6a361cb05f69db2608c29c4608dc6881edc7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fca73bae675d396cb584fc48e2c0548cc6595e58", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\nindex d036e653..ef531570 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\n", "chunk": "@@ -17,14 +17,14 @@ public class JoinGame implements MinecraftPacket {\n   private short difficulty;\n   private short maxPlayers;\n   private @Nullable String levelType;\n-  private int viewDistance; //1.14+\n+  private int viewDistance; // 1.14+\n   private boolean reducedDebugInfo;\n   private boolean showRespawnScreen;\n-  private boolean shouldKeepPlayerData;\n-  private boolean isDebug;\n-  private boolean isFlat;\n-  private String dimensionRegistryName;\n-  private CompoundTag dimensionRegistry;\n+  private boolean shouldKeepPlayerData; // 1.16+\n+  private boolean isDebug; // 1.16+\n+  private boolean isFlat; // 1.16+\n+  private String dimensionRegistryName; // 1.16+\n+  private CompoundTag dimensionRegistry; // 1.16+\n \n   public int getEntityId() {\n     return entityId;\n", "next_change": {"commit": "18e595397660ea6651bb4c86e1bb3a6addf1dd24", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\nindex ef531570..8ea5cbeb 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\n", "chunk": "@@ -20,11 +25,8 @@ public class JoinGame implements MinecraftPacket {\n   private int viewDistance; // 1.14+\n   private boolean reducedDebugInfo;\n   private boolean showRespawnScreen;\n-  private boolean shouldKeepPlayerData; // 1.16+\n-  private boolean isDebug; // 1.16+\n-  private boolean isFlat; // 1.16+\n-  private String dimensionRegistryName; // 1.16+\n-  private CompoundTag dimensionRegistry; // 1.16+\n+  private DimensionRegistry dimensionRegistry; // 1.16+\n+  private DimensionInfo dimensionInfo; // 1.16+\n \n   public int getEntityId() {\n     return entityId;\n", "next_change": {"commit": "a1ab29186b26145c88f07552f6a1ad81bdd2cc22", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\nindex 8ea5cbeb..630a60de 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\n", "chunk": "@@ -27,6 +24,7 @@ public class JoinGame implements MinecraftPacket {\n   private boolean showRespawnScreen;\n   private DimensionRegistry dimensionRegistry; // 1.16+\n   private DimensionInfo dimensionInfo; // 1.16+\n+  private short previousGamemode; // 1.16+\n \n   public int getEntityId() {\n     return entityId;\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "0dd6fe1ef2783fe1f9322af06c6fd218aa67cdb1", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\nindex d036e653..630a60de 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\n", "chunk": "@@ -17,14 +19,12 @@ public class JoinGame implements MinecraftPacket {\n   private short difficulty;\n   private short maxPlayers;\n   private @Nullable String levelType;\n-  private int viewDistance; //1.14+\n+  private int viewDistance; // 1.14+\n   private boolean reducedDebugInfo;\n   private boolean showRespawnScreen;\n-  private boolean shouldKeepPlayerData;\n-  private boolean isDebug;\n-  private boolean isFlat;\n-  private String dimensionRegistryName;\n-  private CompoundTag dimensionRegistry;\n+  private DimensionRegistry dimensionRegistry; // 1.16+\n+  private DimensionInfo dimensionInfo; // 1.16+\n+  private short previousGamemode; // 1.16+\n \n   public int getEntityId() {\n     return entityId;\n", "next_change": {"commit": "d79c1d0407b11a39f2b93655e7600777e51e9d98", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\nindex 630a60de..2c0b63c9 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\n", "chunk": "@@ -25,6 +29,7 @@ public class JoinGame implements MinecraftPacket {\n   private DimensionRegistry dimensionRegistry; // 1.16+\n   private DimensionInfo dimensionInfo; // 1.16+\n   private short previousGamemode; // 1.16+\n+  private CompoundTag biomeRegistry; // 1.16.2+\n \n   public int getEntityId() {\n     return entityId;\n", "next_change": {"commit": "b34b198064780481f669f53960180d39de0254e2", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\nindex 2c0b63c9..845845c4 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\n", "chunk": "@@ -28,6 +28,7 @@ public class JoinGame implements MinecraftPacket {\n   private boolean showRespawnScreen;\n   private DimensionRegistry dimensionRegistry; // 1.16+\n   private DimensionInfo dimensionInfo; // 1.16+\n+  private DimensionData currentDimensionData; // 1.16.2+\n   private short previousGamemode; // 1.16+\n   private CompoundTag biomeRegistry; // 1.16.2+\n \n", "next_change": {"commit": "cab6919a46516026c731e56654bdc6f527bb2540", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\nindex 845845c4..bd4001cf 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\n", "chunk": "@@ -30,7 +30,7 @@ public class JoinGame implements MinecraftPacket {\n   private DimensionInfo dimensionInfo; // 1.16+\n   private DimensionData currentDimensionData; // 1.16.2+\n   private short previousGamemode; // 1.16+\n-  private CompoundTag biomeRegistry; // 1.16.2+\n+  private CompoundBinaryTag biomeRegistry; // 1.16.2+\n \n   public int getEntityId() {\n     return entityId;\n", "next_change": {"commit": "4ba4054f23cfea3d4de51c042fbf8214d7275df6", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\nindex bd4001cf..74e2956c 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\n", "chunk": "@@ -31,6 +50,7 @@ public class JoinGame implements MinecraftPacket {\n   private DimensionData currentDimensionData; // 1.16.2+\n   private short previousGamemode; // 1.16+\n   private CompoundBinaryTag biomeRegistry; // 1.16.2+\n+  private int simulationDistance; // 1.18+\n \n   public int getEntityId() {\n     return entityId;\n", "next_change": {"commit": "d97ed956a7be1411b192939abcab8412932230b8", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\nindex 74e2956c..da86363b 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\n", "chunk": "@@ -51,6 +52,8 @@ public class JoinGame implements MinecraftPacket {\n   private short previousGamemode; // 1.16+\n   private CompoundBinaryTag biomeRegistry; // 1.16.2+\n   private int simulationDistance; // 1.18+\n+  private @Nullable Pair<String, Long> lastDeathPosition;\n+  private CompoundBinaryTag chatTypeRegistry; // placeholder, 1.19+\n \n   public int getEntityId() {\n     return entityId;\n", "next_change": {"commit": "022ae0fc002800b42f6b870e62cf52d5a7cb5341", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\nindex da86363b..85a61ef4 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\n", "chunk": "@@ -54,6 +54,7 @@ public class JoinGame implements MinecraftPacket {\n   private int simulationDistance; // 1.18+\n   private @Nullable Pair<String, Long> lastDeathPosition;\n   private CompoundBinaryTag chatTypeRegistry; // placeholder, 1.19+\n+  private @Nullable CompoundBinaryTag originalRegistryContainerTag;\n \n   public int getEntityId() {\n     return entityId;\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "0dd6fe1ef2783fe1f9322af06c6fd218aa67cdb1", "message": "Merge commit", "committedDate": null}, {"oid": "cd9bb61f208e3b27da9fbdcb4bf6cafc9135be65", "committedDate": "2020-06-20 23:11:19 -0400", "message": "Merge branch 'future/1.16' of https://github.com/Xernium/Velocity into Xernium-future/1.16"}, {"oid": "ae6afc8b18919c8f1051ef8618203a0d09512f60", "committedDate": "2020-06-23 13:17:36 -0400", "message": "Fix Minecraft 1.7 support (bad merge)"}, {"oid": "d79c1d0407b11a39f2b93655e7600777e51e9d98", "committedDate": "2020-08-05 18:13:16 -0400", "message": "Port of #325 for Velocity 1.1.0"}, {"oid": "b34b198064780481f669f53960180d39de0254e2", "committedDate": "2020-08-06 15:08:50 -0400", "message": "1.16.2-pre3"}, {"oid": "cab6919a46516026c731e56654bdc6f527bb2540", "committedDate": "2020-08-06 17:38:52 -0400", "message": "Switch to adventure-nbt and fix server switching on 1.16.2-pre3"}, {"oid": "717f2a070dd215902424804581df77288f999466", "committedDate": "2020-08-11 13:24:11 -0400", "message": "Remove any use of the word \"dummy\""}, {"oid": "5d287306c2458ccaad40621e3d7418215b764c62", "committedDate": "2020-09-01 03:25:15 -0400", "message": "Small code cleanups"}, {"oid": "03e9fa79d6bbf19ca7446c234d78bb4c400d1854", "committedDate": "2021-01-23 12:55:28 -0500", "message": "Raise limit on JoinGame NBT reading to 2MiB."}, {"oid": "c747120b20be1853ee02e7b2b67871249a88aa6d", "committedDate": "2021-03-31 16:04:06 -0400", "message": "Relicense the Velocity proxy under the terms of GPLv3 (#448)"}, {"oid": "e6a93ad0c6f15c91e5be0bec6916d94fcf663d06", "committedDate": "2021-08-21 02:17:34 -0400", "message": "Clean up JoinGame packet encoding/decoding"}, {"oid": "4ba4054f23cfea3d4de51c042fbf8214d7275df6", "committedDate": "2021-10-09 00:08:51 +0200", "message": "Snapshot 21w40a"}, {"oid": "d97ed956a7be1411b192939abcab8412932230b8", "committedDate": "2022-06-07 21:00:24 -0400", "message": "Update/1.19 (#726)"}, {"oid": "c45597c8850918e9d1c3d58da19833e9d6d9b209", "committedDate": "2022-06-07 23:23:50 -0400", "message": "Hotfix registry and argument ser/de (#729)"}, {"oid": "d72d707b1c0dd6215a4984956faf4b2ec4bdbd97", "committedDate": "2023-01-01 17:53:37 -0500", "message": "Convert Velocity buildscripts to Kotlin DSL (#918)"}, {"oid": "b0862d2d16c4ba7560d3f24c824d78793ac3d9e0", "committedDate": "2023-01-01 18:46:33 -0500", "message": "Use Spotless for license formatting"}, {"oid": "022ae0fc002800b42f6b870e62cf52d5a7cb5341", "committedDate": "2023-01-08 13:18:14 -0500", "message": "Instead of re-encoding the client-server registry, pass through the original"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ3OTY5Ng==", "url": "https://github.com/PaperMC/Velocity/pull/310#discussion_r429479696", "body": "Move this to `else if` instead of nesting into `else` block", "bodyText": "Move this to else if instead of nesting into else block", "bodyHTML": "<p dir=\"auto\">Move this to <code>else if</code> instead of nesting into <code>else</code> block</p>", "author": "mikroskeem", "createdAt": "2020-05-22T22:33:16Z", "path": "proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java", "diffHunk": "@@ -110,10 +156,15 @@ public String toString() {\n   public void decode(ByteBuf buf, ProtocolUtils.Direction direction, ProtocolVersion version) {\n     this.entityId = buf.readInt();\n     this.gamemode = buf.readUnsignedByte();\n-    if (version.compareTo(ProtocolVersion.MINECRAFT_1_9_1) >= 0) {\n-      this.dimension = buf.readInt();\n+    if (version.compareTo(ProtocolVersion.MINECRAFT_1_16) >= 0) {\n+      this.dimensionRegistry = ProtocolUtils.readCompoundTag(buf);\n+      this.dimensionRegistryName = ProtocolUtils.readString(buf);\n     } else {\n-      this.dimension = buf.readByte();\n+      if (version.compareTo(ProtocolVersion.MINECRAFT_1_9_1) >= 0) {", "originalCommit": "d37b6a361cb05f69db2608c29c4608dc6881edc7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fca73bae675d396cb584fc48e2c0548cc6595e58", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\nindex d036e653..ef531570 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\n", "chunk": "@@ -159,12 +163,10 @@ public class JoinGame implements MinecraftPacket {\n     if (version.compareTo(ProtocolVersion.MINECRAFT_1_16) >= 0) {\n       this.dimensionRegistry = ProtocolUtils.readCompoundTag(buf);\n       this.dimensionRegistryName = ProtocolUtils.readString(buf);\n+    } else if (version.compareTo(ProtocolVersion.MINECRAFT_1_9_1) >= 0) {\n+      this.dimension = buf.readInt();\n     } else {\n-      if (version.compareTo(ProtocolVersion.MINECRAFT_1_9_1) >= 0) {\n-        this.dimension = buf.readInt();\n-      } else {\n-        this.dimension = buf.readByte();\n-      }\n+      this.dimension = buf.readByte();\n     }\n     if (version.compareTo(ProtocolVersion.MINECRAFT_1_13_2) <= 0) {\n       this.difficulty = buf.readUnsignedByte();\n", "next_change": {"commit": "18e595397660ea6651bb4c86e1bb3a6addf1dd24", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\nindex ef531570..8ea5cbeb 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\n", "chunk": "@@ -160,9 +136,14 @@ public class JoinGame implements MinecraftPacket {\n   public void decode(ByteBuf buf, ProtocolUtils.Direction direction, ProtocolVersion version) {\n     this.entityId = buf.readInt();\n     this.gamemode = buf.readUnsignedByte();\n+    String dimensionIdentifier = null;\n+    String levelName = null;\n     if (version.compareTo(ProtocolVersion.MINECRAFT_1_16) >= 0) {\n-      this.dimensionRegistry = ProtocolUtils.readCompoundTag(buf);\n-      this.dimensionRegistryName = ProtocolUtils.readString(buf);\n+      String levelNames[] = ProtocolUtils.readStringArray(buf);\n+      Map<String, String> dimensionMapping = DimensionRegistry.parseToMapping(ProtocolUtils.readCompoundTag(buf));\n+      this.dimensionRegistry = new DimensionRegistry(dimensionMapping, Set.of(levelNames));\n+      dimensionIdentifier = ProtocolUtils.readString(buf);\n+      levelName = ProtocolUtils.readString(buf);\n     } else if (version.compareTo(ProtocolVersion.MINECRAFT_1_9_1) >= 0) {\n       this.dimension = buf.readInt();\n     } else {\n", "next_change": {"commit": "368d50b4555a87f0fb5ca734947f098e86ccac96", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\nindex 8ea5cbeb..64104ebf 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\n", "chunk": "@@ -140,8 +136,7 @@ public class JoinGame implements MinecraftPacket {\n     String levelName = null;\n     if (version.compareTo(ProtocolVersion.MINECRAFT_1_16) >= 0) {\n       String levelNames[] = ProtocolUtils.readStringArray(buf);\n-      Map<String, String> dimensionMapping = DimensionRegistry.parseToMapping(ProtocolUtils.readCompoundTag(buf));\n-      this.dimensionRegistry = new DimensionRegistry(dimensionMapping, Set.of(levelNames));\n+      this.dimensionRegistry = DimensionRegistry.fromGameData(ProtocolUtils.readCompoundTag(buf), levelNames);\n       dimensionIdentifier = ProtocolUtils.readString(buf);\n       levelName = ProtocolUtils.readString(buf);\n     } else if (version.compareTo(ProtocolVersion.MINECRAFT_1_9_1) >= 0) {\n", "next_change": {"commit": "ef5b9cf183da0eda038374f01dc342bbea5d2d40", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\nindex 64104ebf..d000320a 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\n", "chunk": "@@ -135,8 +136,9 @@ public class JoinGame implements MinecraftPacket {\n     String dimensionIdentifier = null;\n     String levelName = null;\n     if (version.compareTo(ProtocolVersion.MINECRAFT_1_16) >= 0) {\n-      String levelNames[] = ProtocolUtils.readStringArray(buf);\n-      this.dimensionRegistry = DimensionRegistry.fromGameData(ProtocolUtils.readCompoundTag(buf), levelNames);\n+      ImmutableSet<String> levelNames = ImmutableSet.copyOf(ProtocolUtils.readStringArray(buf));\n+      ImmutableSet<DimensionData> readData = DimensionRegistry.fromGameData(ProtocolUtils.readCompoundTag(buf));\n+      this.dimensionRegistry = new DimensionRegistry(readData, levelNames);\n       dimensionIdentifier = ProtocolUtils.readString(buf);\n       levelName = ProtocolUtils.readString(buf);\n     } else if (version.compareTo(ProtocolVersion.MINECRAFT_1_9_1) >= 0) {\n", "next_change": {"commit": "a1ab29186b26145c88f07552f6a1ad81bdd2cc22", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\nindex d000320a..630a60de 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\n", "chunk": "@@ -126,16 +132,18 @@ public class JoinGame implements MinecraftPacket {\n         + \", reducedDebugInfo=\" + reducedDebugInfo\n         + \", dimensionRegistry='\" + dimensionRegistry.toString() + '\\''\n         + \", dimensionInfo='\" + dimensionInfo.toString() + '\\''\n+        + \", previousGamemode=\" + previousGamemode\n         + '}';\n   }\n \n   @Override\n   public void decode(ByteBuf buf, ProtocolUtils.Direction direction, ProtocolVersion version) {\n     this.entityId = buf.readInt();\n-    this.gamemode = buf.readUnsignedByte();\n+    this.gamemode = buf.readByte();\n     String dimensionIdentifier = null;\n     String levelName = null;\n     if (version.compareTo(ProtocolVersion.MINECRAFT_1_16) >= 0) {\n+      this.previousGamemode = buf.readByte();\n       ImmutableSet<String> levelNames = ImmutableSet.copyOf(ProtocolUtils.readStringArray(buf));\n       ImmutableSet<DimensionData> readData = DimensionRegistry.fromGameData(ProtocolUtils.readCompoundTag(buf));\n       this.dimensionRegistry = new DimensionRegistry(readData, levelNames);\n", "next_change": null}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "0dd6fe1ef2783fe1f9322af06c6fd218aa67cdb1", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\nindex d036e653..630a60de 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\n", "chunk": "@@ -149,22 +130,29 @@ public class JoinGame implements MinecraftPacket {\n         + \", levelType='\" + levelType + '\\''\n         + \", viewDistance=\" + viewDistance\n         + \", reducedDebugInfo=\" + reducedDebugInfo\n+        + \", dimensionRegistry='\" + dimensionRegistry.toString() + '\\''\n+        + \", dimensionInfo='\" + dimensionInfo.toString() + '\\''\n+        + \", previousGamemode=\" + previousGamemode\n         + '}';\n   }\n \n   @Override\n   public void decode(ByteBuf buf, ProtocolUtils.Direction direction, ProtocolVersion version) {\n     this.entityId = buf.readInt();\n-    this.gamemode = buf.readUnsignedByte();\n+    this.gamemode = buf.readByte();\n+    String dimensionIdentifier = null;\n+    String levelName = null;\n     if (version.compareTo(ProtocolVersion.MINECRAFT_1_16) >= 0) {\n-      this.dimensionRegistry = ProtocolUtils.readCompoundTag(buf);\n-      this.dimensionRegistryName = ProtocolUtils.readString(buf);\n+      this.previousGamemode = buf.readByte();\n+      ImmutableSet<String> levelNames = ImmutableSet.copyOf(ProtocolUtils.readStringArray(buf));\n+      ImmutableSet<DimensionData> readData = DimensionRegistry.fromGameData(ProtocolUtils.readCompoundTag(buf));\n+      this.dimensionRegistry = new DimensionRegistry(readData, levelNames);\n+      dimensionIdentifier = ProtocolUtils.readString(buf);\n+      levelName = ProtocolUtils.readString(buf);\n+    } else if (version.compareTo(ProtocolVersion.MINECRAFT_1_9_1) >= 0) {\n+      this.dimension = buf.readInt();\n     } else {\n-      if (version.compareTo(ProtocolVersion.MINECRAFT_1_9_1) >= 0) {\n-        this.dimension = buf.readInt();\n-      } else {\n-        this.dimension = buf.readByte();\n-      }\n+      this.dimension = buf.readByte();\n     }\n     if (version.compareTo(ProtocolVersion.MINECRAFT_1_13_2) <= 0) {\n       this.difficulty = buf.readUnsignedByte();\n", "next_change": {"commit": "d79c1d0407b11a39f2b93655e7600777e51e9d98", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\nindex 630a60de..2c0b63c9 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\n", "chunk": "@@ -160,14 +199,20 @@ public class JoinGame implements MinecraftPacket {\n     if (version.compareTo(ProtocolVersion.MINECRAFT_1_15) >= 0) {\n       this.partialHashedSeed = buf.readLong();\n     }\n-    this.maxPlayers = buf.readUnsignedByte();\n+    if (version.compareTo(ProtocolVersion.MINECRAFT_1_16_2) >= 0) {\n+      this.maxPlayers = ProtocolUtils.readVarInt(buf);\n+    } else {\n+      this.maxPlayers = buf.readUnsignedByte();\n+    }\n     if (version.compareTo(ProtocolVersion.MINECRAFT_1_16) < 0) {\n       this.levelType = ProtocolUtils.readString(buf, 16);\n     }\n     if (version.compareTo(ProtocolVersion.MINECRAFT_1_14) >= 0) {\n       this.viewDistance = ProtocolUtils.readVarInt(buf);\n     }\n-    this.reducedDebugInfo = buf.readBoolean();\n+    if (version.compareTo(ProtocolVersion.MINECRAFT_1_8) >= 0) {\n+      this.reducedDebugInfo = buf.readBoolean();\n+    }\n     if (version.compareTo(ProtocolVersion.MINECRAFT_1_15) >= 0) {\n       this.showRespawnScreen = buf.readBoolean();\n     }\n", "next_change": {"commit": "e6a93ad0c6f15c91e5be0bec6916d94fcf663d06", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\nindex 2c0b63c9..26a293a1 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\n", "chunk": "@@ -216,15 +220,76 @@ public class JoinGame implements MinecraftPacket {\n     if (version.compareTo(ProtocolVersion.MINECRAFT_1_15) >= 0) {\n       this.showRespawnScreen = buf.readBoolean();\n     }\n-    if (version.compareTo(ProtocolVersion.MINECRAFT_1_16) >= 0) {\n-      boolean isDebug = buf.readBoolean();\n-      boolean isFlat = buf.readBoolean();\n-      this.dimensionInfo = new DimensionInfo(dimensionIdentifier, levelName, isFlat, isDebug);\n+  }\n+\n+  private void decode116Up(ByteBuf buf, ProtocolVersion version) {\n+    this.entityId = buf.readInt();\n+    if (version.compareTo(ProtocolVersion.MINECRAFT_1_16_2) >= 0) {\n+      this.isHardcore = buf.readBoolean();\n+      this.gamemode = buf.readByte();\n+    } else {\n+      this.gamemode = buf.readByte();\n+      this.isHardcore = (this.gamemode & 0x08) != 0;\n+      this.gamemode &= ~0x08;\n+    }\n+\n+    this.previousGamemode = buf.readByte();\n+\n+    ImmutableSet<String> levelNames = ImmutableSet.copyOf(ProtocolUtils.readStringArray(buf));\n+\n+    CompoundBinaryTag registryContainer = ProtocolUtils.readCompoundTag(buf, JOINGAME_READER);\n+    ListBinaryTag dimensionRegistryContainer;\n+    if (version.compareTo(ProtocolVersion.MINECRAFT_1_16_2) >= 0) {\n+      dimensionRegistryContainer = registryContainer.getCompound(\"minecraft:dimension_type\")\n+          .getList(\"value\", BinaryTagTypes.COMPOUND);\n+      this.biomeRegistry = registryContainer.getCompound(\"minecraft:worldgen/biome\");\n+    } else {\n+      dimensionRegistryContainer = registryContainer.getList(\"dimension\",\n+          BinaryTagTypes.COMPOUND);\n+    }\n+    ImmutableSet<DimensionData> readData =\n+        DimensionRegistry.fromGameData(dimensionRegistryContainer, version);\n+    this.dimensionRegistry = new DimensionRegistry(readData, levelNames);\n+\n+    String dimensionIdentifier;\n+    String levelName = null;\n+    if (version.compareTo(ProtocolVersion.MINECRAFT_1_16_2) >= 0) {\n+      CompoundBinaryTag currentDimDataTag = ProtocolUtils.readCompoundTag(buf, JOINGAME_READER);\n+      dimensionIdentifier = ProtocolUtils.readString(buf);\n+      this.currentDimensionData = DimensionData.decodeBaseCompoundTag(currentDimDataTag, version)\n+          .annotateWith(dimensionIdentifier, null);\n+    } else {\n+      dimensionIdentifier = ProtocolUtils.readString(buf);\n+      levelName = ProtocolUtils.readString(buf);\n+    }\n+\n+    this.partialHashedSeed = buf.readLong();\n+    if (version.compareTo(ProtocolVersion.MINECRAFT_1_16_2) >= 0) {\n+      this.maxPlayers = ProtocolUtils.readVarInt(buf);\n+    } else {\n+      this.maxPlayers = buf.readUnsignedByte();\n     }\n+\n+    this.viewDistance = ProtocolUtils.readVarInt(buf);\n+    this.reducedDebugInfo = buf.readBoolean();\n+    this.showRespawnScreen = buf.readBoolean();\n+    boolean isDebug = buf.readBoolean();\n+    boolean isFlat = buf.readBoolean();\n+    this.dimensionInfo = new DimensionInfo(dimensionIdentifier, levelName, isFlat, isDebug);\n   }\n \n   @Override\n   public void encode(ByteBuf buf, ProtocolUtils.Direction direction, ProtocolVersion version) {\n+    if (version.compareTo(ProtocolVersion.MINECRAFT_1_16) >= 0) {\n+      // Minecraft 1.16 and above have significantly more complicated logic for reading this packet,\n+      // so separate it out.\n+      this.encode116Up(buf, version);\n+    } else {\n+      this.encodeLegacy(buf, version);\n+    }\n+  }\n+\n+  private void encodeLegacy(ByteBuf buf, ProtocolVersion version) {\n     buf.writeInt(entityId);\n     if (version.compareTo(ProtocolVersion.MINECRAFT_1_16_2) >= 0) {\n       buf.writeBoolean(isHardcore);\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "0dd6fe1ef2783fe1f9322af06c6fd218aa67cdb1", "message": "Merge commit", "committedDate": null}, {"oid": "cd9bb61f208e3b27da9fbdcb4bf6cafc9135be65", "committedDate": "2020-06-20 23:11:19 -0400", "message": "Merge branch 'future/1.16' of https://github.com/Xernium/Velocity into Xernium-future/1.16"}, {"oid": "ae6afc8b18919c8f1051ef8618203a0d09512f60", "committedDate": "2020-06-23 13:17:36 -0400", "message": "Fix Minecraft 1.7 support (bad merge)"}, {"oid": "d79c1d0407b11a39f2b93655e7600777e51e9d98", "committedDate": "2020-08-05 18:13:16 -0400", "message": "Port of #325 for Velocity 1.1.0"}, {"oid": "b34b198064780481f669f53960180d39de0254e2", "committedDate": "2020-08-06 15:08:50 -0400", "message": "1.16.2-pre3"}, {"oid": "cab6919a46516026c731e56654bdc6f527bb2540", "committedDate": "2020-08-06 17:38:52 -0400", "message": "Switch to adventure-nbt and fix server switching on 1.16.2-pre3"}, {"oid": "717f2a070dd215902424804581df77288f999466", "committedDate": "2020-08-11 13:24:11 -0400", "message": "Remove any use of the word \"dummy\""}, {"oid": "5d287306c2458ccaad40621e3d7418215b764c62", "committedDate": "2020-09-01 03:25:15 -0400", "message": "Small code cleanups"}, {"oid": "03e9fa79d6bbf19ca7446c234d78bb4c400d1854", "committedDate": "2021-01-23 12:55:28 -0500", "message": "Raise limit on JoinGame NBT reading to 2MiB."}, {"oid": "c747120b20be1853ee02e7b2b67871249a88aa6d", "committedDate": "2021-03-31 16:04:06 -0400", "message": "Relicense the Velocity proxy under the terms of GPLv3 (#448)"}, {"oid": "e6a93ad0c6f15c91e5be0bec6916d94fcf663d06", "committedDate": "2021-08-21 02:17:34 -0400", "message": "Clean up JoinGame packet encoding/decoding"}, {"oid": "4ba4054f23cfea3d4de51c042fbf8214d7275df6", "committedDate": "2021-10-09 00:08:51 +0200", "message": "Snapshot 21w40a"}, {"oid": "d97ed956a7be1411b192939abcab8412932230b8", "committedDate": "2022-06-07 21:00:24 -0400", "message": "Update/1.19 (#726)"}, {"oid": "c45597c8850918e9d1c3d58da19833e9d6d9b209", "committedDate": "2022-06-07 23:23:50 -0400", "message": "Hotfix registry and argument ser/de (#729)"}, {"oid": "d72d707b1c0dd6215a4984956faf4b2ec4bdbd97", "committedDate": "2023-01-01 17:53:37 -0500", "message": "Convert Velocity buildscripts to Kotlin DSL (#918)"}, {"oid": "b0862d2d16c4ba7560d3f24c824d78793ac3d9e0", "committedDate": "2023-01-01 18:46:33 -0500", "message": "Use Spotless for license formatting"}, {"oid": "022ae0fc002800b42f6b870e62cf52d5a7cb5341", "committedDate": "2023-01-08 13:18:14 -0500", "message": "Instead of re-encoding the client-server registry, pass through the original"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ3OTc2Mg==", "url": "https://github.com/PaperMC/Velocity/pull/310#discussion_r429479762", "body": "Move this to `else if` instead of nesting into `else` block", "bodyText": "Move this to else if instead of nesting into else block", "bodyHTML": "<p dir=\"auto\">Move this to <code>else if</code> instead of nesting into <code>else</code> block</p>", "author": "mikroskeem", "createdAt": "2020-05-22T22:33:35Z", "path": "proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java", "diffHunk": "@@ -122,24 +173,37 @@ public void decode(ByteBuf buf, ProtocolUtils.Direction direction, ProtocolVersi\n       this.partialHashedSeed = buf.readLong();\n     }\n     this.maxPlayers = buf.readUnsignedByte();\n-    this.levelType = ProtocolUtils.readString(buf, 16);\n+    if (version.compareTo(ProtocolVersion.MINECRAFT_1_16) < 0) {\n+      this.levelType = ProtocolUtils.readString(buf, 16);\n+    } else {\n+      this.levelType = \"default\"; // I didn't have the courage to rework this yet.\n+    }\n     if (version.compareTo(ProtocolVersion.MINECRAFT_1_14) >= 0) {\n       this.viewDistance = ProtocolUtils.readVarInt(buf);\n     }\n     this.reducedDebugInfo = buf.readBoolean();\n     if (version.compareTo(ProtocolVersion.MINECRAFT_1_15) >= 0) {\n       this.showRespawnScreen = buf.readBoolean();\n     }\n+    if (version.compareTo(ProtocolVersion.MINECRAFT_1_16) >= 0) {\n+      isDebug = buf.readBoolean();\n+      isFlat = buf.readBoolean();\n+    }\n   }\n \n   @Override\n   public void encode(ByteBuf buf, ProtocolUtils.Direction direction, ProtocolVersion version) {\n     buf.writeInt(entityId);\n     buf.writeByte(gamemode);\n-    if (version.compareTo(ProtocolVersion.MINECRAFT_1_9_1) >= 0) {\n-      buf.writeInt(dimension);\n+    if (version.compareTo(ProtocolVersion.MINECRAFT_1_16) >= 0) {\n+      ProtocolUtils.writeCompoundTag(buf, dimensionRegistry);\n+      ProtocolUtils.writeString(buf, dimensionRegistryName);\n     } else {\n-      buf.writeByte(dimension);\n+      if (version.compareTo(ProtocolVersion.MINECRAFT_1_9_1) >= 0) {", "originalCommit": "d37b6a361cb05f69db2608c29c4608dc6881edc7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fca73bae675d396cb584fc48e2c0548cc6595e58", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\nindex d036e653..ef531570 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\n", "chunk": "@@ -198,12 +200,10 @@ public class JoinGame implements MinecraftPacket {\n     if (version.compareTo(ProtocolVersion.MINECRAFT_1_16) >= 0) {\n       ProtocolUtils.writeCompoundTag(buf, dimensionRegistry);\n       ProtocolUtils.writeString(buf, dimensionRegistryName);\n+    } else if (version.compareTo(ProtocolVersion.MINECRAFT_1_9_1) >= 0) {\n+      buf.writeInt(dimension);\n     } else {\n-      if (version.compareTo(ProtocolVersion.MINECRAFT_1_9_1) >= 0) {\n-        buf.writeInt(dimension);\n-      } else {\n-        buf.writeByte(dimension);\n-      }\n+      buf.writeByte(dimension);\n     }\n     if (version.compareTo(ProtocolVersion.MINECRAFT_1_13_2) <= 0) {\n       buf.writeByte(difficulty);\n", "next_change": {"commit": "18e595397660ea6651bb4c86e1bb3a6addf1dd24", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\nindex ef531570..8ea5cbeb 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\n", "chunk": "@@ -198,8 +180,10 @@ public class JoinGame implements MinecraftPacket {\n     buf.writeInt(entityId);\n     buf.writeByte(gamemode);\n     if (version.compareTo(ProtocolVersion.MINECRAFT_1_16) >= 0) {\n-      ProtocolUtils.writeCompoundTag(buf, dimensionRegistry);\n-      ProtocolUtils.writeString(buf, dimensionRegistryName);\n+      ProtocolUtils.writeStringArray(buf, dimensionRegistry.getWorldNames().toArray(new String[dimensionRegistry.getWorldNames().size()]));\n+      ProtocolUtils.writeCompoundTag(buf, dimensionRegistry.encodeToCompoundTag());\n+      ProtocolUtils.writeString(buf, dimensionInfo.getDimensionIdentifier());\n+      ProtocolUtils.writeString(buf, dimensionInfo.getDimensionLevelName());\n     } else if (version.compareTo(ProtocolVersion.MINECRAFT_1_9_1) >= 0) {\n       buf.writeInt(dimension);\n     } else {\n", "next_change": {"commit": "368d50b4555a87f0fb5ca734947f098e86ccac96", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\nindex 8ea5cbeb..64104ebf 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\n", "chunk": "@@ -180,10 +175,10 @@ public class JoinGame implements MinecraftPacket {\n     buf.writeInt(entityId);\n     buf.writeByte(gamemode);\n     if (version.compareTo(ProtocolVersion.MINECRAFT_1_16) >= 0) {\n-      ProtocolUtils.writeStringArray(buf, dimensionRegistry.getWorldNames().toArray(new String[dimensionRegistry.getWorldNames().size()]));\n-      ProtocolUtils.writeCompoundTag(buf, dimensionRegistry.encodeToCompoundTag());\n+      ProtocolUtils.writeStringArray(buf, dimensionRegistry.getLevelNames());\n+      ProtocolUtils.writeCompoundTag(buf, dimensionRegistry.encodeRegistry());\n       ProtocolUtils.writeString(buf, dimensionInfo.getDimensionIdentifier());\n-      ProtocolUtils.writeString(buf, dimensionInfo.getDimensionLevelName());\n+      ProtocolUtils.writeString(buf, dimensionInfo.getLevelName());\n     } else if (version.compareTo(ProtocolVersion.MINECRAFT_1_9_1) >= 0) {\n       buf.writeInt(dimension);\n     } else {\n", "next_change": {"commit": "aa4a8de2fd474325927be5e221534a4f98a7a046", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\nindex 64104ebf..56e1d800 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\n", "chunk": "@@ -177,7 +174,7 @@ public class JoinGame implements MinecraftPacket {\n     if (version.compareTo(ProtocolVersion.MINECRAFT_1_16) >= 0) {\n       ProtocolUtils.writeStringArray(buf, dimensionRegistry.getLevelNames());\n       ProtocolUtils.writeCompoundTag(buf, dimensionRegistry.encodeRegistry());\n-      ProtocolUtils.writeString(buf, dimensionInfo.getDimensionIdentifier());\n+      ProtocolUtils.writeString(buf, dimensionInfo.getRegistryIdentifier());\n       ProtocolUtils.writeString(buf, dimensionInfo.getLevelName());\n     } else if (version.compareTo(ProtocolVersion.MINECRAFT_1_9_1) >= 0) {\n       buf.writeInt(dimension);\n", "next_change": {"commit": "ef5b9cf183da0eda038374f01dc342bbea5d2d40", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\nindex 56e1d800..d000320a 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\n", "chunk": "@@ -172,7 +177,8 @@ public class JoinGame implements MinecraftPacket {\n     buf.writeInt(entityId);\n     buf.writeByte(gamemode);\n     if (version.compareTo(ProtocolVersion.MINECRAFT_1_16) >= 0) {\n-      ProtocolUtils.writeStringArray(buf, dimensionRegistry.getLevelNames());\n+      ProtocolUtils.writeStringArray(buf, dimensionRegistry.getLevelNames().toArray(\n+              new String[dimensionRegistry.getLevelNames().size()]));\n       ProtocolUtils.writeCompoundTag(buf, dimensionRegistry.encodeRegistry());\n       ProtocolUtils.writeString(buf, dimensionInfo.getRegistryIdentifier());\n       ProtocolUtils.writeString(buf, dimensionInfo.getLevelName());\n", "next_change": {"commit": "a1ab29186b26145c88f07552f6a1ad81bdd2cc22", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\nindex d000320a..630a60de 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\n", "chunk": "@@ -177,6 +183,7 @@ public class JoinGame implements MinecraftPacket {\n     buf.writeInt(entityId);\n     buf.writeByte(gamemode);\n     if (version.compareTo(ProtocolVersion.MINECRAFT_1_16) >= 0) {\n+      buf.writeByte(previousGamemode);\n       ProtocolUtils.writeStringArray(buf, dimensionRegistry.getLevelNames().toArray(\n               new String[dimensionRegistry.getLevelNames().size()]));\n       ProtocolUtils.writeCompoundTag(buf, dimensionRegistry.encodeRegistry());\n", "next_change": null}]}}]}}]}}]}}]}}]}, "revised_code_in_main": {"commit": "0dd6fe1ef2783fe1f9322af06c6fd218aa67cdb1", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\nindex d036e653..630a60de 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\n", "chunk": "@@ -196,14 +183,16 @@ public class JoinGame implements MinecraftPacket {\n     buf.writeInt(entityId);\n     buf.writeByte(gamemode);\n     if (version.compareTo(ProtocolVersion.MINECRAFT_1_16) >= 0) {\n-      ProtocolUtils.writeCompoundTag(buf, dimensionRegistry);\n-      ProtocolUtils.writeString(buf, dimensionRegistryName);\n+      buf.writeByte(previousGamemode);\n+      ProtocolUtils.writeStringArray(buf, dimensionRegistry.getLevelNames().toArray(\n+              new String[dimensionRegistry.getLevelNames().size()]));\n+      ProtocolUtils.writeCompoundTag(buf, dimensionRegistry.encodeRegistry());\n+      ProtocolUtils.writeString(buf, dimensionInfo.getRegistryIdentifier());\n+      ProtocolUtils.writeString(buf, dimensionInfo.getLevelName());\n+    } else if (version.compareTo(ProtocolVersion.MINECRAFT_1_9_1) >= 0) {\n+      buf.writeInt(dimension);\n     } else {\n-      if (version.compareTo(ProtocolVersion.MINECRAFT_1_9_1) >= 0) {\n-        buf.writeInt(dimension);\n-      } else {\n-        buf.writeByte(dimension);\n-      }\n+      buf.writeByte(dimension);\n     }\n     if (version.compareTo(ProtocolVersion.MINECRAFT_1_13_2) <= 0) {\n       buf.writeByte(difficulty);\n", "next_change": {"commit": "d79c1d0407b11a39f2b93655e7600777e51e9d98", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\nindex 630a60de..2c0b63c9 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\n", "chunk": "@@ -200,7 +261,11 @@ public class JoinGame implements MinecraftPacket {\n     if (version.compareTo(ProtocolVersion.MINECRAFT_1_15) >= 0) {\n       buf.writeLong(partialHashedSeed);\n     }\n-    buf.writeByte(maxPlayers);\n+    if (version.compareTo(ProtocolVersion.MINECRAFT_1_16_2) >= 0) {\n+      ProtocolUtils.writeVarInt(buf, maxPlayers);\n+    } else {\n+      buf.writeByte(maxPlayers);\n+    }\n     if (version.compareTo(ProtocolVersion.MINECRAFT_1_16) < 0) {\n       if (levelType == null) {\n         throw new IllegalStateException(\"No level type specified.\");\n", "next_change": {"commit": "e6a93ad0c6f15c91e5be0bec6916d94fcf663d06", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\nindex 2c0b63c9..26a293a1 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\n", "chunk": "@@ -261,17 +308,11 @@ public class JoinGame implements MinecraftPacket {\n     if (version.compareTo(ProtocolVersion.MINECRAFT_1_15) >= 0) {\n       buf.writeLong(partialHashedSeed);\n     }\n-    if (version.compareTo(ProtocolVersion.MINECRAFT_1_16_2) >= 0) {\n-      ProtocolUtils.writeVarInt(buf, maxPlayers);\n-    } else {\n-      buf.writeByte(maxPlayers);\n-    }\n-    if (version.compareTo(ProtocolVersion.MINECRAFT_1_16) < 0) {\n-      if (levelType == null) {\n-        throw new IllegalStateException(\"No level type specified.\");\n-      }\n-      ProtocolUtils.writeString(buf, levelType);\n+    buf.writeByte(maxPlayers);\n+    if (levelType == null) {\n+      throw new IllegalStateException(\"No level type specified.\");\n     }\n+    ProtocolUtils.writeString(buf, levelType);\n     if (version.compareTo(ProtocolVersion.MINECRAFT_1_14) >= 0) {\n       ProtocolUtils.writeVarInt(buf, viewDistance);\n     }\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "0dd6fe1ef2783fe1f9322af06c6fd218aa67cdb1", "message": "Merge commit", "committedDate": null}, {"oid": "cd9bb61f208e3b27da9fbdcb4bf6cafc9135be65", "committedDate": "2020-06-20 23:11:19 -0400", "message": "Merge branch 'future/1.16' of https://github.com/Xernium/Velocity into Xernium-future/1.16"}, {"oid": "ae6afc8b18919c8f1051ef8618203a0d09512f60", "committedDate": "2020-06-23 13:17:36 -0400", "message": "Fix Minecraft 1.7 support (bad merge)"}, {"oid": "d79c1d0407b11a39f2b93655e7600777e51e9d98", "committedDate": "2020-08-05 18:13:16 -0400", "message": "Port of #325 for Velocity 1.1.0"}, {"oid": "b34b198064780481f669f53960180d39de0254e2", "committedDate": "2020-08-06 15:08:50 -0400", "message": "1.16.2-pre3"}, {"oid": "cab6919a46516026c731e56654bdc6f527bb2540", "committedDate": "2020-08-06 17:38:52 -0400", "message": "Switch to adventure-nbt and fix server switching on 1.16.2-pre3"}, {"oid": "717f2a070dd215902424804581df77288f999466", "committedDate": "2020-08-11 13:24:11 -0400", "message": "Remove any use of the word \"dummy\""}, {"oid": "5d287306c2458ccaad40621e3d7418215b764c62", "committedDate": "2020-09-01 03:25:15 -0400", "message": "Small code cleanups"}, {"oid": "03e9fa79d6bbf19ca7446c234d78bb4c400d1854", "committedDate": "2021-01-23 12:55:28 -0500", "message": "Raise limit on JoinGame NBT reading to 2MiB."}, {"oid": "c747120b20be1853ee02e7b2b67871249a88aa6d", "committedDate": "2021-03-31 16:04:06 -0400", "message": "Relicense the Velocity proxy under the terms of GPLv3 (#448)"}, {"oid": "e6a93ad0c6f15c91e5be0bec6916d94fcf663d06", "committedDate": "2021-08-21 02:17:34 -0400", "message": "Clean up JoinGame packet encoding/decoding"}, {"oid": "4ba4054f23cfea3d4de51c042fbf8214d7275df6", "committedDate": "2021-10-09 00:08:51 +0200", "message": "Snapshot 21w40a"}, {"oid": "d97ed956a7be1411b192939abcab8412932230b8", "committedDate": "2022-06-07 21:00:24 -0400", "message": "Update/1.19 (#726)"}, {"oid": "c45597c8850918e9d1c3d58da19833e9d6d9b209", "committedDate": "2022-06-07 23:23:50 -0400", "message": "Hotfix registry and argument ser/de (#729)"}, {"oid": "d72d707b1c0dd6215a4984956faf4b2ec4bdbd97", "committedDate": "2023-01-01 17:53:37 -0500", "message": "Convert Velocity buildscripts to Kotlin DSL (#918)"}, {"oid": "b0862d2d16c4ba7560d3f24c824d78793ac3d9e0", "committedDate": "2023-01-01 18:46:33 -0500", "message": "Use Spotless for license formatting"}, {"oid": "022ae0fc002800b42f6b870e62cf52d5a7cb5341", "committedDate": "2023-01-08 13:18:14 -0500", "message": "Instead of re-encoding the client-server registry, pass through the original"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ3OTg2NA==", "url": "https://github.com/PaperMC/Velocity/pull/310#discussion_r429479864", "body": "`// added in 1.16`", "bodyText": "// added in 1.16", "bodyHTML": "<p dir=\"auto\"><code>// added in 1.16</code></p>", "author": "mikroskeem", "createdAt": "2020-05-22T22:34:06Z", "path": "proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/brigadier/ArgumentPropertyRegistry.java", "diffHunk": "@@ -134,5 +134,6 @@ public static void serialize(ByteBuf buf, ArgumentType<?> type) {\n     dummy(\"minecraft:int_range\", DUMMY);\n     dummy(\"minecraft:float_range\", DUMMY);\n     dummy(\"minecraft:time\", DUMMY); // added in 1.14\n+    dummy(\"minecraft:uuid\", DUMMY);", "originalCommit": "d37b6a361cb05f69db2608c29c4608dc6881edc7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fca73bae675d396cb584fc48e2c0548cc6595e58", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/brigadier/ArgumentPropertyRegistry.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/brigadier/ArgumentPropertyRegistry.java\nindex 56c2a06c..7c9b8fb9 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/brigadier/ArgumentPropertyRegistry.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/brigadier/ArgumentPropertyRegistry.java\n", "chunk": "@@ -134,6 +134,6 @@ public class ArgumentPropertyRegistry {\n     dummy(\"minecraft:int_range\", DUMMY);\n     dummy(\"minecraft:float_range\", DUMMY);\n     dummy(\"minecraft:time\", DUMMY); // added in 1.14\n-    dummy(\"minecraft:uuid\", DUMMY);\n+    dummy(\"minecraft:uuid\", DUMMY); // added in 1.16\n   }\n }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "0dd6fe1ef2783fe1f9322af06c6fd218aa67cdb1", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/brigadier/ArgumentPropertyRegistry.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/brigadier/ArgumentPropertyRegistry.java\nindex 56c2a06c..7c9b8fb9 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/brigadier/ArgumentPropertyRegistry.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/brigadier/ArgumentPropertyRegistry.java\n", "chunk": "@@ -134,6 +134,6 @@ public class ArgumentPropertyRegistry {\n     dummy(\"minecraft:int_range\", DUMMY);\n     dummy(\"minecraft:float_range\", DUMMY);\n     dummy(\"minecraft:time\", DUMMY); // added in 1.14\n-    dummy(\"minecraft:uuid\", DUMMY);\n+    dummy(\"minecraft:uuid\", DUMMY); // added in 1.16\n   }\n }\n", "next_change": {"commit": "d79c1d0407b11a39f2b93655e7600777e51e9d98", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/brigadier/ArgumentPropertyRegistry.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/brigadier/ArgumentPropertyRegistry.java\nindex 7c9b8fb9..4baa0a3c 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/brigadier/ArgumentPropertyRegistry.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/brigadier/ArgumentPropertyRegistry.java\n", "chunk": "@@ -135,5 +135,6 @@ public class ArgumentPropertyRegistry {\n     dummy(\"minecraft:float_range\", DUMMY);\n     dummy(\"minecraft:time\", DUMMY); // added in 1.14\n     dummy(\"minecraft:uuid\", DUMMY); // added in 1.16\n+    dummy(\"minecraft:angle\", DUMMY); // added in 1.16.2\n   }\n }\n", "next_change": {"commit": "717f2a070dd215902424804581df77288f999466", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/brigadier/ArgumentPropertyRegistry.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/brigadier/ArgumentPropertyRegistry.java\nindex 4baa0a3c..0fa649cc 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/brigadier/ArgumentPropertyRegistry.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/brigadier/ArgumentPropertyRegistry.java\n", "chunk": "@@ -91,50 +95,50 @@ public class ArgumentPropertyRegistry {\n     register(\"brigadier:float\", FloatArgumentType.class, FLOAT);\n     register(\"brigadier:double\", DoubleArgumentType.class, DOUBLE);\n     register(\"brigadier:bool\", BoolArgumentType.class,\n-        VoidArgumentPropertySerializer.create(BoolArgumentType::bool));\n+        GenericArgumentPropertySerializer.create(BoolArgumentType::bool));\n     register(\"brigadier:long\", LongArgumentType.class, LONG);\n \n     // Minecraft argument types with extra properties\n-    dummy(\"minecraft:entity\", ByteArgumentPropertySerializer.BYTE);\n-    dummy(\"minecraft:score_holder\", ByteArgumentPropertySerializer.BYTE);\n+    empty(\"minecraft:entity\", ByteArgumentPropertySerializer.BYTE);\n+    empty(\"minecraft:score_holder\", ByteArgumentPropertySerializer.BYTE);\n \n     // Minecraft argument types\n-    dummy(\"minecraft:game_profile\", DUMMY);\n-    dummy(\"minecraft:block_pos\", DUMMY);\n-    dummy(\"minecraft:column_pos\", DUMMY);\n-    dummy(\"minecraft:vec3\", DUMMY);\n-    dummy(\"minecraft:vec2\", DUMMY);\n-    dummy(\"minecraft:block_state\", DUMMY);\n-    dummy(\"minecraft:block_predicate\", DUMMY);\n-    dummy(\"minecraft:item_stack\", DUMMY);\n-    dummy(\"minecraft:item_predicate\", DUMMY);\n-    dummy(\"minecraft:color\", DUMMY);\n-    dummy(\"minecraft:component\", DUMMY);\n-    dummy(\"minecraft:message\", DUMMY);\n-    dummy(\"minecraft:nbt\", DUMMY);\n-    dummy(\"minecraft:nbt_compound_tag\", DUMMY); // added in 1.14\n-    dummy(\"minecraft:nbt_tag\", DUMMY); // added in 1.14\n-    dummy(\"minecraft:nbt_path\", DUMMY);\n-    dummy(\"minecraft:objective\", DUMMY);\n-    dummy(\"minecraft:objective_criteria\", DUMMY);\n-    dummy(\"minecraft:operation\", DUMMY);\n-    dummy(\"minecraft:particle\", DUMMY);\n-    dummy(\"minecraft:rotation\", DUMMY);\n-    dummy(\"minecraft:scoreboard_slot\", DUMMY);\n-    dummy(\"minecraft:swizzle\", DUMMY);\n-    dummy(\"minecraft:team\", DUMMY);\n-    dummy(\"minecraft:item_slot\", DUMMY);\n-    dummy(\"minecraft:resource_location\", DUMMY);\n-    dummy(\"minecraft:mob_effect\", DUMMY);\n-    dummy(\"minecraft:function\", DUMMY);\n-    dummy(\"minecraft:entity_anchor\", DUMMY);\n-    dummy(\"minecraft:item_enchantment\", DUMMY);\n-    dummy(\"minecraft:entity_summon\", DUMMY);\n-    dummy(\"minecraft:dimension\", DUMMY);\n-    dummy(\"minecraft:int_range\", DUMMY);\n-    dummy(\"minecraft:float_range\", DUMMY);\n-    dummy(\"minecraft:time\", DUMMY); // added in 1.14\n-    dummy(\"minecraft:uuid\", DUMMY); // added in 1.16\n-    dummy(\"minecraft:angle\", DUMMY); // added in 1.16.2\n+    empty(\"minecraft:game_profile\");\n+    empty(\"minecraft:block_pos\");\n+    empty(\"minecraft:column_pos\");\n+    empty(\"minecraft:vec3\");\n+    empty(\"minecraft:vec2\");\n+    empty(\"minecraft:block_state\");\n+    empty(\"minecraft:block_predicate\");\n+    empty(\"minecraft:item_stack\");\n+    empty(\"minecraft:item_predicate\");\n+    empty(\"minecraft:color\");\n+    empty(\"minecraft:component\");\n+    empty(\"minecraft:message\");\n+    empty(\"minecraft:nbt\");\n+    empty(\"minecraft:nbt_compound_tag\"); // added in 1.14\n+    empty(\"minecraft:nbt_tag\"); // added in 1.14\n+    empty(\"minecraft:nbt_path\");\n+    empty(\"minecraft:objective\");\n+    empty(\"minecraft:objective_criteria\");\n+    empty(\"minecraft:operation\");\n+    empty(\"minecraft:particle\");\n+    empty(\"minecraft:rotation\");\n+    empty(\"minecraft:scoreboard_slot\");\n+    empty(\"minecraft:swizzle\");\n+    empty(\"minecraft:team\");\n+    empty(\"minecraft:item_slot\");\n+    empty(\"minecraft:resource_location\");\n+    empty(\"minecraft:mob_effect\");\n+    empty(\"minecraft:function\");\n+    empty(\"minecraft:entity_anchor\");\n+    empty(\"minecraft:item_enchantment\");\n+    empty(\"minecraft:entity_summon\");\n+    empty(\"minecraft:dimension\");\n+    empty(\"minecraft:int_range\");\n+    empty(\"minecraft:float_range\");\n+    empty(\"minecraft:time\", EMPTY); // added in 1.14\n+    empty(\"minecraft:uuid\", EMPTY); // added in 1.16\n+    empty(\"minecraft:angle\", EMPTY); // added in 1.16.2\n   }\n }\n", "next_change": {"commit": "d363d80a8318788cb95fbfce66d93d65a0f9abce", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/brigadier/ArgumentPropertyRegistry.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/brigadier/ArgumentPropertyRegistry.java\nindex 0fa649cc..c175f8dc 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/brigadier/ArgumentPropertyRegistry.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/brigadier/ArgumentPropertyRegistry.java\n", "chunk": "@@ -137,8 +137,8 @@ public class ArgumentPropertyRegistry {\n     empty(\"minecraft:dimension\");\n     empty(\"minecraft:int_range\");\n     empty(\"minecraft:float_range\");\n-    empty(\"minecraft:time\", EMPTY); // added in 1.14\n-    empty(\"minecraft:uuid\", EMPTY); // added in 1.16\n-    empty(\"minecraft:angle\", EMPTY); // added in 1.16.2\n+    empty(\"minecraft:time\"); // added in 1.14\n+    empty(\"minecraft:uuid\"); // added in 1.16\n+    empty(\"minecraft:angle\"); // added in 1.16.2\n   }\n }\n", "next_change": {"commit": "d97ed956a7be1411b192939abcab8412932230b8", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/brigadier/ArgumentPropertyRegistry.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/brigadier/ArgumentPropertyRegistry.java\nindex c175f8dc..ddd59c78 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/brigadier/ArgumentPropertyRegistry.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/brigadier/ArgumentPropertyRegistry.java\n", "chunk": "@@ -69,76 +96,144 @@ public class ArgumentPropertyRegistry {\n    * @param buf the buffer to serialize into\n    * @param type the type to serialize\n    */\n-  public static void serialize(ByteBuf buf, ArgumentType<?> type) {\n+  public static void serialize(ByteBuf buf, ArgumentType<?> type,\n+                               ProtocolVersion protocolVersion) {\n     if (type instanceof PassthroughProperty) {\n       PassthroughProperty property = (PassthroughProperty) type;\n-      ProtocolUtils.writeString(buf, property.getIdentifier());\n+      writeIdentifier(buf, property.getIdentifier(), protocolVersion);\n       if (property.getResult() != null) {\n-        property.getSerializer().serialize(property.getResult(), buf);\n+        property.getSerializer().serialize(property.getResult(), buf, protocolVersion);\n       }\n+    } else if (type instanceof ModArgumentProperty) {\n+      ModArgumentProperty property = (ModArgumentProperty) type;\n+      writeIdentifier(buf, property.getIdentifier(), protocolVersion);\n+      buf.writeBytes(property.getData());\n     } else {\n       ArgumentPropertySerializer serializer = byClass.get(type.getClass());\n-      String id = classToId.get(type.getClass());\n+      ArgumentIdentifier id = classToId.get(type.getClass());\n       if (serializer == null || id == null) {\n         throw new IllegalArgumentException(\"Don't know how to serialize \"\n             + type.getClass().getName());\n       }\n-      ProtocolUtils.writeString(buf, id);\n-      serializer.serialize(type, buf);\n+      writeIdentifier(buf, id, protocolVersion);\n+      serializer.serialize(type, buf, protocolVersion);\n     }\n   }\n \n+  /**\n+   * Writes the {@link ArgumentIdentifier} to a version-specific buffer.\n+   * @param buf the buffer to write to\n+   * @param identifier the identifier to write\n+   * @param protocolVersion the protocol version to use\n+   */\n+  public static void writeIdentifier(ByteBuf buf, ArgumentIdentifier identifier,\n+                                 ProtocolVersion protocolVersion) {\n+    if (protocolVersion.compareTo(MINECRAFT_1_19) >= 0) {\n+      Integer id = identifier.getIdByProtocolVersion(protocolVersion);\n+      Preconditions.checkNotNull(id, \"Don't know how to serialize type \" + identifier);\n+\n+      ProtocolUtils.writeVarInt(buf, id);\n+    } else {\n+      ProtocolUtils.writeString(buf, identifier.getIdentifier());\n+    }\n+\n+  }\n+\n+  /**\n+   * Reads the {@link ArgumentIdentifier} from a version-specific buffer.\n+   * @param buf the buffer to write to\n+   * @param protocolVersion the protocol version to use\n+   * @return the identifier read from the buffer\n+   */\n+  public static ArgumentIdentifier readIdentifier(ByteBuf buf, ProtocolVersion protocolVersion) {\n+    if (protocolVersion.compareTo(MINECRAFT_1_19) >= 0) {\n+      int id = ProtocolUtils.readVarInt(buf);\n+      for (ArgumentIdentifier i : byIdentifier.keySet()) {\n+        Integer v = i.getIdByProtocolVersion(protocolVersion);\n+        if (v != null && v == id) {\n+          return i;\n+        }\n+      }\n+    } else {\n+      String identifier = ProtocolUtils.readString(buf);\n+      for (ArgumentIdentifier i : byIdentifier.keySet()) {\n+        if (i.getIdentifier().equals(identifier)) {\n+          return i;\n+        }\n+      }\n+    }\n+    return null;\n+  }\n+\n   static {\n     // Base Brigadier argument types\n-    register(\"brigadier:string\", StringArgumentType.class, STRING);\n-    register(\"brigadier:integer\", IntegerArgumentType.class, INTEGER);\n-    register(\"brigadier:float\", FloatArgumentType.class, FLOAT);\n-    register(\"brigadier:double\", DoubleArgumentType.class, DOUBLE);\n-    register(\"brigadier:bool\", BoolArgumentType.class,\n-        GenericArgumentPropertySerializer.create(BoolArgumentType::bool));\n-    register(\"brigadier:long\", LongArgumentType.class, LONG);\n-\n-    // Minecraft argument types with extra properties\n-    empty(\"minecraft:entity\", ByteArgumentPropertySerializer.BYTE);\n-    empty(\"minecraft:score_holder\", ByteArgumentPropertySerializer.BYTE);\n-\n-    // Minecraft argument types\n-    empty(\"minecraft:game_profile\");\n-    empty(\"minecraft:block_pos\");\n-    empty(\"minecraft:column_pos\");\n-    empty(\"minecraft:vec3\");\n-    empty(\"minecraft:vec2\");\n-    empty(\"minecraft:block_state\");\n-    empty(\"minecraft:block_predicate\");\n-    empty(\"minecraft:item_stack\");\n-    empty(\"minecraft:item_predicate\");\n-    empty(\"minecraft:color\");\n-    empty(\"minecraft:component\");\n-    empty(\"minecraft:message\");\n-    empty(\"minecraft:nbt\");\n-    empty(\"minecraft:nbt_compound_tag\"); // added in 1.14\n-    empty(\"minecraft:nbt_tag\"); // added in 1.14\n-    empty(\"minecraft:nbt_path\");\n-    empty(\"minecraft:objective\");\n-    empty(\"minecraft:objective_criteria\");\n-    empty(\"minecraft:operation\");\n-    empty(\"minecraft:particle\");\n-    empty(\"minecraft:rotation\");\n-    empty(\"minecraft:scoreboard_slot\");\n-    empty(\"minecraft:swizzle\");\n-    empty(\"minecraft:team\");\n-    empty(\"minecraft:item_slot\");\n-    empty(\"minecraft:resource_location\");\n-    empty(\"minecraft:mob_effect\");\n-    empty(\"minecraft:function\");\n-    empty(\"minecraft:entity_anchor\");\n-    empty(\"minecraft:item_enchantment\");\n-    empty(\"minecraft:entity_summon\");\n-    empty(\"minecraft:dimension\");\n-    empty(\"minecraft:int_range\");\n-    empty(\"minecraft:float_range\");\n-    empty(\"minecraft:time\"); // added in 1.14\n-    empty(\"minecraft:uuid\"); // added in 1.16\n-    empty(\"minecraft:angle\"); // added in 1.16.2\n+    register(id(\"brigadier:bool\", mapSet(MINECRAFT_1_19, 0)), BoolArgumentType.class,\n+        new ArgumentPropertySerializer<>() {\n+          @Override\n+          public BoolArgumentType deserialize(ByteBuf buf, ProtocolVersion protocolVersion) {\n+            return BoolArgumentType.bool();\n+          }\n+\n+          @Override\n+          public void serialize(BoolArgumentType object, ByteBuf buf,\n+                                ProtocolVersion protocolVersion) {\n+\n+          }\n+        });\n+    register(id(\"brigadier:float\", mapSet(MINECRAFT_1_19, 1)), FloatArgumentType.class, FLOAT);\n+    register(id(\"brigadier:double\", mapSet(MINECRAFT_1_19, 2)), DoubleArgumentType.class, DOUBLE);\n+    register(id(\"brigadier:integer\", mapSet(MINECRAFT_1_19, 3)), IntegerArgumentType.class, INTEGER);\n+    register(id(\"brigadier:long\", mapSet(MINECRAFT_1_19, 4)), LongArgumentType.class, LONG);\n+    register(id(\"brigadier:string\", mapSet(MINECRAFT_1_19, 5)), StringArgumentType.class, STRING);\n+\n+    empty(id(\"minecraft:entity\", mapSet(MINECRAFT_1_19, 6)), ByteArgumentPropertySerializer.BYTE);\n+    empty(id(\"minecraft:game_profile\", mapSet(MINECRAFT_1_19, 7)));\n+    empty(id(\"minecraft:block_pos\", mapSet(MINECRAFT_1_19, 8)));\n+    empty(id(\"minecraft:column_pos\", mapSet(MINECRAFT_1_19, 9)));\n+    empty(id(\"minecraft:vec3\", mapSet(MINECRAFT_1_19, 10)));\n+    empty(id(\"minecraft:vec2\", mapSet(MINECRAFT_1_19, 11)));\n+    empty(id(\"minecraft:block_state\", mapSet(MINECRAFT_1_19, 12)));\n+    empty(id(\"minecraft:block_predicate\", mapSet(MINECRAFT_1_19, 13)));\n+    empty(id(\"minecraft:item_stack\", mapSet(MINECRAFT_1_19, 14)));\n+    empty(id(\"minecraft:item_predicate\", mapSet(MINECRAFT_1_19, 15)));\n+    empty(id(\"minecraft:color\", mapSet(MINECRAFT_1_19, 16)));\n+    empty(id(\"minecraft:component\", mapSet(MINECRAFT_1_19, 17)));\n+    empty(id(\"minecraft:message\", mapSet(MINECRAFT_1_19, 18)));\n+    empty(id(\"minecraft:nbt_compound_tag\", mapSet(MINECRAFT_1_19, 19))); // added in 1.14\n+    empty(id(\"minecraft:nbt_tag\", mapSet(MINECRAFT_1_19, 20))); // added in 1.14\n+    empty(id(\"minecraft:nbt_path\", mapSet(MINECRAFT_1_19, 21)));\n+    empty(id(\"minecraft:objective\", mapSet(MINECRAFT_1_19, 22)));\n+    empty(id(\"minecraft:objective_criteria\", mapSet(MINECRAFT_1_19, 23)));\n+    empty(id(\"minecraft:operation\", mapSet(MINECRAFT_1_19, 24)));\n+    empty(id(\"minecraft:particle\", mapSet(MINECRAFT_1_19, 25)));\n+    empty(id(\"minecraft:angle\", mapSet(MINECRAFT_1_19, 26))); // added in 1.16.2\n+    empty(id(\"minecraft:rotation\", mapSet(MINECRAFT_1_19, 27)));\n+    empty(id(\"minecraft:scoreboard_slot\", mapSet(MINECRAFT_1_19, 28)));\n+    empty(id(\"minecraft:score_holder\", mapSet(MINECRAFT_1_19, 29)), ByteArgumentPropertySerializer.BYTE);\n+    empty(id(\"minecraft:swizzle\", mapSet(MINECRAFT_1_19, 30)));\n+    empty(id(\"minecraft:team\", mapSet(MINECRAFT_1_19, 31)));\n+    empty(id(\"minecraft:item_slot\", mapSet(MINECRAFT_1_19, 32)));\n+    empty(id(\"minecraft:resource_location\", mapSet(MINECRAFT_1_19, 33)));\n+    empty(id(\"minecraft:mob_effect\", mapSet(MINECRAFT_1_19, 34)));\n+    empty(id(\"minecraft:function\", mapSet(MINECRAFT_1_19, 35)));\n+    empty(id(\"minecraft:entity_anchor\", mapSet(MINECRAFT_1_19, 36)));\n+    empty(id(\"minecraft:int_range\", mapSet(MINECRAFT_1_19, 37)));\n+    empty(id(\"minecraft:float_range\", mapSet(MINECRAFT_1_19, 38)));\n+    empty(id(\"minecraft:item_enchantment\", mapSet(MINECRAFT_1_19, 39)));\n+    empty(id(\"minecraft:entity_summon\", mapSet(MINECRAFT_1_19, 40)));\n+    empty(id(\"minecraft:dimension\", mapSet(MINECRAFT_1_19, 41)));\n+    empty(id(\"minecraft:time\", mapSet(MINECRAFT_1_19, 42))); // added in 1.14\n+\n+    register(id(\"minecraft:resource_or_tag\", mapSet(MINECRAFT_1_19, 43)),\n+            RegistryKeyArgument.class, RegistryKeyArgumentSerializer.REGISTRY);\n+    register(id(\"minecraft:resource\", mapSet(MINECRAFT_1_19, 44)),\n+            RegistryKeyArgument.class, RegistryKeyArgumentSerializer.REGISTRY);\n+\n+    empty(id(\"minecraft:uuid\", mapSet(MINECRAFT_1_19, 45))); // added in 1.16\n+\n+    // Crossstitch support\n+    register(id(\"crossstitch:mod_argument\", mapSet(MINECRAFT_1_19, -256)), ModArgumentProperty.class, MOD);\n+\n+    empty(id(\"minecraft:nbt\")); // No longer in 1.19+\n   }\n }\n", "next_change": {"commit": "c45597c8850918e9d1c3d58da19833e9d6d9b209", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/brigadier/ArgumentPropertyRegistry.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/brigadier/ArgumentPropertyRegistry.java\nindex ddd59c78..bdadb957 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/brigadier/ArgumentPropertyRegistry.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/brigadier/ArgumentPropertyRegistry.java\n", "chunk": "@@ -229,7 +229,11 @@ public class ArgumentPropertyRegistry {\n     register(id(\"minecraft:resource\", mapSet(MINECRAFT_1_19, 44)),\n             RegistryKeyArgument.class, RegistryKeyArgumentSerializer.REGISTRY);\n \n-    empty(id(\"minecraft:uuid\", mapSet(MINECRAFT_1_19, 45))); // added in 1.16\n+    empty(id(\"minecraft:template_mirror\", mapSet(MINECRAFT_1_19, 45))); // 1.19\n+    empty(id(\"minecraft:template_rotation\", mapSet(MINECRAFT_1_19, 46))); // 1.19\n+\n+    empty(id(\"minecraft:uuid\", mapSet(MINECRAFT_1_19, 47))); // added in 1.16\n+\n \n     // Crossstitch support\n     register(id(\"crossstitch:mod_argument\", mapSet(MINECRAFT_1_19, -256)), ModArgumentProperty.class, MOD);\n", "next_change": {"commit": "b504e0857c02217e89ed47a35aa76af1f00d3a48", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/brigadier/ArgumentPropertyRegistry.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/brigadier/ArgumentPropertyRegistry.java\nindex bdadb957..54b4d100 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/brigadier/ArgumentPropertyRegistry.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/brigadier/ArgumentPropertyRegistry.java\n", "chunk": "@@ -214,27 +219,31 @@ public class ArgumentPropertyRegistry {\n     empty(id(\"minecraft:team\", mapSet(MINECRAFT_1_19, 31)));\n     empty(id(\"minecraft:item_slot\", mapSet(MINECRAFT_1_19, 32)));\n     empty(id(\"minecraft:resource_location\", mapSet(MINECRAFT_1_19, 33)));\n-    empty(id(\"minecraft:mob_effect\", mapSet(MINECRAFT_1_19, 34)));\n-    empty(id(\"minecraft:function\", mapSet(MINECRAFT_1_19, 35)));\n-    empty(id(\"minecraft:entity_anchor\", mapSet(MINECRAFT_1_19, 36)));\n-    empty(id(\"minecraft:int_range\", mapSet(MINECRAFT_1_19, 37)));\n-    empty(id(\"minecraft:float_range\", mapSet(MINECRAFT_1_19, 38)));\n-    empty(id(\"minecraft:item_enchantment\", mapSet(MINECRAFT_1_19, 39)));\n-    empty(id(\"minecraft:entity_summon\", mapSet(MINECRAFT_1_19, 40)));\n-    empty(id(\"minecraft:dimension\", mapSet(MINECRAFT_1_19, 41)));\n-    empty(id(\"minecraft:time\", mapSet(MINECRAFT_1_19, 42))); // added in 1.14\n-\n-    register(id(\"minecraft:resource_or_tag\", mapSet(MINECRAFT_1_19, 43)),\n-            RegistryKeyArgument.class, RegistryKeyArgumentSerializer.REGISTRY);\n-    register(id(\"minecraft:resource\", mapSet(MINECRAFT_1_19, 44)),\n-            RegistryKeyArgument.class, RegistryKeyArgumentSerializer.REGISTRY);\n+    empty(id(\"minecraft:mob_effect\", mapSet(MINECRAFT_1_19_3, -1), mapSet(MINECRAFT_1_19, 34)));\n+    empty(id(\"minecraft:function\", mapSet(MINECRAFT_1_19_3, 34), mapSet(MINECRAFT_1_19, 35)));\n+    empty(id(\"minecraft:entity_anchor\", mapSet(MINECRAFT_1_19_3, 35), mapSet(MINECRAFT_1_19, 36)));\n+    empty(id(\"minecraft:int_range\", mapSet(MINECRAFT_1_19_3, 36), mapSet(MINECRAFT_1_19, 37)));\n+    empty(id(\"minecraft:float_range\", mapSet(MINECRAFT_1_19_3, 37), mapSet(MINECRAFT_1_19, 38)));\n+    empty(id(\"minecraft:item_enchantment\", mapSet(MINECRAFT_1_19_3, -1), mapSet(MINECRAFT_1_19, 39)));\n+    empty(id(\"minecraft:entity_summon\", mapSet(MINECRAFT_1_19_3, -1), mapSet(MINECRAFT_1_19, 40)));\n+    empty(id(\"minecraft:dimension\", mapSet(MINECRAFT_1_19_3, 38), mapSet(MINECRAFT_1_19, 41)));\n+    empty(id(\"minecraft:gamemode\", mapSet(MINECRAFT_1_19_3, 39))); // 1.19.3\n+    empty(id(\"minecraft:time\", mapSet(MINECRAFT_1_19_3, 40), mapSet(MINECRAFT_1_19, 42))); // added in 1.14\n+\n+    register(id(\"minecraft:resource_or_tag\", mapSet(MINECRAFT_1_19_3, 41), mapSet(MINECRAFT_1_19, 43)),\n+        RegistryKeyArgument.class, RegistryKeyArgumentSerializer.REGISTRY);\n+    register(id(\"minecraft:resource_or_tag_key\", mapSet(MINECRAFT_1_19_3, 42)),\n+        RegistryKeyArgumentList.ResourceOrTagKey.class, RegistryKeyArgumentList.ResourceOrTagKey.Serializer.REGISTRY);\n+    register(id(\"minecraft:resource\", mapSet(MINECRAFT_1_19_3, 43), mapSet(MINECRAFT_1_19, 44)),\n+        RegistryKeyArgument.class, RegistryKeyArgumentSerializer.REGISTRY);\n+    register(id(\"minecraft:resource_key\", mapSet(MINECRAFT_1_19_3, 44)),\n+        RegistryKeyArgumentList.ResourceKey.class, RegistryKeyArgumentList.ResourceKey.Serializer.REGISTRY);\n \n     empty(id(\"minecraft:template_mirror\", mapSet(MINECRAFT_1_19, 45))); // 1.19\n     empty(id(\"minecraft:template_rotation\", mapSet(MINECRAFT_1_19, 46))); // 1.19\n \n     empty(id(\"minecraft:uuid\", mapSet(MINECRAFT_1_19, 47))); // added in 1.16\n \n-\n     // Crossstitch support\n     register(id(\"crossstitch:mod_argument\", mapSet(MINECRAFT_1_19, -256)), ModArgumentProperty.class, MOD);\n \n", "next_change": {"commit": "d72d707b1c0dd6215a4984956faf4b2ec4bdbd97", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/brigadier/ArgumentPropertyRegistry.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/brigadier/ArgumentPropertyRegistry.java\nindex 54b4d100..66517de7 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/brigadier/ArgumentPropertyRegistry.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/brigadier/ArgumentPropertyRegistry.java\n", "chunk": "@@ -245,7 +253,8 @@ public class ArgumentPropertyRegistry {\n     empty(id(\"minecraft:uuid\", mapSet(MINECRAFT_1_19, 47))); // added in 1.16\n \n     // Crossstitch support\n-    register(id(\"crossstitch:mod_argument\", mapSet(MINECRAFT_1_19, -256)), ModArgumentProperty.class, MOD);\n+    register(id(\"crossstitch:mod_argument\", mapSet(MINECRAFT_1_19, -256)),\n+        ModArgumentProperty.class, MOD);\n \n     empty(id(\"minecraft:nbt\")); // No longer in 1.19+\n   }\n", "next_change": {"commit": "31e557c80b43e700f459c5b7e48a0aee442a20f5", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/brigadier/ArgumentPropertyRegistry.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/brigadier/ArgumentPropertyRegistry.java\nindex 66517de7..df877b0b 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/brigadier/ArgumentPropertyRegistry.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/brigadier/ArgumentPropertyRegistry.java\n", "chunk": "@@ -249,8 +251,9 @@ public class ArgumentPropertyRegistry {\n \n     empty(id(\"minecraft:template_mirror\", mapSet(MINECRAFT_1_19, 45))); // 1.19\n     empty(id(\"minecraft:template_rotation\", mapSet(MINECRAFT_1_19, 46))); // 1.19\n+    empty(id(\"minecraft:heightmap\", mapSet(MINECRAFT_1_19_4, 47))); // 1.19.4\n \n-    empty(id(\"minecraft:uuid\", mapSet(MINECRAFT_1_19, 47))); // added in 1.16\n+    empty(id(\"minecraft:uuid\", mapSet(MINECRAFT_1_19_4, 48), mapSet(MINECRAFT_1_19, 47))); // added in 1.16\n \n     // Crossstitch support\n     register(id(\"crossstitch:mod_argument\", mapSet(MINECRAFT_1_19, -256)),\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "0dd6fe1ef2783fe1f9322af06c6fd218aa67cdb1", "message": "Merge commit", "committedDate": null}, {"oid": "cd9bb61f208e3b27da9fbdcb4bf6cafc9135be65", "committedDate": "2020-06-20 23:11:19 -0400", "message": "Merge branch 'future/1.16' of https://github.com/Xernium/Velocity into Xernium-future/1.16"}, {"oid": "d79c1d0407b11a39f2b93655e7600777e51e9d98", "committedDate": "2020-08-05 18:13:16 -0400", "message": "Port of #325 for Velocity 1.1.0"}, {"oid": "717f2a070dd215902424804581df77288f999466", "committedDate": "2020-08-11 13:24:11 -0400", "message": "Remove any use of the word \"dummy\""}, {"oid": "d363d80a8318788cb95fbfce66d93d65a0f9abce", "committedDate": "2020-08-11 13:25:02 -0400", "message": "Use simplified form for new empty argument types"}, {"oid": "7ead4add671edb8736e8c46a597d2783a80e0b00", "committedDate": "2020-11-16 02:58:00 -0500", "message": "Support custom mod argument tunneling (#390)"}, {"oid": "c747120b20be1853ee02e7b2b67871249a88aa6d", "committedDate": "2021-03-31 16:04:06 -0400", "message": "Relicense the Velocity proxy under the terms of GPLv3 (#448)"}, {"oid": "1dfe294b9628ef2aa8cbf7ca454662477ee51a46", "committedDate": "2021-06-13 06:55:24 -0400", "message": "Remove GenericArgumentPropertySerializer"}, {"oid": "2fe50bedc5d60cbda8f3e5141013c6c551d07a71", "committedDate": "2022-02-28 14:27:57 +0000", "message": "1.18.2 support"}, {"oid": "d97ed956a7be1411b192939abcab8412932230b8", "committedDate": "2022-06-07 21:00:24 -0400", "message": "Update/1.19 (#726)"}, {"oid": "c45597c8850918e9d1c3d58da19833e9d6d9b209", "committedDate": "2022-06-07 23:23:50 -0400", "message": "Hotfix registry and argument ser/de (#729)"}, {"oid": "b504e0857c02217e89ed47a35aa76af1f00d3a48", "committedDate": "2022-12-07 14:12:48 +0100", "message": "Update to 1.19.3-rc3 (#893)"}, {"oid": "d72d707b1c0dd6215a4984956faf4b2ec4bdbd97", "committedDate": "2023-01-01 17:53:37 -0500", "message": "Convert Velocity buildscripts to Kotlin DSL (#918)"}, {"oid": "b0862d2d16c4ba7560d3f24c824d78793ac3d9e0", "committedDate": "2023-01-01 18:46:33 -0500", "message": "Use Spotless for license formatting"}, {"oid": "31e557c80b43e700f459c5b7e48a0aee442a20f5", "committedDate": "2023-03-09 19:25:51 +0100", "message": "Start working on 1.19.4"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ4MDAwMA==", "url": "https://github.com/PaperMC/Velocity/pull/310#discussion_r429480000", "body": "Drop this `else` block, move contents out from it", "bodyText": "Drop this else block, move contents out from it", "bodyHTML": "<p dir=\"auto\">Drop this <code>else</code> block, move contents out from it</p>", "author": "mikroskeem", "createdAt": "2020-05-22T22:34:57Z", "path": "proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java", "diffHunk": "@@ -153,6 +160,81 @@ public static void writeUuid(ByteBuf buf, UUID uuid) {\n     buf.writeLong(uuid.getLeastSignificantBits());\n   }\n \n+  /**\n+   * Reads an UUID stored as an Integer Array from the {@code buf}.\n+   * @param buf the buffer to read from\n+   * @return the UUID from the buffer\n+   */\n+  public static UUID readUuidIntArray(ByteBuf buf) {\n+    long msbHigh = (long) buf.readInt() << 32;\n+    long msbLow = (long) buf.readInt() & 0xFFFFFFFFL;\n+    long msb = msbHigh | msbLow;\n+    long lsbHigh = (long) buf.readInt() << 32;\n+    long lsbLow = (long) buf.readInt() & 0xFFFFFFFFL;\n+    long lsb = lsbHigh | lsbLow;\n+    return new UUID(msb, lsb);\n+  }\n+\n+  /**\n+   * Writes an UUID as an Integer Array to the {@code buf}.\n+   * @param buf the buffer to write to\n+   * @param uuid the UUID to write\n+   */\n+  public static void writeUuidIntArray(ByteBuf buf, UUID uuid) {\n+    buf.writeInt((int) (uuid.getMostSignificantBits() >> 32));\n+    buf.writeInt((int) uuid.getMostSignificantBits());\n+    buf.writeInt((int) (uuid.getLeastSignificantBits() >> 32));\n+    buf.writeInt((int) uuid.getLeastSignificantBits());\n+  }\n+\n+  /**\n+   * Reads a {@link net.kyori.nbt.CompoundTag} from the {@code buf}.\n+   * @param buf the buffer to read from\n+   * @return {@link net.kyori.nbt.CompoundTag} the CompoundTag from the buffer\n+   */\n+  public static CompoundTag readCompoundTag(ByteBuf buf) {\n+    int indexBefore = buf.readerIndex();\n+    byte startType = buf.readByte();\n+    if (startType == 0) {\n+      return null;\n+    } else {", "originalCommit": "d37b6a361cb05f69db2608c29c4608dc6881edc7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fca73bae675d396cb584fc48e2c0548cc6595e58", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\nindex c0cbc136..628ec324 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n", "chunk": "@@ -196,22 +198,21 @@ public enum ProtocolUtils {\n     int indexBefore = buf.readerIndex();\n     byte startType = buf.readByte();\n     if (startType == 0) {\n-      return null;\n-    } else {\n-      buf.readerIndex(indexBefore);\n-      try {\n-        DataInput input = new ByteBufInputStream(buf);\n-        byte type = input.readByte();\n-        if (type != 10) {\n-          return null;\n-        }\n-        input.readUTF();\n-        CompoundTag ret = new CompoundTag();\n-        ret.read(input, 0);\n-        return ret;\n-      } catch (IOException e) {\n-        return null;\n+      throw new DecoderException(\"Invalid NBT start-type (end/empty)\");\n+    }\n+    buf.readerIndex(indexBefore);\n+    try {\n+      DataInput input = new ByteBufInputStream(buf);\n+      byte type = input.readByte();\n+      if (type != 10) {\n+        throw new DecoderException(\"NBTTag is not a CompoundTag\");\n       }\n+      input.readUTF(); // Head-padding\n+      CompoundTag compoundTag = new CompoundTag();\n+      compoundTag.read(input, 0);\n+      return compoundTag;\n+    } catch (IOException e) {\n+      throw new DecoderException(\"Unable to decode NBT CompoundTag at \" + indexBefore);\n     }\n   }\n \n", "next_change": {"commit": "101a6a58dd7a1c2af13edd897eade28ac92599ba", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\nindex 628ec324..bb7516aa 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n", "chunk": "@@ -202,17 +204,10 @@ public enum ProtocolUtils {\n     }\n     buf.readerIndex(indexBefore);\n     try {\n-      DataInput input = new ByteBufInputStream(buf);\n-      byte type = input.readByte();\n-      if (type != 10) {\n-        throw new DecoderException(\"NBTTag is not a CompoundTag\");\n-      }\n-      input.readUTF(); // Head-padding\n-      CompoundTag compoundTag = new CompoundTag();\n-      compoundTag.read(input, 0);\n-      return compoundTag;\n-    } catch (IOException e) {\n-      throw new DecoderException(\"Unable to decode NBT CompoundTag at \" + indexBefore);\n+      return TagIO.readDataInput(new ByteBufInputStream(buf));\n+    } catch (IOException thrown) {\n+      throw new DecoderException(\n+              \"Unable to parse NBT CompoundTag, full error: \" + thrown.getMessage());\n     }\n   }\n \n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "0dd6fe1ef2783fe1f9322af06c6fd218aa67cdb1", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\nindex c0cbc136..bb7516aa 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n", "chunk": "@@ -196,22 +200,14 @@ public enum ProtocolUtils {\n     int indexBefore = buf.readerIndex();\n     byte startType = buf.readByte();\n     if (startType == 0) {\n-      return null;\n-    } else {\n-      buf.readerIndex(indexBefore);\n-      try {\n-        DataInput input = new ByteBufInputStream(buf);\n-        byte type = input.readByte();\n-        if (type != 10) {\n-          return null;\n-        }\n-        input.readUTF();\n-        CompoundTag ret = new CompoundTag();\n-        ret.read(input, 0);\n-        return ret;\n-      } catch (IOException e) {\n-        return null;\n-      }\n+      throw new DecoderException(\"Invalid NBT start-type (end/empty)\");\n+    }\n+    buf.readerIndex(indexBefore);\n+    try {\n+      return TagIO.readDataInput(new ByteBufInputStream(buf));\n+    } catch (IOException thrown) {\n+      throw new DecoderException(\n+              \"Unable to parse NBT CompoundTag, full error: \" + thrown.getMessage());\n     }\n   }\n \n", "next_change": {"commit": "5c314c9068814aca404b68cf8442af7201bdcf43", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\nindex bb7516aa..ab6dbc75 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n", "chunk": "@@ -164,102 +160,9 @@ public enum ProtocolUtils {\n     buf.writeLong(uuid.getLeastSignificantBits());\n   }\n \n-  /**\n-   * Reads an UUID stored as an Integer Array from the {@code buf}.\n-   * @param buf the buffer to read from\n-   * @return the UUID from the buffer\n-   */\n-  public static UUID readUuidIntArray(ByteBuf buf) {\n-    long msbHigh = (long) buf.readInt() << 32;\n-    long msbLow = (long) buf.readInt() & 0xFFFFFFFFL;\n-    long msb = msbHigh | msbLow;\n-    long lsbHigh = (long) buf.readInt() << 32;\n-    long lsbLow = (long) buf.readInt() & 0xFFFFFFFFL;\n-    long lsb = lsbHigh | lsbLow;\n-    return new UUID(msb, lsb);\n-  }\n-\n-  /**\n-   * Writes an UUID as an Integer Array to the {@code buf}.\n-   * @param buf the buffer to write to\n-   * @param uuid the UUID to write\n-   */\n-  public static void writeUuidIntArray(ByteBuf buf, UUID uuid) {\n-    buf.writeInt((int) (uuid.getMostSignificantBits() >> 32));\n-    buf.writeInt((int) uuid.getMostSignificantBits());\n-    buf.writeInt((int) (uuid.getLeastSignificantBits() >> 32));\n-    buf.writeInt((int) uuid.getLeastSignificantBits());\n-  }\n-\n-  /**\n-   * Reads a {@link net.kyori.nbt.CompoundTag} from the {@code buf}.\n-   * @param buf the buffer to read from\n-   * @return {@link net.kyori.nbt.CompoundTag} the CompoundTag from the buffer\n-   */\n-  public static CompoundTag readCompoundTag(ByteBuf buf) {\n-    int indexBefore = buf.readerIndex();\n-    byte startType = buf.readByte();\n-    if (startType == 0) {\n-      throw new DecoderException(\"Invalid NBT start-type (end/empty)\");\n-    }\n-    buf.readerIndex(indexBefore);\n-    try {\n-      return TagIO.readDataInput(new ByteBufInputStream(buf));\n-    } catch (IOException thrown) {\n-      throw new DecoderException(\n-              \"Unable to parse NBT CompoundTag, full error: \" + thrown.getMessage());\n-    }\n-  }\n-\n-  /**\n-   * Writes a CompoundTag to the {@code buf}.\n-   * @param buf the buffer to write to\n-   * @param compoundTag the CompoundTag to write\n-   */\n-  public static void writeCompoundTag(ByteBuf buf, CompoundTag compoundTag) {\n-    if (compoundTag == null) {\n-      buf.writeByte(0);\n-      return;\n-    }\n-    try {\n-      TagIO.writeDataOutput(compoundTag, new ByteBufOutputStream(buf));\n-    } catch (IOException e) {\n-      throw new EncoderException(\"Unable to encode NBT CompoundTag\");\n-    }\n-  }\n-\n-  /**\n-   * Reads a String array from the {@code buf}.\n-   * @param buf the buffer to read from\n-   * @return the String array from the buffer\n-   */\n-  public static String[] readStringArray(ByteBuf buf) {\n-    int length = readVarInt(buf);\n-    String[] ret = new String[length];\n-    for (int i = 0; i < length; i++) {\n-      ret[i] = readString(buf);\n-    }\n-    return ret;\n-  }\n-\n-  /**\n-   * Writes a String Array to the {@code buf}.\n-   * @param buf the buffer to write to\n-   * @param stringArray the array to write\n-   */\n-  public static void writeStringArray(ByteBuf buf, String[] stringArray) {\n-    if (stringArray == null) {\n-      writeVarInt(buf, 0);\n-      return;\n-    }\n-    writeVarInt(buf, stringArray.length);\n-    for (int i = 0; i < stringArray.length; i++) {\n-      writeString(buf, stringArray[i]);\n-    }\n-  }\n-\n   /**\n    * Writes a list of {@link com.velocitypowered.api.util.GameProfile.Property} to the buffer.\n+   *\n    * @param buf the buffer to write to\n    * @param properties the properties to serialize\n    */\n", "next_change": {"commit": "592517b9f3b0a042eaa431b77c377096c214f2b0", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\nindex ab6dbc75..55588557 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n", "chunk": "@@ -162,7 +155,6 @@ public enum ProtocolUtils {\n \n   /**\n    * Writes a list of {@link com.velocitypowered.api.util.GameProfile.Property} to the buffer.\n-   *\n    * @param buf the buffer to write to\n    * @param properties the properties to serialize\n    */\n", "next_change": {"commit": "cd9bb61f208e3b27da9fbdcb4bf6cafc9135be65", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\nindex 55588557..bb7516aa 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n", "chunk": "@@ -153,6 +164,100 @@ public enum ProtocolUtils {\n     buf.writeLong(uuid.getLeastSignificantBits());\n   }\n \n+  /**\n+   * Reads an UUID stored as an Integer Array from the {@code buf}.\n+   * @param buf the buffer to read from\n+   * @return the UUID from the buffer\n+   */\n+  public static UUID readUuidIntArray(ByteBuf buf) {\n+    long msbHigh = (long) buf.readInt() << 32;\n+    long msbLow = (long) buf.readInt() & 0xFFFFFFFFL;\n+    long msb = msbHigh | msbLow;\n+    long lsbHigh = (long) buf.readInt() << 32;\n+    long lsbLow = (long) buf.readInt() & 0xFFFFFFFFL;\n+    long lsb = lsbHigh | lsbLow;\n+    return new UUID(msb, lsb);\n+  }\n+\n+  /**\n+   * Writes an UUID as an Integer Array to the {@code buf}.\n+   * @param buf the buffer to write to\n+   * @param uuid the UUID to write\n+   */\n+  public static void writeUuidIntArray(ByteBuf buf, UUID uuid) {\n+    buf.writeInt((int) (uuid.getMostSignificantBits() >> 32));\n+    buf.writeInt((int) uuid.getMostSignificantBits());\n+    buf.writeInt((int) (uuid.getLeastSignificantBits() >> 32));\n+    buf.writeInt((int) uuid.getLeastSignificantBits());\n+  }\n+\n+  /**\n+   * Reads a {@link net.kyori.nbt.CompoundTag} from the {@code buf}.\n+   * @param buf the buffer to read from\n+   * @return {@link net.kyori.nbt.CompoundTag} the CompoundTag from the buffer\n+   */\n+  public static CompoundTag readCompoundTag(ByteBuf buf) {\n+    int indexBefore = buf.readerIndex();\n+    byte startType = buf.readByte();\n+    if (startType == 0) {\n+      throw new DecoderException(\"Invalid NBT start-type (end/empty)\");\n+    }\n+    buf.readerIndex(indexBefore);\n+    try {\n+      return TagIO.readDataInput(new ByteBufInputStream(buf));\n+    } catch (IOException thrown) {\n+      throw new DecoderException(\n+              \"Unable to parse NBT CompoundTag, full error: \" + thrown.getMessage());\n+    }\n+  }\n+\n+  /**\n+   * Writes a CompoundTag to the {@code buf}.\n+   * @param buf the buffer to write to\n+   * @param compoundTag the CompoundTag to write\n+   */\n+  public static void writeCompoundTag(ByteBuf buf, CompoundTag compoundTag) {\n+    if (compoundTag == null) {\n+      buf.writeByte(0);\n+      return;\n+    }\n+    try {\n+      TagIO.writeDataOutput(compoundTag, new ByteBufOutputStream(buf));\n+    } catch (IOException e) {\n+      throw new EncoderException(\"Unable to encode NBT CompoundTag\");\n+    }\n+  }\n+\n+  /**\n+   * Reads a String array from the {@code buf}.\n+   * @param buf the buffer to read from\n+   * @return the String array from the buffer\n+   */\n+  public static String[] readStringArray(ByteBuf buf) {\n+    int length = readVarInt(buf);\n+    String[] ret = new String[length];\n+    for (int i = 0; i < length; i++) {\n+      ret[i] = readString(buf);\n+    }\n+    return ret;\n+  }\n+\n+  /**\n+   * Writes a String Array to the {@code buf}.\n+   * @param buf the buffer to write to\n+   * @param stringArray the array to write\n+   */\n+  public static void writeStringArray(ByteBuf buf, String[] stringArray) {\n+    if (stringArray == null) {\n+      writeVarInt(buf, 0);\n+      return;\n+    }\n+    writeVarInt(buf, stringArray.length);\n+    for (int i = 0; i < stringArray.length; i++) {\n+      writeString(buf, stringArray[i]);\n+    }\n+  }\n+\n   /**\n    * Writes a list of {@link com.velocitypowered.api.util.GameProfile.Property} to the buffer.\n    * @param buf the buffer to write to\n", "next_change": {"commit": "5d287306c2458ccaad40621e3d7418215b764c62", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\nindex bb7516aa..2fa1e759 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n", "chunk": "@@ -253,8 +276,8 @@ public enum ProtocolUtils {\n       return;\n     }\n     writeVarInt(buf, stringArray.length);\n-    for (int i = 0; i < stringArray.length; i++) {\n-      writeString(buf, stringArray[i]);\n+    for (String s : stringArray) {\n+      writeString(buf, s);\n     }\n   }\n \n", "next_change": {"commit": "a0a0966f99bff672b9a28d55b464a4ffd5ee4d2e", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\nindex 2fa1e759..a7e0bd43 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n", "chunk": "@@ -271,10 +271,6 @@ public enum ProtocolUtils {\n    * @param stringArray the array to write\n    */\n   public static void writeStringArray(ByteBuf buf, String[] stringArray) {\n-    if (stringArray == null) {\n-      writeVarInt(buf, 0);\n-      return;\n-    }\n     writeVarInt(buf, stringArray.length);\n     for (String s : stringArray) {\n       writeString(buf, s);\n", "next_change": {"commit": "d72d707b1c0dd6215a4984956faf4b2ec4bdbd97", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\nindex a7e0bd43..f18d9c70 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n", "chunk": "@@ -267,7 +357,8 @@ public enum ProtocolUtils {\n \n   /**\n    * Writes a String Array to the {@code buf}.\n-   * @param buf the buffer to write to\n+   *\n+   * @param buf         the buffer to write to\n    * @param stringArray the array to write\n    */\n   public static void writeStringArray(ByteBuf buf, String[] stringArray) {\n", "next_change": null}, {"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\nindex a7e0bd43..f18d9c70 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n", "chunk": "@@ -279,7 +370,8 @@ public enum ProtocolUtils {\n \n   /**\n    * Writes a list of {@link com.velocitypowered.api.util.GameProfile.Property} to the buffer.\n-   * @param buf the buffer to write to\n+   *\n+   * @param buf        the buffer to write to\n    * @param properties the properties to serialize\n    */\n   public static void writeProperties(ByteBuf buf, List<GameProfile.Property> properties) {\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "0dd6fe1ef2783fe1f9322af06c6fd218aa67cdb1", "message": "Merge commit", "committedDate": null}, {"oid": "5c314c9068814aca404b68cf8442af7201bdcf43", "committedDate": "2019-07-01 08:56:22 +0200", "message": "Add 1.7 Protocol Support"}, {"oid": "d0ad0fac360031348e83dee418418c22c5ebf4e4", "committedDate": "2019-07-05 10:59:29 +0200", "message": "Merge branch 'dev/1.1.0' of github.com:VelocityPowered/Velocity"}, {"oid": "592517b9f3b0a042eaa431b77c377096c214f2b0", "committedDate": "2019-08-29 19:58:00 +0200", "message": "Remove unnessecary diff"}, {"oid": "d7bbe7531a89100e10e5a082b6cdc445df9edd72", "committedDate": "2020-05-25 15:58:52 -0400", "message": "Additional protocol hardening."}, {"oid": "ebad3d1005bfba1dc0e9262ddd1fb79a095a03c9", "committedDate": "2020-05-25 16:05:36 -0400", "message": "Use Integer.MIN_VALUE for the sentinel for readVarIntSafely()"}, {"oid": "eeb660ce007ee116264656b7fd8dedcbc84a97b3", "committedDate": "2020-05-26 05:25:03 -0400", "message": "Fix bad ordering"}, {"oid": "cd9bb61f208e3b27da9fbdcb4bf6cafc9135be65", "committedDate": "2020-06-20 23:11:19 -0400", "message": "Merge branch 'future/1.16' of https://github.com/Xernium/Velocity into Xernium-future/1.16"}, {"oid": "ada35ff28698c9cccea50236eda6ec4c291ca13a", "committedDate": "2020-06-20 23:24:32 -0400", "message": "Merge branch 'Xernium-future/1.16' into future/1.16-velocity-1.1.0"}, {"oid": "c2edd82b16660ab75210fb5caabf09d56bd73b28", "committedDate": "2020-06-28 23:13:57 -0400", "message": "Use more idiomatic adventure text serializer"}, {"oid": "72ce5c86ba81942e46baf891295ef9ffa264a780", "committedDate": "2020-07-16 11:44:55 -0400", "message": "Improve Velocity networking pipeline when under stress"}, {"oid": "f9f60e1489ecad64ba657dbe5f8d38e8f004800f", "committedDate": "2020-07-19 18:23:47 -0400", "message": "Small code cleanups and switch more stuff to adventure"}, {"oid": "cab6919a46516026c731e56654bdc6f527bb2540", "committedDate": "2020-08-06 17:38:52 -0400", "message": "Switch to adventure-nbt and fix server switching on 1.16.2-pre3"}, {"oid": "46e34ddb7f4230c3212c547d2cc05fd860212f3e", "committedDate": "2020-08-06 20:53:19 -0400", "message": "Allow serializing legacy hover events"}, {"oid": "a6ddc137ee5c9181e8b1c1d68686bfca0b0e9aa5", "committedDate": "2020-08-21 01:05:04 -0400", "message": "Reduce varint reading cost from max(1, 2n) to n+1 operations on ByteBuf"}, {"oid": "c47d25c88a87048d8ac651044f5c93780904e1b2", "committedDate": "2020-08-21 19:09:04 -0400", "message": "Upgrade to Gradle 6.6 and use SpotBugs."}, {"oid": "5d287306c2458ccaad40621e3d7418215b764c62", "committedDate": "2020-09-01 03:25:15 -0400", "message": "Small code cleanups"}, {"oid": "a0a0966f99bff672b9a28d55b464a4ffd5ee4d2e", "committedDate": "2020-09-23 01:02:19 -0400", "message": "Minor code cleanup"}, {"oid": "03e9fa79d6bbf19ca7446c234d78bb4c400d1854", "committedDate": "2021-01-23 12:55:28 -0500", "message": "Raise limit on JoinGame NBT reading to 2MiB."}, {"oid": "4f6d238b39609933a71c622c592f778c4341a754", "committedDate": "2021-01-29 17:56:50 -0500", "message": "Strictly limit the hostname size and limit it to ASCII characters only"}, {"oid": "501853e807a00b15ad9a181dd76a43e4f8cadd1c", "committedDate": "2021-01-29 17:59:00 -0500", "message": "Fix Checkstyle issue for the umpteenth time..."}, {"oid": "4f80d2b261d0a90d9076474e9e5d55f63fd171d9", "committedDate": "2021-01-29 23:08:14 -0500", "message": "Revert strict handshake hostname checks"}, {"oid": "f88283f1271569de4d8256cab25c5b421ef7ad12", "committedDate": "2021-03-30 12:08:08 -0400", "message": "Revert \"Revert strict handshake hostname checks\""}, {"oid": "514115a85cadcb6983c02fe5acc12ceeddcf7d8b", "committedDate": "2021-03-30 12:10:55 -0400", "message": "Do not use an ASCII string for handshake"}, {"oid": "c747120b20be1853ee02e7b2b67871249a88aa6d", "committedDate": "2021-03-31 16:04:06 -0400", "message": "Relicense the Velocity proxy under the terms of GPLv3 (#448)"}, {"oid": "3db2fe8d63162c716b8ac57ae0898027ecd3a7bb", "committedDate": "2021-05-03 17:31:32 -0400", "message": "Optimize varint writing"}, {"oid": "e531cdb373c654748f3c819b80a5286d9d431d21", "committedDate": "2021-05-03 18:07:25 -0400", "message": "Revert \"Optimize varint writing\""}, {"oid": "4ca97a6df9833ff8b402095698fc9746ab86c1b9", "committedDate": "2021-05-03 19:14:48 -0400", "message": "Reapply \"Optimize varint writing\""}, {"oid": "0debb81392a70f33781756198133414eed5ba7f1", "committedDate": "2021-05-03 20:08:16 -0400", "message": "I was nagged to make it more consistent"}, {"oid": "3dc8e25ec7e9c8f3dac71f0c825dc7cd20fc6ee0", "committedDate": "2021-05-04 16:30:32 -0400", "message": "Fix varint writing (for real!)"}, {"oid": "1cef82d54dda8726dcb5708b69fa51b04c215439", "committedDate": "2021-05-05 22:13:54 -0400", "message": "Unroll the VarInt writing loop"}, {"oid": "fb3f21abc6362bbed6e343ef559fb3d5d25342d1", "committedDate": "2021-05-06 00:48:19 -0400", "message": "More bitshifting magic"}, {"oid": "a8e0516d18b996b3a6aea80de97e017daa6e38a1", "committedDate": "2021-05-07 19:36:30 +0300", "message": "Also do not copy memory in case when packet needs to compress"}, {"oid": "150fd9a9cf239b769fe46f607c95a85a6c197377", "committedDate": "2021-05-08 23:26:43 -0400", "message": "Add highly-optimized VarInt writing method"}, {"oid": "5170da8fd7d4287f6e3530a62b2070cd7901c8cc", "committedDate": "2021-05-09 02:57:01 -0400", "message": "Improve writeVarInt inlining by peeling the two most common cases"}, {"oid": "11ed4b46e4b19a22a10063b03b41be0ae7d55a67", "committedDate": "2021-05-09 02:57:52 -0400", "message": "whoops"}, {"oid": "d97ed956a7be1411b192939abcab8412932230b8", "committedDate": "2022-06-07 21:00:24 -0400", "message": "Update/1.19 (#726)"}, {"oid": "1a3fba4250553702d9dcd05731d04347bfc24c9f", "committedDate": "2022-07-30 19:30:03 -0400", "message": "Update to 1.19.1 (#772)"}, {"oid": "47cd9faf65bb021aa4541b45e373a8e40f195d88", "committedDate": "2022-08-19 22:45:58 -0400", "message": "A char can be 3 bytes (#843)"}, {"oid": "d72d707b1c0dd6215a4984956faf4b2ec4bdbd97", "committedDate": "2023-01-01 17:53:37 -0500", "message": "Convert Velocity buildscripts to Kotlin DSL (#918)"}, {"oid": "b0862d2d16c4ba7560d3f24c824d78793ac3d9e0", "committedDate": "2023-01-01 18:46:33 -0500", "message": "Use Spotless for license formatting"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ4MDA1NA==", "url": "https://github.com/PaperMC/Velocity/pull/310#discussion_r429480054", "body": "Could use try-resources here", "bodyText": "Could use try-resources here", "bodyHTML": "<p dir=\"auto\">Could use try-resources here</p>", "author": "mikroskeem", "createdAt": "2020-05-22T22:35:16Z", "path": "proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java", "diffHunk": "@@ -153,6 +160,81 @@ public static void writeUuid(ByteBuf buf, UUID uuid) {\n     buf.writeLong(uuid.getLeastSignificantBits());\n   }\n \n+  /**\n+   * Reads an UUID stored as an Integer Array from the {@code buf}.\n+   * @param buf the buffer to read from\n+   * @return the UUID from the buffer\n+   */\n+  public static UUID readUuidIntArray(ByteBuf buf) {\n+    long msbHigh = (long) buf.readInt() << 32;\n+    long msbLow = (long) buf.readInt() & 0xFFFFFFFFL;\n+    long msb = msbHigh | msbLow;\n+    long lsbHigh = (long) buf.readInt() << 32;\n+    long lsbLow = (long) buf.readInt() & 0xFFFFFFFFL;\n+    long lsb = lsbHigh | lsbLow;\n+    return new UUID(msb, lsb);\n+  }\n+\n+  /**\n+   * Writes an UUID as an Integer Array to the {@code buf}.\n+   * @param buf the buffer to write to\n+   * @param uuid the UUID to write\n+   */\n+  public static void writeUuidIntArray(ByteBuf buf, UUID uuid) {\n+    buf.writeInt((int) (uuid.getMostSignificantBits() >> 32));\n+    buf.writeInt((int) uuid.getMostSignificantBits());\n+    buf.writeInt((int) (uuid.getLeastSignificantBits() >> 32));\n+    buf.writeInt((int) uuid.getLeastSignificantBits());\n+  }\n+\n+  /**\n+   * Reads a {@link net.kyori.nbt.CompoundTag} from the {@code buf}.\n+   * @param buf the buffer to read from\n+   * @return {@link net.kyori.nbt.CompoundTag} the CompoundTag from the buffer\n+   */\n+  public static CompoundTag readCompoundTag(ByteBuf buf) {\n+    int indexBefore = buf.readerIndex();\n+    byte startType = buf.readByte();\n+    if (startType == 0) {\n+      return null;\n+    } else {\n+      buf.readerIndex(indexBefore);\n+      try {\n+        DataInput input = new ByteBufInputStream(buf);", "originalCommit": "d37b6a361cb05f69db2608c29c4608dc6881edc7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTUzMjEyNQ==", "url": "https://github.com/VelocityPowered/Velocity/pull/310#discussion_r429532125", "bodyText": "No, DataInput is not Closeable", "author": "Xernium", "createdAt": "2020-05-23T09:50:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ4MDA1NA=="}], "type": "inlineReview", "revised_code": {"commit": "fca73bae675d396cb584fc48e2c0548cc6595e58", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\nindex c0cbc136..628ec324 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n", "chunk": "@@ -196,22 +198,21 @@ public enum ProtocolUtils {\n     int indexBefore = buf.readerIndex();\n     byte startType = buf.readByte();\n     if (startType == 0) {\n-      return null;\n-    } else {\n-      buf.readerIndex(indexBefore);\n-      try {\n-        DataInput input = new ByteBufInputStream(buf);\n-        byte type = input.readByte();\n-        if (type != 10) {\n-          return null;\n-        }\n-        input.readUTF();\n-        CompoundTag ret = new CompoundTag();\n-        ret.read(input, 0);\n-        return ret;\n-      } catch (IOException e) {\n-        return null;\n+      throw new DecoderException(\"Invalid NBT start-type (end/empty)\");\n+    }\n+    buf.readerIndex(indexBefore);\n+    try {\n+      DataInput input = new ByteBufInputStream(buf);\n+      byte type = input.readByte();\n+      if (type != 10) {\n+        throw new DecoderException(\"NBTTag is not a CompoundTag\");\n       }\n+      input.readUTF(); // Head-padding\n+      CompoundTag compoundTag = new CompoundTag();\n+      compoundTag.read(input, 0);\n+      return compoundTag;\n+    } catch (IOException e) {\n+      throw new DecoderException(\"Unable to decode NBT CompoundTag at \" + indexBefore);\n     }\n   }\n \n", "next_change": {"commit": "101a6a58dd7a1c2af13edd897eade28ac92599ba", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\nindex 628ec324..bb7516aa 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n", "chunk": "@@ -202,17 +204,10 @@ public enum ProtocolUtils {\n     }\n     buf.readerIndex(indexBefore);\n     try {\n-      DataInput input = new ByteBufInputStream(buf);\n-      byte type = input.readByte();\n-      if (type != 10) {\n-        throw new DecoderException(\"NBTTag is not a CompoundTag\");\n-      }\n-      input.readUTF(); // Head-padding\n-      CompoundTag compoundTag = new CompoundTag();\n-      compoundTag.read(input, 0);\n-      return compoundTag;\n-    } catch (IOException e) {\n-      throw new DecoderException(\"Unable to decode NBT CompoundTag at \" + indexBefore);\n+      return TagIO.readDataInput(new ByteBufInputStream(buf));\n+    } catch (IOException thrown) {\n+      throw new DecoderException(\n+              \"Unable to parse NBT CompoundTag, full error: \" + thrown.getMessage());\n     }\n   }\n \n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "0dd6fe1ef2783fe1f9322af06c6fd218aa67cdb1", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\nindex c0cbc136..bb7516aa 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n", "chunk": "@@ -196,22 +200,14 @@ public enum ProtocolUtils {\n     int indexBefore = buf.readerIndex();\n     byte startType = buf.readByte();\n     if (startType == 0) {\n-      return null;\n-    } else {\n-      buf.readerIndex(indexBefore);\n-      try {\n-        DataInput input = new ByteBufInputStream(buf);\n-        byte type = input.readByte();\n-        if (type != 10) {\n-          return null;\n-        }\n-        input.readUTF();\n-        CompoundTag ret = new CompoundTag();\n-        ret.read(input, 0);\n-        return ret;\n-      } catch (IOException e) {\n-        return null;\n-      }\n+      throw new DecoderException(\"Invalid NBT start-type (end/empty)\");\n+    }\n+    buf.readerIndex(indexBefore);\n+    try {\n+      return TagIO.readDataInput(new ByteBufInputStream(buf));\n+    } catch (IOException thrown) {\n+      throw new DecoderException(\n+              \"Unable to parse NBT CompoundTag, full error: \" + thrown.getMessage());\n     }\n   }\n \n", "next_change": {"commit": "5c314c9068814aca404b68cf8442af7201bdcf43", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\nindex bb7516aa..ab6dbc75 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n", "chunk": "@@ -164,102 +160,9 @@ public enum ProtocolUtils {\n     buf.writeLong(uuid.getLeastSignificantBits());\n   }\n \n-  /**\n-   * Reads an UUID stored as an Integer Array from the {@code buf}.\n-   * @param buf the buffer to read from\n-   * @return the UUID from the buffer\n-   */\n-  public static UUID readUuidIntArray(ByteBuf buf) {\n-    long msbHigh = (long) buf.readInt() << 32;\n-    long msbLow = (long) buf.readInt() & 0xFFFFFFFFL;\n-    long msb = msbHigh | msbLow;\n-    long lsbHigh = (long) buf.readInt() << 32;\n-    long lsbLow = (long) buf.readInt() & 0xFFFFFFFFL;\n-    long lsb = lsbHigh | lsbLow;\n-    return new UUID(msb, lsb);\n-  }\n-\n-  /**\n-   * Writes an UUID as an Integer Array to the {@code buf}.\n-   * @param buf the buffer to write to\n-   * @param uuid the UUID to write\n-   */\n-  public static void writeUuidIntArray(ByteBuf buf, UUID uuid) {\n-    buf.writeInt((int) (uuid.getMostSignificantBits() >> 32));\n-    buf.writeInt((int) uuid.getMostSignificantBits());\n-    buf.writeInt((int) (uuid.getLeastSignificantBits() >> 32));\n-    buf.writeInt((int) uuid.getLeastSignificantBits());\n-  }\n-\n-  /**\n-   * Reads a {@link net.kyori.nbt.CompoundTag} from the {@code buf}.\n-   * @param buf the buffer to read from\n-   * @return {@link net.kyori.nbt.CompoundTag} the CompoundTag from the buffer\n-   */\n-  public static CompoundTag readCompoundTag(ByteBuf buf) {\n-    int indexBefore = buf.readerIndex();\n-    byte startType = buf.readByte();\n-    if (startType == 0) {\n-      throw new DecoderException(\"Invalid NBT start-type (end/empty)\");\n-    }\n-    buf.readerIndex(indexBefore);\n-    try {\n-      return TagIO.readDataInput(new ByteBufInputStream(buf));\n-    } catch (IOException thrown) {\n-      throw new DecoderException(\n-              \"Unable to parse NBT CompoundTag, full error: \" + thrown.getMessage());\n-    }\n-  }\n-\n-  /**\n-   * Writes a CompoundTag to the {@code buf}.\n-   * @param buf the buffer to write to\n-   * @param compoundTag the CompoundTag to write\n-   */\n-  public static void writeCompoundTag(ByteBuf buf, CompoundTag compoundTag) {\n-    if (compoundTag == null) {\n-      buf.writeByte(0);\n-      return;\n-    }\n-    try {\n-      TagIO.writeDataOutput(compoundTag, new ByteBufOutputStream(buf));\n-    } catch (IOException e) {\n-      throw new EncoderException(\"Unable to encode NBT CompoundTag\");\n-    }\n-  }\n-\n-  /**\n-   * Reads a String array from the {@code buf}.\n-   * @param buf the buffer to read from\n-   * @return the String array from the buffer\n-   */\n-  public static String[] readStringArray(ByteBuf buf) {\n-    int length = readVarInt(buf);\n-    String[] ret = new String[length];\n-    for (int i = 0; i < length; i++) {\n-      ret[i] = readString(buf);\n-    }\n-    return ret;\n-  }\n-\n-  /**\n-   * Writes a String Array to the {@code buf}.\n-   * @param buf the buffer to write to\n-   * @param stringArray the array to write\n-   */\n-  public static void writeStringArray(ByteBuf buf, String[] stringArray) {\n-    if (stringArray == null) {\n-      writeVarInt(buf, 0);\n-      return;\n-    }\n-    writeVarInt(buf, stringArray.length);\n-    for (int i = 0; i < stringArray.length; i++) {\n-      writeString(buf, stringArray[i]);\n-    }\n-  }\n-\n   /**\n    * Writes a list of {@link com.velocitypowered.api.util.GameProfile.Property} to the buffer.\n+   *\n    * @param buf the buffer to write to\n    * @param properties the properties to serialize\n    */\n", "next_change": {"commit": "592517b9f3b0a042eaa431b77c377096c214f2b0", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\nindex ab6dbc75..55588557 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n", "chunk": "@@ -162,7 +155,6 @@ public enum ProtocolUtils {\n \n   /**\n    * Writes a list of {@link com.velocitypowered.api.util.GameProfile.Property} to the buffer.\n-   *\n    * @param buf the buffer to write to\n    * @param properties the properties to serialize\n    */\n", "next_change": {"commit": "cd9bb61f208e3b27da9fbdcb4bf6cafc9135be65", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\nindex 55588557..bb7516aa 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n", "chunk": "@@ -153,6 +164,100 @@ public enum ProtocolUtils {\n     buf.writeLong(uuid.getLeastSignificantBits());\n   }\n \n+  /**\n+   * Reads an UUID stored as an Integer Array from the {@code buf}.\n+   * @param buf the buffer to read from\n+   * @return the UUID from the buffer\n+   */\n+  public static UUID readUuidIntArray(ByteBuf buf) {\n+    long msbHigh = (long) buf.readInt() << 32;\n+    long msbLow = (long) buf.readInt() & 0xFFFFFFFFL;\n+    long msb = msbHigh | msbLow;\n+    long lsbHigh = (long) buf.readInt() << 32;\n+    long lsbLow = (long) buf.readInt() & 0xFFFFFFFFL;\n+    long lsb = lsbHigh | lsbLow;\n+    return new UUID(msb, lsb);\n+  }\n+\n+  /**\n+   * Writes an UUID as an Integer Array to the {@code buf}.\n+   * @param buf the buffer to write to\n+   * @param uuid the UUID to write\n+   */\n+  public static void writeUuidIntArray(ByteBuf buf, UUID uuid) {\n+    buf.writeInt((int) (uuid.getMostSignificantBits() >> 32));\n+    buf.writeInt((int) uuid.getMostSignificantBits());\n+    buf.writeInt((int) (uuid.getLeastSignificantBits() >> 32));\n+    buf.writeInt((int) uuid.getLeastSignificantBits());\n+  }\n+\n+  /**\n+   * Reads a {@link net.kyori.nbt.CompoundTag} from the {@code buf}.\n+   * @param buf the buffer to read from\n+   * @return {@link net.kyori.nbt.CompoundTag} the CompoundTag from the buffer\n+   */\n+  public static CompoundTag readCompoundTag(ByteBuf buf) {\n+    int indexBefore = buf.readerIndex();\n+    byte startType = buf.readByte();\n+    if (startType == 0) {\n+      throw new DecoderException(\"Invalid NBT start-type (end/empty)\");\n+    }\n+    buf.readerIndex(indexBefore);\n+    try {\n+      return TagIO.readDataInput(new ByteBufInputStream(buf));\n+    } catch (IOException thrown) {\n+      throw new DecoderException(\n+              \"Unable to parse NBT CompoundTag, full error: \" + thrown.getMessage());\n+    }\n+  }\n+\n+  /**\n+   * Writes a CompoundTag to the {@code buf}.\n+   * @param buf the buffer to write to\n+   * @param compoundTag the CompoundTag to write\n+   */\n+  public static void writeCompoundTag(ByteBuf buf, CompoundTag compoundTag) {\n+    if (compoundTag == null) {\n+      buf.writeByte(0);\n+      return;\n+    }\n+    try {\n+      TagIO.writeDataOutput(compoundTag, new ByteBufOutputStream(buf));\n+    } catch (IOException e) {\n+      throw new EncoderException(\"Unable to encode NBT CompoundTag\");\n+    }\n+  }\n+\n+  /**\n+   * Reads a String array from the {@code buf}.\n+   * @param buf the buffer to read from\n+   * @return the String array from the buffer\n+   */\n+  public static String[] readStringArray(ByteBuf buf) {\n+    int length = readVarInt(buf);\n+    String[] ret = new String[length];\n+    for (int i = 0; i < length; i++) {\n+      ret[i] = readString(buf);\n+    }\n+    return ret;\n+  }\n+\n+  /**\n+   * Writes a String Array to the {@code buf}.\n+   * @param buf the buffer to write to\n+   * @param stringArray the array to write\n+   */\n+  public static void writeStringArray(ByteBuf buf, String[] stringArray) {\n+    if (stringArray == null) {\n+      writeVarInt(buf, 0);\n+      return;\n+    }\n+    writeVarInt(buf, stringArray.length);\n+    for (int i = 0; i < stringArray.length; i++) {\n+      writeString(buf, stringArray[i]);\n+    }\n+  }\n+\n   /**\n    * Writes a list of {@link com.velocitypowered.api.util.GameProfile.Property} to the buffer.\n    * @param buf the buffer to write to\n", "next_change": {"commit": "5d287306c2458ccaad40621e3d7418215b764c62", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\nindex bb7516aa..2fa1e759 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n", "chunk": "@@ -253,8 +276,8 @@ public enum ProtocolUtils {\n       return;\n     }\n     writeVarInt(buf, stringArray.length);\n-    for (int i = 0; i < stringArray.length; i++) {\n-      writeString(buf, stringArray[i]);\n+    for (String s : stringArray) {\n+      writeString(buf, s);\n     }\n   }\n \n", "next_change": {"commit": "a0a0966f99bff672b9a28d55b464a4ffd5ee4d2e", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\nindex 2fa1e759..a7e0bd43 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n", "chunk": "@@ -271,10 +271,6 @@ public enum ProtocolUtils {\n    * @param stringArray the array to write\n    */\n   public static void writeStringArray(ByteBuf buf, String[] stringArray) {\n-    if (stringArray == null) {\n-      writeVarInt(buf, 0);\n-      return;\n-    }\n     writeVarInt(buf, stringArray.length);\n     for (String s : stringArray) {\n       writeString(buf, s);\n", "next_change": {"commit": "d72d707b1c0dd6215a4984956faf4b2ec4bdbd97", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\nindex a7e0bd43..f18d9c70 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n", "chunk": "@@ -267,7 +357,8 @@ public enum ProtocolUtils {\n \n   /**\n    * Writes a String Array to the {@code buf}.\n-   * @param buf the buffer to write to\n+   *\n+   * @param buf         the buffer to write to\n    * @param stringArray the array to write\n    */\n   public static void writeStringArray(ByteBuf buf, String[] stringArray) {\n", "next_change": null}, {"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\nindex a7e0bd43..f18d9c70 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n", "chunk": "@@ -279,7 +370,8 @@ public enum ProtocolUtils {\n \n   /**\n    * Writes a list of {@link com.velocitypowered.api.util.GameProfile.Property} to the buffer.\n-   * @param buf the buffer to write to\n+   *\n+   * @param buf        the buffer to write to\n    * @param properties the properties to serialize\n    */\n   public static void writeProperties(ByteBuf buf, List<GameProfile.Property> properties) {\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "0dd6fe1ef2783fe1f9322af06c6fd218aa67cdb1", "message": "Merge commit", "committedDate": null}, {"oid": "5c314c9068814aca404b68cf8442af7201bdcf43", "committedDate": "2019-07-01 08:56:22 +0200", "message": "Add 1.7 Protocol Support"}, {"oid": "d0ad0fac360031348e83dee418418c22c5ebf4e4", "committedDate": "2019-07-05 10:59:29 +0200", "message": "Merge branch 'dev/1.1.0' of github.com:VelocityPowered/Velocity"}, {"oid": "592517b9f3b0a042eaa431b77c377096c214f2b0", "committedDate": "2019-08-29 19:58:00 +0200", "message": "Remove unnessecary diff"}, {"oid": "d7bbe7531a89100e10e5a082b6cdc445df9edd72", "committedDate": "2020-05-25 15:58:52 -0400", "message": "Additional protocol hardening."}, {"oid": "ebad3d1005bfba1dc0e9262ddd1fb79a095a03c9", "committedDate": "2020-05-25 16:05:36 -0400", "message": "Use Integer.MIN_VALUE for the sentinel for readVarIntSafely()"}, {"oid": "eeb660ce007ee116264656b7fd8dedcbc84a97b3", "committedDate": "2020-05-26 05:25:03 -0400", "message": "Fix bad ordering"}, {"oid": "cd9bb61f208e3b27da9fbdcb4bf6cafc9135be65", "committedDate": "2020-06-20 23:11:19 -0400", "message": "Merge branch 'future/1.16' of https://github.com/Xernium/Velocity into Xernium-future/1.16"}, {"oid": "ada35ff28698c9cccea50236eda6ec4c291ca13a", "committedDate": "2020-06-20 23:24:32 -0400", "message": "Merge branch 'Xernium-future/1.16' into future/1.16-velocity-1.1.0"}, {"oid": "c2edd82b16660ab75210fb5caabf09d56bd73b28", "committedDate": "2020-06-28 23:13:57 -0400", "message": "Use more idiomatic adventure text serializer"}, {"oid": "72ce5c86ba81942e46baf891295ef9ffa264a780", "committedDate": "2020-07-16 11:44:55 -0400", "message": "Improve Velocity networking pipeline when under stress"}, {"oid": "f9f60e1489ecad64ba657dbe5f8d38e8f004800f", "committedDate": "2020-07-19 18:23:47 -0400", "message": "Small code cleanups and switch more stuff to adventure"}, {"oid": "cab6919a46516026c731e56654bdc6f527bb2540", "committedDate": "2020-08-06 17:38:52 -0400", "message": "Switch to adventure-nbt and fix server switching on 1.16.2-pre3"}, {"oid": "46e34ddb7f4230c3212c547d2cc05fd860212f3e", "committedDate": "2020-08-06 20:53:19 -0400", "message": "Allow serializing legacy hover events"}, {"oid": "a6ddc137ee5c9181e8b1c1d68686bfca0b0e9aa5", "committedDate": "2020-08-21 01:05:04 -0400", "message": "Reduce varint reading cost from max(1, 2n) to n+1 operations on ByteBuf"}, {"oid": "c47d25c88a87048d8ac651044f5c93780904e1b2", "committedDate": "2020-08-21 19:09:04 -0400", "message": "Upgrade to Gradle 6.6 and use SpotBugs."}, {"oid": "5d287306c2458ccaad40621e3d7418215b764c62", "committedDate": "2020-09-01 03:25:15 -0400", "message": "Small code cleanups"}, {"oid": "a0a0966f99bff672b9a28d55b464a4ffd5ee4d2e", "committedDate": "2020-09-23 01:02:19 -0400", "message": "Minor code cleanup"}, {"oid": "03e9fa79d6bbf19ca7446c234d78bb4c400d1854", "committedDate": "2021-01-23 12:55:28 -0500", "message": "Raise limit on JoinGame NBT reading to 2MiB."}, {"oid": "4f6d238b39609933a71c622c592f778c4341a754", "committedDate": "2021-01-29 17:56:50 -0500", "message": "Strictly limit the hostname size and limit it to ASCII characters only"}, {"oid": "501853e807a00b15ad9a181dd76a43e4f8cadd1c", "committedDate": "2021-01-29 17:59:00 -0500", "message": "Fix Checkstyle issue for the umpteenth time..."}, {"oid": "4f80d2b261d0a90d9076474e9e5d55f63fd171d9", "committedDate": "2021-01-29 23:08:14 -0500", "message": "Revert strict handshake hostname checks"}, {"oid": "f88283f1271569de4d8256cab25c5b421ef7ad12", "committedDate": "2021-03-30 12:08:08 -0400", "message": "Revert \"Revert strict handshake hostname checks\""}, {"oid": "514115a85cadcb6983c02fe5acc12ceeddcf7d8b", "committedDate": "2021-03-30 12:10:55 -0400", "message": "Do not use an ASCII string for handshake"}, {"oid": "c747120b20be1853ee02e7b2b67871249a88aa6d", "committedDate": "2021-03-31 16:04:06 -0400", "message": "Relicense the Velocity proxy under the terms of GPLv3 (#448)"}, {"oid": "3db2fe8d63162c716b8ac57ae0898027ecd3a7bb", "committedDate": "2021-05-03 17:31:32 -0400", "message": "Optimize varint writing"}, {"oid": "e531cdb373c654748f3c819b80a5286d9d431d21", "committedDate": "2021-05-03 18:07:25 -0400", "message": "Revert \"Optimize varint writing\""}, {"oid": "4ca97a6df9833ff8b402095698fc9746ab86c1b9", "committedDate": "2021-05-03 19:14:48 -0400", "message": "Reapply \"Optimize varint writing\""}, {"oid": "0debb81392a70f33781756198133414eed5ba7f1", "committedDate": "2021-05-03 20:08:16 -0400", "message": "I was nagged to make it more consistent"}, {"oid": "3dc8e25ec7e9c8f3dac71f0c825dc7cd20fc6ee0", "committedDate": "2021-05-04 16:30:32 -0400", "message": "Fix varint writing (for real!)"}, {"oid": "1cef82d54dda8726dcb5708b69fa51b04c215439", "committedDate": "2021-05-05 22:13:54 -0400", "message": "Unroll the VarInt writing loop"}, {"oid": "fb3f21abc6362bbed6e343ef559fb3d5d25342d1", "committedDate": "2021-05-06 00:48:19 -0400", "message": "More bitshifting magic"}, {"oid": "a8e0516d18b996b3a6aea80de97e017daa6e38a1", "committedDate": "2021-05-07 19:36:30 +0300", "message": "Also do not copy memory in case when packet needs to compress"}, {"oid": "150fd9a9cf239b769fe46f607c95a85a6c197377", "committedDate": "2021-05-08 23:26:43 -0400", "message": "Add highly-optimized VarInt writing method"}, {"oid": "5170da8fd7d4287f6e3530a62b2070cd7901c8cc", "committedDate": "2021-05-09 02:57:01 -0400", "message": "Improve writeVarInt inlining by peeling the two most common cases"}, {"oid": "11ed4b46e4b19a22a10063b03b41be0ae7d55a67", "committedDate": "2021-05-09 02:57:52 -0400", "message": "whoops"}, {"oid": "d97ed956a7be1411b192939abcab8412932230b8", "committedDate": "2022-06-07 21:00:24 -0400", "message": "Update/1.19 (#726)"}, {"oid": "1a3fba4250553702d9dcd05731d04347bfc24c9f", "committedDate": "2022-07-30 19:30:03 -0400", "message": "Update to 1.19.1 (#772)"}, {"oid": "47cd9faf65bb021aa4541b45e373a8e40f195d88", "committedDate": "2022-08-19 22:45:58 -0400", "message": "A char can be 3 bytes (#843)"}, {"oid": "d72d707b1c0dd6215a4984956faf4b2ec4bdbd97", "committedDate": "2023-01-01 17:53:37 -0500", "message": "Convert Velocity buildscripts to Kotlin DSL (#918)"}, {"oid": "b0862d2d16c4ba7560d3f24c824d78793ac3d9e0", "committedDate": "2023-01-01 18:46:33 -0500", "message": "Use Spotless for license formatting"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ4MDEwNw==", "url": "https://github.com/PaperMC/Velocity/pull/310#discussion_r429480107", "body": "See comments for `readCompoundTag`", "bodyText": "See comments for readCompoundTag", "bodyHTML": "<p dir=\"auto\">See comments for <code>readCompoundTag</code></p>", "author": "mikroskeem", "createdAt": "2020-05-22T22:35:30Z", "path": "proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java", "diffHunk": "@@ -153,6 +160,81 @@ public static void writeUuid(ByteBuf buf, UUID uuid) {\n     buf.writeLong(uuid.getLeastSignificantBits());\n   }\n \n+  /**\n+   * Reads an UUID stored as an Integer Array from the {@code buf}.\n+   * @param buf the buffer to read from\n+   * @return the UUID from the buffer\n+   */\n+  public static UUID readUuidIntArray(ByteBuf buf) {\n+    long msbHigh = (long) buf.readInt() << 32;\n+    long msbLow = (long) buf.readInt() & 0xFFFFFFFFL;\n+    long msb = msbHigh | msbLow;\n+    long lsbHigh = (long) buf.readInt() << 32;\n+    long lsbLow = (long) buf.readInt() & 0xFFFFFFFFL;\n+    long lsb = lsbHigh | lsbLow;\n+    return new UUID(msb, lsb);\n+  }\n+\n+  /**\n+   * Writes an UUID as an Integer Array to the {@code buf}.\n+   * @param buf the buffer to write to\n+   * @param uuid the UUID to write\n+   */\n+  public static void writeUuidIntArray(ByteBuf buf, UUID uuid) {\n+    buf.writeInt((int) (uuid.getMostSignificantBits() >> 32));\n+    buf.writeInt((int) uuid.getMostSignificantBits());\n+    buf.writeInt((int) (uuid.getLeastSignificantBits() >> 32));\n+    buf.writeInt((int) uuid.getLeastSignificantBits());\n+  }\n+\n+  /**\n+   * Reads a {@link net.kyori.nbt.CompoundTag} from the {@code buf}.\n+   * @param buf the buffer to read from\n+   * @return {@link net.kyori.nbt.CompoundTag} the CompoundTag from the buffer\n+   */\n+  public static CompoundTag readCompoundTag(ByteBuf buf) {\n+    int indexBefore = buf.readerIndex();\n+    byte startType = buf.readByte();\n+    if (startType == 0) {\n+      return null;\n+    } else {\n+      buf.readerIndex(indexBefore);\n+      try {\n+        DataInput input = new ByteBufInputStream(buf);\n+        byte type = input.readByte();\n+        if (type != 10) {\n+          return null;\n+        }\n+        input.readUTF();\n+        CompoundTag ret = new CompoundTag();\n+        ret.read(input, 0);\n+        return ret;\n+      } catch (IOException e) {\n+        return null;\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Writes a CompoundTag to the {@code buf}.\n+   * @param buf the buffer to write to\n+   * @param compoundTag the CompoundTag to write\n+   */\n+  public static void writeCompoundTag(ByteBuf buf, CompoundTag compoundTag) {\n+    if (compoundTag == null) {\n+      buf.writeByte(0);\n+    } else {", "originalCommit": "d37b6a361cb05f69db2608c29c4608dc6881edc7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fca73bae675d396cb584fc48e2c0548cc6595e58", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\nindex c0cbc136..628ec324 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n", "chunk": "@@ -223,15 +224,15 @@ public enum ProtocolUtils {\n   public static void writeCompoundTag(ByteBuf buf, CompoundTag compoundTag) {\n     if (compoundTag == null) {\n       buf.writeByte(0);\n-    } else {\n-      try {\n-        DataOutput output = new ByteBufOutputStream(buf);\n-        output.writeByte(10);\n-        output.writeUTF(\"\");\n-        compoundTag.write(output);\n-      } catch (IOException e) {\n-        e.printStackTrace();\n-      }\n+      return;\n+    }\n+    try {\n+      DataOutput output = new ByteBufOutputStream(buf);\n+      output.writeByte(10); // Type 10 - CompoundTag\n+      output.writeUTF(\"\"); // Head-padding\n+      compoundTag.write(output);\n+    } catch (IOException e) {\n+      throw new EncoderException(\"Unable to encode NBT CompoundTag\");\n     }\n   }\n \n", "next_change": {"commit": "18e595397660ea6651bb4c86e1bb3a6addf1dd24", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\nindex 628ec324..e2b55c54 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n", "chunk": "@@ -236,6 +237,36 @@ public enum ProtocolUtils {\n     }\n   }\n \n+  /**\n+   * Reads a String array from the {@code buf}.\n+   * @param buf the buffer to read from\n+   * @return the String array from the buffer\n+   */\n+  public static String[] readStringArray(ByteBuf buf) {\n+    int length = readVarInt(buf);\n+    String[] ret = new String[length];\n+    for(int i = 0; i < length; i++) {\n+      ret[i] = readString(buf);\n+    }\n+    return ret;\n+  }\n+\n+  /**\n+   * Writes a String Array to the {@code buf}.\n+   * @param buf the buffer to write to\n+   * @param stringArray the array to write\n+   */\n+  public static void writeStringArray(ByteBuf buf, String[] stringArray) {\n+    if (stringArray == null) {\n+      writeVarInt(buf, 0);\n+      return;\n+    }\n+    writeVarInt(buf, stringArray.length);\n+    for(int i = 0; i < stringArray.length; i++) {\n+      writeString(buf, stringArray[i]);\n+    }\n+  }\n+\n   /**\n    * Writes a list of {@link com.velocitypowered.api.util.GameProfile.Property} to the buffer.\n    * @param buf the buffer to write to\n", "next_change": {"commit": "6734ef3a087ed3f068ee9ce809d93ce31ce844bc", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\nindex e2b55c54..a272c802 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n", "chunk": "@@ -262,7 +262,7 @@ public enum ProtocolUtils {\n       return;\n     }\n     writeVarInt(buf, stringArray.length);\n-    for(int i = 0; i < stringArray.length; i++) {\n+    for (int i = 0; i < stringArray.length; i++) {\n       writeString(buf, stringArray[i]);\n     }\n   }\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "0dd6fe1ef2783fe1f9322af06c6fd218aa67cdb1", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\nindex c0cbc136..bb7516aa 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n", "chunk": "@@ -223,15 +219,42 @@ public enum ProtocolUtils {\n   public static void writeCompoundTag(ByteBuf buf, CompoundTag compoundTag) {\n     if (compoundTag == null) {\n       buf.writeByte(0);\n-    } else {\n-      try {\n-        DataOutput output = new ByteBufOutputStream(buf);\n-        output.writeByte(10);\n-        output.writeUTF(\"\");\n-        compoundTag.write(output);\n-      } catch (IOException e) {\n-        e.printStackTrace();\n-      }\n+      return;\n+    }\n+    try {\n+      TagIO.writeDataOutput(compoundTag, new ByteBufOutputStream(buf));\n+    } catch (IOException e) {\n+      throw new EncoderException(\"Unable to encode NBT CompoundTag\");\n+    }\n+  }\n+\n+  /**\n+   * Reads a String array from the {@code buf}.\n+   * @param buf the buffer to read from\n+   * @return the String array from the buffer\n+   */\n+  public static String[] readStringArray(ByteBuf buf) {\n+    int length = readVarInt(buf);\n+    String[] ret = new String[length];\n+    for (int i = 0; i < length; i++) {\n+      ret[i] = readString(buf);\n+    }\n+    return ret;\n+  }\n+\n+  /**\n+   * Writes a String Array to the {@code buf}.\n+   * @param buf the buffer to write to\n+   * @param stringArray the array to write\n+   */\n+  public static void writeStringArray(ByteBuf buf, String[] stringArray) {\n+    if (stringArray == null) {\n+      writeVarInt(buf, 0);\n+      return;\n+    }\n+    writeVarInt(buf, stringArray.length);\n+    for (int i = 0; i < stringArray.length; i++) {\n+      writeString(buf, stringArray[i]);\n     }\n   }\n \n", "next_change": {"commit": "5c314c9068814aca404b68cf8442af7201bdcf43", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\nindex bb7516aa..ab6dbc75 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n", "chunk": "@@ -164,102 +160,9 @@ public enum ProtocolUtils {\n     buf.writeLong(uuid.getLeastSignificantBits());\n   }\n \n-  /**\n-   * Reads an UUID stored as an Integer Array from the {@code buf}.\n-   * @param buf the buffer to read from\n-   * @return the UUID from the buffer\n-   */\n-  public static UUID readUuidIntArray(ByteBuf buf) {\n-    long msbHigh = (long) buf.readInt() << 32;\n-    long msbLow = (long) buf.readInt() & 0xFFFFFFFFL;\n-    long msb = msbHigh | msbLow;\n-    long lsbHigh = (long) buf.readInt() << 32;\n-    long lsbLow = (long) buf.readInt() & 0xFFFFFFFFL;\n-    long lsb = lsbHigh | lsbLow;\n-    return new UUID(msb, lsb);\n-  }\n-\n-  /**\n-   * Writes an UUID as an Integer Array to the {@code buf}.\n-   * @param buf the buffer to write to\n-   * @param uuid the UUID to write\n-   */\n-  public static void writeUuidIntArray(ByteBuf buf, UUID uuid) {\n-    buf.writeInt((int) (uuid.getMostSignificantBits() >> 32));\n-    buf.writeInt((int) uuid.getMostSignificantBits());\n-    buf.writeInt((int) (uuid.getLeastSignificantBits() >> 32));\n-    buf.writeInt((int) uuid.getLeastSignificantBits());\n-  }\n-\n-  /**\n-   * Reads a {@link net.kyori.nbt.CompoundTag} from the {@code buf}.\n-   * @param buf the buffer to read from\n-   * @return {@link net.kyori.nbt.CompoundTag} the CompoundTag from the buffer\n-   */\n-  public static CompoundTag readCompoundTag(ByteBuf buf) {\n-    int indexBefore = buf.readerIndex();\n-    byte startType = buf.readByte();\n-    if (startType == 0) {\n-      throw new DecoderException(\"Invalid NBT start-type (end/empty)\");\n-    }\n-    buf.readerIndex(indexBefore);\n-    try {\n-      return TagIO.readDataInput(new ByteBufInputStream(buf));\n-    } catch (IOException thrown) {\n-      throw new DecoderException(\n-              \"Unable to parse NBT CompoundTag, full error: \" + thrown.getMessage());\n-    }\n-  }\n-\n-  /**\n-   * Writes a CompoundTag to the {@code buf}.\n-   * @param buf the buffer to write to\n-   * @param compoundTag the CompoundTag to write\n-   */\n-  public static void writeCompoundTag(ByteBuf buf, CompoundTag compoundTag) {\n-    if (compoundTag == null) {\n-      buf.writeByte(0);\n-      return;\n-    }\n-    try {\n-      TagIO.writeDataOutput(compoundTag, new ByteBufOutputStream(buf));\n-    } catch (IOException e) {\n-      throw new EncoderException(\"Unable to encode NBT CompoundTag\");\n-    }\n-  }\n-\n-  /**\n-   * Reads a String array from the {@code buf}.\n-   * @param buf the buffer to read from\n-   * @return the String array from the buffer\n-   */\n-  public static String[] readStringArray(ByteBuf buf) {\n-    int length = readVarInt(buf);\n-    String[] ret = new String[length];\n-    for (int i = 0; i < length; i++) {\n-      ret[i] = readString(buf);\n-    }\n-    return ret;\n-  }\n-\n-  /**\n-   * Writes a String Array to the {@code buf}.\n-   * @param buf the buffer to write to\n-   * @param stringArray the array to write\n-   */\n-  public static void writeStringArray(ByteBuf buf, String[] stringArray) {\n-    if (stringArray == null) {\n-      writeVarInt(buf, 0);\n-      return;\n-    }\n-    writeVarInt(buf, stringArray.length);\n-    for (int i = 0; i < stringArray.length; i++) {\n-      writeString(buf, stringArray[i]);\n-    }\n-  }\n-\n   /**\n    * Writes a list of {@link com.velocitypowered.api.util.GameProfile.Property} to the buffer.\n+   *\n    * @param buf the buffer to write to\n    * @param properties the properties to serialize\n    */\n", "next_change": {"commit": "592517b9f3b0a042eaa431b77c377096c214f2b0", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\nindex ab6dbc75..55588557 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n", "chunk": "@@ -162,7 +155,6 @@ public enum ProtocolUtils {\n \n   /**\n    * Writes a list of {@link com.velocitypowered.api.util.GameProfile.Property} to the buffer.\n-   *\n    * @param buf the buffer to write to\n    * @param properties the properties to serialize\n    */\n", "next_change": {"commit": "cd9bb61f208e3b27da9fbdcb4bf6cafc9135be65", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\nindex 55588557..bb7516aa 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n", "chunk": "@@ -153,6 +164,100 @@ public enum ProtocolUtils {\n     buf.writeLong(uuid.getLeastSignificantBits());\n   }\n \n+  /**\n+   * Reads an UUID stored as an Integer Array from the {@code buf}.\n+   * @param buf the buffer to read from\n+   * @return the UUID from the buffer\n+   */\n+  public static UUID readUuidIntArray(ByteBuf buf) {\n+    long msbHigh = (long) buf.readInt() << 32;\n+    long msbLow = (long) buf.readInt() & 0xFFFFFFFFL;\n+    long msb = msbHigh | msbLow;\n+    long lsbHigh = (long) buf.readInt() << 32;\n+    long lsbLow = (long) buf.readInt() & 0xFFFFFFFFL;\n+    long lsb = lsbHigh | lsbLow;\n+    return new UUID(msb, lsb);\n+  }\n+\n+  /**\n+   * Writes an UUID as an Integer Array to the {@code buf}.\n+   * @param buf the buffer to write to\n+   * @param uuid the UUID to write\n+   */\n+  public static void writeUuidIntArray(ByteBuf buf, UUID uuid) {\n+    buf.writeInt((int) (uuid.getMostSignificantBits() >> 32));\n+    buf.writeInt((int) uuid.getMostSignificantBits());\n+    buf.writeInt((int) (uuid.getLeastSignificantBits() >> 32));\n+    buf.writeInt((int) uuid.getLeastSignificantBits());\n+  }\n+\n+  /**\n+   * Reads a {@link net.kyori.nbt.CompoundTag} from the {@code buf}.\n+   * @param buf the buffer to read from\n+   * @return {@link net.kyori.nbt.CompoundTag} the CompoundTag from the buffer\n+   */\n+  public static CompoundTag readCompoundTag(ByteBuf buf) {\n+    int indexBefore = buf.readerIndex();\n+    byte startType = buf.readByte();\n+    if (startType == 0) {\n+      throw new DecoderException(\"Invalid NBT start-type (end/empty)\");\n+    }\n+    buf.readerIndex(indexBefore);\n+    try {\n+      return TagIO.readDataInput(new ByteBufInputStream(buf));\n+    } catch (IOException thrown) {\n+      throw new DecoderException(\n+              \"Unable to parse NBT CompoundTag, full error: \" + thrown.getMessage());\n+    }\n+  }\n+\n+  /**\n+   * Writes a CompoundTag to the {@code buf}.\n+   * @param buf the buffer to write to\n+   * @param compoundTag the CompoundTag to write\n+   */\n+  public static void writeCompoundTag(ByteBuf buf, CompoundTag compoundTag) {\n+    if (compoundTag == null) {\n+      buf.writeByte(0);\n+      return;\n+    }\n+    try {\n+      TagIO.writeDataOutput(compoundTag, new ByteBufOutputStream(buf));\n+    } catch (IOException e) {\n+      throw new EncoderException(\"Unable to encode NBT CompoundTag\");\n+    }\n+  }\n+\n+  /**\n+   * Reads a String array from the {@code buf}.\n+   * @param buf the buffer to read from\n+   * @return the String array from the buffer\n+   */\n+  public static String[] readStringArray(ByteBuf buf) {\n+    int length = readVarInt(buf);\n+    String[] ret = new String[length];\n+    for (int i = 0; i < length; i++) {\n+      ret[i] = readString(buf);\n+    }\n+    return ret;\n+  }\n+\n+  /**\n+   * Writes a String Array to the {@code buf}.\n+   * @param buf the buffer to write to\n+   * @param stringArray the array to write\n+   */\n+  public static void writeStringArray(ByteBuf buf, String[] stringArray) {\n+    if (stringArray == null) {\n+      writeVarInt(buf, 0);\n+      return;\n+    }\n+    writeVarInt(buf, stringArray.length);\n+    for (int i = 0; i < stringArray.length; i++) {\n+      writeString(buf, stringArray[i]);\n+    }\n+  }\n+\n   /**\n    * Writes a list of {@link com.velocitypowered.api.util.GameProfile.Property} to the buffer.\n    * @param buf the buffer to write to\n", "next_change": {"commit": "5d287306c2458ccaad40621e3d7418215b764c62", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\nindex bb7516aa..2fa1e759 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n", "chunk": "@@ -253,8 +276,8 @@ public enum ProtocolUtils {\n       return;\n     }\n     writeVarInt(buf, stringArray.length);\n-    for (int i = 0; i < stringArray.length; i++) {\n-      writeString(buf, stringArray[i]);\n+    for (String s : stringArray) {\n+      writeString(buf, s);\n     }\n   }\n \n", "next_change": {"commit": "a0a0966f99bff672b9a28d55b464a4ffd5ee4d2e", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\nindex 2fa1e759..a7e0bd43 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n", "chunk": "@@ -271,10 +271,6 @@ public enum ProtocolUtils {\n    * @param stringArray the array to write\n    */\n   public static void writeStringArray(ByteBuf buf, String[] stringArray) {\n-    if (stringArray == null) {\n-      writeVarInt(buf, 0);\n-      return;\n-    }\n     writeVarInt(buf, stringArray.length);\n     for (String s : stringArray) {\n       writeString(buf, s);\n", "next_change": {"commit": "d72d707b1c0dd6215a4984956faf4b2ec4bdbd97", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\nindex a7e0bd43..f18d9c70 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n", "chunk": "@@ -267,7 +357,8 @@ public enum ProtocolUtils {\n \n   /**\n    * Writes a String Array to the {@code buf}.\n-   * @param buf the buffer to write to\n+   *\n+   * @param buf         the buffer to write to\n    * @param stringArray the array to write\n    */\n   public static void writeStringArray(ByteBuf buf, String[] stringArray) {\n", "next_change": null}, {"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\nindex a7e0bd43..f18d9c70 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n", "chunk": "@@ -279,7 +370,8 @@ public enum ProtocolUtils {\n \n   /**\n    * Writes a list of {@link com.velocitypowered.api.util.GameProfile.Property} to the buffer.\n-   * @param buf the buffer to write to\n+   *\n+   * @param buf        the buffer to write to\n    * @param properties the properties to serialize\n    */\n   public static void writeProperties(ByteBuf buf, List<GameProfile.Property> properties) {\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "0dd6fe1ef2783fe1f9322af06c6fd218aa67cdb1", "message": "Merge commit", "committedDate": null}, {"oid": "5c314c9068814aca404b68cf8442af7201bdcf43", "committedDate": "2019-07-01 08:56:22 +0200", "message": "Add 1.7 Protocol Support"}, {"oid": "d0ad0fac360031348e83dee418418c22c5ebf4e4", "committedDate": "2019-07-05 10:59:29 +0200", "message": "Merge branch 'dev/1.1.0' of github.com:VelocityPowered/Velocity"}, {"oid": "592517b9f3b0a042eaa431b77c377096c214f2b0", "committedDate": "2019-08-29 19:58:00 +0200", "message": "Remove unnessecary diff"}, {"oid": "d7bbe7531a89100e10e5a082b6cdc445df9edd72", "committedDate": "2020-05-25 15:58:52 -0400", "message": "Additional protocol hardening."}, {"oid": "ebad3d1005bfba1dc0e9262ddd1fb79a095a03c9", "committedDate": "2020-05-25 16:05:36 -0400", "message": "Use Integer.MIN_VALUE for the sentinel for readVarIntSafely()"}, {"oid": "eeb660ce007ee116264656b7fd8dedcbc84a97b3", "committedDate": "2020-05-26 05:25:03 -0400", "message": "Fix bad ordering"}, {"oid": "cd9bb61f208e3b27da9fbdcb4bf6cafc9135be65", "committedDate": "2020-06-20 23:11:19 -0400", "message": "Merge branch 'future/1.16' of https://github.com/Xernium/Velocity into Xernium-future/1.16"}, {"oid": "ada35ff28698c9cccea50236eda6ec4c291ca13a", "committedDate": "2020-06-20 23:24:32 -0400", "message": "Merge branch 'Xernium-future/1.16' into future/1.16-velocity-1.1.0"}, {"oid": "c2edd82b16660ab75210fb5caabf09d56bd73b28", "committedDate": "2020-06-28 23:13:57 -0400", "message": "Use more idiomatic adventure text serializer"}, {"oid": "72ce5c86ba81942e46baf891295ef9ffa264a780", "committedDate": "2020-07-16 11:44:55 -0400", "message": "Improve Velocity networking pipeline when under stress"}, {"oid": "f9f60e1489ecad64ba657dbe5f8d38e8f004800f", "committedDate": "2020-07-19 18:23:47 -0400", "message": "Small code cleanups and switch more stuff to adventure"}, {"oid": "cab6919a46516026c731e56654bdc6f527bb2540", "committedDate": "2020-08-06 17:38:52 -0400", "message": "Switch to adventure-nbt and fix server switching on 1.16.2-pre3"}, {"oid": "46e34ddb7f4230c3212c547d2cc05fd860212f3e", "committedDate": "2020-08-06 20:53:19 -0400", "message": "Allow serializing legacy hover events"}, {"oid": "a6ddc137ee5c9181e8b1c1d68686bfca0b0e9aa5", "committedDate": "2020-08-21 01:05:04 -0400", "message": "Reduce varint reading cost from max(1, 2n) to n+1 operations on ByteBuf"}, {"oid": "c47d25c88a87048d8ac651044f5c93780904e1b2", "committedDate": "2020-08-21 19:09:04 -0400", "message": "Upgrade to Gradle 6.6 and use SpotBugs."}, {"oid": "5d287306c2458ccaad40621e3d7418215b764c62", "committedDate": "2020-09-01 03:25:15 -0400", "message": "Small code cleanups"}, {"oid": "a0a0966f99bff672b9a28d55b464a4ffd5ee4d2e", "committedDate": "2020-09-23 01:02:19 -0400", "message": "Minor code cleanup"}, {"oid": "03e9fa79d6bbf19ca7446c234d78bb4c400d1854", "committedDate": "2021-01-23 12:55:28 -0500", "message": "Raise limit on JoinGame NBT reading to 2MiB."}, {"oid": "4f6d238b39609933a71c622c592f778c4341a754", "committedDate": "2021-01-29 17:56:50 -0500", "message": "Strictly limit the hostname size and limit it to ASCII characters only"}, {"oid": "501853e807a00b15ad9a181dd76a43e4f8cadd1c", "committedDate": "2021-01-29 17:59:00 -0500", "message": "Fix Checkstyle issue for the umpteenth time..."}, {"oid": "4f80d2b261d0a90d9076474e9e5d55f63fd171d9", "committedDate": "2021-01-29 23:08:14 -0500", "message": "Revert strict handshake hostname checks"}, {"oid": "f88283f1271569de4d8256cab25c5b421ef7ad12", "committedDate": "2021-03-30 12:08:08 -0400", "message": "Revert \"Revert strict handshake hostname checks\""}, {"oid": "514115a85cadcb6983c02fe5acc12ceeddcf7d8b", "committedDate": "2021-03-30 12:10:55 -0400", "message": "Do not use an ASCII string for handshake"}, {"oid": "c747120b20be1853ee02e7b2b67871249a88aa6d", "committedDate": "2021-03-31 16:04:06 -0400", "message": "Relicense the Velocity proxy under the terms of GPLv3 (#448)"}, {"oid": "3db2fe8d63162c716b8ac57ae0898027ecd3a7bb", "committedDate": "2021-05-03 17:31:32 -0400", "message": "Optimize varint writing"}, {"oid": "e531cdb373c654748f3c819b80a5286d9d431d21", "committedDate": "2021-05-03 18:07:25 -0400", "message": "Revert \"Optimize varint writing\""}, {"oid": "4ca97a6df9833ff8b402095698fc9746ab86c1b9", "committedDate": "2021-05-03 19:14:48 -0400", "message": "Reapply \"Optimize varint writing\""}, {"oid": "0debb81392a70f33781756198133414eed5ba7f1", "committedDate": "2021-05-03 20:08:16 -0400", "message": "I was nagged to make it more consistent"}, {"oid": "3dc8e25ec7e9c8f3dac71f0c825dc7cd20fc6ee0", "committedDate": "2021-05-04 16:30:32 -0400", "message": "Fix varint writing (for real!)"}, {"oid": "1cef82d54dda8726dcb5708b69fa51b04c215439", "committedDate": "2021-05-05 22:13:54 -0400", "message": "Unroll the VarInt writing loop"}, {"oid": "fb3f21abc6362bbed6e343ef559fb3d5d25342d1", "committedDate": "2021-05-06 00:48:19 -0400", "message": "More bitshifting magic"}, {"oid": "a8e0516d18b996b3a6aea80de97e017daa6e38a1", "committedDate": "2021-05-07 19:36:30 +0300", "message": "Also do not copy memory in case when packet needs to compress"}, {"oid": "150fd9a9cf239b769fe46f607c95a85a6c197377", "committedDate": "2021-05-08 23:26:43 -0400", "message": "Add highly-optimized VarInt writing method"}, {"oid": "5170da8fd7d4287f6e3530a62b2070cd7901c8cc", "committedDate": "2021-05-09 02:57:01 -0400", "message": "Improve writeVarInt inlining by peeling the two most common cases"}, {"oid": "11ed4b46e4b19a22a10063b03b41be0ae7d55a67", "committedDate": "2021-05-09 02:57:52 -0400", "message": "whoops"}, {"oid": "d97ed956a7be1411b192939abcab8412932230b8", "committedDate": "2022-06-07 21:00:24 -0400", "message": "Update/1.19 (#726)"}, {"oid": "1a3fba4250553702d9dcd05731d04347bfc24c9f", "committedDate": "2022-07-30 19:30:03 -0400", "message": "Update to 1.19.1 (#772)"}, {"oid": "47cd9faf65bb021aa4541b45e373a8e40f195d88", "committedDate": "2022-08-19 22:45:58 -0400", "message": "A char can be 3 bytes (#843)"}, {"oid": "d72d707b1c0dd6215a4984956faf4b2ec4bdbd97", "committedDate": "2023-01-01 17:53:37 -0500", "message": "Convert Velocity buildscripts to Kotlin DSL (#918)"}, {"oid": "b0862d2d16c4ba7560d3f24c824d78793ac3d9e0", "committedDate": "2023-01-01 18:46:33 -0500", "message": "Use Spotless for license formatting"}]}, {"oid": "fca73bae675d396cb584fc48e2c0548cc6595e58", "url": "https://github.com/PaperMC/Velocity/commit/fca73bae675d396cb584fc48e2c0548cc6595e58", "message": "Some minor touch-ups", "committedDate": "2020-05-23T09:46:27Z", "type": "commit"}, {"oid": "197bc4f288f4b01f3348e98d84e5facb0f224518", "url": "https://github.com/PaperMC/Velocity/commit/197bc4f288f4b01f3348e98d84e5facb0f224518", "message": "Make checkstyle happy again", "committedDate": "2020-05-23T09:49:27Z", "type": "commit"}, {"oid": "38487c5bba0d2376312f663c47bbea906c32779e", "url": "https://github.com/PaperMC/Velocity/commit/38487c5bba0d2376312f663c47bbea906c32779e", "message": "Server-change mechanics update", "committedDate": "2020-05-23T11:03:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU0Mjg0Mg==", "url": "https://github.com/PaperMC/Velocity/pull/310#discussion_r429542842", "body": "Imo a mark + reset is cleaner than storing the offset. https://netty.io/4.0/api/io/netty/buffer/ByteBuf.html#markReaderIndex--", "bodyText": "Imo a mark + reset is cleaner than storing the offset. https://netty.io/4.0/api/io/netty/buffer/ByteBuf.html#markReaderIndex--", "bodyHTML": "<p dir=\"auto\">Imo a mark + reset is cleaner than storing the offset. <a href=\"https://netty.io/4.0/api/io/netty/buffer/ByteBuf.html#markReaderIndex--\" rel=\"nofollow\">https://netty.io/4.0/api/io/netty/buffer/ByteBuf.html#markReaderIndex--</a></p>", "author": "hugmanrique", "createdAt": "2020-05-23T12:41:49Z", "path": "proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java", "diffHunk": "@@ -153,6 +162,80 @@ public static void writeUuid(ByteBuf buf, UUID uuid) {\n     buf.writeLong(uuid.getLeastSignificantBits());\n   }\n \n+  /**\n+   * Reads an UUID stored as an Integer Array from the {@code buf}.\n+   * @param buf the buffer to read from\n+   * @return the UUID from the buffer\n+   */\n+  public static UUID readUuidIntArray(ByteBuf buf) {\n+    long msbHigh = (long) buf.readInt() << 32;\n+    long msbLow = (long) buf.readInt() & 0xFFFFFFFFL;\n+    long msb = msbHigh | msbLow;\n+    long lsbHigh = (long) buf.readInt() << 32;\n+    long lsbLow = (long) buf.readInt() & 0xFFFFFFFFL;\n+    long lsb = lsbHigh | lsbLow;\n+    return new UUID(msb, lsb);\n+  }\n+\n+  /**\n+   * Writes an UUID as an Integer Array to the {@code buf}.\n+   * @param buf the buffer to write to\n+   * @param uuid the UUID to write\n+   */\n+  public static void writeUuidIntArray(ByteBuf buf, UUID uuid) {\n+    buf.writeInt((int) (uuid.getMostSignificantBits() >> 32));\n+    buf.writeInt((int) uuid.getMostSignificantBits());\n+    buf.writeInt((int) (uuid.getLeastSignificantBits() >> 32));\n+    buf.writeInt((int) uuid.getLeastSignificantBits());\n+  }\n+\n+  /**\n+   * Reads a {@link net.kyori.nbt.CompoundTag} from the {@code buf}.\n+   * @param buf the buffer to read from\n+   * @return {@link net.kyori.nbt.CompoundTag} the CompoundTag from the buffer\n+   */\n+  public static CompoundTag readCompoundTag(ByteBuf buf) {\n+    int indexBefore = buf.readerIndex();\n+    byte startType = buf.readByte();\n+    if (startType == 0) {\n+      throw new DecoderException(\"Invalid NBT start-type (end/empty)\");\n+    }\n+    buf.readerIndex(indexBefore);", "originalCommit": "38487c5bba0d2376312f663c47bbea906c32779e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU0NDk4MA==", "url": "https://github.com/VelocityPowered/Velocity/pull/310#discussion_r429544980", "bodyText": "mark/reset is gone in the next major release of Netty: netty/netty#8535", "author": "astei", "createdAt": "2020-05-23T13:10:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU0Mjg0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "18e595397660ea6651bb4c86e1bb3a6addf1dd24", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\nindex cfedec88..e2b55c54 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n", "chunk": "@@ -204,7 +205,7 @@ public enum ProtocolUtils {\n     try {\n       DataInput input = new ByteBufInputStream(buf);\n       byte type = input.readByte();\n-      if (type != 10) {\n+      if (type != TagType.COMPOUND.id()) {\n         throw new DecoderException(\"NBTTag is not a CompoundTag\");\n       }\n       input.readUTF(); // Head-padding\n", "next_change": {"commit": "101a6a58dd7a1c2af13edd897eade28ac92599ba", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\nindex e2b55c54..bb7516aa 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n", "chunk": "@@ -203,17 +204,10 @@ public enum ProtocolUtils {\n     }\n     buf.readerIndex(indexBefore);\n     try {\n-      DataInput input = new ByteBufInputStream(buf);\n-      byte type = input.readByte();\n-      if (type != TagType.COMPOUND.id()) {\n-        throw new DecoderException(\"NBTTag is not a CompoundTag\");\n-      }\n-      input.readUTF(); // Head-padding\n-      CompoundTag compoundTag = new CompoundTag();\n-      compoundTag.read(input, 0);\n-      return compoundTag;\n-    } catch (IOException e) {\n-      throw new DecoderException(\"Unable to decode NBT CompoundTag at \" + indexBefore);\n+      return TagIO.readDataInput(new ByteBufInputStream(buf));\n+    } catch (IOException thrown) {\n+      throw new DecoderException(\n+              \"Unable to parse NBT CompoundTag, full error: \" + thrown.getMessage());\n     }\n   }\n \n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "0dd6fe1ef2783fe1f9322af06c6fd218aa67cdb1", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\nindex cfedec88..bb7516aa 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n", "chunk": "@@ -202,17 +204,10 @@ public enum ProtocolUtils {\n     }\n     buf.readerIndex(indexBefore);\n     try {\n-      DataInput input = new ByteBufInputStream(buf);\n-      byte type = input.readByte();\n-      if (type != 10) {\n-        throw new DecoderException(\"NBTTag is not a CompoundTag\");\n-      }\n-      input.readUTF(); // Head-padding\n-      CompoundTag compoundTag = new CompoundTag();\n-      compoundTag.read(input, 0);\n-      return compoundTag;\n-    } catch (IOException e) {\n-      throw new DecoderException(\"Unable to decode NBT CompoundTag at \" + indexBefore);\n+      return TagIO.readDataInput(new ByteBufInputStream(buf));\n+    } catch (IOException thrown) {\n+      throw new DecoderException(\n+              \"Unable to parse NBT CompoundTag, full error: \" + thrown.getMessage());\n     }\n   }\n \n", "next_change": {"commit": "5c314c9068814aca404b68cf8442af7201bdcf43", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\nindex bb7516aa..ab6dbc75 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n", "chunk": "@@ -164,102 +160,9 @@ public enum ProtocolUtils {\n     buf.writeLong(uuid.getLeastSignificantBits());\n   }\n \n-  /**\n-   * Reads an UUID stored as an Integer Array from the {@code buf}.\n-   * @param buf the buffer to read from\n-   * @return the UUID from the buffer\n-   */\n-  public static UUID readUuidIntArray(ByteBuf buf) {\n-    long msbHigh = (long) buf.readInt() << 32;\n-    long msbLow = (long) buf.readInt() & 0xFFFFFFFFL;\n-    long msb = msbHigh | msbLow;\n-    long lsbHigh = (long) buf.readInt() << 32;\n-    long lsbLow = (long) buf.readInt() & 0xFFFFFFFFL;\n-    long lsb = lsbHigh | lsbLow;\n-    return new UUID(msb, lsb);\n-  }\n-\n-  /**\n-   * Writes an UUID as an Integer Array to the {@code buf}.\n-   * @param buf the buffer to write to\n-   * @param uuid the UUID to write\n-   */\n-  public static void writeUuidIntArray(ByteBuf buf, UUID uuid) {\n-    buf.writeInt((int) (uuid.getMostSignificantBits() >> 32));\n-    buf.writeInt((int) uuid.getMostSignificantBits());\n-    buf.writeInt((int) (uuid.getLeastSignificantBits() >> 32));\n-    buf.writeInt((int) uuid.getLeastSignificantBits());\n-  }\n-\n-  /**\n-   * Reads a {@link net.kyori.nbt.CompoundTag} from the {@code buf}.\n-   * @param buf the buffer to read from\n-   * @return {@link net.kyori.nbt.CompoundTag} the CompoundTag from the buffer\n-   */\n-  public static CompoundTag readCompoundTag(ByteBuf buf) {\n-    int indexBefore = buf.readerIndex();\n-    byte startType = buf.readByte();\n-    if (startType == 0) {\n-      throw new DecoderException(\"Invalid NBT start-type (end/empty)\");\n-    }\n-    buf.readerIndex(indexBefore);\n-    try {\n-      return TagIO.readDataInput(new ByteBufInputStream(buf));\n-    } catch (IOException thrown) {\n-      throw new DecoderException(\n-              \"Unable to parse NBT CompoundTag, full error: \" + thrown.getMessage());\n-    }\n-  }\n-\n-  /**\n-   * Writes a CompoundTag to the {@code buf}.\n-   * @param buf the buffer to write to\n-   * @param compoundTag the CompoundTag to write\n-   */\n-  public static void writeCompoundTag(ByteBuf buf, CompoundTag compoundTag) {\n-    if (compoundTag == null) {\n-      buf.writeByte(0);\n-      return;\n-    }\n-    try {\n-      TagIO.writeDataOutput(compoundTag, new ByteBufOutputStream(buf));\n-    } catch (IOException e) {\n-      throw new EncoderException(\"Unable to encode NBT CompoundTag\");\n-    }\n-  }\n-\n-  /**\n-   * Reads a String array from the {@code buf}.\n-   * @param buf the buffer to read from\n-   * @return the String array from the buffer\n-   */\n-  public static String[] readStringArray(ByteBuf buf) {\n-    int length = readVarInt(buf);\n-    String[] ret = new String[length];\n-    for (int i = 0; i < length; i++) {\n-      ret[i] = readString(buf);\n-    }\n-    return ret;\n-  }\n-\n-  /**\n-   * Writes a String Array to the {@code buf}.\n-   * @param buf the buffer to write to\n-   * @param stringArray the array to write\n-   */\n-  public static void writeStringArray(ByteBuf buf, String[] stringArray) {\n-    if (stringArray == null) {\n-      writeVarInt(buf, 0);\n-      return;\n-    }\n-    writeVarInt(buf, stringArray.length);\n-    for (int i = 0; i < stringArray.length; i++) {\n-      writeString(buf, stringArray[i]);\n-    }\n-  }\n-\n   /**\n    * Writes a list of {@link com.velocitypowered.api.util.GameProfile.Property} to the buffer.\n+   *\n    * @param buf the buffer to write to\n    * @param properties the properties to serialize\n    */\n", "next_change": {"commit": "592517b9f3b0a042eaa431b77c377096c214f2b0", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\nindex ab6dbc75..55588557 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n", "chunk": "@@ -162,7 +155,6 @@ public enum ProtocolUtils {\n \n   /**\n    * Writes a list of {@link com.velocitypowered.api.util.GameProfile.Property} to the buffer.\n-   *\n    * @param buf the buffer to write to\n    * @param properties the properties to serialize\n    */\n", "next_change": {"commit": "cd9bb61f208e3b27da9fbdcb4bf6cafc9135be65", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\nindex 55588557..bb7516aa 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n", "chunk": "@@ -153,6 +164,100 @@ public enum ProtocolUtils {\n     buf.writeLong(uuid.getLeastSignificantBits());\n   }\n \n+  /**\n+   * Reads an UUID stored as an Integer Array from the {@code buf}.\n+   * @param buf the buffer to read from\n+   * @return the UUID from the buffer\n+   */\n+  public static UUID readUuidIntArray(ByteBuf buf) {\n+    long msbHigh = (long) buf.readInt() << 32;\n+    long msbLow = (long) buf.readInt() & 0xFFFFFFFFL;\n+    long msb = msbHigh | msbLow;\n+    long lsbHigh = (long) buf.readInt() << 32;\n+    long lsbLow = (long) buf.readInt() & 0xFFFFFFFFL;\n+    long lsb = lsbHigh | lsbLow;\n+    return new UUID(msb, lsb);\n+  }\n+\n+  /**\n+   * Writes an UUID as an Integer Array to the {@code buf}.\n+   * @param buf the buffer to write to\n+   * @param uuid the UUID to write\n+   */\n+  public static void writeUuidIntArray(ByteBuf buf, UUID uuid) {\n+    buf.writeInt((int) (uuid.getMostSignificantBits() >> 32));\n+    buf.writeInt((int) uuid.getMostSignificantBits());\n+    buf.writeInt((int) (uuid.getLeastSignificantBits() >> 32));\n+    buf.writeInt((int) uuid.getLeastSignificantBits());\n+  }\n+\n+  /**\n+   * Reads a {@link net.kyori.nbt.CompoundTag} from the {@code buf}.\n+   * @param buf the buffer to read from\n+   * @return {@link net.kyori.nbt.CompoundTag} the CompoundTag from the buffer\n+   */\n+  public static CompoundTag readCompoundTag(ByteBuf buf) {\n+    int indexBefore = buf.readerIndex();\n+    byte startType = buf.readByte();\n+    if (startType == 0) {\n+      throw new DecoderException(\"Invalid NBT start-type (end/empty)\");\n+    }\n+    buf.readerIndex(indexBefore);\n+    try {\n+      return TagIO.readDataInput(new ByteBufInputStream(buf));\n+    } catch (IOException thrown) {\n+      throw new DecoderException(\n+              \"Unable to parse NBT CompoundTag, full error: \" + thrown.getMessage());\n+    }\n+  }\n+\n+  /**\n+   * Writes a CompoundTag to the {@code buf}.\n+   * @param buf the buffer to write to\n+   * @param compoundTag the CompoundTag to write\n+   */\n+  public static void writeCompoundTag(ByteBuf buf, CompoundTag compoundTag) {\n+    if (compoundTag == null) {\n+      buf.writeByte(0);\n+      return;\n+    }\n+    try {\n+      TagIO.writeDataOutput(compoundTag, new ByteBufOutputStream(buf));\n+    } catch (IOException e) {\n+      throw new EncoderException(\"Unable to encode NBT CompoundTag\");\n+    }\n+  }\n+\n+  /**\n+   * Reads a String array from the {@code buf}.\n+   * @param buf the buffer to read from\n+   * @return the String array from the buffer\n+   */\n+  public static String[] readStringArray(ByteBuf buf) {\n+    int length = readVarInt(buf);\n+    String[] ret = new String[length];\n+    for (int i = 0; i < length; i++) {\n+      ret[i] = readString(buf);\n+    }\n+    return ret;\n+  }\n+\n+  /**\n+   * Writes a String Array to the {@code buf}.\n+   * @param buf the buffer to write to\n+   * @param stringArray the array to write\n+   */\n+  public static void writeStringArray(ByteBuf buf, String[] stringArray) {\n+    if (stringArray == null) {\n+      writeVarInt(buf, 0);\n+      return;\n+    }\n+    writeVarInt(buf, stringArray.length);\n+    for (int i = 0; i < stringArray.length; i++) {\n+      writeString(buf, stringArray[i]);\n+    }\n+  }\n+\n   /**\n    * Writes a list of {@link com.velocitypowered.api.util.GameProfile.Property} to the buffer.\n    * @param buf the buffer to write to\n", "next_change": {"commit": "5d287306c2458ccaad40621e3d7418215b764c62", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\nindex bb7516aa..2fa1e759 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n", "chunk": "@@ -253,8 +276,8 @@ public enum ProtocolUtils {\n       return;\n     }\n     writeVarInt(buf, stringArray.length);\n-    for (int i = 0; i < stringArray.length; i++) {\n-      writeString(buf, stringArray[i]);\n+    for (String s : stringArray) {\n+      writeString(buf, s);\n     }\n   }\n \n", "next_change": {"commit": "a0a0966f99bff672b9a28d55b464a4ffd5ee4d2e", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\nindex 2fa1e759..a7e0bd43 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n", "chunk": "@@ -271,10 +271,6 @@ public enum ProtocolUtils {\n    * @param stringArray the array to write\n    */\n   public static void writeStringArray(ByteBuf buf, String[] stringArray) {\n-    if (stringArray == null) {\n-      writeVarInt(buf, 0);\n-      return;\n-    }\n     writeVarInt(buf, stringArray.length);\n     for (String s : stringArray) {\n       writeString(buf, s);\n", "next_change": {"commit": "d72d707b1c0dd6215a4984956faf4b2ec4bdbd97", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\nindex a7e0bd43..f18d9c70 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n", "chunk": "@@ -267,7 +357,8 @@ public enum ProtocolUtils {\n \n   /**\n    * Writes a String Array to the {@code buf}.\n-   * @param buf the buffer to write to\n+   *\n+   * @param buf         the buffer to write to\n    * @param stringArray the array to write\n    */\n   public static void writeStringArray(ByteBuf buf, String[] stringArray) {\n", "next_change": null}, {"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\nindex a7e0bd43..f18d9c70 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n", "chunk": "@@ -279,7 +370,8 @@ public enum ProtocolUtils {\n \n   /**\n    * Writes a list of {@link com.velocitypowered.api.util.GameProfile.Property} to the buffer.\n-   * @param buf the buffer to write to\n+   *\n+   * @param buf        the buffer to write to\n    * @param properties the properties to serialize\n    */\n   public static void writeProperties(ByteBuf buf, List<GameProfile.Property> properties) {\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "0dd6fe1ef2783fe1f9322af06c6fd218aa67cdb1", "message": "Merge commit", "committedDate": null}, {"oid": "5c314c9068814aca404b68cf8442af7201bdcf43", "committedDate": "2019-07-01 08:56:22 +0200", "message": "Add 1.7 Protocol Support"}, {"oid": "d0ad0fac360031348e83dee418418c22c5ebf4e4", "committedDate": "2019-07-05 10:59:29 +0200", "message": "Merge branch 'dev/1.1.0' of github.com:VelocityPowered/Velocity"}, {"oid": "592517b9f3b0a042eaa431b77c377096c214f2b0", "committedDate": "2019-08-29 19:58:00 +0200", "message": "Remove unnessecary diff"}, {"oid": "d7bbe7531a89100e10e5a082b6cdc445df9edd72", "committedDate": "2020-05-25 15:58:52 -0400", "message": "Additional protocol hardening."}, {"oid": "ebad3d1005bfba1dc0e9262ddd1fb79a095a03c9", "committedDate": "2020-05-25 16:05:36 -0400", "message": "Use Integer.MIN_VALUE for the sentinel for readVarIntSafely()"}, {"oid": "eeb660ce007ee116264656b7fd8dedcbc84a97b3", "committedDate": "2020-05-26 05:25:03 -0400", "message": "Fix bad ordering"}, {"oid": "cd9bb61f208e3b27da9fbdcb4bf6cafc9135be65", "committedDate": "2020-06-20 23:11:19 -0400", "message": "Merge branch 'future/1.16' of https://github.com/Xernium/Velocity into Xernium-future/1.16"}, {"oid": "ada35ff28698c9cccea50236eda6ec4c291ca13a", "committedDate": "2020-06-20 23:24:32 -0400", "message": "Merge branch 'Xernium-future/1.16' into future/1.16-velocity-1.1.0"}, {"oid": "c2edd82b16660ab75210fb5caabf09d56bd73b28", "committedDate": "2020-06-28 23:13:57 -0400", "message": "Use more idiomatic adventure text serializer"}, {"oid": "72ce5c86ba81942e46baf891295ef9ffa264a780", "committedDate": "2020-07-16 11:44:55 -0400", "message": "Improve Velocity networking pipeline when under stress"}, {"oid": "f9f60e1489ecad64ba657dbe5f8d38e8f004800f", "committedDate": "2020-07-19 18:23:47 -0400", "message": "Small code cleanups and switch more stuff to adventure"}, {"oid": "cab6919a46516026c731e56654bdc6f527bb2540", "committedDate": "2020-08-06 17:38:52 -0400", "message": "Switch to adventure-nbt and fix server switching on 1.16.2-pre3"}, {"oid": "46e34ddb7f4230c3212c547d2cc05fd860212f3e", "committedDate": "2020-08-06 20:53:19 -0400", "message": "Allow serializing legacy hover events"}, {"oid": "a6ddc137ee5c9181e8b1c1d68686bfca0b0e9aa5", "committedDate": "2020-08-21 01:05:04 -0400", "message": "Reduce varint reading cost from max(1, 2n) to n+1 operations on ByteBuf"}, {"oid": "c47d25c88a87048d8ac651044f5c93780904e1b2", "committedDate": "2020-08-21 19:09:04 -0400", "message": "Upgrade to Gradle 6.6 and use SpotBugs."}, {"oid": "5d287306c2458ccaad40621e3d7418215b764c62", "committedDate": "2020-09-01 03:25:15 -0400", "message": "Small code cleanups"}, {"oid": "a0a0966f99bff672b9a28d55b464a4ffd5ee4d2e", "committedDate": "2020-09-23 01:02:19 -0400", "message": "Minor code cleanup"}, {"oid": "03e9fa79d6bbf19ca7446c234d78bb4c400d1854", "committedDate": "2021-01-23 12:55:28 -0500", "message": "Raise limit on JoinGame NBT reading to 2MiB."}, {"oid": "4f6d238b39609933a71c622c592f778c4341a754", "committedDate": "2021-01-29 17:56:50 -0500", "message": "Strictly limit the hostname size and limit it to ASCII characters only"}, {"oid": "501853e807a00b15ad9a181dd76a43e4f8cadd1c", "committedDate": "2021-01-29 17:59:00 -0500", "message": "Fix Checkstyle issue for the umpteenth time..."}, {"oid": "4f80d2b261d0a90d9076474e9e5d55f63fd171d9", "committedDate": "2021-01-29 23:08:14 -0500", "message": "Revert strict handshake hostname checks"}, {"oid": "f88283f1271569de4d8256cab25c5b421ef7ad12", "committedDate": "2021-03-30 12:08:08 -0400", "message": "Revert \"Revert strict handshake hostname checks\""}, {"oid": "514115a85cadcb6983c02fe5acc12ceeddcf7d8b", "committedDate": "2021-03-30 12:10:55 -0400", "message": "Do not use an ASCII string for handshake"}, {"oid": "c747120b20be1853ee02e7b2b67871249a88aa6d", "committedDate": "2021-03-31 16:04:06 -0400", "message": "Relicense the Velocity proxy under the terms of GPLv3 (#448)"}, {"oid": "3db2fe8d63162c716b8ac57ae0898027ecd3a7bb", "committedDate": "2021-05-03 17:31:32 -0400", "message": "Optimize varint writing"}, {"oid": "e531cdb373c654748f3c819b80a5286d9d431d21", "committedDate": "2021-05-03 18:07:25 -0400", "message": "Revert \"Optimize varint writing\""}, {"oid": "4ca97a6df9833ff8b402095698fc9746ab86c1b9", "committedDate": "2021-05-03 19:14:48 -0400", "message": "Reapply \"Optimize varint writing\""}, {"oid": "0debb81392a70f33781756198133414eed5ba7f1", "committedDate": "2021-05-03 20:08:16 -0400", "message": "I was nagged to make it more consistent"}, {"oid": "3dc8e25ec7e9c8f3dac71f0c825dc7cd20fc6ee0", "committedDate": "2021-05-04 16:30:32 -0400", "message": "Fix varint writing (for real!)"}, {"oid": "1cef82d54dda8726dcb5708b69fa51b04c215439", "committedDate": "2021-05-05 22:13:54 -0400", "message": "Unroll the VarInt writing loop"}, {"oid": "fb3f21abc6362bbed6e343ef559fb3d5d25342d1", "committedDate": "2021-05-06 00:48:19 -0400", "message": "More bitshifting magic"}, {"oid": "a8e0516d18b996b3a6aea80de97e017daa6e38a1", "committedDate": "2021-05-07 19:36:30 +0300", "message": "Also do not copy memory in case when packet needs to compress"}, {"oid": "150fd9a9cf239b769fe46f607c95a85a6c197377", "committedDate": "2021-05-08 23:26:43 -0400", "message": "Add highly-optimized VarInt writing method"}, {"oid": "5170da8fd7d4287f6e3530a62b2070cd7901c8cc", "committedDate": "2021-05-09 02:57:01 -0400", "message": "Improve writeVarInt inlining by peeling the two most common cases"}, {"oid": "11ed4b46e4b19a22a10063b03b41be0ae7d55a67", "committedDate": "2021-05-09 02:57:52 -0400", "message": "whoops"}, {"oid": "d97ed956a7be1411b192939abcab8412932230b8", "committedDate": "2022-06-07 21:00:24 -0400", "message": "Update/1.19 (#726)"}, {"oid": "1a3fba4250553702d9dcd05731d04347bfc24c9f", "committedDate": "2022-07-30 19:30:03 -0400", "message": "Update to 1.19.1 (#772)"}, {"oid": "47cd9faf65bb021aa4541b45e373a8e40f195d88", "committedDate": "2022-08-19 22:45:58 -0400", "message": "A char can be 3 bytes (#843)"}, {"oid": "d72d707b1c0dd6215a4984956faf4b2ec4bdbd97", "committedDate": "2023-01-01 17:53:37 -0500", "message": "Convert Velocity buildscripts to Kotlin DSL (#918)"}, {"oid": "b0862d2d16c4ba7560d3f24c824d78793ac3d9e0", "committedDate": "2023-01-01 18:46:33 -0500", "message": "Use Spotless for license formatting"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU0MzA1Ng==", "url": "https://github.com/PaperMC/Velocity/pull/310#discussion_r429543056", "body": "Replace constant by `TagType.COMPOUND.id()` (https://github.com/KyoriPowered/nbt/blob/0ec540ee377d902d5d96fa8d2aca3d3f2b35abe4/src/main/java/net/kyori/nbt/TagType.java#L78 )", "bodyText": "Replace constant by TagType.COMPOUND.id() (https://github.com/KyoriPowered/nbt/blob/0ec540ee377d902d5d96fa8d2aca3d3f2b35abe4/src/main/java/net/kyori/nbt/TagType.java#L78 )", "bodyHTML": "<p dir=\"auto\">Replace constant by <code>TagType.COMPOUND.id()</code> (<a href=\"https://github.com/KyoriPowered/nbt/blob/0ec540ee377d902d5d96fa8d2aca3d3f2b35abe4/src/main/java/net/kyori/nbt/TagType.java#L78\">https://github.com/KyoriPowered/nbt/blob/0ec540ee377d902d5d96fa8d2aca3d3f2b35abe4/src/main/java/net/kyori/nbt/TagType.java#L78</a> )</p>", "author": "hugmanrique", "createdAt": "2020-05-23T12:44:37Z", "path": "proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java", "diffHunk": "@@ -153,6 +162,80 @@ public static void writeUuid(ByteBuf buf, UUID uuid) {\n     buf.writeLong(uuid.getLeastSignificantBits());\n   }\n \n+  /**\n+   * Reads an UUID stored as an Integer Array from the {@code buf}.\n+   * @param buf the buffer to read from\n+   * @return the UUID from the buffer\n+   */\n+  public static UUID readUuidIntArray(ByteBuf buf) {\n+    long msbHigh = (long) buf.readInt() << 32;\n+    long msbLow = (long) buf.readInt() & 0xFFFFFFFFL;\n+    long msb = msbHigh | msbLow;\n+    long lsbHigh = (long) buf.readInt() << 32;\n+    long lsbLow = (long) buf.readInt() & 0xFFFFFFFFL;\n+    long lsb = lsbHigh | lsbLow;\n+    return new UUID(msb, lsb);\n+  }\n+\n+  /**\n+   * Writes an UUID as an Integer Array to the {@code buf}.\n+   * @param buf the buffer to write to\n+   * @param uuid the UUID to write\n+   */\n+  public static void writeUuidIntArray(ByteBuf buf, UUID uuid) {\n+    buf.writeInt((int) (uuid.getMostSignificantBits() >> 32));\n+    buf.writeInt((int) uuid.getMostSignificantBits());\n+    buf.writeInt((int) (uuid.getLeastSignificantBits() >> 32));\n+    buf.writeInt((int) uuid.getLeastSignificantBits());\n+  }\n+\n+  /**\n+   * Reads a {@link net.kyori.nbt.CompoundTag} from the {@code buf}.\n+   * @param buf the buffer to read from\n+   * @return {@link net.kyori.nbt.CompoundTag} the CompoundTag from the buffer\n+   */\n+  public static CompoundTag readCompoundTag(ByteBuf buf) {\n+    int indexBefore = buf.readerIndex();\n+    byte startType = buf.readByte();\n+    if (startType == 0) {\n+      throw new DecoderException(\"Invalid NBT start-type (end/empty)\");\n+    }\n+    buf.readerIndex(indexBefore);\n+    try {\n+      DataInput input = new ByteBufInputStream(buf);\n+      byte type = input.readByte();\n+      if (type != 10) {", "originalCommit": "38487c5bba0d2376312f663c47bbea906c32779e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "18e595397660ea6651bb4c86e1bb3a6addf1dd24", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\nindex cfedec88..e2b55c54 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n", "chunk": "@@ -204,7 +205,7 @@ public enum ProtocolUtils {\n     try {\n       DataInput input = new ByteBufInputStream(buf);\n       byte type = input.readByte();\n-      if (type != 10) {\n+      if (type != TagType.COMPOUND.id()) {\n         throw new DecoderException(\"NBTTag is not a CompoundTag\");\n       }\n       input.readUTF(); // Head-padding\n", "next_change": {"commit": "101a6a58dd7a1c2af13edd897eade28ac92599ba", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\nindex e2b55c54..bb7516aa 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n", "chunk": "@@ -203,17 +204,10 @@ public enum ProtocolUtils {\n     }\n     buf.readerIndex(indexBefore);\n     try {\n-      DataInput input = new ByteBufInputStream(buf);\n-      byte type = input.readByte();\n-      if (type != TagType.COMPOUND.id()) {\n-        throw new DecoderException(\"NBTTag is not a CompoundTag\");\n-      }\n-      input.readUTF(); // Head-padding\n-      CompoundTag compoundTag = new CompoundTag();\n-      compoundTag.read(input, 0);\n-      return compoundTag;\n-    } catch (IOException e) {\n-      throw new DecoderException(\"Unable to decode NBT CompoundTag at \" + indexBefore);\n+      return TagIO.readDataInput(new ByteBufInputStream(buf));\n+    } catch (IOException thrown) {\n+      throw new DecoderException(\n+              \"Unable to parse NBT CompoundTag, full error: \" + thrown.getMessage());\n     }\n   }\n \n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "0dd6fe1ef2783fe1f9322af06c6fd218aa67cdb1", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\nindex cfedec88..bb7516aa 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n", "chunk": "@@ -202,17 +204,10 @@ public enum ProtocolUtils {\n     }\n     buf.readerIndex(indexBefore);\n     try {\n-      DataInput input = new ByteBufInputStream(buf);\n-      byte type = input.readByte();\n-      if (type != 10) {\n-        throw new DecoderException(\"NBTTag is not a CompoundTag\");\n-      }\n-      input.readUTF(); // Head-padding\n-      CompoundTag compoundTag = new CompoundTag();\n-      compoundTag.read(input, 0);\n-      return compoundTag;\n-    } catch (IOException e) {\n-      throw new DecoderException(\"Unable to decode NBT CompoundTag at \" + indexBefore);\n+      return TagIO.readDataInput(new ByteBufInputStream(buf));\n+    } catch (IOException thrown) {\n+      throw new DecoderException(\n+              \"Unable to parse NBT CompoundTag, full error: \" + thrown.getMessage());\n     }\n   }\n \n", "next_change": {"commit": "5c314c9068814aca404b68cf8442af7201bdcf43", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\nindex bb7516aa..ab6dbc75 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n", "chunk": "@@ -164,102 +160,9 @@ public enum ProtocolUtils {\n     buf.writeLong(uuid.getLeastSignificantBits());\n   }\n \n-  /**\n-   * Reads an UUID stored as an Integer Array from the {@code buf}.\n-   * @param buf the buffer to read from\n-   * @return the UUID from the buffer\n-   */\n-  public static UUID readUuidIntArray(ByteBuf buf) {\n-    long msbHigh = (long) buf.readInt() << 32;\n-    long msbLow = (long) buf.readInt() & 0xFFFFFFFFL;\n-    long msb = msbHigh | msbLow;\n-    long lsbHigh = (long) buf.readInt() << 32;\n-    long lsbLow = (long) buf.readInt() & 0xFFFFFFFFL;\n-    long lsb = lsbHigh | lsbLow;\n-    return new UUID(msb, lsb);\n-  }\n-\n-  /**\n-   * Writes an UUID as an Integer Array to the {@code buf}.\n-   * @param buf the buffer to write to\n-   * @param uuid the UUID to write\n-   */\n-  public static void writeUuidIntArray(ByteBuf buf, UUID uuid) {\n-    buf.writeInt((int) (uuid.getMostSignificantBits() >> 32));\n-    buf.writeInt((int) uuid.getMostSignificantBits());\n-    buf.writeInt((int) (uuid.getLeastSignificantBits() >> 32));\n-    buf.writeInt((int) uuid.getLeastSignificantBits());\n-  }\n-\n-  /**\n-   * Reads a {@link net.kyori.nbt.CompoundTag} from the {@code buf}.\n-   * @param buf the buffer to read from\n-   * @return {@link net.kyori.nbt.CompoundTag} the CompoundTag from the buffer\n-   */\n-  public static CompoundTag readCompoundTag(ByteBuf buf) {\n-    int indexBefore = buf.readerIndex();\n-    byte startType = buf.readByte();\n-    if (startType == 0) {\n-      throw new DecoderException(\"Invalid NBT start-type (end/empty)\");\n-    }\n-    buf.readerIndex(indexBefore);\n-    try {\n-      return TagIO.readDataInput(new ByteBufInputStream(buf));\n-    } catch (IOException thrown) {\n-      throw new DecoderException(\n-              \"Unable to parse NBT CompoundTag, full error: \" + thrown.getMessage());\n-    }\n-  }\n-\n-  /**\n-   * Writes a CompoundTag to the {@code buf}.\n-   * @param buf the buffer to write to\n-   * @param compoundTag the CompoundTag to write\n-   */\n-  public static void writeCompoundTag(ByteBuf buf, CompoundTag compoundTag) {\n-    if (compoundTag == null) {\n-      buf.writeByte(0);\n-      return;\n-    }\n-    try {\n-      TagIO.writeDataOutput(compoundTag, new ByteBufOutputStream(buf));\n-    } catch (IOException e) {\n-      throw new EncoderException(\"Unable to encode NBT CompoundTag\");\n-    }\n-  }\n-\n-  /**\n-   * Reads a String array from the {@code buf}.\n-   * @param buf the buffer to read from\n-   * @return the String array from the buffer\n-   */\n-  public static String[] readStringArray(ByteBuf buf) {\n-    int length = readVarInt(buf);\n-    String[] ret = new String[length];\n-    for (int i = 0; i < length; i++) {\n-      ret[i] = readString(buf);\n-    }\n-    return ret;\n-  }\n-\n-  /**\n-   * Writes a String Array to the {@code buf}.\n-   * @param buf the buffer to write to\n-   * @param stringArray the array to write\n-   */\n-  public static void writeStringArray(ByteBuf buf, String[] stringArray) {\n-    if (stringArray == null) {\n-      writeVarInt(buf, 0);\n-      return;\n-    }\n-    writeVarInt(buf, stringArray.length);\n-    for (int i = 0; i < stringArray.length; i++) {\n-      writeString(buf, stringArray[i]);\n-    }\n-  }\n-\n   /**\n    * Writes a list of {@link com.velocitypowered.api.util.GameProfile.Property} to the buffer.\n+   *\n    * @param buf the buffer to write to\n    * @param properties the properties to serialize\n    */\n", "next_change": {"commit": "592517b9f3b0a042eaa431b77c377096c214f2b0", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\nindex ab6dbc75..55588557 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n", "chunk": "@@ -162,7 +155,6 @@ public enum ProtocolUtils {\n \n   /**\n    * Writes a list of {@link com.velocitypowered.api.util.GameProfile.Property} to the buffer.\n-   *\n    * @param buf the buffer to write to\n    * @param properties the properties to serialize\n    */\n", "next_change": {"commit": "cd9bb61f208e3b27da9fbdcb4bf6cafc9135be65", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\nindex 55588557..bb7516aa 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n", "chunk": "@@ -153,6 +164,100 @@ public enum ProtocolUtils {\n     buf.writeLong(uuid.getLeastSignificantBits());\n   }\n \n+  /**\n+   * Reads an UUID stored as an Integer Array from the {@code buf}.\n+   * @param buf the buffer to read from\n+   * @return the UUID from the buffer\n+   */\n+  public static UUID readUuidIntArray(ByteBuf buf) {\n+    long msbHigh = (long) buf.readInt() << 32;\n+    long msbLow = (long) buf.readInt() & 0xFFFFFFFFL;\n+    long msb = msbHigh | msbLow;\n+    long lsbHigh = (long) buf.readInt() << 32;\n+    long lsbLow = (long) buf.readInt() & 0xFFFFFFFFL;\n+    long lsb = lsbHigh | lsbLow;\n+    return new UUID(msb, lsb);\n+  }\n+\n+  /**\n+   * Writes an UUID as an Integer Array to the {@code buf}.\n+   * @param buf the buffer to write to\n+   * @param uuid the UUID to write\n+   */\n+  public static void writeUuidIntArray(ByteBuf buf, UUID uuid) {\n+    buf.writeInt((int) (uuid.getMostSignificantBits() >> 32));\n+    buf.writeInt((int) uuid.getMostSignificantBits());\n+    buf.writeInt((int) (uuid.getLeastSignificantBits() >> 32));\n+    buf.writeInt((int) uuid.getLeastSignificantBits());\n+  }\n+\n+  /**\n+   * Reads a {@link net.kyori.nbt.CompoundTag} from the {@code buf}.\n+   * @param buf the buffer to read from\n+   * @return {@link net.kyori.nbt.CompoundTag} the CompoundTag from the buffer\n+   */\n+  public static CompoundTag readCompoundTag(ByteBuf buf) {\n+    int indexBefore = buf.readerIndex();\n+    byte startType = buf.readByte();\n+    if (startType == 0) {\n+      throw new DecoderException(\"Invalid NBT start-type (end/empty)\");\n+    }\n+    buf.readerIndex(indexBefore);\n+    try {\n+      return TagIO.readDataInput(new ByteBufInputStream(buf));\n+    } catch (IOException thrown) {\n+      throw new DecoderException(\n+              \"Unable to parse NBT CompoundTag, full error: \" + thrown.getMessage());\n+    }\n+  }\n+\n+  /**\n+   * Writes a CompoundTag to the {@code buf}.\n+   * @param buf the buffer to write to\n+   * @param compoundTag the CompoundTag to write\n+   */\n+  public static void writeCompoundTag(ByteBuf buf, CompoundTag compoundTag) {\n+    if (compoundTag == null) {\n+      buf.writeByte(0);\n+      return;\n+    }\n+    try {\n+      TagIO.writeDataOutput(compoundTag, new ByteBufOutputStream(buf));\n+    } catch (IOException e) {\n+      throw new EncoderException(\"Unable to encode NBT CompoundTag\");\n+    }\n+  }\n+\n+  /**\n+   * Reads a String array from the {@code buf}.\n+   * @param buf the buffer to read from\n+   * @return the String array from the buffer\n+   */\n+  public static String[] readStringArray(ByteBuf buf) {\n+    int length = readVarInt(buf);\n+    String[] ret = new String[length];\n+    for (int i = 0; i < length; i++) {\n+      ret[i] = readString(buf);\n+    }\n+    return ret;\n+  }\n+\n+  /**\n+   * Writes a String Array to the {@code buf}.\n+   * @param buf the buffer to write to\n+   * @param stringArray the array to write\n+   */\n+  public static void writeStringArray(ByteBuf buf, String[] stringArray) {\n+    if (stringArray == null) {\n+      writeVarInt(buf, 0);\n+      return;\n+    }\n+    writeVarInt(buf, stringArray.length);\n+    for (int i = 0; i < stringArray.length; i++) {\n+      writeString(buf, stringArray[i]);\n+    }\n+  }\n+\n   /**\n    * Writes a list of {@link com.velocitypowered.api.util.GameProfile.Property} to the buffer.\n    * @param buf the buffer to write to\n", "next_change": {"commit": "5d287306c2458ccaad40621e3d7418215b764c62", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\nindex bb7516aa..2fa1e759 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n", "chunk": "@@ -253,8 +276,8 @@ public enum ProtocolUtils {\n       return;\n     }\n     writeVarInt(buf, stringArray.length);\n-    for (int i = 0; i < stringArray.length; i++) {\n-      writeString(buf, stringArray[i]);\n+    for (String s : stringArray) {\n+      writeString(buf, s);\n     }\n   }\n \n", "next_change": {"commit": "a0a0966f99bff672b9a28d55b464a4ffd5ee4d2e", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\nindex 2fa1e759..a7e0bd43 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n", "chunk": "@@ -271,10 +271,6 @@ public enum ProtocolUtils {\n    * @param stringArray the array to write\n    */\n   public static void writeStringArray(ByteBuf buf, String[] stringArray) {\n-    if (stringArray == null) {\n-      writeVarInt(buf, 0);\n-      return;\n-    }\n     writeVarInt(buf, stringArray.length);\n     for (String s : stringArray) {\n       writeString(buf, s);\n", "next_change": {"commit": "d72d707b1c0dd6215a4984956faf4b2ec4bdbd97", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\nindex a7e0bd43..f18d9c70 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n", "chunk": "@@ -267,7 +357,8 @@ public enum ProtocolUtils {\n \n   /**\n    * Writes a String Array to the {@code buf}.\n-   * @param buf the buffer to write to\n+   *\n+   * @param buf         the buffer to write to\n    * @param stringArray the array to write\n    */\n   public static void writeStringArray(ByteBuf buf, String[] stringArray) {\n", "next_change": null}, {"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\nindex a7e0bd43..f18d9c70 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n", "chunk": "@@ -279,7 +370,8 @@ public enum ProtocolUtils {\n \n   /**\n    * Writes a list of {@link com.velocitypowered.api.util.GameProfile.Property} to the buffer.\n-   * @param buf the buffer to write to\n+   *\n+   * @param buf        the buffer to write to\n    * @param properties the properties to serialize\n    */\n   public static void writeProperties(ByteBuf buf, List<GameProfile.Property> properties) {\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "0dd6fe1ef2783fe1f9322af06c6fd218aa67cdb1", "message": "Merge commit", "committedDate": null}, {"oid": "5c314c9068814aca404b68cf8442af7201bdcf43", "committedDate": "2019-07-01 08:56:22 +0200", "message": "Add 1.7 Protocol Support"}, {"oid": "d0ad0fac360031348e83dee418418c22c5ebf4e4", "committedDate": "2019-07-05 10:59:29 +0200", "message": "Merge branch 'dev/1.1.0' of github.com:VelocityPowered/Velocity"}, {"oid": "592517b9f3b0a042eaa431b77c377096c214f2b0", "committedDate": "2019-08-29 19:58:00 +0200", "message": "Remove unnessecary diff"}, {"oid": "d7bbe7531a89100e10e5a082b6cdc445df9edd72", "committedDate": "2020-05-25 15:58:52 -0400", "message": "Additional protocol hardening."}, {"oid": "ebad3d1005bfba1dc0e9262ddd1fb79a095a03c9", "committedDate": "2020-05-25 16:05:36 -0400", "message": "Use Integer.MIN_VALUE for the sentinel for readVarIntSafely()"}, {"oid": "eeb660ce007ee116264656b7fd8dedcbc84a97b3", "committedDate": "2020-05-26 05:25:03 -0400", "message": "Fix bad ordering"}, {"oid": "cd9bb61f208e3b27da9fbdcb4bf6cafc9135be65", "committedDate": "2020-06-20 23:11:19 -0400", "message": "Merge branch 'future/1.16' of https://github.com/Xernium/Velocity into Xernium-future/1.16"}, {"oid": "ada35ff28698c9cccea50236eda6ec4c291ca13a", "committedDate": "2020-06-20 23:24:32 -0400", "message": "Merge branch 'Xernium-future/1.16' into future/1.16-velocity-1.1.0"}, {"oid": "c2edd82b16660ab75210fb5caabf09d56bd73b28", "committedDate": "2020-06-28 23:13:57 -0400", "message": "Use more idiomatic adventure text serializer"}, {"oid": "72ce5c86ba81942e46baf891295ef9ffa264a780", "committedDate": "2020-07-16 11:44:55 -0400", "message": "Improve Velocity networking pipeline when under stress"}, {"oid": "f9f60e1489ecad64ba657dbe5f8d38e8f004800f", "committedDate": "2020-07-19 18:23:47 -0400", "message": "Small code cleanups and switch more stuff to adventure"}, {"oid": "cab6919a46516026c731e56654bdc6f527bb2540", "committedDate": "2020-08-06 17:38:52 -0400", "message": "Switch to adventure-nbt and fix server switching on 1.16.2-pre3"}, {"oid": "46e34ddb7f4230c3212c547d2cc05fd860212f3e", "committedDate": "2020-08-06 20:53:19 -0400", "message": "Allow serializing legacy hover events"}, {"oid": "a6ddc137ee5c9181e8b1c1d68686bfca0b0e9aa5", "committedDate": "2020-08-21 01:05:04 -0400", "message": "Reduce varint reading cost from max(1, 2n) to n+1 operations on ByteBuf"}, {"oid": "c47d25c88a87048d8ac651044f5c93780904e1b2", "committedDate": "2020-08-21 19:09:04 -0400", "message": "Upgrade to Gradle 6.6 and use SpotBugs."}, {"oid": "5d287306c2458ccaad40621e3d7418215b764c62", "committedDate": "2020-09-01 03:25:15 -0400", "message": "Small code cleanups"}, {"oid": "a0a0966f99bff672b9a28d55b464a4ffd5ee4d2e", "committedDate": "2020-09-23 01:02:19 -0400", "message": "Minor code cleanup"}, {"oid": "03e9fa79d6bbf19ca7446c234d78bb4c400d1854", "committedDate": "2021-01-23 12:55:28 -0500", "message": "Raise limit on JoinGame NBT reading to 2MiB."}, {"oid": "4f6d238b39609933a71c622c592f778c4341a754", "committedDate": "2021-01-29 17:56:50 -0500", "message": "Strictly limit the hostname size and limit it to ASCII characters only"}, {"oid": "501853e807a00b15ad9a181dd76a43e4f8cadd1c", "committedDate": "2021-01-29 17:59:00 -0500", "message": "Fix Checkstyle issue for the umpteenth time..."}, {"oid": "4f80d2b261d0a90d9076474e9e5d55f63fd171d9", "committedDate": "2021-01-29 23:08:14 -0500", "message": "Revert strict handshake hostname checks"}, {"oid": "f88283f1271569de4d8256cab25c5b421ef7ad12", "committedDate": "2021-03-30 12:08:08 -0400", "message": "Revert \"Revert strict handshake hostname checks\""}, {"oid": "514115a85cadcb6983c02fe5acc12ceeddcf7d8b", "committedDate": "2021-03-30 12:10:55 -0400", "message": "Do not use an ASCII string for handshake"}, {"oid": "c747120b20be1853ee02e7b2b67871249a88aa6d", "committedDate": "2021-03-31 16:04:06 -0400", "message": "Relicense the Velocity proxy under the terms of GPLv3 (#448)"}, {"oid": "3db2fe8d63162c716b8ac57ae0898027ecd3a7bb", "committedDate": "2021-05-03 17:31:32 -0400", "message": "Optimize varint writing"}, {"oid": "e531cdb373c654748f3c819b80a5286d9d431d21", "committedDate": "2021-05-03 18:07:25 -0400", "message": "Revert \"Optimize varint writing\""}, {"oid": "4ca97a6df9833ff8b402095698fc9746ab86c1b9", "committedDate": "2021-05-03 19:14:48 -0400", "message": "Reapply \"Optimize varint writing\""}, {"oid": "0debb81392a70f33781756198133414eed5ba7f1", "committedDate": "2021-05-03 20:08:16 -0400", "message": "I was nagged to make it more consistent"}, {"oid": "3dc8e25ec7e9c8f3dac71f0c825dc7cd20fc6ee0", "committedDate": "2021-05-04 16:30:32 -0400", "message": "Fix varint writing (for real!)"}, {"oid": "1cef82d54dda8726dcb5708b69fa51b04c215439", "committedDate": "2021-05-05 22:13:54 -0400", "message": "Unroll the VarInt writing loop"}, {"oid": "fb3f21abc6362bbed6e343ef559fb3d5d25342d1", "committedDate": "2021-05-06 00:48:19 -0400", "message": "More bitshifting magic"}, {"oid": "a8e0516d18b996b3a6aea80de97e017daa6e38a1", "committedDate": "2021-05-07 19:36:30 +0300", "message": "Also do not copy memory in case when packet needs to compress"}, {"oid": "150fd9a9cf239b769fe46f607c95a85a6c197377", "committedDate": "2021-05-08 23:26:43 -0400", "message": "Add highly-optimized VarInt writing method"}, {"oid": "5170da8fd7d4287f6e3530a62b2070cd7901c8cc", "committedDate": "2021-05-09 02:57:01 -0400", "message": "Improve writeVarInt inlining by peeling the two most common cases"}, {"oid": "11ed4b46e4b19a22a10063b03b41be0ae7d55a67", "committedDate": "2021-05-09 02:57:52 -0400", "message": "whoops"}, {"oid": "d97ed956a7be1411b192939abcab8412932230b8", "committedDate": "2022-06-07 21:00:24 -0400", "message": "Update/1.19 (#726)"}, {"oid": "1a3fba4250553702d9dcd05731d04347bfc24c9f", "committedDate": "2022-07-30 19:30:03 -0400", "message": "Update to 1.19.1 (#772)"}, {"oid": "47cd9faf65bb021aa4541b45e373a8e40f195d88", "committedDate": "2022-08-19 22:45:58 -0400", "message": "A char can be 3 bytes (#843)"}, {"oid": "d72d707b1c0dd6215a4984956faf4b2ec4bdbd97", "committedDate": "2023-01-01 17:53:37 -0500", "message": "Convert Velocity buildscripts to Kotlin DSL (#918)"}, {"oid": "b0862d2d16c4ba7560d3f24c824d78793ac3d9e0", "committedDate": "2023-01-01 18:46:33 -0500", "message": "Use Spotless for license formatting"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU0MzI0MQ==", "url": "https://github.com/PaperMC/Velocity/pull/310#discussion_r429543241", "body": "See above", "bodyText": "See above", "bodyHTML": "<p dir=\"auto\">See above</p>", "author": "hugmanrique", "createdAt": "2020-05-23T12:47:09Z", "path": "proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java", "diffHunk": "@@ -153,6 +162,80 @@ public static void writeUuid(ByteBuf buf, UUID uuid) {\n     buf.writeLong(uuid.getLeastSignificantBits());\n   }\n \n+  /**\n+   * Reads an UUID stored as an Integer Array from the {@code buf}.\n+   * @param buf the buffer to read from\n+   * @return the UUID from the buffer\n+   */\n+  public static UUID readUuidIntArray(ByteBuf buf) {\n+    long msbHigh = (long) buf.readInt() << 32;\n+    long msbLow = (long) buf.readInt() & 0xFFFFFFFFL;\n+    long msb = msbHigh | msbLow;\n+    long lsbHigh = (long) buf.readInt() << 32;\n+    long lsbLow = (long) buf.readInt() & 0xFFFFFFFFL;\n+    long lsb = lsbHigh | lsbLow;\n+    return new UUID(msb, lsb);\n+  }\n+\n+  /**\n+   * Writes an UUID as an Integer Array to the {@code buf}.\n+   * @param buf the buffer to write to\n+   * @param uuid the UUID to write\n+   */\n+  public static void writeUuidIntArray(ByteBuf buf, UUID uuid) {\n+    buf.writeInt((int) (uuid.getMostSignificantBits() >> 32));\n+    buf.writeInt((int) uuid.getMostSignificantBits());\n+    buf.writeInt((int) (uuid.getLeastSignificantBits() >> 32));\n+    buf.writeInt((int) uuid.getLeastSignificantBits());\n+  }\n+\n+  /**\n+   * Reads a {@link net.kyori.nbt.CompoundTag} from the {@code buf}.\n+   * @param buf the buffer to read from\n+   * @return {@link net.kyori.nbt.CompoundTag} the CompoundTag from the buffer\n+   */\n+  public static CompoundTag readCompoundTag(ByteBuf buf) {\n+    int indexBefore = buf.readerIndex();\n+    byte startType = buf.readByte();\n+    if (startType == 0) {\n+      throw new DecoderException(\"Invalid NBT start-type (end/empty)\");\n+    }\n+    buf.readerIndex(indexBefore);\n+    try {\n+      DataInput input = new ByteBufInputStream(buf);\n+      byte type = input.readByte();\n+      if (type != 10) {\n+        throw new DecoderException(\"NBTTag is not a CompoundTag\");\n+      }\n+      input.readUTF(); // Head-padding\n+      CompoundTag compoundTag = new CompoundTag();\n+      compoundTag.read(input, 0);\n+      return compoundTag;\n+    } catch (IOException e) {\n+      throw new DecoderException(\"Unable to decode NBT CompoundTag at \" + indexBefore);\n+    }\n+  }\n+\n+  /**\n+   * Writes a CompoundTag to the {@code buf}.\n+   * @param buf the buffer to write to\n+   * @param compoundTag the CompoundTag to write\n+   */\n+  public static void writeCompoundTag(ByteBuf buf, CompoundTag compoundTag) {\n+    if (compoundTag == null) {\n+      buf.writeByte(0);\n+      return;\n+    }\n+    try {\n+      DataOutput output = new ByteBufOutputStream(buf);\n+      output.writeByte(10); // Type 10 - CompoundTag", "originalCommit": "38487c5bba0d2376312f663c47bbea906c32779e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "101a6a58dd7a1c2af13edd897eade28ac92599ba", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\nindex cfedec88..bb7516aa 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n", "chunk": "@@ -227,15 +222,42 @@ public enum ProtocolUtils {\n       return;\n     }\n     try {\n-      DataOutput output = new ByteBufOutputStream(buf);\n-      output.writeByte(10); // Type 10 - CompoundTag\n-      output.writeUTF(\"\"); // Head-padding\n-      compoundTag.write(output);\n+      TagIO.writeDataOutput(compoundTag, new ByteBufOutputStream(buf));\n     } catch (IOException e) {\n       throw new EncoderException(\"Unable to encode NBT CompoundTag\");\n     }\n   }\n \n+  /**\n+   * Reads a String array from the {@code buf}.\n+   * @param buf the buffer to read from\n+   * @return the String array from the buffer\n+   */\n+  public static String[] readStringArray(ByteBuf buf) {\n+    int length = readVarInt(buf);\n+    String[] ret = new String[length];\n+    for (int i = 0; i < length; i++) {\n+      ret[i] = readString(buf);\n+    }\n+    return ret;\n+  }\n+\n+  /**\n+   * Writes a String Array to the {@code buf}.\n+   * @param buf the buffer to write to\n+   * @param stringArray the array to write\n+   */\n+  public static void writeStringArray(ByteBuf buf, String[] stringArray) {\n+    if (stringArray == null) {\n+      writeVarInt(buf, 0);\n+      return;\n+    }\n+    writeVarInt(buf, stringArray.length);\n+    for (int i = 0; i < stringArray.length; i++) {\n+      writeString(buf, stringArray[i]);\n+    }\n+  }\n+\n   /**\n    * Writes a list of {@link com.velocitypowered.api.util.GameProfile.Property} to the buffer.\n    * @param buf the buffer to write to\n", "next_change": null}]}, "revised_code_in_main": {"commit": "0dd6fe1ef2783fe1f9322af06c6fd218aa67cdb1", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\nindex cfedec88..bb7516aa 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n", "chunk": "@@ -227,15 +222,42 @@ public enum ProtocolUtils {\n       return;\n     }\n     try {\n-      DataOutput output = new ByteBufOutputStream(buf);\n-      output.writeByte(10); // Type 10 - CompoundTag\n-      output.writeUTF(\"\"); // Head-padding\n-      compoundTag.write(output);\n+      TagIO.writeDataOutput(compoundTag, new ByteBufOutputStream(buf));\n     } catch (IOException e) {\n       throw new EncoderException(\"Unable to encode NBT CompoundTag\");\n     }\n   }\n \n+  /**\n+   * Reads a String array from the {@code buf}.\n+   * @param buf the buffer to read from\n+   * @return the String array from the buffer\n+   */\n+  public static String[] readStringArray(ByteBuf buf) {\n+    int length = readVarInt(buf);\n+    String[] ret = new String[length];\n+    for (int i = 0; i < length; i++) {\n+      ret[i] = readString(buf);\n+    }\n+    return ret;\n+  }\n+\n+  /**\n+   * Writes a String Array to the {@code buf}.\n+   * @param buf the buffer to write to\n+   * @param stringArray the array to write\n+   */\n+  public static void writeStringArray(ByteBuf buf, String[] stringArray) {\n+    if (stringArray == null) {\n+      writeVarInt(buf, 0);\n+      return;\n+    }\n+    writeVarInt(buf, stringArray.length);\n+    for (int i = 0; i < stringArray.length; i++) {\n+      writeString(buf, stringArray[i]);\n+    }\n+  }\n+\n   /**\n    * Writes a list of {@link com.velocitypowered.api.util.GameProfile.Property} to the buffer.\n    * @param buf the buffer to write to\n", "next_change": {"commit": "5c314c9068814aca404b68cf8442af7201bdcf43", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\nindex bb7516aa..ab6dbc75 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n", "chunk": "@@ -164,102 +160,9 @@ public enum ProtocolUtils {\n     buf.writeLong(uuid.getLeastSignificantBits());\n   }\n \n-  /**\n-   * Reads an UUID stored as an Integer Array from the {@code buf}.\n-   * @param buf the buffer to read from\n-   * @return the UUID from the buffer\n-   */\n-  public static UUID readUuidIntArray(ByteBuf buf) {\n-    long msbHigh = (long) buf.readInt() << 32;\n-    long msbLow = (long) buf.readInt() & 0xFFFFFFFFL;\n-    long msb = msbHigh | msbLow;\n-    long lsbHigh = (long) buf.readInt() << 32;\n-    long lsbLow = (long) buf.readInt() & 0xFFFFFFFFL;\n-    long lsb = lsbHigh | lsbLow;\n-    return new UUID(msb, lsb);\n-  }\n-\n-  /**\n-   * Writes an UUID as an Integer Array to the {@code buf}.\n-   * @param buf the buffer to write to\n-   * @param uuid the UUID to write\n-   */\n-  public static void writeUuidIntArray(ByteBuf buf, UUID uuid) {\n-    buf.writeInt((int) (uuid.getMostSignificantBits() >> 32));\n-    buf.writeInt((int) uuid.getMostSignificantBits());\n-    buf.writeInt((int) (uuid.getLeastSignificantBits() >> 32));\n-    buf.writeInt((int) uuid.getLeastSignificantBits());\n-  }\n-\n-  /**\n-   * Reads a {@link net.kyori.nbt.CompoundTag} from the {@code buf}.\n-   * @param buf the buffer to read from\n-   * @return {@link net.kyori.nbt.CompoundTag} the CompoundTag from the buffer\n-   */\n-  public static CompoundTag readCompoundTag(ByteBuf buf) {\n-    int indexBefore = buf.readerIndex();\n-    byte startType = buf.readByte();\n-    if (startType == 0) {\n-      throw new DecoderException(\"Invalid NBT start-type (end/empty)\");\n-    }\n-    buf.readerIndex(indexBefore);\n-    try {\n-      return TagIO.readDataInput(new ByteBufInputStream(buf));\n-    } catch (IOException thrown) {\n-      throw new DecoderException(\n-              \"Unable to parse NBT CompoundTag, full error: \" + thrown.getMessage());\n-    }\n-  }\n-\n-  /**\n-   * Writes a CompoundTag to the {@code buf}.\n-   * @param buf the buffer to write to\n-   * @param compoundTag the CompoundTag to write\n-   */\n-  public static void writeCompoundTag(ByteBuf buf, CompoundTag compoundTag) {\n-    if (compoundTag == null) {\n-      buf.writeByte(0);\n-      return;\n-    }\n-    try {\n-      TagIO.writeDataOutput(compoundTag, new ByteBufOutputStream(buf));\n-    } catch (IOException e) {\n-      throw new EncoderException(\"Unable to encode NBT CompoundTag\");\n-    }\n-  }\n-\n-  /**\n-   * Reads a String array from the {@code buf}.\n-   * @param buf the buffer to read from\n-   * @return the String array from the buffer\n-   */\n-  public static String[] readStringArray(ByteBuf buf) {\n-    int length = readVarInt(buf);\n-    String[] ret = new String[length];\n-    for (int i = 0; i < length; i++) {\n-      ret[i] = readString(buf);\n-    }\n-    return ret;\n-  }\n-\n-  /**\n-   * Writes a String Array to the {@code buf}.\n-   * @param buf the buffer to write to\n-   * @param stringArray the array to write\n-   */\n-  public static void writeStringArray(ByteBuf buf, String[] stringArray) {\n-    if (stringArray == null) {\n-      writeVarInt(buf, 0);\n-      return;\n-    }\n-    writeVarInt(buf, stringArray.length);\n-    for (int i = 0; i < stringArray.length; i++) {\n-      writeString(buf, stringArray[i]);\n-    }\n-  }\n-\n   /**\n    * Writes a list of {@link com.velocitypowered.api.util.GameProfile.Property} to the buffer.\n+   *\n    * @param buf the buffer to write to\n    * @param properties the properties to serialize\n    */\n", "next_change": {"commit": "592517b9f3b0a042eaa431b77c377096c214f2b0", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\nindex ab6dbc75..55588557 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n", "chunk": "@@ -162,7 +155,6 @@ public enum ProtocolUtils {\n \n   /**\n    * Writes a list of {@link com.velocitypowered.api.util.GameProfile.Property} to the buffer.\n-   *\n    * @param buf the buffer to write to\n    * @param properties the properties to serialize\n    */\n", "next_change": {"commit": "cd9bb61f208e3b27da9fbdcb4bf6cafc9135be65", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\nindex 55588557..bb7516aa 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n", "chunk": "@@ -153,6 +164,100 @@ public enum ProtocolUtils {\n     buf.writeLong(uuid.getLeastSignificantBits());\n   }\n \n+  /**\n+   * Reads an UUID stored as an Integer Array from the {@code buf}.\n+   * @param buf the buffer to read from\n+   * @return the UUID from the buffer\n+   */\n+  public static UUID readUuidIntArray(ByteBuf buf) {\n+    long msbHigh = (long) buf.readInt() << 32;\n+    long msbLow = (long) buf.readInt() & 0xFFFFFFFFL;\n+    long msb = msbHigh | msbLow;\n+    long lsbHigh = (long) buf.readInt() << 32;\n+    long lsbLow = (long) buf.readInt() & 0xFFFFFFFFL;\n+    long lsb = lsbHigh | lsbLow;\n+    return new UUID(msb, lsb);\n+  }\n+\n+  /**\n+   * Writes an UUID as an Integer Array to the {@code buf}.\n+   * @param buf the buffer to write to\n+   * @param uuid the UUID to write\n+   */\n+  public static void writeUuidIntArray(ByteBuf buf, UUID uuid) {\n+    buf.writeInt((int) (uuid.getMostSignificantBits() >> 32));\n+    buf.writeInt((int) uuid.getMostSignificantBits());\n+    buf.writeInt((int) (uuid.getLeastSignificantBits() >> 32));\n+    buf.writeInt((int) uuid.getLeastSignificantBits());\n+  }\n+\n+  /**\n+   * Reads a {@link net.kyori.nbt.CompoundTag} from the {@code buf}.\n+   * @param buf the buffer to read from\n+   * @return {@link net.kyori.nbt.CompoundTag} the CompoundTag from the buffer\n+   */\n+  public static CompoundTag readCompoundTag(ByteBuf buf) {\n+    int indexBefore = buf.readerIndex();\n+    byte startType = buf.readByte();\n+    if (startType == 0) {\n+      throw new DecoderException(\"Invalid NBT start-type (end/empty)\");\n+    }\n+    buf.readerIndex(indexBefore);\n+    try {\n+      return TagIO.readDataInput(new ByteBufInputStream(buf));\n+    } catch (IOException thrown) {\n+      throw new DecoderException(\n+              \"Unable to parse NBT CompoundTag, full error: \" + thrown.getMessage());\n+    }\n+  }\n+\n+  /**\n+   * Writes a CompoundTag to the {@code buf}.\n+   * @param buf the buffer to write to\n+   * @param compoundTag the CompoundTag to write\n+   */\n+  public static void writeCompoundTag(ByteBuf buf, CompoundTag compoundTag) {\n+    if (compoundTag == null) {\n+      buf.writeByte(0);\n+      return;\n+    }\n+    try {\n+      TagIO.writeDataOutput(compoundTag, new ByteBufOutputStream(buf));\n+    } catch (IOException e) {\n+      throw new EncoderException(\"Unable to encode NBT CompoundTag\");\n+    }\n+  }\n+\n+  /**\n+   * Reads a String array from the {@code buf}.\n+   * @param buf the buffer to read from\n+   * @return the String array from the buffer\n+   */\n+  public static String[] readStringArray(ByteBuf buf) {\n+    int length = readVarInt(buf);\n+    String[] ret = new String[length];\n+    for (int i = 0; i < length; i++) {\n+      ret[i] = readString(buf);\n+    }\n+    return ret;\n+  }\n+\n+  /**\n+   * Writes a String Array to the {@code buf}.\n+   * @param buf the buffer to write to\n+   * @param stringArray the array to write\n+   */\n+  public static void writeStringArray(ByteBuf buf, String[] stringArray) {\n+    if (stringArray == null) {\n+      writeVarInt(buf, 0);\n+      return;\n+    }\n+    writeVarInt(buf, stringArray.length);\n+    for (int i = 0; i < stringArray.length; i++) {\n+      writeString(buf, stringArray[i]);\n+    }\n+  }\n+\n   /**\n    * Writes a list of {@link com.velocitypowered.api.util.GameProfile.Property} to the buffer.\n    * @param buf the buffer to write to\n", "next_change": {"commit": "5d287306c2458ccaad40621e3d7418215b764c62", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\nindex bb7516aa..2fa1e759 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n", "chunk": "@@ -253,8 +276,8 @@ public enum ProtocolUtils {\n       return;\n     }\n     writeVarInt(buf, stringArray.length);\n-    for (int i = 0; i < stringArray.length; i++) {\n-      writeString(buf, stringArray[i]);\n+    for (String s : stringArray) {\n+      writeString(buf, s);\n     }\n   }\n \n", "next_change": {"commit": "a0a0966f99bff672b9a28d55b464a4ffd5ee4d2e", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\nindex 2fa1e759..a7e0bd43 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n", "chunk": "@@ -271,10 +271,6 @@ public enum ProtocolUtils {\n    * @param stringArray the array to write\n    */\n   public static void writeStringArray(ByteBuf buf, String[] stringArray) {\n-    if (stringArray == null) {\n-      writeVarInt(buf, 0);\n-      return;\n-    }\n     writeVarInt(buf, stringArray.length);\n     for (String s : stringArray) {\n       writeString(buf, s);\n", "next_change": {"commit": "d72d707b1c0dd6215a4984956faf4b2ec4bdbd97", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\nindex a7e0bd43..f18d9c70 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n", "chunk": "@@ -267,7 +357,8 @@ public enum ProtocolUtils {\n \n   /**\n    * Writes a String Array to the {@code buf}.\n-   * @param buf the buffer to write to\n+   *\n+   * @param buf         the buffer to write to\n    * @param stringArray the array to write\n    */\n   public static void writeStringArray(ByteBuf buf, String[] stringArray) {\n", "next_change": null}, {"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\nindex a7e0bd43..f18d9c70 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n", "chunk": "@@ -279,7 +370,8 @@ public enum ProtocolUtils {\n \n   /**\n    * Writes a list of {@link com.velocitypowered.api.util.GameProfile.Property} to the buffer.\n-   * @param buf the buffer to write to\n+   *\n+   * @param buf        the buffer to write to\n    * @param properties the properties to serialize\n    */\n   public static void writeProperties(ByteBuf buf, List<GameProfile.Property> properties) {\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "0dd6fe1ef2783fe1f9322af06c6fd218aa67cdb1", "message": "Merge commit", "committedDate": null}, {"oid": "5c314c9068814aca404b68cf8442af7201bdcf43", "committedDate": "2019-07-01 08:56:22 +0200", "message": "Add 1.7 Protocol Support"}, {"oid": "d0ad0fac360031348e83dee418418c22c5ebf4e4", "committedDate": "2019-07-05 10:59:29 +0200", "message": "Merge branch 'dev/1.1.0' of github.com:VelocityPowered/Velocity"}, {"oid": "592517b9f3b0a042eaa431b77c377096c214f2b0", "committedDate": "2019-08-29 19:58:00 +0200", "message": "Remove unnessecary diff"}, {"oid": "d7bbe7531a89100e10e5a082b6cdc445df9edd72", "committedDate": "2020-05-25 15:58:52 -0400", "message": "Additional protocol hardening."}, {"oid": "ebad3d1005bfba1dc0e9262ddd1fb79a095a03c9", "committedDate": "2020-05-25 16:05:36 -0400", "message": "Use Integer.MIN_VALUE for the sentinel for readVarIntSafely()"}, {"oid": "eeb660ce007ee116264656b7fd8dedcbc84a97b3", "committedDate": "2020-05-26 05:25:03 -0400", "message": "Fix bad ordering"}, {"oid": "cd9bb61f208e3b27da9fbdcb4bf6cafc9135be65", "committedDate": "2020-06-20 23:11:19 -0400", "message": "Merge branch 'future/1.16' of https://github.com/Xernium/Velocity into Xernium-future/1.16"}, {"oid": "ada35ff28698c9cccea50236eda6ec4c291ca13a", "committedDate": "2020-06-20 23:24:32 -0400", "message": "Merge branch 'Xernium-future/1.16' into future/1.16-velocity-1.1.0"}, {"oid": "c2edd82b16660ab75210fb5caabf09d56bd73b28", "committedDate": "2020-06-28 23:13:57 -0400", "message": "Use more idiomatic adventure text serializer"}, {"oid": "72ce5c86ba81942e46baf891295ef9ffa264a780", "committedDate": "2020-07-16 11:44:55 -0400", "message": "Improve Velocity networking pipeline when under stress"}, {"oid": "f9f60e1489ecad64ba657dbe5f8d38e8f004800f", "committedDate": "2020-07-19 18:23:47 -0400", "message": "Small code cleanups and switch more stuff to adventure"}, {"oid": "cab6919a46516026c731e56654bdc6f527bb2540", "committedDate": "2020-08-06 17:38:52 -0400", "message": "Switch to adventure-nbt and fix server switching on 1.16.2-pre3"}, {"oid": "46e34ddb7f4230c3212c547d2cc05fd860212f3e", "committedDate": "2020-08-06 20:53:19 -0400", "message": "Allow serializing legacy hover events"}, {"oid": "a6ddc137ee5c9181e8b1c1d68686bfca0b0e9aa5", "committedDate": "2020-08-21 01:05:04 -0400", "message": "Reduce varint reading cost from max(1, 2n) to n+1 operations on ByteBuf"}, {"oid": "c47d25c88a87048d8ac651044f5c93780904e1b2", "committedDate": "2020-08-21 19:09:04 -0400", "message": "Upgrade to Gradle 6.6 and use SpotBugs."}, {"oid": "5d287306c2458ccaad40621e3d7418215b764c62", "committedDate": "2020-09-01 03:25:15 -0400", "message": "Small code cleanups"}, {"oid": "a0a0966f99bff672b9a28d55b464a4ffd5ee4d2e", "committedDate": "2020-09-23 01:02:19 -0400", "message": "Minor code cleanup"}, {"oid": "03e9fa79d6bbf19ca7446c234d78bb4c400d1854", "committedDate": "2021-01-23 12:55:28 -0500", "message": "Raise limit on JoinGame NBT reading to 2MiB."}, {"oid": "4f6d238b39609933a71c622c592f778c4341a754", "committedDate": "2021-01-29 17:56:50 -0500", "message": "Strictly limit the hostname size and limit it to ASCII characters only"}, {"oid": "501853e807a00b15ad9a181dd76a43e4f8cadd1c", "committedDate": "2021-01-29 17:59:00 -0500", "message": "Fix Checkstyle issue for the umpteenth time..."}, {"oid": "4f80d2b261d0a90d9076474e9e5d55f63fd171d9", "committedDate": "2021-01-29 23:08:14 -0500", "message": "Revert strict handshake hostname checks"}, {"oid": "f88283f1271569de4d8256cab25c5b421ef7ad12", "committedDate": "2021-03-30 12:08:08 -0400", "message": "Revert \"Revert strict handshake hostname checks\""}, {"oid": "514115a85cadcb6983c02fe5acc12ceeddcf7d8b", "committedDate": "2021-03-30 12:10:55 -0400", "message": "Do not use an ASCII string for handshake"}, {"oid": "c747120b20be1853ee02e7b2b67871249a88aa6d", "committedDate": "2021-03-31 16:04:06 -0400", "message": "Relicense the Velocity proxy under the terms of GPLv3 (#448)"}, {"oid": "3db2fe8d63162c716b8ac57ae0898027ecd3a7bb", "committedDate": "2021-05-03 17:31:32 -0400", "message": "Optimize varint writing"}, {"oid": "e531cdb373c654748f3c819b80a5286d9d431d21", "committedDate": "2021-05-03 18:07:25 -0400", "message": "Revert \"Optimize varint writing\""}, {"oid": "4ca97a6df9833ff8b402095698fc9746ab86c1b9", "committedDate": "2021-05-03 19:14:48 -0400", "message": "Reapply \"Optimize varint writing\""}, {"oid": "0debb81392a70f33781756198133414eed5ba7f1", "committedDate": "2021-05-03 20:08:16 -0400", "message": "I was nagged to make it more consistent"}, {"oid": "3dc8e25ec7e9c8f3dac71f0c825dc7cd20fc6ee0", "committedDate": "2021-05-04 16:30:32 -0400", "message": "Fix varint writing (for real!)"}, {"oid": "1cef82d54dda8726dcb5708b69fa51b04c215439", "committedDate": "2021-05-05 22:13:54 -0400", "message": "Unroll the VarInt writing loop"}, {"oid": "fb3f21abc6362bbed6e343ef559fb3d5d25342d1", "committedDate": "2021-05-06 00:48:19 -0400", "message": "More bitshifting magic"}, {"oid": "a8e0516d18b996b3a6aea80de97e017daa6e38a1", "committedDate": "2021-05-07 19:36:30 +0300", "message": "Also do not copy memory in case when packet needs to compress"}, {"oid": "150fd9a9cf239b769fe46f607c95a85a6c197377", "committedDate": "2021-05-08 23:26:43 -0400", "message": "Add highly-optimized VarInt writing method"}, {"oid": "5170da8fd7d4287f6e3530a62b2070cd7901c8cc", "committedDate": "2021-05-09 02:57:01 -0400", "message": "Improve writeVarInt inlining by peeling the two most common cases"}, {"oid": "11ed4b46e4b19a22a10063b03b41be0ae7d55a67", "committedDate": "2021-05-09 02:57:52 -0400", "message": "whoops"}, {"oid": "d97ed956a7be1411b192939abcab8412932230b8", "committedDate": "2022-06-07 21:00:24 -0400", "message": "Update/1.19 (#726)"}, {"oid": "1a3fba4250553702d9dcd05731d04347bfc24c9f", "committedDate": "2022-07-30 19:30:03 -0400", "message": "Update to 1.19.1 (#772)"}, {"oid": "47cd9faf65bb021aa4541b45e373a8e40f195d88", "committedDate": "2022-08-19 22:45:58 -0400", "message": "A char can be 3 bytes (#843)"}, {"oid": "d72d707b1c0dd6215a4984956faf4b2ec4bdbd97", "committedDate": "2023-01-01 17:53:37 -0500", "message": "Convert Velocity buildscripts to Kotlin DSL (#918)"}, {"oid": "b0862d2d16c4ba7560d3f24c824d78793ac3d9e0", "committedDate": "2023-01-01 18:46:33 -0500", "message": "Use Spotless for license formatting"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU0MzU0OQ==", "url": "https://github.com/PaperMC/Velocity/pull/310#discussion_r429543549", "body": "Minor nit: inconsistent use of `this`. Either use it for setting all fields, or use it for none.", "bodyText": "Minor nit: inconsistent use of this. Either use it for setting all fields, or use it for none.", "bodyHTML": "<p dir=\"auto\">Minor nit: inconsistent use of <code>this</code>. Either use it for setting all fields, or use it for none.</p>", "author": "hugmanrique", "createdAt": "2020-05-23T12:51:35Z", "path": "proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Respawn.java", "diffHunk": "@@ -74,33 +114,57 @@ public String toString() {\n         + \", difficulty=\" + difficulty\n         + \", gamemode=\" + gamemode\n         + \", levelType='\" + levelType + '\\''\n+        + \", shouldKeepPlayerData=\" + shouldKeepPlayerData\n+        + \", isDebug=\" + isDebug\n+        + \", isFlat='\" + isFlat\n+        + \", dimensionRegistryName='\" + dimensionRegistryName + '\\''\n         + '}';\n   }\n \n   @Override\n   public void decode(ByteBuf buf, ProtocolUtils.Direction direction, ProtocolVersion version) {\n-    this.dimension = buf.readInt();\n+    if (version.compareTo(ProtocolVersion.MINECRAFT_1_16) >= 0) {\n+      this.dimensionRegistryName = ProtocolUtils.readString(buf); // Not sure what the cap on that is\n+    } else {\n+      this.dimension = buf.readInt();\n+    }\n     if (version.compareTo(ProtocolVersion.MINECRAFT_1_13_2) <= 0) {\n       this.difficulty = buf.readUnsignedByte();\n     }\n     if (version.compareTo(ProtocolVersion.MINECRAFT_1_15) >= 0) {\n       this.partialHashedSeed = buf.readLong();\n     }\n     this.gamemode = buf.readUnsignedByte();\n-    this.levelType = ProtocolUtils.readString(buf, 16);\n+    if (version.compareTo(ProtocolVersion.MINECRAFT_1_16) >= 0) {\n+      isDebug = buf.readBoolean();\n+      isFlat = buf.readBoolean();\n+      shouldKeepPlayerData = buf.readBoolean();", "originalCommit": "38487c5bba0d2376312f663c47bbea906c32779e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "18e595397660ea6651bb4c86e1bb3a6addf1dd24", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Respawn.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Respawn.java\nindex 0f988a5f..67fafb7f 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Respawn.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Respawn.java\n", "chunk": "@@ -136,8 +110,9 @@ public class Respawn implements MinecraftPacket {\n     }\n     this.gamemode = buf.readUnsignedByte();\n     if (version.compareTo(ProtocolVersion.MINECRAFT_1_16) >= 0) {\n-      isDebug = buf.readBoolean();\n-      isFlat = buf.readBoolean();\n+      boolean isDebug = buf.readBoolean();\n+      boolean isFlat = buf.readBoolean();\n+      this.dimensionInfo = new DimensionInfo(dimensionIdentifier, levelName, isFlat, isDebug);\n       shouldKeepPlayerData = buf.readBoolean();\n     } else {\n       this.levelType = ProtocolUtils.readString(buf, 16);\n", "next_change": {"commit": "6368b47e78a499b7c1cfada8f1d0913a1ca59c8c", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Respawn.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Respawn.java\nindex 67fafb7f..ba12ee9a 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Respawn.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Respawn.java\n", "chunk": "@@ -113,7 +113,7 @@ public class Respawn implements MinecraftPacket {\n       boolean isDebug = buf.readBoolean();\n       boolean isFlat = buf.readBoolean();\n       this.dimensionInfo = new DimensionInfo(dimensionIdentifier, levelName, isFlat, isDebug);\n-      shouldKeepPlayerData = buf.readBoolean();\n+      this.shouldKeepPlayerData = buf.readBoolean();\n     } else {\n       this.levelType = ProtocolUtils.readString(buf, 16);\n     }\n", "next_change": {"commit": "a1ab29186b26145c88f07552f6a1ad81bdd2cc22", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Respawn.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Respawn.java\nindex ba12ee9a..d14e9f8c 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Respawn.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Respawn.java\n", "chunk": "@@ -108,8 +120,9 @@ public class Respawn implements MinecraftPacket {\n     if (version.compareTo(ProtocolVersion.MINECRAFT_1_15) >= 0) {\n       this.partialHashedSeed = buf.readLong();\n     }\n-    this.gamemode = buf.readUnsignedByte();\n+    this.gamemode = buf.readByte();\n     if (version.compareTo(ProtocolVersion.MINECRAFT_1_16) >= 0) {\n+      this.previousGamemode = buf.readByte();\n       boolean isDebug = buf.readBoolean();\n       boolean isFlat = buf.readBoolean();\n       this.dimensionInfo = new DimensionInfo(dimensionIdentifier, levelName, isFlat, isDebug);\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "0dd6fe1ef2783fe1f9322af06c6fd218aa67cdb1", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Respawn.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Respawn.java\nindex 0f988a5f..d14e9f8c 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Respawn.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Respawn.java\n", "chunk": "@@ -134,11 +120,13 @@ public class Respawn implements MinecraftPacket {\n     if (version.compareTo(ProtocolVersion.MINECRAFT_1_15) >= 0) {\n       this.partialHashedSeed = buf.readLong();\n     }\n-    this.gamemode = buf.readUnsignedByte();\n+    this.gamemode = buf.readByte();\n     if (version.compareTo(ProtocolVersion.MINECRAFT_1_16) >= 0) {\n-      isDebug = buf.readBoolean();\n-      isFlat = buf.readBoolean();\n-      shouldKeepPlayerData = buf.readBoolean();\n+      this.previousGamemode = buf.readByte();\n+      boolean isDebug = buf.readBoolean();\n+      boolean isFlat = buf.readBoolean();\n+      this.dimensionInfo = new DimensionInfo(dimensionIdentifier, levelName, isFlat, isDebug);\n+      this.shouldKeepPlayerData = buf.readBoolean();\n     } else {\n       this.levelType = ProtocolUtils.readString(buf, 16);\n     }\n", "next_change": {"commit": "b34b198064780481f669f53960180d39de0254e2", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Respawn.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Respawn.java\nindex d14e9f8c..33ec6619 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Respawn.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Respawn.java\n", "chunk": "@@ -135,8 +147,13 @@ public class Respawn implements MinecraftPacket {\n   @Override\n   public void encode(ByteBuf buf, ProtocolUtils.Direction direction, ProtocolVersion version) {\n     if (version.compareTo(ProtocolVersion.MINECRAFT_1_16) >= 0) {\n-      ProtocolUtils.writeString(buf, dimensionInfo.getRegistryIdentifier());\n-      ProtocolUtils.writeString(buf, dimensionInfo.getLevelName());\n+      if (version.compareTo(ProtocolVersion.MINECRAFT_1_16_2) >= 0) {\n+        ProtocolUtils.writeCompoundTag(buf, currentDimensionData.serializeDimensionDetails());\n+        ProtocolUtils.writeString(buf, dimensionInfo.getRegistryIdentifier());\n+      } else {\n+        ProtocolUtils.writeString(buf, dimensionInfo.getRegistryIdentifier());\n+        ProtocolUtils.writeString(buf, dimensionInfo.getLevelName());\n+      }\n     } else {\n       buf.writeInt(dimension);\n     }\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "0dd6fe1ef2783fe1f9322af06c6fd218aa67cdb1", "message": "Merge commit", "committedDate": null}, {"oid": "cd9bb61f208e3b27da9fbdcb4bf6cafc9135be65", "committedDate": "2020-06-20 23:11:19 -0400", "message": "Merge branch 'future/1.16' of https://github.com/Xernium/Velocity into Xernium-future/1.16"}, {"oid": "b34b198064780481f669f53960180d39de0254e2", "committedDate": "2020-08-06 15:08:50 -0400", "message": "1.16.2-pre3"}, {"oid": "cab6919a46516026c731e56654bdc6f527bb2540", "committedDate": "2020-08-06 17:38:52 -0400", "message": "Switch to adventure-nbt and fix server switching on 1.16.2-pre3"}, {"oid": "03e9fa79d6bbf19ca7446c234d78bb4c400d1854", "committedDate": "2021-01-23 12:55:28 -0500", "message": "Raise limit on JoinGame NBT reading to 2MiB."}, {"oid": "c747120b20be1853ee02e7b2b67871249a88aa6d", "committedDate": "2021-03-31 16:04:06 -0400", "message": "Relicense the Velocity proxy under the terms of GPLv3 (#448)"}, {"oid": "d97ed956a7be1411b192939abcab8412932230b8", "committedDate": "2022-06-07 21:00:24 -0400", "message": "Update/1.19 (#726)"}, {"oid": "c2b237f19665ff482a2948d0afe9db54a0197f11", "committedDate": "2022-06-07 23:35:43 -0400", "message": "DRY - one function to create respawn packets from JoinGame packets"}, {"oid": "b504e0857c02217e89ed47a35aa76af1f00d3a48", "committedDate": "2022-12-07 14:12:48 +0100", "message": "Update to 1.19.3-rc3 (#893)"}, {"oid": "d72d707b1c0dd6215a4984956faf4b2ec4bdbd97", "committedDate": "2023-01-01 17:53:37 -0500", "message": "Convert Velocity buildscripts to Kotlin DSL (#918)"}, {"oid": "b0862d2d16c4ba7560d3f24c824d78793ac3d9e0", "committedDate": "2023-01-01 18:46:33 -0500", "message": "Use Spotless for license formatting"}]}, {"oid": "18e595397660ea6651bb4c86e1bb3a6addf1dd24", "url": "https://github.com/PaperMC/Velocity/commit/18e595397660ea6651bb4c86e1bb3a6addf1dd24", "message": "Save progress", "committedDate": "2020-06-04T13:36:58Z", "type": "commit"}, {"oid": "6734ef3a087ed3f068ee9ce809d93ce31ce844bc", "url": "https://github.com/PaperMC/Velocity/commit/6734ef3a087ed3f068ee9ce809d93ce31ce844bc", "message": "Checkstyle-auto", "committedDate": "2020-06-04T17:13:10Z", "type": "commit"}, {"oid": "009f207883738e3ee1b1fb51adf614fec89b8a4c", "url": "https://github.com/PaperMC/Velocity/commit/009f207883738e3ee1b1fb51adf614fec89b8a4c", "message": "More progress", "committedDate": "2020-06-04T19:21:54Z", "type": "commit"}, {"oid": "368d50b4555a87f0fb5ca734947f098e86ccac96", "url": "https://github.com/PaperMC/Velocity/commit/368d50b4555a87f0fb5ca734947f098e86ccac96", "message": "Rework Dimension Registry", "committedDate": "2020-06-05T13:22:55Z", "type": "commit"}, {"oid": "aa4a8de2fd474325927be5e221534a4f98a7a046", "url": "https://github.com/PaperMC/Velocity/commit/aa4a8de2fd474325927be5e221534a4f98a7a046", "message": "Stylize", "committedDate": "2020-06-05T13:45:11Z", "type": "commit"}, {"oid": "6368b47e78a499b7c1cfada8f1d0913a1ca59c8c", "url": "https://github.com/PaperMC/Velocity/commit/6368b47e78a499b7c1cfada8f1d0913a1ca59c8c", "message": "Old sins", "committedDate": "2020-06-05T13:58:34Z", "type": "commit"}, {"oid": "0377a6829f7b280aa35bb78219cfb86b0321ab64", "url": "https://github.com/PaperMC/Velocity/commit/0377a6829f7b280aa35bb78219cfb86b0321ab64", "message": "Move to Registry", "committedDate": "2020-06-05T14:00:51Z", "type": "commit"}, {"oid": "a2134297350b943c70daeb3572e5ff56043ea80c", "url": "https://github.com/PaperMC/Velocity/commit/a2134297350b943c70daeb3572e5ff56043ea80c", "message": "Merge from indev: 1.16-pre2\n\nFrom indev: 1.16-pre2", "committedDate": "2020-06-05T14:02:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIwMTQzOQ==", "url": "https://github.com/PaperMC/Velocity/pull/310#discussion_r436201439", "body": "`@MonotonicNonNull` may be a better choice here.", "bodyText": "@MonotonicNonNull may be a better choice here.", "bodyHTML": "<p dir=\"auto\"><code>@MonotonicNonNull</code> may be a better choice here.</p>", "author": "astei", "createdAt": "2020-06-05T23:08:51Z", "path": "proxy/src/main/java/com/velocitypowered/proxy/connection/backend/VelocityServerConnection.java", "diffHunk": "@@ -53,6 +53,7 @@\n   private BackendConnectionPhase connectionPhase = BackendConnectionPhases.UNKNOWN;\n   private long lastPingId;\n   private long lastPingSent;\n+  private @Nullable DimensionRegistry activeDimensionRegistry;", "originalCommit": "a2134297350b943c70daeb3572e5ff56043ea80c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f868cea5830fac6fec03fa360fd6650d65de0e20", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/backend/VelocityServerConnection.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/backend/VelocityServerConnection.java\nindex dd3fd6e0..525b5cf2 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/backend/VelocityServerConnection.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/backend/VelocityServerConnection.java\n", "chunk": "@@ -53,7 +55,7 @@ public class VelocityServerConnection implements MinecraftConnectionAssociation,\n   private BackendConnectionPhase connectionPhase = BackendConnectionPhases.UNKNOWN;\n   private long lastPingId;\n   private long lastPingSent;\n-  private @Nullable DimensionRegistry activeDimensionRegistry;\n+  private @MonotonicNonNull DimensionRegistry activeDimensionRegistry;\n \n   /**\n    * Initializes a new server connection.\n", "next_change": null}]}, "revised_code_in_main": {"commit": "0dd6fe1ef2783fe1f9322af06c6fd218aa67cdb1", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/backend/VelocityServerConnection.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/backend/VelocityServerConnection.java\nindex dd3fd6e0..525b5cf2 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/backend/VelocityServerConnection.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/backend/VelocityServerConnection.java\n", "chunk": "@@ -53,7 +55,7 @@ public class VelocityServerConnection implements MinecraftConnectionAssociation,\n   private BackendConnectionPhase connectionPhase = BackendConnectionPhases.UNKNOWN;\n   private long lastPingId;\n   private long lastPingSent;\n-  private @Nullable DimensionRegistry activeDimensionRegistry;\n+  private @MonotonicNonNull DimensionRegistry activeDimensionRegistry;\n \n   /**\n    * Initializes a new server connection.\n", "next_change": {"commit": "11a86e9bb92d7a738e3bf31afc52f8e0747a0ed8", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/backend/VelocityServerConnection.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/backend/VelocityServerConnection.java\nindex 525b5cf2..bb414290 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/backend/VelocityServerConnection.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/backend/VelocityServerConnection.java\n", "chunk": "@@ -55,7 +54,6 @@ public class VelocityServerConnection implements MinecraftConnectionAssociation,\n   private BackendConnectionPhase connectionPhase = BackendConnectionPhases.UNKNOWN;\n   private long lastPingId;\n   private long lastPingSent;\n-  private @MonotonicNonNull DimensionRegistry activeDimensionRegistry;\n \n   /**\n    * Initializes a new server connection.\n", "next_change": {"commit": "cd9bb61f208e3b27da9fbdcb4bf6cafc9135be65", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/backend/VelocityServerConnection.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/backend/VelocityServerConnection.java\nindex bb414290..525b5cf2 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/backend/VelocityServerConnection.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/backend/VelocityServerConnection.java\n", "chunk": "@@ -54,6 +55,7 @@ public class VelocityServerConnection implements MinecraftConnectionAssociation,\n   private BackendConnectionPhase connectionPhase = BackendConnectionPhases.UNKNOWN;\n   private long lastPingId;\n   private long lastPingSent;\n+  private @MonotonicNonNull DimensionRegistry activeDimensionRegistry;\n \n   /**\n    * Initializes a new server connection.\n", "next_change": {"commit": "7aed76ee3deab3b42051e11606173f1f7791174c", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/backend/VelocityServerConnection.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/backend/VelocityServerConnection.java\nindex 525b5cf2..93958663 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/backend/VelocityServerConnection.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/backend/VelocityServerConnection.java\n", "chunk": "@@ -53,8 +46,7 @@ public class VelocityServerConnection implements MinecraftConnectionAssociation,\n   private boolean hasCompletedJoin = false;\n   private boolean gracefulDisconnect = false;\n   private BackendConnectionPhase connectionPhase = BackendConnectionPhases.UNKNOWN;\n-  private long lastPingId;\n-  private long lastPingSent;\n+  private final Map<Long, Long> pendingPings = new HashMap<>();\n   private @MonotonicNonNull DimensionRegistry activeDimensionRegistry;\n \n   /**\n", "next_change": {"commit": "3ae93875b8087fc9bc50ee29ef9a5b8a0a31cca0", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/backend/VelocityServerConnection.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/backend/VelocityServerConnection.java\nindex 93958663..709ea34a 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/backend/VelocityServerConnection.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/backend/VelocityServerConnection.java\n", "chunk": "@@ -52,12 +72,15 @@ public class VelocityServerConnection implements MinecraftConnectionAssociation,\n   /**\n    * Initializes a new server connection.\n    * @param registeredServer the server to connect to\n+   * @param previousServer the server the player is coming from\n    * @param proxyPlayer the player connecting to the server\n    * @param server the Velocity proxy instance\n    */\n   public VelocityServerConnection(VelocityRegisteredServer registeredServer,\n+      @Nullable VelocityRegisteredServer previousServer,\n       ConnectedPlayer proxyPlayer, VelocityServer server) {\n     this.registeredServer = registeredServer;\n+    this.previousServer = previousServer;\n     this.proxyPlayer = proxyPlayer;\n     this.server = server;\n   }\n", "next_change": {"commit": "d72d707b1c0dd6215a4984956faf4b2ec4bdbd97", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/backend/VelocityServerConnection.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/backend/VelocityServerConnection.java\nindex 709ea34a..a7663f2a 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/backend/VelocityServerConnection.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/backend/VelocityServerConnection.java\n", "chunk": "@@ -87,6 +91,7 @@ public class VelocityServerConnection implements MinecraftConnectionAssociation,\n \n   /**\n    * Connects to the server.\n+   *\n    * @return a {@link com.velocitypowered.api.proxy.ConnectionRequestBuilder.Result} representing\n    *         whether or not the connect succeeded\n    */\n", "next_change": null}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "0dd6fe1ef2783fe1f9322af06c6fd218aa67cdb1", "message": "Merge commit", "committedDate": null}, {"oid": "11a86e9bb92d7a738e3bf31afc52f8e0747a0ed8", "committedDate": "2019-07-03 09:20:32 -0400", "message": "Convert Velocity to use ByteBuf-derived plugin message packets"}, {"oid": "6d5bacb26280ac0811359807e2dee5207edd9869", "committedDate": "2019-07-20 00:30:44 -0400", "message": "Minor Netty cleanup"}, {"oid": "1da51b8ffb3bf6cec7faef648becf2fe5781a351", "committedDate": "2019-07-29 05:25:29 -0400", "message": "Batch handshake and server login/ping packets"}, {"oid": "195a506117a3c08182c1da52c8a3c14d59f4dfeb", "committedDate": "2019-08-07 15:02:48 -0400", "message": "Flush consolidation"}, {"oid": "32ef77f9541229d04bdc35c4d5d2ade2ef86b772", "committedDate": "2019-08-07 16:04:34 -0400", "message": "Flush consolidation tweaks"}, {"oid": "e476ee815ab7f7c63586f0d2b41b0579d45192f2", "committedDate": "2019-08-08 08:22:37 -0400", "message": "Revert \"Merge branch 'feature/flush-consolidation' into dev/1.1.0\""}, {"oid": "ca3426033f20a423b8b4a221cbcc241d427f8c98", "committedDate": "2019-08-08 18:00:52 -0400", "message": "Revert \"Revert \"Merge branch 'feature/flush-consolidation' into dev/1.1.0\"\""}, {"oid": "7cb86067bc41185c41712772e4f064ad116047a1", "committedDate": "2019-08-08 18:39:22 -0400", "message": "Lower the explicit flush count"}, {"oid": "dbfbd1e2a982343026ff1b25855ff562ee7bfa99", "committedDate": "2019-08-17 20:17:12 -0400", "message": "Rename ConnectedPlayer#minecraftConnection -> ConnectedPlayer#connection"}, {"oid": "983f3012a67d103d0d12052bea08d0945188b540", "committedDate": "2019-09-07 00:34:08 -0400", "message": "Merge branch 'dev/1.1.0' into feature/flush-consolidation-v2"}, {"oid": "9c9fa1c5ae2979b72ef7cbc621b3025434084167", "committedDate": "2019-09-09 00:47:42 -0400", "message": "Remove flush consolidation for now"}, {"oid": "9d5930d96b6baca44ee6c7177009d6731966ae06", "committedDate": "2019-10-20 00:58:55 -0400", "message": "Integrate BungeeQuack functionality into Velocity"}, {"oid": "0c14eabe6b1ed9ce4b06fc6e8b06cd18c840d35c", "committedDate": "2019-11-26 16:32:50 -0500", "message": "Fix Checkstyle issues"}, {"oid": "e93a510b0f60a47b70bdd6fd4a8f05fc3bebe0d9", "committedDate": "2020-04-13 10:35:26 -0300", "message": "(Implementation) Allow injecting into backend connection"}, {"oid": "e83662e8c37be54e6412db70075e78764adbfaab", "committedDate": "2020-05-29 21:36:58 -0400", "message": "Clean up imports and remove some legacy declarations."}, {"oid": "70abda9c5bf4cccd2cf52a58936c1a25cf5cad48", "committedDate": "2020-06-02 23:48:42 +0100", "message": "Implement legacy forwarding BungeeGuard handshake support"}, {"oid": "2cd9f081c3a7187d1d88d5e6396a526ad9fe1759", "committedDate": "2020-06-03 00:32:27 +0100", "message": "Merge branch 'dev/1.1.0' into feature/bungeeguard"}, {"oid": "c563372ffdd69a1276ca352eb4d03798d9876df7", "committedDate": "2020-06-03 00:35:04 +0100", "message": "Remove unnecessary imports"}, {"oid": "669bd14779f9e673afc852e5a6d7ba1380035964", "committedDate": "2020-06-03 12:18:29 -0400", "message": "Remove duplicate in-flight connection reset"}, {"oid": "cd9bb61f208e3b27da9fbdcb4bf6cafc9135be65", "committedDate": "2020-06-20 23:11:19 -0400", "message": "Merge branch 'future/1.16' of https://github.com/Xernium/Velocity into Xernium-future/1.16"}, {"oid": "ada35ff28698c9cccea50236eda6ec4c291ca13a", "committedDate": "2020-06-20 23:24:32 -0400", "message": "Merge branch 'Xernium-future/1.16' into future/1.16-velocity-1.1.0"}, {"oid": "09f71dede9dd098b058461e035a8bfb1e4bcfd89", "committedDate": "2020-06-20 23:26:24 -0400", "message": "Rebase #310 on Velocity 1.1.0"}, {"oid": "fd231c71fd36ee74a78c0db9144d636e01ae9c77", "committedDate": "2020-06-23 21:57:16 -0400", "message": "Restore server disconnect messages."}, {"oid": "2e7a598916c49917979feca7db7dece0c6abd84e", "committedDate": "2020-06-28 21:23:01 -0400", "message": "Initial commit of adventure-adapted Velocity API."}, {"oid": "7ab56d0ca06eadf60a889577e1bcea1e53787640", "committedDate": "2020-07-27 17:24:04 -0400", "message": "Correctly populate the server address in the Forge case. Fixes #334 (correctly)."}, {"oid": "87bff1a1231acdc784a31c10104d9e864374160d", "committedDate": "2020-08-04 12:14:28 -0400", "message": "Remove nextProtocolVersion from MinecraftConnection"}, {"oid": "7aed76ee3deab3b42051e11606173f1f7791174c", "committedDate": "2021-01-23 18:35:14 -0500", "message": "Use keepalive queue instead of just the last keepalive."}, {"oid": "b88c573eb11839a95bea1af947b0c59a5956368b", "committedDate": "2021-02-01 16:17:02 -0500", "message": "Correctly forward the player's virtual host to the remote server."}, {"oid": "c747120b20be1853ee02e7b2b67871249a88aa6d", "committedDate": "2021-03-31 16:04:06 -0400", "message": "Relicense the Velocity proxy under the terms of GPLv3 (#448)"}, {"oid": "bfe2358386d4d5e8e41ab89079a334d1942edaf9", "committedDate": "2021-09-01 05:03:49 -0400", "message": "Fix legacy handshake with hostnames that include IP addresses (#571)"}, {"oid": "849e416c8d972511b57b164e22db9ab5f0ade918", "committedDate": "2021-09-01 07:14:38 -0400", "message": "Fix IPv6 scope issue in legacy forwarding too"}, {"oid": "effca0da821e45fb76440411b97cc2391372d16c", "committedDate": "2021-09-25 17:51:58 -0400", "message": "Preserve virtual host the player connected to for modern/none forwarding"}, {"oid": "340e1b23d60f507f9b09ea4fe0e8a7689df5fca5", "committedDate": "2021-09-27 00:37:58 -0400", "message": "Fix none vhost forwarding with legacy Forge."}, {"oid": "3ae93875b8087fc9bc50ee29ef9a5b8a0a31cca0", "committedDate": "2022-05-08 23:08:50 -0400", "message": "fix missing server info in some events when kicked from current server (#703)"}, {"oid": "d97ed956a7be1411b192939abcab8412932230b8", "committedDate": "2022-06-07 21:00:24 -0400", "message": "Update/1.19 (#726)"}, {"oid": "b504e0857c02217e89ed47a35aa76af1f00d3a48", "committedDate": "2022-12-07 14:12:48 +0100", "message": "Update to 1.19.3-rc3 (#893)"}, {"oid": "d72d707b1c0dd6215a4984956faf4b2ec4bdbd97", "committedDate": "2023-01-01 17:53:37 -0500", "message": "Convert Velocity buildscripts to Kotlin DSL (#918)"}, {"oid": "b0862d2d16c4ba7560d3f24c824d78793ac3d9e0", "committedDate": "2023-01-01 18:46:33 -0500", "message": "Use Spotless for license formatting"}, {"oid": "3768e66e860c4e914aff91512544082cfb1b0569", "committedDate": "2023-01-01 18:52:11 -0500", "message": "Also use Spotless to remove unused imports"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIwMTYzOA==", "url": "https://github.com/PaperMC/Velocity/pull/310#discussion_r436201638", "body": "Do not use `javax.annotation.*`. Since we follow Checker Framework, just drop the annotation (all fields are presumed to be non-null).", "bodyText": "Do not use javax.annotation.*. Since we follow Checker Framework, just drop the annotation (all fields are presumed to be non-null).", "bodyHTML": "<p dir=\"auto\">Do not use <code>javax.annotation.*</code>. Since we follow Checker Framework, just drop the annotation (all fields are presumed to be non-null).</p>", "author": "astei", "createdAt": "2020-06-05T23:09:52Z", "path": "proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package com.velocitypowered.proxy.connection.registry;\n+\n+import java.util.HashSet;\n+import java.util.NoSuchElementException;\n+import java.util.Set;\n+import javax.annotation.Nonnull;\n+\n+import net.kyori.nbt.CompoundTag;\n+import net.kyori.nbt.ListTag;\n+import net.kyori.nbt.Tag;\n+import net.kyori.nbt.TagType;\n+\n+public class DimensionRegistry {\n+\n+  private final @Nonnull Set<DimensionData> dimensionRegistry;", "originalCommit": "a2134297350b943c70daeb3572e5ff56043ea80c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIzOTI0OA==", "url": "https://github.com/VelocityPowered/Velocity/pull/310#discussion_r436239248", "bodyText": "As discussed on the discord, will do", "author": "Xernium", "createdAt": "2020-06-06T05:13:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIwMTYzOA=="}], "type": "inlineReview", "revised_code": {"commit": "f868cea5830fac6fec03fa360fd6650d65de0e20", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\nindex 303ce3aa..9e5f1af6 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\n", "chunk": "@@ -1,63 +1,65 @@\n package com.velocitypowered.proxy.connection.registry;\n \n-import java.util.HashSet;\n-import java.util.NoSuchElementException;\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Maps;\n+\n+import java.util.Map;\n import java.util.Set;\n-import javax.annotation.Nonnull;\n \n import net.kyori.nbt.CompoundTag;\n import net.kyori.nbt.ListTag;\n import net.kyori.nbt.Tag;\n import net.kyori.nbt.TagType;\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+\n \n-public class DimensionRegistry {\n+public final class DimensionRegistry {\n \n-  private final @Nonnull Set<DimensionData> dimensionRegistry;\n-  private final @Nonnull String[] levelNames;\n+  private final Map<String, DimensionData> registeredDimensions;\n+  private final ImmutableSet<String> levelNames;\n \n   /**\n    * Initializes a new {@link DimensionRegistry} instance.\n    * This registry is required for 1.16+ clients/servers to communicate,\n    * it constrains the dimension types and names the client can be sent\n    * in a Respawn action (dimension change).\n-   * @param dimensionRegistry a populated set containing dimension data types\n-   * @param levelNames a populated {@link Set} of the dimension level names the server offers\n+   * This WILL raise an IllegalArgumentException if the following is not met:\n+   * - At least one valid DimensionData instance is provided\n+   * - At least one valid world name is provided\n+   * @param registeredDimensions a populated {@link ImmutableSet} containing dimension data types\n+   * @param levelNames a populated {@link ImmutableSet} of the level (world) names the server offers\n    */\n-  public DimensionRegistry(Set<DimensionData> dimensionRegistry,\n-                           String[] levelNames) {\n-    if (dimensionRegistry == null || dimensionRegistry.isEmpty()\n-            || levelNames == null || levelNames.length == 0) {\n-      throw new IllegalArgumentException(\n-              \"Dimension registry requires valid arguments, not null and not empty\");\n-    }\n-    this.dimensionRegistry = dimensionRegistry;\n+  public DimensionRegistry(ImmutableSet<DimensionData> registeredDimensions,\n+                            ImmutableSet<String> levelNames) {\n+    Preconditions.checkNotNull(registeredDimensions,\n+            \"registeredDimensions cannot be null\");\n+    Preconditions.checkNotNull(levelNames,\n+            \"levelNames cannot be null\");\n+    Preconditions.checkArgument(registeredDimensions.size() > 0,\n+            \"registeredDimensions needs to be populated\");\n+    Preconditions.checkArgument(levelNames.size() > 0,\n+            \"levelNames needs to populated\");\n+    this.registeredDimensions = Maps.uniqueIndex(\n+            registeredDimensions, DimensionData::getRegistryIdentifier);\n     this.levelNames = levelNames;\n   }\n \n-  public @Nonnull Set<DimensionData> getDimensionRegistry() {\n-    return dimensionRegistry;\n+  public Map<String, DimensionData> getRegisteredDimensions() {\n+    return registeredDimensions;\n   }\n \n-  public @Nonnull String[] getLevelNames() {\n+  public Set<String> getLevelNames() {\n     return levelNames;\n   }\n \n   /**\n    * Returns the internal dimension data type as used by the game.\n    * @param dimensionIdentifier how the dimension is identified by the connection\n-   * @return game dimension data\n+   * @return game dimension data or null if not registered\n    */\n-  public @Nonnull DimensionData getDimensionData(@Nonnull String dimensionIdentifier) {\n-    if (dimensionIdentifier == null) {\n-      throw new IllegalArgumentException(\"Dimension identifier cannot be null!\");\n-    }\n-    for (DimensionData iter : dimensionRegistry) {\n-      if (iter.getRegistryIdentifier().equals(dimensionIdentifier)) {\n-        return iter;\n-      }\n-    }\n-    throw new NoSuchElementException(\"Dimension with identifier \" + dimensionIdentifier\n-            + \" doesn't exist in this Registry!\");\n+  public @Nullable DimensionData getDimensionData(String dimensionIdentifier) {\n+    return registeredDimensions.getOrDefault(dimensionIdentifier, null);\n   }\n \n   /**\n", "next_change": {"commit": "4e5f708bede9c73a74c6eee8bbbaa6bdfc38490e", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\nindex 9e5f1af6..22bf6197 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\n", "chunk": "@@ -59,7 +59,7 @@ public final class DimensionRegistry {\n    * @return game dimension data or null if not registered\n    */\n   public @Nullable DimensionData getDimensionData(String dimensionIdentifier) {\n-    return registeredDimensions.getOrDefault(dimensionIdentifier, null);\n+    return registeredDimensions.get(dimensionIdentifier);\n   }\n \n   /**\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "0dd6fe1ef2783fe1f9322af06c6fd218aa67cdb1", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\nindex 303ce3aa..22bf6197 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\n", "chunk": "@@ -1,63 +1,65 @@\n package com.velocitypowered.proxy.connection.registry;\n \n-import java.util.HashSet;\n-import java.util.NoSuchElementException;\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Maps;\n+\n+import java.util.Map;\n import java.util.Set;\n-import javax.annotation.Nonnull;\n \n import net.kyori.nbt.CompoundTag;\n import net.kyori.nbt.ListTag;\n import net.kyori.nbt.Tag;\n import net.kyori.nbt.TagType;\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+\n \n-public class DimensionRegistry {\n+public final class DimensionRegistry {\n \n-  private final @Nonnull Set<DimensionData> dimensionRegistry;\n-  private final @Nonnull String[] levelNames;\n+  private final Map<String, DimensionData> registeredDimensions;\n+  private final ImmutableSet<String> levelNames;\n \n   /**\n    * Initializes a new {@link DimensionRegistry} instance.\n    * This registry is required for 1.16+ clients/servers to communicate,\n    * it constrains the dimension types and names the client can be sent\n    * in a Respawn action (dimension change).\n-   * @param dimensionRegistry a populated set containing dimension data types\n-   * @param levelNames a populated {@link Set} of the dimension level names the server offers\n+   * This WILL raise an IllegalArgumentException if the following is not met:\n+   * - At least one valid DimensionData instance is provided\n+   * - At least one valid world name is provided\n+   * @param registeredDimensions a populated {@link ImmutableSet} containing dimension data types\n+   * @param levelNames a populated {@link ImmutableSet} of the level (world) names the server offers\n    */\n-  public DimensionRegistry(Set<DimensionData> dimensionRegistry,\n-                           String[] levelNames) {\n-    if (dimensionRegistry == null || dimensionRegistry.isEmpty()\n-            || levelNames == null || levelNames.length == 0) {\n-      throw new IllegalArgumentException(\n-              \"Dimension registry requires valid arguments, not null and not empty\");\n-    }\n-    this.dimensionRegistry = dimensionRegistry;\n+  public DimensionRegistry(ImmutableSet<DimensionData> registeredDimensions,\n+                            ImmutableSet<String> levelNames) {\n+    Preconditions.checkNotNull(registeredDimensions,\n+            \"registeredDimensions cannot be null\");\n+    Preconditions.checkNotNull(levelNames,\n+            \"levelNames cannot be null\");\n+    Preconditions.checkArgument(registeredDimensions.size() > 0,\n+            \"registeredDimensions needs to be populated\");\n+    Preconditions.checkArgument(levelNames.size() > 0,\n+            \"levelNames needs to populated\");\n+    this.registeredDimensions = Maps.uniqueIndex(\n+            registeredDimensions, DimensionData::getRegistryIdentifier);\n     this.levelNames = levelNames;\n   }\n \n-  public @Nonnull Set<DimensionData> getDimensionRegistry() {\n-    return dimensionRegistry;\n+  public Map<String, DimensionData> getRegisteredDimensions() {\n+    return registeredDimensions;\n   }\n \n-  public @Nonnull String[] getLevelNames() {\n+  public Set<String> getLevelNames() {\n     return levelNames;\n   }\n \n   /**\n    * Returns the internal dimension data type as used by the game.\n    * @param dimensionIdentifier how the dimension is identified by the connection\n-   * @return game dimension data\n+   * @return game dimension data or null if not registered\n    */\n-  public @Nonnull DimensionData getDimensionData(@Nonnull String dimensionIdentifier) {\n-    if (dimensionIdentifier == null) {\n-      throw new IllegalArgumentException(\"Dimension identifier cannot be null!\");\n-    }\n-    for (DimensionData iter : dimensionRegistry) {\n-      if (iter.getRegistryIdentifier().equals(dimensionIdentifier)) {\n-        return iter;\n-      }\n-    }\n-    throw new NoSuchElementException(\"Dimension with identifier \" + dimensionIdentifier\n-            + \" doesn't exist in this Registry!\");\n+  public @Nullable DimensionData getDimensionData(String dimensionIdentifier) {\n+    return registeredDimensions.get(dimensionIdentifier);\n   }\n \n   /**\n", "next_change": {"commit": "d72d707b1c0dd6215a4984956faf4b2ec4bdbd97", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\nindex 22bf6197..a9d1e8f3 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\n", "chunk": "@@ -64,6 +83,7 @@ public final class DimensionRegistry {\n \n   /**\n    * Checks a {@link DimensionInfo} against this registry.\n+   *\n    * @param toValidate the {@link DimensionInfo} to validate\n    * @return true: the dimension information is valid for this registry\n    */\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "0dd6fe1ef2783fe1f9322af06c6fd218aa67cdb1", "message": "Merge commit", "committedDate": null}, {"oid": "cd9bb61f208e3b27da9fbdcb4bf6cafc9135be65", "committedDate": "2020-06-20 23:11:19 -0400", "message": "Merge branch 'future/1.16' of https://github.com/Xernium/Velocity into Xernium-future/1.16"}, {"oid": "d79c1d0407b11a39f2b93655e7600777e51e9d98", "committedDate": "2020-08-05 18:13:16 -0400", "message": "Port of #325 for Velocity 1.1.0"}, {"oid": "b34b198064780481f669f53960180d39de0254e2", "committedDate": "2020-08-06 15:08:50 -0400", "message": "1.16.2-pre3"}, {"oid": "cab6919a46516026c731e56654bdc6f527bb2540", "committedDate": "2020-08-06 17:38:52 -0400", "message": "Switch to adventure-nbt and fix server switching on 1.16.2-pre3"}, {"oid": "c747120b20be1853ee02e7b2b67871249a88aa6d", "committedDate": "2021-03-31 16:04:06 -0400", "message": "Relicense the Velocity proxy under the terms of GPLv3 (#448)"}, {"oid": "1a3fba4250553702d9dcd05731d04347bfc24c9f", "committedDate": "2022-07-30 19:30:03 -0400", "message": "Update to 1.19.1 (#772)"}, {"oid": "d72d707b1c0dd6215a4984956faf4b2ec4bdbd97", "committedDate": "2023-01-01 17:53:37 -0500", "message": "Convert Velocity buildscripts to Kotlin DSL (#918)"}, {"oid": "b0862d2d16c4ba7560d3f24c824d78793ac3d9e0", "committedDate": "2023-01-01 18:46:33 -0500", "message": "Use Spotless for license formatting"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIwMTkwNw==", "url": "https://github.com/PaperMC/Velocity/pull/310#discussion_r436201907", "body": "This class is called `DimensionRegistry` and yet we have a field called `dimensionRegistry`. This is confusing. Can we give this a better name?", "bodyText": "This class is called DimensionRegistry and yet we have a field called dimensionRegistry. This is confusing. Can we give this a better name?", "bodyHTML": "<p dir=\"auto\">This class is called <code>DimensionRegistry</code> and yet we have a field called <code>dimensionRegistry</code>. This is confusing. Can we give this a better name?</p>", "author": "astei", "createdAt": "2020-06-05T23:11:12Z", "path": "proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package com.velocitypowered.proxy.connection.registry;\n+\n+import java.util.HashSet;\n+import java.util.NoSuchElementException;\n+import java.util.Set;\n+import javax.annotation.Nonnull;\n+\n+import net.kyori.nbt.CompoundTag;\n+import net.kyori.nbt.ListTag;\n+import net.kyori.nbt.Tag;\n+import net.kyori.nbt.TagType;\n+\n+public class DimensionRegistry {\n+\n+  private final @Nonnull Set<DimensionData> dimensionRegistry;\n+  private final @Nonnull String[] levelNames;\n+\n+  /**\n+   * Initializes a new {@link DimensionRegistry} instance.\n+   * This registry is required for 1.16+ clients/servers to communicate,\n+   * it constrains the dimension types and names the client can be sent\n+   * in a Respawn action (dimension change).\n+   * @param dimensionRegistry a populated set containing dimension data types\n+   * @param levelNames a populated {@link Set} of the dimension level names the server offers\n+   */\n+  public DimensionRegistry(Set<DimensionData> dimensionRegistry,\n+                           String[] levelNames) {\n+    if (dimensionRegistry == null || dimensionRegistry.isEmpty()\n+            || levelNames == null || levelNames.length == 0) {\n+      throw new IllegalArgumentException(\n+              \"Dimension registry requires valid arguments, not null and not empty\");\n+    }\n+    this.dimensionRegistry = dimensionRegistry;\n+    this.levelNames = levelNames;\n+  }\n+\n+  public @Nonnull Set<DimensionData> getDimensionRegistry() {", "originalCommit": "a2134297350b943c70daeb3572e5ff56043ea80c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIzOTIyOQ==", "url": "https://github.com/VelocityPowered/Velocity/pull/310#discussion_r436239229", "bodyText": "Agreed, will clear this up.", "author": "Xernium", "createdAt": "2020-06-06T05:13:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIwMTkwNw=="}], "type": "inlineReview", "revised_code": {"commit": "f868cea5830fac6fec03fa360fd6650d65de0e20", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\nindex 303ce3aa..9e5f1af6 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\n", "chunk": "@@ -1,63 +1,65 @@\n package com.velocitypowered.proxy.connection.registry;\n \n-import java.util.HashSet;\n-import java.util.NoSuchElementException;\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Maps;\n+\n+import java.util.Map;\n import java.util.Set;\n-import javax.annotation.Nonnull;\n \n import net.kyori.nbt.CompoundTag;\n import net.kyori.nbt.ListTag;\n import net.kyori.nbt.Tag;\n import net.kyori.nbt.TagType;\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+\n \n-public class DimensionRegistry {\n+public final class DimensionRegistry {\n \n-  private final @Nonnull Set<DimensionData> dimensionRegistry;\n-  private final @Nonnull String[] levelNames;\n+  private final Map<String, DimensionData> registeredDimensions;\n+  private final ImmutableSet<String> levelNames;\n \n   /**\n    * Initializes a new {@link DimensionRegistry} instance.\n    * This registry is required for 1.16+ clients/servers to communicate,\n    * it constrains the dimension types and names the client can be sent\n    * in a Respawn action (dimension change).\n-   * @param dimensionRegistry a populated set containing dimension data types\n-   * @param levelNames a populated {@link Set} of the dimension level names the server offers\n+   * This WILL raise an IllegalArgumentException if the following is not met:\n+   * - At least one valid DimensionData instance is provided\n+   * - At least one valid world name is provided\n+   * @param registeredDimensions a populated {@link ImmutableSet} containing dimension data types\n+   * @param levelNames a populated {@link ImmutableSet} of the level (world) names the server offers\n    */\n-  public DimensionRegistry(Set<DimensionData> dimensionRegistry,\n-                           String[] levelNames) {\n-    if (dimensionRegistry == null || dimensionRegistry.isEmpty()\n-            || levelNames == null || levelNames.length == 0) {\n-      throw new IllegalArgumentException(\n-              \"Dimension registry requires valid arguments, not null and not empty\");\n-    }\n-    this.dimensionRegistry = dimensionRegistry;\n+  public DimensionRegistry(ImmutableSet<DimensionData> registeredDimensions,\n+                            ImmutableSet<String> levelNames) {\n+    Preconditions.checkNotNull(registeredDimensions,\n+            \"registeredDimensions cannot be null\");\n+    Preconditions.checkNotNull(levelNames,\n+            \"levelNames cannot be null\");\n+    Preconditions.checkArgument(registeredDimensions.size() > 0,\n+            \"registeredDimensions needs to be populated\");\n+    Preconditions.checkArgument(levelNames.size() > 0,\n+            \"levelNames needs to populated\");\n+    this.registeredDimensions = Maps.uniqueIndex(\n+            registeredDimensions, DimensionData::getRegistryIdentifier);\n     this.levelNames = levelNames;\n   }\n \n-  public @Nonnull Set<DimensionData> getDimensionRegistry() {\n-    return dimensionRegistry;\n+  public Map<String, DimensionData> getRegisteredDimensions() {\n+    return registeredDimensions;\n   }\n \n-  public @Nonnull String[] getLevelNames() {\n+  public Set<String> getLevelNames() {\n     return levelNames;\n   }\n \n   /**\n    * Returns the internal dimension data type as used by the game.\n    * @param dimensionIdentifier how the dimension is identified by the connection\n-   * @return game dimension data\n+   * @return game dimension data or null if not registered\n    */\n-  public @Nonnull DimensionData getDimensionData(@Nonnull String dimensionIdentifier) {\n-    if (dimensionIdentifier == null) {\n-      throw new IllegalArgumentException(\"Dimension identifier cannot be null!\");\n-    }\n-    for (DimensionData iter : dimensionRegistry) {\n-      if (iter.getRegistryIdentifier().equals(dimensionIdentifier)) {\n-        return iter;\n-      }\n-    }\n-    throw new NoSuchElementException(\"Dimension with identifier \" + dimensionIdentifier\n-            + \" doesn't exist in this Registry!\");\n+  public @Nullable DimensionData getDimensionData(String dimensionIdentifier) {\n+    return registeredDimensions.getOrDefault(dimensionIdentifier, null);\n   }\n \n   /**\n", "next_change": {"commit": "4e5f708bede9c73a74c6eee8bbbaa6bdfc38490e", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\nindex 9e5f1af6..22bf6197 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\n", "chunk": "@@ -59,7 +59,7 @@ public final class DimensionRegistry {\n    * @return game dimension data or null if not registered\n    */\n   public @Nullable DimensionData getDimensionData(String dimensionIdentifier) {\n-    return registeredDimensions.getOrDefault(dimensionIdentifier, null);\n+    return registeredDimensions.get(dimensionIdentifier);\n   }\n \n   /**\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "0dd6fe1ef2783fe1f9322af06c6fd218aa67cdb1", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\nindex 303ce3aa..22bf6197 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\n", "chunk": "@@ -1,63 +1,65 @@\n package com.velocitypowered.proxy.connection.registry;\n \n-import java.util.HashSet;\n-import java.util.NoSuchElementException;\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Maps;\n+\n+import java.util.Map;\n import java.util.Set;\n-import javax.annotation.Nonnull;\n \n import net.kyori.nbt.CompoundTag;\n import net.kyori.nbt.ListTag;\n import net.kyori.nbt.Tag;\n import net.kyori.nbt.TagType;\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+\n \n-public class DimensionRegistry {\n+public final class DimensionRegistry {\n \n-  private final @Nonnull Set<DimensionData> dimensionRegistry;\n-  private final @Nonnull String[] levelNames;\n+  private final Map<String, DimensionData> registeredDimensions;\n+  private final ImmutableSet<String> levelNames;\n \n   /**\n    * Initializes a new {@link DimensionRegistry} instance.\n    * This registry is required for 1.16+ clients/servers to communicate,\n    * it constrains the dimension types and names the client can be sent\n    * in a Respawn action (dimension change).\n-   * @param dimensionRegistry a populated set containing dimension data types\n-   * @param levelNames a populated {@link Set} of the dimension level names the server offers\n+   * This WILL raise an IllegalArgumentException if the following is not met:\n+   * - At least one valid DimensionData instance is provided\n+   * - At least one valid world name is provided\n+   * @param registeredDimensions a populated {@link ImmutableSet} containing dimension data types\n+   * @param levelNames a populated {@link ImmutableSet} of the level (world) names the server offers\n    */\n-  public DimensionRegistry(Set<DimensionData> dimensionRegistry,\n-                           String[] levelNames) {\n-    if (dimensionRegistry == null || dimensionRegistry.isEmpty()\n-            || levelNames == null || levelNames.length == 0) {\n-      throw new IllegalArgumentException(\n-              \"Dimension registry requires valid arguments, not null and not empty\");\n-    }\n-    this.dimensionRegistry = dimensionRegistry;\n+  public DimensionRegistry(ImmutableSet<DimensionData> registeredDimensions,\n+                            ImmutableSet<String> levelNames) {\n+    Preconditions.checkNotNull(registeredDimensions,\n+            \"registeredDimensions cannot be null\");\n+    Preconditions.checkNotNull(levelNames,\n+            \"levelNames cannot be null\");\n+    Preconditions.checkArgument(registeredDimensions.size() > 0,\n+            \"registeredDimensions needs to be populated\");\n+    Preconditions.checkArgument(levelNames.size() > 0,\n+            \"levelNames needs to populated\");\n+    this.registeredDimensions = Maps.uniqueIndex(\n+            registeredDimensions, DimensionData::getRegistryIdentifier);\n     this.levelNames = levelNames;\n   }\n \n-  public @Nonnull Set<DimensionData> getDimensionRegistry() {\n-    return dimensionRegistry;\n+  public Map<String, DimensionData> getRegisteredDimensions() {\n+    return registeredDimensions;\n   }\n \n-  public @Nonnull String[] getLevelNames() {\n+  public Set<String> getLevelNames() {\n     return levelNames;\n   }\n \n   /**\n    * Returns the internal dimension data type as used by the game.\n    * @param dimensionIdentifier how the dimension is identified by the connection\n-   * @return game dimension data\n+   * @return game dimension data or null if not registered\n    */\n-  public @Nonnull DimensionData getDimensionData(@Nonnull String dimensionIdentifier) {\n-    if (dimensionIdentifier == null) {\n-      throw new IllegalArgumentException(\"Dimension identifier cannot be null!\");\n-    }\n-    for (DimensionData iter : dimensionRegistry) {\n-      if (iter.getRegistryIdentifier().equals(dimensionIdentifier)) {\n-        return iter;\n-      }\n-    }\n-    throw new NoSuchElementException(\"Dimension with identifier \" + dimensionIdentifier\n-            + \" doesn't exist in this Registry!\");\n+  public @Nullable DimensionData getDimensionData(String dimensionIdentifier) {\n+    return registeredDimensions.get(dimensionIdentifier);\n   }\n \n   /**\n", "next_change": {"commit": "d72d707b1c0dd6215a4984956faf4b2ec4bdbd97", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\nindex 22bf6197..a9d1e8f3 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\n", "chunk": "@@ -64,6 +83,7 @@ public final class DimensionRegistry {\n \n   /**\n    * Checks a {@link DimensionInfo} against this registry.\n+   *\n    * @param toValidate the {@link DimensionInfo} to validate\n    * @return true: the dimension information is valid for this registry\n    */\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "0dd6fe1ef2783fe1f9322af06c6fd218aa67cdb1", "message": "Merge commit", "committedDate": null}, {"oid": "cd9bb61f208e3b27da9fbdcb4bf6cafc9135be65", "committedDate": "2020-06-20 23:11:19 -0400", "message": "Merge branch 'future/1.16' of https://github.com/Xernium/Velocity into Xernium-future/1.16"}, {"oid": "d79c1d0407b11a39f2b93655e7600777e51e9d98", "committedDate": "2020-08-05 18:13:16 -0400", "message": "Port of #325 for Velocity 1.1.0"}, {"oid": "b34b198064780481f669f53960180d39de0254e2", "committedDate": "2020-08-06 15:08:50 -0400", "message": "1.16.2-pre3"}, {"oid": "cab6919a46516026c731e56654bdc6f527bb2540", "committedDate": "2020-08-06 17:38:52 -0400", "message": "Switch to adventure-nbt and fix server switching on 1.16.2-pre3"}, {"oid": "c747120b20be1853ee02e7b2b67871249a88aa6d", "committedDate": "2021-03-31 16:04:06 -0400", "message": "Relicense the Velocity proxy under the terms of GPLv3 (#448)"}, {"oid": "1a3fba4250553702d9dcd05731d04347bfc24c9f", "committedDate": "2022-07-30 19:30:03 -0400", "message": "Update to 1.19.1 (#772)"}, {"oid": "d72d707b1c0dd6215a4984956faf4b2ec4bdbd97", "committedDate": "2023-01-01 17:53:37 -0500", "message": "Convert Velocity buildscripts to Kotlin DSL (#918)"}, {"oid": "b0862d2d16c4ba7560d3f24c824d78793ac3d9e0", "committedDate": "2023-01-01 18:46:33 -0500", "message": "Use Spotless for license formatting"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIwMjExNg==", "url": "https://github.com/PaperMC/Velocity/pull/310#discussion_r436202116", "body": "This won't hold up merging this in, but perhaps we can consider using a map of dimension IDs to dimension data (try Guava `Maps.uniqueIndex`).", "bodyText": "This won't hold up merging this in, but perhaps we can consider using a map of dimension IDs to dimension data (try Guava Maps.uniqueIndex).", "bodyHTML": "<p dir=\"auto\">This won't hold up merging this in, but perhaps we can consider using a map of dimension IDs to dimension data (try Guava <code>Maps.uniqueIndex</code>).</p>", "author": "astei", "createdAt": "2020-06-05T23:12:22Z", "path": "proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package com.velocitypowered.proxy.connection.registry;\n+\n+import java.util.HashSet;\n+import java.util.NoSuchElementException;\n+import java.util.Set;\n+import javax.annotation.Nonnull;\n+\n+import net.kyori.nbt.CompoundTag;\n+import net.kyori.nbt.ListTag;\n+import net.kyori.nbt.Tag;\n+import net.kyori.nbt.TagType;\n+\n+public class DimensionRegistry {\n+\n+  private final @Nonnull Set<DimensionData> dimensionRegistry;\n+  private final @Nonnull String[] levelNames;\n+\n+  /**\n+   * Initializes a new {@link DimensionRegistry} instance.\n+   * This registry is required for 1.16+ clients/servers to communicate,\n+   * it constrains the dimension types and names the client can be sent\n+   * in a Respawn action (dimension change).\n+   * @param dimensionRegistry a populated set containing dimension data types\n+   * @param levelNames a populated {@link Set} of the dimension level names the server offers\n+   */\n+  public DimensionRegistry(Set<DimensionData> dimensionRegistry,\n+                           String[] levelNames) {\n+    if (dimensionRegistry == null || dimensionRegistry.isEmpty()\n+            || levelNames == null || levelNames.length == 0) {\n+      throw new IllegalArgumentException(\n+              \"Dimension registry requires valid arguments, not null and not empty\");\n+    }\n+    this.dimensionRegistry = dimensionRegistry;\n+    this.levelNames = levelNames;\n+  }\n+\n+  public @Nonnull Set<DimensionData> getDimensionRegistry() {\n+    return dimensionRegistry;\n+  }\n+\n+  public @Nonnull String[] getLevelNames() {\n+    return levelNames;\n+  }\n+\n+  /**\n+   * Returns the internal dimension data type as used by the game.\n+   * @param dimensionIdentifier how the dimension is identified by the connection\n+   * @return game dimension data\n+   */\n+  public @Nonnull DimensionData getDimensionData(@Nonnull String dimensionIdentifier) {\n+    if (dimensionIdentifier == null) {\n+      throw new IllegalArgumentException(\"Dimension identifier cannot be null!\");\n+    }\n+    for (DimensionData iter : dimensionRegistry) {", "originalCommit": "a2134297350b943c70daeb3572e5ff56043ea80c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIzOTEzNg==", "url": "https://github.com/VelocityPowered/Velocity/pull/310#discussion_r436239136", "bodyText": "I had that but I dropped it because I felt like it\u2019s a waste of space seeing as the DimensionData object already needs to store that", "author": "Xernium", "createdAt": "2020-06-06T05:12:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIwMjExNg=="}], "type": "inlineReview", "revised_code": {"commit": "f868cea5830fac6fec03fa360fd6650d65de0e20", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\nindex 303ce3aa..9e5f1af6 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\n", "chunk": "@@ -1,63 +1,65 @@\n package com.velocitypowered.proxy.connection.registry;\n \n-import java.util.HashSet;\n-import java.util.NoSuchElementException;\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Maps;\n+\n+import java.util.Map;\n import java.util.Set;\n-import javax.annotation.Nonnull;\n \n import net.kyori.nbt.CompoundTag;\n import net.kyori.nbt.ListTag;\n import net.kyori.nbt.Tag;\n import net.kyori.nbt.TagType;\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+\n \n-public class DimensionRegistry {\n+public final class DimensionRegistry {\n \n-  private final @Nonnull Set<DimensionData> dimensionRegistry;\n-  private final @Nonnull String[] levelNames;\n+  private final Map<String, DimensionData> registeredDimensions;\n+  private final ImmutableSet<String> levelNames;\n \n   /**\n    * Initializes a new {@link DimensionRegistry} instance.\n    * This registry is required for 1.16+ clients/servers to communicate,\n    * it constrains the dimension types and names the client can be sent\n    * in a Respawn action (dimension change).\n-   * @param dimensionRegistry a populated set containing dimension data types\n-   * @param levelNames a populated {@link Set} of the dimension level names the server offers\n+   * This WILL raise an IllegalArgumentException if the following is not met:\n+   * - At least one valid DimensionData instance is provided\n+   * - At least one valid world name is provided\n+   * @param registeredDimensions a populated {@link ImmutableSet} containing dimension data types\n+   * @param levelNames a populated {@link ImmutableSet} of the level (world) names the server offers\n    */\n-  public DimensionRegistry(Set<DimensionData> dimensionRegistry,\n-                           String[] levelNames) {\n-    if (dimensionRegistry == null || dimensionRegistry.isEmpty()\n-            || levelNames == null || levelNames.length == 0) {\n-      throw new IllegalArgumentException(\n-              \"Dimension registry requires valid arguments, not null and not empty\");\n-    }\n-    this.dimensionRegistry = dimensionRegistry;\n+  public DimensionRegistry(ImmutableSet<DimensionData> registeredDimensions,\n+                            ImmutableSet<String> levelNames) {\n+    Preconditions.checkNotNull(registeredDimensions,\n+            \"registeredDimensions cannot be null\");\n+    Preconditions.checkNotNull(levelNames,\n+            \"levelNames cannot be null\");\n+    Preconditions.checkArgument(registeredDimensions.size() > 0,\n+            \"registeredDimensions needs to be populated\");\n+    Preconditions.checkArgument(levelNames.size() > 0,\n+            \"levelNames needs to populated\");\n+    this.registeredDimensions = Maps.uniqueIndex(\n+            registeredDimensions, DimensionData::getRegistryIdentifier);\n     this.levelNames = levelNames;\n   }\n \n-  public @Nonnull Set<DimensionData> getDimensionRegistry() {\n-    return dimensionRegistry;\n+  public Map<String, DimensionData> getRegisteredDimensions() {\n+    return registeredDimensions;\n   }\n \n-  public @Nonnull String[] getLevelNames() {\n+  public Set<String> getLevelNames() {\n     return levelNames;\n   }\n \n   /**\n    * Returns the internal dimension data type as used by the game.\n    * @param dimensionIdentifier how the dimension is identified by the connection\n-   * @return game dimension data\n+   * @return game dimension data or null if not registered\n    */\n-  public @Nonnull DimensionData getDimensionData(@Nonnull String dimensionIdentifier) {\n-    if (dimensionIdentifier == null) {\n-      throw new IllegalArgumentException(\"Dimension identifier cannot be null!\");\n-    }\n-    for (DimensionData iter : dimensionRegistry) {\n-      if (iter.getRegistryIdentifier().equals(dimensionIdentifier)) {\n-        return iter;\n-      }\n-    }\n-    throw new NoSuchElementException(\"Dimension with identifier \" + dimensionIdentifier\n-            + \" doesn't exist in this Registry!\");\n+  public @Nullable DimensionData getDimensionData(String dimensionIdentifier) {\n+    return registeredDimensions.getOrDefault(dimensionIdentifier, null);\n   }\n \n   /**\n", "next_change": {"commit": "4e5f708bede9c73a74c6eee8bbbaa6bdfc38490e", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\nindex 9e5f1af6..22bf6197 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\n", "chunk": "@@ -59,7 +59,7 @@ public final class DimensionRegistry {\n    * @return game dimension data or null if not registered\n    */\n   public @Nullable DimensionData getDimensionData(String dimensionIdentifier) {\n-    return registeredDimensions.getOrDefault(dimensionIdentifier, null);\n+    return registeredDimensions.get(dimensionIdentifier);\n   }\n \n   /**\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "0dd6fe1ef2783fe1f9322af06c6fd218aa67cdb1", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\nindex 303ce3aa..22bf6197 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\n", "chunk": "@@ -1,63 +1,65 @@\n package com.velocitypowered.proxy.connection.registry;\n \n-import java.util.HashSet;\n-import java.util.NoSuchElementException;\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Maps;\n+\n+import java.util.Map;\n import java.util.Set;\n-import javax.annotation.Nonnull;\n \n import net.kyori.nbt.CompoundTag;\n import net.kyori.nbt.ListTag;\n import net.kyori.nbt.Tag;\n import net.kyori.nbt.TagType;\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+\n \n-public class DimensionRegistry {\n+public final class DimensionRegistry {\n \n-  private final @Nonnull Set<DimensionData> dimensionRegistry;\n-  private final @Nonnull String[] levelNames;\n+  private final Map<String, DimensionData> registeredDimensions;\n+  private final ImmutableSet<String> levelNames;\n \n   /**\n    * Initializes a new {@link DimensionRegistry} instance.\n    * This registry is required for 1.16+ clients/servers to communicate,\n    * it constrains the dimension types and names the client can be sent\n    * in a Respawn action (dimension change).\n-   * @param dimensionRegistry a populated set containing dimension data types\n-   * @param levelNames a populated {@link Set} of the dimension level names the server offers\n+   * This WILL raise an IllegalArgumentException if the following is not met:\n+   * - At least one valid DimensionData instance is provided\n+   * - At least one valid world name is provided\n+   * @param registeredDimensions a populated {@link ImmutableSet} containing dimension data types\n+   * @param levelNames a populated {@link ImmutableSet} of the level (world) names the server offers\n    */\n-  public DimensionRegistry(Set<DimensionData> dimensionRegistry,\n-                           String[] levelNames) {\n-    if (dimensionRegistry == null || dimensionRegistry.isEmpty()\n-            || levelNames == null || levelNames.length == 0) {\n-      throw new IllegalArgumentException(\n-              \"Dimension registry requires valid arguments, not null and not empty\");\n-    }\n-    this.dimensionRegistry = dimensionRegistry;\n+  public DimensionRegistry(ImmutableSet<DimensionData> registeredDimensions,\n+                            ImmutableSet<String> levelNames) {\n+    Preconditions.checkNotNull(registeredDimensions,\n+            \"registeredDimensions cannot be null\");\n+    Preconditions.checkNotNull(levelNames,\n+            \"levelNames cannot be null\");\n+    Preconditions.checkArgument(registeredDimensions.size() > 0,\n+            \"registeredDimensions needs to be populated\");\n+    Preconditions.checkArgument(levelNames.size() > 0,\n+            \"levelNames needs to populated\");\n+    this.registeredDimensions = Maps.uniqueIndex(\n+            registeredDimensions, DimensionData::getRegistryIdentifier);\n     this.levelNames = levelNames;\n   }\n \n-  public @Nonnull Set<DimensionData> getDimensionRegistry() {\n-    return dimensionRegistry;\n+  public Map<String, DimensionData> getRegisteredDimensions() {\n+    return registeredDimensions;\n   }\n \n-  public @Nonnull String[] getLevelNames() {\n+  public Set<String> getLevelNames() {\n     return levelNames;\n   }\n \n   /**\n    * Returns the internal dimension data type as used by the game.\n    * @param dimensionIdentifier how the dimension is identified by the connection\n-   * @return game dimension data\n+   * @return game dimension data or null if not registered\n    */\n-  public @Nonnull DimensionData getDimensionData(@Nonnull String dimensionIdentifier) {\n-    if (dimensionIdentifier == null) {\n-      throw new IllegalArgumentException(\"Dimension identifier cannot be null!\");\n-    }\n-    for (DimensionData iter : dimensionRegistry) {\n-      if (iter.getRegistryIdentifier().equals(dimensionIdentifier)) {\n-        return iter;\n-      }\n-    }\n-    throw new NoSuchElementException(\"Dimension with identifier \" + dimensionIdentifier\n-            + \" doesn't exist in this Registry!\");\n+  public @Nullable DimensionData getDimensionData(String dimensionIdentifier) {\n+    return registeredDimensions.get(dimensionIdentifier);\n   }\n \n   /**\n", "next_change": {"commit": "d72d707b1c0dd6215a4984956faf4b2ec4bdbd97", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\nindex 22bf6197..a9d1e8f3 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\n", "chunk": "@@ -64,6 +83,7 @@ public final class DimensionRegistry {\n \n   /**\n    * Checks a {@link DimensionInfo} against this registry.\n+   *\n    * @param toValidate the {@link DimensionInfo} to validate\n    * @return true: the dimension information is valid for this registry\n    */\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "0dd6fe1ef2783fe1f9322af06c6fd218aa67cdb1", "message": "Merge commit", "committedDate": null}, {"oid": "cd9bb61f208e3b27da9fbdcb4bf6cafc9135be65", "committedDate": "2020-06-20 23:11:19 -0400", "message": "Merge branch 'future/1.16' of https://github.com/Xernium/Velocity into Xernium-future/1.16"}, {"oid": "d79c1d0407b11a39f2b93655e7600777e51e9d98", "committedDate": "2020-08-05 18:13:16 -0400", "message": "Port of #325 for Velocity 1.1.0"}, {"oid": "b34b198064780481f669f53960180d39de0254e2", "committedDate": "2020-08-06 15:08:50 -0400", "message": "1.16.2-pre3"}, {"oid": "cab6919a46516026c731e56654bdc6f527bb2540", "committedDate": "2020-08-06 17:38:52 -0400", "message": "Switch to adventure-nbt and fix server switching on 1.16.2-pre3"}, {"oid": "c747120b20be1853ee02e7b2b67871249a88aa6d", "committedDate": "2021-03-31 16:04:06 -0400", "message": "Relicense the Velocity proxy under the terms of GPLv3 (#448)"}, {"oid": "1a3fba4250553702d9dcd05731d04347bfc24c9f", "committedDate": "2022-07-30 19:30:03 -0400", "message": "Update to 1.19.1 (#772)"}, {"oid": "d72d707b1c0dd6215a4984956faf4b2ec4bdbd97", "committedDate": "2023-01-01 17:53:37 -0500", "message": "Convert Velocity buildscripts to Kotlin DSL (#918)"}, {"oid": "b0862d2d16c4ba7560d3f24c824d78793ac3d9e0", "committedDate": "2023-01-01 18:46:33 -0500", "message": "Use Spotless for license formatting"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIwMjg5OA==", "url": "https://github.com/PaperMC/Velocity/pull/310#discussion_r436202898", "body": "Do not use exceptions as a control-flow mechanism", "bodyText": "Do not use exceptions as a control-flow mechanism", "bodyHTML": "<p dir=\"auto\">Do not use exceptions as a control-flow mechanism</p>", "author": "astei", "createdAt": "2020-06-05T23:15:58Z", "path": "proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package com.velocitypowered.proxy.connection.registry;\n+\n+import java.util.HashSet;\n+import java.util.NoSuchElementException;\n+import java.util.Set;\n+import javax.annotation.Nonnull;\n+\n+import net.kyori.nbt.CompoundTag;\n+import net.kyori.nbt.ListTag;\n+import net.kyori.nbt.Tag;\n+import net.kyori.nbt.TagType;\n+\n+public class DimensionRegistry {\n+\n+  private final @Nonnull Set<DimensionData> dimensionRegistry;\n+  private final @Nonnull String[] levelNames;\n+\n+  /**\n+   * Initializes a new {@link DimensionRegistry} instance.\n+   * This registry is required for 1.16+ clients/servers to communicate,\n+   * it constrains the dimension types and names the client can be sent\n+   * in a Respawn action (dimension change).\n+   * @param dimensionRegistry a populated set containing dimension data types\n+   * @param levelNames a populated {@link Set} of the dimension level names the server offers\n+   */\n+  public DimensionRegistry(Set<DimensionData> dimensionRegistry,\n+                           String[] levelNames) {\n+    if (dimensionRegistry == null || dimensionRegistry.isEmpty()\n+            || levelNames == null || levelNames.length == 0) {\n+      throw new IllegalArgumentException(\n+              \"Dimension registry requires valid arguments, not null and not empty\");\n+    }\n+    this.dimensionRegistry = dimensionRegistry;\n+    this.levelNames = levelNames;\n+  }\n+\n+  public @Nonnull Set<DimensionData> getDimensionRegistry() {\n+    return dimensionRegistry;\n+  }\n+\n+  public @Nonnull String[] getLevelNames() {\n+    return levelNames;\n+  }\n+\n+  /**\n+   * Returns the internal dimension data type as used by the game.\n+   * @param dimensionIdentifier how the dimension is identified by the connection\n+   * @return game dimension data\n+   */\n+  public @Nonnull DimensionData getDimensionData(@Nonnull String dimensionIdentifier) {\n+    if (dimensionIdentifier == null) {\n+      throw new IllegalArgumentException(\"Dimension identifier cannot be null!\");\n+    }\n+    for (DimensionData iter : dimensionRegistry) {\n+      if (iter.getRegistryIdentifier().equals(dimensionIdentifier)) {\n+        return iter;\n+      }\n+    }\n+    throw new NoSuchElementException(\"Dimension with identifier \" + dimensionIdentifier\n+            + \" doesn't exist in this Registry!\");\n+  }\n+\n+  /**\n+   * Checks a {@link DimensionInfo} against this registry.\n+   * @param toValidate the {@link DimensionInfo} to validate\n+   * @return true: the dimension information is valid for this registry\n+   */\n+  public boolean isValidFor(@Nonnull DimensionInfo toValidate) {\n+    if (toValidate == null) {\n+      throw new IllegalArgumentException(\"Dimension info cannot be null\");\n+    }\n+    try {\n+      getDimensionData(toValidate.getRegistryIdentifier());\n+      for (int i = 0; i < levelNames.length; i++) {\n+        if (levelNames[i].equals(toValidate.getRegistryIdentifier())) {\n+          return true;\n+        }\n+      }\n+      return false;\n+    } catch (NoSuchElementException thrown) {", "originalCommit": "a2134297350b943c70daeb3572e5ff56043ea80c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f868cea5830fac6fec03fa360fd6650d65de0e20", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\nindex 303ce3aa..9e5f1af6 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\n", "chunk": "@@ -65,21 +67,12 @@ public class DimensionRegistry {\n    * @param toValidate the {@link DimensionInfo} to validate\n    * @return true: the dimension information is valid for this registry\n    */\n-  public boolean isValidFor(@Nonnull DimensionInfo toValidate) {\n+  public boolean isValidFor(DimensionInfo toValidate) {\n     if (toValidate == null) {\n-      throw new IllegalArgumentException(\"Dimension info cannot be null\");\n-    }\n-    try {\n-      getDimensionData(toValidate.getRegistryIdentifier());\n-      for (int i = 0; i < levelNames.length; i++) {\n-        if (levelNames[i].equals(toValidate.getRegistryIdentifier())) {\n-          return true;\n-        }\n-      }\n-      return false;\n-    } catch (NoSuchElementException thrown) {\n       return false;\n     }\n+    return registeredDimensions.containsKey(toValidate.getRegistryIdentifier())\n+            && levelNames.contains(toValidate.getLevelName());\n   }\n \n   /**\n", "next_change": null}]}, "revised_code_in_main": {"commit": "0dd6fe1ef2783fe1f9322af06c6fd218aa67cdb1", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\nindex 303ce3aa..22bf6197 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\n", "chunk": "@@ -65,21 +67,12 @@ public class DimensionRegistry {\n    * @param toValidate the {@link DimensionInfo} to validate\n    * @return true: the dimension information is valid for this registry\n    */\n-  public boolean isValidFor(@Nonnull DimensionInfo toValidate) {\n+  public boolean isValidFor(DimensionInfo toValidate) {\n     if (toValidate == null) {\n-      throw new IllegalArgumentException(\"Dimension info cannot be null\");\n-    }\n-    try {\n-      getDimensionData(toValidate.getRegistryIdentifier());\n-      for (int i = 0; i < levelNames.length; i++) {\n-        if (levelNames[i].equals(toValidate.getRegistryIdentifier())) {\n-          return true;\n-        }\n-      }\n-      return false;\n-    } catch (NoSuchElementException thrown) {\n       return false;\n     }\n+    return registeredDimensions.containsKey(toValidate.getRegistryIdentifier())\n+            && levelNames.contains(toValidate.getLevelName());\n   }\n \n   /**\n", "next_change": {"commit": "d79c1d0407b11a39f2b93655e7600777e51e9d98", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\nindex 22bf6197..aa584449 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\n", "chunk": "@@ -72,36 +73,31 @@ public final class DimensionRegistry {\n       return false;\n     }\n     return registeredDimensions.containsKey(toValidate.getRegistryIdentifier())\n-            && levelNames.contains(toValidate.getLevelName());\n+        && levelNames.contains(toValidate.getLevelName());\n   }\n \n   /**\n    * Encodes the stored Dimension registry as CompoundTag.\n    * @return the CompoundTag containing identifier:type mappings\n    */\n-  public CompoundTag encodeRegistry() {\n-    CompoundTag ret = new CompoundTag();\n+  public ListTag encodeRegistry(ProtocolVersion version) {\n     ListTag list = new ListTag(TagType.COMPOUND);\n     for (DimensionData iter : registeredDimensions.values()) {\n-      list.add(iter.encodeAsCompundTag());\n+      list.add(iter.encodeAsCompoundTag(version));\n     }\n-    ret.put(\"dimension\", list);\n-    return ret;\n+    return list;\n   }\n \n   /**\n    * Decodes a CompoundTag storing a dimension registry.\n    * @param toParse CompoundTag containing a dimension registry\n    */\n-  public static ImmutableSet<DimensionData> fromGameData(CompoundTag toParse) {\n-    Preconditions.checkNotNull(toParse, \"CompoundTag cannot be null\");\n-    Preconditions.checkArgument(toParse.contains(\"dimension\", TagType.LIST),\n-            \"CompoundTag does not contain a dimension list\");\n-    ListTag dimensions = toParse.getList(\"dimension\");\n+  public static ImmutableSet<DimensionData> fromGameData(ListTag toParse, ProtocolVersion version) {\n+    Preconditions.checkNotNull(toParse, \"ListTag cannot be null\");\n     ImmutableSet.Builder<DimensionData> mappings = ImmutableSet.builder();\n-    for (Tag iter : dimensions) {\n+    for (Tag iter : toParse) {\n       if (iter instanceof CompoundTag) {\n-        mappings.add(DimensionData.decodeCompoundTag((CompoundTag) iter));\n+        mappings.add(DimensionData.decodeCompoundTag((CompoundTag) iter, version));\n       }\n     }\n     return mappings.build();\n", "next_change": {"commit": "b34b198064780481f669f53960180d39de0254e2", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\nindex aa584449..5cc07f8d 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\n", "chunk": "@@ -97,7 +97,7 @@ public final class DimensionRegistry {\n     ImmutableSet.Builder<DimensionData> mappings = ImmutableSet.builder();\n     for (Tag iter : toParse) {\n       if (iter instanceof CompoundTag) {\n-        mappings.add(DimensionData.decodeCompoundTag((CompoundTag) iter, version));\n+        mappings.add(DimensionData.decodeRegistryEntry((CompoundTag) iter, version));\n       }\n     }\n     return mappings.build();\n", "next_change": {"commit": "cab6919a46516026c731e56654bdc6f527bb2540", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\nindex 5cc07f8d..36a902b6 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\n", "chunk": "@@ -80,24 +79,26 @@ public final class DimensionRegistry {\n    * Encodes the stored Dimension registry as CompoundTag.\n    * @return the CompoundTag containing identifier:type mappings\n    */\n-  public ListTag encodeRegistry(ProtocolVersion version) {\n-    ListTag list = new ListTag(TagType.COMPOUND);\n+  public ListBinaryTag encodeRegistry(ProtocolVersion version) {\n+    ListBinaryTag.Builder<CompoundBinaryTag> listBuilder = ListBinaryTag\n+        .builder(BinaryTagTypes.COMPOUND);\n     for (DimensionData iter : registeredDimensions.values()) {\n-      list.add(iter.encodeAsCompoundTag(version));\n+      listBuilder.add(iter.encodeAsCompoundTag(version));\n     }\n-    return list;\n+    return listBuilder.build();\n   }\n \n   /**\n    * Decodes a CompoundTag storing a dimension registry.\n    * @param toParse CompoundTag containing a dimension registry\n    */\n-  public static ImmutableSet<DimensionData> fromGameData(ListTag toParse, ProtocolVersion version) {\n+  public static ImmutableSet<DimensionData> fromGameData(ListBinaryTag toParse,\n+      ProtocolVersion version) {\n     Preconditions.checkNotNull(toParse, \"ListTag cannot be null\");\n     ImmutableSet.Builder<DimensionData> mappings = ImmutableSet.builder();\n-    for (Tag iter : toParse) {\n-      if (iter instanceof CompoundTag) {\n-        mappings.add(DimensionData.decodeRegistryEntry((CompoundTag) iter, version));\n+    for (BinaryTag iter : toParse) {\n+      if (iter instanceof CompoundBinaryTag) {\n+        mappings.add(DimensionData.decodeRegistryEntry((CompoundBinaryTag) iter, version));\n       }\n     }\n     return mappings.build();\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "0dd6fe1ef2783fe1f9322af06c6fd218aa67cdb1", "message": "Merge commit", "committedDate": null}, {"oid": "cd9bb61f208e3b27da9fbdcb4bf6cafc9135be65", "committedDate": "2020-06-20 23:11:19 -0400", "message": "Merge branch 'future/1.16' of https://github.com/Xernium/Velocity into Xernium-future/1.16"}, {"oid": "d79c1d0407b11a39f2b93655e7600777e51e9d98", "committedDate": "2020-08-05 18:13:16 -0400", "message": "Port of #325 for Velocity 1.1.0"}, {"oid": "b34b198064780481f669f53960180d39de0254e2", "committedDate": "2020-08-06 15:08:50 -0400", "message": "1.16.2-pre3"}, {"oid": "cab6919a46516026c731e56654bdc6f527bb2540", "committedDate": "2020-08-06 17:38:52 -0400", "message": "Switch to adventure-nbt and fix server switching on 1.16.2-pre3"}, {"oid": "c747120b20be1853ee02e7b2b67871249a88aa6d", "committedDate": "2021-03-31 16:04:06 -0400", "message": "Relicense the Velocity proxy under the terms of GPLv3 (#448)"}, {"oid": "1a3fba4250553702d9dcd05731d04347bfc24c9f", "committedDate": "2022-07-30 19:30:03 -0400", "message": "Update to 1.19.1 (#772)"}, {"oid": "d72d707b1c0dd6215a4984956faf4b2ec4bdbd97", "committedDate": "2023-01-01 17:53:37 -0500", "message": "Convert Velocity buildscripts to Kotlin DSL (#918)"}, {"oid": "b0862d2d16c4ba7560d3f24c824d78793ac3d9e0", "committedDate": "2023-01-01 18:46:33 -0500", "message": "Use Spotless for license formatting"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIwMzAxMg==", "url": "https://github.com/PaperMC/Velocity/pull/310#discussion_r436203012", "body": "Can we make this class immutable if possible?", "bodyText": "Can we make this class immutable if possible?", "bodyHTML": "<p dir=\"auto\">Can we make this class immutable if possible?</p>", "author": "astei", "createdAt": "2020-06-05T23:16:27Z", "path": "proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package com.velocitypowered.proxy.connection.registry;\n+\n+import java.util.HashSet;\n+import java.util.NoSuchElementException;\n+import java.util.Set;\n+import javax.annotation.Nonnull;\n+\n+import net.kyori.nbt.CompoundTag;\n+import net.kyori.nbt.ListTag;\n+import net.kyori.nbt.Tag;\n+import net.kyori.nbt.TagType;\n+\n+public class DimensionRegistry {", "originalCommit": "a2134297350b943c70daeb3572e5ff56043ea80c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIzOTAwNQ==", "url": "https://github.com/VelocityPowered/Velocity/pull/310#discussion_r436239005", "bodyText": "Fair, all of the three classes should be. Will do.", "author": "Xernium", "createdAt": "2020-06-06T05:10:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIwMzAxMg=="}], "type": "inlineReview", "revised_code": {"commit": "f868cea5830fac6fec03fa360fd6650d65de0e20", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\nindex 303ce3aa..9e5f1af6 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\n", "chunk": "@@ -1,63 +1,65 @@\n package com.velocitypowered.proxy.connection.registry;\n \n-import java.util.HashSet;\n-import java.util.NoSuchElementException;\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Maps;\n+\n+import java.util.Map;\n import java.util.Set;\n-import javax.annotation.Nonnull;\n \n import net.kyori.nbt.CompoundTag;\n import net.kyori.nbt.ListTag;\n import net.kyori.nbt.Tag;\n import net.kyori.nbt.TagType;\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+\n \n-public class DimensionRegistry {\n+public final class DimensionRegistry {\n \n-  private final @Nonnull Set<DimensionData> dimensionRegistry;\n-  private final @Nonnull String[] levelNames;\n+  private final Map<String, DimensionData> registeredDimensions;\n+  private final ImmutableSet<String> levelNames;\n \n   /**\n    * Initializes a new {@link DimensionRegistry} instance.\n    * This registry is required for 1.16+ clients/servers to communicate,\n    * it constrains the dimension types and names the client can be sent\n    * in a Respawn action (dimension change).\n-   * @param dimensionRegistry a populated set containing dimension data types\n-   * @param levelNames a populated {@link Set} of the dimension level names the server offers\n+   * This WILL raise an IllegalArgumentException if the following is not met:\n+   * - At least one valid DimensionData instance is provided\n+   * - At least one valid world name is provided\n+   * @param registeredDimensions a populated {@link ImmutableSet} containing dimension data types\n+   * @param levelNames a populated {@link ImmutableSet} of the level (world) names the server offers\n    */\n-  public DimensionRegistry(Set<DimensionData> dimensionRegistry,\n-                           String[] levelNames) {\n-    if (dimensionRegistry == null || dimensionRegistry.isEmpty()\n-            || levelNames == null || levelNames.length == 0) {\n-      throw new IllegalArgumentException(\n-              \"Dimension registry requires valid arguments, not null and not empty\");\n-    }\n-    this.dimensionRegistry = dimensionRegistry;\n+  public DimensionRegistry(ImmutableSet<DimensionData> registeredDimensions,\n+                            ImmutableSet<String> levelNames) {\n+    Preconditions.checkNotNull(registeredDimensions,\n+            \"registeredDimensions cannot be null\");\n+    Preconditions.checkNotNull(levelNames,\n+            \"levelNames cannot be null\");\n+    Preconditions.checkArgument(registeredDimensions.size() > 0,\n+            \"registeredDimensions needs to be populated\");\n+    Preconditions.checkArgument(levelNames.size() > 0,\n+            \"levelNames needs to populated\");\n+    this.registeredDimensions = Maps.uniqueIndex(\n+            registeredDimensions, DimensionData::getRegistryIdentifier);\n     this.levelNames = levelNames;\n   }\n \n-  public @Nonnull Set<DimensionData> getDimensionRegistry() {\n-    return dimensionRegistry;\n+  public Map<String, DimensionData> getRegisteredDimensions() {\n+    return registeredDimensions;\n   }\n \n-  public @Nonnull String[] getLevelNames() {\n+  public Set<String> getLevelNames() {\n     return levelNames;\n   }\n \n   /**\n    * Returns the internal dimension data type as used by the game.\n    * @param dimensionIdentifier how the dimension is identified by the connection\n-   * @return game dimension data\n+   * @return game dimension data or null if not registered\n    */\n-  public @Nonnull DimensionData getDimensionData(@Nonnull String dimensionIdentifier) {\n-    if (dimensionIdentifier == null) {\n-      throw new IllegalArgumentException(\"Dimension identifier cannot be null!\");\n-    }\n-    for (DimensionData iter : dimensionRegistry) {\n-      if (iter.getRegistryIdentifier().equals(dimensionIdentifier)) {\n-        return iter;\n-      }\n-    }\n-    throw new NoSuchElementException(\"Dimension with identifier \" + dimensionIdentifier\n-            + \" doesn't exist in this Registry!\");\n+  public @Nullable DimensionData getDimensionData(String dimensionIdentifier) {\n+    return registeredDimensions.getOrDefault(dimensionIdentifier, null);\n   }\n \n   /**\n", "next_change": {"commit": "4e5f708bede9c73a74c6eee8bbbaa6bdfc38490e", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\nindex 9e5f1af6..22bf6197 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\n", "chunk": "@@ -59,7 +59,7 @@ public final class DimensionRegistry {\n    * @return game dimension data or null if not registered\n    */\n   public @Nullable DimensionData getDimensionData(String dimensionIdentifier) {\n-    return registeredDimensions.getOrDefault(dimensionIdentifier, null);\n+    return registeredDimensions.get(dimensionIdentifier);\n   }\n \n   /**\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "0dd6fe1ef2783fe1f9322af06c6fd218aa67cdb1", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\nindex 303ce3aa..22bf6197 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\n", "chunk": "@@ -1,63 +1,65 @@\n package com.velocitypowered.proxy.connection.registry;\n \n-import java.util.HashSet;\n-import java.util.NoSuchElementException;\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Maps;\n+\n+import java.util.Map;\n import java.util.Set;\n-import javax.annotation.Nonnull;\n \n import net.kyori.nbt.CompoundTag;\n import net.kyori.nbt.ListTag;\n import net.kyori.nbt.Tag;\n import net.kyori.nbt.TagType;\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+\n \n-public class DimensionRegistry {\n+public final class DimensionRegistry {\n \n-  private final @Nonnull Set<DimensionData> dimensionRegistry;\n-  private final @Nonnull String[] levelNames;\n+  private final Map<String, DimensionData> registeredDimensions;\n+  private final ImmutableSet<String> levelNames;\n \n   /**\n    * Initializes a new {@link DimensionRegistry} instance.\n    * This registry is required for 1.16+ clients/servers to communicate,\n    * it constrains the dimension types and names the client can be sent\n    * in a Respawn action (dimension change).\n-   * @param dimensionRegistry a populated set containing dimension data types\n-   * @param levelNames a populated {@link Set} of the dimension level names the server offers\n+   * This WILL raise an IllegalArgumentException if the following is not met:\n+   * - At least one valid DimensionData instance is provided\n+   * - At least one valid world name is provided\n+   * @param registeredDimensions a populated {@link ImmutableSet} containing dimension data types\n+   * @param levelNames a populated {@link ImmutableSet} of the level (world) names the server offers\n    */\n-  public DimensionRegistry(Set<DimensionData> dimensionRegistry,\n-                           String[] levelNames) {\n-    if (dimensionRegistry == null || dimensionRegistry.isEmpty()\n-            || levelNames == null || levelNames.length == 0) {\n-      throw new IllegalArgumentException(\n-              \"Dimension registry requires valid arguments, not null and not empty\");\n-    }\n-    this.dimensionRegistry = dimensionRegistry;\n+  public DimensionRegistry(ImmutableSet<DimensionData> registeredDimensions,\n+                            ImmutableSet<String> levelNames) {\n+    Preconditions.checkNotNull(registeredDimensions,\n+            \"registeredDimensions cannot be null\");\n+    Preconditions.checkNotNull(levelNames,\n+            \"levelNames cannot be null\");\n+    Preconditions.checkArgument(registeredDimensions.size() > 0,\n+            \"registeredDimensions needs to be populated\");\n+    Preconditions.checkArgument(levelNames.size() > 0,\n+            \"levelNames needs to populated\");\n+    this.registeredDimensions = Maps.uniqueIndex(\n+            registeredDimensions, DimensionData::getRegistryIdentifier);\n     this.levelNames = levelNames;\n   }\n \n-  public @Nonnull Set<DimensionData> getDimensionRegistry() {\n-    return dimensionRegistry;\n+  public Map<String, DimensionData> getRegisteredDimensions() {\n+    return registeredDimensions;\n   }\n \n-  public @Nonnull String[] getLevelNames() {\n+  public Set<String> getLevelNames() {\n     return levelNames;\n   }\n \n   /**\n    * Returns the internal dimension data type as used by the game.\n    * @param dimensionIdentifier how the dimension is identified by the connection\n-   * @return game dimension data\n+   * @return game dimension data or null if not registered\n    */\n-  public @Nonnull DimensionData getDimensionData(@Nonnull String dimensionIdentifier) {\n-    if (dimensionIdentifier == null) {\n-      throw new IllegalArgumentException(\"Dimension identifier cannot be null!\");\n-    }\n-    for (DimensionData iter : dimensionRegistry) {\n-      if (iter.getRegistryIdentifier().equals(dimensionIdentifier)) {\n-        return iter;\n-      }\n-    }\n-    throw new NoSuchElementException(\"Dimension with identifier \" + dimensionIdentifier\n-            + \" doesn't exist in this Registry!\");\n+  public @Nullable DimensionData getDimensionData(String dimensionIdentifier) {\n+    return registeredDimensions.get(dimensionIdentifier);\n   }\n \n   /**\n", "next_change": {"commit": "d72d707b1c0dd6215a4984956faf4b2ec4bdbd97", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\nindex 22bf6197..a9d1e8f3 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\n", "chunk": "@@ -64,6 +83,7 @@ public final class DimensionRegistry {\n \n   /**\n    * Checks a {@link DimensionInfo} against this registry.\n+   *\n    * @param toValidate the {@link DimensionInfo} to validate\n    * @return true: the dimension information is valid for this registry\n    */\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "0dd6fe1ef2783fe1f9322af06c6fd218aa67cdb1", "message": "Merge commit", "committedDate": null}, {"oid": "cd9bb61f208e3b27da9fbdcb4bf6cafc9135be65", "committedDate": "2020-06-20 23:11:19 -0400", "message": "Merge branch 'future/1.16' of https://github.com/Xernium/Velocity into Xernium-future/1.16"}, {"oid": "d79c1d0407b11a39f2b93655e7600777e51e9d98", "committedDate": "2020-08-05 18:13:16 -0400", "message": "Port of #325 for Velocity 1.1.0"}, {"oid": "b34b198064780481f669f53960180d39de0254e2", "committedDate": "2020-08-06 15:08:50 -0400", "message": "1.16.2-pre3"}, {"oid": "cab6919a46516026c731e56654bdc6f527bb2540", "committedDate": "2020-08-06 17:38:52 -0400", "message": "Switch to adventure-nbt and fix server switching on 1.16.2-pre3"}, {"oid": "c747120b20be1853ee02e7b2b67871249a88aa6d", "committedDate": "2021-03-31 16:04:06 -0400", "message": "Relicense the Velocity proxy under the terms of GPLv3 (#448)"}, {"oid": "1a3fba4250553702d9dcd05731d04347bfc24c9f", "committedDate": "2022-07-30 19:30:03 -0400", "message": "Update to 1.19.1 (#772)"}, {"oid": "d72d707b1c0dd6215a4984956faf4b2ec4bdbd97", "committedDate": "2023-01-01 17:53:37 -0500", "message": "Convert Velocity buildscripts to Kotlin DSL (#918)"}, {"oid": "b0862d2d16c4ba7560d3f24c824d78793ac3d9e0", "committedDate": "2023-01-01 18:46:33 -0500", "message": "Use Spotless for license formatting"}]}, {"oid": "f868cea5830fac6fec03fa360fd6650d65de0e20", "url": "https://github.com/PaperMC/Velocity/commit/f868cea5830fac6fec03fa360fd6650d65de0e20", "message": "Move to proper API", "committedDate": "2020-06-06T22:14:23Z", "type": "commit"}, {"oid": "ef5b9cf183da0eda038374f01dc342bbea5d2d40", "url": "https://github.com/PaperMC/Velocity/commit/ef5b9cf183da0eda038374f01dc342bbea5d2d40", "message": "Sync to IDE", "committedDate": "2020-06-06T22:22:11Z", "type": "commit"}, {"oid": "3ed5e7718c918bbdded6c9654dc656110966244b", "url": "https://github.com/PaperMC/Velocity/commit/3ed5e7718c918bbdded6c9654dc656110966244b", "message": "Fix logic error", "committedDate": "2020-06-06T22:33:06Z", "type": "commit"}, {"oid": "c004e5769d50092a9d4c549bc9a1857f37f9bc86", "url": "https://github.com/PaperMC/Velocity/commit/c004e5769d50092a9d4c549bc9a1857f37f9bc86", "message": "Merge Cleanup from indev\n\nCleanup", "committedDate": "2020-06-06T22:36:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMwNjE0NQ==", "url": "https://github.com/PaperMC/Velocity/pull/310#discussion_r436306145", "body": "Can be replaced with `registeredDimensions.get(dimensionIdentifier)`", "bodyText": "Can be replaced with registeredDimensions.get(dimensionIdentifier)", "bodyHTML": "<p dir=\"auto\">Can be replaced with <code>registeredDimensions.get(dimensionIdentifier)</code></p>", "author": "astei", "createdAt": "2020-06-06T22:38:56Z", "path": "proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java", "diffHunk": "@@ -0,0 +1,109 @@\n+package com.velocitypowered.proxy.connection.registry;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Maps;\n+\n+import java.util.Map;\n+import java.util.Set;\n+\n+import net.kyori.nbt.CompoundTag;\n+import net.kyori.nbt.ListTag;\n+import net.kyori.nbt.Tag;\n+import net.kyori.nbt.TagType;\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+\n+\n+public final class DimensionRegistry {\n+\n+  private final Map<String, DimensionData> registeredDimensions;\n+  private final ImmutableSet<String> levelNames;\n+\n+  /**\n+   * Initializes a new {@link DimensionRegistry} instance.\n+   * This registry is required for 1.16+ clients/servers to communicate,\n+   * it constrains the dimension types and names the client can be sent\n+   * in a Respawn action (dimension change).\n+   * This WILL raise an IllegalArgumentException if the following is not met:\n+   * - At least one valid DimensionData instance is provided\n+   * - At least one valid world name is provided\n+   * @param registeredDimensions a populated {@link ImmutableSet} containing dimension data types\n+   * @param levelNames a populated {@link ImmutableSet} of the level (world) names the server offers\n+   */\n+  public DimensionRegistry(ImmutableSet<DimensionData> registeredDimensions,\n+                            ImmutableSet<String> levelNames) {\n+    Preconditions.checkNotNull(registeredDimensions,\n+            \"registeredDimensions cannot be null\");\n+    Preconditions.checkNotNull(levelNames,\n+            \"levelNames cannot be null\");\n+    Preconditions.checkArgument(registeredDimensions.size() > 0,\n+            \"registeredDimensions needs to be populated\");\n+    Preconditions.checkArgument(levelNames.size() > 0,\n+            \"levelNames needs to populated\");\n+    this.registeredDimensions = Maps.uniqueIndex(\n+            registeredDimensions, DimensionData::getRegistryIdentifier);\n+    this.levelNames = levelNames;\n+  }\n+\n+  public Map<String, DimensionData> getRegisteredDimensions() {\n+    return registeredDimensions;\n+  }\n+\n+  public Set<String> getLevelNames() {\n+    return levelNames;\n+  }\n+\n+  /**\n+   * Returns the internal dimension data type as used by the game.\n+   * @param dimensionIdentifier how the dimension is identified by the connection\n+   * @return game dimension data or null if not registered\n+   */\n+  public @Nullable DimensionData getDimensionData(String dimensionIdentifier) {\n+    return registeredDimensions.getOrDefault(dimensionIdentifier, null);", "originalCommit": "c004e5769d50092a9d4c549bc9a1857f37f9bc86", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMwNjUwNQ==", "url": "https://github.com/VelocityPowered/Velocity/pull/310#discussion_r436306505", "bodyText": "Ah I just read up that it returns null in java for a map key that does not have a value and does NOT throw an exception instead, my bad, will fix.", "author": "Xernium", "createdAt": "2020-06-06T22:45:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMwNjE0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "4e5f708bede9c73a74c6eee8bbbaa6bdfc38490e", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\nindex 4122d09e..22bf6197 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\n", "chunk": "@@ -59,7 +59,7 @@ public final class DimensionRegistry {\n    * @return game dimension data or null if not registered\n    */\n   public @Nullable DimensionData getDimensionData(String dimensionIdentifier) {\n-    return registeredDimensions.getOrDefault(dimensionIdentifier, null);\n+    return registeredDimensions.get(dimensionIdentifier);\n   }\n \n   /**\n", "next_change": null}]}, "revised_code_in_main": {"commit": "0dd6fe1ef2783fe1f9322af06c6fd218aa67cdb1", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\nindex 4122d09e..22bf6197 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\n", "chunk": "@@ -59,7 +59,7 @@ public final class DimensionRegistry {\n    * @return game dimension data or null if not registered\n    */\n   public @Nullable DimensionData getDimensionData(String dimensionIdentifier) {\n-    return registeredDimensions.getOrDefault(dimensionIdentifier, null);\n+    return registeredDimensions.get(dimensionIdentifier);\n   }\n \n   /**\n", "next_change": {"commit": "d72d707b1c0dd6215a4984956faf4b2ec4bdbd97", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\nindex 22bf6197..a9d1e8f3 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\n", "chunk": "@@ -64,6 +83,7 @@ public final class DimensionRegistry {\n \n   /**\n    * Checks a {@link DimensionInfo} against this registry.\n+   *\n    * @param toValidate the {@link DimensionInfo} to validate\n    * @return true: the dimension information is valid for this registry\n    */\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "0dd6fe1ef2783fe1f9322af06c6fd218aa67cdb1", "message": "Merge commit", "committedDate": null}, {"oid": "cd9bb61f208e3b27da9fbdcb4bf6cafc9135be65", "committedDate": "2020-06-20 23:11:19 -0400", "message": "Merge branch 'future/1.16' of https://github.com/Xernium/Velocity into Xernium-future/1.16"}, {"oid": "d79c1d0407b11a39f2b93655e7600777e51e9d98", "committedDate": "2020-08-05 18:13:16 -0400", "message": "Port of #325 for Velocity 1.1.0"}, {"oid": "b34b198064780481f669f53960180d39de0254e2", "committedDate": "2020-08-06 15:08:50 -0400", "message": "1.16.2-pre3"}, {"oid": "cab6919a46516026c731e56654bdc6f527bb2540", "committedDate": "2020-08-06 17:38:52 -0400", "message": "Switch to adventure-nbt and fix server switching on 1.16.2-pre3"}, {"oid": "c747120b20be1853ee02e7b2b67871249a88aa6d", "committedDate": "2021-03-31 16:04:06 -0400", "message": "Relicense the Velocity proxy under the terms of GPLv3 (#448)"}, {"oid": "1a3fba4250553702d9dcd05731d04347bfc24c9f", "committedDate": "2022-07-30 19:30:03 -0400", "message": "Update to 1.19.1 (#772)"}, {"oid": "d72d707b1c0dd6215a4984956faf4b2ec4bdbd97", "committedDate": "2023-01-01 17:53:37 -0500", "message": "Convert Velocity buildscripts to Kotlin DSL (#918)"}, {"oid": "b0862d2d16c4ba7560d3f24c824d78793ac3d9e0", "committedDate": "2023-01-01 18:46:33 -0500", "message": "Use Spotless for license formatting"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMwNjE3OA==", "url": "https://github.com/PaperMC/Velocity/pull/310#discussion_r436306178", "body": "It's not a good practice to pass `Optional` as a parameter. Mark these as `@Nullable` and handle the `null` situation gracefully.", "bodyText": "It's not a good practice to pass Optional as a parameter. Mark these as @Nullable and handle the null situation gracefully.", "bodyHTML": "<p dir=\"auto\">It's not a good practice to pass <code>Optional</code> as a parameter. Mark these as <code>@Nullable</code> and handle the <code>null</code> situation gracefully.</p>", "author": "astei", "createdAt": "2020-06-06T22:39:41Z", "path": "proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionData.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package com.velocitypowered.proxy.connection.registry;\n+\n+import com.google.common.base.Optional;\n+import com.google.common.base.Preconditions;\n+import net.kyori.nbt.CompoundTag;\n+\n+public final class DimensionData {\n+  private final String registryIdentifier;\n+  private final boolean isNatural;\n+  private final float ambientLight;\n+  private final boolean isShrunk;\n+  private final boolean isUltrawarm;\n+  private final boolean hasCeiling;\n+  private final boolean hasSkylight;\n+  private final Optional<Long> fixedTime;\n+  private final Optional<Boolean> hasEnderdragonFight;\n+\n+  /**\n+   * Initializes a new {@link DimensionData} instance.\n+   * @param registryIdentifier the identifier for the dimension from the registry.\n+   * @param isNatural indicates if the dimension use natural world generation (e.g. overworld)\n+   * @param ambientLight the light level the client sees without external lighting\n+   * @param isShrunk indicates if the world is shrunk, aka not the full 256 blocks (e.g. nether)\n+   * @param isUltrawarm internal dimension warmth flag\n+   * @param hasCeiling indicates if the dimension has a ceiling layer\n+   * @param hasSkylight indicates if the dimension should display the sun\n+   * @param fixedTime optional. If set to any game daytime value will deactivate time cycle\n+   * @param hasEnderdragonFight optional. Internal flag used in the end dimension\n+   */\n+  public DimensionData(String registryIdentifier, boolean isNatural,\n+                       float ambientLight, boolean isShrunk, boolean isUltrawarm,\n+                       boolean hasCeiling, boolean hasSkylight,\n+                       Optional<Long> fixedTime, Optional<Boolean> hasEnderdragonFight) {", "originalCommit": "c004e5769d50092a9d4c549bc9a1857f37f9bc86", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMwNjQxMw==", "url": "https://github.com/VelocityPowered/Velocity/pull/310#discussion_r436306413", "bodyText": "Will revert that- Was an idea anyway", "author": "Xernium", "createdAt": "2020-06-06T22:43:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMwNjE3OA=="}], "type": "inlineReview", "revised_code": {"commit": "4e5f708bede9c73a74c6eee8bbbaa6bdfc38490e", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionData.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionData.java\nindex f6ced21c..4de63a84 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionData.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionData.java\n", "chunk": "@@ -30,7 +30,7 @@ public final class DimensionData {\n   public DimensionData(String registryIdentifier, boolean isNatural,\n                        float ambientLight, boolean isShrunk, boolean isUltrawarm,\n                        boolean hasCeiling, boolean hasSkylight,\n-                       Optional<Long> fixedTime, Optional<Boolean> hasEnderdragonFight) {\n+                       @Nullable Long fixedTime, @Nullable Boolean hasEnderdragonFight) {\n     Preconditions.checkNotNull(\n             registryIdentifier, \"registryIdentifier cannot be null\");\n     Preconditions.checkArgument(registryIdentifier.length() > 0 && !registryIdentifier.isBlank(),\n", "next_change": {"commit": "101a6a58dd7a1c2af13edd897eade28ac92599ba", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionData.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionData.java\nindex 4de63a84..ca1f8ed8 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionData.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionData.java\n", "chunk": "@@ -24,17 +30,32 @@ public final class DimensionData {\n    * @param isUltrawarm internal dimension warmth flag\n    * @param hasCeiling indicates if the dimension has a ceiling layer\n    * @param hasSkylight indicates if the dimension should display the sun\n+   * @param isPiglinSafe indicates if piglins should naturally zombify in this dimension\n+   * @param doBedsWork indicates if players should be able to sleep in beds in this dimension\n+   * @param doRespawnAnchorsWork indicates if player respawn points can be used in this dimension\n+   * @param hasRaids indicates if raids can be spawned in the dimension\n+   * @param logicalHeight the natural max height for the given dimension\n+   * @param burningBehaviourIdentifier the identifier for how burning blocks work in the dimension\n    * @param fixedTime optional. If set to any game daytime value will deactivate time cycle\n-   * @param hasEnderdragonFight optional. Internal flag used in the end dimension\n+   * @param createDragonFight optional. Internal flag used in the end dimension\n    */\n   public DimensionData(String registryIdentifier, boolean isNatural,\n                        float ambientLight, boolean isShrunk, boolean isUltrawarm,\n                        boolean hasCeiling, boolean hasSkylight,\n-                       @Nullable Long fixedTime, @Nullable Boolean hasEnderdragonFight) {\n+                       boolean isPiglinSafe, boolean doBedsWork,\n+                       boolean doRespawnAnchorsWork, boolean hasRaids,\n+                       int logicalHeight, String burningBehaviourIdentifier,\n+                       @Nullable Long fixedTime, @Nullable Boolean createDragonFight) {\n     Preconditions.checkNotNull(\n             registryIdentifier, \"registryIdentifier cannot be null\");\n     Preconditions.checkArgument(registryIdentifier.length() > 0 && !registryIdentifier.isBlank(),\n             \"registryIdentifier cannot be empty\");\n+    Preconditions.checkArgument(logicalHeight >= 0, \"localHeight must be >= 0\");\n+    Preconditions.checkNotNull(\n+            burningBehaviourIdentifier, \"burningBehaviourIdentifier cannot be null\");\n+    Preconditions.checkArgument(burningBehaviourIdentifier.length() > 0\n+                    && !burningBehaviourIdentifier.isBlank(),\n+            \"burningBehaviourIdentifier cannot be empty\");\n     this.registryIdentifier = registryIdentifier;\n     this.isNatural = isNatural;\n     this.ambientLight = ambientLight;\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "0dd6fe1ef2783fe1f9322af06c6fd218aa67cdb1", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionData.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionData.java\nindex f6ced21c..ca1f8ed8 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionData.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionData.java\n", "chunk": "@@ -24,17 +30,32 @@ public final class DimensionData {\n    * @param isUltrawarm internal dimension warmth flag\n    * @param hasCeiling indicates if the dimension has a ceiling layer\n    * @param hasSkylight indicates if the dimension should display the sun\n+   * @param isPiglinSafe indicates if piglins should naturally zombify in this dimension\n+   * @param doBedsWork indicates if players should be able to sleep in beds in this dimension\n+   * @param doRespawnAnchorsWork indicates if player respawn points can be used in this dimension\n+   * @param hasRaids indicates if raids can be spawned in the dimension\n+   * @param logicalHeight the natural max height for the given dimension\n+   * @param burningBehaviourIdentifier the identifier for how burning blocks work in the dimension\n    * @param fixedTime optional. If set to any game daytime value will deactivate time cycle\n-   * @param hasEnderdragonFight optional. Internal flag used in the end dimension\n+   * @param createDragonFight optional. Internal flag used in the end dimension\n    */\n   public DimensionData(String registryIdentifier, boolean isNatural,\n                        float ambientLight, boolean isShrunk, boolean isUltrawarm,\n                        boolean hasCeiling, boolean hasSkylight,\n-                       Optional<Long> fixedTime, Optional<Boolean> hasEnderdragonFight) {\n+                       boolean isPiglinSafe, boolean doBedsWork,\n+                       boolean doRespawnAnchorsWork, boolean hasRaids,\n+                       int logicalHeight, String burningBehaviourIdentifier,\n+                       @Nullable Long fixedTime, @Nullable Boolean createDragonFight) {\n     Preconditions.checkNotNull(\n             registryIdentifier, \"registryIdentifier cannot be null\");\n     Preconditions.checkArgument(registryIdentifier.length() > 0 && !registryIdentifier.isBlank(),\n             \"registryIdentifier cannot be empty\");\n+    Preconditions.checkArgument(logicalHeight >= 0, \"localHeight must be >= 0\");\n+    Preconditions.checkNotNull(\n+            burningBehaviourIdentifier, \"burningBehaviourIdentifier cannot be null\");\n+    Preconditions.checkArgument(burningBehaviourIdentifier.length() > 0\n+                    && !burningBehaviourIdentifier.isBlank(),\n+            \"burningBehaviourIdentifier cannot be empty\");\n     this.registryIdentifier = registryIdentifier;\n     this.isNatural = isNatural;\n     this.ambientLight = ambientLight;\n", "next_change": {"commit": "d1a5d8dd82383867902a5e20d2364ed24f1902b1", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionData.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionData.java\nindex ca1f8ed8..b5c7193c 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionData.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionData.java\n", "chunk": "@@ -48,14 +48,13 @@ public final class DimensionData {\n                        @Nullable Long fixedTime, @Nullable Boolean createDragonFight) {\n     Preconditions.checkNotNull(\n             registryIdentifier, \"registryIdentifier cannot be null\");\n-    Preconditions.checkArgument(registryIdentifier.length() > 0 && !registryIdentifier.isBlank(),\n+    Preconditions.checkArgument(registryIdentifier.length() > 0,\n             \"registryIdentifier cannot be empty\");\n     Preconditions.checkArgument(logicalHeight >= 0, \"localHeight must be >= 0\");\n     Preconditions.checkNotNull(\n             burningBehaviourIdentifier, \"burningBehaviourIdentifier cannot be null\");\n-    Preconditions.checkArgument(burningBehaviourIdentifier.length() > 0\n-                    && !burningBehaviourIdentifier.isBlank(),\n-            \"burningBehaviourIdentifier cannot be empty\");\n+    Preconditions.checkArgument(burningBehaviourIdentifier.length() > 0,\n+        \"burningBehaviourIdentifier cannot be empty\");\n     this.registryIdentifier = registryIdentifier;\n     this.isNatural = isNatural;\n     this.ambientLight = ambientLight;\n", "next_change": {"commit": "d79c1d0407b11a39f2b93655e7600777e51e9d98", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionData.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionData.java\nindex b5c7193c..a18724f6 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionData.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionData.java\n", "chunk": "@@ -38,24 +42,29 @@ public final class DimensionData {\n    * @param burningBehaviourIdentifier the identifier for how burning blocks work in the dimension\n    * @param fixedTime optional. If set to any game daytime value will deactivate time cycle\n    * @param createDragonFight optional. Internal flag used in the end dimension\n+   * @param coordinateScale optional, unknown purpose\n    */\n-  public DimensionData(String registryIdentifier, boolean isNatural,\n-                       float ambientLight, boolean isShrunk, boolean isUltrawarm,\n-                       boolean hasCeiling, boolean hasSkylight,\n-                       boolean isPiglinSafe, boolean doBedsWork,\n-                       boolean doRespawnAnchorsWork, boolean hasRaids,\n-                       int logicalHeight, String burningBehaviourIdentifier,\n-                       @Nullable Long fixedTime, @Nullable Boolean createDragonFight) {\n+  public DimensionData(String registryIdentifier,\n+      @Nullable Integer dimensionId,\n+      boolean isNatural,\n+      float ambientLight, boolean isShrunk, boolean isUltrawarm,\n+      boolean hasCeiling, boolean hasSkylight,\n+      boolean isPiglinSafe, boolean doBedsWork,\n+      boolean doRespawnAnchorsWork, boolean hasRaids,\n+      int logicalHeight, String burningBehaviourIdentifier,\n+      @Nullable Long fixedTime, @Nullable Boolean createDragonFight,\n+      @Nullable Double coordinateScale) {\n     Preconditions.checkNotNull(\n-            registryIdentifier, \"registryIdentifier cannot be null\");\n+        registryIdentifier, \"registryIdentifier cannot be null\");\n     Preconditions.checkArgument(registryIdentifier.length() > 0,\n-            \"registryIdentifier cannot be empty\");\n+        \"registryIdentifier cannot be empty\");\n     Preconditions.checkArgument(logicalHeight >= 0, \"localHeight must be >= 0\");\n     Preconditions.checkNotNull(\n-            burningBehaviourIdentifier, \"burningBehaviourIdentifier cannot be null\");\n+        burningBehaviourIdentifier, \"burningBehaviourIdentifier cannot be null\");\n     Preconditions.checkArgument(burningBehaviourIdentifier.length() > 0,\n         \"burningBehaviourIdentifier cannot be empty\");\n     this.registryIdentifier = registryIdentifier;\n+    this.dimensionId = dimensionId;\n     this.isNatural = isNatural;\n     this.ambientLight = ambientLight;\n     this.isShrunk = isShrunk;\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "0dd6fe1ef2783fe1f9322af06c6fd218aa67cdb1", "message": "Merge commit", "committedDate": null}, {"oid": "cd9bb61f208e3b27da9fbdcb4bf6cafc9135be65", "committedDate": "2020-06-20 23:11:19 -0400", "message": "Merge branch 'future/1.16' of https://github.com/Xernium/Velocity into Xernium-future/1.16"}, {"oid": "d1a5d8dd82383867902a5e20d2364ed24f1902b1", "committedDate": "2020-06-21 13:38:05 -0400", "message": "Fix compile on JDK 8 and bad merge"}, {"oid": "d79c1d0407b11a39f2b93655e7600777e51e9d98", "committedDate": "2020-08-05 18:13:16 -0400", "message": "Port of #325 for Velocity 1.1.0"}, {"oid": "b34b198064780481f669f53960180d39de0254e2", "committedDate": "2020-08-06 15:08:50 -0400", "message": "1.16.2-pre3"}, {"oid": "cab6919a46516026c731e56654bdc6f527bb2540", "committedDate": "2020-08-06 17:38:52 -0400", "message": "Switch to adventure-nbt and fix server switching on 1.16.2-pre3"}, {"oid": "24ca6156ac69605257c91c7a60cfa0768096bdc6", "committedDate": "2020-08-07 14:30:33 -0400", "message": "Add missing DimensionData field"}, {"oid": "5623baf1e79d54fe4fbf618e783b3f9504751caf", "committedDate": "2020-08-16 04:13:10 -0700", "message": "Use getBoolean/putBoolean, and fix using the wrong field for respawn_anchor_works"}, {"oid": "c747120b20be1853ee02e7b2b67871249a88aa6d", "committedDate": "2021-03-31 16:04:06 -0400", "message": "Relicense the Velocity proxy under the terms of GPLv3 (#448)"}, {"oid": "040cc29c34adf5bbb19ceb6cb5f70d94d8847f8e", "committedDate": "2021-05-12 21:42:27 +0200", "message": "Snapshot 20w49a"}, {"oid": "f0d9a445ed1421d9d38ef5bb6785c6b60a5252af", "committedDate": "2021-05-12 21:42:27 +0200", "message": "Snapshot 21w03a"}, {"oid": "d97ed956a7be1411b192939abcab8412932230b8", "committedDate": "2022-06-07 21:00:24 -0400", "message": "Update/1.19 (#726)"}, {"oid": "d72d707b1c0dd6215a4984956faf4b2ec4bdbd97", "committedDate": "2023-01-01 17:53:37 -0500", "message": "Convert Velocity buildscripts to Kotlin DSL (#918)"}, {"oid": "b0862d2d16c4ba7560d3f24c824d78793ac3d9e0", "committedDate": "2023-01-01 18:46:33 -0500", "message": "Use Spotless for license formatting"}]}, {"oid": "4e5f708bede9c73a74c6eee8bbbaa6bdfc38490e", "url": "https://github.com/PaperMC/Velocity/commit/4e5f708bede9c73a74c6eee8bbbaa6bdfc38490e", "message": "Resolve review", "committedDate": "2020-06-06T22:51:21Z", "type": "commit"}, {"oid": "4e6144a87cfad1fe46c1360f321000e51a6a2fa7", "url": "https://github.com/PaperMC/Velocity/commit/4e6144a87cfad1fe46c1360f321000e51a6a2fa7", "message": "Merge from indev/future/1.16\n\nResolve review", "committedDate": "2020-06-06T22:52:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMwODQxOA==", "url": "https://github.com/PaperMC/Velocity/pull/310#discussion_r436308418", "body": "Try using https://github.com/KyoriPowered/nbt/blob/master/src/main/java/net/kyori/nbt/TagIO.java#L62 instead", "bodyText": "Try using https://github.com/KyoriPowered/nbt/blob/master/src/main/java/net/kyori/nbt/TagIO.java#L62 instead", "bodyHTML": "<p dir=\"auto\">Try using <a href=\"https://github.com/KyoriPowered/nbt/blob/master/src/main/java/net/kyori/nbt/TagIO.java#L62\">https://github.com/KyoriPowered/nbt/blob/master/src/main/java/net/kyori/nbt/TagIO.java#L62</a> instead</p>", "author": "astei", "createdAt": "2020-06-06T23:26:19Z", "path": "proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java", "diffHunk": "@@ -153,6 +163,110 @@ public static void writeUuid(ByteBuf buf, UUID uuid) {\n     buf.writeLong(uuid.getLeastSignificantBits());\n   }\n \n+  /**\n+   * Reads an UUID stored as an Integer Array from the {@code buf}.\n+   * @param buf the buffer to read from\n+   * @return the UUID from the buffer\n+   */\n+  public static UUID readUuidIntArray(ByteBuf buf) {\n+    long msbHigh = (long) buf.readInt() << 32;\n+    long msbLow = (long) buf.readInt() & 0xFFFFFFFFL;\n+    long msb = msbHigh | msbLow;\n+    long lsbHigh = (long) buf.readInt() << 32;\n+    long lsbLow = (long) buf.readInt() & 0xFFFFFFFFL;\n+    long lsb = lsbHigh | lsbLow;\n+    return new UUID(msb, lsb);\n+  }\n+\n+  /**\n+   * Writes an UUID as an Integer Array to the {@code buf}.\n+   * @param buf the buffer to write to\n+   * @param uuid the UUID to write\n+   */\n+  public static void writeUuidIntArray(ByteBuf buf, UUID uuid) {\n+    buf.writeInt((int) (uuid.getMostSignificantBits() >> 32));\n+    buf.writeInt((int) uuid.getMostSignificantBits());\n+    buf.writeInt((int) (uuid.getLeastSignificantBits() >> 32));\n+    buf.writeInt((int) uuid.getLeastSignificantBits());\n+  }\n+\n+  /**\n+   * Reads a {@link net.kyori.nbt.CompoundTag} from the {@code buf}.\n+   * @param buf the buffer to read from\n+   * @return {@link net.kyori.nbt.CompoundTag} the CompoundTag from the buffer\n+   */\n+  public static CompoundTag readCompoundTag(ByteBuf buf) {\n+    int indexBefore = buf.readerIndex();\n+    byte startType = buf.readByte();\n+    if (startType == 0) {\n+      throw new DecoderException(\"Invalid NBT start-type (end/empty)\");\n+    }\n+    buf.readerIndex(indexBefore);\n+    try {\n+      DataInput input = new ByteBufInputStream(buf);", "originalCommit": "4e6144a87cfad1fe46c1360f321000e51a6a2fa7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "101a6a58dd7a1c2af13edd897eade28ac92599ba", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\nindex a272c802..bb7516aa 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n", "chunk": "@@ -203,17 +204,10 @@ public enum ProtocolUtils {\n     }\n     buf.readerIndex(indexBefore);\n     try {\n-      DataInput input = new ByteBufInputStream(buf);\n-      byte type = input.readByte();\n-      if (type != TagType.COMPOUND.id()) {\n-        throw new DecoderException(\"NBTTag is not a CompoundTag\");\n-      }\n-      input.readUTF(); // Head-padding\n-      CompoundTag compoundTag = new CompoundTag();\n-      compoundTag.read(input, 0);\n-      return compoundTag;\n-    } catch (IOException e) {\n-      throw new DecoderException(\"Unable to decode NBT CompoundTag at \" + indexBefore);\n+      return TagIO.readDataInput(new ByteBufInputStream(buf));\n+    } catch (IOException thrown) {\n+      throw new DecoderException(\n+              \"Unable to parse NBT CompoundTag, full error: \" + thrown.getMessage());\n     }\n   }\n \n", "next_change": null}]}, "revised_code_in_main": {"commit": "0dd6fe1ef2783fe1f9322af06c6fd218aa67cdb1", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\nindex a272c802..bb7516aa 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n", "chunk": "@@ -203,17 +204,10 @@ public enum ProtocolUtils {\n     }\n     buf.readerIndex(indexBefore);\n     try {\n-      DataInput input = new ByteBufInputStream(buf);\n-      byte type = input.readByte();\n-      if (type != TagType.COMPOUND.id()) {\n-        throw new DecoderException(\"NBTTag is not a CompoundTag\");\n-      }\n-      input.readUTF(); // Head-padding\n-      CompoundTag compoundTag = new CompoundTag();\n-      compoundTag.read(input, 0);\n-      return compoundTag;\n-    } catch (IOException e) {\n-      throw new DecoderException(\"Unable to decode NBT CompoundTag at \" + indexBefore);\n+      return TagIO.readDataInput(new ByteBufInputStream(buf));\n+    } catch (IOException thrown) {\n+      throw new DecoderException(\n+              \"Unable to parse NBT CompoundTag, full error: \" + thrown.getMessage());\n     }\n   }\n \n", "next_change": {"commit": "5c314c9068814aca404b68cf8442af7201bdcf43", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\nindex bb7516aa..ab6dbc75 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n", "chunk": "@@ -164,102 +160,9 @@ public enum ProtocolUtils {\n     buf.writeLong(uuid.getLeastSignificantBits());\n   }\n \n-  /**\n-   * Reads an UUID stored as an Integer Array from the {@code buf}.\n-   * @param buf the buffer to read from\n-   * @return the UUID from the buffer\n-   */\n-  public static UUID readUuidIntArray(ByteBuf buf) {\n-    long msbHigh = (long) buf.readInt() << 32;\n-    long msbLow = (long) buf.readInt() & 0xFFFFFFFFL;\n-    long msb = msbHigh | msbLow;\n-    long lsbHigh = (long) buf.readInt() << 32;\n-    long lsbLow = (long) buf.readInt() & 0xFFFFFFFFL;\n-    long lsb = lsbHigh | lsbLow;\n-    return new UUID(msb, lsb);\n-  }\n-\n-  /**\n-   * Writes an UUID as an Integer Array to the {@code buf}.\n-   * @param buf the buffer to write to\n-   * @param uuid the UUID to write\n-   */\n-  public static void writeUuidIntArray(ByteBuf buf, UUID uuid) {\n-    buf.writeInt((int) (uuid.getMostSignificantBits() >> 32));\n-    buf.writeInt((int) uuid.getMostSignificantBits());\n-    buf.writeInt((int) (uuid.getLeastSignificantBits() >> 32));\n-    buf.writeInt((int) uuid.getLeastSignificantBits());\n-  }\n-\n-  /**\n-   * Reads a {@link net.kyori.nbt.CompoundTag} from the {@code buf}.\n-   * @param buf the buffer to read from\n-   * @return {@link net.kyori.nbt.CompoundTag} the CompoundTag from the buffer\n-   */\n-  public static CompoundTag readCompoundTag(ByteBuf buf) {\n-    int indexBefore = buf.readerIndex();\n-    byte startType = buf.readByte();\n-    if (startType == 0) {\n-      throw new DecoderException(\"Invalid NBT start-type (end/empty)\");\n-    }\n-    buf.readerIndex(indexBefore);\n-    try {\n-      return TagIO.readDataInput(new ByteBufInputStream(buf));\n-    } catch (IOException thrown) {\n-      throw new DecoderException(\n-              \"Unable to parse NBT CompoundTag, full error: \" + thrown.getMessage());\n-    }\n-  }\n-\n-  /**\n-   * Writes a CompoundTag to the {@code buf}.\n-   * @param buf the buffer to write to\n-   * @param compoundTag the CompoundTag to write\n-   */\n-  public static void writeCompoundTag(ByteBuf buf, CompoundTag compoundTag) {\n-    if (compoundTag == null) {\n-      buf.writeByte(0);\n-      return;\n-    }\n-    try {\n-      TagIO.writeDataOutput(compoundTag, new ByteBufOutputStream(buf));\n-    } catch (IOException e) {\n-      throw new EncoderException(\"Unable to encode NBT CompoundTag\");\n-    }\n-  }\n-\n-  /**\n-   * Reads a String array from the {@code buf}.\n-   * @param buf the buffer to read from\n-   * @return the String array from the buffer\n-   */\n-  public static String[] readStringArray(ByteBuf buf) {\n-    int length = readVarInt(buf);\n-    String[] ret = new String[length];\n-    for (int i = 0; i < length; i++) {\n-      ret[i] = readString(buf);\n-    }\n-    return ret;\n-  }\n-\n-  /**\n-   * Writes a String Array to the {@code buf}.\n-   * @param buf the buffer to write to\n-   * @param stringArray the array to write\n-   */\n-  public static void writeStringArray(ByteBuf buf, String[] stringArray) {\n-    if (stringArray == null) {\n-      writeVarInt(buf, 0);\n-      return;\n-    }\n-    writeVarInt(buf, stringArray.length);\n-    for (int i = 0; i < stringArray.length; i++) {\n-      writeString(buf, stringArray[i]);\n-    }\n-  }\n-\n   /**\n    * Writes a list of {@link com.velocitypowered.api.util.GameProfile.Property} to the buffer.\n+   *\n    * @param buf the buffer to write to\n    * @param properties the properties to serialize\n    */\n", "next_change": {"commit": "592517b9f3b0a042eaa431b77c377096c214f2b0", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\nindex ab6dbc75..55588557 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n", "chunk": "@@ -162,7 +155,6 @@ public enum ProtocolUtils {\n \n   /**\n    * Writes a list of {@link com.velocitypowered.api.util.GameProfile.Property} to the buffer.\n-   *\n    * @param buf the buffer to write to\n    * @param properties the properties to serialize\n    */\n", "next_change": {"commit": "cd9bb61f208e3b27da9fbdcb4bf6cafc9135be65", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\nindex 55588557..bb7516aa 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n", "chunk": "@@ -153,6 +164,100 @@ public enum ProtocolUtils {\n     buf.writeLong(uuid.getLeastSignificantBits());\n   }\n \n+  /**\n+   * Reads an UUID stored as an Integer Array from the {@code buf}.\n+   * @param buf the buffer to read from\n+   * @return the UUID from the buffer\n+   */\n+  public static UUID readUuidIntArray(ByteBuf buf) {\n+    long msbHigh = (long) buf.readInt() << 32;\n+    long msbLow = (long) buf.readInt() & 0xFFFFFFFFL;\n+    long msb = msbHigh | msbLow;\n+    long lsbHigh = (long) buf.readInt() << 32;\n+    long lsbLow = (long) buf.readInt() & 0xFFFFFFFFL;\n+    long lsb = lsbHigh | lsbLow;\n+    return new UUID(msb, lsb);\n+  }\n+\n+  /**\n+   * Writes an UUID as an Integer Array to the {@code buf}.\n+   * @param buf the buffer to write to\n+   * @param uuid the UUID to write\n+   */\n+  public static void writeUuidIntArray(ByteBuf buf, UUID uuid) {\n+    buf.writeInt((int) (uuid.getMostSignificantBits() >> 32));\n+    buf.writeInt((int) uuid.getMostSignificantBits());\n+    buf.writeInt((int) (uuid.getLeastSignificantBits() >> 32));\n+    buf.writeInt((int) uuid.getLeastSignificantBits());\n+  }\n+\n+  /**\n+   * Reads a {@link net.kyori.nbt.CompoundTag} from the {@code buf}.\n+   * @param buf the buffer to read from\n+   * @return {@link net.kyori.nbt.CompoundTag} the CompoundTag from the buffer\n+   */\n+  public static CompoundTag readCompoundTag(ByteBuf buf) {\n+    int indexBefore = buf.readerIndex();\n+    byte startType = buf.readByte();\n+    if (startType == 0) {\n+      throw new DecoderException(\"Invalid NBT start-type (end/empty)\");\n+    }\n+    buf.readerIndex(indexBefore);\n+    try {\n+      return TagIO.readDataInput(new ByteBufInputStream(buf));\n+    } catch (IOException thrown) {\n+      throw new DecoderException(\n+              \"Unable to parse NBT CompoundTag, full error: \" + thrown.getMessage());\n+    }\n+  }\n+\n+  /**\n+   * Writes a CompoundTag to the {@code buf}.\n+   * @param buf the buffer to write to\n+   * @param compoundTag the CompoundTag to write\n+   */\n+  public static void writeCompoundTag(ByteBuf buf, CompoundTag compoundTag) {\n+    if (compoundTag == null) {\n+      buf.writeByte(0);\n+      return;\n+    }\n+    try {\n+      TagIO.writeDataOutput(compoundTag, new ByteBufOutputStream(buf));\n+    } catch (IOException e) {\n+      throw new EncoderException(\"Unable to encode NBT CompoundTag\");\n+    }\n+  }\n+\n+  /**\n+   * Reads a String array from the {@code buf}.\n+   * @param buf the buffer to read from\n+   * @return the String array from the buffer\n+   */\n+  public static String[] readStringArray(ByteBuf buf) {\n+    int length = readVarInt(buf);\n+    String[] ret = new String[length];\n+    for (int i = 0; i < length; i++) {\n+      ret[i] = readString(buf);\n+    }\n+    return ret;\n+  }\n+\n+  /**\n+   * Writes a String Array to the {@code buf}.\n+   * @param buf the buffer to write to\n+   * @param stringArray the array to write\n+   */\n+  public static void writeStringArray(ByteBuf buf, String[] stringArray) {\n+    if (stringArray == null) {\n+      writeVarInt(buf, 0);\n+      return;\n+    }\n+    writeVarInt(buf, stringArray.length);\n+    for (int i = 0; i < stringArray.length; i++) {\n+      writeString(buf, stringArray[i]);\n+    }\n+  }\n+\n   /**\n    * Writes a list of {@link com.velocitypowered.api.util.GameProfile.Property} to the buffer.\n    * @param buf the buffer to write to\n", "next_change": {"commit": "5d287306c2458ccaad40621e3d7418215b764c62", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\nindex bb7516aa..2fa1e759 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n", "chunk": "@@ -253,8 +276,8 @@ public enum ProtocolUtils {\n       return;\n     }\n     writeVarInt(buf, stringArray.length);\n-    for (int i = 0; i < stringArray.length; i++) {\n-      writeString(buf, stringArray[i]);\n+    for (String s : stringArray) {\n+      writeString(buf, s);\n     }\n   }\n \n", "next_change": {"commit": "a0a0966f99bff672b9a28d55b464a4ffd5ee4d2e", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\nindex 2fa1e759..a7e0bd43 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n", "chunk": "@@ -271,10 +271,6 @@ public enum ProtocolUtils {\n    * @param stringArray the array to write\n    */\n   public static void writeStringArray(ByteBuf buf, String[] stringArray) {\n-    if (stringArray == null) {\n-      writeVarInt(buf, 0);\n-      return;\n-    }\n     writeVarInt(buf, stringArray.length);\n     for (String s : stringArray) {\n       writeString(buf, s);\n", "next_change": {"commit": "d72d707b1c0dd6215a4984956faf4b2ec4bdbd97", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\nindex a7e0bd43..f18d9c70 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n", "chunk": "@@ -267,7 +357,8 @@ public enum ProtocolUtils {\n \n   /**\n    * Writes a String Array to the {@code buf}.\n-   * @param buf the buffer to write to\n+   *\n+   * @param buf         the buffer to write to\n    * @param stringArray the array to write\n    */\n   public static void writeStringArray(ByteBuf buf, String[] stringArray) {\n", "next_change": null}, {"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\nindex a7e0bd43..f18d9c70 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n", "chunk": "@@ -279,7 +370,8 @@ public enum ProtocolUtils {\n \n   /**\n    * Writes a list of {@link com.velocitypowered.api.util.GameProfile.Property} to the buffer.\n-   * @param buf the buffer to write to\n+   *\n+   * @param buf        the buffer to write to\n    * @param properties the properties to serialize\n    */\n   public static void writeProperties(ByteBuf buf, List<GameProfile.Property> properties) {\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "0dd6fe1ef2783fe1f9322af06c6fd218aa67cdb1", "message": "Merge commit", "committedDate": null}, {"oid": "5c314c9068814aca404b68cf8442af7201bdcf43", "committedDate": "2019-07-01 08:56:22 +0200", "message": "Add 1.7 Protocol Support"}, {"oid": "d0ad0fac360031348e83dee418418c22c5ebf4e4", "committedDate": "2019-07-05 10:59:29 +0200", "message": "Merge branch 'dev/1.1.0' of github.com:VelocityPowered/Velocity"}, {"oid": "592517b9f3b0a042eaa431b77c377096c214f2b0", "committedDate": "2019-08-29 19:58:00 +0200", "message": "Remove unnessecary diff"}, {"oid": "d7bbe7531a89100e10e5a082b6cdc445df9edd72", "committedDate": "2020-05-25 15:58:52 -0400", "message": "Additional protocol hardening."}, {"oid": "ebad3d1005bfba1dc0e9262ddd1fb79a095a03c9", "committedDate": "2020-05-25 16:05:36 -0400", "message": "Use Integer.MIN_VALUE for the sentinel for readVarIntSafely()"}, {"oid": "eeb660ce007ee116264656b7fd8dedcbc84a97b3", "committedDate": "2020-05-26 05:25:03 -0400", "message": "Fix bad ordering"}, {"oid": "cd9bb61f208e3b27da9fbdcb4bf6cafc9135be65", "committedDate": "2020-06-20 23:11:19 -0400", "message": "Merge branch 'future/1.16' of https://github.com/Xernium/Velocity into Xernium-future/1.16"}, {"oid": "ada35ff28698c9cccea50236eda6ec4c291ca13a", "committedDate": "2020-06-20 23:24:32 -0400", "message": "Merge branch 'Xernium-future/1.16' into future/1.16-velocity-1.1.0"}, {"oid": "c2edd82b16660ab75210fb5caabf09d56bd73b28", "committedDate": "2020-06-28 23:13:57 -0400", "message": "Use more idiomatic adventure text serializer"}, {"oid": "72ce5c86ba81942e46baf891295ef9ffa264a780", "committedDate": "2020-07-16 11:44:55 -0400", "message": "Improve Velocity networking pipeline when under stress"}, {"oid": "f9f60e1489ecad64ba657dbe5f8d38e8f004800f", "committedDate": "2020-07-19 18:23:47 -0400", "message": "Small code cleanups and switch more stuff to adventure"}, {"oid": "cab6919a46516026c731e56654bdc6f527bb2540", "committedDate": "2020-08-06 17:38:52 -0400", "message": "Switch to adventure-nbt and fix server switching on 1.16.2-pre3"}, {"oid": "46e34ddb7f4230c3212c547d2cc05fd860212f3e", "committedDate": "2020-08-06 20:53:19 -0400", "message": "Allow serializing legacy hover events"}, {"oid": "a6ddc137ee5c9181e8b1c1d68686bfca0b0e9aa5", "committedDate": "2020-08-21 01:05:04 -0400", "message": "Reduce varint reading cost from max(1, 2n) to n+1 operations on ByteBuf"}, {"oid": "c47d25c88a87048d8ac651044f5c93780904e1b2", "committedDate": "2020-08-21 19:09:04 -0400", "message": "Upgrade to Gradle 6.6 and use SpotBugs."}, {"oid": "5d287306c2458ccaad40621e3d7418215b764c62", "committedDate": "2020-09-01 03:25:15 -0400", "message": "Small code cleanups"}, {"oid": "a0a0966f99bff672b9a28d55b464a4ffd5ee4d2e", "committedDate": "2020-09-23 01:02:19 -0400", "message": "Minor code cleanup"}, {"oid": "03e9fa79d6bbf19ca7446c234d78bb4c400d1854", "committedDate": "2021-01-23 12:55:28 -0500", "message": "Raise limit on JoinGame NBT reading to 2MiB."}, {"oid": "4f6d238b39609933a71c622c592f778c4341a754", "committedDate": "2021-01-29 17:56:50 -0500", "message": "Strictly limit the hostname size and limit it to ASCII characters only"}, {"oid": "501853e807a00b15ad9a181dd76a43e4f8cadd1c", "committedDate": "2021-01-29 17:59:00 -0500", "message": "Fix Checkstyle issue for the umpteenth time..."}, {"oid": "4f80d2b261d0a90d9076474e9e5d55f63fd171d9", "committedDate": "2021-01-29 23:08:14 -0500", "message": "Revert strict handshake hostname checks"}, {"oid": "f88283f1271569de4d8256cab25c5b421ef7ad12", "committedDate": "2021-03-30 12:08:08 -0400", "message": "Revert \"Revert strict handshake hostname checks\""}, {"oid": "514115a85cadcb6983c02fe5acc12ceeddcf7d8b", "committedDate": "2021-03-30 12:10:55 -0400", "message": "Do not use an ASCII string for handshake"}, {"oid": "c747120b20be1853ee02e7b2b67871249a88aa6d", "committedDate": "2021-03-31 16:04:06 -0400", "message": "Relicense the Velocity proxy under the terms of GPLv3 (#448)"}, {"oid": "3db2fe8d63162c716b8ac57ae0898027ecd3a7bb", "committedDate": "2021-05-03 17:31:32 -0400", "message": "Optimize varint writing"}, {"oid": "e531cdb373c654748f3c819b80a5286d9d431d21", "committedDate": "2021-05-03 18:07:25 -0400", "message": "Revert \"Optimize varint writing\""}, {"oid": "4ca97a6df9833ff8b402095698fc9746ab86c1b9", "committedDate": "2021-05-03 19:14:48 -0400", "message": "Reapply \"Optimize varint writing\""}, {"oid": "0debb81392a70f33781756198133414eed5ba7f1", "committedDate": "2021-05-03 20:08:16 -0400", "message": "I was nagged to make it more consistent"}, {"oid": "3dc8e25ec7e9c8f3dac71f0c825dc7cd20fc6ee0", "committedDate": "2021-05-04 16:30:32 -0400", "message": "Fix varint writing (for real!)"}, {"oid": "1cef82d54dda8726dcb5708b69fa51b04c215439", "committedDate": "2021-05-05 22:13:54 -0400", "message": "Unroll the VarInt writing loop"}, {"oid": "fb3f21abc6362bbed6e343ef559fb3d5d25342d1", "committedDate": "2021-05-06 00:48:19 -0400", "message": "More bitshifting magic"}, {"oid": "a8e0516d18b996b3a6aea80de97e017daa6e38a1", "committedDate": "2021-05-07 19:36:30 +0300", "message": "Also do not copy memory in case when packet needs to compress"}, {"oid": "150fd9a9cf239b769fe46f607c95a85a6c197377", "committedDate": "2021-05-08 23:26:43 -0400", "message": "Add highly-optimized VarInt writing method"}, {"oid": "5170da8fd7d4287f6e3530a62b2070cd7901c8cc", "committedDate": "2021-05-09 02:57:01 -0400", "message": "Improve writeVarInt inlining by peeling the two most common cases"}, {"oid": "11ed4b46e4b19a22a10063b03b41be0ae7d55a67", "committedDate": "2021-05-09 02:57:52 -0400", "message": "whoops"}, {"oid": "d97ed956a7be1411b192939abcab8412932230b8", "committedDate": "2022-06-07 21:00:24 -0400", "message": "Update/1.19 (#726)"}, {"oid": "1a3fba4250553702d9dcd05731d04347bfc24c9f", "committedDate": "2022-07-30 19:30:03 -0400", "message": "Update to 1.19.1 (#772)"}, {"oid": "47cd9faf65bb021aa4541b45e373a8e40f195d88", "committedDate": "2022-08-19 22:45:58 -0400", "message": "A char can be 3 bytes (#843)"}, {"oid": "d72d707b1c0dd6215a4984956faf4b2ec4bdbd97", "committedDate": "2023-01-01 17:53:37 -0500", "message": "Convert Velocity buildscripts to Kotlin DSL (#918)"}, {"oid": "b0862d2d16c4ba7560d3f24c824d78793ac3d9e0", "committedDate": "2023-01-01 18:46:33 -0500", "message": "Use Spotless for license formatting"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMwODQyNw==", "url": "https://github.com/PaperMC/Velocity/pull/310#discussion_r436308427", "body": "Could https://github.com/KyoriPowered/nbt/blob/master/src/main/java/net/kyori/nbt/TagIO.java#L165 work here instead?", "bodyText": "Could https://github.com/KyoriPowered/nbt/blob/master/src/main/java/net/kyori/nbt/TagIO.java#L165 work here instead?", "bodyHTML": "<p dir=\"auto\">Could <a href=\"https://github.com/KyoriPowered/nbt/blob/master/src/main/java/net/kyori/nbt/TagIO.java#L165\">https://github.com/KyoriPowered/nbt/blob/master/src/main/java/net/kyori/nbt/TagIO.java#L165</a> work here instead?</p>", "author": "astei", "createdAt": "2020-06-06T23:26:50Z", "path": "proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java", "diffHunk": "@@ -153,6 +163,110 @@ public static void writeUuid(ByteBuf buf, UUID uuid) {\n     buf.writeLong(uuid.getLeastSignificantBits());\n   }\n \n+  /**\n+   * Reads an UUID stored as an Integer Array from the {@code buf}.\n+   * @param buf the buffer to read from\n+   * @return the UUID from the buffer\n+   */\n+  public static UUID readUuidIntArray(ByteBuf buf) {\n+    long msbHigh = (long) buf.readInt() << 32;\n+    long msbLow = (long) buf.readInt() & 0xFFFFFFFFL;\n+    long msb = msbHigh | msbLow;\n+    long lsbHigh = (long) buf.readInt() << 32;\n+    long lsbLow = (long) buf.readInt() & 0xFFFFFFFFL;\n+    long lsb = lsbHigh | lsbLow;\n+    return new UUID(msb, lsb);\n+  }\n+\n+  /**\n+   * Writes an UUID as an Integer Array to the {@code buf}.\n+   * @param buf the buffer to write to\n+   * @param uuid the UUID to write\n+   */\n+  public static void writeUuidIntArray(ByteBuf buf, UUID uuid) {\n+    buf.writeInt((int) (uuid.getMostSignificantBits() >> 32));\n+    buf.writeInt((int) uuid.getMostSignificantBits());\n+    buf.writeInt((int) (uuid.getLeastSignificantBits() >> 32));\n+    buf.writeInt((int) uuid.getLeastSignificantBits());\n+  }\n+\n+  /**\n+   * Reads a {@link net.kyori.nbt.CompoundTag} from the {@code buf}.\n+   * @param buf the buffer to read from\n+   * @return {@link net.kyori.nbt.CompoundTag} the CompoundTag from the buffer\n+   */\n+  public static CompoundTag readCompoundTag(ByteBuf buf) {\n+    int indexBefore = buf.readerIndex();\n+    byte startType = buf.readByte();\n+    if (startType == 0) {\n+      throw new DecoderException(\"Invalid NBT start-type (end/empty)\");\n+    }\n+    buf.readerIndex(indexBefore);\n+    try {\n+      DataInput input = new ByteBufInputStream(buf);\n+      byte type = input.readByte();\n+      if (type != TagType.COMPOUND.id()) {\n+        throw new DecoderException(\"NBTTag is not a CompoundTag\");\n+      }\n+      input.readUTF(); // Head-padding\n+      CompoundTag compoundTag = new CompoundTag();\n+      compoundTag.read(input, 0);\n+      return compoundTag;\n+    } catch (IOException e) {\n+      throw new DecoderException(\"Unable to decode NBT CompoundTag at \" + indexBefore);\n+    }\n+  }\n+\n+  /**\n+   * Writes a CompoundTag to the {@code buf}.\n+   * @param buf the buffer to write to\n+   * @param compoundTag the CompoundTag to write\n+   */\n+  public static void writeCompoundTag(ByteBuf buf, CompoundTag compoundTag) {\n+    if (compoundTag == null) {\n+      buf.writeByte(0);\n+      return;\n+    }\n+    try {\n+      DataOutput output = new ByteBufOutputStream(buf);", "originalCommit": "4e6144a87cfad1fe46c1360f321000e51a6a2fa7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "101a6a58dd7a1c2af13edd897eade28ac92599ba", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\nindex a272c802..bb7516aa 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n", "chunk": "@@ -228,10 +222,7 @@ public enum ProtocolUtils {\n       return;\n     }\n     try {\n-      DataOutput output = new ByteBufOutputStream(buf);\n-      output.writeByte(10); // Type 10 - CompoundTag\n-      output.writeUTF(\"\"); // Head-padding\n-      compoundTag.write(output);\n+      TagIO.writeDataOutput(compoundTag, new ByteBufOutputStream(buf));\n     } catch (IOException e) {\n       throw new EncoderException(\"Unable to encode NBT CompoundTag\");\n     }\n", "next_change": null}]}, "revised_code_in_main": {"commit": "0dd6fe1ef2783fe1f9322af06c6fd218aa67cdb1", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\nindex a272c802..bb7516aa 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n", "chunk": "@@ -228,10 +222,7 @@ public enum ProtocolUtils {\n       return;\n     }\n     try {\n-      DataOutput output = new ByteBufOutputStream(buf);\n-      output.writeByte(10); // Type 10 - CompoundTag\n-      output.writeUTF(\"\"); // Head-padding\n-      compoundTag.write(output);\n+      TagIO.writeDataOutput(compoundTag, new ByteBufOutputStream(buf));\n     } catch (IOException e) {\n       throw new EncoderException(\"Unable to encode NBT CompoundTag\");\n     }\n", "next_change": {"commit": "5c314c9068814aca404b68cf8442af7201bdcf43", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\nindex bb7516aa..ab6dbc75 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n", "chunk": "@@ -164,102 +160,9 @@ public enum ProtocolUtils {\n     buf.writeLong(uuid.getLeastSignificantBits());\n   }\n \n-  /**\n-   * Reads an UUID stored as an Integer Array from the {@code buf}.\n-   * @param buf the buffer to read from\n-   * @return the UUID from the buffer\n-   */\n-  public static UUID readUuidIntArray(ByteBuf buf) {\n-    long msbHigh = (long) buf.readInt() << 32;\n-    long msbLow = (long) buf.readInt() & 0xFFFFFFFFL;\n-    long msb = msbHigh | msbLow;\n-    long lsbHigh = (long) buf.readInt() << 32;\n-    long lsbLow = (long) buf.readInt() & 0xFFFFFFFFL;\n-    long lsb = lsbHigh | lsbLow;\n-    return new UUID(msb, lsb);\n-  }\n-\n-  /**\n-   * Writes an UUID as an Integer Array to the {@code buf}.\n-   * @param buf the buffer to write to\n-   * @param uuid the UUID to write\n-   */\n-  public static void writeUuidIntArray(ByteBuf buf, UUID uuid) {\n-    buf.writeInt((int) (uuid.getMostSignificantBits() >> 32));\n-    buf.writeInt((int) uuid.getMostSignificantBits());\n-    buf.writeInt((int) (uuid.getLeastSignificantBits() >> 32));\n-    buf.writeInt((int) uuid.getLeastSignificantBits());\n-  }\n-\n-  /**\n-   * Reads a {@link net.kyori.nbt.CompoundTag} from the {@code buf}.\n-   * @param buf the buffer to read from\n-   * @return {@link net.kyori.nbt.CompoundTag} the CompoundTag from the buffer\n-   */\n-  public static CompoundTag readCompoundTag(ByteBuf buf) {\n-    int indexBefore = buf.readerIndex();\n-    byte startType = buf.readByte();\n-    if (startType == 0) {\n-      throw new DecoderException(\"Invalid NBT start-type (end/empty)\");\n-    }\n-    buf.readerIndex(indexBefore);\n-    try {\n-      return TagIO.readDataInput(new ByteBufInputStream(buf));\n-    } catch (IOException thrown) {\n-      throw new DecoderException(\n-              \"Unable to parse NBT CompoundTag, full error: \" + thrown.getMessage());\n-    }\n-  }\n-\n-  /**\n-   * Writes a CompoundTag to the {@code buf}.\n-   * @param buf the buffer to write to\n-   * @param compoundTag the CompoundTag to write\n-   */\n-  public static void writeCompoundTag(ByteBuf buf, CompoundTag compoundTag) {\n-    if (compoundTag == null) {\n-      buf.writeByte(0);\n-      return;\n-    }\n-    try {\n-      TagIO.writeDataOutput(compoundTag, new ByteBufOutputStream(buf));\n-    } catch (IOException e) {\n-      throw new EncoderException(\"Unable to encode NBT CompoundTag\");\n-    }\n-  }\n-\n-  /**\n-   * Reads a String array from the {@code buf}.\n-   * @param buf the buffer to read from\n-   * @return the String array from the buffer\n-   */\n-  public static String[] readStringArray(ByteBuf buf) {\n-    int length = readVarInt(buf);\n-    String[] ret = new String[length];\n-    for (int i = 0; i < length; i++) {\n-      ret[i] = readString(buf);\n-    }\n-    return ret;\n-  }\n-\n-  /**\n-   * Writes a String Array to the {@code buf}.\n-   * @param buf the buffer to write to\n-   * @param stringArray the array to write\n-   */\n-  public static void writeStringArray(ByteBuf buf, String[] stringArray) {\n-    if (stringArray == null) {\n-      writeVarInt(buf, 0);\n-      return;\n-    }\n-    writeVarInt(buf, stringArray.length);\n-    for (int i = 0; i < stringArray.length; i++) {\n-      writeString(buf, stringArray[i]);\n-    }\n-  }\n-\n   /**\n    * Writes a list of {@link com.velocitypowered.api.util.GameProfile.Property} to the buffer.\n+   *\n    * @param buf the buffer to write to\n    * @param properties the properties to serialize\n    */\n", "next_change": {"commit": "592517b9f3b0a042eaa431b77c377096c214f2b0", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\nindex ab6dbc75..55588557 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n", "chunk": "@@ -162,7 +155,6 @@ public enum ProtocolUtils {\n \n   /**\n    * Writes a list of {@link com.velocitypowered.api.util.GameProfile.Property} to the buffer.\n-   *\n    * @param buf the buffer to write to\n    * @param properties the properties to serialize\n    */\n", "next_change": {"commit": "cd9bb61f208e3b27da9fbdcb4bf6cafc9135be65", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\nindex 55588557..bb7516aa 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n", "chunk": "@@ -153,6 +164,100 @@ public enum ProtocolUtils {\n     buf.writeLong(uuid.getLeastSignificantBits());\n   }\n \n+  /**\n+   * Reads an UUID stored as an Integer Array from the {@code buf}.\n+   * @param buf the buffer to read from\n+   * @return the UUID from the buffer\n+   */\n+  public static UUID readUuidIntArray(ByteBuf buf) {\n+    long msbHigh = (long) buf.readInt() << 32;\n+    long msbLow = (long) buf.readInt() & 0xFFFFFFFFL;\n+    long msb = msbHigh | msbLow;\n+    long lsbHigh = (long) buf.readInt() << 32;\n+    long lsbLow = (long) buf.readInt() & 0xFFFFFFFFL;\n+    long lsb = lsbHigh | lsbLow;\n+    return new UUID(msb, lsb);\n+  }\n+\n+  /**\n+   * Writes an UUID as an Integer Array to the {@code buf}.\n+   * @param buf the buffer to write to\n+   * @param uuid the UUID to write\n+   */\n+  public static void writeUuidIntArray(ByteBuf buf, UUID uuid) {\n+    buf.writeInt((int) (uuid.getMostSignificantBits() >> 32));\n+    buf.writeInt((int) uuid.getMostSignificantBits());\n+    buf.writeInt((int) (uuid.getLeastSignificantBits() >> 32));\n+    buf.writeInt((int) uuid.getLeastSignificantBits());\n+  }\n+\n+  /**\n+   * Reads a {@link net.kyori.nbt.CompoundTag} from the {@code buf}.\n+   * @param buf the buffer to read from\n+   * @return {@link net.kyori.nbt.CompoundTag} the CompoundTag from the buffer\n+   */\n+  public static CompoundTag readCompoundTag(ByteBuf buf) {\n+    int indexBefore = buf.readerIndex();\n+    byte startType = buf.readByte();\n+    if (startType == 0) {\n+      throw new DecoderException(\"Invalid NBT start-type (end/empty)\");\n+    }\n+    buf.readerIndex(indexBefore);\n+    try {\n+      return TagIO.readDataInput(new ByteBufInputStream(buf));\n+    } catch (IOException thrown) {\n+      throw new DecoderException(\n+              \"Unable to parse NBT CompoundTag, full error: \" + thrown.getMessage());\n+    }\n+  }\n+\n+  /**\n+   * Writes a CompoundTag to the {@code buf}.\n+   * @param buf the buffer to write to\n+   * @param compoundTag the CompoundTag to write\n+   */\n+  public static void writeCompoundTag(ByteBuf buf, CompoundTag compoundTag) {\n+    if (compoundTag == null) {\n+      buf.writeByte(0);\n+      return;\n+    }\n+    try {\n+      TagIO.writeDataOutput(compoundTag, new ByteBufOutputStream(buf));\n+    } catch (IOException e) {\n+      throw new EncoderException(\"Unable to encode NBT CompoundTag\");\n+    }\n+  }\n+\n+  /**\n+   * Reads a String array from the {@code buf}.\n+   * @param buf the buffer to read from\n+   * @return the String array from the buffer\n+   */\n+  public static String[] readStringArray(ByteBuf buf) {\n+    int length = readVarInt(buf);\n+    String[] ret = new String[length];\n+    for (int i = 0; i < length; i++) {\n+      ret[i] = readString(buf);\n+    }\n+    return ret;\n+  }\n+\n+  /**\n+   * Writes a String Array to the {@code buf}.\n+   * @param buf the buffer to write to\n+   * @param stringArray the array to write\n+   */\n+  public static void writeStringArray(ByteBuf buf, String[] stringArray) {\n+    if (stringArray == null) {\n+      writeVarInt(buf, 0);\n+      return;\n+    }\n+    writeVarInt(buf, stringArray.length);\n+    for (int i = 0; i < stringArray.length; i++) {\n+      writeString(buf, stringArray[i]);\n+    }\n+  }\n+\n   /**\n    * Writes a list of {@link com.velocitypowered.api.util.GameProfile.Property} to the buffer.\n    * @param buf the buffer to write to\n", "next_change": {"commit": "5d287306c2458ccaad40621e3d7418215b764c62", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\nindex bb7516aa..2fa1e759 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n", "chunk": "@@ -253,8 +276,8 @@ public enum ProtocolUtils {\n       return;\n     }\n     writeVarInt(buf, stringArray.length);\n-    for (int i = 0; i < stringArray.length; i++) {\n-      writeString(buf, stringArray[i]);\n+    for (String s : stringArray) {\n+      writeString(buf, s);\n     }\n   }\n \n", "next_change": {"commit": "a0a0966f99bff672b9a28d55b464a4ffd5ee4d2e", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\nindex 2fa1e759..a7e0bd43 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n", "chunk": "@@ -271,10 +271,6 @@ public enum ProtocolUtils {\n    * @param stringArray the array to write\n    */\n   public static void writeStringArray(ByteBuf buf, String[] stringArray) {\n-    if (stringArray == null) {\n-      writeVarInt(buf, 0);\n-      return;\n-    }\n     writeVarInt(buf, stringArray.length);\n     for (String s : stringArray) {\n       writeString(buf, s);\n", "next_change": {"commit": "d72d707b1c0dd6215a4984956faf4b2ec4bdbd97", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\nindex a7e0bd43..f18d9c70 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n", "chunk": "@@ -267,7 +357,8 @@ public enum ProtocolUtils {\n \n   /**\n    * Writes a String Array to the {@code buf}.\n-   * @param buf the buffer to write to\n+   *\n+   * @param buf         the buffer to write to\n    * @param stringArray the array to write\n    */\n   public static void writeStringArray(ByteBuf buf, String[] stringArray) {\n", "next_change": null}, {"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\nindex a7e0bd43..f18d9c70 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n", "chunk": "@@ -279,7 +370,8 @@ public enum ProtocolUtils {\n \n   /**\n    * Writes a list of {@link com.velocitypowered.api.util.GameProfile.Property} to the buffer.\n-   * @param buf the buffer to write to\n+   *\n+   * @param buf        the buffer to write to\n    * @param properties the properties to serialize\n    */\n   public static void writeProperties(ByteBuf buf, List<GameProfile.Property> properties) {\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "0dd6fe1ef2783fe1f9322af06c6fd218aa67cdb1", "message": "Merge commit", "committedDate": null}, {"oid": "5c314c9068814aca404b68cf8442af7201bdcf43", "committedDate": "2019-07-01 08:56:22 +0200", "message": "Add 1.7 Protocol Support"}, {"oid": "d0ad0fac360031348e83dee418418c22c5ebf4e4", "committedDate": "2019-07-05 10:59:29 +0200", "message": "Merge branch 'dev/1.1.0' of github.com:VelocityPowered/Velocity"}, {"oid": "592517b9f3b0a042eaa431b77c377096c214f2b0", "committedDate": "2019-08-29 19:58:00 +0200", "message": "Remove unnessecary diff"}, {"oid": "d7bbe7531a89100e10e5a082b6cdc445df9edd72", "committedDate": "2020-05-25 15:58:52 -0400", "message": "Additional protocol hardening."}, {"oid": "ebad3d1005bfba1dc0e9262ddd1fb79a095a03c9", "committedDate": "2020-05-25 16:05:36 -0400", "message": "Use Integer.MIN_VALUE for the sentinel for readVarIntSafely()"}, {"oid": "eeb660ce007ee116264656b7fd8dedcbc84a97b3", "committedDate": "2020-05-26 05:25:03 -0400", "message": "Fix bad ordering"}, {"oid": "cd9bb61f208e3b27da9fbdcb4bf6cafc9135be65", "committedDate": "2020-06-20 23:11:19 -0400", "message": "Merge branch 'future/1.16' of https://github.com/Xernium/Velocity into Xernium-future/1.16"}, {"oid": "ada35ff28698c9cccea50236eda6ec4c291ca13a", "committedDate": "2020-06-20 23:24:32 -0400", "message": "Merge branch 'Xernium-future/1.16' into future/1.16-velocity-1.1.0"}, {"oid": "c2edd82b16660ab75210fb5caabf09d56bd73b28", "committedDate": "2020-06-28 23:13:57 -0400", "message": "Use more idiomatic adventure text serializer"}, {"oid": "72ce5c86ba81942e46baf891295ef9ffa264a780", "committedDate": "2020-07-16 11:44:55 -0400", "message": "Improve Velocity networking pipeline when under stress"}, {"oid": "f9f60e1489ecad64ba657dbe5f8d38e8f004800f", "committedDate": "2020-07-19 18:23:47 -0400", "message": "Small code cleanups and switch more stuff to adventure"}, {"oid": "cab6919a46516026c731e56654bdc6f527bb2540", "committedDate": "2020-08-06 17:38:52 -0400", "message": "Switch to adventure-nbt and fix server switching on 1.16.2-pre3"}, {"oid": "46e34ddb7f4230c3212c547d2cc05fd860212f3e", "committedDate": "2020-08-06 20:53:19 -0400", "message": "Allow serializing legacy hover events"}, {"oid": "a6ddc137ee5c9181e8b1c1d68686bfca0b0e9aa5", "committedDate": "2020-08-21 01:05:04 -0400", "message": "Reduce varint reading cost from max(1, 2n) to n+1 operations on ByteBuf"}, {"oid": "c47d25c88a87048d8ac651044f5c93780904e1b2", "committedDate": "2020-08-21 19:09:04 -0400", "message": "Upgrade to Gradle 6.6 and use SpotBugs."}, {"oid": "5d287306c2458ccaad40621e3d7418215b764c62", "committedDate": "2020-09-01 03:25:15 -0400", "message": "Small code cleanups"}, {"oid": "a0a0966f99bff672b9a28d55b464a4ffd5ee4d2e", "committedDate": "2020-09-23 01:02:19 -0400", "message": "Minor code cleanup"}, {"oid": "03e9fa79d6bbf19ca7446c234d78bb4c400d1854", "committedDate": "2021-01-23 12:55:28 -0500", "message": "Raise limit on JoinGame NBT reading to 2MiB."}, {"oid": "4f6d238b39609933a71c622c592f778c4341a754", "committedDate": "2021-01-29 17:56:50 -0500", "message": "Strictly limit the hostname size and limit it to ASCII characters only"}, {"oid": "501853e807a00b15ad9a181dd76a43e4f8cadd1c", "committedDate": "2021-01-29 17:59:00 -0500", "message": "Fix Checkstyle issue for the umpteenth time..."}, {"oid": "4f80d2b261d0a90d9076474e9e5d55f63fd171d9", "committedDate": "2021-01-29 23:08:14 -0500", "message": "Revert strict handshake hostname checks"}, {"oid": "f88283f1271569de4d8256cab25c5b421ef7ad12", "committedDate": "2021-03-30 12:08:08 -0400", "message": "Revert \"Revert strict handshake hostname checks\""}, {"oid": "514115a85cadcb6983c02fe5acc12ceeddcf7d8b", "committedDate": "2021-03-30 12:10:55 -0400", "message": "Do not use an ASCII string for handshake"}, {"oid": "c747120b20be1853ee02e7b2b67871249a88aa6d", "committedDate": "2021-03-31 16:04:06 -0400", "message": "Relicense the Velocity proxy under the terms of GPLv3 (#448)"}, {"oid": "3db2fe8d63162c716b8ac57ae0898027ecd3a7bb", "committedDate": "2021-05-03 17:31:32 -0400", "message": "Optimize varint writing"}, {"oid": "e531cdb373c654748f3c819b80a5286d9d431d21", "committedDate": "2021-05-03 18:07:25 -0400", "message": "Revert \"Optimize varint writing\""}, {"oid": "4ca97a6df9833ff8b402095698fc9746ab86c1b9", "committedDate": "2021-05-03 19:14:48 -0400", "message": "Reapply \"Optimize varint writing\""}, {"oid": "0debb81392a70f33781756198133414eed5ba7f1", "committedDate": "2021-05-03 20:08:16 -0400", "message": "I was nagged to make it more consistent"}, {"oid": "3dc8e25ec7e9c8f3dac71f0c825dc7cd20fc6ee0", "committedDate": "2021-05-04 16:30:32 -0400", "message": "Fix varint writing (for real!)"}, {"oid": "1cef82d54dda8726dcb5708b69fa51b04c215439", "committedDate": "2021-05-05 22:13:54 -0400", "message": "Unroll the VarInt writing loop"}, {"oid": "fb3f21abc6362bbed6e343ef559fb3d5d25342d1", "committedDate": "2021-05-06 00:48:19 -0400", "message": "More bitshifting magic"}, {"oid": "a8e0516d18b996b3a6aea80de97e017daa6e38a1", "committedDate": "2021-05-07 19:36:30 +0300", "message": "Also do not copy memory in case when packet needs to compress"}, {"oid": "150fd9a9cf239b769fe46f607c95a85a6c197377", "committedDate": "2021-05-08 23:26:43 -0400", "message": "Add highly-optimized VarInt writing method"}, {"oid": "5170da8fd7d4287f6e3530a62b2070cd7901c8cc", "committedDate": "2021-05-09 02:57:01 -0400", "message": "Improve writeVarInt inlining by peeling the two most common cases"}, {"oid": "11ed4b46e4b19a22a10063b03b41be0ae7d55a67", "committedDate": "2021-05-09 02:57:52 -0400", "message": "whoops"}, {"oid": "d97ed956a7be1411b192939abcab8412932230b8", "committedDate": "2022-06-07 21:00:24 -0400", "message": "Update/1.19 (#726)"}, {"oid": "1a3fba4250553702d9dcd05731d04347bfc24c9f", "committedDate": "2022-07-30 19:30:03 -0400", "message": "Update to 1.19.1 (#772)"}, {"oid": "47cd9faf65bb021aa4541b45e373a8e40f195d88", "committedDate": "2022-08-19 22:45:58 -0400", "message": "A char can be 3 bytes (#843)"}, {"oid": "d72d707b1c0dd6215a4984956faf4b2ec4bdbd97", "committedDate": "2023-01-01 17:53:37 -0500", "message": "Convert Velocity buildscripts to Kotlin DSL (#918)"}, {"oid": "b0862d2d16c4ba7560d3f24c824d78793ac3d9e0", "committedDate": "2023-01-01 18:46:33 -0500", "message": "Use Spotless for license formatting"}]}, {"oid": "101a6a58dd7a1c2af13edd897eade28ac92599ba", "url": "https://github.com/PaperMC/Velocity/commit/101a6a58dd7a1c2af13edd897eade28ac92599ba", "message": "Changes 1.16-pre3", "committedDate": "2020-06-10T19:00:18Z", "type": "commit"}, {"oid": "8d159408ba5af80892fedb0b717e0cc37fa88f3a", "url": "https://github.com/PaperMC/Velocity/commit/8d159408ba5af80892fedb0b717e0cc37fa88f3a", "message": "Merge Changes 1.16-pre3\n\nChanges 1.16-pre3", "committedDate": "2020-06-10T19:01:16Z", "type": "commit"}, {"oid": "78b442a852a14633ea16fa09f3f27b28fd44ea3f", "url": "https://github.com/PaperMC/Velocity/commit/78b442a852a14633ea16fa09f3f27b28fd44ea3f", "message": "Changes 1.16-pre4 and Logic fixes", "committedDate": "2020-06-11T21:39:16Z", "type": "commit"}, {"oid": "78b442a852a14633ea16fa09f3f27b28fd44ea3f", "url": "https://github.com/PaperMC/Velocity/commit/78b442a852a14633ea16fa09f3f27b28fd44ea3f", "message": "Changes 1.16-pre4 and Logic fixes", "committedDate": "2020-06-11T21:39:16Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTExOTcxMA==", "url": "https://github.com/PaperMC/Velocity/pull/310#discussion_r439119710", "body": "I should probably add a dummy constructor here that has message and type", "bodyText": "I should probably add a dummy constructor here that has message and type", "bodyHTML": "<p dir=\"auto\">I should probably add a dummy constructor here that has message and type</p>", "author": "Xernium", "createdAt": "2020-06-11T23:12:22Z", "path": "proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java", "diffHunk": "@@ -10,20 +10,25 @@\n import net.kyori.text.serializer.gson.GsonComponentSerializer;\n import org.checkerframework.checker.nullness.qual.Nullable;\n \n+import java.util.UUID;\n+\n public class Chat implements MinecraftPacket {\n \n   public static final byte CHAT_TYPE = (byte) 0;\n   public static final int MAX_SERVERBOUND_MESSAGE_LENGTH = 256;\n+  public static final UUID EMPTY_SENDER = new UUID(0, 0);\n \n   private @Nullable String message;\n   private byte type;\n+  private @Nullable UUID sender;\n \n   public Chat() {\n   }\n \n-  public Chat(String message, byte type) {\n+  public Chat(String message, byte type, UUID sender) {", "originalCommit": "78b442a852a14633ea16fa09f3f27b28fd44ea3f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTEyMDc1MQ==", "url": "https://github.com/VelocityPowered/Velocity/pull/310#discussion_r439120751", "bodyText": "The packet API is internal details. You can create a constructor for compatibility if you want, but it won't prevent me from merging this in.", "author": "astei", "createdAt": "2020-06-11T23:15:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTExOTcxMA=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "5c314c9068814aca404b68cf8442af7201bdcf43", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java\nindex 7905d7ca..2321b518 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java\n", "chunk": "@@ -10,25 +10,20 @@ import net.kyori.text.Component;\n import net.kyori.text.serializer.gson.GsonComponentSerializer;\n import org.checkerframework.checker.nullness.qual.Nullable;\n \n-import java.util.UUID;\n-\n public class Chat implements MinecraftPacket {\n \n   public static final byte CHAT_TYPE = (byte) 0;\n   public static final int MAX_SERVERBOUND_MESSAGE_LENGTH = 256;\n-  public static final UUID EMPTY_SENDER = new UUID(0, 0);\n \n   private @Nullable String message;\n   private byte type;\n-  private @Nullable UUID sender;\n \n   public Chat() {\n   }\n \n-  public Chat(String message, byte type, UUID sender) {\n+  public Chat(String message, byte type) {\n     this.message = message;\n     this.type = type;\n-    this.sender = sender;\n   }\n \n   public String getMessage() {\n", "next_change": {"commit": "cd9bb61f208e3b27da9fbdcb4bf6cafc9135be65", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java\nindex 2321b518..7905d7ca 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java\n", "chunk": "@@ -10,20 +10,25 @@ import net.kyori.text.Component;\n import net.kyori.text.serializer.gson.GsonComponentSerializer;\n import org.checkerframework.checker.nullness.qual.Nullable;\n \n+import java.util.UUID;\n+\n public class Chat implements MinecraftPacket {\n \n   public static final byte CHAT_TYPE = (byte) 0;\n   public static final int MAX_SERVERBOUND_MESSAGE_LENGTH = 256;\n+  public static final UUID EMPTY_SENDER = new UUID(0, 0);\n \n   private @Nullable String message;\n   private byte type;\n+  private @Nullable UUID sender;\n \n   public Chat() {\n   }\n \n-  public Chat(String message, byte type) {\n+  public Chat(String message, byte type, UUID sender) {\n     this.message = message;\n     this.type = type;\n+    this.sender = sender;\n   }\n \n   public String getMessage() {\n", "next_change": {"commit": "d97ed956a7be1411b192939abcab8412932230b8", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/chat/LegacyChat.java\nsimilarity index 62%\nrename from proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java\nrename to proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/chat/LegacyChat.java\nindex 7905d7ca..d16d4c5e 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/chat/LegacyChat.java\n", "chunk": "@@ -22,15 +40,21 @@ public class Chat implements MinecraftPacket {\n   private byte type;\n   private @Nullable UUID sender;\n \n-  public Chat() {\n+  public LegacyChat() {\n   }\n \n-  public Chat(String message, byte type, UUID sender) {\n+  /**\n+   * Creates a Chat packet.\n+   */\n+  public LegacyChat(String message, byte type, UUID sender) {\n     this.message = message;\n     this.type = type;\n     this.sender = sender;\n   }\n \n+  /**\n+   * Retrieves the Chat message.\n+   */\n   public String getMessage() {\n     if (message == null) {\n       throw new IllegalStateException(\"Message is not specified\");\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "0dd6fe1ef2783fe1f9322af06c6fd218aa67cdb1", "message": "Merge commit", "committedDate": null}, {"oid": "5c314c9068814aca404b68cf8442af7201bdcf43", "committedDate": "2019-07-01 08:56:22 +0200", "message": "Add 1.7 Protocol Support"}, {"oid": "cd9bb61f208e3b27da9fbdcb4bf6cafc9135be65", "committedDate": "2020-06-20 23:11:19 -0400", "message": "Merge branch 'future/1.16' of https://github.com/Xernium/Velocity into Xernium-future/1.16"}, {"oid": "ada35ff28698c9cccea50236eda6ec4c291ca13a", "committedDate": "2020-06-20 23:24:32 -0400", "message": "Merge branch 'Xernium-future/1.16' into future/1.16-velocity-1.1.0"}, {"oid": "2e7a598916c49917979feca7db7dece0c6abd84e", "committedDate": "2020-06-28 21:23:01 -0400", "message": "Initial commit of adventure-adapted Velocity API."}, {"oid": "c2edd82b16660ab75210fb5caabf09d56bd73b28", "committedDate": "2020-06-28 23:13:57 -0400", "message": "Use more idiomatic adventure text serializer"}, {"oid": "26f3cb43c7c8b81d0b10c79dde6c308b34b280fb", "committedDate": "2020-08-16 14:02:04 -0400", "message": "Clean up some Adventure support code, implement another sendMessage overload"}, {"oid": "60e917b4a104d02f9175013e3ce1a42c5daa4ae9", "committedDate": "2020-10-13 22:36:51 -0700", "message": "Player has an identity"}, {"oid": "a6e708c98ee9b872cfc7866c74babe1ea908442d", "committedDate": "2020-10-20 14:26:08 -0400", "message": "Fix Adventure sendActionBar implementation and add proper action bar sending for 1.16.2"}, {"oid": "8995b64dc6a102b03966dfa5baab0e0f06c79bb6", "committedDate": "2020-10-22 03:02:09 -0400", "message": "Do not use the GAME_INFO chat type."}, {"oid": "c747120b20be1853ee02e7b2b67871249a88aa6d", "committedDate": "2021-03-31 16:04:06 -0400", "message": "Relicense the Velocity proxy under the terms of GPLv3 (#448)"}, {"oid": "977300cc66af91cdf88bff38f487a8e3207e33d7", "committedDate": "2021-05-23 14:13:51 -0400", "message": "Remove text 3.x API and associated deprecated APIs"}, {"oid": "d97ed956a7be1411b192939abcab8412932230b8", "committedDate": "2022-06-07 21:00:24 -0400", "message": "Update/1.19 (#726)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTEyMDM2Ng==", "url": "https://github.com/PaperMC/Velocity/pull/310#discussion_r439120366", "body": "Should I also make a dummy constructor here @astei ?", "bodyText": "Should I also make a dummy constructor here @astei ?", "bodyHTML": "<p dir=\"auto\">Should I also make a dummy constructor here <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/astei/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/astei\">@astei</a> ?</p>", "author": "Xernium", "createdAt": "2020-06-11T23:14:38Z", "path": "proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Respawn.java", "diffHunk": "@@ -13,17 +14,21 @@\n   private short difficulty;\n   private short gamemode;\n   private String levelType = \"\";\n+  private boolean shouldKeepPlayerData; // 1.16+\n+  private DimensionInfo dimensionInfo;\n \n   public Respawn() {\n   }\n \n   public Respawn(int dimension, long partialHashedSeed, short difficulty, short gamemode,\n-      String levelType) {", "originalCommit": "78b442a852a14633ea16fa09f3f27b28fd44ea3f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTEyMDc4MA==", "url": "https://github.com/VelocityPowered/Velocity/pull/310#discussion_r439120780", "bodyText": "The packet API is internal details. You can create a constructor for compatibility if you want, but it won't prevent me from merging this in.", "author": "astei", "createdAt": "2020-06-11T23:15:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTEyMDM2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "a1ab29186b26145c88f07552f6a1ad81bdd2cc22", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Respawn.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Respawn.java\nindex 5f883c53..d14e9f8c 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Respawn.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Respawn.java\n", "chunk": "@@ -15,13 +15,15 @@ public class Respawn implements MinecraftPacket {\n   private short gamemode;\n   private String levelType = \"\";\n   private boolean shouldKeepPlayerData; // 1.16+\n-  private DimensionInfo dimensionInfo;\n+  private DimensionInfo dimensionInfo; // 1.16+\n+  private short previousGamemode; // 1.16+\n \n   public Respawn() {\n   }\n \n   public Respawn(int dimension, long partialHashedSeed, short difficulty, short gamemode,\n-      String levelType, boolean shouldKeepPlayerData, DimensionInfo dimensionInfo) {\n+      String levelType, boolean shouldKeepPlayerData, DimensionInfo dimensionInfo,\n+                 short previousGamemode) {\n     this.dimension = dimension;\n     this.partialHashedSeed = partialHashedSeed;\n     this.difficulty = difficulty;\n", "next_change": null}]}, "revised_code_in_main": {"commit": "0dd6fe1ef2783fe1f9322af06c6fd218aa67cdb1", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Respawn.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Respawn.java\nindex 5f883c53..d14e9f8c 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Respawn.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Respawn.java\n", "chunk": "@@ -15,13 +15,15 @@ public class Respawn implements MinecraftPacket {\n   private short gamemode;\n   private String levelType = \"\";\n   private boolean shouldKeepPlayerData; // 1.16+\n-  private DimensionInfo dimensionInfo;\n+  private DimensionInfo dimensionInfo; // 1.16+\n+  private short previousGamemode; // 1.16+\n \n   public Respawn() {\n   }\n \n   public Respawn(int dimension, long partialHashedSeed, short difficulty, short gamemode,\n-      String levelType, boolean shouldKeepPlayerData, DimensionInfo dimensionInfo) {\n+      String levelType, boolean shouldKeepPlayerData, DimensionInfo dimensionInfo,\n+                 short previousGamemode) {\n     this.dimension = dimension;\n     this.partialHashedSeed = partialHashedSeed;\n     this.difficulty = difficulty;\n", "next_change": {"commit": "b34b198064780481f669f53960180d39de0254e2", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Respawn.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Respawn.java\nindex d14e9f8c..33ec6619 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Respawn.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Respawn.java\n", "chunk": "@@ -15,15 +17,16 @@ public class Respawn implements MinecraftPacket {\n   private short gamemode;\n   private String levelType = \"\";\n   private boolean shouldKeepPlayerData; // 1.16+\n-  private DimensionInfo dimensionInfo; // 1.16+\n+  private DimensionInfo dimensionInfo; // 1.16-1.16.1\n   private short previousGamemode; // 1.16+\n+  private DimensionData currentDimensionData; // 1.16.2+\n \n   public Respawn() {\n   }\n \n   public Respawn(int dimension, long partialHashedSeed, short difficulty, short gamemode,\n       String levelType, boolean shouldKeepPlayerData, DimensionInfo dimensionInfo,\n-                 short previousGamemode) {\n+      short previousGamemode, DimensionData currentDimensionData) {\n     this.dimension = dimension;\n     this.partialHashedSeed = partialHashedSeed;\n     this.difficulty = difficulty;\n", "next_change": {"commit": "cab6919a46516026c731e56654bdc6f527bb2540", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Respawn.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Respawn.java\nindex 33ec6619..9a5aee43 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Respawn.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Respawn.java\n", "chunk": "@@ -35,6 +35,7 @@ public class Respawn implements MinecraftPacket {\n     this.shouldKeepPlayerData = shouldKeepPlayerData;\n     this.dimensionInfo = dimensionInfo;\n     this.previousGamemode = previousGamemode;\n+    this.currentDimensionData = currentDimensionData;\n   }\n \n   public int getDimension() {\n", "next_change": {"commit": "d97ed956a7be1411b192939abcab8412932230b8", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Respawn.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Respawn.java\nindex 9a5aee43..e5db58bb 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Respawn.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Respawn.java\n", "chunk": "@@ -36,6 +57,7 @@ public class Respawn implements MinecraftPacket {\n     this.dimensionInfo = dimensionInfo;\n     this.previousGamemode = previousGamemode;\n     this.currentDimensionData = currentDimensionData;\n+    this.lastDeathPosition = lastDeathPosition;\n   }\n \n   public int getDimension() {\n", "next_change": {"commit": "c2b237f19665ff482a2948d0afe9db54a0197f11", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Respawn.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Respawn.java\nindex e5db58bb..fc2d42e0 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Respawn.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Respawn.java\n", "chunk": "@@ -60,6 +60,13 @@ public class Respawn implements MinecraftPacket {\n     this.lastDeathPosition = lastDeathPosition;\n   }\n \n+  public static Respawn fromJoinGame(JoinGame joinGame) {\n+    return new Respawn(joinGame.getDimension(), joinGame.getPartialHashedSeed(),\n+        joinGame.getDifficulty(), joinGame.getGamemode(), joinGame.getLevelType(),\n+        false, joinGame.getDimensionInfo(), joinGame.getPreviousGamemode(),\n+        joinGame.getCurrentDimensionData(), joinGame.getLastDeathPosition());\n+  }\n+\n   public int getDimension() {\n     return dimension;\n   }\n", "next_change": {"commit": "b504e0857c02217e89ed47a35aa76af1f00d3a48", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Respawn.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Respawn.java\nindex fc2d42e0..7126c8c1 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Respawn.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Respawn.java\n", "chunk": "@@ -63,7 +64,7 @@ public class Respawn implements MinecraftPacket {\n   public static Respawn fromJoinGame(JoinGame joinGame) {\n     return new Respawn(joinGame.getDimension(), joinGame.getPartialHashedSeed(),\n         joinGame.getDifficulty(), joinGame.getGamemode(), joinGame.getLevelType(),\n-        false, joinGame.getDimensionInfo(), joinGame.getPreviousGamemode(),\n+        (byte) 0, joinGame.getDimensionInfo(), joinGame.getPreviousGamemode(),\n         joinGame.getCurrentDimensionData(), joinGame.getLastDeathPosition());\n   }\n \n", "next_change": null}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "0dd6fe1ef2783fe1f9322af06c6fd218aa67cdb1", "message": "Merge commit", "committedDate": null}, {"oid": "cd9bb61f208e3b27da9fbdcb4bf6cafc9135be65", "committedDate": "2020-06-20 23:11:19 -0400", "message": "Merge branch 'future/1.16' of https://github.com/Xernium/Velocity into Xernium-future/1.16"}, {"oid": "b34b198064780481f669f53960180d39de0254e2", "committedDate": "2020-08-06 15:08:50 -0400", "message": "1.16.2-pre3"}, {"oid": "cab6919a46516026c731e56654bdc6f527bb2540", "committedDate": "2020-08-06 17:38:52 -0400", "message": "Switch to adventure-nbt and fix server switching on 1.16.2-pre3"}, {"oid": "03e9fa79d6bbf19ca7446c234d78bb4c400d1854", "committedDate": "2021-01-23 12:55:28 -0500", "message": "Raise limit on JoinGame NBT reading to 2MiB."}, {"oid": "c747120b20be1853ee02e7b2b67871249a88aa6d", "committedDate": "2021-03-31 16:04:06 -0400", "message": "Relicense the Velocity proxy under the terms of GPLv3 (#448)"}, {"oid": "d97ed956a7be1411b192939abcab8412932230b8", "committedDate": "2022-06-07 21:00:24 -0400", "message": "Update/1.19 (#726)"}, {"oid": "c2b237f19665ff482a2948d0afe9db54a0197f11", "committedDate": "2022-06-07 23:35:43 -0400", "message": "DRY - one function to create respawn packets from JoinGame packets"}, {"oid": "b504e0857c02217e89ed47a35aa76af1f00d3a48", "committedDate": "2022-12-07 14:12:48 +0100", "message": "Update to 1.19.3-rc3 (#893)"}, {"oid": "d72d707b1c0dd6215a4984956faf4b2ec4bdbd97", "committedDate": "2023-01-01 17:53:37 -0500", "message": "Convert Velocity buildscripts to Kotlin DSL (#918)"}, {"oid": "b0862d2d16c4ba7560d3f24c824d78793ac3d9e0", "committedDate": "2023-01-01 18:46:33 -0500", "message": "Use Spotless for license formatting"}]}, {"oid": "6577b08bdd6c6286681b3c784bf8664681b4697a", "url": "https://github.com/PaperMC/Velocity/commit/6577b08bdd6c6286681b3c784bf8664681b4697a", "message": "Changes 1.16-pre5", "committedDate": "2020-06-13T09:26:51Z", "type": "commit"}, {"oid": "a1ab29186b26145c88f07552f6a1ad81bdd2cc22", "url": "https://github.com/PaperMC/Velocity/commit/a1ab29186b26145c88f07552f6a1ad81bdd2cc22", "message": "Changes 1.16-pre6", "committedDate": "2020-06-16T15:56:56Z", "type": "commit"}, {"oid": "ee64b97b8ee1b217686687f3c4c6326cf0ff9c14", "url": "https://github.com/PaperMC/Velocity/commit/ee64b97b8ee1b217686687f3c4c6326cf0ff9c14", "message": "Changes 1.16-pre7", "committedDate": "2020-06-16T16:39:51Z", "type": "commit"}, {"oid": "83ba7d6051ad8efcbc3ce56ebc0fc2caec2efdff", "url": "https://github.com/PaperMC/Velocity/commit/83ba7d6051ad8efcbc3ce56ebc0fc2caec2efdff", "message": "Changes 1.16-rc1", "committedDate": "2020-06-18T16:24:39Z", "type": "commit"}]}