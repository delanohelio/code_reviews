{"pr_number": 2613, "pr_title": "Add support for TZH and TZM in TO_CHAR function", "pr_author": "paroxysm", "pr_createdAt": "2020-05-07T22:47:51Z", "pr_url": "https://github.com/h2database/h2database/pull/2613", "merge_commit": "b903ccb2cd42ab9f8a6be57fdd26dc2380432a30", "timeline": [{"oid": "d7c400d7f92c0782ae9097a229fa86aab468c28f", "url": "https://github.com/h2database/h2database/commit/d7c400d7f92c0782ae9097a229fa86aab468c28f", "message": "ADD:\nSupport for TZH/TZM tokens in TO_CHAR", "committedDate": "2020-05-06T23:26:27Z", "type": "commit"}, {"oid": "ef07daf781b71946804860c8a87e5902cd437544", "url": "https://github.com/h2database/h2database/commit/ef07daf781b71946804860c8a87e5902cd437544", "message": "ADD:\nSupport for TZH/TZM tokens in TO_CHAR", "committedDate": "2020-05-07T00:06:01Z", "type": "commit"}, {"oid": "97351b7dda7a9b32b11b7ecd73e0a30f39603c19", "url": "https://github.com/h2database/h2database/commit/97351b7dda7a9b32b11b7ecd73e0a30f39603c19", "message": "Merge remote-tracking branch 'origin/master'\n\n# Conflicts:\n#\th2/src/test/org/h2/test/db/TestFunctions.java", "committedDate": "2020-05-07T00:06:24Z", "type": "commit"}, {"oid": "9a40a273508dc786cf9a0c34d4aaa855e632b558", "url": "https://github.com/h2database/h2database/commit/9a40a273508dc786cf9a0c34d4aaa855e632b558", "message": "FIXED: incorrect output when using negative offsets.", "committedDate": "2020-05-07T01:30:31Z", "type": "commit"}, {"oid": "509bd451c9b890e5500884993cbffedf896ea92f", "url": "https://github.com/h2database/h2database/commit/509bd451c9b890e5500884993cbffedf896ea92f", "message": "Remove server-side only code from DateTimeUtils.java", "committedDate": "2020-05-07T21:31:42Z", "type": "commit"}, {"oid": "e4eac17a0a0650d4bff9c0daf5ec4cb7d21c7148", "url": "https://github.com/h2database/h2database/commit/e4eac17a0a0650d4bff9c0daf5ec4cb7d21c7148", "message": "Add a few more test cases", "committedDate": "2020-05-07T22:22:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkxMDcwMg==", "url": "https://github.com/h2database/h2database/pull/2613#discussion_r421910702", "body": "1. Increase visibility of `DateTimeFunctions.extractIntegerField()` and use it here (`DateTimeFunctions.extractIntegerField(session, DateTimeFunctions.TIMEZONE_HOUR, value);`.\r\n\r\n2. Pass `StringBuilder` directly to this method and to `printTimeZoneHoursFromOffsetSeconds()`.\r\n\r\n3. Inline `printTimeZoneHoursFromOffsetSeconds()` into this method.\r\n\r\n4. If resulting method will be not very large, inline it into `toCharDateTime()`.", "bodyText": "Increase visibility of DateTimeFunctions.extractIntegerField() and use it here (DateTimeFunctions.extractIntegerField(session, DateTimeFunctions.TIMEZONE_HOUR, value);.\n\n\nPass StringBuilder directly to this method and to printTimeZoneHoursFromOffsetSeconds().\n\n\nInline printTimeZoneHoursFromOffsetSeconds() into this method.\n\n\nIf resulting method will be not very large, inline it into toCharDateTime().", "bodyHTML": "<ol dir=\"auto\">\n<li>\n<p dir=\"auto\">Increase visibility of <code>DateTimeFunctions.extractIntegerField()</code> and use it here (<code>DateTimeFunctions.extractIntegerField(session, DateTimeFunctions.TIMEZONE_HOUR, value);</code>.</p>\n</li>\n<li>\n<p dir=\"auto\">Pass <code>StringBuilder</code> directly to this method and to <code>printTimeZoneHoursFromOffsetSeconds()</code>.</p>\n</li>\n<li>\n<p dir=\"auto\">Inline <code>printTimeZoneHoursFromOffsetSeconds()</code> into this method.</p>\n</li>\n<li>\n<p dir=\"auto\">If resulting method will be not very large, inline it into <code>toCharDateTime()</code>.</p>\n</li>\n</ol>", "author": "katzyn", "createdAt": "2020-05-08T03:06:03Z", "path": "h2/src/main/org/h2/expression/function/ToChar.java", "diffHunk": "@@ -546,6 +546,54 @@ private static String getTimeZone(Session session, Value value, boolean tzd) {\n         }\n     }\n \n+    private static String getTimeZoneHours(Session session, Value value) {\n+        if(value instanceof ValueTimestampTimeZone) {\n+            return printTimeZoneHoursFromOffsetSeconds(((ValueTimestampTimeZone) value).getTimeZoneOffsetSeconds());\n+        } else if( value instanceof ValueTimeTimeZone) {\n+            return printTimeZoneHoursFromOffsetSeconds( ((ValueTimeTimeZone)value).getTimeZoneOffsetSeconds());\n+        } else {\n+            TimeZoneProvider tz = session.currentTimeZone();\n+            ValueTimestamp v = (ValueTimestamp) value.convertTo(TypeInfo.TYPE_TIMESTAMP, session);\n+            return printTimeZoneHoursFromOffsetSeconds(tz.getTimeZoneOffsetLocal(v.getDateValue(), v.getTimeNanos()));\n+        }", "originalCommit": "e4eac17a0a0650d4bff9c0daf5ec4cb7d21c7148", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a04618cdff10e2f589caefe33d80da4ed564460c", "changed_code": [{"header": "diff --git a/h2/src/main/org/h2/expression/function/ToChar.java b/h2/src/main/org/h2/expression/function/ToChar.java\nindex 059ba2833..a223fdcb1 100644\n--- a/h2/src/main/org/h2/expression/function/ToChar.java\n+++ b/h2/src/main/org/h2/expression/function/ToChar.java\n", "chunk": "@@ -546,54 +546,6 @@ private static String getTimeZone(Session session, Value value, boolean tzd) {\n         }\n     }\n \n-    private static String getTimeZoneHours(Session session, Value value) {\n-        if(value instanceof ValueTimestampTimeZone) {\n-            return printTimeZoneHoursFromOffsetSeconds(((ValueTimestampTimeZone) value).getTimeZoneOffsetSeconds());\n-        } else if( value instanceof ValueTimeTimeZone) {\n-            return printTimeZoneHoursFromOffsetSeconds( ((ValueTimeTimeZone)value).getTimeZoneOffsetSeconds());\n-        } else {\n-            TimeZoneProvider tz = session.currentTimeZone();\n-            ValueTimestamp v = (ValueTimestamp) value.convertTo(TypeInfo.TYPE_TIMESTAMP, session);\n-            return printTimeZoneHoursFromOffsetSeconds(tz.getTimeZoneOffsetLocal(v.getDateValue(), v.getTimeNanos()));\n-        }\n-    }\n-\n-    private static String getTimeZoneMinutes(Session session, Value value) {\n-        if(value instanceof ValueTimestampTimeZone) {\n-            return printTimeZoneMinutesFromOffsetSeconds(((ValueTimestampTimeZone) value).getTimeZoneOffsetSeconds());\n-        } else if( value instanceof ValueTimeTimeZone) {\n-            return printTimeZoneMinutesFromOffsetSeconds( ((ValueTimeTimeZone)value).getTimeZoneOffsetSeconds());\n-        } else {\n-            TimeZoneProvider tz = session.currentTimeZone();\n-            ValueTimestamp v = (ValueTimestamp) value.convertTo(TypeInfo.TYPE_TIMESTAMP, session);\n-            return printTimeZoneMinutesFromOffsetSeconds(tz.getTimeZoneOffsetLocal(v.getDateValue(), v.getTimeNanos()));\n-        }\n-    }\n-\n-    private static String printTimeZoneHoursFromOffsetSeconds(int offsetSeconds) {\n-        StringBuilder b = new StringBuilder();\n-        b.append( offsetSeconds < 0 ? '-' : '+');\n-        offsetSeconds = Math.abs(offsetSeconds);\n-        if(offsetSeconds == 0) {\n-            b.append(\"00\");\n-        } else {\n-            StringUtils.appendTwoDigits(b, offsetSeconds / 3_600);\n-        }\n-        return b.toString();\n-    }\n-\n-    private static String printTimeZoneMinutesFromOffsetSeconds(int offsetSeconds) {\n-        if(offsetSeconds == 0) {\n-            return \"00\";\n-        } else {\n-            StringBuilder b = new StringBuilder();\n-            offsetSeconds = Math.abs(offsetSeconds);\n-            offsetSeconds %= 3_600;\n-            StringUtils.appendTwoDigits(b, offsetSeconds / 60);\n-            return b.toString();\n-        }\n-    }\n-\n     /**\n      * Emulates Oracle's TO_CHAR(datetime) function.\n      *\n", "next_change": null}]}, "revised_code_in_main": {"commit": "b903ccb2cd42ab9f8a6be57fdd26dc2380432a30", "changed_code": [{"header": "diff --git a/h2/src/main/org/h2/expression/function/ToChar.java b/h2/src/main/org/h2/expression/function/ToChar.java\nindex 059ba2833..526244699 100644\n--- a/h2/src/main/org/h2/expression/function/ToChar.java\n+++ b/h2/src/main/org/h2/expression/function/ToChar.java\n", "chunk": "@@ -546,54 +553,6 @@ private static String getTimeZone(Session session, Value value, boolean tzd) {\n         }\n     }\n \n-    private static String getTimeZoneHours(Session session, Value value) {\n-        if(value instanceof ValueTimestampTimeZone) {\n-            return printTimeZoneHoursFromOffsetSeconds(((ValueTimestampTimeZone) value).getTimeZoneOffsetSeconds());\n-        } else if( value instanceof ValueTimeTimeZone) {\n-            return printTimeZoneHoursFromOffsetSeconds( ((ValueTimeTimeZone)value).getTimeZoneOffsetSeconds());\n-        } else {\n-            TimeZoneProvider tz = session.currentTimeZone();\n-            ValueTimestamp v = (ValueTimestamp) value.convertTo(TypeInfo.TYPE_TIMESTAMP, session);\n-            return printTimeZoneHoursFromOffsetSeconds(tz.getTimeZoneOffsetLocal(v.getDateValue(), v.getTimeNanos()));\n-        }\n-    }\n-\n-    private static String getTimeZoneMinutes(Session session, Value value) {\n-        if(value instanceof ValueTimestampTimeZone) {\n-            return printTimeZoneMinutesFromOffsetSeconds(((ValueTimestampTimeZone) value).getTimeZoneOffsetSeconds());\n-        } else if( value instanceof ValueTimeTimeZone) {\n-            return printTimeZoneMinutesFromOffsetSeconds( ((ValueTimeTimeZone)value).getTimeZoneOffsetSeconds());\n-        } else {\n-            TimeZoneProvider tz = session.currentTimeZone();\n-            ValueTimestamp v = (ValueTimestamp) value.convertTo(TypeInfo.TYPE_TIMESTAMP, session);\n-            return printTimeZoneMinutesFromOffsetSeconds(tz.getTimeZoneOffsetLocal(v.getDateValue(), v.getTimeNanos()));\n-        }\n-    }\n-\n-    private static String printTimeZoneHoursFromOffsetSeconds(int offsetSeconds) {\n-        StringBuilder b = new StringBuilder();\n-        b.append( offsetSeconds < 0 ? '-' : '+');\n-        offsetSeconds = Math.abs(offsetSeconds);\n-        if(offsetSeconds == 0) {\n-            b.append(\"00\");\n-        } else {\n-            StringUtils.appendTwoDigits(b, offsetSeconds / 3_600);\n-        }\n-        return b.toString();\n-    }\n-\n-    private static String printTimeZoneMinutesFromOffsetSeconds(int offsetSeconds) {\n-        if(offsetSeconds == 0) {\n-            return \"00\";\n-        } else {\n-            StringBuilder b = new StringBuilder();\n-            offsetSeconds = Math.abs(offsetSeconds);\n-            offsetSeconds %= 3_600;\n-            StringUtils.appendTwoDigits(b, offsetSeconds / 60);\n-            return b.toString();\n-        }\n-    }\n-\n     /**\n      * Emulates Oracle's TO_CHAR(datetime) function.\n      *\n", "next_change": null}]}, "commits_in_main": [{"oid": "b903ccb2cd42ab9f8a6be57fdd26dc2380432a30", "message": "Merge commit", "committedDate": null}, {"oid": "20e5d8df6d228438d922de0fb879e7cd610767dc", "committedDate": "2020-06-27 15:22:22 +0800", "message": "Update changelog"}, {"oid": "52a4d080ac432786b4347683634fdd35c362f4a5", "committedDate": "2020-07-10 22:02:54 +0800", "message": "Simplify hierarchy of sessions"}, {"oid": "5767b618b58569fb4f7dbfa3cc6149310ea16ce0", "committedDate": "2020-07-31 12:10:11 +0800", "message": "Add final modifiers to functions"}, {"oid": "4cee4618dd3b892b4f288da71581146ee16c2857", "committedDate": "2020-08-07 14:21:25 +0800", "message": "Extract remaining string functions"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkxMDk2Mw==", "url": "https://github.com/h2database/h2database/pull/2613#discussion_r421910963", "body": "The same here.", "bodyText": "The same here.", "bodyHTML": "<p dir=\"auto\">The same here.</p>", "author": "katzyn", "createdAt": "2020-05-08T03:06:58Z", "path": "h2/src/main/org/h2/expression/function/ToChar.java", "diffHunk": "@@ -546,6 +546,54 @@ private static String getTimeZone(Session session, Value value, boolean tzd) {\n         }\n     }\n \n+    private static String getTimeZoneHours(Session session, Value value) {\n+        if(value instanceof ValueTimestampTimeZone) {\n+            return printTimeZoneHoursFromOffsetSeconds(((ValueTimestampTimeZone) value).getTimeZoneOffsetSeconds());\n+        } else if( value instanceof ValueTimeTimeZone) {\n+            return printTimeZoneHoursFromOffsetSeconds( ((ValueTimeTimeZone)value).getTimeZoneOffsetSeconds());\n+        } else {\n+            TimeZoneProvider tz = session.currentTimeZone();\n+            ValueTimestamp v = (ValueTimestamp) value.convertTo(TypeInfo.TYPE_TIMESTAMP, session);\n+            return printTimeZoneHoursFromOffsetSeconds(tz.getTimeZoneOffsetLocal(v.getDateValue(), v.getTimeNanos()));\n+        }\n+    }\n+\n+    private static String getTimeZoneMinutes(Session session, Value value) {\n+        if(value instanceof ValueTimestampTimeZone) {\n+            return printTimeZoneMinutesFromOffsetSeconds(((ValueTimestampTimeZone) value).getTimeZoneOffsetSeconds());\n+        } else if( value instanceof ValueTimeTimeZone) {\n+            return printTimeZoneMinutesFromOffsetSeconds( ((ValueTimeTimeZone)value).getTimeZoneOffsetSeconds());\n+        } else {\n+            TimeZoneProvider tz = session.currentTimeZone();\n+            ValueTimestamp v = (ValueTimestamp) value.convertTo(TypeInfo.TYPE_TIMESTAMP, session);\n+            return printTimeZoneMinutesFromOffsetSeconds(tz.getTimeZoneOffsetLocal(v.getDateValue(), v.getTimeNanos()));\n+        }", "originalCommit": "e4eac17a0a0650d4bff9c0daf5ec4cb7d21c7148", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a04618cdff10e2f589caefe33d80da4ed564460c", "changed_code": [{"header": "diff --git a/h2/src/main/org/h2/expression/function/ToChar.java b/h2/src/main/org/h2/expression/function/ToChar.java\nindex 059ba2833..a223fdcb1 100644\n--- a/h2/src/main/org/h2/expression/function/ToChar.java\n+++ b/h2/src/main/org/h2/expression/function/ToChar.java\n", "chunk": "@@ -546,54 +546,6 @@ private static String getTimeZone(Session session, Value value, boolean tzd) {\n         }\n     }\n \n-    private static String getTimeZoneHours(Session session, Value value) {\n-        if(value instanceof ValueTimestampTimeZone) {\n-            return printTimeZoneHoursFromOffsetSeconds(((ValueTimestampTimeZone) value).getTimeZoneOffsetSeconds());\n-        } else if( value instanceof ValueTimeTimeZone) {\n-            return printTimeZoneHoursFromOffsetSeconds( ((ValueTimeTimeZone)value).getTimeZoneOffsetSeconds());\n-        } else {\n-            TimeZoneProvider tz = session.currentTimeZone();\n-            ValueTimestamp v = (ValueTimestamp) value.convertTo(TypeInfo.TYPE_TIMESTAMP, session);\n-            return printTimeZoneHoursFromOffsetSeconds(tz.getTimeZoneOffsetLocal(v.getDateValue(), v.getTimeNanos()));\n-        }\n-    }\n-\n-    private static String getTimeZoneMinutes(Session session, Value value) {\n-        if(value instanceof ValueTimestampTimeZone) {\n-            return printTimeZoneMinutesFromOffsetSeconds(((ValueTimestampTimeZone) value).getTimeZoneOffsetSeconds());\n-        } else if( value instanceof ValueTimeTimeZone) {\n-            return printTimeZoneMinutesFromOffsetSeconds( ((ValueTimeTimeZone)value).getTimeZoneOffsetSeconds());\n-        } else {\n-            TimeZoneProvider tz = session.currentTimeZone();\n-            ValueTimestamp v = (ValueTimestamp) value.convertTo(TypeInfo.TYPE_TIMESTAMP, session);\n-            return printTimeZoneMinutesFromOffsetSeconds(tz.getTimeZoneOffsetLocal(v.getDateValue(), v.getTimeNanos()));\n-        }\n-    }\n-\n-    private static String printTimeZoneHoursFromOffsetSeconds(int offsetSeconds) {\n-        StringBuilder b = new StringBuilder();\n-        b.append( offsetSeconds < 0 ? '-' : '+');\n-        offsetSeconds = Math.abs(offsetSeconds);\n-        if(offsetSeconds == 0) {\n-            b.append(\"00\");\n-        } else {\n-            StringUtils.appendTwoDigits(b, offsetSeconds / 3_600);\n-        }\n-        return b.toString();\n-    }\n-\n-    private static String printTimeZoneMinutesFromOffsetSeconds(int offsetSeconds) {\n-        if(offsetSeconds == 0) {\n-            return \"00\";\n-        } else {\n-            StringBuilder b = new StringBuilder();\n-            offsetSeconds = Math.abs(offsetSeconds);\n-            offsetSeconds %= 3_600;\n-            StringUtils.appendTwoDigits(b, offsetSeconds / 60);\n-            return b.toString();\n-        }\n-    }\n-\n     /**\n      * Emulates Oracle's TO_CHAR(datetime) function.\n      *\n", "next_change": null}]}, "revised_code_in_main": {"commit": "b903ccb2cd42ab9f8a6be57fdd26dc2380432a30", "changed_code": [{"header": "diff --git a/h2/src/main/org/h2/expression/function/ToChar.java b/h2/src/main/org/h2/expression/function/ToChar.java\nindex 059ba2833..526244699 100644\n--- a/h2/src/main/org/h2/expression/function/ToChar.java\n+++ b/h2/src/main/org/h2/expression/function/ToChar.java\n", "chunk": "@@ -546,54 +553,6 @@ private static String getTimeZone(Session session, Value value, boolean tzd) {\n         }\n     }\n \n-    private static String getTimeZoneHours(Session session, Value value) {\n-        if(value instanceof ValueTimestampTimeZone) {\n-            return printTimeZoneHoursFromOffsetSeconds(((ValueTimestampTimeZone) value).getTimeZoneOffsetSeconds());\n-        } else if( value instanceof ValueTimeTimeZone) {\n-            return printTimeZoneHoursFromOffsetSeconds( ((ValueTimeTimeZone)value).getTimeZoneOffsetSeconds());\n-        } else {\n-            TimeZoneProvider tz = session.currentTimeZone();\n-            ValueTimestamp v = (ValueTimestamp) value.convertTo(TypeInfo.TYPE_TIMESTAMP, session);\n-            return printTimeZoneHoursFromOffsetSeconds(tz.getTimeZoneOffsetLocal(v.getDateValue(), v.getTimeNanos()));\n-        }\n-    }\n-\n-    private static String getTimeZoneMinutes(Session session, Value value) {\n-        if(value instanceof ValueTimestampTimeZone) {\n-            return printTimeZoneMinutesFromOffsetSeconds(((ValueTimestampTimeZone) value).getTimeZoneOffsetSeconds());\n-        } else if( value instanceof ValueTimeTimeZone) {\n-            return printTimeZoneMinutesFromOffsetSeconds( ((ValueTimeTimeZone)value).getTimeZoneOffsetSeconds());\n-        } else {\n-            TimeZoneProvider tz = session.currentTimeZone();\n-            ValueTimestamp v = (ValueTimestamp) value.convertTo(TypeInfo.TYPE_TIMESTAMP, session);\n-            return printTimeZoneMinutesFromOffsetSeconds(tz.getTimeZoneOffsetLocal(v.getDateValue(), v.getTimeNanos()));\n-        }\n-    }\n-\n-    private static String printTimeZoneHoursFromOffsetSeconds(int offsetSeconds) {\n-        StringBuilder b = new StringBuilder();\n-        b.append( offsetSeconds < 0 ? '-' : '+');\n-        offsetSeconds = Math.abs(offsetSeconds);\n-        if(offsetSeconds == 0) {\n-            b.append(\"00\");\n-        } else {\n-            StringUtils.appendTwoDigits(b, offsetSeconds / 3_600);\n-        }\n-        return b.toString();\n-    }\n-\n-    private static String printTimeZoneMinutesFromOffsetSeconds(int offsetSeconds) {\n-        if(offsetSeconds == 0) {\n-            return \"00\";\n-        } else {\n-            StringBuilder b = new StringBuilder();\n-            offsetSeconds = Math.abs(offsetSeconds);\n-            offsetSeconds %= 3_600;\n-            StringUtils.appendTwoDigits(b, offsetSeconds / 60);\n-            return b.toString();\n-        }\n-    }\n-\n     /**\n      * Emulates Oracle's TO_CHAR(datetime) function.\n      *\n", "next_change": null}]}, "commits_in_main": [{"oid": "b903ccb2cd42ab9f8a6be57fdd26dc2380432a30", "message": "Merge commit", "committedDate": null}, {"oid": "20e5d8df6d228438d922de0fb879e7cd610767dc", "committedDate": "2020-06-27 15:22:22 +0800", "message": "Update changelog"}, {"oid": "52a4d080ac432786b4347683634fdd35c362f4a5", "committedDate": "2020-07-10 22:02:54 +0800", "message": "Simplify hierarchy of sessions"}, {"oid": "5767b618b58569fb4f7dbfa3cc6149310ea16ce0", "committedDate": "2020-07-31 12:10:11 +0800", "message": "Add final modifiers to functions"}, {"oid": "4cee4618dd3b892b4f288da71581146ee16c2857", "committedDate": "2020-08-07 14:21:25 +0800", "message": "Extract remaining string functions"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkxMTAyNw==", "url": "https://github.com/h2database/h2database/pull/2613#discussion_r421911027", "body": "Please, remove this extra line.", "bodyText": "Please, remove this extra line.", "bodyHTML": "<p dir=\"auto\">Please, remove this extra line.</p>", "author": "katzyn", "createdAt": "2020-05-08T03:07:16Z", "path": "h2/src/main/org/h2/util/DateTimeUtils.java", "diffHunk": "@@ -1077,6 +1077,7 @@ public static String timeZoneNameFromOffsetSeconds(int offsetSeconds) {\n         return b.toString();\n     }\n \n+", "originalCommit": "e4eac17a0a0650d4bff9c0daf5ec4cb7d21c7148", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null, "revised_code_in_main": null, "commits_in_main": [{"oid": "b903ccb2cd42ab9f8a6be57fdd26dc2380432a30", "message": "Merge commit", "committedDate": null}, {"oid": "54f9b5ecae56ebf5a1109be141d067462bf40d72", "committedDate": "2020-10-25 14:07:36 +0800", "message": "Add getISOString() methods to ValueTimestamp[TimeZone]"}, {"oid": "64a2fdc44350859ec2a5cffb1ba12a0827ef4609", "committedDate": "2021-01-03 21:37:35 +0800", "message": "Update copyright years"}, {"oid": "6cebd6985e5275d0e1e9bc91ad703f2f8c71a971", "committedDate": "2021-02-21 12:07:06 +0800", "message": "Don't evaluate ValueTimestampTimeZone at begin and end of each command"}, {"oid": "dc7e401371cfb45a43dcac94af27968f14d90208", "committedDate": "2022-01-01 15:48:31 +0800", "message": "Update copyright years"}, {"oid": "a89915da626d450df06af4078a4511b1a9732c52", "committedDate": "2023-01-15 11:43:20 +0800", "message": "Update copyright years"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkxMjgwNQ==", "url": "https://github.com/h2database/h2database/pull/2613#discussion_r421912805", "body": "Please, add space after `if` and move `// Week` comment below.", "bodyText": "Please, add space after if and move // Week comment below.", "bodyHTML": "<p dir=\"auto\">Please, add space after <code>if</code> and move <code>// Week</code> comment below.</p>", "author": "katzyn", "createdAt": "2020-05-08T03:14:02Z", "path": "h2/src/main/org/h2/expression/function/ToChar.java", "diffHunk": "@@ -831,6 +879,14 @@ public static String toCharDateTime(Session session, Value value, String format,\n \n                 // Week\n \n+            } else if(containsAt(format, i, \"TZH\") != null) {\n+                output.append(getTimeZoneHours(session, value));\n+                i += 3;\n+\n+            } else if(containsAt(format, i, \"TZM\") != null) {", "originalCommit": "e4eac17a0a0650d4bff9c0daf5ec4cb7d21c7148", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a04618cdff10e2f589caefe33d80da4ed564460c", "changed_code": [{"header": "diff --git a/h2/src/main/org/h2/expression/function/ToChar.java b/h2/src/main/org/h2/expression/function/ToChar.java\nindex 059ba2833..a223fdcb1 100644\n--- a/h2/src/main/org/h2/expression/function/ToChar.java\n+++ b/h2/src/main/org/h2/expression/function/ToChar.java\n", "chunk": "@@ -876,17 +828,32 @@ public static String toCharDateTime(Session session, Value value, String format,\n             } else if (containsAt(format, i, \"TZD\") != null) {\n                 output.append(getTimeZone(session, value, true));\n                 i += 3;\n-\n-                // Week\n-\n-            } else if(containsAt(format, i, \"TZH\") != null) {\n-                output.append(getTimeZoneHours(session, value));\n+            } else if (containsAt(format, i, \"TZH\") != null) {\n+                String result;\n+                int hours = DateTimeFunctions.extractIntegerField(session, value, DateTimeFunctions.TIMEZONE_HOUR);\n+                StringBuilder b = new StringBuilder();\n+                b.append( hours < 0 ? '-' : '+');\n+                hours = Math.abs(hours);\n+                if(hours == 0) {\n+                    result = b.append(\"00\").toString();\n+                } else {\n+                    result = StringUtils.appendTwoDigits(b, hours).toString();\n+                }\n+                output.append(result);\n                 i += 3;\n \n-            } else if(containsAt(format, i, \"TZM\") != null) {\n-                output.append(getTimeZoneMinutes(session, value));\n+            } else if (containsAt(format, i, \"TZM\") != null) {\n+                String result;\n+                int mins = Math.abs(DateTimeFunctions.extractIntegerField(session, value, DateTimeFunctions.TIMEZONE_MINUTE));\n+                if(mins == 0) {\n+                    result = \"00\";\n+                } else {\n+                    result = StringUtils.appendTwoDigits(new StringBuilder(), mins).toString();\n+                }\n+                output.append(result);\n                 i += 3;\n \n+                // Week\n             } else if (containsAt(format, i, \"WW\") != null) {\n                 StringUtils.appendTwoDigits(output, (DateTimeUtils.getDayOfYear(dateValue) - 1) / 7 + 1);\n                 i += 2;\n", "next_change": {"commit": "01c36497b5ad2015712b2536df969a1dc28c036a", "changed_code": [{"header": "diff --git a/h2/src/main/org/h2/expression/function/ToChar.java b/h2/src/main/org/h2/expression/function/ToChar.java\nindex a223fdcb1..5fa998284 100644\n--- a/h2/src/main/org/h2/expression/function/ToChar.java\n+++ b/h2/src/main/org/h2/expression/function/ToChar.java\n", "chunk": "@@ -829,28 +836,23 @@ public static String toCharDateTime(Session session, Value value, String format,\n                 output.append(getTimeZone(session, value, true));\n                 i += 3;\n             } else if (containsAt(format, i, \"TZH\") != null) {\n-                String result;\n-                int hours = DateTimeFunctions.extractIntegerField(session, value, DateTimeFunctions.TIMEZONE_HOUR);\n-                StringBuilder b = new StringBuilder();\n-                b.append( hours < 0 ? '-' : '+');\n+                int hours = DateTimeFunction.extractDateTime(session, value, DateTimeFunction.TIMEZONE_HOUR);\n+                output.append( hours < 0 ? '-' : '+');\n                 hours = Math.abs(hours);\n-                if(hours == 0) {\n-                    result = b.append(\"00\").toString();\n+                if (hours == 0) {\n+                    output.append(\"00\");\n                 } else {\n-                    result = StringUtils.appendTwoDigits(b, hours).toString();\n+                  StringUtils.appendTwoDigits(output, hours);\n                 }\n-                output.append(result);\n                 i += 3;\n \n             } else if (containsAt(format, i, \"TZM\") != null) {\n-                String result;\n-                int mins = Math.abs(DateTimeFunctions.extractIntegerField(session, value, DateTimeFunctions.TIMEZONE_MINUTE));\n-                if(mins == 0) {\n-                    result = \"00\";\n+                int mins = Math.abs(DateTimeFunction.extractDateTime(session, value, DateTimeFunction.TIMEZONE_MINUTE));\n+                if (mins == 0) {\n+                    output.append(\"00\");\n                 } else {\n-                    result = StringUtils.appendTwoDigits(new StringBuilder(), mins).toString();\n+                    StringUtils.appendTwoDigits(output, mins);\n                 }\n-                output.append(result);\n                 i += 3;\n \n                 // Week\n", "next_change": {"commit": "7fc90434bc78e96a6fb604e70d88efc1ee07c0c0", "changed_code": [{"header": "diff --git a/h2/src/main/org/h2/expression/function/ToChar.java b/h2/src/main/org/h2/expression/function/ToChar.java\nindex 5fa998284..526244699 100644\n--- a/h2/src/main/org/h2/expression/function/ToChar.java\n+++ b/h2/src/main/org/h2/expression/function/ToChar.java\n", "chunk": "@@ -838,21 +838,11 @@ public static String toCharDateTime(Session session, Value value, String format,\n             } else if (containsAt(format, i, \"TZH\") != null) {\n                 int hours = DateTimeFunction.extractDateTime(session, value, DateTimeFunction.TIMEZONE_HOUR);\n                 output.append( hours < 0 ? '-' : '+');\n-                hours = Math.abs(hours);\n-                if (hours == 0) {\n-                    output.append(\"00\");\n-                } else {\n-                  StringUtils.appendTwoDigits(output, hours);\n-                }\n+                StringUtils.appendTwoDigits(output, Math.abs(hours));\n                 i += 3;\n \n             } else if (containsAt(format, i, \"TZM\") != null) {\n-                int mins = Math.abs(DateTimeFunction.extractDateTime(session, value, DateTimeFunction.TIMEZONE_MINUTE));\n-                if (mins == 0) {\n-                    output.append(\"00\");\n-                } else {\n-                    StringUtils.appendTwoDigits(output, mins);\n-                }\n+                StringUtils.appendTwoDigits(output, Math.abs(DateTimeFunction.extractDateTime(session, value, DateTimeFunction.TIMEZONE_MINUTE)));\n                 i += 3;\n \n                 // Week\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "b903ccb2cd42ab9f8a6be57fdd26dc2380432a30", "changed_code": [{"header": "diff --git a/h2/src/main/org/h2/expression/function/ToChar.java b/h2/src/main/org/h2/expression/function/ToChar.java\nindex 059ba2833..526244699 100644\n--- a/h2/src/main/org/h2/expression/function/ToChar.java\n+++ b/h2/src/main/org/h2/expression/function/ToChar.java\n", "chunk": "@@ -876,17 +835,17 @@ public static String toCharDateTime(Session session, Value value, String format,\n             } else if (containsAt(format, i, \"TZD\") != null) {\n                 output.append(getTimeZone(session, value, true));\n                 i += 3;\n-\n-                // Week\n-\n-            } else if(containsAt(format, i, \"TZH\") != null) {\n-                output.append(getTimeZoneHours(session, value));\n+            } else if (containsAt(format, i, \"TZH\") != null) {\n+                int hours = DateTimeFunction.extractDateTime(session, value, DateTimeFunction.TIMEZONE_HOUR);\n+                output.append( hours < 0 ? '-' : '+');\n+                StringUtils.appendTwoDigits(output, Math.abs(hours));\n                 i += 3;\n \n-            } else if(containsAt(format, i, \"TZM\") != null) {\n-                output.append(getTimeZoneMinutes(session, value));\n+            } else if (containsAt(format, i, \"TZM\") != null) {\n+                StringUtils.appendTwoDigits(output, Math.abs(DateTimeFunction.extractDateTime(session, value, DateTimeFunction.TIMEZONE_MINUTE)));\n                 i += 3;\n \n+                // Week\n             } else if (containsAt(format, i, \"WW\") != null) {\n                 StringUtils.appendTwoDigits(output, (DateTimeUtils.getDayOfYear(dateValue) - 1) / 7 + 1);\n                 i += 2;\n", "next_change": {"commit": "20e5d8df6d228438d922de0fb879e7cd610767dc", "changed_code": [{"header": "diff --git a/h2/src/main/org/h2/expression/function/ToChar.java b/h2/src/main/org/h2/expression/function/ToChar.java\nindex 526244699..3976591cd 100644\n--- a/h2/src/main/org/h2/expression/function/ToChar.java\n+++ b/h2/src/main/org/h2/expression/function/ToChar.java\n", "chunk": "@@ -842,7 +842,8 @@ public static String toCharDateTime(Session session, Value value, String format,\n                 i += 3;\n \n             } else if (containsAt(format, i, \"TZM\") != null) {\n-                StringUtils.appendTwoDigits(output, Math.abs(DateTimeFunction.extractDateTime(session, value, DateTimeFunction.TIMEZONE_MINUTE)));\n+                StringUtils.appendTwoDigits(output,\n+                        Math.abs(DateTimeFunction.extractDateTime(session, value, DateTimeFunction.TIMEZONE_MINUTE)));\n                 i += 3;\n \n                 // Week\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "b903ccb2cd42ab9f8a6be57fdd26dc2380432a30", "message": "Merge commit", "committedDate": null}, {"oid": "20e5d8df6d228438d922de0fb879e7cd610767dc", "committedDate": "2020-06-27 15:22:22 +0800", "message": "Update changelog"}, {"oid": "52a4d080ac432786b4347683634fdd35c362f4a5", "committedDate": "2020-07-10 22:02:54 +0800", "message": "Simplify hierarchy of sessions"}, {"oid": "5767b618b58569fb4f7dbfa3cc6149310ea16ce0", "committedDate": "2020-07-31 12:10:11 +0800", "message": "Add final modifiers to functions"}, {"oid": "4cee4618dd3b892b4f288da71581146ee16c2857", "committedDate": "2020-08-07 14:21:25 +0800", "message": "Extract remaining string functions"}]}, {"oid": "a04618cdff10e2f589caefe33d80da4ed564460c", "url": "https://github.com/h2database/h2database/commit/a04618cdff10e2f589caefe33d80da4ed564460c", "message": "- addressing review items", "committedDate": "2020-06-22T03:12:48Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI5ODcwOA==", "url": "https://github.com/h2database/h2database/pull/2613#discussion_r443298708", "body": "Please, remove `result` and `b`, there is no need for their allocation. You can append everything to the `output` directly.", "bodyText": "Please, remove result and b, there is no need for their allocation. You can append everything to the output directly.", "bodyHTML": "<p dir=\"auto\">Please, remove <code>result</code> and <code>b</code>, there is no need for their allocation. You can append everything to the <code>output</code> directly.</p>", "author": "katzyn", "createdAt": "2020-06-22T03:16:27Z", "path": "h2/src/main/org/h2/expression/function/ToChar.java", "diffHunk": "@@ -828,9 +828,32 @@ public static String toCharDateTime(Session session, Value value, String format,\n             } else if (containsAt(format, i, \"TZD\") != null) {\n                 output.append(getTimeZone(session, value, true));\n                 i += 3;\n+            } else if (containsAt(format, i, \"TZH\") != null) {\n+                String result;\n+                int hours = DateTimeFunctions.extractIntegerField(session, value, DateTimeFunctions.TIMEZONE_HOUR);\n+                StringBuilder b = new StringBuilder();", "originalCommit": "a04618cdff10e2f589caefe33d80da4ed564460c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "01c36497b5ad2015712b2536df969a1dc28c036a", "changed_code": [{"header": "diff --git a/h2/src/main/org/h2/expression/function/ToChar.java b/h2/src/main/org/h2/expression/function/ToChar.java\nindex a223fdcb1..5fa998284 100644\n--- a/h2/src/main/org/h2/expression/function/ToChar.java\n+++ b/h2/src/main/org/h2/expression/function/ToChar.java\n", "chunk": "@@ -829,28 +836,23 @@ public static String toCharDateTime(Session session, Value value, String format,\n                 output.append(getTimeZone(session, value, true));\n                 i += 3;\n             } else if (containsAt(format, i, \"TZH\") != null) {\n-                String result;\n-                int hours = DateTimeFunctions.extractIntegerField(session, value, DateTimeFunctions.TIMEZONE_HOUR);\n-                StringBuilder b = new StringBuilder();\n-                b.append( hours < 0 ? '-' : '+');\n+                int hours = DateTimeFunction.extractDateTime(session, value, DateTimeFunction.TIMEZONE_HOUR);\n+                output.append( hours < 0 ? '-' : '+');\n                 hours = Math.abs(hours);\n-                if(hours == 0) {\n-                    result = b.append(\"00\").toString();\n+                if (hours == 0) {\n+                    output.append(\"00\");\n                 } else {\n-                    result = StringUtils.appendTwoDigits(b, hours).toString();\n+                  StringUtils.appendTwoDigits(output, hours);\n                 }\n-                output.append(result);\n                 i += 3;\n \n             } else if (containsAt(format, i, \"TZM\") != null) {\n-                String result;\n-                int mins = Math.abs(DateTimeFunctions.extractIntegerField(session, value, DateTimeFunctions.TIMEZONE_MINUTE));\n-                if(mins == 0) {\n-                    result = \"00\";\n+                int mins = Math.abs(DateTimeFunction.extractDateTime(session, value, DateTimeFunction.TIMEZONE_MINUTE));\n+                if (mins == 0) {\n+                    output.append(\"00\");\n                 } else {\n-                    result = StringUtils.appendTwoDigits(new StringBuilder(), mins).toString();\n+                    StringUtils.appendTwoDigits(output, mins);\n                 }\n-                output.append(result);\n                 i += 3;\n \n                 // Week\n", "next_change": {"commit": "7fc90434bc78e96a6fb604e70d88efc1ee07c0c0", "changed_code": [{"header": "diff --git a/h2/src/main/org/h2/expression/function/ToChar.java b/h2/src/main/org/h2/expression/function/ToChar.java\nindex 5fa998284..526244699 100644\n--- a/h2/src/main/org/h2/expression/function/ToChar.java\n+++ b/h2/src/main/org/h2/expression/function/ToChar.java\n", "chunk": "@@ -838,21 +838,11 @@ public static String toCharDateTime(Session session, Value value, String format,\n             } else if (containsAt(format, i, \"TZH\") != null) {\n                 int hours = DateTimeFunction.extractDateTime(session, value, DateTimeFunction.TIMEZONE_HOUR);\n                 output.append( hours < 0 ? '-' : '+');\n-                hours = Math.abs(hours);\n-                if (hours == 0) {\n-                    output.append(\"00\");\n-                } else {\n-                  StringUtils.appendTwoDigits(output, hours);\n-                }\n+                StringUtils.appendTwoDigits(output, Math.abs(hours));\n                 i += 3;\n \n             } else if (containsAt(format, i, \"TZM\") != null) {\n-                int mins = Math.abs(DateTimeFunction.extractDateTime(session, value, DateTimeFunction.TIMEZONE_MINUTE));\n-                if (mins == 0) {\n-                    output.append(\"00\");\n-                } else {\n-                    StringUtils.appendTwoDigits(output, mins);\n-                }\n+                StringUtils.appendTwoDigits(output, Math.abs(DateTimeFunction.extractDateTime(session, value, DateTimeFunction.TIMEZONE_MINUTE)));\n                 i += 3;\n \n                 // Week\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "b903ccb2cd42ab9f8a6be57fdd26dc2380432a30", "changed_code": [{"header": "diff --git a/h2/src/main/org/h2/expression/function/ToChar.java b/h2/src/main/org/h2/expression/function/ToChar.java\nindex a223fdcb1..526244699 100644\n--- a/h2/src/main/org/h2/expression/function/ToChar.java\n+++ b/h2/src/main/org/h2/expression/function/ToChar.java\n", "chunk": "@@ -829,28 +836,13 @@ public static String toCharDateTime(Session session, Value value, String format,\n                 output.append(getTimeZone(session, value, true));\n                 i += 3;\n             } else if (containsAt(format, i, \"TZH\") != null) {\n-                String result;\n-                int hours = DateTimeFunctions.extractIntegerField(session, value, DateTimeFunctions.TIMEZONE_HOUR);\n-                StringBuilder b = new StringBuilder();\n-                b.append( hours < 0 ? '-' : '+');\n-                hours = Math.abs(hours);\n-                if(hours == 0) {\n-                    result = b.append(\"00\").toString();\n-                } else {\n-                    result = StringUtils.appendTwoDigits(b, hours).toString();\n-                }\n-                output.append(result);\n+                int hours = DateTimeFunction.extractDateTime(session, value, DateTimeFunction.TIMEZONE_HOUR);\n+                output.append( hours < 0 ? '-' : '+');\n+                StringUtils.appendTwoDigits(output, Math.abs(hours));\n                 i += 3;\n \n             } else if (containsAt(format, i, \"TZM\") != null) {\n-                String result;\n-                int mins = Math.abs(DateTimeFunctions.extractIntegerField(session, value, DateTimeFunctions.TIMEZONE_MINUTE));\n-                if(mins == 0) {\n-                    result = \"00\";\n-                } else {\n-                    result = StringUtils.appendTwoDigits(new StringBuilder(), mins).toString();\n-                }\n-                output.append(result);\n+                StringUtils.appendTwoDigits(output, Math.abs(DateTimeFunction.extractDateTime(session, value, DateTimeFunction.TIMEZONE_MINUTE)));\n                 i += 3;\n \n                 // Week\n", "next_change": {"commit": "20e5d8df6d228438d922de0fb879e7cd610767dc", "changed_code": [{"header": "diff --git a/h2/src/main/org/h2/expression/function/ToChar.java b/h2/src/main/org/h2/expression/function/ToChar.java\nindex 526244699..3976591cd 100644\n--- a/h2/src/main/org/h2/expression/function/ToChar.java\n+++ b/h2/src/main/org/h2/expression/function/ToChar.java\n", "chunk": "@@ -842,7 +842,8 @@ public static String toCharDateTime(Session session, Value value, String format,\n                 i += 3;\n \n             } else if (containsAt(format, i, \"TZM\") != null) {\n-                StringUtils.appendTwoDigits(output, Math.abs(DateTimeFunction.extractDateTime(session, value, DateTimeFunction.TIMEZONE_MINUTE)));\n+                StringUtils.appendTwoDigits(output,\n+                        Math.abs(DateTimeFunction.extractDateTime(session, value, DateTimeFunction.TIMEZONE_MINUTE)));\n                 i += 3;\n \n                 // Week\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "b903ccb2cd42ab9f8a6be57fdd26dc2380432a30", "message": "Merge commit", "committedDate": null}, {"oid": "20e5d8df6d228438d922de0fb879e7cd610767dc", "committedDate": "2020-06-27 15:22:22 +0800", "message": "Update changelog"}, {"oid": "52a4d080ac432786b4347683634fdd35c362f4a5", "committedDate": "2020-07-10 22:02:54 +0800", "message": "Simplify hierarchy of sessions"}, {"oid": "5767b618b58569fb4f7dbfa3cc6149310ea16ce0", "committedDate": "2020-07-31 12:10:11 +0800", "message": "Add final modifiers to functions"}, {"oid": "4cee4618dd3b892b4f288da71581146ee16c2857", "committedDate": "2020-08-07 14:21:25 +0800", "message": "Extract remaining string functions"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI5OTIyOA==", "url": "https://github.com/h2database/h2database/pull/2613#discussion_r443299228", "body": "`output.append(\"00\")` / `StringUtils.appendTwoDigits(output, mins)`.\r\n\r\nAlso add a space between `if` and `(` here and above.", "bodyText": "output.append(\"00\") / StringUtils.appendTwoDigits(output, mins).\nAlso add a space between if and ( here and above.", "bodyHTML": "<p dir=\"auto\"><code>output.append(\"00\")</code> / <code>StringUtils.appendTwoDigits(output, mins)</code>.</p>\n<p dir=\"auto\">Also add a space between <code>if</code> and <code>(</code> here and above.</p>", "author": "katzyn", "createdAt": "2020-06-22T03:19:31Z", "path": "h2/src/main/org/h2/expression/function/ToChar.java", "diffHunk": "@@ -828,9 +828,32 @@ public static String toCharDateTime(Session session, Value value, String format,\n             } else if (containsAt(format, i, \"TZD\") != null) {\n                 output.append(getTimeZone(session, value, true));\n                 i += 3;\n+            } else if (containsAt(format, i, \"TZH\") != null) {\n+                String result;\n+                int hours = DateTimeFunctions.extractIntegerField(session, value, DateTimeFunctions.TIMEZONE_HOUR);\n+                StringBuilder b = new StringBuilder();\n+                b.append( hours < 0 ? '-' : '+');\n+                hours = Math.abs(hours);\n+                if(hours == 0) {\n+                    result = b.append(\"00\").toString();\n+                } else {\n+                    result = StringUtils.appendTwoDigits(b, hours).toString();\n+                }\n+                output.append(result);\n+                i += 3;\n \n-                // Week\n+            } else if (containsAt(format, i, \"TZM\") != null) {\n+                String result;\n+                int mins = Math.abs(DateTimeFunctions.extractIntegerField(session, value, DateTimeFunctions.TIMEZONE_MINUTE));\n+                if(mins == 0) {\n+                    result = \"00\";\n+                } else {\n+                    result = StringUtils.appendTwoDigits(new StringBuilder(), mins).toString();\n+                }", "originalCommit": "a04618cdff10e2f589caefe33d80da4ed564460c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "01c36497b5ad2015712b2536df969a1dc28c036a", "changed_code": [{"header": "diff --git a/h2/src/main/org/h2/expression/function/ToChar.java b/h2/src/main/org/h2/expression/function/ToChar.java\nindex a223fdcb1..5fa998284 100644\n--- a/h2/src/main/org/h2/expression/function/ToChar.java\n+++ b/h2/src/main/org/h2/expression/function/ToChar.java\n", "chunk": "@@ -829,28 +836,23 @@ public static String toCharDateTime(Session session, Value value, String format,\n                 output.append(getTimeZone(session, value, true));\n                 i += 3;\n             } else if (containsAt(format, i, \"TZH\") != null) {\n-                String result;\n-                int hours = DateTimeFunctions.extractIntegerField(session, value, DateTimeFunctions.TIMEZONE_HOUR);\n-                StringBuilder b = new StringBuilder();\n-                b.append( hours < 0 ? '-' : '+');\n+                int hours = DateTimeFunction.extractDateTime(session, value, DateTimeFunction.TIMEZONE_HOUR);\n+                output.append( hours < 0 ? '-' : '+');\n                 hours = Math.abs(hours);\n-                if(hours == 0) {\n-                    result = b.append(\"00\").toString();\n+                if (hours == 0) {\n+                    output.append(\"00\");\n                 } else {\n-                    result = StringUtils.appendTwoDigits(b, hours).toString();\n+                  StringUtils.appendTwoDigits(output, hours);\n                 }\n-                output.append(result);\n                 i += 3;\n \n             } else if (containsAt(format, i, \"TZM\") != null) {\n-                String result;\n-                int mins = Math.abs(DateTimeFunctions.extractIntegerField(session, value, DateTimeFunctions.TIMEZONE_MINUTE));\n-                if(mins == 0) {\n-                    result = \"00\";\n+                int mins = Math.abs(DateTimeFunction.extractDateTime(session, value, DateTimeFunction.TIMEZONE_MINUTE));\n+                if (mins == 0) {\n+                    output.append(\"00\");\n                 } else {\n-                    result = StringUtils.appendTwoDigits(new StringBuilder(), mins).toString();\n+                    StringUtils.appendTwoDigits(output, mins);\n                 }\n-                output.append(result);\n                 i += 3;\n \n                 // Week\n", "next_change": {"commit": "7fc90434bc78e96a6fb604e70d88efc1ee07c0c0", "changed_code": [{"header": "diff --git a/h2/src/main/org/h2/expression/function/ToChar.java b/h2/src/main/org/h2/expression/function/ToChar.java\nindex 5fa998284..526244699 100644\n--- a/h2/src/main/org/h2/expression/function/ToChar.java\n+++ b/h2/src/main/org/h2/expression/function/ToChar.java\n", "chunk": "@@ -838,21 +838,11 @@ public static String toCharDateTime(Session session, Value value, String format,\n             } else if (containsAt(format, i, \"TZH\") != null) {\n                 int hours = DateTimeFunction.extractDateTime(session, value, DateTimeFunction.TIMEZONE_HOUR);\n                 output.append( hours < 0 ? '-' : '+');\n-                hours = Math.abs(hours);\n-                if (hours == 0) {\n-                    output.append(\"00\");\n-                } else {\n-                  StringUtils.appendTwoDigits(output, hours);\n-                }\n+                StringUtils.appendTwoDigits(output, Math.abs(hours));\n                 i += 3;\n \n             } else if (containsAt(format, i, \"TZM\") != null) {\n-                int mins = Math.abs(DateTimeFunction.extractDateTime(session, value, DateTimeFunction.TIMEZONE_MINUTE));\n-                if (mins == 0) {\n-                    output.append(\"00\");\n-                } else {\n-                    StringUtils.appendTwoDigits(output, mins);\n-                }\n+                StringUtils.appendTwoDigits(output, Math.abs(DateTimeFunction.extractDateTime(session, value, DateTimeFunction.TIMEZONE_MINUTE)));\n                 i += 3;\n \n                 // Week\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "b903ccb2cd42ab9f8a6be57fdd26dc2380432a30", "changed_code": [{"header": "diff --git a/h2/src/main/org/h2/expression/function/ToChar.java b/h2/src/main/org/h2/expression/function/ToChar.java\nindex a223fdcb1..526244699 100644\n--- a/h2/src/main/org/h2/expression/function/ToChar.java\n+++ b/h2/src/main/org/h2/expression/function/ToChar.java\n", "chunk": "@@ -829,28 +836,13 @@ public static String toCharDateTime(Session session, Value value, String format,\n                 output.append(getTimeZone(session, value, true));\n                 i += 3;\n             } else if (containsAt(format, i, \"TZH\") != null) {\n-                String result;\n-                int hours = DateTimeFunctions.extractIntegerField(session, value, DateTimeFunctions.TIMEZONE_HOUR);\n-                StringBuilder b = new StringBuilder();\n-                b.append( hours < 0 ? '-' : '+');\n-                hours = Math.abs(hours);\n-                if(hours == 0) {\n-                    result = b.append(\"00\").toString();\n-                } else {\n-                    result = StringUtils.appendTwoDigits(b, hours).toString();\n-                }\n-                output.append(result);\n+                int hours = DateTimeFunction.extractDateTime(session, value, DateTimeFunction.TIMEZONE_HOUR);\n+                output.append( hours < 0 ? '-' : '+');\n+                StringUtils.appendTwoDigits(output, Math.abs(hours));\n                 i += 3;\n \n             } else if (containsAt(format, i, \"TZM\") != null) {\n-                String result;\n-                int mins = Math.abs(DateTimeFunctions.extractIntegerField(session, value, DateTimeFunctions.TIMEZONE_MINUTE));\n-                if(mins == 0) {\n-                    result = \"00\";\n-                } else {\n-                    result = StringUtils.appendTwoDigits(new StringBuilder(), mins).toString();\n-                }\n-                output.append(result);\n+                StringUtils.appendTwoDigits(output, Math.abs(DateTimeFunction.extractDateTime(session, value, DateTimeFunction.TIMEZONE_MINUTE)));\n                 i += 3;\n \n                 // Week\n", "next_change": {"commit": "20e5d8df6d228438d922de0fb879e7cd610767dc", "changed_code": [{"header": "diff --git a/h2/src/main/org/h2/expression/function/ToChar.java b/h2/src/main/org/h2/expression/function/ToChar.java\nindex 526244699..3976591cd 100644\n--- a/h2/src/main/org/h2/expression/function/ToChar.java\n+++ b/h2/src/main/org/h2/expression/function/ToChar.java\n", "chunk": "@@ -842,7 +842,8 @@ public static String toCharDateTime(Session session, Value value, String format,\n                 i += 3;\n \n             } else if (containsAt(format, i, \"TZM\") != null) {\n-                StringUtils.appendTwoDigits(output, Math.abs(DateTimeFunction.extractDateTime(session, value, DateTimeFunction.TIMEZONE_MINUTE)));\n+                StringUtils.appendTwoDigits(output,\n+                        Math.abs(DateTimeFunction.extractDateTime(session, value, DateTimeFunction.TIMEZONE_MINUTE)));\n                 i += 3;\n \n                 // Week\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "b903ccb2cd42ab9f8a6be57fdd26dc2380432a30", "message": "Merge commit", "committedDate": null}, {"oid": "20e5d8df6d228438d922de0fb879e7cd610767dc", "committedDate": "2020-06-27 15:22:22 +0800", "message": "Update changelog"}, {"oid": "52a4d080ac432786b4347683634fdd35c362f4a5", "committedDate": "2020-07-10 22:02:54 +0800", "message": "Simplify hierarchy of sessions"}, {"oid": "5767b618b58569fb4f7dbfa3cc6149310ea16ce0", "committedDate": "2020-07-31 12:10:11 +0800", "message": "Add final modifiers to functions"}, {"oid": "4cee4618dd3b892b4f288da71581146ee16c2857", "committedDate": "2020-08-07 14:21:25 +0800", "message": "Extract remaining string functions"}]}, {"oid": "869b5bd0e34f6976f9fd52ef50a51d479eb6e82f", "url": "https://github.com/h2database/h2database/commit/869b5bd0e34f6976f9fd52ef50a51d479eb6e82f", "message": "Merge remote-tracking branch 'upstream/master'\n\n# Conflicts:\n#\th2/src/main/org/h2/expression/function/DateTimeFunction.java", "committedDate": "2020-06-22T03:59:26Z", "type": "commit"}, {"oid": "01c36497b5ad2015712b2536df969a1dc28c036a", "url": "https://github.com/h2database/h2database/commit/01c36497b5ad2015712b2536df969a1dc28c036a", "message": "- addressing more review items", "committedDate": "2020-06-22T04:02:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMwNzc3OQ==", "url": "https://github.com/h2database/h2database/pull/2613#discussion_r443307779", "body": "BTW, what is the point of this condition? Unconditional `StringUtils.appendTwoDigits(output, hours)` should produce the same result, or I'm missing something?", "bodyText": "BTW, what is the point of this condition? Unconditional StringUtils.appendTwoDigits(output, hours) should produce the same result, or I'm missing something?", "bodyHTML": "<p dir=\"auto\">BTW, what is the point of this condition? Unconditional <code>StringUtils.appendTwoDigits(output, hours)</code> should produce the same result, or I'm missing something?</p>", "author": "katzyn", "createdAt": "2020-06-22T04:07:02Z", "path": "h2/src/main/org/h2/expression/function/ToChar.java", "diffHunk": "@@ -835,9 +835,27 @@ public static String toCharDateTime(Session session, Value value, String format,\n             } else if (containsAt(format, i, \"TZD\") != null) {\n                 output.append(getTimeZone(session, value, true));\n                 i += 3;\n+            } else if (containsAt(format, i, \"TZH\") != null) {\n+                int hours = DateTimeFunction.extractDateTime(session, value, DateTimeFunction.TIMEZONE_HOUR);\n+                output.append( hours < 0 ? '-' : '+');\n+                hours = Math.abs(hours);\n+                if (hours == 0) {\n+                    output.append(\"00\");\n+                } else {\n+                  StringUtils.appendTwoDigits(output, hours);\n+                }", "originalCommit": "01c36497b5ad2015712b2536df969a1dc28c036a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMwODU3OQ==", "url": "https://github.com/h2database/h2database/pull/2613#discussion_r443308579", "bodyText": "There's no difference, I've made that change", "author": "paroxysm", "createdAt": "2020-06-22T04:11:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMwNzc3OQ=="}], "type": "inlineReview", "revised_code": {"commit": "7fc90434bc78e96a6fb604e70d88efc1ee07c0c0", "changed_code": [{"header": "diff --git a/h2/src/main/org/h2/expression/function/ToChar.java b/h2/src/main/org/h2/expression/function/ToChar.java\nindex 5fa998284..526244699 100644\n--- a/h2/src/main/org/h2/expression/function/ToChar.java\n+++ b/h2/src/main/org/h2/expression/function/ToChar.java\n", "chunk": "@@ -838,21 +838,11 @@ public static String toCharDateTime(Session session, Value value, String format,\n             } else if (containsAt(format, i, \"TZH\") != null) {\n                 int hours = DateTimeFunction.extractDateTime(session, value, DateTimeFunction.TIMEZONE_HOUR);\n                 output.append( hours < 0 ? '-' : '+');\n-                hours = Math.abs(hours);\n-                if (hours == 0) {\n-                    output.append(\"00\");\n-                } else {\n-                  StringUtils.appendTwoDigits(output, hours);\n-                }\n+                StringUtils.appendTwoDigits(output, Math.abs(hours));\n                 i += 3;\n \n             } else if (containsAt(format, i, \"TZM\") != null) {\n-                int mins = Math.abs(DateTimeFunction.extractDateTime(session, value, DateTimeFunction.TIMEZONE_MINUTE));\n-                if (mins == 0) {\n-                    output.append(\"00\");\n-                } else {\n-                    StringUtils.appendTwoDigits(output, mins);\n-                }\n+                StringUtils.appendTwoDigits(output, Math.abs(DateTimeFunction.extractDateTime(session, value, DateTimeFunction.TIMEZONE_MINUTE)));\n                 i += 3;\n \n                 // Week\n", "next_change": null}]}, "revised_code_in_main": {"commit": "b903ccb2cd42ab9f8a6be57fdd26dc2380432a30", "changed_code": [{"header": "diff --git a/h2/src/main/org/h2/expression/function/ToChar.java b/h2/src/main/org/h2/expression/function/ToChar.java\nindex 5fa998284..526244699 100644\n--- a/h2/src/main/org/h2/expression/function/ToChar.java\n+++ b/h2/src/main/org/h2/expression/function/ToChar.java\n", "chunk": "@@ -838,21 +838,11 @@ public static String toCharDateTime(Session session, Value value, String format,\n             } else if (containsAt(format, i, \"TZH\") != null) {\n                 int hours = DateTimeFunction.extractDateTime(session, value, DateTimeFunction.TIMEZONE_HOUR);\n                 output.append( hours < 0 ? '-' : '+');\n-                hours = Math.abs(hours);\n-                if (hours == 0) {\n-                    output.append(\"00\");\n-                } else {\n-                  StringUtils.appendTwoDigits(output, hours);\n-                }\n+                StringUtils.appendTwoDigits(output, Math.abs(hours));\n                 i += 3;\n \n             } else if (containsAt(format, i, \"TZM\") != null) {\n-                int mins = Math.abs(DateTimeFunction.extractDateTime(session, value, DateTimeFunction.TIMEZONE_MINUTE));\n-                if (mins == 0) {\n-                    output.append(\"00\");\n-                } else {\n-                    StringUtils.appendTwoDigits(output, mins);\n-                }\n+                StringUtils.appendTwoDigits(output, Math.abs(DateTimeFunction.extractDateTime(session, value, DateTimeFunction.TIMEZONE_MINUTE)));\n                 i += 3;\n \n                 // Week\n", "next_change": {"commit": "20e5d8df6d228438d922de0fb879e7cd610767dc", "changed_code": [{"header": "diff --git a/h2/src/main/org/h2/expression/function/ToChar.java b/h2/src/main/org/h2/expression/function/ToChar.java\nindex 526244699..3976591cd 100644\n--- a/h2/src/main/org/h2/expression/function/ToChar.java\n+++ b/h2/src/main/org/h2/expression/function/ToChar.java\n", "chunk": "@@ -842,7 +842,8 @@ public static String toCharDateTime(Session session, Value value, String format,\n                 i += 3;\n \n             } else if (containsAt(format, i, \"TZM\") != null) {\n-                StringUtils.appendTwoDigits(output, Math.abs(DateTimeFunction.extractDateTime(session, value, DateTimeFunction.TIMEZONE_MINUTE)));\n+                StringUtils.appendTwoDigits(output,\n+                        Math.abs(DateTimeFunction.extractDateTime(session, value, DateTimeFunction.TIMEZONE_MINUTE)));\n                 i += 3;\n \n                 // Week\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "b903ccb2cd42ab9f8a6be57fdd26dc2380432a30", "message": "Merge commit", "committedDate": null}, {"oid": "20e5d8df6d228438d922de0fb879e7cd610767dc", "committedDate": "2020-06-27 15:22:22 +0800", "message": "Update changelog"}, {"oid": "52a4d080ac432786b4347683634fdd35c362f4a5", "committedDate": "2020-07-10 22:02:54 +0800", "message": "Simplify hierarchy of sessions"}, {"oid": "5767b618b58569fb4f7dbfa3cc6149310ea16ce0", "committedDate": "2020-07-31 12:10:11 +0800", "message": "Add final modifiers to functions"}, {"oid": "4cee4618dd3b892b4f288da71581146ee16c2857", "committedDate": "2020-08-07 14:21:25 +0800", "message": "Extract remaining string functions"}]}, {"oid": "7fc90434bc78e96a6fb604e70d88efc1ee07c0c0", "url": "https://github.com/h2database/h2database/commit/7fc90434bc78e96a6fb604e70d88efc1ee07c0c0", "message": "- clean up un-necessary code even further.", "committedDate": "2020-06-22T04:10:45Z", "type": "commit"}]}