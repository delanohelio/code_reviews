{"pr_number": 4422, "pr_title": "APPSERV-14 Slow SQL tracing views", "pr_author": "jbee", "pr_createdAt": "2020-01-10T16:50:14Z", "pr_url": "https://github.com/payara/Payara/pull/4422", "timeline": [{"oid": "8df324d80b0fe65dba596b0c2ffa0ae1bce889bf", "url": "https://github.com/payara/Payara/commit/8df324d80b0fe65dba596b0c2ffa0ae1bce889bf", "message": "APPSERV-14 slow SQL monitoring (incomplete)", "committedDate": "2020-01-08T13:57:47Z", "type": "commit"}, {"oid": "f62cb4142a146841f13f8ae60fe2f8bdbc412adb", "url": "https://github.com/payara/Payara/commit/f62cb4142a146841f13f8ae60fe2f8bdbc412adb", "message": "Merge branch 'master' into APPSERV-14-slow-sql", "committedDate": "2020-01-08T14:14:23Z", "type": "commit"}, {"oid": "a511309c055af6cfe3bdbe4c253f83c69c9317ec", "url": "https://github.com/payara/Payara/commit/a511309c055af6cfe3bdbe4c253f83c69c9317ec", "message": "APPSERV-14 reverts changes to JdbcResourcesUtil.java", "committedDate": "2020-01-08T14:42:53Z", "type": "commit"}, {"oid": "7119b70021a5a9ab314560c69be185050b018689", "url": "https://github.com/payara/Payara/commit/7119b70021a5a9ab314560c69be185050b018689", "message": "APPSERV-11 APPSERV-14 fixed NPE when health check options are not initialised yet", "committedDate": "2020-01-08T15:02:18Z", "type": "commit"}, {"oid": "1908a9d3d10df0fe6ae3d4d0ae8909b3a48046df", "url": "https://github.com/payara/Payara/commit/1908a9d3d10df0fe6ae3d4d0ae8909b3a48046df", "message": "APPSERV-11 APPSERV-14 fixed NPE when health check options are not initialised yet (2)", "committedDate": "2020-01-08T15:08:18Z", "type": "commit"}, {"oid": "d2ab11c5459c3cd0aaa8647e8da0fcf9dc14accd", "url": "https://github.com/payara/Payara/commit/d2ab11c5459c3cd0aaa8647e8da0fcf9dc14accd", "message": "APPSERV-14 SQL max execution time metric and watch per pool", "committedDate": "2020-01-09T15:04:03Z", "type": "commit"}, {"oid": "0161e41f753578d5b657851b1bc1ace4ecee248a", "url": "https://github.com/payara/Payara/commit/0161e41f753578d5b657851b1bc1ace4ecee248a", "message": "APPSERV-14 adds annotations to server and webapp API", "committedDate": "2020-01-10T13:58:21Z", "type": "commit"}, {"oid": "a188f9a9c6325d577ad1ddd5abcf2b065b2a25ea", "url": "https://github.com/payara/Payara/commit/a188f9a9c6325d577ad1ddd5abcf2b065b2a25ea", "message": "APPSERV-14 show all watches and decoration as background area", "committedDate": "2020-01-10T15:39:18Z", "type": "commit"}, {"oid": "c50a42f30dae7286de08e7b7fa477ec52fe485af", "url": "https://github.com/payara/Payara/commit/c50a42f30dae7286de08e7b7fa477ec52fe485af", "message": "APPSERV-14 fixed gradient background for background areas", "committedDate": "2020-01-10T15:49:14Z", "type": "commit"}, {"oid": "3e67faaf9f175cd4ae900a8a3a3768ccb58700b3", "url": "https://github.com/payara/Payara/commit/3e67faaf9f175cd4ae900a8a3a3768ccb58700b3", "message": "APPSERV-14 fixed background area gradient-line alignment", "committedDate": "2020-01-10T16:48:41Z", "type": "commit"}, {"oid": "26c6ccd52f46aaf99154273c75bf359f8be947cd", "url": "https://github.com/payara/Payara/commit/26c6ccd52f46aaf99154273c75bf359f8be947cd", "message": "APPSERV-14 extends alert condition logic and fixes condition formatting", "committedDate": "2020-01-13T09:27:38Z", "type": "commit"}, {"oid": "cc1b94161d772ca0b5c303d0e704e55b308347c7", "url": "https://github.com/payara/Payara/commit/cc1b94161d772ca0b5c303d0e704e55b308347c7", "message": "APPSERV-14 series tag name wildcards", "committedDate": "2020-01-13T10:53:46Z", "type": "commit"}, {"oid": "bbad554175b88d9ae50460aebfd225bf9fdbea1c", "url": "https://github.com/payara/Payara/commit/bbad554175b88d9ae50460aebfd225bf9fdbea1c", "message": "APPSERV-14 fixed series tag name wild-cards", "committedDate": "2020-01-13T11:13:28Z", "type": "commit"}, {"oid": "7308b6fcd3f65433c4bd5c37503835a8b12d2279", "url": "https://github.com/payara/Payara/commit/7308b6fcd3f65433c4bd5c37503835a8b12d2279", "message": "APPSERV-14 completes annotations in alert tables", "committedDate": "2020-01-13T14:07:36Z", "type": "commit"}, {"oid": "bd038ee4a2d1870b121da8a79bba34c91c167050", "url": "https://github.com/payara/Payara/commit/bd038ee4a2d1870b121da8a79bba34c91c167050", "message": "APPSERV-14 alarm annotations via AnnotationTable component", "committedDate": "2020-01-13T17:35:47Z", "type": "commit"}, {"oid": "0044aa4522a6ebb5116f80488d78c9e232774be2", "url": "https://github.com/payara/Payara/commit/0044aa4522a6ebb5116f80488d78c9e232774be2", "message": "APPSERV-14 annotation fields setting; fixed: alert starts ends on cause data", "committedDate": "2020-01-14T10:16:46Z", "type": "commit"}, {"oid": "24dc17abf03cc89e6ae4d4a88c1b2fe5e7a23c4d", "url": "https://github.com/payara/Payara/commit/24dc17abf03cc89e6ae4d4a88c1b2fe5e7a23c4d", "message": "APPSERV-14 basic annotations table widget type", "committedDate": "2020-01-14T12:24:32Z", "type": "commit"}, {"oid": "fbfddf3e9e1c9ba32cd4aba0880a7d49a42c424d", "url": "https://github.com/payara/Payara/commit/fbfddf3e9e1c9ba32cd4aba0880a7d49a42c424d", "message": "APPSERV-14 annotation list and table", "committedDate": "2020-01-14T14:38:05Z", "type": "commit"}, {"oid": "415ad98655bd0f172f14eaca22907ffff4beb243", "url": "https://github.com/payara/Payara/commit/415ad98655bd0f172f14eaca22907ffff4beb243", "message": "APPSERV-14 fixed: do not show alerts for widget type annotation", "committedDate": "2020-01-14T14:53:42Z", "type": "commit"}, {"oid": "c9c0a648780badcb5388a3eeb7d5a911e994fc79", "url": "https://github.com/payara/Payara/commit/c9c0a648780badcb5388a3eeb7d5a911e994fc79", "message": "APPSERV-14 fixed CSS for annotation table font size", "committedDate": "2020-01-14T15:11:27Z", "type": "commit"}, {"oid": "d1204fa84161fa42a375a281683f58212f28ab93", "url": "https://github.com/payara/Payara/commit/d1204fa84161fa42a375a281683f58212f28ab93", "message": "APPSERV-14 adds widgets unique ids on page; adds SQL page preset", "committedDate": "2020-01-14T17:02:06Z", "type": "commit"}, {"oid": "da0b1adc9eefdb5d839f73d4c71f131b3948f76d", "url": "https://github.com/payara/Payara/commit/da0b1adc9eefdb5d839f73d4c71f131b3948f76d", "message": "APPSERV-14 SQL page details and styling", "committedDate": "2020-01-14T18:49:19Z", "type": "commit"}, {"oid": "b6031a5fd587239251c5be596fa2fb6dd49cf609", "url": "https://github.com/payara/Payara/commit/b6031a5fd587239251c5be596fa2fb6dd49cf609", "message": "APPSERV-14 restrict client-server data exchange to needed data for widget type; add instance coloring to annotation table with widget type specific legend", "committedDate": "2020-01-15T10:18:15Z", "type": "commit"}, {"oid": "029bd9f837ac1a73cca7a3daeabac89a9d567d4c", "url": "https://github.com/payara/Payara/commit/029bd9f837ac1a73cca7a3daeabac89a9d567d4c", "message": "APPSERV-14 adds request tracing watch and annotations", "committedDate": "2020-01-15T13:22:41Z", "type": "commit"}, {"oid": "7d0fb4ab37c09c01523a2335bd9446f813f462e0", "url": "https://github.com/payara/Payara/commit/7d0fb4ab37c09c01523a2335bd9446f813f462e0", "message": "APPSERV-14 scroll vertical when alerts or annotations list overflows; adds Alerts page preset", "committedDate": "2020-01-15T13:51:13Z", "type": "commit"}, {"oid": "03d32de4a514175520af8a012617605d1e3d8626", "url": "https://github.com/payara/Payara/commit/03d32de4a514175520af8a012617605d1e3d8626", "message": "APPSERV-14 fixes request tracing metric clears alerts properly", "committedDate": "2020-01-15T14:31:59Z", "type": "commit"}, {"oid": "15a6300ecd360ddd22abdbbcfea28a42c4a3759e", "url": "https://github.com/payara/Payara/commit/15a6300ecd360ddd22abdbbcfea28a42c4a3759e", "message": "APPSERV-14 adds coloring dependent legend for annotation tables and lists", "committedDate": "2020-01-15T14:32:30Z", "type": "commit"}, {"oid": "ac417d7d91ac2424fa09417cc0064ace27ec94c8", "url": "https://github.com/payara/Payara/commit/ac417d7d91ac2424fa09417cc0064ace27ec94c8", "message": "APPSERV-14 adds alert frame compaction; fixes annotation widget legend for undefined coloring", "committedDate": "2020-01-15T17:04:54Z", "type": "commit"}, {"oid": "9e270cb31e772c0f9b1ba1777d7c48dfa1d5eeff", "url": "https://github.com/payara/Payara/commit/9e270cb31e772c0f9b1ba1777d7c48dfa1d5eeff", "message": "Merge branch 'master' into APPSERV-14-slow-sql", "committedDate": "2020-01-17T10:50:51Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg4MDk4OQ==", "url": "https://github.com/payara/Payara/pull/4422#discussion_r367880989", "body": "NB. Sadly this cannot share code with `SQLTraceLogger` which does almost the same as this has to be its own thread local otherwise the manipulation of the query happens multiple times if both listeners are installed which messes up the query.", "bodyText": "NB. Sadly this cannot share code with SQLTraceLogger which does almost the same as this has to be its own thread local otherwise the manipulation of the query happens multiple times if both listeners are installed which messes up the query.", "bodyHTML": "<p dir=\"auto\">NB. Sadly this cannot share code with <code>SQLTraceLogger</code> which does almost the same as this has to be its own thread local otherwise the manipulation of the query happens multiple times if both listeners are installed which messes up the query.</p>", "author": "jbee", "createdAt": "2020-01-17T11:01:16Z", "path": "appserver/jdbc/jdbc-ra/jdbc-core/src/main/java/fish/payara/jdbc/SQLTraceStoreAdapter.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) 2020 Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://glassfish.dev.java.net/public/CDDL+GPL_1_1.html\n+ * or packager/legal/LICENSE.txt.  See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at packager/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * Oracle designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by Oracle in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package fish.payara.jdbc;\n+\n+import org.glassfish.api.jdbc.SQLTraceListener;\n+import org.glassfish.api.jdbc.SQLTraceRecord;\n+import org.glassfish.api.jdbc.SQLTraceStore;\n+import org.glassfish.internal.api.Globals;\n+\n+/**\n+ * An adapter between the {@link SQLTraceListener} abstraction that is registered with implementation class as key and a\n+ * managed instance of the {@link SQLTraceStore}.\n+ * \n+ * @author Jan Bernitt\n+ */\n+public class SQLTraceStoreAdapter implements SQLTraceListener {\n+\n+    private static ThreadLocal<SQLQuery> currentQuery = new ThreadLocal<>();", "originalCommit": "9e270cb31e772c0f9b1ba1777d7c48dfa1d5eeff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzkxNzA5MQ==", "url": "https://github.com/payara/Payara/pull/4422#discussion_r367917091", "bodyText": "Might be worth adding a simplified version of this comment to the code", "author": "Pandrex247", "createdAt": "2020-01-17T12:42:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg4MDk4OQ=="}], "type": "inlineReview", "revised_code": {"commit": "49da5fa161f554f50678104dec3a121fe4125ebb", "changed_code": [{"header": "diff --git a/appserver/jdbc/jdbc-ra/jdbc-core/src/main/java/fish/payara/jdbc/SQLTraceStoreAdapter.java b/appserver/jdbc/jdbc-ra/jdbc-core/src/main/java/fish/payara/jdbc/SQLTraceStoreAdapter.java\nindex 4a63a4b3b0..81dc95a968 100644\n--- a/appserver/jdbc/jdbc-ra/jdbc-core/src/main/java/fish/payara/jdbc/SQLTraceStoreAdapter.java\n+++ b/appserver/jdbc/jdbc-ra/jdbc-core/src/main/java/fish/payara/jdbc/SQLTraceStoreAdapter.java\n", "chunk": "@@ -44,10 +44,16 @@ import org.glassfish.api.jdbc.SQLTraceRecord;\n import org.glassfish.api.jdbc.SQLTraceStore;\n import org.glassfish.internal.api.Globals;\n \n+import com.sun.gjc.util.SQLTraceLogger;\n+\n /**\n  * An adapter between the {@link SQLTraceListener} abstraction that is registered with implementation class as key and a\n  * managed instance of the {@link SQLTraceStore}.\n  * \n+ * Even though this class is very similar to {@link SQLTraceLogger} the classes cannot share code as each has to have\n+ * its own {@link ThreadLocal}. Would they inherit from the same base class the invocations from both classes would get\n+ * mixed up in the same {@link ThreadLocal}.\n+ * \n  * @author Jan Bernitt\n  */\n public class SQLTraceStoreAdapter implements SQLTraceListener {\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzkxNzU5Nw==", "url": "https://github.com/payara/Payara/pull/4422#discussion_r367917597", "body": "Minor point: this comment seems to be floating in space a bit", "bodyText": "Minor point: this comment seems to be floating in space a bit", "bodyHTML": "<p dir=\"auto\">Minor point: this comment seems to be floating in space a bit</p>", "author": "Pandrex247", "createdAt": "2020-01-17T12:44:00Z", "path": "appserver/jdbc/jdbc-ra/jdbc-core/src/main/java/fish/payara/jdbc/SQLTraceStoreAdapter.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) 2020 Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://glassfish.dev.java.net/public/CDDL+GPL_1_1.html\n+ * or packager/legal/LICENSE.txt.  See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at packager/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * Oracle designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by Oracle in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package fish.payara.jdbc;\n+\n+import org.glassfish.api.jdbc.SQLTraceListener;\n+import org.glassfish.api.jdbc.SQLTraceRecord;\n+import org.glassfish.api.jdbc.SQLTraceStore;\n+import org.glassfish.internal.api.Globals;\n+\n+/**\n+ * An adapter between the {@link SQLTraceListener} abstraction that is registered with implementation class as key and a\n+ * managed instance of the {@link SQLTraceStore}.\n+ * \n+ * @author Jan Bernitt\n+ */\n+public class SQLTraceStoreAdapter implements SQLTraceListener {\n+\n+    private static ThreadLocal<SQLQuery> currentQuery = new ThreadLocal<>();\n+\n+    private final SQLTraceStore store;\n+\n+    public SQLTraceStoreAdapter() {\n+        this.store = Globals.getDefaultHabitat().getService(SQLTraceStore.class);\n+    }\n+\n+    @Override\n+    public void sqlTrace(SQLTraceRecord record) {\n+        if (record != null) {    \n+            switch (record.getMethodName()) {\n+\n+            // these calls capture a query string\n+            case \"nativeSQL\":\n+            case \"prepareCall\":\n+            case \"prepareStatement\":\n+            case \"addBatch\":\n+            {\n+                // acquire the SQL\n+                SQLQuery query = currentQuery.get();\n+                if (query == null) {\n+                    query = new SQLQuery();\n+                    currentQuery.set(query);\n+                }  \n+                if (record.getParams() != null && record.getParams().length > 0)\n+                    query.addSQL((String)record.getParams()[0]);\n+                break;\n+            }\n+            case \"execute\":\n+            case \"executeQuery\":\n+            case \"executeUpdate\":\n+            {\n+                // acquire the SQL\n+                SQLQuery query = currentQuery.get();\n+                if (query == null) {\n+                    query = new SQLQuery();\n+                    currentQuery.set(query);\n+                }                      // these can all run the SQL and contain SQL", "originalCommit": "9e270cb31e772c0f9b1ba1777d7c48dfa1d5eeff", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "49da5fa161f554f50678104dec3a121fe4125ebb", "changed_code": [{"header": "diff --git a/appserver/jdbc/jdbc-ra/jdbc-core/src/main/java/fish/payara/jdbc/SQLTraceStoreAdapter.java b/appserver/jdbc/jdbc-ra/jdbc-core/src/main/java/fish/payara/jdbc/SQLTraceStoreAdapter.java\nindex 4a63a4b3b0..81dc95a968 100644\n--- a/appserver/jdbc/jdbc-ra/jdbc-core/src/main/java/fish/payara/jdbc/SQLTraceStoreAdapter.java\n+++ b/appserver/jdbc/jdbc-ra/jdbc-core/src/main/java/fish/payara/jdbc/SQLTraceStoreAdapter.java\n", "chunk": "@@ -90,7 +98,7 @@ public class SQLTraceStoreAdapter implements SQLTraceListener {\n                 if (query == null) {\n                     query = new SQLQuery();\n                     currentQuery.set(query);\n-                }                      // these can all run the SQL and contain SQL\n+                }\n                 // see if we have more SQL\n                 if (record.getParams() != null && record.getParams().length > 0) {\n                     // gather the SQL\n", "next_change": {"commit": "c7f03cd60573e40578f2828edaa8e053c2507ab4", "changed_code": [{"header": "diff --git a/appserver/jdbc/jdbc-ra/jdbc-core/src/main/java/fish/payara/jdbc/SQLTraceStoreAdapter.java b/appserver/jdbc/jdbc-ra/jdbc-core/src/main/java/fish/payara/jdbc/SQLTraceStoreAdapter.java\nindex 81dc95a968..fc451923c2 100644\n--- a/appserver/jdbc/jdbc-ra/jdbc-core/src/main/java/fish/payara/jdbc/SQLTraceStoreAdapter.java\n+++ b/appserver/jdbc/jdbc-ra/jdbc-core/src/main/java/fish/payara/jdbc/SQLTraceStoreAdapter.java\n", "chunk": "@@ -68,51 +68,49 @@ public class SQLTraceStoreAdapter implements SQLTraceListener {\n \n     @Override\n     public void sqlTrace(SQLTraceRecord record) {\n-        if (record != null) {    \n+        if (record != null) {\n             switch (record.getMethodName()) {\n-\n             // these calls capture a query string\n             case \"nativeSQL\":\n             case \"prepareCall\":\n             case \"prepareStatement\":\n             case \"addBatch\":\n-            {\n-                // acquire the SQL\n-                SQLQuery query = currentQuery.get();\n-                if (query == null) {\n-                    query = new SQLQuery();\n-                    currentQuery.set(query);\n-                }  \n-                if (record.getParams() != null && record.getParams().length > 0)\n-                    query.addSQL((String)record.getParams()[0]);\n+                aquireSQL(record);\n                 break;\n-            }\n-\n             // these can all run the SQL and contain SQL\n             case \"execute\":\n             case \"executeQuery\":\n             case \"executeUpdate\":\n-            {\n-                // acquire the SQL\n-                SQLQuery query = currentQuery.get();\n-                if (query == null) {\n-                    query = new SQLQuery();\n-                    currentQuery.set(query);\n-                }\n-                // see if we have more SQL\n-                if (record.getParams() != null && record.getParams().length > 0) {\n-                    // gather the SQL\n-                    query.addSQL((String) record.getParams()[0]);\n-                }\n-                if (store != null) {\n-                    store.trace(record, query.getSQL());\n-                }\n-                // clean the thread local\n-                currentQuery.set(null);\n+                trace(record);\n                 break;\n+            default:\n+                // nothing\n             }\n-            }\n         }\n     }\n \n+    private void trace(SQLTraceRecord record) {\n+        SQLQuery query = aquireSQL(record);\n+        if (store != null) {\n+            store.trace(record, query.getSQL());\n+        }\n+        // clean the thread local\n+        currentQuery.set(null);\n+    }\n+\n+    private static SQLQuery aquireSQL(SQLTraceRecord record) {\n+        // acquire the SQL\n+        SQLQuery query = currentQuery.get();\n+        if (query == null) {\n+            query = new SQLQuery();\n+            currentQuery.set(query);\n+        }\n+        // see if we have more SQL\n+        if (record.getParams() != null && record.getParams().length > 0) {\n+            // gather the SQL\n+            query.addSQL((String)record.getParams()[0]);\n+        }\n+        return query;\n+    }\n+\n }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAyMTAzOQ==", "url": "https://github.com/payara/Payara/pull/4422#discussion_r368021039", "body": "Personally I prefer Bean style: private fields with getters & setters.", "bodyText": "Personally I prefer Bean style: private fields with getters & setters.", "bodyHTML": "<p dir=\"auto\">Personally I prefer Bean style: private fields with getters &amp; setters.</p>", "author": "Pandrex247", "createdAt": "2020-01-17T16:22:37Z", "path": "appserver/monitoring-console/core/src/main/java/fish/payara/monitoring/model/SeriesAnnotation.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n+ *\n+ * Copyright (c) 2020 Payara Foundation and/or its affiliates. All rights reserved.\n+ *\n+ * The contents of this file are subject to the terms of either the GNU\n+ * General Public License Version 2 only (\"GPL\") or the Common Development\n+ * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n+ * may not use this file except in compliance with the License.  You can\n+ * obtain a copy of the License at\n+ * https://github.com/payara/Payara/blob/master/LICENSE.txt\n+ * See the License for the specific\n+ * language governing permissions and limitations under the License.\n+ *\n+ * When distributing the software, include this License Header Notice in each\n+ * file and include the License file at glassfish/legal/LICENSE.txt.\n+ *\n+ * GPL Classpath Exception:\n+ * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n+ * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n+ * file that accompanied this code.\n+ *\n+ * Modifications:\n+ * If applicable, add the following below the License Header, with the fields\n+ * enclosed by brackets [] replaced by your own identifying information:\n+ * \"Portions Copyright [year] [name of copyright owner]\"\n+ *\n+ * Contributor(s):\n+ * If you wish your version of this file to be governed by only the CDDL or\n+ * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n+ * elects to include this software in this distribution under the [CDDL or GPL\n+ * Version 2] license.\"  If you don't indicate a single choice of license, a\n+ * recipient has the option to distribute your version of this file under\n+ * either the CDDL, the GPL Version 2 or to extend the choice of license to\n+ * its licensees as provided above.  However, if you add GPL Version 2 code\n+ * and therefore, elected the GPL Version 2 license, then the option applies\n+ * only if the new code is made subject to such option by the copyright\n+ * holder.\n+ */\n+package fish.payara.monitoring.model;\n+\n+import java.io.Serializable;\n+import java.util.Arrays;\n+\n+/**\n+ * An {@link SeriesAnnotation} is meta data linked to a {@link SeriesDataset} by having the same {@link Series} and\n+ * {@link #instance} and pointing to a {@link #time} that is in the range of {@link SeriesDataset}.\n+ * \n+ * The meta data attached is a list of key-value pairs.\n+ * \n+ * @author Jan Bernitt\n+ * @since 5.201\n+ */\n+public final class SeriesAnnotation implements Serializable {\n+\n+    public final long time;", "originalCommit": "9e270cb31e772c0f9b1ba1777d7c48dfa1d5eeff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAzODQ0OQ==", "url": "https://github.com/payara/Payara/pull/4422#discussion_r368038449", "bodyText": "So only with getter here, because it is final.\nBtw I use public final fields only in extremely short private classes, ie. value objects with multiple fields.", "author": "dmatej", "createdAt": "2020-01-17T16:58:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAyMTAzOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA3MDUwMg==", "url": "https://github.com/payara/Payara/pull/4422#discussion_r368070502", "bodyText": "I prefer less code and a getter for an immutable final field seems to me has no benefit and only costs but I can bring myself to add one anyway and call it a sacrifice for \"consistency\" and (other readers) \"readability\"  :D", "author": "jbee", "createdAt": "2020-01-17T18:17:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAyMTAzOQ=="}], "type": "inlineReview", "revised_code": {"commit": "49da5fa161f554f50678104dec3a121fe4125ebb", "changed_code": [{"header": "diff --git a/appserver/monitoring-console/core/src/main/java/fish/payara/monitoring/model/SeriesAnnotation.java b/appserver/monitoring-console/core/src/main/java/fish/payara/monitoring/model/SeriesAnnotation.java\nindex 5c49202b26..87446e8b11 100644\n--- a/appserver/monitoring-console/core/src/main/java/fish/payara/monitoring/model/SeriesAnnotation.java\n+++ b/appserver/monitoring-console/core/src/main/java/fish/payara/monitoring/model/SeriesAnnotation.java\n", "chunk": "@@ -51,13 +54,13 @@ import java.util.Arrays;\n  * @author Jan Bernitt\n  * @since 5.201\n  */\n-public final class SeriesAnnotation implements Serializable {\n+public final class SeriesAnnotation implements Serializable, Iterable<Entry<String, String>> {\n \n-    public final long time;\n-    public final Series series;\n-    public final String instance;\n-    public final long value;\n-    public final String[] attrs;\n+    private final long time;\n+    private final Series series;\n+    private final String instance;\n+    private final long value;\n+    private final String[] attrs;\n \n     public SeriesAnnotation(long time, Series series, String instance, long value, String[] attrs) {\n         this.time = time;\n", "next_change": {"commit": "268b0075dfeb1522d4de81ca6c33d5ef931e91e0", "changed_code": [{"header": "diff --git a/appserver/monitoring-console/core/src/main/java/fish/payara/monitoring/model/SeriesAnnotation.java b/appserver/monitoring-console/core/src/main/java/fish/payara/monitoring/model/SeriesAnnotation.java\nindex 87446e8b11..00282951d4 100644\n--- a/appserver/monitoring-console/core/src/main/java/fish/payara/monitoring/model/SeriesAnnotation.java\n+++ b/appserver/monitoring-console/core/src/main/java/fish/payara/monitoring/model/SeriesAnnotation.java\n", "chunk": "@@ -60,13 +60,15 @@ public final class SeriesAnnotation implements Serializable, Iterable<Entry<Stri\n     private final Series series;\n     private final String instance;\n     private final long value;\n+    private final boolean keyed;\n     private final String[] attrs;\n \n-    public SeriesAnnotation(long time, Series series, String instance, long value, String[] attrs) {\n+    public SeriesAnnotation(long time, Series series, String instance, long value, boolean keyed, String[] attrs) {\n         this.time = time;\n         this.series = series;\n         this.instance = instance;\n         this.value = value;\n+        this.keyed = keyed;\n         this.attrs = attrs;\n         if (attrs.length % 2 == 1) {\n             throw new IllegalArgumentException(\n", "next_change": {"commit": "3c882b33e8efc20138ece79385530a3a97946094", "changed_code": [{"header": "diff --git a/appserver/monitoring-console/core/src/main/java/fish/payara/monitoring/model/SeriesAnnotation.java b/appserver/monitoring-console/core/src/main/java/fish/payara/monitoring/model/SeriesAnnotation.java\nindex 00282951d4..343c00dffb 100644\n--- a/appserver/monitoring-console/core/src/main/java/fish/payara/monitoring/model/SeriesAnnotation.java\n+++ b/appserver/monitoring-console/core/src/main/java/fish/payara/monitoring/model/SeriesAnnotation.java\n", "chunk": "@@ -68,7 +68,7 @@ public final class SeriesAnnotation implements Serializable, Iterable<Entry<Stri\n         this.series = series;\n         this.instance = instance;\n         this.value = value;\n-        this.keyed = keyed;\n+        this.keyed = keyed && attrs.length >= 2;\n         this.attrs = attrs;\n         if (attrs.length % 2 == 1) {\n             throw new IllegalArgumentException(\n", "next_change": {"commit": "8736b667af9f4a228df1f4354e6794754ab2739e", "changed_code": [{"header": "diff --git a/appserver/monitoring-console/core/src/main/java/fish/payara/monitoring/model/SeriesAnnotation.java b/appserver/monitoring-console/core/src/main/java/fish/payara/monitoring/model/SeriesAnnotation.java\ndeleted file mode 100644\nindex 343c00dffb..0000000000\n--- a/appserver/monitoring-console/core/src/main/java/fish/payara/monitoring/model/SeriesAnnotation.java\n+++ /dev/null\n", "chunk": "@@ -1,152 +0,0 @@\n-/*\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.\n- *\n- * Copyright (c) 2020 Payara Foundation and/or its affiliates. All rights reserved.\n- *\n- * The contents of this file are subject to the terms of either the GNU\n- * General Public License Version 2 only (\"GPL\") or the Common Development\n- * and Distribution License(\"CDDL\") (collectively, the \"License\").  You\n- * may not use this file except in compliance with the License.  You can\n- * obtain a copy of the License at\n- * https://github.com/payara/Payara/blob/master/LICENSE.txt\n- * See the License for the specific\n- * language governing permissions and limitations under the License.\n- *\n- * When distributing the software, include this License Header Notice in each\n- * file and include the License file at glassfish/legal/LICENSE.txt.\n- *\n- * GPL Classpath Exception:\n- * The Payara Foundation designates this particular file as subject to the \"Classpath\"\n- * exception as provided by the Payara Foundation in the GPL Version 2 section of the License\n- * file that accompanied this code.\n- *\n- * Modifications:\n- * If applicable, add the following below the License Header, with the fields\n- * enclosed by brackets [] replaced by your own identifying information:\n- * \"Portions Copyright [year] [name of copyright owner]\"\n- *\n- * Contributor(s):\n- * If you wish your version of this file to be governed by only the CDDL or\n- * only the GPL Version 2, indicate your decision by adding \"[Contributor]\n- * elects to include this software in this distribution under the [CDDL or GPL\n- * Version 2] license.\"  If you don't indicate a single choice of license, a\n- * recipient has the option to distribute your version of this file under\n- * either the CDDL, the GPL Version 2 or to extend the choice of license to\n- * its licensees as provided above.  However, if you add GPL Version 2 code\n- * and therefore, elected the GPL Version 2 license, then the option applies\n- * only if the new code is made subject to such option by the copyright\n- * holder.\n- */\n-package fish.payara.monitoring.model;\n-\n-import java.io.Serializable;\n-import java.util.AbstractMap;\n-import java.util.Arrays;\n-import java.util.Iterator;\n-import java.util.Map.Entry;\n-\n-/**\n- * An {@link SeriesAnnotation} is meta data linked to a {@link SeriesDataset} by having the same {@link Series} and\n- * {@link #instance} and pointing to a {@link #time} that is in the range of {@link SeriesDataset}.\n- * \n- * The meta data attached is a list of key-value pairs.\n- * \n- * @author Jan Bernitt\n- * @since 5.201\n- */\n-public final class SeriesAnnotation implements Serializable, Iterable<Entry<String, String>> {\n-\n-    private final long time;\n-    private final Series series;\n-    private final String instance;\n-    private final long value;\n-    private final boolean keyed;\n-    private final String[] attrs;\n-\n-    public SeriesAnnotation(long time, Series series, String instance, long value, boolean keyed, String[] attrs) {\n-        this.time = time;\n-        this.series = series;\n-        this.instance = instance;\n-        this.value = value;\n-        this.keyed = keyed && attrs.length >= 2;\n-        this.attrs = attrs;\n-        if (attrs.length % 2 == 1) {\n-            throw new IllegalArgumentException(\n-                    \"Annotation attributes always must be given in pairs but got: \" + Arrays.toString(attrs));\n-        }\n-    }\n-\n-    public long getTime() {\n-        return time;\n-    }\n-\n-    public long getValue() {\n-        return value;\n-    }\n-\n-    public Series getSeries() {\n-        return series;\n-    }\n-\n-    public String getInstance() {\n-        return instance;\n-    }\n-\n-    public boolean isKeyed() {\n-        return keyed;\n-    }\n-\n-    /**\n-     * @return By convention the first attribute is the key, null if not defined\n-     */\n-    public String getKeyAttribute() {\n-        return isKeyed() ? attrs[1] : null;\n-    }\n-\n-    public int getAttriuteCount() {\n-        return attrs.length / 2;\n-    }\n-\n-    @Override\n-    public Iterator<Entry<String, String>> iterator() {\n-        final String[] elems = attrs;\n-        return new Iterator<Entry<String,String>>() {\n-            int i = 0;\n-            @Override\n-            public boolean hasNext() {\n-                return i < elems.length;\n-            }\n-\n-            @Override\n-            public Entry<String, String> next() {\n-                return new AbstractMap.SimpleImmutableEntry<>(elems[i++], elems[i++]);\n-            }\n-        };\n-    }\n-\n-    @Override\n-    public int hashCode() {\n-        return series.hashCode() ^ instance.hashCode() ^ (int) time;\n-    }\n-\n-    @Override\n-    public boolean equals(Object obj) {\n-        return obj instanceof SeriesAnnotation && equalTo((SeriesAnnotation) obj);\n-    }\n-\n-    public boolean equalTo(SeriesAnnotation other) {\n-        return time == other.time && series.equalTo(other.series) && instance.equals(other.instance);\n-    }\n-\n-    @Override\n-    public String toString() {\n-        StringBuilder str = new StringBuilder();\n-        str.append(instance).append(' ').append(series.toString()).append('=').append(value).append(' ').append(time);\n-        str.append(\":[\");\n-        for (int i = 0; i < attrs.length; i+=2) {\n-            str.append(\"\\n\\t\").append(attrs[i]).append('=').append(attrs[i+1]);\n-        }\n-        str.append(\"\\n]\");\n-        return str.toString();\n-    }\n-}\n\\ No newline at end of file\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAyNzE3MQ==", "url": "https://github.com/payara/Payara/pull/4422#discussion_r368027171", "body": "Reason there is for Yoda-style? <(\u00b0.\u00b0)>", "bodyText": "Reason there is for Yoda-style? <(\u00b0.\u00b0)>", "bodyHTML": "<p dir=\"auto\">Reason there is for Yoda-style? &lt;(\u00b0.\u00b0)&gt;</p>", "author": "Pandrex247", "createdAt": "2020-01-17T16:34:47Z", "path": "nucleus/payara-modules/requesttracing-core/src/main/java/fish/payara/nucleus/requesttracing/RequestTracingService.java", "diffHunk": "@@ -563,26 +574,70 @@ public RequestTraceStoreInterface getRequestTraceStore() {\n     }\n \n     @Override\n-    public void collect(MonitoringDataCollector rootCollector) {\n-        MonitoringDataCollector tracingCollector = rootCollector.in(\"trace\");\n+    public void collect(MonitoringWatchCollector collector) {\n+        if (\"true\".equals(configuration.getEnabled())) {", "originalCommit": "9e270cb31e772c0f9b1ba1777d7c48dfa1d5eeff", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAzODAxMQ==", "url": "https://github.com/payara/Payara/pull/4422#discussion_r368038011", "bodyText": "It is nullsafe and despite thera are two groups of developers, I like this more :D", "author": "dmatej", "createdAt": "2020-01-17T16:57:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAyNzE3MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA2NTcxMg==", "url": "https://github.com/payara/Payara/pull/4422#discussion_r368065712", "bodyText": "yes, its null safe, in contrast to someVar.equals(\"stringConstant\")", "author": "jbee", "createdAt": "2020-01-17T18:05:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAyNzE3MQ=="}], "type": "inlineReview", "revised_code": null}, {"oid": "49da5fa161f554f50678104dec3a121fe4125ebb", "url": "https://github.com/payara/Payara/commit/49da5fa161f554f50678104dec3a121fe4125ebb", "message": "APPSERV-14 addressed Andrew's comments", "committedDate": "2020-01-22T12:15:22Z", "type": "commit"}, {"oid": "46aaca97fbcec018ec1f16f05121f2b47a0e0fba", "url": "https://github.com/payara/Payara/commit/46aaca97fbcec018ec1f16f05121f2b47a0e0fba", "message": "APPSERV-14 fixed possible memory leak in case monitoring is disabled", "committedDate": "2020-01-22T13:06:47Z", "type": "commit"}]}