{"pr_number": 890, "pr_title": "PLANNER-2116 Extract build methods from Config classes: termination, entity and value selectors", "pr_author": "rsynek", "pr_createdAt": "2020-08-20T06:59:23Z", "pr_url": "https://github.com/kiegroup/optaplanner/pull/890", "timeline": [{"oid": "f430dbce855b3d0faaa8bf26792491ffa8f7494e", "url": "https://github.com/kiegroup/optaplanner/commit/f430dbce855b3d0faaa8bf26792491ffa8f7494e", "message": "PLANNER-2116 Externalize build methods of TerminationConfig", "committedDate": "2020-08-18T19:59:10Z", "type": "commit"}, {"oid": "e2e1a476f28c9417a9e9d771141e524cc73eeee1", "url": "https://github.com/kiegroup/optaplanner/commit/e2e1a476f28c9417a9e9d771141e524cc73eeee1", "message": "PLANNER-2116 Externalize build method of AcceptorConfig", "committedDate": "2020-08-18T19:59:10Z", "type": "commit"}, {"oid": "21400637f5fe9591ac4575eb2c42c8295ea45a14", "url": "https://github.com/kiegroup/optaplanner/commit/21400637f5fe9591ac4575eb2c42c8295ea45a14", "message": "PLANNER-2116 Externalize build method of ForagerConfig", "committedDate": "2020-08-18T19:59:10Z", "type": "commit"}, {"oid": "7ca187a5c426563e227ef5c4bbe997402dc9f925", "url": "https://github.com/kiegroup/optaplanner/commit/7ca187a5c426563e227ef5c4bbe997402dc9f925", "message": "Fix formatting", "committedDate": "2020-08-18T19:59:10Z", "type": "commit"}, {"oid": "b1458019698084bacd442ec33ab04a0163d6eacc", "url": "https://github.com/kiegroup/optaplanner/commit/b1458019698084bacd442ec33ab04a0163d6eacc", "message": "PLANNER-2116 Externalize build method of ForagerConfig", "committedDate": "2020-08-18T19:59:10Z", "type": "commit"}, {"oid": "09af9b5a21112181b2be7a291fa55eaaf378c58a", "url": "https://github.com/kiegroup/optaplanner/commit/09af9b5a21112181b2be7a291fa55eaaf378c58a", "message": "Externalize build methods from EntityPlacerConfigs", "committedDate": "2020-08-19T18:53:40Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzY5NTI0MQ==", "url": "https://github.com/kiegroup/optaplanner/pull/890#discussion_r473695241", "body": "Weird formatting again.", "bodyText": "Weird formatting again.", "bodyHTML": "<p dir=\"auto\">Weird formatting again.</p>", "author": "triceo", "createdAt": "2020-08-20T07:31:15Z", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/constructionheuristic/decider/forager/ConstructionHeuristicForagerFactory.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.core.impl.constructionheuristic.decider.forager;\n+\n+import org.optaplanner.core.config.constructionheuristic.decider.forager.ConstructionHeuristicForagerConfig;\n+import org.optaplanner.core.config.constructionheuristic.decider.forager.ConstructionHeuristicPickEarlyType;\n+import org.optaplanner.core.impl.heuristic.HeuristicConfigPolicy;\n+\n+public class ConstructionHeuristicForagerFactory {\n+\n+    public static ConstructionHeuristicForagerFactory create(ConstructionHeuristicForagerConfig foragerConfig) {\n+        return new ConstructionHeuristicForagerFactory(foragerConfig);\n+    }\n+\n+    private final ConstructionHeuristicForagerConfig foragerConfig;\n+\n+    public ConstructionHeuristicForagerFactory(\n+            ConstructionHeuristicForagerConfig foragerConfig) {", "originalCommit": "09af9b5a21112181b2be7a291fa55eaaf378c58a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "09adc19460979bfa916215306e03b3eb68c5ece5", "changed_code": [{"header": "diff --git a/optaplanner-core/src/main/java/org/optaplanner/core/impl/constructionheuristic/decider/forager/ConstructionHeuristicForagerFactory.java b/optaplanner-core/src/main/java/org/optaplanner/core/impl/constructionheuristic/decider/forager/ConstructionHeuristicForagerFactory.java\nindex c83d0ffbe4..ebbf7afb38 100644\n--- a/optaplanner-core/src/main/java/org/optaplanner/core/impl/constructionheuristic/decider/forager/ConstructionHeuristicForagerFactory.java\n+++ b/optaplanner-core/src/main/java/org/optaplanner/core/impl/constructionheuristic/decider/forager/ConstructionHeuristicForagerFactory.java\n", "chunk": "@@ -28,8 +28,7 @@ public class ConstructionHeuristicForagerFactory {\n \n     private final ConstructionHeuristicForagerConfig foragerConfig;\n \n-    public ConstructionHeuristicForagerFactory(\n-            ConstructionHeuristicForagerConfig foragerConfig) {\n+    public ConstructionHeuristicForagerFactory(ConstructionHeuristicForagerConfig foragerConfig) {\n         this.foragerConfig = foragerConfig;\n     }\n \n", "next_change": {"commit": "4ee2c29706d516daa2f9cbd5a58773148ceb7a64", "changed_code": [{"header": "diff --git a/optaplanner-core/src/main/java/org/optaplanner/core/impl/constructionheuristic/decider/forager/ConstructionHeuristicForagerFactory.java b/optaplanner-core/src/main/java/org/optaplanner/core/impl/constructionheuristic/decider/forager/ConstructionHeuristicForagerFactory.java\nindex ebbf7afb38..78d96f3fb7 100644\n--- a/optaplanner-core/src/main/java/org/optaplanner/core/impl/constructionheuristic/decider/forager/ConstructionHeuristicForagerFactory.java\n+++ b/optaplanner-core/src/main/java/org/optaplanner/core/impl/constructionheuristic/decider/forager/ConstructionHeuristicForagerFactory.java\n", "chunk": "@@ -32,7 +33,7 @@ public class ConstructionHeuristicForagerFactory {\n         this.foragerConfig = foragerConfig;\n     }\n \n-    public ConstructionHeuristicForager buildForager(HeuristicConfigPolicy configPolicy) {\n+    public ConstructionHeuristicForager<Solution_> buildForager(HeuristicConfigPolicy<Solution_> configPolicy) {\n         ConstructionHeuristicPickEarlyType pickEarlyType_;\n         if (foragerConfig.getPickEarlyType() == null) {\n             pickEarlyType_ = configPolicy.getScoreDirectorFactory().getInitializingScoreTrend().isOnlyDown()\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzY5NTgzNw==", "url": "https://github.com/kiegroup/optaplanner/pull/890#discussion_r473695837", "body": "Maybe an explanation here would be nice?", "bodyText": "Maybe an explanation here would be nice?", "bodyHTML": "<p dir=\"auto\">Maybe an explanation here would be nice?</p>", "author": "triceo", "createdAt": "2020-08-20T07:32:01Z", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/constructionheuristic/placer/EntityPlacerFactory.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.core.impl.constructionheuristic.placer;\n+\n+import org.optaplanner.core.config.constructionheuristic.placer.EntityPlacerConfig;\n+import org.optaplanner.core.config.constructionheuristic.placer.PooledEntityPlacerConfig;\n+import org.optaplanner.core.config.constructionheuristic.placer.QueuedEntityPlacerConfig;\n+import org.optaplanner.core.config.constructionheuristic.placer.QueuedValuePlacerConfig;\n+import org.optaplanner.core.impl.heuristic.HeuristicConfigPolicy;\n+\n+public interface EntityPlacerFactory {\n+\n+    static EntityPlacerFactory create(EntityPlacerConfig entityPlacerConfig) {\n+        if (PooledEntityPlacerConfig.class.isAssignableFrom(entityPlacerConfig.getClass())) {\n+            return new PooledEntityPlacerFactory((PooledEntityPlacerConfig) entityPlacerConfig);\n+        } else if (QueuedEntityPlacerConfig.class.isAssignableFrom(entityPlacerConfig.getClass())) {\n+            return new QueuedEntityPlacerFactory((QueuedEntityPlacerConfig) entityPlacerConfig);\n+        } else if (QueuedValuePlacerConfig.class.isAssignableFrom(entityPlacerConfig.getClass())) {\n+            return new QueuedValuePlacerFactory((QueuedValuePlacerConfig) entityPlacerConfig);\n+        } else {\n+            throw new IllegalArgumentException();", "originalCommit": "09af9b5a21112181b2be7a291fa55eaaf378c58a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzcwNzA1Mw==", "url": "https://github.com/kiegroup/optaplanner/pull/890#discussion_r473707053", "bodyText": "good catch, thanks!", "author": "rsynek", "createdAt": "2020-08-20T07:40:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzY5NTgzNw=="}], "type": "inlineReview", "revised_code": {"commit": "09adc19460979bfa916215306e03b3eb68c5ece5", "changed_code": [{"header": "diff --git a/optaplanner-core/src/main/java/org/optaplanner/core/impl/constructionheuristic/placer/EntityPlacerFactory.java b/optaplanner-core/src/main/java/org/optaplanner/core/impl/constructionheuristic/placer/EntityPlacerFactory.java\nindex 5aa6e48ef0..e01768ca68 100644\n--- a/optaplanner-core/src/main/java/org/optaplanner/core/impl/constructionheuristic/placer/EntityPlacerFactory.java\n+++ b/optaplanner-core/src/main/java/org/optaplanner/core/impl/constructionheuristic/placer/EntityPlacerFactory.java\n", "chunk": "@@ -32,7 +32,8 @@ public interface EntityPlacerFactory {\n         } else if (QueuedValuePlacerConfig.class.isAssignableFrom(entityPlacerConfig.getClass())) {\n             return new QueuedValuePlacerFactory((QueuedValuePlacerConfig) entityPlacerConfig);\n         } else {\n-            throw new IllegalArgumentException();\n+            throw new IllegalArgumentException(\n+                    String.format(\"Unknown EntityPlacerConfig type: (%s).\", entityPlacerConfig.getClass().getName()));\n         }\n     }\n \n", "next_change": {"commit": "4ee2c29706d516daa2f9cbd5a58773148ceb7a64", "changed_code": [{"header": "diff --git a/optaplanner-core/src/main/java/org/optaplanner/core/impl/constructionheuristic/placer/EntityPlacerFactory.java b/optaplanner-core/src/main/java/org/optaplanner/core/impl/constructionheuristic/placer/EntityPlacerFactory.java\nindex e01768ca68..10b7260329 100644\n--- a/optaplanner-core/src/main/java/org/optaplanner/core/impl/constructionheuristic/placer/EntityPlacerFactory.java\n+++ b/optaplanner-core/src/main/java/org/optaplanner/core/impl/constructionheuristic/placer/EntityPlacerFactory.java\n", "chunk": "@@ -22,20 +22,20 @@ import org.optaplanner.core.config.constructionheuristic.placer.QueuedEntityPlac\n import org.optaplanner.core.config.constructionheuristic.placer.QueuedValuePlacerConfig;\n import org.optaplanner.core.impl.heuristic.HeuristicConfigPolicy;\n \n-public interface EntityPlacerFactory {\n+public interface EntityPlacerFactory<Solution_> {\n \n-    static EntityPlacerFactory create(EntityPlacerConfig entityPlacerConfig) {\n+    static <Solution_> EntityPlacerFactory<Solution_> create(EntityPlacerConfig<?> entityPlacerConfig) {\n         if (PooledEntityPlacerConfig.class.isAssignableFrom(entityPlacerConfig.getClass())) {\n-            return new PooledEntityPlacerFactory((PooledEntityPlacerConfig) entityPlacerConfig);\n+            return new PooledEntityPlacerFactory<>((PooledEntityPlacerConfig) entityPlacerConfig);\n         } else if (QueuedEntityPlacerConfig.class.isAssignableFrom(entityPlacerConfig.getClass())) {\n-            return new QueuedEntityPlacerFactory((QueuedEntityPlacerConfig) entityPlacerConfig);\n+            return new QueuedEntityPlacerFactory<>((QueuedEntityPlacerConfig) entityPlacerConfig);\n         } else if (QueuedValuePlacerConfig.class.isAssignableFrom(entityPlacerConfig.getClass())) {\n-            return new QueuedValuePlacerFactory((QueuedValuePlacerConfig) entityPlacerConfig);\n+            return new QueuedValuePlacerFactory<>((QueuedValuePlacerConfig) entityPlacerConfig);\n         } else {\n             throw new IllegalArgumentException(\n                     String.format(\"Unknown EntityPlacerConfig type: (%s).\", entityPlacerConfig.getClass().getName()));\n         }\n     }\n \n-    EntityPlacer buildEntityPlacer(HeuristicConfigPolicy configPolicy);\n+    EntityPlacer<Solution_> buildEntityPlacer(HeuristicConfigPolicy<Solution_> configPolicy);\n }\n", "next_change": {"commit": "2143c83ef49e59f9e0bd1b97340ba43dec295e8b", "changed_code": [{"header": "diff --git a/optaplanner-core/src/main/java/org/optaplanner/core/impl/constructionheuristic/placer/EntityPlacerFactory.java b/optaplanner-core/src/main/java/org/optaplanner/core/impl/constructionheuristic/placer/EntityPlacerFactory.java\nindex 10b7260329..c31797c092 100644\n--- a/optaplanner-core/src/main/java/org/optaplanner/core/impl/constructionheuristic/placer/EntityPlacerFactory.java\n+++ b/optaplanner-core/src/main/java/org/optaplanner/core/impl/constructionheuristic/placer/EntityPlacerFactory.java\n", "chunk": "@@ -32,8 +32,8 @@ public interface EntityPlacerFactory<Solution_> {\n         } else if (QueuedValuePlacerConfig.class.isAssignableFrom(entityPlacerConfig.getClass())) {\n             return new QueuedValuePlacerFactory<>((QueuedValuePlacerConfig) entityPlacerConfig);\n         } else {\n-            throw new IllegalArgumentException(\n-                    String.format(\"Unknown EntityPlacerConfig type: (%s).\", entityPlacerConfig.getClass().getName()));\n+            throw new IllegalArgumentException(String.format(\"Unknown %s type: (%s).\",\n+                    EntityPlacerConfig.class.getSimpleName(), entityPlacerConfig.getClass().getName()));\n         }\n     }\n \n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzY5NjcyMw==", "url": "https://github.com/kiegroup/optaplanner/pull/890#discussion_r473696723", "body": "Formatting.", "bodyText": "Formatting.", "bodyHTML": "<p dir=\"auto\">Formatting.</p>", "author": "triceo", "createdAt": "2020-08-20T07:32:52Z", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/constructionheuristic/placer/PooledEntityPlacerFactory.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.core.impl.constructionheuristic.placer;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.optaplanner.core.config.constructionheuristic.placer.PooledEntityPlacerConfig;\n+import org.optaplanner.core.config.heuristic.selector.common.SelectionCacheType;\n+import org.optaplanner.core.config.heuristic.selector.common.SelectionOrder;\n+import org.optaplanner.core.config.heuristic.selector.entity.EntitySelectorConfig;\n+import org.optaplanner.core.config.heuristic.selector.move.MoveSelectorConfig;\n+import org.optaplanner.core.config.heuristic.selector.move.composite.CartesianProductMoveSelectorConfig;\n+import org.optaplanner.core.config.heuristic.selector.move.generic.ChangeMoveSelectorConfig;\n+import org.optaplanner.core.impl.domain.entity.descriptor.EntityDescriptor;\n+import org.optaplanner.core.impl.domain.variable.descriptor.GenuineVariableDescriptor;\n+import org.optaplanner.core.impl.heuristic.HeuristicConfigPolicy;\n+import org.optaplanner.core.impl.heuristic.selector.move.MoveSelector;\n+import org.optaplanner.core.impl.heuristic.selector.move.MoveSelectorFactory;\n+\n+public class PooledEntityPlacerFactory extends AbstractEntityPlacerFactory<PooledEntityPlacerConfig> {\n+\n+    public PooledEntityPlacerFactory(PooledEntityPlacerConfig placerConfig) {\n+        super(placerConfig);\n+    }\n+\n+    @Override\n+    public PooledEntityPlacer buildEntityPlacer(HeuristicConfigPolicy configPolicy) {\n+        MoveSelectorConfig moveSelectorConfig_ =\n+                placerConfig.getMoveSelectorConfig() == null ? buildMoveSelectorConfig(configPolicy)\n+                        : placerConfig.getMoveSelectorConfig();\n+\n+        MoveSelector moveSelector = MoveSelectorFactory.create(moveSelectorConfig_).buildMoveSelector(\n+                configPolicy, SelectionCacheType.JUST_IN_TIME, SelectionOrder.ORIGINAL);\n+        return new PooledEntityPlacer(moveSelector);\n+    }\n+\n+    private MoveSelectorConfig buildMoveSelectorConfig(HeuristicConfigPolicy configPolicy) {\n+        EntityDescriptor entityDescriptor = configPolicy.getSolutionDescriptor().deduceEntityDescriptor(null);\n+        EntitySelectorConfig entitySelectorConfig = buildEntitySelectorConfig(configPolicy, entityDescriptor);\n+\n+        Collection<GenuineVariableDescriptor> variableDescriptors = entityDescriptor.getGenuineVariableDescriptors();\n+        List<MoveSelectorConfig> subMoveSelectorConfigList = new ArrayList<>(\n+                variableDescriptors.size());", "originalCommit": "09af9b5a21112181b2be7a291fa55eaaf378c58a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "09adc19460979bfa916215306e03b3eb68c5ece5", "changed_code": [{"header": "diff --git a/optaplanner-core/src/main/java/org/optaplanner/core/impl/constructionheuristic/placer/PooledEntityPlacerFactory.java b/optaplanner-core/src/main/java/org/optaplanner/core/impl/constructionheuristic/placer/PooledEntityPlacerFactory.java\nindex f358cdee67..5efa1162a8 100644\n--- a/optaplanner-core/src/main/java/org/optaplanner/core/impl/constructionheuristic/placer/PooledEntityPlacerFactory.java\n+++ b/optaplanner-core/src/main/java/org/optaplanner/core/impl/constructionheuristic/placer/PooledEntityPlacerFactory.java\n", "chunk": "@@ -55,11 +104,10 @@ public class PooledEntityPlacerFactory extends AbstractEntityPlacerFactory<Poole\n         EntitySelectorConfig entitySelectorConfig = buildEntitySelectorConfig(configPolicy, entityDescriptor);\n \n         Collection<GenuineVariableDescriptor> variableDescriptors = entityDescriptor.getGenuineVariableDescriptors();\n-        List<MoveSelectorConfig> subMoveSelectorConfigList = new ArrayList<>(\n-                variableDescriptors.size());\n+        List<MoveSelectorConfig> subMoveSelectorConfigList = new ArrayList<>(variableDescriptors.size());\n         for (GenuineVariableDescriptor variableDescriptor : variableDescriptors) {\n-            subMoveSelectorConfigList.add(buildChangeMoveSelectorConfig(\n-                    configPolicy, entitySelectorConfig.getId(), variableDescriptor));\n+            subMoveSelectorConfigList\n+                    .add(buildChangeMoveSelectorConfig(configPolicy, entitySelectorConfig.getId(), variableDescriptor));\n         }\n         // The first entitySelectorConfig must be the mimic recorder, not the mimic replayer\n         ((ChangeMoveSelectorConfig) subMoveSelectorConfigList.get(0)).setEntitySelectorConfig(entitySelectorConfig);\n", "next_change": {"commit": "4ee2c29706d516daa2f9cbd5a58773148ceb7a64", "changed_code": [{"header": "diff --git a/optaplanner-core/src/main/java/org/optaplanner/core/impl/constructionheuristic/placer/PooledEntityPlacerFactory.java b/optaplanner-core/src/main/java/org/optaplanner/core/impl/constructionheuristic/placer/PooledEntityPlacerFactory.java\nindex 5efa1162a8..f78d335c49 100644\n--- a/optaplanner-core/src/main/java/org/optaplanner/core/impl/constructionheuristic/placer/PooledEntityPlacerFactory.java\n+++ b/optaplanner-core/src/main/java/org/optaplanner/core/impl/constructionheuristic/placer/PooledEntityPlacerFactory.java\n", "chunk": "@@ -89,23 +92,22 @@ public class PooledEntityPlacerFactory extends AbstractEntityPlacerFactory<Poole\n     }\n \n     @Override\n-    public PooledEntityPlacer buildEntityPlacer(HeuristicConfigPolicy configPolicy) {\n+    public PooledEntityPlacer<Solution_> buildEntityPlacer(HeuristicConfigPolicy<Solution_> configPolicy) {\n         MoveSelectorConfig moveSelectorConfig_ =\n-                placerConfig.getMoveSelectorConfig() == null ? buildMoveSelectorConfig(configPolicy)\n-                        : placerConfig.getMoveSelectorConfig();\n+                config.getMoveSelectorConfig() == null ? buildMoveSelectorConfig(configPolicy) : config.getMoveSelectorConfig();\n \n-        MoveSelector moveSelector = MoveSelectorFactory.create(moveSelectorConfig_).buildMoveSelector(\n-                configPolicy, SelectionCacheType.JUST_IN_TIME, SelectionOrder.ORIGINAL);\n-        return new PooledEntityPlacer(moveSelector);\n+        MoveSelector<Solution_> moveSelector = MoveSelectorFactory.<Solution_> create(moveSelectorConfig_)\n+                .buildMoveSelector(configPolicy, SelectionCacheType.JUST_IN_TIME, SelectionOrder.ORIGINAL);\n+        return new PooledEntityPlacer<>(moveSelector);\n     }\n \n-    private MoveSelectorConfig buildMoveSelectorConfig(HeuristicConfigPolicy configPolicy) {\n-        EntityDescriptor entityDescriptor = configPolicy.getSolutionDescriptor().deduceEntityDescriptor(null);\n+    private MoveSelectorConfig buildMoveSelectorConfig(HeuristicConfigPolicy<Solution_> configPolicy) {\n+        EntityDescriptor<Solution_> entityDescriptor = deduceEntityDescriptor(configPolicy.getSolutionDescriptor());\n         EntitySelectorConfig entitySelectorConfig = buildEntitySelectorConfig(configPolicy, entityDescriptor);\n \n-        Collection<GenuineVariableDescriptor> variableDescriptors = entityDescriptor.getGenuineVariableDescriptors();\n+        Collection<GenuineVariableDescriptor<Solution_>> variableDescriptors = entityDescriptor.getGenuineVariableDescriptors();\n         List<MoveSelectorConfig> subMoveSelectorConfigList = new ArrayList<>(variableDescriptors.size());\n-        for (GenuineVariableDescriptor variableDescriptor : variableDescriptors) {\n+        for (GenuineVariableDescriptor<Solution_> variableDescriptor : variableDescriptors) {\n             subMoveSelectorConfigList\n                     .add(buildChangeMoveSelectorConfig(configPolicy, entitySelectorConfig.getId(), variableDescriptor));\n         }\n", "next_change": {"commit": "f757a4d10f733f27eabb06a780a1ea6ed90a9e51", "changed_code": [{"header": "diff --git a/optaplanner-core/src/main/java/org/optaplanner/core/impl/constructionheuristic/placer/PooledEntityPlacerFactory.java b/optaplanner-core/src/main/java/org/optaplanner/core/impl/constructionheuristic/placer/PooledEntityPlacerFactory.java\nindex f78d335c49..0073da27de 100644\n--- a/optaplanner-core/src/main/java/org/optaplanner/core/impl/constructionheuristic/placer/PooledEntityPlacerFactory.java\n+++ b/optaplanner-core/src/main/java/org/optaplanner/core/impl/constructionheuristic/placer/PooledEntityPlacerFactory.java\n", "chunk": "@@ -105,7 +104,7 @@ public class PooledEntityPlacerFactory<Solution_>\n         EntityDescriptor<Solution_> entityDescriptor = deduceEntityDescriptor(configPolicy.getSolutionDescriptor());\n         EntitySelectorConfig entitySelectorConfig = buildEntitySelectorConfig(configPolicy, entityDescriptor);\n \n-        Collection<GenuineVariableDescriptor<Solution_>> variableDescriptors = entityDescriptor.getGenuineVariableDescriptors();\n+        List<GenuineVariableDescriptor<Solution_>> variableDescriptors = entityDescriptor.getGenuineVariableDescriptorList();\n         List<MoveSelectorConfig> subMoveSelectorConfigList = new ArrayList<>(variableDescriptors.size());\n         for (GenuineVariableDescriptor<Solution_> variableDescriptor : variableDescriptors) {\n             subMoveSelectorConfigList\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzY5NzE1MQ==", "url": "https://github.com/kiegroup/optaplanner/pull/890#discussion_r473697151", "body": "Formatting.", "bodyText": "Formatting.", "bodyHTML": "<p dir=\"auto\">Formatting.</p>", "author": "triceo", "createdAt": "2020-08-20T07:33:14Z", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/constructionheuristic/placer/QueuedEntityPlacerFactory.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.core.impl.constructionheuristic.placer;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.optaplanner.core.config.constructionheuristic.placer.QueuedEntityPlacerConfig;\n+import org.optaplanner.core.config.heuristic.selector.common.SelectionCacheType;\n+import org.optaplanner.core.config.heuristic.selector.common.SelectionOrder;\n+import org.optaplanner.core.config.heuristic.selector.entity.EntitySelectorConfig;\n+import org.optaplanner.core.config.heuristic.selector.move.MoveSelectorConfig;\n+import org.optaplanner.core.config.heuristic.selector.move.composite.CartesianProductMoveSelectorConfig;\n+import org.optaplanner.core.config.util.ConfigUtils;\n+import org.optaplanner.core.impl.domain.entity.descriptor.EntityDescriptor;\n+import org.optaplanner.core.impl.domain.variable.descriptor.GenuineVariableDescriptor;\n+import org.optaplanner.core.impl.heuristic.HeuristicConfigPolicy;\n+import org.optaplanner.core.impl.heuristic.selector.entity.EntitySelector;\n+import org.optaplanner.core.impl.heuristic.selector.move.MoveSelector;\n+import org.optaplanner.core.impl.heuristic.selector.move.MoveSelectorFactory;\n+\n+public class QueuedEntityPlacerFactory extends AbstractEntityPlacerFactory<QueuedEntityPlacerConfig> {\n+\n+    public QueuedEntityPlacerFactory(QueuedEntityPlacerConfig placerConfig) {\n+        super(placerConfig);\n+    }\n+\n+    @Override\n+    public QueuedEntityPlacer buildEntityPlacer(HeuristicConfigPolicy configPolicy) {\n+        EntitySelectorConfig entitySelectorConfig_ = buildEntitySelectorConfig(configPolicy);\n+        EntitySelector entitySelector = entitySelectorConfig_.buildEntitySelector(configPolicy,\n+                SelectionCacheType.PHASE, SelectionOrder.ORIGINAL);\n+\n+        List<MoveSelectorConfig> moveSelectorConfigList_;\n+        if (ConfigUtils.isEmptyCollection(placerConfig.getMoveSelectorConfigList())) {\n+            EntityDescriptor entityDescriptor = entitySelector.getEntityDescriptor();\n+            Collection<GenuineVariableDescriptor> variableDescriptors = entityDescriptor.getGenuineVariableDescriptors();\n+            List<MoveSelectorConfig> subMoveSelectorConfigList = new ArrayList<>(\n+                    variableDescriptors.size());", "originalCommit": "09af9b5a21112181b2be7a291fa55eaaf378c58a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "09adc19460979bfa916215306e03b3eb68c5ece5", "changed_code": [{"header": "diff --git a/optaplanner-core/src/main/java/org/optaplanner/core/impl/constructionheuristic/placer/QueuedEntityPlacerFactory.java b/optaplanner-core/src/main/java/org/optaplanner/core/impl/constructionheuristic/placer/QueuedEntityPlacerFactory.java\nindex 7815572fee..9e327d93f1 100644\n--- a/optaplanner-core/src/main/java/org/optaplanner/core/impl/constructionheuristic/placer/QueuedEntityPlacerFactory.java\n+++ b/optaplanner-core/src/main/java/org/optaplanner/core/impl/constructionheuristic/placer/QueuedEntityPlacerFactory.java\n", "chunk": "@@ -51,11 +84,10 @@ public class QueuedEntityPlacerFactory extends AbstractEntityPlacerFactory<Queue\n         if (ConfigUtils.isEmptyCollection(placerConfig.getMoveSelectorConfigList())) {\n             EntityDescriptor entityDescriptor = entitySelector.getEntityDescriptor();\n             Collection<GenuineVariableDescriptor> variableDescriptors = entityDescriptor.getGenuineVariableDescriptors();\n-            List<MoveSelectorConfig> subMoveSelectorConfigList = new ArrayList<>(\n-                    variableDescriptors.size());\n+            List<MoveSelectorConfig> subMoveSelectorConfigList = new ArrayList<>(variableDescriptors.size());\n             for (GenuineVariableDescriptor variableDescriptor : variableDescriptors) {\n-                subMoveSelectorConfigList.add(buildChangeMoveSelectorConfig(\n-                        configPolicy, entitySelectorConfig_.getId(), variableDescriptor));\n+                subMoveSelectorConfigList\n+                        .add(buildChangeMoveSelectorConfig(configPolicy, entitySelectorConfig_.getId(), variableDescriptor));\n             }\n             MoveSelectorConfig subMoveSelectorConfig;\n             if (subMoveSelectorConfigList.size() > 1) {\n", "next_change": {"commit": "4ee2c29706d516daa2f9cbd5a58773148ceb7a64", "changed_code": [{"header": "diff --git a/optaplanner-core/src/main/java/org/optaplanner/core/impl/constructionheuristic/placer/QueuedEntityPlacerFactory.java b/optaplanner-core/src/main/java/org/optaplanner/core/impl/constructionheuristic/placer/QueuedEntityPlacerFactory.java\nindex 9e327d93f1..4de28e6c33 100644\n--- a/optaplanner-core/src/main/java/org/optaplanner/core/impl/constructionheuristic/placer/QueuedEntityPlacerFactory.java\n+++ b/optaplanner-core/src/main/java/org/optaplanner/core/impl/constructionheuristic/placer/QueuedEntityPlacerFactory.java\n", "chunk": "@@ -75,17 +78,18 @@ public class QueuedEntityPlacerFactory extends AbstractEntityPlacerFactory<Queue\n     }\n \n     @Override\n-    public QueuedEntityPlacer buildEntityPlacer(HeuristicConfigPolicy configPolicy) {\n+    public QueuedEntityPlacer<Solution_> buildEntityPlacer(HeuristicConfigPolicy<Solution_> configPolicy) {\n         EntitySelectorConfig entitySelectorConfig_ = buildEntitySelectorConfig(configPolicy);\n-        EntitySelector entitySelector = entitySelectorConfig_.buildEntitySelector(configPolicy,\n-                SelectionCacheType.PHASE, SelectionOrder.ORIGINAL);\n+        EntitySelector<Solution_> entitySelector = EntitySelectorFactory.<Solution_> create(entitySelectorConfig_)\n+                .buildEntitySelector(configPolicy, SelectionCacheType.PHASE, SelectionOrder.ORIGINAL);\n \n         List<MoveSelectorConfig> moveSelectorConfigList_;\n-        if (ConfigUtils.isEmptyCollection(placerConfig.getMoveSelectorConfigList())) {\n-            EntityDescriptor entityDescriptor = entitySelector.getEntityDescriptor();\n-            Collection<GenuineVariableDescriptor> variableDescriptors = entityDescriptor.getGenuineVariableDescriptors();\n+        if (ConfigUtils.isEmptyCollection(config.getMoveSelectorConfigList())) {\n+            EntityDescriptor<Solution_> entityDescriptor = entitySelector.getEntityDescriptor();\n+            Collection<GenuineVariableDescriptor<Solution_>> variableDescriptors =\n+                    entityDescriptor.getGenuineVariableDescriptors();\n             List<MoveSelectorConfig> subMoveSelectorConfigList = new ArrayList<>(variableDescriptors.size());\n-            for (GenuineVariableDescriptor variableDescriptor : variableDescriptors) {\n+            for (GenuineVariableDescriptor<Solution_> variableDescriptor : variableDescriptors) {\n                 subMoveSelectorConfigList\n                         .add(buildChangeMoveSelectorConfig(configPolicy, entitySelectorConfig_.getId(), variableDescriptor));\n             }\n", "next_change": {"commit": "f757a4d10f733f27eabb06a780a1ea6ed90a9e51", "changed_code": [{"header": "diff --git a/optaplanner-core/src/main/java/org/optaplanner/core/impl/constructionheuristic/placer/QueuedEntityPlacerFactory.java b/optaplanner-core/src/main/java/org/optaplanner/core/impl/constructionheuristic/placer/QueuedEntityPlacerFactory.java\nindex 4de28e6c33..f6e60031ce 100644\n--- a/optaplanner-core/src/main/java/org/optaplanner/core/impl/constructionheuristic/placer/QueuedEntityPlacerFactory.java\n+++ b/optaplanner-core/src/main/java/org/optaplanner/core/impl/constructionheuristic/placer/QueuedEntityPlacerFactory.java\n", "chunk": "@@ -86,10 +85,10 @@ public class QueuedEntityPlacerFactory<Solution_>\n         List<MoveSelectorConfig> moveSelectorConfigList_;\n         if (ConfigUtils.isEmptyCollection(config.getMoveSelectorConfigList())) {\n             EntityDescriptor<Solution_> entityDescriptor = entitySelector.getEntityDescriptor();\n-            Collection<GenuineVariableDescriptor<Solution_>> variableDescriptors =\n-                    entityDescriptor.getGenuineVariableDescriptors();\n-            List<MoveSelectorConfig> subMoveSelectorConfigList = new ArrayList<>(variableDescriptors.size());\n-            for (GenuineVariableDescriptor<Solution_> variableDescriptor : variableDescriptors) {\n+            List<GenuineVariableDescriptor<Solution_>> variableDescriptorList =\n+                    entityDescriptor.getGenuineVariableDescriptorList();\n+            List<MoveSelectorConfig> subMoveSelectorConfigList = new ArrayList<>(variableDescriptorList.size());\n+            for (GenuineVariableDescriptor<Solution_> variableDescriptor : variableDescriptorList) {\n                 subMoveSelectorConfigList\n                         .add(buildChangeMoveSelectorConfig(configPolicy, entitySelectorConfig_.getId(), variableDescriptor));\n             }\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzcwMDIzMA==", "url": "https://github.com/kiegroup/optaplanner/pull/890#discussion_r473700230", "body": "I'd change the logic here. Start with `isEmpty()`, then check for `size == 1`.\r\nThat way, you avoid calling `size()` twice, and also messing with boundary conditions (`>`).", "bodyText": "I'd change the logic here. Start with isEmpty(), then check for size == 1.\nThat way, you avoid calling size() twice, and also messing with boundary conditions (>).", "bodyHTML": "<p dir=\"auto\">I'd change the logic here. Start with <code>isEmpty()</code>, then check for <code>size == 1</code>.<br>\nThat way, you avoid calling <code>size()</code> twice, and also messing with boundary conditions (<code>&gt;</code>).</p>", "author": "triceo", "createdAt": "2020-08-20T07:35:32Z", "path": "optaplanner-core/src/main/java/org/optaplanner/core/impl/solver/termination/TerminationFactory.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.optaplanner.core.impl.solver.termination;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.stream.Collectors;\n+\n+import org.optaplanner.core.api.score.Score;\n+import org.optaplanner.core.config.solver.termination.TerminationCompositionStyle;\n+import org.optaplanner.core.config.solver.termination.TerminationConfig;\n+import org.optaplanner.core.config.util.ConfigUtils;\n+import org.optaplanner.core.impl.heuristic.HeuristicConfigPolicy;\n+import org.optaplanner.core.impl.score.definition.ScoreDefinition;\n+\n+public class TerminationFactory {\n+\n+    public static TerminationFactory create(TerminationConfig terminationConfig) {\n+        return new TerminationFactory(terminationConfig);\n+    }\n+\n+    private final TerminationConfig terminationConfig;\n+\n+    private TerminationFactory(TerminationConfig terminationConfig) {\n+        this.terminationConfig = terminationConfig;\n+    }\n+\n+    public Termination buildTermination(HeuristicConfigPolicy configPolicy, Termination chainedTermination) {\n+        Termination termination = buildTermination(configPolicy);\n+        if (termination == null) {\n+            return chainedTermination;\n+        }\n+        return new OrCompositeTermination(chainedTermination, termination);\n+    }\n+\n+    /**\n+     * @param configPolicy never null\n+     * @return sometimes null\n+     */\n+    public Termination buildTermination(HeuristicConfigPolicy configPolicy) {\n+        List<Termination> terminationList = new ArrayList<>();\n+        if (terminationConfig.getTerminationClass() != null) {\n+            Termination termination =\n+                    ConfigUtils.newInstance(terminationConfig, \"terminationClass\", terminationConfig.getTerminationClass());\n+            terminationList.add(termination);\n+        }\n+\n+        terminationList.addAll(buildTimeBasedTermination(configPolicy));\n+\n+        if (terminationConfig.getBestScoreLimit() != null) {\n+            ScoreDefinition scoreDefinition = configPolicy.getScoreDefinition();\n+            Score bestScoreLimit_ = scoreDefinition.parseScore(terminationConfig.getBestScoreLimit());\n+            double[] timeGradientWeightNumbers = new double[scoreDefinition.getLevelsSize() - 1];\n+            Arrays.fill(timeGradientWeightNumbers, 0.50); // Number pulled out of thin air\n+            terminationList.add(new BestScoreTermination(scoreDefinition, bestScoreLimit_, timeGradientWeightNumbers));\n+        }\n+        if (terminationConfig.getBestScoreFeasible() != null) {\n+            ScoreDefinition scoreDefinition = configPolicy.getScoreDefinition();\n+            if (!terminationConfig.getBestScoreFeasible()) {\n+                throw new IllegalArgumentException(\"The termination bestScoreFeasible (\"\n+                        + terminationConfig.getBestScoreFeasible() + \") cannot be false.\");\n+            }\n+            double[] timeGradientWeightFeasibleNumbers = new double[scoreDefinition.getFeasibleLevelsSize() - 1];\n+            Arrays.fill(timeGradientWeightFeasibleNumbers, 0.50); // Number pulled out of thin air\n+            terminationList.add(new BestScoreFeasibleTermination(scoreDefinition, timeGradientWeightFeasibleNumbers));\n+        }\n+        if (terminationConfig.getStepCountLimit() != null) {\n+            terminationList.add(new StepCountTermination(terminationConfig.getStepCountLimit()));\n+        }\n+        if (terminationConfig.getScoreCalculationCountLimit() != null) {\n+            terminationList.add(new ScoreCalculationCountTermination(terminationConfig.getScoreCalculationCountLimit()));\n+        }\n+        if (terminationConfig.getUnimprovedStepCountLimit() != null) {\n+            terminationList.add(new UnimprovedStepCountTermination(terminationConfig.getUnimprovedStepCountLimit()));\n+        }\n+\n+        terminationList.addAll(buildInnerTermination(configPolicy));\n+        return buildTerminationFromList(terminationList);\n+    }\n+\n+    protected List<Termination> buildTimeBasedTermination(HeuristicConfigPolicy configPolicy) {\n+        List<Termination> terminationList = new ArrayList<>();\n+        Long timeMillisSpentLimit = terminationConfig.calculateTimeMillisSpentLimit();\n+        if (timeMillisSpentLimit != null) {\n+            terminationList.add(new TimeMillisSpentTermination(timeMillisSpentLimit));\n+        }\n+        Long unimprovedTimeMillisSpentLimit = terminationConfig.calculateUnimprovedTimeMillisSpentLimit();\n+        if (unimprovedTimeMillisSpentLimit != null) {\n+            if (terminationConfig.getUnimprovedScoreDifferenceThreshold() == null) {\n+                terminationList.add(new UnimprovedTimeMillisSpentTermination(unimprovedTimeMillisSpentLimit));\n+            } else {\n+                ScoreDefinition scoreDefinition = configPolicy.getScoreDefinition();\n+                Score unimprovedScoreDifferenceThreshold_ =\n+                        scoreDefinition.parseScore(terminationConfig.getUnimprovedScoreDifferenceThreshold());\n+                if (unimprovedScoreDifferenceThreshold_.compareTo(scoreDefinition.getZeroScore()) <= 0) {\n+                    throw new IllegalStateException(\"The unimprovedScoreDifferenceThreshold (\"\n+                            + terminationConfig.getUnimprovedScoreDifferenceThreshold() + \") must be positive.\");\n+\n+                }\n+                terminationList.add(new UnimprovedTimeMillisSpentScoreDifferenceThresholdTermination(\n+                        unimprovedTimeMillisSpentLimit, unimprovedScoreDifferenceThreshold_));\n+            }\n+        } else if (terminationConfig.getUnimprovedScoreDifferenceThreshold() != null) {\n+            throw new IllegalStateException(\"The unimprovedScoreDifferenceThreshold (\"\n+                    + terminationConfig.getUnimprovedScoreDifferenceThreshold()\n+                    + \") can only be used if an unimproved*SpentLimit (\"\n+                    + unimprovedTimeMillisSpentLimit + \") is used too.\");\n+        }\n+\n+        return terminationList;\n+    }\n+\n+    protected List<Termination> buildInnerTermination(HeuristicConfigPolicy configPolicy) {\n+        if (ConfigUtils.isEmptyCollection(terminationConfig.getTerminationConfigList())) {\n+            return Collections.emptyList();\n+        }\n+\n+        return terminationConfig.getTerminationConfigList().stream()\n+                .map(config -> TerminationFactory.create(config).buildTermination(configPolicy))\n+                .filter(Objects::nonNull)\n+                .collect(Collectors.toList());\n+    }\n+\n+    protected Termination buildTerminationFromList(List<Termination> terminationList) {\n+        if (terminationList.size() == 1) {", "originalCommit": "09af9b5a21112181b2be7a291fa55eaaf378c58a", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "09adc19460979bfa916215306e03b3eb68c5ece5", "changed_code": [{"header": "diff --git a/optaplanner-core/src/main/java/org/optaplanner/core/impl/solver/termination/TerminationFactory.java b/optaplanner-core/src/main/java/org/optaplanner/core/impl/solver/termination/TerminationFactory.java\nindex 962431f233..59eeab1bdb 100644\n--- a/optaplanner-core/src/main/java/org/optaplanner/core/impl/solver/termination/TerminationFactory.java\n+++ b/optaplanner-core/src/main/java/org/optaplanner/core/impl/solver/termination/TerminationFactory.java\n", "chunk": "@@ -139,9 +139,11 @@ public class TerminationFactory {\n     }\n \n     protected Termination buildTerminationFromList(List<Termination> terminationList) {\n-        if (terminationList.size() == 1) {\n+        if (terminationList.isEmpty()) {\n+            return null;\n+        } else if (terminationList.size() == 1) {\n             return terminationList.get(0);\n-        } else if (terminationList.size() > 1) {\n+        } else {\n             AbstractCompositeTermination compositeTermination;\n             if (terminationConfig.getTerminationCompositionStyle() == null\n                     || terminationConfig.getTerminationCompositionStyle() == TerminationCompositionStyle.OR) {\n", "next_change": {"commit": "4ee2c29706d516daa2f9cbd5a58773148ceb7a64", "changed_code": [{"header": "diff --git a/optaplanner-core/src/main/java/org/optaplanner/core/impl/solver/termination/TerminationFactory.java b/optaplanner-core/src/main/java/org/optaplanner/core/impl/solver/termination/TerminationFactory.java\nindex 59eeab1bdb..19b7ee95a7 100644\n--- a/optaplanner-core/src/main/java/org/optaplanner/core/impl/solver/termination/TerminationFactory.java\n+++ b/optaplanner-core/src/main/java/org/optaplanner/core/impl/solver/termination/TerminationFactory.java\n", "chunk": "@@ -127,29 +130,30 @@ public class TerminationFactory {\n         return terminationList;\n     }\n \n-    protected List<Termination> buildInnerTermination(HeuristicConfigPolicy configPolicy) {\n+    protected List<Termination<Solution_>> buildInnerTermination(HeuristicConfigPolicy<Solution_> configPolicy) {\n         if (ConfigUtils.isEmptyCollection(terminationConfig.getTerminationConfigList())) {\n             return Collections.emptyList();\n         }\n \n         return terminationConfig.getTerminationConfigList().stream()\n-                .map(config -> TerminationFactory.create(config).buildTermination(configPolicy))\n+                .map(config -> TerminationFactory.<Solution_> create(config)\n+                        .buildTermination(configPolicy))\n                 .filter(Objects::nonNull)\n                 .collect(Collectors.toList());\n     }\n \n-    protected Termination buildTerminationFromList(List<Termination> terminationList) {\n+    protected Termination<Solution_> buildTerminationFromList(List<Termination<Solution_>> terminationList) {\n         if (terminationList.isEmpty()) {\n             return null;\n         } else if (terminationList.size() == 1) {\n             return terminationList.get(0);\n         } else {\n-            AbstractCompositeTermination compositeTermination;\n+            AbstractCompositeTermination<Solution_> compositeTermination;\n             if (terminationConfig.getTerminationCompositionStyle() == null\n                     || terminationConfig.getTerminationCompositionStyle() == TerminationCompositionStyle.OR) {\n-                compositeTermination = new OrCompositeTermination(terminationList);\n+                compositeTermination = new OrCompositeTermination<>(terminationList);\n             } else if (terminationConfig.getTerminationCompositionStyle() == TerminationCompositionStyle.AND) {\n-                compositeTermination = new AndCompositeTermination(terminationList);\n+                compositeTermination = new AndCompositeTermination<>(terminationList);\n             } else {\n                 throw new IllegalStateException(\"The terminationCompositionStyle (\"\n                         + terminationConfig.getTerminationCompositionStyle() + \") is not implemented.\");\n", "next_change": null}]}}]}}, {"oid": "003df931c33e6755928f0eb84a0cd8410432d932", "url": "https://github.com/kiegroup/optaplanner/commit/003df931c33e6755928f0eb84a0cd8410432d932", "message": "Address review comments", "committedDate": "2020-08-20T10:32:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzkxMDI5MQ==", "url": "https://github.com/kiegroup/optaplanner/pull/890#discussion_r473910291", "body": "The fact that the unfold methods create a new PlacerFactory,\r\nas well as do a lot of defaulting (configuration by exception),\r\nmakes me think we might want to move them to the Factory side too, alongside the build methods?", "bodyText": "The fact that the unfold methods create a new PlacerFactory,\nas well as do a lot of defaulting (configuration by exception),\nmakes me think we might want to move them to the Factory side too, alongside the build methods?", "bodyHTML": "<p dir=\"auto\">The fact that the unfold methods create a new PlacerFactory,<br>\nas well as do a lot of defaulting (configuration by exception),<br>\nmakes me think we might want to move them to the Factory side too, alongside the build methods?</p>", "author": "ge0ffrey", "createdAt": "2020-08-20T11:48:34Z", "path": "optaplanner-core/src/main/java/org/optaplanner/core/config/constructionheuristic/placer/QueuedEntityPlacerConfig.java", "diffHunk": "@@ -40,22 +36,16 @@\n import org.optaplanner.core.config.heuristic.selector.move.generic.chained.SubChainChangeMoveSelectorConfig;\n import org.optaplanner.core.config.heuristic.selector.move.generic.chained.SubChainSwapMoveSelectorConfig;\n import org.optaplanner.core.config.heuristic.selector.move.generic.chained.TailChainSwapMoveSelectorConfig;\n-import org.optaplanner.core.config.heuristic.selector.value.ValueSelectorConfig;\n import org.optaplanner.core.config.util.ConfigUtils;\n-import org.optaplanner.core.impl.constructionheuristic.placer.QueuedEntityPlacer;\n-import org.optaplanner.core.impl.domain.entity.descriptor.EntityDescriptor;\n-import org.optaplanner.core.impl.domain.variable.descriptor.GenuineVariableDescriptor;\n+import org.optaplanner.core.impl.constructionheuristic.placer.QueuedEntityPlacerFactory;\n import org.optaplanner.core.impl.heuristic.HeuristicConfigPolicy;\n-import org.optaplanner.core.impl.heuristic.selector.entity.EntitySelector;\n-import org.optaplanner.core.impl.heuristic.selector.move.MoveSelector;\n-import org.optaplanner.core.impl.heuristic.selector.move.MoveSelectorFactory;\n \n public class QueuedEntityPlacerConfig extends EntityPlacerConfig<QueuedEntityPlacerConfig> {\n \n     public static QueuedEntityPlacerConfig unfoldNew(HeuristicConfigPolicy configPolicy,\n             List<MoveSelectorConfig> templateMoveSelectorConfigList) {\n         QueuedEntityPlacerConfig config = new QueuedEntityPlacerConfig();\n-        config.entitySelectorConfig = config.buildEntitySelectorConfig(configPolicy);\n+        config.entitySelectorConfig = new QueuedEntityPlacerFactory(config).buildEntitySelectorConfig(configPolicy);", "originalCommit": "003df931c33e6755928f0eb84a0cd8410432d932", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzkxMTgzNA==", "url": "https://github.com/kiegroup/optaplanner/pull/890#discussion_r473911834", "bodyText": "The \"configuration by exception\" in one place argument is really the big reason I'd like to see them in the same class as the build methods.\nDue to conf by exception, most properties are automatically assigned a default value (sometimes calculated to a default value). For example, a move selector doesn't have to explicity state its cacheType in the XML (it can, but it doesn't have too).\nOften, we need to answer \"what does that property default too again?\" That used to have 1 answer: in the Config class. Now, if the unfold methods are in the Config class, it depends. I'd rather see all that information in 1 location, the new Factory class.", "author": "ge0ffrey", "createdAt": "2020-08-20T11:51:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzkxMDI5MQ=="}], "type": "inlineReview", "revised_code": {"commit": "09adc19460979bfa916215306e03b3eb68c5ece5", "changed_code": [{"header": "diff --git a/optaplanner-core/src/main/java/org/optaplanner/core/config/constructionheuristic/placer/QueuedEntityPlacerConfig.java b/optaplanner-core/src/main/java/org/optaplanner/core/config/constructionheuristic/placer/QueuedEntityPlacerConfig.java\nindex f77804d094..d643c07f81 100644\n--- a/optaplanner-core/src/main/java/org/optaplanner/core/config/constructionheuristic/placer/QueuedEntityPlacerConfig.java\n+++ b/optaplanner-core/src/main/java/org/optaplanner/core/config/constructionheuristic/placer/QueuedEntityPlacerConfig.java\n", "chunk": "@@ -37,43 +36,9 @@ import org.optaplanner.core.config.heuristic.selector.move.generic.chained.SubCh\n import org.optaplanner.core.config.heuristic.selector.move.generic.chained.SubChainSwapMoveSelectorConfig;\n import org.optaplanner.core.config.heuristic.selector.move.generic.chained.TailChainSwapMoveSelectorConfig;\n import org.optaplanner.core.config.util.ConfigUtils;\n-import org.optaplanner.core.impl.constructionheuristic.placer.QueuedEntityPlacerFactory;\n-import org.optaplanner.core.impl.heuristic.HeuristicConfigPolicy;\n \n public class QueuedEntityPlacerConfig extends EntityPlacerConfig<QueuedEntityPlacerConfig> {\n \n-    public static QueuedEntityPlacerConfig unfoldNew(HeuristicConfigPolicy configPolicy,\n-            List<MoveSelectorConfig> templateMoveSelectorConfigList) {\n-        QueuedEntityPlacerConfig config = new QueuedEntityPlacerConfig();\n-        config.entitySelectorConfig = new QueuedEntityPlacerFactory(config).buildEntitySelectorConfig(configPolicy);\n-        config.moveSelectorConfigList = new ArrayList<>(templateMoveSelectorConfigList.size());\n-        List<MoveSelectorConfig> leafMoveSelectorConfigList = new ArrayList<>(templateMoveSelectorConfigList.size());\n-        for (MoveSelectorConfig templateMoveSelectorConfig : templateMoveSelectorConfigList) {\n-            MoveSelectorConfig moveSelectorConfig = (MoveSelectorConfig) templateMoveSelectorConfig.copyConfig();\n-            moveSelectorConfig.extractLeafMoveSelectorConfigsIntoList(leafMoveSelectorConfigList);\n-            config.moveSelectorConfigList.add(moveSelectorConfig);\n-        }\n-        for (MoveSelectorConfig leafMoveSelectorConfig : leafMoveSelectorConfigList) {\n-            if (!(leafMoveSelectorConfig instanceof ChangeMoveSelectorConfig)) {\n-                throw new IllegalStateException(\"The <constructionHeuristic> contains a moveSelector (\"\n-                        + leafMoveSelectorConfig + \") that isn't a <changeMoveSelector>, a <unionMoveSelector>\"\n-                        + \" or a <cartesianProductMoveSelector>.\\n\"\n-                        + \"Maybe you're using a moveSelector in <constructionHeuristic>\"\n-                        + \" that's only supported for <localSearch>.\");\n-            }\n-            ChangeMoveSelectorConfig changeMoveSelectorConfig = (ChangeMoveSelectorConfig) leafMoveSelectorConfig;\n-            if (changeMoveSelectorConfig.getEntitySelectorConfig() != null) {\n-                throw new IllegalStateException(\"The <constructionHeuristic> contains a changeMoveSelector (\"\n-                        + changeMoveSelectorConfig + \") that contains an entitySelector (\"\n-                        + changeMoveSelectorConfig.getEntitySelectorConfig()\n-                        + \") without explicitly configuring the <queuedEntityPlacer>.\");\n-            }\n-            changeMoveSelectorConfig.setEntitySelectorConfig(\n-                    EntitySelectorConfig.newMimicSelectorConfig(config.entitySelectorConfig.getId()));\n-        }\n-        return config;\n-    }\n-\n     @XmlElement(name = \"entitySelector\")\n     protected EntitySelectorConfig entitySelectorConfig = null;\n \n", "next_change": {"commit": "1edad31ce23814983604b6b3446ea10c7da4779d", "changed_code": [{"header": "diff --git a/optaplanner-core/src/main/java/org/optaplanner/core/config/constructionheuristic/placer/QueuedEntityPlacerConfig.java b/optaplanner-core/src/main/java/org/optaplanner/core/config/constructionheuristic/placer/QueuedEntityPlacerConfig.java\nindex d643c07f81..93a2519574 100644\n--- a/optaplanner-core/src/main/java/org/optaplanner/core/config/constructionheuristic/placer/QueuedEntityPlacerConfig.java\n+++ b/optaplanner-core/src/main/java/org/optaplanner/core/config/constructionheuristic/placer/QueuedEntityPlacerConfig.java\n", "chunk": "@@ -37,6 +38,10 @@ import org.optaplanner.core.config.heuristic.selector.move.generic.chained.SubCh\n import org.optaplanner.core.config.heuristic.selector.move.generic.chained.TailChainSwapMoveSelectorConfig;\n import org.optaplanner.core.config.util.ConfigUtils;\n \n+@XmlType(propOrder = {\n+        \"entitySelectorConfig\",\n+        \"moveSelectorConfigList\"\n+})\n public class QueuedEntityPlacerConfig extends EntityPlacerConfig<QueuedEntityPlacerConfig> {\n \n     @XmlElement(name = \"entitySelector\")\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzkxMjk0Nw==", "url": "https://github.com/kiegroup/optaplanner/pull/890#discussion_r473912947", "body": "I presume this is just GitHub getting confused?", "bodyText": "I presume this is just GitHub getting confused?", "bodyHTML": "<p dir=\"auto\">I presume this is just GitHub getting confused?</p>", "author": "ge0ffrey", "createdAt": "2020-08-20T11:53:40Z", "path": "optaplanner-core/src/test/java/org/optaplanner/core/config/constructionheuristic/placer/PooledEntityPlacerConfigTest.java", "diffHunk": "@@ -16,46 +16,46 @@\n \n package org.optaplanner.core.config.constructionheuristic.placer;\n \n+import static org.assertj.core.api.Assertions.assertThat;\n import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.when;\n \n-import java.util.Arrays;\n-\n import org.junit.jupiter.api.Test;\n import org.optaplanner.core.config.heuristic.selector.move.generic.ChangeMoveSelectorConfig;\n import org.optaplanner.core.config.heuristic.selector.value.ValueSelectorConfig;\n import org.optaplanner.core.config.solver.EnvironmentMode;\n-import org.optaplanner.core.impl.constructionheuristic.placer.QueuedEntityPlacer;\n import org.optaplanner.core.impl.domain.solution.descriptor.SolutionDescriptor;\n import org.optaplanner.core.impl.heuristic.HeuristicConfigPolicy;\n-import org.optaplanner.core.impl.score.buildin.simple.SimpleScoreDefinition;\n import org.optaplanner.core.impl.score.director.InnerScoreDirectorFactory;\n-import org.optaplanner.core.impl.testdata.domain.multivar.TestdataMultiVarSolution;\n+import org.optaplanner.core.impl.testdata.domain.TestdataEntity;\n+import org.optaplanner.core.impl.testdata.domain.TestdataSolution;\n \n-public class QueuedEntityPlacerConfigTest {\n+public class PooledEntityPlacerConfigTest {", "originalCommit": "003df931c33e6755928f0eb84a0cd8410432d932", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzkyNDIzNw==", "url": "https://github.com/kiegroup/optaplanner/pull/890#discussion_r473924237", "bodyText": "Short answer: yes; long answer:\nduring this refactoring, I look in the coverage reports and try to cover the biggest gaps. Often, the gaps are in the build methods, thus the QueuedEntityPlacerConfigTest moved to QueuedEntityPlacerFactoryTest. On the other hand, the PooledEntityPlacerConfig had a coverage gap in its unfoldNew(), which lead to introducing a new test class.", "author": "rsynek", "createdAt": "2020-08-20T12:14:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzkxMjk0Nw=="}], "type": "inlineReview", "revised_code": null}, {"oid": "6ee35a41eb3d40d858f238745f899ce77506b000", "url": "https://github.com/kiegroup/optaplanner/commit/6ee35a41eb3d40d858f238745f899ce77506b000", "message": "Move unfoldNew into factories", "committedDate": "2020-08-20T12:52:47Z", "type": "commit"}]}