{"pr_number": 4012, "pr_title": "Liveness and readiness probes", "pr_author": "pgressa", "pr_createdAt": "2020-09-03T06:14:12Z", "pr_url": "https://github.com/micronaut-projects/micronaut-core/pull/4012", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjcyODE2Mw==", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4012#discussion_r482728163", "body": "I don't like this line but I expect that Array.asList will be somehow optimised by JIT", "bodyText": "I don't like this line but I expect that Array.asList will be somehow optimised by JIT", "bodyHTML": "<p dir=\"auto\">I don't like this line but I expect that Array.asList will be somehow optimised by JIT</p>", "author": "pgressa", "createdAt": "2020-09-03T06:16:54Z", "path": "management/src/main/java/io/micronaut/management/endpoint/health/HealthEndpoint.java", "diffHunk": "@@ -79,8 +90,39 @@ public HealthEndpoint(HealthAggregator<HealthResult> healthAggregator,\n     @Read\n     public Single<HealthResult> getHealth(@Nullable Principal principal) {\n         HealthLevelOfDetail detail = levelOfDetail(principal);\n+        // due to backward comaptibility all HealthIndicators that are not qualified with Readiness\n+        // e.g. are Liveness or without qualifier are returned by this resource\n         return Single.fromPublisher(\n-                healthAggregator.aggregate(healthIndicators, detail)\n+                healthAggregator.aggregate(\n+                        Arrays.stream(healthIndicators).\n+                                filter(healthIndicator ->\n+                                        !Arrays.asList(readinessHealthIndicators).contains(healthIndicator))", "originalCommit": "457466dc5c7822355fb0eb5e3dc6308942ac0302", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjgwNjE3Ng==", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4012#discussion_r482806176", "bodyText": "You should probably at least assign the list to a local variable outside the scope. I would also move the filter to the constructor of the class as there is no need to do this calculation for each request", "author": "graemerocher", "createdAt": "2020-09-03T08:36:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjcyODE2Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg3NTEwMQ==", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4012#discussion_r482875101", "bodyText": "yeah, that's right", "author": "pgressa", "createdAt": "2020-09-03T10:28:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjcyODE2Mw=="}], "type": "inlineReview", "revised_code": {"commit": "d7dd8901ac6526d08938f8e064fe3cb0b794e43e", "changed_code": [{"header": "diff --git a/management/src/main/java/io/micronaut/management/endpoint/health/HealthEndpoint.java b/management/src/main/java/io/micronaut/management/endpoint/health/HealthEndpoint.java\nindex b1312d1197..8f90aa91cb 100644\n--- a/management/src/main/java/io/micronaut/management/endpoint/health/HealthEndpoint.java\n+++ b/management/src/main/java/io/micronaut/management/endpoint/health/HealthEndpoint.java\n", "chunk": "@@ -72,53 +72,60 @@ public class HealthEndpoint {\n     /**\n      * @param healthAggregator            The {@link HealthAggregator}\n      * @param healthIndicators            The {@link HealthIndicator}\n+     * @param livenessHealthIndicators    The {@link HealthIndicator} qualified by {@link Liveness}\n      */\n     public HealthEndpoint(HealthAggregator<HealthResult> healthAggregator,\n                           HealthIndicator[] healthIndicators,\n-                          @Liveness HealthIndicator[] livenessHealthIndicators,\n-                          @Readiness HealthIndicator[] readinessHealthIndicators) {\n+                          @Liveness HealthIndicator[] livenessHealthIndicators) {\n         this.healthAggregator = healthAggregator;\n         this.healthIndicators = healthIndicators;\n         this.livenessHealthIndicators = livenessHealthIndicators;\n-        this.readinessHealthIndicators = readinessHealthIndicators;\n+        this.readinessHealthIndicators = getReadinessHealthIndicators(healthIndicators, livenessHealthIndicators);\n+    }\n+\n+    protected final HealthIndicator[] getReadinessHealthIndicators(HealthIndicator[] allHealthIndicators,\n+                                                                   HealthIndicator[] livenessHealthIndicators) {\n+        List<HealthIndicator> liveness = Arrays.asList(livenessHealthIndicators);\n+        return Arrays.stream(allHealthIndicators).\n+                filter(healthIndicator -> !liveness.contains(healthIndicator)).\n+                toArray(HealthIndicator[]::new);\n     }\n \n     /**\n+     * Return all health indicators.\n+     *\n      * @param principal Authenticated user\n      * @return The health information as a {@link Single}\n      */\n     @Read\n     public Single<HealthResult> getHealth(@Nullable Principal principal) {\n         HealthLevelOfDetail detail = levelOfDetail(principal);\n-        // due to backward comaptibility all HealthIndicators that are not qualified with Readiness\n-        // e.g. are Liveness or without qualifier are returned by this resource\n+\n         return Single.fromPublisher(\n-                healthAggregator.aggregate(\n-                        Arrays.stream(healthIndicators).\n-                                filter(healthIndicator ->\n-                                        !Arrays.asList(readinessHealthIndicators).contains(healthIndicator))\n-                                .toArray(HealthIndicator[]::new),\n-                        detail)\n+                healthAggregator.aggregate(healthIndicators, detail)\n         );\n     }\n \n     /**\n+     * Return health indicators based on the selector.\n+     *\n      * @param principal Authenticated user\n      * @param selector HealthEndpointSelector\n      * @return The health information as a {@link Single}\n      */\n     @Read\n-    public Single<HealthResult> getHealth(@Nullable Principal principal, @Selector HealthEndpointSelector selector) {\n+    public Single<HealthResult> getHealth(@Nullable Principal principal, @Selector HealthCheckType selector) {\n         HealthLevelOfDetail detail = levelOfDetail(principal);\n-        HealthIndicator[] indicators = null;\n+        HealthIndicator[] indicators;\n \n         switch (selector) {\n-            case READINESS:\n-                indicators = readinessHealthIndicators;\n-                break;\n             case LIVENESS:\n                 indicators = livenessHealthIndicators;\n                 break;\n+            case READINESS:\n+            default:\n+                indicators = readinessHealthIndicators;\n+                break;\n         }\n \n         return Single.fromPublisher(\n", "next_change": {"commit": "2accd64650832fd7bba88c9458c23946fc7ae0df", "changed_code": [{"header": "diff --git a/management/src/main/java/io/micronaut/management/endpoint/health/HealthEndpoint.java b/management/src/main/java/io/micronaut/management/endpoint/health/HealthEndpoint.java\nindex 8f90aa91cb..4850bf3d05 100644\n--- a/management/src/main/java/io/micronaut/management/endpoint/health/HealthEndpoint.java\n+++ b/management/src/main/java/io/micronaut/management/endpoint/health/HealthEndpoint.java\n", "chunk": "@@ -128,7 +128,7 @@ public class HealthEndpoint {\n                 break;\n         }\n \n-        return Single.fromPublisher(\n+        return Mono.from(\n                 healthAggregator.aggregate(indicators, detail)\n         );\n     }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjcyODI4Ng==", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4012#discussion_r482728286", "body": "Not sure whether using enum in selector isn't too much defensive", "bodyText": "Not sure whether using enum in selector isn't too much defensive", "bodyHTML": "<p dir=\"auto\">Not sure whether using enum in selector isn't too much defensive</p>", "author": "pgressa", "createdAt": "2020-09-03T06:17:18Z", "path": "management/src/main/java/io/micronaut/management/endpoint/health/HealthEndpoint.java", "diffHunk": "@@ -79,8 +90,39 @@ public HealthEndpoint(HealthAggregator<HealthResult> healthAggregator,\n     @Read\n     public Single<HealthResult> getHealth(@Nullable Principal principal) {\n         HealthLevelOfDetail detail = levelOfDetail(principal);\n+        // due to backward comaptibility all HealthIndicators that are not qualified with Readiness\n+        // e.g. are Liveness or without qualifier are returned by this resource\n         return Single.fromPublisher(\n-                healthAggregator.aggregate(healthIndicators, detail)\n+                healthAggregator.aggregate(\n+                        Arrays.stream(healthIndicators).\n+                                filter(healthIndicator ->\n+                                        !Arrays.asList(readinessHealthIndicators).contains(healthIndicator))\n+                                .toArray(HealthIndicator[]::new),\n+                        detail)\n+        );\n+    }\n+\n+    /**\n+     * @param principal Authenticated user\n+     * @param selector HealthEndpointSelector\n+     * @return The health information as a {@link Single}\n+     */\n+    @Read\n+    public Single<HealthResult> getHealth(@Nullable Principal principal, @Selector HealthEndpointSelector selector) {", "originalCommit": "457466dc5c7822355fb0eb5e3dc6308942ac0302", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc0MTc3Ng==", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4012#discussion_r482741776", "bodyText": "I think an enum is fine.", "author": "graemerocher", "createdAt": "2020-09-03T06:47:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjcyODI4Ng=="}], "type": "inlineReview", "revised_code": {"commit": "d7dd8901ac6526d08938f8e064fe3cb0b794e43e", "changed_code": [{"header": "diff --git a/management/src/main/java/io/micronaut/management/endpoint/health/HealthEndpoint.java b/management/src/main/java/io/micronaut/management/endpoint/health/HealthEndpoint.java\nindex b1312d1197..8f90aa91cb 100644\n--- a/management/src/main/java/io/micronaut/management/endpoint/health/HealthEndpoint.java\n+++ b/management/src/main/java/io/micronaut/management/endpoint/health/HealthEndpoint.java\n", "chunk": "@@ -72,53 +72,60 @@ public class HealthEndpoint {\n     /**\n      * @param healthAggregator            The {@link HealthAggregator}\n      * @param healthIndicators            The {@link HealthIndicator}\n+     * @param livenessHealthIndicators    The {@link HealthIndicator} qualified by {@link Liveness}\n      */\n     public HealthEndpoint(HealthAggregator<HealthResult> healthAggregator,\n                           HealthIndicator[] healthIndicators,\n-                          @Liveness HealthIndicator[] livenessHealthIndicators,\n-                          @Readiness HealthIndicator[] readinessHealthIndicators) {\n+                          @Liveness HealthIndicator[] livenessHealthIndicators) {\n         this.healthAggregator = healthAggregator;\n         this.healthIndicators = healthIndicators;\n         this.livenessHealthIndicators = livenessHealthIndicators;\n-        this.readinessHealthIndicators = readinessHealthIndicators;\n+        this.readinessHealthIndicators = getReadinessHealthIndicators(healthIndicators, livenessHealthIndicators);\n+    }\n+\n+    protected final HealthIndicator[] getReadinessHealthIndicators(HealthIndicator[] allHealthIndicators,\n+                                                                   HealthIndicator[] livenessHealthIndicators) {\n+        List<HealthIndicator> liveness = Arrays.asList(livenessHealthIndicators);\n+        return Arrays.stream(allHealthIndicators).\n+                filter(healthIndicator -> !liveness.contains(healthIndicator)).\n+                toArray(HealthIndicator[]::new);\n     }\n \n     /**\n+     * Return all health indicators.\n+     *\n      * @param principal Authenticated user\n      * @return The health information as a {@link Single}\n      */\n     @Read\n     public Single<HealthResult> getHealth(@Nullable Principal principal) {\n         HealthLevelOfDetail detail = levelOfDetail(principal);\n-        // due to backward comaptibility all HealthIndicators that are not qualified with Readiness\n-        // e.g. are Liveness or without qualifier are returned by this resource\n+\n         return Single.fromPublisher(\n-                healthAggregator.aggregate(\n-                        Arrays.stream(healthIndicators).\n-                                filter(healthIndicator ->\n-                                        !Arrays.asList(readinessHealthIndicators).contains(healthIndicator))\n-                                .toArray(HealthIndicator[]::new),\n-                        detail)\n+                healthAggregator.aggregate(healthIndicators, detail)\n         );\n     }\n \n     /**\n+     * Return health indicators based on the selector.\n+     *\n      * @param principal Authenticated user\n      * @param selector HealthEndpointSelector\n      * @return The health information as a {@link Single}\n      */\n     @Read\n-    public Single<HealthResult> getHealth(@Nullable Principal principal, @Selector HealthEndpointSelector selector) {\n+    public Single<HealthResult> getHealth(@Nullable Principal principal, @Selector HealthCheckType selector) {\n         HealthLevelOfDetail detail = levelOfDetail(principal);\n-        HealthIndicator[] indicators = null;\n+        HealthIndicator[] indicators;\n \n         switch (selector) {\n-            case READINESS:\n-                indicators = readinessHealthIndicators;\n-                break;\n             case LIVENESS:\n                 indicators = livenessHealthIndicators;\n                 break;\n+            case READINESS:\n+            default:\n+                indicators = readinessHealthIndicators;\n+                break;\n         }\n \n         return Single.fromPublisher(\n", "next_change": {"commit": "2accd64650832fd7bba88c9458c23946fc7ae0df", "changed_code": [{"header": "diff --git a/management/src/main/java/io/micronaut/management/endpoint/health/HealthEndpoint.java b/management/src/main/java/io/micronaut/management/endpoint/health/HealthEndpoint.java\nindex 8f90aa91cb..4850bf3d05 100644\n--- a/management/src/main/java/io/micronaut/management/endpoint/health/HealthEndpoint.java\n+++ b/management/src/main/java/io/micronaut/management/endpoint/health/HealthEndpoint.java\n", "chunk": "@@ -128,7 +128,7 @@ public class HealthEndpoint {\n                 break;\n         }\n \n-        return Single.fromPublisher(\n+        return Mono.from(\n                 healthAggregator.aggregate(indicators, detail)\n         );\n     }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjcyODQ2Mw==", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4012#discussion_r482728463", "body": "`Liveness` or `LivenessHealthIndicator`?", "bodyText": "Liveness or LivenessHealthIndicator?", "bodyHTML": "<p dir=\"auto\"><code>Liveness</code> or <code>LivenessHealthIndicator</code>?</p>", "author": "pgressa", "createdAt": "2020-09-03T06:17:47Z", "path": "management/src/main/java/io/micronaut/management/health/indicator/Liveness.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package io.micronaut.management.health.indicator;\n+\n+import javax.inject.Qualifier;\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.Retention;\n+\n+import static java.lang.annotation.RetentionPolicy.RUNTIME;\n+\n+/**\n+ * @author Pavol Gressa\n+ * @since 2.1\n+ */\n+@Qualifier\n+@Documented\n+@Retention(RUNTIME)\n+public @interface Liveness{", "originalCommit": "457466dc5c7822355fb0eb5e3dc6308942ac0302", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc0MjU3Mg==", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4012#discussion_r482742572", "bodyText": "Liveness works", "author": "graemerocher", "createdAt": "2020-09-03T06:49:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjcyODQ2Mw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc0MjMxNw==", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4012#discussion_r482742317", "body": "I would move this to the package `io.micronaut.management.health.indicator` and rename to `HealthCheckType`", "bodyText": "I would move this to the package io.micronaut.management.health.indicator and rename to HealthCheckType", "bodyHTML": "<p dir=\"auto\">I would move this to the package <code>io.micronaut.management.health.indicator</code> and rename to <code>HealthCheckType</code></p>", "author": "graemerocher", "createdAt": "2020-09-03T06:49:14Z", "path": "management/src/main/java/io/micronaut/management/endpoint/health/HealthEndpointSelector.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package io.micronaut.management.endpoint.health;\n+\n+/**\n+ * Options for {@link io.micronaut.management.endpoint.health.HealthEndpoint} selector that aggregates\n+ * {@link io.micronaut.management.health.indicator.HealthIndicator} according to {@link io.micronaut.management.health.indicator.Liveness}\n+ * respectively {@link io.micronaut.management.health.indicator.Readiness} qualifiers.\n+ *\n+ * @author Pavol Gressa\n+ * @since 2.1\n+ */\n+public enum HealthEndpointSelector {", "originalCommit": "457466dc5c7822355fb0eb5e3dc6308942ac0302", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjkxNzM0Nw==", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4012#discussion_r482917347", "bodyText": "OK", "author": "pgressa", "createdAt": "2020-09-03T11:49:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc0MjMxNw=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc0MjQ0NQ==", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4012#discussion_r482742445", "body": "Add license (can be done with `./gradlew spotlessApply`", "bodyText": "Add license (can be done with ./gradlew spotlessApply", "bodyHTML": "<p dir=\"auto\">Add license (can be done with <code>./gradlew spotlessApply</code></p>", "author": "graemerocher", "createdAt": "2020-09-03T06:49:32Z", "path": "management/src/main/java/io/micronaut/management/endpoint/health/HealthEndpointSelector.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package io.micronaut.management.endpoint.health;", "originalCommit": "457466dc5c7822355fb0eb5e3dc6308942ac0302", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjkxNzI0Nw==", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4012#discussion_r482917247", "bodyText": "thanks for hint, will remember that, completely forgot for licences", "author": "pgressa", "createdAt": "2020-09-03T11:48:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc0MjQ0NQ=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc0MjYxNA==", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4012#discussion_r482742614", "body": "add license", "bodyText": "add license", "bodyHTML": "<p dir=\"auto\">add license</p>", "author": "graemerocher", "createdAt": "2020-09-03T06:49:55Z", "path": "management/src/main/java/io/micronaut/management/health/indicator/Liveness.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package io.micronaut.management.health.indicator;", "originalCommit": "457466dc5c7822355fb0eb5e3dc6308942ac0302", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc0MjY5Nw==", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4012#discussion_r482742697", "body": "add javadoc description", "bodyText": "add javadoc description", "bodyHTML": "<p dir=\"auto\">add javadoc description</p>", "author": "graemerocher", "createdAt": "2020-09-03T06:50:03Z", "path": "management/src/main/java/io/micronaut/management/health/indicator/Liveness.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package io.micronaut.management.health.indicator;\n+\n+import javax.inject.Qualifier;\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.Retention;\n+\n+import static java.lang.annotation.RetentionPolicy.RUNTIME;\n+\n+/**\n+ * @author Pavol Gressa", "originalCommit": "457466dc5c7822355fb0eb5e3dc6308942ac0302", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc0Mjc5Mw==", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4012#discussion_r482742793", "body": "add license", "bodyText": "add license", "bodyHTML": "<p dir=\"auto\">add license</p>", "author": "graemerocher", "createdAt": "2020-09-03T06:50:14Z", "path": "management/src/main/java/io/micronaut/management/health/indicator/Readiness.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package io.micronaut.management.health.indicator;", "originalCommit": "457466dc5c7822355fb0eb5e3dc6308942ac0302", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc0Mjg4NQ==", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4012#discussion_r482742885", "body": "Add javadoc description", "bodyText": "Add javadoc description", "bodyHTML": "<p dir=\"auto\">Add javadoc description</p>", "author": "graemerocher", "createdAt": "2020-09-03T06:50:26Z", "path": "management/src/main/java/io/micronaut/management/health/indicator/Readiness.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package io.micronaut.management.health.indicator;\n+\n+import javax.inject.Qualifier;\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.Retention;\n+\n+import static java.lang.annotation.RetentionPolicy.RUNTIME;\n+\n+/**\n+ * @author Pavol Gressa", "originalCommit": "457466dc5c7822355fb0eb5e3dc6308942ac0302", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc0MzA5OQ==", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4012#discussion_r482743099", "body": "`@Target` should be TYPE, METHOD and ANNOTATION_TYPE", "bodyText": "@Target should be TYPE, METHOD and ANNOTATION_TYPE", "bodyHTML": "<p dir=\"auto\"><code>@Target</code> should be TYPE, METHOD and ANNOTATION_TYPE</p>", "author": "graemerocher", "createdAt": "2020-09-03T06:50:54Z", "path": "management/src/main/java/io/micronaut/management/health/indicator/Readiness.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package io.micronaut.management.health.indicator;\n+\n+import javax.inject.Qualifier;\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.Retention;\n+\n+import static java.lang.annotation.RetentionPolicy.RUNTIME;\n+\n+/**\n+ * @author Pavol Gressa\n+ * @since 2.1\n+ */\n+@Qualifier\n+@Documented\n+@Retention(RUNTIME)\n+public @interface Readiness {", "originalCommit": "457466dc5c7822355fb0eb5e3dc6308942ac0302", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc0MzM4Ng==", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4012#discussion_r482743386", "body": "put these in a subpackage called `io.micronaut.management.health.indicator.annotation`", "bodyText": "put these in a subpackage called io.micronaut.management.health.indicator.annotation", "bodyHTML": "<p dir=\"auto\">put these in a subpackage called <code>io.micronaut.management.health.indicator.annotation</code></p>", "author": "graemerocher", "createdAt": "2020-09-03T06:51:28Z", "path": "management/src/main/java/io/micronaut/management/health/indicator/Readiness.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package io.micronaut.management.health.indicator;", "originalCommit": "457466dc5c7822355fb0eb5e3dc6308942ac0302", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc0MzUzMg==", "url": "https://github.com/micronaut-projects/micronaut-core/pull/4012#discussion_r482743532", "body": "`@Target` should be TYPE, METHOD and ANNOTATION_TYPE", "bodyText": "@Target should be TYPE, METHOD and ANNOTATION_TYPE", "bodyHTML": "<p dir=\"auto\"><code>@Target</code> should be TYPE, METHOD and ANNOTATION_TYPE</p>", "author": "graemerocher", "createdAt": "2020-09-03T06:51:45Z", "path": "management/src/main/java/io/micronaut/management/health/indicator/Liveness.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package io.micronaut.management.health.indicator;\n+\n+import javax.inject.Qualifier;\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.Retention;\n+\n+import static java.lang.annotation.RetentionPolicy.RUNTIME;\n+\n+/**\n+ * @author Pavol Gressa\n+ * @since 2.1\n+ */\n+@Qualifier\n+@Documented\n+@Retention(RUNTIME)\n+public @interface Liveness{", "originalCommit": "457466dc5c7822355fb0eb5e3dc6308942ac0302", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null}, {"oid": "ed1a360514334863f95f5ebcf6d68e5e76eefa56", "url": "https://github.com/micronaut-projects/micronaut-core/commit/ed1a360514334863f95f5ebcf6d68e5e76eefa56", "message": "fixup! Extend health endpoint with readiness and liveness probes", "committedDate": "2020-09-03T12:36:04Z", "type": "forcePushed"}, {"oid": "d7687cf8e2f33c2ee0ab221ee967e87f7ff282a5", "url": "https://github.com/micronaut-projects/micronaut-core/commit/d7687cf8e2f33c2ee0ab221ee967e87f7ff282a5", "message": "fixup! Extend health endpoint with readiness and liveness probes", "committedDate": "2020-09-03T12:42:37Z", "type": "forcePushed"}, {"oid": "1006d8e35fde2e9ff167044e429bd1ed84410ccb", "url": "https://github.com/micronaut-projects/micronaut-core/commit/1006d8e35fde2e9ff167044e429bd1ed84410ccb", "message": "Add ServiceReadyHealthIndicator as Readiness indicator", "committedDate": "2020-09-16T20:07:42Z", "type": "forcePushed"}, {"oid": "d4550fd92114be5e7cc950760185de514545f149", "url": "https://github.com/micronaut-projects/micronaut-core/commit/d4550fd92114be5e7cc950760185de514545f149", "message": "Extend health endpoint with readiness and liveness probes", "committedDate": "2020-09-16T20:14:34Z", "type": "commit"}, {"oid": "22c8a9bd6a467a737327f996d0d46b8c35741ae3", "url": "https://github.com/micronaut-projects/micronaut-core/commit/22c8a9bd6a467a737327f996d0d46b8c35741ae3", "message": "Extend documentation", "committedDate": "2020-09-16T20:15:02Z", "type": "commit"}, {"oid": "f0c739264b6c82b6b2b356df9d33b30afccfc05b", "url": "https://github.com/micronaut-projects/micronaut-core/commit/f0c739264b6c82b6b2b356df9d33b30afccfc05b", "message": "Add ServiceReadyHealthIndicator as Readiness indicator", "committedDate": "2020-09-16T20:15:12Z", "type": "forcePushed"}, {"oid": "a6c41d062db498f158d8815fe7cafeebfbdcca68", "url": "https://github.com/micronaut-projects/micronaut-core/commit/a6c41d062db498f158d8815fe7cafeebfbdcca68", "message": "Add ServiceReadyHealthIndicator as Readiness indicator", "committedDate": "2020-09-16T20:19:00Z", "type": "forcePushed"}, {"oid": "0f3bc9ad60dd056228a3ba13df1f84348865aeb9", "url": "https://github.com/micronaut-projects/micronaut-core/commit/0f3bc9ad60dd056228a3ba13df1f84348865aeb9", "message": "Add ServiceReadyHealthIndicator as Readiness indicator", "committedDate": "2020-09-16T20:25:59Z", "type": "forcePushed"}, {"oid": "486a3499fd69c0d930628e73340e718892021669", "url": "https://github.com/micronaut-projects/micronaut-core/commit/486a3499fd69c0d930628e73340e718892021669", "message": "Add ServiceReadyHealthIndicator as Readiness indicator", "committedDate": "2020-09-16T20:45:47Z", "type": "commit"}, {"oid": "486a3499fd69c0d930628e73340e718892021669", "url": "https://github.com/micronaut-projects/micronaut-core/commit/486a3499fd69c0d930628e73340e718892021669", "message": "Add ServiceReadyHealthIndicator as Readiness indicator", "committedDate": "2020-09-16T20:45:47Z", "type": "forcePushed"}, {"oid": "d195d6662beca30ac9857bf66557a12d75e43bdd", "url": "https://github.com/micronaut-projects/micronaut-core/commit/d195d6662beca30ac9857bf66557a12d75e43bdd", "message": "fixup! Extend documentation", "committedDate": "2020-09-17T09:46:01Z", "type": "commit"}, {"oid": "d195d6662beca30ac9857bf66557a12d75e43bdd", "url": "https://github.com/micronaut-projects/micronaut-core/commit/d195d6662beca30ac9857bf66557a12d75e43bdd", "message": "fixup! Extend documentation", "committedDate": "2020-09-17T09:46:01Z", "type": "forcePushed"}]}