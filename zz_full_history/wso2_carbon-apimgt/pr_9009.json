{"pr_number": 9009, "pr_title": "Modify gatewayRESTAPI parameters ", "pr_author": "Sarangan0219", "pr_createdAt": "2020-07-21T07:06:37Z", "pr_url": "https://github.com/wso2/carbon-apimgt/pull/9009", "timeline": [{"oid": "7955ecc73d8145d75b1d117d1e47b1686d761774", "url": "https://github.com/wso2/carbon-apimgt/commit/7955ecc73d8145d75b1d117d1e47b1686d761774", "message": "Change parameters for the REST API calls", "committedDate": "2020-07-20T17:35:47Z", "type": "commit"}, {"oid": "7dd94f42c021ad9d89b9fe6f73ff1ee20b9d5326", "url": "https://github.com/wso2/carbon-apimgt/commit/7dd94f42c021ad9d89b9fe6f73ff1ee20b9d5326", "message": "Modify deploy and undeploy resources", "committedDate": "2020-07-21T06:30:43Z", "type": "commit"}, {"oid": "581f2ced586de97fd7cbe1778dd57939a2c452aa", "url": "https://github.com/wso2/carbon-apimgt/commit/581f2ced586de97fd7cbe1778dd57939a2c452aa", "message": "Add deleted file", "committedDate": "2020-07-21T06:33:21Z", "type": "commit"}, {"oid": "b8e275caf81bae89f75164ada7f214f14fe8f37e", "url": "https://github.com/wso2/carbon-apimgt/commit/b8e275caf81bae89f75164ada7f214f14fe8f37e", "message": "Add deleted file", "committedDate": "2020-07-21T06:34:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk2NjMxMA==", "url": "https://github.com/wso2/carbon-apimgt/pull/9009#discussion_r457966310", "body": "Formatting error", "bodyText": "Formatting error", "bodyHTML": "<p dir=\"auto\">Formatting error</p>", "author": "1akshitha", "createdAt": "2020-07-21T09:35:04Z", "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/DeployApiApiServiceImpl.java", "diffHunk": "@@ -19,19 +19,29 @@\n package org.wso2.carbon.apimgt.rest.api.gateway.v1.impl;\n \n import org.wso2.carbon.apimgt.gateway.InMemoryAPIDeployer;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n import org.wso2.carbon.apimgt.rest.api.gateway.v1.*;\n import org.apache.cxf.jaxrs.ext.MessageContext;\n \n import javax.ws.rs.core.Response;\n \n import org.json.JSONObject;\n \n+import java.util.Map;\n+\n public class DeployApiApiServiceImpl implements DeployApiApiService {\n+    private final String SUPER_TENAT_DOMAIN = \"carbon.super\";\n \n-    public Response deployApiPost(String apiName, String gatewayLabel, String apiId, MessageContext messageContext) {\n+    public Response deployApiPost(String apiName, String version , String tenantDomain, MessageContext messageContext) {\n \n         InMemoryAPIDeployer inMemoryApiDeployer = new InMemoryAPIDeployer();\n-        boolean status = inMemoryApiDeployer.deployAPI(apiId, gatewayLabel);\n+        if (tenantDomain == null){\n+            tenantDomain =SUPER_TENAT_DOMAIN;", "originalCommit": "b8e275caf81bae89f75164ada7f214f14fe8f37e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk5MTEwMQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/9009#discussion_r457991101", "bodyText": "b99a273", "author": "Sarangan0219", "createdAt": "2020-07-21T10:19:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk2NjMxMA=="}], "type": "inlineReview", "revised_code": {"commit": "b99a273017722380eaa25c62f86587c522498b9a", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/DeployApiApiServiceImpl.java b/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/DeployApiApiServiceImpl.java\nindex 7fc7fb3abc0..7d7f9bdd6bb 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/DeployApiApiServiceImpl.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/DeployApiApiServiceImpl.java\n", "chunk": "@@ -30,13 +30,12 @@ import org.json.JSONObject;\n import java.util.Map;\n \n public class DeployApiApiServiceImpl implements DeployApiApiService {\n-    private final String SUPER_TENAT_DOMAIN = \"carbon.super\";\n \n     public Response deployApiPost(String apiName, String version , String tenantDomain, MessageContext messageContext) {\n \n         InMemoryAPIDeployer inMemoryApiDeployer = new InMemoryAPIDeployer();\n-        if (tenantDomain == null){\n-            tenantDomain =SUPER_TENAT_DOMAIN;\n+        if (tenantDomain == null) {\n+            tenantDomain = APIConstants.SUPER_TENANT_DOMAIN;\n         }\n         Map<String, String> apiAttributes = inMemoryApiDeployer.getGatewayAPIAttributes(apiName, version, tenantDomain);\n         String apiId = apiAttributes.get(APIConstants.GatewayArtifactSynchronizer.API_ID);\n", "next_change": {"commit": "d3466da657fc0fc8274dcdfe8475b28056613497", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/DeployApiApiServiceImpl.java b/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/DeployApiApiServiceImpl.java\ndeleted file mode 100644\nindex 7d7f9bdd6bb..00000000000\n--- a/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/DeployApiApiServiceImpl.java\n+++ /dev/null\n", "chunk": "@@ -1,56 +0,0 @@\n-/*\n- *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n- *\n- *  WSO2 Inc. licenses this file to you under the Apache License,\n- *  Version 2.0 (the \"License\"); you may not use this file except\n- *  in compliance with the License.\n- *  You may obtain a copy of the License at\n- *\n- *    http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-\n-package org.wso2.carbon.apimgt.rest.api.gateway.v1.impl;\n-\n-import org.wso2.carbon.apimgt.gateway.InMemoryAPIDeployer;\n-import org.wso2.carbon.apimgt.impl.APIConstants;\n-import org.wso2.carbon.apimgt.rest.api.gateway.v1.*;\n-import org.apache.cxf.jaxrs.ext.MessageContext;\n-\n-import javax.ws.rs.core.Response;\n-\n-import org.json.JSONObject;\n-\n-import java.util.Map;\n-\n-public class DeployApiApiServiceImpl implements DeployApiApiService {\n-\n-    public Response deployApiPost(String apiName, String version , String tenantDomain, MessageContext messageContext) {\n-\n-        InMemoryAPIDeployer inMemoryApiDeployer = new InMemoryAPIDeployer();\n-        if (tenantDomain == null) {\n-            tenantDomain = APIConstants.SUPER_TENANT_DOMAIN;\n-        }\n-        Map<String, String> apiAttributes = inMemoryApiDeployer.getGatewayAPIAttributes(apiName, version, tenantDomain);\n-        String apiId = apiAttributes.get(APIConstants.GatewayArtifactSynchronizer.API_ID);\n-        String label = apiAttributes.get(APIConstants.GatewayArtifactSynchronizer.LABEL);\n-        boolean status = inMemoryApiDeployer.deployAPI(apiId, label);\n-\n-        JSONObject responseObj = new JSONObject();\n-        if (status) {\n-            responseObj.put(\"Message\", \"Success\");\n-            String responseStringObj = String.valueOf(responseObj);\n-            return Response.ok().entity(responseStringObj).build();\n-        } else {\n-            responseObj.put(\"Message\", \"Error\");\n-            String responseStringObj = String.valueOf(responseObj);\n-            return Response.serverError().entity(responseStringObj).build();\n-        }\n-    }\n-}\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk2NzczMw==", "url": "https://github.com/wso2/carbon-apimgt/pull/9009#discussion_r457967733", "body": "formatting error", "bodyText": "formatting error", "bodyHTML": "<p dir=\"auto\">formatting error</p>", "author": "1akshitha", "createdAt": "2020-07-21T09:37:39Z", "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/EndPointsApiServiceImpl.java", "diffHunk": "@@ -26,22 +26,34 @@\n import org.wso2.carbon.apimgt.api.gateway.GatewayContentDTO;\n import org.wso2.carbon.apimgt.gateway.InMemoryAPIDeployer;\n import org.wso2.carbon.apimgt.gateway.utils.EndpointAdminServiceProxy;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n import org.wso2.carbon.apimgt.rest.api.gateway.v1.*;\n import org.apache.cxf.jaxrs.ext.MessageContext;\n import org.wso2.carbon.apimgt.rest.api.util.utils.RestApiUtil;\n import org.wso2.carbon.endpoint.EndpointAdminException;\n \n import javax.ws.rs.core.Response;\n+import java.util.Map;\n \n public class EndPointsApiServiceImpl implements EndPointsApiService {\n \n     private static final Log log = LogFactory.getLog(EndPointsApiServiceImpl.class);\n+    private final String SUPER_TENAT_DOMAIN = \"carbon.super\";\n \n-    public Response endPointsGet(String apiName, String label, String apiId, MessageContext messageContext) {\n+    public Response endPointsGet(String apiName, String version , String tenantDomain, MessageContext messageContext) {\n \n         InMemoryAPIDeployer inMemoryApiDeployer = new InMemoryAPIDeployer();\n+        if (tenantDomain == null){\n+            tenantDomain =SUPER_TENAT_DOMAIN;", "originalCommit": "b8e275caf81bae89f75164ada7f214f14fe8f37e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk5MTA2NQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/9009#discussion_r457991065", "bodyText": "b99a273", "author": "Sarangan0219", "createdAt": "2020-07-21T10:18:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk2NzczMw=="}], "type": "inlineReview", "revised_code": {"commit": "b99a273017722380eaa25c62f86587c522498b9a", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/EndPointsApiServiceImpl.java b/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/EndPointsApiServiceImpl.java\nindex 6ccefd2136d..2200b8467aa 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/EndPointsApiServiceImpl.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/EndPointsApiServiceImpl.java\n", "chunk": "@@ -38,13 +38,12 @@ import java.util.Map;\n public class EndPointsApiServiceImpl implements EndPointsApiService {\n \n     private static final Log log = LogFactory.getLog(EndPointsApiServiceImpl.class);\n-    private final String SUPER_TENAT_DOMAIN = \"carbon.super\";\n \n     public Response endPointsGet(String apiName, String version , String tenantDomain, MessageContext messageContext) {\n \n         InMemoryAPIDeployer inMemoryApiDeployer = new InMemoryAPIDeployer();\n-        if (tenantDomain == null){\n-            tenantDomain =SUPER_TENAT_DOMAIN;\n+        if (tenantDomain == null) {\n+            tenantDomain = APIConstants.SUPER_TENANT_DOMAIN;\n         }\n \n         Map<String, String> apiAttributes = inMemoryApiDeployer.getGatewayAPIAttributes(apiName, version, tenantDomain);\n", "next_change": {"commit": "dad34d0a5c690fbbcdaf4446a005cf92e0a86393", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/EndPointsApiServiceImpl.java b/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/EndPointsApiServiceImpl.java\nindex 2200b8467aa..b3621bcb5da 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/EndPointsApiServiceImpl.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/EndPointsApiServiceImpl.java\n", "chunk": "@@ -45,12 +46,19 @@ public class EndPointsApiServiceImpl implements EndPointsApiService {\n         if (tenantDomain == null) {\n             tenantDomain = APIConstants.SUPER_TENANT_DOMAIN;\n         }\n+        GatewayAPIDTO gatewayAPIDTO = null;\n+        try {\n+            Map<String, String> apiAttributes = inMemoryApiDeployer.getGatewayAPIAttributes(apiName, version,\n+                    tenantDomain);\n+            String apiId = apiAttributes.get(APIConstants.GatewayArtifactSynchronizer.API_ID);\n+            String label = apiAttributes.get(APIConstants.GatewayArtifactSynchronizer.LABEL);\n+            gatewayAPIDTO = inMemoryApiDeployer.getAPIArtifact(apiId, label);\n+        } catch (ArtifactSynchronizerException e) {\n+            String errorMessage = \"Error in fetching artifacts from storage\";\n+            log.error(errorMessage, e);\n+            RestApiUtil.handleInternalServerError(errorMessage, e, log);\n+        }\n \n-        Map<String, String> apiAttributes = inMemoryApiDeployer.getGatewayAPIAttributes(apiName, version, tenantDomain);\n-        String apiId = apiAttributes.get(APIConstants.GatewayArtifactSynchronizer.API_ID);\n-        String label = apiAttributes.get(APIConstants.GatewayArtifactSynchronizer.LABEL);\n-\n-        GatewayAPIDTO gatewayAPIDTO = inMemoryApiDeployer.getAPIArtifact(apiId, label);\n         JSONObject responseObj = new JSONObject();\n \n         if (gatewayAPIDTO != null) {\n", "next_change": {"commit": "ed3e68de759e36aaf4363d6c26e26e55713241c6", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/EndPointsApiServiceImpl.java b/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/EndPointsApiServiceImpl.java\nindex b3621bcb5da..79bf59ed885 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/EndPointsApiServiceImpl.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/EndPointsApiServiceImpl.java\n", "chunk": "@@ -47,20 +48,27 @@ public class EndPointsApiServiceImpl implements EndPointsApiService {\n             tenantDomain = APIConstants.SUPER_TENANT_DOMAIN;\n         }\n         GatewayAPIDTO gatewayAPIDTO = null;\n+        JSONObject responseObj = new JSONObject();\n         try {\n             Map<String, String> apiAttributes = inMemoryApiDeployer.getGatewayAPIAttributes(apiName, version,\n                     tenantDomain);\n             String apiId = apiAttributes.get(APIConstants.GatewayArtifactSynchronizer.API_ID);\n             String label = apiAttributes.get(APIConstants.GatewayArtifactSynchronizer.LABEL);\n+\n+            if (label == null){\n+                return Response.status(Response.Status.BAD_REQUEST).entity(apiName + \" is not deployed in the Gateway\").build();\n+            }\n+\n             gatewayAPIDTO = inMemoryApiDeployer.getAPIArtifact(apiId, label);\n+            if (debugEnabled) {\n+                log.debug(\"Retrieved Artifacts for \" + apiName + \" from eventhub\");\n+            }\n         } catch (ArtifactSynchronizerException e) {\n             String errorMessage = \"Error in fetching artifacts from storage\";\n             log.error(errorMessage, e);\n             RestApiUtil.handleInternalServerError(errorMessage, e, log);\n         }\n \n-        JSONObject responseObj = new JSONObject();\n-\n         if (gatewayAPIDTO != null) {\n             try {\n                 JSONArray endPointArray = new JSONArray();\n", "next_change": {"commit": "f5fde6e8520d7fc4b09d5a4defd9834b16b2bb66", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/EndPointsApiServiceImpl.java b/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/EndPointsApiServiceImpl.java\nindex 79bf59ed885..2910de3012b 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/EndPointsApiServiceImpl.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/EndPointsApiServiceImpl.java\n", "chunk": "@@ -41,61 +48,24 @@ public class EndPointsApiServiceImpl implements EndPointsApiService {\n     private static final Log log = LogFactory.getLog(EndPointsApiServiceImpl.class);\n     private boolean debugEnabled = log.isDebugEnabled();\n \n-    public Response endPointsGet(String apiName, String version , String tenantDomain, MessageContext messageContext) {\n+    public Response endPointsGet(String apiName, String version, String tenantDomain, MessageContext messageContext) {\n+        tenantDomain = RestApiCommonUtil.getValidateTenantDomain(tenantDomain);\n \n-        InMemoryAPIDeployer inMemoryApiDeployer = new InMemoryAPIDeployer();\n-        if (tenantDomain == null) {\n-            tenantDomain = APIConstants.SUPER_TENANT_DOMAIN;\n-        }\n-        GatewayAPIDTO gatewayAPIDTO = null;\n-        JSONObject responseObj = new JSONObject();\n         try {\n-            Map<String, String> apiAttributes = inMemoryApiDeployer.getGatewayAPIAttributes(apiName, version,\n-                    tenantDomain);\n-            String apiId = apiAttributes.get(APIConstants.GatewayArtifactSynchronizer.API_ID);\n-            String label = apiAttributes.get(APIConstants.GatewayArtifactSynchronizer.LABEL);\n-\n-            if (label == null){\n-                return Response.status(Response.Status.BAD_REQUEST).entity(apiName + \" is not deployed in the Gateway\").build();\n-            }\n \n-            gatewayAPIDTO = inMemoryApiDeployer.getAPIArtifact(apiId, label);\n+            List<String> deployedLocalEntries = GatewayUtils.retrieveDeployedEndpoints(apiName, version,\n+                    tenantDomain);\n             if (debugEnabled) {\n                 log.debug(\"Retrieved Artifacts for \" + apiName + \" from eventhub\");\n             }\n-        } catch (ArtifactSynchronizerException e) {\n-            String errorMessage = \"Error in fetching artifacts from storage\";\n+            EndpointsDTO endpointsDTO = new EndpointsDTO();\n+            endpointsDTO.endpoints(deployedLocalEntries);\n+            return Response.ok().entity(endpointsDTO).build();\n+        } catch (AxisFault e) {\n+            String errorMessage = \"Error in fetching deployed artifacts from Synapse Configuration\";\n             log.error(errorMessage, e);\n             RestApiUtil.handleInternalServerError(errorMessage, e, log);\n         }\n-\n-        if (gatewayAPIDTO != null) {\n-            try {\n-                JSONArray endPointArray = new JSONArray();\n-                JSONArray unDeployedEndPointArray = new JSONArray();\n-                if (gatewayAPIDTO.getEndpointEntriesToBeAdd() != null) {\n-                    EndpointAdminServiceProxy endpointAdminServiceProxy = new EndpointAdminServiceProxy\n-                            (gatewayAPIDTO.getTenantDomain());\n-                    for (GatewayContentDTO gatewayEndpoint : gatewayAPIDTO.getEndpointEntriesToBeAdd()) {\n-                        if (endpointAdminServiceProxy.isEndpointExist(gatewayEndpoint.getName())) {\n-                            endPointArray.put(endpointAdminServiceProxy.getEndpoints(gatewayEndpoint.getName()));\n-                        } else {\n-                            log.error(gatewayEndpoint.getName() + \" was not deployed in the gateway\");\n-                            unDeployedEndPointArray.put(gatewayEndpoint.getContent());\n-                        }\n-                    }\n-                }\n-                responseObj.put(\"Deployed Endpoints\", endPointArray);\n-                responseObj.put(\"UnDeployed Endpoints\", unDeployedEndPointArray);\n-            } catch (EndpointAdminException e) {\n-                String errorMessage = \"Error in fetching deployed Endpoints from Synapse Configuration\";\n-                log.error(errorMessage, e);\n-                RestApiUtil.handleInternalServerError(errorMessage, e, log);\n-            }\n-            String responseStringObj = String.valueOf(responseObj);\n-            return Response.ok().entity(responseStringObj).build();\n-        } else {\n-            return Response.serverError().entity(\"Unexpected error occurred\").build();\n-        }\n+        return Response.status(Response.Status.NOT_FOUND).build();\n     }\n }\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk2OTQzNw==", "url": "https://github.com/wso2/carbon-apimgt/pull/9009#discussion_r457969437", "body": "Don't we have this super tenant as a constant in APIConstants? If so please point to that.", "bodyText": "Don't we have this super tenant as a constant in APIConstants? If so please point to that.", "bodyHTML": "<p dir=\"auto\">Don't we have this super tenant as a constant in APIConstants? If so please point to that.</p>", "author": "1akshitha", "createdAt": "2020-07-21T09:40:38Z", "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/LocalEntryApiServiceImpl.java", "diffHunk": "@@ -28,19 +28,29 @@\n import org.wso2.carbon.apimgt.gateway.InMemoryAPIDeployer;\n import org.wso2.carbon.apimgt.gateway.utils.LocalEntryServiceProxy;\n import org.wso2.carbon.apimgt.impl.APIAdminImpl;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n import org.wso2.carbon.apimgt.rest.api.gateway.v1.*;\n import org.apache.cxf.jaxrs.ext.MessageContext;\n import org.wso2.carbon.apimgt.rest.api.util.utils.RestApiUtil;\n \n import javax.ws.rs.core.Response;\n+import java.util.Map;\n \n public class LocalEntryApiServiceImpl implements LocalEntryApiService {\n \n     private static final Log log = LogFactory.getLog(LocalEntryApiServiceImpl.class);\n+    private final String SUPER_TENAT_DOMAIN = \"carbon.super\";", "originalCommit": "b8e275caf81bae89f75164ada7f214f14fe8f37e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk5MTAzOA==", "url": "https://github.com/wso2/carbon-apimgt/pull/9009#discussion_r457991038", "bodyText": "b99a273", "author": "Sarangan0219", "createdAt": "2020-07-21T10:18:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk2OTQzNw=="}], "type": "inlineReview", "revised_code": {"commit": "b99a273017722380eaa25c62f86587c522498b9a", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/LocalEntryApiServiceImpl.java b/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/LocalEntryApiServiceImpl.java\nindex 42a285b0e1a..0a39a9f1daf 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/LocalEntryApiServiceImpl.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/LocalEntryApiServiceImpl.java\n", "chunk": "@@ -39,12 +39,11 @@ import java.util.Map;\n public class LocalEntryApiServiceImpl implements LocalEntryApiService {\n \n     private static final Log log = LogFactory.getLog(LocalEntryApiServiceImpl.class);\n-    private final String SUPER_TENAT_DOMAIN = \"carbon.super\";\n \n     public Response localEntryGet(String apiName, String version , String tenantDomain, MessageContext messageContext){\n         InMemoryAPIDeployer inMemoryApiDeployer = new InMemoryAPIDeployer();\n-        if (tenantDomain == null){\n-            tenantDomain =SUPER_TENAT_DOMAIN;\n+        if (tenantDomain == null) {\n+            tenantDomain = APIConstants.SUPER_TENANT_DOMAIN;\n         }\n \n         Map<String, String> apiAttributes = inMemoryApiDeployer.getGatewayAPIAttributes(apiName, version, tenantDomain);\n", "next_change": {"commit": "dad34d0a5c690fbbcdaf4446a005cf92e0a86393", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/LocalEntryApiServiceImpl.java b/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/LocalEntryApiServiceImpl.java\nindex 0a39a9f1daf..fc0aa665b6d 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/LocalEntryApiServiceImpl.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/LocalEntryApiServiceImpl.java\n", "chunk": "@@ -45,12 +46,19 @@ public class LocalEntryApiServiceImpl implements LocalEntryApiService {\n         if (tenantDomain == null) {\n             tenantDomain = APIConstants.SUPER_TENANT_DOMAIN;\n         }\n+        GatewayAPIDTO gatewayAPIDTO = null;\n+        try {\n+            Map<String, String> apiAttributes = inMemoryApiDeployer.getGatewayAPIAttributes(apiName, version,\n+                    tenantDomain);\n+            String apiId = apiAttributes.get(APIConstants.GatewayArtifactSynchronizer.API_ID);\n+            String label = apiAttributes.get(APIConstants.GatewayArtifactSynchronizer.LABEL);\n+            gatewayAPIDTO = inMemoryApiDeployer.getAPIArtifact(apiId, label);\n+        } catch (ArtifactSynchronizerException e) {\n+            String errorMessage = \"Error in fetching artifacts from storage\";\n+            log.error(errorMessage, e);\n+            RestApiUtil.handleInternalServerError(errorMessage, e, log);\n+        }\n \n-        Map<String, String> apiAttributes = inMemoryApiDeployer.getGatewayAPIAttributes(apiName, version, tenantDomain);\n-        String apiId = apiAttributes.get(APIConstants.GatewayArtifactSynchronizer.API_ID);\n-        String label = apiAttributes.get(APIConstants.GatewayArtifactSynchronizer.LABEL);\n-\n-        GatewayAPIDTO gatewayAPIDTO = inMemoryApiDeployer.getAPIArtifact(apiId, label);\n         JSONObject responseObj = new JSONObject();\n \n         if (gatewayAPIDTO != null) {\n", "next_change": {"commit": "ed3e68de759e36aaf4363d6c26e26e55713241c6", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/LocalEntryApiServiceImpl.java b/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/LocalEntryApiServiceImpl.java\nindex fc0aa665b6d..e756c9d177c 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/LocalEntryApiServiceImpl.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/LocalEntryApiServiceImpl.java\n", "chunk": "@@ -47,20 +48,27 @@ public class LocalEntryApiServiceImpl implements LocalEntryApiService {\n             tenantDomain = APIConstants.SUPER_TENANT_DOMAIN;\n         }\n         GatewayAPIDTO gatewayAPIDTO = null;\n+        JSONObject responseObj = new JSONObject();\n         try {\n             Map<String, String> apiAttributes = inMemoryApiDeployer.getGatewayAPIAttributes(apiName, version,\n                     tenantDomain);\n             String apiId = apiAttributes.get(APIConstants.GatewayArtifactSynchronizer.API_ID);\n             String label = apiAttributes.get(APIConstants.GatewayArtifactSynchronizer.LABEL);\n+\n+            if (label == null){\n+                return Response.status(Response.Status.BAD_REQUEST).entity(apiName + \" is not deployed in the Gateway\").build();\n+            }\n+\n             gatewayAPIDTO = inMemoryApiDeployer.getAPIArtifact(apiId, label);\n+            if (debugEnabled) {\n+                log.debug(\"Retrieved Artifacts for \" + apiName + \" from eventhub\");\n+            }\n         } catch (ArtifactSynchronizerException e) {\n             String errorMessage = \"Error in fetching artifacts from storage\";\n             log.error(errorMessage, e);\n             RestApiUtil.handleInternalServerError(errorMessage, e, log);\n         }\n \n-        JSONObject responseObj = new JSONObject();\n-\n         if (gatewayAPIDTO != null) {\n             try {\n                 JSONArray localEntryArray = new JSONArray();\n", "next_change": {"commit": "f5fde6e8520d7fc4b09d5a4defd9834b16b2bb66", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/LocalEntryApiServiceImpl.java b/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/LocalEntryApiServiceImpl.java\nindex e756c9d177c..d290f9bf4ba 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/LocalEntryApiServiceImpl.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/LocalEntryApiServiceImpl.java\n", "chunk": "@@ -21,81 +21,40 @@ package org.wso2.carbon.apimgt.rest.api.gateway.v1.impl;\n import org.apache.axis2.AxisFault;\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n-import org.json.JSONArray;\n-import org.json.JSONObject;\n-import org.wso2.carbon.apimgt.api.gateway.GatewayAPIDTO;\n-import org.wso2.carbon.apimgt.api.gateway.GatewayContentDTO;\n-import org.wso2.carbon.apimgt.gateway.InMemoryAPIDeployer;\n-import org.wso2.carbon.apimgt.gateway.utils.LocalEntryServiceProxy;\n-import org.wso2.carbon.apimgt.impl.APIAdminImpl;\n-import org.wso2.carbon.apimgt.impl.APIConstants;\n-import org.wso2.carbon.apimgt.impl.gatewayartifactsynchronizer.exception.ArtifactSynchronizerException;\n-import org.wso2.carbon.apimgt.rest.api.gateway.v1.*;\n import org.apache.cxf.jaxrs.ext.MessageContext;\n+import org.wso2.carbon.apimgt.gateway.utils.GatewayUtils;\n+import org.wso2.carbon.apimgt.rest.api.common.RestApiCommonUtil;\n+import org.wso2.carbon.apimgt.rest.api.gateway.v1.LocalEntryApiService;\n+import org.wso2.carbon.apimgt.rest.api.gateway.v1.dto.LocalEntryDTO;\n+import org.wso2.carbon.apimgt.rest.api.gateway.v1.dto.SequencesDTO;\n import org.wso2.carbon.apimgt.rest.api.util.utils.RestApiUtil;\n \n import javax.ws.rs.core.Response;\n-import java.util.Map;\n+import java.util.List;\n \n public class LocalEntryApiServiceImpl implements LocalEntryApiService {\n \n     private static final Log log = LogFactory.getLog(LocalEntryApiServiceImpl.class);\n     private boolean debugEnabled = log.isDebugEnabled();\n \n-    public Response localEntryGet(String apiName, String version , String tenantDomain, MessageContext messageContext){\n-        InMemoryAPIDeployer inMemoryApiDeployer = new InMemoryAPIDeployer();\n-        if (tenantDomain == null) {\n-            tenantDomain = APIConstants.SUPER_TENANT_DOMAIN;\n-        }\n-        GatewayAPIDTO gatewayAPIDTO = null;\n-        JSONObject responseObj = new JSONObject();\n-        try {\n-            Map<String, String> apiAttributes = inMemoryApiDeployer.getGatewayAPIAttributes(apiName, version,\n-                    tenantDomain);\n-            String apiId = apiAttributes.get(APIConstants.GatewayArtifactSynchronizer.API_ID);\n-            String label = apiAttributes.get(APIConstants.GatewayArtifactSynchronizer.LABEL);\n+    public Response localEntryGet(String apiName, String version, String tenantDomain, MessageContext messageContext) {\n+        tenantDomain = RestApiCommonUtil.getValidateTenantDomain(tenantDomain);\n \n-            if (label == null){\n-                return Response.status(Response.Status.BAD_REQUEST).entity(apiName + \" is not deployed in the Gateway\").build();\n-            }\n+        try {\n \n-            gatewayAPIDTO = inMemoryApiDeployer.getAPIArtifact(apiId, label);\n+            List<String> deployedLocalEntries = GatewayUtils.retrieveDeployedLocalEntries(apiName, version,\n+                    tenantDomain);\n             if (debugEnabled) {\n                 log.debug(\"Retrieved Artifacts for \" + apiName + \" from eventhub\");\n             }\n-        } catch (ArtifactSynchronizerException e) {\n-            String errorMessage = \"Error in fetching artifacts from storage\";\n+            LocalEntryDTO localEntryDTO = new LocalEntryDTO();\n+            localEntryDTO.localEntries(deployedLocalEntries);\n+            return Response.ok().entity(localEntryDTO).build();\n+        } catch (AxisFault e) {\n+            String errorMessage = \"Error in fetching deployed artifacts from Synapse Configuration\";\n             log.error(errorMessage, e);\n             RestApiUtil.handleInternalServerError(errorMessage, e, log);\n         }\n-\n-        if (gatewayAPIDTO != null) {\n-            try {\n-                JSONArray localEntryArray = new JSONArray();\n-                JSONArray UnDeploeydLocalEntryArray = new JSONArray();\n-                if (gatewayAPIDTO.getLocalEntriesToBeAdd() != null) {\n-                    LocalEntryServiceProxy localEntryServiceProxy = new\n-                            LocalEntryServiceProxy(gatewayAPIDTO.getTenantDomain());\n-                    for (GatewayContentDTO localEntry : gatewayAPIDTO.getLocalEntriesToBeAdd()) {\n-                        if (localEntryServiceProxy.isEntryExists(localEntry.getName())) {\n-                            localEntryArray.put(localEntryServiceProxy.getEntry(localEntry.getName()));\n-                        } else {\n-                            log.error(localEntry.getName() + \" was not deployed in the gateway\");\n-                            UnDeploeydLocalEntryArray.put(localEntry.getContent());\n-                        }\n-                    }\n-                }\n-                responseObj.put(\"Deployed Local Entries\", localEntryArray);\n-                responseObj.put(\"Undeployed Local Entries\", UnDeploeydLocalEntryArray);\n-            } catch (AxisFault e) {\n-                String errorMessage = \"Error in fetching deployed artifacts from Synapse Configuration\";\n-                log.error(errorMessage, e);\n-                RestApiUtil.handleInternalServerError(errorMessage, e, log);\n-            }\n-            String responseStringObj = String.valueOf(responseObj);\n-            return Response.ok().entity(responseStringObj).build();\n-        } else {\n-            return Response.serverError().entity(\"Unexpected error occurred\").build();\n-        }\n+        return Response.status(Response.Status.NOT_FOUND).build();\n     }\n }\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk2OTk3Mg==", "url": "https://github.com/wso2/carbon-apimgt/pull/9009#discussion_r457969972", "body": "Point to the constant in APIConstants. ", "bodyText": "Point to the constant in APIConstants.", "bodyHTML": "<p dir=\"auto\">Point to the constant in APIConstants.</p>", "author": "1akshitha", "createdAt": "2020-07-21T09:41:33Z", "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/SequenceApiServiceImpl.java", "diffHunk": "@@ -27,22 +27,31 @@\n import org.wso2.carbon.apimgt.api.gateway.GatewayContentDTO;\n import org.wso2.carbon.apimgt.gateway.InMemoryAPIDeployer;\n import org.wso2.carbon.apimgt.gateway.utils.SequenceAdminServiceProxy;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n import org.wso2.carbon.apimgt.rest.api.gateway.v1.*;\n import org.apache.cxf.jaxrs.ext.MessageContext;\n import org.wso2.carbon.apimgt.rest.api.util.utils.RestApiUtil;\n \n import javax.ws.rs.core.Response;\n+import java.util.Map;\n \n public class SequenceApiServiceImpl implements SequenceApiService {\n \n     private static final Log log = LogFactory.getLog(SequenceApiServiceImpl.class);\n+    private final String SUPER_TENAT_DOMAIN = \"carbon.super\";", "originalCommit": "b8e275caf81bae89f75164ada7f214f14fe8f37e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk5MTAwMw==", "url": "https://github.com/wso2/carbon-apimgt/pull/9009#discussion_r457991003", "bodyText": "b99a273", "author": "Sarangan0219", "createdAt": "2020-07-21T10:18:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk2OTk3Mg=="}], "type": "inlineReview", "revised_code": {"commit": "b99a273017722380eaa25c62f86587c522498b9a", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/SequenceApiServiceImpl.java b/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/SequenceApiServiceImpl.java\nindex d4807881ddd..b955590fbd1 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/SequenceApiServiceImpl.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/SequenceApiServiceImpl.java\n", "chunk": "@@ -38,12 +38,11 @@ import java.util.Map;\n public class SequenceApiServiceImpl implements SequenceApiService {\n \n     private static final Log log = LogFactory.getLog(SequenceApiServiceImpl.class);\n-    private final String SUPER_TENAT_DOMAIN = \"carbon.super\";\n \n     public Response sequenceGet(String apiName, String version , String tenantDomain, MessageContext messageContext) {\n         InMemoryAPIDeployer inMemoryApiDeployer = new InMemoryAPIDeployer();\n-        if (tenantDomain == null){\n-            tenantDomain =SUPER_TENAT_DOMAIN;\n+        if (tenantDomain == null) {\n+            tenantDomain = APIConstants.SUPER_TENANT_DOMAIN;\n         }\n \n         Map<String, String> apiAttributes = inMemoryApiDeployer.getGatewayAPIAttributes(apiName, version, tenantDomain);\n", "next_change": {"commit": "dad34d0a5c690fbbcdaf4446a005cf92e0a86393", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/SequenceApiServiceImpl.java b/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/SequenceApiServiceImpl.java\nindex b955590fbd1..1f32cc9b68d 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/SequenceApiServiceImpl.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/SequenceApiServiceImpl.java\n", "chunk": "@@ -44,12 +45,18 @@ public class SequenceApiServiceImpl implements SequenceApiService {\n         if (tenantDomain == null) {\n             tenantDomain = APIConstants.SUPER_TENANT_DOMAIN;\n         }\n-\n-        Map<String, String> apiAttributes = inMemoryApiDeployer.getGatewayAPIAttributes(apiName, version, tenantDomain);\n-        String apiId = apiAttributes.get(APIConstants.GatewayArtifactSynchronizer.API_ID);\n-        String label = apiAttributes.get(APIConstants.GatewayArtifactSynchronizer.LABEL);\n-\n-        GatewayAPIDTO gatewayAPIDTO = inMemoryApiDeployer.getAPIArtifact(apiId, label);\n+        GatewayAPIDTO gatewayAPIDTO = null;\n+        try {\n+            Map<String, String> apiAttributes = inMemoryApiDeployer.getGatewayAPIAttributes(apiName, version,\n+                    tenantDomain);\n+            String apiId = apiAttributes.get(APIConstants.GatewayArtifactSynchronizer.API_ID);\n+            String label = apiAttributes.get(APIConstants.GatewayArtifactSynchronizer.LABEL);\n+            gatewayAPIDTO = inMemoryApiDeployer.getAPIArtifact(apiId, label);\n+        } catch (ArtifactSynchronizerException e) {\n+            String errorMessage = \"Error in fetching artifacts from storage\";\n+            log.error(errorMessage, e);\n+            RestApiUtil.handleInternalServerError(errorMessage, e, log);\n+        }\n         JSONObject responseObj = new JSONObject();\n         if (gatewayAPIDTO != null) {\n             try {\n", "next_change": {"commit": "ed3e68de759e36aaf4363d6c26e26e55713241c6", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/SequenceApiServiceImpl.java b/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/SequenceApiServiceImpl.java\nindex 1f32cc9b68d..667bce10362 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/SequenceApiServiceImpl.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/SequenceApiServiceImpl.java\n", "chunk": "@@ -46,18 +47,27 @@ public class SequenceApiServiceImpl implements SequenceApiService {\n             tenantDomain = APIConstants.SUPER_TENANT_DOMAIN;\n         }\n         GatewayAPIDTO gatewayAPIDTO = null;\n+        JSONObject responseObj = new JSONObject();\n         try {\n             Map<String, String> apiAttributes = inMemoryApiDeployer.getGatewayAPIAttributes(apiName, version,\n                     tenantDomain);\n             String apiId = apiAttributes.get(APIConstants.GatewayArtifactSynchronizer.API_ID);\n             String label = apiAttributes.get(APIConstants.GatewayArtifactSynchronizer.LABEL);\n+\n+            if (label == null){\n+                return Response.status(Response.Status.BAD_REQUEST).entity(apiName + \" is not deployed in the Gateway\").build();\n+            }\n+\n             gatewayAPIDTO = inMemoryApiDeployer.getAPIArtifact(apiId, label);\n+            if (debugEnabled) {\n+                log.debug(\"Retrieved Artifacts for \" + apiName + \" from eventhub\");\n+            }\n         } catch (ArtifactSynchronizerException e) {\n             String errorMessage = \"Error in fetching artifacts from storage\";\n             log.error(errorMessage, e);\n             RestApiUtil.handleInternalServerError(errorMessage, e, log);\n         }\n-        JSONObject responseObj = new JSONObject();\n+\n         if (gatewayAPIDTO != null) {\n             try {\n                 JSONArray sequencesArray = new JSONArray();\n", "next_change": {"commit": "3fefb8a6b6ed713b63c0feb0e6b9b82a37312e2d", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/SequenceApiServiceImpl.java b/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/SequenceApiServiceImpl.java\nindex 667bce10362..0519e4d5912 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/SequenceApiServiceImpl.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/SequenceApiServiceImpl.java\n", "chunk": "@@ -72,11 +74,11 @@ public class SequenceApiServiceImpl implements SequenceApiService {\n             try {\n                 JSONArray sequencesArray = new JSONArray();\n                 JSONArray undeployedsequencesArray = new JSONArray();\n-                if (gatewayAPIDTO.getSequenceToBeAdd() != null ) {\n+                if (gatewayAPIDTO.getSequenceToBeAdd() != null) {\n                     SequenceAdminServiceProxy sequenceAdminServiceProxy =\n                             new SequenceAdminServiceProxy(gatewayAPIDTO.getTenantDomain());\n                     for (GatewayContentDTO sequence : gatewayAPIDTO.getSequenceToBeAdd()) {\n-                        if(sequenceAdminServiceProxy.isExistingSequence(sequence.getName())) {\n+                        if (sequenceAdminServiceProxy.isExistingSequence(sequence.getName())) {\n                             sequencesArray.put(sequenceAdminServiceProxy.getSequence(sequence.getName()));\n                         } else {\n                             log.error(sequence.getName() + \" was not deployed in the gateway\");\n", "next_change": {"commit": "f5fde6e8520d7fc4b09d5a4defd9834b16b2bb66", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/SequenceApiServiceImpl.java b/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/SequenceApiServiceImpl.java\nindex 0519e4d5912..957d60385d6 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/SequenceApiServiceImpl.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/SequenceApiServiceImpl.java\n", "chunk": "@@ -43,58 +45,22 @@ public class SequenceApiServiceImpl implements SequenceApiService {\n     private boolean debugEnabled = log.isDebugEnabled();\n \n     public Response sequenceGet(String apiName, String version, String tenantDomain, MessageContext messageContext) {\n+        tenantDomain = RestApiCommonUtil.getValidateTenantDomain(tenantDomain);\n \n-        InMemoryAPIDeployer inMemoryApiDeployer = new InMemoryAPIDeployer();\n-        if (tenantDomain == null) {\n-            tenantDomain = APIConstants.SUPER_TENANT_DOMAIN;\n-        }\n-        GatewayAPIDTO gatewayAPIDTO = null;\n-        JSONObject responseObj = new JSONObject();\n         try {\n-            Map<String, String> apiAttributes = inMemoryApiDeployer.getGatewayAPIAttributes(apiName, version,\n-                    tenantDomain);\n-            String apiId = apiAttributes.get(APIConstants.GatewayArtifactSynchronizer.API_ID);\n-            String label = apiAttributes.get(APIConstants.GatewayArtifactSynchronizer.LABEL);\n \n-            if (label == null) {\n-                return Response.status(Response.Status.BAD_REQUEST).entity(apiName + \" is not deployed in the Gateway\")\n-                        .build();\n-            }\n-            gatewayAPIDTO = inMemoryApiDeployer.getAPIArtifact(apiId, label);\n+            List<String> deployedSequences = GatewayUtils.retrieveDeployedSequences(apiName, version, tenantDomain);\n             if (debugEnabled) {\n                 log.debug(\"Retrieved Artifacts for \" + apiName + \" from eventhub\");\n             }\n-        } catch (ArtifactSynchronizerException e) {\n-            String errorMessage = \"Error in fetching artifacts from storage\";\n+            SequencesDTO sequencesDTO = new SequencesDTO();\n+            sequencesDTO.sequences(deployedSequences);\n+            return Response.ok().entity(sequencesDTO).build();\n+        } catch (AxisFault e) {\n+            String errorMessage = \"Error in fetching deployed artifacts from Synapse Configuration\";\n             log.error(errorMessage, e);\n             RestApiUtil.handleInternalServerError(errorMessage, e, log);\n         }\n-\n-        if (gatewayAPIDTO != null) {\n-            try {\n-                JSONArray sequencesArray = new JSONArray();\n-                JSONArray undeployedsequencesArray = new JSONArray();\n-                if (gatewayAPIDTO.getSequenceToBeAdd() != null) {\n-                    SequenceAdminServiceProxy sequenceAdminServiceProxy =\n-                            new SequenceAdminServiceProxy(gatewayAPIDTO.getTenantDomain());\n-                    for (GatewayContentDTO sequence : gatewayAPIDTO.getSequenceToBeAdd()) {\n-                        if (sequenceAdminServiceProxy.isExistingSequence(sequence.getName())) {\n-                            sequencesArray.put(sequenceAdminServiceProxy.getSequence(sequence.getName()));\n-                        } else {\n-                            log.error(sequence.getName() + \" was not deployed in the gateway\");\n-                            undeployedsequencesArray.put(sequence.getContent());\n-                        }\n-                    }\n-                }\n-            } catch (AxisFault e) {\n-                String errorMessage = \"Error in fetching deployed artifacts from Synapse Configuration\";\n-                log.error(errorMessage, e);\n-                RestApiUtil.handleInternalServerError(errorMessage, e, log);\n-            }\n-            String responseStringObj = String.valueOf(responseObj);\n-            return Response.ok().entity(responseStringObj).build();\n-        } else {\n-            return Response.serverError().entity(\"Unexpected error occurred\").build();\n-        }\n+        return Response.status(Response.Status.NOT_FOUND).build();\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk3MDA3MA==", "url": "https://github.com/wso2/carbon-apimgt/pull/9009#discussion_r457970070", "body": "Formatting error", "bodyText": "Formatting error", "bodyHTML": "<p dir=\"auto\">Formatting error</p>", "author": "1akshitha", "createdAt": "2020-07-21T09:41:41Z", "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/SequenceApiServiceImpl.java", "diffHunk": "@@ -27,22 +27,31 @@\n import org.wso2.carbon.apimgt.api.gateway.GatewayContentDTO;\n import org.wso2.carbon.apimgt.gateway.InMemoryAPIDeployer;\n import org.wso2.carbon.apimgt.gateway.utils.SequenceAdminServiceProxy;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n import org.wso2.carbon.apimgt.rest.api.gateway.v1.*;\n import org.apache.cxf.jaxrs.ext.MessageContext;\n import org.wso2.carbon.apimgt.rest.api.util.utils.RestApiUtil;\n \n import javax.ws.rs.core.Response;\n+import java.util.Map;\n \n public class SequenceApiServiceImpl implements SequenceApiService {\n \n     private static final Log log = LogFactory.getLog(SequenceApiServiceImpl.class);\n+    private final String SUPER_TENAT_DOMAIN = \"carbon.super\";\n \n-    public Response sequenceGet(String apiName, String label, String apiId, MessageContext messageContext) {\n-\n+    public Response sequenceGet(String apiName, String version , String tenantDomain, MessageContext messageContext) {\n         InMemoryAPIDeployer inMemoryApiDeployer = new InMemoryAPIDeployer();\n+        if (tenantDomain == null){\n+            tenantDomain =SUPER_TENAT_DOMAIN;", "originalCommit": "b8e275caf81bae89f75164ada7f214f14fe8f37e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk5MDk4MQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/9009#discussion_r457990981", "bodyText": "b99a273", "author": "Sarangan0219", "createdAt": "2020-07-21T10:18:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk3MDA3MA=="}], "type": "inlineReview", "revised_code": {"commit": "b99a273017722380eaa25c62f86587c522498b9a", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/SequenceApiServiceImpl.java b/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/SequenceApiServiceImpl.java\nindex d4807881ddd..b955590fbd1 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/SequenceApiServiceImpl.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/SequenceApiServiceImpl.java\n", "chunk": "@@ -38,12 +38,11 @@ import java.util.Map;\n public class SequenceApiServiceImpl implements SequenceApiService {\n \n     private static final Log log = LogFactory.getLog(SequenceApiServiceImpl.class);\n-    private final String SUPER_TENAT_DOMAIN = \"carbon.super\";\n \n     public Response sequenceGet(String apiName, String version , String tenantDomain, MessageContext messageContext) {\n         InMemoryAPIDeployer inMemoryApiDeployer = new InMemoryAPIDeployer();\n-        if (tenantDomain == null){\n-            tenantDomain =SUPER_TENAT_DOMAIN;\n+        if (tenantDomain == null) {\n+            tenantDomain = APIConstants.SUPER_TENANT_DOMAIN;\n         }\n \n         Map<String, String> apiAttributes = inMemoryApiDeployer.getGatewayAPIAttributes(apiName, version, tenantDomain);\n", "next_change": {"commit": "dad34d0a5c690fbbcdaf4446a005cf92e0a86393", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/SequenceApiServiceImpl.java b/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/SequenceApiServiceImpl.java\nindex b955590fbd1..1f32cc9b68d 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/SequenceApiServiceImpl.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/SequenceApiServiceImpl.java\n", "chunk": "@@ -44,12 +45,18 @@ public class SequenceApiServiceImpl implements SequenceApiService {\n         if (tenantDomain == null) {\n             tenantDomain = APIConstants.SUPER_TENANT_DOMAIN;\n         }\n-\n-        Map<String, String> apiAttributes = inMemoryApiDeployer.getGatewayAPIAttributes(apiName, version, tenantDomain);\n-        String apiId = apiAttributes.get(APIConstants.GatewayArtifactSynchronizer.API_ID);\n-        String label = apiAttributes.get(APIConstants.GatewayArtifactSynchronizer.LABEL);\n-\n-        GatewayAPIDTO gatewayAPIDTO = inMemoryApiDeployer.getAPIArtifact(apiId, label);\n+        GatewayAPIDTO gatewayAPIDTO = null;\n+        try {\n+            Map<String, String> apiAttributes = inMemoryApiDeployer.getGatewayAPIAttributes(apiName, version,\n+                    tenantDomain);\n+            String apiId = apiAttributes.get(APIConstants.GatewayArtifactSynchronizer.API_ID);\n+            String label = apiAttributes.get(APIConstants.GatewayArtifactSynchronizer.LABEL);\n+            gatewayAPIDTO = inMemoryApiDeployer.getAPIArtifact(apiId, label);\n+        } catch (ArtifactSynchronizerException e) {\n+            String errorMessage = \"Error in fetching artifacts from storage\";\n+            log.error(errorMessage, e);\n+            RestApiUtil.handleInternalServerError(errorMessage, e, log);\n+        }\n         JSONObject responseObj = new JSONObject();\n         if (gatewayAPIDTO != null) {\n             try {\n", "next_change": {"commit": "ed3e68de759e36aaf4363d6c26e26e55713241c6", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/SequenceApiServiceImpl.java b/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/SequenceApiServiceImpl.java\nindex 1f32cc9b68d..667bce10362 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/SequenceApiServiceImpl.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/SequenceApiServiceImpl.java\n", "chunk": "@@ -46,18 +47,27 @@ public class SequenceApiServiceImpl implements SequenceApiService {\n             tenantDomain = APIConstants.SUPER_TENANT_DOMAIN;\n         }\n         GatewayAPIDTO gatewayAPIDTO = null;\n+        JSONObject responseObj = new JSONObject();\n         try {\n             Map<String, String> apiAttributes = inMemoryApiDeployer.getGatewayAPIAttributes(apiName, version,\n                     tenantDomain);\n             String apiId = apiAttributes.get(APIConstants.GatewayArtifactSynchronizer.API_ID);\n             String label = apiAttributes.get(APIConstants.GatewayArtifactSynchronizer.LABEL);\n+\n+            if (label == null){\n+                return Response.status(Response.Status.BAD_REQUEST).entity(apiName + \" is not deployed in the Gateway\").build();\n+            }\n+\n             gatewayAPIDTO = inMemoryApiDeployer.getAPIArtifact(apiId, label);\n+            if (debugEnabled) {\n+                log.debug(\"Retrieved Artifacts for \" + apiName + \" from eventhub\");\n+            }\n         } catch (ArtifactSynchronizerException e) {\n             String errorMessage = \"Error in fetching artifacts from storage\";\n             log.error(errorMessage, e);\n             RestApiUtil.handleInternalServerError(errorMessage, e, log);\n         }\n-        JSONObject responseObj = new JSONObject();\n+\n         if (gatewayAPIDTO != null) {\n             try {\n                 JSONArray sequencesArray = new JSONArray();\n", "next_change": {"commit": "3fefb8a6b6ed713b63c0feb0e6b9b82a37312e2d", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/SequenceApiServiceImpl.java b/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/SequenceApiServiceImpl.java\nindex 667bce10362..0519e4d5912 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/SequenceApiServiceImpl.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/SequenceApiServiceImpl.java\n", "chunk": "@@ -72,11 +74,11 @@ public class SequenceApiServiceImpl implements SequenceApiService {\n             try {\n                 JSONArray sequencesArray = new JSONArray();\n                 JSONArray undeployedsequencesArray = new JSONArray();\n-                if (gatewayAPIDTO.getSequenceToBeAdd() != null ) {\n+                if (gatewayAPIDTO.getSequenceToBeAdd() != null) {\n                     SequenceAdminServiceProxy sequenceAdminServiceProxy =\n                             new SequenceAdminServiceProxy(gatewayAPIDTO.getTenantDomain());\n                     for (GatewayContentDTO sequence : gatewayAPIDTO.getSequenceToBeAdd()) {\n-                        if(sequenceAdminServiceProxy.isExistingSequence(sequence.getName())) {\n+                        if (sequenceAdminServiceProxy.isExistingSequence(sequence.getName())) {\n                             sequencesArray.put(sequenceAdminServiceProxy.getSequence(sequence.getName()));\n                         } else {\n                             log.error(sequence.getName() + \" was not deployed in the gateway\");\n", "next_change": {"commit": "f5fde6e8520d7fc4b09d5a4defd9834b16b2bb66", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/SequenceApiServiceImpl.java b/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/SequenceApiServiceImpl.java\nindex 0519e4d5912..957d60385d6 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/SequenceApiServiceImpl.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/SequenceApiServiceImpl.java\n", "chunk": "@@ -43,58 +45,22 @@ public class SequenceApiServiceImpl implements SequenceApiService {\n     private boolean debugEnabled = log.isDebugEnabled();\n \n     public Response sequenceGet(String apiName, String version, String tenantDomain, MessageContext messageContext) {\n+        tenantDomain = RestApiCommonUtil.getValidateTenantDomain(tenantDomain);\n \n-        InMemoryAPIDeployer inMemoryApiDeployer = new InMemoryAPIDeployer();\n-        if (tenantDomain == null) {\n-            tenantDomain = APIConstants.SUPER_TENANT_DOMAIN;\n-        }\n-        GatewayAPIDTO gatewayAPIDTO = null;\n-        JSONObject responseObj = new JSONObject();\n         try {\n-            Map<String, String> apiAttributes = inMemoryApiDeployer.getGatewayAPIAttributes(apiName, version,\n-                    tenantDomain);\n-            String apiId = apiAttributes.get(APIConstants.GatewayArtifactSynchronizer.API_ID);\n-            String label = apiAttributes.get(APIConstants.GatewayArtifactSynchronizer.LABEL);\n \n-            if (label == null) {\n-                return Response.status(Response.Status.BAD_REQUEST).entity(apiName + \" is not deployed in the Gateway\")\n-                        .build();\n-            }\n-            gatewayAPIDTO = inMemoryApiDeployer.getAPIArtifact(apiId, label);\n+            List<String> deployedSequences = GatewayUtils.retrieveDeployedSequences(apiName, version, tenantDomain);\n             if (debugEnabled) {\n                 log.debug(\"Retrieved Artifacts for \" + apiName + \" from eventhub\");\n             }\n-        } catch (ArtifactSynchronizerException e) {\n-            String errorMessage = \"Error in fetching artifacts from storage\";\n+            SequencesDTO sequencesDTO = new SequencesDTO();\n+            sequencesDTO.sequences(deployedSequences);\n+            return Response.ok().entity(sequencesDTO).build();\n+        } catch (AxisFault e) {\n+            String errorMessage = \"Error in fetching deployed artifacts from Synapse Configuration\";\n             log.error(errorMessage, e);\n             RestApiUtil.handleInternalServerError(errorMessage, e, log);\n         }\n-\n-        if (gatewayAPIDTO != null) {\n-            try {\n-                JSONArray sequencesArray = new JSONArray();\n-                JSONArray undeployedsequencesArray = new JSONArray();\n-                if (gatewayAPIDTO.getSequenceToBeAdd() != null) {\n-                    SequenceAdminServiceProxy sequenceAdminServiceProxy =\n-                            new SequenceAdminServiceProxy(gatewayAPIDTO.getTenantDomain());\n-                    for (GatewayContentDTO sequence : gatewayAPIDTO.getSequenceToBeAdd()) {\n-                        if (sequenceAdminServiceProxy.isExistingSequence(sequence.getName())) {\n-                            sequencesArray.put(sequenceAdminServiceProxy.getSequence(sequence.getName()));\n-                        } else {\n-                            log.error(sequence.getName() + \" was not deployed in the gateway\");\n-                            undeployedsequencesArray.put(sequence.getContent());\n-                        }\n-                    }\n-                }\n-            } catch (AxisFault e) {\n-                String errorMessage = \"Error in fetching deployed artifacts from Synapse Configuration\";\n-                log.error(errorMessage, e);\n-                RestApiUtil.handleInternalServerError(errorMessage, e, log);\n-            }\n-            String responseStringObj = String.valueOf(responseObj);\n-            return Response.ok().entity(responseStringObj).build();\n-        } else {\n-            return Response.serverError().entity(\"Unexpected error occurred\").build();\n-        }\n+        return Response.status(Response.Status.NOT_FOUND).build();\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk3MDU0MA==", "url": "https://github.com/wso2/carbon-apimgt/pull/9009#discussion_r457970540", "body": "Formatting error", "bodyText": "Formatting error", "bodyHTML": "<p dir=\"auto\">Formatting error</p>", "author": "1akshitha", "createdAt": "2020-07-21T09:42:32Z", "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/UndeployApiApiServiceImpl.java", "diffHunk": "@@ -20,16 +20,26 @@\n \n import org.json.JSONObject;\n import org.wso2.carbon.apimgt.gateway.InMemoryAPIDeployer;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n import org.wso2.carbon.apimgt.rest.api.gateway.v1.*;\n import org.apache.cxf.jaxrs.ext.MessageContext;\n \n import javax.ws.rs.core.Response;\n+import java.util.Map;\n \n public class UndeployApiApiServiceImpl implements UndeployApiApiService {\n+    private final String SUPER_TENAT_DOMAIN = \"carbon.super\";\n \n-    public Response undeployApiPost(String apiName, String label, String apiId, MessageContext messageContext) {\n+    public Response undeployApiPost(String apiName, String version , String tenantDomain,\n+            MessageContext messageContext) {\n \n         InMemoryAPIDeployer inMemoryApiDeployer = new InMemoryAPIDeployer();\n+        if (tenantDomain == null){\n+            tenantDomain =SUPER_TENAT_DOMAIN;", "originalCommit": "b8e275caf81bae89f75164ada7f214f14fe8f37e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk5MDk1NQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/9009#discussion_r457990955", "bodyText": "b99a273", "author": "Sarangan0219", "createdAt": "2020-07-21T10:18:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk3MDU0MA=="}], "type": "inlineReview", "revised_code": {"commit": "b99a273017722380eaa25c62f86587c522498b9a", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/UndeployApiApiServiceImpl.java b/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/UndeployApiApiServiceImpl.java\nindex 06980665297..8ddc635b243 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/UndeployApiApiServiceImpl.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/UndeployApiApiServiceImpl.java\n", "chunk": "@@ -28,14 +28,13 @@ import javax.ws.rs.core.Response;\n import java.util.Map;\n \n public class UndeployApiApiServiceImpl implements UndeployApiApiService {\n-    private final String SUPER_TENAT_DOMAIN = \"carbon.super\";\n \n     public Response undeployApiPost(String apiName, String version , String tenantDomain,\n             MessageContext messageContext) {\n \n         InMemoryAPIDeployer inMemoryApiDeployer = new InMemoryAPIDeployer();\n-        if (tenantDomain == null){\n-            tenantDomain =SUPER_TENAT_DOMAIN;\n+        if (tenantDomain == null) {\n+            tenantDomain = APIConstants.SUPER_TENANT_DOMAIN;\n         }\n         Map<String, String> apiAttributes = inMemoryApiDeployer.getGatewayAPIAttributes(apiName, version, tenantDomain);\n         String apiId = apiAttributes.get(APIConstants.GatewayArtifactSynchronizer.API_ID);\n", "next_change": {"commit": "dad34d0a5c690fbbcdaf4446a005cf92e0a86393", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/UndeployApiApiServiceImpl.java b/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/UndeployApiApiServiceImpl.java\nindex 8ddc635b243..3ed0b4a497b 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/UndeployApiApiServiceImpl.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/UndeployApiApiServiceImpl.java\n", "chunk": "@@ -36,11 +41,17 @@ public class UndeployApiApiServiceImpl implements UndeployApiApiService {\n         if (tenantDomain == null) {\n             tenantDomain = APIConstants.SUPER_TENANT_DOMAIN;\n         }\n-        Map<String, String> apiAttributes = inMemoryApiDeployer.getGatewayAPIAttributes(apiName, version, tenantDomain);\n-        String apiId = apiAttributes.get(APIConstants.GatewayArtifactSynchronizer.API_ID);\n-        String label = apiAttributes.get(APIConstants.GatewayArtifactSynchronizer.LABEL);\n-        boolean status = inMemoryApiDeployer.unDeployAPI(apiId, label);\n-\n+        boolean status = false;\n+        try {\n+            Map<String, String> apiAttributes = inMemoryApiDeployer.getGatewayAPIAttributes(apiName, version, tenantDomain);\n+            String apiId = apiAttributes.get(APIConstants.GatewayArtifactSynchronizer.API_ID);\n+            String label = apiAttributes.get(APIConstants.GatewayArtifactSynchronizer.LABEL);\n+            status = inMemoryApiDeployer.unDeployAPI(apiId, label);\n+        } catch (ArtifactSynchronizerException e) {\n+            String errorMessage = \"Error in fetching artifacts from storage\";\n+            log.error(errorMessage, e);\n+            RestApiUtil.handleInternalServerError(errorMessage, e, log);\n+        }\n         JSONObject responseObj = new JSONObject();\n         if (status) {\n             responseObj.put(\"Message\", \"Success\");\n", "next_change": {"commit": "e9ae44f6923017fe021caa8f14a9e08034111fd5", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/UndeployApiApiServiceImpl.java b/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/UndeployApiApiServiceImpl.java\nindex 3ed0b4a497b..32c6df2e185 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/UndeployApiApiServiceImpl.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/UndeployApiApiServiceImpl.java\n", "chunk": "@@ -54,6 +55,9 @@ public class UndeployApiApiServiceImpl implements UndeployApiApiService {\n         }\n         JSONObject responseObj = new JSONObject();\n         if (status) {\n+            if (debugEnabled) {\n+                log.debug(\"Successfully undeployed \" + apiName + \" in gateway\");\n+            }\n             responseObj.put(\"Message\", \"Success\");\n             String responseStringObj = String.valueOf(responseObj);\n             return Response.ok().entity(responseStringObj).build();\n", "next_change": {"commit": "ed3e68de759e36aaf4363d6c26e26e55713241c6", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/UndeployApiApiServiceImpl.java b/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/UndeployApiApiServiceImpl.java\nindex 32c6df2e185..8cef4a43786 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/UndeployApiApiServiceImpl.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/UndeployApiApiServiceImpl.java\n", "chunk": "@@ -47,24 +47,25 @@ public class UndeployApiApiServiceImpl implements UndeployApiApiService {\n             Map<String, String> apiAttributes = inMemoryApiDeployer.getGatewayAPIAttributes(apiName, version, tenantDomain);\n             String apiId = apiAttributes.get(APIConstants.GatewayArtifactSynchronizer.API_ID);\n             String label = apiAttributes.get(APIConstants.GatewayArtifactSynchronizer.LABEL);\n+\n+            if (label == null){\n+                return Response.status(Response.Status.BAD_REQUEST).entity(apiName + \" is not deployed in the Gateway\").build();\n+            }\n+\n             status = inMemoryApiDeployer.unDeployAPI(apiId, label);\n         } catch (ArtifactSynchronizerException e) {\n             String errorMessage = \"Error in fetching artifacts from storage\";\n             log.error(errorMessage, e);\n             RestApiUtil.handleInternalServerError(errorMessage, e, log);\n         }\n-        JSONObject responseObj = new JSONObject();\n+\n         if (status) {\n             if (debugEnabled) {\n                 log.debug(\"Successfully undeployed \" + apiName + \" in gateway\");\n             }\n-            responseObj.put(\"Message\", \"Success\");\n-            String responseStringObj = String.valueOf(responseObj);\n-            return Response.ok().entity(responseStringObj).build();\n+            return Response.ok().entity(apiName + \" Undeployed from the gateway\").build();\n         } else {\n-            responseObj.put(\"Message\", \"Error\");\n-            String responseStringObj = String.valueOf(responseObj);\n-            return Response.serverError().entity(responseStringObj).build();\n+            return Response.serverError().entity(\"Unexpected error occurred\").build();\n         }\n     }\n }\n", "next_change": {"commit": "f5fde6e8520d7fc4b09d5a4defd9834b16b2bb66", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/UndeployApiApiServiceImpl.java b/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/UndeployApiApiServiceImpl.java\nindex 8cef4a43786..920b17507f7 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/UndeployApiApiServiceImpl.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/UndeployApiApiServiceImpl.java\n", "chunk": "@@ -20,52 +20,39 @@ package org.wso2.carbon.apimgt.rest.api.gateway.v1.impl;\n \n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n-import org.json.JSONObject;\n import org.wso2.carbon.apimgt.gateway.InMemoryAPIDeployer;\n import org.wso2.carbon.apimgt.impl.APIConstants;\n import org.wso2.carbon.apimgt.impl.gatewayartifactsynchronizer.exception.ArtifactSynchronizerException;\n+import org.wso2.carbon.apimgt.rest.api.common.RestApiCommonUtil;\n import org.wso2.carbon.apimgt.rest.api.gateway.v1.*;\n import org.apache.cxf.jaxrs.ext.MessageContext;\n import org.wso2.carbon.apimgt.rest.api.util.utils.RestApiUtil;\n \n import javax.ws.rs.core.Response;\n+\n import java.util.Map;\n \n public class UndeployApiApiServiceImpl implements UndeployApiApiService {\n-    private static final Log log = LogFactory.getLog(UndeployApiApiServiceImpl .class);\n+\n+    private static final Log log = LogFactory.getLog(UndeployApiApiServiceImpl.class);\n     private boolean debugEnabled = log.isDebugEnabled();\n \n-    public Response undeployApiPost(String apiName, String version , String tenantDomain,\n-            MessageContext messageContext) {\n+    public Response undeployApiPost(String apiName, String version, String tenantDomain,\n+                                    MessageContext messageContext) {\n \n         InMemoryAPIDeployer inMemoryApiDeployer = new InMemoryAPIDeployer();\n-        if (tenantDomain == null) {\n-            tenantDomain = APIConstants.SUPER_TENANT_DOMAIN;\n-        }\n-        boolean status = false;\n+        tenantDomain = RestApiCommonUtil.getValidateTenantDomain(tenantDomain);\n         try {\n-            Map<String, String> apiAttributes = inMemoryApiDeployer.getGatewayAPIAttributes(apiName, version, tenantDomain);\n-            String apiId = apiAttributes.get(APIConstants.GatewayArtifactSynchronizer.API_ID);\n-            String label = apiAttributes.get(APIConstants.GatewayArtifactSynchronizer.LABEL);\n-\n-            if (label == null){\n-                return Response.status(Response.Status.BAD_REQUEST).entity(apiName + \" is not deployed in the Gateway\").build();\n+            inMemoryApiDeployer.unDeployAPI(apiName, version, tenantDomain);\n+            if (debugEnabled) {\n+                log.debug(\"Successfully undeployed \" + apiName + \" in gateway\");\n             }\n-\n-            status = inMemoryApiDeployer.unDeployAPI(apiId, label);\n+            return Response.ok().entity(apiName + \" Undeployed from the gateway\").build();\n         } catch (ArtifactSynchronizerException e) {\n             String errorMessage = \"Error in fetching artifacts from storage\";\n             log.error(errorMessage, e);\n             RestApiUtil.handleInternalServerError(errorMessage, e, log);\n         }\n-\n-        if (status) {\n-            if (debugEnabled) {\n-                log.debug(\"Successfully undeployed \" + apiName + \" in gateway\");\n-            }\n-            return Response.ok().entity(apiName + \" Undeployed from the gateway\").build();\n-        } else {\n-            return Response.serverError().entity(\"Unexpected error occurred\").build();\n-        }\n+        return null;\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}}, {"oid": "b99a273017722380eaa25c62f86587c522498b9a", "url": "https://github.com/wso2/carbon-apimgt/commit/b99a273017722380eaa25c62f86587c522498b9a", "message": "Address review comments", "committedDate": "2020-07-21T10:03:50Z", "type": "commit"}, {"oid": "d3466da657fc0fc8274dcdfe8475b28056613497", "url": "https://github.com/wso2/carbon-apimgt/commit/d3466da657fc0fc8274dcdfe8475b28056613497", "message": "delete files", "committedDate": "2020-07-21T10:05:20Z", "type": "commit"}, {"oid": "69f2a5260399f23aa6626125cc57998b6bb84e0f", "url": "https://github.com/wso2/carbon-apimgt/commit/69f2a5260399f23aa6626125cc57998b6bb84e0f", "message": "resolve merge conflicts", "committedDate": "2020-07-21T10:09:38Z", "type": "commit"}, {"oid": "edb9d74ddb388c1d677d111e1102e746bf43707e", "url": "https://github.com/wso2/carbon-apimgt/commit/edb9d74ddb388c1d677d111e1102e746bf43707e", "message": "Add files", "committedDate": "2020-07-21T10:14:27Z", "type": "commit"}, {"oid": "7bc5f9c2d7bdf813d244a41d3a8c078bde6e54c8", "url": "https://github.com/wso2/carbon-apimgt/commit/7bc5f9c2d7bdf813d244a41d3a8c078bde6e54c8", "message": "refractor code", "committedDate": "2020-07-21T10:33:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzMxMzQyMQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/9009#discussion_r497313421", "body": "Do we need extra lines?", "bodyText": "Do we need extra lines?", "bodyHTML": "<p dir=\"auto\">Do we need extra lines?</p>", "author": "Shehanir", "createdAt": "2020-09-30T07:56:35Z", "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/EndPointsApiServiceImpl.java", "diffHunk": "@@ -26,22 +26,33 @@\n import org.wso2.carbon.apimgt.api.gateway.GatewayContentDTO;\n import org.wso2.carbon.apimgt.gateway.InMemoryAPIDeployer;\n import org.wso2.carbon.apimgt.gateway.utils.EndpointAdminServiceProxy;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n import org.wso2.carbon.apimgt.rest.api.gateway.v1.*;\n import org.apache.cxf.jaxrs.ext.MessageContext;\n import org.wso2.carbon.apimgt.rest.api.util.utils.RestApiUtil;\n import org.wso2.carbon.endpoint.EndpointAdminException;\n \n import javax.ws.rs.core.Response;\n+import java.util.Map;\n \n public class EndPointsApiServiceImpl implements EndPointsApiService {\n \n     private static final Log log = LogFactory.getLog(EndPointsApiServiceImpl.class);\n \n-    public Response endPointsGet(String apiName, String label, String apiId, MessageContext messageContext) {\n+    public Response endPointsGet(String apiName, String version , String tenantDomain, MessageContext messageContext) {\n \n         InMemoryAPIDeployer inMemoryApiDeployer = new InMemoryAPIDeployer();\n+        if (tenantDomain == null) {\n+            tenantDomain = APIConstants.SUPER_TENANT_DOMAIN;\n+        }\n+\n+        Map<String, String> apiAttributes = inMemoryApiDeployer.getGatewayAPIAttributes(apiName, version, tenantDomain);\n+        String apiId = apiAttributes.get(APIConstants.GatewayArtifactSynchronizer.API_ID);\n+        String label = apiAttributes.get(APIConstants.GatewayArtifactSynchronizer.LABEL);\n+\n         GatewayAPIDTO gatewayAPIDTO = inMemoryApiDeployer.getAPIArtifact(apiId, label);\n         JSONObject responseObj = new JSONObject();\n+", "originalCommit": "7bc5f9c2d7bdf813d244a41d3a8c078bde6e54c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjA5MDI4Ng==", "url": "https://github.com/wso2/carbon-apimgt/pull/9009#discussion_r552090286", "bodyText": "Removed in the Latest Version", "author": "Sarangan0219", "createdAt": "2021-01-05T17:44:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzMxMzQyMQ=="}], "type": "inlineReview", "revised_code": {"commit": "dad34d0a5c690fbbcdaf4446a005cf92e0a86393", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/EndPointsApiServiceImpl.java b/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/EndPointsApiServiceImpl.java\nindex 2200b8467aa..b3621bcb5da 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/EndPointsApiServiceImpl.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/EndPointsApiServiceImpl.java\n", "chunk": "@@ -45,12 +46,19 @@ public class EndPointsApiServiceImpl implements EndPointsApiService {\n         if (tenantDomain == null) {\n             tenantDomain = APIConstants.SUPER_TENANT_DOMAIN;\n         }\n+        GatewayAPIDTO gatewayAPIDTO = null;\n+        try {\n+            Map<String, String> apiAttributes = inMemoryApiDeployer.getGatewayAPIAttributes(apiName, version,\n+                    tenantDomain);\n+            String apiId = apiAttributes.get(APIConstants.GatewayArtifactSynchronizer.API_ID);\n+            String label = apiAttributes.get(APIConstants.GatewayArtifactSynchronizer.LABEL);\n+            gatewayAPIDTO = inMemoryApiDeployer.getAPIArtifact(apiId, label);\n+        } catch (ArtifactSynchronizerException e) {\n+            String errorMessage = \"Error in fetching artifacts from storage\";\n+            log.error(errorMessage, e);\n+            RestApiUtil.handleInternalServerError(errorMessage, e, log);\n+        }\n \n-        Map<String, String> apiAttributes = inMemoryApiDeployer.getGatewayAPIAttributes(apiName, version, tenantDomain);\n-        String apiId = apiAttributes.get(APIConstants.GatewayArtifactSynchronizer.API_ID);\n-        String label = apiAttributes.get(APIConstants.GatewayArtifactSynchronizer.LABEL);\n-\n-        GatewayAPIDTO gatewayAPIDTO = inMemoryApiDeployer.getAPIArtifact(apiId, label);\n         JSONObject responseObj = new JSONObject();\n \n         if (gatewayAPIDTO != null) {\n", "next_change": {"commit": "ed3e68de759e36aaf4363d6c26e26e55713241c6", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/EndPointsApiServiceImpl.java b/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/EndPointsApiServiceImpl.java\nindex b3621bcb5da..79bf59ed885 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/EndPointsApiServiceImpl.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/EndPointsApiServiceImpl.java\n", "chunk": "@@ -47,20 +48,27 @@ public class EndPointsApiServiceImpl implements EndPointsApiService {\n             tenantDomain = APIConstants.SUPER_TENANT_DOMAIN;\n         }\n         GatewayAPIDTO gatewayAPIDTO = null;\n+        JSONObject responseObj = new JSONObject();\n         try {\n             Map<String, String> apiAttributes = inMemoryApiDeployer.getGatewayAPIAttributes(apiName, version,\n                     tenantDomain);\n             String apiId = apiAttributes.get(APIConstants.GatewayArtifactSynchronizer.API_ID);\n             String label = apiAttributes.get(APIConstants.GatewayArtifactSynchronizer.LABEL);\n+\n+            if (label == null){\n+                return Response.status(Response.Status.BAD_REQUEST).entity(apiName + \" is not deployed in the Gateway\").build();\n+            }\n+\n             gatewayAPIDTO = inMemoryApiDeployer.getAPIArtifact(apiId, label);\n+            if (debugEnabled) {\n+                log.debug(\"Retrieved Artifacts for \" + apiName + \" from eventhub\");\n+            }\n         } catch (ArtifactSynchronizerException e) {\n             String errorMessage = \"Error in fetching artifacts from storage\";\n             log.error(errorMessage, e);\n             RestApiUtil.handleInternalServerError(errorMessage, e, log);\n         }\n \n-        JSONObject responseObj = new JSONObject();\n-\n         if (gatewayAPIDTO != null) {\n             try {\n                 JSONArray endPointArray = new JSONArray();\n", "next_change": {"commit": "f5fde6e8520d7fc4b09d5a4defd9834b16b2bb66", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/EndPointsApiServiceImpl.java b/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/EndPointsApiServiceImpl.java\nindex 79bf59ed885..2910de3012b 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/EndPointsApiServiceImpl.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/EndPointsApiServiceImpl.java\n", "chunk": "@@ -41,61 +48,24 @@ public class EndPointsApiServiceImpl implements EndPointsApiService {\n     private static final Log log = LogFactory.getLog(EndPointsApiServiceImpl.class);\n     private boolean debugEnabled = log.isDebugEnabled();\n \n-    public Response endPointsGet(String apiName, String version , String tenantDomain, MessageContext messageContext) {\n+    public Response endPointsGet(String apiName, String version, String tenantDomain, MessageContext messageContext) {\n+        tenantDomain = RestApiCommonUtil.getValidateTenantDomain(tenantDomain);\n \n-        InMemoryAPIDeployer inMemoryApiDeployer = new InMemoryAPIDeployer();\n-        if (tenantDomain == null) {\n-            tenantDomain = APIConstants.SUPER_TENANT_DOMAIN;\n-        }\n-        GatewayAPIDTO gatewayAPIDTO = null;\n-        JSONObject responseObj = new JSONObject();\n         try {\n-            Map<String, String> apiAttributes = inMemoryApiDeployer.getGatewayAPIAttributes(apiName, version,\n-                    tenantDomain);\n-            String apiId = apiAttributes.get(APIConstants.GatewayArtifactSynchronizer.API_ID);\n-            String label = apiAttributes.get(APIConstants.GatewayArtifactSynchronizer.LABEL);\n-\n-            if (label == null){\n-                return Response.status(Response.Status.BAD_REQUEST).entity(apiName + \" is not deployed in the Gateway\").build();\n-            }\n \n-            gatewayAPIDTO = inMemoryApiDeployer.getAPIArtifact(apiId, label);\n+            List<String> deployedLocalEntries = GatewayUtils.retrieveDeployedEndpoints(apiName, version,\n+                    tenantDomain);\n             if (debugEnabled) {\n                 log.debug(\"Retrieved Artifacts for \" + apiName + \" from eventhub\");\n             }\n-        } catch (ArtifactSynchronizerException e) {\n-            String errorMessage = \"Error in fetching artifacts from storage\";\n+            EndpointsDTO endpointsDTO = new EndpointsDTO();\n+            endpointsDTO.endpoints(deployedLocalEntries);\n+            return Response.ok().entity(endpointsDTO).build();\n+        } catch (AxisFault e) {\n+            String errorMessage = \"Error in fetching deployed artifacts from Synapse Configuration\";\n             log.error(errorMessage, e);\n             RestApiUtil.handleInternalServerError(errorMessage, e, log);\n         }\n-\n-        if (gatewayAPIDTO != null) {\n-            try {\n-                JSONArray endPointArray = new JSONArray();\n-                JSONArray unDeployedEndPointArray = new JSONArray();\n-                if (gatewayAPIDTO.getEndpointEntriesToBeAdd() != null) {\n-                    EndpointAdminServiceProxy endpointAdminServiceProxy = new EndpointAdminServiceProxy\n-                            (gatewayAPIDTO.getTenantDomain());\n-                    for (GatewayContentDTO gatewayEndpoint : gatewayAPIDTO.getEndpointEntriesToBeAdd()) {\n-                        if (endpointAdminServiceProxy.isEndpointExist(gatewayEndpoint.getName())) {\n-                            endPointArray.put(endpointAdminServiceProxy.getEndpoints(gatewayEndpoint.getName()));\n-                        } else {\n-                            log.error(gatewayEndpoint.getName() + \" was not deployed in the gateway\");\n-                            unDeployedEndPointArray.put(gatewayEndpoint.getContent());\n-                        }\n-                    }\n-                }\n-                responseObj.put(\"Deployed Endpoints\", endPointArray);\n-                responseObj.put(\"UnDeployed Endpoints\", unDeployedEndPointArray);\n-            } catch (EndpointAdminException e) {\n-                String errorMessage = \"Error in fetching deployed Endpoints from Synapse Configuration\";\n-                log.error(errorMessage, e);\n-                RestApiUtil.handleInternalServerError(errorMessage, e, log);\n-            }\n-            String responseStringObj = String.valueOf(responseObj);\n-            return Response.ok().entity(responseStringObj).build();\n-        } else {\n-            return Response.serverError().entity(\"Unexpected error occurred\").build();\n-        }\n+        return Response.status(Response.Status.NOT_FOUND).build();\n     }\n }\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQxMTEwOQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/9009#discussion_r497411109", "body": "Shall we add license headers?", "bodyText": "Shall we add license headers?", "bodyHTML": "<p dir=\"auto\">Shall we add license headers?</p>", "author": "renuka-fernando", "createdAt": "2020-09-30T10:39:07Z", "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/RedeployApiApiServiceImpl.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package org.wso2.carbon.apimgt.rest.api.gateway.v1.impl;", "originalCommit": "7bc5f9c2d7bdf813d244a41d3a8c078bde6e54c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjA5MTAzMg==", "url": "https://github.com/wso2/carbon-apimgt/pull/9009#discussion_r552091032", "bodyText": "dfbd644", "author": "Sarangan0219", "createdAt": "2021-01-05T17:46:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQxMTEwOQ=="}], "type": "inlineReview", "revised_code": {"commit": "dad34d0a5c690fbbcdaf4446a005cf92e0a86393", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/RedeployApiApiServiceImpl.java b/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/RedeployApiApiServiceImpl.java\nindex 2344507f3a4..c74612c9a0f 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/RedeployApiApiServiceImpl.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/RedeployApiApiServiceImpl.java\n", "chunk": "@@ -1,8 +1,11 @@\n package org.wso2.carbon.apimgt.rest.api.gateway.v1.impl;\n \n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n import org.json.JSONObject;\n import org.wso2.carbon.apimgt.gateway.InMemoryAPIDeployer;\n import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.impl.gatewayartifactsynchronizer.exception.ArtifactSynchronizerException;\n import org.wso2.carbon.apimgt.rest.api.gateway.v1.*;\n import org.wso2.carbon.apimgt.rest.api.gateway.v1.dto.*;\n \n", "next_change": {"commit": "3fefb8a6b6ed713b63c0feb0e6b9b82a37312e2d", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/RedeployApiApiServiceImpl.java b/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/RedeployApiApiServiceImpl.java\nindex c74612c9a0f..573045058f0 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/RedeployApiApiServiceImpl.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/RedeployApiApiServiceImpl.java\n", "chunk": "@@ -2,35 +2,24 @@ package org.wso2.carbon.apimgt.rest.api.gateway.v1.impl;\n \n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n-import org.json.JSONObject;\n+import org.apache.cxf.jaxrs.ext.MessageContext;\n import org.wso2.carbon.apimgt.gateway.InMemoryAPIDeployer;\n import org.wso2.carbon.apimgt.impl.APIConstants;\n import org.wso2.carbon.apimgt.impl.gatewayartifactsynchronizer.exception.ArtifactSynchronizerException;\n-import org.wso2.carbon.apimgt.rest.api.gateway.v1.*;\n-import org.wso2.carbon.apimgt.rest.api.gateway.v1.dto.*;\n-\n-import org.apache.cxf.jaxrs.ext.multipart.Attachment;\n-import org.apache.cxf.jaxrs.ext.MessageContext;\n-\n-import org.wso2.carbon.apimgt.rest.api.gateway.v1.dto.DeployResponseDTO;\n-import org.wso2.carbon.apimgt.rest.api.gateway.v1.dto.ErrorDTO;\n+import org.wso2.carbon.apimgt.rest.api.gateway.v1.RedeployApiApiService;\n import org.wso2.carbon.apimgt.rest.api.util.utils.RestApiUtil;\n \n-import java.util.List;\n-\n-import java.io.InputStream;\n import java.util.Map;\n \n import javax.ws.rs.core.Response;\n-import javax.ws.rs.core.SecurityContext;\n-\n \n public class RedeployApiApiServiceImpl implements RedeployApiApiService {\n \n-    private static final Log log = LogFactory.getLog(RedeployApiApiServiceImpl .class);\n+    private static final Log log = LogFactory.getLog(RedeployApiApiServiceImpl.class);\n+    private boolean debugEnabled = log.isDebugEnabled();\n \n-    public Response redeployApiPost(String apiName, String version , String tenantDomain,\n-            MessageContext messageContext) {\n+    public Response redeployApiPost(String apiName, String version, String tenantDomain,\n+                                    MessageContext messageContext) {\n \n         InMemoryAPIDeployer inMemoryApiDeployer = new InMemoryAPIDeployer();\n         if (tenantDomain == null) {\n", "next_change": {"commit": "f5fde6e8520d7fc4b09d5a4defd9834b16b2bb66", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/RedeployApiApiServiceImpl.java b/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/RedeployApiApiServiceImpl.java\nindex 573045058f0..e120690f824 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/RedeployApiApiServiceImpl.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/RedeployApiApiServiceImpl.java\n", "chunk": "@@ -20,36 +36,20 @@ public class RedeployApiApiServiceImpl implements RedeployApiApiService {\n \n     public Response redeployApiPost(String apiName, String version, String tenantDomain,\n                                     MessageContext messageContext) {\n-\n+        tenantDomain = RestApiCommonUtil.getValidateTenantDomain(tenantDomain);\n         InMemoryAPIDeployer inMemoryApiDeployer = new InMemoryAPIDeployer();\n-        if (tenantDomain == null) {\n-            tenantDomain = APIConstants.SUPER_TENANT_DOMAIN;\n-        }\n         boolean status = false;\n         try {\n-            Map<String, String> apiAttributes =\n-                    inMemoryApiDeployer.getGatewayAPIAttributes(apiName, version, tenantDomain);\n-            String apiId = apiAttributes.get(APIConstants.GatewayArtifactSynchronizer.API_ID);\n-            String label = apiAttributes.get(APIConstants.GatewayArtifactSynchronizer.LABEL);\n-\n-            if (label == null) {\n-                return Response.status(Response.Status.BAD_REQUEST).entity(apiName + \" is not deployed in the Gateway\")\n-                        .build();\n+            inMemoryApiDeployer.reDeployAPI(apiName, version, tenantDomain);\n+            if (debugEnabled) {\n+                log.debug(\"Successfully deployed \" + apiName + \" in gateway\");\n             }\n-            status = inMemoryApiDeployer.deployAPI(apiId, label);\n+            return Response.ok().entity(apiName + \" redeployed successfully in the Gateway\").build();\n         } catch (ArtifactSynchronizerException e) {\n             String errorMessage = \"Error in fetching artifacts from storage\";\n             log.error(errorMessage, e);\n             RestApiUtil.handleInternalServerError(errorMessage, e, log);\n         }\n-\n-        if (status) {\n-            if (debugEnabled) {\n-                log.debug(\"Successfully deployed \" + apiName + \" in gateway\");\n-            }\n-            return Response.ok().entity(apiName + \" redeployed successfully in the Gateway\").build();\n-        } else {\n-            return Response.serverError().entity(\"Unexpected error occurred\").build();\n-        }\n+        return null;\n     }\n }\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc0NjEwMw==", "url": "https://github.com/wso2/carbon-apimgt/pull/9009#discussion_r551746103", "body": "Please remove the unnecessary new lines.", "bodyText": "Please remove the unnecessary new lines.", "bodyHTML": "<p dir=\"auto\">Please remove the unnecessary new lines.</p>", "author": "chamindias", "createdAt": "2021-01-05T06:49:40Z", "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/RedeployApiApiServiceImpl.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package org.wso2.carbon.apimgt.rest.api.gateway.v1.impl;\n+\n+import org.json.JSONObject;\n+import org.wso2.carbon.apimgt.gateway.InMemoryAPIDeployer;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.rest.api.gateway.v1.*;\n+import org.wso2.carbon.apimgt.rest.api.gateway.v1.dto.*;\n+\n+import org.apache.cxf.jaxrs.ext.multipart.Attachment;\n+import org.apache.cxf.jaxrs.ext.MessageContext;\n+\n+import org.wso2.carbon.apimgt.rest.api.gateway.v1.dto.DeployResponseDTO;\n+import org.wso2.carbon.apimgt.rest.api.gateway.v1.dto.ErrorDTO;\n+\n+import java.util.List;\n+\n+import java.io.InputStream;\n+import java.util.Map;\n+\n+import javax.ws.rs.core.Response;\n+import javax.ws.rs.core.SecurityContext;\n+\n+", "originalCommit": "7bc5f9c2d7bdf813d244a41d3a8c078bde6e54c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjA5MTAxMA==", "url": "https://github.com/wso2/carbon-apimgt/pull/9009#discussion_r552091010", "bodyText": "dfbd644", "author": "Sarangan0219", "createdAt": "2021-01-05T17:46:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc0NjEwMw=="}], "type": "inlineReview", "revised_code": {"commit": "dad34d0a5c690fbbcdaf4446a005cf92e0a86393", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/RedeployApiApiServiceImpl.java b/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/RedeployApiApiServiceImpl.java\nindex 2344507f3a4..c74612c9a0f 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/RedeployApiApiServiceImpl.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/RedeployApiApiServiceImpl.java\n", "chunk": "@@ -23,6 +27,8 @@ import javax.ws.rs.core.SecurityContext;\n \n public class RedeployApiApiServiceImpl implements RedeployApiApiService {\n \n+    private static final Log log = LogFactory.getLog(RedeployApiApiServiceImpl .class);\n+\n     public Response redeployApiPost(String apiName, String version , String tenantDomain,\n             MessageContext messageContext) {\n \n", "next_change": {"commit": "e9ae44f6923017fe021caa8f14a9e08034111fd5", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/RedeployApiApiServiceImpl.java b/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/RedeployApiApiServiceImpl.java\nindex c74612c9a0f..3ebb0e8a593 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/RedeployApiApiServiceImpl.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/RedeployApiApiServiceImpl.java\n", "chunk": "@@ -28,6 +28,7 @@ import javax.ws.rs.core.SecurityContext;\n public class RedeployApiApiServiceImpl implements RedeployApiApiService {\n \n     private static final Log log = LogFactory.getLog(RedeployApiApiServiceImpl .class);\n+    private boolean debugEnabled = log.isDebugEnabled();\n \n     public Response redeployApiPost(String apiName, String version , String tenantDomain,\n             MessageContext messageContext) {\n", "next_change": {"commit": "3fefb8a6b6ed713b63c0feb0e6b9b82a37312e2d", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/RedeployApiApiServiceImpl.java b/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/RedeployApiApiServiceImpl.java\nindex 3ebb0e8a593..573045058f0 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/RedeployApiApiServiceImpl.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/RedeployApiApiServiceImpl.java\n", "chunk": "@@ -2,36 +2,24 @@ package org.wso2.carbon.apimgt.rest.api.gateway.v1.impl;\n \n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n-import org.json.JSONObject;\n+import org.apache.cxf.jaxrs.ext.MessageContext;\n import org.wso2.carbon.apimgt.gateway.InMemoryAPIDeployer;\n import org.wso2.carbon.apimgt.impl.APIConstants;\n import org.wso2.carbon.apimgt.impl.gatewayartifactsynchronizer.exception.ArtifactSynchronizerException;\n-import org.wso2.carbon.apimgt.rest.api.gateway.v1.*;\n-import org.wso2.carbon.apimgt.rest.api.gateway.v1.dto.*;\n-\n-import org.apache.cxf.jaxrs.ext.multipart.Attachment;\n-import org.apache.cxf.jaxrs.ext.MessageContext;\n-\n-import org.wso2.carbon.apimgt.rest.api.gateway.v1.dto.DeployResponseDTO;\n-import org.wso2.carbon.apimgt.rest.api.gateway.v1.dto.ErrorDTO;\n+import org.wso2.carbon.apimgt.rest.api.gateway.v1.RedeployApiApiService;\n import org.wso2.carbon.apimgt.rest.api.util.utils.RestApiUtil;\n \n-import java.util.List;\n-\n-import java.io.InputStream;\n import java.util.Map;\n \n import javax.ws.rs.core.Response;\n-import javax.ws.rs.core.SecurityContext;\n-\n \n public class RedeployApiApiServiceImpl implements RedeployApiApiService {\n \n-    private static final Log log = LogFactory.getLog(RedeployApiApiServiceImpl .class);\n+    private static final Log log = LogFactory.getLog(RedeployApiApiServiceImpl.class);\n     private boolean debugEnabled = log.isDebugEnabled();\n \n-    public Response redeployApiPost(String apiName, String version , String tenantDomain,\n-            MessageContext messageContext) {\n+    public Response redeployApiPost(String apiName, String version, String tenantDomain,\n+                                    MessageContext messageContext) {\n \n         InMemoryAPIDeployer inMemoryApiDeployer = new InMemoryAPIDeployer();\n         if (tenantDomain == null) {\n", "next_change": {"commit": "f5fde6e8520d7fc4b09d5a4defd9834b16b2bb66", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/RedeployApiApiServiceImpl.java b/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/RedeployApiApiServiceImpl.java\nindex 573045058f0..e120690f824 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/RedeployApiApiServiceImpl.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/RedeployApiApiServiceImpl.java\n", "chunk": "@@ -20,36 +36,20 @@ public class RedeployApiApiServiceImpl implements RedeployApiApiService {\n \n     public Response redeployApiPost(String apiName, String version, String tenantDomain,\n                                     MessageContext messageContext) {\n-\n+        tenantDomain = RestApiCommonUtil.getValidateTenantDomain(tenantDomain);\n         InMemoryAPIDeployer inMemoryApiDeployer = new InMemoryAPIDeployer();\n-        if (tenantDomain == null) {\n-            tenantDomain = APIConstants.SUPER_TENANT_DOMAIN;\n-        }\n         boolean status = false;\n         try {\n-            Map<String, String> apiAttributes =\n-                    inMemoryApiDeployer.getGatewayAPIAttributes(apiName, version, tenantDomain);\n-            String apiId = apiAttributes.get(APIConstants.GatewayArtifactSynchronizer.API_ID);\n-            String label = apiAttributes.get(APIConstants.GatewayArtifactSynchronizer.LABEL);\n-\n-            if (label == null) {\n-                return Response.status(Response.Status.BAD_REQUEST).entity(apiName + \" is not deployed in the Gateway\")\n-                        .build();\n+            inMemoryApiDeployer.reDeployAPI(apiName, version, tenantDomain);\n+            if (debugEnabled) {\n+                log.debug(\"Successfully deployed \" + apiName + \" in gateway\");\n             }\n-            status = inMemoryApiDeployer.deployAPI(apiId, label);\n+            return Response.ok().entity(apiName + \" redeployed successfully in the Gateway\").build();\n         } catch (ArtifactSynchronizerException e) {\n             String errorMessage = \"Error in fetching artifacts from storage\";\n             log.error(errorMessage, e);\n             RestApiUtil.handleInternalServerError(errorMessage, e, log);\n         }\n-\n-        if (status) {\n-            if (debugEnabled) {\n-                log.debug(\"Successfully deployed \" + apiName + \" in gateway\");\n-            }\n-            return Response.ok().entity(apiName + \" redeployed successfully in the Gateway\").build();\n-        } else {\n-            return Response.serverError().entity(\"Unexpected error occurred\").build();\n-        }\n+        return null;\n     }\n }\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc0NjMzMw==", "url": "https://github.com/wso2/carbon-apimgt/pull/9009#discussion_r551746333", "body": "Can't we use a constant here?", "bodyText": "Can't we use a constant here?", "bodyHTML": "<p dir=\"auto\">Can't we use a constant here?</p>", "author": "chamindias", "createdAt": "2021-01-05T06:50:21Z", "path": "components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/RedeployApiApiServiceImpl.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package org.wso2.carbon.apimgt.rest.api.gateway.v1.impl;\n+\n+import org.json.JSONObject;\n+import org.wso2.carbon.apimgt.gateway.InMemoryAPIDeployer;\n+import org.wso2.carbon.apimgt.impl.APIConstants;\n+import org.wso2.carbon.apimgt.rest.api.gateway.v1.*;\n+import org.wso2.carbon.apimgt.rest.api.gateway.v1.dto.*;\n+\n+import org.apache.cxf.jaxrs.ext.multipart.Attachment;\n+import org.apache.cxf.jaxrs.ext.MessageContext;\n+\n+import org.wso2.carbon.apimgt.rest.api.gateway.v1.dto.DeployResponseDTO;\n+import org.wso2.carbon.apimgt.rest.api.gateway.v1.dto.ErrorDTO;\n+\n+import java.util.List;\n+\n+import java.io.InputStream;\n+import java.util.Map;\n+\n+import javax.ws.rs.core.Response;\n+import javax.ws.rs.core.SecurityContext;\n+\n+\n+public class RedeployApiApiServiceImpl implements RedeployApiApiService {\n+\n+    public Response redeployApiPost(String apiName, String version , String tenantDomain,\n+            MessageContext messageContext) {\n+\n+        InMemoryAPIDeployer inMemoryApiDeployer = new InMemoryAPIDeployer();\n+        if (tenantDomain == null) {\n+            tenantDomain = APIConstants.SUPER_TENANT_DOMAIN;\n+        }\n+        Map<String, String> apiAttributes = inMemoryApiDeployer.getGatewayAPIAttributes(apiName, version, tenantDomain);\n+        String apiId = apiAttributes.get(APIConstants.GatewayArtifactSynchronizer.API_ID);\n+        String label = apiAttributes.get(APIConstants.GatewayArtifactSynchronizer.LABEL);\n+        boolean status = inMemoryApiDeployer.deployAPI(apiId, label);\n+\n+        JSONObject responseObj = new JSONObject();\n+        if (status) {\n+            responseObj.put(\"Message\", \"Success\");", "originalCommit": "7bc5f9c2d7bdf813d244a41d3a8c078bde6e54c8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjA5MDA0NQ==", "url": "https://github.com/wso2/carbon-apimgt/pull/9009#discussion_r552090045", "bodyText": "Response Changed to apiName + \" redeployed successfully in the Gateway\" in the latest version", "author": "Sarangan0219", "createdAt": "2021-01-05T17:44:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc0NjMzMw=="}], "type": "inlineReview", "revised_code": {"commit": "dad34d0a5c690fbbcdaf4446a005cf92e0a86393", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/RedeployApiApiServiceImpl.java b/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/RedeployApiApiServiceImpl.java\nindex 2344507f3a4..c74612c9a0f 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/RedeployApiApiServiceImpl.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/RedeployApiApiServiceImpl.java\n", "chunk": "@@ -30,10 +36,18 @@ public class RedeployApiApiServiceImpl implements RedeployApiApiService {\n         if (tenantDomain == null) {\n             tenantDomain = APIConstants.SUPER_TENANT_DOMAIN;\n         }\n-        Map<String, String> apiAttributes = inMemoryApiDeployer.getGatewayAPIAttributes(apiName, version, tenantDomain);\n-        String apiId = apiAttributes.get(APIConstants.GatewayArtifactSynchronizer.API_ID);\n-        String label = apiAttributes.get(APIConstants.GatewayArtifactSynchronizer.LABEL);\n-        boolean status = inMemoryApiDeployer.deployAPI(apiId, label);\n+        boolean status = false;\n+        try {\n+            Map<String, String> apiAttributes = inMemoryApiDeployer.getGatewayAPIAttributes(apiName, version, tenantDomain);\n+            String apiId = apiAttributes.get(APIConstants.GatewayArtifactSynchronizer.API_ID);\n+            String label = apiAttributes.get(APIConstants.GatewayArtifactSynchronizer.LABEL);\n+            status = inMemoryApiDeployer.deployAPI(apiId, label);\n+\n+        } catch (ArtifactSynchronizerException e) {\n+            String errorMessage = \"Error in fetching artifacts from storage\";\n+            log.error(errorMessage, e);\n+            RestApiUtil.handleInternalServerError(errorMessage, e, log);\n+        }\n \n         JSONObject responseObj = new JSONObject();\n         if (status) {\n", "next_change": {"commit": "e9ae44f6923017fe021caa8f14a9e08034111fd5", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/RedeployApiApiServiceImpl.java b/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/RedeployApiApiServiceImpl.java\nindex c74612c9a0f..3ebb0e8a593 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/RedeployApiApiServiceImpl.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/RedeployApiApiServiceImpl.java\n", "chunk": "@@ -51,6 +51,9 @@ public class RedeployApiApiServiceImpl implements RedeployApiApiService {\n \n         JSONObject responseObj = new JSONObject();\n         if (status) {\n+            if (debugEnabled) {\n+                log.debug(\"Successfully deployed \" + apiName + \" in gateway\");\n+            }\n             responseObj.put(\"Message\", \"Success\");\n             String responseStringObj = String.valueOf(responseObj);\n             return Response.ok().entity(responseStringObj).build();\n", "next_change": {"commit": "ed3e68de759e36aaf4363d6c26e26e55713241c6", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/RedeployApiApiServiceImpl.java b/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/RedeployApiApiServiceImpl.java\nindex 3ebb0e8a593..44ffff50ea6 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/RedeployApiApiServiceImpl.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/RedeployApiApiServiceImpl.java\n", "chunk": "@@ -49,18 +54,14 @@ public class RedeployApiApiServiceImpl implements RedeployApiApiService {\n             RestApiUtil.handleInternalServerError(errorMessage, e, log);\n         }\n \n-        JSONObject responseObj = new JSONObject();\n+\n         if (status) {\n             if (debugEnabled) {\n                 log.debug(\"Successfully deployed \" + apiName + \" in gateway\");\n             }\n-            responseObj.put(\"Message\", \"Success\");\n-            String responseStringObj = String.valueOf(responseObj);\n-            return Response.ok().entity(responseStringObj).build();\n+            return Response.ok().entity(apiName + \" redeployed successfully in the Gateway\").build();\n         } else {\n-            responseObj.put(\"Message\", \"Error\");\n-            String responseStringObj = String.valueOf(responseObj);\n-            return Response.serverError().entity(responseStringObj).build();\n+            return Response.serverError().entity(\"Unexpected error occurred\").build();\n         }\n     }\n }\n", "next_change": {"commit": "f5fde6e8520d7fc4b09d5a4defd9834b16b2bb66", "changed_code": [{"header": "diff --git a/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/RedeployApiApiServiceImpl.java b/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/RedeployApiApiServiceImpl.java\nindex 44ffff50ea6..e120690f824 100644\n--- a/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/RedeployApiApiServiceImpl.java\n+++ b/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/java/org/wso2/carbon/apimgt/rest/api/gateway/v1/impl/RedeployApiApiServiceImpl.java\n", "chunk": "@@ -1,67 +1,55 @@\n+/*\n+ *  Copyright (c) 2021, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n package org.wso2.carbon.apimgt.rest.api.gateway.v1.impl;\n \n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n-import org.json.JSONObject;\n+import org.apache.cxf.jaxrs.ext.MessageContext;\n import org.wso2.carbon.apimgt.gateway.InMemoryAPIDeployer;\n import org.wso2.carbon.apimgt.impl.APIConstants;\n import org.wso2.carbon.apimgt.impl.gatewayartifactsynchronizer.exception.ArtifactSynchronizerException;\n-import org.wso2.carbon.apimgt.rest.api.gateway.v1.*;\n-import org.wso2.carbon.apimgt.rest.api.gateway.v1.dto.*;\n-\n-import org.apache.cxf.jaxrs.ext.multipart.Attachment;\n-import org.apache.cxf.jaxrs.ext.MessageContext;\n-\n-import org.wso2.carbon.apimgt.rest.api.gateway.v1.dto.DeployResponseDTO;\n-import org.wso2.carbon.apimgt.rest.api.gateway.v1.dto.ErrorDTO;\n+import org.wso2.carbon.apimgt.rest.api.common.RestApiCommonUtil;\n+import org.wso2.carbon.apimgt.rest.api.gateway.v1.RedeployApiApiService;\n import org.wso2.carbon.apimgt.rest.api.util.utils.RestApiUtil;\n-\n-import java.util.List;\n-\n-import java.io.InputStream;\n import java.util.Map;\n-\n import javax.ws.rs.core.Response;\n-import javax.ws.rs.core.SecurityContext;\n-\n \n public class RedeployApiApiServiceImpl implements RedeployApiApiService {\n \n-    private static final Log log = LogFactory.getLog(RedeployApiApiServiceImpl .class);\n+    private static final Log log = LogFactory.getLog(RedeployApiApiServiceImpl.class);\n     private boolean debugEnabled = log.isDebugEnabled();\n \n-    public Response redeployApiPost(String apiName, String version , String tenantDomain,\n-            MessageContext messageContext) {\n-\n+    public Response redeployApiPost(String apiName, String version, String tenantDomain,\n+                                    MessageContext messageContext) {\n+        tenantDomain = RestApiCommonUtil.getValidateTenantDomain(tenantDomain);\n         InMemoryAPIDeployer inMemoryApiDeployer = new InMemoryAPIDeployer();\n-        if (tenantDomain == null) {\n-            tenantDomain = APIConstants.SUPER_TENANT_DOMAIN;\n-        }\n         boolean status = false;\n         try {\n-            Map<String, String> apiAttributes = inMemoryApiDeployer.getGatewayAPIAttributes(apiName, version, tenantDomain);\n-            String apiId = apiAttributes.get(APIConstants.GatewayArtifactSynchronizer.API_ID);\n-            String label = apiAttributes.get(APIConstants.GatewayArtifactSynchronizer.LABEL);\n-\n-            if (label == null){\n-                return Response.status(Response.Status.BAD_REQUEST).entity(apiName + \" is not deployed in the Gateway\").build();\n+            inMemoryApiDeployer.reDeployAPI(apiName, version, tenantDomain);\n+            if (debugEnabled) {\n+                log.debug(\"Successfully deployed \" + apiName + \" in gateway\");\n             }\n-\n-            status = inMemoryApiDeployer.deployAPI(apiId, label);\n+            return Response.ok().entity(apiName + \" redeployed successfully in the Gateway\").build();\n         } catch (ArtifactSynchronizerException e) {\n             String errorMessage = \"Error in fetching artifacts from storage\";\n             log.error(errorMessage, e);\n             RestApiUtil.handleInternalServerError(errorMessage, e, log);\n         }\n-\n-\n-        if (status) {\n-            if (debugEnabled) {\n-                log.debug(\"Successfully deployed \" + apiName + \" in gateway\");\n-            }\n-            return Response.ok().entity(apiName + \" redeployed successfully in the Gateway\").build();\n-        } else {\n-            return Response.serverError().entity(\"Unexpected error occurred\").build();\n-        }\n+        return null;\n     }\n }\n", "next_change": null}]}}]}}]}}]}}]}