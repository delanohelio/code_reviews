{"pr_number": 800, "pr_title": "Add farzone support", "pr_author": "tbak", "pr_createdAt": "2020-03-04T23:15:25Z", "pr_url": "https://github.com/Netflix/titus-control-plane/pull/800", "merge_commit": "834a1de559c106a43d5128396657f2d7d690bf5e", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQyMjE3OA==", "url": "https://github.com/Netflix/titus-control-plane/pull/800#discussion_r388422178", "body": "The first ipv4 ip address should be used as the host ip like in:\r\nhttps://github.com/Netflix/titus-control-plane/blob/master/titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/KubeApiServerIntegrator.java#L453", "bodyText": "The first ipv4 ip address should be used as the host ip like in:\nhttps://github.com/Netflix/titus-control-plane/blob/master/titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/KubeApiServerIntegrator.java#L453", "bodyHTML": "<p dir=\"auto\">The first ipv4 ip address should be used as the host ip like in:<br>\n<a href=\"https://github.com/Netflix/titus-control-plane/blob/master/titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/KubeApiServerIntegrator.java#L453\">https://github.com/Netflix/titus-control-plane/blob/master/titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/KubeApiServerIntegrator.java#L453</a></p>", "author": "corindwyer", "createdAt": "2020-03-05T16:47:58Z", "path": "titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/KubeNotificationProcessor.java", "diffHunk": "@@ -264,6 +266,16 @@ private Task attachNodeMetadata(Task task, V1Node node) {\n \n         acceptNotNull(node.getMetadata().getName(), nodeName -> agentAttributes.put(TaskAttributes.TASK_ATTRIBUTES_KUBE_NODE_NAME, nodeName));\n \n+        List<V1NodeAddress> addresses = node.getStatus().getAddresses();", "originalCommit": "364c6a14e43e5ee4064a76c64a96ad3a624c873b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQyNDUyNQ==", "url": "https://github.com/Netflix/titus-control-plane/pull/800#discussion_r388424525", "bodyText": "@corindwyer I have seen your recent PR. We should share your address filter in both places. Once you merge, I will rebase and create a function in KubeUtil.", "author": "tbak", "createdAt": "2020-03-05T16:51:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQyMjE3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQyNzI5Mg==", "url": "https://github.com/Netflix/titus-control-plane/pull/800#discussion_r388427292", "bodyText": "Sounds good. I already merged.", "author": "corindwyer", "createdAt": "2020-03-05T16:55:32Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQyMjE3OA=="}], "type": "inlineReview", "revised_code": {"commit": "9f905c8121ea84179c18abaa794810077dbbee6d", "changed_code": [{"header": "diff --git a/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/KubeNotificationProcessor.java b/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/KubeNotificationProcessor.java\nindex 373de600d..340ae1bba 100644\n--- a/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/KubeNotificationProcessor.java\n+++ b/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/KubeNotificationProcessor.java\n", "chunk": "@@ -266,16 +264,6 @@ public class KubeNotificationProcessor {\n \n         acceptNotNull(node.getMetadata().getName(), nodeName -> agentAttributes.put(TaskAttributes.TASK_ATTRIBUTES_KUBE_NODE_NAME, nodeName));\n \n-        List<V1NodeAddress> addresses = node.getStatus().getAddresses();\n-        if (!CollectionsExt.isNullOrEmpty(addresses)) {\n-            addresses.forEach(address -> {\n-                if (StringExt.isNotEmpty(address.getAddress()) && \"InternalIP\".equals(address.getType())) {\n-                    agentAttributes.put(TaskAttributes.TASK_ATTRIBUTES_AGENT_HOST, address.getAddress());\n-                    agentAttributes.put(TaskAttributes.TASK_ATTRIBUTES_AGENT_HOST_IP, address.getAddress());\n-                }\n-            });\n-        }\n-\n         if (agentAttributes.isEmpty()) {\n             return task;\n         }\n", "next_change": {"commit": "372302aaacc312652a402b6b28e0739d7013cb76", "changed_code": [{"header": "diff --git a/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/KubeNotificationProcessor.java b/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/KubeNotificationProcessor.java\nindex 340ae1bba..373de600d 100644\n--- a/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/KubeNotificationProcessor.java\n+++ b/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/KubeNotificationProcessor.java\n", "chunk": "@@ -264,6 +266,16 @@ public class KubeNotificationProcessor {\n \n         acceptNotNull(node.getMetadata().getName(), nodeName -> agentAttributes.put(TaskAttributes.TASK_ATTRIBUTES_KUBE_NODE_NAME, nodeName));\n \n+        List<V1NodeAddress> addresses = node.getStatus().getAddresses();\n+        if (!CollectionsExt.isNullOrEmpty(addresses)) {\n+            addresses.forEach(address -> {\n+                if (StringExt.isNotEmpty(address.getAddress()) && \"InternalIP\".equals(address.getType())) {\n+                    agentAttributes.put(TaskAttributes.TASK_ATTRIBUTES_AGENT_HOST, address.getAddress());\n+                    agentAttributes.put(TaskAttributes.TASK_ATTRIBUTES_AGENT_HOST_IP, address.getAddress());\n+                }\n+            });\n+        }\n+\n         if (agentAttributes.isEmpty()) {\n             return task;\n         }\n", "next_change": {"commit": "56dbe6d10d178829b6fb132efd470def8ee963b7", "changed_code": [{"header": "diff --git a/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/KubeNotificationProcessor.java b/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/KubeNotificationProcessor.java\nindex 373de600d..a8716f0e4 100644\n--- a/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/KubeNotificationProcessor.java\n+++ b/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/KubeNotificationProcessor.java\n", "chunk": "@@ -266,19 +264,9 @@ public class KubeNotificationProcessor {\n \n         acceptNotNull(node.getMetadata().getName(), nodeName -> agentAttributes.put(TaskAttributes.TASK_ATTRIBUTES_KUBE_NODE_NAME, nodeName));\n \n-        List<V1NodeAddress> addresses = node.getStatus().getAddresses();\n-        if (!CollectionsExt.isNullOrEmpty(addresses)) {\n-            addresses.forEach(address -> {\n-                if (StringExt.isNotEmpty(address.getAddress()) && \"InternalIP\".equals(address.getType())) {\n-                    agentAttributes.put(TaskAttributes.TASK_ATTRIBUTES_AGENT_HOST, address.getAddress());\n-                    agentAttributes.put(TaskAttributes.TASK_ATTRIBUTES_AGENT_HOST_IP, address.getAddress());\n-                }\n-            });\n-        }\n-\n-        if (agentAttributes.isEmpty()) {\n-            return task;\n-        }\n+        String nodeIpAddress = KubeUtil.getNodeIpV4Address(node);\n+        agentAttributes.put(TaskAttributes.TASK_ATTRIBUTES_AGENT_HOST, nodeIpAddress);\n+        agentAttributes.put(TaskAttributes.TASK_ATTRIBUTES_AGENT_HOST_IP, nodeIpAddress);\n \n         return task.toBuilder()\n                 .withTaskContext(CollectionsExt.merge(task.getTaskContext(), agentAttributes))\n", "next_change": null}]}}]}}]}, "revised_code_in_main": {"commit": "834a1de559c106a43d5128396657f2d7d690bf5e", "changed_code": [{"header": "diff --git a/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/KubeNotificationProcessor.java b/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/KubeNotificationProcessor.java\nindex 373de600d..a8716f0e4 100644\n--- a/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/KubeNotificationProcessor.java\n+++ b/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/KubeNotificationProcessor.java\n", "chunk": "@@ -266,19 +264,9 @@ public class KubeNotificationProcessor {\n \n         acceptNotNull(node.getMetadata().getName(), nodeName -> agentAttributes.put(TaskAttributes.TASK_ATTRIBUTES_KUBE_NODE_NAME, nodeName));\n \n-        List<V1NodeAddress> addresses = node.getStatus().getAddresses();\n-        if (!CollectionsExt.isNullOrEmpty(addresses)) {\n-            addresses.forEach(address -> {\n-                if (StringExt.isNotEmpty(address.getAddress()) && \"InternalIP\".equals(address.getType())) {\n-                    agentAttributes.put(TaskAttributes.TASK_ATTRIBUTES_AGENT_HOST, address.getAddress());\n-                    agentAttributes.put(TaskAttributes.TASK_ATTRIBUTES_AGENT_HOST_IP, address.getAddress());\n-                }\n-            });\n-        }\n-\n-        if (agentAttributes.isEmpty()) {\n-            return task;\n-        }\n+        String nodeIpAddress = KubeUtil.getNodeIpV4Address(node);\n+        agentAttributes.put(TaskAttributes.TASK_ATTRIBUTES_AGENT_HOST, nodeIpAddress);\n+        agentAttributes.put(TaskAttributes.TASK_ATTRIBUTES_AGENT_HOST_IP, nodeIpAddress);\n \n         return task.toBuilder()\n                 .withTaskContext(CollectionsExt.merge(task.getTaskContext(), agentAttributes))\n", "next_change": {"commit": "67cacd3c6958d4a5192624dcf023a23b49afee88", "changed_code": [{"header": "diff --git a/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/KubeNotificationProcessor.java b/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/KubeNotificationProcessor.java\nindex a8716f0e4..e9e7c296a 100644\n--- a/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/KubeNotificationProcessor.java\n+++ b/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/KubeNotificationProcessor.java\n", "chunk": "@@ -273,7 +285,7 @@ public class KubeNotificationProcessor {\n                 .build();\n     }\n \n-    private Task fillInMissingStates(V1Pod pod, Task task) {\n+    private static Task fillInMissingStates(V1Pod pod, Task task) {\n         TaskState currentState = task.getStatus().getState();\n         if (currentState != TaskState.Started && currentState != TaskState.Finished) {\n             return task;\n", "next_change": {"commit": "bbf6ddb9637ca138aa661c266d0f29b9c8c709bb", "changed_code": [{"header": "diff --git a/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/KubeNotificationProcessor.java b/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/KubeNotificationProcessor.java\nindex e9e7c296a..d9633845f 100644\n--- a/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/KubeNotificationProcessor.java\n+++ b/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/KubeNotificationProcessor.java\n", "chunk": "@@ -285,13 +319,13 @@ public class KubeNotificationProcessor {\n                 .build();\n     }\n \n-    private static Task fillInMissingStates(V1Pod pod, Task task) {\n+    private static Task fillInMissingStates(PodWrapper podWrapper, Task task) {\n         TaskState currentState = task.getStatus().getState();\n         if (currentState != TaskState.Started && currentState != TaskState.Finished) {\n             return task;\n         }\n \n-        V1ContainerState containerState = KubeUtil.findContainerState(pod).orElse(null);\n+        V1ContainerState containerState = podWrapper.findContainerState().orElse(null);\n         if (containerState == null) {\n             return task;\n         }\n", "next_change": null}]}}]}}]}, "commits_in_main": [{"oid": "834a1de559c106a43d5128396657f2d7d690bf5e", "message": "Merge commit", "committedDate": null}, {"oid": "502b0d8150cc56388d4ac4a35fc5ca544232967c", "committedDate": "2020-03-05 20:18:10 -0800", "message": "Upgrade to kube-java-client 7.x (#797)"}, {"oid": "9939b4a2f0efae4d937128ad902089beee2cba3a", "committedDate": "2020-03-17 16:27:28 -0700", "message": "Keep task retryer in the direct Kube integration (#812)"}, {"oid": "5ec20ab8600dd6f8b466dcaa045203815f7c816f", "committedDate": "2020-04-24 13:30:32 -0700", "message": "handle Pod opportunistic annotations (#841)"}, {"oid": "67cacd3c6958d4a5192624dcf023a23b49afee88", "committedDate": "2020-05-11 09:05:20 -0700", "message": "Add a Kube backend constraint (#844)"}, {"oid": "bbf6ddb9637ca138aa661c266d0f29b9c8c709bb", "committedDate": "2020-06-10 10:24:13 -0700", "message": "Pod terminated without a container is not processed by TitusMaster (#866)"}, {"oid": "073f41752fb92b729f413041d753cdc306acec52", "committedDate": "2020-06-16 12:51:34 -0700", "message": "Check if all required node attributes are present (#873)"}, {"oid": "35b55d7b256d637d3e36b8b55481ca34fdd5a9ce", "committedDate": "2020-07-30 10:21:51 -0700", "message": "rewrite task statuses in KubeNotificationProcessor for specific task states and reason messages (#890)"}, {"oid": "85037bbf98a3b5b5b055d43021e94cc9410aae52", "committedDate": "2020-08-25 14:41:31 -0700", "message": "KubeScheduler & task relocation support (#902)"}, {"oid": "423620274575ed4e1371a378b5c07523fbdb3739", "committedDate": "2020-08-28 15:53:11 -0700", "message": "Make the KubeNotificationProcessor understand pod ips from kubelet (#903)"}, {"oid": "17b840eda4dd6495cc085156da2a79b978dd4612", "committedDate": "2020-09-10 16:13:38 -0700", "message": "Add titus.agent attribute to task context (#922)"}, {"oid": "bc8747660eb6c1e72031d69ffd30d375eacb9de4", "committedDate": "2020-12-02 11:30:47 -0800", "message": "Align KubeScheduler pod -> task state mapping with KubeApiServerIntegrator (#961)"}, {"oid": "bc8ebba4f0f9eef1fba9d30858c9532c2856035e", "committedDate": "2020-12-21 16:51:04 -0800", "message": "Prevent task state backward transition in KubeNotificationProcessor (#966)"}, {"oid": "5b883b48044f4afa82449dc2f1d70fe83b9fa363", "committedDate": "2021-02-01 14:05:46 -0800", "message": "Refactoring/webclient upgrade (#974)"}, {"oid": "58c319f6d672007debde8f617ac517285f4f2f42", "committedDate": "2021-02-05 15:05:15 -0800", "message": "Added more verbose and human-friendly reason messages for task updates (#976)"}, {"oid": "3f33f2b9616e8ac012e0c8fc14b50c0f6de65225", "committedDate": "2021-03-22 09:06:24 -0700", "message": "Improve performance of KubeNotificationProcessor (#997)"}, {"oid": "f0fb1ed176ba59c8b205f04fa5f5bd3901c9b23f", "committedDate": "2021-03-29 10:20:55 -0700", "message": "De-duplicate the pod informer events in KubeNotificationProcessor (#1000)"}, {"oid": "9a7666f5c1ea509dc3b615d27d2f81828cb0f0d4", "committedDate": "2021-03-30 09:49:44 -0700", "message": "Check early if a task is going to be changed by a pod informer event (#1003)"}, {"oid": "cda113f0a15a490f358063926f10e187018a893a", "committedDate": "2021-08-12 14:18:53 -0400", "message": "K8s 1.20 client upgrade (#1082)"}, {"oid": "acf50da80a5dd23986b9ebba2a407e7dc5b8b020", "committedDate": "2021-08-18 15:46:51 -0700", "message": "Only set the ipv4 container attribute if we have one (#1086)"}, {"oid": "0f42a929e70fbb44de7092341abd8ba661d1b54c", "committedDate": "2021-08-23 08:51:16 -0700", "message": "Move Kube classes from package mesos to kubernetes (#1090)"}, {"oid": "ea0035372ff9e62c4524589fc031ae80924d0862", "committedDate": "2021-10-05 11:07:20 -0700", "message": "Remove Fenzo integration from JobService; migrate the JobService component tests off Fenzo (#1125)"}, {"oid": "534dceae673eae35fb7553387787b7529259f67b", "committedDate": "2021-10-13 09:16:12 -0700", "message": "Remove all the remaining dependencies on fenzo and mesos (#1132)"}, {"oid": "17184dc63188d98e1f812005d22f8d98f830bcc9", "committedDate": "2022-02-07 09:50:17 -0800", "message": "Remove the opportunistic resource CRD support (#1210)"}, {"oid": "258bb68664872cc9744894065da5fd017f645291", "committedDate": "2022-02-15 14:33:09 -0800", "message": "Removed legacy mesos.TitusExecutorDetails in favor of pod annotations (#1220)"}, {"oid": "29dc89e3ac459c27bf5cacf7a0895c91e4a26d6e", "committedDate": "2022-04-25 15:02:03 -0700", "message": "Handle better NodeLost pod state (#1262)"}]}, {"oid": "9f905c8121ea84179c18abaa794810077dbbee6d", "url": "https://github.com/Netflix/titus-control-plane/commit/9f905c8121ea84179c18abaa794810077dbbee6d", "message": "Add farzone support", "committedDate": "2020-03-05T16:52:31Z", "type": "commit"}, {"oid": "372302aaacc312652a402b6b28e0739d7013cb76", "url": "https://github.com/Netflix/titus-control-plane/commit/372302aaacc312652a402b6b28e0739d7013cb76", "message": "Add agent host attributes", "committedDate": "2020-03-05T16:52:31Z", "type": "commit"}, {"oid": "56dbe6d10d178829b6fb132efd470def8ee963b7", "url": "https://github.com/Netflix/titus-control-plane/commit/56dbe6d10d178829b6fb132efd470def8ee963b7", "message": "Reuse node IP extractor from KubeApiServerIntegrator", "committedDate": "2020-03-05T17:16:57Z", "type": "commit"}, {"oid": "56dbe6d10d178829b6fb132efd470def8ee963b7", "url": "https://github.com/Netflix/titus-control-plane/commit/56dbe6d10d178829b6fb132efd470def8ee963b7", "message": "Reuse node IP extractor from KubeApiServerIntegrator", "committedDate": "2020-03-05T17:16:57Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ0NjIzMA==", "url": "https://github.com/Netflix/titus-control-plane/pull/800#discussion_r388446230", "body": "this looks incorrectly indented", "bodyText": "this looks incorrectly indented", "bodyHTML": "<p dir=\"auto\">this looks incorrectly indented</p>", "author": "corindwyer", "createdAt": "2020-03-05T17:26:12Z", "path": "titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/KubeUtil.java", "diffHunk": "@@ -191,4 +197,12 @@ public static boolean isOwnedByKubeScheduler(V1Pod v1Pod) {\n         }\n         return false;\n     }\n+\n+    public static String getNodeIpV4Address(V1Node node) {\n+        return   node.getStatus().getAddresses().stream()", "originalCommit": "56dbe6d10d178829b6fb132efd470def8ee963b7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "502b0d8150cc56388d4ac4a35fc5ca544232967c", "changed_code": [{"header": "diff --git a/titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/KubeUtil.java b/titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/KubeUtil.java\nindex 3b6b415a3..637ae12fd 100644\n--- a/titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/KubeUtil.java\n+++ b/titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/KubeUtil.java\n", "chunk": "@@ -199,7 +203,7 @@ public class KubeUtil {\n     }\n \n     public static String getNodeIpV4Address(V1Node node) {\n-        return   node.getStatus().getAddresses().stream()\n+        return node.getStatus().getAddresses().stream()\n                 .filter(a -> a.getType().equalsIgnoreCase(INTERNAL_IP) && NetworkExt.isIpV4(a.getAddress()))\n                 .findFirst()\n                 .map(V1NodeAddress::getAddress)\n", "next_change": {"commit": "79a89b74589fc6e6da9e07face1ab4b1fd63907a", "changed_code": [{"header": "diff --git a/titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/KubeUtil.java b/titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/KubeUtil.java\nindex 637ae12fd..01b0c490c 100644\n--- a/titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/KubeUtil.java\n+++ b/titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/KubeUtil.java\n", "chunk": "@@ -209,4 +213,24 @@ public class KubeUtil {\n                 .map(V1NodeAddress::getAddress)\n                 .orElse(\"UnknownIpAddress\");\n     }\n+\n+    public static Map<String, String> createPodAnnotations(\n+            Job<?> job,\n+            byte[] containerInfoData,\n+            Map<String, String> passthroughAttributes,\n+            boolean includeJobDescriptor\n+    ) {\n+        String encodedContainerInfo = Base64.getEncoder().encodeToString(containerInfoData);\n+\n+        Map<String, String> annotations = new HashMap<>(passthroughAttributes);\n+        annotations.putAll(PerformanceToolUtil.toAnnotations(job));\n+        annotations.put(\"containerInfo\", encodedContainerInfo);\n+\n+        if (includeJobDescriptor) {\n+            String jobDescriptorJson = CommonObjectMappers.writeValueAsString(ObjectMappers.storeMapper(), job.getJobDescriptor());\n+            annotations.put(\"jobDescriptor\", StringExt.gzipAndBase64Encode(jobDescriptorJson));\n+        }\n+\n+        return annotations;\n+    }\n }\n", "next_change": {"commit": "d35286955302d65c637815c6d6b6707831fffa93", "changed_code": [{"header": "diff --git a/titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/KubeUtil.java b/titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/KubeUtil.java\nindex 01b0c490c..5f580fae5 100644\n--- a/titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/KubeUtil.java\n+++ b/titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/KubeUtil.java\n", "chunk": "@@ -233,4 +240,76 @@ public class KubeUtil {\n \n         return annotations;\n     }\n+\n+    /**\n+     * A node is owned by Fenzo if:\n+     * <ul>\n+     *     <li>There is no taint with {@link KubeConstants#TAINT_SCHEDULER} key and it is not a farzone node</li>\n+     *     <li>There is one taint with {@link KubeConstants#TAINT_SCHEDULER} key and 'fenzo' value</li>\n+     * </ul>\n+     */\n+    public static boolean isNodeOwnedByFenzo(List<String> farzones, Set<String> toleratedTaints, V1Node node) {\n+        if (isFarzoneNode(farzones, node)) {\n+            logger.debug(\"Not owned by fenzo (farzone node): {}\", node.getMetadata().getName());\n+            return false;\n+        }\n+        if (!hasFenzoSchedulerTaint(node)) {\n+            logger.debug(\"Not owned by fenzo (non Fenzo scheduler taint): {}\", node.getMetadata().getName());\n+            return false;\n+        }\n+\n+        List<V1Taint> taints = node.getSpec().getTaints();\n+        if (CollectionsExt.isNullOrEmpty(taints)) {\n+            logger.debug(\"Owned by fenzo (no taint set): {}\", node.getMetadata().getName());\n+            return true;\n+        }\n+\n+        for (V1Taint taint : taints) {\n+            String taintKey = taint.getKey();\n+            if (!taintKey.equals(KubeConstants.TAINT_SCHEDULER) && !toleratedTaints.contains(taintKey)) {\n+                logger.debug(\"Not owned by fenzo (non tolerable taint found): nodeId={}, taintKey={}\", node.getMetadata().getName(), taintKey);\n+                return false;\n+            }\n+        }\n+\n+        logger.debug(\"Owned by fenzo (all taints tolerated): {}\", node.getMetadata().getName());\n+        return true;\n+    }\n+\n+    /**\n+     * Returns true if there is {@link KubeConstants#TAINT_SCHEDULER} taint with {@link KubeConstants#TAINT_SCHEDULER_VALUE_FENZO} value\n+     * or this taint is missing (no explicit scheduler taint == Fenzo).\n+     */\n+    public static boolean hasFenzoSchedulerTaint(V1Node node) {\n+        List<V1Taint> taints = node.getSpec().getTaints();\n+        if (CollectionsExt.isNullOrEmpty(taints)) {\n+            return true;\n+        }\n+        Set<String> schedulerTaintValues = taints.stream()\n+                .filter(t -> KubeConstants.TAINT_SCHEDULER.equals(t.getKey()))\n+                .map(t -> StringExt.safeTrim(t.getValue()))\n+                .collect(Collectors.toSet());\n+\n+        if (schedulerTaintValues.isEmpty()) {\n+            return true;\n+        }\n+\n+        return schedulerTaintValues.size() == 1 && KubeConstants.TAINT_SCHEDULER_VALUE_FENZO.equalsIgnoreCase(CollectionsExt.first(schedulerTaintValues));\n+    }\n+\n+    public static boolean isFarzoneNode(List<String> farzones, V1Node node) {\n+        String nodeZone = node.getMetadata().getLabels().get(KubeConstants.NODE_LABEL_ZONE);\n+        if (StringExt.isEmpty(nodeZone)) {\n+            logger.debug(\"Node without zone label: {}\", node.getMetadata().getName());\n+            return false;\n+        }\n+        for (String farzone : farzones) {\n+            if (farzone.equalsIgnoreCase(nodeZone)) {\n+                logger.debug(\"Farzone node: nodeId={}, zoneId={}\", node.getMetadata().getName(), nodeZone);\n+                return true;\n+            }\n+        }\n+        logger.debug(\"Non-farzone node: nodeId={}, zoneId={}\", node.getMetadata().getName(), nodeZone);\n+        return false;\n+    }\n }\n", "next_change": {"commit": "af8ce7106d0a9adb6c7c087f29e65b422de8facb", "changed_code": [{"header": "diff --git a/titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/KubeUtil.java b/titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/KubeUtil.java\nindex 5f580fae5..13afd21d5 100644\n--- a/titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/KubeUtil.java\n+++ b/titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/KubeUtil.java\n", "chunk": "@@ -312,4 +295,17 @@ public class KubeUtil {\n         logger.debug(\"Non-farzone node: nodeId={}, zoneId={}\", node.getMetadata().getName(), nodeZone);\n         return false;\n     }\n+\n+    public static String toErrorDetails(Exception e) {\n+        if (!(e instanceof ApiException)) {\n+            return ExceptionExt.toMessageChain(e);\n+        }\n+\n+        ApiException apiException = (ApiException) e;\n+        return String.format(\"{message=%s, httpCode=%d, responseBody=%s\",\n+                Evaluators.getOrDefault(apiException.getMessage(), \"<not set>\"),\n+                apiException.getCode(),\n+                Evaluators.getOrDefault(apiException.getResponseBody(), \"<not set>\")\n+        );\n+    }\n }\n", "next_change": {"commit": "ac3944c628902ab80bccbd058b2bb0999f15a99c", "changed_code": [{"header": "diff --git a/titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/KubeUtil.java b/titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/KubeUtil.java\nindex 13afd21d5..88dc1551f 100644\n--- a/titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/KubeUtil.java\n+++ b/titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/KubeUtil.java\n", "chunk": "@@ -308,4 +326,40 @@ public class KubeUtil {\n                 Evaluators.getOrDefault(apiException.getResponseBody(), \"<not set>\")\n         );\n     }\n+\n+    public static <T> Mono<T> toReact(KubeFunction<ApiCallback<T>, Call> handler) {\n+        return Mono.create(sink -> {\n+            Call call;\n+            try {\n+                call = handler.apply(new ApiCallback<T>() {\n+                    @Override\n+                    public void onFailure(ApiException e, int statusCode, Map<String, List<String>> responseHeaders) {\n+                        sink.error(e);\n+                    }\n+\n+                    @Override\n+                    public void onSuccess(T result, int statusCode, Map<String, List<String>> responseHeaders) {\n+                        if (result == null) {\n+                            sink.success();\n+                        } else {\n+                            sink.success(result);\n+                        }\n+                    }\n+\n+                    @Override\n+                    public void onUploadProgress(long bytesWritten, long contentLength, boolean done) {\n+                    }\n+\n+                    @Override\n+                    public void onDownloadProgress(long bytesRead, long contentLength, boolean done) {\n+                    }\n+                });\n+            } catch (ApiException e) {\n+                sink.error(e);\n+                return;\n+            }\n+\n+            sink.onCancel(call::cancel);\n+        });\n+    }\n }\n", "next_change": {"commit": "e579040bb21f013e86aa5ce87f8e41f03ea7778d", "changed_code": [{"header": "diff --git a/titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/KubeUtil.java b/titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/KubeUtil.java\nindex 88dc1551f..f27904671 100644\n--- a/titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/KubeUtil.java\n+++ b/titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/KubeUtil.java\n", "chunk": "@@ -362,4 +365,12 @@ public class KubeUtil {\n             sink.onCancel(call::cancel);\n         });\n     }\n+\n+    public static boolean hasUninitializedTaint(V1Node node) {\n+        if (node.getSpec() != null && node.getSpec().getTaints() != null) {\n+            return node.getSpec().getTaints().stream()\n+                    .anyMatch(t -> KubeConstants.TAINT_NODE_UNINITIALIZED.equals(t.getKey()));\n+        }\n+        return false;\n+    }\n }\n", "next_change": null}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "834a1de559c106a43d5128396657f2d7d690bf5e", "message": "Merge commit", "committedDate": null}, {"oid": "502b0d8150cc56388d4ac4a35fc5ca544232967c", "committedDate": "2020-03-05 20:18:10 -0800", "message": "Upgrade to kube-java-client 7.x (#797)"}, {"oid": "79a89b74589fc6e6da9e07face1ab4b1fd63907a", "committedDate": "2020-03-12 12:00:55 -0700", "message": "add job descriptor annotation (#804)"}, {"oid": "d35286955302d65c637815c6d6b6707831fffa93", "committedDate": "2020-03-20 14:13:25 -0700", "message": "Add configurable Fenzo taints (#817)"}, {"oid": "73a3963c1c21d75a10fa6b1eadae8a897fac550c", "committedDate": "2020-03-25 08:44:04 -0700", "message": "change jobDescriptor annotation payload to use the json API representation (#821)"}, {"oid": "5ec20ab8600dd6f8b466dcaa045203815f7c816f", "committedDate": "2020-04-24 13:30:32 -0700", "message": "handle Pod opportunistic annotations (#841)"}, {"oid": "67cacd3c6958d4a5192624dcf023a23b49afee88", "committedDate": "2020-05-11 09:05:20 -0700", "message": "Add a Kube backend constraint (#844)"}, {"oid": "5abbf67fd2c7543dcae9e13faed02d072a86a63b", "committedDate": "2020-05-26 10:52:41 -0700", "message": "Feature/kube informer sync (#850)"}, {"oid": "7f69c40b55bfc4205048ae1841650324ec3b3151", "committedDate": "2020-05-27 10:27:11 -0700", "message": "Add pod size metric + minor code cleanup (#851)"}, {"oid": "a02f248582c9fa650d92aa6ca141e6db48588042", "committedDate": "2020-06-02 14:52:38 -0700", "message": "Add configurable finished pod GC delay (#855)"}, {"oid": "43575f1e7375eafe5be9a0ebffac321a36ef20d1", "committedDate": "2020-06-04 10:48:35 -0700", "message": "add scheduling constraint for kube nodes (#858)"}, {"oid": "af8ce7106d0a9adb6c7c087f29e65b422de8facb", "committedDate": "2020-06-08 17:05:08 -0700", "message": "Better error reporting for Kube API exceptions (#865)"}, {"oid": "756a04c6ab435aaf2f6a771534b9561e62c010a9", "committedDate": "2020-06-12 10:36:42 -0700", "message": "Misc null validations (#871)"}, {"oid": "073f41752fb92b729f413041d753cdc306acec52", "committedDate": "2020-06-16 12:51:34 -0700", "message": "Check if all required node attributes are present (#873)"}, {"oid": "ac3944c628902ab80bccbd058b2bb0999f15a99c", "committedDate": "2020-06-25 16:03:30 -0700", "message": "Use KubeClient async API to launch pods (#878)"}, {"oid": "e579040bb21f013e86aa5ce87f8e41f03ea7778d", "committedDate": "2020-08-21 10:30:08 -0700", "message": "fenzo should ignore nodes marked with uninitialized taint (#900)"}, {"oid": "85037bbf98a3b5b5b055d43021e94cc9410aae52", "committedDate": "2020-08-25 14:41:31 -0700", "message": "KubeScheduler & task relocation support (#902)"}, {"oid": "423620274575ed4e1371a378b5c07523fbdb3739", "committedDate": "2020-08-28 15:53:11 -0700", "message": "Make the KubeNotificationProcessor understand pod ips from kubelet (#903)"}, {"oid": "31e69550eb6ee029508a45d484ef710a483f54c5", "committedDate": "2020-10-05 12:07:18 -0700", "message": "extract gc controller logic from KubeApiServerIntegrator into GC controllers (#889)"}, {"oid": "d61da0909ecc2e1dc0252d4b87c56b41e8a7e716", "committedDate": "2020-10-06 13:30:25 -0700", "message": "Add account id and subnets job parameters to pod annotations (#932)"}, {"oid": "1d75da8ccd2a187e76207ff707515a9615370fbe", "committedDate": "2020-11-18 10:26:26 -0800", "message": "Hard/soft constraint names are case sensitive (#956)"}, {"oid": "ca4344f029bc598c95ca513c51706383e64f6b88", "committedDate": "2020-11-20 07:01:26 -0800", "message": "Initial persistent volume GC functionality (#957)"}, {"oid": "bc8747660eb6c1e72031d69ffd30d375eacb9de4", "committedDate": "2020-12-02 11:30:47 -0800", "message": "Align KubeScheduler pod -> task state mapping with KubeApiServerIntegrator (#961)"}, {"oid": "29c1834e42999d9cc23460f5657e8b706174b8cc", "committedDate": "2021-02-09 11:45:29 -0800", "message": "Add capacity group annotation to a pod (#982)"}, {"oid": "fa9c3834e8f74d86f56ed6195e1822452a771cb0", "committedDate": "2021-02-10 09:32:14 -0800", "message": "Set pod capacity group in labels not annotations (#984)"}, {"oid": "08831e6b3221bdaf0ed6054e32789d991314416e", "committedDate": "2021-02-24 14:45:49 -0800", "message": "extract pod object building to a single interface (#988)"}, {"oid": "cda113f0a15a490f358063926f10e187018a893a", "committedDate": "2021-08-12 14:18:53 -0400", "message": "K8s 1.20 client upgrade (#1082)"}, {"oid": "a35bb67dd4cc522aee4fc7129416cd77168dd934", "committedDate": "2021-08-16 12:29:40 -0700", "message": "Hide Kube Java lib invocations behind internal API (#1080)"}, {"oid": "acf50da80a5dd23986b9ebba2a407e7dc5b8b020", "committedDate": "2021-08-18 15:46:51 -0700", "message": "Only set the ipv4 container attribute if we have one (#1086)"}, {"oid": "534dceae673eae35fb7553387787b7529259f67b", "committedDate": "2021-10-13 09:16:12 -0700", "message": "Remove all the remaining dependencies on fenzo and mesos (#1132)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5MTkyOA==", "url": "https://github.com/Netflix/titus-control-plane/pull/800#discussion_r388491928", "body": "why not centralize this check into the `kubeSchedulerPredicate`?", "bodyText": "why not centralize this check into the kubeSchedulerPredicate?", "bodyHTML": "<p dir=\"auto\">why not centralize this check into the <code>kubeSchedulerPredicate</code>?</p>", "author": "fabiokung", "createdAt": "2020-03-05T18:51:16Z", "path": "titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/batch/BatchDifferenceResolver.java", "diffHunk": "@@ -238,7 +244,7 @@ public BatchDifferenceResolver(\n         }\n \n         Map<String, String> taskContext = getTaskContext(previousTask, unassignedIpAllocations);\n-        if (kubeSchedulerPredicate.test(refJobView.getJob().getJobDescriptor())) {\n+        if (KubeUtil.findFarzoneId(kubeConfiguration, refJobView.getJob()).isPresent() || kubeSchedulerPredicate.test(refJobView.getJob().getJobDescriptor())) {", "originalCommit": "56dbe6d10d178829b6fb132efd470def8ee963b7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5NzkyMA==", "url": "https://github.com/Netflix/titus-control-plane/pull/800#discussion_r388497920", "bodyText": "I have tried that, but the code is in a different subproject.", "author": "tbak", "createdAt": "2020-03-05T19:01:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5MTkyOA=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "6ac8c2ff0e0261eb0329add47bfbc563ae6d8317", "changed_code": [{"header": "diff --git a/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/batch/BatchDifferenceResolver.java b/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/batch/BatchDifferenceResolver.java\nindex 39742195f..206472c83 100644\n--- a/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/batch/BatchDifferenceResolver.java\n+++ b/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/batch/BatchDifferenceResolver.java\n", "chunk": "@@ -244,7 +245,11 @@ public class BatchDifferenceResolver implements ReconciliationEngine.DifferenceR\n         }\n \n         Map<String, String> taskContext = getTaskContext(previousTask, unassignedIpAllocations);\n-        if (KubeUtil.findFarzoneId(kubeConfiguration, refJobView.getJob()).isPresent() || kubeSchedulerPredicate.test(refJobView.getJob().getJobDescriptor())) {\n+\n+        JobDescriptor jobDescriptor = refJobView.getJob().getJobDescriptor();\n+        ApplicationSLA capacityGroupDescriptor = JobManagerUtil.getCapacityGroupDescriptor(jobDescriptor, capacityGroupService);\n+        if (KubeUtil.findFarzoneId(kubeConfiguration, refJobView.getJob()).isPresent()\n+                || kubeSchedulerPredicate.test(Pair.of(jobDescriptor, capacityGroupDescriptor))) {\n             taskContext = CollectionsExt.copyAndAdd(taskContext, TaskAttributes.TASK_ATTRIBUTES_OWNED_BY_KUBE_SCHEDULER, \"true\");\n         }\n \n", "next_change": {"commit": "1dc33182886c3dc5b38bf78decc408174d09d7b0", "changed_code": [{"header": "diff --git a/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/batch/BatchDifferenceResolver.java b/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/batch/BatchDifferenceResolver.java\nindex 206472c83..13834bc87 100644\n--- a/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/batch/BatchDifferenceResolver.java\n+++ b/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/batch/BatchDifferenceResolver.java\n", "chunk": "@@ -244,12 +252,11 @@ public class BatchDifferenceResolver implements ReconciliationEngine.DifferenceR\n             return Optional.empty();\n         }\n \n-        Map<String, String> taskContext = getTaskContext(previousTask, unassignedIpAllocations);\n+        Map<String, String> taskContext = getTaskContext(previousTask, unassignedIpAllocations, ebsVolumeIds);\n \n         JobDescriptor jobDescriptor = refJobView.getJob().getJobDescriptor();\n         ApplicationSLA capacityGroupDescriptor = JobManagerUtil.getCapacityGroupDescriptor(jobDescriptor, capacityGroupService);\n-        if (KubeUtil.findFarzoneId(kubeConfiguration, refJobView.getJob()).isPresent()\n-                || kubeSchedulerPredicate.test(Pair.of(jobDescriptor, capacityGroupDescriptor))) {\n+        if (JobManagerUtil.shouldAssignToKubeScheduler(refJobView.getJob(), capacityGroupDescriptor, kubeConfiguration, kubeSchedulerPredicate)) {\n             taskContext = CollectionsExt.copyAndAdd(taskContext, TaskAttributes.TASK_ATTRIBUTES_OWNED_BY_KUBE_SCHEDULER, \"true\");\n         }\n \n", "next_change": {"commit": "08831e6b3221bdaf0ed6054e32789d991314416e", "changed_code": [{"header": "diff --git a/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/batch/BatchDifferenceResolver.java b/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/batch/BatchDifferenceResolver.java\nindex 13834bc87..d3ca2b770 100644\n--- a/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/batch/BatchDifferenceResolver.java\n+++ b/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/batch/BatchDifferenceResolver.java\n", "chunk": "@@ -256,7 +262,7 @@ public class BatchDifferenceResolver implements ReconciliationEngine.DifferenceR\n \n         JobDescriptor jobDescriptor = refJobView.getJob().getJobDescriptor();\n         ApplicationSLA capacityGroupDescriptor = JobManagerUtil.getCapacityGroupDescriptor(jobDescriptor, capacityGroupService);\n-        if (JobManagerUtil.shouldAssignToKubeScheduler(refJobView.getJob(), capacityGroupDescriptor, kubeConfiguration, kubeSchedulerPredicate)) {\n+        if (JobManagerUtil.shouldAssignToKubeScheduler(refJobView.getJob(), capacityGroupDescriptor, kubePodConfiguration, kubeSchedulerPredicate)) {\n             taskContext = CollectionsExt.copyAndAdd(taskContext, TaskAttributes.TASK_ATTRIBUTES_OWNED_BY_KUBE_SCHEDULER, \"true\");\n         }\n \n", "next_change": {"commit": "1742959cee768eaa4e2f39278a0395162a024e00", "changed_code": [{"header": "diff --git a/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/batch/BatchDifferenceResolver.java b/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/batch/BatchDifferenceResolver.java\nindex d3ca2b770..466c4194b 100644\n--- a/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/batch/BatchDifferenceResolver.java\n+++ b/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/batch/BatchDifferenceResolver.java\n", "chunk": "@@ -262,8 +263,12 @@ public class BatchDifferenceResolver implements ReconciliationEngine.DifferenceR\n \n         JobDescriptor jobDescriptor = refJobView.getJob().getJobDescriptor();\n         ApplicationSLA capacityGroupDescriptor = JobManagerUtil.getCapacityGroupDescriptor(jobDescriptor, capacityGroupService);\n+        String resourcePool = capacityGroupDescriptor.getResourcePool();\n         if (JobManagerUtil.shouldAssignToKubeScheduler(refJobView.getJob(), capacityGroupDescriptor, kubePodConfiguration, kubeSchedulerPredicate)) {\n-            taskContext = CollectionsExt.copyAndAdd(taskContext, TaskAttributes.TASK_ATTRIBUTES_OWNED_BY_KUBE_SCHEDULER, \"true\");\n+            taskContext = CollectionsExt.copyAndAdd(taskContext, ImmutableMap.of(\n+                    TaskAttributes.TASK_ATTRIBUTES_OWNED_BY_KUBE_SCHEDULER, \"true\",\n+                    TaskAttributes.TASK_ATTRIBUTES_RESOURCE_POOL, resourcePool,\n+                    TaskAttributes.TASK_ATTRIBUTES_TIER, capacityGroupDescriptor.getTier().name()));\n         }\n \n         TitusChangeAction storeAction = storeWriteRetryInterceptor.apply(\n", "next_change": {"commit": "6bc51693003baa1a7730bab21c6c323971af71b6", "changed_code": [{"header": "diff --git a/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/batch/BatchDifferenceResolver.java b/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/batch/BatchDifferenceResolver.java\nindex 466c4194b..a7828bf68 100644\n--- a/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/batch/BatchDifferenceResolver.java\n+++ b/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/batch/BatchDifferenceResolver.java\n", "chunk": "@@ -272,7 +278,7 @@ public class BatchDifferenceResolver implements ReconciliationEngine.DifferenceR\n         }\n \n         TitusChangeAction storeAction = storeWriteRetryInterceptor.apply(\n-                createOrReplaceTaskAction(configuration, jobStore, refJobView.getJobHolder(), taskIndex, clock, taskContext)\n+                createOrReplaceTaskAction(configuration, jobStore, refJobView.getJobHolder(), taskIndex, versionSupplier, clock, taskContext)\n         );\n         return Optional.of(storeAction);\n     }\n", "next_change": {"commit": "75f85f298c46381c92b8c22fdabc5a33f2e96b29", "changed_code": [{"header": "diff --git a/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/batch/BatchDifferenceResolver.java b/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/batch/BatchDifferenceResolver.java\nindex a7828bf68..d1103cdfa 100644\n--- a/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/batch/BatchDifferenceResolver.java\n+++ b/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/batch/BatchDifferenceResolver.java\n", "chunk": "@@ -278,7 +270,7 @@ public class BatchDifferenceResolver implements ReconciliationEngine.DifferenceR\n         }\n \n         TitusChangeAction storeAction = storeWriteRetryInterceptor.apply(\n-                createOrReplaceTaskAction(configuration, jobStore, refJobView.getJobHolder(), taskIndex, versionSupplier, clock, taskContext)\n+                createOrReplaceTaskAction(context, jobStore, refJobView.getJobHolder(), taskIndex, versionSupplier, clock, taskContext)\n         );\n         return Optional.of(storeAction);\n     }\n", "next_change": {"commit": "ea0035372ff9e62c4524589fc031ae80924d0862", "changed_code": [{"header": "diff --git a/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/batch/BatchDifferenceResolver.java b/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/batch/BatchDifferenceResolver.java\nindex d1103cdfa..9f5d90586 100644\n--- a/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/batch/BatchDifferenceResolver.java\n+++ b/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/batch/BatchDifferenceResolver.java\n", "chunk": "@@ -260,17 +242,13 @@ public class BatchDifferenceResolver implements ReconciliationEngine.DifferenceR\n         JobDescriptor jobDescriptor = refJobView.getJob().getJobDescriptor();\n         ApplicationSLA capacityGroupDescriptor = JobManagerUtil.getCapacityGroupDescriptor(jobDescriptor, capacityGroupService);\n         String resourcePool = capacityGroupDescriptor.getResourcePool();\n-        // TODO: remove this check, it's kept here for integration tests\n-        // EmbeddedTitusMaster still relies on the Mesos/Fenzo integration\n-        if (featureConfiguration.isKubeSchedulerEnabled()) {\n-            taskContext = CollectionsExt.copyAndAdd(taskContext, ImmutableMap.of(\n-                    TaskAttributes.TASK_ATTRIBUTES_OWNED_BY_KUBE_SCHEDULER, \"true\",\n-                    TaskAttributes.TASK_ATTRIBUTES_RESOURCE_POOL, resourcePool,\n-                    TaskAttributes.TASK_ATTRIBUTES_TIER, capacityGroupDescriptor.getTier().name()));\n-        }\n+        taskContext = CollectionsExt.copyAndAdd(taskContext, ImmutableMap.of(\n+                TaskAttributes.TASK_ATTRIBUTES_OWNED_BY_KUBE_SCHEDULER, \"true\",\n+                TaskAttributes.TASK_ATTRIBUTES_RESOURCE_POOL, resourcePool,\n+                TaskAttributes.TASK_ATTRIBUTES_TIER, capacityGroupDescriptor.getTier().name()));\n \n         TitusChangeAction storeAction = storeWriteRetryInterceptor.apply(\n-                createOrReplaceTaskAction(context, jobStore, refJobView.getJobHolder(), taskIndex, versionSupplier, clock, taskContext)\n+                createOrReplaceTaskAction(runtime, jobStore, refJobView.getJobHolder(), taskIndex, versionSupplier, clock, taskContext)\n         );\n         return Optional.of(storeAction);\n     }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "834a1de559c106a43d5128396657f2d7d690bf5e", "message": "Merge commit", "committedDate": null}, {"oid": "6ac8c2ff0e0261eb0329add47bfbc563ae6d8317", "committedDate": "2020-03-17 13:00:42 -0700", "message": "More routing options for Fenzo/Kube scheduler (#811)"}, {"oid": "9939b4a2f0efae4d937128ad902089beee2cba3a", "committedDate": "2020-03-17 16:27:28 -0700", "message": "Keep task retryer in the direct Kube integration (#812)"}, {"oid": "ba0c8724fc33e3540f0c1f6b631db8ecfa521600", "committedDate": "2020-03-24 08:22:45 -0700", "message": "KubeScheduler task in Accepted state without pod not launched after failover (#820)"}, {"oid": "67e4527b9f5adfcbd6ef04986f63ca4d6e91b397", "committedDate": "2020-06-08 09:22:23 -0700", "message": "Handle pod creation failures (#857)"}, {"oid": "fb27bab650de9ccdf2cfe11ae338fd885060096b", "committedDate": "2020-06-08 14:52:13 -0700", "message": "Do not attempt scheduling if Kube integrator is not ready or healthy (#864)"}, {"oid": "df27cb9dffbe84d7be0b23f138b87958f3a4803b", "committedDate": "2020-08-28 12:39:21 -0700", "message": "Rate limit reconciliation of tasks stuck in state (#905)"}, {"oid": "a518f02a6c89633e1dc1f54cd07c5fcd24032cb6", "committedDate": "2020-11-18 10:14:52 -0800", "message": "Initial support for EBS volume model and validation (#952)"}, {"oid": "3615a9408e05eb09ed40fdb5da0f555dc88b8b12", "committedDate": "2021-02-03 11:09:00 -0800", "message": "Report properly the caller id and reason in the job transaction log (#975)"}, {"oid": "1dc33182886c3dc5b38bf78decc408174d09d7b0", "committedDate": "2021-02-24 10:11:52 -0800", "message": "Assign jobs belonging to KubeScheduler capacity groups to KubeScheduler always (#989)"}, {"oid": "08831e6b3221bdaf0ed6054e32789d991314416e", "committedDate": "2021-02-24 14:45:49 -0800", "message": "extract pod object building to a single interface (#988)"}, {"oid": "1742959cee768eaa4e2f39278a0395162a024e00", "committedDate": "2021-06-15 19:59:20 -0700", "message": "Add resourcePool and tier attributes to tasks scheduled with KubeScheduler (#1052)"}, {"oid": "6bc51693003baa1a7730bab21c6c323971af71b6", "committedDate": "2021-07-20 15:58:13 -0700", "message": "Add last update timestamp to Job/Task objects and GRPC event notifications (#1066)"}, {"oid": "0f42a929e70fbb44de7092341abd8ba661d1b54c", "committedDate": "2021-08-23 08:51:16 -0700", "message": "Move Kube classes from package mesos to kubernetes (#1090)"}, {"oid": "8a8f2cbf45fe3483a4e4bf86a5403e67083e29db", "committedDate": "2021-09-07 12:30:43 -0700", "message": "code hygiene: remove unused code (#1102)"}, {"oid": "75f85f298c46381c92b8c22fdabc5a33f2e96b29", "committedDate": "2021-09-28 10:37:32 -0700", "message": "Add system retryer configuration to job service (#1120)"}, {"oid": "ea0035372ff9e62c4524589fc031ae80924d0862", "committedDate": "2021-10-05 11:07:20 -0700", "message": "Remove Fenzo integration from JobService; migrate the JobService component tests off Fenzo (#1125)"}, {"oid": "932f72ca88b2ec5f7b5b6efb4408e72c62e0e32a", "committedDate": "2021-10-11 10:35:30 -0700", "message": "Remove Fenzo scheduler (#1131)"}, {"oid": "c1f1244180c308bb1230aa22ef4265ed0a949d75", "committedDate": "2021-10-19 13:15:52 -0700", "message": "Do not auto terminate batch job if not all tasks were run (#1137)"}, {"oid": "8f65313487eee2ac04c71e3c043ca7ed19c6a612", "committedDate": "2022-01-14 14:27:26 -0800", "message": "Remove the remaining Fenzo checks (#1207)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5MjIyMA==", "url": "https://github.com/Netflix/titus-control-plane/pull/800#discussion_r388492220", "body": "same as above, centralize this into the predicate", "bodyText": "same as above, centralize this into the predicate", "bodyHTML": "<p dir=\"auto\">same as above, centralize this into the predicate</p>", "author": "fabiokung", "createdAt": "2020-03-05T18:51:45Z", "path": "titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/service/ServiceDifferenceResolver.java", "diffHunk": "@@ -261,7 +267,7 @@ public ServiceDifferenceResolver(\n         }\n \n         Map<String, String> taskContext = getTaskContext(previousTask, unassignedIpAllocations);\n-        if (kubeSchedulerPredicate.test(refJobView.getJob().getJobDescriptor())) {\n+        if (KubeUtil.findFarzoneId(kubeConfiguration, refJobView.getJob()).isPresent() || kubeSchedulerPredicate.test(refJobView.getJob().getJobDescriptor())) {", "originalCommit": "56dbe6d10d178829b6fb132efd470def8ee963b7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5ODI0MA==", "url": "https://github.com/Netflix/titus-control-plane/pull/800#discussion_r388498240", "bodyText": "I have tried that, but the code is in a different subproject.", "author": "tbak", "createdAt": "2020-03-05T19:02:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5MjIyMA=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "6ac8c2ff0e0261eb0329add47bfbc563ae6d8317", "changed_code": [{"header": "diff --git a/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/service/ServiceDifferenceResolver.java b/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/service/ServiceDifferenceResolver.java\nindex 48cf911ca..f771208ea 100644\n--- a/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/service/ServiceDifferenceResolver.java\n+++ b/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/service/ServiceDifferenceResolver.java\n", "chunk": "@@ -267,7 +268,10 @@ public class ServiceDifferenceResolver implements ReconciliationEngine.Differenc\n         }\n \n         Map<String, String> taskContext = getTaskContext(previousTask, unassignedIpAllocations);\n-        if (KubeUtil.findFarzoneId(kubeConfiguration, refJobView.getJob()).isPresent() || kubeSchedulerPredicate.test(refJobView.getJob().getJobDescriptor())) {\n+\n+        JobDescriptor jobDescriptor = refJobView.getJob().getJobDescriptor();\n+        ApplicationSLA capacityGroupDescriptor = JobManagerUtil.getCapacityGroupDescriptor(jobDescriptor, capacityGroupService);\n+        if (KubeUtil.findFarzoneId(kubeConfiguration, refJobView.getJob()).isPresent() || kubeSchedulerPredicate.test(Pair.of(jobDescriptor, capacityGroupDescriptor))) {\n             taskContext = CollectionsExt.copyAndAdd(taskContext, TaskAttributes.TASK_ATTRIBUTES_OWNED_BY_KUBE_SCHEDULER, \"true\");\n         }\n \n", "next_change": {"commit": "a518f02a6c89633e1dc1f54cd07c5fcd24032cb6", "changed_code": [{"header": "diff --git a/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/service/ServiceDifferenceResolver.java b/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/service/ServiceDifferenceResolver.java\nindex f771208ea..abda8100f 100644\n--- a/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/service/ServiceDifferenceResolver.java\n+++ b/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/service/ServiceDifferenceResolver.java\n", "chunk": "@@ -267,7 +274,7 @@ public class ServiceDifferenceResolver implements ReconciliationEngine.Differenc\n             return Optional.empty();\n         }\n \n-        Map<String, String> taskContext = getTaskContext(previousTask, unassignedIpAllocations);\n+        Map<String, String> taskContext = getTaskContext(previousTask, unassignedIpAllocations, unassignedEbsVolumeIds);\n \n         JobDescriptor jobDescriptor = refJobView.getJob().getJobDescriptor();\n         ApplicationSLA capacityGroupDescriptor = JobManagerUtil.getCapacityGroupDescriptor(jobDescriptor, capacityGroupService);\n", "next_change": {"commit": "1dc33182886c3dc5b38bf78decc408174d09d7b0", "changed_code": [{"header": "diff --git a/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/service/ServiceDifferenceResolver.java b/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/service/ServiceDifferenceResolver.java\nindex abda8100f..0deec916d 100644\n--- a/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/service/ServiceDifferenceResolver.java\n+++ b/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/service/ServiceDifferenceResolver.java\n", "chunk": "@@ -278,7 +279,7 @@ public class ServiceDifferenceResolver implements ReconciliationEngine.Differenc\n \n         JobDescriptor jobDescriptor = refJobView.getJob().getJobDescriptor();\n         ApplicationSLA capacityGroupDescriptor = JobManagerUtil.getCapacityGroupDescriptor(jobDescriptor, capacityGroupService);\n-        if (KubeUtil.findFarzoneId(kubeConfiguration, refJobView.getJob()).isPresent() || kubeSchedulerPredicate.test(Pair.of(jobDescriptor, capacityGroupDescriptor))) {\n+        if (JobManagerUtil.shouldAssignToKubeScheduler(refJobView.getJob(), capacityGroupDescriptor, kubeConfiguration, kubeSchedulerPredicate)) {\n             taskContext = CollectionsExt.copyAndAdd(taskContext, TaskAttributes.TASK_ATTRIBUTES_OWNED_BY_KUBE_SCHEDULER, \"true\");\n         }\n \n", "next_change": {"commit": "08831e6b3221bdaf0ed6054e32789d991314416e", "changed_code": [{"header": "diff --git a/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/service/ServiceDifferenceResolver.java b/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/service/ServiceDifferenceResolver.java\nindex 0deec916d..ab25e8db9 100644\n--- a/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/service/ServiceDifferenceResolver.java\n+++ b/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/service/ServiceDifferenceResolver.java\n", "chunk": "@@ -279,7 +285,7 @@ public class ServiceDifferenceResolver implements ReconciliationEngine.Differenc\n \n         JobDescriptor jobDescriptor = refJobView.getJob().getJobDescriptor();\n         ApplicationSLA capacityGroupDescriptor = JobManagerUtil.getCapacityGroupDescriptor(jobDescriptor, capacityGroupService);\n-        if (JobManagerUtil.shouldAssignToKubeScheduler(refJobView.getJob(), capacityGroupDescriptor, kubeConfiguration, kubeSchedulerPredicate)) {\n+        if (JobManagerUtil.shouldAssignToKubeScheduler(refJobView.getJob(), capacityGroupDescriptor, kubePodConfiguration, kubeSchedulerPredicate)) {\n             taskContext = CollectionsExt.copyAndAdd(taskContext, TaskAttributes.TASK_ATTRIBUTES_OWNED_BY_KUBE_SCHEDULER, \"true\");\n         }\n \n", "next_change": {"commit": "1742959cee768eaa4e2f39278a0395162a024e00", "changed_code": [{"header": "diff --git a/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/service/ServiceDifferenceResolver.java b/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/service/ServiceDifferenceResolver.java\nindex ab25e8db9..c098d82d8 100644\n--- a/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/service/ServiceDifferenceResolver.java\n+++ b/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/service/ServiceDifferenceResolver.java\n", "chunk": "@@ -285,8 +285,12 @@ public class ServiceDifferenceResolver implements ReconciliationEngine.Differenc\n \n         JobDescriptor jobDescriptor = refJobView.getJob().getJobDescriptor();\n         ApplicationSLA capacityGroupDescriptor = JobManagerUtil.getCapacityGroupDescriptor(jobDescriptor, capacityGroupService);\n+        String resourcePool = capacityGroupDescriptor.getResourcePool();\n         if (JobManagerUtil.shouldAssignToKubeScheduler(refJobView.getJob(), capacityGroupDescriptor, kubePodConfiguration, kubeSchedulerPredicate)) {\n-            taskContext = CollectionsExt.copyAndAdd(taskContext, TaskAttributes.TASK_ATTRIBUTES_OWNED_BY_KUBE_SCHEDULER, \"true\");\n+            taskContext = CollectionsExt.copyAndAdd(taskContext, ImmutableMap.of(\n+                    TaskAttributes.TASK_ATTRIBUTES_OWNED_BY_KUBE_SCHEDULER, \"true\",\n+                    TaskAttributes.TASK_ATTRIBUTES_RESOURCE_POOL, resourcePool,\n+                    TaskAttributes.TASK_ATTRIBUTES_TIER, capacityGroupDescriptor.getTier().name()));\n         }\n \n         TitusChangeAction storeAction = storeWriteRetryInterceptor.apply(\n", "next_change": {"commit": "6bc51693003baa1a7730bab21c6c323971af71b6", "changed_code": [{"header": "diff --git a/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/service/ServiceDifferenceResolver.java b/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/service/ServiceDifferenceResolver.java\nindex c098d82d8..4c7bd4be7 100644\n--- a/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/service/ServiceDifferenceResolver.java\n+++ b/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/service/ServiceDifferenceResolver.java\n", "chunk": "@@ -294,7 +300,7 @@ public class ServiceDifferenceResolver implements ReconciliationEngine.Differenc\n         }\n \n         TitusChangeAction storeAction = storeWriteRetryInterceptor.apply(\n-                createOrReplaceTaskAction(configuration, jobStore, refJobView.getJobHolder(), previousTask, clock, taskContext)\n+                createOrReplaceTaskAction(configuration, jobStore, versionSupplier, refJobView.getJobHolder(), previousTask, clock, taskContext)\n         );\n         return Optional.of(storeAction);\n     }\n", "next_change": {"commit": "75f85f298c46381c92b8c22fdabc5a33f2e96b29", "changed_code": [{"header": "diff --git a/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/service/ServiceDifferenceResolver.java b/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/service/ServiceDifferenceResolver.java\nindex 4c7bd4be7..40720d01a 100644\n--- a/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/service/ServiceDifferenceResolver.java\n+++ b/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/service/ServiceDifferenceResolver.java\n", "chunk": "@@ -300,7 +290,7 @@ public class ServiceDifferenceResolver implements ReconciliationEngine.Differenc\n         }\n \n         TitusChangeAction storeAction = storeWriteRetryInterceptor.apply(\n-                createOrReplaceTaskAction(configuration, jobStore, versionSupplier, refJobView.getJobHolder(), previousTask, clock, taskContext)\n+                createOrReplaceTaskAction(context, jobStore, versionSupplier, refJobView.getJobHolder(), previousTask, clock, taskContext)\n         );\n         return Optional.of(storeAction);\n     }\n", "next_change": {"commit": "ea0035372ff9e62c4524589fc031ae80924d0862", "changed_code": [{"header": "diff --git a/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/service/ServiceDifferenceResolver.java b/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/service/ServiceDifferenceResolver.java\nindex 40720d01a..248deaede 100644\n--- a/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/service/ServiceDifferenceResolver.java\n+++ b/titus-server-master/src/main/java/com/netflix/titus/master/jobmanager/service/service/ServiceDifferenceResolver.java\n", "chunk": "@@ -282,15 +265,13 @@ public class ServiceDifferenceResolver implements ReconciliationEngine.Differenc\n         JobDescriptor jobDescriptor = refJobView.getJob().getJobDescriptor();\n         ApplicationSLA capacityGroupDescriptor = JobManagerUtil.getCapacityGroupDescriptor(jobDescriptor, capacityGroupService);\n         String resourcePool = capacityGroupDescriptor.getResourcePool();\n-        if (featureConfiguration.isKubeSchedulerEnabled()) {\n-            taskContext = CollectionsExt.copyAndAdd(taskContext, ImmutableMap.of(\n-                    TaskAttributes.TASK_ATTRIBUTES_OWNED_BY_KUBE_SCHEDULER, \"true\",\n-                    TaskAttributes.TASK_ATTRIBUTES_RESOURCE_POOL, resourcePool,\n-                    TaskAttributes.TASK_ATTRIBUTES_TIER, capacityGroupDescriptor.getTier().name()));\n-        }\n+        taskContext = CollectionsExt.copyAndAdd(taskContext, ImmutableMap.of(\n+                TaskAttributes.TASK_ATTRIBUTES_OWNED_BY_KUBE_SCHEDULER, \"true\",\n+                TaskAttributes.TASK_ATTRIBUTES_RESOURCE_POOL, resourcePool,\n+                TaskAttributes.TASK_ATTRIBUTES_TIER, capacityGroupDescriptor.getTier().name()));\n \n         TitusChangeAction storeAction = storeWriteRetryInterceptor.apply(\n-                createOrReplaceTaskAction(context, jobStore, versionSupplier, refJobView.getJobHolder(), previousTask, clock, taskContext)\n+                createOrReplaceTaskAction(runtime, jobStore, versionSupplier, refJobView.getJobHolder(), previousTask, clock, taskContext)\n         );\n         return Optional.of(storeAction);\n     }\n", "next_change": null}]}}]}}]}}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "834a1de559c106a43d5128396657f2d7d690bf5e", "message": "Merge commit", "committedDate": null}, {"oid": "6ac8c2ff0e0261eb0329add47bfbc563ae6d8317", "committedDate": "2020-03-17 13:00:42 -0700", "message": "More routing options for Fenzo/Kube scheduler (#811)"}, {"oid": "9939b4a2f0efae4d937128ad902089beee2cba3a", "committedDate": "2020-03-17 16:27:28 -0700", "message": "Keep task retryer in the direct Kube integration (#812)"}, {"oid": "ba0c8724fc33e3540f0c1f6b631db8ecfa521600", "committedDate": "2020-03-24 08:22:45 -0700", "message": "KubeScheduler task in Accepted state without pod not launched after failover (#820)"}, {"oid": "67e4527b9f5adfcbd6ef04986f63ca4d6e91b397", "committedDate": "2020-06-08 09:22:23 -0700", "message": "Handle pod creation failures (#857)"}, {"oid": "fb27bab650de9ccdf2cfe11ae338fd885060096b", "committedDate": "2020-06-08 14:52:13 -0700", "message": "Do not attempt scheduling if Kube integrator is not ready or healthy (#864)"}, {"oid": "df27cb9dffbe84d7be0b23f138b87958f3a4803b", "committedDate": "2020-08-28 12:39:21 -0700", "message": "Rate limit reconciliation of tasks stuck in state (#905)"}, {"oid": "a518f02a6c89633e1dc1f54cd07c5fcd24032cb6", "committedDate": "2020-11-18 10:14:52 -0800", "message": "Initial support for EBS volume model and validation (#952)"}, {"oid": "3615a9408e05eb09ed40fdb5da0f555dc88b8b12", "committedDate": "2021-02-03 11:09:00 -0800", "message": "Report properly the caller id and reason in the job transaction log (#975)"}, {"oid": "1dc33182886c3dc5b38bf78decc408174d09d7b0", "committedDate": "2021-02-24 10:11:52 -0800", "message": "Assign jobs belonging to KubeScheduler capacity groups to KubeScheduler always (#989)"}, {"oid": "08831e6b3221bdaf0ed6054e32789d991314416e", "committedDate": "2021-02-24 14:45:49 -0800", "message": "extract pod object building to a single interface (#988)"}, {"oid": "1742959cee768eaa4e2f39278a0395162a024e00", "committedDate": "2021-06-15 19:59:20 -0700", "message": "Add resourcePool and tier attributes to tasks scheduled with KubeScheduler (#1052)"}, {"oid": "9294b561ec3972fabdebf2953b1acf445e4a04ac", "committedDate": "2021-06-18 12:18:08 -0700", "message": "Replace streaming API (#1054)"}, {"oid": "6bc51693003baa1a7730bab21c6c323971af71b6", "committedDate": "2021-07-20 15:58:13 -0700", "message": "Add last update timestamp to Job/Task objects and GRPC event notifications (#1066)"}, {"oid": "0f42a929e70fbb44de7092341abd8ba661d1b54c", "committedDate": "2021-08-23 08:51:16 -0700", "message": "Move Kube classes from package mesos to kubernetes (#1090)"}, {"oid": "8a8f2cbf45fe3483a4e4bf86a5403e67083e29db", "committedDate": "2021-09-07 12:30:43 -0700", "message": "code hygiene: remove unused code (#1102)"}, {"oid": "75f85f298c46381c92b8c22fdabc5a33f2e96b29", "committedDate": "2021-09-28 10:37:32 -0700", "message": "Add system retryer configuration to job service (#1120)"}, {"oid": "ea0035372ff9e62c4524589fc031ae80924d0862", "committedDate": "2021-10-05 11:07:20 -0700", "message": "Remove Fenzo integration from JobService; migrate the JobService component tests off Fenzo (#1125)"}, {"oid": "932f72ca88b2ec5f7b5b6efb4408e72c62e0e32a", "committedDate": "2021-10-11 10:35:30 -0700", "message": "Remove Fenzo scheduler (#1131)"}, {"oid": "8f65313487eee2ac04c71e3c043ca7ed19c6a612", "committedDate": "2022-01-14 14:27:26 -0800", "message": "Remove the remaining Fenzo checks (#1207)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5NDI2MQ==", "url": "https://github.com/Netflix/titus-control-plane/pull/800#discussion_r388494261", "body": "could this be generalized to any availabilityZones? Does it matter that it is a farzone? I'd recommend naming this `isAvailabilityZoneOwnedByKubeScheduler()` and `configuration.getAvailabilityZonesOwnedByKubeScheduler()`, or similar.\r\n\r\nIOW, can we abstract away that some AZs are farzones?", "bodyText": "could this be generalized to any availabilityZones? Does it matter that it is a farzone? I'd recommend naming this isAvailabilityZoneOwnedByKubeScheduler() and configuration.getAvailabilityZonesOwnedByKubeScheduler(), or similar.\nIOW, can we abstract away that some AZs are farzones?", "bodyHTML": "<p dir=\"auto\">could this be generalized to any availabilityZones? Does it matter that it is a farzone? I'd recommend naming this <code>isAvailabilityZoneOwnedByKubeScheduler()</code> and <code>configuration.getAvailabilityZonesOwnedByKubeScheduler()</code>, or similar.</p>\n<p dir=\"auto\">IOW, can we abstract away that some AZs are farzones?</p>", "author": "fabiokung", "createdAt": "2020-03-05T18:55:22Z", "path": "titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/KubeUtil.java", "diffHunk": "@@ -148,4 +161,48 @@ public static String formatV1ContainerState(V1ContainerState containerState) {\n \n         return \"{state=<not set>}\";\n     }\n+\n+    /**\n+     * If a job has an availability zone hard constraint with a farzone id, return this farzone id.\n+     */\n+    public static Optional<String> findFarzoneId(DirectKubeConfiguration configuration, Job job) {\n+        List<String> farzones = configuration.getFarzones();", "originalCommit": "56dbe6d10d178829b6fb132efd470def8ee963b7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5OTYzNQ==", "url": "https://github.com/Netflix/titus-control-plane/pull/800#discussion_r388499635", "bodyText": "It is more than an additional zone. Farzones are excluded from the default scheduling, and there is extra logic around that. I would prefer to keep it explicit.", "author": "tbak", "createdAt": "2020-03-05T19:04:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5NDI2MQ=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "1d75da8ccd2a187e76207ff707515a9615370fbe", "changed_code": [{"header": "diff --git a/titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/KubeUtil.java b/titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/KubeUtil.java\nindex 3b6b415a3..b573cc646 100644\n--- a/titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/KubeUtil.java\n+++ b/titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/KubeUtil.java\n", "chunk": "@@ -165,14 +179,13 @@ public class KubeUtil {\n     /**\n      * If a job has an availability zone hard constraint with a farzone id, return this farzone id.\n      */\n-    public static Optional<String> findFarzoneId(DirectKubeConfiguration configuration, Job job) {\n+    public static Optional<String> findFarzoneId(DirectKubeConfiguration configuration, Job<?> job) {\n         List<String> farzones = configuration.getFarzones();\n         if (CollectionsExt.isNullOrEmpty(farzones)) {\n             return Optional.empty();\n         }\n \n-        Map<String, String> hardConstraints = job.getJobDescriptor().getContainer().getHardConstraints();\n-        String zone = hardConstraints.get(JobConstraints.AVAILABILITY_ZONE);\n+        String zone = JobFunctions.findHardConstraint(job, JobConstraints.AVAILABILITY_ZONE).orElse(\"\");\n         if (StringExt.isEmpty(zone)) {\n             return Optional.empty();\n         }\n", "next_change": null}]}, "commits_in_main": [{"oid": "834a1de559c106a43d5128396657f2d7d690bf5e", "message": "Merge commit", "committedDate": null}, {"oid": "502b0d8150cc56388d4ac4a35fc5ca544232967c", "committedDate": "2020-03-05 20:18:10 -0800", "message": "Upgrade to kube-java-client 7.x (#797)"}, {"oid": "79a89b74589fc6e6da9e07face1ab4b1fd63907a", "committedDate": "2020-03-12 12:00:55 -0700", "message": "add job descriptor annotation (#804)"}, {"oid": "d35286955302d65c637815c6d6b6707831fffa93", "committedDate": "2020-03-20 14:13:25 -0700", "message": "Add configurable Fenzo taints (#817)"}, {"oid": "73a3963c1c21d75a10fa6b1eadae8a897fac550c", "committedDate": "2020-03-25 08:44:04 -0700", "message": "change jobDescriptor annotation payload to use the json API representation (#821)"}, {"oid": "5ec20ab8600dd6f8b466dcaa045203815f7c816f", "committedDate": "2020-04-24 13:30:32 -0700", "message": "handle Pod opportunistic annotations (#841)"}, {"oid": "67cacd3c6958d4a5192624dcf023a23b49afee88", "committedDate": "2020-05-11 09:05:20 -0700", "message": "Add a Kube backend constraint (#844)"}, {"oid": "5abbf67fd2c7543dcae9e13faed02d072a86a63b", "committedDate": "2020-05-26 10:52:41 -0700", "message": "Feature/kube informer sync (#850)"}, {"oid": "7f69c40b55bfc4205048ae1841650324ec3b3151", "committedDate": "2020-05-27 10:27:11 -0700", "message": "Add pod size metric + minor code cleanup (#851)"}, {"oid": "a02f248582c9fa650d92aa6ca141e6db48588042", "committedDate": "2020-06-02 14:52:38 -0700", "message": "Add configurable finished pod GC delay (#855)"}, {"oid": "43575f1e7375eafe5be9a0ebffac321a36ef20d1", "committedDate": "2020-06-04 10:48:35 -0700", "message": "add scheduling constraint for kube nodes (#858)"}, {"oid": "af8ce7106d0a9adb6c7c087f29e65b422de8facb", "committedDate": "2020-06-08 17:05:08 -0700", "message": "Better error reporting for Kube API exceptions (#865)"}, {"oid": "756a04c6ab435aaf2f6a771534b9561e62c010a9", "committedDate": "2020-06-12 10:36:42 -0700", "message": "Misc null validations (#871)"}, {"oid": "073f41752fb92b729f413041d753cdc306acec52", "committedDate": "2020-06-16 12:51:34 -0700", "message": "Check if all required node attributes are present (#873)"}, {"oid": "ac3944c628902ab80bccbd058b2bb0999f15a99c", "committedDate": "2020-06-25 16:03:30 -0700", "message": "Use KubeClient async API to launch pods (#878)"}, {"oid": "e579040bb21f013e86aa5ce87f8e41f03ea7778d", "committedDate": "2020-08-21 10:30:08 -0700", "message": "fenzo should ignore nodes marked with uninitialized taint (#900)"}, {"oid": "85037bbf98a3b5b5b055d43021e94cc9410aae52", "committedDate": "2020-08-25 14:41:31 -0700", "message": "KubeScheduler & task relocation support (#902)"}, {"oid": "423620274575ed4e1371a378b5c07523fbdb3739", "committedDate": "2020-08-28 15:53:11 -0700", "message": "Make the KubeNotificationProcessor understand pod ips from kubelet (#903)"}, {"oid": "31e69550eb6ee029508a45d484ef710a483f54c5", "committedDate": "2020-10-05 12:07:18 -0700", "message": "extract gc controller logic from KubeApiServerIntegrator into GC controllers (#889)"}, {"oid": "d61da0909ecc2e1dc0252d4b87c56b41e8a7e716", "committedDate": "2020-10-06 13:30:25 -0700", "message": "Add account id and subnets job parameters to pod annotations (#932)"}, {"oid": "1d75da8ccd2a187e76207ff707515a9615370fbe", "committedDate": "2020-11-18 10:26:26 -0800", "message": "Hard/soft constraint names are case sensitive (#956)"}, {"oid": "ca4344f029bc598c95ca513c51706383e64f6b88", "committedDate": "2020-11-20 07:01:26 -0800", "message": "Initial persistent volume GC functionality (#957)"}, {"oid": "bc8747660eb6c1e72031d69ffd30d375eacb9de4", "committedDate": "2020-12-02 11:30:47 -0800", "message": "Align KubeScheduler pod -> task state mapping with KubeApiServerIntegrator (#961)"}, {"oid": "29c1834e42999d9cc23460f5657e8b706174b8cc", "committedDate": "2021-02-09 11:45:29 -0800", "message": "Add capacity group annotation to a pod (#982)"}, {"oid": "fa9c3834e8f74d86f56ed6195e1822452a771cb0", "committedDate": "2021-02-10 09:32:14 -0800", "message": "Set pod capacity group in labels not annotations (#984)"}, {"oid": "08831e6b3221bdaf0ed6054e32789d991314416e", "committedDate": "2021-02-24 14:45:49 -0800", "message": "extract pod object building to a single interface (#988)"}, {"oid": "cda113f0a15a490f358063926f10e187018a893a", "committedDate": "2021-08-12 14:18:53 -0400", "message": "K8s 1.20 client upgrade (#1082)"}, {"oid": "a35bb67dd4cc522aee4fc7129416cd77168dd934", "committedDate": "2021-08-16 12:29:40 -0700", "message": "Hide Kube Java lib invocations behind internal API (#1080)"}, {"oid": "acf50da80a5dd23986b9ebba2a407e7dc5b8b020", "committedDate": "2021-08-18 15:46:51 -0700", "message": "Only set the ipv4 container attribute if we have one (#1086)"}, {"oid": "534dceae673eae35fb7553387787b7529259f67b", "committedDate": "2021-10-13 09:16:12 -0700", "message": "Remove all the remaining dependencies on fenzo and mesos (#1132)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5NTEwNQ==", "url": "https://github.com/Netflix/titus-control-plane/pull/800#discussion_r388495105", "body": "same, generalize to any AZs, farzone or not", "bodyText": "same, generalize to any AZs, farzone or not", "bodyHTML": "<p dir=\"auto\">same, generalize to any AZs, farzone or not</p>", "author": "fabiokung", "createdAt": "2020-03-05T18:56:44Z", "path": "titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/direct/DefaultPodAffinityFactory.java", "diffHunk": "@@ -181,6 +186,12 @@ private void addNodeAffinityPreferredSelectorConstraint(String key, String value\n             term.addMatchExpressionsItem(requirement);\n         }\n \n+        private void processFarzoneConstraints() {", "originalCommit": "56dbe6d10d178829b6fb132efd470def8ee963b7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5OTc5OQ==", "url": "https://github.com/Netflix/titus-control-plane/pull/800#discussion_r388499799", "bodyText": "See my comment above ^^^.", "author": "tbak", "createdAt": "2020-03-05T19:05:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ5NTEwNQ=="}], "type": "inlineReview", "revised_code": null, "revised_code_in_main": {"commit": "8a244a9eb527ca112543e0c00bbc7ff2e6903eb2", "changed_code": [{"header": "diff --git a/titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/direct/DefaultPodAffinityFactory.java b/titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/direct/DefaultPodAffinityFactory.java\nindex 858dbbbe0..b7e0de1c7 100644\n--- a/titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/direct/DefaultPodAffinityFactory.java\n+++ b/titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/direct/DefaultPodAffinityFactory.java\n", "chunk": "@@ -181,15 +185,21 @@ public class DefaultPodAffinityFactory implements PodAffinityFactory {\n             V1NodeSelectorRequirement requirement = new V1NodeSelectorRequirement()\n                     .key(key)\n                     .operator(\"In\")\n-                    .values(Collections.singletonList(value));\n+                    .values(values);\n \n             term.addMatchExpressionsItem(requirement);\n         }\n \n-        private void processFarzoneConstraints() {\n-            KubeUtil.findFarzoneId(configuration, job).ifPresent(farzoneId ->\n-                    addNodeAffinityRequiredSelectorConstraint(KubeConstants.NODE_LABEL_ZONE, farzoneId)\n-            );\n+        private void processZoneConstraints() {\n+            // If we have a single zone hard constraint defined, there is no need to add anything on top of this.\n+            if (!StringExt.isEmpty(job.getJobDescriptor().getContainer().getHardConstraints().get(JobConstraints.AVAILABILITY_ZONE))) {\n+                return;\n+            }\n+\n+            // If there is no zone hard constraint, it defaults to placement in the primary availability zones\n+            if (!configuration.getPrimaryZones().isEmpty()) {\n+                addNodeAffinitySelectorConstraint(KubeConstants.NODE_LABEL_ZONE, configuration.getPrimaryZones(), true);\n+            }\n         }\n \n         private V1NodeAffinity getNodeAffinity() {\n", "next_change": {"commit": "a518f02a6c89633e1dc1f54cd07c5fcd24032cb6", "changed_code": [{"header": "diff --git a/titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/direct/DefaultPodAffinityFactory.java b/titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/direct/DefaultPodAffinityFactory.java\nindex b7e0de1c7..6442cb980 100644\n--- a/titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/direct/DefaultPodAffinityFactory.java\n+++ b/titus-server-master/src/main/java/com/netflix/titus/master/mesos/kubeapiserver/direct/DefaultPodAffinityFactory.java\n", "chunk": "@@ -190,12 +221,37 @@ public class DefaultPodAffinityFactory implements PodAffinityFactory {\n             term.addMatchExpressionsItem(requirement);\n         }\n \n+        private void processResourcePoolConstraints() {\n+            List<ResourcePoolAssignment> resourcePools = podResourcePoolResolver.resolve(job);\n+            if (resourcePools.isEmpty()) {\n+                return;\n+            }\n+\n+            List<String> names = resourcePools.stream().map(ResourcePoolAssignment::getResourcePoolName).collect(Collectors.toList());\n+            String rule = resourcePools.isEmpty() ? \"none\" :\n+                    (resourcePools.size() == 1\n+                            ? resourcePools.get(0).getRule()\n+                            : resourcePools.stream().map(ResourcePoolAssignment::getRule).collect(Collectors.joining(\",\"))\n+                    );\n+\n+            addNodeAffinitySelectorConstraint(KubeConstants.NODE_LABEL_RESOURCE_POOL, names, true);\n+            annotations.put(KubeConstants.TITUS_SCALER_DOMAIN + \"resource-pool-selection\", rule);\n+            annotations.put(KubeConstants.NODE_LABEL_RESOURCE_POOL, String.join(\",\", names));\n+        }\n+\n         private void processZoneConstraints() {\n             // If we have a single zone hard constraint defined, there is no need to add anything on top of this.\n             if (!StringExt.isEmpty(job.getJobDescriptor().getContainer().getHardConstraints().get(JobConstraints.AVAILABILITY_ZONE))) {\n                 return;\n             }\n \n+            // If there is an EBS volume, it defaults to placement in the volume's zone\n+            Optional<EbsVolume> optionalEbsVolume = EbsVolumeUtils.getEbsVolumeForTask(job, task);\n+            if (optionalEbsVolume.isPresent()) {\n+                addNodeAffinitySelectorConstraint(KubeConstants.NODE_LABEL_ZONE, optionalEbsVolume.get().getVolumeAvailabilityZone(), true);\n+                return;\n+            }\n+\n             // If there is no zone hard constraint, it defaults to placement in the primary availability zones\n             if (!configuration.getPrimaryZones().isEmpty()) {\n                 addNodeAffinitySelectorConstraint(KubeConstants.NODE_LABEL_ZONE, configuration.getPrimaryZones(), true);\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "834a1de559c106a43d5128396657f2d7d690bf5e", "message": "Merge commit", "committedDate": null}, {"oid": "502b0d8150cc56388d4ac4a35fc5ca544232967c", "committedDate": "2020-03-05 20:18:10 -0800", "message": "Upgrade to kube-java-client 7.x (#797)"}, {"oid": "8a244a9eb527ca112543e0c00bbc7ff2e6903eb2", "committedDate": "2020-03-12 16:33:19 -0700", "message": "Support Kube scheduler zone balancing (#807)"}, {"oid": "c7196706ef786e7ed5e04d339dfd33c897816e99", "committedDate": "2020-03-25 09:27:15 -0700", "message": "GPU instance type support by Kube Scheduler (#819)"}, {"oid": "bc9a22bffe95eae5ac4db00de41f2576e1928c5d", "committedDate": "2020-03-25 15:20:32 -0700", "message": "Ignore instance type constraint with empty value (#826)"}, {"oid": "5ec20ab8600dd6f8b466dcaa045203815f7c816f", "committedDate": "2020-04-24 13:30:32 -0700", "message": "handle Pod opportunistic annotations (#841)"}, {"oid": "67cacd3c6958d4a5192624dcf023a23b49afee88", "committedDate": "2020-05-11 09:05:20 -0700", "message": "Add a Kube backend constraint (#844)"}, {"oid": "ae2b539baba0b9f96f19ee723b39644faa5a07e3", "committedDate": "2020-07-17 14:09:13 -0700", "message": "kube-scheduler: case insensitive constraint names (#885)"}, {"oid": "85037bbf98a3b5b5b055d43021e94cc9410aae52", "committedDate": "2020-08-25 14:41:31 -0700", "message": "KubeScheduler & task relocation support (#902)"}, {"oid": "e5e342a9e864b75a94e2a9ff3cfd5f4598f1709f", "committedDate": "2020-08-27 12:21:05 -0700", "message": "Feature/resource pool assignment (#904)"}, {"oid": "246f641213702e8657ac712dd310c459f520889e", "committedDate": "2020-09-03 09:48:46 -0700", "message": "Add farzone to resource pool mapping (#912)"}, {"oid": "a518f02a6c89633e1dc1f54cd07c5fcd24032cb6", "committedDate": "2020-11-18 10:14:52 -0800", "message": "Initial support for EBS volume model and validation (#952)"}, {"oid": "1d75da8ccd2a187e76207ff707515a9615370fbe", "committedDate": "2020-11-18 10:26:26 -0800", "message": "Hard/soft constraint names are case sensitive (#956)"}, {"oid": "08831e6b3221bdaf0ed6054e32789d991314416e", "committedDate": "2021-02-24 14:45:49 -0800", "message": "extract pod object building to a single interface (#988)"}]}]}