{"pr_number": 2566, "pr_title": "Make sure that thumbnailing timeout kills both imagick and ghostscript", "pr_author": "SammyIsConfused", "pr_createdAt": "2020-11-29T22:14:00Z", "pr_url": "https://github.com/openequella/openEQUELLA/pull/2566", "timeline": [{"oid": "d417f1ba08745cec6f07d0ad85e20db588c6c403", "url": "https://github.com/openequella/openEQUELLA/commit/d417f1ba08745cec6f07d0ad85e20db588c6c403", "message": "Make sure that Timeout kills both imagick and ghostscript", "committedDate": "2020-11-29T22:11:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjMyNDY2MQ==", "url": "https://github.com/openequella/openEQUELLA/pull/2566#discussion_r532324661", "body": "I gather this must be following an example, as there is no need for this setup here. It can just be a stand-alone static method like the others in this class. Probably with a signature like: `public static void killLinuxProcessTree(int pid)`", "bodyText": "I gather this must be following an example, as there is no need for this setup here. It can just be a stand-alone static method like the others in this class. Probably with a signature like: public static void killLinuxProcessTree(int pid)", "bodyHTML": "<p dir=\"auto\">I gather this must be following an example, as there is no need for this setup here. It can just be a stand-alone static method like the others in this class. Probably with a signature like: <code>public static void killLinuxProcessTree(int pid)</code></p>", "author": "edalex-ian", "createdAt": "2020-11-30T03:06:44Z", "path": "Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java", "diffHunk": "@@ -52,6 +55,71 @@\n     \"\", \".exe\", \".bat\"\n   }; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$\n \n+  /**\n+   * Creates a process which will then kill a given process and it's child processes on Linux.\n+   * arg[0] should be the PID of the main process you want to terminate.\n+   */\n+  public static class LinuxKill {\n+    public static void main(String[] args) {", "originalCommit": "d417f1ba08745cec6f07d0ad85e20db588c6c403", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4ff980622c54182cdeac787bdf1706de002d3216", "changed_code": [{"header": "diff --git a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\nindex bbc27bf54..b7029f373 100644\n--- a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n+++ b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n", "chunk": "@@ -56,62 +56,82 @@ public final class ExecUtils {\n   }; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$\n \n   /**\n-   * Creates a process which will then kill a given process and it's child processes on Linux.\n-   * arg[0] should be the PID of the main process you want to terminate.\n+   * For a given Process ID, kill any child processes and then kill the process.\n+   * Works on Unix only, as it leverages pgrep and kill commands.\n+   * @param pid The Process for which to terminate including it's direct children.\n    */\n-  public static class LinuxKill {\n-    public static void main(String[] args) {\n+    public static void killLinuxProcessTree(int pid) {\n       try {\n-        if (Integer.parseInt(args[0]) > 0) {\n-          // get child process PIDs as string\n-          Process getChildPid = Runtime.getRuntime().exec(\"pgrep -P \" + args[0]);\n-          getChildPid.waitFor();\n-          StringBuilder childPid = new StringBuilder();\n-          if (getChildPid.exitValue() == 0) {\n-            InputStream procIn = getChildPid.getInputStream();\n-            int c = 0;\n-            while ((c = procIn.read()) != -1) {\n-              childPid.append((char) c);\n-            }\n-          }\n-\n+        if (pid > 0) {\n+          // get child process PIDs as strings\n+          String[] children = getChildUnixProcessPids(pid);\n           // Kill child process(es)\n-          Process childKillProc = Runtime.getRuntime().exec(\"kill -9 \" + childPid);\n-          childKillProc.waitFor();\n-          if (childKillProc.exitValue() == 0) {\n-            LOGGER.debug(\"Child processes terminated: \" + childPid);\n-          }\n-\n+            for (String child : children) {\n+              sendSigKill(Integer.parseInt(child));\n+            }\n           // kill process itself\n-          Process proc = Runtime.getRuntime().exec(\"kill -9 \" + args[0]);\n-          int exitVal = proc.waitFor();\n-          LOGGER.debug(\"Exit value: \" + exitVal); // often 1 under Ubuntu 12.10\n-\n-          proc.destroy();\n-          childKillProc.destroy();\n-          getChildPid.destroy();\n+          sendSigKill(pid);\n         }\n       } catch (Exception e) {\n-        LOGGER.warn(\"Process Kill failed. Process may be left hanging\");\n+        LOGGER.warn(\"Process Kill failed. Process may be left hanging\",e);\n       }\n     }\n-  }\n \n+  /**\n+   * Runs pgrep -P for a given Process ID,\n+   * to get a list of child processes as Process IDs.\n+   * @param pid The parent process ID to check for child processes.\n+   * @return String[] An array of process IDs for the children of pid. Can be empty.\n+   */\n+    public static String[] getChildUnixProcessPids(int pid){\n+      try {\n+        Process getChildPid = Runtime.getRuntime().exec(\"pgrep -P \" + pid);\n+        getChildPid.waitFor();\n+        StringBuilder childPid = new StringBuilder();\n+        if (getChildPid.exitValue() == 0) {\n+          CharStreams.copy(new InputStreamReader(getChildPid.getInputStream()), childPid);\n+        }\n+        getChildPid.destroy();\n+        return childPid.toString().replaceAll(\"\\n\", \"\").split(\" \");\n+      }catch(Exception e){\n+        LOGGER.error(\"Error getting child processes for: \" + pid, e);\n+      }\n+      return new String[]{};\n+    }\n+\n+  /**\n+   * Creates a process which then sends a SIGKILL signal to a given process.\n+   * @param pid the Process ID of the process to kill.\n+   * @return the exitValue of the SIGKILL process (not the process being killed)\n+   */\n+    public static int sendSigKill(int pid){\n+      try {\n+        Process sigKill = Runtime.getRuntime().exec(\"kill -9 \" + pid);\n+        sigKill.waitFor();\n+        int returnValue = sigKill.exitValue();\n+        sigKill.destroy();\n+        return returnValue;\n+      }catch(Exception e){\n+        LOGGER.error(\"killing process \" + pid + \" failed.\",e);\n+      }\n+      //shouldn't get here\n+      return -1;\n+    }\n   /**\n    * Gets the PID of a given process.\n    *\n    * @param p The Process of which to get the PID.\n-   * @return An Optional long. If not on Linux, or if the PID declared field is not available, the\n+   * @return An Optional int. If not on Linux, or if the PID declared field is not available, the\n    *     value will be empty.\n    */\n-  public static synchronized Optional<Long> getPidOfProcess(Process p) {\n-    Optional<Long> pid = Optional.empty();\n+  public static synchronized Optional<Integer> getPidOfProcess(Process p) {\n+    Optional<Integer> pid = Optional.empty();\n \n     try {\n       if (p.getClass().getName().equals(\"java.lang.UNIXProcess\")) {\n         Field f = p.getClass().getDeclaredField(\"pid\");\n         f.setAccessible(true);\n-        pid = Optional.of(f.getLong(p));\n+        pid = Optional.of(f.getInt(p));\n         f.setAccessible(false);\n       }\n     } catch (Exception e) {\n", "next_change": {"commit": "f7134e8424c3500b0cdc554d8afcaf8a1b384e7a", "changed_code": [{"header": "diff --git a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\nindex b7029f373..ef85b69f2 100644\n--- a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n+++ b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n", "chunk": "@@ -134,8 +131,10 @@ public final class ExecUtils {\n         pid = Optional.of(f.getInt(p));\n         f.setAccessible(false);\n       }\n-    } catch (Exception e) {\n-      return pid;\n+    } catch (NoSuchFieldException e) {\n+      LOGGER.error(\"The field pid does not exist on the process. Cannot return pid\", e);\n+    } catch (IllegalAccessException | IllegalArgumentException e) {\n+      LOGGER.error(\"pid field is inaccessible, or cannot be converted to an integer.\", e);\n     }\n     return pid;\n   }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjMyNTIyMw==", "url": "https://github.com/openequella/openEQUELLA/pull/2566#discussion_r532325223", "body": "Should you check first you're running on linux?", "bodyText": "Should you check first you're running on linux?", "bodyHTML": "<p dir=\"auto\">Should you check first you're running on linux?</p>", "author": "edalex-ian", "createdAt": "2020-11-30T03:09:25Z", "path": "Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java", "diffHunk": "@@ -130,10 +198,12 @@ public static ExecResult execWithTimeLimit(\n           createProcess(cmdarray, additionalEnv, dir);\n       LOGGER.debug(\"Started timed process\");\n       final Process proc = cp.getFirst();\n+      String pid = Long.toString(getPidOfProcess(proc).orElse(0L));\n       final StreamReader stdOut = cp.getSecond();\n       final StreamReader stdErr = cp.getThird();\n       proc.waitFor(durationInSeconds, TimeUnit.SECONDS);\n       if (!stdErr.isFinished() || !stdOut.isFinished()) {\n+        LinuxKill.main(new String[] {pid});", "originalCommit": "d417f1ba08745cec6f07d0ad85e20db588c6c403", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5252221e279064e385826200b72fc4f6e2d1d8c9", "changed_code": [{"header": "diff --git a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\nindex bbc27bf54..02c249b29 100644\n--- a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n+++ b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n", "chunk": "@@ -198,7 +198,7 @@ public final class ExecUtils {\n           createProcess(cmdarray, additionalEnv, dir);\n       LOGGER.debug(\"Started timed process\");\n       final Process proc = cp.getFirst();\n-      String pid = Long.toString(getPidOfProcess(proc).orElse(0L));\n+      int pid = getPidOfProcess(proc).orElse(0);\n       final StreamReader stdOut = cp.getSecond();\n       final StreamReader stdErr = cp.getThird();\n       proc.waitFor(durationInSeconds, TimeUnit.SECONDS);\n", "next_change": {"commit": "23bdc6f59fe4db89a72c71674f6e17029b43484f", "changed_code": [{"header": "diff --git a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\nindex 02c249b29..c6c30ca85 100644\n--- a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n+++ b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n", "chunk": "@@ -203,7 +203,12 @@ public final class ExecUtils {\n       final StreamReader stdErr = cp.getThird();\n       proc.waitFor(durationInSeconds, TimeUnit.SECONDS);\n       if (!stdErr.isFinished() || !stdOut.isFinished()) {\n-        LinuxKill.main(new String[] {pid});\n+        String platform = determinePlatform();\n+        if(platform.equals(PLATFORM_LINUX) || platform.equals(PLATFORM_LINUX64)) {\n+          killLinuxProcessTree(pid);\n+        }else{\n+          LOGGER.debug(\"Platform not yet supported for process tree kill. Processes may be left hanging\");\n+        }\n         throw new InterruptedException();\n       }\n       LOGGER.debug(\"Timed process finished\");\n", "next_change": {"commit": "16da9dfd857cd8926b72131e6ba2c6603defad51", "changed_code": [{"header": "diff --git a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\nindex c6c30ca85..b8ab7fc51 100644\n--- a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n+++ b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n", "chunk": "@@ -204,10 +225,11 @@ public final class ExecUtils {\n       proc.waitFor(durationInSeconds, TimeUnit.SECONDS);\n       if (!stdErr.isFinished() || !stdOut.isFinished()) {\n         String platform = determinePlatform();\n-        if(platform.equals(PLATFORM_LINUX) || platform.equals(PLATFORM_LINUX64)) {\n+        if (platform.equals(PLATFORM_LINUX) || platform.equals(PLATFORM_LINUX64)) {\n           killLinuxProcessTree(pid);\n-        }else{\n-          LOGGER.debug(\"Platform not yet supported for process tree kill. Processes may be left hanging\");\n+        } else {\n+          LOGGER.debug(\n+              \"Platform not yet supported for process tree kill. Processes may be left hanging\");\n         }\n         throw new InterruptedException();\n       }\n", "next_change": {"commit": "efac1afbffd16498168aba0f9a001a0d5df6df43", "changed_code": [{"header": "diff --git a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\nindex b8ab7fc51..013ba483b 100644\n--- a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n+++ b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n", "chunk": "@@ -229,7 +263,9 @@ public final class ExecUtils {\n           killLinuxProcessTree(pid);\n         } else {\n           LOGGER.debug(\n-              \"Platform not yet supported for process tree kill. Processes may be left hanging\");\n+              \"Platform (\"\n+                  + platform\n+                  + \") does not support process tree kill. Processes may be left hanging\");\n         }\n         throw new InterruptedException();\n       }\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjMyOTA2Nw==", "url": "https://github.com/openequella/openEQUELLA/pull/2566#discussion_r532329067", "body": "Couple of things here.\r\n\r\n1. you may wish to consider using `CharStreams.copy(new InputStremReader(getChildPid.getInputStream(), childPid);`; and\r\n2. What if you get multiple PIDs back? Are they find coming back with new lines and getting fed to the following `exec`?", "bodyText": "Couple of things here.\n\nyou may wish to consider using CharStreams.copy(new InputStremReader(getChildPid.getInputStream(), childPid);; and\nWhat if you get multiple PIDs back? Are they find coming back with new lines and getting fed to the following exec?", "bodyHTML": "<p dir=\"auto\">Couple of things here.</p>\n<ol dir=\"auto\">\n<li>you may wish to consider using <code>CharStreams.copy(new InputStremReader(getChildPid.getInputStream(), childPid);</code>; and</li>\n<li>What if you get multiple PIDs back? Are they find coming back with new lines and getting fed to the following <code>exec</code>?</li>\n</ol>", "author": "edalex-ian", "createdAt": "2020-11-30T03:27:13Z", "path": "Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java", "diffHunk": "@@ -52,6 +55,71 @@\n     \"\", \".exe\", \".bat\"\n   }; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$\n \n+  /**\n+   * Creates a process which will then kill a given process and it's child processes on Linux.\n+   * arg[0] should be the PID of the main process you want to terminate.\n+   */\n+  public static class LinuxKill {\n+    public static void main(String[] args) {\n+      try {\n+        if (Integer.parseInt(args[0]) > 0) {\n+          // get child process PIDs as string\n+          Process getChildPid = Runtime.getRuntime().exec(\"pgrep -P \" + args[0]);\n+          getChildPid.waitFor();\n+          StringBuilder childPid = new StringBuilder();\n+          if (getChildPid.exitValue() == 0) {\n+            InputStream procIn = getChildPid.getInputStream();\n+            int c = 0;\n+            while ((c = procIn.read()) != -1) {\n+              childPid.append((char) c);\n+            }", "originalCommit": "d417f1ba08745cec6f07d0ad85e20db588c6c403", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4ff980622c54182cdeac787bdf1706de002d3216", "changed_code": [{"header": "diff --git a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\nindex bbc27bf54..b7029f373 100644\n--- a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n+++ b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n", "chunk": "@@ -56,62 +56,82 @@ public final class ExecUtils {\n   }; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$\n \n   /**\n-   * Creates a process which will then kill a given process and it's child processes on Linux.\n-   * arg[0] should be the PID of the main process you want to terminate.\n+   * For a given Process ID, kill any child processes and then kill the process.\n+   * Works on Unix only, as it leverages pgrep and kill commands.\n+   * @param pid The Process for which to terminate including it's direct children.\n    */\n-  public static class LinuxKill {\n-    public static void main(String[] args) {\n+    public static void killLinuxProcessTree(int pid) {\n       try {\n-        if (Integer.parseInt(args[0]) > 0) {\n-          // get child process PIDs as string\n-          Process getChildPid = Runtime.getRuntime().exec(\"pgrep -P \" + args[0]);\n-          getChildPid.waitFor();\n-          StringBuilder childPid = new StringBuilder();\n-          if (getChildPid.exitValue() == 0) {\n-            InputStream procIn = getChildPid.getInputStream();\n-            int c = 0;\n-            while ((c = procIn.read()) != -1) {\n-              childPid.append((char) c);\n-            }\n-          }\n-\n+        if (pid > 0) {\n+          // get child process PIDs as strings\n+          String[] children = getChildUnixProcessPids(pid);\n           // Kill child process(es)\n-          Process childKillProc = Runtime.getRuntime().exec(\"kill -9 \" + childPid);\n-          childKillProc.waitFor();\n-          if (childKillProc.exitValue() == 0) {\n-            LOGGER.debug(\"Child processes terminated: \" + childPid);\n-          }\n-\n+            for (String child : children) {\n+              sendSigKill(Integer.parseInt(child));\n+            }\n           // kill process itself\n-          Process proc = Runtime.getRuntime().exec(\"kill -9 \" + args[0]);\n-          int exitVal = proc.waitFor();\n-          LOGGER.debug(\"Exit value: \" + exitVal); // often 1 under Ubuntu 12.10\n-\n-          proc.destroy();\n-          childKillProc.destroy();\n-          getChildPid.destroy();\n+          sendSigKill(pid);\n         }\n       } catch (Exception e) {\n-        LOGGER.warn(\"Process Kill failed. Process may be left hanging\");\n+        LOGGER.warn(\"Process Kill failed. Process may be left hanging\",e);\n       }\n     }\n-  }\n \n+  /**\n+   * Runs pgrep -P for a given Process ID,\n+   * to get a list of child processes as Process IDs.\n+   * @param pid The parent process ID to check for child processes.\n+   * @return String[] An array of process IDs for the children of pid. Can be empty.\n+   */\n+    public static String[] getChildUnixProcessPids(int pid){\n+      try {\n+        Process getChildPid = Runtime.getRuntime().exec(\"pgrep -P \" + pid);\n+        getChildPid.waitFor();\n+        StringBuilder childPid = new StringBuilder();\n+        if (getChildPid.exitValue() == 0) {\n+          CharStreams.copy(new InputStreamReader(getChildPid.getInputStream()), childPid);\n+        }\n+        getChildPid.destroy();\n+        return childPid.toString().replaceAll(\"\\n\", \"\").split(\" \");\n+      }catch(Exception e){\n+        LOGGER.error(\"Error getting child processes for: \" + pid, e);\n+      }\n+      return new String[]{};\n+    }\n+\n+  /**\n+   * Creates a process which then sends a SIGKILL signal to a given process.\n+   * @param pid the Process ID of the process to kill.\n+   * @return the exitValue of the SIGKILL process (not the process being killed)\n+   */\n+    public static int sendSigKill(int pid){\n+      try {\n+        Process sigKill = Runtime.getRuntime().exec(\"kill -9 \" + pid);\n+        sigKill.waitFor();\n+        int returnValue = sigKill.exitValue();\n+        sigKill.destroy();\n+        return returnValue;\n+      }catch(Exception e){\n+        LOGGER.error(\"killing process \" + pid + \" failed.\",e);\n+      }\n+      //shouldn't get here\n+      return -1;\n+    }\n   /**\n    * Gets the PID of a given process.\n    *\n    * @param p The Process of which to get the PID.\n-   * @return An Optional long. If not on Linux, or if the PID declared field is not available, the\n+   * @return An Optional int. If not on Linux, or if the PID declared field is not available, the\n    *     value will be empty.\n    */\n-  public static synchronized Optional<Long> getPidOfProcess(Process p) {\n-    Optional<Long> pid = Optional.empty();\n+  public static synchronized Optional<Integer> getPidOfProcess(Process p) {\n+    Optional<Integer> pid = Optional.empty();\n \n     try {\n       if (p.getClass().getName().equals(\"java.lang.UNIXProcess\")) {\n         Field f = p.getClass().getDeclaredField(\"pid\");\n         f.setAccessible(true);\n-        pid = Optional.of(f.getLong(p));\n+        pid = Optional.of(f.getInt(p));\n         f.setAccessible(false);\n       }\n     } catch (Exception e) {\n", "next_change": {"commit": "f7134e8424c3500b0cdc554d8afcaf8a1b384e7a", "changed_code": [{"header": "diff --git a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\nindex b7029f373..ef85b69f2 100644\n--- a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n+++ b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n", "chunk": "@@ -134,8 +131,10 @@ public final class ExecUtils {\n         pid = Optional.of(f.getInt(p));\n         f.setAccessible(false);\n       }\n-    } catch (Exception e) {\n-      return pid;\n+    } catch (NoSuchFieldException e) {\n+      LOGGER.error(\"The field pid does not exist on the process. Cannot return pid\", e);\n+    } catch (IllegalAccessException | IllegalArgumentException e) {\n+      LOGGER.error(\"pid field is inaccessible, or cannot be converted to an integer.\", e);\n     }\n     return pid;\n   }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjMyOTQzMg==", "url": "https://github.com/openequella/openEQUELLA/pull/2566#discussion_r532329432", "body": "So if it returns non-zero, it won't throw an exception (I gather). So the catch block wont be triggered and nothing will be logged (or noted).", "bodyText": "So if it returns non-zero, it won't throw an exception (I gather). So the catch block wont be triggered and nothing will be logged (or noted).", "bodyHTML": "<p dir=\"auto\">So if it returns non-zero, it won't throw an exception (I gather). So the catch block wont be triggered and nothing will be logged (or noted).</p>", "author": "edalex-ian", "createdAt": "2020-11-30T03:28:53Z", "path": "Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java", "diffHunk": "@@ -52,6 +55,71 @@\n     \"\", \".exe\", \".bat\"\n   }; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$\n \n+  /**\n+   * Creates a process which will then kill a given process and it's child processes on Linux.\n+   * arg[0] should be the PID of the main process you want to terminate.\n+   */\n+  public static class LinuxKill {\n+    public static void main(String[] args) {\n+      try {\n+        if (Integer.parseInt(args[0]) > 0) {\n+          // get child process PIDs as string\n+          Process getChildPid = Runtime.getRuntime().exec(\"pgrep -P \" + args[0]);\n+          getChildPid.waitFor();\n+          StringBuilder childPid = new StringBuilder();\n+          if (getChildPid.exitValue() == 0) {\n+            InputStream procIn = getChildPid.getInputStream();\n+            int c = 0;\n+            while ((c = procIn.read()) != -1) {\n+              childPid.append((char) c);\n+            }\n+          }\n+\n+          // Kill child process(es)\n+          Process childKillProc = Runtime.getRuntime().exec(\"kill -9 \" + childPid);\n+          childKillProc.waitFor();\n+          if (childKillProc.exitValue() == 0) {\n+            LOGGER.debug(\"Child processes terminated: \" + childPid);\n+          }", "originalCommit": "d417f1ba08745cec6f07d0ad85e20db588c6c403", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4ff980622c54182cdeac787bdf1706de002d3216", "changed_code": [{"header": "diff --git a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\nindex bbc27bf54..b7029f373 100644\n--- a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n+++ b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n", "chunk": "@@ -56,62 +56,82 @@ public final class ExecUtils {\n   }; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$\n \n   /**\n-   * Creates a process which will then kill a given process and it's child processes on Linux.\n-   * arg[0] should be the PID of the main process you want to terminate.\n+   * For a given Process ID, kill any child processes and then kill the process.\n+   * Works on Unix only, as it leverages pgrep and kill commands.\n+   * @param pid The Process for which to terminate including it's direct children.\n    */\n-  public static class LinuxKill {\n-    public static void main(String[] args) {\n+    public static void killLinuxProcessTree(int pid) {\n       try {\n-        if (Integer.parseInt(args[0]) > 0) {\n-          // get child process PIDs as string\n-          Process getChildPid = Runtime.getRuntime().exec(\"pgrep -P \" + args[0]);\n-          getChildPid.waitFor();\n-          StringBuilder childPid = new StringBuilder();\n-          if (getChildPid.exitValue() == 0) {\n-            InputStream procIn = getChildPid.getInputStream();\n-            int c = 0;\n-            while ((c = procIn.read()) != -1) {\n-              childPid.append((char) c);\n-            }\n-          }\n-\n+        if (pid > 0) {\n+          // get child process PIDs as strings\n+          String[] children = getChildUnixProcessPids(pid);\n           // Kill child process(es)\n-          Process childKillProc = Runtime.getRuntime().exec(\"kill -9 \" + childPid);\n-          childKillProc.waitFor();\n-          if (childKillProc.exitValue() == 0) {\n-            LOGGER.debug(\"Child processes terminated: \" + childPid);\n-          }\n-\n+            for (String child : children) {\n+              sendSigKill(Integer.parseInt(child));\n+            }\n           // kill process itself\n-          Process proc = Runtime.getRuntime().exec(\"kill -9 \" + args[0]);\n-          int exitVal = proc.waitFor();\n-          LOGGER.debug(\"Exit value: \" + exitVal); // often 1 under Ubuntu 12.10\n-\n-          proc.destroy();\n-          childKillProc.destroy();\n-          getChildPid.destroy();\n+          sendSigKill(pid);\n         }\n       } catch (Exception e) {\n-        LOGGER.warn(\"Process Kill failed. Process may be left hanging\");\n+        LOGGER.warn(\"Process Kill failed. Process may be left hanging\",e);\n       }\n     }\n-  }\n \n+  /**\n+   * Runs pgrep -P for a given Process ID,\n+   * to get a list of child processes as Process IDs.\n+   * @param pid The parent process ID to check for child processes.\n+   * @return String[] An array of process IDs for the children of pid. Can be empty.\n+   */\n+    public static String[] getChildUnixProcessPids(int pid){\n+      try {\n+        Process getChildPid = Runtime.getRuntime().exec(\"pgrep -P \" + pid);\n+        getChildPid.waitFor();\n+        StringBuilder childPid = new StringBuilder();\n+        if (getChildPid.exitValue() == 0) {\n+          CharStreams.copy(new InputStreamReader(getChildPid.getInputStream()), childPid);\n+        }\n+        getChildPid.destroy();\n+        return childPid.toString().replaceAll(\"\\n\", \"\").split(\" \");\n+      }catch(Exception e){\n+        LOGGER.error(\"Error getting child processes for: \" + pid, e);\n+      }\n+      return new String[]{};\n+    }\n+\n+  /**\n+   * Creates a process which then sends a SIGKILL signal to a given process.\n+   * @param pid the Process ID of the process to kill.\n+   * @return the exitValue of the SIGKILL process (not the process being killed)\n+   */\n+    public static int sendSigKill(int pid){\n+      try {\n+        Process sigKill = Runtime.getRuntime().exec(\"kill -9 \" + pid);\n+        sigKill.waitFor();\n+        int returnValue = sigKill.exitValue();\n+        sigKill.destroy();\n+        return returnValue;\n+      }catch(Exception e){\n+        LOGGER.error(\"killing process \" + pid + \" failed.\",e);\n+      }\n+      //shouldn't get here\n+      return -1;\n+    }\n   /**\n    * Gets the PID of a given process.\n    *\n    * @param p The Process of which to get the PID.\n-   * @return An Optional long. If not on Linux, or if the PID declared field is not available, the\n+   * @return An Optional int. If not on Linux, or if the PID declared field is not available, the\n    *     value will be empty.\n    */\n-  public static synchronized Optional<Long> getPidOfProcess(Process p) {\n-    Optional<Long> pid = Optional.empty();\n+  public static synchronized Optional<Integer> getPidOfProcess(Process p) {\n+    Optional<Integer> pid = Optional.empty();\n \n     try {\n       if (p.getClass().getName().equals(\"java.lang.UNIXProcess\")) {\n         Field f = p.getClass().getDeclaredField(\"pid\");\n         f.setAccessible(true);\n-        pid = Optional.of(f.getLong(p));\n+        pid = Optional.of(f.getInt(p));\n         f.setAccessible(false);\n       }\n     } catch (Exception e) {\n", "next_change": {"commit": "f7134e8424c3500b0cdc554d8afcaf8a1b384e7a", "changed_code": [{"header": "diff --git a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\nindex b7029f373..ef85b69f2 100644\n--- a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n+++ b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n", "chunk": "@@ -134,8 +131,10 @@ public final class ExecUtils {\n         pid = Optional.of(f.getInt(p));\n         f.setAccessible(false);\n       }\n-    } catch (Exception e) {\n-      return pid;\n+    } catch (NoSuchFieldException e) {\n+      LOGGER.error(\"The field pid does not exist on the process. Cannot return pid\", e);\n+    } catch (IllegalAccessException | IllegalArgumentException e) {\n+      LOGGER.error(\"pid field is inaccessible, or cannot be converted to an integer.\", e);\n     }\n     return pid;\n   }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjMzMDIyNQ==", "url": "https://github.com/openequella/openEQUELLA/pull/2566#discussion_r532330225", "body": "Your comment is confusing me. Above you check to see that `kill -9` returns zero. Then here you're saying it could return 1. Which is it?\r\n\r\nAlso, be good here to do the same as the above and check the result.\r\n\r\nAnd arguably this code is the same as the above and should be in it's own method, perhaps: `static void int sendSigKill(int pid)`. Could encapsulate waiting and logging, but then ultimately still return the exit code.", "bodyText": "Your comment is confusing me. Above you check to see that kill -9 returns zero. Then here you're saying it could return 1. Which is it?\nAlso, be good here to do the same as the above and check the result.\nAnd arguably this code is the same as the above and should be in it's own method, perhaps: static void int sendSigKill(int pid). Could encapsulate waiting and logging, but then ultimately still return the exit code.", "bodyHTML": "<p dir=\"auto\">Your comment is confusing me. Above you check to see that <code>kill -9</code> returns zero. Then here you're saying it could return 1. Which is it?</p>\n<p dir=\"auto\">Also, be good here to do the same as the above and check the result.</p>\n<p dir=\"auto\">And arguably this code is the same as the above and should be in it's own method, perhaps: <code>static void int sendSigKill(int pid)</code>. Could encapsulate waiting and logging, but then ultimately still return the exit code.</p>", "author": "edalex-ian", "createdAt": "2020-11-30T03:32:17Z", "path": "Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java", "diffHunk": "@@ -52,6 +55,71 @@\n     \"\", \".exe\", \".bat\"\n   }; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$\n \n+  /**\n+   * Creates a process which will then kill a given process and it's child processes on Linux.\n+   * arg[0] should be the PID of the main process you want to terminate.\n+   */\n+  public static class LinuxKill {\n+    public static void main(String[] args) {\n+      try {\n+        if (Integer.parseInt(args[0]) > 0) {\n+          // get child process PIDs as string\n+          Process getChildPid = Runtime.getRuntime().exec(\"pgrep -P \" + args[0]);\n+          getChildPid.waitFor();\n+          StringBuilder childPid = new StringBuilder();\n+          if (getChildPid.exitValue() == 0) {\n+            InputStream procIn = getChildPid.getInputStream();\n+            int c = 0;\n+            while ((c = procIn.read()) != -1) {\n+              childPid.append((char) c);\n+            }\n+          }\n+\n+          // Kill child process(es)\n+          Process childKillProc = Runtime.getRuntime().exec(\"kill -9 \" + childPid);\n+          childKillProc.waitFor();\n+          if (childKillProc.exitValue() == 0) {\n+            LOGGER.debug(\"Child processes terminated: \" + childPid);\n+          }\n+\n+          // kill process itself\n+          Process proc = Runtime.getRuntime().exec(\"kill -9 \" + args[0]);\n+          int exitVal = proc.waitFor();\n+          LOGGER.debug(\"Exit value: \" + exitVal); // often 1 under Ubuntu 12.10", "originalCommit": "d417f1ba08745cec6f07d0ad85e20db588c6c403", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA1MjkzMA==", "url": "https://github.com/openequella/openEQUELLA/pull/2566#discussion_r533052930", "bodyText": "So that comment was left over from an example that I was editing to suit me. In my testing, it returns 0. But apparently it can return 1 according to the SO link, so I'm unsure.\nEither way I have refactored, and removed the comment.", "author": "SammyIsConfused", "createdAt": "2020-12-01T03:40:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjMzMDIyNQ=="}], "type": "inlineReview", "revised_code": {"commit": "4ff980622c54182cdeac787bdf1706de002d3216", "changed_code": [{"header": "diff --git a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\nindex bbc27bf54..b7029f373 100644\n--- a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n+++ b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n", "chunk": "@@ -56,62 +56,82 @@ public final class ExecUtils {\n   }; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$\n \n   /**\n-   * Creates a process which will then kill a given process and it's child processes on Linux.\n-   * arg[0] should be the PID of the main process you want to terminate.\n+   * For a given Process ID, kill any child processes and then kill the process.\n+   * Works on Unix only, as it leverages pgrep and kill commands.\n+   * @param pid The Process for which to terminate including it's direct children.\n    */\n-  public static class LinuxKill {\n-    public static void main(String[] args) {\n+    public static void killLinuxProcessTree(int pid) {\n       try {\n-        if (Integer.parseInt(args[0]) > 0) {\n-          // get child process PIDs as string\n-          Process getChildPid = Runtime.getRuntime().exec(\"pgrep -P \" + args[0]);\n-          getChildPid.waitFor();\n-          StringBuilder childPid = new StringBuilder();\n-          if (getChildPid.exitValue() == 0) {\n-            InputStream procIn = getChildPid.getInputStream();\n-            int c = 0;\n-            while ((c = procIn.read()) != -1) {\n-              childPid.append((char) c);\n-            }\n-          }\n-\n+        if (pid > 0) {\n+          // get child process PIDs as strings\n+          String[] children = getChildUnixProcessPids(pid);\n           // Kill child process(es)\n-          Process childKillProc = Runtime.getRuntime().exec(\"kill -9 \" + childPid);\n-          childKillProc.waitFor();\n-          if (childKillProc.exitValue() == 0) {\n-            LOGGER.debug(\"Child processes terminated: \" + childPid);\n-          }\n-\n+            for (String child : children) {\n+              sendSigKill(Integer.parseInt(child));\n+            }\n           // kill process itself\n-          Process proc = Runtime.getRuntime().exec(\"kill -9 \" + args[0]);\n-          int exitVal = proc.waitFor();\n-          LOGGER.debug(\"Exit value: \" + exitVal); // often 1 under Ubuntu 12.10\n-\n-          proc.destroy();\n-          childKillProc.destroy();\n-          getChildPid.destroy();\n+          sendSigKill(pid);\n         }\n       } catch (Exception e) {\n-        LOGGER.warn(\"Process Kill failed. Process may be left hanging\");\n+        LOGGER.warn(\"Process Kill failed. Process may be left hanging\",e);\n       }\n     }\n-  }\n \n+  /**\n+   * Runs pgrep -P for a given Process ID,\n+   * to get a list of child processes as Process IDs.\n+   * @param pid The parent process ID to check for child processes.\n+   * @return String[] An array of process IDs for the children of pid. Can be empty.\n+   */\n+    public static String[] getChildUnixProcessPids(int pid){\n+      try {\n+        Process getChildPid = Runtime.getRuntime().exec(\"pgrep -P \" + pid);\n+        getChildPid.waitFor();\n+        StringBuilder childPid = new StringBuilder();\n+        if (getChildPid.exitValue() == 0) {\n+          CharStreams.copy(new InputStreamReader(getChildPid.getInputStream()), childPid);\n+        }\n+        getChildPid.destroy();\n+        return childPid.toString().replaceAll(\"\\n\", \"\").split(\" \");\n+      }catch(Exception e){\n+        LOGGER.error(\"Error getting child processes for: \" + pid, e);\n+      }\n+      return new String[]{};\n+    }\n+\n+  /**\n+   * Creates a process which then sends a SIGKILL signal to a given process.\n+   * @param pid the Process ID of the process to kill.\n+   * @return the exitValue of the SIGKILL process (not the process being killed)\n+   */\n+    public static int sendSigKill(int pid){\n+      try {\n+        Process sigKill = Runtime.getRuntime().exec(\"kill -9 \" + pid);\n+        sigKill.waitFor();\n+        int returnValue = sigKill.exitValue();\n+        sigKill.destroy();\n+        return returnValue;\n+      }catch(Exception e){\n+        LOGGER.error(\"killing process \" + pid + \" failed.\",e);\n+      }\n+      //shouldn't get here\n+      return -1;\n+    }\n   /**\n    * Gets the PID of a given process.\n    *\n    * @param p The Process of which to get the PID.\n-   * @return An Optional long. If not on Linux, or if the PID declared field is not available, the\n+   * @return An Optional int. If not on Linux, or if the PID declared field is not available, the\n    *     value will be empty.\n    */\n-  public static synchronized Optional<Long> getPidOfProcess(Process p) {\n-    Optional<Long> pid = Optional.empty();\n+  public static synchronized Optional<Integer> getPidOfProcess(Process p) {\n+    Optional<Integer> pid = Optional.empty();\n \n     try {\n       if (p.getClass().getName().equals(\"java.lang.UNIXProcess\")) {\n         Field f = p.getClass().getDeclaredField(\"pid\");\n         f.setAccessible(true);\n-        pid = Optional.of(f.getLong(p));\n+        pid = Optional.of(f.getInt(p));\n         f.setAccessible(false);\n       }\n     } catch (Exception e) {\n", "next_change": {"commit": "f7134e8424c3500b0cdc554d8afcaf8a1b384e7a", "changed_code": [{"header": "diff --git a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\nindex b7029f373..ef85b69f2 100644\n--- a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n+++ b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n", "chunk": "@@ -134,8 +131,10 @@ public final class ExecUtils {\n         pid = Optional.of(f.getInt(p));\n         f.setAccessible(false);\n       }\n-    } catch (Exception e) {\n-      return pid;\n+    } catch (NoSuchFieldException e) {\n+      LOGGER.error(\"The field pid does not exist on the process. Cannot return pid\", e);\n+    } catch (IllegalAccessException | IllegalArgumentException e) {\n+      LOGGER.error(\"pid field is inaccessible, or cannot be converted to an integer.\", e);\n     }\n     return pid;\n   }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjMzMDU5Ng==", "url": "https://github.com/openequella/openEQUELLA/pull/2566#discussion_r532330596", "body": "Be good to know why it failed. (Also, slight change in capitalisation.)\r\n\r\n```suggestion\r\n        LOGGER.warn(\"Process kill failed. Process may be left hanging. \" + e.getMessage());\r\n```", "bodyText": "Be good to know why it failed. (Also, slight change in capitalisation.)\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    LOGGER.warn(\"Process Kill failed. Process may be left hanging\");\n          \n          \n            \n                    LOGGER.warn(\"Process kill failed. Process may be left hanging. \" + e.getMessage());", "bodyHTML": "<p dir=\"auto\">Be good to know why it failed. (Also, slight change in capitalisation.)</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-c1\">LOGGER</span><span class=\"pl-k\">.</span>warn(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Process <span class=\"x x-first x-last\">Kill</span> failed. Process may be left hanging<span class=\"pl-pds x x-first x-last\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-c1\">LOGGER</span><span class=\"pl-k\">.</span>warn(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Process <span class=\"x x-first x-last\">kill</span> failed. Process may be left hanging<span class=\"x x-first\">. </span><span class=\"pl-pds x\">\"</span></span><span class=\"x\"> </span><span class=\"pl-k x\">+</span><span class=\"x\"> e</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">getMessage()</span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "edalex-ian", "createdAt": "2020-11-30T03:33:59Z", "path": "Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java", "diffHunk": "@@ -52,6 +55,71 @@\n     \"\", \".exe\", \".bat\"\n   }; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$\n \n+  /**\n+   * Creates a process which will then kill a given process and it's child processes on Linux.\n+   * arg[0] should be the PID of the main process you want to terminate.\n+   */\n+  public static class LinuxKill {\n+    public static void main(String[] args) {\n+      try {\n+        if (Integer.parseInt(args[0]) > 0) {\n+          // get child process PIDs as string\n+          Process getChildPid = Runtime.getRuntime().exec(\"pgrep -P \" + args[0]);\n+          getChildPid.waitFor();\n+          StringBuilder childPid = new StringBuilder();\n+          if (getChildPid.exitValue() == 0) {\n+            InputStream procIn = getChildPid.getInputStream();\n+            int c = 0;\n+            while ((c = procIn.read()) != -1) {\n+              childPid.append((char) c);\n+            }\n+          }\n+\n+          // Kill child process(es)\n+          Process childKillProc = Runtime.getRuntime().exec(\"kill -9 \" + childPid);\n+          childKillProc.waitFor();\n+          if (childKillProc.exitValue() == 0) {\n+            LOGGER.debug(\"Child processes terminated: \" + childPid);\n+          }\n+\n+          // kill process itself\n+          Process proc = Runtime.getRuntime().exec(\"kill -9 \" + args[0]);\n+          int exitVal = proc.waitFor();\n+          LOGGER.debug(\"Exit value: \" + exitVal); // often 1 under Ubuntu 12.10\n+\n+          proc.destroy();\n+          childKillProc.destroy();\n+          getChildPid.destroy();\n+        }\n+      } catch (Exception e) {\n+        LOGGER.warn(\"Process Kill failed. Process may be left hanging\");", "originalCommit": "d417f1ba08745cec6f07d0ad85e20db588c6c403", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4ff980622c54182cdeac787bdf1706de002d3216", "changed_code": [{"header": "diff --git a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\nindex bbc27bf54..b7029f373 100644\n--- a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n+++ b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n", "chunk": "@@ -56,62 +56,82 @@ public final class ExecUtils {\n   }; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$\n \n   /**\n-   * Creates a process which will then kill a given process and it's child processes on Linux.\n-   * arg[0] should be the PID of the main process you want to terminate.\n+   * For a given Process ID, kill any child processes and then kill the process.\n+   * Works on Unix only, as it leverages pgrep and kill commands.\n+   * @param pid The Process for which to terminate including it's direct children.\n    */\n-  public static class LinuxKill {\n-    public static void main(String[] args) {\n+    public static void killLinuxProcessTree(int pid) {\n       try {\n-        if (Integer.parseInt(args[0]) > 0) {\n-          // get child process PIDs as string\n-          Process getChildPid = Runtime.getRuntime().exec(\"pgrep -P \" + args[0]);\n-          getChildPid.waitFor();\n-          StringBuilder childPid = new StringBuilder();\n-          if (getChildPid.exitValue() == 0) {\n-            InputStream procIn = getChildPid.getInputStream();\n-            int c = 0;\n-            while ((c = procIn.read()) != -1) {\n-              childPid.append((char) c);\n-            }\n-          }\n-\n+        if (pid > 0) {\n+          // get child process PIDs as strings\n+          String[] children = getChildUnixProcessPids(pid);\n           // Kill child process(es)\n-          Process childKillProc = Runtime.getRuntime().exec(\"kill -9 \" + childPid);\n-          childKillProc.waitFor();\n-          if (childKillProc.exitValue() == 0) {\n-            LOGGER.debug(\"Child processes terminated: \" + childPid);\n-          }\n-\n+            for (String child : children) {\n+              sendSigKill(Integer.parseInt(child));\n+            }\n           // kill process itself\n-          Process proc = Runtime.getRuntime().exec(\"kill -9 \" + args[0]);\n-          int exitVal = proc.waitFor();\n-          LOGGER.debug(\"Exit value: \" + exitVal); // often 1 under Ubuntu 12.10\n-\n-          proc.destroy();\n-          childKillProc.destroy();\n-          getChildPid.destroy();\n+          sendSigKill(pid);\n         }\n       } catch (Exception e) {\n-        LOGGER.warn(\"Process Kill failed. Process may be left hanging\");\n+        LOGGER.warn(\"Process Kill failed. Process may be left hanging\",e);\n       }\n     }\n-  }\n \n+  /**\n+   * Runs pgrep -P for a given Process ID,\n+   * to get a list of child processes as Process IDs.\n+   * @param pid The parent process ID to check for child processes.\n+   * @return String[] An array of process IDs for the children of pid. Can be empty.\n+   */\n+    public static String[] getChildUnixProcessPids(int pid){\n+      try {\n+        Process getChildPid = Runtime.getRuntime().exec(\"pgrep -P \" + pid);\n+        getChildPid.waitFor();\n+        StringBuilder childPid = new StringBuilder();\n+        if (getChildPid.exitValue() == 0) {\n+          CharStreams.copy(new InputStreamReader(getChildPid.getInputStream()), childPid);\n+        }\n+        getChildPid.destroy();\n+        return childPid.toString().replaceAll(\"\\n\", \"\").split(\" \");\n+      }catch(Exception e){\n+        LOGGER.error(\"Error getting child processes for: \" + pid, e);\n+      }\n+      return new String[]{};\n+    }\n+\n+  /**\n+   * Creates a process which then sends a SIGKILL signal to a given process.\n+   * @param pid the Process ID of the process to kill.\n+   * @return the exitValue of the SIGKILL process (not the process being killed)\n+   */\n+    public static int sendSigKill(int pid){\n+      try {\n+        Process sigKill = Runtime.getRuntime().exec(\"kill -9 \" + pid);\n+        sigKill.waitFor();\n+        int returnValue = sigKill.exitValue();\n+        sigKill.destroy();\n+        return returnValue;\n+      }catch(Exception e){\n+        LOGGER.error(\"killing process \" + pid + \" failed.\",e);\n+      }\n+      //shouldn't get here\n+      return -1;\n+    }\n   /**\n    * Gets the PID of a given process.\n    *\n    * @param p The Process of which to get the PID.\n-   * @return An Optional long. If not on Linux, or if the PID declared field is not available, the\n+   * @return An Optional int. If not on Linux, or if the PID declared field is not available, the\n    *     value will be empty.\n    */\n-  public static synchronized Optional<Long> getPidOfProcess(Process p) {\n-    Optional<Long> pid = Optional.empty();\n+  public static synchronized Optional<Integer> getPidOfProcess(Process p) {\n+    Optional<Integer> pid = Optional.empty();\n \n     try {\n       if (p.getClass().getName().equals(\"java.lang.UNIXProcess\")) {\n         Field f = p.getClass().getDeclaredField(\"pid\");\n         f.setAccessible(true);\n-        pid = Optional.of(f.getLong(p));\n+        pid = Optional.of(f.getInt(p));\n         f.setAccessible(false);\n       }\n     } catch (Exception e) {\n", "next_change": {"commit": "f7134e8424c3500b0cdc554d8afcaf8a1b384e7a", "changed_code": [{"header": "diff --git a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\nindex b7029f373..ef85b69f2 100644\n--- a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n+++ b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n", "chunk": "@@ -134,8 +131,10 @@ public final class ExecUtils {\n         pid = Optional.of(f.getInt(p));\n         f.setAccessible(false);\n       }\n-    } catch (Exception e) {\n-      return pid;\n+    } catch (NoSuchFieldException e) {\n+      LOGGER.error(\"The field pid does not exist on the process. Cannot return pid\", e);\n+    } catch (IllegalAccessException | IllegalArgumentException e) {\n+      LOGGER.error(\"pid field is inaccessible, or cannot be converted to an integer.\", e);\n     }\n     return pid;\n   }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjMzMTMyMQ==", "url": "https://github.com/openequella/openEQUELLA/pull/2566#discussion_r532331321", "body": "What exceptions get thrown here? Could be good to be more targetted, and to log what happened.", "bodyText": "What exceptions get thrown here? Could be good to be more targetted, and to log what happened.", "bodyHTML": "<p dir=\"auto\">What exceptions get thrown here? Could be good to be more targetted, and to log what happened.</p>", "author": "edalex-ian", "createdAt": "2020-11-30T03:37:11Z", "path": "Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java", "diffHunk": "@@ -52,6 +55,71 @@\n     \"\", \".exe\", \".bat\"\n   }; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$\n \n+  /**\n+   * Creates a process which will then kill a given process and it's child processes on Linux.\n+   * arg[0] should be the PID of the main process you want to terminate.\n+   */\n+  public static class LinuxKill {\n+    public static void main(String[] args) {\n+      try {\n+        if (Integer.parseInt(args[0]) > 0) {\n+          // get child process PIDs as string\n+          Process getChildPid = Runtime.getRuntime().exec(\"pgrep -P \" + args[0]);\n+          getChildPid.waitFor();\n+          StringBuilder childPid = new StringBuilder();\n+          if (getChildPid.exitValue() == 0) {\n+            InputStream procIn = getChildPid.getInputStream();\n+            int c = 0;\n+            while ((c = procIn.read()) != -1) {\n+              childPid.append((char) c);\n+            }\n+          }\n+\n+          // Kill child process(es)\n+          Process childKillProc = Runtime.getRuntime().exec(\"kill -9 \" + childPid);\n+          childKillProc.waitFor();\n+          if (childKillProc.exitValue() == 0) {\n+            LOGGER.debug(\"Child processes terminated: \" + childPid);\n+          }\n+\n+          // kill process itself\n+          Process proc = Runtime.getRuntime().exec(\"kill -9 \" + args[0]);\n+          int exitVal = proc.waitFor();\n+          LOGGER.debug(\"Exit value: \" + exitVal); // often 1 under Ubuntu 12.10\n+\n+          proc.destroy();\n+          childKillProc.destroy();\n+          getChildPid.destroy();\n+        }\n+      } catch (Exception e) {\n+        LOGGER.warn(\"Process Kill failed. Process may be left hanging\");\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Gets the PID of a given process.\n+   *\n+   * @param p The Process of which to get the PID.\n+   * @return An Optional long. If not on Linux, or if the PID declared field is not available, the\n+   *     value will be empty.\n+   */\n+  public static synchronized Optional<Long> getPidOfProcess(Process p) {\n+    Optional<Long> pid = Optional.empty();\n+\n+    try {\n+      if (p.getClass().getName().equals(\"java.lang.UNIXProcess\")) {\n+        Field f = p.getClass().getDeclaredField(\"pid\");\n+        f.setAccessible(true);\n+        pid = Optional.of(f.getLong(p));\n+        f.setAccessible(false);\n+      }\n+    } catch (Exception e) {\n+      return pid;", "originalCommit": "d417f1ba08745cec6f07d0ad85e20db588c6c403", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5252221e279064e385826200b72fc4f6e2d1d8c9", "changed_code": [{"header": "diff --git a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\nindex bbc27bf54..02c249b29 100644\n--- a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n+++ b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n", "chunk": "@@ -101,17 +101,17 @@ public final class ExecUtils {\n    * Gets the PID of a given process.\n    *\n    * @param p The Process of which to get the PID.\n-   * @return An Optional long. If not on Linux, or if the PID declared field is not available, the\n+   * @return An Optional int. If not on Linux, or if the PID declared field is not available, the\n    *     value will be empty.\n    */\n-  public static synchronized Optional<Long> getPidOfProcess(Process p) {\n-    Optional<Long> pid = Optional.empty();\n+  public static synchronized Optional<Integer> getPidOfProcess(Process p) {\n+    Optional<Integer> pid = Optional.empty();\n \n     try {\n       if (p.getClass().getName().equals(\"java.lang.UNIXProcess\")) {\n         Field f = p.getClass().getDeclaredField(\"pid\");\n         f.setAccessible(true);\n-        pid = Optional.of(f.getLong(p));\n+        pid = Optional.of(f.getInt(p));\n         f.setAccessible(false);\n       }\n     } catch (Exception e) {\n", "next_change": {"commit": "f7134e8424c3500b0cdc554d8afcaf8a1b384e7a", "changed_code": [{"header": "diff --git a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\nindex 02c249b29..ef85b69f2 100644\n--- a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n+++ b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n", "chunk": "@@ -114,8 +131,10 @@ public final class ExecUtils {\n         pid = Optional.of(f.getInt(p));\n         f.setAccessible(false);\n       }\n-    } catch (Exception e) {\n-      return pid;\n+    } catch (NoSuchFieldException e) {\n+      LOGGER.error(\"The field pid does not exist on the process. Cannot return pid\", e);\n+    } catch (IllegalAccessException | IllegalArgumentException e) {\n+      LOGGER.error(\"pid field is inaccessible, or cannot be converted to an integer.\", e);\n     }\n     return pid;\n   }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjMzMTQxMw==", "url": "https://github.com/openequella/openEQUELLA/pull/2566#discussion_r532331413", "body": "Seems awkward to have the two `return` statements right next to each other. Would a `finally` block perhaps be a better fit?", "bodyText": "Seems awkward to have the two return statements right next to each other. Would a finally block perhaps be a better fit?", "bodyHTML": "<p dir=\"auto\">Seems awkward to have the two <code>return</code> statements right next to each other. Would a <code>finally</code> block perhaps be a better fit?</p>", "author": "edalex-ian", "createdAt": "2020-11-30T03:37:41Z", "path": "Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java", "diffHunk": "@@ -52,6 +55,71 @@\n     \"\", \".exe\", \".bat\"\n   }; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$\n \n+  /**\n+   * Creates a process which will then kill a given process and it's child processes on Linux.\n+   * arg[0] should be the PID of the main process you want to terminate.\n+   */\n+  public static class LinuxKill {\n+    public static void main(String[] args) {\n+      try {\n+        if (Integer.parseInt(args[0]) > 0) {\n+          // get child process PIDs as string\n+          Process getChildPid = Runtime.getRuntime().exec(\"pgrep -P \" + args[0]);\n+          getChildPid.waitFor();\n+          StringBuilder childPid = new StringBuilder();\n+          if (getChildPid.exitValue() == 0) {\n+            InputStream procIn = getChildPid.getInputStream();\n+            int c = 0;\n+            while ((c = procIn.read()) != -1) {\n+              childPid.append((char) c);\n+            }\n+          }\n+\n+          // Kill child process(es)\n+          Process childKillProc = Runtime.getRuntime().exec(\"kill -9 \" + childPid);\n+          childKillProc.waitFor();\n+          if (childKillProc.exitValue() == 0) {\n+            LOGGER.debug(\"Child processes terminated: \" + childPid);\n+          }\n+\n+          // kill process itself\n+          Process proc = Runtime.getRuntime().exec(\"kill -9 \" + args[0]);\n+          int exitVal = proc.waitFor();\n+          LOGGER.debug(\"Exit value: \" + exitVal); // often 1 under Ubuntu 12.10\n+\n+          proc.destroy();\n+          childKillProc.destroy();\n+          getChildPid.destroy();\n+        }\n+      } catch (Exception e) {\n+        LOGGER.warn(\"Process Kill failed. Process may be left hanging\");\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Gets the PID of a given process.\n+   *\n+   * @param p The Process of which to get the PID.\n+   * @return An Optional long. If not on Linux, or if the PID declared field is not available, the\n+   *     value will be empty.\n+   */\n+  public static synchronized Optional<Long> getPidOfProcess(Process p) {\n+    Optional<Long> pid = Optional.empty();\n+\n+    try {\n+      if (p.getClass().getName().equals(\"java.lang.UNIXProcess\")) {\n+        Field f = p.getClass().getDeclaredField(\"pid\");\n+        f.setAccessible(true);\n+        pid = Optional.of(f.getLong(p));\n+        f.setAccessible(false);\n+      }\n+    } catch (Exception e) {\n+      return pid;\n+    }\n+    return pid;", "originalCommit": "d417f1ba08745cec6f07d0ad85e20db588c6c403", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAzNTIzNA==", "url": "https://github.com/openequella/openEQUELLA/pull/2566#discussion_r533035234", "bodyText": "I tried that, but apparently the inspector has a problem with having a return within a finally block.\n\n'return' inside 'finally' block\nInspection info: Reports return statements inside of finally blocks. While occasionally intended, such return statements may mask exceptions thrown, and tremendously complicate debugging.", "author": "SammyIsConfused", "createdAt": "2020-12-01T02:39:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjMzMTQxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA1Njg1OA==", "url": "https://github.com/openequella/openEQUELLA/pull/2566#discussion_r533056858", "bodyText": "I see it's now refactored to simply use the default return with pid. Much better.", "author": "edalex-ian", "createdAt": "2020-12-01T03:55:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjMzMTQxMw=="}], "type": "inlineReview", "revised_code": {"commit": "5252221e279064e385826200b72fc4f6e2d1d8c9", "changed_code": [{"header": "diff --git a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\nindex bbc27bf54..02c249b29 100644\n--- a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n+++ b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n", "chunk": "@@ -101,17 +101,17 @@ public final class ExecUtils {\n    * Gets the PID of a given process.\n    *\n    * @param p The Process of which to get the PID.\n-   * @return An Optional long. If not on Linux, or if the PID declared field is not available, the\n+   * @return An Optional int. If not on Linux, or if the PID declared field is not available, the\n    *     value will be empty.\n    */\n-  public static synchronized Optional<Long> getPidOfProcess(Process p) {\n-    Optional<Long> pid = Optional.empty();\n+  public static synchronized Optional<Integer> getPidOfProcess(Process p) {\n+    Optional<Integer> pid = Optional.empty();\n \n     try {\n       if (p.getClass().getName().equals(\"java.lang.UNIXProcess\")) {\n         Field f = p.getClass().getDeclaredField(\"pid\");\n         f.setAccessible(true);\n-        pid = Optional.of(f.getLong(p));\n+        pid = Optional.of(f.getInt(p));\n         f.setAccessible(false);\n       }\n     } catch (Exception e) {\n", "next_change": {"commit": "f7134e8424c3500b0cdc554d8afcaf8a1b384e7a", "changed_code": [{"header": "diff --git a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\nindex 02c249b29..ef85b69f2 100644\n--- a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n+++ b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n", "chunk": "@@ -114,8 +131,10 @@ public final class ExecUtils {\n         pid = Optional.of(f.getInt(p));\n         f.setAccessible(false);\n       }\n-    } catch (Exception e) {\n-      return pid;\n+    } catch (NoSuchFieldException e) {\n+      LOGGER.error(\"The field pid does not exist on the process. Cannot return pid\", e);\n+    } catch (IllegalAccessException | IllegalArgumentException e) {\n+      LOGGER.error(\"pid field is inaccessible, or cannot be converted to an integer.\", e);\n     }\n     return pid;\n   }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjMzMTYxNg==", "url": "https://github.com/openequella/openEQUELLA/pull/2566#discussion_r532331616", "body": "```suggestion\r\n   * Gets the process ID (PID) of a given *nix process.\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Gets the PID of a given process.\n          \n          \n            \n               * Gets the process ID (PID) of a given *nix process.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">   <span class=\"pl-k\">*</span> <span class=\"pl-smi\">Gets</span> the <span class=\"pl-c1\">PID</span> of a given process.</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">   <span class=\"pl-k\">*</span> <span class=\"pl-smi\">Gets</span> the <span class=\"x x-first\">process </span><span class=\"pl-c1 x\">ID</span><span class=\"x x-last\"> (</span><span class=\"pl-c1\">PID</span><span class=\"x x-first x-last\">)</span> of a given<span class=\"x x-first\"> </span><span class=\"pl-k x\">*</span><span class=\"x x-last\">nix</span> process.</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "edalex-ian", "createdAt": "2020-11-30T03:38:48Z", "path": "Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java", "diffHunk": "@@ -52,6 +55,71 @@\n     \"\", \".exe\", \".bat\"\n   }; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$\n \n+  /**\n+   * Creates a process which will then kill a given process and it's child processes on Linux.\n+   * arg[0] should be the PID of the main process you want to terminate.\n+   */\n+  public static class LinuxKill {\n+    public static void main(String[] args) {\n+      try {\n+        if (Integer.parseInt(args[0]) > 0) {\n+          // get child process PIDs as string\n+          Process getChildPid = Runtime.getRuntime().exec(\"pgrep -P \" + args[0]);\n+          getChildPid.waitFor();\n+          StringBuilder childPid = new StringBuilder();\n+          if (getChildPid.exitValue() == 0) {\n+            InputStream procIn = getChildPid.getInputStream();\n+            int c = 0;\n+            while ((c = procIn.read()) != -1) {\n+              childPid.append((char) c);\n+            }\n+          }\n+\n+          // Kill child process(es)\n+          Process childKillProc = Runtime.getRuntime().exec(\"kill -9 \" + childPid);\n+          childKillProc.waitFor();\n+          if (childKillProc.exitValue() == 0) {\n+            LOGGER.debug(\"Child processes terminated: \" + childPid);\n+          }\n+\n+          // kill process itself\n+          Process proc = Runtime.getRuntime().exec(\"kill -9 \" + args[0]);\n+          int exitVal = proc.waitFor();\n+          LOGGER.debug(\"Exit value: \" + exitVal); // often 1 under Ubuntu 12.10\n+\n+          proc.destroy();\n+          childKillProc.destroy();\n+          getChildPid.destroy();\n+        }\n+      } catch (Exception e) {\n+        LOGGER.warn(\"Process Kill failed. Process may be left hanging\");\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Gets the PID of a given process.", "originalCommit": "d417f1ba08745cec6f07d0ad85e20db588c6c403", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5252221e279064e385826200b72fc4f6e2d1d8c9", "changed_code": [{"header": "diff --git a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\nindex bbc27bf54..02c249b29 100644\n--- a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n+++ b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n", "chunk": "@@ -101,17 +101,17 @@ public final class ExecUtils {\n    * Gets the PID of a given process.\n    *\n    * @param p The Process of which to get the PID.\n-   * @return An Optional long. If not on Linux, or if the PID declared field is not available, the\n+   * @return An Optional int. If not on Linux, or if the PID declared field is not available, the\n    *     value will be empty.\n    */\n-  public static synchronized Optional<Long> getPidOfProcess(Process p) {\n-    Optional<Long> pid = Optional.empty();\n+  public static synchronized Optional<Integer> getPidOfProcess(Process p) {\n+    Optional<Integer> pid = Optional.empty();\n \n     try {\n       if (p.getClass().getName().equals(\"java.lang.UNIXProcess\")) {\n         Field f = p.getClass().getDeclaredField(\"pid\");\n         f.setAccessible(true);\n-        pid = Optional.of(f.getLong(p));\n+        pid = Optional.of(f.getInt(p));\n         f.setAccessible(false);\n       }\n     } catch (Exception e) {\n", "next_change": {"commit": "f7134e8424c3500b0cdc554d8afcaf8a1b384e7a", "changed_code": [{"header": "diff --git a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\nindex 02c249b29..ef85b69f2 100644\n--- a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n+++ b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n", "chunk": "@@ -114,8 +131,10 @@ public final class ExecUtils {\n         pid = Optional.of(f.getInt(p));\n         f.setAccessible(false);\n       }\n-    } catch (Exception e) {\n-      return pid;\n+    } catch (NoSuchFieldException e) {\n+      LOGGER.error(\"The field pid does not exist on the process. Cannot return pid\", e);\n+    } catch (IllegalAccessException | IllegalArgumentException e) {\n+      LOGGER.error(\"pid field is inaccessible, or cannot be converted to an integer.\", e);\n     }\n     return pid;\n   }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjMzMTc1MA==", "url": "https://github.com/openequella/openEQUELLA/pull/2566#discussion_r532331750", "body": "What's the difference with say Windows? As those processes also have IDs, is it simply a case of a different name for the field?", "bodyText": "What's the difference with say Windows? As those processes also have IDs, is it simply a case of a different name for the field?", "bodyHTML": "<p dir=\"auto\">What's the difference with say Windows? As those processes also have IDs, is it simply a case of a different name for the field?</p>", "author": "edalex-ian", "createdAt": "2020-11-30T03:39:30Z", "path": "Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java", "diffHunk": "@@ -52,6 +55,71 @@\n     \"\", \".exe\", \".bat\"\n   }; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$\n \n+  /**\n+   * Creates a process which will then kill a given process and it's child processes on Linux.\n+   * arg[0] should be the PID of the main process you want to terminate.\n+   */\n+  public static class LinuxKill {\n+    public static void main(String[] args) {\n+      try {\n+        if (Integer.parseInt(args[0]) > 0) {\n+          // get child process PIDs as string\n+          Process getChildPid = Runtime.getRuntime().exec(\"pgrep -P \" + args[0]);\n+          getChildPid.waitFor();\n+          StringBuilder childPid = new StringBuilder();\n+          if (getChildPid.exitValue() == 0) {\n+            InputStream procIn = getChildPid.getInputStream();\n+            int c = 0;\n+            while ((c = procIn.read()) != -1) {\n+              childPid.append((char) c);\n+            }\n+          }\n+\n+          // Kill child process(es)\n+          Process childKillProc = Runtime.getRuntime().exec(\"kill -9 \" + childPid);\n+          childKillProc.waitFor();\n+          if (childKillProc.exitValue() == 0) {\n+            LOGGER.debug(\"Child processes terminated: \" + childPid);\n+          }\n+\n+          // kill process itself\n+          Process proc = Runtime.getRuntime().exec(\"kill -9 \" + args[0]);\n+          int exitVal = proc.waitFor();\n+          LOGGER.debug(\"Exit value: \" + exitVal); // often 1 under Ubuntu 12.10\n+\n+          proc.destroy();\n+          childKillProc.destroy();\n+          getChildPid.destroy();\n+        }\n+      } catch (Exception e) {\n+        LOGGER.warn(\"Process Kill failed. Process may be left hanging\");\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Gets the PID of a given process.\n+   *\n+   * @param p The Process of which to get the PID.\n+   * @return An Optional long. If not on Linux, or if the PID declared field is not available, the\n+   *     value will be empty.\n+   */\n+  public static synchronized Optional<Long> getPidOfProcess(Process p) {\n+    Optional<Long> pid = Optional.empty();\n+\n+    try {\n+      if (p.getClass().getName().equals(\"java.lang.UNIXProcess\")) {\n+        Field f = p.getClass().getDeclaredField(\"pid\");", "originalCommit": "d417f1ba08745cec6f07d0ad85e20db588c6c403", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzAyNzI5OA==", "url": "https://github.com/openequella/openEQUELLA/pull/2566#discussion_r533027298", "bodyText": "No unfortunately, not with Java 8. With 9, you can just process.pid(); I've been looking into it, the ID is not a field in a Windows Process. Other solutions include:\n\nUsing JNA (com.sun.jna) https://stackoverflow.com/a/43426878 but that requires us to install new dependencies\nCalling tasklist (windows command to get all running process IDs) before starting the process and again after, and using the diff of the two to find the new PIDs (I don't like this idea, if another process just happened to start between the two checks that could be a false positive)\n\nOnce we have a Windows PID however, killing it and it's child processes is not too difficult with taskkill. But targeting the right process is where it gets tricky.\nAnother complication is that I have no dev environment for Windows (testing installers yes, but debugging a dev environment no).  So making it work for Windows would probably take too long (at least for 2020.2).", "author": "SammyIsConfused", "createdAt": "2020-12-01T02:13:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjMzMTc1MA=="}], "type": "inlineReview", "revised_code": {"commit": "5252221e279064e385826200b72fc4f6e2d1d8c9", "changed_code": [{"header": "diff --git a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\nindex bbc27bf54..02c249b29 100644\n--- a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n+++ b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n", "chunk": "@@ -101,17 +101,17 @@ public final class ExecUtils {\n    * Gets the PID of a given process.\n    *\n    * @param p The Process of which to get the PID.\n-   * @return An Optional long. If not on Linux, or if the PID declared field is not available, the\n+   * @return An Optional int. If not on Linux, or if the PID declared field is not available, the\n    *     value will be empty.\n    */\n-  public static synchronized Optional<Long> getPidOfProcess(Process p) {\n-    Optional<Long> pid = Optional.empty();\n+  public static synchronized Optional<Integer> getPidOfProcess(Process p) {\n+    Optional<Integer> pid = Optional.empty();\n \n     try {\n       if (p.getClass().getName().equals(\"java.lang.UNIXProcess\")) {\n         Field f = p.getClass().getDeclaredField(\"pid\");\n         f.setAccessible(true);\n-        pid = Optional.of(f.getLong(p));\n+        pid = Optional.of(f.getInt(p));\n         f.setAccessible(false);\n       }\n     } catch (Exception e) {\n", "next_change": {"commit": "f7134e8424c3500b0cdc554d8afcaf8a1b384e7a", "changed_code": [{"header": "diff --git a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\nindex 02c249b29..ef85b69f2 100644\n--- a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n+++ b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n", "chunk": "@@ -114,8 +131,10 @@ public final class ExecUtils {\n         pid = Optional.of(f.getInt(p));\n         f.setAccessible(false);\n       }\n-    } catch (Exception e) {\n-      return pid;\n+    } catch (NoSuchFieldException e) {\n+      LOGGER.error(\"The field pid does not exist on the process. Cannot return pid\", e);\n+    } catch (IllegalAccessException | IllegalArgumentException e) {\n+      LOGGER.error(\"pid field is inaccessible, or cannot be converted to an integer.\", e);\n     }\n     return pid;\n   }\n", "next_change": null}]}}]}}, {"oid": "5252221e279064e385826200b72fc4f6e2d1d8c9", "url": "https://github.com/openequella/openEQUELLA/commit/5252221e279064e385826200b72fc4f6e2d1d8c9", "message": "Use int for getPidOfProcess", "committedDate": "2020-12-01T01:26:28Z", "type": "commit"}, {"oid": "23bdc6f59fe4db89a72c71674f6e17029b43484f", "url": "https://github.com/openequella/openEQUELLA/commit/23bdc6f59fe4db89a72c71674f6e17029b43484f", "message": "Check platform before running kill function", "committedDate": "2020-12-01T01:27:09Z", "type": "commit"}, {"oid": "4ff980622c54182cdeac787bdf1706de002d3216", "url": "https://github.com/openequella/openEQUELLA/commit/4ff980622c54182cdeac787bdf1706de002d3216", "message": "Refactor LinuxKill into killLinuxProcessTree", "committedDate": "2020-12-01T01:27:54Z", "type": "commit"}, {"oid": "16da9dfd857cd8926b72131e6ba2c6603defad51", "url": "https://github.com/openequella/openEQUELLA/commit/16da9dfd857cd8926b72131e6ba2c6603defad51", "message": "Fix up whitespaces", "committedDate": "2020-12-01T02:28:12Z", "type": "commit"}, {"oid": "f7134e8424c3500b0cdc554d8afcaf8a1b384e7a", "url": "https://github.com/openequella/openEQUELLA/commit/f7134e8424c3500b0cdc554d8afcaf8a1b384e7a", "message": "Catch exceptions specifically", "committedDate": "2020-12-01T02:48:13Z", "type": "commit"}, {"oid": "5753354c4ce3676d36ce2efc1253b387ad48462e", "url": "https://github.com/openequella/openEQUELLA/commit/5753354c4ce3676d36ce2efc1253b387ad48462e", "message": "Update comment to be *nix specific\n\nCo-authored-by: edalex-ian <43919233+edalex-ian@users.noreply.github.com>", "committedDate": "2020-12-01T02:53:36Z", "type": "commit"}, {"oid": "d7b3b572e61c2f59c1c750bc526fe4d77cc6c653", "url": "https://github.com/openequella/openEQUELLA/commit/d7b3b572e61c2f59c1c750bc526fe4d77cc6c653", "message": "Capture and log output of finished processes", "committedDate": "2020-12-01T03:31:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA1NzY0NQ==", "url": "https://github.com/openequella/openEQUELLA/pull/2566#discussion_r533057645", "body": "Should that be:\r\n\r\n```suggestion\r\n      return childPid.toString().replaceAll(\"\\n\", \" \").split(\" \");\r\n```", "bodyText": "Should that be:\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  return childPid.toString().replaceAll(\"\\n\", \"\").split(\" \");\n          \n          \n            \n                  return childPid.toString().replaceAll(\"\\n\", \" \").split(\" \");", "bodyHTML": "<p dir=\"auto\">Should that be:</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">      <span class=\"pl-k\">return</span> childPid<span class=\"pl-k\">.</span>toString()<span class=\"pl-k\">.</span>replaceAll(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-cce\">\\n</span><span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-pds\">\"</span></span>)<span class=\"pl-k\">.</span>split(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span> <span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">      <span class=\"pl-k\">return</span> childPid<span class=\"pl-k\">.</span>toString()<span class=\"pl-k\">.</span>replaceAll(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-cce\">\\n</span><span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"x x-first x-last\"> </span><span class=\"pl-pds\">\"</span></span>)<span class=\"pl-k\">.</span>split(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span> <span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "edalex-ian", "createdAt": "2020-12-01T03:57:57Z", "path": "Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java", "diffHunk": "@@ -52,6 +54,104 @@\n     \"\", \".exe\", \".bat\"\n   }; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$\n \n+  /**\n+   * For a given Process ID, kill any child processes and then kill the process. Works on Unix only,\n+   * as it leverages pgrep and kill commands.\n+   *\n+   * @param pid The Process for which to terminate including it's direct children.\n+   */\n+  public static void killLinuxProcessTree(int pid) {\n+    if (pid > 0) {\n+      // get child process PIDs as strings\n+      String[] children = getChildUnixProcessPids(pid);\n+      // Kill child process(es)\n+      for (String child : children) {\n+        sendSigKill(Integer.parseInt(child));\n+      }\n+      // kill process itself\n+      sendSigKill(pid);\n+    }\n+  }\n+\n+  /**\n+   * Runs pgrep -P for a given Process ID, to get a list of child processes as Process IDs.\n+   *\n+   * @param pid The parent process ID to check for child processes.\n+   * @return String[] An array of process IDs for the children of pid. Can be empty.\n+   */\n+  public static String[] getChildUnixProcessPids(int pid) {\n+    try {\n+      Process getChildPid = Runtime.getRuntime().exec(\"pgrep -P \" + pid);\n+      getChildPid.waitFor();\n+      StringBuilder childPid = new StringBuilder();\n+      if (getChildPid.exitValue() == 0) {\n+        CharStreams.copy(new InputStreamReader(getChildPid.getInputStream()), childPid);\n+      } else {\n+        StringBuilder errorOutput = new StringBuilder();\n+        CharStreams.copy(new InputStreamReader(getChildPid.getErrorStream()), errorOutput);\n+        LOGGER.debug(\"getChildPid function did not run properly.\\n\" + errorOutput);\n+      }\n+      getChildPid.destroy();\n+      return childPid.toString().replaceAll(\"\\n\", \"\").split(\" \");", "originalCommit": "d7b3b572e61c2f59c1c750bc526fe4d77cc6c653", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA1ODQ3MQ==", "url": "https://github.com/openequella/openEQUELLA/pull/2566#discussion_r533058471", "bodyText": "Ah yup, you're right. I had assumed that it prints them all on one line space-separated and then ends with \\n. But testing it now I see that it has \\n after each one.", "author": "SammyIsConfused", "createdAt": "2020-12-01T04:01:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA1NzY0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "d010e0f40b672bae43756408420d8b234901acc1", "changed_code": [{"header": "diff --git a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\nindex 6cc600268..9a7b3c9bf 100644\n--- a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n+++ b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n", "chunk": "@@ -92,7 +92,7 @@ public final class ExecUtils {\n         LOGGER.debug(\"getChildPid function did not run properly.\\n\" + errorOutput);\n       }\n       getChildPid.destroy();\n-      return childPid.toString().replaceAll(\"\\n\", \"\").split(\" \");\n+      return childPid.toString().replaceAll(\"\\n\", \" \").split(\" \");\n     } catch (IOException | InterruptedException e) {\n       LOGGER.error(\"Error getting child processes for: \" + pid, e);\n     }\n", "next_change": {"commit": "3cf0e4ddd0ee21e548cf0fa5fbacda0bb411c2b0", "changed_code": [{"header": "diff --git a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\nindex 9a7b3c9bf..5af747505 100644\n--- a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n+++ b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n", "chunk": "@@ -92,22 +91,34 @@ public final class ExecUtils {\n         LOGGER.debug(\"getChildPid function did not run properly.\\n\" + errorOutput);\n       }\n       getChildPid.destroy();\n-      return childPid.toString().replaceAll(\"\\n\", \" \").split(\" \");\n+      // convert string to array of ints\n+      pids =\n+          Optional.of(\n+              Arrays.stream(childPid.toString().replaceAll(\"\\n\", \" \").split(\" \"))\n+                  .mapToInt(Integer::parseInt)\n+                  .toArray());\n     } catch (IOException | InterruptedException e) {\n       LOGGER.error(\"Error getting child processes for: \" + pid, e);\n+    } catch (NumberFormatException e) {\n+      LOGGER.error(\"Output of getChildPids command not parsable as integers\", e);\n     }\n-    return new String[] {};\n+    return pids;\n   }\n \n   /**\n-   * Creates a process which then sends a SIGKILL signal to a given process.\n+   * Creates a process which then sends a SIGKILL signal to an array of given processes.\n    *\n-   * @param pid the Process ID of the process to kill.\n+   * @param pids the Process IDs of the processes to kill.\n    * @return the exitValue of the SIGKILL process (not the process being killed)\n    */\n-  public static int sendSigKill(int pid) {\n+  public static int sendSigKill(int[] pids) {\n     try {\n-      Process sigKill = Runtime.getRuntime().exec(\"kill -9 \" + pid);\n+      StringBuilder command = new StringBuilder(\"kill -9 \");\n+      for (int pid : pids) {\n+        command.append(pid).append(\" \");\n+      }\n+      LOGGER.debug(\"Running command: \" + command);\n+      Process sigKill = Runtime.getRuntime().exec(String.valueOf(command));\n       sigKill.waitFor();\n       int returnValue = sigKill.exitValue();\n       if (sigKill.exitValue() == 0) {\n", "next_change": null}]}}]}}, {"oid": "d010e0f40b672bae43756408420d8b234901acc1", "url": "https://github.com/openequella/openEQUELLA/commit/d010e0f40b672bae43756408420d8b234901acc1", "message": "Replace newlines with spaces\n\nCo-authored-by: edalex-ian <43919233+edalex-ian@users.noreply.github.com>", "committedDate": "2020-12-01T03:59:37Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA1OTc3OQ==", "url": "https://github.com/openequella/openEQUELLA/pull/2566#discussion_r533059779", "body": "Rather than silently doing nothing, how about invert this logic:\r\n\r\n```java\r\nif(pid < 1) {\r\n  throw new IllegalArgumentException(\"Process ID should be greater than 0\");\r\n}\r\n```", "bodyText": "Rather than silently doing nothing, how about invert this logic:\nif(pid < 1) {\n  throw new IllegalArgumentException(\"Process ID should be greater than 0\");\n}", "bodyHTML": "<p dir=\"auto\">Rather than silently doing nothing, how about invert this logic:</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"if(pid &lt; 1) {\n  throw new IllegalArgumentException(&quot;Process ID should be greater than 0&quot;);\n}\"><pre><span class=\"pl-k\">if</span>(pid <span class=\"pl-k\">&lt;</span> <span class=\"pl-c1\">1</span>) {\n  <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">IllegalArgumentException</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Process ID should be greater than 0<span class=\"pl-pds\">\"</span></span>);\n}</pre></div>", "author": "edalex-ian", "createdAt": "2020-12-01T04:05:48Z", "path": "Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java", "diffHunk": "@@ -52,6 +54,104 @@\n     \"\", \".exe\", \".bat\"\n   }; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$\n \n+  /**\n+   * For a given Process ID, kill any child processes and then kill the process. Works on Unix only,\n+   * as it leverages pgrep and kill commands.\n+   *\n+   * @param pid The Process for which to terminate including it's direct children.\n+   */\n+  public static void killLinuxProcessTree(int pid) {\n+    if (pid > 0) {", "originalCommit": "d010e0f40b672bae43756408420d8b234901acc1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5515a7e7162c58dc3ee69e7531008c08c15c8f6b", "changed_code": [{"header": "diff --git a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\nindex 9a7b3c9bf..e546cd4b7 100644\n--- a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n+++ b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n", "chunk": "@@ -61,16 +61,17 @@ public final class ExecUtils {\n    * @param pid The Process for which to terminate including it's direct children.\n    */\n   public static void killLinuxProcessTree(int pid) {\n-    if (pid > 0) {\n-      // get child process PIDs as strings\n-      String[] children = getChildUnixProcessPids(pid);\n-      // Kill child process(es)\n-      for (String child : children) {\n-        sendSigKill(Integer.parseInt(child));\n-      }\n-      // kill process itself\n-      sendSigKill(pid);\n+    if (pid < 1) {\n+      throw new IllegalArgumentException(\"Process ID should be greater than 0\");\n+    }\n+    // get child process PIDs as strings\n+    String[] children = getChildUnixProcessPids(pid);\n+    // Kill child process(es)\n+    for (String child : children) {\n+      sendSigKill(Integer.parseInt(child));\n     }\n+    // kill process itself\n+    sendSigKill(pid);\n   }\n \n   /**\n", "next_change": {"commit": "3cf0e4ddd0ee21e548cf0fa5fbacda0bb411c2b0", "changed_code": [{"header": "diff --git a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\nindex e546cd4b7..5af747505 100644\n--- a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n+++ b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n", "chunk": "@@ -64,13 +64,10 @@ public final class ExecUtils {\n     if (pid < 1) {\n       throw new IllegalArgumentException(\"Process ID should be greater than 0\");\n     }\n-    // get child process PIDs as strings\n-    String[] children = getChildUnixProcessPids(pid);\n-    // Kill child process(es)\n-    for (String child : children) {\n-      sendSigKill(Integer.parseInt(child));\n-    }\n-    // kill process itself\n+    // get child process PIDs and kill them\n+    getChildUnixProcessPids(pid).ifPresent(ExecUtils::sendSigKill);\n+\n+    // kill process itself, after all the child processes have been terminated\n     sendSigKill(pid);\n   }\n \n", "next_change": {"commit": "4041db62d21980241a1031af895af73908a98ff9", "changed_code": [{"header": "diff --git a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\nindex 5af747505..c329db620 100644\n--- a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n+++ b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n", "chunk": "@@ -75,7 +75,7 @@ public final class ExecUtils {\n    * Runs pgrep -P for a given Process ID, to get a list of child processes as Process IDs.\n    *\n    * @param pid The parent process ID to check for child processes.\n-   * @return Optional<String[]> An array of process IDs for the children of pid.\n+   * @return Process IDs for the children of {@code pid}.\n    */\n   public static Optional<int[]> getChildUnixProcessPids(int pid) {\n     Optional<int[]> pids = Optional.empty();\n", "next_change": {"commit": "c85cad2e14716269605644551c140b1432d2f5c1", "changed_code": [{"header": "diff --git a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\nindex c329db620..111d8f929 100644\n--- a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n+++ b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n", "chunk": "@@ -79,10 +79,11 @@ public final class ExecUtils {\n    */\n   public static Optional<int[]> getChildUnixProcessPids(int pid) {\n     Optional<int[]> pids = Optional.empty();\n+    StringBuilder childPid = new StringBuilder();\n     try {\n       Process getChildPid = Runtime.getRuntime().exec(\"pgrep -P \" + pid);\n       getChildPid.waitFor();\n-      StringBuilder childPid = new StringBuilder();\n+\n       if (getChildPid.exitValue() == 0) {\n         CharStreams.copy(new InputStreamReader(getChildPid.getInputStream()), childPid);\n       } else {\n", "next_change": null}]}}]}}, {"header": "diff --git a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\nindex e546cd4b7..5af747505 100644\n--- a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n+++ b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n", "chunk": "@@ -78,9 +75,10 @@ public final class ExecUtils {\n    * Runs pgrep -P for a given Process ID, to get a list of child processes as Process IDs.\n    *\n    * @param pid The parent process ID to check for child processes.\n-   * @return String[] An array of process IDs for the children of pid. Can be empty.\n+   * @return Optional<String[]> An array of process IDs for the children of pid.\n    */\n-  public static String[] getChildUnixProcessPids(int pid) {\n+  public static Optional<int[]> getChildUnixProcessPids(int pid) {\n+    Optional<int[]> pids = Optional.empty();\n     try {\n       Process getChildPid = Runtime.getRuntime().exec(\"pgrep -P \" + pid);\n       getChildPid.waitFor();\n", "next_change": {"commit": "4041db62d21980241a1031af895af73908a98ff9", "changed_code": [{"header": "diff --git a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\nindex 5af747505..c329db620 100644\n--- a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n+++ b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n", "chunk": "@@ -75,7 +75,7 @@ public final class ExecUtils {\n    * Runs pgrep -P for a given Process ID, to get a list of child processes as Process IDs.\n    *\n    * @param pid The parent process ID to check for child processes.\n-   * @return Optional<String[]> An array of process IDs for the children of pid.\n+   * @return Process IDs for the children of {@code pid}.\n    */\n   public static Optional<int[]> getChildUnixProcessPids(int pid) {\n     Optional<int[]> pids = Optional.empty();\n", "next_change": {"commit": "c85cad2e14716269605644551c140b1432d2f5c1", "changed_code": [{"header": "diff --git a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\nindex c329db620..111d8f929 100644\n--- a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n+++ b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n", "chunk": "@@ -79,10 +79,11 @@ public final class ExecUtils {\n    */\n   public static Optional<int[]> getChildUnixProcessPids(int pid) {\n     Optional<int[]> pids = Optional.empty();\n+    StringBuilder childPid = new StringBuilder();\n     try {\n       Process getChildPid = Runtime.getRuntime().exec(\"pgrep -P \" + pid);\n       getChildPid.waitFor();\n-      StringBuilder childPid = new StringBuilder();\n+\n       if (getChildPid.exitValue() == 0) {\n         CharStreams.copy(new InputStreamReader(getChildPid.getInputStream()), childPid);\n       } else {\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA2MjA5Nw==", "url": "https://github.com/openequella/openEQUELLA/pull/2566#discussion_r533062097", "body": "The way you're having to use this highlights a few issues with the below methods. Really, you'd expect the methods to support something like:\r\n\r\n```java\r\ngetChildUnixProcessPids(pid)\r\n  .ifPresent(pids ->\r\n    sendSigKill(pids));\r\n```\r\n\r\nComments which follow have this in mind.", "bodyText": "The way you're having to use this highlights a few issues with the below methods. Really, you'd expect the methods to support something like:\ngetChildUnixProcessPids(pid)\n  .ifPresent(pids ->\n    sendSigKill(pids));\nComments which follow have this in mind.", "bodyHTML": "<p dir=\"auto\">The way you're having to use this highlights a few issues with the below methods. Really, you'd expect the methods to support something like:</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"getChildUnixProcessPids(pid)\n  .ifPresent(pids -&gt;\n    sendSigKill(pids));\"><pre>getChildUnixProcessPids(pid)\n  .ifPresent(pids <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span>\n    sendSigKill(pids));</pre></div>\n<p dir=\"auto\">Comments which follow have this in mind.</p>", "author": "edalex-ian", "createdAt": "2020-12-01T04:15:32Z", "path": "Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java", "diffHunk": "@@ -52,6 +54,104 @@\n     \"\", \".exe\", \".bat\"\n   }; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$\n \n+  /**\n+   * For a given Process ID, kill any child processes and then kill the process. Works on Unix only,\n+   * as it leverages pgrep and kill commands.\n+   *\n+   * @param pid The Process for which to terminate including it's direct children.\n+   */\n+  public static void killLinuxProcessTree(int pid) {\n+    if (pid > 0) {\n+      // get child process PIDs as strings\n+      String[] children = getChildUnixProcessPids(pid);\n+      // Kill child process(es)\n+      for (String child : children) {\n+        sendSigKill(Integer.parseInt(child));\n+      }", "originalCommit": "d010e0f40b672bae43756408420d8b234901acc1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5515a7e7162c58dc3ee69e7531008c08c15c8f6b", "changed_code": [{"header": "diff --git a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\nindex 9a7b3c9bf..e546cd4b7 100644\n--- a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n+++ b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n", "chunk": "@@ -61,16 +61,17 @@ public final class ExecUtils {\n    * @param pid The Process for which to terminate including it's direct children.\n    */\n   public static void killLinuxProcessTree(int pid) {\n-    if (pid > 0) {\n-      // get child process PIDs as strings\n-      String[] children = getChildUnixProcessPids(pid);\n-      // Kill child process(es)\n-      for (String child : children) {\n-        sendSigKill(Integer.parseInt(child));\n-      }\n-      // kill process itself\n-      sendSigKill(pid);\n+    if (pid < 1) {\n+      throw new IllegalArgumentException(\"Process ID should be greater than 0\");\n+    }\n+    // get child process PIDs as strings\n+    String[] children = getChildUnixProcessPids(pid);\n+    // Kill child process(es)\n+    for (String child : children) {\n+      sendSigKill(Integer.parseInt(child));\n     }\n+    // kill process itself\n+    sendSigKill(pid);\n   }\n \n   /**\n", "next_change": {"commit": "3cf0e4ddd0ee21e548cf0fa5fbacda0bb411c2b0", "changed_code": [{"header": "diff --git a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\nindex e546cd4b7..5af747505 100644\n--- a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n+++ b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n", "chunk": "@@ -64,13 +64,10 @@ public final class ExecUtils {\n     if (pid < 1) {\n       throw new IllegalArgumentException(\"Process ID should be greater than 0\");\n     }\n-    // get child process PIDs as strings\n-    String[] children = getChildUnixProcessPids(pid);\n-    // Kill child process(es)\n-    for (String child : children) {\n-      sendSigKill(Integer.parseInt(child));\n-    }\n-    // kill process itself\n+    // get child process PIDs and kill them\n+    getChildUnixProcessPids(pid).ifPresent(ExecUtils::sendSigKill);\n+\n+    // kill process itself, after all the child processes have been terminated\n     sendSigKill(pid);\n   }\n \n", "next_change": {"commit": "4041db62d21980241a1031af895af73908a98ff9", "changed_code": [{"header": "diff --git a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\nindex 5af747505..c329db620 100644\n--- a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n+++ b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n", "chunk": "@@ -75,7 +75,7 @@ public final class ExecUtils {\n    * Runs pgrep -P for a given Process ID, to get a list of child processes as Process IDs.\n    *\n    * @param pid The parent process ID to check for child processes.\n-   * @return Optional<String[]> An array of process IDs for the children of pid.\n+   * @return Process IDs for the children of {@code pid}.\n    */\n   public static Optional<int[]> getChildUnixProcessPids(int pid) {\n     Optional<int[]> pids = Optional.empty();\n", "next_change": {"commit": "c85cad2e14716269605644551c140b1432d2f5c1", "changed_code": [{"header": "diff --git a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\nindex c329db620..111d8f929 100644\n--- a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n+++ b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n", "chunk": "@@ -79,10 +79,11 @@ public final class ExecUtils {\n    */\n   public static Optional<int[]> getChildUnixProcessPids(int pid) {\n     Optional<int[]> pids = Optional.empty();\n+    StringBuilder childPid = new StringBuilder();\n     try {\n       Process getChildPid = Runtime.getRuntime().exec(\"pgrep -P \" + pid);\n       getChildPid.waitFor();\n-      StringBuilder childPid = new StringBuilder();\n+\n       if (getChildPid.exitValue() == 0) {\n         CharStreams.copy(new InputStreamReader(getChildPid.getInputStream()), childPid);\n       } else {\n", "next_change": null}]}}]}}, {"header": "diff --git a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\nindex e546cd4b7..5af747505 100644\n--- a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n+++ b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n", "chunk": "@@ -78,9 +75,10 @@ public final class ExecUtils {\n    * Runs pgrep -P for a given Process ID, to get a list of child processes as Process IDs.\n    *\n    * @param pid The parent process ID to check for child processes.\n-   * @return String[] An array of process IDs for the children of pid. Can be empty.\n+   * @return Optional<String[]> An array of process IDs for the children of pid.\n    */\n-  public static String[] getChildUnixProcessPids(int pid) {\n+  public static Optional<int[]> getChildUnixProcessPids(int pid) {\n+    Optional<int[]> pids = Optional.empty();\n     try {\n       Process getChildPid = Runtime.getRuntime().exec(\"pgrep -P \" + pid);\n       getChildPid.waitFor();\n", "next_change": {"commit": "4041db62d21980241a1031af895af73908a98ff9", "changed_code": [{"header": "diff --git a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\nindex 5af747505..c329db620 100644\n--- a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n+++ b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n", "chunk": "@@ -75,7 +75,7 @@ public final class ExecUtils {\n    * Runs pgrep -P for a given Process ID, to get a list of child processes as Process IDs.\n    *\n    * @param pid The parent process ID to check for child processes.\n-   * @return Optional<String[]> An array of process IDs for the children of pid.\n+   * @return Process IDs for the children of {@code pid}.\n    */\n   public static Optional<int[]> getChildUnixProcessPids(int pid) {\n     Optional<int[]> pids = Optional.empty();\n", "next_change": {"commit": "c85cad2e14716269605644551c140b1432d2f5c1", "changed_code": [{"header": "diff --git a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\nindex c329db620..111d8f929 100644\n--- a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n+++ b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n", "chunk": "@@ -79,10 +79,11 @@ public final class ExecUtils {\n    */\n   public static Optional<int[]> getChildUnixProcessPids(int pid) {\n     Optional<int[]> pids = Optional.empty();\n+    StringBuilder childPid = new StringBuilder();\n     try {\n       Process getChildPid = Runtime.getRuntime().exec(\"pgrep -P \" + pid);\n       getChildPid.waitFor();\n-      StringBuilder childPid = new StringBuilder();\n+\n       if (getChildPid.exitValue() == 0) {\n         CharStreams.copy(new InputStreamReader(getChildPid.getInputStream()), childPid);\n       } else {\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA2MjMzNg==", "url": "https://github.com/openequella/openEQUELLA/pull/2566#discussion_r533062336", "body": "If 'Can be empty' how about return an `Optional`? You'd then reap the benefits hoped for above, plus your method signature than flags this without the need for a comment.", "bodyText": "If 'Can be empty' how about return an Optional? You'd then reap the benefits hoped for above, plus your method signature than flags this without the need for a comment.", "bodyHTML": "<p dir=\"auto\">If 'Can be empty' how about return an <code>Optional</code>? You'd then reap the benefits hoped for above, plus your method signature than flags this without the need for a comment.</p>", "author": "edalex-ian", "createdAt": "2020-12-01T04:16:26Z", "path": "Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java", "diffHunk": "@@ -52,6 +54,104 @@\n     \"\", \".exe\", \".bat\"\n   }; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$\n \n+  /**\n+   * For a given Process ID, kill any child processes and then kill the process. Works on Unix only,\n+   * as it leverages pgrep and kill commands.\n+   *\n+   * @param pid The Process for which to terminate including it's direct children.\n+   */\n+  public static void killLinuxProcessTree(int pid) {\n+    if (pid > 0) {\n+      // get child process PIDs as strings\n+      String[] children = getChildUnixProcessPids(pid);\n+      // Kill child process(es)\n+      for (String child : children) {\n+        sendSigKill(Integer.parseInt(child));\n+      }\n+      // kill process itself\n+      sendSigKill(pid);\n+    }\n+  }\n+\n+  /**\n+   * Runs pgrep -P for a given Process ID, to get a list of child processes as Process IDs.\n+   *\n+   * @param pid The parent process ID to check for child processes.\n+   * @return String[] An array of process IDs for the children of pid. Can be empty.", "originalCommit": "d010e0f40b672bae43756408420d8b234901acc1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "5515a7e7162c58dc3ee69e7531008c08c15c8f6b", "changed_code": [{"header": "diff --git a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\nindex 9a7b3c9bf..e546cd4b7 100644\n--- a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n+++ b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n", "chunk": "@@ -61,16 +61,17 @@ public final class ExecUtils {\n    * @param pid The Process for which to terminate including it's direct children.\n    */\n   public static void killLinuxProcessTree(int pid) {\n-    if (pid > 0) {\n-      // get child process PIDs as strings\n-      String[] children = getChildUnixProcessPids(pid);\n-      // Kill child process(es)\n-      for (String child : children) {\n-        sendSigKill(Integer.parseInt(child));\n-      }\n-      // kill process itself\n-      sendSigKill(pid);\n+    if (pid < 1) {\n+      throw new IllegalArgumentException(\"Process ID should be greater than 0\");\n+    }\n+    // get child process PIDs as strings\n+    String[] children = getChildUnixProcessPids(pid);\n+    // Kill child process(es)\n+    for (String child : children) {\n+      sendSigKill(Integer.parseInt(child));\n     }\n+    // kill process itself\n+    sendSigKill(pid);\n   }\n \n   /**\n", "next_change": {"commit": "3cf0e4ddd0ee21e548cf0fa5fbacda0bb411c2b0", "changed_code": [{"header": "diff --git a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\nindex e546cd4b7..5af747505 100644\n--- a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n+++ b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n", "chunk": "@@ -64,13 +64,10 @@ public final class ExecUtils {\n     if (pid < 1) {\n       throw new IllegalArgumentException(\"Process ID should be greater than 0\");\n     }\n-    // get child process PIDs as strings\n-    String[] children = getChildUnixProcessPids(pid);\n-    // Kill child process(es)\n-    for (String child : children) {\n-      sendSigKill(Integer.parseInt(child));\n-    }\n-    // kill process itself\n+    // get child process PIDs and kill them\n+    getChildUnixProcessPids(pid).ifPresent(ExecUtils::sendSigKill);\n+\n+    // kill process itself, after all the child processes have been terminated\n     sendSigKill(pid);\n   }\n \n", "next_change": {"commit": "4041db62d21980241a1031af895af73908a98ff9", "changed_code": [{"header": "diff --git a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\nindex 5af747505..c329db620 100644\n--- a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n+++ b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n", "chunk": "@@ -75,7 +75,7 @@ public final class ExecUtils {\n    * Runs pgrep -P for a given Process ID, to get a list of child processes as Process IDs.\n    *\n    * @param pid The parent process ID to check for child processes.\n-   * @return Optional<String[]> An array of process IDs for the children of pid.\n+   * @return Process IDs for the children of {@code pid}.\n    */\n   public static Optional<int[]> getChildUnixProcessPids(int pid) {\n     Optional<int[]> pids = Optional.empty();\n", "next_change": {"commit": "c85cad2e14716269605644551c140b1432d2f5c1", "changed_code": [{"header": "diff --git a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\nindex c329db620..111d8f929 100644\n--- a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n+++ b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n", "chunk": "@@ -79,10 +79,11 @@ public final class ExecUtils {\n    */\n   public static Optional<int[]> getChildUnixProcessPids(int pid) {\n     Optional<int[]> pids = Optional.empty();\n+    StringBuilder childPid = new StringBuilder();\n     try {\n       Process getChildPid = Runtime.getRuntime().exec(\"pgrep -P \" + pid);\n       getChildPid.waitFor();\n-      StringBuilder childPid = new StringBuilder();\n+\n       if (getChildPid.exitValue() == 0) {\n         CharStreams.copy(new InputStreamReader(getChildPid.getInputStream()), childPid);\n       } else {\n", "next_change": null}]}}]}}, {"header": "diff --git a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\nindex e546cd4b7..5af747505 100644\n--- a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n+++ b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n", "chunk": "@@ -78,9 +75,10 @@ public final class ExecUtils {\n    * Runs pgrep -P for a given Process ID, to get a list of child processes as Process IDs.\n    *\n    * @param pid The parent process ID to check for child processes.\n-   * @return String[] An array of process IDs for the children of pid. Can be empty.\n+   * @return Optional<String[]> An array of process IDs for the children of pid.\n    */\n-  public static String[] getChildUnixProcessPids(int pid) {\n+  public static Optional<int[]> getChildUnixProcessPids(int pid) {\n+    Optional<int[]> pids = Optional.empty();\n     try {\n       Process getChildPid = Runtime.getRuntime().exec(\"pgrep -P \" + pid);\n       getChildPid.waitFor();\n", "next_change": {"commit": "4041db62d21980241a1031af895af73908a98ff9", "changed_code": [{"header": "diff --git a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\nindex 5af747505..c329db620 100644\n--- a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n+++ b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n", "chunk": "@@ -75,7 +75,7 @@ public final class ExecUtils {\n    * Runs pgrep -P for a given Process ID, to get a list of child processes as Process IDs.\n    *\n    * @param pid The parent process ID to check for child processes.\n-   * @return Optional<String[]> An array of process IDs for the children of pid.\n+   * @return Process IDs for the children of {@code pid}.\n    */\n   public static Optional<int[]> getChildUnixProcessPids(int pid) {\n     Optional<int[]> pids = Optional.empty();\n", "next_change": {"commit": "c85cad2e14716269605644551c140b1432d2f5c1", "changed_code": [{"header": "diff --git a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\nindex c329db620..111d8f929 100644\n--- a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n+++ b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n", "chunk": "@@ -79,10 +79,11 @@ public final class ExecUtils {\n    */\n   public static Optional<int[]> getChildUnixProcessPids(int pid) {\n     Optional<int[]> pids = Optional.empty();\n+    StringBuilder childPid = new StringBuilder();\n     try {\n       Process getChildPid = Runtime.getRuntime().exec(\"pgrep -P \" + pid);\n       getChildPid.waitFor();\n-      StringBuilder childPid = new StringBuilder();\n+\n       if (getChildPid.exitValue() == 0) {\n         CharStreams.copy(new InputStreamReader(getChildPid.getInputStream()), childPid);\n       } else {\n", "next_change": null}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA2OTM0NA==", "url": "https://github.com/openequella/openEQUELLA/pull/2566#discussion_r533069344", "body": "It's expected that this method would return an array of numbers (PIDs) not strings. Keep in mind the above suggestion for an `Optional` it'd be good if you also streamed across the strings to transform them to Integers. Something like:\r\n\r\n```java\r\nArrays.stream(childPid...split(\" \"))\r\n  .stream()\r\n  .mapToInt(s -> Integer.parseInt(s))\r\n  .toArray();\r\n```", "bodyText": "It's expected that this method would return an array of numbers (PIDs) not strings. Keep in mind the above suggestion for an Optional it'd be good if you also streamed across the strings to transform them to Integers. Something like:\nArrays.stream(childPid...split(\" \"))\n  .stream()\n  .mapToInt(s -> Integer.parseInt(s))\n  .toArray();", "bodyHTML": "<p dir=\"auto\">It's expected that this method would return an array of numbers (PIDs) not strings. Keep in mind the above suggestion for an <code>Optional</code> it'd be good if you also streamed across the strings to transform them to Integers. Something like:</p>\n<div class=\"highlight highlight-source-java position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Arrays.stream(childPid...split(&quot; &quot;))\n  .stream()\n  .mapToInt(s -&gt; Integer.parseInt(s))\n  .toArray();\"><pre><span class=\"pl-smi\">Arrays</span><span class=\"pl-k\">.</span>stream(childPid<span class=\"pl-k\">.</span><span class=\"pl-c1\">.</span><span class=\"pl-k\">.</span>split(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span> <span class=\"pl-pds\">\"</span></span>))\n  .stream()\n  .mapToInt(s <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> <span class=\"pl-smi\">Integer</span><span class=\"pl-k\">.</span>parseInt(s))\n  .toArray();</pre></div>", "author": "edalex-ian", "createdAt": "2020-12-01T04:42:29Z", "path": "Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java", "diffHunk": "@@ -52,6 +54,104 @@\n     \"\", \".exe\", \".bat\"\n   }; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$\n \n+  /**\n+   * For a given Process ID, kill any child processes and then kill the process. Works on Unix only,\n+   * as it leverages pgrep and kill commands.\n+   *\n+   * @param pid The Process for which to terminate including it's direct children.\n+   */\n+  public static void killLinuxProcessTree(int pid) {\n+    if (pid > 0) {\n+      // get child process PIDs as strings\n+      String[] children = getChildUnixProcessPids(pid);\n+      // Kill child process(es)\n+      for (String child : children) {\n+        sendSigKill(Integer.parseInt(child));\n+      }\n+      // kill process itself\n+      sendSigKill(pid);\n+    }\n+  }\n+\n+  /**\n+   * Runs pgrep -P for a given Process ID, to get a list of child processes as Process IDs.\n+   *\n+   * @param pid The parent process ID to check for child processes.\n+   * @return String[] An array of process IDs for the children of pid. Can be empty.\n+   */\n+  public static String[] getChildUnixProcessPids(int pid) {\n+    try {\n+      Process getChildPid = Runtime.getRuntime().exec(\"pgrep -P \" + pid);\n+      getChildPid.waitFor();\n+      StringBuilder childPid = new StringBuilder();\n+      if (getChildPid.exitValue() == 0) {\n+        CharStreams.copy(new InputStreamReader(getChildPid.getInputStream()), childPid);\n+      } else {\n+        StringBuilder errorOutput = new StringBuilder();\n+        CharStreams.copy(new InputStreamReader(getChildPid.getErrorStream()), errorOutput);\n+        LOGGER.debug(\"getChildPid function did not run properly.\\n\" + errorOutput);\n+      }\n+      getChildPid.destroy();\n+      return childPid.toString().replaceAll(\"\\n\", \" \").split(\" \");", "originalCommit": "d010e0f40b672bae43756408420d8b234901acc1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3cf0e4ddd0ee21e548cf0fa5fbacda0bb411c2b0", "changed_code": [{"header": "diff --git a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\nindex 9a7b3c9bf..5af747505 100644\n--- a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n+++ b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n", "chunk": "@@ -92,22 +91,34 @@ public final class ExecUtils {\n         LOGGER.debug(\"getChildPid function did not run properly.\\n\" + errorOutput);\n       }\n       getChildPid.destroy();\n-      return childPid.toString().replaceAll(\"\\n\", \" \").split(\" \");\n+      // convert string to array of ints\n+      pids =\n+          Optional.of(\n+              Arrays.stream(childPid.toString().replaceAll(\"\\n\", \" \").split(\" \"))\n+                  .mapToInt(Integer::parseInt)\n+                  .toArray());\n     } catch (IOException | InterruptedException e) {\n       LOGGER.error(\"Error getting child processes for: \" + pid, e);\n+    } catch (NumberFormatException e) {\n+      LOGGER.error(\"Output of getChildPids command not parsable as integers\", e);\n     }\n-    return new String[] {};\n+    return pids;\n   }\n \n   /**\n-   * Creates a process which then sends a SIGKILL signal to a given process.\n+   * Creates a process which then sends a SIGKILL signal to an array of given processes.\n    *\n-   * @param pid the Process ID of the process to kill.\n+   * @param pids the Process IDs of the processes to kill.\n    * @return the exitValue of the SIGKILL process (not the process being killed)\n    */\n-  public static int sendSigKill(int pid) {\n+  public static int sendSigKill(int[] pids) {\n     try {\n-      Process sigKill = Runtime.getRuntime().exec(\"kill -9 \" + pid);\n+      StringBuilder command = new StringBuilder(\"kill -9 \");\n+      for (int pid : pids) {\n+        command.append(pid).append(\" \");\n+      }\n+      LOGGER.debug(\"Running command: \" + command);\n+      Process sigKill = Runtime.getRuntime().exec(String.valueOf(command));\n       sigKill.waitFor();\n       int returnValue = sigKill.exitValue();\n       if (sigKill.exitValue() == 0) {\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA3MDE3OA==", "url": "https://github.com/openequella/openEQUELLA/pull/2566#discussion_r533070178", "body": "Seeing `kill` has a definition of:\r\n\r\n```\r\nkill [options] <pid> [...]\r\n```\r\n\r\nIt'd make sense to allow this to support a list of PIDs too:\r\n\r\n```suggestion\r\n  public static int sendSigKill(int[] pid) {\r\n```\r\n\r\nThat also then supports your use case of killing potentially multiple PIDs. If you did also want to support the form of taking a single PID (which I'm not sure you have a use for here), then you could add an overload that does the transform simply to an array and chain to this method.", "bodyText": "Seeing kill has a definition of:\nkill [options] <pid> [...]\n\nIt'd make sense to allow this to support a list of PIDs too:\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public static int sendSigKill(int pid) {\n          \n          \n            \n              public static int sendSigKill(int[] pid) {\n          \n      \n    \n    \n  \n\nThat also then supports your use case of killing potentially multiple PIDs. If you did also want to support the form of taking a single PID (which I'm not sure you have a use for here), then you could add an overload that does the transform simply to an array and chain to this method.", "bodyHTML": "<p dir=\"auto\">Seeing <code>kill</code> has a definition of:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"kill [options] &lt;pid&gt; [...]\"><pre><code>kill [options] &lt;pid&gt; [...]\n</code></pre></div>\n<p dir=\"auto\">It'd make sense to allow this to support a list of PIDs too:</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">  <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">int</span> sendSigKill(<span class=\"pl-k\">int</span> pid) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">  <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">int</span> sendSigKill(<span class=\"pl-k\">int</span><span class=\"x x-first x-last\">[]</span> pid) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">That also then supports your use case of killing potentially multiple PIDs. If you did also want to support the form of taking a single PID (which I'm not sure you have a use for here), then you could add an overload that does the transform simply to an array and chain to this method.</p>", "author": "edalex-ian", "createdAt": "2020-12-01T04:45:44Z", "path": "Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java", "diffHunk": "@@ -52,6 +54,104 @@\n     \"\", \".exe\", \".bat\"\n   }; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$\n \n+  /**\n+   * For a given Process ID, kill any child processes and then kill the process. Works on Unix only,\n+   * as it leverages pgrep and kill commands.\n+   *\n+   * @param pid The Process for which to terminate including it's direct children.\n+   */\n+  public static void killLinuxProcessTree(int pid) {\n+    if (pid > 0) {\n+      // get child process PIDs as strings\n+      String[] children = getChildUnixProcessPids(pid);\n+      // Kill child process(es)\n+      for (String child : children) {\n+        sendSigKill(Integer.parseInt(child));\n+      }\n+      // kill process itself\n+      sendSigKill(pid);\n+    }\n+  }\n+\n+  /**\n+   * Runs pgrep -P for a given Process ID, to get a list of child processes as Process IDs.\n+   *\n+   * @param pid The parent process ID to check for child processes.\n+   * @return String[] An array of process IDs for the children of pid. Can be empty.\n+   */\n+  public static String[] getChildUnixProcessPids(int pid) {\n+    try {\n+      Process getChildPid = Runtime.getRuntime().exec(\"pgrep -P \" + pid);\n+      getChildPid.waitFor();\n+      StringBuilder childPid = new StringBuilder();\n+      if (getChildPid.exitValue() == 0) {\n+        CharStreams.copy(new InputStreamReader(getChildPid.getInputStream()), childPid);\n+      } else {\n+        StringBuilder errorOutput = new StringBuilder();\n+        CharStreams.copy(new InputStreamReader(getChildPid.getErrorStream()), errorOutput);\n+        LOGGER.debug(\"getChildPid function did not run properly.\\n\" + errorOutput);\n+      }\n+      getChildPid.destroy();\n+      return childPid.toString().replaceAll(\"\\n\", \" \").split(\" \");\n+    } catch (IOException | InterruptedException e) {\n+      LOGGER.error(\"Error getting child processes for: \" + pid, e);\n+    }\n+    return new String[] {};\n+  }\n+\n+  /**\n+   * Creates a process which then sends a SIGKILL signal to a given process.\n+   *\n+   * @param pid the Process ID of the process to kill.\n+   * @return the exitValue of the SIGKILL process (not the process being killed)\n+   */\n+  public static int sendSigKill(int pid) {", "originalCommit": "d010e0f40b672bae43756408420d8b234901acc1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3cf0e4ddd0ee21e548cf0fa5fbacda0bb411c2b0", "changed_code": [{"header": "diff --git a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\nindex 9a7b3c9bf..5af747505 100644\n--- a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n+++ b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n", "chunk": "@@ -92,22 +91,34 @@ public final class ExecUtils {\n         LOGGER.debug(\"getChildPid function did not run properly.\\n\" + errorOutput);\n       }\n       getChildPid.destroy();\n-      return childPid.toString().replaceAll(\"\\n\", \" \").split(\" \");\n+      // convert string to array of ints\n+      pids =\n+          Optional.of(\n+              Arrays.stream(childPid.toString().replaceAll(\"\\n\", \" \").split(\" \"))\n+                  .mapToInt(Integer::parseInt)\n+                  .toArray());\n     } catch (IOException | InterruptedException e) {\n       LOGGER.error(\"Error getting child processes for: \" + pid, e);\n+    } catch (NumberFormatException e) {\n+      LOGGER.error(\"Output of getChildPids command not parsable as integers\", e);\n     }\n-    return new String[] {};\n+    return pids;\n   }\n \n   /**\n-   * Creates a process which then sends a SIGKILL signal to a given process.\n+   * Creates a process which then sends a SIGKILL signal to an array of given processes.\n    *\n-   * @param pid the Process ID of the process to kill.\n+   * @param pids the Process IDs of the processes to kill.\n    * @return the exitValue of the SIGKILL process (not the process being killed)\n    */\n-  public static int sendSigKill(int pid) {\n+  public static int sendSigKill(int[] pids) {\n     try {\n-      Process sigKill = Runtime.getRuntime().exec(\"kill -9 \" + pid);\n+      StringBuilder command = new StringBuilder(\"kill -9 \");\n+      for (int pid : pids) {\n+        command.append(pid).append(\" \");\n+      }\n+      LOGGER.debug(\"Running command: \" + command);\n+      Process sigKill = Runtime.getRuntime().exec(String.valueOf(command));\n       sigKill.waitFor();\n       int returnValue = sigKill.exitValue();\n       if (sigKill.exitValue() == 0) {\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA3MDc1MA==", "url": "https://github.com/openequella/openEQUELLA/pull/2566#discussion_r533070750", "body": "If you should get here, should you perhaps ensure that by adding a line to your above catch to throw or rethrow?", "bodyText": "If you should get here, should you perhaps ensure that by adding a line to your above catch to throw or rethrow?", "bodyHTML": "<p dir=\"auto\">If you should get here, should you perhaps ensure that by adding a line to your above catch to throw or rethrow?</p>", "author": "edalex-ian", "createdAt": "2020-12-01T04:48:06Z", "path": "Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java", "diffHunk": "@@ -52,6 +54,104 @@\n     \"\", \".exe\", \".bat\"\n   }; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$\n \n+  /**\n+   * For a given Process ID, kill any child processes and then kill the process. Works on Unix only,\n+   * as it leverages pgrep and kill commands.\n+   *\n+   * @param pid The Process for which to terminate including it's direct children.\n+   */\n+  public static void killLinuxProcessTree(int pid) {\n+    if (pid > 0) {\n+      // get child process PIDs as strings\n+      String[] children = getChildUnixProcessPids(pid);\n+      // Kill child process(es)\n+      for (String child : children) {\n+        sendSigKill(Integer.parseInt(child));\n+      }\n+      // kill process itself\n+      sendSigKill(pid);\n+    }\n+  }\n+\n+  /**\n+   * Runs pgrep -P for a given Process ID, to get a list of child processes as Process IDs.\n+   *\n+   * @param pid The parent process ID to check for child processes.\n+   * @return String[] An array of process IDs for the children of pid. Can be empty.\n+   */\n+  public static String[] getChildUnixProcessPids(int pid) {\n+    try {\n+      Process getChildPid = Runtime.getRuntime().exec(\"pgrep -P \" + pid);\n+      getChildPid.waitFor();\n+      StringBuilder childPid = new StringBuilder();\n+      if (getChildPid.exitValue() == 0) {\n+        CharStreams.copy(new InputStreamReader(getChildPid.getInputStream()), childPid);\n+      } else {\n+        StringBuilder errorOutput = new StringBuilder();\n+        CharStreams.copy(new InputStreamReader(getChildPid.getErrorStream()), errorOutput);\n+        LOGGER.debug(\"getChildPid function did not run properly.\\n\" + errorOutput);\n+      }\n+      getChildPid.destroy();\n+      return childPid.toString().replaceAll(\"\\n\", \" \").split(\" \");\n+    } catch (IOException | InterruptedException e) {\n+      LOGGER.error(\"Error getting child processes for: \" + pid, e);\n+    }\n+    return new String[] {};\n+  }\n+\n+  /**\n+   * Creates a process which then sends a SIGKILL signal to a given process.\n+   *\n+   * @param pid the Process ID of the process to kill.\n+   * @return the exitValue of the SIGKILL process (not the process being killed)\n+   */\n+  public static int sendSigKill(int pid) {\n+    try {\n+      Process sigKill = Runtime.getRuntime().exec(\"kill -9 \" + pid);\n+      sigKill.waitFor();\n+      int returnValue = sigKill.exitValue();\n+      if (sigKill.exitValue() == 0) {\n+        StringBuilder successOutput = new StringBuilder();\n+        CharStreams.copy(new InputStreamReader(sigKill.getInputStream()), successOutput);\n+        LOGGER.debug(\"Output of kill function: \" + successOutput);\n+      } else {\n+        StringBuilder errorOutput = new StringBuilder();\n+        CharStreams.copy(new InputStreamReader(sigKill.getErrorStream()), errorOutput);\n+        LOGGER.debug(\"kill function did not run properly.\\n\" + errorOutput);\n+      }\n+      sigKill.destroy();\n+      return returnValue;\n+    } catch (IOException | InterruptedException e) {\n+      LOGGER.error(\"killing process \" + pid + \" failed.\", e);\n+    }\n+    // shouldn't get here\n+    return -1;", "originalCommit": "d010e0f40b672bae43756408420d8b234901acc1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "3cf0e4ddd0ee21e548cf0fa5fbacda0bb411c2b0", "changed_code": [{"header": "diff --git a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\nindex 9a7b3c9bf..5af747505 100644\n--- a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n+++ b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n", "chunk": "@@ -122,11 +133,23 @@ public final class ExecUtils {\n       sigKill.destroy();\n       return returnValue;\n     } catch (IOException | InterruptedException e) {\n-      LOGGER.error(\"killing process \" + pid + \" failed.\", e);\n+      LOGGER.error(\"killing processes \" + Arrays.toString(pids) + \" failed.\", e);\n     }\n     // shouldn't get here\n     return -1;\n   }\n+\n+  /**\n+   * Overload of above for a single Process ID. Simply calls the int[] version of this method and\n+   * returns the exitValue.\n+   *\n+   * @param pid The Process ID of the process to kill.\n+   * @return the exitValue of the SIGKILL process (not the process being killed)\n+   */\n+  public static int sendSigKill(int pid) {\n+    return sendSigKill(new int[] {pid});\n+  }\n+\n   /**\n    * Gets the process ID (PID) of a given *nix process.\n    *\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzA3MTUxMg==", "url": "https://github.com/openequella/openEQUELLA/pull/2566#discussion_r533071512", "body": "```suggestion\r\n              \"Platform (\" + platform + \") does not supported process tree kill. Processes may be left hanging.\");\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                          \"Platform not yet supported for process tree kill. Processes may be left hanging\");\n          \n          \n            \n                          \"Platform (\" + platform + \") does not supported process tree kill. Processes may be left hanging.\");", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">              <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Platform <span class=\"x x-first x-last\">not yet supported for </span>process tree kill. Processes may be left hanging<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">              <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Platform <span class=\"x x-first\">(</span><span class=\"pl-pds x\">\"</span></span><span class=\"x\"> </span><span class=\"pl-k x\">+</span><span class=\"x\"> platform </span><span class=\"pl-k x\">+</span><span class=\"x\"> </span><span class=\"pl-s\"><span class=\"pl-pds x\">\"</span><span class=\"x x-last\">) does not supported </span>process tree kill. Processes may be left hanging<span class=\"x x-first x-last\">.</span><span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "edalex-ian", "createdAt": "2020-12-01T04:50:48Z", "path": "Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java", "diffHunk": "@@ -130,10 +230,18 @@ public static ExecResult execWithTimeLimit(\n           createProcess(cmdarray, additionalEnv, dir);\n       LOGGER.debug(\"Started timed process\");\n       final Process proc = cp.getFirst();\n+      int pid = getPidOfProcess(proc).orElse(0);\n       final StreamReader stdOut = cp.getSecond();\n       final StreamReader stdErr = cp.getThird();\n       proc.waitFor(durationInSeconds, TimeUnit.SECONDS);\n       if (!stdErr.isFinished() || !stdOut.isFinished()) {\n+        String platform = determinePlatform();\n+        if (platform.equals(PLATFORM_LINUX) || platform.equals(PLATFORM_LINUX64)) {\n+          killLinuxProcessTree(pid);\n+        } else {\n+          LOGGER.debug(\n+              \"Platform not yet supported for process tree kill. Processes may be left hanging\");", "originalCommit": "d010e0f40b672bae43756408420d8b234901acc1", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "efac1afbffd16498168aba0f9a001a0d5df6df43", "changed_code": [{"header": "diff --git a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\nindex 9a7b3c9bf..013ba483b 100644\n--- a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n+++ b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n", "chunk": "@@ -240,7 +263,9 @@ public final class ExecUtils {\n           killLinuxProcessTree(pid);\n         } else {\n           LOGGER.debug(\n-              \"Platform not yet supported for process tree kill. Processes may be left hanging\");\n+              \"Platform (\"\n+                  + platform\n+                  + \") does not support process tree kill. Processes may be left hanging\");\n         }\n         throw new InterruptedException();\n       }\n", "next_change": null}]}}, {"oid": "5515a7e7162c58dc3ee69e7531008c08c15c8f6b", "url": "https://github.com/openequella/openEQUELLA/commit/5515a7e7162c58dc3ee69e7531008c08c15c8f6b", "message": "Handle pid of zero or less with IllegalArgumentException", "committedDate": "2020-12-01T05:08:06Z", "type": "commit"}, {"oid": "3cf0e4ddd0ee21e548cf0fa5fbacda0bb411c2b0", "url": "https://github.com/openequella/openEQUELLA/commit/3cf0e4ddd0ee21e548cf0fa5fbacda0bb411c2b0", "message": "Refactor to kill all child processes at once and then the parent", "committedDate": "2020-12-01T06:59:31Z", "type": "commit"}, {"oid": "efac1afbffd16498168aba0f9a001a0d5df6df43", "url": "https://github.com/openequella/openEQUELLA/commit/efac1afbffd16498168aba0f9a001a0d5df6df43", "message": "Reword comment to include platform", "committedDate": "2020-12-01T07:03:58Z", "type": "commit"}, {"oid": "35b24f0c978119b611aada781809e0e5cb26807c", "url": "https://github.com/openequella/openEQUELLA/commit/35b24f0c978119b611aada781809e0e5cb26807c", "message": "Rethrow exceptions from sendSigKill", "committedDate": "2020-12-01T07:07:37Z", "type": "commit"}, {"oid": "589b0c7e23e1cd7e61940f28cb460122dac51584", "url": "https://github.com/openequella/openEQUELLA/commit/589b0c7e23e1cd7e61940f28cb460122dac51584", "message": "Merge branch 'develop' into bugfix/ensure_gs_gets_terminated", "committedDate": "2020-12-01T07:11:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc4NzYyMw==", "url": "https://github.com/openequella/openEQUELLA/pull/2566#discussion_r533787623", "body": "```suggestion\r\n   * @return Process IDs for the children of {@code pid}.\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * @return Optional<String[]> An array of process IDs for the children of pid.\n          \n          \n            \n               * @return Process IDs for the children of {@code pid}.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">   <span class=\"pl-k\">*</span> <span class=\"pl-k\">@return</span> <span class=\"pl-k\"><span class=\"x x-first\">Optional&lt;</span><span class=\"pl-k x\">String</span><span class=\"x\">[]&gt;</span></span><span class=\"x\"> </span><span class=\"pl-smi x\">An</span><span class=\"x x-last\"> array of process </span><span class=\"pl-smi\">IDs</span> <span class=\"pl-k\">for</span> the children of pid.</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">   <span class=\"pl-k\">*</span> <span class=\"pl-k\">@return</span> <span class=\"pl-smi x x-first\">Process</span><span class=\"x x-last\"> </span><span class=\"pl-smi\">IDs</span> <span class=\"pl-k\">for</span> the children of <span class=\"x x-first\">{</span><span class=\"pl-k x\">@code</span><span class=\"x x-last\"> </span>pid<span class=\"x x-first x-last\">}</span><span class=\"pl-c1\">.</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "edalex-ian", "createdAt": "2020-12-01T23:18:27Z", "path": "Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java", "diffHunk": "@@ -52,6 +54,125 @@\n     \"\", \".exe\", \".bat\"\n   }; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$\n \n+  /**\n+   * For a given Process ID, kill any child processes and then kill the process. Works on Unix only,\n+   * as it leverages pgrep and kill commands.\n+   *\n+   * @param pid The Process for which to terminate including it's direct children.\n+   */\n+  public static void killLinuxProcessTree(int pid) {\n+    if (pid < 1) {\n+      throw new IllegalArgumentException(\"Process ID should be greater than 0\");\n+    }\n+    // get child process PIDs and kill them\n+    getChildUnixProcessPids(pid).ifPresent(ExecUtils::sendSigKill);\n+\n+    // kill process itself, after all the child processes have been terminated\n+    sendSigKill(pid);\n+  }\n+\n+  /**\n+   * Runs pgrep -P for a given Process ID, to get a list of child processes as Process IDs.\n+   *\n+   * @param pid The parent process ID to check for child processes.\n+   * @return Optional<String[]> An array of process IDs for the children of pid.", "originalCommit": "589b0c7e23e1cd7e61940f28cb460122dac51584", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4041db62d21980241a1031af895af73908a98ff9", "changed_code": [{"header": "diff --git a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\nindex 605a2199d..c329db620 100644\n--- a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n+++ b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n", "chunk": "@@ -75,7 +75,7 @@ public final class ExecUtils {\n    * Runs pgrep -P for a given Process ID, to get a list of child processes as Process IDs.\n    *\n    * @param pid The parent process ID to check for child processes.\n-   * @return Optional<String[]> An array of process IDs for the children of pid.\n+   * @return Process IDs for the children of {@code pid}.\n    */\n   public static Optional<int[]> getChildUnixProcessPids(int pid) {\n     Optional<int[]> pids = Optional.empty();\n", "next_change": {"commit": "c85cad2e14716269605644551c140b1432d2f5c1", "changed_code": [{"header": "diff --git a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\nindex c329db620..111d8f929 100644\n--- a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n+++ b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n", "chunk": "@@ -79,10 +79,11 @@ public final class ExecUtils {\n    */\n   public static Optional<int[]> getChildUnixProcessPids(int pid) {\n     Optional<int[]> pids = Optional.empty();\n+    StringBuilder childPid = new StringBuilder();\n     try {\n       Process getChildPid = Runtime.getRuntime().exec(\"pgrep -P \" + pid);\n       getChildPid.waitFor();\n-      StringBuilder childPid = new StringBuilder();\n+\n       if (getChildPid.exitValue() == 0) {\n         CharStreams.copy(new InputStreamReader(getChildPid.getInputStream()), childPid);\n       } else {\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc5MDI4OQ==", "url": "https://github.com/openequella/openEQUELLA/pull/2566#discussion_r533790289", "body": "Being an `error` level log message, would be good if it was a more useful error message for an administrator.\r\n\r\n```suggestion\r\n      LOGGER.error(\"Unsupported output from 'pgrep -P'. Unable to terminate child processes.\");\r\n      LOGGER.error(\"'pgrep' output: \" + childPid.toString());\r\n      LOGGER.error(\"Parsing exception.\", e);\r\n```", "bodyText": "Being an error level log message, would be good if it was a more useful error message for an administrator.\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  LOGGER.error(\"Output of getChildPids command not parsable as integers\", e);\n          \n          \n            \n                  LOGGER.error(\"Unsupported output from 'pgrep -P'. Unable to terminate child processes.\");\n          \n          \n            \n                  LOGGER.error(\"'pgrep' output: \" + childPid.toString());\n          \n          \n            \n                  LOGGER.error(\"Parsing exception.\", e);", "bodyHTML": "<p dir=\"auto\">Being an <code>error</code> level log message, would be good if it was a more useful error message for an administrator.</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">      <span class=\"pl-c1\">LOGGER</span><span class=\"pl-k\">.</span>error(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"x x-first\">Output of getChildPids command not parsable as integers</span><span class=\"pl-pds x\">\"</span></span><span class=\"x x-last\">, e</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">      <span class=\"pl-c1\">LOGGER</span><span class=\"pl-k\">.</span>error(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"x x-first\">Unsupported output from 'pgrep -P'. Unable to terminate child processes.</span><span class=\"pl-pds x x-last\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">      <span class=\"pl-c1\">LOGGER</span><span class=\"pl-k\">.</span>error(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>'pgrep' output: <span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> childPid<span class=\"pl-k\">.</span>toString());</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">      <span class=\"pl-c1\">LOGGER</span><span class=\"pl-k\">.</span>error(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Parsing exception.<span class=\"pl-pds\">\"</span></span>, e);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "edalex-ian", "createdAt": "2020-12-01T23:24:50Z", "path": "Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java", "diffHunk": "@@ -52,6 +54,125 @@\n     \"\", \".exe\", \".bat\"\n   }; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$\n \n+  /**\n+   * For a given Process ID, kill any child processes and then kill the process. Works on Unix only,\n+   * as it leverages pgrep and kill commands.\n+   *\n+   * @param pid The Process for which to terminate including it's direct children.\n+   */\n+  public static void killLinuxProcessTree(int pid) {\n+    if (pid < 1) {\n+      throw new IllegalArgumentException(\"Process ID should be greater than 0\");\n+    }\n+    // get child process PIDs and kill them\n+    getChildUnixProcessPids(pid).ifPresent(ExecUtils::sendSigKill);\n+\n+    // kill process itself, after all the child processes have been terminated\n+    sendSigKill(pid);\n+  }\n+\n+  /**\n+   * Runs pgrep -P for a given Process ID, to get a list of child processes as Process IDs.\n+   *\n+   * @param pid The parent process ID to check for child processes.\n+   * @return Optional<String[]> An array of process IDs for the children of pid.\n+   */\n+  public static Optional<int[]> getChildUnixProcessPids(int pid) {\n+    Optional<int[]> pids = Optional.empty();\n+    try {\n+      Process getChildPid = Runtime.getRuntime().exec(\"pgrep -P \" + pid);\n+      getChildPid.waitFor();\n+      StringBuilder childPid = new StringBuilder();\n+      if (getChildPid.exitValue() == 0) {\n+        CharStreams.copy(new InputStreamReader(getChildPid.getInputStream()), childPid);\n+      } else {\n+        StringBuilder errorOutput = new StringBuilder();\n+        CharStreams.copy(new InputStreamReader(getChildPid.getErrorStream()), errorOutput);\n+        LOGGER.debug(\"getChildPid function did not run properly.\\n\" + errorOutput);\n+      }\n+      getChildPid.destroy();\n+      // convert string to array of ints\n+      pids =\n+          Optional.of(\n+              Arrays.stream(childPid.toString().replaceAll(\"\\n\", \" \").split(\" \"))\n+                  .mapToInt(Integer::parseInt)\n+                  .toArray());\n+    } catch (IOException | InterruptedException e) {\n+      LOGGER.error(\"Error getting child processes for: \" + pid, e);\n+    } catch (NumberFormatException e) {\n+      LOGGER.error(\"Output of getChildPids command not parsable as integers\", e);", "originalCommit": "589b0c7e23e1cd7e61940f28cb460122dac51584", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4041db62d21980241a1031af895af73908a98ff9", "changed_code": [{"header": "diff --git a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\nindex 605a2199d..c329db620 100644\n--- a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n+++ b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n", "chunk": "@@ -100,7 +100,9 @@ public final class ExecUtils {\n     } catch (IOException | InterruptedException e) {\n       LOGGER.error(\"Error getting child processes for: \" + pid, e);\n     } catch (NumberFormatException e) {\n-      LOGGER.error(\"Output of getChildPids command not parsable as integers\", e);\n+      LOGGER.error(\"Unsupported output from 'pgrep -P'. Unable to terminate child processes.\");\n+      LOGGER.error(\"'pgrep' output: \" + childPid.toString());\n+      LOGGER.error(\"Parsing exception.\", e);\n     }\n     return pids;\n   }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc5MTUyNw==", "url": "https://github.com/openequella/openEQUELLA/pull/2566#discussion_r533791527", "body": "Be useful for administrators to know when this kind of thing is not functioning correctly.\r\n\r\n```suggestion\r\n        LOGGER.warn(\"Attempt to terminate processes failed (\" + command + \"):\\n\" + errorOutput);\r\n```", "bodyText": "Be useful for administrators to know when this kind of thing is not functioning correctly.\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    LOGGER.debug(\"kill function did not run properly.\\n\" + errorOutput);\n          \n          \n            \n                    LOGGER.warn(\"Attempt to terminate processes failed (\" + command + \"):\\n\" + errorOutput);", "bodyHTML": "<p dir=\"auto\">Be useful for administrators to know when this kind of thing is not functioning correctly.</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-c1\">LOGGER</span><span class=\"pl-k\">.</span><span class=\"x x-first\">debug(</span><span class=\"pl-s\"><span class=\"pl-pds x\">\"</span><span class=\"x x-last\">kill function did not run properly.</span><span class=\"pl-cce\">\\n</span><span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> errorOutput);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-c1\">LOGGER</span><span class=\"pl-k\">.</span><span class=\"x x-first\">warn(</span><span class=\"pl-s\"><span class=\"pl-pds x\">\"</span><span class=\"x\">Attempt to terminate processes failed (</span><span class=\"pl-pds x\">\"</span></span><span class=\"x\"> </span><span class=\"pl-k x\">+</span><span class=\"x\"> command </span><span class=\"pl-k x\">+</span><span class=\"x\"> </span><span class=\"pl-s\"><span class=\"pl-pds x\">\"</span><span class=\"x x-last\">):</span><span class=\"pl-cce\">\\n</span><span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> errorOutput);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "edalex-ian", "createdAt": "2020-12-01T23:28:15Z", "path": "Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java", "diffHunk": "@@ -52,6 +54,125 @@\n     \"\", \".exe\", \".bat\"\n   }; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$\n \n+  /**\n+   * For a given Process ID, kill any child processes and then kill the process. Works on Unix only,\n+   * as it leverages pgrep and kill commands.\n+   *\n+   * @param pid The Process for which to terminate including it's direct children.\n+   */\n+  public static void killLinuxProcessTree(int pid) {\n+    if (pid < 1) {\n+      throw new IllegalArgumentException(\"Process ID should be greater than 0\");\n+    }\n+    // get child process PIDs and kill them\n+    getChildUnixProcessPids(pid).ifPresent(ExecUtils::sendSigKill);\n+\n+    // kill process itself, after all the child processes have been terminated\n+    sendSigKill(pid);\n+  }\n+\n+  /**\n+   * Runs pgrep -P for a given Process ID, to get a list of child processes as Process IDs.\n+   *\n+   * @param pid The parent process ID to check for child processes.\n+   * @return Optional<String[]> An array of process IDs for the children of pid.\n+   */\n+  public static Optional<int[]> getChildUnixProcessPids(int pid) {\n+    Optional<int[]> pids = Optional.empty();\n+    try {\n+      Process getChildPid = Runtime.getRuntime().exec(\"pgrep -P \" + pid);\n+      getChildPid.waitFor();\n+      StringBuilder childPid = new StringBuilder();\n+      if (getChildPid.exitValue() == 0) {\n+        CharStreams.copy(new InputStreamReader(getChildPid.getInputStream()), childPid);\n+      } else {\n+        StringBuilder errorOutput = new StringBuilder();\n+        CharStreams.copy(new InputStreamReader(getChildPid.getErrorStream()), errorOutput);\n+        LOGGER.debug(\"getChildPid function did not run properly.\\n\" + errorOutput);\n+      }\n+      getChildPid.destroy();\n+      // convert string to array of ints\n+      pids =\n+          Optional.of(\n+              Arrays.stream(childPid.toString().replaceAll(\"\\n\", \" \").split(\" \"))\n+                  .mapToInt(Integer::parseInt)\n+                  .toArray());\n+    } catch (IOException | InterruptedException e) {\n+      LOGGER.error(\"Error getting child processes for: \" + pid, e);\n+    } catch (NumberFormatException e) {\n+      LOGGER.error(\"Output of getChildPids command not parsable as integers\", e);\n+    }\n+    return pids;\n+  }\n+\n+  /**\n+   * Creates a process which then sends a SIGKILL signal to an array of given processes.\n+   *\n+   * @param pids the Process IDs of the processes to kill.\n+   * @return the exitValue of the SIGKILL process (not the process being killed)\n+   */\n+  public static int sendSigKill(int[] pids) {\n+    try {\n+      StringBuilder command = new StringBuilder(\"kill -9 \");\n+      for (int pid : pids) {\n+        command.append(pid).append(\" \");\n+      }\n+      LOGGER.debug(\"Running command: \" + command);\n+      Process sigKill = Runtime.getRuntime().exec(String.valueOf(command));\n+      sigKill.waitFor();\n+      int returnValue = sigKill.exitValue();\n+      if (sigKill.exitValue() == 0) {\n+        StringBuilder successOutput = new StringBuilder();\n+        CharStreams.copy(new InputStreamReader(sigKill.getInputStream()), successOutput);\n+        LOGGER.debug(\"Output of kill function: \" + successOutput);\n+      } else {\n+        StringBuilder errorOutput = new StringBuilder();\n+        CharStreams.copy(new InputStreamReader(sigKill.getErrorStream()), errorOutput);\n+        LOGGER.debug(\"kill function did not run properly.\\n\" + errorOutput);", "originalCommit": "589b0c7e23e1cd7e61940f28cb460122dac51584", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "4041db62d21980241a1031af895af73908a98ff9", "changed_code": [{"header": "diff --git a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\nindex 605a2199d..c329db620 100644\n--- a/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n+++ b/Platform/Plugins/com.tle.platform.common/src/com/tle/common/util/ExecUtils.java\n", "chunk": "@@ -128,7 +130,7 @@ public final class ExecUtils {\n       } else {\n         StringBuilder errorOutput = new StringBuilder();\n         CharStreams.copy(new InputStreamReader(sigKill.getErrorStream()), errorOutput);\n-        LOGGER.debug(\"kill function did not run properly.\\n\" + errorOutput);\n+        LOGGER.warn(\"Attempt to terminate processes failed (\" + command + \"):\\n\" + errorOutput);\n       }\n       sigKill.destroy();\n       return returnValue;\n", "next_change": null}]}}, {"oid": "4041db62d21980241a1031af895af73908a98ff9", "url": "https://github.com/openequella/openEQUELLA/commit/4041db62d21980241a1031af895af73908a98ff9", "message": "Reword error messages\n\nCo-authored-by: edalex-ian <43919233+edalex-ian@users.noreply.github.com>", "committedDate": "2020-12-01T23:42:23Z", "type": "commit"}, {"oid": "c85cad2e14716269605644551c140b1432d2f5c1", "url": "https://github.com/openequella/openEQUELLA/commit/c85cad2e14716269605644551c140b1432d2f5c1", "message": "Make sure childPid is accessible from error block", "committedDate": "2020-12-01T23:53:05Z", "type": "commit"}]}