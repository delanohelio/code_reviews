{"pr_number": 5910, "pr_title": "5804: Prints file name of invalid json file when parsing", "pr_author": "renato2099", "pr_createdAt": "2020-08-22T11:07:23Z", "pr_url": "https://github.com/apache/pinot/pull/5910", "timeline": [{"oid": "daa9fb411f176b911cdf434f88366574ab2d032c", "url": "https://github.com/apache/pinot/commit/daa9fb411f176b911cdf434f88366574ab2d032c", "message": "5804: Prints file name of invalid json file", "committedDate": "2020-08-21T23:28:14Z", "type": "commit"}, {"oid": "32599ed3d05f718a5bca1bb35036e4779b0e5eaa", "url": "https://github.com/apache/pinot/commit/32599ed3d05f718a5bca1bb35036e4779b0e5eaa", "message": "Moves exception enhancing to createSegmentCommand.java", "committedDate": "2020-08-28T22:37:43Z", "type": "forcePushed"}, {"oid": "32599ed3d05f718a5bca1bb35036e4779b0e5eaa", "url": "https://github.com/apache/pinot/commit/32599ed3d05f718a5bca1bb35036e4779b0e5eaa", "message": "Moves exception enhancing to createSegmentCommand.java", "committedDate": "2020-08-28T22:37:43Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU5NjAwNw==", "url": "https://github.com/apache/pinot/pull/5910#discussion_r479596007", "body": "```suggestion\r\n              throw new RuntimeException(\"Caught exception while generating segment from file: \" + dataFiles.get(sequenceId), e);\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                          final String exceptionMessage = String.format(\"%s. File: %s\", e.getMessage(), dataFiles.get(sequenceId));\n          \n          \n            \n                          throw new Exception(exceptionMessage, e);\n          \n          \n            \n                          throw new RuntimeException(\"Caught exception while generating segment from file: \" + dataFiles.get(sequenceId), e);", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">              <span class=\"pl-k\">final</span> <span class=\"pl-smi\">String</span> exceptionMessage <span class=\"pl-k\">=</span> <span class=\"pl-smi\">String</span><span class=\"pl-k\">.</span>format(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>%s. File: %s<span class=\"pl-pds\">\"</span></span>, e<span class=\"pl-k\">.</span>getMessage(), dataFiles<span class=\"pl-k\">.</span>get(sequenceId));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">              <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Exception</span>(exceptionMessage, e);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">              <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">RuntimeException</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Caught exception while generating segment from file: <span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> dataFiles<span class=\"pl-k\">.</span>get(sequenceId), e);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "Jackie-Jiang", "createdAt": "2020-08-29T02:26:40Z", "path": "pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/CreateSegmentCommand.java", "diffHunk": "@@ -252,7 +252,8 @@ public boolean execute()\n             if (j < _retry) {\n               LOGGER.warn(\"Caught exception while creating/verifying segment, will retry\", e);\n             } else {\n-              throw e;\n+              final String exceptionMessage = String.format(\"%s. File: %s\", e.getMessage(), dataFiles.get(sequenceId));\n+              throw new Exception(exceptionMessage, e);", "originalCommit": "32599ed3d05f718a5bca1bb35036e4779b0e5eaa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY4NzYxNA==", "url": "https://github.com/apache/pinot/pull/5910#discussion_r479687614", "bodyText": "updated", "author": "renato2099", "createdAt": "2020-08-29T20:34:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU5NjAwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU5NjEwMg==", "url": "https://github.com/apache/pinot/pull/5910#discussion_r479596102", "body": "(nit) We don't usually put `final` for local variables", "bodyText": "(nit) We don't usually put final for local variables", "bodyHTML": "<p dir=\"auto\">(nit) We don't usually put <code>final</code> for local variables</p>", "author": "Jackie-Jiang", "createdAt": "2020-08-29T02:27:37Z", "path": "pinot-tools/src/test/java/org/apache/pinot/tools/TestCreateSegmentCommand.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.tools;\n+\n+import com.google.common.base.Preconditions;\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import org.apache.pinot.spi.config.table.TableConfig;\n+import org.apache.pinot.spi.config.table.TableType;\n+import org.apache.pinot.spi.data.Schema;\n+import org.apache.pinot.spi.data.readers.FileFormat;\n+import org.apache.pinot.spi.utils.builder.TableConfigBuilder;\n+import org.apache.pinot.tools.admin.command.CreateSegmentCommand;\n+import org.testng.annotations.Test;\n+\n+\n+public class TestCreateSegmentCommand {\n+  private static final File JSON_INVALID_SAMPLE_DATA_FILE = new File(Preconditions\n+      .checkNotNull(TestCreateSegmentCommand.class.getClassLoader().getResource(\"test_data/test_invalid_data.json\"))\n+      .getFile());\n+\n+  private static CreateSegmentCommand _createSegmentCommand = new CreateSegmentCommand();\n+\n+  @Test(\n+    expectedExceptions = Exception.class,\n+    expectedExceptionsMessageRegExp = \"^.*test_invalid_data.json.*$\"\n+  )\n+  public void testReadingInvalidJsonFile()\n+      throws Exception {\n+    final String fileDirectoryPath = JSON_INVALID_SAMPLE_DATA_FILE.getParent();", "originalCommit": "32599ed3d05f718a5bca1bb35036e4779b0e5eaa", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTY4NzcxMw==", "url": "https://github.com/apache/pinot/pull/5910#discussion_r479687713", "bodyText": "sure, btw is there a code style guide where I can check these things?", "author": "renato2099", "createdAt": "2020-08-29T20:35:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU5NjEwMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMwNzQzOQ==", "url": "https://github.com/apache/pinot/pull/5910#discussion_r480307439", "bodyText": "We use the style config file located at config/codestyle-intellij.xml (config/codestyle-eclipse.xml for eclipse)\nWill add some code style guide in the Pinot doc", "author": "Jackie-Jiang", "createdAt": "2020-08-31T18:24:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTU5NjEwMg=="}], "type": "inlineReview"}, {"oid": "6e380894520a228db284305a74eb54efd0a4b2c2", "url": "https://github.com/apache/pinot/commit/6e380894520a228db284305a74eb54efd0a4b2c2", "message": "Addresses reviewers comments", "committedDate": "2020-08-29T20:31:21Z", "type": "commit"}]}