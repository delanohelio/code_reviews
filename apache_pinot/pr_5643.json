{"pr_number": 5643, "pr_title": "SQL Compilation Fixes", "pr_author": "siddharthteotia", "pr_createdAt": "2020-07-01T07:51:44Z", "pr_url": "https://github.com/apache/pinot/pull/5643", "timeline": [{"oid": "ecbf988e5cef9cb18907d71ab8e7458a7970fa80", "url": "https://github.com/apache/pinot/commit/ecbf988e5cef9cb18907d71ab8e7458a7970fa80", "message": "SQL compilation fixes", "committedDate": "2020-07-01T07:47:30Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUyNjEyNw==", "url": "https://github.com/apache/pinot/pull/5643#discussion_r448526127", "body": "(nit) empty line", "bodyText": "(nit) empty line", "bodyHTML": "<p dir=\"auto\">(nit) empty line</p>", "author": "Jackie-Jiang", "createdAt": "2020-07-01T17:54:02Z", "path": "pinot-common/src/test/java/org/apache/pinot/sql/parsers/CalciteSqlCompilerTest.java", "diffHunk": "@@ -1664,4 +1664,64 @@ public void testLiteralExpressionCheck() throws SqlParseException {\n     Assert.assertFalse(CalciteSqlParser.isLiteralOnlyExpression(CalciteSqlParser.compileToExpression(\"a+B\")));\n     Assert.assertFalse(CalciteSqlParser.isLiteralOnlyExpression(CalciteSqlParser.compileToExpression(\"c+1\")));\n   }\n+\n+  @Test\n+  public void testCaseInsensitiveFilter() {\n+    String query = \"SELECT count(*) FROM foo where text_match(col, 'expr')\";\n+    PinotQuery pinotQuery = CalciteSqlParser.compileToPinotQuery(query);\n+    PinotQuery2BrokerRequestConverter converter = new PinotQuery2BrokerRequestConverter();\n+    BrokerRequest brokerRequest = converter.convert(pinotQuery);\n+    Assert.assertEquals(pinotQuery.getFilterExpression().getFunctionCall().getOperator(), \"TEXT_MATCH\");\n+    Assert.assertEquals(brokerRequest.getFilterQuery().getOperator(), FilterOperator.TEXT_MATCH);\n+\n+    query = \"SELECT count(*) FROM foo where TEXT_MATCH(col, 'expr')\";\n+    pinotQuery = CalciteSqlParser.compileToPinotQuery(query);\n+    brokerRequest = converter.convert(pinotQuery);\n+    Assert.assertEquals(pinotQuery.getFilterExpression().getFunctionCall().getOperator(), \"TEXT_MATCH\");\n+    Assert.assertEquals(brokerRequest.getFilterQuery().getOperator(), FilterOperator.TEXT_MATCH);\n+\n+    query = \"SELECT count(*) FROM foo where regexp_like(col, 'expr')\";\n+    pinotQuery = CalciteSqlParser.compileToPinotQuery(query);\n+    brokerRequest = converter.convert(pinotQuery);\n+    Assert.assertEquals(pinotQuery.getFilterExpression().getFunctionCall().getOperator(), \"REGEXP_LIKE\");\n+    Assert.assertEquals(brokerRequest.getFilterQuery().getOperator(), FilterOperator.REGEXP_LIKE);\n+\n+    query = \"SELECT count(*) FROM foo where REGEXP_LIKE(col, 'expr')\";\n+    pinotQuery = CalciteSqlParser.compileToPinotQuery(query);\n+    brokerRequest = converter.convert(pinotQuery);\n+    Assert.assertEquals(pinotQuery.getFilterExpression().getFunctionCall().getOperator(), \"REGEXP_LIKE\");\n+    Assert.assertEquals(brokerRequest.getFilterQuery().getOperator(), FilterOperator.REGEXP_LIKE);\n+\n+    query = \"SELECT count(*) FROM foo where col is not null\";\n+    pinotQuery = CalciteSqlParser.compileToPinotQuery(query);\n+    brokerRequest = converter.convert(pinotQuery);\n+    Assert.assertEquals(pinotQuery.getFilterExpression().getFunctionCall().getOperator(), \"IS_NOT_NULL\");\n+    Assert.assertEquals(pinotQuery.getFilterExpression().getFunctionCall().getOperands().get(0).getIdentifier().getName(), \"col\");\n+    Assert.assertEquals(brokerRequest.getFilterQuery().getOperator(), FilterOperator.IS_NOT_NULL);\n+    Assert.assertEquals(brokerRequest.getFilterQuery().getColumn(), \"col\");\n+\n+    query = \"SELECT count(*) FROM foo where col IS NOT NULL\";\n+    pinotQuery = CalciteSqlParser.compileToPinotQuery(query);\n+    brokerRequest = converter.convert(pinotQuery);\n+    Assert.assertEquals(pinotQuery.getFilterExpression().getFunctionCall().getOperator(), \"IS_NOT_NULL\");\n+    Assert.assertEquals(pinotQuery.getFilterExpression().getFunctionCall().getOperands().get(0).getIdentifier().getName(), \"col\");\n+    Assert.assertEquals(brokerRequest.getFilterQuery().getOperator(), FilterOperator.IS_NOT_NULL);\n+    Assert.assertEquals(brokerRequest.getFilterQuery().getColumn(), \"col\");\n+\n+    query = \"SELECT count(*) FROM foo where col is null\";\n+    pinotQuery = CalciteSqlParser.compileToPinotQuery(query);\n+    brokerRequest = converter.convert(pinotQuery);\n+    Assert.assertEquals(pinotQuery.getFilterExpression().getFunctionCall().getOperator(), \"IS_NULL\");\n+    Assert.assertEquals(pinotQuery.getFilterExpression().getFunctionCall().getOperands().get(0).getIdentifier().getName(), \"col\");\n+    Assert.assertEquals(brokerRequest.getFilterQuery().getOperator(), FilterOperator.IS_NULL);\n+    Assert.assertEquals(brokerRequest.getFilterQuery().getColumn(), \"col\");\n+\n+    query = \"SELECT count(*) FROM foo where col IS NULL\";\n+    pinotQuery = CalciteSqlParser.compileToPinotQuery(query);\n+    brokerRequest = converter.convert(pinotQuery);\n+    Assert.assertEquals(pinotQuery.getFilterExpression().getFunctionCall().getOperator(), \"IS_NULL\");\n+    Assert.assertEquals(pinotQuery.getFilterExpression().getFunctionCall().getOperands().get(0).getIdentifier().getName(), \"col\");\n+    Assert.assertEquals(brokerRequest.getFilterQuery().getOperator(), FilterOperator.IS_NULL);\n+    Assert.assertEquals(brokerRequest.getFilterQuery().getColumn(), \"col\");\n+  }\n }", "originalCommit": "ecbf988e5cef9cb18907d71ab8e7458a7970fa80", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODUyODAyOA==", "url": "https://github.com/apache/pinot/pull/5643#discussion_r448528028", "body": "(nit) Change line 270 as well\r\n```suggestion\r\n            // First operand is the left-hand side column/expression of the predicate\r\n```", "bodyText": "(nit) Change line 270 as well\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        //first operand is the always the column\n          \n          \n            \n                        // First operand is the left-hand side column/expression of the predicate", "bodyHTML": "<p dir=\"auto\">(nit) Change line 270 as well</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"276\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-c\"><span class=\"pl-c\">//</span><span class=\"x x-first x-last\">first </span>operand is the <span class=\"x x-first x-last\">always the</span> column</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"276\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-c\"><span class=\"pl-c\">//</span><span class=\"x x-first x-last\"> First </span>operand is the <span class=\"x x-first x-last\">left-hand side</span> column<span class=\"x x-first x-last\">/expression of the predicate</span></span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "Jackie-Jiang", "createdAt": "2020-07-01T17:57:28Z", "path": "pinot-common/src/main/java/org/apache/pinot/pql/parsers/PinotQuery2BrokerRequestConverter.java", "diffHunk": "@@ -272,7 +271,11 @@ private FilterQuery traverseFilterExpression(Expression filterExpression, Filter\n             filterQuery.setColumn(ParserUtils.standardizeExpression(operands.get(0), false));\n             filterQuery.setValue(ParserUtils.getFilterValues(filterKind, operands));\n             break;\n-\n+          case IS_NULL:\n+          case IS_NOT_NULL:\n+            //first operand is the always the column", "originalCommit": "ecbf988e5cef9cb18907d71ab8e7458a7970fa80", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "500c7c266dcef729a872bad51b7d2afebea6d1d0", "url": "https://github.com/apache/pinot/commit/500c7c266dcef729a872bad51b7d2afebea6d1d0", "message": "Fix tests", "committedDate": "2020-07-02T00:41:40Z", "type": "commit"}]}