{"pr_number": 6105, "pr_title": "scalar functions for array", "pr_author": "SandishKumarHN", "pr_createdAt": "2020-10-05T15:31:01Z", "pr_url": "https://github.com/apache/pinot/pull/6105", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTczNTg2NA==", "url": "https://github.com/apache/pinot/pull/6105#discussion_r499735864", "body": "Also, add non-primitive data types e.g. Integer[], Long[]", "bodyText": "Also, add non-primitive data types e.g. Integer[], Long[]", "bodyHTML": "<p dir=\"auto\">Also, add non-primitive data types e.g. Integer[], Long[]</p>", "author": "KKcorps", "createdAt": "2020-10-05T16:47:33Z", "path": "pinot-common/src/main/java/org/apache/pinot/common/function/FunctionUtils.java", "diffHunk": "@@ -42,6 +42,11 @@ private FunctionUtils() {\n     put(Double.class, PinotDataType.DOUBLE);\n     put(String.class, PinotDataType.STRING);\n     put(byte[].class, PinotDataType.BYTES);\n+    put(int[].class, PinotDataType.INTEGER_ARRAY);\n+    put(String[].class, PinotDataType.STRING_ARRAY);\n+    put(long[].class, PinotDataType.LONG_ARRAY);\n+    put(float[].class, PinotDataType.FLOAT_ARRAY);\n+    put(double[].class, PinotDataType.DOUBLE_ARRAY);", "originalCommit": "83ecfb2fd5d3ef03228afadbcf3a9a76b9cd20d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY0NzQ0Mw==", "url": "https://github.com/apache/pinot/pull/6105#discussion_r502647443", "bodyText": "noon-primitive data types been added", "author": "SandishKumarHN", "createdAt": "2020-10-09T20:05:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTczNTg2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTczNzI2Mg==", "url": "https://github.com/apache/pinot/pull/6105#discussion_r499737262", "body": "Can we keep function names to match the https://prestodb.io/docs/current/functions/array.html\r\n\r\nAlso, please add any other possible functions from the link.", "bodyText": "Can we keep function names to match the https://prestodb.io/docs/current/functions/array.html\nAlso, please add any other possible functions from the link.", "bodyHTML": "<p dir=\"auto\">Can we keep function names to match the <a href=\"https://prestodb.io/docs/current/functions/array.html\" rel=\"nofollow\">https://prestodb.io/docs/current/functions/array.html</a></p>\n<p dir=\"auto\">Also, please add any other possible functions from the link.</p>", "author": "KKcorps", "createdAt": "2020-10-05T16:49:57Z", "path": "pinot-common/src/main/java/org/apache/pinot/common/function/scalar/ArrayFunctions.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.function.scalar;\n+\n+import java.util.Arrays;\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.pinot.spi.annotations.ScalarFunction;\n+\n+/**\n+ * Inbuilt Array Transformation Functions\n+ * The functions can be used as UDFs in Query when added in the FunctionRegistry.\n+ * @ScalarFunction annotation is used with each method for the registration\n+ *\n+ * Example usage:\n+ * <code> SELECT reverseArray(array) FROM baseballStats LIMIT 10 </code>\n+ */\n+public class ArrayFunctions {\n+  private ArrayFunctions() {\n+\n+  }\n+\n+  /**\n+   * @see ArrayUtils#reverse(Object[])\n+   * @param value\n+   * @return reversed input array in from end to start\n+   */\n+  @ScalarFunction\n+  public static int[] reverseIntArray(int[] value) {\n+      ArrayUtils.reverse(value);\n+      return value;\n+  }\n+\n+  /**\n+   * @see ArrayUtils#reverse(Object[])\n+   * @param value\n+   * @return reversed input array in from end to start\n+   */\n+  @ScalarFunction\n+  public static String[] reverseStringArray(String[] value) {\n+    ArrayUtils.reverse(value);\n+    return value;\n+  }\n+\n+  /**\n+   * @see Arrays#stream(double[]).max()\n+   * @param value\n+   * @return find minimum value in input array\n+   */\n+  @ScalarFunction\n+  public static int[] arrayMax(int[] value) {\n+    return new int[] {Arrays.stream(value).max().getAsInt()};\n+  }\n+\n+  /**\n+   * @see Arrays#stream(double[]).min()\n+   * @param value\n+   * @return find maximum value in input array\n+   */\n+  @ScalarFunction\n+  public static int[] arrayMin(int[] value) {\n+    return new int[] {Arrays.stream(value).min().getAsInt()};\n+  }\n+\n+  /**\n+   * @see Arrays#stream(double[]).sum()\n+   * @param value\n+   * @return calculate sum of all values in input array\n+   */\n+  @ScalarFunction\n+  public static int[] arraySum(int[] value) {\n+    return new int[] {Arrays.stream(value).sum()};\n+  }\n+\n+  /**\n+   * @see ArrayUtils#indexOf(double[], double)\n+   * @param value\n+   * @param valueToFind\n+   * @return return position of value in input array\n+   */\n+  @ScalarFunction\n+  public static int[] arrayPosition(int[] value, int valueToFind) {", "originalCommit": "83ecfb2fd5d3ef03228afadbcf3a9a76b9cd20d4", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgyMTg2NQ==", "url": "https://github.com/apache/pinot/pull/6105#discussion_r499821865", "body": "for every function that we want to add, we'll have to always write fooLong, fooInt, fooDouble, fooFloat, fooString. In the presto-pinot connector we'll have to do additional mapping. Is there no way around that?", "bodyText": "for every function that we want to add, we'll have to always write fooLong, fooInt, fooDouble, fooFloat, fooString. In the presto-pinot connector we'll have to do additional mapping. Is there no way around that?", "bodyHTML": "<p dir=\"auto\">for every function that we want to add, we'll have to always write fooLong, fooInt, fooDouble, fooFloat, fooString. In the presto-pinot connector we'll have to do additional mapping. Is there no way around that?</p>", "author": "npawar", "createdAt": "2020-10-05T19:27:32Z", "path": "pinot-common/src/main/java/org/apache/pinot/common/function/scalar/ArrayFunctions.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.function.scalar;\n+\n+import java.util.Arrays;\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.pinot.spi.annotations.ScalarFunction;\n+\n+/**\n+ * Inbuilt Array Transformation Functions\n+ * The functions can be used as UDFs in Query when added in the FunctionRegistry.\n+ * @ScalarFunction annotation is used with each method for the registration\n+ *\n+ * Example usage:\n+ * <code> SELECT reverseArray(array) FROM baseballStats LIMIT 10 </code>\n+ */\n+public class ArrayFunctions {\n+  private ArrayFunctions() {\n+\n+  }\n+\n+  /**\n+   * @see ArrayUtils#reverse(Object[])\n+   * @param value\n+   * @return reversed input array in from end to start\n+   */\n+  @ScalarFunction\n+  public static int[] reverseIntArray(int[] value) {", "originalCommit": "83ecfb2fd5d3ef03228afadbcf3a9a76b9cd20d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDIwMDE0Nw==", "url": "https://github.com/apache/pinot/pull/6105#discussion_r500200147", "bodyText": "@npawar I was going through the string, json, and date scalar functions. I don't see a way to make it generic function for all types. @KKcorps can you please comment.", "author": "SandishKumarHN", "createdAt": "2020-10-06T11:27:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgyMTg2NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTEwMjY2Mg==", "url": "https://github.com/apache/pinot/pull/6105#discussion_r501102662", "bodyText": "Yes, currently that's not possible. We can resolve this in another PR.", "author": "KKcorps", "createdAt": "2020-10-07T15:24:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTgyMTg2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkwOTAxNw==", "url": "https://github.com/apache/pinot/pull/6105#discussion_r499909017", "body": "Why do you need `int` here? The argument should always be `Object`", "bodyText": "Why do you need int here? The argument should always be Object", "bodyHTML": "<p dir=\"auto\">Why do you need <code>int</code> here? The argument should always be <code>Object</code></p>", "author": "Jackie-Jiang", "createdAt": "2020-10-05T22:35:28Z", "path": "pinot-common/src/main/java/org/apache/pinot/common/function/FunctionUtils.java", "diffHunk": "@@ -56,6 +61,12 @@ private FunctionUtils() {\n     put(Double.class, PinotDataType.DOUBLE);\n     put(String.class, PinotDataType.STRING);\n     put(byte[].class, PinotDataType.BYTES);\n+    put(int[].class, PinotDataType.INTEGER_ARRAY);\n+    put(int.class, PinotDataType.INTEGER);", "originalCommit": "83ecfb2fd5d3ef03228afadbcf3a9a76b9cd20d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY0ODM5NA==", "url": "https://github.com/apache/pinot/pull/6105#discussion_r502648394", "bodyText": "int was not added for SV, so added int.", "author": "SandishKumarHN", "createdAt": "2020-10-09T20:08:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkwOTAxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkwOTMwMA==", "url": "https://github.com/apache/pinot/pull/6105#discussion_r499909300", "body": "Can we keep the same order as the SV ones (int, long, float, double, string), same for other places", "bodyText": "Can we keep the same order as the SV ones (int, long, float, double, string), same for other places", "bodyHTML": "<p dir=\"auto\">Can we keep the same order as the SV ones (int, long, float, double, string), same for other places</p>", "author": "Jackie-Jiang", "createdAt": "2020-10-05T22:36:22Z", "path": "pinot-common/src/main/java/org/apache/pinot/common/function/FunctionUtils.java", "diffHunk": "@@ -42,6 +42,11 @@ private FunctionUtils() {\n     put(Double.class, PinotDataType.DOUBLE);\n     put(String.class, PinotDataType.STRING);\n     put(byte[].class, PinotDataType.BYTES);\n+    put(int[].class, PinotDataType.INTEGER_ARRAY);", "originalCommit": "83ecfb2fd5d3ef03228afadbcf3a9a76b9cd20d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY0NzI0Mw==", "url": "https://github.com/apache/pinot/pull/6105#discussion_r502647243", "bodyText": "I have made the order same as SV(int, long, float, double, string)", "author": "SandishKumarHN", "createdAt": "2020-10-09T20:05:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkwOTMwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkxMDY5MQ==", "url": "https://github.com/apache/pinot/pull/6105#discussion_r499910691", "body": "Don't add `boolean` here as `DataType.BOOLEAN` is not a valid internal `DataType` (we use `STRING` to represent boolean). All the unrecognized types will be handled as `STRING`", "bodyText": "Don't add boolean here as DataType.BOOLEAN is not a valid internal DataType (we use STRING to represent boolean). All the unrecognized types will be handled as STRING", "bodyHTML": "<p dir=\"auto\">Don't add <code>boolean</code> here as <code>DataType.BOOLEAN</code> is not a valid internal <code>DataType</code> (we use <code>STRING</code> to represent boolean). All the unrecognized types will be handled as <code>STRING</code></p>", "author": "Jackie-Jiang", "createdAt": "2020-10-05T22:40:30Z", "path": "pinot-common/src/main/java/org/apache/pinot/common/function/FunctionUtils.java", "diffHunk": "@@ -69,6 +80,12 @@ private FunctionUtils() {\n     put(Double.class, DataType.DOUBLE);\n     put(String.class, DataType.STRING);\n     put(byte[].class, DataType.BYTES);\n+    put(int[].class, DataType.INT);\n+    put(String[].class, DataType.STRING);\n+    put(long[].class, DataType.LONG);\n+    put(float[].class, DataType.FLOAT);\n+    put(double[].class, DataType.DOUBLE);\n+    put(boolean.class, DataType.BOOLEAN);", "originalCommit": "83ecfb2fd5d3ef03228afadbcf3a9a76b9cd20d4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY0ODE3NQ==", "url": "https://github.com/apache/pinot/pull/6105#discussion_r502648175", "bodyText": "boolean been removed", "author": "SandishKumarHN", "createdAt": "2020-10-09T20:07:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTkxMDY5MQ=="}], "type": "inlineReview"}, {"oid": "0fe9f9e99c0ddb370f83ee9a580bfce8b85e5955", "url": "https://github.com/apache/pinot/commit/0fe9f9e99c0ddb370f83ee9a580bfce8b85e5955", "message": "unit test for scalar array functions", "committedDate": "2020-10-06T21:21:42Z", "type": "forcePushed"}, {"oid": "e31c730851d4372b7cae0ef9e95bde98a4db0e7d", "url": "https://github.com/apache/pinot/commit/e31c730851d4372b7cae0ef9e95bde98a4db0e7d", "message": "unit test for scalar array functions", "committedDate": "2020-10-07T15:04:39Z", "type": "forcePushed"}, {"oid": "8f79ff777cfda6f68c329c052529af29cd7cedec", "url": "https://github.com/apache/pinot/commit/8f79ff777cfda6f68c329c052529af29cd7cedec", "message": "unit test for scalar array functions", "committedDate": "2020-10-07T15:34:17Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTExODI4NA==", "url": "https://github.com/apache/pinot/pull/6105#discussion_r501118284", "body": "why are most of these returning multi value int[] instead of just int? arraySum, arrayMax, arrayMin, arrayPosition and arrayContains", "bodyText": "why are most of these returning multi value int[] instead of just int? arraySum, arrayMax, arrayMin, arrayPosition and arrayContains", "bodyHTML": "<p dir=\"auto\">why are most of these returning multi value int[] instead of just int? arraySum, arrayMax, arrayMin, arrayPosition and arrayContains</p>", "author": "npawar", "createdAt": "2020-10-07T15:45:05Z", "path": "pinot-common/src/main/java/org/apache/pinot/common/function/scalar/ArrayFunctions.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.function.scalar;\n+\n+import java.util.Arrays;\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.pinot.spi.annotations.ScalarFunction;\n+\n+/**\n+ * Inbuilt Array Transformation Functions\n+ * The functions can be used as UDFs in Query when added in the FunctionRegistry.\n+ * @ScalarFunction annotation is used with each method for the registration\n+ *\n+ * Example usage:\n+ * <code> SELECT reverseArray(array) FROM baseballStats LIMIT 10 </code>\n+ */\n+public class ArrayFunctions {\n+  private ArrayFunctions() {\n+\n+  }\n+\n+  /**\n+   * @see ArrayUtils#reverse(Object[])\n+   * @param value\n+   * @return reversed input array in from end to start\n+   */\n+  @ScalarFunction(name = \"array_reverse_int\")\n+  public static int[] arrayReverseInt(int[] value) {\n+      ArrayUtils.reverse(value);\n+      return value;\n+  }\n+\n+  /**\n+   * @see ArrayUtils#reverse(Object[])\n+   * @param value\n+   * @return reversed input array in from end to start\n+   */\n+  @ScalarFunction(name = \"array_reverse_string\")\n+  public static String[] arrayReverseString(String[] value) {\n+    ArrayUtils.reverse(value);\n+    return value;\n+  }\n+\n+  /**\n+   * @see Arrays#stream(double[]).max()\n+   * @param value\n+   * @return find minimum value in input array\n+   */\n+  @ScalarFunction(name = \"array_max\")\n+  public static int[] arrayMax(int[] value) {\n+    return new int[] {Arrays.stream(value).max().getAsInt()};\n+  }\n+\n+  /**\n+   * @see Arrays#stream(double[]).min()\n+   * @param value\n+   * @return find maximum value in input array\n+   */\n+  @ScalarFunction(name = \"array_min\")", "originalCommit": "8f79ff777cfda6f68c329c052529af29cd7cedec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE0MDg1Ng==", "url": "https://github.com/apache/pinot/pull/6105#discussion_r501140856", "bodyText": "as the input param column is a multivalued column and returning the same. should we keep it int??", "author": "SandishKumarHN", "createdAt": "2020-10-07T16:16:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTExODI4NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE1MTgyNg==", "url": "https://github.com/apache/pinot/pull/6105#discussion_r501151826", "bodyText": "Yes, lets return a single value. It is not intuitive to expect MV in these functions. Users might run into undesirable behaviors when nesting functions", "author": "npawar", "createdAt": "2020-10-07T16:32:38Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTExODI4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTExOTQzMQ==", "url": "https://github.com/apache/pinot/pull/6105#discussion_r501119431", "body": "if these are only going to work for int[], should these be called array_max_int ?", "bodyText": "if these are only going to work for int[], should these be called array_max_int ?", "bodyHTML": "<p dir=\"auto\">if these are only going to work for int[], should these be called array_max_int ?</p>", "author": "npawar", "createdAt": "2020-10-07T15:46:37Z", "path": "pinot-common/src/main/java/org/apache/pinot/common/function/scalar/ArrayFunctions.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.function.scalar;\n+\n+import java.util.Arrays;\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.pinot.spi.annotations.ScalarFunction;\n+\n+/**\n+ * Inbuilt Array Transformation Functions\n+ * The functions can be used as UDFs in Query when added in the FunctionRegistry.\n+ * @ScalarFunction annotation is used with each method for the registration\n+ *\n+ * Example usage:\n+ * <code> SELECT reverseArray(array) FROM baseballStats LIMIT 10 </code>\n+ */\n+public class ArrayFunctions {\n+  private ArrayFunctions() {\n+\n+  }\n+\n+  /**\n+   * @see ArrayUtils#reverse(Object[])\n+   * @param value\n+   * @return reversed input array in from end to start\n+   */\n+  @ScalarFunction(name = \"array_reverse_int\")\n+  public static int[] arrayReverseInt(int[] value) {\n+      ArrayUtils.reverse(value);\n+      return value;\n+  }\n+\n+  /**\n+   * @see ArrayUtils#reverse(Object[])\n+   * @param value\n+   * @return reversed input array in from end to start\n+   */\n+  @ScalarFunction(name = \"array_reverse_string\")\n+  public static String[] arrayReverseString(String[] value) {\n+    ArrayUtils.reverse(value);\n+    return value;\n+  }\n+\n+  /**\n+   * @see Arrays#stream(double[]).max()\n+   * @param value\n+   * @return find minimum value in input array\n+   */\n+  @ScalarFunction(name = \"array_max\")", "originalCommit": "8f79ff777cfda6f68c329c052529af29cd7cedec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE0MTE2Mw==", "url": "https://github.com/apache/pinot/pull/6105#discussion_r501141163", "bodyText": "yeah, we could do that.", "author": "SandishKumarHN", "createdAt": "2020-10-07T16:16:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTExOTQzMQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTEyOTg4Nw==", "url": "https://github.com/apache/pinot/pull/6105#discussion_r501129887", "body": "@fx19880617 has already added min, max, sum as regular transform functions: https://github.com/apache/incubator-pinot/blob/master/pinot-core/src/main/java/org/apache/pinot/core/operator/transform/function/ArrayMaxTransformFunction.java\r\nDo we need them here again?", "bodyText": "@fx19880617 has already added min, max, sum as regular transform functions: https://github.com/apache/incubator-pinot/blob/master/pinot-core/src/main/java/org/apache/pinot/core/operator/transform/function/ArrayMaxTransformFunction.java\nDo we need them here again?", "bodyHTML": "<p dir=\"auto\">@fx19880617 has already added min, max, sum as regular transform functions: <a href=\"https://github.com/apache/incubator-pinot/blob/master/pinot-core/src/main/java/org/apache/pinot/core/operator/transform/function/ArrayMaxTransformFunction.java\">https://github.com/apache/incubator-pinot/blob/master/pinot-core/src/main/java/org/apache/pinot/core/operator/transform/function/ArrayMaxTransformFunction.java</a><br>\nDo we need them here again?</p>", "author": "npawar", "createdAt": "2020-10-07T16:00:55Z", "path": "pinot-common/src/main/java/org/apache/pinot/common/function/scalar/ArrayFunctions.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.function.scalar;\n+\n+import java.util.Arrays;\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.pinot.spi.annotations.ScalarFunction;\n+\n+/**\n+ * Inbuilt Array Transformation Functions\n+ * The functions can be used as UDFs in Query when added in the FunctionRegistry.\n+ * @ScalarFunction annotation is used with each method for the registration\n+ *\n+ * Example usage:\n+ * <code> SELECT reverseArray(array) FROM baseballStats LIMIT 10 </code>\n+ */\n+public class ArrayFunctions {\n+  private ArrayFunctions() {\n+\n+  }\n+\n+  /**\n+   * @see ArrayUtils#reverse(Object[])\n+   * @param value\n+   * @return reversed input array in from end to start\n+   */\n+  @ScalarFunction(name = \"array_reverse_int\")\n+  public static int[] arrayReverseInt(int[] value) {\n+      ArrayUtils.reverse(value);\n+      return value;\n+  }\n+\n+  /**\n+   * @see ArrayUtils#reverse(Object[])\n+   * @param value\n+   * @return reversed input array in from end to start\n+   */\n+  @ScalarFunction(name = \"array_reverse_string\")\n+  public static String[] arrayReverseString(String[] value) {\n+    ArrayUtils.reverse(value);\n+    return value;\n+  }\n+\n+  /**\n+   * @see Arrays#stream(double[]).max()\n+   * @param value\n+   * @return find minimum value in input array\n+   */\n+  @ScalarFunction(name = \"array_max\")\n+  public static int[] arrayMax(int[] value) {\n+    return new int[] {Arrays.stream(value).max().getAsInt()};\n+  }\n+\n+  /**\n+   * @see Arrays#stream(double[]).min()\n+   * @param value\n+   * @return find maximum value in input array\n+   */\n+  @ScalarFunction(name = \"array_min\")\n+  public static int[] arrayMin(int[] value) {\n+    return new int[] {Arrays.stream(value).min().getAsInt()};\n+  }\n+\n+  /**\n+   * @see Arrays#stream(double[]).sum()\n+   * @param value\n+   * @return calculate sum of all values in input array\n+   */\n+  @ScalarFunction(name = \"array_sum\")", "originalCommit": "8f79ff777cfda6f68c329c052529af29cd7cedec", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTEzOTIxOQ==", "url": "https://github.com/apache/pinot/pull/6105#discussion_r501139219", "bodyText": "@npawar yeah, looks like already there, but not in scalar functions. will remove from PR.", "author": "SandishKumarHN", "createdAt": "2020-10-07T16:14:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTEyOTg4Nw=="}], "type": "inlineReview"}, {"oid": "26b77bcd58ac45ad10b8de2d01850db7604e16a7", "url": "https://github.com/apache/pinot/commit/26b77bcd58ac45ad10b8de2d01850db7604e16a7", "message": "review changes tests to InbuiltFunctionsTest", "committedDate": "2020-10-07T20:27:31Z", "type": "forcePushed"}, {"oid": "5d27508bfbf21e4961f1b40baa19b2d7d85412d0", "url": "https://github.com/apache/pinot/commit/5d27508bfbf21e4961f1b40baa19b2d7d85412d0", "message": "review changes tests to InbuiltFunctionsTest", "committedDate": "2020-10-07T21:19:40Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjczMzg1OA==", "url": "https://github.com/apache/pinot/pull/6105#discussion_r502733858", "body": "```suggestion\r\n    put(Long[].class, PinotDataType. LONG_ARRAY);\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                put(Long[].class, PinotDataType.INTEGER_ARRAY);\n          \n          \n            \n                put(Long[].class, PinotDataType. LONG_ARRAY);", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    put(<span class=\"pl-k\">Long</span>[]<span class=\"pl-k\">.</span>class, <span class=\"pl-smi\">PinotDataType</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span><span class=\"x x-first x-last\">INTEGER_ARRAY</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    put(<span class=\"pl-k\">Long</span>[]<span class=\"pl-k\">.</span>class, <span class=\"pl-smi\">PinotDataType</span>.<span class=\"x x-first\"> </span><span class=\"pl-c1 x x-last\">LONG_ARRAY</span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "Jackie-Jiang", "createdAt": "2020-10-10T02:18:11Z", "path": "pinot-common/src/main/java/org/apache/pinot/common/function/FunctionUtils.java", "diffHunk": "@@ -50,12 +59,22 @@ private FunctionUtils() {\n     put(Boolean.class, PinotDataType.BOOLEAN);\n     put(Character.class, PinotDataType.CHARACTER);\n     put(Short.class, PinotDataType.SHORT);\n+    put(int.class, PinotDataType.INTEGER);\n     put(Integer.class, PinotDataType.INTEGER);\n     put(Long.class, PinotDataType.LONG);\n     put(Float.class, PinotDataType.FLOAT);\n     put(Double.class, PinotDataType.DOUBLE);\n     put(String.class, PinotDataType.STRING);\n     put(byte[].class, PinotDataType.BYTES);\n+    put(int[].class, PinotDataType.INTEGER_ARRAY);\n+    put(Integer[].class, PinotDataType.INTEGER_ARRAY);\n+    put(long[].class, PinotDataType.LONG_ARRAY);\n+    put(Long[].class, PinotDataType.INTEGER_ARRAY);", "originalCommit": "5d27508bfbf21e4961f1b40baa19b2d7d85412d0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjczMzg5NA==", "url": "https://github.com/apache/pinot/pull/6105#discussion_r502733894", "body": "```suggestion\r\n    put(long[].class, ColumnDataType.LONG);\r\n    put(Long[].class, ColumnDataType.LONG);\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                put(long[].class, ColumnDataType.FLOAT);\n          \n          \n            \n                put(Long[].class, ColumnDataType.FLOAT);\n          \n          \n            \n                put(long[].class, ColumnDataType.LONG);\n          \n          \n            \n                put(Long[].class, ColumnDataType.LONG);", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    put(<span class=\"pl-k\">long</span>[]<span class=\"pl-k\">.</span>class, <span class=\"pl-smi\">ColumnDataType</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span><span class=\"x x-first x-last\">FLOAT</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    put(<span class=\"pl-k\">Long</span>[]<span class=\"pl-k\">.</span>class, <span class=\"pl-smi\">ColumnDataType</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span><span class=\"x x-first x-last\">FLOAT</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    put(<span class=\"pl-k\">long</span>[]<span class=\"pl-k\">.</span>class, <span class=\"pl-smi\">ColumnDataType</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span><span class=\"x x-first x-last\">LONG</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    put(<span class=\"pl-k\">Long</span>[]<span class=\"pl-k\">.</span>class, <span class=\"pl-smi\">ColumnDataType</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span><span class=\"x x-first x-last\">LONG</span></span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "Jackie-Jiang", "createdAt": "2020-10-10T02:18:27Z", "path": "pinot-common/src/main/java/org/apache/pinot/common/function/FunctionUtils.java", "diffHunk": "@@ -82,6 +110,15 @@ private FunctionUtils() {\n     put(Double.class, ColumnDataType.DOUBLE);\n     put(String.class, ColumnDataType.STRING);\n     put(byte[].class, ColumnDataType.BYTES);\n+    put(int[].class, ColumnDataType.INT);\n+    put(Integer[].class, ColumnDataType.INT);\n+    put(long[].class, ColumnDataType.FLOAT);\n+    put(Long[].class, ColumnDataType.FLOAT);", "originalCommit": "5d27508bfbf21e4961f1b40baa19b2d7d85412d0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjczNDAwNg==", "url": "https://github.com/apache/pinot/pull/6105#discussion_r502734006", "body": "Remove this one as argument is always an `Object`", "bodyText": "Remove this one as argument is always an Object", "bodyHTML": "<p dir=\"auto\">Remove this one as argument is always an <code>Object</code></p>", "author": "Jackie-Jiang", "createdAt": "2020-10-10T02:19:43Z", "path": "pinot-common/src/main/java/org/apache/pinot/common/function/FunctionUtils.java", "diffHunk": "@@ -50,12 +59,22 @@ private FunctionUtils() {\n     put(Boolean.class, PinotDataType.BOOLEAN);\n     put(Character.class, PinotDataType.CHARACTER);\n     put(Short.class, PinotDataType.SHORT);\n+    put(int.class, PinotDataType.INTEGER);", "originalCommit": "5d27508bfbf21e4961f1b40baa19b2d7d85412d0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "ca28e3f53e64fbda9ae40e335f23e220fb4061ab", "url": "https://github.com/apache/pinot/commit/ca28e3f53e64fbda9ae40e335f23e220fb4061ab", "message": "scalar functions for array", "committedDate": "2020-11-03T01:34:15Z", "type": "forcePushed"}, {"oid": "37aec3e0be8bfbb4933e60b7e9b0bd5ebfc9ec87", "url": "https://github.com/apache/pinot/commit/37aec3e0be8bfbb4933e60b7e9b0bd5ebfc9ec87", "message": "scalar functions for array", "committedDate": "2020-11-03T02:29:24Z", "type": "commit"}, {"oid": "37aec3e0be8bfbb4933e60b7e9b0bd5ebfc9ec87", "url": "https://github.com/apache/pinot/commit/37aec3e0be8bfbb4933e60b7e9b0bd5ebfc9ec87", "message": "scalar functions for array", "committedDate": "2020-11-03T02:29:24Z", "type": "forcePushed"}]}