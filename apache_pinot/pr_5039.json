{"pr_number": 5039, "pr_title": "Close Kafka consumer before building or downloading immutable segment", "pr_author": "jackjlli", "pr_createdAt": "2020-02-01T19:27:39Z", "pr_url": "https://github.com/apache/pinot/pull/5039", "timeline": [{"oid": "1201aec79de1b182a645034468305341fbc30610", "url": "https://github.com/apache/pinot/commit/1201aec79de1b182a645034468305341fbc30610", "message": "Close Kafka consumer before building or downloading immutable segment", "committedDate": "2020-02-04T07:29:52Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgzOTE0OQ==", "url": "https://github.com/apache/pinot/pull/5039#discussion_r374839149", "body": "```suggestion\r\n  private final Semaphore _partitionConsumerSemaphore;\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private final Semaphore _partitionIdSemaphore;\n          \n          \n            \n              private final Semaphore _partitionConsumerSemaphore;", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">  <span class=\"pl-k\">private</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi\">Semaphore</span> <span class=\"x x-first x-last\">_partitionIdSemaphore</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">  <span class=\"pl-k\">private</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi\">Semaphore</span> <span class=\"x x-first x-last\">_partitionConsumerSemaphore</span>;</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "mcvsubbu", "createdAt": "2020-02-04T18:17:03Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/realtime/LLRealtimeSegmentDataManager.java", "diffHunk": "@@ -203,6 +203,7 @@ public void deleteSegmentFile() {\n   private final String _resourceDataDir;\n   private final IndexLoadingConfig _indexLoadingConfig;\n   private final Schema _schema;\n+  private final Semaphore _partitionIdSemaphore;", "originalCommit": "1201aec79de1b182a645034468305341fbc30610", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDk0ODI2Mw==", "url": "https://github.com/apache/pinot/pull/5039#discussion_r374948263", "bodyText": "Done.", "author": "jackjlli", "createdAt": "2020-02-04T22:02:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDgzOTE0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg0MTg0OQ==", "url": "https://github.com/apache/pinot/pull/5039#discussion_r374841849", "body": "We should not stop the world if we cannot close the consumer.  If for any reason, the close fails, we should be able to continue, giving the gurantee that we will not call the consume methods on the same consumer. I am not opposed to changing the interface to support an explicit release() method (instead of just be auto-closeable). @npawar  can also comment on this.", "bodyText": "We should not stop the world if we cannot close the consumer.  If for any reason, the close fails, we should be able to continue, giving the gurantee that we will not call the consume methods on the same consumer. I am not opposed to changing the interface to support an explicit release() method (instead of just be auto-closeable). @npawar  can also comment on this.", "bodyHTML": "<p dir=\"auto\">We should not stop the world if we cannot close the consumer.  If for any reason, the close fails, we should be able to continue, giving the gurantee that we will not call the consume methods on the same consumer. I am not opposed to changing the interface to support an explicit release() method (instead of just be auto-closeable). <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/npawar/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/npawar\">@npawar</a>  can also comment on this.</p>", "author": "mcvsubbu", "createdAt": "2020-02-04T18:22:04Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/realtime/LLRealtimeSegmentDataManager.java", "diffHunk": "@@ -802,6 +803,11 @@ protected boolean commitSegment(String controllerVipUrl, boolean isSplitCommit)\n   }\n \n   protected boolean buildSegmentAndReplace() {\n+    if (!(closePartitionLevelConsumer() && closeStreamMetadataProvider())) {\n+      return false;", "originalCommit": "1201aec79de1b182a645034468305341fbc30610", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg2MzIyNw==", "url": "https://github.com/apache/pinot/pull/5039#discussion_r374863227", "bodyText": "If the Kafka consumer cannot be closed, it's ok to just return false.\nOnce buildSegmentAndReplace() gets called, it indicates that we don't need Kafka consumer any more.\nThus, returning false and then downloading another one should be fine.", "author": "jackjlli", "createdAt": "2020-02-04T19:02:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg0MTg0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQ1NzU3NA==", "url": "https://github.com/apache/pinot/pull/5039#discussion_r375457574", "bodyText": "I think this could result in no segment being built. My guess is that is we get an exception when closing the partitionLevelConsumer or the streamMetadataConsumer, it'll likely be a stream issue, and we'll get exceptions across all partitions, and no one will build the segment.\nWdyt?", "author": "npawar", "createdAt": "2020-02-05T19:21:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg0MTg0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQ5MzM3OQ==", "url": "https://github.com/apache/pinot/pull/5039#discussion_r375493379", "bodyText": "The current way we handle the exception when the consumer cannot be closed is that we just swallow the exception and log an error message.\nWe can still swallow the message in this new PR.", "author": "jackjlli", "createdAt": "2020-02-05T20:35:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg0MTg0OQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU3MjAxMg==", "url": "https://github.com/apache/pinot/pull/5039#discussion_r375572012", "bodyText": "@npawar Updated the PR to swallow the exception.", "author": "jackjlli", "createdAt": "2020-02-05T23:46:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg0MTg0OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg0MzA3MA==", "url": "https://github.com/apache/pinot/pull/5039#discussion_r374843070", "body": "you do not need to pass the entire map. Just one semaphore should be enough. The caller can call getOrDefault()", "bodyText": "you do not need to pass the entire map. Just one semaphore should be enough. The caller can call getOrDefault()", "bodyHTML": "<p dir=\"auto\">you do not need to pass the entire map. Just one semaphore should be enough. The caller can call getOrDefault()</p>", "author": "mcvsubbu", "createdAt": "2020-02-04T18:24:25Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/realtime/LLRealtimeSegmentDataManager.java", "diffHunk": "@@ -1008,7 +1030,8 @@ public void stop()\n   // If the transition is OFFLINE to ONLINE, the caller should have downloaded the segment and we don't reach here.\n   public LLRealtimeSegmentDataManager(RealtimeSegmentZKMetadata segmentZKMetadata, TableConfig tableConfig,\n       InstanceZKMetadata instanceZKMetadata, RealtimeTableDataManager realtimeTableDataManager, String resourceDataDir,\n-      IndexLoadingConfig indexLoadingConfig, Schema schema, ServerMetrics serverMetrics) {\n+      IndexLoadingConfig indexLoadingConfig, Schema schema, Map<Integer, Semaphore> partitionIdToSemaphoreMap,", "originalCommit": "1201aec79de1b182a645034468305341fbc30610", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg0ODU3NQ==", "url": "https://github.com/apache/pinot/pull/5039#discussion_r374848575", "bodyText": "The problem is partitionId is extracted inside LLRealtimeSegmentDataManager.", "author": "jackjlli", "createdAt": "2020-02-04T18:34:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg0MzA3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQ2MzE5Nw==", "url": "https://github.com/apache/pinot/pull/5039#discussion_r375463197", "bodyText": "you could introduce getSemaphoreForPartition method in the RealtimeDataManager, similar to getSegmentBuildSemaphore.  Inside getSemaphoreForPartition, concurrentMap::compute can be used to either return existing value or new semaphore if null. That way you don't have to pass the whole map.", "author": "npawar", "createdAt": "2020-02-05T19:31:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg0MzA3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQ5MDMyMg==", "url": "https://github.com/apache/pinot/pull/5039#discussion_r375490322", "bodyText": "Good idea. But the creation of Kafka consumers happens in the constructor of RealtimeDataManager, which means the consumers have already been created before the SegmentManager acquires the semaphore.", "author": "jackjlli", "createdAt": "2020-02-05T20:28:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg0MzA3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAwMzE0Nw==", "url": "https://github.com/apache/pinot/pull/5039#discussion_r376003147", "bodyText": "You can get the partiitionId in the calling method from the SegmentName object. Passing the entire map into this object is not clean", "author": "mcvsubbu", "createdAt": "2020-02-06T18:21:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg0MzA3MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjEyNTc5Mw==", "url": "https://github.com/apache/pinot/pull/5039#discussion_r376125793", "bodyText": "Updated the code to pass the semaphore only to segmentManager.", "author": "jackjlli", "createdAt": "2020-02-06T22:49:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg0MzA3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg0MzQ2OA==", "url": "https://github.com/apache/pinot/pull/5039#discussion_r374843468", "body": "will this throw an exception and log an error when the service is being shutdown?", "bodyText": "will this throw an exception and log an error when the service is being shutdown?", "bodyHTML": "<p dir=\"auto\">will this throw an exception and log an error when the service is being shutdown?</p>", "author": "mcvsubbu", "createdAt": "2020-02-04T18:25:14Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/realtime/LLRealtimeSegmentDataManager.java", "diffHunk": "@@ -1106,6 +1130,15 @@ public LLRealtimeSegmentDataManager(RealtimeSegmentZKMetadata segmentZKMetadata,\n \n     // Create record transformer\n     _recordTransformer = CompositeTransformer.getDefaultTransformer(schema);\n+\n+    // Acquire semaphore to create Kafka consumers\n+    try {\n+      _partitionIdSemaphore.acquire();\n+    } catch (InterruptedException e) {\n+      String errorMsg = \"InterruptedException when acquiring semaphore for Segment: \" + _segmentNameStr;\n+      segmentLogger.error(errorMsg);", "originalCommit": "1201aec79de1b182a645034468305341fbc30610", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTU0MzMyMA==", "url": "https://github.com/apache/pinot/pull/5039#discussion_r375543320", "bodyText": "It should be ok, since it just logs an error message before the process gets fully shutdown. Plus, this logic is in the constructor, the segment hasn't been fully instantiated yet.", "author": "jackjlli", "createdAt": "2020-02-05T22:26:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg0MzQ2OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAwMzY1Nw==", "url": "https://github.com/apache/pinot/pull/5039#discussion_r376003657", "bodyText": "For now, this may be ok that we get an exception during shutdown (at times). Eventualy, we need a clean way of shutting down without throwing exceptions", "author": "mcvsubbu", "createdAt": "2020-02-06T18:22:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg0MzQ2OA=="}], "type": "inlineReview"}, {"oid": "07164a3afdfd92c3bc0d29960dba5f60febac03c", "url": "https://github.com/apache/pinot/commit/07164a3afdfd92c3bc0d29960dba5f60febac03c", "message": "Close Kafka consumer before building or downloading immutable segment", "committedDate": "2020-02-04T22:01:23Z", "type": "commit"}, {"oid": "07164a3afdfd92c3bc0d29960dba5f60febac03c", "url": "https://github.com/apache/pinot/commit/07164a3afdfd92c3bc0d29960dba5f60febac03c", "message": "Close Kafka consumer before building or downloading immutable segment", "committedDate": "2020-02-04T22:01:23Z", "type": "forcePushed"}, {"oid": "973f23a5e114bd6f9377682c7e174a505be14efd", "url": "https://github.com/apache/pinot/commit/973f23a5e114bd6f9377682c7e174a505be14efd", "message": "Add unit tests", "committedDate": "2020-02-04T23:06:10Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTUwNzQ3MQ==", "url": "https://github.com/apache/pinot/pull/5039#discussion_r375507471", "body": "similar close and check is needed in buildSegmentFormCommit method?", "bodyText": "similar close and check is needed in buildSegmentFormCommit method?", "bodyHTML": "<p dir=\"auto\">similar close and check is needed in buildSegmentFormCommit method?</p>", "author": "npawar", "createdAt": "2020-02-05T21:06:04Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/realtime/LLRealtimeSegmentDataManager.java", "diffHunk": "@@ -931,6 +972,11 @@ public void goOnlineFromConsuming(RealtimeSegmentZKMetadata metadata)\n   }\n \n   protected void downloadSegmentAndReplace(LLCRealtimeSegmentZKMetadata metadata) {\n+    closePartitionLevelConsumer();", "originalCommit": "973f23a5e114bd6f9377682c7e174a505be14efd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTUxODA5Mg==", "url": "https://github.com/apache/pinot/pull/5039#discussion_r375518092", "bodyText": "\ud83d\udc4d Put the close method in buildSegmentInternal to uniform the behavior", "author": "jackjlli", "createdAt": "2020-02-05T21:29:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTUwNzQ3MQ=="}], "type": "inlineReview"}, {"oid": "0e2b4a793c44cbbbe233e6ca3505b30809e7ae0a", "url": "https://github.com/apache/pinot/commit/0e2b4a793c44cbbbe233e6ca3505b30809e7ae0a", "message": "Uniform the close method for building realtime immutable segment", "committedDate": "2020-02-05T21:27:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAwNDA4NA==", "url": "https://github.com/apache/pinot/pull/5039#discussion_r376004084", "body": "Why is this returning a boolean, when the callers are not considering the return value?", "bodyText": "Why is this returning a boolean, when the callers are not considering the return value?", "bodyHTML": "<p dir=\"auto\">Why is this returning a boolean, when the callers are not considering the return value?</p>", "author": "mcvsubbu", "createdAt": "2020-02-06T18:23:38Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/realtime/LLRealtimeSegmentDataManager.java", "diffHunk": "@@ -811,6 +826,34 @@ protected boolean buildSegmentAndReplace() {\n     return true;\n   }\n \n+  private void closeKafkaConsumers() {\n+    closePartitionLevelConsumer();\n+    closeStreamMetadataProvider();\n+    if (_acquireConsumerSemaphore.compareAndSet(true, false)) {\n+      _partitionConsumerSemaphore.release();\n+    }\n+  }\n+\n+  private boolean closePartitionLevelConsumer() {", "originalCommit": "0e2b4a793c44cbbbe233e6ca3505b30809e7ae0a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjEzMDQ5Ng==", "url": "https://github.com/apache/pinot/pull/5039#discussion_r376130496", "bodyText": "Updated to void.", "author": "jackjlli", "createdAt": "2020-02-06T23:02:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAwNDA4NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAwNjQ1NA==", "url": "https://github.com/apache/pinot/pull/5039#discussion_r376006454", "body": "Please write a block of comment before the declaration of this variable, describing what these semaphores are being used for.\r\nMake it private final.\r\nAlso document, that the semaphores will stay in the hash map even if the consuming partitions move to a different host. We expect that these will be a small number of semaphores, but that may be ok. \r\nIt may be useful to add a metric of how many semaphores are there in the map..", "bodyText": "Please write a block of comment before the declaration of this variable, describing what these semaphores are being used for.\nMake it private final.\nAlso document, that the semaphores will stay in the hash map even if the consuming partitions move to a different host. We expect that these will be a small number of semaphores, but that may be ok.\nIt may be useful to add a metric of how many semaphores are there in the map..", "bodyHTML": "<p dir=\"auto\">Please write a block of comment before the declaration of this variable, describing what these semaphores are being used for.<br>\nMake it private final.<br>\nAlso document, that the semaphores will stay in the hash map even if the consuming partitions move to a different host. We expect that these will be a small number of semaphores, but that may be ok.<br>\nIt may be useful to add a metric of how many semaphores are there in the map..</p>", "author": "mcvsubbu", "createdAt": "2020-02-06T18:28:24Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/realtime/RealtimeTableDataManager.java", "diffHunk": "@@ -60,6 +63,7 @@\n   private SegmentBuildTimeLeaseExtender _leaseExtender;\n   private RealtimeSegmentStatsHistory _statsHistory;\n   private final Semaphore _segmentBuildSemaphore;\n+  private Map<Integer, Semaphore> _partitionIdToSemaphoreMap = new ConcurrentHashMap<>();", "originalCommit": "0e2b4a793c44cbbbe233e6ca3505b30809e7ae0a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjEzMTQzMg==", "url": "https://github.com/apache/pinot/pull/5039#discussion_r376131432", "bodyText": "Comments added.\nIn terms of the metric, I don't think that's necessary. We brought in a variable called _acquireConsumerSemaphore within the LLCSegmentManager to guarantee the semaphore will  be released only once. And we have a new unit test for that.", "author": "jackjlli", "createdAt": "2020-02-06T23:04:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAwNjQ1NA=="}], "type": "inlineReview"}, {"oid": "540b086154c2ab359d5544dc931f39deefaae622", "url": "https://github.com/apache/pinot/commit/540b086154c2ab359d5544dc931f39deefaae622", "message": "Put partitionIdToSemaphoreMap to RealtimeTableDataManager", "committedDate": "2020-02-06T22:47:49Z", "type": "commit"}, {"oid": "be867aa4b9bb0e15ab19d3b007ff6e7a0ff9deb2", "url": "https://github.com/apache/pinot/commit/be867aa4b9bb0e15ab19d3b007ff6e7a0ff9deb2", "message": "Address PR comments", "committedDate": "2020-02-06T23:01:36Z", "type": "forcePushed"}, {"oid": "6909e4267b0306cede4c1c22d5f10e58021fee3f", "url": "https://github.com/apache/pinot/commit/6909e4267b0306cede4c1c22d5f10e58021fee3f", "message": "Address PR comments", "committedDate": "2020-02-06T23:15:19Z", "type": "forcePushed"}, {"oid": "64ed4fcb2c7163c4d6687109eb1baa01c884b30f", "url": "https://github.com/apache/pinot/commit/64ed4fcb2c7163c4d6687109eb1baa01c884b30f", "message": "Address PR comments", "committedDate": "2020-02-07T00:34:49Z", "type": "forcePushed"}, {"oid": "20d82f0136c11238ef9ddffd23952b26cf2f63f6", "url": "https://github.com/apache/pinot/commit/20d82f0136c11238ef9ddffd23952b26cf2f63f6", "message": "Address PR comments", "committedDate": "2020-02-08T01:22:18Z", "type": "commit"}, {"oid": "20d82f0136c11238ef9ddffd23952b26cf2f63f6", "url": "https://github.com/apache/pinot/commit/20d82f0136c11238ef9ddffd23952b26cf2f63f6", "message": "Address PR comments", "committedDate": "2020-02-08T01:22:18Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU2OTk3OA==", "url": "https://github.com/apache/pinot/pull/5039#discussion_r376569978", "body": "Can you please add a comment here as to why we need a boolean? thanks.", "bodyText": "Can you please add a comment here as to why we need a boolean? thanks.", "bodyHTML": "<p dir=\"auto\">Can you please add a comment here as to why we need a boolean? thanks.</p>", "author": "mcvsubbu", "createdAt": "2020-02-07T19:35:59Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/realtime/LLRealtimeSegmentDataManager.java", "diffHunk": "@@ -203,6 +203,8 @@ public void deleteSegmentFile() {\n   private final String _resourceDataDir;\n   private final IndexLoadingConfig _indexLoadingConfig;\n   private final Schema _schema;\n+  private final Semaphore _partitionConsumerSemaphore;\n+  private final AtomicBoolean _acquireConsumerSemaphore;", "originalCommit": "64ed4fcb2c7163c4d6687109eb1baa01c884b30f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU3MDEzMA==", "url": "https://github.com/apache/pinot/pull/5039#discussion_r376570130", "body": "please add a comment here on what this semaphore protects/allows", "bodyText": "please add a comment here on what this semaphore protects/allows", "bodyHTML": "<p dir=\"auto\">please add a comment here on what this semaphore protects/allows</p>", "author": "mcvsubbu", "createdAt": "2020-02-07T19:36:18Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/realtime/LLRealtimeSegmentDataManager.java", "diffHunk": "@@ -203,6 +203,8 @@ public void deleteSegmentFile() {\n   private final String _resourceDataDir;\n   private final IndexLoadingConfig _indexLoadingConfig;\n   private final Schema _schema;\n+  private final Semaphore _partitionConsumerSemaphore;", "originalCommit": "64ed4fcb2c7163c4d6687109eb1baa01c884b30f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU3MTgyNQ==", "url": "https://github.com/apache/pinot/pull/5039#discussion_r376571825", "body": "```suggestion\r\n  private final AtomicBoolean _acquiredConsumerSemaphore;\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private final AtomicBoolean _acquireConsumerSemaphore;\n          \n          \n            \n              private final AtomicBoolean _acquiredConsumerSemaphore;", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">  <span class=\"pl-k\">private</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi\">AtomicBoolean</span> <span class=\"x x-first x-last\">_acquireConsumerSemaphore</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">  <span class=\"pl-k\">private</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi\">AtomicBoolean</span> <span class=\"x x-first x-last\">_acquiredConsumerSemaphore</span>;</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "mcvsubbu", "createdAt": "2020-02-07T19:40:09Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/realtime/LLRealtimeSegmentDataManager.java", "diffHunk": "@@ -203,6 +203,8 @@ public void deleteSegmentFile() {\n   private final String _resourceDataDir;\n   private final IndexLoadingConfig _indexLoadingConfig;\n   private final Schema _schema;\n+  private final Semaphore _partitionConsumerSemaphore;\n+  private final AtomicBoolean _acquireConsumerSemaphore;", "originalCommit": "64ed4fcb2c7163c4d6687109eb1baa01c884b30f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcxNTQzMA==", "url": "https://github.com/apache/pinot/pull/5039#discussion_r376715430", "bodyText": "can incorporate this change?", "author": "mcvsubbu", "createdAt": "2020-02-08T15:15:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjU3MTgyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcxNTY2Nw==", "url": "https://github.com/apache/pinot/pull/5039#discussion_r376715667", "body": "```suggestion\r\n  // Maintains a map of partitionIds to semaphores. The semaphore ensures that exactly one PartitionConsumer\r\n  // instance consumes from any stream partition. In some streams, it is possible that having multiple consumers (with the same  consumer name on the same host)  consuming from the same stream partition can lead to bugs.\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              // Maintains a map for the partitionIds and its related semaphores, which is to prevent two different Kafka consumers\n          \n          \n            \n              // Maintains a map of partitionIds to semaphores. The semaphore ensures that exactly one PartitionConsumer\n          \n          \n            \n              // instance consumes from any stream partition. In some streams, it is possible that having multiple consumers (with the same  consumer name on the same host)  consuming from the same stream partition can lead to bugs.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">  <span class=\"pl-c\"><span class=\"pl-c\">//</span> Maintains a map <span class=\"x x-first x-last\">for the </span>partitionIds <span class=\"x x-first x-last\">and its related </span>semaphores<span class=\"x x-first x-last\">, which is to prevent two different Kafka consumers</span></span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">  <span class=\"pl-c\"><span class=\"pl-c\">//</span> Maintains a map <span class=\"x x-first x-last\">of </span>partitionIds <span class=\"x x-first x-last\">to </span>semaphores<span class=\"x x-first x-last\">. The semaphore ensures that exactly one PartitionConsumer</span></span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">  <span class=\"pl-c\"><span class=\"pl-c\">//</span> instance consumes from any stream partition. In some streams, it is possible that having multiple consumers (with the same  consumer name on the same host)  consuming from the same stream partition can lead to bugs.</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "mcvsubbu", "createdAt": "2020-02-08T15:19:29Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/realtime/RealtimeTableDataManager.java", "diffHunk": "@@ -60,6 +63,11 @@\n   private SegmentBuildTimeLeaseExtender _leaseExtender;\n   private RealtimeSegmentStatsHistory _statsHistory;\n   private final Semaphore _segmentBuildSemaphore;\n+  // Maintains a map for the partitionIds and its related semaphores, which is to prevent two different Kafka consumers", "originalCommit": "20d82f0136c11238ef9ddffd23952b26cf2f63f6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcxNTY3OQ==", "url": "https://github.com/apache/pinot/pull/5039#discussion_r376715679", "body": "```suggestion\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              // from consuming with the same partitionId in parallel in the same host.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"><span class=\"x x-first\">  </span><span class=\"pl-c\"><span class=\"pl-c x\">//</span><span class=\"x x-last\"> from consuming with the same partitionId in parallel in the same host.</span></span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "mcvsubbu", "createdAt": "2020-02-08T15:20:03Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/realtime/RealtimeTableDataManager.java", "diffHunk": "@@ -60,6 +63,11 @@\n   private SegmentBuildTimeLeaseExtender _leaseExtender;\n   private RealtimeSegmentStatsHistory _statsHistory;\n   private final Semaphore _segmentBuildSemaphore;\n+  // Maintains a map for the partitionIds and its related semaphores, which is to prevent two different Kafka consumers\n+  // from consuming with the same partitionId in parallel in the same host.", "originalCommit": "20d82f0136c11238ef9ddffd23952b26cf2f63f6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcxNjE2OQ==", "url": "https://github.com/apache/pinot/pull/5039#discussion_r376716169", "body": "Perhaps I am missing something, but the second segment data manager should not have acquired the semaphore, so this should be asserted to false?", "bodyText": "Perhaps I am missing something, but the second segment data manager should not have acquired the semaphore, so this should be asserted to false?", "bodyHTML": "<p dir=\"auto\">Perhaps I am missing something, but the second segment data manager should not have acquired the semaphore, so this should be asserted to false?</p>", "author": "mcvsubbu", "createdAt": "2020-02-08T15:28:50Z", "path": "pinot-core/src/test/java/org/apache/pinot/core/data/manager/realtime/LLRealtimeSegmentDataManagerTest.java", "diffHunk": "@@ -609,6 +639,43 @@ public void testFileRemovedDuringOnlineTransition()\n     segmentDataManager._state.set(segmentDataManager, LLRealtimeSegmentDataManager.State.HOLDING);\n     segmentDataManager.goOnlineFromConsuming(metadata);\n     Assert.assertFalse(new File(segTarFileName).exists());\n+    segmentDataManager.destroy();\n+  }\n+\n+  @Test\n+  public void testOnlyOneSegmentHoldingTheSemaphoreForParticularPartition()\n+      throws Exception {\n+    long timeout = 2_000L;\n+    FakeLLRealtimeSegmentDataManager firstSegmentDataManager = createFakeSegmentManager();\n+    Assert.assertTrue(firstSegmentDataManager.getAcquireConsumerSemaphore().get());\n+    Assert.assertEquals(firstSegmentDataManager.getPartitionConsumerSemaphore().availablePermits(), 0);\n+\n+    // Release semaphore after timeout.\n+    Thread releaseSemaphore = new Thread(() -> {\n+      try {\n+        Thread.sleep(timeout);\n+      } catch (InterruptedException e) {\n+        throw new RuntimeException(\"InterruptedException when sleeping for \" + timeout + \"ms\");\n+      } finally {\n+        firstSegmentDataManager.destroy();\n+      }\n+    });\n+    releaseSemaphore.start();\n+\n+    // The second segment will be hanged until the semaphore gets released.\n+    FakeLLRealtimeSegmentDataManager secondSegmentDataManager = createFakeSegmentManager();\n+    Assert.assertEquals(firstSegmentDataManager.getPartitionConsumerSemaphore(),\n+        secondSegmentDataManager.getPartitionConsumerSemaphore());\n+    Assert.assertTrue(secondSegmentDataManager.getAcquireConsumerSemaphore().get());", "originalCommit": "20d82f0136c11238ef9ddffd23952b26cf2f63f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgxMzQ0Ng==", "url": "https://github.com/apache/pinot/pull/5039#discussion_r376813446", "bodyText": "The acquire method of semaphore is a blocking method. The second segmentManager will be blocked on the acquire method until the first segmentManager releases the permit.\nThus, after the second segmentManager finishes its construction, it has already taken the permit. So it should be true here.", "author": "jackjlli", "createdAt": "2020-02-09T20:38:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcxNjE2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcxNjE5Mg==", "url": "https://github.com/apache/pinot/pull/5039#discussion_r376716192", "body": "Can you use barriers and avoid the sleep ? Is this test prone to being flaky?", "bodyText": "Can you use barriers and avoid the sleep ? Is this test prone to being flaky?", "bodyHTML": "<p dir=\"auto\">Can you use barriers and avoid the sleep ? Is this test prone to being flaky?</p>", "author": "mcvsubbu", "createdAt": "2020-02-08T15:29:26Z", "path": "pinot-core/src/test/java/org/apache/pinot/core/data/manager/realtime/LLRealtimeSegmentDataManagerTest.java", "diffHunk": "@@ -609,6 +639,43 @@ public void testFileRemovedDuringOnlineTransition()\n     segmentDataManager._state.set(segmentDataManager, LLRealtimeSegmentDataManager.State.HOLDING);\n     segmentDataManager.goOnlineFromConsuming(metadata);\n     Assert.assertFalse(new File(segTarFileName).exists());\n+    segmentDataManager.destroy();\n+  }\n+\n+  @Test\n+  public void testOnlyOneSegmentHoldingTheSemaphoreForParticularPartition()\n+      throws Exception {\n+    long timeout = 2_000L;\n+    FakeLLRealtimeSegmentDataManager firstSegmentDataManager = createFakeSegmentManager();\n+    Assert.assertTrue(firstSegmentDataManager.getAcquireConsumerSemaphore().get());\n+    Assert.assertEquals(firstSegmentDataManager.getPartitionConsumerSemaphore().availablePermits(), 0);\n+\n+    // Release semaphore after timeout.\n+    Thread releaseSemaphore = new Thread(() -> {\n+      try {\n+        Thread.sleep(timeout);", "originalCommit": "20d82f0136c11238ef9ddffd23952b26cf2f63f6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjgxMzU4NA==", "url": "https://github.com/apache/pinot/pull/5039#discussion_r376813584", "bodyText": "No, the permit of the semaphore will be released in the finally block. This test won't be flaky.", "author": "jackjlli", "createdAt": "2020-02-09T20:41:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcxNjE5Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcxNjIyMQ==", "url": "https://github.com/apache/pinot/pull/5039#discussion_r376716221", "body": "```suggestion\r\n  // A boolean flag to check whether the current thread has acquired the semaphore, so that the semaphore be released only once within the same thread.\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              // A boolean flag to check whether the current thread acquires the semaphore, so that the semaphore be released only once within the same thread.\n          \n          \n            \n              // A boolean flag to check whether the current thread has acquired the semaphore, so that the semaphore be released only once within the same thread.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">  <span class=\"pl-c\"><span class=\"pl-c\">//</span> A boolean flag to check whether the current thread <span class=\"x x-first x-last\">acquires</span> the semaphore, so that the semaphore be released only once within the same thread.</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">  <span class=\"pl-c\"><span class=\"pl-c\">//</span> A boolean flag to check whether the current thread <span class=\"x x-first x-last\">has acquired</span> the semaphore, so that the semaphore be released only once within the same thread.</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "mcvsubbu", "createdAt": "2020-02-08T15:30:16Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/realtime/LLRealtimeSegmentDataManager.java", "diffHunk": "@@ -203,6 +203,10 @@ public void deleteSegmentFile() {\n   private final String _resourceDataDir;\n   private final IndexLoadingConfig _indexLoadingConfig;\n   private final Schema _schema;\n+  // Semaphore for each partitionId only. See the comments in {@link RealtimeTableDataManager}.\n+  private final Semaphore _partitionConsumerSemaphore;\n+  // A boolean flag to check whether the current thread acquires the semaphore, so that the semaphore be released only once within the same thread.", "originalCommit": "20d82f0136c11238ef9ddffd23952b26cf2f63f6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "10038908d6cf04f2b544acfec0e354fa87aafaac", "url": "https://github.com/apache/pinot/commit/10038908d6cf04f2b544acfec0e354fa87aafaac", "message": "Address PR comments", "committedDate": "2020-02-09T20:42:41Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzIwNDI0MQ==", "url": "https://github.com/apache/pinot/pull/5039#discussion_r377204241", "body": "```suggestion\r\n  // modify the permit. This boolean make sure the semaphore gets released only once when the partition stops consuming.\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              // modify the permit. This boolean make sure the semaphore gets released only once within the same thread.\n          \n          \n            \n              // modify the permit. This boolean make sure the semaphore gets released only once when the partition stops consuming.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">  <span class=\"pl-c\"><span class=\"pl-c\">//</span> modify the permit. This boolean make sure the semaphore gets released only once <span class=\"x x-first x-last\">within</span> the <span class=\"x x-first x-last\">same thread</span>.</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">  <span class=\"pl-c\"><span class=\"pl-c\">//</span> modify the permit. This boolean make sure the semaphore gets released only once <span class=\"x x-first x-last\">when</span> the <span class=\"x x-first x-last\">partition stops consuming</span>.</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "mcvsubbu", "createdAt": "2020-02-10T17:22:22Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/realtime/LLRealtimeSegmentDataManager.java", "diffHunk": "@@ -203,10 +203,14 @@ public void deleteSegmentFile() {\n   private final String _resourceDataDir;\n   private final IndexLoadingConfig _indexLoadingConfig;\n   private final Schema _schema;\n-  // Semaphore for each partitionId only. See the comments in {@link RealtimeTableDataManager}.\n+  // Semaphore for each partitionId only, which is to prevent two different Kafka consumers\n+  // from consuming with the same partitionId in parallel in the same host.\n+  // See the comments in {@link RealtimeTableDataManager}.\n   private final Semaphore _partitionConsumerSemaphore;\n-  // A boolean flag to check whether the current thread acquires the semaphore, so that the semaphore be released only once within the same thread.\n-  private final AtomicBoolean _acquireConsumerSemaphore;\n+  // A boolean flag to check whether the current thread has acquired the semaphore.\n+  // This boolean is needed because the semaphore is shared by threads; every thread holding this semaphore can\n+  // modify the permit. This boolean make sure the semaphore gets released only once within the same thread.", "originalCommit": "10038908d6cf04f2b544acfec0e354fa87aafaac", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzIwNjEyMw==", "url": "https://github.com/apache/pinot/pull/5039#discussion_r377206123", "body": "nit: segmentLogger already has segment name", "bodyText": "nit: segmentLogger already has segment name", "bodyHTML": "<p dir=\"auto\">nit: segmentLogger already has segment name</p>", "author": "mcvsubbu", "createdAt": "2020-02-10T17:25:44Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/realtime/LLRealtimeSegmentDataManager.java", "diffHunk": "@@ -1097,15 +1135,24 @@ public LLRealtimeSegmentDataManager(RealtimeSegmentZKMetadata segmentZKMetadata,\n             .setInvertedIndexColumns(invertedIndexColumns).setRealtimeSegmentZKMetadata(segmentZKMetadata)\n             .setOffHeap(_isOffHeap).setMemoryManager(_memoryManager)\n             .setStatsHistory(realtimeTableDataManager.getStatsHistory())\n-            .setAggregateMetrics(indexingConfig.isAggregateMetrics())\n-            .setNullHandlingEnabled(_nullHandlingEnabled);\n+            .setAggregateMetrics(indexingConfig.isAggregateMetrics()).setNullHandlingEnabled(_nullHandlingEnabled);\n \n     // Create message decoder\n     _messageDecoder = StreamDecoderProvider.create(_partitionLevelStreamConfig, _schema);\n     _clientId = _streamTopic + \"-\" + _streamPartitionId;\n \n     // Create record transformer\n     _recordTransformer = CompositeTransformer.getDefaultTransformer(schema);\n+\n+    // Acquire semaphore to create Kafka consumers\n+    try {\n+      _partitionConsumerSemaphore.acquire();\n+      _acquiredConsumerSemaphore.set(true);\n+    } catch (InterruptedException e) {\n+      String errorMsg = \"InterruptedException when acquiring semaphore for Segment: \" + _segmentNameStr;\n+      segmentLogger.error(errorMsg);", "originalCommit": "10038908d6cf04f2b544acfec0e354fa87aafaac", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzIwODE4Nw==", "url": "https://github.com/apache/pinot/pull/5039#discussion_r377208187", "body": "Should you add this in the test setup method?", "bodyText": "Should you add this in the test setup method?", "bodyHTML": "<p dir=\"auto\">Should you add this in the test setup method?</p>", "author": "mcvsubbu", "createdAt": "2020-02-10T17:29:36Z", "path": "pinot-core/src/test/java/org/apache/pinot/core/data/manager/realtime/LLRealtimeSegmentDataManagerTest.java", "diffHunk": "@@ -137,11 +142,13 @@ private FakeLLRealtimeSegmentDataManager createFakeSegmentManager()\n     InstanceZKMetadata instanceZKMetadata = new InstanceZKMetadata();\n     RealtimeTableDataManager tableDataManager = createTableDataManager();\n     String resourceDir = _segmentDir;\n+    LLCSegmentName llcSegmentName = new LLCSegmentName(_segmentNameStr);\n+    _partitionIdToSemaphoreMap.putIfAbsent(_partitionId, new Semaphore(1));", "originalCommit": "10038908d6cf04f2b544acfec0e354fa87aafaac", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzIzNTI2MA==", "url": "https://github.com/apache/pinot/pull/5039#discussion_r377235260", "bodyText": "That's been added.", "author": "jackjlli", "createdAt": "2020-02-10T18:22:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzIwODE4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzIwOTYzMQ==", "url": "https://github.com/apache/pinot/pull/5039#discussion_r377209631", "body": "we have the global semaphore map right here in this test, so you can use that instead of adding getters that are visible for testing?", "bodyText": "we have the global semaphore map right here in this test, so you can use that instead of adding getters that are visible for testing?", "bodyHTML": "<p dir=\"auto\">we have the global semaphore map right here in this test, so you can use that instead of adding getters that are visible for testing?</p>", "author": "mcvsubbu", "createdAt": "2020-02-10T17:32:27Z", "path": "pinot-core/src/test/java/org/apache/pinot/core/data/manager/realtime/LLRealtimeSegmentDataManagerTest.java", "diffHunk": "@@ -609,6 +639,43 @@ public void testFileRemovedDuringOnlineTransition()\n     segmentDataManager._state.set(segmentDataManager, LLRealtimeSegmentDataManager.State.HOLDING);\n     segmentDataManager.goOnlineFromConsuming(metadata);\n     Assert.assertFalse(new File(segTarFileName).exists());\n+    segmentDataManager.destroy();\n+  }\n+\n+  @Test\n+  public void testOnlyOneSegmentHoldingTheSemaphoreForParticularPartition()\n+      throws Exception {\n+    long timeout = 2_000L;\n+    FakeLLRealtimeSegmentDataManager firstSegmentDataManager = createFakeSegmentManager();\n+    Assert.assertTrue(firstSegmentDataManager.getAcquiredConsumerSemaphore().get());\n+    Assert.assertEquals(firstSegmentDataManager.getPartitionConsumerSemaphore().availablePermits(), 0);\n+\n+    // Release semaphore after timeout.\n+    Thread releaseSemaphore = new Thread(() -> {\n+      try {\n+        Thread.sleep(timeout);\n+      } catch (InterruptedException e) {\n+        throw new RuntimeException(\"InterruptedException when sleeping for \" + timeout + \"ms\");\n+      } finally {\n+        firstSegmentDataManager.destroy();\n+      }\n+    });\n+    releaseSemaphore.start();\n+\n+    // The second segment will be hanged until the semaphore gets released.\n+    FakeLLRealtimeSegmentDataManager secondSegmentDataManager = createFakeSegmentManager();\n+    Assert.assertEquals(firstSegmentDataManager.getPartitionConsumerSemaphore(),", "originalCommit": "10038908d6cf04f2b544acfec0e354fa87aafaac", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "116a40bd313ecd7281606861974f12932af7bf89", "url": "https://github.com/apache/pinot/commit/116a40bd313ecd7281606861974f12932af7bf89", "message": "Address PR comments", "committedDate": "2020-02-10T18:46:53Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI2NTk5Mg==", "url": "https://github.com/apache/pinot/pull/5039#discussion_r377265992", "body": "you should add the segment name to the error message in the exception, though", "bodyText": "you should add the segment name to the error message in the exception, though", "bodyHTML": "<p dir=\"auto\">you should add the segment name to the error message in the exception, though</p>", "author": "mcvsubbu", "createdAt": "2020-02-10T19:22:24Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/data/manager/realtime/LLRealtimeSegmentDataManager.java", "diffHunk": "@@ -1097,15 +1135,24 @@ public LLRealtimeSegmentDataManager(RealtimeSegmentZKMetadata segmentZKMetadata,\n             .setInvertedIndexColumns(invertedIndexColumns).setRealtimeSegmentZKMetadata(segmentZKMetadata)\n             .setOffHeap(_isOffHeap).setMemoryManager(_memoryManager)\n             .setStatsHistory(realtimeTableDataManager.getStatsHistory())\n-            .setAggregateMetrics(indexingConfig.isAggregateMetrics())\n-            .setNullHandlingEnabled(_nullHandlingEnabled);\n+            .setAggregateMetrics(indexingConfig.isAggregateMetrics()).setNullHandlingEnabled(_nullHandlingEnabled);\n \n     // Create message decoder\n     _messageDecoder = StreamDecoderProvider.create(_partitionLevelStreamConfig, _schema);\n     _clientId = _streamTopic + \"-\" + _streamPartitionId;\n \n     // Create record transformer\n     _recordTransformer = CompositeTransformer.getDefaultTransformer(schema);\n+\n+    // Acquire semaphore to create Kafka consumers\n+    try {\n+      _partitionConsumerSemaphore.acquire();\n+      _acquiredConsumerSemaphore.set(true);\n+    } catch (InterruptedException e) {\n+      String errorMsg = \"InterruptedException when acquiring the partitionConsumerSemaphore\";\n+      segmentLogger.error(errorMsg);\n+      throw new RuntimeException(errorMsg);", "originalCommit": "116a40bd313ecd7281606861974f12932af7bf89", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "93d22cbc657007951b78570c8aa7843ef4496040", "url": "https://github.com/apache/pinot/commit/93d22cbc657007951b78570c8aa7843ef4496040", "message": "Address PR comments", "committedDate": "2020-02-10T19:31:23Z", "type": "commit"}]}