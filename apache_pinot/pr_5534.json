{"pr_number": 5534, "pr_title": "Replace SegmentMergeLineage to SegmentLineage", "pr_author": "snleee", "pr_createdAt": "2020-06-10T11:36:32Z", "pr_url": "https://github.com/apache/pinot/pull/5534", "timeline": [{"oid": "ab42215291f3b390c31ad91dbefad74eb8d58c66", "url": "https://github.com/apache/pinot/commit/ab42215291f3b390c31ad91dbefad74eb8d58c66", "message": "Replace SegmentMergeLineage to SegmentLineage\n\nWith the updated design (#2715) of segment merge, the metadata format\nfor segment lineage is changed.\n\n1. Added segment lineage class which is a wrapper of ZNRecord\n2. Added lineage entry class that represents m->n segment replacement\n3. Added unit test", "committedDate": "2020-06-10T21:50:54Z", "type": "forcePushed"}, {"oid": "0bd23172859fc60c73988dc9d04c61b7d41e9ecc", "url": "https://github.com/apache/pinot/commit/0bd23172859fc60c73988dc9d04c61b7d41e9ecc", "message": "Replace SegmentMergeLineage to SegmentLineage\n\nWith the updated design (#2715) of segment merge, the metadata format\nfor segment lineage is changed.\n\n1. Added segment lineage class which is a wrapper of ZNRecord\n2. Added lineage entry class that represents m->n segment replacement\n3. Added unit test", "committedDate": "2020-06-11T07:46:51Z", "type": "forcePushed"}, {"oid": "5c589b6607c2963a56f1f25e304c2d26cdea0645", "url": "https://github.com/apache/pinot/commit/5c589b6607c2963a56f1f25e304c2d26cdea0645", "message": "Replace SegmentMergeLineage to SegmentLineage\n\nWith the updated design (#2715) of segment merge, the metadata format\nfor segment lineage is changed.\n\n1. Added segment lineage class which is a wrapper of ZNRecord\n2. Added lineage entry class that represents m->n segment replacement\n3. Added unit test", "committedDate": "2020-06-12T11:33:10Z", "type": "commit"}, {"oid": "5c589b6607c2963a56f1f25e304c2d26cdea0645", "url": "https://github.com/apache/pinot/commit/5c589b6607c2963a56f1f25e304c2d26cdea0645", "message": "Replace SegmentMergeLineage to SegmentLineage\n\nWith the updated design (#2715) of segment merge, the metadata format\nfor segment lineage is changed.\n\n1. Added segment lineage class which is a wrapper of ZNRecord\n2. Added lineage entry class that represents m->n segment replacement\n3. Added unit test", "committedDate": "2020-06-12T11:33:10Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY1ODE3MQ==", "url": "https://github.com/apache/pinot/pull/5534#discussion_r439658171", "body": "Do we need to worry about uniqueness guarantee?", "bodyText": "Do we need to worry about uniqueness guarantee?", "bodyHTML": "<p dir=\"auto\">Do we need to worry about uniqueness guarantee?</p>", "author": "mayankshriv", "createdAt": "2020-06-12T21:56:42Z", "path": "pinot-common/src/main/java/org/apache/pinot/common/lineage/SegmentLineage.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.lineage;\n+\n+import com.google.common.base.Preconditions;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import org.apache.helix.ZNRecord;\n+import org.apache.pinot.spi.utils.EqualityUtils;\n+\n+\n+/**\n+ * Class to represent segment lineage information.\n+ *\n+ * Segment lineage keeps the metadata required for supporting m -> n segment replacement. Segment lineage is serialized\n+ * into a znode and stored in a helix property store (zookeeper). This metadata will be used by brokers to make sure\n+ * that the routing does not pick the segments with the duplicate data.\n+ *\n+ * NOTE: Update for the underlying segment lineage znode needs to happen with read-modify-write block to guarantee the\n+ * atomic update because this metadata can be modified concurrently (e.g. task scheduler tries to add entries after\n+ * scheduling new tasks while minion task tries to update the state of the existing entry)\n+ */\n+public class SegmentLineage {\n+  private static final String COMMA_SEPARATOR = \",\";\n+\n+  private String _tableNameWithType;\n+  private Map<String, LineageEntry> _lineageEntries;\n+\n+  public SegmentLineage(String tableNameWithType) {\n+    _tableNameWithType = tableNameWithType;\n+    _lineageEntries = new HashMap<>();\n+  }\n+\n+  public SegmentLineage(String tableNameWithType, Map<String, LineageEntry> lineageEntries) {\n+    _tableNameWithType = tableNameWithType;\n+    _lineageEntries = lineageEntries;\n+  }\n+\n+  public String getTableNameWithType() {\n+    return _tableNameWithType;\n+  }\n+\n+  /**\n+   * Add lineage entry to the segment lineage metadata\n+   * @param lineageEntry a lineage entry\n+   * @return the id for the input lineage entry for the access\n+   */\n+  public String addLineageEntry(LineageEntry lineageEntry) {\n+    String lineageId = generateLineageId();\n+    _lineageEntries.put(lineageId, lineageEntry);\n+    return lineageId;\n+  }\n+\n+  /**\n+   * Retrieve lineage entry\n+   * @param lineageEntryId the id for the lineage entry\n+   * @return the lineage entry for the given lineage entry id\n+   */\n+  public LineageEntry getLineageEntry(String lineageEntryId) {\n+    return _lineageEntries.get(lineageEntryId);\n+  }\n+\n+  /**\n+   * Delete lineage entry\n+   * @param lineageEntryId the id for the lineage entry\n+   */\n+  public void deleteLineageEntry(String lineageEntryId) {\n+    _lineageEntries.remove(lineageEntryId);\n+  }\n+\n+  /**\n+   * Convert ZNRecord to segment lineage\n+   * @param record ZNRecord representation of the segment lineage\n+   * @return the segment lineage object\n+   */\n+  public static SegmentLineage fromZNRecord(ZNRecord record) {\n+    String tableNameWithType = record.getId();\n+    Map<String, LineageEntry> lineageEntries = new HashMap<>();\n+    Map<String, List<String>> listFields = record.getListFields();\n+    for (Map.Entry<String, List<String>> listField : listFields.entrySet()) {\n+      String lineageId = listField.getKey();\n+      List<String> value = listField.getValue();\n+      Preconditions.checkState(value.size() == 4);\n+      List<String> segmentsFrom = Arrays.asList(value.get(0).split(COMMA_SEPARATOR));\n+      List<String> segmentsTo = Arrays.asList(value.get(1).split(COMMA_SEPARATOR));\n+      LineageEntryState state = LineageEntryState.valueOf(value.get(2));\n+      long timestamp = Long.parseLong(value.get(3));\n+      lineageEntries.put(lineageId, new LineageEntry(segmentsFrom, segmentsTo, state, timestamp));\n+    }\n+    return new SegmentLineage(tableNameWithType, lineageEntries);\n+  }\n+\n+  /**\n+   * Convert the segment lineage object to the ZNRecord\n+   * @return ZNRecord representation of the segment lineage\n+   */\n+  public ZNRecord toZNRecord() {\n+    ZNRecord znRecord = new ZNRecord(_tableNameWithType);\n+    for (Map.Entry<String, LineageEntry> entry : _lineageEntries.entrySet()) {\n+      LineageEntry lineageEntry = entry.getValue();\n+      String segmentsFrom = String.join(\",\", lineageEntry.getSegmentsFrom());\n+      String segmentsTo = String.join(\",\", lineageEntry.getSegmentsTo());\n+      String state = lineageEntry.getState().toString();\n+      String timestamp = Long.toString(lineageEntry.getTimestamp());\n+      List<String> listEntry = Arrays.asList(segmentsFrom, segmentsTo, state, timestamp);\n+      znRecord.setListField(entry.getKey(), listEntry);\n+    }\n+    return znRecord;\n+  }\n+\n+  private String generateLineageId() {\n+    return UUID.randomUUID().toString();", "originalCommit": "5c589b6607c2963a56f1f25e304c2d26cdea0645", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY5NzE0Mg==", "url": "https://github.com/apache/pinot/pull/5534#discussion_r439697142", "bodyText": "UUID can have duplicates but with extremely low probability. Based on the number of lineage entries that we will deal with (at most 1000s), UUID should be more than enough for uniqueness guarantee.", "author": "snleee", "createdAt": "2020-06-13T01:35:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTY1ODE3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ5MzE3MA==", "url": "https://github.com/apache/pinot/pull/5534#discussion_r440493170", "body": "Make all of them `final`", "bodyText": "Make all of them final", "bodyHTML": "<p dir=\"auto\">Make all of them <code>final</code></p>", "author": "Jackie-Jiang", "createdAt": "2020-06-15T23:02:40Z", "path": "pinot-common/src/main/java/org/apache/pinot/common/lineage/LineageEntry.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.lineage;\n+\n+import java.util.List;\n+import org.apache.pinot.spi.utils.EqualityUtils;\n+\n+\n+/**\n+ * Class to represent the lineage entry.\n+ *\n+ */\n+public class LineageEntry {\n+  private List<String> _segmentsFrom;", "originalCommit": "5c589b6607c2963a56f1f25e304c2d26cdea0645", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUwNjc0OQ==", "url": "https://github.com/apache/pinot/pull/5534#discussion_r440506749", "bodyText": "fixed", "author": "snleee", "createdAt": "2020-06-15T23:47:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ5MzE3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ5MzQ0NA==", "url": "https://github.com/apache/pinot/pull/5534#discussion_r440493444", "body": "Do we still need `SCHEDULED` in the latest design?", "bodyText": "Do we still need SCHEDULED in the latest design?", "bodyHTML": "<p dir=\"auto\">Do we still need <code>SCHEDULED</code> in the latest design?</p>", "author": "Jackie-Jiang", "createdAt": "2020-06-15T23:03:28Z", "path": "pinot-common/src/main/java/org/apache/pinot/common/lineage/LineageEntryState.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.lineage;\n+\n+/**\n+ * Enum for represent the state of lineage entry\n+ */\n+public enum LineageEntryState {\n+  SCHEDULED, IN_PROGRESS, COMPLETED", "originalCommit": "5c589b6607c2963a56f1f25e304c2d26cdea0645", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUwNzEwOQ==", "url": "https://github.com/apache/pinot/pull/5534#discussion_r440507109", "bodyText": "thanks for pointing out. I forgot to update this part. I removed SCHEDULED", "author": "snleee", "createdAt": "2020-06-15T23:48:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ5MzQ0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ5NDU3OQ==", "url": "https://github.com/apache/pinot/pull/5534#discussion_r440494579", "body": "(nit) Replace with the IDE auto-generated code (use `Objects.equals()`)\r\n```suggestion\r\n    if (this == o) {\r\n      return true;\r\n    }\r\n    if (!(o instanceof LineageEntry)) {\r\n      return false;\r\n    }\r\n    LineageEntry that = (LineageEntry) o;\r\n    return Objects.equals(_segmentsFrom, that._segmentsFrom) && Objects.equals(_segmentsTo, that._segmentsTo) && _state == that._state && _timestamp == that._timestamp;\r\n```", "bodyText": "(nit) Replace with the IDE auto-generated code (use Objects.equals())\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (EqualityUtils.isSameReference(this, o)) {\n          \n          \n            \n                  return true;\n          \n          \n            \n                }\n          \n          \n            \n                if (EqualityUtils.isNullOrNotSameClass(this, o)) {\n          \n          \n            \n                  return false;\n          \n          \n            \n                }\n          \n          \n            \n                LineageEntry that = (LineageEntry) o;\n          \n          \n            \n                return EqualityUtils.isEqual(_segmentsFrom, that._segmentsFrom) && EqualityUtils.isEqual(_segmentsTo,\n          \n          \n            \n                    that._segmentsTo) && EqualityUtils.isEqual(_state, that._state) && EqualityUtils.isEqual(_timestamp,\n          \n          \n            \n                    that._timestamp);\n          \n          \n            \n                if (this == o) {\n          \n          \n            \n                  return true;\n          \n          \n            \n                }\n          \n          \n            \n                if (!(o instanceof LineageEntry)) {\n          \n          \n            \n                  return false;\n          \n          \n            \n                }\n          \n          \n            \n                LineageEntry that = (LineageEntry) o;\n          \n          \n            \n                return Objects.equals(_segmentsFrom, that._segmentsFrom) && Objects.equals(_segmentsTo, that._segmentsTo) && _state == that._state && _timestamp == that._timestamp;", "bodyHTML": "<p dir=\"auto\">(nit) Replace with the IDE auto-generated code (use <code>Objects.equals()</code>)</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">if</span> (<span class=\"pl-smi\">EqualityUtils</span><span class=\"pl-k\">.</span>isSameReference(<span class=\"pl-c1\">this</span>, o)) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">      <span class=\"pl-k\">return</span> <span class=\"pl-c1\">true</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">if</span> (<span class=\"pl-smi\">EqualityUtils</span><span class=\"pl-k\">.</span>isNullOrNotSameClass(<span class=\"pl-c1\">this</span>, o)) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">      <span class=\"pl-k\">return</span> <span class=\"pl-c1\">false</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-smi\">LineageEntry</span> that <span class=\"pl-k\">=</span> (<span class=\"pl-smi\">LineageEntry</span>) o;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">return</span> <span class=\"pl-smi\">EqualityUtils</span><span class=\"pl-k\">.</span>isEqual(_segmentsFrom, that<span class=\"pl-k\">.</span>_segmentsFrom) <span class=\"pl-k\">&amp;&amp;</span> <span class=\"pl-smi\">EqualityUtils</span><span class=\"pl-k\">.</span>isEqual(_segmentsTo,</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        that<span class=\"pl-k\">.</span>_segmentsTo) <span class=\"pl-k\">&amp;&amp;</span> <span class=\"pl-smi\">EqualityUtils</span><span class=\"pl-k\">.</span>isEqual(_state, that<span class=\"pl-k\">.</span>_state) <span class=\"pl-k\">&amp;&amp;</span> <span class=\"pl-smi\">EqualityUtils</span><span class=\"pl-k\">.</span>isEqual(_timestamp,</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        that<span class=\"pl-k\">.</span>_timestamp);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">if</span> (<span class=\"pl-c1\">this</span> <span class=\"pl-k\">==</span> o) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">      <span class=\"pl-k\">return</span> <span class=\"pl-c1\">true</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">if</span> (<span class=\"pl-k\">!</span>(o <span class=\"pl-k\">instanceof</span> <span class=\"pl-smi\">LineageEntry</span>)) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">      <span class=\"pl-k\">return</span> <span class=\"pl-c1\">false</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-smi\">LineageEntry</span> that <span class=\"pl-k\">=</span> (<span class=\"pl-smi\">LineageEntry</span>) o;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">return</span> <span class=\"pl-smi\">Objects</span><span class=\"pl-k\">.</span>equals(_segmentsFrom, that<span class=\"pl-k\">.</span>_segmentsFrom) <span class=\"pl-k\">&amp;&amp;</span> <span class=\"pl-smi\">Objects</span><span class=\"pl-k\">.</span>equals(_segmentsTo, that<span class=\"pl-k\">.</span>_segmentsTo) <span class=\"pl-k\">&amp;&amp;</span> _state <span class=\"pl-k\">==</span> that<span class=\"pl-k\">.</span>_state <span class=\"pl-k\">&amp;&amp;</span> _timestamp <span class=\"pl-k\">==</span> that<span class=\"pl-k\">.</span>_timestamp;</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "Jackie-Jiang", "createdAt": "2020-06-15T23:07:17Z", "path": "pinot-common/src/main/java/org/apache/pinot/common/lineage/LineageEntry.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.lineage;\n+\n+import java.util.List;\n+import org.apache.pinot.spi.utils.EqualityUtils;\n+\n+\n+/**\n+ * Class to represent the lineage entry.\n+ *\n+ */\n+public class LineageEntry {\n+  private List<String> _segmentsFrom;\n+  private List<String> _segmentsTo;\n+  private LineageEntryState _state;\n+  private long _timestamp;\n+\n+  public LineageEntry(List<String> segmentsFrom, List<String> segmentsTo, LineageEntryState state, long timestamp) {\n+    _segmentsFrom = segmentsFrom;\n+    _segmentsTo = segmentsTo;\n+    _state = state;\n+    _timestamp = timestamp;\n+  }\n+\n+  public List<String> getSegmentsFrom() {\n+    return _segmentsFrom;\n+  }\n+\n+  public List<String> getSegmentsTo() {\n+    return _segmentsTo;\n+  }\n+\n+  public LineageEntryState getState() {\n+    return _state;\n+  }\n+\n+  public long getTimestamp() {\n+    return _timestamp;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (EqualityUtils.isSameReference(this, o)) {\n+      return true;\n+    }\n+    if (EqualityUtils.isNullOrNotSameClass(this, o)) {\n+      return false;\n+    }\n+    LineageEntry that = (LineageEntry) o;\n+    return EqualityUtils.isEqual(_segmentsFrom, that._segmentsFrom) && EqualityUtils.isEqual(_segmentsTo,\n+        that._segmentsTo) && EqualityUtils.isEqual(_state, that._state) && EqualityUtils.isEqual(_timestamp,\n+        that._timestamp);", "originalCommit": "5c589b6607c2963a56f1f25e304c2d26cdea0645", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUwNzAwNQ==", "url": "https://github.com/apache/pinot/pull/5534#discussion_r440507005", "bodyText": "fixed", "author": "snleee", "createdAt": "2020-06-15T23:47:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ5NDU3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ5NDc5MQ==", "url": "https://github.com/apache/pinot/pull/5534#discussion_r440494791", "body": "```suggestion\r\n    return Objects.hash(_segmentsFrom, _segmentsTo, _state, _timestamp);\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                int result = EqualityUtils.hashCodeOf(_segmentsFrom);\n          \n          \n            \n                result = EqualityUtils.hashCodeOf(result, _segmentsTo);\n          \n          \n            \n                result = EqualityUtils.hashCodeOf(result, _state);\n          \n          \n            \n                result = EqualityUtils.hashCodeOf(result, _timestamp);\n          \n          \n            \n                return result;\n          \n          \n            \n                return Objects.hash(_segmentsFrom, _segmentsTo, _state, _timestamp);", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">int</span> result <span class=\"pl-k\">=</span> <span class=\"pl-smi\">EqualityUtils</span><span class=\"pl-k\">.</span>hashCodeOf(_segmentsFrom);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    result <span class=\"pl-k\">=</span> <span class=\"pl-smi\">EqualityUtils</span><span class=\"pl-k\">.</span>hashCodeOf(result, _segmentsTo);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    result <span class=\"pl-k\">=</span> <span class=\"pl-smi\">EqualityUtils</span><span class=\"pl-k\">.</span>hashCodeOf(result, _state);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    result <span class=\"pl-k\">=</span> <span class=\"pl-smi\">EqualityUtils</span><span class=\"pl-k\">.</span>hashCodeOf(result, _timestamp);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">return</span> result;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">return</span> <span class=\"pl-smi\">Objects</span><span class=\"pl-k\">.</span>hash(_segmentsFrom, _segmentsTo, _state, _timestamp);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "Jackie-Jiang", "createdAt": "2020-06-15T23:08:03Z", "path": "pinot-common/src/main/java/org/apache/pinot/common/lineage/LineageEntry.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.lineage;\n+\n+import java.util.List;\n+import org.apache.pinot.spi.utils.EqualityUtils;\n+\n+\n+/**\n+ * Class to represent the lineage entry.\n+ *\n+ */\n+public class LineageEntry {\n+  private List<String> _segmentsFrom;\n+  private List<String> _segmentsTo;\n+  private LineageEntryState _state;\n+  private long _timestamp;\n+\n+  public LineageEntry(List<String> segmentsFrom, List<String> segmentsTo, LineageEntryState state, long timestamp) {\n+    _segmentsFrom = segmentsFrom;\n+    _segmentsTo = segmentsTo;\n+    _state = state;\n+    _timestamp = timestamp;\n+  }\n+\n+  public List<String> getSegmentsFrom() {\n+    return _segmentsFrom;\n+  }\n+\n+  public List<String> getSegmentsTo() {\n+    return _segmentsTo;\n+  }\n+\n+  public LineageEntryState getState() {\n+    return _state;\n+  }\n+\n+  public long getTimestamp() {\n+    return _timestamp;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (EqualityUtils.isSameReference(this, o)) {\n+      return true;\n+    }\n+    if (EqualityUtils.isNullOrNotSameClass(this, o)) {\n+      return false;\n+    }\n+    LineageEntry that = (LineageEntry) o;\n+    return EqualityUtils.isEqual(_segmentsFrom, that._segmentsFrom) && EqualityUtils.isEqual(_segmentsTo,\n+        that._segmentsTo) && EqualityUtils.isEqual(_state, that._state) && EqualityUtils.isEqual(_timestamp,\n+        that._timestamp);\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    int result = EqualityUtils.hashCodeOf(_segmentsFrom);\n+    result = EqualityUtils.hashCodeOf(result, _segmentsTo);\n+    result = EqualityUtils.hashCodeOf(result, _state);\n+    result = EqualityUtils.hashCodeOf(result, _timestamp);\n+    return result;", "originalCommit": "5c589b6607c2963a56f1f25e304c2d26cdea0645", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ5NTAyNQ==", "url": "https://github.com/apache/pinot/pull/5534#discussion_r440495025", "body": "Make them final", "bodyText": "Make them final", "bodyHTML": "<p dir=\"auto\">Make them final</p>", "author": "Jackie-Jiang", "createdAt": "2020-06-15T23:08:52Z", "path": "pinot-common/src/main/java/org/apache/pinot/common/lineage/SegmentLineage.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.lineage;\n+\n+import com.google.common.base.Preconditions;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import org.apache.helix.ZNRecord;\n+import org.apache.pinot.spi.utils.EqualityUtils;\n+\n+\n+/**\n+ * Class to represent segment lineage information.\n+ *\n+ * Segment lineage keeps the metadata required for supporting m -> n segment replacement. Segment lineage is serialized\n+ * into a znode and stored in a helix property store (zookeeper). This metadata will be used by brokers to make sure\n+ * that the routing does not pick the segments with the duplicate data.\n+ *\n+ * NOTE: Update for the underlying segment lineage znode needs to happen with read-modify-write block to guarantee the\n+ * atomic update because this metadata can be modified concurrently (e.g. task scheduler tries to add entries after\n+ * scheduling new tasks while minion task tries to update the state of the existing entry)\n+ */\n+public class SegmentLineage {\n+  private static final String COMMA_SEPARATOR = \",\";\n+\n+  private String _tableNameWithType;", "originalCommit": "5c589b6607c2963a56f1f25e304c2d26cdea0645", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUwNzg5Mw==", "url": "https://github.com/apache/pinot/pull/5534#discussion_r440507893", "bodyText": "done", "author": "snleee", "createdAt": "2020-06-15T23:51:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ5NTAyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ5NTYzNA==", "url": "https://github.com/apache/pinot/pull/5534#discussion_r440495634", "body": "I don't think `equals()` and `hashCode()` is required for this class.", "bodyText": "I don't think equals() and hashCode() is required for this class.", "bodyHTML": "<p dir=\"auto\">I don't think <code>equals()</code> and <code>hashCode()</code> is required for this class.</p>", "author": "Jackie-Jiang", "createdAt": "2020-06-15T23:10:57Z", "path": "pinot-common/src/main/java/org/apache/pinot/common/lineage/SegmentLineage.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.common.lineage;\n+\n+import com.google.common.base.Preconditions;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import org.apache.helix.ZNRecord;\n+import org.apache.pinot.spi.utils.EqualityUtils;\n+\n+\n+/**\n+ * Class to represent segment lineage information.\n+ *\n+ * Segment lineage keeps the metadata required for supporting m -> n segment replacement. Segment lineage is serialized\n+ * into a znode and stored in a helix property store (zookeeper). This metadata will be used by brokers to make sure\n+ * that the routing does not pick the segments with the duplicate data.\n+ *\n+ * NOTE: Update for the underlying segment lineage znode needs to happen with read-modify-write block to guarantee the\n+ * atomic update because this metadata can be modified concurrently (e.g. task scheduler tries to add entries after\n+ * scheduling new tasks while minion task tries to update the state of the existing entry)\n+ */\n+public class SegmentLineage {\n+  private static final String COMMA_SEPARATOR = \",\";\n+\n+  private String _tableNameWithType;\n+  private Map<String, LineageEntry> _lineageEntries;\n+\n+  public SegmentLineage(String tableNameWithType) {\n+    _tableNameWithType = tableNameWithType;\n+    _lineageEntries = new HashMap<>();\n+  }\n+\n+  public SegmentLineage(String tableNameWithType, Map<String, LineageEntry> lineageEntries) {\n+    _tableNameWithType = tableNameWithType;\n+    _lineageEntries = lineageEntries;\n+  }\n+\n+  public String getTableNameWithType() {\n+    return _tableNameWithType;\n+  }\n+\n+  /**\n+   * Add lineage entry to the segment lineage metadata\n+   * @param lineageEntry a lineage entry\n+   * @return the id for the input lineage entry for the access\n+   */\n+  public String addLineageEntry(LineageEntry lineageEntry) {\n+    String lineageId = generateLineageId();\n+    _lineageEntries.put(lineageId, lineageEntry);\n+    return lineageId;\n+  }\n+\n+  /**\n+   * Retrieve lineage entry\n+   * @param lineageEntryId the id for the lineage entry\n+   * @return the lineage entry for the given lineage entry id\n+   */\n+  public LineageEntry getLineageEntry(String lineageEntryId) {\n+    return _lineageEntries.get(lineageEntryId);\n+  }\n+\n+  /**\n+   * Delete lineage entry\n+   * @param lineageEntryId the id for the lineage entry\n+   */\n+  public void deleteLineageEntry(String lineageEntryId) {\n+    _lineageEntries.remove(lineageEntryId);\n+  }\n+\n+  /**\n+   * Convert ZNRecord to segment lineage\n+   * @param record ZNRecord representation of the segment lineage\n+   * @return the segment lineage object\n+   */\n+  public static SegmentLineage fromZNRecord(ZNRecord record) {\n+    String tableNameWithType = record.getId();\n+    Map<String, LineageEntry> lineageEntries = new HashMap<>();\n+    Map<String, List<String>> listFields = record.getListFields();\n+    for (Map.Entry<String, List<String>> listField : listFields.entrySet()) {\n+      String lineageId = listField.getKey();\n+      List<String> value = listField.getValue();\n+      Preconditions.checkState(value.size() == 4);\n+      List<String> segmentsFrom = Arrays.asList(value.get(0).split(COMMA_SEPARATOR));\n+      List<String> segmentsTo = Arrays.asList(value.get(1).split(COMMA_SEPARATOR));\n+      LineageEntryState state = LineageEntryState.valueOf(value.get(2));\n+      long timestamp = Long.parseLong(value.get(3));\n+      lineageEntries.put(lineageId, new LineageEntry(segmentsFrom, segmentsTo, state, timestamp));\n+    }\n+    return new SegmentLineage(tableNameWithType, lineageEntries);\n+  }\n+\n+  /**\n+   * Convert the segment lineage object to the ZNRecord\n+   * @return ZNRecord representation of the segment lineage\n+   */\n+  public ZNRecord toZNRecord() {\n+    ZNRecord znRecord = new ZNRecord(_tableNameWithType);\n+    for (Map.Entry<String, LineageEntry> entry : _lineageEntries.entrySet()) {\n+      LineageEntry lineageEntry = entry.getValue();\n+      String segmentsFrom = String.join(\",\", lineageEntry.getSegmentsFrom());\n+      String segmentsTo = String.join(\",\", lineageEntry.getSegmentsTo());\n+      String state = lineageEntry.getState().toString();\n+      String timestamp = Long.toString(lineageEntry.getTimestamp());\n+      List<String> listEntry = Arrays.asList(segmentsFrom, segmentsTo, state, timestamp);\n+      znRecord.setListField(entry.getKey(), listEntry);\n+    }\n+    return znRecord;\n+  }\n+\n+  private String generateLineageId() {\n+    return UUID.randomUUID().toString();\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {", "originalCommit": "5c589b6607c2963a56f1f25e304c2d26cdea0645", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDUwNzg2Nw==", "url": "https://github.com/apache/pinot/pull/5534#discussion_r440507867", "bodyText": "removed", "author": "snleee", "createdAt": "2020-06-15T23:51:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ5NTYzNA=="}], "type": "inlineReview"}, {"oid": "e1e77aa6458833bc4e87bbb5818e3735f89c53dc", "url": "https://github.com/apache/pinot/commit/e1e77aa6458833bc4e87bbb5818e3735f89c53dc", "message": "Addressed the comments", "committedDate": "2020-06-16T01:51:02Z", "type": "commit"}, {"oid": "e1e77aa6458833bc4e87bbb5818e3735f89c53dc", "url": "https://github.com/apache/pinot/commit/e1e77aa6458833bc4e87bbb5818e3735f89c53dc", "message": "Addressed the comments", "committedDate": "2020-06-16T01:51:02Z", "type": "forcePushed"}]}