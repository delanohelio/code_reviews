{"pr_number": 6246, "pr_title": "Adding validation for jsonExtractKey and jsonExtractScalar functions", "pr_author": "xiangfu0", "pr_createdAt": "2020-11-06T06:51:33Z", "pr_url": "https://github.com/apache/pinot/pull/6246", "timeline": [{"oid": "53807b89a020adddefd5a0ffcf55345111b847b7", "url": "https://github.com/apache/pinot/commit/53807b89a020adddefd5a0ffcf55345111b847b7", "message": "Adding validation for json_extract_key and json_extract_scalar functions during sql compilation phase to avoid empty response", "committedDate": "2020-11-06T08:51:11Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzkxMDUzOQ==", "url": "https://github.com/apache/pinot/pull/6246#discussion_r577910539", "body": "Remove underscore from the function name to match `json_extract_scalar` and `json_extract_key`. Please also add some test cases for function name with underscore", "bodyText": "Remove underscore from the function name to match json_extract_scalar and json_extract_key. Please also add some test cases for function name with underscore", "bodyHTML": "<p dir=\"auto\">Remove underscore from the function name to match <code>json_extract_scalar</code> and <code>json_extract_key</code>. Please also add some test cases for function name with underscore</p>", "author": "Jackie-Jiang", "createdAt": "2021-02-17T20:09:14Z", "path": "pinot-common/src/main/java/org/apache/pinot/sql/parsers/CalciteSqlParser.java", "diffHunk": "@@ -902,11 +902,47 @@ private static Expression compileFunctionExpression(SqlBasicCall functionNode) {\n         operands.add(toExpression(childNode));\n       }\n     }\n+    validateFunction(functionName, operands);\n     Expression functionExpression = RequestUtils.getFunctionExpression(functionName);\n     functionExpression.getFunctionCall().setOperands(operands);\n     return functionExpression;\n   }\n \n+  private static void validateFunction(String functionName, List<Expression> operands) {\n+    switch (functionName.toUpperCase()) {", "originalCommit": "53807b89a020adddefd5a0ffcf55345111b847b7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzkxMTI5Mw==", "url": "https://github.com/apache/pinot/pull/6246#discussion_r577911293", "body": "Also validate the optional fourth argument?", "bodyText": "Also validate the optional fourth argument?", "bodyHTML": "<p dir=\"auto\">Also validate the optional fourth argument?</p>", "author": "Jackie-Jiang", "createdAt": "2021-02-17T20:10:43Z", "path": "pinot-common/src/main/java/org/apache/pinot/sql/parsers/CalciteSqlParser.java", "diffHunk": "@@ -902,11 +902,47 @@ private static Expression compileFunctionExpression(SqlBasicCall functionNode) {\n         operands.add(toExpression(childNode));\n       }\n     }\n+    validateFunction(functionName, operands);\n     Expression functionExpression = RequestUtils.getFunctionExpression(functionName);\n     functionExpression.getFunctionCall().setOperands(operands);\n     return functionExpression;\n   }\n \n+  private static void validateFunction(String functionName, List<Expression> operands) {\n+    switch (functionName.toUpperCase()) {\n+      case \"JSONEXTRACTSCALAR\":\n+        validateJsonExtractScalarFunction(functionName, operands);\n+        break;\n+      case \"JSONEXTRACTKEY\":\n+        validateJsonExtractKeyFunction(functionName, operands);\n+        break;\n+    }\n+  }\n+\n+  private static void validateJsonExtractScalarFunction(String functionName, List<Expression> operands) {\n+    // Check that there are exactly 3 or 4 arguments\n+    if (operands.size() < 3 || operands.size() > 4) {\n+      throw new SqlCompilationException(\n+          \"Expected 3/4 arguments for transform function: jsonExtractScalar(jsonFieldName, 'jsonPath', 'resultsType', ['defaultValue'])\");\n+    }\n+    if (!operands.get(1).isSetLiteral() || !operands.get(2).isSetLiteral()) {", "originalCommit": "53807b89a020adddefd5a0ffcf55345111b847b7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzkxMTY0Ng==", "url": "https://github.com/apache/pinot/pull/6246#discussion_r577911646", "body": "(Critical)\r\n```suggestion\r\n    if (!operands.get(1).isSetLiteral()) {\r\n```", "bodyText": "(Critical)\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (!operands.get(1).isSetLiteral() || !operands.get(2).isSetLiteral()) {\n          \n          \n            \n                if (!operands.get(1).isSetLiteral()) {", "bodyHTML": "<p dir=\"auto\">(Critical)</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">if</span> (<span class=\"pl-k\">!</span>operands<span class=\"pl-k\">.</span>get(<span class=\"pl-c1\">1</span>)<span class=\"pl-k\">.</span>isSetLiteral()<span class=\"x x-first\"> </span><span class=\"pl-k x\">||</span><span class=\"x\"> </span><span class=\"pl-k x\">!</span><span class=\"x\">operands</span><span class=\"pl-k x\">.</span><span class=\"x\">get(</span><span class=\"pl-c1 x\">2</span><span class=\"x\">)</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">isSetLiteral()</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">if</span> (<span class=\"pl-k\">!</span>operands<span class=\"pl-k\">.</span>get(<span class=\"pl-c1\">1</span>)<span class=\"pl-k\">.</span>isSetLiteral()) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "Jackie-Jiang", "createdAt": "2021-02-17T20:11:22Z", "path": "pinot-common/src/main/java/org/apache/pinot/sql/parsers/CalciteSqlParser.java", "diffHunk": "@@ -902,11 +902,47 @@ private static Expression compileFunctionExpression(SqlBasicCall functionNode) {\n         operands.add(toExpression(childNode));\n       }\n     }\n+    validateFunction(functionName, operands);\n     Expression functionExpression = RequestUtils.getFunctionExpression(functionName);\n     functionExpression.getFunctionCall().setOperands(operands);\n     return functionExpression;\n   }\n \n+  private static void validateFunction(String functionName, List<Expression> operands) {\n+    switch (functionName.toUpperCase()) {\n+      case \"JSONEXTRACTSCALAR\":\n+        validateJsonExtractScalarFunction(functionName, operands);\n+        break;\n+      case \"JSONEXTRACTKEY\":\n+        validateJsonExtractKeyFunction(functionName, operands);\n+        break;\n+    }\n+  }\n+\n+  private static void validateJsonExtractScalarFunction(String functionName, List<Expression> operands) {\n+    // Check that there are exactly 3 or 4 arguments\n+    if (operands.size() < 3 || operands.size() > 4) {\n+      throw new SqlCompilationException(\n+          \"Expected 3/4 arguments for transform function: jsonExtractScalar(jsonFieldName, 'jsonPath', 'resultsType', ['defaultValue'])\");\n+    }\n+    if (!operands.get(1).isSetLiteral() || !operands.get(2).isSetLiteral()) {\n+      throw new SqlCompilationException(\n+          \"Expected the second or third argument for transform function: jsonExtractScalar(jsonFieldName, 'jsonPath', 'resultsType', ['defaultValue']) to be a single-quoted literal value.\");\n+    }\n+  }\n+\n+  private static void validateJsonExtractKeyFunction(String functionName, List<Expression> operands) {\n+    // Check that there are exactly 3 or 4 arguments\n+    if (operands.size() != 2) {\n+      throw new SqlCompilationException(\n+          \"Exactly 2 arguments are required for transform function: jsonExtractKey(jsonFieldName, 'jsonPath')\");\n+    }\n+    if (!operands.get(1).isSetLiteral() || !operands.get(2).isSetLiteral()) {", "originalCommit": "53807b89a020adddefd5a0ffcf55345111b847b7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzkxMjQwMA==", "url": "https://github.com/apache/pinot/pull/6246#discussion_r577912400", "body": "Update the comment", "bodyText": "Update the comment", "bodyHTML": "<p dir=\"auto\">Update the comment</p>", "author": "Jackie-Jiang", "createdAt": "2021-02-17T20:12:51Z", "path": "pinot-common/src/main/java/org/apache/pinot/sql/parsers/CalciteSqlParser.java", "diffHunk": "@@ -902,11 +902,47 @@ private static Expression compileFunctionExpression(SqlBasicCall functionNode) {\n         operands.add(toExpression(childNode));\n       }\n     }\n+    validateFunction(functionName, operands);\n     Expression functionExpression = RequestUtils.getFunctionExpression(functionName);\n     functionExpression.getFunctionCall().setOperands(operands);\n     return functionExpression;\n   }\n \n+  private static void validateFunction(String functionName, List<Expression> operands) {\n+    switch (functionName.toUpperCase()) {\n+      case \"JSONEXTRACTSCALAR\":\n+        validateJsonExtractScalarFunction(functionName, operands);\n+        break;\n+      case \"JSONEXTRACTKEY\":\n+        validateJsonExtractKeyFunction(functionName, operands);\n+        break;\n+    }\n+  }\n+\n+  private static void validateJsonExtractScalarFunction(String functionName, List<Expression> operands) {\n+    // Check that there are exactly 3 or 4 arguments\n+    if (operands.size() < 3 || operands.size() > 4) {\n+      throw new SqlCompilationException(\n+          \"Expected 3/4 arguments for transform function: jsonExtractScalar(jsonFieldName, 'jsonPath', 'resultsType', ['defaultValue'])\");\n+    }\n+    if (!operands.get(1).isSetLiteral() || !operands.get(2).isSetLiteral()) {\n+      throw new SqlCompilationException(\n+          \"Expected the second or third argument for transform function: jsonExtractScalar(jsonFieldName, 'jsonPath', 'resultsType', ['defaultValue']) to be a single-quoted literal value.\");\n+    }\n+  }\n+\n+  private static void validateJsonExtractKeyFunction(String functionName, List<Expression> operands) {\n+    // Check that there are exactly 3 or 4 arguments", "originalCommit": "53807b89a020adddefd5a0ffcf55345111b847b7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzkxMjk2MQ==", "url": "https://github.com/apache/pinot/pull/6246#discussion_r577912961", "body": "(nit) For clarity\r\n```suggestion\r\n    if (operands.size() != 3 && operands.size() != 4) {\r\n```", "bodyText": "(nit) For clarity\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (operands.size() < 3 || operands.size() > 4) {\n          \n          \n            \n                if (operands.size() != 3 && operands.size() != 4) {", "bodyHTML": "<p dir=\"auto\">(nit) For clarity</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">if</span> (operands<span class=\"pl-k\">.</span>size() <span class=\"pl-k x x-first x-last\">&lt;</span> <span class=\"pl-c1\">3</span> <span class=\"pl-k x x-first x-last\">||</span> operands<span class=\"pl-k\">.</span>size() <span class=\"pl-k x x-first x-last\">&gt;</span> <span class=\"pl-c1\">4</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">if</span> (operands<span class=\"pl-k\">.</span>size() <span class=\"pl-k x x-first x-last\">!=</span> <span class=\"pl-c1\">3</span> <span class=\"pl-k x x-first x-last\">&amp;&amp;</span> operands<span class=\"pl-k\">.</span>size() <span class=\"pl-k x x-first x-last\">!=</span> <span class=\"pl-c1\">4</span>) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "Jackie-Jiang", "createdAt": "2021-02-17T20:13:53Z", "path": "pinot-common/src/main/java/org/apache/pinot/sql/parsers/CalciteSqlParser.java", "diffHunk": "@@ -902,11 +902,47 @@ private static Expression compileFunctionExpression(SqlBasicCall functionNode) {\n         operands.add(toExpression(childNode));\n       }\n     }\n+    validateFunction(functionName, operands);\n     Expression functionExpression = RequestUtils.getFunctionExpression(functionName);\n     functionExpression.getFunctionCall().setOperands(operands);\n     return functionExpression;\n   }\n \n+  private static void validateFunction(String functionName, List<Expression> operands) {\n+    switch (functionName.toUpperCase()) {\n+      case \"JSONEXTRACTSCALAR\":\n+        validateJsonExtractScalarFunction(functionName, operands);\n+        break;\n+      case \"JSONEXTRACTKEY\":\n+        validateJsonExtractKeyFunction(functionName, operands);\n+        break;\n+    }\n+  }\n+\n+  private static void validateJsonExtractScalarFunction(String functionName, List<Expression> operands) {\n+    // Check that there are exactly 3 or 4 arguments\n+    if (operands.size() < 3 || operands.size() > 4) {", "originalCommit": "53807b89a020adddefd5a0ffcf55345111b847b7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzkxMzczMw==", "url": "https://github.com/apache/pinot/pull/6246#discussion_r577913733", "body": "`\"Expect ...\"`, same for other exception message", "bodyText": "\"Expect ...\", same for other exception message", "bodyHTML": "<p dir=\"auto\"><code>\"Expect ...\"</code>, same for other exception message</p>", "author": "Jackie-Jiang", "createdAt": "2021-02-17T20:15:15Z", "path": "pinot-common/src/main/java/org/apache/pinot/sql/parsers/CalciteSqlParser.java", "diffHunk": "@@ -902,11 +902,47 @@ private static Expression compileFunctionExpression(SqlBasicCall functionNode) {\n         operands.add(toExpression(childNode));\n       }\n     }\n+    validateFunction(functionName, operands);\n     Expression functionExpression = RequestUtils.getFunctionExpression(functionName);\n     functionExpression.getFunctionCall().setOperands(operands);\n     return functionExpression;\n   }\n \n+  private static void validateFunction(String functionName, List<Expression> operands) {\n+    switch (functionName.toUpperCase()) {\n+      case \"JSONEXTRACTSCALAR\":\n+        validateJsonExtractScalarFunction(functionName, operands);\n+        break;\n+      case \"JSONEXTRACTKEY\":\n+        validateJsonExtractKeyFunction(functionName, operands);\n+        break;\n+    }\n+  }\n+\n+  private static void validateJsonExtractScalarFunction(String functionName, List<Expression> operands) {\n+    // Check that there are exactly 3 or 4 arguments\n+    if (operands.size() < 3 || operands.size() > 4) {\n+      throw new SqlCompilationException(\n+          \"Expected 3/4 arguments for transform function: jsonExtractScalar(jsonFieldName, 'jsonPath', 'resultsType', ['defaultValue'])\");", "originalCommit": "53807b89a020adddefd5a0ffcf55345111b847b7", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "96113f821281075b13da07c6481ef6ceeaab096f", "url": "https://github.com/apache/pinot/commit/96113f821281075b13da07c6481ef6ceeaab096f", "message": "Adding validation for json_extract_key and json_extract_scalar functions during sql compilation phase to avoid empty response", "committedDate": "2021-02-17T23:51:57Z", "type": "commit"}, {"oid": "8010929f6a140368ceebb2e357b7e238241ced4b", "url": "https://github.com/apache/pinot/commit/8010929f6a140368ceebb2e357b7e238241ced4b", "message": "Address comments", "committedDate": "2021-02-18T00:12:41Z", "type": "forcePushed"}, {"oid": "e8f56df97f56efb178699983614ea2134ce38f77", "url": "https://github.com/apache/pinot/commit/e8f56df97f56efb178699983614ea2134ce38f77", "message": "Address comments", "committedDate": "2021-02-18T00:35:00Z", "type": "forcePushed"}, {"oid": "9caf8801e52bbf66d4e6b17b6f9a6702467e016d", "url": "https://github.com/apache/pinot/commit/9caf8801e52bbf66d4e6b17b6f9a6702467e016d", "message": "Address comments", "committedDate": "2021-02-18T00:43:59Z", "type": "commit"}, {"oid": "9caf8801e52bbf66d4e6b17b6f9a6702467e016d", "url": "https://github.com/apache/pinot/commit/9caf8801e52bbf66d4e6b17b6f9a6702467e016d", "message": "Address comments", "committedDate": "2021-02-18T00:43:59Z", "type": "forcePushed"}]}