{"pr_number": 6084, "pr_title": "Adding array transform functions: array_average, array_max, array_min, array_sum", "pr_author": "xiangfu0", "pr_createdAt": "2020-09-30T21:46:51Z", "pr_url": "https://github.com/apache/pinot/pull/6084", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgzNzI5Ng==", "url": "https://github.com/apache/pinot/pull/6084#discussion_r497837296", "body": "Remove the underscore so that it works for both `arrayAverage` and `array_average`?", "bodyText": "Remove the underscore so that it works for both arrayAverage and array_average?", "bodyHTML": "<p dir=\"auto\">Remove the underscore so that it works for both <code>arrayAverage</code> and <code>array_average</code>?</p>", "author": "Jackie-Jiang", "createdAt": "2020-09-30T22:31:13Z", "path": "pinot-common/src/main/java/org/apache/pinot/common/function/TransformFunctionType.java", "diffHunk": "@@ -53,6 +53,10 @@\n   DATETIMECONVERT(\"dateTimeConvert\"),\n   DATETRUNC(\"dateTrunc\"),\n   ARRAYLENGTH(\"arrayLength\"),\n+  ARRAY_AVERAGE(\"array_average\"),", "originalCommit": "c5e290be29335dd763ccee11f019546247e5d8f2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg1NzAxMw==", "url": "https://github.com/apache/pinot/pull/6084#discussion_r497857013", "body": "I think we can always return doubles for this function to keep the consistent behavior between aggregation and transform.", "bodyText": "I think we can always return doubles for this function to keep the consistent behavior between aggregation and transform.", "bodyHTML": "<p dir=\"auto\">I think we can always return doubles for this function to keep the consistent behavior between aggregation and transform.</p>", "author": "Jackie-Jiang", "createdAt": "2020-09-30T23:32:42Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/operator/transform/function/ArraySumTransformFunction.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.operator.transform.function;\n+\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.pinot.core.common.DataSource;\n+import org.apache.pinot.core.operator.blocks.ProjectionBlock;\n+import org.apache.pinot.core.operator.transform.TransformResultMetadata;\n+import org.apache.pinot.core.plan.DocIdSetPlanNode;\n+import org.apache.pinot.core.util.ArrayCopyUtils;\n+import org.apache.pinot.spi.data.FieldSpec;\n+\n+\n+/**\n+ * The ArraySumTransformFunction class implements array_sum function for multi-valued columns\n+ *\n+ * Sample queries:\n+ * SELECT COUNT(*) FROM table WHERE array_sum(mvColumn) > 2\n+ * SELECT COUNT(*) FROM table GROUP BY array_sum(mvColumn)\n+ * SELECT SUM(array_sum(mvColumn)) FROM table\n+ */\n+public class ArraySumTransformFunction extends BaseTransformFunction {\n+  public static final String FUNCTION_NAME = \"array_sum\";\n+\n+  private long[] _longResults;\n+  private double[] _doubleResults;\n+  private TransformFunction _argument;\n+  private TransformResultMetadata _resultMetadata;\n+\n+  @Override\n+  public String getName() {\n+    return FUNCTION_NAME;\n+  }\n+\n+  @Override\n+  public void init(List<TransformFunction> arguments, Map<String, DataSource> dataSourceMap) {\n+    // Check that there is only 1 argument\n+    if (arguments.size() != 1) {\n+      throw new IllegalArgumentException(\"Exactly 1 argument is required for ARRAY_AVERAGE transform function\");\n+    }\n+\n+    // Check that the argument is a multi-valued column or transform function\n+    TransformFunction firstArgument = arguments.get(0);\n+    if (firstArgument instanceof LiteralTransformFunction || firstArgument.getResultMetadata().isSingleValue()) {\n+      throw new IllegalArgumentException(\n+          \"The argument of ARRAY_AVERAGE transform function must be a multi-valued column or a transform function\");\n+    }\n+    FieldSpec.DataType resultDataType;\n+    switch (firstArgument.getResultMetadata().getDataType()) {", "originalCommit": "c5e290be29335dd763ccee11f019546247e5d8f2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg1NzM1NQ==", "url": "https://github.com/apache/pinot/pull/6084#discussion_r497857355", "body": "For `INT`, use `_argument.transformToIntValuesMV(projectionBlock)` for better performance (avoid extra casting). Same for `FLOAT`", "bodyText": "For INT, use _argument.transformToIntValuesMV(projectionBlock) for better performance (avoid extra casting). Same for FLOAT", "bodyHTML": "<p dir=\"auto\">For <code>INT</code>, use <code>_argument.transformToIntValuesMV(projectionBlock)</code> for better performance (avoid extra casting). Same for <code>FLOAT</code></p>", "author": "Jackie-Jiang", "createdAt": "2020-09-30T23:34:01Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/operator/transform/function/ArraySumTransformFunction.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.operator.transform.function;\n+\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.pinot.core.common.DataSource;\n+import org.apache.pinot.core.operator.blocks.ProjectionBlock;\n+import org.apache.pinot.core.operator.transform.TransformResultMetadata;\n+import org.apache.pinot.core.plan.DocIdSetPlanNode;\n+import org.apache.pinot.core.util.ArrayCopyUtils;\n+import org.apache.pinot.spi.data.FieldSpec;\n+\n+\n+/**\n+ * The ArraySumTransformFunction class implements array_sum function for multi-valued columns\n+ *\n+ * Sample queries:\n+ * SELECT COUNT(*) FROM table WHERE array_sum(mvColumn) > 2\n+ * SELECT COUNT(*) FROM table GROUP BY array_sum(mvColumn)\n+ * SELECT SUM(array_sum(mvColumn)) FROM table\n+ */\n+public class ArraySumTransformFunction extends BaseTransformFunction {\n+  public static final String FUNCTION_NAME = \"array_sum\";\n+\n+  private long[] _longResults;\n+  private double[] _doubleResults;\n+  private TransformFunction _argument;\n+  private TransformResultMetadata _resultMetadata;\n+\n+  @Override\n+  public String getName() {\n+    return FUNCTION_NAME;\n+  }\n+\n+  @Override\n+  public void init(List<TransformFunction> arguments, Map<String, DataSource> dataSourceMap) {\n+    // Check that there is only 1 argument\n+    if (arguments.size() != 1) {\n+      throw new IllegalArgumentException(\"Exactly 1 argument is required for ARRAY_AVERAGE transform function\");\n+    }\n+\n+    // Check that the argument is a multi-valued column or transform function\n+    TransformFunction firstArgument = arguments.get(0);\n+    if (firstArgument instanceof LiteralTransformFunction || firstArgument.getResultMetadata().isSingleValue()) {\n+      throw new IllegalArgumentException(\n+          \"The argument of ARRAY_AVERAGE transform function must be a multi-valued column or a transform function\");\n+    }\n+    FieldSpec.DataType resultDataType;\n+    switch (firstArgument.getResultMetadata().getDataType()) {\n+      case INT:\n+      case LONG:\n+        resultDataType = FieldSpec.DataType.LONG;\n+        break;\n+      case FLOAT:\n+      case DOUBLE:\n+        resultDataType = FieldSpec.DataType.DOUBLE;\n+        break;\n+      default:\n+        throw new IllegalArgumentException(\n+            \"The argument of ARRAY_AVERAGE transform function must be numeric\");\n+    }\n+    _resultMetadata = new TransformResultMetadata(resultDataType, true, false);\n+    _argument = firstArgument;\n+  }\n+\n+  @Override\n+  public TransformResultMetadata getResultMetadata() {\n+    return _resultMetadata;\n+  }\n+\n+  @Override\n+  public long[] transformToLongValuesSV(ProjectionBlock projectionBlock) {\n+    if (_longResults == null) {\n+      _longResults = new long[DocIdSetPlanNode.MAX_DOC_PER_CALL];\n+    }\n+    int length = projectionBlock.getNumDocs();\n+    long sumRes;\n+    switch (_argument.getResultMetadata().getDataType()) {\n+      case INT:", "originalCommit": "c5e290be29335dd763ccee11f019546247e5d8f2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg1NzU3NQ==", "url": "https://github.com/apache/pinot/pull/6084#discussion_r497857575", "body": "(nit) Move the declaration into the for look for better readability", "bodyText": "(nit) Move the declaration into the for look for better readability", "bodyHTML": "<p dir=\"auto\">(nit) Move the declaration into the for look for better readability</p>", "author": "Jackie-Jiang", "createdAt": "2020-09-30T23:34:54Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/operator/transform/function/ArrayAverageTransformFunction.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.operator.transform.function;\n+\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.pinot.core.common.DataSource;\n+import org.apache.pinot.core.operator.blocks.ProjectionBlock;\n+import org.apache.pinot.core.operator.transform.TransformResultMetadata;\n+import org.apache.pinot.core.plan.DocIdSetPlanNode;\n+\n+\n+/**\n+ * The ArrayAverageTransformFunction class implements array_average function for multi-valued columns\n+ *\n+ * Sample queries:\n+ * SELECT COUNT(*) FROM table WHERE array_average(mvColumn) > 2\n+ * SELECT COUNT(*) FROM table GROUP BY array_average(mvColumn)\n+ * SELECT SUM(array_average(mvColumn)) FROM table\n+ */\n+public class ArrayAverageTransformFunction extends BaseTransformFunction {\n+  public static final String FUNCTION_NAME = \"array_average\";\n+\n+  private double[] _results;\n+  private TransformFunction _argument;\n+\n+  @Override\n+  public String getName() {\n+    return FUNCTION_NAME;\n+  }\n+\n+  @Override\n+  public void init(List<TransformFunction> arguments, Map<String, DataSource> dataSourceMap) {\n+    // Check that there is only 1 argument\n+    if (arguments.size() != 1) {\n+      throw new IllegalArgumentException(\"Exactly 1 argument is required for ARRAY_AVERAGE transform function\");\n+    }\n+\n+    // Check that the argument is a multi-valued column or transform function\n+    TransformFunction firstArgument = arguments.get(0);\n+    if (firstArgument instanceof LiteralTransformFunction || firstArgument.getResultMetadata().isSingleValue()) {\n+      throw new IllegalArgumentException(\n+          \"The argument of ARRAY_AVERAGE transform function must be a multi-valued column or a transform function\");\n+    }\n+    if (!firstArgument.getResultMetadata().getDataType().isNumeric()) {\n+      throw new IllegalArgumentException(\n+          \"The argument of ARRAY_AVERAGE transform function must be numeric\");\n+    }\n+    _argument = firstArgument;\n+  }\n+\n+  @Override\n+  public TransformResultMetadata getResultMetadata() {\n+    return DOUBLE_SV_NO_DICTIONARY_METADATA;\n+  }\n+\n+  @Override\n+  public double[] transformToDoubleValuesSV(ProjectionBlock projectionBlock) {\n+    if (_results == null) {\n+      _results = new double[DocIdSetPlanNode.MAX_DOC_PER_CALL];\n+    }\n+\n+    int numDocs = projectionBlock.getNumDocs();\n+    double sumRes;", "originalCommit": "c5e290be29335dd763ccee11f019546247e5d8f2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg1NzkwNA==", "url": "https://github.com/apache/pinot/pull/6084#discussion_r497857904", "body": "(nit) Cache `intValuesMV[i].length`, same for other places", "bodyText": "(nit) Cache intValuesMV[i].length, same for other places", "bodyHTML": "<p dir=\"auto\">(nit) Cache <code>intValuesMV[i].length</code>, same for other places</p>", "author": "Jackie-Jiang", "createdAt": "2020-09-30T23:36:04Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/operator/transform/function/ArrayAverageTransformFunction.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.operator.transform.function;\n+\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.pinot.core.common.DataSource;\n+import org.apache.pinot.core.operator.blocks.ProjectionBlock;\n+import org.apache.pinot.core.operator.transform.TransformResultMetadata;\n+import org.apache.pinot.core.plan.DocIdSetPlanNode;\n+\n+\n+/**\n+ * The ArrayAverageTransformFunction class implements array_average function for multi-valued columns\n+ *\n+ * Sample queries:\n+ * SELECT COUNT(*) FROM table WHERE array_average(mvColumn) > 2\n+ * SELECT COUNT(*) FROM table GROUP BY array_average(mvColumn)\n+ * SELECT SUM(array_average(mvColumn)) FROM table\n+ */\n+public class ArrayAverageTransformFunction extends BaseTransformFunction {\n+  public static final String FUNCTION_NAME = \"array_average\";\n+\n+  private double[] _results;\n+  private TransformFunction _argument;\n+\n+  @Override\n+  public String getName() {\n+    return FUNCTION_NAME;\n+  }\n+\n+  @Override\n+  public void init(List<TransformFunction> arguments, Map<String, DataSource> dataSourceMap) {\n+    // Check that there is only 1 argument\n+    if (arguments.size() != 1) {\n+      throw new IllegalArgumentException(\"Exactly 1 argument is required for ARRAY_AVERAGE transform function\");\n+    }\n+\n+    // Check that the argument is a multi-valued column or transform function\n+    TransformFunction firstArgument = arguments.get(0);\n+    if (firstArgument instanceof LiteralTransformFunction || firstArgument.getResultMetadata().isSingleValue()) {\n+      throw new IllegalArgumentException(\n+          \"The argument of ARRAY_AVERAGE transform function must be a multi-valued column or a transform function\");\n+    }\n+    if (!firstArgument.getResultMetadata().getDataType().isNumeric()) {\n+      throw new IllegalArgumentException(\n+          \"The argument of ARRAY_AVERAGE transform function must be numeric\");\n+    }\n+    _argument = firstArgument;\n+  }\n+\n+  @Override\n+  public TransformResultMetadata getResultMetadata() {\n+    return DOUBLE_SV_NO_DICTIONARY_METADATA;\n+  }\n+\n+  @Override\n+  public double[] transformToDoubleValuesSV(ProjectionBlock projectionBlock) {\n+    if (_results == null) {\n+      _results = new double[DocIdSetPlanNode.MAX_DOC_PER_CALL];\n+    }\n+\n+    int numDocs = projectionBlock.getNumDocs();\n+    double sumRes;\n+    switch (_argument.getResultMetadata().getDataType()) {\n+      case INT:\n+        int[][] intValuesMV = _argument.transformToIntValuesMV(projectionBlock);\n+        for (int i = 0; i < numDocs; i++) {\n+          sumRes = 0;\n+          for (int j = 0; j < intValuesMV[i].length; j++) {", "originalCommit": "c5e290be29335dd763ccee11f019546247e5d8f2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg1ODU1NA==", "url": "https://github.com/apache/pinot/pull/6084#discussion_r497858554", "body": "(nit) Same for other places\r\n```suggestion\r\n      for (int value : intValuesMV[i]) {\r\n        maxRes = Math.max(maxRes, value);\r\n      }\r\n```", "bodyText": "(nit) Same for other places\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  for (int j = 0; j < intValuesMV[i].length; j++) {\n          \n          \n            \n                    maxRes = Math.max(maxRes, intValuesMV[i][j]);\n          \n          \n            \n                  }\n          \n          \n            \n                  for (int value : intValuesMV[i]) {\n          \n          \n            \n                    maxRes = Math.max(maxRes, value);\n          \n          \n            \n                  }", "bodyHTML": "<p dir=\"auto\">(nit) Same for other places</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"92\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">      <span class=\"pl-k\">for</span> (<span class=\"pl-k\">int</span> <span class=\"x x-first\">j </span><span class=\"pl-k x\">=</span><span class=\"x\"> </span><span class=\"pl-c1 x\">0</span><span class=\"x\">; j </span><span class=\"pl-k x\">&lt;</span><span class=\"x x-last\"> </span>intValuesMV[i]<span class=\"pl-k x x-first\">.</span><span class=\"x\">length; j</span><span class=\"pl-k x x-last\">++</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"93\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        maxRes <span class=\"pl-k\">=</span> <span class=\"pl-smi\">Math</span><span class=\"pl-k\">.</span>max(maxRes, <span class=\"x x-first x-last\">intValuesMV[i][j]</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"94\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">      }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"92\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">      <span class=\"pl-k\">for</span> (<span class=\"pl-k\">int</span> <span class=\"x x-first\">value </span><span class=\"pl-k x\">:</span><span class=\"x x-last\"> </span>intValuesMV[i]) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"93\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        maxRes <span class=\"pl-k\">=</span> <span class=\"pl-smi\">Math</span><span class=\"pl-k\">.</span>max(maxRes, <span class=\"x x-first x-last\">value</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"94\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">      }</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "Jackie-Jiang", "createdAt": "2020-09-30T23:38:28Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/operator/transform/function/ArrayMaxTransformFunction.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.operator.transform.function;\n+\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.pinot.core.common.DataSource;\n+import org.apache.pinot.core.operator.blocks.ProjectionBlock;\n+import org.apache.pinot.core.operator.transform.TransformResultMetadata;\n+import org.apache.pinot.core.plan.DocIdSetPlanNode;\n+import org.apache.pinot.core.util.ArrayCopyUtils;\n+import org.apache.pinot.spi.data.FieldSpec;\n+\n+\n+/**\n+ * The ArrayMaxTransformFunction class implements array_max function for multi-valued columns\n+ *\n+ * Sample queries:\n+ * SELECT COUNT(*) FROM table WHERE array_max(mvColumn) > 2\n+ * SELECT COUNT(*) FROM table GROUP BY array_max(mvColumn)\n+ * SELECT SUM(array_max(mvColumn)) FROM table\n+ */\n+public class ArrayMaxTransformFunction extends BaseTransformFunction {\n+  public static final String FUNCTION_NAME = \"array_max\";\n+\n+  private int[] _intValuesSV;\n+  private long[] _longValuesSV;\n+  private float[] _floatValuesSV;\n+  private double[] _doubleValuesSV;\n+  private String[] _stringValuesSV;\n+  private TransformFunction _argument;\n+  private TransformResultMetadata _resultMetadata;\n+\n+  @Override\n+  public String getName() {\n+    return FUNCTION_NAME;\n+  }\n+\n+  @Override\n+  public void init(List<TransformFunction> arguments, Map<String, DataSource> dataSourceMap) {\n+    // Check that there is only 1 argument\n+    if (arguments.size() != 1) {\n+      throw new IllegalArgumentException(\"Exactly 1 argument is required for ARRAY_MAX transform function\");\n+    }\n+\n+    // Check that the argument is a multi-valued column or transform function\n+    TransformFunction firstArgument = arguments.get(0);\n+    if (firstArgument instanceof LiteralTransformFunction || firstArgument.getResultMetadata().isSingleValue()) {\n+      throw new IllegalArgumentException(\n+          \"The argument of ARRAY_MAX transform function must be a multi-valued column or a transform function\");\n+    }\n+    _resultMetadata = new TransformResultMetadata(firstArgument.getResultMetadata().getDataType(), true, false);\n+    _argument = firstArgument;\n+  }\n+\n+  @Override\n+  public TransformResultMetadata getResultMetadata() {\n+    return _resultMetadata;\n+  }\n+\n+  @Override\n+  public int[] transformToIntValuesSV(ProjectionBlock projectionBlock) {\n+    if (_argument.getResultMetadata().getDataType() != FieldSpec.DataType.INT) {\n+      return super.transformToIntValuesSV(projectionBlock);\n+    }\n+    if (_intValuesSV == null) {\n+      _intValuesSV = new int[DocIdSetPlanNode.MAX_DOC_PER_CALL];\n+    }\n+    int length = projectionBlock.getNumDocs();\n+    int[][] intValuesMV = _argument.transformToIntValuesMV(projectionBlock);\n+    for (int i = 0; i < length; i++) {\n+      int maxRes = Integer.MIN_VALUE;\n+      for (int j = 0; j < intValuesMV[i].length; j++) {\n+        maxRes = Math.max(maxRes, intValuesMV[i][j]);\n+      }", "originalCommit": "c5e290be29335dd763ccee11f019546247e5d8f2", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "da7abaf9cd2f53c793a8c5106120d6c877806320", "url": "https://github.com/apache/pinot/commit/da7abaf9cd2f53c793a8c5106120d6c877806320", "message": "Address comments", "committedDate": "2020-10-01T00:26:28Z", "type": "forcePushed"}, {"oid": "a8c683f53522632284deee63c0920ed6d08b5092", "url": "https://github.com/apache/pinot/commit/a8c683f53522632284deee63c0920ed6d08b5092", "message": "Address comments", "committedDate": "2020-10-01T00:30:08Z", "type": "forcePushed"}, {"oid": "5d0d9c773fb3e1c6539aeb7ce59c1189f460cbfc", "url": "https://github.com/apache/pinot/commit/5d0d9c773fb3e1c6539aeb7ce59c1189f460cbfc", "message": "Address comments", "committedDate": "2020-10-01T00:33:37Z", "type": "forcePushed"}, {"oid": "5d0d9c773fb3e1c6539aeb7ce59c1189f460cbfc", "url": "https://github.com/apache/pinot/commit/5d0d9c773fb3e1c6539aeb7ce59c1189f460cbfc", "message": "Address comments", "committedDate": "2020-10-01T00:33:37Z", "type": "forcePushed"}, {"oid": "baa5bd4e61b1a818d4a2b10f7c486f0d8608bd06", "url": "https://github.com/apache/pinot/commit/baa5bd4e61b1a818d4a2b10f7c486f0d8608bd06", "message": "Adding array transform functions: array_average, array_max, array_min, array_sum", "committedDate": "2020-10-01T04:49:56Z", "type": "commit"}, {"oid": "105f5ae938e9fffcafd66ca054a153b3d4519f34", "url": "https://github.com/apache/pinot/commit/105f5ae938e9fffcafd66ca054a153b3d4519f34", "message": "Address comments", "committedDate": "2020-10-01T04:49:56Z", "type": "commit"}, {"oid": "105f5ae938e9fffcafd66ca054a153b3d4519f34", "url": "https://github.com/apache/pinot/commit/105f5ae938e9fffcafd66ca054a153b3d4519f34", "message": "Address comments", "committedDate": "2020-10-01T04:49:56Z", "type": "forcePushed"}]}