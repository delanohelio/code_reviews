{"pr_number": 6149, "pr_title": "add validation for upsert tables", "pr_author": "yupeng9", "pr_createdAt": "2020-10-15T19:36:19Z", "pr_url": "https://github.com/apache/pinot/pull/6149", "timeline": [{"oid": "d499f7c43213926bc5d559bf8ce447af4993185b", "url": "https://github.com/apache/pinot/commit/d499f7c43213926bc5d559bf8ce447af4993185b", "message": "add validation for upsert tables", "committedDate": "2020-10-15T19:34:39Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTgxNDA4OA==", "url": "https://github.com/apache/pinot/pull/6149#discussion_r505814088", "body": "Please add some javadoc on the checks performed here", "bodyText": "Please add some javadoc on the checks performed here", "bodyHTML": "<p dir=\"auto\">Please add some javadoc on the checks performed here</p>", "author": "Jackie-Jiang", "createdAt": "2020-10-15T20:18:58Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/util/TableConfigUtils.java", "diffHunk": "@@ -230,6 +234,38 @@ private static void validateIngestionConfig(@Nullable IngestionConfig ingestionC\n     }\n   }\n \n+  /**\n+   * Validates the upsert-related configurations\n+   *", "originalCommit": "d499f7c43213926bc5d559bf8ce447af4993185b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTgxNDgwNg==", "url": "https://github.com/apache/pinot/pull/6149#discussion_r505814806", "body": "```suggestion\r\n    Preconditions.checkState(CollectionUtils.isNotEmpty(schema.getPrimaryKeyColumns()), \"Upsert table must have primary key columns in the schema\");\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (schema.getPrimaryKeyColumns() == null || schema.getPrimaryKeyColumns().isEmpty()) {\n          \n          \n            \n                  throw new IllegalStateException(\"Upsert table must have primary key columns in the schema.\");\n          \n          \n            \n                }\n          \n          \n            \n                Preconditions.checkState(CollectionUtils.isNotEmpty(schema.getPrimaryKeyColumns()), \"Upsert table must have primary key columns in the schema\");", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">if</span> (schema<span class=\"pl-k\">.</span>getPrimaryKeyColumns() <span class=\"pl-k\">==</span> <span class=\"pl-c1\">null</span> <span class=\"pl-k\">||</span> schema<span class=\"pl-k\">.</span>getPrimaryKeyColumns()<span class=\"pl-k\">.</span>isEmpty()) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">      <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">IllegalStateException</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Upsert table must have primary key columns in the schema.<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-smi\">Preconditions</span><span class=\"pl-k\">.</span>checkState(<span class=\"pl-smi\">CollectionUtils</span><span class=\"pl-k\">.</span>isNotEmpty(schema<span class=\"pl-k\">.</span>getPrimaryKeyColumns()), <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Upsert table must have primary key columns in the schema<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "Jackie-Jiang", "createdAt": "2020-10-15T20:20:27Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/util/TableConfigUtils.java", "diffHunk": "@@ -230,6 +234,38 @@ private static void validateIngestionConfig(@Nullable IngestionConfig ingestionC\n     }\n   }\n \n+  /**\n+   * Validates the upsert-related configurations\n+   *\n+   */\n+  private static void validateUpsertConfig(TableConfig tableConfig, Schema schema) {\n+    if (tableConfig.getUpsertMode() == UpsertConfig.Mode.NONE) {\n+      return;\n+    }\n+    // primary key exists\n+    if (schema.getPrimaryKeyColumns() == null || schema.getPrimaryKeyColumns().isEmpty()) {\n+      throw new IllegalStateException(\"Upsert table must have primary key columns in the schema.\");\n+    }", "originalCommit": "d499f7c43213926bc5d559bf8ce447af4993185b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg3NzM4OA==", "url": "https://github.com/apache/pinot/pull/6149#discussion_r505877388", "bodyText": "I saw some checks in this class use precondition, others use IllegalStateException. Shall we make it consistent? @icefury71", "author": "yupeng9", "createdAt": "2020-10-15T21:39:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTgxNDgwNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTkwOTAyNA==", "url": "https://github.com/apache/pinot/pull/6149#discussion_r505909024", "bodyText": "Will do so in my next pass", "author": "icefury71", "createdAt": "2020-10-15T22:54:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTgxNDgwNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTgxNjc1MQ==", "url": "https://github.com/apache/pinot/pull/6149#discussion_r505816751", "body": "This can potentially have NPE\r\n```suggestion\r\n    Preconditions.checkState(tableConfig.getRoutingConfig() != null && RoutingConfig.REPLICA_GROUP_INSTANCE_SELECTOR_TYPE. equalsIgnoreCase(tableConfig.getRoutingConfig().getInstanceSelectorType()), \"Upsert table must use replica-group based routing\")\r\n```", "bodyText": "This can potentially have NPE\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (tableConfig.getRoutingConfig() == null || !tableConfig.getRoutingConfig().getInstanceSelectorType()\n          \n          \n            \n                    .equalsIgnoreCase(RoutingConfig.REPLICA_GROUP_INSTANCE_SELECTOR_TYPE)) {\n          \n          \n            \n                  throw new IllegalStateException(\"Upsert table must use replicaGroup as the routing config.\");\n          \n          \n            \n                }\n          \n          \n            \n                Preconditions.checkState(tableConfig.getRoutingConfig() != null && RoutingConfig.REPLICA_GROUP_INSTANCE_SELECTOR_TYPE. equalsIgnoreCase(tableConfig.getRoutingConfig().getInstanceSelectorType()), \"Upsert table must use replica-group based routing\")", "bodyHTML": "<p dir=\"auto\">This can potentially have NPE</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">if</span> (tableConfig<span class=\"pl-k\">.</span>getRoutingConfig() <span class=\"pl-k\">==</span> <span class=\"pl-c1\">null</span> <span class=\"pl-k\">||</span> <span class=\"pl-k\">!</span>tableConfig<span class=\"pl-k\">.</span>getRoutingConfig()<span class=\"pl-k\">.</span>getInstanceSelectorType()</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        .equalsIgnoreCase(<span class=\"pl-smi\">RoutingConfig</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>REPLICA_GROUP_INSTANCE_SELECTOR_TYPE</span>)) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">      <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">IllegalStateException</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Upsert table must use replicaGroup as the routing config.<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-smi\">Preconditions</span><span class=\"pl-k\">.</span>checkState(tableConfig<span class=\"pl-k\">.</span>getRoutingConfig() <span class=\"pl-k\">!=</span> <span class=\"pl-c1\">null</span> <span class=\"pl-k\">&amp;&amp;</span> <span class=\"pl-smi\">RoutingConfig</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>REPLICA_GROUP_INSTANCE_SELECTOR_TYPE</span>. equalsIgnoreCase(tableConfig<span class=\"pl-k\">.</span>getRoutingConfig()<span class=\"pl-k\">.</span>getInstanceSelectorType()), <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Upsert table must use replica-group based routing<span class=\"pl-pds\">\"</span></span>)</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "Jackie-Jiang", "createdAt": "2020-10-15T20:24:05Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/util/TableConfigUtils.java", "diffHunk": "@@ -230,6 +234,38 @@ private static void validateIngestionConfig(@Nullable IngestionConfig ingestionC\n     }\n   }\n \n+  /**\n+   * Validates the upsert-related configurations\n+   *\n+   */\n+  private static void validateUpsertConfig(TableConfig tableConfig, Schema schema) {\n+    if (tableConfig.getUpsertMode() == UpsertConfig.Mode.NONE) {\n+      return;\n+    }\n+    // primary key exists\n+    if (schema.getPrimaryKeyColumns() == null || schema.getPrimaryKeyColumns().isEmpty()) {\n+      throw new IllegalStateException(\"Upsert table must have primary key columns in the schema.\");\n+    }\n+    // replica group is configured for routing\n+    if (tableConfig.getRoutingConfig() == null || !tableConfig.getRoutingConfig().getInstanceSelectorType()\n+        .equalsIgnoreCase(RoutingConfig.REPLICA_GROUP_INSTANCE_SELECTOR_TYPE)) {\n+      throw new IllegalStateException(\"Upsert table must use replicaGroup as the routing config.\");\n+    }", "originalCommit": "d499f7c43213926bc5d559bf8ce447af4993185b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg4NDg5NQ==", "url": "https://github.com/apache/pinot/pull/6149#discussion_r505884895", "bodyText": "why? this seems the same rewrite.", "author": "yupeng9", "createdAt": "2020-10-15T21:50:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTgxNjc1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTkyNDQ4Mw==", "url": "https://github.com/apache/pinot/pull/6149#discussion_r505924483", "bodyText": "tableConfig.getRoutingConfig().getInstanceSelectorType() might be null", "author": "Jackie-Jiang", "createdAt": "2020-10-15T23:42:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTgxNjc1MQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjAzMTc5NA==", "url": "https://github.com/apache/pinot/pull/6149#discussion_r506031794", "bodyText": "then it's the same :)", "author": "yupeng9", "createdAt": "2020-10-16T03:46:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTgxNjc1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTgyMDk0Ng==", "url": "https://github.com/apache/pinot/pull/6149#discussion_r505820946", "body": "```suggestion\r\n      Preconditions.checkState(streamConfig.hasLowLevelConsumerType() && !streamConfig.hasHighLevelConsumerType(), \"\"Upsert table must use low-level streaming consumer type\");\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  if (streamConfig.getConsumerTypes().size() != 1\n          \n          \n            \n                      || streamConfig.getConsumerTypes().get(0) != StreamConfig.ConsumerType.LOWLEVEL) {\n          \n          \n            \n                    throw new IllegalStateException(\"Upsert table must use low-level streaming consumer type.\");\n          \n          \n            \n                  }\n          \n          \n            \n                  Preconditions.checkState(streamConfig.hasLowLevelConsumerType() && !streamConfig.hasHighLevelConsumerType(), \"\"Upsert table must use low-level streaming consumer type\");", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">      <span class=\"pl-k\">if</span> (streamConfig<span class=\"pl-k\">.</span>getConsumerTypes()<span class=\"pl-k\">.</span>size() <span class=\"pl-k\">!=</span> <span class=\"pl-c1\">1</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">          <span class=\"pl-k\">||</span> streamConfig<span class=\"pl-k\">.</span>getConsumerTypes()<span class=\"pl-k\">.</span>get(<span class=\"pl-c1\">0</span>) <span class=\"pl-k\">!=</span> <span class=\"pl-smi\">StreamConfig</span><span class=\"pl-k\">.</span><span class=\"pl-smi\">ConsumerType</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>LOWLEVEL</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">IllegalStateException</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Upsert table must use low-level streaming consumer type.<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">      }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">      <span class=\"pl-smi\">Preconditions</span><span class=\"pl-k\">.</span>checkState(streamConfig<span class=\"pl-k\">.</span>hasLowLevelConsumerType() <span class=\"pl-k\">&amp;&amp;</span> <span class=\"pl-k\">!</span>streamConfig<span class=\"pl-k\">.</span>hasHighLevelConsumerType(), <span class=\"pl-s\"><span class=\"pl-pds\">\"</span><span class=\"pl-pds\">\"</span></span><span class=\"pl-smi\">Upsert</span> table must use low<span class=\"pl-k\">-</span>level streaming consumer type<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>);</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "Jackie-Jiang", "createdAt": "2020-10-15T20:30:30Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/util/TableConfigUtils.java", "diffHunk": "@@ -230,6 +234,38 @@ private static void validateIngestionConfig(@Nullable IngestionConfig ingestionC\n     }\n   }\n \n+  /**\n+   * Validates the upsert-related configurations\n+   *\n+   */\n+  private static void validateUpsertConfig(TableConfig tableConfig, Schema schema) {\n+    if (tableConfig.getUpsertMode() == UpsertConfig.Mode.NONE) {\n+      return;\n+    }\n+    // primary key exists\n+    if (schema.getPrimaryKeyColumns() == null || schema.getPrimaryKeyColumns().isEmpty()) {\n+      throw new IllegalStateException(\"Upsert table must have primary key columns in the schema.\");\n+    }\n+    // replica group is configured for routing\n+    if (tableConfig.getRoutingConfig() == null || !tableConfig.getRoutingConfig().getInstanceSelectorType()\n+        .equalsIgnoreCase(RoutingConfig.REPLICA_GROUP_INSTANCE_SELECTOR_TYPE)) {\n+      throw new IllegalStateException(\"Upsert table must use replicaGroup as the routing config.\");\n+    }\n+    // consumer type must be low-level\n+    if (tableConfig.getIndexingConfig() != null && tableConfig.getIndexingConfig().getStreamConfigs() != null) {\n+      StreamConfig streamConfig =\n+          new StreamConfig(tableConfig.getTableName(), tableConfig.getIndexingConfig().getStreamConfigs());\n+      if (streamConfig.getConsumerTypes().size() != 1\n+          || streamConfig.getConsumerTypes().get(0) != StreamConfig.ConsumerType.LOWLEVEL) {\n+        throw new IllegalStateException(\"Upsert table must use low-level streaming consumer type.\");\n+      }", "originalCommit": "d499f7c43213926bc5d559bf8ce447af4993185b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTgyMzczNw==", "url": "https://github.com/apache/pinot/pull/6149#discussion_r505823737", "body": "Use precondition, also recommend reorder the checks in this order: upsert mode -> primary key -> table type -> consumer type -> routing type, which IMO is more intuitive", "bodyText": "Use precondition, also recommend reorder the checks in this order: upsert mode -> primary key -> table type -> consumer type -> routing type, which IMO is more intuitive", "bodyHTML": "<p dir=\"auto\">Use precondition, also recommend reorder the checks in this order: upsert mode -&gt; primary key -&gt; table type -&gt; consumer type -&gt; routing type, which IMO is more intuitive</p>", "author": "Jackie-Jiang", "createdAt": "2020-10-15T20:33:55Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/util/TableConfigUtils.java", "diffHunk": "@@ -230,6 +234,38 @@ private static void validateIngestionConfig(@Nullable IngestionConfig ingestionC\n     }\n   }\n \n+  /**\n+   * Validates the upsert-related configurations\n+   *\n+   */\n+  private static void validateUpsertConfig(TableConfig tableConfig, Schema schema) {\n+    if (tableConfig.getUpsertMode() == UpsertConfig.Mode.NONE) {\n+      return;\n+    }\n+    // primary key exists\n+    if (schema.getPrimaryKeyColumns() == null || schema.getPrimaryKeyColumns().isEmpty()) {\n+      throw new IllegalStateException(\"Upsert table must have primary key columns in the schema.\");\n+    }\n+    // replica group is configured for routing\n+    if (tableConfig.getRoutingConfig() == null || !tableConfig.getRoutingConfig().getInstanceSelectorType()\n+        .equalsIgnoreCase(RoutingConfig.REPLICA_GROUP_INSTANCE_SELECTOR_TYPE)) {\n+      throw new IllegalStateException(\"Upsert table must use replicaGroup as the routing config.\");\n+    }\n+    // consumer type must be low-level\n+    if (tableConfig.getIndexingConfig() != null && tableConfig.getIndexingConfig().getStreamConfigs() != null) {\n+      StreamConfig streamConfig =\n+          new StreamConfig(tableConfig.getTableName(), tableConfig.getIndexingConfig().getStreamConfigs());\n+      if (streamConfig.getConsumerTypes().size() != 1\n+          || streamConfig.getConsumerTypes().get(0) != StreamConfig.ConsumerType.LOWLEVEL) {\n+        throw new IllegalStateException(\"Upsert table must use low-level streaming consumer type.\");\n+      }\n+    }\n+    // check type type is realtime\n+    if (tableConfig.getTableType() != TableType.REALTIME) {", "originalCommit": "d499f7c43213926bc5d559bf8ce447af4993185b", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTg4NTk3Nw==", "url": "https://github.com/apache/pinot/pull/6149#discussion_r505885977", "bodyText": "sgtm", "author": "yupeng9", "createdAt": "2020-10-15T21:52:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTgyMzczNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTgyODgwNA==", "url": "https://github.com/apache/pinot/pull/6149#discussion_r505828804", "body": "nit: do this in the beginning ?", "bodyText": "nit: do this in the beginning ?", "bodyHTML": "<p dir=\"auto\">nit: do this in the beginning ?</p>", "author": "icefury71", "createdAt": "2020-10-15T20:40:14Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/util/TableConfigUtils.java", "diffHunk": "@@ -230,6 +234,38 @@ private static void validateIngestionConfig(@Nullable IngestionConfig ingestionC\n     }\n   }\n \n+  /**\n+   * Validates the upsert-related configurations\n+   *\n+   */\n+  private static void validateUpsertConfig(TableConfig tableConfig, Schema schema) {\n+    if (tableConfig.getUpsertMode() == UpsertConfig.Mode.NONE) {\n+      return;\n+    }\n+    // primary key exists\n+    if (schema.getPrimaryKeyColumns() == null || schema.getPrimaryKeyColumns().isEmpty()) {\n+      throw new IllegalStateException(\"Upsert table must have primary key columns in the schema.\");\n+    }\n+    // replica group is configured for routing\n+    if (tableConfig.getRoutingConfig() == null || !tableConfig.getRoutingConfig().getInstanceSelectorType()\n+        .equalsIgnoreCase(RoutingConfig.REPLICA_GROUP_INSTANCE_SELECTOR_TYPE)) {\n+      throw new IllegalStateException(\"Upsert table must use replicaGroup as the routing config.\");\n+    }\n+    // consumer type must be low-level\n+    if (tableConfig.getIndexingConfig() != null && tableConfig.getIndexingConfig().getStreamConfigs() != null) {\n+      StreamConfig streamConfig =\n+          new StreamConfig(tableConfig.getTableName(), tableConfig.getIndexingConfig().getStreamConfigs());\n+      if (streamConfig.getConsumerTypes().size() != 1\n+          || streamConfig.getConsumerTypes().get(0) != StreamConfig.ConsumerType.LOWLEVEL) {\n+        throw new IllegalStateException(\"Upsert table must use low-level streaming consumer type.\");\n+      }\n+    }\n+    // check type type is realtime\n+    if (tableConfig.getTableType() != TableType.REALTIME) {", "originalCommit": "d499f7c43213926bc5d559bf8ce447af4993185b", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "12e2ab5b400ef56fcc02f435a043785d42f71336", "url": "https://github.com/apache/pinot/commit/12e2ab5b400ef56fcc02f435a043785d42f71336", "message": "address comments", "committedDate": "2020-10-15T22:36:24Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTkyNDgwNw==", "url": "https://github.com/apache/pinot/pull/6149#discussion_r505924807", "body": "(nit) Use precondition for this as well", "bodyText": "(nit) Use precondition for this as well", "bodyHTML": "<p dir=\"auto\">(nit) Use precondition for this as well</p>", "author": "Jackie-Jiang", "createdAt": "2020-10-15T23:43:35Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/util/TableConfigUtils.java", "diffHunk": "@@ -230,6 +235,39 @@ private static void validateIngestionConfig(@Nullable IngestionConfig ingestionC\n     }\n   }\n \n+  /**\n+   * Validates the upsert-related configurations\n+   *  - check table type is realtime\n+   *  - the primary key exists on the schema\n+   *  - replica group is configured for routing type\n+   *  - consumer type must be low-level\n+   */\n+  protected static void validateUpsertConfig(TableConfig tableConfig, Schema schema) {\n+    if (tableConfig.getUpsertMode() == UpsertConfig.Mode.NONE) {\n+      return;\n+    }\n+    // check table type is realtime\n+    if (tableConfig.getTableType() != TableType.REALTIME) {", "originalCommit": "12e2ab5b400ef56fcc02f435a043785d42f71336", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjAzMjAwMw==", "url": "https://github.com/apache/pinot/pull/6149#discussion_r506032003", "bodyText": "done", "author": "yupeng9", "createdAt": "2020-10-16T03:46:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTkyNDgwNw=="}], "type": "inlineReview"}, {"oid": "8704e555b509a8d1c86425fff15660e85b0f675c", "url": "https://github.com/apache/pinot/commit/8704e555b509a8d1c86425fff15660e85b0f675c", "message": "comments", "committedDate": "2020-10-16T03:46:23Z", "type": "commit"}]}