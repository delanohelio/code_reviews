{"pr_number": 6009, "pr_title": "Adjust schema validation logic in AvroIngestionSchemaValidator", "pr_author": "jackjlli", "pr_createdAt": "2020-09-11T21:49:00Z", "pr_url": "https://github.com/apache/pinot/pull/6009", "timeline": [{"oid": "6d22faa9fd916217b764ddebd8cacac54ea4a6db", "url": "https://github.com/apache/pinot/commit/6d22faa9fd916217b764ddebd8cacac54ea4a6db", "message": "Adjust schema validation logic in AvroIngestionSchemaValidator", "committedDate": "2020-09-11T21:37:24Z", "type": "commit"}, {"oid": "f09ca9aecd95080949422b302d9f6870f8c033f0", "url": "https://github.com/apache/pinot/commit/f09ca9aecd95080949422b302d9f6870f8c033f0", "message": "Reduce test file sizes", "committedDate": "2020-09-12T03:33:18Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU4MzA0Mw==", "url": "https://github.com/apache/pinot/pull/6009#discussion_r487583043", "body": "(nit) directly use the member variable? Same for other places\r\n```suggestion\r\n          _dataTypeMismatch.addMismatchReason(String\r\n```", "bodyText": "(nit) directly use the member variable? Same for other places\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      getDataTypeMismatchResult().addMismatchReason(String\n          \n          \n            \n                      _dataTypeMismatch.addMismatchReason(String", "bodyHTML": "<p dir=\"auto\">(nit) directly use the member variable? Same for other places</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">          <span class=\"x x-first x-last\">getDataTypeMismatchResult()</span><span class=\"pl-k\">.</span>addMismatchReason(<span class=\"pl-smi\">String</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">          <span class=\"x x-first x-last\">_dataTypeMismatch</span><span class=\"pl-k\">.</span>addMismatchReason(<span class=\"pl-smi\">String</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "Jackie-Jiang", "createdAt": "2020-09-13T22:05:52Z", "path": "pinot-plugins/pinot-input-format/pinot-avro-base/src/main/java/org/apache/pinot/plugin/inputformat/avro/AvroIngestionSchemaValidator.java", "diffHunk": "@@ -111,36 +112,56 @@ private void validateSchemas() {\n           }\n         }\n         if (nonNullSchema != null) {\n+          avroColumnSchema = nonNullSchema;\n           avroColumnType = nonNullSchema.getType();\n         }\n       }\n \n-      if (!fieldSpec.getDataType().name().equalsIgnoreCase(avroColumnType.toString())) {\n-        _dataTypeMismatch.addMismatchReason(String\n-            .format(\"The Pinot column: (%s: %s) doesn't match with the column (%s: %s) in input %s schema.\", columnName,\n-                fieldSpec.getDataType().name(), avroColumnSchema.getName(), avroColumnType.toString(),\n-                getInputSchemaType()));\n-      }\n-\n       if (fieldSpec.isSingleValueField()) {\n+        // check data type mismatch\n+        if (!fieldSpec.getDataType().name().equalsIgnoreCase(avroColumnType.toString())) {\n+          getDataTypeMismatchResult().addMismatchReason(String", "originalCommit": "f09ca9aecd95080949422b302d9f6870f8c033f0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU4MzMxNQ==", "url": "https://github.com/apache/pinot/pull/6009#discussion_r487583315", "body": "(nit)\r\n```suggestion\r\n        if (!fieldSpec.getDataType().name().equals(avroColumnType.name())) {\r\n```", "bodyText": "(nit)\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (!fieldSpec.getDataType().name().equalsIgnoreCase(avroColumnType.toString())) {\n          \n          \n            \n                    if (!fieldSpec.getDataType().name().equals(avroColumnType.name())) {", "bodyHTML": "<p dir=\"auto\">(nit)</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">if</span> (<span class=\"pl-k\">!</span>fieldSpec<span class=\"pl-k\">.</span>getDataType()<span class=\"pl-k\">.</span>name()<span class=\"pl-k\">.</span><span class=\"x x-first x-last\">equalsIgnoreCase</span>(avroColumnType<span class=\"pl-k\">.</span><span class=\"x x-first x-last\">toString</span>())) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">if</span> (<span class=\"pl-k\">!</span>fieldSpec<span class=\"pl-k\">.</span>getDataType()<span class=\"pl-k\">.</span>name()<span class=\"pl-k\">.</span><span class=\"x x-first x-last\">equals</span>(avroColumnType<span class=\"pl-k\">.</span><span class=\"x x-first x-last\">name</span>())) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "Jackie-Jiang", "createdAt": "2020-09-13T22:08:53Z", "path": "pinot-plugins/pinot-input-format/pinot-avro-base/src/main/java/org/apache/pinot/plugin/inputformat/avro/AvroIngestionSchemaValidator.java", "diffHunk": "@@ -111,36 +112,56 @@ private void validateSchemas() {\n           }\n         }\n         if (nonNullSchema != null) {\n+          avroColumnSchema = nonNullSchema;\n           avroColumnType = nonNullSchema.getType();\n         }\n       }\n \n-      if (!fieldSpec.getDataType().name().equalsIgnoreCase(avroColumnType.toString())) {\n-        _dataTypeMismatch.addMismatchReason(String\n-            .format(\"The Pinot column: (%s: %s) doesn't match with the column (%s: %s) in input %s schema.\", columnName,\n-                fieldSpec.getDataType().name(), avroColumnSchema.getName(), avroColumnType.toString(),\n-                getInputSchemaType()));\n-      }\n-\n       if (fieldSpec.isSingleValueField()) {\n+        // check data type mismatch\n+        if (!fieldSpec.getDataType().name().equalsIgnoreCase(avroColumnType.toString())) {", "originalCommit": "f09ca9aecd95080949422b302d9f6870f8c033f0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU4MzYwNA==", "url": "https://github.com/apache/pinot/pull/6009#discussion_r487583604", "body": "You might want to check single-value multi-value mismatch first, then check data type based on whether they match, or you will always get data type mismatch if single-value multi-value does not match", "bodyText": "You might want to check single-value multi-value mismatch first, then check data type based on whether they match, or you will always get data type mismatch if single-value multi-value does not match", "bodyHTML": "<p dir=\"auto\">You might want to check single-value multi-value mismatch first, then check data type based on whether they match, or you will always get data type mismatch if single-value multi-value does not match</p>", "author": "Jackie-Jiang", "createdAt": "2020-09-13T22:11:29Z", "path": "pinot-plugins/pinot-input-format/pinot-avro-base/src/main/java/org/apache/pinot/plugin/inputformat/avro/AvroIngestionSchemaValidator.java", "diffHunk": "@@ -111,36 +112,56 @@ private void validateSchemas() {\n           }\n         }\n         if (nonNullSchema != null) {\n+          avroColumnSchema = nonNullSchema;\n           avroColumnType = nonNullSchema.getType();\n         }\n       }\n \n-      if (!fieldSpec.getDataType().name().equalsIgnoreCase(avroColumnType.toString())) {\n-        _dataTypeMismatch.addMismatchReason(String\n-            .format(\"The Pinot column: (%s: %s) doesn't match with the column (%s: %s) in input %s schema.\", columnName,\n-                fieldSpec.getDataType().name(), avroColumnSchema.getName(), avroColumnType.toString(),\n-                getInputSchemaType()));\n-      }\n-\n       if (fieldSpec.isSingleValueField()) {\n+        // check data type mismatch\n+        if (!fieldSpec.getDataType().name().equalsIgnoreCase(avroColumnType.toString())) {\n+          getDataTypeMismatchResult().addMismatchReason(String\n+              .format(\"The Pinot column: (%s: %s) doesn't match with the column (%s: %s) in input %s schema.\", columnName,\n+                  fieldSpec.getDataType().name(), avroColumnName, avroColumnType.toString(),\n+                  getInputSchemaType()));\n+        }\n+        // check single-value multi-value mismatch\n         if (avroColumnType.ordinal() < org.apache.avro.Schema.Type.STRING.ordinal()) {", "originalCommit": "f09ca9aecd95080949422b302d9f6870f8c033f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE4NTA4Mw==", "url": "https://github.com/apache/pinot/pull/6009#discussion_r488185083", "bodyText": "In terms of the data type, we can use AvroUtils.extractFieldDataType(avroColumnField); to get the data type from the deepest element of AVRO data, then we compare it with the one in Pinot schema.", "author": "jackjlli", "createdAt": "2020-09-14T19:57:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU4MzYwNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU4MzcxMw==", "url": "https://github.com/apache/pinot/pull/6009#discussion_r487583713", "body": "```suggestion\r\n                  fieldSpec.getDataType().name(), avroColumnName, avroColumnType.name(),\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                              fieldSpec.getDataType().name(), avroColumnName, avroColumnType.toString(),\n          \n          \n            \n                              fieldSpec.getDataType().name(), avroColumnName, avroColumnType.name(),", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                  fieldSpec<span class=\"pl-k\">.</span>getDataType()<span class=\"pl-k\">.</span>name(), avroColumnName, avroColumnType<span class=\"pl-k\">.</span><span class=\"x x-first x-last\">toString</span>(),</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                  fieldSpec<span class=\"pl-k\">.</span>getDataType()<span class=\"pl-k\">.</span>name(), avroColumnName, avroColumnType<span class=\"pl-k\">.</span><span class=\"x x-first x-last\">name</span>(),</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "Jackie-Jiang", "createdAt": "2020-09-13T22:12:42Z", "path": "pinot-plugins/pinot-input-format/pinot-avro-base/src/main/java/org/apache/pinot/plugin/inputformat/avro/AvroIngestionSchemaValidator.java", "diffHunk": "@@ -111,36 +112,56 @@ private void validateSchemas() {\n           }\n         }\n         if (nonNullSchema != null) {\n+          avroColumnSchema = nonNullSchema;\n           avroColumnType = nonNullSchema.getType();\n         }\n       }\n \n-      if (!fieldSpec.getDataType().name().equalsIgnoreCase(avroColumnType.toString())) {\n-        _dataTypeMismatch.addMismatchReason(String\n-            .format(\"The Pinot column: (%s: %s) doesn't match with the column (%s: %s) in input %s schema.\", columnName,\n-                fieldSpec.getDataType().name(), avroColumnSchema.getName(), avroColumnType.toString(),\n-                getInputSchemaType()));\n-      }\n-\n       if (fieldSpec.isSingleValueField()) {\n+        // check data type mismatch\n+        if (!fieldSpec.getDataType().name().equalsIgnoreCase(avroColumnType.toString())) {\n+          getDataTypeMismatchResult().addMismatchReason(String\n+              .format(\"The Pinot column: (%s: %s) doesn't match with the column (%s: %s) in input %s schema.\", columnName,\n+                  fieldSpec.getDataType().name(), avroColumnName, avroColumnType.toString(),", "originalCommit": "f09ca9aecd95080949422b302d9f6870f8c033f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEyOTc5Mg==", "url": "https://github.com/apache/pinot/pull/6009#discussion_r488129792", "bodyText": "Is this called before or after the ingestion transformation functions? For example, an ingestion transform function could change the name/type of data in input?", "author": "mayankshriv", "createdAt": "2020-09-14T18:15:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU4MzcxMw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE0MTE2OA==", "url": "https://github.com/apache/pinot/pull/6009#discussion_r488141168", "bodyText": "This is called only once in init() method of SegmentIndexCreationDriver class before any transformation function gets called.", "author": "jackjlli", "createdAt": "2020-09-14T18:35:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU4MzcxMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU4Mzk3MA==", "url": "https://github.com/apache/pinot/pull/6009#discussion_r487583970", "body": "Same here, check SV MV first, then based on that check the data type", "bodyText": "Same here, check SV MV first, then based on that check the data type", "bodyHTML": "<p dir=\"auto\">Same here, check SV MV first, then based on that check the data type</p>", "author": "Jackie-Jiang", "createdAt": "2020-09-13T22:15:03Z", "path": "pinot-plugins/pinot-input-format/pinot-avro-base/src/main/java/org/apache/pinot/plugin/inputformat/avro/AvroIngestionSchemaValidator.java", "diffHunk": "@@ -111,36 +112,56 @@ private void validateSchemas() {\n           }\n         }\n         if (nonNullSchema != null) {\n+          avroColumnSchema = nonNullSchema;\n           avroColumnType = nonNullSchema.getType();\n         }\n       }\n \n-      if (!fieldSpec.getDataType().name().equalsIgnoreCase(avroColumnType.toString())) {\n-        _dataTypeMismatch.addMismatchReason(String\n-            .format(\"The Pinot column: (%s: %s) doesn't match with the column (%s: %s) in input %s schema.\", columnName,\n-                fieldSpec.getDataType().name(), avroColumnSchema.getName(), avroColumnType.toString(),\n-                getInputSchemaType()));\n-      }\n-\n       if (fieldSpec.isSingleValueField()) {\n+        // check data type mismatch\n+        if (!fieldSpec.getDataType().name().equalsIgnoreCase(avroColumnType.toString())) {\n+          getDataTypeMismatchResult().addMismatchReason(String\n+              .format(\"The Pinot column: (%s: %s) doesn't match with the column (%s: %s) in input %s schema.\", columnName,\n+                  fieldSpec.getDataType().name(), avroColumnName, avroColumnType.toString(),\n+                  getInputSchemaType()));\n+        }\n+        // check single-value multi-value mismatch\n         if (avroColumnType.ordinal() < org.apache.avro.Schema.Type.STRING.ordinal()) {\n           // the column is a complex structure\n-          _singleValueMultiValueFieldMismatch.addMismatchReason(String.format(\n-              \"The Pinot column: %s is 'single-value' column but the column: %s from input %s is 'multi-value' column.\",\n-              columnName, avroColumnSchema.getName(), getInputSchemaType()));\n+          getSingleValueMultiValueFieldMismatchResult().addMismatchReason(String\n+              .format(\n+                  \"The Pinot column: %s is 'single-value' column but the column: %s from input %s is 'multi-value' column.\",\n+                  columnName, avroColumnName, getInputSchemaType()));\n         }\n       } else {\n+        // check data type mismatch", "originalCommit": "f09ca9aecd95080949422b302d9f6870f8c033f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE5MjU5MQ==", "url": "https://github.com/apache/pinot/pull/6009#discussion_r488192591", "bodyText": "Done.", "author": "jackjlli", "createdAt": "2020-09-14T20:12:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU4Mzk3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU4NDE2Nw==", "url": "https://github.com/apache/pinot/pull/6009#discussion_r487584167", "body": "(nit) cache `avroColumnSchema.getElementType().getType()` in a local variable?", "bodyText": "(nit) cache avroColumnSchema.getElementType().getType() in a local variable?", "bodyHTML": "<p dir=\"auto\">(nit) cache <code>avroColumnSchema.getElementType().getType()</code> in a local variable?</p>", "author": "Jackie-Jiang", "createdAt": "2020-09-13T22:17:09Z", "path": "pinot-plugins/pinot-input-format/pinot-avro-base/src/main/java/org/apache/pinot/plugin/inputformat/avro/AvroIngestionSchemaValidator.java", "diffHunk": "@@ -111,36 +112,56 @@ private void validateSchemas() {\n           }\n         }\n         if (nonNullSchema != null) {\n+          avroColumnSchema = nonNullSchema;\n           avroColumnType = nonNullSchema.getType();\n         }\n       }\n \n-      if (!fieldSpec.getDataType().name().equalsIgnoreCase(avroColumnType.toString())) {\n-        _dataTypeMismatch.addMismatchReason(String\n-            .format(\"The Pinot column: (%s: %s) doesn't match with the column (%s: %s) in input %s schema.\", columnName,\n-                fieldSpec.getDataType().name(), avroColumnSchema.getName(), avroColumnType.toString(),\n-                getInputSchemaType()));\n-      }\n-\n       if (fieldSpec.isSingleValueField()) {\n+        // check data type mismatch\n+        if (!fieldSpec.getDataType().name().equalsIgnoreCase(avroColumnType.toString())) {\n+          getDataTypeMismatchResult().addMismatchReason(String\n+              .format(\"The Pinot column: (%s: %s) doesn't match with the column (%s: %s) in input %s schema.\", columnName,\n+                  fieldSpec.getDataType().name(), avroColumnName, avroColumnType.toString(),\n+                  getInputSchemaType()));\n+        }\n+        // check single-value multi-value mismatch\n         if (avroColumnType.ordinal() < org.apache.avro.Schema.Type.STRING.ordinal()) {\n           // the column is a complex structure\n-          _singleValueMultiValueFieldMismatch.addMismatchReason(String.format(\n-              \"The Pinot column: %s is 'single-value' column but the column: %s from input %s is 'multi-value' column.\",\n-              columnName, avroColumnSchema.getName(), getInputSchemaType()));\n+          getSingleValueMultiValueFieldMismatchResult().addMismatchReason(String\n+              .format(\n+                  \"The Pinot column: %s is 'single-value' column but the column: %s from input %s is 'multi-value' column.\",\n+                  columnName, avroColumnName, getInputSchemaType()));\n         }\n       } else {\n+        // check data type mismatch\n+        FieldSpec.DataType dataTypeForMVColumn = AvroUtils.extractFieldDataType(avroColumnField);\n+        if (fieldSpec.getDataType() != dataTypeForMVColumn) {\n+          getDataTypeMismatchResult().addMismatchReason(String\n+              .format(\"The Pinot column: (%s: %s) doesn't match with the column (%s: %s) in input %s schema.\",\n+                  columnName, fieldSpec.getDataType().name(), avroColumnName, dataTypeForMVColumn.name(),\n+                  getInputSchemaType()));\n+        }\n+        // check single-value multi-value mismatch\n         if (avroColumnType.ordinal() >= org.apache.avro.Schema.Type.STRING.ordinal()) {\n           // the column is a complex structure\n-          _singleValueMultiValueFieldMismatch.addMismatchReason(String.format(\n-              \"The Pinot column: %s is 'multi-value' column but the column: %s from input %s schema is 'single-value' column.\",\n-              columnName, avroColumnSchema.getName(), getInputSchemaType()));\n+          getSingleValueMultiValueFieldMismatchResult().addMismatchReason(String\n+              .format(\n+                  \"The Pinot column: %s is 'multi-value' column but the column: %s from input %s schema is 'single-value' column.\",\n+                  columnName, avroColumnName, getInputSchemaType()));\n         }\n+        // check multi-value column structure mismatch\n         if (avroColumnType != org.apache.avro.Schema.Type.ARRAY) {\n           // multi-value column should use array structure for now.\n-          _multiValueStructureMismatch.addMismatchReason(String.format(\n+          getMultiValueStructureMismatchResult().addMismatchReason(String.format(\n               \"The Pinot column: %s is 'multi-value' column but the column: %s from input %s schema is of '%s' type, which should have been of 'array' type.\",\n-              columnName, avroColumnSchema.getName(), getInputSchemaType(), avroColumnType.getName()));\n+              columnName, avroColumnName, getInputSchemaType(), avroColumnType.getName()));\n+        } else if (avroColumnSchema.getElementType().getType().ordinal() < org.apache.avro.Schema.Type.STRING", "originalCommit": "f09ca9aecd95080949422b302d9f6870f8c033f0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE5MjYyNw==", "url": "https://github.com/apache/pinot/pull/6009#discussion_r488192627", "bodyText": "Done.", "author": "jackjlli", "createdAt": "2020-09-14T20:12:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzU4NDE2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA3ODQ1Nw==", "url": "https://github.com/apache/pinot/pull/6009#discussion_r488078457", "body": "Can you update the comment in line 134 to be clearer, or just remove the comment, since the format string below says exactly what the mismatch is.", "bodyText": "Can you update the comment in line 134 to be clearer, or just remove the comment, since the format string below says exactly what the mismatch is.", "bodyHTML": "<p dir=\"auto\">Can you update the comment in line 134 to be clearer, or just remove the comment, since the format string below says exactly what the mismatch is.</p>", "author": "mcvsubbu", "createdAt": "2020-09-14T16:48:11Z", "path": "pinot-plugins/pinot-input-format/pinot-avro-base/src/main/java/org/apache/pinot/plugin/inputformat/avro/AvroIngestionSchemaValidator.java", "diffHunk": "@@ -111,36 +112,56 @@ private void validateSchemas() {\n           }\n         }\n         if (nonNullSchema != null) {\n+          avroColumnSchema = nonNullSchema;\n           avroColumnType = nonNullSchema.getType();\n         }\n       }\n \n-      if (!fieldSpec.getDataType().name().equalsIgnoreCase(avroColumnType.toString())) {\n-        _dataTypeMismatch.addMismatchReason(String\n-            .format(\"The Pinot column: (%s: %s) doesn't match with the column (%s: %s) in input %s schema.\", columnName,\n-                fieldSpec.getDataType().name(), avroColumnSchema.getName(), avroColumnType.toString(),\n-                getInputSchemaType()));\n-      }\n-\n       if (fieldSpec.isSingleValueField()) {\n+        // check data type mismatch\n+        if (!fieldSpec.getDataType().name().equalsIgnoreCase(avroColumnType.toString())) {\n+          getDataTypeMismatchResult().addMismatchReason(String\n+              .format(\"The Pinot column: (%s: %s) doesn't match with the column (%s: %s) in input %s schema.\", columnName,\n+                  fieldSpec.getDataType().name(), avroColumnName, avroColumnType.toString(),\n+                  getInputSchemaType()));\n+        }\n+        // check single-value multi-value mismatch\n         if (avroColumnType.ordinal() < org.apache.avro.Schema.Type.STRING.ordinal()) {\n           // the column is a complex structure\n-          _singleValueMultiValueFieldMismatch.addMismatchReason(String.format(\n-              \"The Pinot column: %s is 'single-value' column but the column: %s from input %s is 'multi-value' column.\",\n-              columnName, avroColumnSchema.getName(), getInputSchemaType()));\n+          getSingleValueMultiValueFieldMismatchResult().addMismatchReason(String\n+              .format(\n+                  \"The Pinot column: %s is 'single-value' column but the column: %s from input %s is 'multi-value' column.\",\n+                  columnName, avroColumnName, getInputSchemaType()));\n         }\n       } else {\n+        // check data type mismatch\n+        FieldSpec.DataType dataTypeForMVColumn = AvroUtils.extractFieldDataType(avroColumnField);\n+        if (fieldSpec.getDataType() != dataTypeForMVColumn) {\n+          getDataTypeMismatchResult().addMismatchReason(String\n+              .format(\"The Pinot column: (%s: %s) doesn't match with the column (%s: %s) in input %s schema.\",\n+                  columnName, fieldSpec.getDataType().name(), avroColumnName, dataTypeForMVColumn.name(),\n+                  getInputSchemaType()));\n+        }\n+        // check single-value multi-value mismatch\n         if (avroColumnType.ordinal() >= org.apache.avro.Schema.Type.STRING.ordinal()) {\n           // the column is a complex structure\n-          _singleValueMultiValueFieldMismatch.addMismatchReason(String.format(\n-              \"The Pinot column: %s is 'multi-value' column but the column: %s from input %s schema is 'single-value' column.\",\n-              columnName, avroColumnSchema.getName(), getInputSchemaType()));\n+          getSingleValueMultiValueFieldMismatchResult().addMismatchReason(String", "originalCommit": "f09ca9aecd95080949422b302d9f6870f8c033f0", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "8b4841efc1f793f365ff1437d2e4149d097de481", "url": "https://github.com/apache/pinot/commit/8b4841efc1f793f365ff1437d2e4149d097de481", "message": "Address PR comments", "committedDate": "2020-09-14T20:01:11Z", "type": "commit"}, {"oid": "8b4841efc1f793f365ff1437d2e4149d097de481", "url": "https://github.com/apache/pinot/commit/8b4841efc1f793f365ff1437d2e4149d097de481", "message": "Address PR comments", "committedDate": "2020-09-14T20:01:11Z", "type": "forcePushed"}]}