{"pr_number": 5176, "pr_title": "Make text index query cache a configurable option", "pr_author": "siddharthteotia", "pr_createdAt": "2020-03-24T05:57:57Z", "pr_url": "https://github.com/apache/pinot/pull/5176", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM1MTE0OA==", "url": "https://github.com/apache/pinot/pull/5176#discussion_r397351148", "body": "I'll suggest using \r\n`!textIndexProperties.get(FieldConfig.LUCENE_TEXT_INDEX_ENABLE_QUERY_CACHE).equalsIgnoreCase(\"true\")` instead of `false`, in case someone mis-spells the value.", "bodyText": "I'll suggest using\n!textIndexProperties.get(FieldConfig.LUCENE_TEXT_INDEX_ENABLE_QUERY_CACHE).equalsIgnoreCase(\"true\") instead of false, in case someone mis-spells the value.", "bodyHTML": "<p dir=\"auto\">I'll suggest using<br>\n<code>!textIndexProperties.get(FieldConfig.LUCENE_TEXT_INDEX_ENABLE_QUERY_CACHE).equalsIgnoreCase(\"true\")</code> instead of <code>false</code>, in case someone mis-spells the value.</p>", "author": "jackjlli", "createdAt": "2020-03-24T17:53:39Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/text/LuceneTextIndexReader.java", "diffHunk": "@@ -59,17 +62,22 @@\n    * similar to how it is done for other types of indexes.\n    * @param column column name\n    * @param segmentIndexDir segment index directory\n+   * @param textIndexProperties text index properties\n    */\n-  public LuceneTextIndexReader(String column, File segmentIndexDir) {\n+  public LuceneTextIndexReader(String column, File segmentIndexDir, @Nullable Map<String, String> textIndexProperties) {\n     _column = column;\n     try {\n       File indexFile = getTextIndexFile(segmentIndexDir);\n       _indexDirectory = FSDirectory.open(indexFile.toPath());\n       _indexReader = DirectoryReader.open(_indexDirectory);\n       _indexSearcher = new IndexSearcher(_indexReader);\n-      // Disable Lucene query result cache. While it helps a lot with performance for\n-      // repeated queries, on the downside it cause heap issues.\n-      _indexSearcher.setQueryCache(null);\n+      if (textIndexProperties == null ||\n+          textIndexProperties.get(FieldConfig.LUCENE_TEXT_INDEX_ENABLE_QUERY_CACHE) == null ||\n+          textIndexProperties.get(FieldConfig.LUCENE_TEXT_INDEX_ENABLE_QUERY_CACHE).equalsIgnoreCase(\"false\")) {", "originalCommit": "6dcae80f3491216fefb94715b7119a5b45f70601", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzE4MDI1Mw==", "url": "https://github.com/apache/pinot/pull/5176#discussion_r403180253", "bodyText": "done", "author": "siddharthteotia", "createdAt": "2020-04-03T17:37:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM1MTE0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM1MTgzOQ==", "url": "https://github.com/apache/pinot/pull/5176#discussion_r397351839", "body": "Put a comment above this line on how this cached will be used.", "bodyText": "Put a comment above this line on how this cached will be used.", "bodyHTML": "<p dir=\"auto\">Put a comment above this line on how this cached will be used.</p>", "author": "jackjlli", "createdAt": "2020-03-24T17:54:39Z", "path": "pinot-common/src/main/java/org/apache/pinot/common/config/FieldConfig.java", "diffHunk": "@@ -32,9 +32,12 @@\n \n   public static String BLOOM_FILTER_COLUMN_KEY = \"field.config.bloom.filter\";\n   public static String ON_HEAP_DICTIONARY_COLUMN_KEY = \"field.config.onheap.dictionary\";\n-  public static String TEXT_INDEX_REALTIME_READER_REFRESH_KEY = \"field.config.realtime.reader.refresh\";\n   public static String VAR_LENGTH_DICTIONARY_COLUMN_KEY = \"field.config.var.length.dictionary\";\n \n+  // Lucene index properties\n+  public static String LUCENE_TEXT_INDEX_REALTIME_READER_REFRESH_KEY = \"field.config.text.index.realtime.reader.refresh\";\n+  public static String LUCENE_TEXT_INDEX_ENABLE_QUERY_CACHE = \"field.config.text.index.enable.query.cache\";", "originalCommit": "6dcae80f3491216fefb94715b7119a5b45f70601", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzE4MDMwNg==", "url": "https://github.com/apache/pinot/pull/5176#discussion_r403180306", "bodyText": "done", "author": "siddharthteotia", "createdAt": "2020-04-03T17:37:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM1MTgzOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM1MjU3Nw==", "url": "https://github.com/apache/pinot/pull/5176#discussion_r397352577", "body": "putIfAbsent", "bodyText": "putIfAbsent", "bodyHTML": "<p dir=\"auto\">putIfAbsent</p>", "author": "jackjlli", "createdAt": "2020-03-24T17:55:49Z", "path": "pinot-core/src/test/java/org/apache/pinot/queries/TestTextSearchQueries.java", "diffHunk": "@@ -160,7 +162,11 @@ private void createSegment()\n   private void loadSegment()\n       throws Exception {\n     IndexLoadingConfig indexLoadingConfig = new IndexLoadingConfig();\n-    indexLoadingConfig.setTextIndexColumns(new HashSet<>(textIndexColumns));\n+    Map<String, Map<String, String>> textIndexColumnsWithProperties = new HashMap<>();\n+    for (String column : textIndexColumns) {", "originalCommit": "6dcae80f3491216fefb94715b7119a5b45f70601", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzE4MjkwNA==", "url": "https://github.com/apache/pinot/pull/5176#discussion_r403182904", "bodyText": "this change not needed anymore", "author": "siddharthteotia", "createdAt": "2020-04-03T17:40:27Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM1MjU3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM4MDk5Nw==", "url": "https://github.com/apache/pinot/pull/5176#discussion_r397380997", "body": "Not related to this but can we remove the `field.config.` prefix from all these keys?", "bodyText": "Not related to this but can we remove the field.config. prefix from all these keys?", "bodyHTML": "<p dir=\"auto\">Not related to this but can we remove the <code>field.config.</code> prefix from all these keys?</p>", "author": "Jackie-Jiang", "createdAt": "2020-03-24T18:41:56Z", "path": "pinot-common/src/main/java/org/apache/pinot/common/config/FieldConfig.java", "diffHunk": "@@ -32,9 +32,12 @@\n \n   public static String BLOOM_FILTER_COLUMN_KEY = \"field.config.bloom.filter\";\n   public static String ON_HEAP_DICTIONARY_COLUMN_KEY = \"field.config.onheap.dictionary\";\n-  public static String TEXT_INDEX_REALTIME_READER_REFRESH_KEY = \"field.config.realtime.reader.refresh\";\n   public static String VAR_LENGTH_DICTIONARY_COLUMN_KEY = \"field.config.var.length.dictionary\";\n \n+  // Lucene index properties\n+  public static String LUCENE_TEXT_INDEX_REALTIME_READER_REFRESH_KEY = \"field.config.text.index.realtime.reader.refresh\";", "originalCommit": "6dcae80f3491216fefb94715b7119a5b45f70601", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzE4MDQxNg==", "url": "https://github.com/apache/pinot/pull/5176#discussion_r403180416", "bodyText": "done", "author": "siddharthteotia", "createdAt": "2020-04-03T17:37:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM4MDk5Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM4Mzk0OA==", "url": "https://github.com/apache/pinot/pull/5176#discussion_r397383948", "body": "Don't put the whole map here. The map contains all the properties, not for text column only. I think you can keep this config unchanged, but check the field config when loading the text index.", "bodyText": "Don't put the whole map here. The map contains all the properties, not for text column only. I think you can keep this config unchanged, but check the field config when loading the text index.", "bodyHTML": "<p dir=\"auto\">Don't put the whole map here. The map contains all the properties, not for text column only. I think you can keep this config unchanged, but check the field config when loading the text index.</p>", "author": "Jackie-Jiang", "createdAt": "2020-03-24T18:47:01Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/loader/IndexLoadingConfig.java", "diffHunk": "@@ -45,7 +45,7 @@\n   private ReadMode _readMode = ReadMode.DEFAULT_MODE;\n   private List<String> _sortedColumns = Collections.emptyList();\n   private Set<String> _invertedIndexColumns = new HashSet<>();\n-  private Set<String> _textIndexColumns = new HashSet<>();\n+  private Map<String, Map<String, String>> _textIndexColumns = new HashMap<>();", "originalCommit": "6dcae80f3491216fefb94715b7119a5b45f70601", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzE4MDk3MQ==", "url": "https://github.com/apache/pinot/pull/5176#discussion_r403180971", "bodyText": "Done. Btw, FieldConfig contains a properties map Map<String, String> per column", "author": "siddharthteotia", "createdAt": "2020-04-03T17:38:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM4Mzk0OA=="}], "type": "inlineReview"}, {"oid": "ec311dc007555e65d3dddd46c35a3699b3614605", "url": "https://github.com/apache/pinot/commit/ec311dc007555e65d3dddd46c35a3699b3614605", "message": "Make text index query cache a configurable option", "committedDate": "2020-04-03T17:36:14Z", "type": "commit"}, {"oid": "ec311dc007555e65d3dddd46c35a3699b3614605", "url": "https://github.com/apache/pinot/commit/ec311dc007555e65d3dddd46c35a3699b3614605", "message": "Make text index query cache a configurable option", "committedDate": "2020-04-03T17:36:14Z", "type": "forcePushed"}, {"oid": "96a8d01e44e3beef62d7a30164268bd258b166c4", "url": "https://github.com/apache/pinot/commit/96a8d01e44e3beef62d7a30164268bd258b166c4", "message": "Fix doc", "committedDate": "2020-04-03T18:10:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQxMDA3OQ==", "url": "https://github.com/apache/pinot/pull/5176#discussion_r403410079", "body": "```suggestion\r\n      if (textIndexProperties == null || !Boolean.parseBoolean(textIndexProperties.get(FieldConfig.TEXT_INDEX_ENABLE_QUERY_CACHE))) {\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  if (textIndexProperties == null || textIndexProperties.get(FieldConfig.TEXT_INDEX_ENABLE_QUERY_CACHE) == null\n          \n          \n            \n                  if (textIndexProperties == null || !Boolean.parseBoolean(textIndexProperties.get(FieldConfig.TEXT_INDEX_ENABLE_QUERY_CACHE))) {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">      <span class=\"pl-k\">if</span> (textIndexProperties <span class=\"pl-k\">==</span> <span class=\"pl-c1\">null</span> <span class=\"pl-k\">||</span> textIndexProperties<span class=\"pl-k\">.</span>get(<span class=\"pl-smi\">FieldConfig</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>TEXT_INDEX_ENABLE_QUERY_CACHE</span>)<span class=\"x x-first\"> </span><span class=\"pl-k x\">==</span><span class=\"x\"> </span><span class=\"pl-c1 x x-last\">null</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">      <span class=\"pl-k\">if</span> (textIndexProperties <span class=\"pl-k\">==</span> <span class=\"pl-c1\">null</span> <span class=\"pl-k\">||</span> <span class=\"pl-k x x-first\">!</span><span class=\"pl-smi x\">Boolean</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">parseBoolean(</span>textIndexProperties<span class=\"pl-k\">.</span>get(<span class=\"pl-smi\">FieldConfig</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>TEXT_INDEX_ENABLE_QUERY_CACHE</span>)<span class=\"x x-first x-last\">)) {</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "Jackie-Jiang", "createdAt": "2020-04-04T02:11:29Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/readers/text/LuceneTextIndexReader.java", "diffHunk": "@@ -67,16 +69,20 @@\n    * @param indexDir segment index directory\n    * @param numDocs number of documents in the segment\n    */\n-  public LuceneTextIndexReader(String column, File indexDir, int numDocs) {\n+  public LuceneTextIndexReader(String column, File indexDir, int numDocs,\n+      @Nullable Map<String, String> textIndexProperties) {\n     _column = column;\n     try {\n       File indexFile = getTextIndexFile(indexDir);\n       _indexDirectory = FSDirectory.open(indexFile.toPath());\n       _indexReader = DirectoryReader.open(_indexDirectory);\n       _indexSearcher = new IndexSearcher(_indexReader);\n-      // Disable Lucene query result cache. While it helps a lot with performance for\n-      // repeated queries, on the downside it cause heap issues.\n-      _indexSearcher.setQueryCache(null);\n+      if (textIndexProperties == null || textIndexProperties.get(FieldConfig.TEXT_INDEX_ENABLE_QUERY_CACHE) == null", "originalCommit": "96a8d01e44e3beef62d7a30164268bd258b166c4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI4MjIzNA==", "url": "https://github.com/apache/pinot/pull/5176#discussion_r404282234", "bodyText": "done", "author": "siddharthteotia", "createdAt": "2020-04-06T17:57:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQxMDA3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQxMDkxMw==", "url": "https://github.com/apache/pinot/pull/5176#discussion_r403410913", "body": "Suggest renaming it to `_columnProperties`. Also don't set it inside the `extractTextIndexColumnsFromTableConfig()`, set it in `extractFromTableConfig()` so that other index type can also access it.", "bodyText": "Suggest renaming it to _columnProperties. Also don't set it inside the extractTextIndexColumnsFromTableConfig(), set it in extractFromTableConfig() so that other index type can also access it.", "bodyHTML": "<p dir=\"auto\">Suggest renaming it to <code>_columnProperties</code>. Also don't set it inside the <code>extractTextIndexColumnsFromTableConfig()</code>, set it in <code>extractFromTableConfig()</code> so that other index type can also access it.</p>", "author": "Jackie-Jiang", "createdAt": "2020-04-04T02:19:31Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/segment/index/loader/IndexLoadingConfig.java", "diffHunk": "@@ -60,6 +60,9 @@\n   private boolean _isDirectRealtimeOffheapAllocation;\n   private boolean _enableSplitCommitEndWithMetadata;\n \n+  // constructed from FieldConfig\n+  private Map<String, Map<String, String>> _columnsWithProperties;", "originalCommit": "96a8d01e44e3beef62d7a30164268bd258b166c4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDI4MjIxOA==", "url": "https://github.com/apache/pinot/pull/5176#discussion_r404282218", "bodyText": "done", "author": "siddharthteotia", "createdAt": "2020-04-06T17:57:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzQxMDkxMw=="}], "type": "inlineReview"}, {"oid": "0a5c8a649321494ca3b4193d07aa95ac44585d56", "url": "https://github.com/apache/pinot/commit/0a5c8a649321494ca3b4193d07aa95ac44585d56", "message": "Fix tests", "committedDate": "2020-04-06T17:36:07Z", "type": "commit"}, {"oid": "1e5f276028df4e2fd1a174b45f2fc056b77e6a1f", "url": "https://github.com/apache/pinot/commit/1e5f276028df4e2fd1a174b45f2fc056b77e6a1f", "message": "format", "committedDate": "2020-04-06T17:38:08Z", "type": "commit"}]}