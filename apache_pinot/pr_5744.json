{"pr_number": 5744, "pr_title": "[Part 2] Add geo support  - add a geo aggregate function st_union", "pr_author": "yupeng9", "pr_createdAt": "2020-07-23T19:06:14Z", "pr_url": "https://github.com/apache/pinot/pull/5744", "timeline": [{"oid": "5455cf9231728d42523936c958ab451a5ee65cdd", "url": "https://github.com/apache/pinot/commit/5455cf9231728d42523936c958ab451a5ee65cdd", "message": "add geo aggregate function", "committedDate": "2020-07-23T18:48:05Z", "type": "commit"}, {"oid": "29fad24161ca13df58876766893f3c5cfdfdbca1", "url": "https://github.com/apache/pinot/commit/29fad24161ca13df58876766893f3c5cfdfdbca1", "message": "style", "committedDate": "2020-07-23T19:07:38Z", "type": "commit"}, {"oid": "6baf45ab4cf580d34c2420fe8a837ada1df915b6", "url": "https://github.com/apache/pinot/commit/6baf45ab4cf580d34c2420fe8a837ada1df915b6", "message": "add header", "committedDate": "2020-07-23T20:14:45Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyNDAyNA==", "url": "https://github.com/apache/pinot/pull/5744#discussion_r461224024", "body": "Can be optimized to reduce the result holder lookup\r\n```suggestion\r\n      Geometry geometry = groupByResultHolder.getResult(groupKey);\r\n      if (geometry != null) {\r\n        geometry.union(value);\r\n      } else {\r\n        groupByResultHolder.setValueForKey(groupKey, value);\r\n      }\r\n```", "bodyText": "Can be optimized to reduce the result holder lookup\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  groupByResultHolder.setValueForKey(groupKey, groupByResultHolder.getResult(groupKey) == null ? value\n          \n          \n            \n                      : ((Geometry) groupByResultHolder.getResult(groupKey)).union(value));\n          \n          \n            \n                  Geometry geometry = groupByResultHolder.getResult(groupKey);\n          \n          \n            \n                  if (geometry != null) {\n          \n          \n            \n                    geometry.union(value);\n          \n          \n            \n                  } else {\n          \n          \n            \n                    groupByResultHolder.setValueForKey(groupKey, value);\n          \n          \n            \n                  }", "bodyHTML": "<p dir=\"auto\">Can be optimized to reduce the result holder lookup</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">      groupByResultHolder<span class=\"pl-k\">.</span>setValueForKey(groupKey, groupByResultHolder<span class=\"pl-k\">.</span>getResult(groupKey) <span class=\"pl-k\">==</span> <span class=\"pl-c1\">null</span> <span class=\"pl-k\">?</span> value</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">          <span class=\"pl-k\">:</span> ((<span class=\"pl-smi\">Geometry</span>) groupByResultHolder<span class=\"pl-k\">.</span>getResult(groupKey))<span class=\"pl-k\">.</span>union(value));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">      <span class=\"pl-smi\">Geometry</span> geometry <span class=\"pl-k\">=</span> groupByResultHolder<span class=\"pl-k\">.</span>getResult(groupKey);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">      <span class=\"pl-k\">if</span> (geometry <span class=\"pl-k\">!=</span> <span class=\"pl-c1\">null</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        geometry<span class=\"pl-k\">.</span>union(value);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">      } <span class=\"pl-k\">else</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        groupByResultHolder<span class=\"pl-k\">.</span>setValueForKey(groupKey, value);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">      }</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "Jackie-Jiang", "createdAt": "2020-07-27T23:17:28Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/function/StUnionAggregationFunction.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.query.aggregation.function;\n+\n+import java.util.Map;\n+import org.apache.pinot.common.function.AggregationFunctionType;\n+import org.apache.pinot.common.utils.DataSchema;\n+import org.apache.pinot.core.common.BlockValSet;\n+import org.apache.pinot.core.geospatial.serde.GeometrySerializer;\n+import org.apache.pinot.core.query.aggregation.AggregationResultHolder;\n+import org.apache.pinot.core.query.aggregation.ObjectAggregationResultHolder;\n+import org.apache.pinot.core.query.aggregation.groupby.GroupByResultHolder;\n+import org.apache.pinot.core.query.aggregation.groupby.ObjectGroupByResultHolder;\n+import org.apache.pinot.core.query.request.context.ExpressionContext;\n+import org.apache.pinot.spi.utils.ByteArray;\n+import org.locationtech.jts.geom.Geometry;\n+\n+\n+public class StUnionAggregationFunction extends BaseSingleInputAggregationFunction<Geometry, ByteArray> {\n+\n+  /**\n+   * Constructor for the class.\n+   *\n+   * @param expression Expression to aggregate on.\n+   */\n+  public StUnionAggregationFunction(ExpressionContext expression) {\n+    super(expression);\n+  }\n+\n+  @Override\n+  public AggregationFunctionType getType() {\n+    return AggregationFunctionType.ST_UNION;\n+  }\n+\n+  @Override\n+  public void accept(AggregationFunctionVisitorBase visitor) {\n+    visitor.visit(this);\n+  }\n+\n+  @Override\n+  public AggregationResultHolder createAggregationResultHolder() {\n+    return new ObjectAggregationResultHolder();\n+  }\n+\n+  @Override\n+  public GroupByResultHolder createGroupByResultHolder(int initialCapacity, int maxCapacity) {\n+    return new ObjectGroupByResultHolder(initialCapacity, maxCapacity);\n+  }\n+\n+  @Override\n+  public void aggregate(int length, AggregationResultHolder aggregationResultHolder,\n+      Map<ExpressionContext, BlockValSet> blockValSetMap) {\n+    byte[][] bytesArray = blockValSetMap.get(_expression).getBytesValuesSV();\n+    Geometry geometry = aggregationResultHolder.getResult();\n+    for (int i = 0; i < length; i++) {\n+      Geometry value = GeometrySerializer.deserialize(bytesArray[i]);\n+      geometry = geometry == null ? value : geometry.union(value);\n+    }\n+    aggregationResultHolder.setValue(geometry);\n+  }\n+\n+  @Override\n+  public void aggregateGroupBySV(int length, int[] groupKeyArray, GroupByResultHolder groupByResultHolder,\n+      Map<ExpressionContext, BlockValSet> blockValSetMap) {\n+    byte[][] bytesArray = blockValSetMap.get(_expression).getBytesValuesSV();\n+    for (int i = 0; i < length; i++) {\n+      int groupKey = groupKeyArray[i];\n+      Geometry value = GeometrySerializer.deserialize(bytesArray[i]);\n+      groupByResultHolder.setValueForKey(groupKey, groupByResultHolder.getResult(groupKey) == null ? value\n+          : ((Geometry) groupByResultHolder.getResult(groupKey)).union(value));", "originalCommit": "6baf45ab4cf580d34c2420fe8a837ada1df915b6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyNDE0Mw==", "url": "https://github.com/apache/pinot/pull/5744#discussion_r461224143", "body": "Same here", "bodyText": "Same here", "bodyHTML": "<p dir=\"auto\">Same here</p>", "author": "Jackie-Jiang", "createdAt": "2020-07-27T23:17:52Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/function/StUnionAggregationFunction.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.query.aggregation.function;\n+\n+import java.util.Map;\n+import org.apache.pinot.common.function.AggregationFunctionType;\n+import org.apache.pinot.common.utils.DataSchema;\n+import org.apache.pinot.core.common.BlockValSet;\n+import org.apache.pinot.core.geospatial.serde.GeometrySerializer;\n+import org.apache.pinot.core.query.aggregation.AggregationResultHolder;\n+import org.apache.pinot.core.query.aggregation.ObjectAggregationResultHolder;\n+import org.apache.pinot.core.query.aggregation.groupby.GroupByResultHolder;\n+import org.apache.pinot.core.query.aggregation.groupby.ObjectGroupByResultHolder;\n+import org.apache.pinot.core.query.request.context.ExpressionContext;\n+import org.apache.pinot.spi.utils.ByteArray;\n+import org.locationtech.jts.geom.Geometry;\n+\n+\n+public class StUnionAggregationFunction extends BaseSingleInputAggregationFunction<Geometry, ByteArray> {\n+\n+  /**\n+   * Constructor for the class.\n+   *\n+   * @param expression Expression to aggregate on.\n+   */\n+  public StUnionAggregationFunction(ExpressionContext expression) {\n+    super(expression);\n+  }\n+\n+  @Override\n+  public AggregationFunctionType getType() {\n+    return AggregationFunctionType.ST_UNION;\n+  }\n+\n+  @Override\n+  public void accept(AggregationFunctionVisitorBase visitor) {\n+    visitor.visit(this);\n+  }\n+\n+  @Override\n+  public AggregationResultHolder createAggregationResultHolder() {\n+    return new ObjectAggregationResultHolder();\n+  }\n+\n+  @Override\n+  public GroupByResultHolder createGroupByResultHolder(int initialCapacity, int maxCapacity) {\n+    return new ObjectGroupByResultHolder(initialCapacity, maxCapacity);\n+  }\n+\n+  @Override\n+  public void aggregate(int length, AggregationResultHolder aggregationResultHolder,\n+      Map<ExpressionContext, BlockValSet> blockValSetMap) {\n+    byte[][] bytesArray = blockValSetMap.get(_expression).getBytesValuesSV();\n+    Geometry geometry = aggregationResultHolder.getResult();\n+    for (int i = 0; i < length; i++) {\n+      Geometry value = GeometrySerializer.deserialize(bytesArray[i]);\n+      geometry = geometry == null ? value : geometry.union(value);\n+    }\n+    aggregationResultHolder.setValue(geometry);\n+  }\n+\n+  @Override\n+  public void aggregateGroupBySV(int length, int[] groupKeyArray, GroupByResultHolder groupByResultHolder,\n+      Map<ExpressionContext, BlockValSet> blockValSetMap) {\n+    byte[][] bytesArray = blockValSetMap.get(_expression).getBytesValuesSV();\n+    for (int i = 0; i < length; i++) {\n+      int groupKey = groupKeyArray[i];\n+      Geometry value = GeometrySerializer.deserialize(bytesArray[i]);\n+      groupByResultHolder.setValueForKey(groupKey, groupByResultHolder.getResult(groupKey) == null ? value\n+          : ((Geometry) groupByResultHolder.getResult(groupKey)).union(value));\n+    }\n+  }\n+\n+  @Override\n+  public void aggregateGroupByMV(int length, int[][] groupKeysArray, GroupByResultHolder groupByResultHolder,\n+      Map<ExpressionContext, BlockValSet> blockValSetMap) {\n+    byte[][] bytesArray = blockValSetMap.get(_expression).getBytesValuesSV();\n+    for (int i = 0; i < length; i++) {\n+      Geometry value = GeometrySerializer.deserialize(bytesArray[i]);\n+      for (int groupKey : groupKeysArray[i]) {\n+        groupByResultHolder.setValueForKey(groupKey, groupByResultHolder.getResult(groupKey) == null ? value", "originalCommit": "6baf45ab4cf580d34c2420fe8a837ada1df915b6", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyNDQzMg==", "url": "https://github.com/apache/pinot/pull/5744#discussion_r461224432", "body": "Need to handle `null` here", "bodyText": "Need to handle null here", "bodyHTML": "<p dir=\"auto\">Need to handle <code>null</code> here</p>", "author": "Jackie-Jiang", "createdAt": "2020-07-27T23:18:49Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/function/StUnionAggregationFunction.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.query.aggregation.function;\n+\n+import java.util.Map;\n+import org.apache.pinot.common.function.AggregationFunctionType;\n+import org.apache.pinot.common.utils.DataSchema;\n+import org.apache.pinot.core.common.BlockValSet;\n+import org.apache.pinot.core.geospatial.serde.GeometrySerializer;\n+import org.apache.pinot.core.query.aggregation.AggregationResultHolder;\n+import org.apache.pinot.core.query.aggregation.ObjectAggregationResultHolder;\n+import org.apache.pinot.core.query.aggregation.groupby.GroupByResultHolder;\n+import org.apache.pinot.core.query.aggregation.groupby.ObjectGroupByResultHolder;\n+import org.apache.pinot.core.query.request.context.ExpressionContext;\n+import org.apache.pinot.spi.utils.ByteArray;\n+import org.locationtech.jts.geom.Geometry;\n+\n+\n+public class StUnionAggregationFunction extends BaseSingleInputAggregationFunction<Geometry, ByteArray> {\n+\n+  /**\n+   * Constructor for the class.\n+   *\n+   * @param expression Expression to aggregate on.\n+   */\n+  public StUnionAggregationFunction(ExpressionContext expression) {\n+    super(expression);\n+  }\n+\n+  @Override\n+  public AggregationFunctionType getType() {\n+    return AggregationFunctionType.ST_UNION;\n+  }\n+\n+  @Override\n+  public void accept(AggregationFunctionVisitorBase visitor) {\n+    visitor.visit(this);\n+  }\n+\n+  @Override\n+  public AggregationResultHolder createAggregationResultHolder() {\n+    return new ObjectAggregationResultHolder();\n+  }\n+\n+  @Override\n+  public GroupByResultHolder createGroupByResultHolder(int initialCapacity, int maxCapacity) {\n+    return new ObjectGroupByResultHolder(initialCapacity, maxCapacity);\n+  }\n+\n+  @Override\n+  public void aggregate(int length, AggregationResultHolder aggregationResultHolder,\n+      Map<ExpressionContext, BlockValSet> blockValSetMap) {\n+    byte[][] bytesArray = blockValSetMap.get(_expression).getBytesValuesSV();\n+    Geometry geometry = aggregationResultHolder.getResult();\n+    for (int i = 0; i < length; i++) {\n+      Geometry value = GeometrySerializer.deserialize(bytesArray[i]);\n+      geometry = geometry == null ? value : geometry.union(value);\n+    }\n+    aggregationResultHolder.setValue(geometry);\n+  }\n+\n+  @Override\n+  public void aggregateGroupBySV(int length, int[] groupKeyArray, GroupByResultHolder groupByResultHolder,\n+      Map<ExpressionContext, BlockValSet> blockValSetMap) {\n+    byte[][] bytesArray = blockValSetMap.get(_expression).getBytesValuesSV();\n+    for (int i = 0; i < length; i++) {\n+      int groupKey = groupKeyArray[i];\n+      Geometry value = GeometrySerializer.deserialize(bytesArray[i]);\n+      groupByResultHolder.setValueForKey(groupKey, groupByResultHolder.getResult(groupKey) == null ? value\n+          : ((Geometry) groupByResultHolder.getResult(groupKey)).union(value));\n+    }\n+  }\n+\n+  @Override\n+  public void aggregateGroupByMV(int length, int[][] groupKeysArray, GroupByResultHolder groupByResultHolder,\n+      Map<ExpressionContext, BlockValSet> blockValSetMap) {\n+    byte[][] bytesArray = blockValSetMap.get(_expression).getBytesValuesSV();\n+    for (int i = 0; i < length; i++) {\n+      Geometry value = GeometrySerializer.deserialize(bytesArray[i]);\n+      for (int groupKey : groupKeysArray[i]) {\n+        groupByResultHolder.setValueForKey(groupKey, groupByResultHolder.getResult(groupKey) == null ? value\n+            : ((Geometry) groupByResultHolder.getResult(groupKey)).union(value));\n+      }\n+    }\n+  }\n+\n+  @Override\n+  public Geometry extractAggregationResult(AggregationResultHolder aggregationResultHolder) {\n+    return aggregationResultHolder.getResult();", "originalCommit": "6baf45ab4cf580d34c2420fe8a837ada1df915b6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk4MzUzMg==", "url": "https://github.com/apache/pinot/pull/5744#discussion_r461983532", "bodyText": "Can you explain the handling here, throw exception or something? My understanding is that the caller shall do the null handling?", "author": "yupeng9", "createdAt": "2020-07-29T01:24:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyNDQzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ3NTQyMQ==", "url": "https://github.com/apache/pinot/pull/5744#discussion_r462475421", "bodyText": "If there is no record selected, then aggregationResultHolder.getResult(); will return null because there is no value set yet. In that case, you should return an empty geometry as the result of the current segment", "author": "Jackie-Jiang", "createdAt": "2020-07-29T17:43:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyNDQzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ4NjAzMA==", "url": "https://github.com/apache/pinot/pull/5744#discussion_r462486030", "bodyText": "My question is why not use null as the placeholder instead of an empty abstract geometry? For example, in line #86 I checked if the group by result is null.\nPerhaps I miss something in the general null handling strategy in agg functions.", "author": "yupeng9", "createdAt": "2020-07-29T18:00:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyNDQzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUxNDkyOQ==", "url": "https://github.com/apache/pinot/pull/5744#discussion_r462514929", "bodyText": "It won't work because DataTable does not support null as input (for sending back response from server to broker)", "author": "Jackie-Jiang", "createdAt": "2020-07-29T18:51:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyNDQzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUyMzczNA==", "url": "https://github.com/apache/pinot/pull/5744#discussion_r462523734", "bodyText": "ah, I see. So all aggregation result and group by result cannot use null as holders.", "author": "yupeng9", "createdAt": "2020-07-29T19:06:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyNDQzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU3MDgwMw==", "url": "https://github.com/apache/pinot/pull/5744#discussion_r462570803", "bodyText": "The holder might contain null, but before returning the segment result, we need to convert null to the default value", "author": "Jackie-Jiang", "createdAt": "2020-07-29T20:32:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyNDQzMg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU3MzA0NQ==", "url": "https://github.com/apache/pinot/pull/5744#discussion_r462573045", "bodyText": "yup. Makes sense to me now", "author": "yupeng9", "createdAt": "2020-07-29T20:36:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyNDQzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyNDQ3Mg==", "url": "https://github.com/apache/pinot/pull/5744#discussion_r461224472", "body": "Need to handle `null` here (return an empty Geometry)", "bodyText": "Need to handle null here (return an empty Geometry)", "bodyHTML": "<p dir=\"auto\">Need to handle <code>null</code> here (return an empty Geometry)</p>", "author": "Jackie-Jiang", "createdAt": "2020-07-27T23:18:58Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/function/StUnionAggregationFunction.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.query.aggregation.function;\n+\n+import java.util.Map;\n+import org.apache.pinot.common.function.AggregationFunctionType;\n+import org.apache.pinot.common.utils.DataSchema;\n+import org.apache.pinot.core.common.BlockValSet;\n+import org.apache.pinot.core.geospatial.serde.GeometrySerializer;\n+import org.apache.pinot.core.query.aggregation.AggregationResultHolder;\n+import org.apache.pinot.core.query.aggregation.ObjectAggregationResultHolder;\n+import org.apache.pinot.core.query.aggregation.groupby.GroupByResultHolder;\n+import org.apache.pinot.core.query.aggregation.groupby.ObjectGroupByResultHolder;\n+import org.apache.pinot.core.query.request.context.ExpressionContext;\n+import org.apache.pinot.spi.utils.ByteArray;\n+import org.locationtech.jts.geom.Geometry;\n+\n+\n+public class StUnionAggregationFunction extends BaseSingleInputAggregationFunction<Geometry, ByteArray> {\n+\n+  /**\n+   * Constructor for the class.\n+   *\n+   * @param expression Expression to aggregate on.\n+   */\n+  public StUnionAggregationFunction(ExpressionContext expression) {\n+    super(expression);\n+  }\n+\n+  @Override\n+  public AggregationFunctionType getType() {\n+    return AggregationFunctionType.ST_UNION;\n+  }\n+\n+  @Override\n+  public void accept(AggregationFunctionVisitorBase visitor) {\n+    visitor.visit(this);\n+  }\n+\n+  @Override\n+  public AggregationResultHolder createAggregationResultHolder() {\n+    return new ObjectAggregationResultHolder();\n+  }\n+\n+  @Override\n+  public GroupByResultHolder createGroupByResultHolder(int initialCapacity, int maxCapacity) {\n+    return new ObjectGroupByResultHolder(initialCapacity, maxCapacity);\n+  }\n+\n+  @Override\n+  public void aggregate(int length, AggregationResultHolder aggregationResultHolder,\n+      Map<ExpressionContext, BlockValSet> blockValSetMap) {\n+    byte[][] bytesArray = blockValSetMap.get(_expression).getBytesValuesSV();\n+    Geometry geometry = aggregationResultHolder.getResult();\n+    for (int i = 0; i < length; i++) {\n+      Geometry value = GeometrySerializer.deserialize(bytesArray[i]);\n+      geometry = geometry == null ? value : geometry.union(value);\n+    }\n+    aggregationResultHolder.setValue(geometry);\n+  }\n+\n+  @Override\n+  public void aggregateGroupBySV(int length, int[] groupKeyArray, GroupByResultHolder groupByResultHolder,\n+      Map<ExpressionContext, BlockValSet> blockValSetMap) {\n+    byte[][] bytesArray = blockValSetMap.get(_expression).getBytesValuesSV();\n+    for (int i = 0; i < length; i++) {\n+      int groupKey = groupKeyArray[i];\n+      Geometry value = GeometrySerializer.deserialize(bytesArray[i]);\n+      groupByResultHolder.setValueForKey(groupKey, groupByResultHolder.getResult(groupKey) == null ? value\n+          : ((Geometry) groupByResultHolder.getResult(groupKey)).union(value));\n+    }\n+  }\n+\n+  @Override\n+  public void aggregateGroupByMV(int length, int[][] groupKeysArray, GroupByResultHolder groupByResultHolder,\n+      Map<ExpressionContext, BlockValSet> blockValSetMap) {\n+    byte[][] bytesArray = blockValSetMap.get(_expression).getBytesValuesSV();\n+    for (int i = 0; i < length; i++) {\n+      Geometry value = GeometrySerializer.deserialize(bytesArray[i]);\n+      for (int groupKey : groupKeysArray[i]) {\n+        groupByResultHolder.setValueForKey(groupKey, groupByResultHolder.getResult(groupKey) == null ? value\n+            : ((Geometry) groupByResultHolder.getResult(groupKey)).union(value));\n+      }\n+    }\n+  }\n+\n+  @Override\n+  public Geometry extractAggregationResult(AggregationResultHolder aggregationResultHolder) {\n+    return aggregationResultHolder.getResult();\n+  }\n+\n+  @Override\n+  public Geometry extractGroupByResult(GroupByResultHolder groupByResultHolder, int groupKey) {\n+    return groupByResultHolder.getResult(groupKey);", "originalCommit": "6baf45ab4cf580d34c2420fe8a837ada1df915b6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk4NDU0OQ==", "url": "https://github.com/apache/pinot/pull/5744#discussion_r461984549", "bodyText": "same question. There is no empty geometry, but emty geometry per specific type, e.g. GEOMETRYCOLLECTION EMPTY, POINT EMPTY, LINESTRING EMPTY", "author": "yupeng9", "createdAt": "2020-07-29T01:27:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyNDQ3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ3ODEyMg==", "url": "https://github.com/apache/pinot/pull/5744#discussion_r462478122", "bodyText": "We need to choose a default geometry to return when no record is selected. I think we can use empty Point as the default", "author": "Jackie-Jiang", "createdAt": "2020-07-29T17:47:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyNDQ3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ4NjQ1Mw==", "url": "https://github.com/apache/pinot/pull/5744#discussion_r462486453", "bodyText": "can you show me a query that will exhibit this no-record case?", "author": "yupeng9", "createdAt": "2020-07-29T18:01:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyNDQ3Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUxNTUzOA==", "url": "https://github.com/apache/pinot/pull/5744#discussion_r462515538", "bodyText": "SELECT ... WHERE col = \"no_match_value\"", "author": "Jackie-Jiang", "createdAt": "2020-07-29T18:52:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyNDQ3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyNDU3OA==", "url": "https://github.com/apache/pinot/pull/5744#discussion_r461224578", "body": "Geometry is comparable?", "bodyText": "Geometry is comparable?", "bodyHTML": "<p dir=\"auto\">Geometry is comparable?</p>", "author": "Jackie-Jiang", "createdAt": "2020-07-27T23:19:16Z", "path": "pinot-core/src/main/java/org/apache/pinot/core/query/aggregation/function/StUnionAggregationFunction.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.pinot.core.query.aggregation.function;\n+\n+import java.util.Map;\n+import org.apache.pinot.common.function.AggregationFunctionType;\n+import org.apache.pinot.common.utils.DataSchema;\n+import org.apache.pinot.core.common.BlockValSet;\n+import org.apache.pinot.core.geospatial.serde.GeometrySerializer;\n+import org.apache.pinot.core.query.aggregation.AggregationResultHolder;\n+import org.apache.pinot.core.query.aggregation.ObjectAggregationResultHolder;\n+import org.apache.pinot.core.query.aggregation.groupby.GroupByResultHolder;\n+import org.apache.pinot.core.query.aggregation.groupby.ObjectGroupByResultHolder;\n+import org.apache.pinot.core.query.request.context.ExpressionContext;\n+import org.apache.pinot.spi.utils.ByteArray;\n+import org.locationtech.jts.geom.Geometry;\n+\n+\n+public class StUnionAggregationFunction extends BaseSingleInputAggregationFunction<Geometry, ByteArray> {\n+\n+  /**\n+   * Constructor for the class.\n+   *\n+   * @param expression Expression to aggregate on.\n+   */\n+  public StUnionAggregationFunction(ExpressionContext expression) {\n+    super(expression);\n+  }\n+\n+  @Override\n+  public AggregationFunctionType getType() {\n+    return AggregationFunctionType.ST_UNION;\n+  }\n+\n+  @Override\n+  public void accept(AggregationFunctionVisitorBase visitor) {\n+    visitor.visit(this);\n+  }\n+\n+  @Override\n+  public AggregationResultHolder createAggregationResultHolder() {\n+    return new ObjectAggregationResultHolder();\n+  }\n+\n+  @Override\n+  public GroupByResultHolder createGroupByResultHolder(int initialCapacity, int maxCapacity) {\n+    return new ObjectGroupByResultHolder(initialCapacity, maxCapacity);\n+  }\n+\n+  @Override\n+  public void aggregate(int length, AggregationResultHolder aggregationResultHolder,\n+      Map<ExpressionContext, BlockValSet> blockValSetMap) {\n+    byte[][] bytesArray = blockValSetMap.get(_expression).getBytesValuesSV();\n+    Geometry geometry = aggregationResultHolder.getResult();\n+    for (int i = 0; i < length; i++) {\n+      Geometry value = GeometrySerializer.deserialize(bytesArray[i]);\n+      geometry = geometry == null ? value : geometry.union(value);\n+    }\n+    aggregationResultHolder.setValue(geometry);\n+  }\n+\n+  @Override\n+  public void aggregateGroupBySV(int length, int[] groupKeyArray, GroupByResultHolder groupByResultHolder,\n+      Map<ExpressionContext, BlockValSet> blockValSetMap) {\n+    byte[][] bytesArray = blockValSetMap.get(_expression).getBytesValuesSV();\n+    for (int i = 0; i < length; i++) {\n+      int groupKey = groupKeyArray[i];\n+      Geometry value = GeometrySerializer.deserialize(bytesArray[i]);\n+      groupByResultHolder.setValueForKey(groupKey, groupByResultHolder.getResult(groupKey) == null ? value\n+          : ((Geometry) groupByResultHolder.getResult(groupKey)).union(value));\n+    }\n+  }\n+\n+  @Override\n+  public void aggregateGroupByMV(int length, int[][] groupKeysArray, GroupByResultHolder groupByResultHolder,\n+      Map<ExpressionContext, BlockValSet> blockValSetMap) {\n+    byte[][] bytesArray = blockValSetMap.get(_expression).getBytesValuesSV();\n+    for (int i = 0; i < length; i++) {\n+      Geometry value = GeometrySerializer.deserialize(bytesArray[i]);\n+      for (int groupKey : groupKeysArray[i]) {\n+        groupByResultHolder.setValueForKey(groupKey, groupByResultHolder.getResult(groupKey) == null ? value\n+            : ((Geometry) groupByResultHolder.getResult(groupKey)).union(value));\n+      }\n+    }\n+  }\n+\n+  @Override\n+  public Geometry extractAggregationResult(AggregationResultHolder aggregationResultHolder) {\n+    return aggregationResultHolder.getResult();\n+  }\n+\n+  @Override\n+  public Geometry extractGroupByResult(GroupByResultHolder groupByResultHolder, int groupKey) {\n+    return groupByResultHolder.getResult(groupKey);\n+  }\n+\n+  @Override\n+  public Geometry merge(Geometry intermediateResult1, Geometry intermediateResult2) {\n+    return intermediateResult1.union(intermediateResult2);\n+  }\n+\n+  @Override\n+  public boolean isIntermediateResultComparable() {\n+    return true;", "originalCommit": "6baf45ab4cf580d34c2420fe8a837ada1df915b6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTk4NTE3OQ==", "url": "https://github.com/apache/pinot/pull/5744#discussion_r461985179", "bodyText": "yes, https://locationtech.github.io/jts/javadoc/org/locationtech/jts/geom/Geometry.html#compareTo-java.lang.Object-", "author": "yupeng9", "createdAt": "2020-07-29T01:30:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyNDU3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ4NzM4NA==", "url": "https://github.com/apache/pinot/pull/5744#discussion_r462487384", "bodyText": "This is not the same comparison logic as the final result, so we should put false here.\nThis is for ordering the union geometry for group-by queries, which will use the final result ByteArray order. It does not make a lot of sense to order them though", "author": "Jackie-Jiang", "createdAt": "2020-07-29T18:03:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyNDU3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUyODIxNQ==", "url": "https://github.com/apache/pinot/pull/5744#discussion_r462528215", "bodyText": "I see. So the assumption is that the intermediate result comparable order must be the same as the final result.", "author": "yupeng9", "createdAt": "2020-07-29T19:14:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyNDU3OA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU3MDM2MQ==", "url": "https://github.com/apache/pinot/pull/5744#discussion_r462570361", "bodyText": "Yes, because they are for the same purpose", "author": "Jackie-Jiang", "createdAt": "2020-07-29T20:31:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTIyNDU3OA=="}], "type": "inlineReview"}, {"oid": "314a45c1a727c9bb6116164a3cb2af83bf6b5a8e", "url": "https://github.com/apache/pinot/commit/314a45c1a727c9bb6116164a3cb2af83bf6b5a8e", "message": "comment", "committedDate": "2020-07-29T01:30:32Z", "type": "commit"}, {"oid": "68497c29221171f442367166be33bde0355e902e", "url": "https://github.com/apache/pinot/commit/68497c29221171f442367166be33bde0355e902e", "message": "more comments", "committedDate": "2020-07-29T20:35:41Z", "type": "commit"}]}