{"pr_number": 5271, "pr_title": "Remove hadoop dependency in Create Segment Command", "pr_author": "xiangfu0", "pr_createdAt": "2020-04-18T02:04:04Z", "pr_url": "https://github.com/apache/pinot/pull/5271", "timeline": [{"oid": "3ceccc1c4aad6245629e7064ab41298bee00ad8c", "url": "https://github.com/apache/pinot/commit/3ceccc1c4aad6245629e7064ab41298bee00ad8c", "message": "Remove hadoop dependency in Create Segment Command", "committedDate": "2020-04-18T03:11:46Z", "type": "commit"}, {"oid": "3ceccc1c4aad6245629e7064ab41298bee00ad8c", "url": "https://github.com/apache/pinot/commit/3ceccc1c4aad6245629e7064ab41298bee00ad8c", "message": "Remove hadoop dependency in Create Segment Command", "committedDate": "2020-04-18T03:11:46Z", "type": "forcePushed"}, {"oid": "32674d0d286faaf269692af09999b5fd19fac83f", "url": "https://github.com/apache/pinot/commit/32674d0d286faaf269692af09999b5fd19fac83f", "message": "move gson to fasterxml for github events quickstart", "committedDate": "2020-04-20T19:37:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY0NTI0MQ==", "url": "https://github.com/apache/pinot/pull/5271#discussion_r411645241", "body": "Delete the local file after generating the segment? (Also recommend putting it into a temp dir)\r\nAlso, not sure if it is a good idea directly using the file name because there might be conflict for nested dir.", "bodyText": "Delete the local file after generating the segment? (Also recommend putting it into a temp dir)\nAlso, not sure if it is a good idea directly using the file name because there might be conflict for nested dir.", "bodyHTML": "<p dir=\"auto\">Delete the local file after generating the segment? (Also recommend putting it into a temp dir)<br>\nAlso, not sure if it is a good idea directly using the file name because there might be conflict for nested dir.</p>", "author": "Jackie-Jiang", "createdAt": "2020-04-20T19:47:26Z", "path": "pinot-tools/src/main/java/org/apache/pinot/tools/admin/command/CreateSegmentCommand.java", "diffHunk": "@@ -334,10 +333,10 @@ public void run() {\n           for (int curr = 0; curr <= _retry; curr++) {\n             try {\n               SegmentGeneratorConfig config = new SegmentGeneratorConfig(segmentGeneratorConfig);\n-\n-              String localFile = dataFilePath.getName();\n-              Path localFilePath = new Path(localFile);\n-              dataDirPath.getFileSystem(new Configuration()).copyToLocalFile(dataFilePath, localFilePath);\n+              URI dataFileUri = URI.create(dataFilePath);\n+              String[] splits = dataFilePath.split(\"/\");\n+              String localFile = splits[splits.length - 1];", "originalCommit": "32674d0d286faaf269692af09999b5fd19fac83f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY1NjE5Mw==", "url": "https://github.com/apache/pinot/pull/5271#discussion_r411656193", "bodyText": "create a random local directory and copy file into it, then delete the directory after segment creation", "author": "xiangfu0", "createdAt": "2020-04-20T20:05:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY0NTI0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY0NzExOQ==", "url": "https://github.com/apache/pinot/pull/5271#discussion_r411647119", "body": "```suggestion\r\n            commits = JsonUtils.stringToJsonNode(commitsResponse.responseString);\r\n```\r\nSame for other places. No need to construct another object mapper", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        commits = OBJECT_MAPPER.reader().readTree(commitsResponse.responseString);\n          \n          \n            \n                        commits = JsonUtils.stringToJsonNode(commitsResponse.responseString);\n          \n      \n    \n    \n  \n\nSame for other places. No need to construct another object mapper", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            commits <span class=\"pl-k\">=</span> <span class=\"pl-c1 x x-first\">OBJECT_MAPPER</span><span class=\"pl-k x\">.</span><span class=\"x\">reader()</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">readTree</span>(commitsResponse<span class=\"pl-k\">.</span>responseString);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            commits <span class=\"pl-k\">=</span> <span class=\"pl-smi x x-first\">JsonUtils</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">stringToJsonNode</span>(commitsResponse<span class=\"pl-k\">.</span>responseString);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">Same for other places. No need to construct another object mapper</p>", "author": "Jackie-Jiang", "createdAt": "2020-04-20T19:50:37Z", "path": "pinot-tools/src/main/java/org/apache/pinot/tools/streams/githubevents/PullRequestMergedEventsStream.java", "diffHunk": "@@ -206,41 +215,41 @@ public void start() {\n    * Find commits, review comments, comments corresponding to this pull request event.\n    * Construct a PullRequestMergedEvent with the help of the event, commits, review comments and comments.\n    * Converts PullRequestMergedEvent to GenericRecord\n+   * @param event\n    */\n-  private GenericRecord convertToPullRequestMergedGenericRecord(JsonElement eventJson)\n+  private GenericRecord convertToPullRequestMergedGenericRecord(JsonNode event)\n       throws IOException {\n     GenericRecord genericRecord = null;\n-    JsonObject event = eventJson.getAsJsonObject();\n-    String type = event.get(\"type\").getAsString();\n+    String type = event.get(\"type\").asText();\n \n     if (\"PullRequestEvent\".equals(type)) {\n-      JsonObject payload = event.get(\"payload\").getAsJsonObject();\n+      JsonNode payload = event.get(\"payload\");\n       if (payload != null) {\n-        String action = payload.get(\"action\").getAsString();\n-        JsonObject pullRequest = payload.get(\"pull_request\").getAsJsonObject();\n-        String merged = pullRequest.get(\"merged\").getAsString();\n+        String action = payload.get(\"action\").asText();\n+        JsonNode pullRequest = payload.get(\"pull_request\");\n+        String merged = pullRequest.get(\"merged\").asText();\n         if (\"closed\".equals(action) && \"true\".equals(merged)) { // valid pull request merge event\n \n-          JsonArray commits = null;\n-          String commitsURL = pullRequest.get(\"commits_url\").getAsString();\n+          JsonNode commits = null;\n+          String commitsURL = pullRequest.get(\"commits_url\").asText();\n           GitHubAPICaller.GitHubAPIResponse commitsResponse = _gitHubAPICaller.callAPI(commitsURL);\n \n           if (commitsResponse.responseString != null) {\n-            commits = new JsonParser().parse(commitsResponse.responseString).getAsJsonArray();\n+            commits = OBJECT_MAPPER.reader().readTree(commitsResponse.responseString);", "originalCommit": "32674d0d286faaf269692af09999b5fd19fac83f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY1NTc0NA==", "url": "https://github.com/apache/pinot/pull/5271#discussion_r411655744", "bodyText": "done", "author": "xiangfu0", "createdAt": "2020-04-20T20:05:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY0NzExOQ=="}], "type": "inlineReview"}, {"oid": "01f5f96ce28ea6680e6f8f8b6e9e54b47a49702f", "url": "https://github.com/apache/pinot/commit/01f5f96ce28ea6680e6f8f8b6e9e54b47a49702f", "message": "Address comments", "committedDate": "2020-04-20T20:14:38Z", "type": "forcePushed"}, {"oid": "0952f31ca739986fb3d1db8a458c611153817823", "url": "https://github.com/apache/pinot/commit/0952f31ca739986fb3d1db8a458c611153817823", "message": "Address comments", "committedDate": "2020-04-20T20:47:38Z", "type": "commit"}, {"oid": "0952f31ca739986fb3d1db8a458c611153817823", "url": "https://github.com/apache/pinot/commit/0952f31ca739986fb3d1db8a458c611153817823", "message": "Address comments", "committedDate": "2020-04-20T20:47:38Z", "type": "forcePushed"}]}