{"pr_number": 310, "pr_title": "[Future] 1.16 Update", "pr_createdAt": "2020-05-22T22:23:34Z", "pr_url": "https://github.com/PaperMC/Velocity/pull/310", "merge_commit": "0dd6fe1ef2783fe1f9322af06c6fd218aa67cdb1", "timeline": [{"oid": "d37b6a361cb05f69db2608c29c4608dc6881edc7", "url": "https://github.com/PaperMC/Velocity/commit/d37b6a361cb05f69db2608c29c4608dc6881edc7", "message": "Snapshot 20w21a", "committedDate": "2020-05-22T22:18:36Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ3OTMyMg==", "url": "https://github.com/PaperMC/Velocity/pull/310#discussion_r429479322", "body": "Add `@Nullable`", "bodyText": "Add @Nullable", "bodyHTML": "<p dir=\"auto\">Add <code>@Nullable</code></p>", "author": "mikroskeem", "createdAt": "2020-05-22T22:31:17Z", "path": "proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java", "diffHunk": "@@ -10,20 +10,25 @@\n import net.kyori.text.serializer.gson.GsonComponentSerializer;\n import org.checkerframework.checker.nullness.qual.Nullable;\n \n+import java.util.UUID;\n+\n public class Chat implements MinecraftPacket {\n \n   public static final byte CHAT_TYPE = (byte) 0;\n   public static final int MAX_SERVERBOUND_MESSAGE_LENGTH = 256;\n+  public static final UUID EMPTY_SENDER = new UUID(0, 0);\n \n   private @Nullable String message;\n   private byte type;\n+  private UUID sender;", "originalCommit": "d37b6a361cb05f69db2608c29c4608dc6881edc7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fca73bae675d396cb584fc48e2c0548cc6595e58", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java\nindex b80e0f85..61619d0e 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java\n", "chunk": "@@ -20,7 +20,7 @@ public class Chat implements MinecraftPacket {\n \n   private @Nullable String message;\n   private byte type;\n-  private UUID sender;\n+  private @Nullable UUID sender;\n \n   public Chat() {\n   }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ3OTM4MQ==", "url": "https://github.com/PaperMC/Velocity/pull/310#discussion_r429479381", "body": "Use `EMPTY_SENDER` constant here", "bodyText": "Use EMPTY_SENDER constant here", "bodyHTML": "<p dir=\"auto\">Use <code>EMPTY_SENDER</code> constant here</p>", "author": "mikroskeem", "createdAt": "2020-05-22T22:31:39Z", "path": "proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java", "diffHunk": "@@ -69,6 +86,9 @@ public void encode(ByteBuf buf, ProtocolUtils.Direction direction, ProtocolVersi\n     ProtocolUtils.writeString(buf, message);\n     if (direction == ProtocolUtils.Direction.CLIENTBOUND) {\n       buf.writeByte(type);\n+      if(version.compareTo(ProtocolVersion.MINECRAFT_1_16) >= 0) {\n+        ProtocolUtils.writeUuid(buf, sender == null ? new UUID(0,0) : sender);", "originalCommit": "d37b6a361cb05f69db2608c29c4608dc6881edc7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTUzMjE1OQ==", "url": "https://github.com/VelocityPowered/Velocity/pull/310#discussion_r429532159", "bodyText": "Silly me, I made it for that purpose", "author": "Xernium", "createdAt": "2020-05-23T09:51:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ3OTM4MQ=="}], "type": "inlineReview", "revised_code": {"commit": "fca73bae675d396cb584fc48e2c0548cc6595e58", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java\nindex b80e0f85..61619d0e 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java\n", "chunk": "@@ -87,7 +87,7 @@ public class Chat implements MinecraftPacket {\n     if (direction == ProtocolUtils.Direction.CLIENTBOUND) {\n       buf.writeByte(type);\n       if(version.compareTo(ProtocolVersion.MINECRAFT_1_16) >= 0) {\n-        ProtocolUtils.writeUuid(buf, sender == null ? new UUID(0,0) : sender);\n+        ProtocolUtils.writeUuid(buf, sender == null ? EMPTY_SENDER : sender);\n       }\n     }\n   }\n", "next_change": {"commit": "38487c5bba0d2376312f663c47bbea906c32779e", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java\nindex 61619d0e..7905d7ca 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java\n", "chunk": "@@ -86,7 +86,7 @@ public class Chat implements MinecraftPacket {\n     ProtocolUtils.writeString(buf, message);\n     if (direction == ProtocolUtils.Direction.CLIENTBOUND) {\n       buf.writeByte(type);\n-      if(version.compareTo(ProtocolVersion.MINECRAFT_1_16) >= 0) {\n+      if (version.compareTo(ProtocolVersion.MINECRAFT_1_16) >= 0) {\n         ProtocolUtils.writeUuid(buf, sender == null ? EMPTY_SENDER : sender);\n       }\n     }\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ3OTQwNA==", "url": "https://github.com/PaperMC/Velocity/pull/310#discussion_r429479404", "body": "`if (`", "bodyText": "if (", "bodyHTML": "<p dir=\"auto\"><code>if (</code></p>", "author": "mikroskeem", "createdAt": "2020-05-22T22:31:45Z", "path": "proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java", "diffHunk": "@@ -69,6 +86,9 @@ public void encode(ByteBuf buf, ProtocolUtils.Direction direction, ProtocolVersi\n     ProtocolUtils.writeString(buf, message);\n     if (direction == ProtocolUtils.Direction.CLIENTBOUND) {\n       buf.writeByte(type);\n+      if(version.compareTo(ProtocolVersion.MINECRAFT_1_16) >= 0) {", "originalCommit": "d37b6a361cb05f69db2608c29c4608dc6881edc7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTUzMjMyOQ==", "url": "https://github.com/VelocityPowered/Velocity/pull/310#discussion_r429532329", "bodyText": "I swear to god IntelliJ", "author": "Xernium", "createdAt": "2020-05-23T09:53:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ3OTQwNA=="}], "type": "inlineReview", "revised_code": {"commit": "fca73bae675d396cb584fc48e2c0548cc6595e58", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java\nindex b80e0f85..61619d0e 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java\n", "chunk": "@@ -87,7 +87,7 @@ public class Chat implements MinecraftPacket {\n     if (direction == ProtocolUtils.Direction.CLIENTBOUND) {\n       buf.writeByte(type);\n       if(version.compareTo(ProtocolVersion.MINECRAFT_1_16) >= 0) {\n-        ProtocolUtils.writeUuid(buf, sender == null ? new UUID(0,0) : sender);\n+        ProtocolUtils.writeUuid(buf, sender == null ? EMPTY_SENDER : sender);\n       }\n     }\n   }\n", "next_change": {"commit": "38487c5bba0d2376312f663c47bbea906c32779e", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java\nindex 61619d0e..7905d7ca 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java\n", "chunk": "@@ -86,7 +86,7 @@ public class Chat implements MinecraftPacket {\n     ProtocolUtils.writeString(buf, message);\n     if (direction == ProtocolUtils.Direction.CLIENTBOUND) {\n       buf.writeByte(type);\n-      if(version.compareTo(ProtocolVersion.MINECRAFT_1_16) >= 0) {\n+      if (version.compareTo(ProtocolVersion.MINECRAFT_1_16) >= 0) {\n         ProtocolUtils.writeUuid(buf, sender == null ? EMPTY_SENDER : sender);\n       }\n     }\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "0dd6fe1ef2783fe1f9322af06c6fd218aa67cdb1", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java\nindex b80e0f85..7905d7ca 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java\n", "chunk": "@@ -86,8 +86,8 @@ public class Chat implements MinecraftPacket {\n     ProtocolUtils.writeString(buf, message);\n     if (direction == ProtocolUtils.Direction.CLIENTBOUND) {\n       buf.writeByte(type);\n-      if(version.compareTo(ProtocolVersion.MINECRAFT_1_16) >= 0) {\n-        ProtocolUtils.writeUuid(buf, sender == null ? new UUID(0,0) : sender);\n+      if (version.compareTo(ProtocolVersion.MINECRAFT_1_16) >= 0) {\n+        ProtocolUtils.writeUuid(buf, sender == null ? EMPTY_SENDER : sender);\n       }\n     }\n   }\n", "next_change": {"commit": "5c314c9068814aca404b68cf8442af7201bdcf43", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java\nindex 7905d7ca..2321b518 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java\n", "chunk": "@@ -84,11 +67,8 @@ public class Chat implements MinecraftPacket {\n       throw new IllegalStateException(\"Message is not specified\");\n     }\n     ProtocolUtils.writeString(buf, message);\n-    if (direction == ProtocolUtils.Direction.CLIENTBOUND) {\n+    if (direction == ProtocolUtils.Direction.CLIENTBOUND && version.compareTo(ProtocolVersion.MINECRAFT_1_8) >= 0) {\n       buf.writeByte(type);\n-      if (version.compareTo(ProtocolVersion.MINECRAFT_1_16) >= 0) {\n-        ProtocolUtils.writeUuid(buf, sender == null ? EMPTY_SENDER : sender);\n-      }\n     }\n   }\n \n", "next_change": {"commit": "cd9bb61f208e3b27da9fbdcb4bf6cafc9135be65", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java\nindex 2321b518..7905d7ca 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java\n", "chunk": "@@ -67,8 +84,11 @@ public class Chat implements MinecraftPacket {\n       throw new IllegalStateException(\"Message is not specified\");\n     }\n     ProtocolUtils.writeString(buf, message);\n-    if (direction == ProtocolUtils.Direction.CLIENTBOUND && version.compareTo(ProtocolVersion.MINECRAFT_1_8) >= 0) {\n+    if (direction == ProtocolUtils.Direction.CLIENTBOUND) {\n       buf.writeByte(type);\n+      if (version.compareTo(ProtocolVersion.MINECRAFT_1_16) >= 0) {\n+        ProtocolUtils.writeUuid(buf, sender == null ? EMPTY_SENDER : sender);\n+      }\n     }\n   }\n \n", "next_change": {"commit": "ada35ff28698c9cccea50236eda6ec4c291ca13a", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java\nindex 7905d7ca..028f1cca 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java\n", "chunk": "@@ -84,7 +84,7 @@ public class Chat implements MinecraftPacket {\n       throw new IllegalStateException(\"Message is not specified\");\n     }\n     ProtocolUtils.writeString(buf, message);\n-    if (direction == ProtocolUtils.Direction.CLIENTBOUND) {\n+    if (direction == ProtocolUtils.Direction.CLIENTBOUND && version.compareTo(ProtocolVersion.MINECRAFT_1_8) >= 0) {\n       buf.writeByte(type);\n       if (version.compareTo(ProtocolVersion.MINECRAFT_1_16) >= 0) {\n         ProtocolUtils.writeUuid(buf, sender == null ? EMPTY_SENDER : sender);\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "0dd6fe1ef2783fe1f9322af06c6fd218aa67cdb1", "message": "Merge commit", "committedDate": null}, {"oid": "5c314c9068814aca404b68cf8442af7201bdcf43", "committedDate": "2019-07-01 08:56:22 +0200", "message": "Add 1.7 Protocol Support"}, {"oid": "cd9bb61f208e3b27da9fbdcb4bf6cafc9135be65", "committedDate": "2020-06-20 23:11:19 -0400", "message": "Merge branch 'future/1.16' of https://github.com/Xernium/Velocity into Xernium-future/1.16"}, {"oid": "ada35ff28698c9cccea50236eda6ec4c291ca13a", "committedDate": "2020-06-20 23:24:32 -0400", "message": "Merge branch 'Xernium-future/1.16' into future/1.16-velocity-1.1.0"}, {"oid": "2e7a598916c49917979feca7db7dece0c6abd84e", "committedDate": "2020-06-28 21:23:01 -0400", "message": "Initial commit of adventure-adapted Velocity API."}, {"oid": "c2edd82b16660ab75210fb5caabf09d56bd73b28", "committedDate": "2020-06-28 23:13:57 -0400", "message": "Use more idiomatic adventure text serializer"}, {"oid": "26f3cb43c7c8b81d0b10c79dde6c308b34b280fb", "committedDate": "2020-08-16 14:02:04 -0400", "message": "Clean up some Adventure support code, implement another sendMessage overload"}, {"oid": "60e917b4a104d02f9175013e3ce1a42c5daa4ae9", "committedDate": "2020-10-13 22:36:51 -0700", "message": "Player has an identity"}, {"oid": "a6e708c98ee9b872cfc7866c74babe1ea908442d", "committedDate": "2020-10-20 14:26:08 -0400", "message": "Fix Adventure sendActionBar implementation and add proper action bar sending for 1.16.2"}, {"oid": "8995b64dc6a102b03966dfa5baab0e0f06c79bb6", "committedDate": "2020-10-22 03:02:09 -0400", "message": "Do not use the GAME_INFO chat type."}, {"oid": "c747120b20be1853ee02e7b2b67871249a88aa6d", "committedDate": "2021-03-31 16:04:06 -0400", "message": "Relicense the Velocity proxy under the terms of GPLv3 (#448)"}, {"oid": "977300cc66af91cdf88bff38f487a8e3207e33d7", "committedDate": "2021-05-23 14:13:51 -0400", "message": "Remove text 3.x API and associated deprecated APIs"}, {"oid": "d97ed956a7be1411b192939abcab8412932230b8", "committedDate": "2022-06-07 21:00:24 -0400", "message": "Update/1.19 (#726)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ3OTQ5MQ==", "url": "https://github.com/PaperMC/Velocity/pull/310#discussion_r429479491", "body": "`// 1.16+`", "bodyText": "// 1.16+", "bodyHTML": "<p dir=\"auto\"><code>// 1.16+</code></p>", "author": "mikroskeem", "createdAt": "2020-05-22T22:32:15Z", "path": "proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java", "diffHunk": "@@ -19,6 +20,11 @@\n   private int viewDistance; //1.14+\n   private boolean reducedDebugInfo;\n   private boolean showRespawnScreen;\n+  private boolean shouldKeepPlayerData;\n+  private boolean isDebug;\n+  private boolean isFlat;\n+  private String dimensionRegistryName;\n+  private CompoundTag dimensionRegistry;", "originalCommit": "d37b6a361cb05f69db2608c29c4608dc6881edc7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fca73bae675d396cb584fc48e2c0548cc6595e58", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\nindex d036e653..ef531570 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\n", "chunk": "@@ -17,14 +17,14 @@ public class JoinGame implements MinecraftPacket {\n   private short difficulty;\n   private short maxPlayers;\n   private @Nullable String levelType;\n-  private int viewDistance; //1.14+\n+  private int viewDistance; // 1.14+\n   private boolean reducedDebugInfo;\n   private boolean showRespawnScreen;\n-  private boolean shouldKeepPlayerData;\n-  private boolean isDebug;\n-  private boolean isFlat;\n-  private String dimensionRegistryName;\n-  private CompoundTag dimensionRegistry;\n+  private boolean shouldKeepPlayerData; // 1.16+\n+  private boolean isDebug; // 1.16+\n+  private boolean isFlat; // 1.16+\n+  private String dimensionRegistryName; // 1.16+\n+  private CompoundTag dimensionRegistry; // 1.16+\n \n   public int getEntityId() {\n     return entityId;\n", "next_change": {"commit": "18e595397660ea6651bb4c86e1bb3a6addf1dd24", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\nindex ef531570..8ea5cbeb 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\n", "chunk": "@@ -20,11 +25,8 @@ public class JoinGame implements MinecraftPacket {\n   private int viewDistance; // 1.14+\n   private boolean reducedDebugInfo;\n   private boolean showRespawnScreen;\n-  private boolean shouldKeepPlayerData; // 1.16+\n-  private boolean isDebug; // 1.16+\n-  private boolean isFlat; // 1.16+\n-  private String dimensionRegistryName; // 1.16+\n-  private CompoundTag dimensionRegistry; // 1.16+\n+  private DimensionRegistry dimensionRegistry; // 1.16+\n+  private DimensionInfo dimensionInfo; // 1.16+\n \n   public int getEntityId() {\n     return entityId;\n", "next_change": {"commit": "a1ab29186b26145c88f07552f6a1ad81bdd2cc22", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\nindex 8ea5cbeb..630a60de 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\n", "chunk": "@@ -27,6 +24,7 @@ public class JoinGame implements MinecraftPacket {\n   private boolean showRespawnScreen;\n   private DimensionRegistry dimensionRegistry; // 1.16+\n   private DimensionInfo dimensionInfo; // 1.16+\n+  private short previousGamemode; // 1.16+\n \n   public int getEntityId() {\n     return entityId;\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ3OTY5Ng==", "url": "https://github.com/PaperMC/Velocity/pull/310#discussion_r429479696", "body": "Move this to `else if` instead of nesting into `else` block", "bodyText": "Move this to else if instead of nesting into else block", "bodyHTML": "<p dir=\"auto\">Move this to <code>else if</code> instead of nesting into <code>else</code> block</p>", "author": "mikroskeem", "createdAt": "2020-05-22T22:33:16Z", "path": "proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java", "diffHunk": "@@ -110,10 +156,15 @@ public String toString() {\n   public void decode(ByteBuf buf, ProtocolUtils.Direction direction, ProtocolVersion version) {\n     this.entityId = buf.readInt();\n     this.gamemode = buf.readUnsignedByte();\n-    if (version.compareTo(ProtocolVersion.MINECRAFT_1_9_1) >= 0) {\n-      this.dimension = buf.readInt();\n+    if (version.compareTo(ProtocolVersion.MINECRAFT_1_16) >= 0) {\n+      this.dimensionRegistry = ProtocolUtils.readCompoundTag(buf);\n+      this.dimensionRegistryName = ProtocolUtils.readString(buf);\n     } else {\n-      this.dimension = buf.readByte();\n+      if (version.compareTo(ProtocolVersion.MINECRAFT_1_9_1) >= 0) {", "originalCommit": "d37b6a361cb05f69db2608c29c4608dc6881edc7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fca73bae675d396cb584fc48e2c0548cc6595e58", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\nindex d036e653..ef531570 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\n", "chunk": "@@ -159,12 +163,10 @@ public class JoinGame implements MinecraftPacket {\n     if (version.compareTo(ProtocolVersion.MINECRAFT_1_16) >= 0) {\n       this.dimensionRegistry = ProtocolUtils.readCompoundTag(buf);\n       this.dimensionRegistryName = ProtocolUtils.readString(buf);\n+    } else if (version.compareTo(ProtocolVersion.MINECRAFT_1_9_1) >= 0) {\n+      this.dimension = buf.readInt();\n     } else {\n-      if (version.compareTo(ProtocolVersion.MINECRAFT_1_9_1) >= 0) {\n-        this.dimension = buf.readInt();\n-      } else {\n-        this.dimension = buf.readByte();\n-      }\n+      this.dimension = buf.readByte();\n     }\n     if (version.compareTo(ProtocolVersion.MINECRAFT_1_13_2) <= 0) {\n       this.difficulty = buf.readUnsignedByte();\n", "next_change": {"commit": "18e595397660ea6651bb4c86e1bb3a6addf1dd24", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\nindex ef531570..8ea5cbeb 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\n", "chunk": "@@ -160,9 +136,14 @@ public class JoinGame implements MinecraftPacket {\n   public void decode(ByteBuf buf, ProtocolUtils.Direction direction, ProtocolVersion version) {\n     this.entityId = buf.readInt();\n     this.gamemode = buf.readUnsignedByte();\n+    String dimensionIdentifier = null;\n+    String levelName = null;\n     if (version.compareTo(ProtocolVersion.MINECRAFT_1_16) >= 0) {\n-      this.dimensionRegistry = ProtocolUtils.readCompoundTag(buf);\n-      this.dimensionRegistryName = ProtocolUtils.readString(buf);\n+      String levelNames[] = ProtocolUtils.readStringArray(buf);\n+      Map<String, String> dimensionMapping = DimensionRegistry.parseToMapping(ProtocolUtils.readCompoundTag(buf));\n+      this.dimensionRegistry = new DimensionRegistry(dimensionMapping, Set.of(levelNames));\n+      dimensionIdentifier = ProtocolUtils.readString(buf);\n+      levelName = ProtocolUtils.readString(buf);\n     } else if (version.compareTo(ProtocolVersion.MINECRAFT_1_9_1) >= 0) {\n       this.dimension = buf.readInt();\n     } else {\n", "next_change": {"commit": "368d50b4555a87f0fb5ca734947f098e86ccac96", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\nindex 8ea5cbeb..64104ebf 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\n", "chunk": "@@ -140,8 +136,7 @@ public class JoinGame implements MinecraftPacket {\n     String levelName = null;\n     if (version.compareTo(ProtocolVersion.MINECRAFT_1_16) >= 0) {\n       String levelNames[] = ProtocolUtils.readStringArray(buf);\n-      Map<String, String> dimensionMapping = DimensionRegistry.parseToMapping(ProtocolUtils.readCompoundTag(buf));\n-      this.dimensionRegistry = new DimensionRegistry(dimensionMapping, Set.of(levelNames));\n+      this.dimensionRegistry = DimensionRegistry.fromGameData(ProtocolUtils.readCompoundTag(buf), levelNames);\n       dimensionIdentifier = ProtocolUtils.readString(buf);\n       levelName = ProtocolUtils.readString(buf);\n     } else if (version.compareTo(ProtocolVersion.MINECRAFT_1_9_1) >= 0) {\n", "next_change": {"commit": "ef5b9cf183da0eda038374f01dc342bbea5d2d40", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\nindex 64104ebf..d000320a 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\n", "chunk": "@@ -135,8 +136,9 @@ public class JoinGame implements MinecraftPacket {\n     String dimensionIdentifier = null;\n     String levelName = null;\n     if (version.compareTo(ProtocolVersion.MINECRAFT_1_16) >= 0) {\n-      String levelNames[] = ProtocolUtils.readStringArray(buf);\n-      this.dimensionRegistry = DimensionRegistry.fromGameData(ProtocolUtils.readCompoundTag(buf), levelNames);\n+      ImmutableSet<String> levelNames = ImmutableSet.copyOf(ProtocolUtils.readStringArray(buf));\n+      ImmutableSet<DimensionData> readData = DimensionRegistry.fromGameData(ProtocolUtils.readCompoundTag(buf));\n+      this.dimensionRegistry = new DimensionRegistry(readData, levelNames);\n       dimensionIdentifier = ProtocolUtils.readString(buf);\n       levelName = ProtocolUtils.readString(buf);\n     } else if (version.compareTo(ProtocolVersion.MINECRAFT_1_9_1) >= 0) {\n", "next_change": {"commit": "a1ab29186b26145c88f07552f6a1ad81bdd2cc22", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\nindex d000320a..630a60de 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\n", "chunk": "@@ -126,16 +132,18 @@ public class JoinGame implements MinecraftPacket {\n         + \", reducedDebugInfo=\" + reducedDebugInfo\n         + \", dimensionRegistry='\" + dimensionRegistry.toString() + '\\''\n         + \", dimensionInfo='\" + dimensionInfo.toString() + '\\''\n+        + \", previousGamemode=\" + previousGamemode\n         + '}';\n   }\n \n   @Override\n   public void decode(ByteBuf buf, ProtocolUtils.Direction direction, ProtocolVersion version) {\n     this.entityId = buf.readInt();\n-    this.gamemode = buf.readUnsignedByte();\n+    this.gamemode = buf.readByte();\n     String dimensionIdentifier = null;\n     String levelName = null;\n     if (version.compareTo(ProtocolVersion.MINECRAFT_1_16) >= 0) {\n+      this.previousGamemode = buf.readByte();\n       ImmutableSet<String> levelNames = ImmutableSet.copyOf(ProtocolUtils.readStringArray(buf));\n       ImmutableSet<DimensionData> readData = DimensionRegistry.fromGameData(ProtocolUtils.readCompoundTag(buf));\n       this.dimensionRegistry = new DimensionRegistry(readData, levelNames);\n", "next_change": null}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ3OTc2Mg==", "url": "https://github.com/PaperMC/Velocity/pull/310#discussion_r429479762", "body": "Move this to `else if` instead of nesting into `else` block", "bodyText": "Move this to else if instead of nesting into else block", "bodyHTML": "<p dir=\"auto\">Move this to <code>else if</code> instead of nesting into <code>else</code> block</p>", "author": "mikroskeem", "createdAt": "2020-05-22T22:33:35Z", "path": "proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java", "diffHunk": "@@ -122,24 +173,37 @@ public void decode(ByteBuf buf, ProtocolUtils.Direction direction, ProtocolVersi\n       this.partialHashedSeed = buf.readLong();\n     }\n     this.maxPlayers = buf.readUnsignedByte();\n-    this.levelType = ProtocolUtils.readString(buf, 16);\n+    if (version.compareTo(ProtocolVersion.MINECRAFT_1_16) < 0) {\n+      this.levelType = ProtocolUtils.readString(buf, 16);\n+    } else {\n+      this.levelType = \"default\"; // I didn't have the courage to rework this yet.\n+    }\n     if (version.compareTo(ProtocolVersion.MINECRAFT_1_14) >= 0) {\n       this.viewDistance = ProtocolUtils.readVarInt(buf);\n     }\n     this.reducedDebugInfo = buf.readBoolean();\n     if (version.compareTo(ProtocolVersion.MINECRAFT_1_15) >= 0) {\n       this.showRespawnScreen = buf.readBoolean();\n     }\n+    if (version.compareTo(ProtocolVersion.MINECRAFT_1_16) >= 0) {\n+      isDebug = buf.readBoolean();\n+      isFlat = buf.readBoolean();\n+    }\n   }\n \n   @Override\n   public void encode(ByteBuf buf, ProtocolUtils.Direction direction, ProtocolVersion version) {\n     buf.writeInt(entityId);\n     buf.writeByte(gamemode);\n-    if (version.compareTo(ProtocolVersion.MINECRAFT_1_9_1) >= 0) {\n-      buf.writeInt(dimension);\n+    if (version.compareTo(ProtocolVersion.MINECRAFT_1_16) >= 0) {\n+      ProtocolUtils.writeCompoundTag(buf, dimensionRegistry);\n+      ProtocolUtils.writeString(buf, dimensionRegistryName);\n     } else {\n-      buf.writeByte(dimension);\n+      if (version.compareTo(ProtocolVersion.MINECRAFT_1_9_1) >= 0) {", "originalCommit": "d37b6a361cb05f69db2608c29c4608dc6881edc7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fca73bae675d396cb584fc48e2c0548cc6595e58", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\nindex d036e653..ef531570 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\n", "chunk": "@@ -198,12 +200,10 @@ public class JoinGame implements MinecraftPacket {\n     if (version.compareTo(ProtocolVersion.MINECRAFT_1_16) >= 0) {\n       ProtocolUtils.writeCompoundTag(buf, dimensionRegistry);\n       ProtocolUtils.writeString(buf, dimensionRegistryName);\n+    } else if (version.compareTo(ProtocolVersion.MINECRAFT_1_9_1) >= 0) {\n+      buf.writeInt(dimension);\n     } else {\n-      if (version.compareTo(ProtocolVersion.MINECRAFT_1_9_1) >= 0) {\n-        buf.writeInt(dimension);\n-      } else {\n-        buf.writeByte(dimension);\n-      }\n+      buf.writeByte(dimension);\n     }\n     if (version.compareTo(ProtocolVersion.MINECRAFT_1_13_2) <= 0) {\n       buf.writeByte(difficulty);\n", "next_change": {"commit": "18e595397660ea6651bb4c86e1bb3a6addf1dd24", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\nindex ef531570..8ea5cbeb 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\n", "chunk": "@@ -198,8 +180,10 @@ public class JoinGame implements MinecraftPacket {\n     buf.writeInt(entityId);\n     buf.writeByte(gamemode);\n     if (version.compareTo(ProtocolVersion.MINECRAFT_1_16) >= 0) {\n-      ProtocolUtils.writeCompoundTag(buf, dimensionRegistry);\n-      ProtocolUtils.writeString(buf, dimensionRegistryName);\n+      ProtocolUtils.writeStringArray(buf, dimensionRegistry.getWorldNames().toArray(new String[dimensionRegistry.getWorldNames().size()]));\n+      ProtocolUtils.writeCompoundTag(buf, dimensionRegistry.encodeToCompoundTag());\n+      ProtocolUtils.writeString(buf, dimensionInfo.getDimensionIdentifier());\n+      ProtocolUtils.writeString(buf, dimensionInfo.getDimensionLevelName());\n     } else if (version.compareTo(ProtocolVersion.MINECRAFT_1_9_1) >= 0) {\n       buf.writeInt(dimension);\n     } else {\n", "next_change": {"commit": "368d50b4555a87f0fb5ca734947f098e86ccac96", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\nindex 8ea5cbeb..64104ebf 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\n", "chunk": "@@ -180,10 +175,10 @@ public class JoinGame implements MinecraftPacket {\n     buf.writeInt(entityId);\n     buf.writeByte(gamemode);\n     if (version.compareTo(ProtocolVersion.MINECRAFT_1_16) >= 0) {\n-      ProtocolUtils.writeStringArray(buf, dimensionRegistry.getWorldNames().toArray(new String[dimensionRegistry.getWorldNames().size()]));\n-      ProtocolUtils.writeCompoundTag(buf, dimensionRegistry.encodeToCompoundTag());\n+      ProtocolUtils.writeStringArray(buf, dimensionRegistry.getLevelNames());\n+      ProtocolUtils.writeCompoundTag(buf, dimensionRegistry.encodeRegistry());\n       ProtocolUtils.writeString(buf, dimensionInfo.getDimensionIdentifier());\n-      ProtocolUtils.writeString(buf, dimensionInfo.getDimensionLevelName());\n+      ProtocolUtils.writeString(buf, dimensionInfo.getLevelName());\n     } else if (version.compareTo(ProtocolVersion.MINECRAFT_1_9_1) >= 0) {\n       buf.writeInt(dimension);\n     } else {\n", "next_change": {"commit": "aa4a8de2fd474325927be5e221534a4f98a7a046", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\nindex 64104ebf..56e1d800 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\n", "chunk": "@@ -177,7 +174,7 @@ public class JoinGame implements MinecraftPacket {\n     if (version.compareTo(ProtocolVersion.MINECRAFT_1_16) >= 0) {\n       ProtocolUtils.writeStringArray(buf, dimensionRegistry.getLevelNames());\n       ProtocolUtils.writeCompoundTag(buf, dimensionRegistry.encodeRegistry());\n-      ProtocolUtils.writeString(buf, dimensionInfo.getDimensionIdentifier());\n+      ProtocolUtils.writeString(buf, dimensionInfo.getRegistryIdentifier());\n       ProtocolUtils.writeString(buf, dimensionInfo.getLevelName());\n     } else if (version.compareTo(ProtocolVersion.MINECRAFT_1_9_1) >= 0) {\n       buf.writeInt(dimension);\n", "next_change": {"commit": "ef5b9cf183da0eda038374f01dc342bbea5d2d40", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\nindex 56e1d800..d000320a 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\n", "chunk": "@@ -172,7 +177,8 @@ public class JoinGame implements MinecraftPacket {\n     buf.writeInt(entityId);\n     buf.writeByte(gamemode);\n     if (version.compareTo(ProtocolVersion.MINECRAFT_1_16) >= 0) {\n-      ProtocolUtils.writeStringArray(buf, dimensionRegistry.getLevelNames());\n+      ProtocolUtils.writeStringArray(buf, dimensionRegistry.getLevelNames().toArray(\n+              new String[dimensionRegistry.getLevelNames().size()]));\n       ProtocolUtils.writeCompoundTag(buf, dimensionRegistry.encodeRegistry());\n       ProtocolUtils.writeString(buf, dimensionInfo.getRegistryIdentifier());\n       ProtocolUtils.writeString(buf, dimensionInfo.getLevelName());\n", "next_change": {"commit": "a1ab29186b26145c88f07552f6a1ad81bdd2cc22", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\nindex d000320a..630a60de 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\n", "chunk": "@@ -177,6 +183,7 @@ public class JoinGame implements MinecraftPacket {\n     buf.writeInt(entityId);\n     buf.writeByte(gamemode);\n     if (version.compareTo(ProtocolVersion.MINECRAFT_1_16) >= 0) {\n+      buf.writeByte(previousGamemode);\n       ProtocolUtils.writeStringArray(buf, dimensionRegistry.getLevelNames().toArray(\n               new String[dimensionRegistry.getLevelNames().size()]));\n       ProtocolUtils.writeCompoundTag(buf, dimensionRegistry.encodeRegistry());\n", "next_change": null}]}}]}}]}}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ3OTg2NA==", "url": "https://github.com/PaperMC/Velocity/pull/310#discussion_r429479864", "body": "`// added in 1.16`", "bodyText": "// added in 1.16", "bodyHTML": "<p dir=\"auto\"><code>// added in 1.16</code></p>", "author": "mikroskeem", "createdAt": "2020-05-22T22:34:06Z", "path": "proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/brigadier/ArgumentPropertyRegistry.java", "diffHunk": "@@ -134,5 +134,6 @@ public static void serialize(ByteBuf buf, ArgumentType<?> type) {\n     dummy(\"minecraft:int_range\", DUMMY);\n     dummy(\"minecraft:float_range\", DUMMY);\n     dummy(\"minecraft:time\", DUMMY); // added in 1.14\n+    dummy(\"minecraft:uuid\", DUMMY);", "originalCommit": "d37b6a361cb05f69db2608c29c4608dc6881edc7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fca73bae675d396cb584fc48e2c0548cc6595e58", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/brigadier/ArgumentPropertyRegistry.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/brigadier/ArgumentPropertyRegistry.java\nindex 56c2a06c..7c9b8fb9 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/brigadier/ArgumentPropertyRegistry.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/brigadier/ArgumentPropertyRegistry.java\n", "chunk": "@@ -134,6 +134,6 @@ public class ArgumentPropertyRegistry {\n     dummy(\"minecraft:int_range\", DUMMY);\n     dummy(\"minecraft:float_range\", DUMMY);\n     dummy(\"minecraft:time\", DUMMY); // added in 1.14\n-    dummy(\"minecraft:uuid\", DUMMY);\n+    dummy(\"minecraft:uuid\", DUMMY); // added in 1.16\n   }\n }\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ4MDAwMA==", "url": "https://github.com/PaperMC/Velocity/pull/310#discussion_r429480000", "body": "Drop this `else` block, move contents out from it", "bodyText": "Drop this else block, move contents out from it", "bodyHTML": "<p dir=\"auto\">Drop this <code>else</code> block, move contents out from it</p>", "author": "mikroskeem", "createdAt": "2020-05-22T22:34:57Z", "path": "proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java", "diffHunk": "@@ -153,6 +160,81 @@ public static void writeUuid(ByteBuf buf, UUID uuid) {\n     buf.writeLong(uuid.getLeastSignificantBits());\n   }\n \n+  /**\n+   * Reads an UUID stored as an Integer Array from the {@code buf}.\n+   * @param buf the buffer to read from\n+   * @return the UUID from the buffer\n+   */\n+  public static UUID readUuidIntArray(ByteBuf buf) {\n+    long msbHigh = (long) buf.readInt() << 32;\n+    long msbLow = (long) buf.readInt() & 0xFFFFFFFFL;\n+    long msb = msbHigh | msbLow;\n+    long lsbHigh = (long) buf.readInt() << 32;\n+    long lsbLow = (long) buf.readInt() & 0xFFFFFFFFL;\n+    long lsb = lsbHigh | lsbLow;\n+    return new UUID(msb, lsb);\n+  }\n+\n+  /**\n+   * Writes an UUID as an Integer Array to the {@code buf}.\n+   * @param buf the buffer to write to\n+   * @param uuid the UUID to write\n+   */\n+  public static void writeUuidIntArray(ByteBuf buf, UUID uuid) {\n+    buf.writeInt((int) (uuid.getMostSignificantBits() >> 32));\n+    buf.writeInt((int) uuid.getMostSignificantBits());\n+    buf.writeInt((int) (uuid.getLeastSignificantBits() >> 32));\n+    buf.writeInt((int) uuid.getLeastSignificantBits());\n+  }\n+\n+  /**\n+   * Reads a {@link net.kyori.nbt.CompoundTag} from the {@code buf}.\n+   * @param buf the buffer to read from\n+   * @return {@link net.kyori.nbt.CompoundTag} the CompoundTag from the buffer\n+   */\n+  public static CompoundTag readCompoundTag(ByteBuf buf) {\n+    int indexBefore = buf.readerIndex();\n+    byte startType = buf.readByte();\n+    if (startType == 0) {\n+      return null;\n+    } else {", "originalCommit": "d37b6a361cb05f69db2608c29c4608dc6881edc7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fca73bae675d396cb584fc48e2c0548cc6595e58", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\nindex c0cbc136..628ec324 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n", "chunk": "@@ -196,22 +198,21 @@ public enum ProtocolUtils {\n     int indexBefore = buf.readerIndex();\n     byte startType = buf.readByte();\n     if (startType == 0) {\n-      return null;\n-    } else {\n-      buf.readerIndex(indexBefore);\n-      try {\n-        DataInput input = new ByteBufInputStream(buf);\n-        byte type = input.readByte();\n-        if (type != 10) {\n-          return null;\n-        }\n-        input.readUTF();\n-        CompoundTag ret = new CompoundTag();\n-        ret.read(input, 0);\n-        return ret;\n-      } catch (IOException e) {\n-        return null;\n+      throw new DecoderException(\"Invalid NBT start-type (end/empty)\");\n+    }\n+    buf.readerIndex(indexBefore);\n+    try {\n+      DataInput input = new ByteBufInputStream(buf);\n+      byte type = input.readByte();\n+      if (type != 10) {\n+        throw new DecoderException(\"NBTTag is not a CompoundTag\");\n       }\n+      input.readUTF(); // Head-padding\n+      CompoundTag compoundTag = new CompoundTag();\n+      compoundTag.read(input, 0);\n+      return compoundTag;\n+    } catch (IOException e) {\n+      throw new DecoderException(\"Unable to decode NBT CompoundTag at \" + indexBefore);\n     }\n   }\n \n", "next_change": {"commit": "101a6a58dd7a1c2af13edd897eade28ac92599ba", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\nindex 628ec324..bb7516aa 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n", "chunk": "@@ -202,17 +204,10 @@ public enum ProtocolUtils {\n     }\n     buf.readerIndex(indexBefore);\n     try {\n-      DataInput input = new ByteBufInputStream(buf);\n-      byte type = input.readByte();\n-      if (type != 10) {\n-        throw new DecoderException(\"NBTTag is not a CompoundTag\");\n-      }\n-      input.readUTF(); // Head-padding\n-      CompoundTag compoundTag = new CompoundTag();\n-      compoundTag.read(input, 0);\n-      return compoundTag;\n-    } catch (IOException e) {\n-      throw new DecoderException(\"Unable to decode NBT CompoundTag at \" + indexBefore);\n+      return TagIO.readDataInput(new ByteBufInputStream(buf));\n+    } catch (IOException thrown) {\n+      throw new DecoderException(\n+              \"Unable to parse NBT CompoundTag, full error: \" + thrown.getMessage());\n     }\n   }\n \n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ4MDA1NA==", "url": "https://github.com/PaperMC/Velocity/pull/310#discussion_r429480054", "body": "Could use try-resources here", "bodyText": "Could use try-resources here", "bodyHTML": "<p dir=\"auto\">Could use try-resources here</p>", "author": "mikroskeem", "createdAt": "2020-05-22T22:35:16Z", "path": "proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java", "diffHunk": "@@ -153,6 +160,81 @@ public static void writeUuid(ByteBuf buf, UUID uuid) {\n     buf.writeLong(uuid.getLeastSignificantBits());\n   }\n \n+  /**\n+   * Reads an UUID stored as an Integer Array from the {@code buf}.\n+   * @param buf the buffer to read from\n+   * @return the UUID from the buffer\n+   */\n+  public static UUID readUuidIntArray(ByteBuf buf) {\n+    long msbHigh = (long) buf.readInt() << 32;\n+    long msbLow = (long) buf.readInt() & 0xFFFFFFFFL;\n+    long msb = msbHigh | msbLow;\n+    long lsbHigh = (long) buf.readInt() << 32;\n+    long lsbLow = (long) buf.readInt() & 0xFFFFFFFFL;\n+    long lsb = lsbHigh | lsbLow;\n+    return new UUID(msb, lsb);\n+  }\n+\n+  /**\n+   * Writes an UUID as an Integer Array to the {@code buf}.\n+   * @param buf the buffer to write to\n+   * @param uuid the UUID to write\n+   */\n+  public static void writeUuidIntArray(ByteBuf buf, UUID uuid) {\n+    buf.writeInt((int) (uuid.getMostSignificantBits() >> 32));\n+    buf.writeInt((int) uuid.getMostSignificantBits());\n+    buf.writeInt((int) (uuid.getLeastSignificantBits() >> 32));\n+    buf.writeInt((int) uuid.getLeastSignificantBits());\n+  }\n+\n+  /**\n+   * Reads a {@link net.kyori.nbt.CompoundTag} from the {@code buf}.\n+   * @param buf the buffer to read from\n+   * @return {@link net.kyori.nbt.CompoundTag} the CompoundTag from the buffer\n+   */\n+  public static CompoundTag readCompoundTag(ByteBuf buf) {\n+    int indexBefore = buf.readerIndex();\n+    byte startType = buf.readByte();\n+    if (startType == 0) {\n+      return null;\n+    } else {\n+      buf.readerIndex(indexBefore);\n+      try {\n+        DataInput input = new ByteBufInputStream(buf);", "originalCommit": "d37b6a361cb05f69db2608c29c4608dc6881edc7", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTUzMjEyNQ==", "url": "https://github.com/VelocityPowered/Velocity/pull/310#discussion_r429532125", "bodyText": "No, DataInput is not Closeable", "author": "Xernium", "createdAt": "2020-05-23T09:50:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ4MDA1NA=="}], "type": "inlineReview", "revised_code": {"commit": "fca73bae675d396cb584fc48e2c0548cc6595e58", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\nindex c0cbc136..628ec324 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n", "chunk": "@@ -196,22 +198,21 @@ public enum ProtocolUtils {\n     int indexBefore = buf.readerIndex();\n     byte startType = buf.readByte();\n     if (startType == 0) {\n-      return null;\n-    } else {\n-      buf.readerIndex(indexBefore);\n-      try {\n-        DataInput input = new ByteBufInputStream(buf);\n-        byte type = input.readByte();\n-        if (type != 10) {\n-          return null;\n-        }\n-        input.readUTF();\n-        CompoundTag ret = new CompoundTag();\n-        ret.read(input, 0);\n-        return ret;\n-      } catch (IOException e) {\n-        return null;\n+      throw new DecoderException(\"Invalid NBT start-type (end/empty)\");\n+    }\n+    buf.readerIndex(indexBefore);\n+    try {\n+      DataInput input = new ByteBufInputStream(buf);\n+      byte type = input.readByte();\n+      if (type != 10) {\n+        throw new DecoderException(\"NBTTag is not a CompoundTag\");\n       }\n+      input.readUTF(); // Head-padding\n+      CompoundTag compoundTag = new CompoundTag();\n+      compoundTag.read(input, 0);\n+      return compoundTag;\n+    } catch (IOException e) {\n+      throw new DecoderException(\"Unable to decode NBT CompoundTag at \" + indexBefore);\n     }\n   }\n \n", "next_change": {"commit": "101a6a58dd7a1c2af13edd897eade28ac92599ba", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\nindex 628ec324..bb7516aa 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n", "chunk": "@@ -202,17 +204,10 @@ public enum ProtocolUtils {\n     }\n     buf.readerIndex(indexBefore);\n     try {\n-      DataInput input = new ByteBufInputStream(buf);\n-      byte type = input.readByte();\n-      if (type != 10) {\n-        throw new DecoderException(\"NBTTag is not a CompoundTag\");\n-      }\n-      input.readUTF(); // Head-padding\n-      CompoundTag compoundTag = new CompoundTag();\n-      compoundTag.read(input, 0);\n-      return compoundTag;\n-    } catch (IOException e) {\n-      throw new DecoderException(\"Unable to decode NBT CompoundTag at \" + indexBefore);\n+      return TagIO.readDataInput(new ByteBufInputStream(buf));\n+    } catch (IOException thrown) {\n+      throw new DecoderException(\n+              \"Unable to parse NBT CompoundTag, full error: \" + thrown.getMessage());\n     }\n   }\n \n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ4MDEwNw==", "url": "https://github.com/PaperMC/Velocity/pull/310#discussion_r429480107", "body": "See comments for `readCompoundTag`", "bodyText": "See comments for readCompoundTag", "bodyHTML": "<p dir=\"auto\">See comments for <code>readCompoundTag</code></p>", "author": "mikroskeem", "createdAt": "2020-05-22T22:35:30Z", "path": "proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java", "diffHunk": "@@ -153,6 +160,81 @@ public static void writeUuid(ByteBuf buf, UUID uuid) {\n     buf.writeLong(uuid.getLeastSignificantBits());\n   }\n \n+  /**\n+   * Reads an UUID stored as an Integer Array from the {@code buf}.\n+   * @param buf the buffer to read from\n+   * @return the UUID from the buffer\n+   */\n+  public static UUID readUuidIntArray(ByteBuf buf) {\n+    long msbHigh = (long) buf.readInt() << 32;\n+    long msbLow = (long) buf.readInt() & 0xFFFFFFFFL;\n+    long msb = msbHigh | msbLow;\n+    long lsbHigh = (long) buf.readInt() << 32;\n+    long lsbLow = (long) buf.readInt() & 0xFFFFFFFFL;\n+    long lsb = lsbHigh | lsbLow;\n+    return new UUID(msb, lsb);\n+  }\n+\n+  /**\n+   * Writes an UUID as an Integer Array to the {@code buf}.\n+   * @param buf the buffer to write to\n+   * @param uuid the UUID to write\n+   */\n+  public static void writeUuidIntArray(ByteBuf buf, UUID uuid) {\n+    buf.writeInt((int) (uuid.getMostSignificantBits() >> 32));\n+    buf.writeInt((int) uuid.getMostSignificantBits());\n+    buf.writeInt((int) (uuid.getLeastSignificantBits() >> 32));\n+    buf.writeInt((int) uuid.getLeastSignificantBits());\n+  }\n+\n+  /**\n+   * Reads a {@link net.kyori.nbt.CompoundTag} from the {@code buf}.\n+   * @param buf the buffer to read from\n+   * @return {@link net.kyori.nbt.CompoundTag} the CompoundTag from the buffer\n+   */\n+  public static CompoundTag readCompoundTag(ByteBuf buf) {\n+    int indexBefore = buf.readerIndex();\n+    byte startType = buf.readByte();\n+    if (startType == 0) {\n+      return null;\n+    } else {\n+      buf.readerIndex(indexBefore);\n+      try {\n+        DataInput input = new ByteBufInputStream(buf);\n+        byte type = input.readByte();\n+        if (type != 10) {\n+          return null;\n+        }\n+        input.readUTF();\n+        CompoundTag ret = new CompoundTag();\n+        ret.read(input, 0);\n+        return ret;\n+      } catch (IOException e) {\n+        return null;\n+      }\n+    }\n+  }\n+\n+  /**\n+   * Writes a CompoundTag to the {@code buf}.\n+   * @param buf the buffer to write to\n+   * @param compoundTag the CompoundTag to write\n+   */\n+  public static void writeCompoundTag(ByteBuf buf, CompoundTag compoundTag) {\n+    if (compoundTag == null) {\n+      buf.writeByte(0);\n+    } else {", "originalCommit": "d37b6a361cb05f69db2608c29c4608dc6881edc7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "fca73bae675d396cb584fc48e2c0548cc6595e58", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\nindex c0cbc136..628ec324 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n", "chunk": "@@ -223,15 +224,15 @@ public enum ProtocolUtils {\n   public static void writeCompoundTag(ByteBuf buf, CompoundTag compoundTag) {\n     if (compoundTag == null) {\n       buf.writeByte(0);\n-    } else {\n-      try {\n-        DataOutput output = new ByteBufOutputStream(buf);\n-        output.writeByte(10);\n-        output.writeUTF(\"\");\n-        compoundTag.write(output);\n-      } catch (IOException e) {\n-        e.printStackTrace();\n-      }\n+      return;\n+    }\n+    try {\n+      DataOutput output = new ByteBufOutputStream(buf);\n+      output.writeByte(10); // Type 10 - CompoundTag\n+      output.writeUTF(\"\"); // Head-padding\n+      compoundTag.write(output);\n+    } catch (IOException e) {\n+      throw new EncoderException(\"Unable to encode NBT CompoundTag\");\n     }\n   }\n \n", "next_change": {"commit": "18e595397660ea6651bb4c86e1bb3a6addf1dd24", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\nindex 628ec324..e2b55c54 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n", "chunk": "@@ -236,6 +237,36 @@ public enum ProtocolUtils {\n     }\n   }\n \n+  /**\n+   * Reads a String array from the {@code buf}.\n+   * @param buf the buffer to read from\n+   * @return the String array from the buffer\n+   */\n+  public static String[] readStringArray(ByteBuf buf) {\n+    int length = readVarInt(buf);\n+    String[] ret = new String[length];\n+    for(int i = 0; i < length; i++) {\n+      ret[i] = readString(buf);\n+    }\n+    return ret;\n+  }\n+\n+  /**\n+   * Writes a String Array to the {@code buf}.\n+   * @param buf the buffer to write to\n+   * @param stringArray the array to write\n+   */\n+  public static void writeStringArray(ByteBuf buf, String[] stringArray) {\n+    if (stringArray == null) {\n+      writeVarInt(buf, 0);\n+      return;\n+    }\n+    writeVarInt(buf, stringArray.length);\n+    for(int i = 0; i < stringArray.length; i++) {\n+      writeString(buf, stringArray[i]);\n+    }\n+  }\n+\n   /**\n    * Writes a list of {@link com.velocitypowered.api.util.GameProfile.Property} to the buffer.\n    * @param buf the buffer to write to\n", "next_change": {"commit": "6734ef3a087ed3f068ee9ce809d93ce31ce844bc", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\nindex e2b55c54..a272c802 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n", "chunk": "@@ -262,7 +262,7 @@ public enum ProtocolUtils {\n       return;\n     }\n     writeVarInt(buf, stringArray.length);\n-    for(int i = 0; i < stringArray.length; i++) {\n+    for (int i = 0; i < stringArray.length; i++) {\n       writeString(buf, stringArray[i]);\n     }\n   }\n", "next_change": null}]}}]}}]}}, {"oid": "fca73bae675d396cb584fc48e2c0548cc6595e58", "url": "https://github.com/PaperMC/Velocity/commit/fca73bae675d396cb584fc48e2c0548cc6595e58", "message": "Some minor touch-ups", "committedDate": "2020-05-23T09:46:27Z", "type": "commit"}, {"oid": "197bc4f288f4b01f3348e98d84e5facb0f224518", "url": "https://github.com/PaperMC/Velocity/commit/197bc4f288f4b01f3348e98d84e5facb0f224518", "message": "Make checkstyle happy again", "committedDate": "2020-05-23T09:49:27Z", "type": "commit"}, {"oid": "38487c5bba0d2376312f663c47bbea906c32779e", "url": "https://github.com/PaperMC/Velocity/commit/38487c5bba0d2376312f663c47bbea906c32779e", "message": "Server-change mechanics update", "committedDate": "2020-05-23T11:03:33Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTUzNjM1Nw==", "url": "https://github.com/PaperMC/Velocity/pull/310#discussion_r429536357", "body": "Note to self: Update the comments here", "bodyText": "Note to self: Update the comments here", "bodyHTML": "<p dir=\"auto\">Note to self: Update the comments here</p>", "author": "Xernium", "createdAt": "2020-05-23T11:04:47Z", "path": "proxy/src/main/java/com/velocitypowered/proxy/connection/client/ClientPlaySessionHandler.java", "diffHunk": "@@ -334,12 +334,15 @@ public void handleBackendJoinGame(JoinGame joinGame, VelocityServerConnection de\n       // to perform entity ID rewrites, eliminating potential issues from rewriting packets and\n       // improving compatibility with mods.\n       player.getMinecraftConnection().delayedWrite(joinGame);", "originalCommit": "38487c5bba0d2376312f663c47bbea906c32779e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "18e595397660ea6651bb4c86e1bb3a6addf1dd24", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/client/ClientPlaySessionHandler.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/client/ClientPlaySessionHandler.java\nindex d8e3d371..5a0820cd 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/client/ClientPlaySessionHandler.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/client/ClientPlaySessionHandler.java\n", "chunk": "@@ -334,20 +336,59 @@ public class ClientPlaySessionHandler implements MinecraftSessionHandler {\n       // to perform entity ID rewrites, eliminating potential issues from rewriting packets and\n       // improving compatibility with mods.\n       player.getMinecraftConnection().delayedWrite(joinGame);\n+      int tempDim = joinGame.getDimension() == 0 ? -1 : 0;\n+      // Since 1.16 this dynamic changed:\n+      // The respawn packet has a keepMetadata flag which should\n+      // be true for dimension switches, so by double switching\n+      // we can keep the flow of the game\n+      // There is a problem here though: By only sending one dimension\n+      // in the registry we can't do that, so we need to run an *unclean* switch.\n+      // NOTE! We can't just send a fake dimension in the registry either\n+      // to get two dimensions, as modded games will break with this.\n+      final DimensionRegistry dimensionRegistry = joinGame.getDimensionRegistry();\n+      DimensionInfo dimensionInfo = joinGame.getDimensionInfo(); // 1.16+\n+      // The doubleSwitch variable doubles as keepMetadata flag for an unclean switch as\n+      // well as to indicate the second switch.\n+      boolean doubleSwitch;\n+      // This is not ONE if because this will all be null in < 1.16\n       if (player.getProtocolVersion().compareTo(ProtocolVersion.MINECRAFT_1_16) < 0) {\n-        int tempDim = joinGame.getDimension() == 0 ? -1 : 0;\n+        if(dimensionRegistry.getWorldNames().size() > 1 && dimensionRegistry.getDimensionRegistry().size() > 1){\n+          String tmpDimLevelName = null;\n+          for(String s : dimensionRegistry.getWorldNames()){\n+            if(!s.equals(dimensionInfo.getDimensionLevelName())){\n+              tmpDimLevelName = s;\n+              break;\n+            }\n+          }\n+          String tmpDimIdentifier = null;\n+          for(String s : dimensionRegistry.getDimensionRegistry().keySet()){\n+            if(!s.equals(dimensionInfo.getDimensionIdentifier())){\n+              tmpDimIdentifier = s;\n+              break;\n+            }\n+          }\n+          dimensionInfo = new DimensionInfo(tmpDimIdentifier, tmpDimLevelName, true, false);\n+          doubleSwitch = true;\n+        } else {\n+          doubleSwitch = false;\n+          // We should add a warning here.\n+        }\n+      } else {\n+        doubleSwitch = true;\n+      }\n+      if(doubleSwitch) {\n         player.getMinecraftConnection().delayedWrite(\n                 new Respawn(tempDim, joinGame.getPartialHashedSeed(), joinGame.getDifficulty(),\n                         joinGame.getGamemode(), joinGame.getLevelType(),\n-                        joinGame.getShouldKeepPlayerData(),\n-                        joinGame.getIsDebug(), joinGame.getIsFlat(),\n-                        joinGame.getDimensionRegistryName()));\n+                        false, dimensionInfo));\n       }\n+\n       player.getMinecraftConnection().delayedWrite(\n           new Respawn(joinGame.getDimension(), joinGame.getPartialHashedSeed(),\n               joinGame.getDifficulty(), joinGame.getGamemode(), joinGame.getLevelType(),\n-                  joinGame.getShouldKeepPlayerData(), joinGame.getIsDebug(), joinGame.getIsFlat(),\n-                  joinGame.getDimensionRegistryName()));\n+                  doubleSwitch, joinGame.getDimensionInfo()));\n+\n+      destination.setActiveDimensionRegistry(joinGame.getDimensionRegistry()); // 1.16\n     }\n \n     // Remove previous boss bars. These don't get cleared when sending JoinGame, thus the need to\n", "next_change": {"commit": "368d50b4555a87f0fb5ca734947f098e86ccac96", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/client/ClientPlaySessionHandler.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/client/ClientPlaySessionHandler.java\nindex 5a0820cd..07132bac 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/client/ClientPlaySessionHandler.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/client/ClientPlaySessionHandler.java\n", "chunk": "@@ -336,57 +334,20 @@ public class ClientPlaySessionHandler implements MinecraftSessionHandler {\n       // to perform entity ID rewrites, eliminating potential issues from rewriting packets and\n       // improving compatibility with mods.\n       player.getMinecraftConnection().delayedWrite(joinGame);\n-      int tempDim = joinGame.getDimension() == 0 ? -1 : 0;\n       // Since 1.16 this dynamic changed:\n-      // The respawn packet has a keepMetadata flag which should\n-      // be true for dimension switches, so by double switching\n-      // we can keep the flow of the game\n-      // There is a problem here though: By only sending one dimension\n-      // in the registry we can't do that, so we need to run an *unclean* switch.\n-      // NOTE! We can't just send a fake dimension in the registry either\n-      // to get two dimensions, as modded games will break with this.\n-      final DimensionRegistry dimensionRegistry = joinGame.getDimensionRegistry();\n-      DimensionInfo dimensionInfo = joinGame.getDimensionInfo(); // 1.16+\n-      // The doubleSwitch variable doubles as keepMetadata flag for an unclean switch as\n-      // well as to indicate the second switch.\n-      boolean doubleSwitch;\n-      // This is not ONE if because this will all be null in < 1.16\n+      // We don't need to send two dimension swiches anymore!\n       if (player.getProtocolVersion().compareTo(ProtocolVersion.MINECRAFT_1_16) < 0) {\n-        if(dimensionRegistry.getWorldNames().size() > 1 && dimensionRegistry.getDimensionRegistry().size() > 1){\n-          String tmpDimLevelName = null;\n-          for(String s : dimensionRegistry.getWorldNames()){\n-            if(!s.equals(dimensionInfo.getDimensionLevelName())){\n-              tmpDimLevelName = s;\n-              break;\n-            }\n-          }\n-          String tmpDimIdentifier = null;\n-          for(String s : dimensionRegistry.getDimensionRegistry().keySet()){\n-            if(!s.equals(dimensionInfo.getDimensionIdentifier())){\n-              tmpDimIdentifier = s;\n-              break;\n-            }\n-          }\n-          dimensionInfo = new DimensionInfo(tmpDimIdentifier, tmpDimLevelName, true, false);\n-          doubleSwitch = true;\n-        } else {\n-          doubleSwitch = false;\n-          // We should add a warning here.\n-        }\n-      } else {\n-        doubleSwitch = true;\n-      }\n-      if(doubleSwitch) {\n+        int tempDim = joinGame.getDimension() == 0 ? -1 : 0;\n         player.getMinecraftConnection().delayedWrite(\n                 new Respawn(tempDim, joinGame.getPartialHashedSeed(), joinGame.getDifficulty(),\n                         joinGame.getGamemode(), joinGame.getLevelType(),\n-                        false, dimensionInfo));\n+                        false, joinGame.getDimensionInfo()));\n       }\n \n       player.getMinecraftConnection().delayedWrite(\n           new Respawn(joinGame.getDimension(), joinGame.getPartialHashedSeed(),\n               joinGame.getDifficulty(), joinGame.getGamemode(), joinGame.getLevelType(),\n-                  doubleSwitch, joinGame.getDimensionInfo()));\n+                  false, joinGame.getDimensionInfo()));\n \n       destination.setActiveDimensionRegistry(joinGame.getDimensionRegistry()); // 1.16\n     }\n", "next_change": {"commit": "a1ab29186b26145c88f07552f6a1ad81bdd2cc22", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/client/ClientPlaySessionHandler.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/client/ClientPlaySessionHandler.java\nindex 07132bac..0e6dbe72 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/client/ClientPlaySessionHandler.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/client/ClientPlaySessionHandler.java\n", "chunk": "@@ -341,13 +339,13 @@ public class ClientPlaySessionHandler implements MinecraftSessionHandler {\n         player.getMinecraftConnection().delayedWrite(\n                 new Respawn(tempDim, joinGame.getPartialHashedSeed(), joinGame.getDifficulty(),\n                         joinGame.getGamemode(), joinGame.getLevelType(),\n-                        false, joinGame.getDimensionInfo()));\n+                        false, joinGame.getDimensionInfo(), joinGame.getPreviousGamemode()));\n       }\n \n       player.getMinecraftConnection().delayedWrite(\n           new Respawn(joinGame.getDimension(), joinGame.getPartialHashedSeed(),\n               joinGame.getDifficulty(), joinGame.getGamemode(), joinGame.getLevelType(),\n-                  false, joinGame.getDimensionInfo()));\n+                  false, joinGame.getDimensionInfo(), joinGame.getPreviousGamemode()));\n \n       destination.setActiveDimensionRegistry(joinGame.getDimensionRegistry()); // 1.16\n     }\n", "next_change": null}]}}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU0Mjg0Mg==", "url": "https://github.com/PaperMC/Velocity/pull/310#discussion_r429542842", "body": "Imo a mark + reset is cleaner than storing the offset. https://netty.io/4.0/api/io/netty/buffer/ByteBuf.html#markReaderIndex--", "bodyText": "Imo a mark + reset is cleaner than storing the offset. https://netty.io/4.0/api/io/netty/buffer/ByteBuf.html#markReaderIndex--", "bodyHTML": "<p dir=\"auto\">Imo a mark + reset is cleaner than storing the offset. <a href=\"https://netty.io/4.0/api/io/netty/buffer/ByteBuf.html#markReaderIndex--\" rel=\"nofollow\">https://netty.io/4.0/api/io/netty/buffer/ByteBuf.html#markReaderIndex--</a></p>", "author": "hugmanrique", "createdAt": "2020-05-23T12:41:49Z", "path": "proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java", "diffHunk": "@@ -153,6 +162,80 @@ public static void writeUuid(ByteBuf buf, UUID uuid) {\n     buf.writeLong(uuid.getLeastSignificantBits());\n   }\n \n+  /**\n+   * Reads an UUID stored as an Integer Array from the {@code buf}.\n+   * @param buf the buffer to read from\n+   * @return the UUID from the buffer\n+   */\n+  public static UUID readUuidIntArray(ByteBuf buf) {\n+    long msbHigh = (long) buf.readInt() << 32;\n+    long msbLow = (long) buf.readInt() & 0xFFFFFFFFL;\n+    long msb = msbHigh | msbLow;\n+    long lsbHigh = (long) buf.readInt() << 32;\n+    long lsbLow = (long) buf.readInt() & 0xFFFFFFFFL;\n+    long lsb = lsbHigh | lsbLow;\n+    return new UUID(msb, lsb);\n+  }\n+\n+  /**\n+   * Writes an UUID as an Integer Array to the {@code buf}.\n+   * @param buf the buffer to write to\n+   * @param uuid the UUID to write\n+   */\n+  public static void writeUuidIntArray(ByteBuf buf, UUID uuid) {\n+    buf.writeInt((int) (uuid.getMostSignificantBits() >> 32));\n+    buf.writeInt((int) uuid.getMostSignificantBits());\n+    buf.writeInt((int) (uuid.getLeastSignificantBits() >> 32));\n+    buf.writeInt((int) uuid.getLeastSignificantBits());\n+  }\n+\n+  /**\n+   * Reads a {@link net.kyori.nbt.CompoundTag} from the {@code buf}.\n+   * @param buf the buffer to read from\n+   * @return {@link net.kyori.nbt.CompoundTag} the CompoundTag from the buffer\n+   */\n+  public static CompoundTag readCompoundTag(ByteBuf buf) {\n+    int indexBefore = buf.readerIndex();\n+    byte startType = buf.readByte();\n+    if (startType == 0) {\n+      throw new DecoderException(\"Invalid NBT start-type (end/empty)\");\n+    }\n+    buf.readerIndex(indexBefore);", "originalCommit": "38487c5bba0d2376312f663c47bbea906c32779e", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU0NDk4MA==", "url": "https://github.com/VelocityPowered/Velocity/pull/310#discussion_r429544980", "bodyText": "mark/reset is gone in the next major release of Netty: netty/netty#8535", "author": "astei", "createdAt": "2020-05-23T13:10:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU0Mjg0Mg=="}], "type": "inlineReview", "revised_code": {"commit": "18e595397660ea6651bb4c86e1bb3a6addf1dd24", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\nindex cfedec88..e2b55c54 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n", "chunk": "@@ -204,7 +205,7 @@ public enum ProtocolUtils {\n     try {\n       DataInput input = new ByteBufInputStream(buf);\n       byte type = input.readByte();\n-      if (type != 10) {\n+      if (type != TagType.COMPOUND.id()) {\n         throw new DecoderException(\"NBTTag is not a CompoundTag\");\n       }\n       input.readUTF(); // Head-padding\n", "next_change": {"commit": "101a6a58dd7a1c2af13edd897eade28ac92599ba", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\nindex e2b55c54..bb7516aa 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n", "chunk": "@@ -203,17 +204,10 @@ public enum ProtocolUtils {\n     }\n     buf.readerIndex(indexBefore);\n     try {\n-      DataInput input = new ByteBufInputStream(buf);\n-      byte type = input.readByte();\n-      if (type != TagType.COMPOUND.id()) {\n-        throw new DecoderException(\"NBTTag is not a CompoundTag\");\n-      }\n-      input.readUTF(); // Head-padding\n-      CompoundTag compoundTag = new CompoundTag();\n-      compoundTag.read(input, 0);\n-      return compoundTag;\n-    } catch (IOException e) {\n-      throw new DecoderException(\"Unable to decode NBT CompoundTag at \" + indexBefore);\n+      return TagIO.readDataInput(new ByteBufInputStream(buf));\n+    } catch (IOException thrown) {\n+      throw new DecoderException(\n+              \"Unable to parse NBT CompoundTag, full error: \" + thrown.getMessage());\n     }\n   }\n \n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU0MzA1Ng==", "url": "https://github.com/PaperMC/Velocity/pull/310#discussion_r429543056", "body": "Replace constant by `TagType.COMPOUND.id()` (https://github.com/KyoriPowered/nbt/blob/0ec540ee377d902d5d96fa8d2aca3d3f2b35abe4/src/main/java/net/kyori/nbt/TagType.java#L78 )", "bodyText": "Replace constant by TagType.COMPOUND.id() (https://github.com/KyoriPowered/nbt/blob/0ec540ee377d902d5d96fa8d2aca3d3f2b35abe4/src/main/java/net/kyori/nbt/TagType.java#L78 )", "bodyHTML": "<p dir=\"auto\">Replace constant by <code>TagType.COMPOUND.id()</code> (<a href=\"https://github.com/KyoriPowered/nbt/blob/0ec540ee377d902d5d96fa8d2aca3d3f2b35abe4/src/main/java/net/kyori/nbt/TagType.java#L78\">https://github.com/KyoriPowered/nbt/blob/0ec540ee377d902d5d96fa8d2aca3d3f2b35abe4/src/main/java/net/kyori/nbt/TagType.java#L78</a> )</p>", "author": "hugmanrique", "createdAt": "2020-05-23T12:44:37Z", "path": "proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java", "diffHunk": "@@ -153,6 +162,80 @@ public static void writeUuid(ByteBuf buf, UUID uuid) {\n     buf.writeLong(uuid.getLeastSignificantBits());\n   }\n \n+  /**\n+   * Reads an UUID stored as an Integer Array from the {@code buf}.\n+   * @param buf the buffer to read from\n+   * @return the UUID from the buffer\n+   */\n+  public static UUID readUuidIntArray(ByteBuf buf) {\n+    long msbHigh = (long) buf.readInt() << 32;\n+    long msbLow = (long) buf.readInt() & 0xFFFFFFFFL;\n+    long msb = msbHigh | msbLow;\n+    long lsbHigh = (long) buf.readInt() << 32;\n+    long lsbLow = (long) buf.readInt() & 0xFFFFFFFFL;\n+    long lsb = lsbHigh | lsbLow;\n+    return new UUID(msb, lsb);\n+  }\n+\n+  /**\n+   * Writes an UUID as an Integer Array to the {@code buf}.\n+   * @param buf the buffer to write to\n+   * @param uuid the UUID to write\n+   */\n+  public static void writeUuidIntArray(ByteBuf buf, UUID uuid) {\n+    buf.writeInt((int) (uuid.getMostSignificantBits() >> 32));\n+    buf.writeInt((int) uuid.getMostSignificantBits());\n+    buf.writeInt((int) (uuid.getLeastSignificantBits() >> 32));\n+    buf.writeInt((int) uuid.getLeastSignificantBits());\n+  }\n+\n+  /**\n+   * Reads a {@link net.kyori.nbt.CompoundTag} from the {@code buf}.\n+   * @param buf the buffer to read from\n+   * @return {@link net.kyori.nbt.CompoundTag} the CompoundTag from the buffer\n+   */\n+  public static CompoundTag readCompoundTag(ByteBuf buf) {\n+    int indexBefore = buf.readerIndex();\n+    byte startType = buf.readByte();\n+    if (startType == 0) {\n+      throw new DecoderException(\"Invalid NBT start-type (end/empty)\");\n+    }\n+    buf.readerIndex(indexBefore);\n+    try {\n+      DataInput input = new ByteBufInputStream(buf);\n+      byte type = input.readByte();\n+      if (type != 10) {", "originalCommit": "38487c5bba0d2376312f663c47bbea906c32779e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "18e595397660ea6651bb4c86e1bb3a6addf1dd24", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\nindex cfedec88..e2b55c54 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n", "chunk": "@@ -204,7 +205,7 @@ public enum ProtocolUtils {\n     try {\n       DataInput input = new ByteBufInputStream(buf);\n       byte type = input.readByte();\n-      if (type != 10) {\n+      if (type != TagType.COMPOUND.id()) {\n         throw new DecoderException(\"NBTTag is not a CompoundTag\");\n       }\n       input.readUTF(); // Head-padding\n", "next_change": {"commit": "101a6a58dd7a1c2af13edd897eade28ac92599ba", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\nindex e2b55c54..bb7516aa 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n", "chunk": "@@ -203,17 +204,10 @@ public enum ProtocolUtils {\n     }\n     buf.readerIndex(indexBefore);\n     try {\n-      DataInput input = new ByteBufInputStream(buf);\n-      byte type = input.readByte();\n-      if (type != TagType.COMPOUND.id()) {\n-        throw new DecoderException(\"NBTTag is not a CompoundTag\");\n-      }\n-      input.readUTF(); // Head-padding\n-      CompoundTag compoundTag = new CompoundTag();\n-      compoundTag.read(input, 0);\n-      return compoundTag;\n-    } catch (IOException e) {\n-      throw new DecoderException(\"Unable to decode NBT CompoundTag at \" + indexBefore);\n+      return TagIO.readDataInput(new ByteBufInputStream(buf));\n+    } catch (IOException thrown) {\n+      throw new DecoderException(\n+              \"Unable to parse NBT CompoundTag, full error: \" + thrown.getMessage());\n     }\n   }\n \n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU0MzI0MQ==", "url": "https://github.com/PaperMC/Velocity/pull/310#discussion_r429543241", "body": "See above", "bodyText": "See above", "bodyHTML": "<p dir=\"auto\">See above</p>", "author": "hugmanrique", "createdAt": "2020-05-23T12:47:09Z", "path": "proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java", "diffHunk": "@@ -153,6 +162,80 @@ public static void writeUuid(ByteBuf buf, UUID uuid) {\n     buf.writeLong(uuid.getLeastSignificantBits());\n   }\n \n+  /**\n+   * Reads an UUID stored as an Integer Array from the {@code buf}.\n+   * @param buf the buffer to read from\n+   * @return the UUID from the buffer\n+   */\n+  public static UUID readUuidIntArray(ByteBuf buf) {\n+    long msbHigh = (long) buf.readInt() << 32;\n+    long msbLow = (long) buf.readInt() & 0xFFFFFFFFL;\n+    long msb = msbHigh | msbLow;\n+    long lsbHigh = (long) buf.readInt() << 32;\n+    long lsbLow = (long) buf.readInt() & 0xFFFFFFFFL;\n+    long lsb = lsbHigh | lsbLow;\n+    return new UUID(msb, lsb);\n+  }\n+\n+  /**\n+   * Writes an UUID as an Integer Array to the {@code buf}.\n+   * @param buf the buffer to write to\n+   * @param uuid the UUID to write\n+   */\n+  public static void writeUuidIntArray(ByteBuf buf, UUID uuid) {\n+    buf.writeInt((int) (uuid.getMostSignificantBits() >> 32));\n+    buf.writeInt((int) uuid.getMostSignificantBits());\n+    buf.writeInt((int) (uuid.getLeastSignificantBits() >> 32));\n+    buf.writeInt((int) uuid.getLeastSignificantBits());\n+  }\n+\n+  /**\n+   * Reads a {@link net.kyori.nbt.CompoundTag} from the {@code buf}.\n+   * @param buf the buffer to read from\n+   * @return {@link net.kyori.nbt.CompoundTag} the CompoundTag from the buffer\n+   */\n+  public static CompoundTag readCompoundTag(ByteBuf buf) {\n+    int indexBefore = buf.readerIndex();\n+    byte startType = buf.readByte();\n+    if (startType == 0) {\n+      throw new DecoderException(\"Invalid NBT start-type (end/empty)\");\n+    }\n+    buf.readerIndex(indexBefore);\n+    try {\n+      DataInput input = new ByteBufInputStream(buf);\n+      byte type = input.readByte();\n+      if (type != 10) {\n+        throw new DecoderException(\"NBTTag is not a CompoundTag\");\n+      }\n+      input.readUTF(); // Head-padding\n+      CompoundTag compoundTag = new CompoundTag();\n+      compoundTag.read(input, 0);\n+      return compoundTag;\n+    } catch (IOException e) {\n+      throw new DecoderException(\"Unable to decode NBT CompoundTag at \" + indexBefore);\n+    }\n+  }\n+\n+  /**\n+   * Writes a CompoundTag to the {@code buf}.\n+   * @param buf the buffer to write to\n+   * @param compoundTag the CompoundTag to write\n+   */\n+  public static void writeCompoundTag(ByteBuf buf, CompoundTag compoundTag) {\n+    if (compoundTag == null) {\n+      buf.writeByte(0);\n+      return;\n+    }\n+    try {\n+      DataOutput output = new ByteBufOutputStream(buf);\n+      output.writeByte(10); // Type 10 - CompoundTag", "originalCommit": "38487c5bba0d2376312f663c47bbea906c32779e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "101a6a58dd7a1c2af13edd897eade28ac92599ba", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\nindex cfedec88..bb7516aa 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n", "chunk": "@@ -227,15 +222,42 @@ public enum ProtocolUtils {\n       return;\n     }\n     try {\n-      DataOutput output = new ByteBufOutputStream(buf);\n-      output.writeByte(10); // Type 10 - CompoundTag\n-      output.writeUTF(\"\"); // Head-padding\n-      compoundTag.write(output);\n+      TagIO.writeDataOutput(compoundTag, new ByteBufOutputStream(buf));\n     } catch (IOException e) {\n       throw new EncoderException(\"Unable to encode NBT CompoundTag\");\n     }\n   }\n \n+  /**\n+   * Reads a String array from the {@code buf}.\n+   * @param buf the buffer to read from\n+   * @return the String array from the buffer\n+   */\n+  public static String[] readStringArray(ByteBuf buf) {\n+    int length = readVarInt(buf);\n+    String[] ret = new String[length];\n+    for (int i = 0; i < length; i++) {\n+      ret[i] = readString(buf);\n+    }\n+    return ret;\n+  }\n+\n+  /**\n+   * Writes a String Array to the {@code buf}.\n+   * @param buf the buffer to write to\n+   * @param stringArray the array to write\n+   */\n+  public static void writeStringArray(ByteBuf buf, String[] stringArray) {\n+    if (stringArray == null) {\n+      writeVarInt(buf, 0);\n+      return;\n+    }\n+    writeVarInt(buf, stringArray.length);\n+    for (int i = 0; i < stringArray.length; i++) {\n+      writeString(buf, stringArray[i]);\n+    }\n+  }\n+\n   /**\n    * Writes a list of {@link com.velocitypowered.api.util.GameProfile.Property} to the buffer.\n    * @param buf the buffer to write to\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU0MzU0OQ==", "url": "https://github.com/PaperMC/Velocity/pull/310#discussion_r429543549", "body": "Minor nit: inconsistent use of `this`. Either use it for setting all fields, or use it for none.", "bodyText": "Minor nit: inconsistent use of this. Either use it for setting all fields, or use it for none.", "bodyHTML": "<p dir=\"auto\">Minor nit: inconsistent use of <code>this</code>. Either use it for setting all fields, or use it for none.</p>", "author": "hugmanrique", "createdAt": "2020-05-23T12:51:35Z", "path": "proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Respawn.java", "diffHunk": "@@ -74,33 +114,57 @@ public String toString() {\n         + \", difficulty=\" + difficulty\n         + \", gamemode=\" + gamemode\n         + \", levelType='\" + levelType + '\\''\n+        + \", shouldKeepPlayerData=\" + shouldKeepPlayerData\n+        + \", isDebug=\" + isDebug\n+        + \", isFlat='\" + isFlat\n+        + \", dimensionRegistryName='\" + dimensionRegistryName + '\\''\n         + '}';\n   }\n \n   @Override\n   public void decode(ByteBuf buf, ProtocolUtils.Direction direction, ProtocolVersion version) {\n-    this.dimension = buf.readInt();\n+    if (version.compareTo(ProtocolVersion.MINECRAFT_1_16) >= 0) {\n+      this.dimensionRegistryName = ProtocolUtils.readString(buf); // Not sure what the cap on that is\n+    } else {\n+      this.dimension = buf.readInt();\n+    }\n     if (version.compareTo(ProtocolVersion.MINECRAFT_1_13_2) <= 0) {\n       this.difficulty = buf.readUnsignedByte();\n     }\n     if (version.compareTo(ProtocolVersion.MINECRAFT_1_15) >= 0) {\n       this.partialHashedSeed = buf.readLong();\n     }\n     this.gamemode = buf.readUnsignedByte();\n-    this.levelType = ProtocolUtils.readString(buf, 16);\n+    if (version.compareTo(ProtocolVersion.MINECRAFT_1_16) >= 0) {\n+      isDebug = buf.readBoolean();\n+      isFlat = buf.readBoolean();\n+      shouldKeepPlayerData = buf.readBoolean();", "originalCommit": "38487c5bba0d2376312f663c47bbea906c32779e", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "18e595397660ea6651bb4c86e1bb3a6addf1dd24", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Respawn.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Respawn.java\nindex 0f988a5f..67fafb7f 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Respawn.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Respawn.java\n", "chunk": "@@ -136,8 +110,9 @@ public class Respawn implements MinecraftPacket {\n     }\n     this.gamemode = buf.readUnsignedByte();\n     if (version.compareTo(ProtocolVersion.MINECRAFT_1_16) >= 0) {\n-      isDebug = buf.readBoolean();\n-      isFlat = buf.readBoolean();\n+      boolean isDebug = buf.readBoolean();\n+      boolean isFlat = buf.readBoolean();\n+      this.dimensionInfo = new DimensionInfo(dimensionIdentifier, levelName, isFlat, isDebug);\n       shouldKeepPlayerData = buf.readBoolean();\n     } else {\n       this.levelType = ProtocolUtils.readString(buf, 16);\n", "next_change": {"commit": "6368b47e78a499b7c1cfada8f1d0913a1ca59c8c", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Respawn.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Respawn.java\nindex 67fafb7f..ba12ee9a 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Respawn.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Respawn.java\n", "chunk": "@@ -113,7 +113,7 @@ public class Respawn implements MinecraftPacket {\n       boolean isDebug = buf.readBoolean();\n       boolean isFlat = buf.readBoolean();\n       this.dimensionInfo = new DimensionInfo(dimensionIdentifier, levelName, isFlat, isDebug);\n-      shouldKeepPlayerData = buf.readBoolean();\n+      this.shouldKeepPlayerData = buf.readBoolean();\n     } else {\n       this.levelType = ProtocolUtils.readString(buf, 16);\n     }\n", "next_change": {"commit": "a1ab29186b26145c88f07552f6a1ad81bdd2cc22", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Respawn.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Respawn.java\nindex ba12ee9a..d14e9f8c 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Respawn.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Respawn.java\n", "chunk": "@@ -108,8 +120,9 @@ public class Respawn implements MinecraftPacket {\n     if (version.compareTo(ProtocolVersion.MINECRAFT_1_15) >= 0) {\n       this.partialHashedSeed = buf.readLong();\n     }\n-    this.gamemode = buf.readUnsignedByte();\n+    this.gamemode = buf.readByte();\n     if (version.compareTo(ProtocolVersion.MINECRAFT_1_16) >= 0) {\n+      this.previousGamemode = buf.readByte();\n       boolean isDebug = buf.readBoolean();\n       boolean isFlat = buf.readBoolean();\n       this.dimensionInfo = new DimensionInfo(dimensionIdentifier, levelName, isFlat, isDebug);\n", "next_change": null}]}}]}}]}}, {"oid": "18e595397660ea6651bb4c86e1bb3a6addf1dd24", "url": "https://github.com/PaperMC/Velocity/commit/18e595397660ea6651bb4c86e1bb3a6addf1dd24", "message": "Save progress", "committedDate": "2020-06-04T13:36:58Z", "type": "commit"}, {"oid": "6734ef3a087ed3f068ee9ce809d93ce31ce844bc", "url": "https://github.com/PaperMC/Velocity/commit/6734ef3a087ed3f068ee9ce809d93ce31ce844bc", "message": "Checkstyle-auto", "committedDate": "2020-06-04T17:13:10Z", "type": "commit"}, {"oid": "009f207883738e3ee1b1fb51adf614fec89b8a4c", "url": "https://github.com/PaperMC/Velocity/commit/009f207883738e3ee1b1fb51adf614fec89b8a4c", "message": "More progress", "committedDate": "2020-06-04T19:21:54Z", "type": "commit"}, {"oid": "368d50b4555a87f0fb5ca734947f098e86ccac96", "url": "https://github.com/PaperMC/Velocity/commit/368d50b4555a87f0fb5ca734947f098e86ccac96", "message": "Rework Dimension Registry", "committedDate": "2020-06-05T13:22:55Z", "type": "commit"}, {"oid": "aa4a8de2fd474325927be5e221534a4f98a7a046", "url": "https://github.com/PaperMC/Velocity/commit/aa4a8de2fd474325927be5e221534a4f98a7a046", "message": "Stylize", "committedDate": "2020-06-05T13:45:11Z", "type": "commit"}, {"oid": "6368b47e78a499b7c1cfada8f1d0913a1ca59c8c", "url": "https://github.com/PaperMC/Velocity/commit/6368b47e78a499b7c1cfada8f1d0913a1ca59c8c", "message": "Old sins", "committedDate": "2020-06-05T13:58:34Z", "type": "commit"}, {"oid": "0377a6829f7b280aa35bb78219cfb86b0321ab64", "url": "https://github.com/PaperMC/Velocity/commit/0377a6829f7b280aa35bb78219cfb86b0321ab64", "message": "Move to Registry", "committedDate": "2020-06-05T14:00:51Z", "type": "commit"}, {"oid": "a2134297350b943c70daeb3572e5ff56043ea80c", "url": "https://github.com/PaperMC/Velocity/commit/a2134297350b943c70daeb3572e5ff56043ea80c", "message": "Merge from indev: 1.16-pre2\n\nFrom indev: 1.16-pre2", "committedDate": "2020-06-05T14:02:05Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIwMTQzOQ==", "url": "https://github.com/PaperMC/Velocity/pull/310#discussion_r436201439", "body": "`@MonotonicNonNull` may be a better choice here.", "bodyText": "@MonotonicNonNull may be a better choice here.", "bodyHTML": "<p dir=\"auto\"><code>@MonotonicNonNull</code> may be a better choice here.</p>", "author": "astei", "createdAt": "2020-06-05T23:08:51Z", "path": "proxy/src/main/java/com/velocitypowered/proxy/connection/backend/VelocityServerConnection.java", "diffHunk": "@@ -53,6 +53,7 @@\n   private BackendConnectionPhase connectionPhase = BackendConnectionPhases.UNKNOWN;\n   private long lastPingId;\n   private long lastPingSent;\n+  private @Nullable DimensionRegistry activeDimensionRegistry;", "originalCommit": "a2134297350b943c70daeb3572e5ff56043ea80c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f868cea5830fac6fec03fa360fd6650d65de0e20", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/backend/VelocityServerConnection.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/backend/VelocityServerConnection.java\nindex dd3fd6e0..525b5cf2 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/backend/VelocityServerConnection.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/backend/VelocityServerConnection.java\n", "chunk": "@@ -53,7 +55,7 @@ public class VelocityServerConnection implements MinecraftConnectionAssociation,\n   private BackendConnectionPhase connectionPhase = BackendConnectionPhases.UNKNOWN;\n   private long lastPingId;\n   private long lastPingSent;\n-  private @Nullable DimensionRegistry activeDimensionRegistry;\n+  private @MonotonicNonNull DimensionRegistry activeDimensionRegistry;\n \n   /**\n    * Initializes a new server connection.\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIwMTYzOA==", "url": "https://github.com/PaperMC/Velocity/pull/310#discussion_r436201638", "body": "Do not use `javax.annotation.*`. Since we follow Checker Framework, just drop the annotation (all fields are presumed to be non-null).", "bodyText": "Do not use javax.annotation.*. Since we follow Checker Framework, just drop the annotation (all fields are presumed to be non-null).", "bodyHTML": "<p dir=\"auto\">Do not use <code>javax.annotation.*</code>. Since we follow Checker Framework, just drop the annotation (all fields are presumed to be non-null).</p>", "author": "astei", "createdAt": "2020-06-05T23:09:52Z", "path": "proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package com.velocitypowered.proxy.connection.registry;\n+\n+import java.util.HashSet;\n+import java.util.NoSuchElementException;\n+import java.util.Set;\n+import javax.annotation.Nonnull;\n+\n+import net.kyori.nbt.CompoundTag;\n+import net.kyori.nbt.ListTag;\n+import net.kyori.nbt.Tag;\n+import net.kyori.nbt.TagType;\n+\n+public class DimensionRegistry {\n+\n+  private final @Nonnull Set<DimensionData> dimensionRegistry;", "originalCommit": "a2134297350b943c70daeb3572e5ff56043ea80c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIzOTI0OA==", "url": "https://github.com/VelocityPowered/Velocity/pull/310#discussion_r436239248", "bodyText": "As discussed on the discord, will do", "author": "Xernium", "createdAt": "2020-06-06T05:13:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIwMTYzOA=="}], "type": "inlineReview", "revised_code": {"commit": "f868cea5830fac6fec03fa360fd6650d65de0e20", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\nindex 303ce3aa..9e5f1af6 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\n", "chunk": "@@ -1,63 +1,65 @@\n package com.velocitypowered.proxy.connection.registry;\n \n-import java.util.HashSet;\n-import java.util.NoSuchElementException;\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Maps;\n+\n+import java.util.Map;\n import java.util.Set;\n-import javax.annotation.Nonnull;\n \n import net.kyori.nbt.CompoundTag;\n import net.kyori.nbt.ListTag;\n import net.kyori.nbt.Tag;\n import net.kyori.nbt.TagType;\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+\n \n-public class DimensionRegistry {\n+public final class DimensionRegistry {\n \n-  private final @Nonnull Set<DimensionData> dimensionRegistry;\n-  private final @Nonnull String[] levelNames;\n+  private final Map<String, DimensionData> registeredDimensions;\n+  private final ImmutableSet<String> levelNames;\n \n   /**\n    * Initializes a new {@link DimensionRegistry} instance.\n    * This registry is required for 1.16+ clients/servers to communicate,\n    * it constrains the dimension types and names the client can be sent\n    * in a Respawn action (dimension change).\n-   * @param dimensionRegistry a populated set containing dimension data types\n-   * @param levelNames a populated {@link Set} of the dimension level names the server offers\n+   * This WILL raise an IllegalArgumentException if the following is not met:\n+   * - At least one valid DimensionData instance is provided\n+   * - At least one valid world name is provided\n+   * @param registeredDimensions a populated {@link ImmutableSet} containing dimension data types\n+   * @param levelNames a populated {@link ImmutableSet} of the level (world) names the server offers\n    */\n-  public DimensionRegistry(Set<DimensionData> dimensionRegistry,\n-                           String[] levelNames) {\n-    if (dimensionRegistry == null || dimensionRegistry.isEmpty()\n-            || levelNames == null || levelNames.length == 0) {\n-      throw new IllegalArgumentException(\n-              \"Dimension registry requires valid arguments, not null and not empty\");\n-    }\n-    this.dimensionRegistry = dimensionRegistry;\n+  public DimensionRegistry(ImmutableSet<DimensionData> registeredDimensions,\n+                            ImmutableSet<String> levelNames) {\n+    Preconditions.checkNotNull(registeredDimensions,\n+            \"registeredDimensions cannot be null\");\n+    Preconditions.checkNotNull(levelNames,\n+            \"levelNames cannot be null\");\n+    Preconditions.checkArgument(registeredDimensions.size() > 0,\n+            \"registeredDimensions needs to be populated\");\n+    Preconditions.checkArgument(levelNames.size() > 0,\n+            \"levelNames needs to populated\");\n+    this.registeredDimensions = Maps.uniqueIndex(\n+            registeredDimensions, DimensionData::getRegistryIdentifier);\n     this.levelNames = levelNames;\n   }\n \n-  public @Nonnull Set<DimensionData> getDimensionRegistry() {\n-    return dimensionRegistry;\n+  public Map<String, DimensionData> getRegisteredDimensions() {\n+    return registeredDimensions;\n   }\n \n-  public @Nonnull String[] getLevelNames() {\n+  public Set<String> getLevelNames() {\n     return levelNames;\n   }\n \n   /**\n    * Returns the internal dimension data type as used by the game.\n    * @param dimensionIdentifier how the dimension is identified by the connection\n-   * @return game dimension data\n+   * @return game dimension data or null if not registered\n    */\n-  public @Nonnull DimensionData getDimensionData(@Nonnull String dimensionIdentifier) {\n-    if (dimensionIdentifier == null) {\n-      throw new IllegalArgumentException(\"Dimension identifier cannot be null!\");\n-    }\n-    for (DimensionData iter : dimensionRegistry) {\n-      if (iter.getRegistryIdentifier().equals(dimensionIdentifier)) {\n-        return iter;\n-      }\n-    }\n-    throw new NoSuchElementException(\"Dimension with identifier \" + dimensionIdentifier\n-            + \" doesn't exist in this Registry!\");\n+  public @Nullable DimensionData getDimensionData(String dimensionIdentifier) {\n+    return registeredDimensions.getOrDefault(dimensionIdentifier, null);\n   }\n \n   /**\n", "next_change": {"commit": "4e5f708bede9c73a74c6eee8bbbaa6bdfc38490e", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\nindex 9e5f1af6..22bf6197 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\n", "chunk": "@@ -59,7 +59,7 @@ public final class DimensionRegistry {\n    * @return game dimension data or null if not registered\n    */\n   public @Nullable DimensionData getDimensionData(String dimensionIdentifier) {\n-    return registeredDimensions.getOrDefault(dimensionIdentifier, null);\n+    return registeredDimensions.get(dimensionIdentifier);\n   }\n \n   /**\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIwMTkwNw==", "url": "https://github.com/PaperMC/Velocity/pull/310#discussion_r436201907", "body": "This class is called `DimensionRegistry` and yet we have a field called `dimensionRegistry`. This is confusing. Can we give this a better name?", "bodyText": "This class is called DimensionRegistry and yet we have a field called dimensionRegistry. This is confusing. Can we give this a better name?", "bodyHTML": "<p dir=\"auto\">This class is called <code>DimensionRegistry</code> and yet we have a field called <code>dimensionRegistry</code>. This is confusing. Can we give this a better name?</p>", "author": "astei", "createdAt": "2020-06-05T23:11:12Z", "path": "proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package com.velocitypowered.proxy.connection.registry;\n+\n+import java.util.HashSet;\n+import java.util.NoSuchElementException;\n+import java.util.Set;\n+import javax.annotation.Nonnull;\n+\n+import net.kyori.nbt.CompoundTag;\n+import net.kyori.nbt.ListTag;\n+import net.kyori.nbt.Tag;\n+import net.kyori.nbt.TagType;\n+\n+public class DimensionRegistry {\n+\n+  private final @Nonnull Set<DimensionData> dimensionRegistry;\n+  private final @Nonnull String[] levelNames;\n+\n+  /**\n+   * Initializes a new {@link DimensionRegistry} instance.\n+   * This registry is required for 1.16+ clients/servers to communicate,\n+   * it constrains the dimension types and names the client can be sent\n+   * in a Respawn action (dimension change).\n+   * @param dimensionRegistry a populated set containing dimension data types\n+   * @param levelNames a populated {@link Set} of the dimension level names the server offers\n+   */\n+  public DimensionRegistry(Set<DimensionData> dimensionRegistry,\n+                           String[] levelNames) {\n+    if (dimensionRegistry == null || dimensionRegistry.isEmpty()\n+            || levelNames == null || levelNames.length == 0) {\n+      throw new IllegalArgumentException(\n+              \"Dimension registry requires valid arguments, not null and not empty\");\n+    }\n+    this.dimensionRegistry = dimensionRegistry;\n+    this.levelNames = levelNames;\n+  }\n+\n+  public @Nonnull Set<DimensionData> getDimensionRegistry() {", "originalCommit": "a2134297350b943c70daeb3572e5ff56043ea80c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIzOTIyOQ==", "url": "https://github.com/VelocityPowered/Velocity/pull/310#discussion_r436239229", "bodyText": "Agreed, will clear this up.", "author": "Xernium", "createdAt": "2020-06-06T05:13:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIwMTkwNw=="}], "type": "inlineReview", "revised_code": {"commit": "f868cea5830fac6fec03fa360fd6650d65de0e20", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\nindex 303ce3aa..9e5f1af6 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\n", "chunk": "@@ -1,63 +1,65 @@\n package com.velocitypowered.proxy.connection.registry;\n \n-import java.util.HashSet;\n-import java.util.NoSuchElementException;\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Maps;\n+\n+import java.util.Map;\n import java.util.Set;\n-import javax.annotation.Nonnull;\n \n import net.kyori.nbt.CompoundTag;\n import net.kyori.nbt.ListTag;\n import net.kyori.nbt.Tag;\n import net.kyori.nbt.TagType;\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+\n \n-public class DimensionRegistry {\n+public final class DimensionRegistry {\n \n-  private final @Nonnull Set<DimensionData> dimensionRegistry;\n-  private final @Nonnull String[] levelNames;\n+  private final Map<String, DimensionData> registeredDimensions;\n+  private final ImmutableSet<String> levelNames;\n \n   /**\n    * Initializes a new {@link DimensionRegistry} instance.\n    * This registry is required for 1.16+ clients/servers to communicate,\n    * it constrains the dimension types and names the client can be sent\n    * in a Respawn action (dimension change).\n-   * @param dimensionRegistry a populated set containing dimension data types\n-   * @param levelNames a populated {@link Set} of the dimension level names the server offers\n+   * This WILL raise an IllegalArgumentException if the following is not met:\n+   * - At least one valid DimensionData instance is provided\n+   * - At least one valid world name is provided\n+   * @param registeredDimensions a populated {@link ImmutableSet} containing dimension data types\n+   * @param levelNames a populated {@link ImmutableSet} of the level (world) names the server offers\n    */\n-  public DimensionRegistry(Set<DimensionData> dimensionRegistry,\n-                           String[] levelNames) {\n-    if (dimensionRegistry == null || dimensionRegistry.isEmpty()\n-            || levelNames == null || levelNames.length == 0) {\n-      throw new IllegalArgumentException(\n-              \"Dimension registry requires valid arguments, not null and not empty\");\n-    }\n-    this.dimensionRegistry = dimensionRegistry;\n+  public DimensionRegistry(ImmutableSet<DimensionData> registeredDimensions,\n+                            ImmutableSet<String> levelNames) {\n+    Preconditions.checkNotNull(registeredDimensions,\n+            \"registeredDimensions cannot be null\");\n+    Preconditions.checkNotNull(levelNames,\n+            \"levelNames cannot be null\");\n+    Preconditions.checkArgument(registeredDimensions.size() > 0,\n+            \"registeredDimensions needs to be populated\");\n+    Preconditions.checkArgument(levelNames.size() > 0,\n+            \"levelNames needs to populated\");\n+    this.registeredDimensions = Maps.uniqueIndex(\n+            registeredDimensions, DimensionData::getRegistryIdentifier);\n     this.levelNames = levelNames;\n   }\n \n-  public @Nonnull Set<DimensionData> getDimensionRegistry() {\n-    return dimensionRegistry;\n+  public Map<String, DimensionData> getRegisteredDimensions() {\n+    return registeredDimensions;\n   }\n \n-  public @Nonnull String[] getLevelNames() {\n+  public Set<String> getLevelNames() {\n     return levelNames;\n   }\n \n   /**\n    * Returns the internal dimension data type as used by the game.\n    * @param dimensionIdentifier how the dimension is identified by the connection\n-   * @return game dimension data\n+   * @return game dimension data or null if not registered\n    */\n-  public @Nonnull DimensionData getDimensionData(@Nonnull String dimensionIdentifier) {\n-    if (dimensionIdentifier == null) {\n-      throw new IllegalArgumentException(\"Dimension identifier cannot be null!\");\n-    }\n-    for (DimensionData iter : dimensionRegistry) {\n-      if (iter.getRegistryIdentifier().equals(dimensionIdentifier)) {\n-        return iter;\n-      }\n-    }\n-    throw new NoSuchElementException(\"Dimension with identifier \" + dimensionIdentifier\n-            + \" doesn't exist in this Registry!\");\n+  public @Nullable DimensionData getDimensionData(String dimensionIdentifier) {\n+    return registeredDimensions.getOrDefault(dimensionIdentifier, null);\n   }\n \n   /**\n", "next_change": {"commit": "4e5f708bede9c73a74c6eee8bbbaa6bdfc38490e", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\nindex 9e5f1af6..22bf6197 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\n", "chunk": "@@ -59,7 +59,7 @@ public final class DimensionRegistry {\n    * @return game dimension data or null if not registered\n    */\n   public @Nullable DimensionData getDimensionData(String dimensionIdentifier) {\n-    return registeredDimensions.getOrDefault(dimensionIdentifier, null);\n+    return registeredDimensions.get(dimensionIdentifier);\n   }\n \n   /**\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIwMjExNg==", "url": "https://github.com/PaperMC/Velocity/pull/310#discussion_r436202116", "body": "This won't hold up merging this in, but perhaps we can consider using a map of dimension IDs to dimension data (try Guava `Maps.uniqueIndex`).", "bodyText": "This won't hold up merging this in, but perhaps we can consider using a map of dimension IDs to dimension data (try Guava Maps.uniqueIndex).", "bodyHTML": "<p dir=\"auto\">This won't hold up merging this in, but perhaps we can consider using a map of dimension IDs to dimension data (try Guava <code>Maps.uniqueIndex</code>).</p>", "author": "astei", "createdAt": "2020-06-05T23:12:22Z", "path": "proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package com.velocitypowered.proxy.connection.registry;\n+\n+import java.util.HashSet;\n+import java.util.NoSuchElementException;\n+import java.util.Set;\n+import javax.annotation.Nonnull;\n+\n+import net.kyori.nbt.CompoundTag;\n+import net.kyori.nbt.ListTag;\n+import net.kyori.nbt.Tag;\n+import net.kyori.nbt.TagType;\n+\n+public class DimensionRegistry {\n+\n+  private final @Nonnull Set<DimensionData> dimensionRegistry;\n+  private final @Nonnull String[] levelNames;\n+\n+  /**\n+   * Initializes a new {@link DimensionRegistry} instance.\n+   * This registry is required for 1.16+ clients/servers to communicate,\n+   * it constrains the dimension types and names the client can be sent\n+   * in a Respawn action (dimension change).\n+   * @param dimensionRegistry a populated set containing dimension data types\n+   * @param levelNames a populated {@link Set} of the dimension level names the server offers\n+   */\n+  public DimensionRegistry(Set<DimensionData> dimensionRegistry,\n+                           String[] levelNames) {\n+    if (dimensionRegistry == null || dimensionRegistry.isEmpty()\n+            || levelNames == null || levelNames.length == 0) {\n+      throw new IllegalArgumentException(\n+              \"Dimension registry requires valid arguments, not null and not empty\");\n+    }\n+    this.dimensionRegistry = dimensionRegistry;\n+    this.levelNames = levelNames;\n+  }\n+\n+  public @Nonnull Set<DimensionData> getDimensionRegistry() {\n+    return dimensionRegistry;\n+  }\n+\n+  public @Nonnull String[] getLevelNames() {\n+    return levelNames;\n+  }\n+\n+  /**\n+   * Returns the internal dimension data type as used by the game.\n+   * @param dimensionIdentifier how the dimension is identified by the connection\n+   * @return game dimension data\n+   */\n+  public @Nonnull DimensionData getDimensionData(@Nonnull String dimensionIdentifier) {\n+    if (dimensionIdentifier == null) {\n+      throw new IllegalArgumentException(\"Dimension identifier cannot be null!\");\n+    }\n+    for (DimensionData iter : dimensionRegistry) {", "originalCommit": "a2134297350b943c70daeb3572e5ff56043ea80c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIzOTEzNg==", "url": "https://github.com/VelocityPowered/Velocity/pull/310#discussion_r436239136", "bodyText": "I had that but I dropped it because I felt like it\u2019s a waste of space seeing as the DimensionData object already needs to store that", "author": "Xernium", "createdAt": "2020-06-06T05:12:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIwMjExNg=="}], "type": "inlineReview", "revised_code": {"commit": "f868cea5830fac6fec03fa360fd6650d65de0e20", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\nindex 303ce3aa..9e5f1af6 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\n", "chunk": "@@ -1,63 +1,65 @@\n package com.velocitypowered.proxy.connection.registry;\n \n-import java.util.HashSet;\n-import java.util.NoSuchElementException;\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Maps;\n+\n+import java.util.Map;\n import java.util.Set;\n-import javax.annotation.Nonnull;\n \n import net.kyori.nbt.CompoundTag;\n import net.kyori.nbt.ListTag;\n import net.kyori.nbt.Tag;\n import net.kyori.nbt.TagType;\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+\n \n-public class DimensionRegistry {\n+public final class DimensionRegistry {\n \n-  private final @Nonnull Set<DimensionData> dimensionRegistry;\n-  private final @Nonnull String[] levelNames;\n+  private final Map<String, DimensionData> registeredDimensions;\n+  private final ImmutableSet<String> levelNames;\n \n   /**\n    * Initializes a new {@link DimensionRegistry} instance.\n    * This registry is required for 1.16+ clients/servers to communicate,\n    * it constrains the dimension types and names the client can be sent\n    * in a Respawn action (dimension change).\n-   * @param dimensionRegistry a populated set containing dimension data types\n-   * @param levelNames a populated {@link Set} of the dimension level names the server offers\n+   * This WILL raise an IllegalArgumentException if the following is not met:\n+   * - At least one valid DimensionData instance is provided\n+   * - At least one valid world name is provided\n+   * @param registeredDimensions a populated {@link ImmutableSet} containing dimension data types\n+   * @param levelNames a populated {@link ImmutableSet} of the level (world) names the server offers\n    */\n-  public DimensionRegistry(Set<DimensionData> dimensionRegistry,\n-                           String[] levelNames) {\n-    if (dimensionRegistry == null || dimensionRegistry.isEmpty()\n-            || levelNames == null || levelNames.length == 0) {\n-      throw new IllegalArgumentException(\n-              \"Dimension registry requires valid arguments, not null and not empty\");\n-    }\n-    this.dimensionRegistry = dimensionRegistry;\n+  public DimensionRegistry(ImmutableSet<DimensionData> registeredDimensions,\n+                            ImmutableSet<String> levelNames) {\n+    Preconditions.checkNotNull(registeredDimensions,\n+            \"registeredDimensions cannot be null\");\n+    Preconditions.checkNotNull(levelNames,\n+            \"levelNames cannot be null\");\n+    Preconditions.checkArgument(registeredDimensions.size() > 0,\n+            \"registeredDimensions needs to be populated\");\n+    Preconditions.checkArgument(levelNames.size() > 0,\n+            \"levelNames needs to populated\");\n+    this.registeredDimensions = Maps.uniqueIndex(\n+            registeredDimensions, DimensionData::getRegistryIdentifier);\n     this.levelNames = levelNames;\n   }\n \n-  public @Nonnull Set<DimensionData> getDimensionRegistry() {\n-    return dimensionRegistry;\n+  public Map<String, DimensionData> getRegisteredDimensions() {\n+    return registeredDimensions;\n   }\n \n-  public @Nonnull String[] getLevelNames() {\n+  public Set<String> getLevelNames() {\n     return levelNames;\n   }\n \n   /**\n    * Returns the internal dimension data type as used by the game.\n    * @param dimensionIdentifier how the dimension is identified by the connection\n-   * @return game dimension data\n+   * @return game dimension data or null if not registered\n    */\n-  public @Nonnull DimensionData getDimensionData(@Nonnull String dimensionIdentifier) {\n-    if (dimensionIdentifier == null) {\n-      throw new IllegalArgumentException(\"Dimension identifier cannot be null!\");\n-    }\n-    for (DimensionData iter : dimensionRegistry) {\n-      if (iter.getRegistryIdentifier().equals(dimensionIdentifier)) {\n-        return iter;\n-      }\n-    }\n-    throw new NoSuchElementException(\"Dimension with identifier \" + dimensionIdentifier\n-            + \" doesn't exist in this Registry!\");\n+  public @Nullable DimensionData getDimensionData(String dimensionIdentifier) {\n+    return registeredDimensions.getOrDefault(dimensionIdentifier, null);\n   }\n \n   /**\n", "next_change": {"commit": "4e5f708bede9c73a74c6eee8bbbaa6bdfc38490e", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\nindex 9e5f1af6..22bf6197 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\n", "chunk": "@@ -59,7 +59,7 @@ public final class DimensionRegistry {\n    * @return game dimension data or null if not registered\n    */\n   public @Nullable DimensionData getDimensionData(String dimensionIdentifier) {\n-    return registeredDimensions.getOrDefault(dimensionIdentifier, null);\n+    return registeredDimensions.get(dimensionIdentifier);\n   }\n \n   /**\n", "next_change": null}]}}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIwMjg5OA==", "url": "https://github.com/PaperMC/Velocity/pull/310#discussion_r436202898", "body": "Do not use exceptions as a control-flow mechanism", "bodyText": "Do not use exceptions as a control-flow mechanism", "bodyHTML": "<p dir=\"auto\">Do not use exceptions as a control-flow mechanism</p>", "author": "astei", "createdAt": "2020-06-05T23:15:58Z", "path": "proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package com.velocitypowered.proxy.connection.registry;\n+\n+import java.util.HashSet;\n+import java.util.NoSuchElementException;\n+import java.util.Set;\n+import javax.annotation.Nonnull;\n+\n+import net.kyori.nbt.CompoundTag;\n+import net.kyori.nbt.ListTag;\n+import net.kyori.nbt.Tag;\n+import net.kyori.nbt.TagType;\n+\n+public class DimensionRegistry {\n+\n+  private final @Nonnull Set<DimensionData> dimensionRegistry;\n+  private final @Nonnull String[] levelNames;\n+\n+  /**\n+   * Initializes a new {@link DimensionRegistry} instance.\n+   * This registry is required for 1.16+ clients/servers to communicate,\n+   * it constrains the dimension types and names the client can be sent\n+   * in a Respawn action (dimension change).\n+   * @param dimensionRegistry a populated set containing dimension data types\n+   * @param levelNames a populated {@link Set} of the dimension level names the server offers\n+   */\n+  public DimensionRegistry(Set<DimensionData> dimensionRegistry,\n+                           String[] levelNames) {\n+    if (dimensionRegistry == null || dimensionRegistry.isEmpty()\n+            || levelNames == null || levelNames.length == 0) {\n+      throw new IllegalArgumentException(\n+              \"Dimension registry requires valid arguments, not null and not empty\");\n+    }\n+    this.dimensionRegistry = dimensionRegistry;\n+    this.levelNames = levelNames;\n+  }\n+\n+  public @Nonnull Set<DimensionData> getDimensionRegistry() {\n+    return dimensionRegistry;\n+  }\n+\n+  public @Nonnull String[] getLevelNames() {\n+    return levelNames;\n+  }\n+\n+  /**\n+   * Returns the internal dimension data type as used by the game.\n+   * @param dimensionIdentifier how the dimension is identified by the connection\n+   * @return game dimension data\n+   */\n+  public @Nonnull DimensionData getDimensionData(@Nonnull String dimensionIdentifier) {\n+    if (dimensionIdentifier == null) {\n+      throw new IllegalArgumentException(\"Dimension identifier cannot be null!\");\n+    }\n+    for (DimensionData iter : dimensionRegistry) {\n+      if (iter.getRegistryIdentifier().equals(dimensionIdentifier)) {\n+        return iter;\n+      }\n+    }\n+    throw new NoSuchElementException(\"Dimension with identifier \" + dimensionIdentifier\n+            + \" doesn't exist in this Registry!\");\n+  }\n+\n+  /**\n+   * Checks a {@link DimensionInfo} against this registry.\n+   * @param toValidate the {@link DimensionInfo} to validate\n+   * @return true: the dimension information is valid for this registry\n+   */\n+  public boolean isValidFor(@Nonnull DimensionInfo toValidate) {\n+    if (toValidate == null) {\n+      throw new IllegalArgumentException(\"Dimension info cannot be null\");\n+    }\n+    try {\n+      getDimensionData(toValidate.getRegistryIdentifier());\n+      for (int i = 0; i < levelNames.length; i++) {\n+        if (levelNames[i].equals(toValidate.getRegistryIdentifier())) {\n+          return true;\n+        }\n+      }\n+      return false;\n+    } catch (NoSuchElementException thrown) {", "originalCommit": "a2134297350b943c70daeb3572e5ff56043ea80c", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "f868cea5830fac6fec03fa360fd6650d65de0e20", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\nindex 303ce3aa..9e5f1af6 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\n", "chunk": "@@ -65,21 +67,12 @@ public class DimensionRegistry {\n    * @param toValidate the {@link DimensionInfo} to validate\n    * @return true: the dimension information is valid for this registry\n    */\n-  public boolean isValidFor(@Nonnull DimensionInfo toValidate) {\n+  public boolean isValidFor(DimensionInfo toValidate) {\n     if (toValidate == null) {\n-      throw new IllegalArgumentException(\"Dimension info cannot be null\");\n-    }\n-    try {\n-      getDimensionData(toValidate.getRegistryIdentifier());\n-      for (int i = 0; i < levelNames.length; i++) {\n-        if (levelNames[i].equals(toValidate.getRegistryIdentifier())) {\n-          return true;\n-        }\n-      }\n-      return false;\n-    } catch (NoSuchElementException thrown) {\n       return false;\n     }\n+    return registeredDimensions.containsKey(toValidate.getRegistryIdentifier())\n+            && levelNames.contains(toValidate.getLevelName());\n   }\n \n   /**\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIwMzAxMg==", "url": "https://github.com/PaperMC/Velocity/pull/310#discussion_r436203012", "body": "Can we make this class immutable if possible?", "bodyText": "Can we make this class immutable if possible?", "bodyHTML": "<p dir=\"auto\">Can we make this class immutable if possible?</p>", "author": "astei", "createdAt": "2020-06-05T23:16:27Z", "path": "proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java", "diffHunk": "@@ -0,0 +1,128 @@\n+package com.velocitypowered.proxy.connection.registry;\n+\n+import java.util.HashSet;\n+import java.util.NoSuchElementException;\n+import java.util.Set;\n+import javax.annotation.Nonnull;\n+\n+import net.kyori.nbt.CompoundTag;\n+import net.kyori.nbt.ListTag;\n+import net.kyori.nbt.Tag;\n+import net.kyori.nbt.TagType;\n+\n+public class DimensionRegistry {", "originalCommit": "a2134297350b943c70daeb3572e5ff56043ea80c", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIzOTAwNQ==", "url": "https://github.com/VelocityPowered/Velocity/pull/310#discussion_r436239005", "bodyText": "Fair, all of the three classes should be. Will do.", "author": "Xernium", "createdAt": "2020-06-06T05:10:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIwMzAxMg=="}], "type": "inlineReview", "revised_code": {"commit": "f868cea5830fac6fec03fa360fd6650d65de0e20", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\nindex 303ce3aa..9e5f1af6 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\n", "chunk": "@@ -1,63 +1,65 @@\n package com.velocitypowered.proxy.connection.registry;\n \n-import java.util.HashSet;\n-import java.util.NoSuchElementException;\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Maps;\n+\n+import java.util.Map;\n import java.util.Set;\n-import javax.annotation.Nonnull;\n \n import net.kyori.nbt.CompoundTag;\n import net.kyori.nbt.ListTag;\n import net.kyori.nbt.Tag;\n import net.kyori.nbt.TagType;\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+\n \n-public class DimensionRegistry {\n+public final class DimensionRegistry {\n \n-  private final @Nonnull Set<DimensionData> dimensionRegistry;\n-  private final @Nonnull String[] levelNames;\n+  private final Map<String, DimensionData> registeredDimensions;\n+  private final ImmutableSet<String> levelNames;\n \n   /**\n    * Initializes a new {@link DimensionRegistry} instance.\n    * This registry is required for 1.16+ clients/servers to communicate,\n    * it constrains the dimension types and names the client can be sent\n    * in a Respawn action (dimension change).\n-   * @param dimensionRegistry a populated set containing dimension data types\n-   * @param levelNames a populated {@link Set} of the dimension level names the server offers\n+   * This WILL raise an IllegalArgumentException if the following is not met:\n+   * - At least one valid DimensionData instance is provided\n+   * - At least one valid world name is provided\n+   * @param registeredDimensions a populated {@link ImmutableSet} containing dimension data types\n+   * @param levelNames a populated {@link ImmutableSet} of the level (world) names the server offers\n    */\n-  public DimensionRegistry(Set<DimensionData> dimensionRegistry,\n-                           String[] levelNames) {\n-    if (dimensionRegistry == null || dimensionRegistry.isEmpty()\n-            || levelNames == null || levelNames.length == 0) {\n-      throw new IllegalArgumentException(\n-              \"Dimension registry requires valid arguments, not null and not empty\");\n-    }\n-    this.dimensionRegistry = dimensionRegistry;\n+  public DimensionRegistry(ImmutableSet<DimensionData> registeredDimensions,\n+                            ImmutableSet<String> levelNames) {\n+    Preconditions.checkNotNull(registeredDimensions,\n+            \"registeredDimensions cannot be null\");\n+    Preconditions.checkNotNull(levelNames,\n+            \"levelNames cannot be null\");\n+    Preconditions.checkArgument(registeredDimensions.size() > 0,\n+            \"registeredDimensions needs to be populated\");\n+    Preconditions.checkArgument(levelNames.size() > 0,\n+            \"levelNames needs to populated\");\n+    this.registeredDimensions = Maps.uniqueIndex(\n+            registeredDimensions, DimensionData::getRegistryIdentifier);\n     this.levelNames = levelNames;\n   }\n \n-  public @Nonnull Set<DimensionData> getDimensionRegistry() {\n-    return dimensionRegistry;\n+  public Map<String, DimensionData> getRegisteredDimensions() {\n+    return registeredDimensions;\n   }\n \n-  public @Nonnull String[] getLevelNames() {\n+  public Set<String> getLevelNames() {\n     return levelNames;\n   }\n \n   /**\n    * Returns the internal dimension data type as used by the game.\n    * @param dimensionIdentifier how the dimension is identified by the connection\n-   * @return game dimension data\n+   * @return game dimension data or null if not registered\n    */\n-  public @Nonnull DimensionData getDimensionData(@Nonnull String dimensionIdentifier) {\n-    if (dimensionIdentifier == null) {\n-      throw new IllegalArgumentException(\"Dimension identifier cannot be null!\");\n-    }\n-    for (DimensionData iter : dimensionRegistry) {\n-      if (iter.getRegistryIdentifier().equals(dimensionIdentifier)) {\n-        return iter;\n-      }\n-    }\n-    throw new NoSuchElementException(\"Dimension with identifier \" + dimensionIdentifier\n-            + \" doesn't exist in this Registry!\");\n+  public @Nullable DimensionData getDimensionData(String dimensionIdentifier) {\n+    return registeredDimensions.getOrDefault(dimensionIdentifier, null);\n   }\n \n   /**\n", "next_change": {"commit": "4e5f708bede9c73a74c6eee8bbbaa6bdfc38490e", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\nindex 9e5f1af6..22bf6197 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\n", "chunk": "@@ -59,7 +59,7 @@ public final class DimensionRegistry {\n    * @return game dimension data or null if not registered\n    */\n   public @Nullable DimensionData getDimensionData(String dimensionIdentifier) {\n-    return registeredDimensions.getOrDefault(dimensionIdentifier, null);\n+    return registeredDimensions.get(dimensionIdentifier);\n   }\n \n   /**\n", "next_change": null}]}}]}}, {"oid": "f868cea5830fac6fec03fa360fd6650d65de0e20", "url": "https://github.com/PaperMC/Velocity/commit/f868cea5830fac6fec03fa360fd6650d65de0e20", "message": "Move to proper API", "committedDate": "2020-06-06T22:14:23Z", "type": "commit"}, {"oid": "ef5b9cf183da0eda038374f01dc342bbea5d2d40", "url": "https://github.com/PaperMC/Velocity/commit/ef5b9cf183da0eda038374f01dc342bbea5d2d40", "message": "Sync to IDE", "committedDate": "2020-06-06T22:22:11Z", "type": "commit"}, {"oid": "3ed5e7718c918bbdded6c9654dc656110966244b", "url": "https://github.com/PaperMC/Velocity/commit/3ed5e7718c918bbdded6c9654dc656110966244b", "message": "Fix logic error", "committedDate": "2020-06-06T22:33:06Z", "type": "commit"}, {"oid": "c004e5769d50092a9d4c549bc9a1857f37f9bc86", "url": "https://github.com/PaperMC/Velocity/commit/c004e5769d50092a9d4c549bc9a1857f37f9bc86", "message": "Merge Cleanup from indev\n\nCleanup", "committedDate": "2020-06-06T22:36:47Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMwNjE0NQ==", "url": "https://github.com/PaperMC/Velocity/pull/310#discussion_r436306145", "body": "Can be replaced with `registeredDimensions.get(dimensionIdentifier)`", "bodyText": "Can be replaced with registeredDimensions.get(dimensionIdentifier)", "bodyHTML": "<p dir=\"auto\">Can be replaced with <code>registeredDimensions.get(dimensionIdentifier)</code></p>", "author": "astei", "createdAt": "2020-06-06T22:38:56Z", "path": "proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java", "diffHunk": "@@ -0,0 +1,109 @@\n+package com.velocitypowered.proxy.connection.registry;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Maps;\n+\n+import java.util.Map;\n+import java.util.Set;\n+\n+import net.kyori.nbt.CompoundTag;\n+import net.kyori.nbt.ListTag;\n+import net.kyori.nbt.Tag;\n+import net.kyori.nbt.TagType;\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+\n+\n+public final class DimensionRegistry {\n+\n+  private final Map<String, DimensionData> registeredDimensions;\n+  private final ImmutableSet<String> levelNames;\n+\n+  /**\n+   * Initializes a new {@link DimensionRegistry} instance.\n+   * This registry is required for 1.16+ clients/servers to communicate,\n+   * it constrains the dimension types and names the client can be sent\n+   * in a Respawn action (dimension change).\n+   * This WILL raise an IllegalArgumentException if the following is not met:\n+   * - At least one valid DimensionData instance is provided\n+   * - At least one valid world name is provided\n+   * @param registeredDimensions a populated {@link ImmutableSet} containing dimension data types\n+   * @param levelNames a populated {@link ImmutableSet} of the level (world) names the server offers\n+   */\n+  public DimensionRegistry(ImmutableSet<DimensionData> registeredDimensions,\n+                            ImmutableSet<String> levelNames) {\n+    Preconditions.checkNotNull(registeredDimensions,\n+            \"registeredDimensions cannot be null\");\n+    Preconditions.checkNotNull(levelNames,\n+            \"levelNames cannot be null\");\n+    Preconditions.checkArgument(registeredDimensions.size() > 0,\n+            \"registeredDimensions needs to be populated\");\n+    Preconditions.checkArgument(levelNames.size() > 0,\n+            \"levelNames needs to populated\");\n+    this.registeredDimensions = Maps.uniqueIndex(\n+            registeredDimensions, DimensionData::getRegistryIdentifier);\n+    this.levelNames = levelNames;\n+  }\n+\n+  public Map<String, DimensionData> getRegisteredDimensions() {\n+    return registeredDimensions;\n+  }\n+\n+  public Set<String> getLevelNames() {\n+    return levelNames;\n+  }\n+\n+  /**\n+   * Returns the internal dimension data type as used by the game.\n+   * @param dimensionIdentifier how the dimension is identified by the connection\n+   * @return game dimension data or null if not registered\n+   */\n+  public @Nullable DimensionData getDimensionData(String dimensionIdentifier) {\n+    return registeredDimensions.getOrDefault(dimensionIdentifier, null);", "originalCommit": "c004e5769d50092a9d4c549bc9a1857f37f9bc86", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMwNjUwNQ==", "url": "https://github.com/VelocityPowered/Velocity/pull/310#discussion_r436306505", "bodyText": "Ah I just read up that it returns null in java for a map key that does not have a value and does NOT throw an exception instead, my bad, will fix.", "author": "Xernium", "createdAt": "2020-06-06T22:45:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMwNjE0NQ=="}], "type": "inlineReview", "revised_code": {"commit": "4e5f708bede9c73a74c6eee8bbbaa6bdfc38490e", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\nindex 4122d09e..22bf6197 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionRegistry.java\n", "chunk": "@@ -59,7 +59,7 @@ public final class DimensionRegistry {\n    * @return game dimension data or null if not registered\n    */\n   public @Nullable DimensionData getDimensionData(String dimensionIdentifier) {\n-    return registeredDimensions.getOrDefault(dimensionIdentifier, null);\n+    return registeredDimensions.get(dimensionIdentifier);\n   }\n \n   /**\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMwNjE3OA==", "url": "https://github.com/PaperMC/Velocity/pull/310#discussion_r436306178", "body": "It's not a good practice to pass `Optional` as a parameter. Mark these as `@Nullable` and handle the `null` situation gracefully.", "bodyText": "It's not a good practice to pass Optional as a parameter. Mark these as @Nullable and handle the null situation gracefully.", "bodyHTML": "<p dir=\"auto\">It's not a good practice to pass <code>Optional</code> as a parameter. Mark these as <code>@Nullable</code> and handle the <code>null</code> situation gracefully.</p>", "author": "astei", "createdAt": "2020-06-06T22:39:41Z", "path": "proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionData.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package com.velocitypowered.proxy.connection.registry;\n+\n+import com.google.common.base.Optional;\n+import com.google.common.base.Preconditions;\n+import net.kyori.nbt.CompoundTag;\n+\n+public final class DimensionData {\n+  private final String registryIdentifier;\n+  private final boolean isNatural;\n+  private final float ambientLight;\n+  private final boolean isShrunk;\n+  private final boolean isUltrawarm;\n+  private final boolean hasCeiling;\n+  private final boolean hasSkylight;\n+  private final Optional<Long> fixedTime;\n+  private final Optional<Boolean> hasEnderdragonFight;\n+\n+  /**\n+   * Initializes a new {@link DimensionData} instance.\n+   * @param registryIdentifier the identifier for the dimension from the registry.\n+   * @param isNatural indicates if the dimension use natural world generation (e.g. overworld)\n+   * @param ambientLight the light level the client sees without external lighting\n+   * @param isShrunk indicates if the world is shrunk, aka not the full 256 blocks (e.g. nether)\n+   * @param isUltrawarm internal dimension warmth flag\n+   * @param hasCeiling indicates if the dimension has a ceiling layer\n+   * @param hasSkylight indicates if the dimension should display the sun\n+   * @param fixedTime optional. If set to any game daytime value will deactivate time cycle\n+   * @param hasEnderdragonFight optional. Internal flag used in the end dimension\n+   */\n+  public DimensionData(String registryIdentifier, boolean isNatural,\n+                       float ambientLight, boolean isShrunk, boolean isUltrawarm,\n+                       boolean hasCeiling, boolean hasSkylight,\n+                       Optional<Long> fixedTime, Optional<Boolean> hasEnderdragonFight) {", "originalCommit": "c004e5769d50092a9d4c549bc9a1857f37f9bc86", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMwNjQxMw==", "url": "https://github.com/VelocityPowered/Velocity/pull/310#discussion_r436306413", "bodyText": "Will revert that- Was an idea anyway", "author": "Xernium", "createdAt": "2020-06-06T22:43:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMwNjE3OA=="}], "type": "inlineReview", "revised_code": {"commit": "4e5f708bede9c73a74c6eee8bbbaa6bdfc38490e", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionData.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionData.java\nindex f6ced21c..4de63a84 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionData.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionData.java\n", "chunk": "@@ -30,7 +30,7 @@ public final class DimensionData {\n   public DimensionData(String registryIdentifier, boolean isNatural,\n                        float ambientLight, boolean isShrunk, boolean isUltrawarm,\n                        boolean hasCeiling, boolean hasSkylight,\n-                       Optional<Long> fixedTime, Optional<Boolean> hasEnderdragonFight) {\n+                       @Nullable Long fixedTime, @Nullable Boolean hasEnderdragonFight) {\n     Preconditions.checkNotNull(\n             registryIdentifier, \"registryIdentifier cannot be null\");\n     Preconditions.checkArgument(registryIdentifier.length() > 0 && !registryIdentifier.isBlank(),\n", "next_change": {"commit": "101a6a58dd7a1c2af13edd897eade28ac92599ba", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionData.java b/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionData.java\nindex 4de63a84..ca1f8ed8 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionData.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/connection/registry/DimensionData.java\n", "chunk": "@@ -24,17 +30,32 @@ public final class DimensionData {\n    * @param isUltrawarm internal dimension warmth flag\n    * @param hasCeiling indicates if the dimension has a ceiling layer\n    * @param hasSkylight indicates if the dimension should display the sun\n+   * @param isPiglinSafe indicates if piglins should naturally zombify in this dimension\n+   * @param doBedsWork indicates if players should be able to sleep in beds in this dimension\n+   * @param doRespawnAnchorsWork indicates if player respawn points can be used in this dimension\n+   * @param hasRaids indicates if raids can be spawned in the dimension\n+   * @param logicalHeight the natural max height for the given dimension\n+   * @param burningBehaviourIdentifier the identifier for how burning blocks work in the dimension\n    * @param fixedTime optional. If set to any game daytime value will deactivate time cycle\n-   * @param hasEnderdragonFight optional. Internal flag used in the end dimension\n+   * @param createDragonFight optional. Internal flag used in the end dimension\n    */\n   public DimensionData(String registryIdentifier, boolean isNatural,\n                        float ambientLight, boolean isShrunk, boolean isUltrawarm,\n                        boolean hasCeiling, boolean hasSkylight,\n-                       @Nullable Long fixedTime, @Nullable Boolean hasEnderdragonFight) {\n+                       boolean isPiglinSafe, boolean doBedsWork,\n+                       boolean doRespawnAnchorsWork, boolean hasRaids,\n+                       int logicalHeight, String burningBehaviourIdentifier,\n+                       @Nullable Long fixedTime, @Nullable Boolean createDragonFight) {\n     Preconditions.checkNotNull(\n             registryIdentifier, \"registryIdentifier cannot be null\");\n     Preconditions.checkArgument(registryIdentifier.length() > 0 && !registryIdentifier.isBlank(),\n             \"registryIdentifier cannot be empty\");\n+    Preconditions.checkArgument(logicalHeight >= 0, \"localHeight must be >= 0\");\n+    Preconditions.checkNotNull(\n+            burningBehaviourIdentifier, \"burningBehaviourIdentifier cannot be null\");\n+    Preconditions.checkArgument(burningBehaviourIdentifier.length() > 0\n+                    && !burningBehaviourIdentifier.isBlank(),\n+            \"burningBehaviourIdentifier cannot be empty\");\n     this.registryIdentifier = registryIdentifier;\n     this.isNatural = isNatural;\n     this.ambientLight = ambientLight;\n", "next_change": null}]}}]}}, {"oid": "4e5f708bede9c73a74c6eee8bbbaa6bdfc38490e", "url": "https://github.com/PaperMC/Velocity/commit/4e5f708bede9c73a74c6eee8bbbaa6bdfc38490e", "message": "Resolve review", "committedDate": "2020-06-06T22:51:21Z", "type": "commit"}, {"oid": "4e6144a87cfad1fe46c1360f321000e51a6a2fa7", "url": "https://github.com/PaperMC/Velocity/commit/4e6144a87cfad1fe46c1360f321000e51a6a2fa7", "message": "Merge from indev/future/1.16\n\nResolve review", "committedDate": "2020-06-06T22:52:55Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMwODQxOA==", "url": "https://github.com/PaperMC/Velocity/pull/310#discussion_r436308418", "body": "Try using https://github.com/KyoriPowered/nbt/blob/master/src/main/java/net/kyori/nbt/TagIO.java#L62 instead", "bodyText": "Try using https://github.com/KyoriPowered/nbt/blob/master/src/main/java/net/kyori/nbt/TagIO.java#L62 instead", "bodyHTML": "<p dir=\"auto\">Try using <a href=\"https://github.com/KyoriPowered/nbt/blob/master/src/main/java/net/kyori/nbt/TagIO.java#L62\">https://github.com/KyoriPowered/nbt/blob/master/src/main/java/net/kyori/nbt/TagIO.java#L62</a> instead</p>", "author": "astei", "createdAt": "2020-06-06T23:26:19Z", "path": "proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java", "diffHunk": "@@ -153,6 +163,110 @@ public static void writeUuid(ByteBuf buf, UUID uuid) {\n     buf.writeLong(uuid.getLeastSignificantBits());\n   }\n \n+  /**\n+   * Reads an UUID stored as an Integer Array from the {@code buf}.\n+   * @param buf the buffer to read from\n+   * @return the UUID from the buffer\n+   */\n+  public static UUID readUuidIntArray(ByteBuf buf) {\n+    long msbHigh = (long) buf.readInt() << 32;\n+    long msbLow = (long) buf.readInt() & 0xFFFFFFFFL;\n+    long msb = msbHigh | msbLow;\n+    long lsbHigh = (long) buf.readInt() << 32;\n+    long lsbLow = (long) buf.readInt() & 0xFFFFFFFFL;\n+    long lsb = lsbHigh | lsbLow;\n+    return new UUID(msb, lsb);\n+  }\n+\n+  /**\n+   * Writes an UUID as an Integer Array to the {@code buf}.\n+   * @param buf the buffer to write to\n+   * @param uuid the UUID to write\n+   */\n+  public static void writeUuidIntArray(ByteBuf buf, UUID uuid) {\n+    buf.writeInt((int) (uuid.getMostSignificantBits() >> 32));\n+    buf.writeInt((int) uuid.getMostSignificantBits());\n+    buf.writeInt((int) (uuid.getLeastSignificantBits() >> 32));\n+    buf.writeInt((int) uuid.getLeastSignificantBits());\n+  }\n+\n+  /**\n+   * Reads a {@link net.kyori.nbt.CompoundTag} from the {@code buf}.\n+   * @param buf the buffer to read from\n+   * @return {@link net.kyori.nbt.CompoundTag} the CompoundTag from the buffer\n+   */\n+  public static CompoundTag readCompoundTag(ByteBuf buf) {\n+    int indexBefore = buf.readerIndex();\n+    byte startType = buf.readByte();\n+    if (startType == 0) {\n+      throw new DecoderException(\"Invalid NBT start-type (end/empty)\");\n+    }\n+    buf.readerIndex(indexBefore);\n+    try {\n+      DataInput input = new ByteBufInputStream(buf);", "originalCommit": "4e6144a87cfad1fe46c1360f321000e51a6a2fa7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "101a6a58dd7a1c2af13edd897eade28ac92599ba", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\nindex a272c802..bb7516aa 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n", "chunk": "@@ -203,17 +204,10 @@ public enum ProtocolUtils {\n     }\n     buf.readerIndex(indexBefore);\n     try {\n-      DataInput input = new ByteBufInputStream(buf);\n-      byte type = input.readByte();\n-      if (type != TagType.COMPOUND.id()) {\n-        throw new DecoderException(\"NBTTag is not a CompoundTag\");\n-      }\n-      input.readUTF(); // Head-padding\n-      CompoundTag compoundTag = new CompoundTag();\n-      compoundTag.read(input, 0);\n-      return compoundTag;\n-    } catch (IOException e) {\n-      throw new DecoderException(\"Unable to decode NBT CompoundTag at \" + indexBefore);\n+      return TagIO.readDataInput(new ByteBufInputStream(buf));\n+    } catch (IOException thrown) {\n+      throw new DecoderException(\n+              \"Unable to parse NBT CompoundTag, full error: \" + thrown.getMessage());\n     }\n   }\n \n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMwODQyNw==", "url": "https://github.com/PaperMC/Velocity/pull/310#discussion_r436308427", "body": "Could https://github.com/KyoriPowered/nbt/blob/master/src/main/java/net/kyori/nbt/TagIO.java#L165 work here instead?", "bodyText": "Could https://github.com/KyoriPowered/nbt/blob/master/src/main/java/net/kyori/nbt/TagIO.java#L165 work here instead?", "bodyHTML": "<p dir=\"auto\">Could <a href=\"https://github.com/KyoriPowered/nbt/blob/master/src/main/java/net/kyori/nbt/TagIO.java#L165\">https://github.com/KyoriPowered/nbt/blob/master/src/main/java/net/kyori/nbt/TagIO.java#L165</a> work here instead?</p>", "author": "astei", "createdAt": "2020-06-06T23:26:50Z", "path": "proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java", "diffHunk": "@@ -153,6 +163,110 @@ public static void writeUuid(ByteBuf buf, UUID uuid) {\n     buf.writeLong(uuid.getLeastSignificantBits());\n   }\n \n+  /**\n+   * Reads an UUID stored as an Integer Array from the {@code buf}.\n+   * @param buf the buffer to read from\n+   * @return the UUID from the buffer\n+   */\n+  public static UUID readUuidIntArray(ByteBuf buf) {\n+    long msbHigh = (long) buf.readInt() << 32;\n+    long msbLow = (long) buf.readInt() & 0xFFFFFFFFL;\n+    long msb = msbHigh | msbLow;\n+    long lsbHigh = (long) buf.readInt() << 32;\n+    long lsbLow = (long) buf.readInt() & 0xFFFFFFFFL;\n+    long lsb = lsbHigh | lsbLow;\n+    return new UUID(msb, lsb);\n+  }\n+\n+  /**\n+   * Writes an UUID as an Integer Array to the {@code buf}.\n+   * @param buf the buffer to write to\n+   * @param uuid the UUID to write\n+   */\n+  public static void writeUuidIntArray(ByteBuf buf, UUID uuid) {\n+    buf.writeInt((int) (uuid.getMostSignificantBits() >> 32));\n+    buf.writeInt((int) uuid.getMostSignificantBits());\n+    buf.writeInt((int) (uuid.getLeastSignificantBits() >> 32));\n+    buf.writeInt((int) uuid.getLeastSignificantBits());\n+  }\n+\n+  /**\n+   * Reads a {@link net.kyori.nbt.CompoundTag} from the {@code buf}.\n+   * @param buf the buffer to read from\n+   * @return {@link net.kyori.nbt.CompoundTag} the CompoundTag from the buffer\n+   */\n+  public static CompoundTag readCompoundTag(ByteBuf buf) {\n+    int indexBefore = buf.readerIndex();\n+    byte startType = buf.readByte();\n+    if (startType == 0) {\n+      throw new DecoderException(\"Invalid NBT start-type (end/empty)\");\n+    }\n+    buf.readerIndex(indexBefore);\n+    try {\n+      DataInput input = new ByteBufInputStream(buf);\n+      byte type = input.readByte();\n+      if (type != TagType.COMPOUND.id()) {\n+        throw new DecoderException(\"NBTTag is not a CompoundTag\");\n+      }\n+      input.readUTF(); // Head-padding\n+      CompoundTag compoundTag = new CompoundTag();\n+      compoundTag.read(input, 0);\n+      return compoundTag;\n+    } catch (IOException e) {\n+      throw new DecoderException(\"Unable to decode NBT CompoundTag at \" + indexBefore);\n+    }\n+  }\n+\n+  /**\n+   * Writes a CompoundTag to the {@code buf}.\n+   * @param buf the buffer to write to\n+   * @param compoundTag the CompoundTag to write\n+   */\n+  public static void writeCompoundTag(ByteBuf buf, CompoundTag compoundTag) {\n+    if (compoundTag == null) {\n+      buf.writeByte(0);\n+      return;\n+    }\n+    try {\n+      DataOutput output = new ByteBufOutputStream(buf);", "originalCommit": "4e6144a87cfad1fe46c1360f321000e51a6a2fa7", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "101a6a58dd7a1c2af13edd897eade28ac92599ba", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\nindex a272c802..bb7516aa 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/ProtocolUtils.java\n", "chunk": "@@ -228,10 +222,7 @@ public enum ProtocolUtils {\n       return;\n     }\n     try {\n-      DataOutput output = new ByteBufOutputStream(buf);\n-      output.writeByte(10); // Type 10 - CompoundTag\n-      output.writeUTF(\"\"); // Head-padding\n-      compoundTag.write(output);\n+      TagIO.writeDataOutput(compoundTag, new ByteBufOutputStream(buf));\n     } catch (IOException e) {\n       throw new EncoderException(\"Unable to encode NBT CompoundTag\");\n     }\n", "next_change": null}]}}, {"oid": "101a6a58dd7a1c2af13edd897eade28ac92599ba", "url": "https://github.com/PaperMC/Velocity/commit/101a6a58dd7a1c2af13edd897eade28ac92599ba", "message": "Changes 1.16-pre3", "committedDate": "2020-06-10T19:00:18Z", "type": "commit"}, {"oid": "8d159408ba5af80892fedb0b717e0cc37fa88f3a", "url": "https://github.com/PaperMC/Velocity/commit/8d159408ba5af80892fedb0b717e0cc37fa88f3a", "message": "Merge Changes 1.16-pre3\n\nChanges 1.16-pre3", "committedDate": "2020-06-10T19:01:16Z", "type": "commit"}, {"oid": "78b442a852a14633ea16fa09f3f27b28fd44ea3f", "url": "https://github.com/PaperMC/Velocity/commit/78b442a852a14633ea16fa09f3f27b28fd44ea3f", "message": "Changes 1.16-pre4 and Logic fixes", "committedDate": "2020-06-11T21:39:16Z", "type": "commit"}, {"oid": "78b442a852a14633ea16fa09f3f27b28fd44ea3f", "url": "https://github.com/PaperMC/Velocity/commit/78b442a852a14633ea16fa09f3f27b28fd44ea3f", "message": "Changes 1.16-pre4 and Logic fixes", "committedDate": "2020-06-11T21:39:16Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTExOTcxMA==", "url": "https://github.com/PaperMC/Velocity/pull/310#discussion_r439119710", "body": "I should probably add a dummy constructor here that has message and type", "bodyText": "I should probably add a dummy constructor here that has message and type", "bodyHTML": "<p dir=\"auto\">I should probably add a dummy constructor here that has message and type</p>", "author": "Xernium", "createdAt": "2020-06-11T23:12:22Z", "path": "proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Chat.java", "diffHunk": "@@ -10,20 +10,25 @@\n import net.kyori.text.serializer.gson.GsonComponentSerializer;\n import org.checkerframework.checker.nullness.qual.Nullable;\n \n+import java.util.UUID;\n+\n public class Chat implements MinecraftPacket {\n \n   public static final byte CHAT_TYPE = (byte) 0;\n   public static final int MAX_SERVERBOUND_MESSAGE_LENGTH = 256;\n+  public static final UUID EMPTY_SENDER = new UUID(0, 0);\n \n   private @Nullable String message;\n   private byte type;\n+  private @Nullable UUID sender;\n \n   public Chat() {\n   }\n \n-  public Chat(String message, byte type) {\n+  public Chat(String message, byte type, UUID sender) {", "originalCommit": "78b442a852a14633ea16fa09f3f27b28fd44ea3f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTEyMDc1MQ==", "url": "https://github.com/VelocityPowered/Velocity/pull/310#discussion_r439120751", "bodyText": "The packet API is internal details. You can create a constructor for compatibility if you want, but it won't prevent me from merging this in.", "author": "astei", "createdAt": "2020-06-11T23:15:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTExOTcxMA=="}], "type": "inlineReview", "revised_code": null}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTEyMDA4Ng==", "url": "https://github.com/PaperMC/Velocity/pull/310#discussion_r439120086", "body": "I need to revamp this too.", "bodyText": "I need to revamp this too.", "bodyHTML": "<p dir=\"auto\">I need to revamp this too.</p>", "author": "Xernium", "createdAt": "2020-06-11T23:13:33Z", "path": "proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java", "diffHunk": "@@ -122,21 +153,36 @@ public void decode(ByteBuf buf, ProtocolUtils.Direction direction, ProtocolVersi\n       this.partialHashedSeed = buf.readLong();\n     }\n     this.maxPlayers = buf.readUnsignedByte();\n-    this.levelType = ProtocolUtils.readString(buf, 16);\n+    if (version.compareTo(ProtocolVersion.MINECRAFT_1_16) < 0) {\n+      this.levelType = ProtocolUtils.readString(buf, 16);", "originalCommit": "78b442a852a14633ea16fa09f3f27b28fd44ea3f", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "a1ab29186b26145c88f07552f6a1ad81bdd2cc22", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\nindex d000320a..630a60de 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/JoinGame.java\n", "chunk": "@@ -155,8 +163,6 @@ public class JoinGame implements MinecraftPacket {\n     this.maxPlayers = buf.readUnsignedByte();\n     if (version.compareTo(ProtocolVersion.MINECRAFT_1_16) < 0) {\n       this.levelType = ProtocolUtils.readString(buf, 16);\n-    } else {\n-      this.levelType = \"default\"; // I didn't have the courage to rework this yet.\n     }\n     if (version.compareTo(ProtocolVersion.MINECRAFT_1_14) >= 0) {\n       this.viewDistance = ProtocolUtils.readVarInt(buf);\n", "next_change": null}]}}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTEyMDM2Ng==", "url": "https://github.com/PaperMC/Velocity/pull/310#discussion_r439120366", "body": "Should I also make a dummy constructor here @astei ?", "bodyText": "Should I also make a dummy constructor here @astei ?", "bodyHTML": "<p dir=\"auto\">Should I also make a dummy constructor here <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/astei/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/astei\">@astei</a> ?</p>", "author": "Xernium", "createdAt": "2020-06-11T23:14:38Z", "path": "proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Respawn.java", "diffHunk": "@@ -13,17 +14,21 @@\n   private short difficulty;\n   private short gamemode;\n   private String levelType = \"\";\n+  private boolean shouldKeepPlayerData; // 1.16+\n+  private DimensionInfo dimensionInfo;\n \n   public Respawn() {\n   }\n \n   public Respawn(int dimension, long partialHashedSeed, short difficulty, short gamemode,\n-      String levelType) {", "originalCommit": "78b442a852a14633ea16fa09f3f27b28fd44ea3f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTEyMDc4MA==", "url": "https://github.com/VelocityPowered/Velocity/pull/310#discussion_r439120780", "bodyText": "The packet API is internal details. You can create a constructor for compatibility if you want, but it won't prevent me from merging this in.", "author": "astei", "createdAt": "2020-06-11T23:15:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTEyMDM2Ng=="}], "type": "inlineReview", "revised_code": {"commit": "a1ab29186b26145c88f07552f6a1ad81bdd2cc22", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Respawn.java b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Respawn.java\nindex 5f883c53..d14e9f8c 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Respawn.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/protocol/packet/Respawn.java\n", "chunk": "@@ -15,13 +15,15 @@ public class Respawn implements MinecraftPacket {\n   private short gamemode;\n   private String levelType = \"\";\n   private boolean shouldKeepPlayerData; // 1.16+\n-  private DimensionInfo dimensionInfo;\n+  private DimensionInfo dimensionInfo; // 1.16+\n+  private short previousGamemode; // 1.16+\n \n   public Respawn() {\n   }\n \n   public Respawn(int dimension, long partialHashedSeed, short difficulty, short gamemode,\n-      String levelType, boolean shouldKeepPlayerData, DimensionInfo dimensionInfo) {\n+      String levelType, boolean shouldKeepPlayerData, DimensionInfo dimensionInfo,\n+                 short previousGamemode) {\n     this.dimension = dimension;\n     this.partialHashedSeed = partialHashedSeed;\n     this.difficulty = difficulty;\n", "next_change": null}]}}, {"oid": "6577b08bdd6c6286681b3c784bf8664681b4697a", "url": "https://github.com/PaperMC/Velocity/commit/6577b08bdd6c6286681b3c784bf8664681b4697a", "message": "Changes 1.16-pre5", "committedDate": "2020-06-13T09:26:51Z", "type": "commit"}, {"oid": "a1ab29186b26145c88f07552f6a1ad81bdd2cc22", "url": "https://github.com/PaperMC/Velocity/commit/a1ab29186b26145c88f07552f6a1ad81bdd2cc22", "message": "Changes 1.16-pre6", "committedDate": "2020-06-16T15:56:56Z", "type": "commit"}, {"oid": "ee64b97b8ee1b217686687f3c4c6326cf0ff9c14", "url": "https://github.com/PaperMC/Velocity/commit/ee64b97b8ee1b217686687f3c4c6326cf0ff9c14", "message": "Changes 1.16-pre7", "committedDate": "2020-06-16T16:39:51Z", "type": "commit"}, {"oid": "83ba7d6051ad8efcbc3ce56ebc0fc2caec2efdff", "url": "https://github.com/PaperMC/Velocity/commit/83ba7d6051ad8efcbc3ce56ebc0fc2caec2efdff", "message": "Changes 1.16-rc1", "committedDate": "2020-06-18T16:24:39Z", "type": "commit"}]}