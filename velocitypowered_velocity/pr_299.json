{"pr_number": 299, "pr_title": "Add event for commands", "pr_author": "Leymooo", "pr_createdAt": "2020-04-26T21:05:42Z", "pr_url": "https://github.com/PaperMC/Velocity/pull/299", "merge_commit": "e759668f5398b707c4fa7005c466c823f612ddca", "timeline": [{"oid": "6555e0e337add5c2fc66ad8367a95a1c0c48ecfc", "url": "https://github.com/PaperMC/Velocity/commit/6555e0e337add5c2fc66ad8367a95a1c0c48ecfc", "message": "Add CommandExecuteEvent", "committedDate": "2020-04-26T21:04:12Z", "type": "commit"}, {"oid": "1fb382e0f6b4fcb7c2100cabe0a284ce01862e89", "url": "https://github.com/PaperMC/Velocity/commit/1fb382e0f6b4fcb7c2100cabe0a284ce01862e89", "message": "fix logic", "committedDate": "2020-04-26T21:09:25Z", "type": "commit"}, {"oid": "fb64333813699b4f1ade5c9a0646f8d4f7460713", "url": "https://github.com/PaperMC/Velocity/commit/fb64333813699b4f1ade5c9a0646f8d4f7460713", "message": "pass eventLoop to thenApplyAsync", "committedDate": "2020-04-26T21:11:49Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQwMTgzNw==", "url": "https://github.com/PaperMC/Velocity/pull/299#discussion_r415401837", "body": "This is the biggest problem I have with this. I am not a big fan of exposing a method like this. Could we do a bit better?\r\n\r\nOn an additional note, I think we should probably deprecate `execute` and friends and just outright replace them with `*async` variants. We'll clean up the API mess later on.", "bodyText": "This is the biggest problem I have with this. I am not a big fan of exposing a method like this. Could we do a bit better?\nOn an additional note, I think we should probably deprecate execute and friends and just outright replace them with *async variants. We'll clean up the API mess later on.", "bodyHTML": "<p dir=\"auto\">This is the biggest problem I have with this. I am not a big fan of exposing a method like this. Could we do a bit better?</p>\n<p dir=\"auto\">On an additional note, I think we should probably deprecate <code>execute</code> and friends and just outright replace them with <code>*async</code> variants. We'll clean up the API mess later on.</p>", "author": "astei", "createdAt": "2020-04-26T21:10:39Z", "path": "api/src/main/java/com/velocitypowered/api/command/CommandManager.java", "diffHunk": "@@ -35,10 +35,21 @@\n \n   /**\n    * Attempts to execute a command from the specified {@code cmdLine}.\n+   * CommandExecuteEvent will not called\n    *\n    * @param source the command's source\n    * @param cmdLine the command to run\n    * @return true if the command was found and executed, false if it was not\n    */\n   boolean execute(CommandSource source, String cmdLine);\n+\n+  /**\n+   * Attempts to execute a command from the specified {@code cmdLine}.\n+   *\n+   * @param source the command's source\n+   * @param cmdLine the command to run\n+   * @param callEvent will CommandExecuteEvent called or not\n+   * @return true if the command was found and executed, false if it was not\n+   */\n+  boolean execute(CommandSource source, String cmdLine, boolean callEvent);", "originalCommit": "1fb382e0f6b4fcb7c2100cabe0a284ce01862e89", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQwMzI4MQ==", "url": "https://github.com/VelocityPowered/Velocity/pull/299#discussion_r415403281", "bodyText": "I think its not problem, because execute will be called from event/scheduler thread pool in 99% cases. I think we should not messy this with async stuff.", "author": "Leymooo", "createdAt": "2020-04-26T21:18:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQwMTgzNw=="}], "type": "inlineReview", "revised_code": {"commit": "c0b8e9d646cf94877c89f0b6d631ebb484f58ca2", "changed_code": [{"header": "diff --git a/api/src/main/java/com/velocitypowered/api/command/CommandManager.java b/api/src/main/java/com/velocitypowered/api/command/CommandManager.java\nindex ce3452e4..af200cb7 100644\n--- a/api/src/main/java/com/velocitypowered/api/command/CommandManager.java\n+++ b/api/src/main/java/com/velocitypowered/api/command/CommandManager.java\n", "chunk": "@@ -44,12 +46,32 @@ public interface CommandManager {\n   boolean execute(CommandSource source, String cmdLine);\n \n   /**\n-   * Attempts to execute a command from the specified {@code cmdLine}.\n+   * Attempts to execute a command from the specified {@code cmdLine} sync\n+   * without calling CommandExecuteEvent.\n    *\n    * @param source the command's source\n    * @param cmdLine the command to run\n-   * @param callEvent will CommandExecuteEvent called or not\n    * @return true if the command was found and executed, false if it was not\n    */\n-  boolean execute(CommandSource source, String cmdLine, boolean callEvent);\n+  boolean executeImmediately(CommandSource source, String cmdLine);\n+\n+  /**\n+   * Calls CommandExecuteEvent and attempts to execute a command from the specified {@code cmdLine}\n+   * async.\n+   *\n+   * @param source the command's source\n+   * @param cmdLine the command to run\n+   * @return A future that will be completed with the result of the command execution\n+   */\n+  CompletableFuture<Boolean> executeAsync(CommandSource source, String cmdLine);\n+\n+  /**\n+   * Attempts to execute a command from the specified {@code cmdLine} async\n+   * without calling CommandExecuteEvent.\n+   *\n+   * @param source the command's source\n+   * @param cmdLine the command to run\n+   * @return A future that will be completed with the result of the command execution\n+   */\n+  CompletableFuture<Boolean> executeImmediatelyAsync(CommandSource source, String cmdLine);\n }\n", "next_change": {"commit": "26bf94f08f3c4c25304ad023392f348c1bf85170", "changed_code": [{"header": "diff --git a/api/src/main/java/com/velocitypowered/api/command/CommandManager.java b/api/src/main/java/com/velocitypowered/api/command/CommandManager.java\nindex af200cb7..f29777d6 100644\n--- a/api/src/main/java/com/velocitypowered/api/command/CommandManager.java\n+++ b/api/src/main/java/com/velocitypowered/api/command/CommandManager.java\n", "chunk": "@@ -71,7 +79,8 @@ public interface CommandManager {\n    *\n    * @param source the command's source\n    * @param cmdLine the command to run\n-   * @return A future that will be completed with the result of the command execution\n+   * @return A future that will be completed with the result of the command execution.\n+   *         Can be completed exceptionally if exception was thrown during execution.\n    */\n   CompletableFuture<Boolean> executeImmediatelyAsync(CommandSource source, String cmdLine);\n }\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "e759668f5398b707c4fa7005c466c823f612ddca", "changed_code": [{"header": "diff --git a/api/src/main/java/com/velocitypowered/api/command/CommandManager.java b/api/src/main/java/com/velocitypowered/api/command/CommandManager.java\nindex ce3452e4..40216715 100644\n--- a/api/src/main/java/com/velocitypowered/api/command/CommandManager.java\n+++ b/api/src/main/java/com/velocitypowered/api/command/CommandManager.java\n", "chunk": "@@ -34,22 +36,52 @@ public interface CommandManager {\n   void unregister(String alias);\n \n   /**\n-   * Attempts to execute a command from the specified {@code cmdLine}.\n-   * CommandExecuteEvent will not called\n+   * Calls CommandExecuteEvent and attempts to execute a command using the specified {@code cmdLine}\n+   * in a blocking fashion.\n    *\n    * @param source the command's source\n    * @param cmdLine the command to run\n    * @return true if the command was found and executed, false if it was not\n+   * \n+   * @deprecated This method will block current thread during event call and command execution.\n+   *             Prefer {@link #executeAsync(CommandSource, String)} instead.\n    */\n+  @Deprecated\n   boolean execute(CommandSource source, String cmdLine);\n \n   /**\n-   * Attempts to execute a command from the specified {@code cmdLine}.\n+   * Attempts to execute a command using the specified {@code cmdLine} in a blocking fashion without\n+   * calling CommandExecuteEvent.\n    *\n    * @param source the command's source\n    * @param cmdLine the command to run\n-   * @param callEvent will CommandExecuteEvent called or not\n    * @return true if the command was found and executed, false if it was not\n+   * \n+   * @deprecated This method will block current thread during event and command execution.\n+   *             Prefer {@link #executeImmediatelyAsync(CommandSource, String)} instead.\n+   */\n+  @Deprecated\n+  boolean executeImmediately(CommandSource source, String cmdLine);\n+\n+  /**\n+   * Calls CommandExecuteEvent and attempts to execute a command from the specified {@code cmdLine}\n+   * async.\n+   *\n+   * @param source the command's source\n+   * @param cmdLine the command to run\n+   * @return A future that will be completed with the result of the command execution.\n+   *         Can be completed exceptionally if exception was thrown during execution.\n+   */\n+  CompletableFuture<Boolean> executeAsync(CommandSource source, String cmdLine);\n+\n+  /**\n+   * Attempts to execute a command from the specified {@code cmdLine} async\n+   * without calling CommandExecuteEvent.\n+   *\n+   * @param source the command's source\n+   * @param cmdLine the command to run\n+   * @return A future that will be completed with the result of the command execution.\n+   *         Can be completed exceptionally if exception was thrown during execution.\n    */\n-  boolean execute(CommandSource source, String cmdLine, boolean callEvent);\n+  CompletableFuture<Boolean> executeImmediatelyAsync(CommandSource source, String cmdLine);\n }\n", "next_change": {"commit": "6cc6e0f6414270feb79caf91240df813597dd92c", "changed_code": [{"header": "diff --git a/api/src/main/java/com/velocitypowered/api/command/CommandManager.java b/api/src/main/java/com/velocitypowered/api/command/CommandManager.java\nindex 40216715..b688adc6 100644\n--- a/api/src/main/java/com/velocitypowered/api/command/CommandManager.java\n+++ b/api/src/main/java/com/velocitypowered/api/command/CommandManager.java\n", "chunk": "@@ -1,87 +1,125 @@\n package com.velocitypowered.api.command;\n \n+import com.velocitypowered.api.event.command.CommandExecuteEvent;\n import java.util.concurrent.CompletableFuture;\n \n /**\n- * Represents an interface to register a command executor with the proxy.\n+ * Handles the registration and execution of commands.\n  */\n public interface CommandManager {\n \n   /**\n-   * Registers the specified command with the manager with the specified aliases.\n+   * Returns a builder to create a {@link CommandMeta} with\n+   * the given alias.\n+   *\n+   * @param alias the first command alias\n+   * @return a {@link CommandMeta} builder\n+   */\n+  CommandMeta.Builder metaBuilder(String alias);\n+\n+  /**\n+   * Returns a builder to create a {@link CommandMeta} for\n+   * the given Brigadier command.\n+   *\n+   * @param command the command\n+   * @return a {@link CommandMeta} builder\n+   */\n+  CommandMeta.Builder metaBuilder(BrigadierCommand command);\n+\n+  /**\n+   * Registers the specified command with the specified aliases.\n    *\n    * @param command the command to register\n-   * @param aliases the alias to use\n+   * @param aliases the command aliases\n    *\n+   * @throws IllegalArgumentException if one of the given aliases is already registered\n    * @deprecated This method requires at least one alias, but this is only enforced at runtime.\n-   *             Prefer {@link #register(String, Command, String...)} instead.\n+   *             Prefer {@link #register(String, Command, String...)}\n    */\n   @Deprecated\n   void register(Command command, String... aliases);\n \n   /**\n-   * Registers the specified command with the manager with the specified aliases.\n+   * Registers the specified command with the specified aliases.\n    *\n-   * @param alias the first alias to register\n+   * @param alias the first command alias\n    * @param command the command to register\n-   * @param otherAliases the other aliases to use\n+   * @param otherAliases additional aliases\n+   * @throws IllegalArgumentException if one of the given aliases is already registered\n+   * @deprecated Prefer {@link #register(CommandMeta, Command)} instead.\n    */\n+  @Deprecated\n   void register(String alias, Command command, String... otherAliases);\n \n   /**\n-   * Unregisters a command.\n+   * Registers the specified Brigadier command.\n+   *\n+   * @param command the command to register\n+   * @throws IllegalArgumentException if the node alias is already registered\n+   */\n+  void register(BrigadierCommand command);\n+\n+  /**\n+   * Registers the specified command with the given metadata.\n+   *\n+   * @param meta the command metadata\n+   * @param command the command to register\n+   * @throws IllegalArgumentException if one of the given aliases is already registered\n+   */\n+  void register(CommandMeta meta, Command command);\n+\n+  /**\n+   * Unregisters the specified command alias from the manager, if registered.\n    *\n    * @param alias the command alias to unregister\n    */\n   void unregister(String alias);\n \n   /**\n-   * Calls CommandExecuteEvent and attempts to execute a command using the specified {@code cmdLine}\n-   * in a blocking fashion.\n+   * Attempts to execute a command from the given {@code cmdLine} in\n+   * a blocking fashion.\n    *\n-   * @param source the command's source\n+   * @param source the source to execute the command for\n    * @param cmdLine the command to run\n-   * @return true if the command was found and executed, false if it was not\n-   * \n-   * @deprecated This method will block current thread during event call and command execution.\n-   *             Prefer {@link #executeAsync(CommandSource, String)} instead.\n+   * @return {@code true} if the command was found and executed\n+   * @deprecated this method blocks the current thread during the event call and\n+   *             the command execution. Prefer {@link #executeAsync(CommandSource, String)}\n+   *             instead.\n    */\n   @Deprecated\n   boolean execute(CommandSource source, String cmdLine);\n \n   /**\n-   * Attempts to execute a command using the specified {@code cmdLine} in a blocking fashion without\n-   * calling CommandExecuteEvent.\n+   * Attempts to execute a command from the given {@code cmdLine} without\n+   * firing a {@link CommandExecuteEvent} in a blocking fashion.\n    *\n-   * @param source the command's source\n+   * @param source the source to execute the command for\n    * @param cmdLine the command to run\n-   * @return true if the command was found and executed, false if it was not\n-   * \n-   * @deprecated This method will block current thread during event and command execution.\n+   * @return {@code true} if the command was found and executed\n+   * @deprecated this methods blocks the current thread during the command execution.\n    *             Prefer {@link #executeImmediatelyAsync(CommandSource, String)} instead.\n    */\n   @Deprecated\n   boolean executeImmediately(CommandSource source, String cmdLine);\n \n   /**\n-   * Calls CommandExecuteEvent and attempts to execute a command from the specified {@code cmdLine}\n-   * async.\n+   * Attempts to asynchronously execute a command from the given {@code cmdLine}.\n    *\n-   * @param source the command's source\n+   * @param source the source to execute the command for\n    * @param cmdLine the command to run\n-   * @return A future that will be completed with the result of the command execution.\n-   *         Can be completed exceptionally if exception was thrown during execution.\n+   * @return a future that may be completed with the result of the command execution.\n+   *         Can be completed exceptionally if an exception is thrown during execution.\n    */\n   CompletableFuture<Boolean> executeAsync(CommandSource source, String cmdLine);\n \n   /**\n-   * Attempts to execute a command from the specified {@code cmdLine} async\n-   * without calling CommandExecuteEvent.\n+   * Attempts to asynchronously execute a command from the given {@code cmdLine}\n+   * without firing a {@link CommandExecuteEvent}.\n    *\n-   * @param source the command's source\n+   * @param source the source to execute the command for\n    * @param cmdLine the command to run\n-   * @return A future that will be completed with the result of the command execution.\n-   *         Can be completed exceptionally if exception was thrown during execution.\n+   * @return a future that may be completed with the result of the command execution.\n+   *         Can be completed exceptionally if an exception is thrown during execution.\n    */\n   CompletableFuture<Boolean> executeImmediatelyAsync(CommandSource source, String cmdLine);\n }\n", "next_change": {"commit": "2b6c271cc778c0d6876e113f5229097ad22884ad", "changed_code": [{"header": "diff --git a/api/src/main/java/com/velocitypowered/api/command/CommandManager.java b/api/src/main/java/com/velocitypowered/api/command/CommandManager.java\nindex b688adc6..68c3ed2c 100644\n--- a/api/src/main/java/com/velocitypowered/api/command/CommandManager.java\n+++ b/api/src/main/java/com/velocitypowered/api/command/CommandManager.java\n", "chunk": "@@ -122,4 +122,12 @@ public interface CommandManager {\n    *         Can be completed exceptionally if an exception is thrown during execution.\n    */\n   CompletableFuture<Boolean> executeImmediatelyAsync(CommandSource source, String cmdLine);\n+\n+  /**\n+   * Returns whether the given alias is registered on this manager.\n+   *\n+   * @param alias the command alias to check\n+   * @return {@code true} if the alias is registered\n+   */\n+  boolean hasCommand(String alias);\n }\n", "next_change": {"commit": "76c682792602c9b4385b87932ed27efe7a55df15", "changed_code": [{"header": "diff --git a/api/src/main/java/com/velocitypowered/api/command/CommandManager.java b/api/src/main/java/com/velocitypowered/api/command/CommandManager.java\nindex 68c3ed2c..9cc92a2e 100644\n--- a/api/src/main/java/com/velocitypowered/api/command/CommandManager.java\n+++ b/api/src/main/java/com/velocitypowered/api/command/CommandManager.java\n", "chunk": "@@ -123,11 +95,19 @@ public interface CommandManager {\n    */\n   CompletableFuture<Boolean> executeImmediatelyAsync(CommandSource source, String cmdLine);\n \n+  /**\n+   * Returns an immutable collection of the case-insensitive aliases registered\n+   * on this manager.\n+   *\n+   * @return the registered aliases\n+   */\n+  Collection<String> getAliases();\n+\n   /**\n    * Returns whether the given alias is registered on this manager.\n    *\n    * @param alias the command alias to check\n-   * @return {@code true} if the alias is registered\n+   * @return true if the alias is registered; false otherwise\n    */\n   boolean hasCommand(String alias);\n }\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "e759668f5398b707c4fa7005c466c823f612ddca", "message": "Merge commit", "committedDate": null}, {"oid": "6cc6e0f6414270feb79caf91240df813597dd92c", "committedDate": "2020-07-29 03:43:16 -0400", "message": "New command API (#330)"}, {"oid": "2b6c271cc778c0d6876e113f5229097ad22884ad", "committedDate": "2020-09-13 19:11:40 +0200", "message": "Add ability to check for command alias existence in api module"}, {"oid": "e3eace6a563f3b45d2b45e2781a125d942554b78", "committedDate": "2020-10-22 00:14:41 -0400", "message": "Undeprecate CommandManager#register(String, Command, String...)"}, {"oid": "c747120b20be1853ee02e7b2b67871249a88aa6d", "committedDate": "2021-03-31 16:04:06 -0400", "message": "Relicense the Velocity proxy under the terms of GPLv3 (#448)"}, {"oid": "2f0ee15051e00e403e9b79b0ceaf6a607a54eb2b", "committedDate": "2021-05-23 13:46:47 -0400", "message": "Remove deprecated Velocity 1.0.0 Command API."}, {"oid": "d6dcb115f1f30d8d34a49d71b01f251b6c918ca2", "committedDate": "2021-05-23 13:49:06 -0400", "message": "Remove remaining deprecated APIs"}, {"oid": "3f50964f368ad0f6650e66965566146fd97b16e9", "committedDate": "2021-05-23 14:20:59 -0400", "message": "Fix CommandManager method naming so that it is in sync with the 1.1.0 API"}, {"oid": "e6eecd806a02aadc1189ba10c4082d45b1dc3dbf", "committedDate": "2021-06-05 18:02:26 +0200", "message": "Document some restrictions in the command API"}, {"oid": "76c682792602c9b4385b87932ed27efe7a55df15", "committedDate": "2021-07-24 14:34:50 -0400", "message": "Expose registered aliases in API (#549)"}, {"oid": "922c001b59b381d69b9e172ae31cb23daefbf9a7", "committedDate": "2021-10-31 16:23:35 -0400", "message": "Expose CommandMeta in CommandManager and add a ref to the plugin instance (#544)"}, {"oid": "0b0c36dcfc77a89d215fd618b5b139c5f3ce9f9a", "committedDate": "2021-10-31 19:05:21 -0400", "message": "Correct command meta alias removal behavior and add appropriate unit tests."}, {"oid": "d72d707b1c0dd6215a4984956faf4b2ec4bdbd97", "committedDate": "2023-01-01 17:53:37 -0500", "message": "Convert Velocity buildscripts to Kotlin DSL (#918)"}, {"oid": "b0862d2d16c4ba7560d3f24c824d78793ac3d9e0", "committedDate": "2023-01-01 18:46:33 -0500", "message": "Use Spotless for license formatting"}]}, {"oid": "c0b8e9d646cf94877c89f0b6d631ebb484f58ca2", "url": "https://github.com/PaperMC/Velocity/commit/c0b8e9d646cf94877c89f0b6d631ebb484f58ca2", "message": "add async methods, also add separate methods which will call event and which will not call event", "committedDate": "2020-04-26T22:05:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQxNzU0Nw==", "url": "https://github.com/PaperMC/Velocity/pull/299#discussion_r415417547", "body": "`CommandExecuteEvent`", "bodyText": "CommandExecuteEvent", "bodyHTML": "<p dir=\"auto\"><code>CommandExecuteEvent</code></p>", "author": "astei", "createdAt": "2020-04-26T22:38:31Z", "path": "api/src/main/java/com/velocitypowered/api/event/command/CommandExecuteEvent.java", "diffHunk": "@@ -0,0 +1,143 @@\n+package com.velocitypowered.api.event.command;\n+\n+import com.google.common.base.Preconditions;\n+import com.velocitypowered.api.command.CommandSource;\n+import com.velocitypowered.api.event.ResultedEvent;\n+import com.velocitypowered.api.event.command.CommandExecuteEvent.CommandResult;\n+import java.util.Optional;\n+import org.checkerframework.checker.nullness.qual.NonNull;\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+\n+/**\n+ * This event is fired when a player types in a chat message.\n+ */\n+public final class CommandExecuteEvent implements ResultedEvent<CommandResult> {\n+\n+  private final CommandSource commandSource;\n+  private final String command;\n+  private CommandResult result;\n+\n+  /**\n+   * Constructs a PlayerChatEvent.", "originalCommit": "c0b8e9d646cf94877c89f0b6d631ebb484f58ca2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "26bf94f08f3c4c25304ad023392f348c1bf85170", "changed_code": [{"header": "diff --git a/api/src/main/java/com/velocitypowered/api/event/command/CommandExecuteEvent.java b/api/src/main/java/com/velocitypowered/api/event/command/CommandExecuteEvent.java\nindex f92ed689..05469956 100644\n--- a/api/src/main/java/com/velocitypowered/api/event/command/CommandExecuteEvent.java\n+++ b/api/src/main/java/com/velocitypowered/api/event/command/CommandExecuteEvent.java\n", "chunk": "@@ -18,7 +18,7 @@ public final class CommandExecuteEvent implements ResultedEvent<CommandResult> {\n   private CommandResult result;\n \n   /**\n-   * Constructs a PlayerChatEvent.\n+   * Constructs a CommandExecuteEvent.\n    * @param commandSource the source executing the command\n    * @param command the command being executed without first slash\n    */\n", "next_change": null}]}, "revised_code_in_main": {"commit": "e759668f5398b707c4fa7005c466c823f612ddca", "changed_code": [{"header": "diff --git a/api/src/main/java/com/velocitypowered/api/event/command/CommandExecuteEvent.java b/api/src/main/java/com/velocitypowered/api/event/command/CommandExecuteEvent.java\nindex f92ed689..05469956 100644\n--- a/api/src/main/java/com/velocitypowered/api/event/command/CommandExecuteEvent.java\n+++ b/api/src/main/java/com/velocitypowered/api/event/command/CommandExecuteEvent.java\n", "chunk": "@@ -18,7 +18,7 @@ public final class CommandExecuteEvent implements ResultedEvent<CommandResult> {\n   private CommandResult result;\n \n   /**\n-   * Constructs a PlayerChatEvent.\n+   * Constructs a CommandExecuteEvent.\n    * @param commandSource the source executing the command\n    * @param command the command being executed without first slash\n    */\n", "next_change": {"commit": "d72d707b1c0dd6215a4984956faf4b2ec4bdbd97", "changed_code": [{"header": "diff --git a/api/src/main/java/com/velocitypowered/api/event/command/CommandExecuteEvent.java b/api/src/main/java/com/velocitypowered/api/event/command/CommandExecuteEvent.java\nindex 05469956..3446195b 100644\n--- a/api/src/main/java/com/velocitypowered/api/event/command/CommandExecuteEvent.java\n+++ b/api/src/main/java/com/velocitypowered/api/event/command/CommandExecuteEvent.java\n", "chunk": "@@ -19,6 +29,7 @@ public final class CommandExecuteEvent implements ResultedEvent<CommandResult> {\n \n   /**\n    * Constructs a CommandExecuteEvent.\n+   *\n    * @param commandSource the source executing the command\n    * @param command the command being executed without first slash\n    */\n", "next_change": null}]}}]}, "commits_in_main": [{"oid": "e759668f5398b707c4fa7005c466c823f612ddca", "message": "Merge commit", "committedDate": null}, {"oid": "d096eb342992568f780ebd287b6541a411115589", "committedDate": "2020-04-29 22:15:33 +0300", "message": "update class javadoc"}, {"oid": "4b4ed02e8dd4720a9f99a3f8d868b8c71af81cee", "committedDate": "2020-04-30 01:00:12 +0300", "message": "fix build"}, {"oid": "780e1c8be593753efe4a4ec6293c70a48d486ba7", "committedDate": "2020-06-23 23:03:19 -0400", "message": "Handle duplicates from server pings gracefully"}, {"oid": "c747120b20be1853ee02e7b2b67871249a88aa6d", "committedDate": "2021-03-31 16:04:06 -0400", "message": "Relicense the Velocity proxy under the terms of GPLv3 (#448)"}, {"oid": "8c39d9a1e44f5ae6be29d50cc826b9971bc60c8e", "committedDate": "2021-12-23 02:52:56 -0500", "message": "Document every event Velocity will await on."}, {"oid": "1a3fba4250553702d9dcd05731d04347bfc24c9f", "committedDate": "2022-07-30 19:30:03 -0400", "message": "Update to 1.19.1 (#772)"}, {"oid": "d72d707b1c0dd6215a4984956faf4b2ec4bdbd97", "committedDate": "2023-01-01 17:53:37 -0500", "message": "Convert Velocity buildscripts to Kotlin DSL (#918)"}, {"oid": "b0862d2d16c4ba7560d3f24c824d78793ac3d9e0", "committedDate": "2023-01-01 18:46:33 -0500", "message": "Use Spotless for license formatting"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQxNzg2MA==", "url": "https://github.com/PaperMC/Velocity/pull/299#discussion_r415417860", "body": "`source`, not `invoker`\r\n\r\n(This is a typo in the original code. Whoops!)", "bodyText": "source, not invoker\n(This is a typo in the original code. Whoops!)", "bodyHTML": "<p dir=\"auto\"><code>source</code>, not <code>invoker</code></p>\n<p dir=\"auto\">(This is a typo in the original code. Whoops!)</p>", "author": "astei", "createdAt": "2020-04-26T22:40:18Z", "path": "proxy/src/main/java/com/velocitypowered/proxy/command/VelocityCommandManager.java", "diffHunk": "@@ -47,11 +57,38 @@ public void unregister(final String alias) {\n     this.commands.remove(alias.toLowerCase(Locale.ENGLISH));\n   }\n \n+  /**\n+   * Calls CommandExecuteEvent.\n+   * @param source the command's source\n+   * @param cmd the command\n+   * @return CompletableFuture of event\n+   */\n+  public CompletableFuture<CommandExecuteEvent> callCommandEvent(CommandSource source, String cmd) {\n+    Preconditions.checkNotNull(source, \"invoker\");", "originalCommit": "c0b8e9d646cf94877c89f0b6d631ebb484f58ca2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "26bf94f08f3c4c25304ad023392f348c1bf85170", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/command/VelocityCommandManager.java b/proxy/src/main/java/com/velocitypowered/proxy/command/VelocityCommandManager.java\nindex 3a8a5320..2b3975f1 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/command/VelocityCommandManager.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/command/VelocityCommandManager.java\n", "chunk": "@@ -64,14 +64,14 @@ public class VelocityCommandManager implements CommandManager {\n    * @return CompletableFuture of event\n    */\n   public CompletableFuture<CommandExecuteEvent> callCommandEvent(CommandSource source, String cmd) {\n-    Preconditions.checkNotNull(source, \"invoker\");\n+    Preconditions.checkNotNull(source, \"source\");\n     Preconditions.checkNotNull(cmd, \"cmd\");\n     return eventManager.fire(new CommandExecuteEvent(source, cmd));\n   }\n \n   @Override\n   public boolean execute(CommandSource source, String cmdLine) {\n-    Preconditions.checkNotNull(source, \"invoker\");\n+    Preconditions.checkNotNull(source, \"source\");\n     Preconditions.checkNotNull(cmdLine, \"cmdLine\");\n \n     CommandExecuteEvent event = callCommandEvent(source, cmdLine).join();\n", "next_change": null}]}, "revised_code_in_main": {"commit": "e759668f5398b707c4fa7005c466c823f612ddca", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/command/VelocityCommandManager.java b/proxy/src/main/java/com/velocitypowered/proxy/command/VelocityCommandManager.java\nindex 3a8a5320..2b3975f1 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/command/VelocityCommandManager.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/command/VelocityCommandManager.java\n", "chunk": "@@ -64,14 +64,14 @@ public class VelocityCommandManager implements CommandManager {\n    * @return CompletableFuture of event\n    */\n   public CompletableFuture<CommandExecuteEvent> callCommandEvent(CommandSource source, String cmd) {\n-    Preconditions.checkNotNull(source, \"invoker\");\n+    Preconditions.checkNotNull(source, \"source\");\n     Preconditions.checkNotNull(cmd, \"cmd\");\n     return eventManager.fire(new CommandExecuteEvent(source, cmd));\n   }\n \n   @Override\n   public boolean execute(CommandSource source, String cmdLine) {\n-    Preconditions.checkNotNull(source, \"invoker\");\n+    Preconditions.checkNotNull(source, \"source\");\n     Preconditions.checkNotNull(cmdLine, \"cmdLine\");\n \n     CommandExecuteEvent event = callCommandEvent(source, cmdLine).join();\n", "next_change": {"commit": "6cc6e0f6414270feb79caf91240df813597dd92c", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/command/VelocityCommandManager.java b/proxy/src/main/java/com/velocitypowered/proxy/command/VelocityCommandManager.java\nindex 2b3975f1..368164e0 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/command/VelocityCommandManager.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/command/VelocityCommandManager.java\n", "chunk": "@@ -1,273 +1,229 @@\n package com.velocitypowered.proxy.command;\n \n import com.google.common.base.Preconditions;\n-import com.google.common.collect.ImmutableList;\n-import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Lists;\n+import com.mojang.brigadier.CommandDispatcher;\n+import com.mojang.brigadier.ParseResults;\n+import com.mojang.brigadier.exceptions.CommandSyntaxException;\n+import com.mojang.brigadier.suggestion.Suggestion;\n+import com.mojang.brigadier.tree.CommandNode;\n+import com.mojang.brigadier.tree.LiteralCommandNode;\n+import com.velocitypowered.api.command.BrigadierCommand;\n import com.velocitypowered.api.command.Command;\n import com.velocitypowered.api.command.CommandManager;\n+import com.velocitypowered.api.command.CommandMeta;\n import com.velocitypowered.api.command.CommandSource;\n import com.velocitypowered.api.command.RawCommand;\n+import com.velocitypowered.api.command.SimpleCommand;\n import com.velocitypowered.api.event.command.CommandExecuteEvent;\n import com.velocitypowered.api.event.command.CommandExecuteEvent.CommandResult;\n import com.velocitypowered.proxy.plugin.VelocityEventManager;\n-\n+import com.velocitypowered.proxy.util.BrigadierUtils;\n import java.util.Arrays;\n-import java.util.HashMap;\n+import java.util.Iterator;\n import java.util.List;\n import java.util.Locale;\n-import java.util.Map;\n-import java.util.Set;\n import java.util.concurrent.CompletableFuture;\n+import net.kyori.adventure.text.TextComponent;\n+import net.kyori.adventure.text.format.NamedTextColor;\n \n public class VelocityCommandManager implements CommandManager {\n \n-  private final Map<String, RawCommand> commands = new HashMap<>();\n+  private final CommandDispatcher<CommandSource> dispatcher;\n   private final VelocityEventManager eventManager;\n \n-  public VelocityCommandManager(VelocityEventManager eventManager) {\n-    this.eventManager = eventManager;\n+  public VelocityCommandManager(final VelocityEventManager eventManager) {\n+    this.eventManager = Preconditions.checkNotNull(eventManager);\n+    this.dispatcher = new CommandDispatcher<>();\n+  }\n+\n+  @Override\n+  public CommandMeta.Builder metaBuilder(final String alias) {\n+    Preconditions.checkNotNull(alias, \"alias\");\n+    return new VelocityCommandMeta.Builder(alias);\n+  }\n+\n+  @Override\n+  public CommandMeta.Builder metaBuilder(final BrigadierCommand command) {\n+    Preconditions.checkNotNull(command, \"command\");\n+    return new VelocityCommandMeta.Builder(command.getNode().getName());\n   }\n \n   @Override\n-  @Deprecated\n   public void register(final Command command, final String... aliases) {\n     Preconditions.checkArgument(aliases.length > 0, \"no aliases provided\");\n     register(aliases[0], command, Arrays.copyOfRange(aliases, 1, aliases.length));\n   }\n \n   @Override\n-  public void register(String alias, Command command, String... otherAliases) {\n+  public void register(final String alias, final Command command, final String... otherAliases) {\n     Preconditions.checkNotNull(alias, \"alias\");\n+    Preconditions.checkNotNull(command, \"command\");\n     Preconditions.checkNotNull(otherAliases, \"otherAliases\");\n-    Preconditions.checkNotNull(command, \"executor\");\n+    Preconditions.checkArgument(!hasCommand(alias), \"alias already registered\");\n+    register(metaBuilder(alias).aliases(otherAliases).build(), command);\n+  }\n \n-    RawCommand rawCmd = RegularCommandWrapper.wrap(command);\n-    this.commands.put(alias.toLowerCase(Locale.ENGLISH), rawCmd);\n+  @Override\n+  public void register(final BrigadierCommand command) {\n+    Preconditions.checkNotNull(command, \"command\");\n+    register(metaBuilder(command).build(), command);\n+  }\n \n-    for (int i = 0, length = otherAliases.length; i < length; i++) {\n-      final String alias1 = otherAliases[i];\n-      Preconditions.checkNotNull(alias1, \"alias at index %s\", i + 1);\n-      this.commands.put(alias1.toLowerCase(Locale.ENGLISH), rawCmd);\n+  @Override\n+  public void register(final CommandMeta meta, final Command command) {\n+    Preconditions.checkNotNull(meta, \"meta\");\n+    Preconditions.checkNotNull(command, \"command\");\n+\n+    Iterator<String> aliasIterator = meta.getAliases().iterator();\n+    String alias = aliasIterator.next();\n+\n+    LiteralCommandNode<CommandSource> node = null;\n+    if (command instanceof BrigadierCommand) {\n+      node = ((BrigadierCommand) command).getNode();\n+    } else if (command instanceof SimpleCommand) {\n+      node = CommandNodeFactory.SIMPLE.create(alias, (SimpleCommand) command);\n+    } else if (command instanceof RawCommand) {\n+      // This ugly hack will be removed in Velocity 2.0. Most if not all plugins\n+      // have side-effect free #suggest methods. We rely on the newer RawCommand\n+      // throwing UOE.\n+      RawCommand asRaw = (RawCommand) command;\n+      try {\n+        asRaw.suggest(null, new String[0]);\n+      } catch (final UnsupportedOperationException e) {\n+        node = CommandNodeFactory.RAW.create(alias, asRaw);\n+      } catch (final Exception ignored) {\n+        // The implementation probably relies on a non-null source\n+      }\n+    }\n+    if (node == null) {\n+      node = CommandNodeFactory.FALLBACK.create(alias, command);\n+    }\n+\n+    if (!(command instanceof BrigadierCommand)) {\n+      for (CommandNode<CommandSource> hint : meta.getHints()) {\n+        node.addChild(BrigadierUtils.wrapForHinting(hint, node.getCommand()));\n+      }\n+    }\n+\n+    dispatcher.getRoot().addChild(node);\n+    while (aliasIterator.hasNext()) {\n+      String otherAlias = aliasIterator.next();\n+      Preconditions.checkArgument(!hasCommand(otherAlias),\n+              \"alias %s is already registered\", otherAlias);\n+      dispatcher.getRoot().addChild(BrigadierUtils.buildRedirect(otherAlias, node));\n     }\n   }\n \n   @Override\n   public void unregister(final String alias) {\n-    Preconditions.checkNotNull(alias, \"name\");\n-    this.commands.remove(alias.toLowerCase(Locale.ENGLISH));\n+    Preconditions.checkNotNull(alias, \"alias\");\n+    CommandNode<CommandSource> node =\n+            dispatcher.getRoot().getChild(alias.toLowerCase(Locale.ENGLISH));\n+    if (node != null) {\n+      dispatcher.getRoot().getChildren().remove(node);\n+    }\n   }\n \n   /**\n-   * Calls CommandExecuteEvent.\n-   * @param source the command's source\n-   * @param cmd the command\n-   * @return CompletableFuture of event\n+   * Fires a {@link CommandExecuteEvent}.\n+   *\n+   * @param source the source to execute the command for\n+   * @param cmdLine the command to execute\n+   * @return the {@link CompletableFuture} of the event\n    */\n-  public CompletableFuture<CommandExecuteEvent> callCommandEvent(CommandSource source, String cmd) {\n+  public CompletableFuture<CommandExecuteEvent> callCommandEvent(final CommandSource source,\n+                                                                 final String cmdLine) {\n     Preconditions.checkNotNull(source, \"source\");\n-    Preconditions.checkNotNull(cmd, \"cmd\");\n-    return eventManager.fire(new CommandExecuteEvent(source, cmd));\n+    Preconditions.checkNotNull(cmdLine, \"cmdLine\");\n+    return eventManager.fire(new CommandExecuteEvent(source, cmdLine));\n   }\n \n   @Override\n-  public boolean execute(CommandSource source, String cmdLine) {\n-    Preconditions.checkNotNull(source, \"source\");\n-    Preconditions.checkNotNull(cmdLine, \"cmdLine\");\n-\n-    CommandExecuteEvent event = callCommandEvent(source, cmdLine).join();\n-    CommandResult commandResult = event.getResult();\n-    if (commandResult.isForwardToServer() || !commandResult.isAllowed()) {\n-      return false;\n-    }\n-    cmdLine = commandResult.getCommand().orElse(event.getCommand());\n-\n-    return executeImmediately(source, cmdLine);\n+  public boolean execute(final CommandSource source, final String cmdLine) {\n+    return executeAsync(source, cmdLine).join();\n   }\n \n   @Override\n-  public boolean executeImmediately(CommandSource source, String cmdLine) {\n+  public boolean executeImmediately(final CommandSource source, final String cmdLine) {\n     Preconditions.checkNotNull(source, \"source\");\n     Preconditions.checkNotNull(cmdLine, \"cmdLine\");\n \n-    String alias = cmdLine;\n-    String args = \"\";\n-    int firstSpace = cmdLine.indexOf(' ');\n-    if (firstSpace != -1) {\n-      alias = cmdLine.substring(0, firstSpace);\n-      args = cmdLine.substring(firstSpace);\n-    }\n-    RawCommand command = commands.get(alias.toLowerCase(Locale.ENGLISH));\n-    if (command == null) {\n-      return false;\n-    }\n-\n+    ParseResults<CommandSource> results = parse(cmdLine, source, true);\n     try {\n-      if (!command.hasPermission(source, args)) {\n-        return false;\n+      return dispatcher.execute(results) != BrigadierCommand.FORWARD;\n+    } catch (final CommandSyntaxException e) {\n+      boolean isSyntaxError = !e.getType().equals(\n+              CommandSyntaxException.BUILT_IN_EXCEPTIONS.dispatcherUnknownCommand());\n+      if (isSyntaxError) {\n+        source.sendMessage(TextComponent.of(e.getMessage(), NamedTextColor.RED));\n       }\n-      command.execute(source, args);\n-      return true;\n-    } catch (Exception e) {\n+      return false;\n+    } catch (final Exception e) {\n       throw new RuntimeException(\"Unable to invoke command \" + cmdLine + \" for \" + source, e);\n     }\n   }\n \n-\n   @Override\n-  public CompletableFuture<Boolean> executeAsync(CommandSource source, String cmdLine) {\n-    CompletableFuture<Boolean> result = new CompletableFuture<>();\n-    callCommandEvent(source, cmdLine).thenAccept(event -> {\n+  public CompletableFuture<Boolean> executeAsync(final CommandSource source, final String cmdLine) {\n+    Preconditions.checkNotNull(source, \"source\");\n+    Preconditions.checkNotNull(cmdLine, \"cmdLine\");\n+\n+    return callCommandEvent(source, cmdLine).thenApply(event -> {\n       CommandResult commandResult = event.getResult();\n       if (commandResult.isForwardToServer() || !commandResult.isAllowed()) {\n-        result.complete(false);\n-      }\n-      String command = commandResult.getCommand().orElse(event.getCommand());\n-      try {\n-        result.complete(executeImmediately(source, command));\n-      } catch (Exception e) {\n-        result.completeExceptionally(e);\n+        return false;\n       }\n+      return executeImmediately(source, commandResult.getCommand().orElse(event.getCommand()));\n     });\n-    return result;\n   }\n \n   @Override\n-  public CompletableFuture<Boolean> executeImmediatelyAsync(CommandSource source, String cmdLine) {\n+  public CompletableFuture<Boolean> executeImmediatelyAsync(\n+          final CommandSource source, final String cmdLine) {\n     Preconditions.checkNotNull(source, \"source\");\n     Preconditions.checkNotNull(cmdLine, \"cmdLine\");\n-    CompletableFuture<Boolean> result = new CompletableFuture<>();\n-    eventManager.getService().execute(() -> {\n-      try {\n-        result.complete(executeImmediately(source, cmdLine));\n-      } catch (Exception e) {\n-        result.completeExceptionally(e);\n-      }\n-    });\n-    return result;\n-  }\n-\n-  public boolean hasCommand(String command) {\n-    return commands.containsKey(command);\n-  }\n \n-  public Set<String> getAllRegisteredCommands() {\n-    return ImmutableSet.copyOf(commands.keySet());\n+    return CompletableFuture.supplyAsync(\n+        () -> executeImmediately(source, cmdLine), eventManager.getService());\n   }\n \n   /**\n-   * Offer suggestions to fill in the command.\n-   * @param source the source for the command\n+   * Returns suggestions to fill in the given command.\n+   *\n+   * @param source the source to execute the command for\n    * @param cmdLine the partially completed command\n-   * @return a {@link List}, possibly empty\n+   * @return a {@link CompletableFuture} eventually completed with a {@link List},\n+   *         possibly empty\n    */\n-  public List<String> offerSuggestions(CommandSource source, String cmdLine) {\n+  public CompletableFuture<List<String>> offerSuggestions(final CommandSource source,\n+                                                          final String cmdLine) {\n     Preconditions.checkNotNull(source, \"source\");\n     Preconditions.checkNotNull(cmdLine, \"cmdLine\");\n \n-    int firstSpace = cmdLine.indexOf(' ');\n-    if (firstSpace == -1) {\n-      // Offer to fill in commands.\n-      ImmutableList.Builder<String> availableCommands = ImmutableList.builder();\n-      for (Map.Entry<String, RawCommand> entry : commands.entrySet()) {\n-        if (entry.getKey().regionMatches(true, 0, cmdLine, 0, cmdLine.length())\n-            && entry.getValue().hasPermission(source, new String[0])) {\n-          availableCommands.add(\"/\" + entry.getKey());\n-        }\n-      }\n-      return availableCommands.build();\n-    }\n-\n-    String alias = cmdLine.substring(0, firstSpace);\n-    String args = cmdLine.substring(firstSpace);\n-    RawCommand command = commands.get(alias.toLowerCase(Locale.ENGLISH));\n-    if (command == null) {\n-      // No such command, so we can't offer any tab complete suggestions.\n-      return ImmutableList.of();\n-    }\n+    ParseResults<CommandSource> parse = parse(cmdLine, source, false);\n+    return dispatcher.getCompletionSuggestions(parse)\n+            .thenApply(suggestions -> Lists.transform(suggestions.getList(), Suggestion::getText));\n+  }\n \n-    try {\n-      if (!command.hasPermission(source, args)) {\n-        return ImmutableList.of();\n-      }\n-      return ImmutableList.copyOf(command.suggest(source, args));\n-    } catch (Exception e) {\n-      throw new RuntimeException(\n-          \"Unable to invoke suggestions for command \" + cmdLine + \" for \" + source, e);\n-    }\n+  private ParseResults<CommandSource> parse(final String cmdLine, final CommandSource source,\n+                                            final boolean trim) {\n+    String normalized = BrigadierUtils.normalizeInput(cmdLine, trim);\n+    return dispatcher.parse(normalized, source);\n   }\n \n   /**\n-   * Determines if the {@code source} has permission to run the {@code cmdLine}.\n-   * @param source the source to check against\n-   * @param cmdLine the command to run\n-   * @return {@code true} if the command can be run, otherwise {@code false}\n+   * Returns whether the given alias is registered on this manager.\n+   *\n+   * @param alias the command alias to check\n+   * @return {@code true} if the alias is registered\n    */\n-  public boolean hasPermission(CommandSource source, String cmdLine) {\n-    Preconditions.checkNotNull(source, \"source\");\n-    Preconditions.checkNotNull(cmdLine, \"cmdLine\");\n-\n-    String alias = cmdLine;\n-    String args = \"\";\n-    int firstSpace = cmdLine.indexOf(' ');\n-    if (firstSpace != -1) {\n-      alias = cmdLine.substring(0, firstSpace);\n-      args = cmdLine.substring(firstSpace).trim();\n-    }\n-    RawCommand command = commands.get(alias.toLowerCase(Locale.ENGLISH));\n-    if (command == null) {\n-      return false;\n-    }\n-\n-    try {\n-      return command.hasPermission(source, args);\n-    } catch (Exception e) {\n-      throw new RuntimeException(\n-          \"Unable to invoke suggestions for command \" + alias + \" for \" + source, e);\n-    }\n+  public boolean hasCommand(final String alias) {\n+    Preconditions.checkNotNull(alias, \"alias\");\n+    return dispatcher.getRoot().getChild(alias.toLowerCase(Locale.ENGLISH)) != null;\n   }\n \n-  private static class RegularCommandWrapper implements RawCommand {\n-\n-    private final Command delegate;\n-\n-    private RegularCommandWrapper(Command delegate) {\n-      this.delegate = delegate;\n-    }\n-\n-    private static String[] split(String line) {\n-      if (line.isEmpty()) {\n-        return new String[0];\n-      }\n-\n-      String[] trimmed = line.trim().split(\" \", -1);\n-      if (line.endsWith(\" \") && !line.trim().isEmpty()) {\n-        // To work around a 1.13+ specific bug we have to inject a space at the end of the arguments\n-        trimmed = Arrays.copyOf(trimmed, trimmed.length + 1);\n-        trimmed[trimmed.length - 1] = \"\";\n-      }\n-      return trimmed;\n-    }\n-\n-    @Override\n-    public void execute(CommandSource source, String commandLine) {\n-      delegate.execute(source, split(commandLine));\n-    }\n-\n-    @Override\n-    public List<String> suggest(CommandSource source, String currentLine) {\n-      return delegate.suggest(source, split(currentLine));\n-    }\n-\n-    @Override\n-    public boolean hasPermission(CommandSource source, String commandLine) {\n-      return delegate.hasPermission(source, split(commandLine));\n-    }\n-\n-    static RawCommand wrap(Command command) {\n-      if (command instanceof RawCommand) {\n-        return (RawCommand) command;\n-      }\n-      return new RegularCommandWrapper(command);\n-    }\n+  public CommandDispatcher<CommandSource> getDispatcher() {\n+    return dispatcher;\n   }\n }\n", "next_change": {"commit": "569bb4a16bf48005ea10e6fcf4d71e4e9895c03b", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/command/VelocityCommandManager.java b/proxy/src/main/java/com/velocitypowered/proxy/command/VelocityCommandManager.java\nindex 368164e0..975d26dc 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/command/VelocityCommandManager.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/command/VelocityCommandManager.java\n", "chunk": "@@ -226,4 +216,4 @@ public class VelocityCommandManager implements CommandManager {\n   public CommandDispatcher<CommandSource> getDispatcher() {\n     return dispatcher;\n   }\n-}\n+}\n\\ No newline at end of file\n", "next_change": {"commit": "703b91e0fa9a4b52fcc329d64a94c1707648139b", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/command/VelocityCommandManager.java b/proxy/src/main/java/com/velocitypowered/proxy/command/VelocityCommandManager.java\nindex 975d26dc..0d15f02b 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/command/VelocityCommandManager.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/command/VelocityCommandManager.java\n", "chunk": "@@ -214,6 +238,11 @@ public class VelocityCommandManager implements CommandManager {\n   }\n \n   public CommandDispatcher<CommandSource> getDispatcher() {\n+    // TODO Can we remove this? This is only used by tests, and constitutes unsafe publication.\n     return dispatcher;\n   }\n+\n+  public CommandGraphInjector<CommandSource> getInjector() {\n+    return injector;\n+  }\n }\n\\ No newline at end of file\n", "next_change": {"commit": "ea716c15c6300ecda26d90214ed247bb619cb023", "changed_code": [{"header": "diff --git a/proxy/src/main/java/com/velocitypowered/proxy/command/VelocityCommandManager.java b/proxy/src/main/java/com/velocitypowered/proxy/command/VelocityCommandManager.java\nindex 0d15f02b..6332c51f 100644\n--- a/proxy/src/main/java/com/velocitypowered/proxy/command/VelocityCommandManager.java\n+++ b/proxy/src/main/java/com/velocitypowered/proxy/command/VelocityCommandManager.java\n", "chunk": "@@ -237,9 +239,9 @@ public class VelocityCommandManager implements CommandManager {\n     return dispatcher.getRoot().getChild(alias.toLowerCase(Locale.ENGLISH)) != null;\n   }\n \n-  public CommandDispatcher<CommandSource> getDispatcher() {\n-    // TODO Can we remove this? This is only used by tests, and constitutes unsafe publication.\n-    return dispatcher;\n+  @VisibleForTesting // this constitutes unsafe publication\n+  RootCommandNode<CommandSource> getRoot() {\n+    return dispatcher.getRoot();\n   }\n \n   public CommandGraphInjector<CommandSource> getInjector() {\n", "next_change": null}]}}]}}]}}]}}]}, "commits_in_main": [{"oid": "e759668f5398b707c4fa7005c466c823f612ddca", "message": "Merge commit", "committedDate": null}, {"oid": "e83662e8c37be54e6412db70075e78764adbfaab", "committedDate": "2020-05-29 21:36:58 -0400", "message": "Clean up imports and remove some legacy declarations."}, {"oid": "9c8c851d12206a80e51ef58ff0001d0919f89e57", "committedDate": "2020-07-15 00:28:22 +0200", "message": "Add async command suggestions"}, {"oid": "6cc6e0f6414270feb79caf91240df813597dd92c", "committedDate": "2020-07-29 03:43:16 -0400", "message": "New command API (#330)"}, {"oid": "65e1b7be8732f544f3ea0a77d2f5767f9b1ef84f", "committedDate": "2020-07-29 03:55:59 -0400", "message": "Hints will override the default catch-all by default"}, {"oid": "c2db8d4ac177b8d64ca30631873798a01b91aa06", "committedDate": "2020-07-29 03:58:04 -0400", "message": "Swallow Throwable since plugins are naughty and don't do the right thing -_-"}, {"oid": "b6a60b610a8790380c660852cad734604e5ade38", "committedDate": "2020-07-29 05:51:40 -0400", "message": "Resolve (most) issues flagged by @hugmanrique in 65e1b7be873"}, {"oid": "4c5636e6f74b23fc773eceb6588ae8b51ac2d4c5", "committedDate": "2020-07-29 06:20:16 -0400", "message": "Lie about command invocation succeeding if there is a syntax error."}, {"oid": "7f1ee77a6924a75e8dbcd710efaafa5b4c5dd9a2", "committedDate": "2020-07-30 06:03:29 -0400", "message": "Fix accidential breaking change not allowing aliases to be overridden."}, {"oid": "e3a95b478347996f72852bfa0abbf18a34bc1c56", "committedDate": "2020-07-30 06:06:37 -0400", "message": "Actually fix accidental breaking change not allowing aliases to be overridden."}, {"oid": "933c81b9bfaae87c41e9fb494471eda83a7f8623", "committedDate": "2020-07-31 10:58:27 -0400", "message": "Fix legacy register command not allowing command overrides"}, {"oid": "2a04932112be9814596f36ca623912614eb92f1d", "committedDate": "2020-08-03 08:07:42 -0400", "message": "Fix typo in register() where the primary alias would be unregistered if other aliases were specified."}, {"oid": "2b6c271cc778c0d6876e113f5229097ad22884ad", "committedDate": "2020-09-13 19:11:40 +0200", "message": "Add ability to check for command alias existence in api module"}, {"oid": "cc6546bea9783eb5a1672e2c936ccf6ab819e5d8", "committedDate": "2020-09-28 05:36:35 -0700", "message": "Update for Adventure changes"}, {"oid": "60e917b4a104d02f9175013e3ce1a42c5daa4ae9", "committedDate": "2020-10-13 22:36:51 -0700", "message": "Player has an identity"}, {"oid": "329e2b0dc972b8cdb5f09df9969af19deba71ef1", "committedDate": "2020-11-16 13:09:47 -0500", "message": "Use our fork's removeChildByName"}, {"oid": "523b61e0c7d3803e25bed90574221b73b213fcd4", "committedDate": "2020-12-14 14:39:39 -0500", "message": "Make sure unit tests actually run(!) and fix command hints"}, {"oid": "c747120b20be1853ee02e7b2b67871249a88aa6d", "committedDate": "2021-03-31 16:04:06 -0400", "message": "Relicense the Velocity proxy under the terms of GPLv3 (#448)"}, {"oid": "2f0ee15051e00e403e9b79b0ceaf6a607a54eb2b", "committedDate": "2021-05-23 13:46:47 -0400", "message": "Remove deprecated Velocity 1.0.0 Command API."}, {"oid": "d6dcb115f1f30d8d34a49d71b01f251b6c918ca2", "committedDate": "2021-05-23 13:49:06 -0400", "message": "Remove remaining deprecated APIs"}, {"oid": "569bb4a16bf48005ea10e6fcf4d71e4e9895c03b", "committedDate": "2021-05-23 13:58:27 -0400", "message": "Just import the entire command manager from Polymer, without changing any names"}, {"oid": "3f50964f368ad0f6650e66965566146fd97b16e9", "committedDate": "2021-05-23 14:20:59 -0400", "message": "Fix CommandManager method naming so that it is in sync with the 1.1.0 API"}, {"oid": "821ca02ee71f75d122e565fc8a9119729440490d", "committedDate": "2021-05-23 15:39:06 -0400", "message": "Backport Velocity Polymer's async event API, with changes."}, {"oid": "703b91e0fa9a4b52fcc329d64a94c1707648139b", "committedDate": "2021-06-05 23:19:01 +0200", "message": "Command implementation refactor"}, {"oid": "d429d8383d4e1456a1172be92920cd3b48b23069", "committedDate": "2021-06-07 14:13:32 +0200", "message": "Test execution and injection"}, {"oid": "ea716c15c6300ecda26d90214ed247bb619cb023", "committedDate": "2021-06-07 14:36:41 +0200", "message": "Test CommandManager"}, {"oid": "ba34e4729b5a0394309f25aba1f7e3e896fc77b2", "committedDate": "2021-06-09 22:22:15 +0200", "message": "Add more suggestion tests"}, {"oid": "fb7aafe8aee67773958beb0a2834e436a877b3da", "committedDate": "2021-06-10 20:25:52 +0200", "message": "Fix Brigadier command alias redirects"}, {"oid": "f6e6f02a84d1c084bdaa384349c9f620b5a80c6b", "committedDate": "2021-06-10 20:35:36 +0200", "message": "Fix checkstyle violations"}, {"oid": "61480544f5903143f5db0deba5b65f4ad00f4d16", "committedDate": "2021-06-11 14:03:38 +0200", "message": "Apply suggested future-related changes"}, {"oid": "3b6b73f216bd851c9ba16c5feffab41f2852ffe0", "committedDate": "2021-06-24 10:10:34 -0400", "message": "Make announce-player-commands not suggest aliases"}, {"oid": "76c682792602c9b4385b87932ed27efe7a55df15", "committedDate": "2021-07-24 14:34:50 -0400", "message": "Expose registered aliases in API (#549)"}, {"oid": "567582b2e2acc1d374bb7780eea8213d63973f9b", "committedDate": "2021-10-04 15:17:36 -0400", "message": "Fix thread-unsafe command unregistration (#583)"}, {"oid": "922c001b59b381d69b9e172ae31cb23daefbf9a7", "committedDate": "2021-10-31 16:23:35 -0400", "message": "Expose CommandMeta in CommandManager and add a ref to the plugin instance (#544)"}, {"oid": "0b0c36dcfc77a89d215fd618b5b139c5f3ce9f9a", "committedDate": "2021-10-31 19:05:21 -0400", "message": "Correct command meta alias removal behavior and add appropriate unit tests."}, {"oid": "111d14c3fb8b9f52344c6f1889e08667c894a293", "committedDate": "2021-11-02 16:20:15 -0400", "message": "Introduce VelocityBrigadierMessage (#588)"}, {"oid": "d72d707b1c0dd6215a4984956faf4b2ec4bdbd97", "committedDate": "2023-01-01 17:53:37 -0500", "message": "Convert Velocity buildscripts to Kotlin DSL (#918)"}, {"oid": "b0862d2d16c4ba7560d3f24c824d78793ac3d9e0", "committedDate": "2023-01-01 18:46:33 -0500", "message": "Use Spotless for license formatting"}, {"oid": "e364e2c7d1918ec7c20986fb640f3f6a64127bb0", "committedDate": "2023-04-09 12:23:39 -0400", "message": "feat: Warn if an attempt is made to register a command with multiple interfaces implemented instead of just ignoring it (#1000)"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQxNzk5Mw==", "url": "https://github.com/PaperMC/Velocity/pull/299#discussion_r415417993", "body": "I'd like to add `@Deprecated` here", "bodyText": "I'd like to add @Deprecated here", "bodyHTML": "<p dir=\"auto\">I'd like to add <code>@Deprecated</code> here</p>", "author": "astei", "createdAt": "2020-04-26T22:41:01Z", "path": "api/src/main/java/com/velocitypowered/api/command/CommandManager.java", "diffHunk": "@@ -34,11 +36,42 @@\n   void unregister(String alias);\n \n   /**\n-   * Attempts to execute a command from the specified {@code cmdLine}.\n+   * Calls CommandExecuteEvent and attempts to execute a command from the specified {@code cmdLine}\n+   * sync.\n    *\n    * @param source the command's source\n    * @param cmdLine the command to run\n    * @return true if the command was found and executed, false if it was not\n    */\n   boolean execute(CommandSource source, String cmdLine);", "originalCommit": "c0b8e9d646cf94877c89f0b6d631ebb484f58ca2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "26bf94f08f3c4c25304ad023392f348c1bf85170", "changed_code": [{"header": "diff --git a/api/src/main/java/com/velocitypowered/api/command/CommandManager.java b/api/src/main/java/com/velocitypowered/api/command/CommandManager.java\nindex af200cb7..f29777d6 100644\n--- a/api/src/main/java/com/velocitypowered/api/command/CommandManager.java\n+++ b/api/src/main/java/com/velocitypowered/api/command/CommandManager.java\n", "chunk": "@@ -36,22 +36,29 @@ public interface CommandManager {\n   void unregister(String alias);\n \n   /**\n-   * Calls CommandExecuteEvent and attempts to execute a command from the specified {@code cmdLine}\n-   * sync.\n+   * Calls CommandExecuteEvent and attempts to execute a command using the specified {@code cmdLine}\n+   * in a blocking fashion.\n    *\n    * @param source the command's source\n    * @param cmdLine the command to run\n    * @return true if the command was found and executed, false if it was not\n+   * \n+   * @deprecated This method will block current thread during event call and command execution.\n+   *             Prefer {@link #executeAsync(CommandSource, String)} instead.\n    */\n+  @Deprecated\n   boolean execute(CommandSource source, String cmdLine);\n \n   /**\n-   * Attempts to execute a command from the specified {@code cmdLine} sync\n-   * without calling CommandExecuteEvent.\n+   * Attempts to execute a command using the specified {@code cmdLine} in a blocking fashion without\n+   * calling CommandExecuteEvent.\n    *\n    * @param source the command's source\n    * @param cmdLine the command to run\n    * @return true if the command was found and executed, false if it was not\n+   * \n+   * @deprecated This method will block current thread during event and command execution.\n+   *             Prefer {@link #executeImmediatelyAsync(CommandSource, String)} instead.\n    */\n   boolean executeImmediately(CommandSource source, String cmdLine);\n \n", "next_change": {"commit": "9d6689f64aefafdcbc0c96c30ec3cc93d1a77283", "changed_code": [{"header": "diff --git a/api/src/main/java/com/velocitypowered/api/command/CommandManager.java b/api/src/main/java/com/velocitypowered/api/command/CommandManager.java\nindex f29777d6..40216715 100644\n--- a/api/src/main/java/com/velocitypowered/api/command/CommandManager.java\n+++ b/api/src/main/java/com/velocitypowered/api/command/CommandManager.java\n", "chunk": "@@ -60,6 +60,7 @@ public interface CommandManager {\n    * @deprecated This method will block current thread during event and command execution.\n    *             Prefer {@link #executeImmediatelyAsync(CommandSource, String)} instead.\n    */\n+  @Deprecated\n   boolean executeImmediately(CommandSource source, String cmdLine);\n \n   /**\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "e759668f5398b707c4fa7005c466c823f612ddca", "changed_code": [{"header": "diff --git a/api/src/main/java/com/velocitypowered/api/command/CommandManager.java b/api/src/main/java/com/velocitypowered/api/command/CommandManager.java\nindex af200cb7..40216715 100644\n--- a/api/src/main/java/com/velocitypowered/api/command/CommandManager.java\n+++ b/api/src/main/java/com/velocitypowered/api/command/CommandManager.java\n", "chunk": "@@ -36,23 +36,31 @@ public interface CommandManager {\n   void unregister(String alias);\n \n   /**\n-   * Calls CommandExecuteEvent and attempts to execute a command from the specified {@code cmdLine}\n-   * sync.\n+   * Calls CommandExecuteEvent and attempts to execute a command using the specified {@code cmdLine}\n+   * in a blocking fashion.\n    *\n    * @param source the command's source\n    * @param cmdLine the command to run\n    * @return true if the command was found and executed, false if it was not\n+   * \n+   * @deprecated This method will block current thread during event call and command execution.\n+   *             Prefer {@link #executeAsync(CommandSource, String)} instead.\n    */\n+  @Deprecated\n   boolean execute(CommandSource source, String cmdLine);\n \n   /**\n-   * Attempts to execute a command from the specified {@code cmdLine} sync\n-   * without calling CommandExecuteEvent.\n+   * Attempts to execute a command using the specified {@code cmdLine} in a blocking fashion without\n+   * calling CommandExecuteEvent.\n    *\n    * @param source the command's source\n    * @param cmdLine the command to run\n    * @return true if the command was found and executed, false if it was not\n+   * \n+   * @deprecated This method will block current thread during event and command execution.\n+   *             Prefer {@link #executeImmediatelyAsync(CommandSource, String)} instead.\n    */\n+  @Deprecated\n   boolean executeImmediately(CommandSource source, String cmdLine);\n \n   /**\n", "next_change": {"commit": "6cc6e0f6414270feb79caf91240df813597dd92c", "changed_code": [{"header": "diff --git a/api/src/main/java/com/velocitypowered/api/command/CommandManager.java b/api/src/main/java/com/velocitypowered/api/command/CommandManager.java\nindex 40216715..b688adc6 100644\n--- a/api/src/main/java/com/velocitypowered/api/command/CommandManager.java\n+++ b/api/src/main/java/com/velocitypowered/api/command/CommandManager.java\n", "chunk": "@@ -1,87 +1,125 @@\n package com.velocitypowered.api.command;\n \n+import com.velocitypowered.api.event.command.CommandExecuteEvent;\n import java.util.concurrent.CompletableFuture;\n \n /**\n- * Represents an interface to register a command executor with the proxy.\n+ * Handles the registration and execution of commands.\n  */\n public interface CommandManager {\n \n   /**\n-   * Registers the specified command with the manager with the specified aliases.\n+   * Returns a builder to create a {@link CommandMeta} with\n+   * the given alias.\n+   *\n+   * @param alias the first command alias\n+   * @return a {@link CommandMeta} builder\n+   */\n+  CommandMeta.Builder metaBuilder(String alias);\n+\n+  /**\n+   * Returns a builder to create a {@link CommandMeta} for\n+   * the given Brigadier command.\n+   *\n+   * @param command the command\n+   * @return a {@link CommandMeta} builder\n+   */\n+  CommandMeta.Builder metaBuilder(BrigadierCommand command);\n+\n+  /**\n+   * Registers the specified command with the specified aliases.\n    *\n    * @param command the command to register\n-   * @param aliases the alias to use\n+   * @param aliases the command aliases\n    *\n+   * @throws IllegalArgumentException if one of the given aliases is already registered\n    * @deprecated This method requires at least one alias, but this is only enforced at runtime.\n-   *             Prefer {@link #register(String, Command, String...)} instead.\n+   *             Prefer {@link #register(String, Command, String...)}\n    */\n   @Deprecated\n   void register(Command command, String... aliases);\n \n   /**\n-   * Registers the specified command with the manager with the specified aliases.\n+   * Registers the specified command with the specified aliases.\n    *\n-   * @param alias the first alias to register\n+   * @param alias the first command alias\n    * @param command the command to register\n-   * @param otherAliases the other aliases to use\n+   * @param otherAliases additional aliases\n+   * @throws IllegalArgumentException if one of the given aliases is already registered\n+   * @deprecated Prefer {@link #register(CommandMeta, Command)} instead.\n    */\n+  @Deprecated\n   void register(String alias, Command command, String... otherAliases);\n \n   /**\n-   * Unregisters a command.\n+   * Registers the specified Brigadier command.\n+   *\n+   * @param command the command to register\n+   * @throws IllegalArgumentException if the node alias is already registered\n+   */\n+  void register(BrigadierCommand command);\n+\n+  /**\n+   * Registers the specified command with the given metadata.\n+   *\n+   * @param meta the command metadata\n+   * @param command the command to register\n+   * @throws IllegalArgumentException if one of the given aliases is already registered\n+   */\n+  void register(CommandMeta meta, Command command);\n+\n+  /**\n+   * Unregisters the specified command alias from the manager, if registered.\n    *\n    * @param alias the command alias to unregister\n    */\n   void unregister(String alias);\n \n   /**\n-   * Calls CommandExecuteEvent and attempts to execute a command using the specified {@code cmdLine}\n-   * in a blocking fashion.\n+   * Attempts to execute a command from the given {@code cmdLine} in\n+   * a blocking fashion.\n    *\n-   * @param source the command's source\n+   * @param source the source to execute the command for\n    * @param cmdLine the command to run\n-   * @return true if the command was found and executed, false if it was not\n-   * \n-   * @deprecated This method will block current thread during event call and command execution.\n-   *             Prefer {@link #executeAsync(CommandSource, String)} instead.\n+   * @return {@code true} if the command was found and executed\n+   * @deprecated this method blocks the current thread during the event call and\n+   *             the command execution. Prefer {@link #executeAsync(CommandSource, String)}\n+   *             instead.\n    */\n   @Deprecated\n   boolean execute(CommandSource source, String cmdLine);\n \n   /**\n-   * Attempts to execute a command using the specified {@code cmdLine} in a blocking fashion without\n-   * calling CommandExecuteEvent.\n+   * Attempts to execute a command from the given {@code cmdLine} without\n+   * firing a {@link CommandExecuteEvent} in a blocking fashion.\n    *\n-   * @param source the command's source\n+   * @param source the source to execute the command for\n    * @param cmdLine the command to run\n-   * @return true if the command was found and executed, false if it was not\n-   * \n-   * @deprecated This method will block current thread during event and command execution.\n+   * @return {@code true} if the command was found and executed\n+   * @deprecated this methods blocks the current thread during the command execution.\n    *             Prefer {@link #executeImmediatelyAsync(CommandSource, String)} instead.\n    */\n   @Deprecated\n   boolean executeImmediately(CommandSource source, String cmdLine);\n \n   /**\n-   * Calls CommandExecuteEvent and attempts to execute a command from the specified {@code cmdLine}\n-   * async.\n+   * Attempts to asynchronously execute a command from the given {@code cmdLine}.\n    *\n-   * @param source the command's source\n+   * @param source the source to execute the command for\n    * @param cmdLine the command to run\n-   * @return A future that will be completed with the result of the command execution.\n-   *         Can be completed exceptionally if exception was thrown during execution.\n+   * @return a future that may be completed with the result of the command execution.\n+   *         Can be completed exceptionally if an exception is thrown during execution.\n    */\n   CompletableFuture<Boolean> executeAsync(CommandSource source, String cmdLine);\n \n   /**\n-   * Attempts to execute a command from the specified {@code cmdLine} async\n-   * without calling CommandExecuteEvent.\n+   * Attempts to asynchronously execute a command from the given {@code cmdLine}\n+   * without firing a {@link CommandExecuteEvent}.\n    *\n-   * @param source the command's source\n+   * @param source the source to execute the command for\n    * @param cmdLine the command to run\n-   * @return A future that will be completed with the result of the command execution.\n-   *         Can be completed exceptionally if exception was thrown during execution.\n+   * @return a future that may be completed with the result of the command execution.\n+   *         Can be completed exceptionally if an exception is thrown during execution.\n    */\n   CompletableFuture<Boolean> executeImmediatelyAsync(CommandSource source, String cmdLine);\n }\n", "next_change": {"commit": "2b6c271cc778c0d6876e113f5229097ad22884ad", "changed_code": [{"header": "diff --git a/api/src/main/java/com/velocitypowered/api/command/CommandManager.java b/api/src/main/java/com/velocitypowered/api/command/CommandManager.java\nindex b688adc6..68c3ed2c 100644\n--- a/api/src/main/java/com/velocitypowered/api/command/CommandManager.java\n+++ b/api/src/main/java/com/velocitypowered/api/command/CommandManager.java\n", "chunk": "@@ -122,4 +122,12 @@ public interface CommandManager {\n    *         Can be completed exceptionally if an exception is thrown during execution.\n    */\n   CompletableFuture<Boolean> executeImmediatelyAsync(CommandSource source, String cmdLine);\n+\n+  /**\n+   * Returns whether the given alias is registered on this manager.\n+   *\n+   * @param alias the command alias to check\n+   * @return {@code true} if the alias is registered\n+   */\n+  boolean hasCommand(String alias);\n }\n", "next_change": {"commit": "76c682792602c9b4385b87932ed27efe7a55df15", "changed_code": [{"header": "diff --git a/api/src/main/java/com/velocitypowered/api/command/CommandManager.java b/api/src/main/java/com/velocitypowered/api/command/CommandManager.java\nindex 68c3ed2c..9cc92a2e 100644\n--- a/api/src/main/java/com/velocitypowered/api/command/CommandManager.java\n+++ b/api/src/main/java/com/velocitypowered/api/command/CommandManager.java\n", "chunk": "@@ -123,11 +95,19 @@ public interface CommandManager {\n    */\n   CompletableFuture<Boolean> executeImmediatelyAsync(CommandSource source, String cmdLine);\n \n+  /**\n+   * Returns an immutable collection of the case-insensitive aliases registered\n+   * on this manager.\n+   *\n+   * @return the registered aliases\n+   */\n+  Collection<String> getAliases();\n+\n   /**\n    * Returns whether the given alias is registered on this manager.\n    *\n    * @param alias the command alias to check\n-   * @return {@code true} if the alias is registered\n+   * @return true if the alias is registered; false otherwise\n    */\n   boolean hasCommand(String alias);\n }\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "e759668f5398b707c4fa7005c466c823f612ddca", "message": "Merge commit", "committedDate": null}, {"oid": "6cc6e0f6414270feb79caf91240df813597dd92c", "committedDate": "2020-07-29 03:43:16 -0400", "message": "New command API (#330)"}, {"oid": "2b6c271cc778c0d6876e113f5229097ad22884ad", "committedDate": "2020-09-13 19:11:40 +0200", "message": "Add ability to check for command alias existence in api module"}, {"oid": "e3eace6a563f3b45d2b45e2781a125d942554b78", "committedDate": "2020-10-22 00:14:41 -0400", "message": "Undeprecate CommandManager#register(String, Command, String...)"}, {"oid": "c747120b20be1853ee02e7b2b67871249a88aa6d", "committedDate": "2021-03-31 16:04:06 -0400", "message": "Relicense the Velocity proxy under the terms of GPLv3 (#448)"}, {"oid": "2f0ee15051e00e403e9b79b0ceaf6a607a54eb2b", "committedDate": "2021-05-23 13:46:47 -0400", "message": "Remove deprecated Velocity 1.0.0 Command API."}, {"oid": "d6dcb115f1f30d8d34a49d71b01f251b6c918ca2", "committedDate": "2021-05-23 13:49:06 -0400", "message": "Remove remaining deprecated APIs"}, {"oid": "3f50964f368ad0f6650e66965566146fd97b16e9", "committedDate": "2021-05-23 14:20:59 -0400", "message": "Fix CommandManager method naming so that it is in sync with the 1.1.0 API"}, {"oid": "e6eecd806a02aadc1189ba10c4082d45b1dc3dbf", "committedDate": "2021-06-05 18:02:26 +0200", "message": "Document some restrictions in the command API"}, {"oid": "76c682792602c9b4385b87932ed27efe7a55df15", "committedDate": "2021-07-24 14:34:50 -0400", "message": "Expose registered aliases in API (#549)"}, {"oid": "922c001b59b381d69b9e172ae31cb23daefbf9a7", "committedDate": "2021-10-31 16:23:35 -0400", "message": "Expose CommandMeta in CommandManager and add a ref to the plugin instance (#544)"}, {"oid": "0b0c36dcfc77a89d215fd618b5b139c5f3ce9f9a", "committedDate": "2021-10-31 19:05:21 -0400", "message": "Correct command meta alias removal behavior and add appropriate unit tests."}, {"oid": "d72d707b1c0dd6215a4984956faf4b2ec4bdbd97", "committedDate": "2023-01-01 17:53:37 -0500", "message": "Convert Velocity buildscripts to Kotlin DSL (#918)"}, {"oid": "b0862d2d16c4ba7560d3f24c824d78793ac3d9e0", "committedDate": "2023-01-01 18:46:33 -0500", "message": "Use Spotless for license formatting"}]}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQxODE2Nw==", "url": "https://github.com/PaperMC/Velocity/pull/299#discussion_r415418167", "body": "Velocity has no concept of `sync`. More accurately this could say `Attempts to execute a command using the specified {@code cmdLine} in a blocking fashion.`", "bodyText": "Velocity has no concept of sync. More accurately this could say Attempts to execute a command using the specified {@code cmdLine} in a blocking fashion.", "bodyHTML": "<p dir=\"auto\">Velocity has no concept of <code>sync</code>. More accurately this could say <code>Attempts to execute a command using the specified {@code cmdLine} in a blocking fashion.</code></p>", "author": "astei", "createdAt": "2020-04-26T22:41:47Z", "path": "api/src/main/java/com/velocitypowered/api/command/CommandManager.java", "diffHunk": "@@ -34,11 +36,42 @@\n   void unregister(String alias);\n \n   /**\n-   * Attempts to execute a command from the specified {@code cmdLine}.\n+   * Calls CommandExecuteEvent and attempts to execute a command from the specified {@code cmdLine}\n+   * sync.\n    *\n    * @param source the command's source\n    * @param cmdLine the command to run\n    * @return true if the command was found and executed, false if it was not\n    */\n   boolean execute(CommandSource source, String cmdLine);\n+\n+  /**\n+   * Attempts to execute a command from the specified {@code cmdLine} sync", "originalCommit": "c0b8e9d646cf94877c89f0b6d631ebb484f58ca2", "replyToReviewId": null, "replies": null, "type": "inlineReview", "revised_code": {"commit": "26bf94f08f3c4c25304ad023392f348c1bf85170", "changed_code": [{"header": "diff --git a/api/src/main/java/com/velocitypowered/api/command/CommandManager.java b/api/src/main/java/com/velocitypowered/api/command/CommandManager.java\nindex af200cb7..f29777d6 100644\n--- a/api/src/main/java/com/velocitypowered/api/command/CommandManager.java\n+++ b/api/src/main/java/com/velocitypowered/api/command/CommandManager.java\n", "chunk": "@@ -36,22 +36,29 @@ public interface CommandManager {\n   void unregister(String alias);\n \n   /**\n-   * Calls CommandExecuteEvent and attempts to execute a command from the specified {@code cmdLine}\n-   * sync.\n+   * Calls CommandExecuteEvent and attempts to execute a command using the specified {@code cmdLine}\n+   * in a blocking fashion.\n    *\n    * @param source the command's source\n    * @param cmdLine the command to run\n    * @return true if the command was found and executed, false if it was not\n+   * \n+   * @deprecated This method will block current thread during event call and command execution.\n+   *             Prefer {@link #executeAsync(CommandSource, String)} instead.\n    */\n+  @Deprecated\n   boolean execute(CommandSource source, String cmdLine);\n \n   /**\n-   * Attempts to execute a command from the specified {@code cmdLine} sync\n-   * without calling CommandExecuteEvent.\n+   * Attempts to execute a command using the specified {@code cmdLine} in a blocking fashion without\n+   * calling CommandExecuteEvent.\n    *\n    * @param source the command's source\n    * @param cmdLine the command to run\n    * @return true if the command was found and executed, false if it was not\n+   * \n+   * @deprecated This method will block current thread during event and command execution.\n+   *             Prefer {@link #executeImmediatelyAsync(CommandSource, String)} instead.\n    */\n   boolean executeImmediately(CommandSource source, String cmdLine);\n \n", "next_change": {"commit": "9d6689f64aefafdcbc0c96c30ec3cc93d1a77283", "changed_code": [{"header": "diff --git a/api/src/main/java/com/velocitypowered/api/command/CommandManager.java b/api/src/main/java/com/velocitypowered/api/command/CommandManager.java\nindex f29777d6..40216715 100644\n--- a/api/src/main/java/com/velocitypowered/api/command/CommandManager.java\n+++ b/api/src/main/java/com/velocitypowered/api/command/CommandManager.java\n", "chunk": "@@ -60,6 +60,7 @@ public interface CommandManager {\n    * @deprecated This method will block current thread during event and command execution.\n    *             Prefer {@link #executeImmediatelyAsync(CommandSource, String)} instead.\n    */\n+  @Deprecated\n   boolean executeImmediately(CommandSource source, String cmdLine);\n \n   /**\n", "next_change": null}]}}]}, "revised_code_in_main": {"commit": "e759668f5398b707c4fa7005c466c823f612ddca", "changed_code": [{"header": "diff --git a/api/src/main/java/com/velocitypowered/api/command/CommandManager.java b/api/src/main/java/com/velocitypowered/api/command/CommandManager.java\nindex af200cb7..40216715 100644\n--- a/api/src/main/java/com/velocitypowered/api/command/CommandManager.java\n+++ b/api/src/main/java/com/velocitypowered/api/command/CommandManager.java\n", "chunk": "@@ -36,23 +36,31 @@ public interface CommandManager {\n   void unregister(String alias);\n \n   /**\n-   * Calls CommandExecuteEvent and attempts to execute a command from the specified {@code cmdLine}\n-   * sync.\n+   * Calls CommandExecuteEvent and attempts to execute a command using the specified {@code cmdLine}\n+   * in a blocking fashion.\n    *\n    * @param source the command's source\n    * @param cmdLine the command to run\n    * @return true if the command was found and executed, false if it was not\n+   * \n+   * @deprecated This method will block current thread during event call and command execution.\n+   *             Prefer {@link #executeAsync(CommandSource, String)} instead.\n    */\n+  @Deprecated\n   boolean execute(CommandSource source, String cmdLine);\n \n   /**\n-   * Attempts to execute a command from the specified {@code cmdLine} sync\n-   * without calling CommandExecuteEvent.\n+   * Attempts to execute a command using the specified {@code cmdLine} in a blocking fashion without\n+   * calling CommandExecuteEvent.\n    *\n    * @param source the command's source\n    * @param cmdLine the command to run\n    * @return true if the command was found and executed, false if it was not\n+   * \n+   * @deprecated This method will block current thread during event and command execution.\n+   *             Prefer {@link #executeImmediatelyAsync(CommandSource, String)} instead.\n    */\n+  @Deprecated\n   boolean executeImmediately(CommandSource source, String cmdLine);\n \n   /**\n", "next_change": {"commit": "6cc6e0f6414270feb79caf91240df813597dd92c", "changed_code": [{"header": "diff --git a/api/src/main/java/com/velocitypowered/api/command/CommandManager.java b/api/src/main/java/com/velocitypowered/api/command/CommandManager.java\nindex 40216715..b688adc6 100644\n--- a/api/src/main/java/com/velocitypowered/api/command/CommandManager.java\n+++ b/api/src/main/java/com/velocitypowered/api/command/CommandManager.java\n", "chunk": "@@ -1,87 +1,125 @@\n package com.velocitypowered.api.command;\n \n+import com.velocitypowered.api.event.command.CommandExecuteEvent;\n import java.util.concurrent.CompletableFuture;\n \n /**\n- * Represents an interface to register a command executor with the proxy.\n+ * Handles the registration and execution of commands.\n  */\n public interface CommandManager {\n \n   /**\n-   * Registers the specified command with the manager with the specified aliases.\n+   * Returns a builder to create a {@link CommandMeta} with\n+   * the given alias.\n+   *\n+   * @param alias the first command alias\n+   * @return a {@link CommandMeta} builder\n+   */\n+  CommandMeta.Builder metaBuilder(String alias);\n+\n+  /**\n+   * Returns a builder to create a {@link CommandMeta} for\n+   * the given Brigadier command.\n+   *\n+   * @param command the command\n+   * @return a {@link CommandMeta} builder\n+   */\n+  CommandMeta.Builder metaBuilder(BrigadierCommand command);\n+\n+  /**\n+   * Registers the specified command with the specified aliases.\n    *\n    * @param command the command to register\n-   * @param aliases the alias to use\n+   * @param aliases the command aliases\n    *\n+   * @throws IllegalArgumentException if one of the given aliases is already registered\n    * @deprecated This method requires at least one alias, but this is only enforced at runtime.\n-   *             Prefer {@link #register(String, Command, String...)} instead.\n+   *             Prefer {@link #register(String, Command, String...)}\n    */\n   @Deprecated\n   void register(Command command, String... aliases);\n \n   /**\n-   * Registers the specified command with the manager with the specified aliases.\n+   * Registers the specified command with the specified aliases.\n    *\n-   * @param alias the first alias to register\n+   * @param alias the first command alias\n    * @param command the command to register\n-   * @param otherAliases the other aliases to use\n+   * @param otherAliases additional aliases\n+   * @throws IllegalArgumentException if one of the given aliases is already registered\n+   * @deprecated Prefer {@link #register(CommandMeta, Command)} instead.\n    */\n+  @Deprecated\n   void register(String alias, Command command, String... otherAliases);\n \n   /**\n-   * Unregisters a command.\n+   * Registers the specified Brigadier command.\n+   *\n+   * @param command the command to register\n+   * @throws IllegalArgumentException if the node alias is already registered\n+   */\n+  void register(BrigadierCommand command);\n+\n+  /**\n+   * Registers the specified command with the given metadata.\n+   *\n+   * @param meta the command metadata\n+   * @param command the command to register\n+   * @throws IllegalArgumentException if one of the given aliases is already registered\n+   */\n+  void register(CommandMeta meta, Command command);\n+\n+  /**\n+   * Unregisters the specified command alias from the manager, if registered.\n    *\n    * @param alias the command alias to unregister\n    */\n   void unregister(String alias);\n \n   /**\n-   * Calls CommandExecuteEvent and attempts to execute a command using the specified {@code cmdLine}\n-   * in a blocking fashion.\n+   * Attempts to execute a command from the given {@code cmdLine} in\n+   * a blocking fashion.\n    *\n-   * @param source the command's source\n+   * @param source the source to execute the command for\n    * @param cmdLine the command to run\n-   * @return true if the command was found and executed, false if it was not\n-   * \n-   * @deprecated This method will block current thread during event call and command execution.\n-   *             Prefer {@link #executeAsync(CommandSource, String)} instead.\n+   * @return {@code true} if the command was found and executed\n+   * @deprecated this method blocks the current thread during the event call and\n+   *             the command execution. Prefer {@link #executeAsync(CommandSource, String)}\n+   *             instead.\n    */\n   @Deprecated\n   boolean execute(CommandSource source, String cmdLine);\n \n   /**\n-   * Attempts to execute a command using the specified {@code cmdLine} in a blocking fashion without\n-   * calling CommandExecuteEvent.\n+   * Attempts to execute a command from the given {@code cmdLine} without\n+   * firing a {@link CommandExecuteEvent} in a blocking fashion.\n    *\n-   * @param source the command's source\n+   * @param source the source to execute the command for\n    * @param cmdLine the command to run\n-   * @return true if the command was found and executed, false if it was not\n-   * \n-   * @deprecated This method will block current thread during event and command execution.\n+   * @return {@code true} if the command was found and executed\n+   * @deprecated this methods blocks the current thread during the command execution.\n    *             Prefer {@link #executeImmediatelyAsync(CommandSource, String)} instead.\n    */\n   @Deprecated\n   boolean executeImmediately(CommandSource source, String cmdLine);\n \n   /**\n-   * Calls CommandExecuteEvent and attempts to execute a command from the specified {@code cmdLine}\n-   * async.\n+   * Attempts to asynchronously execute a command from the given {@code cmdLine}.\n    *\n-   * @param source the command's source\n+   * @param source the source to execute the command for\n    * @param cmdLine the command to run\n-   * @return A future that will be completed with the result of the command execution.\n-   *         Can be completed exceptionally if exception was thrown during execution.\n+   * @return a future that may be completed with the result of the command execution.\n+   *         Can be completed exceptionally if an exception is thrown during execution.\n    */\n   CompletableFuture<Boolean> executeAsync(CommandSource source, String cmdLine);\n \n   /**\n-   * Attempts to execute a command from the specified {@code cmdLine} async\n-   * without calling CommandExecuteEvent.\n+   * Attempts to asynchronously execute a command from the given {@code cmdLine}\n+   * without firing a {@link CommandExecuteEvent}.\n    *\n-   * @param source the command's source\n+   * @param source the source to execute the command for\n    * @param cmdLine the command to run\n-   * @return A future that will be completed with the result of the command execution.\n-   *         Can be completed exceptionally if exception was thrown during execution.\n+   * @return a future that may be completed with the result of the command execution.\n+   *         Can be completed exceptionally if an exception is thrown during execution.\n    */\n   CompletableFuture<Boolean> executeImmediatelyAsync(CommandSource source, String cmdLine);\n }\n", "next_change": {"commit": "2b6c271cc778c0d6876e113f5229097ad22884ad", "changed_code": [{"header": "diff --git a/api/src/main/java/com/velocitypowered/api/command/CommandManager.java b/api/src/main/java/com/velocitypowered/api/command/CommandManager.java\nindex b688adc6..68c3ed2c 100644\n--- a/api/src/main/java/com/velocitypowered/api/command/CommandManager.java\n+++ b/api/src/main/java/com/velocitypowered/api/command/CommandManager.java\n", "chunk": "@@ -122,4 +122,12 @@ public interface CommandManager {\n    *         Can be completed exceptionally if an exception is thrown during execution.\n    */\n   CompletableFuture<Boolean> executeImmediatelyAsync(CommandSource source, String cmdLine);\n+\n+  /**\n+   * Returns whether the given alias is registered on this manager.\n+   *\n+   * @param alias the command alias to check\n+   * @return {@code true} if the alias is registered\n+   */\n+  boolean hasCommand(String alias);\n }\n", "next_change": {"commit": "76c682792602c9b4385b87932ed27efe7a55df15", "changed_code": [{"header": "diff --git a/api/src/main/java/com/velocitypowered/api/command/CommandManager.java b/api/src/main/java/com/velocitypowered/api/command/CommandManager.java\nindex 68c3ed2c..9cc92a2e 100644\n--- a/api/src/main/java/com/velocitypowered/api/command/CommandManager.java\n+++ b/api/src/main/java/com/velocitypowered/api/command/CommandManager.java\n", "chunk": "@@ -123,11 +95,19 @@ public interface CommandManager {\n    */\n   CompletableFuture<Boolean> executeImmediatelyAsync(CommandSource source, String cmdLine);\n \n+  /**\n+   * Returns an immutable collection of the case-insensitive aliases registered\n+   * on this manager.\n+   *\n+   * @return the registered aliases\n+   */\n+  Collection<String> getAliases();\n+\n   /**\n    * Returns whether the given alias is registered on this manager.\n    *\n    * @param alias the command alias to check\n-   * @return {@code true} if the alias is registered\n+   * @return true if the alias is registered; false otherwise\n    */\n   boolean hasCommand(String alias);\n }\n", "next_change": null}]}}]}}]}}]}, "commits_in_main": [{"oid": "e759668f5398b707c4fa7005c466c823f612ddca", "message": "Merge commit", "committedDate": null}, {"oid": "6cc6e0f6414270feb79caf91240df813597dd92c", "committedDate": "2020-07-29 03:43:16 -0400", "message": "New command API (#330)"}, {"oid": "2b6c271cc778c0d6876e113f5229097ad22884ad", "committedDate": "2020-09-13 19:11:40 +0200", "message": "Add ability to check for command alias existence in api module"}, {"oid": "e3eace6a563f3b45d2b45e2781a125d942554b78", "committedDate": "2020-10-22 00:14:41 -0400", "message": "Undeprecate CommandManager#register(String, Command, String...)"}, {"oid": "c747120b20be1853ee02e7b2b67871249a88aa6d", "committedDate": "2021-03-31 16:04:06 -0400", "message": "Relicense the Velocity proxy under the terms of GPLv3 (#448)"}, {"oid": "2f0ee15051e00e403e9b79b0ceaf6a607a54eb2b", "committedDate": "2021-05-23 13:46:47 -0400", "message": "Remove deprecated Velocity 1.0.0 Command API."}, {"oid": "d6dcb115f1f30d8d34a49d71b01f251b6c918ca2", "committedDate": "2021-05-23 13:49:06 -0400", "message": "Remove remaining deprecated APIs"}, {"oid": "3f50964f368ad0f6650e66965566146fd97b16e9", "committedDate": "2021-05-23 14:20:59 -0400", "message": "Fix CommandManager method naming so that it is in sync with the 1.1.0 API"}, {"oid": "e6eecd806a02aadc1189ba10c4082d45b1dc3dbf", "committedDate": "2021-06-05 18:02:26 +0200", "message": "Document some restrictions in the command API"}, {"oid": "76c682792602c9b4385b87932ed27efe7a55df15", "committedDate": "2021-07-24 14:34:50 -0400", "message": "Expose registered aliases in API (#549)"}, {"oid": "922c001b59b381d69b9e172ae31cb23daefbf9a7", "committedDate": "2021-10-31 16:23:35 -0400", "message": "Expose CommandMeta in CommandManager and add a ref to the plugin instance (#544)"}, {"oid": "0b0c36dcfc77a89d215fd618b5b139c5f3ce9f9a", "committedDate": "2021-10-31 19:05:21 -0400", "message": "Correct command meta alias removal behavior and add appropriate unit tests."}, {"oid": "d72d707b1c0dd6215a4984956faf4b2ec4bdbd97", "committedDate": "2023-01-01 17:53:37 -0500", "message": "Convert Velocity buildscripts to Kotlin DSL (#918)"}, {"oid": "b0862d2d16c4ba7560d3f24c824d78793ac3d9e0", "committedDate": "2023-01-01 18:46:33 -0500", "message": "Use Spotless for license formatting"}]}, {"oid": "26bf94f08f3c4c25304ad023392f348c1bf85170", "url": "https://github.com/PaperMC/Velocity/commit/26bf94f08f3c4c25304ad023392f348c1bf85170", "message": "fix typos, update javadocs", "committedDate": "2020-04-27T10:09:04Z", "type": "commit"}, {"oid": "9d6689f64aefafdcbc0c96c30ec3cc93d1a77283", "url": "https://github.com/PaperMC/Velocity/commit/9d6689f64aefafdcbc0c96c30ec3cc93d1a77283", "message": "forgot annotation", "committedDate": "2020-04-27T10:12:03Z", "type": "commit"}]}