{"pr_number": 13069, "pr_title": "[BEAM-10475] Add a well-known coder for ShardedKey in Java/Python SDK", "pr_author": "nehsyc", "pr_createdAt": "2020-10-10T00:50:13Z", "pr_url": "https://github.com/apache/beam/pull/13069", "timeline": [{"oid": "925b27a38305a3aff18f0d1edd4583d43ae20fc4", "url": "https://github.com/apache/beam/commit/925b27a38305a3aff18f0d1edd4583d43ae20fc4", "message": "Add a well-known ShardedKey coder in Java SDK", "committedDate": "2020-10-10T01:04:52Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg0MzMwNw==", "url": "https://github.com/apache/beam/pull/13069#discussion_r502843307", "body": "Currently the shard id is encoded using a [`ByteArrayCoder`](https://github.com/apache/beam/blob/master/sdks/java/core/src/main/java/org/apache/beam/sdk/coders/ByteArrayCoder.java#L103) which uses a `VarInt` coder to encode/decode the length in 32bits. That is consistent with the parsing logic in the unified worker. But in Python we seem to be using 64bits  (e.g., [`VarIntCoder`](https://github.com/apache/beam/blob/master/sdks/python/apache_beam/coders/coder_impl.py#L785)). Should I make it consistent by explicitly encoding / decoding a long value here? ", "bodyText": "Currently the shard id is encoded using a ByteArrayCoder which uses a VarInt coder to encode/decode the length in 32bits. That is consistent with the parsing logic in the unified worker. But in Python we seem to be using 64bits  (e.g., VarIntCoder). Should I make it consistent by explicitly encoding / decoding a long value here?", "bodyHTML": "<p dir=\"auto\">Currently the shard id is encoded using a <a href=\"https://github.com/apache/beam/blob/master/sdks/java/core/src/main/java/org/apache/beam/sdk/coders/ByteArrayCoder.java#L103\"><code>ByteArrayCoder</code></a> which uses a <code>VarInt</code> coder to encode/decode the length in 32bits. That is consistent with the parsing logic in the unified worker. But in Python we seem to be using 64bits  (e.g., <a href=\"https://github.com/apache/beam/blob/master/sdks/python/apache_beam/coders/coder_impl.py#L785\"><code>VarIntCoder</code></a>). Should I make it consistent by explicitly encoding / decoding a long value here?</p>", "author": "nehsyc", "createdAt": "2020-10-10T23:23:59Z", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/ShardedKey.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.util;\n+\n+import com.google.auto.value.AutoValue;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.Collections;\n+import java.util.List;\n+import javax.annotation.Nullable;\n+import org.apache.beam.sdk.coders.BooleanCoder;\n+import org.apache.beam.sdk.coders.ByteArrayCoder;\n+import org.apache.beam.sdk.coders.StructuredCoder;\n+import org.apache.beam.sdk.util.common.ElementByteSizeObserver;\n+\n+/**\n+ * A sharded key consisting of a user key and a shard id represented by bytes.\n+ *\n+ * <p>This is a more generic definition of {@link org.apache.beam.sdk.values.ShardedKey}.\n+ */\n+@AutoValue\n+public abstract class ShardedKey<K> {\n+\n+  public static <K> ShardedKey<K> of(K key, @Nullable byte[] shardId) {\n+    return new AutoValue_ShardedKey(shardId, key);\n+  }\n+\n+  @SuppressWarnings(\"mutable\")\n+  @Nullable\n+  public abstract byte[] getShardId();\n+\n+  public abstract K getKey();\n+\n+  public static class Coder<K> extends StructuredCoder<ShardedKey<K>> {\n+\n+    private final ByteArrayCoder shardCoder = ByteArrayCoder.of();\n+    private final org.apache.beam.sdk.coders.Coder<K> keyCoder;\n+\n+    private Coder(org.apache.beam.sdk.coders.Coder<K> coder) {\n+      keyCoder = coder;\n+    }\n+\n+    public static <K> ShardedKey.Coder<K> of(org.apache.beam.sdk.coders.Coder<K> keyCoder) {\n+      return new ShardedKey.Coder<K>(keyCoder);\n+    }\n+\n+    public org.apache.beam.sdk.coders.Coder<K> getKeyCoder() {\n+      return keyCoder;\n+    }\n+\n+    @Override\n+    public void encode(ShardedKey<K> shardedKey, OutputStream outStream) throws IOException {\n+      // The encoding should follow the order:\n+      //   null indicator\n+      //   length of shard id\n+      //   shard id\n+      //   encoded user key\n+      BooleanCoder.of().encode(shardedKey.getShardId() != null, outStream);\n+      if (shardedKey.getShardId() != null) {\n+        shardCoder.encode(shardedKey.getShardId(), outStream);", "originalCommit": "925b27a38305a3aff18f0d1edd4583d43ae20fc4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQyNzcyMg==", "url": "https://github.com/apache/beam/pull/13069#discussion_r503427722", "bodyText": "The coder specification is underspecified as to how large the var int can be:\n\n  \n    \n      beam/model/pipeline/src/main/proto/beam_runner_api.proto\n    \n    \n         Line 673\n      in\n      eb75286\n    \n    \n    \n    \n\n        \n          \n           BYTES = 0 [(beam_urn) = \"beam:coder:bytes:v1\"]; \n        \n    \n  \n\n\nJava can't support byte[] greater then 2^31-1 in size. Also note that a varint64 coder and varint32 coder share the same encoding for all values from [0, 2^31-1] so this is unlikely to become an issue for shard id encoding so can you can ignore this for now.", "author": "lukecwik", "createdAt": "2020-10-12T17:10:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg0MzMwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ4MDM1Nw==", "url": "https://github.com/apache/beam/pull/13069#discussion_r503480357", "bodyText": "The two encodings are the same for all values in the range we'll be dealing with (and neither Java nor GRPC can handle >4G sized byte arrays) so we should be fine here.", "author": "robertwb", "createdAt": "2020-10-12T19:03:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg0MzMwNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY4ODA2NA==", "url": "https://github.com/apache/beam/pull/13069#discussion_r503688064", "bodyText": "Cool! Thanks for confirming.", "author": "nehsyc", "createdAt": "2020-10-13T06:08:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg0MzMwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQzMDczMA==", "url": "https://github.com/apache/beam/pull/13069#discussion_r503430730", "body": "I thought we were going to use the empty byte array as the default and not differentiate null.\r\n\r\nIt will remove an if from encode/decode logic and also save one byte in the encoded representation.", "bodyText": "I thought we were going to use the empty byte array as the default and not differentiate null.\nIt will remove an if from encode/decode logic and also save one byte in the encoded representation.", "bodyHTML": "<p dir=\"auto\">I thought we were going to use the empty byte array as the default and not differentiate null.</p>\n<p dir=\"auto\">It will remove an if from encode/decode logic and also save one byte in the encoded representation.</p>", "author": "lukecwik", "createdAt": "2020-10-12T17:16:22Z", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/ShardedKey.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.util;\n+\n+import com.google.auto.value.AutoValue;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.Collections;\n+import java.util.List;\n+import javax.annotation.Nullable;\n+import org.apache.beam.sdk.coders.BooleanCoder;\n+import org.apache.beam.sdk.coders.ByteArrayCoder;\n+import org.apache.beam.sdk.coders.StructuredCoder;\n+import org.apache.beam.sdk.util.common.ElementByteSizeObserver;\n+\n+/**\n+ * A sharded key consisting of a user key and a shard id represented by bytes.\n+ *\n+ * <p>This is a more generic definition of {@link org.apache.beam.sdk.values.ShardedKey}.\n+ */\n+@AutoValue\n+public abstract class ShardedKey<K> {\n+\n+  public static <K> ShardedKey<K> of(K key, @Nullable byte[] shardId) {\n+    return new AutoValue_ShardedKey(shardId, key);\n+  }\n+\n+  @SuppressWarnings(\"mutable\")\n+  @Nullable\n+  public abstract byte[] getShardId();\n+\n+  public abstract K getKey();\n+\n+  public static class Coder<K> extends StructuredCoder<ShardedKey<K>> {\n+\n+    private final ByteArrayCoder shardCoder = ByteArrayCoder.of();\n+    private final org.apache.beam.sdk.coders.Coder<K> keyCoder;\n+\n+    private Coder(org.apache.beam.sdk.coders.Coder<K> coder) {\n+      keyCoder = coder;\n+    }\n+\n+    public static <K> ShardedKey.Coder<K> of(org.apache.beam.sdk.coders.Coder<K> keyCoder) {\n+      return new ShardedKey.Coder<K>(keyCoder);\n+    }\n+\n+    public org.apache.beam.sdk.coders.Coder<K> getKeyCoder() {\n+      return keyCoder;\n+    }\n+\n+    @Override\n+    public void encode(ShardedKey<K> shardedKey, OutputStream outStream) throws IOException {\n+      // The encoding should follow the order:\n+      //   null indicator", "originalCommit": "0c033272b5324789e17fc359ffc3276c4de8bdb6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY4ODEyMg==", "url": "https://github.com/apache/beam/pull/13069#discussion_r503688122", "bodyText": "Done.", "author": "nehsyc", "createdAt": "2020-10-13T06:08:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQzMDczMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQzMjQ1MQ==", "url": "https://github.com/apache/beam/pull/13069#discussion_r503432451", "body": "Please also implement structuralValue, verifyDeterministic, consistentWithEquals, isRegisterByteSizeObserverCheap.", "bodyText": "Please also implement structuralValue, verifyDeterministic, consistentWithEquals, isRegisterByteSizeObserverCheap.", "bodyHTML": "<p dir=\"auto\">Please also implement structuralValue, verifyDeterministic, consistentWithEquals, isRegisterByteSizeObserverCheap.</p>", "author": "lukecwik", "createdAt": "2020-10-12T17:20:13Z", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/ShardedKey.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.util;\n+\n+import com.google.auto.value.AutoValue;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.Collections;\n+import java.util.List;\n+import javax.annotation.Nullable;\n+import org.apache.beam.sdk.coders.BooleanCoder;\n+import org.apache.beam.sdk.coders.ByteArrayCoder;\n+import org.apache.beam.sdk.coders.StructuredCoder;\n+import org.apache.beam.sdk.util.common.ElementByteSizeObserver;\n+\n+/**\n+ * A sharded key consisting of a user key and a shard id represented by bytes.\n+ *\n+ * <p>This is a more generic definition of {@link org.apache.beam.sdk.values.ShardedKey}.\n+ */\n+@AutoValue\n+public abstract class ShardedKey<K> {\n+\n+  public static <K> ShardedKey<K> of(K key, @Nullable byte[] shardId) {\n+    return new AutoValue_ShardedKey(shardId, key);\n+  }\n+\n+  @SuppressWarnings(\"mutable\")\n+  @Nullable\n+  public abstract byte[] getShardId();\n+\n+  public abstract K getKey();\n+\n+  public static class Coder<K> extends StructuredCoder<ShardedKey<K>> {\n+\n+    private final ByteArrayCoder shardCoder = ByteArrayCoder.of();\n+    private final org.apache.beam.sdk.coders.Coder<K> keyCoder;\n+\n+    private Coder(org.apache.beam.sdk.coders.Coder<K> coder) {\n+      keyCoder = coder;\n+    }\n+\n+    public static <K> ShardedKey.Coder<K> of(org.apache.beam.sdk.coders.Coder<K> keyCoder) {\n+      return new ShardedKey.Coder<K>(keyCoder);\n+    }\n+\n+    public org.apache.beam.sdk.coders.Coder<K> getKeyCoder() {\n+      return keyCoder;\n+    }\n+\n+    @Override\n+    public void encode(ShardedKey<K> shardedKey, OutputStream outStream) throws IOException {\n+      // The encoding should follow the order:\n+      //   null indicator\n+      //   length of shard id\n+      //   shard id\n+      //   encoded user key\n+      BooleanCoder.of().encode(shardedKey.getShardId() != null, outStream);\n+      if (shardedKey.getShardId() != null) {\n+        shardCoder.encode(shardedKey.getShardId(), outStream);\n+      }\n+      keyCoder.encode(shardedKey.getKey(), outStream);\n+    }\n+\n+    @Override\n+    public ShardedKey<K> decode(InputStream inStream) throws IOException {\n+      if (!BooleanCoder.of().decode(inStream)) {\n+        K key = keyCoder.decode(inStream);\n+        return ShardedKey.of(key, null);\n+      }\n+      byte[] shardId = shardCoder.decode(inStream);\n+      K key = keyCoder.decode(inStream);\n+      return ShardedKey.of(key, shardId);\n+    }\n+\n+    @Override\n+    public List<? extends org.apache.beam.sdk.coders.Coder<?>> getCoderArguments() {\n+      return Collections.singletonList(keyCoder);\n+    }\n+\n+    @Override\n+    public List<? extends org.apache.beam.sdk.coders.Coder<?>> getComponents() {\n+      return Collections.singletonList(keyCoder);\n+    }\n+\n+    @Override\n+    public void verifyDeterministic() throws NonDeterministicException {\n+      verifyDeterministic(this, \"Key coder must be deterministic\", keyCoder);\n+    }\n+", "originalCommit": "0c033272b5324789e17fc359ffc3276c4de8bdb6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY4ODI1OQ==", "url": "https://github.com/apache/beam/pull/13069#discussion_r503688259", "bodyText": "Done. Did not use the StructuralByteArray for shard id. Seems fine since AutoValue does compare values of bytes array as opposed to object identity.", "author": "nehsyc", "createdAt": "2020-10-13T06:08:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQzMjQ1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQzMjcyNQ==", "url": "https://github.com/apache/beam/pull/13069#discussion_r503432725", "body": "This is already implemented in StructuredCoder.java, no point in duplicating.", "bodyText": "This is already implemented in StructuredCoder.java, no point in duplicating.", "bodyHTML": "<p dir=\"auto\">This is already implemented in StructuredCoder.java, no point in duplicating.</p>", "author": "lukecwik", "createdAt": "2020-10-12T17:20:48Z", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/ShardedKey.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.util;\n+\n+import com.google.auto.value.AutoValue;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.Collections;\n+import java.util.List;\n+import javax.annotation.Nullable;\n+import org.apache.beam.sdk.coders.BooleanCoder;\n+import org.apache.beam.sdk.coders.ByteArrayCoder;\n+import org.apache.beam.sdk.coders.StructuredCoder;\n+import org.apache.beam.sdk.util.common.ElementByteSizeObserver;\n+\n+/**\n+ * A sharded key consisting of a user key and a shard id represented by bytes.\n+ *\n+ * <p>This is a more generic definition of {@link org.apache.beam.sdk.values.ShardedKey}.\n+ */\n+@AutoValue\n+public abstract class ShardedKey<K> {\n+\n+  public static <K> ShardedKey<K> of(K key, @Nullable byte[] shardId) {\n+    return new AutoValue_ShardedKey(shardId, key);\n+  }\n+\n+  @SuppressWarnings(\"mutable\")\n+  @Nullable\n+  public abstract byte[] getShardId();\n+\n+  public abstract K getKey();\n+\n+  public static class Coder<K> extends StructuredCoder<ShardedKey<K>> {\n+\n+    private final ByteArrayCoder shardCoder = ByteArrayCoder.of();\n+    private final org.apache.beam.sdk.coders.Coder<K> keyCoder;\n+\n+    private Coder(org.apache.beam.sdk.coders.Coder<K> coder) {\n+      keyCoder = coder;\n+    }\n+\n+    public static <K> ShardedKey.Coder<K> of(org.apache.beam.sdk.coders.Coder<K> keyCoder) {\n+      return new ShardedKey.Coder<K>(keyCoder);\n+    }\n+\n+    public org.apache.beam.sdk.coders.Coder<K> getKeyCoder() {\n+      return keyCoder;\n+    }\n+\n+    @Override\n+    public void encode(ShardedKey<K> shardedKey, OutputStream outStream) throws IOException {\n+      // The encoding should follow the order:\n+      //   null indicator\n+      //   length of shard id\n+      //   shard id\n+      //   encoded user key\n+      BooleanCoder.of().encode(shardedKey.getShardId() != null, outStream);\n+      if (shardedKey.getShardId() != null) {\n+        shardCoder.encode(shardedKey.getShardId(), outStream);\n+      }\n+      keyCoder.encode(shardedKey.getKey(), outStream);\n+    }\n+\n+    @Override\n+    public ShardedKey<K> decode(InputStream inStream) throws IOException {\n+      if (!BooleanCoder.of().decode(inStream)) {\n+        K key = keyCoder.decode(inStream);\n+        return ShardedKey.of(key, null);\n+      }\n+      byte[] shardId = shardCoder.decode(inStream);\n+      K key = keyCoder.decode(inStream);\n+      return ShardedKey.of(key, shardId);\n+    }\n+\n+    @Override\n+    public List<? extends org.apache.beam.sdk.coders.Coder<?>> getCoderArguments() {\n+      return Collections.singletonList(keyCoder);\n+    }\n+\n+    @Override\n+    public List<? extends org.apache.beam.sdk.coders.Coder<?>> getComponents() {\n+      return Collections.singletonList(keyCoder);", "originalCommit": "0c033272b5324789e17fc359ffc3276c4de8bdb6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY4ODI4NA==", "url": "https://github.com/apache/beam/pull/13069#discussion_r503688284", "bodyText": "Removed.", "author": "nehsyc", "createdAt": "2020-10-13T06:08:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQzMjcyNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQyNTA1MQ==", "url": "https://github.com/apache/beam/pull/13069#discussion_r503425051", "body": "There seems to be lots of whitespace changes in this file (and elsewhere). ", "bodyText": "There seems to be lots of whitespace changes in this file (and elsewhere).", "bodyHTML": "<p dir=\"auto\">There seems to be lots of whitespace changes in this file (and elsewhere).</p>", "author": "robertwb", "createdAt": "2020-10-12T17:04:20Z", "path": "runners/core-construction-java/src/test/java/org/apache/beam/runners/core/construction/CommonCoderTest.java", "diffHunk": "@@ -89,6 +90,7 @@\n /** Tests that Java SDK coders standardized by the Fn API meet the common spec. */\n @RunWith(Parameterized.class)\n public class CommonCoderTest {\n+", "originalCommit": "0c033272b5324789e17fc359ffc3276c4de8bdb6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY4ODUyMA==", "url": "https://github.com/apache/beam/pull/13069#discussion_r503688520", "bodyText": "Oops. Happened to apply IntelliJ's auto format. Reverted.", "author": "nehsyc", "createdAt": "2020-10-13T06:09:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQyNTA1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ4MDc3Nw==", "url": "https://github.com/apache/beam/pull/13069#discussion_r503480777", "body": "Are we leveraging AutoValue for hash and equality? If so, I don't think that'll work with byte[] here. ", "bodyText": "Are we leveraging AutoValue for hash and equality? If so, I don't think that'll work with byte[] here.", "bodyHTML": "<p dir=\"auto\">Are we leveraging AutoValue for hash and equality? If so, I don't think that'll work with byte[] here.</p>", "author": "robertwb", "createdAt": "2020-10-12T19:04:26Z", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/ShardedKey.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.util;\n+\n+import com.google.auto.value.AutoValue;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.Collections;\n+import java.util.List;\n+import javax.annotation.Nullable;\n+import org.apache.beam.sdk.coders.BooleanCoder;\n+import org.apache.beam.sdk.coders.ByteArrayCoder;\n+import org.apache.beam.sdk.coders.StructuredCoder;\n+import org.apache.beam.sdk.util.common.ElementByteSizeObserver;\n+\n+/**\n+ * A sharded key consisting of a user key and a shard id represented by bytes.\n+ *\n+ * <p>This is a more generic definition of {@link org.apache.beam.sdk.values.ShardedKey}.\n+ */\n+@AutoValue\n+public abstract class ShardedKey<K> {\n+\n+  public static <K> ShardedKey<K> of(K key, @Nullable byte[] shardId) {\n+    return new AutoValue_ShardedKey(shardId, key);\n+  }\n+\n+  @SuppressWarnings(\"mutable\")\n+  @Nullable\n+  public abstract byte[] getShardId();", "originalCommit": "0c033272b5324789e17fc359ffc3276c4de8bdb6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzY4OTIyNA==", "url": "https://github.com/apache/beam/pull/13069#discussion_r503689224", "bodyText": "Yes. AutoValue seems to be doing a reasonable job for byte[]. It uses Arrays.hashCode and Arrays.equals for has and equality.", "author": "nehsyc", "createdAt": "2020-10-13T06:11:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ4MDc3Nw=="}], "type": "inlineReview"}, {"oid": "638b902cef2a6b62b1d7433170b1344494065dc7", "url": "https://github.com/apache/beam/commit/638b902cef2a6b62b1d7433170b1344494065dc7", "message": "Default empty shard id & add ShardedKey coder in Python", "committedDate": "2020-10-13T05:07:06Z", "type": "forcePushed"}, {"oid": "b73a4633e4dab7cdc3c5e5bd983fdffc1a6ae7f4", "url": "https://github.com/apache/beam/commit/b73a4633e4dab7cdc3c5e5bd983fdffc1a6ae7f4", "message": "Default empty shard id & add ShardedKey coder in Python\n\nRun yapf", "committedDate": "2020-10-13T05:24:58Z", "type": "forcePushed"}, {"oid": "333978fdf6b5f93d2aebacc543453980a10e9c2a", "url": "https://github.com/apache/beam/commit/333978fdf6b5f93d2aebacc543453980a10e9c2a", "message": "Default empty shard id & add ShardedKey coder in Python\n\nRun yapf", "committedDate": "2020-10-13T05:43:50Z", "type": "forcePushed"}, {"oid": "f23b49a3db48f8e699fa4b92b8495d9bf39457d4", "url": "https://github.com/apache/beam/commit/f23b49a3db48f8e699fa4b92b8495d9bf39457d4", "message": "Delete json", "committedDate": "2020-10-13T06:05:21Z", "type": "forcePushed"}, {"oid": "154790f17d853a96e8e66e4d5625521845ef729d", "url": "https://github.com/apache/beam/commit/154790f17d853a96e8e66e4d5625521845ef729d", "message": "Default empty shard id & add ShardedKey coder in Python\n\nRun spotlessApply & yapf", "committedDate": "2020-10-13T06:35:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEyOTc2NQ==", "url": "https://github.com/apache/beam/pull/13069#discussion_r504129765", "body": "In the long run we should aim to replace the existing implementation and its usage within WriteFiles.", "bodyText": "In the long run we should aim to replace the existing implementation and its usage within WriteFiles.", "bodyHTML": "<p dir=\"auto\">In the long run we should aim to replace the existing implementation and its usage within WriteFiles.</p>", "author": "lukecwik", "createdAt": "2020-10-13T17:22:02Z", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/ShardedKey.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.util;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n+\n+import com.google.auto.value.AutoValue;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.beam.sdk.coders.ByteArrayCoder;\n+import org.apache.beam.sdk.coders.StructuredCoder;\n+import org.apache.beam.sdk.util.common.ElementByteSizeObserver;\n+\n+/**\n+ * A sharded key consisting of a user key and a shard id represented by bytes.\n+ *\n+ * <p>This is a more generic definition of {@link org.apache.beam.sdk.values.ShardedKey}.", "originalCommit": "154790f17d853a96e8e66e4d5625521845ef729d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTgwNDA4OQ==", "url": "https://github.com/apache/beam/pull/13069#discussion_r505804089", "bodyText": "Ack.", "author": "nehsyc", "createdAt": "2020-10-15T19:59:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEyOTc2NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEzMTYyMg==", "url": "https://github.com/apache/beam/pull/13069#discussion_r504131622", "body": "the bytearraycoder isn't consistent with equals yet the AutoValue ShardedKey is so we should state that ShardedKey is consistent with equals iff keyCoder is.\r\n```suggestion\r\n      return keyCoder.consistentWithEquals();\r\n```", "bodyText": "the bytearraycoder isn't consistent with equals yet the AutoValue ShardedKey is so we should state that ShardedKey is consistent with equals iff keyCoder is.\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  return shardCoder.consistentWithEquals() && keyCoder.consistentWithEquals();\n          \n          \n            \n                  return keyCoder.consistentWithEquals();", "bodyHTML": "<p dir=\"auto\">the bytearraycoder isn't consistent with equals yet the AutoValue ShardedKey is so we should state that ShardedKey is consistent with equals iff keyCoder is.</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">      <span class=\"pl-k\">return</span> <span class=\"x x-first\">shardCoder</span><span class=\"pl-k x\">.</span><span class=\"x\">consistentWithEquals() </span><span class=\"pl-k x\">&amp;&amp;</span><span class=\"x x-last\"> </span>keyCoder<span class=\"pl-k\">.</span>consistentWithEquals();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">      <span class=\"pl-k\">return</span> keyCoder<span class=\"pl-k\">.</span>consistentWithEquals();</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "lukecwik", "createdAt": "2020-10-13T17:25:11Z", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/ShardedKey.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.util;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n+\n+import com.google.auto.value.AutoValue;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.beam.sdk.coders.ByteArrayCoder;\n+import org.apache.beam.sdk.coders.StructuredCoder;\n+import org.apache.beam.sdk.util.common.ElementByteSizeObserver;\n+\n+/**\n+ * A sharded key consisting of a user key and a shard id represented by bytes.\n+ *\n+ * <p>This is a more generic definition of {@link org.apache.beam.sdk.values.ShardedKey}.\n+ */\n+@AutoValue\n+public abstract class ShardedKey<K> {\n+\n+  public static <K> ShardedKey<K> of(K key) {\n+    return new AutoValue_ShardedKey(new byte[0], key);\n+  }\n+\n+  public static <K> ShardedKey<K> of(K key, byte[] shardId) {\n+    checkArgument(shardId != null, \"Shard id should not be null!\");\n+    return new AutoValue_ShardedKey(shardId, key);\n+  }\n+\n+  @SuppressWarnings(\"mutable\")\n+  public abstract byte[] getShardId();\n+\n+  public abstract K getKey();\n+\n+  public static class Coder<K> extends StructuredCoder<ShardedKey<K>> {\n+\n+    private final ByteArrayCoder shardCoder = ByteArrayCoder.of();\n+    private final org.apache.beam.sdk.coders.Coder<K> keyCoder;\n+\n+    private Coder(org.apache.beam.sdk.coders.Coder<K> coder) {\n+      keyCoder = coder;\n+    }\n+\n+    public static <K> ShardedKey.Coder<K> of(org.apache.beam.sdk.coders.Coder<K> keyCoder) {\n+      return new ShardedKey.Coder<K>(keyCoder);\n+    }\n+\n+    public org.apache.beam.sdk.coders.Coder<K> getKeyCoder() {\n+      return keyCoder;\n+    }\n+\n+    @Override\n+    public void encode(ShardedKey<K> shardedKey, OutputStream outStream) throws IOException {\n+      // The encoding should follow the order:\n+      //   length of shard id\n+      //   shard id\n+      //   encoded user key\n+      shardCoder.encode(shardedKey.getShardId(), outStream);\n+      keyCoder.encode(shardedKey.getKey(), outStream);\n+    }\n+\n+    @Override\n+    public ShardedKey<K> decode(InputStream inStream) throws IOException {\n+      byte[] shardId = shardCoder.decode(inStream);\n+      K key = keyCoder.decode(inStream);\n+      return ShardedKey.of(key, shardId);\n+    }\n+\n+    @Override\n+    public List<? extends org.apache.beam.sdk.coders.Coder<?>> getCoderArguments() {\n+      return Collections.singletonList(keyCoder);\n+    }\n+\n+    @Override\n+    public void verifyDeterministic() throws NonDeterministicException {\n+      shardCoder.verifyDeterministic();\n+      keyCoder.verifyDeterministic();\n+    }\n+\n+    @Override\n+    public boolean consistentWithEquals() {\n+      return shardCoder.consistentWithEquals() && keyCoder.consistentWithEquals();", "originalCommit": "154790f17d853a96e8e66e4d5625521845ef729d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTgwMzg4Ng==", "url": "https://github.com/apache/beam/pull/13069#discussion_r505803886", "bodyText": "Done.", "author": "nehsyc", "createdAt": "2020-10-15T19:58:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEzMTYyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEzMjIwMA==", "url": "https://github.com/apache/beam/pull/13069#discussion_r504132200", "body": "See KvCoder for an example:\r\n```suggestion\r\n      verifyDeterministic(this, \"Key coder must be deterministic\", keyCoder);\r\n```", "bodyText": "See KvCoder for an example:\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  keyCoder.verifyDeterministic();\n          \n          \n            \n                  verifyDeterministic(this, \"Key coder must be deterministic\", keyCoder);", "bodyHTML": "<p dir=\"auto\">See KvCoder for an example:</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">      <span class=\"x x-first\">keyCoder</span><span class=\"pl-k x x-last\">.</span>verifyDeterministic();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">      verifyDeterministic(<span class=\"pl-c1 x x-first\">this</span><span class=\"x\">, </span><span class=\"pl-s\"><span class=\"pl-pds x\">\"</span><span class=\"x\">Key coder must be deterministic</span><span class=\"pl-pds x\">\"</span></span><span class=\"x x-last\">, keyCoder</span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "lukecwik", "createdAt": "2020-10-13T17:26:09Z", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/ShardedKey.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.util;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n+\n+import com.google.auto.value.AutoValue;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.beam.sdk.coders.ByteArrayCoder;\n+import org.apache.beam.sdk.coders.StructuredCoder;\n+import org.apache.beam.sdk.util.common.ElementByteSizeObserver;\n+\n+/**\n+ * A sharded key consisting of a user key and a shard id represented by bytes.\n+ *\n+ * <p>This is a more generic definition of {@link org.apache.beam.sdk.values.ShardedKey}.\n+ */\n+@AutoValue\n+public abstract class ShardedKey<K> {\n+\n+  public static <K> ShardedKey<K> of(K key) {\n+    return new AutoValue_ShardedKey(new byte[0], key);\n+  }\n+\n+  public static <K> ShardedKey<K> of(K key, byte[] shardId) {\n+    checkArgument(shardId != null, \"Shard id should not be null!\");\n+    return new AutoValue_ShardedKey(shardId, key);\n+  }\n+\n+  @SuppressWarnings(\"mutable\")\n+  public abstract byte[] getShardId();\n+\n+  public abstract K getKey();\n+\n+  public static class Coder<K> extends StructuredCoder<ShardedKey<K>> {\n+\n+    private final ByteArrayCoder shardCoder = ByteArrayCoder.of();\n+    private final org.apache.beam.sdk.coders.Coder<K> keyCoder;\n+\n+    private Coder(org.apache.beam.sdk.coders.Coder<K> coder) {\n+      keyCoder = coder;\n+    }\n+\n+    public static <K> ShardedKey.Coder<K> of(org.apache.beam.sdk.coders.Coder<K> keyCoder) {\n+      return new ShardedKey.Coder<K>(keyCoder);\n+    }\n+\n+    public org.apache.beam.sdk.coders.Coder<K> getKeyCoder() {\n+      return keyCoder;\n+    }\n+\n+    @Override\n+    public void encode(ShardedKey<K> shardedKey, OutputStream outStream) throws IOException {\n+      // The encoding should follow the order:\n+      //   length of shard id\n+      //   shard id\n+      //   encoded user key\n+      shardCoder.encode(shardedKey.getShardId(), outStream);\n+      keyCoder.encode(shardedKey.getKey(), outStream);\n+    }\n+\n+    @Override\n+    public ShardedKey<K> decode(InputStream inStream) throws IOException {\n+      byte[] shardId = shardCoder.decode(inStream);\n+      K key = keyCoder.decode(inStream);\n+      return ShardedKey.of(key, shardId);\n+    }\n+\n+    @Override\n+    public List<? extends org.apache.beam.sdk.coders.Coder<?>> getCoderArguments() {\n+      return Collections.singletonList(keyCoder);\n+    }\n+\n+    @Override\n+    public void verifyDeterministic() throws NonDeterministicException {\n+      shardCoder.verifyDeterministic();\n+      keyCoder.verifyDeterministic();", "originalCommit": "154790f17d853a96e8e66e4d5625521845ef729d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTgwMzc0Ng==", "url": "https://github.com/apache/beam/pull/13069#discussion_r505803746", "bodyText": "Done.", "author": "nehsyc", "createdAt": "2020-10-15T19:58:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEzMjIwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEzMjU2MA==", "url": "https://github.com/apache/beam/pull/13069#discussion_r504132560", "body": "No point in checking something that is required to be deterministic\r\n```suggestion\r\n```", "bodyText": "No point in checking something that is required to be deterministic\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  shardCoder.verifyDeterministic();", "bodyHTML": "<p dir=\"auto\">No point in checking something that is required to be deterministic</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"><span class=\"x x-first\">      shardCoder</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">verifyDeterministic();</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "lukecwik", "createdAt": "2020-10-13T17:26:46Z", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/ShardedKey.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.util;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n+\n+import com.google.auto.value.AutoValue;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.beam.sdk.coders.ByteArrayCoder;\n+import org.apache.beam.sdk.coders.StructuredCoder;\n+import org.apache.beam.sdk.util.common.ElementByteSizeObserver;\n+\n+/**\n+ * A sharded key consisting of a user key and a shard id represented by bytes.\n+ *\n+ * <p>This is a more generic definition of {@link org.apache.beam.sdk.values.ShardedKey}.\n+ */\n+@AutoValue\n+public abstract class ShardedKey<K> {\n+\n+  public static <K> ShardedKey<K> of(K key) {\n+    return new AutoValue_ShardedKey(new byte[0], key);\n+  }\n+\n+  public static <K> ShardedKey<K> of(K key, byte[] shardId) {\n+    checkArgument(shardId != null, \"Shard id should not be null!\");\n+    return new AutoValue_ShardedKey(shardId, key);\n+  }\n+\n+  @SuppressWarnings(\"mutable\")\n+  public abstract byte[] getShardId();\n+\n+  public abstract K getKey();\n+\n+  public static class Coder<K> extends StructuredCoder<ShardedKey<K>> {\n+\n+    private final ByteArrayCoder shardCoder = ByteArrayCoder.of();\n+    private final org.apache.beam.sdk.coders.Coder<K> keyCoder;\n+\n+    private Coder(org.apache.beam.sdk.coders.Coder<K> coder) {\n+      keyCoder = coder;\n+    }\n+\n+    public static <K> ShardedKey.Coder<K> of(org.apache.beam.sdk.coders.Coder<K> keyCoder) {\n+      return new ShardedKey.Coder<K>(keyCoder);\n+    }\n+\n+    public org.apache.beam.sdk.coders.Coder<K> getKeyCoder() {\n+      return keyCoder;\n+    }\n+\n+    @Override\n+    public void encode(ShardedKey<K> shardedKey, OutputStream outStream) throws IOException {\n+      // The encoding should follow the order:\n+      //   length of shard id\n+      //   shard id\n+      //   encoded user key\n+      shardCoder.encode(shardedKey.getShardId(), outStream);\n+      keyCoder.encode(shardedKey.getKey(), outStream);\n+    }\n+\n+    @Override\n+    public ShardedKey<K> decode(InputStream inStream) throws IOException {\n+      byte[] shardId = shardCoder.decode(inStream);\n+      K key = keyCoder.decode(inStream);\n+      return ShardedKey.of(key, shardId);\n+    }\n+\n+    @Override\n+    public List<? extends org.apache.beam.sdk.coders.Coder<?>> getCoderArguments() {\n+      return Collections.singletonList(keyCoder);\n+    }\n+\n+    @Override\n+    public void verifyDeterministic() throws NonDeterministicException {\n+      shardCoder.verifyDeterministic();", "originalCommit": "154790f17d853a96e8e66e4d5625521845ef729d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTgwMzY1MA==", "url": "https://github.com/apache/beam/pull/13069#discussion_r505803650", "bodyText": "Done.", "author": "nehsyc", "createdAt": "2020-10-15T19:58:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEzMjU2MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEzMzQ3NA==", "url": "https://github.com/apache/beam/pull/13069#discussion_r504133474", "body": "Please make `byte[0]` a constant. Please add comment saying that the default shard identifier is the empty byte string.", "bodyText": "Please make byte[0] a constant. Please add comment saying that the default shard identifier is the empty byte string.", "bodyHTML": "<p dir=\"auto\">Please make <code>byte[0]</code> a constant. Please add comment saying that the default shard identifier is the empty byte string.</p>", "author": "lukecwik", "createdAt": "2020-10-13T17:28:21Z", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/ShardedKey.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.util;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n+\n+import com.google.auto.value.AutoValue;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.beam.sdk.coders.ByteArrayCoder;\n+import org.apache.beam.sdk.coders.StructuredCoder;\n+import org.apache.beam.sdk.util.common.ElementByteSizeObserver;\n+\n+/**\n+ * A sharded key consisting of a user key and a shard id represented by bytes.\n+ *\n+ * <p>This is a more generic definition of {@link org.apache.beam.sdk.values.ShardedKey}.\n+ */\n+@AutoValue\n+public abstract class ShardedKey<K> {\n+\n+  public static <K> ShardedKey<K> of(K key) {\n+    return new AutoValue_ShardedKey(new byte[0], key);", "originalCommit": "154790f17d853a96e8e66e4d5625521845ef729d", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTgwMzQyOQ==", "url": "https://github.com/apache/beam/pull/13069#discussion_r505803429", "bodyText": "Done", "author": "nehsyc", "createdAt": "2020-10-15T19:57:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDEzMzQ3NA=="}], "type": "inlineReview"}, {"oid": "bbb52ad8d380b36bbdb46523dab7d6c203369ceb", "url": "https://github.com/apache/beam/commit/bbb52ad8d380b36bbdb46523dab7d6c203369ceb", "message": "make shard id opaque; fix some documentations; add more test cases", "committedDate": "2020-10-16T19:46:05Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQzOTI4NQ==", "url": "https://github.com/apache/beam/pull/13069#discussion_r510439285", "body": "```suggestion\r\n  /** Creates a ShardedKey with given key and shard id. Shard id must not be null and must not be mutated. */\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              /** Creates a ShardedKey with given key and shard id. Shard id must not be null. */\n          \n          \n            \n              /** Creates a ShardedKey with given key and shard id. Shard id must not be null and must not be mutated. */", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">  <span class=\"pl-c\"><span class=\"pl-c\">/*</span>* Creates a ShardedKey with given key and shard id. Shard id must not be null. <span class=\"pl-c\">*/</span></span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">  <span class=\"pl-c\"><span class=\"pl-c\">/*</span>* Creates a ShardedKey with given key and shard id. Shard id must not be null<span class=\"x x-first x-last\"> and must not be mutated</span>. <span class=\"pl-c\">*/</span></span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "lukecwik", "createdAt": "2020-10-22T20:32:35Z", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/ShardedKey.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.util;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.beam.sdk.coders.ByteArrayCoder;\n+import org.apache.beam.sdk.coders.StructuredCoder;\n+import org.apache.beam.sdk.util.common.ElementByteSizeObserver;\n+\n+/** A sharded key consisting of a user key and an opaque shard id represented by bytes. */\n+public class ShardedKey<K> {\n+  private static final byte[] EMPTY_SHARD_ID = new byte[0];\n+\n+  private final K key;\n+  private final byte[] shardId;\n+\n+  protected ShardedKey(K key, byte[] shardId) {\n+    this.key = key;\n+    this.shardId = shardId;\n+  }\n+\n+  /** Creates a ShardedKey with given key and shard id. Shard id must not be null. */", "originalCommit": "aa105d15a4d2d2be97e2aedef9b5fa7abf541466", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQzOTY0Mw==", "url": "https://github.com/apache/beam/pull/13069#discussion_r510439643", "body": "```suggestion\r\n    return \"ShardedKey{key=\" + key + \", shardId=\" + Arrays.toString(shardId) + \"}\";\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return \"ShardedKey{\" + \"key=\" + key + \", shardId=\" + Arrays.toString(shardId) + \"}\";\n          \n          \n            \n                return \"ShardedKey{key=\" + key + \", shardId=\" + Arrays.toString(shardId) + \"}\";", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">return</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>ShardedKey{<span class=\"pl-pds x x-first\">\"</span></span><span class=\"x\"> </span><span class=\"pl-k x\">+</span><span class=\"x\"> </span><span class=\"pl-s\"><span class=\"pl-pds x x-last\">\"</span>key=<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> key <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>, shardId=<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> <span class=\"pl-smi\">Arrays</span><span class=\"pl-k\">.</span>toString(shardId) <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>}<span class=\"pl-pds\">\"</span></span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">return</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>ShardedKey{key=<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> key <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>, shardId=<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> <span class=\"pl-smi\">Arrays</span><span class=\"pl-k\">.</span>toString(shardId) <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>}<span class=\"pl-pds\">\"</span></span>;</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "lukecwik", "createdAt": "2020-10-22T20:33:17Z", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/ShardedKey.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.util;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.beam.sdk.coders.ByteArrayCoder;\n+import org.apache.beam.sdk.coders.StructuredCoder;\n+import org.apache.beam.sdk.util.common.ElementByteSizeObserver;\n+\n+/** A sharded key consisting of a user key and an opaque shard id represented by bytes. */\n+public class ShardedKey<K> {\n+  private static final byte[] EMPTY_SHARD_ID = new byte[0];\n+\n+  private final K key;\n+  private final byte[] shardId;\n+\n+  protected ShardedKey(K key, byte[] shardId) {\n+    this.key = key;\n+    this.shardId = shardId;\n+  }\n+\n+  /** Creates a ShardedKey with given key and shard id. Shard id must not be null. */\n+  public static <K> ShardedKey<K> of(K key, byte[] shardId) {\n+    checkArgument(key != null, \"Key should not be null!\");\n+    checkArgument(shardId != null, \"Shard id should not be null!\");\n+    return new ShardedKey<K>(key, shardId);\n+  }\n+\n+  public K getKey() {\n+    return key;\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return \"ShardedKey{\" + \"key=\" + key + \", shardId=\" + Arrays.toString(shardId) + \"}\";", "originalCommit": "aa105d15a4d2d2be97e2aedef9b5fa7abf541466", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ0MDA3MQ==", "url": "https://github.com/apache/beam/pull/13069#discussion_r510440071", "body": "rename `h$` to `hash`", "bodyText": "rename h$ to hash", "bodyHTML": "<p dir=\"auto\">rename <code>h$</code> to <code>hash</code></p>", "author": "lukecwik", "createdAt": "2020-10-22T20:34:07Z", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/ShardedKey.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.util;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.beam.sdk.coders.ByteArrayCoder;\n+import org.apache.beam.sdk.coders.StructuredCoder;\n+import org.apache.beam.sdk.util.common.ElementByteSizeObserver;\n+\n+/** A sharded key consisting of a user key and an opaque shard id represented by bytes. */\n+public class ShardedKey<K> {\n+  private static final byte[] EMPTY_SHARD_ID = new byte[0];\n+\n+  private final K key;\n+  private final byte[] shardId;\n+\n+  protected ShardedKey(K key, byte[] shardId) {\n+    this.key = key;\n+    this.shardId = shardId;\n+  }\n+\n+  /** Creates a ShardedKey with given key and shard id. Shard id must not be null. */\n+  public static <K> ShardedKey<K> of(K key, byte[] shardId) {\n+    checkArgument(key != null, \"Key should not be null!\");\n+    checkArgument(shardId != null, \"Shard id should not be null!\");\n+    return new ShardedKey<K>(key, shardId);\n+  }\n+\n+  public K getKey() {\n+    return key;\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return \"ShardedKey{\" + \"key=\" + key + \", shardId=\" + Arrays.toString(shardId) + \"}\";\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (o == this) {\n+      return true;\n+    }\n+    if (o instanceof ShardedKey) {\n+      ShardedKey<?> that = (ShardedKey<?>) o;\n+      return this.key.equals(that.key) && Arrays.equals(this.shardId, that.shardId);\n+    }\n+    return false;\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    int h$ = 1;", "originalCommit": "aa105d15a4d2d2be97e2aedef9b5fa7abf541466", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUwNDczMA==", "url": "https://github.com/apache/beam/pull/13069#discussion_r510504730", "bodyText": "Done.", "author": "nehsyc", "createdAt": "2020-10-22T23:01:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ0MDA3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ0MDM5MQ==", "url": "https://github.com/apache/beam/pull/13069#discussion_r510440391", "body": "```suggestion\r\n      //   shard id byte string\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  //   length prefixed shard id byte string\n          \n          \n            \n                  //   shard id byte string", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">      <span class=\"pl-c\"><span class=\"pl-c\">//</span>   <span class=\"x x-first x-last\">length prefixed </span>shard id byte string</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">      <span class=\"pl-c\"><span class=\"pl-c\">//</span>   shard id byte string</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "lukecwik", "createdAt": "2020-10-22T20:34:39Z", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/ShardedKey.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.util;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.beam.sdk.coders.ByteArrayCoder;\n+import org.apache.beam.sdk.coders.StructuredCoder;\n+import org.apache.beam.sdk.util.common.ElementByteSizeObserver;\n+\n+/** A sharded key consisting of a user key and an opaque shard id represented by bytes. */\n+public class ShardedKey<K> {\n+  private static final byte[] EMPTY_SHARD_ID = new byte[0];\n+\n+  private final K key;\n+  private final byte[] shardId;\n+\n+  protected ShardedKey(K key, byte[] shardId) {\n+    this.key = key;\n+    this.shardId = shardId;\n+  }\n+\n+  /** Creates a ShardedKey with given key and shard id. Shard id must not be null. */\n+  public static <K> ShardedKey<K> of(K key, byte[] shardId) {\n+    checkArgument(key != null, \"Key should not be null!\");\n+    checkArgument(shardId != null, \"Shard id should not be null!\");\n+    return new ShardedKey<K>(key, shardId);\n+  }\n+\n+  public K getKey() {\n+    return key;\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return \"ShardedKey{\" + \"key=\" + key + \", shardId=\" + Arrays.toString(shardId) + \"}\";\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (o == this) {\n+      return true;\n+    }\n+    if (o instanceof ShardedKey) {\n+      ShardedKey<?> that = (ShardedKey<?>) o;\n+      return this.key.equals(that.key) && Arrays.equals(this.shardId, that.shardId);\n+    }\n+    return false;\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    int h$ = 1;\n+    h$ *= 1000003;\n+    h$ ^= key.hashCode();\n+    h$ *= 1000003;\n+    h$ ^= Arrays.hashCode(shardId);\n+    return h$;\n+  }\n+\n+  public static class Coder<K> extends StructuredCoder<ShardedKey<K>> {\n+\n+    private final ByteArrayCoder shardCoder = ByteArrayCoder.of();\n+    private final org.apache.beam.sdk.coders.Coder<K> keyCoder;\n+\n+    private Coder(org.apache.beam.sdk.coders.Coder<K> coder) {\n+      keyCoder = coder;\n+    }\n+\n+    public static <K> ShardedKey.Coder<K> of(org.apache.beam.sdk.coders.Coder<K> keyCoder) {\n+      return new ShardedKey.Coder<K>(keyCoder);\n+    }\n+\n+    public org.apache.beam.sdk.coders.Coder<K> getKeyCoder() {\n+      return keyCoder;\n+    }\n+\n+    @Override\n+    public void encode(ShardedKey<K> shardedKey, OutputStream outStream) throws IOException {\n+      // The encoding should follow the order:\n+      //   length prefixed shard id byte string", "originalCommit": "aa105d15a4d2d2be97e2aedef9b5fa7abf541466", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ0MjA2Nw==", "url": "https://github.com/apache/beam/pull/13069#discussion_r510442067", "body": "FYI, this equals method assumes the key type has a valid equals method and generally shouldn't be used. We should use structuralValue anywhere for comparisons.", "bodyText": "FYI, this equals method assumes the key type has a valid equals method and generally shouldn't be used. We should use structuralValue anywhere for comparisons.", "bodyHTML": "<p dir=\"auto\">FYI, this equals method assumes the key type has a valid equals method and generally shouldn't be used. We should use structuralValue anywhere for comparisons.</p>", "author": "lukecwik", "createdAt": "2020-10-22T20:38:05Z", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/util/ShardedKey.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.util;\n+\n+import static org.apache.beam.vendor.guava.v26_0_jre.com.google.common.base.Preconditions.checkArgument;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.beam.sdk.coders.ByteArrayCoder;\n+import org.apache.beam.sdk.coders.StructuredCoder;\n+import org.apache.beam.sdk.util.common.ElementByteSizeObserver;\n+\n+/** A sharded key consisting of a user key and an opaque shard id represented by bytes. */\n+public class ShardedKey<K> {\n+  private static final byte[] EMPTY_SHARD_ID = new byte[0];\n+\n+  private final K key;\n+  private final byte[] shardId;\n+\n+  protected ShardedKey(K key, byte[] shardId) {\n+    this.key = key;\n+    this.shardId = shardId;\n+  }\n+\n+  /** Creates a ShardedKey with given key and shard id. Shard id must not be null. */\n+  public static <K> ShardedKey<K> of(K key, byte[] shardId) {\n+    checkArgument(key != null, \"Key should not be null!\");\n+    checkArgument(shardId != null, \"Shard id should not be null!\");\n+    return new ShardedKey<K>(key, shardId);\n+  }\n+\n+  public K getKey() {\n+    return key;\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return \"ShardedKey{\" + \"key=\" + key + \", shardId=\" + Arrays.toString(shardId) + \"}\";\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {", "originalCommit": "aa105d15a4d2d2be97e2aedef9b5fa7abf541466", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ1Njk1Nw==", "url": "https://github.com/apache/beam/pull/13069#discussion_r510456957", "bodyText": "I don't want you to change it, its just an FYI.", "author": "lukecwik", "createdAt": "2020-10-22T21:05:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ0MjA2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDUwNDc5Nw==", "url": "https://github.com/apache/beam/pull/13069#discussion_r510504797", "bodyText": "Ack.", "author": "nehsyc", "createdAt": "2020-10-22T23:01:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ0MjA2Nw=="}], "type": "inlineReview"}, {"oid": "23e472df156d2e8d22c9ea7c6086245e7e1ae685", "url": "https://github.com/apache/beam/commit/23e472df156d2e8d22c9ea7c6086245e7e1ae685", "message": "Add a well-known ShardedKey coder in Java/Python SDK", "committedDate": "2020-10-22T22:19:16Z", "type": "forcePushed"}, {"oid": "b3f89572052d7116134674deb643cef0efef313f", "url": "https://github.com/apache/beam/commit/b3f89572052d7116134674deb643cef0efef313f", "message": "Add a well-known ShardedKey coder in Java/Python SDK", "committedDate": "2020-10-22T22:54:11Z", "type": "forcePushed"}, {"oid": "1cb27fe8d17e0cdba466cebe00e289f34d73f9f0", "url": "https://github.com/apache/beam/commit/1cb27fe8d17e0cdba466cebe00e289f34d73f9f0", "message": "Add a well-known ShardedKey coder in Java/Python SDK", "committedDate": "2020-10-22T23:00:25Z", "type": "forcePushed"}, {"oid": "df9d8c66da16d18b802ba44b9ad529cfad604bbe", "url": "https://github.com/apache/beam/commit/df9d8c66da16d18b802ba44b9ad529cfad604bbe", "message": "Add a well-known ShardedKey coder in Java/Python SDK", "committedDate": "2020-10-22T23:09:36Z", "type": "commit"}, {"oid": "df9d8c66da16d18b802ba44b9ad529cfad604bbe", "url": "https://github.com/apache/beam/commit/df9d8c66da16d18b802ba44b9ad529cfad604bbe", "message": "Add a well-known ShardedKey coder in Java/Python SDK", "committedDate": "2020-10-22T23:09:36Z", "type": "forcePushed"}]}