{"pr_number": 12852, "pr_title": "[BEAM-10890] Log error counts to debug BigQuery streaming insert requ\u2026", "pr_author": "ihji", "pr_createdAt": "2020-09-15T22:07:59Z", "pr_url": "https://github.com/apache/beam/pull/12852", "timeline": [{"oid": "bf75bf2414838f3edb83790963d3e8dd6e589039", "url": "https://github.com/apache/beam/commit/bf75bf2414838f3edb83790963d3e8dd6e589039", "message": "[BEAM-10890] Log error counts to debug BigQuery streaming insert requests for Java SDK", "committedDate": "2020-09-15T22:10:01Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzczODc0Mw==", "url": "https://github.com/apache/beam/pull/12852#discussion_r493738743", "body": "Is there a pattern here in java for this. I.e. * MILLIS_PER_SEC. Or converting to duration objects and comparing those?", "bodyText": "Is there a pattern here in java for this. I.e. * MILLIS_PER_SEC. Or converting to duration objects and comparing those?", "bodyHTML": "<p dir=\"auto\">Is there a pattern here in java for this. I.e. * MILLIS_PER_SEC. Or converting to duration objects and comparing those?</p>", "author": "ajamato", "createdAt": "2020-09-23T16:44:13Z", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/bigquery/StreamingWriteFn.java", "diffHunk": "@@ -150,24 +143,42 @@ public void finishBundle(FinishBundleContext context) throws Exception {\n     for (ValueInSingleWindow<ErrorT> row : failedInserts) {\n       context.output(failedOutputTag, row.getValue(), row.getTimestamp(), row.getWindow());\n     }\n-\n-    long currentTimeMillis = System.currentTimeMillis();\n-    if (histogram.getTotalCount() > 0\n-        && (currentTimeMillis - lastReportedSystemClockMillis)\n-            > options.getLatencyLoggingFrequency() * 1000L) {\n-      logPercentiles();\n-      histogram.clear();\n-      lastReportedSystemClockMillis = currentTimeMillis;\n-    }\n+    reportStreamingApiLogging(options);\n   }\n \n-  private void logPercentiles() {\n-    LOG.info(\n-        \"Total number of streaming insert requests: {}, P99: {}ms, P90: {}ms, P50: {}ms\",\n-        histogram.getTotalCount(),\n-        DoubleMath.roundToInt(histogram.p99(), RoundingMode.HALF_UP),\n-        DoubleMath.roundToInt(histogram.p90(), RoundingMode.HALF_UP),\n-        DoubleMath.roundToInt(histogram.p50(), RoundingMode.HALF_UP));\n+  private void reportStreamingApiLogging(BigQueryOptions options) {\n+    if (reportingLock.tryLock()) {\n+      try {\n+        long currentTimeMillis = System.currentTimeMillis();\n+        if (currentTimeMillis - lastReportedSystemClockMillis\n+            > options.getBqStreamingApiLoggingFrequencySec() * 1000L) {", "originalCommit": "bf75bf2414838f3edb83790963d3e8dd6e589039", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc0MTIzOQ==", "url": "https://github.com/apache/beam/pull/12852#discussion_r493741239", "body": "Please make this message mention BigQuery", "bodyText": "Please make this message mention BigQuery", "bodyHTML": "<p dir=\"auto\">Please make this message mention BigQuery</p>", "author": "ajamato", "createdAt": "2020-09-23T16:48:18Z", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/bigquery/StreamingWriteFn.java", "diffHunk": "@@ -150,24 +143,42 @@ public void finishBundle(FinishBundleContext context) throws Exception {\n     for (ValueInSingleWindow<ErrorT> row : failedInserts) {\n       context.output(failedOutputTag, row.getValue(), row.getTimestamp(), row.getWindow());\n     }\n-\n-    long currentTimeMillis = System.currentTimeMillis();\n-    if (histogram.getTotalCount() > 0\n-        && (currentTimeMillis - lastReportedSystemClockMillis)\n-            > options.getLatencyLoggingFrequency() * 1000L) {\n-      logPercentiles();\n-      histogram.clear();\n-      lastReportedSystemClockMillis = currentTimeMillis;\n-    }\n+    reportStreamingApiLogging(options);\n   }\n \n-  private void logPercentiles() {\n-    LOG.info(\n-        \"Total number of streaming insert requests: {}, P99: {}ms, P90: {}ms, P50: {}ms\",\n-        histogram.getTotalCount(),\n-        DoubleMath.roundToInt(histogram.p99(), RoundingMode.HALF_UP),\n-        DoubleMath.roundToInt(histogram.p90(), RoundingMode.HALF_UP),\n-        DoubleMath.roundToInt(histogram.p50(), RoundingMode.HALF_UP));\n+  private void reportStreamingApiLogging(BigQueryOptions options) {\n+    if (reportingLock.tryLock()) {\n+      try {\n+        long currentTimeMillis = System.currentTimeMillis();\n+        if (currentTimeMillis - lastReportedSystemClockMillis\n+            > options.getBqStreamingApiLoggingFrequencySec() * 1000L) {\n+          StringBuilder logMessage = new StringBuilder();\n+          logMessage.append(\n+              String.format(\n+                  \"[Streaming Insert API Statistics since %s]\\n\",", "originalCommit": "bf75bf2414838f3edb83790963d3e8dd6e589039", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "f273f02affdb081db21d34db297190387b715a24", "url": "https://github.com/apache/beam/commit/f273f02affdb081db21d34db297190387b715a24", "message": "[BEAM-10890] Log error counts to debug BigQuery streaming insert requests for Java SDK", "committedDate": "2020-12-05T01:20:39Z", "type": "forcePushed"}, {"oid": "014c76c49523172c367079001f1a525c5f3387a9", "url": "https://github.com/apache/beam/commit/014c76c49523172c367079001f1a525c5f3387a9", "message": "[BEAM-10890] Log error counts to debug BigQuery streaming insert requests for Java SDK", "committedDate": "2021-01-20T03:39:29Z", "type": "commit"}, {"oid": "014c76c49523172c367079001f1a525c5f3387a9", "url": "https://github.com/apache/beam/commit/014c76c49523172c367079001f1a525c5f3387a9", "message": "[BEAM-10890] Log error counts to debug BigQuery streaming insert requests for Java SDK", "committedDate": "2021-01-20T03:39:29Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTM2MTIzNg==", "url": "https://github.com/apache/beam/pull/12852#discussion_r561361236", "body": "Remove space from start of string.\r\n\r\nPlease call this API_REQUEST_LATENCIES_URN latencies. Rather than HISTOGRAM_URN\r\n", "bodyText": "Remove space from start of string.\nPlease call this API_REQUEST_LATENCIES_URN latencies. Rather than HISTOGRAM_URN", "bodyHTML": "<p dir=\"auto\">Remove space from start of string.</p>\n<p dir=\"auto\">Please call this API_REQUEST_LATENCIES_URN latencies. Rather than HISTOGRAM_URN</p>", "author": "ajamato", "createdAt": "2021-01-20T22:54:17Z", "path": "sdks/java/extensions/google-cloud-platform-core/src/main/java/org/apache/beam/sdk/extensions/gcp/util/LatencyRecordingHttpRequestInitializer.java", "diffHunk": "@@ -31,6 +31,7 @@\n \n /** HttpRequestInitializer for recording request to response latency of Http-based API calls. */\n public class LatencyRecordingHttpRequestInitializer implements HttpRequestInitializer {\n+  // TODO: Import the URN from MonitoringInfoConstants.Urns when it's available\n   public static final String HISTOGRAM_URN = \" beam:metric:io:api_request_latencies:v1\";", "originalCommit": "014c76c49523172c367079001f1a525c5f3387a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTU1NTA1NQ==", "url": "https://github.com/apache/beam/pull/12852#discussion_r561555055", "bodyText": "Done.", "author": "ihji", "createdAt": "2021-01-21T03:27:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTM2MTIzNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTM2MzAyMg==", "url": "https://github.com/apache/beam/pull/12852#discussion_r561363022", "body": "I feel like KV isn't an appropriate type here. Isn't there a built in Pair or Tuple we could use in Java instead?\r\nAs KV is designed for pcollections. I see a org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.util.Pair being used in the repo:\r\nhttps://github.com/apache/beam/search?q=%22Pair%3C%22\r\n\r\n", "bodyText": "I feel like KV isn't an appropriate type here. Isn't there a built in Pair or Tuple we could use in Java instead?\nAs KV is designed for pcollections. I see a org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.util.Pair being used in the repo:\nhttps://github.com/apache/beam/search?q=%22Pair%3C%22", "bodyHTML": "<p dir=\"auto\">I feel like KV isn't an appropriate type here. Isn't there a built in Pair or Tuple we could use in Java instead?<br>\nAs KV is designed for pcollections. I see a org.apache.beam.vendor.calcite.v1_20_0.org.apache.calcite.util.Pair being used in the repo:<br>\n<a href=\"https://github.com/apache/beam/search?q=%22Pair%3C%22\">https://github.com/apache/beam/search?q=%22Pair%3C%22</a></p>", "author": "ajamato", "createdAt": "2021-01-20T22:58:12Z", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/bigquery/StreamingWriteFn.java", "diffHunk": "@@ -70,6 +73,15 @@\n   /** Tracks bytes written, exposed as \"ByteCount\" Counter. */\n   private Counter byteCounter = SinkMetrics.bytesWritten();\n \n+  private Set<KV<String, String>> metricFilter =", "originalCommit": "014c76c49523172c367079001f1a525c5f3387a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTU1NTM2Mg==", "url": "https://github.com/apache/beam/pull/12852#discussion_r561555362", "bodyText": "Using MetricName instead.", "author": "ihji", "createdAt": "2021-01-21T03:27:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTM2MzAyMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTM3MDA5MQ==", "url": "https://github.com/apache/beam/pull/12852#discussion_r561370091", "body": "Since you are instantiing the latency monitoring info, please add a MonitoringInfoSpec for it, and pull it its urn as the constant here\r\nhttps://github.com/apache/beam/blob/eca935bc36036dd11c5f2bd20052b08049375bfc/model/pipeline/src/main/proto/metrics.proto#L69\r\n\r\nThis would be ideal, as we should not instantiate metrics for URNs without a MonitoringInfoSpec.\r\n\r\n\r\nIt should be very similar to the API_REQUEST_COUNT, without STATUS label, a different URN, and a histogram type\r\n\r\ni.e. you can use\r\n\r\n    API_REQUEST_LATENCIES = 20 [(monitoring_info_spec) = {\r\n      urn: \"beam:metric:io:api_request_latencies:v1\",\r\n      type: \"beam:metrics:histogram_int64:v1\",\r\n      required_labels: [\r\n        \"SERVICE\",\r\n        \"METHOD\",\r\n        \"RESOURCE\",\r\n        \"PTRANSFORM\"\r\n      ],\r\n      annotations: [\r\n         {\r\n            key: \"description\",\r\n            value: \"Histogram counts for request latencies made to an IO\u2019s service APIs to batch read or write elements.\"\r\n        }, \r\n        {\r\n          key: \"units\",\r\n          value: \"Milliseconds\"\r\n        },\r\n        {\r\n          key: \"process_metric\",  // Should be reported as a process metric\r\n                                  // instead of a bundle metric\r\n          value: \"true\"\r\n        }\r\n      ]\r\n    }];\r\n", "bodyText": "Since you are instantiing the latency monitoring info, please add a MonitoringInfoSpec for it, and pull it its urn as the constant here\n\n  \n    \n      beam/model/pipeline/src/main/proto/metrics.proto\n    \n    \n         Line 69\n      in\n      eca935b\n    \n    \n    \n    \n\n        \n          \n           USER_SUM_INT64 = 0 [(monitoring_info_spec) = { \n        \n    \n  \n\n\nThis would be ideal, as we should not instantiate metrics for URNs without a MonitoringInfoSpec.\nIt should be very similar to the API_REQUEST_COUNT, without STATUS label, a different URN, and a histogram type\ni.e. you can use\nAPI_REQUEST_LATENCIES = 20 [(monitoring_info_spec) = {\n  urn: \"beam:metric:io:api_request_latencies:v1\",\n  type: \"beam:metrics:histogram_int64:v1\",\n  required_labels: [\n    \"SERVICE\",\n    \"METHOD\",\n    \"RESOURCE\",\n    \"PTRANSFORM\"\n  ],\n  annotations: [\n     {\n        key: \"description\",\n        value: \"Histogram counts for request latencies made to an IO\u2019s service APIs to batch read or write elements.\"\n    }, \n    {\n      key: \"units\",\n      value: \"Milliseconds\"\n    },\n    {\n      key: \"process_metric\",  // Should be reported as a process metric\n                              // instead of a bundle metric\n      value: \"true\"\n    }\n  ]\n}];", "bodyHTML": "<p dir=\"auto\">Since you are instantiing the latency monitoring info, please add a MonitoringInfoSpec for it, and pull it its urn as the constant here<br>\n<div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom color-bg-subtle\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/apache/beam/blob/eca935bc36036dd11c5f2bd20052b08049375bfc/model/pipeline/src/main/proto/metrics.proto#L69\">beam/model/pipeline/src/main/proto/metrics.proto</a>\n    </p>\n    <p class=\"mb-0 color-fg-muted\">\n         Line 69\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/apache/beam/commit/eca935bc36036dd11c5f2bd20052b08049375bfc\">eca935b</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\" data-paste-markdown-skip=\"\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L69\" class=\"blob-num border-0 px-3 py-0 color-bg-default js-line-number\" data-line-number=\"69\"></td>\n          <td id=\"LC69\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\"> <span class=\"pl-smi\">USER_SUM_INT64</span> = <span class=\"pl-c1\">0</span> [<span class=\"pl-c1\">(monitoring_info_spec)</span> = { </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n</p>\n<p dir=\"auto\">This would be ideal, as we should not instantiate metrics for URNs without a MonitoringInfoSpec.</p>\n<p dir=\"auto\">It should be very similar to the API_REQUEST_COUNT, without STATUS label, a different URN, and a histogram type</p>\n<p dir=\"auto\">i.e. you can use</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"API_REQUEST_LATENCIES = 20 [(monitoring_info_spec) = {\n  urn: &quot;beam:metric:io:api_request_latencies:v1&quot;,\n  type: &quot;beam:metrics:histogram_int64:v1&quot;,\n  required_labels: [\n    &quot;SERVICE&quot;,\n    &quot;METHOD&quot;,\n    &quot;RESOURCE&quot;,\n    &quot;PTRANSFORM&quot;\n  ],\n  annotations: [\n     {\n        key: &quot;description&quot;,\n        value: &quot;Histogram counts for request latencies made to an IO\u2019s service APIs to batch read or write elements.&quot;\n    }, \n    {\n      key: &quot;units&quot;,\n      value: &quot;Milliseconds&quot;\n    },\n    {\n      key: &quot;process_metric&quot;,  // Should be reported as a process metric\n                              // instead of a bundle metric\n      value: &quot;true&quot;\n    }\n  ]\n}];\n\"><pre><code>API_REQUEST_LATENCIES = 20 [(monitoring_info_spec) = {\n  urn: \"beam:metric:io:api_request_latencies:v1\",\n  type: \"beam:metrics:histogram_int64:v1\",\n  required_labels: [\n    \"SERVICE\",\n    \"METHOD\",\n    \"RESOURCE\",\n    \"PTRANSFORM\"\n  ],\n  annotations: [\n     {\n        key: \"description\",\n        value: \"Histogram counts for request latencies made to an IO\u2019s service APIs to batch read or write elements.\"\n    }, \n    {\n      key: \"units\",\n      value: \"Milliseconds\"\n    },\n    {\n      key: \"process_metric\",  // Should be reported as a process metric\n                              // instead of a bundle metric\n      value: \"true\"\n    }\n  ]\n}];\n</code></pre></div>", "author": "ajamato", "createdAt": "2021-01-20T23:15:31Z", "path": "sdks/java/extensions/google-cloud-platform-core/src/main/java/org/apache/beam/sdk/extensions/gcp/util/LatencyRecordingHttpRequestInitializer.java", "diffHunk": "@@ -31,6 +31,7 @@\n \n /** HttpRequestInitializer for recording request to response latency of Http-based API calls. */\n public class LatencyRecordingHttpRequestInitializer implements HttpRequestInitializer {\n+  // TODO: Import the URN from MonitoringInfoConstants.Urns when it's available\n   public static final String HISTOGRAM_URN = \" beam:metric:io:api_request_latencies:v1\";", "originalCommit": "014c76c49523172c367079001f1a525c5f3387a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTU1NTg2Nw==", "url": "https://github.com/apache/beam/pull/12852#discussion_r561555867", "bodyText": "Done.", "author": "ihji", "createdAt": "2021-01-21T03:28:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTM3MDA5MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTM3NzM2Mg==", "url": "https://github.com/apache/beam/pull/12852#discussion_r561377362", "body": "HashSet<MetricName> metricFilter\r\nI think it would make more sense to make the metricFilter just be a Set of MetricNames as well.  MetricName has a hash code so you can do efficient set lookups this way as well. It is used with Map types as a key normally, so this should work.\r\n\r\nAlso, make the metric  you are defining uses a MonitoringInfoMetricName, which doesn't have a name+namespace concept, it instead has a urn and labels. Instantiate a MonitoringInfoMetricName for it using the full URN and labels. Don't parse the URN and put it in a MetricName as a namespace+name\r\n\r\nhttps://github.com/apache/beam/blob/a72460272354747a54449358f5df414be4b6d72c/runners/core-java/src/main/java/org/apache/beam/runners/core/metrics/MonitoringInfoMetricName.java#L105\r\n\r\n\r\n\r\n", "bodyText": "HashSet metricFilter\nI think it would make more sense to make the metricFilter just be a Set of MetricNames as well.  MetricName has a hash code so you can do efficient set lookups this way as well. It is used with Map types as a key normally, so this should work.\nAlso, make the metric  you are defining uses a MonitoringInfoMetricName, which doesn't have a name+namespace concept, it instead has a urn and labels. Instantiate a MonitoringInfoMetricName for it using the full URN and labels. Don't parse the URN and put it in a MetricName as a namespace+name\n\n  \n    \n      beam/runners/core-java/src/main/java/org/apache/beam/runners/core/metrics/MonitoringInfoMetricName.java\n    \n    \n         Line 105\n      in\n      a724602\n    \n    \n    \n    \n\n        \n          \n           public boolean equals(@Nullable Object o) {", "bodyHTML": "<p dir=\"auto\">HashSet metricFilter<br>\nI think it would make more sense to make the metricFilter just be a Set of MetricNames as well.  MetricName has a hash code so you can do efficient set lookups this way as well. It is used with Map types as a key normally, so this should work.</p>\n<p dir=\"auto\">Also, make the metric  you are defining uses a MonitoringInfoMetricName, which doesn't have a name+namespace concept, it instead has a urn and labels. Instantiate a MonitoringInfoMetricName for it using the full URN and labels. Don't parse the URN and put it in a MetricName as a namespace+name</p>\n<p dir=\"auto\"><div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom color-bg-subtle\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/apache/beam/blob/a72460272354747a54449358f5df414be4b6d72c/runners/core-java/src/main/java/org/apache/beam/runners/core/metrics/MonitoringInfoMetricName.java#L105\">beam/runners/core-java/src/main/java/org/apache/beam/runners/core/metrics/MonitoringInfoMetricName.java</a>\n    </p>\n    <p class=\"mb-0 color-fg-muted\">\n         Line 105\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/apache/beam/commit/a72460272354747a54449358f5df414be4b6d72c\">a724602</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\" data-paste-markdown-skip=\"\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L105\" class=\"blob-num border-0 px-3 py-0 color-bg-default js-line-number\" data-line-number=\"105\"></td>\n          <td id=\"LC105\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\"> <span class=\"pl-k\">public</span> <span class=\"pl-k\">boolean</span> <span class=\"pl-en\">equals</span>(<span class=\"pl-k\">@Nullable</span> <span class=\"pl-smi\">Object</span> <span class=\"pl-v\">o</span>) { </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n</p>", "author": "ajamato", "createdAt": "2021-01-20T23:32:53Z", "path": "runners/core-java/src/main/java/org/apache/beam/runners/core/metrics/MetricsContainerImpl.java", "diffHunk": "@@ -411,20 +412,23 @@ public int hashCode() {\n   }\n \n   /**\n-   * Match a MetricName with a given namespace and a name. If the namespace or the name is null, it\n-   * will be ignored for the match.\n+   * Match a MetricName with a given metric filter. If the metric filter is null, the method always\n+   * returns true.\n    */\n   private boolean matchMetricName(\n-      MetricName metricName, @Nullable String namespace, @Nullable String name) {\n-    return (namespace == null || namespace.equals(metricName.getNamespace()))\n-        && (name == null || name.equals(metricName.getName()));\n+      MetricName metricName, @Nullable Set<KV<String, String>> metricFilter) {", "originalCommit": "014c76c49523172c367079001f1a525c5f3387a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTU1NjkwMg==", "url": "https://github.com/apache/beam/pull/12852#discussion_r561556902", "bodyText": "Done. Using MetricName instead.", "author": "ihji", "createdAt": "2021-01-21T03:29:00Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTM3NzM2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTM3NzgzOQ==", "url": "https://github.com/apache/beam/pull/12852#discussion_r561377839", "body": "It looks like you are parsing the URN and treating it as if it were the \"namespace\" and \"name\" of the metric.\r\n\r\nHowever, this metric does not have a namespace+name, and should not be modeled as such.\r\n\r\nRemember, namespace+name is a concept that only applies to user defined metrics. The namespace and name are simply labels populated with the keys \"namespace\" and \"name\"\r\nSee the MonitoringInfoSpec on USER_SUM_INT64\r\nhttps://github.com/apache/beam/blob/eca935bc36036dd11c5f2bd20052b08049375bfc/model/pipeline/src/main/proto/metrics.proto#L69\r\n\r\nThis metric should be identified using the urn, and it's labels.\r\nInstantiate a MonitoringInfoMetricName for it instead, and update the comparison logic to just filter using MetricNames (MonitoringInfoMetricName is a subclass of MetricName).", "bodyText": "It looks like you are parsing the URN and treating it as if it were the \"namespace\" and \"name\" of the metric.\nHowever, this metric does not have a namespace+name, and should not be modeled as such.\nRemember, namespace+name is a concept that only applies to user defined metrics. The namespace and name are simply labels populated with the keys \"namespace\" and \"name\"\nSee the MonitoringInfoSpec on USER_SUM_INT64\n\n  \n    \n      beam/model/pipeline/src/main/proto/metrics.proto\n    \n    \n         Line 69\n      in\n      eca935b\n    \n    \n    \n    \n\n        \n          \n           USER_SUM_INT64 = 0 [(monitoring_info_spec) = { \n        \n    \n  \n\n\nThis metric should be identified using the urn, and it's labels.\nInstantiate a MonitoringInfoMetricName for it instead, and update the comparison logic to just filter using MetricNames (MonitoringInfoMetricName is a subclass of MetricName).", "bodyHTML": "<p dir=\"auto\">It looks like you are parsing the URN and treating it as if it were the \"namespace\" and \"name\" of the metric.</p>\n<p dir=\"auto\">However, this metric does not have a namespace+name, and should not be modeled as such.</p>\n<p dir=\"auto\">Remember, namespace+name is a concept that only applies to user defined metrics. The namespace and name are simply labels populated with the keys \"namespace\" and \"name\"<br>\nSee the MonitoringInfoSpec on USER_SUM_INT64<br>\n<div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom color-bg-subtle\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/apache/beam/blob/eca935bc36036dd11c5f2bd20052b08049375bfc/model/pipeline/src/main/proto/metrics.proto#L69\">beam/model/pipeline/src/main/proto/metrics.proto</a>\n    </p>\n    <p class=\"mb-0 color-fg-muted\">\n         Line 69\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/apache/beam/commit/eca935bc36036dd11c5f2bd20052b08049375bfc\">eca935b</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\" data-paste-markdown-skip=\"\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L69\" class=\"blob-num border-0 px-3 py-0 color-bg-default js-line-number\" data-line-number=\"69\"></td>\n          <td id=\"LC69\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\"> <span class=\"pl-smi\">USER_SUM_INT64</span> = <span class=\"pl-c1\">0</span> [<span class=\"pl-c1\">(monitoring_info_spec)</span> = { </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n</p>\n<p dir=\"auto\">This metric should be identified using the urn, and it's labels.<br>\nInstantiate a MonitoringInfoMetricName for it instead, and update the comparison logic to just filter using MetricNames (MonitoringInfoMetricName is a subclass of MetricName).</p>", "author": "ajamato", "createdAt": "2021-01-20T23:34:12Z", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/bigquery/StreamingWriteFn.java", "diffHunk": "@@ -70,6 +73,15 @@\n   /** Tracks bytes written, exposed as \"ByteCount\" Counter. */\n   private Counter byteCounter = SinkMetrics.bytesWritten();\n \n+  private Set<KV<String, String>> metricFilter =\n+      ImmutableSet.of(\n+          KV.of(\n+              LatencyRecordingHttpRequestInitializer.HISTOGRAM_URN.split(\":\", 2)[0],", "originalCommit": "014c76c49523172c367079001f1a525c5f3387a9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTU1NzExNQ==", "url": "https://github.com/apache/beam/pull/12852#discussion_r561557115", "bodyText": "Done.", "author": "ihji", "createdAt": "2021-01-21T03:29:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTM3NzgzOQ=="}], "type": "inlineReview"}, {"oid": "171ba9d31f6cbd1893a2cd41a2252d5e8b28fcec", "url": "https://github.com/apache/beam/commit/171ba9d31f6cbd1893a2cd41a2252d5e8b28fcec", "message": "add API_REQUEST_LATENCIES, match by MetricName", "committedDate": "2021-01-21T03:26:06Z", "type": "commit"}, {"oid": "b44d928715e61d906eeb57e458b44afca414400f", "url": "https://github.com/apache/beam/commit/b44d928715e61d906eeb57e458b44afca414400f", "message": "fix encoding error in windows", "committedDate": "2021-01-21T23:39:31Z", "type": "commit"}]}