{"pr_number": 12083, "pr_title": "[BEAM-10317] Java - Update BigQueryIO to tag BigQuery Jobs with the Dataflow Job ID", "pr_author": "ajamato", "pr_createdAt": "2020-06-25T00:39:20Z", "pr_url": "https://github.com/apache/beam/pull/12083", "timeline": [{"oid": "284dd3a187bbc61c1defc865656b5111488b239f", "url": "https://github.com/apache/beam/commit/284dd3a187bbc61c1defc865656b5111488b239f", "message": "[BEAM-10317] Java - Update BigQueryIO to tag BigQuery Jobs with the Dataflow Job ID", "committedDate": "2020-06-25T00:49:26Z", "type": "forcePushed"}, {"oid": "52fd2a59f71d3a1cf5080cdfa840ce0cd6e57794", "url": "https://github.com/apache/beam/commit/52fd2a59f71d3a1cf5080cdfa840ce0cd6e57794", "message": "[BEAM-10317] Java - Update BigQueryIO to tag BigQuery Jobs with the Dataflow Job ID", "committedDate": "2020-06-25T22:03:30Z", "type": "forcePushed"}, {"oid": "9b93be8b54a7abc2486b6ee70f9c04814bcd0970", "url": "https://github.com/apache/beam/commit/9b93be8b54a7abc2486b6ee70f9c04814bcd0970", "message": "[BEAM-10317] Java - Update BigQueryIO to tag BigQuery Jobs with the Dataflow Job ID", "committedDate": "2020-06-25T22:57:13Z", "type": "forcePushed"}, {"oid": "96c5b62d2a486bf0b916bc24eca4f283bfd9ea98", "url": "https://github.com/apache/beam/commit/96c5b62d2a486bf0b916bc24eca4f283bfd9ea98", "message": "[BEAM-10317] Java - Update BigQueryIO to tag BigQuery Jobs with the Dataflow Job ID", "committedDate": "2020-06-25T23:59:25Z", "type": "forcePushed"}, {"oid": "7df9ceb335cfff140230cf07688447fe02bf67bf", "url": "https://github.com/apache/beam/commit/7df9ceb335cfff140230cf07688447fe02bf67bf", "message": "[BEAM-10317] Java - Update BigQueryIO to tag BigQuery Jobs with the Dataflow Job ID", "committedDate": "2020-06-26T00:49:17Z", "type": "forcePushed"}, {"oid": "5840e80bda23b550dde2a33853eca0edef4bb1a0", "url": "https://github.com/apache/beam/commit/5840e80bda23b550dde2a33853eca0edef4bb1a0", "message": "[BEAM-10317] Java - Update BigQueryIO to tag BigQuery Jobs with the Dataflow Job ID", "committedDate": "2020-06-26T20:32:43Z", "type": "forcePushed"}, {"oid": "da5fbdafc8e9b06efa554834c86c9f198010d7f7", "url": "https://github.com/apache/beam/commit/da5fbdafc8e9b06efa554834c86c9f198010d7f7", "message": "[BEAM-10317] Java - Update BigQueryIO to tag BigQuery Jobs with the Dataflow Job ID", "committedDate": "2020-06-29T21:58:01Z", "type": "forcePushed"}, {"oid": "bdb3d0408241bfd634eba3004ffdbf67c1cac0cd", "url": "https://github.com/apache/beam/commit/bdb3d0408241bfd634eba3004ffdbf67c1cac0cd", "message": "[BEAM-10317] Java - Update BigQueryIO to tag BigQuery Jobs with the Dataflow Job ID", "committedDate": "2020-06-30T00:53:03Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE0MDM5NA==", "url": "https://github.com/apache/beam/pull/12083#discussion_r448140394", "body": "I believe the protos might be immutable, and creating new instances when you call `setX` on them. You can do the whole thing fluently:\r\n\r\n```suggestion\r\n      Job job = new Job()\r\n            .setJobReference(jobRef)\r\n            .setConfiguration(new JobConfiguration()\r\n                  .setCopy(copyConfig)\r\n                  .setLabels(this.bqIOMetadata.addAdditionalJobLabels(labelMap)));\r\n```", "bodyText": "I believe the protos might be immutable, and creating new instances when you call setX on them. You can do the whole thing fluently:\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  Map<String, String> labelMap = new HashMap<>();\n          \n          \n            \n                  JobConfiguration config = new JobConfiguration();\n          \n          \n            \n                  config.setCopy(copyConfig);\n          \n          \n            \n                  config.setLabels(this.bqIOMetadata.addAdditionalJobLabels(labelMap));\n          \n          \n            \n                  Job job = new Job().setJobReference(jobRef).setConfiguration(config);\n          \n          \n            \n                  Job job = new Job()\n          \n          \n            \n                        .setJobReference(jobRef)\n          \n          \n            \n                        .setConfiguration(new JobConfiguration()\n          \n          \n            \n                              .setCopy(copyConfig)\n          \n          \n            \n                              .setLabels(this.bqIOMetadata.addAdditionalJobLabels(labelMap)));", "bodyHTML": "<p dir=\"auto\">I believe the protos might be immutable, and creating new instances when you call <code>setX</code> on them. You can do the whole thing fluently:</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">      <span class=\"pl-k\"><span class=\"x x-first\">Map&lt;</span><span class=\"pl-smi x\">String</span><span class=\"x\">, </span><span class=\"pl-smi x\">String</span><span class=\"x\">&gt;</span></span><span class=\"x x-last\"> labelMap </span><span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-k x x-first\">HashMap&lt;&gt;</span><span class=\"x x-last\">();</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">      <span class=\"pl-smi x x-first\">JobConfiguration</span><span class=\"x\"> config </span><span class=\"pl-k x\">=</span><span class=\"x\"> </span><span class=\"pl-k x\">new</span><span class=\"x\"> </span><span class=\"pl-smi x\">JobConfiguration</span><span class=\"x x-last\">();</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">      <span class=\"x x-first\">config</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">setCopy(copyConfig);</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">      <span class=\"x x-first\">config</span><span class=\"pl-k x\">.</span><span class=\"x\">setLabels(</span><span class=\"pl-c1 x\">this</span><span class=\"pl-k x\">.</span><span class=\"x\">bqIOMetadata</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">addAdditionalJobLabels(labelMap));</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">      <span class=\"pl-smi x x-first\">Job</span><span class=\"x\"> job </span><span class=\"pl-k x\">=</span><span class=\"x\"> </span><span class=\"pl-k x\">new</span><span class=\"x\"> </span><span class=\"pl-smi x\">Job</span><span class=\"x\">()</span><span class=\"pl-k x\">.</span><span class=\"x\">setJobReference(jobRef)</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">setConfiguration(config</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">      <span class=\"pl-smi x x-first\">Job</span><span class=\"x x-last\"> job </span><span class=\"pl-k\">=</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi x x-first\">Job</span><span class=\"x x-last\">()</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">      <span class=\"x x-first x-last\">      .setJobReference(jobRef)</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">      <span class=\"x x-first\">      .setConfiguration(</span><span class=\"pl-k x\">new</span><span class=\"x\"> </span><span class=\"pl-smi x\">JobConfiguration</span><span class=\"x x-last\">()</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">      <span class=\"x x-first x-last\">            .setCopy(copyConfig)</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">      <span class=\"x x-first\">            .setLabels(</span><span class=\"pl-c1 x\">this</span><span class=\"pl-k x\">.</span><span class=\"x\">bqIOMetadata</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">addAdditionalJobLabels(labelMap))</span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "pabloem", "createdAt": "2020-07-01T06:23:48Z", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/bigquery/BigQueryServicesImpl.java", "diffHunk": "@@ -216,11 +221,11 @@ public void startQueryJob(JobReference jobRef, JobConfigurationQuery queryConfig\n     @Override\n     public void startCopyJob(JobReference jobRef, JobConfigurationTableCopy copyConfig)\n         throws IOException, InterruptedException {\n-      Job job =\n-          new Job()\n-              .setJobReference(jobRef)\n-              .setConfiguration(new JobConfiguration().setCopy(copyConfig));\n-\n+      Map<String, String> labelMap = new HashMap<>();\n+      JobConfiguration config = new JobConfiguration();\n+      config.setCopy(copyConfig);\n+      config.setLabels(this.bqIOMetadata.addAdditionalJobLabels(labelMap));\n+      Job job = new Job().setJobReference(jobRef).setConfiguration(config);", "originalCommit": "bdb3d0408241bfd634eba3004ffdbf67c1cac0cd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE0MDUzNA==", "url": "https://github.com/apache/beam/pull/12083#discussion_r448140534", "bodyText": "Same for other occurrences in this file", "author": "pabloem", "createdAt": "2020-07-01T06:24:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE0MDM5NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY5MzE3OA==", "url": "https://github.com/apache/beam/pull/12083#discussion_r448693178", "bodyText": "Done", "author": "ajamato", "createdAt": "2020-07-02T01:07:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE0MDM5NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE0MzU4NQ==", "url": "https://github.com/apache/beam/pull/12083#discussion_r448143585", "body": "Same as Python - will this timeout first, or fail immediately?", "bodyText": "Same as Python - will this timeout first, or fail immediately?", "bodyHTML": "<p dir=\"auto\">Same as Python - will this timeout first, or fail immediately?</p>", "author": "pabloem", "createdAt": "2020-07-01T06:31:52Z", "path": "sdks/java/extensions/google-cloud-platform-core/src/main/java/org/apache/beam/sdk/extensions/gcp/util/GceMetadataUtil.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.gcp.util;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.Reader;\n+import java.nio.charset.Charset;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.io.CharStreams;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.client.HttpClient;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.DefaultHttpClient;\n+import org.apache.http.params.BasicHttpParams;\n+import org.apache.http.params.HttpConnectionParams;\n+import org.apache.http.params.HttpParams;\n+\n+/** */\n+public class GceMetadataUtil {\n+  private static final String BASE_METADATA_URL = \"http://metadata/computeMetadata/v1/\";\n+\n+  static String fetchMetadata(String key) {\n+    int timeoutMillis = 5000;\n+    final HttpParams httpParams = new BasicHttpParams();\n+    HttpConnectionParams.setConnectionTimeout(httpParams, timeoutMillis);\n+    HttpClient client = new DefaultHttpClient(httpParams);\n+    HttpGet request = new HttpGet(BASE_METADATA_URL + key);\n+    request.setHeader(\"Metadata-Flavor\", \"Google\");\n+\n+    try {\n+      HttpResponse response = client.execute(request);\n+      if (response.getStatusLine().getStatusCode() != 200) {\n+        // May mean its running on a non DataflowRunner, in which case it's perfectly normal.\n+        return \"\";\n+      }\n+      InputStream in = response.getEntity().getContent();\n+      try (final Reader reader = new InputStreamReader(in, Charset.defaultCharset())) {\n+        return CharStreams.toString(reader);\n+      }\n+    } catch (IOException e) {\n+      // May mean its running on a non DataflowRunner, in which case it's perfectly normal.", "originalCommit": "bdb3d0408241bfd634eba3004ffdbf67c1cac0cd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY4OTg3Ng==", "url": "https://github.com/apache/beam/pull/12083#discussion_r448689876", "bodyText": "As discussed on the python PR. It shouldn't resolve the address and return much faster than the timeout.\nIf it does resolve for some reason (as you suggested running on a GCE VM+setting the metadata, but not via Dataflow), I still validate the returned job_id string is a valid cloud label before attaching it as a bq job label.", "author": "ajamato", "createdAt": "2020-07-02T00:54:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE0MzU4NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE0NDIxNg==", "url": "https://github.com/apache/beam/pull/12083#discussion_r448144216", "body": "An intersting example: What if the worker running this code is a GCE VM, but not on Dataflow (e.g. Dataproc, DirectRunner on GCE VM)? Will that case be handled properly? This should be exercised by postcommits, I'd think...", "bodyText": "An intersting example: What if the worker running this code is a GCE VM, but not on Dataflow (e.g. Dataproc, DirectRunner on GCE VM)? Will that case be handled properly? This should be exercised by postcommits, I'd think...", "bodyHTML": "<p dir=\"auto\">An intersting example: What if the worker running this code is a GCE VM, but not on Dataflow (e.g. Dataproc, DirectRunner on GCE VM)? Will that case be handled properly? This should be exercised by postcommits, I'd think...</p>", "author": "pabloem", "createdAt": "2020-07-01T06:33:42Z", "path": "sdks/java/extensions/google-cloud-platform-core/src/main/java/org/apache/beam/sdk/extensions/gcp/util/GceMetadataUtil.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.extensions.gcp.util;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.Reader;\n+import java.nio.charset.Charset;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.io.CharStreams;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.client.HttpClient;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.impl.client.DefaultHttpClient;\n+import org.apache.http.params.BasicHttpParams;\n+import org.apache.http.params.HttpConnectionParams;\n+import org.apache.http.params.HttpParams;\n+\n+/** */\n+public class GceMetadataUtil {\n+  private static final String BASE_METADATA_URL = \"http://metadata/computeMetadata/v1/\";\n+\n+  static String fetchMetadata(String key) {\n+    int timeoutMillis = 5000;\n+    final HttpParams httpParams = new BasicHttpParams();\n+    HttpConnectionParams.setConnectionTimeout(httpParams, timeoutMillis);\n+    HttpClient client = new DefaultHttpClient(httpParams);\n+    HttpGet request = new HttpGet(BASE_METADATA_URL + key);\n+    request.setHeader(\"Metadata-Flavor\", \"Google\");\n+\n+    try {\n+      HttpResponse response = client.execute(request);\n+      if (response.getStatusLine().getStatusCode() != 200) {\n+        // May mean its running on a non DataflowRunner, in which case it's perfectly normal.\n+        return \"\";\n+      }\n+      InputStream in = response.getEntity().getContent();\n+      try (final Reader reader = new InputStreamReader(in, Charset.defaultCharset())) {\n+        return CharStreams.toString(reader);", "originalCommit": "bdb3d0408241bfd634eba3004ffdbf67c1cac0cd", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY4Nzc1Mw==", "url": "https://github.com/apache/beam/pull/12083#discussion_r448687753", "bodyText": "If a valid cloud label string is provided job_id is defined in the metadata, it will be pulled in and added a s a beam_job_id label to the BQ jobs. Shouldn't break anything, and if the job_id is meaningful it could be quite useful. It would actually be a good thing to do intentionally, IMO. Might be worth suggesting to dataproc.", "author": "ajamato", "createdAt": "2020-07-02T00:45:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE0NDIxNg=="}], "type": "inlineReview"}, {"oid": "4879b742e1c4475fbfff8eed763799709e08bc6b", "url": "https://github.com/apache/beam/commit/4879b742e1c4475fbfff8eed763799709e08bc6b", "message": "[BEAM-10317] Java - Update BigQueryIO to tag BigQuery Jobs with the Dataflow Job ID", "committedDate": "2020-07-02T02:10:37Z", "type": "forcePushed"}, {"oid": "0dede89a89e6b1b8c5a62b7c5d30759841badbe0", "url": "https://github.com/apache/beam/commit/0dede89a89e6b1b8c5a62b7c5d30759841badbe0", "message": "[BEAM-10317] Java - Update BigQueryIO to tag BigQuery Jobs with the Dataflow Job ID", "committedDate": "2020-07-06T18:51:12Z", "type": "commit"}, {"oid": "0dede89a89e6b1b8c5a62b7c5d30759841badbe0", "url": "https://github.com/apache/beam/commit/0dede89a89e6b1b8c5a62b7c5d30759841badbe0", "message": "[BEAM-10317] Java - Update BigQueryIO to tag BigQuery Jobs with the Dataflow Job ID", "committedDate": "2020-07-06T18:51:12Z", "type": "forcePushed"}]}