{"pr_number": 12341, "pr_title": "[BEAM-10557] Implemented SchemaIOProvider for DataStoreV1, Refactored tests", "pr_author": "sclukas77", "pr_createdAt": "2020-07-22T20:48:16Z", "pr_url": "https://github.com/apache/beam/pull/12341", "timeline": [{"oid": "6c7e2625d045b8c8289452e3801102f4fe465266", "url": "https://github.com/apache/beam/commit/6c7e2625d045b8c8289452e3801102f4fe465266", "message": "Implemented SchemaIOProvider for DataStoreV1, refactored tests", "committedDate": "2020-07-22T20:38:00Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI0MDE0Nw==", "url": "https://github.com/apache/beam/pull/12341#discussion_r461240147", "body": "```suggestion\r\n * A {@code PTransform} to perform a conversion of {@link Row} to {@link Entity}.\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * A {@code PTransform} to perform a conversion of {@code PCollection<Row>} to {@code\n          \n          \n            \n             * PCollection<Entity>}.\n          \n          \n            \n             * A {@code PTransform} to perform a conversion of {@link Row} to {@link Entity}.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"> <span class=\"pl-k\">*</span> <span class=\"pl-smi\">A</span> {<span class=\"pl-k\">@code</span> <span class=\"pl-smi\">PTransform</span>} to perform a conversion of {<span class=\"pl-k\">@code</span> <span class=\"pl-k\">PCollection&lt;<span class=\"pl-smi\">Row</span>&gt;</span>} to {<span class=\"pl-k\">@code</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"> <span class=\"pl-k\">*</span> <span class=\"pl-k\">PCollection&lt;<span class=\"pl-smi\">Entity</span>&gt;</span>}<span class=\"pl-c1\">.</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"> <span class=\"pl-k\">*</span> <span class=\"pl-smi\">A</span> {<span class=\"pl-k\">@code</span> <span class=\"pl-smi\">PTransform</span>} to perform a conversion of {<span class=\"pl-k\">@link</span> <span class=\"pl-smi\">Row</span>} to {<span class=\"pl-k\">@link</span> <span class=\"pl-smi\">Entity</span>}<span class=\"pl-c1\">.</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "TheNeuralBit", "createdAt": "2020-07-28T00:07:17Z", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/datastore/RowToEntity.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.datastore;\n+\n+import static com.google.datastore.v1.client.DatastoreHelper.makeKey;\n+import static com.google.datastore.v1.client.DatastoreHelper.makeValue;\n+\n+import com.google.datastore.v1.Entity;\n+import com.google.datastore.v1.Value;\n+import com.google.protobuf.ByteString;\n+import com.google.protobuf.InvalidProtocolBufferException;\n+import java.io.Serializable;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+import org.apache.beam.sdk.schemas.Schema;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.Row;\n+import org.joda.time.Instant;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * A {@code PTransform} to perform a conversion of {@code PCollection<Row>} to {@code\n+ * PCollection<Entity>}.", "originalCommit": "6c7e2625d045b8c8289452e3801102f4fe465266", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ2MDI2OQ==", "url": "https://github.com/apache/beam/pull/12341#discussion_r466460269", "bodyText": "Done", "author": "sclukas77", "createdAt": "2020-08-06T14:37:08Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI0MDE0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI0MDQ5NQ==", "url": "https://github.com/apache/beam/pull/12341#discussion_r461240495", "body": "```suggestion\r\n * A {@code PTransform} to perform a conversion of {@link Entity} to {@link Row}.\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * A {@code PTransform} to perform a conversion of {@code PCollection<Entity>} to {@code\n          \n          \n            \n             * PCollection<Row>}.\n          \n          \n            \n             * A {@code PTransform} to perform a conversion of {@link Entity} to {@link Row}.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"> <span class=\"pl-k\">*</span> <span class=\"pl-smi\">A</span> {<span class=\"pl-k\">@code</span> <span class=\"pl-smi\">PTransform</span>} to perform a conversion of {<span class=\"pl-k\">@code</span> <span class=\"pl-k\">PCollection&lt;<span class=\"pl-smi\">Entity</span>&gt;</span>} to {<span class=\"pl-k\">@code</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"> <span class=\"pl-k\">*</span> <span class=\"pl-k\">PCollection&lt;<span class=\"pl-smi\">Row</span>&gt;</span>}<span class=\"pl-c1\">.</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"> <span class=\"pl-k\">*</span> <span class=\"pl-smi\">A</span> {<span class=\"pl-k\">@code</span> <span class=\"pl-smi\">PTransform</span>} to perform a conversion of {<span class=\"pl-k\">@link</span> <span class=\"pl-smi\">Entity</span>} to {<span class=\"pl-k\">@link</span> <span class=\"pl-smi\">Row</span>}<span class=\"pl-c1\">.</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "TheNeuralBit", "createdAt": "2020-07-28T00:08:30Z", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/datastore/EntityToRow.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.datastore;\n+\n+import static com.google.datastore.v1.client.DatastoreHelper.makeValue;\n+\n+import com.google.datastore.v1.Entity;\n+import com.google.datastore.v1.Value;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import org.apache.beam.sdk.schemas.Schema;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.Row;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableMap;\n+import org.joda.time.Instant;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * A {@code PTransform} to perform a conversion of {@code PCollection<Entity>} to {@code\n+ * PCollection<Row>}.", "originalCommit": "6c7e2625d045b8c8289452e3801102f4fe465266", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ2MDA0NA==", "url": "https://github.com/apache/beam/pull/12341#discussion_r466460044", "bodyText": "Done", "author": "sclukas77", "createdAt": "2020-08-06T14:36:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI0MDQ5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI0MTQ3Mw==", "url": "https://github.com/apache/beam/pull/12341#discussion_r461241473", "body": "Will this work if we just use `STRING`? (Rather than re-creating `CalciteUtils.CHAR` here)", "bodyText": "Will this work if we just use STRING? (Rather than re-creating CalciteUtils.CHAR here)", "bodyHTML": "<p dir=\"auto\">Will this work if we just use <code>STRING</code>? (Rather than re-creating <code>CalciteUtils.CHAR</code> here)</p>", "author": "TheNeuralBit", "createdAt": "2020-07-28T00:11:25Z", "path": "sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/datastore/EntityToRowRowToEntityTest.java", "diffHunk": "@@ -74,7 +73,7 @@\n           .addNullableField(\"rowArray\", array(FieldType.row(NESTED_ROW_SCHEMA)))\n           .addNullableField(\"double\", DOUBLE)\n           .addNullableField(\"bytes\", BYTES)\n-          .addNullableField(\"string\", CalciteUtils.CHAR)\n+          .addNullableField(\"string\", CHAR)", "originalCommit": "6c7e2625d045b8c8289452e3801102f4fe465266", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ1OTU5OQ==", "url": "https://github.com/apache/beam/pull/12341#discussion_r466459599", "bodyText": "Done", "author": "sclukas77", "createdAt": "2020-08-06T14:36:11Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI0MTQ3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI0OTI1OQ==", "url": "https://github.com/apache/beam/pull/12341#discussion_r461249259", "body": "Should this also have an implementation for getTableStatistics? It looks like DataStoreV1Table had a non-standard implementation:\r\n```\r\n  @Override\t\r\n  public BeamTableStatistics getTableStatistics(PipelineOptions options) {\t\r\n    long count =\t\r\n        DatastoreIO.v1().read().withProjectId(projectId).getNumEntities(options, kind, null);\t\r\n\r\n    if (count < 0) {\t\r\n      return BeamTableStatistics.BOUNDED_UNKNOWN;\t\r\n    }\t\r\n\r\n    return BeamTableStatistics.createBoundedTableStatistics((double) count);\t\r\n  }\r\n```", "bodyText": "Should this also have an implementation for getTableStatistics? It looks like DataStoreV1Table had a non-standard implementation:\n  @Override\t\n  public BeamTableStatistics getTableStatistics(PipelineOptions options) {\t\n    long count =\t\n        DatastoreIO.v1().read().withProjectId(projectId).getNumEntities(options, kind, null);\t\n\n    if (count < 0) {\t\n      return BeamTableStatistics.BOUNDED_UNKNOWN;\t\n    }\t\n\n    return BeamTableStatistics.createBoundedTableStatistics((double) count);\t\n  }", "bodyHTML": "<p dir=\"auto\">Should this also have an implementation for getTableStatistics? It looks like DataStoreV1Table had a non-standard implementation:</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"  @Override\t\n  public BeamTableStatistics getTableStatistics(PipelineOptions options) {\t\n    long count =\t\n        DatastoreIO.v1().read().withProjectId(projectId).getNumEntities(options, kind, null);\t\n\n    if (count &lt; 0) {\t\n      return BeamTableStatistics.BOUNDED_UNKNOWN;\t\n    }\t\n\n    return BeamTableStatistics.createBoundedTableStatistics((double) count);\t\n  }\n\"><pre><code>  @Override\t\n  public BeamTableStatistics getTableStatistics(PipelineOptions options) {\t\n    long count =\t\n        DatastoreIO.v1().read().withProjectId(projectId).getNumEntities(options, kind, null);\t\n\n    if (count &lt; 0) {\t\n      return BeamTableStatistics.BOUNDED_UNKNOWN;\t\n    }\t\n\n    return BeamTableStatistics.createBoundedTableStatistics((double) count);\t\n  }\n</code></pre></div>", "author": "TheNeuralBit", "createdAt": "2020-07-28T00:37:34Z", "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/meta/provider/datastore/DataStoreV1TableProvider.java", "diffHunk": "@@ -39,15 +43,14 @@\n  * }</pre>\n  */\n @AutoService(TableProvider.class)\n-public class DataStoreV1TableProvider extends InMemoryMetaTableProvider {\n-\n+public class DataStoreV1TableProvider extends SchemaIOTableProviderWrapper {\n   @Override\n-  public String getTableType() {\n-    return \"datastoreV1\";\n+  public SchemaIOProvider getSchemaIOProvider() {\n+    return new DataStoreV1SchemaIOProvider();\n   }\n \n   @Override\n-  public BeamSqlTable buildBeamSqlTable(Table table) {\n-    return new DataStoreV1Table(table);\n+  public String getTableType() {\n+    return \"datastoreV1\";", "originalCommit": "6c7e2625d045b8c8289452e3801102f4fe465266", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ2MTI1Mw==", "url": "https://github.com/apache/beam/pull/12341#discussion_r466461253", "bodyText": "Done.", "author": "sclukas77", "createdAt": "2020-08-06T14:38:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI0OTI1OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI1MTI2Mg==", "url": "https://github.com/apache/beam/pull/12341#discussion_r461251262", "body": "I think you could just re-use `provider` here and in the other tests. If you're worried about re-using the same instance in all the tests you could consider initializing `provider` in an `@Before` method instead of initializing statically so that each test will get a fresh instance.", "bodyText": "I think you could just re-use provider here and in the other tests. If you're worried about re-using the same instance in all the tests you could consider initializing provider in an @Before method instead of initializing statically so that each test will get a fresh instance.", "bodyHTML": "<p dir=\"auto\">I think you could just re-use <code>provider</code> here and in the other tests. If you're worried about re-using the same instance in all the tests you could consider initializing <code>provider</code> in an <code>@Before</code> method instead of initializing statically so that each test will get a fresh instance.</p>", "author": "TheNeuralBit", "createdAt": "2020-07-28T00:44:49Z", "path": "sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/datastore/DataStoreV1SchemaIOProviderTest.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.datastore;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertThrows;\n+import static org.junit.Assert.assertTrue;\n+\n+import org.apache.beam.sdk.io.gcp.datastore.DataStoreV1SchemaIOProvider.DataStoreV1SchemaIO;\n+import org.apache.beam.sdk.schemas.Schema;\n+import org.apache.beam.sdk.schemas.io.SchemaIO;\n+import org.apache.beam.sdk.values.Row;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@RunWith(JUnit4.class)\n+public class DataStoreV1SchemaIOProviderTest {\n+  static final String DEFAULT_KEY_FIELD = \"__key__\";\n+  public static final String KEY_FIELD_PROPERTY = \"keyField\";\n+  private DataStoreV1SchemaIOProvider provider = new DataStoreV1SchemaIOProvider();\n+\n+  @Test\n+  public void testGetTableType() {\n+    assertEquals(\"datastoreV1\", provider.identifier());\n+  }\n+\n+  @Test\n+  public void testBuildBeamSqlTable() {\n+    final String location = \"projectId/batch_kind\";\n+    Row configuration = Row.withSchema(generateRowSchema()).addValue(null).build();\n+    SchemaIO schemaIO =\n+        (new DataStoreV1SchemaIOProvider()).from(location, configuration, generateDataSchema());", "originalCommit": "6c7e2625d045b8c8289452e3801102f4fe465266", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ2MTkxNw==", "url": "https://github.com/apache/beam/pull/12341#discussion_r466461917", "bodyText": "Done.", "author": "sclukas77", "createdAt": "2020-08-06T14:39:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI1MTI2Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI1MjIwMA==", "url": "https://github.com/apache/beam/pull/12341#discussion_r461252200", "body": "I think it would be better to get rid of this function and call `provider.configurationSchema()` instead.", "bodyText": "I think it would be better to get rid of this function and call provider.configurationSchema() instead.", "bodyHTML": "<p dir=\"auto\">I think it would be better to get rid of this function and call <code>provider.configurationSchema()</code> instead.</p>", "author": "TheNeuralBit", "createdAt": "2020-07-28T00:48:03Z", "path": "sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/datastore/DataStoreV1SchemaIOProviderTest.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.datastore;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertThrows;\n+import static org.junit.Assert.assertTrue;\n+\n+import org.apache.beam.sdk.io.gcp.datastore.DataStoreV1SchemaIOProvider.DataStoreV1SchemaIO;\n+import org.apache.beam.sdk.schemas.Schema;\n+import org.apache.beam.sdk.schemas.io.SchemaIO;\n+import org.apache.beam.sdk.values.Row;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@RunWith(JUnit4.class)\n+public class DataStoreV1SchemaIOProviderTest {\n+  static final String DEFAULT_KEY_FIELD = \"__key__\";\n+  public static final String KEY_FIELD_PROPERTY = \"keyField\";\n+  private DataStoreV1SchemaIOProvider provider = new DataStoreV1SchemaIOProvider();\n+\n+  @Test\n+  public void testGetTableType() {\n+    assertEquals(\"datastoreV1\", provider.identifier());\n+  }\n+\n+  @Test\n+  public void testBuildBeamSqlTable() {\n+    final String location = \"projectId/batch_kind\";\n+    Row configuration = Row.withSchema(generateRowSchema()).addValue(null).build();\n+    SchemaIO schemaIO =\n+        (new DataStoreV1SchemaIOProvider()).from(location, configuration, generateDataSchema());\n+\n+    assertNotNull(schemaIO);\n+    assertTrue(schemaIO instanceof DataStoreV1SchemaIO);\n+\n+    DataStoreV1SchemaIO dataStoreV1SchemaIO = (DataStoreV1SchemaIO) schemaIO;\n+    assertEquals(\"projectId\", dataStoreV1SchemaIO.projectId);\n+    assertEquals(\"batch_kind\", dataStoreV1SchemaIO.kind);\n+    assertEquals(DEFAULT_KEY_FIELD, dataStoreV1SchemaIO.keyField);\n+  }\n+\n+  @Test\n+  public void testTableProperty() {\n+    final String location = \"projectId/batch_kind\";\n+\n+    Row configuration = Row.withSchema(generateRowSchema()).addValue(\"field_name\").build();\n+    SchemaIO schemaIO =\n+        (new DataStoreV1SchemaIOProvider()).from(location, configuration, generateDataSchema());\n+\n+    assertNotNull(schemaIO);\n+    assertTrue(schemaIO instanceof DataStoreV1SchemaIO);\n+\n+    DataStoreV1SchemaIO dataStoreV1SchemaIO = (DataStoreV1SchemaIO) schemaIO;\n+    assertEquals(\"projectId\", dataStoreV1SchemaIO.projectId);\n+    assertEquals(\"batch_kind\", dataStoreV1SchemaIO.kind);\n+    assertEquals(\"field_name\", dataStoreV1SchemaIO.keyField);\n+  }\n+\n+  @Test\n+  public void testTableProperty_nullValue_throwsException() {\n+    final String location = \"projectId/batch_kind\";\n+    Row configuration = Row.withSchema(generateRowSchema()).addValue(\"\").build();\n+\n+    assertThrows(\n+        IllegalArgumentException.class,\n+        () ->\n+            (new DataStoreV1SchemaIOProvider())\n+                .from(location, configuration, generateDataSchema()));\n+  }\n+\n+  private static Schema generateDataSchema() {\n+    return Schema.builder()\n+        .addNullableField(\"id\", Schema.FieldType.INT32)\n+        .addNullableField(\"name\", Schema.FieldType.STRING)\n+        .build();\n+  }\n+\n+  private Schema generateRowSchema() {\n+    return Schema.builder().addNullableField(KEY_FIELD_PROPERTY, Schema.FieldType.STRING).build();\n+  }", "originalCommit": "6c7e2625d045b8c8289452e3801102f4fe465266", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ2MTc0Nw==", "url": "https://github.com/apache/beam/pull/12341#discussion_r466461747", "bodyText": "Done.", "author": "sclukas77", "createdAt": "2020-08-06T14:39:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI1MjIwMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI1MzI0NA==", "url": "https://github.com/apache/beam/pull/12341#discussion_r461253244", "body": "I think we're now preferring to use withFieldValue rather than addValue when constructing Row instances now, e.g.:\r\n`Row.withSchema(provider.configurationSchema()).withFieldValue(\"keyField\", \"field_name\")`\r\n\r\nSee the examples in Row.java: https://github.com/apache/beam/blob/956e4eb39a7fedbae05985c759284557dcc3d9ec/sdks/java/core/src/main/java/org/apache/beam/sdk/values/Row.java#L64-L74\r\n", "bodyText": "I think we're now preferring to use withFieldValue rather than addValue when constructing Row instances now, e.g.:\nRow.withSchema(provider.configurationSchema()).withFieldValue(\"keyField\", \"field_name\")\nSee the examples in Row.java: \n  \n    \n      beam/sdks/java/core/src/main/java/org/apache/beam/sdk/values/Row.java\n    \n    \n        Lines 64 to 74\n      in\n      956e4eb\n    \n    \n    \n    \n\n        \n          \n            * <p>There are several ways to build a new Row object. To build a row from scratch using a schema \n        \n\n        \n          \n            * object, {@link Row#withSchema} can be used. Schema fields can be specified by name, and nested \n        \n\n        \n          \n            * fields can be specified using the field selection syntax. For example: \n        \n\n        \n          \n            * \n        \n\n        \n          \n            * <pre>{@code \n        \n\n        \n          \n            * Row row = Row.withSchema(schema) \n        \n\n        \n          \n            *              .withFieldValue(\"userId\", \"user1) \n        \n\n        \n          \n            *              .withFieldValue(\"location.city\", \"seattle\") \n        \n\n        \n          \n            *              .withFieldValue(\"location.state\", \"wa\") \n        \n\n        \n          \n            *              .build(); \n        \n\n        \n          \n            * }</pre>", "bodyHTML": "<p dir=\"auto\">I think we're now preferring to use withFieldValue rather than addValue when constructing Row instances now, e.g.:<br>\n<code>Row.withSchema(provider.configurationSchema()).withFieldValue(\"keyField\", \"field_name\")</code></p>\n<p dir=\"auto\">See the examples in Row.java: <div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom color-bg-subtle\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/apache/beam/blob/956e4eb39a7fedbae05985c759284557dcc3d9ec/sdks/java/core/src/main/java/org/apache/beam/sdk/values/Row.java#L64-L74\">beam/sdks/java/core/src/main/java/org/apache/beam/sdk/values/Row.java</a>\n    </p>\n    <p class=\"mb-0 color-fg-muted\">\n        Lines 64 to 74\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/apache/beam/commit/956e4eb39a7fedbae05985c759284557dcc3d9ec\">956e4eb</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\" data-paste-markdown-skip=\"\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L64\" class=\"blob-num border-0 px-3 py-0 color-bg-default js-line-number\" data-line-number=\"64\"></td>\n          <td id=\"LC64\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\"> <span class=\"pl-c\"> * &lt;<span class=\"pl-ent\">p</span>&gt;There are several ways to build a new Row object. To build a row from scratch using a schema</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L65\" class=\"blob-num border-0 px-3 py-0 color-bg-default js-line-number\" data-line-number=\"65\"></td>\n          <td id=\"LC65\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\"> <span class=\"pl-c\"> * object, {<span class=\"pl-k\">@link</span> Row#withSchema} can be used. Schema fields can be specified by name, and nested</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L66\" class=\"blob-num border-0 px-3 py-0 color-bg-default js-line-number\" data-line-number=\"66\"></td>\n          <td id=\"LC66\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\"> <span class=\"pl-c\"> * fields can be specified using the field selection syntax. For example:</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L67\" class=\"blob-num border-0 px-3 py-0 color-bg-default js-line-number\" data-line-number=\"67\"></td>\n          <td id=\"LC67\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\"> <span class=\"pl-c\"> *</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L68\" class=\"blob-num border-0 px-3 py-0 color-bg-default js-line-number\" data-line-number=\"68\"></td>\n          <td id=\"LC68\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\"> <span class=\"pl-c\"> * &lt;<span class=\"pl-ent\">pre</span>&gt;{<span class=\"pl-k\">@code</span><span class=\"pl-c1\"></span></span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L69\" class=\"blob-num border-0 px-3 py-0 color-bg-default js-line-number\" data-line-number=\"69\"></td>\n          <td id=\"LC69\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\"> <span class=\"pl-c\"><span class=\"pl-c1\"> * Row row = Row.withSchema(schema)</span></span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L70\" class=\"blob-num border-0 px-3 py-0 color-bg-default js-line-number\" data-line-number=\"70\"></td>\n          <td id=\"LC70\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\"> <span class=\"pl-c\"><span class=\"pl-c1\"> *              .withFieldValue(\"userId\", \"user1)</span></span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L71\" class=\"blob-num border-0 px-3 py-0 color-bg-default js-line-number\" data-line-number=\"71\"></td>\n          <td id=\"LC71\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\"> <span class=\"pl-c\"><span class=\"pl-c1\"> *              .withFieldValue(\"location.city\", \"seattle\")</span></span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L72\" class=\"blob-num border-0 px-3 py-0 color-bg-default js-line-number\" data-line-number=\"72\"></td>\n          <td id=\"LC72\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\"> <span class=\"pl-c\"><span class=\"pl-c1\"> *              .withFieldValue(\"location.state\", \"wa\")</span></span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L73\" class=\"blob-num border-0 px-3 py-0 color-bg-default js-line-number\" data-line-number=\"73\"></td>\n          <td id=\"LC73\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\"> <span class=\"pl-c\"><span class=\"pl-c1\"> *              .build();</span></span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L74\" class=\"blob-num border-0 px-3 py-0 color-bg-default js-line-number\" data-line-number=\"74\"></td>\n          <td id=\"LC74\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\"> <span class=\"pl-c\"><span class=\"pl-c1\"> * </span>}&lt;/pre&gt;</span> </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n</p>", "author": "TheNeuralBit", "createdAt": "2020-07-28T00:51:42Z", "path": "sdks/java/io/google-cloud-platform/src/test/java/org/apache/beam/sdk/io/gcp/datastore/DataStoreV1SchemaIOProviderTest.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.datastore;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertThrows;\n+import static org.junit.Assert.assertTrue;\n+\n+import org.apache.beam.sdk.io.gcp.datastore.DataStoreV1SchemaIOProvider.DataStoreV1SchemaIO;\n+import org.apache.beam.sdk.schemas.Schema;\n+import org.apache.beam.sdk.schemas.io.SchemaIO;\n+import org.apache.beam.sdk.values.Row;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+\n+@RunWith(JUnit4.class)\n+public class DataStoreV1SchemaIOProviderTest {\n+  static final String DEFAULT_KEY_FIELD = \"__key__\";\n+  public static final String KEY_FIELD_PROPERTY = \"keyField\";\n+  private DataStoreV1SchemaIOProvider provider = new DataStoreV1SchemaIOProvider();\n+\n+  @Test\n+  public void testGetTableType() {\n+    assertEquals(\"datastoreV1\", provider.identifier());\n+  }\n+\n+  @Test\n+  public void testBuildBeamSqlTable() {\n+    final String location = \"projectId/batch_kind\";\n+    Row configuration = Row.withSchema(generateRowSchema()).addValue(null).build();\n+    SchemaIO schemaIO =\n+        (new DataStoreV1SchemaIOProvider()).from(location, configuration, generateDataSchema());\n+\n+    assertNotNull(schemaIO);\n+    assertTrue(schemaIO instanceof DataStoreV1SchemaIO);\n+\n+    DataStoreV1SchemaIO dataStoreV1SchemaIO = (DataStoreV1SchemaIO) schemaIO;\n+    assertEquals(\"projectId\", dataStoreV1SchemaIO.projectId);\n+    assertEquals(\"batch_kind\", dataStoreV1SchemaIO.kind);\n+    assertEquals(DEFAULT_KEY_FIELD, dataStoreV1SchemaIO.keyField);\n+  }\n+\n+  @Test\n+  public void testTableProperty() {\n+    final String location = \"projectId/batch_kind\";\n+\n+    Row configuration = Row.withSchema(generateRowSchema()).addValue(\"field_name\").build();", "originalCommit": "6c7e2625d045b8c8289452e3801102f4fe465266", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ2MjE0Ng==", "url": "https://github.com/apache/beam/pull/12341#discussion_r466462146", "bodyText": "Done.", "author": "sclukas77", "createdAt": "2020-08-06T14:39:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTI1MzI0NA=="}], "type": "inlineReview"}, {"oid": "e89f9eaab9cd061153f2649fe48c390d3bb24267", "url": "https://github.com/apache/beam/commit/e89f9eaab9cd061153f2649fe48c390d3bb24267", "message": "Improved DataStoreV1 tests", "committedDate": "2020-08-06T14:26:16Z", "type": "forcePushed"}, {"oid": "890b0b062b984efb2bbd687596d568b229d79d2d", "url": "https://github.com/apache/beam/commit/890b0b062b984efb2bbd687596d568b229d79d2d", "message": "Improved DataStoreV1 tests", "committedDate": "2020-08-06T14:34:26Z", "type": "forcePushed"}, {"oid": "0a5b3789a866f591904fa3ed11c21bcc11fd0224", "url": "https://github.com/apache/beam/commit/0a5b3789a866f591904fa3ed11c21bcc11fd0224", "message": "Improved DataStoreV1 tests", "committedDate": "2020-08-07T14:34:54Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ0MzcwNQ==", "url": "https://github.com/apache/beam/pull/12341#discussion_r469443705", "body": "Let's describe the configuration parameters here. Something like this (spotless probably has an opinion on how this should be formatted):\r\n```suggestion\r\n  /**\r\n   * Returns the expected schema of the configuration object. Note this is distinct from the schema\r\n   * of the data source itself.\r\n   * \r\n   * <p>Configuration Parameters:\r\n   * <ul>\r\n   *   <li>STRING keyField: The name of the Beam schema field to map the DataStore entity key. Defaults to {@code __key__} if not set or null.\r\n   * </ul>\r\n   */\r\n```", "bodyText": "Let's describe the configuration parameters here. Something like this (spotless probably has an opinion on how this should be formatted):\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              /**\n          \n          \n            \n               * Returns the expected schema of the configuration object. Note this is distinct from the schema\n          \n          \n            \n               * of the data source itself.\n          \n          \n            \n               */\n          \n          \n            \n              /**\n          \n          \n            \n               * Returns the expected schema of the configuration object. Note this is distinct from the schema\n          \n          \n            \n               * of the data source itself.\n          \n          \n            \n               * \n          \n          \n            \n               * <p>Configuration Parameters:\n          \n          \n            \n               * <ul>\n          \n          \n            \n               *   <li>STRING keyField: The name of the Beam schema field to map the DataStore entity key. Defaults to {@code __key__} if not set or null.\n          \n          \n            \n               * </ul>\n          \n          \n            \n               */", "bodyHTML": "<p dir=\"auto\">Let's describe the configuration parameters here. Something like this (spotless probably has an opinion on how this should be formatted):</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"64\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">  <span class=\"pl-c\"><span class=\"pl-c\">/**</span></span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"65\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">   <span class=\"pl-k\">*</span> <span class=\"pl-smi\">Returns</span> the expected schema of the configuration object. <span class=\"pl-smi\">Note</span> <span class=\"pl-c1\">this</span> is distinct from the schema</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"66\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">   <span class=\"pl-k\">*</span> of the data source itself.</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"67\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">   <span class=\"pl-k\">*/</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"64\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">  <span class=\"pl-c\"><span class=\"pl-c\">/**</span></span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"65\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">   <span class=\"pl-k\">*</span> <span class=\"pl-smi\">Returns</span> the expected schema of the configuration object. <span class=\"pl-smi\">Note</span> <span class=\"pl-c1\">this</span> is distinct from the schema</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"66\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">   <span class=\"pl-k\">*</span> of the data source itself.</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"67\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">   <span class=\"pl-k\">*</span> </td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"68\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">   <span class=\"pl-k\">*</span> <span class=\"pl-k\">&lt;</span>p<span class=\"pl-k\">&gt;</span><span class=\"pl-smi\">Configuration</span> <span class=\"pl-smi\">Parameters</span><span class=\"pl-k\">:</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"69\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">   <span class=\"pl-k\">*</span> <span class=\"pl-k\">&lt;</span>ul<span class=\"pl-k\">&gt;</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"70\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">   <span class=\"pl-k\">*</span>   <span class=\"pl-k\">&lt;</span>li<span class=\"pl-k\">&gt;</span><span class=\"pl-c1\">STRING</span> keyField<span class=\"pl-k\">:</span> <span class=\"pl-smi\">The</span> name of the <span class=\"pl-smi\">Beam</span> schema field to map the <span class=\"pl-smi\">DataStore</span> entity key. <span class=\"pl-smi\">Defaults</span> to {<span class=\"pl-k\">@code</span> __key__} <span class=\"pl-k\">if</span> not set or <span class=\"pl-c1\">null</span>.</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"71\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">   <span class=\"pl-k\">*</span> <span class=\"pl-k\">&lt;</span><span class=\"pl-k\">/</span>ul<span class=\"pl-k\">&gt;</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"72\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">   <span class=\"pl-k\">*/</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "TheNeuralBit", "createdAt": "2020-08-12T18:03:15Z", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/datastore/DataStoreV1SchemaIOProvider.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.datastore;\n+\n+import com.google.auto.service.AutoService;\n+import com.google.datastore.v1.Query;\n+import java.io.Serializable;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import org.apache.beam.sdk.annotations.Internal;\n+import org.apache.beam.sdk.schemas.Schema;\n+import org.apache.beam.sdk.schemas.io.InvalidConfigurationException;\n+import org.apache.beam.sdk.schemas.io.InvalidLocationException;\n+import org.apache.beam.sdk.schemas.io.SchemaIO;\n+import org.apache.beam.sdk.schemas.io.SchemaIOProvider;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.values.PBegin;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.POutput;\n+import org.apache.beam.sdk.values.Row;\n+\n+/**\n+ * An implementation of {@link SchemaIOProvider} for reading and writing payloads with {@link\n+ * DatastoreIO}.\n+ */\n+@Internal\n+@AutoService(SchemaIOProvider.class)\n+public class DataStoreV1SchemaIOProvider implements SchemaIOProvider {\n+  public static final String KEY_FIELD_PROPERTY = \"keyField\";\n+  static final String DEFAULT_KEY_FIELD = \"__key__\";\n+  private static final Pattern locationPattern = Pattern.compile(\"(?<projectId>.+)/(?<kind>.+)\");\n+\n+  /** Returns an id that uniquely represents this IO. */\n+  @Override\n+  public String identifier() {\n+    return \"datastoreV1\";\n+  }\n+\n+  /**\n+   * Returns the expected schema of the configuration object. Note this is distinct from the schema\n+   * of the data source itself.\n+   */", "originalCommit": "0a5b3789a866f591904fa3ed11c21bcc11fd0224", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY2MDk0NQ==", "url": "https://github.com/apache/beam/pull/12341#discussion_r470660945", "bodyText": "Done.", "author": "sclukas77", "createdAt": "2020-08-14T14:33:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ0MzcwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ1ODMyNg==", "url": "https://github.com/apache/beam/pull/12341#discussion_r469458326", "body": "I don't think this new method is actually called anywhere. Should it be called from `SchemaIOTableWrapper#getTableStatistics`?\r\n\r\n It might also be good to just get rid of the other `getTableStatistics` and move the default implementation to this one.", "bodyText": "I don't think this new method is actually called anywhere. Should it be called from SchemaIOTableWrapper#getTableStatistics?\nIt might also be good to just get rid of the other getTableStatistics and move the default implementation to this one.", "bodyHTML": "<p dir=\"auto\">I don't think this new method is actually called anywhere. Should it be called from <code>SchemaIOTableWrapper#getTableStatistics</code>?</p>\n<p dir=\"auto\">It might also be good to just get rid of the other <code>getTableStatistics</code> and move the default implementation to this one.</p>", "author": "TheNeuralBit", "createdAt": "2020-08-12T18:29:24Z", "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/meta/provider/SchemaIOTableProviderWrapper.java", "diffHunk": "@@ -80,13 +80,17 @@ public BeamSqlTable buildBeamSqlTable(Table tableDefinition) {\n     }\n   }\n \n-  private BeamTableStatistics getTableStatistics(PipelineOptions options) {\n+  public BeamTableStatistics getTableStatistics(PipelineOptions options) {\n     if (isBounded().equals(PCollection.IsBounded.BOUNDED)) {\n       return BeamTableStatistics.BOUNDED_UNKNOWN;\n     }\n     return BeamTableStatistics.UNBOUNDED_UNKNOWN;\n   }\n \n+  public BeamTableStatistics getTableStatistics(PipelineOptions options, SchemaIO schemaIO) {\n+    return getTableStatistics(options);\n+  }\n+", "originalCommit": "0a5b3789a866f591904fa3ed11c21bcc11fd0224", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk3Mzg3Nw==", "url": "https://github.com/apache/beam/pull/12341#discussion_r469973877", "bodyText": "The reason why I added this additional getTableStatistics() function was that DataStoreV1 is the first IO whose getTableStatistics() function relied on the schemaIO data, and this SchemaIOTableWrapper#getTableStatistics function could be overridden in DataStoreV1TableProvider. The other IOs so far have not required the schemaIO. Do you think we should get rid of the other getTableStatistics() function and always require a schemaIO, even when the schemaIO isn't absolutely necessary? Or support both cases?", "author": "sclukas77", "createdAt": "2020-08-13T14:01:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ1ODMyNg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY2MzUxOQ==", "url": "https://github.com/apache/beam/pull/12341#discussion_r470663519", "bodyText": "I see what you mean now. I got rid of the old getTableStatistics() function and moved the default implementation to this one.", "author": "sclukas77", "createdAt": "2020-08-14T14:38:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ1ODMyNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ2MDQyOQ==", "url": "https://github.com/apache/beam/pull/12341#discussion_r469460429", "body": "```suggestion\r\n                + \"` should of type `BYTES`. Please change the type or specify a field to\"\r\n```\r\nLet's change this to the Beam schema type name", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            + \"` should of type `VARBINARY`. Please change the type or specify a field to\"\n          \n          \n            \n                            + \"` should of type `BYTES`. Please change the type or specify a field to\"\n          \n      \n    \n    \n  \n\nLet's change this to the Beam schema type name", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>` should of type `<span class=\"x x-first x-last\">VARBINARY</span>`. Please change the type or specify a field to<span class=\"pl-pds\">\"</span></span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>` should of type `<span class=\"x x-first x-last\">BYTES</span>`. Please change the type or specify a field to<span class=\"pl-pds\">\"</span></span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">Let's change this to the Beam schema type name</p>", "author": "TheNeuralBit", "createdAt": "2020-08-12T18:33:07Z", "path": "sdks/java/io/google-cloud-platform/src/main/java/org/apache/beam/sdk/io/gcp/datastore/EntityToRow.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.sdk.io.gcp.datastore;\n+\n+import static com.google.datastore.v1.client.DatastoreHelper.makeValue;\n+\n+import com.google.datastore.v1.Entity;\n+import com.google.datastore.v1.Value;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import org.apache.beam.sdk.schemas.Schema;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.PTransform;\n+import org.apache.beam.sdk.transforms.ParDo;\n+import org.apache.beam.sdk.values.PCollection;\n+import org.apache.beam.sdk.values.Row;\n+import org.apache.beam.vendor.guava.v26_0_jre.com.google.common.collect.ImmutableMap;\n+import org.joda.time.Instant;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/** A {@code PTransform} to perform a conversion of {@link Entity} to {@link Row}. */\n+public class EntityToRow extends PTransform<PCollection<Entity>, PCollection<Row>> {\n+  private final Schema schema;\n+  private final String keyField;\n+  private static final Logger LOG = LoggerFactory.getLogger(DataStoreV1SchemaIOProvider.class);\n+\n+  private EntityToRow(Schema schema, String keyField) {\n+    this.schema = schema;\n+    this.keyField = keyField;\n+\n+    if (schema.getFieldNames().contains(keyField)) {\n+      if (!schema.getField(keyField).getType().getTypeName().equals(Schema.TypeName.BYTES)) {\n+        throw new IllegalStateException(\n+            \"Field `\"\n+                + keyField\n+                + \"` should of type `VARBINARY`. Please change the type or specify a field to\"", "originalCommit": "0a5b3789a866f591904fa3ed11c21bcc11fd0224", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDY2MTE5OA==", "url": "https://github.com/apache/beam/pull/12341#discussion_r470661198", "bodyText": "Done.", "author": "sclukas77", "createdAt": "2020-08-14T14:34:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ2MDQyOQ=="}], "type": "inlineReview"}, {"oid": "63e3b3d12d56e583dd5c04e7bfbcd826ec5603d5", "url": "https://github.com/apache/beam/commit/63e3b3d12d56e583dd5c04e7bfbcd826ec5603d5", "message": "Modified SchemaIOTableProviderWrapper#getTableStatistics", "committedDate": "2020-08-14T14:29:23Z", "type": "commit"}, {"oid": "63e3b3d12d56e583dd5c04e7bfbcd826ec5603d5", "url": "https://github.com/apache/beam/commit/63e3b3d12d56e583dd5c04e7bfbcd826ec5603d5", "message": "Modified SchemaIOTableProviderWrapper#getTableStatistics", "committedDate": "2020-08-14T14:29:23Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkwMzk0Nw==", "url": "https://github.com/apache/beam/pull/12341#discussion_r470903947", "body": "nit: I think this just needs to be protected so that implementors can override\r\n```suggestion\r\n  protected BeamTableStatistics getTableStatistics(PipelineOptions options, SchemaIO schemaIO) {\r\n```", "bodyText": "nit: I think this just needs to be protected so that implementors can override\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              public BeamTableStatistics getTableStatistics(PipelineOptions options, SchemaIO schemaIO) {\n          \n          \n            \n              protected BeamTableStatistics getTableStatistics(PipelineOptions options, SchemaIO schemaIO) {", "bodyHTML": "<p dir=\"auto\">nit: I think this just needs to be protected so that implementors can override</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">  <span class=\"pl-k x x-first x-last\">public</span> <span class=\"pl-smi\">BeamTableStatistics</span> getTableStatistics(<span class=\"pl-smi\">PipelineOptions</span> options, <span class=\"pl-smi\">SchemaIO</span> schemaIO) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">  <span class=\"pl-k x x-first x-last\">protected</span> <span class=\"pl-smi\">BeamTableStatistics</span> getTableStatistics(<span class=\"pl-smi\">PipelineOptions</span> options, <span class=\"pl-smi\">SchemaIO</span> schemaIO) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "TheNeuralBit", "createdAt": "2020-08-14T23:29:12Z", "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/meta/provider/SchemaIOTableProviderWrapper.java", "diffHunk": "@@ -80,7 +80,7 @@ public BeamSqlTable buildBeamSqlTable(Table tableDefinition) {\n     }\n   }\n \n-  private BeamTableStatistics getTableStatistics(PipelineOptions options) {\n+  public BeamTableStatistics getTableStatistics(PipelineOptions options, SchemaIO schemaIO) {", "originalCommit": "63e3b3d12d56e583dd5c04e7bfbcd826ec5603d5", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "adf1deabdcb4a68666c6eef67ffb55d3d485a1bb", "url": "https://github.com/apache/beam/commit/adf1deabdcb4a68666c6eef67ffb55d3d485a1bb", "message": "Update sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/meta/provider/SchemaIOTableProviderWrapper.java", "committedDate": "2020-08-14T23:31:21Z", "type": "commit"}]}