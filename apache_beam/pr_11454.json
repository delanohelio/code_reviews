{"pr_number": 11454, "pr_title": "[BEAM-8871] Support trySplit for ByteKeyRangeTracker", "pr_author": "boyuanzz", "pr_createdAt": "2020-04-17T21:19:53Z", "pr_url": "https://github.com/apache/beam/pull/11454", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ3NjAxOA==", "url": "https://github.com/apache/beam/pull/11454#discussion_r410476018", "body": "This is taken from https://github.com/apache/beam/blob/master/sdks/java/core/src/test/java/org/apache/beam/sdk/io/range/ByteKeyRangeTest.java#L365-L382", "bodyText": "This is taken from https://github.com/apache/beam/blob/master/sdks/java/core/src/test/java/org/apache/beam/sdk/io/range/ByteKeyRangeTest.java#L365-L382", "bodyHTML": "<p dir=\"auto\">This is taken from <a href=\"https://github.com/apache/beam/blob/master/sdks/java/core/src/test/java/org/apache/beam/sdk/io/range/ByteKeyRangeTest.java#L365-L382\">https://github.com/apache/beam/blob/master/sdks/java/core/src/test/java/org/apache/beam/sdk/io/range/ByteKeyRangeTest.java#L365-L382</a></p>", "author": "boyuanzz", "createdAt": "2020-04-17T21:21:30Z", "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/transforms/splittabledofn/ByteKeyRangeTrackerTest.java", "diffHunk": "@@ -287,4 +318,30 @@ public void testBacklogPartiallyCompleted() {\n     tracker.tryClaim(ByteKey.of(0xa0));\n     assertThat(tracker.getSize(), allOf(greaterThan(0.), lessThan(1.)));\n   }\n+\n+  /** Asserts the two ByteKey are equal except trailing zeros. */\n+  private static void assertByteKeyEqualExceptPadding(ByteKey expected, ByteKey key) {", "originalCommit": "ab5444cdb8606ae98fc9bef52ccfa03de943743f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDU5NDA1Ng==", "url": "https://github.com/apache/beam/pull/11454#discussion_r410594056", "bodyText": "Make that method public and call it from this test since they are both in the same module.", "author": "lukecwik", "createdAt": "2020-04-18T03:41:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ3NjAxOA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ3OTg1NA==", "url": "https://github.com/apache/beam/pull/11454#discussion_r410479854", "body": "Should this method then be `@Nullable`  and/or in the parent class?", "bodyText": "Should this method then be @Nullable  and/or in the parent class?", "bodyHTML": "<p dir=\"auto\">Should this method then be <code>@Nullable</code>  and/or in the parent class?</p>", "author": "iemejia", "createdAt": "2020-04-17T21:31:41Z", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/splittabledofn/ByteKeyRangeTracker.java", "diffHunk": "@@ -64,31 +64,38 @@ public ByteKeyRange currentRestriction() {\n \n   @Override\n   public SplitResult<ByteKeyRange> trySplit(double fractionOfRemainder) {\n-    // TODO(BEAM-8871): Add support for splitting off a fixed amount of work for this restriction\n-    // instead of only supporting checkpointing.\n-\n-    // If we haven't done any work, we should return the original range we were processing\n-    // as the checkpoint.\n-    if (lastAttemptedKey == null) {\n-      ByteKeyRange rval = range;\n-      // We update our current range to an interval that contains no elements.\n-      range = NO_KEYS;\n-      return SplitResult.of(range, rval);\n+    // No split on an empty range.\n+    if (NO_KEYS.equals(range)) {\n+      return null;", "originalCommit": "ab5444cdb8606ae98fc9bef52ccfa03de943743f", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ4NzI4Mw==", "url": "https://github.com/apache/beam/pull/11454#discussion_r410487283", "bodyText": "It should be in the parent class.\n@robertwb was going to take a look at fixing up the docs and method signatures to ensure that null, None, nil were allowed and what they meant under certain scenarios.", "author": "lukecwik", "createdAt": "2020-04-17T21:51:19Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ3OTg1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ5MzA3MA==", "url": "https://github.com/apache/beam/pull/11454#discussion_r410493070", "bodyText": "I can update  java RestrictionTracker within this PR if that's preferable.", "author": "boyuanzz", "createdAt": "2020-04-17T22:07:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ3OTg1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDU5NDMxMw==", "url": "https://github.com/apache/beam/pull/11454#discussion_r410594313", "bodyText": "That works for me.", "author": "lukecwik", "createdAt": "2020-04-18T03:42:15Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ3OTg1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY2Mjg2Mw==", "url": "https://github.com/apache/beam/pull/11454#discussion_r410662863", "bodyText": "I am ok with null but couldn't we have modelled this with something Option type friendly like UnsplittableResult maybe with a isSplittable() method to resolve the case difference?", "author": "iemejia", "createdAt": "2020-04-18T07:33:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ3OTg1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUwOTQzMA==", "url": "https://github.com/apache/beam/pull/11454#discussion_r411509430", "bodyText": "Since restriction trackers return RestrictionT, we could only do this if we updated the trySplit method to return SplitResult<RestrictionT> where SplitResult would be something like Optional.\nThat could be useful if we wanted to plumb the failure reason for the split back to the runner.", "author": "lukecwik", "createdAt": "2020-04-20T16:15:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ3OTg1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUzODExMg==", "url": "https://github.com/apache/beam/pull/11454#discussion_r411538112", "bodyText": "The trySplit has returned SplitResult<RestrictionT> as result. If we want the runner understand the failure reason, we also need to create a set of well known literals. If just for logging purpose, we can also log the msg at SDK level.", "author": "boyuanzz", "createdAt": "2020-04-20T16:56:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ3OTg1NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQxMjg5OA==", "url": "https://github.com/apache/beam/pull/11454#discussion_r413412898", "bodyText": "Semantically, what we want to return here is the empty split. It is important that the infrastructure be able to recognize and empty split (of type RestrictionT) so that it won't try to further split/reschedule it. One could create a new SplitResult type for Java, but I'm unconvinced it's worth its weight. (Certainly None/nil feel more appropriate for Python and Go respectively.)", "author": "robertwb", "createdAt": "2020-04-22T23:59:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ3OTg1NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ4MDgzNA==", "url": "https://github.com/apache/beam/pull/11454#discussion_r410480834", "body": "s/starKey/startKey", "bodyText": "s/starKey/startKey", "bodyHTML": "<p dir=\"auto\">s/starKey/startKey</p>", "author": "iemejia", "createdAt": "2020-04-17T21:34:21Z", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/io/range/ByteKeyRange.java", "diffHunk": "@@ -218,6 +218,10 @@ public double estimateFractionForKey(ByteKey key) {\n   public ByteKey interpolateKey(double fraction) {\n     checkArgument(\n         fraction >= 0.0 && fraction < 1.0, \"Fraction %s must be in the range [0, 1)\", fraction);\n+    // Return starKey when fraction is 0 in order to avoid adding trailing zeros during computation.", "originalCommit": "ab5444cdb8606ae98fc9bef52ccfa03de943743f", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "a4aa88616399273d0b0e9d6d59be79ad256208ce", "url": "https://github.com/apache/beam/commit/a4aa88616399273d0b0e9d6d59be79ad256208ce", "message": "Update trySplit logic to treat checkpoint specially.", "committedDate": "2020-04-17T22:54:35Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDU5MjAzOQ==", "url": "https://github.com/apache/beam/pull/11454#discussion_r410592039", "body": "```suggestion\r\n   * position. Each claimed position MUST be a valid split point.\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * position. Each claimed position should be a valid split point.\n          \n          \n            \n               * position. Each claimed position MUST be a valid split point.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">   <span class=\"pl-k\">*</span> position. <span class=\"pl-smi\">Each</span> claimed position <span class=\"x x-first x-last\">should</span> be a valid split point.</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">   <span class=\"pl-k\">*</span> position. <span class=\"pl-smi\">Each</span> claimed position <span class=\"pl-c1 x x-first x-last\">MUST</span> be a valid split point.</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "lukecwik", "createdAt": "2020-04-18T03:36:40Z", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/splittabledofn/RestrictionTracker.java", "diffHunk": "@@ -29,7 +30,7 @@\n public abstract class RestrictionTracker<RestrictionT, PositionT> {\n   /**\n    * Attempts to claim the block of work in the current restriction identified by the given\n-   * position.\n+   * position. Each claimed position should be a valid split point.", "originalCommit": "13cfe2eec07bf133ba3cd53636bbca5e3b9b4295", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDU5MzU2Ng==", "url": "https://github.com/apache/beam/pull/11454#discussion_r410593566", "body": "We should make it clear that a checkpoint must return a valid split result or null where null represents that there is no residual.", "bodyText": "We should make it clear that a checkpoint must return a valid split result or null where null represents that there is no residual.", "bodyHTML": "<p dir=\"auto\">We should make it clear that a checkpoint must return a valid split result or null where null represents that there is no residual.</p>", "author": "lukecwik", "createdAt": "2020-04-18T03:40:22Z", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/splittabledofn/RestrictionTracker.java", "diffHunk": "@@ -80,6 +81,7 @@\n    *     represent based upon the current known remaining amount of work.\n    * @return a {@link SplitResult} if a split was possible, otherwise returns {@code null}.", "originalCommit": "13cfe2eec07bf133ba3cd53636bbca5e3b9b4295", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAyMzE4Ng==", "url": "https://github.com/apache/beam/pull/11454#discussion_r414023186", "body": "or startKey == endKey", "bodyText": "or startKey == endKey", "bodyHTML": "<p dir=\"auto\">or startKey == endKey</p>", "author": "lukecwik", "createdAt": "2020-04-23T18:22:50Z", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/splittabledofn/ByteKeyRangeTracker.java", "diffHunk": "@@ -64,31 +64,56 @@ public ByteKeyRange currentRestriction() {\n \n   @Override\n   public SplitResult<ByteKeyRange> trySplit(double fractionOfRemainder) {\n-    // TODO(BEAM-8871): Add support for splitting off a fixed amount of work for this restriction\n-    // instead of only supporting checkpointing.\n+    // No split on an empty range.\n+    if (NO_KEYS.equals(range)) {", "originalCommit": "54cf62fb0bb060005ffaa196c543743b321e3279", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA3NDMzMw==", "url": "https://github.com/apache/beam/pull/11454#discussion_r414074333", "bodyText": "I think the major question is about startKey == endKey or NO_KEYS. There are 2 options in my mind:\n\nUse startKey == endKey and NO_KEYS to represent an empty key range.\nOnly use NO_KEYS as a notion of empty key range. In order to do this, we need to change the current range to NO_KEYS after checkpointing if necessary.\nI chose option 2 as my current implementation, that's why I only exam NO_KEYS in tryClaim and checkDone.\n\nWhat do you think?", "author": "boyuanzz", "createdAt": "2020-04-23T19:43:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAyMzE4Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA4MTYzMg==", "url": "https://github.com/apache/beam/pull/11454#discussion_r414081632", "bodyText": "A user can still create a restriction where startkey == endkey, have no tryClaim calls and be checkpointed which is why we need to support both cases.", "author": "lukecwik", "createdAt": "2020-04-23T19:55:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAyMzE4Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAzNDg5MQ==", "url": "https://github.com/apache/beam/pull/11454#discussion_r414034891", "body": "We should return `[startKey, startKey)` as the primary unless `startKey` is `\"\"` and then we should return `NO_KEYS`", "bodyText": "We should return [startKey, startKey) as the primary unless startKey is \"\" and then we should return NO_KEYS", "bodyHTML": "<p dir=\"auto\">We should return <code>[startKey, startKey)</code> as the primary unless <code>startKey</code> is <code>\"\"</code> and then we should return <code>NO_KEYS</code></p>", "author": "lukecwik", "createdAt": "2020-04-23T18:40:17Z", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/splittabledofn/ByteKeyRangeTracker.java", "diffHunk": "@@ -64,31 +64,56 @@ public ByteKeyRange currentRestriction() {\n \n   @Override\n   public SplitResult<ByteKeyRange> trySplit(double fractionOfRemainder) {\n-    // TODO(BEAM-8871): Add support for splitting off a fixed amount of work for this restriction\n-    // instead of only supporting checkpointing.\n+    // No split on an empty range.\n+    if (NO_KEYS.equals(range)) {\n+      return null;\n+    }\n+    // There is no more remaining work after the entire range has been claimed.\n+    if (lastAttemptedKey != null && lastAttemptedKey.isEmpty()) {\n+      return null;\n+    }\n \n-    // If we haven't done any work, we should return the original range we were processing\n-    // as the checkpoint.\n-    if (lastAttemptedKey == null) {\n-      ByteKeyRange rval = range;\n-      // We update our current range to an interval that contains no elements.\n-      range = NO_KEYS;\n-      return SplitResult.of(range, rval);\n+    ByteKey startKey = (lastAttemptedKey == null) ? range.getStartKey() : next(lastAttemptedKey);\n+    ByteKey endKey = range.getEndKey();\n+    // There is no more space for split.\n+    if (!endKey.isEmpty() && startKey.compareTo(endKey) >= 0) {\n+      return null;\n     }\n \n-    // Return an empty range if the current range is done.\n-    if (lastAttemptedKey.isEmpty()\n-        || !(range.getEndKey().isEmpty() || range.getEndKey().compareTo(lastAttemptedKey) > 0)) {\n-      return SplitResult.of(range, NO_KEYS);\n+    // Treat checkpoint specially because {@link ByteKeyRange#interpolateKey} computes a key with\n+    // trailing zeros when fraction is 0.\n+    if (fractionOfRemainder == 0.0) {\n+      // If we haven't done any work, we should return the original range we were processing\n+      // as the checkpoint.\n+      if (lastAttemptedKey == null) {\n+        // We update our current range to an interval that contains no elements.\n+        ByteKeyRange rval = range;\n+        range = NO_KEYS;", "originalCommit": "54cf62fb0bb060005ffaa196c543743b321e3279", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAzODEyMA==", "url": "https://github.com/apache/beam/pull/11454#discussion_r414038120", "body": "I would get rid of this local variable since its not being computed and is always range.getEndKey(). We can see that it doesn't add value since you use range.getEndKey() and not endKey below.", "bodyText": "I would get rid of this local variable since its not being computed and is always range.getEndKey(). We can see that it doesn't add value since you use range.getEndKey() and not endKey below.", "bodyHTML": "<p dir=\"auto\">I would get rid of this local variable since its not being computed and is always range.getEndKey(). We can see that it doesn't add value since you use range.getEndKey() and not endKey below.</p>", "author": "lukecwik", "createdAt": "2020-04-23T18:45:22Z", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/splittabledofn/ByteKeyRangeTracker.java", "diffHunk": "@@ -64,31 +64,56 @@ public ByteKeyRange currentRestriction() {\n \n   @Override\n   public SplitResult<ByteKeyRange> trySplit(double fractionOfRemainder) {\n-    // TODO(BEAM-8871): Add support for splitting off a fixed amount of work for this restriction\n-    // instead of only supporting checkpointing.\n+    // No split on an empty range.\n+    if (NO_KEYS.equals(range)) {\n+      return null;\n+    }\n+    // There is no more remaining work after the entire range has been claimed.\n+    if (lastAttemptedKey != null && lastAttemptedKey.isEmpty()) {\n+      return null;\n+    }\n \n-    // If we haven't done any work, we should return the original range we were processing\n-    // as the checkpoint.\n-    if (lastAttemptedKey == null) {\n-      ByteKeyRange rval = range;\n-      // We update our current range to an interval that contains no elements.\n-      range = NO_KEYS;\n-      return SplitResult.of(range, rval);\n+    ByteKey startKey = (lastAttemptedKey == null) ? range.getStartKey() : next(lastAttemptedKey);\n+    ByteKey endKey = range.getEndKey();", "originalCommit": "54cf62fb0bb060005ffaa196c543743b321e3279", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA5ODQ4OQ==", "url": "https://github.com/apache/beam/pull/11454#discussion_r414098489", "bodyText": "When there is a split, the range is updated first before constructing residual. Thus stashing endKey is needed unless we create another local var to stash residual.", "author": "boyuanzz", "createdAt": "2020-04-23T20:23:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAzODEyMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDEwMTcyMg==", "url": "https://github.com/apache/beam/pull/11454#discussion_r414101722", "bodyText": "I see. Thanks", "author": "lukecwik", "createdAt": "2020-04-23T20:28:47Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAzODEyMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAzODI3Ng==", "url": "https://github.com/apache/beam/pull/11454#discussion_r414038276", "body": "startKey -> unprocessedRangeStartKey", "bodyText": "startKey -> unprocessedRangeStartKey", "bodyHTML": "<p dir=\"auto\">startKey -&gt; unprocessedRangeStartKey</p>", "author": "lukecwik", "createdAt": "2020-04-23T18:45:36Z", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/splittabledofn/ByteKeyRangeTracker.java", "diffHunk": "@@ -64,31 +64,56 @@ public ByteKeyRange currentRestriction() {\n \n   @Override\n   public SplitResult<ByteKeyRange> trySplit(double fractionOfRemainder) {\n-    // TODO(BEAM-8871): Add support for splitting off a fixed amount of work for this restriction\n-    // instead of only supporting checkpointing.\n+    // No split on an empty range.\n+    if (NO_KEYS.equals(range)) {\n+      return null;\n+    }\n+    // There is no more remaining work after the entire range has been claimed.\n+    if (lastAttemptedKey != null && lastAttemptedKey.isEmpty()) {\n+      return null;\n+    }\n \n-    // If we haven't done any work, we should return the original range we were processing\n-    // as the checkpoint.\n-    if (lastAttemptedKey == null) {\n-      ByteKeyRange rval = range;\n-      // We update our current range to an interval that contains no elements.\n-      range = NO_KEYS;\n-      return SplitResult.of(range, rval);\n+    ByteKey startKey = (lastAttemptedKey == null) ? range.getStartKey() : next(lastAttemptedKey);", "originalCommit": "54cf62fb0bb060005ffaa196c543743b321e3279", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAzOTQ3MA==", "url": "https://github.com/apache/beam/pull/11454#discussion_r414039470", "body": "compare whether splitPos >= range.getEndKey()", "bodyText": "compare whether splitPos >= range.getEndKey()", "bodyHTML": "<p dir=\"auto\">compare whether splitPos &gt;= range.getEndKey()</p>", "author": "lukecwik", "createdAt": "2020-04-23T18:47:30Z", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/splittabledofn/ByteKeyRangeTracker.java", "diffHunk": "@@ -64,31 +64,56 @@ public ByteKeyRange currentRestriction() {\n \n   @Override\n   public SplitResult<ByteKeyRange> trySplit(double fractionOfRemainder) {\n-    // TODO(BEAM-8871): Add support for splitting off a fixed amount of work for this restriction\n-    // instead of only supporting checkpointing.\n+    // No split on an empty range.\n+    if (NO_KEYS.equals(range)) {\n+      return null;\n+    }\n+    // There is no more remaining work after the entire range has been claimed.\n+    if (lastAttemptedKey != null && lastAttemptedKey.isEmpty()) {\n+      return null;\n+    }\n \n-    // If we haven't done any work, we should return the original range we were processing\n-    // as the checkpoint.\n-    if (lastAttemptedKey == null) {\n-      ByteKeyRange rval = range;\n-      // We update our current range to an interval that contains no elements.\n-      range = NO_KEYS;\n-      return SplitResult.of(range, rval);\n+    ByteKey startKey = (lastAttemptedKey == null) ? range.getStartKey() : next(lastAttemptedKey);\n+    ByteKey endKey = range.getEndKey();\n+    // There is no more space for split.\n+    if (!endKey.isEmpty() && startKey.compareTo(endKey) >= 0) {\n+      return null;\n     }\n \n-    // Return an empty range if the current range is done.\n-    if (lastAttemptedKey.isEmpty()\n-        || !(range.getEndKey().isEmpty() || range.getEndKey().compareTo(lastAttemptedKey) > 0)) {\n-      return SplitResult.of(range, NO_KEYS);\n+    // Treat checkpoint specially because {@link ByteKeyRange#interpolateKey} computes a key with\n+    // trailing zeros when fraction is 0.\n+    if (fractionOfRemainder == 0.0) {\n+      // If we haven't done any work, we should return the original range we were processing\n+      // as the checkpoint.\n+      if (lastAttemptedKey == null) {\n+        // We update our current range to an interval that contains no elements.\n+        ByteKeyRange rval = range;\n+        range = NO_KEYS;\n+        return SplitResult.of(range, rval);\n+      } else {\n+        range = ByteKeyRange.of(range.getStartKey(), startKey);\n+        return SplitResult.of(range, ByteKeyRange.of(startKey, endKey));\n+      }\n     }\n \n-    // Otherwise we compute the \"remainder\" of the range from the last key.\n-    assert lastAttemptedKey.equals(lastClaimedKey)\n-        : \"Expect both keys to be equal since the last key attempted was a valid key in the range.\";\n-    ByteKey nextKey = next(lastAttemptedKey);\n-    ByteKeyRange res = ByteKeyRange.of(nextKey, range.getEndKey());\n-    this.range = ByteKeyRange.of(range.getStartKey(), nextKey);\n-    return SplitResult.of(range, res);\n+    ByteKeyRange unprocessedRange = ByteKeyRange.of(startKey, range.getEndKey());\n+    ByteKey splitPos;\n+    try {\n+      // The interpolateKey shouldn't return empty key. Please refer to {@link\n+      // ByteKeyRange#interpolateKey}.\n+      splitPos = unprocessedRange.interpolateKey(fractionOfRemainder);\n+      checkState(!splitPos.isEmpty());\n+    } catch (Exception e) {\n+      // There is no way to interpolate a key based on provided fraction.\n+      return null;\n+    }\n+    // Computed splitPos is out of current tracking restriction.\n+    if (!range.getEndKey().isEmpty() && splitPos.equals(range.getEndKey())) {", "originalCommit": "54cf62fb0bb060005ffaa196c543743b321e3279", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAzOTczMg==", "url": "https://github.com/apache/beam/pull/11454#discussion_r414039732", "body": "We should cover the case where start == end at the NO_KEYS check at the top since it would be valid to be done and not have attempted anything because of how checkpoint is implemented.", "bodyText": "We should cover the case where start == end at the NO_KEYS check at the top since it would be valid to be done and not have attempted anything because of how checkpoint is implemented.", "bodyHTML": "<p dir=\"auto\">We should cover the case where start == end at the NO_KEYS check at the top since it would be valid to be done and not have attempted anything because of how checkpoint is implemented.</p>", "author": "lukecwik", "createdAt": "2020-04-23T18:47:55Z", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/splittabledofn/ByteKeyRangeTracker.java", "diffHunk": "@@ -156,6 +181,11 @@ public void checkDone() throws IllegalStateException {\n       return;", "originalCommit": "54cf62fb0bb060005ffaa196c543743b321e3279", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA0Mjc1OQ==", "url": "https://github.com/apache/beam/pull/11454#discussion_r414042759", "body": "```suggestion\r\n   * @return a {@link SplitResult} if a split was possible, otherwise returns {@code null}. If the {@code fractionOfRemainder == 0}, a {@code null} result MUST imply that the restriction tracker is done and there is no more work left to do.\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * @return a {@link SplitResult} if a split was possible, otherwise returns {@code null}. A\n          \n          \n            \n               *     checkpoint(fractionOfRemainder == 0) must either return a valid split result or null which\n          \n          \n            \n               *     means there is no more left work.\n          \n          \n            \n               * @return a {@link SplitResult} if a split was possible, otherwise returns {@code null}. If the {@code fractionOfRemainder == 0}, a {@code null} result MUST imply that the restriction tracker is done and there is no more work left to do.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">   <span class=\"pl-k\">*</span> <span class=\"pl-k\">@return</span> a {<span class=\"pl-k\">@link</span> <span class=\"pl-smi\">SplitResult</span>} <span class=\"pl-k\">if</span> a split was possible, otherwise returns {<span class=\"pl-k\">@code</span> <span class=\"pl-c1\">null</span>}<span class=\"pl-c1\">.</span> <span class=\"pl-smi\">A</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">   <span class=\"pl-k\">*</span>     checkpoint(fractionOfRemainder <span class=\"pl-k\">==</span> <span class=\"pl-c1\">0</span>) must either <span class=\"pl-k\">return</span> a valid split result or <span class=\"pl-c1\">null</span> which</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">   <span class=\"pl-k\">*</span>     means there is no more left work.</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">   <span class=\"pl-k\">*</span> <span class=\"pl-k\">@return</span> a {<span class=\"pl-k\">@link</span> <span class=\"pl-smi\">SplitResult</span>} <span class=\"pl-k\">if</span> a split was possible, otherwise returns {<span class=\"pl-k\">@code</span> <span class=\"pl-c1\">null</span>}<span class=\"pl-c1\">.</span> <span class=\"pl-smi\">If</span> the {<span class=\"pl-k\">@code</span> fractionOfRemainder <span class=\"pl-k\">==</span> <span class=\"pl-c1\">0</span>}, a {<span class=\"pl-k\">@code</span> <span class=\"pl-c1\">null</span>} result <span class=\"pl-c1\">MUST</span> imply that the restriction tracker is done and there is no more work left to <span class=\"pl-k\">do</span>.</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "lukecwik", "createdAt": "2020-04-23T18:52:26Z", "path": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/splittabledofn/RestrictionTracker.java", "diffHunk": "@@ -78,8 +79,11 @@\n    *\n    * @param fractionOfRemainder A hint as to the fraction of work the primary restriction should\n    *     represent based upon the current known remaining amount of work.\n-   * @return a {@link SplitResult} if a split was possible, otherwise returns {@code null}.\n+   * @return a {@link SplitResult} if a split was possible, otherwise returns {@code null}. A\n+   *     checkpoint(fractionOfRemainder == 0) must either return a valid split result or null which\n+   *     means there is no more left work.", "originalCommit": "54cf62fb0bb060005ffaa196c543743b321e3279", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA0NDAxNg==", "url": "https://github.com/apache/beam/pull/11454#discussion_r414044016", "body": "Add a tryClaim test for empty ranges covering NO_KEYS and when startKey == endKey", "bodyText": "Add a tryClaim test for empty ranges covering NO_KEYS and when startKey == endKey", "bodyHTML": "<p dir=\"auto\">Add a tryClaim test for empty ranges covering NO_KEYS and when startKey == endKey</p>", "author": "lukecwik", "createdAt": "2020-04-23T18:54:27Z", "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/transforms/splittabledofn/ByteKeyRangeTrackerTest.java", "diffHunk": "@@ -50,6 +52,7 @@ public void testTryClaim() throws Exception {\n     assertTrue(tracker.tryClaim(ByteKey.of(0x50)));\n     assertTrue(tracker.tryClaim(ByteKey.of(0x99)));\n     assertFalse(tracker.tryClaim(ByteKey.of(0xc0)));\n+    tracker.checkDone();\n   }\n ", "originalCommit": "54cf62fb0bb060005ffaa196c543743b321e3279", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA0ODAzMg==", "url": "https://github.com/apache/beam/pull/11454#discussion_r414048032", "body": "Why is the primary here 0x00 for the start key and not ByteKey.EMPTY?", "bodyText": "Why is the primary here 0x00 for the start key and not ByteKey.EMPTY?", "bodyHTML": "<p dir=\"auto\">Why is the primary here 0x00 for the start key and not ByteKey.EMPTY?</p>", "author": "lukecwik", "createdAt": "2020-04-23T19:00:38Z", "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/transforms/splittabledofn/ByteKeyRangeTrackerTest.java", "diffHunk": "@@ -152,9 +158,35 @@ public void testCheckpointAfterLastUsingEmptyKey() throws Exception {\n     assertTrue(tracker.tryClaim(ByteKey.of(0x90)));\n     assertTrue(tracker.tryClaim(ByteKey.of(0xa0)));\n     assertFalse(tracker.tryClaim(ByteKey.EMPTY));\n-    ByteKeyRange checkpoint = tracker.trySplit(0).getResidual();\n+    assertNull(tracker.trySplit(0));\n     assertEquals(ByteKeyRange.of(ByteKey.of(0x10), ByteKey.of(0xc0)), tracker.currentRestriction());\n-    assertEquals(ByteKeyRangeTracker.NO_KEYS, checkpoint);\n+    tracker.checkDone();\n+  }\n+\n+  @Test\n+  public void testTrySplit() throws Exception {\n+    ByteKeyRangeTracker tracker =\n+        ByteKeyRangeTracker.of(ByteKeyRange.of(ByteKey.EMPTY, ByteKey.of(0x80)));\n+    SplitResult<ByteKeyRange> res = tracker.trySplit(0.5);\n+    assertKeyRangeEqualExceptPadding(\n+        ByteKeyRange.of(ByteKey.EMPTY, ByteKey.of(0x40)), res.getPrimary());\n+    assertKeyRangeEqualExceptPadding(\n+        ByteKeyRange.of(ByteKey.of(0x40), ByteKey.of(0x80)), res.getResidual());\n+    tracker.tryClaim(ByteKey.of(0x00));\n+    res = tracker.trySplit(0.5);\n+    assertKeyRangeEqualExceptPadding(\n+        ByteKeyRange.of(ByteKey.of(0x00), ByteKey.of(0x20)), res.getPrimary());", "originalCommit": "54cf62fb0bb060005ffaa196c543743b321e3279", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDExNjA2MA==", "url": "https://github.com/apache/beam/pull/11454#discussion_r414116060", "bodyText": "It should be EMPTY. Thanks for catching this!", "author": "boyuanzz", "createdAt": "2020-04-23T20:52:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA0ODAzMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA0ODIyNQ==", "url": "https://github.com/apache/beam/pull/11454#discussion_r414048225", "body": "Start with the ALL_KEYS range.", "bodyText": "Start with the ALL_KEYS range.", "bodyHTML": "<p dir=\"auto\">Start with the ALL_KEYS range.</p>", "author": "lukecwik", "createdAt": "2020-04-23T19:00:57Z", "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/transforms/splittabledofn/ByteKeyRangeTrackerTest.java", "diffHunk": "@@ -152,9 +158,35 @@ public void testCheckpointAfterLastUsingEmptyKey() throws Exception {\n     assertTrue(tracker.tryClaim(ByteKey.of(0x90)));\n     assertTrue(tracker.tryClaim(ByteKey.of(0xa0)));\n     assertFalse(tracker.tryClaim(ByteKey.EMPTY));\n-    ByteKeyRange checkpoint = tracker.trySplit(0).getResidual();\n+    assertNull(tracker.trySplit(0));\n     assertEquals(ByteKeyRange.of(ByteKey.of(0x10), ByteKey.of(0xc0)), tracker.currentRestriction());\n-    assertEquals(ByteKeyRangeTracker.NO_KEYS, checkpoint);\n+    tracker.checkDone();\n+  }\n+\n+  @Test\n+  public void testTrySplit() throws Exception {\n+    ByteKeyRangeTracker tracker =\n+        ByteKeyRangeTracker.of(ByteKeyRange.of(ByteKey.EMPTY, ByteKey.of(0x80)));", "originalCommit": "54cf62fb0bb060005ffaa196c543743b321e3279", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDA0ODk1Ng==", "url": "https://github.com/apache/beam/pull/11454#discussion_r414048956", "body": "Cover the case where startKey == endKey and also add a call for trySplit at 0.5", "bodyText": "Cover the case where startKey == endKey and also add a call for trySplit at 0.5", "bodyHTML": "<p dir=\"auto\">Cover the case where startKey == endKey and also add a call for trySplit at 0.5</p>", "author": "lukecwik", "createdAt": "2020-04-23T19:02:00Z", "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/transforms/splittabledofn/ByteKeyRangeTrackerTest.java", "diffHunk": "@@ -152,9 +158,35 @@ public void testCheckpointAfterLastUsingEmptyKey() throws Exception {\n     assertTrue(tracker.tryClaim(ByteKey.of(0x90)));\n     assertTrue(tracker.tryClaim(ByteKey.of(0xa0)));\n     assertFalse(tracker.tryClaim(ByteKey.EMPTY));\n-    ByteKeyRange checkpoint = tracker.trySplit(0).getResidual();\n+    assertNull(tracker.trySplit(0));\n     assertEquals(ByteKeyRange.of(ByteKey.of(0x10), ByteKey.of(0xc0)), tracker.currentRestriction());\n-    assertEquals(ByteKeyRangeTracker.NO_KEYS, checkpoint);\n+    tracker.checkDone();\n+  }\n+\n+  @Test\n+  public void testTrySplit() throws Exception {\n+    ByteKeyRangeTracker tracker =\n+        ByteKeyRangeTracker.of(ByteKeyRange.of(ByteKey.EMPTY, ByteKey.of(0x80)));\n+    SplitResult<ByteKeyRange> res = tracker.trySplit(0.5);\n+    assertKeyRangeEqualExceptPadding(\n+        ByteKeyRange.of(ByteKey.EMPTY, ByteKey.of(0x40)), res.getPrimary());\n+    assertKeyRangeEqualExceptPadding(\n+        ByteKeyRange.of(ByteKey.of(0x40), ByteKey.of(0x80)), res.getResidual());\n+    tracker.tryClaim(ByteKey.of(0x00));\n+    res = tracker.trySplit(0.5);\n+    assertKeyRangeEqualExceptPadding(\n+        ByteKeyRange.of(ByteKey.of(0x00), ByteKey.of(0x20)), res.getPrimary());\n+    assertKeyRangeEqualExceptPadding(\n+        ByteKeyRange.of(ByteKey.of(0x20), ByteKey.of(0x40)), res.getResidual());\n+    assertNull(tracker.trySplit(1));\n+  }\n+\n+  @Test\n+  public void testTrySplitAtEmptyRange() throws Exception {\n+    ByteKeyRangeTracker tracker = ByteKeyRangeTracker.of(ByteKeyRangeTracker.NO_KEYS);", "originalCommit": "54cf62fb0bb060005ffaa196c543743b321e3279", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "6e0bdbde1a177db22ea6081c11082cd3c9759fdc", "url": "https://github.com/apache/beam/commit/6e0bdbde1a177db22ea6081c11082cd3c9759fdc", "message": "[BEAM-8871] Support trySplit for ByteKeyRangeTracker", "committedDate": "2020-04-23T21:31:01Z", "type": "forcePushed"}, {"oid": "89958d8311b7225be51f3d86f03cb58581279372", "url": "https://github.com/apache/beam/commit/89958d8311b7225be51f3d86f03cb58581279372", "message": "[BEAM-8871] Support trySplit for ByteKeyRangeTracker", "committedDate": "2020-04-23T21:38:17Z", "type": "commit"}, {"oid": "89958d8311b7225be51f3d86f03cb58581279372", "url": "https://github.com/apache/beam/commit/89958d8311b7225be51f3d86f03cb58581279372", "message": "[BEAM-8871] Support trySplit for ByteKeyRangeTracker", "committedDate": "2020-04-23T21:38:17Z", "type": "forcePushed"}]}