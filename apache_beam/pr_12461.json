{"pr_number": 12461, "pr_title": "[BEAM-10633] UdfImpl hits NPE when returns a List", "pr_author": "amaliujia", "pr_createdAt": "2020-08-04T03:18:59Z", "pr_url": "https://github.com/apache/beam/pull/12461", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI4ODE1MQ==", "url": "https://github.com/apache/beam/pull/12461#discussion_r465288151", "body": "```suggestion\r\n      return typeFactory.createArrayType(collectionElementType, UNLIMITED_ARRAY_SIZE);\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  return typeFactory.createArrayType(collectionElementType, -1L);\n          \n          \n            \n                  return typeFactory.createArrayType(collectionElementType, UNLIMITED_ARRAY_SIZE);", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">      <span class=\"pl-k\">return</span> typeFactory<span class=\"pl-k\">.</span>createArrayType(collectionElementType, <span class=\"pl-k x x-first\">-</span><span class=\"pl-c1 x x-last\">1L</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">      <span class=\"pl-k\">return</span> typeFactory<span class=\"pl-k\">.</span>createArrayType(collectionElementType, <span class=\"pl-c1 x x-first x-last\">UNLIMITED_ARRAY_SIZE</span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "ibzib", "createdAt": "2020-08-04T19:42:51Z", "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/utils/CalciteUtils.java", "diffHunk": "@@ -285,16 +286,23 @@ private static RelDataType toRelDataType(\n    * SQL-Java type mapping, with specified Beam rules: <br>\n    * 1. redirect {@link AbstractInstant} to {@link Date} so Calcite can recognize it.\n    *\n-   * @param rawType\n+   * @param type\n    * @return\n    */\n-  public static RelDataType sqlTypeWithAutoCast(RelDataTypeFactory typeFactory, Type rawType) {\n+  public static RelDataType sqlTypeWithAutoCast(RelDataTypeFactory typeFactory, Type type) {\n     // For Joda time types, return SQL type for java.util.Date.\n-    if (rawType instanceof Class && AbstractInstant.class.isAssignableFrom((Class<?>) rawType)) {\n+    if (type instanceof Class && AbstractInstant.class.isAssignableFrom((Class<?>) type)) {\n       return typeFactory.createJavaType(Date.class);\n-    } else if (rawType instanceof Class && ByteString.class.isAssignableFrom((Class<?>) rawType)) {\n+    } else if (type instanceof Class && ByteString.class.isAssignableFrom((Class<?>) type)) {\n       return typeFactory.createJavaType(byte[].class);\n+    } else if (type instanceof ParameterizedType\n+        && java.util.List.class.isAssignableFrom(\n+            (Class<?>) ((ParameterizedType) type).getRawType())) {\n+      ParameterizedType parameterizedType = (ParameterizedType) type;\n+      Class<?> genericType = (Class<?>) parameterizedType.getActualTypeArguments()[0];\n+      RelDataType collectionElementType = typeFactory.createJavaType(genericType);\n+      return typeFactory.createArrayType(collectionElementType, -1L);", "originalCommit": "a67df53674db67dad4aa1d9798abeb2701766eba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM0MTI5Nw==", "url": "https://github.com/apache/beam/pull/12461#discussion_r465341297", "bodyText": "Nice catch! Made the suggested change.", "author": "amaliujia", "createdAt": "2020-08-04T21:29:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI4ODE1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI4ODY0Nw==", "url": "https://github.com/apache/beam/pull/12461#discussion_r465288647", "body": "We should probably update this comment to explain how/why ByteString and List are special cases.", "bodyText": "We should probably update this comment to explain how/why ByteString and List are special cases.", "bodyHTML": "<p dir=\"auto\">We should probably update this comment to explain how/why ByteString and List are special cases.</p>", "author": "ibzib", "createdAt": "2020-08-04T19:43:53Z", "path": "sdks/java/extensions/sql/src/main/java/org/apache/beam/sdk/extensions/sql/impl/utils/CalciteUtils.java", "diffHunk": "@@ -285,16 +286,23 @@ private static RelDataType toRelDataType(\n    * SQL-Java type mapping, with specified Beam rules: <br>\n    * 1. redirect {@link AbstractInstant} to {@link Date} so Calcite can recognize it.", "originalCommit": "a67df53674db67dad4aa1d9798abeb2701766eba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM0MTU3OA==", "url": "https://github.com/apache/beam/pull/12461#discussion_r465341578", "bodyText": "I updated the List case. The ByteString case wasn't added by me so I don't have context around it.", "author": "amaliujia", "createdAt": "2020-08-04T21:30:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI4ODY0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI4OTY5OQ==", "url": "https://github.com/apache/beam/pull/12461#discussion_r465289699", "body": "Nit: why are row1, sql1, etc. variable names numbered when there's only one of each?", "bodyText": "Nit: why are row1, sql1, etc. variable names numbered when there's only one of each?", "bodyHTML": "<p dir=\"auto\">Nit: why are row1, sql1, etc. variable names numbered when there's only one of each?</p>", "author": "ibzib", "createdAt": "2020-08-04T19:45:57Z", "path": "sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/BeamSqlDslUdfUdafTest.java", "diffHunk": "@@ -101,6 +103,21 @@ public void testJodaTimeUdfUdaf() throws Exception {\n     pipeline.run().waitUntilFinish();\n   }\n \n+  @Test\n+  public void testListUdf() throws Exception {\n+    Schema resultType = Schema.builder().addArrayField(\"array_field\", FieldType.INT64).build();\n+\n+    Row row1 = Row.withSchema(resultType).addValue(Arrays.asList(1L)).build();", "originalCommit": "a67df53674db67dad4aa1d9798abeb2701766eba", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM0MTE0Nw==", "url": "https://github.com/apache/beam/pull/12461#discussion_r465341147", "bodyText": "Done", "author": "amaliujia", "createdAt": "2020-08-04T21:29:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTI4OTY5OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwMDE2Nw==", "url": "https://github.com/apache/beam/pull/12461#discussion_r465400167", "body": "We should separate this into two modular test cases, one with a UDF that takes an array as an argument (e.g. the length function), and one with a UDF that returns an array (e.g. array constructor, like your previous test).", "bodyText": "We should separate this into two modular test cases, one with a UDF that takes an array as an argument (e.g. the length function), and one with a UDF that returns an array (e.g. array constructor, like your previous test).", "bodyHTML": "<p dir=\"auto\">We should separate this into two modular test cases, one with a UDF that takes an array as an argument (e.g. the length function), and one with a UDF that returns an array (e.g. array constructor, like your previous test).</p>", "author": "ibzib", "createdAt": "2020-08-05T00:17:53Z", "path": "sdks/java/extensions/sql/src/test/java/org/apache/beam/sdk/extensions/sql/BeamSqlDslUdfUdafTest.java", "diffHunk": "@@ -101,6 +104,21 @@ public void testJodaTimeUdfUdaf() throws Exception {\n     pipeline.run().waitUntilFinish();\n   }\n \n+  @Test\n+  public void testListUdf() throws Exception {", "originalCommit": "b6043a981f950242b8c144ba34bf00acbc0bcbda", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQ0OTk4Nw==", "url": "https://github.com/apache/beam/pull/12461#discussion_r465449987", "bodyText": "Done.", "author": "amaliujia", "createdAt": "2020-08-05T03:27:59Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwMDE2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYxNTA0Ng==", "url": "https://github.com/apache/beam/pull/12461#discussion_r466615046", "bodyText": "The tests LGTM, but we should separate the two blocks into separate @Test methods. That way we can easily tell if one case fails but the other succeeds. And it keeps the tests smaller and easier to read.", "author": "ibzib", "createdAt": "2020-08-06T18:45:50Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwMDE2Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYxOTMwOA==", "url": "https://github.com/apache/beam/pull/12461#discussion_r466619308", "bodyText": "I'm fine with doing this in a follow up PR, since the other tests in this class follow the same pattern.", "author": "ibzib", "createdAt": "2020-08-06T18:53:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTQwMDE2Nw=="}], "type": "inlineReview"}, {"oid": "ab1c53fa878f10b72f73e463064f651ea01cee42", "url": "https://github.com/apache/beam/commit/ab1c53fa878f10b72f73e463064f651ea01cee42", "message": "[BEAM-10633] UdfImpl should be able to return java.util.List.", "committedDate": "2020-08-05T03:26:26Z", "type": "commit"}, {"oid": "ab1c53fa878f10b72f73e463064f651ea01cee42", "url": "https://github.com/apache/beam/commit/ab1c53fa878f10b72f73e463064f651ea01cee42", "message": "[BEAM-10633] UdfImpl should be able to return java.util.List.", "committedDate": "2020-08-05T03:26:26Z", "type": "forcePushed"}]}