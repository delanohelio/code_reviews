{"pr_number": 12287, "pr_title": "[BEAM-10341] Support drain in Java SDK", "pr_author": "boyuanzz", "pr_createdAt": "2020-07-16T23:48:15Z", "pr_url": "https://github.com/apache/beam/pull/12287", "timeline": [{"oid": "698401cf055a0069ff2a91432d996dc7fd82a719", "url": "https://github.com/apache/beam/commit/698401cf055a0069ff2a91432d996dc7fd82a719", "message": "Insert TruncateSizedRestriction when pipeline starts to drain.", "committedDate": "2020-07-16T23:18:58Z", "type": "commit"}, {"oid": "024047196c317b58cc45d34874b9ad7fa0d0068c", "url": "https://github.com/apache/beam/commit/024047196c317b58cc45d34874b9ad7fa0d0068c", "message": "Address latest comments.", "committedDate": "2020-07-16T23:46:38Z", "type": "commit"}, {"oid": "047bed7303f7ec6b1ad6cb5db1a8ab68091638c1", "url": "https://github.com/apache/beam/commit/047bed7303f7ec6b1ad6cb5db1a8ab68091638c1", "message": "SpotlessApply", "committedDate": "2020-07-16T23:52:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE1NDY1NA==", "url": "https://github.com/apache/beam/pull/12287#discussion_r456154654", "body": "This should only handle splits if the mainOutputConsumers has only one value.", "bodyText": "This should only handle splits if the mainOutputConsumers has only one value.", "bodyHTML": "<p dir=\"auto\">This should only handle splits if the mainOutputConsumers has only one value.</p>", "author": "lukecwik", "createdAt": "2020-07-17T00:40:27Z", "path": "sdks/java/harness/src/main/java/org/apache/beam/fn/harness/FnApiDoFnRunner.java", "diffHunk": "@@ -488,90 +493,77 @@\n             || (doFnSignature.getSize() != null && doFnSignature.getSize().observesWindow())\n             || !sideInputMapping.isEmpty()) {\n           mainInputConsumer = this::processElementForWindowObservingSplitRestriction;\n-          // OutputT == RestrictionT\n           this.processContext =\n-              new WindowObservingProcessBundleContext() {\n-                @Override\n-                public void outputWithTimestamp(OutputT output, Instant timestamp) {\n-                  double size =\n-                      doFnInvoker.invokeGetSize(\n-                          new DelegatingArgumentProvider<InputT, OutputT>(\n-                              this,\n-                              PTransformTranslation.SPLITTABLE_SPLIT_AND_SIZE_RESTRICTIONS_URN\n-                                  + \"/GetSize\") {\n-                            @Override\n-                            public Object restriction() {\n-                              return output;\n-                            }\n-\n-                            @Override\n-                            public Instant timestamp(DoFn<InputT, OutputT> doFn) {\n-                              return timestamp;\n-                            }\n-\n-                            @Override\n-                            public RestrictionTracker<?, ?> restrictionTracker() {\n-                              return doFnInvoker.invokeNewTracker(this);\n-                            }\n-                          });\n-\n-                  outputTo(\n-                      mainOutputConsumers,\n-                      (WindowedValue<OutputT>)\n-                          WindowedValue.of(\n-                              KV.of(\n-                                  KV.of(\n-                                      currentElement.getValue(),\n-                                      KV.of(output, currentWatermarkEstimatorState)),\n-                                  size),\n-                              timestamp,\n-                              currentWindow,\n-                              currentElement.getPane()));\n-                }\n-              };\n+              new SizedRestrictionWindowObservingProcessBundleContext(\n+                  PTransformTranslation.SPLITTABLE_SPLIT_AND_SIZE_RESTRICTIONS_URN);\n+\n         } else {\n           mainInputConsumer = this::processElementForSplitRestriction;\n-          // OutputT == RestrictionT\n           this.processContext =\n-              new NonWindowObservingProcessBundleContext() {\n-                @Override\n-                public void outputWithTimestamp(OutputT output, Instant timestamp) {\n-                  double size =\n-                      doFnInvoker.invokeGetSize(\n-                          new DelegatingArgumentProvider<InputT, OutputT>(\n-                              this,\n-                              PTransformTranslation.SPLITTABLE_SPLIT_AND_SIZE_RESTRICTIONS_URN\n-                                  + \"/GetSize\") {\n-                            @Override\n-                            public Object restriction() {\n-                              return output;\n-                            }\n-\n-                            @Override\n-                            public Instant timestamp(DoFn<InputT, OutputT> doFn) {\n-                              return timestamp;\n-                            }\n-\n-                            @Override\n-                            public RestrictionTracker<?, ?> restrictionTracker() {\n-                              return doFnInvoker.invokeNewTracker(this);\n-                            }\n-                          });\n-\n-                  outputTo(\n-                      mainOutputConsumers,\n-                      (WindowedValue<OutputT>)\n-                          WindowedValue.of(\n-                              KV.of(\n-                                  KV.of(\n-                                      currentElement.getValue(),\n-                                      KV.of(output, currentWatermarkEstimatorState)),\n-                                  size),\n-                              timestamp,\n-                              currentElement.getWindows(),\n-                              currentElement.getPane()));\n-                }\n-              };\n+              new SizedRestrictionNonWindowObservingProcessBundleContext(\n+                  PTransformTranslation.SPLITTABLE_SPLIT_AND_SIZE_RESTRICTIONS_URN);\n+        }\n+        break;\n+      case PTransformTranslation.SPLITTABLE_TRUNCATE_SIZED_RESTRICTION_URN:\n+        if ((doFnSignature.truncateRestriction() != null\n+                && doFnSignature.truncateRestriction().observesWindow())\n+            || (doFnSignature.newTracker() != null && doFnSignature.newTracker().observesWindow())\n+            || (doFnSignature.getSize() != null && doFnSignature.getSize().observesWindow())\n+            || !sideInputMapping.isEmpty()) {\n+          if (Iterables.get(mainOutputConsumers, 0) instanceof HandlesSplits) {", "originalCommit": "047bed7303f7ec6b1ad6cb5db1a8ab68091638c1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE1NDc4Mg==", "url": "https://github.com/apache/beam/pull/12287#discussion_r456154782", "body": "ditto for handling splits if there is only one output consumer", "bodyText": "ditto for handling splits if there is only one output consumer", "bodyHTML": "<p dir=\"auto\">ditto for handling splits if there is only one output consumer</p>", "author": "lukecwik", "createdAt": "2020-07-17T00:41:01Z", "path": "sdks/java/harness/src/main/java/org/apache/beam/fn/harness/FnApiDoFnRunner.java", "diffHunk": "@@ -488,90 +493,77 @@\n             || (doFnSignature.getSize() != null && doFnSignature.getSize().observesWindow())\n             || !sideInputMapping.isEmpty()) {\n           mainInputConsumer = this::processElementForWindowObservingSplitRestriction;\n-          // OutputT == RestrictionT\n           this.processContext =\n-              new WindowObservingProcessBundleContext() {\n-                @Override\n-                public void outputWithTimestamp(OutputT output, Instant timestamp) {\n-                  double size =\n-                      doFnInvoker.invokeGetSize(\n-                          new DelegatingArgumentProvider<InputT, OutputT>(\n-                              this,\n-                              PTransformTranslation.SPLITTABLE_SPLIT_AND_SIZE_RESTRICTIONS_URN\n-                                  + \"/GetSize\") {\n-                            @Override\n-                            public Object restriction() {\n-                              return output;\n-                            }\n-\n-                            @Override\n-                            public Instant timestamp(DoFn<InputT, OutputT> doFn) {\n-                              return timestamp;\n-                            }\n-\n-                            @Override\n-                            public RestrictionTracker<?, ?> restrictionTracker() {\n-                              return doFnInvoker.invokeNewTracker(this);\n-                            }\n-                          });\n-\n-                  outputTo(\n-                      mainOutputConsumers,\n-                      (WindowedValue<OutputT>)\n-                          WindowedValue.of(\n-                              KV.of(\n-                                  KV.of(\n-                                      currentElement.getValue(),\n-                                      KV.of(output, currentWatermarkEstimatorState)),\n-                                  size),\n-                              timestamp,\n-                              currentWindow,\n-                              currentElement.getPane()));\n-                }\n-              };\n+              new SizedRestrictionWindowObservingProcessBundleContext(\n+                  PTransformTranslation.SPLITTABLE_SPLIT_AND_SIZE_RESTRICTIONS_URN);\n+\n         } else {\n           mainInputConsumer = this::processElementForSplitRestriction;\n-          // OutputT == RestrictionT\n           this.processContext =\n-              new NonWindowObservingProcessBundleContext() {\n-                @Override\n-                public void outputWithTimestamp(OutputT output, Instant timestamp) {\n-                  double size =\n-                      doFnInvoker.invokeGetSize(\n-                          new DelegatingArgumentProvider<InputT, OutputT>(\n-                              this,\n-                              PTransformTranslation.SPLITTABLE_SPLIT_AND_SIZE_RESTRICTIONS_URN\n-                                  + \"/GetSize\") {\n-                            @Override\n-                            public Object restriction() {\n-                              return output;\n-                            }\n-\n-                            @Override\n-                            public Instant timestamp(DoFn<InputT, OutputT> doFn) {\n-                              return timestamp;\n-                            }\n-\n-                            @Override\n-                            public RestrictionTracker<?, ?> restrictionTracker() {\n-                              return doFnInvoker.invokeNewTracker(this);\n-                            }\n-                          });\n-\n-                  outputTo(\n-                      mainOutputConsumers,\n-                      (WindowedValue<OutputT>)\n-                          WindowedValue.of(\n-                              KV.of(\n-                                  KV.of(\n-                                      currentElement.getValue(),\n-                                      KV.of(output, currentWatermarkEstimatorState)),\n-                                  size),\n-                              timestamp,\n-                              currentElement.getWindows(),\n-                              currentElement.getPane()));\n-                }\n-              };\n+              new SizedRestrictionNonWindowObservingProcessBundleContext(\n+                  PTransformTranslation.SPLITTABLE_SPLIT_AND_SIZE_RESTRICTIONS_URN);\n+        }\n+        break;\n+      case PTransformTranslation.SPLITTABLE_TRUNCATE_SIZED_RESTRICTION_URN:\n+        if ((doFnSignature.truncateRestriction() != null\n+                && doFnSignature.truncateRestriction().observesWindow())\n+            || (doFnSignature.newTracker() != null && doFnSignature.newTracker().observesWindow())\n+            || (doFnSignature.getSize() != null && doFnSignature.getSize().observesWindow())\n+            || !sideInputMapping.isEmpty()) {\n+          if (Iterables.get(mainOutputConsumers, 0) instanceof HandlesSplits) {\n+            mainInputConsumer =\n+                new SplittableFnDataReceiver() {\n+                  @Override\n+                  public void accept(WindowedValue input) throws Exception {\n+                    processElementForWindowObservingTruncateRestriction(input);\n+                  }\n+\n+                  // TODO(BEAM-10303): Split should work with window observing optimization.\n+                  @Override\n+                  public SplitResult trySplit(double fractionOfRemainder) {\n+                    return null;\n+                  }\n+\n+                  // TODO(BEAM-10303): Progress should work with window observing optimization.\n+                  @Override\n+                  public double getProgress() {\n+                    return 0;\n+                  }\n+                };\n+          } else {\n+            mainInputConsumer = this::processElementForWindowObservingTruncateRestriction;\n+          }\n+          this.processContext =\n+              new SizedRestrictionWindowObservingProcessBundleContext(\n+                  PTransformTranslation.SPLITTABLE_TRUNCATE_SIZED_RESTRICTION_URN);\n+        } else {\n+          if (Iterables.get(mainOutputConsumers, 0) instanceof HandlesSplits) {", "originalCommit": "047bed7303f7ec6b1ad6cb5db1a8ab68091638c1", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "280e33d3cd5222869eabe9192c6b46548dd8a460", "url": "https://github.com/apache/beam/commit/280e33d3cd5222869eabe9192c6b46548dd8a460", "message": "Fix java build.", "committedDate": "2020-07-17T02:46:45Z", "type": "commit"}, {"oid": "cf02dad217048a21f2527d4eed7bcf07331caec1", "url": "https://github.com/apache/beam/commit/cf02dad217048a21f2527d4eed7bcf07331caec1", "message": "spotlessApply", "committedDate": "2020-07-17T02:59:28Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE5MzUyOA==", "url": "https://github.com/apache/beam/pull/12287#discussion_r456193528", "body": "```suggestion\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               *\n          \n          \n            \n               * .", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"90\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">   <span class=\"pl-k\">*</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"91\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">   <span class=\"pl-k\">*</span> <span class=\"pl-c1\">.</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "lukecwik", "createdAt": "2020-07-17T03:09:26Z", "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/graph/SplittableParDoExpander.java", "diffHunk": "@@ -69,6 +69,31 @@ public static TransformReplacement createSizedReplacement() {\n     return SizedReplacement.INSTANCE;\n   }\n \n+  /**\n+   * Returns a transform replacement in drain mode which expands a splittable ParDo from:\n+   *\n+   * <pre>{@code\n+   * sideInputA ---------\\\n+   * sideInputB ---------V\n+   * mainInput ---> SplittableParDo --> outputA\n+   *                                \\-> outputB\n+   * }</pre>\n+   *\n+   * into:\n+   *\n+   * <pre>{@code\n+   * sideInputA ---------\\---------------------\\----------------------\\--------------------------\\\n+   * sideInputB ---------V---------------------V----------------------V--------------------------V\n+   * mainInput ---> PairWithRestriction --> SplitAndSize --> TruncateAndSize --> ProcessSizedElementsAndRestriction --> outputA\n+   *                                                                                                                \\-> outputB\n+   * }</pre>\n+   *\n+   * .", "originalCommit": "cf02dad217048a21f2527d4eed7bcf07331caec1", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE5NjY4Ng==", "url": "https://github.com/apache/beam/pull/12287#discussion_r456196686", "bodyText": "This required by checkstyleMain: The first sentence should be ended with a period.", "author": "boyuanzz", "createdAt": "2020-07-17T03:22:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE5MzUyOA=="}], "type": "inlineReview"}, {"oid": "9b66b72a32b3068236c8a9f0da2b8085b1a2e4db", "url": "https://github.com/apache/beam/commit/9b66b72a32b3068236c8a9f0da2b8085b1a2e4db", "message": "Only forward split/progress when the only consumer is splittable.", "committedDate": "2020-07-17T03:37:06Z", "type": "commit"}]}