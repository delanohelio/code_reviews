{"pr_number": 11598, "pr_title": "[BEAM-9877] Estimate sizes of group-by-key values behind a key lazily only.", "pr_author": "tudorm", "pr_createdAt": "2020-05-04T03:22:55Z", "pr_url": "https://github.com/apache/beam/pull/11598", "timeline": [{"oid": "573289a8a8bcf19db9ff489bbd804eb0e3c02379", "url": "https://github.com/apache/beam/commit/573289a8a8bcf19db9ff489bbd804eb0e3c02379", "message": "Do not attempt to estimate sizes of group-by-key values behind a key; such iterables can have enormous sizes and size estimates would cause reading the data multiple times.  Furthermore, the size of the entire group-by-key collection is already known precisely at read time (and encoded into corresponding counters), which means the estimation is in fact not only expensive but redundant and unnecessary.", "committedDate": "2020-05-04T02:56:40Z", "type": "commit"}, {"oid": "0cd43d16a907719048f722f16c7b37c846912dc5", "url": "https://github.com/apache/beam/commit/0cd43d16a907719048f722f16c7b37c846912dc5", "message": "remove comments", "committedDate": "2020-05-04T15:23:22Z", "type": "commit"}, {"oid": "497cd0302ddf04fefd83363d6cf6192b41fc937b", "url": "https://github.com/apache/beam/commit/497cd0302ddf04fefd83363d6cf6192b41fc937b", "message": "Make BatchGroupAlsoByWindowViaIteratorsFn extend the ElementByteSizeObservableIterable so that size estimation is lazy", "committedDate": "2020-05-04T17:17:51Z", "type": "commit"}, {"oid": "33091d223c5ea6811d97d919ea48251315ed6432", "url": "https://github.com/apache/beam/commit/33091d223c5ea6811d97d919ea48251315ed6432", "message": "Make BatchGroupAlsoByWindowViaIteratorsFn extend the ElementByteSizeObservableIterable so that size estimation is lazy", "committedDate": "2020-05-04T17:19:00Z", "type": "commit"}, {"oid": "62e4df74ff76f308353bf3049c097a3a3d288bcd", "url": "https://github.com/apache/beam/commit/62e4df74ff76f308353bf3049c097a3a3d288bcd", "message": "revert changes to grouping shuffle reader and iterable like coder", "committedDate": "2020-05-04T17:23:26Z", "type": "commit"}, {"oid": "fc180dd97b4311df3db20186dd747aeff1325b2a", "url": "https://github.com/apache/beam/commit/fc180dd97b4311df3db20186dd747aeff1325b2a", "message": "fix merge conflicts", "committedDate": "2020-05-04T17:26:53Z", "type": "commit"}, {"oid": "dd9ab00aab02e20f6b19b57436b815fc372acee9", "url": "https://github.com/apache/beam/commit/dd9ab00aab02e20f6b19b57436b815fc372acee9", "message": "remove obsolete class", "committedDate": "2020-05-04T17:28:38Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY0OTE3NA==", "url": "https://github.com/apache/beam/pull/11598#discussion_r419649174", "body": "It's odd that `ElementByteSizeObservableIterable::iterator` adds observers within the method body. I assume this is for historic reasons, since it doesn't seem to do anything now, and the comment documenting references a `setObserver` method that doesn't exist. Anyway, your change looks fine. But we should consider cleaning this up.\r\n\r\nhttps://github.com/apache/beam/blob/6453e859badcb629ae2528b77d84235b7291ff89/sdks/java/core/src/main/java/org/apache/beam/sdk/util/common/ElementByteSizeObservableIterable.java#L49-L61", "bodyText": "It's odd that ElementByteSizeObservableIterable::iterator adds observers within the method body. I assume this is for historic reasons, since it doesn't seem to do anything now, and the comment documenting references a setObserver method that doesn't exist. Anyway, your change looks fine. But we should consider cleaning this up.\n\n  \n    \n      beam/sdks/java/core/src/main/java/org/apache/beam/sdk/util/common/ElementByteSizeObservableIterable.java\n    \n    \n        Lines 49 to 61\n      in\n      6453e85\n    \n    \n    \n    \n\n        \n          \n             /** \n        \n\n        \n          \n              * Returns a new iterator for this iterable. If an observer was set in a previous call to \n        \n\n        \n          \n              * setObserver(), it will observe the iterator returned. \n        \n\n        \n          \n              */ \n        \n\n        \n          \n             @Override \n        \n\n        \n          \n             public InputT iterator() { \n        \n\n        \n          \n               InputT iterator = createIterator(); \n        \n\n        \n          \n               for (Observer observer : observers) { \n        \n\n        \n          \n                 iterator.addObserver(observer); \n        \n\n        \n          \n               } \n        \n\n        \n          \n               observers.clear(); \n        \n\n        \n          \n               return iterator; \n        \n\n        \n          \n             }", "bodyHTML": "<p dir=\"auto\">It's odd that <code>ElementByteSizeObservableIterable::iterator</code> adds observers within the method body. I assume this is for historic reasons, since it doesn't seem to do anything now, and the comment documenting references a <code>setObserver</code> method that doesn't exist. Anyway, your change looks fine. But we should consider cleaning this up.</p>\n<p dir=\"auto\"><div class=\"border rounded-1 my-2\">\n  <div class=\"f6 px-3 py-2 lh-condensed border-bottom color-bg-subtle\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/apache/beam/blob/6453e859badcb629ae2528b77d84235b7291ff89/sdks/java/core/src/main/java/org/apache/beam/sdk/util/common/ElementByteSizeObservableIterable.java#L49-L61\">beam/sdks/java/core/src/main/java/org/apache/beam/sdk/util/common/ElementByteSizeObservableIterable.java</a>\n    </p>\n    <p class=\"mb-0 color-fg-muted\">\n        Lines 49 to 61\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/apache/beam/commit/6453e859badcb629ae2528b77d84235b7291ff89\">6453e85</a>\n    </p>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\" data-paste-markdown-skip=\"\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L49\" class=\"blob-num border-0 px-3 py-0 color-bg-default js-line-number\" data-line-number=\"49\"></td>\n          <td id=\"LC49\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">   <span class=\"pl-c\"><span class=\"pl-c\">/**</span></span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L50\" class=\"blob-num border-0 px-3 py-0 color-bg-default js-line-number\" data-line-number=\"50\"></td>\n          <td id=\"LC50\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\"> <span class=\"pl-c\">   * Returns a new iterator for this iterable. If an observer was set in a previous call to</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L51\" class=\"blob-num border-0 px-3 py-0 color-bg-default js-line-number\" data-line-number=\"51\"></td>\n          <td id=\"LC51\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\"> <span class=\"pl-c\">   * setObserver(), it will observe the iterator returned.</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L52\" class=\"blob-num border-0 px-3 py-0 color-bg-default js-line-number\" data-line-number=\"52\"></td>\n          <td id=\"LC52\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\"> <span class=\"pl-c\">   <span class=\"pl-c\">*/</span></span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L53\" class=\"blob-num border-0 px-3 py-0 color-bg-default js-line-number\" data-line-number=\"53\"></td>\n          <td id=\"LC53\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">   <span class=\"pl-k\">@Override</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L54\" class=\"blob-num border-0 px-3 py-0 color-bg-default js-line-number\" data-line-number=\"54\"></td>\n          <td id=\"LC54\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">   <span class=\"pl-k\">public</span> <span class=\"pl-smi\">InputT</span> <span class=\"pl-en\">iterator</span>() { </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L55\" class=\"blob-num border-0 px-3 py-0 color-bg-default js-line-number\" data-line-number=\"55\"></td>\n          <td id=\"LC55\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">     <span class=\"pl-smi\">InputT</span> iterator <span class=\"pl-k\">=</span> createIterator(); </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L56\" class=\"blob-num border-0 px-3 py-0 color-bg-default js-line-number\" data-line-number=\"56\"></td>\n          <td id=\"LC56\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">     <span class=\"pl-k\">for</span> (<span class=\"pl-smi\">Observer</span> observer <span class=\"pl-k\">:</span> observers) { </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L57\" class=\"blob-num border-0 px-3 py-0 color-bg-default js-line-number\" data-line-number=\"57\"></td>\n          <td id=\"LC57\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">       iterator<span class=\"pl-k\">.</span>addObserver(observer); </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L58\" class=\"blob-num border-0 px-3 py-0 color-bg-default js-line-number\" data-line-number=\"58\"></td>\n          <td id=\"LC58\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">     } </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L59\" class=\"blob-num border-0 px-3 py-0 color-bg-default js-line-number\" data-line-number=\"59\"></td>\n          <td id=\"LC59\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">     observers<span class=\"pl-k\">.</span>clear(); </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L60\" class=\"blob-num border-0 px-3 py-0 color-bg-default js-line-number\" data-line-number=\"60\"></td>\n          <td id=\"LC60\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">     <span class=\"pl-k\">return</span> iterator; </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L61\" class=\"blob-num border-0 px-3 py-0 color-bg-default js-line-number\" data-line-number=\"61\"></td>\n          <td id=\"LC61\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">   } </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n</p>", "author": "ibzib", "createdAt": "2020-05-04T18:44:41Z", "path": "runners/google-cloud-dataflow-java/worker/src/main/java/org/apache/beam/runners/dataflow/worker/util/BatchGroupAlsoByWindowViaIteratorsFn.java", "diffHunk": "@@ -165,12 +168,17 @@ public WindowReiterable(\n     }\n \n     @Override\n-    public Reiterator<V> iterator() {\n+    public WindowReiterator<V> iterator() {", "originalCommit": "dd9ab00aab02e20f6b19b57436b815fc372acee9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY1MjIwMA==", "url": "https://github.com/apache/beam/pull/11598#discussion_r419652200", "bodyText": "I filed BEAM-9878 as a wish item.", "author": "ibzib", "createdAt": "2020-05-04T18:49:57Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY0OTE3NA=="}], "type": "inlineReview"}]}