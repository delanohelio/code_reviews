{"pr_number": 12519, "pr_title": "[BEAM-10670] Make Read execute as a splittable DoFn by default for the Java DirectRunner.", "pr_author": "lukecwik", "pr_createdAt": "2020-08-10T20:33:14Z", "pr_url": "https://github.com/apache/beam/pull/12519", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE3MDM4Mw==", "url": "https://github.com/apache/beam/pull/12519#discussion_r468170383", "body": "This is effectively a duplicate of `AvroIOTest$SimpleTests.testReadDisplayData` and doesn't need to a be a validates runner test since it doesn't run a pipeline.", "bodyText": "This is effectively a duplicate of AvroIOTest$SimpleTests.testReadDisplayData and doesn't need to a be a validates runner test since it doesn't run a pipeline.", "bodyHTML": "<p dir=\"auto\">This is effectively a duplicate of <code>AvroIOTest$SimpleTests.testReadDisplayData</code> and doesn't need to a be a validates runner test since it doesn't run a pipeline.</p>", "author": "lukecwik", "createdAt": "2020-08-10T20:34:57Z", "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/io/AvroIOTest.java", "diffHunk": "@@ -1494,26 +1488,5 @@ public void testAvroSinkShardedWrite() throws Exception {\n     }\n     // TODO: for Write only, test withSuffix,\n     // withShardNameTemplate and withoutSharding.\n-\n-    @Test\n-    @Category(ValidatesRunner.class)\n-    public void testPrimitiveReadDisplayData() {", "originalCommit": "341c649e8f5b41d35425e4fa91af98a5e82a5f46", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE3MTU0MA==", "url": "https://github.com/apache/beam/pull/12519#discussion_r468171540", "body": "(here and below) This was previously throwing the top level exception but DirectRunner wraps ParDo exceptions with PipelineExecutionException but BoundedSource/UnboundedSource used a different code path and hence a different exception handling path.", "bodyText": "(here and below) This was previously throwing the top level exception but DirectRunner wraps ParDo exceptions with PipelineExecutionException but BoundedSource/UnboundedSource used a different code path and hence a different exception handling path.", "bodyHTML": "<p dir=\"auto\">(here and below) This was previously throwing the top level exception but DirectRunner wraps ParDo exceptions with PipelineExecutionException but BoundedSource/UnboundedSource used a different code path and hence a different exception handling path.</p>", "author": "lukecwik", "createdAt": "2020-08-10T20:37:16Z", "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/io/TFRecordIOTest.java", "diffHunk": "@@ -209,15 +208,13 @@ public void testWriteTwo() throws Exception {\n   @Test\n   @Category(NeedsRunner.class)\n   public void testReadInvalidRecord() throws Exception {\n-    expectedException.expect(IllegalStateException.class);", "originalCommit": "341c649e8f5b41d35425e4fa91af98a5e82a5f46", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE3MTcyNg==", "url": "https://github.com/apache/beam/pull/12519#discussion_r468171726", "body": "Effectively a duplicate of `testReadDisplayData` just above.", "bodyText": "Effectively a duplicate of testReadDisplayData just above.", "bodyHTML": "<p dir=\"auto\">Effectively a duplicate of <code>testReadDisplayData</code> just above.</p>", "author": "lukecwik", "createdAt": "2020-08-10T20:37:37Z", "path": "sdks/java/core/src/test/java/org/apache/beam/sdk/io/TextIOReadTest.java", "diffHunk": "@@ -495,24 +487,6 @@ public void testReadDisplayData() {\n       assertThat(displayData, hasDisplayItem(\"compressionType\", BZIP2.toString()));\n     }\n \n-    @Test\n-    @Category(ValidatesRunner.class)\n-    public void testPrimitiveReadDisplayData() {", "originalCommit": "341c649e8f5b41d35425e4fa91af98a5e82a5f46", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg2Mzg5OA==", "url": "https://github.com/apache/beam/pull/12519#discussion_r468863898", "body": "```suggestion\r\n   * contain any primitive reads when use_deprecated_read is not specified.\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * contain any primitive reads.\n          \n          \n            \n               * contain any primitive reads when use_deprecated_read is not specified.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"657\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">   <span class=\"pl-k\">*</span> contain any primitive reads.</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"657\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">   <span class=\"pl-k\">*</span> contain any primitive reads<span class=\"x x-first x-last\"> when use_deprecated_read is not specified</span>.</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "boyuanzz", "createdAt": "2020-08-11T21:04:09Z", "path": "runners/core-construction-java/src/main/java/org/apache/beam/runners/core/construction/SplittableParDo.java", "diffHunk": "@@ -630,4 +635,38 @@ public void tearDown() {\n       invoker = null;\n     }\n   }\n+\n+  /**\n+   * Throws an {@link IllegalArgumentException} if the pipeline contains any primitive read\n+   * transforms that have not been expanded to be executed as {@link DoFn splittable DoFns}.\n+   */\n+  public static void validateNoPrimitiveReads(Pipeline pipeline) {\n+    pipeline.traverseTopologically(new ValidateNoPrimitiveReads());\n+  }\n+\n+  /**\n+   * A {@link org.apache.beam.sdk.Pipeline.PipelineVisitor} that ensures that the pipeline does not\n+   * contain any primitive reads.", "originalCommit": "e62a7365c91d8158af19a6a92a250a60c7b0dc17", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQxMDczMA==", "url": "https://github.com/apache/beam/pull/12519#discussion_r469410730", "bodyText": "Done", "author": "lukecwik", "createdAt": "2020-08-12T17:07:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg2Mzg5OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg2NjM1OA==", "url": "https://github.com/apache/beam/pull/12519#discussion_r468866358", "body": "Is it possible to make `beam_fn_api_use_deprecated_read` and `use_deprecated_read` into one `use_deprecated_read` since they seem to the same.", "bodyText": "Is it possible to make beam_fn_api_use_deprecated_read and use_deprecated_read into one use_deprecated_read since they seem to the same.", "bodyHTML": "<p dir=\"auto\">Is it possible to make <code>beam_fn_api_use_deprecated_read</code> and <code>use_deprecated_read</code> into one <code>use_deprecated_read</code> since they seem to the same.</p>", "author": "boyuanzz", "createdAt": "2020-08-11T21:09:31Z", "path": "runners/direct-java/src/main/java/org/apache/beam/runners/direct/DirectRunner.java", "diffHunk": "@@ -179,6 +180,11 @@ public DirectPipelineResult run(Pipeline pipeline) {\n \n       DisplayDataValidator.validatePipeline(pipeline);\n       DisplayDataValidator.validateOptions(options);\n+      // TODO(BEAM-10670): Remove the deprecated Read and make the splittable DoFn the only option.\n+      if (!(ExperimentalOptions.hasExperiment(options, \"beam_fn_api_use_deprecated_read\")", "originalCommit": "e62a7365c91d8158af19a6a92a250a60c7b0dc17", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQxMTUxNA==", "url": "https://github.com/apache/beam/pull/12519#discussion_r469411514", "bodyText": "I wanted to use one that wasn't coupled to beam_fn_api so that users of non portable pipelines wouldn't be confused. I also don't want to impact existing users until we start removing the experiment so I needed to support both.", "author": "lukecwik", "createdAt": "2020-08-12T17:08:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg2NjM1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg3MzY3MA==", "url": "https://github.com/apache/beam/pull/12519#discussion_r468873670", "body": "Can we add one block to test using `use_deprecated_read ` ?", "bodyText": "Can we add one block to test using use_deprecated_read  ?", "bodyHTML": "<p dir=\"auto\">Can we add one block to test using <code>use_deprecated_read </code> ?</p>", "author": "boyuanzz", "createdAt": "2020-08-11T21:24:58Z", "path": "runners/core-construction-java/src/test/java/org/apache/beam/runners/core/construction/SplittableParDoTest.java", "diffHunk": "@@ -167,4 +180,55 @@ public void testBoundednessForUnboundedFn() {\n                 \"unbounded to unbounded\", makeUnboundedCollection(pipeline), unboundedFn)\n             .isBounded());\n   }\n+\n+  private static class FakeBoundedSource extends BoundedSource<String> {\n+    @Override\n+    public List<? extends BoundedSource<String>> split(\n+        long desiredBundleSizeBytes, PipelineOptions options) throws Exception {\n+      return Collections.singletonList(this);\n+    }\n+\n+    @Override\n+    public long getEstimatedSizeBytes(PipelineOptions options) throws Exception {\n+      return 0;\n+    }\n+\n+    @Override\n+    public BoundedReader<String> createReader(PipelineOptions options) throws IOException {\n+      throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public Coder<String> getOutputCoder() {\n+      return StringUtf8Coder.of();\n+    }\n+  }\n+\n+  @Test\n+  public void testValidateThatThereAreNoPrimitiveReads() {", "originalCommit": "e62a7365c91d8158af19a6a92a250a60c7b0dc17", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQxNTExMA==", "url": "https://github.com/apache/beam/pull/12519#discussion_r469415110", "bodyText": "Done", "author": "lukecwik", "createdAt": "2020-08-12T17:14:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg3MzY3MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg3NDgwOQ==", "url": "https://github.com/apache/beam/pull/12519#discussion_r468874809", "body": "Is it because we have `checkDone` now?", "bodyText": "Is it because we have checkDone now?", "bodyHTML": "<p dir=\"auto\">Is it because we have <code>checkDone</code> now?</p>", "author": "boyuanzz", "createdAt": "2020-08-11T21:27:22Z", "path": "runners/core-java/src/main/java/org/apache/beam/runners/core/OutputAndTimeBoundedSplittableProcessElementInvoker.java", "diffHunk": "@@ -211,10 +211,6 @@ public FinishBundleContext finishBundleContext(DoFn<InputT, OutputT> doFn) {\n     KV<RestrictionT, KV<Instant, WatermarkEstimatorStateT>> residual =\n         processContext.getTakenCheckpoint();\n     if (cont.shouldResume()) {\n-      checkState(", "originalCommit": "e62a7365c91d8158af19a6a92a250a60c7b0dc17", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQzMzAzMw==", "url": "https://github.com/apache/beam/pull/12519#discussion_r469433033", "bodyText": "I added this check back and altered how we were passing forward the self-checkpoing signal from the UnboundedSource through the SDF wrapper instead.\nThe check is valid.", "author": "lukecwik", "createdAt": "2020-08-12T17:45:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg3NDgwOQ=="}], "type": "inlineReview"}, {"oid": "b3d52f16690ad8b42dd188f4f081da81e04a07f4", "url": "https://github.com/apache/beam/commit/b3d52f16690ad8b42dd188f4f081da81e04a07f4", "message": "[BEAM-10670] Make Read execute as a splittable DoFn by default for the Java DirectRunner.", "committedDate": "2020-08-14T20:52:15Z", "type": "forcePushed"}, {"oid": "2e7c4ca207074ee98568be9469cadd141ad9cc6d", "url": "https://github.com/apache/beam/commit/2e7c4ca207074ee98568be9469cadd141ad9cc6d", "message": "[BEAM-10670] Make Read execute as a splittable DoFn by default for the Java DirectRunner.", "committedDate": "2020-08-14T20:55:16Z", "type": "commit"}, {"oid": "2e7c4ca207074ee98568be9469cadd141ad9cc6d", "url": "https://github.com/apache/beam/commit/2e7c4ca207074ee98568be9469cadd141ad9cc6d", "message": "[BEAM-10670] Make Read execute as a splittable DoFn by default for the Java DirectRunner.", "committedDate": "2020-08-14T20:55:16Z", "type": "forcePushed"}]}