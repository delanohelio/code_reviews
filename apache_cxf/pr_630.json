{"pr_number": 630, "pr_title": "CXF-8201 add additional check for file scheme in setUriParts", "pr_author": "jgallimore", "pr_createdAt": "2020-01-24T12:03:20Z", "pr_url": "https://github.com/apache/cxf/pull/630", "timeline": [{"oid": "b4f248e2ee0af94b9265aa21f73aaa69855d062b", "url": "https://github.com/apache/cxf/commit/b4f248e2ee0af94b9265aa21f73aaa69855d062b", "message": "Adding unit test", "committedDate": "2020-01-23T11:58:36Z", "type": "commit"}, {"oid": "6ab792a48795df552190128eecfe28d366b51f7a", "url": "https://github.com/apache/cxf/commit/6ab792a48795df552190128eecfe28d366b51f7a", "message": "Merge remote-tracking branch 'apache/master' into uribuilderimpltest", "committedDate": "2020-01-24T11:20:14Z", "type": "commit"}, {"oid": "9059a7eaa8d95a5e7b64bb7a84816d29151e01ee", "url": "https://github.com/apache/cxf/commit/9059a7eaa8d95a5e7b64bb7a84816d29151e01ee", "message": "CXF-8201 additional check for file scheme to enable appending paths to file URIs.", "committedDate": "2020-01-24T11:24:57Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDkxMTk2Ng==", "url": "https://github.com/apache/cxf/pull/630#discussion_r370911966", "body": "Hi @jgallimore, thanks for the PR. I think CXF should not assume any intrinsic knowledge about the URI scheme and handle it in a specific way. For example,  what about handling `jar:file`? Or any other custom schemes?  \r\n\r\nAlthough the reply on spec list (https://www.eclipse.org/lists/jaxrs-dev/msg00774.html) explicitly mentions that JAX-RS context is REST-over-HTTP (the CXF case), we could certainly make `UriBuilder` more flexible if the general solution could be found. \r\n\r\nHope it makes sense, thank you.", "bodyText": "Hi @jgallimore, thanks for the PR. I think CXF should not assume any intrinsic knowledge about the URI scheme and handle it in a specific way. For example,  what about handling jar:file? Or any other custom schemes?\nAlthough the reply on spec list (https://www.eclipse.org/lists/jaxrs-dev/msg00774.html) explicitly mentions that JAX-RS context is REST-over-HTTP (the CXF case), we could certainly make UriBuilder more flexible if the general solution could be found.\nHope it makes sense, thank you.", "bodyHTML": "<p dir=\"auto\">Hi <a class=\"user-mention\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/jgallimore/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/jgallimore\">@jgallimore</a>, thanks for the PR. I think CXF should not assume any intrinsic knowledge about the URI scheme and handle it in a specific way. For example,  what about handling <code>jar:file</code>? Or any other custom schemes?</p>\n<p dir=\"auto\">Although the reply on spec list (<a href=\"https://www.eclipse.org/lists/jaxrs-dev/msg00774.html\" rel=\"nofollow\">https://www.eclipse.org/lists/jaxrs-dev/msg00774.html</a>) explicitly mentions that JAX-RS context is REST-over-HTTP (the CXF case), we could certainly make <code>UriBuilder</code> more flexible if the general solution could be found.</p>\n<p dir=\"auto\">Hope it makes sense, thank you.</p>", "author": "reta", "createdAt": "2020-01-25T03:55:27Z", "path": "rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/UriBuilderImpl.java", "diffHunk": "@@ -651,8 +651,8 @@ private void setUriParts(URI uri) {\n         } else {\n             schemeSpecificPart = uri.getSchemeSpecificPart();\n         }\n-        if (scheme != null && host == null && (query == null || query.isEmpty()) && userInfo == null\n-            && uri.getSchemeSpecificPart() != null) {\n+        if (scheme != null && !\"file\".equalsIgnoreCase(scheme) && host == null && (query == null || query.isEmpty())", "originalCommit": "9059a7eaa8d95a5e7b64bb7a84816d29151e01ee", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "5c53951fc42b080d6d1e9d3e0490752715f3a388", "url": "https://github.com/apache/cxf/commit/5c53951fc42b080d6d1e9d3e0490752715f3a388", "message": "Merge Remote-tracking branch 'apache/master' into uribuilderimpltest", "committedDate": "2020-01-27T10:46:29Z", "type": "commit"}, {"oid": "70c056a50c79f390f4e777bf717c693adfd5b124", "url": "https://github.com/apache/cxf/commit/70c056a50c79f390f4e777bf717c693adfd5b124", "message": "CXF-8201 attempting to make this a more generic check", "committedDate": "2020-01-27T13:37:26Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU3MTgzNA==", "url": "https://github.com/apache/cxf/pull/630#discussion_r371571834", "body": "We have a helper method for it,  `CollectionUtils.isEmpty(query)` from `org.apache.cxf.common.util`", "bodyText": "We have a helper method for it,  CollectionUtils.isEmpty(query) from org.apache.cxf.common.util", "bodyHTML": "<p dir=\"auto\">We have a helper method for it,  <code>CollectionUtils.isEmpty(query)</code> from <code>org.apache.cxf.common.util</code></p>", "author": "reta", "createdAt": "2020-01-28T01:29:54Z", "path": "rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/UriBuilderImpl.java", "diffHunk": "@@ -661,6 +662,14 @@ private void setUriParts(URI uri) {\n         }\n     }\n \n+    private boolean queryIsEmpty() {\n+        return query == null || query.isEmpty();", "originalCommit": "70c056a50c79f390f4e777bf717c693adfd5b124", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU5NjE5OA==", "url": "https://github.com/apache/cxf/pull/630#discussion_r371596198", "body": "It would be good to check if `uri.getPath()` is not null, otherwise `\"//\" + uri.getPath()` becomes something like `//null`", "bodyText": "It would be good to check if uri.getPath() is not null, otherwise \"//\" + uri.getPath() becomes something like //null", "bodyHTML": "<p dir=\"auto\">It would be good to check if <code>uri.getPath()</code> is not null, otherwise <code>\"//\" + uri.getPath()</code> becomes something like <code>//null</code></p>", "author": "reta", "createdAt": "2020-01-28T03:37:06Z", "path": "rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/UriBuilderImpl.java", "diffHunk": "@@ -661,6 +662,14 @@ private void setUriParts(URI uri) {\n         }\n     }\n \n+    private boolean queryIsEmpty() {\n+        return query == null || query.isEmpty();\n+    }\n+\n+    private boolean sspMatchessPath(final URI uri) {\n+        return uri.getRawSchemeSpecificPart() != null && uri.getRawSchemeSpecificPart().equals(\"//\" + uri.getPath());", "originalCommit": "70c056a50c79f390f4e777bf717c693adfd5b124", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU5NjM0Ng==", "url": "https://github.com/apache/cxf/pull/630#discussion_r371596346", "body": "`Matchess` is misspelled, `schemeSpecificPartMatchesUriPath` would be probably better name (despite being long).", "bodyText": "Matchess is misspelled, schemeSpecificPartMatchesUriPath would be probably better name (despite being long).", "bodyHTML": "<p dir=\"auto\"><code>Matchess</code> is misspelled, <code>schemeSpecificPartMatchesUriPath</code> would be probably better name (despite being long).</p>", "author": "reta", "createdAt": "2020-01-28T03:38:08Z", "path": "rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/UriBuilderImpl.java", "diffHunk": "@@ -661,6 +662,14 @@ private void setUriParts(URI uri) {\n         }\n     }\n \n+    private boolean queryIsEmpty() {\n+        return query == null || query.isEmpty();\n+    }\n+\n+    private boolean sspMatchessPath(final URI uri) {", "originalCommit": "70c056a50c79f390f4e777bf717c693adfd5b124", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "3c7d1caf13c4df6cf5c36b5bc621a80d2c37544b", "url": "https://github.com/apache/cxf/commit/3c7d1caf13c4df6cf5c36b5bc621a80d2c37544b", "message": "Merge remote-tracking branch 'apache/master' into uribuilderimpltest", "committedDate": "2020-01-29T12:23:54Z", "type": "commit"}, {"oid": "295f1dbccd1db42c228a15d387e652cd96cc9a3d", "url": "https://github.com/apache/cxf/commit/295f1dbccd1db42c228a15d387e652cd96cc9a3d", "message": "CXF-8201 incorporate feedback on PR. Use CollectionUtils to check map/collection is empty, null check and better name for checking the scheme specific part against the path.", "committedDate": "2020-01-29T12:43:09Z", "type": "commit"}]}