{"pr_number": 8362, "pr_title": "[myStrom] Initial Contribution", "pr_author": "pail23", "pr_createdAt": "2020-08-29T19:41:08Z", "pr_url": "https://github.com/openhab/openhab-addons/pull/8362", "timeline": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTkyMzQyOA==", "url": "https://github.com/openhab/openhab-addons/pull/8362#discussion_r479923428", "body": "Can you add the unit:\r\n```suggestion\r\n    public static final int DEFAULT_WAIT_BEFORE_INITIAL_REFRESH_SECONDS = 10;\r\n```", "bodyText": "Can you add the unit:\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static final int DEFAULT_WAIT_BEFORE_INITIAL_REFRESH = 10;\n          \n          \n            \n                public static final int DEFAULT_WAIT_BEFORE_INITIAL_REFRESH_SECONDS = 10;", "bodyHTML": "<p dir=\"auto\">Can you add the unit:</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">final</span> <span class=\"pl-k\">int</span> <span class=\"pl-c1 x x-first x-last\">DEFAULT_WAIT_BEFORE_INITIAL_REFRESH</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">10</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">final</span> <span class=\"pl-k\">int</span> <span class=\"pl-c1 x x-first x-last\">DEFAULT_WAIT_BEFORE_INITIAL_REFRESH_SECONDS</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">10</span>;</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "Hilbrand", "createdAt": "2020-08-31T06:37:08Z", "path": "bundles/org.openhab.binding.mystrom/src/main/java/org/openhab/binding/mystrom/internal/MyStromBindingConstants.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mystrom.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+\n+/**\n+ * The {@link MyStromBindingConstants} class defines common constants, which are\n+ * used across the whole binding.\n+ *\n+ * @author Paul Frank - Initial contribution\n+ */\n+@NonNullByDefault\n+public class MyStromBindingConstants {\n+\n+    public static final int DEFAULT_WAIT_BEFORE_INITIAL_REFRESH = 10;", "originalCommit": "b592c4d44d88978f5be5f41bbb212bb6d598d3eb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTkyMzU2MA==", "url": "https://github.com/openhab/openhab-addons/pull/8362#discussion_r479923560", "body": "Same here:\r\n```suggestion\r\n    public static final int DEFAULT_REFRESH_RATE_SECONDS = 10;\r\n```", "bodyText": "Same here:\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static final int DEFAULT_REFRESH_RATE = 10;\n          \n          \n            \n                public static final int DEFAULT_REFRESH_RATE_SECONDS = 10;", "bodyHTML": "<p dir=\"auto\">Same here:</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">final</span> <span class=\"pl-k\">int</span> <span class=\"pl-c1 x x-first x-last\">DEFAULT_REFRESH_RATE</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">10</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">final</span> <span class=\"pl-k\">int</span> <span class=\"pl-c1 x x-first x-last\">DEFAULT_REFRESH_RATE_SECONDS</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1\">10</span>;</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "Hilbrand", "createdAt": "2020-08-31T06:37:30Z", "path": "bundles/org.openhab.binding.mystrom/src/main/java/org/openhab/binding/mystrom/internal/MyStromBindingConstants.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mystrom.internal;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\n+\n+/**\n+ * The {@link MyStromBindingConstants} class defines common constants, which are\n+ * used across the whole binding.\n+ *\n+ * @author Paul Frank - Initial contribution\n+ */\n+@NonNullByDefault\n+public class MyStromBindingConstants {\n+\n+    public static final int DEFAULT_WAIT_BEFORE_INITIAL_REFRESH = 10;\n+    public static final int DEFAULT_REFRESH_RATE = 10;", "originalCommit": "b592c4d44d88978f5be5f41bbb212bb6d598d3eb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTkyNDMxMw==", "url": "https://github.com/openhab/openhab-addons/pull/8362#discussion_r479924313", "body": "```suggestion\r\n    private @Nullable ScheduledFuture<?> pollingJob;\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Nullable\n          \n          \n            \n                private ScheduledFuture<?> pollingJob;\n          \n          \n            \n                private @Nullable ScheduledFuture<?> pollingJob;", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">@Nullable</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">private</span> <span class=\"pl-k\">ScheduledFuture&lt;?&gt;</span> pollingJob;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">private</span> <span class=\"pl-k\">@Nullable</span> <span class=\"pl-k\">ScheduledFuture&lt;?&gt;</span> pollingJob;</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "Hilbrand", "createdAt": "2020-08-31T06:39:29Z", "path": "bundles/org.openhab.binding.mystrom/src/main/java/org/openhab/binding/mystrom/internal/MyStromHandler.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mystrom.internal;\n+\n+import static org.eclipse.smarthome.core.library.unit.SIUnits.CELSIUS;\n+import static org.eclipse.smarthome.core.library.unit.SmartHomeUnits.WATT;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.CHANNEL_POWER;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.CHANNEL_SWITCH;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.CHANNEL_TEMPERATURE;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.DEFAULT_WAIT_BEFORE_INITIAL_REFRESH;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import com.google.gson.Gson;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link MyStromHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Paul Frank - Initial contribution\n+ */\n+@NonNullByDefault\n+public class MyStromHandler extends BaseThingHandler {\n+\n+    private static final int HTTP_OK_CODE = 200;\n+    private static final String COMMUNICATION_ERROR = \"Error while communicating to myStrom: \";\n+\n+    private final Logger logger = LoggerFactory.getLogger(MyStromHandler.class);\n+\n+    private @Nullable MyStromConfiguration config;\n+    private HttpClient httpClient;\n+    private String hostname = \"\";\n+\n+    @Nullable\n+    private ScheduledFuture<?> pollingJob;", "originalCommit": "b592c4d44d88978f5be5f41bbb212bb6d598d3eb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTkyNzQ4Mw==", "url": "https://github.com/openhab/openhab-addons/pull/8362#discussion_r479927483", "body": "```suggestion\r\n                    scheduler.schedule(this::pollDevice, 500, TimeUnit.MILLISECONDS);\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                scheduler.schedule(() -> {\n          \n          \n            \n                                    pollDevice();\n          \n          \n            \n                                }, 500, TimeUnit.MILLISECONDS);\n          \n          \n            \n                                scheduler.schedule(this::pollDevice, 500, TimeUnit.MILLISECONDS);", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    scheduler<span class=\"pl-k\">.</span>schedule(() <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                        pollDevice();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    }, <span class=\"pl-c1\">500</span>, <span class=\"pl-smi\">TimeUnit</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>MILLISECONDS</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                    scheduler<span class=\"pl-k\">.</span>schedule(<span class=\"pl-c1\">this</span><span class=\"pl-k\">::</span>pollDevice, <span class=\"pl-c1\">500</span>, <span class=\"pl-smi\">TimeUnit</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>MILLISECONDS</span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "Hilbrand", "createdAt": "2020-08-31T06:45:13Z", "path": "bundles/org.openhab.binding.mystrom/src/main/java/org/openhab/binding/mystrom/internal/MyStromHandler.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mystrom.internal;\n+\n+import static org.eclipse.smarthome.core.library.unit.SIUnits.CELSIUS;\n+import static org.eclipse.smarthome.core.library.unit.SmartHomeUnits.WATT;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.CHANNEL_POWER;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.CHANNEL_SWITCH;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.CHANNEL_TEMPERATURE;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.DEFAULT_WAIT_BEFORE_INITIAL_REFRESH;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import com.google.gson.Gson;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link MyStromHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Paul Frank - Initial contribution\n+ */\n+@NonNullByDefault\n+public class MyStromHandler extends BaseThingHandler {\n+\n+    private static final int HTTP_OK_CODE = 200;\n+    private static final String COMMUNICATION_ERROR = \"Error while communicating to myStrom: \";\n+\n+    private final Logger logger = LoggerFactory.getLogger(MyStromHandler.class);\n+\n+    private @Nullable MyStromConfiguration config;\n+    private HttpClient httpClient;\n+    private String hostname = \"\";\n+\n+    @Nullable\n+    private ScheduledFuture<?> pollingJob;\n+\n+    private final Gson gson = new Gson();\n+\n+    public MyStromHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        this.httpClient = httpClient;\n+    }\n+\n+    private static class MyStromReport {\n+\n+        public float power;\n+        public boolean relay;\n+        public float temperature;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        try {\n+            if (command instanceof RefreshType) {\n+                pollDevice();\n+            } else {\n+                if (command instanceof OnOffType && CHANNEL_SWITCH.equals(channelUID.getId())) {\n+                    sendHttpGet(\"relay?state=\" + (command == OnOffType.ON ? \"1\" : \"0\"));\n+                    scheduler.schedule(() -> {\n+                        pollDevice();\n+                    }, 500, TimeUnit.MILLISECONDS);", "originalCommit": "b592c4d44d88978f5be5f41bbb212bb6d598d3eb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTkyOTE0NA==", "url": "https://github.com/openhab/openhab-addons/pull/8362#discussion_r479929144", "body": "Please log this to warn. See documentation about what to log: https://www.openhab.org/docs/developer/guidelines.html#f-logging", "bodyText": "Please log this to warn. See documentation about what to log: https://www.openhab.org/docs/developer/guidelines.html#f-logging", "bodyHTML": "<p dir=\"auto\">Please log this to warn. See documentation about what to log: <a href=\"https://www.openhab.org/docs/developer/guidelines.html#f-logging\" rel=\"nofollow\">https://www.openhab.org/docs/developer/guidelines.html#f-logging</a></p>", "author": "Hilbrand", "createdAt": "2020-08-31T06:48:07Z", "path": "bundles/org.openhab.binding.mystrom/src/main/java/org/openhab/binding/mystrom/internal/MyStromHandler.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mystrom.internal;\n+\n+import static org.eclipse.smarthome.core.library.unit.SIUnits.CELSIUS;\n+import static org.eclipse.smarthome.core.library.unit.SmartHomeUnits.WATT;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.CHANNEL_POWER;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.CHANNEL_SWITCH;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.CHANNEL_TEMPERATURE;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.DEFAULT_WAIT_BEFORE_INITIAL_REFRESH;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import com.google.gson.Gson;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link MyStromHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Paul Frank - Initial contribution\n+ */\n+@NonNullByDefault\n+public class MyStromHandler extends BaseThingHandler {\n+\n+    private static final int HTTP_OK_CODE = 200;\n+    private static final String COMMUNICATION_ERROR = \"Error while communicating to myStrom: \";\n+\n+    private final Logger logger = LoggerFactory.getLogger(MyStromHandler.class);\n+\n+    private @Nullable MyStromConfiguration config;\n+    private HttpClient httpClient;\n+    private String hostname = \"\";\n+\n+    @Nullable\n+    private ScheduledFuture<?> pollingJob;\n+\n+    private final Gson gson = new Gson();\n+\n+    public MyStromHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        this.httpClient = httpClient;\n+    }\n+\n+    private static class MyStromReport {\n+\n+        public float power;\n+        public boolean relay;\n+        public float temperature;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        try {\n+            if (command instanceof RefreshType) {\n+                pollDevice();\n+            } else {\n+                if (command instanceof OnOffType && CHANNEL_SWITCH.equals(channelUID.getId())) {\n+                    sendHttpGet(\"relay?state=\" + (command == OnOffType.ON ? \"1\" : \"0\"));\n+                    scheduler.schedule(() -> {\n+                        pollDevice();\n+                    }, 500, TimeUnit.MILLISECONDS);\n+                }\n+\n+            }\n+        } catch (MyStromException e) {\n+            logger.error(COMMUNICATION_ERROR, e);", "originalCommit": "b592c4d44d88978f5be5f41bbb212bb6d598d3eb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMwNzQ4Mw==", "url": "https://github.com/openhab/openhab-addons/pull/8362#discussion_r480307483", "bodyText": "changed to warn", "author": "pail23", "createdAt": "2020-08-31T18:24:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTkyOTE0NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTkyOTM3Nw==", "url": "https://github.com/openhab/openhab-addons/pull/8362#discussion_r479929377", "body": "This should be debug log as it already also set the state", "bodyText": "This should be debug log as it already also set the state", "bodyHTML": "<p dir=\"auto\">This should be debug log as it already also set the state</p>", "author": "Hilbrand", "createdAt": "2020-08-31T06:48:42Z", "path": "bundles/org.openhab.binding.mystrom/src/main/java/org/openhab/binding/mystrom/internal/MyStromHandler.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mystrom.internal;\n+\n+import static org.eclipse.smarthome.core.library.unit.SIUnits.CELSIUS;\n+import static org.eclipse.smarthome.core.library.unit.SmartHomeUnits.WATT;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.CHANNEL_POWER;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.CHANNEL_SWITCH;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.CHANNEL_TEMPERATURE;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.DEFAULT_WAIT_BEFORE_INITIAL_REFRESH;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import com.google.gson.Gson;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link MyStromHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Paul Frank - Initial contribution\n+ */\n+@NonNullByDefault\n+public class MyStromHandler extends BaseThingHandler {\n+\n+    private static final int HTTP_OK_CODE = 200;\n+    private static final String COMMUNICATION_ERROR = \"Error while communicating to myStrom: \";\n+\n+    private final Logger logger = LoggerFactory.getLogger(MyStromHandler.class);\n+\n+    private @Nullable MyStromConfiguration config;\n+    private HttpClient httpClient;\n+    private String hostname = \"\";\n+\n+    @Nullable\n+    private ScheduledFuture<?> pollingJob;\n+\n+    private final Gson gson = new Gson();\n+\n+    public MyStromHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        this.httpClient = httpClient;\n+    }\n+\n+    private static class MyStromReport {\n+\n+        public float power;\n+        public boolean relay;\n+        public float temperature;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        try {\n+            if (command instanceof RefreshType) {\n+                pollDevice();\n+            } else {\n+                if (command instanceof OnOffType && CHANNEL_SWITCH.equals(channelUID.getId())) {\n+                    sendHttpGet(\"relay?state=\" + (command == OnOffType.ON ? \"1\" : \"0\"));\n+                    scheduler.schedule(() -> {\n+                        pollDevice();\n+                    }, 500, TimeUnit.MILLISECONDS);\n+                }\n+\n+            }\n+        } catch (MyStromException e) {\n+            logger.error(COMMUNICATION_ERROR, e);\n+        }\n+    }\n+\n+    private void pollDevice() {\n+        try {\n+            String returnContent = sendHttpGet(\"report\");\n+            MyStromReport report = gson.fromJson(returnContent, MyStromReport.class);\n+            updateState(CHANNEL_SWITCH, report.relay ? OnOffType.ON : OnOffType.OFF);\n+            updateState(CHANNEL_POWER, QuantityType.valueOf(report.power, WATT));\n+            updateState(CHANNEL_TEMPERATURE, QuantityType.valueOf(report.temperature, CELSIUS));\n+            updateStatus(ThingStatus.ONLINE);\n+        } catch (MyStromException e) {\n+            logger.error(COMMUNICATION_ERROR, e);", "originalCommit": "b592c4d44d88978f5be5f41bbb212bb6d598d3eb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMwNzU5NA==", "url": "https://github.com/openhab/openhab-addons/pull/8362#discussion_r480307594", "bodyText": "changed to debug", "author": "pail23", "createdAt": "2020-08-31T18:24:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTkyOTM3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTkyOTYxNA==", "url": "https://github.com/openhab/openhab-addons/pull/8362#discussion_r479929614", "body": "```suggestion\r\n            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, COMMUNICATION_ERROR);\r\n```\r\nor \r\n```suggestion\r\n            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, e.getMessage());\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        updateStatus(ThingStatus.OFFLINE);\n          \n          \n            \n                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, COMMUNICATION_ERROR);\n          \n      \n    \n    \n  \n\nor\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        updateStatus(ThingStatus.OFFLINE);\n          \n          \n            \n                        updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, e.getMessage());", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            updateStatus(<span class=\"pl-smi\">ThingStatus</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>OFFLINE</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            updateStatus(<span class=\"pl-smi\">ThingStatus</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>OFFLINE</span><span class=\"x x-first\">, </span><span class=\"pl-smi x\">ThingStatusDetail</span><span class=\"pl-c1\"><span class=\"pl-k x\">.</span><span class=\"x\">CONFIGURATION_ERROR</span></span><span class=\"x\">, </span><span class=\"pl-c1 x x-last\">COMMUNICATION_ERROR</span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">or</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            updateStatus(<span class=\"pl-smi\">ThingStatus</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>OFFLINE</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            updateStatus(<span class=\"pl-smi\">ThingStatus</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>OFFLINE</span><span class=\"x x-first\">, </span><span class=\"pl-smi x\">ThingStatusDetail</span><span class=\"pl-c1\"><span class=\"pl-k x\">.</span><span class=\"x\">CONFIGURATION_ERROR</span></span><span class=\"x\">, e</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">getMessage()</span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "Hilbrand", "createdAt": "2020-08-31T06:49:20Z", "path": "bundles/org.openhab.binding.mystrom/src/main/java/org/openhab/binding/mystrom/internal/MyStromHandler.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mystrom.internal;\n+\n+import static org.eclipse.smarthome.core.library.unit.SIUnits.CELSIUS;\n+import static org.eclipse.smarthome.core.library.unit.SmartHomeUnits.WATT;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.CHANNEL_POWER;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.CHANNEL_SWITCH;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.CHANNEL_TEMPERATURE;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.DEFAULT_WAIT_BEFORE_INITIAL_REFRESH;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import com.google.gson.Gson;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link MyStromHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Paul Frank - Initial contribution\n+ */\n+@NonNullByDefault\n+public class MyStromHandler extends BaseThingHandler {\n+\n+    private static final int HTTP_OK_CODE = 200;\n+    private static final String COMMUNICATION_ERROR = \"Error while communicating to myStrom: \";\n+\n+    private final Logger logger = LoggerFactory.getLogger(MyStromHandler.class);\n+\n+    private @Nullable MyStromConfiguration config;\n+    private HttpClient httpClient;\n+    private String hostname = \"\";\n+\n+    @Nullable\n+    private ScheduledFuture<?> pollingJob;\n+\n+    private final Gson gson = new Gson();\n+\n+    public MyStromHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        this.httpClient = httpClient;\n+    }\n+\n+    private static class MyStromReport {\n+\n+        public float power;\n+        public boolean relay;\n+        public float temperature;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        try {\n+            if (command instanceof RefreshType) {\n+                pollDevice();\n+            } else {\n+                if (command instanceof OnOffType && CHANNEL_SWITCH.equals(channelUID.getId())) {\n+                    sendHttpGet(\"relay?state=\" + (command == OnOffType.ON ? \"1\" : \"0\"));\n+                    scheduler.schedule(() -> {\n+                        pollDevice();\n+                    }, 500, TimeUnit.MILLISECONDS);\n+                }\n+\n+            }\n+        } catch (MyStromException e) {\n+            logger.error(COMMUNICATION_ERROR, e);\n+        }\n+    }\n+\n+    private void pollDevice() {\n+        try {\n+            String returnContent = sendHttpGet(\"report\");\n+            MyStromReport report = gson.fromJson(returnContent, MyStromReport.class);\n+            updateState(CHANNEL_SWITCH, report.relay ? OnOffType.ON : OnOffType.OFF);\n+            updateState(CHANNEL_POWER, QuantityType.valueOf(report.power, WATT));\n+            updateState(CHANNEL_TEMPERATURE, QuantityType.valueOf(report.temperature, CELSIUS));\n+            updateStatus(ThingStatus.ONLINE);\n+        } catch (MyStromException e) {\n+            logger.error(COMMUNICATION_ERROR, e);\n+            updateStatus(ThingStatus.OFFLINE);", "originalCommit": "b592c4d44d88978f5be5f41bbb212bb6d598d3eb", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTkzMDczNg==", "url": "https://github.com/openhab/openhab-addons/pull/8362#discussion_r479930736", "body": "The polling job is started with a delay, but here it's started directly. Why not just start the scheduled job with 0 seconds delay?", "bodyText": "The polling job is started with a delay, but here it's started directly. Why not just start the scheduled job with 0 seconds delay?", "bodyHTML": "<p dir=\"auto\">The polling job is started with a delay, but here it's started directly. Why not just start the scheduled job with 0 seconds delay?</p>", "author": "Hilbrand", "createdAt": "2020-08-31T06:52:01Z", "path": "bundles/org.openhab.binding.mystrom/src/main/java/org/openhab/binding/mystrom/internal/MyStromHandler.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mystrom.internal;\n+\n+import static org.eclipse.smarthome.core.library.unit.SIUnits.CELSIUS;\n+import static org.eclipse.smarthome.core.library.unit.SmartHomeUnits.WATT;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.CHANNEL_POWER;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.CHANNEL_SWITCH;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.CHANNEL_TEMPERATURE;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.DEFAULT_WAIT_BEFORE_INITIAL_REFRESH;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import com.google.gson.Gson;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link MyStromHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Paul Frank - Initial contribution\n+ */\n+@NonNullByDefault\n+public class MyStromHandler extends BaseThingHandler {\n+\n+    private static final int HTTP_OK_CODE = 200;\n+    private static final String COMMUNICATION_ERROR = \"Error while communicating to myStrom: \";\n+\n+    private final Logger logger = LoggerFactory.getLogger(MyStromHandler.class);\n+\n+    private @Nullable MyStromConfiguration config;\n+    private HttpClient httpClient;\n+    private String hostname = \"\";\n+\n+    @Nullable\n+    private ScheduledFuture<?> pollingJob;\n+\n+    private final Gson gson = new Gson();\n+\n+    public MyStromHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        this.httpClient = httpClient;\n+    }\n+\n+    private static class MyStromReport {\n+\n+        public float power;\n+        public boolean relay;\n+        public float temperature;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        try {\n+            if (command instanceof RefreshType) {\n+                pollDevice();\n+            } else {\n+                if (command instanceof OnOffType && CHANNEL_SWITCH.equals(channelUID.getId())) {\n+                    sendHttpGet(\"relay?state=\" + (command == OnOffType.ON ? \"1\" : \"0\"));\n+                    scheduler.schedule(() -> {\n+                        pollDevice();\n+                    }, 500, TimeUnit.MILLISECONDS);\n+                }\n+\n+            }\n+        } catch (MyStromException e) {\n+            logger.error(COMMUNICATION_ERROR, e);\n+        }\n+    }\n+\n+    private void pollDevice() {\n+        try {\n+            String returnContent = sendHttpGet(\"report\");\n+            MyStromReport report = gson.fromJson(returnContent, MyStromReport.class);\n+            updateState(CHANNEL_SWITCH, report.relay ? OnOffType.ON : OnOffType.OFF);\n+            updateState(CHANNEL_POWER, QuantityType.valueOf(report.power, WATT));\n+            updateState(CHANNEL_TEMPERATURE, QuantityType.valueOf(report.temperature, CELSIUS));\n+            updateStatus(ThingStatus.ONLINE);\n+        } catch (MyStromException e) {\n+            logger.error(COMMUNICATION_ERROR, e);\n+            updateStatus(ThingStatus.OFFLINE);\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Start initializing!\");\n+        config = getConfigAs(MyStromConfiguration.class);\n+        hostname = config.hostname;\n+\n+        pollingJob = scheduler.scheduleWithFixedDelay(this::pollDevice, DEFAULT_WAIT_BEFORE_INITIAL_REFRESH,\n+                config.refresh, TimeUnit.SECONDS);\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+\n+        scheduler.execute(this::pollDevice);", "originalCommit": "b592c4d44d88978f5be5f41bbb212bb6d598d3eb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMwNzk2Mg==", "url": "https://github.com/openhab/openhab-addons/pull/8362#discussion_r480307962", "bodyText": "removed this line and change to 0 delay in the previous call", "author": "pail23", "createdAt": "2020-08-31T18:25:01Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTkzMDczNg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTkzMTY4OQ==", "url": "https://github.com/openhab/openhab-addons/pull/8362#discussion_r479931689", "body": "Put inner classes at the top or bottom of this class.", "bodyText": "Put inner classes at the top or bottom of this class.", "bodyHTML": "<p dir=\"auto\">Put inner classes at the top or bottom of this class.</p>", "author": "Hilbrand", "createdAt": "2020-08-31T06:54:19Z", "path": "bundles/org.openhab.binding.mystrom/src/main/java/org/openhab/binding/mystrom/internal/MyStromHandler.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mystrom.internal;\n+\n+import static org.eclipse.smarthome.core.library.unit.SIUnits.CELSIUS;\n+import static org.eclipse.smarthome.core.library.unit.SmartHomeUnits.WATT;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.CHANNEL_POWER;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.CHANNEL_SWITCH;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.CHANNEL_TEMPERATURE;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.DEFAULT_WAIT_BEFORE_INITIAL_REFRESH;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import com.google.gson.Gson;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link MyStromHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Paul Frank - Initial contribution\n+ */\n+@NonNullByDefault\n+public class MyStromHandler extends BaseThingHandler {\n+\n+    private static final int HTTP_OK_CODE = 200;\n+    private static final String COMMUNICATION_ERROR = \"Error while communicating to myStrom: \";\n+\n+    private final Logger logger = LoggerFactory.getLogger(MyStromHandler.class);\n+\n+    private @Nullable MyStromConfiguration config;\n+    private HttpClient httpClient;\n+    private String hostname = \"\";\n+\n+    @Nullable\n+    private ScheduledFuture<?> pollingJob;\n+\n+    private final Gson gson = new Gson();\n+\n+    public MyStromHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        this.httpClient = httpClient;\n+    }\n+\n+    private static class MyStromReport {", "originalCommit": "b592c4d44d88978f5be5f41bbb212bb6d598d3eb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMwODExNg==", "url": "https://github.com/openhab/openhab-addons/pull/8362#discussion_r480308116", "bodyText": "Moved the class to the top", "author": "pail23", "createdAt": "2020-08-31T18:25:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTkzMTY4OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTkzMzkzMw==", "url": "https://github.com/openhab/openhab-addons/pull/8362#discussion_r479933933", "body": "refresh is called for each channel. So if you have 3 items linked to channels. This is called 3 times. It's also called in a different thread as the polling job, so they might be called at the same time. A solution is to use `ExpiringCache` from openHAB core. You can use `MyStromReport` as the data to manager and for example use a timeout of 3 seconds. So if the data is requested within 3 seconds it returns the cached data. ", "bodyText": "refresh is called for each channel. So if you have 3 items linked to channels. This is called 3 times. It's also called in a different thread as the polling job, so they might be called at the same time. A solution is to use ExpiringCache from openHAB core. You can use MyStromReport as the data to manager and for example use a timeout of 3 seconds. So if the data is requested within 3 seconds it returns the cached data.", "bodyHTML": "<p dir=\"auto\">refresh is called for each channel. So if you have 3 items linked to channels. This is called 3 times. It's also called in a different thread as the polling job, so they might be called at the same time. A solution is to use <code>ExpiringCache</code> from openHAB core. You can use <code>MyStromReport</code> as the data to manager and for example use a timeout of 3 seconds. So if the data is requested within 3 seconds it returns the cached data.</p>", "author": "Hilbrand", "createdAt": "2020-08-31T06:59:34Z", "path": "bundles/org.openhab.binding.mystrom/src/main/java/org/openhab/binding/mystrom/internal/MyStromHandler.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mystrom.internal;\n+\n+import static org.eclipse.smarthome.core.library.unit.SIUnits.CELSIUS;\n+import static org.eclipse.smarthome.core.library.unit.SmartHomeUnits.WATT;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.CHANNEL_POWER;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.CHANNEL_SWITCH;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.CHANNEL_TEMPERATURE;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.DEFAULT_WAIT_BEFORE_INITIAL_REFRESH;\n+\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import com.google.gson.Gson;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link MyStromHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Paul Frank - Initial contribution\n+ */\n+@NonNullByDefault\n+public class MyStromHandler extends BaseThingHandler {\n+\n+    private static final int HTTP_OK_CODE = 200;\n+    private static final String COMMUNICATION_ERROR = \"Error while communicating to myStrom: \";\n+\n+    private final Logger logger = LoggerFactory.getLogger(MyStromHandler.class);\n+\n+    private @Nullable MyStromConfiguration config;\n+    private HttpClient httpClient;\n+    private String hostname = \"\";\n+\n+    @Nullable\n+    private ScheduledFuture<?> pollingJob;\n+\n+    private final Gson gson = new Gson();\n+\n+    public MyStromHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        this.httpClient = httpClient;\n+    }\n+\n+    private static class MyStromReport {\n+\n+        public float power;\n+        public boolean relay;\n+        public float temperature;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        try {\n+            if (command instanceof RefreshType) {\n+                pollDevice();", "originalCommit": "b592c4d44d88978f5be5f41bbb212bb6d598d3eb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDMwODI0MQ==", "url": "https://github.com/openhab/openhab-addons/pull/8362#discussion_r480308241", "bodyText": "Added the expiry cache", "author": "pail23", "createdAt": "2020-08-31T18:25:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTkzMzkzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkzMjc4MQ==", "url": "https://github.com/openhab/openhab-addons/pull/8362#discussion_r483932781", "body": "It seems a bit unreasonable logging the stack trace when the network fails. You could simply log the exception's message.", "bodyText": "It seems a bit unreasonable logging the stack trace when the network fails. You could simply log the exception's message.", "bodyHTML": "<p dir=\"auto\">It seems a bit unreasonable logging the stack trace when the network fails. You could simply log the exception's message.</p>", "author": "fwolter", "createdAt": "2020-09-05T09:34:47Z", "path": "bundles/org.openhab.binding.mystrom/src/main/java/org/openhab/binding/mystrom/internal/MyStromHandler.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mystrom.internal;\n+\n+import static org.eclipse.smarthome.core.library.unit.SIUnits.CELSIUS;\n+import static org.eclipse.smarthome.core.library.unit.SmartHomeUnits.WATT;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.CHANNEL_POWER;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.CHANNEL_SWITCH;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.CHANNEL_TEMPERATURE;\n+\n+import java.time.Duration;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import com.google.gson.Gson;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.cache.ExpiringCache;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link MyStromHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Paul Frank - Initial contribution\n+ */\n+@NonNullByDefault\n+public class MyStromHandler extends BaseThingHandler {\n+\n+    private static class MyStromReport {\n+\n+        public float power;\n+        public boolean relay;\n+        public float temperature;\n+    }\n+\n+    private static final int HTTP_OK_CODE = 200;\n+    private static final String COMMUNICATION_ERROR = \"Error while communicating to myStrom: \";\n+\n+    private final Logger logger = LoggerFactory.getLogger(MyStromHandler.class);\n+\n+    private @Nullable MyStromConfiguration config;\n+    private HttpClient httpClient;\n+    private String hostname = \"\";\n+\n+    private @Nullable ScheduledFuture<?> pollingJob;\n+    private ExpiringCache<MyStromReport> cache = new ExpiringCache<>(Duration.ofSeconds(3), this::getReport);\n+    private final Gson gson = new Gson();\n+\n+    public MyStromHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        this.httpClient = httpClient;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        try {\n+            if (command instanceof RefreshType) {\n+                pollDevice();\n+            } else {\n+                if (command instanceof OnOffType && CHANNEL_SWITCH.equals(channelUID.getId())) {\n+                    sendHttpGet(\"relay?state=\" + (command == OnOffType.ON ? \"1\" : \"0\"));\n+                    scheduler.schedule(this::pollDevice, 500, TimeUnit.MILLISECONDS);\n+                }\n+\n+            }\n+        } catch (MyStromException e) {\n+            logger.warn(COMMUNICATION_ERROR, e);", "originalCommit": "4ec98e91c1ab9ba9531efeb1d4e4d0e8362591f9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDA0NDU2Mw==", "url": "https://github.com/openhab/openhab-addons/pull/8362#discussion_r484044563", "bodyText": "changed to exception message", "author": "pail23", "createdAt": "2020-09-06T09:13:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkzMjc4MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkzMzAwNw==", "url": "https://github.com/openhab/openhab-addons/pull/8362#discussion_r483933007", "body": "You could use the exception's message to fill the last argument of `updateStatus()`. The log message would be obsolete, then, as the status update is already logged.", "bodyText": "You could use the exception's message to fill the last argument of updateStatus(). The log message would be obsolete, then, as the status update is already logged.", "bodyHTML": "<p dir=\"auto\">You could use the exception's message to fill the last argument of <code>updateStatus()</code>. The log message would be obsolete, then, as the status update is already logged.</p>", "author": "fwolter", "createdAt": "2020-09-05T09:37:17Z", "path": "bundles/org.openhab.binding.mystrom/src/main/java/org/openhab/binding/mystrom/internal/MyStromHandler.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mystrom.internal;\n+\n+import static org.eclipse.smarthome.core.library.unit.SIUnits.CELSIUS;\n+import static org.eclipse.smarthome.core.library.unit.SmartHomeUnits.WATT;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.CHANNEL_POWER;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.CHANNEL_SWITCH;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.CHANNEL_TEMPERATURE;\n+\n+import java.time.Duration;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import com.google.gson.Gson;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.cache.ExpiringCache;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link MyStromHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Paul Frank - Initial contribution\n+ */\n+@NonNullByDefault\n+public class MyStromHandler extends BaseThingHandler {\n+\n+    private static class MyStromReport {\n+\n+        public float power;\n+        public boolean relay;\n+        public float temperature;\n+    }\n+\n+    private static final int HTTP_OK_CODE = 200;\n+    private static final String COMMUNICATION_ERROR = \"Error while communicating to myStrom: \";\n+\n+    private final Logger logger = LoggerFactory.getLogger(MyStromHandler.class);\n+\n+    private @Nullable MyStromConfiguration config;\n+    private HttpClient httpClient;\n+    private String hostname = \"\";\n+\n+    private @Nullable ScheduledFuture<?> pollingJob;\n+    private ExpiringCache<MyStromReport> cache = new ExpiringCache<>(Duration.ofSeconds(3), this::getReport);\n+    private final Gson gson = new Gson();\n+\n+    public MyStromHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        this.httpClient = httpClient;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        try {\n+            if (command instanceof RefreshType) {\n+                pollDevice();\n+            } else {\n+                if (command instanceof OnOffType && CHANNEL_SWITCH.equals(channelUID.getId())) {\n+                    sendHttpGet(\"relay?state=\" + (command == OnOffType.ON ? \"1\" : \"0\"));\n+                    scheduler.schedule(this::pollDevice, 500, TimeUnit.MILLISECONDS);\n+                }\n+\n+            }\n+        } catch (MyStromException e) {\n+            logger.warn(COMMUNICATION_ERROR, e);\n+        }\n+    }\n+\n+    private @Nullable MyStromReport getReport() {\n+        try {\n+            String returnContent = sendHttpGet(\"report\");\n+            MyStromReport report = gson.fromJson(returnContent, MyStromReport.class);\n+            updateStatus(ThingStatus.ONLINE);\n+            return report;\n+        } catch (MyStromException e) {\n+            logger.debug(COMMUNICATION_ERROR, e);\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, COMMUNICATION_ERROR);", "originalCommit": "4ec98e91c1ab9ba9531efeb1d4e4d0e8362591f9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDA0NDU4Mg==", "url": "https://github.com/openhab/openhab-addons/pull/8362#discussion_r484044582", "bodyText": "done", "author": "pail23", "createdAt": "2020-09-06T09:14:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkzMzAwNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkzMzA1MQ==", "url": "https://github.com/openhab/openhab-addons/pull/8362#discussion_r483933051", "body": "Can this message be replaced by using the debugger or by increasing the framework's log level? See point 4 https://www.openhab.org/docs/developer/guidelines.html#f-logging", "bodyText": "Can this message be replaced by using the debugger or by increasing the framework's log level? See point 4 https://www.openhab.org/docs/developer/guidelines.html#f-logging", "bodyHTML": "<p dir=\"auto\">Can this message be replaced by using the debugger or by increasing the framework's log level? See point 4 <a href=\"https://www.openhab.org/docs/developer/guidelines.html#f-logging\" rel=\"nofollow\">https://www.openhab.org/docs/developer/guidelines.html#f-logging</a></p>", "author": "fwolter", "createdAt": "2020-09-05T09:37:48Z", "path": "bundles/org.openhab.binding.mystrom/src/main/java/org/openhab/binding/mystrom/internal/MyStromHandler.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mystrom.internal;\n+\n+import static org.eclipse.smarthome.core.library.unit.SIUnits.CELSIUS;\n+import static org.eclipse.smarthome.core.library.unit.SmartHomeUnits.WATT;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.CHANNEL_POWER;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.CHANNEL_SWITCH;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.CHANNEL_TEMPERATURE;\n+\n+import java.time.Duration;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import com.google.gson.Gson;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.cache.ExpiringCache;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link MyStromHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Paul Frank - Initial contribution\n+ */\n+@NonNullByDefault\n+public class MyStromHandler extends BaseThingHandler {\n+\n+    private static class MyStromReport {\n+\n+        public float power;\n+        public boolean relay;\n+        public float temperature;\n+    }\n+\n+    private static final int HTTP_OK_CODE = 200;\n+    private static final String COMMUNICATION_ERROR = \"Error while communicating to myStrom: \";\n+\n+    private final Logger logger = LoggerFactory.getLogger(MyStromHandler.class);\n+\n+    private @Nullable MyStromConfiguration config;\n+    private HttpClient httpClient;\n+    private String hostname = \"\";\n+\n+    private @Nullable ScheduledFuture<?> pollingJob;\n+    private ExpiringCache<MyStromReport> cache = new ExpiringCache<>(Duration.ofSeconds(3), this::getReport);\n+    private final Gson gson = new Gson();\n+\n+    public MyStromHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        this.httpClient = httpClient;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        try {\n+            if (command instanceof RefreshType) {\n+                pollDevice();\n+            } else {\n+                if (command instanceof OnOffType && CHANNEL_SWITCH.equals(channelUID.getId())) {\n+                    sendHttpGet(\"relay?state=\" + (command == OnOffType.ON ? \"1\" : \"0\"));\n+                    scheduler.schedule(this::pollDevice, 500, TimeUnit.MILLISECONDS);\n+                }\n+\n+            }\n+        } catch (MyStromException e) {\n+            logger.warn(COMMUNICATION_ERROR, e);\n+        }\n+    }\n+\n+    private @Nullable MyStromReport getReport() {\n+        try {\n+            String returnContent = sendHttpGet(\"report\");\n+            MyStromReport report = gson.fromJson(returnContent, MyStromReport.class);\n+            updateStatus(ThingStatus.ONLINE);\n+            return report;\n+        } catch (MyStromException e) {\n+            logger.debug(COMMUNICATION_ERROR, e);\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, COMMUNICATION_ERROR);\n+            return null;\n+        }\n+    }\n+\n+    private void pollDevice() {\n+        MyStromReport report = cache.getValue();\n+        if (report != null) {\n+            updateState(CHANNEL_SWITCH, report.relay ? OnOffType.ON : OnOffType.OFF);\n+            updateState(CHANNEL_POWER, QuantityType.valueOf(report.power, WATT));\n+            updateState(CHANNEL_TEMPERATURE, QuantityType.valueOf(report.temperature, CELSIUS));\n+            updateStatus(ThingStatus.ONLINE);\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, COMMUNICATION_ERROR);\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Start initializing!\");", "originalCommit": "4ec98e91c1ab9ba9531efeb1d4e4d0e8362591f9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDA0NDYwNA==", "url": "https://github.com/openhab/openhab-addons/pull/8362#discussion_r484044604", "bodyText": "removed the log entry", "author": "pail23", "createdAt": "2020-09-06T09:14:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkzMzA1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkzMzEzMA==", "url": "https://github.com/openhab/openhab-addons/pull/8362#discussion_r483933130", "body": "If you make `config` a local variable, the compiler warning would be gone.", "bodyText": "If you make config a local variable, the compiler warning would be gone.", "bodyHTML": "<p dir=\"auto\">If you make <code>config</code> a local variable, the compiler warning would be gone.</p>", "author": "fwolter", "createdAt": "2020-09-05T09:38:44Z", "path": "bundles/org.openhab.binding.mystrom/src/main/java/org/openhab/binding/mystrom/internal/MyStromHandler.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mystrom.internal;\n+\n+import static org.eclipse.smarthome.core.library.unit.SIUnits.CELSIUS;\n+import static org.eclipse.smarthome.core.library.unit.SmartHomeUnits.WATT;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.CHANNEL_POWER;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.CHANNEL_SWITCH;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.CHANNEL_TEMPERATURE;\n+\n+import java.time.Duration;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import com.google.gson.Gson;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.cache.ExpiringCache;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link MyStromHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Paul Frank - Initial contribution\n+ */\n+@NonNullByDefault\n+public class MyStromHandler extends BaseThingHandler {\n+\n+    private static class MyStromReport {\n+\n+        public float power;\n+        public boolean relay;\n+        public float temperature;\n+    }\n+\n+    private static final int HTTP_OK_CODE = 200;\n+    private static final String COMMUNICATION_ERROR = \"Error while communicating to myStrom: \";\n+\n+    private final Logger logger = LoggerFactory.getLogger(MyStromHandler.class);\n+\n+    private @Nullable MyStromConfiguration config;\n+    private HttpClient httpClient;\n+    private String hostname = \"\";\n+\n+    private @Nullable ScheduledFuture<?> pollingJob;\n+    private ExpiringCache<MyStromReport> cache = new ExpiringCache<>(Duration.ofSeconds(3), this::getReport);\n+    private final Gson gson = new Gson();\n+\n+    public MyStromHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        this.httpClient = httpClient;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        try {\n+            if (command instanceof RefreshType) {\n+                pollDevice();\n+            } else {\n+                if (command instanceof OnOffType && CHANNEL_SWITCH.equals(channelUID.getId())) {\n+                    sendHttpGet(\"relay?state=\" + (command == OnOffType.ON ? \"1\" : \"0\"));\n+                    scheduler.schedule(this::pollDevice, 500, TimeUnit.MILLISECONDS);\n+                }\n+\n+            }\n+        } catch (MyStromException e) {\n+            logger.warn(COMMUNICATION_ERROR, e);\n+        }\n+    }\n+\n+    private @Nullable MyStromReport getReport() {\n+        try {\n+            String returnContent = sendHttpGet(\"report\");\n+            MyStromReport report = gson.fromJson(returnContent, MyStromReport.class);\n+            updateStatus(ThingStatus.ONLINE);\n+            return report;\n+        } catch (MyStromException e) {\n+            logger.debug(COMMUNICATION_ERROR, e);\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, COMMUNICATION_ERROR);\n+            return null;\n+        }\n+    }\n+\n+    private void pollDevice() {\n+        MyStromReport report = cache.getValue();\n+        if (report != null) {\n+            updateState(CHANNEL_SWITCH, report.relay ? OnOffType.ON : OnOffType.OFF);\n+            updateState(CHANNEL_POWER, QuantityType.valueOf(report.power, WATT));\n+            updateState(CHANNEL_TEMPERATURE, QuantityType.valueOf(report.temperature, CELSIUS));\n+            updateStatus(ThingStatus.ONLINE);\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, COMMUNICATION_ERROR);\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Start initializing!\");\n+        config = getConfigAs(MyStromConfiguration.class);\n+        hostname = config.hostname;", "originalCommit": "4ec98e91c1ab9ba9531efeb1d4e4d0e8362591f9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDA0NDYxNw==", "url": "https://github.com/openhab/openhab-addons/pull/8362#discussion_r484044617", "bodyText": "done", "author": "pail23", "createdAt": "2020-09-06T09:14:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkzMzEzMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkzMzE3Mg==", "url": "https://github.com/openhab/openhab-addons/pull/8362#discussion_r483933172", "body": "Can this message be replaced by using the debugger or by increasing the framework's log level?", "bodyText": "Can this message be replaced by using the debugger or by increasing the framework's log level?", "bodyHTML": "<p dir=\"auto\">Can this message be replaced by using the debugger or by increasing the framework's log level?</p>", "author": "fwolter", "createdAt": "2020-09-05T09:39:12Z", "path": "bundles/org.openhab.binding.mystrom/src/main/java/org/openhab/binding/mystrom/internal/MyStromHandler.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mystrom.internal;\n+\n+import static org.eclipse.smarthome.core.library.unit.SIUnits.CELSIUS;\n+import static org.eclipse.smarthome.core.library.unit.SmartHomeUnits.WATT;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.CHANNEL_POWER;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.CHANNEL_SWITCH;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.CHANNEL_TEMPERATURE;\n+\n+import java.time.Duration;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import com.google.gson.Gson;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.cache.ExpiringCache;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link MyStromHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Paul Frank - Initial contribution\n+ */\n+@NonNullByDefault\n+public class MyStromHandler extends BaseThingHandler {\n+\n+    private static class MyStromReport {\n+\n+        public float power;\n+        public boolean relay;\n+        public float temperature;\n+    }\n+\n+    private static final int HTTP_OK_CODE = 200;\n+    private static final String COMMUNICATION_ERROR = \"Error while communicating to myStrom: \";\n+\n+    private final Logger logger = LoggerFactory.getLogger(MyStromHandler.class);\n+\n+    private @Nullable MyStromConfiguration config;\n+    private HttpClient httpClient;\n+    private String hostname = \"\";\n+\n+    private @Nullable ScheduledFuture<?> pollingJob;\n+    private ExpiringCache<MyStromReport> cache = new ExpiringCache<>(Duration.ofSeconds(3), this::getReport);\n+    private final Gson gson = new Gson();\n+\n+    public MyStromHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        this.httpClient = httpClient;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        try {\n+            if (command instanceof RefreshType) {\n+                pollDevice();\n+            } else {\n+                if (command instanceof OnOffType && CHANNEL_SWITCH.equals(channelUID.getId())) {\n+                    sendHttpGet(\"relay?state=\" + (command == OnOffType.ON ? \"1\" : \"0\"));\n+                    scheduler.schedule(this::pollDevice, 500, TimeUnit.MILLISECONDS);\n+                }\n+\n+            }\n+        } catch (MyStromException e) {\n+            logger.warn(COMMUNICATION_ERROR, e);\n+        }\n+    }\n+\n+    private @Nullable MyStromReport getReport() {\n+        try {\n+            String returnContent = sendHttpGet(\"report\");\n+            MyStromReport report = gson.fromJson(returnContent, MyStromReport.class);\n+            updateStatus(ThingStatus.ONLINE);\n+            return report;\n+        } catch (MyStromException e) {\n+            logger.debug(COMMUNICATION_ERROR, e);\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, COMMUNICATION_ERROR);\n+            return null;\n+        }\n+    }\n+\n+    private void pollDevice() {\n+        MyStromReport report = cache.getValue();\n+        if (report != null) {\n+            updateState(CHANNEL_SWITCH, report.relay ? OnOffType.ON : OnOffType.OFF);\n+            updateState(CHANNEL_POWER, QuantityType.valueOf(report.power, WATT));\n+            updateState(CHANNEL_TEMPERATURE, QuantityType.valueOf(report.temperature, CELSIUS));\n+            updateStatus(ThingStatus.ONLINE);\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, COMMUNICATION_ERROR);\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Start initializing!\");\n+        config = getConfigAs(MyStromConfiguration.class);\n+        hostname = config.hostname;\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+        pollingJob = scheduler.scheduleWithFixedDelay(this::pollDevice, 0, config.refresh, TimeUnit.SECONDS);\n+\n+        logger.debug(\"Finished initializing!\");", "originalCommit": "4ec98e91c1ab9ba9531efeb1d4e4d0e8362591f9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDA0NDYyMg==", "url": "https://github.com/openhab/openhab-addons/pull/8362#discussion_r484044622", "bodyText": "removed the log entry", "author": "pail23", "createdAt": "2020-09-06T09:14:34Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkzMzE3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkzMzIyNA==", "url": "https://github.com/openhab/openhab-addons/pull/8362#discussion_r483933224", "body": "Please add a reasonable timeout like 10 sec.", "bodyText": "Please add a reasonable timeout like 10 sec.", "bodyHTML": "<p dir=\"auto\">Please add a reasonable timeout like 10 sec.</p>", "author": "fwolter", "createdAt": "2020-09-05T09:39:45Z", "path": "bundles/org.openhab.binding.mystrom/src/main/java/org/openhab/binding/mystrom/internal/MyStromHandler.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mystrom.internal;\n+\n+import static org.eclipse.smarthome.core.library.unit.SIUnits.CELSIUS;\n+import static org.eclipse.smarthome.core.library.unit.SmartHomeUnits.WATT;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.CHANNEL_POWER;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.CHANNEL_SWITCH;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.CHANNEL_TEMPERATURE;\n+\n+import java.time.Duration;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import com.google.gson.Gson;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.cache.ExpiringCache;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link MyStromHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Paul Frank - Initial contribution\n+ */\n+@NonNullByDefault\n+public class MyStromHandler extends BaseThingHandler {\n+\n+    private static class MyStromReport {\n+\n+        public float power;\n+        public boolean relay;\n+        public float temperature;\n+    }\n+\n+    private static final int HTTP_OK_CODE = 200;\n+    private static final String COMMUNICATION_ERROR = \"Error while communicating to myStrom: \";\n+\n+    private final Logger logger = LoggerFactory.getLogger(MyStromHandler.class);\n+\n+    private @Nullable MyStromConfiguration config;\n+    private HttpClient httpClient;\n+    private String hostname = \"\";\n+\n+    private @Nullable ScheduledFuture<?> pollingJob;\n+    private ExpiringCache<MyStromReport> cache = new ExpiringCache<>(Duration.ofSeconds(3), this::getReport);\n+    private final Gson gson = new Gson();\n+\n+    public MyStromHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        this.httpClient = httpClient;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        try {\n+            if (command instanceof RefreshType) {\n+                pollDevice();\n+            } else {\n+                if (command instanceof OnOffType && CHANNEL_SWITCH.equals(channelUID.getId())) {\n+                    sendHttpGet(\"relay?state=\" + (command == OnOffType.ON ? \"1\" : \"0\"));\n+                    scheduler.schedule(this::pollDevice, 500, TimeUnit.MILLISECONDS);\n+                }\n+\n+            }\n+        } catch (MyStromException e) {\n+            logger.warn(COMMUNICATION_ERROR, e);\n+        }\n+    }\n+\n+    private @Nullable MyStromReport getReport() {\n+        try {\n+            String returnContent = sendHttpGet(\"report\");\n+            MyStromReport report = gson.fromJson(returnContent, MyStromReport.class);\n+            updateStatus(ThingStatus.ONLINE);\n+            return report;\n+        } catch (MyStromException e) {\n+            logger.debug(COMMUNICATION_ERROR, e);\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, COMMUNICATION_ERROR);\n+            return null;\n+        }\n+    }\n+\n+    private void pollDevice() {\n+        MyStromReport report = cache.getValue();\n+        if (report != null) {\n+            updateState(CHANNEL_SWITCH, report.relay ? OnOffType.ON : OnOffType.OFF);\n+            updateState(CHANNEL_POWER, QuantityType.valueOf(report.power, WATT));\n+            updateState(CHANNEL_TEMPERATURE, QuantityType.valueOf(report.temperature, CELSIUS));\n+            updateStatus(ThingStatus.ONLINE);\n+        } else {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, COMMUNICATION_ERROR);\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        logger.debug(\"Start initializing!\");\n+        config = getConfigAs(MyStromConfiguration.class);\n+        hostname = config.hostname;\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+        pollingJob = scheduler.scheduleWithFixedDelay(this::pollDevice, 0, config.refresh, TimeUnit.SECONDS);\n+\n+        logger.debug(\"Finished initializing!\");\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        super.dispose();\n+\n+        if (pollingJob != null) {\n+            pollingJob.cancel(true);\n+            pollingJob = null;\n+        }\n+    }\n+\n+    /**\n+     * Given a URL and a set parameters, send a HTTP GET request to the URL location\n+     * created by the URL and parameters.\n+     *\n+     * @param url The URL to send a GET request to.\n+     * @return String contents of the response for the GET request.\n+     * @throws Exception\n+     */\n+    public String sendHttpGet(String action) throws MyStromException {\n+\n+        String url = \"http://\" + hostname + \"/\" + action;\n+        ContentResponse response = null;\n+        try {\n+            response = httpClient.newRequest(url).method(HttpMethod.GET).send();", "originalCommit": "4ec98e91c1ab9ba9531efeb1d4e4d0e8362591f9", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDA0NDY0NA==", "url": "https://github.com/openhab/openhab-addons/pull/8362#discussion_r484044644", "bodyText": "added a 10 sec timeout", "author": "pail23", "createdAt": "2020-09-06T09:14:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzkzMzIyNA=="}], "type": "inlineReview"}, {"oid": "b61e17dfba574b96e9b4d518098fbb13fe6bcdb4", "url": "https://github.com/openhab/openhab-addons/commit/b61e17dfba574b96e9b4d518098fbb13fe6bcdb4", "message": "initial commit of the skeletton\n\nSigned-off-by: Paul Frank <pail@gmx.net>", "committedDate": "2020-09-06T16:02:42Z", "type": "commit"}, {"oid": "bd5b6ad89ccc806f038d9459812fe3f1dd0fafd9", "url": "https://github.com/openhab/openhab-addons/commit/bd5b6ad89ccc806f038d9459812fe3f1dd0fafd9", "message": "First feature set\n\nSigned-off-by: Paul Frank <pail@gmx.net>", "committedDate": "2020-09-06T16:02:42Z", "type": "commit"}, {"oid": "0b7d68bfb1886678ca027f906bbcd84d25aebaf1", "url": "https://github.com/openhab/openhab-addons/commit/0b7d68bfb1886678ca027f906bbcd84d25aebaf1", "message": "finetuning and documentation\n\nSigned-off-by: Paul Frank <pail@gmx.net>", "committedDate": "2020-09-06T16:02:42Z", "type": "commit"}, {"oid": "96f2bd386f20345646ae5431f2c2fb3eb7c7c3b8", "url": "https://github.com/openhab/openhab-addons/commit/96f2bd386f20345646ae5431f2c2fb3eb7c7c3b8", "message": "remove i18n\n\nSigned-off-by: Paul Frank <pail@gmx.net>", "committedDate": "2020-09-06T16:02:42Z", "type": "commit"}, {"oid": "958bf97301d36627528c6b91c6909d08f92cab4f", "url": "https://github.com/openhab/openhab-addons/commit/958bf97301d36627528c6b91c6909d08f92cab4f", "message": "fix pom file\n\nSigned-off-by: Paul Frank <pail@gmx.net>", "committedDate": "2020-09-06T16:04:09Z", "type": "commit"}, {"oid": "b715190dc88505859d55642a1a04f87431db8dcf", "url": "https://github.com/openhab/openhab-addons/commit/b715190dc88505859d55642a1a04f87431db8dcf", "message": "Update bundles/org.openhab.binding.mystrom/src/main/java/org/openhab/binding/mystrom/internal/MyStromBindingConstants.java\n\nCo-authored-by: Hilbrand Bouwkamp <hilbrand@h72.nl>\nSigned-off-by: Paul Frank <pail@gmx.net>", "committedDate": "2020-09-06T16:04:09Z", "type": "commit"}, {"oid": "5587a5c46b003769831d9b61060ceb65d3ac60a6", "url": "https://github.com/openhab/openhab-addons/commit/5587a5c46b003769831d9b61060ceb65d3ac60a6", "message": "Update bundles/org.openhab.binding.mystrom/src/main/java/org/openhab/binding/mystrom/internal/MyStromBindingConstants.java\n\nCo-authored-by: Hilbrand Bouwkamp <hilbrand@h72.nl>\nSigned-off-by: Paul Frank <pail@gmx.net>", "committedDate": "2020-09-06T16:04:09Z", "type": "commit"}, {"oid": "e099b307b0c2c90abbf94e17681cc667f03cac26", "url": "https://github.com/openhab/openhab-addons/commit/e099b307b0c2c90abbf94e17681cc667f03cac26", "message": "Update bundles/org.openhab.binding.mystrom/src/main/java/org/openhab/binding/mystrom/internal/MyStromHandler.java\n\nCo-authored-by: Hilbrand Bouwkamp <hilbrand@h72.nl>\nSigned-off-by: Paul Frank <pail@gmx.net>", "committedDate": "2020-09-06T16:04:09Z", "type": "commit"}, {"oid": "f8f5a2dd44ea3f87a42f565ed0a4343bab61d972", "url": "https://github.com/openhab/openhab-addons/commit/f8f5a2dd44ea3f87a42f565ed0a4343bab61d972", "message": "Update bundles/org.openhab.binding.mystrom/src/main/java/org/openhab/binding/mystrom/internal/MyStromHandler.java\n\nCo-authored-by: Hilbrand Bouwkamp <hilbrand@h72.nl>\nSigned-off-by: Paul Frank <pail@gmx.net>", "committedDate": "2020-09-06T16:04:09Z", "type": "commit"}, {"oid": "8f5a705178f67ba6abb3b329c4a4614ba4ded9a7", "url": "https://github.com/openhab/openhab-addons/commit/8f5a705178f67ba6abb3b329c4a4614ba4ded9a7", "message": "Update bundles/org.openhab.binding.mystrom/src/main/java/org/openhab/binding/mystrom/internal/MyStromHandler.java\n\nCo-authored-by: Hilbrand Bouwkamp <hilbrand@h72.nl>\nSigned-off-by: Paul Frank <pail@gmx.net>", "committedDate": "2020-09-06T16:04:09Z", "type": "commit"}, {"oid": "17afc224ef0507b39b4810e8441a2077b5a781f3", "url": "https://github.com/openhab/openhab-addons/commit/17afc224ef0507b39b4810e8441a2077b5a781f3", "message": "fixed review comments\n\nSigned-off-by: Paul Frank <pail@gmx.net>", "committedDate": "2020-09-06T16:04:09Z", "type": "commit"}, {"oid": "fcbfbbaec4fcc0774ac45170ed519bcef426179e", "url": "https://github.com/openhab/openhab-addons/commit/fcbfbbaec4fcc0774ac45170ed519bcef426179e", "message": "apply spotless\n\nSigned-off-by: Paul Frank <pail@gmx.net>", "committedDate": "2020-09-06T16:04:09Z", "type": "commit"}, {"oid": "90de63b3fbcc14d755769dba735ee927b8067702", "url": "https://github.com/openhab/openhab-addons/commit/90de63b3fbcc14d755769dba735ee927b8067702", "message": "fix wrong offline state\n\nSigned-off-by: Paul Frank <pail@gmx.net>", "committedDate": "2020-09-06T16:04:09Z", "type": "commit"}, {"oid": "879947d0ec060b98411508ed5cb85e909e14b0de", "url": "https://github.com/openhab/openhab-addons/commit/879947d0ec060b98411508ed5cb85e909e14b0de", "message": "fixed review comments\n\nSigned-off-by: Paul Frank <pail@gmx.net>", "committedDate": "2020-09-06T16:04:09Z", "type": "commit"}, {"oid": "81229d71aec16b9cc0eb0d1ef74930f6bf75e49a", "url": "https://github.com/openhab/openhab-addons/commit/81229d71aec16b9cc0eb0d1ef74930f6bf75e49a", "message": "changes in .project\n\nSigned-off-by: Paul Frank <pail@gmx.net>", "committedDate": "2020-09-06T16:04:10Z", "type": "commit"}, {"oid": "247dd57b571bfe25a5560fc0a460dc6a4a061866", "url": "https://github.com/openhab/openhab-addons/commit/247dd57b571bfe25a5560fc0a460dc6a4a061866", "message": "spotless:apply\n\nSigned-off-by: Paul Frank <pail@gmx.net>", "committedDate": "2020-09-06T16:10:06Z", "type": "commit"}, {"oid": "e2d8c7dacd83a4b9065f330f1e517bd3d6035b5a", "url": "https://github.com/openhab/openhab-addons/commit/e2d8c7dacd83a4b9065f330f1e517bd3d6035b5a", "message": "apply spotless\n\nSigned-off-by: Paul Frank <pail@gmx.net>", "committedDate": "2020-09-06T17:09:56Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDA5OTE0NQ==", "url": "https://github.com/openhab/openhab-addons/pull/8362#discussion_r484099145", "body": "Can this if be removed, then?", "bodyText": "Can this if be removed, then?", "bodyHTML": "<p dir=\"auto\">Can this if be removed, then?</p>", "author": "fwolter", "createdAt": "2020-09-06T18:14:53Z", "path": "bundles/org.openhab.binding.mystrom/src/main/java/org/openhab/binding/mystrom/internal/MyStromHandler.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mystrom.internal;\n+\n+import static org.eclipse.smarthome.core.library.unit.SIUnits.CELSIUS;\n+import static org.eclipse.smarthome.core.library.unit.SmartHomeUnits.WATT;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.CHANNEL_POWER;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.CHANNEL_SWITCH;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.CHANNEL_TEMPERATURE;\n+\n+import java.time.Duration;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.cache.ExpiringCache;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link MyStromHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Paul Frank - Initial contribution\n+ */\n+@NonNullByDefault\n+public class MyStromHandler extends BaseThingHandler {\n+\n+    private static class MyStromReport {\n+\n+        public float power;\n+        public boolean relay;\n+        public float temperature;\n+    }\n+\n+    private static final int HTTP_OK_CODE = 200;\n+    private static final String COMMUNICATION_ERROR = \"Error while communicating to the myStrom plug: \";\n+    private static final String HTTP_REQUEST_URL_PREFIX = \"http://\";\n+    private static final String HTTPS_REQUEST_URL_PREFIX = \"https://\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(MyStromHandler.class);\n+\n+    private HttpClient httpClient;\n+    private String hostname = \"\";\n+\n+    private @Nullable ScheduledFuture<?> pollingJob;\n+    private ExpiringCache<MyStromReport> cache = new ExpiringCache<>(Duration.ofSeconds(3), this::getReport);\n+    private final Gson gson = new Gson();\n+\n+    public MyStromHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        this.httpClient = httpClient;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        try {\n+            if (command instanceof RefreshType) {\n+                pollDevice();\n+            } else {\n+                if (command instanceof OnOffType && CHANNEL_SWITCH.equals(channelUID.getId())) {\n+                    sendHttpGet(\"relay?state=\" + (command == OnOffType.ON ? \"1\" : \"0\"));\n+                    scheduler.schedule(this::pollDevice, 500, TimeUnit.MILLISECONDS);\n+                }\n+            }\n+        } catch (MyStromException e) {\n+            logger.warn(\"Error while handling command {}\", e.getMessage());\n+        }\n+    }\n+\n+    private @Nullable MyStromReport getReport() {\n+        try {\n+            String returnContent = sendHttpGet(\"report\");\n+            MyStromReport report = gson.fromJson(returnContent, MyStromReport.class);\n+            updateStatus(ThingStatus.ONLINE);\n+            return report;\n+        } catch (MyStromException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, e.getMessage());\n+            return null;\n+        }\n+    }\n+\n+    private void pollDevice() {\n+        MyStromReport report = cache.getValue();\n+        if (report != null) {\n+            updateState(CHANNEL_SWITCH, report.relay ? OnOffType.ON : OnOffType.OFF);\n+            updateState(CHANNEL_POWER, QuantityType.valueOf(report.power, WATT));\n+            updateState(CHANNEL_TEMPERATURE, QuantityType.valueOf(report.temperature, CELSIUS));\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        MyStromConfiguration config = getConfigAs(MyStromConfiguration.class);\n+        if (config.hostname.startsWith(HTTP_REQUEST_URL_PREFIX)\n+                || config.hostname.startsWith(HTTPS_REQUEST_URL_PREFIX)) {\n+            this.hostname = config.hostname;\n+        } else {\n+            this.hostname = HTTP_REQUEST_URL_PREFIX + config.hostname;\n+        }", "originalCommit": "e2d8c7dacd83a4b9065f330f1e517bd3d6035b5a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDEwODQzOA==", "url": "https://github.com/openhab/openhab-addons/pull/8362#discussion_r484108438", "bodyText": "Why would you remove this? And how would you handle the prefix? Always use http?", "author": "pail23", "createdAt": "2020-09-06T20:02:44Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDA5OTE0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDEwODgwNw==", "url": "https://github.com/openhab/openhab-addons/pull/8362#discussion_r484108807", "bodyText": "As you defined <context>network-address</context> the user cannot enter an URL anymore, but a network address. So, the protocol should be suffixed always with your current implementation.", "author": "fwolter", "createdAt": "2020-09-06T20:06:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDA5OTE0NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDEwOTU4NA==", "url": "https://github.com/openhab/openhab-addons/pull/8362#discussion_r484109584", "bodyText": "OK, I have adapted the code accordingly", "author": "pail23", "createdAt": "2020-09-06T20:15:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDA5OTE0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDA5OTIxNg==", "url": "https://github.com/openhab/openhab-addons/pull/8362#discussion_r484099216", "body": "Base class destructors should be called at the end of the implementing destructors.", "bodyText": "Base class destructors should be called at the end of the implementing destructors.", "bodyHTML": "<p dir=\"auto\">Base class destructors should be called at the end of the implementing destructors.</p>", "author": "fwolter", "createdAt": "2020-09-06T18:15:41Z", "path": "bundles/org.openhab.binding.mystrom/src/main/java/org/openhab/binding/mystrom/internal/MyStromHandler.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.mystrom.internal;\n+\n+import static org.eclipse.smarthome.core.library.unit.SIUnits.CELSIUS;\n+import static org.eclipse.smarthome.core.library.unit.SmartHomeUnits.WATT;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.CHANNEL_POWER;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.CHANNEL_SWITCH;\n+import static org.openhab.binding.mystrom.internal.MyStromBindingConstants.CHANNEL_TEMPERATURE;\n+\n+import java.time.Duration;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.jetty.client.HttpClient;\n+import org.eclipse.jetty.client.api.ContentResponse;\n+import org.eclipse.jetty.http.HttpMethod;\n+import org.eclipse.smarthome.core.cache.ExpiringCache;\n+import org.eclipse.smarthome.core.library.types.OnOffType;\n+import org.eclipse.smarthome.core.library.types.QuantityType;\n+import org.eclipse.smarthome.core.thing.ChannelUID;\n+import org.eclipse.smarthome.core.thing.Thing;\n+import org.eclipse.smarthome.core.thing.ThingStatus;\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\n+import org.eclipse.smarthome.core.types.Command;\n+import org.eclipse.smarthome.core.types.RefreshType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * The {@link MyStromHandler} is responsible for handling commands, which are\n+ * sent to one of the channels.\n+ *\n+ * @author Paul Frank - Initial contribution\n+ */\n+@NonNullByDefault\n+public class MyStromHandler extends BaseThingHandler {\n+\n+    private static class MyStromReport {\n+\n+        public float power;\n+        public boolean relay;\n+        public float temperature;\n+    }\n+\n+    private static final int HTTP_OK_CODE = 200;\n+    private static final String COMMUNICATION_ERROR = \"Error while communicating to the myStrom plug: \";\n+    private static final String HTTP_REQUEST_URL_PREFIX = \"http://\";\n+    private static final String HTTPS_REQUEST_URL_PREFIX = \"https://\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(MyStromHandler.class);\n+\n+    private HttpClient httpClient;\n+    private String hostname = \"\";\n+\n+    private @Nullable ScheduledFuture<?> pollingJob;\n+    private ExpiringCache<MyStromReport> cache = new ExpiringCache<>(Duration.ofSeconds(3), this::getReport);\n+    private final Gson gson = new Gson();\n+\n+    public MyStromHandler(Thing thing, HttpClient httpClient) {\n+        super(thing);\n+        this.httpClient = httpClient;\n+    }\n+\n+    @Override\n+    public void handleCommand(ChannelUID channelUID, Command command) {\n+        try {\n+            if (command instanceof RefreshType) {\n+                pollDevice();\n+            } else {\n+                if (command instanceof OnOffType && CHANNEL_SWITCH.equals(channelUID.getId())) {\n+                    sendHttpGet(\"relay?state=\" + (command == OnOffType.ON ? \"1\" : \"0\"));\n+                    scheduler.schedule(this::pollDevice, 500, TimeUnit.MILLISECONDS);\n+                }\n+            }\n+        } catch (MyStromException e) {\n+            logger.warn(\"Error while handling command {}\", e.getMessage());\n+        }\n+    }\n+\n+    private @Nullable MyStromReport getReport() {\n+        try {\n+            String returnContent = sendHttpGet(\"report\");\n+            MyStromReport report = gson.fromJson(returnContent, MyStromReport.class);\n+            updateStatus(ThingStatus.ONLINE);\n+            return report;\n+        } catch (MyStromException e) {\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, e.getMessage());\n+            return null;\n+        }\n+    }\n+\n+    private void pollDevice() {\n+        MyStromReport report = cache.getValue();\n+        if (report != null) {\n+            updateState(CHANNEL_SWITCH, report.relay ? OnOffType.ON : OnOffType.OFF);\n+            updateState(CHANNEL_POWER, QuantityType.valueOf(report.power, WATT));\n+            updateState(CHANNEL_TEMPERATURE, QuantityType.valueOf(report.temperature, CELSIUS));\n+        }\n+    }\n+\n+    @Override\n+    public void initialize() {\n+        MyStromConfiguration config = getConfigAs(MyStromConfiguration.class);\n+        if (config.hostname.startsWith(HTTP_REQUEST_URL_PREFIX)\n+                || config.hostname.startsWith(HTTPS_REQUEST_URL_PREFIX)) {\n+            this.hostname = config.hostname;\n+        } else {\n+            this.hostname = HTTP_REQUEST_URL_PREFIX + config.hostname;\n+        }\n+\n+        updateStatus(ThingStatus.UNKNOWN);\n+        pollingJob = scheduler.scheduleWithFixedDelay(this::pollDevice, 0, config.refresh, TimeUnit.SECONDS);\n+    }\n+\n+    @Override\n+    public void dispose() {\n+        super.dispose();", "originalCommit": "e2d8c7dacd83a4b9065f330f1e517bd3d6035b5a", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDEwODQ1Ng==", "url": "https://github.com/openhab/openhab-addons/pull/8362#discussion_r484108456", "bodyText": "done", "author": "pail23", "createdAt": "2020-09-06T20:02:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDA5OTIxNg=="}], "type": "inlineReview"}, {"oid": "6f1569c407a65a33eaf5f767f2ec9e9c27e44210", "url": "https://github.com/openhab/openhab-addons/commit/6f1569c407a65a33eaf5f767f2ec9e9c27e44210", "message": "fix review comments\n\nSigned-off-by: Paul Frank <pail@gmx.net>", "committedDate": "2020-09-06T20:01:35Z", "type": "commit"}, {"oid": "76e035309439e96d440271da3df5fbc7b8f7cb47", "url": "https://github.com/openhab/openhab-addons/commit/76e035309439e96d440271da3df5fbc7b8f7cb47", "message": "remove filtered resource\n\nSigned-off-by: Paul Frank <pail@gmx.net>", "committedDate": "2020-09-06T20:06:48Z", "type": "commit"}, {"oid": "c659befba0d64d8f88aa798e864402d38bebe657", "url": "https://github.com/openhab/openhab-addons/commit/c659befba0d64d8f88aa798e864402d38bebe657", "message": "always use hostname without prefix\n\nSigned-off-by: Paul Frank <pail@gmx.net>", "committedDate": "2020-09-06T20:15:26Z", "type": "commit"}]}