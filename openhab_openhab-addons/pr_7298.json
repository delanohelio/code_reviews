{"pr_number": 7298, "pr_title": "[dwdpollenflug] Initial Contribution", "pr_author": "DerOetzi", "pr_createdAt": "2020-04-05T10:02:15Z", "pr_url": "https://github.com/openhab/openhab-addons/pull/7298", "timeline": [{"oid": "d567c7d32514f4e1e29de867abf3db2ec735b1d2", "url": "https://github.com/openhab/openhab-addons/commit/d567c7d32514f4e1e29de867abf3db2ec735b1d2", "message": "[DWDPollenflug] New Binding retry\n\nSigned-off-by: Johannes DerOetzi Ott <info@johannes-ott.net>", "committedDate": "2020-04-05T15:18:39Z", "type": "forcePushed"}, {"oid": "3b23b1a04195cb8378662364104abe4263ec7d65", "url": "https://github.com/openhab/openhab-addons/commit/3b23b1a04195cb8378662364104abe4263ec7d65", "message": "[DWDPollenflug] New Binding retry\n\nSigned-off-by: Johannes DerOetzi Ott <info@johannes-ott.net>", "committedDate": "2020-04-07T10:32:48Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM3ODc5Mw==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406378793", "body": "You can store the `HttpClient` instead of the factory. ", "bodyText": "You can store the HttpClient instead of the factory.", "bodyHTML": "<p dir=\"auto\">You can store the <code>HttpClient</code> instead of the factory.</p>", "author": "J-N-K", "createdAt": "2020-04-09T17:57:53Z", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/DWDPollenflugHandlerFactory.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.util.Collections;\r\n+import java.util.Set;\r\n+import java.util.stream.Collectors;\r\n+import java.util.stream.Stream;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandlerFactory;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandlerFactory;\r\n+import org.eclipse.smarthome.io.net.http.HttpClientFactory;\r\n+import org.openhab.binding.dwdpollenflug.internal.handler.DWDPollenflugBridgeHandler;\r\n+import org.openhab.binding.dwdpollenflug.internal.handler.DWDPollenflugRegionHandler;\r\n+import org.osgi.service.component.annotations.Activate;\r\n+import org.osgi.service.component.annotations.Component;\r\n+import org.osgi.service.component.annotations.Reference;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugHandlerFactory} is responsible for creating things and thing\r\n+ * handlers.\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+@Component(configurationPid = \"binding.dwdpollenflug\", service = ThingHandlerFactory.class)\r\n+public class DWDPollenflugHandlerFactory extends BaseThingHandlerFactory {\r\n+\r\n+    private static final Set<ThingTypeUID> SUPPORTED_THING_TYPES_UIDS = Collections\r\n+            .unmodifiableSet(Stream.of(THING_TYPE_BRIDGE, THING_TYPE_REGION).collect(Collectors.toSet()));\r\n+\r\n+    private final HttpClientFactory httpClientFactory;\r\n+\r\n+    @Activate\r\n+    public DWDPollenflugHandlerFactory(final @Reference HttpClientFactory httpClientFactory) {\r\n+        this.httpClientFactory = httpClientFactory;\r", "originalCommit": "3b23b1a04195cb8378662364104abe4263ec7d65", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkwNjc0NA==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406906744", "bodyText": "Please check my fix!", "author": "DerOetzi", "createdAt": "2020-04-10T19:26:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM3ODc5Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM3OTA5NQ==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406379095", "body": "```suggestion\r\npublic class DWDPollingException extends Exception {\r\n\r\n```\r\n\r\nusing checked exceptions is safer", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class DWDPollingException extends RuntimeException {\n          \n          \n            \n            public class DWDPollingException extends Exception {\n          \n          \n            \n            \n          \n      \n    \n    \n  \n\nusing checked exceptions is safer", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"><span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">DWDPollingException</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e x x-first x-last\">RuntimeException</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"><span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">DWDPollingException</span> <span class=\"pl-k\">extends</span> <span class=\"pl-e x x-first x-last\">Exception</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">using checked exceptions is safer</p>", "author": "J-N-K", "createdAt": "2020-04-09T17:58:27Z", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/DWDPollingException.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+\r\n+/**\r\n+ * The {@link DWDPollingException} class is the exception for all polling errors.\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollingException extends RuntimeException {\r", "originalCommit": "3b23b1a04195cb8378662364104abe4263ec7d65", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkwNjgzMw==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406906833", "bodyText": "Will have a look later.", "author": "DerOetzi", "createdAt": "2020-04-10T19:26:26Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM3OTA5NQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxODUyMQ==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406918521", "bodyText": "Changed", "author": "DerOetzi", "createdAt": "2020-04-10T19:59:35Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM3OTA5NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM3OTc0MA==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406379740", "body": "since there is a default, add it here\r\n```suggestion\r\n    public int refresh = 30;\r\n```\r\n\r\nand no need for a getter, just use public fields in configuration and DTO", "bodyText": "since there is a default, add it here\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private int refresh;\n          \n          \n            \n                public int refresh = 30;\n          \n      \n    \n    \n  \n\nand no need for a getter, just use public fields in configuration and DTO", "bodyHTML": "<p dir=\"auto\">since there is a default, add it here</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k x x-first x-last\">private</span> <span class=\"pl-k\">int</span> refresh;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k x x-first x-last\">public</span> <span class=\"pl-k\">int</span> refresh<span class=\"x x-first\"> </span><span class=\"pl-k x\">=</span><span class=\"x\"> </span><span class=\"pl-c1 x x-last\">30</span>;</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">and no need for a getter, just use public fields in configuration and DTO</p>", "author": "J-N-K", "createdAt": "2020-04-09T17:59:28Z", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/config/DWDPollenflugBridgeConfiguration.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.config;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.openhab.binding.dwdpollenflug.internal.handler.DWDPollenflugBridgeHandler;\r\n+\r\n+/**\r\n+ * Configuration for the {@link DWDPollenflugBridgeHandler}\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugBridgeConfiguration {\r\n+    private int refresh;\r", "originalCommit": "3b23b1a04195cb8378662364104abe4263ec7d65", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgzMDc4MQ==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406830781", "bodyText": "But in Java logic this is not the same, a private field is although settable from outside the class if I want to prevent this I think this should be a private with a getter.", "author": "DerOetzi", "createdAt": "2020-04-10T16:19:20Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM3OTc0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg1NDYzNA==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406854634", "bodyText": "True, but who should do that in a private member of a class? The configuration is not available outside of the handler.", "author": "J-N-K", "createdAt": "2020-04-10T17:16:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM3OTc0MA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxMTg0NQ==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406911845", "bodyText": "Changed! Please check my fix!", "author": "DerOetzi", "createdAt": "2020-04-10T19:40:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM3OTc0MA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM3OTk4Nw==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406379987", "body": "see above", "bodyText": "see above", "bodyHTML": "<p dir=\"auto\">see above</p>", "author": "J-N-K", "createdAt": "2020-04-09T17:59:56Z", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/config/DWDPollenflugRegionConfiguration.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.config;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+\r\n+/**\r\n+ * Configuration for the {@link DWDPollenflugRegionHandler}\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugRegionConfiguration {\r\n+    private int regionID;\r", "originalCommit": "3b23b1a04195cb8378662364104abe4263ec7d65", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkxMTg4MQ==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406911881", "bodyText": "Changed! Please check my fix!", "author": "DerOetzi", "createdAt": "2020-04-10T19:40:43Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM3OTk4Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM4NjA2Ng==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406386066", "body": "```\r\nregions = json.getRegions().stream().collect(Collectors.toMap(DWDRegion::getRegionId, r -> r);\r\n```\r\n\r\nand remove the initialization above", "bodyText": "regions = json.getRegions().stream().collect(Collectors.toMap(DWDRegion::getRegionId, r -> r);\n\nand remove the initialization above", "bodyHTML": "<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"regions = json.getRegions().stream().collect(Collectors.toMap(DWDRegion::getRegionId, r -&gt; r);\"><pre><code>regions = json.getRegions().stream().collect(Collectors.toMap(DWDRegion::getRegionId, r -&gt; r);\n</code></pre></div>\n<p dir=\"auto\">and remove the initialization above</p>", "author": "J-N-K", "createdAt": "2020-04-09T18:11:11Z", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/dto/DWDPollenflug.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.dto;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.text.SimpleDateFormat;\r\n+import java.time.ZoneId;\r\n+import java.time.ZonedDateTime;\r\n+import java.util.Collections;\r\n+import java.util.Date;\r\n+import java.util.HashMap;\r\n+import java.util.Map;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\r\n+import org.eclipse.smarthome.core.types.State;\r\n+import org.eclipse.smarthome.core.types.UnDefType;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflug} class is internal DWD data structure.\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflug {\r\n+    private static final SimpleDateFormat FORMATTER = new SimpleDateFormat(DATE_PATTERN);\r\n+\r\n+    private final Date created = new Date();\r\n+\r\n+    private final @Nullable Date nextUpdate;\r\n+\r\n+    private final @Nullable Date lastUpdate;\r\n+\r\n+    private final Map<String, String> properties;\r\n+\r\n+    private final Map<String, State> channels = new HashMap<>();\r\n+\r\n+    private final Map<Integer, DWDRegion> regions = new HashMap<>();\r\n+\r\n+    public DWDPollenflug(DWDPollenflugJSON json) {\r\n+        nextUpdate = json.getNextUpdate();\r\n+        lastUpdate = json.getLastUpdate();\r\n+\r\n+        properties = initProperties(json);\r\n+\r\n+        for (DWDRegionJSON regionJSON : json.getRegions()) {\r", "originalCommit": "3b23b1a04195cb8378662364104abe4263ec7d65", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg3OTM0OA==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406879348", "bodyText": "This is suggestion seems not to be correct because there is no mapping from DWDRegionJSON to DWDRegion object done on it", "author": "DerOetzi", "createdAt": "2020-04-10T18:15:46Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM4NjA2Ng=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA2NjQ0Mg==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407066442", "bodyText": "Refactored whole DTO closing this conversation, because of huge changes.", "author": "DerOetzi", "createdAt": "2020-04-11T13:50:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM4NjA2Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM5MjcwNQ==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406392705", "body": "In general I like short methods amd modularization. But I think this is overkill.\r\n```suggestion\r\n            channels.put(CHANNEL_UPDATES + \"#\" + CHANNEL_REFRESHED, \r\n                created == null ? UndefType.NULL : new DateTimeType(ZonedDateTime.ofInstant(created.toInstant(), ZoneId.systemDefault()));\r\n            channels.put(CHANNEL_UPDATES + \"#\" + CHANNEL_NEXT_UPDATE, \r\n                nextUpdate == null ? UndefType.NULL : new DateTimeType(ZonedDateTime.ofInstant(nexrUpdate.toInstant(), ZoneId.systemDefault()));\r\n            channels.put(CHANNEL_UPDATES + \"#\" + CHANNEL_LAST_UPDATE, lastUpdate == null ? UndefType.NULL : new DateTimeType(ZonedDateTime.ofInstant(lastUpdate.toInstant(), ZoneId.systemDefault()));\r\n```\r\n\r\nin the constrcutor is perfectly fine", "bodyText": "In general I like short methods amd modularization. But I think this is overkill.\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private void parseChannels(DWDPollenflugJSON json) {\n          \n          \n            \n                    createChannel(CHANNEL_REFRESHED, created);\n          \n          \n            \n                    createChannel(CHANNEL_NEXT_UPDATE, nextUpdate);\n          \n          \n            \n                    createChannel(CHANNEL_LAST_UPDATE, lastUpdate);\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                private void createChannel(String subchannel, @Nullable Date date) {\n          \n          \n            \n                    final String channelName = CHANNEL_UPDATES + \"#\" + subchannel;\n          \n          \n            \n                    if (date == null) {\n          \n          \n            \n                        channels.put(channelName, UnDefType.NULL);\n          \n          \n            \n                    } else {\n          \n          \n            \n                        ZonedDateTime zoned = ZonedDateTime.ofInstant(date.toInstant(), ZoneId.systemDefault());\n          \n          \n            \n                        channels.put(channelName, new DateTimeType(zoned));\n          \n          \n            \n                    }\n          \n          \n            \n                }\n          \n          \n            \n                        channels.put(CHANNEL_UPDATES + \"#\" + CHANNEL_REFRESHED, \n          \n          \n            \n                            created == null ? UndefType.NULL : new DateTimeType(ZonedDateTime.ofInstant(created.toInstant(), ZoneId.systemDefault()));\n          \n          \n            \n                        channels.put(CHANNEL_UPDATES + \"#\" + CHANNEL_NEXT_UPDATE, \n          \n          \n            \n                            nextUpdate == null ? UndefType.NULL : new DateTimeType(ZonedDateTime.ofInstant(nexrUpdate.toInstant(), ZoneId.systemDefault()));\n          \n          \n            \n                        channels.put(CHANNEL_UPDATES + \"#\" + CHANNEL_LAST_UPDATE, lastUpdate == null ? UndefType.NULL : new DateTimeType(ZonedDateTime.ofInstant(lastUpdate.toInstant(), ZoneId.systemDefault()));\n          \n      \n    \n    \n  \n\nin the constrcutor is perfectly fine", "bodyHTML": "<p dir=\"auto\">In general I like short methods amd modularization. But I think this is overkill.</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"97\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">private</span> <span class=\"pl-k\">void</span> parseChannels(<span class=\"pl-smi\">DWDPollenflugJSON</span> json) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"98\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        createChannel(<span class=\"pl-c1\">CHANNEL_REFRESHED</span>, created);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"99\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        createChannel(<span class=\"pl-c1\">CHANNEL_NEXT_UPDATE</span>, nextUpdate);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"100\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        createChannel(<span class=\"pl-c1\">CHANNEL_LAST_UPDATE</span>, lastUpdate);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"101\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"102\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"103\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">private</span> <span class=\"pl-k\">void</span> createChannel(<span class=\"pl-smi\">String</span> subchannel, <span class=\"pl-k\">@Nullable</span> <span class=\"pl-smi\">Date</span> date) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"104\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">final</span> <span class=\"pl-smi\">String</span> channelName <span class=\"pl-k\">=</span> <span class=\"pl-c1\">CHANNEL_UPDATES</span> <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>#<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> subchannel;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"105\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">if</span> (date <span class=\"pl-k\">==</span> <span class=\"pl-c1\">null</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"106\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            channels<span class=\"pl-k\">.</span>put(channelName, <span class=\"pl-smi\">UnDefType</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>NULL</span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"107\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        } <span class=\"pl-k\">else</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"108\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-smi\">ZonedDateTime</span> zoned <span class=\"pl-k\">=</span> <span class=\"pl-smi\">ZonedDateTime</span><span class=\"pl-k\">.</span>ofInstant(date<span class=\"pl-k\">.</span>toInstant(), <span class=\"pl-smi\">ZoneId</span><span class=\"pl-k\">.</span>systemDefault());</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"109\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            channels<span class=\"pl-k\">.</span>put(channelName, <span class=\"pl-k\">new</span> <span class=\"pl-smi\">DateTimeType</span>(zoned));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"110\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"111\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"97\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            channels<span class=\"pl-k\">.</span>put(<span class=\"pl-c1\">CHANNEL_UPDATES</span> <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>#<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> <span class=\"pl-c1\">CHANNEL_REFRESHED</span>, </td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"98\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                created <span class=\"pl-k\">==</span> <span class=\"pl-c1\">null</span> <span class=\"pl-k\">?</span> <span class=\"pl-smi\">UndefType</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>NULL</span> <span class=\"pl-k\">:</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">DateTimeType</span>(<span class=\"pl-smi\">ZonedDateTime</span><span class=\"pl-k\">.</span>ofInstant(created<span class=\"pl-k\">.</span>toInstant(), <span class=\"pl-smi\">ZoneId</span><span class=\"pl-k\">.</span>systemDefault()));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"99\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            channels<span class=\"pl-k\">.</span>put(<span class=\"pl-c1\">CHANNEL_UPDATES</span> <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>#<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> <span class=\"pl-c1\">CHANNEL_NEXT_UPDATE</span>, </td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"100\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                nextUpdate <span class=\"pl-k\">==</span> <span class=\"pl-c1\">null</span> <span class=\"pl-k\">?</span> <span class=\"pl-smi\">UndefType</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>NULL</span> <span class=\"pl-k\">:</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">DateTimeType</span>(<span class=\"pl-smi\">ZonedDateTime</span><span class=\"pl-k\">.</span>ofInstant(nexrUpdate<span class=\"pl-k\">.</span>toInstant(), <span class=\"pl-smi\">ZoneId</span><span class=\"pl-k\">.</span>systemDefault()));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"101\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            channels<span class=\"pl-k\">.</span>put(<span class=\"pl-c1\">CHANNEL_UPDATES</span> <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>#<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> <span class=\"pl-c1\">CHANNEL_LAST_UPDATE</span>, lastUpdate <span class=\"pl-k\">==</span> <span class=\"pl-c1\">null</span> <span class=\"pl-k\">?</span> <span class=\"pl-smi\">UndefType</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span>NULL</span> <span class=\"pl-k\">:</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">DateTimeType</span>(<span class=\"pl-smi\">ZonedDateTime</span><span class=\"pl-k\">.</span>ofInstant(lastUpdate<span class=\"pl-k\">.</span>toInstant(), <span class=\"pl-smi\">ZoneId</span><span class=\"pl-k\">.</span>systemDefault()));</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">in the constrcutor is perfectly fine</p>", "author": "J-N-K", "createdAt": "2020-04-09T18:22:43Z", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/dto/DWDPollenflug.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.dto;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.text.SimpleDateFormat;\r\n+import java.time.ZoneId;\r\n+import java.time.ZonedDateTime;\r\n+import java.util.Collections;\r\n+import java.util.Date;\r\n+import java.util.HashMap;\r\n+import java.util.Map;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\r\n+import org.eclipse.smarthome.core.types.State;\r\n+import org.eclipse.smarthome.core.types.UnDefType;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflug} class is internal DWD data structure.\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflug {\r\n+    private static final SimpleDateFormat FORMATTER = new SimpleDateFormat(DATE_PATTERN);\r\n+\r\n+    private final Date created = new Date();\r\n+\r\n+    private final @Nullable Date nextUpdate;\r\n+\r\n+    private final @Nullable Date lastUpdate;\r\n+\r\n+    private final Map<String, String> properties;\r\n+\r\n+    private final Map<String, State> channels = new HashMap<>();\r\n+\r\n+    private final Map<Integer, DWDRegion> regions = new HashMap<>();\r\n+\r\n+    public DWDPollenflug(DWDPollenflugJSON json) {\r\n+        nextUpdate = json.getNextUpdate();\r\n+        lastUpdate = json.getLastUpdate();\r\n+\r\n+        properties = initProperties(json);\r\n+\r\n+        for (DWDRegionJSON regionJSON : json.getRegions()) {\r\n+            DWDRegion region = new DWDRegion(regionJSON);\r\n+            regions.put(region.getRegionID(), region);\r\n+        }\r\n+\r\n+        parseChannels(json);\r\n+    }\r\n+\r\n+    private synchronized Map<String, String> initProperties(DWDPollenflugJSON json) {\r\n+        Map<String, String> map = new HashMap<>();\r\n+\r\n+        map.put(PROPERTY_NAME, json.getName());\r\n+        map.put(PROPERTY_SENDER, json.getSender());\r\n+        map.put(PROPERTY_REFRESHED, FORMATTER.format(created));\r\n+\r\n+        if (nextUpdate != null) {\r\n+            map.put(PROPERTY_NEXT_UPDATE, FORMATTER.format(nextUpdate));\r\n+        }\r\n+\r\n+        if (lastUpdate != null) {\r\n+            map.put(PROPERTY_LAST_UPDATE, FORMATTER.format(lastUpdate));\r\n+        }\r\n+\r\n+        return Collections.unmodifiableMap(map);\r\n+    }\r\n+\r\n+    public Map<String, String> getProperties() {\r\n+        return properties;\r\n+    }\r\n+\r\n+    private void parseChannels(DWDPollenflugJSON json) {\r\n+        createChannel(CHANNEL_REFRESHED, created);\r\n+        createChannel(CHANNEL_NEXT_UPDATE, nextUpdate);\r\n+        createChannel(CHANNEL_LAST_UPDATE, lastUpdate);\r\n+    }\r\n+\r\n+    private void createChannel(String subchannel, @Nullable Date date) {\r\n+        final String channelName = CHANNEL_UPDATES + \"#\" + subchannel;\r\n+        if (date == null) {\r\n+            channels.put(channelName, UnDefType.NULL);\r\n+        } else {\r\n+            ZonedDateTime zoned = ZonedDateTime.ofInstant(date.toInstant(), ZoneId.systemDefault());\r\n+            channels.put(channelName, new DateTimeType(zoned));\r\n+        }\r\n+    }\r", "originalCommit": "3b23b1a04195cb8378662364104abe4263ec7d65", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg4MDcyNQ==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406880725", "bodyText": "You're right the parseChannels is a bit overkill ;) but I think the createChannel can be left there because the channel name, the null check and the date conversion is three times is in my opinion complex enough redudant code.", "author": "DerOetzi", "createdAt": "2020-04-10T18:18:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM5MjcwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkwNzYxNg==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406907616", "bodyText": "Please check my fix!", "author": "DerOetzi", "createdAt": "2020-04-10T19:28:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM5MjcwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0NjYxOQ==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407046619", "bodyText": "Changed NP-handling in DTOs, so I changed it now.", "author": "DerOetzi", "createdAt": "2020-04-11T10:26:36Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM5MjcwNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA2NjQ2NQ==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407066465", "bodyText": "Refactored whole DTO closing this conversation, because of huge changes.", "author": "DerOetzi", "createdAt": "2020-04-11T13:51:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM5MjcwNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc4NzQ3NQ==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406787475", "body": "better use a more meaningful name (e.g. `DATE_FORMATTER`). If you don't need the pattern for something else, you can add it directly here.", "bodyText": "better use a more meaningful name (e.g. DATE_FORMATTER). If you don't need the pattern for something else, you can add it directly here.", "bodyHTML": "<p dir=\"auto\">better use a more meaningful name (e.g. <code>DATE_FORMATTER</code>). If you don't need the pattern for something else, you can add it directly here.</p>", "author": "J-N-K", "createdAt": "2020-04-10T14:40:01Z", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/dto/DWDPollenflugJSON.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.dto;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.text.ParseException;\r\n+import java.text.SimpleDateFormat;\r\n+import java.util.Collections;\r\n+import java.util.Date;\r\n+import java.util.Map;\r\n+import java.util.Set;\r\n+\r\n+import com.google.gson.annotations.SerializedName;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+\r\n+/**\r\n+ * DTO for response of DWD request\r\n+ * \r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugJSON {\r\n+    private static final String DATE_PATTERN = \"yyyy-MM-dd HH:mm\";\r\n+\r\n+    private static final SimpleDateFormat FORMATTER = new SimpleDateFormat(DATE_PATTERN);\r", "originalCommit": "3b23b1a04195cb8378662364104abe4263ec7d65", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkwNzY3Mg==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406907672", "bodyText": "Please check my fix!", "author": "DerOetzi", "createdAt": "2020-04-10T19:28:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc4NzQ3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc5MjgzNQ==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406792835", "body": "```suggestion\r\n        pollen.forEach((k, v) -> {\r\n            final String pollentype = CHANNELS_POLLEN_MAP.get(k);\r\n\r\n            channels.put(pollentype + \"#\" + CHANNEL_TODAY, v.today == null ? \"-1\" : new StringType(v.today));\r\n            channels.put(pollentype + \"#\" + CHANNEL_TOMORROW, v.tomorrow == null ? \"-1\" : new StringType(v.tomorrow));\r\n            channels.put(pollentype + \"#\" + CHANNEL_DAYAFTER_TO, v.dayafterTomorrow == null ? \"-1\" : new StringType(v.dayafterTomorrow));\r\n        });\r\n    }\r\n```\r\n", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    for (final Entry<String, DWDPollentypeJSON> entry : pollen.entrySet()) {\n          \n          \n            \n                        final String pollentype = CHANNELS_POLLEN_MAP.get(entry.getKey());\n          \n          \n            \n                        final DWDPollentypeJSON jsonType = entry.getValue();\n          \n          \n            \n                        createChannel(pollentype, CHANNEL_TODAY, jsonType.today);\n          \n          \n            \n                        createChannel(pollentype, CHANNEL_TOMORROW, jsonType.tomorrow);\n          \n          \n            \n                        createChannel(pollentype, CHANNEL_DAYAFTER_TO, jsonType.dayafterTomorrow);\n          \n          \n            \n                    }\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                private void createChannel(final String pollentype, final String subchannel, @Nullable String value) {\n          \n          \n            \n                    final String channelName = pollentype + \"#\" + subchannel;\n          \n          \n            \n                    if (value == null) {\n          \n          \n            \n                        value = \"-1\";\n          \n          \n            \n                    }\n          \n          \n            \n                    channels.put(channelName, new StringType(value));\n          \n          \n            \n                }\n          \n          \n            \n                    pollen.forEach((k, v) -> {\n          \n          \n            \n                        final String pollentype = CHANNELS_POLLEN_MAP.get(k);\n          \n          \n            \n            \n          \n          \n            \n                        channels.put(pollentype + \"#\" + CHANNEL_TODAY, v.today == null ? \"-1\" : new StringType(v.today));\n          \n          \n            \n                        channels.put(pollentype + \"#\" + CHANNEL_TOMORROW, v.tomorrow == null ? \"-1\" : new StringType(v.tomorrow));\n          \n          \n            \n                        channels.put(pollentype + \"#\" + CHANNEL_DAYAFTER_TO, v.dayafterTomorrow == null ? \"-1\" : new StringType(v.dayafterTomorrow));\n          \n          \n            \n                    });\n          \n          \n            \n                }", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">for</span> (<span class=\"pl-k\">final</span> <span class=\"pl-k\">Entry&lt;<span class=\"pl-smi\">String</span>, <span class=\"pl-smi\">DWDPollentypeJSON</span>&gt;</span> entry <span class=\"pl-k\">:</span> pollen<span class=\"pl-k\">.</span>entrySet()) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-k\">final</span> <span class=\"pl-smi\">String</span> pollentype <span class=\"pl-k\">=</span> <span class=\"pl-c1\">CHANNELS_POLLEN_MAP</span><span class=\"pl-k\">.</span>get(entry<span class=\"pl-k\">.</span>getKey());</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-k\">final</span> <span class=\"pl-smi\">DWDPollentypeJSON</span> jsonType <span class=\"pl-k\">=</span> entry<span class=\"pl-k\">.</span>getValue();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            createChannel(pollentype, <span class=\"pl-c1\">CHANNEL_TODAY</span>, jsonType<span class=\"pl-k\">.</span>today);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            createChannel(pollentype, <span class=\"pl-c1\">CHANNEL_TOMORROW</span>, jsonType<span class=\"pl-k\">.</span>tomorrow);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            createChannel(pollentype, <span class=\"pl-c1\">CHANNEL_DAYAFTER_TO</span>, jsonType<span class=\"pl-k\">.</span>dayafterTomorrow);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">private</span> <span class=\"pl-k\">void</span> createChannel(<span class=\"pl-k\">final</span> <span class=\"pl-smi\">String</span> pollentype, <span class=\"pl-k\">final</span> <span class=\"pl-smi\">String</span> subchannel, <span class=\"pl-k\">@Nullable</span> <span class=\"pl-smi\">String</span> value) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">final</span> <span class=\"pl-smi\">String</span> channelName <span class=\"pl-k\">=</span> pollentype <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>#<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> subchannel;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">if</span> (value <span class=\"pl-k\">==</span> <span class=\"pl-c1\">null</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            value <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>-1<span class=\"pl-pds\">\"</span></span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        channels<span class=\"pl-k\">.</span>put(channelName, <span class=\"pl-k\">new</span> <span class=\"pl-smi\">StringType</span>(value));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        pollen<span class=\"pl-k\">.</span>forEach((k, v) <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-k\">final</span> <span class=\"pl-smi\">String</span> pollentype <span class=\"pl-k\">=</span> <span class=\"pl-c1\">CHANNELS_POLLEN_MAP</span><span class=\"pl-k\">.</span>get(k);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            channels<span class=\"pl-k\">.</span>put(pollentype <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>#<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> <span class=\"pl-c1\">CHANNEL_TODAY</span>, v<span class=\"pl-k\">.</span>today <span class=\"pl-k\">==</span> <span class=\"pl-c1\">null</span> <span class=\"pl-k\">?</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>-1<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">:</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">StringType</span>(v<span class=\"pl-k\">.</span>today));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            channels<span class=\"pl-k\">.</span>put(pollentype <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>#<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> <span class=\"pl-c1\">CHANNEL_TOMORROW</span>, v<span class=\"pl-k\">.</span>tomorrow <span class=\"pl-k\">==</span> <span class=\"pl-c1\">null</span> <span class=\"pl-k\">?</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>-1<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">:</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">StringType</span>(v<span class=\"pl-k\">.</span>tomorrow));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            channels<span class=\"pl-k\">.</span>put(pollentype <span class=\"pl-k\">+</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>#<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">+</span> <span class=\"pl-c1\">CHANNEL_DAYAFTER_TO</span>, v<span class=\"pl-k\">.</span>dayafterTomorrow <span class=\"pl-k\">==</span> <span class=\"pl-c1\">null</span> <span class=\"pl-k\">?</span> <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>-1<span class=\"pl-pds\">\"</span></span> <span class=\"pl-k\">:</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">StringType</span>(v<span class=\"pl-k\">.</span>dayafterTomorrow));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        });</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    }</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "J-N-K", "createdAt": "2020-04-10T14:52:19Z", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/dto/DWDRegion.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.dto;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.util.Collections;\r\n+import java.util.HashMap;\r\n+import java.util.Map;\r\n+import java.util.Map.Entry;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.smarthome.core.library.types.StringType;\r\n+import org.eclipse.smarthome.core.types.State;\r\n+\r\n+/**\r\n+ * The {@link DWDRegion} class holds the internal data representation of each Region\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDRegion {\r\n+\r\n+    private int regionID;\r\n+\r\n+    private final Map<String, String> properties;\r\n+\r\n+    private final Map<String, StringType> channels = new HashMap<>();\r\n+\r\n+    public DWDRegion(final DWDRegionJSON json) {\r\n+        regionID = json.regionID;\r\n+\r\n+        Integer partRegionID = json.partRegionID;\r\n+        if (partRegionID > 0) {\r\n+            regionID = partRegionID;\r\n+        }\r\n+\r\n+        properties = initProperties(json);\r\n+\r\n+        parseChannels(json.pollen);\r\n+    }\r\n+\r\n+    private Map<String, String> initProperties(DWDRegionJSON json) {\r\n+        Map<String, String> map = new HashMap<>();\r\n+        map.put(PROPERTY_REGION_ID, Integer.toString(regionID));\r\n+\r\n+        String regionName = json.regionName;\r\n+        if (regionName != null) {\r\n+            map.put(PROPERTY_REGION_NAME, regionName);\r\n+        }\r\n+\r\n+        String partRegionName = json.partRegionName;\r\n+        if (partRegionName != null) {\r\n+            map.put(PROPERTY_PARTREGION_NAME, partRegionName);\r\n+        }\r\n+\r\n+        return Collections.unmodifiableMap(map);\r\n+    }\r\n+\r\n+    private void parseChannels(@Nullable final Map<String, DWDPollentypeJSON> pollen) {\r\n+        if (pollen == null) {\r\n+            return;\r\n+        }\r\n+\r\n+        for (final Entry<String, DWDPollentypeJSON> entry : pollen.entrySet()) {\r\n+            final String pollentype = CHANNELS_POLLEN_MAP.get(entry.getKey());\r\n+            final DWDPollentypeJSON jsonType = entry.getValue();\r\n+            createChannel(pollentype, CHANNEL_TODAY, jsonType.today);\r\n+            createChannel(pollentype, CHANNEL_TOMORROW, jsonType.tomorrow);\r\n+            createChannel(pollentype, CHANNEL_DAYAFTER_TO, jsonType.dayafterTomorrow);\r\n+        }\r\n+    }\r\n+\r\n+    private void createChannel(final String pollentype, final String subchannel, @Nullable String value) {\r\n+        final String channelName = pollentype + \"#\" + subchannel;\r\n+        if (value == null) {\r\n+            value = \"-1\";\r\n+        }\r\n+        channels.put(channelName, new StringType(value));\r\n+    }\r", "originalCommit": "3b23b1a04195cb8378662364104abe4263ec7d65", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg0MDM4MQ==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406840381", "bodyText": "I'm a fan of clean code with no redundancy like the creation of the channel name and the null check. So I would prefer to leave it seperated in createdChannel function but the forEach is easier to read so will take this part", "author": "DerOetzi", "createdAt": "2020-04-10T16:42:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc5MjgzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkwNzc4MQ==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406907781", "bodyText": "Please check my fix!", "author": "DerOetzi", "createdAt": "2020-04-10T19:28:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc5MjgzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0Njc2OA==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407046768", "bodyText": "Changed NP-handling, so changed like you suggested now", "author": "DerOetzi", "createdAt": "2020-04-11T10:28:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc5MjgzNQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA2NjUyNA==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407066524", "bodyText": "Refactored whole DTO closing this conversation, because of huge changes.", "author": "DerOetzi", "createdAt": "2020-04-11T13:51:56Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc5MjgzNQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc5MzQxOQ==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406793419", "body": "```suggestion\r\n    private DWDPollenflugBridgeConfiguration bridgeConfig;\r\n```\r\n\r\nThere is an agreement not to use `@NonNullByDefault({})` for the config.", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private @NonNullByDefault({}) DWDPollenflugBridgeConfiguration bridgeConfig = null;\n          \n          \n            \n                private DWDPollenflugBridgeConfiguration bridgeConfig;\n          \n      \n    \n    \n  \n\nThere is an agreement not to use @NonNullByDefault({}) for the config.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">private</span> <span class=\"pl-k x x-first\">@NonNullByDefault</span><span class=\"x x-last\">({}) </span><span class=\"pl-smi\">DWDPollenflugBridgeConfiguration</span> bridgeConfig<span class=\"x x-first\"> </span><span class=\"pl-k x\">=</span><span class=\"x\"> </span><span class=\"pl-c1 x x-last\">null</span>;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">private</span> <span class=\"pl-smi\">DWDPollenflugBridgeConfiguration</span> bridgeConfig;</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">There is an agreement not to use <code>@NonNullByDefault({})</code> for the config.</p>", "author": "J-N-K", "createdAt": "2020-04-10T14:53:33Z", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.concurrent.CopyOnWriteArrayList;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.TimeUnit;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.jetty.client.HttpClient;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.openhab.binding.dwdpollenflug.internal.DWDPollingException;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugBridgeConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugBridgeHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugBridgeHandler extends BaseBridgeHandler {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugBridgeHandler.class);\r\n+\r\n+    private @NonNullByDefault({}) DWDPollenflugBridgeConfiguration bridgeConfig = null;\r", "originalCommit": "3b23b1a04195cb8378662364104abe4263ec7d65", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg4MTk3Mw==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406881973", "bodyText": "What pattern should be used there? Initialize with a new empty constructor?", "author": "DerOetzi", "createdAt": "2020-04-10T18:21:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc5MzQxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkwNzgzOQ==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406907839", "bodyText": "Please check my fix!", "author": "DerOetzi", "createdAt": "2020-04-10T19:29:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc5MzQxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc5MzkxNA==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406793914", "body": "since this is only one value, I would suggest to remove the check method and do the check right here", "bodyText": "since this is only one value, I would suggest to remove the check method and do the check right here", "bodyHTML": "<p dir=\"auto\">since this is only one value, I would suggest to remove the check method and do the check right here</p>", "author": "J-N-K", "createdAt": "2020-04-10T14:54:31Z", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.concurrent.CopyOnWriteArrayList;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.TimeUnit;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.jetty.client.HttpClient;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.openhab.binding.dwdpollenflug.internal.DWDPollingException;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugBridgeConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugBridgeHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugBridgeHandler extends BaseBridgeHandler {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugBridgeHandler.class);\r\n+\r\n+    private @NonNullByDefault({}) DWDPollenflugBridgeConfiguration bridgeConfig = null;\r\n+\r\n+    private final DWDPollenflugPolling pollingJobRunnable;\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    private @Nullable DWDPollenflug pollenflug;\r\n+\r\n+    private boolean ignoreConfigurationUpdate;\r\n+\r\n+    private final List<DWDPollenflugRegionListener> regionListeners = new CopyOnWriteArrayList<>();\r\n+\r\n+    public DWDPollenflugBridgeHandler(Bridge bridge, HttpClient client) {\r\n+        super(bridge);\r\n+        pollingJobRunnable = new DWDPollenflugPolling(this, client);\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        logger.debug(\"Initializing DWD Pollenflug bridge handler\");\r\n+        bridgeConfig = getConfigAs(DWDPollenflugBridgeConfiguration.class);\r\n+\r\n+        if (bridgeConfig.isValid()) {\r", "originalCommit": "3b23b1a04195cb8378662364104abe4263ec7d65", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg4MjY3NA==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406882674", "bodyText": "In my opinion that is a logic that belongs to the object that should be validate.", "author": "DerOetzi", "createdAt": "2020-04-10T18:23:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc5MzkxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc5NDAyNw==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406794027", "body": "maybe add the reason of the error as third parameter", "bodyText": "maybe add the reason of the error as third parameter", "bodyHTML": "<p dir=\"auto\">maybe add the reason of the error as third parameter</p>", "author": "J-N-K", "createdAt": "2020-04-10T14:54:47Z", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.concurrent.CopyOnWriteArrayList;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.TimeUnit;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.jetty.client.HttpClient;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.openhab.binding.dwdpollenflug.internal.DWDPollingException;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugBridgeConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugBridgeHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugBridgeHandler extends BaseBridgeHandler {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugBridgeHandler.class);\r\n+\r\n+    private @NonNullByDefault({}) DWDPollenflugBridgeConfiguration bridgeConfig = null;\r\n+\r\n+    private final DWDPollenflugPolling pollingJobRunnable;\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    private @Nullable DWDPollenflug pollenflug;\r\n+\r\n+    private boolean ignoreConfigurationUpdate;\r\n+\r\n+    private final List<DWDPollenflugRegionListener> regionListeners = new CopyOnWriteArrayList<>();\r\n+\r\n+    public DWDPollenflugBridgeHandler(Bridge bridge, HttpClient client) {\r\n+        super(bridge);\r\n+        pollingJobRunnable = new DWDPollenflugPolling(this, client);\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        logger.debug(\"Initializing DWD Pollenflug bridge handler\");\r\n+        bridgeConfig = getConfigAs(DWDPollenflugBridgeConfiguration.class);\r\n+\r\n+        if (bridgeConfig.isValid()) {\r\n+            onUpdate();\r\n+        } else {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\r", "originalCommit": "3b23b1a04195cb8378662364104abe4263ec7d65", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0NjkwMg==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407046902", "bodyText": "What additional information can be parsed  there except that the configuration is not valid?", "author": "DerOetzi", "createdAt": "2020-04-11T10:29:28Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc5NDAyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5MTQzOQ==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407091439", "bodyText": "If you check it here, you could determine what went wrong (agreed, you only have one parameter ATM) and set something like updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"refreshTime needs to be above 15\");", "author": "J-N-K", "createdAt": "2020-04-11T17:50:09Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc5NDAyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE3Njg0NQ==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407176845", "bodyText": "Added error description", "author": "DerOetzi", "createdAt": "2020-04-12T10:13:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc5NDAyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc5NTE4Mg==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406795182", "body": "```suggestion\r\n        final ScheduledFuture<?> localPollingJob = this.pollingJob;\r\n        if (localPollingJob == null || localPollingJob.isCancelled()) {\r\n```\r\n\r\nbetter use a final local variable here", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (pollingJob == null || pollingJob.isCancelled()) {\n          \n          \n            \n                    final ScheduledFuture<?> localPollingJob = this.pollingJob;\n          \n          \n            \n                    if (localPollingJob == null || localPollingJob.isCancelled()) {\n          \n      \n    \n    \n  \n\nbetter use a final local variable here", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k x x-first\">if</span><span class=\"x\"> (pollingJob </span><span class=\"pl-k x\">==</span><span class=\"x\"> </span><span class=\"pl-c1 x\">null</span><span class=\"x\"> </span><span class=\"pl-k x\">||</span><span class=\"x\"> pollingJob</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">isCancelled()) {</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k x x-first\">final</span><span class=\"x\"> </span><span class=\"pl-k x\">ScheduledFuture&lt;?&gt;</span><span class=\"x\"> localPollingJob </span><span class=\"pl-k x\">=</span><span class=\"x\"> </span><span class=\"pl-c1 x\">this</span><span class=\"pl-k x\">.</span><span class=\"x x-last\">pollingJob;</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">if</span> (localPollingJob <span class=\"pl-k\">==</span> <span class=\"pl-c1\">null</span> <span class=\"pl-k\">||</span> localPollingJob<span class=\"pl-k\">.</span>isCancelled()) {</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">better use a final local variable here</p>", "author": "J-N-K", "createdAt": "2020-04-10T14:57:18Z", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.concurrent.CopyOnWriteArrayList;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.TimeUnit;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.jetty.client.HttpClient;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.openhab.binding.dwdpollenflug.internal.DWDPollingException;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugBridgeConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugBridgeHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugBridgeHandler extends BaseBridgeHandler {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugBridgeHandler.class);\r\n+\r\n+    private @NonNullByDefault({}) DWDPollenflugBridgeConfiguration bridgeConfig = null;\r\n+\r\n+    private final DWDPollenflugPolling pollingJobRunnable;\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    private @Nullable DWDPollenflug pollenflug;\r\n+\r\n+    private boolean ignoreConfigurationUpdate;\r\n+\r\n+    private final List<DWDPollenflugRegionListener> regionListeners = new CopyOnWriteArrayList<>();\r\n+\r\n+    public DWDPollenflugBridgeHandler(Bridge bridge, HttpClient client) {\r\n+        super(bridge);\r\n+        pollingJobRunnable = new DWDPollenflugPolling(this, client);\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        logger.debug(\"Initializing DWD Pollenflug bridge handler\");\r\n+        bridgeConfig = getConfigAs(DWDPollenflugBridgeConfiguration.class);\r\n+\r\n+        if (bridgeConfig.isValid()) {\r\n+            onUpdate();\r\n+        } else {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\r\n+        }\r\n+    }\r\n+\r\n+    private synchronized void onUpdate() {\r\n+        if (regionListeners.isEmpty()) {\r\n+            stopPolling();\r\n+            updateStatus(ThingStatus.ONLINE);\r\n+        } else {\r\n+            startPolling();\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        logger.debug(\"Handler disposed.\");\r\n+        stopPolling();\r\n+    }\r\n+\r\n+    public void startPolling() {\r\n+        if (pollingJob == null || pollingJob.isCancelled()) {\r", "originalCommit": "3b23b1a04195cb8378662364104abe4263ec7d65", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgzNDc1MQ==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406834751", "bodyText": "What is the advantage of this?", "author": "DerOetzi", "createdAt": "2020-04-10T16:28:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc5NTE4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg1NzA1NQ==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406857055", "bodyText": "The advantage is more below, where you access the field a second time after the null check. There is no guarantee that the field is still non-null (the compiler should show a warning). This can be avoided by local variables as nothing outside can change it.", "author": "J-N-K", "createdAt": "2020-04-10T17:22:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc5NTE4Mg=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkwODA0OA==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406908048", "bodyText": "Please check my fix!", "author": "DerOetzi", "createdAt": "2020-04-10T19:29:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc5NTE4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc5NTI1Nw==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406795257", "body": "see above, use a final local variable", "bodyText": "see above, use a final local variable", "bodyHTML": "<p dir=\"auto\">see above, use a final local variable</p>", "author": "J-N-K", "createdAt": "2020-04-10T14:57:32Z", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.concurrent.CopyOnWriteArrayList;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.TimeUnit;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.jetty.client.HttpClient;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.openhab.binding.dwdpollenflug.internal.DWDPollingException;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugBridgeConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugBridgeHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugBridgeHandler extends BaseBridgeHandler {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugBridgeHandler.class);\r\n+\r\n+    private @NonNullByDefault({}) DWDPollenflugBridgeConfiguration bridgeConfig = null;\r\n+\r\n+    private final DWDPollenflugPolling pollingJobRunnable;\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    private @Nullable DWDPollenflug pollenflug;\r\n+\r\n+    private boolean ignoreConfigurationUpdate;\r\n+\r\n+    private final List<DWDPollenflugRegionListener> regionListeners = new CopyOnWriteArrayList<>();\r\n+\r\n+    public DWDPollenflugBridgeHandler(Bridge bridge, HttpClient client) {\r\n+        super(bridge);\r\n+        pollingJobRunnable = new DWDPollenflugPolling(this, client);\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        logger.debug(\"Initializing DWD Pollenflug bridge handler\");\r\n+        bridgeConfig = getConfigAs(DWDPollenflugBridgeConfiguration.class);\r\n+\r\n+        if (bridgeConfig.isValid()) {\r\n+            onUpdate();\r\n+        } else {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\r\n+        }\r\n+    }\r\n+\r\n+    private synchronized void onUpdate() {\r\n+        if (regionListeners.isEmpty()) {\r\n+            stopPolling();\r\n+            updateStatus(ThingStatus.ONLINE);\r\n+        } else {\r\n+            startPolling();\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        logger.debug(\"Handler disposed.\");\r\n+        stopPolling();\r\n+    }\r\n+\r\n+    public void startPolling() {\r\n+        if (pollingJob == null || pollingJob.isCancelled()) {\r\n+            logger.debug(\"Start polling.\");\r\n+            pollingJob = scheduler.scheduleWithFixedDelay(pollingJobRunnable, INITIAL_DELAY,\r\n+                    bridgeConfig.getRefresh() * SECONDS_PER_MINUTE, TimeUnit.SECONDS);\r\n+        } else if (pollenflug != null) {\r\n+            notifyOnUpdate(pollenflug);\r\n+        }\r\n+    }\r\n+\r\n+    public void stopPolling() {\r\n+        if (pollingJob != null && !pollingJob.isCancelled()) {\r", "originalCommit": "3b23b1a04195cb8378662364104abe4263ec7d65", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkwODA5MQ==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406908091", "bodyText": "Please check my fix!", "author": "DerOetzi", "createdAt": "2020-04-10T19:29:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc5NTI1Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc5NTQ3Mw==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406795473", "body": "and set the class member to `null` here", "bodyText": "and set the class member to null here", "bodyHTML": "<p dir=\"auto\">and set the class member to <code>null</code> here</p>", "author": "J-N-K", "createdAt": "2020-04-10T14:58:01Z", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.concurrent.CopyOnWriteArrayList;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.TimeUnit;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.jetty.client.HttpClient;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.openhab.binding.dwdpollenflug.internal.DWDPollingException;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugBridgeConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugBridgeHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugBridgeHandler extends BaseBridgeHandler {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugBridgeHandler.class);\r\n+\r\n+    private @NonNullByDefault({}) DWDPollenflugBridgeConfiguration bridgeConfig = null;\r\n+\r\n+    private final DWDPollenflugPolling pollingJobRunnable;\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    private @Nullable DWDPollenflug pollenflug;\r\n+\r\n+    private boolean ignoreConfigurationUpdate;\r\n+\r\n+    private final List<DWDPollenflugRegionListener> regionListeners = new CopyOnWriteArrayList<>();\r\n+\r\n+    public DWDPollenflugBridgeHandler(Bridge bridge, HttpClient client) {\r\n+        super(bridge);\r\n+        pollingJobRunnable = new DWDPollenflugPolling(this, client);\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        logger.debug(\"Initializing DWD Pollenflug bridge handler\");\r\n+        bridgeConfig = getConfigAs(DWDPollenflugBridgeConfiguration.class);\r\n+\r\n+        if (bridgeConfig.isValid()) {\r\n+            onUpdate();\r\n+        } else {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\r\n+        }\r\n+    }\r\n+\r\n+    private synchronized void onUpdate() {\r\n+        if (regionListeners.isEmpty()) {\r\n+            stopPolling();\r\n+            updateStatus(ThingStatus.ONLINE);\r\n+        } else {\r\n+            startPolling();\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        logger.debug(\"Handler disposed.\");\r\n+        stopPolling();\r\n+    }\r\n+\r\n+    public void startPolling() {\r\n+        if (pollingJob == null || pollingJob.isCancelled()) {\r\n+            logger.debug(\"Start polling.\");\r\n+            pollingJob = scheduler.scheduleWithFixedDelay(pollingJobRunnable, INITIAL_DELAY,\r\n+                    bridgeConfig.getRefresh() * SECONDS_PER_MINUTE, TimeUnit.SECONDS);\r\n+        } else if (pollenflug != null) {\r\n+            notifyOnUpdate(pollenflug);\r\n+        }\r\n+    }\r\n+\r\n+    public void stopPolling() {\r\n+        if (pollingJob != null && !pollingJob.isCancelled()) {\r\n+            logger.debug(\"Stop polling.\");\r\n+            pollingJob.cancel(true);\r\n+            pollingJob = null;\r", "originalCommit": "3b23b1a04195cb8378662364104abe4263ec7d65", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA0Njk2Mw==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407046963", "bodyText": "I think there is no change, if I got you right?", "author": "DerOetzi", "createdAt": "2020-04-11T10:30:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc5NTQ3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc5NzIwMw==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406797203", "body": "I would suggest to remove this class and integrate it into the bridge handler. You can then re-name `run()` to something like `poll` and reference that with `this::poll` when you schedule the polling. The callback can be removed and you can call thing status updates directly. ", "bodyText": "I would suggest to remove this class and integrate it into the bridge handler. You can then re-name run() to something like poll and reference that with this::poll when you schedule the polling. The callback can be removed and you can call thing status updates directly.", "bodyHTML": "<p dir=\"auto\">I would suggest to remove this class and integrate it into the bridge handler. You can then re-name <code>run()</code> to something like <code>poll</code> and reference that with <code>this::poll</code> when you schedule the polling. The callback can be removed and you can call thing status updates directly.</p>", "author": "J-N-K", "createdAt": "2020-04-10T15:01:58Z", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugPolling.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import java.net.SocketTimeoutException;\r\n+import java.net.URI;\r\n+import java.util.concurrent.CompletableFuture;\r\n+import java.util.concurrent.TimeUnit;\r\n+import java.util.concurrent.TimeoutException;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.JsonSyntaxException;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jetty.client.HttpClient;\r\n+import org.eclipse.jetty.client.HttpResponse;\r\n+import org.eclipse.jetty.client.api.Request;\r\n+import org.eclipse.jetty.client.api.Result;\r\n+import org.eclipse.jetty.client.util.BufferingResponseListener;\r\n+import org.eclipse.jetty.http.HttpMethod;\r\n+import org.openhab.binding.dwdpollenflug.internal.DWDPollingException;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflugJSON;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugPolling} polls data from DWD\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugPolling implements Runnable {\r", "originalCommit": "3b23b1a04195cb8378662364104abe4263ec7d65", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkwODE5Mg==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406908192", "bodyText": "Please check my fix!", "author": "DerOetzi", "createdAt": "2020-04-10T19:30:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc5NzIwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc5NzM0NQ==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406797345", "body": "see above", "bodyText": "see above", "bodyHTML": "<p dir=\"auto\">see above</p>", "author": "J-N-K", "createdAt": "2020-04-10T15:02:21Z", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugRegionHandler.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.util.Date;\r\n+import java.util.Map;\r\n+import java.util.Map.Entry;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.State;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugRegionConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDRegion;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugRegionHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugRegionHandler extends BaseThingHandler implements DWDPollenflugRegionListener {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugRegionHandler.class);\r\n+\r\n+    private @NonNullByDefault({}) DWDPollenflugRegionConfiguration thingConfig = null;\r", "originalCommit": "3b23b1a04195cb8378662364104abe4263ec7d65", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkwODIxNg==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406908216", "bodyText": "Please check my fix!", "author": "DerOetzi", "createdAt": "2020-04-10T19:30:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc5NzM0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc5NzQ3OQ==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406797479", "body": "better do not cache the bridge handler but get it if you need it.", "bodyText": "better do not cache the bridge handler but get it if you need it.", "bodyHTML": "<p dir=\"auto\">better do not cache the bridge handler but get it if you need it.</p>", "author": "J-N-K", "createdAt": "2020-04-10T15:02:40Z", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugRegionHandler.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.util.Date;\r\n+import java.util.Map;\r\n+import java.util.Map.Entry;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.State;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugRegionConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDRegion;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugRegionHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugRegionHandler extends BaseThingHandler implements DWDPollenflugRegionListener {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugRegionHandler.class);\r\n+\r\n+    private @NonNullByDefault({}) DWDPollenflugRegionConfiguration thingConfig = null;\r\n+\r\n+    private @Nullable DWDPollenflugBridgeHandler bridgeHandler;\r", "originalCommit": "3b23b1a04195cb8378662364104abe4263ec7d65", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkwODI2MA==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406908260", "bodyText": "Please check my fix!", "author": "DerOetzi", "createdAt": "2020-04-10T19:30:16Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc5NzQ3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc5Nzc0Nw==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406797747", "body": "see above", "bodyText": "see above", "bodyHTML": "<p dir=\"auto\">see above</p>", "author": "J-N-K", "createdAt": "2020-04-10T15:03:21Z", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugRegionHandler.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.util.Date;\r\n+import java.util.Map;\r\n+import java.util.Map.Entry;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.State;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugRegionConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDRegion;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugRegionHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugRegionHandler extends BaseThingHandler implements DWDPollenflugRegionListener {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugRegionHandler.class);\r\n+\r\n+    private @NonNullByDefault({}) DWDPollenflugRegionConfiguration thingConfig = null;\r\n+\r\n+    private @Nullable DWDPollenflugBridgeHandler bridgeHandler;\r\n+\r\n+    private boolean ignoreConfigurationUpdate;\r\n+\r\n+    private @Nullable Date lastUpdate;\r\n+\r\n+    public DWDPollenflugRegionHandler(Thing thing) {\r\n+        super(thing);\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        logger.debug(\"Initializing DWD Pollenflug region handler\");\r\n+        thingConfig = getConfigAs(DWDPollenflugRegionConfiguration.class);\r\n+\r\n+        if (thingConfig.isValid()) {\r", "originalCommit": "3b23b1a04195cb8378662364104abe4263ec7d65", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg4MzA1MA==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406883050", "bodyText": "see above too", "author": "DerOetzi", "createdAt": "2020-04-10T18:24:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc5Nzc0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc5ODIxOQ==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406798219", "body": "what do you try to achieve here?", "bodyText": "what do you try to achieve here?", "bodyHTML": "<p dir=\"auto\">what do you try to achieve here?</p>", "author": "J-N-K", "createdAt": "2020-04-10T15:04:19Z", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.concurrent.CopyOnWriteArrayList;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.TimeUnit;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.jetty.client.HttpClient;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.openhab.binding.dwdpollenflug.internal.DWDPollingException;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugBridgeConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugBridgeHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugBridgeHandler extends BaseBridgeHandler {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugBridgeHandler.class);\r\n+\r\n+    private @NonNullByDefault({}) DWDPollenflugBridgeConfiguration bridgeConfig = null;\r\n+\r\n+    private final DWDPollenflugPolling pollingJobRunnable;\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    private @Nullable DWDPollenflug pollenflug;\r\n+\r\n+    private boolean ignoreConfigurationUpdate;\r\n+\r\n+    private final List<DWDPollenflugRegionListener> regionListeners = new CopyOnWriteArrayList<>();\r\n+\r\n+    public DWDPollenflugBridgeHandler(Bridge bridge, HttpClient client) {\r\n+        super(bridge);\r\n+        pollingJobRunnable = new DWDPollenflugPolling(this, client);\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        logger.debug(\"Initializing DWD Pollenflug bridge handler\");\r\n+        bridgeConfig = getConfigAs(DWDPollenflugBridgeConfiguration.class);\r\n+\r\n+        if (bridgeConfig.isValid()) {\r\n+            onUpdate();\r\n+        } else {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\r\n+        }\r\n+    }\r\n+\r\n+    private synchronized void onUpdate() {\r\n+        if (regionListeners.isEmpty()) {\r\n+            stopPolling();\r\n+            updateStatus(ThingStatus.ONLINE);\r\n+        } else {\r\n+            startPolling();\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        logger.debug(\"Handler disposed.\");\r\n+        stopPolling();\r\n+    }\r\n+\r\n+    public void startPolling() {\r\n+        if (pollingJob == null || pollingJob.isCancelled()) {\r\n+            logger.debug(\"Start polling.\");\r\n+            pollingJob = scheduler.scheduleWithFixedDelay(pollingJobRunnable, INITIAL_DELAY,\r\n+                    bridgeConfig.getRefresh() * SECONDS_PER_MINUTE, TimeUnit.SECONDS);\r\n+        } else if (pollenflug != null) {\r\n+            notifyOnUpdate(pollenflug);\r\n+        }\r\n+    }\r\n+\r\n+    public void stopPolling() {\r\n+        if (pollingJob != null && !pollingJob.isCancelled()) {\r\n+            logger.debug(\"Stop polling.\");\r\n+            pollingJob.cancel(true);\r\n+            pollingJob = null;\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void handleConfigurationUpdate(Map<String, Object> configurationParameters) {\r", "originalCommit": "3b23b1a04195cb8378662364104abe4263ec7d65", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjg4ODU5OA==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406888598", "bodyText": "I thought I had some kind of cycle when updating the properties of thing. But retested it now and can't reproduce. :D", "author": "DerOetzi", "createdAt": "2020-04-10T18:38:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc5ODIxOQ=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkwODM0NA==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406908344", "bodyText": "Please check my fix!", "author": "DerOetzi", "createdAt": "2020-04-10T19:30:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc5ODIxOQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc5OTM3Mg==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406799372", "body": "no need to check `isLinked`, it's a very expensive call. Let the framework take care of that.", "bodyText": "no need to check isLinked, it's a very expensive call. Let the framework take care of that.", "bodyHTML": "<p dir=\"auto\">no need to check <code>isLinked</code>, it's a very expensive call. Let the framework take care of that.</p>", "author": "J-N-K", "createdAt": "2020-04-10T15:06:59Z", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugRegionHandler.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.util.Date;\r\n+import java.util.Map;\r\n+import java.util.Map.Entry;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.State;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugRegionConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDRegion;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugRegionHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugRegionHandler extends BaseThingHandler implements DWDPollenflugRegionListener {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugRegionHandler.class);\r\n+\r\n+    private @NonNullByDefault({}) DWDPollenflugRegionConfiguration thingConfig = null;\r\n+\r\n+    private @Nullable DWDPollenflugBridgeHandler bridgeHandler;\r\n+\r\n+    private boolean ignoreConfigurationUpdate;\r\n+\r\n+    private @Nullable Date lastUpdate;\r\n+\r\n+    public DWDPollenflugRegionHandler(Thing thing) {\r\n+        super(thing);\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        logger.debug(\"Initializing DWD Pollenflug region handler\");\r\n+        thingConfig = getConfigAs(DWDPollenflugRegionConfiguration.class);\r\n+\r\n+        if (thingConfig.isValid()) {\r\n+            DWDPollenflugBridgeHandler handler = syncToBridge();\r\n+            if (handler == null) {\r\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Bridge handler missing\");\r\n+            } else {\r\n+                updateStatus(ThingStatus.ONLINE);\r\n+            }\r\n+        } else {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\r\n+        }\r\n+    }\r\n+\r\n+    private synchronized @Nullable DWDPollenflugBridgeHandler syncToBridge() {\r\n+        if (bridgeHandler == null) {\r\n+            Bridge bridge = getBridge();\r\n+            if (bridge == null) {\r\n+                return null;\r\n+            }\r\n+            ThingHandler handler = bridge.getHandler();\r\n+            if (handler instanceof DWDPollenflugBridgeHandler) {\r\n+                bridgeHandler = (DWDPollenflugBridgeHandler) handler;\r\n+                bridgeHandler.registerRegionListener(this);\r\n+            } else {\r\n+                return null;\r\n+            }\r\n+        }\r\n+\r\n+        return bridgeHandler;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        logger.debug(\"DWDPollenflug region handler disposes. Unregistering listener.\");\r\n+        DWDPollenflugBridgeHandler handler = syncToBridge();\r\n+        if (handler != null) {\r\n+            handler.unregisterRegionListener(this);\r\n+            bridgeHandler = null;\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void handleConfigurationUpdate(Map<String, Object> configurationParameters) {\r\n+        if (!ignoreConfigurationUpdate) {\r\n+            super.handleConfigurationUpdate(configurationParameters);\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void channelLinked(ChannelUID channelUID) {\r\n+        DWDPollenflugBridgeHandler handler = syncToBridge();\r\n+        if (handler != null) {\r\n+            DWDPollenflug pollenflug = handler.getPollenflug();\r\n+            if (pollenflug != null) {\r\n+                notifyOnUpdate(pollenflug);\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void handleCommand(ChannelUID channelUID, Command command) {\r\n+    }\r\n+\r\n+    @Override\r\n+    public void notifyOnUpdate(DWDPollenflug pollenflug) {\r\n+        DWDRegion region = pollenflug.getRegion(thingConfig.getRegionID());\r\n+        if (region == null) {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Region not found\");\r\n+            return;\r\n+        }\r\n+\r\n+        updateStatus(ThingStatus.ONLINE);\r\n+\r\n+        ignoreConfigurationUpdate = true;\r\n+        updateProperties(region.getProperties());\r\n+        ignoreConfigurationUpdate = false;\r\n+\r\n+        updateChannels(region.getChannels());\r\n+\r\n+        updateChannels(pollenflug.getChannels());\r\n+\r\n+        if (lastUpdate == null || !lastUpdate.equals(pollenflug.getLastUpdate())) {\r\n+            triggerChannel(CHANNEL_UPDATES + \"#\" + CHANNEL_UPDATED, TRIGGER_REFRESHED);\r\n+            lastUpdate = pollenflug.getLastUpdate();\r\n+        }\r\n+    }\r\n+\r\n+    private void updateChannels(Map<String, State> channels) {\r\n+        for (Entry<String, State> entry : channels.entrySet()) {\r\n+            String channelID = entry.getKey();\r\n+            if (isLinked(channelID)) {\r", "originalCommit": "3b23b1a04195cb8378662364104abe4263ec7d65", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkwODM4OQ==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406908389", "bodyText": "Please check my fix!", "author": "DerOetzi", "createdAt": "2020-04-10T19:30:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc5OTM3Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgwMTgzMw==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406801833", "body": "Please do not use a constant for an empty string. Just use `\"\"` where needed.", "bodyText": "Please do not use a constant for an empty string. Just use \"\" where needed.", "bodyHTML": "<p dir=\"auto\">Please do not use a constant for an empty string. Just use <code>\"\"</code> where needed.</p>", "author": "J-N-K", "createdAt": "2020-04-10T15:12:42Z", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/DWDPollenflugBindingConstants.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal;\r\n+\r\n+import java.util.Collections;\r\n+import java.util.HashMap;\r\n+import java.util.Map;\r\n+import java.util.concurrent.TimeUnit;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugBindingConstants} class defines common constants, which are\r\n+ * used across the whole binding.\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugBindingConstants {\r\n+    public static final String DATE_PATTERN = \"yyyy-MM-dd HH:mm\";\r\n+\r\n+    public static final String EMPTY = \"\";\r", "originalCommit": "3b23b1a04195cb8378662364104abe4263ec7d65", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkwOTYxMA==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406909610", "bodyText": "Removed", "author": "DerOetzi", "createdAt": "2020-04-10T19:34:02Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgwMTgzMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgwMzE0NQ==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406803145", "body": "What do you think about making this an enum?\r\n\r\n```\r\npublic enum Pollen {\r\n    AMBROSIA(\"ambrosia\"),\r\n    BEIFUSS(\"mugwort),\r\n    ...\r\n\r\n    String pollen;\r\n\r\n    public Pollen(String pollen) {\r\n        this.pollen = pollen;\r\n    }\r\n}\r\n```", "bodyText": "What do you think about making this an enum?\npublic enum Pollen {\n    AMBROSIA(\"ambrosia\"),\n    BEIFUSS(\"mugwort),\n    ...\n\n    String pollen;\n\n    public Pollen(String pollen) {\n        this.pollen = pollen;\n    }\n}", "bodyHTML": "<p dir=\"auto\">What do you think about making this an enum?</p>\n<div class=\"snippet-clipboard-content position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"public enum Pollen {\n    AMBROSIA(&quot;ambrosia&quot;),\n    BEIFUSS(&quot;mugwort),\n    ...\n\n    String pollen;\n\n    public Pollen(String pollen) {\n        this.pollen = pollen;\n    }\n}\n\"><pre><code>public enum Pollen {\n    AMBROSIA(\"ambrosia\"),\n    BEIFUSS(\"mugwort),\n    ...\n\n    String pollen;\n\n    public Pollen(String pollen) {\n        this.pollen = pollen;\n    }\n}\n</code></pre></div>", "author": "J-N-K", "createdAt": "2020-04-10T15:15:24Z", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/DWDPollenflugBindingConstants.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal;\r\n+\r\n+import java.util.Collections;\r\n+import java.util.HashMap;\r\n+import java.util.Map;\r\n+import java.util.concurrent.TimeUnit;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugBindingConstants} class defines common constants, which are\r\n+ * used across the whole binding.\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugBindingConstants {\r\n+    public static final String DATE_PATTERN = \"yyyy-MM-dd HH:mm\";\r\n+\r\n+    public static final String EMPTY = \"\";\r\n+\r\n+    public static final long INITIAL_DELAY = TimeUnit.SECONDS.toSeconds(1);\r\n+\r\n+    public static final long SECONDS_PER_MINUTE = 60;\r\n+\r\n+    private static final String BINDING_ID = \"dwdpollenflug\";\r\n+\r\n+    // bridge\r\n+    public static final ThingTypeUID THING_TYPE_BRIDGE = new ThingTypeUID(BINDING_ID, \"bridge\");\r\n+\r\n+    // List of all Thing Type UIDs\r\n+    public static final ThingTypeUID THING_TYPE_REGION = new ThingTypeUID(BINDING_ID, \"region\");\r\n+\r\n+    // Region channels Mapping\r\n+    public static final Map<String, String> CHANNELS_POLLEN_MAP = initChannelMap();\r", "originalCommit": "3b23b1a04195cb8378662364104abe4263ec7d65", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjkwOTY3Nw==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406909677", "bodyText": "Please check my fix!", "author": "DerOetzi", "createdAt": "2020-04-10T19:34:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjgwMzE0NQ=="}], "type": "inlineReview"}, {"oid": "789a1c8379fe06ddcac7911ede149788a85a9e68", "url": "https://github.com/openhab/openhab-addons/commit/789a1c8379fe06ddcac7911ede149788a85a9e68", "message": "[DWDPollenflug] Fixed review comments of J-N-K\n\nSigned-off-by: Johannes DerOetzi Ott <info@johannes-ott.net>", "committedDate": "2020-04-10T19:22:20Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk4NDcxMA==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406984710", "body": "why is this synchronized?", "bodyText": "why is this synchronized?", "bodyHTML": "<p dir=\"auto\">why is this synchronized?</p>", "author": "cpmeister", "createdAt": "2020-04-10T23:40:57Z", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/dto/DWDPollenflug.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.dto;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.time.ZoneId;\r\n+import java.time.ZonedDateTime;\r\n+import java.util.Collections;\r\n+import java.util.Date;\r\n+import java.util.HashMap;\r\n+import java.util.Map;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\r\n+import org.eclipse.smarthome.core.types.State;\r\n+import org.eclipse.smarthome.core.types.UnDefType;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflug} class is internal DWD data structure.\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflug {\r\n+    private final Date created = new Date();\r\n+\r\n+    private final @Nullable Date nextUpdate;\r\n+\r\n+    private final @Nullable Date lastUpdate;\r\n+\r\n+    private final Map<String, String> properties;\r\n+\r\n+    private final Map<String, State> channels = new HashMap<>();\r\n+\r\n+    private final Map<Integer, DWDRegion> regions = new HashMap<>();\r\n+\r\n+    public DWDPollenflug(DWDPollenflugJSON json) {\r\n+        nextUpdate = json.getNextUpdate();\r\n+        lastUpdate = json.getLastUpdate();\r\n+\r\n+        properties = initProperties(json);\r\n+\r\n+        for (DWDRegionJSON regionJSON : json.getRegions()) {\r\n+            DWDRegion region = new DWDRegion(regionJSON);\r\n+            regions.put(region.getRegionID(), region);\r\n+        }\r\n+\r\n+        createChannel(CHANNEL_REFRESHED, created);\r\n+        createChannel(CHANNEL_NEXT_UPDATE, nextUpdate);\r\n+        createChannel(CHANNEL_LAST_UPDATE, lastUpdate);\r\n+    }\r\n+\r\n+    private synchronized Map<String, String> initProperties(DWDPollenflugJSON json) {\r", "originalCommit": "5459c0085c5b9c7c72e23e03fb7e6e14de002ca8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzOTQwMA==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407039400", "bodyText": "Removed. think it was an old try I forgot to remove", "author": "DerOetzi", "createdAt": "2020-04-11T09:09:40Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk4NDcxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA2NjYxNA==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407066614", "bodyText": "Refactored whole DTO closing this conversation, because of huge changes.", "author": "DerOetzi", "createdAt": "2020-04-11T13:53:04Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk4NDcxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk4NDgxNA==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406984814", "body": "How would this return a null? In fact, `unmodifiableMap` throws an NPE if you give it a null map.", "bodyText": "How would this return a null? In fact, unmodifiableMap throws an NPE if you give it a null map.", "bodyHTML": "<p dir=\"auto\">How would this return a null? In fact, <code>unmodifiableMap</code> throws an NPE if you give it a null map.</p>", "author": "cpmeister", "createdAt": "2020-04-10T23:41:33Z", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/dto/DWDPollenflugJSON.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.dto;\r\n+\r\n+import java.text.ParseException;\r\n+import java.text.SimpleDateFormat;\r\n+import java.util.Collections;\r\n+import java.util.Date;\r\n+import java.util.Map;\r\n+import java.util.Set;\r\n+\r\n+import com.google.gson.annotations.SerializedName;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+\r\n+/**\r\n+ * DTO for response of DWD request\r\n+ * \r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugJSON {\r\n+    private static final SimpleDateFormat FORMATTER = new SimpleDateFormat(\"yyyy-MM-dd HH:mm\");\r\n+\r\n+    private String sender = \"\";\r\n+\r\n+    private String name = \"\";\r\n+\r\n+    @SerializedName(\"next_update\")\r\n+    private @Nullable String nextUpdate;\r\n+\r\n+    @SerializedName(\"last_update\")\r\n+    private @Nullable String lastUpdate;\r\n+\r\n+    private @Nullable Map<String, String> legend;\r\n+\r\n+    @SerializedName(\"content\")\r\n+    private @Nullable Set<DWDRegionJSON> regions;\r\n+\r\n+    public String getName() {\r\n+        return name;\r\n+    }\r\n+\r\n+    public String getSender() {\r\n+        return sender;\r\n+    }\r\n+\r\n+    public @Nullable Set<DWDRegionJSON> getRegions() {\r\n+        return regions;\r\n+    }\r\n+\r\n+    public @Nullable Date getNextUpdate() {\r\n+        return parseDate(nextUpdate);\r\n+    }\r\n+\r\n+    public @Nullable Date getLastUpdate() {\r\n+        return parseDate(lastUpdate);\r\n+    }\r\n+\r\n+    private synchronized @Nullable Date parseDate(@Nullable String date) {\r\n+        try {\r\n+            if (date == null) {\r\n+                return null;\r\n+            }\r\n+\r\n+            return FORMATTER.parse(date.replace(\"Uhr\", \"\").trim());\r\n+        } catch (ParseException e) {\r\n+            return null;\r\n+        }\r\n+    }\r\n+\r\n+    public @Nullable Map<String, String> getLegend() {\r", "originalCommit": "5459c0085c5b9c7c72e23e03fb7e6e14de002ca8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzOTQ0Mw==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407039443", "bodyText": "Please check my fix!", "author": "DerOetzi", "createdAt": "2020-04-11T09:10:05Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk4NDgxNA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzExODg3Ng==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407118876", "bodyText": "Not relevant anymore, because of refactoring of DTOs", "author": "DerOetzi", "createdAt": "2020-04-11T22:41:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk4NDgxNA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk4NTQ2NA==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406985464", "body": "SimpleDateFormat is not thread safe, so either create a new one before you use it or make sure that it can't be accessed by two threads at once, like so:\r\n```suggestion\r\n    private static synchronized @Nullable Date parseDate(@Nullable String date) {\r\n\r\n```", "bodyText": "SimpleDateFormat is not thread safe, so either create a new one before you use it or make sure that it can't be accessed by two threads at once, like so:\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private synchronized @Nullable Date parseDate(@Nullable String date) {\n          \n          \n            \n                private static synchronized @Nullable Date parseDate(@Nullable String date) {", "bodyHTML": "<p dir=\"auto\">SimpleDateFormat is not thread safe, so either create a new one before you use it or make sure that it can't be accessed by two threads at once, like so:</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">private</span> <span class=\"pl-k\">synchronized</span> <span class=\"pl-k\">@Nullable</span> <span class=\"pl-smi\">Date</span> parseDate(<span class=\"pl-k\">@Nullable</span> <span class=\"pl-smi\">String</span> date) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">private</span> <span class=\"pl-k x x-first\">static</span><span class=\"x x-last\"> </span><span class=\"pl-k\">synchronized</span> <span class=\"pl-k\">@Nullable</span> <span class=\"pl-smi\">Date</span> parseDate(<span class=\"pl-k\">@Nullable</span> <span class=\"pl-smi\">String</span> date) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "cpmeister", "createdAt": "2020-04-10T23:45:03Z", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/dto/DWDPollenflugJSON.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.dto;\r\n+\r\n+import java.text.ParseException;\r\n+import java.text.SimpleDateFormat;\r\n+import java.util.Collections;\r\n+import java.util.Date;\r\n+import java.util.Map;\r\n+import java.util.Set;\r\n+\r\n+import com.google.gson.annotations.SerializedName;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+\r\n+/**\r\n+ * DTO for response of DWD request\r\n+ * \r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugJSON {\r\n+    private static final SimpleDateFormat FORMATTER = new SimpleDateFormat(\"yyyy-MM-dd HH:mm\");\r\n+\r\n+    private String sender = \"\";\r\n+\r\n+    private String name = \"\";\r\n+\r\n+    @SerializedName(\"next_update\")\r\n+    private @Nullable String nextUpdate;\r\n+\r\n+    @SerializedName(\"last_update\")\r\n+    private @Nullable String lastUpdate;\r\n+\r\n+    private @Nullable Map<String, String> legend;\r\n+\r\n+    @SerializedName(\"content\")\r\n+    private @Nullable Set<DWDRegionJSON> regions;\r\n+\r\n+    public String getName() {\r\n+        return name;\r\n+    }\r\n+\r\n+    public String getSender() {\r\n+        return sender;\r\n+    }\r\n+\r\n+    public @Nullable Set<DWDRegionJSON> getRegions() {\r\n+        return regions;\r\n+    }\r\n+\r\n+    public @Nullable Date getNextUpdate() {\r\n+        return parseDate(nextUpdate);\r\n+    }\r\n+\r\n+    public @Nullable Date getLastUpdate() {\r\n+        return parseDate(lastUpdate);\r\n+    }\r\n+\r\n+    private synchronized @Nullable Date parseDate(@Nullable String date) {\r", "originalCommit": "5459c0085c5b9c7c72e23e03fb7e6e14de002ca8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzOTQ5NQ==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407039495", "bodyText": "Please check my fix.", "author": "DerOetzi", "createdAt": "2020-04-11T09:10:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk4NTQ2NA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA2NjY1MQ==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407066651", "bodyText": "Refactored whole DTO closing this conversation, because of huge changes.", "author": "DerOetzi", "createdAt": "2020-04-11T13:53:24Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk4NTQ2NA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk4NjQ0Nw==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406986447", "body": "regionID is nullable so you run the risk of a NPE by trying to convert it to a primitive.", "bodyText": "regionID is nullable so you run the risk of a NPE by trying to convert it to a primitive.", "bodyHTML": "<p dir=\"auto\">regionID is nullable so you run the risk of a NPE by trying to convert it to a primitive.</p>", "author": "cpmeister", "createdAt": "2020-04-10T23:50:39Z", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/dto/DWDRegion.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.dto;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.util.Collections;\r\n+import java.util.HashMap;\r\n+import java.util.Map;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.smarthome.core.library.types.StringType;\r\n+import org.eclipse.smarthome.core.types.State;\r\n+\r\n+/**\r\n+ * The {@link DWDRegion} class holds the internal data representation of each Region\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDRegion {\r\n+\r\n+    private int regionID;\r\n+\r\n+    private final Map<String, String> properties;\r\n+\r\n+    private final Map<String, StringType> channels = new HashMap<>();\r\n+\r\n+    public DWDRegion(final DWDRegionJSON json) {\r\n+        regionID = json.regionID;\r", "originalCommit": "5459c0085c5b9c7c72e23e03fb7e6e14de002ca8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzOTUzMw==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407039533", "bodyText": "Please check my fix.", "author": "DerOetzi", "createdAt": "2020-04-11T09:11:07Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk4NjQ0Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5MDY0NQ==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407090645", "bodyText": "Refactored DTO so this is not relevant anymore", "author": "DerOetzi", "createdAt": "2020-04-11T17:43:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk4NjQ0Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk4NzY0Mw==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406987643", "body": "Please use camelcase\r\n```suggestion\r\n    private void createChannel(final String pollenType, final String subchannel, @Nullable String value) {\r\n\r\n```", "bodyText": "Please use camelcase\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private void createChannel(final String pollentype, final String subchannel, @Nullable String value) {\n          \n          \n            \n                private void createChannel(final String pollenType, final String subchannel, @Nullable String value) {", "bodyHTML": "<p dir=\"auto\">Please use camelcase</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">private</span> <span class=\"pl-k\">void</span> createChannel(<span class=\"pl-k\">final</span> <span class=\"pl-smi\">String</span> <span class=\"x x-first x-last\">pollentype</span>, <span class=\"pl-k\">final</span> <span class=\"pl-smi\">String</span> subchannel, <span class=\"pl-k\">@Nullable</span> <span class=\"pl-smi\">String</span> value) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">private</span> <span class=\"pl-k\">void</span> createChannel(<span class=\"pl-k\">final</span> <span class=\"pl-smi\">String</span> <span class=\"x x-first x-last\">pollenType</span>, <span class=\"pl-k\">final</span> <span class=\"pl-smi\">String</span> subchannel, <span class=\"pl-k\">@Nullable</span> <span class=\"pl-smi\">String</span> value) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "cpmeister", "createdAt": "2020-04-10T23:57:25Z", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/dto/DWDRegion.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.dto;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.util.Collections;\r\n+import java.util.HashMap;\r\n+import java.util.Map;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.smarthome.core.library.types.StringType;\r\n+import org.eclipse.smarthome.core.types.State;\r\n+\r\n+/**\r\n+ * The {@link DWDRegion} class holds the internal data representation of each Region\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDRegion {\r\n+\r\n+    private int regionID;\r\n+\r\n+    private final Map<String, String> properties;\r\n+\r\n+    private final Map<String, StringType> channels = new HashMap<>();\r\n+\r\n+    public DWDRegion(final DWDRegionJSON json) {\r\n+        regionID = json.regionID;\r\n+\r\n+        Integer partRegionID = json.partRegionID;\r\n+        if (partRegionID > 0) {\r\n+            regionID = partRegionID;\r\n+        }\r\n+\r\n+        properties = initProperties(json);\r\n+\r\n+        parseChannels(json.pollen);\r\n+    }\r\n+\r\n+    private Map<String, String> initProperties(DWDRegionJSON json) {\r\n+        Map<String, String> map = new HashMap<>();\r\n+        String regionName = json.regionName;\r\n+        if (regionName != null) {\r\n+            map.put(PROPERTY_REGION_NAME, regionName);\r\n+        }\r\n+\r\n+        String partRegionName = json.partRegionName;\r\n+        if (partRegionName != null) {\r\n+            map.put(PROPERTY_PARTREGION_NAME, partRegionName);\r\n+        }\r\n+\r\n+        return Collections.unmodifiableMap(map);\r\n+    }\r\n+\r\n+    private void parseChannels(@Nullable final Map<String, DWDPollentypeJSON> pollen) {\r\n+        if (pollen == null) {\r\n+            return;\r\n+        }\r\n+\r\n+        pollen.forEach((k, jsonType) -> {\r\n+            final String pollentype = DWDPollenflugPollen.valueOf(k.toUpperCase()).getChannelName();\r\n+            createChannel(pollentype, CHANNEL_TODAY, jsonType.today);\r\n+            createChannel(pollentype, CHANNEL_TOMORROW, jsonType.tomorrow);\r\n+            createChannel(pollentype, CHANNEL_DAYAFTER_TO, jsonType.dayafterTomorrow);\r\n+        });\r\n+    }\r\n+\r\n+    private void createChannel(final String pollentype, final String subchannel, @Nullable String value) {\r", "originalCommit": "5459c0085c5b9c7c72e23e03fb7e6e14de002ca8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzOTU1Mw==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407039553", "bodyText": "Please check my fix.", "author": "DerOetzi", "createdAt": "2020-04-11T09:11:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk4NzY0Mw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA2NjcyMg==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407066722", "bodyText": "Refactored whole DTO closing this conversation, because of huge changes.", "author": "DerOetzi", "createdAt": "2020-04-11T13:53:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk4NzY0Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk4ODE1Ng==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406988156", "body": "You should handle RefreshType at least", "bodyText": "You should handle RefreshType at least", "bodyHTML": "<p dir=\"auto\">You should handle RefreshType at least</p>", "author": "cpmeister", "createdAt": "2020-04-11T00:00:14Z", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.net.URI;\r\n+import java.util.List;\r\n+import java.net.SocketTimeoutException;\r\n+import java.util.concurrent.CompletableFuture;\r\n+import java.util.concurrent.CopyOnWriteArrayList;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.TimeUnit;\r\n+import java.util.concurrent.TimeoutException;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.JsonSyntaxException;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.jetty.client.HttpClient;\r\n+import org.eclipse.jetty.client.HttpResponse;\r\n+import org.eclipse.jetty.client.api.Request;\r\n+import org.eclipse.jetty.client.api.Result;\r\n+import org.eclipse.jetty.client.util.BufferingResponseListener;\r\n+import org.eclipse.jetty.http.HttpMethod;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.openhab.binding.dwdpollenflug.internal.DWDPollingException;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugBridgeConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflugJSON;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugBridgeHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugBridgeHandler extends BaseBridgeHandler {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugBridgeHandler.class);\r\n+\r\n+    private static final String DWD_URL = \"https://opendata.dwd.de/climate_environment/health/alerts/s31fg.json\";\r\n+\r\n+    private DWDPollenflugBridgeConfiguration bridgeConfig = new DWDPollenflugBridgeConfiguration();\r\n+\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    private @Nullable DWDPollenflug pollenflug;\r\n+\r\n+    private final List<DWDPollenflugRegionListener> regionListeners = new CopyOnWriteArrayList<>();\r\n+\r\n+    private final HttpClient client;\r\n+\r\n+    private final Gson gson = new Gson();\r\n+\r\n+    public DWDPollenflugBridgeHandler(Bridge bridge, HttpClient client) {\r\n+        super(bridge);\r\n+        this.client = client;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        logger.debug(\"Initializing DWD Pollenflug bridge handler\");\r\n+        bridgeConfig = getConfigAs(DWDPollenflugBridgeConfiguration.class);\r\n+\r\n+        if (bridgeConfig.isValid()) {\r\n+            onUpdate();\r\n+        } else {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\r\n+        }\r\n+    }\r\n+\r\n+    private synchronized void onUpdate() {\r\n+        if (regionListeners.isEmpty()) {\r\n+            stopPolling();\r\n+            updateStatus(ThingStatus.ONLINE);\r\n+        } else {\r\n+            startPolling();\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        logger.debug(\"Handler disposed.\");\r\n+        stopPolling();\r\n+    }\r\n+\r\n+    public void startPolling() {\r\n+        final ScheduledFuture<?> localPollingJob = this.pollingJob;\r\n+        if (localPollingJob == null || localPollingJob.isCancelled()) {\r\n+            logger.debug(\"Start polling.\");\r\n+            pollingJob = scheduler.scheduleWithFixedDelay(this::poll, INITIAL_DELAY,\r\n+                    bridgeConfig.refresh * SECONDS_PER_MINUTE, TimeUnit.SECONDS);\r\n+        } else if (pollenflug != null) {\r\n+            notifyOnUpdate(pollenflug);\r\n+        }\r\n+    }\r\n+\r\n+    public void stopPolling() {\r\n+        final ScheduledFuture<?> localPollingJob = this.pollingJob;\r\n+        if (localPollingJob != null && !localPollingJob.isCancelled()) {\r\n+            logger.debug(\"Stop polling.\");\r\n+            localPollingJob.cancel(true);\r\n+            pollingJob = null;\r\n+        }\r\n+    }\r\n+\r\n+    public void poll() {\r\n+        logger.debug(\"Polling\");\r\n+        requestRefresh().handle((pollenflug, e) -> {\r\n+            if (pollenflug == null) {\r\n+                if (e == null) {\r\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\r\n+                } else {\r\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR, e.getMessage());\r\n+                }\r\n+            } else {\r\n+                updateStatus(ThingStatus.ONLINE);\r\n+                notifyOnUpdate(pollenflug);\r\n+            }\r\n+\r\n+            return null;\r\n+        });\r\n+    }\r\n+\r\n+    private CompletableFuture<DWDPollenflug> requestRefresh() {\r\n+        CompletableFuture<DWDPollenflug> f = new CompletableFuture<>();\r\n+        Request request = client.newRequest(URI.create(DWD_URL));\r\n+\r\n+        request.method(HttpMethod.GET).timeout(2000, TimeUnit.SECONDS).send(new BufferingResponseListener() {\r\n+            @NonNullByDefault({})\r\n+            @Override\r\n+            public void onComplete(Result result) {\r\n+                final HttpResponse response = (HttpResponse) result.getResponse();\r\n+                if (result.getFailure() != null) {\r\n+                    Throwable e = result.getFailure();\r\n+                    if (e instanceof SocketTimeoutException || e instanceof TimeoutException) {\r\n+                        f.completeExceptionally(new DWDPollingException(\"Request timeout\", e));\r\n+                    } else {\r\n+                        f.completeExceptionally(new DWDPollingException(\"Request failed\", e));\r\n+                    }\r\n+                } else if (response.getStatus() != 200) {\r\n+                    f.completeExceptionally(new DWDPollingException(getContentAsString()));\r\n+                } else {\r\n+                    try {\r\n+                        DWDPollenflugJSON pollenflugJSON = gson.fromJson(getContentAsString(), DWDPollenflugJSON.class);\r\n+                        f.complete(new DWDPollenflug(pollenflugJSON));\r\n+                    } catch (JsonSyntaxException ex2) {\r\n+                        f.completeExceptionally(new DWDPollingException(\"Parsing of response failed\"));\r\n+                    }\r\n+                }\r\n+            }\r\n+        });\r\n+\r\n+        return f;\r\n+    }\r\n+\r\n+    public synchronized boolean registerRegionListener(DWDPollenflugRegionListener regionListener) {\r\n+        logger.debug(\"Register region listener\");\r\n+        boolean result = regionListeners.add(regionListener);\r\n+        if (result) {\r\n+            startPolling();\r\n+        }\r\n+        return result;\r\n+    }\r\n+\r\n+    public synchronized boolean unregisterRegionListener(DWDPollenflugRegionListener regionListener) {\r\n+        logger.debug(\"Unregister region listener\");\r\n+        boolean result = regionListeners.remove(regionListener);\r\n+        if (result && regionListeners.isEmpty()) {\r\n+            stopPolling();\r\n+        }\r\n+        return result;\r\n+    }\r\n+\r\n+    public synchronized void notifyOnUpdate(@Nullable DWDPollenflug newState) {\r\n+        pollenflug = newState;\r\n+        if (newState != null) {\r\n+            updateProperties(newState.getProperties());\r\n+\r\n+            newState.getChannels().forEach((channelID, value) -> {\r\n+                logger.debug(\"Updating channel {} to {}\", channelID, value);\r\n+                updateState(channelID, value);\r\n+            });\r\n+\r\n+            for (DWDPollenflugRegionListener regionListener : regionListeners) {\r\n+                regionListener.notifyOnUpdate(newState);\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void handleCommand(ChannelUID channelUID, Command command) {\r\n+    }\r", "originalCommit": "5459c0085c5b9c7c72e23e03fb7e6e14de002ca8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzOTU5Ng==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407039596", "bodyText": "Please check my fix", "author": "DerOetzi", "createdAt": "2020-04-11T09:11:52Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk4ODE1Ng=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk5MTI3Nw==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406991277", "body": "You at least handle a RefreshType command", "bodyText": "You at least handle a RefreshType command", "bodyHTML": "<p dir=\"auto\">You at least handle a RefreshType command</p>", "author": "cpmeister", "createdAt": "2020-04-11T00:19:53Z", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugRegionHandler.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.util.Date;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugRegionConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDRegion;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugRegionHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugRegionHandler extends BaseThingHandler implements DWDPollenflugRegionListener {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugRegionHandler.class);\r\n+\r\n+    private DWDPollenflugRegionConfiguration thingConfig = new DWDPollenflugRegionConfiguration();\r\n+\r\n+    private @Nullable Date lastUpdate;\r\n+\r\n+    public DWDPollenflugRegionHandler(Thing thing) {\r\n+        super(thing);\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        logger.debug(\"Initializing DWD Pollenflug region handler\");\r\n+        thingConfig = getConfigAs(DWDPollenflugRegionConfiguration.class);\r\n+\r\n+        if (thingConfig.isValid()) {\r\n+            DWDPollenflugBridgeHandler handler = syncToBridge();\r\n+            if (handler == null) {\r\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Bridge handler missing\");\r\n+            } else {\r\n+                handler.registerRegionListener(this);\r\n+                updateStatus(ThingStatus.ONLINE);\r\n+            }\r\n+        } else {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\r\n+        }\r\n+    }\r\n+\r\n+    private synchronized @Nullable DWDPollenflugBridgeHandler syncToBridge() {\r\n+        Bridge bridge = getBridge();\r\n+        if (bridge != null) {\r\n+            ThingHandler handler = bridge.getHandler();\r\n+            if (handler instanceof DWDPollenflugBridgeHandler) {\r\n+                DWDPollenflugBridgeHandler bridgeHandler = (DWDPollenflugBridgeHandler) handler;\r\n+                return bridgeHandler;\r\n+            }\r\n+        }\r\n+\r\n+        return null;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        logger.debug(\"DWDPollenflug region handler disposes. Unregistering listener.\");\r\n+        DWDPollenflugBridgeHandler bridgeHandler = syncToBridge();\r\n+        if (bridgeHandler != null) {\r\n+            bridgeHandler.unregisterRegionListener(this);\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void channelLinked(ChannelUID channelUID) {\r\n+        DWDPollenflugBridgeHandler handler = syncToBridge();\r\n+        if (handler != null) {\r\n+            DWDPollenflug pollenflug = handler.getPollenflug();\r\n+            if (pollenflug != null) {\r\n+                notifyOnUpdate(pollenflug);\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void handleCommand(ChannelUID channelUID, Command command) {\r\n+    }\r", "originalCommit": "5459c0085c5b9c7c72e23e03fb7e6e14de002ca8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzNzYyNQ==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407037625", "bodyText": "Just for my understanding of this, when ist RefreshType command triggered?", "author": "DerOetzi", "createdAt": "2020-04-11T08:50:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk5MTI3Nw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzOTYzMQ==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407039631", "bodyText": "Please check my fix", "author": "DerOetzi", "createdAt": "2020-04-11T09:12:14Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk5MTI3Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk5MTg3MQ==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406991871", "body": "```suggestion\r\n        final ScheduledFuture<?> localPollingJob = this.pollingJob;\r\n        final DWDPollenflug pollenflug = this.pollenflug;\r\n        if (localPollingJob == null || localPollingJob.isCancelled()) {\r\n\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final ScheduledFuture<?> localPollingJob = this.pollingJob;\n          \n          \n            \n                    if (localPollingJob == null || localPollingJob.isCancelled()) {\n          \n          \n            \n                    final ScheduledFuture<?> localPollingJob = this.pollingJob;\n          \n          \n            \n                    final DWDPollenflug pollenflug = this.pollenflug;\n          \n          \n            \n                    if (localPollingJob == null || localPollingJob.isCancelled()) {", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"104\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">final</span> <span class=\"pl-k\">ScheduledFuture&lt;?&gt;</span> localPollingJob <span class=\"pl-k\">=</span> <span class=\"pl-c1\">this</span><span class=\"pl-k\">.</span>pollingJob;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"105\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">if</span> (localPollingJob <span class=\"pl-k\">==</span> <span class=\"pl-c1\">null</span> <span class=\"pl-k\">||</span> localPollingJob<span class=\"pl-k\">.</span>isCancelled()) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"104\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">final</span> <span class=\"pl-k\">ScheduledFuture&lt;?&gt;</span> localPollingJob <span class=\"pl-k\">=</span> <span class=\"pl-c1\">this</span><span class=\"pl-k\">.</span>pollingJob;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"105\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">final</span> <span class=\"pl-smi\">DWDPollenflug</span> pollenflug <span class=\"pl-k\">=</span> <span class=\"pl-c1\">this</span><span class=\"pl-k\">.</span>pollenflug;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"106\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">if</span> (localPollingJob <span class=\"pl-k\">==</span> <span class=\"pl-c1\">null</span> <span class=\"pl-k\">||</span> localPollingJob<span class=\"pl-k\">.</span>isCancelled()) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"107\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "cpmeister", "createdAt": "2020-04-11T00:23:54Z", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.net.URI;\r\n+import java.util.List;\r\n+import java.net.SocketTimeoutException;\r\n+import java.util.concurrent.CompletableFuture;\r\n+import java.util.concurrent.CopyOnWriteArrayList;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.TimeUnit;\r\n+import java.util.concurrent.TimeoutException;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.JsonSyntaxException;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.jetty.client.HttpClient;\r\n+import org.eclipse.jetty.client.HttpResponse;\r\n+import org.eclipse.jetty.client.api.Request;\r\n+import org.eclipse.jetty.client.api.Result;\r\n+import org.eclipse.jetty.client.util.BufferingResponseListener;\r\n+import org.eclipse.jetty.http.HttpMethod;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.openhab.binding.dwdpollenflug.internal.DWDPollingException;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugBridgeConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflugJSON;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugBridgeHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugBridgeHandler extends BaseBridgeHandler {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugBridgeHandler.class);\r\n+\r\n+    private static final String DWD_URL = \"https://opendata.dwd.de/climate_environment/health/alerts/s31fg.json\";\r\n+\r\n+    private DWDPollenflugBridgeConfiguration bridgeConfig = new DWDPollenflugBridgeConfiguration();\r\n+\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    private @Nullable DWDPollenflug pollenflug;\r\n+\r\n+    private final List<DWDPollenflugRegionListener> regionListeners = new CopyOnWriteArrayList<>();\r\n+\r\n+    private final HttpClient client;\r\n+\r\n+    private final Gson gson = new Gson();\r\n+\r\n+    public DWDPollenflugBridgeHandler(Bridge bridge, HttpClient client) {\r\n+        super(bridge);\r\n+        this.client = client;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        logger.debug(\"Initializing DWD Pollenflug bridge handler\");\r\n+        bridgeConfig = getConfigAs(DWDPollenflugBridgeConfiguration.class);\r\n+\r\n+        if (bridgeConfig.isValid()) {\r\n+            onUpdate();\r\n+        } else {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\r\n+        }\r\n+    }\r\n+\r\n+    private synchronized void onUpdate() {\r\n+        if (regionListeners.isEmpty()) {\r\n+            stopPolling();\r\n+            updateStatus(ThingStatus.ONLINE);\r\n+        } else {\r\n+            startPolling();\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        logger.debug(\"Handler disposed.\");\r\n+        stopPolling();\r\n+    }\r\n+\r\n+    public void startPolling() {\r\n+        final ScheduledFuture<?> localPollingJob = this.pollingJob;\r\n+        if (localPollingJob == null || localPollingJob.isCancelled()) {\r", "originalCommit": "5459c0085c5b9c7c72e23e03fb7e6e14de002ca8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzOTY1Mg==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407039652", "bodyText": "please check my fix.", "author": "DerOetzi", "createdAt": "2020-04-11T09:12:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk5MTg3MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk5MTk5MQ==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r406991991", "body": "Instead of 'e', please give the variable a name that at least gives a hint as to what the datatype is.", "bodyText": "Instead of 'e', please give the variable a name that at least gives a hint as to what the datatype is.", "bodyHTML": "<p dir=\"auto\">Instead of 'e', please give the variable a name that at least gives a hint as to what the datatype is.</p>", "author": "cpmeister", "createdAt": "2020-04-11T00:24:37Z", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.net.URI;\r\n+import java.util.List;\r\n+import java.net.SocketTimeoutException;\r\n+import java.util.concurrent.CompletableFuture;\r\n+import java.util.concurrent.CopyOnWriteArrayList;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.TimeUnit;\r\n+import java.util.concurrent.TimeoutException;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.JsonSyntaxException;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.jetty.client.HttpClient;\r\n+import org.eclipse.jetty.client.HttpResponse;\r\n+import org.eclipse.jetty.client.api.Request;\r\n+import org.eclipse.jetty.client.api.Result;\r\n+import org.eclipse.jetty.client.util.BufferingResponseListener;\r\n+import org.eclipse.jetty.http.HttpMethod;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.openhab.binding.dwdpollenflug.internal.DWDPollingException;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugBridgeConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflugJSON;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugBridgeHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugBridgeHandler extends BaseBridgeHandler {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugBridgeHandler.class);\r\n+\r\n+    private static final String DWD_URL = \"https://opendata.dwd.de/climate_environment/health/alerts/s31fg.json\";\r\n+\r\n+    private DWDPollenflugBridgeConfiguration bridgeConfig = new DWDPollenflugBridgeConfiguration();\r\n+\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    private @Nullable DWDPollenflug pollenflug;\r\n+\r\n+    private final List<DWDPollenflugRegionListener> regionListeners = new CopyOnWriteArrayList<>();\r\n+\r\n+    private final HttpClient client;\r\n+\r\n+    private final Gson gson = new Gson();\r\n+\r\n+    public DWDPollenflugBridgeHandler(Bridge bridge, HttpClient client) {\r\n+        super(bridge);\r\n+        this.client = client;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        logger.debug(\"Initializing DWD Pollenflug bridge handler\");\r\n+        bridgeConfig = getConfigAs(DWDPollenflugBridgeConfiguration.class);\r\n+\r\n+        if (bridgeConfig.isValid()) {\r\n+            onUpdate();\r\n+        } else {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\r\n+        }\r\n+    }\r\n+\r\n+    private synchronized void onUpdate() {\r\n+        if (regionListeners.isEmpty()) {\r\n+            stopPolling();\r\n+            updateStatus(ThingStatus.ONLINE);\r\n+        } else {\r\n+            startPolling();\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        logger.debug(\"Handler disposed.\");\r\n+        stopPolling();\r\n+    }\r\n+\r\n+    public void startPolling() {\r\n+        final ScheduledFuture<?> localPollingJob = this.pollingJob;\r\n+        if (localPollingJob == null || localPollingJob.isCancelled()) {\r\n+            logger.debug(\"Start polling.\");\r\n+            pollingJob = scheduler.scheduleWithFixedDelay(this::poll, INITIAL_DELAY,\r\n+                    bridgeConfig.refresh * SECONDS_PER_MINUTE, TimeUnit.SECONDS);\r\n+        } else if (pollenflug != null) {\r\n+            notifyOnUpdate(pollenflug);\r\n+        }\r\n+    }\r\n+\r\n+    public void stopPolling() {\r\n+        final ScheduledFuture<?> localPollingJob = this.pollingJob;\r\n+        if (localPollingJob != null && !localPollingJob.isCancelled()) {\r\n+            logger.debug(\"Stop polling.\");\r\n+            localPollingJob.cancel(true);\r\n+            pollingJob = null;\r\n+        }\r\n+    }\r\n+\r\n+    public void poll() {\r\n+        logger.debug(\"Polling\");\r\n+        requestRefresh().handle((pollenflug, e) -> {\r", "originalCommit": "5459c0085c5b9c7c72e23e03fb7e6e14de002ca8", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzOTY5NQ==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407039695", "bodyText": "Please check my fix.", "author": "DerOetzi", "createdAt": "2020-04-11T09:12:55Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk5MTk5MQ=="}], "type": "inlineReview"}, {"oid": "be1586a3b2a7993204ba3122736462dd069ad959", "url": "https://github.com/openhab/openhab-addons/commit/be1586a3b2a7993204ba3122736462dd069ad959", "message": "[DWDPollenflug] Fixed review comments of cpmeister\n\nSigned-off-by: Johannes DerOetzi Ott <info@johannes-ott.net>", "committedDate": "2020-04-11T09:07:52Z", "type": "forcePushed"}, {"oid": "555b58e9374fd7d496d8554d4d566cd680ac58c0", "url": "https://github.com/openhab/openhab-addons/commit/555b58e9374fd7d496d8554d4d566cd680ac58c0", "message": "[DWDPollenflug] Changed labels to convention\n\nSigned-off-by: Johannes DerOetzi Ott <info@johannes-ott.net>", "committedDate": "2020-04-11T17:37:50Z", "type": "forcePushed"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA4ODIxMA==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407088210", "body": "```suggestion\r\n            pollingJob = scheduler.scheduleWithFixedDelay(this::poll, INITIAL_DELAY,\r\n                    bridgeConfig.refresh, TimeUnit.MINUTES);\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        pollingJob = scheduler.scheduleWithFixedDelay(this::poll, INITIAL_DELAY,\n          \n          \n            \n                                bridgeConfig.refresh * SECONDS_PER_MINUTE, TimeUnit.SECONDS);\n          \n          \n            \n                        pollingJob = scheduler.scheduleWithFixedDelay(this::poll, INITIAL_DELAY,\n          \n          \n            \n                                bridgeConfig.refresh, TimeUnit.MINUTES);", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            pollingJob <span class=\"pl-k\">=</span> scheduler<span class=\"pl-k\">.</span>scheduleWithFixedDelay(<span class=\"pl-c1\">this</span><span class=\"pl-k\">::</span>poll, <span class=\"pl-c1\">INITIAL_DELAY</span>,</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                    bridgeConfig<span class=\"pl-k\">.</span>refresh<span class=\"x x-first\"> </span><span class=\"pl-k x\">*</span><span class=\"x\"> </span><span class=\"pl-c1 x x-last\">SECONDS_PER_MINUTE</span>, <span class=\"pl-smi\">TimeUnit</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span><span class=\"x x-first x-last\">SECONDS</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            pollingJob <span class=\"pl-k\">=</span> scheduler<span class=\"pl-k\">.</span>scheduleWithFixedDelay(<span class=\"pl-c1\">this</span><span class=\"pl-k\">::</span>poll, <span class=\"pl-c1\">INITIAL_DELAY</span>,</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">                    bridgeConfig<span class=\"pl-k\">.</span>refresh, <span class=\"pl-smi\">TimeUnit</span><span class=\"pl-c1\"><span class=\"pl-k\">.</span><span class=\"x x-first x-last\">MINUTES</span></span>);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "J-N-K", "createdAt": "2020-04-11T17:20:41Z", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "diffHunk": "@@ -89,43 +111,78 @@ public void dispose() {\n     }\r\n \r\n     public void startPolling() {\r\n-        if (pollingJob == null || pollingJob.isCancelled()) {\r\n+        final ScheduledFuture<?> localPollingJob = this.pollingJob;\r\n+        final DWDPollenflug localPollenflug = this.pollenflug;\r\n+        if (localPollingJob == null || localPollingJob.isCancelled()) {\r\n             logger.debug(\"Start polling.\");\r\n-            pollingJob = scheduler.scheduleWithFixedDelay(pollingJobRunnable, INITIAL_DELAY,\r\n-                    bridgeConfig.getRefresh() * SECONDS_PER_MINUTE, TimeUnit.SECONDS);\r\n+            pollingJob = scheduler.scheduleWithFixedDelay(this::poll, INITIAL_DELAY,\r\n+                    bridgeConfig.refresh * SECONDS_PER_MINUTE, TimeUnit.SECONDS);\r", "originalCommit": "731fe821902a0ed1b9a0bdfb0376a7c75f38fb17", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5NjIxOA==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407096218", "bodyText": "This change would require changes to the INITIAL_DELAY constant as well", "author": "cpmeister", "createdAt": "2020-04-11T18:35:39Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA4ODIxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5NzE5NQ==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407097195", "bodyText": "When I see it right, the scheduleWithFixedDelay takes only long parameters. So if I change to your suggestion the first polling will start only 1 Minute after binding has been loaded?", "author": "DerOetzi", "createdAt": "2020-04-11T18:45:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA4ODIxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwNDIxMQ==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407104211", "bodyText": "I think I will not change this, because i want to start polling right after binding loaded", "author": "DerOetzi", "createdAt": "2020-04-11T19:54:23Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA4ODIxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzExOTI2OQ==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407119269", "bodyText": "I have refactored this not using SECONDS_PER_MINUTE constant anymore but\nTimeUnit.MINUTES.toSeconds(bridgeConfig.refresh)\nI like this option more then calculating it on my own. What do you thing. Pleas check!", "author": "DerOetzi", "createdAt": "2020-04-11T22:46:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA4ODIxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE1OTYxNw==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407159617", "bodyText": "Agreed, that's better. The question is: why do you wnat the one second delay at all? I think there is no need and you can just set it to zero (and use TimeUnit.MINUTES then.", "author": "J-N-K", "createdAt": "2020-04-12T07:30:37Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA4ODIxMA=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE2NTE1Nw==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407165157", "bodyText": "OMG! Just ignore the stupid guy, who didn't see the wood for the trees and check his fix.", "author": "DerOetzi", "createdAt": "2020-04-12T08:24:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA4ODIxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5MDQwMg==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407090402", "body": "You can remove that and use the the correct `TimeUnit` directly in the scheduler", "bodyText": "You can remove that and use the the correct TimeUnit directly in the scheduler", "bodyHTML": "<p dir=\"auto\">You can remove that and use the the correct <code>TimeUnit</code> directly in the scheduler</p>", "author": "J-N-K", "createdAt": "2020-04-11T17:41:35Z", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/DWDPollenflugBindingConstants.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal;\r\n+\r\n+import java.util.concurrent.TimeUnit;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugBindingConstants} class defines common constants, which are\r\n+ * used across the whole binding.\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugBindingConstants {\r\n+    public static final long INITIAL_DELAY = TimeUnit.SECONDS.toSeconds(1);\r\n+\r\n+    public static final long SECONDS_PER_MINUTE = 60;\r", "originalCommit": "555b58e9374fd7d496d8554d4d566cd680ac58c0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwMDg1MA==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407100850", "bodyText": "See comment above.", "author": "DerOetzi", "createdAt": "2020-04-11T19:20:33Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5MDQwMg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5MDQ3OA==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407090478", "body": "Why not just set that to `1`?\r\n```suggestion\r\n    public static final long INITIAL_DELAY = 1; // in seconds\r\n\r\n```", "bodyText": "Why not just set that to 1?\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static final long INITIAL_DELAY = TimeUnit.SECONDS.toSeconds(1);\n          \n          \n            \n                public static final long INITIAL_DELAY = 1; // in seconds", "bodyHTML": "<p dir=\"auto\">Why not just set that to <code>1</code>?</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">final</span> <span class=\"pl-k\">long</span> <span class=\"pl-c1\">INITIAL_DELAY</span> <span class=\"pl-k\">=</span> <span class=\"pl-smi x x-first\">TimeUnit</span><span class=\"pl-c1\"><span class=\"pl-k x\">.</span><span class=\"x\">SECONDS</span></span><span class=\"pl-k x\">.</span><span class=\"x\">toSeconds(</span><span class=\"pl-c1 x\">1</span><span class=\"x x-last\">);</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">final</span> <span class=\"pl-k\">long</span> <span class=\"pl-c1\">INITIAL_DELAY</span> <span class=\"pl-k\">=</span> <span class=\"pl-c1 x x-first\">1</span><span class=\"x\">; </span><span class=\"pl-c\"><span class=\"pl-c x\">//</span><span class=\"x x-last\"> in seconds</span></span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "J-N-K", "createdAt": "2020-04-11T17:42:03Z", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/DWDPollenflugBindingConstants.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal;\r\n+\r\n+import java.util.concurrent.TimeUnit;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugBindingConstants} class defines common constants, which are\r\n+ * used across the whole binding.\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugBindingConstants {\r\n+    public static final long INITIAL_DELAY = TimeUnit.SECONDS.toSeconds(1);\r", "originalCommit": "555b58e9374fd7d496d8554d4d566cd680ac58c0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwNDM4OQ==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407104389", "bodyText": "Changed", "author": "DerOetzi", "createdAt": "2020-04-11T19:56:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5MDQ3OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5MDcxMA==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407090710", "body": "You don't get channels here. Rename to something like `getChannelStateMap` or something like that (also applies below).", "bodyText": "You don't get channels here. Rename to something like getChannelStateMap or something like that (also applies below).", "bodyHTML": "<p dir=\"auto\">You don't get channels here. Rename to something like <code>getChannelStateMap</code> or something like that (also applies below).</p>", "author": "J-N-K", "createdAt": "2020-04-11T17:43:52Z", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/dto/DWDPollenflug.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.dto;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.text.ParseException;\r\n+import java.text.SimpleDateFormat;\r\n+import java.time.ZoneId;\r\n+import java.time.ZonedDateTime;\r\n+import java.util.Collections;\r\n+import java.util.Date;\r\n+import java.util.HashMap;\r\n+import java.util.Map;\r\n+import java.util.Set;\r\n+\r\n+import com.google.gson.annotations.SerializedName;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.smarthome.core.library.types.DateTimeType;\r\n+import org.eclipse.smarthome.core.types.State;\r\n+import org.eclipse.smarthome.core.types.UnDefType;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflug} class is internal DWD data structure.\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflug {\r\n+    private String sender = \"\";\r\n+\r\n+    private String name = \"\";\r\n+\r\n+    private final Date created = new Date();\r\n+\r\n+    @SerializedName(\"next_update\")\r\n+    private @Nullable String nextUpdate;\r\n+\r\n+    @SerializedName(\"last_update\")\r\n+    private @Nullable String lastUpdate;\r\n+\r\n+    @SerializedName(\"content\")\r\n+    private @Nullable Set<DWDRegion> regions;\r\n+\r\n+    public Map<String, String> getProperties() {\r\n+        Map<String, String> map = new HashMap<>();\r\n+\r\n+        map.put(PROPERTY_NAME, name);\r\n+        map.put(PROPERTY_SENDER, sender);\r\n+\r\n+        return Collections.unmodifiableMap(map);\r\n+    }\r\n+\r\n+    public Map<String, State> getChannels() {\r", "originalCommit": "555b58e9374fd7d496d8554d4d566cd680ac58c0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwNDQyMQ==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407104421", "bodyText": "Changed to getChannelsStateMap", "author": "DerOetzi", "createdAt": "2020-04-11T19:56:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5MDcxMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5MTEyNw==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407091127", "body": "In case of errors, a listener could register twice and would then also receive the update twice. WDYT about changing that to a `Set`? A thread-safe implementation would be `ConcurrentHashMap.newKeySet()`;", "bodyText": "In case of errors, a listener could register twice and would then also receive the update twice. WDYT about changing that to a Set? A thread-safe implementation would be ConcurrentHashMap.newKeySet();", "bodyHTML": "<p dir=\"auto\">In case of errors, a listener could register twice and would then also receive the update twice. WDYT about changing that to a <code>Set</code>? A thread-safe implementation would be <code>ConcurrentHashMap.newKeySet()</code>;</p>", "author": "J-N-K", "createdAt": "2020-04-11T17:47:50Z", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "diffHunk": "@@ -0,0 +1,222 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.net.URI;\r\n+import java.util.List;\r\n+import java.net.SocketTimeoutException;\r\n+import java.util.concurrent.CompletableFuture;\r\n+import java.util.concurrent.CopyOnWriteArrayList;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.TimeUnit;\r\n+import java.util.concurrent.TimeoutException;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.JsonSyntaxException;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.jetty.client.HttpClient;\r\n+import org.eclipse.jetty.client.HttpResponse;\r\n+import org.eclipse.jetty.client.api.Request;\r\n+import org.eclipse.jetty.client.api.Result;\r\n+import org.eclipse.jetty.client.util.BufferingResponseListener;\r\n+import org.eclipse.jetty.http.HttpMethod;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.openhab.binding.dwdpollenflug.internal.DWDPollingException;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugBridgeConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugBridgeHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugBridgeHandler extends BaseBridgeHandler {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugBridgeHandler.class);\r\n+\r\n+    private static final String DWD_URL = \"https://opendata.dwd.de/climate_environment/health/alerts/s31fg.json\";\r\n+\r\n+    private DWDPollenflugBridgeConfiguration bridgeConfig = new DWDPollenflugBridgeConfiguration();\r\n+\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    private @Nullable DWDPollenflug pollenflug;\r\n+\r\n+    private final List<DWDPollenflugRegionListener> regionListeners = new CopyOnWriteArrayList<>();\r", "originalCommit": "555b58e9374fd7d496d8554d4d566cd680ac58c0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwNDc0MA==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407104740", "bodyText": "I'm not so familiar with Thread-Safe Sets. Can you maybe give me are more detailed example, or a binding I can have a look?", "author": "DerOetzi", "createdAt": "2020-04-11T19:59:48Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5MTEyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE2MTU2Mw==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407161563", "bodyText": "Thread-safe implementations can be achived by synchronized collections (i.e. Collections.synchronizedCollection(...). This makes sure that the methods of the collection (like add, remove, get, ...) can only be accessed by one thread at a time, so it is made sure that the same element is never modified by two threads concurrently. The downside is that the whole collection is locked and all othe treads have to wait for the first operazion to complete.\nThe second option is that you use the collections from java.util.concurrent, e.g. the CopyOnWriteList you used. This locks only parts of the collections, so that other parts of the collection can still be accessed by other threads. There is no Set implementation in this package, but the ConcurrentHashMap provides one, so you can use ConcurrentHashMap.newKeySet() instead of new ConcurrentHashMap<>() which does not exist.\nMy second point is that using a Set better fits your use-case than a List. A List can contain duplicates (so if you call add several times with the same object, it gets added several times). Each time you iterate over that list, your listener will get called multiple times. Another (more important issue): Calling remove will only remove the first element that matches, the duplicates stay in the list. The next time you iterate over the list, one the duplicates are called, even if they should have been removed.\nThis can be avoided with a Set, because a Set only allows distinct objects. If you add the same object a second time, the first one is replaced instead of adding a duplicate. You can even check with the return value (true if a new element, false if a replaced element) if something strange happened and log a warning in registerListener. The same holds true for unregister, if you call remove and the return-value is false, you tried to remove a listener that was not part of the listener collection.", "author": "J-N-K", "createdAt": "2020-04-12T07:50:22Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5MTEyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE2NzcwMQ==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407167701", "bodyText": "Ok I changed now. I had a closer look on it and want to ask:\nWouldn't it be a better pattern not to get the bridge handler inside the region handler and call register and unregister there, but overwrite childHandlerInitialized and childHandlerDisposed in the bridge handler?", "author": "DerOetzi", "createdAt": "2020-04-12T08:48:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5MTEyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE3MDQzOA==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407170438", "bodyText": "That's probably also possible. But I think we have two patterns so far in openHAB: registering listeners from the thing to the bridge or (in some cases) the bridge iterating over all things. This would be a third one and I guess there is not much benefit in introducing that.", "author": "J-N-K", "createdAt": "2020-04-12T09:14:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5MTEyNw=="}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE3NTE4MQ==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407175181", "bodyText": "I changed it anyway, Please check again!", "author": "DerOetzi", "createdAt": "2020-04-12T09:57:49Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5MTEyNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5MjYzNw==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407092637", "body": "can be private", "bodyText": "can be private", "bodyHTML": "<p dir=\"auto\">can be private</p>", "author": "J-N-K", "createdAt": "2020-04-11T18:01:59Z", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "diffHunk": "@@ -0,0 +1,222 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.net.URI;\r\n+import java.util.List;\r\n+import java.net.SocketTimeoutException;\r\n+import java.util.concurrent.CompletableFuture;\r\n+import java.util.concurrent.CopyOnWriteArrayList;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.TimeUnit;\r\n+import java.util.concurrent.TimeoutException;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.JsonSyntaxException;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.jetty.client.HttpClient;\r\n+import org.eclipse.jetty.client.HttpResponse;\r\n+import org.eclipse.jetty.client.api.Request;\r\n+import org.eclipse.jetty.client.api.Result;\r\n+import org.eclipse.jetty.client.util.BufferingResponseListener;\r\n+import org.eclipse.jetty.http.HttpMethod;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.openhab.binding.dwdpollenflug.internal.DWDPollingException;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugBridgeConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugBridgeHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugBridgeHandler extends BaseBridgeHandler {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugBridgeHandler.class);\r\n+\r\n+    private static final String DWD_URL = \"https://opendata.dwd.de/climate_environment/health/alerts/s31fg.json\";\r\n+\r\n+    private DWDPollenflugBridgeConfiguration bridgeConfig = new DWDPollenflugBridgeConfiguration();\r\n+\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    private @Nullable DWDPollenflug pollenflug;\r\n+\r\n+    private final List<DWDPollenflugRegionListener> regionListeners = new CopyOnWriteArrayList<>();\r\n+\r\n+    private final HttpClient client;\r\n+\r\n+    private final Gson gson = new Gson();\r\n+\r\n+    public DWDPollenflugBridgeHandler(Bridge bridge, HttpClient client) {\r\n+        super(bridge);\r\n+        this.client = client;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void handleCommand(ChannelUID channelUID, Command command) {\r\n+        if (command instanceof RefreshType) {\r\n+            onUpdate();\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        logger.debug(\"Initializing DWD Pollenflug bridge handler\");\r\n+        bridgeConfig = getConfigAs(DWDPollenflugBridgeConfiguration.class);\r\n+\r\n+        if (bridgeConfig.isValid()) {\r\n+            onUpdate();\r\n+        } else {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\r\n+        }\r\n+    }\r\n+\r\n+    private synchronized void onUpdate() {\r\n+        if (regionListeners.isEmpty()) {\r\n+            stopPolling();\r\n+            updateStatus(ThingStatus.ONLINE);\r\n+        } else {\r\n+            startPolling();\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        logger.debug(\"Handler disposed.\");\r\n+        stopPolling();\r\n+    }\r\n+\r\n+    public void startPolling() {\r\n+        final ScheduledFuture<?> localPollingJob = this.pollingJob;\r\n+        final DWDPollenflug localPollenflug = this.pollenflug;\r\n+        if (localPollingJob == null || localPollingJob.isCancelled()) {\r\n+            logger.debug(\"Start polling.\");\r\n+            pollingJob = scheduler.scheduleWithFixedDelay(this::poll, INITIAL_DELAY,\r\n+                    bridgeConfig.refresh * SECONDS_PER_MINUTE, TimeUnit.SECONDS);\r\n+        } else if (pollenflug != null) {\r\n+            notifyOnUpdate(localPollenflug);\r\n+        }\r\n+    }\r\n+\r\n+    public void stopPolling() {\r\n+        final ScheduledFuture<?> localPollingJob = this.pollingJob;\r\n+        if (localPollingJob != null && !localPollingJob.isCancelled()) {\r\n+            logger.debug(\"Stop polling.\");\r\n+            localPollingJob.cancel(true);\r\n+            pollingJob = null;\r\n+        }\r\n+    }\r\n+\r\n+    public void poll() {\r", "originalCommit": "555b58e9374fd7d496d8554d4d566cd680ac58c0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwNDgxNw==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407104817", "bodyText": "Changed", "author": "DerOetzi", "createdAt": "2020-04-11T20:00:42Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5MjYzNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5MjY0OA==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407092648", "body": "can be private", "bodyText": "can be private", "bodyHTML": "<p dir=\"auto\">can be private</p>", "author": "J-N-K", "createdAt": "2020-04-11T18:02:07Z", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "diffHunk": "@@ -0,0 +1,222 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.net.URI;\r\n+import java.util.List;\r\n+import java.net.SocketTimeoutException;\r\n+import java.util.concurrent.CompletableFuture;\r\n+import java.util.concurrent.CopyOnWriteArrayList;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.TimeUnit;\r\n+import java.util.concurrent.TimeoutException;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.JsonSyntaxException;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.jetty.client.HttpClient;\r\n+import org.eclipse.jetty.client.HttpResponse;\r\n+import org.eclipse.jetty.client.api.Request;\r\n+import org.eclipse.jetty.client.api.Result;\r\n+import org.eclipse.jetty.client.util.BufferingResponseListener;\r\n+import org.eclipse.jetty.http.HttpMethod;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.openhab.binding.dwdpollenflug.internal.DWDPollingException;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugBridgeConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugBridgeHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugBridgeHandler extends BaseBridgeHandler {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugBridgeHandler.class);\r\n+\r\n+    private static final String DWD_URL = \"https://opendata.dwd.de/climate_environment/health/alerts/s31fg.json\";\r\n+\r\n+    private DWDPollenflugBridgeConfiguration bridgeConfig = new DWDPollenflugBridgeConfiguration();\r\n+\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    private @Nullable DWDPollenflug pollenflug;\r\n+\r\n+    private final List<DWDPollenflugRegionListener> regionListeners = new CopyOnWriteArrayList<>();\r\n+\r\n+    private final HttpClient client;\r\n+\r\n+    private final Gson gson = new Gson();\r\n+\r\n+    public DWDPollenflugBridgeHandler(Bridge bridge, HttpClient client) {\r\n+        super(bridge);\r\n+        this.client = client;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void handleCommand(ChannelUID channelUID, Command command) {\r\n+        if (command instanceof RefreshType) {\r\n+            onUpdate();\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        logger.debug(\"Initializing DWD Pollenflug bridge handler\");\r\n+        bridgeConfig = getConfigAs(DWDPollenflugBridgeConfiguration.class);\r\n+\r\n+        if (bridgeConfig.isValid()) {\r\n+            onUpdate();\r\n+        } else {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\r\n+        }\r\n+    }\r\n+\r\n+    private synchronized void onUpdate() {\r\n+        if (regionListeners.isEmpty()) {\r\n+            stopPolling();\r\n+            updateStatus(ThingStatus.ONLINE);\r\n+        } else {\r\n+            startPolling();\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        logger.debug(\"Handler disposed.\");\r\n+        stopPolling();\r\n+    }\r\n+\r\n+    public void startPolling() {\r\n+        final ScheduledFuture<?> localPollingJob = this.pollingJob;\r\n+        final DWDPollenflug localPollenflug = this.pollenflug;\r\n+        if (localPollingJob == null || localPollingJob.isCancelled()) {\r\n+            logger.debug(\"Start polling.\");\r\n+            pollingJob = scheduler.scheduleWithFixedDelay(this::poll, INITIAL_DELAY,\r\n+                    bridgeConfig.refresh * SECONDS_PER_MINUTE, TimeUnit.SECONDS);\r\n+        } else if (pollenflug != null) {\r\n+            notifyOnUpdate(localPollenflug);\r\n+        }\r\n+    }\r\n+\r\n+    public void stopPolling() {\r", "originalCommit": "555b58e9374fd7d496d8554d4d566cd680ac58c0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwNDgyOQ==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407104829", "bodyText": "Changed", "author": "DerOetzi", "createdAt": "2020-04-11T20:00:51Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5MjY0OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5MjY1OA==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407092658", "body": "can be private", "bodyText": "can be private", "bodyHTML": "<p dir=\"auto\">can be private</p>", "author": "J-N-K", "createdAt": "2020-04-11T18:02:18Z", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "diffHunk": "@@ -0,0 +1,222 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.net.URI;\r\n+import java.util.List;\r\n+import java.net.SocketTimeoutException;\r\n+import java.util.concurrent.CompletableFuture;\r\n+import java.util.concurrent.CopyOnWriteArrayList;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.TimeUnit;\r\n+import java.util.concurrent.TimeoutException;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.JsonSyntaxException;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.jetty.client.HttpClient;\r\n+import org.eclipse.jetty.client.HttpResponse;\r\n+import org.eclipse.jetty.client.api.Request;\r\n+import org.eclipse.jetty.client.api.Result;\r\n+import org.eclipse.jetty.client.util.BufferingResponseListener;\r\n+import org.eclipse.jetty.http.HttpMethod;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.openhab.binding.dwdpollenflug.internal.DWDPollingException;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugBridgeConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugBridgeHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugBridgeHandler extends BaseBridgeHandler {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugBridgeHandler.class);\r\n+\r\n+    private static final String DWD_URL = \"https://opendata.dwd.de/climate_environment/health/alerts/s31fg.json\";\r\n+\r\n+    private DWDPollenflugBridgeConfiguration bridgeConfig = new DWDPollenflugBridgeConfiguration();\r\n+\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    private @Nullable DWDPollenflug pollenflug;\r\n+\r\n+    private final List<DWDPollenflugRegionListener> regionListeners = new CopyOnWriteArrayList<>();\r\n+\r\n+    private final HttpClient client;\r\n+\r\n+    private final Gson gson = new Gson();\r\n+\r\n+    public DWDPollenflugBridgeHandler(Bridge bridge, HttpClient client) {\r\n+        super(bridge);\r\n+        this.client = client;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void handleCommand(ChannelUID channelUID, Command command) {\r\n+        if (command instanceof RefreshType) {\r\n+            onUpdate();\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        logger.debug(\"Initializing DWD Pollenflug bridge handler\");\r\n+        bridgeConfig = getConfigAs(DWDPollenflugBridgeConfiguration.class);\r\n+\r\n+        if (bridgeConfig.isValid()) {\r\n+            onUpdate();\r\n+        } else {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\r\n+        }\r\n+    }\r\n+\r\n+    private synchronized void onUpdate() {\r\n+        if (regionListeners.isEmpty()) {\r\n+            stopPolling();\r\n+            updateStatus(ThingStatus.ONLINE);\r\n+        } else {\r\n+            startPolling();\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        logger.debug(\"Handler disposed.\");\r\n+        stopPolling();\r\n+    }\r\n+\r\n+    public void startPolling() {\r", "originalCommit": "555b58e9374fd7d496d8554d4d566cd680ac58c0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwNDg1NA==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407104854", "bodyText": "Changed", "author": "DerOetzi", "createdAt": "2020-04-11T20:01:21Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5MjY1OA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5Mjc0MQ==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407092741", "body": "I'm not to happy with these synchronized methods.\r\n\r\nMy feeling would be to skip the whole synchronization and start/stop the polling in `initialize`/`dispose` independently of the existence of listeners. We are talking about one HTTP request (and some processing) at max every 15 minutes. IMO easier code is worth that (then having a thread-safe collection for the listeners would be sufficient). If you want to further reduce the load, you could check if `listeners` is empty each time `poll` is called, then it's one check only.", "bodyText": "I'm not to happy with these synchronized methods.\nMy feeling would be to skip the whole synchronization and start/stop the polling in initialize/dispose independently of the existence of listeners. We are talking about one HTTP request (and some processing) at max every 15 minutes. IMO easier code is worth that (then having a thread-safe collection for the listeners would be sufficient). If you want to further reduce the load, you could check if listeners is empty each time poll is called, then it's one check only.", "bodyHTML": "<p dir=\"auto\">I'm not to happy with these synchronized methods.</p>\n<p dir=\"auto\">My feeling would be to skip the whole synchronization and start/stop the polling in <code>initialize</code>/<code>dispose</code> independently of the existence of listeners. We are talking about one HTTP request (and some processing) at max every 15 minutes. IMO easier code is worth that (then having a thread-safe collection for the listeners would be sufficient). If you want to further reduce the load, you could check if <code>listeners</code> is empty each time <code>poll</code> is called, then it's one check only.</p>", "author": "J-N-K", "createdAt": "2020-04-11T18:03:12Z", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "diffHunk": "@@ -0,0 +1,222 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.net.URI;\r\n+import java.util.List;\r\n+import java.net.SocketTimeoutException;\r\n+import java.util.concurrent.CompletableFuture;\r\n+import java.util.concurrent.CopyOnWriteArrayList;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.TimeUnit;\r\n+import java.util.concurrent.TimeoutException;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.JsonSyntaxException;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.jetty.client.HttpClient;\r\n+import org.eclipse.jetty.client.HttpResponse;\r\n+import org.eclipse.jetty.client.api.Request;\r\n+import org.eclipse.jetty.client.api.Result;\r\n+import org.eclipse.jetty.client.util.BufferingResponseListener;\r\n+import org.eclipse.jetty.http.HttpMethod;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.openhab.binding.dwdpollenflug.internal.DWDPollingException;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugBridgeConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugBridgeHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugBridgeHandler extends BaseBridgeHandler {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugBridgeHandler.class);\r\n+\r\n+    private static final String DWD_URL = \"https://opendata.dwd.de/climate_environment/health/alerts/s31fg.json\";\r\n+\r\n+    private DWDPollenflugBridgeConfiguration bridgeConfig = new DWDPollenflugBridgeConfiguration();\r\n+\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    private @Nullable DWDPollenflug pollenflug;\r\n+\r\n+    private final List<DWDPollenflugRegionListener> regionListeners = new CopyOnWriteArrayList<>();\r\n+\r\n+    private final HttpClient client;\r\n+\r\n+    private final Gson gson = new Gson();\r\n+\r\n+    public DWDPollenflugBridgeHandler(Bridge bridge, HttpClient client) {\r\n+        super(bridge);\r\n+        this.client = client;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void handleCommand(ChannelUID channelUID, Command command) {\r\n+        if (command instanceof RefreshType) {\r\n+            onUpdate();\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        logger.debug(\"Initializing DWD Pollenflug bridge handler\");\r\n+        bridgeConfig = getConfigAs(DWDPollenflugBridgeConfiguration.class);\r\n+\r\n+        if (bridgeConfig.isValid()) {\r\n+            onUpdate();\r\n+        } else {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\r\n+        }\r\n+    }\r\n+\r\n+    private synchronized void onUpdate() {\r", "originalCommit": "555b58e9374fd7d496d8554d4d566cd680ac58c0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwNTE2Ng==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407105166", "bodyText": "Changed I always polling for the whole bridge lifetime, which is more correct anyway for the need of bridge channels although getting updated", "author": "DerOetzi", "createdAt": "2020-04-11T20:04:29Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5Mjc0MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5Mzk2OQ==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407093969", "body": "```suggestion\r\n            regionListeners.forEach(listener -> listener.notifyOnUpdate(newState));\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        for (DWDPollenflugRegionListener regionListener : regionListeners) {\n          \n          \n            \n                            regionListener.notifyOnUpdate(newState);\n          \n          \n            \n                        }\n          \n          \n            \n                        regionListeners.forEach(listener -> listener.notifyOnUpdate(newState));", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            <span class=\"pl-k\">for</span> (<span class=\"pl-smi\">DWDPollenflugRegionListener</span> regionListener <span class=\"pl-k\">:</span> regionListeners) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                regionListener<span class=\"pl-k\">.</span>notifyOnUpdate(newState);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            regionListeners<span class=\"pl-k\">.</span>forEach(listener <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> listener<span class=\"pl-k\">.</span>notifyOnUpdate(newState));</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "J-N-K", "createdAt": "2020-04-11T18:14:43Z", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "diffHunk": "@@ -0,0 +1,222 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.net.URI;\r\n+import java.util.List;\r\n+import java.net.SocketTimeoutException;\r\n+import java.util.concurrent.CompletableFuture;\r\n+import java.util.concurrent.CopyOnWriteArrayList;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.TimeUnit;\r\n+import java.util.concurrent.TimeoutException;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.JsonSyntaxException;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.jetty.client.HttpClient;\r\n+import org.eclipse.jetty.client.HttpResponse;\r\n+import org.eclipse.jetty.client.api.Request;\r\n+import org.eclipse.jetty.client.api.Result;\r\n+import org.eclipse.jetty.client.util.BufferingResponseListener;\r\n+import org.eclipse.jetty.http.HttpMethod;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.openhab.binding.dwdpollenflug.internal.DWDPollingException;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugBridgeConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugBridgeHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugBridgeHandler extends BaseBridgeHandler {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugBridgeHandler.class);\r\n+\r\n+    private static final String DWD_URL = \"https://opendata.dwd.de/climate_environment/health/alerts/s31fg.json\";\r\n+\r\n+    private DWDPollenflugBridgeConfiguration bridgeConfig = new DWDPollenflugBridgeConfiguration();\r\n+\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    private @Nullable DWDPollenflug pollenflug;\r\n+\r\n+    private final List<DWDPollenflugRegionListener> regionListeners = new CopyOnWriteArrayList<>();\r\n+\r\n+    private final HttpClient client;\r\n+\r\n+    private final Gson gson = new Gson();\r\n+\r\n+    public DWDPollenflugBridgeHandler(Bridge bridge, HttpClient client) {\r\n+        super(bridge);\r\n+        this.client = client;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void handleCommand(ChannelUID channelUID, Command command) {\r\n+        if (command instanceof RefreshType) {\r\n+            onUpdate();\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        logger.debug(\"Initializing DWD Pollenflug bridge handler\");\r\n+        bridgeConfig = getConfigAs(DWDPollenflugBridgeConfiguration.class);\r\n+\r\n+        if (bridgeConfig.isValid()) {\r\n+            onUpdate();\r\n+        } else {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\r\n+        }\r\n+    }\r\n+\r\n+    private synchronized void onUpdate() {\r\n+        if (regionListeners.isEmpty()) {\r\n+            stopPolling();\r\n+            updateStatus(ThingStatus.ONLINE);\r\n+        } else {\r\n+            startPolling();\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        logger.debug(\"Handler disposed.\");\r\n+        stopPolling();\r\n+    }\r\n+\r\n+    public void startPolling() {\r\n+        final ScheduledFuture<?> localPollingJob = this.pollingJob;\r\n+        final DWDPollenflug localPollenflug = this.pollenflug;\r\n+        if (localPollingJob == null || localPollingJob.isCancelled()) {\r\n+            logger.debug(\"Start polling.\");\r\n+            pollingJob = scheduler.scheduleWithFixedDelay(this::poll, INITIAL_DELAY,\r\n+                    bridgeConfig.refresh * SECONDS_PER_MINUTE, TimeUnit.SECONDS);\r\n+        } else if (pollenflug != null) {\r\n+            notifyOnUpdate(localPollenflug);\r\n+        }\r\n+    }\r\n+\r\n+    public void stopPolling() {\r\n+        final ScheduledFuture<?> localPollingJob = this.pollingJob;\r\n+        if (localPollingJob != null && !localPollingJob.isCancelled()) {\r\n+            logger.debug(\"Stop polling.\");\r\n+            localPollingJob.cancel(true);\r\n+            pollingJob = null;\r\n+        }\r\n+    }\r\n+\r\n+    public void poll() {\r\n+        logger.debug(\"Polling\");\r\n+        requestRefresh().handle((pollenflug, pollException) -> {\r\n+            if (pollenflug == null) {\r\n+                if (pollException == null) {\r\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\r\n+                } else {\r\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\r\n+                            pollException.getMessage());\r\n+                }\r\n+            } else {\r\n+                updateStatus(ThingStatus.ONLINE);\r\n+                notifyOnUpdate(pollenflug);\r\n+            }\r\n+\r\n+            return null;\r\n+        });\r\n+    }\r\n+\r\n+    private CompletableFuture<@Nullable DWDPollenflug> requestRefresh() {\r\n+        CompletableFuture<@Nullable DWDPollenflug> f = new CompletableFuture<>();\r\n+        Request request = client.newRequest(URI.create(DWD_URL));\r\n+\r\n+        request.method(HttpMethod.GET).timeout(2000, TimeUnit.SECONDS).send(new BufferingResponseListener() {\r\n+            @NonNullByDefault({})\r\n+            @Override\r\n+            public void onComplete(Result result) {\r\n+                final HttpResponse response = (HttpResponse) result.getResponse();\r\n+                if (result.getFailure() != null) {\r\n+                    Throwable e = result.getFailure();\r\n+                    if (e instanceof SocketTimeoutException || e instanceof TimeoutException) {\r\n+                        f.completeExceptionally(new DWDPollingException(\"Request timeout\", e));\r\n+                    } else {\r\n+                        f.completeExceptionally(new DWDPollingException(\"Request failed\", e));\r\n+                    }\r\n+                } else if (response.getStatus() != 200) {\r\n+                    f.completeExceptionally(new DWDPollingException(getContentAsString()));\r\n+                } else {\r\n+                    try {\r\n+                        DWDPollenflug pollenflugJSON = gson.fromJson(getContentAsString(), DWDPollenflug.class);\r\n+                        f.complete(pollenflugJSON);\r\n+                    } catch (JsonSyntaxException ex2) {\r\n+                        f.completeExceptionally(new DWDPollingException(\"Parsing of response failed\"));\r\n+                    }\r\n+                }\r\n+            }\r\n+        });\r\n+\r\n+        return f;\r\n+    }\r\n+\r\n+    public synchronized boolean registerRegionListener(DWDPollenflugRegionListener regionListener) {\r\n+        logger.debug(\"Register region listener\");\r\n+        boolean result = regionListeners.add(regionListener);\r\n+        if (result) {\r\n+            startPolling();\r\n+        }\r\n+        return result;\r\n+    }\r\n+\r\n+    public synchronized boolean unregisterRegionListener(DWDPollenflugRegionListener regionListener) {\r\n+        logger.debug(\"Unregister region listener\");\r\n+        boolean result = regionListeners.remove(regionListener);\r\n+        if (result && regionListeners.isEmpty()) {\r\n+            stopPolling();\r\n+        }\r\n+        return result;\r\n+    }\r\n+\r\n+    public synchronized void notifyOnUpdate(@Nullable DWDPollenflug newState) {\r\n+        pollenflug = newState;\r\n+        if (newState != null) {\r\n+            updateProperties(newState.getProperties());\r\n+\r\n+            newState.getChannels().forEach((channelID, value) -> {\r\n+                logger.debug(\"Updating channel {} to {}\", channelID, value);\r\n+                updateState(channelID, value);\r\n+            });\r\n+\r\n+            for (DWDPollenflugRegionListener regionListener : regionListeners) {\r\n+                regionListener.notifyOnUpdate(newState);\r\n+            }\r", "originalCommit": "555b58e9374fd7d496d8554d4d566cd680ac58c0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwNDI3Mg==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407104272", "bodyText": "Changed", "author": "DerOetzi", "createdAt": "2020-04-11T19:54:54Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5Mzk2OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5NDExMA==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407094110", "body": "rename to `getBridgeHandler` or something like that", "bodyText": "rename to getBridgeHandler or something like that", "bodyHTML": "<p dir=\"auto\">rename to <code>getBridgeHandler</code> or something like that</p>", "author": "J-N-K", "createdAt": "2020-04-11T18:15:50Z", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugRegionHandler.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugRegionConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDRegion;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugRegionHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugRegionHandler extends BaseThingHandler implements DWDPollenflugRegionListener {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugRegionHandler.class);\r\n+\r\n+    private DWDPollenflugRegionConfiguration thingConfig = new DWDPollenflugRegionConfiguration();\r\n+\r\n+    public DWDPollenflugRegionHandler(Thing thing) {\r\n+        super(thing);\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        logger.debug(\"Initializing DWD Pollenflug region handler\");\r\n+        thingConfig = getConfigAs(DWDPollenflugRegionConfiguration.class);\r\n+\r\n+        if (thingConfig.isValid()) {\r\n+            DWDPollenflugBridgeHandler handler = syncToBridge();\r\n+            if (handler == null) {\r\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Bridge handler missing\");\r\n+            } else {\r\n+                handler.registerRegionListener(this);\r\n+                updateStatus(ThingStatus.ONLINE);\r\n+            }\r\n+        } else {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\r\n+        }\r\n+    }\r\n+\r\n+    private synchronized @Nullable DWDPollenflugBridgeHandler syncToBridge() {\r", "originalCommit": "555b58e9374fd7d496d8554d4d566cd680ac58c0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwNDMwMQ==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407104301", "bodyText": "Changed", "author": "DerOetzi", "createdAt": "2020-04-11T19:55:06Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5NDExMA=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5NDI3Mw==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407094273", "body": "Not needed. A `REFRESH` command should be sent when a channel is linked.", "bodyText": "Not needed. A REFRESH command should be sent when a channel is linked.", "bodyHTML": "<p dir=\"auto\">Not needed. A <code>REFRESH</code> command should be sent when a channel is linked.</p>", "author": "J-N-K", "createdAt": "2020-04-11T18:17:39Z", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugRegionHandler.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugRegionConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDRegion;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugRegionHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugRegionHandler extends BaseThingHandler implements DWDPollenflugRegionListener {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugRegionHandler.class);\r\n+\r\n+    private DWDPollenflugRegionConfiguration thingConfig = new DWDPollenflugRegionConfiguration();\r\n+\r\n+    public DWDPollenflugRegionHandler(Thing thing) {\r\n+        super(thing);\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        logger.debug(\"Initializing DWD Pollenflug region handler\");\r\n+        thingConfig = getConfigAs(DWDPollenflugRegionConfiguration.class);\r\n+\r\n+        if (thingConfig.isValid()) {\r\n+            DWDPollenflugBridgeHandler handler = syncToBridge();\r\n+            if (handler == null) {\r\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Bridge handler missing\");\r\n+            } else {\r\n+                handler.registerRegionListener(this);\r\n+                updateStatus(ThingStatus.ONLINE);\r\n+            }\r\n+        } else {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\r\n+        }\r\n+    }\r\n+\r\n+    private synchronized @Nullable DWDPollenflugBridgeHandler syncToBridge() {\r\n+        Bridge bridge = getBridge();\r\n+        if (bridge != null) {\r\n+            ThingHandler handler = bridge.getHandler();\r\n+            if (handler instanceof DWDPollenflugBridgeHandler) {\r\n+                DWDPollenflugBridgeHandler bridgeHandler = (DWDPollenflugBridgeHandler) handler;\r\n+                return bridgeHandler;\r\n+            }\r\n+        }\r\n+\r\n+        return null;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        logger.debug(\"DWDPollenflug region handler disposes. Unregistering listener.\");\r\n+        DWDPollenflugBridgeHandler bridgeHandler = syncToBridge();\r\n+        if (bridgeHandler != null) {\r\n+            bridgeHandler.unregisterRegionListener(this);\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void handleCommand(ChannelUID channelUID, Command command) {\r\n+        if (command instanceof RefreshType) {\r\n+            refresh();\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void channelLinked(ChannelUID channelUID) {\r", "originalCommit": "555b58e9374fd7d496d8554d4d566cd680ac58c0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwNDMyMA==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407104320", "bodyText": "Removed", "author": "DerOetzi", "createdAt": "2020-04-11T19:55:17Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5NDI3Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5NTIwMw==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407095203", "body": "```suggestion\r\n        region.getChannels().forEach(this::updateState);\r\n```\r\n\r\nitem-state-changes are logged by default, so if the channel is linked, this will be already logged.", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    region.getChannels().forEach((channelID, value) -> {\n          \n          \n            \n                        logger.debug(\"Updating channel {} to {}\", channelID, value);\n          \n          \n            \n                        updateState(channelID, value);\n          \n          \n            \n                    });\n          \n          \n            \n                    region.getChannels().forEach(this::updateState);\n          \n      \n    \n    \n  \n\nitem-state-changes are logged by default, so if the channel is linked, this will be already logged.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        region<span class=\"pl-k\">.</span>getChannels()<span class=\"pl-k\">.</span>forEach((channelID, value) <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            logger<span class=\"pl-k\">.</span>debug(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Updating channel {} to {}<span class=\"pl-pds\">\"</span></span>, channelID, value);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            updateState(channelID, value);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        });</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        region<span class=\"pl-k\">.</span>getChannels()<span class=\"pl-k\">.</span>forEach(<span class=\"pl-c1\">this</span><span class=\"pl-k\">::</span>updateState);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">item-state-changes are logged by default, so if the channel is linked, this will be already logged.</p>", "author": "J-N-K", "createdAt": "2020-04-11T18:25:53Z", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugRegionHandler.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseThingHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugRegionConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDRegion;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugRegionHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugRegionHandler extends BaseThingHandler implements DWDPollenflugRegionListener {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugRegionHandler.class);\r\n+\r\n+    private DWDPollenflugRegionConfiguration thingConfig = new DWDPollenflugRegionConfiguration();\r\n+\r\n+    public DWDPollenflugRegionHandler(Thing thing) {\r\n+        super(thing);\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        logger.debug(\"Initializing DWD Pollenflug region handler\");\r\n+        thingConfig = getConfigAs(DWDPollenflugRegionConfiguration.class);\r\n+\r\n+        if (thingConfig.isValid()) {\r\n+            DWDPollenflugBridgeHandler handler = syncToBridge();\r\n+            if (handler == null) {\r\n+                updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Bridge handler missing\");\r\n+            } else {\r\n+                handler.registerRegionListener(this);\r\n+                updateStatus(ThingStatus.ONLINE);\r\n+            }\r\n+        } else {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\r\n+        }\r\n+    }\r\n+\r\n+    private synchronized @Nullable DWDPollenflugBridgeHandler syncToBridge() {\r\n+        Bridge bridge = getBridge();\r\n+        if (bridge != null) {\r\n+            ThingHandler handler = bridge.getHandler();\r\n+            if (handler instanceof DWDPollenflugBridgeHandler) {\r\n+                DWDPollenflugBridgeHandler bridgeHandler = (DWDPollenflugBridgeHandler) handler;\r\n+                return bridgeHandler;\r\n+            }\r\n+        }\r\n+\r\n+        return null;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        logger.debug(\"DWDPollenflug region handler disposes. Unregistering listener.\");\r\n+        DWDPollenflugBridgeHandler bridgeHandler = syncToBridge();\r\n+        if (bridgeHandler != null) {\r\n+            bridgeHandler.unregisterRegionListener(this);\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void handleCommand(ChannelUID channelUID, Command command) {\r\n+        if (command instanceof RefreshType) {\r\n+            refresh();\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void channelLinked(ChannelUID channelUID) {\r\n+        refresh();\r\n+    }\r\n+\r\n+    private void refresh() {\r\n+        DWDPollenflugBridgeHandler handler = syncToBridge();\r\n+        if (handler != null) {\r\n+            DWDPollenflug pollenflug = handler.getPollenflug();\r\n+            if (pollenflug != null) {\r\n+                notifyOnUpdate(pollenflug);\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void notifyOnUpdate(DWDPollenflug pollenflug) {\r\n+        DWDRegion region = pollenflug.getRegion(thingConfig.regionID);\r\n+        if (region == null) {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR, \"Region not found\");\r\n+            return;\r\n+        }\r\n+\r\n+        updateStatus(ThingStatus.ONLINE);\r\n+\r\n+        updateProperties(region.getProperties());\r\n+\r\n+        region.getChannels().forEach((channelID, value) -> {\r\n+            logger.debug(\"Updating channel {} to {}\", channelID, value);\r\n+            updateState(channelID, value);\r\n+        });\r", "originalCommit": "555b58e9374fd7d496d8554d4d566cd680ac58c0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwNDMzMg==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407104332", "bodyText": "Changed", "author": "DerOetzi", "createdAt": "2020-04-11T19:55:31Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5NTIwMw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5NTc1MQ==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407095751", "body": "```suggestion\r\n            newState.getChannels().forEach(this::updateState);\r\n```\r\n\r\nsee other comment", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        newState.getChannels().forEach((channelID, value) -> {\n          \n          \n            \n                            logger.debug(\"Updating channel {} to {}\", channelID, value);\n          \n          \n            \n                            updateState(channelID, value);\n          \n          \n            \n                        });\n          \n          \n            \n                        newState.getChannels().forEach(this::updateState);\n          \n      \n    \n    \n  \n\nsee other comment", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            newState<span class=\"pl-k\">.</span>getChannels()<span class=\"pl-k\">.</span>forEach((channelID, value) <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                logger<span class=\"pl-k\">.</span>debug(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Updating channel {} to {}<span class=\"pl-pds\">\"</span></span>, channelID, value);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">                updateState(channelID, value);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            });</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            newState<span class=\"pl-k\">.</span>getChannels()<span class=\"pl-k\">.</span>forEach(<span class=\"pl-c1\">this</span><span class=\"pl-k\">::</span>updateState);</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">see other comment</p>", "author": "J-N-K", "createdAt": "2020-04-11T18:31:23Z", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "diffHunk": "@@ -0,0 +1,222 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import static org.openhab.binding.dwdpollenflug.internal.DWDPollenflugBindingConstants.*;\r\n+\r\n+import java.net.URI;\r\n+import java.util.List;\r\n+import java.net.SocketTimeoutException;\r\n+import java.util.concurrent.CompletableFuture;\r\n+import java.util.concurrent.CopyOnWriteArrayList;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.TimeUnit;\r\n+import java.util.concurrent.TimeoutException;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.JsonSyntaxException;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.jetty.client.HttpClient;\r\n+import org.eclipse.jetty.client.HttpResponse;\r\n+import org.eclipse.jetty.client.api.Request;\r\n+import org.eclipse.jetty.client.api.Result;\r\n+import org.eclipse.jetty.client.util.BufferingResponseListener;\r\n+import org.eclipse.jetty.http.HttpMethod;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.openhab.binding.dwdpollenflug.internal.DWDPollingException;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugBridgeConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugBridgeHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugBridgeHandler extends BaseBridgeHandler {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugBridgeHandler.class);\r\n+\r\n+    private static final String DWD_URL = \"https://opendata.dwd.de/climate_environment/health/alerts/s31fg.json\";\r\n+\r\n+    private DWDPollenflugBridgeConfiguration bridgeConfig = new DWDPollenflugBridgeConfiguration();\r\n+\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    private @Nullable DWDPollenflug pollenflug;\r\n+\r\n+    private final List<DWDPollenflugRegionListener> regionListeners = new CopyOnWriteArrayList<>();\r\n+\r\n+    private final HttpClient client;\r\n+\r\n+    private final Gson gson = new Gson();\r\n+\r\n+    public DWDPollenflugBridgeHandler(Bridge bridge, HttpClient client) {\r\n+        super(bridge);\r\n+        this.client = client;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void handleCommand(ChannelUID channelUID, Command command) {\r\n+        if (command instanceof RefreshType) {\r\n+            onUpdate();\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        logger.debug(\"Initializing DWD Pollenflug bridge handler\");\r\n+        bridgeConfig = getConfigAs(DWDPollenflugBridgeConfiguration.class);\r\n+\r\n+        if (bridgeConfig.isValid()) {\r\n+            onUpdate();\r\n+        } else {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\r\n+        }\r\n+    }\r\n+\r\n+    private synchronized void onUpdate() {\r\n+        if (regionListeners.isEmpty()) {\r\n+            stopPolling();\r\n+            updateStatus(ThingStatus.ONLINE);\r\n+        } else {\r\n+            startPolling();\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        logger.debug(\"Handler disposed.\");\r\n+        stopPolling();\r\n+    }\r\n+\r\n+    public void startPolling() {\r\n+        final ScheduledFuture<?> localPollingJob = this.pollingJob;\r\n+        final DWDPollenflug localPollenflug = this.pollenflug;\r\n+        if (localPollingJob == null || localPollingJob.isCancelled()) {\r\n+            logger.debug(\"Start polling.\");\r\n+            pollingJob = scheduler.scheduleWithFixedDelay(this::poll, INITIAL_DELAY,\r\n+                    bridgeConfig.refresh * SECONDS_PER_MINUTE, TimeUnit.SECONDS);\r\n+        } else if (pollenflug != null) {\r\n+            notifyOnUpdate(localPollenflug);\r\n+        }\r\n+    }\r\n+\r\n+    public void stopPolling() {\r\n+        final ScheduledFuture<?> localPollingJob = this.pollingJob;\r\n+        if (localPollingJob != null && !localPollingJob.isCancelled()) {\r\n+            logger.debug(\"Stop polling.\");\r\n+            localPollingJob.cancel(true);\r\n+            pollingJob = null;\r\n+        }\r\n+    }\r\n+\r\n+    public void poll() {\r\n+        logger.debug(\"Polling\");\r\n+        requestRefresh().handle((pollenflug, pollException) -> {\r\n+            if (pollenflug == null) {\r\n+                if (pollException == null) {\r\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\r\n+                } else {\r\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\r\n+                            pollException.getMessage());\r\n+                }\r\n+            } else {\r\n+                updateStatus(ThingStatus.ONLINE);\r\n+                notifyOnUpdate(pollenflug);\r\n+            }\r\n+\r\n+            return null;\r\n+        });\r\n+    }\r\n+\r\n+    private CompletableFuture<@Nullable DWDPollenflug> requestRefresh() {\r\n+        CompletableFuture<@Nullable DWDPollenflug> f = new CompletableFuture<>();\r\n+        Request request = client.newRequest(URI.create(DWD_URL));\r\n+\r\n+        request.method(HttpMethod.GET).timeout(2000, TimeUnit.SECONDS).send(new BufferingResponseListener() {\r\n+            @NonNullByDefault({})\r\n+            @Override\r\n+            public void onComplete(Result result) {\r\n+                final HttpResponse response = (HttpResponse) result.getResponse();\r\n+                if (result.getFailure() != null) {\r\n+                    Throwable e = result.getFailure();\r\n+                    if (e instanceof SocketTimeoutException || e instanceof TimeoutException) {\r\n+                        f.completeExceptionally(new DWDPollingException(\"Request timeout\", e));\r\n+                    } else {\r\n+                        f.completeExceptionally(new DWDPollingException(\"Request failed\", e));\r\n+                    }\r\n+                } else if (response.getStatus() != 200) {\r\n+                    f.completeExceptionally(new DWDPollingException(getContentAsString()));\r\n+                } else {\r\n+                    try {\r\n+                        DWDPollenflug pollenflugJSON = gson.fromJson(getContentAsString(), DWDPollenflug.class);\r\n+                        f.complete(pollenflugJSON);\r\n+                    } catch (JsonSyntaxException ex2) {\r\n+                        f.completeExceptionally(new DWDPollingException(\"Parsing of response failed\"));\r\n+                    }\r\n+                }\r\n+            }\r\n+        });\r\n+\r\n+        return f;\r\n+    }\r\n+\r\n+    public synchronized boolean registerRegionListener(DWDPollenflugRegionListener regionListener) {\r\n+        logger.debug(\"Register region listener\");\r\n+        boolean result = regionListeners.add(regionListener);\r\n+        if (result) {\r\n+            startPolling();\r\n+        }\r\n+        return result;\r\n+    }\r\n+\r\n+    public synchronized boolean unregisterRegionListener(DWDPollenflugRegionListener regionListener) {\r\n+        logger.debug(\"Unregister region listener\");\r\n+        boolean result = regionListeners.remove(regionListener);\r\n+        if (result && regionListeners.isEmpty()) {\r\n+            stopPolling();\r\n+        }\r\n+        return result;\r\n+    }\r\n+\r\n+    public synchronized void notifyOnUpdate(@Nullable DWDPollenflug newState) {\r\n+        pollenflug = newState;\r\n+        if (newState != null) {\r\n+            updateProperties(newState.getProperties());\r\n+\r\n+            newState.getChannels().forEach((channelID, value) -> {\r\n+                logger.debug(\"Updating channel {} to {}\", channelID, value);\r\n+                updateState(channelID, value);\r\n+            });\r", "originalCommit": "555b58e9374fd7d496d8554d4d566cd680ac58c0", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEwNDM1OQ==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407104359", "bodyText": "Changed", "author": "DerOetzi", "createdAt": "2020-04-11T19:55:45Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzA5NTc1MQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE3MTI0NQ==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407171245", "body": "```suggestion\r\n * @author Johannes Ott - Initial contribution\r\n\r\n```\r\n\r\nalso in other files", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * @author Johannes DerOetzi Ott - Initial contribution\n          \n          \n            \n             * @author Johannes Ott - Initial contribution\n          \n          \n            \n            \n          \n      \n    \n    \n  \n\nalso in other files", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"> <span class=\"pl-k\">*</span> <span class=\"pl-k\">@author</span> <span class=\"pl-smi\">Johannes</span> <span class=\"pl-smi x x-first\">DerOetzi</span><span class=\"x x-last\"> </span><span class=\"pl-smi\">Ott</span> <span class=\"pl-k\">-</span> <span class=\"pl-smi\">Initial</span> contribution</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"> <span class=\"pl-k\">*</span> <span class=\"pl-k\">@author</span> <span class=\"pl-smi\">Johannes</span> <span class=\"pl-smi\">Ott</span> <span class=\"pl-k\">-</span> <span class=\"pl-smi\">Initial</span> contribution</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">also in other files</p>", "author": "J-N-K", "createdAt": "2020-04-12T09:22:26Z", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/DWDPollenflugBindingConstants.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.smarthome.core.thing.ThingTypeUID;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugBindingConstants} class defines common constants, which are\r\n+ * used across the whole binding.\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r", "originalCommit": "a5abab305d449e1fb8225a6f74138cc95dfd4fbb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE3NTQ4Ng==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407175486", "bodyText": "Changed in all files", "author": "DerOetzi", "createdAt": "2020-04-12T10:00:25Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE3MTI0NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE3MjA2Nw==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407172067", "body": "```suggestion\r\n    public void registerRegionListener(DWDPollenflugRegionListener regionListener) {\r\n        if (!regionListeners.add(regionListener)) {\r\n            logger.warn(\"Tried to add listener {} but it was already present. This is probably an error.\", regionListener);\r\n        }\r\n    }\r\n```\r\n\r\nYou don't use the return value in the hting handler, so method can be changed to void", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public synchronized boolean registerRegionListener(DWDPollenflugRegionListener regionListener) {\n          \n          \n            \n                    logger.debug(\"Register region listener\");\n          \n          \n            \n                    boolean result = regionListeners.add(regionListener);\n          \n          \n            \n                    if (result) {\n          \n          \n            \n                        startPolling();\n          \n          \n            \n                    }\n          \n          \n            \n                    return result;\n          \n          \n            \n                }\n          \n          \n            \n                public void registerRegionListener(DWDPollenflugRegionListener regionListener) {\n          \n          \n            \n                    if (!regionListeners.add(regionListener)) {\n          \n          \n            \n                        logger.warn(\"Tried to add listener {} but it was already present. This is probably an error.\", regionListener);\n          \n          \n            \n                    }\n          \n          \n            \n                }\n          \n      \n    \n    \n  \n\nYou don't use the return value in the hting handler, so method can be changed to void", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"186\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">synchronized</span> <span class=\"pl-k\">boolean</span> registerRegionListener(<span class=\"pl-smi\">DWDPollenflugRegionListener</span> regionListener) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"187\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        logger<span class=\"pl-k\">.</span>debug(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Register region listener<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"188\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">boolean</span> result <span class=\"pl-k\">=</span> regionListeners<span class=\"pl-k\">.</span>add(regionListener);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"189\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">if</span> (result) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"190\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            startPolling();</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"191\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"192\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">return</span> result;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"193\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"186\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> registerRegionListener(<span class=\"pl-smi\">DWDPollenflugRegionListener</span> regionListener) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"187\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">if</span> (<span class=\"pl-k\">!</span>regionListeners<span class=\"pl-k\">.</span>add(regionListener)) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"188\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            logger<span class=\"pl-k\">.</span>warn(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Tried to add listener {} but it was already present. This is probably an error.<span class=\"pl-pds\">\"</span></span>, regionListener);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"189\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"190\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    }</td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">You don't use the return value in the hting handler, so method can be changed to void</p>", "author": "J-N-K", "createdAt": "2020-04-12T09:30:02Z", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import java.net.URI;\r\n+import java.util.Set;\r\n+import java.net.SocketTimeoutException;\r\n+import java.util.concurrent.CompletableFuture;\r\n+import java.util.concurrent.ConcurrentHashMap;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.TimeUnit;\r\n+import java.util.concurrent.TimeoutException;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.JsonSyntaxException;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.jetty.client.HttpClient;\r\n+import org.eclipse.jetty.client.HttpResponse;\r\n+import org.eclipse.jetty.client.api.Request;\r\n+import org.eclipse.jetty.client.api.Result;\r\n+import org.eclipse.jetty.client.util.BufferingResponseListener;\r\n+import org.eclipse.jetty.http.HttpMethod;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.openhab.binding.dwdpollenflug.internal.DWDPollingException;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugBridgeConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugBridgeHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugBridgeHandler extends BaseBridgeHandler {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugBridgeHandler.class);\r\n+\r\n+    private static final String DWD_URL = \"https://opendata.dwd.de/climate_environment/health/alerts/s31fg.json\";\r\n+\r\n+    private DWDPollenflugBridgeConfiguration bridgeConfig = new DWDPollenflugBridgeConfiguration();\r\n+\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    private @Nullable DWDPollenflug pollenflug;\r\n+\r\n+    private final Set<DWDPollenflugRegionListener> regionListeners = ConcurrentHashMap.newKeySet();\r\n+\r\n+    private final HttpClient client;\r\n+\r\n+    private final Gson gson = new Gson();\r\n+\r\n+    public DWDPollenflugBridgeHandler(Bridge bridge, HttpClient client) {\r\n+        super(bridge);\r\n+        this.client = client;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void handleCommand(ChannelUID channelUID, Command command) {\r\n+        if (command instanceof RefreshType) {\r\n+            poll();\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        logger.debug(\"Initializing DWD Pollenflug bridge handler\");\r\n+        bridgeConfig = getConfigAs(DWDPollenflugBridgeConfiguration.class);\r\n+\r\n+        if (bridgeConfig.isValid()) {\r\n+            startPolling();\r\n+            updateStatus(ThingStatus.ONLINE);\r\n+        } else {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        logger.debug(\"Handler disposed.\");\r\n+        stopPolling();\r\n+    }\r\n+\r\n+    private void startPolling() {\r\n+        final ScheduledFuture<?> localPollingJob = this.pollingJob;\r\n+        final DWDPollenflug localPollenflug = this.pollenflug;\r\n+        if (localPollingJob == null || localPollingJob.isCancelled()) {\r\n+            logger.debug(\"Start polling.\");\r\n+            pollingJob = scheduler.scheduleWithFixedDelay(this::poll, 0, bridgeConfig.refresh, TimeUnit.MINUTES);\r\n+        } else if (pollenflug != null) {\r\n+            notifyOnUpdate(localPollenflug);\r\n+        }\r\n+    }\r\n+\r\n+    private void stopPolling() {\r\n+        final ScheduledFuture<?> localPollingJob = this.pollingJob;\r\n+        if (localPollingJob != null && !localPollingJob.isCancelled()) {\r\n+            logger.debug(\"Stop polling.\");\r\n+            localPollingJob.cancel(true);\r\n+            pollingJob = null;\r\n+        }\r\n+    }\r\n+\r\n+    private void poll() {\r\n+        logger.debug(\"Polling\");\r\n+        requestRefresh().handle((pollenflug, pollException) -> {\r\n+            if (pollenflug == null) {\r\n+                if (pollException == null) {\r\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\r\n+                } else {\r\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\r\n+                            pollException.getMessage());\r\n+                }\r\n+            } else {\r\n+                updateStatus(ThingStatus.ONLINE);\r\n+                notifyOnUpdate(pollenflug);\r\n+            }\r\n+\r\n+            return null;\r\n+        });\r\n+    }\r\n+\r\n+    private CompletableFuture<@Nullable DWDPollenflug> requestRefresh() {\r\n+        CompletableFuture<@Nullable DWDPollenflug> f = new CompletableFuture<>();\r\n+        Request request = client.newRequest(URI.create(DWD_URL));\r\n+\r\n+        request.method(HttpMethod.GET).timeout(2000, TimeUnit.SECONDS).send(new BufferingResponseListener() {\r\n+            @NonNullByDefault({})\r\n+            @Override\r\n+            public void onComplete(Result result) {\r\n+                final HttpResponse response = (HttpResponse) result.getResponse();\r\n+                if (result.getFailure() != null) {\r\n+                    Throwable e = result.getFailure();\r\n+                    if (e instanceof SocketTimeoutException || e instanceof TimeoutException) {\r\n+                        f.completeExceptionally(new DWDPollingException(\"Request timeout\", e));\r\n+                    } else {\r\n+                        f.completeExceptionally(new DWDPollingException(\"Request failed\", e));\r\n+                    }\r\n+                } else if (response.getStatus() != 200) {\r\n+                    f.completeExceptionally(new DWDPollingException(getContentAsString()));\r\n+                } else {\r\n+                    try {\r\n+                        DWDPollenflug pollenflugJSON = gson.fromJson(getContentAsString(), DWDPollenflug.class);\r\n+                        f.complete(pollenflugJSON);\r\n+                    } catch (JsonSyntaxException ex2) {\r\n+                        f.completeExceptionally(new DWDPollingException(\"Parsing of response failed\"));\r\n+                    }\r\n+                }\r\n+            }\r\n+        });\r\n+\r\n+        return f;\r\n+    }\r\n+\r\n+    public synchronized boolean registerRegionListener(DWDPollenflugRegionListener regionListener) {\r\n+        logger.debug(\"Register region listener\");\r\n+        boolean result = regionListeners.add(regionListener);\r\n+        if (result) {\r\n+            startPolling();\r\n+        }\r\n+        return result;\r\n+    }\r", "originalCommit": "a5abab305d449e1fb8225a6f74138cc95dfd4fbb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE3NTU0MA==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407175540", "bodyText": "Integrated warnings", "author": "DerOetzi", "createdAt": "2020-04-12T10:00:58Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE3MjA2Nw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE3MjI4Mg==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407172282", "body": "```suggestion\r\n    public void unregisterRegionListener(DWDPollenflugRegionListener regionListener) {\r\n        if (!regionListeners.remove(regionListener)) {\r\n            logger.warn(\"Tried to add listener {} but it was not registered. This is probably an error.\", regionListener);\r\n        }\r\n    }\r\n\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public synchronized boolean unregisterRegionListener(DWDPollenflugRegionListener regionListener) {\n          \n          \n            \n                    logger.debug(\"Unregister region listener\");\n          \n          \n            \n                    boolean result = regionListeners.remove(regionListener);\n          \n          \n            \n                    return result;\n          \n          \n            \n                }\n          \n          \n            \n                public void unregisterRegionListener(DWDPollenflugRegionListener regionListener) {\n          \n          \n            \n                    if (!regionListeners.remove(regionListener)) {\n          \n          \n            \n                        logger.warn(\"Tried to add listener {} but it was not registered. This is probably an error.\", regionListener);\n          \n          \n            \n                    }\n          \n          \n            \n                }", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"197\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">synchronized</span> <span class=\"pl-k\">boolean</span> unregisterRegionListener(<span class=\"pl-smi\">DWDPollenflugRegionListener</span> regionListener) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"198\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        logger<span class=\"pl-k\">.</span>debug(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Unregister region listener<span class=\"pl-pds\">\"</span></span>);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"199\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">boolean</span> result <span class=\"pl-k\">=</span> regionListeners<span class=\"pl-k\">.</span>remove(regionListener);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"200\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">return</span> result;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"201\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"197\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> unregisterRegionListener(<span class=\"pl-smi\">DWDPollenflugRegionListener</span> regionListener) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"198\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">if</span> (<span class=\"pl-k\">!</span>regionListeners<span class=\"pl-k\">.</span>remove(regionListener)) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"199\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            logger<span class=\"pl-k\">.</span>warn(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>Tried to add listener {} but it was not registered. This is probably an error.<span class=\"pl-pds\">\"</span></span>, regionListener);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"200\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"201\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"202\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "J-N-K", "createdAt": "2020-04-12T09:32:14Z", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import java.net.URI;\r\n+import java.util.Set;\r\n+import java.net.SocketTimeoutException;\r\n+import java.util.concurrent.CompletableFuture;\r\n+import java.util.concurrent.ConcurrentHashMap;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.TimeUnit;\r\n+import java.util.concurrent.TimeoutException;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.JsonSyntaxException;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.jetty.client.HttpClient;\r\n+import org.eclipse.jetty.client.HttpResponse;\r\n+import org.eclipse.jetty.client.api.Request;\r\n+import org.eclipse.jetty.client.api.Result;\r\n+import org.eclipse.jetty.client.util.BufferingResponseListener;\r\n+import org.eclipse.jetty.http.HttpMethod;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.openhab.binding.dwdpollenflug.internal.DWDPollingException;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugBridgeConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugBridgeHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugBridgeHandler extends BaseBridgeHandler {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugBridgeHandler.class);\r\n+\r\n+    private static final String DWD_URL = \"https://opendata.dwd.de/climate_environment/health/alerts/s31fg.json\";\r\n+\r\n+    private DWDPollenflugBridgeConfiguration bridgeConfig = new DWDPollenflugBridgeConfiguration();\r\n+\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    private @Nullable DWDPollenflug pollenflug;\r\n+\r\n+    private final Set<DWDPollenflugRegionListener> regionListeners = ConcurrentHashMap.newKeySet();\r\n+\r\n+    private final HttpClient client;\r\n+\r\n+    private final Gson gson = new Gson();\r\n+\r\n+    public DWDPollenflugBridgeHandler(Bridge bridge, HttpClient client) {\r\n+        super(bridge);\r\n+        this.client = client;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void handleCommand(ChannelUID channelUID, Command command) {\r\n+        if (command instanceof RefreshType) {\r\n+            poll();\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        logger.debug(\"Initializing DWD Pollenflug bridge handler\");\r\n+        bridgeConfig = getConfigAs(DWDPollenflugBridgeConfiguration.class);\r\n+\r\n+        if (bridgeConfig.isValid()) {\r\n+            startPolling();\r\n+            updateStatus(ThingStatus.ONLINE);\r\n+        } else {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        logger.debug(\"Handler disposed.\");\r\n+        stopPolling();\r\n+    }\r\n+\r\n+    private void startPolling() {\r\n+        final ScheduledFuture<?> localPollingJob = this.pollingJob;\r\n+        final DWDPollenflug localPollenflug = this.pollenflug;\r\n+        if (localPollingJob == null || localPollingJob.isCancelled()) {\r\n+            logger.debug(\"Start polling.\");\r\n+            pollingJob = scheduler.scheduleWithFixedDelay(this::poll, 0, bridgeConfig.refresh, TimeUnit.MINUTES);\r\n+        } else if (pollenflug != null) {\r\n+            notifyOnUpdate(localPollenflug);\r\n+        }\r\n+    }\r\n+\r\n+    private void stopPolling() {\r\n+        final ScheduledFuture<?> localPollingJob = this.pollingJob;\r\n+        if (localPollingJob != null && !localPollingJob.isCancelled()) {\r\n+            logger.debug(\"Stop polling.\");\r\n+            localPollingJob.cancel(true);\r\n+            pollingJob = null;\r\n+        }\r\n+    }\r\n+\r\n+    private void poll() {\r\n+        logger.debug(\"Polling\");\r\n+        requestRefresh().handle((pollenflug, pollException) -> {\r\n+            if (pollenflug == null) {\r\n+                if (pollException == null) {\r\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\r\n+                } else {\r\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\r\n+                            pollException.getMessage());\r\n+                }\r\n+            } else {\r\n+                updateStatus(ThingStatus.ONLINE);\r\n+                notifyOnUpdate(pollenflug);\r\n+            }\r\n+\r\n+            return null;\r\n+        });\r\n+    }\r\n+\r\n+    private CompletableFuture<@Nullable DWDPollenflug> requestRefresh() {\r\n+        CompletableFuture<@Nullable DWDPollenflug> f = new CompletableFuture<>();\r\n+        Request request = client.newRequest(URI.create(DWD_URL));\r\n+\r\n+        request.method(HttpMethod.GET).timeout(2000, TimeUnit.SECONDS).send(new BufferingResponseListener() {\r\n+            @NonNullByDefault({})\r\n+            @Override\r\n+            public void onComplete(Result result) {\r\n+                final HttpResponse response = (HttpResponse) result.getResponse();\r\n+                if (result.getFailure() != null) {\r\n+                    Throwable e = result.getFailure();\r\n+                    if (e instanceof SocketTimeoutException || e instanceof TimeoutException) {\r\n+                        f.completeExceptionally(new DWDPollingException(\"Request timeout\", e));\r\n+                    } else {\r\n+                        f.completeExceptionally(new DWDPollingException(\"Request failed\", e));\r\n+                    }\r\n+                } else if (response.getStatus() != 200) {\r\n+                    f.completeExceptionally(new DWDPollingException(getContentAsString()));\r\n+                } else {\r\n+                    try {\r\n+                        DWDPollenflug pollenflugJSON = gson.fromJson(getContentAsString(), DWDPollenflug.class);\r\n+                        f.complete(pollenflugJSON);\r\n+                    } catch (JsonSyntaxException ex2) {\r\n+                        f.completeExceptionally(new DWDPollingException(\"Parsing of response failed\"));\r\n+                    }\r\n+                }\r\n+            }\r\n+        });\r\n+\r\n+        return f;\r\n+    }\r\n+\r\n+    public synchronized boolean registerRegionListener(DWDPollenflugRegionListener regionListener) {\r\n+        logger.debug(\"Register region listener\");\r\n+        boolean result = regionListeners.add(regionListener);\r\n+        if (result) {\r\n+            startPolling();\r\n+        }\r\n+        return result;\r\n+    }\r\n+\r\n+    public synchronized boolean unregisterRegionListener(DWDPollenflugRegionListener regionListener) {\r\n+        logger.debug(\"Unregister region listener\");\r\n+        boolean result = regionListeners.remove(regionListener);\r\n+        return result;\r\n+    }\r", "originalCommit": "a5abab305d449e1fb8225a6f74138cc95dfd4fbb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE3NTU1MA==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407175550", "bodyText": "Integrated warnings", "author": "DerOetzi", "createdAt": "2020-04-12T10:01:03Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE3MjI4Mg=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE3MjM3NQ==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407172375", "body": "remove synchronized, this is not needed anymore", "bodyText": "remove synchronized, this is not needed anymore", "bodyHTML": "<p dir=\"auto\">remove synchronized, this is not needed anymore</p>", "author": "J-N-K", "createdAt": "2020-04-12T09:33:03Z", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "diffHunk": "@@ -0,0 +1,201 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import java.net.URI;\r\n+import java.util.Set;\r\n+import java.net.SocketTimeoutException;\r\n+import java.util.concurrent.CompletableFuture;\r\n+import java.util.concurrent.ConcurrentHashMap;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.TimeUnit;\r\n+import java.util.concurrent.TimeoutException;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.JsonSyntaxException;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.jetty.client.HttpClient;\r\n+import org.eclipse.jetty.client.HttpResponse;\r\n+import org.eclipse.jetty.client.api.Request;\r\n+import org.eclipse.jetty.client.api.Result;\r\n+import org.eclipse.jetty.client.util.BufferingResponseListener;\r\n+import org.eclipse.jetty.http.HttpMethod;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.openhab.binding.dwdpollenflug.internal.DWDPollingException;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugBridgeConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugBridgeHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes DerOetzi Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugBridgeHandler extends BaseBridgeHandler {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugBridgeHandler.class);\r\n+\r\n+    private static final String DWD_URL = \"https://opendata.dwd.de/climate_environment/health/alerts/s31fg.json\";\r\n+\r\n+    private DWDPollenflugBridgeConfiguration bridgeConfig = new DWDPollenflugBridgeConfiguration();\r\n+\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    private @Nullable DWDPollenflug pollenflug;\r\n+\r\n+    private final Set<DWDPollenflugRegionListener> regionListeners = ConcurrentHashMap.newKeySet();\r\n+\r\n+    private final HttpClient client;\r\n+\r\n+    private final Gson gson = new Gson();\r\n+\r\n+    public DWDPollenflugBridgeHandler(Bridge bridge, HttpClient client) {\r\n+        super(bridge);\r\n+        this.client = client;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void handleCommand(ChannelUID channelUID, Command command) {\r\n+        if (command instanceof RefreshType) {\r\n+            poll();\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        logger.debug(\"Initializing DWD Pollenflug bridge handler\");\r\n+        bridgeConfig = getConfigAs(DWDPollenflugBridgeConfiguration.class);\r\n+\r\n+        if (bridgeConfig.isValid()) {\r\n+            startPolling();\r\n+            updateStatus(ThingStatus.ONLINE);\r\n+        } else {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR);\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        logger.debug(\"Handler disposed.\");\r\n+        stopPolling();\r\n+    }\r\n+\r\n+    private void startPolling() {\r\n+        final ScheduledFuture<?> localPollingJob = this.pollingJob;\r\n+        final DWDPollenflug localPollenflug = this.pollenflug;\r\n+        if (localPollingJob == null || localPollingJob.isCancelled()) {\r\n+            logger.debug(\"Start polling.\");\r\n+            pollingJob = scheduler.scheduleWithFixedDelay(this::poll, 0, bridgeConfig.refresh, TimeUnit.MINUTES);\r\n+        } else if (pollenflug != null) {\r\n+            notifyOnUpdate(localPollenflug);\r\n+        }\r\n+    }\r\n+\r\n+    private void stopPolling() {\r\n+        final ScheduledFuture<?> localPollingJob = this.pollingJob;\r\n+        if (localPollingJob != null && !localPollingJob.isCancelled()) {\r\n+            logger.debug(\"Stop polling.\");\r\n+            localPollingJob.cancel(true);\r\n+            pollingJob = null;\r\n+        }\r\n+    }\r\n+\r\n+    private void poll() {\r\n+        logger.debug(\"Polling\");\r\n+        requestRefresh().handle((pollenflug, pollException) -> {\r\n+            if (pollenflug == null) {\r\n+                if (pollException == null) {\r\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\r\n+                } else {\r\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\r\n+                            pollException.getMessage());\r\n+                }\r\n+            } else {\r\n+                updateStatus(ThingStatus.ONLINE);\r\n+                notifyOnUpdate(pollenflug);\r\n+            }\r\n+\r\n+            return null;\r\n+        });\r\n+    }\r\n+\r\n+    private CompletableFuture<@Nullable DWDPollenflug> requestRefresh() {\r\n+        CompletableFuture<@Nullable DWDPollenflug> f = new CompletableFuture<>();\r\n+        Request request = client.newRequest(URI.create(DWD_URL));\r\n+\r\n+        request.method(HttpMethod.GET).timeout(2000, TimeUnit.SECONDS).send(new BufferingResponseListener() {\r\n+            @NonNullByDefault({})\r\n+            @Override\r\n+            public void onComplete(Result result) {\r\n+                final HttpResponse response = (HttpResponse) result.getResponse();\r\n+                if (result.getFailure() != null) {\r\n+                    Throwable e = result.getFailure();\r\n+                    if (e instanceof SocketTimeoutException || e instanceof TimeoutException) {\r\n+                        f.completeExceptionally(new DWDPollingException(\"Request timeout\", e));\r\n+                    } else {\r\n+                        f.completeExceptionally(new DWDPollingException(\"Request failed\", e));\r\n+                    }\r\n+                } else if (response.getStatus() != 200) {\r\n+                    f.completeExceptionally(new DWDPollingException(getContentAsString()));\r\n+                } else {\r\n+                    try {\r\n+                        DWDPollenflug pollenflugJSON = gson.fromJson(getContentAsString(), DWDPollenflug.class);\r\n+                        f.complete(pollenflugJSON);\r\n+                    } catch (JsonSyntaxException ex2) {\r\n+                        f.completeExceptionally(new DWDPollingException(\"Parsing of response failed\"));\r\n+                    }\r\n+                }\r\n+            }\r\n+        });\r\n+\r\n+        return f;\r\n+    }\r\n+\r\n+    public synchronized boolean registerRegionListener(DWDPollenflugRegionListener regionListener) {\r\n+        logger.debug(\"Register region listener\");\r\n+        boolean result = regionListeners.add(regionListener);\r\n+        if (result) {\r\n+            startPolling();\r\n+        }\r\n+        return result;\r\n+    }\r\n+\r\n+    public synchronized boolean unregisterRegionListener(DWDPollenflugRegionListener regionListener) {\r\n+        logger.debug(\"Unregister region listener\");\r\n+        boolean result = regionListeners.remove(regionListener);\r\n+        return result;\r\n+    }\r\n+\r\n+    public synchronized void notifyOnUpdate(@Nullable DWDPollenflug newState) {\r", "originalCommit": "a5abab305d449e1fb8225a6f74138cc95dfd4fbb", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE3NTU3NA==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407175574", "bodyText": "Removed", "author": "DerOetzi", "createdAt": "2020-04-12T10:01:13Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE3MjM3NQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE4MDAxNw==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407180017", "body": "no need to start polling, you already did that in `initialize()`, better only notify the recently added handler of the existing `pollenflug` (if non-null).", "bodyText": "no need to start polling, you already did that in initialize(), better only notify the recently added handler of the existing pollenflug (if non-null).", "bodyHTML": "<p dir=\"auto\">no need to start polling, you already did that in <code>initialize()</code>, better only notify the recently added handler of the existing <code>pollenflug</code> (if non-null).</p>", "author": "J-N-K", "createdAt": "2020-04-12T10:43:35Z", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "diffHunk": "@@ -0,0 +1,213 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import java.net.URI;\r\n+import java.util.Set;\r\n+import java.net.SocketTimeoutException;\r\n+import java.util.concurrent.CompletableFuture;\r\n+import java.util.concurrent.ConcurrentHashMap;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.TimeUnit;\r\n+import java.util.concurrent.TimeoutException;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.JsonSyntaxException;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.jetty.client.HttpClient;\r\n+import org.eclipse.jetty.client.HttpResponse;\r\n+import org.eclipse.jetty.client.api.Request;\r\n+import org.eclipse.jetty.client.api.Result;\r\n+import org.eclipse.jetty.client.util.BufferingResponseListener;\r\n+import org.eclipse.jetty.http.HttpMethod;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.openhab.binding.dwdpollenflug.internal.DWDPollingException;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugBridgeConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugBridgeHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugBridgeHandler extends BaseBridgeHandler {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugBridgeHandler.class);\r\n+\r\n+    private static final String DWD_URL = \"https://opendata.dwd.de/climate_environment/health/alerts/s31fg.json\";\r\n+\r\n+    private DWDPollenflugBridgeConfiguration bridgeConfig = new DWDPollenflugBridgeConfiguration();\r\n+\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    private @Nullable DWDPollenflug pollenflug;\r\n+\r\n+    private final Set<DWDPollenflugRegionHandler> regionListeners = ConcurrentHashMap.newKeySet();\r\n+\r\n+    private final HttpClient client;\r\n+\r\n+    private final Gson gson = new Gson();\r\n+\r\n+    public DWDPollenflugBridgeHandler(Bridge bridge, HttpClient client) {\r\n+        super(bridge);\r\n+        this.client = client;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void handleCommand(ChannelUID channelUID, Command command) {\r\n+        if (command instanceof RefreshType) {\r\n+            startPolling();\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        logger.debug(\"Initializing DWD Pollenflug bridge handler\");\r\n+        bridgeConfig = getConfigAs(DWDPollenflugBridgeConfiguration.class);\r\n+\r\n+        if (bridgeConfig.isValid()) {\r\n+            startPolling();\r\n+            updateStatus(ThingStatus.ONLINE);\r\n+        } else {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\r\n+                    \"Refresh interval has to be at least 15 minutes.\");\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        logger.debug(\"Handler disposed.\");\r\n+        stopPolling();\r\n+    }\r\n+\r\n+    private void startPolling() {\r\n+        final ScheduledFuture<?> localPollingJob = this.pollingJob;\r\n+        final DWDPollenflug localPollenflug = this.pollenflug;\r\n+        if (localPollingJob == null || localPollingJob.isCancelled()) {\r\n+            logger.debug(\"Start polling.\");\r\n+            pollingJob = scheduler.scheduleWithFixedDelay(this::poll, 0, bridgeConfig.refresh, TimeUnit.MINUTES);\r\n+        } else if (pollenflug != null) {\r\n+            notifyOnUpdate(localPollenflug);\r\n+        }\r\n+    }\r\n+\r\n+    private void stopPolling() {\r\n+        final ScheduledFuture<?> localPollingJob = this.pollingJob;\r\n+        if (localPollingJob != null && !localPollingJob.isCancelled()) {\r\n+            logger.debug(\"Stop polling.\");\r\n+            localPollingJob.cancel(true);\r\n+            pollingJob = null;\r\n+        }\r\n+    }\r\n+\r\n+    private void poll() {\r\n+        logger.debug(\"Polling\");\r\n+        requestRefresh().handle((pollenflug, pollException) -> {\r\n+            if (pollenflug == null) {\r\n+                if (pollException == null) {\r\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\r\n+                } else {\r\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\r\n+                            pollException.getMessage());\r\n+                }\r\n+            } else {\r\n+                updateStatus(ThingStatus.ONLINE);\r\n+                notifyOnUpdate(pollenflug);\r\n+            }\r\n+\r\n+            return null;\r\n+        });\r\n+    }\r\n+\r\n+    private CompletableFuture<@Nullable DWDPollenflug> requestRefresh() {\r\n+        CompletableFuture<@Nullable DWDPollenflug> f = new CompletableFuture<>();\r\n+        Request request = client.newRequest(URI.create(DWD_URL));\r\n+\r\n+        request.method(HttpMethod.GET).timeout(2000, TimeUnit.SECONDS).send(new BufferingResponseListener() {\r\n+            @NonNullByDefault({})\r\n+            @Override\r\n+            public void onComplete(Result result) {\r\n+                final HttpResponse response = (HttpResponse) result.getResponse();\r\n+                if (result.getFailure() != null) {\r\n+                    Throwable e = result.getFailure();\r\n+                    if (e instanceof SocketTimeoutException || e instanceof TimeoutException) {\r\n+                        f.completeExceptionally(new DWDPollingException(\"Request timeout\", e));\r\n+                    } else {\r\n+                        f.completeExceptionally(new DWDPollingException(\"Request failed\", e));\r\n+                    }\r\n+                } else if (response.getStatus() != 200) {\r\n+                    f.completeExceptionally(new DWDPollingException(getContentAsString()));\r\n+                } else {\r\n+                    try {\r\n+                        DWDPollenflug pollenflugJSON = gson.fromJson(getContentAsString(), DWDPollenflug.class);\r\n+                        f.complete(pollenflugJSON);\r\n+                    } catch (JsonSyntaxException ex2) {\r\n+                        f.completeExceptionally(new DWDPollingException(\"Parsing of response failed\"));\r\n+                    }\r\n+                }\r\n+            }\r\n+        });\r\n+\r\n+        return f;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void childHandlerInitialized(ThingHandler childHandler, Thing childThing) {\r\n+        if (childHandler instanceof DWDPollenflugRegionHandler) {\r\n+            logger.debug(\"Register region listener.\");\r\n+            if (regionListeners.add((DWDPollenflugRegionHandler) childHandler)) {\r\n+                startPolling();\r", "originalCommit": "68a53317d1681096640a47b9677e13cd3f1a34a6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIwNTYzOQ==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407205639", "bodyText": "changed", "author": "DerOetzi", "createdAt": "2020-04-12T14:25:41Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE4MDAxNw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE4MDg1Mw==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407180853", "body": "I think you should move this part down to `childHandlerInitialized`. And then notify only the recently added child handler and not all child handlers.", "bodyText": "I think you should move this part down to childHandlerInitialized. And then notify only the recently added child handler and not all child handlers.", "bodyHTML": "<p dir=\"auto\">I think you should move this part down to <code>childHandlerInitialized</code>. And then notify only the recently added child handler and not all child handlers.</p>", "author": "J-N-K", "createdAt": "2020-04-12T10:51:29Z", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "diffHunk": "@@ -0,0 +1,213 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import java.net.URI;\r\n+import java.util.Set;\r\n+import java.net.SocketTimeoutException;\r\n+import java.util.concurrent.CompletableFuture;\r\n+import java.util.concurrent.ConcurrentHashMap;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.TimeUnit;\r\n+import java.util.concurrent.TimeoutException;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.JsonSyntaxException;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.jetty.client.HttpClient;\r\n+import org.eclipse.jetty.client.HttpResponse;\r\n+import org.eclipse.jetty.client.api.Request;\r\n+import org.eclipse.jetty.client.api.Result;\r\n+import org.eclipse.jetty.client.util.BufferingResponseListener;\r\n+import org.eclipse.jetty.http.HttpMethod;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.openhab.binding.dwdpollenflug.internal.DWDPollingException;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugBridgeConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugBridgeHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugBridgeHandler extends BaseBridgeHandler {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugBridgeHandler.class);\r\n+\r\n+    private static final String DWD_URL = \"https://opendata.dwd.de/climate_environment/health/alerts/s31fg.json\";\r\n+\r\n+    private DWDPollenflugBridgeConfiguration bridgeConfig = new DWDPollenflugBridgeConfiguration();\r\n+\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    private @Nullable DWDPollenflug pollenflug;\r\n+\r\n+    private final Set<DWDPollenflugRegionHandler> regionListeners = ConcurrentHashMap.newKeySet();\r\n+\r\n+    private final HttpClient client;\r\n+\r\n+    private final Gson gson = new Gson();\r\n+\r\n+    public DWDPollenflugBridgeHandler(Bridge bridge, HttpClient client) {\r\n+        super(bridge);\r\n+        this.client = client;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void handleCommand(ChannelUID channelUID, Command command) {\r\n+        if (command instanceof RefreshType) {\r\n+            startPolling();\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        logger.debug(\"Initializing DWD Pollenflug bridge handler\");\r\n+        bridgeConfig = getConfigAs(DWDPollenflugBridgeConfiguration.class);\r\n+\r\n+        if (bridgeConfig.isValid()) {\r\n+            startPolling();\r\n+            updateStatus(ThingStatus.ONLINE);\r\n+        } else {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\r\n+                    \"Refresh interval has to be at least 15 minutes.\");\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        logger.debug(\"Handler disposed.\");\r\n+        stopPolling();\r\n+    }\r\n+\r\n+    private void startPolling() {\r\n+        final ScheduledFuture<?> localPollingJob = this.pollingJob;\r\n+        final DWDPollenflug localPollenflug = this.pollenflug;\r\n+        if (localPollingJob == null || localPollingJob.isCancelled()) {\r\n+            logger.debug(\"Start polling.\");\r\n+            pollingJob = scheduler.scheduleWithFixedDelay(this::poll, 0, bridgeConfig.refresh, TimeUnit.MINUTES);\r\n+        } else if (pollenflug != null) {\r", "originalCommit": "68a53317d1681096640a47b9677e13cd3f1a34a6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIwNTY2Nw==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407205667", "bodyText": "Moved", "author": "DerOetzi", "createdAt": "2020-04-12T14:25:53Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE4MDg1Mw=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE4MTI3OQ==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407181279", "body": "```suggestion\r\n    public void notifyOnUpdate(@Nullable DWDPollenflug pollenflug) {\r\n        if (pollenflug != null) {\r\n            this.pollenflug = pollenflug;\r\n            updateProperties(newState.getProperties());\r\n            regionListeners.forEach(listener -> listener.notifyOnUpdate(pollenflug));\r\n            pollenflug.getChannelsStateMap().forEach(this::updateState);\r\n        }\r\n    }\r\n\r\n```\r\n\r\na `State` is something different in openHAB, this may result in confusion.", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void notifyOnUpdate(@Nullable DWDPollenflug newState) {\n          \n          \n            \n                    if (newState != null) {\n          \n          \n            \n                        pollenflug = newState;\n          \n          \n            \n                        updateProperties(newState.getProperties());\n          \n          \n            \n                        regionListeners.forEach(listener -> listener.notifyOnUpdate(newState));\n          \n          \n            \n                        newState.getChannelsStateMap().forEach(this::updateState);\n          \n          \n            \n                    }\n          \n          \n            \n                }\n          \n          \n            \n                public void notifyOnUpdate(@Nullable DWDPollenflug pollenflug) {\n          \n          \n            \n                    if (pollenflug != null) {\n          \n          \n            \n                        this.pollenflug = pollenflug;\n          \n          \n            \n                        updateProperties(newState.getProperties());\n          \n          \n            \n                        regionListeners.forEach(listener -> listener.notifyOnUpdate(pollenflug));\n          \n          \n            \n                        pollenflug.getChannelsStateMap().forEach(this::updateState);\n          \n          \n            \n                    }\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n      \n    \n    \n  \n\na State is something different in openHAB, this may result in confusion.", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"206\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> notifyOnUpdate(<span class=\"pl-k\">@Nullable</span> <span class=\"pl-smi\">DWDPollenflug</span> newState) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"207\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        <span class=\"pl-k\">if</span> (newState <span class=\"pl-k\">!=</span> <span class=\"pl-c1\">null</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"208\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            pollenflug <span class=\"pl-k\">=</span> newState;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"209\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            updateProperties(newState<span class=\"pl-k\">.</span>getProperties());</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"210\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            regionListeners<span class=\"pl-k\">.</span>forEach(listener <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> listener<span class=\"pl-k\">.</span>notifyOnUpdate(newState));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"211\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">            newState<span class=\"pl-k\">.</span>getChannelsStateMap()<span class=\"pl-k\">.</span>forEach(<span class=\"pl-c1\">this</span><span class=\"pl-k\">::</span>updateState);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"212\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">        }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"213\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\">    }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"206\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    <span class=\"pl-k\">public</span> <span class=\"pl-k\">void</span> notifyOnUpdate(<span class=\"pl-k\">@Nullable</span> <span class=\"pl-smi\">DWDPollenflug</span> pollenflug) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"207\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        <span class=\"pl-k\">if</span> (pollenflug <span class=\"pl-k\">!=</span> <span class=\"pl-c1\">null</span>) {</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"208\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            <span class=\"pl-c1\">this</span><span class=\"pl-k\">.</span>pollenflug <span class=\"pl-k\">=</span> pollenflug;</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"209\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            updateProperties(newState<span class=\"pl-k\">.</span>getProperties());</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"210\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            regionListeners<span class=\"pl-k\">.</span>forEach(listener <span class=\"pl-k\">-</span><span class=\"pl-k\">&gt;</span> listener<span class=\"pl-k\">.</span>notifyOnUpdate(pollenflug));</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"211\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">            pollenflug<span class=\"pl-k\">.</span>getChannelsStateMap()<span class=\"pl-k\">.</span>forEach(<span class=\"pl-c1\">this</span><span class=\"pl-k\">::</span>updateState);</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"212\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">        }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"213\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\">    }</td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"214\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n\n<p dir=\"auto\">a <code>State</code> is something different in openHAB, this may result in confusion.</p>", "author": "J-N-K", "createdAt": "2020-04-12T10:55:26Z", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "diffHunk": "@@ -0,0 +1,213 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import java.net.URI;\r\n+import java.util.Set;\r\n+import java.net.SocketTimeoutException;\r\n+import java.util.concurrent.CompletableFuture;\r\n+import java.util.concurrent.ConcurrentHashMap;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.TimeUnit;\r\n+import java.util.concurrent.TimeoutException;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.JsonSyntaxException;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.jetty.client.HttpClient;\r\n+import org.eclipse.jetty.client.HttpResponse;\r\n+import org.eclipse.jetty.client.api.Request;\r\n+import org.eclipse.jetty.client.api.Result;\r\n+import org.eclipse.jetty.client.util.BufferingResponseListener;\r\n+import org.eclipse.jetty.http.HttpMethod;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.openhab.binding.dwdpollenflug.internal.DWDPollingException;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugBridgeConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugBridgeHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugBridgeHandler extends BaseBridgeHandler {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugBridgeHandler.class);\r\n+\r\n+    private static final String DWD_URL = \"https://opendata.dwd.de/climate_environment/health/alerts/s31fg.json\";\r\n+\r\n+    private DWDPollenflugBridgeConfiguration bridgeConfig = new DWDPollenflugBridgeConfiguration();\r\n+\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    private @Nullable DWDPollenflug pollenflug;\r\n+\r\n+    private final Set<DWDPollenflugRegionHandler> regionListeners = ConcurrentHashMap.newKeySet();\r\n+\r\n+    private final HttpClient client;\r\n+\r\n+    private final Gson gson = new Gson();\r\n+\r\n+    public DWDPollenflugBridgeHandler(Bridge bridge, HttpClient client) {\r\n+        super(bridge);\r\n+        this.client = client;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void handleCommand(ChannelUID channelUID, Command command) {\r\n+        if (command instanceof RefreshType) {\r\n+            startPolling();\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void initialize() {\r\n+        logger.debug(\"Initializing DWD Pollenflug bridge handler\");\r\n+        bridgeConfig = getConfigAs(DWDPollenflugBridgeConfiguration.class);\r\n+\r\n+        if (bridgeConfig.isValid()) {\r\n+            startPolling();\r\n+            updateStatus(ThingStatus.ONLINE);\r\n+        } else {\r\n+            updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.CONFIGURATION_ERROR,\r\n+                    \"Refresh interval has to be at least 15 minutes.\");\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void dispose() {\r\n+        logger.debug(\"Handler disposed.\");\r\n+        stopPolling();\r\n+    }\r\n+\r\n+    private void startPolling() {\r\n+        final ScheduledFuture<?> localPollingJob = this.pollingJob;\r\n+        final DWDPollenflug localPollenflug = this.pollenflug;\r\n+        if (localPollingJob == null || localPollingJob.isCancelled()) {\r\n+            logger.debug(\"Start polling.\");\r\n+            pollingJob = scheduler.scheduleWithFixedDelay(this::poll, 0, bridgeConfig.refresh, TimeUnit.MINUTES);\r\n+        } else if (pollenflug != null) {\r\n+            notifyOnUpdate(localPollenflug);\r\n+        }\r\n+    }\r\n+\r\n+    private void stopPolling() {\r\n+        final ScheduledFuture<?> localPollingJob = this.pollingJob;\r\n+        if (localPollingJob != null && !localPollingJob.isCancelled()) {\r\n+            logger.debug(\"Stop polling.\");\r\n+            localPollingJob.cancel(true);\r\n+            pollingJob = null;\r\n+        }\r\n+    }\r\n+\r\n+    private void poll() {\r\n+        logger.debug(\"Polling\");\r\n+        requestRefresh().handle((pollenflug, pollException) -> {\r\n+            if (pollenflug == null) {\r\n+                if (pollException == null) {\r\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR);\r\n+                } else {\r\n+                    updateStatus(ThingStatus.OFFLINE, ThingStatusDetail.COMMUNICATION_ERROR,\r\n+                            pollException.getMessage());\r\n+                }\r\n+            } else {\r\n+                updateStatus(ThingStatus.ONLINE);\r\n+                notifyOnUpdate(pollenflug);\r\n+            }\r\n+\r\n+            return null;\r\n+        });\r\n+    }\r\n+\r\n+    private CompletableFuture<@Nullable DWDPollenflug> requestRefresh() {\r\n+        CompletableFuture<@Nullable DWDPollenflug> f = new CompletableFuture<>();\r\n+        Request request = client.newRequest(URI.create(DWD_URL));\r\n+\r\n+        request.method(HttpMethod.GET).timeout(2000, TimeUnit.SECONDS).send(new BufferingResponseListener() {\r\n+            @NonNullByDefault({})\r\n+            @Override\r\n+            public void onComplete(Result result) {\r\n+                final HttpResponse response = (HttpResponse) result.getResponse();\r\n+                if (result.getFailure() != null) {\r\n+                    Throwable e = result.getFailure();\r\n+                    if (e instanceof SocketTimeoutException || e instanceof TimeoutException) {\r\n+                        f.completeExceptionally(new DWDPollingException(\"Request timeout\", e));\r\n+                    } else {\r\n+                        f.completeExceptionally(new DWDPollingException(\"Request failed\", e));\r\n+                    }\r\n+                } else if (response.getStatus() != 200) {\r\n+                    f.completeExceptionally(new DWDPollingException(getContentAsString()));\r\n+                } else {\r\n+                    try {\r\n+                        DWDPollenflug pollenflugJSON = gson.fromJson(getContentAsString(), DWDPollenflug.class);\r\n+                        f.complete(pollenflugJSON);\r\n+                    } catch (JsonSyntaxException ex2) {\r\n+                        f.completeExceptionally(new DWDPollingException(\"Parsing of response failed\"));\r\n+                    }\r\n+                }\r\n+            }\r\n+        });\r\n+\r\n+        return f;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void childHandlerInitialized(ThingHandler childHandler, Thing childThing) {\r\n+        if (childHandler instanceof DWDPollenflugRegionHandler) {\r\n+            logger.debug(\"Register region listener.\");\r\n+            if (regionListeners.add((DWDPollenflugRegionHandler) childHandler)) {\r\n+                startPolling();\r\n+            } else {\r\n+                logger.warn(\"Tried to add listener {} but it was already present. This is probably an error.\",\r\n+                        childHandler);\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void childHandlerDisposed(ThingHandler childHandler, Thing childThing) {\r\n+        if (childHandler instanceof DWDPollenflugRegionHandler) {\r\n+            logger.debug(\"Unregister region listener.\");\r\n+            if (!regionListeners.remove((DWDPollenflugRegionHandler) childHandler)) {\r\n+                logger.warn(\"Tried to remove listener {} but it was not registered. This is probably an error.\",\r\n+                        childHandler);\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    public void notifyOnUpdate(@Nullable DWDPollenflug newState) {\r\n+        if (newState != null) {\r\n+            pollenflug = newState;\r\n+            updateProperties(newState.getProperties());\r\n+            regionListeners.forEach(listener -> listener.notifyOnUpdate(newState));\r\n+            newState.getChannelsStateMap().forEach(this::updateState);\r\n+        }\r\n+    }\r", "originalCommit": "68a53317d1681096640a47b9677e13cd3f1a34a6", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIwNTcwMg==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407205702", "bodyText": "Renamed", "author": "DerOetzi", "createdAt": "2020-04-12T14:26:10Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE4MTI3OQ=="}], "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIxOTYyNw==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407219627", "body": "can you remove all the blank lines between these fields. \r\nAlso can you make sure to order the fields: static final ->final->the rest.", "bodyText": "can you remove all the blank lines between these fields.\nAlso can you make sure to order the fields: static final ->final->the rest.", "bodyHTML": "<p dir=\"auto\">can you remove all the blank lines between these fields.<br>\nAlso can you make sure to order the fields: static final -&gt;final-&gt;the rest.</p>", "author": "cpmeister", "createdAt": "2020-04-12T16:15:10Z", "path": "bundles/org.openhab.binding.dwdpollenflug/src/main/java/org/openhab/binding/dwdpollenflug/internal/handler/DWDPollenflugBridgeHandler.java", "diffHunk": "@@ -0,0 +1,217 @@\n+/**\r\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\r\n+ *\r\n+ * See the NOTICE file(s) distributed with this work for additional\r\n+ * information.\r\n+ *\r\n+ * This program and the accompanying materials are made available under the\r\n+ * terms of the Eclipse Public License 2.0 which is available at\r\n+ * http://www.eclipse.org/legal/epl-2.0\r\n+ *\r\n+ * SPDX-License-Identifier: EPL-2.0\r\n+ */\r\n+package org.openhab.binding.dwdpollenflug.internal.handler;\r\n+\r\n+import java.net.URI;\r\n+import java.util.Set;\r\n+import java.net.SocketTimeoutException;\r\n+import java.util.concurrent.CompletableFuture;\r\n+import java.util.concurrent.ConcurrentHashMap;\r\n+import java.util.concurrent.ScheduledFuture;\r\n+import java.util.concurrent.TimeUnit;\r\n+import java.util.concurrent.TimeoutException;\r\n+\r\n+import com.google.gson.Gson;\r\n+import com.google.gson.JsonSyntaxException;\r\n+\r\n+import org.eclipse.jdt.annotation.NonNullByDefault;\r\n+import org.eclipse.jdt.annotation.Nullable;\r\n+import org.eclipse.jetty.client.HttpClient;\r\n+import org.eclipse.jetty.client.HttpResponse;\r\n+import org.eclipse.jetty.client.api.Request;\r\n+import org.eclipse.jetty.client.api.Result;\r\n+import org.eclipse.jetty.client.util.BufferingResponseListener;\r\n+import org.eclipse.jetty.http.HttpMethod;\r\n+import org.eclipse.smarthome.core.thing.Bridge;\r\n+import org.eclipse.smarthome.core.thing.ChannelUID;\r\n+import org.eclipse.smarthome.core.thing.Thing;\r\n+import org.eclipse.smarthome.core.thing.ThingStatus;\r\n+import org.eclipse.smarthome.core.thing.ThingStatusDetail;\r\n+import org.eclipse.smarthome.core.thing.binding.BaseBridgeHandler;\r\n+import org.eclipse.smarthome.core.thing.binding.ThingHandler;\r\n+import org.eclipse.smarthome.core.types.Command;\r\n+import org.eclipse.smarthome.core.types.RefreshType;\r\n+import org.openhab.binding.dwdpollenflug.internal.DWDPollingException;\r\n+import org.openhab.binding.dwdpollenflug.internal.config.DWDPollenflugBridgeConfiguration;\r\n+import org.openhab.binding.dwdpollenflug.internal.dto.DWDPollenflug;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+\r\n+/**\r\n+ * The {@link DWDPollenflugBridgeHandler} is the handler for bridge thing\r\n+ *\r\n+ * @author Johannes Ott - Initial contribution\r\n+ */\r\n+@NonNullByDefault\r\n+public class DWDPollenflugBridgeHandler extends BaseBridgeHandler {\r\n+\r\n+    private final Logger logger = LoggerFactory.getLogger(DWDPollenflugBridgeHandler.class);\r\n+\r\n+    private static final String DWD_URL = \"https://opendata.dwd.de/climate_environment/health/alerts/s31fg.json\";\r\n+\r\n+    private DWDPollenflugBridgeConfiguration bridgeConfig = new DWDPollenflugBridgeConfiguration();\r\n+\r\n+    private @Nullable ScheduledFuture<?> pollingJob;\r\n+\r\n+    private @Nullable DWDPollenflug pollenflug;\r\n+\r\n+    private final Set<DWDPollenflugRegionHandler> regionListeners = ConcurrentHashMap.newKeySet();\r\n+\r\n+    private final HttpClient client;\r\n+\r\n+    private final Gson gson = new Gson();\r", "originalCommit": "3cecb32078e251d9a7e6a6cd6c7365fe16221ba4", "replyToReviewId": null, "replies": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIyNzQ0Mw==", "url": "https://github.com/openhab/openhab-addons/pull/7298#discussion_r407227443", "bodyText": "Removed and sorted", "author": "DerOetzi", "createdAt": "2020-04-12T17:19:12Z", "replyToReviewId": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIxOTYyNw=="}], "type": "inlineReview"}, {"oid": "b4949de6537b3b308ad8f18c656bbebd1a6f67f7", "url": "https://github.com/openhab/openhab-addons/commit/b4949de6537b3b308ad8f18c656bbebd1a6f67f7", "message": "[DWDPollenflug] New Binding retry\n\nSigned-off-by: Johannes DerOetzi Ott <info@johannes-ott.net>", "committedDate": "2020-04-12T17:17:46Z", "type": "commit"}, {"oid": "3225407cf2ad18993dc0c138db6b65d2b0b3fb1e", "url": "https://github.com/openhab/openhab-addons/commit/3225407cf2ad18993dc0c138db6b65d2b0b3fb1e", "message": "[DWDPollenflug] Fixed review comments of J-N-K\n\nSigned-off-by: Johannes DerOetzi Ott <info@johannes-ott.net>", "committedDate": "2020-04-12T17:17:46Z", "type": "commit"}, {"oid": "e66e63d4b299777a1ef87602545c4ed40e007afa", "url": "https://github.com/openhab/openhab-addons/commit/e66e63d4b299777a1ef87602545c4ed40e007afa", "message": "[DWDPollenflug] Configuration attributes changed to public\n\nSigned-off-by: Johannes DerOetzi Ott <info@johannes-ott.net>", "committedDate": "2020-04-12T17:17:46Z", "type": "commit"}, {"oid": "5846a9d5024a16ee1f88d6fdcf2597862c5203e1", "url": "https://github.com/openhab/openhab-addons/commit/5846a9d5024a16ee1f88d6fdcf2597862c5203e1", "message": "[DWDPollenflug] DWDPollingException changed to checked Exception\n\nSigned-off-by: Johannes DerOetzi Ott <info@johannes-ott.net>", "committedDate": "2020-04-12T17:17:46Z", "type": "commit"}, {"oid": "43c63e579aa45dc95a2f581e8bacf3f6e73bb353", "url": "https://github.com/openhab/openhab-addons/commit/43c63e579aa45dc95a2f581e8bacf3f6e73bb353", "message": "[DWDPollenflug] Removed unused constant\n\nSigned-off-by: Johannes DerOetzi Ott <info@johannes-ott.net>", "committedDate": "2020-04-12T17:17:46Z", "type": "commit"}, {"oid": "42943a797577a1da2f40103144cd9582d3e33959", "url": "https://github.com/openhab/openhab-addons/commit/42943a797577a1da2f40103144cd9582d3e33959", "message": "[DWDPollenflug] Fixed review comments of cpmeister\n\nSigned-off-by: Johannes DerOetzi Ott <info@johannes-ott.net>", "committedDate": "2020-04-12T17:17:46Z", "type": "commit"}, {"oid": "1759f77b9ed0dd6489dda1a820eb018036ab5430", "url": "https://github.com/openhab/openhab-addons/commit/1759f77b9ed0dd6489dda1a820eb018036ab5430", "message": "[DWDPollenflug] Improved NP-handling\n\nSigned-off-by: Johannes DerOetzi Ott <info@johannes-ott.net>", "committedDate": "2020-04-12T17:17:47Z", "type": "commit"}, {"oid": "237d011f8deffc8dd36f1ee86f7ae248a5c16161", "url": "https://github.com/openhab/openhab-addons/commit/237d011f8deffc8dd36f1ee86f7ae248a5c16161", "message": "[DWDPollenflug] refactored DTO structure\n\nSigned-off-by: Johannes DerOetzi Ott <info@johannes-ott.net>", "committedDate": "2020-04-12T17:17:47Z", "type": "commit"}, {"oid": "7985f41ad63522da7e2561af8bbce42e439d20f9", "url": "https://github.com/openhab/openhab-addons/commit/7985f41ad63522da7e2561af8bbce42e439d20f9", "message": "[DWDPollenflug] Removed updated trigger channel\n\nSigned-off-by: Johannes DerOetzi Ott <info@johannes-ott.net>", "committedDate": "2020-04-12T17:17:47Z", "type": "commit"}, {"oid": "2e1f89cecf243b20d633d5b35e38374252e5a7af", "url": "https://github.com/openhab/openhab-addons/commit/2e1f89cecf243b20d633d5b35e38374252e5a7af", "message": "[DWDPollenflug] Changed labels to convention\n\nSigned-off-by: Johannes DerOetzi Ott <info@johannes-ott.net>", "committedDate": "2020-04-12T17:17:47Z", "type": "commit"}, {"oid": "f1e9f6071e20ba99ccc20e897411225853536ed6", "url": "https://github.com/openhab/openhab-addons/commit/f1e9f6071e20ba99ccc20e897411225853536ed6", "message": "[DWDPollenflug] Fixed review comment in README\n\nSigned-off-by: Johannes DerOetzi Ott <info@johannes-ott.net>", "committedDate": "2020-04-12T17:17:47Z", "type": "commit"}, {"oid": "ef5478077824276d55bf4427c81115de4e0c2bdc", "url": "https://github.com/openhab/openhab-addons/commit/ef5478077824276d55bf4427c81115de4e0c2bdc", "message": "[DWDPollenflug] Additional review fixes\n\nSigned-off-by: Johannes DerOetzi Ott <info@johannes-ott.net>", "committedDate": "2020-04-12T17:17:47Z", "type": "commit"}, {"oid": "0f9b151f97d34eb919f3427ad7dcd7d9357ae3f0", "url": "https://github.com/openhab/openhab-addons/commit/0f9b151f97d34eb919f3427ad7dcd7d9357ae3f0", "message": "[DWDPollenflug] Replaced constant SECONDS_OF_MINUTE with TimeUnit\n\nSigned-off-by: Johannes DerOetzi Ott <info@johannes-ott.net>", "committedDate": "2020-04-12T17:17:47Z", "type": "commit"}, {"oid": "4ff2427c82a294f8243bfa7c9195db4d8b8e0cb5", "url": "https://github.com/openhab/openhab-addons/commit/4ff2427c82a294f8243bfa7c9195db4d8b8e0cb5", "message": "[DWDPollenflug] Fixed scheduler TimeUnit\n\nSigned-off-by: Johannes DerOetzi Ott <info@johannes-ott.net>", "committedDate": "2020-04-12T17:17:47Z", "type": "commit"}, {"oid": "7f9ef53c00c429f0760c01837392f3c6c5eb344f", "url": "https://github.com/openhab/openhab-addons/commit/7f9ef53c00c429f0760c01837392f3c6c5eb344f", "message": "[DWDPollenflug] Thread-safe Set for listeners\n\nSigned-off-by: Johannes DerOetzi Ott <info@johannes-ott.net>", "committedDate": "2020-04-12T17:17:47Z", "type": "commit"}, {"oid": "e6f4b83ffa7a7512bdb8f2ce59953499578c888b", "url": "https://github.com/openhab/openhab-addons/commit/e6f4b83ffa7a7512bdb8f2ce59953499578c888b", "message": "[DWDPollenflug] Refactored registration of region handlers\n\nSigned-off-by: Johannes DerOetzi Ott <info@johannes-ott.net>", "committedDate": "2020-04-12T17:17:47Z", "type": "commit"}, {"oid": "6f49ffb6fb0fd8feead0bc4c9aff2d0410c86b1d", "url": "https://github.com/openhab/openhab-addons/commit/6f49ffb6fb0fd8feead0bc4c9aff2d0410c86b1d", "message": "[DWDPollenflug] Changed author tags\n\nSigned-off-by: Johannes DerOetzi Ott <info@johannes-ott.net>", "committedDate": "2020-04-12T17:17:47Z", "type": "commit"}, {"oid": "42aefb7c90f282dd82d690d6b83e5f39cef661ee", "url": "https://github.com/openhab/openhab-addons/commit/42aefb7c90f282dd82d690d6b83e5f39cef661ee", "message": "[DWDPollenflug] Add configuration error description\n\nSigned-off-by: Johannes DerOetzi Ott <info@johannes-ott.net>", "committedDate": "2020-04-12T17:17:47Z", "type": "commit"}, {"oid": "9bc97f83f1789bde52b86af1602dbf1a9ec5ff53", "url": "https://github.com/openhab/openhab-addons/commit/9bc97f83f1789bde52b86af1602dbf1a9ec5ff53", "message": "[DWDPollenflug] Refactored startPolling and calls\n\nSigned-off-by: Johannes DerOetzi Ott <info@johannes-ott.net>", "committedDate": "2020-04-12T17:17:47Z", "type": "commit"}, {"oid": "ce0db1adba7e382f0c607cf104297fb417397ba9", "url": "https://github.com/openhab/openhab-addons/commit/ce0db1adba7e382f0c607cf104297fb417397ba9", "message": "[DWDPollenflug] Reformated BridgeHandler\n\nSigned-off-by: Johannes DerOetzi Ott <info@johannes-ott.net>", "committedDate": "2020-04-12T17:17:47Z", "type": "commit"}, {"oid": "2cfa05bea959b308d2a79e4e1082ee90ff1be8de", "url": "https://github.com/openhab/openhab-addons/commit/2cfa05bea959b308d2a79e4e1082ee90ff1be8de", "message": "[DWDPollenflug] Small formatting fix\n\nSigned-off-by: Johannes DerOetzi Ott <info@johannes-ott.net>", "committedDate": "2020-04-12T17:17:48Z", "type": "commit"}, {"oid": "2cfa05bea959b308d2a79e4e1082ee90ff1be8de", "url": "https://github.com/openhab/openhab-addons/commit/2cfa05bea959b308d2a79e4e1082ee90ff1be8de", "message": "[DWDPollenflug] Small formatting fix\n\nSigned-off-by: Johannes DerOetzi Ott <info@johannes-ott.net>", "committedDate": "2020-04-12T17:17:48Z", "type": "forcePushed"}]}