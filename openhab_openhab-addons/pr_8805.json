{"pr_number": 8805, "pr_title": "[neohub] added automatic discovery of NeoHubs", "pr_author": "andrewfg", "pr_createdAt": "2020-10-19T18:51:29Z", "pr_url": "https://github.com/openhab/openhab-addons/pull/8805", "timeline": [{"oid": "91ec2582cee3e4b020e27d7d00288e9c5eeb0682", "url": "https://github.com/openhab/openhab-addons/commit/91ec2582cee3e4b020e27d7d00288e9c5eeb0682", "message": "[neohub] add mdns hub discovery\n\nSigned-off-by: Andrew Fiddian-Green <software@whitebear.ch>", "committedDate": "2020-10-17T15:11:29Z", "type": "commit"}, {"oid": "091ecadd036695f3f7c80e798ab1d757d24fbc6a", "url": "https://github.com/openhab/openhab-addons/commit/091ecadd036695f3f7c80e798ab1d757d24fbc6a", "message": "[neohub] mdns discovery improved code style\n\nSigned-off-by: Andrew Fiddian-Green <software@whitebear.ch>", "committedDate": "2020-10-19T18:47:07Z", "type": "commit"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg3Nzk2Mw==", "url": "https://github.com/openhab/openhab-addons/pull/8805#discussion_r508877963", "body": "Components shouldn't be declared immediate anymore.\r\n\r\n```suggestion\r\n@Component\r\n```", "bodyText": "Components shouldn't be declared immediate anymore.\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            @Component(immediate = true)\n          \n          \n            \n            @Component", "bodyHTML": "<p dir=\"auto\">Components shouldn't be declared immediate anymore.</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"><span class=\"pl-k\">@Component</span><span class=\"x x-first\">(</span><span class=\"pl-c1 x\">immediate</span><span class=\"x\"> </span><span class=\"pl-k x\">=</span><span class=\"x\"> </span><span class=\"pl-c1 x\">true</span><span class=\"x x-last\">)</span></td>\n          </tr>\n          <tr class=\"border-0\">\n            <td class=\"blob-num blob-num-addition text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-addition js-blob-code-addition blob-code-marker-addition\"><span class=\"pl-k\">@Component</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "cpmeister", "createdAt": "2020-10-20T22:29:11Z", "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubDiscoveryParticipant.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.neohub.internal;\n+\n+import java.net.Inet4Address;\n+import java.util.Collections;\n+import java.util.Set;\n+\n+import javax.jmdns.ServiceInfo;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.mdns.MDNSDiscoveryParticipant;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Discovers NeoHubs by means of mDNS-SD\n+ *\n+ * @author Andrew Fiddian-Green - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(immediate = true)", "originalCommit": "091ecadd036695f3f7c80e798ab1d757d24fbc6a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg3ODM0Mg==", "url": "https://github.com/openhab/openhab-addons/pull/8805#discussion_r508878342", "body": "You can omit `@Nullable` for local variables.\r\n```suggestion\r\n```", "bodyText": "You can omit @Nullable for local variables.\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    @Nullable", "bodyHTML": "<p dir=\"auto\">You can omit <code>@Nullable</code> for local variables.</p>\n  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"><span class=\"x x-first\">        </span><span class=\"pl-k x x-last\">@Nullable</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "cpmeister", "createdAt": "2020-10-20T22:30:04Z", "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubDiscoveryParticipant.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.neohub.internal;\n+\n+import java.net.Inet4Address;\n+import java.util.Collections;\n+import java.util.Set;\n+\n+import javax.jmdns.ServiceInfo;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.mdns.MDNSDiscoveryParticipant;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Discovers NeoHubs by means of mDNS-SD\n+ *\n+ * @author Andrew Fiddian-Green - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(immediate = true)\n+public class NeoHubDiscoveryParticipant implements MDNSDiscoveryParticipant {\n+\n+    private static final String HEATMISER_NEO_HUB = \"Heatmiser neoHub\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(NeoHubDiscoveryParticipant.class);\n+\n+    /**\n+     * Check if the {@link ServiceInfo} refers to a valid NeoHub, and if so return its IPv4 address\n+     *\n+     * @param serviceInfo\n+     * @return the ip address if it is a valid neohub, or null if not\n+     */\n+    private @Nullable String getIpAddressIfValidNeoHub(ServiceInfo serviceInfo) {\n+        if (HEATMISER_NEO_HUB.equals(serviceInfo.getName())) {\n+            for (Inet4Address ipAddr : serviceInfo.getInet4Addresses()) {\n+                String ipStr = ipAddr.getHostAddress();\n+                return ipStr;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public Set<ThingTypeUID> getSupportedThingTypeUIDs() {\n+        return Collections.singleton(NeoHubBindingConstants.THING_TYPE_NEOHUB);\n+    }\n+\n+    @Override\n+    public String getServiceType() {\n+        return \"_hap._tcp.local.\";\n+    }\n+\n+    @Override\n+    public @Nullable DiscoveryResult createResult(ServiceInfo serviceInfo) {\n+        @Nullable", "originalCommit": "091ecadd036695f3f7c80e798ab1d757d24fbc6a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg3ODQyNQ==", "url": "https://github.com/openhab/openhab-addons/pull/8805#discussion_r508878425", "body": "```suggestion\r\n```", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    @Nullable", "bodyHTML": "  <div class=\"my-2 border rounded-1 js-suggested-changes-blob diff-view js-check-bidi\" id=\"\">\n    <div class=\"f6 p-2 lh-condensed border-bottom d-flex\">\n      <div class=\"flex-auto flex-items-center color-fg-muted\">\n        Suggested change\n        <span class=\"tooltipped tooltipped-multiline tooltipped-s\" aria-label=\"This code change can be committed by users with write permissions.\">\n          <svg aria-hidden=\"true\" height=\"16\" viewBox=\"0 0 16 16\" version=\"1.1\" width=\"16\" data-view-component=\"true\" class=\"octicon octicon-info hide-sm\">\n    <path fill-rule=\"evenodd\" d=\"M8 1.5a6.5 6.5 0 100 13 6.5 6.5 0 000-13zM0 8a8 8 0 1116 0A8 8 0 010 8zm6.5-.25A.75.75 0 017.25 7h1a.75.75 0 01.75.75v2.75h.25a.75.75 0 010 1.5h-2a.75.75 0 010-1.5h.25v-2h-.25a.75.75 0 01-.75-.75zM8 6a1 1 0 100-2 1 1 0 000 2z\"></path>\n</svg>\n        </span>\n      </div>\n    </div>\n    <div itemprop=\"text\" class=\"blob-wrapper data file\" style=\"margin: 0; border: none; overflow-y: visible; overflow-x: auto;\">\n      <table class=\"d-table tab-size mb-0 width-full\" data-paste-markdown-skip=\"\">\n          <tbody><tr class=\"border-0\">\n            <td class=\"blob-num blob-num-deletion text-right border-0 px-2 py-1 lh-default\" data-line-number=\"\"></td>\n            <td class=\"border-0 px-2 py-1 blob-code-inner blob-code-deletion js-blob-code-deletion blob-code-marker-deletion\"><span class=\"x x-first\">        </span><span class=\"pl-k x x-last\">@Nullable</span></td>\n          </tr>\n      </tbody></table>\n    </div>\n    <div class=\"js-apply-changes\"></div>\n  </div>\n", "author": "cpmeister", "createdAt": "2020-10-20T22:30:20Z", "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubDiscoveryParticipant.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.neohub.internal;\n+\n+import java.net.Inet4Address;\n+import java.util.Collections;\n+import java.util.Set;\n+\n+import javax.jmdns.ServiceInfo;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.mdns.MDNSDiscoveryParticipant;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Discovers NeoHubs by means of mDNS-SD\n+ *\n+ * @author Andrew Fiddian-Green - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(immediate = true)\n+public class NeoHubDiscoveryParticipant implements MDNSDiscoveryParticipant {\n+\n+    private static final String HEATMISER_NEO_HUB = \"Heatmiser neoHub\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(NeoHubDiscoveryParticipant.class);\n+\n+    /**\n+     * Check if the {@link ServiceInfo} refers to a valid NeoHub, and if so return its IPv4 address\n+     *\n+     * @param serviceInfo\n+     * @return the ip address if it is a valid neohub, or null if not\n+     */\n+    private @Nullable String getIpAddressIfValidNeoHub(ServiceInfo serviceInfo) {\n+        if (HEATMISER_NEO_HUB.equals(serviceInfo.getName())) {\n+            for (Inet4Address ipAddr : serviceInfo.getInet4Addresses()) {\n+                String ipStr = ipAddr.getHostAddress();\n+                return ipStr;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public Set<ThingTypeUID> getSupportedThingTypeUIDs() {\n+        return Collections.singleton(NeoHubBindingConstants.THING_TYPE_NEOHUB);\n+    }\n+\n+    @Override\n+    public String getServiceType() {\n+        return \"_hap._tcp.local.\";\n+    }\n+\n+    @Override\n+    public @Nullable DiscoveryResult createResult(ServiceInfo serviceInfo) {\n+        @Nullable\n+        String ipStr = getIpAddressIfValidNeoHub(serviceInfo);\n+        if (ipStr != null) {\n+            ThingUID thingUID = new ThingUID(NeoHubBindingConstants.THING_TYPE_NEOHUB, ipStr.replace('.', '_'));\n+            DiscoveryResult hub = DiscoveryResultBuilder.create(thingUID)\n+                    .withProperty(NeoHubConfiguration.HOST_NAME, ipStr)\n+                    .withRepresentationProperty(NeoHubConfiguration.HOST_NAME).withLabel(\"NeoHub (\" + ipStr + \")\")\n+                    .build();\n+            logger.debug(\"Discovered a NeoHub on host '{}'\", ipStr);\n+            return hub;\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public @Nullable ThingUID getThingUID(ServiceInfo serviceInfo) {\n+        @Nullable", "originalCommit": "091ecadd036695f3f7c80e798ab1d757d24fbc6a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODg3OTAxMA==", "url": "https://github.com/openhab/openhab-addons/pull/8805#discussion_r508879010", "body": "The discovery service is going to log this anyway, so I don't think this log is necessary.", "bodyText": "The discovery service is going to log this anyway, so I don't think this log is necessary.", "bodyHTML": "<p dir=\"auto\">The discovery service is going to log this anyway, so I don't think this log is necessary.</p>", "author": "cpmeister", "createdAt": "2020-10-20T22:31:55Z", "path": "bundles/org.openhab.binding.neohub/src/main/java/org/openhab/binding/neohub/internal/NeoHubDiscoveryParticipant.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.binding.neohub.internal;\n+\n+import java.net.Inet4Address;\n+import java.util.Collections;\n+import java.util.Set;\n+\n+import javax.jmdns.ServiceInfo;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.config.discovery.DiscoveryResult;\n+import org.openhab.core.config.discovery.DiscoveryResultBuilder;\n+import org.openhab.core.config.discovery.mdns.MDNSDiscoveryParticipant;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Discovers NeoHubs by means of mDNS-SD\n+ *\n+ * @author Andrew Fiddian-Green - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(immediate = true)\n+public class NeoHubDiscoveryParticipant implements MDNSDiscoveryParticipant {\n+\n+    private static final String HEATMISER_NEO_HUB = \"Heatmiser neoHub\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(NeoHubDiscoveryParticipant.class);\n+\n+    /**\n+     * Check if the {@link ServiceInfo} refers to a valid NeoHub, and if so return its IPv4 address\n+     *\n+     * @param serviceInfo\n+     * @return the ip address if it is a valid neohub, or null if not\n+     */\n+    private @Nullable String getIpAddressIfValidNeoHub(ServiceInfo serviceInfo) {\n+        if (HEATMISER_NEO_HUB.equals(serviceInfo.getName())) {\n+            for (Inet4Address ipAddr : serviceInfo.getInet4Addresses()) {\n+                String ipStr = ipAddr.getHostAddress();\n+                return ipStr;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public Set<ThingTypeUID> getSupportedThingTypeUIDs() {\n+        return Collections.singleton(NeoHubBindingConstants.THING_TYPE_NEOHUB);\n+    }\n+\n+    @Override\n+    public String getServiceType() {\n+        return \"_hap._tcp.local.\";\n+    }\n+\n+    @Override\n+    public @Nullable DiscoveryResult createResult(ServiceInfo serviceInfo) {\n+        @Nullable\n+        String ipStr = getIpAddressIfValidNeoHub(serviceInfo);\n+        if (ipStr != null) {\n+            ThingUID thingUID = new ThingUID(NeoHubBindingConstants.THING_TYPE_NEOHUB, ipStr.replace('.', '_'));\n+            DiscoveryResult hub = DiscoveryResultBuilder.create(thingUID)\n+                    .withProperty(NeoHubConfiguration.HOST_NAME, ipStr)\n+                    .withRepresentationProperty(NeoHubConfiguration.HOST_NAME).withLabel(\"NeoHub (\" + ipStr + \")\")\n+                    .build();\n+            logger.debug(\"Discovered a NeoHub on host '{}'\", ipStr);", "originalCommit": "091ecadd036695f3f7c80e798ab1d757d24fbc6a", "replyToReviewId": null, "replies": null, "type": "inlineReview"}, {"oid": "9c1bef5ebb6fbc0f557da286f6bc9b024900035f", "url": "https://github.com/openhab/openhab-addons/commit/9c1bef5ebb6fbc0f557da286f6bc9b024900035f", "message": "[neohub] changes in response to reviewer feedback\n\nSigned-off-by: Andrew Fiddian-Green <software@whitebear.ch>", "committedDate": "2020-10-21T11:37:36Z", "type": "commit"}]}